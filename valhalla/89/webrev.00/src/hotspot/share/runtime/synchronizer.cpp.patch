diff a/src/hotspot/share/runtime/synchronizer.cpp b/src/hotspot/share/runtime/synchronizer.cpp
--- a/src/hotspot/share/runtime/synchronizer.cpp
+++ b/src/hotspot/share/runtime/synchronizer.cpp
@@ -448,11 +448,11 @@
   assert(!SafepointSynchronize::is_at_safepoint(), "invariant");
   assert(self->is_Java_thread(), "invariant");
   assert(((JavaThread *) self)->thread_state() == _thread_in_Java, "invariant");
   NoSafepointVerifier nsv;
   if (obj == NULL) return false;  // slow-path for invalid obj
-  assert(!EnableValhalla || !obj->klass()->is_value(), "monitor op on value type");
+  assert(!EnableValhalla || !obj->klass()->is_inline_klass(), "monitor op on inline type");
   const markWord mark = obj->mark();
 
   if (mark.has_locker() && self->is_lock_owned((address)mark.locker())) {
     // Degenerate notify
     // stack-locked by caller so by definition the implied waitset is empty.
@@ -499,11 +499,11 @@
   assert(!SafepointSynchronize::is_at_safepoint(), "invariant");
   assert(self->is_Java_thread(), "invariant");
   assert(((JavaThread *) self)->thread_state() == _thread_in_Java, "invariant");
   NoSafepointVerifier nsv;
   if (obj == NULL) return false;       // Need to throw NPE
-  assert(!EnableValhalla || !obj->klass()->is_value(), "monitor op on value type");
+  assert(!EnableValhalla || !obj->klass()->is_inline_klass(), "monitor op on inline type");
   const markWord mark = obj->mark();
 
   if (mark.has_monitor()) {
     ObjectMonitor* const m = mark.monitor();
     if (AsyncDeflateIdleMonitors) {
@@ -610,11 +610,11 @@
 void ObjectSynchronizer::exit(oop object, BasicLock* lock, TRAPS) {
   markWord mark = object->mark();
   if (EnableValhalla && mark.is_always_locked()) {
     return;
   }
-  assert(!EnableValhalla || !object->klass()->is_value(), "monitor op on value type");
+  assert(!EnableValhalla || !object->klass()->is_inline_klass(), "monitor op on inline type");
   // We cannot check for Biased Locking if we are racing an inflation.
   assert(mark == markWord::INFLATING() ||
          !mark.has_bias_pattern(), "should not see bias pattern here");
 
   markWord dhw = lock->displaced_header();
@@ -674,11 +674,11 @@
 //  3) when notified on lock2, unlock lock2
 //  4) reenter lock1 with original recursion count
 //  5) lock lock2
 // NOTE: must use heavy weight monitor to handle complete_exit/reenter()
 intx ObjectSynchronizer::complete_exit(Handle obj, TRAPS) {
-  assert(!EnableValhalla || !obj->klass()->is_value(), "monitor op on value type");
+  assert(!EnableValhalla || !obj->klass()->is_inline_klass(), "monitor op on inline type");
   if (UseBiasedLocking) {
     BiasedLocking::revoke(obj, THREAD);
     assert(!obj->mark().has_bias_pattern(), "biases should be revoked by now");
   }
 
@@ -689,11 +689,11 @@
   return ret_code;
 }
 
 // NOTE: must use heavy weight monitor to handle complete_exit/reenter()
 void ObjectSynchronizer::reenter(Handle obj, intx recursions, TRAPS) {
-  assert(!EnableValhalla || !obj->klass()->is_value(), "monitor op on value type");
+  assert(!EnableValhalla || !obj->klass()->is_inline_klass(), "monitor op on inline type");
   if (UseBiasedLocking) {
     BiasedLocking::revoke(obj, THREAD);
     assert(!obj->mark().has_bias_pattern(), "biases should be revoked by now");
   }
 
@@ -1010,12 +1010,12 @@
   assert(value != markWord::no_hash, "invariant");
   return value;
 }
 
 intptr_t ObjectSynchronizer::FastHashCode(Thread* self, oop obj) {
-  if (EnableValhalla && obj->klass()->is_value()) {
-    // Expected tooling to override hashCode for value type, just don't crash
+  if (EnableValhalla && obj->klass()->is_inline_klass()) {
+    // Expected tooling to override hashCode for inline type, just don't crash
     if (log_is_enabled(Debug, monitorinflation)) {
       ResourceMark rm;
       log_debug(monitorinflation)("FastHashCode for value type: %s", obj->klass()->external_name());
     }
     return obj->klass()->java_mirror()->identity_hash();
@@ -1809,11 +1809,11 @@
   // Relaxing assertion for bug 6320749.
   assert(Universe::verify_in_progress() ||
          !SafepointSynchronize::is_at_safepoint(), "invariant");
 
   if (EnableValhalla) {
-    guarantee(!object->klass()->is_value(), "Attempt to inflate value type");
+    guarantee(!object->klass()->is_inline_klass(), "Attempt to inflate inline type");
   }
 
   EventJavaMonitorInflate event;
 
   for (;;) {
