diff a/src/hotspot/share/prims/jni.cpp b/src/hotspot/share/prims/jni.cpp
--- a/src/hotspot/share/prims/jni.cpp
+++ b/src/hotspot/share/prims/jni.cpp
@@ -1078,11 +1078,11 @@
   if (k == NULL) {
     ResourceMark rm(THREAD);
     THROW_(vmSymbols::java_lang_InstantiationException(), NULL);
   }
 
-  if (!k->is_value()) {
+  if (!k->is_inline_klass()) {
     instanceOop i = InstanceKlass::allocate_instance(clazzoop, CHECK_NULL);
     obj = JNIHandles::make_local(env, i);
     JavaValue jvalue(T_VOID);
     JNI_ArgumentPusherArray ap(methodID, args);
     jni_invoke_nonstatic(env, &jvalue, obj, JNI_NONVIRTUAL, methodID, &ap, CHECK_NULL);
@@ -1112,11 +1112,11 @@
   if (k == NULL) {
     ResourceMark rm(THREAD);
     THROW_(vmSymbols::java_lang_InstantiationException(), NULL);
   }
 
-  if (!k->is_value()) {
+  if (!k->is_inline_klass()) {
     instanceOop i = InstanceKlass::allocate_instance(clazzoop, CHECK_NULL);
     obj = JNIHandles::make_local(env, i);
     JavaValue jvalue(T_VOID);
     JNI_ArgumentPusherVaArg ap(methodID, args);
     jni_invoke_nonstatic(env, &jvalue, obj, JNI_NONVIRTUAL, methodID, &ap, CHECK_NULL);
@@ -1146,11 +1146,11 @@
   if (k == NULL) {
     ResourceMark rm(THREAD);
     THROW_(vmSymbols::java_lang_InstantiationException(), NULL);
   }
 
-  if (!k->is_value()) {
+  if (!k->is_inline_klass()) {
     instanceOop i = InstanceKlass::allocate_instance(clazzoop, CHECK_NULL);
     obj = JNIHandles::make_local(env, i);
     va_list args;
     va_start(args, methodID);
     JavaValue jvalue(T_VOID);
@@ -3444,11 +3444,11 @@
 JNI_ENTRY(jsize, jni_GetFieldOffsetInFlattenedLayout(JNIEnv* env, jclass clazz, const char *name, const char *signature, jboolean* is_inlined))
   JNIWrapper("jni_GetFieldOffsetInFlattenedLayout");
 
   oop mirror = JNIHandles::resolve_non_null(clazz);
   Klass* k = java_lang_Class::as_Klass(mirror);
-  if (!k->is_value()) {
+  if (!k->is_inline_klass()) {
     ResourceMark rm;
         THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(), err_msg("%s has not flattened layout", k->external_name()));
   }
   ValueKlass* vk = ValueKlass::cast(k);
 
@@ -3511,11 +3511,11 @@
   if (!is_inlined) {
     THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), "SubElement is not inlined");
   }
   oop semirror = jdk_internal_vm_jni_SubElementSelector::getSubElementType(slct);
   Klass* k = java_lang_Class::as_Klass(semirror);
-  if (!k->is_value()) {
+  if (!k->is_inline_klass()) {
     ResourceMark rm;
         THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(), err_msg("%s is not an inline type", k->external_name()));
   }
   ValueKlass* vk = ValueKlass::cast(k);
   assert(vk->is_initialized(), "If a flattened array has been created, the element klass must have been initialized");
