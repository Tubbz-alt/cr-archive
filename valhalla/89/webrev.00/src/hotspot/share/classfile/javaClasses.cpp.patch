diff a/src/hotspot/share/classfile/javaClasses.cpp b/src/hotspot/share/classfile/javaClasses.cpp
--- a/src/hotspot/share/classfile/javaClasses.cpp
+++ b/src/hotspot/share/classfile/javaClasses.cpp
@@ -1007,11 +1007,11 @@
 
     // It might also have a component mirror.  This mirror must already exist.
     if (k->is_array_klass()) {
       if (k->is_valueArray_klass()) {
         Klass* element_klass = (Klass*) ValueArrayKlass::cast(k)->element_klass();
-        assert(element_klass->is_value(), "Must be value type component");
+        assert(element_klass->is_inline_klass(), "Must be inline type component");
         ValueKlass* vk = ValueKlass::cast(InstanceKlass::cast(element_klass));
         comp_mirror = Handle(THREAD, vk->java_mirror());
       } else if (k->is_typeArray_klass()) {
         BasicType type = TypeArrayKlass::cast(k)->element_type();
         comp_mirror = Handle(THREAD, Universe::java_mirror(type));
@@ -1058,11 +1058,11 @@
       // Set after k->java_mirror() is published, because compiled code running
       // concurrently doesn't expect a k to have a null java_mirror.
       release_set_array_klass(comp_mirror(), k);
     }
 
-    if (k->is_value()) {
+    if (k->is_inline_klass()) {
       InstanceKlass* super = k->java_super();
       set_val_type_mirror(mirror(), mirror());
 
       // if the supertype is a restricted abstract class
       if (super != SystemDictionary::Object_klass()) {
@@ -1230,12 +1230,12 @@
       k->set_java_mirror_handle(OopHandle());
       return NULL;
     }
   }
 
-  if (k->is_value()) {
-    // Values have a val type mirror and a ref type mirror. Don't handle this for now. TODO:CDS
+  if (k->is_inline_klass()) {
+    // Inline types have a val type mirror and a ref type mirror. Don't handle this for now. TODO:CDS
     k->set_java_mirror_handle(OopHandle());
     return NULL;
   }
 
   // Now start archiving the mirror object
@@ -1589,11 +1589,11 @@
   if (is_primitive(java_class)) {
     name = vmSymbols::type_signature(primitive_type(java_class));
   } else {
     Klass* k = as_Klass(java_class);
     is_instance = k->is_instance_klass();
-    is_value = k->is_value();
+    is_value = k->is_inline_klass();
     name = k->name();
   }
   if (name == NULL) {
     st->print("<null>");
     return;
