diff a/src/hotspot/share/oops/instanceKlass.cpp b/src/hotspot/share/oops/instanceKlass.cpp
--- a/src/hotspot/share/oops/instanceKlass.cpp
+++ b/src/hotspot/share/oops/instanceKlass.cpp
@@ -1015,11 +1015,11 @@
                                                              Handle(THREAD, loader), Handle(THREAD, protection_domain), true,
                                                              CHECK_false);
             if (klass == NULL) {
               THROW_(vmSymbols::java_lang_LinkageError(), false);
             }
-            if (!klass->is_value()) {
+            if (!klass->is_inline_klass()) {
               Exceptions::fthrow(
                 THREAD_AND_LOCATION,
                 vmSymbols::java_lang_IncompatibleClassChangeError(),
                 "class %s is not an inline type",
                 klass->external_name());
@@ -1268,11 +1268,11 @@
               Handle(THREAD, protection_domain()),
               true, CHECK);
           if (klass == NULL) {
             THROW(vmSymbols::java_lang_NoClassDefFoundError());
           }
-          if (!klass->is_value()) {
+          if (!klass->is_inline_klass()) {
             THROW(vmSymbols::java_lang_IncompatibleClassChangeError());
           }
           this->set_value_field_klass(fs.index(), klass);
         }
         InstanceKlass::cast(klass)->initialize(CHECK);
@@ -1718,11 +1718,11 @@
   // 4) otherwise field lookup fails
   return NULL;
 }
 
 bool InstanceKlass::contains_field_offset(int offset) {
-  if (this->is_value()) {
+  if (this->is_inline_klass()) {
     ValueKlass* vk = ValueKlass::cast(this);
     return offset >= vk->first_field_offset() && offset < (vk->first_field_offset() + vk->get_exact_size_in_bytes());
   } else {
     fieldDescriptor fd;
     return find_field_from_offset(offset, false, &fd);
@@ -2695,11 +2695,11 @@
   // sure the current state is <loaded.
   assert(!is_loaded(), "invalid init state");
   set_package(loader_data, pkg_entry, CHECK);
   Klass::restore_unshareable_info(loader_data, protection_domain, CHECK);
 
-  if (is_value()) {
+  if (is_inline_klass()) {
     ValueKlass::cast(this)->initialize_calling_convention(CHECK);
   }
 
   Array<Method*>* methods = this->methods();
   int num_methods = methods->length();
@@ -2724,11 +2724,11 @@
     // --> see ArrayKlass::complete_create_array_klass()
     array_klasses()->restore_unshareable_info(ClassLoaderData::the_null_class_loader_data(), Handle(), CHECK);
   }
 
   // Initialize current biased locking state.
-  if (UseBiasedLocking && BiasedLocking::enabled() && !is_value()) {
+  if (UseBiasedLocking && BiasedLocking::enabled() && !is_inline_klass()) {
     set_prototype_header(markWord::biased_locking_prototype());
   }
 }
 
 void InstanceKlass::set_shared_class_loader_type(s2 loader_type) {
@@ -2891,11 +2891,11 @@
 
   char* dest = NEW_RESOURCE_ARRAY(char, src_length + hash_len + 3);
 
   // Add L or Q as type indicator
   int dest_index = 0;
-  dest[dest_index++] = is_value() ? JVM_SIGNATURE_INLINE_TYPE : JVM_SIGNATURE_CLASS;
+  dest[dest_index++] = is_inline_klass() ? JVM_SIGNATURE_INLINE_TYPE : JVM_SIGNATURE_CLASS;
 
   // Add the actual class name
   for (int src_index = 0; src_index < src_length; ) {
     dest[dest_index++] = src[src_index++];
   }
