diff a/src/hotspot/share/oops/instanceKlass.hpp b/src/hotspot/share/oops/instanceKlass.hpp
--- a/src/hotspot/share/oops/instanceKlass.hpp
+++ b/src/hotspot/share/oops/instanceKlass.hpp
@@ -1216,11 +1216,11 @@
                                                nonstatic_oop_map_size(),
                                                is_interface(),
                                                is_unsafe_anonymous(),
                                                has_stored_fingerprint(),
                                                has_inline_fields() ? java_fields_count() : 0,
-                                               is_value());
+                                               is_inline_klass());
   }
 
   intptr_t* start_of_itable()   const { return (intptr_t*)start_of_vtable() + vtable_length(); }
   intptr_t* end_of_itable()     const { return start_of_itable() + itable_length(); }
 
@@ -1303,18 +1303,18 @@
 
   Klass* get_value_field_klass(int idx) const {
     assert(has_inline_fields(), "Sanity checking");
     Klass* k = ((Klass**)adr_value_fields_klasses())[idx];
     assert(k != NULL, "Should always be set before being read");
-    assert(k->is_value(), "Must be a inline type");
+    assert(k->is_inline_klass(), "Must be a inline type");
     return k;
   }
 
   Klass* get_value_field_klass_or_null(int idx) const {
     assert(has_inline_fields(), "Sanity checking");
     Klass* k = ((Klass**)adr_value_fields_klasses())[idx];
-    assert(k == NULL || k->is_value(), "Must be a inline type");
+    assert(k == NULL || k->is_inline_klass(), "Must be a inline type");
     return k;
   }
 
   void set_value_field_klass(int idx, Klass* k) {
     assert(has_inline_fields(), "Sanity checking");
