diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symbol.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symbol.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symbol.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symbol.java
@@ -412,10 +412,37 @@
 
     public boolean isPrivate() {
         return (flags_field & Flags.AccessFlags) == PRIVATE;
     }
 
+    public boolean isValue() {
+        return (flags() & VALUE) != 0;
+    }
+
+    /**
+     * Is this a *derived* reference projection symbol ??
+     */
+    public boolean isReferenceProjection() {
+        return false;
+    }
+
+    /**
+     * Return the value projection IFF 'this' happens to be derived reference projection, null
+     * otherwise.
+     */
+    public Symbol valueProjection() {
+        return null;
+    }
+
+    /**
+     * Return the reference projection IFF 'this' happens to be value projection, null
+     * otherwise.
+     */
+    public Symbol referenceProjection() {
+        return null;
+    }
+
     public boolean isPublic() {
         return (flags_field & Flags.AccessFlags) == PUBLIC;
     }
 
     public boolean isEnum() {
@@ -453,11 +480,17 @@
     }
 
     /** Is this symbol a constructor?
      */
     public boolean isConstructor() {
-        return name == name.table.names.init;
+        return name == name.table.names.init && (flags() & STATIC) == 0;
+    }
+
+    /** Is this symbol a value factory?
+     */
+    public boolean isValueFactory() {
+        return ((name == name.table.names.init && this.type.getReturnType().tsym == this.owner));
     }
 
     public boolean isDynamic() {
         return false;
     }
@@ -516,19 +549,21 @@
         }
         return (ClassSymbol)c;
     }
 
     /** The outermost class which indirectly owns this symbol.
+     * 'outermost' being a lexical construct, should transcend
+     *  projections
      */
     public ClassSymbol outermostClass() {
         Symbol sym = this;
         Symbol prev = null;
         while (sym.kind != PCK) {
             prev = sym;
             sym = sym.owner;
         }
-        return (ClassSymbol) prev;
+        return (ClassSymbol) (prev!= null && prev.isReferenceProjection() ? prev.valueProjection() : prev);
     }
 
     /** The package which indirectly owns this symbol.
      */
     public PackageSymbol packge() {
@@ -1291,10 +1326,16 @@
         /* the list of any of record components, only non empty if the class is a record
          * and it has at least one record component
          */
         private List<RecordComponent> recordComponents = List.nil();
 
+        /* the 'other' projection: If 'this' is an inline class then 'projection' is its reference projection
+           and vice versa.
+         */
+        public ClassSymbol projection;
+
+
         // sealed classes related fields
         /** The classes, or interfaces, permitted to extend this class, or interface
          */
         public List<Symbol> permitted;
 
@@ -1358,11 +1399,11 @@
 
         public String className() {
             if (name.isEmpty())
                 return
                     Log.getLocalizedString("anonymous.class", flatname);
-            else
+
                 return fullname.toString();
         }
 
         @DefinedBy(Api.LANGUAGE_MODEL)
         public Name getQualifiedName() {
@@ -1616,10 +1657,65 @@
 
         public boolean isRecord() {
             return (flags_field & RECORD) != 0;
         }
 
+        @Override
+        public boolean isReferenceProjection() {
+            return projection != null && projection.isValue();
+        }
+
+        @Override
+        public ClassSymbol valueProjection() {
+            return isReferenceProjection() ? projection : null;
+        }
+
+        @Override
+        public ClassSymbol referenceProjection() {
+            if (!isValue() || projection != null)
+                return projection;
+
+            ClassType ct = (ClassType) this.type;
+            ClassType projectedType = new ClassType(ct.getEnclosingType(), ct.typarams_field, null);
+            projectedType.allparams_field = ct.allparams_field;
+            projectedType.supertype_field = ct.supertype_field;
+
+            projectedType.interfaces_field = ct.interfaces_field;
+            projectedType.all_interfaces_field = ct.all_interfaces_field;
+            projectedType.projection = ct;
+            ct.projection = projectedType;
+
+            Name projectionName = this.name.append('$', this.name.table.names.ref);
+            long projectionFlags = (this.flags() & ~(VALUE | UNATTRIBUTED));
+
+            projection = new ClassSymbol(projectionFlags, projectionName, projectedType, this.owner);
+            projection.members_field = WriteableScope.create(projection);
+            for (Symbol s : this.members().getSymbols(s->(s.kind == MTH || s.kind == VAR), NON_RECURSIVE)) {
+                Symbol clone = null;
+                if (s.kind == MTH) {
+                    MethodSymbol valMethod = (MethodSymbol)s;
+                    MethodSymbol refMethod = valMethod.clone(projection);
+                    valMethod.projection = refMethod;
+                    refMethod.projection = valMethod;
+                    clone = refMethod;
+                } else if (s.kind == VAR) {
+                    VarSymbol valVar = (VarSymbol)s;
+                    VarSymbol refVar = valVar.clone(projection);
+                    valVar.projection = refVar;
+                    refVar.projection = valVar;
+                    clone = refVar;
+                }
+                projection.members_field.enter(clone);
+            }
+            projection.completer = Completer.NULL_COMPLETER;
+            projection.sourcefile = this.sourcefile;
+            projection.flatname = this.flatname.append('$', this.name.table.names.ref);
+            projection.projection = this;
+            projectedType.tsym = projection;
+            return projection;
+        }
+
         @DefinedBy(Api.LANGUAGE_MODEL)
         public List<Type> getPermittedSubclasses() {
             return permitted.map(s -> s.type);
         }
     }
@@ -1642,10 +1738,15 @@
          *  Code generation:
          *    If this is a local variable, its logical slot number.
          */
         public int adr = -1;
 
+        /* The 'other' projection: If 'this' is a field of an inline class, then 'projection' is the
+           its doppleganger in its referene projection class and vice versa.
+        */
+        public VarSymbol projection;
+
         /** Construct a variable symbol, given its flags, name, type and owner.
          */
         public VarSymbol(long flags, Name name, Type type, Symbol owner) {
             super(VAR, flags, name, type, owner);
         }
@@ -1674,10 +1775,11 @@
                 }
             };
             v.pos = pos;
             v.adr = adr;
             v.data = data;
+            v.projection = projection;
 //          System.out.println("clone " + v + " in " + newOwner);//DEBUG
             return v;
         }
 
         public String toString() {
@@ -1726,10 +1828,22 @@
                                       final JCVariableDecl variable)
         {
             setData((Callable<Object>)() -> attr.attribLazyConstantValue(env, variable, type));
         }
 
+        @Override
+        public VarSymbol referenceProjection() {
+            return this.owner.isValue() ?
+                    this.owner.referenceProjection() != null ? projection : null
+                               : null;
+        }
+
+        @Override
+        public VarSymbol valueProjection() {
+            return  projection != null ? projection.owner.isValue() ? projection : null: null;
+        }
+
         /**
          * The variable's constant value, if this is a constant.
          * Before the constant value is evaluated, it points to an
          * initializer environment.  If this is not a constant, it can
          * be used for other stuff.
@@ -1887,10 +2001,15 @@
          *  The value is null if none appeared in the method
          *  declaration.
          */
         public Attribute defaultValue = null;
 
+        /* The 'other' projection: If 'this' is a method of an inline class, then 'projection' is the
+           its doppleganger in its referene projection class and vice versa.
+        */
+        public MethodSymbol projection;
+
         /** Construct a method symbol, given its flags, name, type and owner.
          */
         public MethodSymbol(long flags, Name name, Type type, Symbol owner) {
             super(MTH, flags, name, type, owner);
             if (owner.type.hasTag(TYPEVAR)) Assert.error(owner + "." + name);
@@ -1909,10 +2028,11 @@
                 public Object poolKey(Types types) {
                     return new Pair<>(newOwner, baseSymbol());
                 }
             };
             m.code = code;
+            m.projection = projection;
             return m;
         }
 
         @Override @DefinedBy(Api.LANGUAGE_MODEL)
         public Set<Modifier> getModifiers() {
@@ -2057,10 +2177,20 @@
          */
         public boolean overrides(Symbol _other, TypeSymbol origin, Types types, boolean checkResult,
                                             boolean requireConcreteIfInherited) {
             if (isConstructor() || _other.kind != MTH) return false;
 
+
+            /* If any inline types are involved, ask the same question in the reference universe,
+               where the hierarchy is navigable
+            */
+            if (origin.isValue())
+                origin = (TypeSymbol) origin.referenceProjection();
+
+            if (this.owner.isValue())
+                return this.projection.overrides(_other, origin, types, checkResult, requireConcreteIfInherited);
+
             if (this == _other) return true;
             MethodSymbol other = (MethodSymbol)_other;
 
             // check for a direct implementation
             if (other.isOverridableIn((TypeSymbol)owner) &&
@@ -2111,10 +2241,19 @@
             }
         }
 
         @Override
         public boolean isInheritedIn(Symbol clazz, Types types) {
+
+            /* If any inline types are involved, ask the same question in the reference universe,
+               where the hierarchy is navigable
+            */
+            if (clazz.isValue())
+                clazz = clazz.referenceProjection();
+            if (this.owner.isValue())
+                return this.projection.isInheritedIn(clazz, types);
+
             switch ((int)(flags_field & Flags.AccessFlags)) {
                 case PUBLIC:
                     return !this.owner.isInterface() ||
                             clazz == owner ||
                             (flags_field & STATIC) == 0;
@@ -2125,10 +2264,22 @@
 
         public boolean isLambdaMethod() {
             return (flags() & LAMBDA_METHOD) == LAMBDA_METHOD;
         }
 
+        @Override
+        public MethodSymbol referenceProjection() {
+            return this.owner.isValue() ?
+                    this.owner.referenceProjection() != null ? projection : null
+                    : null;
+        }
+
+        @Override
+        public MethodSymbol valueProjection() {
+            return  projection != null ? projection.owner.isValue() ? projection : null : null;
+        }
+
         /** override this method to point to the original enclosing method if this method symbol represents a synthetic
          *  lambda method
          */
         public MethodSymbol originalEnclosingMethod() {
             return this;
@@ -2418,11 +2569,11 @@
             }
             accessCode = AccessCode.from(tag, opcode);
             return accessCode;
         }
 
-        /** Access codes for dereferencing, assignment,
+        /** Access codes for dereferencing, assignment, withfield
          *  and pre/post increment/decrement.
 
          *  All access codes for accesses to the current class are even.
          *  If a member of the superclass should be accessed instead (because
          *  access was via a qualified super), add one to the corresponding code
@@ -2438,11 +2589,12 @@
             ASSIGN(2, Tag.ASSIGN),
             PREINC(4, Tag.PREINC),
             PREDEC(6, Tag.PREDEC),
             POSTINC(8, Tag.POSTINC),
             POSTDEC(10, Tag.POSTDEC),
-            FIRSTASGOP(12, Tag.NO_TAG);
+            WITHFIELD(12, Tag.WITHFIELD),
+            FIRSTASGOP(14, Tag.NO_TAG);
 
             public final int code;
             public final Tag tag;
             public static final int numberOfAccessCodes = (lushrl - ishll + lxor + 2 - iadd) * 2 + FIRSTASGOP.code + 2;
 
@@ -2471,10 +2623,12 @@
                         return AccessCode.PREDEC.code;
                     case POSTINC:
                         return AccessCode.POSTINC.code;
                     case POSTDEC:
                         return AccessCode.POSTDEC.code;
+                    case WITHFIELD:
+                        return AccessCode.WITHFIELD.code;
                 }
                 if (iadd <= opcode && opcode <= lxor) {
                     return (opcode - iadd) * 2 + FIRSTASGOP.code;
                 } else if (opcode == string_add) {
                     return (lxor + 1 - iadd) * 2 + FIRSTASGOP.code;
