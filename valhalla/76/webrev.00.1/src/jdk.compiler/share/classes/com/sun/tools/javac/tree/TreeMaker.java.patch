diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java
@@ -255,10 +255,16 @@
         JCWhileLoop tree = new JCWhileLoop(cond, body);
         tree.pos = pos;
         return tree;
     }
 
+    public JCWithField WithField(JCExpression field, JCExpression value) {
+        JCWithField tree = new JCWithField(field, value);
+        tree.pos = pos;
+        return tree;
+    }
+
     public JCForLoop ForLoop(List<JCStatement> init,
                            JCExpression cond,
                            List<JCExpressionStatement> step,
                            JCStatement body)
     {
@@ -813,17 +819,32 @@
                 }
                 tp = TypeIntersection(la.toList());
                 break;
             }
             default: {
-                Type outer = t.getEnclosingType();
-                JCExpression clazz = outer.hasTag(CLASS) && t.tsym.owner.kind == TYP
-                        ? Select(Type(outer), t.tsym)
-                        : QualIdent(t.tsym);
-                tp = t.getTypeArguments().isEmpty()
-                        ? clazz
-                        : TypeApply(clazz, Types(t.getTypeArguments()));
+                if (t.isReferenceProjection()) {
+                    // For parameterized types, we want V.ref<A1 ... An> not V<A1 ... An>.ref
+                    JCExpression vp = Type(t.valueProjection());
+                    if (vp.hasTag(Tag.TYPEAPPLY)) {
+                        // vp now is V<A1 ... An>, build V.ref<A1 ... An>
+                        JCFieldAccess f = (JCFieldAccess) Select(((JCTypeApply) vp).clazz, t.tsym);
+                        f.name = names.ref;
+                        tp = TypeApply(f, ((JCTypeApply) vp).arguments);
+                    } else {
+                        JCFieldAccess f = (JCFieldAccess) Select(vp, t.tsym);
+                        f.name = names.ref;
+                        tp = f;
+                    }
+                } else {
+                    Type outer = t.getEnclosingType();
+                    JCExpression clazz = outer.hasTag(CLASS) && t.tsym.owner.kind == TYP
+                            ? Select(Type(outer), t.tsym)
+                            : QualIdent(t.tsym);
+                    tp = t.getTypeArguments().isEmpty()
+                            ? clazz
+                            : TypeApply(clazz, Types(t.getTypeArguments()));
+                }
                 break;
             }
             }
             break;
         case ARRAY:
