diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeInfo.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeInfo.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeInfo.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeInfo.java
@@ -107,21 +107,24 @@
             if (isConstructor(l.head)) return true;
         return false;
     }
 
     /** Is there a constructor invocation in the given list of trees?
+     *  Optionally, check only for no-arg ctor invocation
      */
-    public static Name getConstructorInvocationName(List<? extends JCTree> trees, Names names) {
+    public static Name getConstructorInvocationName(List<? extends JCTree> trees, Names names, boolean argsAllowed) {
         for (JCTree tree : trees) {
             if (tree.hasTag(EXEC)) {
                 JCExpressionStatement stat = (JCExpressionStatement)tree;
                 if (stat.expr.hasTag(APPLY)) {
                     JCMethodInvocation apply = (JCMethodInvocation)stat.expr;
-                    Name methName = TreeInfo.name(apply.meth);
-                    if (methName == names._this ||
-                        methName == names._super) {
-                        return methName;
+                    if (argsAllowed || apply.args.size() == 0) {
+                        Name methName = TreeInfo.name(apply.meth);
+                        if (methName == names._this ||
+                                methName == names._super) {
+                            return methName;
+                        }
                     }
                 }
             }
         }
         return names.empty;
@@ -620,10 +623,12 @@
                 return getEndPos(((JCWildcard) tree).inner, endPosTable);
             case TYPECAST:
                 return getEndPos(((JCTypeCast) tree).expr, endPosTable);
             case TYPETEST:
                 return getEndPos(((JCInstanceOf) tree).pattern, endPosTable);
+            case WITHFIELD:
+                return getEndPos(((JCWithField) tree).value, endPosTable);
             case WHILELOOP:
                 return getEndPos(((JCWhileLoop) tree).body, endPosTable);
             case ANNOTATED_TYPE:
                 return getEndPos(((JCAnnotatedType) tree).underlyingType, endPosTable);
             case ERRONEOUS: {
