diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java
@@ -103,10 +103,14 @@
 
     /** Switch: allow modules.
      */
     boolean allowModules;
 
+    /** Switch: allow inline types.
+     */
+    boolean allowInlineTypes;
+
     /** Switch: allow sealed
      */
     boolean allowSealedTypes;
 
     /** Switch: allow records
@@ -119,10 +123,14 @@
 
     /** Switch: preserve parameter names from the variable table.
      */
     public boolean saveParameterNames;
 
+    /** Switch: Should javac recongnize and handle value based classes specially ?
+     */
+    private boolean allowValueBasedClasses;
+
     /**
      * The currently selected profile.
      */
     public final Profile profile;
 
@@ -270,16 +278,18 @@
         verbose         = options.isSet(Option.VERBOSE);
 
         Source source = Source.instance(context);
         preview = Preview.instance(context);
         allowModules     = Feature.MODULES.allowedInSource(source);
+        allowInlineTypes = Feature.INLINE_TYPES.allowedInSource(source);
         allowRecords = (!preview.isPreview(Feature.RECORDS) || preview.isEnabled()) &&
                 Feature.RECORDS.allowedInSource(source);
         allowSealedTypes = (!preview.isPreview(Feature.SEALED_CLASSES) || preview.isEnabled()) &&
                 Feature.SEALED_CLASSES.allowedInSource(source);
 
         saveParameterNames = options.isSet(PARAMETERS);
+        allowValueBasedClasses = options.isSet("allowValueBasedClasses");
 
         profile = Profile.instance(context);
 
         typevars = WriteableScope.create(syms.noSymbol);
 
@@ -467,10 +477,11 @@
             sigp++;
             return syms.intType;
         case 'J':
             sigp++;
             return syms.longType;
+        case 'Q':
         case 'L':
             {
                 // int oldsigp = sigp;
                 Type t = classSigToType();
                 if (sigp < siglimit && signature[sigp] == '.')
@@ -528,11 +539,11 @@
     byte[] signatureBuffer = new byte[0];
     int sbp = 0;
     /** Convert class signature to type, where signature is implicit.
      */
     Type classSigToType() {
-        if (signature[sigp] != 'L')
+        if (signature[sigp] != 'L' && signature[sigp] != 'Q')
             throw badClassFile("bad.class.signature",
                                Convert.utf2string(signature, sigp, 10));
         sigp++;
         Type outer = Type.noType;
         int startSbp = sbp;
@@ -785,10 +796,21 @@
         AttributeReader[] readers = {
             // v45.3 attributes
 
             new AttributeReader(names.Code, V45_3, MEMBER_ATTRIBUTE) {
                 protected void read(Symbol sym, int attrLen) {
+                    if (allowInlineTypes) {
+                        if (sym.isConstructor()  && ((MethodSymbol) sym).type.getParameterTypes().size() == 0) {
+                            int code_length = buf.getInt(bp + 4);
+                            if ((code_length == 1 && buf.getByte( bp + 8) == (byte) ByteCodes.return_) ||
+                                    (code_length == 5 && buf.getByte(bp + 8) == ByteCodes.aload_0 &&
+                                        buf.getByte( bp + 9) == (byte) ByteCodes.invokespecial &&
+                                                buf.getByte( bp + 12) == (byte) ByteCodes.return_)) {
+                                    sym.flags_field |= EMPTYNOARGCONSTR;
+                            }
+                        }
+                    }
                     if (saveParameterNames)
                         ((MethodSymbol)sym).code = readCode(sym);
                     else
                         bp = bp + attrLen;
                 }
@@ -1432,10 +1454,12 @@
             } else {
                 if (proxy.type.tsym == syms.annotationTargetType.tsym) {
                     target = proxy;
                 } else if (proxy.type.tsym == syms.repeatableType.tsym) {
                     repeatable = proxy;
+                } else if (allowValueBasedClasses && sym.kind == TYP && proxy.type.tsym == syms.valueBasedType.tsym) {
+                    sym.flags_field |= VALUEBASED;
                 } else if (proxy.type.tsym == syms.deprecatedType.tsym) {
                     sym.flags_field |= (DEPRECATED | DEPRECATED_ANNOTATION);
                     setFlagIfAttributeTrue(proxy, sym, names.forRemoval, DEPRECATED_REMOVAL);
                 }  else if (proxy.type.tsym == syms.previewFeatureType.tsym) {
                     sym.flags_field |= PREVIEW_API;
@@ -2209,10 +2233,17 @@
                 throw badClassFile((flags & STATIC) == 0 ? "invalid.default.interface" : "invalid.static.interface",
                                    Integer.toString(majorVersion),
                                    Integer.toString(minorVersion));
             }
         }
+        if (name == names.init && ((flags & STATIC) != 0)) {
+            flags &= ~STATIC;
+            type = new MethodType(type.getParameterTypes(),
+                    syms.voidType,
+                    type.getThrownTypes(),
+                    syms.methodClass);
+        }
         if (name == names.init && currentOwner.hasOuterInstance()) {
             // Sometimes anonymous classes don't have an outer
             // instance, however, there is no reliable way to tell so
             // we never strip this$n
             // ditto for local classes. Local classes that have an enclosing method set
@@ -2594,10 +2625,36 @@
         }
         readClass(c);
     }
 
     public void readClassFile(ClassSymbol c) {
+        readClassFileInternal(c);
+        if (c.isValue()) {
+            /* http://cr.openjdk.java.net/~briangoetz/valhalla/sov/04-translation.html
+               The relationship of value and reference projections differs between the language model
+               and the VM model. In the language, the value projection is not a subtype of the
+               reference projection; instead, the two are related by inline narrowing and widening
+               conversions, whereas in the VM, the two are related by actual subtyping.
+               Sever the subtyping relationship by rewiring the supertypes here and now.
+             */
+
+            Name flatname = TypeSymbol.formFlatName(names.ref, c);
+            ClassSymbol referenceProjection = syms.getClass(currentModule, flatname);
+            if (referenceProjection != null) {
+                if (referenceProjection.name != names.ref && referenceProjection.owner.kind == PCK) {
+                    readClassFileInternal(referenceProjection);
+                    ClassType classType = (ClassType) c.type;
+                    classType.supertype_field = ((ClassType) referenceProjection.type).supertype_field;
+                    classType.interfaces_field = ((ClassType) referenceProjection.type).interfaces_field;
+                    // Discard the projection, it will be recomputed on the fly.
+                    referenceProjection.owner.members().remove(referenceProjection);
+                }
+            }
+        }
+    }
+
+    private void readClassFileInternal(ClassSymbol c) {
         currentOwner = c;
         currentClassFile = c.classfile;
         warnedAttrs.clear();
         filling = true;
         target = null;
@@ -2689,10 +2746,14 @@
     long adjustClassFlags(long flags) {
         if ((flags & ACC_MODULE) != 0) {
             flags &= ~ACC_MODULE;
             flags |= MODULE;
         }
+        if ((flags & ACC_VALUE) != 0) {
+            flags &= ~ACC_VALUE;
+            flags |= allowInlineTypes ? VALUE : allowValueBasedClasses ? VALUEBASED : 0;
+        }
         return flags & ~ACC_SUPER; // SUPER and SYNCHRONIZED bits overloaded
     }
 
     /**
      * A subclass of JavaFileObject for the sourcefile attribute found in a classfile.
