diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassWriter.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassWriter.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassWriter.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassWriter.java
@@ -139,10 +139,12 @@
     private final Log log;
 
     /** The name table. */
     private final Names names;
 
+    private final Symtab syms;
+
     /** Access to files. */
     private final JavaFileManager fileManager;
 
     /** The tags and constants used in compressed stackmap. */
     static final int SAME_FRAME_SIZE = 64;
@@ -172,10 +174,11 @@
         source = Source.instance(context);
         types = Types.instance(context);
         check = Check.instance(context);
         fileManager = context.get(JavaFileManager.class);
         poolWriter = Gen.instance(context).poolWriter;
+        syms = Symtab.instance(context);
 
         verbose        = options.isSet(VERBOSE);
         genCrt         = options.isSet(XJCOV);
         debugstackmap = options.isSet("debug.stackmap");
 
@@ -894,10 +897,13 @@
     private void listNested(Symbol sym, ListBuffer<ClassSymbol> seen) {
         if (sym.kind != TYP) return;
         ClassSymbol csym = (ClassSymbol)sym;
         if (csym.owner.kind != PCK) {
             seen.add(csym);
+            if (csym.isValue()) {
+                seen.add(csym.referenceProjection());
+            }
         }
         if (csym.members() != null) {
             for (Symbol s : sym.members().getSymbols()) {
                 listNested(s, seen);
             }
@@ -1222,10 +1228,14 @@
                 if (debugstackmap) System.out.print("null");
                 databuf.appendByte(5);
                 break;
             case CLASS:
             case ARRAY:
+                if (debugstackmap) System.out.print("object(" + types.erasure(t).tsym + ")");
+                databuf.appendByte(7);
+                databuf.appendChar(types.isValue(t) ? poolWriter.putClass(new ConstantPoolQType(types.erasure(t), types)) : poolWriter.putClass(types.erasure(t)));
+                break;
             case TYPEVAR:
                 if (debugstackmap) System.out.print("object(" + types.erasure(t).tsym + ")");
                 databuf.appendByte(7);
                 databuf.appendChar(poolWriter.putClass(types.erasure(t)));
                 break;
@@ -1483,10 +1493,22 @@
     /** Emit a class file for a given class.
      *  @param c      The class from which a class file is generated.
      */
     public JavaFileObject writeClass(ClassSymbol c)
         throws IOException, PoolOverflow, StringOverflow
+    {
+        JavaFileObject javaFileObject = writeClassInternal(c);
+        if (c.isValue()) {
+            ClassSymbol refProjection = c.referenceProjection();
+            refProjection.flags_field = (refProjection.flags_field & ~FINAL) | ABSTRACT;
+            writeClassInternal(refProjection);
+        }
+        return javaFileObject;
+    }
+
+    private JavaFileObject writeClassInternal(ClassSymbol c)
+        throws IOException, PoolOverflow, StringOverflow
     {
         String name = (c.owner.kind == MDL ? c.name : c.flatname).toString();
         Location outLocn;
         if (multiModuleMode) {
             ModuleSymbol msym = c.owner.kind == MDL ? (ModuleSymbol) c.owner : c.packge().modle;
@@ -1525,21 +1547,21 @@
         throws IOException, PoolOverflow, StringOverflow {
         Assert.check((c.flags() & COMPOUND) == 0);
         databuf.reset();
         poolbuf.reset();
 
-        Type supertype = types.supertype(c.type);
-        List<Type> interfaces = types.interfaces(c.type);
+        Type supertype = c.isValue() ? c.type.referenceProjection() : types.supertype(c.type);
+        List<Type> interfaces = c.isValue() ? List.nil() : types.interfaces(c.type);
         List<Type> typarams = c.type.getTypeArguments();
 
         int flags;
         if (c.owner.kind == MDL) {
             flags = ACC_MODULE;
         } else {
             flags = adjustFlags(c.flags() & ~DEFAULT);
             if ((flags & PROTECTED) != 0) flags |= PUBLIC;
-            flags = flags & ClassFlags & ~STRICTFP;
+            flags = flags & (ClassFlags | ACC_VALUE) & ~STRICTFP;
             if ((flags & INTERFACE) == 0) flags |= ACC_SUPER;
         }
 
         if (dumpClassModifiers) {
             PrintWriter pw = log.getWriter(Log.WriterKind.ERROR);
@@ -1559,30 +1581,41 @@
         databuf.appendChar(interfaces.length());
         for (List<Type> l = interfaces; l.nonEmpty(); l = l.tail)
             databuf.appendChar(poolWriter.putClass((ClassSymbol)l.head.tsym));
         int fieldsCount = 0;
         int methodsCount = 0;
-        for (Symbol sym : c.members().getSymbols(NON_RECURSIVE)) {
-            switch (sym.kind) {
-            case VAR: fieldsCount++; break;
-            case MTH: if ((sym.flags() & HYPOTHETICAL) == 0) methodsCount++;
-                      break;
-            case TYP: poolWriter.enterInner((ClassSymbol)sym); break;
-            default : Assert.error();
+        boolean referenceProjection = c.isReferenceProjection();
+        if (!referenceProjection) {
+            for (Symbol sym : c.members().getSymbols(NON_RECURSIVE)) {
+                switch (sym.kind) {
+                    case VAR:
+                        fieldsCount++;
+                        break;
+                    case MTH:
+                        if ((sym.flags() & HYPOTHETICAL) == 0) methodsCount++;
+                        break;
+                    case TYP:
+                        poolWriter.enterInner((ClassSymbol)sym);
+                        break;
+                    default:
+                        Assert.error();
+                }
             }
-        }
-
-        if (c.trans_local != null) {
-            for (ClassSymbol local : c.trans_local) {
+
+            if (c.trans_local != null) {
+                for (ClassSymbol local : c.trans_local) {
+                    poolWriter.enterInner(local);
                 poolWriter.enterInner(local);
             }
         }
 
         databuf.appendChar(fieldsCount);
-        writeFields(c.members());
+        if (!referenceProjection)
+            writeFields(c.members());
         databuf.appendChar(methodsCount);
-        writeMethods(c.members());
+        if (!referenceProjection)
+            writeMethods(c.members());
 
         int acountIdx = beginAttrs();
         int acount = 0;
 
         boolean sigReq =
@@ -1701,10 +1734,12 @@
             result |= ACC_BRIDGE;
         if ((flags & VARARGS) != 0)
             result |= ACC_VARARGS;
         if ((flags & DEFAULT) != 0)
             result &= ~ABSTRACT;
+        if ((flags & VALUE) != 0)
+            result |= ACC_VALUE;
         return result;
     }
 
     long getLastModified(FileObject filename) {
         long mod = 0;
