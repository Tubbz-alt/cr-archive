diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties b/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties
@@ -2941,10 +2941,13 @@
     inline type
 
 compiler.misc.feature.records=\
     records
 
+compiler.misc.feature.sealed.classes=\
+    sealed classes
+
 compiler.warn.underscore.as.identifier=\
     as of release 9, ''_'' is a keyword, and may not be used as an identifier
 
 compiler.err.underscore.as.identifier=\
     as of release 9, ''_'' is a keyword, and may not be used as an identifier
@@ -3443,10 +3446,69 @@
     unexpected statement in case, expected is an expression, a block or a throw statement
 
 compiler.err.switch.mixing.case.types=\
     different case kinds used in the switch
 
+###
+# errors related to sealed classes
+
+# permits clause
+# 0: fragment
+compiler.err.invalid.permits.clause=\
+    invalid permits clause\n\
+    ({0})
+
+# 0: string
+compiler.misc.class.is.not.sealed=\
+    {0} must be sealed
+
+# 0: type
+compiler.misc.is.a.type.variable=\
+    must not include type variables: {0}
+
+# 0: type
+compiler.misc.is.duplicated=\
+    must not contain duplicates: {0}
+
+# 0: type
+compiler.misc.doesnt.extend.sealed=\
+    subclass {0} must extend sealed class
+
+compiler.misc.must.not.be.same.class=\
+    illegal self-reference in permits clause
+
+# 0: type
+compiler.misc.must.not.be.supertype=\
+    illegal reference to supertype {0}
+
+# other sealed types related errors
+
+compiler.err.sealed.class.must.have.subclasses=\
+    sealed class must have subclasses
+
+# errors in subclasses of sealed classes
+# 0: symbol
+compiler.err.cant.inherit.from.sealed=\
+    class is not allowed to extend sealed class: {0}
+
+# 0: symbol
+compiler.err.non.sealed.with.no.sealed.supertype=\
+    non-sealed modifier not allowed here\n\
+    (class {0} does not have any sealed supertypes)
+
+compiler.err.non.sealed.sealed.or.final.expected=\
+    sealed, non-sealed or final modifiers expected
+
+compiler.err.non.sealed.or.sealed.expected=\
+    sealed or non-sealed modifiers expected
+
+compiler.err.sealed.or.non.sealed.local.classes.not.allowed=\
+    sealed or non-sealed local classes are not allowed
+
+compiler.err.local.classes.cant.extend.sealed=\
+    local classes must not extend sealed classes
+
 ###
 # errors related to records
 
 # record components
 compiler.err.record.cant.declare.field.modifiers=\
