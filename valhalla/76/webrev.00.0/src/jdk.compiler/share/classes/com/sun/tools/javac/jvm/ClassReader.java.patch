diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -107,10 +107,14 @@
 
     /** Switch: allow inline types.
      */
     boolean allowInlineTypes;
 
+    /** Switch: allow sealed
+     */
+    boolean allowSealedTypes;
+
     /** Switch: allow records
      */
     boolean allowRecords;
 
    /** Lint option: warn about classfile issues
@@ -277,10 +281,12 @@
         preview = Preview.instance(context);
         allowModules     = Feature.MODULES.allowedInSource(source);
         allowInlineTypes = Feature.INLINE_TYPES.allowedInSource(source);
         allowRecords = (!preview.isPreview(Feature.RECORDS) || preview.isEnabled()) &&
                 Feature.RECORDS.allowedInSource(source);
+        allowSealedTypes = (!preview.isPreview(Feature.SEALED_CLASSES) || preview.isEnabled()) &&
+                Feature.SEALED_CLASSES.allowedInSource(source);
 
         saveParameterNames = options.isSet(PARAMETERS);
         allowValueBasedClasses = options.isSet("allowValueBasedClasses");
 
         profile = Profile.instance(context);
@@ -1222,11 +1228,27 @@
                     if (sym.kind == TYP) {
                         sym.flags_field |= RECORD;
                     }
                     bp = bp + attrLen;
                 }
-            }
+            },
+            new AttributeReader(names.PermittedSubclasses, V59, CLASS_ATTRIBUTE) {
+                @Override
+                protected boolean accepts(AttributeKind kind) {
+                    return super.accepts(kind) && allowSealedTypes;
+                }
+                protected void read(Symbol sym, int attrLen) {
+                    if (sym.kind == TYP) {
+                        ListBuffer<Symbol> subtypes = new ListBuffer<>();
+                        int numberOfPermittedSubtypes = nextChar();
+                        for (int i = 0; i < numberOfPermittedSubtypes; i++) {
+                            subtypes.add(poolReader.getClass(nextChar()));
+                        }
+                        ((ClassSymbol)sym).permitted = subtypes.toList();
+                    }
+                }
+            },
         };
 
         for (AttributeReader r: readers)
             attributeReaders.put(r.name, r);
     }
@@ -2499,10 +2521,14 @@
         for (int i = 0; i < fieldCount; i++) skipMember();
         char methodCount = nextChar();
         for (int i = 0; i < methodCount; i++) skipMember();
         readClassAttrs(c);
 
+        if (c.permitted != null && !c.permitted.isEmpty()) {
+            c.flags_field |= SEALED;
+        }
+
         // reset and read rest of classinfo
         bp = startbp;
         int n = nextChar();
         if ((flags & MODULE) != 0 && n > 0) {
             throw badClassFile("module.info.invalid.super.class");
