diff a/src/hotspot/share/classfile/javaClasses.hpp b/src/hotspot/share/classfile/javaClasses.hpp
--- a/src/hotspot/share/classfile/javaClasses.hpp
+++ b/src/hotspot/share/classfile/javaClasses.hpp
@@ -79,10 +79,12 @@
 
 #define BASIC_JAVA_CLASSES_DO(f) \
         BASIC_JAVA_CLASSES_DO_PART1(f) \
         BASIC_JAVA_CLASSES_DO_PART2(f)
 
+#define CHECK_INIT(offset)  assert(offset != 0, "should be initialized"); return offset;
+
 // Interface to java.lang.Object objects
 
 class java_lang_Object : AllStatic {
  public:
   static void register_natives(TRAPS);
@@ -90,16 +92,16 @@
 
 // Interface to java.lang.String objects
 
 class java_lang_String : AllStatic {
  private:
-  static int value_offset;
-  static int hash_offset;
-  static int hashIsZero_offset;
-  static int coder_offset;
+  static int _value_offset;
+  static int _hash_offset;
+  static int _hashIsZero_offset;
+  static int _coder_offset;
 
-  static bool initialized;
+  static bool _initialized;
 
   static Handle basic_create(int length, bool byte_arr, TRAPS);
 
   static inline void set_coder(oop string, jbyte coder);
 
@@ -123,26 +125,12 @@
   static Handle create_from_platform_dependent_str(const char* str, TRAPS);
   static Handle char_converter(Handle java_string, jchar from_char, jchar to_char, TRAPS);
 
   static void set_compact_strings(bool value);
 
-  static int value_offset_in_bytes()  {
-    assert(initialized && (value_offset > 0), "Must be initialized");
-    return value_offset;
-  }
-  static int hash_offset_in_bytes()   {
-    assert(initialized && (hash_offset > 0), "Must be initialized");
-    return hash_offset;
-  }
-  static int hashIsZero_offset_in_bytes()   {
-    assert(initialized && (hashIsZero_offset > 0), "Must be initialized");
-    return hashIsZero_offset;
-  }
-  static int coder_offset_in_bytes()   {
-    assert(initialized && (coder_offset > 0), "Must be initialized");
-    return coder_offset;
-  }
+  static int value_offset() { CHECK_INIT(_value_offset); }
+  static int coder_offset() { CHECK_INIT(_coder_offset); }
 
   static inline void set_value_raw(oop string, typeArrayOop buffer);
   static inline void set_value(oop string, typeArrayOop buffer);
 
   // Accessors
@@ -236,10 +224,11 @@
 class java_lang_Class : AllStatic {
   friend class VMStructs;
   friend class JVMCIVMStructs;
 
  private:
+
   // The fake offsets are added by the class loader when java.lang.Class is loaded
 
   static int _klass_offset;
   static int _array_klass_offset;
 
@@ -255,13 +244,13 @@
   static int _name_offset;
   static int _source_file_offset;
   static int _val_type_mirror_offset;
   static int _ref_type_mirror_offset;
   static int _classData_offset;
+  static int _classRedefinedCount_offset;
 
-  static bool offsets_computed;
-  static int classRedefinedCount_offset;
+  static bool _offsets_computed;
 
   static GrowableArray<Klass*>* _fixup_mirror_list;
   static GrowableArray<Klass*>* _fixup_module_field_list;
 
   static void set_init_lock(oop java_class, oop init_lock);
@@ -311,20 +300,23 @@
   static oop primitive_mirror(BasicType t);
   // JVM_NewArray support
   static Klass* array_klass_acquire(oop java_class);
   static void release_set_array_klass(oop java_class, Klass* klass);
   // compiler support for class operations
-  static int klass_offset_in_bytes()                { return _klass_offset; }
-  static int array_klass_offset_in_bytes()          { return _array_klass_offset; }
-  static int component_mirror_offset_in_bytes()     { return _component_mirror_offset; }
+  static int klass_offset()                { CHECK_INIT(_klass_offset); }
+  static int array_klass_offset()          { CHECK_INIT(_array_klass_offset); }
+  static int component_mirror_offset()     { CHECK_INIT(_component_mirror_offset); }
   // Support for classRedefinedCount field
   static int classRedefinedCount(oop the_class_mirror);
   static void set_classRedefinedCount(oop the_class_mirror, int value);
 
   // Support for embedded per-class oops
   static oop  protection_domain(oop java_class);
   static oop  init_lock(oop java_class);
+  static void clear_init_lock(oop java_class) {
+    set_init_lock(java_class, NULL);
+  }
   static oop  component_mirror(oop java_class);
   static objArrayOop  signers(oop java_class);
   static void set_signers(oop java_class, objArrayOop signers);
   static oop  class_data(oop java_class);
   static void set_class_data(oop java_class, oop classData);
@@ -365,12 +357,10 @@
     _fixup_module_field_list = v;
   }
 
   // Debugging
   friend class JavaClasses;
-  friend class InstanceKlass;   // verification code accesses offsets
-  friend class ClassFileParser; // access to number_of_fake_fields
 };
 
 // Interface to java.lang.Thread objects
 
 class java_lang_Thread : AllStatic {
@@ -537,15 +527,15 @@
     trace_hidden_offset  = 5,
     trace_size           = 6,
     trace_chunk_size     = 32
   };
 
-  static int backtrace_offset;
-  static int detailMessage_offset;
-  static int stackTrace_offset;
-  static int depth_offset;
-  static int static_unassigned_stacktrace_offset;
+  static int _backtrace_offset;
+  static int _detailMessage_offset;
+  static int _stackTrace_offset;
+  static int _depth_offset;
+  static int _static_unassigned_stacktrace_offset;
 
   // StackTrace (programmatic access, new since 1.4)
   static void clear_stacktrace(oop throwable);
   // Stacktrace (post JDK 1.7.0 to allow immutability protocol to be followed)
   static void set_stacktrace(oop throwable, oop st_element_array);
@@ -555,13 +545,11 @@
   // Backtrace
   static oop backtrace(oop throwable);
   static void set_backtrace(oop throwable, oop value);
   static int depth(oop throwable);
   static void set_depth(oop throwable, int value);
-  // Needed by JVMTI to filter out this internal field.
-  static int get_backtrace_offset() { return backtrace_offset;}
-  static int get_detailMessage_offset() { return detailMessage_offset;}
+  static int get_detailMessage_offset() { CHECK_INIT(_detailMessage_offset); }
   // Message
   static oop message(oop throwable);
   static void set_message(oop throwable, oop value);
   static Symbol* detail_message(oop throwable);
   static void print_stack_element(outputStream *st, Method* method, int bci);
@@ -594,11 +582,11 @@
 
 class java_lang_reflect_AccessibleObject: AllStatic {
  private:
   // Note that to reduce dependencies on the JDK we compute these
   // offsets at run-time.
-  static int override_offset;
+  static int _override_offset;
 
   static void compute_offsets();
 
  public:
   static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;
@@ -616,21 +604,21 @@
 
 class java_lang_reflect_Method : public java_lang_reflect_AccessibleObject {
  private:
   // Note that to reduce dependencies on the JDK we compute these
   // offsets at run-time.
-  static int clazz_offset;
-  static int name_offset;
-  static int returnType_offset;
-  static int parameterTypes_offset;
-  static int exceptionTypes_offset;
-  static int slot_offset;
-  static int modifiers_offset;
-  static int signature_offset;
-  static int annotations_offset;
-  static int parameter_annotations_offset;
-  static int annotation_default_offset;
+  static int _clazz_offset;
+  static int _name_offset;
+  static int _returnType_offset;
+  static int _parameterTypes_offset;
+  static int _exceptionTypes_offset;
+  static int _slot_offset;
+  static int _modifiers_offset;
+  static int _signature_offset;
+  static int _annotations_offset;
+  static int _parameter_annotations_offset;
+  static int _annotation_default_offset;
 
   static void compute_offsets();
  public:
   static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;
 
@@ -668,18 +656,18 @@
 
 class java_lang_reflect_Constructor : public java_lang_reflect_AccessibleObject {
  private:
   // Note that to reduce dependencies on the JDK we compute these
   // offsets at run-time.
-  static int clazz_offset;
-  static int parameterTypes_offset;
-  static int exceptionTypes_offset;
-  static int slot_offset;
-  static int modifiers_offset;
-  static int signature_offset;
-  static int annotations_offset;
-  static int parameter_annotations_offset;
+  static int _clazz_offset;
+  static int _parameterTypes_offset;
+  static int _exceptionTypes_offset;
+  static int _slot_offset;
+  static int _modifiers_offset;
+  static int _signature_offset;
+  static int _annotations_offset;
+  static int _parameter_annotations_offset;
 
   static void compute_offsets();
  public:
   static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;
 
@@ -711,17 +699,17 @@
 
 class java_lang_reflect_Field : public java_lang_reflect_AccessibleObject {
  private:
   // Note that to reduce dependencies on the JDK we compute these
   // offsets at run-time.
-  static int clazz_offset;
-  static int name_offset;
-  static int type_offset;
-  static int slot_offset;
-  static int modifiers_offset;
-  static int signature_offset;
-  static int annotations_offset;
+  static int _clazz_offset;
+  static int _name_offset;
+  static int _type_offset;
+  static int _slot_offset;
+  static int _modifiers_offset;
+  static int _signature_offset;
+  static int _annotations_offset;
 
   static void compute_offsets();
 
  public:
   static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;
@@ -756,14 +744,14 @@
 
 class java_lang_reflect_Parameter {
  private:
   // Note that to reduce dependencies on the JDK we compute these
   // offsets at run-time.
-  static int name_offset;
-  static int modifiers_offset;
-  static int index_offset;
-  static int executable_offset;
+  static int _name_offset;
+  static int _modifiers_offset;
+  static int _index_offset;
+  static int _executable_offset;
 
   static void compute_offsets();
 
  public:
   static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;
@@ -790,13 +778,14 @@
 #define MODULE_INJECTED_FIELDS(macro)                            \
   macro(java_lang_Module, module_entry, intptr_signature, false)
 
 class java_lang_Module {
   private:
-    static int loader_offset;
-    static int name_offset;
+    static int _loader_offset;
+    static int _name_offset;
     static int _module_entry_offset;
+
     static void compute_offsets();
 
   public:
     static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;
 
@@ -834,13 +823,11 @@
   // Allocation
   static Handle create(TRAPS);
 
   // Accessors
   static void set_cp(oop reflect, ConstantPool* value);
-  static int oop_offset() {
-    return _oop_offset;
-  }
+  static int oop_offset() { CHECK_INIT(_oop_offset); }
 
   static ConstantPool* get_cp(oop reflect);
 
   // Debugging
   friend class JavaClasses;
@@ -853,13 +840,11 @@
   static void compute_offsets();
 
  public:
   static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;
 
-  static int base_offset() {
-    return _base_offset;
-  }
+  static int base_offset() { CHECK_INIT(_base_offset); }
 
   // Debugging
   friend class JavaClasses;
 };
 
@@ -875,13 +860,14 @@
 
 // This could be separated out into 8 individual classes.
 
 class java_lang_boxing_object: AllStatic {
  private:
-  static int value_offset;
-  static int long_value_offset;
+  static int _value_offset;
+  static int _long_value_offset;
 
+  static void compute_offsets();
   static oop initialize_and_allocate(BasicType type, TRAPS);
  public:
   // Allocation. Returns a boxed value, or NULL for invalid type.
   static oop create(BasicType type, jvalue* value, TRAPS);
   // Accessors. Returns the basic type being boxed, or T_ILLEGAL for invalid oop.
@@ -891,35 +877,33 @@
   static bool is_instance(oop box)                 { return basic_type(box) != T_ILLEGAL; }
   static bool is_instance(oop box, BasicType type) { return basic_type(box) == type; }
   static void print(oop box, outputStream* st)     { jvalue value;  print(get_value(box, &value), &value, st); }
   static void print(BasicType type, jvalue* value, outputStream* st);
 
-  static int value_offset_in_bytes(BasicType type) {
-    return ( type == T_LONG || type == T_DOUBLE ) ? long_value_offset :
-                                                    value_offset;
+  static int value_offset(BasicType type) {
+    return is_double_word_type(type) ? _long_value_offset : _value_offset;
   }
 
-  static void compute_offsets();
-  static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;
+  static void serialize_offsets(SerializeClosure* f);
 
   // Debugging
   friend class JavaClasses;
 };
 
 
 
 // Interface to java.lang.ref.Reference objects
 
 class java_lang_ref_Reference: AllStatic {
+  static int _referent_offset;
+  static int _queue_offset;
+  static int _next_offset;
+  static int _discovered_offset;
+
   static bool _offsets_initialized;
 
  public:
-  static int referent_offset;
-  static int queue_offset;
-  static int next_offset;
-  static int discovered_offset;
-
   // Accessors
   static inline oop referent(oop ref);
   static inline void set_referent(oop ref, oop value);
   static inline void set_referent_raw(oop ref, oop value);
   static inline HeapWord* referent_addr_raw(oop ref);
@@ -935,22 +919,27 @@
   static inline void set_queue(oop ref, oop value);
   static bool is_referent_field(oop obj, ptrdiff_t offset);
   static inline bool is_final(oop ref);
   static inline bool is_phantom(oop ref);
 
+  static int referent_offset()    { CHECK_INIT(_referent_offset); }
+  static int queue_offset()       { CHECK_INIT(_queue_offset); }
+  static int next_offset()        { CHECK_INIT(_next_offset); }
+  static int discovered_offset()  { CHECK_INIT(_discovered_offset); }
+
   static void compute_offsets();
   static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;
 };
 
 
 // Interface to java.lang.ref.SoftReference objects
 
 class java_lang_ref_SoftReference: public java_lang_ref_Reference {
- public:
-  static int timestamp_offset;
-  static int static_clock_offset;
+  static int _timestamp_offset;
+  static int _static_clock_offset;
 
+ public:
   // Accessors
   static jlong timestamp(oop ref);
 
   // Accessors for statics
   static jlong clock();
@@ -988,12 +977,12 @@
     return klass->is_subclass_of(SystemDictionary::MethodHandle_klass());
   }
   static bool is_instance(oop obj);
 
   // Accessors for code generation:
-  static int type_offset_in_bytes()             { return _type_offset; }
-  static int form_offset_in_bytes()             { return _form_offset; }
+  static int type_offset()             { CHECK_INIT(_type_offset); }
+  static int form_offset()             { CHECK_INIT(_form_offset); }
 };
 
 // Interface to java.lang.invoke.DirectMethodHandle objects
 
 class java_lang_invoke_DirectMethodHandle: AllStatic {
@@ -1015,11 +1004,11 @@
     return klass->is_subclass_of(SystemDictionary::DirectMethodHandle_klass());
   }
   static bool is_instance(oop obj);
 
   // Accessors for code generation:
-  static int member_offset_in_bytes()           { return _member_offset; }
+  static int member_offset()           { CHECK_INIT(_member_offset); }
 };
 
 // Interface to java.lang.invoke.LambdaForm objects
 // (These are a private interface for managing adapter code generation.)
 
@@ -1044,11 +1033,11 @@
       klass->is_subclass_of(SystemDictionary::LambdaForm_klass());
   }
   static bool is_instance(oop obj);
 
   // Accessors for code generation:
-  static int vmentry_offset_in_bytes()          { return _vmentry_offset; }
+  static int vmentry_offset()          { CHECK_INIT(_vmentry_offset); }
 };
 
 
 // Interface to java.lang.invoke.MemberName objects
 // (These are a private interface for Java code to query the class hierarchy.)
@@ -1065,11 +1054,11 @@
 
   static void compute_offsets();
  public:
   static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;
 
-  static int vmtarget_offset_in_bytes() { return _vmtarget_offset; }
+  static int vmtarget_offset() { CHECK_INIT(_vmtarget_offset); }
 
   static Method* vmtarget(oop resolved_method);
   static void set_vmtarget(oop resolved_method, Method* method);
 
   static void set_vmholder(oop resolved_method, oop holder);
@@ -1152,16 +1141,15 @@
     MN_STRONG_LOADER_LINK    = 0x00000004,
     MN_ACCESS_VM_ANNOTATIONS = 0x00000008
   };
 
   // Accessors for code generation:
-  static int clazz_offset_in_bytes()            { return _clazz_offset; }
-  static int type_offset_in_bytes()             { return _type_offset; }
-  static int name_offset_in_bytes()             { return _name_offset; }
-  static int flags_offset_in_bytes()            { return _flags_offset; }
-  static int method_offset_in_bytes()           { return _method_offset; }
-  static int vmindex_offset_in_bytes()          { return _vmindex_offset; }
+  static int clazz_offset()   { CHECK_INIT(_clazz_offset); }
+  static int type_offset()    { CHECK_INIT(_type_offset); }
+  static int flags_offset()   { CHECK_INIT(_flags_offset); }
+  static int method_offset()  { CHECK_INIT(_method_offset); }
+  static int vmindex_offset() { CHECK_INIT(_vmindex_offset); }
 };
 
 
 // Interface to java.lang.invoke.MethodType objects
 
@@ -1192,12 +1180,12 @@
   static bool is_instance(oop obj);
 
   static bool equals(oop mt1, oop mt2);
 
   // Accessors for code generation:
-  static int rtype_offset_in_bytes()            { return _rtype_offset; }
-  static int ptypes_offset_in_bytes()           { return _ptypes_offset; }
+  static int rtype_offset()  { CHECK_INIT(_rtype_offset); }
+  static int ptypes_offset() { CHECK_INIT(_ptypes_offset); }
 };
 
 
 // Interface to java.lang.invoke.CallSite objects
 
@@ -1224,11 +1212,12 @@
     return klass->is_subclass_of(SystemDictionary::CallSite_klass());
   }
   static bool is_instance(oop obj);
 
   // Accessors for code generation:
-  static int target_offset_in_bytes()           { return _target_offset; }
+  static int target_offset()  { CHECK_INIT(_target_offset); }
+  static int context_offset() { CHECK_INIT(_context_offset); }
 };
 
 // Interface to java.lang.invoke.ConstantCallSite objects
 
 class java_lang_invoke_ConstantCallSite: AllStatic {
@@ -1307,18 +1296,18 @@
   macro(java_lang_ClassLoader, loader_data,  intptr_signature, false)
 
 class java_lang_ClassLoader : AllStatic {
  private:
   static int _loader_data_offset;
-  static bool offsets_computed;
-  static int parent_offset;
-  static int parallelCapable_offset;
-  static int name_offset;
-  static int nameAndId_offset;
-  static int unnamedModule_offset;
+  static int _parent_offset;
+  static int _parallelCapable_offset;
+  static int _name_offset;
+  static int _nameAndId_offset;
+  static int _unnamedModule_offset;
 
- public:
+  static void compute_offsets();
+
   static void compute_offsets();
   static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;
 
   static ClassLoaderData* loader_data_acquire(oop loader);
   static ClassLoaderData* loader_data_raw(oop loader);
@@ -1349,27 +1338,26 @@
 
   static oop unnamedModule(oop loader);
 
   // Debugging
   friend class JavaClasses;
-  friend class ClassFileParser; // access to number_of_fake_fields
 };
 
 
 // Interface to java.lang.System objects
 
 class java_lang_System : AllStatic {
  private:
-  static int  static_in_offset;
-  static int static_out_offset;
-  static int static_err_offset;
-  static int static_security_offset;
+  static int _static_in_offset;
+  static int _static_out_offset;
+  static int _static_err_offset;
+  static int _static_security_offset;
 
  public:
-  static int  in_offset_in_bytes();
-  static int out_offset_in_bytes();
-  static int err_offset_in_bytes();
+  static int  in_offset() { CHECK_INIT(_static_in_offset); }
+  static int out_offset() { CHECK_INIT(_static_out_offset); }
+  static int err_offset() { CHECK_INIT(_static_err_offset); }
 
   static void compute_offsets();
   static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;
 
   // Debugging
@@ -1379,18 +1367,18 @@
 
 // Interface to java.lang.StackTraceElement objects
 
 class java_lang_StackTraceElement: AllStatic {
  private:
-  static int declaringClassObject_offset;
-  static int classLoaderName_offset;
-  static int moduleName_offset;
-  static int moduleVersion_offset;
-  static int declaringClass_offset;
-  static int methodName_offset;
-  static int fileName_offset;
-  static int lineNumber_offset;
+  static int _declaringClassObject_offset;
+  static int _classLoaderName_offset;
+  static int _moduleName_offset;
+  static int _moduleVersion_offset;
+  static int _declaringClass_offset;
+  static int _methodName_offset;
+  static int _fileName_offset;
+  static int _lineNumber_offset;
 
   // Setters
   static void set_classLoaderName(oop element, oop value);
   static void set_moduleName(oop element, oop value);
   static void set_moduleVersion(oop element, oop value);
@@ -1490,17 +1478,17 @@
 
 // Interface to java.lang.reflect.RecordComponent objects
 
 class java_lang_reflect_RecordComponent: AllStatic {
  private:
-  static int clazz_offset;
-  static int name_offset;
-  static int type_offset;
-  static int accessor_offset;
-  static int signature_offset;
-  static int annotations_offset;
-  static int typeAnnotations_offset;
+  static int _clazz_offset;
+  static int _name_offset;
+  static int _type_offset;
+  static int _accessor_offset;
+  static int _signature_offset;
+  static int _annotations_offset;
+  static int _typeAnnotations_offset;
 
   // Setters
   static void set_clazz(oop element, oop value);
   static void set_name(oop element, oop value);
   static void set_type(oop element, oop value);
@@ -1523,15 +1511,15 @@
 
 // Interface to java.lang.AssertionStatusDirectives objects
 
 class java_lang_AssertionStatusDirectives: AllStatic {
  private:
-  static int classes_offset;
-  static int classEnabled_offset;
-  static int packages_offset;
-  static int packageEnabled_offset;
-  static int deflt_offset;
+  static int _classes_offset;
+  static int _classEnabled_offset;
+  static int _packages_offset;
+  static int _packageEnabled_offset;
+  static int _deflt_offset;
 
  public:
   // Setters
   static void set_classes(oop obj, oop val);
   static void set_classEnabled(oop obj, oop val);
@@ -1550,11 +1538,11 @@
 class java_nio_Buffer: AllStatic {
  private:
   static int _limit_offset;
 
  public:
-  static int  limit_offset();
+  static int  limit_offset() { CHECK_INIT(_limit_offset); }
   static void compute_offsets();
   static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;
 };
 
 class java_util_concurrent_locks_AbstractOwnableSynchronizer : AllStatic {
@@ -1751,6 +1739,7 @@
   static bool is_supported_for_archiving(oop obj) NOT_CDS_JAVA_HEAP_RETURN_(false);
 };
 
 #undef DECLARE_INJECTED_FIELD_ENUM
 
+#undef CHECK_INIT
 #endif // SHARE_CLASSFILE_JAVACLASSES_HPP
