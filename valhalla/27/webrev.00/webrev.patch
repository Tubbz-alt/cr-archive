diff a/test/jdk/valhalla/valuetypes/ArrayElementVarHandleTest.java b/test/jdk/valhalla/valuetypes/ArrayElementVarHandleTest.java
--- a/test/jdk/valhalla/valuetypes/ArrayElementVarHandleTest.java
+++ b/test/jdk/valhalla/valuetypes/ArrayElementVarHandleTest.java
@@ -154,11 +154,11 @@
             Point.makePoint(1, 2),
             Point.makePoint(10, 20),
             Point.makePoint(100, 200)
     };
 
-    private static final Point?[] NULLABLE_POINTS = new Point?[]{
+    private static final Point.ref[] NULLABLE_POINTS = new Point.ref[]{
         Point.makePoint(11, 22),
                 Point.makePoint(110, 220),
                 null
     };
 
@@ -179,39 +179,39 @@
      * VarHandle of Object[].class
      */
     @Test
     public static void testObjectArrayVarHandle() throws Throwable {
         ArrayElementVarHandleTest test = new ArrayElementVarHandleTest(Object[].class);
-        // Point[] <: Point?[] <: Object
+        // Point[] <: Point.ref[] <: Object
         Object[] array1 = test.newArray(POINTS.length);
         test.setElements(array1, POINTS);
         test.setElements(array1, NULLABLE_POINTS);
         test.setElements(array1, new Object[] { "abc", Point.makePoint(1, 2) });
 
-        Point ?[]array2 = new Point ?[NULLABLE_POINTS.length];
+        Point.ref []array2 = new Point.ref [NULLABLE_POINTS.length];
         test.setElements(array2, POINTS);
         test.setElements(array2, NULLABLE_POINTS);
 
         Point[] array3 = new Point[POINTS.length];
         test.setElements(array3, POINTS);
     }
 
     /*
-     * VarHandle of Point?[].class
+     * VarHandle of Point.ref[].class
      */
     @Test
     public static void testIndirectPointVarHandle() throws Throwable {
-        Object o = new Point?[0];
+        Object o = new Point.ref[0];
         ArrayElementVarHandleTest test = new ArrayElementVarHandleTest(o.getClass());
         assertTrue(test.componentType.isIndirectType());
 
-        // Point[] <: Point?[] <: Object
-        Point?[] array1 = (Point?[])test.newArray(POINTS.length);
+        // Point[] <: Point.ref[] <: Object
+        Point.ref[] array1 = (Point.ref[])test.newArray(POINTS.length);
         test.setElements(array1, POINTS);
         test.setElements(array1, NULLABLE_POINTS);
 
-        Point?[] array2 = new Point?[NULLABLE_POINTS.length];
+        Point.ref[] array2 = new Point.ref[NULLABLE_POINTS.length];
         test.setElements(array2, POINTS);
         test.setElements(array2, NULLABLE_POINTS);
 
         Point[] array3 = new Point[POINTS.length];
         test.setElements(array3, POINTS);
@@ -223,33 +223,33 @@
     @Test
     public static void testPointArrayVarHandle()  throws Throwable {
         ArrayElementVarHandleTest test = new ArrayElementVarHandleTest(Point[].class);
         assertFalse(test.componentType.isIndirectType());
 
-        // Point[] <: Point?[] <: Object
+        // Point[] <: Point.ref[] <: Object
         Point[] array1 = (Point[]) test.newArray(POINTS.length);
         test.setElements(array1, POINTS);
 
         Point[] array3 = new Point[POINTS.length];
         test.setElements(array3, POINTS);
     }
 
     /*
-     * VarHandle of Line?[].class
+     * VarHandle of Line.ref[].class
      */
     @Test
     public static void testIndirectLineVarHandle() throws Throwable {
-        Line?[] nullableLines = new Line?[] { null, null };
+        Line.ref[] nullableLines = new Line.ref[] { null, null };
         ArrayElementVarHandleTest test = new ArrayElementVarHandleTest(nullableLines.getClass());
         assertTrue(test.componentType.isIndirectType());
 
-        // Line[] <: Line?[]
-        Line?[] array1 = (Line?[])test.newArray(LINES.length);
+        // Line[] <: Line.ref[]
+        Line.ref[] array1 = (Line.ref[])test.newArray(LINES.length);
         test.setElements(array1, LINES);
         test.setElements(array1, nullableLines);
 
-        Line?[] array2 = new Line?[LINES.length];
+        Line.ref[] array2 = new Line.ref[LINES.length];
         test.setElements(array2, LINES);
         test.setElements(array2, nullableLines);
 
         Line[] array3 = new Line[LINES.length];
         test.setElements(array3, LINES);
diff a/test/jdk/valhalla/valuetypes/InlineReferenceTest.java b/test/jdk/valhalla/valuetypes/InlineReferenceTest.java
--- a/test/jdk/valhalla/valuetypes/InlineReferenceTest.java
+++ b/test/jdk/valhalla/valuetypes/InlineReferenceTest.java
@@ -37,16 +37,16 @@
 @Test
 public class InlineReferenceTest {
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     static void test1() {
-        Point? p = new Point(10,20);
-        WeakReference<Point?> r = new WeakReference<>(p);
+        Point.ref p = new Point(10,20);
+        WeakReference<Point.ref> r = new WeakReference<>(p);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     static void test2() {
         ReferenceQueue<Object> q = new ReferenceQueue<>();
-        Point? p = new Point(1,2);
-        WeakReference<Point?> r = new WeakReference<>(p, q);
+        Point.ref p = new Point(1,2);
+        WeakReference<Point.ref> r = new WeakReference<>(p, q);
     }
 }
diff a/test/jdk/valhalla/valuetypes/MethodHandleTest.java b/test/jdk/valhalla/valuetypes/MethodHandleTest.java
--- a/test/jdk/valhalla/valuetypes/MethodHandleTest.java
+++ b/test/jdk/valhalla/valuetypes/MethodHandleTest.java
@@ -131,13 +131,13 @@
         }
     }
 
     @Test
     public static void testNullableArray() throws Throwable {
-        Class<?> arrayClass = (new Point?[0]).getClass();
+        Class<?> arrayClass = (new Point.ref[0]).getClass();
         Class<?> elementType = arrayClass.getComponentType();
-        assertTrue(elementType == Point.class.asIndirectType(), arrayClass.getComponentType().toString());
+        assertTrue(elementType == Point.ref.class, arrayClass.getComponentType().toString());
 
         MethodHandle setter = MethodHandles.arrayElementSetter(arrayClass);
         MethodHandle getter = MethodHandles.arrayElementGetter(arrayClass);
         MethodHandle ctor = MethodHandles.arrayConstructor(arrayClass);
         Object[] array = (Object[]) ctor.invoke(2);
@@ -193,11 +193,12 @@
      * The field must be flattenable but may or may not be flattened.
      */
     void setValueField(String name, Object obj, Object value) throws Throwable {
         Field f = c.getDeclaredField(name);
         boolean isStatic = Modifier.isStatic(f.getModifiers());
-        assertTrue(f.getType().isInlineClass());
+        assertTrue(f.getType().isInlineClass() ||
+                   f.getType().getCanonicalName().endsWith("$ref"));
         assertTrue((isStatic && obj == null) || (!isStatic && obj != null));
         Object v = f.get(obj);
 
         // Field::set
         try {
diff a/test/jdk/valhalla/valuetypes/MixedValues.java b/test/jdk/valhalla/valuetypes/MixedValues.java
--- a/test/jdk/valhalla/valuetypes/MixedValues.java
+++ b/test/jdk/valhalla/valuetypes/MixedValues.java
@@ -23,16 +23,16 @@
 
 import java.util.List;
 
 public class MixedValues {
     static Point staticPoint = Point.makePoint(10, 10);
-    static Line? staticLine;   // null static field of non-flattened type
+    static Line.ref staticLine;   // null static field of non-flattened type
     Point p;
     Line l;
     MutablePath mutablePath;
     List<String> list;
-    Point? nfp;
+    Point.ref nfp;
 
     public MixedValues(Point p, Line l, MutablePath path, String... names) {
         this.p = p;
         this.l = l;
         this.mutablePath = path;
diff a/test/jdk/valhalla/valuetypes/NonFlattenValue.java b/test/jdk/valhalla/valuetypes/NonFlattenValue.java
--- a/test/jdk/valhalla/valuetypes/NonFlattenValue.java
+++ b/test/jdk/valhalla/valuetypes/NonFlattenValue.java
@@ -20,25 +20,25 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 public inline class NonFlattenValue {
-    Point? nfp;
+    Point.ref nfp;
 
     NonFlattenValue() {
         this.nfp = Point.makePoint(0,0);
     }
     NonFlattenValue(Point p) {
         this.nfp = p;
     }
-    public Point? point() {
+    public Point.ref point() {
         return nfp;
     }
     public Point pointValue() {
         return (Point) nfp;
     }
-    public boolean has(Point p1, Point? p2) {
+    public boolean has(Point p1, Point.ref p2) {
         return nfp.equals(p1) || nfp.equals(p2);
     }
 
     public static NonFlattenValue make(int x, int y) {
         return new NonFlattenValue(Point.makePoint(x, y));
diff a/test/jdk/valhalla/valuetypes/ObjectMethods.java b/test/jdk/valhalla/valuetypes/ObjectMethods.java
--- a/test/jdk/valhalla/valuetypes/ObjectMethods.java
+++ b/test/jdk/valhalla/valuetypes/ObjectMethods.java
@@ -206,13 +206,13 @@
         return hc;
     }
 
     static inline class MyValue1 {
         private Point p;
-        private Point? np;
+        private Point.ref np;
 
-        MyValue1(int x, int y, Point? np) {
+        MyValue1(int x, int y, Point.ref np) {
             this.p = Point.makePoint(x, y);
             this.np = np;
         }
     }
 
diff a/test/jdk/valhalla/valuetypes/QTypeDescriptorTest.java b/test/jdk/valhalla/valuetypes/QTypeDescriptorTest.java
--- a/test/jdk/valhalla/valuetypes/QTypeDescriptorTest.java
+++ b/test/jdk/valhalla/valuetypes/QTypeDescriptorTest.java
@@ -123,13 +123,13 @@
         assertEquals(l.p2, NFV.pointValue());
     }
 
     @DataProvider
     static Object[][] descriptors() {
-        Class<?> pointLType = Point.class.asIndirectType();
+        Class<?> pointLType = Point.ref.class;
         Class<?> pointQType = Point.class;
-        Class<?> nonFlattenValueLType = NonFlattenValue.class.asIndirectType();
+        Class<?> nonFlattenValueLType = NonFlattenValue.ref.class;
         Class<?> nonFlattenValueQType = NonFlattenValue.class;
         return new Object[][]{
             { QTypeDescriptorTest.class, "toLine", new Class<?>[] {pointQType, nonFlattenValueQType}, true},
             { QTypeDescriptorTest.class, "toLine", new Class<?>[] {pointLType, nonFlattenValueQType}, false},
             { QTypeDescriptorTest.class, "toLine", new Class<?>[] { Point[].class },                  true},
@@ -150,26 +150,26 @@
         }
     }
 
     @DataProvider
     static Object[][] methodTypes() {
-        Class<?> pointLType = Point.class.asIndirectType();
+        Class<?> pointLType = Point.ref.class;
         Class<?> pointQType = Point.class;
         ClassLoader loader = QTypeDescriptorTest.class.getClassLoader();
         return new Object[][]{
             { "point",      MethodType.methodType(pointLType),                            true },
             { "pointValue", MethodType.methodType(pointQType),                            true },
             { "has",        MethodType.methodType(boolean.class, pointQType, pointLType), true },
             { "point",      MethodType.methodType(pointQType),                            false },
             { "pointValue", MethodType.methodType(pointLType),                            false },
             { "has",        MethodType.methodType(boolean.class, pointLType, pointQType), false },
-            { "point",      MethodType.fromMethodDescriptorString("()LPoint;", loader),         true },
+            { "point",      MethodType.fromMethodDescriptorString("()LPoint$ref;", loader),         true },
             { "point",      MethodType.fromMethodDescriptorString("()QPoint;", loader),         false },
             { "pointValue", MethodType.fromMethodDescriptorString("()QPoint;", loader),         true },
             { "pointValue", MethodType.fromMethodDescriptorString("()LPoint;", loader),         false },
-            { "has",        MethodType.fromMethodDescriptorString("(QPoint;LPoint;)Z", loader), true },
-            { "has",        MethodType.fromMethodDescriptorString("(LPoint;LPoint;)Z", loader), false },
+            { "has",        MethodType.fromMethodDescriptorString("(QPoint;LPoint$ref;)Z", loader), true },
+            { "has",        MethodType.fromMethodDescriptorString("(LPoint$ref;LPoint$ref;)Z", loader), false },
         };
     }
 
     @Test(dataProvider = "methodTypes")
     public static void methodHandleLookup(String name, MethodType mtype, boolean found) throws Throwable {
diff a/test/jdk/valhalla/valuetypes/Reflection.java b/test/jdk/valhalla/valuetypes/Reflection.java
--- a/test/jdk/valhalla/valuetypes/Reflection.java
+++ b/test/jdk/valhalla/valuetypes/Reflection.java
@@ -62,30 +62,30 @@
     }
 
     static void testNonFlattenValue() throws Exception {
         NonFlattenValue nfv = NonFlattenValue.make(10, 20);
         Reflection test = new Reflection(NonFlattenValue.class, "NonFlattenValue", nfv);
-        test.checkField("final Point? NonFlattenValue.nfp", "nfp", Point.class.asIndirectType());
+        test.checkField("final Point$ref NonFlattenValue.nfp", "nfp", Point.ref.class);
         test.checkMethod("public Point NonFlattenValue.pointValue()", "pointValue", Point.class);
-        test.checkMethod("public Point? NonFlattenValue.point()", "point", Point.class.asIndirectType());
-        test.checkMethod("public boolean NonFlattenValue.has(Point,Point?)", "has", boolean.class, Point.class, Point.class.asIndirectType());
+        test.checkMethod("public Point$ref NonFlattenValue.point()", "point", Point.ref.class);
+        test.checkMethod("public boolean NonFlattenValue.has(Point,Point$ref)", "has", boolean.class, Point.class, Point.ref.class);
     }
 
     /*
      * Tests reflection APIs with the primary type and indirect/nullable projection type
      */
     static void testMirrors() throws Exception {
         Class<?> primary = Point.class;
-        Class<?> indirect = Point.class.asIndirectType();
+        Class<?> indirect = Point.ref.class;
 
         assertEquals(primary, Point.class);
-        assertEquals(indirect, Point.class.asNullableType());
+        assertEquals(indirect, Point.ref.class);
         assertTrue(primary.isInlineClass());
         assertFalse(primary.isIndirectType());
         assertFalse(primary.isNullableType());
 
-        assertTrue(indirect.isInlineClass());
+        assertTrue(!indirect.isInlineClass());
         assertTrue(indirect.isIndirectType());
         assertTrue(indirect.isNullableType());
 
         Point o = Point.makePoint(10, 20);
         assertTrue(primary.isInstance(o));
@@ -114,11 +114,11 @@
     static void testClassName() {
         assertEquals(Point.class.getName(), "Point");
         assertEquals(Point.class.asNullableType().getName(), "Point");
         assertEquals(Line.class.getName(), "Line");
         assertEquals((new Point[0]).getClass().getName(), "[QPoint;");
-        assertEquals((new Point?[0][0]).getClass().getName(), "[[LPoint;");
+        assertEquals((new Point.ref[0][0]).getClass().getName(), "[[LPoint$ref;");
     }
 
     private final Class<?> c;
     private final Constructor<?> ctor;
     private final Object o;
diff a/test/jdk/valhalla/valuetypes/StreamTest.java b/test/jdk/valhalla/valuetypes/StreamTest.java
--- a/test/jdk/valhalla/valuetypes/StreamTest.java
+++ b/test/jdk/valhalla/valuetypes/StreamTest.java
@@ -65,21 +65,21 @@
     }
 
     static inline class Value {
         int i;
         Point p;
-        Point? nullable;
-        Value(int i, Point p, Point? np) {
+        Point.ref nullable;
+        Value(int i, Point p, Point.ref np) {
             this.i = i;
             this.p = p;
             this.nullable = np;
         }
 
         Point point() {
             return p;
         }
 
-        Point? nullablePoint() {
+        Point.ref nullablePoint() {
             return nullable;
         }
     }
 }
diff a/test/jdk/valhalla/valuetypes/SubstitutabilityTest.java b/test/jdk/valhalla/valuetypes/SubstitutabilityTest.java
--- a/test/jdk/valhalla/valuetypes/SubstitutabilityTest.java
+++ b/test/jdk/valhalla/valuetypes/SubstitutabilityTest.java
@@ -37,12 +37,12 @@
 public class SubstitutabilityTest {
     @DataProvider(name="substitutable")
     Object[][] substitutableCases() {
         Point p1 = Point.makePoint(10, 10);
         Point p2 = Point.makePoint(20, 20);
-        Point? box1 = p1;
-        Point? box2 = p2;
+        Point.ref box1 = p1;
+        Point.ref box2 = p2;
         Line l1 = Line.makeLine(p1, p2);
         var mpath = MutablePath.makePath(10, 20, 30, 40);
         var mixedValues = new MixedValues(p1, l1, mpath, "value");
         var number = Value.Number.intValue(99);
         var list = List.of("list");
diff a/test/jdk/valhalla/valuetypes/ValueArray.java b/test/jdk/valhalla/valuetypes/ValueArray.java
--- a/test/jdk/valhalla/valuetypes/ValueArray.java
+++ b/test/jdk/valhalla/valuetypes/ValueArray.java
@@ -47,11 +47,11 @@
         assertTrue(arrayClass.isArray());
         assertTrue(array.getClass() == arrayClass);
     }
 
     private static Class<?> nullablePointArrayClass() {
-        Object a = new Point?[0];
+        Object a = new Point.ref[0];
         return a.getClass();
     }
 
     void run() {
         testClassName();
@@ -151,11 +151,11 @@
                                          Point.makePoint(100, 200)}},
             new Object[] { Point[][].class,
                            new Point[][] { new Point[] { Point.makePoint(1, 2),
                                                          Point.makePoint(10, 20)}}},
             new Object[] { nullablePointArrayClass(),
-                           new Point?[] { Point.makePoint(11, 22),
+                           new Point.ref[] { Point.makePoint(11, 22),
                                           Point.makePoint(110, 220),
                                           null }},
             new Object[] { NonFlattenValue[].class,
                            new NonFlattenValue[] { NonFlattenValue.make(1, 2),
                                                    NonFlattenValue.make(10, 20),
@@ -199,18 +199,18 @@
     }
 
     @Test
     static void testPointArray() {
         Point[] qArray = new Point[0];
-        Point?[] lArray = new Point?[0];
+        Point.ref[] lArray = new Point.ref[0];
 
         ValueArray test = new ValueArray(Point[].class, qArray);
         test.run();
 
-        ValueArray test1 = new ValueArray(Point?[].class, lArray);
+        ValueArray test1 = new ValueArray(Point.ref[].class, lArray);
         test.run();
 
         // language instanceof
         assertTrue(qArray instanceof Point[]);
-        assertTrue(lArray instanceof Point?[]);
+        assertTrue(lArray instanceof Point.ref[]);
     }
 }
