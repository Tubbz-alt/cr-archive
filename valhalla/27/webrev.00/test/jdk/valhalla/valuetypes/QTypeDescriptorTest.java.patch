diff a/test/jdk/valhalla/valuetypes/QTypeDescriptorTest.java b/test/jdk/valhalla/valuetypes/QTypeDescriptorTest.java
--- a/test/jdk/valhalla/valuetypes/QTypeDescriptorTest.java
+++ b/test/jdk/valhalla/valuetypes/QTypeDescriptorTest.java
@@ -123,13 +123,13 @@
         assertEquals(l.p2, NFV.pointValue());
     }
 
     @DataProvider
     static Object[][] descriptors() {
-        Class<?> pointLType = Point.class.asIndirectType();
+        Class<?> pointLType = Point.ref.class;
         Class<?> pointQType = Point.class;
-        Class<?> nonFlattenValueLType = NonFlattenValue.class.asIndirectType();
+        Class<?> nonFlattenValueLType = NonFlattenValue.ref.class;
         Class<?> nonFlattenValueQType = NonFlattenValue.class;
         return new Object[][]{
             { QTypeDescriptorTest.class, "toLine", new Class<?>[] {pointQType, nonFlattenValueQType}, true},
             { QTypeDescriptorTest.class, "toLine", new Class<?>[] {pointLType, nonFlattenValueQType}, false},
             { QTypeDescriptorTest.class, "toLine", new Class<?>[] { Point[].class },                  true},
@@ -150,26 +150,26 @@
         }
     }
 
     @DataProvider
     static Object[][] methodTypes() {
-        Class<?> pointLType = Point.class.asIndirectType();
+        Class<?> pointLType = Point.ref.class;
         Class<?> pointQType = Point.class;
         ClassLoader loader = QTypeDescriptorTest.class.getClassLoader();
         return new Object[][]{
             { "point",      MethodType.methodType(pointLType),                            true },
             { "pointValue", MethodType.methodType(pointQType),                            true },
             { "has",        MethodType.methodType(boolean.class, pointQType, pointLType), true },
             { "point",      MethodType.methodType(pointQType),                            false },
             { "pointValue", MethodType.methodType(pointLType),                            false },
             { "has",        MethodType.methodType(boolean.class, pointLType, pointQType), false },
-            { "point",      MethodType.fromMethodDescriptorString("()LPoint;", loader),         true },
+            { "point",      MethodType.fromMethodDescriptorString("()LPoint$ref;", loader),         true },
             { "point",      MethodType.fromMethodDescriptorString("()QPoint;", loader),         false },
             { "pointValue", MethodType.fromMethodDescriptorString("()QPoint;", loader),         true },
             { "pointValue", MethodType.fromMethodDescriptorString("()LPoint;", loader),         false },
-            { "has",        MethodType.fromMethodDescriptorString("(QPoint;LPoint;)Z", loader), true },
-            { "has",        MethodType.fromMethodDescriptorString("(LPoint;LPoint;)Z", loader), false },
+            { "has",        MethodType.fromMethodDescriptorString("(QPoint;LPoint$ref;)Z", loader), true },
+            { "has",        MethodType.fromMethodDescriptorString("(LPoint$ref;LPoint$ref;)Z", loader), false },
         };
     }
 
     @Test(dataProvider = "methodTypes")
     public static void methodHandleLookup(String name, MethodType mtype, boolean found) throws Throwable {
