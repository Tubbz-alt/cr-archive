diff a/test/jdk/valhalla/valuetypes/ValueArray.java b/test/jdk/valhalla/valuetypes/ValueArray.java
--- a/test/jdk/valhalla/valuetypes/ValueArray.java
+++ b/test/jdk/valhalla/valuetypes/ValueArray.java
@@ -47,11 +47,11 @@
         assertTrue(arrayClass.isArray());
         assertTrue(array.getClass() == arrayClass);
     }
 
     private static Class<?> nullablePointArrayClass() {
-        Object a = new Point?[0];
+        Object a = new Point.ref[0];
         return a.getClass();
     }
 
     void run() {
         testClassName();
@@ -151,11 +151,11 @@
                                          Point.makePoint(100, 200)}},
             new Object[] { Point[][].class,
                            new Point[][] { new Point[] { Point.makePoint(1, 2),
                                                          Point.makePoint(10, 20)}}},
             new Object[] { nullablePointArrayClass(),
-                           new Point?[] { Point.makePoint(11, 22),
+                           new Point.ref[] { Point.makePoint(11, 22),
                                           Point.makePoint(110, 220),
                                           null }},
             new Object[] { NonFlattenValue[].class,
                            new NonFlattenValue[] { NonFlattenValue.make(1, 2),
                                                    NonFlattenValue.make(10, 20),
@@ -199,18 +199,18 @@
     }
 
     @Test
     static void testPointArray() {
         Point[] qArray = new Point[0];
-        Point?[] lArray = new Point?[0];
+        Point.ref[] lArray = new Point.ref[0];
 
         ValueArray test = new ValueArray(Point[].class, qArray);
         test.run();
 
-        ValueArray test1 = new ValueArray(Point?[].class, lArray);
+        ValueArray test1 = new ValueArray(Point.ref[].class, lArray);
         test.run();
 
         // language instanceof
         assertTrue(qArray instanceof Point[]);
-        assertTrue(lArray instanceof Point?[]);
+        assertTrue(lArray instanceof Point.ref[]);
     }
 }
