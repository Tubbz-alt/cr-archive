diff a/test/jdk/valhalla/valuetypes/ArrayElementVarHandleTest.java b/test/jdk/valhalla/valuetypes/ArrayElementVarHandleTest.java
--- a/test/jdk/valhalla/valuetypes/ArrayElementVarHandleTest.java
+++ b/test/jdk/valhalla/valuetypes/ArrayElementVarHandleTest.java
@@ -154,11 +154,11 @@
             Point.makePoint(1, 2),
             Point.makePoint(10, 20),
             Point.makePoint(100, 200)
     };
 
-    private static final Point?[] NULLABLE_POINTS = new Point?[]{
+    private static final Point.ref[] NULLABLE_POINTS = new Point.ref[]{
         Point.makePoint(11, 22),
                 Point.makePoint(110, 220),
                 null
     };
 
@@ -179,39 +179,39 @@
      * VarHandle of Object[].class
      */
     @Test
     public static void testObjectArrayVarHandle() throws Throwable {
         ArrayElementVarHandleTest test = new ArrayElementVarHandleTest(Object[].class);
-        // Point[] <: Point?[] <: Object
+        // Point[] <: Point.ref[] <: Object
         Object[] array1 = test.newArray(POINTS.length);
         test.setElements(array1, POINTS);
         test.setElements(array1, NULLABLE_POINTS);
         test.setElements(array1, new Object[] { "abc", Point.makePoint(1, 2) });
 
-        Point ?[]array2 = new Point ?[NULLABLE_POINTS.length];
+        Point.ref []array2 = new Point.ref [NULLABLE_POINTS.length];
         test.setElements(array2, POINTS);
         test.setElements(array2, NULLABLE_POINTS);
 
         Point[] array3 = new Point[POINTS.length];
         test.setElements(array3, POINTS);
     }
 
     /*
-     * VarHandle of Point?[].class
+     * VarHandle of Point.ref[].class
      */
     @Test
     public static void testIndirectPointVarHandle() throws Throwable {
-        Object o = new Point?[0];
+        Object o = new Point.ref[0];
         ArrayElementVarHandleTest test = new ArrayElementVarHandleTest(o.getClass());
         assertTrue(test.componentType.isIndirectType());
 
-        // Point[] <: Point?[] <: Object
-        Point?[] array1 = (Point?[])test.newArray(POINTS.length);
+        // Point[] <: Point.ref[] <: Object
+        Point.ref[] array1 = (Point.ref[])test.newArray(POINTS.length);
         test.setElements(array1, POINTS);
         test.setElements(array1, NULLABLE_POINTS);
 
-        Point?[] array2 = new Point?[NULLABLE_POINTS.length];
+        Point.ref[] array2 = new Point.ref[NULLABLE_POINTS.length];
         test.setElements(array2, POINTS);
         test.setElements(array2, NULLABLE_POINTS);
 
         Point[] array3 = new Point[POINTS.length];
         test.setElements(array3, POINTS);
@@ -223,33 +223,33 @@
     @Test
     public static void testPointArrayVarHandle()  throws Throwable {
         ArrayElementVarHandleTest test = new ArrayElementVarHandleTest(Point[].class);
         assertFalse(test.componentType.isIndirectType());
 
-        // Point[] <: Point?[] <: Object
+        // Point[] <: Point.ref[] <: Object
         Point[] array1 = (Point[]) test.newArray(POINTS.length);
         test.setElements(array1, POINTS);
 
         Point[] array3 = new Point[POINTS.length];
         test.setElements(array3, POINTS);
     }
 
     /*
-     * VarHandle of Line?[].class
+     * VarHandle of Line.ref[].class
      */
     @Test
     public static void testIndirectLineVarHandle() throws Throwable {
-        Line?[] nullableLines = new Line?[] { null, null };
+        Line.ref[] nullableLines = new Line.ref[] { null, null };
         ArrayElementVarHandleTest test = new ArrayElementVarHandleTest(nullableLines.getClass());
         assertTrue(test.componentType.isIndirectType());
 
-        // Line[] <: Line?[]
-        Line?[] array1 = (Line?[])test.newArray(LINES.length);
+        // Line[] <: Line.ref[]
+        Line.ref[] array1 = (Line.ref[])test.newArray(LINES.length);
         test.setElements(array1, LINES);
         test.setElements(array1, nullableLines);
 
-        Line?[] array2 = new Line?[LINES.length];
+        Line.ref[] array2 = new Line.ref[LINES.length];
         test.setElements(array2, LINES);
         test.setElements(array2, nullableLines);
 
         Line[] array3 = new Line[LINES.length];
         test.setElements(array3, LINES);
