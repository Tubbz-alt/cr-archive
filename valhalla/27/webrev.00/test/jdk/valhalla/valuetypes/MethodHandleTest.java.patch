diff a/test/jdk/valhalla/valuetypes/MethodHandleTest.java b/test/jdk/valhalla/valuetypes/MethodHandleTest.java
--- a/test/jdk/valhalla/valuetypes/MethodHandleTest.java
+++ b/test/jdk/valhalla/valuetypes/MethodHandleTest.java
@@ -131,13 +131,13 @@
         }
     }
 
     @Test
     public static void testNullableArray() throws Throwable {
-        Class<?> arrayClass = (new Point?[0]).getClass();
+        Class<?> arrayClass = (new Point.ref[0]).getClass();
         Class<?> elementType = arrayClass.getComponentType();
-        assertTrue(elementType == Point.class.asIndirectType(), arrayClass.getComponentType().toString());
+        assertTrue(elementType == Point.ref.class, arrayClass.getComponentType().toString());
 
         MethodHandle setter = MethodHandles.arrayElementSetter(arrayClass);
         MethodHandle getter = MethodHandles.arrayElementGetter(arrayClass);
         MethodHandle ctor = MethodHandles.arrayConstructor(arrayClass);
         Object[] array = (Object[]) ctor.invoke(2);
@@ -193,11 +193,12 @@
      * The field must be flattenable but may or may not be flattened.
      */
     void setValueField(String name, Object obj, Object value) throws Throwable {
         Field f = c.getDeclaredField(name);
         boolean isStatic = Modifier.isStatic(f.getModifiers());
-        assertTrue(f.getType().isInlineClass());
+        assertTrue(f.getType().isInlineClass() ||
+                   f.getType().getCanonicalName().endsWith("$ref"));
         assertTrue((isStatic && obj == null) || (!isStatic && obj != null));
         Object v = f.get(obj);
 
         // Field::set
         try {
