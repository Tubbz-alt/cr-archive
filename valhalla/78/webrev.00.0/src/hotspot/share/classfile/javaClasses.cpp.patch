diff a/src/hotspot/share/classfile/javaClasses.cpp b/src/hotspot/share/classfile/javaClasses.cpp
--- a/src/hotspot/share/classfile/javaClasses.cpp
+++ b/src/hotspot/share/classfile/javaClasses.cpp
@@ -897,11 +897,11 @@
     if (HeapShared::open_archive_heap_region_mapped()) {
       bool present = restore_archived_mirror(k, Handle(), Handle(), Handle(), CHECK);
       assert(present, "Missing archived mirror for %s", k->external_name());
       return;
     } else {
-      k->set_java_mirror_handle(NULL);
+      k->set_java_mirror_handle(OopHandle());
       k->clear_has_raw_archived_mirror();
     }
   }
   create_mirror(k, Handle(), Handle(), Handle(), Handle(), CHECK);
 }
@@ -1225,18 +1225,18 @@
 
     if (!(ik->is_shared_boot_class() || ik->is_shared_platform_class() ||
           ik->is_shared_app_class())) {
       // Archiving mirror for classes from non-builtin loaders is not
       // supported. Clear the _java_mirror within the archived class.
-      k->set_java_mirror_handle(NULL);
+      k->set_java_mirror_handle(OopHandle());
       return NULL;
     }
   }
 
   if (k->is_value()) {
     // Values have a val type mirror and a ref type mirror. Don't handle this for now. TODO:CDS
-    k->set_java_mirror_handle(NULL);
+    k->set_java_mirror_handle(OopHandle());
     return NULL;
   }
 
   // Now start archiving the mirror object
   oop archived_mirror = HeapShared::archive_heap_object(mirror, THREAD);
