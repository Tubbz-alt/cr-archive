diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Utils.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Utils.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Utils.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Utils.java
@@ -105,11 +105,11 @@
 import com.sun.source.util.DocTrees;
 import com.sun.source.util.TreePath;
 import com.sun.tools.javac.model.JavacTypes;
 import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;
 import jdk.javadoc.internal.doclets.toolkit.BaseOptions;
-import jdk.javadoc.internal.doclets.toolkit.CommentUtils.DocCommentDuo;
+import jdk.javadoc.internal.doclets.toolkit.CommentUtils.DocCommentInfo;
 import jdk.javadoc.internal.doclets.toolkit.Resources;
 import jdk.javadoc.internal.doclets.toolkit.WorkArounds;
 import jdk.javadoc.internal.doclets.toolkit.taglets.BaseTaglet;
 import jdk.javadoc.internal.doclets.toolkit.taglets.Taglet;
 import jdk.javadoc.internal.tool.DocEnvImpl;
@@ -2649,87 +2649,95 @@
      * and efficient.
      * @param e an Element
      * @return TreePath
      */
     public TreePath getTreePath(Element e) {
-        DocCommentDuo duo = dcTreeCache.get(e);
-        if (duo != null && duo.treePath != null) {
-            return duo.treePath;
+        DocCommentInfo info = dcTreeCache.get(e);
+        if (info != null && info.treePath != null) {
+            return info.treePath;
         }
-        duo = configuration.cmtUtils.getSyntheticCommentDuo(e);
-        if (duo != null && duo.treePath != null) {
-            return duo.treePath;
+        info = configuration.cmtUtils.getSyntheticCommentInfo(e);
+        if (info != null && info.treePath != null) {
+            return info.treePath;
         }
         Map<Element, TreePath> elementToTreePath = configuration.workArounds.getElementToTreePath();
         TreePath path = elementToTreePath.get(e);
         if (path != null || elementToTreePath.containsKey(e)) {
             // expedite the path and one that is a null
             return path;
         }
         return elementToTreePath.computeIfAbsent(e, docTrees::getPath);
     }
 
-    private final Map<Element, DocCommentDuo> dcTreeCache = new LinkedHashMap<>();
+    /**
+     * A cache of doc comment info objects for elements.
+     * The entries may come from the AST and DocCommentParser, or may be autromatically
+     * generated comments for mandated elements and JavaFX properties.
+     *
+     * @see CommentUtils.dcInfoMap
+     */
+    private final Map<Element, DocCommentInfo> dcTreeCache = new LinkedHashMap<>();
 
     /**
      * Retrieves the doc comments for a given element.
      * @param element
      * @return DocCommentTree for the Element
      */
     public DocCommentTree getDocCommentTree0(Element element) {
 
-        DocCommentDuo duo = null;
+        DocCommentInfo info = null;
 
         ElementKind kind = element.getKind();
         if (kind == ElementKind.PACKAGE || kind == ElementKind.OTHER) {
-            duo = dcTreeCache.get(element); // local cache
-            if (duo == null && kind == ElementKind.PACKAGE) {
+            info = dcTreeCache.get(element); // local cache
+            if (info == null && kind == ElementKind.PACKAGE) {
                 // package-info.java
-                duo = getDocCommentTuple(element);
+                info = getDocCommentInfo(element);
             }
-            if (duo == null) {
+            if (info == null) {
                 // package.html or overview.html
-                duo = configuration.cmtUtils.getHtmlCommentDuo(element); // html source
+                info = configuration.cmtUtils.getHtmlCommentInfo(element); // html source
             }
         } else {
-            duo = configuration.cmtUtils.getSyntheticCommentDuo(element);
-            if (duo == null) {
-                duo = dcTreeCache.get(element); // local cache
+            info = configuration.cmtUtils.getSyntheticCommentInfo(element);
+            if (info == null) {
+                info = dcTreeCache.get(element); // local cache
             }
-            if (duo == null) {
-                duo = getDocCommentTuple(element); // get the real mccoy
+            if (info == null) {
+                info = getDocCommentInfo(element); // get the real mccoy
             }
         }
 
-        DocCommentTree docCommentTree = isValidDuo(duo) ? duo.dcTree : null;
-        TreePath path = isValidDuo(duo) ? duo.treePath : null;
+        DocCommentTree docCommentTree = info == null ? null : info.dcTree;
         if (!dcTreeCache.containsKey(element)) {
-            if (docCommentTree != null && path != null) {
-                if (!configuration.isAllowScriptInComments()) {
+            TreePath path = info == null ? null : info.treePath;
+            if (path != null) {
+                if (docCommentTree != null && !configuration.isAllowScriptInComments()) {
                     try {
                         javaScriptScanner.scan(docCommentTree, path, p -> {
                             throw new JavaScriptScanner.Fault();
                         });
                     } catch (JavaScriptScanner.Fault jsf) {
                         String text = resources.getText("doclet.JavaScript_in_comment");
                         throw new UncheckedDocletException(new SimpleDocletException(text, jsf));
                     }
                 }
+                // run doclint even if docCommentTree is null, to trigger checks for missing comments
                 configuration.workArounds.runDocLint(path);
             }
-            dcTreeCache.put(element, duo);
+            dcTreeCache.put(element, info);
         }
         return docCommentTree;
     }
 
-    private DocCommentDuo getDocCommentTuple(Element element) {
+    private DocCommentInfo getDocCommentInfo(Element element) {
         // prevent nasty things downstream with overview element
         if (element.getKind() != ElementKind.OTHER) {
             TreePath path = getTreePath(element);
             if (path != null) {
                 DocCommentTree docCommentTree = docTrees.getDocCommentTree(path);
-                return new DocCommentDuo(path, docCommentTree);
+                return new DocCommentInfo(path, docCommentTree);
             }
         }
         return null;
     }
 
@@ -2750,14 +2758,10 @@
                 throw new UncheckedDocletException(new SimpleDocletException(text, jsf));
             }
         }
     }
 
-    boolean isValidDuo(DocCommentDuo duo) {
-        return duo != null && duo.dcTree != null;
-    }
-
     public DocCommentTree getDocCommentTree(Element element) {
         CommentHelper ch = commentHelperCache.get(element);
         if (ch != null) {
             return ch.dcTree;
         }
