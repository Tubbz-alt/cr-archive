diff a/test/jdk/valhalla/valuetypes/InlineConstructorTest.java b/test/jdk/valhalla/valuetypes/InlineConstructorTest.java
--- a/test/jdk/valhalla/valuetypes/InlineConstructorTest.java
+++ b/test/jdk/valhalla/valuetypes/InlineConstructorTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -23,22 +23,24 @@
 
 
 /*
  * @test
  * @summary Test reflection of constructors for inline classes
- * @run main/othervm InlineConstructorTest
+ * @run testng/othervm InlineConstructorTest
  */
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
-import java.lang.reflect.InaccessibleObjectException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.Arrays;
 import java.util.Set;
 import java.util.stream.Collectors;
 
+import org.testng.annotations.Test;
+import static org.testng.Assert.*;
+
 public class InlineConstructorTest {
 
     // Target test class
     static inline class SimpleInline {
         public final int x;
@@ -50,99 +52,79 @@
         public SimpleInline(int x) {
             this.x = x;
         }
     }
 
-    private final Class<?> c;
-
-    public static void main(String... args) throws Exception {
-        testSimpleInlineClass();
-    }
-
-    static void testSimpleInlineClass() throws Exception  {
-        InlineConstructorTest test = new InlineConstructorTest(SimpleInline.class);
-        test.constructor();
-        test.constructors("public InlineConstructorTest$SimpleInline(int)",
-                "InlineConstructorTest$SimpleInline()");
-        test.setAccessible();
-        test.trySetAccessible();
-        test.initFactoryNotMethods();
-    }
+    static final Class<?> INLINE_TYPE = SimpleInline.class;
 
-    InlineConstructorTest(Class<?> type) throws Exception {
-        String cn = type.getName();
-        this.c = Class.forName(cn);
+    @Test
+    public static void testInlineClassConstructor() throws Exception {
+        String cn = INLINE_TYPE.getName();
+        Class<?> c = Class.forName(cn);
 
         assertTrue(c.isInlineClass());
-        assertEquals(c, type);
+        assertEquals(c, INLINE_TYPE);
     }
 
-    void constructor() throws Exception {
-        Constructor<?> ctor = c.getDeclaredConstructor();
+    @Test
+    public static void constructor() throws Exception {
+        Constructor<?> ctor = INLINE_TYPE.getDeclaredConstructor();
         Object o = ctor.newInstance();
-        assertEquals(o.getClass(), c);
+        assertEquals(o.getClass(), INLINE_TYPE);
     }
 
     // Check that the class has the expected Constructors
-    void constructors(String... expected) throws Exception {
-        Constructor<? extends Object>[] cons = c.getDeclaredConstructors();
-        Set<String> actualSig =
-                Arrays.stream(cons).map(Constructor::toString).collect(Collectors.toSet());
-        Set<String> expectedSig = Set.of(expected);
+    @Test
+    public static void constructors() throws Exception {
+        Set<String> expectedSig = Set.of("public InlineConstructorTest$SimpleInline(int)",
+                                         "InlineConstructorTest$SimpleInline()");
+        Constructor<? extends Object>[] cons = INLINE_TYPE.getDeclaredConstructors();
+        Set<String> actualSig = Arrays.stream(cons).map(Constructor::toString)
+                                      .collect(Collectors.toSet());
         boolean ok = expectedSig.equals(actualSig);
         if (!ok) {
             System.out.printf("expected: %s%n", expectedSig);
             System.out.printf("declared: %s%n", actualSig);
             assertTrue(ok);
         }
     }
 
-    // Check that the constructor can be set accessible and that the field x can not
-    void setAccessible() throws Exception {
-        Constructor<?> ctor = c.getDeclaredConstructor();
+    // Check that the constructor and field can be set accessible
+    @Test
+    public static void setAccessible() throws Exception {
+        Constructor<?> ctor = INLINE_TYPE.getDeclaredConstructor();
         ctor.setAccessible(true);
-        Field field = c.getField("x");
-        try {
-            field.setAccessible(true);
-            throw new RuntimeException("InaccessibleObjectException not thrown");
-        } catch (InaccessibleObjectException e) {
-            // IOE is expected
-        }
+
+        Field field = INLINE_TYPE.getField("x");
+        field.setAccessible(true);
     }
 
-    // Check that the constructor can be set accessible and that the field x can not
-    void trySetAccessible() throws Exception {
-        Constructor<?> ctor = c.getDeclaredConstructor();
+    // Check that the constructor and field can be set accessible
+    @Test
+    public static void trySetAccessible() throws Exception {
+        Constructor<?> ctor = INLINE_TYPE.getDeclaredConstructor();
         assertTrue(ctor.trySetAccessible());
-        Field field = c.getField("x");
-        if (field.trySetAccessible()) {
-            throw new RuntimeException("trySetAccessible should not succeed");
-        }
+
+        Field field = INLINE_TYPE.getField("x");
+        assertTrue(field.trySetAccessible());
     }
 
+    // Check that the final field cannot be modified
+    @Test(expectedExceptions = IllegalAccessException.class)
+    public static void setFinalField() throws Exception {
+        Field field = INLINE_TYPE.getField("x");
+        field.setAccessible(true);
+        field.setInt(new SimpleInline(100), 200);
+    }
+
+
     // Check that the class does not have a static method with the name <init>
-    void initFactoryNotMethods() {
-        Method[] methods = c.getDeclaredMethods();
+    @Test
+    public static void initFactoryNotMethods() {
+        Method[] methods = INLINE_TYPE.getDeclaredMethods();
         for (Method m : methods) {
             if (Modifier.isStatic(m.getModifiers())) {
                 assertFalse(m.getName().equals("<init>"));
             }
         }
     }
-
-    static void assertEquals(Object o1, Object o2) {
-        if (o1 == o2 || o1.equals(o2))
-            return;
-
-        throw new AssertionError(o1 + " != " + o2);
-    }
-
-    static void assertTrue(boolean value) {
-        if (!value)
-            throw new AssertionError("expected true");
-    }
-
-    static void assertFalse(boolean value) {
-        if (value)
-            throw new AssertionError("expected false");
-    }
 }
