diff a/src/java.base/share/classes/java/lang/reflect/AccessibleObject.java b/src/java.base/share/classes/java/lang/reflect/AccessibleObject.java
--- a/src/java.base/share/classes/java/lang/reflect/AccessibleObject.java
+++ b/src/java.base/share/classes/java/lang/reflect/AccessibleObject.java
@@ -175,11 +175,12 @@
      * protected constructors when the declaring class is in a different module
      * to the caller and the package containing the declaring class is not open
      * to the caller's module. </p>
      *
      * <p> This method cannot be used to enable {@linkplain Field#set <em>write</em>}
-     * access to a final field declared in a {@linkplain Class#isHidden() hidden class},
+     * access to a final field declared in a {@linkplain Class#isHidden() hidden class}
+     * and an {@linkplain Class#isInlineClass() inline class},
      * since such fields are not modifiable.  The {@code accessible} flag when
      * {@code true} suppresses Java language access control checks to only
      * enable {@linkplain Field#get <em>read</em>} access to such fields.
      *
      * <p> If there is a security manager, its
@@ -307,23 +308,10 @@
             modifiers = ((Executable) this).getModifiers();
         } else {
             modifiers = ((Field) this).getModifiers();
         }
 
-        // Do not allow suppression of access check for inline class's field
-        if (declaringClass.isInlineClass() &&
-                this instanceof Field
-                && Modifier.isFinal(modifiers)) {
-            if (throwExceptionIfDenied) {
-                String msg = "Unable to make field accessible of inline class "
-                                + declaringClass.getName();
-                throw new InaccessibleObjectException(msg);
-            } else {
-                return false;
-            }
-        }
-
         Module callerModule = caller.getModule();
         Module declaringModule = declaringClass.getModule();
 
         if (callerModule == declaringModule) return true;
         if (callerModule == Object.class.getModule()) return true;
