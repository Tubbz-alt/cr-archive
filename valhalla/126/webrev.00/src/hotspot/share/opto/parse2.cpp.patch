diff a/src/hotspot/share/opto/parse2.cpp b/src/hotspot/share/opto/parse2.cpp
--- a/src/hotspot/share/opto/parse2.cpp
+++ b/src/hotspot/share/opto/parse2.cpp
@@ -2045,15 +2045,11 @@
     adjust_map_after_if(untaken_btest, c, untaken_prob, next_block);
   }
 }
 
 void Parse::do_acmp(BoolTest::mask btest, Node* a, Node* b) {
-  ciMethod* subst_method = ciEnv::current()->ValueBootstrapMethods_klass()->find_method(ciSymbol::isSubstitutable_name(), ciSymbol::object_object_boolean_signature());
-  // If current method is ValueBootstrapMethods::isSubstitutable(),
-  // compile the acmp as a regular pointer comparison otherwise we
-  // could call ValueBootstrapMethods::isSubstitutable() back
-  if (!EnableValhalla || (method() == subst_method)) {
+  if (!EnableValhalla) {
     Node* cmp = CmpP(a, b);
     cmp = optimize_cmp_with_klass(cmp);
     do_if(btest, cmp);
     return;
   }
@@ -2197,10 +2193,11 @@
   }
 
   set_all_memory(mem);
 
   kill_dead_locals();
+  ciMethod* subst_method = ciEnv::current()->ValueBootstrapMethods_klass()->find_method(ciSymbol::isSubstitutable_name(), ciSymbol::object_object_boolean_signature());
   CallStaticJavaNode *call = new CallStaticJavaNode(C, TypeFunc::make(subst_method), SharedRuntime::get_resolve_static_call_stub(), subst_method, bci());
   call->set_override_symbolic_info(true);
   call->init_req(TypeFunc::Parms, not_null_a);
   call->init_req(TypeFunc::Parms+1, not_null_b);
   inc_sp(2);
