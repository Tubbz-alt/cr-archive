diff a/src/hotspot/share/oops/valueKlass.cpp b/src/hotspot/share/oops/valueKlass.cpp
--- a/src/hotspot/share/oops/valueKlass.cpp
+++ b/src/hotspot/share/oops/valueKlass.cpp
@@ -321,21 +321,20 @@
 
 void ValueKlass::initialize_calling_convention(TRAPS) {
   // Because the pack and unpack handler addresses need to be loadable from generated code,
   // they are stored at a fixed offset in the klass metadata. Since value type klasses do
   // not have a vtable, the vtable offset is used to store these addresses.
-  if (is_scalarizable() && (InlineTypeReturnedAsFields || InlineTypePassFieldsAsArgs)) {
+  if (InlineTypeReturnedAsFields || InlineTypePassFieldsAsArgs) {
     ResourceMark rm;
     GrowableArray<SigEntry> sig_vk;
     int nb_fields = collect_fields(&sig_vk);
     Array<SigEntry>* extended_sig = MetadataFactory::new_array<SigEntry>(class_loader_data(), sig_vk.length(), CHECK);
     *((Array<SigEntry>**)adr_extended_sig()) = extended_sig;
     for (int i = 0; i < sig_vk.length(); i++) {
       extended_sig->at_put(i, sig_vk.at(i));
     }
-
-    if (InlineTypeReturnedAsFields) {
+    if (can_be_returned_as_fields(/* init= */ true)) {
       nb_fields++;
       BasicType* sig_bt = NEW_RESOURCE_ARRAY(BasicType, nb_fields);
       sig_bt[0] = T_METADATA;
       SigEntry::fill_sig_bt(&sig_vk, sig_bt+1);
       VMRegPair* regs = NEW_RESOURCE_ARRAY(VMRegPair, nb_fields);
@@ -351,12 +350,17 @@
         BufferedValueTypeBlob* buffered_blob = SharedRuntime::generate_buffered_value_type_adapter(this);
         *((address*)adr_pack_handler()) = buffered_blob->pack_fields();
         *((address*)adr_pack_handler_jobject()) = buffered_blob->pack_fields_jobject();
         *((address*)adr_unpack_handler()) = buffered_blob->unpack_fields();
         assert(CodeCache::find_blob(pack_handler()) == buffered_blob, "lost track of blob");
+        assert(can_be_returned_as_fields(), "sanity");
       }
     }
+    if (!can_be_returned_as_fields() && !can_be_passed_as_fields()) {
+      MetadataFactory::free_array<SigEntry>(class_loader_data(), extended_sig);
+      assert(return_regs() == NULL, "sanity");
+    }
   }
 }
 
 void ValueKlass::deallocate_contents(ClassLoaderData* loader_data) {
   if (extended_sig() != NULL) {
@@ -387,13 +391,18 @@
 // Can this inline type be scalarized?
 bool ValueKlass::is_scalarizable() const {
   return ScalarizeInlineTypes;
 }
 
+// Can this value type be passed as multiple values?
+bool ValueKlass::can_be_passed_as_fields() const {
+  return InlineTypePassFieldsAsArgs && is_scalarizable() && !is_empty_inline_type();
+}
+
 // Can this value type be returned as multiple values?
-bool ValueKlass::can_be_returned_as_fields() const {
-  return return_regs() != NULL;
+bool ValueKlass::can_be_returned_as_fields(bool init) const {
+  return InlineTypeReturnedAsFields && is_scalarizable() && !is_empty_inline_type() && (init || return_regs() != NULL);
 }
 
 // Create handles for all oop fields returned in registers that are going to be live across a safepoint
 void ValueKlass::save_oop_fields(const RegisterMap& reg_map, GrowableArray<Handle>& handles) const {
   Thread* thread = Thread::current();
