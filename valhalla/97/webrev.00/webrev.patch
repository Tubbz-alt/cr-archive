diff a/src/hotspot/share/ci/ciValueKlass.cpp b/src/hotspot/share/ci/ciValueKlass.cpp
--- a/src/hotspot/share/ci/ciValueKlass.cpp
+++ b/src/hotspot/share/ci/ciValueKlass.cpp
@@ -74,18 +74,27 @@
 // Are arrays containing this value type flattened?
 bool ciValueKlass::flatten_array() const {
   GUARDED_VM_ENTRY(return to_ValueKlass()->flatten_array();)
 }
 
+// Can this value type be scalarized?
+bool ciValueKlass::is_scalarizable() const {
+  GUARDED_VM_ENTRY(return to_ValueKlass()->is_scalarizable();)
+}
+
+// Can this value type be passed as multiple values?
+bool ciValueKlass::can_be_passed_as_fields() const {
+  GUARDED_VM_ENTRY(return to_ValueKlass()->can_be_passed_as_fields();)
+}
+
 // Can this value type be returned as multiple values?
 bool ciValueKlass::can_be_returned_as_fields() const {
   GUARDED_VM_ENTRY(return to_ValueKlass()->can_be_returned_as_fields();)
 }
 
-// Can this value type be scalarized?
-bool ciValueKlass::is_scalarizable() const {
-  GUARDED_VM_ENTRY(return to_ValueKlass()->is_scalarizable();)
+bool ciValueKlass::is_empty() const {
+  GUARDED_VM_ENTRY(return to_ValueKlass()->is_empty_inline_type();)
 }
 
 // When passing a value type's fields as arguments, count the number
 // of argument slots that are needed
 int ciValueKlass::value_arg_slots() {
diff a/src/hotspot/share/ci/ciValueKlass.hpp b/src/hotspot/share/ci/ciValueKlass.hpp
--- a/src/hotspot/share/ci/ciValueKlass.hpp
+++ b/src/hotspot/share/ci/ciValueKlass.hpp
@@ -76,12 +76,14 @@
   // Value type fields
   int first_field_offset() const;
   int field_index_by_offset(int offset);
 
   bool flatten_array() const;
-  bool can_be_returned_as_fields() const;
   bool is_scalarizable() const;
+  bool can_be_passed_as_fields() const;
+  bool can_be_returned_as_fields() const;
+  bool is_empty() const;
   int value_arg_slots();
   int default_value_offset() const;
   ciInstance* default_value_instance() const;
   bool contains_oops() const;
   Array<SigEntry>* extended_sig() const;
diff a/src/hotspot/share/oops/valueKlass.cpp b/src/hotspot/share/oops/valueKlass.cpp
--- a/src/hotspot/share/oops/valueKlass.cpp
+++ b/src/hotspot/share/oops/valueKlass.cpp
@@ -321,21 +321,20 @@
 
 void ValueKlass::initialize_calling_convention(TRAPS) {
   // Because the pack and unpack handler addresses need to be loadable from generated code,
   // they are stored at a fixed offset in the klass metadata. Since value type klasses do
   // not have a vtable, the vtable offset is used to store these addresses.
-  if (is_scalarizable() && (InlineTypeReturnedAsFields || InlineTypePassFieldsAsArgs)) {
+  if (InlineTypeReturnedAsFields || InlineTypePassFieldsAsArgs) {
     ResourceMark rm;
     GrowableArray<SigEntry> sig_vk;
     int nb_fields = collect_fields(&sig_vk);
     Array<SigEntry>* extended_sig = MetadataFactory::new_array<SigEntry>(class_loader_data(), sig_vk.length(), CHECK);
     *((Array<SigEntry>**)adr_extended_sig()) = extended_sig;
     for (int i = 0; i < sig_vk.length(); i++) {
       extended_sig->at_put(i, sig_vk.at(i));
     }
-
-    if (InlineTypeReturnedAsFields) {
+    if (can_be_returned_as_fields(/* init= */ true)) {
       nb_fields++;
       BasicType* sig_bt = NEW_RESOURCE_ARRAY(BasicType, nb_fields);
       sig_bt[0] = T_METADATA;
       SigEntry::fill_sig_bt(&sig_vk, sig_bt+1);
       VMRegPair* regs = NEW_RESOURCE_ARRAY(VMRegPair, nb_fields);
@@ -351,12 +350,17 @@
         BufferedValueTypeBlob* buffered_blob = SharedRuntime::generate_buffered_value_type_adapter(this);
         *((address*)adr_pack_handler()) = buffered_blob->pack_fields();
         *((address*)adr_pack_handler_jobject()) = buffered_blob->pack_fields_jobject();
         *((address*)adr_unpack_handler()) = buffered_blob->unpack_fields();
         assert(CodeCache::find_blob(pack_handler()) == buffered_blob, "lost track of blob");
+        assert(can_be_returned_as_fields(), "sanity");
       }
     }
+    if (!can_be_returned_as_fields() && !can_be_passed_as_fields()) {
+      MetadataFactory::free_array<SigEntry>(class_loader_data(), extended_sig);
+      assert(return_regs() == NULL, "sanity");
+    }
   }
 }
 
 void ValueKlass::deallocate_contents(ClassLoaderData* loader_data) {
   if (extended_sig() != NULL) {
@@ -387,13 +391,18 @@
 // Can this inline type be scalarized?
 bool ValueKlass::is_scalarizable() const {
   return ScalarizeInlineTypes;
 }
 
+// Can this value type be passed as multiple values?
+bool ValueKlass::can_be_passed_as_fields() const {
+  return InlineTypePassFieldsAsArgs && is_scalarizable() && !is_empty_inline_type();
+}
+
 // Can this value type be returned as multiple values?
-bool ValueKlass::can_be_returned_as_fields() const {
-  return return_regs() != NULL;
+bool ValueKlass::can_be_returned_as_fields(bool init) const {
+  return InlineTypeReturnedAsFields && is_scalarizable() && !is_empty_inline_type() && (init || return_regs() != NULL);
 }
 
 // Create handles for all oop fields returned in registers that are going to be live across a safepoint
 void ValueKlass::save_oop_fields(const RegisterMap& reg_map, GrowableArray<Handle>& handles) const {
   Thread* thread = Thread::current();
diff a/src/hotspot/share/oops/valueKlass.hpp b/src/hotspot/share/oops/valueKlass.hpp
--- a/src/hotspot/share/oops/valueKlass.hpp
+++ b/src/hotspot/share/oops/valueKlass.hpp
@@ -248,11 +248,12 @@
   }
   Array<VMRegPair>* return_regs() const {
     return *((Array<VMRegPair>**)adr_return_regs());
   }
   bool is_scalarizable() const;
-  bool can_be_returned_as_fields() const;
+  bool can_be_passed_as_fields() const;
+  bool can_be_returned_as_fields(bool init = false) const;
   void save_oop_fields(const RegisterMap& map, GrowableArray<Handle>& handles) const;
   void restore_oop_results(RegisterMap& map, GrowableArray<Handle>& handles) const;
   oop realloc_result(const RegisterMap& reg_map, const GrowableArray<Handle>& handles, TRAPS);
   static ValueKlass* returned_value_klass(const RegisterMap& reg_map);
 
diff a/src/hotspot/share/opto/type.cpp b/src/hotspot/share/opto/type.cpp
--- a/src/hotspot/share/opto/type.cpp
+++ b/src/hotspot/share/opto/type.cpp
@@ -2035,11 +2035,11 @@
 
   uint pos = TypeFunc::Parms;
   const Type** field_array = fields(arg_cnt);
   if (!method->is_static()) {
     ciInstanceKlass* recv = method->holder();
-    if (vt_fields_as_args && recv->is_valuetype() && recv->as_value_klass()->is_scalarizable()) {
+    if (vt_fields_as_args && recv->is_valuetype() && recv->as_value_klass()->can_be_passed_as_fields()) {
       collect_value_fields(recv->as_value_klass(), field_array, pos, sig_cc);
     } else {
       field_array[pos++] = get_const_type(recv)->join_speculative(TypePtr::NOTNULL);
       if (vt_fields_as_args) {
         ++sig_cc;
@@ -2074,11 +2074,11 @@
     case T_SHORT:
       field_array[pos++] = TypeInt::INT;
       break;
     case T_VALUETYPE: {
       bool never_null = sig->is_never_null_at(i);
-      if (vt_fields_as_args && type->as_value_klass()->is_scalarizable() && never_null) {
+      if (vt_fields_as_args && type->as_value_klass()->can_be_passed_as_fields() && never_null) {
         is_flattened = true;
         collect_value_fields(type->as_value_klass(), field_array, pos, sig_cc);
       } else {
         field_array[pos++] = get_const_type(type)->join_speculative(never_null ? TypePtr::NOTNULL : TypePtr::BOTTOM);
       }
diff a/src/hotspot/share/opto/valuetypenode.cpp b/src/hotspot/share/opto/valuetypenode.cpp
--- a/src/hotspot/share/opto/valuetypenode.cpp
+++ b/src/hotspot/share/opto/valuetypenode.cpp
@@ -493,11 +493,12 @@
   return vt;
 }
 
 ValueTypeNode* ValueTypeNode::make_uninitialized(PhaseGVN& gvn, ciValueKlass* vk) {
   // Create a new ValueTypeNode with uninitialized values and NULL oop
-  return new ValueTypeNode(vk, gvn.zerocon(T_VALUETYPE));
+  Node* oop = vk->is_empty() ? default_oop(gvn, vk) : gvn.zerocon(T_VALUETYPE);
+  return new ValueTypeNode(vk, oop);
 }
 
 Node* ValueTypeNode::default_oop(PhaseGVN& gvn, ciValueKlass* vk) {
   // Returns the constant oop of the default value type allocation
   return gvn.makecon(TypeInstPtr::make(vk->default_value_instance()));
diff a/src/hotspot/share/runtime/sharedRuntime.cpp b/src/hotspot/share/runtime/sharedRuntime.cpp
--- a/src/hotspot/share/runtime/sharedRuntime.cpp
+++ b/src/hotspot/share/runtime/sharedRuntime.cpp
@@ -1140,12 +1140,13 @@
       callee = bytecode.static_target(CHECK_NH);
       if (callee == NULL) {
         THROW_(vmSymbols::java_lang_NoSuchMethodException(), nullHandle);
       }
     }
-    if (!caller_is_c1 && callee->has_scalarized_args() && callee->method_holder()->is_inline_klass()) {
-      // If the receiver is a value type that is passed as fields, no oop is available.
+    if (!caller_is_c1 && callee->has_scalarized_args() && callee->method_holder()->is_inline_klass() &&
+        ValueKlass::cast(callee->method_holder())->can_be_passed_as_fields()) {
+      // If the receiver is an inline type that is passed as fields, no oop is available
       // Resolve the call without receiver null checking.
       assert(attached_method.not_null() && !attached_method->is_abstract(), "must have non-abstract attached method");
       if (bc == Bytecodes::_invokeinterface) {
         bc = Bytecodes::_invokevirtual; // C2 optimistically replaces interface calls by virtual calls
       }
@@ -1283,11 +1284,12 @@
   bool is_nmethod = caller_nm->is_nmethod();
   bool caller_is_c1 = caller_nm->is_compiled_by_c1();
 
   if (is_virtual) {
     Klass* receiver_klass = NULL;
-    if (InlineTypePassFieldsAsArgs && !caller_is_c1 && callee_method->method_holder()->is_inline_klass()) {
+    if (!caller_is_c1 && callee_method->has_scalarized_args() && callee_method->method_holder()->is_inline_klass() &&
+        ValueKlass::cast(callee_method->method_holder())->can_be_passed_as_fields()) {
       // If the receiver is an inline type that is passed as fields, no oop is available
       receiver_klass = callee_method->method_holder();
     } else {
       assert(receiver.not_null() || invoke_code == Bytecodes::_invokehandle, "sanity check");
       receiver_klass = invoke_code == Bytecodes::_invokehandle ? NULL : receiver->klass();
@@ -2744,21 +2746,21 @@
 
 int CompiledEntrySignature::compute_scalarized_cc(GrowableArray<SigEntry>*& sig_cc, VMRegPair*& regs_cc, bool scalar_receiver) {
   InstanceKlass* holder = _method->method_holder();
   sig_cc = new GrowableArray<SigEntry>(_method->size_of_parameters());
   if (!_method->is_static()) {
-    if (holder->is_inline_klass() && scalar_receiver && ValueKlass::cast(holder)->is_scalarizable()) {
+    if (holder->is_inline_klass() && scalar_receiver && ValueKlass::cast(holder)->can_be_passed_as_fields()) {
       sig_cc->appendAll(ValueKlass::cast(holder)->extended_sig());
     } else {
       SigEntry::add_entry(sig_cc, T_OBJECT);
     }
   }
   Thread* THREAD = Thread::current();
   for (SignatureStream ss(_method->signature()); !ss.at_return_type(); ss.next()) {
     if (ss.type() == T_VALUETYPE) {
       ValueKlass* vk = ss.as_value_klass(holder);
-      if (vk->is_scalarizable()) {
+      if (vk->can_be_passed_as_fields()) {
         sig_cc->appendAll(vk->extended_sig());
       } else {
         SigEntry::add_entry(sig_cc, T_OBJECT);
       }
     } else {
@@ -2831,27 +2833,27 @@
 
 
 void CompiledEntrySignature::compute_calling_conventions() {
   // Get the (non-scalarized) signature and check for value type arguments
   if (!_method->is_static()) {
-    if (_method->method_holder()->is_inline_klass() && ValueKlass::cast(_method->method_holder())->is_scalarizable()) {
+    if (_method->method_holder()->is_inline_klass() && ValueKlass::cast(_method->method_holder())->can_be_passed_as_fields()) {
       _has_value_recv = true;
       _num_value_args++;
     }
     SigEntry::add_entry(_sig, T_OBJECT);
   }
   for (SignatureStream ss(_method->signature()); !ss.at_return_type(); ss.next()) {
     BasicType bt = ss.type();
     if (bt == T_VALUETYPE) {
-      if (ss.as_value_klass(_method->method_holder())->is_scalarizable()) {
+      if (ss.as_value_klass(_method->method_holder())->can_be_passed_as_fields()) {
         _num_value_args++;
       }
       bt = T_OBJECT;
     }
     SigEntry::add_entry(_sig, bt);
   }
-  if (_method->is_abstract() && !(InlineTypePassFieldsAsArgs && has_value_arg())) {
+  if (_method->is_abstract() && !has_value_arg()) {
     return;
   }
 
   // Get a description of the compiled java calling convention and the largest used (VMReg) stack slot usage
   _regs = NEW_RESOURCE_ARRAY(VMRegPair, _sig->length());
@@ -2863,11 +2865,11 @@
   _regs_cc = _regs;
   _regs_cc_ro = _regs;
   _args_on_stack_cc = _args_on_stack;
   _args_on_stack_cc_ro = _args_on_stack;
 
-  if (InlineTypePassFieldsAsArgs && has_value_arg() && !_method->is_native()) {
+  if (has_value_arg() && !_method->is_native()) {
     _args_on_stack_cc = compute_scalarized_cc(_sig_cc, _regs_cc, /* scalar_receiver = */ true);
 
     _sig_cc_ro = _sig_cc;
     _regs_cc_ro = _regs_cc;
     _args_on_stack_cc_ro = _args_on_stack_cc;
diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/MyValueEmpty.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/MyValueEmpty.java
--- /dev/null
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/MyValueEmpty.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package compiler.valhalla.valuetypes;
+
+public final inline class MyValueEmpty extends MyAbstract {
+    public long hash() { return 0; }
+
+    public MyValueEmpty copy(MyValueEmpty other) { return other; }
+}
diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConvention.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConvention.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConvention.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConvention.java
@@ -31,11 +31,11 @@
 /*
  * @test
  * @summary Test value type calling convention optimizations
  * @library /testlibrary /test/lib /compiler/whitebox /
  * @requires (os.simpleArch == "x64" | os.simpleArch == "aarch64")
- * @compile TestCallingConvention.java
+ * @compile -XDallowEmptyValues TestCallingConvention.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform
  * @run main/othervm/timeout=300 -Xbootclasspath/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions
  *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI
  *                               compiler.valhalla.valuetypes.ValueTypeTest
  *                               compiler.valhalla.valuetypes.TestCallingConvention
@@ -784,6 +784,19 @@
     public void test37_verifier(boolean warmup) throws Throwable {
         Test37Value vt = new Test37Value();
         int res = test37(vt);
         Asserts.assertEQ(res, rI);
     }
+
+    // Test passing/returning an empty inline type
+    @Test(failOn = ALLOC + LOAD + STORE + TRAP)
+    public MyValueEmpty test38(MyValueEmpty vt) {
+        return vt.copy(vt);
+    }
+
+    @DontCompile
+    public void test38_verifier(boolean warmup) {
+        MyValueEmpty vt = new MyValueEmpty();
+        MyValueEmpty res = test38(vt);
+        Asserts.assertEQ(res, vt);
+    }
 }
diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestLWorld.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestLWorld.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestLWorld.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestLWorld.java
@@ -34,11 +34,11 @@
  * @test
  * @summary Test value types in LWorld.
  * @modules java.base/jdk.experimental.value
  * @library /testlibrary /test/lib /compiler/whitebox /
  * @requires (os.simpleArch == "x64" | os.simpleArch == "aarch64")
- * @compile TestLWorld.java
+ * @compile -XDallowEmptyValues TestLWorld.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform
  * @run main/othervm/timeout=300 -Xbootclasspath/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions
  *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI
  *                               compiler.valhalla.valuetypes.ValueTypeTest
  *                               compiler.valhalla.valuetypes.TestLWorld
@@ -3239,6 +3239,56 @@
     @DontCompile
     public void test115_verifier(boolean warmup) {
         long res = test115();
         Asserts.assertEquals(res, 5*rL);
     }
+
+    static MyValueEmpty     fEmpty1;
+    static MyValueEmpty.ref fEmpty2 = MyValueEmpty.default;
+           MyValueEmpty     fEmpty3;
+           MyValueEmpty.ref fEmpty4 = MyValueEmpty.default;
+
+    // Test fields loads/stores with empty inline types
+    @Test(failOn = ALLOC + ALLOC_G + LOAD + STORE + TRAP)
+    public void test116() {
+        fEmpty1 = fEmpty4;
+        fEmpty2 = fEmpty1;
+        fEmpty3 = fEmpty2;
+        fEmpty4 = fEmpty3;
+    }
+
+    @DontCompile
+    public void test116_verifier(boolean warmup) {
+        test116();
+        Asserts.assertEquals(fEmpty1, fEmpty2);
+        Asserts.assertEquals(fEmpty2, fEmpty3);
+        Asserts.assertEquals(fEmpty3, fEmpty4);
+    }
+
+    // Test array loads/stores with empty inline types
+    @Test(failOn = ALLOC + ALLOC_G)
+    public MyValueEmpty test117(MyValueEmpty[] arr1, MyValueEmpty.ref[] arr2) {
+        arr1[0] = arr2[0];
+        arr2[0] = new MyValueEmpty();
+        return arr1[0];
+    }
+
+    @DontCompile
+    public void test117_verifier(boolean warmup) {
+        MyValueEmpty[] arr1 = new MyValueEmpty[]{MyValueEmpty.default};
+        MyValueEmpty res = test117(arr1, arr1);
+        Asserts.assertEquals(res, MyValueEmpty.default);
+        Asserts.assertEquals(arr1[0], MyValueEmpty.default);
+    }
+
+    // Test acmp with empty inline types
+    @Test(failOn = ALLOC + ALLOC_G)
+    public boolean test118(MyValueEmpty v1, MyValueEmpty.ref v2, Object o1) {
+        return (v1 == v2) && (v2 == o1);
+    }
+
+    @DontCompile
+    public void test118_verifier(boolean warmup) {
+        boolean res = test118(MyValueEmpty.default, MyValueEmpty.default, new MyValueEmpty());
+        Asserts.assertTrue(res);
+    }
 }
