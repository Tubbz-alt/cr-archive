diff a/src/hotspot/share/prims/jvmtiEnvBase.hpp b/src/hotspot/share/prims/jvmtiEnvBase.hpp
--- a/src/hotspot/share/prims/jvmtiEnvBase.hpp
+++ b/src/hotspot/share/prims/jvmtiEnvBase.hpp
@@ -300,13 +300,13 @@
   jvmtiError get_object_monitor_usage(JavaThread *calling_thread,
                                                     jobject object, jvmtiMonitorUsage* info_ptr);
   jvmtiError get_stack_trace(JavaThread *java_thread,
                                            jint stack_depth, jint max_count,
                                            jvmtiFrameInfo* frame_buffer, jint* count_ptr);
-  jvmtiError get_current_contended_monitor(JavaThread *java_thread,
+  jvmtiError get_current_contended_monitor(JavaThread *calling_thread, JavaThread *java_thread,
                                            jobject *monitor_ptr);
-  jvmtiError get_owned_monitors(JavaThread* java_thread,
+  jvmtiError get_owned_monitors(JavaThread *calling_thread, JavaThread* java_thread,
                                 GrowableArray<jvmtiMonitorStackDepthInfo*> *owned_monitors_list);
   jvmtiError check_top_frame(JavaThread* current_thread, JavaThread* java_thread,
                              jvalue value, TosState tos, Handle* ret_ob_h);
   jvmtiError force_early_return(JavaThread* java_thread, jvalue value, TosState tos);
 };
@@ -374,23 +374,25 @@
 
 
 // HandshakeClosure to get monitor information with stack depth.
 class GetOwnedMonitorInfoClosure : public HandshakeClosure {
 private:
+  JavaThread* _calling_thread;
   JvmtiEnv *_env;
   jvmtiError _result;
   GrowableArray<jvmtiMonitorStackDepthInfo*> *_owned_monitors_list;
 
 public:
-  GetOwnedMonitorInfoClosure(JvmtiEnv* env,
+  GetOwnedMonitorInfoClosure(JavaThread* calling_thread, JvmtiEnv* env,
                              GrowableArray<jvmtiMonitorStackDepthInfo*>* owned_monitor_list)
     : HandshakeClosure("GetOwnedMonitorInfo"),
+      _calling_thread(calling_thread),
       _env(env),
       _result(JVMTI_ERROR_NONE),
       _owned_monitors_list(owned_monitor_list) {}
-  void do_thread(Thread *target);
   jvmtiError result() { return _result; }
+  void do_thread(Thread *target);
 };
 
 
 // VM operation to get object monitor usage.
 class VM_GetObjectMonitorUsage : public VM_Operation {
@@ -417,17 +419,19 @@
 };
 
 // HandshakeClosure to get current contended monitor.
 class GetCurrentContendedMonitorClosure : public HandshakeClosure {
 private:
+  JavaThread *_calling_thread;
   JvmtiEnv *_env;
   jobject *_owned_monitor_ptr;
   jvmtiError _result;
 
 public:
-  GetCurrentContendedMonitorClosure(JvmtiEnv *env, jobject *mon_ptr)
+  GetCurrentContendedMonitorClosure(JavaThread* calling_thread, JvmtiEnv *env, jobject *mon_ptr)
     : HandshakeClosure("GetCurrentContendedMonitor"),
+      _calling_thread(calling_thread),
       _env(env),
       _owned_monitor_ptr(mon_ptr),
       _result(JVMTI_ERROR_THREAD_NOT_ALIVE) {}
   jvmtiError result() { return _result; }
   void do_thread(Thread *target);
