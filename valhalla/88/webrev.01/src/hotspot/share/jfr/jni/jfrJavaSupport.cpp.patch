diff a/src/hotspot/share/jfr/jni/jfrJavaSupport.cpp b/src/hotspot/share/jfr/jni/jfrJavaSupport.cpp
--- a/src/hotspot/share/jfr/jni/jfrJavaSupport.cpp
+++ b/src/hotspot/share/jfr/jni/jfrJavaSupport.cpp
@@ -721,48 +721,44 @@
   }
   remove_thread_from_exclusion_list(h_obj);
   return true;
 }
 
-jlong JfrJavaSupport::jfr_thread_id(jobject thread) {
+static JavaThread* get_native(jobject thread) {
   ThreadsListHandle tlh;
   JavaThread* native_thread = NULL;
   (void)tlh.cv_internal_thread_to_JavaThread(thread, &native_thread, NULL);
+  return native_thread;
+}
+
+jlong JfrJavaSupport::jfr_thread_id(jobject thread) {
+  JavaThread* native_thread = get_native(thread);
   return native_thread != NULL ? JFR_THREAD_ID(native_thread) : 0;
 }
 
 void JfrJavaSupport::exclude(jobject thread) {
-  HandleMark hm;
-  ThreadsListHandle tlh;
-  JavaThread* native_thread = NULL;
-  (void)tlh.cv_internal_thread_to_JavaThread(thread, &native_thread, NULL);
+  JavaThread* native_thread = get_native(thread);
   if (native_thread != NULL) {
     JfrThreadLocal::exclude(native_thread);
   } else {
     // not started yet, track the thread oop
     add_thread_to_exclusion_list(thread);
   }
 }
 
 void JfrJavaSupport::include(jobject thread) {
-  HandleMark hm;
-  ThreadsListHandle tlh;
-  JavaThread* native_thread = NULL;
-  (void)tlh.cv_internal_thread_to_JavaThread(thread, &native_thread, NULL);
+  JavaThread* native_thread = get_native(thread);
   if (native_thread != NULL) {
     JfrThreadLocal::include(native_thread);
   } else {
     // not started yet, untrack the thread oop
     remove_thread_from_exclusion_list(thread);
   }
 }
 
 bool JfrJavaSupport::is_excluded(jobject thread) {
-  HandleMark hm;
-  ThreadsListHandle tlh;
-  JavaThread* native_thread = NULL;
-  (void)tlh.cv_internal_thread_to_JavaThread(thread, &native_thread, NULL);
+  JavaThread* native_thread = get_native(thread);
   return native_thread != NULL ? native_thread->jfr_thread_local()->is_excluded() : is_thread_excluded(thread);
 }
 
 jobject JfrJavaSupport::get_handler(jobject clazz, TRAPS) {
   DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_vm(THREAD));
