diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/SecuritySupport.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/SecuritySupport.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/SecuritySupport.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/SecuritySupport.java
@@ -430,13 +430,26 @@
         doPrivileged(() -> constructor.setAccessible(true), new ReflectPermission("suppressAccessChecks"));
     }
 
     static void ensureClassIsInitialized(Class<?> clazz) {
         try {
-            MethodHandles.privateLookupIn(clazz, LOOKUP).ensureInitialized(clazz);
+            MethodHandles.Lookup lookup;
+            if (System.getSecurityManager() == null) {
+                lookup = MethodHandles.privateLookupIn(clazz, LOOKUP);
+            } else {
+                lookup = AccessController.doPrivileged(new PrivilegedExceptionAction<>() {
+                    @Override
+                    public MethodHandles.Lookup run() throws IllegalAccessException {
+                        return MethodHandles.privateLookupIn(clazz, LOOKUP);
+                    }
+                }, null, new ReflectPermission("suppressAccessChecks"));
+            }
+            lookup.ensureInitialized(clazz);
         } catch (IllegalAccessException e) {
             throw new InternalError(e);
+        } catch (PrivilegedActionException e) {
+            throw new InternalError(e.getCause());
         }
     }
 
     static Class<?> defineClass(Class<?> lookupClass, byte[] bytes) {
         return AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {
