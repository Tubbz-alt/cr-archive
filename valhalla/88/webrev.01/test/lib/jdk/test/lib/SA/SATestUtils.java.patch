diff a/test/lib/jdk/test/lib/SA/SATestUtils.java b/test/lib/jdk/test/lib/SA/SATestUtils.java
--- a/test/lib/jdk/test/lib/SA/SATestUtils.java
+++ b/test/lib/jdk/test/lib/SA/SATestUtils.java
@@ -20,32 +20,27 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package jdk.test.lib.SA;
 
+import jdk.test.lib.JDKToolLauncher;
+import jdk.test.lib.Platform;
+import jtreg.SkippedException;
+
 import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
 import java.io.IOException;
-import java.io.RandomAccessFile;
+import java.nio.file.Files;
+import java.nio.file.Paths;
 import java.security.AccessController;
-import java.security.PrivilegedAction;
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.zip.GZIPInputStream;
 
-import jdk.test.lib.Asserts;
-import jdk.test.lib.JDKToolLauncher;
-import jdk.test.lib.Platform;
-import jdk.test.lib.process.OutputAnalyzer;
-import jdk.test.lib.process.ProcessTools;
-import jtreg.SkippedException;
-
 public class SATestUtils {
     /**
      * Creates a ProcessBuilder, adding privileges (sudo) if needed.
      */
     public static ProcessBuilder createProcessBuilder(JDKToolLauncher launcher) {
@@ -166,15 +161,19 @@
      * if we are root, so return true.  Then return false for an expected denial
      * if "ptrace_scope" is 1, and true otherwise.
      */
     private static boolean canPtraceAttachLinux() throws IOException {
         // SELinux deny_ptrace:
-        File deny_ptrace = new File("/sys/fs/selinux/booleans/deny_ptrace");
-        if (deny_ptrace.exists()) {
-            try (RandomAccessFile file = AccessController.doPrivileged(
-                    (PrivilegedExceptionAction<RandomAccessFile>) () -> new RandomAccessFile(deny_ptrace, "r"))) {
-                if (file.readByte() != '0') {
+        var deny_ptrace = Paths.get("/sys/fs/selinux/booleans/deny_ptrace");
+        if (Files.exists(deny_ptrace)) {
+            try {
+                var bb = AccessController.doPrivileged(
+                    (PrivilegedExceptionAction<byte[]>) () -> Files.readAllBytes(deny_ptrace));
+                if (bb.length == 0) {
+                    throw new Error("deny_ptrace is empty");
+                }
+                if (bb[0] != '0') {
                     return false;
                 }
             } catch (PrivilegedActionException e) {
                 IOException t = (IOException) e.getException();
                 throw t;
@@ -184,15 +183,19 @@
         // YAMA enhanced security ptrace_scope:
         // 0 - a process can PTRACE_ATTACH to any other process running under the same uid
         // 1 - restricted ptrace: a process must be a children of the inferior or user is root
         // 2 - only processes with CAP_SYS_PTRACE may use ptrace or user is root
         // 3 - no attach: no processes may use ptrace with PTRACE_ATTACH
-        File ptrace_scope = new File("/proc/sys/kernel/yama/ptrace_scope");
-        if (ptrace_scope.exists()) {
-            try (RandomAccessFile file = AccessController.doPrivileged(
-                    (PrivilegedExceptionAction<RandomAccessFile>) () -> new RandomAccessFile(ptrace_scope, "r"))) {
-                byte yama_scope = file.readByte();
+        var ptrace_scope = Paths.get("/proc/sys/kernel/yama/ptrace_scope");
+        if (Files.exists(ptrace_scope)) {
+            try {
+                var bb = AccessController.doPrivileged(
+                    (PrivilegedExceptionAction<byte[]>) () -> Files.readAllBytes(ptrace_scope));
+                if (bb.length == 0) {
+                    throw new Error("ptrace_scope is empty");
+                }
+                byte yama_scope = bb[0];
                 if (yama_scope == '3') {
                     return false;
                 }
 
                 if (!Platform.isRoot() && yama_scope != '0') {
@@ -210,17 +213,12 @@
     public static void unzipCores(File dir) {
         File[] gzCores = dir.listFiles((directory, name) -> name.matches("core(\\.\\d+)?\\.gz"));
         for (File gzCore : gzCores) {
             String coreFileName = gzCore.getName().replace(".gz", "");
             System.out.println("Unzipping core into " + coreFileName);
-            try (GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(gzCore));
-                 FileOutputStream fos = new FileOutputStream(coreFileName)) {
-                byte[] buffer = new byte[1024];
-                int length;
-                while ((length = gzis.read(buffer)) > 0) {
-                    fos.write(buffer, 0, length);
-                }
+            try (GZIPInputStream gzis = new GZIPInputStream(Files.newInputStream(gzCore.toPath()))) {
+                Files.copy(gzis, Paths.get(coreFileName));
             } catch (IOException e) {
                 throw new SkippedException("Not able to unzip file: " + gzCore.getAbsolutePath(), e);
             }
         }
     }
