diff a/test/jdk/tools/jpackage/helpers/jdk/jpackage/test/PackageTest.java b/test/jdk/tools/jpackage/helpers/jdk/jpackage/test/PackageTest.java
--- a/test/jdk/tools/jpackage/helpers/jdk/jpackage/test/PackageTest.java
+++ b/test/jdk/tools/jpackage/helpers/jdk/jpackage/test/PackageTest.java
@@ -237,10 +237,14 @@
 
         // Setup test app to have valid jpackage command line before
         // running check of type of environment.
         addHelloAppInitializer(null);
 
+        forTypes(PackageType.LINUX, () -> {
+            LinuxHelper.addFileAssociationsVerifier(this, fa);
+        });
+
         String noActionMsg = "Not running file associations test";
         if (GraphicsEnvironment.isHeadless()) {
             TKit.trace(String.format(
                     "%s because running in headless environment", noActionMsg));
             return this;
@@ -273,14 +277,10 @@
                 HelloApp.verifyOutputFile(appOutput, expectedArgs,
                         Collections.emptyMap());
             });
         });
 
-        forTypes(PackageType.LINUX, () -> {
-            LinuxHelper.addFileAssociationsVerifier(this, fa);
-        });
-
         return this;
     }
 
     public PackageTest forTypes(Collection<PackageType> types, Runnable action) {
         Set<PackageType> oldTypes = Set.of(currentTypes.toArray(
@@ -551,34 +551,18 @@
             } else {
                 formatString = "Verify installed: %s";
             }
             TKit.trace(String.format(formatString, cmd.getPrintableCommandLine()));
 
-            TKit.assertDirectoryExists(cmd.appRuntimeDirectory());
             if (!cmd.isRuntime()) {
-                TKit.assertExecutableFileExists(cmd.appLauncherPath());
-
                 if (PackageType.WINDOWS.contains(cmd.packageType())
                         && !cmd.isPackageUnpacked(
                                 "Not verifying desktop integration")) {
                     new WindowsHelper.DesktopIntegrationVerifier(cmd);
                 }
             }
-
-            if (cmd.isPackageUnpacked()) {
-                final Path appImageFile = AppImageFile.getPathInAppImage(
-                        Path.of(""));
-                try (Stream<Path> walk = ThrowingSupplier.toSupplier(
-                        () -> Files.walk(cmd.unpackedPackageDirectory())).get()) {
-                    walk.filter(path -> path.getFileName().equals(appImageFile))
-                        .findFirst()
-                        .ifPresent(path -> TKit.assertPathExists(path, false));
-                }
-            } else {
-                TKit.assertPathExists(AppImageFile.getPathInAppImage(
-                        cmd.appInstallationDirectory()), false);
-            }
+            cmd.assertAppLayout();
 
             installVerifiers.forEach(v -> v.accept(cmd));
         }
 
         private void verifyPackageUninstalled(JPackageCommand cmd) {
