diff a/test/jdk/tools/jpackage/share/jdk/jpackage/tests/BasicTest.java b/test/jdk/tools/jpackage/share/jdk/jpackage/tests/BasicTest.java
--- a/test/jdk/tools/jpackage/share/jdk/jpackage/tests/BasicTest.java
+++ b/test/jdk/tools/jpackage/share/jdk/jpackage/tests/BasicTest.java
@@ -225,11 +225,12 @@
     @Parameter("java.desktop")
     @Parameter("java.desktop,jdk.jartool")
     @Parameter({ "java.desktop", "jdk.jartool" })
     public void testAddModules(String... addModulesArg) {
         JPackageCommand cmd = JPackageCommand
-                .helloAppImage("goodbye.jar:com.other/com.other.Hello");
+                .helloAppImage("goodbye.jar:com.other/com.other.Hello")
+                .ignoreDefaultRuntime(true); // because of --add-modules
         Stream.of(addModulesArg).map(v -> Stream.of("--add-modules", v)).flatMap(
                 s -> s).forEachOrdered(cmd::addArgument);
         cmd.executeAndAssertHelloAppImageCreated();
     }
 
@@ -268,14 +269,10 @@
                             tempDir));
         })
         .run(PackageTest.Action.CREATE);
 
         createTest.get()
-        .addInitializer(cmd -> {
-            // Clean output from the previus jpackage run.
-            Files.delete(cmd.outputBundle());
-        })
         // Temporary directory should not be empty,
         // jpackage should exit with error.
         .setExpectedExitCode(1)
         .run(PackageTest.Action.CREATE);
     }
@@ -336,10 +333,19 @@
                 "--output", runtimeDir.toString(),
                 "--strip-debug",
                 "--no-header-files",
                 "--no-man-pages");
 
+        TKit.trace("jlink output BEGIN");
+        try (Stream<Path> paths = Files.walk(runtimeDir)) {
+            paths.filter(Files::isRegularFile)
+                    .map(runtimeDir::relativize)
+                    .map(Path::toString)
+                    .forEach(TKit::trace);
+        }
+        TKit.trace("jlink output END");
+
         if (moduleName != null) {
             jlink.addArguments("--add-modules", moduleName, "--module-path",
                     Path.of(cmd.getArgumentValue("--module-path")).resolve(
                             "hello.jar").toString());
         }
