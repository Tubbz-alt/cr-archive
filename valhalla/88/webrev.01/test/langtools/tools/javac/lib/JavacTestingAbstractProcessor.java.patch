diff a/test/langtools/tools/javac/lib/JavacTestingAbstractProcessor.java b/test/langtools/tools/javac/lib/JavacTestingAbstractProcessor.java
--- a/test/langtools/tools/javac/lib/JavacTestingAbstractProcessor.java
+++ b/test/langtools/tools/javac/lib/JavacTestingAbstractProcessor.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -108,42 +108,42 @@
     /*
      * The set of visitors below will directly extend the most recent
      * corresponding platform visitor type.
      */
 
-    @SupportedSourceVersion(RELEASE_15)
+    @SupportedSourceVersion(RELEASE_16)
     public static abstract class AbstractAnnotationValueVisitor<R, P> extends AbstractAnnotationValueVisitor14<R, P> {
 
         /**
          * Constructor for concrete subclasses to call.
          */
         protected AbstractAnnotationValueVisitor() {
             super();
         }
     }
 
-    @SupportedSourceVersion(RELEASE_15)
+    @SupportedSourceVersion(RELEASE_16)
     public static abstract class AbstractElementVisitor<R, P> extends AbstractElementVisitor14<R, P> {
         /**
          * Constructor for concrete subclasses to call.
          */
         protected AbstractElementVisitor(){
             super();
         }
     }
 
-    @SupportedSourceVersion(RELEASE_15)
+    @SupportedSourceVersion(RELEASE_16)
     public static abstract class AbstractTypeVisitor<R, P> extends AbstractTypeVisitor14<R, P> {
         /**
          * Constructor for concrete subclasses to call.
          */
         protected AbstractTypeVisitor() {
             super();
         }
     }
 
-    @SupportedSourceVersion(RELEASE_14)
+    @SupportedSourceVersion(RELEASE_16)
     public static class ElementKindVisitor<R, P> extends ElementKindVisitor14<R, P> {
         /**
          * Constructor for concrete subclasses; uses {@code null} for the
          * default value.
          */
@@ -160,11 +160,11 @@
         protected ElementKindVisitor(R defaultValue) {
             super(defaultValue);
         }
     }
 
-    @SupportedSourceVersion(RELEASE_15)
+    @SupportedSourceVersion(RELEASE_16)
     public static class ElementScanner<R, P> extends ElementScanner14<R, P> {
         /**
          * Constructor for concrete subclasses; uses {@code null} for the
          * default value.
          */
@@ -179,11 +179,11 @@
         protected ElementScanner(R defaultValue){
             super(defaultValue);
         }
     }
 
-    @SupportedSourceVersion(RELEASE_15)
+    @SupportedSourceVersion(RELEASE_16)
     public static class SimpleAnnotationValueVisitor<R, P> extends SimpleAnnotationValueVisitor14<R, P> {
         /**
          * Constructor for concrete subclasses; uses {@code null} for the
          * default value.
          */
@@ -200,11 +200,11 @@
         protected SimpleAnnotationValueVisitor(R defaultValue) {
             super(defaultValue);
         }
     }
 
-    @SupportedSourceVersion(RELEASE_15)
+    @SupportedSourceVersion(RELEASE_16)
     public static class SimpleElementVisitor<R, P> extends SimpleElementVisitor14<R, P> {
         /**
          * Constructor for concrete subclasses; uses {@code null} for the
          * default value.
          */
@@ -221,11 +221,11 @@
         protected SimpleElementVisitor(R defaultValue){
             super(defaultValue);
         }
     }
 
-    @SupportedSourceVersion(RELEASE_15)
+    @SupportedSourceVersion(RELEASE_16)
     public static class SimpleTypeVisitor<R, P> extends SimpleTypeVisitor14<R, P> {
         /**
          * Constructor for concrete subclasses; uses {@code null} for the
          * default value.
          */
@@ -242,11 +242,11 @@
         protected SimpleTypeVisitor(R defaultValue){
             super(defaultValue);
         }
     }
 
-    @SupportedSourceVersion(RELEASE_15)
+    @SupportedSourceVersion(RELEASE_16)
     public static class TypeKindVisitor<R, P> extends TypeKindVisitor14<R, P> {
         /**
          * Constructor for concrete subclasses to call; uses {@code null}
          * for the default value.
          */
