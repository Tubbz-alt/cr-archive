diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/cfpTests.jcod b/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/cfpTests.jcod
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/cfpTests.jcod
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/cfpTests.jcod
@@ -46,11 +46,11 @@
 // Test that class modifiers cannot have both ACC_VALUE and ACC_ABSTRACT set.
 //
 class ValueAbstract {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [28] { // Constant Pool
     ; // first element is empty
     Method #7 #23; // #1     at 0x0A
     Field #3 #24; // #2     at 0x0F
     class #9; // #3     at 0x14
@@ -202,11 +202,11 @@
 // Test that class modifiers cannot have both ACC_VALUE and ACC_ENUM set.
 //
 class ValueEnum {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [28] { // Constant Pool
     ; // first element is empty
     Method #7 #23; // #1     at 0x0A
     Field #3 #24; // #2     at 0x0F
     class #9; // #3     at 0x14
@@ -358,11 +358,11 @@
 // Test that inline type fields must be final.
 //
 class ValueFieldNotFinal {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [28] { // Constant Pool
     ; // first element is empty
     Method #7 #23; // #1     at 0x0A
     Field #3 #24; // #2     at 0x0F
     class #9; // #3     at 0x14
@@ -514,11 +514,11 @@
 // Test that class modifiers cannot have both ACC_VALUE and ACC_INTERFACE set.
 //
 class ValueInterface {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [27] { // Constant Pool
     ; // first element is empty
     Method #7 #21; // #1     at 0x0A
     Field #3 #22; // #2     at 0x0F
     class #23; // #3     at 0x14
@@ -621,11 +621,11 @@
 // }
 
 class ValueMethodSynch {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [46] { // Constant Pool
     ; // first element is empty
     class #23; // #1     at 0x0A
     Field #1 #24; // #2     at 0x0D
     InvokeDynamic 0s #27; // #3     at 0x12
@@ -876,11 +876,11 @@
 // }
 
 class Circ {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [61] { // Constant Pool
     ; // first element is empty
     class #34; // #1     at 0x0A
     Field #1 #35; // #2     at 0x0D
     class #36; // #3     at 0x12
@@ -1155,11 +1155,11 @@
 } // end class Circ
 
 class Circ2 {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [60] { // Constant Pool
     ; // first element is empty
     class #33; // #1     at 0x0A
     Field #1 #34; // #2     at 0x0D
     class #35; // #3     at 0x12
@@ -1469,11 +1469,11 @@
 // }
 
 class CircStaticA {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [61] { // Constant Pool
     ; // first element is empty
     class #34; // #1     at 0x0A
     Field #1 #35; // #2     at 0x0D
     InvokeDynamic 0s #38; // #3     at 0x12
@@ -1747,11 +1747,11 @@
 } // end class CircStaticA
 
 class CircStaticB {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [61] { // Constant Pool
     ; // first element is empty
     class #34; // #1     at 0x0A
     Field #1 #35; // #2     at 0x0D
     InvokeDynamic 0s #38; // #3     at 0x12
@@ -2034,11 +2034,11 @@
 //}
 
 class ValueCloneable {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [46] { // Constant Pool
     ; // first element is empty
     class #22; // #1     at 0x0A
     Field #1 #23; // #2     at 0x0D
     InvokeDynamic 0s #26; // #3     at 0x12
