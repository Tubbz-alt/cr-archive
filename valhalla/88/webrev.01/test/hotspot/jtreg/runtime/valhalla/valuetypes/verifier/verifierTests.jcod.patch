diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/verifier/verifierTests.jcod b/test/hotspot/jtreg/runtime/valhalla/valuetypes/verifier/verifierTests.jcod
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/verifier/verifierTests.jcod
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/verifier/verifierTests.jcod
@@ -58,11 +58,11 @@
 // the constant pool, a VerifyError exception should get thrown.
 //
 class defValBadCP {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [27] { // Constant Pool
     ; // first element is empty
     Method #7 #21; // #1     at 0x0A
     Field #3 #22; // #2     at 0x0F
     class #23; // #3     at 0x14
@@ -260,11 +260,11 @@
 // entry instead of a Class entry, a VerifyError exception should get thrown.
 //
 class defValWrongCPType {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [27] { // Constant Pool
     ; // first element is empty
     Method #7 #21; // #1     at 0x0A
     Field #3 #22; // #2     at 0x0F
     class #23; // #3     at 0x14
@@ -361,11 +361,11 @@
 // the constant pool, a VerifyError exception should get thrown.
 //
 class wthFldBadCP {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [20] { // Constant Pool
     ; // first element is empty
     Method #4 #17; // #1     at 0x0A
     Field #3 #18; // #2     at 0x0F
     class #12; // #3     at 0x14
@@ -479,11 +479,11 @@
 // the type (int) of the field being assigned to.
 //
 class wthFldBadFldVal {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [20] { // Constant Pool
     ; // first element is empty
     Method #4 #17; // #1     at 0x0A
     Field #3 #18; // #2     at 0x0F
     class #12; // #3     at 0x14
@@ -596,11 +596,11 @@
 // for the withfield opcode (0xCC at bytecode position 6) must be a reference.
 //
 class wthFldBadFldRef {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [20] { // Constant Pool
     ; // first element is empty
     Method #4 #17; // #1     at 0x0A
     Field #3 #18; // #2     at 0x0F
     class #12; // #3     at 0x14
@@ -815,11 +815,11 @@
 // entry instead of a Field entry, a VerifyError exception should get thrown.
 //
 class wthFldWrongCPType {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [20] { // Constant Pool
     ; // first element is empty
     Method #4 #17; // #1     at 0x0A
     Field #3 #18; // #2     at 0x0F
     class #12; // #3     at 0x14
@@ -934,11 +934,11 @@
 // and the inline type on the stack, in this case 'wthFldObject', be identical.
 //
 class wthFldObject {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [22] { // Constant Pool
     ; // first element is empty
     Method #4 #17; // #1     at 0x0A
     Field #3 #18; // #2     at 0x0F
     class #12; // #3     at 0x14
@@ -1056,11 +1056,11 @@
 // cannot be an inline type.
 //
 class monEnterVT {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [46] { // Constant Pool
     ; // first element is empty
     class #23; // #1     at 0x0A
     Field #1 #24; // #2     at 0x0D
     InvokeDynamic 0s #27; // #3     at 0x12
@@ -1284,11 +1284,11 @@
 // must be an inline type.
 //
 class defValueObj {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [46] { // Constant Pool
     ; // first element is empty
     class #23; // #1     at 0x0A
     Field #1 #24; // #2     at 0x0D
     InvokeDynamic 0s #27; // #3     at 0x12
@@ -1512,11 +1512,11 @@
 // opcode must be an inline type.
 //
 class withfieldObj {
   0xCAFEBABE;
   0; // minor version
-  59; // version
+  60; // version
   [23] { // Constant Pool
     ; // first element is empty
     Method #5 #19; // #1     at 0x0A
     Field #3 #20; // #2     at 0x0F
     class #13; // #3     at 0x14
