diff a/src/java.base/share/classes/java/lang/reflect/ProxyGenerator.java b/src/java.base/share/classes/java/lang/reflect/ProxyGenerator.java
--- a/src/java.base/share/classes/java/lang/reflect/ProxyGenerator.java
+++ b/src/java.base/share/classes/java/lang/reflect/ProxyGenerator.java
@@ -444,11 +444,11 @@
     /**
      * Generate a class file for the proxy class.  This method drives the
      * class file generation process.
      */
     private byte[] generateClassFile() {
-        visit(V14, accessFlags, dotToSlash(className), null,
+        visit(V16, accessFlags, dotToSlash(className), null,
                 JLR_PROXY, typeNames(interfaces));
 
         /*
          * Add proxy methods for the hashCode, equals,
          * and toString methods of java.lang.Object.  This is done before
@@ -811,11 +811,15 @@
                     mv.visitInsn(DRETURN);
                 } else {
                     throw new AssertionError();
                 }
             } else {
-                mv.visitTypeInsn(CHECKCAST, dotToSlash(type.getName()));
+                String internalName = dotToSlash(type.getName());
+                if (type.isInlineClass()) {
+                    internalName = 'Q' + internalName + ";";
+                }
+                mv.visitTypeInsn(CHECKCAST, internalName);
                 mv.visitInsn(ARETURN);
             }
         }
 
         /**
@@ -862,13 +866,15 @@
          * =============== Code Generation Utility Methods ===============
          */
 
         /**
          * Generate code to invoke the Class.forName with the name of the given
-         * class to get its Class object at runtime.  The code is written to
-         * the supplied stream.  Note that the code generated by this method
-         * may cause the checked ClassNotFoundException to be thrown.
+         * class to get its Class object at runtime.  And also generate code
+         * to invoke Class.asPrimaryType if the class is regular value type.
+         *
+         * The code is written to the supplied stream.  Note that the code generated
+         * by this method may caused the checked ClassNotFoundException to be thrown.
          */
         private void codeClassForName(MethodVisitor mv, Class<?> cl) {
             mv.visitLdcInsn(cl.getName());
             mv.visitMethodInsn(INVOKESTATIC,
                     JL_CLASS,
