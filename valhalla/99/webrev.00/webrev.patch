diff a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -2477,13 +2477,16 @@
       SignatureStream ss((Symbol*) signature, true);
       while (!ss.at_return_type())  ss.next();
       if (ss.is_reference()) {
         Symbol* ret = ss.as_symbol();
         const Symbol* required = class_name();
-        if (is_hidden() || is_unsafe_anonymous()) {
-          // The original class name in hidden classes and in the UAC byte stream gets
-          // changed.  So using the original name in the return type is no longer valid.
+        if (is_hidden()) {
+          // The original class name in hidden classes gets changed.  So using
+          // the original name in the return type is no longer valid.
+          // Note that expecting the return type for inline hidden class factory
+          // methods to be java.lang.Object works around a JVM Spec issue for
+          // hidden classes.
           required = vmSymbols::java_lang_Object();
         }
         ok = (ret == required);
       }
       if (!ok) {
diff a/src/hotspot/share/prims/unsafe.cpp b/src/hotspot/share/prims/unsafe.cpp
--- a/src/hotspot/share/prims/unsafe.cpp
+++ b/src/hotspot/share/prims/unsafe.cpp
@@ -910,10 +910,12 @@
 // the anonymous class is loaded.  This is useful in dynamic languages, in which
 // various kinds of metaobjects must be introduced as constants into bytecode.
 // Note the cast (Object), which tells the verifier to expect an arbitrary object,
 // not just a literal string.  For such ldc instructions, the verifier uses the
 // type Object instead of String, if the loaded constant is not in fact a String.
+//
+// An anonymous class cannot be an inline type.
 
 static InstanceKlass*
 Unsafe_DefineAnonymousClass_impl(JNIEnv *env,
                                  jclass host_class, jbyteArray data, jobjectArray cp_patches_jh,
                                  u1** temp_alloc,
@@ -1005,10 +1007,12 @@
                                                 CHECK_NULL);
   if (anonk == NULL) {
     return NULL;
   }
 
+  assert(!anonk->is_inline_klass(), "unsafe anonymous class cannot be inline class");
+
   return InstanceKlass::cast(anonk);
 }
 
 UNSAFE_ENTRY(jclass, Unsafe_DefineAnonymousClass0(JNIEnv *env, jobject unsafe, jclass host_class, jbyteArray data, jobjectArray cp_patches_jh)) {
   ResourceMark rm(THREAD);
diff a/src/hotspot/share/runtime/reflection.cpp b/src/hotspot/share/runtime/reflection.cpp
--- a/src/hotspot/share/runtime/reflection.cpp
+++ b/src/hotspot/share/runtime/reflection.cpp
@@ -1221,11 +1221,11 @@
   // Special case for factory methods
   if (!method->signature()->is_void_method_signature()) {
     assert(klass->is_inline_klass(), "inline classes must use factory methods");
     Handle no_receiver; // null instead of receiver
     BasicType rtype;
-    if (klass->is_hidden() || klass->is_unsafe_anonymous()) {
+    if (klass->is_hidden()) {
       rtype = T_OBJECT;
     } else {
       rtype = T_VALUETYPE;
     }
     return invoke(klass, method, no_receiver, override, ptypes, rtype, args, false, CHECK_NULL);
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/HiddenInlineClassTest.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/HiddenInlineClassTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/HiddenInlineClassTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/HiddenInlineClassTest.java
@@ -28,42 +28,34 @@
  * @modules jdk.compiler
  * @compile HiddenPoint.jcod
  * @run main HiddenInlineClassTest
  */
 
-import java.io.ByteArrayOutputStream;
 import java.io.File;
-import java.io.FileInputStream;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodHandles.Lookup;
 import static java.lang.invoke.MethodHandles.Lookup.ClassOption.*;
+import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
 public class HiddenInlineClassTest {
 
-    static final Path CLASSES_DIR = Paths.get(System.getProperty("test.classes"));
+    static final Path CLASSES_DIR = Paths.get(System.getProperty("test.classes", "."));
     String hello = "hello";
 
     static byte[] readClassFile(String classFileName) throws Exception {
-        File classFile = new File(CLASSES_DIR + File.separator + classFileName);
-        try (FileInputStream in = new FileInputStream(classFile);
-             ByteArrayOutputStream out = new ByteArrayOutputStream()) {
-            int b;
-            while ((b = in.read()) != -1) {
-                out.write(b);
-            }
-            return out.toByteArray();
-        }
+       Path path = CLASSES_DIR.resolve(classFileName.replace('.', File.separatorChar) + ".class");
+       return Files.readAllBytes(path);
     }
 
     public static void main(String[] args) throws Throwable {
         Lookup lookup = MethodHandles.lookup();
-        byte[] bytes = readClassFile("HiddenPoint.class");
+        byte[] bytes = readClassFile("HiddenPoint");
 
         // Define a hidden class that is an inline type.
-        Class<?> c = lookup.defineHiddenClass(bytes, true, NESTMATE).lookupClass();
+        Class<?> c = lookup.defineHiddenClass(bytes, true).lookupClass();
         Object hp = c.newInstance();
         String s = (String)c.getMethod("getValue").invoke(hp);
         if (!s.equals("x: 0, y: 0")) {
             throw new RuntimeException(
                 "wrong value returned by method getValue() in inline hidden class: " + s);
