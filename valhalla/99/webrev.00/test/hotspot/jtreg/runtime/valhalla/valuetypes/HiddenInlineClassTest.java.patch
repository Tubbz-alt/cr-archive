diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/HiddenInlineClassTest.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/HiddenInlineClassTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/HiddenInlineClassTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/HiddenInlineClassTest.java
@@ -28,42 +28,34 @@
  * @modules jdk.compiler
  * @compile HiddenPoint.jcod
  * @run main HiddenInlineClassTest
  */
 
-import java.io.ByteArrayOutputStream;
 import java.io.File;
-import java.io.FileInputStream;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodHandles.Lookup;
 import static java.lang.invoke.MethodHandles.Lookup.ClassOption.*;
+import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
 public class HiddenInlineClassTest {
 
-    static final Path CLASSES_DIR = Paths.get(System.getProperty("test.classes"));
+    static final Path CLASSES_DIR = Paths.get(System.getProperty("test.classes", "."));
     String hello = "hello";
 
     static byte[] readClassFile(String classFileName) throws Exception {
-        File classFile = new File(CLASSES_DIR + File.separator + classFileName);
-        try (FileInputStream in = new FileInputStream(classFile);
-             ByteArrayOutputStream out = new ByteArrayOutputStream()) {
-            int b;
-            while ((b = in.read()) != -1) {
-                out.write(b);
-            }
-            return out.toByteArray();
-        }
+       Path path = CLASSES_DIR.resolve(classFileName.replace('.', File.separatorChar) + ".class");
+       return Files.readAllBytes(path);
     }
 
     public static void main(String[] args) throws Throwable {
         Lookup lookup = MethodHandles.lookup();
-        byte[] bytes = readClassFile("HiddenPoint.class");
+        byte[] bytes = readClassFile("HiddenPoint");
 
         // Define a hidden class that is an inline type.
-        Class<?> c = lookup.defineHiddenClass(bytes, true, NESTMATE).lookupClass();
+        Class<?> c = lookup.defineHiddenClass(bytes, true).lookupClass();
         Object hp = c.newInstance();
         String s = (String)c.getMethod("getValue").invoke(hp);
         if (!s.equals("x: 0, y: 0")) {
             throw new RuntimeException(
                 "wrong value returned by method getValue() in inline hidden class: " + s);
