diff a/src/hotspot/share/opto/idealGraphPrinter.cpp b/src/hotspot/share/opto/idealGraphPrinter.cpp
--- a/src/hotspot/share/opto/idealGraphPrinter.cpp
+++ b/src/hotspot/share/opto/idealGraphPrinter.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -73,14 +73,10 @@
 const char *IdealGraphPrinter::ASSEMBLY_ELEMENT = "assembly";
 
 int IdealGraphPrinter::_file_count = 0;
 
 IdealGraphPrinter *IdealGraphPrinter::printer() {
-  if (!PrintIdealGraph) {
-    return NULL;
-  }
-
   JavaThread *thread = JavaThread::current();
   if (!thread->is_Compiler_thread()) return NULL;
 
   CompilerThread *compiler_thread = (CompilerThread *)thread;
   if (compiler_thread->ideal_graph_printer() == NULL) {
@@ -631,11 +627,11 @@
     }
   }
 }
 
 void IdealGraphPrinter::print_method(const char *name, int level) {
-  if (should_print(level)) {
+  if (C->should_print(level)) {
     print(name, (Node *) C->root());
   }
 }
 
 // Print current ideal graph
@@ -689,15 +685,10 @@
   }
   tail(GRAPH_ELEMENT);
   _xml->flush();
 }
 
-// Should method be printed?
-bool IdealGraphPrinter::should_print(int level) {
-  return C->directive()->IGVPrintLevelOption >= level;
-}
-
 void IdealGraphPrinter::init_file_stream(const char* file_name, bool use_multiple_files, bool append) {
   ThreadCritical tc;
   if (use_multiple_files && _file_count != 0) {
     assert(!append, "append should only be used for debugging with a single file");
     ResourceMark rm;
