diff a/src/hotspot/share/gc/shenandoah/shenandoahPacer.cpp b/src/hotspot/share/gc/shenandoah/shenandoahPacer.cpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahPacer.cpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahPacer.cpp
@@ -191,11 +191,11 @@
   Atomic::xchg(&_budget, (intptr_t)initial);
   Atomic::store(&_tax_rate, tax_rate);
   Atomic::inc(&_epoch);
 
   // Shake up stalled waiters after budget update.
-  notify_waiters();
+  _need_notify_waiters.try_set();
 }
 
 bool ShenandoahPacer::claim_for_alloc(size_t words, bool force) {
   assert(ShenandoahPacing, "Only be here when pacing is enabled");
 
@@ -220,12 +220,12 @@
   if (_epoch != epoch) {
     // Stale ticket, no need to unpace.
     return;
   }
 
-  intptr_t tax = MAX2<intptr_t>(1, words * Atomic::load(&_tax_rate));
-  Atomic::add(&_budget, tax);
+  size_t tax = MAX2<size_t>(1, words * Atomic::load(&_tax_rate));
+  add_budget(tax);
 }
 
 intptr_t ShenandoahPacer::epoch() {
   return Atomic::load(&_epoch);
 }
@@ -276,21 +276,24 @@
       break;
     }
   }
 }
 
-void ShenandoahPacer::wait(long time_ms) {
+void ShenandoahPacer::wait(size_t time_ms) {
   // Perform timed wait. It works like like sleep(), except without modifying
   // the thread interruptible status. MonitorLocker also checks for safepoints.
   assert(time_ms > 0, "Should not call this with zero argument, as it would stall until notify");
+  assert(time_ms <= LONG_MAX, "Sanity");
   MonitorLocker locker(_wait_monitor);
-  _wait_monitor->wait(time_ms);
+  _wait_monitor->wait((long)time_ms);
 }
 
 void ShenandoahPacer::notify_waiters() {
-  MonitorLocker locker(_wait_monitor);
-  _wait_monitor->notify_all();
+  if (_need_notify_waiters.try_unset()) {
+    MonitorLocker locker(_wait_monitor);
+    _wait_monitor->notify_all();
+  }
 }
 
 void ShenandoahPacer::print_on(outputStream* out) const {
   out->print_cr("ALLOCATION PACING:");
   out->cr();
