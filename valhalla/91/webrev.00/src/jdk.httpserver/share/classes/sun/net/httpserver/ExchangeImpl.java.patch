diff a/src/jdk.httpserver/share/classes/sun/net/httpserver/ExchangeImpl.java b/src/jdk.httpserver/share/classes/sun/net/httpserver/ExchangeImpl.java
--- a/src/jdk.httpserver/share/classes/sun/net/httpserver/ExchangeImpl.java
+++ b/src/jdk.httpserver/share/classes/sun/net/httpserver/ExchangeImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -30,10 +30,13 @@
 import javax.net.ssl.*;
 import java.util.*;
 import java.lang.System.Logger;
 import java.lang.System.Logger.Level;
 import java.text.*;
+import java.time.Instant;
+import java.time.ZoneId;
+import java.time.format.DateTimeFormatter;
 import java.util.stream.Stream;
 import com.sun.net.httpserver.*;
 
 class ExchangeImpl {
 
@@ -53,20 +56,16 @@
     boolean close;
     boolean closed;
     boolean http10 = false;
 
     /* for formatting the Date: header */
-    private static final String pattern = "EEE, dd MMM yyyy HH:mm:ss zzz";
-    private static final TimeZone gmtTZ = TimeZone.getTimeZone("GMT");
-    private static final ThreadLocal<DateFormat> dateFormat =
-         new ThreadLocal<DateFormat>() {
-             @Override protected DateFormat initialValue() {
-                 DateFormat df = new SimpleDateFormat(pattern, Locale.US);
-                 df.setTimeZone(gmtTZ);
-                 return df;
-         }
-     };
+    private static final DateTimeFormatter FORMATTER;
+    static {
+        String pattern = "EEE, dd MMM yyyy HH:mm:ss zzz";
+        FORMATTER = DateTimeFormatter.ofPattern(pattern, Locale.US)
+                                     .withZone(ZoneId.of("GMT"));
+    }
 
     private static final String HEAD = "HEAD";
 
     /* streams which take care of the HTTP protocol framing
      * and are passed up to higher layers
@@ -210,11 +209,11 @@
         OutputStream tmpout = new BufferedOutputStream (ros);
         PlaceholderOutputStream o = getPlaceholderResponseBody();
         tmpout.write (bytes(statusLine, 0), 0, statusLine.length());
         boolean noContentToSend = false; // assume there is content
         boolean noContentLengthHeader = false; // must not send Content-length is set
-        rspHdrs.set ("Date", dateFormat.get().format (new Date()));
+        rspHdrs.set("Date", FORMATTER.format(Instant.now()));
 
         /* check for response type that is not allowed to send a body */
 
         if ((rCode>=100 && rCode <200) /* informational */
             ||(rCode == 204)           /* no content */
