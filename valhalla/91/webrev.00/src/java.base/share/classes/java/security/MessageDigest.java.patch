diff a/src/java.base/share/classes/java/security/MessageDigest.java b/src/java.base/share/classes/java/security/MessageDigest.java
--- a/src/java.base/share/classes/java/security/MessageDigest.java
+++ b/src/java.base/share/classes/java/security/MessageDigest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -129,10 +129,16 @@
      */
     protected MessageDigest(String algorithm) {
         this.algorithm = algorithm;
     }
 
+    // private constructor used only by Delegate class
+    private MessageDigest(String algorithm, Provider p) {
+        this.algorithm = algorithm;
+        this.provider = p;
+    }
+
     /**
      * Returns a MessageDigest object that implements the specified digest
      * algorithm.
      *
      * <p> This method traverses the list of registered security Providers,
@@ -176,14 +182,15 @@
             MessageDigest md;
             Object[] objs = Security.getImpl(algorithm, "MessageDigest",
                                              (String)null);
             if (objs[0] instanceof MessageDigest) {
                 md = (MessageDigest)objs[0];
+                md.provider = (Provider)objs[1];
             } else {
-                md = new Delegate((MessageDigestSpi)objs[0], algorithm);
+                md = Delegate.of((MessageDigestSpi)objs[0], algorithm,
+                    (Provider) objs[1]);
             }
-            md.provider = (Provider)objs[1];
 
             if (!skipDebug && pdebug != null) {
                 pdebug.println("MessageDigest." + algorithm +
                     " algorithm from: " + md.provider.getName());
             }
@@ -243,12 +250,12 @@
             MessageDigest md = (MessageDigest)objs[0];
             md.provider = (Provider)objs[1];
             return md;
         } else {
             MessageDigest delegate =
-                new Delegate((MessageDigestSpi)objs[0], algorithm);
-            delegate.provider = (Provider)objs[1];
+                    Delegate.of((MessageDigestSpi)objs[0], algorithm,
+                    (Provider)objs[1]);
             return delegate;
         }
     }
 
     /**
@@ -296,12 +303,12 @@
             MessageDigest md = (MessageDigest)objs[0];
             md.provider = (Provider)objs[1];
             return md;
         } else {
             MessageDigest delegate =
-                new Delegate((MessageDigestSpi)objs[0], algorithm);
-            delegate.provider = (Provider)objs[1];
+                    Delegate.of((MessageDigestSpi)objs[0], algorithm,
+                    (Provider)objs[1]);
             return delegate;
         }
     }
 
     /**
@@ -545,12 +552,10 @@
             throw new CloneNotSupportedException();
         }
     }
 
 
-
-
     /*
      * The following class allows providers to extend from MessageDigestSpi
      * rather than from MessageDigest. It represents a MessageDigest with an
      * encapsulated, provider-supplied SPI object (of type MessageDigestSpi).
      * If the provider implementation is an instance of MessageDigestSpi,
@@ -561,18 +566,49 @@
      * moved up the hierarchy into a new class (MessageDigestSpi), which has
      * been interposed in the hierarchy between the API (MessageDigest)
      * and its original parent (Object).
      */
 
-    static class Delegate extends MessageDigest implements MessageDigestSpi2 {
+    private static class Delegate extends MessageDigest
+            implements MessageDigestSpi2 {
+        // use this class for spi objects which implements Cloneable
+        private static final class CloneableDelegate extends Delegate
+                implements Cloneable {
+
+            private CloneableDelegate(MessageDigestSpi digestSpi,
+                    String algorithm, Provider p) {
+                super(digestSpi, algorithm, p);
+            }
+        }
 
         // The provider implementation (delegate)
-        private MessageDigestSpi digestSpi;
+        private final MessageDigestSpi digestSpi;
+
+        // factory method used by MessageDigest class to create Delegate objs
+        static Delegate of(MessageDigestSpi digestSpi, String algo,
+                Provider p) {
+            Objects.requireNonNull(digestSpi);
+            boolean isCloneable = (digestSpi instanceof Cloneable);
+            // Spi impls from SunPKCS11 provider implement Cloneable but their
+            // clone() may throw CloneNotSupportException
+            if (isCloneable && p.getName().startsWith("SunPKCS11") &&
+                    p.getClass().getModule().getName().equals
+                    ("jdk.crypto.cryptoki")) {
+                try {
+                    digestSpi.clone();
+                } catch (CloneNotSupportedException cnse) {
+                    isCloneable = false;
+                }
+            }
+            return (isCloneable? new CloneableDelegate(digestSpi, algo, p) :
+                    new Delegate(digestSpi, algo, p));
+        }
 
-        // constructor
-        public Delegate(MessageDigestSpi digestSpi, String algorithm) {
-            super(algorithm);
+        // private constructor
+        private Delegate(MessageDigestSpi digestSpi, String algorithm,
+                Provider p) {
+            super(algorithm, p);
             this.digestSpi = digestSpi;
         }
 
         /**
          * Returns a clone if the delegate is cloneable.
@@ -580,61 +616,69 @@
          * @return a clone if the delegate is cloneable.
          *
          * @throws    CloneNotSupportedException if this is called on a
          * delegate that does not support {@code Cloneable}.
          */
+        @Override
         public Object clone() throws CloneNotSupportedException {
-            if (digestSpi instanceof Cloneable) {
-                MessageDigestSpi digestSpiClone =
-                    (MessageDigestSpi)digestSpi.clone();
+            if (this instanceof Cloneable) {
                 // Because 'algorithm', 'provider', and 'state' are private
                 // members of our supertype, we must perform a cast to
                 // access them.
-                MessageDigest that =
-                    new Delegate(digestSpiClone,
-                                 ((MessageDigest)this).algorithm);
-                that.provider = ((MessageDigest)this).provider;
+                MessageDigest that = new CloneableDelegate(
+                        (MessageDigestSpi)digestSpi.clone(),
+                        ((MessageDigest)this).algorithm,
+                        ((MessageDigest)this).provider);
                 that.state = ((MessageDigest)this).state;
                 return that;
             } else {
                 throw new CloneNotSupportedException();
             }
         }
 
+        @Override
         protected int engineGetDigestLength() {
             return digestSpi.engineGetDigestLength();
         }
 
+        @Override
         protected void engineUpdate(byte input) {
             digestSpi.engineUpdate(input);
         }
 
+        @Override
         protected void engineUpdate(byte[] input, int offset, int len) {
             digestSpi.engineUpdate(input, offset, len);
         }
 
+        @Override
         protected void engineUpdate(ByteBuffer input) {
             digestSpi.engineUpdate(input);
         }
 
+        @Override
         public void engineUpdate(SecretKey key) throws InvalidKeyException {
             if (digestSpi instanceof MessageDigestSpi2) {
                 ((MessageDigestSpi2)digestSpi).engineUpdate(key);
             } else {
                 throw new UnsupportedOperationException
                 ("Digest does not support update of SecretKey object");
             }
         }
+
+        @Override
         protected byte[] engineDigest() {
             return digestSpi.engineDigest();
         }
 
+        @Override
         protected int engineDigest(byte[] buf, int offset, int len)
             throws DigestException {
                 return digestSpi.engineDigest(buf, offset, len);
         }
 
+        @Override
         protected void engineReset() {
             digestSpi.engineReset();
         }
     }
 }
