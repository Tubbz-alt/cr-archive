diff a/src/hotspot/share/opto/library_call.cpp b/src/hotspot/share/opto/library_call.cpp
--- a/src/hotspot/share/opto/library_call.cpp
+++ b/src/hotspot/share/opto/library_call.cpp
@@ -4670,11 +4670,11 @@
       }
 
       if (!stopped()) {
         Node* obj_length = load_array_length(obj);
         Node* obj_size  = NULL;
-        Node* alloc_obj = new_array(obj_klass, obj_length, 0, &obj_size, true);  // no arguments to push
+        Node* alloc_obj = new_array(obj_klass, obj_length, 0, &obj_size, /*deoptimize_on_exception=*/true);
 
         BarrierSetC2* bs = BarrierSet::barrier_set()->barrier_set_c2();
         if (bs->array_copy_requires_gc_barriers(true, T_OBJECT, true, BarrierSetC2::Parsing)) {
           // If it is an oop array, it requires very special treatment,
           // because gc barriers are required when accessing the array.
@@ -4686,11 +4686,11 @@
             Node* alloc = tightly_coupled_allocation(alloc_obj, NULL);
             ArrayCopyNode* ac = ArrayCopyNode::make(this, true, obj, intcon(0), alloc_obj, intcon(0), obj_length, alloc != NULL, false);
             ac->set_clone_oop_array();
             Node* n = _gvn.transform(ac);
             assert(n == ac, "cannot disappear");
-            ac->connect_outputs(this);
+            ac->connect_outputs(this, /*deoptimize_on_exception=*/true);
 
             result_reg->init_req(_objArray_path, control());
             result_val->init_req(_objArray_path, alloc_obj);
             result_i_o ->set_req(_objArray_path, i_o());
             result_mem ->set_req(_objArray_path, reset_memory());
diff a/src/hotspot/share/opto/macro.cpp b/src/hotspot/share/opto/macro.cpp
--- a/src/hotspot/share/opto/macro.cpp
+++ b/src/hotspot/share/opto/macro.cpp
@@ -991,23 +991,18 @@
       if (use->is_AddP()) {
         for (DUIterator_Last kmin, k = use->last_outs(kmin); k >= kmin; ) {
           Node *n = use->last_out(k);
           uint oc2 = use->outcnt();
           if (n->is_Store()) {
-#ifdef ASSERT
-            // Verify that there is no dependent MemBarVolatile nodes,
-            // they should be removed during IGVN, see MemBarNode::Ideal().
-            for (DUIterator_Fast pmax, p = n->fast_outs(pmax);
-                                       p < pmax; p++) {
-              Node* mb = n->fast_out(p);
-              assert(mb->is_Initialize() || !mb->is_MemBar() ||
-                     mb->req() <= MemBarNode::Precedent ||
-                     mb->in(MemBarNode::Precedent) != n ||
-                     (inline_alloc && !ReduceInitialCardMarks),
-                     "MemBarVolatile should be eliminated for non-escaping object");
+            for (DUIterator_Fast pmax, p = n->fast_outs(pmax); p < pmax; p++) {
+              MemBarNode* mb = n->fast_out(p)->isa_MemBar();
+              if (mb != NULL && mb->req() <= MemBarNode::Precedent && mb->in(MemBarNode::Precedent) == n) {
+                // MemBarVolatiles should have been removed by MemBarNode::Ideal() for non-inline allocations
+                assert(inline_alloc, "MemBarVolatile should be eliminated for non-escaping object");
+                mb->remove(&_igvn);
+              }
             }
-#endif
             _igvn.replace_node(n, n->in(MemNode::Memory));
           } else {
             eliminate_gc_barrier(n);
           }
           k -= (oc2 - use->outcnt());
diff a/src/hotspot/share/opto/valuetypenode.cpp b/src/hotspot/share/opto/valuetypenode.cpp
--- a/src/hotspot/share/opto/valuetypenode.cpp
+++ b/src/hotspot/share/opto/valuetypenode.cpp
@@ -817,30 +817,35 @@
     if (is_default(*phase)) {
       // Search for users of the default value type
       for (DUIterator_Fast imax, i = fast_outs(imax); i < imax; i++) {
         Node* user = fast_out(i);
         AllocateNode* alloc = user->isa_Allocate();
-        if (alloc != NULL && alloc->result_cast() != NULL && alloc->in(AllocateNode::ValueNode) == this) {
+        if (alloc != NULL && alloc->in(AllocateNode::ValueNode) == this) {
           // Found an allocation of the default value type.
-          // If the code in StoreNode::Identity() that removes useless stores was not yet
-          // executed or ReduceFieldZeroing is disabled, there can still be initializing
-          // stores (only zero-type or default value stores, because value types are immutable).
           Node* res = alloc->result_cast();
-          for (DUIterator_Fast jmax, j = res->fast_outs(jmax); j < jmax; j++) {
-            AddPNode* addp = res->fast_out(j)->isa_AddP();
-            if (addp != NULL) {
-              for (DUIterator_Fast kmax, k = addp->fast_outs(kmax); k < kmax; k++) {
-                StoreNode* store = addp->fast_out(k)->isa_Store();
-                if (store != NULL && store->outcnt() != 0) {
-                  // Remove the useless store
-                  igvn->replace_in_uses(store, store->in(MemNode::Memory));
+          if (res != NULL) {
+            // If the code in StoreNode::Identity() that removes useless stores was not yet
+            // executed or ReduceFieldZeroing is disabled, there can still be initializing
+            // stores (only zero-type or default value stores, because value types are immutable).
+            for (DUIterator_Fast jmax, j = res->fast_outs(jmax); j < jmax; j++) {
+              AddPNode* addp = res->fast_out(j)->isa_AddP();
+              if (addp != NULL) {
+                for (DUIterator_Fast kmax, k = addp->fast_outs(kmax); k < kmax; k++) {
+                  StoreNode* store = addp->fast_out(k)->isa_Store();
+                  if (store != NULL && store->outcnt() != 0) {
+                    // Remove the useless store
+                    igvn->replace_in_uses(store, store->in(MemNode::Memory));
+                  }
                 }
               }
             }
+            // Replace allocation by pre-allocated oop
+            igvn->replace_node(res, default_oop(*phase, value_klass()));
           }
-          // Replace allocation by pre-allocated oop
-          igvn->replace_node(res, default_oop(*phase, value_klass()));
+          // Unlink AllocateNode
+          igvn->replace_input_of(alloc, AllocateNode::ValueNode, igvn->C->top());
+          --i; --imax;
         } else if (user->is_ValueType()) {
           // Add value type user to worklist to give it a chance to get optimized as well
           igvn->_worklist.push(user);
         }
       }
@@ -905,13 +910,15 @@
 
   // Process users
   for (DUIterator_Fast imax, i = fast_outs(imax); i < imax; i++) {
     Node* out = fast_out(i);
     if (out->is_ValueType()) {
-      // Recursively process value type users
+      // Unlink and recursively process value type users
+      igvn->hash_delete(out);
+      int nb = out->replace_edge(this, igvn->C->top());
       out->as_ValueType()->remove_redundant_allocations(igvn, phase);
-      --i; --imax;
+      --i; imax -= nb;
     } else if (out->isa_Allocate() != NULL) {
       // Unlink AllocateNode
       assert(out->in(AllocateNode::ValueNode) == this, "should be linked");
       igvn->replace_input_of(out, AllocateNode::ValueNode, igvn->C->top());
       --i; --imax;
