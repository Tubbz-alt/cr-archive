diff a/src/hotspot/cpu/x86/macroAssembler_x86.cpp b/src/hotspot/cpu/x86/macroAssembler_x86.cpp
--- a/src/hotspot/cpu/x86/macroAssembler_x86.cpp
+++ b/src/hotspot/cpu/x86/macroAssembler_x86.cpp
@@ -2782,26 +2782,20 @@
   if (tmp == noreg) push(rax);
   else if (tmp != rax) mov(tmp, rax);
 }
 
 void MacroAssembler::safepoint_poll(Label& slow_path, Register thread_reg, Register temp_reg) {
-  if (SafepointMechanism::uses_thread_local_poll()) {
-#ifdef _LP64
+#ifdef _LP64
     assert(thread_reg == r15_thread, "should be");
 #else
-    if (thread_reg == noreg) {
-      thread_reg = temp_reg;
-      get_thread(thread_reg);
-    }
-#endif
-    testb(Address(thread_reg, Thread::polling_page_offset()), SafepointMechanism::poll_bit());
-    jcc(Assembler::notZero, slow_path); // handshake bit set implies poll
-  } else {
-    cmp32(ExternalAddress(SafepointSynchronize::address_of_state()),
-        SafepointSynchronize::_not_synchronized);
-    jcc(Assembler::notEqual, slow_path);
+  if (thread_reg == noreg) {
+    thread_reg = temp_reg;
+    get_thread(thread_reg);
   }
+#endif
+  testb(Address(thread_reg, Thread::polling_page_offset()), SafepointMechanism::poll_bit());
+  jcc(Assembler::notZero, slow_path); // handshake bit set implies poll
 }
 
 // Calls to C land
 //
 // When entering C land, the rbp, & rsp of the last Java frame have to be recorded
@@ -4022,10 +4016,18 @@
   call(rax);
   // Caller pops the arguments (oop, message) and restores rax, r10
   BLOCK_COMMENT("} verify_oop");
 }
 
+void MacroAssembler::vallones(XMMRegister dst, int vector_len) {
+  if (UseAVX > 2 && (vector_len == Assembler::AVX_512bit || VM_Version::supports_avx512vl())) {
+    vpternlogd(dst, 0xFF, dst, dst, vector_len);
+  } else {
+    assert(UseAVX > 0, "");
+    vpcmpeqb(dst, dst, dst, vector_len);
+  }
+}
 
 RegisterOrConstant MacroAssembler::delayed_value_impl(intptr_t* delayed_value_addr,
                                                       Register tmp,
                                                       int offset) {
   intptr_t value = *delayed_value_addr;
