diff a/src/hotspot/cpu/x86/x86_32.ad b/src/hotspot/cpu/x86/x86_32.ad
--- a/src/hotspot/cpu/x86/x86_32.ad
+++ b/src/hotspot/cpu/x86/x86_32.ad
@@ -1,7 +1,7 @@
 //
-// Copyright (c) 1997, 2018, Oracle and/or its affiliates. All rights reserved.
+// Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
 // DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 //
 // This code is free software; you can redistribute it and/or modify it
 // under the terms of the GNU General Public License version 2 only, as
 // published by the Free Software Foundation.
@@ -312,16 +312,10 @@
 int MachCallRuntimeNode::ret_addr_offset() {
   assert(sizeof_FFree_Float_Stack_All != -1, "must have been emitted already");
   return sizeof_FFree_Float_Stack_All + 5 + pre_call_resets_size();
 }
 
-// Indicate if the safepoint node needs the polling page as an input.
-// Since x86 does have absolute addressing, it doesn't.
-bool SafePointNode::needs_polling_address_input() {
-  return SafepointMechanism::uses_thread_local_poll();
-}
-
 //
 // Compute padding required for nodes which need alignment
 //
 
 // The address of the call instruction needs to be 4-byte aligned to
@@ -701,23 +695,16 @@
   if (StackReservedPages > 0 && C->has_reserved_stack_access()) {
     __ reserved_stack_check();
   }
 
   if (do_polling() && C->is_method_compilation()) {
-    if (SafepointMechanism::uses_thread_local_poll()) {
-      Register pollReg = as_Register(EBX_enc);
-      MacroAssembler masm(&cbuf);
-      masm.get_thread(pollReg);
-      masm.movl(pollReg, Address(pollReg, in_bytes(Thread::polling_page_offset())));
-      masm.relocate(relocInfo::poll_return_type);
-      masm.testl(rax, Address(pollReg, 0));
-    } else {
-      cbuf.relocate(cbuf.insts_end(), relocInfo::poll_return_type, 0);
-      emit_opcode(cbuf,0x85);
-      emit_rm(cbuf, 0x0, EAX_enc, 0x5); // EAX
-      emit_d32(cbuf, (intptr_t)os::get_polling_page());
-    }
+    Register pollReg = as_Register(EBX_enc);
+    MacroAssembler masm(&cbuf);
+    masm.get_thread(pollReg);
+    masm.movl(pollReg, Address(pollReg, in_bytes(Thread::polling_page_offset())));
+    masm.relocate(relocInfo::poll_return_type);
+    masm.testl(rax, Address(pollReg, 0));
   }
 }
 
 uint MachEpilogNode::size(PhaseRegAlloc *ra_) const {
   return MachNode::size(ra_); // too many variables; just compute it
@@ -730,12 +717,10 @@
 
 const Pipeline * MachEpilogNode::pipeline() const {
   return MachNode::pipeline_class();
 }
 
-int MachEpilogNode::safepoint_offset() const { return 0; }
-
 //=============================================================================
 
 enum RC { rc_bad, rc_int, rc_float, rc_xmm, rc_stack };
 static enum RC rc_class( OptoReg::Name reg ) {
 
@@ -3143,22 +3128,10 @@
     int displace = $mem$$disp;
     relocInfo::relocType disp_reloc = $mem->disp_reloc(); // disp-as-oop when working with static globals
     encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace, disp_reloc);
   %}
 
-  // Safepoint Poll.  This polls the safepoint page, and causes an
-  // exception if it is not readable. Unfortunately, it kills the condition code
-  // in the process
-  // We current use TESTL [spp],EDI
-  // A better choice might be TESTB [spp + pagesize() - CacheLineSize()],0
-
-  enc_class Safepoint_Poll() %{
-    cbuf.relocate(cbuf.insts_mark(), relocInfo::poll_type, 0);
-    emit_opcode(cbuf,0x85);
-    emit_rm (cbuf, 0x0, 0x7, 0x5);
-    emit_d32(cbuf, (intptr_t)os::get_polling_page());
-  %}
 %}
 
 
 //----------FRAME--------------------------------------------------------------
 // Definition of frame structure and management information.
@@ -3391,10 +3364,19 @@
   op_cost(5);
   format %{ %}
   interface(CONST_INTER);
 %}
 
+operand immU8() %{
+  predicate((0 <= n->get_int()) && (n->get_int() <= 255));
+  match(ConI);
+
+  op_cost(5);
+  format %{ %}
+  interface(CONST_INTER);
+%}
+
 operand immI16() %{
   predicate((-32768 <= n->get_int()) && (n->get_int() <= 32767));
   match(ConI);
 
   op_cost(10);
@@ -13436,31 +13418,10 @@
 
 
 
 // ============================================================================
 // Safepoint Instruction
-instruct safePoint_poll(eFlagsReg cr) %{
-  predicate(SafepointMechanism::uses_global_page_poll());
-  match(SafePoint);
-  effect(KILL cr);
-
-  // TODO-FIXME: we currently poll at offset 0 of the safepoint polling page.
-  // On SPARC that might be acceptable as we can generate the address with
-  // just a sethi, saving an or.  By polling at offset 0 we can end up
-  // putting additional pressure on the index-0 in the D$.  Because of
-  // alignment (just like the situation at hand) the lower indices tend
-  // to see more traffic.  It'd be better to change the polling address
-  // to offset 0 of the last $line in the polling page.
-
-  format %{ "TSTL   #polladdr,EAX\t! Safepoint: poll for GC" %}
-  ins_cost(125);
-  size(6) ;
-  ins_encode( Safepoint_Poll() );
-  ins_pipe( ialu_reg_mem );
-%}
-
-instruct safePoint_poll_tls(eFlagsReg cr, eRegP_no_EBP poll) %{
   predicate(SafepointMechanism::uses_thread_local_poll());
   match(SafePoint poll);
   effect(KILL cr, USE poll);
 
   format %{ "TSTL   #EAX,[$poll]\t! Safepoint: poll for GC" %}
