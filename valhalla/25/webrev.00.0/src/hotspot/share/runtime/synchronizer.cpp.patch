diff a/src/hotspot/share/runtime/synchronizer.cpp b/src/hotspot/share/runtime/synchronizer.cpp
--- a/src/hotspot/share/runtime/synchronizer.cpp
+++ b/src/hotspot/share/runtime/synchronizer.cpp
@@ -1312,11 +1312,10 @@
   // scavenge costs.  As usual, we lean toward time in space-time
   // tradeoffs.
   const int MAXPRIVATE = 1024;
   NoSafepointVerifier nsv;
 
-  stringStream ss;
   for (;;) {
     ObjectMonitor* m;
 
     // 1: try to allocate from the thread's local om_free_list.
     // Threads will attempt to allocate first from their local list, then
@@ -1419,14 +1418,15 @@
                                     bool from_per_thread_alloc) {
   guarantee(m->header().value() == 0, "invariant");
   guarantee(m->object() == NULL, "invariant");
   NoSafepointVerifier nsv;
 
-  stringStream ss;
-  guarantee((m->is_busy() | m->_recursions) == 0, "freeing in-use monitor: "
-            "%s, recursions=" INTX_FORMAT, m->is_busy_to_string(&ss),
-            m->_recursions);
+  if ((m->is_busy() | m->_recursions) != 0) {
+    stringStream ss;
+    fatal("freeing in-use monitor: %s, recursions=" INTX_FORMAT,
+          m->is_busy_to_string(&ss), m->_recursions);
+  }
   // _next_om is used for both per-thread in-use and free lists so
   // we have to remove 'm' from the in-use list first (as needed).
   if (from_per_thread_alloc) {
     // Need to remove 'm' from om_in_use_list.
     ObjectMonitor* mid = NULL;
@@ -1585,12 +1585,14 @@
         }
       }
       free_tail = s;
       free_count++;
       guarantee(s->object() == NULL, "invariant");
-      stringStream ss;
-      guarantee(!s->is_busy(), "must be !is_busy: %s", s->is_busy_to_string(&ss));
+      if (s->is_busy()) {
+        stringStream ss;
+        fatal("must be !is_busy: %s", s->is_busy_to_string(&ss));
+      }
     }
     guarantee(free_tail != NULL, "invariant");
     int l_om_free_count = Atomic::load(&self->om_free_count);
     assert(l_om_free_count == free_count, "free counts don't match: "
            "l_om_free_count=%d, free_count=%d", l_om_free_count, free_count);
