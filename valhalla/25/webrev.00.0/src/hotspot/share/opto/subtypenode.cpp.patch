diff a/src/hotspot/share/opto/subtypenode.cpp b/src/hotspot/share/opto/subtypenode.cpp
--- a/src/hotspot/share/opto/subtypenode.cpp
+++ b/src/hotspot/share/opto/subtypenode.cpp
@@ -22,13 +22,15 @@
  *
  */
 
 #include "precompiled.hpp"
 #include "opto/addnode.hpp"
+#include "opto/callnode.hpp"
 #include "opto/connode.hpp"
 #include "opto/convertnode.hpp"
 #include "opto/phaseX.hpp"
+#include "opto/rootnode.hpp"
 #include "opto/subnode.hpp"
 #include "opto/subtypenode.hpp"
 
 const Type* SubTypeCheckNode::sub(const Type* sub_t, const Type* super_t) const {
   ciKlass* superk = super_t->is_klassptr()->klass();
@@ -135,16 +137,25 @@
   }
 
   if (addr != NULL) {
     intptr_t con = 0;
     Node* obj = AddPNode::Ideal_base_and_offset(addr, phase, con);
-    if (con == oopDesc::klass_offset_in_bytes() && obj != NULL && phase->type(obj)->isa_oopptr()) {
+    if (con == oopDesc::klass_offset_in_bytes() && obj != NULL) {
+      assert(phase->type(obj)->isa_oopptr(), "only for oop input");
       set_req(ObjOrSubKlass, obj);
       return this;
     }
   }
 
+  // AllocateNode might have more accurate klass input
+  Node* allocated_klass = AllocateNode::Ideal_klass(obj_or_subklass, phase);
+  if (allocated_klass != NULL) {
+    assert(phase->type(obj_or_subklass)->isa_oopptr(), "only for oop input");
+    set_req(ObjOrSubKlass, allocated_klass);
+    return this;
+  }
+
   // Verify that optimizing the subtype check to a simple code pattern
   // when possible would not constant fold better
 #ifdef ASSERT
   ciKlass* superk = super_t->is_klassptr()->klass();
   ciKlass* subk   = sub_t->isa_klassptr() ? sub_t->is_klassptr()->klass() : sub_t->is_oopptr()->klass();
@@ -156,12 +167,23 @@
       subklass = phase->transform(LoadKlassNode::make(*phase, NULL, phase->C->immutable_memory(), adr, TypeInstPtr::KLASS));
     } else {
       subklass = obj_or_subklass;
     }
     Node* res = new CmpPNode(subklass, superklass);
-    const Type* t = phase->type(phase->transform(res));
-    assert((Value(phase) == t) || (t != TypeInt::CC_GT && t != TypeInt::CC_EQ), "missing Value() optimization");
+    Node* cmp = phase->transform(res);
+    const Type* t = phase->type(cmp);
+    if (!((Value(phase) == t) || (t != TypeInt::CC_GT && t != TypeInt::CC_EQ))) {
+      Value(phase)->dump(); tty->cr();
+      t->dump(); tty->cr();
+      obj_or_subklass->dump();
+      subklass->dump();
+      superklass->dump();
+      cmp->dump();
+      tty->print_cr("==============================");
+      phase->C->root()->dump(9999);
+      fatal("missing Value() optimization");
+    }
     if (phase->is_IterGVN()) {
       phase->is_IterGVN()->_worklist.push(res);
     }
     return NULL;
   }
@@ -192,12 +214,24 @@
     Node *p2 = phase->transform(new AddPNode(subklass,subklass,chk_off_X));
     Node *kmem = phase->C->immutable_memory();
     Node *nkls = phase->transform(LoadKlassNode::make(*phase, NULL, kmem, p2, phase->type(p2)->is_ptr(), TypeKlassPtr::OBJECT_OR_NULL));
 
     Node* res = new CmpPNode(superklass, nkls);
-    const Type* t = phase->type(phase->transform(res));
-    assert((Value(phase) == t) || (t != TypeInt::CC_GT && t != TypeInt::CC_EQ), "missing Value() optimization");
+    Node* cmp = phase->transform(res);
+    const Type* t = phase->type(cmp);
+    if (!((Value(phase) == t) || (t != TypeInt::CC_GT && t != TypeInt::CC_EQ))) {
+      Value(phase)->dump(); tty->cr();
+      t->dump(); tty->cr();
+      obj_or_subklass->dump();
+      subklass->dump();
+      superklass->dump();
+      nkls->dump();
+      cmp->dump();
+      tty->print_cr("==============================");
+      phase->C->root()->dump(9999);
+      fatal("missing Value() optimization");
+    }
     if (phase->is_IterGVN()) {
       phase->is_IterGVN()->_worklist.push(res);
     }
     return NULL;
   }
