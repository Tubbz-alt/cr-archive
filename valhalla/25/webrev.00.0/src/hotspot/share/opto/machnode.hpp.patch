diff a/src/hotspot/share/opto/machnode.hpp b/src/hotspot/share/opto/machnode.hpp
--- a/src/hotspot/share/opto/machnode.hpp
+++ b/src/hotspot/share/opto/machnode.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -285,15 +285,16 @@
   // Helper function that computes size by emitting code
   virtual uint  emit_size(PhaseRegAlloc *ra_) const;
 
   // Return the alignment required (in units of relocInfo::addr_unit())
   // for this instruction (must be a power of 2)
-  virtual int   alignment_required() const { return 1; }
+  int           pd_alignment_required() const;
+  virtual int   alignment_required() const { return pd_alignment_required(); }
 
   // Return the padding (in bytes) to be emitted before this
   // instruction to properly align it.
-  virtual int   compute_padding(int current_offset) const { return 0; }
+  virtual int   compute_padding(int current_offset) const;
 
   // Return number of relocatable values contained in this instruction
   virtual int   reloc() const { return 0; }
 
   // Return number of words used for double constants in this instruction
@@ -557,13 +558,10 @@
   bool _do_polling;
 
 public:
   bool do_polling() const { return _do_polling; }
 
-  // Offset of safepoint from the beginning of the node
-  int safepoint_offset() const;
-
 #ifndef PRODUCT
   virtual const char *Name() const { return "Epilog"; }
   virtual void format( PhaseRegAlloc *, outputStream *st ) const;
 #endif
 };
