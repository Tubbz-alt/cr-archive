diff a/src/hotspot/share/c1/c1_Instruction.hpp b/src/hotspot/share/c1/c1_Instruction.hpp
--- a/src/hotspot/share/c1/c1_Instruction.hpp
+++ b/src/hotspot/share/c1/c1_Instruction.hpp
@@ -2133,10 +2133,14 @@
     assert(x->type()->tag() == y->type()->tag(), "types must match");
     BlockList* s = new BlockList(2);
     s->append(tsux);
     s->append(fsux);
     set_sux(s);
+    if (!_substitutability_check) {
+      assert(x->as_NewInlineTypeInstance() == NULL || y->type() == objectNull, "Sanity check");
+      assert(y->as_NewInlineTypeInstance() == NULL || x->type() == objectNull, "Sanity check");
+    }
   }
 
   // accessors
   Value x() const                                { return _x; }
   Condition cond() const                         { return _cond; }
diff a/src/hotspot/share/c1/c1_LIR.cpp b/src/hotspot/share/c1/c1_LIR.cpp
--- a/src/hotspot/share/c1/c1_LIR.cpp
+++ b/src/hotspot/share/c1/c1_LIR.cpp
@@ -2134,12 +2134,20 @@
   right()->print(out);                   out->print(" ");
   equal_result()->print(out);            out->print(" ");
   not_equal_result()->print(out);        out->print(" ");
   tmp1()->print(out);                    out->print(" ");
   tmp2()->print(out);                    out->print(" ");
-  left_klass()->print(out);              out->print(" ");
-  right_klass()->print(out);             out->print(" ");
+  if (left_klass() != NULL) {
+    left_klass()->print(out);              out->print(" ");
+  } else {
+    out->print("unknown ");
+  }
+  if (right_klass() != NULL) {
+    right_klass()->print(out);             out->print(" ");
+  } else {
+    out->print("unknown ");
+  }
   left_klass_op()->print(out);           out->print(" ");
   right_klass_op()->print(out);          out->print(" ");
   if (stub() != NULL) {
     out->print("[label:" INTPTR_FORMAT "]", p2i(stub()->entry()));
   }
diff a/src/hotspot/share/c1/c1_Optimizer.cpp b/src/hotspot/share/c1/c1_Optimizer.cpp
--- a/src/hotspot/share/c1/c1_Optimizer.cpp
+++ b/src/hotspot/share/c1/c1_Optimizer.cpp
@@ -414,11 +414,11 @@
           if (!con || !ifop) {
             ifop = if_->y()->as_IfOp();
             con  = if_->x()->as_Constant();
             swapped = true;
           }
-          if (con && ifop) {
+          if (con && ifop && !ifop->substitutability_check()) {
             Constant* tval = ifop->tval()->as_Constant();
             Constant* fval = ifop->fval()->as_Constant();
             if (tval && fval) {
               // Find the instruction before if_, starting with ifop.
               // When if_ and ifop are not in the same block, prev
@@ -439,11 +439,11 @@
 
                 BlockBegin* tblock = tval->compare(cond, con, tsux, fsux);
                 BlockBegin* fblock = fval->compare(cond, con, tsux, fsux);
                 if (tblock != fblock && !if_->is_safepoint()) {
                   If* newif = new If(ifop->x(), ifop->cond(), false, ifop->y(),
-                                     tblock, fblock, if_->state_before(), if_->is_safepoint(), if_->substitutability_check());
+                                     tblock, fblock, if_->state_before(), if_->is_safepoint(), ifop->substitutability_check());
                   newif->set_state(if_->state()->copy());
 
                   assert(prev->next() == if_, "must be guaranteed by above search");
                   NOT_PRODUCT(newif->set_printable_bci(if_->printable_bci()));
                   prev->set_next(newif);
diff a/src/hotspot/share/ci/ciInstanceKlass.cpp b/src/hotspot/share/ci/ciInstanceKlass.cpp
--- a/src/hotspot/share/ci/ciInstanceKlass.cpp
+++ b/src/hotspot/share/ci/ciInstanceKlass.cpp
@@ -331,15 +331,15 @@
               bool_to_str(is_initialized()),
               bool_to_str(has_finalizer()),
               bool_to_str(has_subklass()),
               layout_helper());
 
-    _flags.print_klass_flags();
+    _flags.print_klass_flags(st);
 
     if (_super) {
       st->print(" super=");
-      _super->print_name();
+      _super->print_name_on(st);
     }
     if (_java_mirror) {
       st->print(" mirror=PRESENT");
     }
   } else {
