diff a/src/hotspot/share/memory/universe.hpp b/src/hotspot/share/memory/universe.hpp
--- a/src/hotspot/share/memory/universe.hpp
+++ b/src/hotspot/share/memory/universe.hpp
@@ -134,10 +134,11 @@
 
   static Array<int>*            _the_empty_int_array;            // Canonicalized int array
   static Array<u2>*             _the_empty_short_array;          // Canonicalized short array
   static Array<Klass*>*         _the_empty_klass_array;          // Canonicalized klass array
   static Array<InstanceKlass*>* _the_empty_instance_klass_array; // Canonicalized instance klass array
+  static Array<InstanceKlass*>* _the_single_IdentityObject_klass_array;
   static Array<Method*>*        _the_empty_method_array;         // Canonicalized method array
 
   static Array<Klass*>*  _the_array_interfaces_array;
 
   // array of preallocated error objects with backtrace
@@ -310,10 +311,16 @@
   static Array<int>*             the_empty_int_array()    { return _the_empty_int_array; }
   static Array<u2>*              the_empty_short_array()  { return _the_empty_short_array; }
   static Array<Method*>*         the_empty_method_array() { return _the_empty_method_array; }
   static Array<Klass*>*          the_empty_klass_array()  { return _the_empty_klass_array; }
   static Array<InstanceKlass*>*  the_empty_instance_klass_array() { return _the_empty_instance_klass_array; }
+  static Array<InstanceKlass*>*  the_single_IdentityObject_klass_array() {
+    assert(_the_single_IdentityObject_klass_array != NULL, "Must be initialized before use");
+    assert(_the_single_IdentityObject_klass_array->length() == 1, "Sanity check");
+    return _the_single_IdentityObject_klass_array;
+  }
+  static void initialize_the_single_IdentityObject_klass_array(InstanceKlass* ik, TRAPS);
 
   // OutOfMemoryError support. Returns an error with the required message. The returned error
   // may or may not have a backtrace. If error has a backtrace then the stack trace is already
   // filled in.
   static oop out_of_memory_error_java_heap()          { return gen_out_of_memory_error(_out_of_memory_error_java_heap);  }
