diff a/src/hotspot/share/prims/jvmtiClassFileReconstituter.cpp b/src/hotspot/share/prims/jvmtiClassFileReconstituter.cpp
--- a/src/hotspot/share/prims/jvmtiClassFileReconstituter.cpp
+++ b/src/hotspot/share/prims/jvmtiClassFileReconstituter.cpp
@@ -867,15 +867,17 @@
 
   // JVMSpec|           u2 interfaces_count;
   // JVMSpec|           u2 interfaces[interfaces_count];
   Array<InstanceKlass*>* interfaces =  ik()->local_interfaces();
   int num_interfaces = interfaces->length();
-  write_u2(num_interfaces);
+  write_u2(num_interfaces - (ik()->has_injected_identityObject() ? 1 : 0) );
   for (int index = 0; index < num_interfaces; index++) {
     HandleMark hm(thread());
     InstanceKlass* iik = interfaces->at(index);
-    write_u2(class_symbol_to_cpool_index(iik->name()));
+    if (!ik()->has_injected_identityObject() || iik != SystemDictionary::IdentityObject_klass()) {
+      write_u2(class_symbol_to_cpool_index(iik->name()));
+    }
   }
 
   // JVMSpec|           u2 fields_count;
   // JVMSpec|           field_info fields[fields_count];
   write_field_infos();
diff a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCIRuntime.java b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCIRuntime.java
--- a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCIRuntime.java
+++ b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCIRuntime.java
@@ -81,10 +81,11 @@
     private HotSpotResolvedObjectTypeImpl javaLangClass;
     private HotSpotResolvedObjectTypeImpl throwableType;
     private HotSpotResolvedObjectTypeImpl serializableType;
     private HotSpotResolvedObjectTypeImpl cloneableType;
     private HotSpotResolvedObjectTypeImpl enumType;
+    private HotSpotResolvedObjectTypeImpl identityObjectType;
 
     HotSpotResolvedObjectTypeImpl getJavaLangObject() {
         if (javaLangObject == null) {
             javaLangObject = (HotSpotResolvedObjectTypeImpl) fromClass(Object.class);
         }
@@ -117,10 +118,17 @@
             serializableType = (HotSpotResolvedObjectTypeImpl) fromClass(Serializable.class);
         }
         return serializableType;
     }
 
+    HotSpotResolvedObjectTypeImpl getJavaLangIdentityObject() {
+        if (identityObjectType == null) {
+            identityObjectType = (HotSpotResolvedObjectTypeImpl) fromClass(IdentityObject.class);
+        }
+        return identityObjectType;
+    }
+
     HotSpotResolvedObjectTypeImpl getJavaLangThrowable() {
         if (throwableType == null) {
             throwableType = (HotSpotResolvedObjectTypeImpl) fromClass(Throwable.class);
         }
         return throwableType;
diff a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedObjectTypeImpl.java b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedObjectTypeImpl.java
--- a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedObjectTypeImpl.java
+++ b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedObjectTypeImpl.java
@@ -275,13 +275,14 @@
 
     @Override
     public HotSpotResolvedObjectTypeImpl[] getInterfaces() {
         if (interfaces == null) {
             if (isArray()) {
-                HotSpotResolvedObjectTypeImpl[] types = new HotSpotResolvedObjectTypeImpl[2];
+                HotSpotResolvedObjectTypeImpl[] types = new HotSpotResolvedObjectTypeImpl[3];
                 types[0] = runtime().getJavaLangCloneable();
                 types[1] = runtime().getJavaLangSerializable();
+                types[2] = runtime().getJavaLangIdentityObject();
                 this.interfaces = types;
             } else {
                 interfaces = runtime().compilerToVm.getInterfaces(this);
             }
         }
diff a/test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.runtime.test/src/jdk/vm/ci/runtime/test/TestResolvedJavaType.java b/test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.runtime.test/src/jdk/vm/ci/runtime/test/TestResolvedJavaType.java
--- a/test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.runtime.test/src/jdk/vm/ci/runtime/test/TestResolvedJavaType.java
+++ b/test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.runtime.test/src/jdk/vm/ci/runtime/test/TestResolvedJavaType.java
@@ -257,11 +257,13 @@
     public void getInterfacesTest() {
         for (Class<?> c : classes) {
             ResolvedJavaType type = metaAccess.lookupJavaType(c);
             Class<?>[] expected = c.getInterfaces();
             ResolvedJavaType[] actual = type.getInterfaces();
-            assertEquals(expected.length, actual.length);
+            // With injection of the IdentityObject interface by the JVM, the number of
+            // interfaces visible through reflection and through JVMCI could differ by one
+            assertTrue(expected.length == actual.length || (actual.length - expected.length) == 1);
             for (int i = 0; i < expected.length; i++) {
                 assertTrue(actual[i].equals(metaAccess.lookupJavaType(expected[i])));
             }
         }
     }
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/InlineClassWithBadSupers.jcod b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/InlineClassWithBadSupers.jcod
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/InlineClassWithBadSupers.jcod
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/InlineClassWithBadSupers.jcod
@@ -64,11 +64,11 @@
     Utf8 "toString"; // #20     at 0xB4
     Utf8 "(QSuperNotAbstract;)Ljava/lang/String;"; // #21     at 0xBF
     class #23; // #22     at 0xE8
     Utf8 "NotAbstract"; // #23     at 0xEB
     class #25; // #24     at 0xF9
-    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "Unused"; // #25     at 0xFC
     Utf8 "getX"; // #26     at 0x0115
     Utf8 "()I"; // #27     at 0x011C
     Utf8 "Code"; // #28     at 0x0122
     Utf8 "LineNumberTable"; // #29     at 0x0129
     Utf8 "getY"; // #30     at 0x013B
@@ -96,12 +96,11 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [1] { // Interfaces
-    #24;
+  [0] { // Interfaces
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0302
       0x0010; // access
@@ -325,11 +324,11 @@
     Utf8 "toString"; // #20     at 0xB4
     Utf8 "(QSuperHasNonStaticFields;)Ljava/lang/String;"; // #21     at 0xBF
     class #23; // #22     at 0xE8
     Utf8 "HasNonStaticFields"; // #23     at 0xEB
     class #25; // #24     at 0xF9
-    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "Unused"; // #25     at 0xFC
     Utf8 "getX"; // #26     at 0x0115
     Utf8 "()I"; // #27     at 0x011C
     Utf8 "Code"; // #28     at 0x0122
     Utf8 "LineNumberTable"; // #29     at 0x0129
     Utf8 "getY"; // #30     at 0x013B
@@ -357,12 +356,11 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [1] { // Interfaces
-    #24;
+  [0] { // Interfaces
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0302
       0x0010; // access
@@ -586,11 +584,11 @@
     Utf8 "toString"; // #20     at 0xB4
     Utf8 "(QSuperHasSynchMethod;)Ljava/lang/String;"; // #21     at 0xBF
     class #23; // #22     at 0xE8
     Utf8 "ValidSuper"; // #23     at 0xEB
     class #25; // #24     at 0xF9
-    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "Unused"; // #25     at 0xFC
     Utf8 "getX"; // #26     at 0x0115
     Utf8 "()I"; // #27     at 0x011C
     Utf8 "Code"; // #28     at 0x0122
     Utf8 "LineNumberTable"; // #29     at 0x0129
     Utf8 "getY"; // #30     at 0x013B
@@ -618,12 +616,11 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [1] { // Interfaces
-    #24;
+  [0] { // Interfaces
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0302
       0x0010; // access
@@ -846,11 +843,11 @@
     Utf8 "toString"; // #20     at 0xB4
     Utf8 "(QSuperCtorHasArgs;)Ljava/lang/String;"; // #21     at 0xBF
     class #23; // #22     at 0xE8
     Utf8 "CtorHasArgs"; // #23     at 0xEB
     class #25; // #24     at 0xF9
-    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "Unused"; // #25     at 0xFC
     Utf8 "getX"; // #26     at 0x0115
     Utf8 "()I"; // #27     at 0x011C
     Utf8 "Code"; // #28     at 0x0122
     Utf8 "LineNumberTable"; // #29     at 0x0129
     Utf8 "getY"; // #30     at 0x013B
@@ -878,12 +875,11 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [1] { // Interfaces
-    #24;
+  [0] { // Interfaces
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0302
       0x0010; // access
@@ -1108,11 +1104,11 @@
     Utf8 "toString"; // #20     at 0xB4
     Utf8 "(QSuperCtorIsNotEmpty;)Ljava/lang/String;"; // #21     at 0xBF
     class #23; // #22     at 0xE8
     Utf8 "CtorIsNotEmpty"; // #23     at 0xEB
     class #25; // #24     at 0xF9
-    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "Unused"; // #25     at 0xFC
     Utf8 "getX"; // #26     at 0x0115
     Utf8 "()I"; // #27     at 0x011C
     Utf8 "Code"; // #28     at 0x0122
     Utf8 "LineNumberTable"; // #29     at 0x0129
     Utf8 "getY"; // #30     at 0x013B
@@ -1140,12 +1136,11 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [1] { // Interfaces
-    #24;
+  [0] { // Interfaces
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0302
       0x0010; // access
@@ -1371,11 +1366,11 @@
     class #23; // #22     at 0x0108
     Utf8 "java/lang/Object"; // #23     at 0x010B
     class #25; // #24     at 0x011E
     Utf8 "java/lang/IdentityObject"; // #25     at 0x0121
     class #27; // #26     at 0x0126
-    Utf8 "java/lang/InlineObject"; // #27     at 0x0129
+    Utf8 "Unused"; // #27     at 0x0129
     Utf8 "getX"; // #28     at 0x0142
     Utf8 "()I"; // #29     at 0x0149
     Utf8 "Code"; // #30     at 0x014F
     Utf8 "LineNumberTable"; // #31     at 0x0156
     Utf8 "getY"; // #32     at 0x0168
@@ -1403,13 +1398,12 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [2] { // Interfaces
+  [1] { // Interfaces
     #24;
-    #26;
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0341
       0x0010; // access
@@ -1634,11 +1628,11 @@
     Utf8 "toString"; // #20     at 0xB4
     Utf8 "(QSuperImplementsIdentityObject;)Ljava/lang/String;"; // #21     at 0xBF
     class #23; // #22     at 0xE8
     Utf8 "ImplementsIdentityObject"; // #23     at 0xEB
     class #25; // #24     at 0xF9
-    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "Unused"; // #25     at 0xFC
     Utf8 "getX"; // #26     at 0x0115
     Utf8 "()I"; // #27     at 0x011C
     Utf8 "Code"; // #28     at 0x0122
     Utf8 "LineNumberTable"; // #29     at 0x0129
     Utf8 "getY"; // #30     at 0x013B
@@ -1666,12 +1660,11 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [1] { // Interfaces
-    #24;
+  [0] { // Interfaces
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0302
       0x0010; // access
@@ -1895,11 +1888,11 @@
     Utf8 "toString"; // #20     at 0xB4
     Utf8 "(QSuperIntfImplementsIdentityObject;)Ljava/lang/String;"; // #21     at 0xBF
     class #23; // #22     at 0xE8
     Utf8 "IntfImplementsIdentityObject"; // #23     at 0xEB
     class #25; // #24     at 0xF9
-    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "Unused"; // #25     at 0xFC
     Utf8 "getX"; // #26     at 0x0115
     Utf8 "()I"; // #27     at 0x011C
     Utf8 "Code"; // #28     at 0x0122
     Utf8 "LineNumberTable"; // #29     at 0x0129
     Utf8 "getY"; // #30     at 0x013B
@@ -1927,12 +1920,11 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [1] { // Interfaces
-    #24;
+  [0] { // Interfaces
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0302
       0x0010; // access
diff a/test/jdk/java/lang/Class/ArrayMethods.java b/test/jdk/java/lang/Class/ArrayMethods.java
--- a/test/jdk/java/lang/Class/ArrayMethods.java
+++ b/test/jdk/java/lang/Class/ArrayMethods.java
@@ -88,21 +88,24 @@
 
     public void testGetInterfaces() {
         Class<?>[] is = new Integer[0].getClass().getInterfaces();
         boolean thisFailed = false;
 
-        if (is.length != 2)
+        if (is.length != 3)
             thisFailed = true;
 
         if (!is[0].getCanonicalName().equals("java.lang.Cloneable"))
             thisFailed = true;
 
         if (!is[1].getCanonicalName().equals("java.io.Serializable"))
             thisFailed = true;
 
+        if (!is[2].getCanonicalName().equals("java.lang.IdentityObject"))
+            thisFailed = true;
+
         if (thisFailed) {
             failed++;
             System.out.println(Arrays.asList(is));
-            System.out.println("Should contain exactly Cloneable, Serializable in that order.");
+            System.out.println("Should contain exactly Cloneable, Serializable and IdentityObject in that order.");
         }
     }
 }
