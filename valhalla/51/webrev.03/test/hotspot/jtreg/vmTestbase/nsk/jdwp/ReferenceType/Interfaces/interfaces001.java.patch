diff a/test/hotspot/jtreg/vmTestbase/nsk/jdwp/ReferenceType/Interfaces/interfaces001.java b/test/hotspot/jtreg/vmTestbase/nsk/jdwp/ReferenceType/Interfaces/interfaces001.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/jdwp/ReferenceType/Interfaces/interfaces001.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jdwp/ReferenceType/Interfaces/interfaces001.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -48,10 +48,11 @@
                     { DEBUGEE_CLASS_NAME + "$" + "TestedClassInterface1", "" },
                     { DEBUGEE_CLASS_NAME + "$" + "TestedClassInterface2", "" }
                 };
     static final int DECLARED_INTERFACES = class_interfaces.length;
     static final long interfaceIDs[] = new long[DECLARED_INTERFACES];
+    static long identityObjectID;
 
     public static void main (String argv[]) {
         System.exit(run(argv,System.out) + JCK_STATUS_BASE);
     }
 
@@ -96,10 +97,11 @@
                     for (int i = 0; i < DECLARED_INTERFACES; i++) {
                         class_interfaces[i][1] = "L" + class_interfaces[i][0].replace('.', '/') + ";";
                         log.display("Getting ReferenceTypeID for interface signature: " + class_interfaces[i][1]);
                         interfaceIDs[i] = debugee.getReferenceTypeID(class_interfaces[i][1]);
                     }
+                    identityObjectID = debugee.getReferenceTypeID("Ljava/lang/IdentityObject;");
 
                     // begin test of JDWP command
 
                     log.display("Create command " + JDWP_COMMAND_NAME
                                 + " with ReferenceTypeID: " + typeID);
@@ -122,11 +124,12 @@
                     reply.resetPosition();
 
                     int interfaces = reply.getInt();
                     log.display("  interfaces: " + interfaces);
 
-                    if (interfaces != DECLARED_INTERFACES) {
+                    // Adding one to the number of interfaces because of the injection of IdentityObject by the VM
+                    if (interfaces != DECLARED_INTERFACES + 1) {
                         log.complain("Unexpected number of declared interfaces in the reply packet:" + interfaces
                                     + " (expected: " + DECLARED_INTERFACES + ")");
                         success = false;
                     }
 
@@ -135,16 +138,23 @@
                         log.display("  interface #" + i);
 
                         long interfaceID = reply.getReferenceTypeID();
                         log.display("    interfaceID: " + interfaceID);
 
-                        if (interfaceID != interfaceIDs[i]) {
-                            log.complain("Unexpected interface ID for interface #" + i + " in the reply packet: " + interfaceID
-                                        + " (expected: " + interfaceIDs[i] + ")");
-                            success = false;
+                        if (i < DECLARED_INTERFACES) {
+                            if (interfaceID != interfaceIDs[i]) {
+                                log.complain("Unexpected interface ID for interface #" + i + " in the reply packet: " + interfaceID
+                                             + " (expected: " + interfaceIDs[i] + ")");
+                                success = false;
+                            }
+                        } else {
+                            if (interfaceID != identityObjectID) {
+                                log.complain("Unexpected interface ID for interface #" + i + " in the reply packet: " + interfaceID
+                                             + " (expected identityObjectID: " + identityObjectID + ")");
+                                success = false;
+                            }
                         }
-
                     }
 
                     if (! reply.isParsed()) {
                         log.complain("Extra trailing bytes found in reply packet at: " + reply.currentPosition());
                         success = false;
