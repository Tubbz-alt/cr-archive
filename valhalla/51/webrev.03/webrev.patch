diff a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -960,16 +960,15 @@
   assert(stream != NULL, "invariant");
   assert(cp != NULL, "invariant");
   assert(has_nonstatic_concrete_methods != NULL, "invariant");
 
   if (itfs_len == 0) {
-    _local_interfaces = Universe::the_empty_instance_klass_array();
+    _temp_local_interfaces = new GrowableArray<InstanceKlass*>(0);
   } else {
     assert(itfs_len > 0, "only called for len>0");
-    _local_interfaces = MetadataFactory::new_array<InstanceKlass*>(_loader_data, itfs_len, NULL, CHECK);
-
-    int index;
+    _temp_local_interfaces = new GrowableArray<InstanceKlass*>(itfs_len);
+    int index = 0;
     for (index = 0; index < itfs_len; index++) {
       const u2 interface_index = stream->get_u2(CHECK);
       Klass* interf;
       check_property(
         valid_klass_reference_at(interface_index),
@@ -983,11 +982,11 @@
         // Don't need to check legal name because it's checked when parsing constant pool.
         // But need to make sure it's not an array type.
         guarantee_property(unresolved_klass->char_at(0) != JVM_SIGNATURE_ARRAY,
                            "Bad interface name in class file %s", CHECK);
 
-        // Call resolve_super so classcircularity is checked
+        // Call resolve_super so class circularity is checked
         interf = SystemDictionary::resolve_super_or_fail(
                                                   _class_name,
                                                   unresolved_klass,
                                                   Handle(THREAD, _loader_data->class_loader()),
                                                   _protection_domain,
@@ -1020,11 +1019,14 @@
         *has_nonstatic_concrete_methods = true;
       }
       if (ik->is_declared_atomic()) {
         *is_declared_atomic = true;
       }
-      _local_interfaces->at_put(index, ik);
+      if (ik->name() == vmSymbols::java_lang_IdentityObject()) {
+        _implements_identityObject = true;
+      }
+      _temp_local_interfaces->append(ik);
     }
 
     if (!_need_verify || itfs_len <= 1) {
       return;
     }
@@ -1038,11 +1040,11 @@
     bool dup = false;
     const Symbol* name = NULL;
     {
       debug_only(NoSafepointVerifier nsv;)
       for (index = 0; index < itfs_len; index++) {
-        const InstanceKlass* const k = _local_interfaces->at(index);
+        const InstanceKlass* const k = _temp_local_interfaces->at(index);
         name = k->name();
         // If no duplicates, add (name, NULL) in hashtable interface_names.
         if (!put_after_lookup(name, NULL, interface_names)) {
           dup = true;
           break;
@@ -1837,10 +1839,14 @@
     const FieldAllocationType atype = fac->update(false, type, false);
     field->set_allocation_type(atype);
     index++;
   }
 
+  if (instance_fields_count > 0) {
+    _has_nonstatic_fields = true;
+  }
+
   assert(NULL == _fields, "invariant");
 
   _fields =
     MetadataFactory::new_array<u2>(_loader_data,
                                    index * FieldInfo::field_slots + num_generic_signature,
@@ -5025,13 +5031,14 @@
     // no interfaces, use canonicalized array
     return Universe::the_empty_instance_klass_array();
   } else if (max_transitive_size == super_size) {
     // no new local interfaces added, share superklass' transitive interface array
     return super->transitive_interfaces();
-  } else if (max_transitive_size == local_size) {
-    // only local interfaces added, share local interface array
-    return local_ifs;
+    // The three lines below are commented to work around bug JDK-8245487
+//  } else if (max_transitive_size == local_size) {
+//    // only local interfaces added, share local interface array
+//    return local_ifs;
   } else {
     ResourceMark rm;
     GrowableArray<InstanceKlass*>* const result = new GrowableArray<InstanceKlass*>(max_transitive_size);
 
     // Copy down from superclass
@@ -6079,24 +6086,23 @@
 // does not implement interface java.lang.IdentityObject (checked elsewhere), has
 // an empty body-less no-arg constructor, and no synchronized instance methods.
 // This function doesn't check if the class's super types are invalid.  Those checks
 // are done elsewhere.  The final determination of whether or not a class is an
 // invalid super type for an inline class is done in fill_instance_klass().
-static bool is_invalid_super_for_inline_type(const InstanceKlass* ik) {
-  if (ik->name() == vmSymbols::java_lang_IdentityObject()) {
+bool ClassFileParser::is_invalid_super_for_inline_type() {
+  if (class_name() == vmSymbols::java_lang_IdentityObject()) {
     return true;
   }
-  if (ik->is_interface() || ik->name() == vmSymbols::java_lang_Object()) {
+  if (is_interface() || class_name() == vmSymbols::java_lang_Object()) {
     return false;
   }
-  if (!ik->is_abstract() || ik->has_nonstatic_fields()) {
+  if (!access_flags().is_abstract() || _has_nonstatic_fields) {
     return true;
   } else {
-    Array<Method*>* methods = ik->methods();
-    // Look at each method.
-    for (int x = 0; x < methods->length(); x++) {
-      const Method* const method = methods->at(x);
+    // Look at each method
+    for (int x = 0; x < _methods->length(); x++) {
+      const Method* const method = _methods->at(x);
       if (method->is_synchronized() && !method->is_static()) {
         return true;
 
       } else if (method->name() == vmSymbols::object_initializer_name()) {
         if (method->signature() != vmSymbols::void_method_signature() ||
@@ -6142,10 +6148,19 @@
     ik->set_is_naturally_atomic();
   }
   if (_is_empty_value) {
     ik->set_is_empty_value();
   }
+
+  if (this->_invalid_inline_super) {
+    ik->set_invalid_inline_super();
+  }
+
+  if (_has_injected_identityObject) {
+    ik->set_has_injected_identityObject();
+  }
+
   assert(_fac != NULL, "invariant");
   ik->set_static_oop_field_count(_fac->count[STATIC_OOP] + _fac->count[STATIC_FLATTENABLE]);
 
   // this transfers ownership of a lot of arrays from
   // the parser onto the InstanceKlass*
@@ -6369,19 +6384,10 @@
         }
       }
     }
   }
 
-  // Set ik->invalid_inline_super field to TRUE if already marked as invalid,
-  // if super is marked invalid, or if is_invalid_super_for_inline_type()
-  // returns true
-  if (invalid_inline_super() ||
-      (_super_klass != NULL && _super_klass->invalid_inline_super()) ||
-      is_invalid_super_for_inline_type(ik)) {
-    ik->set_invalid_inline_super();
-  }
-
   JFR_ONLY(INIT_ID(ik);)
 
   // If we reach here, all is well.
   // Now remove the InstanceKlass* from the _klass_to_deallocate field
   // in order for it to not be destroyed in the ClassFileParser destructor.
@@ -6491,10 +6497,11 @@
   _methods(NULL),
   _inner_classes(NULL),
   _nest_members(NULL),
   _nest_host(0),
   _record_components(NULL),
+  _temp_local_interfaces(NULL),
   _local_interfaces(NULL),
   _transitive_interfaces(NULL),
   _combined_annotations(NULL),
   _class_annotations(NULL),
   _class_type_annotations(NULL),
@@ -6531,15 +6538,18 @@
   _has_nonstatic_concrete_methods(false),
   _declares_nonstatic_concrete_methods(false),
   _has_final_method(false),
   _has_contended_fields(false),
   _has_flattenable_fields(false),
+  _has_nonstatic_fields(false),
   _is_empty_value(false),
   _is_naturally_atomic(false),
   _is_declared_atomic(false),
   _invalid_inline_super(false),
   _invalid_identity_super(false),
+  _implements_identityObject(false),
+  _has_injected_identityObject(false),
   _has_finalizer(false),
   _has_empty_finalizer(false),
   _has_vanilla_constructor(false),
   _max_bootstrap_specifier_index(-1) {
 
@@ -6879,11 +6889,11 @@
                    is_value_type(),
                    &_has_nonstatic_concrete_methods,
                    &_is_declared_atomic,
                    CHECK);
 
-  assert(_local_interfaces != NULL, "invariant");
+  assert(_temp_local_interfaces != NULL, "invariant");
 
   // Fields (offsets are filled in later)
   _fac = new FieldAllocationCount();
   parse_fields(stream,
                is_interface(),
@@ -6940,13 +6950,13 @@
   assert(stream->at_eos(), "invariant");
   assert(cp != NULL, "invariant");
   assert(_loader_data != NULL, "invariant");
 
   if (_class_name == vmSymbols::java_lang_Object()) {
-    check_property(_local_interfaces == Universe::the_empty_instance_klass_array(),
-                   "java.lang.Object cannot implement an interface in class file %s",
-                   CHECK);
+    check_property(_temp_local_interfaces->length() == 0,
+        "java.lang.Object cannot implement an interface in class file %s",
+        CHECK);
   }
   // We check super class after class file is parsed and format is checked
   if (_super_class_index > 0 && NULL ==_super_klass) {
     Symbol* const super_class_name = cp->klass_name_at(_super_class_index);
     if (is_interface()) {
@@ -7018,10 +7028,36 @@
     if (StringUtils::class_list_match(ForceNonTearable, class_name_str)) {
       _is_declared_atomic = true;
     }
   }
 
+  // Set ik->invalid_inline_super field to TRUE if already marked as invalid,
+  // if super is marked invalid, or if is_invalid_super_for_inline_type()
+  // returns true
+  if (invalid_inline_super() ||
+      (_super_klass != NULL && _super_klass->invalid_inline_super()) ||
+      is_invalid_super_for_inline_type()) {
+    set_invalid_inline_super();
+  }
+
+  if (!is_value_type() && invalid_inline_super() && (_super_klass == NULL || !_super_klass->invalid_inline_super())
+      && !_implements_identityObject && class_name() != vmSymbols::java_lang_IdentityObject()) {
+    _temp_local_interfaces->append(SystemDictionary::IdentityObject_klass());
+    _has_injected_identityObject = true;
+  }
+  int itfs_len = _temp_local_interfaces->length();
+  if (itfs_len == 0) {
+    _local_interfaces = Universe::the_empty_instance_klass_array();
+  } else {
+    _local_interfaces = MetadataFactory::new_array<InstanceKlass*>(_loader_data, itfs_len, NULL, CHECK);
+    for (int i = 0; i < itfs_len; i++) {
+      _local_interfaces->at_put(i, _temp_local_interfaces->at(i));
+    }
+  }
+  _temp_local_interfaces = NULL;
+  assert(_local_interfaces != NULL, "invariant");
+
   // Compute the transitive list of all unique interfaces implemented by this class
   _transitive_interfaces =
     compute_transitive_interfaces(_super_klass,
                                   _local_interfaces,
                                   _loader_data,
diff a/src/hotspot/share/classfile/classFileParser.hpp b/src/hotspot/share/classfile/classFileParser.hpp
--- a/src/hotspot/share/classfile/classFileParser.hpp
+++ b/src/hotspot/share/classfile/classFileParser.hpp
@@ -129,10 +129,11 @@
   Array<Method*>* _methods;
   Array<u2>* _inner_classes;
   Array<u2>* _nest_members;
   u2 _nest_host;
   Array<RecordComponent*>* _record_components;
+  GrowableArray<InstanceKlass*>* _temp_local_interfaces;
   Array<InstanceKlass*>* _local_interfaces;
   Array<InstanceKlass*>* _transitive_interfaces;
   Annotations* _combined_annotations;
   AnnotationArray* _class_annotations;
   AnnotationArray* _class_type_annotations;
@@ -197,15 +198,18 @@
   bool _declares_nonstatic_concrete_methods;
   bool _has_final_method;
   bool _has_contended_fields;
 
   bool _has_flattenable_fields;
+  bool _has_nonstatic_fields;
   bool _is_empty_value;
   bool _is_naturally_atomic;
   bool _is_declared_atomic;
   bool _invalid_inline_super;   // if true, invalid super type for an inline type.
   bool _invalid_identity_super; // if true, invalid super type for an identity type.
+  bool _implements_identityObject;
+  bool _has_injected_identityObject;
 
   // precomputed flags
   bool _has_finalizer;
   bool _has_empty_finalizer;
   bool _has_vanilla_constructor;
@@ -592,10 +596,11 @@
   bool has_flattenable_fields() const { return _has_flattenable_fields; }
   bool invalid_inline_super() const { return _invalid_inline_super; }
   void set_invalid_inline_super() { _invalid_inline_super = true; }
   bool invalid_identity_super() const { return _invalid_identity_super; }
   void set_invalid_identity_super() { _invalid_identity_super = true; }
+  bool is_invalid_super_for_inline_type();
 
   u2 java_fields_count() const { return _java_fields_count; }
 
   const InstanceKlass* unsafe_anonymous_host() const { return _unsafe_anonymous_host; }
   const GrowableArray<Handle>* cp_patches() const { return _cp_patches; }
diff a/src/hotspot/share/classfile/verificationType.cpp b/src/hotspot/share/classfile/verificationType.cpp
--- a/src/hotspot/share/classfile/verificationType.cpp
+++ b/src/hotspot/share/classfile/verificationType.cpp
@@ -58,15 +58,17 @@
   if (this_class->access_flags().is_value_type()) return false;
   if (this_class->is_interface() && (!from_field_is_protected ||
       from_name != vmSymbols::java_lang_Object())) {
     // If we are not trying to access a protected field or method in
     // java.lang.Object then, for arrays, we only allow assignability
-    // to interfaces java.lang.Cloneable and java.io.Serializable.
+    // to interfaces java.lang.Cloneable, java.io.Serializable,
+    // and java.lang.IdentityObject.
     // Otherwise, we treat interfaces as java.lang.Object.
     return !from_is_array ||
       this_class == SystemDictionary::Cloneable_klass() ||
-      this_class == SystemDictionary::Serializable_klass();
+      this_class == SystemDictionary::Serializable_klass() ||
+      this_class == SystemDictionary::IdentityObject_klass();
   } else if (from_is_object) {
     Klass* from_class = SystemDictionary::resolve_or_fail(
         from_name, Handle(THREAD, klass->class_loader()),
         Handle(THREAD, klass->protection_domain()), true, CHECK_false);
     if (log_is_enabled(Debug, class, resolve)) {
diff a/src/hotspot/share/memory/universe.cpp b/src/hotspot/share/memory/universe.cpp
--- a/src/hotspot/share/memory/universe.cpp
+++ b/src/hotspot/share/memory/universe.cpp
@@ -313,11 +313,11 @@
           _typeArrayKlassObjs[i] = TypeArrayKlass::create_klass((BasicType)i, CHECK);
         }
 
         ClassLoaderData* null_cld = ClassLoaderData::the_null_class_loader_data();
 
-        _the_array_interfaces_array     = MetadataFactory::new_array<Klass*>(null_cld, 2, NULL, CHECK);
+        _the_array_interfaces_array     = MetadataFactory::new_array<Klass*>(null_cld, 3, NULL, CHECK);
         _the_empty_int_array            = MetadataFactory::new_array<int>(null_cld, 0, CHECK);
         _the_empty_short_array          = MetadataFactory::new_array<u2>(null_cld, 0, CHECK);
         _the_empty_method_array         = MetadataFactory::new_array<Method*>(null_cld, 0, CHECK);
         _the_empty_klass_array          = MetadataFactory::new_array<Klass*>(null_cld, 0, CHECK);
         _the_empty_instance_klass_array = MetadataFactory::new_array<InstanceKlass*>(null_cld, 0, CHECK);
@@ -338,16 +338,20 @@
       // Verify shared interfaces array.
       assert(_the_array_interfaces_array->at(0) ==
              SystemDictionary::Cloneable_klass(), "u3");
       assert(_the_array_interfaces_array->at(1) ==
              SystemDictionary::Serializable_klass(), "u3");
+      assert(_the_array_interfaces_array->at(2) ==
+                   SystemDictionary::IdentityObject_klass(), "u3");
+
     } else
 #endif
     {
       // Set up shared interfaces array.  (Do this before supers are set up.)
       _the_array_interfaces_array->at_put(0, SystemDictionary::Cloneable_klass());
       _the_array_interfaces_array->at_put(1, SystemDictionary::Serializable_klass());
+      _the_array_interfaces_array->at_put(2, SystemDictionary::IdentityObject_klass());
     }
 
     initialize_basic_type_klass(boolArrayKlassObj(), CHECK);
     initialize_basic_type_klass(charArrayKlassObj(), CHECK);
     initialize_basic_type_klass(floatArrayKlassObj(), CHECK);
diff a/src/hotspot/share/oops/instanceKlass.hpp b/src/hotspot/share/oops/instanceKlass.hpp
--- a/src/hotspot/share/oops/instanceKlass.hpp
+++ b/src/hotspot/share/oops/instanceKlass.hpp
@@ -294,11 +294,12 @@
     _misc_has_value_fields                    = 1 << 19, // has value fields and related embedded section is not empty
     _misc_is_empty_value                      = 1 << 20, // empty value type
     _misc_is_naturally_atomic                 = 1 << 21, // loaded/stored in one instruction
     _misc_is_declared_atomic                  = 1 << 22, // implements jl.NonTearable
     _misc_invalid_inline_super                = 1 << 23, // invalid super type for an inline type
-    _misc_invalid_identity_super              = 1 << 24  // invalid super type for an identity type
+    _misc_invalid_identity_super              = 1 << 24, // invalid super type for an identity type
+    _misc_has_injected_identityObject         = 1 << 25  // IdentityObject has been injected by the JVM
   };
   u2 shared_loader_type_bits() const {
     return _misc_is_shared_boot_class|_misc_is_shared_platform_class|_misc_is_shared_app_class;
   }
   u4              _misc_flags;
@@ -479,10 +480,18 @@
   // Initialized in the class file parser, not changed later.
   void set_invalid_identity_super() {
     _misc_flags |= _misc_invalid_identity_super;
   }
 
+  bool has_injected_identityObject() const {
+    return (_misc_flags & _misc_has_injected_identityObject);
+  }
+
+  void set_has_injected_identityObject() {
+    _misc_flags |= _misc_has_injected_identityObject;
+  }
+
   // field sizes
   int nonstatic_field_size() const         { return _nonstatic_field_size; }
   void set_nonstatic_field_size(int size)  { _nonstatic_field_size = size; }
 
   int static_field_size() const            { return _static_field_size; }
diff a/src/hotspot/share/oops/objArrayKlass.cpp b/src/hotspot/share/oops/objArrayKlass.cpp
--- a/src/hotspot/share/oops/objArrayKlass.cpp
+++ b/src/hotspot/share/oops/objArrayKlass.cpp
@@ -381,13 +381,14 @@
   if (num_secondaries == 2) {
     // Must share this for correct bootstrapping!
     set_secondary_supers(Universe::the_array_interfaces_array());
     return NULL;
   } else {
-    GrowableArray<Klass*>* secondaries = new GrowableArray<Klass*>(num_elem_supers+2);
+    GrowableArray<Klass*>* secondaries = new GrowableArray<Klass*>(num_elem_supers+3);
     secondaries->push(SystemDictionary::Cloneable_klass());
     secondaries->push(SystemDictionary::Serializable_klass());
+    secondaries->push(SystemDictionary::IdentityObject_klass());
     for (int i = 0; i < num_elem_supers; i++) {
       Klass* elem_super = elem_supers->at(i);
       Klass* array_super = elem_super->array_klass_or_null();
       assert(array_super != NULL, "must already have been created");
       secondaries->push(array_super);
diff a/src/hotspot/share/oops/valueArrayKlass.cpp b/src/hotspot/share/oops/valueArrayKlass.cpp
--- a/src/hotspot/share/oops/valueArrayKlass.cpp
+++ b/src/hotspot/share/oops/valueArrayKlass.cpp
@@ -397,13 +397,14 @@
   if (num_secondaries == 2) {
     // Must share this for correct bootstrapping!
     set_secondary_supers(Universe::the_array_interfaces_array());
     return NULL;
   } else {
-    GrowableArray<Klass*>* secondaries = new GrowableArray<Klass*>(num_elem_supers+2);
+    GrowableArray<Klass*>* secondaries = new GrowableArray<Klass*>(num_elem_supers+3);
     secondaries->push(SystemDictionary::Cloneable_klass());
     secondaries->push(SystemDictionary::Serializable_klass());
+    secondaries->push(SystemDictionary::IdentityObject_klass());
     for (int i = 0; i < num_elem_supers; i++) {
       Klass* elem_super = (Klass*) elem_supers->at(i);
       Klass* array_super = elem_super->array_klass_or_null();
       assert(array_super != NULL, "must already have been created");
       secondaries->push(array_super);
diff a/src/hotspot/share/prims/jvm.cpp b/src/hotspot/share/prims/jvm.cpp
--- a/src/hotspot/share/prims/jvm.cpp
+++ b/src/hotspot/share/prims/jvm.cpp
@@ -1118,30 +1118,39 @@
 
   Klass* klass = java_lang_Class::as_Klass(mirror);
   // Figure size of result array
   int size;
   if (klass->is_instance_klass()) {
-    size = InstanceKlass::cast(klass)->local_interfaces()->length();
+    InstanceKlass* ik = InstanceKlass::cast(klass);
+    size = ik->local_interfaces()->length();
+    if (ik->has_injected_identityObject()) {
+      size--;
+    }
   } else {
     assert(klass->is_objArray_klass() || klass->is_typeArray_klass(), "Illegal mirror klass");
-    size = 2;
+    size = 3;
   }
 
   // Allocate result array
   objArrayOop r = oopFactory::new_objArray(SystemDictionary::Class_klass(), size, CHECK_NULL);
   objArrayHandle result (THREAD, r);
   // Fill in result
   if (klass->is_instance_klass()) {
     // Regular instance klass, fill in all local interfaces
+    int cursor = 0;
     for (int index = 0; index < size; index++) {
-      Klass* k = InstanceKlass::cast(klass)->local_interfaces()->at(index);
-      result->obj_at_put(index, k->java_mirror());
+      InstanceKlass* ik = InstanceKlass::cast(klass);
+      Klass* k = ik->local_interfaces()->at(index);
+      if (!ik->has_injected_identityObject() || k != SystemDictionary::IdentityObject_klass()) {
+        result->obj_at_put(cursor++, k->java_mirror());
+      }
     }
   } else {
-    // All arrays implement java.lang.Cloneable and java.io.Serializable
+    // All arrays implement java.lang.Cloneable, java.io.Serializable and java.lang.IdentityObject
     result->obj_at_put(0, SystemDictionary::Cloneable_klass()->java_mirror());
     result->obj_at_put(1, SystemDictionary::Serializable_klass()->java_mirror());
+    result->obj_at_put(2, SystemDictionary::IdentityObject_klass()->java_mirror());
   }
   return (jobjectArray) JNIHandles::make_local(env, result());
 JVM_END
 
 
diff a/src/hotspot/share/prims/jvmtiClassFileReconstituter.cpp b/src/hotspot/share/prims/jvmtiClassFileReconstituter.cpp
--- a/src/hotspot/share/prims/jvmtiClassFileReconstituter.cpp
+++ b/src/hotspot/share/prims/jvmtiClassFileReconstituter.cpp
@@ -867,15 +867,17 @@
 
   // JVMSpec|           u2 interfaces_count;
   // JVMSpec|           u2 interfaces[interfaces_count];
   Array<InstanceKlass*>* interfaces =  ik()->local_interfaces();
   int num_interfaces = interfaces->length();
-  write_u2(num_interfaces);
+  write_u2(num_interfaces - (ik()->has_injected_identityObject() ? 1 : 0) );
   for (int index = 0; index < num_interfaces; index++) {
     HandleMark hm(thread());
     InstanceKlass* iik = interfaces->at(index);
-    write_u2(class_symbol_to_cpool_index(iik->name()));
+    if (!ik()->has_injected_identityObject() || iik != SystemDictionary::IdentityObject_klass()) {
+      write_u2(class_symbol_to_cpool_index(iik->name()));
+    }
   }
 
   // JVMSpec|           u2 fields_count;
   // JVMSpec|           field_info fields[fields_count];
   write_field_infos();
diff a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCIRuntime.java b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCIRuntime.java
--- a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCIRuntime.java
+++ b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCIRuntime.java
@@ -81,10 +81,11 @@
     private HotSpotResolvedObjectTypeImpl javaLangClass;
     private HotSpotResolvedObjectTypeImpl throwableType;
     private HotSpotResolvedObjectTypeImpl serializableType;
     private HotSpotResolvedObjectTypeImpl cloneableType;
     private HotSpotResolvedObjectTypeImpl enumType;
+    private HotSpotResolvedObjectTypeImpl identityObjectType;
 
     HotSpotResolvedObjectTypeImpl getJavaLangObject() {
         if (javaLangObject == null) {
             javaLangObject = (HotSpotResolvedObjectTypeImpl) fromClass(Object.class);
         }
@@ -117,10 +118,17 @@
             serializableType = (HotSpotResolvedObjectTypeImpl) fromClass(Serializable.class);
         }
         return serializableType;
     }
 
+    HotSpotResolvedObjectTypeImpl getJavaLangIdentityObject() {
+        if (identityObjectType == null) {
+            identityObjectType = (HotSpotResolvedObjectTypeImpl) fromClass(IdentityObject.class);
+        }
+        return identityObjectType;
+    }
+
     HotSpotResolvedObjectTypeImpl getJavaLangThrowable() {
         if (throwableType == null) {
             throwableType = (HotSpotResolvedObjectTypeImpl) fromClass(Throwable.class);
         }
         return throwableType;
diff a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedObjectTypeImpl.java b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedObjectTypeImpl.java
--- a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedObjectTypeImpl.java
+++ b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedObjectTypeImpl.java
@@ -275,13 +275,14 @@
 
     @Override
     public HotSpotResolvedObjectTypeImpl[] getInterfaces() {
         if (interfaces == null) {
             if (isArray()) {
-                HotSpotResolvedObjectTypeImpl[] types = new HotSpotResolvedObjectTypeImpl[2];
+                HotSpotResolvedObjectTypeImpl[] types = new HotSpotResolvedObjectTypeImpl[3];
                 types[0] = runtime().getJavaLangCloneable();
                 types[1] = runtime().getJavaLangSerializable();
+                types[2] = runtime().getJavaLangIdentityObject();
                 this.interfaces = types;
             } else {
                 interfaces = runtime().compilerToVm.getInterfaces(this);
             }
         }
diff a/test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.runtime.test/src/jdk/vm/ci/runtime/test/TestResolvedJavaType.java b/test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.runtime.test/src/jdk/vm/ci/runtime/test/TestResolvedJavaType.java
--- a/test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.runtime.test/src/jdk/vm/ci/runtime/test/TestResolvedJavaType.java
+++ b/test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.runtime.test/src/jdk/vm/ci/runtime/test/TestResolvedJavaType.java
@@ -257,11 +257,13 @@
     public void getInterfacesTest() {
         for (Class<?> c : classes) {
             ResolvedJavaType type = metaAccess.lookupJavaType(c);
             Class<?>[] expected = c.getInterfaces();
             ResolvedJavaType[] actual = type.getInterfaces();
-            assertEquals(expected.length, actual.length);
+            // With injection of the IdentityObject interface by the JVM, the number of
+            // interfaces visible through reflection and through JVMCI could differ by one
+            assertTrue(expected.length == actual.length || (actual.length - expected.length) == 1);
             for (int i = 0; i < expected.length; i++) {
                 assertTrue(actual[i].equals(metaAccess.lookupJavaType(expected[i])));
             }
         }
     }
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeImplementingIdentityObject.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeImplementingIdentityObject.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeImplementingIdentityObject.java
@@ -0,0 +1,3 @@
+public abstract class AbstractTypeImplementingIdentityObject implements IdentityObject {
+
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeWithNonstaticFields.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeWithNonstaticFields.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeWithNonstaticFields.java
@@ -0,0 +1,3 @@
+public abstract class AbstractTypeWithNonstaticFields {
+    int i;
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeWithStaticFields.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeWithStaticFields.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeWithStaticFields.java
@@ -0,0 +1,3 @@
+public abstract class AbstractTypeWithStaticFields {
+    static int i;
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeWithSynchronizedNonstaticMethod.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeWithSynchronizedNonstaticMethod.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeWithSynchronizedNonstaticMethod.java
@@ -0,0 +1,5 @@
+public abstract class AbstractTypeWithSynchronizedNonstaticMethod {
+    synchronized int getInt() {
+        return 42;
+    }
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeWithSynchronizedStaticMethod.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeWithSynchronizedStaticMethod.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/AbstractTypeWithSynchronizedStaticMethod.java
@@ -0,0 +1,5 @@
+public abstract class AbstractTypeWithSynchronizedStaticMethod {
+    static synchronized int getInt() {
+        return 42;
+    }
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/IdentityType.jcod b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/IdentityType.jcod
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/IdentityType.jcod
@@ -0,0 +1,62 @@
+class IdentityType {
+  0xCAFEBABE;
+  0; // minor version
+  59; // version
+  [] { // Constant Pool
+    ; // first element is empty
+    Method #2 #3; // #1
+    class #4; // #2
+    NameAndType #5 #6; // #3
+    Utf8 "java/lang/Object"; // #4
+    Utf8 "<init>"; // #5
+    Utf8 "()V"; // #6
+    class #8; // #7
+    Utf8 "IdentityType"; // #8
+    Utf8 "Code"; // #9
+    Utf8 "LineNumberTable"; // #10
+    Utf8 "SourceFile"; // #11
+    Utf8 "IdentityType.java"; // #12
+  } // Constant Pool
+
+  0x0021; // access
+  #7;// this_cpx
+  #2;// super_cpx
+
+  [] { // Interfaces
+  } // Interfaces
+
+  [] { // Fields
+  } // Fields
+
+  [] { // Methods
+    {  // method
+      0x0001; // access
+      #5; // name_index
+      #6; // descriptor_index
+      [] { // Attributes
+        Attr(#9) { // Code
+          1; // max_stack
+          1; // max_locals
+          Bytes[]{
+            0x2AB70001B1;
+          }
+          [] { // Traps
+          } // end Traps
+          [] { // Attributes
+            Attr(#10) { // LineNumberTable
+              [] { // line_number_table
+                0  1;
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    }
+  } // Methods
+
+  [] { // Attributes
+    Attr(#11) { // SourceFile
+      #12;
+    } // end SourceFile
+  } // Attributes
+} // end class IdentityType
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/IdentityTypeImplementingIdentityObject.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/IdentityTypeImplementingIdentityObject.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/IdentityTypeImplementingIdentityObject.java
@@ -0,0 +1,3 @@
+public class IdentityTypeImplementingIdentityObject implements IdentityObject{
+
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/InlineType.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/InlineType.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/InlineType.java
@@ -0,0 +1,3 @@
+public inline class InlineType {
+    int i = 0;
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/Interface.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/Interface.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/Interface.java
@@ -0,0 +1,3 @@
+public interface Interface {
+
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/InterfaceExtendingIdentityObject.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/InterfaceExtendingIdentityObject.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/InterfaceExtendingIdentityObject.java
@@ -0,0 +1,3 @@
+public interface InterfaceExtendingIdentityObject extends IdentityObject {
+
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/TestIdentityObject.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/TestIdentityObject.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/identityObject/TestIdentityObject.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ *
+ */
+/*
+ * @test
+ * @summary test that IdentityObject interface is injected correctly
+ * @compile IdentityType.jcod
+ * @compile Interface.java InterfaceExtendingIdentityObject.java
+ * @compile AbstractTypeImplementingIdentityObject.java
+ * @compile AbstractTypeWithNonstaticFields.java AbstractTypeWithStaticFields.java
+ * @compile AbstractTypeWithSynchronizedNonstaticMethod.java AbstractTypeWithSynchronizedStaticMethod.java
+ * @compile InlineType.java IdentityTypeImplementingIdentityObject.java
+ * @compile TestIdentityObject.java
+ * @run main/othervm -verify TestIdentityObject
+ */
+
+public class TestIdentityObject {
+    static void checkIdentityObject(Class c, boolean subtype, boolean visible) {
+        boolean s;
+        try {
+            c.asSubclass(IdentityObject.class);
+            s = true;
+        } catch(ClassCastException e) {
+            s = false;
+        }
+        if (subtype != s) {
+            if (subtype) {
+                throw new RuntimeException("Type " + c.getName() + " is missing IdentityObject");
+            } else {
+                throw new RuntimeException("Type " + c.getName() + " should not implements IdentityObject");
+            }
+        }
+        boolean found = false;
+        Class[] interfaces = c.getInterfaces();
+        for(Class i : interfaces) {
+            if (i == IdentityObject.class) found = true;
+        }
+        if (found != visible) {
+            if (visible) {
+                throw new RuntimeException("Type " + c.getName() + "  should have IdentityObject visible, but it hasn't");
+            } else {
+                throw new RuntimeException("Type " + c.getName() + "  should not have IdentityObject visible, but it has");
+            }
+        }
+    }
+
+    public static void main(String[] args) {
+        checkIdentityObject(InlineType.class, false, false);
+        checkIdentityObject(IdentityType.class, true, false);
+        checkIdentityObject(IdentityTypeImplementingIdentityObject.class, true, true);
+        checkIdentityObject(Interface.class, false, false);
+        checkIdentityObject(InterfaceExtendingIdentityObject.class, true, true);
+        checkIdentityObject(AbstractTypeImplementingIdentityObject.class, true, true);
+        checkIdentityObject(AbstractTypeWithNonstaticFields.class, true, false);
+        checkIdentityObject(AbstractTypeWithStaticFields.class, false, false);
+        checkIdentityObject(AbstractTypeWithSynchronizedNonstaticMethod.class, true, false);
+        checkIdentityObject(AbstractTypeWithSynchronizedStaticMethod.class, false, false);
+    }
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/InlineClassWithBadSupers.jcod b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/InlineClassWithBadSupers.jcod
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/InlineClassWithBadSupers.jcod
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/InlineClassWithBadSupers.jcod
@@ -64,11 +64,11 @@
     Utf8 "toString"; // #20     at 0xB4
     Utf8 "(QSuperNotAbstract;)Ljava/lang/String;"; // #21     at 0xBF
     class #23; // #22     at 0xE8
     Utf8 "NotAbstract"; // #23     at 0xEB
     class #25; // #24     at 0xF9
-    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "Unused"; // #25     at 0xFC
     Utf8 "getX"; // #26     at 0x0115
     Utf8 "()I"; // #27     at 0x011C
     Utf8 "Code"; // #28     at 0x0122
     Utf8 "LineNumberTable"; // #29     at 0x0129
     Utf8 "getY"; // #30     at 0x013B
@@ -96,12 +96,11 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [1] { // Interfaces
-    #24;
+  [0] { // Interfaces
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0302
       0x0010; // access
@@ -325,11 +324,11 @@
     Utf8 "toString"; // #20     at 0xB4
     Utf8 "(QSuperHasNonStaticFields;)Ljava/lang/String;"; // #21     at 0xBF
     class #23; // #22     at 0xE8
     Utf8 "HasNonStaticFields"; // #23     at 0xEB
     class #25; // #24     at 0xF9
-    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "Unused"; // #25     at 0xFC
     Utf8 "getX"; // #26     at 0x0115
     Utf8 "()I"; // #27     at 0x011C
     Utf8 "Code"; // #28     at 0x0122
     Utf8 "LineNumberTable"; // #29     at 0x0129
     Utf8 "getY"; // #30     at 0x013B
@@ -357,12 +356,11 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [1] { // Interfaces
-    #24;
+  [0] { // Interfaces
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0302
       0x0010; // access
@@ -586,11 +584,11 @@
     Utf8 "toString"; // #20     at 0xB4
     Utf8 "(QSuperHasSynchMethod;)Ljava/lang/String;"; // #21     at 0xBF
     class #23; // #22     at 0xE8
     Utf8 "ValidSuper"; // #23     at 0xEB
     class #25; // #24     at 0xF9
-    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "Unused"; // #25     at 0xFC
     Utf8 "getX"; // #26     at 0x0115
     Utf8 "()I"; // #27     at 0x011C
     Utf8 "Code"; // #28     at 0x0122
     Utf8 "LineNumberTable"; // #29     at 0x0129
     Utf8 "getY"; // #30     at 0x013B
@@ -618,12 +616,11 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [1] { // Interfaces
-    #24;
+  [0] { // Interfaces
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0302
       0x0010; // access
@@ -846,11 +843,11 @@
     Utf8 "toString"; // #20     at 0xB4
     Utf8 "(QSuperCtorHasArgs;)Ljava/lang/String;"; // #21     at 0xBF
     class #23; // #22     at 0xE8
     Utf8 "CtorHasArgs"; // #23     at 0xEB
     class #25; // #24     at 0xF9
-    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "Unused"; // #25     at 0xFC
     Utf8 "getX"; // #26     at 0x0115
     Utf8 "()I"; // #27     at 0x011C
     Utf8 "Code"; // #28     at 0x0122
     Utf8 "LineNumberTable"; // #29     at 0x0129
     Utf8 "getY"; // #30     at 0x013B
@@ -878,12 +875,11 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [1] { // Interfaces
-    #24;
+  [0] { // Interfaces
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0302
       0x0010; // access
@@ -1108,11 +1104,11 @@
     Utf8 "toString"; // #20     at 0xB4
     Utf8 "(QSuperCtorIsNotEmpty;)Ljava/lang/String;"; // #21     at 0xBF
     class #23; // #22     at 0xE8
     Utf8 "CtorIsNotEmpty"; // #23     at 0xEB
     class #25; // #24     at 0xF9
-    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "Unused"; // #25     at 0xFC
     Utf8 "getX"; // #26     at 0x0115
     Utf8 "()I"; // #27     at 0x011C
     Utf8 "Code"; // #28     at 0x0122
     Utf8 "LineNumberTable"; // #29     at 0x0129
     Utf8 "getY"; // #30     at 0x013B
@@ -1140,12 +1136,11 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [1] { // Interfaces
-    #24;
+  [0] { // Interfaces
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0302
       0x0010; // access
@@ -1371,11 +1366,11 @@
     class #23; // #22     at 0x0108
     Utf8 "java/lang/Object"; // #23     at 0x010B
     class #25; // #24     at 0x011E
     Utf8 "java/lang/IdentityObject"; // #25     at 0x0121
     class #27; // #26     at 0x0126
-    Utf8 "java/lang/InlineObject"; // #27     at 0x0129
+    Utf8 "Unused"; // #27     at 0x0129
     Utf8 "getX"; // #28     at 0x0142
     Utf8 "()I"; // #29     at 0x0149
     Utf8 "Code"; // #30     at 0x014F
     Utf8 "LineNumberTable"; // #31     at 0x0156
     Utf8 "getY"; // #32     at 0x0168
@@ -1403,13 +1398,12 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [2] { // Interfaces
+  [1] { // Interfaces
     #24;
-    #26;
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0341
       0x0010; // access
@@ -1634,11 +1628,11 @@
     Utf8 "toString"; // #20     at 0xB4
     Utf8 "(QSuperImplementsIdentityObject;)Ljava/lang/String;"; // #21     at 0xBF
     class #23; // #22     at 0xE8
     Utf8 "ImplementsIdentityObject"; // #23     at 0xEB
     class #25; // #24     at 0xF9
-    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "Unused"; // #25     at 0xFC
     Utf8 "getX"; // #26     at 0x0115
     Utf8 "()I"; // #27     at 0x011C
     Utf8 "Code"; // #28     at 0x0122
     Utf8 "LineNumberTable"; // #29     at 0x0129
     Utf8 "getY"; // #30     at 0x013B
@@ -1666,12 +1660,11 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [1] { // Interfaces
-    #24;
+  [0] { // Interfaces
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0302
       0x0010; // access
@@ -1895,11 +1888,11 @@
     Utf8 "toString"; // #20     at 0xB4
     Utf8 "(QSuperIntfImplementsIdentityObject;)Ljava/lang/String;"; // #21     at 0xBF
     class #23; // #22     at 0xE8
     Utf8 "IntfImplementsIdentityObject"; // #23     at 0xEB
     class #25; // #24     at 0xF9
-    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "Unused"; // #25     at 0xFC
     Utf8 "getX"; // #26     at 0x0115
     Utf8 "()I"; // #27     at 0x011C
     Utf8 "Code"; // #28     at 0x0122
     Utf8 "LineNumberTable"; // #29     at 0x0129
     Utf8 "getY"; // #30     at 0x013B
@@ -1927,12 +1920,11 @@
 
   0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
   #1;// this_cpx
   #22;// super_cpx
 
-  [1] { // Interfaces
-    #24;
+  [0] { // Interfaces
   } // Interfaces
 
   [2] { // fields
     { // Member at 0x0302
       0x0010; // access
diff a/test/hotspot/jtreg/serviceability/dcmd/vm/ClassHierarchyTest.java b/test/hotspot/jtreg/serviceability/dcmd/vm/ClassHierarchyTest.java
--- a/test/hotspot/jtreg/serviceability/dcmd/vm/ClassHierarchyTest.java
+++ b/test/hotspot/jtreg/serviceability/dcmd/vm/ClassHierarchyTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -77,14 +77,16 @@
 
     static Pattern expected_lines[] = {
         Pattern.compile("java.lang.Object/null"),
         Pattern.compile("\\|--DcmdBaseClass/0x(\\p{XDigit}*)"),
         Pattern.compile("\\|  implements Intf2/0x(\\p{XDigit}*) \\(declared intf\\)"),
+        Pattern.compile("\\|  implements java.lang.IdentityObject/null \\(declared intf\\)"),
         Pattern.compile("\\|  implements Intf1/0x(\\p{XDigit}*) \\(inherited intf\\)"),
         Pattern.compile("\\|  \\|--DcmdTestClass/0x(\\p{XDigit}*)"),
         Pattern.compile("\\|  \\|  implements Intf1/0x(\\p{XDigit}*) \\(inherited intf\\)"),
-        Pattern.compile("\\|  \\|  implements Intf2/0x(\\p{XDigit}*) \\(inherited intf\\)")
+        Pattern.compile("\\|  \\|  implements Intf2/0x(\\p{XDigit}*) \\(inherited intf\\)"),
+        Pattern.compile("\\|  \\|  implements java.lang.IdentityObject/null \\(inherited intf\\)")
     };
 
     public void run(CommandExecutor executor) throws ClassNotFoundException {
         OutputAnalyzer output;
         Iterator<String> lines;
@@ -138,11 +140,11 @@
             i++;
             if (!m.matches()) {
                 Assert.fail("Failed to match line #" + i + ": " + line);
             }
             // "implements" lines should not be in this output.
-            if (i == 2 || i == 4) i += 2;
+            if (i == 2 || i == 6) i += 3;
         }
         if (lines.hasNext()) {
             String line = lines.next();
             Assert.fail("Unexpected dcmd output: " + line);
         }
@@ -162,11 +164,11 @@
             if (i == 2) {
                 // Fetch the ClassLoader address, which should be the same in
                 // subsequent lines.
                 classLoaderAddr = m.group(1);
                 System.out.println(classLoaderAddr);
-            } else if (i > 2) {
+            } else if (i > 2 && i != 4 && i != 9) {
                 if (!classLoaderAddr.equals(m.group(1))) {
                     Assert.fail("Classloader address didn't match on line #"
                                         + i + ": " + line);
                 }
             }
diff a/test/hotspot/jtreg/vmTestbase/nsk/jdwp/ReferenceType/Interfaces/interfaces001.java b/test/hotspot/jtreg/vmTestbase/nsk/jdwp/ReferenceType/Interfaces/interfaces001.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/jdwp/ReferenceType/Interfaces/interfaces001.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jdwp/ReferenceType/Interfaces/interfaces001.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -48,10 +48,11 @@
                     { DEBUGEE_CLASS_NAME + "$" + "TestedClassInterface1", "" },
                     { DEBUGEE_CLASS_NAME + "$" + "TestedClassInterface2", "" }
                 };
     static final int DECLARED_INTERFACES = class_interfaces.length;
     static final long interfaceIDs[] = new long[DECLARED_INTERFACES];
+    static long identityObjectID;
 
     public static void main (String argv[]) {
         System.exit(run(argv,System.out) + JCK_STATUS_BASE);
     }
 
@@ -96,10 +97,11 @@
                     for (int i = 0; i < DECLARED_INTERFACES; i++) {
                         class_interfaces[i][1] = "L" + class_interfaces[i][0].replace('.', '/') + ";";
                         log.display("Getting ReferenceTypeID for interface signature: " + class_interfaces[i][1]);
                         interfaceIDs[i] = debugee.getReferenceTypeID(class_interfaces[i][1]);
                     }
+                    identityObjectID = debugee.getReferenceTypeID("Ljava/lang/IdentityObject;");
 
                     // begin test of JDWP command
 
                     log.display("Create command " + JDWP_COMMAND_NAME
                                 + " with ReferenceTypeID: " + typeID);
@@ -122,11 +124,12 @@
                     reply.resetPosition();
 
                     int interfaces = reply.getInt();
                     log.display("  interfaces: " + interfaces);
 
-                    if (interfaces != DECLARED_INTERFACES) {
+                    // Adding one to the number of interfaces because of the injection of IdentityObject by the VM
+                    if (interfaces != DECLARED_INTERFACES + 1) {
                         log.complain("Unexpected number of declared interfaces in the reply packet:" + interfaces
                                     + " (expected: " + DECLARED_INTERFACES + ")");
                         success = false;
                     }
 
@@ -135,16 +138,23 @@
                         log.display("  interface #" + i);
 
                         long interfaceID = reply.getReferenceTypeID();
                         log.display("    interfaceID: " + interfaceID);
 
-                        if (interfaceID != interfaceIDs[i]) {
-                            log.complain("Unexpected interface ID for interface #" + i + " in the reply packet: " + interfaceID
-                                        + " (expected: " + interfaceIDs[i] + ")");
-                            success = false;
+                        if (i < DECLARED_INTERFACES) {
+                            if (interfaceID != interfaceIDs[i]) {
+                                log.complain("Unexpected interface ID for interface #" + i + " in the reply packet: " + interfaceID
+                                             + " (expected: " + interfaceIDs[i] + ")");
+                                success = false;
+                            }
+                        } else {
+                            if (interfaceID != identityObjectID) {
+                                log.complain("Unexpected interface ID for interface #" + i + " in the reply packet: " + interfaceID
+                                             + " (expected identityObjectID: " + identityObjectID + ")");
+                                success = false;
+                            }
                         }
-
                     }
 
                     if (! reply.isParsed()) {
                         log.complain("Extra trailing bytes found in reply packet at: " + reply.currentPosition());
                         success = false;
diff a/test/jdk/java/lang/Class/ArrayMethods.java b/test/jdk/java/lang/Class/ArrayMethods.java
--- a/test/jdk/java/lang/Class/ArrayMethods.java
+++ b/test/jdk/java/lang/Class/ArrayMethods.java
@@ -88,21 +88,24 @@
 
     public void testGetInterfaces() {
         Class<?>[] is = new Integer[0].getClass().getInterfaces();
         boolean thisFailed = false;
 
-        if (is.length != 2)
+        if (is.length != 3)
             thisFailed = true;
 
         if (!is[0].getCanonicalName().equals("java.lang.Cloneable"))
             thisFailed = true;
 
         if (!is[1].getCanonicalName().equals("java.io.Serializable"))
             thisFailed = true;
 
+        if (!is[2].getCanonicalName().equals("java.lang.IdentityObject"))
+            thisFailed = true;
+
         if (thisFailed) {
             failed++;
             System.out.println(Arrays.asList(is));
-            System.out.println("Should contain exactly Cloneable, Serializable in that order.");
+            System.out.println("Should contain exactly Cloneable, Serializable and IdentityObject in that order.");
         }
     }
 }
diff a/test/langtools/tools/javac/valhalla/lworld-values/InstanceOfTopTypeTest.java b/test/langtools/tools/javac/valhalla/lworld-values/InstanceOfTopTypeTest.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/InstanceOfTopTypeTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/InstanceOfTopTypeTest.java
@@ -58,9 +58,9 @@
             points++; // 5
         if (oa[0] instanceof IdentityObject)
             throw new AssertionError("Broken");
         if (oa[0] instanceof InlineObject)
             points++;
-        if (points != 4) // Change to != 6 after JDK-8237958 is fixed
+        if (points != 6)
             throw new AssertionError("Broken top type set up" + points);
     }
 }
