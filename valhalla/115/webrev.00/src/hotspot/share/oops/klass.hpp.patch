diff a/src/hotspot/share/oops/klass.hpp b/src/hotspot/share/oops/klass.hpp
--- a/src/hotspot/share/oops/klass.hpp
+++ b/src/hotspot/share/oops/klass.hpp
@@ -43,11 +43,11 @@
   InstanceKlassID,
   InstanceRefKlassID,
   InstanceMirrorKlassID,
   InstanceClassLoaderKlassID,
   TypeArrayKlassID,
-  ValueArrayKlassID,
+  FlatArrayKlassID,
   ObjArrayKlassID
 };
 
 const uint KLASS_ID_COUNT = 7;
 
@@ -394,15 +394,15 @@
     return (juint) _lh_array_tag_type_value == (juint)(lh >> _lh_array_tag_shift);
   }
   static bool layout_helper_is_objArray(jint lh) {
     return (juint)_lh_array_tag_obj_value == (juint)(lh >> _lh_array_tag_shift);
   }
-  static bool layout_helper_is_valueArray(jint lh) {
+  static bool layout_helper_is_flatArray(jint lh) {
     return (juint)_lh_array_tag_vt_value == (juint)(lh >> _lh_array_tag_shift);
   }
   static bool layout_helper_is_null_free(jint lh) {
-    assert(layout_helper_is_valueArray(lh) || layout_helper_is_objArray(lh), "must be array of inline types");
+    assert(layout_helper_is_flatArray(lh) || layout_helper_is_objArray(lh), "must be array of inline types");
     return ((lh >> _lh_null_free_shift) & _lh_null_free_mask);
   }
   static jint layout_helper_set_null_free(jint lh) {
     lh |= (_lh_null_free_mask << _lh_null_free_shift);
     assert(layout_helper_is_null_free(lh), "Bad encoding");
@@ -600,11 +600,11 @@
  protected:
   virtual bool is_instance_klass_slow()     const { return false; }
   virtual bool is_array_klass_slow()        const { return false; }
   virtual bool is_objArray_klass_slow()     const { return false; }
   virtual bool is_typeArray_klass_slow()    const { return false; }
-  virtual bool is_valueArray_klass_slow()   const { return false; }
+  virtual bool is_flatArray_klass_slow()    const { return false; }
 #endif // ASSERT
   // current implementation uses this method even in non debug builds
   virtual bool is_inline_klass_slow()       const { return false; }
  public:
 
@@ -630,13 +630,13 @@
                                                     is_objArray_klass_slow()); }
   inline  bool is_typeArray_klass()           const { return assert_same_query(
                                                     layout_helper_is_typeArray(layout_helper()),
                                                     is_typeArray_klass_slow()); }
   inline  bool is_inline_klass()              const { return is_inline_klass_slow(); } //temporary hack
-  inline  bool is_valueArray_klass()          const { return assert_same_query(
-                                                    layout_helper_is_valueArray(layout_helper()),
-                                                    is_valueArray_klass_slow()); }
+  inline  bool is_flatArray_klass()           const { return assert_same_query(
+                                                    layout_helper_is_flatArray(layout_helper()),
+                                                    is_flatArray_klass_slow()); }
 
   #undef assert_same_query
 
   inline bool is_null_free_array_klass()      const { return layout_helper_is_null_free(layout_helper()); }
 
