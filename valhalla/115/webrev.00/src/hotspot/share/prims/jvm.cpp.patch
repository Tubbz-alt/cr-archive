diff a/src/hotspot/share/prims/jvm.cpp b/src/hotspot/share/prims/jvm.cpp
--- a/src/hotspot/share/prims/jvm.cpp
+++ b/src/hotspot/share/prims/jvm.cpp
@@ -49,17 +49,17 @@
 #include "memory/resourceArea.hpp"
 #include "memory/universe.hpp"
 #include "oops/access.inline.hpp"
 #include "oops/constantPool.hpp"
 #include "oops/fieldStreams.inline.hpp"
+#include "oops/flatArrayKlass.hpp"
 #include "oops/instanceKlass.hpp"
 #include "oops/method.hpp"
 #include "oops/recordComponent.hpp"
 #include "oops/objArrayKlass.hpp"
 #include "oops/objArrayOop.inline.hpp"
 #include "oops/oop.inline.hpp"
-#include "oops/valueArrayKlass.hpp"
 #include "prims/jvm_misc.hpp"
 #include "prims/jvmtiExport.hpp"
 #include "prims/jvmtiThreadState.hpp"
 #include "prims/nativeLookup.hpp"
 #include "prims/stackwalk.hpp"
@@ -2542,21 +2542,21 @@
   oop o = JNIHandles::resolve(array);
   Klass* k = o->klass();
   if ((o == NULL) || (!k->is_array_klass())) {
     THROW_0(vmSymbols::java_lang_IllegalArgumentException());
   }
-  if (k->is_valueArray_klass()) {
-    ValueArrayKlass* vk = ValueArrayKlass::cast(k);
+  if (k->is_flatArray_klass()) {
+    FlatArrayKlass* vk = FlatArrayKlass::cast(k);
     if (!vk->element_access_is_atomic()) {
       /**
        * Need to decide how to implement:
        *
        * 1) Change to objArrayOop layout, therefore oop->klass() differs so
        * then "<atomic>[Qfoo;" klass needs to subclass "[Qfoo;" to pass through
        * "checkcast" & "instanceof"
        *
-       * 2) Use extra header in the valueArrayOop to flag atomicity required and
+       * 2) Use extra header in the flatArrayOop to flag atomicity required and
        * possibly per instance lock structure. Said info, could be placed in
        * "trailer" rather than disturb the current arrayOop
        */
       Unimplemented();
     }
