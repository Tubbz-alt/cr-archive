diff a/src/hotspot/share/oops/inlineKlass.cpp b/src/hotspot/share/oops/inlineKlass.cpp
--- a/src/hotspot/share/oops/inlineKlass.cpp
+++ b/src/hotspot/share/oops/inlineKlass.cpp
@@ -31,16 +31,16 @@
 #include "memory/metaspaceClosure.hpp"
 #include "memory/metadataFactory.hpp"
 #include "oops/access.hpp"
 #include "oops/compressedOops.inline.hpp"
 #include "oops/fieldStreams.inline.hpp"
+#include "oops/flatArrayKlass.hpp"
+#include "oops/inlineKlass.inline.hpp"
 #include "oops/instanceKlass.inline.hpp"
 #include "oops/method.hpp"
 #include "oops/oop.inline.hpp"
 #include "oops/objArrayKlass.hpp"
-#include "oops/inlineKlass.inline.hpp"
-#include "oops/valueArrayKlass.hpp"
 #include "runtime/fieldDescriptor.inline.hpp"
 #include "runtime/handles.inline.hpp"
 #include "runtime/safepointVerifiers.hpp"
 #include "runtime/sharedRuntime.hpp"
 #include "runtime/signature.hpp"
@@ -57,11 +57,11 @@
   *((address*)adr_pack_handler()) = NULL;
   *((address*)adr_pack_handler_jobject()) = NULL;
   *((address*)adr_unpack_handler()) = NULL;
   assert(pack_handler() == NULL, "pack handler not null");
   *((int*)adr_default_value_offset()) = 0;
-  *((Klass**)adr_value_array_klass()) = NULL;
+  *((Klass**)adr_flat_array_klass()) = NULL;
   set_prototype_header(markWord::always_locked_prototype());
   assert(is_inline_type_klass(), "invariant");
 }
 
 oop InlineKlass::default_value() {
@@ -176,11 +176,11 @@
 }
 
 // Arrays of...
 
 bool InlineKlass::flatten_array() {
-  if (!ValueArrayFlatten) {
+  if (!UseFlatArray) {
     return false;
   }
   // Too big
   int elem_bytes = raw_value_byte_size();
   if ((InlineArrayElemMaxFlatSize >= 0) && (elem_bytes > InlineArrayElemMaxFlatSize)) {
@@ -208,67 +208,67 @@
   *((Array<VMRegPair>**)adr_return_regs()) = NULL;
   *((address*)adr_pack_handler()) = NULL;
   *((address*)adr_pack_handler_jobject()) = NULL;
   *((address*)adr_unpack_handler()) = NULL;
   assert(pack_handler() == NULL, "pack handler not null");
-  *((Klass**)adr_value_array_klass()) = NULL;
+  *((Klass**)adr_flat_array_klass()) = NULL;
 }
 
 void InlineKlass::restore_unshareable_info(ClassLoaderData* loader_data, Handle protection_domain, PackageEntry* pkg_entry, TRAPS) {
   InstanceKlass::restore_unshareable_info(loader_data, protection_domain, pkg_entry, CHECK);
 }
 
 
 Klass* InlineKlass::array_klass_impl(bool or_null, int n, TRAPS) {
   if (flatten_array()) {
-    return value_array_klass(or_null, n, THREAD);
+    return flat_array_klass(or_null, n, THREAD);
   } else {
     return InstanceKlass::array_klass_impl(or_null, n, THREAD);
   }
 }
 
 Klass* InlineKlass::array_klass_impl(bool or_null, TRAPS) {
   return array_klass_impl(or_null, 1, THREAD);
 }
 
-Klass* InlineKlass::value_array_klass(bool or_null, int rank, TRAPS) {
-  Klass* vak = acquire_value_array_klass();
+Klass* InlineKlass::flat_array_klass(bool or_null, int rank, TRAPS) {
+  Klass* vak = acquire_flat_array_klass();
   if (vak == NULL) {
     if (or_null) return NULL;
     ResourceMark rm;
     {
       // Atomic creation of array_klasses
       MutexLocker ma(THREAD, MultiArray_lock);
-      if (get_value_array_klass() == NULL) {
-        vak = allocate_value_array_klass(CHECK_NULL);
-        Atomic::release_store((Klass**)adr_value_array_klass(), vak);
+      if (get_flat_array_klass() == NULL) {
+        vak = allocate_flat_array_klass(CHECK_NULL);
+        Atomic::release_store((Klass**)adr_flat_array_klass(), vak);
       }
     }
   }
   if (or_null) {
     return vak->array_klass_or_null(rank);
   }
   return vak->array_klass(rank, THREAD);
 }
 
-Klass* InlineKlass::allocate_value_array_klass(TRAPS) {
+Klass* InlineKlass::allocate_flat_array_klass(TRAPS) {
   if (flatten_array()) {
-    return ValueArrayKlass::allocate_klass(this, THREAD);
+    return FlatArrayKlass::allocate_klass(this, THREAD);
   }
   return ObjArrayKlass::allocate_objArray_klass(class_loader_data(), 1, this, THREAD);
 }
 
 void InlineKlass::array_klasses_do(void f(Klass* k, TRAPS), TRAPS) {
   InstanceKlass::array_klasses_do(f, THREAD);
-  if (get_value_array_klass() != NULL)
-    ArrayKlass::cast(get_value_array_klass())->array_klasses_do(f, THREAD);
+  if (get_flat_array_klass() != NULL)
+    ArrayKlass::cast(get_flat_array_klass())->array_klasses_do(f, THREAD);
 }
 
 void InlineKlass::array_klasses_do(void f(Klass* k)) {
   InstanceKlass::array_klasses_do(f);
-  if (get_value_array_klass() != NULL)
-    ArrayKlass::cast(get_value_array_klass())->array_klasses_do(f);
+  if (get_flat_array_klass() != NULL)
+    ArrayKlass::cast(get_flat_array_klass())->array_klasses_do(f);
 }
 
 // Inline type arguments are not passed by reference, instead each
 // field of the inline type is passed as an argument. This helper
 // function collects the inlined field (recursively)
