diff a/src/hotspot/share/prims/jni.cpp b/src/hotspot/share/prims/jni.cpp
--- a/src/hotspot/share/prims/jni.cpp
+++ b/src/hotspot/share/prims/jni.cpp
@@ -47,22 +47,22 @@
 #include "memory/oopFactory.hpp"
 #include "memory/resourceArea.hpp"
 #include "memory/universe.hpp"
 #include "oops/access.inline.hpp"
 #include "oops/arrayOop.inline.hpp"
+#include "oops/flatArrayOop.inline.hpp"
+#include "oops/inlineKlass.inline.hpp"
 #include "oops/instanceKlass.inline.hpp"
 #include "oops/instanceOop.hpp"
 #include "oops/markWord.hpp"
 #include "oops/method.hpp"
 #include "oops/objArrayKlass.hpp"
 #include "oops/objArrayOop.inline.hpp"
 #include "oops/oop.inline.hpp"
 #include "oops/symbol.hpp"
 #include "oops/typeArrayKlass.hpp"
 #include "oops/typeArrayOop.inline.hpp"
-#include "oops/valueArrayOop.inline.hpp"
-#include "oops/inlineKlass.inline.hpp"
 #include "prims/jniCheck.hpp"
 #include "prims/jniExport.hpp"
 #include "prims/jniFastGetField.hpp"
 #include "prims/jvm_misc.hpp"
 #include "prims/jvmtiExport.hpp"
@@ -2517,15 +2517,15 @@
   jobject ret = NULL;
   DT_RETURN_MARK(GetObjectArrayElement, jobject, (const jobject&)ret);
   oop res = NULL;
   arrayOop arr((arrayOop)JNIHandles::resolve_non_null(array));
   if (arr->is_within_bounds(index)) {
-    if (arr->is_valueArray()) {
-      valueArrayOop a = valueArrayOop(JNIHandles::resolve_non_null(array));
+    if (arr->is_flatArray()) {
+      flatArrayOop a = flatArrayOop(JNIHandles::resolve_non_null(array));
       arrayHandle ah(THREAD, a);
-      valueArrayHandle vah(thread, a);
-      res = valueArrayOopDesc::value_alloc_copy_from_index(vah, index, CHECK_NULL);
+      flatArrayHandle vah(thread, a);
+      res = flatArrayOopDesc::value_alloc_copy_from_index(vah, index, CHECK_NULL);
       assert(res != NULL, "Must be set in one of two paths above");
     } else {
       assert(arr->is_objArray(), "If not a valueArray. must be an objArray");
       objArrayOop a = objArrayOop(JNIHandles::resolve_non_null(array));
       res = a->obj_at(index);
@@ -2551,21 +2551,21 @@
    bool oob = false;
    int length = -1;
    oop res = NULL;
    arrayOop arr((arrayOop)JNIHandles::resolve_non_null(array));
    if (arr->is_within_bounds(index)) {
-     if (arr->is_valueArray()) {
-       valueArrayOop a = valueArrayOop(JNIHandles::resolve_non_null(array));
+     if (arr->is_flatArray()) {
+       flatArrayOop a = flatArrayOop(JNIHandles::resolve_non_null(array));
        oop v = JNIHandles::resolve(value);
-       ValueArrayKlass* vaklass = ValueArrayKlass::cast(a->klass());
+       FlatArrayKlass* vaklass = FlatArrayKlass::cast(a->klass());
        InlineKlass* element_vklass = vaklass->element_klass();
        if (v != NULL && v->is_a(element_vklass)) {
          a->value_copy_to_index(v, index);
        } else {
          ResourceMark rm(THREAD);
          stringStream ss;
-         Klass *kl = ValueArrayKlass::cast(a->klass());
+         Klass *kl = FlatArrayKlass::cast(a->klass());
          ss.print("type mismatch: can not store %s to %s[%d]",
              v->klass()->external_name(),
              kl->external_name(),
              index);
          for (int dims = ArrayKlass::cast(a->klass())->dimension(); dims > 1; --dims) {
@@ -3392,19 +3392,19 @@
   }
   arrayOop ar = arrayOop(JNIHandles::resolve_non_null(array));
   if (!ar->is_array()) {
     THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), "Not an array");
   }
-  if (!ar->is_valueArray()) {
+  if (!ar->is_flatArray()) {
     THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), "Not a flattened array");
   }
-  ValueArrayKlass* vak = ValueArrayKlass::cast(ar->klass());
+  FlatArrayKlass* vak = FlatArrayKlass::cast(ar->klass());
   if (vak->contains_oops()) {
     THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), "Flattened array contains oops");
   }
   oop a = lock_gc_or_pin_object(thread, array);
-  valueArrayOop vap = valueArrayOop(a);
+  flatArrayOop vap = flatArrayOop(a);
   void* ret = vap->value_at_addr(0, vak->layout_helper());
   return ret;
 JNI_END
 
 JNI_ENTRY(void, jni_ReleaseFlattenedArrayElements(JNIEnv* env, jarray array, void* elem, jint mode))
@@ -3416,14 +3416,14 @@
   JNIWrapper("jni_GetFlattenedElementSize");
   arrayOop a = arrayOop(JNIHandles::resolve_non_null(array));
   if (!a->is_array()) {
     THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(), "Not an array");
   }
-  if (!a->is_valueArray()) {
+  if (!a->is_flatArray()) {
     THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(), "Not a flattened array");
   }
-  ValueArrayKlass* vak = ValueArrayKlass::cast(a->klass());
+  FlatArrayKlass* vak = FlatArrayKlass::cast(a->klass());
   jsize ret = vak->element_byte_size();
   return ret;
 }
 JNI_END
 
@@ -3431,14 +3431,14 @@
   JNIWrapper("jni_GetArrayElementClass");
   arrayOop a = arrayOop(JNIHandles::resolve_non_null(array));
   if (!a->is_array()) {
     THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), "Not an array");
   }
-  if (!a->is_valueArray()) {
+  if (!a->is_flatArray()) {
     THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), "Not a flattened array");
   }
-  ValueArrayKlass* vak = ValueArrayKlass::cast(a->klass());
+  FlatArrayKlass* vak = FlatArrayKlass::cast(a->klass());
   InlineKlass* vk = vak->element_klass();
   return (jclass) JNIHandles::make_local(vk->java_mirror());
 JNI_END
 
 JNI_ENTRY(jsize, jni_GetFieldOffsetInFlattenedLayout(JNIEnv* env, jclass clazz, const char *name, const char *signature, jboolean* is_inlined))
@@ -3480,11 +3480,11 @@
 
   arrayOop ar = arrayOop(JNIHandles::resolve_non_null(array));
   if (!ar->is_array()) {
     THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), "Not an array");
   }
-  if (!ar->is_valueArray()) {
+  if (!ar->is_flatArray()) {
     THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), "Not a flattened array");
   }
   Klass* ses_k = SystemDictionary::resolve_or_null(vmSymbols::jdk_internal_vm_jni_SubElementSelector(),
         Handle(THREAD, SystemDictionary::java_system_loader()), Handle(), CHECK_NULL);
   InstanceKlass* ses_ik = InstanceKlass::cast(ses_k);
@@ -3547,13 +3547,13 @@
 JNI_END
 
 JNI_ENTRY(jobject, jni_GetObjectSubElement(JNIEnv* env, jarray array, jobject selector, int index))
   JNIWrapper("jni_GetObjectSubElement");
 
-  valueArrayOop ar =  (valueArrayOop)JNIHandles::resolve_non_null(array);
+  flatArrayOop ar =  (flatArrayOop)JNIHandles::resolve_non_null(array);
   oop slct = JNIHandles::resolve_non_null(selector);
-  ValueArrayKlass* vak = ValueArrayKlass::cast(ar->klass());
+  FlatArrayKlass* vak = FlatArrayKlass::cast(ar->klass());
   if (jdk_internal_vm_jni_SubElementSelector::getArrayElementType(slct) != vak->element_klass()->java_mirror()) {
     THROW_MSG_NULL(vmSymbols::java_lang_IllegalArgumentException(), "Array/Selector mismatch");
   }
   oop res = NULL;
   if (!jdk_internal_vm_jni_SubElementSelector::getIsInlined(slct)) {
@@ -3562,24 +3562,24 @@
     res = HeapAccess<ON_UNKNOWN_OOP_REF>::oop_load_at(ar, offset);
   } else {
     InlineKlass* fieldKlass = InlineKlass::cast(java_lang_Class::as_Klass(jdk_internal_vm_jni_SubElementSelector::getSubElementType(slct)));
     res = fieldKlass->allocate_instance_buffer(CHECK_NULL);
     // The array might have been moved by the GC, refreshing the arrayOop
-    ar =  (valueArrayOop)JNIHandles::resolve_non_null(array);
+    ar =  (flatArrayOop)JNIHandles::resolve_non_null(array);
     address addr = (address)ar->value_at_addr(index, vak->layout_helper())
               + jdk_internal_vm_jni_SubElementSelector::getOffset(slct);
     fieldKlass->inline_copy_payload_to_new_oop(addr, res);
   }
   return JNIHandles::make_local(res);
 JNI_END
 
 JNI_ENTRY(void, jni_SetObjectSubElement(JNIEnv* env, jarray array, jobject selector, int index, jobject value))
   JNIWrapper("jni_SetObjectSubElement");
 
-  valueArrayOop ar =  (valueArrayOop)JNIHandles::resolve_non_null(array);
+  flatArrayOop ar =  (flatArrayOop)JNIHandles::resolve_non_null(array);
   oop slct = JNIHandles::resolve_non_null(selector);
-  ValueArrayKlass* vak = ValueArrayKlass::cast(ar->klass());
+  FlatArrayKlass* vak = FlatArrayKlass::cast(ar->klass());
   if (jdk_internal_vm_jni_SubElementSelector::getArrayElementType(slct) != vak->element_klass()->java_mirror()) {
     THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(), "Array/Selector mismatch");
   }
   oop val = JNIHandles::resolve(value);
   if (val == NULL) {
@@ -3606,13 +3606,13 @@
 #define DEFINE_GETSUBELEMENT(ElementType,Result,ElementBasicType) \
 \
 JNI_ENTRY(ElementType, \
           jni_Get##Result##SubElement(JNIEnv *env, jarray array, jobject selector, int index)) \
   JNIWrapper("Get" XSTR(Result) "SubElement"); \
-  valueArrayOop ar = (valueArrayOop)JNIHandles::resolve_non_null(array); \
+  flatArrayOop ar = (flatArrayOop)JNIHandles::resolve_non_null(array); \
   oop slct = JNIHandles::resolve_non_null(selector); \
-  ValueArrayKlass* vak = ValueArrayKlass::cast(ar->klass()); \
+  FlatArrayKlass* vak = FlatArrayKlass::cast(ar->klass()); \
   if (jdk_internal_vm_jni_SubElementSelector::getArrayElementType(slct) != vak->element_klass()->java_mirror()) { \
     THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(), "Array/Selector mismatch"); \
   } \
   if (jdk_internal_vm_jni_SubElementSelector::getSubElementType(slct) != java_lang_Class::primitive_mirror(ElementBasicType)) { \
     THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(), "Wrong SubElement type"); \
@@ -3635,13 +3635,13 @@
 #define DEFINE_SETSUBELEMENT(ElementType,Result,ElementBasicType) \
 \
 JNI_ENTRY(void, \
           jni_Set##Result##SubElement(JNIEnv *env, jarray array, jobject selector, int index, ElementType value)) \
   JNIWrapper("Get" XSTR(Result) "SubElement"); \
-  valueArrayOop ar = (valueArrayOop)JNIHandles::resolve_non_null(array); \
+  flatArrayOop ar = (flatArrayOop)JNIHandles::resolve_non_null(array); \
   oop slct = JNIHandles::resolve_non_null(selector); \
-  ValueArrayKlass* vak = ValueArrayKlass::cast(ar->klass()); \
+  FlatArrayKlass* vak = FlatArrayKlass::cast(ar->klass()); \
   if (jdk_internal_vm_jni_SubElementSelector::getArrayElementType(slct) != vak->element_klass()->java_mirror()) { \
     THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(), "Array/Selector mismatch"); \
   } \
   if (jdk_internal_vm_jni_SubElementSelector::getSubElementType(slct) != java_lang_Class::primitive_mirror(ElementBasicType)) { \
     THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(), "Wrong SubElement type"); \
