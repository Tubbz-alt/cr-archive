diff a/src/hotspot/share/opto/macroArrayCopy.cpp b/src/hotspot/share/opto/macroArrayCopy.cpp
--- a/src/hotspot/share/opto/macroArrayCopy.cpp
+++ b/src/hotspot/share/opto/macroArrayCopy.cpp
@@ -187,11 +187,11 @@
 
   return is_notp;
 }
 
 Node* PhaseMacroExpand::generate_flattened_array_guard(Node** ctrl, Node* mem, Node* obj_or_klass, RegionNode* region) {
-  assert(ValueArrayFlatten, "can never be flattened");
+  assert(UseFlatArray, "can never be flattened");
   return generate_array_guard(ctrl, mem, obj_or_klass, region, Klass::_lh_array_tag_vt_value);
 }
 
 Node* PhaseMacroExpand::generate_object_array_guard(Node** ctrl, Node* mem, Node* obj_or_klass, RegionNode* region) {
   return generate_array_guard(ctrl, mem, obj_or_klass, region, Klass::_lh_array_tag_obj_value);
@@ -1309,11 +1309,11 @@
     }
 
     RegionNode* slow_region = new RegionNode(1);
     transform_later(slow_region);
 
-    if (ValueArrayFlatten && (top_dest == NULL || !top_dest->is_not_flat())) {
+    if (UseFlatArray && (top_dest == NULL || !top_dest->is_not_flat())) {
       generate_flattened_array_guard(&ctrl, merge_mem, dest, slow_region);
     }
 
     // Call StubRoutines::generic_arraycopy stub.
     Node* mem = generate_arraycopy(ac, NULL, &ctrl, merge_mem, &io,
