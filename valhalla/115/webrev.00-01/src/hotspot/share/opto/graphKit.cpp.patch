diff a/src/hotspot/share/opto/graphKit.cpp b/src/hotspot/share/opto/graphKit.cpp
--- a/src/hotspot/share/opto/graphKit.cpp
+++ b/src/hotspot/share/opto/graphKit.cpp
@@ -3486,11 +3486,11 @@
   // Return final merged results
   set_control( _gvn.transform(region) );
   record_for_igvn(region);
 
   bool not_null_free = !toop->can_be_value_type();
-  bool not_flattenable = !FlatArrayFlatten || not_null_free || (toop->is_valuetypeptr() && !toop->value_klass()->flatten_array());
+  bool not_flattenable = !UseFlatArray || not_null_free || (toop->is_valuetypeptr() && !toop->value_klass()->flatten_array());
   if (EnableValhalla && not_flattenable) {
     // Check if obj has been loaded from an array
     obj = obj->isa_DecodeN() ? obj->in(1) : obj;
     Node* array = NULL;
     if (obj->isa_Load()) {
@@ -3791,11 +3791,11 @@
   if (!StressReflectiveCode && inst_klass != NULL) {
     ciKlass* klass = inst_klass->klass();
     assert(klass != NULL, "klass should not be NULL");
     bool    xklass = inst_klass->klass_is_exact();
     bool can_be_flattened = false;
-    if (FlatArrayFlatten && klass->is_obj_array_klass()) {
+    if (UseFlatArray && klass->is_obj_array_klass()) {
       ciKlass* elem = klass->as_obj_array_klass()->element_klass();
       can_be_flattened = elem->can_be_value_klass() && (!elem->is_valuetype() || elem->as_value_klass()->flatten_array());
     }
     if (xklass || (klass->is_array_klass() && !can_be_flattened)) {
       jint lhelper = klass->layout_helper();
