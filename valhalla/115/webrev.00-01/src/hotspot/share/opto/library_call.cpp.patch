diff a/src/hotspot/share/opto/library_call.cpp b/src/hotspot/share/opto/library_call.cpp
--- a/src/hotspot/share/opto/library_call.cpp
+++ b/src/hotspot/share/opto/library_call.cpp
@@ -221,11 +221,11 @@
   }
   Node* generate_typeArray_guard(Node* kls, RegionNode* region) {
     return generate_array_guard_common(kls, region, TypeArray);
   }
   Node* generate_valueArray_guard(Node* kls, RegionNode* region) {
-    assert(FlatArrayFlatten, "can never be flattened");
+    assert(UseFlatArray, "can never be flattened");
     return generate_array_guard_common(kls, region, ValueArray);
   }
   Node* generate_array_guard_common(Node* kls, RegionNode* region, ArrayKind kind);
   Node* generate_virtual_guard(Node* obj_klass, RegionNode* slow_region);
   CallJavaNode* generate_method_call(vmIntrinsics::ID method_id,
@@ -3893,11 +3893,11 @@
   Node* end               = is_copyOfRange? argument(2): argument(1);
   Node* array_type_mirror = is_copyOfRange? argument(3): argument(2);
 
   const TypeAryPtr* original_t = _gvn.type(original)->isa_aryptr();
   const TypeInstPtr* mirror_t = _gvn.type(array_type_mirror)->isa_instptr();
-  if (EnableValhalla && FlatArrayFlatten &&
+  if (EnableValhalla && UseFlatArray &&
       (original_t == NULL || mirror_t == NULL ||
        (mirror_t->java_mirror_type() == NULL &&
         (original_t->elem()->isa_valuetype() ||
          (original_t->elem()->make_oopptr() != NULL &&
           original_t->elem()->make_oopptr()->can_be_value_type()))))) {
@@ -3963,11 +3963,11 @@
           original_kls = load_object_klass(original);
         }
       }
     }
 
-    if (FlatArrayFlatten) {
+    if (UseFlatArray) {
       // Either both or neither new array klass and original array
       // klass must be flattened
       Node* is_flat = generate_valueArray_guard(klass_node, NULL);
       if (!original_t->is_not_flat()) {
         generate_valueArray_guard(original_kls, bailout);
