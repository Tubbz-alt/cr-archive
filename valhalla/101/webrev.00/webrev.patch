diff a/src/hotspot/share/prims/jvmtiRedefineClasses.cpp b/src/hotspot/share/prims/jvmtiRedefineClasses.cpp
--- a/src/hotspot/share/prims/jvmtiRedefineClasses.cpp
+++ b/src/hotspot/share/prims/jvmtiRedefineClasses.cpp
@@ -290,10 +290,15 @@
   // classes for arrays cannot be redefined
   if (k == NULL || !k->is_instance_klass()) {
     return false;
   }
 
+  // Cannot redefine or retransform interface java.lang.IdentityObject.
+  if (k->name() == vmSymbols::java_lang_IdentityObject()) {
+    return false;
+  }
+
   // Cannot redefine or retransform a hidden or an unsafe anonymous class.
   if (InstanceKlass::cast(k)->is_hidden() ||
       InstanceKlass::cast(k)->is_unsafe_anonymous()) {
     return false;
   }
diff a/test/jdk/java/lang/instrument/IsModifiableClassAgent.java b/test/jdk/java/lang/instrument/IsModifiableClassAgent.java
--- a/test/jdk/java/lang/instrument/IsModifiableClassAgent.java
+++ b/test/jdk/java/lang/instrument/IsModifiableClassAgent.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -58,10 +58,14 @@
                     }
                     if (isMod && klass.isPrimitive()) {
                         System.err.println("Error: primitive class returned as modifiable: " + klass);
                         fail = true;
                     }
+                    if (isMod && klass == java.lang.IdentityObject.class) {
+                        System.err.println("Error: java.lang.IdentityObject class returned as modifiable: " + klass);
+                        fail = true;
+                    }
                     try {
                         instrumentation.retransformClasses(klass);
                         if (!isMod) {
                             System.err.println("Error: unmodifiable class retransformable: " + klass);
                             fail = true;
