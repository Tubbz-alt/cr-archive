diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
@@ -50,10 +50,11 @@
 import com.sun.tools.javac.code.Type.ErrorType;
 import com.sun.tools.javac.code.Type.JCPrimitiveType;
 import com.sun.tools.javac.code.Type.JCVoidType;
 import com.sun.tools.javac.code.Type.MethodType;
 import com.sun.tools.javac.code.Type.UnknownType;
+import com.sun.tools.javac.code.Type.WildcardType;
 import com.sun.tools.javac.code.Types.UniqueType;
 import com.sun.tools.javac.comp.Modules;
 import com.sun.tools.javac.jvm.Target;
 import com.sun.tools.javac.util.Assert;
 import com.sun.tools.javac.util.Context;
@@ -266,12 +267,21 @@
 
     public VarSymbol getClassField(Type type, Types types) {
         return classFields.computeIfAbsent(
             new UniqueType(type, types), k -> {
                 Type arg = null;
-                if (type.getTag() == ARRAY || type.getTag() == CLASS)
-                    arg = types.erasure(type);
+                if (type.getTag() == ARRAY || type.getTag() == CLASS) {
+                    /* Temporary treatment for inline class: Given an inline class V that implements
+                       I1, I2, ... In, V.class is typed to be Class<? extends Object & I1 & I2 .. & In>
+                    */
+                    if (type.isValue()) {
+                        Type it = types.makeIntersectionType(((ClassType)type).interfaces_field, true);
+                        arg = new WildcardType(it, BoundKind.EXTENDS, boundClass);
+                    } else {
+                        arg = types.erasure(type);
+                    }
+                }
                 else if (type.isPrimitiveOrVoid())
                     arg = types.boxedClass(type).type;
                 else
                     throw new AssertionError(type);
 
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
@@ -2516,12 +2516,17 @@
             if (msym != null &&
                     msym.owner == syms.objectType.tsym &&
                     methodName == names.getClass &&
                     argtypes.isEmpty()) {
                 // as a special case, x.getClass() has type Class<? extends |X|>
+                // Temporary treatment for inline class: Given an inline class V that implements
+                // I1, I2, ... In, v.getClass() is typed to be Class<? extends Object & I1 & I2 .. & In>
+                Type wcb = qualifierType.isValue()
+                              ? types.makeIntersectionType(((ClassType) qualifierType).interfaces_field, true)
+                              : types.erasure(qualifierType);
                 return new ClassType(restype.getEnclosingType(),
-                        List.of(new WildcardType(types.erasure(qualifierType),
+                        List.of(new WildcardType(wcb,
                                 BoundKind.EXTENDS,
                                 syms.boundClass)),
                         restype.tsym,
                         restype.getMetadata());
             } else if (msym != null &&
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
@@ -896,13 +896,11 @@
         } else
             return true;
     }
 
     void checkParameterizationWithValues(DiagnosticPosition pos, Type t) {
-        if (t.tsym != syms.classType.tsym) { // tolerate Value.class.
-            valueParameterizationChecker.visit(t, pos);
-        }
+        valueParameterizationChecker.visit(t, pos);
     }
 
     /** valueParameterizationChecker: A type visitor that descends down the given type looking for instances of value types
      *  being used as type arguments and issues error against those usages.
      */
diff a/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralNegativeTest.java b/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralNegativeTest.java
--- /dev/null
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralNegativeTest.java
@@ -0,0 +1,12 @@
+/*
+ * @test /nodynamiccopyright/
+ * @bug 8244796 8244799
+ * @summary Value class literal tests
+ * @compile/fail/ref=ClassLiteralNegativeTest.out -XDrawDiagnostics ClassLiteralNegativeTest.java
+ */
+
+final inline class ClassLiteralNegativeTest {
+    Class<ClassLiteralNegativeTest> c1 = null; // error
+    Class<? extends ClassLiteralNegativeTest> c2 = null; // error
+    Class<? super ClassLiteralNegativeTest> c3 = null; // error
+}
diff a/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralNegativeTest.out b/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralNegativeTest.out
--- /dev/null
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralNegativeTest.out
@@ -0,0 +1,4 @@
+ClassLiteralNegativeTest.java:9:11: compiler.err.type.found.req: ClassLiteralNegativeTest, (compiler.misc.type.req.ref)
+ClassLiteralNegativeTest.java:10:11: compiler.err.type.found.req: ClassLiteralNegativeTest, (compiler.misc.type.req.ref)
+ClassLiteralNegativeTest.java:11:11: compiler.err.type.found.req: ClassLiteralNegativeTest, (compiler.misc.type.req.ref)
+3 errors
diff a/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralTypingTest.java b/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralTypingTest.java
--- /dev/null
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ClassLiteralTypingTest.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/**
+ * @test
+ * @bug 8244796 8244799
+ * @summary Temporary typing of inline class literals.
+ */
+
+/* Given an inline class V that implements I1, I2, ... In,
+   V.class and v.getClass() are typed to be Class<? extends Object & I1 & I2 .. & In>
+*/
+public class ClassLiteralTypingTest {
+
+    interface I {}
+
+    public static <T> long size(Class<T> c) {
+        return 0;
+    }
+
+    public static long foo(Class<? extends I> p) {
+        return 1;
+    }
+
+    static inline class V implements I {
+        int x = 42;
+    }
+
+    public static void main(String[] args) {
+        if (size(V.class) != 0 || size(new V().getClass()) != 0 ||
+             foo(V.class) != 1 ||  foo(new V().getClass()) != 1)
+            throw new AssertionError("Unexpected behavior");
+    }
+}
