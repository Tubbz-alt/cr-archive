diff a/src/hotspot/cpu/aarch64/sharedRuntime_aarch64.cpp b/src/hotspot/cpu/aarch64/sharedRuntime_aarch64.cpp
--- a/src/hotspot/cpu/aarch64/sharedRuntime_aarch64.cpp
+++ b/src/hotspot/cpu/aarch64/sharedRuntime_aarch64.cpp
@@ -28,10 +28,11 @@
 #include "asm/macroAssembler.inline.hpp"
 #include "classfile/symbolTable.hpp"
 #include "code/debugInfoRec.hpp"
 #include "code/icBuffer.hpp"
 #include "code/vtableStubs.hpp"
+#include "gc/shared/barrierSetAssembler.hpp"
 #include "interpreter/interpreter.hpp"
 #include "interpreter/interp_masm.hpp"
 #include "logging/log.hpp"
 #include "memory/resourceArea.hpp"
 #include "nativeInst_aarch64.hpp"
@@ -169,16 +170,16 @@
 
   return oop_map;
 }
 
 void RegisterSaver::restore_live_registers(MacroAssembler* masm, bool restore_vectors) {
-#if COMPILER2_OR_JVMCI
-  __ pop_CPU_state(restore_vectors);
-  __ leave();
-#else
+#if !COMPILER2_OR_JVMCI
   assert(!restore_vectors, "vectors are generated only by C2 and JVMCI");
 #endif
+  __ pop_CPU_state(restore_vectors);
+  __ leave();
+
 }
 
 void RegisterSaver::restore_result_registers(MacroAssembler* masm) {
 
   // Just restore result register. Only used by deoptimization. By
@@ -984,15 +985,14 @@
 
     __ bind(L_skip_barrier);
     c2i_no_clinit_check_entry = __ pc();
   }
 
-//  FIXME: Not Implemented
-//  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();
-//  bs->c2i_entry_barrier(masm);
+  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();
+  bs->c2i_entry_barrier(masm);
 
-  gen_c2i_adapter(masm, sig_cc, regs_cc, skip_fixup, i2c_entry, oop_maps, frame_complete, frame_size_in_words, true);
+  gen_c2i_adapter(masm, total_args_passed, comp_args_on_stack, sig_bt, regs, skip_fixup);
 
   address c2i_unverified_value_entry = c2i_unverified_entry;
 
  // Non-scalarized c2i adapter
   address c2i_value_entry = c2i_entry;
@@ -1782,10 +1782,13 @@
   // Generate a new frame for the wrapper.
   __ enter();
   // -2 because return address is already present and so is saved rfp
   __ sub(sp, sp, stack_size - 2*wordSize);
 
+  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();
+  bs->nmethod_entry_barrier(masm);
+
   // Frame is now completed as far as size and linkage.
   int frame_complete = ((intptr_t)__ pc()) - start;
 
   // We use r20 as the oop handle for the receiver/klass
   // It is callee save so it survives the call to native
