diff a/src/hotspot/share/oops/valueKlass.cpp b/src/hotspot/share/oops/valueKlass.cpp
--- a/src/hotspot/share/oops/valueKlass.cpp
+++ b/src/hotspot/share/oops/valueKlass.cpp
@@ -47,11 +47,11 @@
 #include "runtime/thread.inline.hpp"
 #include "utilities/copy.hpp"
 
   // Constructor
 ValueKlass::ValueKlass(const ClassFileParser& parser)
-    : InstanceKlass(parser, InstanceKlass::_misc_kind_inline_type, InstanceKlass::ID) {
+    : InstanceKlass(parser, InstanceKlass::_kind_inline_type, InstanceKlass::ID) {
   _adr_valueklass_fixed_block = valueklass_static_block();
   // Addresses used for value type calling convention
   *((Array<SigEntry>**)adr_extended_sig()) = NULL;
   *((Array<VMRegPair>**)adr_return_regs()) = NULL;
   *((address*)adr_pack_handler()) = NULL;
@@ -59,10 +59,11 @@
   *((address*)adr_unpack_handler()) = NULL;
   assert(pack_handler() == NULL, "pack handler not null");
   *((int*)adr_default_value_offset()) = 0;
   *((Klass**)adr_value_array_klass()) = NULL;
   set_prototype_header(markWord::always_locked_prototype());
+  assert(is_inline_type_klass(), "invariant");
 }
 
 oop ValueKlass::default_value() {
   oop val = java_mirror()->obj_field_acquire(default_value_offset());
   assert(oopDesc::is_oop(val), "Sanity check");
