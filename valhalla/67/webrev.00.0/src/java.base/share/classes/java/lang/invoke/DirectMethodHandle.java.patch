diff a/src/java.base/share/classes/java/lang/invoke/DirectMethodHandle.java b/src/java.base/share/classes/java/lang/invoke/DirectMethodHandle.java
--- a/src/java.base/share/classes/java/lang/invoke/DirectMethodHandle.java
+++ b/src/java.base/share/classes/java/lang/invoke/DirectMethodHandle.java
@@ -49,13 +49,14 @@
  * to a class member.
  * @author jrose
  */
 class DirectMethodHandle extends MethodHandle {
     final MemberName member;
+    final boolean crackable;
 
     // Constructors and factory methods in this class *must* be package scoped or private.
-    private DirectMethodHandle(MethodType mtype, LambdaForm form, MemberName member) {
+    private DirectMethodHandle(MethodType mtype, LambdaForm form, MemberName member, boolean crackable) {
         super(mtype, form);
         if (!member.isResolved())  throw new InternalError();
 
         if (member.getDeclaringClass().isInterface() &&
             member.getReferenceKind() == REF_invokeInterface &&
@@ -68,10 +69,11 @@
                 member = m;
             }
         }
 
         this.member = member;
+        this.crackable = crackable;
     }
 
     // Factory methods:
     static DirectMethodHandle make(byte refKind, Class<?> refc, MemberName member, Class<?> callerClass) {
         MethodType mtype = member.getMethodOrFieldType();
@@ -90,22 +92,22 @@
                     // receiver check inserted
                     if (callerClass == null) {
                         throw new InternalError("callerClass must not be null for REF_invokeSpecial");
                     }
                     LambdaForm lform = preparedLambdaForm(member, callerClass.isInterface());
-                    return new Special(mtype, lform, member, callerClass);
+                    return new Special(mtype, lform, member, true, callerClass);
                 }
                 case REF_invokeInterface: {
                     // for interfaces we always need the receiver typecheck,
                     // so we always pass 'true' to ensure we adapt if needed
                     // to include the REF_invokeSpecial case
                     LambdaForm lform = preparedLambdaForm(member, true);
-                    return new Interface(mtype, lform, member, refc);
+                    return new Interface(mtype, lform, member, true, refc);
                 }
                 default: {
                     LambdaForm lform = preparedLambdaForm(member);
-                    return new DirectMethodHandle(mtype, lform, member);
+                    return new DirectMethodHandle(mtype, lform, member, true);
                 }
             }
         } else {
             LambdaForm lform = preparedFieldLambdaForm(member);
             if (member.isStatic()) {
@@ -140,22 +142,37 @@
         assert(ctor.getReferenceKind() == REF_newInvokeSpecial) : ctor;
         MethodType mtype = ctor.getMethodType().changeReturnType(instanceClass);
         LambdaForm lform = preparedLambdaForm(ctor);
         MemberName init = ctor.asSpecial();
         assert(init.getMethodType().returnType() == void.class);
-        return new Constructor(mtype, lform, ctor, init, instanceClass);
+        return new Constructor(mtype, lform, ctor, true, init, instanceClass);
     }
 
     @Override
     BoundMethodHandle rebind() {
         return BoundMethodHandle.makeReinvoker(this);
     }
 
     @Override
     MethodHandle copyWith(MethodType mt, LambdaForm lf) {
         assert(this.getClass() == DirectMethodHandle.class);  // must override in subclasses
-        return new DirectMethodHandle(mt, lf, member);
+        return new DirectMethodHandle(mt, lf, member, crackable);
+    }
+
+    @Override
+    MethodHandle viewAsType(MethodType newType, boolean strict) {
+        // No actual conversions, just a new view of the same method.
+        // However, we must not expose a DMH that is crackable into a
+        // MethodHandleInfo, so we return a cloned, uncrackable DMH
+        assert(viewAsTypeChecks(newType, strict));
+        assert(this.getClass() == DirectMethodHandle.class);  // must override in subclasses
+        return new DirectMethodHandle(newType, form, member, false);
+    }
+
+    @Override
+    boolean isCrackable() {
+        return crackable;
     }
 
     @Override
     String internalProperties() {
         return "\n& DMH.MN="+internalMemberName();
@@ -407,21 +424,26 @@
     }
 
     /** This subclass represents invokespecial instructions. */
     static class Special extends DirectMethodHandle {
         private final Class<?> caller;
-        private Special(MethodType mtype, LambdaForm form, MemberName member, Class<?> caller) {
-            super(mtype, form, member);
+        private Special(MethodType mtype, LambdaForm form, MemberName member, boolean crackable, Class<?> caller) {
+            super(mtype, form, member, crackable);
             this.caller = caller;
         }
         @Override
         boolean isInvokeSpecial() {
             return true;
         }
         @Override
         MethodHandle copyWith(MethodType mt, LambdaForm lf) {
-            return new Special(mt, lf, member, caller);
+            return new Special(mt, lf, member, crackable, caller);
+        }
+        @Override
+        MethodHandle viewAsType(MethodType newType, boolean strict) {
+            assert(viewAsTypeChecks(newType, strict));
+            return new Special(newType, form, member, false, caller);
         }
         Object checkReceiver(Object recv) {
             if (!caller.isInstance(recv)) {
                 String msg = String.format("Receiver class %s is not a subclass of caller class %s",
                                            recv.getClass().getName(), caller.getName());
@@ -432,18 +454,23 @@
     }
 
     /** This subclass represents invokeinterface instructions. */
     static class Interface extends DirectMethodHandle {
         private final Class<?> refc;
-        private Interface(MethodType mtype, LambdaForm form, MemberName member, Class<?> refc) {
-            super(mtype, form, member);
-            assert refc.isInterface() : refc;
+        private Interface(MethodType mtype, LambdaForm form, MemberName member, boolean crackable, Class<?> refc) {
+            super(mtype, form, member, crackable);
+            assert(refc.isInterface()) : refc;
             this.refc = refc;
         }
         @Override
         MethodHandle copyWith(MethodType mt, LambdaForm lf) {
-            return new Interface(mt, lf, member, refc);
+            return new Interface(mt, lf, member, crackable, refc);
+        }
+        @Override
+        MethodHandle viewAsType(MethodType newType, boolean strict) {
+            assert(viewAsTypeChecks(newType, strict));
+            return new Interface(newType, form, member, false, refc);
         }
         @Override
         Object checkReceiver(Object recv) {
             if (!refc.isInstance(recv)) {
                 String msg = String.format("Receiver class %s does not implement the requested interface %s",
@@ -457,26 +484,30 @@
     /** Used for interface receiver type checks, by Interface and Special modes. */
     Object checkReceiver(Object recv) {
         throw new InternalError("Should only be invoked on a subclass");
     }
 
-
     /** This subclass handles constructor references. */
     static class Constructor extends DirectMethodHandle {
         final MemberName initMethod;
         final Class<?>   instanceClass;
 
         private Constructor(MethodType mtype, LambdaForm form, MemberName constructor,
-                            MemberName initMethod, Class<?> instanceClass) {
-            super(mtype, form, constructor);
+                            boolean crackable, MemberName initMethod, Class<?> instanceClass) {
+            super(mtype, form, constructor, crackable);
             this.initMethod = initMethod;
             this.instanceClass = instanceClass;
             assert(initMethod.isResolved());
         }
         @Override
         MethodHandle copyWith(MethodType mt, LambdaForm lf) {
-            return new Constructor(mt, lf, member, initMethod, instanceClass);
+            return new Constructor(mt, lf, member, crackable, initMethod, instanceClass);
+        }
+        @Override
+        MethodHandle viewAsType(MethodType newType, boolean strict) {
+            assert(viewAsTypeChecks(newType, strict));
+            return new Constructor(newType, form, member, false, initMethod, instanceClass);
         }
     }
 
     /*non-public*/
     static Object constructorMethod(Object mh) {
@@ -491,43 +522,47 @@
     }
 
     /** This subclass handles non-static field references. */
     static abstract class Accessor extends DirectMethodHandle {
         final Class<?> fieldType;
-        final int fieldOffset;
-
-        protected Accessor(MethodType mtype, LambdaForm form, MemberName member,
-                           int fieldOffset) {
-            super(mtype, form, member);
-            this.fieldType = member.getFieldType();
+        final int      fieldOffset;
+        private Accessor(MethodType mtype, LambdaForm form, MemberName member,
+                         boolean crackable, int fieldOffset) {
+            super(mtype, form, member, crackable);
+            this.fieldType   = member.getFieldType();
             this.fieldOffset = fieldOffset;
         }
         abstract Object checkCast(Object obj);
         abstract MethodHandle copyWith(MethodType mt, LambdaForm lf);
     }
 
     /** This subclass handles non-static field references of indirect type */
     static class IndirectAccessor extends Accessor {
         private IndirectAccessor(MethodType mtype, LambdaForm form, MemberName member,
                                  int fieldOffset) {
-            super(mtype, form, member, fieldOffset);
+            super(mtype, form, member, true, fieldOffset);
         }
 
         @Override Object checkCast(Object obj) {
             return fieldType.cast(obj);
         }
         @Override
         MethodHandle copyWith(MethodType mt, LambdaForm lf) {
             return new IndirectAccessor(mt, lf, member, fieldOffset);
         }
+        @Override
+        MethodHandle viewAsType(MethodType newType, boolean strict) {
+            assert(viewAsTypeChecks(newType, strict));
+            return new IndirectAccessor(newType, form, member, fieldOffset);
+        }
     }
 
     /** This subclass handles non-static field references of inline type */
     static class InlineAccessor extends Accessor {
         private InlineAccessor(MethodType mtype, LambdaForm form, MemberName member,
                                int fieldOffset) {
-            super(mtype, form, member, fieldOffset);
+            super(mtype, form, member, true, fieldOffset);
         }
 
         @Override Object checkCast(Object obj) {
             return fieldType.cast(Objects.requireNonNull(obj));
         }
@@ -561,43 +596,48 @@
     static abstract class StaticAccessor extends DirectMethodHandle {
         final Class<?> fieldType;
         final Object staticBase;
         final long staticOffset;
 
-        protected StaticAccessor(MethodType mtype, LambdaForm form, MemberName member,
-                                 Object staticBase, long staticOffset) {
-            super(mtype, form, member);
-            this.fieldType = member.getFieldType();
-            this.staticBase = staticBase;
+        private StaticAccessor(MethodType mtype, LambdaForm form, MemberName member,
+                               boolean crackable, Object staticBase, long staticOffset) {
+            super(mtype, form, member, crackable);
+            this.fieldType    = member.getFieldType();
+            this.staticBase   = staticBase;
             this.staticOffset = staticOffset;
         }
         abstract Object checkCast(Object obj);
         abstract MethodHandle copyWith(MethodType mt, LambdaForm lf);
     }
 
     /** This subclass handles static field references of indirect type. */
     static class IndirectStaticAccessor extends StaticAccessor {
         private IndirectStaticAccessor(MethodType mtype, LambdaForm form, MemberName member,
                                      Object staticBase, long staticOffset) {
-            super(mtype, form, member, staticBase, staticOffset);
+            super(mtype, form, member, true, staticBase, staticOffset);
         }
 
         // indirect type is always nullable
         @Override Object checkCast(Object obj) {
             return fieldType.cast(obj);
         }
         @Override
         MethodHandle copyWith(MethodType mt, LambdaForm lf) {
             return new IndirectStaticAccessor(mt, lf, member, staticBase, staticOffset);
         }
+        @Override
+        MethodHandle viewAsType(MethodType newType, boolean strict) {
+            assert(viewAsTypeChecks(newType, strict));
+            return new IndirectStaticAccessor(newType, form, member, staticBase, staticOffset);
+        }
     }
 
     /** This subclass handles static field references of inline type . */
     static class InlineStaticAccessor extends StaticAccessor {
         private InlineStaticAccessor(MethodType mtype, LambdaForm form, MemberName member,
                                      Object staticBase, long staticOffset) {
-            super(mtype, form, member, staticBase, staticOffset);
+            super(mtype, form, member, true, staticBase, staticOffset);
         }
 
         // zero-default inline type is not-nullable
         @Override Object checkCast(Object obj) {
             assert fieldType.isInlineClass() : "null-default inline type not yet supported";
