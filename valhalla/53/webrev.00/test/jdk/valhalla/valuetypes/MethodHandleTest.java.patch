diff a/test/jdk/valhalla/valuetypes/MethodHandleTest.java b/test/jdk/valhalla/valuetypes/MethodHandleTest.java
--- a/test/jdk/valhalla/valuetypes/MethodHandleTest.java
+++ b/test/jdk/valhalla/valuetypes/MethodHandleTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -31,11 +31,10 @@
 import java.lang.invoke.*;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
 import java.util.List;
 
-import org.testng.annotations.BeforeTest;
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 import static org.testng.Assert.*;
 
 public class MethodHandleTest {
@@ -118,11 +117,11 @@
             assertEquals(v, o);
         }
 
         Class<?> elementType = c.getComponentType();
         if (elementType.isInlineClass()) {
-            assertTrue(elementType == elementType.asPrimaryType());
+            assertTrue(elementType == elementType.valueType().get());
         }
         // set an array element to null
         try {
             Object v = (Object)setter.invoke(array, 0, null);
             assertFalse(elementType.isInlineClass(), "should fail to set an inline class array element to null");
@@ -193,12 +192,11 @@
      * The field must be flattenable but may or may not be flattened.
      */
     void setValueField(String name, Object obj, Object value) throws Throwable {
         Field f = c.getDeclaredField(name);
         boolean isStatic = Modifier.isStatic(f.getModifiers());
-        assertTrue(f.getType().isInlineClass() ||
-                   f.getType().getCanonicalName().endsWith("$ref"));
+        assertTrue(f.getType().isInlineClass() || f.getType().valueType().isPresent());
         assertTrue((isStatic && obj == null) || (!isStatic && obj != null));
         Object v = f.get(obj);
 
         // Field::set
         try {
@@ -289,11 +287,11 @@
      * Test setting the given field to null via reflection, method handle
      * and var handle.
      */
     void ensureNullable(Field f) throws Throwable {
         assertFalse(Modifier.isStatic(f.getModifiers()));
-        boolean canBeNull = f.getType().isNullableType();
+        boolean canBeNull = !f.getType().isInlineClass();
         // test reflection
         try {
             f.set(o, null);
             assertTrue(canBeNull, f + " cannot be set to null");
         } catch (NullPointerException e) {
