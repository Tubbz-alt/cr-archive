diff a/src/java.base/share/classes/java/lang/reflect/ProxyGenerator.java b/src/java.base/share/classes/java/lang/reflect/ProxyGenerator.java
--- a/src/java.base/share/classes/java/lang/reflect/ProxyGenerator.java
+++ b/src/java.base/share/classes/java/lang/reflect/ProxyGenerator.java
@@ -812,11 +812,11 @@
                 } else {
                     throw new AssertionError();
                 }
             } else {
                 String internalName = dotToSlash(type.getName());
-                if (type.isInlineClass() && !type.isIndirectType()) {
+                if (type.isInlineClass()) {
                     internalName = 'Q' + internalName + ";";
                 }
                 mv.visitTypeInsn(CHECKCAST, internalName);
                 mv.visitInsn(ARETURN);
             }
@@ -877,15 +877,10 @@
         private void codeClassForName(MethodVisitor mv, Class<?> cl) {
             mv.visitLdcInsn(cl.getName());
             mv.visitMethodInsn(INVOKESTATIC,
                     JL_CLASS,
                     "forName", "(Ljava/lang/String;)Ljava/lang/Class;", false);
-            if (cl.isInlineClass() && cl == cl.asPrimaryType()) {
-                mv.visitMethodInsn(INVOKEVIRTUAL,
-                    JL_CLASS,
-                    "asPrimaryType", "()Ljava/lang/Class;", false);
-            }
         }
 
         /**
          * Visit a bytecode for a constant.
          *
