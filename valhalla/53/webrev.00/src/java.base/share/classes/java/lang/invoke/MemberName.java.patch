diff a/src/java.base/share/classes/java/lang/invoke/MemberName.java b/src/java.base/share/classes/java/lang/invoke/MemberName.java
--- a/src/java.base/share/classes/java/lang/invoke/MemberName.java
+++ b/src/java.base/share/classes/java/lang/invoke/MemberName.java
@@ -191,15 +191,14 @@
      *  For non-static methods or constructors, this is the type with a leading parameter,
      *  a reference to declaring class.  For static methods, it is the same as the declared type.
      */
     public MethodType getInvocationType() {
         MethodType itype = getMethodOrFieldType();
-        Class<?> c = clazz.asPrimaryType();
         if (isObjectConstructor() && getReferenceKind() == REF_newInvokeSpecial)
-            return itype.changeReturnType(c);
+            return itype.changeReturnType(clazz);
         if (!isStatic())
-            return itype.insertParameterTypes(0, c);
+            return itype.insertParameterTypes(0, clazz);
         return itype;
     }
 
     /** Utility method producing the parameter types of the method type. */
     public Class<?>[] getParameterTypes() {
@@ -479,18 +478,18 @@
 
     /** Query whether this member is a field of an inline class. */
     public boolean isInlineable()  {
         if (isField()) {
             Class<?> type = getFieldType();
-            return type.isInlineClass() && type == type.asPrimaryType();
+            return type.isInlineClass();
         }
         return false;
     }
 
     public boolean isIndirect()  {
         if (isField()) {
-            return getFieldType().isIndirectType();
+            return !getFieldType().isInlineClass();
         }
         return false;
     }
 
     static final String CONSTRUCTOR_NAME = "<init>";  // the ever-popular
@@ -955,23 +954,14 @@
         //buf.append("#").append(System.identityHashCode(this));
         return buf.toString();
     }
     private static String getName(Object obj) {
         if (obj instanceof Class<?>)
-            return toTypeName((Class<?>)obj);
+            return ((Class<?>)obj).getName();
         return String.valueOf(obj);
     }
 
-    /*
-     * Returns the class name appended with "?" if it is the nullable projection
-     * of an inline class.
-     */
-    private static String toTypeName(Class<?> type) {
-        return type.isInlineClass() && type.isIndirectType() ? type.getName() + "?" : type.getName();
-    }
-
-
     public IllegalAccessException makeAccessException(String message, Object from) {
         message = message + ": "+ toString();
         if (from != null)  {
             if (from == MethodHandles.publicLookup()) {
                 message += ", from public Lookup";
