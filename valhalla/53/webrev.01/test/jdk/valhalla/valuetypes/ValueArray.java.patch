diff a/test/jdk/valhalla/valuetypes/ValueArray.java b/test/jdk/valhalla/valuetypes/ValueArray.java
--- a/test/jdk/valhalla/valuetypes/ValueArray.java
+++ b/test/jdk/valhalla/valuetypes/ValueArray.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -29,11 +29,10 @@
  */
 
 import java.lang.reflect.Array;
 import java.util.Arrays;
 
-import org.testng.annotations.BeforeTest;
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 import static org.testng.Assert.*;
 
 public class ValueArray {
@@ -56,12 +55,12 @@
     void run() {
         testClassName();
         testArrayElements();
 
         if (componentType.isInlineClass()) {
-            Object[] qArray = (Object[]) Array.newInstance(componentType.asPrimaryType(), 0);
-            Object[] lArray = (Object[]) Array.newInstance(componentType.asIndirectType(), 0);
+            Object[] qArray = (Object[]) Array.newInstance(componentType, 0);
+            Object[] lArray = (Object[]) Array.newInstance(componentType.referenceType().get(), 0);
             testInlineArrayCovariance(componentType, qArray, lArray);
         }
     }
 
     void testClassName() {
@@ -71,13 +70,12 @@
         Class<?> c = arrayClass;
         while (c.isArray()) {
             sb.append("[");
             c = c.getComponentType();
         }
-        sb.append(c.isIndirectType() ? "L" : "Q").append(c.getName()).append(";");
+        sb.append(c.isInlineClass() ? "Q" : "L").append(c.getName()).append(";");
         assertEquals(sb.toString(), arrayClassName);
-        assertEquals(c.getTypeName(), c.getName() + (c.isInlineClass() && c.isIndirectType() ? "?" : ""));
     }
 
     void testArrayElements() {
         Object[] array = (Object[]) Array.newInstance(componentType, this.array.length);
         assertTrue(array.getClass() == arrayClass);
@@ -92,11 +90,11 @@
             assertEquals(o, this.array[i]);
         }
         Arrays.setAll(array, i -> this.array[i]);
 
         // test nullable
-        if (componentType.isNullableType()) {
+        if (!componentType.isInlineClass()) {
             for (int i=0; i < array.length; i++) {
                 Array.set(array, i, null);
             }
         } else {
             for (int i=0; i < array.length; i++) {
