diff a/test/jdk/valhalla/valuetypes/Reflection.java b/test/jdk/valhalla/valuetypes/Reflection.java
--- a/test/jdk/valhalla/valuetypes/Reflection.java
+++ b/test/jdk/valhalla/valuetypes/Reflection.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -23,99 +23,90 @@
 
 
 /*
  * @test
  * @summary test reflection on inline types
- * @run main/othervm Reflection
+ * @run testng/othervm Reflection
  */
 
 import java.lang.reflect.Array;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.InaccessibleObjectException;
 import java.lang.reflect.Method;
 
-public class Reflection {
-    public static void main(String... args) throws Exception {
-        testPointClass();
-        testLineClass();
-        testNonFlattenValue();
-        testMirrors();
-        testClassName();
-    }
+import org.testng.annotations.Test;
+import static org.testng.Assert.*;
 
-    static void testPointClass() throws Exception  {
+public class Reflection {
+    @Test
+    public static void testPointClass() throws Exception  {
         Point o = Point.makePoint(10, 20);
         Reflection test = new Reflection(Point.class, "Point", o);
         test.newInstance();
         test.constructor();
         test.accessFieldX(o.x);
         test.staticField();
     }
 
-    static void testLineClass() throws Exception {
+    @Test
+    public static void testLineClass() throws Exception {
         Line l = Line.makeLine(10, 20, 30, 40);
         Reflection test = new Reflection(Line.class, "Line", l);
         test.checkField("public final Point Line.p1", "p1", Point.class);
         test.checkField("public final Point Line.p2", "p2", Point.class);
         test.checkMethod("public Point Line.p1()",           "p1", Point.class);
         test.checkMethod("public Point Line.p2()",           "p2", Point.class);
     }
 
-    static void testNonFlattenValue() throws Exception {
+    @Test
+    public static void testNonFlattenValue() throws Exception {
         NonFlattenValue nfv = NonFlattenValue.make(10, 20);
         Reflection test = new Reflection(NonFlattenValue.class, "NonFlattenValue", nfv);
         test.checkField("final Point$ref NonFlattenValue.nfp", "nfp", Point.ref.class);
         test.checkMethod("public Point NonFlattenValue.pointValue()", "pointValue", Point.class);
         test.checkMethod("public Point$ref NonFlattenValue.point()", "point", Point.ref.class);
         test.checkMethod("public boolean NonFlattenValue.has(Point,Point$ref)", "has", boolean.class, Point.class, Point.ref.class);
     }
 
     /*
-     * Tests reflection APIs with the primary type and indirect/nullable projection type
+     * Tests reflection APIs with the value and reference projection type
      */
-    static void testMirrors() throws Exception {
-        Class<?> primary = Point.class;
-        Class<?> indirect = Point.ref.class;
-
-        assertEquals(primary, Point.class);
-        assertEquals(indirect, Point.ref.class);
-        assertTrue(primary.isInlineClass());
-        assertFalse(primary.isIndirectType());
-        assertFalse(primary.isNullableType());
+    @Test
+    public static void testMirrors() throws Exception {
+        Class<?> inlineClass = Point.class;
+        assertTrue(inlineClass.isInlineClass());
+        assertFalse(Point.ref.class.isInlineClass());
+        assertEquals(inlineClass.valueType().get(), Point.class);
+        assertEquals(inlineClass.referenceType().get(), Point.ref.class);
 
-        assertTrue(!indirect.isInlineClass());
-        assertTrue(indirect.isIndirectType());
-        assertTrue(indirect.isNullableType());
 
         Point o = Point.makePoint(10, 20);
-        assertTrue(primary.isInstance(o));
-        assertTrue(indirect.isInstance(o));
+        assertTrue(Point.class.isInstance(o));
+        assertTrue(Point.ref.class.isInstance(o));
 
+    }
+
+    @Test
+    public static void testAssignableFrom() {
         // V <: V? and V <: Object
-        assertTrue(indirect.isAssignableFrom(primary));
-        assertTrue(Object.class.isAssignableFrom(primary));
-        assertFalse(primary.isAssignableFrom(indirect));
-        assertTrue(Object.class.isAssignableFrom(indirect));
+        assertTrue(Point.ref.class.isAssignableFrom(Point.class));
+        assertTrue(Object.class.isAssignableFrom(Point.class));
+        assertFalse(Point.class.isAssignableFrom(Point.ref.class));
+        assertTrue(Object.class.isAssignableFrom(Point.ref.class));
 
-        assertEquals(primary, primary.asSubclass(indirect));
+        assertEquals(Point.class, Point.class.asSubclass(Point.ref.class));
         try {
-            Class<?> c = indirect.asSubclass(primary);
+            Class<?> c = Point.ref.class.asSubclass(Point.class);
             assertTrue(false);
         } catch (ClassCastException e) { }
-
-        // indirect class
-        assertEquals(Reflection.class.asPrimaryType(), Reflection.class);
-        assertEquals(Reflection.class.asIndirectType(), Reflection.class);
-        assertEquals(Reflection.class.asNullableType(), Reflection.class);
-        assertTrue(Reflection.class.isIndirectType());
-        assertTrue(Reflection.class.isNullableType());
     }
 
-    static void testClassName() {
+    @Test
+    public static void testClassName() {
         assertEquals(Point.class.getName(), "Point");
-        assertEquals(Point.class.asNullableType().getName(), "Point");
+        assertEquals(Point.ref.class.getName(), "Point$ref");
         assertEquals(Line.class.getName(), "Line");
         assertEquals((new Point[0]).getClass().getName(), "[QPoint;");
         assertEquals((new Point.ref[0][0]).getClass().getName(), "[[LPoint$ref;");
     }
 
@@ -128,49 +119,49 @@
             throw new RuntimeException(cn + " is not an inline class");
         }
 
         // V.class, Class.forName, and the type of the object return the primary mirror
         assertEquals(type, o.getClass());
-        assertEquals(type, c.asPrimaryType());
-        assertEquals(c, c.asPrimaryType());
+        assertEquals(type, c.valueType().get());
+        assertEquals(c, c.valueType().get());
 
         this.ctor = c.getDeclaredConstructor();
         this.o = o;
 
 
         // test the primary mirror and secondary mirror
         testMirrors(this.c);
         // test array of Q-type and L-type
-        testArray(c.asPrimaryType());
-        testArray(c.asNullableType());
+        testArray(c.valueType().get());
+        testArray(c.referenceType().get());
     }
 
     private static void testMirrors(Class<?> c) {
-        Class<?> inlineType = c.asPrimaryType();
-        Class<?> nullableType = c.asNullableType();
+        Class<?> valType = c.valueType().get();
+        Class<?> refType = c.referenceType().get();
 
-        assertTrue(inlineType != null);
-        assertEquals(nullableType.getTypeName(), c.getTypeName() + "?");
-        assertEquals(nullableType.getSimpleName(), c.getSimpleName() + "?");
+        assertTrue(valType != null);
+        assertEquals(refType.getTypeName(), c.getTypeName() + "$ref");
+        assertEquals(refType.getSimpleName(), c.getSimpleName() + "$ref");
 
-        assertEquals(nullableType.getName(), inlineType.getName());
-        assertEquals(nullableType.getTypeName(), inlineType.getTypeName() + "?");
-        assertEquals(nullableType.getSimpleName(), inlineType.getSimpleName() + "?");
+        assertEquals(refType.getName(), valType.getName() + "$ref");
+        assertEquals(refType.getTypeName(), valType.getTypeName() + "$ref");
+        assertEquals(refType.getSimpleName(), valType.getSimpleName() + "$ref");
 
-        assertEquals(inlineType.asNullableType(), nullableType);
-        assertEquals(nullableType.asPrimaryType(), inlineType);
+        assertEquals(valType.referenceType().get(), refType);
+        assertEquals(refType.valueType().get(), valType);
     }
 
     void testArray(Class<?> elementType) {
         Object[] array = (Object[])Array.newInstance(elementType, 1);
         Class<?> arrayType = array.getClass();
         assertTrue(arrayType.isArray());
         Class<?> componentType = arrayType.getComponentType();
-        assertTrue(componentType.isInlineClass());
+        assertTrue(componentType.isInlineClass() || componentType.valueType().isPresent());
         assertEquals(componentType, elementType);
         // Array is a reference type
-        assertEquals(arrayType.asNullableType(), arrayType);
+        assertEquals(arrayType.referenceType().get(), arrayType);
         if (array[0] == null) {
             System.out.println("array[0] = null");
         } else {
             System.out.println("array[0] = " + array[0]);
         }
@@ -218,23 +209,6 @@
 
     void checkMethod(String source, String name, Class<?> returnType, Class<?>... params) throws Exception {
         Method m = c.getDeclaredMethod(name, params);
         assertEquals(m.toString(), source);
     }
-
-    static void assertEquals(Object o1, Object o2) {
-        if (o1 == o2 || o1.equals(o2))
-            return;
-
-        throw new AssertionError(o1 + " != " + o2);
-    }
-
-    static void assertTrue(boolean value) {
-        if (!value)
-            throw new AssertionError("expected true");
-    }
-
-    static void assertFalse(boolean value) {
-        if (value)
-            throw new AssertionError("expected false");
-    }
 }
