diff a/src/java.base/share/classes/jdk/internal/org/objectweb/asm/Type.java b/src/java.base/share/classes/jdk/internal/org/objectweb/asm/Type.java
--- a/src/java.base/share/classes/jdk/internal/org/objectweb/asm/Type.java
+++ b/src/java.base/share/classes/jdk/internal/org/objectweb/asm/Type.java
@@ -665,52 +665,24 @@
             } else {
                 throw new AssertionError();
             }
             stringBuilder.append(descriptor);
         } else {
+            stringBuilder.append(isInlineClass(currentClass) ? 'Q' : 'L');
             String name = currentClass.getName();
-            if (Helper.isIndirectType(currentClass)) {
-                stringBuilder.append('L');
-            } else {
-                stringBuilder.append('Q');
-
-            }
             int nameLength = name.length();
             for (int i = 0; i < nameLength; ++i) {
                 char car = name.charAt(i);
                 stringBuilder.append(car == '.' ? '/' : car);
             }
             stringBuilder.append(';');
         }
     }
 
-    // Workarounds nasgen build that depends on ASM but compiled with
-    // the bootstrap JDK.  Can't reference Class::isIndirectType
-    static class Helper {
-        static final Method isIndirectTypeMethod = isIndirectTypeMethod();
-        static Method isIndirectTypeMethod() {
-            try {
-                return Class.class.getMethod("isIndirectType");
-            } catch (NoSuchMethodException e) {
-                return null;
-            }
-        }
-
-        static boolean isIndirectType(Class<?> clazz) {
-            int mods = clazz.getModifiers();
-            if ((mods & 0x00000100) != 0) {            // inline class
-                assert isIndirectTypeMethod != null;
-                try {
-                    return (boolean) isIndirectTypeMethod.invoke(clazz);
-                } catch (InvocationTargetException e) {
-                    throw new InternalError(e.getCause());
-                } catch (IllegalAccessException e) {
-                    throw new InternalError(e);
-                }
-            }
-            return true;
-        }
+    static boolean isInlineClass(Class<?> clazz) {
+        int mods = clazz.getModifiers();
+        return (mods & 0x00000100) != 0;
     }
 
     // -----------------------------------------------------------------------------------------------
     // Methods to get the sort, dimension, size, and opcodes corresponding to a Type or descriptor.
     // -----------------------------------------------------------------------------------------------
