diff a/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java b/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
--- a/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
+++ b/src/java.base/share/classes/java/lang/invoke/ValueBootstrapMethods.java
@@ -169,11 +169,11 @@
         /*
          * Produces a MethodHandle that returns boolean if two value instances
          * of the given inline class are substitutable.
          */
         static MethodHandle inlineTypeEquals(Class<?> type) {
-            assert type.isInlineClass() && !type.isIndirectType();
+            assert type.isInlineClass();
             MethodType mt = methodType(boolean.class, type, type);
             MethodHandles.Lookup lookup = new MethodHandles.Lookup(type);
             MethodHandle[] getters = getters(lookup, TYPE_SORTER);
             MethodHandle instanceTrue = dropArguments(TRUE, 0, type, Object.class).asType(mt);
             MethodHandle instanceFalse = dropArguments(FALSE, 0, type, Object.class).asType(mt);
@@ -598,11 +598,11 @@
     }
 
     // store the method handle for value types in ClassValue
     private static ClassValue<MethodHandle> SUBST_TEST_METHOD_HANDLES = new ClassValue<>() {
         @Override protected MethodHandle computeValue(Class<?> type) {
-            return MethodHandleBuilder.inlineTypeEquals(type.asPrimaryType());
+            return MethodHandleBuilder.inlineTypeEquals(type);
         }
     };
 
     private static final Comparator<MethodHandle> TYPE_SORTER = (mh1, mh2) -> {
         // sort the getters with the return type
