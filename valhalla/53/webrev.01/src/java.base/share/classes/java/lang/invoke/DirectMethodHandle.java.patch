diff a/src/java.base/share/classes/java/lang/invoke/DirectMethodHandle.java b/src/java.base/share/classes/java/lang/invoke/DirectMethodHandle.java
--- a/src/java.base/share/classes/java/lang/invoke/DirectMethodHandle.java
+++ b/src/java.base/share/classes/java/lang/invoke/DirectMethodHandle.java
@@ -76,11 +76,11 @@
     static DirectMethodHandle make(byte refKind, Class<?> refc, MemberName member, Class<?> callerClass) {
         MethodType mtype = member.getMethodOrFieldType();
         if (!member.isStatic()) {
             if (!member.getDeclaringClass().isAssignableFrom(refc) || member.isObjectConstructor())
                 throw new InternalError(member.toString());
-            mtype = mtype.insertParameterTypes(0, refc.asPrimaryType());
+            mtype = mtype.insertParameterTypes(0, refc);
         }
         if (!member.isField()) {
             // refKind reflects the original type of lookup via findSpecial or
             // findVirtual etc.
             switch (refKind) {
@@ -598,11 +598,11 @@
             super(mtype, form, member, staticBase, staticOffset);
         }
 
         // zero-default inline type is not-nullable
         @Override Object checkCast(Object obj) {
-            assert !fieldType.isNullableType() : "null-default inline type not yet supported";
+            assert fieldType.isInlineClass() : "null-default inline type not yet supported";
             return fieldType.cast(Objects.requireNonNull(obj));
         }
         @Override
         MethodHandle copyWith(MethodType mt, LambdaForm lf) {
             return new InlineStaticAccessor(mt, lf, member, staticBase, staticOffset);
