diff a/src/java.base/share/classes/java/lang/Class.java b/src/java.base/share/classes/java/lang/Class.java
--- a/src/java.base/share/classes/java/lang/Class.java
+++ b/src/java.base/share/classes/java/lang/Class.java
@@ -161,11 +161,11 @@
                               TypeDescriptor.OfField<Class<?>>,
                               Constable {
     private static final int ANNOTATION = 0x00002000;
     private static final int ENUM       = 0x00004000;
     private static final int SYNTHETIC  = 0x00001000;
-    private static final int VALUE_TYPE = 0x00000100;
+    private static final int INLINE     = 0x00000100;
 
     private static native void registerNatives();
     static {
         registerNatives();
     }
@@ -195,11 +195,11 @@
      * @return a string representation of this {@code Class} object.
      */
     public String toString() {
         return (isInlineClass() ? "inline " : "")
                + (isInterface() ? "interface " : (isPrimitive() ? "" : "class "))
-               + getName() + (isInlineClass() && isIndirectType() ? "?" : "");
+               + getName();
     }
 
     /**
      * Returns a string describing this {@code Class}, including
      * information about modifiers and type parameters.
@@ -517,92 +517,53 @@
     }
 
     /**
      * Returns {@code true} if this class is an inline class.
      *
-     * @return {@code true} if this class is an inline class.
+     * @return {@code true} if this class is an inline class
+     * @since Valhalla
      */
     public boolean isInlineClass() {
-        return (this.getModifiers() & VALUE_TYPE) != 0;
+        return (this.getModifiers() & INLINE) != 0;
     }
 
     /**
-     * Returns a {@code Class} object representing the primary type of
-     * this class.
-     *
-     * <p> For class {@code C}, {@code C.class} is the primary type of {@code C}.
-     * For a primitive type, the {@code Class} instance representing
-     * that primitive type is its primary type, for example {@code int.class}.
-     *
-     * @return the {@code Class} object representing the primary type of
-     *         this class
+     * Returns a {@code Class} object representing the <em>value projection</em>
+     * type of this class if this {@code Class} is the reference projection type
+     * of an {@linkplain #isInlineClass() inline class}.  Otherwise an empty
+     * {@link Optional} is returned.
+     *
+     * @return the {@code Class} object representing the value projection type of
+     *         this class if this class is the reference projection type of an
+     *         inline class; an empty {@link Optional} otherwise
+     * @since Valhalla
      */
-    public Class<T> asPrimaryType() {
-        return isInlineClass() ? inlineType : this;
+    public Optional<Class<T>> valueType() {
+        return Optional.ofNullable(valType);
     }
 
     /**
-     * Returns a {@code Class} object representing the <em>indirect projection</em>
-     * type if this class is an {@linkplain #isInlineClass() inline class};
-     * otherwise, returns this class.
-     *
-     * <p> An inline class, {@code V}, has two {@code Class} representations,
-     * {@code V.class} and its {@linkplain #asIndirectType() indirect projection
-     * type}.  The indirect projection type is always
-     * {@linkplain #isNullableType() nullable}.
-     * The indirect projection type of a zero-default inline class
-     * is also its nullable projection type.
-     *
-     * @return the {@code Class} object representing the indirect projection type of
-     *         this class if this class is an inline class; otherwise, this class.
+     * Returns a {@code Class} object representing the <em>reference projection</em>
+     * type of this class if this class is an {@linkplain #isInlineClass() inline class}
+     * with a reference projection.
+     * If this class is an {@linkplain #isInlineClass() inline class}
+     * without a reference projection or this class is not an inline class,
+     * then this method returns an empty {@link Optional}.
+     *
+     * @return the {@code Class} object representing the value projection type of
+     *         this class if this class is the reference projection type of an
+     *         inline class; an empty {@link Optional} otherwise
+     * @since Valhalla
      */
-    public Class<T> asIndirectType() {
-        return isInlineClass() ? indirectType : this;
-    }
-
-    /**
-     * Returns a {@code Class} object representing the <em>nullable projection</em>
-     * type if this class is an {@linkplain #isInlineClass() inline class};
-     * otherwise, returns this class.
-     *
-     * <p> An inline class, {@code V}, has two {@code Class} representations,
-     * {@code V.class} and its {@linkplain #asIndirectType() indirect projection
-     * type}.  The indirect projection type is always
-     * {@linkplain #isNullableType() nullable}.
-     * The indirect projection type of a zero-default inline class
-     * is also its nullable projection type.
-     *
-     * @return the {@code Class} object representing the nullable projection type of
-     *         this class if this class is an inline class; otherwise, this class.
-     */
-    public Class<T> asNullableType() {
-        return asIndirectType();
-    }
-
-    /**
-     * Returns {@code true} if this class is an indirect type.
-     * An indirect type is always {@linkplain #isNullableType() nullable}.
-     *
-     * @return {@code true} if this class is an indirect type.
-     */
-    public boolean isIndirectType() {
-        return indirectType == null || this == indirectType;
-    }
-
-    /**
-     * Returns {@code true} if this class is a nullable type.
-     *
-     * @return {@code true} if this class is a nullable type.
-     */
-    public boolean isNullableType() {
-        return isIndirectType();
+    public Optional<Class<T>> referenceType() {
+        return valType != null ? Optional.ofNullable(refType) : Optional.of(this);
     }
 
     // set by VM if this class is an inline type
     // otherwise, these two fields are null
-    private transient Class<T> inlineType;
-    private transient Class<T> indirectType;
+    private transient Class<T> valType;
+    private transient Class<T> refType;
 
     /**
      * Creates a new instance of the class represented by this {@code Class}
      * object.  The class is instantiated as if by a {@code new}
      * expression with an empty argument list.  The class is initialized if it
@@ -874,11 +835,11 @@
      * <tr><th scope="row"> boolean      <td style="text-align:center"> Z
      * <tr><th scope="row"> byte         <td style="text-align:center"> B
      * <tr><th scope="row"> char         <td style="text-align:center"> C
      * <tr><th scope="row"> class or interface
      *                                   <td style="text-align:center"> L<i>classname</i>;
-     * <tr><th scope="row"> non-nullable {@linkplain #isInlineClass() inline class}
+     * <tr><th scope="row"> {@linkplain #isInlineClass() inline class}
      *                                   <td style="text-align:center"> Q<i>classname</i>;
      * <tr><th scope="row"> double       <td style="text-align:center"> D
      * <tr><th scope="row"> float        <td style="text-align:center"> F
      * <tr><th scope="row"> int          <td style="text-align:center"> I
      * <tr><th scope="row"> long         <td style="text-align:center"> J
@@ -899,12 +860,12 @@
      *     returns "Point"
      * (new Object[3]).getClass().getName()
      *     returns "[Ljava.lang.Object;"
      * (new Point[3]).getClass().getName()
      *     returns "[QPoint;"
-     * (new Point?[3][4]).getClass().getName()
-     *     returns "[[LPoint;"
+     * (new Point.ref[3][4]).getClass().getName()
+     *     returns "[[LPoint$ref;"
      * (new int[3][4][5][6][7][8][9]).getClass().getName()
      *     returns "[[[[[[[I"
      * </pre></blockquote>
      *
      * @return  the name of the class or interface
@@ -1319,24 +1280,16 @@
      * @return  the signers of this class, or null if there are no signers.  In
      *          particular, this method returns null if this {@code Class} object represents
      *          a primitive type or void.
      * @since   1.1
      */
-    public Object[] getSigners() {
-        return asPrimaryType().getSigners0();
-    }
-
-    private native Object[] getSigners0();
+    public native Object[] getSigners();
 
     /**
      * Set the signers of this class.
      */
-    void setSigners(Object[] signers) {
-        asPrimaryType().setSigners0(signers);
-    }
-
-    native void setSigners0(Object[] signers);
+    native void setSigners(Object[] signers);
 
 
     /**
      * If this {@code Class} object represents a local or anonymous
      * class within a method, returns a {@link
@@ -1691,11 +1644,11 @@
         String simpleName = getSimpleBinaryName();
         if (simpleName == null) { // top level class
             simpleName = getName();
             simpleName = simpleName.substring(simpleName.lastIndexOf('.') + 1); // strip the package name
         }
-        return isInlineClass() && isIndirectType() ? simpleName + "?" : simpleName;
+        return simpleName;
     }
 
     /**
      * Return an informative string for the name of this type.
      *
@@ -1712,11 +1665,11 @@
                     cl = cl.getComponentType();
                 } while (cl.isArray());
                 return cl.getTypeName() + "[]".repeat(dimensions);
             } catch (Throwable e) { /*FALLTHRU*/ }
         }
-        return toTypeName();
+        return getName();
     }
 
     /**
      * Returns the canonical name of the underlying class as defined
      * by <cite>The Java&trade; Language Specification</cite>, section
@@ -3606,22 +3559,14 @@
     private String methodToString(String name, Class<?>[] argTypes) {
         return getName() + '.' + name +
                 ((argTypes == null || argTypes.length == 0) ?
                 "()" :
                 Arrays.stream(argTypes)
-                        .map(c -> c == null ? "null" : c.toTypeName())
+                        .map(c -> c == null ? "null" : c.getName())
                         .collect(Collectors.joining(",", "(", ")")));
     }
 
-    /*
-     * Returns the class name appended with "?" if it is the nullable projection
-     * of an inline class.
-     */
-    private String toTypeName() {
-        return isInlineClass() && isIndirectType() ? getName() + "?" : getName();
-    }
-
     /** use serialVersionUID from JDK 1.1 for interoperability */
     @java.io.Serial
     private static final long serialVersionUID = 3206093459760846163L;
 
 
@@ -3843,19 +3788,19 @@
      * @param obj the object to be cast
      * @return the object after casting, or null if obj is null
      *
      * @throws ClassCastException if the object is not
      * {@code null} and is not assignable to the type T.
-     * @throws NullPointerException if this is not a {@linkplain #isNullableType()
-     * nullable type} and the object is {@code null}
+     * @throws NullPointerException if this is an {@linkplain #isInlineClass()
+     * inline type} and the object is {@code null}
      *
      * @since 1.5
      */
     @SuppressWarnings("unchecked")
     @HotSpotIntrinsicCandidate
     public T cast(Object obj) {
-        if (!isNullableType() && obj == null)
+        if (isInlineClass() && obj == null)
             throw new NullPointerException(getName() + " is an inline class");
 
         if (obj != null && !isInstance(obj))
             throw new ClassCastException(cannotCastMsg(obj));
         return (T) obj;
@@ -4329,11 +4274,12 @@
             return Wrapper.forPrimitiveType(this).basicTypeString();
         else if (isArray()) {
             return "[" + componentType.descriptorString();
         }
         else {
-            return "L" + getName().replace('.', '/') + ";";
+            return (isInlineClass() ? "Q" : "L")
+                    + getName().replace('.', '/') + ";";
         }
     }
 
     /**
      * Returns the component type of this {@code Class}, if it describes
