diff a/src/hotspot/share/classfile/javaClasses.cpp b/src/hotspot/share/classfile/javaClasses.cpp
--- a/src/hotspot/share/classfile/javaClasses.cpp
+++ b/src/hotspot/share/classfile/javaClasses.cpp
@@ -955,27 +955,19 @@
     if (k->is_array_klass()) {
       if (k->is_valueArray_klass()) {
         Klass* element_klass = (Klass*) ValueArrayKlass::cast(k)->element_klass();
         assert(element_klass->is_value(), "Must be value type component");
         ValueKlass* vk = ValueKlass::cast(InstanceKlass::cast(element_klass));
-        comp_mirror = Handle(THREAD, vk->value_mirror());
+        comp_mirror = Handle(THREAD, vk->java_mirror());
       } else if (k->is_typeArray_klass()) {
         BasicType type = TypeArrayKlass::cast(k)->element_type();
         comp_mirror = Handle(THREAD, Universe::java_mirror(type));
       } else {
         assert(k->is_objArray_klass(), "Must be");
         Klass* element_klass = ObjArrayKlass::cast(k)->element_klass();
         assert(element_klass != NULL, "Must have an element klass");
-        if (element_klass->is_value()) {
-          ValueKlass* vk = ValueKlass::cast(InstanceKlass::cast(element_klass));
-          assert(vk->java_mirror() == vk->value_mirror(), "primary mirror is the value mirror");
-          assert(vk->indirect_mirror() != NULL, "must have an indirect class mirror");
-          comp_mirror = k->name()->is_Q_array_signature() ? Handle(THREAD, vk->value_mirror())
-                                                          : Handle(THREAD, vk->indirect_mirror());
-        } else {
-          comp_mirror = Handle(THREAD, element_klass->java_mirror());
-        }
+        comp_mirror = Handle(THREAD, element_klass->java_mirror());
       }
       assert(comp_mirror() != NULL, "must have a mirror");
 
       // Two-way link between the array klass and its component mirror:
       // (array_klass) k -> mirror -> component_mirror -> array_klass -> k
@@ -1013,43 +1005,31 @@
       // concurrently doesn't expect a k to have a null java_mirror.
       release_set_array_klass(comp_mirror(), k);
     }
 
     if (k->is_value()) {
-      // create the secondary mirror for an inline class
-      oop indirect_mirror_oop = create_indirect_type_mirror(k, mirror, CHECK);
-      set_inline_type_mirror(mirror(), mirror());
-      set_indirect_type_mirror(mirror(), indirect_mirror_oop);
+      InstanceKlass* super = k->java_super();
+      set_val_type_mirror(mirror(), mirror());
+
+      // if the supertype is a restricted abstract class
+      if (super != SystemDictionary::Object_klass()) {
+        assert(super->access_flags().is_abstract(), "must be an abstract class");
+        oop ref_type_oop = super->java_mirror();
+        // set the reference projection type
+        set_ref_type_mirror(mirror(), ref_type_oop);
+
+        // set the value and reference projection types
+        set_val_type_mirror(ref_type_oop, mirror());
+        set_ref_type_mirror(ref_type_oop, ref_type_oop);
+      }
     }
   } else {
     assert(fixup_mirror_list() != NULL, "fixup_mirror_list not initialized");
     fixup_mirror_list()->push(k);
   }
 }
 
-// Create the secondary mirror for inline class. Sets all the fields of this java.lang.Class
-// instance with the same value as the primary mirror
-oop java_lang_Class::create_indirect_type_mirror(Klass* k, Handle mirror, TRAPS) {
-  assert(k->is_value(), "inline class");
-  // Allocate mirror (java.lang.Class instance)
-  oop mirror_oop = InstanceMirrorKlass::cast(SystemDictionary::Class_klass())->allocate_instance(k, CHECK_0);
-  Handle indirect_mirror(THREAD, mirror_oop);
-
-  java_lang_Class::set_klass(indirect_mirror(), k);
-  java_lang_Class::set_static_oop_field_count(indirect_mirror(), static_oop_field_count(mirror()));
-  // ## do we need to set init lock?
-  java_lang_Class::set_init_lock(indirect_mirror(), init_lock(mirror()));
-
-  set_protection_domain(indirect_mirror(), protection_domain(mirror()));
-  set_class_loader(indirect_mirror(), class_loader(mirror()));
-  // ## handle if java.base is not yet defined
-  set_module(indirect_mirror(), module(mirror()));
-  set_inline_type_mirror(indirect_mirror(), mirror());
-  set_indirect_type_mirror(indirect_mirror(), indirect_mirror());
-  return indirect_mirror();
-}
-
 #if INCLUDE_CDS_JAVA_HEAP
 // Clears mirror fields. Static final fields with initial values are reloaded
 // from constant pool. The object identity hash is in the object header and is
 // not affected.
 class ResetMirrorField: public FieldClosure {
@@ -1197,11 +1177,11 @@
       return NULL;
     }
   }
 
   if (k->is_value()) {
-    // Values have a mirror and an indirect mirror. Don't handle this for now. TODO:CDS
+    // Values have a val type mirror and a ref type mirror. Don't handle this for now. TODO:CDS
     k->set_java_mirror_handle(NULL);
     return NULL;
   }
 
   // Now start archiving the mirror object
@@ -1486,28 +1466,28 @@
 void java_lang_Class::set_source_file(oop java_class, oop source_file) {
   assert(_source_file_offset != 0, "must be set");
   java_class->obj_field_put(_source_file_offset, source_file);
 }
 
-oop java_lang_Class::inline_type_mirror(oop java_class) {
-  assert(_inline_mirror_offset != 0, "must be set");
-  return java_class->obj_field(_inline_mirror_offset);
+oop java_lang_Class::val_type_mirror(oop java_class) {
+  assert(_val_type_mirror_offset != 0, "must be set");
+  return java_class->obj_field(_val_type_mirror_offset);
 }
 
-void java_lang_Class::set_inline_type_mirror(oop java_class, oop mirror) {
-  assert(_inline_mirror_offset != 0, "must be set");
-  java_class->obj_field_put(_inline_mirror_offset, mirror);
+void java_lang_Class::set_val_type_mirror(oop java_class, oop mirror) {
+  assert(_val_type_mirror_offset != 0, "must be set");
+  java_class->obj_field_put(_val_type_mirror_offset, mirror);
 }
 
-oop java_lang_Class::indirect_type_mirror(oop java_class) {
-  assert(_indirect_mirror_offset != 0, "must be set");
-  return java_class->obj_field(_indirect_mirror_offset);
+oop java_lang_Class::ref_type_mirror(oop java_class) {
+  assert(_ref_type_mirror_offset != 0, "must be set");
+  return java_class->obj_field(_ref_type_mirror_offset);
 }
 
-void java_lang_Class::set_indirect_type_mirror(oop java_class, oop mirror) {
-  assert(_indirect_mirror_offset != 0, "must be set");
-  java_class->obj_field_put(_indirect_mirror_offset, mirror);
+void java_lang_Class::set_ref_type_mirror(oop java_class, oop mirror) {
+  assert(_ref_type_mirror_offset != 0, "must be set");
+  java_class->obj_field_put(_ref_type_mirror_offset, mirror);
 }
 
 oop java_lang_Class::create_basic_type_mirror(const char* basic_type_name, BasicType type, TRAPS) {
   // This should be improved by adding a field at the Java level or by
   // introducing a new VM klass (see comment in ClassFileParser)
@@ -1564,11 +1544,11 @@
   if (name == NULL) {
     st->print("<null>");
     return;
   }
   if (is_instance)  {
-    if (is_value && (java_class == inline_type_mirror(java_class))) {
+    if (is_value) {
       st->print("Q");
     } else {
       st->print("L");
     }
   }
@@ -1590,18 +1570,11 @@
     if (!k->is_instance_klass()) {
       name = k->name();
       name->increment_refcount();
     } else {
       ResourceMark rm;
-      const char* sigstr;
-      if (k->is_value()) {
-        char c = (java_class == inline_type_mirror(java_class)) ?
-          JVM_SIGNATURE_VALUETYPE : JVM_SIGNATURE_CLASS;
-        sigstr = InstanceKlass::cast(k)->signature_name_of(c);
-      } else {
-        sigstr = k->signature_name();
-      }
+      const char* sigstr = k->signature_name();
       int siglen = (int) strlen(sigstr);
       if (!intern_if_not_found) {
         name = SymbolTable::probe(sigstr, siglen);
       } else {
         name = SymbolTable::new_symbol(sigstr, siglen);
@@ -1683,12 +1656,12 @@
   macro(classRedefinedCount_offset, k, "classRedefinedCount", int_signature,         false); \
   macro(_class_loader_offset,       k, "classLoader",         classloader_signature, false); \
   macro(_component_mirror_offset,   k, "componentType",       class_signature,       false); \
   macro(_module_offset,             k, "module",              module_signature,      false); \
   macro(_name_offset,               k, "name",                string_signature,      false); \
-  macro(_inline_mirror_offset,      k, "inlineType",          class_signature,       false); \
-  macro(_indirect_mirror_offset,    k, "indirectType",        class_signature,       false); \
+  macro(_val_type_mirror_offset,    k, "valType",             class_signature,       false); \
+  macro(_ref_type_mirror_offset,    k, "refType",             class_signature,       false); \
 
 void java_lang_Class::compute_offsets() {
   if (offsets_computed) {
     return;
   }
@@ -4349,12 +4322,12 @@
 int java_lang_Class::_static_oop_field_count_offset;
 int java_lang_Class::_class_loader_offset;
 int java_lang_Class::_module_offset;
 int java_lang_Class::_protection_domain_offset;
 int java_lang_Class::_component_mirror_offset;
-int java_lang_Class::_inline_mirror_offset;
-int java_lang_Class::_indirect_mirror_offset;
+int java_lang_Class::_val_type_mirror_offset;
+int java_lang_Class::_ref_type_mirror_offset;
 int java_lang_Class::_init_lock_offset;
 int java_lang_Class::_signers_offset;
 int java_lang_Class::_name_offset;
 int java_lang_Class::_source_file_offset;
 GrowableArray<Klass*>* java_lang_Class::_fixup_mirror_list = NULL;
