diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java
@@ -48,11 +48,11 @@
             CompLevel_simple            = 1,         // C1
             CompLevel_limited_profile   = 2,         // C1, invocation & backedge counters
             CompLevel_full_profile      = 3,         // C1, invocation & backedge counters + mdo
             CompLevel_full_optimization = 4;         // C2 or JVMCI
 
-        if (USE_COMPILER && !XCOMP && WHITE_BOX.isMethodCompiled(m, false) &&
+        if (USE_COMPILER && !XCOMP && !STRESS_CC && WHITE_BOX.isMethodCompiled(m, false) &&
             WHITE_BOX.getMethodCompilationLevel(m, false) >= CompLevel_full_optimization) {
             throw new RuntimeException("Type check should have caused it to deoptimize");
         }
     }
 
@@ -875,11 +875,11 @@
 
     static boolean compile_and_run_again_if_deoptimized(boolean warmup, String test) {
         if (!warmup) {
             Method m = tests.get(test);
             if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false)) {
-                if (!ValueTypeArrayFlatten && !XCOMP) {
+                if (!ValueTypeArrayFlatten && !XCOMP && !STRESS_CC) {
                     throw new RuntimeException("Unexpected deoptimization");
                 }
                 enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);
                 return true;
             }
@@ -971,11 +971,11 @@
             Method m = tests.get("TestArrays::test38");
             assertDeoptimizedByC2(m);
             enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);
             test38(src, dst);
             verify(dst, src);
-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP) {
+            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {
                 throw new RuntimeException("unexpected deoptimization");
             }
         }
     }
 
@@ -1020,11 +1020,11 @@
             Method m = tests.get("TestArrays::test40");
             assertDeoptimizedByC2(m);
             enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);
             test40(src, dst);
             verify(dst, src);
-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP) {
+            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {
                 throw new RuntimeException("unexpected deoptimization");
             }
         }
     }
 
@@ -1064,11 +1064,11 @@
         }
         test42(src, dst);
         verify(src, dst);
         if (!warmup) {
             Method m = tests.get("TestArrays::test42");
-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP) {
+            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {
                 throw new RuntimeException("unexpected deoptimization");
             }
         }
     }
 
@@ -1152,11 +1152,11 @@
             Method m = tests.get("TestArrays::test46");
             assertDeoptimizedByC2(m);
             enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);
             test46(src, dst);
             verify(dst, src);
-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP) {
+            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {
                 throw new RuntimeException("unexpected deoptimization");
             }
         }
     }
 
@@ -1199,11 +1199,11 @@
             Method m = tests.get("TestArrays::test48");
             assertDeoptimizedByC2(m);
             enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);
             test48(src, dst);
             verify(dst, src);
-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP) {
+            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {
                 throw new RuntimeException("unexpected deoptimization");
             }
         }
     }
 
@@ -1241,11 +1241,11 @@
         }
         test50(src, dst);
         verify(src, dst);
         if (!warmup) {
             Method m = tests.get("TestArrays::test50");
-            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP) {
+            if (USE_COMPILER && !WHITE_BOX.isMethodCompiled(m, false) && !XCOMP && !STRESS_CC) {
                 throw new RuntimeException("unexpected deoptimization");
             }
         }
     }
 
