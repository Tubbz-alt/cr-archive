diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/ValueTypeTest.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/ValueTypeTest.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/ValueTypeTest.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/ValueTypeTest.java
@@ -140,10 +140,11 @@
     private static final int WARMUP = Integer.parseInt(System.getProperty("Warmup", "251"));
     private static final boolean DUMP_REPLAY = Boolean.parseBoolean(System.getProperty("DumpReplay", "false"));
     private static final boolean FLIP_C1_C2 = Boolean.parseBoolean(System.getProperty("FlipC1C2", "false"));
     private static final boolean GC_AFTER = Boolean.parseBoolean(System.getProperty("GCAfter", "false"));
     private static final int OSR_TEST_TIMEOUT = Integer.parseInt(System.getProperty("OSRTestTimeOut", "5000"));
+    protected static final boolean STRESS_CC = Boolean.parseBoolean(System.getProperty("StressCC", "false"));
 
     // "jtreg -DXcomp=true" runs all the scenarios with -Xcomp. This is faster than "jtreg -javaoptions:-Xcomp".
     protected static final boolean RUN_SCENARIOS_WITH_XCOMP = Boolean.parseBoolean(System.getProperty("Xcomp", "false"));
 
     // Pre-defined settings
@@ -623,10 +624,17 @@
             }
             if (m.isAnnotationPresent(DontInline.class)) {
                 Asserts.assertFalse(m.isAnnotationPresent(ForceInline.class), "Method " + m.getName() + " has contradicting ForceInline annotation");
                 WHITE_BOX.testSetDontInlineMethod(m, true);
             }
+            if (STRESS_CC) {
+                // Exclude some methods from compilation with C2 to stress test the calling convention
+                if (Utils.getRandomInstance().nextBoolean()) {
+                    System.out.println("Excluding from C2 compilation: " + m);
+                    WHITE_BOX.makeMethodNotCompilable(m, COMP_LEVEL_FULL_OPTIMIZATION, false);
+                }
+            }
         }
         // Only force compilation now because above annotations affect inlining
         for (Method m : methods) {
             if (m.isAnnotationPresent(ForceCompile.class)) {
                 Asserts.assertFalse(m.isAnnotationPresent(DontCompile.class), "Method " + m.getName() + " has contradicting DontCompile annotation");
@@ -638,11 +646,11 @@
         int compLevel = getCompLevel(null);
         WHITE_BOX.enqueueInitializerForCompilation(clazz, compLevel);
     }
 
     private void run(Class<?>... classes) throws Exception {
-        if (USE_COMPILER && PRINT_IDEAL && !XCOMP) {
+        if (USE_COMPILER && PRINT_IDEAL && !XCOMP && !STRESS_CC) {
             System.out.println("PrintIdeal enabled");
         }
         System.out.format("rI = %d, rL = %d\n", rI, rL);
 
         setup(getClass());
@@ -699,19 +707,17 @@
 
                     boolean b = WHITE_BOX.isMethodCompiled(test, false);
                     if (VERBOSE) {
                         System.out.println("Is " + test.getName() + " compiled? " + b);
                     }
-                    if (b || XCOMP || !USE_COMPILER) {
+                    if (b || XCOMP || STRESS_CC || !USE_COMPILER) {
                         // Don't control compilation if -Xcomp is enabled, or if compiler is disabled
                         break;
                     }
                     Asserts.assertTrue(OSR_TEST_TIMEOUT < 0 || elapsed < OSR_TEST_TIMEOUT, test + " not compiled after " + OSR_TEST_TIMEOUT + " ms");
                 }
-                if (!XCOMP) {
-                    Asserts.assertTrue(!USE_COMPILER || WHITE_BOX.isMethodCompiled(test, false), test + " not compiled");
-                }
+                Asserts.assertTrue(XCOMP || STRESS_CC || !USE_COMPILER || WHITE_BOX.isMethodCompiled(test, false), test + " not compiled");
             } else {
                 int compLevel = getCompLevel(test.getAnnotation(Test.class));
                 // Trigger compilation
                 enqueueMethodForCompilation(test, compLevel);
                 if (maybeCodeBufferOverflow && !WHITE_BOX.isMethodCompiled(test, false)) {
@@ -719,11 +725,11 @@
                     WHITE_BOX.setBooleanVMFlag("VerifyOops", false);
                     WHITE_BOX.clearMethodState(test);
                     enqueueMethodForCompilation(test, compLevel);
                     WHITE_BOX.setBooleanVMFlag("VerifyOops", true);
                 }
-                Asserts.assertTrue(!USE_COMPILER || WHITE_BOX.isMethodCompiled(test, false), test + " not compiled");
+                Asserts.assertTrue(STRESS_CC || !USE_COMPILER || WHITE_BOX.isMethodCompiled(test, false), test + " not compiled");
                 // Check result
                 verifier.invoke(this, false);
             }
             if (PRINT_TIMES || VERBOSE) {
                 long endTime = System.nanoTime();
