diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java
@@ -785,11 +785,11 @@
             va[i] = MyValue1.createWithFieldsInline(rI, rL);
         }
         Object[] result = test33(va);
         for (int i = 0; i < len; ++i) {
             Asserts.assertEQ(((MyValue1)result[i]).hash(), ((MyValue1)va[i]).hash());
-            // Check that array has correct storage properties (null-ok)
+            // Check that array has correct properties (null-ok)
             result[i] = null;
         }
     }
 
     // clone() as series of loads/stores
@@ -820,22 +820,22 @@
     public void test34_verifier(boolean warmup) {
         test34(false);
         for (int i = 0; i < 10; i++) { // make sure we do deopt
             Object[] result = test34(true);
             verify(test34_orig, result);
-            // Check that array has correct storage properties (null-free)
+            // Check that array has correct properties (null-free)
             try {
                 result[0] = null;
                 throw new RuntimeException("Should throw NullPointerException");
             } catch (NullPointerException e) {
                 // Expected
             }
         }
         if (compile_and_run_again_if_deoptimized(warmup, "TestArrays::test34")) {
             Object[] result = test34(true);
             verify(test34_orig, result);
-            // Check that array has correct storage properties (null-free)
+            // Check that array has correct properties (null-free)
             try {
                 result[0] = null;
                 throw new RuntimeException("Should throw NullPointerException");
             } catch (NullPointerException e) {
                 // Expected
@@ -1748,11 +1748,11 @@
         test75_helper(42, va, oa);
         Object[] result = test75(va, oa);
 
         for (int i = 0; i < va.length; ++i) {
             Asserts.assertEQ(oa[i], result[i]);
-            // Check that array has correct storage properties (null-ok)
+            // Check that array has correct properties (null-ok)
             result[i] = null;
         }
     }
 
     @ForceInline
@@ -1786,11 +1786,11 @@
         }
         Integer[] oa = new Integer[len];
         test76_helper(42, va, oa);
         Object[] result = test76(va, oa);
         verify(verif, result);
-        // Check that array has correct storage properties (null-free)
+        // Check that array has correct properties (null-free)
         if (len > 0) {
             try {
                 result[0] = null;
                 throw new RuntimeException("Should throw NullPointerException");
             } catch (NullPointerException e) {
