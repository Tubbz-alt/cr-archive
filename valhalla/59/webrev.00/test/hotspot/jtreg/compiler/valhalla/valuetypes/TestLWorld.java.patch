diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestLWorld.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestLWorld.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestLWorld.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestLWorld.java
@@ -2359,26 +2359,22 @@
                                 () -> { test88(src1, dst1, src2, dst2);
                                         Asserts.assertTrue(Arrays.equals(src1, dst1));
                                         Asserts.assertTrue(Arrays.equals(src2, dst2)); });
     }
 
-    // Verify that the storage property bits in the klass pointer are
-    // not cleared if we are comparing to a klass that can't be a inline
-    // type array klass anyway.
-    @Test(failOn = STORAGE_PROPERTY_CLEARING)
+    @Test
     public boolean test89(Object obj) {
         return obj.getClass() == Integer.class;
     }
 
     @DontCompile
     public void test89_verifier(boolean warmup) {
         Asserts.assertTrue(test89(new Integer(42)));
         Asserts.assertFalse(test89(new Object()));
     }
 
-    // Same as test89 but with a cast
-    @Test(failOn = STORAGE_PROPERTY_CLEARING)
+    @Test
     public Integer test90(Object obj) {
         return (Integer)obj;
     }
 
     @DontCompile
@@ -2390,13 +2386,11 @@
         } catch (ClassCastException e) {
             // Expected
         }
     }
 
-    // Same as test89 but bit clearing can not be removed because
-    // we are comparing to a inline type array klass.
-    @Test(match = {STORAGE_PROPERTY_CLEARING}, matchCount = { 1 })
+    @Test
     public boolean test91(Object obj) {
         return obj.getClass() == MyValue2[].class;
     }
 
     @DontCompile
@@ -2496,14 +2490,12 @@
         array[3] = 0x42;
         int result = test94(array);
         Asserts.assertEquals(result, 0x42 * 2);
     }
 
-    // Test that no code for clearing the array klass property bits is emitted for acmp
-    // because when loading the klass, we already know that the operand is a value type.
     @Warmup(10000)
-    @Test(failOn = STORAGE_PROPERTY_CLEARING)
+    @Test
     public boolean test95(Object o1, Object o2) {
         return o1 == o2;
     }
 
     @DontCompile
@@ -2514,13 +2506,12 @@
         Asserts.assertTrue(test95(null, null));
         Asserts.assertFalse(test95(o1, null));
         Asserts.assertFalse(test95(o1, o2));
     }
 
-    // Same as test95 but operands are never null
     @Warmup(10000)
-    @Test(failOn = STORAGE_PROPERTY_CLEARING)
+    @Test
     public boolean test96(Object o1, Object o2) {
         return o1 == o2;
     }
 
     @DontCompile
