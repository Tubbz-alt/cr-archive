diff a/src/jdk.crypto.ec/share/classes/sun/security/ec/ECDHKeyAgreement.java b/src/jdk.crypto.ec/share/classes/sun/security/ec/ECDHKeyAgreement.java
--- a/src/jdk.crypto.ec/share/classes/sun/security/ec/ECDHKeyAgreement.java
+++ b/src/jdk.crypto.ec/share/classes/sun/security/ec/ECDHKeyAgreement.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -33,11 +33,13 @@
 
 import javax.crypto.*;
 import javax.crypto.spec.*;
 
 import sun.security.util.ArrayUtil;
+import sun.security.util.CurveDB;
 import sun.security.util.ECUtil;
+import sun.security.util.NamedCurve;
 import sun.security.util.math.*;
 import sun.security.ec.point.*;
 
 /**
  * KeyAgreement implementation for ECDH.
@@ -163,15 +165,28 @@
     @Override
     protected byte[] engineGenerateSecret() throws IllegalStateException {
         if ((privateKey == null) || (publicKey == null)) {
             throw new IllegalStateException("Not initialized correctly");
         }
-
+        byte[] result;
         Optional<byte[]> resultOpt = deriveKeyImpl(privateKey, publicKey);
-        byte[] result = resultOpt.orElseGet(
-            () -> deriveKeyNative(privateKey, publicKey)
-        );
+        if (resultOpt.isPresent()) {
+            result = resultOpt.get();
+        } else {
+            if (SunEC.isNativeDisabled()) {
+                NamedCurve privNC = CurveDB.lookup(privateKey.getParams());
+                NamedCurve pubNC = CurveDB.lookup(publicKey.getParams());
+                throw new IllegalStateException(
+                        new InvalidAlgorithmParameterException("Legacy SunEC " +
+                                "curve disabled, one or both keys:  " +
+                                "Private: " + ((privNC != null) ?
+                                privNC.toString() : " unknown") +
+                                ", PublicKey:" + ((pubNC != null) ?
+                                pubNC.toString() : " unknown")));
+            }
+            result = deriveKeyNative(privateKey, publicKey);
+        }
         publicKey = null;
         return result;
     }
 
     // see JCE spec
