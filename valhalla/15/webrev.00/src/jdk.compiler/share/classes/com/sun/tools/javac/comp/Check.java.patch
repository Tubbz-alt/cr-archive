diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
@@ -158,10 +158,13 @@
                 enforceMandatoryWarnings, "unchecked", LintCategory.UNCHECKED);
         sunApiHandler = new MandatoryWarningHandler(log, false,
                 enforceMandatoryWarnings, "sunapi", null);
 
         deferredLintHandler = DeferredLintHandler.instance(context);
+
+        allowRecords = (!preview.isPreview(Feature.RECORDS) || preview.isEnabled()) &&
+                Feature.RECORDS.allowedInSource(source);
     }
 
     /** Character for synthetic names
      */
     char syntheticNameChar;
@@ -189,10 +192,14 @@
 
     /** A handler for deferred lint warnings.
      */
     private DeferredLintHandler deferredLintHandler;
 
+    /** Are records allowed
+     */
+    private final boolean allowRecords;
+
 /* *************************************************************************
  * Errors and Warnings
  **************************************************************************/
 
     Lint setLint(Lint newLint) {
@@ -3347,11 +3354,13 @@
         if (defaultTargets == null) {
             Set<Name> targets = new HashSet<>();
             targets.add(names.ANNOTATION_TYPE);
             targets.add(names.CONSTRUCTOR);
             targets.add(names.FIELD);
-            targets.add(names.RECORD_COMPONENT);
+            if (allowRecords) {
+                targets.add(names.RECORD_COMPONENT);
+            }
             targets.add(names.LOCAL_VARIABLE);
             targets.add(names.METHOD);
             targets.add(names.PACKAGE);
             targets.add(names.PARAMETER);
             targets.add(names.TYPE);
