diff a/src/java.compiler/share/classes/javax/lang/model/util/AbstractTypeVisitor6.java b/src/java.compiler/share/classes/javax/lang/model/util/AbstractTypeVisitor6.java
--- a/src/java.compiler/share/classes/javax/lang/model/util/AbstractTypeVisitor6.java
+++ b/src/java.compiler/share/classes/javax/lang/model/util/AbstractTypeVisitor6.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -33,26 +33,29 @@
 /**
  * A skeletal visitor of types with default behavior appropriate for
  * the {@link javax.lang.model.SourceVersion#RELEASE_6 RELEASE_6}
  * source version.
  *
- * <p> <b>WARNING:</b> The {@code TypeVisitor} interface implemented
- * by this class may have methods added to it in the future to
- * accommodate new, currently unknown, language structures added to
- * future versions of the Java&trade; programming language.
- * Therefore, methods whose names begin with {@code "visit"} may be
- * added to this class in the future; to avoid incompatibilities,
- * classes which extend this class should not declare any instance
- * methods with names beginning with {@code "visit"}.
+ * @apiNote
+ * <p id=note_for_subclasses><strong>WARNING:</strong> The {@code
+ * TypeVisitor} interface implemented by this class may have methods
+ * added to it in the future to accommodate new, currently unknown,
+ * language structures added to future versions of the Java&trade;
+ * programming language.  Therefore, methods whose names begin with
+ * {@code "visit"} may be added to this class in the future; to avoid
+ * incompatibilities, classes and subclasses which extend this class
+ * should not declare any instance methods with names beginning with
+ * {@code "visit"}.
  *
  * <p>When such a new visit method is added, the default
- * implementation in this class will be to call the {@link
- * #visitUnknown visitUnknown} method.  A new abstract type visitor
- * class will also be introduced to correspond to the new language
- * level; this visitor will have different default behavior for the
- * visit method in question.  When the new visitor is introduced, all
- * or portions of this visitor may be deprecated.
+ * implementation in this class will be to directly or indirectly call
+ * the {@link #visitUnknown visitUnknown} method.  A new abstract type
+ * visitor class will also be introduced to correspond to the new
+ * language level; this visitor will have different default behavior
+ * for the visit method in question.  When a new visitor is
+ * introduced, portions of this visitor class may be deprecated,
+ * including its constructors.
  *
  * @param <R> the return type of this visitor's methods.  Use {@link
  *            Void} for visitors that do not need to return results.
  * @param <P> the type of the additional parameter to this visitor's
  *            methods.  Use {@code Void} for visitors that do not need an
