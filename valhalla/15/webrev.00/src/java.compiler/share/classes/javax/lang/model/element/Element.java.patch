diff a/src/java.compiler/share/classes/javax/lang/model/element/Element.java b/src/java.compiler/share/classes/javax/lang/model/element/Element.java
--- a/src/java.compiler/share/classes/javax/lang/model/element/Element.java
+++ b/src/java.compiler/share/classes/javax/lang/model/element/Element.java
@@ -33,11 +33,10 @@
 import java.util.Set;
 
 import javax.lang.model.type.*;
 import javax.lang.model.util.*;
 
-
 /**
  * Represents a program element such as a module, package, class, or method.
  * Each element represents a static, language-level construct
  * (and not, for example, a runtime construct of the virtual machine).
  *
@@ -266,30 +265,47 @@
      * @see #equals
      */
     @Override
     int hashCode();
 
-
     /**
      * {@inheritDoc}
      *
-     * <p> To get inherited annotations as well, use {@link
+     * <p>To get inherited annotations as well, use {@link
      * Elements#getAllAnnotationMirrors(Element)
      * getAllAnnotationMirrors}.
      *
+     * <p>Note that any annotations returned by this method are
+     * declaration annotations.
+     *
      * @since 1.6
      */
     @Override
     List<? extends AnnotationMirror> getAnnotationMirrors();
 
     /**
      * {@inheritDoc}
+     *
+     * <p>Note that any annotation returned by this method is a
+     * declaration annotation.
+     *
      * @since 1.6
      */
     @Override
     <A extends Annotation> A getAnnotation(Class<A> annotationType);
 
+    /**
+     * {@inheritDoc}
+     *
+     * <p>Note that any annotations returned by this method are
+     * declaration annotations.
+     *
+     * @since 8
+     */
+    @Override
+    <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType);
+
     /**
      * Applies a visitor to this element.
      *
      * @param <R> the return type of the visitor's methods
      * @param <P> the type of the additional parameter to the visitor's methods
