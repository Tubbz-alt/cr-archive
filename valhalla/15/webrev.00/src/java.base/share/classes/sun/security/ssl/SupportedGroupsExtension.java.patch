diff a/src/java.base/share/classes/sun/security/ssl/SupportedGroupsExtension.java b/src/java.base/share/classes/sun/security/ssl/SupportedGroupsExtension.java
--- a/src/java.base/share/classes/sun/security/ssl/SupportedGroupsExtension.java
+++ b/src/java.base/share/classes/sun/security/ssl/SupportedGroupsExtension.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -76,25 +76,29 @@
             for (NamedGroup ng : namedGroups) {
                 namedGroupsIds[i++] = ng.id;
             }
         }
 
-        private SupportedGroupsSpec(ByteBuffer m) throws IOException  {
+        private SupportedGroupsSpec(HandshakeContext hc,
+                ByteBuffer m) throws IOException  {
             if (m.remaining() < 2) {      // 2: the length of the list
-                throw new SSLProtocolException(
-                    "Invalid supported_groups extension: insufficient data");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid supported_groups extension: insufficient data"));
             }
 
             byte[] ngs = Record.getBytes16(m);
             if (m.hasRemaining()) {
-                throw new SSLProtocolException(
-                    "Invalid supported_groups extension: unknown extra data");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid supported_groups extension: unknown extra data"));
             }
 
             if ((ngs == null) || (ngs.length == 0) || (ngs.length % 2 != 0)) {
-                throw new SSLProtocolException(
-                    "Invalid supported_groups extension: incomplete data");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid supported_groups extension: incomplete data"));
             }
 
             int[] ids = new int[ngs.length / 2];
             for (int i = 0, j = 0; i < ngs.length;) {
                 ids[j++] = ((ngs[i++] & 0xFF) << 8) | (ngs[i++] & 0xFF);
@@ -136,13 +140,13 @@
     }
 
     private static final
             class SupportedGroupsStringizer implements SSLStringizer {
         @Override
-        public String toString(ByteBuffer buffer) {
+        public String toString(HandshakeContext hc, ByteBuffer buffer) {
             try {
-                return (new SupportedGroupsSpec(buffer)).toString();
+                return (new SupportedGroupsSpec(hc, buffer)).toString();
             } catch (IOException ioe) {
                 // For debug logging only, so please swallow exceptions.
                 return ioe.getMessage();
             }
         }
@@ -412,16 +416,11 @@
                 }
                 return;     // ignore the extension
             }
 
             // Parse the extension.
-            SupportedGroupsSpec spec;
-            try {
-                spec = new SupportedGroupsSpec(buffer);
-            } catch (IOException ioe) {
-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
+            SupportedGroupsSpec spec = new SupportedGroupsSpec(shc, buffer);
 
             // Update the context.
             List<NamedGroup> knownNamedGroups = new LinkedList<>();
             for (int id : spec.namedGroupsIds) {
                 NamedGroup ng = NamedGroup.valueOf(id);
@@ -533,16 +532,11 @@
                 }
                 return;     // ignore the extension
             }
 
             // Parse the extension.
-            SupportedGroupsSpec spec;
-            try {
-                spec = new SupportedGroupsSpec(buffer);
-            } catch (IOException ioe) {
-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
+            SupportedGroupsSpec spec = new SupportedGroupsSpec(chc, buffer);
 
             // Update the context.
             List<NamedGroup> knownNamedGroups =
                     new ArrayList<>(spec.namedGroupsIds.length);
             for (int id : spec.namedGroupsIds) {
