diff a/src/java.base/share/classes/sun/security/ssl/MaxFragExtension.java b/src/java.base/share/classes/sun/security/ssl/MaxFragExtension.java
--- a/src/java.base/share/classes/sun/security/ssl/MaxFragExtension.java
+++ b/src/java.base/share/classes/sun/security/ssl/MaxFragExtension.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -69,14 +69,16 @@
 
         private MaxFragLenSpec(byte id) {
             this.id = id;
         }
 
-        private MaxFragLenSpec(ByteBuffer buffer) throws IOException {
+        private MaxFragLenSpec(HandshakeContext hc,
+                ByteBuffer buffer) throws IOException {
             if (buffer.remaining() != 1) {
-                throw new SSLProtocolException(
-                    "Invalid max_fragment_length extension data");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid max_fragment_length extension data"));
             }
 
             this.id = buffer.get();
         }
 
@@ -86,13 +88,13 @@
         }
     }
 
     private static final class MaxFragLenStringizer implements SSLStringizer {
         @Override
-        public String toString(ByteBuffer buffer) {
+        public String toString(HandshakeContext hc, ByteBuffer buffer) {
             try {
-                return (new MaxFragLenSpec(buffer)).toString();
+                return (new MaxFragLenSpec(hc, buffer)).toString();
             } catch (IOException ioe) {
                 // For debug logging only, so please swallow exceptions.
                 return ioe.getMessage();
             }
         }
@@ -247,17 +249,11 @@
                 }
                 return;     // ignore the extension
             }
 
             // Parse the extension.
-            MaxFragLenSpec spec;
-            try {
-                spec = new MaxFragLenSpec(buffer);
-            } catch (IOException ioe) {
-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
-
+            MaxFragLenSpec spec = new MaxFragLenSpec(shc, buffer);
             MaxFragLenEnum mfle = MaxFragLenEnum.valueOf(spec.id);
             if (mfle == null) {
                 throw shc.conContext.fatal(Alert.ILLEGAL_PARAMETER,
                     "the requested maximum fragment length is other " +
                     "than the allowed values");
@@ -361,17 +357,11 @@
                 throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE,
                     "Unexpected max_fragment_length extension in ServerHello");
             }
 
             // Parse the extension.
-            MaxFragLenSpec spec;
-            try {
-                spec = new MaxFragLenSpec(buffer);
-            } catch (IOException ioe) {
-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
-
+            MaxFragLenSpec spec = new MaxFragLenSpec(chc, buffer);
             if (spec.id != requestedSpec.id) {
                 throw chc.conContext.fatal(Alert.ILLEGAL_PARAMETER,
                     "The maximum fragment length response is not requested");
             }
 
@@ -533,17 +523,11 @@
                 throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE,
                     "Unexpected max_fragment_length extension in ServerHello");
             }
 
             // Parse the extension.
-            MaxFragLenSpec spec;
-            try {
-                spec = new MaxFragLenSpec(buffer);
-            } catch (IOException ioe) {
-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
-
+            MaxFragLenSpec spec = new MaxFragLenSpec(chc, buffer);
             if (spec.id != requestedSpec.id) {
                 throw chc.conContext.fatal(Alert.ILLEGAL_PARAMETER,
                     "The maximum fragment length response is not requested");
             }
 
