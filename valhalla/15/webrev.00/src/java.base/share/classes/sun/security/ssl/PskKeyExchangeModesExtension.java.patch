diff a/src/java.base/share/classes/sun/security/ssl/PskKeyExchangeModesExtension.java b/src/java.base/share/classes/sun/security/ssl/PskKeyExchangeModesExtension.java
--- a/src/java.base/share/classes/sun/security/ssl/PskKeyExchangeModesExtension.java
+++ b/src/java.base/share/classes/sun/security/ssl/PskKeyExchangeModesExtension.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -93,15 +93,17 @@
 
         PskKeyExchangeModesSpec(byte[] modes) {
             this.modes = modes;
         }
 
-        PskKeyExchangeModesSpec(ByteBuffer m) throws IOException {
+        PskKeyExchangeModesSpec(HandshakeContext hc,
+                ByteBuffer m) throws IOException {
             if (m.remaining() < 2) {
-                throw new SSLProtocolException(
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
                     "Invalid psk_key_exchange_modes extension: " +
-                    "insufficient data");
+                    "insufficient data"));
             }
 
             this.modes = Record.getBytes8(m);
         }
 
@@ -149,13 +151,13 @@
     }
 
     private static final
             class PskKeyExchangeModesStringizer implements SSLStringizer {
         @Override
-        public String toString(ByteBuffer buffer) {
+        public String toString(HandshakeContext hc, ByteBuffer buffer) {
             try {
-                return (new PskKeyExchangeModesSpec(buffer)).toString();
+                return (new PskKeyExchangeModesSpec(hc, buffer)).toString();
             } catch (IOException ioe) {
                 // For debug logging only, so please swallow exceptions.
                 return ioe.getMessage();
             }
         }
@@ -195,16 +197,12 @@
 
                 return;     // ignore the extension
             }
 
             // Parse the extension.
-            PskKeyExchangeModesSpec spec;
-            try {
-                spec = new PskKeyExchangeModesSpec(buffer);
-            } catch (IOException ioe) {
-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
+            PskKeyExchangeModesSpec spec =
+                    new PskKeyExchangeModesSpec(shc, buffer);
 
             // Update the context.
             shc.handshakeExtensions.put(
                     SSLExtension.PSK_KEY_EXCHANGE_MODES, spec);
 
