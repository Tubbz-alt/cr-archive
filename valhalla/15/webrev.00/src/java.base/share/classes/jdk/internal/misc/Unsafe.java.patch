diff a/src/java.base/share/classes/jdk/internal/misc/Unsafe.java b/src/java.base/share/classes/jdk/internal/misc/Unsafe.java
--- a/src/java.base/share/classes/jdk/internal/misc/Unsafe.java
+++ b/src/java.base/share/classes/jdk/internal/misc/Unsafe.java
@@ -1001,11 +1001,11 @@
 
         checkPrimitivePointer(srcBase, srcOffset);
         checkPrimitivePointer(destBase, destOffset);
     }
 
-   /**
+    /**
      * Copies all elements from one block of memory to another block, byte swapping the
      * elements on the fly.
      *
      * This provides a <em>single-register</em> addressing mode, as
      * discussed in {@link #getInt(Object,long)}.
@@ -2560,18 +2560,18 @@
     public final double getDoubleAcquire(Object o, long offset) {
         return getDoubleVolatile(o, offset);
     }
 
     /*
-      * Versions of {@link #putReferenceVolatile(Object, long, Object)}
-      * that do not guarantee immediate visibility of the store to
-      * other threads. This method is generally only useful if the
-      * underlying field is a Java volatile (or if an array cell, one
-      * that is otherwise only accessed using volatile accesses).
-      *
-      * Corresponds to C11 atomic_store_explicit(..., memory_order_release).
-      */
+     * Versions of {@link #putReferenceVolatile(Object, long, Object)}
+     * that do not guarantee immediate visibility of the store to
+     * other threads. This method is generally only useful if the
+     * underlying field is a Java volatile (or if an array cell, one
+     * that is otherwise only accessed using volatile accesses).
+     *
+     * Corresponds to C11 atomic_store_explicit(..., memory_order_release).
+     */
 
     /** Release version of {@link #putReferenceVolatile(Object, long, Object)} */
     @HotSpotIntrinsicCandidate
     public final void putReferenceRelease(Object o, long offset, Object x) {
         putReferenceVolatile(o, offset, x);
