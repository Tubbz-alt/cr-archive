diff a/src/java.base/share/classes/java/lang/invoke/MethodType.java b/src/java.base/share/classes/java/lang/invoke/MethodType.java
--- a/src/java.base/share/classes/java/lang/invoke/MethodType.java
+++ b/src/java.base/share/classes/java/lang/invoke/MethodType.java
@@ -459,11 +459,11 @@
      */
     public MethodType appendParameterTypes(List<Class<?>> ptypesToInsert) {
         return insertParameterTypes(parameterCount(), ptypesToInsert);
     }
 
-     /**
+    /**
      * Finds or creates a method type with modified parameter types.
      * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
      * @param start  the position (zero-based) of the first replaced parameter type(s)
      * @param end    the position (zero-based) after the last replaced parameter type(s)
      * @param ptypesToInsert zero or more new parameter types to insert into the parameter list
@@ -1377,16 +1377,16 @@
                 hashcode = key.hashCode();
             }
 
             /**
              * This implementation returns {@code true} if {@code obj} is another
-             * {@code WeakEntry} whose referent is equals to this referent, or
-             * if {@code obj} is equals to the referent of this. This allows
+             * {@code WeakEntry} whose referent is equal to this referent, or
+             * if {@code obj} is equal to the referent of this. This allows
              * lookups to be made without wrapping in a {@code WeakEntry}.
              *
              * @param obj the object to compare
-             * @return true if {@code obj} is equals to this or the referent of this
+             * @return true if {@code obj} is equal to this or the referent of this
              * @see MethodType#equals(Object)
              * @see Object#equals(Object)
              */
             @Override
             public boolean equals(Object obj) {
