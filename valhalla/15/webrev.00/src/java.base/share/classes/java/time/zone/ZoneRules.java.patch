diff a/src/java.base/share/classes/java/time/zone/ZoneRules.java b/src/java.base/share/classes/java/time/zone/ZoneRules.java
--- a/src/java.base/share/classes/java/time/zone/ZoneRules.java
+++ b/src/java.base/share/classes/java/time/zone/ZoneRules.java
@@ -468,11 +468,14 @@
      * Checks of the zone rules are fixed, such that the offset never varies.
      *
      * @return true if the time-zone is fixed and the offset never changes
      */
     public boolean isFixedOffset() {
-        return savingsInstantTransitions.length == 0;
+        return standardOffsets[0].equals(wallOffsets[0]) &&
+                standardTransitions.length == 0 &&
+                savingsInstantTransitions.length == 0 &&
+                lastRules.length == 0;
     }
 
     /**
      * Gets the offset applicable at the specified instant in these rules.
      * <p>
@@ -484,11 +487,11 @@
      *  may be ignored if the rules have a single offset for all instants
      * @return the offset, not null
      */
     public ZoneOffset getOffset(Instant instant) {
         if (savingsInstantTransitions.length == 0) {
-            return standardOffsets[0];
+            return wallOffsets[0];
         }
         long epochSec = instant.getEpochSecond();
         // check if using last rules
         if (lastRules.length > 0 &&
                 epochSec > savingsInstantTransitions[savingsInstantTransitions.length - 1]) {
@@ -570,11 +573,11 @@
      * and the later offset at index 1.
      * <p>
      * There are various ways to handle the conversion from a {@code LocalDateTime}.
      * One technique, using this method, would be:
      * <pre>
-     *  List&lt;ZoneOffset&gt; validOffsets = rules.getOffset(localDT);
+     *  List&lt;ZoneOffset&gt; validOffsets = rules.getValidOffsets(localDT);
      *  if (validOffsets.size() == 1) {
      *    // Normal case: only one valid offset
      *    zoneOffset = validOffsets.get(0);
      *  } else {
      *    // Gap or Overlap: determine what to do from transition (which will be non-null)
@@ -638,12 +641,12 @@
         Object info = getOffsetInfo(localDateTime);
         return (info instanceof ZoneOffsetTransition ? (ZoneOffsetTransition) info : null);
     }
 
     private Object getOffsetInfo(LocalDateTime dt) {
-        if (savingsInstantTransitions.length == 0) {
-            return standardOffsets[0];
+        if (savingsLocalTransitions.length == 0) {
+            return wallOffsets[0];
         }
         // check if using last rules
         if (lastRules.length > 0 &&
                 dt.isAfter(savingsLocalTransitions[savingsLocalTransitions.length - 1])) {
             ZoneOffsetTransition[] transArray = findTransitionArray(dt.getYear());
@@ -754,11 +757,11 @@
      * @param instant  the instant to find the offset information for, not null, but null
      *  may be ignored if the rules have a single offset for all instants
      * @return the standard offset, not null
      */
     public ZoneOffset getStandardOffset(Instant instant) {
-        if (savingsInstantTransitions.length == 0) {
+        if (standardTransitions.length == 0) {
             return standardOffsets[0];
         }
         long epochSec = instant.getEpochSecond();
         int index  = Arrays.binarySearch(standardTransitions, epochSec);
         if (index < 0) {
@@ -784,11 +787,11 @@
      * @param instant  the instant to find the daylight savings for, not null, but null
      *  may be ignored if the rules have a single offset for all instants
      * @return the difference between the standard and actual offset, not null
      */
     public Duration getDaylightSavings(Instant instant) {
-        if (savingsInstantTransitions.length == 0) {
+        if (isFixedOffset()) {
             return Duration.ZERO;
         }
         ZoneOffset standardOffset = getStandardOffset(instant);
         ZoneOffset actualOffset = getOffset(instant);
         return Duration.ofSeconds(actualOffset.getTotalSeconds() - standardOffset.getTotalSeconds());
