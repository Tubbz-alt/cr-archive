diff a/src/java.base/share/classes/java/util/BitSet.java b/src/java.base/share/classes/java/util/BitSet.java
--- a/src/java.base/share/classes/java/util/BitSet.java
+++ b/src/java.base/share/classes/java/util/BitSet.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1995, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1995, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -293,11 +293,11 @@
      * <br>for all {@code n < 8 * bytes.length}.
      *
      * @return a byte array containing a little-endian representation
      *         of all the bits in this bit set
      * @since 1.7
-    */
+     */
     public byte[] toByteArray() {
         int n = wordsInUse;
         if (n == 0)
             return new byte[0];
         int len = 8 * (n-1);
@@ -322,11 +322,11 @@
      * <br>for all {@code n < 64 * longs.length}.
      *
      * @return a long array containing a little-endian representation
      *         of all the bits in this bit set
      * @since 1.7
-    */
+     */
     public long[] toLongArray() {
         return Arrays.copyOf(words, wordsInUse);
     }
 
     /**
@@ -1052,11 +1052,11 @@
     }
 
     /**
      * Compares this object against the specified object.
      * The result is {@code true} if and only if the argument is
-     * not {@code null} and is a {@code Bitset} object that has
+     * not {@code null} and is a {@code BitSet} object that has
      * exactly the same set of bits set to {@code true} as this bit
      * set. That is, for every nonnegative {@code int} index {@code k},
      * <pre>((BitSet)obj).get(k) == this.get(k)</pre>
      * must be true. The current sizes of the two bit sets are not compared.
      *
