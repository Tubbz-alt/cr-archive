diff a/src/java.base/share/classes/java/util/Enumeration.java b/src/java.base/share/classes/java/util/Enumeration.java
--- a/src/java.base/share/classes/java/util/Enumeration.java
+++ b/src/java.base/share/classes/java/util/Enumeration.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1994, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1994, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -86,21 +86,21 @@
      * are called on this enumeration after the call to {@code asIterator}.
      *
      * @apiNote
      * This method is intended to help adapt code that produces
      * {@code Enumeration} instances to code that consumes {@code Iterator}
-     * instances. For example, the {@link java.util.jar.JarFile#entries
+     * instances. For example, the {@link java.util.jar.JarFile#entries()
      * JarFile.entries()} method returns an {@code Enumeration<JarEntry>}.
      * This can be turned into an {@code Iterator}, and then the
      * {@code forEachRemaining()} method can be used:
      *
      * <pre>{@code
      *     JarFile jarFile = ... ;
      *     jarFile.entries().asIterator().forEachRemaining(entry -> { ... });
      * }</pre>
      *
-     * (Note that there is also a {@link java.util.jar.JarFile#stream
+     * (Note that there is also a {@link java.util.jar.JarFile#stream()
      * JarFile.stream()} method that returns a {@code Stream} of entries,
      * which may be more convenient in some cases.)
      *
      * @implSpec
      * The default implementation returns an {@code Iterator} whose
