diff a/src/java.base/share/classes/java/math/BigDecimal.java b/src/java.base/share/classes/java/math/BigDecimal.java
--- a/src/java.base/share/classes/java/math/BigDecimal.java
+++ b/src/java.base/share/classes/java/math/BigDecimal.java
@@ -3023,13 +3023,13 @@
     /**
      * Returns a {@code BigDecimal} which is numerically equal to
      * this one but with any trailing zeros removed from the
      * representation.  For example, stripping the trailing zeros from
      * the {@code BigDecimal} value {@code 600.0}, which has
-     * [{@code BigInteger}, {@code scale}] components equals to
+     * [{@code BigInteger}, {@code scale}] components equal to
      * [6000, 1], yields {@code 6E2} with [{@code BigInteger},
-     * {@code scale}] components equals to [6, -2].  If
+     * {@code scale}] components equal to [6, -2].  If
      * this BigDecimal is numerically equal to zero, then
      * {@code BigDecimal.ZERO} is returned.
      *
      * @return a numerically equal {@code BigDecimal} with any
      * trailing zeros removed.
@@ -4321,11 +4321,11 @@
                 throw new ArithmeticException(asInt>0 ? "Underflow":"Overflow");
         }
         return asInt;
     }
 
-   /**
+    /**
      * Returns the compact value for given {@code BigInteger}, or
      * INFLATED if too big. Relies on internal representation of
      * {@code BigInteger}.
      */
     private static long compactValFor(BigInteger b) {
