diff a/src/hotspot/share/oops/methodData.hpp b/src/hotspot/share/oops/methodData.hpp
--- a/src/hotspot/share/oops/methodData.hpp
+++ b/src/hotspot/share/oops/methodData.hpp
@@ -1234,11 +1234,11 @@
   virtual bool is_VirtualCallData() const { return true; }
 
   static int static_cell_count() {
     // At this point we could add more profile state, e.g., for arguments.
     // But for now it's the same size as the base record type.
-    return ReceiverTypeData::static_cell_count() JVMCI_ONLY(+ (uint) MethodProfileWidth * receiver_type_row_cell_count);
+    return ReceiverTypeData::static_cell_count();
   }
 
   virtual int cell_count() const {
     return static_cell_count();
   }
@@ -1246,65 +1246,10 @@
   // Direct accessors
   static ByteSize virtual_call_data_size() {
     return cell_offset(static_cell_count());
   }
 
-#if INCLUDE_JVMCI
-  static ByteSize method_offset(uint row) {
-    return cell_offset(method_cell_index(row));
-  }
-  static ByteSize method_count_offset(uint row) {
-    return cell_offset(method_count_cell_index(row));
-  }
-  static int method_cell_index(uint row) {
-    return receiver0_offset + (row + TypeProfileWidth) * receiver_type_row_cell_count;
-  }
-  static int method_count_cell_index(uint row) {
-    return count0_offset + (row + TypeProfileWidth) * receiver_type_row_cell_count;
-  }
-  static uint method_row_limit() {
-    return MethodProfileWidth;
-  }
-
-  Method* method(uint row) const {
-    assert(row < method_row_limit(), "oob");
-
-    Method* method = (Method*)intptr_at(method_cell_index(row));
-    assert(method == NULL || method->is_method(), "must be");
-    return method;
-  }
-
-  uint method_count(uint row) const {
-    assert(row < method_row_limit(), "oob");
-    return uint_at(method_count_cell_index(row));
-  }
-
-  void set_method(uint row, Method* m) {
-    assert((uint)row < method_row_limit(), "oob");
-    set_intptr_at(method_cell_index(row), (uintptr_t)m);
-  }
-
-  void set_method_count(uint row, uint count) {
-    assert(row < method_row_limit(), "oob");
-    set_uint_at(method_count_cell_index(row), count);
-  }
-
-  void clear_method_row(uint row) {
-    assert(row < method_row_limit(), "oob");
-    // Clear total count - indicator of polymorphic call site (see comment for clear_row() in ReceiverTypeData).
-    set_nonprofiled_count(0);
-    set_method(row, NULL);
-    set_method_count(row, 0);
-  }
-
-  // GC support
-  virtual void clean_weak_klass_links(bool always_clean);
-
-  // Redefinition support
-  virtual void clean_weak_method_links();
-#endif // INCLUDE_JVMCI
-
   void print_method_data_on(outputStream* st) const NOT_JVMCI_RETURN;
   void print_data_on(outputStream* st, const char* extra = NULL) const;
 };
 
 // VirtualCallTypeData
