diff a/src/hotspot/share/classfile/systemDictionary.hpp b/src/hotspot/share/classfile/systemDictionary.hpp
--- a/src/hotspot/share/classfile/systemDictionary.hpp
+++ b/src/hotspot/share/classfile/systemDictionary.hpp
@@ -228,11 +228,10 @@
   /*end*/
 
 class SystemDictionary : AllStatic {
   friend class BootstrapInfo;
   friend class VMStructs;
-  friend class SystemDictionaryHandles;
 
  public:
   enum WKID {
     NO_WKID = 0,
 
@@ -396,17 +395,19 @@
   static void resolve_wk_klasses_through(WKID end_id, WKID &start_id, TRAPS) {
     int limit = (int)end_id + 1;
     resolve_wk_klasses_until((WKID) limit, start_id, THREAD);
   }
 public:
+  #define WK_KLASS(name) _well_known_klasses[SystemDictionary::WK_KLASS_ENUM_NAME(name)]
+
   #define WK_KLASS_DECLARE(name, symbol) \
     static InstanceKlass* name() { return check_klass(_well_known_klasses[WK_KLASS_ENUM_NAME(name)]); } \
     static InstanceKlass** name##_addr() {                                                              \
       return &_well_known_klasses[SystemDictionary::WK_KLASS_ENUM_NAME(name)];                          \
     }                                                                                                   \
     static bool name##_is_loaded() {                                                                    \
-      return _well_known_klasses[SystemDictionary::WK_KLASS_ENUM_NAME(name)] != NULL;                   \
+      return is_wk_klass_loaded(WK_KLASS(name));                                                        \
     }
   WK_KLASSES_DO(WK_KLASS_DECLARE);
   #undef WK_KLASS_DECLARE
 
   static InstanceKlass* well_known_klass(WKID id) {
@@ -418,13 +419,10 @@
     assert(id >= (int)FIRST_WKID && id < (int)WKID_LIMIT, "oob");
     return &_well_known_klasses[id];
   }
   static void well_known_klasses_do(MetaspaceClosure* it);
 
-  // Local definition for direct access to the private array:
-  #define WK_KLASS(name) _well_known_klasses[SystemDictionary::WK_KLASS_ENUM_NAME(name)]
-
   static InstanceKlass* box_klass(BasicType t) {
     assert((uint)t < T_VOID+1, "range check");
     return check_klass(_box_klasses[t]);
   }
   static BasicType box_klass_type(Klass* k);  // inverse of box_klass
@@ -440,16 +438,20 @@
   // system dictionary.
   static ClassLoaderData *class_loader_data(Handle class_loader) {
     return ClassLoaderData::class_loader_data(class_loader());
   }
 
+  static bool is_wk_klass_loaded(InstanceKlass* klass) {
+    return !(klass == NULL || !klass->is_loaded());
+  }
+
 public:
-  static bool Parameter_klass_loaded()      { return WK_KLASS(reflect_Parameter_klass) != NULL; }
-  static bool Class_klass_loaded()          { return WK_KLASS(Class_klass) != NULL; }
-  static bool Cloneable_klass_loaded()      { return WK_KLASS(Cloneable_klass) != NULL; }
-  static bool Object_klass_loaded()         { return WK_KLASS(Object_klass) != NULL; }
-  static bool ClassLoader_klass_loaded()    { return WK_KLASS(ClassLoader_klass) != NULL; }
+  static bool Object_klass_loaded()         { return is_wk_klass_loaded(WK_KLASS(Object_klass));             }
+  static bool Class_klass_loaded()          { return is_wk_klass_loaded(WK_KLASS(Class_klass));              }
+  static bool Cloneable_klass_loaded()      { return is_wk_klass_loaded(WK_KLASS(Cloneable_klass));          }
+  static bool Parameter_klass_loaded()      { return is_wk_klass_loaded(WK_KLASS(reflect_Parameter_klass));  }
+  static bool ClassLoader_klass_loaded()    { return is_wk_klass_loaded(WK_KLASS(ClassLoader_klass));        }
 
   // Returns java system loader
   static oop java_system_loader();
 
   // Returns java platform loader
@@ -600,15 +602,22 @@
   static InstanceKlass* find_or_define_instance_class(Symbol* class_name,
                                                 Handle class_loader,
                                                 InstanceKlass* k, TRAPS);
   static bool is_shared_class_visible(Symbol* class_name, InstanceKlass* ik,
                                       Handle class_loader, TRAPS);
+  static bool check_shared_class_super_type(InstanceKlass* child, InstanceKlass* super,
+                                            Handle class_loader,  Handle protection_domain,
+                                            bool is_superclass, TRAPS);
+  static bool check_shared_class_super_types(InstanceKlass* ik, Handle class_loader,
+                                               Handle protection_domain, TRAPS);
   static InstanceKlass* load_shared_class(InstanceKlass* ik,
                                           Handle class_loader,
                                           Handle protection_domain,
                                           const ClassFileStream *cfs,
                                           TRAPS);
+  // Second part of load_shared_class
+  static void load_shared_class_misc(InstanceKlass* ik, ClassLoaderData* loader_data, TRAPS) NOT_CDS_RETURN;
   static InstanceKlass* load_shared_boot_class(Symbol* class_name,
                                                TRAPS);
   static InstanceKlass* load_instance_class(Symbol* class_name, Handle class_loader, TRAPS);
   static Handle compute_loader_lock_object(Handle class_loader, TRAPS);
   static void check_loader_lock_contention(Handle loader_lock, TRAPS);
@@ -637,10 +646,12 @@
   // Basic find on classes in the midst of being loaded
   static Symbol* find_placeholder(Symbol* name, ClassLoaderData* loader_data);
 
   // Resolve well-known classes so they can be used like SystemDictionary::String_klass()
   static void resolve_well_known_classes(TRAPS);
+  // quick resolve using CDS for well-known classes only.
+  static void quick_resolve(InstanceKlass* klass, ClassLoaderData* loader_data, Handle domain, TRAPS) NOT_CDS_RETURN;
 
   // Class loader constraints
   static void check_constraints(unsigned int hash,
                                 InstanceKlass* k, Handle loader,
                                 bool defining, TRAPS);
