diff a/src/hotspot/share/gc/shenandoah/shenandoahMarkingContext.cpp b/src/hotspot/share/gc/shenandoah/shenandoahMarkingContext.cpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahMarkingContext.cpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahMarkingContext.cpp
@@ -57,40 +57,10 @@
   HeapWord *bottom = r->bottom();
   _top_at_mark_starts_base[idx] = bottom;
   _top_bitmaps[idx] = bottom;
 }
 
-void ShenandoahMarkingContext::capture_top_at_mark_start(ShenandoahHeapRegion *r) {
-  size_t region_number = r->region_number();
-  HeapWord* old_tams = _top_at_mark_starts_base[region_number];
-  HeapWord* new_tams = r->top();
-
-  assert(new_tams >= old_tams,
-         "Region " SIZE_FORMAT", TAMS updates should be monotonic: " PTR_FORMAT " -> " PTR_FORMAT,
-         region_number, p2i(old_tams), p2i(new_tams));
-  assert(is_bitmap_clear_range(old_tams, new_tams),
-         "Region " SIZE_FORMAT ", bitmap should be clear while adjusting TAMS: " PTR_FORMAT " -> " PTR_FORMAT,
-         region_number, p2i(old_tams), p2i(new_tams));
-
-  _top_at_mark_starts_base[region_number] = new_tams;
-  _top_bitmaps[region_number] = new_tams;
-}
-
-void ShenandoahMarkingContext::reset_top_at_mark_start(ShenandoahHeapRegion* r) {
-  _top_at_mark_starts_base[r->region_number()] = r->bottom();
-}
-
-HeapWord* ShenandoahMarkingContext::top_at_mark_start(ShenandoahHeapRegion* r) const {
-  return _top_at_mark_starts_base[r->region_number()];
-}
-
-void ShenandoahMarkingContext::reset_top_bitmap(ShenandoahHeapRegion* r) {
-  assert(is_bitmap_clear_range(r->bottom(), r->end()),
-         "Region " SIZE_FORMAT " should have no marks in bitmap", r->region_number());
-  _top_bitmaps[r->region_number()] = r->bottom();
-}
-
 void ShenandoahMarkingContext::clear_bitmap(ShenandoahHeapRegion* r) {
   HeapWord* bottom = r->bottom();
   HeapWord* top_bitmap = _top_bitmaps[r->region_number()];
   if (top_bitmap > bottom) {
     _mark_bit_map.clear_range_large(MemRegion(bottom, top_bitmap));
