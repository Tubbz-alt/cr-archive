diff a/src/hotspot/share/memory/dynamicArchive.cpp b/src/hotspot/share/memory/dynamicArchive.cpp
--- a/src/hotspot/share/memory/dynamicArchive.cpp
+++ b/src/hotspot/share/memory/dynamicArchive.cpp
@@ -865,17 +865,17 @@
 
   for (i = 0; i < count; i++) {
     InstanceKlass* ik = _klasses->at(i);
     ClassLoaderData *cld = ik->class_loader_data();
     if (cld->is_boot_class_loader_data()) {
-      ik->set_class_loader_type(ClassLoader::BOOT_LOADER);
+      ik->set_shared_class_loader_type(ClassLoader::BOOT_LOADER);
     }
     else if (cld->is_platform_class_loader_data()) {
-      ik->set_class_loader_type(ClassLoader::PLATFORM_LOADER);
+      ik->set_shared_class_loader_type(ClassLoader::PLATFORM_LOADER);
     }
     else if (cld->is_system_class_loader_data()) {
-      ik->set_class_loader_type(ClassLoader::APP_LOADER);
+      ik->set_shared_class_loader_type(ClassLoader::APP_LOADER);
     }
 
     MetaspaceShared::rewrite_nofast_bytecodes_and_calculate_fingerprints(Thread::current(), ik);
     ik->remove_unshareable_info();
 
@@ -980,11 +980,11 @@
 
 void DynamicArchiveBuilder::relocate_buffer_to_target() {
   RelocateBufferToTarget patcher(this, (address*)_alloc_bottom, _buffer_to_target_delta);
   ArchivePtrMarker::ptrmap()->iterate(&patcher);
 
-  Array<u8>* table = FileMapInfo::shared_path_table().table();
+  Array<u8>* table = FileMapInfo::saved_shared_path_table().table();
   SharedPathTable runtime_table(to_target(table), FileMapInfo::shared_path_table().size());
   _header->set_shared_path_table(runtime_table);
 
   address relocatable_base = (address)SharedBaseAddress;
   address relocatable_end = (address)(current_dump_space()->top()) + _buffer_to_target_delta;
@@ -1044,11 +1044,11 @@
   assert(dynamic_info != NULL, "Sanity");
 
   // Now write the archived data including the file offsets.
   const char* archive_name = Arguments::GetSharedDynamicArchivePath();
   dynamic_info->open_for_write(archive_name);
-  MetaspaceShared::write_core_archive_regions(dynamic_info);
+  MetaspaceShared::write_core_archive_regions(dynamic_info, NULL, NULL);
   dynamic_info->set_final_requested_base((char*)Arguments::default_SharedBaseAddress());
   dynamic_info->set_header_crc(dynamic_info->compute_header_crc());
   dynamic_info->write_header();
   dynamic_info->close();
 
