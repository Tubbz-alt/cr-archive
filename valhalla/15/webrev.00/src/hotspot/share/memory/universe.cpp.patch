diff a/src/hotspot/share/memory/universe.cpp b/src/hotspot/share/memory/universe.cpp
--- a/src/hotspot/share/memory/universe.cpp
+++ b/src/hotspot/share/memory/universe.cpp
@@ -860,24 +860,22 @@
 
 bool universe_post_init() {
   assert(!is_init_completed(), "Error: initialization not yet completed!");
   Universe::_fully_initialized = true;
   EXCEPTION_MARK;
-  { ResourceMark rm;
-    Interpreter::initialize();      // needed for interpreter entry points
-    if (!UseSharedSpaces) {
-      Universe::reinitialize_vtables(CHECK_false);
-      Universe::reinitialize_itables(CHECK_false);
-    }
+  if (!UseSharedSpaces) {
+    ResourceMark rm;
+    Universe::reinitialize_vtables(CHECK_false);
+    Universe::reinitialize_itables(CHECK_false);
   }
 
   HandleMark hm(THREAD);
   // Setup preallocated empty java.lang.Class array
   Universe::_the_empty_class_klass_array = oopFactory::new_objArray(SystemDictionary::Class_klass(), 0, CHECK_false);
 
   // Setup preallocated OutOfMemoryError errors
-  Klass* k = SystemDictionary::resolve_or_fail(vmSymbols::java_lang_OutOfMemoryError(), true, CHECK_false);
+  Klass* k = SystemDictionary::OutOfMemoryError_klass();
   InstanceKlass* ik = InstanceKlass::cast(k);
   Universe::_out_of_memory_error_java_heap = ik->allocate_instance(CHECK_false);
   Universe::_out_of_memory_error_metaspace = ik->allocate_instance(CHECK_false);
   Universe::_out_of_memory_error_class_metaspace = ik->allocate_instance(CHECK_false);
   Universe::_out_of_memory_error_array_size = ik->allocate_instance(CHECK_false);
@@ -899,12 +897,11 @@
   // Setup preallocated ArithmeticException
   // (this is currently used for a cheap & dirty solution in compiler exception handling)
   k = SystemDictionary::resolve_or_fail(vmSymbols::java_lang_ArithmeticException(), true, CHECK_false);
   Universe::_arithmetic_exception_instance = InstanceKlass::cast(k)->allocate_instance(CHECK_false);
   // Virtual Machine Error for when we get into a situation we can't resolve
-  k = SystemDictionary::resolve_or_fail(
-    vmSymbols::java_lang_VirtualMachineError(), true, CHECK_false);
+  k = SystemDictionary::VirtualMachineError_klass();
   bool linked = InstanceKlass::cast(k)->link_class_or_fail(CHECK_false);
   if (!linked) {
      tty->print_cr("Unable to link/verify VirtualMachineError class");
      return false; // initialization failed
   }
