diff a/src/hotspot/share/interpreter/bytecodeInterpreter.cpp b/src/hotspot/share/interpreter/bytecodeInterpreter.cpp
--- a/src/hotspot/share/interpreter/bytecodeInterpreter.cpp
+++ b/src/hotspot/share/interpreter/bytecodeInterpreter.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -2345,15 +2345,12 @@
             THREAD->set_vm_result(NULL);
             break;
 
           case JVM_CONSTANT_Dynamic:
             {
-              oop result = constants->resolved_references()->obj_at(index);
-              if (result == NULL) {
-                CALL_VM(InterpreterRuntime::resolve_ldc(THREAD, (Bytecodes::Code) opcode), handle_exception);
-                result = THREAD->vm_result();
-              }
+              CALL_VM(InterpreterRuntime::resolve_ldc(THREAD, (Bytecodes::Code) opcode), handle_exception);
+              oop result = THREAD->vm_result();
               VERIFY_OOP(result);
 
               jvalue value;
               BasicType type = java_lang_boxing_object::get_value(result, &value);
               switch (type) {
@@ -2389,15 +2386,12 @@
              SET_STACK_DOUBLE(constants->double_at(index), 1);
             break;
 
           case JVM_CONSTANT_Dynamic:
             {
-              oop result = constants->resolved_references()->obj_at(index);
-              if (result == NULL) {
-                CALL_VM(InterpreterRuntime::resolve_ldc(THREAD, (Bytecodes::Code) opcode), handle_exception);
-                result = THREAD->vm_result();
-              }
+              CALL_VM(InterpreterRuntime::resolve_ldc(THREAD, (Bytecodes::Code) opcode), handle_exception);
+              oop result = THREAD->vm_result();
               VERIFY_OOP(result);
 
               jvalue value;
               BasicType type = java_lang_boxing_object::get_value(result, &value);
               switch (type) {
