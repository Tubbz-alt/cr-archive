diff a/src/hotspot/share/opto/arraycopynode.cpp b/src/hotspot/share/opto/arraycopynode.cpp
--- a/src/hotspot/share/opto/arraycopynode.cpp
+++ b/src/hotspot/share/opto/arraycopynode.cpp
@@ -56,11 +56,11 @@
                                    bool has_negative_length_guard,
                                    Node* src_klass, Node* dest_klass,
                                    Node* src_length, Node* dest_length) {
 
   ArrayCopyNode* ac = new ArrayCopyNode(kit->C, alloc_tightly_coupled, has_negative_length_guard);
-  Node* prev_mem = kit->set_predefined_input_for_runtime_call(ac);
+  kit->set_predefined_input_for_runtime_call(ac);
 
   ac->init_req(ArrayCopyNode::Src, src);
   ac->init_req(ArrayCopyNode::SrcPos, src_offset);
   ac->init_req(ArrayCopyNode::Dest, dest);
   ac->init_req(ArrayCopyNode::DestPos, dest_offset);
@@ -179,21 +179,16 @@
 Node* ArrayCopyNode::try_clone_instance(PhaseGVN *phase, bool can_reshape, int count) {
   if (!is_clonebasic()) {
     return NULL;
   }
 
-  Node* src = in(ArrayCopyNode::Src);
-  Node* dest = in(ArrayCopyNode::Dest);
+  Node* base_src = in(ArrayCopyNode::Src);
+  Node* base_dest = in(ArrayCopyNode::Dest);
   Node* ctl = in(TypeFunc::Control);
   Node* in_mem = in(TypeFunc::Memory);
 
-  const Type* src_type = phase->type(src);
-
-  assert(src->is_AddP(), "should be base + off");
-  assert(dest->is_AddP(), "should be base + off");
-  Node* base_src = src->in(AddPNode::Base);
-  Node* base_dest = dest->in(AddPNode::Base);
+  const Type* src_type = phase->type(base_src);
 
   MergeMemNode* mem = MergeMemNode::make(in_mem);
 
   const TypeInstPtr* inst_src = src_type->isa_instptr();
 
@@ -211,11 +206,10 @@
   assert(ik->nof_nonstatic_fields() <= ArrayCopyLoadStoreMaxElem, "too many fields");
 
   BarrierSetC2* bs = BarrierSet::barrier_set()->barrier_set_c2();
   for (int i = 0; i < count; i++) {
     ciField* field = ik->nonstatic_field_at(i);
-    int fieldidx = phase->C->alias_type(field)->index();
     const TypePtr* adr_type = phase->C->alias_type(field)->adr_type();
     Node* off = phase->MakeConX(field->offset());
     Node* next_src = phase->transform(new AddPNode(base_src,base_src,off));
     Node* next_dest = phase->transform(new AddPNode(base_dest,base_dest,off));
     BasicType bt = field->layout_type();
@@ -250,20 +244,21 @@
                                        Node*& adr_dest,
                                        Node*& base_dest,
                                        BasicType& copy_type,
                                        const Type*& value_type,
                                        bool& disjoint_bases) {
-  Node* src = in(ArrayCopyNode::Src);
-  Node* dest = in(ArrayCopyNode::Dest);
-  const Type* src_type = phase->type(src);
+  base_src = in(ArrayCopyNode::Src);
+  base_dest = in(ArrayCopyNode::Dest);
+  const Type* src_type = phase->type(base_src);
   const TypeAryPtr* ary_src = src_type->isa_aryptr();
 
+  Node* src_offset = in(ArrayCopyNode::SrcPos);
+  Node* dest_offset = in(ArrayCopyNode::DestPos);
+
   if (is_arraycopy() || is_copyofrange() || is_copyof()) {
-    const Type* dest_type = phase->type(dest);
+    const Type* dest_type = phase->type(base_dest);
     const TypeAryPtr* ary_dest = dest_type->isa_aryptr();
-    Node* src_offset = in(ArrayCopyNode::SrcPos);
-    Node* dest_offset = in(ArrayCopyNode::DestPos);
 
     // newly allocated object is guaranteed to not overlap with source object
     disjoint_bases = is_alloc_tightly_coupled();
 
     if (ary_src  == NULL || ary_src->klass()  == NULL ||
@@ -296,59 +291,48 @@
       return false;
     }
 
     value_type = ary_src->elem();
 
-    base_src = src;
-    base_dest = dest;
-
     uint shift  = exact_log2(type2aelembytes(dest_elem));
     if (dest_elem == T_VALUETYPE) {
       ciValueArrayKlass* vak = ary_src->klass()->as_value_array_klass();
       shift = vak->log2_element_size();
     }
     uint header = arrayOopDesc::base_offset_in_bytes(dest_elem);
 
-    adr_src = src;
-    adr_dest = dest;
-
     src_offset = Compile::conv_I2X_index(phase, src_offset, ary_src->size());
     dest_offset = Compile::conv_I2X_index(phase, dest_offset, ary_dest->size());
     if (src_offset->is_top() || dest_offset->is_top()) {
       // Offset is out of bounds (the ArrayCopyNode will be removed)
       return false;
     }
 
-    Node* src_scale = phase->transform(new LShiftXNode(src_offset, phase->intcon(shift)));
+    Node* src_scale  = phase->transform(new LShiftXNode(src_offset, phase->intcon(shift)));
     Node* dest_scale = phase->transform(new LShiftXNode(dest_offset, phase->intcon(shift)));
 
-    adr_src = phase->transform(new AddPNode(base_src, adr_src, phase->MakeConX(header)));
-    adr_dest = phase->transform(new AddPNode(base_dest, adr_dest, phase->MakeConX(header)));
+    adr_src          = phase->transform(new AddPNode(base_src, base_src, src_scale));
+    adr_dest         = phase->transform(new AddPNode(base_dest, base_dest, dest_scale));
 
-    adr_src = phase->transform(new AddPNode(base_src, adr_src, src_scale));
-    adr_dest = phase->transform(new AddPNode(base_dest, adr_dest, dest_scale));
+    adr_src          = phase->transform(new AddPNode(base_src, adr_src, phase->MakeConX(header)));
+    adr_dest         = phase->transform(new AddPNode(base_dest, adr_dest, phase->MakeConX(header)));
 
     copy_type = dest_elem;
   } else {
     assert(ary_src != NULL, "should be a clone");
     assert(is_clonebasic(), "should be");
 
     disjoint_bases = true;
-    assert(src->is_AddP(), "should be base + off");
-    assert(dest->is_AddP(), "should be base + off");
-    adr_src = src;
-    base_src = src->in(AddPNode::Base);
-    adr_dest = dest;
-    base_dest = dest->in(AddPNode::Base);
-
-    assert(phase->type(src->in(AddPNode::Offset))->is_intptr_t()->get_con() == phase->type(dest->in(AddPNode::Offset))->is_intptr_t()->get_con(), "same start offset?");
 
     if (ary_src->elem()->make_oopptr() != NULL &&
         ary_src->elem()->make_oopptr()->can_be_value_type()) {
       return false;
     }
 
+    adr_src  = phase->transform(new AddPNode(base_src, base_src, src_offset));
+    adr_dest = phase->transform(new AddPNode(base_dest, base_dest, dest_offset));
+
     BasicType elem = ary_src->klass()->as_array_klass()->element_type()->basic_type();
     if (elem == T_ARRAY ||
         (elem == T_VALUETYPE && ary_src->klass()->is_obj_array_klass())) {
       elem = T_OBJECT;
     }
@@ -358,17 +342,21 @@
         (elem == T_VALUETYPE && ary_src->elem()->value_klass()->contains_oops() &&
          bs->array_copy_requires_gc_barriers(true, T_OBJECT, true, BarrierSetC2::Optimization))) {
       return false;
     }
 
-    int diff = arrayOopDesc::base_offset_in_bytes(elem) - phase->type(src->in(AddPNode::Offset))->is_intptr_t()->get_con();
+    // The address is offseted to an aligned address where a raw copy would start.
+    // If the clone copy is decomposed into load-stores - the address is adjusted to
+    // point at where the array starts.
+    const Type* toff = phase->type(src_offset);
+    int offset = toff->isa_long() ? (int) toff->is_long()->get_con() : (int) toff->is_int()->get_con();
+    int diff = arrayOopDesc::base_offset_in_bytes(elem) - offset;
     assert(diff >= 0, "clone should not start after 1st array element");
     if (diff > 0) {
       adr_src = phase->transform(new AddPNode(base_src, adr_src, phase->MakeConX(diff)));
       adr_dest = phase->transform(new AddPNode(base_dest, adr_dest, phase->MakeConX(diff)));
     }
-
     copy_type = elem;
     value_type = ary_src->elem();
   }
   return true;
 }
@@ -588,12 +576,12 @@
   assert(in(TypeFunc::Control) != NULL &&
          in(TypeFunc::Memory) != NULL &&
          in(ArrayCopyNode::Src) != NULL &&
          in(ArrayCopyNode::Dest) != NULL &&
          in(ArrayCopyNode::Length) != NULL &&
-         ((in(ArrayCopyNode::SrcPos) != NULL && in(ArrayCopyNode::DestPos) != NULL) ||
-          is_clonebasic()), "broken inputs");
+         in(ArrayCopyNode::SrcPos) != NULL &&
+         in(ArrayCopyNode::DestPos) != NULL, "broken inputs");
 
   if (in(TypeFunc::Control)->is_top() ||
       in(TypeFunc::Memory)->is_top() ||
       phase->type(in(ArrayCopyNode::Src)) == Type::TOP ||
       phase->type(in(ArrayCopyNode::Dest)) == Type::TOP ||
@@ -657,12 +645,10 @@
   new_map->set_i_o(in(TypeFunc::I_O));
   phase->record_for_igvn(new_map);
 
   const TypeAryPtr* atp_src = get_address_type(phase, _src_type, src);
   const TypeAryPtr* atp_dest = get_address_type(phase, _dest_type, dest);
-  uint alias_idx_src = phase->C->get_alias_index(atp_src);
-  uint alias_idx_dest = phase->C->get_alias_index(atp_dest);
 
   if (can_reshape) {
     assert(!phase->is_IterGVN()->delay_transform(), "cannot delay transforms");
     phase->is_IterGVN()->set_delay_transform(true);
   }
