diff a/src/hotspot/share/opto/subtypenode.cpp b/src/hotspot/share/opto/subtypenode.cpp
--- a/src/hotspot/share/opto/subtypenode.cpp
+++ b/src/hotspot/share/opto/subtypenode.cpp
@@ -34,27 +34,46 @@
   ciKlass* superk = super_t->is_klassptr()->klass();
   ciKlass* subk   = sub_t->isa_klassptr() ? sub_t->is_klassptr()->klass() : sub_t->is_oopptr()->klass();
 
   bool xsubk = sub_t->isa_klassptr() ? sub_t->is_klassptr()->klass_is_exact() : sub_t->is_oopptr()->klass_is_exact();
 
+
+  // Oop can't be a subtype of abstract type that has no subclass.
+  if (sub_t->isa_oopptr() && superk->is_instance_klass() &&
+      !superk->is_interface() && superk->is_abstract() &&
+      !superk->as_instance_klass()->has_subklass()) {
+    Compile::current()->dependencies()->assert_leaf_type(superk);
+    return TypeInt::CC_GT;
+  }
+
   // Similar to logic in CmpPNode::sub()
+
+  // Interfaces can't be trusted unless the subclass is an exact
+  // interface (it can then only be a constant) or the subclass is an
+  // exact array of interfaces (a newly allocated array of interfaces
+  // for instance)
   if (superk && subk &&
       superk->is_loaded() && !superk->is_interface() &&
-      subk->is_loaded() && !subk->is_interface() &&
+      subk->is_loaded() && (!subk->is_interface() || xsubk) &&
       (!superk->is_obj_array_klass() ||
        !superk->as_obj_array_klass()->base_element_klass()->is_interface()) &&
       (!subk->is_obj_array_klass() ||
        !subk->as_obj_array_klass()->base_element_klass()->is_interface() ||
        xsubk)) {
     bool unrelated_classes = false;
     if (superk->equals(subk)) {
       // skip
     } else if (superk->is_subtype_of(subk)) {
+      // If the subclass is exact then the superclass is a subtype of
+      // the subclass. Given they're no equals, that subtype check can
+      // only fail.
       unrelated_classes = xsubk;
     } else if (subk->is_subtype_of(superk)) {
       // skip
     } else {
+      // Neither class subtypes the other: they are unrelated and this
+      // type check is known to fail.
       unrelated_classes = true;
     }
     // Ignore exactness of constant supertype (the type of the corresponding object may be non-exact).
     const TypeKlassPtr* casted_sup = super_t->is_klassptr()->cast_to_exactness(false)->is_klassptr();
     if (sub_t->is_ptr()->flat_array() && (!casted_sup->can_be_value_type() || (superk->is_valuetype() && !superk->flatten_array()))) {
@@ -87,13 +106,10 @@
 
   return bottom_type();
 }
 
 Node *SubTypeCheckNode::Ideal(PhaseGVN *phase, bool can_reshape) {
-  // Verify that optimizing the subtype check to a simple code pattern
-  // when possible would not constant fold better
-#ifdef ASSERT
   Node* obj_or_subklass = in(ObjOrSubKlass);
   Node* superklass = in(SuperKlass);
 
   if (obj_or_subklass == NULL ||
       superklass == NULL) {
@@ -106,11 +122,32 @@
   if (!super_t->isa_klassptr() ||
       (!sub_t->isa_klassptr() && !sub_t->isa_oopptr())) {
     return NULL;
   }
 
+  Node* addr = NULL;
+  if (obj_or_subklass->is_DecodeNKlass()) {
+    if (obj_or_subklass->in(1) != NULL &&
+        obj_or_subklass->in(1)->Opcode() == Op_LoadNKlass) {
+      addr = obj_or_subklass->in(1)->in(MemNode::Address);
+    }
+  } else if (obj_or_subklass->Opcode() == Op_LoadKlass) {
+    addr = obj_or_subklass->in(MemNode::Address);
+  }
+
+  if (addr != NULL) {
+    intptr_t con = 0;
+    Node* obj = AddPNode::Ideal_base_and_offset(addr, phase, con);
+    if (con == oopDesc::klass_offset_in_bytes() && obj != NULL && phase->type(obj)->isa_oopptr()) {
+      set_req(ObjOrSubKlass, obj);
+      return this;
+    }
+  }
 
+  // Verify that optimizing the subtype check to a simple code pattern
+  // when possible would not constant fold better
+#ifdef ASSERT
   ciKlass* superk = super_t->is_klassptr()->klass();
   ciKlass* subk   = sub_t->isa_klassptr() ? sub_t->is_klassptr()->klass() : sub_t->is_oopptr()->klass();
 
   if (super_t->singleton() && subk != NULL && phase->C->static_subtype_check(superk, subk) == Compile::SSC_easy_test) {
     Node* subklass = NULL;
