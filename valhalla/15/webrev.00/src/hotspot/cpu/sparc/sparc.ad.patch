diff a/src/hotspot/cpu/sparc/sparc.ad b/src/hotspot/cpu/sparc/sparc.ad
--- a/src/hotspot/cpu/sparc/sparc.ad
+++ b/src/hotspot/cpu/sparc/sparc.ad
@@ -590,11 +590,11 @@
   return true;
 }
 
 // emit an interrupt that is caught by the debugger (for debugging compiler)
 void emit_break(CodeBuffer &cbuf) {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   __ breakpoint_trap();
 }
 
 #ifndef PRODUCT
 void MachBreakpointNode::format( PhaseRegAlloc *, outputStream *st ) const {
@@ -610,31 +610,31 @@
   return MachNode::size(ra_);
 }
 
 // Traceable jump
 void  emit_jmpl(CodeBuffer &cbuf, int jump_target) {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   Register rdest = reg_to_register_object(jump_target);
   __ JMP(rdest, 0);
   __ delayed()->nop();
 }
 
 // Traceable jump and set exception pc
 void  emit_jmpl_set_exception_pc(CodeBuffer &cbuf, int jump_target) {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   Register rdest = reg_to_register_object(jump_target);
   __ JMP(rdest, 0);
   __ delayed()->add(O7, frame::pc_return_offset, Oissuing_pc );
 }
 
 void emit_nop(CodeBuffer &cbuf) {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   __ nop();
 }
 
 void emit_illtrap(CodeBuffer &cbuf) {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   __ illtrap(0);
 }
 
 
 intptr_t get_offset_from_base(const MachNode* n, const TypePtr* atype, int disp32) {
@@ -906,11 +906,11 @@
 
   if (src1_enc == R_SP_enc || src1_enc == R_FP_enc) {
     disp += STACK_BIAS;
     // Check that stack offset fits, load into O7 if not
     if (!Assembler::is_simm13(disp)) {
-      MacroAssembler _masm(&cbuf);
+      C2_MacroAssembler _masm(&cbuf);
       __ set(disp, O7);
       if (index != R_G0_enc) {
         __ add(O7, reg_to_register_object(index), O7);
       }
       index = R_O7_enc;
@@ -930,11 +930,11 @@
 
   cbuf.insts()->emit_int32(instr);
 
 #ifdef ASSERT
   if (VerifyOops) {
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     if (is_verified_oop_base) {
       __ verify_oop(reg_to_register_object(src1_enc));
     }
     if (is_verified_oop_store) {
       __ verify_oop(reg_to_register_object(dst_enc));
@@ -958,11 +958,11 @@
   // so far.
   // In this particular case we have skirted around the problem by
   // putting the "mov" instruction in the delay slot but the problem
   // may bite us again at some other point and a cleaner/generic
   // solution using relocations would be needed.
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   __ set_inst_mark();
 
   // We flush the current window just so that there is a valid stack copy
   // the fact that the current window becomes active again instantly is
   // not a problem there is nothing live in it.
@@ -1000,11 +1000,11 @@
 
 
 //=============================================================================
 const RegMask& MachConstantBaseNode::_out_RegMask = PTR_REG_mask();
 
-int Compile::ConstantTable::calculate_table_base_offset() const {
+int ConstantTable::calculate_table_base_offset() const {
   if (UseRDPCForConstantTableBase) {
     // The table base offset might be less but then it fits into
     // simm13 anyway and we are good (cf. MachConstantBaseNode::emit).
     return Assembler::min_simm13();
   } else {
@@ -1021,12 +1021,12 @@
   ShouldNotReachHere();
 }
 
 void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
   Compile* C = ra_->C;
-  Compile::ConstantTable& constant_table = C->constant_table();
-  MacroAssembler _masm(&cbuf);
+  ConstantTable& constant_table = C->output()->constant_table();
+  C2_MacroAssembler _masm(&cbuf);
 
   Register r = as_Register(ra_->get_encode(this));
   CodeSection* consts_section = __ code()->consts();
   int consts_size = consts_section->align_at_start(consts_section->size());
   assert(constant_table.size() == consts_size, "must be: %d == %d", constant_table.size(), consts_size);
@@ -1126,19 +1126,19 @@
 
   if( VerifyThread ) {
     st->print_cr("Verify_Thread"); st->print("\t");
   }
 
-  size_t framesize = C->frame_size_in_bytes();
-  int bangsize = C->bang_size_in_bytes();
+  size_t framesize = C->output()->frame_size_in_bytes();
+  int bangsize = C->output()->bang_size_in_bytes();
 
   // Calls to C2R adapters often do not accept exceptional returns.
   // We require that their callers must bang for them.  But be careful, because
   // some VM calls (such as call site linkage) can use several kilobytes of
   // stack.  But the stack safety zone should account for that.
   // See bugs 4446381, 4468289, 4497237.
-  if (C->need_stack_bang(bangsize)) {
+  if (C->output()->need_stack_bang(bangsize)) {
     st->print_cr("! stack bang (%d bytes)", bangsize); st->print("\t");
   }
 
   if (Assembler::is_simm13(-framesize)) {
     st->print   ("SAVE   R_SP,-" SIZE_FORMAT ",R_SP",framesize);
@@ -1151,45 +1151,45 @@
 }
 #endif
 
 void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
   Compile* C = ra_->C;
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
 
   for (int i = 0; i < OptoPrologueNops; i++) {
     __ nop();
   }
 
   __ verify_thread();
 
-  size_t framesize = C->frame_size_in_bytes();
+  size_t framesize = C->output()->frame_size_in_bytes();
   assert(framesize >= 16*wordSize, "must have room for reg. save area");
   assert(framesize%(2*wordSize) == 0, "must preserve 2*wordSize alignment");
-  int bangsize = C->bang_size_in_bytes();
+  int bangsize = C->output()->bang_size_in_bytes();
 
   // Calls to C2R adapters often do not accept exceptional returns.
   // We require that their callers must bang for them.  But be careful, because
   // some VM calls (such as call site linkage) can use several kilobytes of
   // stack.  But the stack safety zone should account for that.
   // See bugs 4446381, 4468289, 4497237.
-  if (C->need_stack_bang(bangsize)) {
+  if (C->output()->need_stack_bang(bangsize)) {
     __ generate_stack_overflow_check(bangsize);
   }
 
   if (Assembler::is_simm13(-framesize)) {
     __ save(SP, -framesize, SP);
   } else {
     __ sethi(-framesize & ~0x3ff, G3);
     __ add(G3, -framesize & 0x3ff, G3);
     __ save(SP, G3, SP);
   }
-  C->set_frame_complete( __ offset() );
+  C->output()->set_frame_complete( __ offset() );
 
   if (!UseRDPCForConstantTableBase && C->has_mach_constant_base_node()) {
     // NOTE: We set the table base offset here because users might be
     // emitted before MachConstantBaseNode.
-    Compile::ConstantTable& constant_table = C->constant_table();
+    ConstantTable& constant_table = C->output()->constant_table();
     constant_table.set_table_base_offset(constant_table.calculate_table_base_offset());
   }
 }
 
 uint MachPrologNode::size(PhaseRegAlloc *ra_) const {
@@ -1224,11 +1224,11 @@
   st->print("RESTORE");
 }
 #endif
 
 void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   Compile* C = ra_->C;
 
   __ verify_thread();
 
   if (StackReservedPages > 0 && C->has_reserved_stack_access()) {
@@ -1532,11 +1532,11 @@
   st->print("NOP \t# %d bytes pad for loops and calls", 4 * _count);
 }
 #endif
 
 void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *) const {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   for (int i = 0; i < _count; i += 1) {
     __ nop();
   }
 }
 
@@ -1553,11 +1553,11 @@
   st->print("LEA    [R_SP+#%d+BIAS],%s",offset,Matcher::regName[reg]);
 }
 #endif
 
 void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   int offset = ra_->reg2offset(in_RegMask(0).find_first_elem()) + STACK_BIAS;
   int reg = ra_->get_encode(this);
 
   if (Assembler::is_simm13(offset)) {
      __ add(SP, offset, reg_to_register_object(reg));
@@ -1568,11 +1568,11 @@
 }
 
 uint BoxLockNode::size(PhaseRegAlloc *ra_) const {
   // BoxLockNode is not a MachNode, so we can't just call MachNode::size(ra_)
   assert(ra_ == ra_->C->regalloc(), "sanity");
-  return ra_->C->scratch_emit_size(this);
+  return ra_->C->output()->scratch_emit_size(this);
 }
 
 //=============================================================================
 #ifndef PRODUCT
 void MachUEPNode::format( PhaseRegAlloc *ra_, outputStream *st ) const {
@@ -1597,11 +1597,11 @@
   st->print   ("\tTne    xcc,R_G0+ST_RESERVED_FOR_USER_0+2");
 }
 #endif
 
 void MachUEPNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   Register G5_ic_reg  = reg_to_register_object(Matcher::inline_cache_reg_encode());
   Register temp_reg   = G3;
   assert( G5_ic_reg != temp_reg, "conflicting registers" );
 
   // Load klass from receiver
@@ -1622,11 +1622,11 @@
 
 // Emit exception handler code.
 int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf) {
   Register temp_reg = G3;
   AddressLiteral exception_blob(OptoRuntime::exception_blob()->entry_point());
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
 
   address base = __ start_a_stub(size_exception_handler());
   if (base == NULL) {
     ciEnv::current()->record_failure("CodeCache is full");
     return 0;  // CodeBuffer::expand failed
@@ -1647,11 +1647,11 @@
 int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {
   // Can't use any of the current frame's registers as we may have deopted
   // at a poll and everything (including G3) can be live.
   Register temp_reg = L0;
   AddressLiteral deopt_blob(SharedRuntime::deopt_blob()->unpack());
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
 
   address base = __ start_a_stub(size_deopt_handler());
   if (base == NULL) {
     ciEnv::current()->record_failure("CodeCache is full");
     return 0;  // CodeBuffer::expand failed
@@ -2005,11 +2005,11 @@
 // tertiary opcode.  Only the opcode sections which a particular instruction
 // needs for encoding need to be specified.
 encode %{
   enc_class enc_untested %{
 #ifdef ASSERT
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ untested("encoding");
 #endif
   %}
 
   enc_class form3_mem_reg( memory mem, iRegI dst ) %{
@@ -2140,20 +2140,20 @@
     emit3_simm13( cbuf, Assembler::arith_op, R_O1_enc, Assembler::add_op3, R_O7_enc, frame::pc_return_offset );
   %}
 
   /* %%% merge with enc_to_bool */
   enc_class enc_convP2B( iRegI dst, iRegP src ) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     Register   src_reg = reg_to_register_object($src$$reg);
     Register   dst_reg = reg_to_register_object($dst$$reg);
     __ movr(Assembler::rc_nz, src_reg, 1, dst_reg);
   %}
 
   enc_class enc_cadd_cmpLTMask( iRegI p, iRegI q, iRegI y, iRegI tmp ) %{
     // (Set p (AddI (AndI (CmpLTMask p q) y) (SubI p q)))
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     Register   p_reg = reg_to_register_object($p$$reg);
     Register   q_reg = reg_to_register_object($q$$reg);
     Register   y_reg = reg_to_register_object($y$$reg);
     Register tmp_reg = reg_to_register_object($tmp$$reg);
@@ -2282,27 +2282,27 @@
     // CLR    $dst
     emit3( cbuf, Assembler::arith_op, $dst$$reg, Assembler::or_op3 , 0, 0, 0 );
   %}
 
   enc_class enc_PartialSubtypeCheck() %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ call(StubRoutines::Sparc::partial_subtype_check(), relocInfo::runtime_call_type);
     __ delayed()->nop();
   %}
 
   enc_class enc_bp( label labl, cmpOp cmp, flagsReg cc ) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Label* L = $labl$$label;
     Assembler::Predict predict_taken =
       cbuf.is_backward_branch(*L) ? Assembler::pt : Assembler::pn;
 
     __ bp( (Assembler::Condition)($cmp$$cmpcode), false, Assembler::icc, predict_taken, *L);
     __ delayed()->nop();
   %}
 
   enc_class enc_bpr( label labl, cmpOp_reg cmp, iRegI op1 ) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Label* L = $labl$$label;
     Assembler::Predict predict_taken =
       cbuf.is_backward_branch(*L) ? Assembler::pt : Assembler::pn;
 
     __ bpr( (Assembler::RCondition)($cmp$$cmpcode), false, predict_taken, as_Register($op1$$reg), *L);
@@ -2417,18 +2417,18 @@
   enc_class SetHi22( immI src, iRegI rd ) %{
     emit2_22( cbuf, Assembler::branch_op, $rd$$reg, Assembler::sethi_op2, $src$$constant );
   %}
 
   enc_class Set32( immI src, iRegI rd ) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ set($src$$constant, reg_to_register_object($rd$$reg));
   %}
 
   enc_class call_epilog %{
     if( VerifyStackAtCalls ) {
-      MacroAssembler _masm(&cbuf);
-      int framesize = ra_->C->frame_size_in_bytes();
+      C2_MacroAssembler _masm(&cbuf);
+      int framesize = ra_->C->output()->frame_size_in_bytes();
       Register temp_reg = G3;
       __ add(SP, framesize, temp_reg);
       __ cmp(temp_reg, FP);
       __ breakpoint_trap(Assembler::notEqual, Assembler::ptr_cc);
     }
@@ -2445,16 +2445,16 @@
     // The user of this is responsible for ensuring that R_L7 is empty (killed).
     emit_call_reloc(cbuf, $meth$$method, runtime_call_Relocation::spec(), /*preserve_g2=*/true);
   %}
 
   enc_class preserve_SP %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ mov(SP, L7_mh_SP_save);
   %}
 
   enc_class restore_SP %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ mov(L7_mh_SP_save, SP);
   %}
 
   enc_class Java_Static_Call (method meth) %{    // JAVA STATIC CALL
     // CALL to fixup routine.  Fixup routine uses ScopeDesc info to determine
@@ -2475,11 +2475,11 @@
       }
     }
   %}
 
   enc_class Java_Dynamic_Call (method meth) %{    // JAVA DYNAMIC CALL
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ set_inst_mark();
     int vtable_index = this->_vtable_index;
     // MachCallDynamicJavaNode::ret_addr_offset uses this same test
     if (vtable_index < 0) {
       // must be invalid_vtable_index, not nonvirtual_vtable_index
@@ -2524,11 +2524,11 @@
       __ delayed()->nop();
     }
   %}
 
   enc_class Java_Compiled_Call (method meth) %{    // JAVA COMPILED CALL
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     Register G5_ic_reg = reg_to_register_object(Matcher::inline_cache_reg_encode());
     Register temp_reg = G3;   // caller must kill G3!  We cannot reuse G5_ic_reg here because
                               // we might be calling a C2I adapter which needs it.
 
@@ -2541,33 +2541,33 @@
     __ callr(temp_reg, G0);
     __ delayed()->nop();
   %}
 
 enc_class idiv_reg(iRegIsafe src1, iRegIsafe src2, iRegIsafe dst) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Register Rdividend = reg_to_register_object($src1$$reg);
     Register Rdivisor = reg_to_register_object($src2$$reg);
     Register Rresult = reg_to_register_object($dst$$reg);
 
     __ sra(Rdivisor, 0, Rdivisor);
     __ sra(Rdividend, 0, Rdividend);
     __ sdivx(Rdividend, Rdivisor, Rresult);
 %}
 
 enc_class idiv_imm(iRegIsafe src1, immI13 imm, iRegIsafe dst) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     Register Rdividend = reg_to_register_object($src1$$reg);
     int divisor = $imm$$constant;
     Register Rresult = reg_to_register_object($dst$$reg);
 
     __ sra(Rdividend, 0, Rdividend);
     __ sdivx(Rdividend, divisor, Rresult);
 %}
 
 enc_class enc_mul_hi(iRegIsafe dst, iRegIsafe src1, iRegIsafe src2) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Register Rsrc1 = reg_to_register_object($src1$$reg);
     Register Rsrc2 = reg_to_register_object($src2$$reg);
     Register Rdst  = reg_to_register_object($dst$$reg);
 
     __ sra( Rsrc1, 0, Rsrc1 );
@@ -2575,11 +2575,11 @@
     __ mulx( Rsrc1, Rsrc2, Rdst );
     __ srlx( Rdst, 32, Rdst );
 %}
 
 enc_class irem_reg(iRegIsafe src1, iRegIsafe src2, iRegIsafe dst, o7RegL scratch) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Register Rdividend = reg_to_register_object($src1$$reg);
     Register Rdivisor = reg_to_register_object($src2$$reg);
     Register Rresult = reg_to_register_object($dst$$reg);
     Register Rscratch = reg_to_register_object($scratch$$reg);
 
@@ -2592,11 +2592,11 @@
     __ mulx(Rscratch, Rdivisor, Rscratch);
     __ sub(Rdividend, Rscratch, Rresult);
 %}
 
 enc_class irem_imm(iRegIsafe src1, immI13 imm, iRegIsafe dst, o7RegL scratch) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     Register Rdividend = reg_to_register_object($src1$$reg);
     int divisor = $imm$$constant;
     Register Rresult = reg_to_register_object($dst$$reg);
     Register Rscratch = reg_to_register_object($scratch$$reg);
@@ -2608,134 +2608,134 @@
     __ mulx(Rscratch, divisor, Rscratch);
     __ sub(Rdividend, Rscratch, Rresult);
 %}
 
 enc_class fabss (sflt_reg dst, sflt_reg src) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Fdst = reg_to_SingleFloatRegister_object($dst$$reg);
     FloatRegister Fsrc = reg_to_SingleFloatRegister_object($src$$reg);
 
     __ fabs(FloatRegisterImpl::S, Fsrc, Fdst);
 %}
 
 enc_class fabsd (dflt_reg dst, dflt_reg src) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Fdst = reg_to_DoubleFloatRegister_object($dst$$reg);
     FloatRegister Fsrc = reg_to_DoubleFloatRegister_object($src$$reg);
 
     __ fabs(FloatRegisterImpl::D, Fsrc, Fdst);
 %}
 
 enc_class fnegd (dflt_reg dst, dflt_reg src) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Fdst = reg_to_DoubleFloatRegister_object($dst$$reg);
     FloatRegister Fsrc = reg_to_DoubleFloatRegister_object($src$$reg);
 
     __ fneg(FloatRegisterImpl::D, Fsrc, Fdst);
 %}
 
 enc_class fsqrts (sflt_reg dst, sflt_reg src) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Fdst = reg_to_SingleFloatRegister_object($dst$$reg);
     FloatRegister Fsrc = reg_to_SingleFloatRegister_object($src$$reg);
 
     __ fsqrt(FloatRegisterImpl::S, Fsrc, Fdst);
 %}
 
 enc_class fsqrtd (dflt_reg dst, dflt_reg src) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Fdst = reg_to_DoubleFloatRegister_object($dst$$reg);
     FloatRegister Fsrc = reg_to_DoubleFloatRegister_object($src$$reg);
 
     __ fsqrt(FloatRegisterImpl::D, Fsrc, Fdst);
 %}
 
 
 enc_class fmadds (sflt_reg dst, sflt_reg a, sflt_reg b, sflt_reg c) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Frd = reg_to_SingleFloatRegister_object($dst$$reg);
     FloatRegister Fra = reg_to_SingleFloatRegister_object($a$$reg);
     FloatRegister Frb = reg_to_SingleFloatRegister_object($b$$reg);
     FloatRegister Frc = reg_to_SingleFloatRegister_object($c$$reg);
 
     __ fmadd(FloatRegisterImpl::S, Fra, Frb, Frc, Frd);
 %}
 
 enc_class fmaddd (dflt_reg dst, dflt_reg a, dflt_reg b, dflt_reg c) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Frd = reg_to_DoubleFloatRegister_object($dst$$reg);
     FloatRegister Fra = reg_to_DoubleFloatRegister_object($a$$reg);
     FloatRegister Frb = reg_to_DoubleFloatRegister_object($b$$reg);
     FloatRegister Frc = reg_to_DoubleFloatRegister_object($c$$reg);
 
     __ fmadd(FloatRegisterImpl::D, Fra, Frb, Frc, Frd);
 %}
 
 enc_class fmsubs (sflt_reg dst, sflt_reg a, sflt_reg b, sflt_reg c) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Frd = reg_to_SingleFloatRegister_object($dst$$reg);
     FloatRegister Fra = reg_to_SingleFloatRegister_object($a$$reg);
     FloatRegister Frb = reg_to_SingleFloatRegister_object($b$$reg);
     FloatRegister Frc = reg_to_SingleFloatRegister_object($c$$reg);
 
     __ fmsub(FloatRegisterImpl::S, Fra, Frb, Frc, Frd);
 %}
 
 enc_class fmsubd (dflt_reg dst, dflt_reg a, dflt_reg b, dflt_reg c) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Frd = reg_to_DoubleFloatRegister_object($dst$$reg);
     FloatRegister Fra = reg_to_DoubleFloatRegister_object($a$$reg);
     FloatRegister Frb = reg_to_DoubleFloatRegister_object($b$$reg);
     FloatRegister Frc = reg_to_DoubleFloatRegister_object($c$$reg);
 
     __ fmsub(FloatRegisterImpl::D, Fra, Frb, Frc, Frd);
 %}
 
 enc_class fnmadds (sflt_reg dst, sflt_reg a, sflt_reg b, sflt_reg c) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Frd = reg_to_SingleFloatRegister_object($dst$$reg);
     FloatRegister Fra = reg_to_SingleFloatRegister_object($a$$reg);
     FloatRegister Frb = reg_to_SingleFloatRegister_object($b$$reg);
     FloatRegister Frc = reg_to_SingleFloatRegister_object($c$$reg);
 
     __ fnmadd(FloatRegisterImpl::S, Fra, Frb, Frc, Frd);
 %}
 
 enc_class fnmaddd (dflt_reg dst, dflt_reg a, dflt_reg b, dflt_reg c) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Frd = reg_to_DoubleFloatRegister_object($dst$$reg);
     FloatRegister Fra = reg_to_DoubleFloatRegister_object($a$$reg);
     FloatRegister Frb = reg_to_DoubleFloatRegister_object($b$$reg);
     FloatRegister Frc = reg_to_DoubleFloatRegister_object($c$$reg);
 
     __ fnmadd(FloatRegisterImpl::D, Fra, Frb, Frc, Frd);
 %}
 
 enc_class fnmsubs (sflt_reg dst, sflt_reg a, sflt_reg b, sflt_reg c) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Frd = reg_to_SingleFloatRegister_object($dst$$reg);
     FloatRegister Fra = reg_to_SingleFloatRegister_object($a$$reg);
     FloatRegister Frb = reg_to_SingleFloatRegister_object($b$$reg);
     FloatRegister Frc = reg_to_SingleFloatRegister_object($c$$reg);
 
     __ fnmsub(FloatRegisterImpl::S, Fra, Frb, Frc, Frd);
 %}
 
 enc_class fnmsubd (dflt_reg dst, dflt_reg a, dflt_reg b, dflt_reg c) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Frd = reg_to_DoubleFloatRegister_object($dst$$reg);
     FloatRegister Fra = reg_to_DoubleFloatRegister_object($a$$reg);
     FloatRegister Frb = reg_to_DoubleFloatRegister_object($b$$reg);
     FloatRegister Frc = reg_to_DoubleFloatRegister_object($c$$reg);
@@ -2743,29 +2743,29 @@
     __ fnmsub(FloatRegisterImpl::D, Fra, Frb, Frc, Frd);
 %}
 
 
 enc_class fmovs (dflt_reg dst, dflt_reg src) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Fdst = reg_to_SingleFloatRegister_object($dst$$reg);
     FloatRegister Fsrc = reg_to_SingleFloatRegister_object($src$$reg);
 
     __ fmov(FloatRegisterImpl::S, Fsrc, Fdst);
 %}
 
 enc_class fmovd (dflt_reg dst, dflt_reg src) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     FloatRegister Fdst = reg_to_DoubleFloatRegister_object($dst$$reg);
     FloatRegister Fsrc = reg_to_DoubleFloatRegister_object($src$$reg);
 
     __ fmov(FloatRegisterImpl::D, Fsrc, Fdst);
 %}
 
 enc_class Fast_Lock(iRegP oop, iRegP box, o7RegP scratch, iRegP scratch2) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     Register Roop  = reg_to_register_object($oop$$reg);
     Register Rbox  = reg_to_register_object($box$$reg);
     Register Rscratch = reg_to_register_object($scratch$$reg);
     Register Rmark =    reg_to_register_object($scratch2$$reg);
@@ -2777,11 +2777,11 @@
 
     __ compiler_lock_object(Roop, Rmark, Rbox, Rscratch, _counters, UseBiasedLocking && !UseOptoBiasInlining);
 %}
 
 enc_class Fast_Unlock(iRegP oop, iRegP box, o7RegP scratch, iRegP scratch2) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     Register Roop  = reg_to_register_object($oop$$reg);
     Register Rbox  = reg_to_register_object($box$$reg);
     Register Rscratch = reg_to_register_object($scratch$$reg);
     Register Rmark =    reg_to_register_object($scratch2$$reg);
@@ -2793,11 +2793,11 @@
 
     __ compiler_unlock_object(Roop, Rmark, Rbox, Rscratch, UseBiasedLocking && !UseOptoBiasInlining);
   %}
 
   enc_class enc_cas( iRegP mem, iRegP old, iRegP new ) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Register Rmem = reg_to_register_object($mem$$reg);
     Register Rold = reg_to_register_object($old$$reg);
     Register Rnew = reg_to_register_object($new$$reg);
 
     __ cas_ptr(Rmem, Rold, Rnew); // Swap(*Rmem,Rnew) if *Rmem == Rold
@@ -2807,11 +2807,11 @@
   enc_class enc_casx( iRegP mem, iRegL old, iRegL new) %{
     Register Rmem = reg_to_register_object($mem$$reg);
     Register Rold = reg_to_register_object($old$$reg);
     Register Rnew = reg_to_register_object($new$$reg);
 
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ mov(Rnew, O7);
     __ casx(Rmem, Rold, O7);
     __ cmp( Rold, O7 );
   %}
 
@@ -2819,11 +2819,11 @@
   enc_class enc_casi( iRegP mem, iRegL old, iRegL new) %{
     Register Rmem = reg_to_register_object($mem$$reg);
     Register Rold = reg_to_register_object($old$$reg);
     Register Rnew = reg_to_register_object($new$$reg);
 
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ mov(Rnew, O7);
     __ cas(Rmem, Rold, O7);
     __ cmp( Rold, O7 );
   %}
 
@@ -2831,42 +2831,42 @@
   enc_class enc_casi_exch( iRegP mem, iRegL old, iRegL new) %{
     Register Rmem = reg_to_register_object($mem$$reg);
     Register Rold = reg_to_register_object($old$$reg);
     Register Rnew = reg_to_register_object($new$$reg);
 
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ cas(Rmem, Rold, Rnew);
   %}
 
   // 64-bit cas without using tmp register for compareAndExchange
   enc_class enc_casx_exch( iRegP mem, iRegL old, iRegL new) %{
     Register Rmem = reg_to_register_object($mem$$reg);
     Register Rold = reg_to_register_object($old$$reg);
     Register Rnew = reg_to_register_object($new$$reg);
 
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ casx(Rmem, Rold, Rnew);
   %}
 
   enc_class enc_lflags_ne_to_boolean( iRegI res ) %{
     Register Rres = reg_to_register_object($res$$reg);
 
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ mov(1, Rres);
     __ movcc( Assembler::notEqual, false, Assembler::xcc, G0, Rres );
   %}
 
   enc_class enc_iflags_ne_to_boolean( iRegI res ) %{
     Register Rres = reg_to_register_object($res$$reg);
 
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ mov(1, Rres);
     __ movcc( Assembler::notEqual, false, Assembler::icc, G0, Rres );
   %}
 
   enc_class floating_cmp ( iRegP dst, regF src1, regF src2 ) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Register Rdst = reg_to_register_object($dst$$reg);
     FloatRegister Fsrc1 = $primary ? reg_to_SingleFloatRegister_object($src1$$reg)
                                      : reg_to_DoubleFloatRegister_object($src1$$reg);
     FloatRegister Fsrc2 = $primary ? reg_to_SingleFloatRegister_object($src2$$reg)
                                      : reg_to_DoubleFloatRegister_object($src2$$reg);
@@ -2878,11 +2878,11 @@
   enc_class enc_rethrow() %{
     cbuf.set_insts_mark();
     Register temp_reg = G3;
     AddressLiteral rethrow_stub(OptoRuntime::rethrow_stub());
     assert(temp_reg != reg_to_register_object(R_I0_num), "temp must not break oop_reg");
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 #ifdef ASSERT
     __ save_frame(0);
     AddressLiteral last_rethrow_addrlit(&last_rethrow);
     __ sethi(last_rethrow_addrlit, L1);
     Address addr(L1, last_rethrow_addrlit.low10());
@@ -2909,21 +2909,21 @@
     // Generates the instruction BPN,PN .
     cbuf.insts()->emit_int32((unsigned int) 0x00400000);
   %}
 
   enc_class enc_membar_acquire %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ membar( Assembler::Membar_mask_bits(Assembler::LoadStore | Assembler::LoadLoad) );
   %}
 
   enc_class enc_membar_release %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ membar( Assembler::Membar_mask_bits(Assembler::LoadStore | Assembler::StoreStore) );
   %}
 
   enc_class enc_membar_volatile %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ membar( Assembler::Membar_mask_bits(Assembler::StoreLoad) );
   %}
 
 %}
 
@@ -8852,11 +8852,11 @@
     Register label_reg = O7;
     // If we are calculating the size of this instruction don't trust
     // zero offsets because they might change when
     // MachConstantBaseNode decides to optimize the constant table
     // base.
-    if ((constant_offset() == 0) && !Compile::current()->in_scratch_emit_size()) {
+    if ((constant_offset() == 0) && !Compile::current()->output()->in_scratch_emit_size()) {
       table_reg = $constanttablebase;
     } else {
       table_reg = O7;
       RegisterOrConstant con_offset = __ ensure_simm13_or_reg($constantoffset, O7);
       __ add($constanttablebase, con_offset, table_reg);
