diff a/src/hotspot/cpu/s390/s390.ad b/src/hotspot/cpu/s390/s390.ad
--- a/src/hotspot/cpu/s390/s390.ad
+++ b/src/hotspot/cpu/s390/s390.ad
@@ -662,17 +662,17 @@
 bool SafePointNode::needs_polling_address_input() {
   return true;
 }
 
 void emit_nop(CodeBuffer &cbuf) {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   __ z_nop();
 }
 
 // Emit an interrupt that is caught by the debugger (for debugging compiler).
 void emit_break(CodeBuffer &cbuf) {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   __ z_illtrap();
 }
 
 #if !defined(PRODUCT)
 void MachBreakpointNode::format(PhaseRegAlloc *, outputStream *os) const {
@@ -733,19 +733,19 @@
   return 6;
 }
 
 // Check effective address (at runtime) for required alignment.
 static inline void z_assert_aligned(CodeBuffer &cbuf, int disp, Register index, Register base, int alignment) {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
 
   __ z_lay(Z_R0, disp, index, base);
   __ z_nill(Z_R0, alignment-1);
   __ z_brc(Assembler::bcondEqual, +3);
   __ z_illtrap();
 }
 
-int emit_call_reloc(MacroAssembler &_masm, intptr_t entry_point, relocInfo::relocType rtype,
+int emit_call_reloc(C2_MacroAssembler &_masm, intptr_t entry_point, relocInfo::relocType rtype,
                     PhaseRegAlloc* ra_, bool is_native_call = false) {
   __ set_inst_mark(); // Used in z_enc_java_static_call() and emit_java_to_interp().
   address old_mark = __ inst_mark();
   unsigned int start_off = __ offset();
 
@@ -772,11 +772,11 @@
   unsigned int ret_off = __ offset();
 
   return (ret_off - start_off);
 }
 
-static int emit_call_reloc(MacroAssembler &_masm, intptr_t entry_point, RelocationHolder const& rspec) {
+static int emit_call_reloc(C2_MacroAssembler &_masm, intptr_t entry_point, RelocationHolder const& rspec) {
   __ set_inst_mark(); // Used in z_enc_java_static_call() and emit_java_to_interp().
   address old_mark = __ inst_mark();
   unsigned int start_off = __ offset();
 
   relocInfo::relocType rtype = rspec.type();
@@ -793,11 +793,11 @@
 }
 
 //=============================================================================
 
 const RegMask& MachConstantBaseNode::_out_RegMask = _Z_PTR_REG_mask;
-int Compile::ConstantTable::calculate_table_base_offset() const {
+int ConstantTable::calculate_table_base_offset() const {
   return 0;  // absolute addressing, no offset
 }
 
 bool MachConstantBaseNode::requires_postalloc_expand() const { return false; }
 void MachConstantBaseNode::postalloc_expand(GrowableArray <Node *> *nodes, PhaseRegAlloc *ra_) {
@@ -805,11 +805,11 @@
 }
 
 // Even with PC-relative TOC addressing, we still need this node.
 // Float loads/stores do not support PC-relative addresses.
 void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   Register Rtoc = as_Register(ra_->get_encode(this));
   __ load_toc(Rtoc);
 }
 
 uint MachConstantBaseNode::size(PhaseRegAlloc* ra_) const {
@@ -838,34 +838,34 @@
   if (VerifyThread) {
     st->print_cr("Verify_Thread");
     st->print("\t");
   }
 
-  long framesize = C->frame_size_in_bytes();
-  int bangsize   = C->bang_size_in_bytes();
+  long framesize = C->output()->frame_size_in_bytes();
+  int bangsize   = C->output()->bang_size_in_bytes();
 
   // Calls to C2R adapters often do not accept exceptional returns.
   // We require that their callers must bang for them. But be
   // careful, because some VM calls (such as call site linkage) can
   // use several kilobytes of stack. But the stack safety zone should
   // account for that. See bugs 4446381, 4468289, 4497237.
-  if (C->need_stack_bang(bangsize) && UseStackBanging) {
+  if (C->output()->need_stack_bang(bangsize) && UseStackBanging) {
     st->print_cr("# stack bang"); st->print("\t");
   }
   st->print_cr("push_frame %d", (int)-framesize);
   st->print("\t");
 }
 #endif
 
 void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
   Compile* C = ra_->C;
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
 
   __ verify_thread();
 
-  size_t framesize = C->frame_size_in_bytes();
-  size_t bangsize  = C->bang_size_in_bytes();
+  size_t framesize = C->output()->frame_size_in_bytes();
+  size_t bangsize  = C->output()->bang_size_in_bytes();
 
   assert(framesize % wordSize == 0, "must preserve wordSize alignment");
 
   if (C->clinit_barrier_on_entry()) {
     assert(!C->method()->holder()->is_not_initialized(), "initialization should have been started");
@@ -887,11 +887,11 @@
   // Calls to C2R adapters often do not accept exceptional returns.
   // We require that their callers must bang for them. But be
   // careful, because some VM calls (such as call site linkage) can
   // use several kilobytes of stack. But the stack safety zone should
   // account for that. See bugs 4446381, 4468289, 4497237.
-  if (C->need_stack_bang(bangsize) && UseStackBanging) {
+  if (C->output()->need_stack_bang(bangsize) && UseStackBanging) {
     __ generate_stack_overflow_check(bangsize);
   }
 
   assert(Immediate::is_uimm32((long)framesize), "to do: choose suitable types!");
   __ save_return_pc();
@@ -901,11 +901,11 @@
   __ push_frame((unsigned int)framesize/*includes JIT ABI*/);
 
   if (C->has_mach_constant_base_node()) {
     // NOTE: We set the table base offset here because users might be
     // emitted before MachConstantBaseNode.
-    Compile::ConstantTable& constant_table = C->constant_table();
+    ConstantTable& constant_table = C->output()->constant_table();
     constant_table.set_table_base_offset(constant_table.calculate_table_base_offset());
   }
 }
 
 uint MachPrologNode::size(PhaseRegAlloc *ra_) const {
@@ -930,19 +930,19 @@
   }
 }
 #endif
 
 void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   Compile* C = ra_->C;
   __ verify_thread();
 
   // If this does safepoint polling, then do it here.
   bool need_polling = do_polling() && C->is_method_compilation();
 
   // Pop frame, restore return_pc, and all stuff needed by interpreter.
-  int frame_size_in_bytes = Assembler::align((C->frame_slots() << LogBytesPerInt), frame::alignment_in_bytes);
+  int frame_size_in_bytes = Assembler::align((C->output()->frame_slots() << LogBytesPerInt), frame::alignment_in_bytes);
   __ pop_frame_restore_retPC(frame_size_in_bytes);
 
   if (StackReservedPages > 0 && C->has_reserved_stack_access()) {
     __ reserved_stack_check(Z_R14);
   }
@@ -1032,11 +1032,11 @@
   return (opcode > (1L << 32)) ? 6 : 4;
 }
 
 static unsigned int z_mvc_helper(CodeBuffer *cbuf, int len, int dst_off, int src_off, bool do_print, outputStream *os) {
   if (cbuf) {
-    MacroAssembler _masm(cbuf);
+    C2_MacroAssembler _masm(cbuf);
     __ z_mvc(dst_off, len-1, Z_SP, src_off, Z_SP);
   }
 
 #if !defined(PRODUCT)
   else if (do_print) {
@@ -1106,11 +1106,11 @@
   }
 
   // Check for integer reg-reg copy.
   if (src_lo_rc == rc_int && dst_lo_rc == rc_int) {
     if (cbuf) {
-      MacroAssembler _masm(cbuf);
+      C2_MacroAssembler _masm(cbuf);
       Register Rsrc = as_Register(Matcher::_regEncode[src_lo]);
       Register Rdst = as_Register(Matcher::_regEncode[dst_lo]);
       __ z_lgr(Rdst, Rsrc);
       return 4;
     }
@@ -1153,11 +1153,11 @@
   }
 
   // Check for float reg-reg copy.
   if (src_lo_rc == rc_float && dst_lo_rc == rc_float) {
     if (cbuf) {
-      MacroAssembler _masm(cbuf);
+      C2_MacroAssembler _masm(cbuf);
       FloatRegister Rsrc = as_FloatRegister(Matcher::_regEncode[src_lo]);
       FloatRegister Rdst = as_FloatRegister(Matcher::_regEncode[dst_lo]);
       __ z_ldr(Rdst, Rsrc);
       return 2;
     }
@@ -1252,25 +1252,25 @@
   os->print("NOP     # pad for alignment (%d nops, %d bytes)", _count, _count*MacroAssembler::nop_size());
 }
 #endif
 
 void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc * ra_) const {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
 
   int rem_space = 0;
-  if (!(ra_->C->in_scratch_emit_size())) {
+  if (!(ra_->C->output()->in_scratch_emit_size())) {
     rem_space = cbuf.insts()->remaining();
     if (rem_space <= _count*2 + 8) {
       tty->print("NopNode: _count = %3.3d, remaining space before = %d", _count, rem_space);
     }
   }
 
   for (int i = 0; i < _count; i++) {
     __ z_nop();
   }
 
-  if (!(ra_->C->in_scratch_emit_size())) {
+  if (!(ra_->C->output()->in_scratch_emit_size())) {
     if (rem_space <= _count*2 + 8) {
       int rem_space2 = cbuf.insts()->remaining();
       tty->print_cr(", after = %d", rem_space2);
     }
   }
@@ -1292,11 +1292,11 @@
 }
 #endif
 
 // Take care of the size function, if you make changes here!
 void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
 
   int offset = ra_->reg2offset(in_RegMask(0).find_first_elem());
   int reg = ra_->get_encode(this);
   __ z_lay(as_Register(reg), offset, Z_SP);
 }
@@ -1358,11 +1358,11 @@
   os->print_cr("\tBRU     ic_miss");
 }
 #endif
 
 void MachUEPNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   const int ic_miss_offset = 2;
 
   // Inline_cache contains a klass.
   Register ic_klass = as_Register(Matcher::inline_cache_reg_encode());
   // ARG1 is the receiver oop.
@@ -1453,11 +1453,11 @@
 // 3) The handler will get patched such that it does not jump to the
 //   exception blob, but to an entry in the deoptimization blob being
 //   aware of the exception.
 int HandlerImpl::emit_exception_handler(CodeBuffer &cbuf) {
   Register temp_reg = Z_R1;
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
 
   address base = __ start_a_stub(size_exception_handler());
   if (base == NULL) {
     return 0;          // CodeBuffer::expand failed
   }
@@ -1474,11 +1474,11 @@
   return offset;
 }
 
 // Emit deopt handler code.
 int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {
-  MacroAssembler _masm(&cbuf);
+  C2_MacroAssembler _masm(&cbuf);
   address        base = __ start_a_stub(size_deopt_handler());
 
   if (base == NULL) {
     return 0;  // CodeBuffer::expand failed
   }
@@ -1839,17 +1839,17 @@
 // opcode keyword to specify, in order, their primary, secondary, and
 // tertiary opcode. Only the opcode sections which a particular instruction
 // needs for encoding need to be specified.
 encode %{
   enc_class enc_unimplemented %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ unimplemented("Unimplemented mach node encoding in AD file.", 13);
   %}
 
   enc_class enc_untested %{
 #ifdef ASSERT
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     __ untested("Untested mach node encoding in AD file.");
 #endif
   %}
 
   enc_class z_rrform(iRegI dst, iRegI src) %{
@@ -2031,11 +2031,11 @@
                   Assembler::reg($dst$$reg, 8, 48) |
                   Assembler::simm20($mem$$disp) |
                   Assembler::reg(Ridx, 12, 48) |
                   Assembler::regz(reg_to_register_object($mem$$base), 16, 48));
     } else {
-        MacroAssembler _masm(&cbuf);
+        C2_MacroAssembler _masm(&cbuf);
         __ load_const_optimized(Z_R1_scratch, $mem$$disp);
         if (Ridx != Z_R0) { __ z_agr(Z_R1_scratch, Ridx); }
         z_emit_inst(cbuf, $secondary |
                     Assembler::reg($dst$$reg, 8, isize) |
                     Assembler::uimm12(0, 20, isize) |
@@ -2043,11 +2043,11 @@
                     Assembler::regz(reg_to_register_object($mem$$base), 16, isize));
     }
   %}
 
   enc_class z_enc_brul(Label lbl) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Label* p = $lbl$$label;
 
     // 'p' is `NULL' when this encoding class is used only to
     // determine the size of the encoded instruction.
     // Use a bound dummy label in that case.
@@ -2056,11 +2056,11 @@
     Label& l = (NULL == p) ? d : *(p);
     __ z_brul(l);
   %}
 
   enc_class z_enc_bru(Label lbl) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Label* p = $lbl$$label;
 
     // 'p' is `NULL' when this encoding class is used only to
     // determine the size of the encoded instruction.
     // Use a bound dummy label in that case.
@@ -2069,11 +2069,11 @@
     Label& l = (NULL == p) ? d : *(p);
     __ z_bru(l);
   %}
 
   enc_class z_enc_branch_con_far(cmpOp cmp, Label lbl) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Label* p = $lbl$$label;
 
     // 'p' is `NULL' when this encoding class is used only to
     // determine the size of the encoded instruction.
     // Use a bound dummy label in that case.
@@ -2082,11 +2082,11 @@
     Label& l = (NULL == p) ? d : *(p);
     __ z_brcl((Assembler::branch_condition)$cmp$$cmpcode, l);
   %}
 
   enc_class z_enc_branch_con_short(cmpOp cmp, Label lbl) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Label* p = $lbl$$label;
 
     // 'p' is `NULL' when this encoding class is used only to
     // determine the size of the encoded instruction.
     // Use a bound dummy label in that case.
@@ -2095,11 +2095,11 @@
     Label& l = (NULL == p) ? d : *(p);
     __ z_brc((Assembler::branch_condition)$cmp$$cmpcode, l);
   %}
 
   enc_class z_enc_cmpb_regreg(iRegI src1, iRegI src2, Label lbl, cmpOpT cmp) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Label* p = $lbl$$label;
 
     // 'p' is `NULL' when this encoding class is used only to
     // determine the size of the encoded instruction.
     // Use a bound dummy label in that case.
@@ -2119,11 +2119,11 @@
       __ z_clgrj($src1$$Register, $src2$$Register, cc, l);
     }
   %}
 
   enc_class z_enc_cmpb_regregFar(iRegI src1, iRegI src2, Label lbl, cmpOpT cmp) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Label* p = $lbl$$label;
 
     // 'p' is `NULL' when this encoding class is used only to
     // determine the size of the encoded instruction.
     // Use a bound dummy label in that case.
@@ -2145,11 +2145,11 @@
 
     __ z_brcl((Assembler::branch_condition)$cmp$$cmpcode, l);
   %}
 
   enc_class z_enc_cmpb_regimm(iRegI src1, immI8 src2, Label lbl, cmpOpT cmp) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Label* p = $lbl$$label;
 
     // 'p' is `NULL' when this encoding class is used only to
     // determine the size of the encoded instruction.
     // Use a bound dummy label in that case.
@@ -2170,11 +2170,11 @@
       __ z_clgij($src1$$Register, $src2$$constant, cc, l);
     }
   %}
 
   enc_class z_enc_cmpb_regimmFar(iRegI src1, immI8 src2, Label lbl, cmpOpT cmp) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Label* p = $lbl$$label;
 
     // 'p' is `NULL' when this encoding class is used only to
     // determine the size of the encoded instruction.
     // Use a bound dummy label in that case.
@@ -2197,11 +2197,11 @@
     __ z_brcl((Assembler::branch_condition)$cmp$$cmpcode, l);
   %}
 
   // Call from Java to runtime.
   enc_class z_enc_java_to_runtime_call(method meth) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
 
     // Save return pc before call to the place where we need it, since
     // callee doesn't.
     unsigned int start_off = __ offset();
     // Compute size of "larl + stg + call_c_opt".
@@ -2225,11 +2225,11 @@
   %}
 
   enc_class z_enc_java_static_call(method meth) %{
     // Call to fixup routine. Fixup routine uses ScopeDesc info to determine
     // whom we intended to call.
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     int ret_offset = 0;
 
     if (!_method) {
       ret_offset = emit_call_reloc(_masm, $meth$$method,
                                    relocInfo::runtime_call_w_cp_type, ra_);
@@ -2254,11 +2254,11 @@
     }
   %}
 
   // Java dynamic call
   enc_class z_enc_java_dynamic_call(method meth) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     unsigned int start_off = __ offset();
 
     int vtable_index = this->_vtable_index;
     if (vtable_index == -4) {
       Register ic_reg = reg_to_register_object(Matcher::inline_cache_reg_encode());
@@ -2309,11 +2309,11 @@
       unsigned int ret_off = __ offset();
     }
   %}
 
   enc_class z_enc_cmov_reg(cmpOp cmp, iRegI dst, iRegI src) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Register Rdst = reg_to_register_object($dst$$reg);
     Register Rsrc = reg_to_register_object($src$$reg);
 
     // Don't emit code if operands are identical (same register).
     if (Rsrc != Rdst) {
@@ -2330,11 +2330,11 @@
       }
     }
   %}
 
   enc_class z_enc_cmov_imm(cmpOp cmp, iRegI dst, immI16 src) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Register Rdst = reg_to_register_object($dst$$reg);
     int      Csrc = $src$$constant;
     Assembler::branch_condition cc = (Assembler::branch_condition)$cmp$$cmpcode;
     Label done;
     // Branch if not (cmp cr).
@@ -2347,11 +2347,11 @@
     }
     __ bind(done);
   %}
 
   enc_class z_enc_cctobool(iRegI res) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Register Rres = reg_to_register_object($res$$reg);
 
     if (VM_Version::has_LoadStoreConditional()) {
       __ load_const_optimized(Z_R0_scratch, 0L); // false (failed)
       __ load_const_optimized(Rres, 1L);         // true  (succeed)
@@ -2364,29 +2364,29 @@
       __ bind(done);
     }
   %}
 
   enc_class z_enc_casI(iRegI compare_value, iRegI exchange_value, iRegP addr_ptr) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Register Rcomp = reg_to_register_object($compare_value$$reg);
     Register Rnew  = reg_to_register_object($exchange_value$$reg);
     Register Raddr = reg_to_register_object($addr_ptr$$reg);
 
     __ z_cs(Rcomp, Rnew, 0, Raddr);
   %}
 
   enc_class z_enc_casL(iRegL compare_value, iRegL exchange_value, iRegP addr_ptr) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Register Rcomp = reg_to_register_object($compare_value$$reg);
     Register Rnew  = reg_to_register_object($exchange_value$$reg);
     Register Raddr = reg_to_register_object($addr_ptr$$reg);
 
     __ z_csg(Rcomp, Rnew, 0, Raddr);
   %}
 
   enc_class z_enc_SwapI(memoryRSY mem, iRegI dst, iRegI tmp) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Register Rdst = reg_to_register_object($dst$$reg);
     Register Rtmp = reg_to_register_object($tmp$$reg);
     guarantee(Rdst != Rtmp, "Fix match rule to use TEMP_DEF");
     Label    retry;
 
@@ -2398,11 +2398,11 @@
       __ z_brne(retry);                    // Yikes, concurrent update, need to retry.
     __ z_lgr(Rdst, Rtmp);                  // Exchanged value from memory is return value.
   %}
 
   enc_class z_enc_SwapL(memoryRSY mem, iRegL dst, iRegL tmp) %{
-    MacroAssembler _masm(&cbuf);
+    C2_MacroAssembler _masm(&cbuf);
     Register Rdst = reg_to_register_object($dst$$reg);
     Register Rtmp = reg_to_register_object($tmp$$reg);
     guarantee(Rdst != Rtmp, "Fix match rule to use TEMP_DEF");
     Label    retry;
 
