diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/TagletWriterImpl.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/TagletWriterImpl.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/TagletWriterImpl.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/TagletWriterImpl.java
@@ -39,20 +39,23 @@
 
 import com.sun.source.doctree.DocTree;
 import com.sun.source.doctree.IndexTree;
 import com.sun.source.doctree.ParamTree;
 import com.sun.source.doctree.SystemPropertyTree;
+import jdk.javadoc.internal.doclets.formats.html.SearchIndexItem.Category;
 import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;
 import jdk.javadoc.internal.doclets.formats.html.markup.RawHtml;
 import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;
 import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;
 import jdk.javadoc.internal.doclets.toolkit.Content;
+import jdk.javadoc.internal.doclets.toolkit.DocFileElement;
 import jdk.javadoc.internal.doclets.toolkit.DocletElement;
 import jdk.javadoc.internal.doclets.toolkit.Resources;
 import jdk.javadoc.internal.doclets.toolkit.builders.SerializedFormBuilder;
+import jdk.javadoc.internal.doclets.toolkit.taglets.ParamTaglet;
 import jdk.javadoc.internal.doclets.toolkit.taglets.TagletWriter;
 import jdk.javadoc.internal.doclets.toolkit.util.CommentHelper;
 import jdk.javadoc.internal.doclets.toolkit.util.DocLink;
 import jdk.javadoc.internal.doclets.toolkit.util.DocPath;
 import jdk.javadoc.internal.doclets.toolkit.util.DocPaths;
@@ -74,10 +77,11 @@
     private final HtmlConfiguration configuration;
     private final HtmlOptions options;
     private final Utils utils;
     private final boolean inSummary;
     private final Resources resources;
+    private final Contents contents;
 
     public TagletWriterImpl(HtmlDocletWriter htmlWriter, boolean isFirstSentence) {
         this(htmlWriter, isFirstSentence, false);
     }
 
@@ -87,10 +91,11 @@
         this.inSummary = inSummary;
         configuration = htmlWriter.configuration;
         options = configuration.getOptions();
         utils = configuration.utils;
         resources = configuration.getDocResources();
+        contents = configuration.getContents();
     }
 
     @Override
     public Content getOutputInstance() {
         return new ContentBuilder();
@@ -172,14 +177,19 @@
         Content result = new StringContent(utils.normalizeNewlines(ch.getText(tag)));
         return result;
     }
 
     @Override
-    public Content getParamHeader(String header) {
-        HtmlTree result = HtmlTree.DT(HtmlTree.SPAN(HtmlStyle.paramLabel,
-                new StringContent(header)));
-        return result;
+    public Content getParamHeader(ParamTaglet.ParamKind kind) {
+        Content header;
+        switch (kind) {
+            case PARAMETER:         header = contents.parameters ; break;
+            case TYPE_PARAMETER:    header = contents.typeParameters ; break;
+            case RECORD_COMPONENT:  header = contents.recordComponents ; break;
+            default: throw new IllegalArgumentException(kind.toString());
+        }
+        return HtmlTree.DT(header);
     }
 
     @Override
     @SuppressWarnings("preview")
     public Content paramTagOutput(Element element, DocTree paramTag, String paramName) {
@@ -208,17 +218,15 @@
         return result;
     }
 
     @Override
     public Content returnTagOutput(Element element, DocTree returnTag) {
-        ContentBuilder result = new ContentBuilder();
         CommentHelper ch = utils.getCommentHelper(element);
-        result.add(HtmlTree.DT(HtmlTree.SPAN(HtmlStyle.returnLabel,
-                new StringContent(resources.getText("doclet.Returns")))));
-        result.add(HtmlTree.DD(htmlWriter.commentTagsToContent(
-                returnTag, element, ch.getDescription(returnTag), false, inSummary)));
-        return result;
+        return new ContentBuilder(
+                HtmlTree.DT(contents.returns),
+                HtmlTree.DD(htmlWriter.commentTagsToContent(
+                        returnTag, element, ch.getDescription(returnTag), false, inSummary)));
     }
 
     @Override
     public Content seeTagOutput(Element holder, List<? extends DocTree> seeTags) {
         ContentBuilder body = new ContentBuilder();
@@ -251,16 +259,13 @@
             }
         }
         if (body.isEmpty())
             return body;
 
-        ContentBuilder result = new ContentBuilder();
-        result.add(HtmlTree.DT(HtmlTree.SPAN(HtmlStyle.seeLabel,
-                new StringContent(resources.getText("doclet.See_Also")))));
-        result.add(HtmlTree.DD(body));
-        return result;
-
+        return new ContentBuilder(
+                HtmlTree.DT(contents.seeAlso),
+                HtmlTree.DD(body));
     }
 
     private void appendSeparatorIfNotEmpty(ContentBuilder body) {
         if (!body.isEmpty()) {
             body.add(", ");
@@ -269,35 +274,33 @@
     }
 
     @Override
     public Content simpleTagOutput(Element element, List<? extends DocTree> simpleTags, String header) {
         CommentHelper ch = utils.getCommentHelper(element);
-        ContentBuilder result = new ContentBuilder();
-        result.add(HtmlTree.DT(HtmlTree.SPAN(HtmlStyle.simpleTagLabel, new RawHtml(header))));
         ContentBuilder body = new ContentBuilder();
         boolean many = false;
         for (DocTree simpleTag : simpleTags) {
             if (many) {
                 body.add(", ");
             }
             List<? extends DocTree> bodyTags = ch.getBody(simpleTag);
             body.add(htmlWriter.commentTagsToContent(simpleTag, element, bodyTags, false, inSummary));
             many = true;
         }
-        result.add(HtmlTree.DD(body));
-        return result;
+        return new ContentBuilder(
+                HtmlTree.DT(new RawHtml(header)),
+                HtmlTree.DD(body));
     }
 
     @Override
     public Content simpleTagOutput(Element element, DocTree simpleTag, String header) {
-        ContentBuilder result = new ContentBuilder();
-        result.add(HtmlTree.DT(HtmlTree.SPAN(HtmlStyle.simpleTagLabel, new RawHtml(header))));
         CommentHelper ch = utils.getCommentHelper(element);
         List<? extends DocTree> description = ch.getDescription(simpleTag);
         Content body = htmlWriter.commentTagsToContent(simpleTag, element, description, false, inSummary);
-        result.add(HtmlTree.DD(body));
-        return result;
+        return new ContentBuilder(
+                HtmlTree.DT(new RawHtml(header)),
+                HtmlTree.DD(body));
     }
 
     @Override
     protected Content systemPropertyTagOutput(Element element, DocTree tag) {
         SystemPropertyTree itt = (SystemPropertyTree) tag;
@@ -306,13 +309,11 @@
                 resources.getText("doclet.System_Property"), true));
     }
 
     @Override
     public Content getThrowsHeader() {
-        HtmlTree result = HtmlTree.DT(HtmlTree.SPAN(HtmlStyle.throwsLabel,
-                new StringContent(resources.getText("doclet.Throws"))));
-        return result;
+        return HtmlTree.DT(contents.throws_);
     }
 
     @Override
     public Content throwsTagOutput(Element element, DocTree throwsTag, TypeMirror substituteType) {
         ContentBuilder body = new ContentBuilder();
@@ -400,11 +401,10 @@
                 anchorName += "-" + count;
             }
             result = HtmlTree.SPAN(anchorName, HtmlStyle.searchTagResult, new StringContent(tagText));
             if (options.createIndex() && !tagText.isEmpty()) {
                 SearchIndexItem si = new SearchIndexItem();
-                si.setSystemProperty(isSystemProperty);
                 si.setLabel(tagText);
                 si.setDescription(desc);
                 si.setUrl(htmlWriter.path.getPath() + "#" + anchorName);
                 new SimpleElementVisitor14<Void, Void>() {
 
@@ -445,10 +445,11 @@
 
                     @Override
                     public Void visitUnknown(Element e, Void p) {
                         if (e instanceof DocletElement) {
                             DocletElement de = (DocletElement) e;
+                            si.setElement(de);
                             switch (de.getSubKind()) {
                                 case OVERVIEW:
                                     si.setHolder(resources.getText("doclet.Overview"));
                                     break;
                                 case DOCFILE:
@@ -467,11 +468,11 @@
                     protected Void defaultAction(Element e, Void p) {
                         si.setHolder(utils.getFullyQualifiedName(e));
                         return null;
                     }
                 }.visit(element);
-                si.setCategory(SearchIndexItem.Category.SEARCH_TAGS);
+                si.setCategory(isSystemProperty ? Category.SYSTEM_PROPERTY : Category.INDEX);
                 configuration.searchItems.add(si);
             }
         }
         return result;
     }
