diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/ParamTaglet.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/ParamTaglet.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/ParamTaglet.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/ParamTaglet.java
@@ -40,19 +40,19 @@
 import jdk.javadoc.internal.doclets.toolkit.util.DocFinder;
 import jdk.javadoc.internal.doclets.toolkit.util.DocFinder.Input;
 import jdk.javadoc.internal.doclets.toolkit.util.Utils;
 
 /**
- * A taglet that represents the @param tag.
+ * A taglet that represents the {@code @param} tag.
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
  */
 public class ParamTaglet extends BaseTaglet implements InheritableTaglet {
-    private enum ParamKind {
+    public enum ParamKind {
         /** Parameter of an executable element. */
         PARAMETER,
         /** State components of a record. */
         RECORD_COMPONENT,
         /** Type parameters of an executable element or type element. */
@@ -296,19 +296,11 @@
     private Content processParamTag(Element e, ParamKind kind,
             TagletWriter writer, DocTree paramTag, String name,
             boolean isFirstParam) {
         Content result = writer.getOutputInstance();
         if (isFirstParam) {
-            String key;
-            switch (kind) {
-                case PARAMETER:       key = "doclet.Parameters" ; break;
-                case TYPE_PARAMETER:  key = "doclet.TypeParameters" ; break;
-                case RECORD_COMPONENT: key = "doclet.RecordComponents" ; break;
-                default: throw new IllegalArgumentException(kind.toString());
-            }
-            String header = writer.configuration().getDocResources().getText(key);
-            result.add(writer.getParamHeader(header));
+            result.add(writer.getParamHeader(kind));
         }
         result.add(writer.paramTagOutput(e, paramTag, name));
         return result;
     }
 }
