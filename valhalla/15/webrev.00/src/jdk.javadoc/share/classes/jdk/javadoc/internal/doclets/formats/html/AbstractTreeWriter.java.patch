diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractTreeWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractTreeWriter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractTreeWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractTreeWriter.java
@@ -28,11 +28,11 @@
 import java.util.*;
 
 import javax.lang.model.element.TypeElement;
 
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;
-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTag;
+import jdk.javadoc.internal.doclets.formats.html.markup.TagName;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;
 import jdk.javadoc.internal.doclets.toolkit.Content;
 import jdk.javadoc.internal.doclets.toolkit.util.ClassTree;
 import jdk.javadoc.internal.doclets.toolkit.util.DocPath;
 
@@ -80,13 +80,13 @@
      * @param contentTree the content tree to which the level information will be added
      */
     protected void addLevelInfo(TypeElement parent, Collection<TypeElement> collection,
             boolean isEnum, Content contentTree) {
         if (!collection.isEmpty()) {
-            Content ul = new HtmlTree(HtmlTag.UL);
+            Content ul = new HtmlTree(TagName.UL);
             for (TypeElement local : collection) {
-                HtmlTree li = new HtmlTree(HtmlTag.LI);
+                HtmlTree li = new HtmlTree(TagName.LI);
                 li.setStyle(HtmlStyle.circle);
                 addPartialInfo(local, li);
                 addExtendsImplements(parent, local, li);
                 addLevelInfo(local, classtree.directSubClasses(local, isEnum),
                              isEnum, li);   // Recurse
@@ -101,27 +101,27 @@
      * Class Tree or Interface tree.
      *
      * @param sset classes which are at the most base level, all the
      * other classes in this run will derive from these classes
      * @param heading heading for the tree
-     * @param div the content tree to which the tree will be added
+     * @param content the content tree to which the tree will be added
      */
-    protected void addTree(SortedSet<TypeElement> sset, String heading, HtmlTree div) {
-        addTree(sset, heading, div, false);
+    protected void addTree(SortedSet<TypeElement> sset, String heading, Content content) {
+        addTree(sset, heading, content, false);
     }
 
     protected void addTree(SortedSet<TypeElement> sset, String heading,
-                           HtmlTree div, boolean isEnums) {
+                           Content content, boolean isEnums) {
         if (!sset.isEmpty()) {
             TypeElement firstTypeElement = sset.first();
             Content headingContent = contents.getContent(heading);
-            Content sectionHeading = HtmlTree.HEADING(Headings.CONTENT_HEADING, true,
+            Content sectionHeading = HtmlTree.HEADING_TITLE(Headings.CONTENT_HEADING,
                     headingContent);
             HtmlTree htmlTree = HtmlTree.SECTION(HtmlStyle.hierarchy, sectionHeading);
             addLevelInfo(!utils.isInterface(firstTypeElement) ? firstTypeElement : null,
                     sset, isEnums, htmlTree);
-            div.add(htmlTree);
+            content.add(htmlTree);
         }
     }
 
     /**
      * Add information regarding the classes which this class extends or
