diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ClassWriterImpl.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ClassWriterImpl.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ClassWriterImpl.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ClassWriterImpl.java
@@ -43,14 +43,13 @@
 import com.sun.source.doctree.DocTree;
 import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;
 import jdk.javadoc.internal.doclets.formats.html.markup.Entity;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlAttr;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;
-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTag;
+import jdk.javadoc.internal.doclets.formats.html.markup.TagName;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;
-import jdk.javadoc.internal.doclets.formats.html.markup.Navigation;
-import jdk.javadoc.internal.doclets.formats.html.markup.Navigation.PageMode;
+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;
 import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;
 import jdk.javadoc.internal.doclets.toolkit.ClassWriter;
 import jdk.javadoc.internal.doclets.toolkit.Content;
 import jdk.javadoc.internal.doclets.toolkit.taglets.ParamTaglet;
 import jdk.javadoc.internal.doclets.toolkit.util.ClassTree;
@@ -113,12 +112,12 @@
         Content linkContent = getModuleLink(utils.elementUtils.getModuleOf(typeElement),
                 contents.moduleLabel);
         navBar.setNavLinkModule(linkContent);
         navBar.setMemberSummaryBuilder(configuration.getBuilderFactory().getMemberSummaryBuilder(this));
         navBar.setUserHeader(getUserHeaderFooter(true));
-        headerContent.add(navBar.getContent(true));
-        HtmlTree div = new HtmlTree(HtmlTag.DIV);
+        headerContent.add(navBar.getContent(Navigation.Position.TOP));
+        HtmlTree div = new HtmlTree(TagName.DIV);
         div.setStyle(HtmlStyle.header);
         if (configuration.showModules) {
             ModuleElement mdle = configuration.docEnv.getElementUtils().getModuleOf(typeElement);
             Content classModuleLabel = HtmlTree.SPAN(HtmlStyle.moduleLabelInType, contents.moduleLabel);
             Content moduleNameDiv = HtmlTree.DIV(HtmlStyle.subTitle, classModuleLabel);
@@ -139,11 +138,11 @@
         }
         LinkInfoImpl linkInfo = new LinkInfoImpl(configuration,
                 LinkInfoImpl.Kind.CLASS_HEADER, typeElement);
         //Let's not link to ourselves in the header.
         linkInfo.linkToSelf = false;
-        Content heading = HtmlTree.HEADING(Headings.PAGE_TITLE_HEADING, true,
+        Content heading = HtmlTree.HEADING_TITLE(Headings.PAGE_TITLE_HEADING,
                 HtmlStyle.title, new StringContent(header));
         heading.add(getTypeParameterLinks(linkInfo));
         div.add(heading);
         bodyContents.setHeader(headerContent)
                 .addMainContent(MarkerComments.START_OF_CLASS_DATA)
@@ -159,21 +158,21 @@
     @Override
     public void addFooter() {
         bodyContents.addMainContent(MarkerComments.END_OF_CLASS_DATA);
         Content htmlTree = HtmlTree.FOOTER();
         navBar.setUserFooter(getUserHeaderFooter(false));
-        htmlTree.add(navBar.getContent(false));
+        htmlTree.add(navBar.getContent(Navigation.Position.BOTTOM));
         addBottom(htmlTree);
         bodyContents.setFooter(htmlTree);
     }
 
     @Override
     public void printDocument(Content contentTree) throws DocFileIOException {
         String description = getDescription("declaration", typeElement);
         PackageElement pkg = utils.containingPackage(typeElement);
         List<DocPath> localStylesheets = getLocalStylesheets(pkg);
-        contentTree.add(bodyContents.toContent());
+        contentTree.add(bodyContents);
         printHtmlDocument(configuration.metakeywords.getMetaKeywords(typeElement),
                 description, localStylesheets, contentTree);
     }
 
     @Override
@@ -191,13 +190,13 @@
         return typeElement;
     }
 
     @Override @SuppressWarnings("preview")
     public void addClassSignature(String modifiers, Content classInfoTree) {
-        Content hr = new HtmlTree(HtmlTag.HR);
+        Content hr = new HtmlTree(TagName.HR);
         classInfoTree.add(hr);
-        Content pre = new HtmlTree(HtmlTag.PRE);
+        Content pre = new HtmlTree(TagName.PRE);
         addAnnotationInfo(typeElement, pre);
         pre.add(modifiers);
         LinkInfoImpl linkInfo = new LinkInfoImpl(configuration,
                 LinkInfoImpl.Kind.CLASS_SIGNATURE, typeElement);
         //Let's not link to ourselves in the signature.
@@ -349,11 +348,11 @@
     public void addParamInfo(Content classInfoTree) {
         if (utils.hasBlockTag(typeElement, DocTree.Kind.PARAM)) {
             Content paramInfo = (new ParamTaglet()).getTagletOutput(typeElement,
                     getTagletWriterInstance(false));
             if (!paramInfo.isEmpty()) {
-                classInfoTree.add(HtmlTree.DL(paramInfo));
+                classInfoTree.add(HtmlTree.DL(HtmlStyle.notes, paramInfo));
             }
         }
     }
 
     @Override
@@ -364,30 +363,26 @@
                     return;    // Don't generate the list, too huge
                 }
             }
             Set<TypeElement> subclasses = classtree.directSubClasses(typeElement, false);
             if (!subclasses.isEmpty()) {
-                Content label = contents.subclassesLabel;
-                Content dt = HtmlTree.DT(label);
-                Content dl = HtmlTree.DL(dt);
-                dl.add(getClassLinks(LinkInfoImpl.Kind.SUBCLASSES,
-                        subclasses));
+                HtmlTree dl = HtmlTree.DL(HtmlStyle.notes);
+                dl.add(HtmlTree.DT(contents.subclassesLabel));
+                dl.add(HtmlTree.DD(getClassLinks(LinkInfoImpl.Kind.SUBCLASSES, subclasses)));
                 classInfoTree.add(dl);
             }
         }
     }
 
     @Override
     public void addSubInterfacesInfo(Content classInfoTree) {
         if (utils.isInterface(typeElement)) {
             Set<TypeElement> subInterfaces = classtree.allSubClasses(typeElement, false);
             if (!subInterfaces.isEmpty()) {
-                Content label = contents.subinterfacesLabel;
-                Content dt = HtmlTree.DT(label);
-                Content dl = HtmlTree.DL(dt);
-                dl.add(getClassLinks(LinkInfoImpl.Kind.SUBINTERFACES,
-                        subInterfaces));
+                Content dl = HtmlTree.DL(HtmlStyle.notes);
+                dl.add(HtmlTree.DT(contents.subinterfacesLabel));
+                dl.add(HtmlTree.DD(getClassLinks(LinkInfoImpl.Kind.SUBINTERFACES, subInterfaces)));
                 classInfoTree.add(dl);
             }
         }
     }
 
@@ -401,28 +396,25 @@
                 return;    // Don't generate the list, too huge
             }
         }
         Set<TypeElement> implcl = classtree.implementingClasses(typeElement);
         if (!implcl.isEmpty()) {
-            Content label = contents.implementingClassesLabel;
-            Content dt = HtmlTree.DT(label);
-            Content dl = HtmlTree.DL(dt);
-            dl.add(getClassLinks(LinkInfoImpl.Kind.IMPLEMENTED_CLASSES,
-                    implcl));
+            HtmlTree dl = HtmlTree.DL(HtmlStyle.notes);
+            dl.add(HtmlTree.DT(contents.implementingClassesLabel));
+            dl.add(HtmlTree.DD(getClassLinks(LinkInfoImpl.Kind.IMPLEMENTED_CLASSES, implcl)));
             classInfoTree.add(dl);
         }
     }
 
     @Override
     public void addImplementedInterfacesInfo(Content classInfoTree) {
         SortedSet<TypeMirror> interfaces = new TreeSet<>(utils.makeTypeMirrorClassUseComparator());
         interfaces.addAll(utils.getAllInterfaces(typeElement));
         if (utils.isClass(typeElement) && !interfaces.isEmpty()) {
-            Content label = contents.allImplementedInterfacesLabel;
-            Content dt = HtmlTree.DT(label);
-            Content dl = HtmlTree.DL(dt);
-            dl.add(getClassLinks(LinkInfoImpl.Kind.IMPLEMENTED_INTERFACES, interfaces));
+            HtmlTree dl = HtmlTree.DL(HtmlStyle.notes);
+            dl.add(HtmlTree.DT(contents.allImplementedInterfacesLabel));
+            dl.add(HtmlTree.DD(getClassLinks(LinkInfoImpl.Kind.IMPLEMENTED_INTERFACES, interfaces)));
             classInfoTree.add(dl);
         }
     }
 
     @Override
@@ -430,14 +422,13 @@
         SortedSet<TypeMirror> interfaces =
                 new TreeSet<>(utils.makeTypeMirrorIndexUseComparator());
         interfaces.addAll(utils.getAllInterfaces(typeElement));
 
         if (utils.isInterface(typeElement) && !interfaces.isEmpty()) {
-            Content label = contents.allSuperinterfacesLabel;
-            Content dt = HtmlTree.DT(label);
-            Content dl = HtmlTree.DL(dt);
-            dl.add(getClassLinks(LinkInfoImpl.Kind.SUPER_INTERFACES, interfaces));
+            HtmlTree dl = HtmlTree.DL(HtmlStyle.notes);
+            dl.add(HtmlTree.DT(contents.allSuperinterfacesLabel));
+            dl.add(HtmlTree.DD(getClassLinks(LinkInfoImpl.Kind.SUPER_INTERFACES, interfaces)));
             classInfoTree.add(dl);
         }
     }
 
     @Override
@@ -446,16 +437,15 @@
         if (outerClass == null)
             return;
         new SimpleElementVisitor8<Void, Void>() {
             @Override
             public Void visitType(TypeElement e, Void p) {
-                Content label = utils.isInterface(e)
+                HtmlTree dl = HtmlTree.DL(HtmlStyle.notes);
+                dl.add(HtmlTree.DT(utils.isInterface(e)
                         ? contents.enclosingInterfaceLabel
-                        : contents.enclosingClassLabel;
-                Content dt = HtmlTree.DT(label);
-                Content dl = HtmlTree.DL(dt);
-                Content dd = new HtmlTree(HtmlTag.DD);
+                        : contents.enclosingClassLabel));
+                Content dd = new HtmlTree(TagName.DD);
                 dd.add(getLink(new LinkInfoImpl(configuration,
                         LinkInfoImpl.Kind.CLASS, e)));
                 dl.add(dd);
                 classInfoTree.add(dl);
                 return null;
@@ -464,13 +454,13 @@
     }
 
     @Override
     public void addFunctionalInterfaceInfo (Content classInfoTree) {
         if (isFunctionalInterface()) {
-            Content dt = HtmlTree.DT(contents.functionalInterface);
-            Content dl = HtmlTree.DL(dt);
-            Content dd = new HtmlTree(HtmlTag.DD);
+            HtmlTree dl = HtmlTree.DL(HtmlStyle.notes);
+            dl.add(HtmlTree.DT(contents.functionalInterface));
+            Content dd = new HtmlTree(TagName.DD);
             dd.add(contents.functionalInterfaceMessage);
             dl.add(dd);
             classInfoTree.add(dl);
         }
     }
@@ -510,31 +500,31 @@
      * @param context the id of the context where the link will be printed
      * @param list the list of classes
      * @return a content tree for the class list
      */
     private Content getClassLinks(LinkInfoImpl.Kind context, Collection<?> list) {
-        Content dd = new HtmlTree(HtmlTag.DD);
+        Content content = new ContentBuilder();
         boolean isFirst = true;
         for (Object type : list) {
             if (!isFirst) {
                 Content separator = new StringContent(", ");
-                dd.add(separator);
+                content.add(separator);
             } else {
                 isFirst = false;
             }
             // TODO: should we simply split this method up to avoid instanceof ?
             if (type instanceof TypeElement) {
                 Content link = getLink(
                         new LinkInfoImpl(configuration, context, (TypeElement)(type)));
-                dd.add(HtmlTree.CODE(link));
+                content.add(HtmlTree.CODE(link));
             } else {
                 Content link = getLink(
                         new LinkInfoImpl(configuration, context, ((TypeMirror)type)));
-                dd.add(HtmlTree.CODE(link));
+                content.add(HtmlTree.CODE(link));
             }
         }
-        return dd;
+        return content;
     }
 
     /**
      * Return the TypeElement being documented.
      *
