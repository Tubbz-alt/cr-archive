diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/spi/NodeLIRBuilderTool.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/spi/NodeLIRBuilderTool.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/spi/NodeLIRBuilderTool.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/spi/NodeLIRBuilderTool.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,18 +22,16 @@
  */
 
 
 package org.graalvm.compiler.nodes.spi;
 
-import java.util.Collection;
 import java.util.List;
 
 import org.graalvm.compiler.core.common.cfg.BlockMap;
 import org.graalvm.compiler.core.common.spi.ForeignCallLinkage;
 import org.graalvm.compiler.core.common.type.Stamp;
 import org.graalvm.compiler.graph.Node;
-import org.graalvm.compiler.graph.NodeSourcePosition;
 import org.graalvm.compiler.lir.LIRFrameState;
 import org.graalvm.compiler.lir.gen.LIRGeneratorTool;
 import org.graalvm.compiler.nodes.AbstractBeginNode;
 import org.graalvm.compiler.nodes.AbstractEndNode;
 import org.graalvm.compiler.nodes.AbstractMergeNode;
@@ -49,13 +47,10 @@
 import org.graalvm.compiler.nodes.calc.ConditionalNode;
 import org.graalvm.compiler.nodes.cfg.Block;
 import org.graalvm.compiler.nodes.extended.SwitchNode;
 import org.graalvm.compiler.options.OptionValues;
 
-import jdk.vm.ci.code.CallingConvention;
-import jdk.vm.ci.meta.Value;
-
 public interface NodeLIRBuilderTool extends NodeValueMap {
 
     // TODO (je) remove and move into the Node
     LIRFrameState state(DeoptimizingNode deopt);
 
@@ -80,18 +75,14 @@
 
     void visitBreakpointNode(BreakpointNode i);
 
     void visitFullInfopointNode(FullInfopointNode i);
 
-    void setSourcePosition(NodeSourcePosition position);
-
     LIRGeneratorTool getLIRGeneratorTool();
 
     void emitOverflowCheckBranch(AbstractBeginNode overflowSuccessor, AbstractBeginNode next, Stamp compareStamp, double probability);
 
-    Value[] visitInvokeArguments(CallingConvention cc, Collection<ValueNode> arguments);
-
     void doBlock(Block block, StructuredGraph graph, BlockMap<List<Node>> blockMap);
 
     default OptionValues getOptions() {
         return getLIRGeneratorTool().getResult().getLIR().getOptions();
     }
@@ -100,8 +91,6 @@
 
     @SuppressWarnings("unused")
     default ForeignCallLinkage lookupGraalStub(ValueNode valueNode) {
         return null;
     }
-
-    void matchBlock(Block b, StructuredGraph graph, StructuredGraph.ScheduleResult blockMap);
 }
