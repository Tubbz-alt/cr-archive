diff a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/CompilerToVM.java b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/CompilerToVM.java
--- a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/CompilerToVM.java
+++ b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/CompilerToVM.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -983,6 +983,29 @@
 
     /**
      * @see HotSpotJVMCIRuntime#exitHotSpot(int)
      */
     native void callSystemExit(int status);
+
+    /**
+     * @see JFR.Ticks#now
+     */
+    native long ticksNow();
+
+    /**
+     * Adds phases in HotSpot JFR.
+     *
+     * @see JFR.CompilerPhaseEvent#registerPhases and JFR.CompilerPhaseEvent#write
+     */
+    native int registerCompilerPhases(String[] phases);
+
+    /**
+     * @see JFR.CompilerPhaseEvent#write
+     */
+    native void notifyCompilerPhaseEvent(long startTime, int phase, int compileId, int level);
+
+    /**
+     * @see JFR.CompilerInliningEvent#write
+     */
+    native void notifyCompilerInliningEvent(int compileId, HotSpotResolvedJavaMethodImpl caller, HotSpotResolvedJavaMethodImpl callee, boolean succeeded, String message, int bci);
+
 }
