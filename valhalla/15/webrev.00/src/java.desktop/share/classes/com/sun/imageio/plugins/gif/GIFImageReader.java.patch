diff a/src/java.desktop/share/classes/com/sun/imageio/plugins/gif/GIFImageReader.java b/src/java.desktop/share/classes/com/sun/imageio/plugins/gif/GIFImageReader.java
--- a/src/java.desktop/share/classes/com/sun/imageio/plugins/gif/GIFImageReader.java
+++ b/src/java.desktop/share/classes/com/sun/imageio/plugins/gif/GIFImageReader.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -348,10 +348,14 @@
                 } else {
                     int left = blockLength;
                     int off = 0;
                     while (left > 0) {
                         int nbytes = stream.read(block, off, left);
+                        if (nbytes == -1) {
+                            throw new IIOException("Invalid block length for " +
+                                    "LZW encoded image data");
+                        }
                         off += nbytes;
                         left -= nbytes;
                     }
                     nextByte = 0;
                 }
@@ -917,17 +921,25 @@
         this.rowBuf = new byte[width];
 
         try {
             // Read and decode the image data, fill in theImage
             this.initCodeSize = stream.readUnsignedByte();
+            // GIF allows max 8 bpp, so anything larger is bogus for the roots.
+            if (this.initCodeSize < 1 || this.initCodeSize > 8) {
+                throw new IIOException("Bad code size:" + this.initCodeSize);
+            }
 
             // Read first data block
             this.blockLength = stream.readUnsignedByte();
             int left = blockLength;
             int off = 0;
             while (left > 0) {
                 int nbytes = stream.read(block, off, left);
+                if (nbytes == -1) {
+                    throw new IIOException("Invalid block length for " +
+                            "LZW encoded image data");
+                }
                 left -= nbytes;
                 off += nbytes;
             }
 
             this.bitPos = 0;
@@ -1015,11 +1027,10 @@
             } while (!abortRequested());
 
             processReadAborted();
             return theImage;
         } catch (IOException e) {
-            e.printStackTrace();
             throw new IIOException("I/O error reading image!", e);
         }
     }
 
     /**
