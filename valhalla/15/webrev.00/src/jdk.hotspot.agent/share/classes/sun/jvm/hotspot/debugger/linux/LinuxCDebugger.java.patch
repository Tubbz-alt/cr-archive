diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/linux/LinuxCDebugger.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/linux/LinuxCDebugger.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/linux/LinuxCDebugger.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/linux/LinuxCDebugger.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2015, Red Hat Inc.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
@@ -88,15 +88,13 @@
        Address pc  = context.getRegisterAsAddress(X86ThreadContext.EIP);
        if (pc == null) return null;
        return new LinuxX86CFrame(dbg, ebp, pc);
     } else if (cpu.equals("amd64")) {
        AMD64ThreadContext context = (AMD64ThreadContext) thread.getContext();
-       Address rbp = context.getRegisterAsAddress(AMD64ThreadContext.RBP);
-       if (rbp == null) return null;
        Address pc  = context.getRegisterAsAddress(AMD64ThreadContext.RIP);
        if (pc == null) return null;
-       return new LinuxAMD64CFrame(dbg, rbp, pc);
+       return LinuxAMD64CFrame.getTopFrame(dbg, pc, context);
     } else if (cpu.equals("sparc")) {
        SPARCThreadContext context = (SPARCThreadContext) thread.getContext();
        Address sp = context.getRegisterAsAddress(SPARCThreadContext.R_SP);
        if (sp == null) return null;
        Address pc  = context.getRegisterAsAddress(SPARCThreadContext.R_O7);
