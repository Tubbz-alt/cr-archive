diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/gc/shenandoah/ShenandoahHeapRegion.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/gc/shenandoah/ShenandoahHeapRegion.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/gc/shenandoah/ShenandoahHeapRegion.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/gc/shenandoah/ShenandoahHeapRegion.java
@@ -31,20 +31,21 @@
 import sun.jvm.hotspot.oops.Mark;
 import sun.jvm.hotspot.oops.Oop;
 import sun.jvm.hotspot.oops.UnknownOopException;
 import sun.jvm.hotspot.types.*;
 import sun.jvm.hotspot.runtime.VM;
+import sun.jvm.hotspot.runtime.VMObject;
 import sun.jvm.hotspot.debugger.Address;
 import sun.jvm.hotspot.utilities.AddressOps;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Observable;
 import java.util.Observer;
 
 
-public class ShenandoahHeapRegion extends ContiguousSpace implements LiveRegionsProvider {
+public class ShenandoahHeapRegion extends VMObject implements LiveRegionsProvider {
     private static int EmptyUncommitted;
     private static int EmptyCommitted;
     private static int Regular;
     private static int HumongousStart;
     private static int HumongousCont;
@@ -57,10 +58,14 @@
     private static CIntegerField RegionSizeBytesField;
     private static Field         RegionStateField;
     private static CIntegerField RegionNumberField;
     private static CIntegerField RegionSizeBytesShiftField;
 
+    private static AddressField BottomField;
+    private static AddressField TopField;
+    private static AddressField EndField;
+
     private ShenandoahHeap heap;
 
     static {
         VM.registerVMInitializedObserver(new Observer() {
             public void update(Observable o, Object data) {
@@ -72,10 +77,13 @@
     static private synchronized void initialize(TypeDataBase db) {
         Type type = db.lookupType("ShenandoahHeapRegion");
         RegionSizeBytesField = type.getCIntegerField("RegionSizeBytes");
         RegionStateField = type.getField("_state");
         RegionNumberField = type.getCIntegerField("_region_number");
+        BottomField = type.getAddressField("_bottom");
+        TopField = type.getAddressField("_top");
+        EndField = type.getAddressField("_end");
 
         RegionSizeBytesShiftField = type.getCIntegerField("RegionSizeBytesShift");
 
         EmptyUncommitted     = db.lookupIntConstant("ShenandoahHeapRegion::_empty_uncommitted").intValue();
         EmptyCommitted       = db.lookupIntConstant("ShenandoahHeapRegion::_empty_committed").intValue();
@@ -103,10 +111,22 @@
 
     public void setHeap(ShenandoahHeap heap) {
         this.heap = heap;
     }
 
+    public Address bottom() {
+        return BottomField.getValue(addr);
+    }
+
+    public Address top() {
+        return TopField.getValue(addr);
+    }
+
+    public Address end() {
+        return EndField.getValue(addr);
+    }
+
     @Override
     public int hashCode() {
         return (int)regionNumber();
     }
 
