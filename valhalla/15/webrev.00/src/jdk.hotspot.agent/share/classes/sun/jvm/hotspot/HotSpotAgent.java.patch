diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HotSpotAgent.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HotSpotAgent.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HotSpotAgent.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HotSpotAgent.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -86,10 +86,11 @@
     // All possible required information for connecting
     private int pid;
     private String javaExecutableName;
     private String coreFileName;
     private String debugServerID;
+    private int rmiPort;
 
     // All needed information for server side
     private String serverID;
 
     private String[] jvmLibNames;
@@ -198,22 +199,35 @@
     //
 
     /** This attaches to a process running on the local machine and
       starts a debug server, allowing remote machines to connect and
       examine this process. Uses specified name to uniquely identify a
-      specific debuggee on the server */
-    public synchronized void startServer(int processID, String uniqueID) {
+      specific debuggee on the server. Allows to specify the port number
+      to which the RMI connector is bound. If not specified a random
+      available port is used. */
+    public synchronized void startServer(int processID,
+                                         String uniqueID,
+                                         int rmiPort) {
         if (debugger != null) {
             throw new DebuggerException("Already attached");
         }
         pid = processID;
         startupMode = PROCESS_MODE;
         isServer = true;
         serverID = uniqueID;
+        this.rmiPort = rmiPort;
         go();
     }
 
+    /** This attaches to a process running on the local machine and
+     starts a debug server, allowing remote machines to connect and
+     examine this process. Uses specified name to uniquely identify a
+     specific debuggee on the server */
+    public synchronized void startServer(int processID, String uniqueID) {
+        startServer(processID, uniqueID, 0);
+    }
+
     /** This attaches to a process running on the local machine and
       starts a debug server, allowing remote machines to connect and
       examine this process. */
     public synchronized void startServer(int processID)
     throws DebuggerException {
@@ -221,14 +235,16 @@
     }
 
     /** This opens a core file on the local machine and starts a debug
       server, allowing remote machines to connect and examine this
       core file. Uses supplied uniqueID to uniquely identify a specific
-      debugee */
+      debuggee. Allows to specify the port number to which the RMI connector
+      is bound. If not specified a random available port is used.  */
     public synchronized void startServer(String javaExecutableName,
-    String coreFileName,
-    String uniqueID) {
+                                         String coreFileName,
+                                         String uniqueID,
+                                         int rmiPort) {
         if (debugger != null) {
             throw new DebuggerException("Already attached");
         }
         if ((javaExecutableName == null) || (coreFileName == null)) {
             throw new DebuggerException("Both the core file name and Java executable name must be specified");
@@ -236,13 +252,24 @@
         this.javaExecutableName = javaExecutableName;
         this.coreFileName = coreFileName;
         startupMode = CORE_FILE_MODE;
         isServer = true;
         serverID = uniqueID;
+        this.rmiPort = rmiPort;
         go();
     }
 
+    /** This opens a core file on the local machine and starts a debug
+     server, allowing remote machines to connect and examine this
+     core file. Uses supplied uniqueID to uniquely identify a specific
+     debugee */
+    public synchronized void startServer(String javaExecutableName,
+                                         String coreFileName,
+                                         String uniqueID) {
+        startServer(javaExecutableName, coreFileName, uniqueID, 0);
+    }
+
     /** This opens a core file on the local machine and starts a debug
       server, allowing remote machines to connect and examine this
       core file. */
     public synchronized void startServer(String javaExecutableName, String coreFileName)
     throws DebuggerException {
@@ -347,11 +374,11 @@
             }
 
             if (isServer) {
                 RemoteDebuggerServer remote = null;
                 try {
-                    remote = new RemoteDebuggerServer(debugger);
+                    remote = new RemoteDebuggerServer(debugger, rmiPort);
                 }
                 catch (RemoteException rem) {
                     throw new DebuggerException(rem);
                 }
                 RMIHelper.rebind(serverID, remote);
