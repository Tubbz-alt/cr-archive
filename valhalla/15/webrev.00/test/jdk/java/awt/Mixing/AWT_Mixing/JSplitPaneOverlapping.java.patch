diff a/test/jdk/java/awt/Mixing/AWT_Mixing/JSplitPaneOverlapping.java b/test/jdk/java/awt/Mixing/AWT_Mixing/JSplitPaneOverlapping.java
--- a/test/jdk/java/awt/Mixing/AWT_Mixing/JSplitPaneOverlapping.java
+++ b/test/jdk/java/awt/Mixing/AWT_Mixing/JSplitPaneOverlapping.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -117,16 +117,16 @@
         Util.waitForIdle(robot);
 
         robot.mousePress(InputEvent.BUTTON1_MASK);
         robot.mouseMove(splitterLoc.x - 50, splitterLoc.y);
         Color c = robot.getPixelColor(splitterLoc.x - 50, splitterLoc.y);
+        robot.mouseRelease(InputEvent.BUTTON1_MASK);
+
         System.out.println("Actual: "+c+", (not) expected: "+AWT_VERIFY_COLOR+" at "+(splitterLoc.x - 50)+", "+ splitterLoc.y);
         if (!ignoreFail && c.equals(AWT_VERIFY_COLOR)) {
             fail("The JSplitPane drag-n-drop image did not pass pixel color check and is overlapped");
         }
-        robot.mouseRelease(InputEvent.BUTTON1_MASK);
-
         clickAndBlink(robot, splitterLoc);
 
         return clicked;
     }
 
