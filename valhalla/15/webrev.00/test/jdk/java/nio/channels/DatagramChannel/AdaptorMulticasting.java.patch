diff a/test/jdk/java/nio/channels/DatagramChannel/AdaptorMulticasting.java b/test/jdk/java/nio/channels/DatagramChannel/AdaptorMulticasting.java
--- a/test/jdk/java/nio/channels/DatagramChannel/AdaptorMulticasting.java
+++ b/test/jdk/java/nio/channels/DatagramChannel/AdaptorMulticasting.java
@@ -41,10 +41,11 @@
 import java.net.SocketAddress;
 import java.net.SocketException;
 import java.net.SocketTimeoutException;
 import java.net.SocketOption;
 import java.nio.channels.DatagramChannel;
+import java.util.Arrays;
 import java.util.List;
 import java.util.stream.Collectors;
 import static java.net.StandardSocketOptions.*;
 import static java.net.StandardProtocolFamily.*;
 
@@ -425,24 +426,34 @@
     static void testSendNoReceive(MulticastSocket s, InetAddress group) throws IOException {
         // outgoing multicast interface needs to be set
         assertTrue(s.getOption(IP_MULTICAST_IF) != null);
 
         SocketAddress target = new InetSocketAddress(group, s.getLocalPort());
-        byte[] message = "hello".getBytes("UTF-8");
+        long nano = System.nanoTime();
+        String text = nano + ": hello";
+        byte[] message = text.getBytes("UTF-8");
 
         // send datagram to multicast group
         DatagramPacket p = new DatagramPacket(message, message.length);
         p.setSocketAddress(target);
         s.send(p, (byte) 1);
 
         // datagram should not be received
         s.setSoTimeout(500);
         p = new DatagramPacket(new byte[1024], 100);
-        try {
-            s.receive(p);
-            assertTrue(false);
-        } catch (SocketTimeoutException expected) { }
+        while (true) {
+            try {
+                s.receive(p);
+                if (Arrays.equals(p.getData(), p.getOffset(), p.getLength(), message, 0, message.length)) {
+                    throw new RuntimeException("message shouldn't have been received");
+                } else {
+                    System.out.println("Received unexpected message from " + p.getSocketAddress());
+                }
+            } catch (SocketTimeoutException expected) {
+                break;
+            }
+        }
     }
 
 
     static void assertTrue(boolean e) {
         if (!e) throw new RuntimeException();
