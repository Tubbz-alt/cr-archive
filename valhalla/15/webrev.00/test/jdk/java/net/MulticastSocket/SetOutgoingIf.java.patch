diff a/test/jdk/java/net/MulticastSocket/SetOutgoingIf.java b/test/jdk/java/net/MulticastSocket/SetOutgoingIf.java
--- a/test/jdk/java/net/MulticastSocket/SetOutgoingIf.java
+++ b/test/jdk/java/net/MulticastSocket/SetOutgoingIf.java
@@ -22,19 +22,31 @@
  */
 
 /*
  * @test
  * @bug 4742177
+ * @library /test/lib
  * @summary Re-test IPv6 (and specifically MulticastSocket) with latest Linux & USAGI code
  */
+import java.io.IOException;
 import java.net.*;
 import java.util.*;
+import jdk.test.lib.NetworkConfiguration;
 
 
-public class SetOutgoingIf {
-    private static int PORT = 9001;
+public class SetOutgoingIf implements AutoCloseable {
     private static String osname;
+    private final MulticastSocket SOCKET;
+    private final int PORT;
+    private SetOutgoingIf() {
+        try {
+            SOCKET = new MulticastSocket();
+            PORT = SOCKET.getLocalPort();
+        } catch (IOException io) {
+            throw new ExceptionInInitializerError(io);
+        }
+    }
 
     static boolean isWindows() {
         if (osname == null)
             osname = System.getProperty("os.name");
         return osname.contains("Windows");
@@ -43,24 +55,28 @@
     static boolean isMacOS() {
         return System.getProperty("os.name").contains("OS X");
     }
 
     private static boolean hasIPv6() throws Exception {
-        List<NetworkInterface> nics = Collections.list(
-                                        NetworkInterface.getNetworkInterfaces());
-        for (NetworkInterface nic : nics) {
-            List<InetAddress> addrs = Collections.list(nic.getInetAddresses());
-            for (InetAddress addr : addrs) {
-                if (addr instanceof Inet6Address)
-                    return true;
-            }
+        return NetworkConfiguration.probe()
+                .ip6Addresses()
+                .findAny()
+                .isPresent();
+    }
+
+    public static void main(String[] args) throws Exception {
+        try (var test = new SetOutgoingIf()) {
+            test.run();
         }
+    }
 
-        return false;
+    @Override
+    public void close() {
+        SOCKET.close();
     }
 
-    public static void main(String[] args) throws Exception {
+    public void run() throws Exception {
         if (isWindows()) {
             System.out.println("The test only run on non-Windows OS. Bye.");
             return;
         }
 
@@ -97,15 +113,18 @@
                 }
             } else {
                 System.out.println("Ignore NetworkInterface nic == " + nic);
             }
         }
+        Collections.reverse(netIfs);
         if (netIfs.size() <= 1) {
             System.out.println("Need 2 or more network interfaces to run. Bye.");
             return;
         }
 
+        System.out.println("Using PORT: " + PORT);
+
         // We will send packets to one ipv4, and one ipv6
         // multicast group using each network interface :-
         //      224.1.1.1        --|
         //      ff02::1:1        --|--> using network interface #1
         //      224.1.2.1        --|
@@ -175,16 +194,12 @@
             }
         }
     }
 
     private static boolean isTestExcludedInterface(NetworkInterface nif) {
-        if (isMacOS() && nif.getName().contains("awdl"))
-            return true;
-        String dName = nif.getDisplayName();
-        if (isWindows() && dName != null && dName.contains("Teredo"))
-            return true;
-        return false;
+       return !NetworkConfiguration.isTestable(nif)
+               || isMacOS() && nif.getName().startsWith("utun");
     }
 
     private static boolean debug = true;
 
     static void debug(String message) {
@@ -279,6 +294,5 @@
 
     void groups(List<InetAddress> groups) {
         this.groups = groups;
     }
 }
-
