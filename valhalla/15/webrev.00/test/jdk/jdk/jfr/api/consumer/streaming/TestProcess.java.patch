diff a/test/jdk/jdk/jfr/api/consumer/streaming/TestProcess.java b/test/jdk/jdk/jfr/api/consumer/streaming/TestProcess.java
--- a/test/jdk/jdk/jfr/api/consumer/streaming/TestProcess.java
+++ b/test/jdk/jdk/jfr/api/consumer/streaming/TestProcess.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -32,10 +32,11 @@
 import java.nio.file.Paths;
 import java.util.Properties;
 
 import jdk.internal.misc.Unsafe;
 import jdk.jfr.Event;
+import jdk.test.lib.jfr.StreamingUtils;
 import jdk.test.lib.process.ProcessTools;
 
 import com.sun.tools.attach.VirtualMachine;
 
 /**
@@ -89,26 +90,12 @@
             }
             takeNap();
         }
     }
 
-    public Path getRepository() {
-        while (true) {
-            try {
-                VirtualMachine vm = VirtualMachine.attach(String.valueOf(process.pid()));
-                Properties p = vm.getSystemProperties();
-                vm.detach();
-                String repo = (String) p.get("jdk.jfr.repository");
-                if (repo != null) {
-                    return Paths.get(repo);
-                }
-            } catch (Exception e) {
-                System.out.println("Attach failed: " + e.getMessage());
-                System.out.println("Retrying...");
-            }
-            takeNap();
-        }
+    public Path getRepository() throws Exception {
+        return StreamingUtils.getJfrRepository(process);
     }
 
     private static void takeNap() {
         try {
             Thread.sleep(10);
