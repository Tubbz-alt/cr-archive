diff a/test/lib/jdk/test/lib/NetworkConfiguration.java b/test/lib/jdk/test/lib/NetworkConfiguration.java
--- a/test/lib/jdk/test/lib/NetworkConfiguration.java
+++ b/test/lib/jdk/test/lib/NetworkConfiguration.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -29,14 +29,15 @@
 import java.net.Inet4Address;
 import java.net.Inet6Address;
 import java.net.InetAddress;
 import java.net.NetworkInterface;
 import java.util.Arrays;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 
@@ -85,13 +86,24 @@
                     }
                 });
         });
     }
 
-    private static boolean isNotExcludedInterface(NetworkInterface nif) {
-        if (Platform.isOSX() && nif.getName().contains("awdl")) {
-            return false;
+    private static boolean isIPv6LinkLocal(InetAddress a) {
+        return Inet6Address.class.isInstance(a) && a.isLinkLocalAddress();
+    }
+
+    public static boolean isTestable(NetworkInterface nif) {
+        if (Platform.isOSX()) {
+            if (nif.getName().contains("awdl")) {
+                return false; // exclude awdl
+            }
+            // filter out interfaces that only have link-local addresses
+            return nif.inetAddresses()
+                    .filter(Predicate.not(NetworkConfiguration::isIPv6LinkLocal))
+                    .findAny()
+                    .isPresent();
         }
         if (Platform.isWindows()) {
             String dName = nif.getDisplayName();
             if (dName != null && dName.contains("Teredo")) {
                 return false;
@@ -199,21 +211,21 @@
      * Returns a stream of interfaces suitable for IPv4 functional tests.
      */
     public Stream<NetworkInterface> ip4Interfaces() {
         return ip4Interfaces.keySet()
                             .stream()
-                            .filter(NetworkConfiguration::isNotExcludedInterface)
+                            .filter(NetworkConfiguration::isTestable)
                             .filter(this::hasIp4Addresses);
     }
 
     /**
      * Returns a stream of interfaces suitable for IPv6 functional tests.
      */
     public Stream<NetworkInterface> ip6Interfaces() {
         return ip6Interfaces.keySet()
                             .stream()
-                            .filter(NetworkConfiguration::isNotExcludedInterface)
+                            .filter(NetworkConfiguration::isTestable)
                             .filter(this::hasIp6Addresses);
     }
 
     /**
      * Returns a stream of interfaces suitable for functional tests.
@@ -307,12 +319,12 @@
 
     /**
      * Return a NetworkConfiguration instance.
      */
     public static NetworkConfiguration probe() throws IOException {
-        Map<NetworkInterface, List<Inet4Address>> ip4Interfaces = new HashMap<>();
-        Map<NetworkInterface, List<Inet6Address>> ip6Interfaces = new HashMap<>();
+        Map<NetworkInterface, List<Inet4Address>> ip4Interfaces = new LinkedHashMap<>();
+        Map<NetworkInterface, List<Inet6Address>> ip6Interfaces = new LinkedHashMap<>();
 
         List<NetworkInterface> nifs = list(getNetworkInterfaces());
         for (NetworkInterface nif : nifs) {
             // ignore interfaces that are down
             if (!nif.isUp() || nif.isPointToPoint()) {
