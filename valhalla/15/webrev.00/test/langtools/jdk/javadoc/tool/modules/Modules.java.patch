diff a/test/langtools/jdk/javadoc/tool/modules/Modules.java b/test/langtools/jdk/javadoc/tool/modules/Modules.java
--- a/test/langtools/jdk/javadoc/tool/modules/Modules.java
+++ b/test/langtools/jdk/javadoc/tool/modules/Modules.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 
 /*
  * @test
- * @bug 8159305 8166127 8175860 8176481
+ * @bug 8159305 8166127 8175860 8176481 8239575
  * @summary Tests primarily the module graph computations.
  * @modules
  *      jdk.javadoc/jdk.javadoc.internal.api
  *      jdk.javadoc/jdk.javadoc.internal.tool
  *      jdk.compiler/com.sun.tools.javac.api
@@ -651,6 +651,23 @@
                 .classes("package openQ; /** Class Q open. */ public class Q { openJ.J j; }")
                 .classes("package closedQ;  /** Class Q closed. */ public class Q { }")
                 .write(src);
 
     }
+
+    @Test
+    public void testSingleModuleOptionWithSourcePathAndAnnotatedModule(Path base) throws Exception {
+        Path src = base.resolve("src");
+        Path mod = Paths.get(src.toString(), "m1");
+        tb.writeJavaFiles(mod,
+                "@Deprecated module m1 { exports p; }",
+                "package p; public class C { }",
+                "package p; public class P { }");
+        execTask("--source-path", mod.toString(),
+                 "--module", "m1");
+        checkModulesSpecified("m1");
+        checkPackagesIncluded("p");
+        checkTypesIncluded("p.C");
+        checkTypesIncluded("p.P");
+    }
+
 }
