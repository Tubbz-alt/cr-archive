diff a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -4335,11 +4335,11 @@
   }
 
   // Temporary value types restrictions
   if (is_value_type()) {
     if (is_contended_class) {
-      throwValueTypeLimitation(THREAD_AND_LOCATION, "Value Types do not support @Contended annotation yet");
+      throwValueTypeLimitation(THREAD_AND_LOCATION, "Inline Types do not support @Contended annotation yet");
       return;
     }
   }
 
   // Compute the non-contended fields count.
@@ -4436,11 +4436,11 @@
     super_has_nonstatic_fields || (nonstatic_fields_count != 0);
   const bool has_nonstatic_value_fields = nonstatic_value_type_count > 0;
 
   if (is_value_type() && (!has_nonstatic_fields)) {
     // There are a number of fixes required throughout the type system and JIT
-    throwValueTypeLimitation(THREAD_AND_LOCATION, "Value Types do not support zero instance size yet");
+    throwValueTypeLimitation(THREAD_AND_LOCATION, "Inline Types do not support zero instance size yet");
     return;
   }
 
   // Prepare list of oops for oop map generation.
   //
@@ -4759,11 +4759,11 @@
             break;
 
             // Value types in static fields are handled with oops
           case NONSTATIC_FLATTENABLE:
             throwValueTypeLimitation(THREAD_AND_LOCATION,
-                                     "@Contended annotation not supported for value types yet", fs.name(), fs.signature());
+                                     "@Contended annotation not supported for inline types yet", fs.name(), fs.signature());
             return;
 
           case NONSTATIC_OOP:
             next_nonstatic_padded_offset = align_up(next_nonstatic_padded_offset, heapOopSize);
             real_offset = next_nonstatic_padded_offset;
@@ -4921,11 +4921,11 @@
   // Check if this klass supports the java.lang.Cloneable interface
   if (SystemDictionary::Cloneable_klass_loaded()) {
     if (ik->is_subtype_of(SystemDictionary::Cloneable_klass())) {
       if (ik->is_value()) {
         Thread *THREAD = Thread::current();
-        throwValueTypeLimitation(THREAD_AND_LOCATION, "Value Types do not support Cloneable");
+        throwValueTypeLimitation(THREAD_AND_LOCATION, "Inline Types do not support Cloneable");
         return;
       }
       ik->set_is_cloneable();
     }
   }
@@ -6928,11 +6928,11 @@
     }
 
     // For a value class, only java/lang/Object is an acceptable super class
     if (_access_flags.get_flags() & JVM_ACC_VALUE) {
       guarantee_property(_super_klass->name() == vmSymbols::java_lang_Object(),
-        "Value type must have java.lang.Object as superclass in class file %s",
+        "Inline type must have java.lang.Object as superclass in class file %s",
         CHECK);
     }
 
     // Make sure super class is not final
     if (_super_klass->is_final()) {
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/BadValueTypes.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/BadValueTypes.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/BadValueTypes.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/BadValueTypes.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -58,11 +58,11 @@
 
         // Test that inline type instance methods cannot be synchronized.
         runTest("ValueMethodSynch",
                 "Method getInt in class ValueMethodSynch (an inline class) has illegal modifiers");
 
-        runTest("ValueSuperClass", "Value type must have java.lang.Object as superclass");
+        runTest("ValueSuperClass", "Inline type must have java.lang.Object as superclass");
 
         // Test that ClassCircularityError gets detected for instance fields.
         System.out.println("Testing ClassCircularityError for instance fields");
         try {
             Class newClass = Class.forName("Circ");
@@ -79,8 +79,8 @@
             Class newClass = Class.forName("CircStaticB");
         } catch (java.lang.ClassCircularityError e) {
              throw new RuntimeException( "java.lang.ClassCircularityError exception thrown!");
          }
 
-        runTest("ValueCloneable", "Value Types do not support Cloneable");
+        runTest("ValueCloneable", "Inline Types do not support Cloneable");
     }
 }
