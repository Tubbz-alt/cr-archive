diff a/src/hotspot/cpu/aarch64/aarch64.ad b/src/hotspot/cpu/aarch64/aarch64.ad
--- a/src/hotspot/cpu/aarch64/aarch64.ad
+++ b/src/hotspot/cpu/aarch64/aarch64.ad
@@ -10659,34 +10659,10 @@
 
   ins_encode(aarch64_enc_divw(dst, src1, src2));
   ins_pipe(idiv_reg_reg);
 %}
 
-instruct signExtract(iRegINoSp dst, iRegIorL2I src1, immI_31 div1, immI_31 div2) %{
-  match(Set dst (URShiftI (RShiftI src1 div1) div2));
-  ins_cost(INSN_COST);
-  format %{ "lsrw $dst, $src1, $div1" %}
-  ins_encode %{
-    __ lsrw(as_Register($dst$$reg), as_Register($src1$$reg), 31);
-  %}
-  ins_pipe(ialu_reg_shift);
-%}
-
-instruct div2Round(iRegINoSp dst, iRegIorL2I src, immI_31 div1, immI_31 div2) %{
-  match(Set dst (AddI src (URShiftI (RShiftI src div1) div2)));
-  ins_cost(INSN_COST);
-  format %{ "addw $dst, $src, LSR $div1" %}
-
-  ins_encode %{
-    __ addw(as_Register($dst$$reg),
-              as_Register($src$$reg),
-              as_Register($src$$reg),
-              Assembler::LSR, 31);
-  %}
-  ins_pipe(ialu_reg);
-%}
-
 // Long Divide
 
 instruct divL(iRegLNoSp dst, iRegL src1, iRegL src2) %{
   match(Set dst (DivL src1 src2));
 
@@ -10695,34 +10671,10 @@
 
   ins_encode(aarch64_enc_div(dst, src1, src2));
   ins_pipe(ldiv_reg_reg);
 %}
 
-instruct signExtractL(iRegLNoSp dst, iRegL src1, immI_63 div1, immI_63 div2) %{
-  match(Set dst (URShiftL (RShiftL src1 div1) div2));
-  ins_cost(INSN_COST);
-  format %{ "lsr $dst, $src1, $div1" %}
-  ins_encode %{
-    __ lsr(as_Register($dst$$reg), as_Register($src1$$reg), 63);
-  %}
-  ins_pipe(ialu_reg_shift);
-%}
-
-instruct div2RoundL(iRegLNoSp dst, iRegL src, immI_63 div1, immI_63 div2) %{
-  match(Set dst (AddL src (URShiftL (RShiftL src div1) div2)));
-  ins_cost(INSN_COST);
-  format %{ "add $dst, $src, $div1" %}
-
-  ins_encode %{
-    __ add(as_Register($dst$$reg),
-              as_Register($src$$reg),
-              as_Register($src$$reg),
-              Assembler::LSR, 63);
-  %}
-  ins_pipe(ialu_reg);
-%}
-
 // Integer Remainder
 
 instruct modI(iRegINoSp dst, iRegIorL2I src1, iRegIorL2I src2) %{
   match(Set dst (ModI src1 src2));
 
@@ -15401,13 +15353,13 @@
 
   ins_cost(CALL_COST);
   format %{ "ShouldNotReachHere" %}
 
   ins_encode %{
-    // +1 so NativeInstruction::is_sigill_zombie_not_entrant() doesn't
-    // return true
-    __ dpcs1(0xdead + 1);
+    if (is_reachable()) {
+      __ dpcs1(0xdead + 1);
+    }
   %}
 
   ins_pipe(pipe_class_default);
 %}
 
