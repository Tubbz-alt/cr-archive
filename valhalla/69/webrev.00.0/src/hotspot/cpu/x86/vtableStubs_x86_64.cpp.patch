diff a/src/hotspot/cpu/x86/vtableStubs_x86_64.cpp b/src/hotspot/cpu/x86/vtableStubs_x86_64.cpp
--- a/src/hotspot/cpu/x86/vtableStubs_x86_64.cpp
+++ b/src/hotspot/cpu/x86/vtableStubs_x86_64.cpp
@@ -46,10 +46,11 @@
 #endif
 
 VtableStub* VtableStubs::create_vtable_stub(int vtable_index, bool caller_is_c1) {
   // Read "A word on VtableStub sizing" in share/code/vtableStubs.hpp for details on stub sizing.
   const int stub_code_length = code_size_limit(true);
+  Register tmp_load_klass = rscratch1;
   VtableStub* s = new(stub_code_length) VtableStub(true, vtable_index, caller_is_c1);
   // Can be NULL if there is no free space in the code cache.
   if (s == NULL) {
     return NULL;
   }
@@ -79,11 +80,11 @@
 
   // Free registers (non-args) are rax, rbx
 
   // get receiver klass
   address npe_addr = __ pc();
-  __ load_klass(rax, j_rarg0);
+  __ load_klass(rax, j_rarg0, tmp_load_klass);
 
 #ifndef PRODUCT
   if (DebugVtables) {
     Label L;
     start_pc = __ pc();
@@ -186,11 +187,11 @@
   Label L_no_such_interface;
 
   // get receiver klass (also an implicit null-check)
   assert(VtableStub::receiver_location() == j_rarg0->as_VMReg(), "receiver expected in j_rarg0");
   address npe_addr = __ pc();
-  __ load_klass(recv_klass_reg, j_rarg0);
+  __ load_klass(recv_klass_reg, j_rarg0, temp_reg);
 
   start_pc = __ pc();
 
   // Receiver subtype check against REFC.
   // Destroys recv_klass_reg value.
@@ -204,11 +205,11 @@
   const ptrdiff_t  typecheckSize = __ pc() - start_pc;
   start_pc = __ pc();
 
   // Get selected method from declaring class and itable index
   const Register method = rbx;
-  __ load_klass(recv_klass_reg, j_rarg0);   // restore recv_klass_reg
+  __ load_klass(recv_klass_reg, j_rarg0, temp_reg);   // restore recv_klass_reg
   __ lookup_interface_method(// inputs: rec. class, interface, itable index
                              recv_klass_reg, holder_klass_reg, itable_index,
                              // outputs: method, scan temp. reg
                              method, temp_reg,
                              L_no_such_interface);
