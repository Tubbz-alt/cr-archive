diff a/src/hotspot/share/opto/compile.hpp b/src/hotspot/share/opto/compile.hpp
--- a/src/hotspot/share/opto/compile.hpp
+++ b/src/hotspot/share/opto/compile.hpp
@@ -320,10 +320,12 @@
   GrowableArray<Node*>* _opaque4_nodes;         // List of Opaque4 nodes that have a default value
   Unique_Node_List*     _value_type_nodes;      // List of ValueType nodes
   ConnectionGraph*      _congraph;
 #ifndef PRODUCT
   IdealGraphPrinter*    _printer;
+  static IdealGraphPrinter* _debug_file_printer;
+  static IdealGraphPrinter* _debug_network_printer;
 #endif
 
 
   // Node management
   uint                  _unique;                // Counter for unique Node indices
@@ -649,20 +651,27 @@
 
 #ifndef PRODUCT
     if (should_print(level)) {
       char output[1024];
       if (idx != 0) {
-        sprintf(output, "%s:%d", CompilerPhaseTypeHelper::to_string(cpt), idx);
+        jio_snprintf(output, sizeof(output), "%s:%d", CompilerPhaseTypeHelper::to_string(cpt), idx);
       } else {
-        sprintf(output, "%s", CompilerPhaseTypeHelper::to_string(cpt));
+        jio_snprintf(output, sizeof(output), "%s", CompilerPhaseTypeHelper::to_string(cpt));
       }
       _printer->print_method(output, level);
     }
 #endif
     C->_latest_stage_start_counter.stamp();
   }
 
+#ifndef PRODUCT
+  void igv_print_method_to_file(const char* phase_name = "Debug", bool append = false);
+  void igv_print_method_to_network(const char* phase_name = "Debug");
+  static IdealGraphPrinter* debug_file_printer() { return _debug_file_printer; }
+  static IdealGraphPrinter* debug_network_printer() { return _debug_network_printer; }
+#endif
+
   void end_method(int level = 1) {
     EventCompilerPhase event;
     if (event.should_commit()) {
       CompilerEvent::PhaseEvent::post(event, C->_latest_stage_start_counter, PHASE_END, C->_compile_id, level);
     }
