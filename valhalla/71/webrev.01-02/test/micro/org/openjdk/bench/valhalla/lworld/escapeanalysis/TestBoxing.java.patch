diff a/test/micro/org/openjdk/bench/valhalla/lworld/escapeanalysis/TestBoxing.java b/test/micro/org/openjdk/bench/valhalla/lworld/escapeanalysis/TestBoxing.java
--- a/test/micro/org/openjdk/bench/valhalla/lworld/escapeanalysis/TestBoxing.java
+++ b/test/micro/org/openjdk/bench/valhalla/lworld/escapeanalysis/TestBoxing.java
@@ -85,33 +85,66 @@
             sum += BoxInterface.from(arr[i]).box().value();
         }
         return sum;
     }
 
+    @Benchmark
+    public int box_intf_loop_sharp() {
+        int sum = 0;
+        for (int i = 0; i < ELEM_SIZE; i++) {
+            sum += BoxInterface.from_sharp(arr[i]).box().value();
+        }
+        return sum;
+    }
+
     @Benchmark
     public int box_ref_loop() {
         int sum = 0;
         for (int i = 0; i < ELEM_SIZE; i++) {
             sum += BoxRef.from(arr[i]).box().value();
         }
         return sum;
     }
 
+    @Benchmark
+    public int box_ref_loop_sharp() {
+        int sum = 0;
+        for (int i = 0; i < ELEM_SIZE; i++) {
+            sum += BoxRef.from_sharp(arr[i]).box().value();
+        }
+        return sum;
+    }
+
     @Benchmark
     public int box_generic_loop() {
         int sum = 0;
         for (int i = 0; i < ELEM_SIZE; i++) {
             sum += BoxGeneric.from(arr[i]).box().value();
         }
         return sum;
     }
 
+    @Benchmark
+    public int box_generic_loop_sharp() {
+        int sum = 0;
+        for (int i = 0; i < ELEM_SIZE; i++) {
+            sum += BoxGeneric.from_sharp(arr[i]).box().value();
+        }
+        return sum;
+    }
+
     interface ValueBox {
         long value();
+
+        final static LongWrapper ZERO = new LongWrapper(0);
+
+        static ValueBox from(long i) {
+            return (i == 0L) ? ZERO : new LongWrapper(i);
+        }
     }
 
-    static class PojoWrapper implements ValueBox {
+    static class PojoWrapper {
         final long i;
 
         PojoWrapper(long i) {
             this.i = i;
         }
@@ -121,11 +154,11 @@
         }
 
         final static PojoWrapper ZERO = new PojoWrapper(0);
 
         static PojoWrapper from(long i) {
-            return i == 0L ? ZERO : new PojoWrapper(i);
+            return (i == 0L) ? ZERO : new PojoWrapper(i);
         }
     }
 
     static inline class LongWrapper implements ValueBox {
         final long i;
@@ -139,29 +172,34 @@
         }
 
         final static LongWrapper ZERO = new LongWrapper(0);
 
         static LongWrapper from(long i) {
-            return i == 0L ? ZERO : new LongWrapper(i);
+            return (i == 0L) ? ZERO : new LongWrapper(i);
         }
     }
 
     static class BoxInterface {
         final ValueBox inlineBox;
 
-        public BoxInterface(LongWrapper inlineBox) {
+        public BoxInterface(ValueBox inlineBox) {
             this.inlineBox = inlineBox;
         }
 
         ValueBox box() {
             return inlineBox;
         }
 
-        static BoxInterface from(long i) {
+        static BoxInterface from_sharp(long i) {
             LongWrapper box = LongWrapper.from(i);
             return new BoxInterface(box);
         }
+
+        static BoxInterface from(long i) {
+            ValueBox box = ValueBox.from(i);
+            return new BoxInterface(box);
+        }
     }
 
     static class BoxInline {
         final LongWrapper inlineBox;
 
@@ -180,22 +218,27 @@
     }
 
     static class BoxRef {
         final LongWrapper.ref inlineBox;
 
-        public BoxRef(LongWrapper inlineBox) {
+        public BoxRef(LongWrapper.ref inlineBox) {
             this.inlineBox = inlineBox;
         }
 
         ValueBox box() {
             return inlineBox;
         }
 
-        static BoxRef from(long i) {
+        static BoxRef from_sharp(long i) {
             LongWrapper box = LongWrapper.from(i);
             return new BoxRef(box);
         }
+
+        static BoxRef from(long i) {
+            LongWrapper.ref box = LongWrapper.from(i);
+            return new BoxRef(box);
+        }
     }
 
     static class BoxGeneric<T> {
         final T inlineBox;
 
@@ -205,11 +248,16 @@
 
         T box() {
             return inlineBox;
         }
 
-        static BoxGeneric<LongWrapper.ref> from(long i) {
+        static BoxGeneric<LongWrapper.ref> from_sharp(long i) {
             LongWrapper box = LongWrapper.from(i);
             return new BoxGeneric<LongWrapper.ref>(box);
         }
+
+        static BoxGeneric<ValueBox> from(long i) {
+            ValueBox box = ValueBox.from(i);
+            return new BoxGeneric<ValueBox>(box);
+        }
     }
 }
