diff a/src/hotspot/share/opto/valuetypenode.cpp b/src/hotspot/share/opto/valuetypenode.cpp
--- a/src/hotspot/share/opto/valuetypenode.cpp
+++ b/src/hotspot/share/opto/valuetypenode.cpp
@@ -295,12 +295,14 @@
         assert(field != NULL, "field not found");
         ciConstant constant = constant_oop->as_instance()->field_value(field);
         const Type* con_type = Type::make_from_constant(constant, /*require_const=*/ true);
         assert(con_type != NULL, "type not found");
         value = kit->gvn().transform(kit->makecon(con_type));
-        if (ft->is_valuetype() && !constant.as_object()->is_null_object()) {
+        // Check type of constant which might be more precise
+        if (con_type->is_valuetypeptr() && !con_type->is_zero_type()) {
           // Null-free, treat as flattenable
+          ft = con_type->value_klass();
           is_flattenable = true;
         }
       } else {
         // Load field value from memory
         const TypePtr* adr_type = field_adr_type(base, offset, holder, decorators, kit->gvn());
