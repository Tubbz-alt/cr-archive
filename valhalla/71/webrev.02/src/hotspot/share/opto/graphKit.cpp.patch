diff a/src/hotspot/share/opto/graphKit.cpp b/src/hotspot/share/opto/graphKit.cpp
--- a/src/hotspot/share/opto/graphKit.cpp
+++ b/src/hotspot/share/opto/graphKit.cpp
@@ -1620,11 +1620,11 @@
   if (val->is_ValueType()) {
     // Store to non-flattened field. Buffer the inline type and make sure
     // the store is re-executed if the allocation triggers deoptimization.
     PreserveReexecuteState preexecs(this);
     jvms()->set_should_reexecute(true);
-    val = val->as_ValueType()->allocate(this, safe_for_replace)->get_oop();
+    val = val->as_ValueType()->buffer(this, safe_for_replace);
   }
 
   C2AccessValuePtr addr(adr, adr_type);
   C2AccessValue value(val, val_type);
   C2ParseAccess access(this, decorators | C2_WRITE_ACCESS, bt, obj, addr);
@@ -1813,14 +1813,13 @@
       // For example, see CompiledMethod::preserve_callee_argument_oops().
       call->set_override_symbolic_info(true);
       continue;
     } else if (arg->is_ValueType()) {
       // Pass value type argument via oop to callee
-      if (is_late_inline) {
-        arg = ValueTypePtrNode::make_from_value_type(this, arg->as_ValueType());
-      } else {
-        arg = arg->as_ValueType()->allocate(this)->get_oop();
+      arg = arg->as_ValueType()->buffer(this);
+      if (!is_late_inline) {
+        arg = arg->as_ValueTypePtr()->get_oop();
       }
     }
     call->init_req(idx++, arg);
     // Skip reserved arguments
     BasicType bt = t->basic_type();
@@ -4580,13 +4579,14 @@
   const Type* con_type = Type::make_constant_from_field(field, holder, field->layout_type(),
                                                         /*is_unsigned_load=*/false);
   if (con_type != NULL) {
     Node* con = makecon(con_type);
     assert(!field->is_flattenable() || (field->is_static() && !con_type->is_zero_type()), "sanity");
-    if (field->layout_type() == T_VALUETYPE && field->type()->as_value_klass()->is_scalarizable()) {
+    // Check type of constant which might be more precise
+    if (con_type->is_valuetypeptr() && con_type->value_klass()->is_scalarizable()) {
       // Load value type from constant oop
-      con = ValueTypeNode::make_from_oop(this, con, field->type()->as_value_klass());
+      con = ValueTypeNode::make_from_oop(this, con, con_type->value_klass());
     }
     return con;
   }
   return NULL;
 }
