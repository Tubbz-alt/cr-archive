diff a/src/hotspot/share/opto/parseHelper.cpp b/src/hotspot/share/opto/parseHelper.cpp
--- a/src/hotspot/share/opto/parseHelper.cpp
+++ b/src/hotspot/share/opto/parseHelper.cpp
@@ -375,11 +375,11 @@
     // Non-flattenable field value needs to be allocated because it can be merged
     // with an oop. Re-execute withfield if buffering triggers deoptimization.
     PreserveReexecuteState preexecs(this);
     jvms()->set_should_reexecute(true);
     inc_sp(nargs);
-    val = ValueTypePtrNode::make_from_value_type(this, val->as_ValueType());
+    val = val->as_ValueType()->buffer(this);
   }
 
   // Clone the value type node and set the new field value
   ValueTypeNode* new_vt = holder->clone()->as_ValueType();
   new_vt->set_oop(_gvn.zerocon(T_VALUETYPE));
@@ -390,11 +390,11 @@
   if (!holder_klass->is_scalarizable()) {
     // Re-execute withfield if buffering triggers deoptimization
     PreserveReexecuteState preexecs(this);
     jvms()->set_should_reexecute(true);
     inc_sp(nargs);
-    res = new_vt->allocate(this)->get_oop();
+    res = new_vt->buffer(this)->get_oop();
   }
   push(_gvn.transform(res));
 }
 
 #ifndef PRODUCT
