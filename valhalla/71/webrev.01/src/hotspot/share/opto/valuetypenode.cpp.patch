diff a/src/hotspot/share/opto/valuetypenode.cpp b/src/hotspot/share/opto/valuetypenode.cpp
--- a/src/hotspot/share/opto/valuetypenode.cpp
+++ b/src/hotspot/share/opto/valuetypenode.cpp
@@ -45,13 +45,13 @@
 
   // Create a PhiNode each for merging the field values
   for (uint i = 0; i < vt->field_count(); ++i) {
     ciType* type = vt->field_type(i);
     Node*  value = vt->field_value(i);
-    if (type->is_valuetype() && value->isa_ValueType()) {
+    if (value->is_ValueTypeBase()) {
       // Handle flattened value type fields recursively
-      value = value->as_ValueType()->clone_with_phis(gvn, region);
+      value = value->as_ValueTypeBase()->clone_with_phis(gvn, region);
     } else {
       phi_type = Type::get_const_type(type);
       value = PhiNode::make(region, value, phi_type);
       gvn->set_type(value, phi_type);
     }
@@ -93,12 +93,12 @@
   }
   // Merge field values
   for (uint i = 0; i < field_count(); ++i) {
     Node* val1 =        field_value(i);
     Node* val2 = other->field_value(i);
-    if (val1->is_ValueType()) {
-      val1->as_ValueType()->merge_with(gvn, val2->as_ValueType(), pnum, transform);
+    if (val1->is_ValueTypeBase()) {
+      val1->as_ValueTypeBase()->merge_with(gvn, val2->as_ValueTypeBase(), pnum, transform);
     } else {
       assert(val1->is_Phi(), "must be a phi node");
       assert(!val2->is_ValueType(), "inconsistent merge values");
       val1->set_req(pnum, val2);
     }
@@ -251,10 +251,11 @@
   // Now scalarize non-flattened fields
   for (uint i = 0; i < worklist.size(); ++i) {
     Node* vt = worklist.at(i);
     vt->as_ValueType()->make_scalar_in_safepoints(igvn);
   }
+  igvn->record_for_igvn(this);
 }
 
 const TypePtr* ValueTypeBaseNode::field_adr_type(Node* base, int offset, ciInstanceKlass* holder, DecoratorSet decorators, PhaseGVN& gvn) const {
   const TypeAryPtr* ary_type = gvn.type(base)->isa_aryptr();
   const TypePtr* adr_type = NULL;
@@ -362,17 +363,18 @@
       kit->access_store_at(base, adr, adr_type, value, val_type, bt, decorators);
     }
   }
 }
 
-ValueTypeBaseNode* ValueTypeBaseNode::allocate(GraphKit* kit, bool safe_for_replace) {
+ValueTypePtrNode* ValueTypeBaseNode::buffer(GraphKit* kit, bool safe_for_replace) {
+  assert(is_ValueType(), "sanity");
   // Check if value type is already allocated
   Node* null_ctl = kit->top();
   Node* not_null_oop = kit->null_check_oop(get_oop(), &null_ctl);
   if (null_ctl->is_top()) {
     // Value type is allocated
-    return this;
+    return kit->gvn().transform(new ValueTypePtrNode(this))->as_ValueTypePtr();
   }
   assert(!is_allocated(&kit->gvn()), "should not be allocated");
   RegionNode* region = new RegionNode(3);
 
   // Oop is non-NULL, use it
@@ -428,11 +430,11 @@
   }
   // ValueTypeNode::remove_redundant_allocations piggybacks on split if.
   // Make sure it gets a chance to remove this allocation.
   kit->C->set_has_split_ifs(true);
   assert(vt->is_allocated(&kit->gvn()), "must be allocated");
-  return vt;
+  return kit->gvn().transform(new ValueTypePtrNode(vt))->as_ValueTypePtr();
 }
 
 bool ValueTypeBaseNode::is_allocated(PhaseGVN* phase) const {
   Node* oop = get_oop();
   const Type* oop_type = (phase != NULL) ? phase->type(oop) : oop->bottom_type();
@@ -479,11 +481,11 @@
      if (field_is_flattened(i)) {
        // Flattened value type field
        vt->set_field_value(i, value->allocate_fields(kit));
      } else if (value != NULL) {
        // Non-flattened value type field
-       vt->set_field_value(i, value->allocate(kit));
+       vt->set_field_value(i, value->buffer(kit));
      }
   }
   vt = kit->gvn().transform(vt)->as_ValueTypeBase();
   kit->replace_in_map(this, vt);
   return vt;
@@ -716,11 +718,11 @@
     } else {
       if (arg->is_ValueType()) {
         // Non-flattened value type field
         ValueTypeNode* vt = arg->as_ValueType();
         assert(n->Opcode() != Op_Return || vt->is_allocated(&kit->gvn()), "value type field should be allocated on return");
-        arg = vt->allocate(kit)->get_oop();
+        arg = vt->buffer(kit);
       }
       // Initialize call/return arguments
       BasicType bt = field_type(i)->basic_type();
       n->init_req(base_input++, arg);
       if (type2size[bt] == 2) {
@@ -890,20 +892,13 @@
         }
       }
       if (res_dom != res) {
         // Move users to dominating allocation
         igvn->replace_node(res, res_dom);
-        // The result of the dominated allocation is now unused and will be
-        // removed later in AllocateNode::Ideal() to not confuse loop opts.
+        // The result of the dominated allocation is now unused and will be removed
+        // later in PhaseMacroExpand::eliminate_allocate_node to not confuse loop opts.
         igvn->record_for_igvn(alloc);
-#ifdef ASSERT
-        if (PrintEliminateAllocations) {
-          tty->print("++++ Eliminated: %d Allocate ", alloc->_idx);
-          dump_spec(tty);
-          tty->cr();
-        }
-#endif
       }
     }
   }
 
   // Process users
@@ -926,23 +921,5 @@
 #endif
     }
   }
   igvn->remove_dead_node(this);
 }
-
-ValueTypePtrNode* ValueTypePtrNode::make_from_value_type(GraphKit* kit, ValueTypeNode* vt) {
-  Node* oop = vt->allocate(kit)->get_oop();
-  ValueTypePtrNode* vtptr = new ValueTypePtrNode(vt->value_klass(), oop);
-  for (uint i = Oop+1; i < vt->req(); i++) {
-    vtptr->init_req(i, vt->in(i));
-  }
-  return kit->gvn().transform(vtptr)->as_ValueTypePtr();
-}
-
-ValueTypePtrNode* ValueTypePtrNode::make_from_oop(GraphKit* kit, Node* oop) {
-  // Create and initialize a ValueTypePtrNode by loading all field
-  // values from a heap-allocated version and also save the oop.
-  ciValueKlass* vk = kit->gvn().type(oop)->value_klass();
-  ValueTypePtrNode* vtptr = new ValueTypePtrNode(vk, oop);
-  vtptr->load(kit, oop, oop, vk);
-  return kit->gvn().transform(vtptr)->as_ValueTypePtr();
-}
