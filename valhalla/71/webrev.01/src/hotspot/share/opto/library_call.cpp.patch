diff a/src/hotspot/share/opto/library_call.cpp b/src/hotspot/share/opto/library_call.cpp
--- a/src/hotspot/share/opto/library_call.cpp
+++ b/src/hotspot/share/opto/library_call.cpp
@@ -141,11 +141,11 @@
       if (C->inlining_incrementally() && res->is_ValueType()) {
         // The caller expects an oop when incrementally inlining an intrinsic that returns an
         // inline type. Make sure the call is re-executed if the allocation triggers a deoptimization.
         PreserveReexecuteState preexecs(this);
         jvms()->set_should_reexecute(true);
-        res = ValueTypePtrNode::make_from_value_type(this, res->as_ValueType());
+        res = res->as_ValueType()->buffer(this);
       }
       push_node(bt, res);
     }
   }
 
@@ -2520,12 +2520,11 @@
         }
       }
       // Re-execute the unsafe access if allocation triggers deoptimization.
       PreserveReexecuteState preexecs(this);
       jvms()->set_should_reexecute(true);
-      vt = vt->allocate(this)->as_ValueType();
-      base = vt->get_oop();
+      base = vt->buffer(this)->get_oop();
     }
   }
 
   // 32-bit machines ignore the high half!
   offset = ConvL2X(offset);
