diff a/src/hotspot/share/opto/compile.cpp b/src/hotspot/share/opto/compile.cpp
--- a/src/hotspot/share/opto/compile.cpp
+++ b/src/hotspot/share/opto/compile.cpp
@@ -404,12 +404,15 @@
     if (!useful.member(opaq)) {
       remove_opaque4_node(opaq);
     }
   }
   // Remove useless value type nodes
-  if (_value_type_nodes != NULL) {
-    _value_type_nodes->remove_useless_nodes(useful.member_set());
+  for (int i = _value_type_nodes->length() - 1; i >= 0; i--) {
+    Node* vt = _value_type_nodes->at(i);
+    if (!useful.member(vt)) {
+      _value_type_nodes->remove(vt);
+    }
   }
   BarrierSetC2* bs = BarrierSet::barrier_set()->barrier_set_c2();
   bs->eliminate_useless_gc_barriers(useful, this);
   // clean up the late inline lists
   remove_useless_late_inlines(&_string_late_inlines, useful);
@@ -1017,11 +1020,11 @@
   _macro_nodes = new(comp_arena()) GrowableArray<Node*>(comp_arena(), 8,  0, NULL);
   _predicate_opaqs = new(comp_arena()) GrowableArray<Node*>(comp_arena(), 8,  0, NULL);
   _expensive_nodes = new(comp_arena()) GrowableArray<Node*>(comp_arena(), 8,  0, NULL);
   _range_check_casts = new(comp_arena()) GrowableArray<Node*>(comp_arena(), 8,  0, NULL);
   _opaque4_nodes = new(comp_arena()) GrowableArray<Node*>(comp_arena(), 8,  0, NULL);
-  _value_type_nodes = new (comp_arena()) Unique_Node_List(comp_arena());
+  _value_type_nodes = new(comp_arena()) GrowableArray<Node*>(comp_arena(), 8,  0, NULL);
   register_library_intrinsics();
 #ifdef ASSERT
   _type_verify_symmetry = true;
 #endif
 }
@@ -1873,28 +1876,29 @@
   }
 }
 
 void Compile::remove_value_type(Node* n) {
   assert(n->is_ValueTypeBase(), "unexpected node");
-  if (_value_type_nodes != NULL) {
+  if (_value_type_nodes != NULL && _value_type_nodes->contains(n)) {
     _value_type_nodes->remove(n);
   }
 }
 
-// Does the return value keep otherwise useless value type allocations
-// alive?
+// Does the return value keep otherwise useless value type allocations alive?
 static bool return_val_keeps_allocations_alive(Node* ret_val) {
   ResourceMark rm;
   Unique_Node_List wq;
   wq.push(ret_val);
   bool some_allocations = false;
   for (uint i = 0; i < wq.size(); i++) {
     Node* n = wq.at(i);
-    assert(!n->is_ValueTypeBase(), "chain of value type nodes");
+    assert(!n->is_ValueType(), "chain of value type nodes");
     if (n->outcnt() > 1) {
       // Some other use for the allocation
       return false;
+    } else if (n->is_ValueTypePtr()) {
+      wq.push(n->in(1));
     } else if (n->is_Phi()) {
       for (uint j = 1; j < n->req(); j++) {
         wq.push(n->in(j));
       }
     } else if (n->is_CheckCastPP() &&
@@ -1904,22 +1908,28 @@
     }
   }
   return some_allocations;
 }
 
-void Compile::process_value_types(PhaseIterGVN &igvn) {
+void Compile::process_value_types(PhaseIterGVN &igvn, bool post_ea) {
   // Make value types scalar in safepoints
-  while (_value_type_nodes->size() != 0) {
-    ValueTypeBaseNode* vt = _value_type_nodes->pop()->as_ValueTypeBase();
+  for (int i = _value_type_nodes->length()-1; i >= 0; i--) {
+    ValueTypeBaseNode* vt = _value_type_nodes->at(i)->as_ValueTypeBase();
     vt->make_scalar_in_safepoints(&igvn);
-    if (vt->is_ValueTypePtr()) {
-      igvn.replace_node(vt, vt->get_oop());
-    } else if (vt->outcnt() == 0) {
-      igvn.remove_dead_node(vt);
+  }
+  // Remove ValueTypePtr nodes only after EA to give scalar replacement a chance
+  // to remove buffer allocations. ValueType nodes are kept until loop opts and
+  // removed via ValueTypeNode::remove_redundant_allocations.
+  if (post_ea) {
+    while (_value_type_nodes->length() > 0) {
+      ValueTypeBaseNode* vt = _value_type_nodes->pop()->as_ValueTypeBase();
+      if (vt->is_ValueTypePtr()) {
+        igvn.replace_node(vt, vt->get_oop());
+      }
     }
   }
-  _value_type_nodes = NULL;
+  // Make sure that the return value does not keep an unused allocation alive
   if (tf()->returns_value_type_as_fields()) {
     Node* ret = NULL;
     for (uint i = 1; i < root()->req(); i++){
       Node* in = root()->in(i);
       if (in->Opcode() == Op_Return) {
@@ -2484,11 +2494,11 @@
     set_for_igvn(&new_worklist);
     igvn = PhaseIterGVN(initial_gvn());
     igvn.optimize();
   }
 
-  if (_value_type_nodes->size() > 0) {
+  if (_value_type_nodes->length() > 0) {
     // Do this once all inlining is over to avoid getting inconsistent debug info
     process_value_types(igvn);
   }
 
   adjust_flattened_array_access_aliases(igvn);
@@ -2523,10 +2533,15 @@
 
       if (failing())  return;
     }
   }
 
+  if (_value_type_nodes->length() > 0) {
+    // Process value types again now that EA might have simplified the graph
+    process_value_types(igvn, /* post_ea= */ true);
+  }
+
   // Loop transforms on the ideal graph.  Range Check Elimination,
   // peeling, unrolling, etc.
 
   // Set loop opts counter
   if((_loop_opts_cnt > 0) && (has_loops() || has_split_ifs())) {
