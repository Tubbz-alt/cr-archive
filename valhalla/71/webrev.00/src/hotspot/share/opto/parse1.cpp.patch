diff a/src/hotspot/share/opto/parse1.cpp b/src/hotspot/share/opto/parse1.cpp
--- a/src/hotspot/share/opto/parse1.cpp
+++ b/src/hotspot/share/opto/parse1.cpp
@@ -1725,11 +1725,11 @@
         t = target->stack_type_at(j - tmp_jvms->stkoff());
       }
       if (t != NULL && t != Type::BOTTOM) {
         if (n->is_ValueType() && !t->isa_valuetype()) {
           // Allocate value type in src block to be able to merge it with oop in target block
-          map()->set_req(j, ValueTypePtrNode::make_from_value_type(this, n->as_ValueType()));
+          map()->set_req(j, n->as_ValueType()->buffer(this));
         }
         assert(!t->isa_valuetype() || n->is_ValueType(), "inconsistent typeflow info");
       }
     }
   }
@@ -2365,11 +2365,11 @@
       // Value type is returned as oop, make sure it is buffered and re-execute
       // if allocation triggers deoptimization.
       PreserveReexecuteState preexecs(this);
       jvms()->set_should_reexecute(true);
       inc_sp(1);
-      value = ValueTypePtrNode::make_from_value_type(this, value->as_ValueType());
+      value = value->as_ValueType()->buffer(this);
       if (Compile::current()->inlining_incrementally()) {
         value = value->as_ValueTypeBase()->allocate_fields(this);
       }
     } else if (tr && tr->isa_instptr() && tr->klass()->is_loaded() && tr->klass()->is_interface()) {
       // If returning oops to an interface-return, there is a silent free
