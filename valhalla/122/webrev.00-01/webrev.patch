diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestOptimizeKlassCmp.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestOptimizeKlassCmp.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestOptimizeKlassCmp.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestOptimizeKlassCmp.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -24,11 +24,11 @@
 /**
  * @test
  * @bug 8209687
  * @summary Verify that Parse::optimize_cmp_with_klass() works with inline types.
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableInlineTypes TestOptimizeKlassCmp.java
+ * @compile TestOptimizeKlassCmp.java
  * @run main/othervm -Xbatch compiler.valhalla.inlinetypes.TestOptimizeKlassCmp
  */
 
 package compiler.valhalla.inlinetypes;
 
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/FlattenableSemanticTest.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/FlattenableSemanticTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/FlattenableSemanticTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/FlattenableSemanticTest.java
@@ -32,12 +32,12 @@
  * @test
  * @summary Flattenable field semantic test
  * @modules java.base/jdk.experimental.bytecode
  *          java.base/jdk.experimental.value
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator Point.java JumboInline.java
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator FlattenableSemanticTest.java
+ * @compile -XDallowWithFieldOperator Point.java JumboInline.java
+ * @compile -XDallowWithFieldOperator FlattenableSemanticTest.java
  * @run main/othervm -Xint -XX:InlineFieldMaxFlatSize=64 runtime.valhalla.inlinetypes.FlattenableSemanticTest
  * @run main/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=* runtime.valhalla.inlinetypes.FlattenableSemanticTest
  * @run main/othervm -Xcomp -XX:InlineFieldMaxFlatSize=64 runtime.valhalla.inlinetypes.FlattenableSemanticTest
  * @run main/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=* runtime.valhalla.inlinetypes.FlattenableSemanticTest
  * // debug: -XX:+PrintInlineLayout -XX:-ShowMessageBoxOnError
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineOops.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineOops.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineOops.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineOops.java
@@ -38,12 +38,12 @@
  * @requires vm.gc.Serial
  * @summary Test embedding oops into Inline types
  * @modules java.base/jdk.experimental.bytecode
  *          java.base/jdk.experimental.value
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator Person.java
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator InlineOops.java
+ * @compile -XDallowWithFieldOperator Person.java
+ * @compile -XDallowWithFieldOperator InlineOops.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox
  *                   sun.hotspot.WhiteBox$WhiteBoxPermission
  * @run main/othervm -Xint -XX:+UseSerialGC -Xmx128m
  *                   -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI
  *                   runtime.valhalla.inlinetypes.InlineOops
@@ -54,12 +54,12 @@
  * @requires vm.gc.G1
  * @summary Test embedding oops into Inline types
  * @modules java.base/jdk.experimental.bytecode
  *          java.base/jdk.experimental.value
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator Person.java
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator InlineOops.java
+ * @compile -XDallowWithFieldOperator Person.java
+ * @compile -XDallowWithFieldOperator InlineOops.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox
  *                   sun.hotspot.WhiteBox$WhiteBoxPermission
  * @run main/othervm -Xint  -XX:+UseG1GC -Xmx128m
  *                   -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI
  *                   runtime.valhalla.inlinetypes.InlineOops 20
@@ -70,12 +70,12 @@
  * @requires vm.gc.Parallel
  * @summary Test embedding oops into Inline types
  * @modules java.base/jdk.experimental.bytecode
  *          java.base/jdk.experimental.value
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator Person.java
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator InlineOops.java
+ * @compile -XDallowWithFieldOperator Person.java
+ * @compile -XDallowWithFieldOperator InlineOops.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox
  *                   sun.hotspot.WhiteBox$WhiteBoxPermission
  * @run main/othervm -Xint -XX:+UseParallelGC -Xmx128m
  *                   -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI
  *                   runtime.valhalla.inlinetypes.InlineOops
@@ -86,12 +86,12 @@
  * @requires vm.gc.Z
  * @summary Test embedding oops into Inline types
  * @modules java.base/jdk.experimental.bytecode
  *          java.base/jdk.experimental.value
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator Person.java
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator InlineOops.java
+ * @compile -XDallowWithFieldOperator Person.java
+ * @compile -XDallowWithFieldOperator InlineOops.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox
  *                   sun.hotspot.WhiteBox$WhiteBoxPermission
  * @run main/othervm -Xint -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -Xmx128m
  *                   -XX:+UnlockDiagnosticVMOptions -XX:+ZVerifyViews
  *                   -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI
@@ -103,12 +103,12 @@
  * @requires vm.gc.Serial
  * @summary Test embedding oops into Inline types
  * @modules java.base/jdk.experimental.bytecode
  *          java.base/jdk.experimental.value
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator Person.java
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator InlineOops.java
+ * @compile -XDallowWithFieldOperator Person.java
+ * @compile -XDallowWithFieldOperator InlineOops.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox
  *                   sun.hotspot.WhiteBox$WhiteBoxPermission
  * @run main/othervm -Xcomp -XX:+UseSerialGC -Xmx128m
  *                   -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI
  *                   runtime.valhalla.inlinetypes.InlineOops
@@ -119,12 +119,12 @@
  * @requires vm.gc.G1
  * @summary Test embedding oops into Inline types
  * @modules java.base/jdk.experimental.bytecode
  *          java.base/jdk.experimental.value
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator Person.java
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator InlineOops.java
+ * @compile -XDallowWithFieldOperator Person.java
+ * @compile -XDallowWithFieldOperator InlineOops.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox
  *                   sun.hotspot.WhiteBox$WhiteBoxPermission
  * @run main/othervm -Xcomp -XX:+UseG1GC -Xmx128m
  *                   -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI
  *                   runtime.valhalla.inlinetypes.InlineOops 20
@@ -135,12 +135,12 @@
  * @requires vm.gc.Parallel
  * @summary Test embedding oops into Inline types
  * @modules java.base/jdk.experimental.bytecode
  *          java.base/jdk.experimental.value
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator Person.java
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator InlineOops.java
+ * @compile -XDallowWithFieldOperator Person.java
+ * @compile -XDallowWithFieldOperator InlineOops.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox
  *                   sun.hotspot.WhiteBox$WhiteBoxPermission
  * @run main/othervm -Xcomp -XX:+UseParallelGC -Xmx128m
  *                   -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI
  *                   runtime.valhalla.inlinetypes.InlineOops
@@ -151,12 +151,12 @@
  * @requires vm.gc.Z
  * @summary Test embedding oops into Inline types
  * @modules java.base/jdk.experimental.bytecode
  *          java.base/jdk.experimental.value
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator Person.java
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator InlineOops.java
+ * @compile -XDallowWithFieldOperator Person.java
+ * @compile -XDallowWithFieldOperator InlineOops.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox
  *                   sun.hotspot.WhiteBox$WhiteBoxPermission
  * @run main/othervm -Xcomp -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -Xmx128m
  *                   -XX:+UnlockDiagnosticVMOptions -XX:+ZVerifyViews
  *                   -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypeCreation.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypeCreation.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypeCreation.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypeCreation.java
@@ -26,11 +26,11 @@
 
 /*
  * @test InlineTypeCreation
  * @summary Inline Type creation test
  * @library /test/lib
- * @compile  -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator -XDallowFlattenabilityModifiers InlineTypeCreation.java Point.java Long8Inline.java Person.java
+ * @compile  -XDallowWithFieldOperator -XDallowFlattenabilityModifiers InlineTypeCreation.java Point.java Long8Inline.java Person.java
  * @run main/othervm -Xint runtime.valhalla.inlinetypes.InlineTypeCreation
  * @run main/othervm -Xcomp runtime.valhalla.inlinetypes.InlineTypeCreation
  */
 public class InlineTypeCreation {
     public static void main(String[] args) {
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypeDensity.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypeDensity.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypeDensity.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypeDensity.java
@@ -29,11 +29,11 @@
 
 /**
  * @test InlineTypeDensity
  * @summary Heap density test for InlineTypes
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator InlineTypeDensity.java
+ * @compile -XDallowWithFieldOperator InlineTypeDensity.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox
  * @run main/othervm -Xint -XX:FlatArrayElementMaxSize=-1
  *                   -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions
  *                    -XX:+WhiteBoxAPI InlineTypeDensity
  * @run main/othervm -Xcomp -XX:FlatArrayElementMaxSize=-1
@@ -219,16 +219,16 @@
         objectArraySize += (arrayLength *
                 (WHITE_BOX.getObjectSize(objectArray[0]) +
                         WHITE_BOX.getObjectSize(objectArray[0].getDate()) +
                         WHITE_BOX.getObjectSize(objectArray[0].getTime())));
 
-        LocalDateTimeValue[] inlineArray = new LocalDateTimeValue[arrayLength];
+        LocalDateTimeValue[] flatArray = new LocalDateTimeValue[arrayLength];
         // CMH: add "isFlatValueArray" to WhiteBox API, to ensure we are correctly account size
 
-        long inlineArraySize = WHITE_BOX.getObjectSize(inlineArray);
-        System.out.println("Object array and elements: " + objectArraySize + " versus Value Array: " + inlineArraySize);
-        Asserts.assertLessThan(inlineArraySize, objectArraySize, "Inline array accounts for more heap than object array + elements !");
+        long flatArraySize = WHITE_BOX.getObjectSize(flatArray);
+        System.out.println("Object array and elements: " + objectArraySize + " versus Flat Array: " + flatArraySize);
+        Asserts.assertLessThan(flatArraySize, objectArraySize, "Flat array accounts for more heap than object array + elements !");
     }
 
     public void test() {
         ensureArraySizeWin();
     }
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypeGetField.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypeGetField.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypeGetField.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypeGetField.java
@@ -26,11 +26,11 @@
 
 /*
  * @test InlineTypeGetField
  * @summary Inline Type get field test
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator Point.java InlineTypeGetField.java
+ * @compile -XDallowWithFieldOperator Point.java InlineTypeGetField.java
  * @run main/othervm -Xint runtime.valhalla.inlinetypes.InlineTypeGetField
  * @run main/othervm -Xcomp runtime.valhalla.inlinetypes.InlineTypeGetField
  */
 public class InlineTypeGetField {
 
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypesTest.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypesTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypesTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineTypesTest.java
@@ -49,11 +49,11 @@
  * @test InlineTypesTest
  * @summary Test data movement with inline types
  * @modules java.base/jdk.experimental.bytecode
  *          java.base/jdk.experimental.value
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator TestValue1.java TestValue2.java TestValue3.java TestValue4.java InlineTypesTest.java
+ * @compile -XDallowWithFieldOperator TestValue1.java TestValue2.java TestValue3.java TestValue4.java InlineTypesTest.java
  * @run main/othervm -Xint -Xmx128m -XX:-ShowMessageBoxOnError
  *                   -XX:+ExplicitGCInvokesConcurrent
  *                   -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions
  *                   -Djava.lang.invoke.MethodHandle.DUMP_CLASS_FILES=false
  *                   runtime.valhalla.inlinetypes.InlineTypesTest
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineWithJni.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineWithJni.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineWithJni.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/InlineWithJni.java
@@ -23,11 +23,11 @@
 
 package runtime.valhalla.inlinetypes;
 
 /* @test
  * @summary test JNI functions with inline types
- * @compile -XDemitQtypes -XDallowWithFieldOperator InlineWithJni.java
+ * @compile -XDallowWithFieldOperator InlineWithJni.java
  * @run main/othervm/native -Xint runtime.valhalla.inlinetypes.InlineWithJni
  * @run main/othervm/native -Xcomp runtime.valhalla.inlinetypes.InlineWithJni
  */
 public inline final class InlineWithJni {
 
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/ObjectMethods.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/ObjectMethods.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/ObjectMethods.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/ObjectMethods.java
@@ -30,11 +30,11 @@
  * @test ObjectMethods
  * @summary Check object method implemented by the VM behave with inline types
  * @modules java.base/jdk.experimental.bytecode
  *          java.base/jdk.experimental.value
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator ObjectMethods.java
+ * @compile -XDallowWithFieldOperator ObjectMethods.java
  * @run main/othervm -Xint -XX:+UseBiasedLocking -XX:+UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods
  * @run main/othervm -Xint -XX:-UseBiasedLocking -XX:-UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods
  * @run main/othervm -Xint -noverify runtime.valhalla.inlinetypes.ObjectMethods noverify
  * @run main/othervm -Xcomp -XX:+UseBiasedLocking -XX:+UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods
  * @run main/othervm -Xcomp -XX:-UseBiasedLocking -XX:-UseCompressedClassPointers runtime.valhalla.inlinetypes.ObjectMethods
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/QuickeningTest.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/QuickeningTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/QuickeningTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/QuickeningTest.java
@@ -27,11 +27,11 @@
 
 /*
  * @test QuickeningTest
  * @summary Test quickening of getfield and putfield applied to inline fields
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator Point.java JumboInline.java QuickeningTest.java
+ * @compile -XDallowWithFieldOperator Point.java JumboInline.java QuickeningTest.java
  * @run main/othervm -Xint runtime.valhalla.inlinetypes.QuickeningTest
  * @run main/othervm -Xcomp runtime.valhalla.inlinetypes.QuickeningTest
  */
 
 public class QuickeningTest {
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/Test8186715.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/Test8186715.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/Test8186715.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/Test8186715.java
@@ -25,11 +25,11 @@
 
 /*
  * @test Test8186715
  * @summary test return of buffered inline type passed in argument by caller
  * @library /test/lib
- * @compile -XDemitQtypes -XDallowWithFieldOperator -XDenableValueTypes Test8186715.java
+ * @compile -XDallowWithFieldOperator Test8186715.java
  * @run main/othervm -Xint runtime.valhalla.inlinetypes.Test8186715
  * @run main/othervm runtime.valhalla.inlinetypes.Test8186715
  */
 
 public class Test8186715 {
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/TestFieldNullability.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/TestFieldNullability.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/TestFieldNullability.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/TestFieldNullability.java
@@ -22,11 +22,11 @@
  */
 
 /**
  * @test TestFieldNullability
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator TestFieldNullability.java
+ * @compile -XDallowWithFieldOperator TestFieldNullability.java
  * @run main/othervm -Xint -Xmx128m -XX:-ShowMessageBoxOnError -XX:InlineFieldMaxFlatSize=32
  *                   runtime.valhalla.inlinetypes.TestFieldNullability
  */
 
 package runtime.valhalla.inlinetypes;
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/TestInheritedInlineTypeFields.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/TestInheritedInlineTypeFields.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/TestInheritedInlineTypeFields.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/TestInheritedInlineTypeFields.java
@@ -27,11 +27,11 @@
 
 /*
  * @test TestInheritedInlineTypeFields
  * @summary Test if inline field klasses are correctly retrieved for inherited fields
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator -XDallowFlattenabilityModifiers Point.java TestInheritedInlineTypeFields.java
+ * @compile -XDallowWithFieldOperator -XDallowFlattenabilityModifiers Point.java TestInheritedInlineTypeFields.java
  * @run main/othervm runtime.valhalla.inlinetypes.TestInheritedInlineTypeFields
  */
 
 class A {
     Point p;
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/UninitializedInlineFieldsTest.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/UninitializedInlineFieldsTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/UninitializedInlineFieldsTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/UninitializedInlineFieldsTest.java
@@ -26,11 +26,11 @@
 
 /*
  * @test
  * @summary Uninitialized inline fields test
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator -XDallowFlattenabilityModifiers Point.java JumboInline.java UninitializedInlineFieldsTest.java
+ * @compile -XDallowWithFieldOperator -XDallowFlattenabilityModifiers Point.java JumboInline.java UninitializedInlineFieldsTest.java
  * @run main/othervm -Xint -XX:InlineFieldMaxFlatSize=64 runtime.valhalla.inlinetypes.UninitializedInlineFieldsTest
  * @run main/othervm -Xcomp -XX:InlineFieldMaxFlatSize=64 runtime.valhalla.inlinetypes.UninitializedInlineFieldsTest
  */
 public class UninitializedInlineFieldsTest {
     static Point.ref nonFlattenableStaticPoint;
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/VDefaultTest.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/VDefaultTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/VDefaultTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/VDefaultTest.java
@@ -27,12 +27,12 @@
 
 /*
  * @test VDefaultTest
  * @summary vdefault bytecode test
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator Point.java
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator -XDallowFlattenabilityModifiers VDefaultTest.java
+ * @compile -XDallowWithFieldOperator Point.java
+ * @compile -XDallowWithFieldOperator -XDallowFlattenabilityModifiers VDefaultTest.java
  * @run main/othervm -Xint runtime.valhalla.inlinetypes.VDefaultTest
  * @run main/othervm -Xcomp runtime.valhalla.inlinetypes.VDefaultTest
  */
 
 public class VDefaultTest {
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/VWithFieldTest.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/VWithFieldTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/VWithFieldTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/VWithFieldTest.java
@@ -27,12 +27,12 @@
 
 /*
  * @test VWithFieldTest
  * @summary vwithfield bytecode test
  * @library /test/lib
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator Point.java
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator VWithFieldTest.java
+ * @compile -XDallowWithFieldOperator Point.java
+ * @compile -XDallowWithFieldOperator VWithFieldTest.java
  * @run main/othervm -Xint runtime.valhalla.inlinetypes.VWithFieldTest
  * @run main/othervm -Xcomp runtime.valhalla.inlinetypes.VWithFieldTest
  */
 
 public class VWithFieldTest {
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/WithFieldAccessorTest.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/WithFieldAccessorTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/WithFieldAccessorTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/WithFieldAccessorTest.java
@@ -23,11 +23,11 @@
 
 /**
  * @test
  * @bug 8210351
  * @summary test nestmate access to an inline type's public, protected and private final fields.
- * @compile -XDemitQtypes -XDallowWithFieldOperator WithFieldAccessorTest.java
+ * @compile -XDallowWithFieldOperator WithFieldAccessorTest.java
  * @run main/othervm WithFieldAccessorTest
  */
 
 // This test is similar to javac's WithFieldAccessorTest but tests nestmate
 // access to public, protected, and private final fields in an inline type.
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/WithFieldNoAccessTest.jcod b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/WithFieldNoAccessTest.jcod
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/WithFieldNoAccessTest.jcod
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/WithFieldNoAccessTest.jcod
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -26,11 +26,11 @@
  * @test
  * @bug 8210351
  * @summary Check that IllegalAccessError exceptions get thrown if a class that
  *          is not a nestmate of an inline type tries to write to the inline type's
  *          final fields.
- * @compile -XDemitQtypes WithFieldNoAccessTest.jcod
+ * @compile WithFieldNoAccessTest.jcod
  * @run main/othervm WithFieldNoAccessTest
  */
 
 // This test is based on the below Java program.  The only difference is that
 // the nestmate attributes have been removed.  So, inline type WithFieldNoAccessTest
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/verifier/VTAssignability.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/verifier/VTAssignability.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/verifier/VTAssignability.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/verifier/VTAssignability.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,11 +22,11 @@
  */
 
 /*
  * @test
  * @summary Test basic verifier assignability of inline types.
- * @compile -XDallowWithFieldOperator -XDemitQtypes VTAssignability.java
+ * @compile -XDallowWithFieldOperator VTAssignability.java
  * @run main/othervm -Xverify:remote VTAssignability
  */
 
 // Test that an inline type is assignable to itself, to java.lang.Object,
 // and to an interface,
diff a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/verifier/VTMonitor.java b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/verifier/VTMonitor.java
--- a/test/hotspot/jtreg/runtime/valhalla/inlinetypes/verifier/VTMonitor.java
+++ b/test/hotspot/jtreg/runtime/valhalla/inlinetypes/verifier/VTMonitor.java
@@ -23,11 +23,11 @@
 
 /*
  * @test
  * @bug 8227373
  * @summary Test that verifier allows monitor operations on inline types.
- * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator VTMonitor.java
+ * @compile -XDallowWithFieldOperator VTMonitor.java
  * @run main/othervm -Xverify:remote VTMonitor
  */
 
 public inline final class VTMonitor {
     final int x;
