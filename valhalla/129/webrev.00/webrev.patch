diff a/test/jdk/valhalla/valuetypes/StreamTest.java b/test/jdk/valhalla/valuetypes/StreamTest.java
--- a/test/jdk/valhalla/valuetypes/StreamTest.java
+++ b/test/jdk/valhalla/valuetypes/StreamTest.java
@@ -22,11 +22,11 @@
  */
 
 /*
  * @test
  * @summary Basic test for Array::get, Array::set, Arrays::setAll on inline class array
- * @compile -XDallowGenericsOverValues StreamTest.java
+ * @compile StreamTest.java
  * @run testng StreamTest
  */
 
 import org.testng.annotations.Test;
 
diff a/test/langtools/tools/javac/valhalla/lworld-values/RefDotClass.java b/test/langtools/tools/javac/valhalla/lworld-values/RefDotClass.java
--- /dev/null
+++ b/test/langtools/tools/javac/valhalla/lworld-values/RefDotClass.java
@@ -0,0 +1,50 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @bug 8222784
+ * @summary Check that we are able to get a class literal for a reference projection type
+ * @run main RefDotClass
+ */
+
+public inline class RefDotClass {
+    final int value;
+
+    public RefDotClass(int value) {
+        this.value = value;
+    }
+
+    private static <T> T foo(Class<T> type) {
+        return null;
+    }
+
+    public static void main(String[] args) {
+        foo(RefDotClass.ref.class);
+        String tName = RefDotClass.ref.class.getTypeName();
+        if (!tName.equals("RefDotClass$ref"))
+            throw new AssertionError("Unexpected type name " + tName);
+    }
+}
diff a/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java b/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java
@@ -21,11 +21,11 @@
  * questions.
  */
 
 /**
  * @test
- * @summary Test that values code like a class - i.e are accepted in some places where only references used be, when invoked with the experimental mode -XDallowGenericsOverValues
+ * @summary Test that values code like a class - i.e are accepted in some places where only references used be, when suitable reference projection is used.
    @compile  ValuesAsRefs.java
  * @run main/othervm ValuesAsRefs
  */
 import java.util.ArrayList;
 
