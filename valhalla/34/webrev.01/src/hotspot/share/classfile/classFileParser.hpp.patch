diff a/src/hotspot/share/classfile/classFileParser.hpp b/src/hotspot/share/classfile/classFileParser.hpp
--- a/src/hotspot/share/classfile/classFileParser.hpp
+++ b/src/hotspot/share/classfile/classFileParser.hpp
@@ -200,17 +200,21 @@
 
   bool _has_flattenable_fields;
   bool _is_empty_value;
   bool _is_naturally_atomic;
   bool _is_declared_atomic;
+  bool _invalid_inline_super;   // if true, invalid super type for an inline type.
+  bool _invalid_identity_super; // if true, invalid super type for an identity type.
 
   // precomputed flags
   bool _has_finalizer;
   bool _has_empty_finalizer;
   bool _has_vanilla_constructor;
   int _max_bootstrap_specifier_index;  // detects BSS values
 
+  bool is_invalid_super_for_inline_type(const InstanceKlass* ik);
+
   void parse_stream(const ClassFileStream* const stream, TRAPS);
 
   void post_process_parsed_stream(const ClassFileStream* const stream,
                                   ConstantPool* cp,
                                   TRAPS);
@@ -246,10 +250,11 @@
 
   // Interface parsing
   void parse_interfaces(const ClassFileStream* const stream,
                         const int itfs_len,
                         ConstantPool* const cp,
+                        bool is_inline_type,
                         bool* has_nonstatic_concrete_methods,
                         bool* is_declared_atomic,
                         TRAPS);
 
   const InstanceKlass* parse_super_class(ConstantPool* const cp,
@@ -585,10 +590,18 @@
   bool is_unsafe_anonymous() const { return _unsafe_anonymous_host != NULL; }
   bool is_interface() const { return _access_flags.is_interface(); }
   bool is_value_type() const { return _access_flags.is_value_type(); }
   bool is_value_capable_class() const;
   bool has_flattenable_fields() const { return _has_flattenable_fields; }
+  bool invalid_inline_super() const { return _invalid_inline_super; }
+  bool invalid_identity_super() const { return _invalid_identity_super; }
+  void set_invalid_inline_super(bool set_invalid_inline_super) {
+    _invalid_inline_super = set_invalid_inline_super;
+  }
+  void set_invalid_identity_super(bool set_invalid_identity_super) {
+    _invalid_identity_super = set_invalid_identity_super;
+  }
 
   u2 java_fields_count() const { return _java_fields_count; }
 
   const InstanceKlass* unsafe_anonymous_host() const { return _unsafe_anonymous_host; }
   const GrowableArray<Handle>* cp_patches() const { return _cp_patches; }
