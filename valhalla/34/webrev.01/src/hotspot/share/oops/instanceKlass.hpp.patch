diff a/src/hotspot/share/oops/instanceKlass.hpp b/src/hotspot/share/oops/instanceKlass.hpp
--- a/src/hotspot/share/oops/instanceKlass.hpp
+++ b/src/hotspot/share/oops/instanceKlass.hpp
@@ -256,10 +256,13 @@
   int             _itable_len;           // length of Java itable (in words)
   // _is_marked_dependent can be set concurrently, thus cannot be part of the
   // _misc_flags.
   bool            _is_marked_dependent;  // used for marking during flushing and deoptimization
 
+  bool _invalid_inline_super;   // if true, invalid super type for an inline type.
+  bool _invalid_identity_super; // if true, invalid super type for an identity type.
+
   // The low three bits of _misc_flags contains the kind field.
   // This can be used to quickly discriminate among the five kinds of
   // InstanceKlass.
 
   static const unsigned _misc_kind_field_size = 3;
@@ -631,10 +634,19 @@
 
   // marking
   bool is_marked_dependent() const         { return _is_marked_dependent; }
   void set_is_marked_dependent(bool value) { _is_marked_dependent = value; }
 
+  bool invalid_inline_super() const { return _invalid_inline_super; }
+  void set_invalid_inline_super(bool set_invalid_inline_super) {
+    _invalid_inline_super = set_invalid_inline_super;
+  }
+  bool invalid_identity_super() const { return _invalid_identity_super; }
+  void set_invalid_identity_super(bool set_invalid_identity_super) {
+    _invalid_identity_super = set_invalid_identity_super;
+  }
+
   static ByteSize misc_flags_offset() { return in_ByteSize(offset_of(InstanceKlass, _misc_flags)); }
   static u4 misc_flags_is_empty_value() { return _misc_is_empty_value; }
 
   // initialization (virtuals from Klass)
   bool should_be_initialized() const;  // means that initialize should be called
