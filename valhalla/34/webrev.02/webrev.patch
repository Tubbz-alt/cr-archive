diff a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -945,10 +945,11 @@
 
 // Side-effects: populates the _local_interfaces field
 void ClassFileParser::parse_interfaces(const ClassFileStream* stream,
                                        int itfs_len,
                                        ConstantPool* cp,
+                                       bool is_inline_type,
                                        bool* const has_nonstatic_concrete_methods,
                                        // FIXME: lots of these functions
                                        // declare their parameters as const,
                                        // which adds only noise to the code.
                                        // Remove the spurious const modifiers.
@@ -1001,10 +1002,22 @@
                           interf->external_name(),
                           interf->class_in_module_of_loader()));
       }
 
       InstanceKlass* ik = InstanceKlass::cast(interf);
+      if (is_inline_type && ik->invalid_inline_super()) {
+        ResourceMark rm(THREAD);
+        Exceptions::fthrow(
+          THREAD_AND_LOCATION,
+          vmSymbols::java_lang_IncompatibleClassChangeError(),
+          "Inline type %s attempts to implement interface java.lang.IdentityObject",
+          _class_name->as_klass_external_name());
+        return;
+      }
+      if (ik->invalid_inline_super()) {
+        set_invalid_inline_super();
+      }
       if (ik->has_nonstatic_concrete_methods()) {
         *has_nonstatic_concrete_methods = true;
       }
       if (ik->is_declared_atomic()) {
         *is_declared_atomic = true;
@@ -6029,11 +6042,10 @@
 
   InstanceKlass* const ik =
     InstanceKlass::allocate_instance_klass(*this, CHECK_NULL);
 
   fill_instance_klass(ik, changed_by_loadhook, CHECK_NULL);
-
   assert(_klass == ik, "invariant");
 
 
   if (ik->should_store_fingerprint()) {
     ik->store_fingerprint(_stream->compute_fingerprint());
@@ -6060,10 +6072,45 @@
   }
 
   return ik;
 }
 
+// Return true if the specified class is not a valid super class for an inline type.
+// A valid super class for an inline type is abstract, has no instance fields,
+// does not implement interface java.lang.IdentityObject (checked elsewhere), has
+// an empty body-less no-arg constructor, and no synchronized instance methods.
+// This function doesn't check if the class's super types are invalid.  Those checks
+// are done elsewhere.  The final determination of whether or not a class is an
+// invalid super type for an inline class is done in fill_instance_klass().
+static bool is_invalid_super_for_inline_type(const InstanceKlass* ik) {
+  if (ik->name() == vmSymbols::java_lang_IdentityObject()) {
+    return true;
+  }
+  if (ik->is_interface() || ik->name() == vmSymbols::java_lang_Object()) {
+    return false;
+  }
+  if (!ik->is_abstract() || ik->has_nonstatic_fields()) {
+    return true;
+  } else {
+    Array<Method*>* methods = ik->methods();
+    // Look at each method.
+    for (int x = 0; x < methods->length(); x++) {
+      const Method* const method = methods->at(x);
+      if (method->is_synchronized() && !method->is_static()) {
+        return true;
+
+      } else if (method->name() == vmSymbols::object_initializer_name()) {
+        if (method->signature() != vmSymbols::void_method_signature() ||
+            !method->is_vanilla_constructor()) {
+          return true;
+        }
+      }
+    }
+  }
+  return false;
+}
+
 void ClassFileParser::fill_instance_klass(InstanceKlass* ik, bool changed_by_loadhook, TRAPS) {
   assert(ik != NULL, "invariant");
 
   // Set name and CLD before adding to CLD
   ik->set_class_loader_data(_loader_data);
@@ -6322,10 +6369,19 @@
         }
       }
     }
   }
 
+  // Set ik->invalid_inline_super field to TRUE if already marked as invalid,
+  // if super is marked invalid, or if is_invalid_super_for_inline_type()
+  // returns true
+  if (invalid_inline_super() ||
+      (_super_klass != NULL && _super_klass->invalid_inline_super()) ||
+      is_invalid_super_for_inline_type(ik)) {
+    ik->set_invalid_inline_super();
+  }
+
   JFR_ONLY(INIT_ID(ik);)
 
   // If we reach here, all is well.
   // Now remove the InstanceKlass* from the _klass_to_deallocate field
   // in order for it to not be destroyed in the ClassFileParser destructor.
@@ -6478,10 +6534,12 @@
   _has_contended_fields(false),
   _has_flattenable_fields(false),
   _is_empty_value(false),
   _is_naturally_atomic(false),
   _is_declared_atomic(false),
+  _invalid_inline_super(false),
+  _invalid_identity_super(false),
   _has_finalizer(false),
   _has_empty_finalizer(false),
   _has_vanilla_constructor(false),
   _max_bootstrap_specifier_index(-1) {
 
@@ -6816,10 +6874,11 @@
   // Interfaces
   _itfs_len = stream->get_u2_fast();
   parse_interfaces(stream,
                    _itfs_len,
                    cp,
+                   is_value_type(),
                    &_has_nonstatic_concrete_methods,
                    &_is_declared_atomic,
                    CHECK);
 
   assert(_local_interfaces != NULL, "invariant");
@@ -6925,24 +6984,30 @@
         _super_klass->external_name()
       );
       return;
     }
 
-    // For an inline class, only java/lang/Object or special abstract classes
-    // are acceptable super classes.
-    if (_access_flags.get_flags() & JVM_ACC_VALUE) {
-      if (_super_klass->name() != vmSymbols::java_lang_Object()) {
-        guarantee_property(_super_klass->is_abstract(),
-          "Inline type must have java.lang.Object or an abstract class as its superclass, class file %s",
-          CHECK);
-      }
-    }
-
     // Make sure super class is not final
     if (_super_klass->is_final()) {
       THROW_MSG(vmSymbols::java_lang_VerifyError(), "Cannot inherit from final class");
     }
+
+    // For an inline class, only java/lang/Object or special abstract classes
+    // are acceptable super classes.
+    if (is_value_type()) {
+      const InstanceKlass* super_ik = _super_klass;
+      if (super_ik->invalid_inline_super()) {
+        ResourceMark rm(THREAD);
+        Exceptions::fthrow(
+          THREAD_AND_LOCATION,
+          vmSymbols::java_lang_IncompatibleClassChangeError(),
+          "inline class %s has an invalid super class %s",
+          _class_name->as_klass_external_name(),
+          _super_klass->external_name());
+        return;
+      }
+    }
   }
 
   if (_class_name == vmSymbols::java_lang_NonTearable() && _loader_data->class_loader() == NULL) {
     // This is the original source of this condition.
     // It propagates by inheritance, as if testing "instanceof NonTearable".
@@ -7017,11 +7082,10 @@
     layout_fields(cp, _fac, _parsed_annotations, _field_info, CHECK);
   }
 
   // Compute reference type
   _rt = (NULL ==_super_klass) ? REF_NONE : _super_klass->reference_type();
-
 }
 
 void ClassFileParser::set_klass(InstanceKlass* klass) {
 
 #ifdef ASSERT
diff a/src/hotspot/share/classfile/classFileParser.hpp b/src/hotspot/share/classfile/classFileParser.hpp
--- a/src/hotspot/share/classfile/classFileParser.hpp
+++ b/src/hotspot/share/classfile/classFileParser.hpp
@@ -200,10 +200,12 @@
 
   bool _has_flattenable_fields;
   bool _is_empty_value;
   bool _is_naturally_atomic;
   bool _is_declared_atomic;
+  bool _invalid_inline_super;   // if true, invalid super type for an inline type.
+  bool _invalid_identity_super; // if true, invalid super type for an identity type.
 
   // precomputed flags
   bool _has_finalizer;
   bool _has_empty_finalizer;
   bool _has_vanilla_constructor;
@@ -246,10 +248,11 @@
 
   // Interface parsing
   void parse_interfaces(const ClassFileStream* const stream,
                         const int itfs_len,
                         ConstantPool* const cp,
+                        bool is_inline_type,
                         bool* has_nonstatic_concrete_methods,
                         bool* is_declared_atomic,
                         TRAPS);
 
   const InstanceKlass* parse_super_class(ConstantPool* const cp,
@@ -585,10 +588,14 @@
   bool is_unsafe_anonymous() const { return _unsafe_anonymous_host != NULL; }
   bool is_interface() const { return _access_flags.is_interface(); }
   bool is_value_type() const { return _access_flags.is_value_type(); }
   bool is_value_capable_class() const;
   bool has_flattenable_fields() const { return _has_flattenable_fields; }
+  bool invalid_inline_super() const { return _invalid_inline_super; }
+  void set_invalid_inline_super() { _invalid_inline_super = true; }
+  bool invalid_identity_super() const { return _invalid_identity_super; }
+  void set_invalid_identity_super() { _invalid_identity_super = true; }
 
   u2 java_fields_count() const { return _java_fields_count; }
 
   const InstanceKlass* unsafe_anonymous_host() const { return _unsafe_anonymous_host; }
   const GrowableArray<Handle>* cp_patches() const { return _cp_patches; }
diff a/src/hotspot/share/oops/instanceKlass.hpp b/src/hotspot/share/oops/instanceKlass.hpp
--- a/src/hotspot/share/oops/instanceKlass.hpp
+++ b/src/hotspot/share/oops/instanceKlass.hpp
@@ -292,11 +292,13 @@
     _misc_is_being_redefined                  = 1 << 17, // used for locking redefinition
     _misc_has_contended_annotations           = 1 << 18, // has @Contended annotation
     _misc_has_value_fields                    = 1 << 19, // has value fields and related embedded section is not empty
     _misc_is_empty_value                      = 1 << 20, // empty value type
     _misc_is_naturally_atomic                 = 1 << 21, // loaded/stored in one instruction
-    _misc_is_declared_atomic                  = 1 << 22  // implements jl.NonTearable
+    _misc_is_declared_atomic                  = 1 << 22, // implements jl.NonTearable
+    _misc_invalid_inline_super                = 1 << 23, // invalid super type for an inline type
+    _misc_invalid_identity_super              = 1 << 24  // invalid super type for an identity type
   };
   u2 shared_loader_type_bits() const {
     return _misc_is_shared_boot_class|_misc_is_shared_platform_class|_misc_is_shared_app_class;
   }
   u4              _misc_flags;
@@ -460,10 +462,27 @@
   // Initialized in the class file parser, not changed later.
   void set_is_declared_atomic() {
     _misc_flags |= _misc_is_declared_atomic;
   }
 
+  // Query if class is an invalid super class for an inline type.
+  bool invalid_inline_super() const {
+    return (_misc_flags & _misc_invalid_inline_super) != 0;
+  }
+  // Initialized in the class file parser, not changed later.
+  void set_invalid_inline_super() {
+    _misc_flags |= _misc_invalid_inline_super;
+  }
+  // Query if class is an invalid super class for an identity type.
+  bool invalid_identity_super() const {
+    return (_misc_flags & _misc_invalid_identity_super) != 0;
+  }
+  // Initialized in the class file parser, not changed later.
+  void set_invalid_identity_super() {
+    _misc_flags |= _misc_invalid_identity_super;
+  }
+
   // field sizes
   int nonstatic_field_size() const         { return _nonstatic_field_size; }
   void set_nonstatic_field_size(int size)  { _nonstatic_field_size = size; }
 
   int static_field_size() const            { return _static_field_size; }
diff a/src/hotspot/share/oops/method.cpp b/src/hotspot/share/oops/method.cpp
--- a/src/hotspot/share/oops/method.cpp
+++ b/src/hotspot/share/oops/method.cpp
@@ -627,11 +627,11 @@
 bool Method::is_vanilla_constructor() const {
   // Returns true if this method is a vanilla constructor, i.e. an "<init>" "()V" method
   // which only calls the superclass vanilla constructor and possibly does stores of
   // zero constants to local fields:
   //
-  //   aload_0
+  //   aload_0, _fast_aload_0, or _nofast_aload_0
   //   invokespecial
   //   indexbyte1
   //   indexbyte2
   //
   // followed by an (optional) sequence of:
diff a/src/hotspot/share/runtime/vmStructs.cpp b/src/hotspot/share/runtime/vmStructs.cpp
--- a/src/hotspot/share/runtime/vmStructs.cpp
+++ b/src/hotspot/share/runtime/vmStructs.cpp
@@ -2298,10 +2298,12 @@
   declare_constant(InstanceKlass::_misc_has_passed_fingerprint_check)     \
   declare_constant(InstanceKlass::_misc_is_scratch_class)                 \
   declare_constant(InstanceKlass::_misc_is_shared_boot_class)             \
   declare_constant(InstanceKlass::_misc_is_shared_platform_class)         \
   declare_constant(InstanceKlass::_misc_is_shared_app_class)              \
+  declare_constant(InstanceKlass::_misc_invalid_inline_super)             \
+  declare_constant(InstanceKlass::_misc_invalid_identity_super)           \
                                                                           \
   /*********************************/                                     \
   /* Symbol* - symbol max length */                                       \
   /*********************************/                                     \
                                                                           \
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/BadValueTypes.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/BadValueTypes.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/BadValueTypes.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/BadValueTypes.java
@@ -58,13 +58,10 @@
 
         // Test that inline type instance methods cannot be synchronized.
         runTest("ValueMethodSynch",
                 "Method getInt in class ValueMethodSynch (an inline class) has illegal modifiers");
 
-        runTest("ValueSuperClass",
-                "Inline type must have java.lang.Object or an abstract class as its superclass");
-
         // Test that ClassCircularityError gets detected for instance fields.
         System.out.println("Testing ClassCircularityError for instance fields");
         try {
             Class newClass = Class.forName("Circ");
             throw new RuntimeException( "java.lang.ClassCircularityError exception not thrown!");
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/cfpTests.jcod b/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/cfpTests.jcod
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/cfpTests.jcod
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/cfpTests.jcod
@@ -838,210 +838,10 @@
   } // Attributes
 } // end class ValueMethodSynch
 
 //////////////////////////////////////////////////////////////////////
 
-// Test that an inline type's super class must be java.lang.Object.
-//
-// final inline class ValueSuperClass {
-//     final int int_v;
-//
-//     ValueSuperClass() { int_v = 1; }
-// }
-
-class ValueSuperClass {
-  0xCAFEBABE;
-  0; // minor version
-  59; // version
-  [44] { // Constant Pool
-    ; // first element is empty
-    class #21; // #1     at 0x0A
-    Field #1 #22; // #2     at 0x0D
-    InvokeDynamic 0s #25; // #3     at 0x12
-    InvokeDynamic 0s #26; // #4     at 0x17
-    InvokeDynamic 0s #27; // #5     at 0x1C
-    class #28; // #6     at 0x21
-    Utf8 "int_v"; // #7     at 0x24
-    Utf8 "I"; // #8     at 0x2C
-    Utf8 "hashCode"; // #9     at 0x30
-    Utf8 "()I"; // #10     at 0x3B
-    Utf8 "Code"; // #11     at 0x41
-    Utf8 "LineNumberTable"; // #12     at 0x48
-    Utf8 "equals"; // #13     at 0x5A
-    Utf8 "(Ljava/lang/Object;)Z"; // #14     at 0x63
-    Utf8 "toString"; // #15     at 0x7B
-    Utf8 "()Ljava/lang/String;"; // #16     at 0x86
-    Utf8 "<init>"; // #17     at 0x9D
-    Utf8 "()QValueSuperClass;"; // #18     at 0xA6
-    Utf8 "SourceFile"; // #19     at 0xBC
-    Utf8 "ValueSuperClass.java"; // #20     at 0xC9
-    Utf8 "ValueSuperClass"; // #21     at 0xE0
-    NameAndType #7 #8; // #22     at 0xF2
-    Utf8 "BootstrapMethods"; // #23     at 0xF7
-    MethodHandle 6b #29; // #24     at 0x010A
-    NameAndType #9 #30; // #25     at 0x010E
-    NameAndType #13 #31; // #26     at 0x0113
-    NameAndType #15 #32; // #27     at 0x0118
-    Utf8 "java/lang/Object"; // #28     at 0x011D
-    Method #33 #34; // #29     at 0x0130
-    Utf8 "(QValueSuperClass;)I"; // #30     at 0x0135
-    Utf8 "(QValueSuperClass;Ljava/lang/Object;)Z"; // #31     at 0x014C
-    Utf8 "(QValueSuperClass;)Ljava/lang/String;"; // #32     at 0x0175
-    class #35; // #33     at 0x019D
-    NameAndType #36 #40; // #34     at 0x01A0
-    Utf8 "java/lang/invoke/ValueBootstrapMethods"; // #35     at 0x01A5
-    Utf8 "makeBootstrapMethod"; // #36     at 0x01CE
-    class #42; // #37     at 0x01E4
-    Utf8 "Lookup"; // #38     at 0x01E7
-    Utf8 "InnerClasses"; // #39     at 0x01F0
-    Utf8 "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"; // #40     at 0x01FF
-    class #43; // #41     at 0x0275
-    Utf8 "java/lang/invoke/MethodHandles$Lookup"; // #42     at 0x0278
-    Utf8 "java/lang/invoke/MethodHandles"; // #43     at 0x02A0
-  } // Constant Pool
-
-  0x0130; // access [ ACC_SUPER ACC_FINAL ]
-  #1;// this_cpx
-  #37;// super_cpx // bad: was #6
-
-  [0] { // Interfaces
-  } // Interfaces
-
-  [1] { // fields
-    { // Member at 0x02CB
-      0x0010; // access
-      #7; // name_cpx
-      #8; // sig_cpx
-      [0] { // Attributes
-      } // Attributes
-    } // Member
-  } // fields
-
-  [4] { // methods
-    { // Member at 0x02D5
-      0x0011; // access
-      #9; // name_cpx
-      #10; // sig_cpx
-      [1] { // Attributes
-        Attr(#11, 31) { // Code at 0x02DD
-          1; // max_stack
-          1; // max_locals
-          Bytes[7]{
-            0x2ABA00030000AC;
-          };
-          [0] { // Traps
-          } // end Traps
-          [1] { // Attributes
-            Attr(#12, 6) { // LineNumberTable at 0x02F6
-              [1] { // LineNumberTable
-                0  1; //  at 0x0302
-              }
-            } // end LineNumberTable
-          } // Attributes
-        } // end Code
-      } // Attributes
-    } // Member
-    ;
-    { // Member at 0x0302
-      0x0011; // access
-      #13; // name_cpx
-      #14; // sig_cpx
-      [1] { // Attributes
-        Attr(#11, 32) { // Code at 0x030A
-          2; // max_stack
-          2; // max_locals
-          Bytes[8]{
-            0x2A2BBA00040000AC;
-          };
-          [0] { // Traps
-          } // end Traps
-          [1] { // Attributes
-            Attr(#12, 6) { // LineNumberTable at 0x0324
-              [1] { // LineNumberTable
-                0  1; //  at 0x0330
-              }
-            } // end LineNumberTable
-          } // Attributes
-        } // end Code
-      } // Attributes
-    } // Member
-    ;
-    { // Member at 0x0330
-      0x0011; // access
-      #15; // name_cpx
-      #16; // sig_cpx
-      [1] { // Attributes
-        Attr(#11, 31) { // Code at 0x0338
-          1; // max_stack
-          1; // max_locals
-          Bytes[7]{
-            0x2ABA00050000B0;
-          };
-          [0] { // Traps
-          } // end Traps
-          [1] { // Attributes
-            Attr(#12, 6) { // LineNumberTable at 0x0351
-              [1] { // LineNumberTable
-                0  1; //  at 0x035D
-              }
-            } // end LineNumberTable
-          } // Attributes
-        } // end Code
-      } // Attributes
-    } // Member
-    ;
-    { // Member at 0x035D
-      0x0008; // access
-      #17; // name_cpx
-      #18; // sig_cpx
-      [1] { // Attributes
-        Attr(#11, 37) { // Code at 0x0365
-          2; // max_stack
-          1; // max_locals
-          Bytes[13]{
-            0xCB00014B042A5FCC;
-            0x00024B2AB0;
-          };
-          [0] { // Traps
-          } // end Traps
-          [1] { // Attributes
-            Attr(#12, 6) { // LineNumberTable at 0x0384
-              [1] { // LineNumberTable
-                0  4; //  at 0x0390
-              }
-            } // end LineNumberTable
-          } // Attributes
-        } // end Code
-      } // Attributes
-    } // Member
-  } // methods
-
-  [3] { // Attributes
-    Attr(#19, 2) { // SourceFile at 0x0392
-      #20;
-    } // end SourceFile
-    ;
-    Attr(#39, 10) { // InnerClasses at 0x039A
-      [1] { // InnerClasses
-        #37 #41 #38 25; //  at 0x03AA
-      }
-    } // end InnerClasses
-    ;
-    Attr(#23, 6) { // BootstrapMethods at 0x03AA
-      [1] { // bootstrap_methods
-        {  //  bootstrap_method
-          #24; // bootstrap_method_ref
-          [0] { // bootstrap_arguments
-          }  //  bootstrap_arguments
-        }  //  bootstrap_method
-      }
-    } // end BootstrapMethods
-  } // Attributes
-} // end class ValueSuperClass
-
-//////////////////////////////////////////////////////////////////////
-
 // Value types Circ and Circ2 have fields of each other's type.  This should
 // cause a ClassCircularityError exception when one of them is being loaded.
 //
 // The inline types are based on these two Java classes:
 //
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/CtorHasArgs.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/CtorHasArgs.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/CtorHasArgs.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ *
+ */
+
+public abstract class CtorHasArgs {
+    CtorHasArgs(String x) { }
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/CtorIsNotEmpty.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/CtorIsNotEmpty.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/CtorIsNotEmpty.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ *
+ */
+
+public abstract class CtorIsNotEmpty {
+    CtorIsNotEmpty() {
+        System.out.println("CtorIsNotEmpty");
+    }
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/HasNonStaticFields.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/HasNonStaticFields.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/HasNonStaticFields.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ *
+ */
+
+public abstract class HasNonStaticFields {
+    String hi;
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/HasSynchMethod.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/HasSynchMethod.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/HasSynchMethod.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ *
+ */
+
+public abstract class HasSynchMethod {
+    public synchronized void helloSynch() { }
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/ImplementsIdentityObject.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/ImplementsIdentityObject.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/ImplementsIdentityObject.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ *
+ */
+
+// Abstract class that implements java.lang.IdentityObject.  It is not a legal
+// super class for an inline class.
+public abstract class ImplementsIdentityObject implements java.lang.IdentityObject {
+    ImplementsIdentityObject() { }
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/InlineClassWithBadSupers.jcod b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/InlineClassWithBadSupers.jcod
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/InlineClassWithBadSupers.jcod
@@ -0,0 +1,2126 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ *
+ */
+// The test cases in this .jcod file are based on this .java file:
+// public inline final class Point extends AbstractClass {
+//     final int x;
+//     final int y;
+//
+//     private Point() {
+//         x = 0;
+//         y = 0;
+//     }
+//
+//     public int getX() { return x; }
+//     public int getY() { return y; }
+// }
+
+// Inline class with a super class that is not abstract.
+class SuperNotAbstract {
+  0xCAFEBABE;
+  0; // minor version
+  59; // version
+  [51] { // Constant Pool
+    ; // first element is empty
+    class #2; // #1     at 0x0A
+    Utf8 "SuperNotAbstract"; // #2     at 0x0D
+    Field #1 #4; // #3     at 0x20
+    NameAndType #5 #6; // #4     at 0x25
+    Utf8 "x"; // #5     at 0x2A
+    Utf8 "I"; // #6     at 0x2E
+    Field #1 #8; // #7     at 0x32
+    NameAndType #9 #6; // #8     at 0x37
+    Utf8 "y"; // #9     at 0x3C
+    InvokeDynamic 0s #11; // #10     at 0x40
+    NameAndType #12 #13; // #11     at 0x45
+    Utf8 "hashCode"; // #12     at 0x4A
+    Utf8 "(QSuperNotAbstract;)I"; // #13     at 0x55
+    InvokeDynamic 0s #15; // #14     at 0x6D
+    NameAndType #16 #17; // #15     at 0x72
+    Utf8 "equals"; // #16     at 0x77
+    Utf8 "(QSuperNotAbstract;Ljava/lang/Object;)Z"; // #17     at 0x80
+    InvokeDynamic 0s #19; // #18     at 0xAA
+    NameAndType #20 #21; // #19     at 0xAF
+    Utf8 "toString"; // #20     at 0xB4
+    Utf8 "(QSuperNotAbstract;)Ljava/lang/String;"; // #21     at 0xBF
+    class #23; // #22     at 0xE8
+    Utf8 "NotAbstract"; // #23     at 0xEB
+    class #25; // #24     at 0xF9
+    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "getX"; // #26     at 0x0115
+    Utf8 "()I"; // #27     at 0x011C
+    Utf8 "Code"; // #28     at 0x0122
+    Utf8 "LineNumberTable"; // #29     at 0x0129
+    Utf8 "getY"; // #30     at 0x013B
+    Utf8 "(Ljava/lang/Object;)Z"; // #31     at 0x0142
+    Utf8 "()Ljava/lang/String;"; // #32     at 0x015A
+    Utf8 "<init>"; // #33     at 0x0171
+    Utf8 "()QSuperNotAbstract;"; // #34     at 0x017A
+    Utf8 "SourceFile"; // #35     at 0x0191
+    Utf8 "SuperNotAbstract.java"; // #36     at 0x019E
+    Utf8 "BootstrapMethods"; // #37     at 0x01B6
+    MethodHandle 6b #39; // #38     at 0x01C9
+    Method #40 #41; // #39     at 0x01CD
+    class #42; // #40     at 0x01D2
+    NameAndType #43 #44; // #41     at 0x01D5
+    Utf8 "java/lang/invoke/ValueBootstrapMethods"; // #42     at 0x01DA
+    Utf8 "makeBootstrapMethod"; // #43     at 0x0203
+    Utf8 "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"; // #44     at 0x0219
+    Utf8 "InnerClasses"; // #45     at 0x028F
+    class #47; // #46     at 0x029E
+    Utf8 "java/lang/invoke/MethodHandles$Lookup"; // #47     at 0x02A1
+    class #49; // #48     at 0x02C9
+    Utf8 "java/lang/invoke/MethodHandles"; // #49     at 0x02CC
+    Utf8 "Lookup"; // #50     at 0x02ED
+  } // Constant Pool
+
+  0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
+  #1;// this_cpx
+  #22;// super_cpx
+
+  [1] { // Interfaces
+    #24;
+  } // Interfaces
+
+  [2] { // fields
+    { // Member at 0x0302
+      0x0010; // access
+      #5; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x030A
+      0x0010; // access
+      #9; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+  } // fields
+
+  [6] { // methods
+    { // Member at 0x0314
+      0x0001; // access
+      #26; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 29) { // Code at 0x031C
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40003AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x0333
+              [1] { // LineNumberTable
+                0  10; //  at 0x033F
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x033F
+      0x0001; // access
+      #30; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 29) { // Code at 0x0347
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40007AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x035E
+              [1] { // LineNumberTable
+                0  11; //  at 0x036A
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x036A
+      0x0011; // access
+      #12; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 31) { // Code at 0x0372
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA000A0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x038B
+              [1] { // LineNumberTable
+                0  1; //  at 0x0397
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x0397
+      0x0011; // access
+      #16; // name_cpx
+      #31; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 32) { // Code at 0x039F
+          2; // max_stack
+          2; // max_locals
+          Bytes[8]{
+            0x2A2BBA000E0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x03B9
+              [1] { // LineNumberTable
+                0  1; //  at 0x03C5
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03C5
+      0x0011; // access
+      #20; // name_cpx
+      #32; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 31) { // Code at 0x03CD
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA00120000B0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x03E6
+              [1] { // LineNumberTable
+                0  1; //  at 0x03F2
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03F2
+      0x000A; // access
+      #33; // name_cpx
+      #34; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 56) { // Code at 0x03FA
+          2; // max_stack
+          1; // max_locals
+          Bytes[20]{
+            0xCB00014B032A5FCC;
+            0x00034B032A5FCC00;
+            0x074B2AB0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 18) { // LineNumberTable at 0x0420
+              [4] { // LineNumberTable
+                0  5; //  at 0x042C
+                4  6; //  at 0x0430
+                11  7; //  at 0x0434
+                18  8; //  at 0x0438
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+  } // methods
+
+  [3] { // Attributes
+    Attr(#35, 2) { // SourceFile at 0x043A
+      #36;
+    } // end SourceFile
+    ;
+    Attr(#37, 6) { // BootstrapMethods at 0x0442
+      [1] { // bootstrap_methods
+        {  //  bootstrap_method
+          #38; // bootstrap_method_ref
+          [0] { // bootstrap_arguments
+          }  //  bootstrap_arguments
+        }  //  bootstrap_method
+      }
+    } // end BootstrapMethods
+    ;
+    Attr(#45, 10) { // InnerClasses at 0x044E
+      [1] { // InnerClasses
+        #46 #48 #50 25; //  at 0x045E
+      }
+    } // end InnerClasses
+  } // Attributes
+} // end class SuperNotAbstract
+
+
+
+// Inline class with a super class that has instance fields.
+class SuperHasNonStaticFields {
+  0xCAFEBABE;
+  0; // minor version
+  59; // version
+  [51] { // Constant Pool
+    ; // first element is empty
+    class #2; // #1     at 0x0A
+    Utf8 "SuperHasNonStaticFields"; // #2     at 0x0D
+    Field #1 #4; // #3     at 0x20
+    NameAndType #5 #6; // #4     at 0x25
+    Utf8 "x"; // #5     at 0x2A
+    Utf8 "I"; // #6     at 0x2E
+    Field #1 #8; // #7     at 0x32
+    NameAndType #9 #6; // #8     at 0x37
+    Utf8 "y"; // #9     at 0x3C
+    InvokeDynamic 0s #11; // #10     at 0x40
+    NameAndType #12 #13; // #11     at 0x45
+    Utf8 "hashCode"; // #12     at 0x4A
+    Utf8 "(QSuperHasNonStaticFields;)I"; // #13     at 0x55
+    InvokeDynamic 0s #15; // #14     at 0x6D
+    NameAndType #16 #17; // #15     at 0x72
+    Utf8 "equals"; // #16     at 0x77
+    Utf8 "(QSuperHasNonStaticFields;Ljava/lang/Object;)Z"; // #17     at 0x80
+    InvokeDynamic 0s #19; // #18     at 0xAA
+    NameAndType #20 #21; // #19     at 0xAF
+    Utf8 "toString"; // #20     at 0xB4
+    Utf8 "(QSuperHasNonStaticFields;)Ljava/lang/String;"; // #21     at 0xBF
+    class #23; // #22     at 0xE8
+    Utf8 "HasNonStaticFields"; // #23     at 0xEB
+    class #25; // #24     at 0xF9
+    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "getX"; // #26     at 0x0115
+    Utf8 "()I"; // #27     at 0x011C
+    Utf8 "Code"; // #28     at 0x0122
+    Utf8 "LineNumberTable"; // #29     at 0x0129
+    Utf8 "getY"; // #30     at 0x013B
+    Utf8 "(Ljava/lang/Object;)Z"; // #31     at 0x0142
+    Utf8 "()Ljava/lang/String;"; // #32     at 0x015A
+    Utf8 "<init>"; // #33     at 0x0171
+    Utf8 "()QSuperHasNonStaticFields;"; // #34     at 0x017A
+    Utf8 "SourceFile"; // #35     at 0x0191
+    Utf8 "SuperHasNonStaticFields.java"; // #36     at 0x019E
+    Utf8 "BootstrapMethods"; // #37     at 0x01B6
+    MethodHandle 6b #39; // #38     at 0x01C9
+    Method #40 #41; // #39     at 0x01CD
+    class #42; // #40     at 0x01D2
+    NameAndType #43 #44; // #41     at 0x01D5
+    Utf8 "java/lang/invoke/ValueBootstrapMethods"; // #42     at 0x01DA
+    Utf8 "makeBootstrapMethod"; // #43     at 0x0203
+    Utf8 "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"; // #44     at 0x0219
+    Utf8 "InnerClasses"; // #45     at 0x028F
+    class #47; // #46     at 0x029E
+    Utf8 "java/lang/invoke/MethodHandles$Lookup"; // #47     at 0x02A1
+    class #49; // #48     at 0x02C9
+    Utf8 "java/lang/invoke/MethodHandles"; // #49     at 0x02CC
+    Utf8 "Lookup"; // #50     at 0x02ED
+  } // Constant Pool
+
+  0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
+  #1;// this_cpx
+  #22;// super_cpx
+
+  [1] { // Interfaces
+    #24;
+  } // Interfaces
+
+  [2] { // fields
+    { // Member at 0x0302
+      0x0010; // access
+      #5; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x030A
+      0x0010; // access
+      #9; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+  } // fields
+
+  [6] { // methods
+    { // Member at 0x0314
+      0x0001; // access
+      #26; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 29) { // Code at 0x031C
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40003AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x0333
+              [1] { // LineNumberTable
+                0  10; //  at 0x033F
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x033F
+      0x0001; // access
+      #30; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 29) { // Code at 0x0347
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40007AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x035E
+              [1] { // LineNumberTable
+                0  11; //  at 0x036A
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x036A
+      0x0011; // access
+      #12; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 31) { // Code at 0x0372
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA000A0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x038B
+              [1] { // LineNumberTable
+                0  1; //  at 0x0397
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x0397
+      0x0011; // access
+      #16; // name_cpx
+      #31; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 32) { // Code at 0x039F
+          2; // max_stack
+          2; // max_locals
+          Bytes[8]{
+            0x2A2BBA000E0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x03B9
+              [1] { // LineNumberTable
+                0  1; //  at 0x03C5
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03C5
+      0x0011; // access
+      #20; // name_cpx
+      #32; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 31) { // Code at 0x03CD
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA00120000B0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x03E6
+              [1] { // LineNumberTable
+                0  1; //  at 0x03F2
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03F2
+      0x000A; // access
+      #33; // name_cpx
+      #34; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 56) { // Code at 0x03FA
+          2; // max_stack
+          1; // max_locals
+          Bytes[20]{
+            0xCB00014B032A5FCC;
+            0x00034B032A5FCC00;
+            0x074B2AB0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 18) { // LineNumberTable at 0x0420
+              [4] { // LineNumberTable
+                0  5; //  at 0x042C
+                4  6; //  at 0x0430
+                11  7; //  at 0x0434
+                18  8; //  at 0x0438
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+  } // methods
+
+  [3] { // Attributes
+    Attr(#35, 2) { // SourceFile at 0x043A
+      #36;
+    } // end SourceFile
+    ;
+    Attr(#37, 6) { // BootstrapMethods at 0x0442
+      [1] { // bootstrap_methods
+        {  //  bootstrap_method
+          #38; // bootstrap_method_ref
+          [0] { // bootstrap_arguments
+          }  //  bootstrap_arguments
+        }  //  bootstrap_method
+      }
+    } // end BootstrapMethods
+    ;
+    Attr(#45, 10) { // InnerClasses at 0x044E
+      [1] { // InnerClasses
+        #46 #48 #50 25; //  at 0x045E
+      }
+    } // end InnerClasses
+  } // Attributes
+} // end class SuperHasNonStaticFields
+
+
+
+// Inline class with a super class whose super class has a syncronized instance method.
+class SuperHasSynchMethod {
+  0xCAFEBABE;
+  0; // minor version
+  59; // version
+  [51] { // Constant Pool
+    ; // first element is empty
+    class #2; // #1     at 0x0A
+    Utf8 "SuperHasSynchMethod"; // #2     at 0x0D
+    Field #1 #4; // #3     at 0x20
+    NameAndType #5 #6; // #4     at 0x25
+    Utf8 "x"; // #5     at 0x2A
+    Utf8 "I"; // #6     at 0x2E
+    Field #1 #8; // #7     at 0x32
+    NameAndType #9 #6; // #8     at 0x37
+    Utf8 "y"; // #9     at 0x3C
+    InvokeDynamic 0s #11; // #10     at 0x40
+    NameAndType #12 #13; // #11     at 0x45
+    Utf8 "hashCode"; // #12     at 0x4A
+    Utf8 "(QSuperHasSynchMethod;)I"; // #13     at 0x55
+    InvokeDynamic 0s #15; // #14     at 0x6D
+    NameAndType #16 #17; // #15     at 0x72
+    Utf8 "equals"; // #16     at 0x77
+    Utf8 "(QSuperHasSynchMethod;Ljava/lang/Object;)Z"; // #17     at 0x80
+    InvokeDynamic 0s #19; // #18     at 0xAA
+    NameAndType #20 #21; // #19     at 0xAF
+    Utf8 "toString"; // #20     at 0xB4
+    Utf8 "(QSuperHasSynchMethod;)Ljava/lang/String;"; // #21     at 0xBF
+    class #23; // #22     at 0xE8
+    Utf8 "ValidSuper"; // #23     at 0xEB
+    class #25; // #24     at 0xF9
+    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "getX"; // #26     at 0x0115
+    Utf8 "()I"; // #27     at 0x011C
+    Utf8 "Code"; // #28     at 0x0122
+    Utf8 "LineNumberTable"; // #29     at 0x0129
+    Utf8 "getY"; // #30     at 0x013B
+    Utf8 "(Ljava/lang/Object;)Z"; // #31     at 0x0142
+    Utf8 "()Ljava/lang/String;"; // #32     at 0x015A
+    Utf8 "<init>"; // #33     at 0x0171
+    Utf8 "()QSuperHasSynchMethod;"; // #34     at 0x017A
+    Utf8 "SourceFile"; // #35     at 0x0191
+    Utf8 "SuperHasSynchMethod.java"; // #36     at 0x019E
+    Utf8 "BootstrapMethods"; // #37     at 0x01B6
+    MethodHandle 6b #39; // #38     at 0x01C9
+    Method #40 #41; // #39     at 0x01CD
+    class #42; // #40     at 0x01D2
+    NameAndType #43 #44; // #41     at 0x01D5
+    Utf8 "java/lang/invoke/ValueBootstrapMethods"; // #42     at 0x01DA
+    Utf8 "makeBootstrapMethod"; // #43     at 0x0203
+    Utf8 "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"; // #44     at 0x0219
+    Utf8 "InnerClasses"; // #45     at 0x028F
+    class #47; // #46     at 0x029E
+    Utf8 "java/lang/invoke/MethodHandles$Lookup"; // #47     at 0x02A1
+    class #49; // #48     at 0x02C9
+    Utf8 "java/lang/invoke/MethodHandles"; // #49     at 0x02CC
+    Utf8 "Lookup"; // #50     at 0x02ED
+  } // Constant Pool
+
+  0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
+  #1;// this_cpx
+  #22;// super_cpx
+
+  [1] { // Interfaces
+    #24;
+  } // Interfaces
+
+  [2] { // fields
+    { // Member at 0x0302
+      0x0010; // access
+      #5; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x030A
+      0x0010; // access
+      #9; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+  } // fields
+
+  [6] { // methods
+    { // Member at 0x0314
+      0x0001; // access
+      #26; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 29) { // Code at 0x031C
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40003AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x0333
+              [1] { // LineNumberTable
+                0  10; //  at 0x033F
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x033F
+      0x0001; // access
+      #30; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 29) { // Code at 0x0347
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40007AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x035E
+              [1] { // LineNumberTable
+                0  11; //  at 0x036A
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x036A
+      0x0011; // access
+      #12; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 31) { // Code at 0x0372
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA000A0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x038B
+              [1] { // LineNumberTable
+                0  1; //  at 0x0397
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x0397
+      0x0011; // access
+      #16; // name_cpx
+      #31; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 32) { // Code at 0x039F
+          2; // max_stack
+          2; // max_locals
+          Bytes[8]{
+            0x2A2BBA000E0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x03B9
+              [1] { // LineNumberTable
+                0  1; //  at 0x03C5
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03C5
+      0x0011; // access
+      #20; // name_cpx
+      #32; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 31) { // Code at 0x03CD
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA00120000B0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x03E6
+              [1] { // LineNumberTable
+                0  1; //  at 0x03F2
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03F2
+      0x000A; // access
+      #33; // name_cpx
+      #34; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 56) { // Code at 0x03FA
+          2; // max_stack
+          1; // max_locals
+          Bytes[20]{
+            0xCB00014B032A5FCC;
+            0x00034B032A5FCC00;
+            0x074B2AB0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 18) { // LineNumberTable at 0x0420
+              [4] { // LineNumberTable
+                0  5; //  at 0x042C
+                4  6; //  at 0x0430
+                11  7; //  at 0x0434
+                18  8; //  at 0x0438
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+  } // methods
+
+  [3] { // Attributes
+    Attr(#35, 2) { // SourceFile at 0x043A
+      #36;
+    } // end SourceFile
+    ;
+    Attr(#37, 6) { // BootstrapMethods at 0x0442
+      [1] { // bootstrap_methods
+        {  //  bootstrap_method
+          #38; // bootstrap_method_ref
+          [0] { // bootstrap_arguments
+          }  //  bootstrap_arguments
+        }  //  bootstrap_method
+      }
+    } // end BootstrapMethods
+    ;
+    Attr(#45, 10) { // InnerClasses at 0x044E
+      [1] { // InnerClasses
+        #46 #48 #50 25; //  at 0x045E
+      }
+    } // end InnerClasses
+  } // Attributes
+} // end class SuperHasSynchMethod
+
+
+// Inline class with a super class containing a constructor that has arguments.
+class SuperCtorHasArgs {
+  0xCAFEBABE;
+  0; // minor version
+  59; // version
+  [51] { // Constant Pool
+    ; // first element is empty
+    class #2; // #1     at 0x0A
+    Utf8 "SuperCtorHasArgs"; // #2     at 0x0D
+    Field #1 #4; // #3     at 0x20
+    NameAndType #5 #6; // #4     at 0x25
+    Utf8 "x"; // #5     at 0x2A
+    Utf8 "I"; // #6     at 0x2E
+    Field #1 #8; // #7     at 0x32
+    NameAndType #9 #6; // #8     at 0x37
+    Utf8 "y"; // #9     at 0x3C
+    InvokeDynamic 0s #11; // #10     at 0x40
+    NameAndType #12 #13; // #11     at 0x45
+    Utf8 "hashCode"; // #12     at 0x4A
+    Utf8 "(QSuperCtorHasArgs;)I"; // #13     at 0x55
+    InvokeDynamic 0s #15; // #14     at 0x6D
+    NameAndType #16 #17; // #15     at 0x72
+    Utf8 "equals"; // #16     at 0x77
+    Utf8 "(QSuperCtorHasArgs;Ljava/lang/Object;)Z"; // #17     at 0x80
+    InvokeDynamic 0s #19; // #18     at 0xAA
+    NameAndType #20 #21; // #19     at 0xAF
+    Utf8 "toString"; // #20     at 0xB4
+    Utf8 "(QSuperCtorHasArgs;)Ljava/lang/String;"; // #21     at 0xBF
+    class #23; // #22     at 0xE8
+    Utf8 "CtorHasArgs"; // #23     at 0xEB
+    class #25; // #24     at 0xF9
+    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "getX"; // #26     at 0x0115
+    Utf8 "()I"; // #27     at 0x011C
+    Utf8 "Code"; // #28     at 0x0122
+    Utf8 "LineNumberTable"; // #29     at 0x0129
+    Utf8 "getY"; // #30     at 0x013B
+    Utf8 "(Ljava/lang/Object;)Z"; // #31     at 0x0142
+    Utf8 "()Ljava/lang/String;"; // #32     at 0x015A
+    Utf8 "<init>"; // #33     at 0x0171
+    Utf8 "()QSuperCtorHasArgs;"; // #34     at 0x017A
+    Utf8 "SourceFile"; // #35     at 0x0191
+    Utf8 "SuperCtorHasArgs.java"; // #36     at 0x019E
+    Utf8 "BootstrapMethods"; // #37     at 0x01B6
+    MethodHandle 6b #39; // #38     at 0x01C9
+    Method #40 #41; // #39     at 0x01CD
+    class #42; // #40     at 0x01D2
+    NameAndType #43 #44; // #41     at 0x01D5
+    Utf8 "java/lang/invoke/ValueBootstrapMethods"; // #42     at 0x01DA
+    Utf8 "makeBootstrapMethod"; // #43     at 0x0203
+    Utf8 "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"; // #44     at 0x0219
+    Utf8 "InnerClasses"; // #45     at 0x028F
+    class #47; // #46     at 0x029E
+    Utf8 "java/lang/invoke/MethodHandles$Lookup"; // #47     at 0x02A1
+    class #49; // #48     at 0x02C9
+    Utf8 "java/lang/invoke/MethodHandles"; // #49     at 0x02CC
+    Utf8 "Lookup"; // #50     at 0x02ED
+  } // Constant Pool
+
+  0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
+  #1;// this_cpx
+  #22;// super_cpx
+
+  [1] { // Interfaces
+    #24;
+  } // Interfaces
+
+  [2] { // fields
+    { // Member at 0x0302
+      0x0010; // access
+      #5; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x030A
+      0x0010; // access
+      #9; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+  } // fields
+
+  [6] { // methods
+    { // Member at 0x0314
+      0x0001; // access
+      #26; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 29) { // Code at 0x031C
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40003AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x0333
+              [1] { // LineNumberTable
+                0  10; //  at 0x033F
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x033F
+      0x0001; // access
+      #30; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 29) { // Code at 0x0347
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40007AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x035E
+              [1] { // LineNumberTable
+                0  11; //  at 0x036A
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x036A
+      0x0011; // access
+      #12; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 31) { // Code at 0x0372
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA000A0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x038B
+              [1] { // LineNumberTable
+                0  1; //  at 0x0397
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x0397
+      0x0011; // access
+      #16; // name_cpx
+      #31; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 32) { // Code at 0x039F
+          2; // max_stack
+          2; // max_locals
+          Bytes[8]{
+            0x2A2BBA000E0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x03B9
+              [1] { // LineNumberTable
+                0  1; //  at 0x03C5
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03C5
+      0x0011; // access
+      #20; // name_cpx
+      #32; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 31) { // Code at 0x03CD
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA00120000B0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x03E6
+              [1] { // LineNumberTable
+                0  1; //  at 0x03F2
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03F2
+      0x000A; // access
+      #33; // name_cpx
+      #34; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 56) { // Code at 0x03FA
+          2; // max_stack
+          1; // max_locals
+          Bytes[20]{
+            0xCB00014B032A5FCC;
+            0x00034B032A5FCC00;
+            0x074B2AB0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 18) { // LineNumberTable at 0x0420
+              [4] { // LineNumberTable
+                0  5; //  at 0x042C
+                4  6; //  at 0x0430
+                11  7; //  at 0x0434
+                18  8; //  at 0x0438
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+  } // methods
+
+  [3] { // Attributes
+    Attr(#35, 2) { // SourceFile at 0x043A
+      #36;
+    } // end SourceFile
+    ;
+    Attr(#37, 6) { // BootstrapMethods at 0x0442
+      [1] { // bootstrap_methods
+        {  //  bootstrap_method
+          #38; // bootstrap_method_ref
+          [0] { // bootstrap_arguments
+          }  //  bootstrap_arguments
+        }  //  bootstrap_method
+      }
+    } // end BootstrapMethods
+    ;
+    Attr(#45, 10) { // InnerClasses at 0x044E
+      [1] { // InnerClasses
+        #46 #48 #50 25; //  at 0x045E
+      }
+    } // end InnerClasses
+  } // Attributes
+} // end class SuperCtorHasArgs
+
+
+
+// Inline class with a super class containing a constructor that has a non-empty
+// method body.
+class SuperCtorIsNotEmpty {
+  0xCAFEBABE;
+  0; // minor version
+  59; // version
+  [51] { // Constant Pool
+    ; // first element is empty
+    class #2; // #1     at 0x0A
+    Utf8 "SuperCtorIsNotEmpty"; // #2     at 0x0D
+    Field #1 #4; // #3     at 0x20
+    NameAndType #5 #6; // #4     at 0x25
+    Utf8 "x"; // #5     at 0x2A
+    Utf8 "I"; // #6     at 0x2E
+    Field #1 #8; // #7     at 0x32
+    NameAndType #9 #6; // #8     at 0x37
+    Utf8 "y"; // #9     at 0x3C
+    InvokeDynamic 0s #11; // #10     at 0x40
+    NameAndType #12 #13; // #11     at 0x45
+    Utf8 "hashCode"; // #12     at 0x4A
+    Utf8 "(QSuperCtorIsNotEmpty;)I"; // #13     at 0x55
+    InvokeDynamic 0s #15; // #14     at 0x6D
+    NameAndType #16 #17; // #15     at 0x72
+    Utf8 "equals"; // #16     at 0x77
+    Utf8 "(QSuperCtorIsNotEmpty;Ljava/lang/Object;)Z"; // #17     at 0x80
+    InvokeDynamic 0s #19; // #18     at 0xAA
+    NameAndType #20 #21; // #19     at 0xAF
+    Utf8 "toString"; // #20     at 0xB4
+    Utf8 "(QSuperCtorIsNotEmpty;)Ljava/lang/String;"; // #21     at 0xBF
+    class #23; // #22     at 0xE8
+    Utf8 "CtorIsNotEmpty"; // #23     at 0xEB
+    class #25; // #24     at 0xF9
+    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "getX"; // #26     at 0x0115
+    Utf8 "()I"; // #27     at 0x011C
+    Utf8 "Code"; // #28     at 0x0122
+    Utf8 "LineNumberTable"; // #29     at 0x0129
+    Utf8 "getY"; // #30     at 0x013B
+    Utf8 "(Ljava/lang/Object;)Z"; // #31     at 0x0142
+    Utf8 "()Ljava/lang/String;"; // #32     at 0x015A
+    Utf8 "<init>"; // #33     at 0x0171
+    Utf8 "()QSuperCtorIsNotEmpty;"; // #34     at 0x017A
+    Utf8 "SourceFile"; // #35     at 0x0191
+    Utf8 "SuperCtorIsNotEmpty.java"; // #36     at 0x019E
+    Utf8 "BootstrapMethods"; // #37     at 0x01B6
+    MethodHandle 6b #39; // #38     at 0x01C9
+    Method #40 #41; // #39     at 0x01CD
+    class #42; // #40     at 0x01D2
+    NameAndType #43 #44; // #41     at 0x01D5
+    Utf8 "java/lang/invoke/ValueBootstrapMethods"; // #42     at 0x01DA
+    Utf8 "makeBootstrapMethod"; // #43     at 0x0203
+    Utf8 "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"; // #44     at 0x0219
+    Utf8 "InnerClasses"; // #45     at 0x028F
+    class #47; // #46     at 0x029E
+    Utf8 "java/lang/invoke/MethodHandles$Lookup"; // #47     at 0x02A1
+    class #49; // #48     at 0x02C9
+    Utf8 "java/lang/invoke/MethodHandles"; // #49     at 0x02CC
+    Utf8 "Lookup"; // #50     at 0x02ED
+  } // Constant Pool
+
+  0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
+  #1;// this_cpx
+  #22;// super_cpx
+
+  [1] { // Interfaces
+    #24;
+  } // Interfaces
+
+  [2] { // fields
+    { // Member at 0x0302
+      0x0010; // access
+      #5; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x030A
+      0x0010; // access
+      #9; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+  } // fields
+
+  [6] { // methods
+    { // Member at 0x0314
+      0x0001; // access
+      #26; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 29) { // Code at 0x031C
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40003AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x0333
+              [1] { // LineNumberTable
+                0  10; //  at 0x033F
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x033F
+      0x0001; // access
+      #30; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 29) { // Code at 0x0347
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40007AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x035E
+              [1] { // LineNumberTable
+                0  11; //  at 0x036A
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x036A
+      0x0011; // access
+      #12; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 31) { // Code at 0x0372
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA000A0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x038B
+              [1] { // LineNumberTable
+                0  1; //  at 0x0397
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x0397
+      0x0011; // access
+      #16; // name_cpx
+      #31; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 32) { // Code at 0x039F
+          2; // max_stack
+          2; // max_locals
+          Bytes[8]{
+            0x2A2BBA000E0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x03B9
+              [1] { // LineNumberTable
+                0  1; //  at 0x03C5
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03C5
+      0x0011; // access
+      #20; // name_cpx
+      #32; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 31) { // Code at 0x03CD
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA00120000B0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x03E6
+              [1] { // LineNumberTable
+                0  1; //  at 0x03F2
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03F2
+      0x000A; // access
+      #33; // name_cpx
+      #34; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 56) { // Code at 0x03FA
+          2; // max_stack
+          1; // max_locals
+          Bytes[20]{
+            0xCB00014B032A5FCC;
+            0x00034B032A5FCC00;
+            0x074B2AB0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 18) { // LineNumberTable at 0x0420
+              [4] { // LineNumberTable
+                0  5; //  at 0x042C
+                4  6; //  at 0x0430
+                11  7; //  at 0x0434
+                18  8; //  at 0x0438
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+  } // methods
+
+  [3] { // Attributes
+    Attr(#35, 2) { // SourceFile at 0x043A
+      #36;
+    } // end SourceFile
+    ;
+    Attr(#37, 6) { // BootstrapMethods at 0x0442
+      [1] { // bootstrap_methods
+        {  //  bootstrap_method
+          #38; // bootstrap_method_ref
+          [0] { // bootstrap_arguments
+          }  //  bootstrap_arguments
+        }  //  bootstrap_method
+      }
+    } // end BootstrapMethods
+    ;
+    Attr(#45, 10) { // InnerClasses at 0x044E
+      [1] { // InnerClasses
+        #46 #48 #50 25; //  at 0x045E
+      }
+    } // end InnerClasses
+  } // Attributes
+} // end class SuperCtorIsNotEmpty
+
+
+// Inline class that implements java.lang.IdentityObject.  Loading this
+// class should throw an ICCE.
+class InlineImplementsIdentityObject {
+  0xCAFEBABE;
+  0; // minor version
+  59; // version
+  [53] { // Constant Pool
+    ; // first element is empty
+    class #2; // #1     at 0x0A
+    Utf8 "InlineImplementsIdentityObject"; // #2     at 0x0D
+    Field #1 #4; // #3     at 0x28
+    NameAndType #5 #6; // #4     at 0x2D
+    Utf8 "x"; // #5     at 0x32
+    Utf8 "I"; // #6     at 0x36
+    Field #1 #8; // #7     at 0x3A
+    NameAndType #9 #6; // #8     at 0x3F
+    Utf8 "y"; // #9     at 0x44
+    InvokeDynamic 0s #11; // #10     at 0x48
+    NameAndType #12 #13; // #11     at 0x4D
+    Utf8 "hashCode"; // #12     at 0x52
+    Utf8 "(QInlineImplementsIdentityObject;)I"; // #13     at 0x5D
+    InvokeDynamic 0s #15; // #14     at 0x7D
+    NameAndType #16 #17; // #15     at 0x82
+    Utf8 "equals"; // #16     at 0x87
+    Utf8 "(QInlineImplementsIdentityObject;Ljava/lang/Object;)Z"; // #17     at 0x90
+    InvokeDynamic 0s #19; // #18     at 0xC2
+    NameAndType #20 #21; // #19     at 0xC7
+    Utf8 "toString"; // #20     at 0xCC
+    Utf8 "(QInlineImplementsIdentityObject;)Ljava/lang/String;"; // #21     at 0xD7
+    class #23; // #22     at 0x0108
+    Utf8 "java/lang/Object"; // #23     at 0x010B
+    class #25; // #24     at 0x011E
+    Utf8 "java/lang/IdentityObject"; // #25     at 0x0121
+    class #27; // #26     at 0x0126
+    Utf8 "java/lang/InlineObject"; // #27     at 0x0129
+    Utf8 "getX"; // #28     at 0x0142
+    Utf8 "()I"; // #29     at 0x0149
+    Utf8 "Code"; // #30     at 0x014F
+    Utf8 "LineNumberTable"; // #31     at 0x0156
+    Utf8 "getY"; // #32     at 0x0168
+    Utf8 "(Ljava/lang/Object;)Z"; // #33     at 0x016F
+    Utf8 "()Ljava/lang/String;"; // #34     at 0x0187
+    Utf8 "<init>"; // #35     at 0x019E
+    Utf8 "()QInlineImplementsIdentityObject;"; // #36     at 0x01A7
+    Utf8 "SourceFile"; // #37     at 0x01C6
+    Utf8 "InlineImplementsIdentityObject.java"; // #38     at 0x01D3
+    Utf8 "BootstrapMethods"; // #39     at 0x01F3
+    MethodHandle 6b #41; // #40     at 0x0206
+    Method #42 #43; // #41     at 0x020A
+    class #44; // #42     at 0x020F
+    NameAndType #45 #46; // #43     at 0x0212
+    Utf8 "java/lang/invoke/ValueBootstrapMethods"; // #44     at 0x0217
+    Utf8 "makeBootstrapMethod"; // #45     at 0x0240
+    Utf8 "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"; // #46     at 0x0256
+    Utf8 "InnerClasses"; // #47     at 0x02CC
+    class #49; // #48     at 0x02DB
+    Utf8 "java/lang/invoke/MethodHandles$Lookup"; // #49     at 0x02DE
+    class #51; // #50     at 0x0306
+    Utf8 "java/lang/invoke/MethodHandles"; // #51     at 0x0309
+    Utf8 "Lookup"; // #52     at 0x032A
+  } // Constant Pool
+
+  0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
+  #1;// this_cpx
+  #22;// super_cpx
+
+  [2] { // Interfaces
+    #24;
+    #26;
+  } // Interfaces
+
+  [2] { // fields
+    { // Member at 0x0341
+      0x0010; // access
+      #5; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x0349
+      0x0010; // access
+      #9; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+  } // fields
+
+  [6] { // methods
+    { // Member at 0x0353
+      0x0001; // access
+      #28; // name_cpx
+      #29; // sig_cpx
+      [1] { // Attributes
+        Attr(#30, 29) { // Code at 0x035B
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40003AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#31, 6) { // LineNumberTable at 0x0372
+              [1] { // LineNumberTable
+                0  11; //  at 0x037E
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x037E
+      0x0001; // access
+      #32; // name_cpx
+      #29; // sig_cpx
+      [1] { // Attributes
+        Attr(#30, 29) { // Code at 0x0386
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40007AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#31, 6) { // LineNumberTable at 0x039D
+              [1] { // LineNumberTable
+                0  12; //  at 0x03A9
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03A9
+      0x0011; // access
+      #12; // name_cpx
+      #29; // sig_cpx
+      [1] { // Attributes
+        Attr(#30, 31) { // Code at 0x03B1
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA000A0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#31, 6) { // LineNumberTable at 0x03CA
+              [1] { // LineNumberTable
+                0  2; //  at 0x03D6
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03D6
+      0x0011; // access
+      #16; // name_cpx
+      #33; // sig_cpx
+      [1] { // Attributes
+        Attr(#30, 32) { // Code at 0x03DE
+          2; // max_stack
+          2; // max_locals
+          Bytes[8]{
+            0x2A2BBA000E0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#31, 6) { // LineNumberTable at 0x03F8
+              [1] { // LineNumberTable
+                0  2; //  at 0x0404
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x0404
+      0x0011; // access
+      #20; // name_cpx
+      #34; // sig_cpx
+      [1] { // Attributes
+        Attr(#30, 31) { // Code at 0x040C
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA00120000B0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#31, 6) { // LineNumberTable at 0x0425
+              [1] { // LineNumberTable
+                0  2; //  at 0x0431
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x0431
+      0x000A; // access
+      #35; // name_cpx
+      #36; // sig_cpx
+      [1] { // Attributes
+        Attr(#30, 56) { // Code at 0x0439
+          2; // max_stack
+          1; // max_locals
+          Bytes[20]{
+            0xCB00014B032A5FCC;
+            0x00034B032A5FCC00;
+            0x074B2AB0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#31, 18) { // LineNumberTable at 0x045F
+              [4] { // LineNumberTable
+                0  6; //  at 0x046B
+                4  7; //  at 0x046F
+                11  8; //  at 0x0473
+                18  9; //  at 0x0477
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+  } // methods
+
+  [3] { // Attributes
+    Attr(#37, 2) { // SourceFile at 0x0479
+      #38;
+    } // end SourceFile
+    ;
+    Attr(#39, 6) { // BootstrapMethods at 0x0481
+      [1] { // bootstrap_methods
+        {  //  bootstrap_method
+          #40; // bootstrap_method_ref
+          [0] { // bootstrap_arguments
+          }  //  bootstrap_arguments
+        }  //  bootstrap_method
+      }
+    } // end BootstrapMethods
+    ;
+    Attr(#47, 10) { // InnerClasses at 0x048D
+      [1] { // InnerClasses
+        #48 #50 #52 25; //  at 0x049D
+      }
+    } // end InnerClasses
+  } // Attributes
+} // end class InlineImplementsIdentityObject
+
+
+
+// Inline class with a super class that implements java.lang.IdentityObject.
+// Loading this class should throw an ICCE.
+class SuperImplementsIdentityObject {
+  0xCAFEBABE;
+  0; // minor version
+  59; // version
+  [51] { // Constant Pool
+    ; // first element is empty
+    class #2; // #1     at 0x0A
+    Utf8 "SuperImplementsIdentityObject"; // #2     at 0x0D
+    Field #1 #4; // #3     at 0x20
+    NameAndType #5 #6; // #4     at 0x25
+    Utf8 "x"; // #5     at 0x2A
+    Utf8 "I"; // #6     at 0x2E
+    Field #1 #8; // #7     at 0x32
+    NameAndType #9 #6; // #8     at 0x37
+    Utf8 "y"; // #9     at 0x3C
+    InvokeDynamic 0s #11; // #10     at 0x40
+    NameAndType #12 #13; // #11     at 0x45
+    Utf8 "hashCode"; // #12     at 0x4A
+    Utf8 "(QSuperImplementsIdentityObject;)I"; // #13     at 0x55
+    InvokeDynamic 0s #15; // #14     at 0x6D
+    NameAndType #16 #17; // #15     at 0x72
+    Utf8 "equals"; // #16     at 0x77
+    Utf8 "(QSuperImplementsIdentityObject;Ljava/lang/Object;)Z"; // #17     at 0x80
+    InvokeDynamic 0s #19; // #18     at 0xAA
+    NameAndType #20 #21; // #19     at 0xAF
+    Utf8 "toString"; // #20     at 0xB4
+    Utf8 "(QSuperImplementsIdentityObject;)Ljava/lang/String;"; // #21     at 0xBF
+    class #23; // #22     at 0xE8
+    Utf8 "ImplementsIdentityObject"; // #23     at 0xEB
+    class #25; // #24     at 0xF9
+    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "getX"; // #26     at 0x0115
+    Utf8 "()I"; // #27     at 0x011C
+    Utf8 "Code"; // #28     at 0x0122
+    Utf8 "LineNumberTable"; // #29     at 0x0129
+    Utf8 "getY"; // #30     at 0x013B
+    Utf8 "(Ljava/lang/Object;)Z"; // #31     at 0x0142
+    Utf8 "()Ljava/lang/String;"; // #32     at 0x015A
+    Utf8 "<init>"; // #33     at 0x0171
+    Utf8 "()QSuperImplementsIdentityObject;"; // #34     at 0x017A
+    Utf8 "SourceFile"; // #35     at 0x0191
+    Utf8 "SuperImplementsIdentityObject.java"; // #36     at 0x019E
+    Utf8 "BootstrapMethods"; // #37     at 0x01B6
+    MethodHandle 6b #39; // #38     at 0x01C9
+    Method #40 #41; // #39     at 0x01CD
+    class #42; // #40     at 0x01D2
+    NameAndType #43 #44; // #41     at 0x01D5
+    Utf8 "java/lang/invoke/ValueBootstrapMethods"; // #42     at 0x01DA
+    Utf8 "makeBootstrapMethod"; // #43     at 0x0203
+    Utf8 "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"; // #44     at 0x0219
+    Utf8 "InnerClasses"; // #45     at 0x028F
+    class #47; // #46     at 0x029E
+    Utf8 "java/lang/invoke/MethodHandles$Lookup"; // #47     at 0x02A1
+    class #49; // #48     at 0x02C9
+    Utf8 "java/lang/invoke/MethodHandles"; // #49     at 0x02CC
+    Utf8 "Lookup"; // #50     at 0x02ED
+  } // Constant Pool
+
+  0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
+  #1;// this_cpx
+  #22;// super_cpx
+
+  [1] { // Interfaces
+    #24;
+  } // Interfaces
+
+  [2] { // fields
+    { // Member at 0x0302
+      0x0010; // access
+      #5; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x030A
+      0x0010; // access
+      #9; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+  } // fields
+
+  [6] { // methods
+    { // Member at 0x0314
+      0x0001; // access
+      #26; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 29) { // Code at 0x031C
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40003AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x0333
+              [1] { // LineNumberTable
+                0  10; //  at 0x033F
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x033F
+      0x0001; // access
+      #30; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 29) { // Code at 0x0347
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40007AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x035E
+              [1] { // LineNumberTable
+                0  11; //  at 0x036A
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x036A
+      0x0011; // access
+      #12; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 31) { // Code at 0x0372
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA000A0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x038B
+              [1] { // LineNumberTable
+                0  1; //  at 0x0397
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x0397
+      0x0011; // access
+      #16; // name_cpx
+      #31; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 32) { // Code at 0x039F
+          2; // max_stack
+          2; // max_locals
+          Bytes[8]{
+            0x2A2BBA000E0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x03B9
+              [1] { // LineNumberTable
+                0  1; //  at 0x03C5
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03C5
+      0x0011; // access
+      #20; // name_cpx
+      #32; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 31) { // Code at 0x03CD
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA00120000B0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x03E6
+              [1] { // LineNumberTable
+                0  1; //  at 0x03F2
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03F2
+      0x000A; // access
+      #33; // name_cpx
+      #34; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 56) { // Code at 0x03FA
+          2; // max_stack
+          1; // max_locals
+          Bytes[20]{
+            0xCB00014B032A5FCC;
+            0x00034B032A5FCC00;
+            0x074B2AB0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 18) { // LineNumberTable at 0x0420
+              [4] { // LineNumberTable
+                0  5; //  at 0x042C
+                4  6; //  at 0x0430
+                11  7; //  at 0x0434
+                18  8; //  at 0x0438
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+  } // methods
+
+  [3] { // Attributes
+    Attr(#35, 2) { // SourceFile at 0x043A
+      #36;
+    } // end SourceFile
+    ;
+    Attr(#37, 6) { // BootstrapMethods at 0x0442
+      [1] { // bootstrap_methods
+        {  //  bootstrap_method
+          #38; // bootstrap_method_ref
+          [0] { // bootstrap_arguments
+          }  //  bootstrap_arguments
+        }  //  bootstrap_method
+      }
+    } // end BootstrapMethods
+    ;
+    Attr(#45, 10) { // InnerClasses at 0x044E
+      [1] { // InnerClasses
+        #46 #48 #50 25; //  at 0x045E
+      }
+    } // end InnerClasses
+  } // Attributes
+} // end class SuperImplementsIdentityObject
+
+
+// Inline class with a super class that implements an interface that extends other
+// interfaces that eventually extend java.lang.IdentityObject
+class SuperIntfImplementsIdentityObject {
+  0xCAFEBABE;
+  0; // minor version
+  59; // version
+  [51] { // Constant Pool
+    ; // first element is empty
+    class #2; // #1     at 0x0A
+    Utf8 "SuperIntfImplementsIdentityObject"; // #2     at 0x0D
+    Field #1 #4; // #3     at 0x20
+    NameAndType #5 #6; // #4     at 0x25
+    Utf8 "x"; // #5     at 0x2A
+    Utf8 "I"; // #6     at 0x2E
+    Field #1 #8; // #7     at 0x32
+    NameAndType #9 #6; // #8     at 0x37
+    Utf8 "y"; // #9     at 0x3C
+    InvokeDynamic 0s #11; // #10     at 0x40
+    NameAndType #12 #13; // #11     at 0x45
+    Utf8 "hashCode"; // #12     at 0x4A
+    Utf8 "(QSuperIntfImplementsIdentityObject;)I"; // #13     at 0x55
+    InvokeDynamic 0s #15; // #14     at 0x6D
+    NameAndType #16 #17; // #15     at 0x72
+    Utf8 "equals"; // #16     at 0x77
+    Utf8 "(QSuperIntfImplementsIdentityObject;Ljava/lang/Object;)Z"; // #17     at 0x80
+    InvokeDynamic 0s #19; // #18     at 0xAA
+    NameAndType #20 #21; // #19     at 0xAF
+    Utf8 "toString"; // #20     at 0xB4
+    Utf8 "(QSuperIntfImplementsIdentityObject;)Ljava/lang/String;"; // #21     at 0xBF
+    class #23; // #22     at 0xE8
+    Utf8 "IntfImplementsIdentityObject"; // #23     at 0xEB
+    class #25; // #24     at 0xF9
+    Utf8 "java/lang/InlineObject"; // #25     at 0xFC
+    Utf8 "getX"; // #26     at 0x0115
+    Utf8 "()I"; // #27     at 0x011C
+    Utf8 "Code"; // #28     at 0x0122
+    Utf8 "LineNumberTable"; // #29     at 0x0129
+    Utf8 "getY"; // #30     at 0x013B
+    Utf8 "(Ljava/lang/Object;)Z"; // #31     at 0x0142
+    Utf8 "()Ljava/lang/String;"; // #32     at 0x015A
+    Utf8 "<init>"; // #33     at 0x0171
+    Utf8 "()QSuperIntfImplementsIdentityObject;"; // #34     at 0x017A
+    Utf8 "SourceFile"; // #35     at 0x0191
+    Utf8 "SuperIntfImplementsIdentityObject.java"; // #36     at 0x019E
+    Utf8 "BootstrapMethods"; // #37     at 0x01B6
+    MethodHandle 6b #39; // #38     at 0x01C9
+    Method #40 #41; // #39     at 0x01CD
+    class #42; // #40     at 0x01D2
+    NameAndType #43 #44; // #41     at 0x01D5
+    Utf8 "java/lang/invoke/ValueBootstrapMethods"; // #42     at 0x01DA
+    Utf8 "makeBootstrapMethod"; // #43     at 0x0203
+    Utf8 "(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"; // #44     at 0x0219
+    Utf8 "InnerClasses"; // #45     at 0x028F
+    class #47; // #46     at 0x029E
+    Utf8 "java/lang/invoke/MethodHandles$Lookup"; // #47     at 0x02A1
+    class #49; // #48     at 0x02C9
+    Utf8 "java/lang/invoke/MethodHandles"; // #49     at 0x02CC
+    Utf8 "Lookup"; // #50     at 0x02ED
+  } // Constant Pool
+
+  0x0131; // access [ ACC_PUBLIC ACC_SUPER ACC_FINAL ]
+  #1;// this_cpx
+  #22;// super_cpx
+
+  [1] { // Interfaces
+    #24;
+  } // Interfaces
+
+  [2] { // fields
+    { // Member at 0x0302
+      0x0010; // access
+      #5; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x030A
+      0x0010; // access
+      #9; // name_cpx
+      #6; // sig_cpx
+      [0] { // Attributes
+      } // Attributes
+    } // Member
+  } // fields
+
+  [6] { // methods
+    { // Member at 0x0314
+      0x0001; // access
+      #26; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 29) { // Code at 0x031C
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40003AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x0333
+              [1] { // LineNumberTable
+                0  10; //  at 0x033F
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x033F
+      0x0001; // access
+      #30; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 29) { // Code at 0x0347
+          1; // max_stack
+          1; // max_locals
+          Bytes[5]{
+            0x2AB40007AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x035E
+              [1] { // LineNumberTable
+                0  11; //  at 0x036A
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x036A
+      0x0011; // access
+      #12; // name_cpx
+      #27; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 31) { // Code at 0x0372
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA000A0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x038B
+              [1] { // LineNumberTable
+                0  1; //  at 0x0397
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x0397
+      0x0011; // access
+      #16; // name_cpx
+      #31; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 32) { // Code at 0x039F
+          2; // max_stack
+          2; // max_locals
+          Bytes[8]{
+            0x2A2BBA000E0000AC;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x03B9
+              [1] { // LineNumberTable
+                0  1; //  at 0x03C5
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03C5
+      0x0011; // access
+      #20; // name_cpx
+      #32; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 31) { // Code at 0x03CD
+          1; // max_stack
+          1; // max_locals
+          Bytes[7]{
+            0x2ABA00120000B0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 6) { // LineNumberTable at 0x03E6
+              [1] { // LineNumberTable
+                0  1; //  at 0x03F2
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+    ;
+    { // Member at 0x03F2
+      0x000A; // access
+      #33; // name_cpx
+      #34; // sig_cpx
+      [1] { // Attributes
+        Attr(#28, 56) { // Code at 0x03FA
+          2; // max_stack
+          1; // max_locals
+          Bytes[20]{
+            0xCB00014B032A5FCC;
+            0x00034B032A5FCC00;
+            0x074B2AB0;
+          }
+          [0] { // Traps
+          } // end Traps
+          [1] { // Attributes
+            Attr(#29, 18) { // LineNumberTable at 0x0420
+              [4] { // LineNumberTable
+                0  5; //  at 0x042C
+                4  6; //  at 0x0430
+                11  7; //  at 0x0434
+                18  8; //  at 0x0438
+              }
+            } // end LineNumberTable
+          } // Attributes
+        } // end Code
+      } // Attributes
+    } // Member
+  } // methods
+
+  [3] { // Attributes
+    Attr(#35, 2) { // SourceFile at 0x043A
+      #36;
+    } // end SourceFile
+    ;
+    Attr(#37, 6) { // BootstrapMethods at 0x0442
+      [1] { // bootstrap_methods
+        {  //  bootstrap_method
+          #38; // bootstrap_method_ref
+          [0] { // bootstrap_arguments
+          }  //  bootstrap_arguments
+        }  //  bootstrap_method
+      }
+    } // end BootstrapMethods
+    ;
+    Attr(#45, 10) { // InnerClasses at 0x044E
+      [1] { // InnerClasses
+        #46 #48 #50 25; //  at 0x045E
+      }
+    } // end InnerClasses
+  } // Attributes
+} // end class SuperIntfImplementsIdentityObject
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/IntfImplementsIdentityObject.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/IntfImplementsIdentityObject.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/IntfImplementsIdentityObject.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ *
+ */
+interface I1 extends java.lang.IdentityObject { }
+interface I2 extends I1 { }
+interface J1 { }
+interface I3 extends I2, J1 { }
+
+// Abstract class that implements an interface with an ancestor that implements
+// java.lang.IdentityObject.  It is not a legal super class for an inline class.
+public abstract class IntfImplementsIdentityObject implements I3 {
+    IntfImplementsIdentityObject() { }
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/NotAbstract.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/NotAbstract.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/NotAbstract.java
@@ -0,0 +1,25 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ *
+ */
+
+public class NotAbstract { }
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/TestSuperClasses.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/TestSuperClasses.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/TestSuperClasses.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ *
+ */
+/*
+ * @test
+ * @bug 8243204
+ * @summary test that the JVM detects illegal super classes for inline types.
+ * @compile NotAbstract.java HasNonStaticFields.java CtorHasArgs.java CtorIsNotEmpty.java
+ * @compile HasSynchMethod.java ValidSuper.java ImplementsIdentityObject.java
+ * @compile IntfImplementsIdentityObject.java InlineClassWithBadSupers.jcod
+ * @run main/othervm -verify TestSuperClasses
+ */
+
+public class TestSuperClasses {
+
+    public static void runTestIncompatibleClassChangeError(String test_name, String message) throws Exception {
+        System.out.println("Testing: " + test_name);
+        try {
+            Class newClass = Class.forName(test_name);
+            throw new RuntimeException("Expected IncompatibleClassChangeError exception not thrown");
+        } catch (java.lang.IncompatibleClassChangeError e) {
+            if (!e.getMessage().contains(message)) {
+                throw new RuntimeException("Wrong IncompatibleClassChangeError: " + e.getMessage());
+            }
+        }
+    }
+
+    public static void main(String[] args) throws Exception {
+
+        // Test that the super class of an inline type must be java.lang.Object or an abstract class.
+        runTestIncompatibleClassChangeError("SuperNotAbstract",
+            "class SuperNotAbstract has an invalid super class NotAbstract");
+
+        // Test that the super class of an inline type cannot have instance fields.
+        runTestIncompatibleClassChangeError("SuperHasNonStaticFields",
+            "SuperHasNonStaticFields has an invalid super class HasNonStaticFields");
+
+        // Test that the super class of an inline type cannot contain a synchronized instance method.
+        runTestIncompatibleClassChangeError("SuperHasSynchMethod",
+            "SuperHasSynchMethod has an invalid super class ValidSuper");
+
+        // Test that the constructor in a super class of an inline type must have a signature of "()V".
+        runTestIncompatibleClassChangeError("SuperCtorHasArgs",
+            "SuperCtorHasArgs has an invalid super class CtorHasArgs");
+
+        // Test that the constructor in a super class of an inline type must be empty.
+        runTestIncompatibleClassChangeError("SuperCtorIsNotEmpty",
+            "SuperCtorIsNotEmpty has an invalid super class CtorIsNotEmpty");
+
+        // Test that an inline class cannot implement java.lang.IdentityObject.
+        runTestIncompatibleClassChangeError("InlineImplementsIdentityObject",
+            "attempts to implement interface java.lang.IdentityObject");
+
+        // Test that an inline class's super type cannot implement java.lang.IdentityObject.
+        runTestIncompatibleClassChangeError("SuperImplementsIdentityObject",
+            "SuperImplementsIdentityObject has an invalid super class ImplementsIdentityObject");
+
+        // Test that an inline class's super type's interfaces cannot implement java.lang.IdentityObject.
+        runTestIncompatibleClassChangeError("SuperIntfImplementsIdentityObject",
+            "SuperIntfImplementsIdentityObject has an invalid super class IntfImplementsIdentityObject");
+    }
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/ValidSuper.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/ValidSuper.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/testSupers/ValidSuper.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ *
+ */
+
+// This abstract class is a valid super class for an inline type, but its
+// super class, HasSynchMethod, is not because it contains a synchronized
+// instance method.
+public abstract class ValidSuper extends HasSynchMethod {
+    public static String hi;
+    public static synchronized void helloWorld() { }
+    public void hi(int a) {
+        System.out.println("hi");
+    }
+}
