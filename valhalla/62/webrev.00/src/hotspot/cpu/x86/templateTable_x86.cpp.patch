diff a/src/hotspot/cpu/x86/templateTable_x86.cpp b/src/hotspot/cpu/x86/templateTable_x86.cpp
--- a/src/hotspot/cpu/x86/templateTable_x86.cpp
+++ b/src/hotspot/cpu/x86/templateTable_x86.cpp
@@ -4352,11 +4352,11 @@
   // get InstanceKlass
   __ load_resolved_klass_at_index(rcx, rcx, rdx);
 
   __ movl(rdx, Address(rcx, InstanceKlass::misc_flags_offset()));
   __ andl(rdx, InstanceKlass::_misc_kind_field_mask);
-  __ cmpl(rdx, InstanceKlass::_misc_kind_value_type);
+  __ cmpl(rdx, InstanceKlass::_misc_kind_inline_type);
   __ jcc(Assembler::notEqual, is_not_value);
 
   __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::throw_InstantiationError));
 
   __ bind(is_not_value);
@@ -4403,11 +4403,11 @@
   // get InstanceKlass
   __ load_resolved_klass_at_index(rcx, rcx, rdx);
 
   __ movl(rdx, Address(rcx, InstanceKlass::misc_flags_offset()));
   __ andl(rdx, InstanceKlass::_misc_kind_field_mask);
-  __ cmpl(rdx, InstanceKlass::_misc_kind_value_type);
+  __ cmpl(rdx, InstanceKlass::_misc_kind_inline_type);
   __ jcc(Assembler::equal, is_value);
 
   // in the future, defaultvalue will just return null instead of throwing an exception
   __ call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::throw_IncompatibleClassChangeError));
 
