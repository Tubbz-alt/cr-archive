diff a/src/hotspot/share/classfile/classFileParser.hpp b/src/hotspot/share/classfile/classFileParser.hpp
--- a/src/hotspot/share/classfile/classFileParser.hpp
+++ b/src/hotspot/share/classfile/classFileParser.hpp
@@ -199,11 +199,11 @@
   bool _has_final_method;
   bool _has_contended_fields;
 
   bool _has_flattenable_fields;
   bool _has_nonstatic_fields;
-  bool _is_empty_value;
+  bool _is_empty_inline_type;
   bool _is_naturally_atomic;
   bool _is_declared_atomic;
   bool _invalid_inline_super;   // if true, invalid super type for an inline type.
   bool _invalid_identity_super; // if true, invalid super type for an identity type.
   bool _implements_identityObject;
@@ -275,28 +275,28 @@
                               FieldAnnotationCollector* parsed_annotations,
                               TRAPS);
 
   void parse_fields(const ClassFileStream* const cfs,
                     bool is_interface,
-                    bool is_value_type,
+                    bool is_inline_type,
                     FieldAllocationCount* const fac,
                     ConstantPool* cp,
                     const int cp_size,
                     u2* const java_fields_count_ptr,
                     TRAPS);
 
   // Method parsing
   Method* parse_method(const ClassFileStream* const cfs,
                        bool is_interface,
-                       bool is_value_type,
+                       bool is_inline_type,
                        const ConstantPool* cp,
                        AccessFlags* const promoted_flags,
                        TRAPS);
 
   void parse_methods(const ClassFileStream* const cfs,
                      bool is_interface,
-                     bool is_value_type,
+                     bool is_inline_type,
                      AccessFlags* const promoted_flags,
                      bool* const has_final_method,
                      bool* const declares_nonstatic_concrete_methods,
                      TRAPS);
 
@@ -449,14 +449,14 @@
   void throwIllegalSignature(const char* type,
                              const Symbol* name,
                              const Symbol* sig,
                              TRAPS) const;
 
-  void throwValueTypeLimitation(THREAD_AND_LOCATION_DECL,
-                                const char* msg,
-                                const Symbol* name = NULL,
-                                const Symbol* sig  = NULL) const;
+  void throwInlineTypeLimitation(THREAD_AND_LOCATION_DECL,
+                                 const char* msg,
+                                 const Symbol* name = NULL,
+                                 const Symbol* sig  = NULL) const;
 
   void verify_constantvalue(const ConstantPool* const cp,
                             int constantvalue_index,
                             int signature_index,
                             TRAPS) const;
@@ -474,15 +474,15 @@
                                      TRAPS) const;
 
   void verify_legal_class_modifiers(jint flags, TRAPS) const;
   void verify_legal_field_modifiers(jint flags,
                                     bool is_interface,
-                                    bool is_value_type,
+                                    bool is_inline_type,
                                     TRAPS) const;
   void verify_legal_method_modifiers(jint flags,
                                      bool is_interface,
-                                     bool is_value_type,
+                                     bool is_inline_type,
                                      const Symbol* name,
                                      TRAPS) const;
 
   const char* skip_over_field_signature(const char* signature,
                                         bool void_ok,
@@ -557,12 +557,12 @@
                      FieldLayoutInfo* info,
                      TRAPS);
 
    void update_class_name(Symbol* new_name);
 
-  // Check if the class file supports value types
-  bool supports_value_types() const;
+  // Check if the class file supports inline types
+  bool supports_inline_types() const;
 
  public:
   ClassFileParser(ClassFileStream* stream,
                   Symbol* name,
                   ClassLoaderData* loader_data,
@@ -589,11 +589,11 @@
 
   u2 this_class_index() const { return _this_class_index; }
 
   bool is_unsafe_anonymous() const { return _unsafe_anonymous_host != NULL; }
   bool is_interface() const { return _access_flags.is_interface(); }
-  bool is_value_type() const { return _access_flags.is_value_type(); }
+  bool is_inline_type() const { return _access_flags.is_inline_type(); }
   bool is_value_capable_class() const;
   bool has_flattenable_fields() const { return _has_flattenable_fields; }
   bool invalid_inline_super() const { return _invalid_inline_super; }
   void set_invalid_inline_super() { _invalid_inline_super = true; }
   bool invalid_identity_super() const { return _invalid_identity_super; }
