diff a/src/hotspot/share/classfile/fieldLayoutBuilder.cpp b/src/hotspot/share/classfile/fieldLayoutBuilder.cpp
--- a/src/hotspot/share/classfile/fieldLayoutBuilder.cpp
+++ b/src/hotspot/share/classfile/fieldLayoutBuilder.cpp
@@ -516,11 +516,11 @@
     b = b->next_block();
   }
 }
 
 FieldLayoutBuilder::FieldLayoutBuilder(const Symbol* classname, const InstanceKlass* super_klass, ConstantPool* constant_pool,
-                                       Array<u2>* fields, bool is_contended, bool is_value_type, ClassLoaderData* class_loader_data,
+                                       Array<u2>* fields, bool is_contended, bool is_inline_type, ClassLoaderData* class_loader_data,
                                        Handle protection_domain, FieldLayoutInfo* info) :
   _classname(classname),
   _super_klass(super_klass),
   _constant_pool(constant_pool),
   _fields(fields),
@@ -536,12 +536,12 @@
   _alignment(-1),
   _first_field_offset(-1),
   _exact_size_in_bytes(-1),
   _has_nonstatic_fields(false),
   _is_contended(is_contended),
-  _is_value_type(is_value_type),
-  _has_flattening_information(is_value_type),
+  _is_inline_type(is_inline_type),
+  _has_flattening_information(is_inline_type),
   _has_nonatomic_values(false),
   _atomic_field_count(0)
  {}
 
 FieldGroup* FieldLayoutBuilder::get_or_create_contended_group(int g) {
@@ -676,11 +676,11 @@
  *   - field flattening decisions are taken in this method (those decisions are
  *     currently only based in the size of the fields to be flattened, the size
  *     of the resulting instance is not considered)
  */
 void FieldLayoutBuilder::inline_class_field_sorting(TRAPS) {
-  assert(_is_value_type, "Should only be used for inline classes");
+  assert(_is_inline_type, "Should only be used for inline classes");
   int alignment = 1;
   for (AllFieldStream fs(_fields, _constant_pool); !fs.done(); fs.next()) {
     FieldGroup* group = NULL;
     int field_alignment = 1;
     if (fs.access_flags().is_static()) {
@@ -1006,13 +1006,13 @@
   _info->_instance_size = align_object_size(instance_end / wordSize);
   _info->_static_field_size = static_fields_size;
   _info->_nonstatic_field_size = (nonstatic_field_end - instanceOopDesc::base_offset_in_bytes()) / heapOopSize;
   _info->_has_nonstatic_fields = _has_nonstatic_fields;
 
-  // A value type is naturally atomic if it has just one field, and
+  // An inline type is naturally atomic if it has just one field, and
   // that field is simple enough.
-  _info->_is_naturally_atomic = (_is_value_type &&
+  _info->_is_naturally_atomic = (_is_inline_type &&
                                  (_atomic_field_count <= 1) &&
                                  !_has_nonatomic_values &&
                                  _contended_groups.is_empty());
   // This may be too restrictive, since if all the fields fit in 64
   // bits we could make the decision to align instances of this class
@@ -1027,11 +1027,11 @@
     tty->print_cr("Instance fields:");
     _layout->print(tty, false, _super_klass);
     tty->print_cr("Static fields:");
     _static_layout->print(tty, true, NULL);
     tty->print_cr("Instance size = %d bytes", _info->_instance_size * wordSize);
-    if (_is_value_type) {
+    if (_is_inline_type) {
       tty->print_cr("First field offset = %d", _first_field_offset);
       tty->print_cr("Alignment = %d bytes", _alignment);
       tty->print_cr("Exact size = %d bytes", _exact_size_in_bytes);
     }
     tty->print_cr("---");
@@ -1048,11 +1048,11 @@
              _classname == vmSymbols::java_lang_Byte() ||
              _classname == vmSymbols::java_lang_Short() ||
              _classname == vmSymbols::java_lang_Integer() ||
              _classname == vmSymbols::java_lang_Long()) {
       compute_boxing_class_layout();
-  } else if (_is_value_type) {
+  } else if (_is_inline_type) {
     compute_inline_class_layout(CHECK);
   } else {
     compute_regular_layout();
   }
 }
