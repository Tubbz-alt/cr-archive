diff a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -1605,11 +1605,11 @@
 
 // Side-effects: populates the _fields, _fields_annotations,
 // _fields_type_annotations fields
 void ClassFileParser::parse_fields(const ClassFileStream* const cfs,
                                    bool is_interface,
-                                   bool is_value_type,
+                                   bool is_inline_type,
                                    FieldAllocationCount* const fac,
                                    ConstantPool* cp,
                                    const int cp_size,
                                    u2* const java_fields_count_ptr,
                                    TRAPS) {
@@ -1632,11 +1632,11 @@
                                                                   &num_injected);
 
   // two more slots are required for inline classes:
   // one for the static field with a reference to the pre-allocated default value
   // one for the field the JVM injects when detecting an empty inline class
-  const int total_fields = length + num_injected + (is_value_type ? 2 : 0);
+  const int total_fields = length + num_injected + (is_inline_type ? 2 : 0);
 
   // The field array starts with tuples of shorts
   // [access, name index, sig index, initial value index, byte offset].
   // A generic signature slot only exists for field with generic
   // signature attribute. And the access flag is set with
@@ -1670,11 +1670,11 @@
     cfs->guarantee_more(8, CHECK);
 
     jint recognized_modifiers = JVM_RECOGNIZED_FIELD_MODIFIERS;
 
     const jint flags = cfs->get_u2_fast() & recognized_modifiers;
-    verify_legal_field_modifiers(flags, is_interface, is_value_type, CHECK);
+    verify_legal_field_modifiers(flags, is_interface, is_inline_type, CHECK);
     AccessFlags access_flags;
     access_flags.set_flags(flags);
 
     const u2 name_index = cfs->get_u2_fast();
     check_property(valid_symbol_at(name_index),
@@ -1814,11 +1814,11 @@
       field->set_allocation_type(atype);
       index++;
     }
   }
 
-  if (is_value_type) {
+  if (is_inline_type) {
     FieldInfo* const field = FieldInfo::from_field_array(fa, index);
     field->initialize(JVM_ACC_FIELD_INTERNAL | JVM_ACC_STATIC,
                       vmSymbols::default_value_name_enum,
                       vmSymbols::object_signature_enum,
                       0);
@@ -1826,12 +1826,12 @@
     const FieldAllocationType atype = fac->update(true, type, false);
     field->set_allocation_type(atype);
     index++;
   }
 
-  if (is_value_type && instance_fields_count == 0) {
-    _is_empty_value = true;
+  if (is_inline_type && instance_fields_count == 0) {
+    _is_empty_inline_type = true;
     FieldInfo* const field = FieldInfo::from_field_array(fa, index);
     field->initialize(JVM_ACC_FIELD_INTERNAL,
         vmSymbols::empty_marker_name_enum,
         vmSymbols::byte_signature_enum,
         0);
@@ -2159,11 +2159,11 @@
                                             TRAPS) const {
   assert(name != NULL, "invariant");
   assert(sig != NULL, "invariant");
 
   const char* class_note = "";
-  if (is_value_type() && name == vmSymbols::object_initializer_name()) {
+  if (is_inline_type() && name == vmSymbols::object_initializer_name()) {
     class_note = " (an inline class)";
   }
 
   ResourceMark rm(THREAD);
   Exceptions::fthrow(THREAD_AND_LOCATION,
@@ -2431,11 +2431,11 @@
 // from the method back up to the containing klass. These flag values
 // are added to klass's access_flags.
 
 Method* ClassFileParser::parse_method(const ClassFileStream* const cfs,
                                       bool is_interface,
-                                      bool is_value_type,
+                                      bool is_inline_type,
                                       const ConstantPool* cp,
                                       AccessFlags* const promoted_flags,
                                       TRAPS) {
   assert(cfs != NULL, "invariant");
   assert(cp != NULL, "invariant");
@@ -2472,19 +2472,19 @@
       flags &= JVM_ACC_STATIC | JVM_ACC_STRICT;
     } else {
       classfile_parse_error("Method <clinit> is not static in class file %s", CHECK_NULL);
     }
   } else {
-    verify_legal_method_modifiers(flags, is_interface, is_value_type, name, CHECK_NULL);
+    verify_legal_method_modifiers(flags, is_interface, is_inline_type, name, CHECK_NULL);
   }
 
   if (name == vmSymbols::object_initializer_name()) {
     if (is_interface) {
       classfile_parse_error("Interface cannot have a method named <init>, class file %s", CHECK_NULL);
-    } else if (!is_value_type && signature->is_void_method_signature()) {
+    } else if (!is_inline_type && signature->is_void_method_signature()) {
       // OK, a constructor
-    } else if (is_value_type && !signature->is_void_method_signature()) {
+    } else if (is_inline_type && !signature->is_void_method_signature()) {
       // also OK, a static factory, as long as the return value is good
       bool ok = false;
       SignatureStream ss((Symbol*) signature, true);
       while (!ss.at_return_type())  ss.next();
       if (ss.is_reference()) {
@@ -3064,11 +3064,11 @@
 // from the methods back up to the containing klass. These flag values
 // are added to klass's access_flags.
 // Side-effects: populates the _methods field in the parser
 void ClassFileParser::parse_methods(const ClassFileStream* const cfs,
                                     bool is_interface,
-                                    bool is_value_type,
+                                    bool is_inline_type,
                                     AccessFlags* promoted_flags,
                                     bool* has_final_method,
                                     bool* declares_nonstatic_concrete_methods,
                                     TRAPS) {
   assert(cfs != NULL, "invariant");
@@ -3089,11 +3089,11 @@
                                                    CHECK);
 
     for (int index = 0; index < length; index++) {
       Method* method = parse_method(cfs,
                                     is_interface,
-                                    is_value_type,
+                                    is_inline_type,
                                     _cp,
                                     promoted_flags,
                                     CHECK);
 
       if (method->is_final()) {
@@ -3289,11 +3289,11 @@
     // JVM_ACC_MODULE is defined in JDK-9 and later.
     if (_major_version >= JAVA_9_VERSION) {
       recognized_modifiers |= JVM_ACC_MODULE;
     }
     // JVM_ACC_VALUE is defined for class file version 55 and later
-    if (supports_value_types()) {
+    if (supports_inline_types()) {
       recognized_modifiers |= JVM_ACC_VALUE;
     }
 
     // Access flags
     jint flags = cfs->get_u2_fast() & recognized_modifiers;
@@ -3672,12 +3672,10 @@
   bool runtime_invisible_type_annotations_exists = false;
   bool runtime_invisible_annotations_exists = false;
   bool parsed_source_debug_ext_annotations_exist = false;
   const u1* inner_classes_attribute_start = NULL;
   u4  inner_classes_attribute_length = 0;
-  const u1* value_types_attribute_start = NULL;
-  u4 value_types_attribute_length = 0;
   u2  enclosing_method_class_index = 0;
   u2  enclosing_method_method_index = 0;
   const u1* nest_members_attribute_start = NULL;
   u4  nest_members_attribute_length = 0;
   const u1* record_attribute_start = NULL;
@@ -4258,14 +4256,14 @@
 
 void OopMapBlocksBuilder::print_value_on(outputStream* st) const {
   print_on(st);
 }
 
-void ClassFileParser::throwValueTypeLimitation(THREAD_AND_LOCATION_DECL,
-                                               const char* msg,
-                                               const Symbol* name,
-                                               const Symbol* sig) const {
+void ClassFileParser::throwInlineTypeLimitation(THREAD_AND_LOCATION_DECL,
+                                                const char* msg,
+                                                const Symbol* name,
+                                                const Symbol* sig) const {
 
   ResourceMark rm(THREAD);
   if (name == NULL || sig == NULL) {
     Exceptions::fthrow(THREAD_AND_LOCATION_ARGS,
         vmSymbols::java_lang_ClassFormatError(),
@@ -4289,14 +4287,14 @@
   assert(cp != NULL, "invariant");
 
   // Field size and offset computation
   int nonstatic_field_size = _super_klass == NULL ? 0 :
                                _super_klass->nonstatic_field_size();
-  int next_nonstatic_valuetype_offset = 0;
-  int first_nonstatic_valuetype_offset = 0;
+  int next_nonstatic_inline_type_offset = 0;
+  int first_nonstatic_inline_type_offset = 0;
 
-  // Fields that are value types are handled differently depending if they are static or not:
+  // Fields that are inline types are handled differently depending if they are static or not:
   // - static fields are oops
   // - non-static fields are embedded
 
   // Count the contended fields by type.
   //
@@ -4315,11 +4313,11 @@
   }
 
 
   // Calculate the starting byte offsets
   int next_static_oop_offset    = InstanceMirrorKlass::offset_of_static_fields();
-  // Value types in static fields are not embedded, they are handled with oops
+  // Inline types in static fields are not embedded, they are handled with oops
   int next_static_double_offset = next_static_oop_offset +
                                   ((fac->count[STATIC_OOP] + fac->count[STATIC_FLATTENABLE]) * heapOopSize);
   if (fac->count[STATIC_DOUBLE]) {
     next_static_double_offset = align_up(next_static_double_offset, BytesPerLong);
   }
@@ -4332,18 +4330,18 @@
                                   ((fac->count[STATIC_SHORT]) * BytesPerShort);
 
   int nonstatic_fields_start  = instanceOopDesc::base_offset_in_bytes() +
                                 nonstatic_field_size * heapOopSize;
 
-  // First field of value types is aligned on a long boundary in order to ease
-  // in-lining of value types (with header removal) in packed arrays and
-  // flatten value types
-  int initial_value_type_padding = 0;
-  if (is_value_type()) {
+  // First field of inline types is aligned on a long boundary in order to ease
+  // in-lining of inline types (with header removal) in packed arrays and
+  // flatten inline types
+  int initial_inline_type_padding = 0;
+  if (is_inline_type()) {
     int old = nonstatic_fields_start;
     nonstatic_fields_start = align_up(nonstatic_fields_start, BytesPerLong);
-    initial_value_type_padding = nonstatic_fields_start - old;
+    initial_inline_type_padding = nonstatic_fields_start - old;
   }
 
   int next_nonstatic_field_offset = nonstatic_fields_start;
 
   const bool is_contended_class     = parsed_annotations->is_contended();
@@ -4351,14 +4349,14 @@
   // Class is contended, pad before all the fields
   if (is_contended_class) {
     next_nonstatic_field_offset += ContendedPaddingWidth;
   }
 
-  // Temporary value types restrictions
-  if (is_value_type()) {
+  // Temporary inline types restrictions
+  if (is_inline_type()) {
     if (is_contended_class) {
-      throwValueTypeLimitation(THREAD_AND_LOCATION, "Inline Types do not support @Contended annotation yet");
+      throwInlineTypeLimitation(THREAD_AND_LOCATION, "Inline Types do not support @Contended annotation yet");
       return;
     }
   }
 
   // Compute the non-contended fields count.
@@ -4369,47 +4367,47 @@
   unsigned int nonstatic_word_count   = fac->count[NONSTATIC_WORD]   - fac_contended.count[NONSTATIC_WORD];
   unsigned int nonstatic_short_count  = fac->count[NONSTATIC_SHORT]  - fac_contended.count[NONSTATIC_SHORT];
   unsigned int nonstatic_byte_count   = fac->count[NONSTATIC_BYTE]   - fac_contended.count[NONSTATIC_BYTE];
   unsigned int nonstatic_oop_count    = fac->count[NONSTATIC_OOP]    - fac_contended.count[NONSTATIC_OOP];
 
-  int static_value_type_count = 0;
-  int nonstatic_value_type_count = 0;
-  int* nonstatic_value_type_indexes = NULL;
-  Klass** nonstatic_value_type_klasses = NULL;
-  unsigned int value_type_oop_map_count = 0;
-  int not_flattened_value_types = 0;
-  int not_atomic_value_types = 0;
+  int static_inline_type_count = 0;
+  int nonstatic_inline_type_count = 0;
+  int* nonstatic_inline_type_indexes = NULL;
+  Klass** nonstatic_inline_type_klasses = NULL;
+  unsigned int inline_type_oop_map_count = 0;
+  int not_flattened_inline_types = 0;
+  int not_atomic_inline_types = 0;
 
-  int max_nonstatic_value_type = fac->count[NONSTATIC_FLATTENABLE] + 1;
+  int max_nonstatic_inline_type = fac->count[NONSTATIC_FLATTENABLE] + 1;
 
-  nonstatic_value_type_indexes = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, int,
-                                                              max_nonstatic_value_type);
-  for (int i = 0; i < max_nonstatic_value_type; i++) {
-    nonstatic_value_type_indexes[i] = -1;
+  nonstatic_inline_type_indexes = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, int,
+                                                               max_nonstatic_inline_type);
+  for (int i = 0; i < max_nonstatic_inline_type; i++) {
+    nonstatic_inline_type_indexes[i] = -1;
   }
-  nonstatic_value_type_klasses = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, Klass*,
-                                                              max_nonstatic_value_type);
+  nonstatic_inline_type_klasses = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, Klass*,
+                                                               max_nonstatic_inline_type);
 
   for (AllFieldStream fs(_fields, _cp); !fs.done(); fs.next()) {
     if (fs.allocation_type() == STATIC_FLATTENABLE) {
       ResourceMark rm;
       if (!fs.signature()->is_Q_signature()) {
         THROW(vmSymbols::java_lang_ClassFormatError());
       }
-      static_value_type_count++;
+      static_inline_type_count++;
     } else if (fs.allocation_type() == NONSTATIC_FLATTENABLE) {
-      // Pre-resolve the flattenable field and check for value type circularity issues.
+      // Pre-resolve the flattenable field and check for inline type circularity issues.
       ResourceMark rm;
       if (!fs.signature()->is_Q_signature()) {
         THROW(vmSymbols::java_lang_ClassFormatError());
       }
       Klass* klass =
         SystemDictionary::resolve_flattenable_field_or_fail(&fs,
                                                             Handle(THREAD, _loader_data->class_loader()),
                                                             _protection_domain, true, CHECK);
       assert(klass != NULL, "Sanity check");
-      if (!klass->access_flags().is_value_type()) {
+      if (!klass->access_flags().is_inline_type()) {
         THROW(vmSymbols::java_lang_IncompatibleClassChangeError());
       }
       ValueKlass* vk = ValueKlass::cast(klass);
       // Conditions to apply flattening or not should be defined in a single place
       bool too_big_to_flatten = (ValueFieldMaxFlatSize >= 0 &&
@@ -4420,46 +4418,46 @@
         too_atomic_to_flatten = false;
         //too_volatile_to_flatten = false; //FIXME
         // volatile fields are currently never flattened, this could change in the future
       }
       if (!(too_big_to_flatten | too_atomic_to_flatten | too_volatile_to_flatten)) {
-        nonstatic_value_type_indexes[nonstatic_value_type_count] = fs.index();
-        nonstatic_value_type_klasses[nonstatic_value_type_count] = klass;
-        nonstatic_value_type_count++;
+        nonstatic_inline_type_indexes[nonstatic_inline_type_count] = fs.index();
+        nonstatic_inline_type_klasses[nonstatic_inline_type_count] = klass;
+        nonstatic_inline_type_count++;
 
         ValueKlass* vklass = ValueKlass::cast(klass);
         if (vklass->contains_oops()) {
-          value_type_oop_map_count += vklass->nonstatic_oop_map_count();
+          inline_type_oop_map_count += vklass->nonstatic_oop_map_count();
         }
         fs.set_flattened(true);
         if (!vk->is_atomic()) {  // flat and non-atomic: take note
-          not_atomic_value_types++;
+          not_atomic_inline_types++;
         }
       } else {
-        not_flattened_value_types++;
+        not_flattened_inline_types++;
         fs.set_flattened(false);
       }
     }
   }
 
-  // Adjusting non_static_oop_count to take into account not flattened value types;
-  nonstatic_oop_count += not_flattened_value_types;
+  // Adjusting non_static_oop_count to take into account not flattened inline types;
+  nonstatic_oop_count += not_flattened_inline_types;
 
   // Total non-static fields count, including every contended field
   unsigned int nonstatic_fields_count = fac->count[NONSTATIC_DOUBLE] + fac->count[NONSTATIC_WORD] +
                                         fac->count[NONSTATIC_SHORT] + fac->count[NONSTATIC_BYTE] +
                                         fac->count[NONSTATIC_OOP] + fac->count[NONSTATIC_FLATTENABLE];
 
   const bool super_has_nonstatic_fields =
           (_super_klass != NULL && _super_klass->has_nonstatic_fields());
   const bool has_nonstatic_fields =
     super_has_nonstatic_fields || (nonstatic_fields_count != 0);
-  const bool has_nonstatic_value_fields = nonstatic_value_type_count > 0;
+  const bool has_nonstatic_value_fields = nonstatic_inline_type_count > 0;
 
-  if (is_value_type() && (!has_nonstatic_fields)) {
+  if (is_inline_type() && (!has_nonstatic_fields)) {
     // There are a number of fixes required throughout the type system and JIT
-    throwValueTypeLimitation(THREAD_AND_LOCATION, "Inline Types do not support zero instance size yet");
+    throwInlineTypeLimitation(THREAD_AND_LOCATION, "Inline Types do not support zero instance size yet");
     return;
   }
 
   // Prepare list of oops for oop map generation.
   //
@@ -4471,12 +4469,12 @@
   //
   int super_oop_map_count = (_super_klass == NULL) ? 0 :_super_klass->nonstatic_oop_map_count();
   int max_oop_map_count =
       super_oop_map_count +
       fac->count[NONSTATIC_OOP] +
-      value_type_oop_map_count +
-      not_flattened_value_types;
+      inline_type_oop_map_count +
+      not_flattened_inline_types;
 
   OopMapBlocksBuilder* nonstatic_oop_maps = new OopMapBlocksBuilder(max_oop_map_count);
   if (super_oop_map_count > 0) {
     nonstatic_oop_maps->initialize_inherited_blocks(_super_klass->start_of_nonstatic_oop_maps(),
                                                     _super_klass->nonstatic_oop_map_count());
@@ -4584,19 +4582,19 @@
       next_nonstatic_oop_offset = align_up(next_nonstatic_oop_offset, heapOopSize);
     }
     next_nonstatic_padded_offset = next_nonstatic_oop_offset + (nonstatic_oop_count * heapOopSize);
   }
 
-  // Aligning embedded value types
-  // bug below, the current algorithm to layout embedded value types always put them at the
+  // Aligning embedded inline types
+  // bug below, the current algorithm to layout embedded inline types always put them at the
   // end of the layout, which doesn't match the different allocation policies the VM is
   // supposed to provide => FixMe
-  // Note also that the current alignment policy is to make each value type starting on a
+  // Note also that the current alignment policy is to make each inline type starting on a
   // 64 bits boundary. This could be optimized later. For instance, it could be nice to
-  // align value types according to their most constrained internal type.
-  next_nonstatic_valuetype_offset = align_up(next_nonstatic_padded_offset, BytesPerLong);
-  int next_value_type_index = 0;
+  // align inline types according to their most constrained internal type.
+  next_nonstatic_inline_type_offset = align_up(next_nonstatic_padded_offset, BytesPerLong);
+  int next_inline_type_index = 0;
 
   // Iterate over fields again and compute correct offsets.
   // The field allocation type was temporarily stored in the offset slot.
   // oop fields are located before non-oop fields (static and non-static).
   for (AllFieldStream fs(_fields, cp); !fs.done(); fs.next()) {
@@ -4610,11 +4608,11 @@
     int real_offset = 0;
     const FieldAllocationType atype = (const FieldAllocationType) fs.allocation_type();
 
     // pack the rest of the fields
     switch (atype) {
-      // Value types in static fields are handled with oops
+      // Inline types in static fields are handled with oops
       case STATIC_FLATTENABLE:   // Fallthrough
       case STATIC_OOP:
         real_offset = next_static_oop_offset;
         next_static_oop_offset += heapOopSize;
         break;
@@ -4634,19 +4632,19 @@
         real_offset = next_static_double_offset;
         next_static_double_offset += BytesPerLong;
         break;
       case NONSTATIC_FLATTENABLE:
         if (fs.is_flattened()) {
-          Klass* klass = nonstatic_value_type_klasses[next_value_type_index];
+          Klass* klass = nonstatic_inline_type_klasses[next_inline_type_index];
           assert(klass != NULL, "Klass should have been loaded and resolved earlier");
-          assert(klass->access_flags().is_value_type(),"Must be a value type");
+          assert(klass->access_flags().is_inline_type(),"Must be an inline type");
           ValueKlass* vklass = ValueKlass::cast(klass);
-          real_offset = next_nonstatic_valuetype_offset;
-          next_nonstatic_valuetype_offset += (vklass->size_helper()) * wordSize - vklass->first_field_offset();
-          // aligning next value type on a 64 bits boundary
-          next_nonstatic_valuetype_offset = align_up(next_nonstatic_valuetype_offset, BytesPerLong);
-          next_value_type_index += 1;
+          real_offset = next_nonstatic_inline_type_offset;
+          next_nonstatic_inline_type_offset += (vklass->size_helper()) * wordSize - vklass->first_field_offset();
+          // aligning next inline type on a 64 bits boundary
+          next_nonstatic_inline_type_offset = align_up(next_nonstatic_inline_type_offset, BytesPerLong);
+          next_inline_type_index += 1;
 
           if (vklass->contains_oops()) { // add flatten oop maps
             int diff = real_offset - vklass->first_field_offset();
             const OopMapBlock* map = vklass->start_of_nonstatic_oop_maps();
             const OopMapBlock* const last_map = map + vklass->nonstatic_oop_map_count();
@@ -4775,14 +4773,14 @@
             next_nonstatic_padded_offset = align_up(next_nonstatic_padded_offset, BytesPerLong);
             real_offset = next_nonstatic_padded_offset;
             next_nonstatic_padded_offset += BytesPerLong;
             break;
 
-            // Value types in static fields are handled with oops
+            // Inline types in static fields are handled with oops
           case NONSTATIC_FLATTENABLE:
-            throwValueTypeLimitation(THREAD_AND_LOCATION,
-                                     "@Contended annotation not supported for inline types yet", fs.name(), fs.signature());
+            throwInlineTypeLimitation(THREAD_AND_LOCATION,
+                                      "@Contended annotation not supported for inline types yet", fs.name(), fs.signature());
             return;
 
           case NONSTATIC_OOP:
             next_nonstatic_padded_offset = align_up(next_nonstatic_padded_offset, heapOopSize);
             real_offset = next_nonstatic_padded_offset;
@@ -4820,23 +4818,23 @@
 
   // Entire class is contended, pad in the back.
   // This helps to alleviate memory contention effects for subclass fields
   // and/or adjacent object.
   if (is_contended_class) {
-    assert(!is_value_type(), "@Contended not supported for value types yet");
+    assert(!is_inline_type(), "@Contended not supported for inline types yet");
     next_nonstatic_padded_offset += ContendedPaddingWidth;
   }
 
   int notaligned_nonstatic_fields_end;
-  if (nonstatic_value_type_count != 0) {
-    notaligned_nonstatic_fields_end = next_nonstatic_valuetype_offset;
+  if (nonstatic_inline_type_count != 0) {
+    notaligned_nonstatic_fields_end = next_nonstatic_inline_type_offset;
   } else {
     notaligned_nonstatic_fields_end = next_nonstatic_padded_offset;
   }
 
   int nonstatic_field_sz_align = heapOopSize;
-  if (is_value_type()) {
+  if (is_inline_type()) {
     if ((notaligned_nonstatic_fields_end - nonstatic_fields_start) > heapOopSize) {
       nonstatic_field_sz_align = BytesPerLong; // value copy of fields only uses jlong copy
     }
   }
   int nonstatic_fields_end      = align_up(notaligned_nonstatic_fields_end, nonstatic_field_sz_align);
@@ -4850,11 +4848,11 @@
 
   int instance_size             = align_object_size(instance_end / wordSize);
 
   assert(instance_size == align_object_size(align_up(
          (instanceOopDesc::base_offset_in_bytes() + nonstatic_field_size*heapOopSize)
-         + initial_value_type_padding, wordSize) / wordSize), "consistent layout helper value");
+         + initial_inline_type_padding, wordSize) / wordSize), "consistent layout helper value");
 
 
   // Invariant: nonstatic_field end/start should only change if there are
   // nonstatic fields in the class, or if the class is contended. We compare
   // against the non-aligned value, so that end alignment will not fail the
@@ -4865,12 +4863,12 @@
 
   // Number of non-static oop map blocks allocated at end of klass.
   nonstatic_oop_maps->compact();
 
 #ifndef PRODUCT
-  if ((PrintFieldLayout && !is_value_type()) ||
-      (PrintValueLayout && (is_value_type() || has_nonstatic_value_fields))) {
+  if ((PrintFieldLayout && !is_inline_type()) ||
+      (PrintValueLayout && (is_inline_type() || has_nonstatic_value_fields))) {
     print_field_layout(_class_name,
           _fields,
           cp,
           instance_size,
           nonstatic_fields_start,
@@ -4891,16 +4889,16 @@
   info->_instance_size = instance_size;
   info->_static_field_size = static_field_size;
   info->_nonstatic_field_size = nonstatic_field_size;
   info->_has_nonstatic_fields = has_nonstatic_fields;
 
-  // A value type is naturally atomic if it has just one field, and
+  // An inline type is naturally atomic if it has just one field, and
   // that field is simple enough.
-  info->_is_naturally_atomic = (is_value_type() &&
+  info->_is_naturally_atomic = (is_inline_type() &&
                                 !super_has_nonstatic_fields &&
                                 (nonstatic_fields_count <= 1) &&
-                                (not_atomic_value_types == 0) &&
+                                (not_atomic_inline_types == 0) &&
                                 (nonstatic_contended_count == 0));
   // This may be too restrictive, since if all the fields fit in 64
   // bits we could make the decision to align instances of this class
   // to 64-bit boundaries, and load and store them as single words.
   // And on machines which supported larger atomics we could similarly
@@ -4940,11 +4938,11 @@
   // Check if this klass supports the java.lang.Cloneable interface
   if (SystemDictionary::Cloneable_klass_loaded()) {
     if (ik->is_subtype_of(SystemDictionary::Cloneable_klass())) {
       if (ik->is_value()) {
         Thread *THREAD = Thread::current();
-        throwValueTypeLimitation(THREAD_AND_LOCATION, "Inline Types do not support Cloneable");
+        throwInlineTypeLimitation(THREAD_AND_LOCATION, "Inline Types do not support Cloneable");
         return;
       }
       ik->set_is_cloneable();
     }
   }
@@ -4983,12 +4981,12 @@
     const jint lh = Klass::instance_layout_helper(ik->size_helper(), true);
     ik->set_layout_helper(lh);
   }
 }
 
-bool ClassFileParser::supports_value_types() const {
-  // Value types are only supported by class file version 55 and later
+bool ClassFileParser::supports_inline_types() const {
+  // Inline types are only supported by class file version 55 and later
   return _major_version >= JAVA_11_VERSION;
 }
 
 // utility methods for appending an array with check for duplicates
 
@@ -5257,24 +5255,24 @@
 
 // utility methods for format checking
 
 void ClassFileParser::verify_legal_class_modifiers(jint flags, TRAPS) const {
   const bool is_module = (flags & JVM_ACC_MODULE) != 0;
-  const bool is_value_type = (flags & JVM_ACC_VALUE) != 0;
+  const bool is_inline_type = (flags & JVM_ACC_VALUE) != 0;
   assert(_major_version >= JAVA_9_VERSION || !is_module, "JVM_ACC_MODULE should not be set");
-  assert(supports_value_types() || !is_value_type, "JVM_ACC_VALUE should not be set");
+  assert(supports_inline_types() || !is_inline_type, "JVM_ACC_VALUE should not be set");
   if (is_module) {
     ResourceMark rm(THREAD);
     Exceptions::fthrow(
       THREAD_AND_LOCATION,
       vmSymbols::java_lang_NoClassDefFoundError(),
       "%s is not a class because access_flag ACC_MODULE is set",
       _class_name->as_C_string());
     return;
   }
 
-  if (is_value_type && !EnableValhalla) {
+  if (is_inline_type && !EnableValhalla) {
     ResourceMark rm(THREAD);
     Exceptions::fthrow(
       THREAD_AND_LOCATION,
       vmSymbols::java_lang_ClassFormatError(),
       "Class modifier ACC_VALUE in class %s requires option -XX:+EnableValhalla",
@@ -5295,14 +5293,14 @@
 
   if ((is_abstract && is_final) ||
       (is_interface && !is_abstract) ||
       (is_interface && major_gte_1_5 && (is_super || is_enum)) ||
       (!is_interface && major_gte_1_5 && is_annotation) ||
-      (is_value_type && (is_interface || is_abstract || is_enum || !is_final))) {
+      (is_inline_type && (is_interface || is_abstract || is_enum || !is_final))) {
     ResourceMark rm(THREAD);
     const char* class_note = "";
-    if (is_value_type)  class_note = " (an inline class)";
+    if (is_inline_type)  class_note = " (an inline class)";
     Exceptions::fthrow(
       THREAD_AND_LOCATION,
       vmSymbols::java_lang_ClassFormatError(),
       "Illegal class modifiers in class %s%s: 0x%X",
       _class_name->as_C_string(), class_note, flags
@@ -5382,11 +5380,11 @@
   }
 }
 
 void ClassFileParser::verify_legal_field_modifiers(jint flags,
                                                    bool is_interface,
-                                                   bool is_value_type,
+                                                   bool is_inline_type,
                                                    TRAPS) const {
   if (!_need_verify) { return; }
 
   const bool is_public    = (flags & JVM_ACC_PUBLIC)    != 0;
   const bool is_protected = (flags & JVM_ACC_PROTECTED) != 0;
@@ -5408,11 +5406,11 @@
     }
   } else { // not interface
     if (has_illegal_visibility(flags) || (is_final && is_volatile)) {
       is_illegal = true;
     } else {
-      if (is_value_type && !is_static && !is_final) {
+      if (is_inline_type && !is_static && !is_final) {
         is_illegal = true;
       }
     }
   }
 
@@ -5427,11 +5425,11 @@
   }
 }
 
 void ClassFileParser::verify_legal_method_modifiers(jint flags,
                                                     bool is_interface,
-                                                    bool is_value_type,
+                                                    bool is_inline_type,
                                                     const Symbol* name,
                                                     TRAPS) const {
   if (!_need_verify) { return; }
 
   const bool is_public       = (flags & JVM_ACC_PUBLIC)       != 0;
@@ -5488,21 +5486,21 @@
       if (is_initializer) {
         if (is_final || is_synchronized || is_native ||
             is_abstract || (major_gte_1_5 && is_bridge)) {
           is_illegal = true;
         }
-        if (!is_static && !is_value_type) {
+        if (!is_static && !is_inline_type) {
           // OK, an object constructor in a regular class
-        } else if (is_static && is_value_type) {
+        } else if (is_static && is_inline_type) {
           // OK, a static init factory in an inline class
         } else {
           // but no other combinations are allowed
           is_illegal = true;
-          class_note = (is_value_type ? " (an inline class)" : " (not an inline class)");
+          class_note = (is_inline_type ? " (an inline class)" : " (not an inline class)");
         }
       } else { // not initializer
-        if (is_value_type && is_synchronized && !is_static) {
+        if (is_inline_type && is_synchronized && !is_static) {
           is_illegal = true;
           class_note = " (an inline class)";
         } else {
           if (is_abstract) {
             if ((is_final || is_native || is_private || is_static ||
@@ -6150,12 +6148,12 @@
   ik->set_nonstatic_field_size(_field_info->_nonstatic_field_size);
   ik->set_has_nonstatic_fields(_field_info->_has_nonstatic_fields);
   if (_field_info->_is_naturally_atomic && ik->is_value()) {
     ik->set_is_naturally_atomic();
   }
-  if (_is_empty_value) {
-    ik->set_is_empty_value();
+  if (_is_empty_inline_type) {
+    ik->set_is_empty_inline_type();
   }
 
   if (this->_invalid_inline_super) {
     ik->set_invalid_inline_super();
   }
@@ -6327,22 +6325,22 @@
       // Inline classes for static fields might not have been loaded yet
       Klass* klass = SystemDictionary::find(klass_name,
           Handle(THREAD, ik->class_loader()),
           Handle(THREAD, ik->protection_domain()), CHECK);
       if (klass != NULL) {
-        assert(klass->access_flags().is_value_type(), "Value type expected");
+        assert(klass->access_flags().is_inline_type(), "Inline type expected");
         ik->set_value_field_klass(i, klass);
       }
       klass_name->decrement_refcount();
     } else
-      if (is_value_type() && ((ik->field_access_flags(i) & JVM_ACC_FIELD_INTERNAL) != 0)
+      if (is_inline_type() && ((ik->field_access_flags(i) & JVM_ACC_FIELD_INTERNAL) != 0)
         && ((ik->field_access_flags(i) & JVM_ACC_STATIC) != 0)) {
       ValueKlass::cast(ik)->set_default_value_offset(ik->field_offset(i));
     }
   }
 
-  if (is_value_type()) {
+  if (is_inline_type()) {
     ValueKlass* vk = ValueKlass::cast(ik);
     if (UseNewFieldLayout) {
       vk->set_alignment(_alignment);
       vk->set_first_field_offset(_first_field_offset);
       vk->set_exact_size_in_bytes(_exact_size_in_bytes);
@@ -6548,11 +6546,11 @@
   _declares_nonstatic_concrete_methods(false),
   _has_final_method(false),
   _has_contended_fields(false),
   _has_flattenable_fields(false),
   _has_nonstatic_fields(false),
-  _is_empty_value(false),
+  _is_empty_inline_type(false),
   _is_naturally_atomic(false),
   _is_declared_atomic(false),
   _invalid_inline_super(false),
   _invalid_identity_super(false),
   _implements_identityObject(false),
@@ -6761,11 +6759,11 @@
   // JVM_ACC_MODULE is defined in JDK-9 and later.
   if (_major_version >= JAVA_9_VERSION) {
     recognized_modifiers |= JVM_ACC_MODULE;
   }
   // JVM_ACC_VALUE is defined for class file version 55 and later
-  if (supports_value_types()) {
+  if (supports_inline_types()) {
     recognized_modifiers |= JVM_ACC_VALUE;
   }
 
   // Access flags
   jint flags = stream->get_u2_fast() & recognized_modifiers;
@@ -6893,22 +6891,22 @@
   // Interfaces
   _itfs_len = stream->get_u2_fast();
   parse_interfaces(stream,
                    _itfs_len,
                    cp,
-                   is_value_type(),
+                   is_inline_type(),
                    &_has_nonstatic_concrete_methods,
                    &_is_declared_atomic,
                    CHECK);
 
   assert(_temp_local_interfaces != NULL, "invariant");
 
   // Fields (offsets are filled in later)
   _fac = new FieldAllocationCount();
   parse_fields(stream,
                is_interface(),
-               is_value_type(),
+               is_inline_type(),
                _fac,
                cp,
                cp_size,
                &_java_fields_count,
                CHECK);
@@ -6917,11 +6915,11 @@
 
   // Methods
   AccessFlags promoted_flags;
   parse_methods(stream,
                 is_interface(),
-                is_value_type(),
+                is_inline_type(),
                 &promoted_flags,
                 &_has_final_method,
                 &_declares_nonstatic_concrete_methods,
                 CHECK);
 
@@ -7010,11 +7008,11 @@
       THROW_MSG(vmSymbols::java_lang_VerifyError(), "Cannot inherit from final class");
     }
 
     // For an inline class, only java/lang/Object or special abstract classes
     // are acceptable super classes.
-    if (is_value_type()) {
+    if (is_inline_type()) {
       const InstanceKlass* super_ik = _super_klass;
       if (super_ik->invalid_inline_super()) {
         ResourceMark rm(THREAD);
         Exceptions::fthrow(
           THREAD_AND_LOCATION,
@@ -7046,11 +7044,11 @@
       (_super_klass != NULL && _super_klass->invalid_inline_super()) ||
       is_invalid_super_for_inline_type()) {
     set_invalid_inline_super();
   }
 
-  if (!is_value_type() && invalid_inline_super() && (_super_klass == NULL || !_super_klass->invalid_inline_super())
+  if (!is_inline_type() && invalid_inline_super() && (_super_klass == NULL || !_super_klass->invalid_inline_super())
       && !_implements_identityObject && class_name() != vmSymbols::java_lang_IdentityObject()) {
     _temp_local_interfaces->append(SystemDictionary::IdentityObject_klass());
     _has_injected_identityObject = true;
   }
   int itfs_len = _temp_local_interfaces->length();
@@ -7107,22 +7105,22 @@
       // Pre-load value class
       Klass* klass = SystemDictionary::resolve_flattenable_field_or_fail(&fs,
           Handle(THREAD, _loader_data->class_loader()),
           _protection_domain, true, CHECK);
       assert(klass != NULL, "Sanity check");
-      assert(klass->access_flags().is_value_type(), "Value type expected");
+      assert(klass->access_flags().is_inline_type(), "Inline type expected");
       _has_flattenable_fields = true;
     }
   }
 
   _field_info = new FieldLayoutInfo();
   if (UseNewFieldLayout) {
     FieldLayoutBuilder lb(class_name(), super_klass(), _cp, _fields,
-        _parsed_annotations->is_contended(), is_value_type(),
+        _parsed_annotations->is_contended(), is_inline_type(),
         loader_data(), _protection_domain, _field_info);
     lb.build_layout(CHECK);
-    if (is_value_type()) {
+    if (is_inline_type()) {
       _alignment = lb.get_alignment();
       _first_field_offset = lb.get_first_field_offset();
       _exact_size_in_bytes = lb.get_exact_size_in_byte();
     }
   } else {
