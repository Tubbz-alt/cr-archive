diff a/src/hotspot/share/oops/valueKlass.cpp b/src/hotspot/share/oops/valueKlass.cpp
--- a/src/hotspot/share/oops/valueKlass.cpp
+++ b/src/hotspot/share/oops/valueKlass.cpp
@@ -47,11 +47,11 @@
 #include "runtime/thread.inline.hpp"
 #include "utilities/copy.hpp"
 
   // Constructor
 ValueKlass::ValueKlass(const ClassFileParser& parser)
-    : InstanceKlass(parser, InstanceKlass::_misc_kind_value_type, InstanceKlass::ID) {
+    : InstanceKlass(parser, InstanceKlass::_misc_kind_inline_type, InstanceKlass::ID) {
   _adr_valueklass_fixed_block = valueklass_static_block();
   // Addresses used for value type calling convention
   *((Array<SigEntry>**)adr_extended_sig()) = NULL;
   *((Array<VMRegPair>**)adr_return_regs()) = NULL;
   *((address*)adr_pack_handler()) = NULL;
@@ -152,11 +152,11 @@
 }
 
 oop ValueKlass::read_flattened_field(oop obj, int offset, TRAPS) {
   oop res = NULL;
   this->initialize(CHECK_NULL); // will throw an exception if in error state
-  if (is_empty_value()) {
+  if (is_empty_inline_type()) {
     res = (instanceOop)default_value();
   } else {
     Handle obj_h(THREAD, obj);
     res = allocate_instance_buffer(CHECK_NULL);
     value_copy_payload_to_new_oop(((char*)(oopDesc*)obj_h()) + offset, res);
@@ -167,11 +167,11 @@
 
 void ValueKlass::write_flattened_field(oop obj, int offset, oop value, TRAPS) {
   if (value == NULL) {
     THROW(vmSymbols::java_lang_NullPointerException());
   }
-  if (!is_empty_value()) {
+  if (!is_empty_inline_type()) {
     value_copy_oop_to_payload(value, ((char*)(oopDesc*)obj) + offset);
   }
 }
 
 // Arrays of...
