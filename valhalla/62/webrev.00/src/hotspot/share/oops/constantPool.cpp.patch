diff a/src/hotspot/share/oops/constantPool.cpp b/src/hotspot/share/oops/constantPool.cpp
--- a/src/hotspot/share/oops/constantPool.cpp
+++ b/src/hotspot/share/oops/constantPool.cpp
@@ -453,11 +453,11 @@
                  k->external_name());
     }
   }
 }
 
-void check_is_value_type(Klass* k, TRAPS) {
+void check_is_inline_type(Klass* k, TRAPS) {
   if (!k->is_value()) {
     THROW(vmSymbols::java_lang_IncompatibleClassChangeError());
   }
 }
 
@@ -493,37 +493,37 @@
     ShouldNotReachHere();
   }
 
   Handle mirror_handle;
   Symbol* name = this_cp->symbol_at(name_index);
-  bool value_type_signature = false;
+  bool inline_type_signature = false;
   if (name->is_Q_signature()) {
     name = name->fundamental_name(THREAD);
-    value_type_signature = true;
+    inline_type_signature = true;
   }
   Handle loader (THREAD, this_cp->pool_holder()->class_loader());
   Handle protection_domain (THREAD, this_cp->pool_holder()->protection_domain());
 
   Klass* k;
   {
     // Turn off the single stepping while doing class resolution
     JvmtiHideSingleStepping jhss(javaThread);
     k = SystemDictionary::resolve_or_fail(name, loader, protection_domain, true, THREAD);
   } //  JvmtiHideSingleStepping jhss(javaThread);
-  if (value_type_signature) {
+  if (inline_type_signature) {
     name->decrement_refcount();
   }
 
   if (!HAS_PENDING_EXCEPTION) {
     // preserve the resolved klass from unloading
     mirror_handle = Handle(THREAD, k->java_mirror());
     // Do access check for klasses
     verify_constant_pool_resolve(this_cp, k, THREAD);
   }
 
-  if (!HAS_PENDING_EXCEPTION && value_type_signature) {
-    check_is_value_type(k, THREAD);
+  if (!HAS_PENDING_EXCEPTION && inline_type_signature) {
+    check_is_inline_type(k, THREAD);
   }
 
   if (!HAS_PENDING_EXCEPTION) {
     Klass* bottom_klass = NULL;
     if (k->is_objArray_klass()) {
