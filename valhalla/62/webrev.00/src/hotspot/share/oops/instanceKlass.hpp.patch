diff a/src/hotspot/share/oops/instanceKlass.hpp b/src/hotspot/share/oops/instanceKlass.hpp
--- a/src/hotspot/share/oops/instanceKlass.hpp
+++ b/src/hotspot/share/oops/instanceKlass.hpp
@@ -150,11 +150,11 @@
   int _exact_size_in_bytes;
 
   friend class ValueKlass;
 };
 
-class ValueTypes {
+class InlineTypes {
 public:
   u2 _class_info_index;
   Symbol* _class_name;
 };
 
@@ -224,11 +224,11 @@
 
   // Resolved nest-host klass: either true nest-host or self if we are not nested.
   // By always being set it makes nest-member access checks simpler.
   InstanceKlass* _nest_host;
 
-  Array<ValueTypes>* _value_types;
+  Array<InlineTypes>* _inline_types;
 
   // The contents of the Record attribute.
   Array<RecordComponent*>* _record_components;
 
   // the source debug extension for this klass, NULL if not specified.
@@ -268,11 +268,11 @@
 
   static const unsigned _misc_kind_other        = 0; // concrete InstanceKlass
   static const unsigned _misc_kind_reference    = 1; // InstanceRefKlass
   static const unsigned _misc_kind_class_loader = 2; // InstanceClassLoaderKlass
   static const unsigned _misc_kind_mirror       = 3; // InstanceMirrorKlass
-  static const unsigned _misc_kind_value_type   = 4; // ValueKlass
+  static const unsigned _misc_kind_inline_type  = 4; // InlineKlass
 
   // Start after _misc_kind field.
   enum {
     _misc_rewritten                           = 1 << 3,  // methods rewritten.
     _misc_has_nonstatic_fields                = 1 << 4,  // for sizing with UseCompressedOops
@@ -289,12 +289,12 @@
     _misc_is_shared_platform_class            = 1 << 14, // defining class loader is platform class loader
     _misc_is_shared_app_class                 = 1 << 15, // defining class loader is app class loader
     _misc_has_resolved_methods                = 1 << 16, // resolved methods table entries added for this class
     _misc_is_being_redefined                  = 1 << 17, // used for locking redefinition
     _misc_has_contended_annotations           = 1 << 18, // has @Contended annotation
-    _misc_has_value_fields                    = 1 << 19, // has value fields and related embedded section is not empty
-    _misc_is_empty_value                      = 1 << 20, // empty value type
+    _misc_has_inline_fields                   = 1 << 19, // has inline fields and related embedded section is not empty
+    _misc_is_empty_inline_type                = 1 << 20, // empty inline type
     _misc_is_naturally_atomic                 = 1 << 21, // loaded/stored in one instruction
     _misc_is_declared_atomic                  = 1 << 22, // implements jl.NonTearable
     _misc_invalid_inline_super                = 1 << 23, // invalid super type for an inline type
     _misc_invalid_identity_super              = 1 << 24, // invalid super type for an identity type
     _misc_has_injected_identityObject         = 1 << 25  // IdentityObject has been injected by the JVM
@@ -423,22 +423,22 @@
     } else {
       _misc_flags &= ~_misc_has_nonstatic_fields;
     }
   }
 
-  bool has_value_fields() const          {
-    return (_misc_flags & _misc_has_value_fields) != 0;
+  bool has_inline_fields() const          {
+    return (_misc_flags & _misc_has_inline_fields) != 0;
   }
-  void set_has_value_fields()  {
-    _misc_flags |= _misc_has_value_fields;
+  void set_has_inline_fields()  {
+    _misc_flags |= _misc_has_inline_fields;
   }
 
-  bool is_empty_value() const {
-    return (_misc_flags & _misc_is_empty_value) != 0;
+  bool is_empty_inline_type() const {
+    return (_misc_flags & _misc_is_empty_inline_type) != 0;
   }
-  void set_is_empty_value() {
-    _misc_flags |= _misc_is_empty_value;
+  void set_is_empty_inline_type() {
+    _misc_flags |= _misc_is_empty_inline_type;
   }
 
   // Note:  The naturally_atomic property only applies to
   // inline classes; it is never true on identity classes.
   // The bit is placed on instanceKlass for convenience.
@@ -660,11 +660,11 @@
   // marking
   bool is_marked_dependent() const         { return _is_marked_dependent; }
   void set_is_marked_dependent(bool value) { _is_marked_dependent = value; }
 
   static ByteSize misc_flags_offset() { return in_ByteSize(offset_of(InstanceKlass, _misc_flags)); }
-  static u4 misc_flags_is_empty_value() { return _misc_is_empty_value; }
+  static u4 misc_flags_is_empty_inline_type() { return _misc_is_empty_inline_type; }
 
   // initialization (virtuals from Klass)
   bool should_be_initialized() const;  // means that initialize should be called
   void initialize(TRAPS);
   void link_class(TRAPS);
@@ -963,11 +963,11 @@
   // Other is anything that is not one of the more specialized kinds of InstanceKlass.
   bool is_other_instance_klass() const        { return is_kind(_misc_kind_other); }
   bool is_reference_instance_klass() const    { return is_kind(_misc_kind_reference); }
   bool is_mirror_instance_klass() const       { return is_kind(_misc_kind_mirror); }
   bool is_class_loader_instance_klass() const { return is_kind(_misc_kind_class_loader); }
-  bool is_value_type_klass()            const { return is_kind(_misc_kind_value_type); }
+  bool is_inline_type_klass()           const { return is_kind(_misc_kind_inline_type); }
 
 #if INCLUDE_JVMTI
 
   void init_previous_versions() {
     _previous_versions = NULL;
@@ -1198,28 +1198,28 @@
   static int header_size()            { return sizeof(InstanceKlass)/wordSize; }
 
   static int size(int vtable_length, int itable_length,
                   int nonstatic_oop_map_size,
                   bool is_interface, bool is_unsafe_anonymous, bool has_stored_fingerprint,
-                  int java_fields, bool is_value_type) {
+                  int java_fields, bool is_inline_type) {
     return align_metadata_size(header_size() +
            vtable_length +
            itable_length +
            nonstatic_oop_map_size +
            (is_interface ? (int)sizeof(Klass*)/wordSize : 0) +
            (is_unsafe_anonymous ? (int)sizeof(Klass*)/wordSize : 0) +
            (has_stored_fingerprint ? (int)sizeof(uint64_t*)/wordSize : 0) +
            (java_fields * (int)sizeof(Klass*)/wordSize) +
-           (is_value_type ? (int)sizeof(ValueKlassFixedBlock) : 0));
+           (is_inline_type ? (int)sizeof(ValueKlassFixedBlock) : 0));
   }
   int size() const                    { return size(vtable_length(),
                                                itable_length(),
                                                nonstatic_oop_map_size(),
                                                is_interface(),
                                                is_unsafe_anonymous(),
                                                has_stored_fingerprint(),
-                                               has_value_fields() ? java_fields_count() : 0,
+                                               has_inline_fields() ? java_fields_count() : 0,
                                                is_value());
   }
 
   intptr_t* start_of_itable()   const { return (intptr_t*)start_of_vtable() + vtable_length(); }
   intptr_t* end_of_itable()     const { return start_of_itable() + itable_length(); }
@@ -1277,11 +1277,11 @@
       return NULL;
     }
   }
 
   address adr_value_fields_klasses() const {
-    if (has_value_fields()) {
+    if (has_inline_fields()) {
       address adr_fing = adr_fingerprint();
       if (adr_fing != NULL) {
         return adr_fingerprint() + sizeof(u8);
       }
 
@@ -1300,26 +1300,26 @@
       return NULL;
     }
   }
 
   Klass* get_value_field_klass(int idx) const {
-    assert(has_value_fields(), "Sanity checking");
+    assert(has_inline_fields(), "Sanity checking");
     Klass* k = ((Klass**)adr_value_fields_klasses())[idx];
     assert(k != NULL, "Should always be set before being read");
-    assert(k->is_value(), "Must be a value type");
+    assert(k->is_value(), "Must be a inline type");
     return k;
   }
 
   Klass* get_value_field_klass_or_null(int idx) const {
-    assert(has_value_fields(), "Sanity checking");
+    assert(has_inline_fields(), "Sanity checking");
     Klass* k = ((Klass**)adr_value_fields_klasses())[idx];
-    assert(k == NULL || k->is_value(), "Must be a value type");
+    assert(k == NULL || k->is_value(), "Must be a inline type");
     return k;
   }
 
   void set_value_field_klass(int idx, Klass* k) {
-    assert(has_value_fields(), "Sanity checking");
+    assert(has_inline_fields(), "Sanity checking");
     assert(k != NULL, "Should not be set to NULL");
     assert(((Klass**)adr_value_fields_klasses())[idx] == NULL, "Should not be set twice");
     ((Klass**)adr_value_fields_klasses())[idx] = k;
   }
 
