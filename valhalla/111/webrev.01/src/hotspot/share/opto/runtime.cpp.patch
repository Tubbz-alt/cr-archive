diff a/src/hotspot/share/opto/runtime.cpp b/src/hotspot/share/opto/runtime.cpp
--- a/src/hotspot/share/opto/runtime.cpp
+++ b/src/hotspot/share/opto/runtime.cpp
@@ -44,15 +44,15 @@
 #include "interpreter/linkResolver.hpp"
 #include "logging/log.hpp"
 #include "logging/logStream.hpp"
 #include "memory/oopFactory.hpp"
 #include "memory/resourceArea.hpp"
+#include "oops/inlineArrayKlass.hpp"
+#include "oops/inlineArrayOop.inline.hpp"
 #include "oops/objArrayKlass.hpp"
 #include "oops/oop.inline.hpp"
 #include "oops/typeArrayOop.inline.hpp"
-#include "oops/valueArrayKlass.hpp"
-#include "oops/valueArrayOop.inline.hpp"
 #include "opto/ad.hpp"
 #include "opto/addnode.hpp"
 #include "opto/callnode.hpp"
 #include "opto/cfgnode.hpp"
 #include "opto/graphKit.hpp"
@@ -245,13 +245,13 @@
   assert(check_compiled_frame(thread), "incorrect caller");
 
   // Scavenge and allocate an instance.
   oop result;
 
-  if (array_type->is_valueArray_klass()) {
-    Klass* elem_type = ValueArrayKlass::cast(array_type)->element_klass();
-    result = oopFactory::new_valueArray(elem_type, len, THREAD);
+  if (array_type->is_inlineArray_klass()) {
+    Klass* elem_type = InlineArrayKlass::cast(array_type)->element_klass();
+    result = oopFactory::new_inlineArray(elem_type, len, THREAD);
   } else if (array_type->is_typeArray_klass()) {
     // The oopFactory likes to work with the element type.
     // (We could bypass the oopFactory, since it doesn't add much value.)
     BasicType elem_type = TypeArrayKlass::cast(array_type)->element_type();
     result = oopFactory::new_typeArray(elem_type, len, THREAD);
@@ -1765,11 +1765,11 @@
   const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+1,fields);
 
   return TypeFunc::make(domain, range);
 }
 
-JRT_LEAF(void, OptoRuntime::load_unknown_value(valueArrayOopDesc* array, int index, instanceOopDesc* buffer))
+JRT_LEAF(void, OptoRuntime::load_unknown_value(inlineArrayOopDesc* array, int index, instanceOopDesc* buffer))
 {
   array->value_copy_from_index(index, buffer);
 }
 JRT_END
 
@@ -1790,11 +1790,11 @@
   const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+0, fields);
 
   return TypeFunc::make(domain, range);
 }
 
-JRT_LEAF(void, OptoRuntime::store_unknown_value(instanceOopDesc* buffer, valueArrayOopDesc* array, int index))
+JRT_LEAF(void, OptoRuntime::store_unknown_value(instanceOopDesc* buffer, inlineArrayOopDesc* array, int index))
 {
   assert(buffer != NULL, "can't store null into flat array");
   array->value_copy_to_index(buffer, index);
 }
 JRT_END
