diff a/src/hotspot/share/ci/ciArray.hpp b/src/hotspot/share/ci/ciArray.hpp
--- a/src/hotspot/share/ci/ciArray.hpp
+++ b/src/hotspot/share/ci/ciArray.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -27,13 +27,13 @@
 
 #include "ci/ciArrayKlass.hpp"
 #include "ci/ciConstant.hpp"
 #include "ci/ciObject.hpp"
 #include "oops/arrayOop.hpp"
+#include "oops/inlineArrayOop.hpp"
 #include "oops/objArrayOop.hpp"
 #include "oops/typeArrayOop.hpp"
-#include "oops/valueArrayOop.hpp"
 
 // ciArray
 //
 // This class represents an arrayOop in the HotSpot virtual
 // machine.
@@ -43,11 +43,11 @@
 
 protected:
   ciArray(    arrayHandle h_a) : ciObject(h_a), _length(h_a()->length()) {}
   ciArray( objArrayHandle h_a) : ciObject(h_a), _length(h_a()->length()) {}
   ciArray(typeArrayHandle h_a) : ciObject(h_a), _length(h_a()->length()) {}
-  ciArray(valueArrayHandle h_a): ciObject(h_a), _length(h_a()->length()) {}
+  ciArray(inlineArrayHandle h_a): ciObject(h_a), _length(h_a()->length()) {}
 
   ciArray(ciKlass* klass, int len) : ciObject(klass), _length(len) {}
 
   arrayOop get_arrayOop() const { return (arrayOop)get_oop(); }
 
