diff a/src/hotspot/share/ci/ciValueArrayKlass.cpp b/src/hotspot/share/ci/ciValueArrayKlass.cpp
--- a/src/hotspot/share/ci/ciValueArrayKlass.cpp
+++ b/src/hotspot/share/ci/ciValueArrayKlass.cpp
@@ -27,11 +27,11 @@
 #include "ci/ciValueArrayKlass.hpp"
 #include "ci/ciValueKlass.hpp"
 #include "ci/ciSymbol.hpp"
 #include "ci/ciUtilities.hpp"
 #include "ci/ciUtilities.inline.hpp"
-#include "oops/valueArrayKlass.hpp"
+#include "oops/inlineArrayKlass.hpp"
 
 // ciValueArrayKlass
 //
 // This class represents a Klass* in the HotSpot virtual machine
 // whose Klass part is a ValueArrayKlass.
@@ -39,11 +39,11 @@
 // ------------------------------------------------------------------
 // ciValueArrayKlass::ciValueArrayKlass
 //
 // Constructor for loaded value array klasses.
 ciValueArrayKlass::ciValueArrayKlass(Klass* h_k) : ciArrayKlass(h_k) {
-  assert(get_Klass()->is_valueArray_klass(), "wrong type");
+  assert(get_Klass()->is_inlineArray_klass(), "wrong type");
   InlineKlass* element_Klass = get_ValueArrayKlass()->element_klass();
   _base_element_klass = CURRENT_ENV->get_klass(element_Klass);
   assert(_base_element_klass->is_valuetype(), "bad base klass");
   if (dimension() == 1) {
     _element_klass = _base_element_klass;
@@ -125,11 +125,11 @@
 // ------------------------------------------------------------------
 // ciValueArrayKlass::make_impl
 //
 // Implementation of make.
 ciValueArrayKlass* ciValueArrayKlass::make_impl(ciKlass* element_klass) {
-  assert(ValueArrayFlatten, "should only be used for flattened value type arrays");
+  assert(InlineArrayFlatten, "should only be used for flattened value type arrays");
   assert(element_klass->is_valuetype(), "element type must be value type");
   assert(element_klass->is_loaded(), "unloaded Q klasses are represented by ciInstanceKlass");
   {
     EXCEPTION_CONTEXT;
     // The element klass is loaded
