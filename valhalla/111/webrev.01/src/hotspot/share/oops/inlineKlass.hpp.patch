diff a/src/hotspot/share/oops/inlineKlass.hpp b/src/hotspot/share/oops/inlineKlass.hpp
--- a/src/hotspot/share/oops/inlineKlass.hpp
+++ b/src/hotspot/share/oops/inlineKlass.hpp
@@ -98,24 +98,24 @@
   address adr_default_value_offset() const {
     assert(_adr_inlineklass_fixed_block != NULL, "Should have been initialized");
     return ((address)_adr_inlineklass_fixed_block) + in_bytes(default_value_offset_offset());
   }
 
-  address adr_value_array_klass() const {
+  address adr_inline_array_klass() const {
     assert(_adr_inlineklass_fixed_block != NULL, "Should have been initialized");
-    return ((address)_adr_inlineklass_fixed_block) + in_bytes(byte_offset_of(InlineKlassFixedBlock, _value_array_klass));
+    return ((address)_adr_inlineklass_fixed_block) + in_bytes(byte_offset_of(InlineKlassFixedBlock, _inline_array_klass));
   }
 
-  Klass* get_value_array_klass() const {
-    return *(Klass**)adr_value_array_klass();
+  Klass* get_inline_array_klass() const {
+    return *(Klass**)adr_inline_array_klass();
   }
 
-  Klass* acquire_value_array_klass() const {
-    return Atomic::load_acquire((Klass**)adr_value_array_klass());
+  Klass* acquire_inline_array_klass() const {
+    return Atomic::load_acquire((Klass**)adr_inline_array_klass());
   }
 
-  Klass* allocate_value_array_klass(TRAPS);
+  Klass* allocate_inline_array_klass(TRAPS);
 
   address adr_alignment() const {
     assert(_adr_inlineklass_fixed_block != NULL, "Should have been initialized");
     return ((address)_adr_inlineklass_fixed_block) + in_bytes(byte_offset_of(InlineKlassFixedBlock, _alignment));
   }
@@ -175,11 +175,11 @@
 
   // Returns the array class with this class as element type
   Klass* array_klass_impl(bool or_null, TRAPS);
 
   // Specifically flat array klass
-  Klass* value_array_klass(bool or_null, int rank, TRAPS);
+  Klass* inline_array_klass(bool or_null, int rank, TRAPS);
 
  public:
   // Type testing
   bool is_inline_klass_slow() const        { return true; }
 
