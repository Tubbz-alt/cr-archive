diff a/src/hotspot/share/oops/constantPool.cpp b/src/hotspot/share/oops/constantPool.cpp
--- a/src/hotspot/share/oops/constantPool.cpp
+++ b/src/hotspot/share/oops/constantPool.cpp
@@ -43,16 +43,16 @@
 #include "memory/resourceArea.hpp"
 #include "memory/universe.hpp"
 #include "oops/array.hpp"
 #include "oops/constantPool.inline.hpp"
 #include "oops/cpCache.inline.hpp"
+#include "oops/inlineArrayKlass.hpp"
 #include "oops/instanceKlass.hpp"
 #include "oops/objArrayKlass.hpp"
 #include "oops/objArrayOop.inline.hpp"
 #include "oops/oop.inline.hpp"
 #include "oops/typeArrayOop.inline.hpp"
-#include "oops/valueArrayKlass.hpp"
 #include "runtime/atomic.hpp"
 #include "runtime/handles.inline.hpp"
 #include "runtime/init.hpp"
 #include "runtime/javaCalls.hpp"
 #include "runtime/signature.hpp"
@@ -553,12 +553,12 @@
     Klass* bottom_klass = NULL;
     if (k->is_objArray_klass()) {
       bottom_klass = ObjArrayKlass::cast(k)->bottom_klass();
       assert(bottom_klass != NULL, "Should be set");
       assert(bottom_klass->is_instance_klass() || bottom_klass->is_typeArray_klass(), "Sanity check");
-    } else if (k->is_valueArray_klass()) {
-      bottom_klass = ValueArrayKlass::cast(k)->element_klass();
+    } else if (k->is_inlineArray_klass()) {
+      bottom_klass = InlineArrayKlass::cast(k)->element_klass();
       assert(bottom_klass != NULL, "Should be set");
     }
   }
 
   // Failed to resolve class. We must record the errors so that subsequent attempts
