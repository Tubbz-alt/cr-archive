diff a/src/hotspot/share/memory/oopFactory.cpp b/src/hotspot/share/memory/oopFactory.cpp
--- a/src/hotspot/share/memory/oopFactory.cpp
+++ b/src/hotspot/share/memory/oopFactory.cpp
@@ -150,14 +150,14 @@
 }
 
 objArrayHandle oopFactory::copy_valueArray_to_objArray(valueArrayHandle array, TRAPS) {
   int len = array->length();
   ValueArrayKlass* vak = ValueArrayKlass::cast(array->klass());
-  objArrayHandle oarray = new_objArray_handle(vak->element_klass()->super(),
-                                              array->length(), CHECK_(objArrayHandle()));
-  vak->copy_array(array(), 0, oarray(), 0, len, CHECK_(objArrayHandle()));
-  return oarray;
+  objArrayOop oarray = new_objectArray(array->length(), CHECK_(objArrayHandle()));
+  objArrayHandle oarrayh(THREAD, oarray);
+  vak->copy_array(array(), 0, oarrayh(), 0, len, CHECK_(objArrayHandle()));
+  return oarrayh;
 }
 
 objArrayHandle  oopFactory::ensure_objArray(oop array, TRAPS) {
   if (array != NULL && array->is_valueArray()) {
     return copy_valueArray_to_objArray(valueArrayHandle(THREAD, valueArrayOop(array)), THREAD);
diff a/src/hotspot/share/oops/arrayStorageProperties.cpp b/src/hotspot/share/oops/arrayStorageProperties.cpp
--- a/src/hotspot/share/oops/arrayStorageProperties.cpp
+++ b/src/hotspot/share/oops/arrayStorageProperties.cpp
@@ -28,10 +28,9 @@
 #include "utilities/debug.hpp"
 
 STATIC_ASSERT((int)ArrayStorageProperties::nof_oop_properties <= (int)oopDesc::storage_props_nof_bits);
 
 const ArrayStorageProperties ArrayStorageProperties::empty     = ArrayStorageProperties(empty_value);
-const ArrayStorageProperties ArrayStorageProperties::flattened = ArrayStorageProperties(flattened_value);
 const ArrayStorageProperties ArrayStorageProperties::null_free = ArrayStorageProperties(null_free_value);
 const ArrayStorageProperties ArrayStorageProperties::flattened_and_null_free =
         ArrayStorageProperties(flattened_value | null_free_value);
 
diff a/src/hotspot/share/oops/arrayStorageProperties.hpp b/src/hotspot/share/oops/arrayStorageProperties.hpp
--- a/src/hotspot/share/oops/arrayStorageProperties.hpp
+++ b/src/hotspot/share/oops/arrayStorageProperties.hpp
@@ -49,30 +49,21 @@
   ArrayStorageProperties() : _flags(empty_value) {};
   ArrayStorageProperties(uint8_t flags): _flags(flags) {};
 
   bool is_empty() const { return _flags == empty_value; }
 
-  void clear_flattened()    { clear_flags_bits(flattened_value); }
-
   bool is_flattened() const { return test_flags_bit(flattened_bit); }
-  void set_flattened()      { set_flags_bits(flattened_value); }
 
   bool is_null_free() const { return test_flags_bit(null_free_bit); }
-  void set_null_free()      { set_flags_bits(null_free_value); }
 
   uint8_t value() const { return _flags; }
   template <typename T> T encode(int shift) const { return static_cast<T>(_flags) << shift; }
 
   // Well-known constants...
   static const ArrayStorageProperties empty;
-  static const ArrayStorageProperties flattened;
   static const ArrayStorageProperties null_free;
   static const ArrayStorageProperties flattened_and_null_free;
 
-  static ArrayStorageProperties for_signature(Symbol* sig) {
-    return (sig->is_Q_array_signature() || sig->is_Q_signature()) ?
-      ArrayStorageProperties::flattened_and_null_free : ArrayStorageProperties::empty;
-  }
 };
 
 
 #endif //SHARE_OOPS_ARRAYSTORAGEPROPERTIES_HPP
