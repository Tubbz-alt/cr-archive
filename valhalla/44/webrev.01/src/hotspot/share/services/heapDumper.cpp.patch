diff a/src/hotspot/share/services/heapDumper.cpp b/src/hotspot/share/services/heapDumper.cpp
--- a/src/hotspot/share/services/heapDumper.cpp
+++ b/src/hotspot/share/services/heapDumper.cpp
@@ -1073,11 +1073,11 @@
   dump_instance_field_descriptors(writer, ik);
 
   writer->end_sub_record();
 
   // array classes
-  k = k->array_klass_or_null(ArrayStorageProperties::empty);
+  k = k->array_klass_or_null();
   while (k != NULL) {
     assert(k->is_objArray_klass(), "not an ObjArrayKlass");
 
     u4 size = 1 + sizeof(address) + 4 + 6 * sizeof(address) + 4 + 2 + 2 + 2;
     writer->start_sub_record(HPROF_GC_CLASS_DUMP, size);
@@ -1101,11 +1101,11 @@
     writer->write_u2(0);             // instance fields
 
     writer->end_sub_record();
 
     // get the array class for the next rank
-    k = k->array_klass_or_null(ArrayStorageProperties::empty);
+    k = k->array_klass_or_null();
   }
 }
 
 // creates HPROF_GC_CLASS_DUMP record for a given primitive array
 // class (and each multi-dimensional array class too)
@@ -1136,11 +1136,11 @@
     writer->write_u2(0);             // instance fields
 
     writer->end_sub_record();
 
     // get the array class for the next rank
-    k = klass->array_klass_or_null(ArrayStorageProperties::empty);
+    k = klass->array_klass_or_null();
   }
 }
 
 // Hprof uses an u4 as record length field,
 // which means we need to truncate arrays that are too long.
@@ -1635,11 +1635,11 @@
     // class name ID
     Symbol* name = klass->name();
     writer()->write_symbolID(name);
 
     // write a LOAD_CLASS record for the array type (if it exists)
-    k = klass->array_klass_or_null(ArrayStorageProperties::empty);
+    k = klass->array_klass_or_null();
   } while (k != NULL);
 }
 
 // writes a HPROF_GC_CLASS_DUMP record for the given class
 void VM_HeapDumper::do_class_dump(Klass* k) {
