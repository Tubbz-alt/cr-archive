diff a/src/hotspot/share/memory/oopFactory.hpp b/src/hotspot/share/memory/oopFactory.hpp
--- a/src/hotspot/share/memory/oopFactory.hpp
+++ b/src/hotspot/share/memory/oopFactory.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -58,14 +58,14 @@
   static objArrayOop     new_objArray(Klass* klass, int length, TRAPS);
 
   // Value arrays...
   // LWorld:
   //    - Q-type signature allocation should use this path.
-  //    - L-type signature allocation should use new_objArray (even with value type elements)
+  //    - L-type signature allocation should use new_objArray
   //
-  // Method specifically creates ArrayStorageProperties::null_free and possibly flattened if possible
-  // i.e. valueArrayOop if flattening can be done, else objArrayOop with "null free" storage properties
+  // Method specifically null free and possibly flattened if possible
+  // i.e. valueArrayOop if flattening can be done, else "null free" objArrayOop
   static arrayOop        new_valueArray(Klass* klass, int length, TRAPS);
 
   // Helper conversions from value to obj array...
   static objArrayHandle  copy_valueArray_to_objArray(valueArrayHandle array, TRAPS);
   static objArrayHandle  ensure_objArray(oop array, TRAPS); // copy into new objArray if not already an objArray
