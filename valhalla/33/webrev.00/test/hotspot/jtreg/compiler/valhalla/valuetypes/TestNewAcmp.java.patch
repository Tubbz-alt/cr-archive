diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNewAcmp.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNewAcmp.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNewAcmp.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNewAcmp.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -50,11 +50,16 @@
 
 interface MyInterface {
 
 }
 
-inline class MyValue1 implements MyInterface {
+abstract class MyAbstract implements MyInterface {
+
+
+}
+
+inline class MyValue1 extends MyAbstract {
     final int x;
 
     MyValue1(int x) {
         this.x = x;
     }
@@ -66,11 +71,11 @@
     static MyValue1 setX(MyValue1 v, int x) {
         return new MyValue1(x);
     }
 }
 
-inline class MyValue2 implements MyInterface {
+inline class MyValue2 extends MyAbstract {
     final int x;
 
     MyValue2(int x) {
         this.x = x;
     }
@@ -82,11 +87,11 @@
     static MyValue2 setX(MyValue2 v, int x) {
         return new MyValue2(x);
     }
 }
 
-class MyObject implements MyInterface {
+class MyObject extends MyAbstract {
     int x;
 }
 
 // Mark test methods that return false if the argument is null
 @Retention(RetentionPolicy.RUNTIME)
@@ -378,10 +383,37 @@
     @FalseIfNull
     public boolean testEq21_6(MyInterface u1, MyInterface u2) {
         return getNotNull(u1) == getNotNull(u2); // new acmp without null check
     }
 
+    public boolean testEq21_7(MyAbstract u1, MyAbstract u2) {
+        return get(u1) == u2; // new acmp
+    }
+
+    public boolean testEq21_8(MyAbstract u1, MyAbstract u2) {
+        return u1 == get(u2); // new acmp
+    }
+
+    public boolean testEq21_9(MyAbstract u1, MyAbstract u2) {
+        return get(u1) == get(u2); // new acmp
+    }
+
+    @FalseIfNull
+    public boolean testEq21_10(MyAbstract u1, MyAbstract u2) {
+        return getNotNull(u1) == u2; // new acmp without null check
+    }
+
+    @FalseIfNull
+    public boolean testEq21_11(MyAbstract u1, MyAbstract u2) {
+        return u1 == getNotNull(u2); // new acmp without null check
+    }
+
+    @FalseIfNull
+    public boolean testEq21_12(MyAbstract u1, MyAbstract u2) {
+        return getNotNull(u1) == getNotNull(u2); // new acmp without null check
+    }
+
     public boolean testEq22_1(MyValue1 v, MyInterface u) {
         return get(v) == u; // only true if both null
     }
 
     public boolean testEq22_2(MyValue1 v, MyInterface u) {
@@ -390,10 +422,22 @@
 
     public boolean testEq22_3(MyValue1 v, MyInterface u) {
         return get(v) == get(u); // only true if both null
     }
 
+    public boolean testEq22_4(MyValue1 v, MyAbstract u) {
+        return get(v) == u; // only true if both null
+    }
+
+    public boolean testEq22_5(MyValue1 v, MyAbstract u) {
+        return (Object)v == get(u); // only true if both null
+    }
+
+    public boolean testEq22_6(MyValue1 v, MyAbstract u) {
+        return get(v) == get(u); // only true if both null
+    }
+
     public boolean testEq23_1(MyInterface u, MyValue1 v) {
         return get(u) == (Object)v; // only true if both null
     }
 
     public boolean testEq23_2(MyInterface u, MyValue1 v) {
@@ -402,10 +446,22 @@
 
     public boolean testEq23_3(MyInterface u, MyValue1 v) {
         return get(u) == get(v); // only true if both null
     }
 
+    public boolean testEq23_4(MyAbstract u, MyValue1 v) {
+        return get(u) == (Object)v; // only true if both null
+    }
+
+    public boolean testEq23_5(MyAbstract u, MyValue1 v) {
+        return u == get(v); // only true if both null
+    }
+
+    public boolean testEq23_6(MyAbstract u, MyValue1 v) {
+        return get(u) == get(v); // only true if both null
+    }
+
     public boolean testEq24_1(MyValue1 v, MyInterface u) {
         return getNotNull(v) == u; // false
     }
 
     public boolean testEq24_2(MyValue1 v, MyInterface u) {
@@ -414,10 +470,22 @@
 
     public boolean testEq24_3(MyValue1 v, MyInterface u) {
         return getNotNull(v) == getNotNull(u); // false
     }
 
+    public boolean testEq24_4(MyValue1 v, MyAbstract u) {
+        return getNotNull(v) == u; // false
+    }
+
+    public boolean testEq24_5(MyValue1 v, MyAbstract u) {
+        return (Object)v == getNotNull(u); // false
+    }
+
+    public boolean testEq24_6(MyValue1 v, MyAbstract u) {
+        return getNotNull(v) == getNotNull(u); // false
+    }
+
     public boolean testEq25_1(MyInterface u, MyValue1 v) {
         return getNotNull(u) == (Object)v; // false
     }
 
     public boolean testEq25_2(MyInterface u, MyValue1 v) {
@@ -426,10 +494,22 @@
 
     public boolean testEq25_3(MyInterface u, MyValue1 v) {
         return getNotNull(u) == getNotNull(v); // false
     }
 
+    public boolean testEq25_4(MyAbstract u, MyValue1 v) {
+        return getNotNull(u) == (Object)v; // false
+    }
+
+    public boolean testEq25_5(MyAbstract u, MyValue1 v) {
+        return u == getNotNull(v); // false
+    }
+
+    public boolean testEq25_6(MyAbstract u, MyValue1 v) {
+        return getNotNull(u) == getNotNull(v); // false
+    }
+
     public boolean testEq26_1(MyInterface u, MyObject o) {
         return get(u) == o; // old acmp
     }
 
     public boolean testEq26_2(MyInterface u, MyObject o) {
@@ -438,10 +518,22 @@
 
     public boolean testEq26_3(MyInterface u, MyObject o) {
         return get(u) == get(o); // old acmp
     }
 
+    public boolean testEq26_4(MyAbstract u, MyObject o) {
+        return get(u) == o; // old acmp
+    }
+
+    public boolean testEq26_5(MyAbstract u, MyObject o) {
+        return u == get(o); // old acmp
+    }
+
+    public boolean testEq26_6(MyAbstract u, MyObject o) {
+        return get(u) == get(o); // old acmp
+    }
+
     public boolean testEq27_1(MyObject o, MyInterface u) {
         return get(o) == u; // old acmp
     }
 
     public boolean testEq27_2(MyObject o, MyInterface u) {
@@ -450,10 +542,22 @@
 
     public boolean testEq27_3(MyObject o, MyInterface u) {
         return get(o) == get(u); // old acmp
     }
 
+    public boolean testEq27_4(MyObject o, MyAbstract u) {
+        return get(o) == u; // old acmp
+    }
+
+    public boolean testEq27_5(MyObject o, MyAbstract u) {
+        return o == get(u); // old acmp
+    }
+
+    public boolean testEq27_6(MyObject o, MyAbstract u) {
+        return get(o) == get(u); // old acmp
+    }
+
     public boolean testEq28_1(MyInterface[] a, MyInterface u) {
         return get(a) == u; // old acmp
     }
 
     public boolean testEq28_2(MyInterface[] a, MyInterface u) {
@@ -462,10 +566,22 @@
 
     public boolean testEq28_3(MyInterface[] a, MyInterface u) {
         return get(a) == get(u); // old acmp
     }
 
+    public boolean testEq28_4(MyAbstract[] a, MyAbstract u) {
+        return get(a) == u; // old acmp
+    }
+
+    public boolean testEq28_5(MyAbstract[] a, MyAbstract u) {
+        return a == get(u); // old acmp
+    }
+
+    public boolean testEq28_6(MyAbstract[] a, MyAbstract u) {
+        return get(a) == get(u); // old acmp
+    }
+
     public boolean testEq29_1(MyInterface u, MyInterface[] a) {
         return get(u) == a; // old acmp
     }
 
     public boolean testEq29_2(MyInterface u, MyInterface[] a) {
@@ -474,10 +590,22 @@
 
     public boolean testEq29_3(MyInterface u, MyInterface[] a) {
         return get(u) == get(a); // old acmp
     }
 
+    public boolean testEq29_4(MyAbstract u, MyAbstract[] a) {
+        return get(u) == a; // old acmp
+    }
+
+    public boolean testEq29_5(MyAbstract u, MyAbstract[] a) {
+        return u == get(a); // old acmp
+    }
+
+    public boolean testEq29_6(MyAbstract u, MyAbstract[] a) {
+        return get(u) == get(a); // old acmp
+    }
+
     public boolean testEq30_1(MyInterface[] a, MyValue1 v) {
         return get(a) == (Object)v; // only true if both null
     }
 
     public boolean testEq30_2(MyInterface[] a, MyValue1 v) {
@@ -486,10 +614,22 @@
 
     public boolean testEq30_3(MyInterface[] a, MyValue1 v) {
         return get(a) == get(v); // only true if both null
     }
 
+    public boolean testEq30_4(MyAbstract[] a, MyValue1 v) {
+        return get(a) == (Object)v; // only true if both null
+    }
+
+    public boolean testEq30_5(MyAbstract[] a, MyValue1 v) {
+        return a == get(v); // only true if both null
+    }
+
+    public boolean testEq30_6(MyAbstract[] a, MyValue1 v) {
+        return get(a) == get(v); // only true if both null
+    }
+
     public boolean testEq31_1(MyValue1 v, MyInterface[] a) {
         return get(v) == a; // only true if both null
     }
 
     public boolean testEq31_2(MyValue1 v, MyInterface[] a) {
@@ -498,10 +638,22 @@
 
     public boolean testEq31_3(MyValue1 v, MyInterface[] a) {
         return get(v) == get(a); // only true if both null
     }
 
+    public boolean testEq31_4(MyValue1 v, MyAbstract[] a) {
+        return get(v) == a; // only true if both null
+    }
+
+    public boolean testEq31_5(MyValue1 v, MyAbstract[] a) {
+        return (Object)v == get(a); // only true if both null
+    }
+
+    public boolean testEq31_6(MyValue1 v, MyAbstract[] a) {
+        return get(v) == get(a); // only true if both null
+    }
+
     public boolean testEq32_1(MyInterface[] a, MyValue1 v) {
         return getNotNull(a) == (Object)v; // false
     }
 
     public boolean testEq32_2(MyInterface[] a, MyValue1 v) {
@@ -510,10 +662,22 @@
 
     public boolean testEq32_3(MyInterface[] a, MyValue1 v) {
         return getNotNull(a) == getNotNull(v); // false
     }
 
+    public boolean testEq32_4(MyAbstract[] a, MyValue1 v) {
+        return getNotNull(a) == (Object)v; // false
+    }
+
+    public boolean testEq32_5(MyAbstract[] a, MyValue1 v) {
+        return a == getNotNull(v); // false
+    }
+
+    public boolean testEq32_6(MyAbstract[] a, MyValue1 v) {
+        return getNotNull(a) == getNotNull(v); // false
+    }
+
     public boolean testEq33_1(MyValue1 v, MyInterface[] a) {
         return getNotNull(v) == a; // false
     }
 
     public boolean testEq33_2(MyValue1 v, MyInterface[] a) {
@@ -522,10 +686,22 @@
 
     public boolean testEq33_3(MyValue1 v, MyInterface[] a) {
         return getNotNull(v) == getNotNull(a); // false
     }
 
+    public boolean testEq33_4(MyValue1 v, MyAbstract[] a) {
+        return getNotNull(v) == a; // false
+    }
+
+    public boolean testEq33_5(MyValue1 v, MyAbstract[] a) {
+        return (Object)v == getNotNull(a); // false
+    }
+
+    public boolean testEq33_6(MyValue1 v, MyAbstract[] a) {
+        return getNotNull(v) == getNotNull(a); // false
+    }
+
 
     // Null tests
 
     public boolean testNull01_1(MyValue1 v) {
         return (Object)v == null; // old acmp
@@ -637,10 +813,26 @@
 
     public boolean testNull07_4(MyInterface u) {
         return get(u) == get((Object)null); // old acmp
     }
 
+    public boolean testNull07_5(MyAbstract u) {
+        return u == null; // old acmp
+    }
+
+    public boolean testNull07_6(MyAbstract u) {
+        return get(u) == null; // old acmp
+    }
+
+    public boolean testNull07_7(MyAbstract u) {
+        return u == get((Object)null); // old acmp
+    }
+
+    public boolean testNull07_8(MyAbstract u) {
+        return get(u) == get((Object)null); // old acmp
+    }
+
     public boolean testNull08_1(MyInterface u) {
         return null == u; // old acmp
     }
 
     public boolean testNull08_2(MyInterface u) {
@@ -653,10 +845,26 @@
 
     public boolean testNull08_4(MyInterface u) {
         return get((Object)null) == get(u); // old acmp
     }
 
+    public boolean testNull08_5(MyAbstract u) {
+        return null == u; // old acmp
+    }
+
+    public boolean testNull08_6(MyAbstract u) {
+        return get((Object)null) == u; // old acmp
+    }
+
+    public boolean testNull08_7(MyAbstract u) {
+        return null == get(u); // old acmp
+    }
+
+    public boolean testNull08_8(MyAbstract u) {
+        return get((Object)null) == get(u); // old acmp
+    }
+
     // Same tests as above but negated
 
     public boolean testNotEq01_1(Object u1, Object u2) {
         return get(u1) != u2; // new acmp
     }
@@ -937,10 +1145,37 @@
     @TrueIfNull
     public boolean testNotEq21_6(MyInterface u1, MyInterface u2) {
         return getNotNull(u1) != getNotNull(u2); // new acmp without null check
     }
 
+    public boolean testNotEq21_7(MyAbstract u1, MyAbstract u2) {
+        return get(u1) != u2; // new acmp
+    }
+
+    public boolean testNotEq21_8(MyAbstract u1, MyAbstract u2) {
+        return u1 != get(u2); // new acmp
+    }
+
+    public boolean testNotEq21_9(MyAbstract u1, MyAbstract u2) {
+        return get(u1) != get(u2); // new acmp
+    }
+
+    @TrueIfNull
+    public boolean testNotEq21_10(MyAbstract u1, MyAbstract u2) {
+        return getNotNull(u1) != u2; // new acmp without null check
+    }
+
+    @TrueIfNull
+    public boolean testNotEq21_11(MyAbstract u1, MyAbstract u2) {
+        return u1 != getNotNull(u2); // new acmp without null check
+    }
+
+    @TrueIfNull
+    public boolean testNotEq21_12(MyAbstract u1, MyAbstract u2) {
+        return getNotNull(u1) != getNotNull(u2); // new acmp without null check
+    }
+
     public boolean testNotEq22_1(MyValue1 v, MyInterface u) {
         return get(v) != u; // only false if both null
     }
 
     public boolean testNotEq22_2(MyValue1 v, MyInterface u) {
@@ -949,10 +1184,22 @@
 
     public boolean testNotEq22_3(MyValue1 v, MyInterface u) {
         return get(v) != get(u); // only false if both null
     }
 
+    public boolean testNotEq22_4(MyValue1 v, MyAbstract u) {
+        return get(v) != u; // only false if both null
+    }
+
+    public boolean testNotEq22_5(MyValue1 v, MyAbstract u) {
+        return (Object)v != get(u); // only false if both null
+    }
+
+    public boolean testNotEq22_6(MyValue1 v, MyAbstract u) {
+        return get(v) != get(u); // only false if both null
+    }
+
     public boolean testNotEq23_1(MyInterface u, MyValue1 v) {
         return get(u) != (Object)v; // only false if both null
     }
 
     public boolean testNotEq23_2(MyInterface u, MyValue1 v) {
@@ -961,10 +1208,22 @@
 
     public boolean testNotEq23_3(MyInterface u, MyValue1 v) {
         return get(u) != get(v); // only false if both null
     }
 
+    public boolean testNotEq23_4(MyAbstract u, MyValue1 v) {
+        return get(u) != (Object)v; // only false if both null
+    }
+
+    public boolean testNotEq23_5(MyAbstract u, MyValue1 v) {
+        return u != get(v); // only false if both null
+    }
+
+    public boolean testNotEq23_6(MyAbstract u, MyValue1 v) {
+        return get(u) != get(v); // only false if both null
+    }
+
     public boolean testNotEq24_1(MyValue1 v, MyInterface u) {
         return getNotNull(v) != u; // true
     }
 
     public boolean testNotEq24_2(MyValue1 v, MyInterface u) {
@@ -973,10 +1232,22 @@
 
     public boolean testNotEq24_3(MyValue1 v, MyInterface u) {
         return getNotNull(v) != getNotNull(u); // true
     }
 
+    public boolean testNotEq24_4(MyValue1 v, MyAbstract u) {
+        return getNotNull(v) != u; // true
+    }
+
+    public boolean testNotEq24_5(MyValue1 v, MyAbstract u) {
+        return (Object)v != getNotNull(u); // true
+    }
+
+    public boolean testNotEq24_6(MyValue1 v, MyAbstract u) {
+        return getNotNull(v) != getNotNull(u); // true
+    }
+
     public boolean testNotEq25_1(MyInterface u, MyValue1 v) {
         return getNotNull(u) != (Object)v; // true
     }
 
     public boolean testNotEq25_2(MyInterface u, MyValue1 v) {
@@ -985,10 +1256,22 @@
 
     public boolean testNotEq25_3(MyInterface u, MyValue1 v) {
         return getNotNull(u) != getNotNull(v); // true
     }
 
+    public boolean testNotEq25_4(MyAbstract u, MyValue1 v) {
+        return getNotNull(u) != (Object)v; // true
+    }
+
+    public boolean testNotEq25_5(MyAbstract u, MyValue1 v) {
+        return u != getNotNull(v); // true
+    }
+
+    public boolean testNotEq25_6(MyAbstract u, MyValue1 v) {
+        return getNotNull(u) != getNotNull(v); // true
+    }
+
     public boolean testNotEq26_1(MyInterface u, MyObject o) {
         return get(u) != o; // old acmp
     }
 
     public boolean testNotEq26_2(MyInterface u, MyObject o) {
@@ -997,10 +1280,22 @@
 
     public boolean testNotEq26_3(MyInterface u, MyObject o) {
         return get(u) != get(o); // old acmp
     }
 
+    public boolean testNotEq26_4(MyAbstract u, MyObject o) {
+        return get(u) != o; // old acmp
+    }
+
+    public boolean testNotEq26_5(MyAbstract u, MyObject o) {
+        return u != get(o); // old acmp
+    }
+
+    public boolean testNotEq26_6(MyAbstract u, MyObject o) {
+        return get(u) != get(o); // old acmp
+    }
+
     public boolean testNotEq27_1(MyObject o, MyInterface u) {
         return get(o) != u; // old acmp
     }
 
     public boolean testNotEq27_2(MyObject o, MyInterface u) {
@@ -1009,10 +1304,22 @@
 
     public boolean testNotEq27_3(MyObject o, MyInterface u) {
         return get(o) != get(u); // old acmp
     }
 
+    public boolean testNotEq27_4(MyObject o, MyAbstract u) {
+        return get(o) != u; // old acmp
+    }
+
+    public boolean testNotEq27_5(MyObject o, MyAbstract u) {
+        return o != get(u); // old acmp
+    }
+
+    public boolean testNotEq27_6(MyObject o, MyAbstract u) {
+        return get(o) != get(u); // old acmp
+    }
+
     public boolean testNotEq28_1(MyInterface[] a, MyInterface u) {
         return get(a) != u; // old acmp
     }
 
     public boolean testNotEq28_2(MyInterface[] a, MyInterface u) {
@@ -1021,10 +1328,22 @@
 
     public boolean testNotEq28_3(MyInterface[] a, MyInterface u) {
         return get(a) != get(u); // old acmp
     }
 
+    public boolean testNotEq28_4(MyAbstract[] a, MyAbstract u) {
+        return get(a) != u; // old acmp
+    }
+
+    public boolean testNotEq28_5(MyAbstract[] a, MyAbstract u) {
+        return a != get(u); // old acmp
+    }
+
+    public boolean testNotEq28_6(MyAbstract[] a, MyAbstract u) {
+        return get(a) != get(u); // old acmp
+    }
+
     public boolean testNotEq29_1(MyInterface u, MyInterface[] a) {
         return get(u) != a; // old acmp
     }
 
     public boolean testNotEq29_2(MyInterface u, MyInterface[] a) {
@@ -1033,10 +1352,22 @@
 
     public boolean testNotEq29_3(MyInterface u, MyInterface[] a) {
         return get(u) != get(a); // old acmp
     }
 
+    public boolean testNotEq29_4(MyAbstract u, MyAbstract[] a) {
+        return get(u) != a; // old acmp
+    }
+
+    public boolean testNotEq29_5(MyAbstract u, MyAbstract[] a) {
+        return u != get(a); // old acmp
+    }
+
+    public boolean testNotEq29_6(MyAbstract u, MyAbstract[] a) {
+        return get(u) != get(a); // old acmp
+    }
+
     public boolean testNotEq30_1(MyInterface[] a, MyValue1 v) {
         return get(a) != (Object)v; // only false if both null
     }
 
     public boolean testNotEq30_2(MyInterface[] a, MyValue1 v) {
@@ -1045,10 +1376,22 @@
 
     public boolean testNotEq30_3(MyInterface[] a, MyValue1 v) {
         return get(a) != get(v); // only false if both null
     }
 
+    public boolean testNotEq30_4(MyAbstract[] a, MyValue1 v) {
+        return get(a) != (Object)v; // only false if both null
+    }
+
+    public boolean testNotEq30_5(MyAbstract[] a, MyValue1 v) {
+        return a != get(v); // only false if both null
+    }
+
+    public boolean testNotEq30_6(MyAbstract[] a, MyValue1 v) {
+        return get(a) != get(v); // only false if both null
+    }
+
     public boolean testNotEq31_1(MyValue1 v, MyInterface[] a) {
         return get(v) != a; // only false if both null
     }
 
     public boolean testNotEq31_2(MyValue1 v, MyInterface[] a) {
@@ -1057,10 +1400,22 @@
 
     public boolean testNotEq31_3(MyValue1 v, MyInterface[] a) {
         return get(v) != get(a); // only false if both null
     }
 
+    public boolean testNotEq31_4(MyValue1 v, MyAbstract[] a) {
+        return get(v) != a; // only false if both null
+    }
+
+    public boolean testNotEq31_5(MyValue1 v, MyAbstract[] a) {
+        return (Object)v != get(a); // only false if both null
+    }
+
+    public boolean testNotEq31_6(MyValue1 v, MyAbstract[] a) {
+        return get(v) != get(a); // only false if both null
+    }
+
     public boolean testNotEq32_1(MyInterface[] a, MyValue1 v) {
         return getNotNull(a) != (Object)v; // true
     }
 
     public boolean testNotEq32_2(MyInterface[] a, MyValue1 v) {
@@ -1069,10 +1424,22 @@
 
     public boolean testNotEq32_3(MyInterface[] a, MyValue1 v) {
         return getNotNull(a) != getNotNull(v); // true
     }
 
+    public boolean testNotEq32_4(MyAbstract[] a, MyValue1 v) {
+        return getNotNull(a) != (Object)v; // true
+    }
+
+    public boolean testNotEq32_5(MyAbstract[] a, MyValue1 v) {
+        return a != getNotNull(v); // true
+    }
+
+    public boolean testNotEq32_6(MyAbstract[] a, MyValue1 v) {
+        return getNotNull(a) != getNotNull(v); // true
+    }
+
     public boolean testNotEq33_1(MyValue1 v, MyInterface[] a) {
         return getNotNull(v) != a; // true
     }
 
     public boolean testNotEq33_2(MyValue1 v, MyInterface[] a) {
@@ -1081,10 +1448,22 @@
 
     public boolean testNotEq33_3(MyValue1 v, MyInterface[] a) {
         return getNotNull(v) != getNotNull(a); // true
     }
 
+    public boolean testNotEq33_4(MyValue1 v, MyAbstract[] a) {
+        return getNotNull(v) != a; // true
+    }
+
+    public boolean testNotEq33_5(MyValue1 v, MyAbstract[] a) {
+        return (Object)v != getNotNull(a); // true
+    }
+
+    public boolean testNotEq33_6(MyValue1 v, MyAbstract[] a) {
+        return getNotNull(v) != getNotNull(a); // true
+    }
+
     // Null tests
 
     public boolean testNotNull01_1(MyValue1 v) {
         return (Object)v != null; // old acmp
     }
@@ -1195,10 +1574,26 @@
 
     public boolean testNotNull07_4(MyInterface u) {
         return get(u) != get((Object)null); // old acmp
     }
 
+    public boolean testNotNull07_5(MyAbstract u) {
+        return u != null; // old acmp
+    }
+
+    public boolean testNotNull07_6(MyAbstract u) {
+        return get(u) != null; // old acmp
+    }
+
+    public boolean testNotNull07_7(MyAbstract u) {
+        return u != get((Object)null); // old acmp
+    }
+
+    public boolean testNotNull07_8(MyAbstract u) {
+        return get(u) != get((Object)null); // old acmp
+    }
+
     public boolean testNotNull08_1(MyInterface u) {
         return null != u; // old acmp
     }
 
     public boolean testNotNull08_2(MyInterface u) {
@@ -1211,10 +1606,26 @@
 
     public boolean testNotNull08_4(MyInterface u) {
         return get((Object)null) != get(u); // old acmp
     }
 
+    public boolean testNotNull08_5(MyAbstract u) {
+        return null != u; // old acmp
+    }
+
+    public boolean testNotNull08_6(MyAbstract u) {
+        return get((Object)null) != u; // old acmp
+    }
+
+    public boolean testNotNull08_7(MyAbstract u) {
+        return null != get(u); // old acmp
+    }
+
+    public boolean testNotNull08_8(MyAbstract u) {
+        return get((Object)null) != get(u); // old acmp
+    }
+
     // The following methods are used with -XX:+AlwaysIncrementalInline to hide exact types during parsing
 
     public Object get(Object u) {
         return u;
     }
