diff a/src/hotspot/share/c1/c1_Instruction.cpp b/src/hotspot/share/c1/c1_Instruction.cpp
--- a/src/hotspot/share/c1/c1_Instruction.cpp
+++ b/src/hotspot/share/c1/c1_Instruction.cpp
@@ -142,23 +142,20 @@
 bool Instruction::maybe_flattened_array() {
   if (ValueArrayFlatten) {
     ciType* type = declared_type();
     if (type != NULL) {
       if (type->is_obj_array_klass()) {
-        // Check for array covariance. One of the following declared types may be a flattened array:
+        // Due to array covariance, the runtime type might be a flattened array.
         ciKlass* element_klass = type->as_obj_array_klass()->element_klass();
-        if (!element_klass->is_loaded() ||
-            element_klass->is_java_lang_Object() ||                                                // (ValueType[] <: Object[])
-            element_klass->is_interface() ||                                                       // (ValueType[] <: <any interface>[])
-            (element_klass->is_valuetype() && element_klass->as_value_klass()->flatten_array())) { // (ValueType[] <: ValueType?[])
+        if (element_klass->can_be_value_klass() && (!element_klass->is_valuetype() || element_klass->as_value_klass()->flatten_array())) {
           // We will add a runtime check for flat-ness.
           return true;
         }
       } else if (type->is_value_array_klass()) {
         ciKlass* element_klass = type->as_value_array_klass()->element_klass();
         if (!element_klass->is_loaded() ||
-            (element_klass->is_valuetype() && element_klass->as_value_klass()->flatten_array())) { // (ValueType[] <: ValueType?[])
+            (element_klass->is_valuetype() && element_klass->as_value_klass()->flatten_array())) {
           // We will add a runtime check for flat-ness.
           return true;
         }
       } else if (type->is_klass() && type->as_klass()->is_java_lang_Object()) {
         // This can happen as a parameter to System.arraycopy()
@@ -168,34 +165,29 @@
       // Type info gets lost during Phi merging (Phi, IfOp, etc), but we might be storing into a
       // flattened array, so we should do a runtime check.
       return true;
     }
   }
-
   return false;
 }
 
 bool Instruction::maybe_null_free_array() {
   ciType* type = declared_type();
   if (type != NULL) {
     if (type->is_obj_array_klass()) {
-      // Check for array covariance. One of the following declared types may be a null-free array:
+      // Due to array covariance, the runtime type might be a null-free array.
       ciKlass* element_klass = type->as_obj_array_klass()->element_klass();
-      if (!element_klass->is_loaded() ||
-          element_klass->is_java_lang_Object() ||   // (ValueType[] <: Object[])
-          element_klass->is_interface() ||          // (ValueType[] <: <any interface>[])
-          element_klass->is_valuetype()) {          // (ValueType[] <: ValueType?[])
-          // We will add a runtime check for flat-ness.
+      if (element_klass->can_be_value_klass()) {
+          // We will add a runtime check for null-free-ness.
           return true;
       }
     }
   } else {
     // Type info gets lost during Phi merging (Phi, IfOp, etc), but we might be storing into a
-    // flattened array, so we should do a runtime check.
+    // null-free array, so we should do a runtime check.
     return true;
   }
-
   return false;
 }
 
 #ifndef PRODUCT
 void Instruction::check_state(ValueStack* state) {
