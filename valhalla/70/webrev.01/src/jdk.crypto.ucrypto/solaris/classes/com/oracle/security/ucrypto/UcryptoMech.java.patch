diff a/src/jdk.crypto.ucrypto/solaris/classes/com/oracle/security/ucrypto/UcryptoMech.java b/src/jdk.crypto.ucrypto/solaris/classes/com/oracle/security/ucrypto/UcryptoMech.java
--- a/src/jdk.crypto.ucrypto/solaris/classes/com/oracle/security/ucrypto/UcryptoMech.java
+++ b/src/jdk.crypto.ucrypto/solaris/classes/com/oracle/security/ucrypto/UcryptoMech.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,10 +23,13 @@
  * questions.
  */
 
 package com.oracle.security.ucrypto;
 
+import java.util.List;
+import static sun.security.util.SecurityProviderConstants.getAliases;
+
 /**
  * Enum for representing the ucrypto mechanisms.
  *
  * @since 9
  */
@@ -34,119 +37,130 @@
 public enum UcryptoMech {
 
     CRYPTO_AES_ECB(new ServiceDesc[]
         { sd("Cipher", "AES/ECB/NoPadding", "com.oracle.security.ucrypto.NativeCipher$AesEcbNoPadding"),
           sd("Cipher", "AES/ECB/PKCS5Padding", "com.oracle.security.ucrypto.NativeCipherWithJavaPadding$AesEcbPKCS5",
-             "AES"),
-          sd("Cipher", "AES_128/ECB/NoPadding", "com.oracle.security.ucrypto.NativeCipher$AesEcbNoPadding",
-             "2.16.840.1.101.3.4.1.1", "OID.2.16.840.1.101.3.4.1.1"),
-          sd("Cipher", "AES_192/ECB/NoPadding", "com.oracle.security.ucrypto.NativeCipher$AesEcbNoPadding",
-             "2.16.840.1.101.3.4.1.21", "OID.2.16.840.1.101.3.4.1.21"),
-          sd("Cipher", "AES_256/ECB/NoPadding", "com.oracle.security.ucrypto.NativeCipher$AesEcbNoPadding",
-             "2.16.840.1.101.3.4.1.41", "OID.2.16.840.1.101.3.4.1.41")
+             List.of("AES")),
+          sdA("Cipher", "AES_128/ECB/NoPadding",
+              "com.oracle.security.ucrypto.NativeCipher$AesEcbNoPadding"),
+          sdA("Cipher", "AES_192/ECB/NoPadding",
+              "com.oracle.security.ucrypto.NativeCipher$AesEcbNoPadding"),
+          sdA("Cipher", "AES_256/ECB/NoPadding",
+              "com.oracle.security.ucrypto.NativeCipher$AesEcbNoPadding")
         }),
     CRYPTO_AES_CBC(new ServiceDesc[]
         { sd("Cipher", "AES/CBC/NoPadding", "com.oracle.security.ucrypto.NativeCipher$AesCbcNoPadding"),
           sd("Cipher", "AES/CBC/PKCS5Padding", "com.oracle.security.ucrypto.NativeCipherWithJavaPadding$AesCbcPKCS5"),
-          sd("Cipher", "AES_128/CBC/NoPadding", "com.oracle.security.ucrypto.NativeCipher$AesCbcNoPadding",
-             "2.16.840.1.101.3.4.1.2", "OID.2.16.840.1.101.3.4.1.2"),
-          sd("Cipher", "AES_192/CBC/NoPadding", "com.oracle.security.ucrypto.NativeCipher$AesCbcNoPadding",
-             "2.16.840.1.101.3.4.1.22", "OID.2.16.840.1.101.3.4.1.22"),
-          sd("Cipher", "AES_256/CBC/NoPadding", "com.oracle.security.ucrypto.NativeCipher$AesCbcNoPadding",
-             "2.16.840.1.101.3.4.1.42", "OID.2.16.840.1.101.3.4.1.42")
+          sdA("Cipher", "AES_128/CBC/NoPadding",
+              "com.oracle.security.ucrypto.NativeCipher$AesCbcNoPadding"),
+          sdA("Cipher", "AES_192/CBC/NoPadding",
+              "com.oracle.security.ucrypto.NativeCipher$AesCbcNoPadding"),
+          sdA("Cipher", "AES_256/CBC/NoPadding",
+              "com.oracle.security.ucrypto.NativeCipher$AesCbcNoPadding")
         }),
 //  CRYPTO_AES_CBC_PAD(null), // Support added since S11.1; however we still use CRYPTO_AES_CBC due to known bug
     CRYPTO_AES_CTR(new ServiceDesc[]
         { sd("Cipher", "AES/CTR/NoPadding", "com.oracle.security.ucrypto.NativeCipher$AesCtrNoPadding") }),
 //  CRYPTO_AES_CCM(null), // Need Java API for CK_AES_CCM_PARAMS
     CRYPTO_AES_GCM(new ServiceDesc[]
         { sd("Cipher", "AES/GCM/NoPadding", "com.oracle.security.ucrypto.NativeGCMCipher$AesGcmNoPadding"),
-          sd("Cipher", "AES_128/GCM/NoPadding", "com.oracle.security.ucrypto.NativeGCMCipher$AesGcmNoPadding",
-             "2.16.840.1.101.3.4.1.6", "OID.2.16.840.1.101.3.4.1.6"),
-          sd("Cipher", "AES_192/GCM/NoPadding", "com.oracle.security.ucrypto.NativeGCMCipher$AesGcmNoPadding",
-             "2.16.840.1.101.3.4.1.26", "OID.2.16.840.1.101.3.4.1.26"),
-          sd("Cipher", "AES_256/GCM/NoPadding", "com.oracle.security.ucrypto.NativeGCMCipher$AesGcmNoPadding",
-             "2.16.840.1.101.3.4.1.46", "OID.2.16.840.1.101.3.4.1.46")
+          sdA("Cipher", "AES_128/GCM/NoPadding",
+              "com.oracle.security.ucrypto.NativeGCMCipher$AesGcmNoPadding"),
+          sdA("Cipher", "AES_192/GCM/NoPadding",
+              "com.oracle.security.ucrypto.NativeGCMCipher$AesGcmNoPadding"),
+          sdA("Cipher", "AES_256/GCM/NoPadding",
+              "com.oracle.security.ucrypto.NativeGCMCipher$AesGcmNoPadding")
         }),
 //  CRYPTO_AES_GMAC(null), // No support from Solaris
     CRYPTO_AES_CFB128(new ServiceDesc[]
         { sd("Cipher", "AES/CFB128/NoPadding", "com.oracle.security.ucrypto.NativeCipher$AesCfb128NoPadding"),
           sd("Cipher", "AES/CFB128/PKCS5Padding", "com.oracle.security.ucrypto.NativeCipherWithJavaPadding$AesCfb128PKCS5")
         }),
 
     CRYPTO_RSA_PKCS(new ServiceDesc[]
         { sd("Cipher", "RSA/ECB/PKCS1Padding", "com.oracle.security.ucrypto.NativeRSACipher$PKCS1Padding",
-             "RSA")
+             List.of("RSA"))
         }),
     CRYPTO_RSA_X_509(new ServiceDesc[]
         { sd("Cipher", "RSA/ECB/NoPadding", "com.oracle.security.ucrypto.NativeRSACipher$NoPadding") }),
     CRYPTO_MD5_RSA_PKCS(new ServiceDesc[]
-        { sd("Signature", "MD5withRSA", "com.oracle.security.ucrypto.NativeRSASignature$MD5",
-             "1.2.840.113549.1.1.4", "OID.1.2.840.113549.1.1.4")
+        { sdA("Signature", "MD5withRSA",
+              "com.oracle.security.ucrypto.NativeRSASignature$MD5")
         }),
     CRYPTO_SHA1_RSA_PKCS(new ServiceDesc[]
-        { sd("Signature", "SHA1withRSA", "com.oracle.security.ucrypto.NativeRSASignature$SHA1",
-             "1.2.840.113549.1.1.5", "OID.1.2.840.113549.1.1.5",
-             "1.3.14.3.2.29")
+        { sdA("Signature", "SHA1withRSA",
+              "com.oracle.security.ucrypto.NativeRSASignature$SHA1")
         }),
     CRYPTO_SHA256_RSA_PKCS(new ServiceDesc[]
-        { sd("Signature", "SHA256withRSA", "com.oracle.security.ucrypto.NativeRSASignature$SHA256",
-             "1.2.840.113549.1.1.11", "OID.1.2.840.113549.1.1.11")
+        { sdA("Signature", "SHA256withRSA",
+              "com.oracle.security.ucrypto.NativeRSASignature$SHA256")
         }),
     CRYPTO_SHA384_RSA_PKCS(new ServiceDesc[]
-        { sd("Signature", "SHA384withRSA", "com.oracle.security.ucrypto.NativeRSASignature$SHA384",
-             "1.2.840.113549.1.1.12", "OID.1.2.840.113549.1.1.12")
+        { sdA("Signature", "SHA384withRSA",
+              "com.oracle.security.ucrypto.NativeRSASignature$SHA384")
         }),
     CRYPTO_SHA512_RSA_PKCS(new ServiceDesc[]
-        { sd("Signature", "SHA512withRSA", "com.oracle.security.ucrypto.NativeRSASignature$SHA512",
-             "1.2.840.113549.1.1.13", "OID.1.2.840.113549.1.1.13")
+        { sdA("Signature", "SHA512withRSA",
+             "com.oracle.security.ucrypto.NativeRSASignature$SHA512")
         }),
 
     CRYPTO_MD5(new ServiceDesc[]
-        { sd("MessageDigest", "MD5", "com.oracle.security.ucrypto.NativeDigest$MD5") }),
+        { sd("MessageDigest", "MD5", "com.oracle.security.ucrypto.NativeDigest$MD5")
+        }),
     CRYPTO_SHA1(new ServiceDesc[]
-        { sd("MessageDigest", "SHA", "com.oracle.security.ucrypto.NativeDigest$SHA1", "SHA-1", "SHA1") }),
+        { sdA("MessageDigest", "SHA-1",
+              "com.oracle.security.ucrypto.NativeDigest$SHA1")
+        }),
     CRYPTO_SHA224(new ServiceDesc[]
-        { sd("MessageDigest", "SHA-224", "com.oracle.security.ucrypto.NativeDigest$SHA224",
-             "2.16.840.1.101.3.4.2.4", "OID.2.16.840.1.101.3.4.2.4")
-    }),
+        { sdA("MessageDigest", "SHA-224",
+              "com.oracle.security.ucrypto.NativeDigest$SHA224")
+        }),
     CRYPTO_SHA256(new ServiceDesc[]
-        { sd("MessageDigest", "SHA-256", "com.oracle.security.ucrypto.NativeDigest$SHA256",
-             "2.16.840.1.101.3.4.2.1", "OID.2.16.840.1.101.3.4.2.1")
-    }),
+        { sdA("MessageDigest", "SHA-256",
+              "com.oracle.security.ucrypto.NativeDigest$SHA256")
+        }),
     CRYPTO_SHA384(new ServiceDesc[]
-        { sd("MessageDigest", "SHA-384", "com.oracle.security.ucrypto.NativeDigest$SHA384",
-             "2.16.840.1.101.3.4.2.2", "OID.2.16.840.1.101.3.4.2.2")
-    }),
+        { sdA("MessageDigest", "SHA-384",
+              "com.oracle.security.ucrypto.NativeDigest$SHA384")
+        }),
     CRYPTO_SHA512(new ServiceDesc[]
-        { sd("MessageDigest", "SHA-512", "com.oracle.security.ucrypto.NativeDigest$SHA512",
-             "2.16.840.1.101.3.4.2.3", "OID.2.16.840.1.101.3.4.2.3")
-    }),
+        { sdA("MessageDigest", "SHA-512",
+              "com.oracle.security.ucrypto.NativeDigest$SHA512")
+        }),
     CRYPTO_SHA3_224(new ServiceDesc[]
-        { sd("MessageDigest", "SHA3-224", "com.oracle.security.ucrypto.NativeDigest$SHA3_224",
-             "2.16.840.1.101.3.4.2.7", "OID.2.16.840.1.101.3.4.2.7")
-    }),
+        { sdA("MessageDigest", "SHA3-224",
+              "com.oracle.security.ucrypto.NativeDigest$SHA3_224")
+        }),
     CRYPTO_SHA3_256(new ServiceDesc[]
-        { sd("MessageDigest", "SHA3-256", "com.oracle.security.ucrypto.NativeDigest$SHA3_256",
-             "2.16.840.1.101.3.4.2.8", "OID.2.16.840.1.101.3.4.2.8")
-    }),
+        { sdA("MessageDigest", "SHA3-256",
+              "com.oracle.security.ucrypto.NativeDigest$SHA3_256")
+        }),
     CRYPTO_SHA3_384(new ServiceDesc[]
-        { sd("MessageDigest", "SHA3-384", "com.oracle.security.ucrypto.NativeDigest$SHA3_384",
-             "2.16.840.1.101.3.4.2.9", "OID.2.16.840.1.101.3.4.2.9")
-    }),
+        { sdA("MessageDigest", "SHA3-384",
+              "com.oracle.security.ucrypto.NativeDigest$SHA3_384")
+        }),
     CRYPTO_SHA3_512(new ServiceDesc[]
-        { sd("MessageDigest", "SHA3-512", "com.oracle.security.ucrypto.NativeDigest$SHA3_512",
-             "2.16.840.1.101.3.4.2.10", "OID.2.16.840.1.101.3.4.2.10")
-    });
+        { sdA("MessageDigest", "SHA3-512",
+              "com.oracle.security.ucrypto.NativeDigest$SHA3_512")
+        });
 
     private int mech = 0;
     private final ServiceDesc[] serviceDescs;
 
-    private static ServiceDesc sd(String type, String algo, String cn, String... aliases) {
+    private static ServiceDesc sd(String type, String algo, String cn) {
+        return new ServiceDesc(type, algo, cn, null);
+    }
+
+    private static ServiceDesc sd(String type, String algo, String cn,
+            List<String> aliases) {
         return new ServiceDesc(type, algo, cn, aliases);
     }
 
+    private static ServiceDesc sdA(String type, String algo, String cn) {
+        return new ServiceDesc(type, algo, cn, getAliases(algo));
+    }
+
     UcryptoMech(ServiceDesc[] serviceDescs) {
         this.serviceDescs = serviceDescs;
     }
 
     public void setValue(int nativeMechValue) {
