diff a/src/jdk.crypto.ec/share/classes/sun/security/ec/point/ProjectivePoint.java b/src/jdk.crypto.ec/share/classes/sun/security/ec/point/ProjectivePoint.java
--- a/src/jdk.crypto.ec/share/classes/sun/security/ec/point/ProjectivePoint.java
+++ b/src/jdk.crypto.ec/share/classes/sun/security/ec/point/ProjectivePoint.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -75,10 +75,40 @@
     public AffinePoint asAffine() {
         IntegerModuloP zInv = z.multiplicativeInverse();
         return new AffinePoint(x.multiply(zInv), y.multiply(zInv));
     }
 
+    private static
+    <T1 extends IntegerModuloP, T2 extends IntegerModuloP>
+    boolean affineEquals(ProjectivePoint<T1> p1,
+                         ProjectivePoint<T2> p2) {
+        MutableIntegerModuloP x1 = p1.getX().mutable().setProduct(p2.getZ());
+        MutableIntegerModuloP x2 = p2.getX().mutable().setProduct(p1.getZ());
+        if (!x1.asBigInteger().equals(x2.asBigInteger())) {
+            return false;
+        }
+
+        MutableIntegerModuloP y1 = p1.getY().mutable().setProduct(p2.getZ());
+        MutableIntegerModuloP y2 = p2.getY().mutable().setProduct(p1.getZ());
+        if (!y1.asBigInteger().equals(y2.asBigInteger())) {
+            return false;
+        }
+
+        return true;
+    }
+
+    public boolean affineEquals(Point p) {
+        if (p instanceof ProjectivePoint) {
+            @SuppressWarnings("unchecked")
+            ProjectivePoint<IntegerModuloP> pp =
+                (ProjectivePoint<IntegerModuloP>) p;
+            return affineEquals(this, pp);
+        }
+
+        return asAffine().equals(p.asAffine());
+    }
+
     public static class Immutable
         extends ProjectivePoint<ImmutableIntegerModuloP>
         implements ImmutablePoint {
 
         public Immutable(ImmutableIntegerModuloP x,
