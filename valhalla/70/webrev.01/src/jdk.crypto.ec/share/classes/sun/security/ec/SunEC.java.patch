diff a/src/jdk.crypto.ec/share/classes/sun/security/ec/SunEC.java b/src/jdk.crypto.ec/share/classes/sun/security/ec/SunEC.java
--- a/src/jdk.crypto.ec/share/classes/sun/security/ec/SunEC.java
+++ b/src/jdk.crypto.ec/share/classes/sun/security/ec/SunEC.java
@@ -29,20 +29,24 @@
 import java.security.InvalidParameterException;
 import java.security.NoSuchAlgorithmException;
 import java.security.PrivilegedAction;
 import java.security.Provider;
 import java.security.ProviderException;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
-import java.util.regex.Pattern;
+
+import sun.security.ec.ed.EdDSAAlgorithmParameters;
+import sun.security.ec.ed.EdDSAKeyFactory;
+import sun.security.ec.ed.EdDSAKeyPairGenerator;
+import sun.security.ec.ed.EdDSASignature;
 import sun.security.util.CurveDB;
 import sun.security.util.NamedCurve;
 
 import static sun.security.util.SecurityConstants.PROVIDER_VER;
+import static sun.security.util.SecurityProviderConstants.*;
 
 /**
  * Provider class for the Elliptic Curve provider.
  * Supports EC keypair and parameter generation, ECDSA signing and
  * ECDH key agreement.
@@ -90,20 +94,26 @@
     // Check if native library support is disabled.
     static boolean isNativeDisabled() {
         return SunEC.disableNative;
     }
 
+    private static class ProviderServiceA extends ProviderService {
+        ProviderServiceA(Provider p, String type, String algo, String cn,
+            HashMap<String, String> attrs) {
+            super(p, type, algo, cn, getAliases(algo), attrs);
+        }
+    }
+
     private static class ProviderService extends Provider.Service {
 
         ProviderService(Provider p, String type, String algo, String cn) {
             super(p, type, algo, cn, null, null);
         }
 
         ProviderService(Provider p, String type, String algo, String cn,
-            String[] aliases, HashMap<String, String> attrs) {
-            super(p, type, algo, cn,
-                  (aliases == null? null : Arrays.asList(aliases)), attrs);
+            List<String> aliases, HashMap<String, String> attrs) {
+            super(p, type, algo, cn, aliases, attrs);
         }
 
         @Override
         public Object newInstance(Object ctrParamObj)
             throws NoSuchAlgorithmException {
@@ -114,10 +124,19 @@
             }
 
             String algo = getAlgorithm();
             try {
                 if (type.equals("Signature")) {
+
+                    if (algo.equalsIgnoreCase("EdDSA")) {
+                        return new EdDSASignature();
+                    } else if (algo.equalsIgnoreCase("Ed25519")) {
+                        return new EdDSASignature.Ed25519();
+                    } else if (algo.equalsIgnoreCase("Ed448")) {
+                        return new EdDSASignature.Ed448();
+                    }
+
                     boolean inP1363 = algo.endsWith("inP1363Format");
                     if (inP1363) {
                         algo = algo.substring(0, algo.length() - 13);
                     }
                     if (algo.equals("SHA1withECDSA")) {
@@ -146,10 +165,16 @@
                         return new XDHKeyFactory();
                     } else if (algo.equals("X25519")) {
                         return new XDHKeyFactory.X25519();
                     } else if (algo.equals("X448")) {
                         return new XDHKeyFactory.X448();
+                    } else if (algo.equalsIgnoreCase("EdDSA")) {
+                        return new EdDSAKeyFactory();
+                    } else if (algo.equalsIgnoreCase("Ed25519")) {
+                        return new EdDSAKeyFactory.Ed25519();
+                    } else if (algo.equalsIgnoreCase("Ed448")) {
+                        return new EdDSAKeyFactory.Ed448();
                     }
                 } else  if (type.equals("AlgorithmParameters")) {
                     if (algo.equals("EC")) {
                         return new sun.security.util.ECParameters();
                     }
@@ -160,10 +185,16 @@
                         return new XDHKeyPairGenerator();
                     } else if (algo.equals("X25519")) {
                         return new XDHKeyPairGenerator.X25519();
                     } else if (algo.equals("X448")) {
                         return new XDHKeyPairGenerator.X448();
+                    } else if (algo.equalsIgnoreCase("EdDSA")) {
+                        return new EdDSAKeyPairGenerator();
+                    } else if (algo.equalsIgnoreCase("Ed25519")) {
+                        return new EdDSAKeyPairGenerator.Ed25519();
+                    } else if (algo.equalsIgnoreCase("Ed448")) {
+                        return new EdDSAKeyPairGenerator.Ed448();
                     }
                 } else  if (type.equals("KeyAgreement")) {
                     if (algo.equals("ECDH")) {
                         return new ECDHKeyAgreement();
                     } else if (algo.equals("XDH")) {
@@ -182,12 +213,11 @@
                 " " + type);
         }
     }
 
     public SunEC() {
-        super("SunEC", PROVIDER_VER,
-            "Sun Elliptic Curve provider (EC, ECDSA, ECDH)");
+        super("SunEC", PROVIDER_VER, "Sun Elliptic Curve provider");
         AccessController.doPrivileged(new PrivilegedAction<Void>() {
             public Void run() {
                 putEntries();
                 return null;
             }
@@ -205,19 +235,18 @@
         /*
          *  Key Factory engine
          */
         putService(new ProviderService(this, "KeyFactory",
             "EC", "sun.security.ec.ECKeyFactory",
-            new String[] { "EllipticCurve" }, ATTRS));
+            List.of("EllipticCurve"), ATTRS));
 
         /*
          * Algorithm Parameter engine
          */
         // "AlgorithmParameters.EC SupportedCurves" prop used by unit test
         boolean firstCurve = true;
         StringBuilder names = new StringBuilder();
-        Pattern nameSplitPattern = Pattern.compile(CurveDB.SPLIT_PATTERN);
 
         Collection<? extends NamedCurve> supportedCurves;
         if (SunEC.isNativeDisabled()) {
             supportedCurves = Collections.unmodifiableList(List.of(
                     CurveDB.lookup("secp256r1"),
@@ -233,56 +262,49 @@
             } else {
                 firstCurve = false;
             }
 
             names.append("[");
-
-            String[] commonNames = nameSplitPattern.split(namedCurve.getName());
+            String[] commonNames = namedCurve.getNameAndAliases();
             for (String commonName : commonNames) {
-                names.append(commonName.trim());
+                names.append(commonName);
                 names.append(",");
             }
 
             names.append(namedCurve.getObjectId());
             names.append("]");
         }
 
         HashMap<String, String> apAttrs = new HashMap<>(ATTRS);
         apAttrs.put("SupportedCurves", names.toString());
 
-        putService(new ProviderService(this, "AlgorithmParameters",
-            "EC", "sun.security.util.ECParameters",
-            new String[] { "EllipticCurve", "1.2.840.10045.2.1", "OID.1.2.840.10045.2.1" },
-            apAttrs));
+        putService(new ProviderServiceA(this, "AlgorithmParameters",
+            "EC", "sun.security.util.ECParameters", apAttrs));
 
         putXDHEntries();
+        putEdDSAEntries();
 
         /*
          * Signature engines
          */
         putService(new ProviderService(this, "Signature",
             "NONEwithECDSA", "sun.security.ec.ECDSASignature$Raw",
             null, ATTRS));
-        putService(new ProviderService(this, "Signature",
+        putService(new ProviderServiceA(this, "Signature",
             "SHA1withECDSA", "sun.security.ec.ECDSASignature$SHA1",
-            new String[] { "1.2.840.10045.4.1", "OID.1.2.840.10045.4.1" },
             ATTRS));
-        putService(new ProviderService(this, "Signature",
+        putService(new ProviderServiceA(this, "Signature",
             "SHA224withECDSA", "sun.security.ec.ECDSASignature$SHA224",
-            new String[] { "1.2.840.10045.4.3.1", "OID.1.2.840.10045.4.3.1"},
             ATTRS));
-        putService(new ProviderService(this, "Signature",
+        putService(new ProviderServiceA(this, "Signature",
             "SHA256withECDSA", "sun.security.ec.ECDSASignature$SHA256",
-            new String[] { "1.2.840.10045.4.3.2", "OID.1.2.840.10045.4.3.2"},
             ATTRS));
-        putService(new ProviderService(this, "Signature",
+        putService(new ProviderServiceA(this, "Signature",
             "SHA384withECDSA", "sun.security.ec.ECDSASignature$SHA384",
-            new String[] { "1.2.840.10045.4.3.3", "OID.1.2.840.10045.4.3.3" },
             ATTRS));
-        putService(new ProviderService(this, "Signature",
+        putService(new ProviderServiceA(this, "Signature",
             "SHA512withECDSA", "sun.security.ec.ECDSASignature$SHA512",
-            new String[] { "1.2.840.10045.4.3.4", "OID.1.2.840.10045.4.3.4" },
             ATTRS));
 
         putService(new ProviderService(this, "Signature",
              "NONEwithECDSAinP1363Format",
              "sun.security.ec.ECDSASignature$RawinP1363Format"));
@@ -305,11 +327,11 @@
         /*
          *  Key Pair Generator engine
          */
         putService(new ProviderService(this, "KeyPairGenerator",
             "EC", "sun.security.ec.ECKeyPairGenerator",
-            new String[] { "EllipticCurve" }, ATTRS));
+            List.of("EllipticCurve"), ATTRS));
 
         /*
          * Key Agreement engine
          */
         putService(new ProviderService(this, "KeyAgreement",
@@ -322,32 +344,62 @@
         ATTRS.put("ImplementedIn", "Software");
 
         /* XDH does not require native implementation */
         putService(new ProviderService(this, "KeyFactory",
             "XDH", "sun.security.ec.XDHKeyFactory", null, ATTRS));
-        putService(new ProviderService(this, "KeyFactory",
+        putService(new ProviderServiceA(this, "KeyFactory",
             "X25519", "sun.security.ec.XDHKeyFactory.X25519",
-            new String[]{"1.3.101.110", "OID.1.3.101.110"}, ATTRS));
-        putService(new ProviderService(this, "KeyFactory",
+            ATTRS));
+        putService(new ProviderServiceA(this, "KeyFactory",
             "X448", "sun.security.ec.XDHKeyFactory.X448",
-            new String[]{"1.3.101.111", "OID.1.3.101.111"}, ATTRS));
+            ATTRS));
 
         putService(new ProviderService(this, "KeyPairGenerator",
             "XDH", "sun.security.ec.XDHKeyPairGenerator", null, ATTRS));
-        putService(new ProviderService(this, "KeyPairGenerator",
+        putService(new ProviderServiceA(this, "KeyPairGenerator",
             "X25519", "sun.security.ec.XDHKeyPairGenerator.X25519",
-            new String[]{"1.3.101.110", "OID.1.3.101.110"}, ATTRS));
-        putService(new ProviderService(this, "KeyPairGenerator",
+            ATTRS));
+        putService(new ProviderServiceA(this, "KeyPairGenerator",
             "X448", "sun.security.ec.XDHKeyPairGenerator.X448",
-            new String[]{"1.3.101.111", "OID.1.3.101.111"}, ATTRS));
+            ATTRS));
 
         putService(new ProviderService(this, "KeyAgreement",
             "XDH", "sun.security.ec.XDHKeyAgreement", null, ATTRS));
-        putService(new ProviderService(this, "KeyAgreement",
+        putService(new ProviderServiceA(this, "KeyAgreement",
             "X25519", "sun.security.ec.XDHKeyAgreement.X25519",
-            new String[]{"1.3.101.110", "OID.1.3.101.110"}, ATTRS));
-        putService(new ProviderService(this, "KeyAgreement",
+            ATTRS));
+        putService(new ProviderServiceA(this, "KeyAgreement",
             "X448", "sun.security.ec.XDHKeyAgreement.X448",
-            new String[]{"1.3.101.111", "OID.1.3.101.111"}, ATTRS));
+            ATTRS));
+    }
+
+    private void putEdDSAEntries() {
+
+        HashMap<String, String> ATTRS = new HashMap<>(1);
+        ATTRS.put("ImplementedIn", "Software");
+
+        /* EdDSA does not require native implementation */
+        putService(new ProviderService(this, "KeyFactory",
+            "EdDSA", "sun.security.ec.ed.EdDSAKeyFactory", null, ATTRS));
+        putService(new ProviderServiceA(this, "KeyFactory",
+            "Ed25519", "sun.security.ec.ed.EdDSAKeyFactory.Ed25519", ATTRS));
+        putService(new ProviderServiceA(this, "KeyFactory",
+            "Ed448", "sun.security.ec.ed.EdDSAKeyFactory.Ed448", ATTRS));
+
+        putService(new ProviderService(this, "KeyPairGenerator",
+            "EdDSA", "sun.security.ec.ed.EdDSAKeyPairGenerator", null, ATTRS));
+        putService(new ProviderServiceA(this, "KeyPairGenerator",
+            "Ed25519", "sun.security.ec.ed.EdDSAKeyPairGenerator.Ed25519",
+            ATTRS));
+        putService(new ProviderServiceA(this, "KeyPairGenerator",
+            "Ed448", "sun.security.ec.ed.EdDSAKeyPairGenerator.Ed448",
+            ATTRS));
+
+        putService(new ProviderService(this, "Signature",
+            "EdDSA", "sun.security.ec.ed.EdDSASignature", null, ATTRS));
+        putService(new ProviderServiceA(this, "Signature",
+            "Ed25519", "sun.security.ec.ed.EdDSASignature.Ed25519", ATTRS));
+        putService(new ProviderServiceA(this, "Signature",
+            "Ed448", "sun.security.ec.ed.EdDSASignature.Ed448", ATTRS));
 
     }
 }
