diff a/src/jdk.jdi/share/classes/com/sun/tools/jdi/ArrayTypeImpl.java b/src/jdk.jdi/share/classes/com/sun/tools/jdi/ArrayTypeImpl.java
--- a/src/jdk.jdi/share/classes/com/sun/tools/jdi/ArrayTypeImpl.java
+++ b/src/jdk.jdi/share/classes/com/sun/tools/jdi/ArrayTypeImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -57,11 +57,12 @@
             throw exc.toJDIException();
         }
     }
 
     public String componentSignature() {
-        return signature().substring(1); // Just skip the leading '['
+        JNITypeParser sig = new JNITypeParser(signature());
+        return sig.componentSignature();
     }
 
     public String componentTypeName() {
         JNITypeParser parser = new JNITypeParser(componentSignature());
         return parser.typeName();
@@ -88,12 +89,13 @@
      * the same class loader. Since array set operations don't have an
      * implicit enclosing type like field and variable set operations,
      * this method is sometimes needed for proper type checking.
      */
     Type findComponentType(String signature) throws ClassNotLoadedException {
-        byte tag = (byte)signature.charAt(0);
-        if (PacketStream.isObjectTag(tag)) {
+
+        JNITypeParser sig = new JNITypeParser(signature);
+        if (sig.isReference()) {
             // It's a reference type
             JNITypeParser parser = new JNITypeParser(componentSignature());
             List<ReferenceType> list = vm.classesBySignature(componentSignature());
             Iterator<ReferenceType> iter = list.iterator();
             while (iter.hasNext()) {
@@ -107,11 +109,11 @@
             }
             // Component class has not yet been loaded
             throw new ClassNotLoadedException(componentTypeName());
         } else {
             // It's a primitive type
-            return vm.primitiveTypeMirror(tag);
+            return vm.primitiveTypeMirror(sig.jdwpTag());
         }
     }
 
     public Type componentType() throws ClassNotLoadedException {
         return findComponentType(componentSignature());
