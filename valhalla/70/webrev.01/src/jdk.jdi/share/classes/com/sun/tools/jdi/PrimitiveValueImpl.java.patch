diff a/src/jdk.jdi/share/classes/com/sun/tools/jdi/PrimitiveValueImpl.java b/src/jdk.jdi/share/classes/com/sun/tools/jdi/PrimitiveValueImpl.java
--- a/src/jdk.jdi/share/classes/com/sun/tools/jdi/PrimitiveValueImpl.java
+++ b/src/jdk.jdi/share/classes/com/sun/tools/jdi/PrimitiveValueImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -103,28 +103,26 @@
     }
 
     ValueImpl convertForAssignmentTo(ValueContainer destination)
         throws InvalidTypeException
     {
-        /*
-         * TO DO: Centralize JNI signature knowledge
-         */
-        if (destination.signature().length() > 1) {
+        JNITypeParser destSig = new JNITypeParser(destination.signature());
+        JNITypeParser sourceSig = new JNITypeParser(type().signature());
+
+        if (destSig.isReference()) {
             throw new InvalidTypeException("Can't assign primitive value to object");
         }
 
-        if ((destination.signature().charAt(0) == 'Z') &&
-            (type().signature().charAt(0) != 'Z')) {
+        if (destSig.isBoolean() && !sourceSig.isBoolean()) {
             throw new InvalidTypeException("Can't assign non-boolean value to a boolean");
         }
 
-        if ((destination.signature().charAt(0) != 'Z') &&
-            (type().signature().charAt(0) == 'Z')) {
+        if (!destSig.isBoolean() && sourceSig.isBoolean()) {
             throw new InvalidTypeException("Can't assign boolean value to an non-boolean");
         }
 
-        if ("void".equals(destination.typeName())) {
+        if (destSig.isVoid()) {
             throw new InvalidTypeException("Can't assign primitive value to a void");
         }
 
         try {
             PrimitiveTypeImpl primitiveType = (PrimitiveTypeImpl)destination.type();
