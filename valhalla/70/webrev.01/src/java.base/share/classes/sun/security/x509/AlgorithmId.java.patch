diff a/src/java.base/share/classes/sun/security/x509/AlgorithmId.java b/src/java.base/share/classes/sun/security/x509/AlgorithmId.java
--- a/src/java.base/share/classes/sun/security/x509/AlgorithmId.java
+++ b/src/java.base/share/classes/sun/security/x509/AlgorithmId.java
@@ -26,15 +26,18 @@
 package sun.security.x509;
 
 import java.io.*;
 import java.security.interfaces.RSAKey;
 import java.security.spec.AlgorithmParameterSpec;
+import java.security.spec.EdDSAParameterSpec;
 import java.security.spec.InvalidParameterSpecException;
 import java.security.spec.MGF1ParameterSpec;
 import java.security.spec.PSSParameterSpec;
 import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
 import java.security.*;
+import java.security.interfaces.*;
 
 import sun.security.rsa.PSSParameters;
 import sun.security.util.*;
 
 
@@ -197,11 +200,12 @@
                 algid.equals((Object)sha1WithDSA_oid)) {
                 ; // no parameter part encoded
             } else {
                 bytes.putNull();
             }*/
-            if (algid.equals(RSASSA_PSS_oid)) {
+            if (algid.equals(RSASSA_PSS_oid) || algid.equals(ed448_oid)
+                    || algid.equals(ed25519_oid)) {
                 // RFC 4055 3.3: when an RSASSA-PSS key does not require
                 // parameter validation, field is absent.
             } else {
                 bytes.putNull();
             }
@@ -243,25 +247,35 @@
      *
      * Note: for ecdsa-with-SHA2 plus hash algorithm (Ex: SHA-256), this method
      * returns the "full" signature algorithm (Ex: SHA256withECDSA) directly.
      */
     public String getName() {
-        String algName = nameTable.get(algid);
-        if (algName != null) {
-            return algName;
-        }
-        if ((params != null) && algid.equals((Object)specifiedWithECDSA_oid)) {
-            try {
-                AlgorithmId paramsId =
+        String oidStr = algid.toString();
+        // first check the list of support oids
+        KnownOIDs o = KnownOIDs.findMatch(oidStr);
+        if (o == KnownOIDs.SpecifiedSHA2withECDSA) {
+            if (params != null) {
+                try {
+                    AlgorithmId paramsId =
                         AlgorithmId.parse(new DerValue(params.toByteArray()));
-                String paramsName = paramsId.getName();
-                algName = makeSigAlg(paramsName, "EC");
-            } catch (IOException e) {
-                // ignore
+                    String paramsName = paramsId.getName();
+                    return makeSigAlg(paramsName, "EC");
+                } catch (IOException e) {
+                    // ignore
+                }
+            }
+        }
+        if (o != null) {
+            return o.stdName();
+        } else {
+            String n = aliasOidsTable().get(oidStr);
+            if (n != null) {
+                return n;
+            } else {
+                return algid.toString();
             }
         }
-        return (algName == null) ? algid.toString() : algName;
     }
 
     public AlgorithmParameters getParameters() {
         return algParams;
     }
@@ -275,11 +289,12 @@
      * signature algorithm (Ex: SHA256withECDSA).
      *
      * @return DER encoded parameters, or null not present.
      */
     public byte[] getEncodedParams() throws IOException {
-        return (params == null || algid.equals(specifiedWithECDSA_oid))
+        return (params == null ||
+            algid.toString().equals(KnownOIDs.SpecifiedSHA2withECDSA.value()))
                 ? null
                 : params.toByteArray();
     }
 
     /**
@@ -469,496 +484,151 @@
      * scope of the algorithm name to it, e.g., the algorithm name "DSA"
      * may have a different OID when used as a "Signature" algorithm than when
      * used as a "KeyPairGenerator" algorithm.
      */
     private static ObjectIdentifier algOID(String name) throws IOException {
-        // See if algname is in printable OID ("dot-dot") notation
-        if (name.indexOf('.') != -1) {
-            if (name.startsWith("OID.")) {
-                return new ObjectIdentifier(name.substring("OID.".length()));
-            } else {
-                return new ObjectIdentifier(name);
-            }
+        if (name.startsWith("OID.")) {
+            name = name.substring("OID.".length());
         }
 
-        // Digesting algorithms
-        if (name.equalsIgnoreCase("MD5")) {
-            return AlgorithmId.MD5_oid;
-        }
-        if (name.equalsIgnoreCase("MD2")) {
-            return AlgorithmId.MD2_oid;
-        }
-        if (name.equalsIgnoreCase("SHA") || name.equalsIgnoreCase("SHA1")
-            || name.equalsIgnoreCase("SHA-1")) {
-            return AlgorithmId.SHA_oid;
-        }
-        if (name.equalsIgnoreCase("SHA-256") ||
-            name.equalsIgnoreCase("SHA256")) {
-            return AlgorithmId.SHA256_oid;
-        }
-        if (name.equalsIgnoreCase("SHA-384") ||
-            name.equalsIgnoreCase("SHA384")) {
-            return AlgorithmId.SHA384_oid;
-        }
-        if (name.equalsIgnoreCase("SHA-512") ||
-            name.equalsIgnoreCase("SHA512")) {
-            return AlgorithmId.SHA512_oid;
-        }
-        if (name.equalsIgnoreCase("SHA-224") ||
-            name.equalsIgnoreCase("SHA224")) {
-            return AlgorithmId.SHA224_oid;
-        }
-        if (name.equalsIgnoreCase("SHA-512/224") ||
-            name.equalsIgnoreCase("SHA512/224")) {
-            return AlgorithmId.SHA512_224_oid;
-        }
-        if (name.equalsIgnoreCase("SHA-512/256") ||
-            name.equalsIgnoreCase("SHA512/256")) {
-            return AlgorithmId.SHA512_256_oid;
-        }
-        // Various public key algorithms
-        if (name.equalsIgnoreCase("RSA")) {
-            return AlgorithmId.RSAEncryption_oid;
-        }
-        if (name.equalsIgnoreCase("RSASSA-PSS")) {
-            return AlgorithmId.RSASSA_PSS_oid;
-        }
-        if (name.equalsIgnoreCase("RSAES-OAEP")) {
-            return AlgorithmId.RSAES_OAEP_oid;
-        }
-        if (name.equalsIgnoreCase("Diffie-Hellman")
-            || name.equalsIgnoreCase("DH")) {
-            return AlgorithmId.DH_oid;
-        }
-        if (name.equalsIgnoreCase("DSA")) {
-            return AlgorithmId.DSA_oid;
-        }
-        if (name.equalsIgnoreCase("EC")) {
-            return EC_oid;
-        }
-        if (name.equalsIgnoreCase("ECDH")) {
-            return AlgorithmId.ECDH_oid;
-        }
-
-        // Secret key algorithms
-        if (name.equalsIgnoreCase("AES")) {
-            return AlgorithmId.AES_oid;
+        KnownOIDs k = KnownOIDs.findMatch(name);
+        if (k != null) {
+            return ObjectIdentifier.of(k);
         }
 
-        // Common signature types
-        if (name.equalsIgnoreCase("MD5withRSA")
-            || name.equalsIgnoreCase("MD5/RSA")) {
-            return AlgorithmId.md5WithRSAEncryption_oid;
-        }
-        if (name.equalsIgnoreCase("MD2withRSA")
-            || name.equalsIgnoreCase("MD2/RSA")) {
-            return AlgorithmId.md2WithRSAEncryption_oid;
-        }
-        if (name.equalsIgnoreCase("SHAwithDSA")
-            || name.equalsIgnoreCase("SHA1withDSA")
-            || name.equalsIgnoreCase("SHA/DSA")
-            || name.equalsIgnoreCase("SHA1/DSA")
-            || name.equalsIgnoreCase("DSAWithSHA1")
-            || name.equalsIgnoreCase("DSS")
-            || name.equalsIgnoreCase("SHA-1/DSA")) {
-            return AlgorithmId.sha1WithDSA_oid;
-        }
-        if (name.equalsIgnoreCase("SHA224WithDSA")) {
-            return AlgorithmId.sha224WithDSA_oid;
-        }
-        if (name.equalsIgnoreCase("SHA256WithDSA")) {
-            return AlgorithmId.sha256WithDSA_oid;
-        }
-        if (name.equalsIgnoreCase("SHA1WithRSA")
-            || name.equalsIgnoreCase("SHA1/RSA")) {
-            return AlgorithmId.sha1WithRSAEncryption_oid;
-        }
-        if (name.equalsIgnoreCase("SHA1withECDSA")
-                || name.equalsIgnoreCase("ECDSA")) {
-            return AlgorithmId.sha1WithECDSA_oid;
-        }
-        if (name.equalsIgnoreCase("SHA224withECDSA")) {
-            return AlgorithmId.sha224WithECDSA_oid;
-        }
-        if (name.equalsIgnoreCase("SHA256withECDSA")) {
-            return AlgorithmId.sha256WithECDSA_oid;
-        }
-        if (name.equalsIgnoreCase("SHA384withECDSA")) {
-            return AlgorithmId.sha384WithECDSA_oid;
-        }
-        if (name.equalsIgnoreCase("SHA512withECDSA")) {
-            return AlgorithmId.sha512WithECDSA_oid;
+        // unknown algorithm oids
+        if (name.indexOf(".") == -1) {
+            // see if there is a matching oid string alias mapping from
+            // 3rd party providers
+            name = name.toUpperCase(Locale.ENGLISH);
+            String oidStr = aliasOidsTable().get(name);
+            if (oidStr != null) {
+                return ObjectIdentifier.of(oidStr);
+            } return null;
+        } else {
+            return ObjectIdentifier.of(name);
         }
-
-        return oidTable().get(name.toUpperCase(Locale.ENGLISH));
     }
 
-    private static volatile Map<String,ObjectIdentifier> oidTable;
-    private static final Map<ObjectIdentifier,String> nameTable;
+    // oid string cache index'ed by algorithm name and oid strings
+    private static volatile Map<String,String> aliasOidsTable;
 
-    /** Returns the oidTable, lazily initializing it on first access. */
-    private static Map<String,ObjectIdentifier> oidTable()
-        throws IOException {
-        // Double checked locking; safe because oidTable is volatile
-        Map<String,ObjectIdentifier> tab;
-        if ((tab = oidTable) == null) {
+    // returns the aliasOidsTable, lazily initializing it on first access.
+    private static Map<String,String> aliasOidsTable() {
+        // Double checked locking; safe because aliasOidsTable is volatile
+        Map<String,String> tab = aliasOidsTable;
+        if (tab == null) {
             synchronized (AlgorithmId.class) {
-                if ((tab = oidTable) == null)
-                    oidTable = tab = computeOidTable();
+                if ((tab = aliasOidsTable) == null) {
+                    aliasOidsTable = tab = collectOIDAliases();
+                }
             }
         }
         return tab;
     }
 
-    /** Collects the algorithm names from the installed providers. */
-    private static HashMap<String,ObjectIdentifier> computeOidTable()
-        throws IOException {
-        HashMap<String,ObjectIdentifier> tab = new HashMap<>();
+    private static boolean isKnownProvider(Provider p) {
+        String pn = p.getName();
+        String mn = p.getClass().getModule().getName();
+        if (pn != null && mn != null) {
+            return ((mn.equals("java.base") &&
+                    (pn.equals("SUN") || pn.equals("SunRsaSign") ||
+                    pn.equals("SunJCE") || pn.equals("SunJSSE"))) ||
+                (mn.equals("jdk.crypto.ec") && pn.equals("SunEC")) ||
+                (mn.equals("jdk.crypto.mscapi") && pn.equals("SunMSCAPI")) ||
+                (mn.equals("jdk.crypto.cryptoki") &&
+                    pn.startsWith("SunPKCS11")));
+        } else {
+            return false;
+        }
+    }
+
+    private static ConcurrentHashMap<String, String> collectOIDAliases() {
+        ConcurrentHashMap<String, String> t = new ConcurrentHashMap<>();
         for (Provider provider : Security.getProviders()) {
+            // skip providers which are already using SecurityProviderConstants
+            // and KnownOIDs
+            if (isKnownProvider(provider)) {
+                continue;
+            }
             for (Object key : provider.keySet()) {
                 String alias = (String)key;
                 String upperCaseAlias = alias.toUpperCase(Locale.ENGLISH);
                 int index;
                 if (upperCaseAlias.startsWith("ALG.ALIAS") &&
-                    (index=upperCaseAlias.indexOf("OID.", 0)) != -1) {
+                    (index = upperCaseAlias.indexOf("OID.", 0)) != -1) {
                     index += "OID.".length();
                     if (index == alias.length()) {
                         // invalid alias entry
                         break;
                     }
-                    String oidString = alias.substring(index);
+                    String ostr = alias.substring(index);
                     String stdAlgName = provider.getProperty(alias);
                     if (stdAlgName != null) {
                         stdAlgName = stdAlgName.toUpperCase(Locale.ENGLISH);
                     }
-                    if (stdAlgName != null &&
-                        tab.get(stdAlgName) == null) {
-                        tab.put(stdAlgName, new ObjectIdentifier(oidString));
+                    // add the name->oid and oid->name mappings if none exists
+                    if (KnownOIDs.findMatch(stdAlgName) == null) {
+                        // not override earlier entries if it exists
+                        t.putIfAbsent(stdAlgName, ostr);
+                    }
+                    if (KnownOIDs.findMatch(ostr) == null) {
+                        // not override earlier entries if it exists
+                        t.putIfAbsent(ostr, stdAlgName);
                     }
                 }
             }
         }
-        return tab;
+        return t;
     }
 
-    /*****************************************************************/
-
-    /*
-     * HASHING ALGORITHMS
-     */
-
-    /**
-     * Algorithm ID for the MD2 Message Digest Algorthm, from RFC 1319.
-     * OID = 1.2.840.113549.2.2
-     */
     public static final ObjectIdentifier MD2_oid =
-        ObjectIdentifier.of("1.2.840.113549.2.2");
+            ObjectIdentifier.of(KnownOIDs.MD2);
 
-    /**
-     * Algorithm ID for the MD5 Message Digest Algorthm, from RFC 1321.
-     * OID = 1.2.840.113549.2.5
-     */
     public static final ObjectIdentifier MD5_oid =
-        ObjectIdentifier.of("1.2.840.113549.2.5");
+            ObjectIdentifier.of(KnownOIDs.MD5);
 
-    /**
-     * Algorithm ID for the SHA1 Message Digest Algorithm, from FIPS 180-1.
-     * This is sometimes called "SHA", though that is often confusing since
-     * many people refer to FIPS 180 (which has an error) as defining SHA.
-     * OID = 1.3.14.3.2.26. Old SHA-0 OID: 1.3.14.3.2.18.
-     */
     public static final ObjectIdentifier SHA_oid =
-        ObjectIdentifier.of("1.3.14.3.2.26");
+            ObjectIdentifier.of(KnownOIDs.SHA_1);
 
     public static final ObjectIdentifier SHA224_oid =
-        ObjectIdentifier.of("2.16.840.1.101.3.4.2.4");
+            ObjectIdentifier.of(KnownOIDs.SHA_224);
 
     public static final ObjectIdentifier SHA256_oid =
-        ObjectIdentifier.of("2.16.840.1.101.3.4.2.1");
+            ObjectIdentifier.of(KnownOIDs.SHA_256);
 
     public static final ObjectIdentifier SHA384_oid =
-        ObjectIdentifier.of("2.16.840.1.101.3.4.2.2");
+            ObjectIdentifier.of(KnownOIDs.SHA_384);
 
     public static final ObjectIdentifier SHA512_oid =
-        ObjectIdentifier.of("2.16.840.1.101.3.4.2.3");
+            ObjectIdentifier.of(KnownOIDs.SHA_512);
 
     public static final ObjectIdentifier SHA512_224_oid =
-        ObjectIdentifier.of("2.16.840.1.101.3.4.2.5");
+            ObjectIdentifier.of(KnownOIDs.SHA_512$224);
 
     public static final ObjectIdentifier SHA512_256_oid =
-        ObjectIdentifier.of("2.16.840.1.101.3.4.2.6");
-
-    /*
-     * COMMON PUBLIC KEY TYPES
-     */
-    /*
-     * Note the preferred OIDs are named simply with no "OIW" or
-     * "PKIX" in them, even though they may point to data from these
-     * specs; e.g. SHA_oid, DH_oid, DSA_oid, SHA1WithDSA_oid...
-     */
-    /**
-     * Algorithm ID for Diffie Hellman Key agreement, from PKCS #3.
-     * Parameters include public values P and G, and may optionally specify
-     * the length of the private key X.  Alternatively, algorithm parameters
-     * may be derived from another source such as a Certificate Authority's
-     * certificate.
-     * OID = 1.2.840.113549.1.3.1
-     */
-    public static final ObjectIdentifier DH_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.3.1");
-
-    /**
-     * Algorithm ID for the Diffie Hellman Key Agreement (DH), from RFC 3279.
-     * Parameters may include public values P and G.
-     * OID = 1.2.840.10046.2.1
-     */
-    public static final ObjectIdentifier DH_PKIX_oid =
-            ObjectIdentifier.of("1.2.840.10046.2.1");
-
-    /**
-     * Algorithm ID for the Digital Signing Algorithm (DSA), from the
-     * NIST OIW Stable Agreements part 12.
-     * Parameters may include public values P, Q, and G; or these may be
-     * derived from
-     * another source such as a Certificate Authority's certificate.
-     * OID = 1.3.14.3.2.12
-     */
-    public static final ObjectIdentifier DSA_OIW_oid =
-            ObjectIdentifier.of("1.3.14.3.2.12");
+            ObjectIdentifier.of(KnownOIDs.SHA_512$256);
 
-    /**
-     * Algorithm ID for the Digital Signing Algorithm (DSA), from RFC 3279.
-     * Parameters may include public values P, Q, and G; or these may be
-     * derived from another source such as a Certificate Authority's
-     * certificate.
-     * OID = 1.2.840.10040.4.1
-     */
     public static final ObjectIdentifier DSA_oid =
-            ObjectIdentifier.of("1.2.840.10040.4.1");
-
-    /**
-     * Algorithm ID for RSA keys used for any purpose, as defined in X.509.
-     * The algorithm parameter is a single value, the number of bits in the
-     * public modulus.
-     * OID = 2.5.8.1.1
-     */
-    public static final ObjectIdentifier RSA_oid =
-            ObjectIdentifier.of("2.5.8.1.1");
+            ObjectIdentifier.of(KnownOIDs.DSA);
 
     public static final ObjectIdentifier EC_oid =
-            ObjectIdentifier.of("1.2.840.10045.2.1");
-    public static final ObjectIdentifier ECDH_oid =
-            ObjectIdentifier.of("1.3.132.1.12");
-    public static final ObjectIdentifier RSAEncryption_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.1.1");
-    public static final ObjectIdentifier RSAES_OAEP_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.1.7");
-    public static final ObjectIdentifier mgf1_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.1.8");
-    public static final ObjectIdentifier RSASSA_PSS_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.1.10");
-
-    /*
-     * COMMON SECRET KEY TYPES
-     */
-    public static final ObjectIdentifier AES_oid =
-            ObjectIdentifier.of("2.16.840.1.101.3.4.1");
-
-    /*
-     * COMMON SIGNATURE ALGORITHMS
-     */
-    /**
-     * Identifies a signing algorithm where an MD2 digest is encrypted
-     * using an RSA private key; defined in PKCS #1.  Use of this
-     * signing algorithm is discouraged due to MD2 vulnerabilities.
-     * OID = 1.2.840.113549.1.1.2
-     */
-    public static final ObjectIdentifier md2WithRSAEncryption_oid =
-        ObjectIdentifier.of("1.2.840.113549.1.1.2");
-
-    /**
-     * Identifies a signing algorithm where an MD5 digest is
-     * encrypted using an RSA private key; defined in PKCS #1.
-     * OID = 1.2.840.113549.1.1.4
-     */
-    public static final ObjectIdentifier md5WithRSAEncryption_oid =
-        ObjectIdentifier.of("1.2.840.113549.1.1.4");
-
-    /**
-     * Identifies a signing algorithm where a SHA1 digest is
-     * encrypted using an RSA private key; defined by RSA DSI.
-     * OID = 1.2.840.113549.1.1.5
-     */
-    public static final ObjectIdentifier sha1WithRSAEncryption_oid =
-        ObjectIdentifier.of("1.2.840.113549.1.1.5");
+            ObjectIdentifier.of(KnownOIDs.EC);
 
-    /**
-     * Identifies a signing algorithm where a SHA1 digest is
-     * encrypted using an RSA private key; defined in NIST OIW.
-     * OID = 1.3.14.3.2.29
-     */
-    public static final ObjectIdentifier sha1WithRSAEncryption_OIW_oid =
-        ObjectIdentifier.of("1.3.14.3.2.29");
-
-    /**
-     * Identifies a signing algorithm where a SHA224 digest is
-     * encrypted using an RSA private key; defined by PKCS #1.
-     * OID = 1.2.840.113549.1.1.14
-     */
-    public static final ObjectIdentifier sha224WithRSAEncryption_oid =
-        ObjectIdentifier.of("1.2.840.113549.1.1.14");
-
-    /**
-     * Identifies a signing algorithm where a SHA256 digest is
-     * encrypted using an RSA private key; defined by PKCS #1.
-     * OID = 1.2.840.113549.1.1.11
-     */
-    public static final ObjectIdentifier sha256WithRSAEncryption_oid =
-        ObjectIdentifier.of("1.2.840.113549.1.1.11");
-
-    /**
-     * Identifies a signing algorithm where a SHA384 digest is
-     * encrypted using an RSA private key; defined by PKCS #1.
-     * OID = 1.2.840.113549.1.1.12
-     */
-    public static final ObjectIdentifier sha384WithRSAEncryption_oid =
-        ObjectIdentifier.of("1.2.840.113549.1.1.12");
-
-    /**
-     * Identifies a signing algorithm where a SHA512 digest is
-     * encrypted using an RSA private key; defined by PKCS #1.
-     * OID = 1.2.840.113549.1.1.13
-     */
-    public static final ObjectIdentifier sha512WithRSAEncryption_oid =
-        ObjectIdentifier.of("1.2.840.113549.1.1.13");
-
-    /**
-     * Identifies the FIPS 186 "Digital Signature Standard" (DSS), where a
-     * SHA digest is signed using the Digital Signing Algorithm (DSA).
-     * This should not be used.
-     * OID = 1.3.14.3.2.13
-     */
-    public static final ObjectIdentifier shaWithDSA_OIW_oid =
-            ObjectIdentifier.of("1.3.14.3.2.13");
+    public static final ObjectIdentifier RSAEncryption_oid =
+            ObjectIdentifier.of(KnownOIDs.RSA);
 
-    /**
-     * Identifies the FIPS 186 "Digital Signature Standard" (DSS), where a
-     * SHA1 digest is signed using the Digital Signing Algorithm (DSA).
-     * OID = 1.3.14.3.2.27
-     */
-    public static final ObjectIdentifier sha1WithDSA_OIW_oid =
-            ObjectIdentifier.of("1.3.14.3.2.27");
+    public static final ObjectIdentifier RSASSA_PSS_oid =
+            ObjectIdentifier.of(KnownOIDs.RSASSA_PSS);
 
-    /**
-     * Identifies the FIPS 186 "Digital Signature Standard" (DSS), where a
-     * SHA1 digest is signed using the Digital Signing Algorithm (DSA).
-     * OID = 1.2.840.10040.4.3
-     */
-    public static final ObjectIdentifier sha1WithDSA_oid =
-            ObjectIdentifier.of("1.2.840.10040.4.3");
-
-    public static final ObjectIdentifier sha512_224WithRSAEncryption_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.1.15");
-    public static final ObjectIdentifier sha512_256WithRSAEncryption_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.1.16");
-
-    public static final ObjectIdentifier sha224WithDSA_oid =
-            ObjectIdentifier.of("2.16.840.1.101.3.4.3.1");
-    public static final ObjectIdentifier sha256WithDSA_oid =
-            ObjectIdentifier.of("2.16.840.1.101.3.4.3.2");
-
-    public static final ObjectIdentifier sha1WithECDSA_oid =
-            ObjectIdentifier.of("1.2.840.10045.4.1");
-    public static final ObjectIdentifier sha224WithECDSA_oid =
-            ObjectIdentifier.of("1.2.840.10045.4.3.1");
-    public static final ObjectIdentifier sha256WithECDSA_oid =
-            ObjectIdentifier.of("1.2.840.10045.4.3.2");
-    public static final ObjectIdentifier sha384WithECDSA_oid =
-            ObjectIdentifier.of("1.2.840.10045.4.3.3");
-    public static final ObjectIdentifier sha512WithECDSA_oid =
-            ObjectIdentifier.of("1.2.840.10045.4.3.4");
-    public static final ObjectIdentifier specifiedWithECDSA_oid =
-            ObjectIdentifier.of("1.2.840.10045.4.3");
+    public static final ObjectIdentifier MGF1_oid =
+            ObjectIdentifier.of(KnownOIDs.MGF1);
 
-    /**
-     * Algorithm ID for the PBE encryption algorithms from PKCS#5 and
-     * PKCS#12.
-     */
-    public static final ObjectIdentifier pbeWithMD5AndDES_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.5.3");
-    public static final ObjectIdentifier pbeWithMD5AndRC2_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.5.6");
-    public static final ObjectIdentifier pbeWithSHA1AndDES_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.5.10");
-    public static final ObjectIdentifier pbeWithSHA1AndRC2_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.5.11");
-    public static final ObjectIdentifier pbeWithSHA1AndRC4_128_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.12.1.1");
-    public static final ObjectIdentifier pbeWithSHA1AndRC4_40_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.12.1.2");
-    public static final ObjectIdentifier pbeWithSHA1AndDESede_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.12.1.3");
-    public static final ObjectIdentifier pbeWithSHA1AndRC2_128_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.12.1.5");
-    public static final ObjectIdentifier pbeWithSHA1AndRC2_40_oid =
-            ObjectIdentifier.of("1.2.840.113549.1.12.1.6");
-
-    static {
-        nameTable = new HashMap<>();
-        nameTable.put(MD5_oid, "MD5");
-        nameTable.put(MD2_oid, "MD2");
-        nameTable.put(SHA_oid, "SHA-1");
-        nameTable.put(SHA224_oid, "SHA-224");
-        nameTable.put(SHA256_oid, "SHA-256");
-        nameTable.put(SHA384_oid, "SHA-384");
-        nameTable.put(SHA512_oid, "SHA-512");
-        nameTable.put(SHA512_224_oid, "SHA-512/224");
-        nameTable.put(SHA512_256_oid, "SHA-512/256");
-        nameTable.put(RSAEncryption_oid, "RSA");
-        nameTable.put(RSA_oid, "RSA");
-        nameTable.put(DH_oid, "Diffie-Hellman");
-        nameTable.put(DH_PKIX_oid, "Diffie-Hellman");
-        nameTable.put(DSA_oid, "DSA");
-        nameTable.put(DSA_OIW_oid, "DSA");
-        nameTable.put(EC_oid, "EC");
-        nameTable.put(ECDH_oid, "ECDH");
-
-        nameTable.put(AES_oid, "AES");
-
-        nameTable.put(sha1WithECDSA_oid, "SHA1withECDSA");
-        nameTable.put(sha224WithECDSA_oid, "SHA224withECDSA");
-        nameTable.put(sha256WithECDSA_oid, "SHA256withECDSA");
-        nameTable.put(sha384WithECDSA_oid, "SHA384withECDSA");
-        nameTable.put(sha512WithECDSA_oid, "SHA512withECDSA");
-        nameTable.put(md5WithRSAEncryption_oid, "MD5withRSA");
-        nameTable.put(md2WithRSAEncryption_oid, "MD2withRSA");
-        nameTable.put(sha1WithDSA_oid, "SHA1withDSA");
-        nameTable.put(sha1WithDSA_OIW_oid, "SHA1withDSA");
-        nameTable.put(shaWithDSA_OIW_oid, "SHA1withDSA");
-        nameTable.put(sha224WithDSA_oid, "SHA224withDSA");
-        nameTable.put(sha256WithDSA_oid, "SHA256withDSA");
-        nameTable.put(sha1WithRSAEncryption_oid, "SHA1withRSA");
-        nameTable.put(sha1WithRSAEncryption_OIW_oid, "SHA1withRSA");
-        nameTable.put(sha224WithRSAEncryption_oid, "SHA224withRSA");
-        nameTable.put(sha256WithRSAEncryption_oid, "SHA256withRSA");
-        nameTable.put(sha384WithRSAEncryption_oid, "SHA384withRSA");
-        nameTable.put(sha512WithRSAEncryption_oid, "SHA512withRSA");
-        nameTable.put(sha512_224WithRSAEncryption_oid, "SHA512/224withRSA");
-        nameTable.put(sha512_256WithRSAEncryption_oid, "SHA512/256withRSA");
-        nameTable.put(RSASSA_PSS_oid, "RSASSA-PSS");
-        nameTable.put(RSAES_OAEP_oid, "RSAES-OAEP");
-
-        nameTable.put(pbeWithMD5AndDES_oid, "PBEWithMD5AndDES");
-        nameTable.put(pbeWithMD5AndRC2_oid, "PBEWithMD5AndRC2");
-        nameTable.put(pbeWithSHA1AndDES_oid, "PBEWithSHA1AndDES");
-        nameTable.put(pbeWithSHA1AndRC2_oid, "PBEWithSHA1AndRC2");
-        nameTable.put(pbeWithSHA1AndRC4_128_oid, "PBEWithSHA1AndRC4_128");
-        nameTable.put(pbeWithSHA1AndRC4_40_oid, "PBEWithSHA1AndRC4_40");
-        nameTable.put(pbeWithSHA1AndDESede_oid, "PBEWithSHA1AndDESede");
-        nameTable.put(pbeWithSHA1AndRC2_128_oid, "PBEWithSHA1AndRC2_128");
-        nameTable.put(pbeWithSHA1AndRC2_40_oid, "PBEWithSHA1AndRC2_40");
-    }
+    public static final ObjectIdentifier ed25519_oid =
+            ObjectIdentifier.of(KnownOIDs.Ed25519);
+    public static final ObjectIdentifier ed448_oid =
+            ObjectIdentifier.of(KnownOIDs.Ed448);
 
     /**
      * Creates a signature algorithm name from a digest algorithm
      * name and a encryption algorithm name.
      */
@@ -1042,10 +712,12 @@
             case "RSA":
                 return ifcFfcStrength(KeyUtil.getKeySize(k))
                     + "withRSA";
             case "RSASSA-PSS":
                 return "RSASSA-PSS";
+            case "EDDSA":
+                return edAlgFromKey(k);
             default:
                 return null;
         }
     }
 
@@ -1092,10 +764,12 @@
             return PSSParamsHolder.PSS_256_ID;
         } else if (spec == PSSParamsHolder.PSS_384_SPEC) {
             return PSSParamsHolder.PSS_384_ID;
         } else if (spec == PSSParamsHolder.PSS_512_SPEC) {
             return PSSParamsHolder.PSS_512_ID;
+        } else if (spec instanceof EdDSAParameterSpec) {
+            return AlgorithmId.get(algName);
         } else {
             try {
                 AlgorithmParameters result =
                         AlgorithmParameters.getInstance(algName);
                 result.init(spec);
@@ -1128,10 +802,18 @@
         } else {
             return null;
         }
     }
 
+    private static String edAlgFromKey(PrivateKey k) {
+        if (k instanceof EdECPrivateKey) {
+            EdECPrivateKey edKey = (EdECPrivateKey) k;
+            return edKey.getParams().getName();
+        }
+        return "EdDSA";
+    }
+
     // Values from SP800-57 part 1 rev 4 tables 2 and 3
     private static String ecStrength (int bitLength) {
         if (bitLength >= 512) { // 256 bits of strength
             return "SHA512";
         } else if (bitLength >= 384) {  // 192 bits of strength
