diff a/src/java.base/share/classes/sun/security/util/math/intpoly/IntegerPolynomial448.java b/src/java.base/share/classes/sun/security/util/math/intpoly/IntegerPolynomial448.java
--- a/src/java.base/share/classes/sun/security/util/math/intpoly/IntegerPolynomial448.java
+++ b/src/java.base/share/classes/sun/security/util/math/intpoly/IntegerPolynomial448.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -43,20 +43,21 @@
 
     public IntegerPolynomial448() {
         super(BITS_PER_LIMB, NUM_LIMBS, 1, MODULUS);
     }
 
-    private void modReduceIn(long[] limbs, int index, long x) {
-        limbs[index - NUM_LIMBS] += x;
-        limbs[index - NUM_LIMBS / 2] += x;
+    @Override
+    protected void reduceIn(long[] limbs, long v, int i) {
+        limbs[i - 8] += v;
+        limbs[i - 16] += v;
     }
 
     @Override
     protected void finalCarryReduceLast(long[] limbs) {
         long carry = limbs[numLimbs - 1] >> bitsPerLimb;
         limbs[numLimbs - 1] -= carry << bitsPerLimb;
-        modReduceIn(limbs, numLimbs, carry);
+        reduceIn(limbs, carry, numLimbs);
     }
 
     @Override
     protected void reduce(long[] a) {
 
