diff a/src/java.base/share/classes/sun/security/util/NamedCurve.java b/src/java.base/share/classes/sun/security/util/NamedCurve.java
--- a/src/java.base/share/classes/sun/security/util/NamedCurve.java
+++ b/src/java.base/share/classes/sun/security/util/NamedCurve.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2006, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -27,48 +27,51 @@
 
 import java.io.IOException;
 import java.math.BigInteger;
 
 import java.security.spec.*;
-
+import java.util.Arrays;
 
 /**
  * Contains Elliptic Curve parameters.
  *
  * @since   1.6
  * @author  Andreas Sterbenz
  */
 public final class NamedCurve extends ECParameterSpec {
 
-    // friendly name for toString() output
-    private final String name;
+    // friendly names with stdName followed by aliases
+    private final String[] nameAndAliases;
 
     // well known OID
     private final String oid;
 
     // encoded form (as NamedCurve identified via OID)
     private final byte[] encoded;
 
-    NamedCurve(String name, String oid, EllipticCurve curve,
+    NamedCurve(KnownOIDs ko, EllipticCurve curve,
             ECPoint g, BigInteger n, int h) {
         super(curve, g, n, h);
-        this.name = name;
-        this.oid = oid;
+        String[] aliases = ko.aliases();
+        this.nameAndAliases = new String[aliases.length + 1];
+        nameAndAliases[0] = ko.stdName();
+        System.arraycopy(aliases, 0, nameAndAliases, 1, aliases.length);
 
-        DerOutputStream out = new DerOutputStream();
+        this.oid = ko.value();
 
+        DerOutputStream out = new DerOutputStream();
         try {
-            out.putOID(new ObjectIdentifier(oid));
+            out.putOID(ObjectIdentifier.of(ko));
         } catch (IOException e) {
             throw new RuntimeException("Internal error", e);
         }
-
         encoded = out.toByteArray();
     }
 
-    public String getName() {
-        return name;
+    // returns the curve's standard name followed by its aliases
+    public String[] getNameAndAliases() {
+        return nameAndAliases;
     }
 
     public byte[] getEncoded() {
         return encoded.clone();
     }
@@ -76,8 +79,19 @@
     public String getObjectId() {
         return oid;
     }
 
     public String toString() {
-        return name + " (" + oid + ")";
+        StringBuilder sb = new StringBuilder(nameAndAliases[0]);
+        if (nameAndAliases.length > 1) {
+            sb.append(" [");
+            int j = 1;
+            while (j < nameAndAliases.length - 1) {
+                sb.append(nameAndAliases[j++]);
+                sb.append(',');
+            }
+            sb.append(nameAndAliases[j] + "]");
+        }
+        sb.append(" (" + oid + ")");
+        return sb.toString();
     }
 }
