diff a/src/java.base/share/classes/sun/security/ssl/X509KeyManagerImpl.java b/src/java.base/share/classes/sun/security/ssl/X509KeyManagerImpl.java
--- a/src/java.base/share/classes/sun/security/ssl/X509KeyManagerImpl.java
+++ b/src/java.base/share/classes/sun/security/ssl/X509KeyManagerImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -41,10 +41,11 @@
 import java.util.*;
 import java.util.concurrent.atomic.AtomicLong;
 import javax.net.ssl.*;
 import sun.security.provider.certpath.AlgorithmChecker;
 import sun.security.validator.Validator;
+import sun.security.util.KnownOIDs;
 
 /**
  * The new X509 key manager implementation. The main differences to the
  * old SunX509 key manager are:
  *  . it is based around the KeyStore.Builder API. This allows it to use
@@ -520,18 +521,23 @@
         // enum constant for "no check" (currently not used)
         NONE(Collections.<String>emptySet()),
 
         // enum constant for "tls client" check
         // valid EKU for TLS client: any, tls_client
-        CLIENT(new HashSet<String>(Arrays.asList(new String[] {
-            "2.5.29.37.0", "1.3.6.1.5.5.7.3.2" }))),
+        CLIENT(new HashSet<String>(List.of(
+            KnownOIDs.anyExtendedKeyUsage.value(),
+            KnownOIDs.clientAuth.value()
+        ))),
 
         // enum constant for "tls server" check
         // valid EKU for TLS server: any, tls_server, ns_sgc, ms_sgc
-        SERVER(new HashSet<String>(Arrays.asList(new String[] {
-            "2.5.29.37.0", "1.3.6.1.5.5.7.3.1", "2.16.840.1.113730.4.1",
-            "1.3.6.1.4.1.311.10.3.3" })));
+        SERVER(new HashSet<String>(List.of(
+            KnownOIDs.anyExtendedKeyUsage.value(),
+            KnownOIDs.serverAuth.value(),
+            KnownOIDs.NETSCAPE_ExportApproved.value(),
+            KnownOIDs.MICROSOFT_ExportApproved.value()
+        )));
 
         // set of valid EKU values for this type
         final Set<String> validEku;
 
         CheckType(Set<String> validEku) {
