diff a/src/java.base/share/classes/sun/security/util/math/intpoly/IntegerPolynomial1305.java b/src/java.base/share/classes/sun/security/util/math/intpoly/IntegerPolynomial1305.java
--- a/src/java.base/share/classes/sun/security/util/math/intpoly/IntegerPolynomial1305.java
+++ b/src/java.base/share/classes/sun/security/util/math/intpoly/IntegerPolynomial1305.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -154,27 +154,28 @@
         } else {
             super.encode(v, offset, length, highByte, result);
         }
     }
 
-    private void modReduceIn(long[] limbs, int index, long x) {
+    @Override
+    protected void reduceIn(long[] limbs, long x, int index) {
         // this only works when BITS_PER_LIMB * NUM_LIMBS = POWER exactly
         long reducedValue = (x * SUBTRAHEND);
         limbs[index - NUM_LIMBS] += reducedValue;
     }
 
     @Override
     protected void finalCarryReduceLast(long[] limbs) {
         long carry = limbs[numLimbs - 1] >> bitsPerLimb;
         limbs[numLimbs - 1] -= carry << bitsPerLimb;
-        modReduceIn(limbs, numLimbs, carry);
+        reduceIn(limbs, carry, numLimbs);
     }
 
     protected final void modReduce(long[] limbs, int start, int end) {
 
         for (int i = start; i < end; i++) {
-            modReduceIn(limbs, i, limbs[i]);
+            reduceIn(limbs, limbs[i], i);
             limbs[i] = 0;
         }
     }
 
     protected void modReduce(long[] limbs) {
@@ -201,11 +202,11 @@
         long new4 = carry3 + limbs[4];
 
         long carry4 = carryValue(new4);
         limbs[4] = new4 - (carry4 << BITS_PER_LIMB);
 
-        modReduceIn(limbs, 5, carry4);
+        reduceIn(limbs, carry4, 5);
         carry(limbs);
     }
 
 }
 
