diff a/src/java.base/share/classes/sun/security/util/KeyUtil.java b/src/java.base/share/classes/sun/security/util/KeyUtil.java
--- a/src/java.base/share/classes/sun/security/util/KeyUtil.java
+++ b/src/java.base/share/classes/sun/security/util/KeyUtil.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -25,14 +25,14 @@
 
 package sun.security.util;
 
 import java.security.AlgorithmParameters;
 import java.security.Key;
-import java.security.PrivilegedAction;
-import java.security.AccessController;
 import java.security.InvalidKeyException;
 import java.security.interfaces.ECKey;
+import java.security.interfaces.EdECKey;
+import java.security.interfaces.EdECPublicKey;
 import java.security.interfaces.RSAKey;
 import java.security.interfaces.DSAKey;
 import java.security.interfaces.DSAParams;
 import java.security.SecureRandom;
 import java.security.spec.KeySpec;
@@ -42,10 +42,11 @@
 import javax.crypto.interfaces.DHKey;
 import javax.crypto.interfaces.DHPublicKey;
 import javax.crypto.spec.DHParameterSpec;
 import javax.crypto.spec.DHPublicKeySpec;
 import java.math.BigInteger;
+import java.security.spec.NamedParameterSpec;
 
 import sun.security.jca.JCAUtil;
 
 /**
  * A utility class to get key length, valiate keys, etc.
@@ -94,10 +95,20 @@
             DSAParams params = pubk.getParams();    // params can be null
             size = (params != null) ? params.getP().bitLength() : -1;
         } else if (key instanceof DHKey) {
             DHKey pubk = (DHKey)key;
             size = pubk.getParams().getP().bitLength();
+        } else if (key instanceof EdECKey) {
+            String nc = ((EdECKey) key).getParams().getName();
+            if (nc.equalsIgnoreCase(NamedParameterSpec.ED25519.getName())) {
+                size = 255;
+            } else if (nc.equalsIgnoreCase(
+                    NamedParameterSpec.ED448.getName())) {
+                size = 448;
+            } else {
+                size = -1;
+            }
         }   // Otherwise, it may be a unextractable key of PKCS#11, or
             // a key we are not able to handle.
 
         return size;
     }
