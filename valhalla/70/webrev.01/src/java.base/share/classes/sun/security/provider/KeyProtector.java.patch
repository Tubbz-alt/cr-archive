diff a/src/java.base/share/classes/sun/security/provider/KeyProtector.java b/src/java.base/share/classes/sun/security/provider/KeyProtector.java
--- a/src/java.base/share/classes/sun/security/provider/KeyProtector.java
+++ b/src/java.base/share/classes/sun/security/provider/KeyProtector.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -36,10 +36,11 @@
 
 import sun.security.pkcs.PKCS8Key;
 import sun.security.pkcs.EncryptedPrivateKeyInfo;
 import sun.security.x509.AlgorithmId;
 import sun.security.util.ObjectIdentifier;
+import sun.security.util.KnownOIDs;
 import sun.security.util.DerValue;
 
 /**
  * This is an implementation of a Sun proprietary, exportable algorithm
  * intended for use when protecting (or recovering the cleartext version of)
@@ -103,13 +104,10 @@
 
     private static final int SALT_LEN = 20; // the salt length
     private static final String DIGEST_ALG = "SHA";
     private static final int DIGEST_LEN = 20;
 
-    // defined by JavaSoft
-    private static final String KEY_PROTECTOR_OID = "1.3.6.1.4.1.42.2.17.1.1";
-
     // The password used for protecting/recovering keys passed through this
     // key protector. We store it as a byte array, so that we can digest it.
     private byte[] passwdBytes;
 
     private MessageDigest md;
@@ -211,11 +209,12 @@
 
         // wrap the protected private key in a PKCS#8-style
         // EncryptedPrivateKeyInfo, and returns its encoding
         AlgorithmId encrAlg;
         try {
-            encrAlg = new AlgorithmId(new ObjectIdentifier(KEY_PROTECTOR_OID));
+            encrAlg = new AlgorithmId(ObjectIdentifier.of
+                    (KnownOIDs.JAVASOFT_JDKKeyProtector));
             return new EncryptedPrivateKeyInfo(encrAlg,encrKey).getEncoded();
         } catch (IOException ioe) {
             throw new KeyStoreException(ioe.getMessage());
         }
     }
@@ -233,11 +232,12 @@
         int xorOffset; // offset in xorKey where next digest will be stored
         int encrKeyLen; // the length of the encrpyted key
 
         // do we support the algorithm?
         AlgorithmId encrAlg = encrInfo.getAlgorithm();
-        if (!(encrAlg.getOID().toString().equals(KEY_PROTECTOR_OID))) {
+        if (!(encrAlg.getOID().toString().equals
+                (KnownOIDs.JAVASOFT_JDKKeyProtector.value()))) {
             throw new UnrecoverableKeyException("Unsupported key protection "
                                                 + "algorithm");
         }
 
         byte[] protectedKey = encrInfo.getEncryptedData();
