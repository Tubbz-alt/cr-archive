diff a/src/java.base/share/classes/sun/security/pkcs/PKCS7.java b/src/java.base/share/classes/sun/security/pkcs/PKCS7.java
--- a/src/java.base/share/classes/sun/security/pkcs/PKCS7.java
+++ b/src/java.base/share/classes/sun/security/pkcs/PKCS7.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -817,20 +817,24 @@
             // Insert the timestamp token into the PKCS #7 signer info element
             // (as an unsigned attribute)
             unauthAttrs =
                 new PKCS9Attributes(new PKCS9Attribute[]{
                     new PKCS9Attribute(
-                        PKCS9Attribute.SIGNATURE_TIMESTAMP_TOKEN_STR,
+                        PKCS9Attribute.SIGNATURE_TIMESTAMP_TOKEN_OID,
                         tsToken)});
         }
 
         // Create the SignerInfo
         X500Name issuerName =
             X500Name.asX500Name(signerChain[0].getIssuerX500Principal());
         BigInteger serialNumber = signerChain[0].getSerialNumber();
         String encAlg = AlgorithmId.getEncAlgFromSigAlg(signatureAlgorithm);
         String digAlg = AlgorithmId.getDigAlgFromSigAlg(signatureAlgorithm);
+        if (digAlg == null) {
+            throw new UnsupportedOperationException("Unable to determine " +
+                    "the digest algorithm from the signature algorithm.");
+        }
         SignerInfo signerInfo = new SignerInfo(issuerName, serialNumber,
                                                AlgorithmId.get(digAlg), null,
                                                AlgorithmId.get(encAlg),
                                                signature, unauthAttrs);
 
