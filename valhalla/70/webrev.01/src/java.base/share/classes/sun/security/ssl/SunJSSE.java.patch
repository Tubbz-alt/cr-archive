diff a/src/java.base/share/classes/sun/security/ssl/SunJSSE.java b/src/java.base/share/classes/sun/security/ssl/SunJSSE.java
--- a/src/java.base/share/classes/sun/security/ssl/SunJSSE.java
+++ b/src/java.base/share/classes/sun/security/ssl/SunJSSE.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -26,11 +26,11 @@
 package sun.security.ssl;
 
 import java.security.*;
 import java.util.*;
 import static sun.security.util.SecurityConstants.PROVIDER_VER;
-import static sun.security.provider.SunEntries.createAliases;
+import static sun.security.util.SecurityProviderConstants.*;
 
 /**
  * The JSSE provider.
  *
  * SunJSSE now supports an experimental FIPS compliant mode when used with an
@@ -72,43 +72,43 @@
             return null;
         });
     }
 
     private void ps(String type, String algo, String cn,
-            List<String> aliases, HashMap<String, String> attrs) {
-        putService(new Provider.Service(this, type, algo, cn, aliases, attrs));
+            List<String> a, HashMap<String, String> attrs) {
+        putService(new Provider.Service(this, type, algo, cn, a, attrs));
     }
 
     private void doRegister() {
         ps("Signature", "MD5andSHA1withRSA",
             "sun.security.ssl.RSASignature", null, null);
 
         ps("KeyManagerFactory", "SunX509",
             "sun.security.ssl.KeyManagerFactoryImpl$SunX509", null, null);
         ps("KeyManagerFactory", "NewSunX509",
             "sun.security.ssl.KeyManagerFactoryImpl$X509",
-            createAliases("PKIX"), null);
+            List.of("PKIX"), null);
 
         ps("TrustManagerFactory", "SunX509",
             "sun.security.ssl.TrustManagerFactoryImpl$SimpleFactory",
             null, null);
         ps("TrustManagerFactory", "PKIX",
             "sun.security.ssl.TrustManagerFactoryImpl$PKIXFactory",
-            createAliases("SunPKIX", "X509", "X.509"), null);
+            List.of("SunPKIX", "X509", "X.509"), null);
 
         ps("SSLContext", "TLSv1",
             "sun.security.ssl.SSLContextImpl$TLS10Context",
-            createAliases("SSLv3"), null);
+            List.of("SSLv3"), null);
         ps("SSLContext", "TLSv1.1",
             "sun.security.ssl.SSLContextImpl$TLS11Context", null, null);
         ps("SSLContext", "TLSv1.2",
             "sun.security.ssl.SSLContextImpl$TLS12Context", null, null);
         ps("SSLContext", "TLSv1.3",
             "sun.security.ssl.SSLContextImpl$TLS13Context", null, null);
         ps("SSLContext", "TLS",
             "sun.security.ssl.SSLContextImpl$TLSContext",
-            createAliases("SSL"), null);
+            List.of("SSL"), null);
 
         ps("SSLContext", "DTLSv1.0",
             "sun.security.ssl.SSLContextImpl$DTLS10Context", null, null);
         ps("SSLContext", "DTLSv1.2",
             "sun.security.ssl.SSLContextImpl$DTLS12Context", null, null);
