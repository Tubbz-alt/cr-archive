diff a/src/java.base/share/classes/sun/security/util/math/intpoly/IntegerPolynomial25519.java b/src/java.base/share/classes/sun/security/util/math/intpoly/IntegerPolynomial25519.java
--- a/src/java.base/share/classes/sun/security/util/math/intpoly/IntegerPolynomial25519.java
+++ b/src/java.base/share/classes/sun/security/util/math/intpoly/IntegerPolynomial25519.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -49,10 +49,17 @@
 
     public IntegerPolynomial25519() {
         super(BITS_PER_LIMB, NUM_LIMBS, 1, MODULUS);
     }
 
+    @Override
+    protected void reduceIn(long[] limbs, long v, int i) {
+        long t0 = 19 * v;
+        limbs[i - 10] += (t0 << 5) & LIMB_MASK;
+        limbs[i - 9] += t0 >> 21;
+    }
+
     @Override
     protected void finalCarryReduceLast(long[] limbs) {
 
         long reducedValue = limbs[numLimbs - 1] >> RIGHT_BIT_OFFSET;
         limbs[numLimbs - 1] -= reducedValue << RIGHT_BIT_OFFSET;
@@ -79,21 +86,10 @@
         carry(a, 0, 9);
     }
 
     @Override
     protected void mult(long[] a, long[] b, long[] r) {
-
-        // Use grade-school multiplication into primitives to avoid the
-        // temporary array allocation. This is equivalent to the following
-        // code:
-        //  long[] c = new long[2 * NUM_LIMBS - 1];
-        //  for(int i = 0; i < NUM_LIMBS; i++) {
-        //      for(int j - 0; j < NUM_LIMBS; j++) {
-        //          c[i + j] += a[i] * b[j]
-        //      }
-        //  }
-
         long c0 = (a[0] * b[0]);
         long c1 = (a[0] * b[1]) + (a[1] * b[0]);
         long c2 = (a[0] * b[2]) + (a[1] * b[1]) + (a[2] * b[0]);
         long c3 = (a[0] * b[3]) + (a[1] * b[2]) + (a[2] * b[1]) + (a[3] * b[0]);
         long c4 = (a[0] * b[4]) + (a[1] * b[3]) + (a[2] * b[2]) + (a[3] * b[1]) + (a[4] * b[0]);
@@ -170,11 +166,10 @@
         r[7] = c7 + (reducedValue16 >> RIGHT_BIT_OFFSET);
 
         // carry(0,9)
         carry(r, 0, 9);
     }
-
     @Override
     protected void square(long[] a, long[] r) {
 
         // Use grade-school multiplication with a simple squaring optimization.
         // Multiply into primitives to avoid the temporary array allocation.
