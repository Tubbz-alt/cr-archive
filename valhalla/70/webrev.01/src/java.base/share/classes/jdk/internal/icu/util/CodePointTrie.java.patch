diff a/src/java.base/share/classes/jdk/internal/icu/util/CodePointTrie.java b/src/java.base/share/classes/jdk/internal/icu/util/CodePointTrie.java
--- a/src/java.base/share/classes/jdk/internal/icu/util/CodePointTrie.java
+++ b/src/java.base/share/classes/jdk/internal/icu/util/CodePointTrie.java
@@ -46,12 +46,11 @@
  * For details see http://site.icu-project.org/design/struct/utrie
  *
  * <p>This class is not intended for public subclassing.
  *
  * @see MutableCodePointTrie
- * @draft ICU 63
- * @provisional This API might change or be removed in a future release.
+ * @stable ICU 63
  */
 @SuppressWarnings("deprecation")
 public abstract class CodePointTrie extends CodePointMap {
     /**
      * Selectors for the type of a CodePointTrie.
@@ -61,64 +60,57 @@
      * {@link #getType} will return the actual type.
      *
      * @see MutableCodePointTrie#buildImmutable(CodePointTrie.Type, CodePointTrie.ValueWidth)
      * @see #fromBinary
      * @see #getType
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public enum Type {
         /**
          * Fast/simple/larger BMP data structure.
          * The {@link Fast} subclasses have additional functions for lookup for BMP and supplementary code points.
          *
          * @see Fast
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         FAST,
         /**
          * Small/slower BMP data structure.
          *
          * @see Small
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         SMALL
     }
 
     /**
      * Selectors for the number of bits in a CodePointTrie data value.
      *
      * <p>Use null for {@link #fromBinary} to accept any data value width;
      * {@link #getValueWidth} will return the actual data value width.
      *
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public enum ValueWidth {
         /**
          * The trie stores 16 bits per data value.
          * It returns them as unsigned values 0..0xffff=65535.
          *
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         BITS_16,
         /**
          * The trie stores 32 bits per data value.
          *
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         BITS_32,
         /**
          * The trie stores 8 bits per data value.
          * It returns them as unsigned values 0..0xff=255.
          *
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         BITS_8
     }
 
     private CodePointTrie(char[] index, Data data, int highStart,
@@ -160,12 +152,11 @@
      * @param bytes a buffer containing the binary data of a CodePointTrie
      * @return the trie
      * @see MutableCodePointTrie#MutableCodePointTrie(int, int)
      * @see MutableCodePointTrie#buildImmutable(CodePointTrie.Type, CodePointTrie.ValueWidth)
      * @see #toBinary(OutputStream)
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public static CodePointTrie fromBinary(Type type, ValueWidth valueWidth, ByteBuffer bytes) {
         ByteOrder outerByteOrder = bytes.order();
         try {
             // Enough data for a trie header?
@@ -304,27 +295,24 @@
 
     /**
      * Returns the trie type.
      *
      * @return the trie type
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public abstract Type getType();
     /**
      * Returns the number of bits in a trie data value.
      *
      * @return the number of bits in a trie data value
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public final ValueWidth getValueWidth() { return data.getValueWidth(); }
 
     /**
      * {@inheritDoc}
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     @Override
     public int get(int c) {
         return data.getFromIndex(cpIndex(c));
     }
@@ -332,12 +320,11 @@
     /**
      * Returns a trie value for an ASCII code point, without range checking.
      *
      * @param c the input code point; must be U+0000..U+007F
      * @return The ASCII code point's trie value.
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public final int asciiGet(int c) {
         return ascii[c];
     }
 
@@ -355,12 +342,11 @@
         return value;
     }
 
     /**
      * {@inheritDoc}
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     @Override
     public final boolean getRange(int start, ValueFilter filter, Range range) {
         if (start < 0 || MAX_UNICODE < start) {
             return false;
@@ -513,12 +499,11 @@
      * Writes a representation of the trie to the output stream.
      * Inverse of {@link #fromBinary}.
      *
      * @param os the output stream
      * @return the number of bytes written
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public final int toBinary(OutputStream os) {
         try {
             DataOutputStream dos = new DataOutputStream(os);
 
@@ -779,12 +764,11 @@
     protected abstract int cpIndex(int c);
 
     /**
      * A CodePointTrie with {@link Type#FAST}.
      *
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public static abstract class Fast extends CodePointTrie {
         private Fast(char[] index, Data data, int highStart,
                 int index3NullOffset, int dataNullOffset) {
             super(index, data, highStart, index3NullOffset, dataNullOffset);
@@ -798,21 +782,19 @@
          * @param valueWidth selects the number of bits in a data value; this method throws an exception
          *                  if the valueWidth does not match the binary data;
          *                  use null to accept any data value width
          * @param bytes a buffer containing the binary data of a CodePointTrie
          * @return the trie
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         public static Fast fromBinary(ValueWidth valueWidth, ByteBuffer bytes) {
             return (Fast) CodePointTrie.fromBinary(Type.FAST, valueWidth, bytes);
         }
 
         /**
          * @return {@link Type#FAST}
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         @Override
         public final Type getType() { return Type.FAST; }
 
         /**
@@ -820,23 +802,21 @@
          * Can be used to look up a value for a UTF-16 code unit if other parts of
          * the string processing check for surrogates.
          *
          * @param c the input code point, must be U+0000..U+FFFF
          * @return The BMP code point's trie value.
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         public abstract int bmpGet(int c);
 
         /**
          * Returns a trie value for a supplementary code point (U+10000..U+10FFFF),
          * without range checking.
          *
          * @param c the input code point, must be U+10000..U+10FFFF
          * @return The supplementary code point's trie value.
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         public abstract int suppGet(int c);
 
         /**
          * @internal
@@ -855,12 +835,11 @@
             return dataLength - ERROR_VALUE_NEG_DATA_OFFSET;
         }
 
         /**
          * {@inheritDoc}
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         @Override
         public final StringIterator stringIterator(CharSequence s, int sIndex) {
             return new FastStringIterator(s, sIndex);
         }
@@ -923,12 +902,11 @@
     }
 
     /**
      * A CodePointTrie with {@link Type#SMALL}.
      *
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public static abstract class Small extends CodePointTrie {
         private Small(char[] index, Data data, int highStart,
                 int index3NullOffset, int dataNullOffset) {
             super(index, data, highStart, index3NullOffset, dataNullOffset);
@@ -942,21 +920,19 @@
          * @param valueWidth selects the number of bits in a data value; this method throws an exception
          *                  if the valueWidth does not match the binary data;
          *                  use null to accept any data value width
          * @param bytes a buffer containing the binary data of a CodePointTrie
          * @return the trie
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         public static Small fromBinary(ValueWidth valueWidth, ByteBuffer bytes) {
             return (Small) CodePointTrie.fromBinary(Type.SMALL, valueWidth, bytes);
         }
 
         /**
          * @return {@link Type#SMALL}
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         @Override
         public final Type getType() { return Type.SMALL; }
 
         /**
@@ -976,12 +952,11 @@
             return dataLength - ERROR_VALUE_NEG_DATA_OFFSET;
         }
 
         /**
          * {@inheritDoc}
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         @Override
         public final StringIterator stringIterator(CharSequence s, int sIndex) {
             return new SmallStringIterator(s, sIndex);
         }
@@ -1044,12 +1019,11 @@
     }
 
     /**
      * A CodePointTrie with {@link Type#FAST} and {@link ValueWidth#BITS_16}.
      *
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public static final class Fast16 extends Fast {
         private final char[] dataArray;
 
         Fast16(char[] index, char[] data16, int highStart,
@@ -1063,42 +1037,38 @@
          * Same as {@link CodePointTrie#fromBinary(Type, ValueWidth, ByteBuffer)}
          * with {@link Type#FAST} and {@link ValueWidth#BITS_16}.
          *
          * @param bytes a buffer containing the binary data of a CodePointTrie
          * @return the trie
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         public static Fast16 fromBinary(ByteBuffer bytes) {
             return (Fast16) CodePointTrie.fromBinary(Type.FAST, ValueWidth.BITS_16, bytes);
         }
 
         /**
          * {@inheritDoc}
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         @Override
         public final int get(int c) {
             return dataArray[cpIndex(c)];
         }
 
         /**
          * {@inheritDoc}
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         @Override
         public final int bmpGet(int c) {
             assert 0 <= c && c <= 0xffff;
             return dataArray[fastIndex(c)];
         }
 
         /**
          * {@inheritDoc}
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         @Override
         public final int suppGet(int c) {
             assert 0x10000 <= c && c <= 0x10ffff;
             return dataArray[smallIndex(Type.FAST, c)];
@@ -1106,12 +1076,11 @@
     }
 
     /**
      * A CodePointTrie with {@link Type#FAST} and {@link ValueWidth#BITS_32}.
      *
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public static final class Fast32 extends Fast {
         private final int[] dataArray;
 
         Fast32(char[] index, int[] data32, int highStart,
@@ -1125,42 +1094,38 @@
          * Same as {@link CodePointTrie#fromBinary(Type, ValueWidth, ByteBuffer)}
          * with {@link Type#FAST} and {@link ValueWidth#BITS_32}.
          *
          * @param bytes a buffer containing the binary data of a CodePointTrie
          * @return the trie
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         public static Fast32 fromBinary(ByteBuffer bytes) {
             return (Fast32) CodePointTrie.fromBinary(Type.FAST, ValueWidth.BITS_32, bytes);
         }
 
         /**
          * {@inheritDoc}
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         @Override
         public final int get(int c) {
             return dataArray[cpIndex(c)];
         }
 
         /**
          * {@inheritDoc}
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         @Override
         public final int bmpGet(int c) {
             assert 0 <= c && c <= 0xffff;
             return dataArray[fastIndex(c)];
         }
 
         /**
          * {@inheritDoc}
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         @Override
         public final int suppGet(int c) {
             assert 0x10000 <= c && c <= 0x10ffff;
             return dataArray[smallIndex(Type.FAST, c)];
@@ -1168,12 +1133,11 @@
     }
 
     /**
      * A CodePointTrie with {@link Type#FAST} and {@link ValueWidth#BITS_8}.
      *
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public static final class Fast8 extends Fast {
         private final byte[] dataArray;
 
         Fast8(char[] index, byte[] data8, int highStart,
@@ -1187,42 +1151,38 @@
          * Same as {@link CodePointTrie#fromBinary(Type, ValueWidth, ByteBuffer)}
          * with {@link Type#FAST} and {@link ValueWidth#BITS_8}.
          *
          * @param bytes a buffer containing the binary data of a CodePointTrie
          * @return the trie
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         public static Fast8 fromBinary(ByteBuffer bytes) {
             return (Fast8) CodePointTrie.fromBinary(Type.FAST, ValueWidth.BITS_8, bytes);
         }
 
         /**
          * {@inheritDoc}
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         @Override
         public final int get(int c) {
             return dataArray[cpIndex(c)] & 0xff;
         }
 
         /**
          * {@inheritDoc}
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         @Override
         public final int bmpGet(int c) {
             assert 0 <= c && c <= 0xffff;
             return dataArray[fastIndex(c)] & 0xff;
         }
 
         /**
          * {@inheritDoc}
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         @Override
         public final int suppGet(int c) {
             assert 0x10000 <= c && c <= 0x10ffff;
             return dataArray[smallIndex(Type.FAST, c)] & 0xff;
@@ -1230,12 +1190,11 @@
     }
 
     /**
      * A CodePointTrie with {@link Type#SMALL} and {@link ValueWidth#BITS_16}.
      *
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public static final class Small16 extends Small {
         Small16(char[] index, char[] data16, int highStart,
                 int index3NullOffset, int dataNullOffset) {
             super(index, new Data16(data16), highStart, index3NullOffset, dataNullOffset);
@@ -1246,23 +1205,21 @@
          * Same as {@link CodePointTrie#fromBinary(Type, ValueWidth, ByteBuffer)}
          * with {@link Type#SMALL} and {@link ValueWidth#BITS_16}.
          *
          * @param bytes a buffer containing the binary data of a CodePointTrie
          * @return the trie
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         public static Small16 fromBinary(ByteBuffer bytes) {
             return (Small16) CodePointTrie.fromBinary(Type.SMALL, ValueWidth.BITS_16, bytes);
         }
     }
 
     /**
      * A CodePointTrie with {@link Type#SMALL} and {@link ValueWidth#BITS_32}.
      *
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public static final class Small32 extends Small {
         Small32(char[] index, int[] data32, int highStart,
                 int index3NullOffset, int dataNullOffset) {
             super(index, new Data32(data32), highStart, index3NullOffset, dataNullOffset);
@@ -1273,23 +1230,21 @@
          * Same as {@link CodePointTrie#fromBinary(Type, ValueWidth, ByteBuffer)}
          * with {@link Type#SMALL} and {@link ValueWidth#BITS_32}.
          *
          * @param bytes a buffer containing the binary data of a CodePointTrie
          * @return the trie
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         public static Small32 fromBinary(ByteBuffer bytes) {
             return (Small32) CodePointTrie.fromBinary(Type.SMALL, ValueWidth.BITS_32, bytes);
         }
     }
 
     /**
      * A CodePointTrie with {@link Type#SMALL} and {@link ValueWidth#BITS_8}.
      *
-     * @draft ICU 63
-     * @provisional This API might change or be removed in a future release.
+     * @stable ICU 63
      */
     public static final class Small8 extends Small {
         Small8(char[] index, byte[] data8, int highStart,
                 int index3NullOffset, int dataNullOffset) {
             super(index, new Data8(data8), highStart, index3NullOffset, dataNullOffset);
@@ -1300,12 +1255,11 @@
          * Same as {@link CodePointTrie#fromBinary(Type, ValueWidth, ByteBuffer)}
          * with {@link Type#SMALL} and {@link ValueWidth#BITS_8}.
          *
          * @param bytes a buffer containing the binary data of a CodePointTrie
          * @return the trie
-         * @draft ICU 63
-         * @provisional This API might change or be removed in a future release.
+         * @stable ICU 63
          */
         public static Small8 fromBinary(ByteBuffer bytes) {
             return (Small8) CodePointTrie.fromBinary(Type.SMALL, ValueWidth.BITS_8, bytes);
         }
     }
