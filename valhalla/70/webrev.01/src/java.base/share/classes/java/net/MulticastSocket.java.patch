diff a/src/java.base/share/classes/java/net/MulticastSocket.java b/src/java.base/share/classes/java/net/MulticastSocket.java
--- a/src/java.base/share/classes/java/net/MulticastSocket.java
+++ b/src/java.base/share/classes/java/net/MulticastSocket.java
@@ -26,13 +26,10 @@
 package java.net;
 
 import java.io.IOException;
 import java.nio.channels.DatagramChannel;
 import java.nio.channels.MulticastChannel;
-import java.util.Collections;
-import java.util.Enumeration;
-import java.util.Set;
 
 /**
  * The multicast datagram socket class is useful for sending
  * and receiving IP multicast packets. A MulticastSocket is
  * a (UDP) DatagramSocket, with additional capabilities for
@@ -133,15 +130,23 @@
  * @author Pavani Diwanji
  * @since 1.1
  */
 public class MulticastSocket extends DatagramSocket {
 
+    @Override
+    final MulticastSocket delegate() {
+        return (MulticastSocket) super.delegate();
+    }
+
     /**
-     * Used on some platforms to record if an outgoing interface
-     * has been set for this socket.
+     * Create a MulticastSocket that delegates to the given delegate if not null.
+     * @param delegate the delegate, can be null.
      */
-    private boolean interfaceSet;
+    MulticastSocket(MulticastSocket delegate)  {
+        super(delegate);
+    }
+
 
     /**
      * Create a multicast socket.
      *
      * <p>
@@ -214,48 +219,13 @@
      * @see      java.net.DatagramSocket#setReuseAddress(boolean)
      *
      * @since 1.4
      */
     public MulticastSocket(SocketAddress bindaddr) throws IOException {
-        super((SocketAddress) null);
-
-        // No further initialization when this is a DatagramChannel socket adaptor
-        if (this instanceof sun.nio.ch.DatagramSocketAdaptor)
-            return;
-
-        // Enable SO_REUSEADDR before binding
-        setReuseAddress(true);
-
-        if (bindaddr != null) {
-            try {
-                bind(bindaddr);
-            } finally {
-                if (!isBound()) {
-                    close();
-                }
-            }
-        }
+        this(createDelegate(bindaddr, MulticastSocket.class));
     }
 
-    /**
-     * The lock on the socket's TTL. This is for set/getTTL and
-     * send(packet,ttl).
-     */
-    private Object ttlLock = new Object();
-
-    /**
-     * The lock on the socket's interface - used by setInterface
-     * and getInterface
-     */
-    private Object infLock = new Object();
-
-    /**
-     * The "last" interface set by setInterface on this MulticastSocket
-     */
-    private InetAddress infAddress = null;
-
-
     /**
      * Set the default time-to-live for multicast packets sent out
      * on this {@code MulticastSocket} in order to control the
      * scope of the multicasts.
      *
@@ -269,13 +239,11 @@
      *             <b>int</b> instead of <b>byte</b> as the type for ttl.
      * @see #getTTL()
      */
     @Deprecated
     public void setTTL(byte ttl) throws IOException {
-        if (isClosed())
-            throw new SocketException("Socket is closed");
-        getImpl().setTTL(ttl);
+        delegate().setTTL(ttl);
     }
 
     /**
      * Set the default time-to-live for multicast packets sent out
      * on this {@code MulticastSocket} in order to control the
@@ -295,16 +263,11 @@
      *
      * @see #getTimeToLive()
      * @since 1.2
      */
     public void setTimeToLive(int ttl) throws IOException {
-        if (ttl < 0 || ttl > 255) {
-            throw new IllegalArgumentException("ttl out of range");
-        }
-        if (isClosed())
-            throw new SocketException("Socket is closed");
-        getImpl().setTimeToLive(ttl);
+        delegate().setTimeToLive(ttl);
     }
 
     /**
      * Get the default time-to-live for multicast packets sent out on
      * the socket.
@@ -316,13 +279,11 @@
      * an <b>int</b> instead of a <b>byte</b>.
      * @see #setTTL(byte)
      */
     @Deprecated
     public byte getTTL() throws IOException {
-        if (isClosed())
-            throw new SocketException("Socket is closed");
-        return getImpl().getTTL();
+        return delegate().getTTL();
     }
 
     /**
      * Get the default time-to-live for multicast packets sent out on
      * the socket.
@@ -331,13 +292,11 @@
      * @return the default time-to-live value
      * @see #setTimeToLive(int)
      * @since 1.2
      */
     public int getTimeToLive() throws IOException {
-        if (isClosed())
-            throw new SocketException("Socket is closed");
-        return getImpl().getTimeToLive();
+        return delegate().getTimeToLive();
     }
 
     /**
      * Joins a multicast group. Its behavior may be affected by
      * {@code setInterface} or {@code setNetworkInterface}.
@@ -357,35 +316,11 @@
      *             {@link #joinGroup(SocketAddress, NetworkInterface)} instead.
      * @see        SecurityManager#checkMulticast(InetAddress)
      */
     @Deprecated(since="14")
     public void joinGroup(InetAddress mcastaddr) throws IOException {
-        if (isClosed()) {
-            throw new SocketException("Socket is closed");
-        }
-
-        checkAddress(mcastaddr, "joinGroup");
-        SecurityManager security = System.getSecurityManager();
-        if (security != null) {
-            security.checkMulticast(mcastaddr);
-        }
-
-        if (!mcastaddr.isMulticastAddress()) {
-            throw new SocketException("Not a multicast address");
-        }
-
-        /**
-         * required for some platforms where it's not possible to join
-         * a group without setting the interface first.
-         */
-        NetworkInterface defaultInterface = NetworkInterface.getDefault();
-
-        if (!interfaceSet && defaultInterface != null) {
-            setNetworkInterface(defaultInterface);
-        }
-
-        getImpl().join(mcastaddr);
+        delegate().joinGroup(mcastaddr);
     }
 
     /**
      * Leave a multicast group. Its behavior may be affected by
      * {@code setInterface} or {@code setNetworkInterface}.
@@ -404,25 +339,11 @@
      *             {@link #leaveGroup(SocketAddress, NetworkInterface)} instead.
      * @see        SecurityManager#checkMulticast(InetAddress)
      */
     @Deprecated(since="14")
     public void leaveGroup(InetAddress mcastaddr) throws IOException {
-        if (isClosed()) {
-            throw new SocketException("Socket is closed");
-        }
-
-        checkAddress(mcastaddr, "leaveGroup");
-        SecurityManager security = System.getSecurityManager();
-        if (security != null) {
-            security.checkMulticast(mcastaddr);
-        }
-
-        if (!mcastaddr.isMulticastAddress()) {
-            throw new SocketException("Not a multicast address");
-        }
-
-        getImpl().leave(mcastaddr);
+        delegate().leaveGroup(mcastaddr);
     }
 
     /**
      * Joins the specified multicast group at the specified interface.
      *
@@ -450,30 +371,11 @@
      * @see    DatagramChannel#join(InetAddress, NetworkInterface)
      * @since  1.4
      */
     public void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf)
         throws IOException {
-        if (isClosed())
-            throw new SocketException("Socket is closed");
-
-        if (mcastaddr == null || !(mcastaddr instanceof InetSocketAddress))
-            throw new IllegalArgumentException("Unsupported address type");
-
-        if (oldImpl)
-            throw new UnsupportedOperationException();
-
-        checkAddress(((InetSocketAddress)mcastaddr).getAddress(), "joinGroup");
-        SecurityManager security = System.getSecurityManager();
-        if (security != null) {
-            security.checkMulticast(((InetSocketAddress)mcastaddr).getAddress());
-        }
-
-        if (!((InetSocketAddress)mcastaddr).getAddress().isMulticastAddress()) {
-            throw new SocketException("Not a multicast address");
-        }
-
-        getImpl().joinGroup(mcastaddr, netIf);
+        delegate().joinGroup(mcastaddr, netIf);
     }
 
     /**
      * Leave a multicast group on a specified local interface.
      *
@@ -498,30 +400,11 @@
      * @see    SecurityManager#checkMulticast(InetAddress)
      * @since  1.4
      */
     public void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf)
         throws IOException {
-        if (isClosed())
-            throw new SocketException("Socket is closed");
-
-        if (mcastaddr == null || !(mcastaddr instanceof InetSocketAddress))
-            throw new IllegalArgumentException("Unsupported address type");
-
-        if (oldImpl)
-            throw new UnsupportedOperationException();
-
-        checkAddress(((InetSocketAddress)mcastaddr).getAddress(), "leaveGroup");
-        SecurityManager security = System.getSecurityManager();
-        if (security != null) {
-            security.checkMulticast(((InetSocketAddress)mcastaddr).getAddress());
-        }
-
-        if (!((InetSocketAddress)mcastaddr).getAddress().isMulticastAddress()) {
-            throw new SocketException("Not a multicast address");
-        }
-
-        getImpl().leaveGroup(mcastaddr, netIf);
+        delegate().leaveGroup(mcastaddr, netIf);
      }
 
     /**
      * Set the multicast network interface used by methods
      * whose behavior would be affected by the value of the
@@ -535,19 +418,11 @@
      *             {@link #setNetworkInterface(NetworkInterface)} instead.
      * @see        #getInterface()
      */
     @Deprecated(since="14")
     public void setInterface(InetAddress inf) throws SocketException {
-        if (isClosed()) {
-            throw new SocketException("Socket is closed");
-        }
-        checkAddress(inf, "setInterface");
-        synchronized (infLock) {
-            getImpl().setOption(SocketOptions.IP_MULTICAST_IF, inf);
-            infAddress = inf;
-            interfaceSet = true;
-        }
+        delegate().setInterface(inf);
     }
 
     /**
      * Retrieve the address of the network interface used for
      * multicast packets.
@@ -563,57 +438,11 @@
      *             Use {@link #getNetworkInterface()} instead.
      * @see        #setInterface(java.net.InetAddress)
      */
     @Deprecated(since="14")
     public InetAddress getInterface() throws SocketException {
-        if (isClosed()) {
-            throw new SocketException("Socket is closed");
-        }
-        synchronized (infLock) {
-            InetAddress ia =
-                (InetAddress)getImpl().getOption(SocketOptions.IP_MULTICAST_IF);
-
-            /**
-             * No previous setInterface or interface can be
-             * set using setNetworkInterface
-             */
-            if (infAddress == null) {
-                return ia;
-            }
-
-            /**
-             * Same interface set with setInterface?
-             */
-            if (ia.equals(infAddress)) {
-                return ia;
-            }
-
-            /**
-             * Different InetAddress from what we set with setInterface
-             * so enumerate the current interface to see if the
-             * address set by setInterface is bound to this interface.
-             */
-            try {
-                NetworkInterface ni = NetworkInterface.getByInetAddress(ia);
-                Enumeration<InetAddress> addrs = ni.getInetAddresses();
-                while (addrs.hasMoreElements()) {
-                    InetAddress addr = addrs.nextElement();
-                    if (addr.equals(infAddress)) {
-                        return infAddress;
-                    }
-                }
-
-                /**
-                 * No match so reset infAddress to indicate that the
-                 * interface has changed via means
-                 */
-                infAddress = null;
-                return ia;
-            } catch (Exception e) {
-                return ia;
-            }
-        }
+        return delegate().getInterface();
     }
 
     /**
      * Specify the network interface for outgoing multicast datagrams
      * sent on this socket.
@@ -624,16 +453,11 @@
      * @see #getNetworkInterface()
      * @since 1.4
      */
     public void setNetworkInterface(NetworkInterface netIf)
         throws SocketException {
-
-        synchronized (infLock) {
-            getImpl().setOption(SocketOptions.IP_MULTICAST_IF2, netIf);
-            infAddress = null;
-            interfaceSet = true;
-        }
+        delegate().setNetworkInterface(netIf);
     }
 
     /**
      * Get the multicast network interface set.
      *
@@ -644,19 +468,11 @@
      *         a single InetAddress to represent any local address.
      * @see    #setNetworkInterface(NetworkInterface)
      * @since  1.4
      */
     public NetworkInterface getNetworkInterface() throws SocketException {
-        NetworkInterface ni
-            = (NetworkInterface)getImpl().getOption(SocketOptions.IP_MULTICAST_IF2);
-        if (ni == null) {
-            InetAddress[] addrs = new InetAddress[1];
-            addrs[0] = InetAddress.anyLocalAddress();
-            return new NetworkInterface(addrs[0].getHostName(), 0, addrs);
-        } else {
-            return ni;
-        }
+        return delegate().getNetworkInterface();
     }
 
     /**
      * Disable/Enable local loopback of multicast datagrams.
      * The option is used by the platform's networking code as a hint
@@ -676,11 +492,11 @@
      *             disables it.
      * @see        #getLoopbackMode
      */
     @Deprecated(since="14")
     public void setLoopbackMode(boolean disable) throws SocketException {
-        getImpl().setOption(SocketOptions.IP_MULTICAST_LOOP, Boolean.valueOf(disable));
+        delegate().setLoopbackMode(disable);
     }
 
     /**
      * Get the setting for local loopback of multicast datagrams.
      *
@@ -692,11 +508,11 @@
      *             instead.
      * @see        #setLoopbackMode
      */
     @Deprecated(since="14")
     public boolean getLoopbackMode() throws SocketException {
-        return ((Boolean)getImpl().getOption(SocketOptions.IP_MULTICAST_LOOP)).booleanValue();
+        return delegate().getLoopbackMode();
     }
 
     /**
      * Sends a datagram packet to the destination, with a TTL (time-to-live)
      * other than the default for the socket.  This method
@@ -753,62 +569,8 @@
      * @see SecurityManager#checkConnect
      */
     @Deprecated
     public void send(DatagramPacket p, byte ttl)
         throws IOException {
-            if (isClosed())
-                throw new SocketException("Socket is closed");
-            synchronized(ttlLock) {
-                synchronized(p) {
-                    InetAddress packetAddress = p.getAddress();
-                    int packetPort = p.getPort();
-                    checkAddress(packetAddress, "send");
-                    if (connectState == ST_NOT_CONNECTED) {
-                        if (packetAddress == null) {
-                            throw new IllegalArgumentException("Address not set");
-                        }
-                        if (packetPort < 0 || packetPort > 0xFFFF)
-                            throw new IllegalArgumentException("port out of range:" + packetPort);
-                        // Security manager makes sure that the multicast address
-                        // is allowed one and that the ttl used is less
-                        // than the allowed maxttl.
-                        SecurityManager security = System.getSecurityManager();
-                        if (security != null) {
-                            if (packetAddress.isMulticastAddress()) {
-                                security.checkMulticast(packetAddress, ttl);
-                            } else {
-                                security.checkConnect(packetAddress.getHostAddress(),
-                                        packetPort);
-                            }
-                        }
-                    } else {
-                        // we're connected
-                        if (packetAddress == null) {
-                            p.setAddress(connectedAddress);
-                            p.setPort(connectedPort);
-                        } else if ((!packetAddress.equals(connectedAddress)) ||
-                                packetPort != connectedPort) {
-                            throw new IllegalArgumentException("connected address and packet address" +
-                                                        " differ");
-                        }
-                    }
-                    byte dttl = getTTL();
-                    try {
-                        if (ttl != dttl) {
-                            // set the ttl
-                            getImpl().setTTL(ttl);
-                        }
-                        if (packetPort == 0) {
-                            throw new SocketException("Can't send to port 0");
-                        }
-                        // call the datagram method to send
-                        getImpl().send(p);
-                    } finally {
-                        // set it back to default
-                        if (ttl != dttl) {
-                            getImpl().setTTL(dttl);
-                        }
-                    }
-                } // synch p
-            }  //synch ttl
-    } //method
+        delegate().send(p, ttl);
+    }
 }
