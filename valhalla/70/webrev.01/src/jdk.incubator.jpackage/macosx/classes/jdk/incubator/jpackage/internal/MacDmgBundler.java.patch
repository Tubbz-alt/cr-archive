diff a/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacDmgBundler.java b/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacDmgBundler.java
--- a/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacDmgBundler.java
+++ b/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacDmgBundler.java
@@ -66,22 +66,22 @@
         IOUtils.writableOutputDir(outdir.toPath());
 
         File appImageDir = APP_IMAGE_TEMP_ROOT.fetchFrom(params);
         try {
             appImageDir.mkdirs();
+            File appLocation = prepareAppBundle(params);
 
-            if (prepareAppBundle(params) != null &&
-                    prepareConfigFiles(params)) {
+            if (appLocation != null && prepareConfigFiles(params)) {
                 File configScript = getConfig_Script(params);
                 if (configScript.exists()) {
                     Log.verbose(MessageFormat.format(
                             I18N.getString("message.running-script"),
                             configScript.getAbsolutePath()));
                     IOUtils.run("bash", configScript);
                 }
 
-                return buildDMG(params, outdir);
+                return buildDMG(params, appLocation, outdir);
             }
             return null;
         } catch (IOException ex) {
             Log.verbose(ex);
             throw new PackagerException(ex);
@@ -115,12 +115,11 @@
         data.put("DEPLOY_VOLUME_URL", volumeUrl);
         data.put("DEPLOY_BG_FILE", bgFile.toString());
         data.put("DEPLOY_VOLUME_PATH", volumePath.toString());
         data.put("DEPLOY_APPLICATION_NAME", APP_NAME.fetchFrom(params));
 
-        data.put("DEPLOY_INSTALL_LOCATION", MAC_INSTALL_DIR.fetchFrom(params));
-        data.put("DEPLOY_INSTALL_NAME", MAC_INSTALL_DIR.fetchFrom(params));
+        data.put("DEPLOY_INSTALL_LOCATION", getInstallDir(params));
 
         createResource(DEFAULT_DMG_SETUP_SCRIPT, params)
                 .setCategory(I18N.getString("resource.dmg-setup-script"))
                 .setSubstitutionData(data)
                 .saveToFile(dmgSetup);
@@ -251,13 +250,12 @@
         } catch (IOException ignored) {}
 
         return null;
     }
 
-    private File buildDMG(
-            Map<String, ? super Object> params, File outdir)
-            throws IOException {
+    private File buildDMG( Map<String, ? super Object> params,
+            File appLocation, File outdir) throws IOException {
         File imagesRoot = IMAGES_ROOT.fetchFrom(params);
         if (!imagesRoot.exists()) imagesRoot.mkdirs();
 
         File protoDMG = new File(imagesRoot,
                 APP_NAME.fetchFrom(params) +"-tmp.dmg");
@@ -267,10 +265,28 @@
         File srcFolder = APP_IMAGE_TEMP_ROOT.fetchFrom(params);
         File predefinedImage =
                 StandardBundlerParam.getPredefinedAppImage(params);
         if (predefinedImage != null) {
             srcFolder = predefinedImage;
+        } else if (StandardBundlerParam.isRuntimeInstaller(params)) {
+            Path newRoot = Files.createTempDirectory(
+                TEMP_ROOT.fetchFrom(params).toPath(), "root-");
+
+            // first, is this already a runtime with
+            // <runtime>/Contents/Home - if so we need the Home dir
+            Path original = appLocation.toPath();
+            Path home = original.resolve("Contents/Home");
+            Path source = (Files.exists(home)) ? home : original;
+
+            // Then we need to put back the <NAME>/Content/Home
+            Path root = newRoot.resolve(
+                    MAC_CF_BUNDLE_IDENTIFIER.fetchFrom(params));
+            Path dest = root.resolve("Contents/Home");
+
+            IOUtils.copyRecursive(source, dest);
+
+            srcFolder = newRoot.toFile();
         }
 
         Log.verbose(MessageFormat.format(I18N.getString(
                 "message.creating-dmg-file"), finalDMG.getAbsolutePath()));
 
@@ -308,23 +324,33 @@
                 "-mountroot", imagesRoot.getAbsolutePath());
         IOUtils.exec(pb, false, null, true);
 
         File mountedRoot = new File(imagesRoot.getAbsolutePath(),
                     APP_NAME.fetchFrom(params));
-
         try {
-            // volume icon
-            File volumeIconFile = new File(mountedRoot, ".VolumeIcon.icns");
-            IOUtils.copyFile(getConfig_VolumeIcon(params),
-                    volumeIconFile);
-
             // background image
             File bgdir = new File(mountedRoot, BACKGROUND_IMAGE_FOLDER);
             bgdir.mkdirs();
             IOUtils.copyFile(getConfig_VolumeBackground(params),
                     new File(bgdir, BACKGROUND_IMAGE));
 
+            // We will not consider setting background image and creating link
+            // to install-dir in DMG as critical error, since it can fail in
+            // headless enviroment.
+            try {
+                pb = new ProcessBuilder("osascript",
+                        getConfig_VolumeScript(params).getAbsolutePath());
+                IOUtils.exec(pb);
+            } catch (IOException ex) {
+                Log.verbose(ex);
+            }
+
+            // volume icon
+            File volumeIconFile = new File(mountedRoot, ".VolumeIcon.icns");
+            IOUtils.copyFile(getConfig_VolumeIcon(params),
+                    volumeIconFile);
+
             // Indicate that we want a custom icon
             // NB: attributes of the root directory are ignored
             // when creating the volume
             // Therefore we have to do this after we mount image
             String setFileUtility = findSetFileUtility();
@@ -354,20 +380,10 @@
                 }
             } else {
                 Log.verbose(I18N.getString("message.setfile.dmg"));
             }
 
-            // We will not consider setting background image and creating link to
-            // /Application folder in DMG as critical error, since it can fail in
-            // headless enviroment.
-            try {
-                pb = new ProcessBuilder("osascript",
-                        getConfig_VolumeScript(params).getAbsolutePath());
-                IOUtils.exec(pb);
-            } catch (IOException ex) {
-                Log.verbose(ex);
-            }
         } finally {
             // Detach the temporary image
             pb = new ProcessBuilder(
                     hdiutil,
                     "detach",
@@ -491,7 +507,6 @@
 
     @Override
     public boolean isDefault() {
         return true;
     }
-
 }
