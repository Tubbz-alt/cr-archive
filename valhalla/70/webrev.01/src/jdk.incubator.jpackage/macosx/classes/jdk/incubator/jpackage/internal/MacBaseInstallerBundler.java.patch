diff a/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacBaseInstallerBundler.java b/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacBaseInstallerBundler.java
--- a/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacBaseInstallerBundler.java
+++ b/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacBaseInstallerBundler.java
@@ -81,21 +81,10 @@
             Arguments.CLIOptions.MAC_SIGNING_KEYCHAIN.getId(),
             String.class,
             params -> "",
             null);
 
-    public static final BundlerParamInfo<String> MAC_INSTALL_DIR =
-            new StandardBundlerParam<>(
-            "mac-install-dir",
-            String.class,
-             params -> {
-                 String dir = INSTALL_DIR.fetchFrom(params);
-                 return (dir != null) ? dir : "/Applications";
-             },
-            (s, p) -> s
-    );
-
     public static final BundlerParamInfo<String> INSTALLER_NAME =
             new StandardBundlerParam<> (
             "mac.installerName",
             String.class,
             params -> {
@@ -109,10 +98,23 @@
                     return nm + "-" + version;
                 }
             },
             (s, p) -> s);
 
+    protected static String getInstallDir(
+            Map<String, ? super Object>  params) {
+        String returnValue = INSTALL_DIR.fetchFrom(params);
+        if (returnValue == null) {
+            if (StandardBundlerParam.isRuntimeInstaller(params)) {
+                returnValue = "/Library/Java/JavaVirtualMachines";
+            } else {
+               returnValue = "/Applications";
+            }
+        }
+        return returnValue;
+    }
+
     protected void validateAppImageAndBundeler(
             Map<String, ? super Object> params) throws ConfigException {
         if (PREDEFINED_APP_IMAGE.fetchFrom(params) != null) {
             File applicationImage = PREDEFINED_APP_IMAGE.fetchFrom(params);
             if (!applicationImage.exists()) {
