diff a/src/hotspot/os/windows/pdh_interface.cpp b/src/hotspot/os/windows/pdh_interface.cpp
--- a/src/hotspot/os/windows/pdh_interface.cpp
+++ b/src/hotspot/os/windows/pdh_interface.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -35,20 +35,22 @@
 typedef DWORD      (WINAPI *PdhGetFormattedCounterValue_Fn)(HCOUNTER, DWORD, LPDWORD, PPDH_FMT_COUNTERVALUE);
 typedef PDH_STATUS (WINAPI *PdhEnumObjectItems_Fn)(LPCTSTR, LPCTSTR, LPCTSTR, LPTSTR, LPDWORD, LPTSTR, LPDWORD, DWORD, DWORD);
 typedef PDH_STATUS (WINAPI *PdhRemoveCounter_Fn)(HCOUNTER);
 typedef PDH_STATUS (WINAPI *PdhLookupPerfNameByIndex_Fn)(LPCSTR, DWORD, LPSTR, LPDWORD);
 typedef PDH_STATUS (WINAPI *PdhMakeCounterPath_Fn)(PDH_COUNTER_PATH_ELEMENTS*, LPTSTR, LPDWORD, DWORD);
+typedef PDH_STATUS (WINAPI *PdhExpandWildCardPath_Fn)(LPCSTR, LPCSTR, PZZSTR, LPDWORD, DWORD);
 
 PdhAddCounter_Fn PdhDll::_PdhAddCounter = NULL;
 PdhOpenQuery_Fn  PdhDll::_PdhOpenQuery = NULL;
 PdhCloseQuery_Fn PdhDll::_PdhCloseQuery = NULL;
 PdhCollectQueryData_Fn PdhDll::_PdhCollectQueryData = NULL;
 PdhGetFormattedCounterValue_Fn PdhDll::_PdhGetFormattedCounterValue = NULL;
 PdhEnumObjectItems_Fn PdhDll::_PdhEnumObjectItems = NULL;
 PdhRemoveCounter_Fn PdhDll::_PdhRemoveCounter = NULL;
 PdhLookupPerfNameByIndex_Fn PdhDll::_PdhLookupPerfNameByIndex = NULL;
 PdhMakeCounterPath_Fn PdhDll::_PdhMakeCounterPath = NULL;
+PdhExpandWildCardPath_Fn PdhDll::_PdhExpandWildCardPath = NULL;
 
 LONG PdhDll::_critical_section = 0;
 LONG PdhDll::_initialized = 0;
 LONG PdhDll::_pdh_reference_count = 0;
 HMODULE PdhDll::_hModule = NULL;
@@ -66,10 +68,11 @@
   _PdhGetFormattedCounterValue = (PdhGetFormattedCounterValue_Fn)::GetProcAddress(_hModule, "PdhGetFormattedCounterValue");
   _PdhEnumObjectItems          = (PdhEnumObjectItems_Fn)::GetProcAddress(_hModule, "PdhEnumObjectItemsA");
   _PdhRemoveCounter            = (PdhRemoveCounter_Fn)::GetProcAddress(_hModule, "PdhRemoveCounter");
   _PdhLookupPerfNameByIndex    = (PdhLookupPerfNameByIndex_Fn)::GetProcAddress(_hModule, "PdhLookupPerfNameByIndexA");
   _PdhMakeCounterPath          = (PdhMakeCounterPath_Fn)::GetProcAddress(_hModule, "PdhMakeCounterPathA");
+  _PdhExpandWildCardPath       = (PdhExpandWildCardPath_Fn)::GetProcAddress(_hModule, "PdhExpandWildCardPathA");
   InterlockedExchange(&_initialized, 1);
 }
 
 bool PdhDll::PdhDetach(void) {
   LONG prev_ref_count = InterlockedExchangeAdd(&_pdh_reference_count, -1);
@@ -86,10 +89,11 @@
         _PdhGetFormattedCounterValue = NULL;
         _PdhEnumObjectItems = NULL;
         _PdhRemoveCounter = NULL;
         _PdhLookupPerfNameByIndex = NULL;
         _PdhMakeCounterPath = NULL;
+        _PdhExpandWildCardPath = NULL;
         InterlockedExchange(&_initialized, 0);
       }
     }
   }
   return ret != 0;
@@ -107,11 +111,11 @@
   while (InterlockedCompareExchange(&_critical_section, 0, 1) == 0);
   return (_PdhAddCounter != NULL && _PdhOpenQuery != NULL
          && _PdhCloseQuery != NULL && PdhCollectQueryData != NULL
          && _PdhGetFormattedCounterValue != NULL && _PdhEnumObjectItems != NULL
          && _PdhRemoveCounter != NULL && PdhLookupPerfNameByIndex != NULL
-         && _PdhMakeCounterPath != NULL);
+         && _PdhMakeCounterPath != NULL && _PdhExpandWildCardPath != NULL);
 }
 
 PDH_STATUS PdhDll::PdhAddCounter(HQUERY hQuery, LPCSTR szFullCounterPath, DWORD dwUserData, HCOUNTER* phCounter) {
   assert(_initialized && _PdhAddCounter != NULL, "PdhAvailable() not yet called");
   return _PdhAddCounter(hQuery, szFullCounterPath, dwUserData, phCounter);
@@ -158,8 +162,13 @@
 PDH_STATUS PdhDll::PdhMakeCounterPath(PDH_COUNTER_PATH_ELEMENTS* pCounterPathElements, LPTSTR szFullPathBuffer, LPDWORD pcchBufferSize, DWORD dwFlags) {
   assert(_initialized && _PdhMakeCounterPath != NULL, "PdhAvailable() not yet called");
   return _PdhMakeCounterPath(pCounterPathElements, szFullPathBuffer, pcchBufferSize, dwFlags);
 }
 
+PDH_STATUS PdhDll::PdhExpandWildCardPath(LPCSTR szDataSource, LPCSTR szWildCardPath, PZZSTR mszExpandedPathList, LPDWORD pcchPathListLength, DWORD dwFlags) {
+  assert(_initialized && PdhExpandWildCardPath != NULL, "PdhAvailable() not yet called");
+  return _PdhExpandWildCardPath(szDataSource, szWildCardPath, mszExpandedPathList, pcchPathListLength, dwFlags);
+}
+
 bool PdhDll::PdhStatusFail(PDH_STATUS pdhStat) {
   return pdhStat != ERROR_SUCCESS && pdhStat != PDH_MORE_DATA;
 }
