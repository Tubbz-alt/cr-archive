diff a/src/hotspot/share/memory/virtualspace.hpp b/src/hotspot/share/memory/virtualspace.hpp
--- a/src/hotspot/share/memory/virtualspace.hpp
+++ b/src/hotspot/share/memory/virtualspace.hpp
@@ -73,17 +73,20 @@
   size_t noaccess_prefix() const { return _noaccess_prefix;   }
   bool is_reserved()       const { return _base != NULL; }
   void release();
 
   // Splitting
-  ReservedSpace first_part(size_t partition_size, size_t alignment,
-                           bool split = false, bool realloc = true);
+  // This splits the space into two spaces, the first part of which will be returned.
+  // If split==true, the resulting two spaces can be released independently from each other.
+  //  This may cause the original space to loose its content.
+  // If split==false, the resulting space will be just a hotspot-internal representation
+  //  of a sub section of the underlying mapping.
+  ReservedSpace first_part(size_t partition_size, size_t alignment, bool split = false);
   ReservedSpace last_part (size_t partition_size, size_t alignment);
 
   // These simply call the above using the default alignment.
-  inline ReservedSpace first_part(size_t partition_size,
-                                  bool split = false, bool realloc = true);
+  inline ReservedSpace first_part(size_t partition_size, bool split = false);
   inline ReservedSpace last_part (size_t partition_size);
 
   // Alignment
   static size_t page_align_size_up(size_t size);
   static size_t page_align_size_down(size_t size);
@@ -92,13 +95,13 @@
     return (base() <= ((char*)p)) && (((char*)p) < (base() + size()));
   }
 };
 
 ReservedSpace
-ReservedSpace::first_part(size_t partition_size, bool split, bool realloc)
+ReservedSpace::first_part(size_t partition_size, bool split)
 {
-  return first_part(partition_size, alignment(), split, realloc);
+  return first_part(partition_size, alignment(), split);
 }
 
 ReservedSpace ReservedSpace::last_part(size_t partition_size)
 {
   return last_part(partition_size, alignment());
