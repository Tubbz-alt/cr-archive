diff a/src/hotspot/share/jfr/recorder/repository/jfrRepository.cpp b/src/hotspot/share/jfr/recorder/repository/jfrRepository.cpp
--- a/src/hotspot/share/jfr/recorder/repository/jfrRepository.cpp
+++ b/src/hotspot/share/jfr/recorder/repository/jfrRepository.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -87,10 +87,14 @@
     return;
   }
   JfrEmergencyDump::on_vm_error(_path);
 }
 
+void JfrRepository::on_vm_error_report(outputStream* st) {
+  JfrEmergencyDump::on_vm_error_report(st, instance()._path);
+}
+
 bool JfrRepository::set_path(const char* path) {
   assert(path != NULL, "trying to set the repository path with a NULL string!");
   if (_path != NULL) {
     // delete existing
     JfrCHeapObj::free(_path, strlen(_path) + 1);
@@ -156,12 +160,11 @@
   }
 }
 
 bool JfrRepository::open_chunk(bool vm_error /* false */) {
   if (vm_error) {
-    ResourceMark rm;
-    _chunkwriter->set_path(JfrEmergencyDump::build_dump_path(_path));
+    _chunkwriter->set_path(JfrEmergencyDump::chunk_path(_path));
   }
   return _chunkwriter->open();
 }
 
 size_t JfrRepository::close_chunk() {
