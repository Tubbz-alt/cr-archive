diff a/src/hotspot/share/gc/z/zBarrier.inline.hpp b/src/hotspot/share/gc/z/zBarrier.inline.hpp
--- a/src/hotspot/share/gc/z/zBarrier.inline.hpp
+++ b/src/hotspot/share/gc/z/zBarrier.inline.hpp
@@ -226,11 +226,11 @@
 inline oop ZBarrier::load_barrier_on_oop(oop o) {
   return load_barrier_on_oop_field_preloaded((oop*)NULL, o);
 }
 
 inline oop ZBarrier::load_barrier_on_oop_field(volatile oop* p) {
-  const oop o = *p;
+  const oop o = Atomic::load(p);
   return load_barrier_on_oop_field_preloaded(p, o);
 }
 
 inline oop ZBarrier::load_barrier_on_oop_field_preloaded(volatile oop* p, oop o) {
   return barrier<is_good_or_null_fast_path, load_barrier_on_oop_slow_path>(p, o);
@@ -280,11 +280,11 @@
 //
 // Weak load barrier
 //
 inline oop ZBarrier::weak_load_barrier_on_oop_field(volatile oop* p) {
   assert(!ZResurrection::is_blocked(), "Should not be called during resurrection blocked phase");
-  const oop o = *p;
+  const oop o = Atomic::load(p);
   return weak_load_barrier_on_oop_field_preloaded(p, o);
 }
 
 inline oop ZBarrier::weak_load_barrier_on_oop_field_preloaded(volatile oop* p, oop o) {
   return weak_barrier<is_weak_good_or_null_fast_path, weak_load_barrier_on_oop_slow_path>(p, o);
@@ -293,11 +293,11 @@
 inline oop ZBarrier::weak_load_barrier_on_weak_oop(oop o) {
   return weak_load_barrier_on_weak_oop_field_preloaded((oop*)NULL, o);
 }
 
 inline oop ZBarrier::weak_load_barrier_on_weak_oop_field(volatile oop* p) {
-  const oop o = *p;
+  const oop o = Atomic::load(p);
   return weak_load_barrier_on_weak_oop_field_preloaded(p, o);
 }
 
 inline oop ZBarrier::weak_load_barrier_on_weak_oop_field_preloaded(volatile oop* p, oop o) {
   verify_on_weak(p);
@@ -312,11 +312,11 @@
 inline oop ZBarrier::weak_load_barrier_on_phantom_oop(oop o) {
   return weak_load_barrier_on_phantom_oop_field_preloaded((oop*)NULL, o);
 }
 
 inline oop ZBarrier::weak_load_barrier_on_phantom_oop_field(volatile oop* p) {
-  const oop o = *p;
+  const oop o = Atomic::load(p);
   return weak_load_barrier_on_phantom_oop_field_preloaded(p, o);
 }
 
 inline oop ZBarrier::weak_load_barrier_on_phantom_oop_field_preloaded(volatile oop* p, oop o) {
   if (ZResurrection::is_blocked()) {
@@ -347,18 +347,18 @@
 // Keep alive barrier
 //
 inline void ZBarrier::keep_alive_barrier_on_weak_oop_field(volatile oop* p) {
   // This operation is only valid when resurrection is blocked.
   assert(ZResurrection::is_blocked(), "Invalid phase");
-  const oop o = *p;
+  const oop o = Atomic::load(p);
   barrier<is_good_or_null_fast_path, keep_alive_barrier_on_weak_oop_slow_path>(p, o);
 }
 
 inline void ZBarrier::keep_alive_barrier_on_phantom_oop_field(volatile oop* p) {
   // This operation is only valid when resurrection is blocked.
   assert(ZResurrection::is_blocked(), "Invalid phase");
-  const oop o = *p;
+  const oop o = Atomic::load(p);
   barrier<is_good_or_null_fast_path, keep_alive_barrier_on_phantom_oop_slow_path>(p, o);
 }
 
 inline void ZBarrier::keep_alive_barrier_on_phantom_root_oop_field(oop* p) {
   // This operation is only valid when resurrection is blocked.
@@ -378,11 +378,11 @@
 
 //
 // Mark barrier
 //
 inline void ZBarrier::mark_barrier_on_oop_field(volatile oop* p, bool finalizable) {
-  const oop o = *p;
+  const oop o = Atomic::load(p);
 
   if (finalizable) {
     barrier<is_marked_or_null_fast_path, mark_barrier_on_finalizable_oop_slow_path>(p, o);
   } else {
     const uintptr_t addr = ZOop::to_address(o);
