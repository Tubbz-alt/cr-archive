diff a/src/jdk.jdwp.agent/share/native/libjdwp/ArrayReferenceImpl.c b/src/jdk.jdwp.agent/share/native/libjdwp/ArrayReferenceImpl.c
--- a/src/jdk.jdwp.agent/share/native/libjdwp/ArrayReferenceImpl.c
+++ b/src/jdk.jdwp.agent/share/native/libjdwp/ArrayReferenceImpl.c
@@ -25,10 +25,11 @@
 
 #include "util.h"
 #include "ArrayReferenceImpl.h"
 #include "inStream.h"
 #include "outStream.h"
+#include "signature.h"
 
 static jboolean
 length(PacketInputStream *in, PacketOutputStream *out)
 {
     JNIEnv *env = getEnv();
@@ -202,11 +203,11 @@
     }
 }
 
 static void
 writeObjectComponents(JNIEnv *env, PacketOutputStream *out,
-                    jarray array, jint index, jint length)
+                      jarray array, jint index, jint length)
 {
 
     WITH_LOCAL_REFS(env, length) {
 
         int i;
@@ -223,10 +224,13 @@
         }
 
     } END_WITH_LOCAL_REFS(env);
 }
 
+static void writeComponents(JNIEnv *env, PacketOutputStream *out, char *signature,
+                            jarray array, jint index, jint length);
+
 static jboolean
 getValues(PacketInputStream *in, PacketOutputStream *out)
 {
     JNIEnv *env = getEnv();
     jint arrayLength;
@@ -263,83 +267,81 @@
         return JNI_TRUE;
     }
 
     WITH_LOCAL_REFS(env, 1) {
 
-        jclass arrayClass;
         char *signature = NULL;
-        char *componentSignature;
-        jbyte typeKey;
-        jvmtiError error;
-
-        arrayClass = JNI_FUNC_PTR(env,GetObjectClass)(env, array);
-        error = classSignature(arrayClass, &signature, NULL);
-        if (error != JVMTI_ERROR_NONE) {
-            goto err;
-        }
-        componentSignature = &signature[1];
-        typeKey = componentSignature[0];
 
-        (void)outStream_writeByte(out, typeKey);
-        (void)outStream_writeInt(out, length);
-
-        if (isObjectTag(typeKey)) {
-            writeObjectComponents(env, out, array, index, length);
-        } else {
-            switch (typeKey) {
-                case JDWP_TAG(BYTE):
-                    writeByteComponents(env, out, array, index, length);
-                    break;
-
-                case JDWP_TAG(CHAR):
-                    writeCharComponents(env, out, array, index, length);
-                    break;
-
-                case JDWP_TAG(FLOAT):
-                    writeFloatComponents(env, out, array, index, length);
-                    break;
-
-                case JDWP_TAG(DOUBLE):
-                    writeDoubleComponents(env, out, array, index, length);
-                    break;
-
-                case JDWP_TAG(INT):
-                    writeIntComponents(env, out, array, index, length);
-                    break;
-
-                case JDWP_TAG(LONG):
-                    writeLongComponents(env, out, array, index, length);
-                    break;
-
-                case JDWP_TAG(SHORT):
-                    writeShortComponents(env, out, array, index, length);
-                    break;
-
-                case JDWP_TAG(BOOLEAN):
-                    writeBooleanComponents(env, out, array, index, length);
-                    break;
-
-                default:
-                    outStream_setError(out, JDWP_ERROR(INVALID_TAG));
-                    break;
-            }
+        jclass arrayClass = JNI_FUNC_PTR(env,GetObjectClass)(env, array);
+        jvmtiError error = classSignature(arrayClass, &signature, NULL);
+        if (error == JVMTI_ERROR_NONE) {
+            writeComponents(env, out, signature, array, index, length);
+            jvmtiDeallocate(signature);
         }
 
-        jvmtiDeallocate(signature);
-
-    err:;
-
     } END_WITH_LOCAL_REFS(env);
 
     if (JNI_FUNC_PTR(env,ExceptionOccurred)(env)) {
         outStream_setError(out, JDWP_ERROR(INTERNAL));
         JNI_FUNC_PTR(env,ExceptionClear)(env);
     }
 
     return JNI_TRUE;
 }
 
+static void writeComponents(JNIEnv *env, PacketOutputStream *out, char *signature,
+                            jarray array, jint index, jint length) {
+
+    char * componentSignature = componentTypeSignature(signature);
+    jbyte typeKey = jdwpTag(componentSignature);
+
+    (void)outStream_writeByte(out, typeKey);
+    (void)outStream_writeInt(out, length);
+
+    if (isReferenceTag(typeKey)) {
+        writeObjectComponents(env, out, array, index, length);
+        return;
+    }
+    switch (typeKey) {
+        case JDWP_TAG(BYTE):
+            writeByteComponents(env, out, array, index, length);
+            break;
+
+        case JDWP_TAG(CHAR):
+            writeCharComponents(env, out, array, index, length);
+            break;
+
+        case JDWP_TAG(FLOAT):
+            writeFloatComponents(env, out, array, index, length);
+            break;
+
+        case JDWP_TAG(DOUBLE):
+            writeDoubleComponents(env, out, array, index, length);
+            break;
+
+        case JDWP_TAG(INT):
+            writeIntComponents(env, out, array, index, length);
+            break;
+
+        case JDWP_TAG(LONG):
+            writeLongComponents(env, out, array, index, length);
+            break;
+
+        case JDWP_TAG(SHORT):
+            writeShortComponents(env, out, array, index, length);
+            break;
+
+        case JDWP_TAG(BOOLEAN):
+            writeBooleanComponents(env, out, array, index, length);
+            break;
+
+        default:
+            outStream_setError(out, JDWP_ERROR(INVALID_TAG));
+            break;
+    }
+}
+
 static jdwpError
 readBooleanComponents(JNIEnv *env, PacketInputStream *in,
                    jarray array, int index, int length)
 {
     int i;
@@ -475,10 +477,12 @@
     }
 
     return JDWP_ERROR(NONE);
 }
 
+static jdwpError readComponents(JNIEnv *env, PacketInputStream *in, char *signature,
+                                jarray array, jint index, jint length);
 
 static jboolean
 setValues(PacketInputStream *in, PacketOutputStream *out)
 {
     JNIEnv *env = getEnv();
@@ -513,86 +517,85 @@
         return JNI_TRUE;
     }
 
     WITH_LOCAL_REFS(env, 1)  {
 
-        jclass arrayClass;
         char *signature = NULL;
-        char *componentSignature;
-        jvmtiError error;
 
-        arrayClass = JNI_FUNC_PTR(env,GetObjectClass)(env, array);
-        error = classSignature(arrayClass, &signature, NULL);
-        if (error != JVMTI_ERROR_NONE) {
-            goto err;
+        jclass arrayClass = JNI_FUNC_PTR(env,GetObjectClass)(env, array);
+        jvmtiError error = classSignature(arrayClass, &signature, NULL);
+        if (error == JVMTI_ERROR_NONE) {
+            serror = readComponents(env, in, signature, array, index, length);
+            jvmtiDeallocate(signature);
         }
-        componentSignature = &signature[1];
-
-        switch (componentSignature[0]) {
-            case JDWP_TAG(OBJECT):
-            case JDWP_TAG(ARRAY):
-            case JDWP_TAG(INLINE_OBJECT):
-                serror = readObjectComponents(env, in, array, index, length);
-                break;
-
-            case JDWP_TAG(BYTE):
-                serror = readByteComponents(env, in, array, index, length);
-                break;
+    } END_WITH_LOCAL_REFS(env);
 
-            case JDWP_TAG(CHAR):
-                serror = readCharComponents(env, in, array, index, length);
-                break;
+    if (JNI_FUNC_PTR(env,ExceptionOccurred)(env)) {
+        /*
+         * TO DO: Check exception type
+         */
+        serror = JDWP_ERROR(TYPE_MISMATCH);
+        JNI_FUNC_PTR(env,ExceptionClear)(env);
+    }
 
-            case JDWP_TAG(FLOAT):
-                serror = readFloatComponents(env, in, array, index, length);
-                break;
+    outStream_setError(out, serror);
+    return JNI_TRUE;
+}
 
-            case JDWP_TAG(DOUBLE):
-                serror = readDoubleComponents(env, in, array, index, length);
-                break;
+static jdwpError readComponents(JNIEnv *env, PacketInputStream *in, char *signature,
+jarray array, jint index, jint length) {
+    jdwpError serror = JDWP_ERROR(NONE);
 
-            case JDWP_TAG(INT):
-                serror = readIntComponents(env, in, array, index, length);
-                break;
+    char *componentSignature = componentTypeSignature(signature);
+    jbyte typeKey = jdwpTag(componentSignature);
+    if (isReferenceTag(typeKey)) {
+        serror = readObjectComponents(env, in, array, index, length);
+        return serror;
+    }
+    switch (typeKey) {
+        case JDWP_TAG(BYTE):
+            serror = readByteComponents(env, in, array, index, length);
+            break;
 
-            case JDWP_TAG(LONG):
-                serror = readLongComponents(env, in, array, index, length);
-                break;
+        case JDWP_TAG(CHAR):
+            serror = readCharComponents(env, in, array, index, length);
+            break;
 
-            case JDWP_TAG(SHORT):
-                serror = readShortComponents(env, in, array, index, length);
-                break;
+        case JDWP_TAG(FLOAT):
+            serror = readFloatComponents(env, in, array, index, length);
+            break;
 
-            case JDWP_TAG(BOOLEAN):
-                serror = readBooleanComponents(env, in, array, index, length);
-                break;
+        case JDWP_TAG(DOUBLE):
+            serror = readDoubleComponents(env, in, array, index, length);
+            break;
 
-            default:
-                {
-                    ERROR_MESSAGE(("Invalid array component signature: %s",
-                                        componentSignature));
-                    EXIT_ERROR(AGENT_ERROR_INVALID_OBJECT,NULL);
-                }
-                break;
-        }
+        case JDWP_TAG(INT):
+            serror = readIntComponents(env, in, array, index, length);
+            break;
 
-        jvmtiDeallocate(signature);
+        case JDWP_TAG(LONG):
+            serror = readLongComponents(env, in, array, index, length);
+            break;
 
-    err:;
+        case JDWP_TAG(SHORT):
+            serror = readShortComponents(env, in, array, index, length);
+            break;
 
-    } END_WITH_LOCAL_REFS(env);
+        case JDWP_TAG(BOOLEAN):
+            serror = readBooleanComponents(env, in, array, index, length);
+            break;
 
-    if (JNI_FUNC_PTR(env,ExceptionOccurred)(env)) {
-        /*
-         * TO DO: Check exception type
-         */
-        serror = JDWP_ERROR(TYPE_MISMATCH);
-        JNI_FUNC_PTR(env,ExceptionClear)(env);
+        default:
+            {
+                ERROR_MESSAGE(("Invalid array component signature: %s",
+                                    componentSignature));
+                EXIT_ERROR(AGENT_ERROR_INVALID_OBJECT,NULL);
+            }
+            break;
     }
 
-    outStream_setError(out, serror);
-    return JNI_TRUE;
+    return serror;
 }
 
 Command ArrayReference_Commands[] = {
     {length, "Length"},
     {getValues, "GetValues"},
