diff a/src/jdk.jdwp.agent/share/native/libjdwp/util.c b/src/jdk.jdwp.agent/share/native/libjdwp/util.c
--- a/src/jdk.jdwp.agent/share/native/libjdwp/util.c
+++ b/src/jdk.jdwp.agent/share/native/libjdwp/util.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -30,10 +30,12 @@
 #include "eventHandler.h"
 #include "threadControl.h"
 #include "outStream.h"
 #include "inStream.h"
 #include "invoker.h"
+#include "signature.h"
+
 
 /* Global data area */
 BackendGlobalData *gdata = NULL;
 
 /* Forward declarations */
@@ -169,10 +171,12 @@
         EXIT_ERROR(AGENT_ERROR_NULL_POINTER,NULL);
     }
     return method;
 }
 
+
+
 void
 util_initialize(JNIEnv *env)
 {
     WITH_LOCAL_REFS(env, 6) {
 
@@ -342,31 +346,28 @@
     error = fieldSignature(clazz, field, NULL, &signature, NULL);
     if (error != JVMTI_ERROR_NONE) {
         outStream_setError(out, map2jdwpError(error));
         return;
     }
-    typeKey = signature[0];
+    typeKey = jdwpTag(signature);
     jvmtiDeallocate(signature);
 
+    if (isReferenceTag(typeKey)) {
+
+        jobject value = JNI_FUNC_PTR(env,GetObjectField)(env, object, field);
+        (void)outStream_writeByte(out, specificTypeKey(env, value));
+        (void)outStream_writeObjectRef(env, out, value);
+        return;
+
+    }
+
     /*
-     * For primitive types, the type key is bounced back as is. Objects
-     * are handled in the switch statement below.
+     * For primitive types, the type key is bounced back as is.
      */
-    if ((typeKey != JDWP_TAG(OBJECT)) && (typeKey != JDWP_TAG(ARRAY)) && (typeKey != JDWP_TAG(INLINE_OBJECT))) {
-        (void)outStream_writeByte(out, typeKey);
-    }
+    (void)outStream_writeByte(out, typeKey);
 
     switch (typeKey) {
-        case JDWP_TAG(OBJECT):
-        case JDWP_TAG(ARRAY):
-        case JDWP_TAG(INLINE_OBJECT): {
-            jobject value = JNI_FUNC_PTR(env,GetObjectField)(env, object, field);
-            (void)outStream_writeByte(out, specificTypeKey(env, value));
-            (void)outStream_writeObjectRef(env, out, value);
-            break;
-        }
-
         case JDWP_TAG(BYTE):
             (void)outStream_writeByte(out,
                       JNI_FUNC_PTR(env,GetByteField)(env, object, field));
             break;
 
@@ -418,31 +419,28 @@
     error = fieldSignature(clazz, field, NULL, &signature, NULL);
     if (error != JVMTI_ERROR_NONE) {
         outStream_setError(out, map2jdwpError(error));
         return;
     }
-    typeKey = signature[0];
+    typeKey = jdwpTag(signature);
     jvmtiDeallocate(signature);
 
-    /*
-     * For primitive types, the type key is bounced back as is. Objects
-     * are handled in the switch statement below.
-     */
-    if ((typeKey != JDWP_TAG(OBJECT)) && (typeKey != JDWP_TAG(ARRAY)) && (typeKey != JDWP_TAG(INLINE_OBJECT))) {
-        (void)outStream_writeByte(out, typeKey);
+
+    if (isReferenceTag(typeKey)) {
+
+        jobject value = JNI_FUNC_PTR(env,GetStaticObjectField)(env, clazz, field);
+        (void)outStream_writeByte(out, specificTypeKey(env, value));
+        (void)outStream_writeObjectRef(env, out, value);
+
+        return;
     }
 
+    /*
+     * For primitive types, the type key is bounced back as is.
+     */
+    (void)outStream_writeByte(out, typeKey);
     switch (typeKey) {
-        case JDWP_TAG(OBJECT):
-        case JDWP_TAG(ARRAY):
-        case JDWP_TAG(INLINE_OBJECT): {
-            jobject value = JNI_FUNC_PTR(env,GetStaticObjectField)(env, clazz, field);
-            (void)outStream_writeByte(out, specificTypeKey(env, value));
-            (void)outStream_writeObjectRef(env, out, value);
-            break;
-        }
-
         case JDWP_TAG(BYTE):
             (void)outStream_writeByte(out,
                       JNI_FUNC_PTR(env,GetStaticByteField)(env, clazz, field));
             break;
 
@@ -571,11 +569,11 @@
         if (arguments == NULL) {
             outStream_setError(out, JDWP_ERROR(OUT_OF_MEMORY));
             return JNI_TRUE;
         }
         for (i = 0; (i < argumentCount) && !inStream_error(in); i++) {
-            arguments[i] = inStream_readValue(in, NULL);
+            arguments[i] = inStream_readValue(in);
         }
         if (inStream_error(in)) {
             return JNI_TRUE;
         }
     }
@@ -978,36 +976,10 @@
 {
     return JVMTI_FUNC_PTR(gdata->jvmti,GetSourceDebugExtension)
                 (gdata->jvmti, clazz, extensionPtr);
 }
 
-/*
- * Convert the signature "Ljava/lang/Foo;" to a
- * classname "java.lang.Foo" compatible with the pattern.
- * Signature is overwritten in-place.
- */
-void
-convertSignatureToClassname(char *convert)
-{
-    char *p;
-
-    p = convert + 1;
-    while ((*p != ';') && (*p != '\0')) {
-        char c = *p;
-        if (c == '/') {
-            *(p-1) = '.';
-        } else if (c == '.') {
-            // class signature of a hidden class is "Ljava/lang/Foo.1234;"
-            // map to "java.lang.Foo/1234"
-            *(p-1) = '/';
-        } else {
-            *(p-1) = c;
-        }
-        p++;
-    }
-    *(p-1) = '\0';
-}
 
 static void
 handleInterrupt(void)
 {
     /*
