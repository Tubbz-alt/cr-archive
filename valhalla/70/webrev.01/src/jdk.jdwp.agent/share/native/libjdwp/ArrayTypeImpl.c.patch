diff a/src/jdk.jdwp.agent/share/native/libjdwp/ArrayTypeImpl.c b/src/jdk.jdwp.agent/share/native/libjdwp/ArrayTypeImpl.c
--- a/src/jdk.jdwp.agent/share/native/libjdwp/ArrayTypeImpl.c
+++ b/src/jdk.jdwp.agent/share/native/libjdwp/ArrayTypeImpl.c
@@ -25,10 +25,12 @@
 
 #include "ArrayTypeImpl.h"
 #include "util.h"
 #include "inStream.h"
 #include "outStream.h"
+#include "signature.h"
+
 
 /*
  * Determine the component class by looking thru all classes for
  * one that has the signature of the component and the same class loadeer
  * as the array.  See JVM spec 5.3.3:
@@ -146,11 +148,11 @@
 
     WITH_LOCAL_REFS(env, 1) {
 
         jarray array = NULL;
 
-        switch (componentSignature[0]) {
+        switch (jdwpTag(componentSignature)) {
             case JDWP_TAG(BYTE):
                 array = JNI_FUNC_PTR(env,NewByteArray)(env, size);
                 break;
 
             case JDWP_TAG(CHAR):
@@ -225,15 +227,14 @@
     error = classSignature(arrayClass, &signature, NULL);
     if ( error != JVMTI_ERROR_NONE ) {
         outStream_setError(out, map2jdwpError(error));
         return JNI_FALSE;
     }
-    componentSignature = &signature[1];
+    componentSignature = componentTypeSignature(signature);
 
-    if ((componentSignature[0] == JDWP_TAG(OBJECT)) ||
-        (componentSignature[0] == JDWP_TAG(ARRAY))  ||
-	(componentSignature[0] == JDWP_TAG(INLINE_OBJECT))) {
+    jbyte typeKey = jdwpTag(componentSignature);
+    if (isReferenceTag(typeKey)) {
         writeNewObjectArray(env, out, arrayClass, size, componentSignature);
     } else {
         writeNewPrimitiveArray(env, out, arrayClass, size, componentSignature);
     }
 
