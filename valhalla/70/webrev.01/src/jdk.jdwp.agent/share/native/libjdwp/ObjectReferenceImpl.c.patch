diff a/src/jdk.jdwp.agent/share/native/libjdwp/ObjectReferenceImpl.c b/src/jdk.jdwp.agent/share/native/libjdwp/ObjectReferenceImpl.c
--- a/src/jdk.jdwp.agent/share/native/libjdwp/ObjectReferenceImpl.c
+++ b/src/jdk.jdwp.agent/share/native/libjdwp/ObjectReferenceImpl.c
@@ -26,10 +26,11 @@
 #include "util.h"
 #include "ObjectReferenceImpl.h"
 #include "commonRef.h"
 #include "inStream.h"
 #include "outStream.h"
+#include "signature.h"
 
 static jboolean
 referenceType(PacketInputStream *in, PacketOutputStream *out)
 {
     JNIEnv *env;
@@ -63,26 +64,26 @@
 {
     sharedGetFieldValues(in, out, JNI_FALSE);
     return JNI_TRUE;
 }
 
-
 static jvmtiError
 readFieldValue(JNIEnv *env, PacketInputStream *in, jclass clazz,
                jobject object, jfieldID field, char *signature)
 {
     jvalue value;
-    jvmtiError error;
-
-    switch (signature[0]) {
-        case JDWP_TAG(ARRAY):
-        case JDWP_TAG(OBJECT):
-	case JDWP_TAG(INLINE_OBJECT):
-            value.l = inStream_readObjectRef(env, in);
-            JNI_FUNC_PTR(env,SetObjectField)(env, object, field, value.l);
-            break;
 
+    jbyte typeKey = jdwpTag(signature);
+    if (isReferenceTag(typeKey)) {
+        value.l = inStream_readObjectRef(env, in);
+        JNI_FUNC_PTR(env,SetObjectField)(env, object, field, value.l);
+        if (JNI_FUNC_PTR(env,ExceptionOccurred)(env)) {
+            return AGENT_ERROR_JNI_EXCEPTION;
+        }
+        return JVMTI_ERROR_NONE;
+    }
+    switch (typeKey) {
         case JDWP_TAG(BYTE):
             value.b = inStream_readByte(in);
             JNI_FUNC_PTR(env,SetByteField)(env, object, field, value.b);
             break;
 
@@ -120,16 +121,14 @@
             value.z = inStream_readBoolean(in);
             JNI_FUNC_PTR(env,SetBooleanField)(env, object, field, value.z);
             break;
     }
 
-    error = JVMTI_ERROR_NONE;
     if (JNI_FUNC_PTR(env,ExceptionOccurred)(env)) {
-        error = AGENT_ERROR_JNI_EXCEPTION;
+        return AGENT_ERROR_JNI_EXCEPTION;
     }
-
-    return error;
+    return JVMTI_ERROR_NONE;
 }
 
 static jboolean
 setValues(PacketInputStream *in, PacketOutputStream *out)
 {
