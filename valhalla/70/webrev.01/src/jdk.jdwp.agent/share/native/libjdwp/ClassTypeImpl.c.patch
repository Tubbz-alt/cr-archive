diff a/src/jdk.jdwp.agent/share/native/libjdwp/ClassTypeImpl.c b/src/jdk.jdwp.agent/share/native/libjdwp/ClassTypeImpl.c
--- a/src/jdk.jdwp.agent/share/native/libjdwp/ClassTypeImpl.c
+++ b/src/jdk.jdwp.agent/share/native/libjdwp/ClassTypeImpl.c
@@ -25,10 +25,11 @@
 
 #include "util.h"
 #include "ClassTypeImpl.h"
 #include "inStream.h"
 #include "outStream.h"
+#include "signature.h"
 
 static jboolean
 superclass(PacketInputStream *in, PacketOutputStream *out)
 {
     JNIEnv *env;
@@ -56,20 +57,22 @@
 static jdwpError
 readStaticFieldValue(JNIEnv *env, PacketInputStream *in, jclass clazz,
                      jfieldID field, char *signature)
 {
     jvalue value;
-    jdwpError serror = JDWP_ERROR(NONE);
-
-    switch (signature[0]) {
-        case JDWP_TAG(ARRAY):
-        case JDWP_TAG(OBJECT):
-        case JDWP_TAG(INLINE_OBJECT):
-            value.l = inStream_readObjectRef(env, in);
-            JNI_FUNC_PTR(env,SetStaticObjectField)(env, clazz, field, value.l);
-            break;
+    jbyte typeKey = jdwpTag(signature);
+
+    if (isReferenceTag(typeKey)) {
+        value.l = inStream_readObjectRef(env, in);
+        JNI_FUNC_PTR(env,SetStaticObjectField)(env, clazz, field, value.l);
+        if (JNI_FUNC_PTR(env,ExceptionOccurred)(env)) {
+            return JDWP_ERROR(INTERNAL);
+        }
+        return JDWP_ERROR(NONE);
+    }
 
+    switch (typeKey) {
         case JDWP_TAG(BYTE):
             value.b = inStream_readByte(in);
             JNI_FUNC_PTR(env,SetStaticByteField)(env, clazz, field, value.b);
             break;
 
@@ -108,14 +111,13 @@
             JNI_FUNC_PTR(env,SetStaticBooleanField)(env, clazz, field, value.z);
             break;
     }
 
     if (JNI_FUNC_PTR(env,ExceptionOccurred)(env)) {
-        serror = JDWP_ERROR(INTERNAL);
+        return JDWP_ERROR(INTERNAL);
     }
-
-    return serror;
+    return JDWP_ERROR(NONE);
 }
 
 static jboolean
 setValues(PacketInputStream *in, PacketOutputStream *out)
 {
