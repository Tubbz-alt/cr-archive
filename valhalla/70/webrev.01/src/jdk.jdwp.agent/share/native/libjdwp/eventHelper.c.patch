diff a/src/jdk.jdwp.agent/share/native/libjdwp/eventHelper.c b/src/jdk.jdwp.agent/share/native/libjdwp/eventHelper.c
--- a/src/jdk.jdwp.agent/share/native/libjdwp/eventHelper.c
+++ b/src/jdk.jdwp.agent/share/native/libjdwp/eventHelper.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -26,10 +26,11 @@
 #include "util.h"
 #include "outStream.h"
 #include "eventHandler.h"
 #include "threadControl.h"
 #include "invoker.h"
+#include "signature.h"
 
 
 #define COMMAND_LOOP_THREAD_NAME "JDWP Event Helper Thread"
 
 /*
@@ -477,11 +478,11 @@
     (void)outStream_writeInt(out, command->id);
     (void)outStream_writeObjectRef(env, out, command->thread);
     writeCodeLocation(out, command->clazz, command->method, command->location);
     if (command->typeKey) {
         (void)outStream_writeValue(env, out, command->typeKey, command->returnValue);
-        if (isObjectTag(command->typeKey) &&
+        if (isReferenceTag(command->typeKey) &&
             command->returnValue.l != NULL) {
             tossGlobalRef(env, &(command->returnValue.l));
         }
     }
     tossGlobalRef(env, &(command->thread));
@@ -849,11 +850,11 @@
                 clazz = *pclazz;
                 *pclazz = NULL;
                 saveGlobalRef(env, clazz, pclazz);
             }
             sig = evinfo->u.field_modification.signature_type;
-            if ((sig == JDWP_TAG(ARRAY)) || (sig == JDWP_TAG(OBJECT)) || (sig == JDWP_TAG(INLINE_OBJECT))) {
+            if (isReferenceTag(sig)) {
                 if ( evinfo->u.field_modification.new_value.l != NULL ) {
                     pobject = &(evinfo->u.field_modification.new_value.l);
                     object = *pobject;
                     *pobject = NULL;
                     saveGlobalRef(env, object, pobject);
@@ -902,11 +903,11 @@
         case EI_FIELD_MODIFICATION:
             if ( evinfo->u.field_modification.field_clazz != NULL ) {
                 tossGlobalRef(env, &(evinfo->u.field_modification.field_clazz));
             }
             sig = evinfo->u.field_modification.signature_type;
-            if ((sig == JDWP_TAG(ARRAY)) || (sig == JDWP_TAG(OBJECT)) || (sig == JDWP_TAG(INLINE_OBJECT))) {
+            if (isReferenceTag(sig)) {
                 if ( evinfo->u.field_modification.new_value.l != NULL ) {
                     tossGlobalRef(env, &(evinfo->u.field_modification.new_value.l));
                 }
             }
             break;
@@ -1106,11 +1107,11 @@
         JDI_ASSERT(err == JVMTI_ERROR_NONE);
 
         /*
          * V or B C D F I J S Z L <classname> ;    [ ComponentType
          */
-        if (isObjectTag(frameCommand->typeKey) &&
+        if (isReferenceTag(frameCommand->typeKey) &&
             returnValue.l != NULL) {
             saveGlobalRef(env, returnValue.l, &(frameCommand->returnValue.l));
         } else {
             frameCommand->returnValue = returnValue;
         }
