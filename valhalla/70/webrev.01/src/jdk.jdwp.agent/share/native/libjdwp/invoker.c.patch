diff a/src/jdk.jdwp.agent/share/native/libjdwp/invoker.c b/src/jdk.jdwp.agent/share/native/libjdwp/invoker.c
--- a/src/jdk.jdwp.agent/share/native/libjdwp/invoker.c
+++ b/src/jdk.jdwp.agent/share/native/libjdwp/invoker.c
@@ -26,10 +26,11 @@
 #include "util.h"
 #include "invoker.h"
 #include "eventHandler.h"
 #include "threadControl.h"
 #include "outStream.h"
+#include "signature.h"
 
 static jrawMonitorID invokerLock;
 
 void
 invoker_initialize(void)
@@ -50,70 +51,25 @@
 void invoker_unlock(void)
 {
     debugMonitorExit(invokerLock);
 }
 
-static jbyte
-returnTypeTag(char *signature)
-{
-    char *tagPtr = strchr(signature, SIGNATURE_END_ARGS);
-    JDI_ASSERT(tagPtr);
-    tagPtr++;    /* 1st character after the end of args */
-    return (jbyte)*tagPtr;
-}
-
-static jbyte
-nextArgumentTypeTag(void **cursor)
-{
-    char *tagPtr = *cursor;
-    jbyte argumentTag = (jbyte)*tagPtr;
-
-    if (*tagPtr != SIGNATURE_END_ARGS) {
-        /* Skip any array modifiers */
-        while (*tagPtr == JDWP_TAG(ARRAY)) {
-            tagPtr++;
-        }
-        /* Skip class name */
-        if (*tagPtr == JDWP_TAG(OBJECT)) {
-            tagPtr = strchr(tagPtr, SIGNATURE_END_CLASS) + 1;
-            JDI_ASSERT(tagPtr);
-        } else {
-            /* Skip primitive sig */
-            tagPtr++;
-        }
-    }
-
-    *cursor = tagPtr;
-    return argumentTag;
-}
-
-static jbyte
-firstArgumentTypeTag(char *signature, void **cursor)
-{
-    JDI_ASSERT(signature[0] == SIGNATURE_BEGIN_ARGS);
-    *cursor = signature + 1; /* skip to the first arg */
-    return nextArgumentTypeTag(cursor);
-}
-
-
 /*
  * Note: argument refs may be destroyed on out-of-memory error
  */
 static jvmtiError
 createGlobalRefs(JNIEnv *env, InvokeRequest *request)
 {
-    jvmtiError error;
+    jvmtiError error = JVMTI_ERROR_NONE;
+    void *cursor = NULL;
+    jbyte argumentTag = 0;
+    jint argIndex = 0;
+    jvalue *argument = request->arguments;
     jclass clazz = NULL;
     jobject instance = NULL;
-    jint argIndex;
-    jbyte argumentTag;
-    jvalue *argument;
-    void *cursor;
     jobject *argRefs = NULL;
 
-    error = JVMTI_ERROR_NONE;
-
     if ( request->argumentCount > 0 ) {
         /*LINTED*/
         argRefs = jvmtiAllocate((jint)(request->argumentCount*sizeof(jobject)));
         if ( argRefs==NULL ) {
             error = AGENT_ERROR_OUT_OF_MEMORY;
@@ -136,20 +92,16 @@
             error = AGENT_ERROR_OUT_OF_MEMORY;
         }
     }
 
     if ( error == JVMTI_ERROR_NONE && argRefs!=NULL ) {
-        argIndex = 0;
-        argumentTag = firstArgumentTypeTag(request->methodSignature, &cursor);
-        argument = request->arguments;
-        while (argumentTag != SIGNATURE_END_ARGS) {
+        methodSignature_init(request->methodSignature, &cursor);
+        while (methodSignature_nextArgumentExists(&cursor, &argumentTag)) {
             if ( argIndex > request->argumentCount ) {
                 break;
             }
-            if ((argumentTag == JDWP_TAG(OBJECT)) ||
-                (argumentTag == JDWP_TAG(ARRAY))  ||
-		(argumentTag == JDWP_TAG(INLINE_OBJECT))) {
+            if (isReferenceTag(argumentTag)) {
                 /* Create a global ref for any non-null argument */
                 if (argument->l != NULL) {
                     saveGlobalRef(env, argument->l, &argRefs[argIndex]);
                     if (argRefs[argIndex] == NULL) {
                         error = AGENT_ERROR_OUT_OF_MEMORY;
@@ -157,11 +109,10 @@
                     }
                 }
             }
             argument++;
             argIndex++;
-            argumentTag = nextArgumentTypeTag(&cursor);
         }
     }
 
 #ifdef FIXUP /* Why isn't this an error? */
     /* Make sure the argument count matches */
@@ -174,21 +125,19 @@
     if ( error == JVMTI_ERROR_NONE ) {
         request->clazz = clazz;
         request->instance = instance;
         if ( argRefs!=NULL ) {
             argIndex = 0;
-            argumentTag = firstArgumentTypeTag(request->methodSignature, &cursor);
+            methodSignature_init(request->methodSignature, &cursor);
             argument = request->arguments;
-            while ( argIndex < request->argumentCount ) {
-                if ((argumentTag == JDWP_TAG(OBJECT)) ||
-                    (argumentTag == JDWP_TAG(ARRAY))  ||
-		    (argumentTag == JDWP_TAG(INLINE_OBJECT))) {
+            while ( methodSignature_nextArgumentExists(&cursor, &argumentTag) &&
+                   argIndex < request->argumentCount ) {
+                if ( isReferenceTag(argumentTag) ) {
                     argument->l = argRefs[argIndex];
                 }
                 argument++;
                 argIndex++;
-                argumentTag = nextArgumentTypeTag(&cursor);
             }
             jvmtiDeallocate(argRefs);
         }
         return JVMTI_ERROR_NONE;
 
@@ -218,33 +167,32 @@
  * invoke request was carried out. See fillInvokeRequest().
  */
 static void
 deleteGlobalArgumentRefs(JNIEnv *env, InvokeRequest *request)
 {
-    void *cursor;
+    void *cursor = NULL;
     jint argIndex = 0;
+    jbyte argumentTag = 0;
     jvalue *argument = request->arguments;
-    jbyte argumentTag = firstArgumentTypeTag(request->methodSignature, &cursor);
+    methodSignature_init(request->methodSignature, &cursor);
 
     if (request->clazz != NULL) {
         tossGlobalRef(env, &(request->clazz));
     }
     if (request->instance != NULL) {
         tossGlobalRef(env, &(request->instance));
     }
     /* Delete global argument references */
-    while (argIndex < request->argumentCount) {
-        if ((argumentTag == JDWP_TAG(OBJECT)) ||
-            (argumentTag == JDWP_TAG(ARRAY))  ||
-	    (argumentTag == JDWP_TAG(INLINE_OBJECT))) {
+    while (methodSignature_nextArgumentExists(&cursor, &argumentTag) &&
+           argIndex < request->argumentCount) {
+        if (isReferenceTag(argumentTag)) {
             if (argument->l != NULL) {
                 tossGlobalRef(env, &(argument->l));
             }
         }
         argument++;
         argIndex++;
-        argumentTag = nextArgumentTypeTag(&cursor);
     }
 }
 
 static jvmtiError
 fillInvokeRequest(JNIEnv *env, InvokeRequest *request,
@@ -405,28 +353,27 @@
 }
 
 static void
 invokeStatic(JNIEnv *env, InvokeRequest *request)
 {
-    switch(returnTypeTag(request->methodSignature)) {
-        case JDWP_TAG(OBJECT):
-        case JDWP_TAG(ARRAY):
-        case JDWP_TAG(INLINE_OBJECT): {
-            jobject object;
-            JDI_ASSERT_MSG(request->clazz, "Request clazz null");
-            object = JNI_FUNC_PTR(env,CallStaticObjectMethodA)(env,
-                                       request->clazz,
-                                       request->method,
-                                       request->arguments);
-            request->returnValue.l = NULL;
-            if (object != NULL) {
-                saveGlobalRef(env, object, &(request->returnValue.l));
-            }
-            break;
+    jbyte returnType = methodSignature_returnTag(request->methodSignature);
+
+    if (isReferenceTag(returnType)) {
+        jobject object;
+        JDI_ASSERT_MSG(request->clazz, "Request clazz null");
+        object = JNI_FUNC_PTR(env,CallStaticObjectMethodA)(env,
+                                   request->clazz,
+                                   request->method,
+                                   request->arguments);
+        request->returnValue.l = NULL;
+        if (object != NULL) {
+            saveGlobalRef(env, object, &(request->returnValue.l));
         }
+        return;
+    }
 
-
+    switch (returnType) {
         case JDWP_TAG(BYTE):
             request->returnValue.b = JNI_FUNC_PTR(env,CallStaticByteMethodA)(env,
                                                        request->clazz,
                                                        request->method,
                                                        request->arguments);
@@ -495,27 +442,26 @@
 }
 
 static void
 invokeVirtual(JNIEnv *env, InvokeRequest *request)
 {
-    switch(returnTypeTag(request->methodSignature)) {
-        case JDWP_TAG(OBJECT):
-        case JDWP_TAG(ARRAY):
-        case JDWP_TAG(INLINE_OBJECT): {
-            jobject object;
-            JDI_ASSERT_MSG(request->instance, "Request instance null");
-            object = JNI_FUNC_PTR(env,CallObjectMethodA)(env,
-                                 request->instance,
-                                 request->method,
-                                 request->arguments);
-            request->returnValue.l = NULL;
-            if (object != NULL) {
-                saveGlobalRef(env, object, &(request->returnValue.l));
-            }
-            break;
+    jbyte returnType = methodSignature_returnTag(request->methodSignature);
+    if (isReferenceTag(returnType)) {
+        jobject object;
+        JDI_ASSERT_MSG(request->instance, "Request instance null");
+        object = JNI_FUNC_PTR(env,CallObjectMethodA)(env,
+                             request->instance,
+                             request->method,
+                             request->arguments);
+        request->returnValue.l = NULL;
+        if (object != NULL) {
+            saveGlobalRef(env, object, &(request->returnValue.l));
         }
+        return;
+    }
 
+    switch (returnType) {
         case JDWP_TAG(BYTE):
             request->returnValue.b = JNI_FUNC_PTR(env,CallByteMethodA)(env,
                                                  request->instance,
                                                  request->method,
                                                  request->arguments);
@@ -584,29 +530,28 @@
 }
 
 static void
 invokeNonvirtual(JNIEnv *env, InvokeRequest *request)
 {
-    switch(returnTypeTag(request->methodSignature)) {
-        case JDWP_TAG(OBJECT):
-        case JDWP_TAG(ARRAY):
-        case JDWP_TAG(INLINE_OBJECT): {
-            jobject object;
-            JDI_ASSERT_MSG(request->clazz, "Request clazz null");
-            JDI_ASSERT_MSG(request->instance, "Request instance null");
-            object = JNI_FUNC_PTR(env,CallNonvirtualObjectMethodA)(env,
-                                           request->instance,
-                                           request->clazz,
-                                           request->method,
-                                           request->arguments);
-            request->returnValue.l = NULL;
-            if (object != NULL) {
-                saveGlobalRef(env, object, &(request->returnValue.l));
-            }
-            break;
+    jbyte returnType = methodSignature_returnTag(request->methodSignature);
+    if (isReferenceTag(returnType)) {
+        jobject object;
+        JDI_ASSERT_MSG(request->clazz, "Request clazz null");
+        JDI_ASSERT_MSG(request->instance, "Request instance null");
+        object = JNI_FUNC_PTR(env,CallNonvirtualObjectMethodA)(env,
+                                       request->instance,
+                                       request->clazz,
+                                       request->method,
+                                       request->arguments);
+        request->returnValue.l = NULL;
+        if (object != NULL) {
+            saveGlobalRef(env, object, &(request->returnValue.l));
         }
+        return;
+    }
 
+    switch (returnType) {
         case JDWP_TAG(BYTE):
             request->returnValue.b = JNI_FUNC_PTR(env,CallNonvirtualByteMethodA)(env,
                                                  request->instance,
                                                  request->clazz,
                                                  request->method,
@@ -801,22 +746,21 @@
              * Although constructors technically have a return type of
              * void, we return the object created.
              */
             tag = specificTypeKey(env, request->returnValue.l);
         } else {
-            tag = returnTypeTag(request->methodSignature);
+            tag = methodSignature_returnTag(request->methodSignature);
         }
         id = request->id;
         exc = request->exception;
         returnValue = request->returnValue;
 
         /* Release return value and exception references, but delay the release
          * until after the return packet was sent. */
+        jbyte returnType = methodSignature_returnTag(request->methodSignature);
         mustReleaseReturnValue = request->invokeType == INVOKE_CONSTRUCTOR ||
-           returnTypeTag(request->methodSignature) == JDWP_TAG(OBJECT) ||
-           returnTypeTag(request->methodSignature) == JDWP_TAG(ARRAY)  ||
-	   returnTypeTag(request->methodSignature) == JDWP_TAG(INLINE_OBJECT);
+           isReferenceTag(returnType);
     }
 
     /*
      * At this time, there's no need to retain global references on
      * arguments since the reply is processed. No one will deal with
