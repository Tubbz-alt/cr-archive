diff a/test/jdk/sun/security/ec/xec/TestXECOps.java b/test/jdk/sun/security/ec/xec/TestXECOps.java
--- a/test/jdk/sun/security/ec/xec/TestXECOps.java
+++ b/test/jdk/sun/security/ec/xec/TestXECOps.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -30,10 +30,12 @@
  * @build jdk.test.lib.Convert
  * @run main TestXECOps
  */
 
 import sun.security.ec.*;
+
+import java.security.spec.NamedParameterSpec;
 import java.util.*;
 import jdk.test.lib.Convert;
 
 // Test vectors are from RFC 7748
 
@@ -84,11 +86,13 @@
     }
 
     private void runDiffieHellmanTest(String opName, String a_str,
         String b_str, String result_str) {
 
-        XECParameters settings = XECParameters.getByName(opName).get();
+        NamedParameterSpec paramSpec = new NamedParameterSpec(opName);
+        XECParameters settings =
+            XECParameters.get(RuntimeException::new, paramSpec);
         XECOperations ops = new XECOperations(settings);
 
         byte[] basePoint = Convert.byteToByteArray(settings.getBasePoint(),
             settings.getBytes());
         byte[] a = Convert.hexStringToByteArray(a_str);
@@ -116,11 +120,13 @@
 
         byte[] k_in = Convert.hexStringToByteArray(k_in_str);
         byte[] u_in = Convert.hexStringToByteArray(u_in_str);
         byte[] u_out_expected = Convert.hexStringToByteArray(u_out_str);
 
-        XECParameters settings = XECParameters.getByName(opName).get();
+        NamedParameterSpec paramSpec = new NamedParameterSpec(opName);
+        XECParameters settings =
+            XECParameters.get(RuntimeException::new, paramSpec);
         XECOperations ops = new XECOperations(settings);
         byte[] u_out = ops.encodedPointMultiply(k_in, u_in);
 
         if (!Arrays.equals(u_out, u_out_expected)) {
             throw new RuntimeException("fail");
