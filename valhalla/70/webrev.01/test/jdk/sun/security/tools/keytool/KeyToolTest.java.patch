diff a/test/jdk/sun/security/tools/keytool/KeyToolTest.java b/test/jdk/sun/security/tools/keytool/KeyToolTest.java
--- a/test/jdk/sun/security/tools/keytool/KeyToolTest.java
+++ b/test/jdk/sun/security/tools/keytool/KeyToolTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 
 /*
  * @test
- * @bug 6251120 8231950
+ * @bug 6251120 8231950 8242151
  * @summary Testing keytool
  *
  * Run through autotest.sh and manualtest.sh
  *
  * Testing non-PKCS11 keystores:
@@ -1600,22 +1600,22 @@
             void check(KeyStore ks, String alias, String oid, byte[] value)
                     throws Exception {
                 int pos = 0;
                 System.err.print("x");
                 Extension ex = ((X509CertImpl)ks.getCertificate(alias))
-                        .getExtension(new ObjectIdentifier(oid));
+                        .getExtension(ObjectIdentifier.of(oid));
                 if (!Arrays.equals(value, ex.getValue())) {
                     throw new RuntimeException("Not same content in " +
                             alias + " for " + oid);
                 }
             }
         }
         CheckOid coid = new CheckOid();
         assertTrue(((X509CertImpl)ks.getCertificate("oid1"))
-                .getExtension(new ObjectIdentifier("1.2.3")).isCritical());
+                .getExtension(ObjectIdentifier.of("1.2.3")).isCritical());
         assertTrue(!((X509CertImpl)ks.getCertificate("oid2"))
-                .getExtension(new ObjectIdentifier("1.2.3")).isCritical());
+                .getExtension(ObjectIdentifier.of("1.2.3")).isCritical());
         coid.check(ks, "oid1", "1.2.3", new byte[]{1,2});
         coid.check(ks, "oid2", "1.2.3", new byte[]{});
         coid.check(ks, "oid12", "1.2.3", new byte[]{});
         coid.check(ks, "oid12", "1.2.4", new byte[]{1,2,3});
 
@@ -1641,29 +1641,29 @@
         ks = loadStore("x.jks", "changeit", "JKS");
         X509CertImpl a = (X509CertImpl)ks.getCertificate("a");
         assertTrue(a.getAuthorityKeyIdentifierExtension() != null);
         assertTrue(a.getSubjectKeyIdentifierExtension() != null);
         assertTrue(a.getKeyUsage() == null);
-        assertTrue(a.getExtension(new ObjectIdentifier("1.2.3")).isCritical());
-        assertTrue(!a.getExtension(new ObjectIdentifier("1.2.4")).isCritical());
-        assertTrue(!a.getExtension(new ObjectIdentifier("1.2.5")).isCritical());
+        assertTrue(a.getExtension(ObjectIdentifier.of("1.2.3")).isCritical());
+        assertTrue(!a.getExtension(ObjectIdentifier.of("1.2.4")).isCritical());
+        assertTrue(!a.getExtension(ObjectIdentifier.of("1.2.5")).isCritical());
         assertTrue(a.getExtensionValue("1.2.3").length == 3);
         assertTrue(a.getExtensionValue("1.2.4").length == 4);
         assertTrue(a.getExtensionValue("1.2.5").length == 5);
         assertTrue(a.getBasicConstraints() == 2);
-        assertTrue(!a.getExtension(new ObjectIdentifier("2.3.4")).isCritical());
+        assertTrue(!a.getExtension(ObjectIdentifier.of("2.3.4")).isCritical());
         assertTrue(a.getExtensionValue("2.3.4").length == 6);
 
         // 8073181: keytool -ext honored not working correctly
         testOK("", simple+"-gencert -alias ca -infile test.req -ext " +
                 "honored=1.2.3,KU,1.2.4:critical " +
                 "-debug -rfc -outfile test2.cert");
         testOK("", simple+"-importcert -file test2.cert -alias b");
         ks = loadStore("x.jks", "changeit", "JKS");
         X509CertImpl b = (X509CertImpl)ks.getCertificate("b");
-        assertTrue(!b.getExtension(new ObjectIdentifier("1.2.3")).isCritical());
-        assertTrue(b.getExtension(new ObjectIdentifier("1.2.4")).isCritical());
+        assertTrue(!b.getExtension(ObjectIdentifier.of("1.2.3")).isCritical());
+        assertTrue(b.getExtension(ObjectIdentifier.of("1.2.4")).isCritical());
 
         // 8073182: keytool may generate duplicate extensions
         testOK("", pre+"dup -ext bc=2 -ext 2.5.29.19=30030101FF -ext bc=3");
         ks = loadStore("x.jks", "changeit", "JKS");
         X509CertImpl dup = (X509CertImpl)ks.getCertificate("dup");
