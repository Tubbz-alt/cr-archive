diff a/test/jdk/sun/security/pkcs12/ParamsTest.java b/test/jdk/sun/security/pkcs12/ParamsTest.java
--- a/test/jdk/sun/security/pkcs12/ParamsTest.java
+++ b/test/jdk/sun/security/pkcs12/ParamsTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,14 +21,13 @@
  * questions.
  */
 
 /*
  * @test
- * @bug 8076190
+ * @bug 8076190 8242151
  * @library /test/lib
  * @modules java.base/sun.security.pkcs
- *          java.base/sun.security.x509
  *          java.base/sun.security.util
  * @summary Customizing the generation of a PKCS12 keystore
  */
 
 import jdk.test.lib.Asserts;
@@ -47,11 +46,12 @@
 import java.security.KeyStore;
 import java.util.Base64;
 import java.util.Objects;
 
 import static jdk.test.lib.security.DerUtils.*;
-import static sun.security.x509.AlgorithmId.*;
+import sun.security.util.ObjectIdentifier;
+import sun.security.util.KnownOIDs;
 import static sun.security.pkcs.ContentInfo.*;
 
 public class ParamsTest  {
 
     public static void main(String[] args) throws Throwable {
@@ -100,15 +100,15 @@
         // Current default pkcs12 setting
         keytool("-importkeystore -srckeystore ks -srcstorepass changeit "
                 + "-destkeystore ksnormal -deststorepass changeit");
         data = Files.readAllBytes(Path.of("ksnormal"));
         checkInt(data, "22", 100000); // Mac ic
-        checkAlg(data, "2000", SHA_oid); // Mac alg
-        checkAlg(data, "110c010c01000", pbeWithSHA1AndDESede_oid); // key alg
+        checkAlg(data, "2000", oid(KnownOIDs.SHA_1)); // Mac alg
+        checkAlg(data, "110c010c01000", oid(KnownOIDs.PBEWithSHA1AndDESede)); // key alg
         checkInt(data, "110c010c010011", 50000); // key ic
         checkAlg(data, "110c10", ENCRYPTED_DATA_OID);
-        checkAlg(data, "110c110110", pbeWithSHA1AndRC2_40_oid); // cert alg
+        checkAlg(data, "110c110110", oid(KnownOIDs.PBEWithSHA1AndRC2_40)); // cert alg
         checkInt(data, "110c1101111", 50000); // cert ic
 
         check("ksnormal", "a", "changeit", "changeit", true, true, true);
         check("ksnormal", "a", null, "changeit", true, false, true);
         check("ksnormal", "a", "wrongpass", "-", IOException.class, "-", "-");
@@ -118,17 +118,17 @@
                 + "-storepass changeit -alias b -dname CN=b "
                 + "-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE "
                 + "-J-Dkeystore.pkcs12.macAlgorithm=NONE");
         data = Files.readAllBytes(Path.of("ksnormal"));
         checkInt(data, "22", 100000); // Mac ic
-        checkAlg(data, "2000", SHA_oid); // Mac alg
-        checkAlg(data, "110c010c01000", pbeWithSHA1AndDESede_oid); // key alg
+        checkAlg(data, "2000", oid(KnownOIDs.SHA_1)); // Mac alg
+        checkAlg(data, "110c010c01000", oid(KnownOIDs.PBEWithSHA1AndDESede)); // key alg
         checkInt(data, "110c010c010011", 50000); // key ic
-        checkAlg(data, "110c010c11000", pbeWithSHA1AndDESede_oid); // new key alg
+        checkAlg(data, "110c010c11000", oid(KnownOIDs.PBEWithSHA1AndDESede)); // new key alg
         checkInt(data, "110c010c110011", 50000); // new key ic
         checkAlg(data, "110c10", ENCRYPTED_DATA_OID);
-        checkAlg(data, "110c110110", pbeWithSHA1AndRC2_40_oid); // cert alg
+        checkAlg(data, "110c110110", oid(KnownOIDs.PBEWithSHA1AndRC2_40)); // cert alg
         checkInt(data, "110c1101111", 50000); // cert ic
         check("ksnormal", "b", null, "changeit", true, false, true);
         check("ksnormal", "b", "changeit", "changeit", true, true, true);
 
         // Different keypbe alg, no cert pbe and no mac
@@ -137,11 +137,11 @@
                 + "-J-Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithSHA1AndRC4_128 "
                 + "-J-Dkeystore.pkcs12.certProtectionAlgorithm=NONE "
                 + "-J-Dkeystore.pkcs12.macAlgorithm=NONE");
         data = Files.readAllBytes(Path.of("ksnopass"));
         shouldNotExist(data, "2"); // no Mac
-        checkAlg(data, "110c010c01000", pbeWithSHA1AndRC4_128_oid);
+        checkAlg(data, "110c010c01000", oid(KnownOIDs.PBEWithSHA1AndRC4_128));
         checkInt(data, "110c010c010011", 50000);
         checkAlg(data, "110c10", DATA_OID);
         check("ksnopass", "a", null, "changeit", true, true, true);
         check("ksnopass", "a", "changeit", "changeit", true, true, true);
         check("ksnopass", "a", "wrongpass", "changeit", true, true, true);
@@ -149,13 +149,13 @@
         // Add a new entry with normal settings, still password-less
         keytool("-keystore ksnopass -genkeypair -keyalg DSA "
                 + "-storepass changeit -alias b -dname CN=B");
         data = Files.readAllBytes(Path.of("ksnopass"));
         shouldNotExist(data, "2"); // no Mac
-        checkAlg(data, "110c010c01000", pbeWithSHA1AndRC4_128_oid);
+        checkAlg(data, "110c010c01000", oid(KnownOIDs.PBEWithSHA1AndRC4_128));
         checkInt(data, "110c010c010011", 50000);
-        checkAlg(data, "110c010c11000", pbeWithSHA1AndDESede_oid);
+        checkAlg(data, "110c010c11000", oid(KnownOIDs.PBEWithSHA1AndDESede));
         checkInt(data, "110c010c110011", 50000);
         checkAlg(data, "110c10", DATA_OID);
         check("ksnopass", "a", null, "changeit", true, true, true);
         check("ksnopass", "b", null, "changeit", true, true, true);
 
@@ -164,14 +164,14 @@
                 + "-J-Dkeystore.pkcs12.macIterationCount=5555 "
                 + "-J-Dkeystore.pkcs12.certPbeIterationCount=6666 "
                 + "-J-Dkeystore.pkcs12.keyPbeIterationCount=7777");
         data = Files.readAllBytes(Path.of("ksnewic"));
         checkInt(data, "22", 5555); // Mac ic
-        checkAlg(data, "2000", SHA_oid); // Mac alg
-        checkAlg(data, "110c010c01000", pbeWithSHA1AndDESede_oid); // key alg
+        checkAlg(data, "2000", oid(KnownOIDs.SHA_1)); // Mac alg
+        checkAlg(data, "110c010c01000", oid(KnownOIDs.PBEWithSHA1AndDESede)); // key alg
         checkInt(data, "110c010c010011", 7777); // key ic
-        checkAlg(data, "110c110110", pbeWithSHA1AndRC2_40_oid); // cert alg
+        checkAlg(data, "110c110110", oid(KnownOIDs.PBEWithSHA1AndRC2_40)); // cert alg
         checkInt(data, "110c1101111", 6666); // cert ic
 
         // keypbe alg cannot be NONE
         keytool("-keystore ksnewic -genkeypair -keyalg DSA "
                 + "-storepass changeit -alias b -dname CN=B "
@@ -183,16 +183,16 @@
         keytool("-keystore ksnewic -genkeypair -keyalg DSA "
                 + "-storepass changeit -alias b -dname CN=B "
                 + "-J-Dkeystore.pkcs12.keyProtectionAlgorithm=PBEWithSHA1AndRC4_128");
         data = Files.readAllBytes(Path.of("ksnewic"));
         checkInt(data, "22", 5555); // Mac ic
-        checkAlg(data, "2000", SHA_oid); // Mac alg
-        checkAlg(data, "110c010c01000", pbeWithSHA1AndDESede_oid); // key alg
+        checkAlg(data, "2000", oid(KnownOIDs.SHA_1)); // Mac alg
+        checkAlg(data, "110c010c01000", oid(KnownOIDs.PBEWithSHA1AndDESede)); // key alg
         checkInt(data, "110c010c010011", 7777); // key ic
-        checkAlg(data, "110c010c11000", pbeWithSHA1AndRC4_128_oid); // new key alg
+        checkAlg(data, "110c010c11000", oid(KnownOIDs.PBEWithSHA1AndRC4_128)); // new key alg
         checkInt(data, "110c010c110011", 50000); // new key ic
-        checkAlg(data, "110c110110", pbeWithSHA1AndRC2_40_oid); // cert alg
+        checkAlg(data, "110c110110", oid(KnownOIDs.PBEWithSHA1AndRC2_40)); // cert alg
         checkInt(data, "110c1101111", 6666); // cert ic
 
         // Check KeyStore loading multiple keystores
         KeyStore ks = KeyStore.getInstance("pkcs12");
         try (FileInputStream fis = new FileInputStream("ksnormal");
@@ -200,45 +200,45 @@
             ks.load(fis, "changeit".toCharArray());
             ks.store(fos, "changeit".toCharArray());
         }
         data = Files.readAllBytes(Path.of("ksnormaldup"));
         checkInt(data, "22", 100000); // Mac ic
-        checkAlg(data, "2000", SHA_oid); // Mac alg
-        checkAlg(data, "110c010c01000", pbeWithSHA1AndDESede_oid); // key alg
+        checkAlg(data, "2000", oid(KnownOIDs.SHA_1)); // Mac alg
+        checkAlg(data, "110c010c01000", oid(KnownOIDs.PBEWithSHA1AndDESede)); // key alg
         checkInt(data, "110c010c010011", 50000); // key ic
-        checkAlg(data, "110c010c11000", pbeWithSHA1AndDESede_oid); // new key alg
+        checkAlg(data, "110c010c11000", oid(KnownOIDs.PBEWithSHA1AndDESede)); // new key alg
         checkInt(data, "110c010c110011", 50000); // new key ic
         checkAlg(data, "110c10", ENCRYPTED_DATA_OID);
-        checkAlg(data, "110c110110", pbeWithSHA1AndRC2_40_oid); // cert alg
+        checkAlg(data, "110c110110", oid(KnownOIDs.PBEWithSHA1AndRC2_40)); // cert alg
         checkInt(data, "110c1101111", 50000); // cert ic
 
         try (FileInputStream fis = new FileInputStream("ksnopass");
              FileOutputStream fos = new FileOutputStream("ksnopassdup")) {
             ks.load(fis, "changeit".toCharArray());
             ks.store(fos, "changeit".toCharArray());
         }
         data = Files.readAllBytes(Path.of("ksnopassdup"));
         shouldNotExist(data, "2"); // no Mac
-        checkAlg(data, "110c010c01000", pbeWithSHA1AndRC4_128_oid);
+        checkAlg(data, "110c010c01000", oid(KnownOIDs.PBEWithSHA1AndRC4_128));
         checkInt(data, "110c010c010011", 50000);
-        checkAlg(data, "110c010c11000", pbeWithSHA1AndDESede_oid);
+        checkAlg(data, "110c010c11000", oid(KnownOIDs.PBEWithSHA1AndDESede));
         checkInt(data, "110c010c110011", 50000);
         checkAlg(data, "110c10", DATA_OID);
 
         try (FileInputStream fis = new FileInputStream("ksnewic");
              FileOutputStream fos = new FileOutputStream("ksnewicdup")) {
             ks.load(fis, "changeit".toCharArray());
             ks.store(fos, "changeit".toCharArray());
         }
         data = Files.readAllBytes(Path.of("ksnewicdup"));
         checkInt(data, "22", 5555); // Mac ic
-        checkAlg(data, "2000", SHA_oid); // Mac alg
-        checkAlg(data, "110c010c01000", pbeWithSHA1AndDESede_oid); // key alg
+        checkAlg(data, "2000", oid(KnownOIDs.SHA_1)); // Mac alg
+        checkAlg(data, "110c010c01000", oid(KnownOIDs.PBEWithSHA1AndDESede)); // key alg
         checkInt(data, "110c010c010011", 7777); // key ic
-        checkAlg(data, "110c010c11000", pbeWithSHA1AndRC4_128_oid); // new key alg
+        checkAlg(data, "110c010c11000", oid(KnownOIDs.PBEWithSHA1AndRC4_128)); // new key alg
         checkInt(data, "110c010c110011", 50000); // new key ic
-        checkAlg(data, "110c110110", pbeWithSHA1AndRC2_40_oid); // cert alg
+        checkAlg(data, "110c110110", oid(KnownOIDs.PBEWithSHA1AndRC2_40)); // cert alg
         checkInt(data, "110c1101111", 6666); // cert ic
 
         // Check keytool behavior
 
         // ksnormal has password
@@ -432,9 +432,13 @@
             actualKey = e.getClass();
         }
         Asserts.assertEQ(expectedKey, actualKey, label + "-key");
     }
 
+    private static ObjectIdentifier oid(KnownOIDs o) {
+        return ObjectIdentifier.of(o);
+    }
+
     static OutputAnalyzer keytool(String s) throws Throwable {
         return SecurityTools.keytool(s);
     }
 }
