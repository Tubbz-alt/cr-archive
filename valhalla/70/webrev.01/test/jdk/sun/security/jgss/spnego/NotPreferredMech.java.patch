diff a/test/jdk/sun/security/jgss/spnego/NotPreferredMech.java b/test/jdk/sun/security/jgss/spnego/NotPreferredMech.java
--- a/test/jdk/sun/security/jgss/spnego/NotPreferredMech.java
+++ b/test/jdk/sun/security/jgss/spnego/NotPreferredMech.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 
 /*
  * @test
- * @bug 8048194
+ * @bug 8048194 8242151
  * @modules java.base/sun.security.util
  *          java.security.jgss/sun.security.jgss
  *          java.security.jgss/sun.security.jgss.spnego:+open
  * @run main/othervm NotPreferredMech
  * @summary GSSContext.acceptSecContext fails when a supported mech is not initiator preferred
@@ -55,11 +55,11 @@
         mech.write(GSSUtil.GSS_KRB5_MECH_OID.getDER());
         DerOutputStream mechTypeList = new DerOutputStream();
         mechTypeList.write(DerValue.tag_Sequence, mech);
 
         // Generates a NegTokenInit mechToken field for 1.2.3.4 mech
-        GSSHeader h1 = new GSSHeader(new ObjectIdentifier("1.2.3.4"), 1);
+        GSSHeader h1 = new GSSHeader(ObjectIdentifier.of("1.2.3.4"), 1);
         ByteArrayOutputStream bout = new ByteArrayOutputStream();
         h1.encode(bout);
         bout.write(new byte[1]);
 
         // Generates the NegTokenInit token
@@ -76,11 +76,11 @@
         m.setAccessible(true);
         byte[] spnegoToken = (byte[])m.invoke(initToken);
 
         // and wraps it into a GSSToken
         GSSHeader h = new GSSHeader(
-                new ObjectIdentifier(GSSUtil.GSS_SPNEGO_MECH_OID.toString()),
+                ObjectIdentifier.of(GSSUtil.GSS_SPNEGO_MECH_OID.toString()),
                 spnegoToken.length);
         bout = new ByteArrayOutputStream();
         h.encode(bout);
         bout.write(spnegoToken);
         byte[] token = bout.toByteArray();
