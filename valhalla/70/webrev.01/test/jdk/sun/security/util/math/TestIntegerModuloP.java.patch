diff a/test/jdk/sun/security/util/math/TestIntegerModuloP.java b/test/jdk/sun/security/util/math/TestIntegerModuloP.java
--- a/test/jdk/sun/security/util/math/TestIntegerModuloP.java
+++ b/test/jdk/sun/security/util/math/TestIntegerModuloP.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -34,10 +34,12 @@
  * @run main TestIntegerModuloP sun.security.util.math.intpoly.IntegerPolynomialP384 48 6
  * @run main TestIntegerModuloP sun.security.util.math.intpoly.IntegerPolynomialP521 66 7
  * @run main TestIntegerModuloP sun.security.util.math.intpoly.P256OrderField 32 8
  * @run main TestIntegerModuloP sun.security.util.math.intpoly.P384OrderField 48 9
  * @run main TestIntegerModuloP sun.security.util.math.intpoly.P521OrderField 66 10
+ * @run main TestIntegerModuloP sun.security.util.math.intpoly.Curve25519OrderField 32 11
+ * @run main TestIntegerModuloP sun.security.util.math.intpoly.Curve448OrderField 56 12
  */
 
 import sun.security.util.math.*;
 import sun.security.util.math.intpoly.*;
 import java.util.function.*;
@@ -102,12 +104,14 @@
         // set functions are setValue with various argument types
         SET_FUNCTIONS.add((a, b, c) -> a.setValue(b));
         SET_FUNCTIONS.add((a, b, c) ->
             a.setValue(c, 0, c.length, (byte) 0));
         SET_FUNCTIONS.add((a, b, c) ->
-            a.setValue(ByteBuffer.wrap(c, 0, c.length).order(ByteOrder.LITTLE_ENDIAN),
-            c.length, highByte));
+            a.setValue(c, 0, c.length / 2, (byte) 0));
+        SET_FUNCTIONS.add((a, b, c) ->
+            a.setValue(ByteBuffer.wrap(c, 0, c.length / 2).order(ByteOrder.LITTLE_ENDIAN),
+            c.length / 2, highByte));
 
         // array functions return the (possibly modified) value as byte array
         ARRAY_FUNCTIONS.add((a, b ) -> a.asByteArray(length));
         ARRAY_FUNCTIONS.add((a, b) -> a.addModPowerTwo(b, length));
     }
@@ -326,11 +330,11 @@
             int swap = random.nextInt(2);
             cswapAndCheck(swap, left, multResult);
 
             ElemSetFunction setFunc =
                 SET_FUNCTIONS.get(random.nextInt(SET_FUNCTIONS.size()));
-            byte[] valueArr = new byte[length];
+            byte[] valueArr = new byte[2 * length];
             random.nextBytes(valueArr);
             setAndCheck(setFunc, result1, result2, valueArr);
 
             // left could have been modified, so to turn it back into a summand
             applyAndCheckMutable((a, b) -> a.setSquare(), left, right);
