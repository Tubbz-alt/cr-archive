diff a/test/micro/org/openjdk/bench/java/io/RandomAccessRead.java b/test/micro/org/openjdk/bench/java/io/RandomAccessRead.java
--- a/test/micro/org/openjdk/bench/java/io/RandomAccessRead.java
+++ b/test/micro/org/openjdk/bench/java/io/RandomAccessRead.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -49,25 +49,30 @@
 public class RandomAccessRead {
 
     @Param("1000000")
     private int fileSize;
 
+    @Param("8192")
+    private int buffer;
+
     private RandomAccessFile raf;
     private long offset;
     private int deltaIndex;
     private int[] deltas;
     private File f;
+    private byte[] buf;
 
     @Setup(Level.Trial)
     public void beforeRun() throws IOException {
         f = File.createTempFile("RandomAccessBench", ".bin");
         try (FileOutputStream fos = new FileOutputStream(f)) {
             for (int i = 0; i < fileSize; i++) {
                 fos.write((byte) i);
             }
         }
         deltas = new int[]{1, 2, 3, 5, 7, 11, 13, 17, 19, 23};
+        buf = new byte[buffer];
     }
 
     @TearDown(Level.Trial)
     public void afterRun() throws IOException {
         f.delete();
@@ -83,10 +88,24 @@
     @TearDown(Level.Iteration)
     public void afterIteration() throws IOException {
         raf.close();
     }
 
+    @Benchmark
+    public int testBuffer() throws IOException {
+        offset = offset + deltas[deltaIndex];
+        if (offset >= fileSize) {
+            offset = 0;
+        }
+        deltaIndex++;
+        if (deltaIndex >= deltas.length) {
+            deltaIndex = 0;
+        }
+        raf.seek(offset);
+        return raf.read(buf);
+    }
+
     @Benchmark
     public int test() throws IOException {
         offset = offset + deltas[deltaIndex];
         if (offset >= fileSize) {
             offset = 0;
@@ -96,7 +115,6 @@
             deltaIndex = 0;
         }
         raf.seek(offset);
         return raf.read();
     }
-
 }
