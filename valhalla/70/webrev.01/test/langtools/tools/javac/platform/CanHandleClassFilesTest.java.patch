diff a/test/langtools/tools/javac/platform/CanHandleClassFilesTest.java b/test/langtools/tools/javac/platform/CanHandleClassFilesTest.java
--- a/test/langtools/tools/javac/platform/CanHandleClassFilesTest.java
+++ b/test/langtools/tools/javac/platform/CanHandleClassFilesTest.java
@@ -38,10 +38,11 @@
 import java.io.Writer;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.stream.Stream;
+import javax.lang.model.SourceVersion;
 
 import javax.tools.StandardLocation;
 
 import toolbox.JavacTask;
 import toolbox.ToolBox;
@@ -106,23 +107,28 @@
                     .forEach(p -> open(p, targetModule));
 
             var createSymbolsClass = Class.forName("build.tools.symbolgenerator.CreateSymbols", false, cl);
             var main = createSymbolsClass.getMethod("main", String[].class);
             var symbols = targetDir.resolve("symbols");
+            var systemModules = targetDir.resolve("system-modules");
 
             try (Writer w = Files.newBufferedWriter(symbols)) {}
+            try (Writer w = Files.newBufferedWriter(systemModules)) {}
 
             main.invoke(null,
                         (Object) new String[] {"build-description-incremental",
                                                symbols.toAbsolutePath().toString(),
                                                includeList.toAbsolutePath().toString()});
 
             main.invoke(null,
                         (Object) new String[] {"build-ctsym",
                                                "does-not-exist",
                                                symbols.toAbsolutePath().toString(),
-                                               targetDir.resolve("ct.sym").toAbsolutePath().toString()});
+                                               targetDir.resolve("ct.sym").toAbsolutePath().toString(),
+                                               Long.toString(System.currentTimeMillis() / 1000),
+                                               "" + SourceVersion.latest().ordinal(),
+                                               systemModules.toAbsolutePath().toString()});
         }
     }
 
     void open(String moduleAndPackage, Module target) {
         String[] s = moduleAndPackage.split("/");
