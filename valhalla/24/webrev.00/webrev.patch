diff a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -6925,15 +6925,18 @@
         _super_klass->external_name()
       );
       return;
     }
 
-    // For a value class, only java/lang/Object is an acceptable super class
+    // For an inline class, only java/lang/Object or special abstract classes
+    // are acceptable super classes.
     if (_access_flags.get_flags() & JVM_ACC_VALUE) {
-      guarantee_property(_super_klass->name() == vmSymbols::java_lang_Object(),
-        "Inline type must have java.lang.Object as superclass in class file %s",
-        CHECK);
+      if (_super_klass->name() != vmSymbols::java_lang_Object()) {
+        guarantee_property(_super_klass->is_abstract(),
+          "Inline type must have java.lang.Object or an abstract class as its superclass, class file %s",
+          CHECK);
+      }
     }
 
     // Make sure super class is not final
     if (_super_klass->is_final()) {
       THROW_MSG(vmSymbols::java_lang_VerifyError(), "Cannot inherit from final class");
diff a/src/hotspot/share/classfile/verificationType.cpp b/src/hotspot/share/classfile/verificationType.cpp
--- a/src/hotspot/share/classfile/verificationType.cpp
+++ b/src/hotspot/share/classfile/verificationType.cpp
@@ -160,22 +160,32 @@
   if (!is_null() && (name()->is_same_fundamental_type(from.name()) ||
       name() == vmSymbols::java_lang_Object())) {
     return true;
   }
 
-  // Need to load 'this' to see if it is an interface.
+  // Need to load 'this' to see if it is an interface or supertype.
   InstanceKlass* klass = context->current_class();
   {
     HandleMark hm(THREAD);
     Klass* this_class = SystemDictionary::resolve_or_fail(
         name(), Handle(THREAD, klass->class_loader()),
         Handle(THREAD, klass->protection_domain()), true, CHECK_false);
     klass->class_loader_data()->record_dependency(this_class);
     if (log_is_enabled(Debug, class, resolve)) {
       Verifier::trace_class_resolution(this_class, klass);
     }
-    return (this_class->is_interface());
+    if (this_class->is_interface()) {
+      return true;
+    } else {
+      Klass* from_class = SystemDictionary::resolve_or_fail(
+        from.name(), Handle(THREAD, klass->class_loader()),
+        Handle(THREAD, klass->protection_domain()), true, CHECK_false);
+      if (log_is_enabled(Debug, class, resolve)) {
+        Verifier::trace_class_resolution(from_class, klass);
+      }
+      return from_class->is_subclass_of(this_class);
+    }
   }
 }
 
 VerificationType VerificationType::get_component(ClassVerifier *context, TRAPS) const {
   assert(is_array() && name()->utf8_length() >= 2, "Must be a valid array");
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/BadValueTypes.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/BadValueTypes.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/BadValueTypes.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/classfileparser/BadValueTypes.java
@@ -58,11 +58,12 @@
 
         // Test that inline type instance methods cannot be synchronized.
         runTest("ValueMethodSynch",
                 "Method getInt in class ValueMethodSynch (an inline class) has illegal modifiers");
 
-        runTest("ValueSuperClass", "Inline type must have java.lang.Object as superclass");
+        runTest("ValueSuperClass",
+                "Inline type must have java.lang.Object or an abstract class as its superclass");
 
         // Test that ClassCircularityError gets detected for instance fields.
         System.out.println("Testing ClassCircularityError for instance fields");
         try {
             Class newClass = Class.forName("Circ");
