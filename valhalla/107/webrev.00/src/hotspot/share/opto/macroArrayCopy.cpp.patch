diff a/src/hotspot/share/opto/macroArrayCopy.cpp b/src/hotspot/share/opto/macroArrayCopy.cpp
--- a/src/hotspot/share/opto/macroArrayCopy.cpp
+++ b/src/hotspot/share/opto/macroArrayCopy.cpp
@@ -835,11 +835,11 @@
 
   // operate on this memory slice:
   Node* mem = merge_mem->memory_at(alias_idx); // memory slice to operate on
 
   // scaling and rounding of indexes:
-  assert(basic_elem_type != T_VALUETYPE, "should have been converted to a basic type copy");
+  assert(basic_elem_type != T_INLINE_TYPE, "should have been converted to a basic type copy");
   int scale = exact_log2(type2aelembytes(basic_elem_type));
   int abase = arrayOopDesc::base_offset_in_bytes(basic_elem_type);
   int clear_low = (-1 << scale) & (BytesPerInt  - 1);
   int bump_bit  = (-1 << scale) & BytesPerInt;
 
@@ -1204,11 +1204,11 @@
     const TypeAryPtr* top_dest = dest_type->isa_aryptr();
     BasicType dest_elem = T_OBJECT;
     if (top_dest != NULL && top_dest->klass() != NULL) {
       dest_elem = top_dest->klass()->as_array_klass()->element_type()->basic_type();
     }
-    if (dest_elem == T_ARRAY || (dest_elem == T_VALUETYPE && top_dest->klass()->is_obj_array_klass())) {
+    if (dest_elem == T_ARRAY || (dest_elem == T_INLINE_TYPE && top_dest->klass()->is_obj_array_klass())) {
       dest_elem = T_OBJECT;
     }
 
     Node* mem = ac->in(TypeFunc::Memory);
     merge_mem = MergeMemNode::make(mem);
@@ -1217,15 +1217,15 @@
     AllocateArrayNode* alloc = NULL;
     if (ac->is_alloc_tightly_coupled()) {
       alloc = AllocateArrayNode::Ideal_array_allocation(dest, &_igvn);
       assert(alloc != NULL, "expect alloc");
     }
-    assert(dest_elem != T_VALUETYPE || alloc != NULL, "unsupported");
+    assert(dest_elem != T_INLINE_TYPE || alloc != NULL, "unsupported");
     Node* dest_length = (alloc != NULL) ? alloc->in(AllocateNode::ALength) : NULL;
 
     const TypePtr* adr_type = NULL;
-    if (dest_elem == T_VALUETYPE) {
+    if (dest_elem == T_INLINE_TYPE) {
       adr_type = adjust_parameters_for_vt(top_dest, src_offset, dest_offset, length, dest_elem, dest_length);
     } else {
       adr_type = dest_type->is_oopptr()->add_offset(Type::OffsetBot);
       if (ac->_dest_type != TypeOopPtr::BOTTOM) {
         adr_type = ac->_dest_type->add_offset(Type::OffsetBot)->is_ptr();
@@ -1270,21 +1270,21 @@
   if (top_src != NULL && top_src->klass() != NULL) {
     src_elem = top_src->klass()->as_array_klass()->element_type()->basic_type();
   }
   if (src_elem == T_ARRAY) {
     src_elem = T_OBJECT;
-  } else if (src_elem == T_VALUETYPE && top_src->klass()->is_obj_array_klass()) {
+  } else if (src_elem == T_INLINE_TYPE && top_src->klass()->is_obj_array_klass()) {
     if (top_src->klass_is_exact()) {
       src_elem = T_OBJECT;
     } else {
       assert(!top_src->klass()->is_valuetype(), "klass should be exact");
       src_elem = T_CONFLICT; // either flattened or not
     }
   }
   if (dest_elem == T_ARRAY) {
     dest_elem = T_OBJECT;
-  } else if (dest_elem == T_VALUETYPE && top_dest->klass()->is_obj_array_klass()) {
+  } else if (dest_elem == T_INLINE_TYPE && top_dest->klass()->is_obj_array_klass()) {
     if (top_dest->klass_is_exact()) {
       dest_elem = T_OBJECT;
     } else {
       assert(!top_dest->klass()->is_valuetype(), "klass should be exact");
       dest_elem = T_CONFLICT; // either flattened or not
@@ -1363,11 +1363,11 @@
   // (7) src_offset + length must not exceed length of src.
   // (8) dest_offset + length must not exceed length of dest.
   // (9) each element of an oop array must be assignable
 
   Node* mem = ac->in(TypeFunc::Memory);
-  if (dest_elem == T_VALUETYPE) {
+  if (dest_elem == T_INLINE_TYPE) {
     // copy modifies more than 1 slice
     insert_mem_bar(&ctrl, &mem, Op_MemBarCPUOrder);
   }
 
   merge_mem = MergeMemNode::make(mem);
@@ -1425,11 +1425,11 @@
   // This is where the memory effects are placed:
   const TypePtr* adr_type = NULL;
 
   Node* dest_length = alloc != NULL ? alloc->in(AllocateNode::ALength) : NULL;
 
-  if (dest_elem == T_VALUETYPE) {
+  if (dest_elem == T_INLINE_TYPE) {
     adr_type = adjust_parameters_for_vt(top_dest, src_offset, dest_offset, length, dest_elem, dest_length);
   } else if (ac->_dest_type != TypeOopPtr::BOTTOM) {
     adr_type = ac->_dest_type->add_offset(Type::OffsetBot)->is_ptr();
   } else {
     adr_type = TypeAryPtr::get_array_body_type(dest_elem);
