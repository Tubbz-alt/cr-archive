diff a/src/hotspot/share/runtime/javaCalls.cpp b/src/hotspot/share/runtime/javaCalls.cpp
--- a/src/hotspot/share/runtime/javaCalls.cpp
+++ b/src/hotspot/share/runtime/javaCalls.cpp
@@ -160,21 +160,21 @@
     case T_SHORT    : // fall through
     case T_INT      : // fall through
 #ifndef _LP64
     case T_OBJECT   : // fall through
     case T_ARRAY    : // fall through
-    case T_VALUETYPE: // fall through
+    case T_INLINE_TYPE: // fall through
 #endif
     case T_BYTE     : // fall through
     case T_VOID     : return T_INT;
     case T_LONG     : return T_LONG;
     case T_FLOAT    : return T_FLOAT;
     case T_DOUBLE   : return T_DOUBLE;
 #ifdef _LP64
     case T_ARRAY    : // fall through
     case T_OBJECT   : return T_OBJECT;
-    case T_VALUETYPE: return T_VALUETYPE;
+    case T_INLINE_TYPE: return T_INLINE_TYPE;
 #endif
     default:
       ShouldNotReachHere();
       return T_ILLEGAL;
   }
@@ -440,11 +440,11 @@
     }
   }
 #endif
 
   jobject value_buffer = NULL;
-  if (InlineTypeReturnedAsFields && result->get_type() == T_VALUETYPE) {
+  if (InlineTypeReturnedAsFields && result->get_type() == T_INLINE_TYPE) {
     // Pre allocate buffered value in case the result is returned
     // flattened by compiled code
     ValueKlass* vk = method->returned_value_type(thread);
     if (vk->can_be_returned_as_fields()) {
       oop instance = vk->allocate_instance(CHECK);
@@ -625,11 +625,11 @@
     case T_LONG:
     case T_DOUBLE:
       check_double_word(); break;
     case T_ARRAY:
     case T_OBJECT:
-    case T_VALUETYPE:
+    case T_INLINE_TYPE:
       check_reference(); break;
     default:
       ShouldNotReachHere();
     }
   }
