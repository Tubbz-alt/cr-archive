diff a/src/hotspot/share/runtime/sharedRuntime.cpp b/src/hotspot/share/runtime/sharedRuntime.cpp
--- a/src/hotspot/share/runtime/sharedRuntime.cpp
+++ b/src/hotspot/share/runtime/sharedRuntime.cpp
@@ -2370,13 +2370,13 @@
           // They are all promoted to T_INT in the calling convention
           return T_INT;
         }
       }
 
-      case T_VALUETYPE: {
+      case T_INLINE_TYPE: {
         // If inline types are passed as fields, return 'in' to differentiate
-        // between a T_VALUETYPE and a T_OBJECT in the signature.
+        // between a T_INLINE_TYPE and a T_OBJECT in the signature.
         return InlineTypePassFieldsAsArgs ? in : adapter_encoding(T_OBJECT, false);
       }
 
       case T_OBJECT:
       case T_ARRAY:
@@ -2429,11 +2429,11 @@
       int value = 0;
       for (int byte = 0; byte < _basic_types_per_int; byte++) {
         int bt = 0;
         if (sig_index < total_args_passed) {
           BasicType sbt = sig->at(sig_index++)._bt;
-          if (InlineTypePassFieldsAsArgs && sbt == T_VALUETYPE) {
+          if (InlineTypePassFieldsAsArgs && sbt == T_INLINE_TYPE) {
             // Found start of inline type in signature
             vt_count++;
             if (sig_index == 1 && has_ro_adapter) {
               // With a ro_adapter, replace receiver value type delimiter by T_VOID to prevent matching
               // with other adapters that have the same value type as first argument and no receiver.
@@ -2754,11 +2754,11 @@
       SigEntry::add_entry(sig_cc, T_OBJECT);
     }
   }
   Thread* THREAD = Thread::current();
   for (SignatureStream ss(_method->signature()); !ss.at_return_type(); ss.next()) {
-    if (ss.type() == T_VALUETYPE) {
+    if (ss.type() == T_INLINE_TYPE) {
       ValueKlass* vk = ss.as_value_klass(holder);
       if (vk->can_be_passed_as_fields()) {
         sig_cc->appendAll(vk->extended_sig());
       } else {
         SigEntry::add_entry(sig_cc, T_OBJECT);
@@ -2841,11 +2841,11 @@
     }
     SigEntry::add_entry(_sig, T_OBJECT);
   }
   for (SignatureStream ss(_method->signature()); !ss.at_return_type(); ss.next()) {
     BasicType bt = ss.type();
-    if (bt == T_VALUETYPE) {
+    if (bt == T_INLINE_TYPE) {
       if (ss.as_value_klass(_method->method_holder())->can_be_passed_as_fields()) {
         _num_value_args++;
       }
       bt = T_OBJECT;
     }
@@ -3601,11 +3601,11 @@
   allocate_receiver &= !callee->is_static() && holder->is_inline_klass();
   if (allocate_receiver) {
     nb_slots++;
   }
   for (SignatureStream ss(callee->signature()); !ss.at_return_type(); ss.next()) {
-    if (ss.type() == T_VALUETYPE) {
+    if (ss.type() == T_INLINE_TYPE) {
       nb_slots++;
     }
   }
   objArrayOop array_oop = oopFactory::new_objectArray(nb_slots, CHECK_NULL);
   objArrayHandle array(THREAD, array_oop);
@@ -3615,11 +3615,11 @@
     oop res = vk->allocate_instance(CHECK_NULL);
     array->obj_at_put(i, res);
     i++;
   }
   for (SignatureStream ss(callee->signature()); !ss.at_return_type(); ss.next()) {
-    if (ss.type() == T_VALUETYPE) {
+    if (ss.type() == T_INLINE_TYPE) {
       ValueKlass* vk = ss.as_value_klass(holder);
       oop res = vk->allocate_instance(CHECK_NULL);
       array->obj_at_put(i, res);
       i++;
     }
@@ -3681,11 +3681,11 @@
   }
 
   int j = 1;
   for (int i = 0; i < sig_vk->length(); i++) {
     BasicType bt = sig_vk->at(i)._bt;
-    if (bt == T_VALUETYPE) {
+    if (bt == T_INLINE_TYPE) {
       continue;
     }
     if (bt == T_VOID) {
       if (sig_vk->at(i-1)._bt == T_LONG ||
           sig_vk->at(i-1)._bt == T_DOUBLE) {
