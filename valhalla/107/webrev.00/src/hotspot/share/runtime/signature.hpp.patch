diff a/src/hotspot/share/runtime/signature.hpp b/src/hotspot/share/runtime/signature.hpp
--- a/src/hotspot/share/runtime/signature.hpp
+++ b/src/hotspot/share/runtime/signature.hpp
@@ -272,11 +272,11 @@
     case T_INT:     type_name("jint"    ); break;
     case T_LONG:    type_name("jlong"   ); break;
     case T_VOID:    type_name("void"    ); break;
     case T_ARRAY:
     case T_OBJECT:
-    case T_VALUETYPE:  type_name("jobject" ); break;
+    case T_INLINE_TYPE:  type_name("jobject" ); break;
     default: ShouldNotReachHere();
     }
   }
 
  public:
@@ -406,11 +406,11 @@
       pass_long();   _jni_offset += jni_offset; _offset += 2;
       break;
     }
     case T_ARRAY:
     case T_OBJECT:
-    case T_VALUETYPE:
+    case T_INLINE_TYPE:
       pass_object(); _jni_offset++; _offset++;
       break;
     default:
       ShouldNotReachHere();
     }
@@ -594,20 +594,20 @@
     if (e1->_offset != e2->_offset) {
       return e1->_offset - e2->_offset;
     }
     assert((e1->_bt == T_LONG && (e2->_bt == T_LONG || e2->_bt == T_VOID)) ||
            (e1->_bt == T_DOUBLE && (e2->_bt == T_DOUBLE || e2->_bt == T_VOID)) ||
-           e1->_bt == T_VALUETYPE || e2->_bt == T_VALUETYPE || e1->_bt == T_VOID || e2->_bt == T_VOID, "bad bt");
+           e1->_bt == T_INLINE_TYPE || e2->_bt == T_INLINE_TYPE || e1->_bt == T_VOID || e2->_bt == T_VOID, "bad bt");
     if (e1->_bt == e2->_bt) {
-      assert(e1->_bt == T_VALUETYPE || e1->_bt == T_VOID, "only ones with duplicate offsets");
+      assert(e1->_bt == T_INLINE_TYPE || e1->_bt == T_VOID, "only ones with duplicate offsets");
       return 0;
     }
     if (e1->_bt == T_VOID ||
-        e2->_bt == T_VALUETYPE) {
+        e2->_bt == T_INLINE_TYPE) {
       return 1;
     }
-    if (e1->_bt == T_VALUETYPE ||
+    if (e1->_bt == T_INLINE_TYPE ||
         e2->_bt == T_VOID) {
       return -1;
     }
     ShouldNotReachHere();
     return 0;
@@ -622,11 +622,11 @@
   static bool next_is_reserved(ExtendedSignature& sig, BasicType& bt, bool can_be_void = false);
 };
 
 class SigEntryFilter {
 public:
-  bool operator()(const SigEntry& entry) { return entry._bt != T_VALUETYPE && entry._bt != T_VOID; }
+  bool operator()(const SigEntry& entry) { return entry._bt != T_INLINE_TYPE && entry._bt != T_VOID; }
 };
 
 // Specialized SignatureStream: used for invoking SystemDictionary to either find
 //                              or resolve the underlying type when iterating over a
 //                              Java descriptor (or parts of it).
