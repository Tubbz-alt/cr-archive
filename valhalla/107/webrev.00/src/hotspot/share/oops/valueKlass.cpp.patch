diff a/src/hotspot/share/oops/valueKlass.cpp b/src/hotspot/share/oops/valueKlass.cpp
--- a/src/hotspot/share/oops/valueKlass.cpp
+++ b/src/hotspot/share/oops/valueKlass.cpp
@@ -106,11 +106,11 @@
       continue;
     } else if (fs.offset() > last_offset) {
       BasicType type = Signature::basic_type(fs.signature());
       if (is_java_primitive(type)) {
         last_tsz = type2aelembytes(type);
-      } else if (type == T_VALUETYPE) {
+      } else if (type == T_INLINE_TYPE) {
         // Not just primitives. Layout aligns embedded value, so use jlong aligned it is
         return heapOopAlignedSize;
       } else {
         guarantee(0, "Unknown type %d", type);
       }
@@ -276,34 +276,34 @@
 // the offset of each field in the inline type: i2c and c2i adapters
 // need that to load or store fields. Finally, the list of fields is
 // sorted in order of increasing offsets: the adapters and the
 // compiled code need to agree upon the order of fields.
 //
-// The list of basic types that is returned starts with a T_VALUETYPE
-// and ends with an extra T_VOID. T_VALUETYPE/T_VOID pairs are used as
+// The list of basic types that is returned starts with a T_INLINE_TYPE
+// and ends with an extra T_VOID. T_INLINE_TYPE/T_VOID pairs are used as
 // delimiters. Every entry between the two is a field of the value
 // type. If there's an embedded inline type in the list, it also starts
-// with a T_VALUETYPE and ends with a T_VOID. This is so we can
+// with a T_INLINE_TYPE and ends with a T_VOID. This is so we can
 // generate a unique fingerprint for the method's adapters and we can
 // generate the list of basic types from the interpreter point of view
 // (value types passed as reference: iterate on the list until a
-// T_VALUETYPE, drop everything until and including the closing
+// T_INLINE_TYPE, drop everything until and including the closing
 // T_VOID) or the compiler point of view (each field of the value
-// types is an argument: drop all T_VALUETYPE/T_VOID from the list).
+// types is an argument: drop all T_INLINE_TYPE/T_VOID from the list).
 int ValueKlass::collect_fields(GrowableArray<SigEntry>* sig, int base_off) {
   int count = 0;
-  SigEntry::add_entry(sig, T_VALUETYPE, base_off);
+  SigEntry::add_entry(sig, T_INLINE_TYPE, base_off);
   for (AllFieldStream fs(this); !fs.done(); fs.next()) {
     if (fs.access_flags().is_static()) continue;
     int offset = base_off + fs.offset() - (base_off > 0 ? first_field_offset() : 0);
     if (fs.is_inlined()) {
       // Resolve klass of inlined field and recursively collect fields
       Klass* vk = get_inline_type_field_klass(fs.index());
       count += ValueKlass::cast(vk)->collect_fields(sig, offset);
     } else {
       BasicType bt = Signature::basic_type(fs.signature());
-      if (bt == T_VALUETYPE) {
+      if (bt == T_INLINE_TYPE) {
         bt = T_OBJECT;
       }
       SigEntry::add_entry(sig, bt, offset);
       count += type2size[bt];
     }
@@ -311,11 +311,11 @@
   int offset = base_off + size_helper()*HeapWordSize - (base_off > 0 ? first_field_offset() : 0);
   SigEntry::add_entry(sig, T_VOID, offset);
   if (base_off == 0) {
     sig->sort(SigEntry::compare);
   }
-  assert(sig->at(0)._bt == T_VALUETYPE && sig->at(sig->length()-1)._bt == T_VOID, "broken structure");
+  assert(sig->at(0)._bt == T_INLINE_TYPE && sig->at(sig->length()-1)._bt == T_VOID, "broken structure");
   return count;
 }
 
 void ValueKlass::initialize_calling_convention(TRAPS) {
   // Because the pack and unpack handler addresses need to be loadable from generated code,
@@ -416,11 +416,11 @@
       oop v = *(oop*)loc;
       assert(v == NULL || oopDesc::is_oop(v), "not an oop?");
       assert(Universe::heap()->is_in_or_null(v), "must be heap pointer");
       handles.push(Handle(thread, v));
     }
-    if (bt == T_VALUETYPE) {
+    if (bt == T_INLINE_TYPE) {
       continue;
     }
     if (bt == T_VOID &&
         sig_vk->at(i-1)._bt != T_LONG &&
         sig_vk->at(i-1)._bt != T_DOUBLE) {
@@ -444,11 +444,11 @@
     if (bt == T_OBJECT || bt == T_ARRAY) {
       VMRegPair pair = regs->at(j);
       address loc = reg_map.location(pair.first());
       *(oop*)loc = handles.at(k++)();
     }
-    if (bt == T_VALUETYPE) {
+    if (bt == T_INLINE_TYPE) {
       continue;
     }
     if (bt == T_VOID &&
         sig_vk->at(i-1)._bt != T_LONG &&
         sig_vk->at(i-1)._bt != T_DOUBLE) {
@@ -468,11 +468,11 @@
 
   int j = 1;
   int k = 0;
   for (int i = 0; i < sig_vk->length(); i++) {
     BasicType bt = sig_vk->at(i)._bt;
-    if (bt == T_VALUETYPE) {
+    if (bt == T_INLINE_TYPE) {
       continue;
     }
     if (bt == T_VOID) {
       if (sig_vk->at(i-1)._bt == T_LONG ||
           sig_vk->at(i-1)._bt == T_DOUBLE) {
