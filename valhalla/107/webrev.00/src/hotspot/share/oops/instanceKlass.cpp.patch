diff a/src/hotspot/share/oops/instanceKlass.cpp b/src/hotspot/share/oops/instanceKlass.cpp
--- a/src/hotspot/share/oops/instanceKlass.cpp
+++ b/src/hotspot/share/oops/instanceKlass.cpp
@@ -154,11 +154,11 @@
     }
   }
   return false;
 }
 
-bool InstanceKlass::field_is_inline_type(int index) const { return Signature::basic_type(field(index)->signature(constants())) == T_VALUETYPE; }
+bool InstanceKlass::field_is_inline_type(int index) const { return Signature::basic_type(field(index)->signature(constants())) == T_INLINE_TYPE; }
 
 // private: called to verify that k is a static member of this nest.
 // We know that k is an instance class in the same package and hence the
 // same classloader.
 bool InstanceKlass::has_nest_member(InstanceKlass* k, TRAPS) const {
@@ -1004,11 +1004,11 @@
       for (SignatureStream ss(m->signature()); !ss.is_done(); ss.next()) {
         if (ss.is_reference()) {
           if (ss.is_array()) {
             ss.skip_array_prefix();
           }
-          if (ss.type() == T_VALUETYPE) {
+          if (ss.type() == T_INLINE_TYPE) {
             Symbol* symb = ss.as_symbol();
 
             oop loader = class_loader();
             oop protection_domain = this->protection_domain();
             Klass* klass = SystemDictionary::resolve_or_fail(symb,
@@ -1257,11 +1257,11 @@
 
   // Step 8
   // Initialize classes of inline fields
   {
     for (AllFieldStream fs(this); !fs.done(); fs.next()) {
-      if (Signature::basic_type(fs.signature()) == T_VALUETYPE) {
+      if (Signature::basic_type(fs.signature()) == T_INLINE_TYPE) {
         Klass* klass = get_inline_type_field_klass_or_null(fs.index());
         if (fs.access_flags().is_static() && klass == NULL) {
           klass = SystemDictionary::resolve_or_fail(field_signature(fs.index())->fundamental_name(THREAD),
               Handle(THREAD, class_loader()),
               Handle(THREAD, protection_domain()),
@@ -2663,11 +2663,11 @@
     array_klasses()->remove_unshareable_info();
   }
 
   if (has_inline_type_fields()) {
     for (AllFieldStream fs(fields(), constants()); !fs.done(); fs.next()) {
-      if (Signature::basic_type(fs.signature()) == T_VALUETYPE) {
+      if (Signature::basic_type(fs.signature()) == T_INLINE_TYPE) {
         reset_inline_type_field_klass(fs.index());
       }
     }
   }
 
