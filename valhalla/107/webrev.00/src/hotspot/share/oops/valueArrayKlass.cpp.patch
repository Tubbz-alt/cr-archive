diff a/src/hotspot/share/oops/valueArrayKlass.cpp b/src/hotspot/share/oops/valueArrayKlass.cpp
--- a/src/hotspot/share/oops/valueArrayKlass.cpp
+++ b/src/hotspot/share/oops/valueArrayKlass.cpp
@@ -158,11 +158,11 @@
   int length = *last_size;
   return allocate(length, THREAD);
 }
 
 jint ValueArrayKlass::array_layout_helper(ValueKlass* vk) {
-  BasicType etype = T_VALUETYPE;
+  BasicType etype = T_INLINE_TYPE;
   int esize = upper_log2(vk->raw_value_byte_size());
   int hsize = arrayOopDesc::base_offset_in_bytes(etype);
 
   int lh = Klass::array_layout_helper(_lh_array_tag_vt_value, true, hsize, etype, esize);
 
@@ -190,11 +190,11 @@
 // nof bytes = "max_jint * HeapWord" since the "oopDesc::oop_iterate_size"
 // returns "int" HeapWords, need fix for JDK-4718400 and JDK-8233189
 jint ValueArrayKlass::max_elements() const {
   // Check the max number of heap words limit first (because of int32_t in oopDesc_oop_size() etc)
   size_t max_size = max_jint;
-  max_size -= arrayOopDesc::header_size(T_VALUETYPE);
+  max_size -= arrayOopDesc::header_size(T_INLINE_TYPE);
   max_size = align_down(max_size, MinObjAlignment);
   max_size <<= LogHeapWordSize;                                  // convert to max payload size in bytes
   max_size >>= layout_helper_log2_element_size(_layout_helper);  // divide by element size (in bytes) = max elements
   // Within int32_t heap words, still can't exceed Java array element limit
   if (max_size > max_jint) {
