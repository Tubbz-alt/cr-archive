diff a/src/hotspot/share/c1/c1_LIR.cpp b/src/hotspot/share/c1/c1_LIR.cpp
--- a/src/hotspot/share/c1/c1_LIR.cpp
+++ b/src/hotspot/share/c1/c1_LIR.cpp
@@ -91,11 +91,11 @@
 //---------------------------------------------------
 
 char LIR_OprDesc::type_char(BasicType t) {
   switch (t) {
     case T_ARRAY:
-    case T_VALUETYPE:
+    case T_INLINE_TYPE:
       t = T_OBJECT;
     case T_BOOLEAN:
     case T_CHAR:
     case T_FLOAT:
     case T_DOUBLE:
@@ -150,11 +150,11 @@
     case T_INT:
     case T_ADDRESS:
     case T_OBJECT:
     case T_METADATA:
     case T_ARRAY:
-    case T_VALUETYPE:
+    case T_INLINE_TYPE:
       assert((kindfield == cpu_register || kindfield == stack_value) &&
              size_field() == single_size, "must match");
       break;
 
     case T_ILLEGAL:
@@ -1057,11 +1057,11 @@
         }
         return true;
       }
     } else if (is_method_handle_invoke()) {
       BasicType bt = method()->return_type()->basic_type();
-      if (bt == T_OBJECT || bt == T_VALUETYPE) {
+      if (bt == T_OBJECT || bt == T_INLINE_TYPE) {
         // A value type might be returned from the call but we don't know its
         // type. Either we get a buffered value (and nothing needs to be done)
         // or one of the values being returned is the klass of the value type
         // (RAX on x64, with LSB set to 1) and we need to allocate a value
         // type instance of that type and initialize it with other values being
