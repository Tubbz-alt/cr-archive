diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConventionC1.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConventionC1.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConventionC1.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConventionC1.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -59,11 +59,11 @@
         case 1: return new String[] {
                 // Default: both C1 and C2 are enabled, tiered compilation enabled
                 "-XX:CICompilerCount=2",
                 "-XX:TieredStopAtLevel=4",
                 "-XX:+TieredCompilation",
-                "-XX:+StressValueTypeReturnedAsFields"
+                "-XX:+StressInlineTypeReturnedAsFields"
             };
         case 2: return new String[] {
                 // Same as above, but flip all the compLevel=C1 and compLevel=C2, so we test
                 // the compliment of the above scenario.
                 "-XX:CICompilerCount=2",
@@ -437,11 +437,11 @@
 
     static RefPoint refPointField1 = new RefPoint(12, 34);
     static RefPoint refPointField2 = new RefPoint(56789, 0x12345678);
 
     // This inline class has too many fields to fit in registers on x64 for
-    // ValueTypeReturnedAsFields.
+    // InlineTypeReturnedAsFields.
     static inline class TooBigToReturnAsFields {
         int a0 = 0;
         int a1 = 1;
         int a2 = 2;
         int a3 = 3;
@@ -1584,13 +1584,13 @@
             Asserts.assertEQ(result, n);
         }
     }
 
     //-------------------------------------------------------------------------------
-    // Tests for how C1 handles ValueTypeReturnedAsFields in both calls and returns
+    // Tests for how C1 handles InlineTypeReturnedAsFields in both calls and returns
     //-------------------------------------------------------------------------------
-    // C2->C1 invokestatic with ValueTypeReturnedAsFields (Point)
+    // C2->C1 invokestatic with InlineTypeReturnedAsFields (Point)
     @Test(compLevel = C2)
     public int test78(Point p) {
         Point np = test78_helper(p);
         return np.x + np.y;
     }
@@ -1606,11 +1606,11 @@
         int result = test78(pointField1);
         int n = pointField1.x + pointField1.y;
         Asserts.assertEQ(result, n);
     }
 
-    // C2->C1 invokestatic with ValueTypeReturnedAsFields (RefPoint)
+    // C2->C1 invokestatic with InlineTypeReturnedAsFields (RefPoint)
     @Test(compLevel = C2)
     public int test79(RefPoint p) {
         RefPoint np = test79_helper(p);
         return np.x.n + np.y.n;
     }
@@ -1626,11 +1626,11 @@
         int result = test79(refPointField1);
         int n = refPointField1.x.n + refPointField1.y.n;
         Asserts.assertEQ(result, n);
     }
 
-    // C1->C2 invokestatic with ValueTypeReturnedAsFields (RefPoint)
+    // C1->C2 invokestatic with InlineTypeReturnedAsFields (RefPoint)
     @Test(compLevel = C1)
     public int test80(RefPoint p) {
         RefPoint np = test80_helper(p);
         return np.x.n + np.y.n;
     }
@@ -1646,11 +1646,11 @@
         int result = test80(refPointField1);
         int n = refPointField1.x.n + refPointField1.y.n;
         Asserts.assertEQ(result, n);
     }
 
-    // Interpreter->C1 invokestatic with ValueTypeReturnedAsFields (Point)
+    // Interpreter->C1 invokestatic with InlineTypeReturnedAsFields (Point)
     @Test(compLevel = C1)
     public Point test81(Point p) {
         return p;
     }
 
@@ -1662,11 +1662,11 @@
         p = test81(pointField2);
         Asserts.assertEQ(p.x, pointField2.x);
         Asserts.assertEQ(p.y, pointField2.y);
     }
 
-    // C1->Interpreter invokestatic with ValueTypeReturnedAsFields (RefPoint)
+    // C1->Interpreter invokestatic with InlineTypeReturnedAsFields (RefPoint)
     @Test(compLevel = C1)
     public int test82(RefPoint p) {
         RefPoint np = test82_helper(p);
         return np.x.n + np.y.n;
     }
@@ -1682,14 +1682,14 @@
         int n = refPointField1.x.n + refPointField1.y.n;
         Asserts.assertEQ(result, n);
     }
 
     //-------------------------------------------------------------------------------
-    // Tests for ValueTypeReturnedAsFields vs the inline class TooBigToReturnAsFields
+    // Tests for InlineTypeReturnedAsFields vs the inline class TooBigToReturnAsFields
     //-------------------------------------------------------------------------------
 
-    // C2->C1 invokestatic with ValueTypeReturnedAsFields (TooBigToReturnAsFields)
+    // C2->C1 invokestatic with InlineTypeReturnedAsFields (TooBigToReturnAsFields)
     @Test(compLevel = C2)
     public int test83(TooBigToReturnAsFields p) {
         TooBigToReturnAsFields np = test83_helper(p);
         return p.a0 + p.a5;
     }
@@ -1705,11 +1705,11 @@
         int result = test83(tooBig);
         int n = tooBig.a0 + tooBig.a5;
         Asserts.assertEQ(result, n);
     }
 
-    // C1->C2 invokestatic with ValueTypeReturnedAsFields (TooBigToReturnAsFields)
+    // C1->C2 invokestatic with InlineTypeReturnedAsFields (TooBigToReturnAsFields)
     @Test(compLevel = C1)
     public int test84(TooBigToReturnAsFields p) {
         TooBigToReturnAsFields np = test84_helper(p);
         return p.a0 + p.a5;
     }
@@ -1725,11 +1725,11 @@
         int result = test84(tooBig);
         int n = tooBig.a0 + tooBig.a5;
         Asserts.assertEQ(result, n);
     }
 
-    // Interpreter->C1 invokestatic with ValueTypeReturnedAsFields (TooBigToReturnAsFields)
+    // Interpreter->C1 invokestatic with InlineTypeReturnedAsFields (TooBigToReturnAsFields)
     @Test(compLevel = C1)
     public TooBigToReturnAsFields test85(TooBigToReturnAsFields p) {
         return p;
     }
 
@@ -1738,11 +1738,11 @@
         TooBigToReturnAsFields p = test85(tooBig);
         Asserts.assertEQ(p.a0, tooBig.a0);
         Asserts.assertEQ(p.a2, tooBig.a2);
     }
 
-    // C1->Interpreter invokestatic with ValueTypeReturnedAsFields (TooBigToReturnAsFields)
+    // C1->Interpreter invokestatic with InlineTypeReturnedAsFields (TooBigToReturnAsFields)
     @Test(compLevel = C1)
     public int test86(TooBigToReturnAsFields p) {
         TooBigToReturnAsFields np = test86_helper(p);
         return p.a0 + p.a5;
     }
@@ -1758,14 +1758,14 @@
         int n = tooBig.a0 + tooBig.a5;
         Asserts.assertEQ(result, n);
     }
 
     //-------------------------------------------------------------------------------
-    // Tests for how C1 handles ValueTypeReturnedAsFields in both calls and returns (RefPoint?)
+    // Tests for how C1 handles InlineTypeReturnedAsFields in both calls and returns (RefPoint?)
     //-------------------------------------------------------------------------------
 
-    // C2->C1 invokestatic with ValueTypeReturnedAsFields (RefPoint.ref)
+    // C2->C1 invokestatic with InlineTypeReturnedAsFields (RefPoint.ref)
     @Test(compLevel = C2)
     public RefPoint.ref test87(RefPoint.ref p) {
         return test87_helper(p);
     }
 
@@ -1779,11 +1779,11 @@
     public void test87_verifier(boolean warmup) {
         Object result = test87(null);
         Asserts.assertEQ(result, null);
     }
 
-    // C2->C1 invokestatic with ValueTypeReturnedAsFields (RefPoint.ref with constant null)
+    // C2->C1 invokestatic with InlineTypeReturnedAsFields (RefPoint.ref with constant null)
     @Test(compLevel = C2)
     public RefPoint.ref test88() {
         return test88_helper();
     }
 
@@ -1797,11 +1797,11 @@
     public void test88_verifier(boolean warmup) {
         Object result = test88();
         Asserts.assertEQ(result, null);
     }
 
-    // C1->C2 invokestatic with ValueTypeReturnedAsFields (RefPoint.ref)
+    // C1->C2 invokestatic with InlineTypeReturnedAsFields (RefPoint.ref)
     @Test(compLevel = C1)
     public RefPoint.ref test89(RefPoint.ref p) {
         return test89_helper(p);
     }
 
