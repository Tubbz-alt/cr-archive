diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConvention.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConvention.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConvention.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConvention.java
@@ -45,11 +45,11 @@
     @Override
     public String[] getExtraVMParameters(int scenario) {
         switch (scenario) {
         case 0: return new String[] {"-Dsun.reflect.inflationThreshold=10000"}; // Don't generate bytecodes but call through runtime for reflective calls
         case 1: return new String[] {"-Dsun.reflect.inflationThreshold=10000"};
-        case 3: return new String[] {"-XX:ValueArrayElemMaxFlatSize=0"};
+        case 3: return new String[] {"-XX:InlineArrayElemMaxFlatSize=0"};
         }
         return null;
     }
 
     static {
@@ -307,12 +307,12 @@
     public MyValue3 test15_interp() {
         return test15_vt;
     }
 
     MyValue3 test15_vt2;
-    @Test(valid = ValueTypeReturnedAsFieldsOn, failOn = ALLOC + LOAD + TRAP)
-    @Test(valid = ValueTypeReturnedAsFieldsOff)
+    @Test(valid = InlineTypeReturnedAsFieldsOn, failOn = ALLOC + LOAD + TRAP)
+    @Test(valid = InlineTypeReturnedAsFieldsOff)
     public void test15() {
         test15_vt2 = test15_interp();
     }
 
     @DontCompile
@@ -321,12 +321,12 @@
         test15_vt.verify(test15_vt2);
     }
 
     // Return value types in registers from compiled -> interpreter
     final MyValue3 test16_vt = MyValue3.create();
-    @Test(valid = ValueTypeReturnedAsFieldsOn, failOn = ALLOC + STORE + TRAP)
-    @Test(valid = ValueTypeReturnedAsFieldsOff)
+    @Test(valid = InlineTypeReturnedAsFieldsOn, failOn = ALLOC + STORE + TRAP)
+    @Test(valid = InlineTypeReturnedAsFieldsOff)
     public MyValue3 test16() {
         return test16_vt;
     }
 
     @DontCompile
@@ -341,12 +341,12 @@
     public MyValue3 test17_comp() {
         return test17_vt;
     }
 
     MyValue3 test17_vt2;
-    @Test(valid = ValueTypeReturnedAsFieldsOn, failOn = ALLOC + LOAD + TRAP)
-    @Test(valid = ValueTypeReturnedAsFieldsOff)
+    @Test(valid = InlineTypeReturnedAsFieldsOn, failOn = ALLOC + LOAD + TRAP)
+    @Test(valid = InlineTypeReturnedAsFieldsOff)
     public void test17() {
         test17_vt2 = test17_comp();
     }
 
     @DontCompile
