diff a/src/hotspot/share/oops/valueKlass.cpp b/src/hotspot/share/oops/valueKlass.cpp
--- a/src/hotspot/share/oops/valueKlass.cpp
+++ b/src/hotspot/share/oops/valueKlass.cpp
@@ -180,23 +180,23 @@
   if (!ValueArrayFlatten) {
     return false;
   }
   // Too big
   int elem_bytes = raw_value_byte_size();
-  if ((ValueArrayElemMaxFlatSize >= 0) && (elem_bytes > ValueArrayElemMaxFlatSize)) {
+  if ((InlineArrayElemMaxFlatSize >= 0) && (elem_bytes > InlineArrayElemMaxFlatSize)) {
     return false;
   }
   // Too many embedded oops
-  if ((ValueArrayElemMaxFlatOops >= 0) && (nonstatic_oop_count() > ValueArrayElemMaxFlatOops)) {
+  if ((InlineArrayElemMaxFlatOops >= 0) && (nonstatic_oop_count() > InlineArrayElemMaxFlatOops)) {
     return false;
   }
   // Declared atomic but not naturally atomic.
   if (is_declared_atomic() && !is_naturally_atomic()) {
     return false;
   }
-  // VM enforcing ValueArrayAtomicAccess only...
-  if (ValueArrayAtomicAccess && (!is_naturally_atomic())) {
+  // VM enforcing InlineArrayAtomicAccess only...
+  if (InlineArrayAtomicAccess && (!is_naturally_atomic())) {
     return false;
   }
   return true;
 }
 
@@ -314,21 +314,21 @@
 
 void ValueKlass::initialize_calling_convention(TRAPS) {
   // Because the pack and unpack handler addresses need to be loadable from generated code,
   // they are stored at a fixed offset in the klass metadata. Since value type klasses do
   // not have a vtable, the vtable offset is used to store these addresses.
-  if (is_scalarizable() && (ValueTypeReturnedAsFields || ValueTypePassFieldsAsArgs)) {
+  if (is_scalarizable() && (InlineTypeReturnedAsFields || InlineTypePassFieldsAsArgs)) {
     ResourceMark rm;
     GrowableArray<SigEntry> sig_vk;
     int nb_fields = collect_fields(&sig_vk);
     Array<SigEntry>* extended_sig = MetadataFactory::new_array<SigEntry>(class_loader_data(), sig_vk.length(), CHECK);
     *((Array<SigEntry>**)adr_extended_sig()) = extended_sig;
     for (int i = 0; i < sig_vk.length(); i++) {
       extended_sig->at_put(i, sig_vk.at(i));
     }
 
-    if (ValueTypeReturnedAsFields) {
+    if (InlineTypeReturnedAsFields) {
       nb_fields++;
       BasicType* sig_bt = NEW_RESOURCE_ARRAY(BasicType, nb_fields);
       sig_bt[0] = T_METADATA;
       SigEntry::fill_sig_bt(&sig_vk, sig_bt+1);
       VMRegPair* regs = NEW_RESOURCE_ARRAY(VMRegPair, nb_fields);
@@ -375,13 +375,13 @@
     *((address*)adr_pack_handler_jobject()) = NULL;
     *((address*)adr_unpack_handler()) = NULL;
   }
 }
 
-// Can this value type be scalarized?
+// Can this inline type be scalarized?
 bool ValueKlass::is_scalarizable() const {
-  return ScalarizeValueTypes;
+  return ScalarizeInlineTypes;
 }
 
 // Can this value type be returned as multiple values?
 bool ValueKlass::can_be_returned_as_fields() const {
   return return_regs() != NULL;
@@ -417,11 +417,11 @@
   assert(j == regs->length(), "missed a field?");
 }
 
 // Update oop fields in registers from handles after a safepoint
 void ValueKlass::restore_oop_results(RegisterMap& reg_map, GrowableArray<Handle>& handles) const {
-  assert(ValueTypeReturnedAsFields, "inconsistent");
+  assert(InlineTypeReturnedAsFields, "inconsistent");
   const Array<SigEntry>* sig_vk = extended_sig();
   const Array<VMRegPair>* regs = return_regs();
   assert(regs != NULL, "inconsistent");
 
   int j = 1;
