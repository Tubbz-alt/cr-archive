diff a/src/hotspot/cpu/x86/macroAssembler_x86.hpp b/src/hotspot/cpu/x86/macroAssembler_x86.hpp
--- a/src/hotspot/cpu/x86/macroAssembler_x86.hpp
+++ b/src/hotspot/cpu/x86/macroAssembler_x86.hpp
@@ -100,18 +100,18 @@
   void null_check(Register reg, int offset = -1);
   static bool needs_explicit_null_check(intptr_t offset);
   static bool uses_implicit_null_check(void* address);
 
   // valueKlass queries, kills temp_reg
-  void test_klass_is_value(Register klass, Register temp_reg, Label& is_value);
-  void test_klass_is_empty_value(Register klass, Register temp_reg, Label& is_empty_value);
+  void test_klass_is_inline_type(Register klass, Register temp_reg, Label& is_inline_type);
+  void test_klass_is_empty_inline_type(Register klass, Register temp_reg, Label& is_empty_inline_type);
 
   // Get the default value oop for the given InlineKlass
-  void get_default_value_oop(Register value_klass, Register temp_reg, Register obj);
+  void get_default_value_oop(Register inline_klass, Register temp_reg, Register obj);
   // The empty value oop, for the given InlineKlass ("empty" as in no instance fields)
   // get_default_value_oop with extra assertion for empty inline klass
-  void get_empty_value_oop(Register value_klass, Register temp_reg, Register obj);
+  void get_empty_inline_type_oop(Register inline_klass, Register temp_reg, Register obj);
 
   void test_field_is_inline_type(Register flags, Register temp_reg, Label& is_inline);
   void test_field_is_not_inline_type(Register flags, Register temp_reg, Label& not_inline);
   void test_field_is_inlined(Register flags, Register temp_reg, Label& is_inlined);
 
@@ -575,11 +575,11 @@
     Label&   slow_case                 // continuation point if fast allocation fails
   );
   void zero_memory(Register address, Register length_in_bytes, int offset_in_bytes, Register temp);
 
   // For field "index" within "klass", return value_klass ...
-  void get_value_field_klass(Register klass, Register index, Register value_klass);
+  void get_inline_type_field_klass(Register klass, Register index, Register value_klass);
 
   // interface method calling
   void lookup_interface_method(Register recv_klass,
                                Register intf_klass,
                                RegisterOrConstant itable_index,
