diff a/src/hotspot/cpu/x86/templateTable_x86.cpp b/src/hotspot/cpu/x86/templateTable_x86.cpp
--- a/src/hotspot/cpu/x86/templateTable_x86.cpp
+++ b/src/hotspot/cpu/x86/templateTable_x86.cpp
@@ -1223,11 +1223,11 @@
 
     __ bind(is_type_ok);
     // rbx: value's klass
     // rdx: array
     // rdi: array klass
-    __ test_klass_is_empty_value(rbx, rax, done);
+    __ test_klass_is_empty_inline_type(rbx, rax, done);
 
     // calc dst for copy
     __ movl(rax, at_tos_p1()); // index
     __ data_for_value_array_index(rdx, rdi, rax, rax);
 
@@ -2484,11 +2484,11 @@
   transition(atos, vtos);
   // assume branch is more often taken than not (loops use backward branches)
   Label taken, not_taken;
   __ pop_ptr(rdx);
 
-  const int is_value_mask = markWord::always_locked_pattern;
+  const int is_inline_type_mask = markWord::always_locked_pattern;
   if (EnableValhalla) {
     __ cmpoop(rdx, rax);
     __ jcc(Assembler::equal, (cc == equal) ? taken : not_taken);
 
     // might be substitutable, test if either rax or rdx is null
@@ -2497,15 +2497,15 @@
     __ testptr(rbx, rbx);
     __ jcc(Assembler::zero, (cc == equal) ? not_taken : taken);
 
     // and both are values ?
     __ movptr(rbx, Address(rdx, oopDesc::mark_offset_in_bytes()));
-    __ andptr(rbx, is_value_mask);
+    __ andptr(rbx, is_inline_type_mask);
     __ movptr(rcx, Address(rax, oopDesc::mark_offset_in_bytes()));
-    __ andptr(rbx, is_value_mask);
+    __ andptr(rbx, is_inline_type_mask);
     __ andptr(rbx, rcx);
-    __ cmpl(rbx, is_value_mask);
+    __ cmpl(rbx, is_inline_type_mask);
     __ jcc(Assembler::notEqual, (cc == equal) ? not_taken : taken);
 
     // same value klass ?
     __ load_metadata(rbx, rdx);
     __ load_metadata(rcx, rax);
@@ -3009,11 +3009,11 @@
   jvmti_post_field_access(cache, index, is_static, false);
   load_field_cp_cache_entry(obj, cache, index, off, flags, is_static);
 
   const Address field(obj, off, Address::times_1, 0*wordSize);
 
-  Label Done, notByte, notBool, notInt, notShort, notChar, notLong, notFloat, notObj, notValueType;
+  Label Done, notByte, notBool, notInt, notShort, notChar, notLong, notFloat, notObj, notInlineType;
 
   if (!is_static) {
     __ movptr(rcx, Address(cache, index, Address::times_ptr,
                            in_bytes(ConstantPoolCache::base_offset() +
                                     ConstantPoolCacheEntry::f1_offset())));
@@ -3088,11 +3088,11 @@
           __ jcc(Assembler::notEqual, slow_case);
         __ get_default_value_oop(rcx, off, rax);
         __ jmp(finish);
         __ bind(slow_case);
 #endif // LP64
-          __ call_VM(rax, CAST_FROM_FN_PTR(address, InterpreterRuntime::uninitialized_static_value_field),
+          __ call_VM(rax, CAST_FROM_FN_PTR(address, InterpreterRuntime::uninitialized_static_inline_type_field),
                  obj, flags2);
 #ifdef _LP64
           __ bind(finish);
 #endif // _LP64
           __ verify_oop(rax);
@@ -3118,11 +3118,11 @@
           __ load_heap_oop(rax, field);
           __ pop(rcx);
           __ testptr(rax, rax);
           __ jcc(Assembler::notZero, nonnull);
             __ andl(flags2, ConstantPoolCacheEntry::field_index_mask);
-            __ get_value_field_klass(rcx, flags2, rbx);
+            __ get_inline_type_field_klass(rcx, flags2, rbx);
             __ get_default_value_oop(rbx, rcx, rax);
           __ bind(nonnull);
           __ verify_oop(rax);
           __ push(atos);
           __ jmp(rewrite_inline);
@@ -3391,11 +3391,11 @@
   // field addresses
   const Address field(obj, off, Address::times_1, 0*wordSize);
   NOT_LP64( const Address hi(obj, off, Address::times_1, 1*wordSize);)
 
   Label notByte, notBool, notInt, notShort, notChar,
-        notLong, notFloat, notObj, notValueType;
+        notLong, notFloat, notObj, notInlineType;
   Label Done;
 
   const Register bc    = LP64_ONLY(c_rarg3) NOT_LP64(rcx);
 
   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
@@ -3849,11 +3849,11 @@
                                       ConstantPoolCacheEntry::flags_offset())));
           __ andl(rdx, ConstantPoolCacheEntry::field_index_mask);
           __ movptr(rcx, Address(rcx, rbx, Address::times_ptr,
                                        in_bytes(ConstantPoolCache::base_offset() +
                                                 ConstantPoolCacheEntry::f1_offset())));
-          __ get_value_field_klass(rcx, rdx, rbx);
+          __ get_inline_type_field_klass(rcx, rdx, rbx);
           __ get_default_value_oop(rbx, rcx, rax);
         __ bind(nonnull);
         __ verify_oop(rax);
         __ jmp(Done);
       __ bind(is_inlined);
@@ -4673,15 +4673,15 @@
   // check for NULL object
   __ null_check(rax);
 
   __ resolve(IS_NOT_NULL, rax);
 
-  const int is_value_mask = markWord::always_locked_pattern;
+  const int is_inline_type_mask = markWord::always_locked_pattern;
   Label has_identity;
   __ movptr(rbx, Address(rax, oopDesc::mark_offset_in_bytes()));
-  __ andptr(rbx, is_value_mask);
-  __ cmpl(rbx, is_value_mask);
+  __ andptr(rbx, is_inline_type_mask);
+  __ cmpl(rbx, is_inline_type_mask);
   __ jcc(Assembler::notEqual, has_identity);
   __ call_VM(noreg, CAST_FROM_FN_PTR(address,
                      InterpreterRuntime::throw_illegal_monitor_state_exception));
   __ should_not_reach_here();
   __ bind(has_identity);
@@ -4783,15 +4783,15 @@
   // check for NULL object
   __ null_check(rax);
 
   __ resolve(IS_NOT_NULL, rax);
 
-  const int is_value_mask = markWord::always_locked_pattern;
+  const int is_inline_type_mask = markWord::always_locked_pattern;
   Label has_identity;
   __ movptr(rbx, Address(rax, oopDesc::mark_offset_in_bytes()));
-  __ andptr(rbx, is_value_mask);
-  __ cmpl(rbx, is_value_mask);
+  __ andptr(rbx, is_inline_type_mask);
+  __ cmpl(rbx, is_inline_type_mask);
   __ jcc(Assembler::notEqual, has_identity);
   __ call_VM(noreg, CAST_FROM_FN_PTR(address,
                      InterpreterRuntime::throw_illegal_monitor_state_exception));
   __ should_not_reach_here();
   __ bind(has_identity);
