diff a/src/hotspot/cpu/aarch64/templateTable_aarch64.cpp b/src/hotspot/cpu/aarch64/templateTable_aarch64.cpp
--- a/src/hotspot/cpu/aarch64/templateTable_aarch64.cpp
+++ b/src/hotspot/cpu/aarch64/templateTable_aarch64.cpp
@@ -2678,11 +2678,11 @@
         __ cbz(r0, isUninitialized);
           __ push(atos);
           __ b(Done);
         __ bind(isUninitialized);
           __ andw(raw_flags, raw_flags, ConstantPoolCacheEntry::field_index_mask);
-          __ call_VM(r0, CAST_FROM_FN_PTR(address, InterpreterRuntime::uninitialized_static_value_field), obj, raw_flags);
+          __ call_VM(r0, CAST_FROM_FN_PTR(address, InterpreterRuntime::uninitialized_static_inline_type_field), obj, raw_flags);
           __ verify_oop(r0);
           __ push(atos);
           __ b(Done);
     } else {
       Label isFlattened, isInitialized, is_inline, rewrite_inline;
@@ -2698,11 +2698,11 @@
         __ test_field_is_inlined(raw_flags, r8 /* temp */, isFlattened);
          // Non-inline field case
           __ load_heap_oop(r0, field);
           __ cbnz(r0, isInitialized);
             __ andw(raw_flags, raw_flags, ConstantPoolCacheEntry::field_index_mask);
-            __ call_VM(r0, CAST_FROM_FN_PTR(address, InterpreterRuntime::uninitialized_instance_value_field), obj, raw_flags);
+            __ call_VM(r0, CAST_FROM_FN_PTR(address, InterpreterRuntime::uninitialized_instance_inline_type_field), obj, raw_flags);
           __ bind(isInitialized);
           __ verify_oop(r0);
           __ push(atos);
           __ b(rewrite_inline);
         __ bind(isFlattened);
@@ -3338,11 +3338,11 @@
         __ load_heap_oop(r0, field);
         __ cbnz(r0, isInitialized);
           __ mov(r0, r9);
           __ ldrw(r9, Address(r2, in_bytes(ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset())));
           __ andw(r9, r9, ConstantPoolCacheEntry::field_index_mask);
-          __ call_VM(r0, CAST_FROM_FN_PTR(address, InterpreterRuntime::uninitialized_instance_value_field), r0, r9);
+          __ call_VM(r0, CAST_FROM_FN_PTR(address, InterpreterRuntime::uninitialized_instance_inline_type_field), r0, r9);
         __ bind(isInitialized);
         __ verify_oop(r0);
         __ b(Done);
       __ bind(isFlattened);
         __ ldrw(r9, Address(r2, in_bytes(ConstantPoolCache::base_offset() + ConstantPoolCacheEntry::flags_offset())));
diff a/src/hotspot/cpu/x86/interp_masm_x86.cpp b/src/hotspot/cpu/x86/interp_masm_x86.cpp
--- a/src/hotspot/cpu/x86/interp_masm_x86.cpp
+++ b/src/hotspot/cpu/x86/interp_masm_x86.cpp
@@ -1225,14 +1225,14 @@
   assert_different_registers(obj, holder_klass, field_index, field_offset, dst_temp);
 
   // Grap the inline field klass
   push(holder_klass);
   const Register field_klass = holder_klass;
-  get_value_field_klass(holder_klass, field_index, field_klass);
+  get_inline_type_field_klass(holder_klass, field_index, field_klass);
 
   //check for empty value klass
-  test_klass_is_empty_value(field_klass, dst_temp, empty_value);
+  test_klass_is_empty_inline_type(field_klass, dst_temp, empty_value);
 
   // allocate buffer
   push(obj); // save holder
   allocate_instance(field_klass, obj, alloc_temp, dst_temp, false, alloc_failed);
 
@@ -1246,11 +1246,11 @@
   pop(obj);
   pop(holder_klass);
   jmp(done);
 
   bind(empty_value);
-  get_empty_value_oop(field_klass, dst_temp, obj);
+  get_empty_inline_type_oop(field_klass, dst_temp, obj);
   pop(holder_klass);
   jmp(done);
 
   bind(alloc_failed);
   pop(obj);
@@ -1275,11 +1275,11 @@
   Register tmp_load_klass = LP64_ONLY(rscratch1) NOT_LP64(noreg);
   load_klass(array_klass, array, tmp_load_klass);
   movptr(elem_klass, Address(array_klass, ArrayKlass::element_klass_offset()));
 
   //check for empty value klass
-  test_klass_is_empty_value(elem_klass, dst_temp, empty_value);
+  test_klass_is_empty_inline_type(elem_klass, dst_temp, empty_value);
 
   // calc source into "array_klass" and free up some regs
   const Register src = array_klass;
   push(index); // preserve index reg in case alloc_failed
   data_for_value_array_index(array, array_klass, index, src);
@@ -1291,11 +1291,11 @@
   access_value_copy(IS_DEST_UNINITIALIZED, src, dst_temp, elem_klass);
   pop(obj);
   jmp(done);
 
   bind(empty_value);
-  get_empty_value_oop(elem_klass, dst_temp, obj);
+  get_empty_inline_type_oop(elem_klass, dst_temp, obj);
   jmp(done);
 
   bind(alloc_failed);
   pop(index);
   if (array == c_rarg2) {
diff a/src/hotspot/cpu/x86/macroAssembler_x86.cpp b/src/hotspot/cpu/x86/macroAssembler_x86.cpp
--- a/src/hotspot/cpu/x86/macroAssembler_x86.cpp
+++ b/src/hotspot/cpu/x86/macroAssembler_x86.cpp
@@ -2615,28 +2615,28 @@
     // nothing to do, (later) access of M[reg + offset]
     // will provoke OS NULL exception if reg = NULL
   }
 }
 
-void MacroAssembler::test_klass_is_value(Register klass, Register temp_reg, Label& is_value) {
+void MacroAssembler::test_klass_is_inline_type(Register klass, Register temp_reg, Label& is_inline_type) {
   movl(temp_reg, Address(klass, Klass::access_flags_offset()));
   testl(temp_reg, JVM_ACC_VALUE);
-  jcc(Assembler::notZero, is_value);
+  jcc(Assembler::notZero, is_inline_type);
 }
 
-void MacroAssembler::test_klass_is_empty_value(Register klass, Register temp_reg, Label& is_empty_value) {
+void MacroAssembler::test_klass_is_empty_inline_type(Register klass, Register temp_reg, Label& is_empty_inline_type) {
 #ifdef ASSERT
   {
     Label done_check;
-    test_klass_is_value(klass, temp_reg, done_check);
-    stop("test_klass_is_empty_value with non value klass");
+    test_klass_is_inline_type(klass, temp_reg, done_check);
+    stop("test_klass_is_empty_inline_type with non inline type klass");
     bind(done_check);
   }
 #endif
   movl(temp_reg, Address(klass, InstanceKlass::misc_flags_offset()));
   testl(temp_reg, InstanceKlass::misc_flags_is_empty_inline_type());
-  jcc(Assembler::notZero, is_empty_value);
+  jcc(Assembler::notZero, is_empty_inline_type);
 }
 
 void MacroAssembler::test_field_is_inline_type(Register flags, Register temp_reg, Label& is_inline_type) {
   movl(temp_reg, flags);
   shrl(temp_reg, ConstantPoolCacheEntry::is_inline_type_shift);
@@ -3613,30 +3613,30 @@
   }
 
   bind(done);
 }
 
-void MacroAssembler::get_value_field_klass(Register klass, Register index, Register value_klass) {
-  movptr(value_klass, Address(klass, InstanceKlass::inline_type_field_klasses_offset()));
+void MacroAssembler::get_inline_type_field_klass(Register klass, Register index, Register inline_klass) {
+  movptr(inline_klass, Address(klass, InstanceKlass::inline_type_field_klasses_offset()));
 #ifdef ASSERT
   {
     Label done;
-    cmpptr(value_klass, 0);
+    cmpptr(inline_klass, 0);
     jcc(Assembler::notEqual, done);
-    stop("get_value_field_klass contains no inline klasses");
+    stop("get_inline_type_field_klass contains no inline klass");
     bind(done);
   }
 #endif
-  movptr(value_klass, Address(value_klass, index, Address::times_ptr));
+  movptr(inline_klass, Address(inline_klass, index, Address::times_ptr));
 }
 
 void MacroAssembler::get_default_value_oop(Register value_klass, Register temp_reg, Register obj) {
 #ifdef ASSERT
   {
     Label done_check;
-    test_klass_is_value(value_klass, temp_reg, done_check);
-    stop("get_default_value_oop from non-value klass");
+    test_klass_is_inline_type(value_klass, temp_reg, done_check);
+    stop("get_default_value_oop from non inline type klass");
     bind(done_check);
   }
 #endif
   Register offset = temp_reg;
   // Getting the offset of the pre-allocated default value
@@ -3650,20 +3650,20 @@
   // Getting the pre-allocated default value from the mirror
   Address field(obj, offset, Address::times_1);
   load_heap_oop(obj, field);
 }
 
-void MacroAssembler::get_empty_value_oop(Register value_klass, Register temp_reg, Register obj) {
+void MacroAssembler::get_empty_inline_type_oop(Register inline_klass, Register temp_reg, Register obj) {
 #ifdef ASSERT
   {
     Label done_check;
-    test_klass_is_empty_value(value_klass, temp_reg, done_check);
-    stop("get_empty_value from non-empty value klass");
+    test_klass_is_empty_inline_type(inline_klass, temp_reg, done_check);
+    stop("get_empty_value from non-empty inline klass");
     bind(done_check);
   }
 #endif
-  get_default_value_oop(value_klass, temp_reg, obj);
+  get_default_value_oop(inline_klass, temp_reg, obj);
 }
 
 
 // Look up the method for a megamorphic invokeinterface call.
 // The target method is determined by <intf_klass, itable_index>.
diff a/src/hotspot/cpu/x86/macroAssembler_x86.hpp b/src/hotspot/cpu/x86/macroAssembler_x86.hpp
--- a/src/hotspot/cpu/x86/macroAssembler_x86.hpp
+++ b/src/hotspot/cpu/x86/macroAssembler_x86.hpp
@@ -100,18 +100,18 @@
   void null_check(Register reg, int offset = -1);
   static bool needs_explicit_null_check(intptr_t offset);
   static bool uses_implicit_null_check(void* address);
 
   // valueKlass queries, kills temp_reg
-  void test_klass_is_value(Register klass, Register temp_reg, Label& is_value);
-  void test_klass_is_empty_value(Register klass, Register temp_reg, Label& is_empty_value);
+  void test_klass_is_inline_type(Register klass, Register temp_reg, Label& is_inline_type);
+  void test_klass_is_empty_inline_type(Register klass, Register temp_reg, Label& is_empty_inline_type);
 
   // Get the default value oop for the given InlineKlass
-  void get_default_value_oop(Register value_klass, Register temp_reg, Register obj);
+  void get_default_value_oop(Register inline_klass, Register temp_reg, Register obj);
   // The empty value oop, for the given InlineKlass ("empty" as in no instance fields)
   // get_default_value_oop with extra assertion for empty inline klass
-  void get_empty_value_oop(Register value_klass, Register temp_reg, Register obj);
+  void get_empty_inline_type_oop(Register inline_klass, Register temp_reg, Register obj);
 
   void test_field_is_inline_type(Register flags, Register temp_reg, Label& is_inline);
   void test_field_is_not_inline_type(Register flags, Register temp_reg, Label& not_inline);
   void test_field_is_inlined(Register flags, Register temp_reg, Label& is_inlined);
 
@@ -575,11 +575,11 @@
     Label&   slow_case                 // continuation point if fast allocation fails
   );
   void zero_memory(Register address, Register length_in_bytes, int offset_in_bytes, Register temp);
 
   // For field "index" within "klass", return value_klass ...
-  void get_value_field_klass(Register klass, Register index, Register value_klass);
+  void get_inline_type_field_klass(Register klass, Register index, Register value_klass);
 
   // interface method calling
   void lookup_interface_method(Register recv_klass,
                                Register intf_klass,
                                RegisterOrConstant itable_index,
diff a/src/hotspot/cpu/x86/templateTable_x86.cpp b/src/hotspot/cpu/x86/templateTable_x86.cpp
--- a/src/hotspot/cpu/x86/templateTable_x86.cpp
+++ b/src/hotspot/cpu/x86/templateTable_x86.cpp
@@ -1223,11 +1223,11 @@
 
     __ bind(is_type_ok);
     // rbx: value's klass
     // rdx: array
     // rdi: array klass
-    __ test_klass_is_empty_value(rbx, rax, done);
+    __ test_klass_is_empty_inline_type(rbx, rax, done);
 
     // calc dst for copy
     __ movl(rax, at_tos_p1()); // index
     __ data_for_value_array_index(rdx, rdi, rax, rax);
 
@@ -2484,11 +2484,11 @@
   transition(atos, vtos);
   // assume branch is more often taken than not (loops use backward branches)
   Label taken, not_taken;
   __ pop_ptr(rdx);
 
-  const int is_value_mask = markWord::always_locked_pattern;
+  const int is_inline_type_mask = markWord::always_locked_pattern;
   if (EnableValhalla) {
     __ cmpoop(rdx, rax);
     __ jcc(Assembler::equal, (cc == equal) ? taken : not_taken);
 
     // might be substitutable, test if either rax or rdx is null
@@ -2497,15 +2497,15 @@
     __ testptr(rbx, rbx);
     __ jcc(Assembler::zero, (cc == equal) ? not_taken : taken);
 
     // and both are values ?
     __ movptr(rbx, Address(rdx, oopDesc::mark_offset_in_bytes()));
-    __ andptr(rbx, is_value_mask);
+    __ andptr(rbx, is_inline_type_mask);
     __ movptr(rcx, Address(rax, oopDesc::mark_offset_in_bytes()));
-    __ andptr(rbx, is_value_mask);
+    __ andptr(rbx, is_inline_type_mask);
     __ andptr(rbx, rcx);
-    __ cmpl(rbx, is_value_mask);
+    __ cmpl(rbx, is_inline_type_mask);
     __ jcc(Assembler::notEqual, (cc == equal) ? not_taken : taken);
 
     // same value klass ?
     __ load_metadata(rbx, rdx);
     __ load_metadata(rcx, rax);
@@ -3009,11 +3009,11 @@
   jvmti_post_field_access(cache, index, is_static, false);
   load_field_cp_cache_entry(obj, cache, index, off, flags, is_static);
 
   const Address field(obj, off, Address::times_1, 0*wordSize);
 
-  Label Done, notByte, notBool, notInt, notShort, notChar, notLong, notFloat, notObj, notValueType;
+  Label Done, notByte, notBool, notInt, notShort, notChar, notLong, notFloat, notObj, notInlineType;
 
   if (!is_static) {
     __ movptr(rcx, Address(cache, index, Address::times_ptr,
                            in_bytes(ConstantPoolCache::base_offset() +
                                     ConstantPoolCacheEntry::f1_offset())));
@@ -3088,11 +3088,11 @@
           __ jcc(Assembler::notEqual, slow_case);
         __ get_default_value_oop(rcx, off, rax);
         __ jmp(finish);
         __ bind(slow_case);
 #endif // LP64
-          __ call_VM(rax, CAST_FROM_FN_PTR(address, InterpreterRuntime::uninitialized_static_value_field),
+          __ call_VM(rax, CAST_FROM_FN_PTR(address, InterpreterRuntime::uninitialized_static_inline_type_field),
                  obj, flags2);
 #ifdef _LP64
           __ bind(finish);
 #endif // _LP64
           __ verify_oop(rax);
@@ -3118,11 +3118,11 @@
           __ load_heap_oop(rax, field);
           __ pop(rcx);
           __ testptr(rax, rax);
           __ jcc(Assembler::notZero, nonnull);
             __ andl(flags2, ConstantPoolCacheEntry::field_index_mask);
-            __ get_value_field_klass(rcx, flags2, rbx);
+            __ get_inline_type_field_klass(rcx, flags2, rbx);
             __ get_default_value_oop(rbx, rcx, rax);
           __ bind(nonnull);
           __ verify_oop(rax);
           __ push(atos);
           __ jmp(rewrite_inline);
@@ -3391,11 +3391,11 @@
   // field addresses
   const Address field(obj, off, Address::times_1, 0*wordSize);
   NOT_LP64( const Address hi(obj, off, Address::times_1, 1*wordSize);)
 
   Label notByte, notBool, notInt, notShort, notChar,
-        notLong, notFloat, notObj, notValueType;
+        notLong, notFloat, notObj, notInlineType;
   Label Done;
 
   const Register bc    = LP64_ONLY(c_rarg3) NOT_LP64(rcx);
 
   __ shrl(flags, ConstantPoolCacheEntry::tos_state_shift);
@@ -3849,11 +3849,11 @@
                                       ConstantPoolCacheEntry::flags_offset())));
           __ andl(rdx, ConstantPoolCacheEntry::field_index_mask);
           __ movptr(rcx, Address(rcx, rbx, Address::times_ptr,
                                        in_bytes(ConstantPoolCache::base_offset() +
                                                 ConstantPoolCacheEntry::f1_offset())));
-          __ get_value_field_klass(rcx, rdx, rbx);
+          __ get_inline_type_field_klass(rcx, rdx, rbx);
           __ get_default_value_oop(rbx, rcx, rax);
         __ bind(nonnull);
         __ verify_oop(rax);
         __ jmp(Done);
       __ bind(is_inlined);
@@ -4673,15 +4673,15 @@
   // check for NULL object
   __ null_check(rax);
 
   __ resolve(IS_NOT_NULL, rax);
 
-  const int is_value_mask = markWord::always_locked_pattern;
+  const int is_inline_type_mask = markWord::always_locked_pattern;
   Label has_identity;
   __ movptr(rbx, Address(rax, oopDesc::mark_offset_in_bytes()));
-  __ andptr(rbx, is_value_mask);
-  __ cmpl(rbx, is_value_mask);
+  __ andptr(rbx, is_inline_type_mask);
+  __ cmpl(rbx, is_inline_type_mask);
   __ jcc(Assembler::notEqual, has_identity);
   __ call_VM(noreg, CAST_FROM_FN_PTR(address,
                      InterpreterRuntime::throw_illegal_monitor_state_exception));
   __ should_not_reach_here();
   __ bind(has_identity);
@@ -4783,15 +4783,15 @@
   // check for NULL object
   __ null_check(rax);
 
   __ resolve(IS_NOT_NULL, rax);
 
-  const int is_value_mask = markWord::always_locked_pattern;
+  const int is_inline_type_mask = markWord::always_locked_pattern;
   Label has_identity;
   __ movptr(rbx, Address(rax, oopDesc::mark_offset_in_bytes()));
-  __ andptr(rbx, is_value_mask);
-  __ cmpl(rbx, is_value_mask);
+  __ andptr(rbx, is_inline_type_mask);
+  __ cmpl(rbx, is_inline_type_mask);
   __ jcc(Assembler::notEqual, has_identity);
   __ call_VM(noreg, CAST_FROM_FN_PTR(address,
                      InterpreterRuntime::throw_illegal_monitor_state_exception));
   __ should_not_reach_here();
   __ bind(has_identity);
diff a/src/hotspot/share/classfile/fieldLayoutBuilder.cpp b/src/hotspot/share/classfile/fieldLayoutBuilder.cpp
--- a/src/hotspot/share/classfile/fieldLayoutBuilder.cpp
+++ b/src/hotspot/share/classfile/fieldLayoutBuilder.cpp
@@ -35,11 +35,11 @@
 #include "runtime/fieldDescriptor.inline.hpp"
 
 LayoutRawBlock::LayoutRawBlock(Kind kind, int size) :
   _next_block(NULL),
   _prev_block(NULL),
-  _value_klass(NULL),
+  _inline_klass(NULL),
   _kind(kind),
   _offset(-1),
   _alignment(1),
   _size(size),
   _field_index(-1),
@@ -51,11 +51,11 @@
 
 
 LayoutRawBlock::LayoutRawBlock(int index, Kind kind, int size, int alignment, bool is_reference) :
  _next_block(NULL),
  _prev_block(NULL),
- _value_klass(NULL),
+ _inline_klass(NULL),
  _kind(kind),
  _offset(-1),
  _alignment(alignment),
  _size(size),
  _field_index(index),
@@ -102,11 +102,11 @@
 }
 
 void FieldGroup::add_inlined_field(AllFieldStream fs, InlineKlass* vk) {
   // _inlined_fields list might be merged with the _primitive_fields list in the future
   LayoutRawBlock* block = new LayoutRawBlock(fs.index(), LayoutRawBlock::INLINED, vk->get_exact_size_in_bytes(), vk->get_alignment(), false);
-  block->set_value_klass(vk);
+  block->set_inline_klass(vk);
   if (_inlined_fields == NULL) {
     _inlined_fields = new(ResourceObj::RESOURCE_AREA, mtInternal) GrowableArray<LayoutRawBlock*>(INITIAL_LIST_SIZE);
   }
   _inlined_fields->append(block);
 }
@@ -913,11 +913,11 @@
 
   GrowableArray<LayoutRawBlock*>* ff = _root_group->inlined_fields();
   if (ff != NULL) {
     for (int i = 0; i < ff->length(); i++) {
       LayoutRawBlock* f = ff->at(i);
-      InlineKlass* vk = f->value_klass();
+      InlineKlass* vk = f->inline_klass();
       assert(vk != NULL, "Should have been initialized");
       if (vk->contains_oops()) {
         add_inlined_field_oopmap(nonstatic_oop_maps, vk, f->offset());
       }
     }
diff a/src/hotspot/share/classfile/fieldLayoutBuilder.hpp b/src/hotspot/share/classfile/fieldLayoutBuilder.hpp
--- a/src/hotspot/share/classfile/fieldLayoutBuilder.hpp
+++ b/src/hotspot/share/classfile/fieldLayoutBuilder.hpp
@@ -62,11 +62,11 @@
   };
 
  private:
   LayoutRawBlock* _next_block;
   LayoutRawBlock* _prev_block;
-  InlineKlass* _value_klass;
+  InlineKlass* _inline_klass;
   Kind _kind;
   int _offset;
   int _alignment;
   int _size;
   int _field_index;
@@ -91,15 +91,15 @@
   int field_index() const {
     assert(_field_index != -1, "Must be initialized");
     return _field_index;
   }
   bool is_reference() const { return _is_reference; }
-  InlineKlass* value_klass() const {
-    assert(_value_klass != NULL, "Must be initialized");
-    return _value_klass;
+  InlineKlass* inline_klass() const {
+    assert(_inline_klass != NULL, "Must be initialized");
+    return _inline_klass;
   }
-  void set_value_klass(InlineKlass* value_klass) { _value_klass = value_klass; }
+  void set_inline_klass(InlineKlass* inline_klass) { _inline_klass = inline_klass; }
 
   bool fit(int size, int alignment);
 
   static int compare_offset(LayoutRawBlock** x, LayoutRawBlock** y)  { return (*x)->offset() - (*y)->offset(); }
   // compare_size_inverted() returns the opposite of a regular compare method in order to
diff a/src/hotspot/share/interpreter/interpreterRuntime.cpp b/src/hotspot/share/interpreter/interpreterRuntime.cpp
--- a/src/hotspot/share/interpreter/interpreterRuntime.cpp
+++ b/src/hotspot/share/interpreter/interpreterRuntime.cpp
@@ -374,11 +374,11 @@
   // returning result
   thread->set_vm_result(new_value_h());
   return return_offset;
 JRT_END
 
-JRT_ENTRY(void, InterpreterRuntime::uninitialized_static_value_field(JavaThread* thread, oopDesc* mirror, int index))
+JRT_ENTRY(void, InterpreterRuntime::uninitialized_static_inline_type_field(JavaThread* thread, oopDesc* mirror, int index))
   // The interpreter tries to access an inline static field that has not been initialized.
   // This situation can happen in different scenarios:
   //   1 - if the load or initialization of the field failed during step 8 of
   //       the initialization of the holder of the field, in this case the access to the field
   //       must fail
diff a/src/hotspot/share/interpreter/interpreterRuntime.hpp b/src/hotspot/share/interpreter/interpreterRuntime.hpp
--- a/src/hotspot/share/interpreter/interpreterRuntime.hpp
+++ b/src/hotspot/share/interpreter/interpreterRuntime.hpp
@@ -65,11 +65,11 @@
   static void    anewarray     (JavaThread* thread, ConstantPool* pool, int index, jint size);
   static void    multianewarray(JavaThread* thread, jint* first_size_address);
   static void    register_finalizer(JavaThread* thread, oopDesc* obj);
   static void    defaultvalue  (JavaThread* thread, ConstantPool* pool, int index);
   static int     withfield     (JavaThread* thread, ConstantPoolCache* cp_cache);
-  static void    uninitialized_static_value_field(JavaThread* thread, oopDesc* mirror, int offset);
+  static void    uninitialized_static_inline_type_field(JavaThread* thread, oopDesc* mirror, int offset);
   static void    write_heap_copy (JavaThread* thread, oopDesc* value, int offset, oopDesc* rcv);
   static void    read_inlined_field(JavaThread* thread, oopDesc* value, int index, Klass* field_holder);
 
   static void value_array_load(JavaThread* thread, arrayOopDesc* array, int index);
   static void value_array_store(JavaThread* thread, void* val, arrayOopDesc* array, int index);
