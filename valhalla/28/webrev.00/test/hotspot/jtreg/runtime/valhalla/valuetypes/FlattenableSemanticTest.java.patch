diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/FlattenableSemanticTest.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/FlattenableSemanticTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/FlattenableSemanticTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/FlattenableSemanticTest.java
@@ -42,20 +42,20 @@
  * @run main/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=* runtime.valhalla.valuetypes.FlattenableSemanticTest
  * // debug: -XX:+PrintValueLayout -XX:-ShowMessageBoxOnError
  */
 public class FlattenableSemanticTest {
 
-    static Point? nfsp;
+    static Point.ref nfsp;
     static Point fsp;
 
-    Point? nfip;
+    Point.ref nfip;
     Point fip;
 
-    static JumboValue? nfsj;
+    static JumboValue.ref nfsj;
     static JumboValue fsj;
 
-    JumboValue? nfij;
+    JumboValue.ref nfij;
     JumboValue fij;
 
     static Object getNull() {
         return null;
     }
@@ -80,38 +80,38 @@
         Asserts.assertNotNull(test.fij, "Invalid null value for unitialized flattenable field");
 
         // Assigning null must be allowed for non flattenable inline fields
         boolean exception = true;
         try {
-            nfsp = (Point?)getNull();
+            nfsp = (Point.ref)getNull();
             nfsp = null;
             exception = false;
         } catch (NullPointerException e) {
             exception = true;
         }
         Asserts.assertFalse(exception, "Invalid NPE when assigning null to a non flattenable field");
 
         try {
-            nfsj = (JumboValue?)getNull();
+            nfsj = (JumboValue.ref)getNull();
             nfsj = null;
             exception = false;
         } catch (NullPointerException e) {
             exception = true;
         }
         Asserts.assertFalse(exception, "Invalid NPE when assigning null to a non flattenable field");
 
         try {
-            test.nfip = (Point?)getNull();
+            test.nfip = (Point.ref)getNull();
             test.nfip = null;
             exception = false;
         } catch (NullPointerException e) {
             exception = true;
         }
         Asserts.assertFalse(exception, "Invalid NPE when assigning null to a non flattenable field");
 
         try {
-            test.nfij = (JumboValue?)getNull();
+            test.nfij = (JumboValue.ref)getNull();
             test.nfij = null;
             exception = false;
         } catch (NullPointerException e) {
             exception = true;
         }
