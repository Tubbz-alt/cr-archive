diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestFieldNullability.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestFieldNullability.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestFieldNullability.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestFieldNullability.java
@@ -51,15 +51,15 @@
             l10 = l11 = l12 = l13 = l14 = l15 = l16 = l17 = l18 = l19 = 271;
         }
     }
 
     static inline class TestValue {
-        final MyValue? nullableField;
+        final MyValue.ref nullableField;
         final MyValue nullfreeField;        // flattened
-        final MyValue? nullField;           // src of null
+        final MyValue.ref nullField;           // src of null
         final MyBigValue nullfreeBigField;  // not flattened
-        final MyBigValue? nullBigField;     // src of null
+        final MyBigValue.ref nullBigField;     // src of null
 
         public void test() {
             Asserts.assertNull(nullField, "Invalid non null value for uninitialized non flattenable field");
             Asserts.assertNull(nullBigField, "Invalid non null value for uninitialized non flattenable field");
             boolean NPE = false;
@@ -92,15 +92,15 @@
 
         }
     }
 
     static class TestClass {
-        MyValue? nullableField;
+        MyValue.ref nullableField;
         MyValue nullfreeField;       // flattened
-        MyValue? nullField;
+        MyValue.ref nullField;
         MyBigValue nullfreeBigField; // not flattened
-        MyBigValue? nullBigField;
+        MyBigValue.ref nullBigField;
 
         public void test() {
             Asserts.assertNull(nullField, "Invalid non null value for uninitialized non flattenable field");
             Asserts.assertNull(nullBigField, "Invalid non null value for uninitialized non flattenable field");
             boolean NPE = false;
