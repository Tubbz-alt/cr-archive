diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/CheckcastTest.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/CheckcastTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/CheckcastTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/CheckcastTest.java
@@ -63,18 +63,18 @@
     }
 
     static void testCastingFromValToBox(Point p) {
         boolean npe = false;
         try {
-            Point? pb = p;
+            Point.ref pb = p;
         } catch(NullPointerException e) {
             npe = true;
         }
         Asserts.assertFalse(npe, "Casting from val to box should not throw an NPE");
     }
 
-    static void testCastingFromBoxToVal(Point? p) {
+    static void testCastingFromBoxToVal(Point.ref p) {
         boolean npe = false;
         try {
             Point pv = (Point) p;
         } catch(NullPointerException e) {
             npe = true;
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/FlattenableSemanticTest.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/FlattenableSemanticTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/FlattenableSemanticTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/FlattenableSemanticTest.java
@@ -42,20 +42,20 @@
  * @run main/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:ForceNonTearable=* runtime.valhalla.valuetypes.FlattenableSemanticTest
  * // debug: -XX:+PrintValueLayout -XX:-ShowMessageBoxOnError
  */
 public class FlattenableSemanticTest {
 
-    static Point? nfsp;
+    static Point.ref nfsp;
     static Point fsp;
 
-    Point? nfip;
+    Point.ref nfip;
     Point fip;
 
-    static JumboValue? nfsj;
+    static JumboValue.ref nfsj;
     static JumboValue fsj;
 
-    JumboValue? nfij;
+    JumboValue.ref nfij;
     JumboValue fij;
 
     static Object getNull() {
         return null;
     }
@@ -80,38 +80,38 @@
         Asserts.assertNotNull(test.fij, "Invalid null value for unitialized flattenable field");
 
         // Assigning null must be allowed for non flattenable inline fields
         boolean exception = true;
         try {
-            nfsp = (Point?)getNull();
+            nfsp = (Point.ref)getNull();
             nfsp = null;
             exception = false;
         } catch (NullPointerException e) {
             exception = true;
         }
         Asserts.assertFalse(exception, "Invalid NPE when assigning null to a non flattenable field");
 
         try {
-            nfsj = (JumboValue?)getNull();
+            nfsj = (JumboValue.ref)getNull();
             nfsj = null;
             exception = false;
         } catch (NullPointerException e) {
             exception = true;
         }
         Asserts.assertFalse(exception, "Invalid NPE when assigning null to a non flattenable field");
 
         try {
-            test.nfip = (Point?)getNull();
+            test.nfip = (Point.ref)getNull();
             test.nfip = null;
             exception = false;
         } catch (NullPointerException e) {
             exception = true;
         }
         Asserts.assertFalse(exception, "Invalid NPE when assigning null to a non flattenable field");
 
         try {
-            test.nfij = (JumboValue?)getNull();
+            test.nfij = (JumboValue.ref)getNull();
             test.nfij = null;
             exception = false;
         } catch (NullPointerException e) {
             exception = true;
         }
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/QuickeningTest.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/QuickeningTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/QuickeningTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/QuickeningTest.java
@@ -35,32 +35,32 @@
  */
 
 public class QuickeningTest {
 
     static class Parent {
-    Point? nfp;       /* Not flattenable inline field */
+    Point.ref nfp;       /* Not flattenable inline field */
     Point fp;         /* Flattenable and flattened inline field */
     JumboValue fj;    /* Flattenable not flattened inline field */
 
         public void setNfp(Point p) { nfp = p; }
         public void setFp(Point p) { fp = p; }
         public void setFj(JumboValue j) { fj = j; }
     }
 
     static class Child extends Parent {
         // This class inherited fields from the Parent class
-        Point? nfp2;      /* Not flattenable inline field */
+        Point.ref nfp2;      /* Not flattenable inline field */
         Point fp2;        /* Flattenable and flattened inline field */
         JumboValue fj2;   /* Flattenable not flattened inline field */
 
         public void setNfp2(Point p) { nfp2 = p; }
         public void setFp2(Point p)  { fp2 = p; }
         public void setFj2(JumboValue j) { fj2 = j; }
     }
 
     static final inline class Value {
-        final Point? nfp;       /* Not flattenable inline field */
+        final Point.ref nfp;       /* Not flattenable inline field */
         final Point fp;         /* Flattenable and flattened inline field */
         final JumboValue fj;    /* Flattenable not flattened inline field */
 
         private Value() {
             nfp = Point.createPoint(0, 0);
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestFieldNullability.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestFieldNullability.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestFieldNullability.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestFieldNullability.java
@@ -51,15 +51,15 @@
             l10 = l11 = l12 = l13 = l14 = l15 = l16 = l17 = l18 = l19 = 271;
         }
     }
 
     static inline class TestValue {
-        final MyValue? nullableField;
+        final MyValue.ref nullableField;
         final MyValue nullfreeField;        // flattened
-        final MyValue? nullField;           // src of null
+        final MyValue.ref nullField;           // src of null
         final MyBigValue nullfreeBigField;  // not flattened
-        final MyBigValue? nullBigField;     // src of null
+        final MyBigValue.ref nullBigField;     // src of null
 
         public void test() {
             Asserts.assertNull(nullField, "Invalid non null value for uninitialized non flattenable field");
             Asserts.assertNull(nullBigField, "Invalid non null value for uninitialized non flattenable field");
             boolean NPE = false;
@@ -92,15 +92,15 @@
 
         }
     }
 
     static class TestClass {
-        MyValue? nullableField;
+        MyValue.ref nullableField;
         MyValue nullfreeField;       // flattened
-        MyValue? nullField;
+        MyValue.ref nullField;
         MyBigValue nullfreeBigField; // not flattened
-        MyBigValue? nullBigField;
+        MyBigValue.ref nullBigField;
 
         public void test() {
             Asserts.assertNull(nullField, "Invalid non null value for uninitialized non flattenable field");
             Asserts.assertNull(nullBigField, "Invalid non null value for uninitialized non flattenable field");
             boolean NPE = false;
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue1.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue1.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue1.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue1.java
@@ -21,18 +21,18 @@
  * questions.
  */
 package runtime.valhalla.valuetypes;
 
 final class ContainerValue1 {
-    static TestValue1? staticValueField;
+    static TestValue1.ref staticValueField;
     TestValue1 nonStaticValueField;
     TestValue1[] inlineArray;
 }
 
 public inline final class TestValue1 {
 
-    static TestValue1? staticValue = getInstance();
+    static TestValue1.ref staticValue = getInstance();
 
     final int i;
     final String name;
 
     private TestValue1() {
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue2.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue2.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue2.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue2.java
@@ -21,17 +21,17 @@
  * questions.
  */
 package runtime.valhalla.valuetypes;
 
 final class ContainerValue2 {
-    static TestValue2? staticValueField;
+    static TestValue2.ref staticValueField;
     TestValue2 nonStaticValueField;
     TestValue2[] valueArray;
 }
 
 public inline final class TestValue2 {
-    static TestValue2? staticValue = getInstance();
+    static TestValue2.ref staticValue = getInstance();
 
     final long l;
     final double d;
     final String s;
 
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue3.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue3.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue3.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue3.java
@@ -21,18 +21,18 @@
  * questions.
  */
 package runtime.valhalla.valuetypes;
 
 final class ContainerValue3 {
-    static TestValue3? staticValueField;
+    static TestValue3.ref staticValueField;
     TestValue3 nonStaticValueField;
     TestValue3[] valueArray;
 }
 
 public inline final class TestValue3 {
 
-    static TestValue3? staticValue = getInstance();
+    static TestValue3.ref staticValue = getInstance();
 
     final byte b;
 
     private TestValue3() {
         b = 123;
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue4.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue4.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue4.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestValue4.java
@@ -23,18 +23,18 @@
 package runtime.valhalla.valuetypes;
 
 import java.nio.ByteBuffer;
 
 final class ContainerValue4 {
-    static TestValue4? staticValueField;
+    static TestValue4.ref staticValueField;
     TestValue4 nonStaticValueField;
     TestValue4[] valueArray;
 }
 
 public inline final class TestValue4 {
 
-    static TestValue4? staticValue = getInstance();
+    static TestValue4.ref staticValue = getInstance();
 
     final byte b1;
     final byte b2;
     final byte b3;
     final byte b4;
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/UninitializedValueFieldsTest.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/UninitializedValueFieldsTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/UninitializedValueFieldsTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/UninitializedValueFieldsTest.java
@@ -31,19 +31,19 @@
  * @compile -XDemitQtypes -XDenableValueTypes -XDallowWithFieldOperator -XDallowFlattenabilityModifiers Point.java JumboValue.java UninitializedValueFieldsTest.java
  * @run main/othervm -Xint -XX:ValueFieldMaxFlatSize=64 runtime.valhalla.valuetypes.UninitializedValueFieldsTest
  * @run main/othervm -Xcomp -XX:ValueFieldMaxFlatSize=64 runtime.valhalla.valuetypes.UninitializedValueFieldsTest
  */
 public class UninitializedValueFieldsTest {
-    static Point? nonFlattenableStaticPoint;
+    static Point.ref nonFlattenableStaticPoint;
     static Point staticPoint;
 
     Point instancePoint;
 
-    static JumboValue? sj1;
+    static JumboValue.ref sj1;
     static JumboValue sj2;
 
-    JumboValue? j1;
+    JumboValue.ref j1;
     JumboValue j2;
 
     static Object getNull() {
         return null;
     }
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/ValueTypeArray.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/ValueTypeArray.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/ValueTypeArray.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/ValueTypeArray.java
@@ -221,27 +221,27 @@
         assertEquals(array3[0].length, 2, "Incorrect length");
         assertTrue(array3[0][0] == null, "Expected NULL");
 
         // Now create ObjArrays of ValueArray...
         cls = (Class<?>) Point.class.asIndirectType();
-        Point?[][] barray = (Point?[][]) Array.newInstance(cls, 1, 2);
+        Point.ref[][] barray = (Point.ref[][]) Array.newInstance(cls, 1, 2);
         assertEquals(barray.length, 1, "Incorrect length");
         assertEquals(barray[0].length, 2, "Incorrect length");
         barray[0][1] = Point.createPoint(1, 2);
-        Point? pb = barray[0][1];
+        Point.ref pb = barray[0][1];
         int x = pb.getX();
         assertEquals(x, 1, "Bad Point Value");
     }
 
-    static final inline class MyInt implements Comparable<MyInt?> {
+    static final inline class MyInt implements Comparable<MyInt.ref> {
         final int value;
 
         private MyInt() { this(0); }
         private MyInt(int v) { value = v; }
         public int getValue() { return value; }
         public String toString() { return "MyInt: " + getValue(); }
-        public int compareTo(MyInt? that) { return Integer.compare(this.getValue(), that.getValue()); }
+        public int compareTo(MyInt.ref that) { return Integer.compare(this.getValue(), that.getValue()); }
         public boolean equals(Object o) {
             if (o instanceof MyInt) {
                 return this.getValue() == ((MyInt) o).getValue();
             }
             return false;
@@ -250,13 +250,13 @@
         public static MyInt create(int v) {
             return new MyInt(v);
         }
 
         // Null-able fields here are a temp hack to avoid ClassCircularityError
-        public static final MyInt? MIN = MyInt.create(Integer.MIN_VALUE);
-        public static final MyInt? ZERO = MyInt.create(0);
-        public static final MyInt? MAX = MyInt.create(Integer.MAX_VALUE);
+        public static final MyInt.ref MIN = MyInt.create(Integer.MIN_VALUE);
+        public static final MyInt.ref ZERO = MyInt.create(0);
+        public static final MyInt.ref MAX = MyInt.create(Integer.MAX_VALUE);
     }
 
     static MyInt staticMyInt = MyInt.create(-1);
     static MyInt[] staticMyIntArray = new MyInt[] { staticMyInt };
     static MyInt[][] staticMyIntArrayArray = new MyInt[][] { staticMyIntArray, staticMyIntArray };
@@ -272,11 +272,11 @@
 
     void testSanityCheckcasts() {
         MyInt[] myInts = new MyInt[1];
         assertTrue(myInts instanceof Object[]);
         assertTrue(myInts instanceof Comparable[]);
-        assertTrue(myInts instanceof MyInt?[]);
+        assertTrue(myInts instanceof MyInt.ref[]);
 
         Class<?> cls = MyInt.class;
         assertTrue(cls.isInlineClass());
         Object arrObj = Array.newInstance(cls, 1);
         assertTrue(arrObj instanceof Object[], "Not Object array");
@@ -291,41 +291,41 @@
 
         // multi-dim, check secondary array types are setup...
         MyOtherInt[][] matrix = new MyOtherInt[1][1];
         assertTrue(matrix[0] instanceof MyOtherInt[]);
         assertTrue(matrix[0] instanceof SomeSecondaryType[]);
-        assertTrue(matrix[0] instanceof MyOtherInt?[]);
+        assertTrue(matrix[0] instanceof MyOtherInt.ref[]);
 
         // Box types vs Inline...
-        MyInt?[] myValueRefs = new MyInt?[1];
-        assertTrue(myValueRefs instanceof MyInt?[]);
+        MyInt.ref[] myValueRefs = new MyInt.ref[1];
+        assertTrue(myValueRefs instanceof MyInt.ref[]);
         assertTrue(myValueRefs instanceof Object[]);
         assertTrue(myValueRefs instanceof Comparable[]);
         assertFalse(myValueRefs instanceof MyInt[]);
 
-        MyInt?[][] myMdValueRefs = new MyInt?[1][1];
-        assertTrue(myMdValueRefs[0] instanceof MyInt?[]);
+        MyInt.ref[][] myMdValueRefs = new MyInt.ref[1][1];
+        assertTrue(myMdValueRefs[0] instanceof MyInt.ref[]);
         assertTrue(myMdValueRefs[0] instanceof Object[]);
         assertTrue(myMdValueRefs[0] instanceof Comparable[]);
         assertFalse(myMdValueRefs[0] instanceof MyInt[]);
 
         // Did we break checkcast...
-        MyInt?[]     va1 = (MyInt?[])null;
-        MyInt?[]     va2 = null;
-        MyInt?[][]   va3 = (MyInt?[][])null;
-        MyInt?[][][] va4 = (MyInt?[][][])null;
+        MyInt.ref[]     va1 = (MyInt.ref[])null;
+        MyInt.ref[]     va2 = null;
+        MyInt.ref[][]   va3 = (MyInt.ref[][])null;
+        MyInt.ref[][][] va4 = (MyInt.ref[][][])null;
         MyInt[]      va5 = null;
         MyInt[]      va6 = (MyInt[])null;
         MyInt[][]    va7 = (MyInt[][])null;
         MyInt[][][]  va8 = (MyInt[][][])null;
     }
 
 
     void testUtilArrays() {
         // Sanity check j.u.Arrays
 
-        // cast to q-type temp effect of avoiding circularity error (decl static MyInt?)
+        // cast to q-type temp effect of avoiding circularity error (decl static MyInt.ref)
         MyInt[] myInts = new MyInt[] { (MyInt) MyInt.MAX, (MyInt) MyInt.MIN };
         // Sanity sort another copy
         MyInt[] copyMyInts = Arrays.copyOf(myInts, myInts.length + 1);
         checkArrayElementsEqual(copyMyInts, new MyInt[] { myInts[0], myInts[1], (MyInt) MyInt.ZERO});
 
@@ -383,16 +383,16 @@
 
         comparables[0] = null;
         comparables[1] = null;
         assertTrue(comparables[0] == null && comparables[1] == null, "Not null ?");
 
-        MyInt?[] myIntRefArray = new MyInt?[1];
+        MyInt.ref[] myIntRefArray = new MyInt.ref[1];
         assertTrue(myIntRefArray[0] == null, "Got: " + myIntRefArray[0]);
         myIntRefArray[0] = null;
 
-        MyInt?[] srcNulls = new MyInt?[2];
-        MyInt?[] dstNulls = new MyInt?[2];
+        MyInt.ref[] srcNulls = new MyInt.ref[2];
+        MyInt.ref[] dstNulls = new MyInt.ref[2];
         System.arraycopy(srcNulls, 0, dstNulls, 0, 2);
         checkArrayElementsEqual(srcNulls, dstNulls);
         srcNulls[1] = MyInt.create(1);
         System.arraycopy(srcNulls, 0, dstNulls, 0, 2);
         checkArrayElementsEqual(srcNulls, dstNulls);
@@ -430,11 +430,11 @@
         try {
             System.arraycopy(objArray, 0, valArray, 0, 3);
             throw new RuntimeException("Expected ArrayStoreException");
         } catch (ArrayStoreException ase) {}
 
-        MyInt?[] myIntRefArray = new MyInt?[3];
+        MyInt.ref[] myIntRefArray = new MyInt.ref[3];
         System.arraycopy(valArray, 0, myIntRefArray, 0, 3);
         checkArrayElementsEqual(valArray, myIntRefArray);
 
         myIntRefArray[0] = null;
         try {
@@ -463,11 +463,11 @@
             return new MyPoint(x, x);
         }
         static MyPoint create(int x, int y) {
             return new MyPoint(x, y);
         }
-        static final MyPoint? ORIGIN = create(0);
+        static final MyPoint.ref ORIGIN = create(0);
     }
 
     void testComposition() {
         // Test array operations with compostion of inline types, check element payload is correct...
         MyPoint a = MyPoint.create(1, 2);
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/ValueTypeCreation.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/ValueTypeCreation.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/ValueTypeCreation.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/ValueTypeCreation.java
@@ -73,11 +73,11 @@
         Asserts.assertEquals(person.getLastName(), "Smith", "Last name incorrect");
     }
 
     static final inline class StaticSelf {
 
-        static final StaticSelf? DEFAULT = create(0);
+        static final StaticSelf.ref DEFAULT = create(0);
         final int f1;
 
         private StaticSelf() { f1 = 0; }
         public String toString() { return "StaticSelf f1=" + f1; }
 
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/ValueTypesTest.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/ValueTypesTest.java
--- a/test/hotspot/jtreg/runtime/valhalla/valuetypes/ValueTypesTest.java
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/ValueTypesTest.java
@@ -144,11 +144,11 @@
     static void testExecutionStackToFields(Class<?> inlineClass, Class<?> containerClass) throws Throwable {
         final int ITERATIONS = Platform.isDebugBuild() ? 3 : 512;
         String sig = "()Q" + inlineClass.getName() + ";";
         final String methodSignature = sig.replace('.', '/');
         final String fieldQSignature = "Q" + inlineClass.getName().replace('.', '/') + ";";
-        final String fieldLSignature = "L" + inlineClass.getName().replace('.', '/') + ";";
+        final String fieldLSignature = "L" + inlineClass.getName().replace('.', '/') + "$ref;";
         System.out.println(methodSignature);
         MethodHandle fromExecStackToFields = MethodHandleBuilder.loadCode(
                 LOOKUP,
                 "execStackToFields",
                 MethodType.methodType(boolean.class),
@@ -185,17 +185,19 @@
                     .ifcmp(TypeTag.I, CondKind.NE, "failed")
                     .invokestatic(inlineClass, "getInstance", methodSignature, false)
                     .putstatic(containerClass, "staticValueField", fieldLSignature)
                     .invokestatic(System.class, "gc", "()V", false)
                     .getstatic(containerClass, "staticValueField", fieldLSignature)
+                    .checkcast(inlineClass)
                     .invokevirtual(inlineClass, "verify", "()Z", false)
                     .iconst_1()
                     .ifcmp(TypeTag.I, CondKind.NE, "failed")
                     .invokestatic(inlineClass, "getNonBufferedInstance", methodSignature, false)
                     .putstatic(containerClass, "staticValueField", fieldLSignature)
                     .invokestatic(System.class, "gc", "()V", false)
                     .getstatic(containerClass, "staticValueField", fieldLSignature)
+                    .checkcast(inlineClass)
                     .invokevirtual(inlineClass, "verify", "()Z", false)
                     .iconst_1()
                     .ifcmp(TypeTag.I, CondKind.NE, "failed")
                     .iinc(2, 1)
                     .goto_("loop")
