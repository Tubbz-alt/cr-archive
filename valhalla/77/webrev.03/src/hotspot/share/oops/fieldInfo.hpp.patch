diff a/src/hotspot/share/oops/fieldInfo.hpp b/src/hotspot/share/oops/fieldInfo.hpp
--- a/src/hotspot/share/oops/fieldInfo.hpp
+++ b/src/hotspot/share/oops/fieldInfo.hpp
@@ -50,21 +50,21 @@
 #define FIELDINFO_TAG_OFFSET           1
 #define FIELDINFO_TAG_TYPE_PLAIN       2
 #define FIELDINFO_TAG_TYPE_CONTENDED   3
 #define FIELDINFO_TAG_TYPE_MASK        3
 #define FIELDINFO_TAG_MASK             7
-#define FIELDINFO_TAG_FLATTENED        4
+#define FIELDINFO_TAG_INLINED          4
 
   // Packed field has the tag, and can be either of:
   //    hi bits <--------------------------- lo bits
   //   |---------high---------|---------low---------|
   //    ..........................................00  - blank
-  //    [------------------offset---------------]F01  - real field offset
-  //    ......................[-------type------]F10  - plain field with type
-  //    [--contention_group--][-------type------]F11  - contended field with type and contention group
+  //    [------------------offset---------------]I01  - real field offset
+  //    ......................[-------type------]I10  - plain field with type
+  //    [--contention_group--][-------type------]I11  - contended field with type and contention group
   //
-  // Bit F indicates if the field has been flattened (F=1) or nor (F=0)
+  // Bit I indicates if the field has been inlined  (I=1) or nor (I=0)
 
   enum FieldOffset {
     access_flags_offset      = 0,
     name_index_offset        = 1,
     signature_index_offset   = 2,
@@ -198,26 +198,26 @@
   }
 
   void set_access_flags(u2 val)                  { _shorts[access_flags_offset] = val;             }
   void set_offset(u4 val)                        {
     val = val << FIELDINFO_TAG_SIZE; // make room for tag
-    bool flattened = is_flattened();
+    bool inlined = is_inlined();
     _shorts[low_packed_offset] = extract_low_short_from_int(val) | FIELDINFO_TAG_OFFSET;
-    if (flattened) set_flattened(true);
+    if (inlined) set_inlined(true);
     _shorts[high_packed_offset] = extract_high_short_from_int(val);
-    assert(is_flattened() || !flattened, "just checking");
+    assert(is_inlined() || !inlined, "just checking");
   }
 
   void set_allocation_type(int type) {
-    bool b = is_flattened();
+    bool b = is_inlined();
     u2 lo = _shorts[low_packed_offset];
     switch(lo & FIELDINFO_TAG_TYPE_MASK) {
       case FIELDINFO_TAG_BLANK:
         _shorts[low_packed_offset] |= ((type << FIELDINFO_TAG_SIZE)) & 0xFFFF;
         _shorts[low_packed_offset] &= ~FIELDINFO_TAG_TYPE_MASK;
         _shorts[low_packed_offset] |= FIELDINFO_TAG_TYPE_PLAIN;
-        assert(is_flattened() || !b, "Just checking");
+        assert(is_inlined() || !b, "Just checking");
         return;
 #ifndef PRODUCT
       case FIELDINFO_TAG_TYPE_PLAIN:
       case FIELDINFO_TAG_TYPE_CONTENDED:
       case FIELDINFO_TAG_OFFSET:
@@ -225,20 +225,20 @@
 #endif
     }
     ShouldNotReachHere();
   }
 
-  void set_flattened(bool b) {
+  void set_inlined(bool b) {
     if (b) {
-      _shorts[low_packed_offset] |= FIELDINFO_TAG_FLATTENED;
+      _shorts[low_packed_offset] |= FIELDINFO_TAG_INLINED;
     } else {
-      _shorts[low_packed_offset] &= ~FIELDINFO_TAG_FLATTENED;
+      _shorts[low_packed_offset] &= ~FIELDINFO_TAG_INLINED;
     }
   }
 
-  bool is_flattened() {
-    return (_shorts[low_packed_offset] & FIELDINFO_TAG_FLATTENED) != 0;
+  bool is_inlined() {
+    return (_shorts[low_packed_offset] & FIELDINFO_TAG_INLINED) != 0;
   }
 
   void set_contended_group(u2 val) {
     u2 lo = _shorts[low_packed_offset];
     switch(lo & FIELDINFO_TAG_TYPE_MASK) {
@@ -268,14 +268,10 @@
   void set_stable(bool z) {
     if (z) _shorts[access_flags_offset] |=  JVM_ACC_FIELD_STABLE;
     else   _shorts[access_flags_offset] &= ~JVM_ACC_FIELD_STABLE;
   }
 
-  bool is_flattenable() const {
-    return (access_flags() & JVM_ACC_FLATTENABLE) != 0;
-  }
-
   Symbol* lookup_symbol(int symbol_index) const {
     assert(is_internal(), "only internal fields");
     return vmSymbols::symbol_at((vmSymbols::SID)symbol_index);
   }
 };
