diff a/src/hotspot/share/classfile/fieldLayoutBuilder.hpp b/src/hotspot/share/classfile/fieldLayoutBuilder.hpp
--- a/src/hotspot/share/classfile/fieldLayoutBuilder.hpp
+++ b/src/hotspot/share/classfile/fieldLayoutBuilder.hpp
@@ -51,16 +51,16 @@
 //
 class LayoutRawBlock : public ResourceObj {
  public:
   // Some code relies on the order of values below.
   enum Kind {
-    EMPTY,         // empty slot, space is taken from this to allocate fields
-    RESERVED,      // reserved for JVM usage (for instance object header)
-    PADDING,       // padding (because of alignment constraints or @Contended)
-    REGULAR,       // primitive or oop field (including non-flattened inline fields)
-    FLATTENED,     // flattened field
-    INHERITED      // field(s) inherited from super classes
+    EMPTY,            // empty slot, space is taken from this to allocate fields
+    RESERVED,         // reserved for JVM usage (for instance object header)
+    PADDING,          // padding (because of alignment constraints or @Contended)
+    REGULAR,          // primitive or oop field (including inline type fields not allocated inline)
+    ALLOCATED_INLINE, // field allocated inline
+    INHERITED         // field(s) inherited from super classes
   };
 
  private:
   LayoutRawBlock* _next_block;
   LayoutRawBlock* _prev_block;
@@ -121,20 +121,20 @@
 };
 
 // A Field group represents a set of fields that have to be allocated together,
 // this is the way the @Contended annotation is supported.
 // Inside a FieldGroup, fields are sorted based on their kind: primitive,
-// oop, or flattened.
+// oop, or allocated inline.
 //
 class FieldGroup : public ResourceObj {
 
  private:
   FieldGroup* _next;
 
   GrowableArray<LayoutRawBlock*>* _primitive_fields;
   GrowableArray<LayoutRawBlock*>* _oop_fields;
-  GrowableArray<LayoutRawBlock*>* _flattened_fields;
+  GrowableArray<LayoutRawBlock*>* _fields_allocated_inline;
   int _contended_group;
   int _oop_count;
   static const int INITIAL_LIST_SIZE = 16;
 
  public:
@@ -142,17 +142,17 @@
 
   FieldGroup* next() const { return _next; }
   void set_next(FieldGroup* next) { _next = next; }
   GrowableArray<LayoutRawBlock*>* primitive_fields() const { return _primitive_fields; }
   GrowableArray<LayoutRawBlock*>* oop_fields() const { return _oop_fields; }
-  GrowableArray<LayoutRawBlock*>* flattened_fields() const { return _flattened_fields; }
+  GrowableArray<LayoutRawBlock*>* fields_allocated_inline() const { return _fields_allocated_inline; }
   int contended_group() const { return _contended_group; }
   int oop_count() const { return _oop_count; }
 
   void add_primitive_field(AllFieldStream fs, BasicType type);
   void add_oop_field(AllFieldStream fs);
-  void add_flattened_field(AllFieldStream fs, ValueKlass* vk);
+  void add_field_allocated_inline(AllFieldStream fs, ValueKlass* vk);
   void add_block(LayoutRawBlock** list, LayoutRawBlock* block);
   void sort_by_size();
 };
 
 // The FieldLayout class represents a set of fields organized
@@ -251,10 +251,11 @@
   int _nonstatic_oopmap_count;
   int _alignment;
   int _first_field_offset;
   int _exact_size_in_bytes;
   bool _has_nonstatic_fields;
+  bool _has_inline_type_fields;
   bool _is_contended;
   bool _is_inline_type;
   bool _has_flattening_information;
   bool _has_nonatomic_values;
   int _atomic_field_count;
@@ -289,9 +290,9 @@
  protected:
   void prologue();
   void epilogue();
   void regular_field_sorting();
   void inline_class_field_sorting(TRAPS);
-  void add_flattened_field_oopmap(OopMapBlocksBuilder* nonstatic_oop_map, ValueKlass* vk, int offset);
+  void add_field__allocated_inline_oopmap(OopMapBlocksBuilder* nonstatic_oop_map, ValueKlass* vk, int offset);
 };
 
 #endif // SHARE_CLASSFILE_FIELDLAYOUTBUILDER_HPP
