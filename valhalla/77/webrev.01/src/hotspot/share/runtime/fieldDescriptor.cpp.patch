diff a/src/hotspot/share/runtime/fieldDescriptor.cpp b/src/hotspot/share/runtime/fieldDescriptor.cpp
--- a/src/hotspot/share/runtime/fieldDescriptor.cpp
+++ b/src/hotspot/share/runtime/fieldDescriptor.cpp
@@ -189,21 +189,21 @@
     case T_BOOLEAN:
       as_int = obj->bool_field(offset());
       st->print(" %s", obj->bool_field(offset()) ? "true" : "false");
       break;
     case T_VALUETYPE:
-      if (is_flattened()) {
-        // Print fields of flattened value type field
+      if (is_allocated_inline()) {
+        // Print fields of fields allocated inline (recursively)
         ValueKlass* vk = ValueKlass::cast(field_holder()->get_value_field_klass(index()));
         int field_offset = offset() - vk->first_field_offset();
         obj = (oop)(cast_from_oop<address>(obj) + field_offset);
-        st->print_cr("Flattened value type '%s':", vk->name()->as_C_string());
+        st->print_cr("Inline type allocated inline '%s':", vk->name()->as_C_string());
         FieldPrinter print_field(st, obj);
         vk->do_nonstatic_fields(&print_field);
         return; // Do not print underlying representation
       }
-      // Non-flattened field, fall through
+      // inline type field not allocated inline, fall through
     case T_ARRAY:
     case T_OBJECT:
       st->print(" ");
       NOT_LP64(as_int = obj->int_field(offset()));
       if (obj->obj_field(offset()) != NULL) {
