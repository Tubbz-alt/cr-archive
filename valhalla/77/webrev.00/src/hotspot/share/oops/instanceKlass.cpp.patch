diff a/src/hotspot/share/oops/instanceKlass.cpp b/src/hotspot/share/oops/instanceKlass.cpp
--- a/src/hotspot/share/oops/instanceKlass.cpp
+++ b/src/hotspot/share/oops/instanceKlass.cpp
@@ -154,10 +154,12 @@
     }
   }
   return false;
 }
 
+bool InstanceKlass::field_is_inline(int index) const { return Signature::basic_type(field(index)->signature(constants())) == T_VALUETYPE; }
+
 // private: called to verify that k is a static member of this nest.
 // We know that k is an instance class in the same package and hence the
 // same classloader.
 bool InstanceKlass::has_nest_member(InstanceKlass* k, TRAPS) const {
   assert(!is_hidden(), "unexpected hidden class");
@@ -422,11 +424,11 @@
                                        parser.itable_size(),
                                        nonstatic_oop_map_size(parser.total_oop_map_count()),
                                        parser.is_interface(),
                                        parser.is_unsafe_anonymous(),
                                        should_store_fingerprint(is_hidden_or_anonymous),
-                                       parser.has_flattenable_fields() ? parser.java_fields_count() : 0,
+                                       parser.has_inline_fields() ? parser.java_fields_count() : 0,
                                        parser.is_inline_type());
 
   const Symbol* const class_name = parser.class_name();
   assert(class_name != NULL, "invariant");
   ClassLoaderData* loader_data = parser.loader_data();
@@ -535,11 +537,11 @@
   set_access_flags(parser.access_flags());
   if (parser.is_hidden()) set_is_hidden();
   set_is_unsafe_anonymous(parser.is_unsafe_anonymous());
   set_layout_helper(Klass::instance_layout_helper(parser.layout_size(),
                                                     false));
-    if (parser.has_flattenable_fields()) {
+    if (parser.has_inline_fields()) {
       set_has_inline_fields();
     }
     _java_fields_count = parser.java_fields_count();
 
     assert(NULL == _methods, "underlying memory not zeroed?");
@@ -920,11 +922,11 @@
   // linked (and have performed their own pre-loading) before the linking
   // of the current class.
 
 
   // Note:
-  // Inline class types used for flattenable fields are loaded during
+  // Inline class types are loaded during
   // the loading phase (see ClassFileParser::post_process_parsed_stream()).
   // Inline class types used as element types for array creation
   // are not pre-loaded. Their loading is triggered by either anewarray
   // or multianewarray bytecodes.
 
@@ -1187,18 +1189,17 @@
       THROW_OOP(e());
     }
   }
 
   // Step 8
-  // Initialize classes of flattenable fields
+  // Initialize classes of inline fields
   {
     for (AllFieldStream fs(this); !fs.done(); fs.next()) {
-      if (fs.is_flattenable()) {
+      if (Signature::basic_type(fs.signature()) == T_VALUETYPE) {
         Klass* klass = this->get_value_field_klass_or_null(fs.index());
         if (klass == NULL) {
-          assert(fs.access_flags().is_static() && fs.access_flags().is_flattenable(),
-              "Otherwise should have been pre-loaded");
+          assert(fs.access_flags().is_static(), "Otherwise should have been pre-loaded");
           klass = SystemDictionary::resolve_or_fail(field_signature(fs.index())->fundamental_name(THREAD),
               Handle(THREAD, class_loader()),
               Handle(THREAD, protection_domain()),
               true, CHECK);
           if (klass == NULL) {
