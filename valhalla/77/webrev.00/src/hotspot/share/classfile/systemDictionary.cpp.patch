diff a/src/hotspot/share/classfile/systemDictionary.cpp b/src/hotspot/share/classfile/systemDictionary.cpp
--- a/src/hotspot/share/classfile/systemDictionary.cpp
+++ b/src/hotspot/share/classfile/systemDictionary.cpp
@@ -506,11 +506,11 @@
   }
 
   return superk;
 }
 
-Klass* SystemDictionary::resolve_flattenable_field_or_fail(AllFieldStream* fs,
+Klass* SystemDictionary::resolve_inline_field_or_fail(AllFieldStream* fs,
                                                            Handle class_loader,
                                                            Handle protection_domain,
                                                            bool throw_error,
                                                            TRAPS) {
   Symbol* class_name = fs->signature()->fundamental_name(THREAD);
@@ -523,16 +523,16 @@
 
   {
     MutexLocker mu(THREAD, SystemDictionary_lock);
     oldprobe = placeholders()->get_entry(p_index, p_hash, class_name, loader_data);
     if (oldprobe != NULL &&
-      oldprobe->check_seen_thread(THREAD, PlaceholderTable::FLATTENABLE_FIELD)) {
+      oldprobe->check_seen_thread(THREAD, PlaceholderTable::INLINE_FIELD)) {
       throw_circularity_error = true;
 
     } else {
       placeholders()->find_and_add(p_index, p_hash, class_name, loader_data,
-                                   PlaceholderTable::FLATTENABLE_FIELD, NULL, THREAD);
+                                   PlaceholderTable::INLINE_FIELD, NULL, THREAD);
     }
   }
 
   Klass* klass = NULL;
   if (!throw_circularity_error) {
@@ -544,11 +544,11 @@
   }
 
   {
     MutexLocker mu(THREAD, SystemDictionary_lock);
     placeholders()->find_and_remove(p_index, p_hash, class_name, loader_data,
-                                    PlaceholderTable::FLATTENABLE_FIELD, THREAD);
+                                    PlaceholderTable::INLINE_FIELD, THREAD);
   }
 
   class_name->decrement_refcount();
   return klass;
 }
