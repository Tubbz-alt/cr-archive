diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
@@ -221,15 +221,12 @@
     public final Type functionalInterfaceType;
     public final Type previewFeatureType;
     public final Type typeDescriptorType;
     public final Type recordType;
     public final Type valueBasedType;
-    public final Type inlineObjectType;
     public final Type identityObjectType;
 
-    public final boolean injectTopInterfaceTypes;
-
     /** The symbol representing the length field of an array.
      */
     public final VarSymbol lengthVar;
 
     /** The symbol representing the final finalize method on enums */
@@ -272,11 +269,17 @@
                 if (type.getTag() == ARRAY || type.getTag() == CLASS) {
                     /* Temporary treatment for inline class: Given an inline class V that implements
                        I1, I2, ... In, V.class is typed to be Class<? extends Object & I1 & I2 .. & In>
                     */
                     if (type.isValue()) {
-                        Type it = types.makeIntersectionType(((ClassType)type).interfaces_field, true);
+                        ClassType ct = (ClassType) type;
+                        Type it;
+                        if (ct.interfaces_field == null || ct.interfaces_field.isEmpty()) {
+                            it = objectType;
+                        } else {
+                            it = types.makeIntersectionType(ct.interfaces_field, true);
+                        }
                         arg = new WildcardType(it, BoundKind.EXTENDS, boundClass);
                     } else {
                         arg = types.erasure(type);
                     }
                 }
@@ -597,19 +600,17 @@
         previewFeatureType = enterClass("jdk.internal.PreviewFeature");
         typeDescriptorType = enterClass("java.lang.invoke.TypeDescriptor");
         recordType = enterClass("java.lang.Record");
         valueBasedType = enterClass("java.lang.ValueBased");
         identityObjectType = enterClass("java.lang.IdentityObject");
-        inlineObjectType = enterClass("java.lang.InlineObject");
 
         synthesizeEmptyInterfaceIfMissing(autoCloseableType);
         synthesizeEmptyInterfaceIfMissing(cloneableType);
         synthesizeEmptyInterfaceIfMissing(serializableType);
         synthesizeEmptyInterfaceIfMissing(lambdaMetafactory);
         synthesizeEmptyInterfaceIfMissing(serializedLambdaType);
         synthesizeEmptyInterfaceIfMissing(stringConcatFactory);
-        synthesizeEmptyInterfaceIfMissing(inlineObjectType);
         synthesizeEmptyInterfaceIfMissing(identityObjectType);
         synthesizeBoxTypeIfMissing(doubleType);
         synthesizeBoxTypeIfMissing(floatType);
         synthesizeBoxTypeIfMissing(voidType);
 
@@ -622,22 +623,17 @@
         // classes in ct.sym.  This class does not have a class file.
         profileType = enterSyntheticAnnotation("jdk.Profile+Annotation");
         MethodSymbol m = new MethodSymbol(PUBLIC | ABSTRACT, names.value, intType, profileType.tsym);
         profileType.tsym.members().enter(m);
 
-        injectTopInterfaceTypes = Options.instance(context).isUnset("noTopInterfaceInjection") &&
-                Feature.INLINE_TYPES.allowedInSource(source) &&
-                Target.instance(context).hasTopInterfaces();
-
         // Enter a class for arrays.
         // The class implements java.lang.Cloneable and java.io.Serializable.
         // It has a final length field and a clone method.
         ClassType arrayClassType = (ClassType)arrayClass.type;
         arrayClassType.supertype_field = objectType;
-        arrayClassType.interfaces_field = injectTopInterfaceTypes ?
-                List.of(cloneableType, serializableType, identityObjectType):
-                List.of(cloneableType, serializableType);
+        arrayClassType.interfaces_field =
+                List.of(cloneableType, serializableType, identityObjectType);
 
         arrayClass.members_field = WriteableScope.create(arrayClass);
         lengthVar = new VarSymbol(
             PUBLIC | FINAL,
             names.length,
