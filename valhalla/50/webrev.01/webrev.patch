diff a/make/CompileJavaModules.gmk b/make/CompileJavaModules.gmk
--- a/make/CompileJavaModules.gmk
+++ b/make/CompileJavaModules.gmk
@@ -230,11 +230,11 @@
 
 java.management_ADD_JAVAC_FLAGS += -Xdoclint:all/protected,-reference,-accessibility '-Xdoclint/package:java.*,javax.*'
 
 ################################################################################
 
-java.management.rmi_ADD_JAVAC_FLAGS += -Xdoclint:all/protected '-Xdoclint/package:javax.*' -XDnoTopInterfaceInjection
+java.management.rmi_ADD_JAVAC_FLAGS += -Xdoclint:all/protected '-Xdoclint/package:javax.*'
 
 ################################################################################
 
 java.prefs_ADD_JAVAC_FLAGS += -Xdoclint:all/protected '-Xdoclint/package:java.*,javax.*'
 
@@ -253,11 +253,11 @@
     $(TOPDIR)/src/java.sql.rowset/share/classes/com/sun/rowset/*.properties \
     $(TOPDIR)/src/java.sql.rowset/share/classes/javax/sql/rowset/*.properties)
 
 ################################################################################
 
-java.rmi_ADD_JAVAC_FLAGS += -Xdoclint:all/protected '-Xdoclint/package:java.*,javax.*' -XDnoTopInterfaceInjection
+java.rmi_ADD_JAVAC_FLAGS += -Xdoclint:all/protected '-Xdoclint/package:java.*,javax.*'
 java.rmi_CLEAN_FILES += $(wildcard \
     $(TOPDIR)/src/java.rmi/share/classes/sun/rmi/registry/resources/*.properties \
     $(TOPDIR)/src/java.rmi/share/classes/sun/rmi/server/resources/*.properties)
 
 ################################################################################
@@ -276,14 +276,10 @@
 
 java.security.jgss_ADD_JAVAC_FLAGS += -Xdoclint:all/protected '-Xdoclint/package:java.*,javax.*'
 
 ################################################################################
 
-jdk.naming.rmi_ADD_JAVAC_FLAGS += -XDnoTopInterfaceInjection
-
-################################################################################
-
 java.smartcardio_ADD_JAVAC_FLAGS += -Xdoclint:all/protected,-accessibility '-Xdoclint/package:java.*,javax.*'
 
 ################################################################################
 
 java.xml.crypto_ADD_JAVAC_FLAGS += -Xdoclint:all/protected '-Xdoclint/package:java.*,javax.*'
diff a/src/java.base/share/classes/java/lang/InlineObject.java b/src/java.base/share/classes/java/lang/InlineObject.java
--- a/src/java.base/share/classes/java/lang/InlineObject.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-
-package java.lang;
-
-/**
- * A restricted interface implemented by all inline objects.
- * @since 1.14
- */
-public interface InlineObject {
-}
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
@@ -221,15 +221,12 @@
     public final Type functionalInterfaceType;
     public final Type previewFeatureType;
     public final Type typeDescriptorType;
     public final Type recordType;
     public final Type valueBasedType;
-    public final Type inlineObjectType;
     public final Type identityObjectType;
 
-    public final boolean injectTopInterfaceTypes;
-
     /** The symbol representing the length field of an array.
      */
     public final VarSymbol lengthVar;
 
     /** The symbol representing the final finalize method on enums */
@@ -272,12 +269,12 @@
                 if (type.getTag() == ARRAY || type.getTag() == CLASS) {
                     /* Temporary treatment for inline class: Given an inline class V that implements
                        I1, I2, ... In, V.class is typed to be Class<? extends Object & I1 & I2 .. & In>
                     */
                     if (type.isValue()) {
-                        Type it = types.makeIntersectionType(((ClassType)type).interfaces_field, true);
-                        arg = new WildcardType(it, BoundKind.EXTENDS, boundClass);
+                        List<Type> bounds = List.of(objectType).appendList(((ClassSymbol) type.tsym).getInterfaces());
+                        arg = new WildcardType(types.makeIntersectionType(bounds), BoundKind.EXTENDS, boundClass);
                     } else {
                         arg = types.erasure(type);
                     }
                 }
                 else if (type.isPrimitiveOrVoid())
@@ -597,19 +594,17 @@
         previewFeatureType = enterClass("jdk.internal.PreviewFeature");
         typeDescriptorType = enterClass("java.lang.invoke.TypeDescriptor");
         recordType = enterClass("java.lang.Record");
         valueBasedType = enterClass("java.lang.ValueBased");
         identityObjectType = enterClass("java.lang.IdentityObject");
-        inlineObjectType = enterClass("java.lang.InlineObject");
 
         synthesizeEmptyInterfaceIfMissing(autoCloseableType);
         synthesizeEmptyInterfaceIfMissing(cloneableType);
         synthesizeEmptyInterfaceIfMissing(serializableType);
         synthesizeEmptyInterfaceIfMissing(lambdaMetafactory);
         synthesizeEmptyInterfaceIfMissing(serializedLambdaType);
         synthesizeEmptyInterfaceIfMissing(stringConcatFactory);
-        synthesizeEmptyInterfaceIfMissing(inlineObjectType);
         synthesizeEmptyInterfaceIfMissing(identityObjectType);
         synthesizeBoxTypeIfMissing(doubleType);
         synthesizeBoxTypeIfMissing(floatType);
         synthesizeBoxTypeIfMissing(voidType);
 
@@ -622,22 +617,17 @@
         // classes in ct.sym.  This class does not have a class file.
         profileType = enterSyntheticAnnotation("jdk.Profile+Annotation");
         MethodSymbol m = new MethodSymbol(PUBLIC | ABSTRACT, names.value, intType, profileType.tsym);
         profileType.tsym.members().enter(m);
 
-        injectTopInterfaceTypes = Options.instance(context).isUnset("noTopInterfaceInjection") &&
-                Feature.INLINE_TYPES.allowedInSource(source) &&
-                Target.instance(context).hasTopInterfaces();
-
         // Enter a class for arrays.
         // The class implements java.lang.Cloneable and java.io.Serializable.
         // It has a final length field and a clone method.
         ClassType arrayClassType = (ClassType)arrayClass.type;
         arrayClassType.supertype_field = objectType;
-        arrayClassType.interfaces_field = injectTopInterfaceTypes ?
-                List.of(cloneableType, serializableType, identityObjectType):
-                List.of(cloneableType, serializableType);
+        arrayClassType.interfaces_field =
+                List.of(cloneableType, serializableType, identityObjectType);
 
         arrayClass.members_field = WriteableScope.create(arrayClass);
         lengthVar = new VarSymbol(
             PUBLIC | FINAL,
             names.length,
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java
@@ -93,11 +93,10 @@
     final JavacMessages messages;
     final Names names;
     final boolean allowDefaultMethods;
     final boolean mapCapturesToBounds;
     final boolean allowValueBasedClasses;
-    final boolean injectTopInterfaceTypes;
     final Check chk;
     final Enter enter;
     JCDiagnostic.Factory diags;
     List<Warner> warnStack = List.nil();
     final Name capturedName;
@@ -125,13 +124,10 @@
         messages = JavacMessages.instance(context);
         diags = JCDiagnostic.Factory.instance(context);
         noWarnings = new Warner(null);
         Options options = Options.instance(context);
         allowValueBasedClasses = options.isSet("allowValueBasedClasses");
-        injectTopInterfaceTypes = Options.instance(context).isUnset("noTopInterfaceInjection") &&
-                Feature.INLINE_TYPES.allowedInSource(source) &&
-                Target.instance(context).hasTopInterfaces();
     }
     // </editor-fold>
 
     // <editor-fold defaultstate="collapsed" desc="bounds">
     /**
@@ -1243,11 +1239,11 @@
                 if (s.hasTag(CLASS)) {
                     Name sname = s.tsym.getQualifiedName();
                     return sname == names.java_lang_Object
                         || sname == names.java_lang_Cloneable
                         || sname == names.java_io_Serializable
-                        || (injectTopInterfaceTypes && sname == names.java_lang_IdentityObject);
+                        || sname == names.java_lang_IdentityObject;
                 }
 
                 return false;
             }
 
@@ -2200,10 +2196,20 @@
 
         if (sym.type == syms.objectType) { //optimization
             if (!isValue(t))
                 return syms.objectType;
         }
+        if (sym.type == syms.identityObjectType) {
+            // IdentityObject is super interface of every concrete identity class other than jlO
+            if (t.isValue() || t.tsym == syms.objectType.tsym)
+                return null;
+            if (t.hasTag(ARRAY))
+                return syms.identityObjectType;
+            if (t.hasTag(CLASS) && !t.isReferenceProjection() && !t.tsym.isInterface() && !t.tsym.isAbstract()) {
+                return syms.identityObjectType;
+            } // else fall through and look for explicit coded super interface
+        }
         return asSuper.visit(t, sym);
     }
     // where
         private SimpleVisitor<Type,Symbol> asSuper = new SimpleVisitor<Type,Symbol>() {
 
@@ -4159,13 +4165,12 @@
             // initialized lazily to avoid problems during compiler startup
             if (arraySuperType == null) {
                 synchronized (this) {
                     if (arraySuperType == null) {
                         // JLS 10.8: all arrays implement Cloneable and Serializable.
-                        List<Type> ifaces = injectTopInterfaceTypes ?
-                                List.of(syms.serializableType, syms.cloneableType, syms.identityObjectType):
-                                List.of(syms.serializableType, syms.cloneableType);
+                        List<Type> ifaces =
+                                List.of(syms.serializableType, syms.cloneableType, syms.identityObjectType);
                         arraySuperType = makeIntersectionType(ifaces, true);
                     }
                 }
             }
             return arraySuperType;
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
@@ -2518,13 +2518,17 @@
                     methodName == names.getClass &&
                     argtypes.isEmpty()) {
                 // as a special case, x.getClass() has type Class<? extends |X|>
                 // Temporary treatment for inline class: Given an inline class V that implements
                 // I1, I2, ... In, v.getClass() is typed to be Class<? extends Object & I1 & I2 .. & In>
-                Type wcb = qualifierType.isValue()
-                              ? types.makeIntersectionType(((ClassType) qualifierType).interfaces_field, true)
-                              : types.erasure(qualifierType);
+                Type wcb;
+                if (qualifierType.isValue()) {
+                    List<Type> bounds = List.of(syms.objectType).appendList(((ClassSymbol) qualifierType.tsym).getInterfaces());
+                    wcb = types.makeIntersectionType(bounds);
+                } else {
+                    wcb = types.erasure(qualifierType);
+                }
                 return new ClassType(restype.getEnclosingType(),
                         List.of(new WildcardType(wcb,
                                 BoundKind.EXTENDS,
                                 syms.boundClass)),
                         restype.tsym,
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
@@ -2673,18 +2673,12 @@
                 if (!checkCompatibleAbstracts(pos, l.head, m.head, c))
                     return;
         }
         checkCompatibleConcretes(pos, c);
 
-        boolean isIdentityObject = types.asSuper(c, syms.identityObjectType.tsym, true) != null;
-        boolean isInlineObject = types.asSuper(c, syms.inlineObjectType.tsym, true) != null;
-        if (c.isValue() && isIdentityObject) {
+        if (c.isValue() && types.asSuper(c, syms.identityObjectType.tsym, true) != null) {
             log.error(pos, Errors.InlineTypeMustNotImplementIdentityObject(c));
-        } else if (!c.isInterface() && !c.tsym.isAbstract() && !c.isValue() && isInlineObject) {
-            log.error(pos, Errors.IdentityTypeMustNotImplementInlineObject(c));
-        } else if (isIdentityObject && isInlineObject) {
-            log.error(pos, Errors.MutuallyIncompatibleInterfaces(c));
         }
     }
 
     /** Check that all non-override equivalent methods accessible from 'site'
      *  are mutually compatible (JLS 8.4.8/9.4.1).
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
@@ -142,13 +142,10 @@
         typeEnvs = TypeEnvs.instance(context);
         dependencies = Dependencies.instance(context);
         Source source = Source.instance(context);
         allowTypeAnnos = Feature.TYPE_ANNOTATIONS.allowedInSource(source);
         allowDeprecationOnImport = Feature.DEPRECATION_ON_IMPORT.allowedInSource(source);
-        injectTopInterfaceTypes = Options.instance(context).isUnset("noTopInterfaceInjection") &&
-                                        Feature.INLINE_TYPES.allowedInSource(source) &&
-                                            Target.instance(context).hasTopInterfaces();
     }
 
     /** Switch: support type annotations.
      */
     boolean allowTypeAnnos;
@@ -156,14 +153,10 @@
     /**
      * Switch: should deprecation warnings be issued on import
      */
     boolean allowDeprecationOnImport;
 
-    /** Switch: inject top interface types.
-     */
-    boolean injectTopInterfaceTypes;
-
     /** A flag to disable completion from time to time during member
      *  enter, as we only need to look up types.  This avoids
      *  unnecessarily deep recursion.
      */
     boolean completionEnabled = true;
@@ -702,31 +695,17 @@
                 ? Type.noType
                 : sym.isRecord() ? syms.recordType : syms.objectType;
             }
             ct.supertype_field = modelMissingTypes(baseEnv, supertype, extending, false);
 
-            Type interfaceToInject = Type.noType;
-            if (injectTopInterfaceTypes) {
-                if (isValueType || types.isValue(supertype)) {
-                    interfaceToInject = syms.inlineObjectType;
-                } else if ((sym.flags_field & (INTERFACE | ABSTRACT)) == 0) { // skip interfaces, abstract classes and annotations.
-                    if (sym.fullname != names.java_lang_Object) {
-                        interfaceToInject = syms.identityObjectType;
-                    }
-                }
-            }
-
             // Determine interfaces.
             ListBuffer<Type> interfaces = new ListBuffer<>();
             ListBuffer<Type> all_interfaces = null; // lazy init
             List<JCExpression> interfaceTrees = tree.implementing;
             for (JCExpression iface : interfaceTrees) {
                 iface = clearTypeParams(iface);
                 Type it = attr.attribBase(iface, baseEnv, false, true, true);
-                if (it.tsym == interfaceToInject.tsym) {
-                    interfaceToInject = Type.noType;
-                }
                 if (it.hasTag(CLASS)) {
                     interfaces.append(it);
                     if (all_interfaces != null) all_interfaces.append(it);
                 } else {
                     if (all_interfaces == null)
@@ -737,13 +716,10 @@
 
             if ((sym.flags_field & ANNOTATION) != 0) {
                 ct.interfaces_field = List.of(syms.annotationType);
                 ct.all_interfaces_field = ct.interfaces_field;
             }  else {
-                if (interfaceToInject != Type.noType) {
-                    interfaces.append(interfaceToInject);
-                }
                 ct.interfaces_field = interfaces.toList();
                 ct.all_interfaces_field = (all_interfaces == null)
                         ? ct.interfaces_field : all_interfaces.toList();
             }
             if (ct.isValue()) {
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassWriter.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassWriter.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassWriter.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassWriter.java
@@ -1533,11 +1533,11 @@
         Assert.check((c.flags() & COMPOUND) == 0);
         databuf.reset();
         poolbuf.reset();
 
         Type supertype = c.isValue() ? c.type.referenceProjection() : types.supertype(c.type);
-        List<Type> interfaces = c.isValue() ? List.of(syms.inlineObjectType) : types.interfaces(c.type);
+        List<Type> interfaces = c.isValue() ? List.nil() : types.interfaces(c.type);
         List<Type> typarams = c.type.getTypeArguments();
 
         int flags;
         if (c.owner.kind == MDL) {
             flags = ACC_MODULE;
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/Target.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/Target.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/Target.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/Target.java
@@ -172,13 +172,6 @@
     /** Does the target VM support virtual private invocations?
      */
     public boolean hasVirtualPrivateInvoke() {
         return compareTo(JDK1_11) >= 0;
     }
-
-    /** Does the target VM support new top interfaces?
-     */
-    public boolean hasTopInterfaces() {
-        return compareTo(JDK1_14) >= 0;
-    }
-
 }
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties b/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties
@@ -3705,18 +3705,10 @@
 
 # 0: type
 compiler.err.inline.type.must.not.implement.identity.object=\
     The inline type {0} attempts to implement the incompatible interface IdentityObject
 
-# 0: type
-compiler.err.identity.type.must.not.implement.inline.object=\
-    The identity type {0} attempts to implement the incompatible interface InlineObject
-
-# 0: type
-compiler.err.mutually.incompatible.interfaces=\
-    The interfaces IdentityObject and InlineObject are mutually exclusive. The type {0} cannot implement both 
-
 # 0: symbol, 1: type
 compiler.err.concrete.supertype.for.inline.class=\
     The concrete class {1} is not allowed to be a super class of the inline class {0} either directly or indirectly
 
 # 0: symbol, 1: symbol, 2: type
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/util/Names.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/util/Names.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/util/Names.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/util/Names.java
@@ -116,11 +116,10 @@
     public final Name java_lang_Object;
     public final Name java_lang_System;
     public final Name __inline__;
     public final Name java_lang___inline__;
     public final Name java_lang_IdentityObject;
-    public final Name java_lang_InlineObject;
 
     // names of builtin classes
     public final Name Array;
     public final Name Bound;
     public final Name Method;
@@ -297,11 +296,10 @@
         java_lang_Object = fromString("java.lang.Object");
         java_lang_System = fromString("java.lang.System");
         __inline__ = fromString("__inline__");
         java_lang___inline__ = fromString("java.lang.__inline__");
         java_lang_IdentityObject = fromString("java.lang.IdentityObject");
-        java_lang_InlineObject = fromString("java.lang.InlineObject");
 
         // names of builtin classes
         Array = fromString("Array");
         Bound = fromString("Bound");
         Method = fromString("Method");
diff a/test/langtools/tools/javac/diags/examples.not-yet.txt b/test/langtools/tools/javac/diags/examples.not-yet.txt
--- a/test/langtools/tools/javac/diags/examples.not-yet.txt
+++ b/test/langtools/tools/javac/diags/examples.not-yet.txt
@@ -206,13 +206,11 @@
 compiler.err.value.may.not.extend
 compiler.warn.potential.null.pollution
 compiler.err.empty.value.not.yet
 compiler.err.this.exposed.prematurely
 compiler.warn.this.exposed.prematurely
-compiler.err.identity.type.must.not.implement.inline.object
 compiler.err.inline.type.must.not.implement.identity.object
-compiler.err.mutually.incompatible.interfaces
 compiler.err.concrete.supertype.for.inline.class
 compiler.err.super.class.cannot.be.inner
 compiler.err.super.class.declares.init.block
 compiler.err.super.constructor.cannot.take.arguments
 compiler.err.super.field.not.allowed
