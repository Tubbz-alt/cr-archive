diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symtab.java
@@ -269,18 +269,12 @@
                 if (type.getTag() == ARRAY || type.getTag() == CLASS) {
                     /* Temporary treatment for inline class: Given an inline class V that implements
                        I1, I2, ... In, V.class is typed to be Class<? extends Object & I1 & I2 .. & In>
                     */
                     if (type.isValue()) {
-                        ClassType ct = (ClassType) type;
-                        Type it;
-                        if (ct.interfaces_field == null || ct.interfaces_field.isEmpty()) {
-                            it = objectType;
-                        } else {
-                            it = types.makeIntersectionType(ct.interfaces_field, true);
-                        }
-                        arg = new WildcardType(it, BoundKind.EXTENDS, boundClass);
+                        List<Type> bounds = List.of(objectType).appendList(((ClassSymbol) type.tsym).getInterfaces());
+                        arg = new WildcardType(types.makeIntersectionType(bounds), BoundKind.EXTENDS, boundClass);
                     } else {
                         arg = types.erasure(type);
                     }
                 }
                 else if (type.isPrimitiveOrVoid())
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
@@ -2520,16 +2520,12 @@
                 // as a special case, x.getClass() has type Class<? extends |X|>
                 // Temporary treatment for inline class: Given an inline class V that implements
                 // I1, I2, ... In, v.getClass() is typed to be Class<? extends Object & I1 & I2 .. & In>
                 Type wcb;
                 if (qualifierType.isValue()) {
-                    ClassType ct = (ClassType) qualifierType;
-                    if (ct.interfaces_field == null || ct.interfaces_field.isEmpty()) {
-                        wcb = syms.objectType;
-                    } else {
-                        wcb = types.makeIntersectionType(ct.interfaces_field, true);
-                    }
+                    List<Type> bounds = List.of(syms.objectType).appendList(((ClassSymbol) qualifierType.tsym).getInterfaces());
+                    wcb = types.makeIntersectionType(bounds);
                 } else {
                     wcb = types.erasure(qualifierType);
                 }
                 return new ClassType(restype.getEnclosingType(),
                         List.of(new WildcardType(wcb,
