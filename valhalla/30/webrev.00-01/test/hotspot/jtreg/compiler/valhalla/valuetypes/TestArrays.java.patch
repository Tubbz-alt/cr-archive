diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java
@@ -1249,11 +1249,12 @@
         }
     }
 
     @Test
     public MyValue1[] test51(MyValue1[] va) {
-        return Arrays.copyOf(va, va.length, MyValue1[].class);
+        // TODO Remove cast as workaround once javac is fixed
+        return (MyValue1[])Arrays.copyOf(va, va.length, MyValue1[].class);
     }
 
     @DontCompile
     public void test51_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
@@ -1267,11 +1268,12 @@
 
     static final MyValue1[] test52_va = new MyValue1[8];
 
     @Test
     public MyValue1[] test52() {
-        return Arrays.copyOf(test52_va, 8, MyValue1[].class);
+        // TODO Remove cast as workaround once javac is fixed
+        return (MyValue1[])Arrays.copyOf(test52_va, 8, MyValue1[].class);
     }
 
     @DontCompile
     public void test52_verifier(boolean warmup) {
         for (int i = 0; i < 8; ++i) {
@@ -1281,11 +1283,12 @@
         verify(test52_va, result);
     }
 
     @Test
     public MyValue1[] test53(Object[] va) {
-        return Arrays.copyOf(va, va.length, MyValue1[].class);
+        // TODO Remove cast as workaround once javac is fixed
+        return (MyValue1[])Arrays.copyOf(va, va.length, MyValue1[].class);
     }
 
     @DontCompile
     public void test53_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
@@ -1329,11 +1332,12 @@
         verify(va, result);
     }
 
     @Test
     public MyValue1[] test56(Object[] va) {
-        return Arrays.copyOf(va, va.length, MyValue1[].class);
+        // TODO Remove cast as workaround once javac is fixed
+        return (MyValue1[])Arrays.copyOf(va, va.length, MyValue1[].class);
     }
 
     @DontCompile
     public void test56_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
