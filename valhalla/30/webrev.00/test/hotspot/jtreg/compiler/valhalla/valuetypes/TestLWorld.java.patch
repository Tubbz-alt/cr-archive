diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestLWorld.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestLWorld.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestLWorld.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestLWorld.java
@@ -115,18 +115,18 @@
     Object objectField5 = null;
     Object objectField6 = null;
 
     MyValue1 valueField1 = testValue1;
     MyValue1 valueField2 = testValue1;
-    MyValue1? valueField3 = testValue1;
+    MyValue1.ref valueField3 = testValue1;
     MyValue1 valueField4;
-    MyValue1? valueField5;
+    MyValue1.ref valueField5;
 
-    static MyValue1? staticValueField1 = testValue1;
+    static MyValue1.ref staticValueField1 = testValue1;
     static MyValue1 staticValueField2 = testValue1;
     static MyValue1 staticValueField3;
-    static MyValue1? staticValueField4;
+    static MyValue1.ref staticValueField4;
 
     @DontInline
     public Object readValueField5() {
         return (Object)valueField5;
     }
@@ -1231,12 +1231,12 @@
     public void test41_verifier(boolean warmup) {
         test41();
     }
 
     // Test for bug in Escape Analysis
-    private static final MyValue1? test42VT1 = MyValue1.createWithFieldsInline(rI, rL);
-    private static final MyValue1? test42VT2 = MyValue1.createWithFieldsInline(rI + 1, rL + 1);
+    private static final MyValue1.ref test42VT1 = MyValue1.createWithFieldsInline(rI, rL);
+    private static final MyValue1.ref test42VT2 = MyValue1.createWithFieldsInline(rI + 1, rL + 1);
 
     @Test()
     public void test42() {
         MyValue1[] vals = new MyValue1[] {(MyValue1) test42VT1, (MyValue1) test42VT2};
         Asserts.assertEQ(vals[0].hash(), test42VT1.hash());
@@ -1392,13 +1392,13 @@
         final Object objectField5;
         final Object objectField6;
 
         final MyValue1 valueField1;
         final MyValue1 valueField2;
-        final MyValue1? valueField3;
+        final MyValue1.ref valueField3;
         final MyValue1 valueField4;
-        final MyValue1? valueField5;
+        final MyValue1.ref valueField5;
 
         public Test51Value() {
             objectField1 = null;
             objectField2 = null;
             objectField3 = null;
@@ -1411,11 +1411,11 @@
             valueField4 = MyValue1.createDefaultDontInline();
             valueField5 = MyValue1.createDefaultDontInline();
         }
 
         public Test51Value(Object o1, Object o2, Object o3, Object o4, Object o5, Object o6,
-                           MyValue1 vt1, MyValue1 vt2, MyValue1? vt3, MyValue1 vt4, MyValue1? vt5) {
+                           MyValue1 vt1, MyValue1 vt2, MyValue1.ref vt3, MyValue1 vt4, MyValue1.ref vt5) {
             objectField1 = o1;
             objectField2 = o2;
             objectField3 = o3;
             objectField4 = o4;
             objectField5 = o5;
@@ -1944,16 +1944,16 @@
         }
     }
 
     // Casting a null Integer to a nullable value type should not throw
     @ForceInline
-    public MyValue1? test78_helper(Object o) {
-        return (MyValue1?)o;
+    public MyValue1.ref test78_helper(Object o) {
+        return (MyValue1.ref)o;
     }
 
     @Test
-    public MyValue1? test78(Integer i) throws Throwable {
+    public MyValue1.ref test78(Integer i) throws Throwable {
         return test78_helper(i);
     }
 
     @DontCompile
     public void test78_verifier(boolean warmup) throws Throwable {
@@ -1964,16 +1964,16 @@
         }
     }
 
     // Casting an Integer to a nullable value type should throw a ClassCastException
     @ForceInline
-    public MyValue1? test79_helper(Object o) {
-        return (MyValue1?)o;
+    public MyValue1.ref test79_helper(Object o) {
+        return (MyValue1.ref)o;
     }
 
     @Test
-    public MyValue1? test79(Integer i) throws Throwable {
+    public MyValue1.ref test79(Integer i) throws Throwable {
         return test79_helper(i);
     }
 
     @DontCompile
     public void test79_verifier(boolean warmup) throws Throwable {
