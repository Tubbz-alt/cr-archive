diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestIntrinsics.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestIntrinsics.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestIntrinsics.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestIntrinsics.java
@@ -114,12 +114,12 @@
 
     // Verify that Class::getSuperclass checks with statically known classes are folded
     @Test(failOn = LOADK)
     public boolean test4() {
         boolean check1 = Object.class.getSuperclass() == null;
-        boolean check2 = MyValue1.class.asIndirectType().getSuperclass() == Object.class;
-        boolean check3 = MyValue1.class.asPrimaryType().getSuperclass() == Object.class;
+        boolean check2 = MyValue1.class.asIndirectType().getSuperclass() == MyValue1.ref.class;
+        boolean check3 = MyValue1.class.asPrimaryType().getSuperclass() == MyValue1.ref.class;
         boolean check4 = Class.class.getSuperclass() == Object.class;
         return check1 && check2 && check3 && check4;
     }
 
     public void test4_verifier(boolean warmup) {
@@ -460,11 +460,11 @@
         Object[] res = (Object[])test26();
         Asserts.assertEQ(((MyValue1)res[0]).hashPrimitive(), MyValue1.createDefaultInline().hashPrimitive());
     }
 
     // Load non-flattenable value type field with unsafe
-    MyValue1? test27_vt = MyValue1.createWithFieldsInline(rI, rL);
+    MyValue1.ref test27_vt = MyValue1.createWithFieldsInline(rI, rL);
     private static final long TEST27_OFFSET;
     static {
         try {
             Field field = TestIntrinsics.class.getDeclaredField("test27_vt");
             TEST27_OFFSET = U.objectFieldOffset(field);
@@ -745,122 +745,122 @@
         }
     }
 
     // Class.isInstance
     @Test()
-    public boolean test41(Class c, MyValue1? vt) {
+    public boolean test41(Class c, MyValue1.ref vt) {
         return c.isInstance(vt);
     }
 
     @DontCompile
     public void test41_verifier(boolean warmup) {
-        MyValue1? vt = MyValue1.createWithFieldsInline(rI, rL);
+        MyValue1.ref vt = MyValue1.createWithFieldsInline(rI, rL);
         boolean result = test41(MyValue1.class.asIndirectType(), vt);
         Asserts.assertTrue(result);
         result = test41(MyValue1.class, vt);
         Asserts.assertTrue(result);
     }
 
     @Test()
-    public boolean test42(Class c, MyValue1? vt) {
+    public boolean test42(Class c, MyValue1.ref vt) {
         return c.isInstance(vt);
     }
 
     @DontCompile
     public void test42_verifier(boolean warmup) {
-        MyValue1? vt = MyValue1.createWithFieldsInline(rI, rL);
+        MyValue1.ref vt = MyValue1.createWithFieldsInline(rI, rL);
         boolean result = test42(MyValue2.class.asIndirectType(), vt);
         Asserts.assertFalse(result);
         result = test42(MyValue2.class, vt);
         Asserts.assertFalse(result);
     }
 
     // Class.cast
     @Test()
-    public Object test43(Class c, MyValue1? vt) {
+    public Object test43(Class c, MyValue1.ref vt) {
         return c.cast(vt);
     }
 
     @DontCompile
     public void test43_verifier(boolean warmup) {
-        MyValue1? vt = MyValue1.createWithFieldsInline(rI, rL);
+        MyValue1.ref vt = MyValue1.createWithFieldsInline(rI, rL);
         Object result = test43(MyValue1.class.asIndirectType(), vt);
         Asserts.assertEQ(((MyValue1)result).hash(), vt.hash());
         result = test43(MyValue1.class.asIndirectType(), null);
         Asserts.assertEQ(result, null);
     }
 
     @Test()
-    public Object test44(Class c, MyValue1? vt) {
+    public Object test44(Class c, MyValue1.ref vt) {
         return c.cast(vt);
     }
 
     @DontCompile
     public void test44_verifier(boolean warmup) {
-        MyValue1? vt = MyValue1.createWithFieldsInline(rI, rL);
+        MyValue1.ref vt = MyValue1.createWithFieldsInline(rI, rL);
         try {
             test44(MyValue2.class.asIndirectType(), vt);
             throw new RuntimeException("should have thrown");
         } catch (ClassCastException cce) {
         }
     }
 
     @Test()
-    public Object test45(MyValue1? vt) {
+    public Object test45(MyValue1.ref vt) {
         return MyValue1.class.asIndirectType().cast(vt);
     }
 
     @DontCompile
     public void test45_verifier(boolean warmup) {
-        MyValue1? vt = MyValue1.createWithFieldsInline(rI, rL);
+        MyValue1.ref vt = MyValue1.createWithFieldsInline(rI, rL);
         Object result = test45(vt);
         Asserts.assertEQ(((MyValue1)result).hash(), vt.hash());
         result = test45(null);
         Asserts.assertEQ(result, null);
     }
 
     @Test()
-    public Object test46(MyValue1? vt) {
+    public Object test46(MyValue1.ref vt) {
         return MyValue2.class.asIndirectType().cast(vt);
     }
 
     @DontCompile
     public void test46_verifier(boolean warmup) {
-        MyValue1? vt = MyValue1.createWithFieldsInline(rI, rL);
+        MyValue1.ref vt = MyValue1.createWithFieldsInline(rI, rL);
         test46(null);
         try {
             test46(vt);
             throw new RuntimeException("should have thrown");
         } catch (ClassCastException cce) {
         }
     }
 
     @Test()
-    public Object test47(MyValue1? vt) {
+    public Object test47(MyValue1.ref vt) {
         return MyValue1.class.asPrimaryType().cast(vt);
     }
 
     @DontCompile
     public void test47_verifier(boolean warmup) {
-        MyValue1? vt = MyValue1.createWithFieldsInline(rI, rL);
+        MyValue1.ref vt = MyValue1.createWithFieldsInline(rI, rL);
         Object result = test47(vt);
         Asserts.assertEQ(((MyValue1)result).hash(), vt.hash());
         try {
             test47(null);
             throw new RuntimeException("should have thrown");
         } catch (NullPointerException npe) {
         }
     }
 
     @Test()
-    public Object test48(Class c, MyValue1? vt) {
+    public Object test48(Class c, MyValue1.ref vt) {
         return c.cast(vt);
     }
 
     @DontCompile
     public void test48_verifier(boolean warmup) {
-        MyValue1? vt = MyValue1.createWithFieldsInline(rI, rL);
+        MyValue1.ref vt = MyValue1.createWithFieldsInline(rI, rL);
         Object result = test48(MyValue1.class, vt);
         Asserts.assertEQ(((MyValue1)result).hash(), vt.hash());
         try {
             test48(MyValue1.class, null);
             throw new RuntimeException("should have thrown");
@@ -887,20 +887,20 @@
 
     @DontCompile
     public void test50_verifier(boolean warmup) {
         MyValue1 vt = MyValue1.createWithFieldsInline(rI, rL);
         MyValue1[] va  = new MyValue1[42];
-        MyValue1?[] vba = new MyValue1?[42];
+        MyValue1.ref[] vba = new MyValue1.ref[42];
         Object result = test50(MyValue1.class, vt);
         Asserts.assertEQ(((MyValue1)result).hash(), vt.hash());
         result = test50(MyValue1.class.asIndirectType(), vt);
         Asserts.assertEQ(((MyValue1)result).hash(), vt.hash());
         result = test50(MyValue1[].class, va);
         Asserts.assertEQ(result, va);
-        result = test50(MyValue1?[].class, vba);
+        result = test50(MyValue1.ref[].class, vba);
         Asserts.assertEQ(result, vba);
-        result = test50(MyValue1?[].class, va);
+        result = test50(MyValue1.ref[].class, va);
         Asserts.assertEQ(result, va);
         try {
             test50(MyValue1.class, null);
             throw new RuntimeException("should have thrown");
         } catch (NullPointerException npe) {
@@ -929,17 +929,17 @@
 
     // multidimensional value type array creation via reflection
     @Test()
     public Object[][] test52(int len, int val) {
         MyValue1[][] va1 = (MyValue1[][])Array.newInstance(MyValue1[].class, len);
-        MyValue1?[][] va2 = (MyValue1?[][])Array.newInstance(MyValue1?[].class, len);
+        MyValue1.ref[][] va2 = (MyValue1.ref[][])Array.newInstance(MyValue1.ref[].class, len);
         Object[][] result;
         if (val == 1) {
             va1[0] = new MyValue1[1];
             result = va1;
         } else {
-            va2[0] = new MyValue1?[1];
+            va2[0] = new MyValue1.ref[1];
             result = va2;
         }
         if (val == 1) {
             Asserts.assertEQ(va1[0][0].hash(), ((MyValue1)result[0][0]).hash());
         } else {
@@ -956,22 +956,22 @@
     }
 
     @Test()
     public Object[][] test53(Class<?> c1, Class<?> c2, int len, int val) {
         MyValue1[][] va1 = (MyValue1[][])Array.newInstance(MyValue1[].class, len);
-        MyValue1?[][] va2 = (MyValue1?[][])Array.newInstance(MyValue1?[].class, len);
+        MyValue1.ref[][] va2 = (MyValue1.ref[][])Array.newInstance(MyValue1.ref[].class, len);
         Object[][] va3 = (Object[][])Array.newInstance(c1, len);
         Object[][] va4 = (Object[][])Array.newInstance(c2, len);
         for (int i = 0; i < len; ++i) {
             Asserts.assertEQ(va1[i], null);
             Asserts.assertEQ(va2[i], null);
             Asserts.assertEQ(va3[i], null);
             Asserts.assertEQ(va4[i], null);
             va1[i] = new MyValue1[1];
-            va2[i] = new MyValue1?[1];
+            va2[i] = new MyValue1.ref[1];
             va3[i] = new MyValue1[1];
-            va4[i] = new MyValue1?[1];
+            va4[i] = new MyValue1.ref[1];
             Asserts.assertEQ(va1[i][0].hash(), ((MyValue1)va3[i][0]).hash());
             Asserts.assertEQ(va2[i][0], null);
             Asserts.assertEQ(va4[i][0], null);
         }
         Object[][] result;
@@ -994,14 +994,14 @@
     }
 
     @DontCompile
     public void test53_verifier(boolean warmup) {
         int len = Math.abs(rI) % 42;
-        test53(MyValue1[].class, MyValue1?[].class, len, 1);
-        test53(MyValue1[].class, MyValue1?[].class, len, 2);
-        test53(MyValue1[].class, MyValue1?[].class, len, 3);
-        test53(MyValue1[].class, MyValue1?[].class, len, 4);
+        test53(MyValue1[].class, MyValue1.ref[].class, len, 1);
+        test53(MyValue1[].class, MyValue1.ref[].class, len, 2);
+        test53(MyValue1[].class, MyValue1.ref[].class, len, 3);
+        test53(MyValue1[].class, MyValue1.ref[].class, len, 4);
     }
 
     // Test asIndirectType intrinsic with non-value mirror
     @Test()
     public Class<?> test54(Class<?> c) {
@@ -1032,11 +1032,11 @@
         Asserts.assertEQ(result, Integer.class);
     }
 
     // Same as test39 but Unsafe.putInt to buffer is not intrinsified/compiled
     @DontCompile
-    public void test56_callee(MyValue1? v) { // Use ? here to make sure the argument is not scalarized (otherwise larval information is lost)
+    public void test56_callee(MyValue1.ref v) { // Use .ref here to make sure the argument is not scalarized (otherwise larval information is lost)
         U.putInt(v, X_OFFSET, rI);
     }
 
     @Test()
     @Warmup(10000) // Fill up the TLAB to trigger slow path allocation
