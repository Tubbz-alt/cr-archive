diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrayAccessDeopt.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrayAccessDeopt.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrayAccessDeopt.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrayAccessDeopt.java
@@ -41,19 +41,19 @@
 
     public static void test1(Object[] va, Object vt) {
         va[0] = vt;
     }
 
-    public static void test2(Object[] va, MyValue1? vt) {
+    public static void test2(Object[] va, MyValue1.ref vt) {
         va[0] = vt;
     }
 
-    public static void test3(MyValue1?[] va, Object vt) {
-        va[0] = (MyValue1?)vt;
+    public static void test3(MyValue1.ref[] va, Object vt) {
+        va[0] = (MyValue1.ref)vt;
     }
 
-    public static void test4(MyValue1?[] va, MyValue1? vt) {
+    public static void test4(MyValue1.ref[] va, MyValue1.ref vt) {
         va[0] = vt;
     }
 
     public static void test5(Object[] va, MyValue1 vt) {
         va[0] = vt;
@@ -65,23 +65,23 @@
 
     public static void test7(MyValue1[] va, MyValue1 vt) {
         va[0] = vt;
     }
 
-    public static void test8(MyValue1?[] va, MyValue1 vt) {
+    public static void test8(MyValue1.ref[] va, MyValue1 vt) {
         va[0] = vt;
     }
 
-    public static void test9(MyValue1[] va, MyValue1? vt) {
+    public static void test9(MyValue1[] va, MyValue1.ref vt) {
         va[0] = (MyValue1)vt;
     }
 
     public static void test10(Object[] va) {
         va[0] = null;
     }
 
-    public static void test11(MyValue1?[] va) {
+    public static void test11(MyValue1.ref[] va) {
         va[0] = null;
     }
 
     static public void main(String[] args) throws Exception {
         if (args.length == 0) {
@@ -91,11 +91,11 @@
             OutputAnalyzer oa = ProcessTools.executeTestJvm(arg);
             String output = oa.getOutput();
             oa.shouldNotContain("Uncommon trap occurred");
         } else {
             MyValue1[] va = new MyValue1[1];
-            MyValue1?[] vaB = new MyValue1?[1];
+            MyValue1.ref[] vaB = new MyValue1.ref[1];
             MyValue1 vt = new MyValue1();
             for (int i = 0; i < 10_000; ++i) {
                 test1(va, vt);
                 test1(vaB, vt);
                 test1(vaB, null);
