diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConvention.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConvention.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConvention.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestCallingConvention.java
@@ -438,11 +438,11 @@
         MyValue3 vt = test21();
         test21_vt.verify(vt);
     }
 
     // Test returning a non-flattened value type as fields
-    MyValue3? test22_vt = MyValue3.create();
+    MyValue3.ref test22_vt = MyValue3.create();
 
     @Test
     public MyValue3 test22() {
         return (MyValue3) test22_vt;
     }
@@ -490,38 +490,38 @@
         Asserts.assertEQ(res2, res3);
     }
 
     // Should not return a nullable value type as fields
     @Test
-    public MyValue2? test24() {
+    public MyValue2.ref test24() {
         return null;
     }
 
     @DontCompile
     public void test24_verifier(boolean warmup) {
-        MyValue2? vt = test24();
+        MyValue2.ref vt = test24();
         Asserts.assertEQ(vt, null);
     }
 
     // Same as test24 but with control flow and inlining
     @ForceInline
-    public MyValue2? test26_callee(boolean b) {
+    public MyValue2.ref test26_callee(boolean b) {
         if (b) {
             return null;
         } else {
             return MyValue2.createWithFieldsInline(rI, true);
         }
     }
 
     @Test
-    public MyValue2? test26(boolean b) {
+    public MyValue2.ref test26(boolean b) {
         return test26_callee(b);
     }
 
     @DontCompile
     public void test26_verifier(boolean warmup) {
-        MyValue2? vt = test26(true);
+        MyValue2.ref vt = test26(true);
         Asserts.assertEQ(vt, null);
         vt = test26(false);
         Asserts.assertEQ(vt.hash(), MyValue2.createWithFieldsInline(rI, true).hash());
     }
 
@@ -577,11 +577,11 @@
         Test27Value1 val1 = new Test27Value1(val2);
         int result = test27(val1);
         Asserts.assertEQ(result, 8*rI);
     }
 
-    static final MyValue1? test28Val = MyValue1.createWithFieldsDontInline(rI, rL);
+    static final MyValue1.ref test28Val = MyValue1.createWithFieldsDontInline(rI, rL);
 
     @Test
     @Warmup(0)
     public String test28() {
         return test28Val.toString();
