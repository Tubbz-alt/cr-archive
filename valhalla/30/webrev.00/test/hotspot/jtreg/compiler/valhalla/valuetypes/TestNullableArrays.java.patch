diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNullableArrays.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNullableArrays.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNullableArrays.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNullableArrays.java
@@ -78,12 +78,12 @@
     private static final MyValue1 testValue1 = MyValue1.createWithFieldsInline(rI, rL);
 
     // Test nullable value type array creation and initialization
     @Test(valid = ValueTypeArrayFlattenOn, match = { ALLOCA }, matchCount = { 1 })
     @Test(valid = ValueTypeArrayFlattenOff, match = { ALLOCA }, matchCount = { 1 }, failOn = LOAD)
-    public MyValue1?[] test1(int len) {
-        MyValue1?[] va = new MyValue1?[len];
+    public MyValue1.ref[] test1(int len) {
+        MyValue1.ref[] va = new MyValue1.ref[len];
         if (len > 0) {
             va[0] = null;
         }
         for (int i = 1; i < len; ++i) {
             va[i] = MyValue1.createWithFieldsDontInline(rI, rL);
@@ -92,11 +92,11 @@
     }
 
     @DontCompile
     public void test1_verifier(boolean warmup) {
         int len = Math.abs(rI % 10);
-        MyValue1?[] va = test1(len);
+        MyValue1.ref[] va = test1(len);
         if (len > 0) {
             Asserts.assertEQ(va[0], null);
         }
         for (int i = 1; i < len; ++i) {
             Asserts.assertEQ(va[i].hash(), hash());
@@ -106,11 +106,11 @@
     // Test creation of a value type array and element access
     @Test
     // TODO 8227588
     // @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
     public long test2() {
-        MyValue1?[] va = new MyValue1?[1];
+        MyValue1.ref[] va = new MyValue1.ref[1];
         va[0] = MyValue1.createWithFieldsInline(rI, rL);
         return va[0].hash();
     }
 
     @DontCompile
@@ -120,11 +120,11 @@
     }
 
     // Test receiving a value type array from the interpreter,
     // updating its elements in a loop and computing a hash.
     @Test(failOn = ALLOCA)
-    public long test3(MyValue1?[] va) {
+    public long test3(MyValue1.ref[] va) {
         long result = 0;
         for (int i = 0; i < 10; ++i) {
             if (va[i] != null) {
                 result += va[i].hash();
             }
@@ -134,11 +134,11 @@
         return result;
     }
 
     @DontCompile
     public void test3_verifier(boolean warmup) {
-        MyValue1?[] va = new MyValue1?[10];
+        MyValue1.ref[] va = new MyValue1.ref[10];
         long expected = 0;
         for (int i = 1; i < 10; ++i) {
             va[i] = MyValue1.createWithFieldsDontInline(rI + i, rL + i);
             expected += va[i].hash();
         }
@@ -152,17 +152,17 @@
         }
     }
 
     // Test returning a value type array received from the interpreter
     @Test(failOn = ALLOC + ALLOCA + LOAD + STORE + LOOP + TRAP)
-    public MyValue1?[] test4(MyValue1?[] va) {
+    public MyValue1.ref[] test4(MyValue1.ref[] va) {
         return va;
     }
 
     @DontCompile
     public void test4_verifier(boolean warmup) {
-        MyValue1?[] va = new MyValue1?[10];
+        MyValue1.ref[] va = new MyValue1.ref[10];
         for (int i = 0; i < 10; ++i) {
             va[i] = MyValue1.createWithFieldsDontInline(rI + i, rL + i);
         }
         va = test4(va);
         for (int i = 0; i < 10; ++i) {
@@ -170,20 +170,20 @@
         }
     }
 
     // Merge value type arrays created from two branches
     @Test
-    public MyValue1?[] test5(boolean b) {
-        MyValue1?[] va;
+    public MyValue1.ref[] test5(boolean b) {
+        MyValue1.ref[] va;
         if (b) {
-            va = new MyValue1?[5];
+            va = new MyValue1.ref[5];
             for (int i = 0; i < 5; ++i) {
                 va[i] = MyValue1.createWithFieldsInline(rI, rL);
             }
             va[4] = null;
         } else {
-            va = new MyValue1?[10];
+            va = new MyValue1.ref[10];
             for (int i = 0; i < 10; ++i) {
                 va[i] = MyValue1.createWithFieldsInline(rI + i, rL + i);
             }
             va[9] = null;
         }
@@ -196,11 +196,11 @@
         return va;
     }
 
     @DontCompile
     public void test5_verifier(boolean warmup) {
-        MyValue1?[] va = test5(true);
+        MyValue1.ref[] va = test5(true);
         Asserts.assertEQ(va.length, 5);
         Asserts.assertEQ(va[0].hash(), hash(rI, hash()));
         for (int i = 1; i < 4; ++i) {
             Asserts.assertEQ(va[i].hash(), hash());
         }
@@ -214,70 +214,70 @@
         Asserts.assertEQ(va[9], null);
     }
 
     // Test creation of value type array with single element
     @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
-    public MyValue1? test6() {
-        MyValue1?[] va = new MyValue1?[1];
+    public MyValue1.ref test6() {
+        MyValue1.ref[] va = new MyValue1.ref[1];
         return va[0];
     }
 
     @DontCompile
     public void test6_verifier(boolean warmup) {
-        MyValue1?[] va = new MyValue1?[1];
-        MyValue1? v = test6();
+        MyValue1.ref[] va = new MyValue1.ref[1];
+        MyValue1.ref v = test6();
         Asserts.assertEQ(v, null);
     }
 
     // Test default initialization of value type arrays
     @Test(failOn = LOAD)
-    public MyValue1?[] test7(int len) {
-        return new MyValue1?[len];
+    public MyValue1.ref[] test7(int len) {
+        return new MyValue1.ref[len];
     }
 
     @DontCompile
     public void test7_verifier(boolean warmup) {
         int len = Math.abs(rI % 10);
-        MyValue1?[] va = test7(len);
+        MyValue1.ref[] va = test7(len);
         for (int i = 0; i < len; ++i) {
             Asserts.assertEQ(va[i], null);
             va[i] = null;
         }
     }
 
     // Test creation of value type array with zero length
     @Test(failOn = ALLOC + LOAD + STORE + LOOP + TRAP)
-    public MyValue1?[] test8() {
-        return new MyValue1?[0];
+    public MyValue1.ref[] test8() {
+        return new MyValue1.ref[0];
     }
 
     @DontCompile
     public void test8_verifier(boolean warmup) {
-        MyValue1?[] va = test8();
+        MyValue1.ref[] va = test8();
         Asserts.assertEQ(va.length, 0);
     }
 
-    static MyValue1?[] test9_va;
+    static MyValue1.ref[] test9_va;
 
     // Test that value type array loaded from field has correct type
     @Test(failOn = LOOP)
     public long test9() {
         return test9_va[0].hash();
     }
 
     @DontCompile
     public void test9_verifier(boolean warmup) {
-        test9_va = new MyValue1?[1];
+        test9_va = new MyValue1.ref[1];
         test9_va[0] = testValue1;
         long result = test9();
         Asserts.assertEQ(result, hash());
     }
 
     // Multi-dimensional arrays
     @Test
-    public MyValue1?[][][] test10(int len1, int len2, int len3) {
-        MyValue1?[][][] arr = new MyValue1?[len1][len2][len3];
+    public MyValue1.ref[][][] test10(int len1, int len2, int len3) {
+        MyValue1.ref[][][] arr = new MyValue1.ref[len1][len2][len3];
         for (int i = 0; i < len1; i++) {
             for (int j = 0; j < len2; j++) {
                 for (int k = 0; k < len3; k++) {
                     arr[i][j][k] = MyValue1.createWithFieldsDontInline(rI + i , rL + j + k);
                     if (k == 0) {
@@ -289,11 +289,11 @@
         return arr;
     }
 
     @DontCompile
     public void test10_verifier(boolean warmup) {
-        MyValue1?[][][] arr = test10(2, 3, 4);
+        MyValue1.ref[][][] arr = test10(2, 3, 4);
         for (int i = 0; i < 2; i++) {
             for (int j = 0; j < 3; j++) {
                 for (int k = 0; k < 4; k++) {
                     if (k == 0) {
                         Asserts.assertEQ(arr[i][j][k], null);
@@ -305,11 +305,11 @@
             }
         }
     }
 
     @Test
-    public void test11(MyValue1?[][][] arr, long[] res) {
+    public void test11(MyValue1.ref[][][] arr, long[] res) {
         int l = 0;
         for (int i = 0; i < arr.length; i++) {
             for (int j = 0; j < arr[i].length; j++) {
                 for (int k = 0; k < arr[i][j].length; k++) {
                     if (arr[i][j][k] != null) {
@@ -322,11 +322,11 @@
         }
     }
 
     @DontCompile
     public void test11_verifier(boolean warmup) {
-        MyValue1?[][][] arr = new MyValue1?[2][3][4];
+        MyValue1.ref[][][] arr = new MyValue1.ref[2][3][4];
         long[] res = new long[2*3*4];
         long[] verif = new long[2*3*4];
         int l = 0;
         for (int i = 0; i < 2; i++) {
             for (int j = 0; j < 3; j++) {
@@ -347,11 +347,11 @@
 
     // Array load out of bounds (upper bound) at compile time
     @Test
     public int test12() {
         int arraySize = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[arraySize];
+        MyValue1.ref[] va = new MyValue1.ref[arraySize];
 
         for (int i = 0; i < arraySize; i++) {
             va[i] = MyValue1.createWithFieldsDontInline(rI + 1, rL);
         }
 
@@ -368,11 +368,11 @@
 
     // Array load  out of bounds (lower bound) at compile time
     @Test
     public int test13() {
         int arraySize = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[arraySize];
+        MyValue1.ref[] va = new MyValue1.ref[arraySize];
 
         for (int i = 0; i < arraySize; i++) {
             va[i] = MyValue1.createWithFieldsDontInline(rI + i, rL);
         }
 
@@ -387,17 +387,17 @@
         Asserts.assertEQ(test13(), rI);
     }
 
     // Array load out of bound not known to compiler (both lower and upper bound)
     @Test
-    public int test14(MyValue1?[] va, int index)  {
+    public int test14(MyValue1.ref[] va, int index)  {
         return va[index].x;
     }
 
     public void test14_verifier(boolean warmup) {
         int arraySize = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[arraySize];
+        MyValue1.ref[] va = new MyValue1.ref[arraySize];
 
         for (int i = 0; i < arraySize; i++) {
             va[i] = MyValue1.createWithFieldsDontInline(rI, rL);
         }
 
@@ -414,11 +414,11 @@
 
     // Array store out of bounds (upper bound) at compile time
     @Test
     public int test15() {
         int arraySize = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[arraySize];
+        MyValue1.ref[] va = new MyValue1.ref[arraySize];
 
         try {
             for (int i = 0; i <= arraySize; i++) {
                 va[i] = MyValue1.createWithFieldsDontInline(rI + 1, rL);
             }
@@ -434,11 +434,11 @@
 
     // Array store out of bounds (lower bound) at compile time
     @Test
     public int test16() {
         int arraySize = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[arraySize];
+        MyValue1.ref[] va = new MyValue1.ref[arraySize];
 
         try {
             for (int i = -1; i <= arraySize; i++) {
                 va[i] = MyValue1.createWithFieldsDontInline(rI + 1, rL);
             }
@@ -452,19 +452,19 @@
         Asserts.assertEQ(test16(), rI);
     }
 
     // Array store out of bound not known to compiler (both lower and upper bound)
     @Test
-    public int test17(MyValue1?[] va, int index, MyValue1 vt)  {
+    public int test17(MyValue1.ref[] va, int index, MyValue1 vt)  {
         va[index] = vt;
         return va[index].x;
     }
 
     @DontCompile
     public void test17_verifier(boolean warmup) {
         int arraySize = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[arraySize];
+        MyValue1.ref[] va = new MyValue1.ref[arraySize];
 
         for (int i = 0; i < arraySize; i++) {
             va[i] = MyValue1.createWithFieldsDontInline(rI, rL);
         }
 
@@ -484,86 +484,86 @@
         }
     }
 
     // clone() as stub call
     @Test
-    public MyValue1?[] test18(MyValue1?[] va) {
+    public MyValue1.ref[] test18(MyValue1.ref[] va) {
         return va.clone();
     }
 
     @DontCompile
     public void test18_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] va1 = new MyValue1?[len];
+        MyValue1.ref[] va1 = new MyValue1.ref[len];
         MyValue1[]  va2 = new MyValue1[len];
         for (int i = 1; i < len; ++i) {
             va1[i] = testValue1;
             va2[i] = testValue1;
         }
-        MyValue1?[] result1 = test18(va1);
+        MyValue1.ref[] result1 = test18(va1);
         if (len > 0) {
             Asserts.assertEQ(result1[0], null);
         }
         for (int i = 1; i < len; ++i) {
             Asserts.assertEQ(result1[i].hash(), va1[i].hash());
         }
         // make sure we do deopt: GraphKit::new_array assumes an
         // array of references
         for (int j = 0; j < 10; j++) {
-            MyValue1?[] result2 = test18(va2);
+            MyValue1.ref[] result2 = test18(va2);
 
             for (int i = 0; i < len; ++i) {
                 Asserts.assertEQ(result2[i].hash(), va2[i].hash());
             }
         }
         if (compile_and_run_again_if_deoptimized(warmup, "TestNullableArrays::test18")) {
-            MyValue1?[] result2 = test18(va2);
+            MyValue1.ref[] result2 = test18(va2);
             for (int i = 0; i < len; ++i) {
                 Asserts.assertEQ(result2[i].hash(), va2[i].hash());
             }
         }
     }
 
     // clone() as series of loads/stores
-    static MyValue1?[] test19_orig = null;
+    static MyValue1.ref[] test19_orig = null;
 
     @Test
-    public MyValue1?[] test19() {
-        MyValue1?[] va = new MyValue1?[8];
+    public MyValue1.ref[] test19() {
+        MyValue1.ref[] va = new MyValue1.ref[8];
         for (int i = 1; i < va.length; ++i) {
             va[i] = MyValue1.createWithFieldsInline(rI, rL);
         }
         test19_orig = va;
 
         return va.clone();
     }
 
     @DontCompile
     public void test19_verifier(boolean warmup) {
-        MyValue1?[] result = test19();
+        MyValue1.ref[] result = test19();
         Asserts.assertEQ(result[0], null);
         for (int i = 1; i < test19_orig.length; ++i) {
             Asserts.assertEQ(result[i].hash(), test19_orig[i].hash());
         }
     }
 
     // arraycopy() of value type array with oop fields
     @Test
-    public void test20(MyValue1?[] src, MyValue1?[] dst) {
+    public void test20(MyValue1.ref[] src, MyValue1.ref[] dst) {
         System.arraycopy(src, 0, dst, 0, src.length);
     }
 
     @DontCompile
     public void test20_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] src1 = new MyValue1?[len];
-        MyValue1?[] src2 = new MyValue1?[len];
+        MyValue1.ref[] src1 = new MyValue1.ref[len];
+        MyValue1.ref[] src2 = new MyValue1.ref[len];
         MyValue1[]  src3 = new MyValue1[len];
         MyValue1[]  src4 = new MyValue1[len];
-        MyValue1?[] dst1 = new MyValue1?[len];
+        MyValue1.ref[] dst1 = new MyValue1.ref[len];
         MyValue1[]  dst2 = new MyValue1[len];
-        MyValue1?[] dst3 = new MyValue1?[len];
+        MyValue1.ref[] dst3 = new MyValue1.ref[len];
         MyValue1[]  dst4 = new MyValue1[len];
         if (len > 0) {
             src2[0] = testValue1;
         }
         for (int i = 1; i < len; ++i) {
@@ -590,24 +590,24 @@
         }
     }
 
     // arraycopy() of value type array with no oop field
     @Test
-    public void test21(MyValue2?[] src, MyValue2?[] dst) {
+    public void test21(MyValue2.ref[] src, MyValue2.ref[] dst) {
         System.arraycopy(src, 0, dst, 0, src.length);
     }
 
     @DontCompile
     public void test21_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue2?[] src1 = new MyValue2?[len];
-        MyValue2?[] src2 = new MyValue2?[len];
+        MyValue2.ref[] src1 = new MyValue2.ref[len];
+        MyValue2.ref[] src2 = new MyValue2.ref[len];
         MyValue2[]  src3 = new MyValue2[len];
         MyValue2[]  src4 = new MyValue2[len];
-        MyValue2?[] dst1 = new MyValue2?[len];
+        MyValue2.ref[] dst1 = new MyValue2.ref[len];
         MyValue2[]  dst2 = new MyValue2[len];
-        MyValue2?[] dst3 = new MyValue2?[len];
+        MyValue2.ref[] dst3 = new MyValue2.ref[len];
         MyValue2[]  dst4 = new MyValue2[len];
         if (len > 0) {
             src2[0] = MyValue2.createWithFieldsInline(rI, true);
         }
         for (int i = 1; i < len; ++i) {
@@ -635,27 +635,27 @@
     }
 
     // arraycopy() of value type array with oop field and tightly
     // coupled allocation as dest
     @Test
-    public MyValue1?[] test22(MyValue1?[] src) {
-        MyValue1?[] dst = new MyValue1?[src.length];
+    public MyValue1.ref[] test22(MyValue1.ref[] src) {
+        MyValue1.ref[] dst = new MyValue1.ref[src.length];
         System.arraycopy(src, 0, dst, 0, src.length);
         return dst;
     }
 
     @DontCompile
     public void test22_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] src1 = new MyValue1?[len];
+        MyValue1.ref[] src1 = new MyValue1.ref[len];
         MyValue1[]  src2 = new MyValue1[len];
         for (int i = 1; i < len; ++i) {
             src1[i] = testValue1;
             src2[i] = testValue1;
         }
-        MyValue1?[] dst1 = test22(src1);
-        MyValue1?[] dst2 = test22(src2);
+        MyValue1.ref[] dst1 = test22(src1);
+        MyValue1.ref[] dst2 = test22(src2);
         if (len > 0) {
             Asserts.assertEQ(dst1[0], null);
             Asserts.assertEQ(dst2[0].hash(), MyValue1.default.hash());
         }
         for (int i = 1; i < len; ++i) {
@@ -665,27 +665,27 @@
     }
 
     // arraycopy() of value type array with oop fields and tightly
     // coupled allocation as dest
     @Test
-    public MyValue1?[] test23(MyValue1?[] src) {
-        MyValue1?[] dst = new MyValue1?[src.length + 10];
+    public MyValue1.ref[] test23(MyValue1.ref[] src) {
+        MyValue1.ref[] dst = new MyValue1.ref[src.length + 10];
         System.arraycopy(src, 0, dst, 5, src.length);
         return dst;
     }
 
     @DontCompile
     public void test23_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] src1 = new MyValue1?[len];
+        MyValue1.ref[] src1 = new MyValue1.ref[len];
         MyValue1[] src2 = new MyValue1[len];
         for (int i = 0; i < len; ++i) {
             src1[i] = testValue1;
             src2[i] = testValue1;
         }
-        MyValue1?[] dst1 = test23(src1);
-        MyValue1?[] dst2 = test23(src2);
+        MyValue1.ref[] dst1 = test23(src1);
+        MyValue1.ref[] dst2 = test23(src2);
         for (int i = 0; i < 5; ++i) {
             Asserts.assertEQ(dst1[i], null);
             Asserts.assertEQ(dst2[i], null);
         }
         for (int i = 5; i < len; ++i) {
@@ -694,24 +694,24 @@
         }
     }
 
     // arraycopy() of value type array passed as Object
     @Test
-    public void test24(MyValue1?[] src, Object dst) {
+    public void test24(MyValue1.ref[] src, Object dst) {
         System.arraycopy(src, 0, dst, 0, src.length);
     }
 
     @DontCompile
     public void test24_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] src1 = new MyValue1?[len];
-        MyValue1?[] src2 = new MyValue1?[len];
+        MyValue1.ref[] src1 = new MyValue1.ref[len];
+        MyValue1.ref[] src2 = new MyValue1.ref[len];
         MyValue1[]  src3 = new MyValue1[len];
         MyValue1[]  src4 = new MyValue1[len];
-        MyValue1?[] dst1 = new MyValue1?[len];
+        MyValue1.ref[] dst1 = new MyValue1.ref[len];
         MyValue1[]  dst2 = new MyValue1[len];
-        MyValue1?[] dst3 = new MyValue1?[len];
+        MyValue1.ref[] dst3 = new MyValue1.ref[len];
         MyValue1[]  dst4 = new MyValue1[len];
         if (len > 0) {
             src2[0] = testValue1;
         }
         for (int i = 1; i < len; ++i) {
@@ -738,23 +738,23 @@
         }
     }
 
     // short arraycopy() with no oop field
     @Test
-    public void test25(MyValue2?[] src, MyValue2?[] dst) {
+    public void test25(MyValue2.ref[] src, MyValue2.ref[] dst) {
         System.arraycopy(src, 0, dst, 0, 8);
     }
 
     @DontCompile
     public void test25_verifier(boolean warmup) {
-        MyValue2?[] src1 = new MyValue2?[8];
-        MyValue2?[] src2 = new MyValue2?[8];
+        MyValue2.ref[] src1 = new MyValue2.ref[8];
+        MyValue2.ref[] src2 = new MyValue2.ref[8];
         MyValue2[]  src3 = new MyValue2[8];
         MyValue2[]  src4 = new MyValue2[8];
-        MyValue2?[] dst1 = new MyValue2?[8];
+        MyValue2.ref[] dst1 = new MyValue2.ref[8];
         MyValue2[]  dst2 = new MyValue2[8];
-        MyValue2?[] dst3 = new MyValue2?[8];
+        MyValue2.ref[] dst3 = new MyValue2.ref[8];
         MyValue2[]  dst4 = new MyValue2[8];
         src2[0] = MyValue2.createWithFieldsInline(rI, true);
         for (int i = 1; i < 8; ++i) {
             src1[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
             src2[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
@@ -777,23 +777,23 @@
         }
     }
 
     // short arraycopy() with oop fields
     @Test
-    public void test26(MyValue1?[] src, MyValue1?[] dst) {
+    public void test26(MyValue1.ref[] src, MyValue1.ref[] dst) {
         System.arraycopy(src, 0, dst, 0, 8);
     }
 
     @DontCompile
     public void test26_verifier(boolean warmup) {
-        MyValue1?[] src1 = new MyValue1?[8];
-        MyValue1?[] src2 = new MyValue1?[8];
+        MyValue1.ref[] src1 = new MyValue1.ref[8];
+        MyValue1.ref[] src2 = new MyValue1.ref[8];
         MyValue1[]  src3 = new MyValue1[8];
         MyValue1[]  src4 = new MyValue1[8];
-        MyValue1?[] dst1 = new MyValue1?[8];
+        MyValue1.ref[] dst1 = new MyValue1.ref[8];
         MyValue1[]  dst2 = new MyValue1[8];
-        MyValue1?[] dst3 = new MyValue1?[8];
+        MyValue1.ref[] dst3 = new MyValue1.ref[8];
         MyValue1[]  dst4 = new MyValue1[8];
         src2[0] = testValue1;
         for (int i = 1; i < 8 ; ++i) {
             src1[i] = testValue1;
             src2[i] = testValue1;
@@ -816,23 +816,23 @@
         }
     }
 
     // short arraycopy() with oop fields and offsets
     @Test
-    public void test27(MyValue1?[] src, MyValue1?[] dst) {
+    public void test27(MyValue1.ref[] src, MyValue1.ref[] dst) {
         System.arraycopy(src, 1, dst, 2, 6);
     }
 
     @DontCompile
     public void test27_verifier(boolean warmup) {
-        MyValue1?[] src1 = new MyValue1?[8];
-        MyValue1?[] src2 = new MyValue1?[8];
+        MyValue1.ref[] src1 = new MyValue1.ref[8];
+        MyValue1.ref[] src2 = new MyValue1.ref[8];
         MyValue1[]  src3 = new MyValue1[8];
         MyValue1[]  src4 = new MyValue1[8];
-        MyValue1?[] dst1 = new MyValue1?[8];
+        MyValue1.ref[] dst1 = new MyValue1.ref[8];
         MyValue1[]  dst2 = new MyValue1[8];
-        MyValue1?[] dst3 = new MyValue1?[8];
+        MyValue1.ref[] dst3 = new MyValue1.ref[8];
         MyValue1[]  dst4 = new MyValue1[8];
         for (int i = 1; i < 8; ++i) {
             src1[i] = testValue1;
             src2[i] = testValue1;
             src3[i] = testValue1;
@@ -858,70 +858,70 @@
 
     // non escaping allocations
     // TODO ZGC does not support the clone intrinsic, remove this once JDK-8232896 is fixed
     @Test(valid = ZGCOff, failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
     @Test(valid = ZGCOn)
-    public MyValue2? test28() {
-        MyValue2?[] src = new MyValue2?[10];
+    public MyValue2.ref test28() {
+        MyValue2.ref[] src = new MyValue2.ref[10];
         src[0] = null;
-        MyValue2?[] dst = (MyValue2?[])src.clone();
+        MyValue2.ref[] dst = (MyValue2.ref[])src.clone();
         return dst[0];
     }
 
     @DontCompile
     public void test28_verifier(boolean warmup) {
         MyValue2 v = MyValue2.createWithFieldsInline(rI, false);
-        MyValue2? result = test28();
+        MyValue2.ref result = test28();
         Asserts.assertEQ(result, null);
     }
 
     // non escaping allocations
     // TODO 8227588: shouldn't this have the same IR matching rules as test6?
     @Test(failOn = ALLOCA + LOOP + TRAP)
-    public MyValue2? test29(MyValue2?[] src) {
-        MyValue2?[] dst = new MyValue2?[10];
+    public MyValue2.ref test29(MyValue2.ref[] src) {
+        MyValue2.ref[] dst = new MyValue2.ref[10];
         System.arraycopy(src, 0, dst, 0, 10);
         return dst[0];
     }
 
     @DontCompile
     public void test29_verifier(boolean warmup) {
-        MyValue2?[] src = new MyValue2?[10];
+        MyValue2.ref[] src = new MyValue2.ref[10];
         for (int i = 0; i < 10; ++i) {
             src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
         }
-        MyValue2? v = test29(src);
+        MyValue2.ref v = test29(src);
         Asserts.assertEQ(src[0].hash(), v.hash());
     }
 
     // non escaping allocation with uncommon trap that needs
     // eliminated value type array element as debug info
     @Test
     @Warmup(10000)
-    public MyValue2? test30(MyValue2?[] src, boolean flag) {
-        MyValue2?[] dst = new MyValue2?[10];
+    public MyValue2.ref test30(MyValue2.ref[] src, boolean flag) {
+        MyValue2.ref[] dst = new MyValue2.ref[10];
         System.arraycopy(src, 0, dst, 0, 10);
         if (flag) { }
         return dst[0];
     }
 
     @DontCompile
     public void test30_verifier(boolean warmup) {
-        MyValue2?[] src = new MyValue2?[10];
+        MyValue2.ref[] src = new MyValue2.ref[10];
         for (int i = 0; i < 10; ++i) {
             src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
         }
-        MyValue2? v = test30(src, !warmup);
+        MyValue2.ref v = test30(src, !warmup);
         Asserts.assertEQ(src[0].hash(), v.hash());
     }
 
     // non escaping allocation with memory phi
     @Test()
     // TODO 8227588
     // @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
     public long test31(boolean b, boolean deopt) {
-        MyValue2?[] src = new MyValue2?[1];
+        MyValue2.ref[] src = new MyValue2.ref[1];
         if (b) {
             src[0] = MyValue2.createWithFieldsInline(rI, true);
         } else {
             src[0] = MyValue2.createWithFieldsInline(rI, false);
         }
@@ -950,18 +950,18 @@
     }
 
     @DontCompile
     public void test32_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] va1 = new MyValue1?[len];
+        MyValue1.ref[] va1 = new MyValue1.ref[len];
         MyValue1[] va2 = new MyValue1[len];
         for (int i = 1; i < len; ++i) {
             va1[i] = testValue1;
             va2[i] = testValue1;
         }
-        MyValue1?[] result1 = (MyValue1?[])test32(va1);
-        MyValue1?[] result2 = (MyValue1?[])test32(va2);
+        MyValue1.ref[] result1 = (MyValue1.ref[])test32(va1);
+        MyValue1.ref[] result2 = (MyValue1.ref[])test32(va2);
         if (len > 0) {
             Asserts.assertEQ(result1[0], null);
             Asserts.assertEQ(result2[0].hash(), MyValue1.default.hash());
         }
         for (int i = 1; i < len; ++i) {
@@ -993,11 +993,11 @@
 
     @ForceInline
     public Object[] test34_helper(boolean flag) {
         Object[] va = null;
         if (flag) {
-            va = new MyValue1?[8];
+            va = new MyValue1.ref[8];
             for (int i = 0; i < va.length; ++i) {
                 va[i] = MyValue1.createWithFieldsDontInline(rI, rL);
             }
         } else {
             va = new Object[8];
@@ -1033,41 +1033,41 @@
                 Asserts.assertEQ(dst[i], null);
             }
         }
     }
 
-    static void verify(MyValue1?[] src, MyValue1?[] dst) {
+    static void verify(MyValue1.ref[] src, MyValue1.ref[] dst) {
         for (int i = 0; i < src.length; ++i) {
             if (src[i] != null) {
                 Asserts.assertEQ(src[i].hash(), dst[i].hash());
             } else {
                 Asserts.assertEQ(dst[i], null);
             }
         }
     }
 
-    static void verify(MyValue1?[] src, Object[] dst) {
+    static void verify(MyValue1.ref[] src, Object[] dst) {
         for (int i = 0; i < src.length; ++i) {
             if (src[i] != null) {
                 Asserts.assertEQ(src[i].hash(), ((MyInterface)dst[i]).hash());
             } else {
                 Asserts.assertEQ(dst[i], null);
             }
         }
     }
 
-    static void verify(MyValue2?[] src, MyValue2?[] dst) {
+    static void verify(MyValue2.ref[] src, MyValue2.ref[] dst) {
         for (int i = 0; i < src.length; ++i) {
             if (src[i] != null) {
                 Asserts.assertEQ(src[i].hash(), dst[i].hash());
             } else {
                 Asserts.assertEQ(dst[i], null);
             }
         }
     }
 
-    static void verify(MyValue2?[] src, Object[] dst) {
+    static void verify(MyValue2.ref[] src, Object[] dst) {
         for (int i = 0; i < src.length; ++i) {
             if (src[i] != null) {
                 Asserts.assertEQ(src[i].hash(), ((MyInterface)dst[i]).hash());
             } else {
                 Asserts.assertEQ(dst[i], null);
@@ -1096,12 +1096,12 @@
     }
 
     @DontCompile
     public void test35_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] src = new MyValue1?[len];
-        MyValue1?[] dst = new MyValue1?[len];
+        MyValue1.ref[] src = new MyValue1.ref[len];
+        MyValue1.ref[] dst = new MyValue1.ref[len];
         for (int i = 1; i < len; ++i) {
             src[i] = testValue1;
         }
         test35(src, dst, src.length);
         verify(src, dst);
@@ -1110,19 +1110,19 @@
             verify(src, dst);
         }
     }
 
     @Test
-    public void test36(Object src, MyValue2?[] dst) {
+    public void test36(Object src, MyValue2.ref[] dst) {
         System.arraycopy(src, 0, dst, 0, dst.length);
     }
 
     @DontCompile
     public void test36_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue2?[] src = new MyValue2?[len];
-        MyValue2?[] dst = new MyValue2?[len];
+        MyValue2.ref[] src = new MyValue2.ref[len];
+        MyValue2.ref[] dst = new MyValue2.ref[len];
         for (int i = 1; i < len; ++i) {
             src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
         }
         test36(src, dst);
         verify(src, dst);
@@ -1131,19 +1131,19 @@
             verify(src, dst);
         }
     }
 
     @Test
-    public void test37(MyValue2?[] src, Object dst) {
+    public void test37(MyValue2.ref[] src, Object dst) {
         System.arraycopy(src, 0, dst, 0, src.length);
     }
 
     @DontCompile
     public void test37_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue2?[] src = new MyValue2?[len];
-        MyValue2?[] dst = new MyValue2?[len];
+        MyValue2.ref[] src = new MyValue2.ref[len];
+        MyValue2.ref[] dst = new MyValue2.ref[len];
         for (int i = 1; i < len; ++i) {
             src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
         }
         test37(src, dst);
         verify(src, dst);
@@ -1153,19 +1153,19 @@
         }
     }
 
     @Test
     @Warmup(1) // Avoid early compilation
-    public void test38(Object src, MyValue2?[] dst) {
+    public void test38(Object src, MyValue2.ref[] dst) {
         System.arraycopy(src, 0, dst, 0, dst.length);
     }
 
     @DontCompile
     public void test38_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         Object[] src = new Object[len];
-        MyValue2?[] dst = new MyValue2?[len];
+        MyValue2.ref[] dst = new MyValue2.ref[len];
         for (int i = 1; i < len; ++i) {
             src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
         }
         test38(src, dst);
         verify(dst, src);
@@ -1180,18 +1180,18 @@
             }
         }
     }
 
     @Test
-    public void test39(MyValue2?[] src, Object dst) {
+    public void test39(MyValue2.ref[] src, Object dst) {
         System.arraycopy(src, 0, dst, 0, src.length);
     }
 
     @DontCompile
     public void test39_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue2?[] src = new MyValue2?[len];
+        MyValue2.ref[] src = new MyValue2.ref[len];
         Object[] dst = new Object[len];
         for (int i = 1; i < len; ++i) {
             src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
         }
         test39(src, dst);
@@ -1210,11 +1210,11 @@
 
     @DontCompile
     public void test40_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         Object[] src = new Object[len];
-        MyValue2?[] dst = new MyValue2?[len];
+        MyValue2.ref[] dst = new MyValue2.ref[len];
         for (int i = 1; i < len; ++i) {
             src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
         }
         test40(src, dst);
         verify(dst, src);
@@ -1236,11 +1236,11 @@
     }
 
     @DontCompile
     public void test41_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue2?[] src = new MyValue2?[len];
+        MyValue2.ref[] src = new MyValue2.ref[len];
         Object[] dst = new Object[len];
         for (int i = 1; i < len; ++i) {
             src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
         }
         test41(src, dst);
@@ -1280,12 +1280,12 @@
         System.arraycopy(src, 0, dst, 0, 8);
     }
 
     @DontCompile
     public void test43_verifier(boolean warmup) {
-        MyValue1?[] src = new MyValue1?[8];
-        MyValue1?[] dst = new MyValue1?[8];
+        MyValue1.ref[] src = new MyValue1.ref[8];
+        MyValue1.ref[] dst = new MyValue1.ref[8];
         for (int i = 1; i < 8; ++i) {
             src[i] = testValue1;
         }
         test43(src, dst);
         verify(src, dst);
@@ -1294,18 +1294,18 @@
             verify(src, dst);
         }
     }
 
     @Test
-    public void test44(Object src, MyValue2?[] dst) {
+    public void test44(Object src, MyValue2.ref[] dst) {
         System.arraycopy(src, 0, dst, 0, 8);
     }
 
     @DontCompile
     public void test44_verifier(boolean warmup) {
-        MyValue2?[] src = new MyValue2?[8];
-        MyValue2?[] dst = new MyValue2?[8];
+        MyValue2.ref[] src = new MyValue2.ref[8];
+        MyValue2.ref[] dst = new MyValue2.ref[8];
         for (int i = 1; i < 8; ++i) {
             src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
         }
         test44(src, dst);
         verify(src, dst);
@@ -1314,18 +1314,18 @@
             verify(src, dst);
         }
     }
 
     @Test
-    public void test45(MyValue2?[] src, Object dst) {
+    public void test45(MyValue2.ref[] src, Object dst) {
         System.arraycopy(src, 0, dst, 0, 8);
     }
 
     @DontCompile
     public void test45_verifier(boolean warmup) {
-        MyValue2?[] src = new MyValue2?[8];
-        MyValue2?[] dst = new MyValue2?[8];
+        MyValue2.ref[] src = new MyValue2.ref[8];
+        MyValue2.ref[] dst = new MyValue2.ref[8];
         for (int i = 1; i < 8; ++i) {
             src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
         }
         test45(src, dst);
         verify(src, dst);
@@ -1335,18 +1335,18 @@
         }
     }
 
     @Test
     @Warmup(1) // Avoid early compilation
-    public void test46(Object[] src, MyValue2?[] dst) {
+    public void test46(Object[] src, MyValue2.ref[] dst) {
         System.arraycopy(src, 0, dst, 0, 8);
     }
 
     @DontCompile
     public void test46_verifier(boolean warmup) {
         Object[] src = new Object[8];
-        MyValue2?[] dst = new MyValue2?[8];
+        MyValue2.ref[] dst = new MyValue2.ref[8];
         for (int i = 1; i < 8; ++i) {
             src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
         }
         test46(src, dst);
         verify(dst, src);
@@ -1361,17 +1361,17 @@
             }
         }
     }
 
     @Test
-    public void test47(MyValue2?[] src, Object[] dst) {
+    public void test47(MyValue2.ref[] src, Object[] dst) {
         System.arraycopy(src, 0, dst, 0, 8);
     }
 
     @DontCompile
     public void test47_verifier(boolean warmup) {
-        MyValue2?[] src = new MyValue2?[8];
+        MyValue2.ref[] src = new MyValue2.ref[8];
         Object[] dst = new Object[8];
         for (int i = 1; i < 8; ++i) {
             src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
         }
         test47(src, dst);
@@ -1389,11 +1389,11 @@
     }
 
     @DontCompile
     public void test48_verifier(boolean warmup) {
         Object[] src = new Object[8];
-        MyValue2?[] dst = new MyValue2?[8];
+        MyValue2.ref[] dst = new MyValue2.ref[8];
         for (int i = 1; i < 8; ++i) {
             src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
         }
         test48(src, dst);
         verify(dst, src);
@@ -1414,11 +1414,11 @@
         System.arraycopy(src, 0, dst, 0, 8);
     }
 
     @DontCompile
     public void test49_verifier(boolean warmup) {
-        MyValue2?[] src = new MyValue2?[8];
+        MyValue2.ref[] src = new MyValue2.ref[8];
         Object[] dst = new Object[8];
         for (int i = 1; i < 8; ++i) {
             src[i] = MyValue2.createWithFieldsInline(rI, (i % 2) == 0);
         }
         test49(src, dst);
@@ -1450,66 +1450,66 @@
             }
         }
     }
 
     @Test
-    public MyValue1?[] test51(MyValue1?[] va) {
-        return Arrays.copyOf(va, va.length, MyValue1?[].class);
+    public MyValue1.ref[] test51(MyValue1.ref[] va) {
+        return Arrays.copyOf(va, va.length, MyValue1.ref[].class);
     }
 
     @DontCompile
     public void test51_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[len];
+        MyValue1.ref[] va = new MyValue1.ref[len];
         for (int i = 1; i < len; ++i) {
             va[i] = testValue1;
         }
-        MyValue1?[] result = test51(va);
+        MyValue1.ref[] result = test51(va);
         verify(va, result);
     }
 
-    static final MyValue1?[] test52_va = new MyValue1?[8];
+    static final MyValue1.ref[] test52_va = new MyValue1.ref[8];
 
     @Test
-    public MyValue1?[] test52() {
-        return Arrays.copyOf(test52_va, 8, MyValue1?[].class);
+    public MyValue1.ref[] test52() {
+        return Arrays.copyOf(test52_va, 8, MyValue1.ref[].class);
     }
 
     @DontCompile
     public void test52_verifier(boolean warmup) {
         for (int i = 1; i < 8; ++i) {
             test52_va[i] = testValue1;
         }
-        MyValue1?[] result = test52();
+        MyValue1.ref[] result = test52();
         verify(test52_va, result);
     }
 
     @Test
-    public MyValue1?[] test53(Object[] va) {
-        return Arrays.copyOf(va, va.length, MyValue1?[].class);
+    public MyValue1.ref[] test53(Object[] va) {
+        return Arrays.copyOf(va, va.length, MyValue1.ref[].class);
     }
 
     @DontCompile
     public void test53_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[len];
+        MyValue1.ref[] va = new MyValue1.ref[len];
         for (int i = 1; i < len; ++i) {
             va[i] = testValue1;
         }
-        MyValue1?[] result = test53(va);
+        MyValue1.ref[] result = test53(va);
         verify(result, va);
     }
 
     @Test
-    public Object[] test54(MyValue1?[] va) {
+    public Object[] test54(MyValue1.ref[] va) {
         return Arrays.copyOf(va, va.length, Object[].class);
     }
 
     @DontCompile
     public void test54_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[len];
+        MyValue1.ref[] va = new MyValue1.ref[len];
         for (int i = 1; i < len; ++i) {
             va[i] = testValue1;
         }
         Object[] result = test54(va);
         verify(va, result);
@@ -1521,31 +1521,31 @@
     }
 
     @DontCompile
     public void test55_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[len];
+        MyValue1.ref[] va = new MyValue1.ref[len];
         for (int i = 1; i < len; ++i) {
             va[i] = testValue1;
         }
         Object[] result = test55(va);
         verify(va, result);
     }
 
     @Test
-    public MyValue1?[] test56(Object[] va) {
-        return Arrays.copyOf(va, va.length, MyValue1?[].class);
+    public MyValue1.ref[] test56(Object[] va) {
+        return Arrays.copyOf(va, va.length, MyValue1.ref[].class);
     }
 
     @DontCompile
     public void test56_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
         Object[] va = new Object[len];
         for (int i = 1; i < len; ++i) {
             va[i] = testValue1;
         }
-        MyValue1?[] result = test56(va);
+        MyValue1.ref[] result = test56(va);
         verify(result, va);
     }
 
    @Test
     public Object[] test57(Object[] va, Class klass) {
@@ -1553,50 +1553,50 @@
     }
 
     @DontCompile
     public void test57_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        Object[] va = new MyValue1?[len];
+        Object[] va = new MyValue1.ref[len];
         for (int i = 1; i < len; ++i) {
             va[i] = testValue1;
         }
-        Object[] result = test57(va, MyValue1?[].class);
+        Object[] result = test57(va, MyValue1.ref[].class);
         verify(va, result);
     }
 
     @Test
-    public Object[] test58(MyValue1?[] va, Class klass) {
+    public Object[] test58(MyValue1.ref[] va, Class klass) {
         return Arrays.copyOf(va, va.length, klass);
     }
 
     @DontCompile
     public void test58_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[len];
+        MyValue1.ref[] va = new MyValue1.ref[len];
         for (int i = 1; i < len; ++i) {
             va[i] = testValue1;
         }
         for (int i = 1; i < 10; i++) {
-            Object[] result = test58(va, MyValue1?[].class);
+            Object[] result = test58(va, MyValue1.ref[].class);
             verify(va, result);
         }
         if (compile_and_run_again_if_deoptimized(warmup, "TestNullableArrays::test58")) {
-            Object[] result = test58(va, MyValue1?[].class);
+            Object[] result = test58(va, MyValue1.ref[].class);
             verify(va, result);
         }
     }
 
     @Test
-    public Object[] test59(MyValue1?[] va) {
-        return Arrays.copyOf(va, va.length+1, MyValue1?[].class);
+    public Object[] test59(MyValue1.ref[] va) {
+        return Arrays.copyOf(va, va.length+1, MyValue1.ref[].class);
     }
 
     @DontCompile
     public void test59_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[len];
-        MyValue1?[] verif = new MyValue1?[len+1];
+        MyValue1.ref[] va = new MyValue1.ref[len];
+        MyValue1.ref[] verif = new MyValue1.ref[len+1];
         for (int i = 1; i < len; ++i) {
             va[i] = testValue1;
             verif[i] = va[i];
         }
         Object[] result = test59(va);
@@ -1609,17 +1609,17 @@
     }
 
     @DontCompile
     public void test60_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[len];
-        MyValue1?[] verif = new MyValue1?[len+1];
+        MyValue1.ref[] va = new MyValue1.ref[len];
+        MyValue1.ref[] verif = new MyValue1.ref[len+1];
         for (int i = 1; i < len; ++i) {
             va[i] = testValue1;
             verif[i] = (MyValue1)va[i];
         }
-        Object[] result = test60(va, MyValue1?[].class);
+        Object[] result = test60(va, MyValue1.ref[].class);
         verify(verif, result);
     }
 
     @Test
     public Object[] test61(Object[] va, Class klass) {
@@ -1638,22 +1638,22 @@
             Asserts.assertEQ(va[i], result[i]);
         }
     }
 
     @ForceInline
-    public Object[] test62_helper(int i, MyValue1?[] va, Integer[] oa) {
+    public Object[] test62_helper(int i, MyValue1.ref[] va, Integer[] oa) {
         Object[] arr = null;
         if (i == 10) {
             arr = oa;
         } else {
             arr = va;
         }
         return arr;
     }
 
     @Test
-    public Object[] test62(MyValue1?[] va, Integer[] oa) {
+    public Object[] test62(MyValue1.ref[] va, Integer[] oa) {
         int i = 0;
         for (; i < 10; i++);
 
         Object[] arr = test62_helper(i, va, oa);
 
@@ -1661,11 +1661,11 @@
     }
 
     @DontCompile
     public void test62_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[len];
+        MyValue1.ref[] va = new MyValue1.ref[len];
         Integer[] oa = new Integer[len];
         for (int i = 1; i < len; ++i) {
             oa[i] = new Integer(rI);
         }
         test62_helper(42, va, oa);
@@ -1674,22 +1674,22 @@
             Asserts.assertEQ(oa[i], result[i]);
         }
     }
 
     @ForceInline
-    public Object[] test63_helper(int i, MyValue1?[] va, Integer[] oa) {
+    public Object[] test63_helper(int i, MyValue1.ref[] va, Integer[] oa) {
         Object[] arr = null;
         if (i == 10) {
             arr = va;
         } else {
             arr = oa;
         }
         return arr;
     }
 
     @Test
-    public Object[] test63(MyValue1?[] va, Integer[] oa) {
+    public Object[] test63(MyValue1.ref[] va, Integer[] oa) {
         int i = 0;
         for (; i < 10; i++);
 
         Object[] arr = test63_helper(i, va, oa);
 
@@ -1697,12 +1697,12 @@
     }
 
     @DontCompile
     public void test63_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[len];
-        MyValue1?[] verif = new MyValue1?[len+1];
+        MyValue1.ref[] va = new MyValue1.ref[len];
+        MyValue1.ref[] verif = new MyValue1.ref[len+1];
         for (int i = 1; i < len; ++i) {
             va[i] = testValue1;
             verif[i] = va[i];
         }
         Integer[] oa = new Integer[len];
@@ -1711,131 +1711,131 @@
         verify(verif, result);
     }
 
     // Test default initialization of value type arrays: small array
     @Test
-    public MyValue1?[] test64() {
-        return new MyValue1?[8];
+    public MyValue1.ref[] test64() {
+        return new MyValue1.ref[8];
     }
 
     @DontCompile
     public void test64_verifier(boolean warmup) {
-        MyValue1?[] va = test64();
+        MyValue1.ref[] va = test64();
         for (int i = 0; i < 8; ++i) {
             Asserts.assertEQ(va[i], null);
         }
     }
 
     // Test default initialization of value type arrays: large array
     @Test
-    public MyValue1?[] test65() {
-        return new MyValue1?[32];
+    public MyValue1.ref[] test65() {
+        return new MyValue1.ref[32];
     }
 
     @DontCompile
     public void test65_verifier(boolean warmup) {
-        MyValue1?[] va = test65();
+        MyValue1.ref[] va = test65();
         for (int i = 0; i < 32; ++i) {
             Asserts.assertEQ(va[i], null);
         }
     }
 
     // Check init store elimination
     @Test(match = { ALLOCA }, matchCount = { 1 })
-    public MyValue1?[] test66(MyValue1? vt) {
-        MyValue1?[] va = new MyValue1?[1];
+    public MyValue1.ref[] test66(MyValue1.ref vt) {
+        MyValue1.ref[] va = new MyValue1.ref[1];
         va[0] = vt;
         return va;
     }
 
     @DontCompile
     public void test66_verifier(boolean warmup) {
-        MyValue1? vt = MyValue1.createWithFieldsDontInline(rI, rL);
-        MyValue1?[] va = test66(vt);
+        MyValue1.ref vt = MyValue1.createWithFieldsDontInline(rI, rL);
+        MyValue1.ref[] va = test66(vt);
         Asserts.assertEQ(va[0].hashPrimitive(), vt.hashPrimitive());
     }
 
     // Zeroing elimination and arraycopy
     @Test
-    public MyValue1?[] test67(MyValue1?[] src) {
-        MyValue1?[] dst = new MyValue1?[16];
+    public MyValue1.ref[] test67(MyValue1.ref[] src) {
+        MyValue1.ref[] dst = new MyValue1.ref[16];
         System.arraycopy(src, 0, dst, 0, 13);
         return dst;
     }
 
     @DontCompile
     public void test67_verifier(boolean warmup) {
-        MyValue1?[] va = new MyValue1?[16];
-        MyValue1?[] var = test67(va);
+        MyValue1.ref[] va = new MyValue1.ref[16];
+        MyValue1.ref[] var = test67(va);
         for (int i = 0; i < 16; ++i) {
             Asserts.assertEQ(var[i], null);
         }
     }
 
     // A store with a default value can be eliminated
     @Test
-    public MyValue1?[] test68() {
-        MyValue1?[] va = new MyValue1?[2];
+    public MyValue1.ref[] test68() {
+        MyValue1.ref[] va = new MyValue1.ref[2];
         va[0] = va[1];
         return va;
     }
 
     @DontCompile
     public void test68_verifier(boolean warmup) {
-        MyValue1?[] va = test68();
+        MyValue1.ref[] va = test68();
         for (int i = 0; i < 2; ++i) {
             Asserts.assertEQ(va[i], null);
         }
     }
 
     // Requires individual stores to init array
     @Test
-    public MyValue1?[] test69(MyValue1? vt) {
-        MyValue1?[] va = new MyValue1?[4];
+    public MyValue1.ref[] test69(MyValue1.ref vt) {
+        MyValue1.ref[] va = new MyValue1.ref[4];
         va[0] = vt;
         va[3] = vt;
         return va;
     }
 
     @DontCompile
     public void test69_verifier(boolean warmup) {
-        MyValue1? vt = MyValue1.createWithFieldsDontInline(rI, rL);
-        MyValue1?[] va = new MyValue1?[4];
+        MyValue1.ref vt = MyValue1.createWithFieldsDontInline(rI, rL);
+        MyValue1.ref[] va = new MyValue1.ref[4];
         va[0] = vt;
         va[3] = vt;
-        MyValue1?[] var = test69(vt);
+        MyValue1.ref[] var = test69(vt);
         for (int i = 0; i < va.length; ++i) {
             Asserts.assertEQ(va[i], var[i]);
         }
     }
 
     // A store with a default value can be eliminated: same as test68
     // but store is farther away from allocation
     @Test
-    public MyValue1?[] test70(MyValue1?[] other) {
+    public MyValue1.ref[] test70(MyValue1.ref[] other) {
         other[1] = other[0];
-        MyValue1?[] va = new MyValue1?[2];
+        MyValue1.ref[] va = new MyValue1.ref[2];
         other[0] = va[1];
         va[0] = va[1];
         return va;
     }
 
     @DontCompile
     public void test70_verifier(boolean warmup) {
-        MyValue1?[] va = new MyValue1?[2];
-        MyValue1?[] var = test70(va);
+        MyValue1.ref[] va = new MyValue1.ref[2];
+        MyValue1.ref[] var = test70(va);
         for (int i = 0; i < 2; ++i) {
             Asserts.assertEQ(va[i], var[i]);
         }
     }
 
     // EA needs to consider oop fields in flattened arrays
     @Test
     public void test71() {
         int len = 10;
-        MyValue2?[] src = new MyValue2?[len];
-        MyValue2?[] dst = new MyValue2?[len];
+        MyValue2.ref[] src = new MyValue2.ref[len];
+        MyValue2.ref[] dst = new MyValue2.ref[len];
         for (int i = 1; i < len; ++i) {
             src[i] = MyValue2.createWithFieldsDontInline(rI, (i % 2) == 0);
         }
         System.arraycopy(src, 0, dst, 0, src.length);
         for (int i = 0; i < len; ++i) {
@@ -1871,11 +1871,11 @@
         test72(arr, true, elem);
         test72(arr, false, elem);
     }
 
     @Test
-    public void test73(Object[] oa, MyValue1? v, Object o) {
+    public void test73(Object[] oa, MyValue1.ref v, Object o) {
         // TestLWorld.test38 use a C1 Phi node for the array. This test
         // adds the case where the stored value is a C1 Phi node.
         Object o2 = (o == null) ? v : o;
         oa[0] = v;  // The stored value is known to be flattenable
         oa[1] = o;  // The stored value may be flattenable
@@ -1883,13 +1883,13 @@
         oa[0] = oa; // The stored value is known to be not flattenable (an Object[])
     }
 
     @DontCompile
     public void test73_verifier(boolean warmup) {
-        MyValue1? v0 = MyValue1.createWithFieldsDontInline(rI, rL);
-        MyValue1? v1 = MyValue1.createWithFieldsDontInline(rI+1, rL+1);
-        MyValue1?[] arr = new MyValue1?[3];
+        MyValue1.ref v0 = MyValue1.createWithFieldsDontInline(rI, rL);
+        MyValue1.ref v1 = MyValue1.createWithFieldsDontInline(rI+1, rL+1);
+        MyValue1.ref[] arr = new MyValue1.ref[3];
         try {
             test73(arr, v0, v1);
             throw new RuntimeException("ArrayStoreException expected");
         } catch (ArrayStoreException t) {
             // expected
@@ -1899,33 +1899,33 @@
         Asserts.assertEQ(arr[2].hash(), v1.hash());
     }
 
     // Some more array clone tests
     @ForceInline
-    public Object[] test74_helper(int i, MyValue1?[] va, Integer[] oa) {
+    public Object[] test74_helper(int i, MyValue1.ref[] va, Integer[] oa) {
         Object[] arr = null;
         if (i == 10) {
             arr = oa;
         } else {
             arr = va;
         }
         return arr;
     }
 
     @Test
-    public Object[] test74(MyValue1?[] va, Integer[] oa) {
+    public Object[] test74(MyValue1.ref[] va, Integer[] oa) {
         int i = 0;
         for (; i < 10; i++);
 
         Object[] arr = test74_helper(i, va, oa);
         return arr.clone();
     }
 
     @DontCompile
     public void test74_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[len];
+        MyValue1.ref[] va = new MyValue1.ref[len];
         Integer[] oa = new Integer[len];
         for (int i = 1; i < len; ++i) {
             oa[i] = new Integer(rI);
         }
         test74_helper(42, va, oa);
@@ -1937,34 +1937,34 @@
             result[i] = null;
         }
     }
 
     @ForceInline
-    public Object[] test75_helper(int i, MyValue1?[] va, Integer[] oa) {
+    public Object[] test75_helper(int i, MyValue1.ref[] va, Integer[] oa) {
         Object[] arr = null;
         if (i == 10) {
             arr = va;
         } else {
             arr = oa;
         }
         return arr;
     }
 
     @Test
-    public Object[] test75(MyValue1?[] va, Integer[] oa) {
+    public Object[] test75(MyValue1.ref[] va, Integer[] oa) {
         int i = 0;
         for (; i < 10; i++);
 
         Object[] arr = test75_helper(i, va, oa);
         return arr.clone();
     }
 
     @DontCompile
     public void test75_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
-        MyValue1?[] va = new MyValue1?[len];
-        MyValue1?[] verif = new MyValue1?[len];
+        MyValue1.ref[] va = new MyValue1.ref[len];
+        MyValue1.ref[] verif = new MyValue1.ref[len];
         for (int i = 1; i < len; ++i) {
             va[i] = testValue1;
             verif[i] = va[i];
         }
         Integer[] oa = new Integer[len];
@@ -1977,20 +1977,20 @@
         }
     }
 
     // Test mixing nullable and non-nullable arrays
     @Test
-    public Object[] test76(MyValue1[] vva, MyValue1?[] vba, MyValue1 vt, Object[] out, int n) {
+    public Object[] test76(MyValue1[] vva, MyValue1.ref[] vba, MyValue1 vt, Object[] out, int n) {
         Object[] result = null;
         if (n == 0) {
             result = vva;
         } else if (n == 1) {
             result = vba;
         } else if (n == 2) {
             result = new MyValue1[42];
         } else if (n == 3) {
-            result = new MyValue1?[42];
+            result = new MyValue1.ref[42];
         }
         result[0] = vt;
         out[0] = result[1];
         return result;
     }
@@ -2000,12 +2000,12 @@
         MyValue1 vt = testValue1;
         Object[] out = new Object[1];
         MyValue1[] vva = new MyValue1[42];
         MyValue1[] vva_r = new MyValue1[42];
         vva_r[0] = vt;
-        MyValue1?[] vba = new MyValue1?[42];
-        MyValue1?[] vba_r = new MyValue1?[42];
+        MyValue1.ref[] vba = new MyValue1.ref[42];
+        MyValue1.ref[] vba_r = new MyValue1.ref[42];
         vba_r[0] = vt;
         Object[] result = test76(vva, vba, vt, out, 0);
         verify(result, vva_r);
         Asserts.assertEQ(out[0], vva_r[1]);
         result = test76(vva, vba, vt, out, 1);
@@ -2021,11 +2021,11 @@
 
     @Test
     public Object[] test77(boolean b) {
         Object[] va;
         if (b) {
-            va = new MyValue1?[5];
+            va = new MyValue1.ref[5];
             for (int i = 0; i < 5; ++i) {
                 va[i] = testValue1;
             }
         } else {
             va = new MyValue1[10];
@@ -2058,20 +2058,20 @@
         }
     }
 
     // Same as test76 but with non value type array cases
     @Test
-    public Object[] test78(MyValue1[] vva, MyValue1?[] vba, Object val, Object[] out, int n) {
+    public Object[] test78(MyValue1[] vva, MyValue1.ref[] vba, Object val, Object[] out, int n) {
         Object[] result = null;
         if (n == 0) {
             result = vva;
         } else if (n == 1) {
             result = vba;
         } else if (n == 2) {
             result = new MyValue1[42];
         } else if (n == 3) {
-            result = new MyValue1?[42];
+            result = new MyValue1.ref[42];
         } else if (n == 4) {
             result = new Integer[42];
         }
         result[0] = val;
         out[0] = result[1];
@@ -2084,12 +2084,12 @@
         Integer i = new Integer(42);
         Object[] out = new Object[1];
         MyValue1[] vva = new MyValue1[42];
         MyValue1[] vva_r = new MyValue1[42];
         vva_r[0] = vt;
-        MyValue1?[] vba = new MyValue1?[42];
-        MyValue1?[] vba_r = new MyValue1?[42];
+        MyValue1.ref[] vba = new MyValue1.ref[42];
+        MyValue1.ref[] vba_r = new MyValue1.ref[42];
         vba_r[0] = vt;
         Object[] result = test78(vva, vba, vt, out, 0);
         verify(result, vva_r);
         Asserts.assertEQ(out[0], vva_r[1]);
         result = test78(vva, vba, vt, out, 1);
@@ -2106,19 +2106,19 @@
         Asserts.assertEQ(out[0], null);
     }
 
     // Test widening conversions from [Q to [L
     @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
-    public static MyValue1?[] test79(MyValue1[] va) {
+    public static MyValue1.ref[] test79(MyValue1[] va) {
         return va;
     }
 
     @DontCompile
     public void test79_verifier(boolean warmup) {
         MyValue1[] va = new MyValue1[1];
         va[0] = testValue1;
-        MyValue1?[] res = test79(va);
+        MyValue1.ref[] res = test79(va);
         Asserts.assertEquals(res[0].hash(), testValue1.hash());
         try {
             res[0] = null;
             throw new RuntimeException("NullPointerException expected");
         } catch (NullPointerException npe) {
@@ -2129,11 +2129,11 @@
     }
 
     // Same as test79 but with explicit cast and Object return
     @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
     public static Object[] test80(MyValue1[] va) {
-        return (MyValue1?[])va;
+        return (MyValue1.ref[])va;
     }
 
     @DontCompile
     public void test80_verifier(boolean warmup) {
         MyValue1[] va = new MyValue1[1];
@@ -2150,12 +2150,12 @@
         test80(null); // Should not throw NPE
     }
 
     // Test mixing widened and boxed array type
     @Test()
-    public static long test81(MyValue1[] va1, MyValue1?[] va2, MyValue1 vt, boolean b, boolean shouldThrow) {
-        MyValue1?[] result = b ? va1 : va2;
+    public static long test81(MyValue1[] va1, MyValue1.ref[] va2, MyValue1 vt, boolean b, boolean shouldThrow) {
+        MyValue1.ref[] result = b ? va1 : va2;
         try {
             result[0] = vt;
         } catch (NullPointerException npe) {
             // Ignored
         }
@@ -2163,11 +2163,11 @@
     }
 
     @DontCompile
     public void test81_verifier(boolean warmup) {
         MyValue1[] va = new MyValue1[2];
-        MyValue1?[] vaB = new MyValue1?[2];
+        MyValue1.ref[] vaB = new MyValue1.ref[2];
         va[1] = testValue1;
         vaB[1] = testValue1;
         long res = test81(va, vaB, testValue1, true, true);
         Asserts.assertEquals(va[0].hash(), testValue1.hash());
         Asserts.assertEquals(res, testValue1.hash());
@@ -2179,18 +2179,18 @@
         Asserts.assertEquals(res, testValue1.hash());
     }
 
     // Same as test81 but more cases and null writes
     @Test()
-    public static long test82(MyValue1[] va1, MyValue1?[] va2, MyValue1 vt1, MyValue1? vt2, int i, boolean shouldThrow) {
-        MyValue1?[] result = null;
+    public static long test82(MyValue1[] va1, MyValue1.ref[] va2, MyValue1 vt1, MyValue1.ref vt2, int i, boolean shouldThrow) {
+        MyValue1.ref[] result = null;
         if (i == 0) {
             result = va1;
         } else if (i == 1) {
             result = va2;
         } else if (i == 2) {
-            result = new MyValue1?[2];
+            result = new MyValue1.ref[2];
             result[1] = vt1;
         } else if (i == 3) {
             result = new MyValue1[2];
             result[1] = vt1;
         }
@@ -2207,11 +2207,11 @@
     }
 
     @DontCompile
     public void test82_verifier(boolean warmup) {
         MyValue1[] va = new MyValue1[2];
-        MyValue1?[] vaB = new MyValue1?[2];
+        MyValue1.ref[] vaB = new MyValue1.ref[2];
         va[1] = testValue1;
         vaB[1] = testValue1;
         long res = test82(va, vaB, testValue1, testValue1, 0, true);
         Asserts.assertEquals(va[0].hash(), testValue1.hash());
         Asserts.assertEquals(res, testValue1.hash());
@@ -2229,11 +2229,11 @@
         Asserts.assertEquals(res, testValue1.hash());
     }
 
     @Test(failOn = ALLOC + ALLOCA + STORE)
     public static long test83(MyValue1[] va) {
-        MyValue1?[] result = va;
+        MyValue1.ref[] result = va;
         return result[0].hash();
     }
 
     @DontCompile
     public void test83_verifier(boolean warmup) {
@@ -2243,20 +2243,20 @@
         Asserts.assertEquals(res, testValue1.hash());
     }
 
     @Test(valid = ValueTypeArrayFlattenOn, failOn = ALLOC + LOOP + STORE + TRAP)
     @Test(valid = ValueTypeArrayFlattenOff)
-    public static MyValue1?[] test84(MyValue1 vt1, MyValue1? vt2) {
-        MyValue1?[] result = new MyValue1[2];
+    public static MyValue1.ref[] test84(MyValue1 vt1, MyValue1.ref vt2) {
+        MyValue1.ref[] result = new MyValue1[2];
         result[0] = vt1;
         result[1] = vt2;
         return result;
     }
 
     @DontCompile
     public void test84_verifier(boolean warmup) {
-        MyValue1?[] res = test84(testValue1, testValue1);
+        MyValue1.ref[] res = test84(testValue1, testValue1);
         Asserts.assertEquals(res[0].hash(), testValue1.hash());
         Asserts.assertEquals(res[1].hash(), testValue1.hash());
         try {
             test84(testValue1, null);
             throw new RuntimeException("NullPointerException expected");
@@ -2264,19 +2264,19 @@
             // Expected
         }
     }
 
     @Test()
-    public static long test85(MyValue1?[] va, MyValue1 val) {
+    public static long test85(MyValue1.ref[] va, MyValue1 val) {
         va[0] = val;
         return va[1].hash();
     }
 
     @DontCompile
     public void test85_verifier(boolean warmup) {
         MyValue1[] va = new MyValue1[2];
-        MyValue1?[] vab = new MyValue1?[2];
+        MyValue1.ref[] vab = new MyValue1.ref[2];
         va[1] = testValue1;
         vab[1] = testValue1;
         long res = test85(va, testValue1);
         Asserts.assertEquals(res, testValue1.hash());
         Asserts.assertEquals(va[0].hash(), testValue1.hash());
@@ -2285,19 +2285,19 @@
         Asserts.assertEquals(vab[0].hash(), testValue1.hash());
     }
 
     // Same as test85 but with box value
     @Test()
-    public static long test86(MyValue1?[] va, MyValue1? val) {
+    public static long test86(MyValue1.ref[] va, MyValue1.ref val) {
         va[0] = val;
         return va[1].hash();
     }
 
     @DontCompile
     public void test86_verifier(boolean warmup) {
         MyValue1[] va = new MyValue1[2];
-        MyValue1?[] vab = new MyValue1?[2];
+        MyValue1.ref[] vab = new MyValue1.ref[2];
         va[1] = testValue1;
         vab[1] = testValue1;
         long res = test86(va, testValue1);
         Asserts.assertEquals(res, testValue1.hash());
         Asserts.assertEquals(va[0].hash(), testValue1.hash());
@@ -2316,11 +2316,11 @@
     }
 
     // Test initialization of nullable array with constant
     @Test()
     public long test87() {
-        MyValue1?[] va = new MyValue1?[1];
+        MyValue1.ref[] va = new MyValue1.ref[1];
         va[0] = testValue1;
         return va[0].hash();
     }
 
     @DontCompile
@@ -2329,11 +2329,11 @@
         Asserts.assertEQ(result, hash());
     }
 
     // Test narrowing conversion from [L to [Q
     @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
-    public static MyValue1[] test88(MyValue1?[] va) {
+    public static MyValue1[] test88(MyValue1.ref[] va) {
         return (MyValue1[])va;
     }
 
     @DontCompile
     public void test88_verifier(boolean warmup) {
@@ -2342,11 +2342,11 @@
         MyValue1[] res = test88(va);
         Asserts.assertEquals(res[0].hash(), testValue1.hash());
         res[0] = testValue1;
         test88(null); // Should not throw NPE
         try {
-            test88(new MyValue1?[1]);
+            test88(new MyValue1.ref[1]);
             throw new RuntimeException("ClassCastException expected");
         } catch (ClassCastException cce) {
             // Expected
         }
     }
@@ -2364,27 +2364,27 @@
         MyValue1[] res = test89(va);
         Asserts.assertEquals(((MyValue1)res[0]).hash(), testValue1.hash());
         res[0] = testValue1;
         test89(null); // Should not throw NPE
         try {
-            test89(new MyValue1?[1]);
+            test89(new MyValue1.ref[1]);
             throw new RuntimeException("ClassCastException expected");
         } catch (ClassCastException cce) {
             // Expected
         }
     }
 
     // More cast tests
     @Test()
-    public static MyValue1?[] test90(Object va) {
-        return (MyValue1?[])va;
+    public static MyValue1.ref[] test90(Object va) {
+        return (MyValue1.ref[])va;
     }
 
     @DontCompile
     public void test90_verifier(boolean warmup) {
         MyValue1[] va = new MyValue1[1];
-        MyValue1?[] vab = new MyValue1?[1];
+        MyValue1.ref[] vab = new MyValue1.ref[1];
         try {
           // Trigger some ClassCastExceptions so C2 does not add an uncommon trap
           test90(new Integer[0]);
         } catch (ClassCastException cce) {
           // Expected
@@ -2393,18 +2393,18 @@
         test90(vab);
         test90(null);
     }
 
     @Test()
-    public static MyValue1?[] test91(Object[] va) {
-        return (MyValue1?[])va;
+    public static MyValue1.ref[] test91(Object[] va) {
+        return (MyValue1.ref[])va;
     }
 
     @DontCompile
     public void test91_verifier(boolean warmup) {
         MyValue1[] va = new MyValue1[1];
-        MyValue1?[] vab = new MyValue1?[1];
+        MyValue1.ref[] vab = new MyValue1.ref[1];
         try {
           // Trigger some ClassCastExceptions so C2 does not add an uncommon trap
           test91(new Integer[0]);
         } catch (ClassCastException cce) {
           // Expected
@@ -2414,34 +2414,34 @@
         test91(null);
     }
 
     // Test if arraycopy intrinsic correctly checks for flattened source array
     @Test()
-    public static void test92(MyValue1?[] src, MyValue1?[] dst) {
+    public static void test92(MyValue1.ref[] src, MyValue1.ref[] dst) {
         System.arraycopy(src, 0, dst, 0, 2);
     }
 
     @DontCompile
     public void test92_verifier(boolean warmup) {
         MyValue1[]  va = new MyValue1[2];
-        MyValue1?[] vab = new MyValue1?[2];
+        MyValue1.ref[] vab = new MyValue1.ref[2];
         va[0] = testValue1;
         vab[0] = testValue1;
         test92(va, vab);
         Asserts.assertEquals(va[0], vab[0]);
         Asserts.assertEquals(va[1], vab[1]);
     }
 
     @Test()
-    public static void test93(Object src, MyValue1?[] dst) {
+    public static void test93(Object src, MyValue1.ref[] dst) {
         System.arraycopy(src, 0, dst, 0, 2);
     }
 
     @DontCompile
     public void test93_verifier(boolean warmup) {
         MyValue1[]  va = new MyValue1[2];
-        MyValue1?[] vab = new MyValue1?[2];
+        MyValue1.ref[] vab = new MyValue1.ref[2];
         va[0] = testValue1;
         vab[0] = testValue1;
         test93(va, vab);
         Asserts.assertEquals(va[0], vab[0]);
         Asserts.assertEquals(va[1], vab[1]);
@@ -2449,11 +2449,11 @@
 
     // Test non-escaping allocation with arraycopy
     // that does not modify loaded array element.
     @Test()
     public static long test94() {
-        MyValue1?[] src = new MyValue1?[8];
+        MyValue1.ref[] src = new MyValue1.ref[8];
         MyValue1[]  dst = new MyValue1[8];
         for (int i = 1; i < 8; ++i) {
             src[i] = testValue1;
         }
         System.arraycopy(src, 1, dst, 2, 6);
@@ -2467,11 +2467,11 @@
     }
 
     // Test meeting constant TypeInstPtr with ValueTypeNode
     @ForceInline
     public long test95_callee() {
-        MyValue1?[] va = new MyValue1?[1];
+        MyValue1.ref[] va = new MyValue1.ref[1];
         va[0] = testValue1;
         return va[0].hashInterpreted();
     }
 
     @Test()
@@ -2505,27 +2505,27 @@
                                this.re * that.im + this.im * that.re);
         }
     }
 
     @Test()
-    public Complex?[][] test96(Complex?[][] A, Complex?[][] B) {
+    public Complex.ref[][] test96(Complex.ref[][] A, Complex.ref[][] B) {
         int size = A.length;
-        Complex?[][] R = new Complex?[size][size];
+        Complex.ref[][] R = new Complex.ref[size][size];
         for (int i = 0; i < size; i++) {
             for (int k = 0; k < size; k++) {
-                Complex? aik = A[i][k];
+                Complex.ref aik = A[i][k];
                 for (int j = 0; j < size; j++) {
                     R[i][j] = B[i][j].add(aik.mul((Complex)B[k][j]));
                 }
             }
         }
         return R;
     }
 
-    static Complex?[][] test96_A = new Complex?[10][10];
-    static Complex?[][] test96_B = new Complex?[10][10];
-    static Complex?[][] test96_R;
+    static Complex.ref[][] test96_A = new Complex.ref[10][10];
+    static Complex.ref[][] test96_B = new Complex.ref[10][10];
+    static Complex.ref[][] test96_R;
 
     static {
         for (int i = 0; i < 10; i++) {
             for (int j = 0; j < 10; j++) {
                 test96_A[i][j] = new Complex(rI, rI);
@@ -2534,11 +2534,11 @@
         }
     }
 
     @DontCompile
     public void test96_verifier(boolean warmup) {
-        Complex?[][] result = test96(test96_A, test96_B);
+        Complex.ref[][] result = test96(test96_A, test96_B);
         if (test96_R == null) {
             test96_R = result;
         }
         for (int i = 0; i < 10; i++) {
             for (int j = 0; j < 10; j++) {
@@ -2578,11 +2578,11 @@
         myInt[0] = rI;
         result = test98((Object[])myInt);
         Asserts.assertEquals(result, rI);
         if (!warmup) {
             MyValue1[] va = new MyValue1[1];
-            MyValue1?[] vab = new MyValue1?[1];
+            MyValue1.ref[] vab = new MyValue1.ref[1];
             result = test98((Object[])va);
             Asserts.assertEquals(((MyValue1)result).hash(), MyValue1.default.hash());
             result = test98((Object[])vab);
             Asserts.assertEquals(result, null);
         }
@@ -2667,11 +2667,11 @@
         Asserts.assertEquals(myInt[0], rI);
         test102(null, (Object[])myInt);
         Asserts.assertEquals(myInt[0], null);
         if (!warmup) {
             MyValue1[] va = new MyValue1[1];
-            MyValue1?[] vab = new MyValue1?[1];
+            MyValue1.ref[] vab = new MyValue1.ref[1];
             test102(testValue1, (Object[])va);
             Asserts.assertEquals(va[0].hash(), testValue1.hash());
             test102(testValue1, (Object[])vab);
             Asserts.assertEquals(vab[0].hash(), testValue1.hash());
             test102(null, (Object[])vab);
@@ -2777,30 +2777,30 @@
         myInt[0] = rI;
         result = test106(myInt, (Object[])myInt);
         Asserts.assertEquals(result[0], rI);
         if (!warmup) {
             MyValue1[] va = new MyValue1[1];
-            MyValue1?[] vab = new MyValue1?[1];
+            MyValue1.ref[] vab = new MyValue1.ref[1];
             result = test106(va, (Object[])va);
             Asserts.assertEquals(((MyValue1)result[0]).hash(), MyValue1.default.hash());
             result = test106(vab, (Object[])vab);
             Asserts.assertEquals(((MyValue1)result[0]).hash(), testValue1.hash());
         }
     }
 
     // Test that allocation is not replaced by non-dominating allocation
-    public long test107_helper(MyValue1?[] va, MyValue1 vt) {
+    public long test107_helper(MyValue1.ref[] va, MyValue1 vt) {
         try {
             va[0] = vt;
         } catch (NullPointerException npe) { }
         return va[1].hash();
     }
 
     @Test()
     public void test107() {
         MyValue1[] va = new MyValue1[2];
-        MyValue1?[] tmp = new MyValue1?[2];
+        MyValue1.ref[] tmp = new MyValue1.ref[2];
         long res1 = test107_helper(va, testValue1);
         long res2 = test107_helper(va, testValue1);
         Asserts.assertEquals(va[0].hash(), testValue1.hash());
         Asserts.assertEquals(res1, MyValue1.default.hash());
         Asserts.assertEquals(res2, MyValue1.default.hash());
@@ -2812,19 +2812,19 @@
     }
 
 
     @Test
     @Warmup(10000)
-    public Object test108(MyValue1?[] src, boolean flag) {
-        MyValue1?[] dst = new MyValue1?[8];
+    public Object test108(MyValue1.ref[] src, boolean flag) {
+        MyValue1.ref[] dst = new MyValue1.ref[8];
         System.arraycopy(src, 1, dst, 2, 6);
         if (flag) {} // uncommon trap
         return dst[2];
     }
 
     @DontCompile
     public void test108_verifier(boolean warmup) {
-        MyValue1?[] src = new MyValue1?[8];
+        MyValue1.ref[] src = new MyValue1.ref[8];
         test108(src, !warmup);
     }
 
 }
