diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestArrays.java
@@ -1249,11 +1249,12 @@
         }
     }
 
     @Test
     public MyValue1[] test51(MyValue1[] va) {
-        return Arrays.copyOf(va, va.length, MyValue1[].class);
+        // TODO Remove cast as workaround once javac is fixed
+        return (MyValue1[])Arrays.copyOf(va, va.length, MyValue1[].class);
     }
 
     @DontCompile
     public void test51_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
@@ -1267,11 +1268,12 @@
 
     static final MyValue1[] test52_va = new MyValue1[8];
 
     @Test
     public MyValue1[] test52() {
-        return Arrays.copyOf(test52_va, 8, MyValue1[].class);
+        // TODO Remove cast as workaround once javac is fixed
+        return (MyValue1[])Arrays.copyOf(test52_va, 8, MyValue1[].class);
     }
 
     @DontCompile
     public void test52_verifier(boolean warmup) {
         for (int i = 0; i < 8; ++i) {
@@ -1281,11 +1283,12 @@
         verify(test52_va, result);
     }
 
     @Test
     public MyValue1[] test53(Object[] va) {
-        return Arrays.copyOf(va, va.length, MyValue1[].class);
+        // TODO Remove cast as workaround once javac is fixed
+        return (MyValue1[])Arrays.copyOf(va, va.length, MyValue1[].class);
     }
 
     @DontCompile
     public void test53_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
@@ -1329,11 +1332,12 @@
         verify(va, result);
     }
 
     @Test
     public MyValue1[] test56(Object[] va) {
-        return Arrays.copyOf(va, va.length, MyValue1[].class);
+        // TODO Remove cast as workaround once javac is fixed
+        return (MyValue1[])Arrays.copyOf(va, va.length, MyValue1[].class);
     }
 
     @DontCompile
     public void test56_verifier(boolean warmup) {
         int len = Math.abs(rI) % 10;
@@ -1965,11 +1969,11 @@
         return array[i];
     }
 
     @DontCompile
     public void test84_verifier(boolean warmup) {
-        NotFlattenable?[] array1 = new NotFlattenable?[2];
+        NotFlattenable.ref[] array1 = new NotFlattenable.ref[2];
         Object[] array2 = new Object[2];
         Object result = test84(array1, 0);
         Asserts.assertEquals(array1[0], null);
         Asserts.assertEquals(result, null);
         result = test84(array2, 1);
@@ -2021,11 +2025,11 @@
         }
     }
 
     // Same as test85 but with not-flattenable inline type array
     @Test(failOn = ALLOC_G + ALLOCA_G + LOAD_UNKNOWN_VALUE + STORE_UNKNOWN_VALUE, match = { VALUE_ARRAY_NULL_GUARD }, matchCount = { 2 })
-    public void test86(NotFlattenable?[] array, NotFlattenable? o, boolean b) {
+    public void test86(NotFlattenable.ref[] array, NotFlattenable.ref o, boolean b) {
         if (b) {
             array[0] = null;
         } else {
             array[1] = null;
         }
@@ -2033,11 +2037,11 @@
     }
 
     @DontCompile
     public void test86_verifier(boolean warmup) {
         NotFlattenable vt = new NotFlattenable();
-        NotFlattenable?[] array1 = new NotFlattenable?[2];
+        NotFlattenable.ref[] array1 = new NotFlattenable.ref[2];
         test86(array1, vt, true);
         Asserts.assertEquals(array1[1], vt);
         test86(array1, null, false);
         Asserts.assertEquals(array1[1], null);
         if (!warmup) {
@@ -2051,11 +2055,11 @@
         }
     }
 
     // Same as test85 but with inline type array
     @Test(failOn = ALLOC_G + ALLOCA_G + LOAD_UNKNOWN_VALUE + STORE_UNKNOWN_VALUE, match = { VALUE_ARRAY_NULL_GUARD }, matchCount = { 2 })
-    public void test87(MyValue1?[] array, MyValue1? o, boolean b) {
+    public void test87(MyValue1.ref[] array, MyValue1.ref o, boolean b) {
         if (b) {
             array[0] = null;
         } else {
             array[1] = null;
         }
@@ -2063,11 +2067,11 @@
     }
 
     @DontCompile
     public void test87_verifier(boolean warmup) {
         MyValue1 vt = MyValue1.createWithFieldsInline(rI, rL);
-        MyValue1?[] array1 = new MyValue1?[2];
+        MyValue1.ref[] array1 = new MyValue1.ref[2];
         test87(array1, vt, true);
         Asserts.assertEquals(array1[1], vt);
         test87(array1, null, false);
         Asserts.assertEquals(array1[1], null);
         if (!warmup) {
@@ -2105,18 +2109,18 @@
             }
         }
     }
 
     @Test()
-    public void test89(MyValue1?[] array, Integer v) {
+    public void test89(MyValue1.ref[] array, Integer v) {
         Object o = v;
-        array[0] = (MyValue1?)o;
+        array[0] = (MyValue1.ref)o;
     }
 
     @DontCompile
     public void test89_verifier(boolean warmup) {
-        MyValue1?[] array1 = new MyValue1?[1];
+        MyValue1.ref[] array1 = new MyValue1.ref[1];
         test89(array1, null);
         Asserts.assertEquals(array1[0], null);
         if (!warmup) {
             MyValue1[] array2 = new MyValue1[1];
             try {
@@ -2131,20 +2135,20 @@
     @Test
     public boolean test90() {
         boolean b = true;
 
         MyValue1[] qArray = new MyValue1[0];
-        MyValue1?[] lArray = new MyValue1?[0];
+        MyValue1.ref[] lArray = new MyValue1.ref[0];
 
         b = b && (qArray instanceof MyValue1[]);
-        b = b && (lArray instanceof MyValue1?[]);
+        b = b && (lArray instanceof MyValue1.ref[]);
 
         MyValue1[][] qArray2 = new MyValue1[0][0];
-        MyValue1?[][] lArray2 = new MyValue1?[0][0];
+        MyValue1.ref[][] lArray2 = new MyValue1.ref[0][0];
 
         b = b && (qArray2 instanceof MyValue1[][]);
-        b = b && (lArray2 instanceof MyValue1?[][]);
+        b = b && (lArray2 instanceof MyValue1.ref[][]);
 
         return b;
     }
 
     @DontCompile
