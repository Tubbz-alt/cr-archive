diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestUnloadedValueTypeArray.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestUnloadedValueTypeArray.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestUnloadedValueTypeArray.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestUnloadedValueTypeArray.java
@@ -139,11 +139,11 @@
 
     public MyValue6Box(int n) {
         foo = n;
     }
 
-    public MyValue6Box(MyValue6Box v, MyValue6Box?[] dummy) {
+    public MyValue6Box(MyValue6Box v, MyValue6Box.ref[] dummy) {
         foo = v.foo + 1;
     }
 }
 
 final inline class MyValue7 {
@@ -194,12 +194,12 @@
 
     static void test1() {
         target1();
     }
 
-    static MyValue1Box?[] target1Box() {
-        return new MyValue1Box?[10];
+    static MyValue1Box.ref[] target1Box() {
+        return new MyValue1Box.ref[10];
     }
 
     static void test1Box() {
         target1Box();
     }
@@ -228,11 +228,11 @@
             m = test2(arr);
         }
         Asserts.assertEQ(m, 5678);
     }
 
-    static int test2Box(MyValue2Box?[] arr) {
+    static int test2Box(MyValue2Box.ref[] arr) {
         if (arr != null) {
             return arr[1].foo;
         } else {
             return 1234;
         }
@@ -245,11 +245,11 @@
         for (int i=0; i<n; i++) {
             m = test2Box(null);
         }
         Asserts.assertEQ(m, 1234);
 
-        MyValue2Box?[] arr = new MyValue2Box?[2];
+        MyValue2Box.ref[] arr = new MyValue2Box.ref[2];
         arr[1] = new MyValue2Box(5678);
         m = 9999;
         for (int i=0; i<n; i++) {
             m = test2Box(arr);
         }
@@ -274,11 +274,11 @@
             test3(arr);
         }
         Asserts.assertEQ(arr[1].foo, 2345);
     }
 
-    static void test3Box(MyValue3Box?[] arr) {
+    static void test3Box(MyValue3Box.ref[] arr) {
         if (arr != null) {
             arr[0] = null;
             arr[1] = new MyValue3Box(2345);
         }
     }
@@ -288,11 +288,11 @@
 
         for (int i=0; i<n; i++) {
             test3Box(null);
         }
 
-        MyValue3Box?[] arr = new MyValue3Box?[2];
+        MyValue3Box.ref[] arr = new MyValue3Box.ref[2];
         for (int i=0; i<n; i++) {
             test3Box(arr);
         }
         Asserts.assertEQ(arr[0], null);
         Asserts.assertEQ(arr[1].foo, 2345);
@@ -321,14 +321,14 @@
             arr = test4(true);
         }
         Asserts.assertEQ(arr[1].foo, 2345);
     }
 
-    static MyValue4Box?[] test4Box(boolean b) {
+    static MyValue4Box.ref[] test4Box(boolean b) {
         // range check elimination
         if (b) {
-            MyValue4Box?[] arr = new MyValue4Box?[10];
+            MyValue4Box.ref[] arr = new MyValue4Box.ref[10];
             arr[0] = null;
             arr[1] = new MyValue4Box(2345);
             return arr;
         } else {
             return null;
@@ -340,11 +340,11 @@
 
         for (int i=0; i<n; i++) {
             test4Box(false);
         }
 
-        MyValue4Box?[] arr = null;
+        MyValue4Box.ref[] arr = null;
         for (int i=0; i<n; i++) {
             arr = test4Box(true);
         }
         Asserts.assertEQ(arr[0], null);
         Asserts.assertEQ(arr[1].foo, 2345);
@@ -357,11 +357,11 @@
         } else if (n == 1) {
             MyValue5[] arr = new MyValue5[10];
             arr[1] = new MyValue5(12345);
             return arr;
         } else {
-            MyValue5?[] arr = new MyValue5?[10];
+            MyValue5.ref[] arr = new MyValue5.ref[10];
             arr[1] = new MyValue5(22345);
             return arr;
         }
     }
 
@@ -378,13 +378,13 @@
                 arr = (MyValue5[])test5(1);
             }
             Asserts.assertEQ(arr[1].foo, 12345);
         }
         {
-            MyValue5?[] arr = null;
+            MyValue5.ref[] arr = null;
             for (int i=0; i<n; i++) {
-                arr = (MyValue5?[])test5(2);
+                arr = (MyValue5.ref[])test5(2);
             }
             Asserts.assertEQ(arr[1].foo, 22345);
         }
     }
 
@@ -433,11 +433,11 @@
             m = test7(arr);
         }
         Asserts.assertEQ(m, 5678);
     }
 
-    static int test7Box(MyValue7Box?[][] arr) {
+    static int test7Box(MyValue7Box.ref[][] arr) {
         if (arr != null) {
             arr[0][0] = null;
             return arr[0][1].foo;
         } else {
             return 1234;
@@ -451,11 +451,11 @@
         for (int i=0; i<n; i++) {
             m = test7Box(null);
         }
         Asserts.assertEQ(m, 1234);
 
-        MyValue7Box?[][] arr = new MyValue7Box?[2][2];
+        MyValue7Box.ref[][] arr = new MyValue7Box.ref[2][2];
         Object[] oa = arr[1];
         Asserts.assertEQ(oa[0], null);
 
         arr[0][1] = new MyValue7Box(5678);
         m = 9999;
@@ -465,32 +465,32 @@
         Asserts.assertEQ(m, 5678);
         Asserts.assertEQ(arr[0][0], null);
     }
 
     static void test8() {
-        MyValue8? a[] = new MyValue8?[0];
+        MyValue8.ref a[] = new MyValue8.ref[0];
         Asserts.assertEQ(MyValue8_inited, false);
 
         MyValue8  b[] = new MyValue8 [0];
         Asserts.assertEQ(MyValue8_inited, true);
     }
 
     static void test9() {
-        MyValue9? a[][] = new MyValue9?[10][0];
+        MyValue9.ref a[][] = new MyValue9.ref[10][0];
         Asserts.assertEQ(MyValue9_inited, false);
 
         MyValue9  b[][] = new MyValue9 [10][0];
         Asserts.assertEQ(MyValue9_inited, true);
     }
 
-    static void test10(MyValue10? dummy) {
+    static void test10(MyValue10.ref dummy) {
         MyValue10[][] a = new MyValue10[1][1];
         if (a[0][0].equals(null)) throw new RuntimeException("test10 failed");
     }
 
-    static void test11(MyValue10? dummy) {
-        MyValue11?[][] a = new MyValue11?[1][1];
+    static void test11(MyValue10.ref dummy) {
+        MyValue11.ref[][] a = new MyValue11.ref[1][1];
         if (a[0][0] != null) throw new RuntimeException("test11 failed");
     }
 
     static public void main(String[] args) {
         test1();
