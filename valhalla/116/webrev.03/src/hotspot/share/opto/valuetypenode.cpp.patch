diff a/src/hotspot/share/opto/valuetypenode.cpp b/src/hotspot/share/opto/valuetypenode.cpp
--- a/src/hotspot/share/opto/valuetypenode.cpp
+++ b/src/hotspot/share/opto/valuetypenode.cpp
@@ -190,17 +190,10 @@
   ciField* field = value_klass()->declared_nonstatic_field_at(index);
   assert(!field->is_flattened() || field->type()->is_valuetype(), "must be a value type");
   return field->is_flattened();
 }
 
-bool ValueTypeBaseNode::field_is_flattenable(uint index) const {
-  assert(index < field_count(), "index out of bounds");
-  ciField* field = value_klass()->declared_nonstatic_field_at(index);
-  assert(!field->is_flattenable() || field->type()->is_valuetype(), "must be a value type");
-  return field->is_flattenable();
-}
-
 int ValueTypeBaseNode::make_scalar_in_safepoint(PhaseIterGVN* igvn, Unique_Node_List& worklist, SafePointNode* sfpt) {
   ciValueKlass* vk = value_klass();
   uint nfields = vk->nof_nonstatic_fields();
   JVMState* jvms = sfpt->jvms();
   int start = jvms->debug_start();
@@ -278,11 +271,10 @@
   // memory and adding the values as input edges to the node.
   for (uint i = 0; i < field_count(); ++i) {
     int offset = holder_offset + field_offset(i);
     Node* value = NULL;
     ciType* ft = field_type(i);
-    bool is_flattenable = field_is_flattenable(i);
     if (field_is_flattened(i)) {
       // Recursively load the flattened value type field
       value = ValueTypeNode::make_from_flattened(kit, ft->as_value_klass(), base, ptr, holder, offset, decorators);
     } else {
       const TypeOopPtr* oop_ptr = kit->gvn().type(base)->isa_oopptr();
@@ -295,15 +287,14 @@
         assert(field != NULL, "field not found");
         ciConstant constant = constant_oop->as_instance()->field_value(field);
         const Type* con_type = Type::make_from_constant(constant, /*require_const=*/ true);
         assert(con_type != NULL, "type not found");
         value = kit->gvn().transform(kit->makecon(con_type));
-        // Check type of constant which might be more precise
-        if (con_type->is_valuetypeptr() && !con_type->is_zero_type()) {
-          // Null-free, treat as flattenable
+        // Check type of constant which might be more precise than the static field type
+        if (con_type->is_valuetypeptr()) {
+          assert(!con_type->is_zero_type(), "Value types are null-free");
           ft = con_type->value_klass();
-          is_flattenable = true;
         }
       } else {
         // Load field value from memory
         const TypePtr* adr_type = field_adr_type(base, offset, holder, decorators, kit->gvn());
         Node* adr = kit->basic_plus_adr(base, ptr, offset);
@@ -313,12 +304,12 @@
         if (is_array) {
           decorators |= IS_ARRAY;
         }
         value = kit->access_load_at(base, adr, adr_type, val_type, bt, decorators);
       }
-      if (is_flattenable) {
-        // Loading a non-flattened but flattenable value type from memory
+      if (ft->is_valuetype()) {
+        // Loading a non-flattened value type from memory
         if (ft->as_value_klass()->is_scalarizable()) {
           value = ValueTypeNode::make_from_oop(kit, value, ft->as_value_klass());
         } else {
           value = kit->null2default(value, ft->as_value_klass());
         }
@@ -345,11 +336,11 @@
     Node* value = field_value(i);
     ciType* ft = field_type(i);
     if (field_is_flattened(i)) {
       // Recursively store the flattened value type field
       if (!value->is_ValueType()) {
-        assert(!kit->gvn().type(value)->maybe_null(), "should never be null");
+        assert(!kit->gvn().type(value)->maybe_null(), "Inline types are null-free");
         value = ValueTypeNode::make_from_oop(kit, value, ft->as_value_klass());
       }
       value->as_ValueType()->store_flattened(kit, base, ptr, holder, offset, decorators);
     } else {
       // Store field value to memory
@@ -508,11 +499,11 @@
   // Create a new ValueTypeNode with default values
   ValueTypeNode* vt = new ValueTypeNode(vk, default_oop(gvn, vk));
   for (uint i = 0; i < vt->field_count(); ++i) {
     ciType* field_type = vt->field_type(i);
     Node* value = NULL;
-    if (field_type->is_valuetype() && vt->field_is_flattenable(i)) {
+    if (field_type->is_valuetype()) {
       ciValueKlass* field_klass = field_type->as_value_klass();
       if (field_klass->is_scalarizable() || vt->field_is_flattened(i)) {
         value = ValueTypeNode::make_default(gvn, field_klass);
       } else {
         value = default_oop(gvn, field_klass);
@@ -762,12 +753,12 @@
       } else if (in) {
         parm = multi->as_Call()->in(base_input);
       } else {
         parm = gvn.transform(new ProjNode(multi->as_Call(), base_input));
       }
-      if (field_is_flattenable(idx)) {
-        // Non-flattened but flattenable value type
+      if (type->is_valuetype()) {
+        // Non-flattened value type field
         if (type->as_value_klass()->is_scalarizable()) {
           parm = ValueTypeNode::make_from_oop(kit, parm, type->as_value_klass());
         } else {
           parm = kit->null2default(parm, type->as_value_klass());
         }
