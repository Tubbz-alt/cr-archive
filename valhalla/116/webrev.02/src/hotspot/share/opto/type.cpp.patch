diff a/src/hotspot/share/opto/type.cpp b/src/hotspot/share/opto/type.cpp
--- a/src/hotspot/share/opto/type.cpp
+++ b/src/hotspot/share/opto/type.cpp
@@ -258,16 +258,15 @@
   case T_ADDRESS:
     assert(type->is_return_address(), "");
     return TypeRawPtr::make((address)(intptr_t)type->as_return_address()->bci());
 
   case T_INLINE_TYPE: {
-    bool is_never_null = type->is_never_null();
-    ciValueKlass* vk = type->unwrap()->as_value_klass();
-    if (vk->is_scalarizable() && is_never_null) {
+    ciValueKlass* vk = type->as_value_klass();
+    if (vk->is_scalarizable()) {
       return TypeValueType::make(vk);
     } else {
-      return TypeOopPtr::make_from_klass(vk)->join_speculative(is_never_null ? TypePtr::NOTNULL : TypePtr::BOTTOM);
+      return TypeOopPtr::make_from_klass(vk)->join_speculative(TypePtr::NOTNULL);
     }
   }
 
   default:
     // make sure we did not mix up the cases:
@@ -2007,11 +2006,11 @@
       field_array[pos] = TypePtr::BOTTOM;
       pos++;
       ExtendedSignature sig = ExtendedSignature(NULL, SigEntryFilter());
       collect_value_fields(return_type->as_value_klass(), field_array, pos, sig);
     } else {
-      field_array[TypeFunc::Parms] = get_const_type(return_type)->join_speculative(sig->returns_never_null() ? TypePtr::NOTNULL : TypePtr::BOTTOM);
+      field_array[TypeFunc::Parms] = get_const_type(return_type)->join_speculative(TypePtr::NOTNULL);
     }
     break;
   case T_VOID:
     break;
   default:
@@ -2073,16 +2072,15 @@
     case T_BYTE:
     case T_SHORT:
       field_array[pos++] = TypeInt::INT;
       break;
     case T_INLINE_TYPE: {
-      bool never_null = sig->is_never_null_at(i);
-      if (vt_fields_as_args && type->as_value_klass()->can_be_passed_as_fields() && never_null) {
+      if (vt_fields_as_args && type->as_value_klass()->can_be_passed_as_fields()) {
         is_flattened = true;
         collect_value_fields(type->as_value_klass(), field_array, pos, sig_cc);
       } else {
-        field_array[pos++] = get_const_type(type)->join_speculative(never_null ? TypePtr::NOTNULL : TypePtr::BOTTOM);
+        field_array[pos++] = get_const_type(type)->join_speculative(TypePtr::NOTNULL);
       }
       break;
     }
     default:
       ShouldNotReachHere();
@@ -5776,11 +5774,11 @@
   // convention (with a value type argument/return as a list of its fields).
   bool has_scalar_args = method->has_scalarized_args() && !is_osr_compilation;
   const TypeTuple* domain_sig = is_osr_compilation ? osr_domain() : TypeTuple::make_domain(method, false);
   const TypeTuple* domain_cc = has_scalar_args ? TypeTuple::make_domain(method, true) : domain_sig;
   ciSignature* sig = method->signature();
-  bool has_scalar_ret = sig->returns_never_null() && sig->return_type()->as_value_klass()->can_be_returned_as_fields();
+  bool has_scalar_ret = sig->return_type()->is_valuetype() && sig->return_type()->as_value_klass()->can_be_returned_as_fields();
   const TypeTuple* range_sig = TypeTuple::make_range(sig, false);
   const TypeTuple* range_cc = has_scalar_ret ? TypeTuple::make_range(sig, true) : range_sig;
   tf = TypeFunc::make(domain_sig, domain_cc, range_sig, range_cc);
   if (!is_osr_compilation) {
     C->set_last_tf(method, tf);  // fill cache
