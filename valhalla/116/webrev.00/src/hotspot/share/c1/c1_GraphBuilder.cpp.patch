diff a/src/hotspot/share/c1/c1_GraphBuilder.cpp b/src/hotspot/share/c1/c1_GraphBuilder.cpp
--- a/src/hotspot/share/c1/c1_GraphBuilder.cpp
+++ b/src/hotspot/share/c1/c1_GraphBuilder.cpp
@@ -1777,24 +1777,21 @@
         if (state_before == NULL) {
           state_before = copy_state_for_exception();
         }
         LoadField* load_field = new LoadField(append(obj), offset, field, true,
                                         state_before, needs_patching);
-        if (field->is_flattenable()) {
-          load_field->set_never_null(true);
-        }
         push(type, append(load_field));
       }
       break;
     }
     case Bytecodes::_putstatic: {
       Value val = pop(type);
       val->set_escaped();
       if (state_before == NULL) {
         state_before = copy_state_for_exception();
       }
-      if (field->type()->basic_type() == T_BOOLEAN) {
+      if (field_type == T_BOOLEAN) {
         Value mask = append(new Constant(new IntConstant(1)));
         val = append(new LogicOp(Bytecodes::_iand, val, mask));
       }
       append(new StoreField(append(obj), offset, field, val, true, state_before, needs_patching));
       break;
@@ -1812,12 +1809,12 @@
       if (field->is_constant() && !field->is_flattened() && obj_type->is_constant() && !PatchALot) {
         ciObject* const_oop = obj_type->constant_value();
         if (!const_oop->is_null_object() && const_oop->is_loaded()) {
           ciConstant field_value = field->constant_value_of(const_oop);
           if (field_value.is_valid()) {
-            if (field->is_flattenable() && field_value.is_null_or_zero()) {
-              // Non-flattened but flattenable inline type field. Replace null by the default value.
+            if (field_type == T_INLINE_TYPE && field_value.is_null_or_zero()) {
+              // Non-flattened inline type field. Replace null by the default value.
               constant = new Constant(new InstanceConstant(field->type()->as_value_klass()->default_value_instance()));
             } else {
               constant = make_constant(field_value, field);
             }
             // For CallSite objects add a dependency for invalidation of the optimization.
@@ -2370,11 +2367,11 @@
   for (int i=0; i<args->length(); i++) {
     args->at(0)->set_escaped();
   }
 
   Invoke* result = new Invoke(code, result_type, recv, args, vtable_index, target, state_before,
-                              declared_signature->returns_never_null());
+                              declared_signature->return_type()->is_valuetype());
   // push result
   append_split(result);
 
   if (result_type != voidType) {
     if (method()->is_strict()) {
@@ -2418,11 +2415,11 @@
 
 
 void GraphBuilder::new_object_array() {
   bool will_link;
   ciKlass* klass = stream()->get_klass(will_link);
-  bool never_null = stream()->is_klass_never_null();
+  bool never_null = stream()->is_inline_klass();
   ValueStack* state_before = !klass->is_loaded() || PatchALot ? copy_state_before() : copy_state_exhandling();
   NewArray* n = new NewObjectArray(klass, ipop(), state_before, never_null);
   apush(append_split(n));
 }
 
@@ -2445,11 +2442,11 @@
 
 
 void GraphBuilder::check_cast(int klass_index) {
   bool will_link;
   ciKlass* klass = stream()->get_klass(will_link);
-  bool never_null = stream()->is_klass_never_null();
+  bool never_null = stream()->is_inline_klass();
   ValueStack* state_before = !klass->is_loaded() || PatchALot ? copy_state_before() : copy_state_for_exception();
   CheckCast* c = new CheckCast(klass, apop(), state_before, never_null);
   apush(append_split(c));
   c->set_direct_compare(direct_compare(klass));
 
@@ -3469,11 +3466,11 @@
     ciType* type = sig->type_at(i);
     BasicType basic_type = type->basic_type();
     // don't allow T_ARRAY to propagate into locals types
     if (is_reference_type(basic_type)) basic_type = T_OBJECT;
     ValueType* vt = as_ValueType(basic_type);
-    state->store_local(idx, new Local(type, vt, idx, false, sig->is_never_null_at(i)));
+    state->store_local(idx, new Local(type, vt, idx, false, type->is_valuetype()));
     idx += type->size();
   }
 
   // lock synchronized method
   if (method()->is_synchronized()) {
