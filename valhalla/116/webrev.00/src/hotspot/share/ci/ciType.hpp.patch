diff a/src/hotspot/share/ci/ciType.hpp b/src/hotspot/share/ci/ciType.hpp
--- a/src/hotspot/share/ci/ciType.hpp
+++ b/src/hotspot/share/ci/ciType.hpp
@@ -33,11 +33,10 @@
 
 class ciType : public ciMetadata {
   CI_PACKAGE_ACCESS
   friend class ciKlass;
   friend class ciReturnAddress;
-  friend class ciWrapper;
 
 private:
   BasicType _basic_type;
 
   ciType(BasicType t);     // for primitive and unloaded types
@@ -76,13 +75,10 @@
 
   // What kind of ciObject is this?
   bool is_type() const                      { return true; }
   bool is_classless() const                 { return is_primitive_type(); }
 
-  virtual ciType*     unwrap()              { return this; }
-  virtual bool is_never_null() const        { return false; }
-
   const char* name();
   virtual void print_name_on(outputStream* st);
   void print_name() {
     print_name_on(tty);
   }
@@ -114,34 +110,6 @@
   int  bci() { return _bci; }
 
   static ciReturnAddress* make(int bci);
 };
 
-// ciWrapper
-//
-// This class wraps another type to carry additional information like nullability.
-// Should only be instantiated and used by ciTypeFlow and ciSignature.
-class ciWrapper : public ciType {
-  CI_PACKAGE_ACCESS
-
-private:
-  ciType* _type;
-  bool _never_null;
-
-  ciWrapper(ciType* type, bool never_null) : ciType(type->basic_type()) {
-    assert(type->is_valuetype(), "should only be used for value types");
-    _type = type;
-    _never_null = never_null;
-  }
-
-  const char* type_string() { return "ciWrapper"; }
-
-  void print_impl(outputStream* st) { _type->print_impl(st); }
-
-public:
-  bool    is_wrapper() const { return true; }
-
-  ciType*     unwrap()       { return _type; }
-  bool is_never_null() const { return _never_null; }
-};
-
 #endif // SHARE_CI_CITYPE_HPP
