diff a/src/hotspot/share/opto/parseHelper.cpp b/src/hotspot/share/opto/parseHelper.cpp
--- a/src/hotspot/share/opto/parseHelper.cpp
+++ b/src/hotspot/share/opto/parseHelper.cpp
@@ -67,20 +67,18 @@
 //=============================================================================
 //------------------------------do_checkcast-----------------------------------
 void Parse::do_checkcast() {
   bool will_link;
   ciKlass* klass = iter().get_klass(will_link);
-  bool never_null = iter().is_klass_never_null();
-
   Node *obj = peek();
 
   // Throw uncommon trap if class is not loaded or the value we are casting
   // _from_ is not loaded, and value is not null.  If the value _is_ NULL,
   // then the checkcast does nothing.
   const TypeOopPtr *tp = _gvn.type(obj)->isa_oopptr();
   if (!will_link || (tp && tp->klass() && !tp->klass()->is_loaded())) {
-    assert(!never_null, "Null-free value type should be loaded");
+    assert(!iter().is_inline_klass(), "Inline type should be loaded");
     if (C->log() != NULL) {
       if (!will_link) {
         C->log()->elem("assert_null reason='checkcast' klass='%d'",
                        C->log()->identify(klass));
       }
@@ -96,11 +94,11 @@
       profile_null_checkcast();
     }
     return;
   }
 
-  Node* res = gen_checkcast(obj, makecon(TypeKlassPtr::make(klass)), NULL, never_null);
+  Node* res = gen_checkcast(obj, makecon(TypeKlassPtr::make(klass)));
   if (stopped()) {
     return;
   }
 
   // Pop from stack AFTER gen_checkcast because it can uncommon trap and
@@ -355,27 +353,21 @@
   ciValueKlass* holder_klass = field->holder()->as_value_klass();
   Node* holder = pop();
   int nargs = 1 + field->type()->size();
 
   if (!holder->is_ValueType()) {
-    // Null check and scalarize value type holder
-    inc_sp(nargs);
-    holder = null_check(holder);
-    dec_sp(nargs);
-    if (stopped()) return;
+    // Scalarize value type holder
+    assert(!gvn().type(holder)->maybe_null(), "Inline types are null-free");
     holder = ValueTypeNode::make_from_oop(this, holder, holder_klass);
   }
-  if (!val->is_ValueType() && field->is_flattenable()) {
-    // Null check and scalarize value type field value
-    inc_sp(nargs);
-    val = null_check(val);
-    dec_sp(nargs);
-    if (stopped()) return;
+  if (!val->is_ValueType() && field->type()->is_valuetype()) {
+    // Scalarize value type field value
+    assert(!gvn().type(holder)->maybe_null(), "Inline types are null-free");
     val = ValueTypeNode::make_from_oop(this, val, gvn().type(val)->value_klass());
-  } else if (val->is_ValueType() && !field->is_flattenable()) {
-    // Non-flattenable field value needs to be allocated because it can be merged
-    // with an oop. Re-execute withfield if buffering triggers deoptimization.
+  } else if (val->is_ValueType() && !field->type()->is_valuetype()) {
+    // Field value needs to be allocated because it can be merged with an oop.
+    // Re-execute withfield if buffering triggers deoptimization.
     PreserveReexecuteState preexecs(this);
     jvms()->set_should_reexecute(true);
     inc_sp(nargs);
     val = val->as_ValueType()->buffer(this);
   }
