diff a/src/hotspot/share/prims/jniCheck.cpp b/src/hotspot/share/prims/jniCheck.cpp
--- a/src/hotspot/share/prims/jniCheck.cpp
+++ b/src/hotspot/share/prims/jniCheck.cpp
@@ -366,13 +366,13 @@
     ReportJNIFatalError(thr, fatal_element_type_mismatch);
   }
 }
 
 static inline void
-check_is_obj_array(JavaThread* thr, jarray jArray) {
+check_is_obj_or_inline_array(JavaThread* thr, jarray jArray) {
   arrayOop aOop = check_is_array(thr, jArray);
-  if (!aOop->is_objArray()) {
+  if (!aOop->is_objArray() && !aOop->is_valueArray()) {
     ReportJNIFatalError(thr, fatal_object_array_expected);
   }
 }
 
 /*
@@ -485,11 +485,11 @@
   if (name == NULL) return;  // implementation accepts NULL so just return
 
   size_t len = strlen(name);
 
   if (len >= 2 &&
-      name[0] == JVM_SIGNATURE_CLASS &&            // 'L'
+      (name[0] == JVM_SIGNATURE_CLASS || name[0] == JVM_SIGNATURE_INLINE_TYPE) && // 'L' or 'Q'
       name[len-1] == JVM_SIGNATURE_ENDCLASS ) {    // ';'
     char msg[JVM_MAXPATHLEN];
     jio_snprintf(msg, JVM_MAXPATHLEN, "%s%s%s",
                  warn_bad_class_descriptor1, name, warn_bad_class_descriptor2);
     ReportJNIWarning(thr, msg);
@@ -1634,11 +1634,11 @@
   checked_jni_GetObjectArrayElement(JNIEnv *env,
                                     jobjectArray array,
                                     jsize index))
     functionEnter(thr);
     IN_VM(
-      check_is_obj_array(thr, array);
+      check_is_obj_or_inline_array(thr, array);
     )
     jobject result = UNCHECKED()->GetObjectArrayElement(env,array,index);
     functionExit(thr);
     return result;
 JNI_END
@@ -1648,11 +1648,11 @@
                                     jobjectArray array,
                                     jsize index,
                                     jobject val))
     functionEnter(thr);
     IN_VM(
-      check_is_obj_array(thr, array);
+      check_is_obj_or_inline_array(thr, array);
     )
     UNCHECKED()->SetObjectArrayElement(env,array,index,val);
     functionExit(thr);
 JNI_END
 
