diff a/src/hotspot/share/compiler/compileBroker.cpp b/src/hotspot/share/compiler/compileBroker.cpp
--- a/src/hotspot/share/compiler/compileBroker.cpp
+++ b/src/hotspot/share/compiler/compileBroker.cpp
@@ -590,11 +590,11 @@
 CompilerCounters::CompilerCounters() {
   _current_method[0] = '\0';
   _compile_type = CompileBroker::no_compile;
 }
 
-#if INCLUDE_JFR
+#if INCLUDE_JFR && COMPILER2_OR_JVMCI
 // It appends new compiler phase names to growable array phase_names(a new CompilerPhaseType mapping
 // in compiler/compilerEvent.cpp) and registers it with its serializer.
 //
 // c2 uses explicit CompilerPhaseType idToPhase mapping in opto/phasetype.hpp,
 // so if c2 is used, it should be always registered first.
@@ -606,21 +606,23 @@
     // register serializer, phases will be added later lazily.
     GrowableArray<const char*>* jvmci_phase_names = new GrowableArray<const char*>(1);
     jvmci_phase_names->append("NOT_A_PHASE_NAME");
     CompilerEvent::PhaseEvent::register_phases(jvmci_phase_names);
     first_registration = false;
+#ifdef COMPILER2
   } else if (compiler_type == compiler_c2) {
     assert(first_registration, "invariant"); // c2 must be registered first.
     GrowableArray<const char*>* c2_phase_names = new GrowableArray<const char*>(PHASE_NUM_TYPES);
     for (int i = 0; i < PHASE_NUM_TYPES; i++) {
       c2_phase_names->append(CompilerPhaseTypeHelper::to_string((CompilerPhaseType)i));
     }
     CompilerEvent::PhaseEvent::register_phases(c2_phase_names);
     first_registration = false;
+#endif // COMPILER2
   }
 }
-#endif // INCLUDE_JFR
+#endif // INCLUDE_JFR && COMPILER2_OR_JVMCI
 
 // ------------------------------------------------------------------
 // CompileBroker::compilation_init
 //
 // Initialize the Compilation object
