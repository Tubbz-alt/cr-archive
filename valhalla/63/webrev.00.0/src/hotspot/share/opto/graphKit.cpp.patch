diff a/src/hotspot/share/opto/graphKit.cpp b/src/hotspot/share/opto/graphKit.cpp
--- a/src/hotspot/share/opto/graphKit.cpp
+++ b/src/hotspot/share/opto/graphKit.cpp
@@ -1385,11 +1385,18 @@
     return zerocon(type);
   }
 
   // Cast obj to not-null on this path, if there is no null_control.
   // (If there is a null_control, a non-null value may come back to haunt us.)
-  return cast_not_null(value, (null_control == NULL || (*null_control) == top()));
+  if (type == T_OBJECT) {
+    Node* cast = cast_not_null(value, false);
+    if (null_control == NULL || (*null_control) == top())
+      replace_in_map(value, cast);
+    value = cast;
+  }
+
+  return value;
 }
 
 Node* GraphKit::null2default(Node* value, ciValueKlass* vk) {
   Node* null_ctl = top();
   value = null_check_oop(value, &null_ctl);
@@ -1410,34 +1417,25 @@
 // Cast obj to not-null on this path
 Node* GraphKit::cast_not_null(Node* obj, bool do_replace_in_map) {
   if (obj->is_ValueType()) {
     return obj;
   }
-  Node* cast = NULL;
-  const Type* t = _gvn.type(obj);
-  if (t->make_ptr() != NULL) {
-    const Type* t_not_null = t->join_speculative(TypePtr::NOTNULL);
-    // Object is already not-null?
-    if (t == t_not_null) {
-      return obj;
-    }
-    cast = ConstraintCastNode::make_cast(Op_CastPP, control(), obj, t_not_null, false);
-  } else if (t->isa_int() != NULL) {
-    cast = ConstraintCastNode::make_cast(Op_CastII, control(), obj, TypeInt::INT, true);
-  } else if (t->isa_long() != NULL) {
-    cast = ConstraintCastNode::make_cast(Op_CastLL, control(), obj, TypeLong::LONG, true);
-  } else {
-    fatal("unexpected type: %s", type2name(t->basic_type()));
-  }
-  cast = _gvn.transform(cast);
+  const Type *t = _gvn.type(obj);
+  const Type *t_not_null = t->join_speculative(TypePtr::NOTNULL);
+  // Object is already not-null?
+  if( t == t_not_null ) return obj;
+
+  Node *cast = new CastPPNode(obj,t_not_null);
+  cast->init_req(0, control());
+  cast = _gvn.transform( cast );
 
   // Scan for instances of 'obj' in the current JVM mapping.
   // These instances are known to be not-null after the test.
-  if (do_replace_in_map) {
+  if (do_replace_in_map)
     replace_in_map(obj, cast);
-  }
-  return cast;
+
+  return cast;                  // Return casted value
 }
 
 // Sometimes in intrinsics, we implicitly know an object is not null
 // (there's no actual null check) so we can cast it to not null. In
 // the course of optimizations, the input to the cast can become null.
