diff a/src/jdk.unsupported/share/classes/sun/misc/Unsafe.java b/src/jdk.unsupported/share/classes/sun/misc/Unsafe.java
--- a/src/jdk.unsupported/share/classes/sun/misc/Unsafe.java
+++ b/src/jdk.unsupported/share/classes/sun/misc/Unsafe.java
@@ -28,10 +28,11 @@
 import jdk.internal.vm.annotation.ForceInline;
 import jdk.internal.misc.VM;
 import jdk.internal.reflect.CallerSensitive;
 import jdk.internal.reflect.Reflection;
 
+import java.lang.invoke.MethodHandles;
 import java.lang.reflect.Field;
 import java.util.Set;
 
 
 /**
@@ -637,10 +638,13 @@
     @ForceInline
     public long objectFieldOffset(Field f) {
         if (f == null) {
             throw new NullPointerException();
         }
+        if (f.getDeclaringClass().isHidden()) {
+            throw new UnsupportedOperationException("can't get field offset on a hidden class: " + f);
+        }
         if (f.getDeclaringClass().isInlineClass()) {
             throw new UnsupportedOperationException("can't get field offset on an inline class: " + f);
         }
         return theInternalUnsafe.objectFieldOffset(f);
     }
@@ -665,10 +669,13 @@
     @ForceInline
     public long staticFieldOffset(Field f) {
         if (f == null) {
             throw new NullPointerException();
         }
+        if (f.getDeclaringClass().isHidden()) {
+            throw new UnsupportedOperationException("can't get field offset on a hidden class: " + f);
+        }
         if (f.getDeclaringClass().isInlineClass()) {
             throw new UnsupportedOperationException("can't get static field offset on an inline class: " + f);
         }
         return theInternalUnsafe.staticFieldOffset(f);
     }
@@ -686,10 +693,13 @@
     @ForceInline
     public Object staticFieldBase(Field f) {
         if (f == null) {
             throw new NullPointerException();
         }
+        if (f.getDeclaringClass().isHidden()) {
+            throw new UnsupportedOperationException("can't get base address on a hidden class: " + f);
+        }
         if (f.getDeclaringClass().isInlineClass()) {
             throw new UnsupportedOperationException("can't get base address on an inline class: " + f);
         }
         return theInternalUnsafe.staticFieldBase(f);
     }
@@ -836,15 +846,20 @@
      * <li>Utf8: a string (must have suitable syntax if used as signature or name)
      * <li>Class: any java.lang.Class object
      * <li>String: any object (not just a java.lang.String)
      * <li>InterfaceMethodRef: (NYI) a method handle to invoke on that call site's arguments
      * </ul>
+     *
+     * @deprecated Use the {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass(byte[], boolean, MethodHandles.Lookup.ClassOption...)}
+     * method.
+     *
      * @param hostClass context for linkage, access control, protection domain, and class loader
      * @param data      bytes of a class file
      * @param cpPatches where non-null entries exist, they replace corresponding CP entries in data
      */
     @ForceInline
+    @Deprecated(since = "15", forRemoval = false)
     public Class<?> defineAnonymousClass(Class<?> hostClass, byte[] data, Object[] cpPatches) {
         return theInternalUnsafe.defineAnonymousClass(hostClass, data, cpPatches);
     }
 
     /**
