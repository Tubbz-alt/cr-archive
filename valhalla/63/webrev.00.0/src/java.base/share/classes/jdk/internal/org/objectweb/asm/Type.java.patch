diff a/src/java.base/share/classes/jdk/internal/org/objectweb/asm/Type.java b/src/java.base/share/classes/jdk/internal/org/objectweb/asm/Type.java
--- a/src/java.base/share/classes/jdk/internal/org/objectweb/asm/Type.java
+++ b/src/java.base/share/classes/jdk/internal/org/objectweb/asm/Type.java
@@ -336,11 +336,12 @@
                 currentOffset++;
             }
             char c = methodDescriptor.charAt(currentOffset++);
             if (c == 'L' || c == 'Q') {
                 // Skip the argument descriptor content.
-                currentOffset = methodDescriptor.indexOf(';', currentOffset) + 1;
+                int semiColumnOffset = methodDescriptor.indexOf(';', currentOffset);
+                currentOffset = Math.max(currentOffset, semiColumnOffset + 1);
             }
             ++numArgumentTypes;
         }
 
         // Second step: create a Type instance for each argument type.
@@ -355,11 +356,12 @@
                 currentOffset++;
             }
             char c = methodDescriptor.charAt(currentOffset++);
             if (c == 'L' || c == 'Q') {
                 // Skip the argument descriptor content.
-                currentOffset = methodDescriptor.indexOf(';', currentOffset) + 1;
+                int semiColumnOffset = methodDescriptor.indexOf(';', currentOffset);
+                currentOffset = Math.max(currentOffset, semiColumnOffset + 1);
             }
             argumentTypes[currentArgumentTypeIndex++] =
                     getTypeInternal(methodDescriptor, currentArgumentTypeOffset, currentOffset);
         }
         return argumentTypes;
@@ -395,34 +397,46 @@
       *
       * @param methodDescriptor a method descriptor.
       * @return the {@link Type} corresponding to the return type of the given method descriptor.
       */
     public static Type getReturnType(final String methodDescriptor) {
+        return getTypeInternal(
+                methodDescriptor, getReturnTypeOffset(methodDescriptor), methodDescriptor.length());
+    }
+
+    /**
+      * Returns the {@link Type} corresponding to the return type of the given method.
+      *
+      * @param method a method.
+      * @return the {@link Type} corresponding to the return type of the given method.
+      */
+    public static Type getReturnType(final Method method) {
+        return getType(method.getReturnType());
+    }
+
+    /**
+      * Returns the start index of the return type of the given method descriptor.
+      *
+      * @param methodDescriptor a method descriptor.
+      * @return the start index of the return type of the given method descriptor.
+      */
+    static int getReturnTypeOffset(final String methodDescriptor) {
         // Skip the first character, which is always a '('.
         int currentOffset = 1;
         // Skip the argument types, one at a each loop iteration.
         while (methodDescriptor.charAt(currentOffset) != ')') {
             while (methodDescriptor.charAt(currentOffset) == '[') {
                 currentOffset++;
             }
             char c = methodDescriptor.charAt(currentOffset++);
             if (c == 'L' || c == 'Q') {
                 // Skip the argument descriptor content.
-                currentOffset = methodDescriptor.indexOf(';', currentOffset) + 1;
+                int semiColumnOffset = methodDescriptor.indexOf(';', currentOffset);
+                currentOffset = Math.max(currentOffset, semiColumnOffset + 1);
             }
         }
-        return getTypeInternal(methodDescriptor, currentOffset + 1, methodDescriptor.length());
-    }
-
-    /**
-      * Returns the {@link Type} corresponding to the return type of the given method.
-      *
-      * @param method a method.
-      * @return the {@link Type} corresponding to the return type of the given method.
-      */
-    public static Type getReturnType(final Method method) {
-        return getType(method.getReturnType());
+        return currentOffset + 1;
     }
 
     /**
       * Returns the {@link Type} corresponding to the given field or method descriptor.
       *
@@ -539,15 +553,11 @@
       */
     public String getDescriptor() {
         if (sort == OBJECT) {
             return valueBuffer.substring(valueBegin - 1, valueEnd + 1);
         } else if (sort == INTERNAL) {
-            return new StringBuilder()
-                    .append('L')
-                    .append(valueBuffer, valueBegin, valueEnd)
-                    .append(';')
-                    .toString();
+            return 'L' + valueBuffer.substring(valueBegin, valueEnd) + ';';
         } else {
             return valueBuffer.substring(valueBegin, valueEnd);
         }
     }
 
@@ -665,18 +675,11 @@
             } else {
                 throw new AssertionError();
             }
             stringBuilder.append(descriptor);
         } else {
-            stringBuilder.append(isInlineClass(currentClass) ? 'Q' : 'L');
-            String name = currentClass.getName();
-            int nameLength = name.length();
-            for (int i = 0; i < nameLength; ++i) {
-                char car = name.charAt(i);
-                stringBuilder.append(car == '.' ? '/' : car);
-            }
-            stringBuilder.append(';');
+            stringBuilder.append(isInlineClass(currentClass) ? 'Q' : 'L').append(getInternalName(currentClass)).append(';');
         }
     }
 
     static boolean isInlineClass(Class<?> clazz) {
         int mods = clazz.getModifiers();
@@ -777,11 +780,12 @@
                     currentOffset++;
                 }
                 char c = methodDescriptor.charAt(currentOffset++);
                 if (c == 'L' || c == 'Q') {
                     // Skip the argument descriptor content.
-                    currentOffset = methodDescriptor.indexOf(';', currentOffset) + 1;
+                    int semiColumnOffset = methodDescriptor.indexOf(';', currentOffset);
+                    currentOffset = Math.max(currentOffset, semiColumnOffset + 1);
                 }
                 argumentsSize += 1;
             }
             currentChar = methodDescriptor.charAt(currentOffset);
         }
