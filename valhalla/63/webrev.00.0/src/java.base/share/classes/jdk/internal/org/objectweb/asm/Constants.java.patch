diff a/src/java.base/share/classes/jdk/internal/org/objectweb/asm/Constants.java b/src/java.base/share/classes/jdk/internal/org/objectweb/asm/Constants.java
--- a/src/java.base/share/classes/jdk/internal/org/objectweb/asm/Constants.java
+++ b/src/java.base/share/classes/jdk/internal/org/objectweb/asm/Constants.java
@@ -56,18 +56,23 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 package jdk.internal.org.objectweb.asm;
 
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.regex.Pattern;
+
 /**
  * Defines additional JVM opcodes, access flags and constants which are not part of the ASM public
  * API.
  *
  * @see <a href="https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-6.html">JVMS 6</a>
  * @author Eric Bruneton
  */
-final class Constants implements Opcodes {
+final class Constants {
 
     // The ClassFile attribute names, in the order they are defined in
     // https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-4.html#jvms-4.7-300.
 
     static final String CONSTANT_VALUE = "ConstantValue";
@@ -97,10 +102,12 @@
     static final String MODULE = "Module";
     static final String MODULE_PACKAGES = "ModulePackages";
     static final String MODULE_MAIN_CLASS = "ModuleMainClass";
     static final String NEST_HOST = "NestHost";
     static final String NEST_MEMBERS = "NestMembers";
+    static final String PERMITTED_SUBTYPES = "PermittedSubtypes";
+    static final String RECORD = "Record";
 
     // ASM specific access flags.
     // WARNING: the 16 least significant bits must NOT be used, to avoid conflicts with standard
     // access flags, and also to make sure that these flags are automatically filtered out when
     // written in class files (because access flags are stored using 16 bits only).
@@ -169,43 +176,80 @@
     static final int JSR_W = 201;
 
     // Constants to convert between normal and wide jump instructions.
 
     // The delta between the GOTO_W and JSR_W opcodes and GOTO and JUMP.
-    static final int WIDE_JUMP_OPCODE_DELTA = GOTO_W - GOTO;
+    static final int WIDE_JUMP_OPCODE_DELTA = GOTO_W - Opcodes.GOTO;
 
     // Constants to convert JVM opcodes to the equivalent ASM specific opcodes, and vice versa.
 
     // The delta between the ASM_IFEQ, ..., ASM_IF_ACMPNE, ASM_GOTO and ASM_JSR opcodes
     // and IFEQ, ..., IF_ACMPNE, GOTO and JSR.
     // Offset to next available opcode after WITHFIELD from IFEQ
-    static final int ASM_OPCODE_DELTA = (WITHFIELD + 1) - IFEQ;
+    static final int ASM_OPCODE_DELTA = (Opcodes.WITHFIELD + 1) - Opcodes.IFEQ;
 
     // ASM specific opcodes, used for long forward jump instructions.
 
-    static final int ASM_IFEQ = IFEQ + ASM_OPCODE_DELTA;
-    static final int ASM_IFNE = IFNE + ASM_OPCODE_DELTA;
-    static final int ASM_IFLT = IFLT + ASM_OPCODE_DELTA;
-    static final int ASM_IFGE = IFGE + ASM_OPCODE_DELTA;
-    static final int ASM_IFGT = IFGT + ASM_OPCODE_DELTA;
-    static final int ASM_IFLE = IFLE + ASM_OPCODE_DELTA;
-    static final int ASM_IF_ICMPEQ = IF_ICMPEQ + ASM_OPCODE_DELTA;
-    static final int ASM_IF_ICMPNE = IF_ICMPNE + ASM_OPCODE_DELTA;
-    static final int ASM_IF_ICMPLT = IF_ICMPLT + ASM_OPCODE_DELTA;
-    static final int ASM_IF_ICMPGE = IF_ICMPGE + ASM_OPCODE_DELTA;
-    static final int ASM_IF_ICMPGT = IF_ICMPGT + ASM_OPCODE_DELTA;
-    static final int ASM_IF_ICMPLE = IF_ICMPLE + ASM_OPCODE_DELTA;
-    static final int ASM_IF_ACMPEQ = IF_ACMPEQ + ASM_OPCODE_DELTA;
-    static final int ASM_IF_ACMPNE = IF_ACMPNE + ASM_OPCODE_DELTA;
-    static final int ASM_GOTO = GOTO + ASM_OPCODE_DELTA;
-    static final int ASM_JSR = JSR + ASM_OPCODE_DELTA;
+    static final int ASM_IFEQ = Opcodes.IFEQ + ASM_OPCODE_DELTA;
+    static final int ASM_IFNE = Opcodes.IFNE + ASM_OPCODE_DELTA;
+    static final int ASM_IFLT = Opcodes.IFLT + ASM_OPCODE_DELTA;
+    static final int ASM_IFGE = Opcodes.IFGE + ASM_OPCODE_DELTA;
+    static final int ASM_IFGT = Opcodes.IFGT + ASM_OPCODE_DELTA;
+    static final int ASM_IFLE = Opcodes.IFLE + ASM_OPCODE_DELTA;
+    static final int ASM_IF_ICMPEQ = Opcodes.IF_ICMPEQ + ASM_OPCODE_DELTA;
+    static final int ASM_IF_ICMPNE = Opcodes.IF_ICMPNE + ASM_OPCODE_DELTA;
+    static final int ASM_IF_ICMPLT = Opcodes.IF_ICMPLT + ASM_OPCODE_DELTA;
+    static final int ASM_IF_ICMPGE = Opcodes.IF_ICMPGE + ASM_OPCODE_DELTA;
+    static final int ASM_IF_ICMPGT = Opcodes.IF_ICMPGT + ASM_OPCODE_DELTA;
+    static final int ASM_IF_ICMPLE = Opcodes.IF_ICMPLE + ASM_OPCODE_DELTA;
+    static final int ASM_IF_ACMPEQ = Opcodes.IF_ACMPEQ + ASM_OPCODE_DELTA;
+    static final int ASM_IF_ACMPNE = Opcodes.IF_ACMPNE + ASM_OPCODE_DELTA;
+    static final int ASM_GOTO = Opcodes.GOTO + ASM_OPCODE_DELTA;
+    static final int ASM_JSR = Opcodes.JSR + ASM_OPCODE_DELTA;
 
     // The delta between the ASM_IFNULL and ASM_IFNONNULL opcodes and IFNULL and IFNONNULL.
     // Offset to next available opcode after ASM_JSR from IFNULL.
-    static final int ASM_IFNULL_OPCODE_DELTA = (ASM_JSR + 1) - IFNULL;
+    static final int ASM_IFNULL_OPCODE_DELTA = (ASM_JSR + 1) - Opcodes.IFNULL;
 
-    static final int ASM_IFNULL = IFNULL + ASM_IFNULL_OPCODE_DELTA;
-    static final int ASM_IFNONNULL = IFNONNULL + ASM_IFNULL_OPCODE_DELTA;
+    static final int ASM_IFNULL = Opcodes.IFNULL + ASM_IFNULL_OPCODE_DELTA;
+    static final int ASM_IFNONNULL = Opcodes.IFNONNULL + ASM_IFNULL_OPCODE_DELTA;
     static final int ASM_GOTO_W = GOTO_W + ASM_IFNULL_OPCODE_DELTA;
 
     private Constants() {}
+
+    static void checkAsmExperimental(final Object caller) {
+        Class<?> callerClass = caller.getClass();
+        String internalName = callerClass.getName().replace('.', '/');
+        if (!isWhitelisted(internalName)) {
+            checkIsPreview(callerClass.getClassLoader().getResourceAsStream(internalName + ".class"));
+        }
+    }
+
+    static boolean isWhitelisted(final String internalName) {
+        if (!internalName.startsWith("jdk/internal/org/objectweb/asm/")) {
+            return false;
+        }
+        String member = "(Annotation|Class|Field|Method|Module|RecordComponent|Signature)";
+        return internalName.contains("Test$")
+                || Pattern.matches(
+                        "jdk/internal/org/objectweb/asm/util/Trace" + member + "Visitor(\\$.*)?", internalName)
+                || Pattern.matches(
+                        "jdk/internal/org/objectweb/asm/util/Check" + member + "Adapter(\\$.*)?", internalName);
+    }
+
+    static void checkIsPreview(final InputStream classInputStream) {
+        if (classInputStream == null) {
+            throw new IllegalStateException("Bytecode not available, can't check class version");
+        }
+        int minorVersion;
+        try (DataInputStream callerClassStream = new DataInputStream(classInputStream); ) {
+            callerClassStream.readInt();
+            minorVersion = callerClassStream.readUnsignedShort();
+        } catch (IOException ioe) {
+            throw new IllegalStateException("I/O error, can't check class version", ioe);
+        }
+        if (minorVersion != 0xFFFF) {
+            throw new IllegalStateException(
+                    "ASM9_EXPERIMENTAL can only be used by classes compiled with --enable-preview");
+        }
+    }
 }
