diff a/src/java.base/share/classes/jdk/internal/org/objectweb/asm/commons/AnalyzerAdapter.java b/src/java.base/share/classes/jdk/internal/org/objectweb/asm/commons/AnalyzerAdapter.java
--- a/src/java.base/share/classes/jdk/internal/org/objectweb/asm/commons/AnalyzerAdapter.java
+++ b/src/java.base/share/classes/jdk/internal/org/objectweb/asm/commons/AnalyzerAdapter.java
@@ -145,21 +145,22 @@
             final String owner,
             final int access,
             final String name,
             final String descriptor,
             final MethodVisitor methodVisitor) {
-        this(Opcodes.ASM7, owner, access, name, descriptor, methodVisitor);
+        this(/* latest api = */ Opcodes.ASM8, owner, access, name, descriptor, methodVisitor);
         if (getClass() != AnalyzerAdapter.class) {
             throw new IllegalStateException();
         }
     }
 
     /**
       * Constructs a new {@link AnalyzerAdapter}.
       *
       * @param api the ASM API version implemented by this visitor. Must be one of {@link
-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.
+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link
+      *     Opcodes#ASM8}.
       * @param owner the owner's class name.
       * @param access the method's access flags (see {@link Opcodes}).
       * @param name the method's name.
       * @param descriptor the method's descriptor (see {@link Type}).
       * @param methodVisitor the method visitor to which this adapter delegates calls. May be {@literal
@@ -172,13 +173,13 @@
             final String name,
             final String descriptor,
             final MethodVisitor methodVisitor) {
         super(api, methodVisitor);
         this.owner = owner;
-        locals = new ArrayList<Object>();
-        stack = new ArrayList<Object>();
-        uninitializedTypes = new HashMap<Object, Object>();
+        locals = new ArrayList<>();
+        stack = new ArrayList<>();
+        uninitializedTypes = new HashMap<>();
 
         if ((access & Opcodes.ACC_STATIC) == 0) {
             if ("<init>".equals(name)) {
                 locals.add(Opcodes.UNINITIALIZED_THIS);
             } else {
@@ -234,12 +235,12 @@
 
         if (this.locals != null) {
             this.locals.clear();
             this.stack.clear();
         } else {
-            this.locals = new ArrayList<Object>();
-            this.stack = new ArrayList<Object>();
+            this.locals = new ArrayList<>();
+            this.stack = new ArrayList<>();
         }
         visitFrameTypes(numLocal, local, this.locals);
         visitFrameTypes(numStack, stack, this.stack);
         maxLocals = Math.max(maxLocals, this.locals.size());
         maxStack = Math.max(maxStack, this.stack.size());
@@ -287,11 +288,11 @@
     @Override
     public void visitTypeInsn(final int opcode, final String type) {
         if (opcode == Opcodes.NEW) {
             if (labels == null) {
                 Label label = new Label();
-                labels = new ArrayList<Label>(3);
+                labels = new ArrayList<>(3);
                 labels.add(label);
                 if (mv != null) {
                     mv.visitLabel(label);
                 }
             }
@@ -308,49 +309,25 @@
             final int opcode, final String owner, final String name, final String descriptor) {
         super.visitFieldInsn(opcode, owner, name, descriptor);
         execute(opcode, 0, descriptor);
     }
 
-    /**
-      * Deprecated.
-      *
-      * @deprecated use {@link #visitMethodInsn(int, String, String, String, boolean)} instead.
-      */
-    @Deprecated
     @Override
     public void visitMethodInsn(
-            final int opcode, final String owner, final String name, final String descriptor) {
-        if (api >= Opcodes.ASM5) {
-            super.visitMethodInsn(opcode, owner, name, descriptor);
-            return;
-        }
-        doVisitMethodInsn(opcode, owner, name, descriptor, opcode == Opcodes.INVOKEINTERFACE);
-    }
-
-    @Override
-    public void visitMethodInsn(
-            final int opcode,
+            final int opcodeAndSource,
             final String owner,
             final String name,
             final String descriptor,
             final boolean isInterface) {
-        if (api < Opcodes.ASM5) {
-            super.visitMethodInsn(opcode, owner, name, descriptor, isInterface);
+        if (api < Opcodes.ASM5 && (opcodeAndSource & Opcodes.SOURCE_DEPRECATED) == 0) {
+            // Redirect the call to the deprecated version of this method.
+            super.visitMethodInsn(opcodeAndSource, owner, name, descriptor, isInterface);
             return;
         }
-        doVisitMethodInsn(opcode, owner, name, descriptor, isInterface);
-    }
+        super.visitMethodInsn(opcodeAndSource, owner, name, descriptor, isInterface);
+        int opcode = opcodeAndSource & ~Opcodes.SOURCE_MASK;
 
-    private void doVisitMethodInsn(
-            final int opcode,
-            final String owner,
-            final String name,
-            final String descriptor,
-            final boolean isInterface) {
-        if (mv != null) {
-            mv.visitMethodInsn(opcode, owner, name, descriptor, isInterface);
-        }
         if (this.locals == null) {
             labels = null;
             return;
         }
         pop(descriptor);
@@ -407,11 +384,11 @@
 
     @Override
     public void visitLabel(final Label label) {
         super.visitLabel(label);
         if (labels == null) {
-            labels = new ArrayList<Label>(3);
+            labels = new ArrayList<>(3);
         }
         labels.add(label);
     }
 
     @Override
@@ -524,13 +501,16 @@
     private void push(final Object type) {
         stack.add(type);
         maxStack = Math.max(maxStack, stack.size());
     }
 
-    private void pushDescriptor(final String descriptor) {
-        int index = descriptor.charAt(0) == '(' ? descriptor.indexOf(')') + 1 : 0;
-        switch (descriptor.charAt(index)) {
+    private void pushDescriptor(final String fieldOrMethodDescriptor) {
+        String descriptor =
+                fieldOrMethodDescriptor.charAt(0) == '('
+                        ? Type.getReturnType(fieldOrMethodDescriptor).getDescriptor()
+                        : fieldOrMethodDescriptor;
+        switch (descriptor.charAt(0)) {
             case 'V':
                 return;
             case 'Z':
             case 'C':
             case 'B':
@@ -548,23 +528,15 @@
             case 'D':
                 push(Opcodes.DOUBLE);
                 push(Opcodes.TOP);
                 return;
             case '[':
-                if (index == 0) {
-                    push(descriptor);
-                } else {
-                    push(descriptor.substring(index, descriptor.length()));
-                }
+                push(descriptor);
                 break;
             case 'L':
-        // case 'Q':
-                if (index == 0) {
-                    push(descriptor.substring(1, descriptor.length() - 1));
-                } else {
-                    push(descriptor.substring(index + 1, descriptor.length() - 1));
-                }
+            case 'Q':
+                push(descriptor.substring(1, descriptor.length() - 1));
                 break;
             default:
                 throw new AssertionError();
         }
     }
@@ -596,10 +568,13 @@
             pop(1);
         }
     }
 
     private void execute(final int opcode, final int intArg, final String stringArg) {
+        if (opcode == Opcodes.JSR || opcode == Opcodes.RET) {
+            throw new IllegalArgumentException("JSR/RET are not supported");
+        }
         if (this.locals == null) {
             labels = null;
             return;
         }
         Object value1;
@@ -896,13 +871,10 @@
             case Opcodes.DCMPL:
             case Opcodes.DCMPG:
                 pop(4);
                 push(Opcodes.INTEGER);
                 break;
-            case Opcodes.JSR:
-            case Opcodes.RET:
-                throw new IllegalArgumentException("JSR/RET are not supported");
             case Opcodes.GETSTATIC:
                 pushDescriptor(stringArg);
                 break;
             case Opcodes.PUTSTATIC:
                 pop(stringArg);
