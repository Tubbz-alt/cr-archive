diff a/src/java.base/share/classes/jdk/internal/org/objectweb/asm/commons/Remapper.java b/src/java.base/share/classes/jdk/internal/org/objectweb/asm/commons/Remapper.java
--- a/src/java.base/share/classes/jdk/internal/org/objectweb/asm/commons/Remapper.java
+++ b/src/java.base/share/classes/jdk/internal/org/objectweb/asm/commons/Remapper.java
@@ -139,12 +139,11 @@
         for (int i = 0; i < internalNames.length; ++i) {
             String internalName = internalNames[i];
             String remappedInternalName = mapType(internalName);
             if (remappedInternalName != null) {
                 if (remappedInternalNames == null) {
-                    remappedInternalNames = new String[internalNames.length];
-                    System.arraycopy(internalNames, 0, remappedInternalNames, 0, internalNames.length);
+                    remappedInternalNames = internalNames.clone();
                 }
                 remappedInternalNames[i] = remappedInternalName;
             }
         }
         return remappedInternalNames != null ? remappedInternalNames : internalNames;
@@ -280,11 +279,16 @@
       */
     public String mapInnerClassName(
             final String name, final String ownerName, final String innerName) {
         final String remappedInnerName = this.mapType(name);
         if (remappedInnerName.contains("$")) {
-            return remappedInnerName.substring(remappedInnerName.lastIndexOf('$') + 1);
+            int index = remappedInnerName.lastIndexOf('$') + 1;
+            while (index < remappedInnerName.length()
+                    && Character.isDigit(remappedInnerName.charAt(index))) {
+                index++;
+            }
+            return remappedInnerName.substring(index);
         } else {
             return innerName;
         }
     }
 
@@ -311,10 +315,24 @@
       */
     public String mapInvokeDynamicMethodName(final String name, final String descriptor) {
         return name;
     }
 
+    /**
+      * Maps a record component name to its new name. The default implementation of this method returns
+      * the given name, unchanged. Subclasses can override.
+      *
+      * @param owner the internal name of the owner class of the field.
+      * @param name the name of the field.
+      * @param descriptor the descriptor of the field.
+      * @return the new name of the field.
+      */
+    public String mapRecordComponentName(
+            final String owner, final String name, final String descriptor) {
+        return name;
+    }
+
     /**
       * Maps a field name to its new name. The default implementation of this method returns the given
       * name, unchanged. Subclasses can override.
       *
       * @param owner the internal name of the owner class of the field.
