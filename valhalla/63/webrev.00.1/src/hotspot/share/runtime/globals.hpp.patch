diff a/src/hotspot/share/runtime/globals.hpp b/src/hotspot/share/runtime/globals.hpp
--- a/src/hotspot/share/runtime/globals.hpp
+++ b/src/hotspot/share/runtime/globals.hpp
@@ -763,10 +763,28 @@
           "Use SSE2 MOVQ instruction for Arraycopy")                        \
                                                                             \
   notproduct(bool, PrintFieldLayout, false,                                 \
           "Print field layout for each class")                              \
                                                                             \
+  notproduct(bool, PrintValueLayout, false,                                 \
+          "Print field layout for each value type")                         \
+                                                                            \
+  notproduct(bool, PrintValueArrayLayout, false,                            \
+          "Print array layout for each value type array")                   \
+                                                                            \
+  product(intx, ValueArrayElemMaxFlatSize, -1,                              \
+          "Max size for flattening value array elements, <0 no limit")      \
+                                                                            \
+  product(intx, ValueFieldMaxFlatSize, 128,                                 \
+          "Max size for flattening value type fields, <0 no limit")         \
+                                                                            \
+  product(intx, ValueArrayElemMaxFlatOops, 4,                               \
+          "Max nof embedded object references in a value type to flatten, <0 no limit")  \
+                                                                            \
+  product(bool, ValueArrayAtomicAccess, false,                              \
+          "Atomic value array accesses by-default, for all value arrays")   \
+                                                                            \
   /* Need to limit the extent of the padding to reasonable size.          */\
   /* 8K is well beyond the reasonable HW cache line size, even with       */\
   /* aggressive prefetching, while still leaving the room for segregating */\
   /* among the distinct pages.                                            */\
   product(intx, ContendedPaddingWidth, 128,                                 \
@@ -2475,18 +2493,46 @@
           "Start flight recording with options"))                           \
                                                                             \
   experimental(bool, UseFastUnorderedTimeStamps, false,                     \
           "Use platform unstable time where supported for timestamps only") \
                                                                             \
+  product(bool, EnableValhalla, true,                                       \
+          "Enable experimental Valhalla features")                          \
+                                                                            \
+  product_pd(bool, ValueTypePassFieldsAsArgs,                               \
+          "Pass each value type field as an argument at calls")             \
+                                                                            \
+  product_pd(bool, ValueTypeReturnedAsFields,                               \
+          "Return fields instead of a value type reference")                \
+                                                                            \
+  develop(bool, StressValueTypeReturnedAsFields, false,                     \
+          "Stress return of fields instead of a value type reference")      \
+                                                                            \
+  develop(bool, ScalarizeValueTypes, true,                                  \
+          "Scalarize value types in compiled code")                         \
+                                                                            \
+  diagnostic(ccstrlist, ForceNonTearable, "",                               \
+          "List of inline classes which are forced to be atomic "           \
+          "(whitespace and commas separate names, "                         \
+          "and leading and trailing stars '*' are wildcards)")              \
+                                                                            \
+  product(bool, PrintNewLayout, false,                                      \
+               "Print layout compute by new algorithm")                     \
+                                                                            \
+  product(bool, PrintFlattenableLayouts, false,                             \
+                "Print layout of inline classes and classes with "          \
+                "flattenable fields")                                       \
+                                                                            \
   product(bool, UseNewFieldLayout, true,                                    \
-               "(Deprecated) Use new algorithm to compute field layouts")   \
+                "(Deprecated) Use new algorithm to compute field layouts")  \
                                                                             \
   product(bool, UseEmptySlotsInSupers, true,                                \
                 "Allow allocating fields in empty slots of super-classes")  \
                                                                             \
 
 
+
 // Interface macros
 #define DECLARE_PRODUCT_FLAG(type, name, value, doc)      extern "C" type name;
 #define DECLARE_PD_PRODUCT_FLAG(type, name, doc)          extern "C" type name;
 #define DECLARE_DIAGNOSTIC_FLAG(type, name, value, doc)   extern "C" type name;
 #define DECLARE_PD_DIAGNOSTIC_FLAG(type, name, doc)       extern "C" type name;
