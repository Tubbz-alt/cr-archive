diff a/src/java.base/share/classes/java/lang/invoke/DirectMethodHandle.java b/src/java.base/share/classes/java/lang/invoke/DirectMethodHandle.java
--- a/src/java.base/share/classes/java/lang/invoke/DirectMethodHandle.java
+++ b/src/java.base/share/classes/java/lang/invoke/DirectMethodHandle.java
@@ -111,17 +111,17 @@
         } else {
             LambdaForm lform = preparedFieldLambdaForm(member);
             if (member.isStatic()) {
                 long offset = MethodHandleNatives.staticFieldOffset(member);
                 Object base = MethodHandleNatives.staticFieldBase(member);
-                return member.isIndirect() ? new IndirectStaticAccessor(mtype, lform, member, base, offset)
-                                           : new InlineStaticAccessor(mtype, lform, member, base, offset);
+                return member.isInlineableField() ? new InlineStaticAccessor(mtype, lform, member, true, base, offset)
+                                                  : new StaticAccessor(mtype, lform, member, true, base, offset);
             } else {
                 long offset = MethodHandleNatives.objectFieldOffset(member);
                 assert(offset == (int)offset);
-                return  member.isIndirect() ? new IndirectAccessor(mtype, lform, member, (int)offset)
-                                            : new InlineAccessor(mtype, lform, member, (int)offset);
+                return  member.isInlineableField() ? new InlineAccessor(mtype, lform, member, true, (int)offset)
+                                                   : new Accessor(mtype, lform, member, true, (int)offset);
             }
         }
     }
     static DirectMethodHandle make(Class<?> refc, MemberName member) {
         byte refKind = member.getReferenceKind();
@@ -520,57 +520,52 @@
         Constructor dmh = (Constructor)mh;
         return UNSAFE.allocateInstance(dmh.instanceClass);
     }
 
     /** This subclass handles non-static field references. */
-    static abstract class Accessor extends DirectMethodHandle {
+    static class Accessor extends DirectMethodHandle {
         final Class<?> fieldType;
         final int      fieldOffset;
         private Accessor(MethodType mtype, LambdaForm form, MemberName member,
                          boolean crackable, int fieldOffset) {
             super(mtype, form, member, crackable);
             this.fieldType   = member.getFieldType();
             this.fieldOffset = fieldOffset;
         }
-        abstract Object checkCast(Object obj);
-        abstract MethodHandle copyWith(MethodType mt, LambdaForm lf);
-    }
-
-    /** This subclass handles non-static field references of indirect type */
-    static class IndirectAccessor extends Accessor {
-        private IndirectAccessor(MethodType mtype, LambdaForm form, MemberName member,
-                                 int fieldOffset) {
-            super(mtype, form, member, true, fieldOffset);
-        }
 
         @Override Object checkCast(Object obj) {
             return fieldType.cast(obj);
         }
         @Override
         MethodHandle copyWith(MethodType mt, LambdaForm lf) {
-            return new IndirectAccessor(mt, lf, member, fieldOffset);
+            return new Accessor(mt, lf, member, crackable, fieldOffset);
         }
         @Override
         MethodHandle viewAsType(MethodType newType, boolean strict) {
             assert(viewAsTypeChecks(newType, strict));
-            return new IndirectAccessor(newType, form, member, fieldOffset);
+            return new Accessor(newType, form, member, false, fieldOffset);
         }
     }
 
     /** This subclass handles non-static field references of inline type */
     static class InlineAccessor extends Accessor {
         private InlineAccessor(MethodType mtype, LambdaForm form, MemberName member,
-                               int fieldOffset) {
-            super(mtype, form, member, true, fieldOffset);
+                               boolean crackable, int fieldOffset) {
+            super(mtype, form, member, crackable, fieldOffset);
         }
 
         @Override Object checkCast(Object obj) {
             return fieldType.cast(Objects.requireNonNull(obj));
         }
         @Override
         MethodHandle copyWith(MethodType mt, LambdaForm lf) {
-            return new InlineAccessor(mt, lf, member, fieldOffset);
+            return new InlineAccessor(mt, lf, member, crackable, fieldOffset);
+        }
+        @Override
+        MethodHandle viewAsType(MethodType newType, boolean strict) {
+            assert(viewAsTypeChecks(newType, strict));
+            return new InlineAccessor(newType, form, member, false, fieldOffset);
         }
     }
 
     @ForceInline
     /*non-public*/
@@ -591,11 +586,11 @@
         // Since this check is *not* guaranteed by Unsafe.getInt
         // and its siblings, we need to make an explicit one here.
         return Objects.requireNonNull(obj);
     }
 
-    static abstract class StaticAccessor extends DirectMethodHandle {
+    static class StaticAccessor extends DirectMethodHandle {
         final Class<?> fieldType;
         final Object staticBase;
         final long staticOffset;
 
         private StaticAccessor(MethodType mtype, LambdaForm form, MemberName member,
@@ -603,51 +598,45 @@
             super(mtype, form, member, crackable);
             this.fieldType    = member.getFieldType();
             this.staticBase   = staticBase;
             this.staticOffset = staticOffset;
         }
-        abstract Object checkCast(Object obj);
-        abstract MethodHandle copyWith(MethodType mt, LambdaForm lf);
-    }
-
-    /** This subclass handles static field references of indirect type. */
-    static class IndirectStaticAccessor extends StaticAccessor {
-        private IndirectStaticAccessor(MethodType mtype, LambdaForm form, MemberName member,
-                                     Object staticBase, long staticOffset) {
-            super(mtype, form, member, true, staticBase, staticOffset);
-        }
 
-        // indirect type is always nullable
         @Override Object checkCast(Object obj) {
             return fieldType.cast(obj);
         }
         @Override
         MethodHandle copyWith(MethodType mt, LambdaForm lf) {
-            return new IndirectStaticAccessor(mt, lf, member, staticBase, staticOffset);
+            return new StaticAccessor(mt, lf, member, crackable, staticBase, staticOffset);
         }
         @Override
         MethodHandle viewAsType(MethodType newType, boolean strict) {
             assert(viewAsTypeChecks(newType, strict));
-            return new IndirectStaticAccessor(newType, form, member, staticBase, staticOffset);
+            return new StaticAccessor(newType, form, member, false, staticBase, staticOffset);
         }
     }
 
     /** This subclass handles static field references of inline type . */
     static class InlineStaticAccessor extends StaticAccessor {
         private InlineStaticAccessor(MethodType mtype, LambdaForm form, MemberName member,
-                                     Object staticBase, long staticOffset) {
-            super(mtype, form, member, true, staticBase, staticOffset);
+                                     boolean crackable, Object staticBase, long staticOffset) {
+            super(mtype, form, member, crackable, staticBase, staticOffset);
         }
 
         // zero-default inline type is not-nullable
         @Override Object checkCast(Object obj) {
             assert fieldType.isInlineClass() : "null-default inline type not yet supported";
             return fieldType.cast(Objects.requireNonNull(obj));
         }
         @Override
         MethodHandle copyWith(MethodType mt, LambdaForm lf) {
-            return new InlineStaticAccessor(mt, lf, member, staticBase, staticOffset);
+            return new InlineStaticAccessor(mt, lf, member, crackable, staticBase, staticOffset);
+        }
+        @Override
+        MethodHandle viewAsType(MethodType newType, boolean strict) {
+            assert(viewAsTypeChecks(newType, strict));
+            return new InlineStaticAccessor(newType, form, member, false, staticBase, staticOffset);
         }
     }
 
     @ForceInline
     /*non-public*/
@@ -738,16 +727,16 @@
         case REF_putStatic:     formOp = AF_PUTSTATIC;   break;
         default:  throw new InternalError(m.toString());
         }
         if (shouldBeInitialized(m)) {
             // precompute the barrier-free version:
-            preparedFieldLambdaForm(formOp, m.isVolatile(), m.isInlineable(), m.isFlattened(), ftype);
+            preparedFieldLambdaForm(formOp, m.isVolatile(), m.isInlineableField(), m.isFlattened(), ftype);
             assert((AF_GETSTATIC_INIT - AF_GETSTATIC) ==
                    (AF_PUTSTATIC_INIT - AF_PUTSTATIC));
             formOp += (AF_GETSTATIC_INIT - AF_GETSTATIC);
         }
-        LambdaForm lform = preparedFieldLambdaForm(formOp, m.isVolatile(), m.isInlineable(), m.isFlattened(), ftype);
+        LambdaForm lform = preparedFieldLambdaForm(formOp, m.isVolatile(), m.isInlineableField(), m.isFlattened(), ftype);
         maybeCompile(lform, m);
         assert(lform.methodType().dropParameterTypes(0, 1)
                 .equals(m.getInvocationType().basicType()))
                 : Arrays.asList(m, m.getInvocationType().basicType(), lform, lform.methodType());
         return lform;
