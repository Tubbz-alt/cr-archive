diff a/src/hotspot/share/runtime/sharedRuntime.cpp b/src/hotspot/share/runtime/sharedRuntime.cpp
--- a/src/hotspot/share/runtime/sharedRuntime.cpp
+++ b/src/hotspot/share/runtime/sharedRuntime.cpp
@@ -3659,11 +3659,11 @@
 }
 JRT_END
 
 // We're returning from an interpreted method: load each field into a
 // register following the calling convention
-JRT_LEAF(void, SharedRuntime::load_value_type_fields_in_regs(JavaThread* thread, oopDesc* res))
+JRT_LEAF(void, SharedRuntime::load_inline_type_fields_in_regs(JavaThread* thread, oopDesc* res))
 {
   assert(res->klass()->is_inline_klass(), "only inline types here");
   ResourceMark rm;
   RegisterMap reg_map(thread);
   frame stubFrame = thread->last_frame();
@@ -3674,11 +3674,11 @@
 
   const Array<SigEntry>* sig_vk = vk->extended_sig();
   const Array<VMRegPair>* regs = vk->return_regs();
 
   if (regs == NULL) {
-    // The fields of the value klass don't fit in registers, bail out
+    // The fields of the inline klass don't fit in registers, bail out
     return;
   }
 
   int j = 1;
   for (int i = 0; i < sig_vk->length(); i++) {
@@ -3748,13 +3748,13 @@
   thread->set_vm_result(res);
 }
 JRT_END
 
 // We've returned to an interpreted method, the interpreter needs a
-// reference to a value type instance. Allocate it and initialize it
+// reference to an inline type instance. Allocate it and initialize it
 // from field's values in registers.
-JRT_BLOCK_ENTRY(void, SharedRuntime::store_value_type_fields_to_buf(JavaThread* thread, intptr_t res))
+JRT_BLOCK_ENTRY(void, SharedRuntime::store_inline_type_fields_to_buf(JavaThread* thread, intptr_t res))
 {
   ResourceMark rm;
   RegisterMap reg_map(thread);
   frame stubFrame = thread->last_frame();
   frame callerFrame = stubFrame.sender(&reg_map);
@@ -3762,12 +3762,12 @@
 #ifdef ASSERT
   InlineKlass* verif_vk = InlineKlass::returned_inline_klass(reg_map);
 #endif
 
   if (!is_set_nth_bit(res, 0)) {
-    // We're not returning with value type fields in registers (the
-    // calling convention didn't allow it for this value klass)
+    // We're not returning with inline type fields in registers (the
+    // calling convention didn't allow it for this inline klass)
     assert(!Metaspace::contains((void*)res), "should be oop or pointer in buffer area");
     thread->set_vm_result((oopDesc*)res);
     assert(verif_vk == NULL, "broken calling convention");
     return;
   }
