diff a/src/hotspot/share/runtime/stubRoutines.hpp b/src/hotspot/share/runtime/stubRoutines.hpp
--- a/src/hotspot/share/runtime/stubRoutines.hpp
+++ b/src/hotspot/share/runtime/stubRoutines.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -261,12 +261,12 @@
   static address _safefetch32_continuation_pc;
   static address _safefetchN_entry;
   static address _safefetchN_fault_pc;
   static address _safefetchN_continuation_pc;
 
-  static address _load_value_type_fields_in_regs;
-  static address _store_value_type_fields_to_buf;
+  static address _load_inline_type_fields_in_regs;
+  static address _store_inline_type_fields_to_buf;
 
  public:
   // Initialization/Testing
   static void    initialize1();                            // must happen before universe::genesis
   static void    initialize2();                            // must happen after  universe::genesis
@@ -483,12 +483,12 @@
   static void arrayof_jint_copy      (HeapWord* src, HeapWord* dest, size_t count);
   static void arrayof_jlong_copy     (HeapWord* src, HeapWord* dest, size_t count);
   static void arrayof_oop_copy       (HeapWord* src, HeapWord* dest, size_t count);
   static void arrayof_oop_copy_uninit(HeapWord* src, HeapWord* dest, size_t count);
 
-  static address load_value_type_fields_in_regs() { return _load_value_type_fields_in_regs; }
-  static address store_value_type_fields_to_buf() { return _store_value_type_fields_to_buf; }
+  static address load_inline_type_fields_in_regs() { return _load_inline_type_fields_in_regs; }
+  static address store_inline_type_fields_to_buf() { return _store_inline_type_fields_to_buf; }
 };
 
 // Safefetch allows to load a value from a location that's not known
 // to be valid. If the load causes a fault, the error value is returned.
 inline int SafeFetch32(int* adr, int errValue) {
