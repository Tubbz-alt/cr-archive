diff a/src/hotspot/cpu/x86/macroAssembler_x86.cpp b/src/hotspot/cpu/x86/macroAssembler_x86.cpp
--- a/src/hotspot/cpu/x86/macroAssembler_x86.cpp
+++ b/src/hotspot/cpu/x86/macroAssembler_x86.cpp
@@ -3614,11 +3614,11 @@
 
   bind(done);
 }
 
 void MacroAssembler::get_value_field_klass(Register klass, Register index, Register value_klass) {
-  movptr(value_klass, Address(klass, InstanceKlass::value_field_klasses_offset()));
+  movptr(value_klass, Address(klass, InstanceKlass::inline_type_field_klasses_offset()));
 #ifdef ASSERT
   {
     Label done;
     cmpptr(value_klass, 0);
     jcc(Assembler::notEqual, done);
diff a/src/hotspot/share/ci/ciInstanceKlass.cpp b/src/hotspot/share/ci/ciInstanceKlass.cpp
--- a/src/hotspot/share/ci/ciInstanceKlass.cpp
+++ b/src/hotspot/share/ci/ciInstanceKlass.cpp
@@ -550,11 +550,11 @@
     fieldDescriptor& fd = fs.field_descriptor();
     if (fd.is_inlined() && flatten) {
       // Value type fields are embedded
       int field_offset = fd.offset();
       // Get ValueKlass and adjust number of fields
-      Klass* k = get_instanceKlass()->get_value_field_klass(fd.index());
+      Klass* k = get_instanceKlass()->get_inline_type_field_klass(fd.index());
       ciValueKlass* vk = CURRENT_ENV->get_klass(k)->as_value_klass();
       flen += vk->nof_nonstatic_fields() - 1;
       // Iterate over fields of the flattened value type and copy them to 'this'
       for (int i = 0; i < vk->nof_nonstatic_fields(); ++i) {
         ciField* flattened_field = vk->nonstatic_field_at(i);
diff a/src/hotspot/share/ci/ciReplay.cpp b/src/hotspot/share/ci/ciReplay.cpp
--- a/src/hotspot/share/ci/ciReplay.cpp
+++ b/src/hotspot/share/ci/ciReplay.cpp
@@ -850,11 +850,11 @@
         bool res = _replay->process_staticfield_reference(string_value, _vt, fd, THREAD);
         assert(res, "should succeed for arrays & objects");
         break;
       }
       case T_VALUETYPE: {
-        ValueKlass* vk = ValueKlass::cast(fd->field_holder()->get_value_field_klass(fd->index()));
+        ValueKlass* vk = ValueKlass::cast(fd->field_holder()->get_inline_type_field_klass(fd->index()));
         if (fd->is_inlined()) {
           int field_offset = fd->offset() - vk->first_field_offset();
           oop obj = (oop)(cast_from_oop<address>(_vt) + field_offset);
           ValueTypeFieldInitializer init_fields(obj, _replay);
           vk->do_nonstatic_fields(&init_fields);
diff a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -6430,20 +6430,20 @@
   }
 
   int nfields = ik->java_fields_count();
   if (ik->is_inline_klass()) nfields++;
   for (int i = 0; i < nfields; i++) {
-    if (ik->field_is_inline_type(i)) {
+    if (ik->field_is_inline_type(i) && ((ik->field_access_flags(i) & JVM_ACC_STATIC) == 0)) {
       Symbol* klass_name = ik->field_signature(i)->fundamental_name(CHECK);
       // Inline classes for instance fields must have been pre-loaded
       // Inline classes for static fields might not have been loaded yet
       Klass* klass = SystemDictionary::find(klass_name,
           Handle(THREAD, ik->class_loader()),
           Handle(THREAD, ik->protection_domain()), CHECK);
       if (klass != NULL) {
         assert(klass->access_flags().is_inline_type(), "Inline type expected");
-        ik->set_value_field_klass(i, klass);
+        ik->set_inline_type_field_klass(i, klass);
       }
       klass_name->decrement_refcount();
     } else
       if (is_inline_type() && ((ik->field_access_flags(i) & JVM_ACC_FIELD_INTERNAL) != 0)
         && ((ik->field_access_flags(i) & JVM_ACC_STATIC) != 0)) {
diff a/src/hotspot/share/classfile/fieldLayoutBuilder.cpp b/src/hotspot/share/classfile/fieldLayoutBuilder.cpp
--- a/src/hotspot/share/classfile/fieldLayoutBuilder.cpp
+++ b/src/hotspot/share/classfile/fieldLayoutBuilder.cpp
@@ -319,11 +319,11 @@
       // distinction between static and non-static fields is missing
       if (fs.access_flags().is_static()) continue;
       has_instance_fields = true;
       LayoutRawBlock* block;
       if (type == T_VALUETYPE) {
-        ValueKlass* vk = ValueKlass::cast(ik->get_value_field_klass(fs.index()));
+        ValueKlass* vk = ValueKlass::cast(ik->get_inline_type_field_klass(fs.index()));
         block = new LayoutRawBlock(fs.index(), LayoutRawBlock::INHERITED, vk->get_exact_size_in_bytes(),
                                    vk->get_alignment(), false);
 
       } else {
         int size = type2aelembytes(type);
diff a/src/hotspot/share/classfile/javaClasses.cpp b/src/hotspot/share/classfile/javaClasses.cpp
--- a/src/hotspot/share/classfile/javaClasses.cpp
+++ b/src/hotspot/share/classfile/javaClasses.cpp
@@ -1069,10 +1069,12 @@
         assert(super->access_flags().is_abstract(), "must be an abstract class");
         oop ref_type_oop = super->java_mirror();
         // set the reference projection type
         set_ref_type_mirror(mirror(), ref_type_oop);
 
+        assert(oopDesc::is_oop(ref_type_oop), "Sanity check");
+
         // set the value and reference projection types
         set_val_type_mirror(ref_type_oop, mirror());
         set_ref_type_mirror(ref_type_oop, ref_type_oop);
       }
     }
@@ -1126,10 +1128,11 @@
         _m()->short_field_put(fd->offset(), 0);
         break;
       case T_BOOLEAN:
         _m()->bool_field_put(fd->offset(), false);
         break;
+      case T_VALUETYPE:
       case T_ARRAY:
       case T_OBJECT: {
         // It might be useful to cache the String field, but
         // for now just clear out any reference field
         oop o = _m()->obj_field(fd->offset());
diff a/src/hotspot/share/classfile/systemDictionary.cpp b/src/hotspot/share/classfile/systemDictionary.cpp
--- a/src/hotspot/share/classfile/systemDictionary.cpp
+++ b/src/hotspot/share/classfile/systemDictionary.cpp
@@ -1478,10 +1478,30 @@
 
   if (!check_shared_class_super_types(ik, class_loader, protection_domain, THREAD)) {
     return NULL;
   }
 
+
+  if (ik->has_inline_type_fields()) {
+    for (AllFieldStream fs(ik->fields(), ik->constants()); !fs.done(); fs.next()) {
+      if (Signature::basic_type(fs.signature()) == T_VALUETYPE) {
+        if (!fs.access_flags().is_static()) {
+          // Pre-load inline class
+          Klass* real_k = SystemDictionary::resolve_inline_type_field_or_fail(&fs,
+            class_loader, protection_domain, true, CHECK_NULL);
+          Klass* k = ik->get_inline_type_field_klass_or_null(fs.index());
+          if (real_k != k) {
+            // oops, the app has substituted a different version of k!
+            return NULL;
+          }
+        } else {
+         ik->reset_inline_type_field_klass(fs.index());
+        }
+      }
+    }
+  }
+
   InstanceKlass* new_ik = NULL;
   // CFLH check is skipped for VM hidden or anonymous classes (see KlassFactory::create_from_stream).
   // It will be skipped for shared VM hidden lambda proxy classes.
   if (!SystemDictionaryShared::is_hidden_lambda_proxy(ik)) {
     new_ik = KlassFactory::check_shared_class_file_load_hook(
@@ -1514,10 +1534,17 @@
     // restore_unshareable_info which calls ik->set_package()
     ik->restore_unshareable_info(loader_data, protection_domain, pkg_entry, CHECK_NULL);
   }
 
   load_shared_class_misc(ik, loader_data, CHECK_NULL);
+
+  if (ik->is_inline_klass()) {
+    ValueKlass* vk = ValueKlass::cast(ik);
+    oop val = ik->allocate_instance(CHECK_NULL);
+    vk->set_default_value(val);
+  }
+
   return ik;
 }
 
 void SystemDictionary::load_shared_class_misc(InstanceKlass* ik, ClassLoaderData* loader_data, TRAPS) {
   ik->print_class_load_logging(loader_data, NULL, NULL);
@@ -1577,10 +1604,25 @@
     if (ik->class_loader_data()  == NULL) {
       quick_resolve(ik, loader_data, domain, CHECK);
     }
   }
 
+  if (klass->has_inline_type_fields()) {
+    for (AllFieldStream fs(klass->fields(), klass->constants()); !fs.done(); fs.next()) {
+      if (Signature::basic_type(fs.signature()) == T_VALUETYPE) {
+        if (!fs.access_flags().is_static()) {
+          Klass* real_k = SystemDictionary::resolve_inline_type_field_or_fail(&fs,
+            Handle(THREAD, loader_data->class_loader()), domain, true, CHECK);
+          Klass* k = klass->get_inline_type_field_klass_or_null(fs.index());
+          assert(real_k == k, "oops, the app has substituted a different version of k!");
+        } else {
+          klass->reset_inline_type_field_klass(fs.index());
+        }
+      }
+    }
+  }
+
   klass->restore_unshareable_info(loader_data, domain, NULL, THREAD);
   load_shared_class_misc(klass, loader_data, CHECK);
   Dictionary* dictionary = loader_data->dictionary();
   unsigned int hash = dictionary->compute_hash(klass->name());
   dictionary->add_klass(hash, klass->name(), klass);
diff a/src/hotspot/share/interpreter/interpreterRuntime.cpp b/src/hotspot/share/interpreter/interpreterRuntime.cpp
--- a/src/hotspot/share/interpreter/interpreterRuntime.cpp
+++ b/src/hotspot/share/interpreter/interpreterRuntime.cpp
@@ -353,11 +353,11 @@
     new_value_h()->obj_field_put(field_offset, aoop);
   } else if (field_type == T_VALUETYPE) {
     if (cp_entry->is_inlined()) {
       oop vt_oop = *(oop*)f.interpreter_frame_expression_stack_at(tos_idx);
       assert(vt_oop != NULL && oopDesc::is_oop(vt_oop) && vt_oop->is_inline_type(),"argument must be an inline type");
-      ValueKlass* field_vk = ValueKlass::cast(vklass->get_value_field_klass(field_index));
+      ValueKlass* field_vk = ValueKlass::cast(vklass->get_inline_type_field_klass(field_index));
       assert(vt_oop != NULL && field_vk == vt_oop->klass(), "Must match");
       field_vk->write_inlined_field(new_value_h(), offset, vt_oop, CHECK_(return_offset));
     } else { // not inlined
       oop voop = *(oop*)f.interpreter_frame_expression_stack_at(tos_idx);
       if (voop == NULL && cp_entry->is_inline_type()) {
@@ -390,18 +390,18 @@
   // If the class is being initialized, the default value is returned.
   instanceHandle mirror_h(THREAD, (instanceOop)mirror);
   InstanceKlass* klass = InstanceKlass::cast(java_lang_Class::as_Klass(mirror));
   if (klass->is_being_initialized() && klass->is_reentrant_initialization(THREAD)) {
     int offset = klass->field_offset(index);
-    Klass* field_k = klass->get_value_field_klass_or_null(index);
+    Klass* field_k = klass->get_inline_type_field_klass_or_null(index);
     if (field_k == NULL) {
       field_k = SystemDictionary::resolve_or_fail(klass->field_signature(index)->fundamental_name(THREAD),
           Handle(THREAD, klass->class_loader()),
           Handle(THREAD, klass->protection_domain()),
           true, CHECK);
       assert(field_k != NULL, "Should have been loaded or an exception thrown above");
-      klass->set_value_field_klass(index, field_k);
+      klass->set_inline_type_field_klass(index, field_k);
     }
     field_k->initialize(CHECK);
     oop defaultvalue = ValueKlass::cast(field_k)->default_value();
     // It is safe to initialized the static field because 1) the current thread is the initializing thread
     // and is the only one that can access it, and 2) the field is actually not initialized (i.e. null)
@@ -433,11 +433,11 @@
   assert(field_holder->is_instance_klass(), "Sanity check");
   InstanceKlass* klass = InstanceKlass::cast(field_holder);
 
   assert(klass->field_is_inlined(index), "Sanity check");
 
-  ValueKlass* field_vklass = ValueKlass::cast(klass->get_value_field_klass(index));
+  ValueKlass* field_vklass = ValueKlass::cast(klass->get_inline_type_field_klass(index));
   assert(field_vklass->is_initialized(), "Must be initialized at this point");
 
   oop res = field_vklass->read_inlined_field(obj_h(), klass->field_offset(index), CHECK);
   thread->set_vm_result(res);
 JRT_END
diff a/src/hotspot/share/memory/heapInspection.cpp b/src/hotspot/share/memory/heapInspection.cpp
--- a/src/hotspot/share/memory/heapInspection.cpp
+++ b/src/hotspot/share/memory/heapInspection.cpp
@@ -563,11 +563,11 @@
     int offset2 = offset + fd.offset() - vklass->first_field_offset();
     print_field(st, level, offset2, fd,
         fd.is_inline_type(), fd.holder()->field_is_inlined(fd.index()));
     if (fd.holder()->field_is_inlined(fd.index())) {
       print_inlined_field(st, level + 1, offset2 ,
-          InstanceKlass::cast(fd.holder()->get_value_field_klass(fd.index())));
+          InstanceKlass::cast(fd.holder()->get_inline_type_field_klass(fd.index())));
     }
   }
 }
 
 void PrintClassLayout::print_class_layout(outputStream* st, char* class_name) {
@@ -604,11 +604,11 @@
     for(int i = 0; i < fields->length(); i++) {
       FieldDesc fd = fields->at(i);
       print_field(st, 0, fd.offset(), fd, fd.is_inline_type(), fd.holder()->field_is_inlined(fd.index()));
       if (fd.holder()->field_is_inlined(fd.index())) {
         print_inlined_field(st, 1, fd.offset(),
-            InstanceKlass::cast(fd.holder()->get_value_field_klass(fd.index())));
+            InstanceKlass::cast(fd.holder()->get_inline_type_field_klass(fd.index())));
       }
     }
   }
   st->cr();
 }
diff a/src/hotspot/share/oops/constantPool.cpp b/src/hotspot/share/oops/constantPool.cpp
--- a/src/hotspot/share/oops/constantPool.cpp
+++ b/src/hotspot/share/oops/constantPool.cpp
@@ -400,18 +400,19 @@
   // class redefinition. Since shared ConstantPools cannot be deallocated anyway,
   // we always set _on_stack to true to avoid having to change _flags during runtime.
   _flags |= (_on_stack | _is_shared);
   int num_klasses = 0;
   for (int index = 1; index < length(); index++) { // Index 0 is unused
+    jbyte qdesc_bit = tag_at(index).is_Qdescriptor_klass() ? (jbyte) JVM_CONSTANT_QDescBit : 0;
     if (!DynamicDumpSharedSpaces) {
       assert(!tag_at(index).is_unresolved_klass_in_error(), "This must not happen during static dump time");
     } else {
       if (tag_at(index).is_unresolved_klass_in_error() ||
           tag_at(index).is_method_handle_in_error()    ||
           tag_at(index).is_method_type_in_error()      ||
           tag_at(index).is_dynamic_constant_in_error()) {
-        tag_at_put(index, JVM_CONSTANT_UnresolvedClass);
+        tag_at_put(index, JVM_CONSTANT_UnresolvedClass | qdesc_bit);
       }
     }
     if (tag_at(index).is_klass()) {
       // This class was resolved as a side effect of executing Java code
       // during dump time. We need to restore it back to an UnresolvedClass,
@@ -427,11 +428,11 @@
         CPKlassSlot kslot = klass_slot_at(index);
         int resolved_klass_index = kslot.resolved_klass_index();
         int name_index = kslot.name_index();
         assert(tag_at(name_index).is_symbol(), "sanity");
         resolved_klasses()->at_put(resolved_klass_index, NULL);
-        tag_at_put(index, JVM_CONSTANT_UnresolvedClass);
+        tag_at_put(index, JVM_CONSTANT_UnresolvedClass | qdesc_bit);
         assert(klass_name_at(index) == symbol_at(name_index), "sanity");
       }
     }
   }
   if (cache() != NULL) {
@@ -562,11 +563,15 @@
 
   // Failed to resolve class. We must record the errors so that subsequent attempts
   // to resolve this constant pool entry fail with the same error (JVMS 5.4.3).
   if (HAS_PENDING_EXCEPTION) {
     if (save_resolution_error) {
-      save_and_throw_exception(this_cp, which, constantTag(JVM_CONSTANT_UnresolvedClass), CHECK_NULL);
+      jbyte tag = JVM_CONSTANT_UnresolvedClass;
+      if (this_cp->tag_at(which).is_Qdescriptor_klass()) {
+        tag |= JVM_CONSTANT_QDescBit;
+      }
+      save_and_throw_exception(this_cp, which, constantTag(tag), CHECK_NULL);
       // If CHECK_NULL above doesn't return the exception, that means that
       // some other thread has beaten us and has resolved the class.
       // To preserve old behavior, we return the resolved class.
       klass = this_cp->resolved_klasses()->at(resolved_klass_index);
       assert(klass != NULL, "must be resolved if exception was cleared");
diff a/src/hotspot/share/oops/instanceKlass.cpp b/src/hotspot/share/oops/instanceKlass.cpp
--- a/src/hotspot/share/oops/instanceKlass.cpp
+++ b/src/hotspot/share/oops/instanceKlass.cpp
@@ -579,22 +579,22 @@
   _itable_len(parser.itable_size()),
   _nest_host_index(0),
   _init_state(allocated),
   _reference_type(parser.reference_type()),
   _init_thread(NULL),
-  _value_field_klasses(NULL),
+  _inline_type_field_klasses(NULL),
   _adr_valueklass_fixed_block(NULL)
 {
   set_vtable_length(parser.vtable_size());
   set_kind(kind);
   set_access_flags(parser.access_flags());
   if (parser.is_hidden()) set_is_hidden();
   set_is_unsafe_anonymous(parser.is_unsafe_anonymous());
   set_layout_helper(Klass::instance_layout_helper(parser.layout_size(),
                                                     false));
     if (parser.has_inline_fields()) {
-      set_has_inline_fields();
+      set_has_inline_type_fields();
     }
     _java_fields_count = parser.java_fields_count();
 
     assert(NULL == _methods, "underlying memory not zeroed?");
     assert(is_instance_klass(), "is layout incorrect?");
@@ -603,12 +603,12 @@
   // Set biased locking bit for all instances of this class; it will be
   // cleared if revocation occurs too often for this type
   if (UseBiasedLocking && BiasedLocking::enabled()) {
     set_prototype_header(markWord::biased_locking_prototype());
   }
-  if (has_inline_fields()) {
-    _value_field_klasses = (const Klass**) adr_value_fields_klasses();
+  if (has_inline_type_fields()) {
+    _inline_type_field_klasses = (const Klass**) adr_inline_type_field_klasses();
   }
 }
 
 void InstanceKlass::deallocate_methods(ClassLoaderData* loader_data,
                                        Array<Method*>* methods) {
@@ -1258,24 +1258,23 @@
   // Step 8
   // Initialize classes of inline fields
   {
     for (AllFieldStream fs(this); !fs.done(); fs.next()) {
       if (Signature::basic_type(fs.signature()) == T_VALUETYPE) {
-        Klass* klass = this->get_value_field_klass_or_null(fs.index());
-        if (klass == NULL) {
-          assert(fs.access_flags().is_static(), "Otherwise should have been pre-loaded");
+        Klass* klass = get_inline_type_field_klass_or_null(fs.index());
+        if (fs.access_flags().is_static() && klass == NULL) {
           klass = SystemDictionary::resolve_or_fail(field_signature(fs.index())->fundamental_name(THREAD),
               Handle(THREAD, class_loader()),
               Handle(THREAD, protection_domain()),
               true, CHECK);
           if (klass == NULL) {
             THROW(vmSymbols::java_lang_NoClassDefFoundError());
           }
           if (!klass->is_inline_klass()) {
             THROW(vmSymbols::java_lang_IncompatibleClassChangeError());
           }
-          this->set_value_field_klass(fs.index(), klass);
+          set_inline_type_field_klass(fs.index(), klass);
         }
         InstanceKlass::cast(klass)->initialize(CHECK);
         if (fs.access_flags().is_static()) {
           if (java_mirror()->obj_field(fs.offset()) == NULL) {
             java_mirror()->obj_field_put(fs.offset(), ValueKlass::cast(klass)->default_value());
@@ -2621,10 +2620,16 @@
   }
 
   it->push(&_nest_members);
   it->push(&_permitted_subclasses);
   it->push(&_record_components);
+
+  if (has_inline_type_fields()) {
+    for (int i = 0; i < java_fields_count(); i++) {
+      it->push(&((Klass**)adr_inline_type_field_klasses())[i]);
+    }
+  }
 }
 
 void InstanceKlass::remove_unshareable_info() {
   Klass::remove_unshareable_info();
 
@@ -2656,10 +2661,18 @@
   // do array classes also.
   if (array_klasses() != NULL) {
     array_klasses()->remove_unshareable_info();
   }
 
+  if (has_inline_type_fields()) {
+    for (AllFieldStream fs(fields(), constants()); !fs.done(); fs.next()) {
+      if (Signature::basic_type(fs.signature()) == T_VALUETYPE) {
+        reset_inline_type_field_klass(fs.index());
+      }
+    }
+  }
+
   // These are not allocated from metaspace. They are safe to set to NULL.
   _source_debug_extension = NULL;
   _dep_context = NULL;
   _osr_nmethods_head = NULL;
 #if INCLUDE_JVMTI
diff a/src/hotspot/share/oops/instanceKlass.hpp b/src/hotspot/share/oops/instanceKlass.hpp
--- a/src/hotspot/share/oops/instanceKlass.hpp
+++ b/src/hotspot/share/oops/instanceKlass.hpp
@@ -53,10 +53,11 @@
 //      The embedded nonstatic oop-map blocks are short pairs (offset, length)
 //      indicating where oops are located in instances of this klass.
 //    [EMBEDDED implementor of the interface] only exist for interface
 //    [EMBEDDED unsafe_anonymous_host klass] only exist for an unsafe anonymous class (JSR 292 enabled)
 //    [EMBEDDED fingerprint       ] only if should_store_fingerprint()==true
+//    [EMBEDDED inline_type_field_klasses] only if has_inline_fields() == true
 //    [EMBEDDED ValueKlassFixedBlock] only if is a ValueKlass instance
 
 
 // forward declaration for class -- see below for definition
 #if INCLUDE_JVMTI
@@ -223,12 +224,10 @@
   // nest-host. Can also be set directly by JDK API's that establish nest
   // relationships.
   // By always being set it makes nest-member access checks simpler.
   InstanceKlass* _nest_host;
 
-  Array<InlineTypes>* _inline_types;
-
   // The PermittedSubclasses attribute. An array of shorts, where each is a
   // class info index for the class that is a permitted subclass.
   Array<jushort>* _permitted_subclasses;
 
   // The contents of the Record attribute.
@@ -293,11 +292,11 @@
     _misc_is_shared_platform_class            = 1 << 11, // defining class loader is platform class loader
     _misc_is_shared_app_class                 = 1 << 12, // defining class loader is app class loader
     _misc_has_resolved_methods                = 1 << 13, // resolved methods table entries added for this class
     _misc_is_being_redefined                  = 1 << 14, // used for locking redefinition
     _misc_has_contended_annotations           = 1 << 15,  // has @Contended annotation
-    _misc_has_inline_fields                   = 1 << 16, // has inline fields and related embedded section is not empty
+    _misc_has_inline_type_fields              = 1 << 16, // has inline fields and related embedded section is not empty
     _misc_is_empty_inline_type                = 1 << 17, // empty inline type
     _misc_is_naturally_atomic                 = 1 << 18, // loaded/stored in one instruction
     _misc_is_declared_atomic                  = 1 << 19, // implements jl.NonTearable
     _misc_invalid_inline_super                = 1 << 20, // invalid super type for an inline type
     _misc_invalid_identity_super              = 1 << 21, // invalid super type for an identity type
@@ -356,11 +355,11 @@
   // fn: [access, name index, sig index, initial value index, low_offset, high_offset]
   //     [generic signature index]
   //     [generic signature index]
   //     ...
   Array<u2>*      _fields;
-  const Klass**   _value_field_klasses; // For "inline class" fields, NULL if none present
+  const Klass**   _inline_type_field_klasses; // For "inline class" fields, NULL if none present
 
   const ValueKlassFixedBlock* _adr_valueklass_fixed_block;
 
   // embedded Java vtable follows here
   // embedded Java itables follows here
@@ -419,15 +418,15 @@
     } else {
       _misc_flags &= ~_misc_has_nonstatic_fields;
     }
   }
 
-  bool has_inline_fields() const          {
-    return (_misc_flags & _misc_has_inline_fields) != 0;
+  bool has_inline_type_fields() const          {
+    return (_misc_flags & _misc_has_inline_type_fields) != 0;
   }
-  void set_has_inline_fields()  {
-    _misc_flags |= _misc_has_inline_fields;
+  void set_has_inline_type_fields()  {
+    _misc_flags |= _misc_has_inline_type_fields;
   }
 
   bool is_empty_inline_type() const {
     return (_misc_flags & _misc_is_empty_inline_type) != 0;
   }
@@ -1138,11 +1137,11 @@
   // support for stub routines
   static ByteSize init_state_offset()  { return in_ByteSize(offset_of(InstanceKlass, _init_state)); }
   JFR_ONLY(DEFINE_KLASS_TRACE_ID_OFFSET;)
   static ByteSize init_thread_offset() { return in_ByteSize(offset_of(InstanceKlass, _init_thread)); }
 
-  static ByteSize value_field_klasses_offset() { return in_ByteSize(offset_of(InstanceKlass, _value_field_klasses)); }
+  static ByteSize inline_type_field_klasses_offset() { return in_ByteSize(offset_of(InstanceKlass, _inline_type_field_klasses)); }
   static ByteSize adr_valueklass_fixed_block_offset() { return in_ByteSize(offset_of(InstanceKlass, _adr_valueklass_fixed_block)); }
 
   // subclass/subinterface checks
   bool implements_interface(Klass* k) const;
   bool is_same_or_direct_interface(Klass* k) const;
@@ -1215,11 +1214,11 @@
                                                itable_length(),
                                                nonstatic_oop_map_size(),
                                                is_interface(),
                                                is_unsafe_anonymous(),
                                                has_stored_fingerprint(),
-                                               has_inline_fields() ? java_fields_count() : 0,
+                                               has_inline_type_fields() ? java_fields_count() : 0,
                                                is_inline_klass());
   }
 
   intptr_t* start_of_itable()   const { return (intptr_t*)start_of_vtable() + vtable_length(); }
   intptr_t* end_of_itable()     const { return start_of_itable() + itable_length(); }
@@ -1276,12 +1275,12 @@
     } else {
       return NULL;
     }
   }
 
-  address adr_value_fields_klasses() const {
-    if (has_inline_fields()) {
+  address adr_inline_type_field_klasses() const {
+    if (has_inline_type_fields()) {
       address adr_fing = adr_fingerprint();
       if (adr_fing != NULL) {
         return adr_fingerprint() + sizeof(u8);
       }
 
@@ -1299,30 +1298,39 @@
     } else {
       return NULL;
     }
   }
 
-  Klass* get_value_field_klass(int idx) const {
-    assert(has_inline_fields(), "Sanity checking");
-    Klass* k = ((Klass**)adr_value_fields_klasses())[idx];
+  Klass* get_inline_type_field_klass(int idx) const {
+    assert(has_inline_type_fields(), "Sanity checking");
+    assert(idx < java_fields_count(), "IOOB");
+    Klass* k = ((Klass**)adr_inline_type_field_klasses())[idx];
     assert(k != NULL, "Should always be set before being read");
     assert(k->is_inline_klass(), "Must be a inline type");
     return k;
   }
 
-  Klass* get_value_field_klass_or_null(int idx) const {
-    assert(has_inline_fields(), "Sanity checking");
-    Klass* k = ((Klass**)adr_value_fields_klasses())[idx];
+  Klass* get_inline_type_field_klass_or_null(int idx) const {
+    assert(has_inline_type_fields(), "Sanity checking");
+    assert(idx < java_fields_count(), "IOOB");
+    Klass* k = ((Klass**)adr_inline_type_field_klasses())[idx];
     assert(k == NULL || k->is_inline_klass(), "Must be a inline type");
     return k;
   }
 
-  void set_value_field_klass(int idx, Klass* k) {
-    assert(has_inline_fields(), "Sanity checking");
+  void set_inline_type_field_klass(int idx, Klass* k) {
+    assert(has_inline_type_fields(), "Sanity checking");
+    assert(idx < java_fields_count(), "IOOB");
     assert(k != NULL, "Should not be set to NULL");
-    assert(((Klass**)adr_value_fields_klasses())[idx] == NULL, "Should not be set twice");
-    ((Klass**)adr_value_fields_klasses())[idx] = k;
+    assert(((Klass**)adr_inline_type_field_klasses())[idx] == NULL, "Should not be set twice");
+    ((Klass**)adr_inline_type_field_klasses())[idx] = k;
+  }
+
+  void reset_inline_type_field_klass(int idx) {
+    assert(has_inline_type_fields(), "Sanity checking");
+    assert(idx < java_fields_count(), "IOOB");
+    ((Klass**)adr_inline_type_field_klasses())[idx] = NULL;
   }
 
   // Use this to return the size of an instance in heap words:
   virtual int size_helper() const {
     return layout_helper_to_size_helper(layout_helper());
diff a/src/hotspot/share/oops/valueKlass.cpp b/src/hotspot/share/oops/valueKlass.cpp
--- a/src/hotspot/share/oops/valueKlass.cpp
+++ b/src/hotspot/share/oops/valueKlass.cpp
@@ -213,12 +213,10 @@
   *((Klass**)adr_value_array_klass()) = NULL;
 }
 
 void ValueKlass::restore_unshareable_info(ClassLoaderData* loader_data, Handle protection_domain, PackageEntry* pkg_entry, TRAPS) {
   InstanceKlass::restore_unshareable_info(loader_data, protection_domain, pkg_entry, CHECK);
-  oop val = allocate_instance(CHECK);
-  set_default_value(val);
 }
 
 
 Klass* ValueKlass::array_klass_impl(bool or_null, int n, TRAPS) {
   if (flatten_array()) {
@@ -297,11 +295,11 @@
   for (AllFieldStream fs(this); !fs.done(); fs.next()) {
     if (fs.access_flags().is_static()) continue;
     int offset = base_off + fs.offset() - (base_off > 0 ? first_field_offset() : 0);
     if (fs.is_inlined()) {
       // Resolve klass of inlined field and recursively collect fields
-      Klass* vk = get_value_field_klass(fs.index());
+      Klass* vk = get_inline_type_field_klass(fs.index());
       count += ValueKlass::cast(vk)->collect_fields(sig, offset);
     } else {
       BasicType bt = Signature::basic_type(fs.signature());
       if (bt == T_VALUETYPE) {
         bt = T_OBJECT;
diff a/src/hotspot/share/oops/valueKlass.hpp b/src/hotspot/share/oops/valueKlass.hpp
--- a/src/hotspot/share/oops/valueKlass.hpp
+++ b/src/hotspot/share/oops/valueKlass.hpp
@@ -44,11 +44,11 @@
 
   // Constructor
   ValueKlass(const ClassFileParser& parser);
 
   ValueKlassFixedBlock* valueklass_static_block() const {
-    address adr_jf = adr_value_fields_klasses();
+    address adr_jf = adr_inline_type_field_klasses();
     if (adr_jf != NULL) {
       return (ValueKlassFixedBlock*)(adr_jf + this->java_fields_count() * sizeof(Klass*));
     }
 
     address adr_fing = adr_fingerprint();
diff a/src/hotspot/share/prims/jni.cpp b/src/hotspot/share/prims/jni.cpp
--- a/src/hotspot/share/prims/jni.cpp
+++ b/src/hotspot/share/prims/jni.cpp
@@ -1965,11 +1965,11 @@
     assert(k->is_instance_klass(), "Only instance can have inlined fields");
     InstanceKlass* ik = InstanceKlass::cast(k);
     fieldDescriptor fd;
     ik->find_field_from_offset(offset, false, &fd);  // performance bottleneck
     InstanceKlass* holder = fd.field_holder();
-    ValueKlass* field_vklass = ValueKlass::cast(holder->get_value_field_klass(fd.index()));
+    ValueKlass* field_vklass = ValueKlass::cast(holder->get_inline_type_field_klass(fd.index()));
     res = field_vklass->read_inlined_field(o, ik->field_offset(fd.index()), CHECK_NULL);
   }
   jobject ret = JNIHandles::make_local(env, res);
   HOTSPOT_JNI_GETOBJECTFIELD_RETURN(ret);
   return ret;
@@ -2074,11 +2074,11 @@
     assert(k->is_instance_klass(), "Only instances can have inlined fields");
     InstanceKlass* ik = InstanceKlass::cast(k);
     fieldDescriptor fd;
     ik->find_field_from_offset(offset, false, &fd);
     InstanceKlass* holder = fd.field_holder();
-    ValueKlass* vklass = ValueKlass::cast(holder->get_value_field_klass(fd.index()));
+    ValueKlass* vklass = ValueKlass::cast(holder->get_inline_type_field_klass(fd.index()));
     oop v = JNIHandles::resolve_non_null(value);
     vklass->write_inlined_field(o, offset, v, CHECK);
   }
   HOTSPOT_JNI_SETOBJECTFIELD_RETURN();
 JNI_END
diff a/src/hotspot/share/runtime/deoptimization.cpp b/src/hotspot/share/runtime/deoptimization.cpp
--- a/src/hotspot/share/runtime/deoptimization.cpp
+++ b/src/hotspot/share/runtime/deoptimization.cpp
@@ -1284,11 +1284,11 @@
         if (field._type == T_VALUETYPE) {
           field._type = T_OBJECT;
         }
         if (fs.is_inlined()) {
           // Resolve klass of flattened value type field
-          Klass* vk = klass->get_value_field_klass(fs.index());
+          Klass* vk = klass->get_inline_type_field_klass(fs.index());
           field._klass = ValueKlass::cast(vk);
           field._type = T_VALUETYPE;
         }
         fields->append(field);
       }
diff a/src/hotspot/share/runtime/fieldDescriptor.cpp b/src/hotspot/share/runtime/fieldDescriptor.cpp
--- a/src/hotspot/share/runtime/fieldDescriptor.cpp
+++ b/src/hotspot/share/runtime/fieldDescriptor.cpp
@@ -191,11 +191,11 @@
       st->print(" %s", obj->bool_field(offset()) ? "true" : "false");
       break;
     case T_VALUETYPE:
       if (is_inlined()) {
         // Print fields of inlined fields (recursively)
-        ValueKlass* vk = ValueKlass::cast(field_holder()->get_value_field_klass(index()));
+        ValueKlass* vk = ValueKlass::cast(field_holder()->get_inline_type_field_klass(index()));
         int field_offset = offset() - vk->first_field_offset();
         obj = (oop)(cast_from_oop<address>(obj) + field_offset);
         st->print_cr("Inline type field inlined '%s':", vk->name()->as_C_string());
         FieldPrinter print_field(st, obj);
         vk->do_nonstatic_fields(&print_field);
diff a/test/hotspot/jtreg/runtime/cds/appcds/ArchiveRelocationTest.java b/test/hotspot/jtreg/runtime/cds/appcds/ArchiveRelocationTest.java
--- a/test/hotspot/jtreg/runtime/cds/appcds/ArchiveRelocationTest.java
+++ b/test/hotspot/jtreg/runtime/cds/appcds/ArchiveRelocationTest.java
@@ -28,11 +28,11 @@
  * @summary Testing relocation of CDS archive (during both dump time and run time)
  * @comment JDK-8231610 Relocate the CDS archive if it cannot be mapped to the requested address
  * @bug 8231610
  * @library /test/lib /test/hotspot/jtreg/runtime/cds/appcds/test-classes
  * @build HelloRelocation
- * @run driver ClassFileInstaller -jar hello.jar HelloRelocation HelloInlineClassApp HelloInlineClassApp$Point HelloInlineClassApp$Point$ref
+ * @run driver ClassFileInstaller -jar hello.jar HelloRelocation HelloInlineClassApp HelloInlineClassApp$Point HelloInlineClassApp$Point$ref HelloInlineClassApp$Rectangle HelloInlineClassApp$Rectangle$ref
  * @run driver ArchiveRelocationTest
  */
 
 import jdk.test.lib.process.OutputAnalyzer;
 import jtreg.SkippedException;
diff a/test/hotspot/jtreg/runtime/cds/appcds/HelloInlineClassTest.java b/test/hotspot/jtreg/runtime/cds/appcds/HelloInlineClassTest.java
--- a/test/hotspot/jtreg/runtime/cds/appcds/HelloInlineClassTest.java
+++ b/test/hotspot/jtreg/runtime/cds/appcds/HelloInlineClassTest.java
@@ -26,11 +26,11 @@
  * @test
  * @summary Hello World test for using inline classes with CDS
  * @requires vm.cds
  * @library /test/lib /test/hotspot/jtreg/runtime/cds/appcds/test-classes
  * @build HelloInlineClassApp
- * @run driver ClassFileInstaller -jar hello_inline.jar HelloInlineClassApp HelloInlineClassApp$Point HelloInlineClassApp$Point$ref
+ * @run driver ClassFileInstaller -jar hello_inline.jar HelloInlineClassApp HelloInlineClassApp$Point HelloInlineClassApp$Point$ref HelloInlineClassApp$Rectangle HelloInlineClassApp$Rectangle$ref
  * @run driver HelloInlineClassTest
  */
 
 import jdk.test.lib.process.OutputAnalyzer;
 
@@ -38,11 +38,12 @@
     public static void main(String[] args) throws Exception {
         String appJar = ClassFileInstaller.getJarPath("hello_inline.jar");
         String mainClass = "HelloInlineClassApp";
         OutputAnalyzer output =
             TestCommon.dump(appJar, TestCommon.list(mainClass,
-                                                    "HelloInlineClassApp$Point"));
+                                                    "HelloInlineClassApp$Point",
+                                                    "HelloInlineClassApp$Rectangle"));
         output.shouldHaveExitValue(0);
 
         TestCommon.run("-Xint", "-cp", appJar,  mainClass)
             .assertNormalExit();
 
diff a/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/DynamicArchiveRelocationTest.java b/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/DynamicArchiveRelocationTest.java
--- a/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/DynamicArchiveRelocationTest.java
+++ b/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/DynamicArchiveRelocationTest.java
@@ -30,11 +30,11 @@
  * @comment JDK-8231610 Relocate the CDS archive if it cannot be mapped to the requested address
  * @bug 8231610
  * @library /test/lib /test/hotspot/jtreg/runtime/cds/appcds /test/hotspot/jtreg/runtime/cds/appcds/test-classes
  * @build HelloRelocation
  * @build sun.hotspot.WhiteBox
- * @run driver ClassFileInstaller -jar hello.jar HelloRelocation HelloInlineClassApp HelloInlineClassApp$Point HelloInlineClassApp$Point$ref
+ * @run driver ClassFileInstaller -jar hello.jar HelloRelocation HelloInlineClassApp HelloInlineClassApp$Point HelloInlineClassApp$Point$ref HelloInlineClassApp$Rectangle HelloInlineClassApp$Rectangle$ref
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox
  * @run main/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath/a:. DynamicArchiveRelocationTest
  */
 
 import jdk.test.lib.process.OutputAnalyzer;
diff a/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/HelloDynamicInlineClass.java b/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/HelloDynamicInlineClass.java
--- a/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/HelloDynamicInlineClass.java
+++ b/test/hotspot/jtreg/runtime/cds/appcds/dynamicArchive/HelloDynamicInlineClass.java
@@ -27,11 +27,11 @@
  * @summary Hello World test for dynamic archive
  * @requires vm.cds
  * @library /test/lib /test/hotspot/jtreg/runtime/cds/appcds /test/hotspot/jtreg/runtime/cds/appcds/test-classes
  * @build HelloInlineClassApp
  * @build sun.hotspot.WhiteBox
- * @run driver ClassFileInstaller -jar hello_inline.jar HelloInlineClassApp HelloInlineClassApp$Point HelloInlineClassApp$Point$ref
+ * @run driver ClassFileInstaller -jar hello_inline.jar HelloInlineClassApp HelloInlineClassApp$Point HelloInlineClassApp$Point$ref HelloInlineClassApp$Rectangle HelloInlineClassApp$Rectangle$ref
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox sun.hotspot.WhiteBox$WhiteBoxPermission
  * @run main/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath/a:. HelloDynamicInlineClass
  */
 
 public class HelloDynamicInlineClass extends DynamicArchiveTestBase {
diff a/test/hotspot/jtreg/runtime/cds/appcds/test-classes/HelloInlineClassApp.java b/test/hotspot/jtreg/runtime/cds/appcds/test-classes/HelloInlineClassApp.java
--- a/test/hotspot/jtreg/runtime/cds/appcds/test-classes/HelloInlineClassApp.java
+++ b/test/hotspot/jtreg/runtime/cds/appcds/test-classes/HelloInlineClassApp.java
@@ -46,10 +46,18 @@
         Point add(Point p1, int x2, int y2, Point p3) {
             return new Point(x + p1.x + x2 + p3.x, y + p1.y + y2 + p3.y);
         }
     }
 
+    static inline class Rectangle {
+        Point p0 = new Point(0,0);
+        Point p1 = new Point(1,1);
+    }
+
+    Point point;
+    static Rectangle rectangle;
+
     public static void main(String[] args) throws Exception {
         Point p = new Point(0, 123);
         System.out.println("Point = " + p);
         String req = "(0, 123)";
         if (!p.toString().equals(req)) {
@@ -83,7 +91,17 @@
 
         if (p.x != expectedX || p.y != expectedY) {
             throw new RuntimeException("Expected (" + expectedX + ", " + expectedY + " but got " + p);
         }
 
+        Point pzero = new Point(0,0);
+        if (HelloInlineClassApp.rectangle.p0 != pzero || HelloInlineClassApp.rectangle.p1 != pzero) {
+            throw new RuntimeException("Static field rectangle not as expected");
+        }
+
+        HelloInlineClassApp app = new HelloInlineClassApp();
+        if (app.point != pzero) {
+            throw new RuntimeException("Non-static field point not as expected");
+        }
+
     }
 }
