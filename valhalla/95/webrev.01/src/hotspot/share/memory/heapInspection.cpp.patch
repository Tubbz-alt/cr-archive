diff a/src/hotspot/share/memory/heapInspection.cpp b/src/hotspot/share/memory/heapInspection.cpp
--- a/src/hotspot/share/memory/heapInspection.cpp
+++ b/src/hotspot/share/memory/heapInspection.cpp
@@ -563,11 +563,11 @@
     int offset2 = offset + fd.offset() - vklass->first_field_offset();
     print_field(st, level, offset2, fd,
         fd.is_inline_type(), fd.holder()->field_is_inlined(fd.index()));
     if (fd.holder()->field_is_inlined(fd.index())) {
       print_inlined_field(st, level + 1, offset2 ,
-          InstanceKlass::cast(fd.holder()->get_value_field_klass(fd.index())));
+          InstanceKlass::cast(fd.holder()->get_inline_type_field_klass(fd.index())));
     }
   }
 }
 
 void PrintClassLayout::print_class_layout(outputStream* st, char* class_name) {
@@ -604,11 +604,11 @@
     for(int i = 0; i < fields->length(); i++) {
       FieldDesc fd = fields->at(i);
       print_field(st, 0, fd.offset(), fd, fd.is_inline_type(), fd.holder()->field_is_inlined(fd.index()));
       if (fd.holder()->field_is_inlined(fd.index())) {
         print_inlined_field(st, 1, fd.offset(),
-            InstanceKlass::cast(fd.holder()->get_value_field_klass(fd.index())));
+            InstanceKlass::cast(fd.holder()->get_inline_type_field_klass(fd.index())));
       }
     }
   }
   st->cr();
 }
