diff a/src/hotspot/share/ci/ciInstanceKlass.cpp b/src/hotspot/share/ci/ciInstanceKlass.cpp
--- a/src/hotspot/share/ci/ciInstanceKlass.cpp
+++ b/src/hotspot/share/ci/ciInstanceKlass.cpp
@@ -32,11 +32,11 @@
 #include "memory/allocation.hpp"
 #include "memory/allocation.inline.hpp"
 #include "memory/resourceArea.hpp"
 #include "oops/oop.inline.hpp"
 #include "oops/fieldStreams.inline.hpp"
-#include "oops/valueKlass.inline.hpp"
+#include "oops/inlineKlass.inline.hpp"
 #include "runtime/fieldDescriptor.inline.hpp"
 #include "runtime/handles.inline.hpp"
 #include "runtime/jniHandles.inline.hpp"
 
 // ciInstanceKlass
@@ -549,11 +549,11 @@
     if (fs.access_flags().is_static())  continue;
     fieldDescriptor& fd = fs.field_descriptor();
     if (fd.is_inlined() && flatten) {
       // Value type fields are embedded
       int field_offset = fd.offset();
-      // Get ValueKlass and adjust number of fields
+      // Get InlineKlass and adjust number of fields
       Klass* k = get_instanceKlass()->get_inline_type_field_klass(fd.index());
       ciValueKlass* vk = CURRENT_ENV->get_klass(k)->as_value_klass();
       flen += vk->nof_nonstatic_fields() - 1;
       // Iterate over fields of the flattened value type and copy them to 'this'
       for (int i = 0; i < vk->nof_nonstatic_fields(); ++i) {
@@ -819,11 +819,11 @@
       assert(!HAS_PENDING_EXCEPTION, "can resolve klass?");
       InstanceKlass* holder = fd->field_holder();
       Klass* k = SystemDictionary::find(name, Handle(THREAD, holder->class_loader()),
                                         Handle(THREAD, holder->protection_domain()), THREAD);
       assert(k != NULL && !HAS_PENDING_EXCEPTION, "can resolve klass?");
-      ValueKlass* vk = ValueKlass::cast(k);
+      InlineKlass* vk = InlineKlass::cast(k);
       oop obj;
       if (flattened) {
         int field_offset = fd->offset() - vk->first_field_offset();
         obj = (oop) (cast_from_oop<address>(mirror) + field_offset);
       } else {
