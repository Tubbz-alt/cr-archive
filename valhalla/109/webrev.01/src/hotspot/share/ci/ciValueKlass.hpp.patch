diff a/src/hotspot/share/ci/ciValueKlass.hpp b/src/hotspot/share/ci/ciValueKlass.hpp
--- a/src/hotspot/share/ci/ciValueKlass.hpp
+++ b/src/hotspot/share/ci/ciValueKlass.hpp
@@ -28,11 +28,11 @@
 #include "ci/ciConstantPoolCache.hpp"
 #include "ci/ciEnv.hpp"
 #include "ci/ciFlags.hpp"
 #include "ci/ciInstanceKlass.hpp"
 #include "ci/ciSymbol.hpp"
-#include "oops/valueKlass.hpp"
+#include "oops/inlineKlass.hpp"
 
 // ciValueKlass
 //
 // Specialized ciInstanceKlass for value types.
 class ciValueKlass : public ciInstanceKlass {
@@ -40,17 +40,17 @@
 
 private:
   // Fields declared in the bytecode (without flattened value type fields)
   GrowableArray<ciField*>* _declared_nonstatic_fields;
 
-  ValueKlass* to_ValueKlass() const {
-    return ValueKlass::cast(get_Klass());
+  InlineKlass* to_ValueKlass() const {
+    return InlineKlass::cast(get_Klass());
   }
 
 protected:
   ciValueKlass(Klass* h_k) : ciInstanceKlass(h_k), _declared_nonstatic_fields(NULL) {
-    assert(is_final(), "ValueKlass must be final");
+    assert(is_final(), "InlineKlass must be final");
   };
 
   ciValueKlass(ciSymbol* name, jobject loader, jobject protection_domain) :
     ciInstanceKlass(name, loader, protection_domain, T_INLINE_TYPE) {}
 
@@ -87,9 +87,9 @@
   ciInstance* default_value_instance() const;
   bool contains_oops() const;
   Array<SigEntry>* extended_sig() const;
   address pack_handler() const;
   address unpack_handler() const;
-  ValueKlass* get_ValueKlass() const;
+  InlineKlass* get_ValueKlass() const;
 };
 
 #endif // SHARE_VM_CI_CIVALUEKLASS_HPP
