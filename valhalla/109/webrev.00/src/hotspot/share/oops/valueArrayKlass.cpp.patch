diff a/src/hotspot/share/oops/valueArrayKlass.cpp b/src/hotspot/share/oops/valueArrayKlass.cpp
--- a/src/hotspot/share/oops/valueArrayKlass.cpp
+++ b/src/hotspot/share/oops/valueArrayKlass.cpp
@@ -40,11 +40,11 @@
 #include "oops/instanceKlass.hpp"
 #include "oops/klass.inline.hpp"
 #include "oops/objArrayKlass.hpp"
 #include "oops/objArrayOop.inline.hpp"
 #include "oops/oop.inline.hpp"
-#include "oops/valueKlass.hpp"
+#include "oops/inlineKlass.hpp"
 #include "oops/valueArrayOop.hpp"
 #include "oops/valueArrayOop.inline.hpp"
 #include "oops/verifyOopClosure.hpp"
 #include "runtime/handles.inline.hpp"
 #include "runtime/mutexLocker.hpp"
@@ -56,13 +56,13 @@
 // Allocation...
 
 ValueArrayKlass::ValueArrayKlass(Klass* element_klass, Symbol* name) : ArrayKlass(name, ID) {
   assert(element_klass->is_inline_klass(), "Expected Inline");
 
-  set_element_klass(ValueKlass::cast(element_klass));
+  set_element_klass(InlineKlass::cast(element_klass));
   set_class_loader_data(element_klass->class_loader_data());
-  set_layout_helper(array_layout_helper(ValueKlass::cast(element_klass)));
+  set_layout_helper(array_layout_helper(InlineKlass::cast(element_klass)));
 
   assert(is_array_klass(), "sanity");
   assert(is_valueArray_klass(), "sanity");
 
   CMH("tweak name symbol refcnt ?")
@@ -71,22 +71,22 @@
     print();
   }
 #endif
 }
 
-ValueKlass* ValueArrayKlass::element_klass() const {
-  return ValueKlass::cast(_element_klass);
+InlineKlass* ValueArrayKlass::element_klass() const {
+  return InlineKlass::cast(_element_klass);
 }
 
 void ValueArrayKlass::set_element_klass(Klass* k) {
   _element_klass = k;
 }
 
 ValueArrayKlass* ValueArrayKlass::allocate_klass(Klass* element_klass, TRAPS) {
   guarantee((!Universe::is_bootstrapping() || SystemDictionary::Object_klass_loaded()), "Really ?!");
   assert(ValueArrayFlatten, "Flatten array required");
-  assert(ValueKlass::cast(element_klass)->is_naturally_atomic() || (!InlineArrayAtomicAccess), "Atomic by-default");
+  assert(InlineKlass::cast(element_klass)->is_naturally_atomic() || (!InlineArrayAtomicAccess), "Atomic by-default");
 
   /*
    *  MVT->LWorld, now need to allocate secondaries array types, just like objArrayKlass...
    *  ...so now we are trying out covariant array types, just copy objArrayKlass
    *  TODO refactor any remaining commonality
@@ -157,11 +157,11 @@
   assert(rank == 1, "just checking");
   int length = *last_size;
   return allocate(length, THREAD);
 }
 
-jint ValueArrayKlass::array_layout_helper(ValueKlass* vk) {
+jint ValueArrayKlass::array_layout_helper(InlineKlass* vk) {
   BasicType etype = T_INLINE_TYPE;
   int esize = upper_log2(vk->raw_value_byte_size());
   int hsize = arrayOopDesc::base_offset_in_bytes(etype);
 
   int lh = Klass::array_layout_helper(_lh_array_tag_vt_value, true, hsize, etype, esize);
@@ -249,11 +249,11 @@
      if (!s_elem_klass->is_subtype_of(d_elem_klass)) {
        THROW(vmSymbols::java_lang_ArrayStoreException());
      }
 
      valueArrayOop sa = valueArrayOop(s);
-     ValueKlass* s_elem_vklass = element_klass();
+     InlineKlass* s_elem_vklass = element_klass();
 
      // valueArray-to-valueArray
      if (dk->is_valueArray_klass()) {
        // element types MUST be exact, subtype check would be dangerous
        if (dk != this) {
@@ -303,11 +303,11 @@
      }
    } else {
      assert(s->is_objArray(), "Expected objArray");
      objArrayOop sa = objArrayOop(s);
      assert(d->is_valueArray(), "Excepted valueArray");  // objArray-to-valueArray
-     ValueKlass* d_elem_vklass = ValueKlass::cast(d_elem_klass);
+     InlineKlass* d_elem_vklass = InlineKlass::cast(d_elem_klass);
      valueArrayOop da = valueArrayOop(d);
 
      int src_end = src_pos + length;
      int delem_incr = 1 << dk->log2_element_size();
      address dst = (address) da->value_at_addr(dst_pos, layout_helper());
@@ -318,11 +318,11 @@
        }
        // Check exact type per element
        if (se->klass() != d_elem_klass) {
          THROW(vmSymbols::java_lang_ArrayStoreException());
        }
-       d_elem_vklass->value_copy_oop_to_payload(se, dst);
+       d_elem_vklass->inline_copy_oop_to_payload(se, dst);
        dst += delem_incr;
        src_pos++;
      }
    }
 }
@@ -438,11 +438,11 @@
 
 #ifndef PRODUCT
 void ValueArrayKlass::oop_print_on(oop obj, outputStream* st) {
   ArrayKlass::oop_print_on(obj, st);
   valueArrayOop va = valueArrayOop(obj);
-  ValueKlass* vk = element_klass();
+  InlineKlass* vk = element_klass();
   int print_len = MIN2((intx) va->length(), MaxElementPrintSize);
   for(int index = 0; index < print_len; index++) {
     int off = (address) va->value_at_addr(index, layout_helper()) - cast_from_oop<address>(obj);
     st->print_cr(" - Index %3d offset %3d: ", index, off);
     oop obj = (oop) ((address)va->value_at_addr(index, layout_helper()) - vk->first_field_offset());
