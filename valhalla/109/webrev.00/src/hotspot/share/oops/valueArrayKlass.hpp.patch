diff a/src/hotspot/share/oops/valueArrayKlass.hpp b/src/hotspot/share/oops/valueArrayKlass.hpp
--- a/src/hotspot/share/oops/valueArrayKlass.hpp
+++ b/src/hotspot/share/oops/valueArrayKlass.hpp
@@ -25,11 +25,11 @@
 #ifndef SHARE_VM_OOPS_VALUEARRAYKLASS_HPP
 #define SHARE_VM_OOPS_VALUEARRAYKLASS_HPP
 
 #include "classfile/classLoaderData.hpp"
 #include "oops/arrayKlass.hpp"
-#include "oops/valueKlass.hpp"
+#include "oops/inlineKlass.hpp"
 #include "utilities/macros.hpp"
 
 /**
  * Array of values, gives a layout of typeArrayOop, but needs oops iterators
  */
@@ -52,11 +52,11 @@
 
  public:
 
   ValueArrayKlass() {}
 
-  virtual ValueKlass* element_klass() const;
+  virtual InlineKlass* element_klass() const;
   virtual void set_element_klass(Klass* k);
 
   // Casting from Klass*
   static ValueArrayKlass* cast(Klass* k) {
     assert(k->is_valueArray_klass(), "cast to ValueArrayKlass");
@@ -88,11 +88,11 @@
     return element_klass()->is_atomic();
   }
 
   oop protection_domain() const;
 
-  static jint array_layout_helper(ValueKlass* vklass); // layout helper for values
+  static jint array_layout_helper(InlineKlass* vklass); // layout helper for values
 
   // sizing
   static int header_size()  { return sizeof(ValueArrayKlass)/HeapWordSize; }
   int size() const          { return ArrayKlass::static_size(header_size()); }
 
