diff a/src/hotspot/share/oops/accessBackend.hpp b/src/hotspot/share/oops/accessBackend.hpp
--- a/src/hotspot/share/oops/accessBackend.hpp
+++ b/src/hotspot/share/oops/accessBackend.hpp
@@ -121,11 +121,11 @@
 
     typedef void (*arraycopy_func_t)(arrayOop src_obj, size_t src_offset_in_bytes, T* src_raw,
                                      arrayOop dst_obj, size_t dst_offset_in_bytes, T* dst_raw,
                                      size_t length);
     typedef void (*clone_func_t)(oop src, oop dst, size_t size);
-    typedef void (*value_copy_func_t)(void* src, void* dst, ValueKlass* md);
+    typedef void (*value_copy_func_t)(void* src, void* dst, InlineKlass* md);
     typedef oop (*resolve_func_t)(oop obj);
   };
 
   template <DecoratorSet decorators>
   struct AccessFunctionTypes<decorators, void> {
@@ -401,11 +401,11 @@
                             arrayOop dst_obj, size_t dst_offset_in_bytes, T* dst_raw,
                             size_t length);
 
   static void clone(oop src, oop dst, size_t size);
 
-  static void value_copy(void* src, void* dst, ValueKlass* md);
+  static void value_copy(void* src, void* dst, InlineKlass* md);
 
   static oop resolve(oop obj) { return obj; }
 };
 
 // Below is the implementation of the first 4 steps of the template pipeline:
@@ -590,13 +590,13 @@
   template <DecoratorSet decorators, typename T>
   struct RuntimeDispatch<decorators, T, BARRIER_VALUE_COPY>: AllStatic {
     typedef typename AccessFunction<decorators, T, BARRIER_VALUE_COPY>::type func_t;
     static func_t _value_copy_func;
 
-    static void value_copy_init(void* src, void* dst, ValueKlass* md);
+    static void value_copy_init(void* src, void* dst, InlineKlass* md);
 
-    static inline void value_copy(void* src, void* dst, ValueKlass* md) {
+    static inline void value_copy(void* src, void* dst, InlineKlass* md) {
       _value_copy_func(src, dst, md);
     }
   };
 
   template <DecoratorSet decorators, typename T>
@@ -977,19 +977,19 @@
     }
 
     template <DecoratorSet decorators>
     inline static typename EnableIf<
       HasDecorator<decorators, AS_RAW>::value>::type
-    value_copy(void* src, void* dst, ValueKlass* md) {
+    value_copy(void* src, void* dst, InlineKlass* md) {
       typedef RawAccessBarrier<decorators & RAW_DECORATOR_MASK> Raw;
       Raw::value_copy(src, dst, md);
     }
 
     template <DecoratorSet decorators>
     inline static typename EnableIf<
       !HasDecorator<decorators, AS_RAW>::value>::type
-      value_copy(void* src, void* dst, ValueKlass* md) {
+      value_copy(void* src, void* dst, InlineKlass* md) {
       const DecoratorSet expanded_decorators = decorators;
       RuntimeDispatch<expanded_decorators, void*, BARRIER_VALUE_COPY>::value_copy(src, dst, md);
     }
 
 
@@ -1298,11 +1298,11 @@
     const DecoratorSet expanded_decorators = DecoratorFixup<decorators>::value;
     PreRuntimeDispatch::clone<expanded_decorators>(src, dst, size);
   }
 
   template <DecoratorSet decorators>
-  inline void value_copy(void* src, void* dst, ValueKlass* md) {
+  inline void value_copy(void* src, void* dst, InlineKlass* md) {
     const DecoratorSet expanded_decorators = DecoratorFixup<decorators>::value;
     PreRuntimeDispatch::value_copy<expanded_decorators>(src, dst, md);
   }
 
   template <DecoratorSet decorators>
