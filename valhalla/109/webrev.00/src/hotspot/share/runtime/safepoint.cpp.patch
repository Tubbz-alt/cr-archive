diff a/src/hotspot/share/runtime/safepoint.cpp b/src/hotspot/share/runtime/safepoint.cpp
--- a/src/hotspot/share/runtime/safepoint.cpp
+++ b/src/hotspot/share/runtime/safepoint.cpp
@@ -45,11 +45,11 @@
 #include "logging/logStream.hpp"
 #include "memory/resourceArea.hpp"
 #include "memory/universe.hpp"
 #include "oops/oop.inline.hpp"
 #include "oops/symbol.hpp"
-#include "oops/valueKlass.hpp"
+#include "oops/inlineKlass.hpp"
 #include "runtime/atomic.hpp"
 #include "runtime/deoptimization.hpp"
 #include "runtime/frame.inline.hpp"
 #include "runtime/handles.inline.hpp"
 #include "runtime/interfaceSupport.inline.hpp"
@@ -1045,25 +1045,25 @@
     // See if return type is an oop.
     Method* method = nm->method();
     bool return_oop = method->is_returning_oop();
 
     GrowableArray<Handle> return_values;
-    ValueKlass* vk = NULL;
+    InlineKlass* vk = NULL;
 
     if (return_oop && InlineTypeReturnedAsFields) {
       SignatureStream ss(method->signature());
       while (!ss.at_return_type()) {
         ss.next();
       }
       if (ss.type() == T_INLINE_TYPE) {
         // Check if value type is returned as fields
-        vk = ValueKlass::returned_value_klass(map);
+        vk = InlineKlass::returned_inline_klass(map);
         if (vk != NULL) {
           // We're at a safepoint at the return of a method that returns
           // multiple values. We must make sure we preserve the oop values
           // across the safepoint.
-          assert(vk == method->returned_value_type(thread()), "bad value klass");
+          assert(vk == method->returned_inline_type(thread()), "bad value klass");
           vk->save_oop_fields(map, return_values);
           return_oop = false;
         }
       }
     }
