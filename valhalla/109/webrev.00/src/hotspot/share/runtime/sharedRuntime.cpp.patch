diff a/src/hotspot/share/runtime/sharedRuntime.cpp b/src/hotspot/share/runtime/sharedRuntime.cpp
--- a/src/hotspot/share/runtime/sharedRuntime.cpp
+++ b/src/hotspot/share/runtime/sharedRuntime.cpp
@@ -52,11 +52,11 @@
 #include "oops/klass.hpp"
 #include "oops/method.inline.hpp"
 #include "oops/objArrayKlass.hpp"
 #include "oops/objArrayOop.inline.hpp"
 #include "oops/oop.inline.hpp"
-#include "oops/valueKlass.inline.hpp"
+#include "oops/inlineKlass.inline.hpp"
 #include "prims/forte.hpp"
 #include "prims/jvmtiExport.hpp"
 #include "prims/methodHandles.hpp"
 #include "prims/nativeLookup.hpp"
 #include "runtime/arguments.hpp"
@@ -1141,11 +1141,11 @@
       if (callee == NULL) {
         THROW_(vmSymbols::java_lang_NoSuchMethodException(), nullHandle);
       }
     }
     if (!caller_is_c1 && callee->has_scalarized_args() && callee->method_holder()->is_inline_klass() &&
-        ValueKlass::cast(callee->method_holder())->can_be_passed_as_fields()) {
+        InlineKlass::cast(callee->method_holder())->can_be_passed_as_fields()) {
       // If the receiver is an inline type that is passed as fields, no oop is available
       // Resolve the call without receiver null checking.
       assert(attached_method.not_null() && !attached_method->is_abstract(), "must have non-abstract attached method");
       if (bc == Bytecodes::_invokeinterface) {
         bc = Bytecodes::_invokevirtual; // C2 optimistically replaces interface calls by virtual calls
@@ -1285,11 +1285,11 @@
   bool caller_is_c1 = caller_nm->is_compiled_by_c1();
 
   if (is_virtual) {
     Klass* receiver_klass = NULL;
     if (!caller_is_c1 && callee_method->has_scalarized_args() && callee_method->method_holder()->is_inline_klass() &&
-        ValueKlass::cast(callee_method->method_holder())->can_be_passed_as_fields()) {
+        InlineKlass::cast(callee_method->method_holder())->can_be_passed_as_fields()) {
       // If the receiver is an inline type that is passed as fields, no oop is available
       receiver_klass = callee_method->method_holder();
     } else {
       assert(receiver.not_null() || invoke_code == Bytecodes::_invokehandle, "sanity check");
       receiver_klass = invoke_code == Bytecodes::_invokehandle ? NULL : receiver->klass();
@@ -2746,20 +2746,20 @@
 
 int CompiledEntrySignature::compute_scalarized_cc(GrowableArray<SigEntry>*& sig_cc, VMRegPair*& regs_cc, bool scalar_receiver) {
   InstanceKlass* holder = _method->method_holder();
   sig_cc = new GrowableArray<SigEntry>(_method->size_of_parameters());
   if (!_method->is_static()) {
-    if (holder->is_inline_klass() && scalar_receiver && ValueKlass::cast(holder)->can_be_passed_as_fields()) {
-      sig_cc->appendAll(ValueKlass::cast(holder)->extended_sig());
+    if (holder->is_inline_klass() && scalar_receiver && InlineKlass::cast(holder)->can_be_passed_as_fields()) {
+      sig_cc->appendAll(InlineKlass::cast(holder)->extended_sig());
     } else {
       SigEntry::add_entry(sig_cc, T_OBJECT);
     }
   }
   Thread* THREAD = Thread::current();
   for (SignatureStream ss(_method->signature()); !ss.at_return_type(); ss.next()) {
     if (ss.type() == T_INLINE_TYPE) {
-      ValueKlass* vk = ss.as_value_klass(holder);
+      InlineKlass* vk = ss.as_inline_klass(holder);
       if (vk->can_be_passed_as_fields()) {
         sig_cc->appendAll(vk->extended_sig());
       } else {
         SigEntry::add_entry(sig_cc, T_OBJECT);
       }
@@ -2805,11 +2805,11 @@
   }
 
   if (has_value_recv()) {
     if (num_value_args() == 1) {
       // Share same entry for VVEP and VVEP(RO).
-      // This is quite common: we have an instance method in a ValueKlass that has
+      // This is quite common: we have an instance method in a InlineKlass that has
       // no value args other than <this>.
       return CodeOffsets::Verified_Value_Entry;
     } else {
       assert(num_value_args() > 1, "must be");
       // No sharing:
@@ -2833,20 +2833,20 @@
 
 
 void CompiledEntrySignature::compute_calling_conventions() {
   // Get the (non-scalarized) signature and check for value type arguments
   if (!_method->is_static()) {
-    if (_method->method_holder()->is_inline_klass() && ValueKlass::cast(_method->method_holder())->can_be_passed_as_fields()) {
+    if (_method->method_holder()->is_inline_klass() && InlineKlass::cast(_method->method_holder())->can_be_passed_as_fields()) {
       _has_value_recv = true;
       _num_value_args++;
     }
     SigEntry::add_entry(_sig, T_OBJECT);
   }
   for (SignatureStream ss(_method->signature()); !ss.at_return_type(); ss.next()) {
     BasicType bt = ss.type();
     if (bt == T_INLINE_TYPE) {
-      if (ss.as_value_klass(_method->method_holder())->can_be_passed_as_fields()) {
+      if (ss.as_inline_klass(_method->method_holder())->can_be_passed_as_fields()) {
         _num_value_args++;
       }
       bt = T_OBJECT;
     }
     SigEntry::add_entry(_sig, bt);
@@ -3609,18 +3609,18 @@
   }
   objArrayOop array_oop = oopFactory::new_objectArray(nb_slots, CHECK_NULL);
   objArrayHandle array(THREAD, array_oop);
   int i = 0;
   if (allocate_receiver) {
-    ValueKlass* vk = ValueKlass::cast(holder);
+    InlineKlass* vk = InlineKlass::cast(holder);
     oop res = vk->allocate_instance(CHECK_NULL);
     array->obj_at_put(i, res);
     i++;
   }
   for (SignatureStream ss(callee->signature()); !ss.at_return_type(); ss.next()) {
     if (ss.type() == T_INLINE_TYPE) {
-      ValueKlass* vk = ss.as_value_klass(holder);
+      InlineKlass* vk = ss.as_inline_klass(holder);
       oop res = vk->allocate_instance(CHECK_NULL);
       array->obj_at_put(i, res);
       i++;
     }
   }
@@ -3641,11 +3641,11 @@
 {
   assert(InlineTypePassFieldsAsArgs, "no reason to call this");
   assert(oopDesc::is_oop(array), "should be oop");
   for (int i = 0; i < array->length(); ++i) {
     instanceOop valueOop = (instanceOop)array->obj_at(i);
-    ValueKlass* vk = ValueKlass::cast(valueOop->klass());
+    InlineKlass* vk = InlineKlass::cast(valueOop->klass());
     if (vk->contains_oops()) {
       const address dst_oop_addr = ((address) (void*) valueOop);
       OopMapBlock* map = vk->start_of_nonstatic_oop_maps();
       OopMapBlock* const end = map + vk->nonstatic_oop_map_count();
       while (map != end) {
@@ -3668,11 +3668,11 @@
   RegisterMap reg_map(thread);
   frame stubFrame = thread->last_frame();
   frame callerFrame = stubFrame.sender(&reg_map);
   assert(callerFrame.is_interpreted_frame(), "should be coming from interpreter");
 
-  ValueKlass* vk = ValueKlass::cast(res->klass());
+  InlineKlass* vk = InlineKlass::cast(res->klass());
 
   const Array<SigEntry>* sig_vk = vk->extended_sig();
   const Array<VMRegPair>* regs = vk->return_regs();
 
   if (regs == NULL) {
@@ -3758,11 +3758,11 @@
   RegisterMap reg_map(thread);
   frame stubFrame = thread->last_frame();
   frame callerFrame = stubFrame.sender(&reg_map);
 
 #ifdef ASSERT
-  ValueKlass* verif_vk = ValueKlass::returned_value_klass(reg_map);
+  InlineKlass* verif_vk = InlineKlass::returned_inline_klass(reg_map);
 #endif
 
   if (!is_set_nth_bit(res, 0)) {
     // We're not returning with value type fields in registers (the
     // calling convention didn't allow it for this value klass)
@@ -3771,11 +3771,11 @@
     assert(verif_vk == NULL, "broken calling convention");
     return;
   }
 
   clear_nth_bit(res, 0);
-  ValueKlass* vk = (ValueKlass*)res;
+  InlineKlass* vk = (InlineKlass*)res;
   assert(verif_vk == vk, "broken calling convention");
   assert(Metaspace::contains((void*)res), "should be klass");
 
   // Allocate handles for every oop field so they are safe in case of
   // a safepoint when allocating
