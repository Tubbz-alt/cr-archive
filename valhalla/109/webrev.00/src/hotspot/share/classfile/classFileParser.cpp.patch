diff a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -57,11 +57,11 @@
 #include "oops/metadata.hpp"
 #include "oops/method.inline.hpp"
 #include "oops/oop.inline.hpp"
 #include "oops/recordComponent.hpp"
 #include "oops/symbol.hpp"
-#include "oops/valueKlass.inline.hpp"
+#include "oops/inlineKlass.inline.hpp"
 #include "prims/jvmtiExport.hpp"
 #include "prims/jvmtiThreadState.hpp"
 #include "runtime/arguments.hpp"
 #include "runtime/fieldDescriptor.inline.hpp"
 #include "runtime/handles.inline.hpp"
@@ -4483,11 +4483,11 @@
                                                             _protection_domain, true, CHECK);
       assert(klass != NULL, "Sanity check");
       if (!klass->access_flags().is_inline_type()) {
         THROW(vmSymbols::java_lang_IncompatibleClassChangeError());
       }
-      ValueKlass* vk = ValueKlass::cast(klass);
+      InlineKlass* vk = InlineKlass::cast(klass);
       // Conditions to apply flattening or not should be defined in a single place
       bool too_big_to_allocate_inline = (InlineFieldMaxFlatSize >= 0 &&
                                  (vk->size_helper() * HeapWordSize) > InlineFieldMaxFlatSize);
       bool too_atomic_to_allocate_inline = vk->is_declared_atomic();
       bool too_volatile_to_allocate_inline = fs.access_flags().is_volatile();
@@ -4499,11 +4499,11 @@
       if (!(too_big_to_allocate_inline | too_atomic_to_allocate_inline | too_volatile_to_allocate_inline)) {
         nonstatic_inline_type_indexes[nonstatic_inline_type_count] = fs.index();
         nonstatic_inline_type_klasses[nonstatic_inline_type_count] = klass;
         nonstatic_inline_type_count++;
 
-        ValueKlass* vklass = ValueKlass::cast(klass);
+        InlineKlass* vklass = InlineKlass::cast(klass);
         if (vklass->contains_oops()) {
           inline_type_oop_map_count += vklass->nonstatic_oop_map_count();
         }
         fs.set_inlined(true);
         if (!vk->is_atomic()) {  // flat and non-atomic: take note
@@ -4695,11 +4695,11 @@
       case NONSTATIC_INLINE:
         if (fs.is_inlined()) {
           Klass* klass = nonstatic_inline_type_klasses[next_inline_type_index];
           assert(klass != NULL, "Klass should have been loaded and resolved earlier");
           assert(klass->access_flags().is_inline_type(),"Must be an inline type");
-          ValueKlass* vklass = ValueKlass::cast(klass);
+          InlineKlass* vklass = InlineKlass::cast(klass);
           real_offset = next_nonstatic_inline_type_offset;
           next_nonstatic_inline_type_offset += (vklass->size_helper()) * wordSize - vklass->first_field_offset();
           // aligning next inline type on a 64 bits boundary
           next_nonstatic_inline_type_offset = align_up(next_nonstatic_inline_type_offset, BytesPerLong);
           next_inline_type_index += 1;
@@ -6176,11 +6176,11 @@
                                  ik->external_name(), aot_fp, _stream->compute_fingerprint());
     }
   }
 
   if (ik->is_inline_klass()) {
-    ValueKlass* vk = ValueKlass::cast(ik);
+    InlineKlass* vk = InlineKlass::cast(ik);
     oop val = ik->allocate_instance(CHECK_NULL);
     vk->set_default_value(val);
   }
 
   return ik;
@@ -6448,24 +6448,24 @@
       }
       klass_name->decrement_refcount();
     } else
       if (is_inline_type() && ((ik->field_access_flags(i) & JVM_ACC_FIELD_INTERNAL) != 0)
         && ((ik->field_access_flags(i) & JVM_ACC_STATIC) != 0)) {
-      ValueKlass::cast(ik)->set_default_value_offset(ik->field_offset(i));
+      InlineKlass::cast(ik)->set_default_value_offset(ik->field_offset(i));
     }
   }
 
   if (is_inline_type()) {
-    ValueKlass* vk = ValueKlass::cast(ik);
+    InlineKlass* vk = InlineKlass::cast(ik);
     if (UseNewFieldLayout) {
       vk->set_alignment(_alignment);
       vk->set_first_field_offset(_first_field_offset);
       vk->set_exact_size_in_bytes(_exact_size_in_bytes);
     } else {
       vk->set_first_field_offset(vk->first_field_offset_old());
     }
-    ValueKlass::cast(ik)->initialize_calling_convention(CHECK);
+    InlineKlass::cast(ik)->initialize_calling_convention(CHECK);
   }
 
   ClassLoadingService::notify_class_loaded(ik, false /* not shared class */);
 
   if (!is_internal()) {
