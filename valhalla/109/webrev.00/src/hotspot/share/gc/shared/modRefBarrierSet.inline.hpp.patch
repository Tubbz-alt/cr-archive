diff a/src/hotspot/share/gc/shared/modRefBarrierSet.inline.hpp b/src/hotspot/share/gc/shared/modRefBarrierSet.inline.hpp
--- a/src/hotspot/share/gc/shared/modRefBarrierSet.inline.hpp
+++ b/src/hotspot/share/gc/shared/modRefBarrierSet.inline.hpp
@@ -29,11 +29,11 @@
 #include "gc/shared/modRefBarrierSet.hpp"
 #include "oops/compressedOops.inline.hpp"
 #include "oops/klass.inline.hpp"
 #include "oops/objArrayOop.hpp"
 #include "oops/oop.hpp"
-#include "oops/valueKlass.hpp"
+#include "oops/inlineKlass.hpp"
 
 // count is number of array elements being written
 void ModRefBarrierSet::write_ref_array(HeapWord* start, size_t count) {
   HeapWord* end = (HeapWord*)((char*)start + (count*heapOopSize));
   // In the case of compressed oops, start and end may potentially be misaligned;
@@ -153,11 +153,11 @@
   bs->write_region(MemRegion((HeapWord*)(void*)dst, size));
 }
 
 template <DecoratorSet decorators, typename BarrierSetT>
 inline void ModRefBarrierSet::AccessBarrier<decorators, BarrierSetT>::
-value_copy_in_heap(void* src, void* dst, ValueKlass* md) {
+value_copy_in_heap(void* src, void* dst, InlineKlass* md) {
   if (HasDecorator<decorators, IS_DEST_UNINITIALIZED>::value || (!md->contains_oops())) {
     Raw::value_copy(src, dst, md);
   } else {
     BarrierSetT* bs = barrier_set_cast<BarrierSetT>(BarrierSet::barrier_set());
     // src/dst aren't oops, need offset to adjust oop map offset
