diff a/src/hotspot/share/prims/jniCheck.cpp b/src/hotspot/share/prims/jniCheck.cpp
--- a/src/hotspot/share/prims/jniCheck.cpp
+++ b/src/hotspot/share/prims/jniCheck.cpp
@@ -276,11 +276,12 @@
 
   /* check for proper field type */
   if (!id->find_local_field(&fd))
     ReportJNIFatalError(thr, fatal_static_field_not_found);
   if ((fd.field_type() != ftype) &&
-      !(fd.field_type() == T_ARRAY && ftype == T_OBJECT)) {
+      !(fd.field_type() == T_ARRAY && ftype == T_OBJECT) &&
+      !(fd.field_type() == T_VALUETYPE && ftype == T_OBJECT)) {
     ReportJNIFatalError(thr, fatal_static_field_mismatch);
   }
 }
 
 static inline void
@@ -313,11 +314,12 @@
   if (!InstanceKlass::cast(k_oop)->find_field_from_offset(offset,
                                                               false, &fd))
     ReportJNIFatalError(thr, fatal_instance_field_not_found);
 
   if ((fd.field_type() != ftype) &&
-      !(fd.field_type() == T_ARRAY && ftype == T_OBJECT)) {
+      !(fd.field_type() == T_ARRAY && ftype == T_OBJECT) &&
+      !(fd.field_type() == T_VALUETYPE && ftype == T_OBJECT)) {
     ReportJNIFatalError(thr, fatal_instance_field_mismatch);
   }
 }
 
 static inline void
@@ -2010,10 +2012,211 @@
     jobject result = UNCHECKED()->GetModule(env,clazz);
     functionExit(thr);
     return result;
 JNI_END
 
+JNI_ENTRY_CHECKED(void*,
+    checked_jni_GetFlattenedArrayElements(JNIEnv* env, jarray array, jboolean* isCopy))
+    functionEnter(thr);
+    void* result = UNCHECKED()->GetFlattenedArrayElements(env, array, isCopy);
+    functionExit(thr);
+    return result;
+
+JNI_END
+
+JNI_ENTRY_CHECKED(void,
+    checked_jni_ReleaseFlattenedArrayElements(JNIEnv* env, jarray array, void* elem, jint mode))
+    functionEnter(thr);
+    UNCHECKED()->ReleaseFlattenedArrayElements(env, array, elem, mode);
+    functionExit(thr);
+    return;
+JNI_END
+
+JNI_ENTRY_CHECKED(jclass,
+    checked_jni_GetFlattenedArrayElementClass(JNIEnv* env, jarray array))
+    functionEnter(thr);
+    jclass clazz = UNCHECKED()->GetFlattenedArrayElementClass(env, array);
+    functionExit(thr);
+    return clazz;
+JNI_END
+
+JNI_ENTRY_CHECKED(jsize,
+    checked_jni_GetFlattenedArrayElementSize(JNIEnv* env, jarray array))
+    functionEnter(thr);
+    jsize size = UNCHECKED()->GetFlattenedArrayElementSize(env, array);
+    functionExit(thr);
+    return size;
+JNI_END
+
+JNI_ENTRY_CHECKED(jsize,
+    checked_jni_GetFieldOffsetInFlattenedLayout(JNIEnv* env, jclass clazz, const char *name, const char *signature, jboolean* isFlattened))
+    functionEnter(thr);
+    jsize offset = UNCHECKED()->GetFieldOffsetInFlattenedLayout(env, clazz, name, signature, isFlattened);
+    functionExit(thr);
+    return offset;
+JNI_END
+
+JNI_ENTRY_CHECKED(jobject,
+    checked_jni_CreateSubElementSelector(JNIEnv* env, jarray array))
+    functionEnter(thr);
+    jobject selector = UNCHECKED()->CreateSubElementSelector(env, array);
+    functionExit(thr);
+    return selector;
+JNI_END
+
+JNI_ENTRY_CHECKED(jobject,
+    checked_jni_GetSubElementSelector(JNIEnv* env, jobject selector, jfieldID fieldID))
+    functionEnter(thr);
+    jobject res = UNCHECKED()->GetSubElementSelector(env, selector, fieldID);
+    functionExit(thr);
+    return res;
+JNI_END
+
+JNI_ENTRY_CHECKED(jobject,
+    checked_jni_GetObjectSubElement(JNIEnv* env, jarray array, jobject selector, int index))
+    functionEnter(thr);
+    jobject res = UNCHECKED()->GetObjectSubElement(env, array, selector, index);
+    functionExit(thr);
+    return res;
+JNI_END
+
+JNI_ENTRY_CHECKED(void,
+    checked_jni_SetObjectSubElement(JNIEnv* env, jarray array, jobject selector, int index, jobject value))
+    functionEnter(thr);
+    UNCHECKED()->SetObjectSubElement(env, array, selector, index, value);
+    functionExit(thr);
+    return;
+JNI_END
+
+JNI_ENTRY_CHECKED(jboolean,
+    checked_jni_GetBooleanSubElement(JNIEnv* env, jarray array, jobject selector, int index))
+    functionEnter(thr);
+    jboolean res = UNCHECKED()->GetBooleanSubElement(env, array, selector, index);
+    functionExit(thr);
+    return res;
+JNI_END
+
+JNI_ENTRY_CHECKED(void,
+    checked_jni_SetBooleanSubElement(JNIEnv* env, jarray array, jobject selector, int index, jboolean value))
+    functionEnter(thr);
+    UNCHECKED()->SetBooleanSubElement(env, array, selector, index, value);
+    functionExit(thr);
+    return;
+JNI_END
+
+JNI_ENTRY_CHECKED(jbyte,
+    checked_jni_GetByteSubElement(JNIEnv* env, jarray array, jobject selector, int index))
+    functionEnter(thr);
+    jbyte res = UNCHECKED()->GetByteSubElement(env, array, selector, index);
+    functionExit(thr);
+    return res;
+JNI_END
+
+JNI_ENTRY_CHECKED(void,
+    checked_jni_SetByteSubElement(JNIEnv* env, jarray array, jobject selector, int index, jbyte value))
+    functionEnter(thr);
+    UNCHECKED()->SetByteSubElement(env, array, selector, index, value);
+    functionExit(thr);
+    return;
+JNI_END
+
+JNI_ENTRY_CHECKED(jshort,
+    checked_jni_GetShortSubElement(JNIEnv* env, jarray array, jobject selector, int index))
+    functionEnter(thr);
+    jshort res = UNCHECKED()->GetShortSubElement(env, array, selector, index);
+    functionExit(thr);
+    return res;
+JNI_END
+
+JNI_ENTRY_CHECKED(void,
+    checked_jni_SetShortSubElement(JNIEnv* env, jarray array, jobject selector, int index, jshort value))
+    functionEnter(thr);
+    UNCHECKED()->SetShortSubElement(env, array, selector, index, value);
+    functionExit(thr);
+    return;
+JNI_END
+
+JNI_ENTRY_CHECKED(jchar,
+    checked_jni_GetCharSubElement(JNIEnv* env, jarray array, jobject selector, int index))
+    functionEnter(thr);
+    jchar res = UNCHECKED()->GetCharSubElement(env, array, selector, index);
+    functionExit(thr);
+    return res;
+JNI_END
+
+JNI_ENTRY_CHECKED(void,
+    checked_jni_SetCharSubElement(JNIEnv* env, jarray array, jobject selector, int index, jchar value))
+    functionEnter(thr);
+    UNCHECKED()->SetCharSubElement(env, array, selector, index, value);
+    functionExit(thr);
+    return;
+JNI_END
+
+JNI_ENTRY_CHECKED(jint,
+    checked_jni_GetIntSubElement(JNIEnv* env, jarray array, jobject selector, int index))
+    functionEnter(thr);
+    jint res = UNCHECKED()->GetIntSubElement(env, array, selector, index);
+    functionExit(thr);
+    return res;
+JNI_END
+
+JNI_ENTRY_CHECKED(void,
+    checked_jni_SetIntSubElement(JNIEnv* env, jarray array, jobject selector, int index, jint value))
+    functionEnter(thr);
+    UNCHECKED()->SetIntSubElement(env, array, selector, index, value);
+    functionExit(thr);
+    return;
+JNI_END
+
+JNI_ENTRY_CHECKED(jlong,
+    checked_jni_GetLongSubElement(JNIEnv* env, jarray array, jobject selector, int index))
+    functionEnter(thr);
+    jlong res = UNCHECKED()->GetLongSubElement(env, array, selector, index);
+    functionExit(thr);
+    return res;
+JNI_END
+
+JNI_ENTRY_CHECKED(void,
+    checked_jni_SetLongSubElement(JNIEnv* env, jarray array, jobject selector, int index, jlong value))
+    functionEnter(thr);
+    UNCHECKED()->SetLongSubElement(env, array, selector, index, value);
+    functionExit(thr);
+    return;
+JNI_END
+
+JNI_ENTRY_CHECKED(jfloat,
+    checked_jni_GetFloatSubElement(JNIEnv* env, jarray array, jobject selector, int index))
+    functionEnter(thr);
+    jfloat res = UNCHECKED()->GetFloatSubElement(env, array, selector, index);
+    functionExit(thr);
+    return res;
+JNI_END
+
+JNI_ENTRY_CHECKED(void,
+    checked_jni_SetFloatSubElement(JNIEnv* env, jarray array, jobject selector, int index, jfloat value))
+    functionEnter(thr);
+    UNCHECKED()->SetFloatSubElement(env, array, selector, index, value);
+    functionExit(thr);
+    return;
+JNI_END
+
+JNI_ENTRY_CHECKED(jdouble,
+    checked_jni_GetDoubleSubElement(JNIEnv* env, jarray array, jobject selector, int index))
+    functionEnter(thr);
+    jdouble res = UNCHECKED()->GetDoubleSubElement(env, array, selector, index);
+    functionExit(thr);
+    return res;
+JNI_END
+
+JNI_ENTRY_CHECKED(void,
+    checked_jni_SetDoubleSubElement(JNIEnv* env, jarray array, jobject selector, int index, jdouble value))
+    functionEnter(thr);
+    UNCHECKED()->SetDoubleSubElement(env, array, selector, index, value);
+    functionExit(thr);
+    return;
+JNI_END
+
 /*
  * Structure containing all checked jni functions
  */
 struct JNINativeInterface_  checked_jni_NativeInterface = {
     NULL,
@@ -2295,11 +2498,41 @@
 
     checked_jni_GetObjectRefType,
 
     // Module Features
 
-    checked_jni_GetModule
+    checked_jni_GetModule,
+
+    // Flattened arrays Features
+    checked_jni_GetFlattenedArrayElements,
+    checked_jni_ReleaseFlattenedArrayElements,
+    checked_jni_GetFlattenedArrayElementClass,
+    checked_jni_GetFlattenedArrayElementSize,
+    checked_jni_GetFieldOffsetInFlattenedLayout,
+
+    checked_jni_CreateSubElementSelector,
+    checked_jni_GetSubElementSelector,
+    checked_jni_GetObjectSubElement,
+    checked_jni_SetObjectSubElement,
+
+    checked_jni_GetBooleanSubElement,
+    checked_jni_GetByteSubElement,
+    checked_jni_GetShortSubElement,
+    checked_jni_GetCharSubElement,
+    checked_jni_GetIntSubElement,
+    checked_jni_GetLongSubElement,
+    checked_jni_GetFloatSubElement,
+    checked_jni_GetDoubleSubElement,
+
+    checked_jni_SetBooleanSubElement,
+    checked_jni_SetByteSubElement,
+    checked_jni_SetShortSubElement,
+    checked_jni_SetCharSubElement,
+    checked_jni_SetIntSubElement,
+    checked_jni_SetLongSubElement,
+    checked_jni_SetFloatSubElement,
+    checked_jni_SetDoubleSubElement
 };
 
 
 // Returns the function structure
 struct JNINativeInterface_* jni_functions_check() {
