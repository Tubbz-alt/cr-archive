diff a/src/hotspot/cpu/aarch64/aarch64.ad b/src/hotspot/cpu/aarch64/aarch64.ad
--- a/src/hotspot/cpu/aarch64/aarch64.ad
+++ b/src/hotspot/cpu/aarch64/aarch64.ad
@@ -1359,21 +1359,16 @@
 
   // helper to determine the maximum number of Phi nodes we may need to
   // traverse when searching from a card mark membar for the merge mem
   // feeding a trailing membar or vice versa
 
-// predicates controlling emit of ldr<x>/ldar<x> and associated dmb
+// predicates controlling emit of ldr<x>/ldar<x>
 
 bool unnecessary_acquire(const Node *barrier)
 {
   assert(barrier->is_MemBar(), "expecting a membar");
 
-  if (UseBarriersForVolatile) {
-    // we need to plant a dmb
-    return false;
-  }
-
   MemBarNode* mb = barrier->as_MemBar();
 
   if (mb->trailing_load()) {
     return true;
   }
@@ -1388,30 +1383,19 @@
 }
 
 bool needs_acquiring_load(const Node *n)
 {
   assert(n->is_Load(), "expecting a load");
-  if (UseBarriersForVolatile) {
-    // we use a normal load and a dmb
-    return false;
-  }
-
-  LoadNode *ld = n->as_Load();
 
   return ld->is_acquire();
 }
 
 bool unnecessary_release(const Node *n)
 {
   assert((n->is_MemBar() &&
-	  n->Opcode() == Op_MemBarRelease),
-	 "expecting a release membar");
-
-  if (UseBarriersForVolatile) {
-    // we need to plant a dmb
-    return false;
-  }
+          n->Opcode() == Op_MemBarRelease),
+         "expecting a release membar");
 
   MemBarNode *barrier = n->as_MemBar();
   if (!barrier->leading()) {
     return false;
   } else {
@@ -1435,15 +1419,10 @@
 }
 
 bool unnecessary_volatile(const Node *n)
 {
   // assert n->is_MemBar();
-  if (UseBarriersForVolatile) {
-    // we need to plant a dmb
-    return false;
-  }
-
   MemBarNode *mbvol = n->as_MemBar();
 
   bool release = mbvol->trailing_store();
   assert(!release || (mbvol->in(MemBarNode::Precedent)->is_Store() && mbvol->in(MemBarNode::Precedent)->as_Store()->is_release()), "");
 #ifdef ASSERT
@@ -1456,21 +1435,15 @@
 #endif
 
   return release;
 }
 
-// predicates controlling emit of str<x>/stlr<x> and associated dmbs
+// predicates controlling emit of str<x>/stlr<x>
 
 bool needs_releasing_store(const Node *n)
 {
   // assert n->is_Store();
-  if (UseBarriersForVolatile) {
-    // we use a normal store and dmb combination
-    return false;
-  }
-
-  StoreNode *st = n->as_Store();
 
   return st->trailing_membar() != NULL;
 }
 
 // predicate controlling translation of CAS
@@ -1478,14 +1451,10 @@
 // returns true if CAS needs to use an acquiring load otherwise false
 
 bool needs_acquiring_load_exclusive(const Node *n)
 {
   assert(is_CAS(n->Opcode(), true), "expecting a compare and swap");
-  if (UseBarriersForVolatile) {
-    return false;
-  }
-
   LoadStoreNode* ldst = n->as_LoadStore();
   if (is_CAS(n->Opcode(), false)) {
     assert(ldst->trailing_membar() != NULL, "expected trailing membar");
   } else {
     return ldst->trailing_membar() != NULL;
