diff a/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java b/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java
@@ -29,28 +29,28 @@
  */
 import java.util.ArrayList;
 
 public final inline class ValuesAsRefs {
 
-    final ArrayList<? extends ValuesAsRefs?> ao = null; // values can be wildcard bounds.
+    final ArrayList<? extends ValuesAsRefs.ref> ao = null; // values can be wildcard bounds.
 
     final inline class I implements java.io.Serializable {
         final int y = 42;
     }
 
     void foo() {
         I i = this.new I();  // values can be enclosing instances.
         i = ValuesAsRefs.I.default;
-        Object o = (I? & java.io.Serializable) i; // values can be used in intersection casts
+        Object o = (I.ref & java.io.Serializable) i; // values can be used in intersection casts
     }
     <T> void goo() {
-        this.<ValuesAsRefs?>goo(); // values can be type arguments to generic method calls
+        this.<ValuesAsRefs.ref>goo(); // values can be type arguments to generic method calls
     }
 
     public static void main(String [] args) {
         Object o = null;
-        ArrayList<ValuesAsRefs.I?> aloi = new ArrayList<>(); // values can be type arguments.
+        ArrayList<ValuesAsRefs.I.ref> aloi = new ArrayList<>(); // values can be type arguments.
         boolean OK = false;
         try {
             aloi.add((ValuesAsRefs.I) o);
         } catch (NullPointerException npe) {
             OK = true;
