diff a/test/langtools/tools/javac/valhalla/lworld-values/ArrayCreationWithQuestion.java b/test/langtools/tools/javac/valhalla/lworld-values/ArrayCreationWithQuestion.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/ArrayCreationWithQuestion.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ArrayCreationWithQuestion.java
@@ -22,11 +22,11 @@
  */
 
 /*
  * @test
  * @bug 8222634
- * @summary Check array creation with V and V?
+ * @summary Check array creation with V and V.ref
  * @modules jdk.compiler/com.sun.tools.javac.util jdk.jdeps/com.sun.tools.javap
  * @compile ArrayCreationWithQuestion.java
  * @run main/othervm -Xverify:none ArrayCreationWithQuestion
  * @modules jdk.compiler
  */
@@ -36,12 +36,12 @@
 import java.nio.file.Paths;
 
 public class ArrayCreationWithQuestion {
 
     static inline class VT {
-        VT?[] a1 = new VT?[42];
-        VT?[] a2 = new VT?[42];
+        VT.ref[] a1 = new VT.ref[42];
+        VT.ref[] a2 = new VT.ref[42];
         VT[] a3 = new VT[42];
         VT[] a4 = new VT[42];
     }
 
     public static void main(String[] args) {
@@ -51,14 +51,14 @@
     void run() {
         String [] params = new String [] { "-v",
                                             Paths.get(System.getProperty("test.classes"),
                                                 "ArrayCreationWithQuestion$VT.class").toString() };
         runCheck(params, new String [] {
-        "         6: anewarray     #3                  // class ArrayCreationWithQuestion$VT",
-        "        17: anewarray     #3                  // class ArrayCreationWithQuestion$VT",
-        "        28: anewarray     #11                 // class \"QArrayCreationWithQuestion$VT;\"",
-        "        39: anewarray     #11                 // class \"QArrayCreationWithQuestion$VT;\"",
+        "         6: anewarray     #3                  // class ArrayCreationWithQuestion$VT$ref",
+        "        17: anewarray     #3                  // class ArrayCreationWithQuestion$VT$ref",
+        "        28: anewarray     #12                 // class \"QArrayCreationWithQuestion$VT;\"",
+        "        39: anewarray     #12                 // class \"QArrayCreationWithQuestion$VT;\"",
          });
 
      }
 
      void runCheck(String [] params, String [] expectedOut) {
diff a/test/langtools/tools/javac/valhalla/lworld-values/ArrayRelationsTest.java b/test/langtools/tools/javac/valhalla/lworld-values/ArrayRelationsTest.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/ArrayRelationsTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ArrayRelationsTest.java
@@ -33,11 +33,11 @@
 public inline class ArrayRelationsTest {
 
     int x = 42;
 
     public static void main(String [] args) {
-        ArrayRelationsTest? [] la = new ArrayRelationsTest?[10];
+        ArrayRelationsTest.ref [] la = new ArrayRelationsTest.ref[10];
         ArrayRelationsTest [] qa = new ArrayRelationsTest[10];
         boolean cce = false;
         try {
             qa = (ArrayRelationsTest[]) (Object []) (new String [10]);
         } catch (ClassCastException e) {
@@ -45,11 +45,11 @@
         }
         if (!cce) {
             throw new AssertionError("Missing CCE");
         }
         la = qa;
-        ArrayRelationsTest?[] la2 = qa;
+        ArrayRelationsTest.ref[] la2 = qa;
         ArrayRelationsTest [] qa2 = (ArrayRelationsTest []) la2;
         boolean npe = false;
         try {
             la2[0] = null;
         } catch (NullPointerException e) {
@@ -69,11 +69,11 @@
             throw new AssertionError("Missing NPE");
         }
 
         // round trip;
         Object o = oa = la = qa;
-        qa = (ArrayRelationsTest[]) (la = (ArrayRelationsTest? []) (oa = (Object []) o));
+        qa = (ArrayRelationsTest[]) (la = (ArrayRelationsTest.ref []) (oa = (Object []) o));
         qa [0] = new ArrayRelationsTest();
 
         npe = false;
         try {
             la[0] = null;
@@ -82,11 +82,11 @@
         }
         if (!npe) {
             throw new AssertionError("Missing NPE");
         }
 
-        la = new ArrayRelationsTest? [10];
+        la = new ArrayRelationsTest.ref [10];
 
         cce = false;
         try {
             qa = (ArrayRelationsTest[]) la;
         } catch (ClassCastException c) {
diff a/test/langtools/tools/javac/valhalla/lworld-values/AssortedTests.java b/test/langtools/tools/javac/valhalla/lworld-values/AssortedTests.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/AssortedTests.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/AssortedTests.java
@@ -36,11 +36,11 @@
 
 class X {
     static final MyValue1 vField = new MyValue1();
 
     inline class MyValue2 {
-        final MyValue1? vBoxField;
+        final MyValue1.ref vBoxField;
 
         public MyValue2() {
             vBoxField = new MyValue1();
         }
     }
@@ -54,25 +54,25 @@
 }
 
 class Y {
 
     inline class MyValue4 {
-        final MyValue3? vBoxField = null;
+        final MyValue3.ref vBoxField = null;
 
         public int test() {
             return vBoxField.hash();
         }
     }
 
     public static void main(String[] args) { }
 }
 
 interface MyInterface {
-    public void test(MyValue5? vt);
+    public void test(MyValue5.ref vt);
 }
 
 inline class MyValue5 implements MyInterface {
     final int x = 0;
 
     @Override
-    public void test(MyValue5? vt) { }
+    public void test(MyValue5.ref vt) { }
 }
diff a/test/langtools/tools/javac/valhalla/lworld-values/BogusIncompatibility.java b/test/langtools/tools/javac/valhalla/lworld-values/BogusIncompatibility.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/BogusIncompatibility.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/BogusIncompatibility.java
@@ -28,8 +28,8 @@
  * @compile BogusIncompatibility.java
  * @compile BogusIncompatibility.java
  */
 
 public class BogusIncompatibility {
-  MyValue? field = MyValue.create();
-  MyValue? field2 = MyValue.create();
+  MyValue.ref field = MyValue.create();
+  MyValue.ref field2 = MyValue.create();
 }
diff a/test/langtools/tools/javac/valhalla/lworld-values/BoxValCastTest.java b/test/langtools/tools/javac/valhalla/lworld-values/BoxValCastTest.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/BoxValCastTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/BoxValCastTest.java
@@ -37,17 +37,17 @@
 
 public class BoxValCastTest {
 
     static inline class VT {
         int f = 0;
-        static final VT? vtbox = (VT?) new VT(); // no binary cast
+        static final VT.ref vtbox = (VT.ref) new VT(); // no binary cast
         static VT vt = (VT) vtbox; // binary cast
-        static VT? box = vt; // no binary cast
-        static VT? box2 = (VT) box; // no binary cast
-        static VT? box3 = id(new VT()); // no binary cast + binary cast
+        static VT.ref box = vt; // no binary cast
+        static VT.ref box2 = (VT) box; // binary cast
+        static VT.ref box3 = id(new VT()); // no binary cast + no binary cast
 
-        static VT id(VT? vtb) {
+        static VT id(VT.ref vtb) {
             return (VT) vtb; // binary
         }
     }
 
     public static void main(String[] args) {
diff a/test/langtools/tools/javac/valhalla/lworld-values/CheckFieldDescriptors.java b/test/langtools/tools/javac/valhalla/lworld-values/CheckFieldDescriptors.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/CheckFieldDescriptors.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/CheckFieldDescriptors.java
@@ -48,23 +48,23 @@
                 fCount++;
                 if (!fld.descriptor.getValue(cls.constant_pool).equals("QCheckFieldDescriptors;"))
                     throw new Exception("Bad descriptor for field1");
             } else if (fld.getName(cls.constant_pool).equals("f2")) {
                 fCount++;
-                if (!fld.descriptor.getValue(cls.constant_pool).equals("LCheckFieldDescriptors;"))
+                if (!fld.descriptor.getValue(cls.constant_pool).equals("LCheckFieldDescriptors$ref;"))
                     throw new Exception("Bad descriptor for field2");
             } else if (fld.getName(cls.constant_pool).equals("f3")) {
                 fCount++;
-                if (!fld.descriptor.getValue(cls.constant_pool).equals("LCheckFieldDescriptors;"))
+                if (!fld.descriptor.getValue(cls.constant_pool).equals("LCheckFieldDescriptors$ref;"))
                     throw new Exception("Bad descriptor for field3");
             } else if (fld.getName(cls.constant_pool).equals("a1")) {
                 fCount++;
-                if (!fld.descriptor.getValue(cls.constant_pool).equals("[LCheckFieldDescriptors;"))
+                if (!fld.descriptor.getValue(cls.constant_pool).equals("[LCheckFieldDescriptors$ref;"))
                     throw new Exception("Bad descriptor for field4");
             } else if (fld.getName(cls.constant_pool).equals("a2")) {
                 fCount++;
-                if (!fld.descriptor.getValue(cls.constant_pool).equals("[LCheckFieldDescriptors;"))
+                if (!fld.descriptor.getValue(cls.constant_pool).equals("[LCheckFieldDescriptors$ref;"))
                     throw new Exception("Bad descriptor for field5");
             } else if (fld.getName(cls.constant_pool).equals("a3")) {
                 fCount++;
                 if (!fld.descriptor.getValue(cls.constant_pool).equals("[QCheckFieldDescriptors;"))
                     throw new Exception("Bad descriptor for field6");
@@ -81,13 +81,13 @@
 }
 
 class CheckFieldDescriptorsAuxilliary {
 
     CheckFieldDescriptors f1;
-    CheckFieldDescriptors? f2;
-    CheckFieldDescriptors? f3;
+    CheckFieldDescriptors.ref f2;
+    CheckFieldDescriptors.ref f3;
 
-    CheckFieldDescriptors?[] a1 = new CheckFieldDescriptors?[42];
-    CheckFieldDescriptors?[] a2 = new CheckFieldDescriptors?[42];
+    CheckFieldDescriptors.ref[] a1 = new CheckFieldDescriptors.ref[42];
+    CheckFieldDescriptors.ref[] a2 = new CheckFieldDescriptors.ref[42];
     CheckFieldDescriptors[] a3 = new CheckFieldDescriptors[42];
     CheckFieldDescriptors[] a4 = new CheckFieldDescriptors[42];
 }
diff a/test/langtools/tools/javac/valhalla/lworld-values/CheckNullWithQuestion.java b/test/langtools/tools/javac/valhalla/lworld-values/CheckNullWithQuestion.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/CheckNullWithQuestion.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/CheckNullWithQuestion.java
@@ -24,25 +24,25 @@
  */
 
 /*
  * @test
  * @bug 8222634
- * @summary Check null assignment/comparisons against VT?
+ * @summary Check null assignment/comparisons against VT.ref
  * @compile CheckNullWithQuestion.java
  */
 
 inline class CheckNullWithQuestion {
     final int x = 0;
     void foo(boolean flag) {
-        CheckNullWithQuestion? vBox = null;
+        CheckNullWithQuestion.ref vBox = null;
         if (vBox != null) {}
-        CheckNullWithQuestion? val = flag ? vBox : null;
+        CheckNullWithQuestion.ref val = flag ? vBox : null;
     }
 }
 
 class X {
     void foo(boolean flag) {
-        CheckNullWithQuestion? vBox = null;
+        CheckNullWithQuestion.ref vBox = null;
         if (vBox != null) {}
-        CheckNullWithQuestion? val = flag ? vBox : null;
+        CheckNullWithQuestion.ref val = flag ? vBox : null;
     }
 }
diff a/test/langtools/tools/javac/valhalla/lworld-values/CheckQuestionInMessages.java b/test/langtools/tools/javac/valhalla/lworld-values/CheckQuestionInMessages.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/CheckQuestionInMessages.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/CheckQuestionInMessages.java
@@ -7,8 +7,8 @@
  */
 
 import java.util.List;
 
 inline class X {
-    List<X?> ls = new Object();    
-    X?[] xa = new Object?[10];
+    List<X.ref> ls = new Object();
+    X.ref[] xa = new Object[10];  // no support for Object.ref yet, but they are the same.
 }
diff a/test/langtools/tools/javac/valhalla/lworld-values/CheckQuestionInMessages.out b/test/langtools/tools/javac/valhalla/lworld-values/CheckQuestionInMessages.out
--- a/test/langtools/tools/javac/valhalla/lworld-values/CheckQuestionInMessages.out
+++ b/test/langtools/tools/javac/valhalla/lworld-values/CheckQuestionInMessages.out
@@ -1,3 +1,3 @@
-CheckQuestionInMessages.java:12:19: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Object, java.util.List<X?>)
-CheckQuestionInMessages.java:13:15: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Object[], X?[])
+CheckQuestionInMessages.java:12:22: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Object, java.util.List<X$ref>)
+CheckQuestionInMessages.java:13:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: java.lang.Object[], X$ref[])
 2 errors
diff a/test/langtools/tools/javac/valhalla/lworld-values/CompilerNoBogusAssert.java b/test/langtools/tools/javac/valhalla/lworld-values/CompilerNoBogusAssert.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/CompilerNoBogusAssert.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/CompilerNoBogusAssert.java
@@ -41,11 +41,11 @@
             this.y = y;
         }
     }
 
 
-    static void testCastingFromBoxToVal(Point? p) {
+    static void testCastingFromBoxToVal(Point.ref p) {
         boolean npe = false;
         try {
             Point pv = (Point) p;
         } catch(NullPointerException e) {
             npe = true;
diff a/test/langtools/tools/javac/valhalla/lworld-values/CompilesJustFine.java b/test/langtools/tools/javac/valhalla/lworld-values/CompilesJustFine.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/CompilesJustFine.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/CompilesJustFine.java
@@ -30,11 +30,11 @@
  * @compile -XDallowWithFieldOperator CompilesJustFine.java
  */
 
 class CompilesFine {
 
-    static Point? nfspQm;
+    static Point.ref nfspQm;
 
     public static void main(String[] args) {
         nfspQm = null;
     }
 }
@@ -49,11 +49,11 @@
 }
 
 class CompilesJustFine {
 
     static final inline class Value {
-        final PointBug2? nfpQm;
+        final PointBug2.ref nfpQm;
 
         private Value() {
             nfpQm = PointBug2.createPoint(0, 0);
         }
     }
diff a/test/langtools/tools/javac/valhalla/lworld-values/ExplicitLambdaWithNullableTypes.java b/test/langtools/tools/javac/valhalla/lworld-values/ExplicitLambdaWithNullableTypes.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/ExplicitLambdaWithNullableTypes.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ExplicitLambdaWithNullableTypes.java
@@ -73,19 +73,19 @@
 }
 
 public final class ExplicitLambdaWithNullableTypes {
 
    public static void main(String[] args) {
-       List<OptionalInt?> opts = new ArrayList<>();
+       List<OptionalInt.ref> opts = new ArrayList<>();
        for (int i=0; i < 5; i++) {
            opts.add(OptionalInt.of(i));
            opts.add(OptionalInt.empty());
            opts.add(null);
        }
 
        Integer total = opts.stream()
-           .map((OptionalInt? o) -> {
+           .map((OptionalInt.ref o) -> {
                if (o == null)
                    return 0;
 
                OptionalInt op = (OptionalInt)o;
                return op.orElse(0);
diff a/test/langtools/tools/javac/valhalla/lworld-values/ExplicitLambdaWithNullableTypes2.java b/test/langtools/tools/javac/valhalla/lworld-values/ExplicitLambdaWithNullableTypes2.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/ExplicitLambdaWithNullableTypes2.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ExplicitLambdaWithNullableTypes2.java
@@ -74,19 +74,19 @@
 }
 
 public final class ExplicitLambdaWithNullableTypes2 {
 
    public static void main(String[] args) {
-       List<OptionalInt?> opts = new ArrayList<>();
+       List<OptionalInt.ref> opts = new ArrayList<>();
        for (int i=0; i < 5; i++) {
            opts.add(OptionalInt.of(i));
            opts.add(OptionalInt.empty());
            opts.add(null);
        }
 
-       Stream<OptionalInt?> soi = opts.stream();
-       ToIntFunction<OptionalInt?> f = (OptionalInt? o) -> {
+       Stream<OptionalInt.ref> soi = opts.stream();
+       ToIntFunction<OptionalInt.ref> f = (OptionalInt.ref o) -> {
             if (o == null) return 0;
             OptionalInt op = (OptionalInt)o;
             return op.orElse(0);
        };
 
diff a/test/langtools/tools/javac/valhalla/lworld-values/ExplicitLambdaWithNullableTypes3.java b/test/langtools/tools/javac/valhalla/lworld-values/ExplicitLambdaWithNullableTypes3.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/ExplicitLambdaWithNullableTypes3.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ExplicitLambdaWithNullableTypes3.java
@@ -74,19 +74,19 @@
 }
 
 public final class ExplicitLambdaWithNullableTypes3 {
 
    public static void main(String[] args) {
-       List<OptionalInt?> opts = new ArrayList<>();
+       List<OptionalInt.ref> opts = new ArrayList<>();
        for (int i=0; i < 5; i++) {
            opts.add(OptionalInt.of(i));
            opts.add(OptionalInt.empty());
            opts.add(null);
        }
 
-       Stream<OptionalInt?> soi = opts.stream();
-       ToIntFunction<OptionalInt?> f = o -> {
+       Stream<OptionalInt.ref> soi = opts.stream();
+       ToIntFunction<OptionalInt.ref> f = o -> {
             if (o == null) return 0;
             OptionalInt op = (OptionalInt)o;
             return op.orElse(0);
         };
 
diff a/test/langtools/tools/javac/valhalla/lworld-values/GenericsAndValues4.java b/test/langtools/tools/javac/valhalla/lworld-values/GenericsAndValues4.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/GenericsAndValues4.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/GenericsAndValues4.java
@@ -32,11 +32,11 @@
 
 inline class InlineType<E> {
 
     interface Sample<K extends Comparable<? super K>, V> {
         void doesCompile(InlineType<? extends K> argument);
-        void doesNotCompile(java.util.Map.Entry<InlineType<? extends K>?, ? extends V> arg);
+        void doesNotCompile(java.util.Map.Entry<InlineType.ref<? extends K>, ? extends V> arg);
     }
 
     private E element;
 
     InlineType(E element) {
diff a/test/langtools/tools/javac/valhalla/lworld-values/GenericsAndValues5.java b/test/langtools/tools/javac/valhalla/lworld-values/GenericsAndValues5.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/GenericsAndValues5.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/GenericsAndValues5.java
@@ -85,20 +85,20 @@
 
 public final class GenericsAndValues5 {
 
    public static void main(String[] args) {
 
-       List<Optional<Integer>?> opts = new ArrayList<>();
+       List<Optional.ref<Integer>> opts = new ArrayList<>();
        for (int i=0; i < 6; i++) {
            Optional<Integer> oi = Optional.of(i);
-           opts.add((Optional<Integer>?)oi);
+           opts.add((Optional.ref<Integer>)oi);
            Optional<Integer> oe = Optional.empty();
-           opts.add((Optional<Integer>?)oe);
+           opts.add((Optional.ref<Integer>)oe);
        }
 
        Integer total = opts.stream()
-           .map((Optional<Integer>? o) -> {
+           .map((Optional.ref<Integer> o) -> {
                Optional<Integer> op = (Optional<Integer>)o;
                return op.orElse(0);
            })
            .reduce(0, (x, y) -> x + y);
 
diff a/test/langtools/tools/javac/valhalla/lworld-values/InnerClassAttributeValuenessTest.java b/test/langtools/tools/javac/valhalla/lworld-values/InnerClassAttributeValuenessTest.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/InnerClassAttributeValuenessTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/InnerClassAttributeValuenessTest.java
@@ -41,12 +41,12 @@
         public static Inner create(int v) {
             return new Inner(v);
         }
 
         // Uncomment the next line, and Inner ceases to be a value type
-        public static final Inner? ZERO = Inner.create(0);
-        public static final Inner? ZERO2 = Inner.create(0);
+        public static final Inner.ref ZERO = Inner.create(0);
+        public static final Inner.ref ZERO2 = Inner.create(0);
     }
 
     public static void main(String[] args) {
         if ((Inner.class.getModifiers() & AccessFlags.ACC_VALUE) == 0)
             throw new AssertionError("Value flag missing");
diff a/test/langtools/tools/javac/valhalla/lworld-values/InstanceofProjectionArray.java b/test/langtools/tools/javac/valhalla/lworld-values/InstanceofProjectionArray.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/InstanceofProjectionArray.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/InstanceofProjectionArray.java
@@ -24,24 +24,24 @@
  */
 
 /*
  * @test
  * @bug 8222974
- * @summary javac doesn't like "?" syntax in instanceof type expression
+ * @summary javac doesn't like "?" syntax in instanceof type expression (syntax is dead)
  * @compile InstanceofProjectionArray.java
  */
 
 
 public inline class InstanceofProjectionArray {
 
     int value;
     public InstanceofProjectionArray() { this.value = 0; }
 
     public static void main(String[] args) throws Throwable {
-        InstanceofProjectionArray?[] foos = new InstanceofProjectionArray?[1];
-        if (!(foos instanceof InstanceofProjectionArray?[])) {
+        InstanceofProjectionArray.ref[] foos = new InstanceofProjectionArray.ref[1];
+        if (!(foos instanceof InstanceofProjectionArray.ref[])) {
             throw new RuntimeException("Thought that should work");
         }
-        InstanceofProjectionArray?[][] xx = null;
-        if (xx instanceof InstanceofProjectionArray?[][]) {}
+        InstanceofProjectionArray.ref[][] xx = null;
+        if (xx instanceof InstanceofProjectionArray.ref[][]) {}
     }
 }
diff a/test/langtools/tools/javac/valhalla/lworld-values/IntercastTest.java b/test/langtools/tools/javac/valhalla/lworld-values/IntercastTest.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/IntercastTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/IntercastTest.java
@@ -53,28 +53,28 @@
 
         Tuple current() {
             return new Tuple(index, array[index]);
         }
 
-        Cursor? next() {
+        Cursor.ref next() {
             if (index + 1 == array.length) {
                 return null;
             }
             return new Cursor(array, index + 1);
         }
     }
 
-    private static Cursor? indexedElements(int[] array) {
+    private static Cursor.ref indexedElements(int[] array) {
         if (array.length == 0) {
             return null;
         }
         return new Cursor(array, 0);
     }
 
     public int sum() {
         int sum = 0;
-        for (Cursor? cursor = indexedElements(ARRAY); cursor != null; cursor = cursor.next()) {
+        for (Cursor.ref cursor = indexedElements(ARRAY); cursor != null; cursor = cursor.next()) {
             Tuple tuple = cursor.current();
             sum += tuple.index + tuple.element;
         }
         return sum;
     }
@@ -82,11 +82,11 @@
     public static void main(String [] args) {
         IntercastTest x = new IntercastTest();
         if (x.sum() != 63 || x.ARRAY.length != 3) {
             throw new AssertionError("Broken");
         }
-        IntercastTest? xbox = (IntercastTest?) x;
+        IntercastTest.ref xbox = (IntercastTest.ref) x;
         if (xbox.sum() != 63 || xbox.ARRAY.length != 3) {
             throw new AssertionError("Broken");
         }
         x = (IntercastTest) xbox;
         if (x.sum() != 63 || x.ARRAY.length != 3) {
diff a/test/langtools/tools/javac/valhalla/lworld-values/IntercastTest2.java b/test/langtools/tools/javac/valhalla/lworld-values/IntercastTest2.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/IntercastTest2.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/IntercastTest2.java
@@ -53,28 +53,28 @@
 
         Tuple current() {
             return new Tuple(index, array[index]);
         }
 
-        Cursor? next() {
+        Cursor.ref next() {
             if (index + 1 == array.length) {
                 return null;
             }
             return new Cursor(array, index + 1);
         }
     }
 
-    private static Cursor? indexedElements(int[] array) {
+    private static Cursor.ref indexedElements(int[] array) {
         if (array.length == 0) {
             return null;
         }
         return new Cursor(array, 0);
     }
 
     public int sum() {
         int sum = 0;
-        for (Cursor? cursor = indexedElements(ARRAY); cursor != null; cursor = cursor.next()) {
+        for (Cursor.ref cursor = indexedElements(ARRAY); cursor != null; cursor = cursor.next()) {
             Tuple tuple = cursor.current();
             sum += tuple.index + tuple.element;
         }
         return sum;
     }
@@ -82,11 +82,11 @@
     public static void main(String [] args) {
         IntercastTest2 x = new IntercastTest2();
         if (x.sum() != 63 || x.ARRAY.length != 3) {
             throw new AssertionError("Broken");
         }
-        IntercastTest2? xbox = (IntercastTest2?) x;
+        IntercastTest2.ref xbox = (IntercastTest2.ref) x;
         if (xbox.sum() != 63 || xbox.ARRAY.length != 3) {
             throw new AssertionError("Broken");
         }
         x = (IntercastTest2) xbox;
         if (x.sum() != 63 || x.ARRAY.length != 3) {
diff a/test/langtools/tools/javac/valhalla/lworld-values/LookupOnLoxTest.java b/test/langtools/tools/javac/valhalla/lworld-values/LookupOnLoxTest.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/LookupOnLoxTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/LookupOnLoxTest.java
@@ -53,28 +53,28 @@
 
         Tuple current() {
             return new Tuple(index, array[index]);
         }
 
-        Cursor? next() {
+        Cursor.ref next() {
             if (index + 1 == array.length) {
                 return null;
             }
             return new Cursor(array, index + 1);
         }
     }
 
-    private static Cursor? indexedElements(int[] array) {
+    private static Cursor.ref indexedElements(int[] array) {
         if (array.length == 0) {
             return null;
         }
         return new Cursor(array, 0);
     }
 
     public int sum() {
         int sum = 0;
-        for (Cursor? cursor = indexedElements(ARRAY); cursor != null; cursor = cursor.next()) {
+        for (Cursor.ref cursor = indexedElements(ARRAY); cursor != null; cursor = cursor.next()) {
             Tuple tuple = cursor.current();
             sum += tuple.index + tuple.element;
         }
         return sum;
     }
@@ -82,11 +82,11 @@
     public static void main(String [] args) {
         LookupOnLoxTest x = new LookupOnLoxTest();
         if (x.sum() != 63 || x.ARRAY.length != 3) {
             throw new AssertionError("Broken");
         }
-        LookupOnLoxTest? xbox = x;
+        LookupOnLoxTest.ref xbox = x;
         if (xbox.sum() != 63 || xbox.ARRAY.length != 3) {
             throw new AssertionError("Broken");
         }
     }
 }
diff a/test/langtools/tools/javac/valhalla/lworld-values/LookupOnLoxTest2.java b/test/langtools/tools/javac/valhalla/lworld-values/LookupOnLoxTest2.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/LookupOnLoxTest2.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/LookupOnLoxTest2.java
@@ -53,28 +53,28 @@
 
         Tuple current() {
             return new Tuple(index, array[index]);
         }
 
-        Cursor? next() {
+        Cursor.ref next() {
             if (index + 1 == array.length) {
                 return null;
             }
             return new Cursor(array, index + 1);
         }
     }
 
-    private static Cursor? indexedElements(int[] array) {
+    private static Cursor.ref indexedElements(int[] array) {
         if (array.length == 0) {
             return null;
         }
         return new Cursor(array, 0);
     }
 
     public int sum() {
         int sum = 0;
-        for (Cursor? cursor = indexedElements(ARRAY); cursor != null; cursor = cursor.next()) {
+        for (Cursor.ref cursor = indexedElements(ARRAY); cursor != null; cursor = cursor.next()) {
             Tuple tuple = cursor.current();
             sum += tuple.index + tuple.element;
         }
         return sum;
     }
@@ -82,11 +82,11 @@
     public static void main(String [] args) {
         LookupOnLoxTest2 x = new LookupOnLoxTest2();
         if (x.sum() != 63 || x.ARRAY.length != 3) {
             throw new AssertionError("Broken");
         }
-        LookupOnLoxTest2? xbox = x;
+        LookupOnLoxTest2.ref xbox = x;
         if (xbox.sum() != 63 || xbox.ARRAY.length != 3) {
             throw new AssertionError("Broken");
         }
     }
 }
diff a/test/langtools/tools/javac/valhalla/lworld-values/Point.java b/test/langtools/tools/javac/valhalla/lworld-values/Point.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/Point.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/Point.java
@@ -29,12 +29,12 @@
  *
  * @compile -XDallowWithFieldOperator Point.java
  */
 
 inline class Point {
-    static final Point? origin = makePoint(10, 20);
-    static final Point? origin2 = makePoint(10, 20);
+    static final Point.ref origin = makePoint(10, 20);
+    static final Point.ref origin2 = makePoint(10, 20);
     int x;
     int y;
     Point () {
         x = 10;
         y = 20;
diff a/test/langtools/tools/javac/valhalla/lworld-values/ProjectedArrayDotClass.java b/test/langtools/tools/javac/valhalla/lworld-values/ProjectedArrayDotClass.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/ProjectedArrayDotClass.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ProjectedArrayDotClass.java
@@ -22,11 +22,11 @@
  */
 
 /*
  * @test
  * @bug 8222722
- * @summary  Javac fails to compile V?[].class
+ * @summary  Javac fails to compile V?[].class (syntax dead)
  * @modules jdk.compiler/com.sun.tools.javac.util jdk.jdeps/com.sun.tools.javap
  * @compile ProjectedArrayDotClass.java
  * @run main/othervm -Xverify:none ProjectedArrayDotClass
  * @modules jdk.compiler
  */
@@ -38,13 +38,13 @@
 public class ProjectedArrayDotClass {
 
     static inline class VT {
         int x = 42;
         public static void main(String[] args) {
-            System.out.println(VT?[].class);
+            System.out.println(VT.ref[].class);
             System.out.println(VT[].class);
-            System.out.println(ProjectedArrayDotClass.VT?[].class);
+            System.out.println(ProjectedArrayDotClass.VT.ref[].class);
             System.out.println(ProjectedArrayDotClass.VT[].class);
         }
     }
 
     public static void main(String[] args) {
@@ -54,13 +54,13 @@
     void run() {
         String [] params = new String [] { "-v",
                                             Paths.get(System.getProperty("test.classes"),
                                                 "ProjectedArrayDotClass$VT.class").toString() };
         runCheck(params, new String [] {
-        "         3: ldc           #13                 // class \"[LProjectedArrayDotClass$VT;\"",
+        "         3: ldc           #13                 // class \"[LProjectedArrayDotClass$VT$ref;\"",
         "        11: ldc           #21                 // class \"[QProjectedArrayDotClass$VT;\"",
-        "        19: ldc           #13                 // class \"[LProjectedArrayDotClass$VT;\"",
+        "        19: ldc           #13                 // class \"[LProjectedArrayDotClass$VT$ref;\"",
         "        27: ldc           #21                 // class \"[QProjectedArrayDotClass$VT;\"",
          });
 
      }
 
diff a/test/langtools/tools/javac/valhalla/lworld-values/ValueConstructorRef.java b/test/langtools/tools/javac/valhalla/lworld-values/ValueConstructorRef.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/ValueConstructorRef.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ValueConstructorRef.java
@@ -40,11 +40,11 @@
     	x = 1234;
     	y = 5678;
     }
     
     public static void main(String [] args) {   
-    	Supplier<ValueConstructorRef?> sx = ValueConstructorRef::new;
+       Supplier<ValueConstructorRef.ref> sx = ValueConstructorRef::new;
     	ValueConstructorRef x = (ValueConstructorRef) sx.get();
         if (!x.toString().equals("[ValueConstructorRef x=1234 y=5678]"))
             throw new AssertionError(x);
     }
 }
diff a/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java b/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ValuesAsRefs.java
@@ -29,28 +29,28 @@
  */
 import java.util.ArrayList;
 
 public final inline class ValuesAsRefs {
 
-    final ArrayList<? extends ValuesAsRefs?> ao = null; // values can be wildcard bounds.
+    final ArrayList<? extends ValuesAsRefs.ref> ao = null; // values can be wildcard bounds.
 
     final inline class I implements java.io.Serializable {
         final int y = 42;
     }
 
     void foo() {
         I i = this.new I();  // values can be enclosing instances.
         i = ValuesAsRefs.I.default;
-        Object o = (I? & java.io.Serializable) i; // values can be used in intersection casts
+        Object o = (I.ref & java.io.Serializable) i; // values can be used in intersection casts
     }
     <T> void goo() {
-        this.<ValuesAsRefs?>goo(); // values can be type arguments to generic method calls
+        this.<ValuesAsRefs.ref>goo(); // values can be type arguments to generic method calls
     }
 
     public static void main(String [] args) {
         Object o = null;
-        ArrayList<ValuesAsRefs.I?> aloi = new ArrayList<>(); // values can be type arguments.
+        ArrayList<ValuesAsRefs.I.ref> aloi = new ArrayList<>(); // values can be type arguments.
         boolean OK = false;
         try {
             aloi.add((ValuesAsRefs.I) o);
         } catch (NullPointerException npe) {
             OK = true;
