diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java
@@ -808,13 +808,22 @@
                 tp = TypeIntersection(la.toList());
                 break;
             }
             default: {
                 if (t.isReferenceProjection()) {
-                    JCFieldAccess f = (JCFieldAccess) Select(Type(t.valueProjection()), t.tsym);
-                    f.name = names.ref;
-                    tp = f;
+                    // For parameterized types, we want V.ref<A1 ... An> not V<A1 ... An>.ref
+                    JCExpression vp = Type(t.valueProjection());
+                    if (vp.hasTag(Tag.TYPEAPPLY)) {
+                        // vp now is V<A1 ... An>, build V.ref<A1 ... An>
+                        JCFieldAccess f = (JCFieldAccess) Select(((JCTypeApply) vp).clazz, t.tsym);
+                        f.name = names.ref;
+                        tp = TypeApply(f, ((JCTypeApply) vp).arguments);
+                    } else {
+                        JCFieldAccess f = (JCFieldAccess) Select(vp, t.tsym);
+                        f.name = names.ref;
+                        tp = f;
+                    }
                 } else {
                     Type outer = t.getEnclosingType();
                     JCExpression clazz = outer.hasTag(CLASS) && t.tsym.owner.kind == TYP
                             ? Select(Type(outer), t.tsym)
                             : QualIdent(t.tsym);
