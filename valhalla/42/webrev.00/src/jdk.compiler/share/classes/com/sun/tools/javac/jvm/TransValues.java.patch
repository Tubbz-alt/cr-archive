diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/TransValues.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/TransValues.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/TransValues.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/TransValues.java
@@ -277,11 +277,11 @@
                     }
                     break;
                 default:
                     break;
             }
-            if (isInstanceAccess(symbol)) {
+            if (isInstanceMemberAccess(symbol)) {
                 final JCIdent facHandle = make.Ident(currentMethod.factoryProduct);
                 result = make.Assign(facHandle, make.WithField(make.Select(facHandle, symbol), translate(tree.rhs)).setType(currentClass.type)).setType(currentClass.type);
                 if (requireRVal) {
                     result = make.Select(make.Parens((JCExpression) result).setType(currentClass.type), symbol);
                 }
@@ -303,25 +303,28 @@
 
     @Override
     public void visitIdent(JCIdent ident) {
         if (constructingValue()) {
             Symbol symbol = ident.sym;
-            if (isInstanceAccess(symbol)) {
+            if (isInstanceMemberAccess(symbol)) {
                 final JCIdent facHandle = make.Ident(currentMethod.factoryProduct);
                 result = make.Select(facHandle, symbol);
                 return;
+            } else if (symbol.name == names._this) {
+                result = make.Ident(currentMethod.factoryProduct);
+                return;
             }
         }
         super.visitIdent(ident);
     }
 
     @Override
     public void visitSelect(JCFieldAccess fieldAccess) {
         if (constructingValue()) { // Qualified this would have been lowered already.
             if (fieldAccess.selected.hasTag(IDENT) && ((JCIdent)fieldAccess.selected).name == names._this) {
                 Symbol symbol = fieldAccess.sym;
-                if (isInstanceAccess(symbol)) {
+                if (isInstanceMemberAccess(symbol)) {
                     final JCIdent facHandle = make.Ident(currentMethod.factoryProduct);
                     result = make.Select(facHandle, symbol);
                     return;
                 }
             }
@@ -374,12 +377,15 @@
     // Utility methods ...
     private boolean constructingValue() {
         return currentClass != null && (currentClass.sym.flags() & Flags.VALUE) != 0 && currentMethod != null && currentMethod.sym.isConstructor();
     }
 
-    private boolean isInstanceAccess(Symbol symbol) {
-        return symbol != null && (symbol.kind == VAR || symbol.kind == MTH) && symbol.owner == currentClass.sym && !symbol.isStatic();
+    private boolean isInstanceMemberAccess(Symbol symbol) {
+        return symbol != null
+                && (symbol.name != names._this && symbol.name != names._super)
+                && (symbol.kind == VAR || symbol.kind == MTH)
+                && symbol.owner == currentClass.sym && !symbol.isStatic();
     }
 
     private MethodSymbol getValueFactory(MethodSymbol init) {
         Assert.check(init.name.equals(names.init));
         Assert.check(types.isValue(init.owner.type));
