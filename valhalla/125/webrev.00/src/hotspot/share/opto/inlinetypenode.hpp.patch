diff a/src/hotspot/share/opto/inlinetypenode.hpp b/src/hotspot/share/opto/inlinetypenode.hpp
--- a/src/hotspot/share/opto/inlinetypenode.hpp
+++ b/src/hotspot/share/opto/inlinetypenode.hpp
@@ -86,10 +86,11 @@
   void load(GraphKit* kit, Node* base, Node* ptr, ciInstanceKlass* holder, int holder_offset = 0, DecoratorSet decorators = IN_HEAP | MO_UNORDERED);
 
   // Allocates the inline type (if not yet allocated)
   InlineTypePtrNode* buffer(GraphKit* kit, bool safe_for_replace = true);
   bool is_allocated(PhaseGVN* phase) const;
+  InlineTypePtrNode* as_ptr(PhaseGVN* phase) const;
 
   void replace_call_results(GraphKit* kit, Node* call, Compile* C);
 
   // Allocate all non-flattened inline type fields
   Node* allocate_fields(GraphKit* kit);
@@ -109,11 +110,11 @@
 
   // Checks if the inline type is loaded from memory and if so returns the oop
   Node* is_loaded(PhaseGVN* phase, ciInlineKlass* vk = NULL, Node* base = NULL, int holder_offset = 0);
 
   // Checks if the inline type fields are all set to default values
-  bool is_default(PhaseGVN& gvn) const;
+  bool is_default(PhaseGVN* gvn) const;
 
   const TypeInstPtr* inline_ptr() const { return TypeInstPtr::make(TypePtr::BotPTR, inline_klass()); }
 
 public:
   // Create uninitialized
@@ -154,11 +155,11 @@
 class InlineTypePtrNode : public InlineTypeBaseNode {
   friend class InlineTypeBaseNode;
 private:
   const TypeInstPtr* inline_ptr() const { return type()->isa_instptr(); }
 
-  InlineTypePtrNode(InlineTypeBaseNode* vt)
+  InlineTypePtrNode(const InlineTypeBaseNode* vt)
     : InlineTypeBaseNode(TypeInstPtr::make(TypePtr::NotNull, vt->type()->inline_klass()), vt->req()) {
     init_class_id(Class_InlineTypePtr);
     init_req(Oop, vt->get_oop());
     for (uint i = Oop+1; i < vt->req(); i++) {
       init_req(i, vt->in(i));
