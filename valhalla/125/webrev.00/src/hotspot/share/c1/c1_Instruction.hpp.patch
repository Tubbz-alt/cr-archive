diff a/src/hotspot/share/c1/c1_Instruction.hpp b/src/hotspot/share/c1/c1_Instruction.hpp
--- a/src/hotspot/share/c1/c1_Instruction.hpp
+++ b/src/hotspot/share/c1/c1_Instruction.hpp
@@ -470,12 +470,12 @@
   Instruction* subst()                           { return _subst == NULL ? this : _subst->subst(); }
   LIR_Opr operand() const                        { return _operand; }
 
   void set_needs_null_check(bool f)              { set_flag(NeedsNullCheckFlag, f); }
   bool needs_null_check() const                  { return check_flag(NeedsNullCheckFlag); }
-  void set_never_null(bool f)                    { set_flag(NeverNullFlag, f); }
-  bool is_never_null() const                     { return check_flag(NeverNullFlag); }
+  void set_null_free(bool f)                    { set_flag(NeverNullFlag, f); }
+  bool is_null_free() const                     { return check_flag(NeverNullFlag); }
   bool is_linked() const                         { return check_flag(IsLinkedInBlockFlag); }
   bool can_be_linked()                           { return as_Local() == NULL && as_Phi() == NULL; }
 
   bool is_null_obj()                             { return as_Constant() != NULL && type()->as_ObjectType()->constant_value()->is_null_object(); }
 
@@ -740,17 +740,17 @@
   int      _java_index;                          // the local index within the method to which the local belongs
   bool     _is_receiver;                         // if local variable holds the receiver: "this" for non-static methods
   ciType*  _declared_type;
  public:
   // creation
-  Local(ciType* declared, ValueType* type, int index, bool receiver, bool never_null)
+  Local(ciType* declared, ValueType* type, int index, bool receiver, bool null_free)
     : Instruction(type)
     , _java_index(index)
     , _is_receiver(receiver)
     , _declared_type(declared)
   {
-    set_never_null(never_null);
+    set_null_free(null_free);
     NOT_PRODUCT(set_printable_bci(-1));
   }
 
   // accessors
   int java_index() const                         { return _java_index; }
@@ -870,11 +870,11 @@
   LoadField(Value obj, int offset, ciField* field, bool is_static,
             ValueStack* state_before, bool needs_patching,
             ciInlineKlass* inline_klass = NULL, Value default_value = NULL )
   : AccessField(obj, offset, field, is_static, state_before, needs_patching)
   {
-    set_never_null(field->signature()->is_Q_signature());
+    set_null_free(field->signature()->is_Q_signature());
   }
 
   ciType* declared_type() const;
 
   // generic; cannot be eliminated if needs patching or if volatile.
@@ -1308,11 +1308,11 @@
   ciMethod*       _target;
 
  public:
   // creation
   Invoke(Bytecodes::Code code, ValueType* result_type, Value recv, Values* args,
-         int vtable_index, ciMethod* target, ValueStack* state_before, bool never_null);
+         int vtable_index, ciMethod* target, ValueStack* state_before, bool null_free);
 
   // accessors
   Bytecodes::Code code() const                   { return _code; }
   Value receiver() const                         { return _recv; }
   bool has_receiver() const                      { return receiver() != NULL; }
@@ -1390,11 +1390,11 @@
     if (depends_on == NULL) {
       _depends_on = this;
     } else {
       _depends_on = depends_on;
     }
-    set_never_null(true);
+    set_null_free(true);
   }
 
   // accessors
   bool is_unresolved() const                     { return _is_unresolved; }
   Value depends_on();
@@ -1475,13 +1475,13 @@
  private:
   ciKlass* _klass;
 
  public:
   // creation
-  NewObjectArray(ciKlass* klass, Value length, ValueStack* state_before, bool never_null)
+  NewObjectArray(ciKlass* klass, Value length, ValueStack* state_before, bool null_free)
   : NewArray(length, state_before), _klass(klass) {
-    set_never_null(never_null);
+    set_null_free(null_free);
   }
 
   // accessors
   ciKlass* klass() const                         { return _klass; }
   ciType* exact_type() const;
@@ -1574,13 +1574,13 @@
 
 
 LEAF(CheckCast, TypeCheck)
  public:
   // creation
-  CheckCast(ciKlass* klass, Value obj, ValueStack* state_before, bool never_null = false)
+  CheckCast(ciKlass* klass, Value obj, ValueStack* state_before, bool null_free = false)
   : TypeCheck(klass, obj, objectType, state_before) {
-    set_never_null(never_null);
+    set_null_free(null_free);
   }
 
   void set_incompatible_class_change_check() {
     set_flag(ThrowIncompatibleClassChangeErrorFlag, true);
   }
