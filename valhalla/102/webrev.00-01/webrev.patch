diff a/src/java.base/share/classes/java/lang/Class.java b/src/java.base/share/classes/java/lang/Class.java
--- a/src/java.base/share/classes/java/lang/Class.java
+++ b/src/java.base/share/classes/java/lang/Class.java
@@ -565,34 +565,40 @@
         return (this.getModifiers() & INLINE) != 0;
     }
 
     /**
      * Returns a {@code Class} object representing the <em>value projection</em>
-     * type of this class if this {@code Class} is the reference projection type
-     * of an {@linkplain #isInlineClass() inline class}.  Otherwise an empty
-     * {@link Optional} is returned.
+     * type of this class if this {@code Class} represents the reference projection
+     * type of an {@linkplain #isInlineClass() inline class}.
+     * If this {@code Class} represents the value projection type
+     * of an inline class, then this method returns this class.
+     * Otherwise an empty {@link Optional} is returned.
      *
      * @return the {@code Class} object representing the value projection type of
-     *         this class if this class is the reference projection type of an
-     *         inline class; an empty {@link Optional} otherwise
+     *         this class if this class is the value projection type
+     *         or the reference projection type of an inline class;
+     *         an empty {@link Optional} otherwise
      * @since Valhalla
      */
     public Optional<Class<T>> valueType() {
         return Optional.ofNullable(valType);
     }
 
     /**
      * Returns a {@code Class} object representing the <em>reference projection</em>
-     * type of this class if this class is an {@linkplain #isInlineClass() inline class}
-     * with a reference projection.
-     * If this class is an {@linkplain #isInlineClass() inline class}
-     * without a reference projection or this class is not an inline class,
+     * type of this class if this {@code Class} represents an
+     * {@linkplain #isInlineClass() inline class} with a reference projection
+     * type. If this {@code Class} represents the reference projection type
+     * of an inline class, then this method returns this class.
+     * If this class is not an {@linkplain #isInlineClass() inline class}
+     * or this class is an inline class without a reference projection,
      * then this method returns an empty {@link Optional}.
      *
      * @return the {@code Class} object representing the value projection type of
-     *         this class if this class is the reference projection type of an
-     *         inline class; an empty {@link Optional} otherwise
+     *         this class if this class is an inline class with a reference
+     *         projection type or this class is the reference projection type;
+     *         an empty {@link Optional} otherwise
      * @since Valhalla
      */
     public Optional<Class<T>> referenceType() {
         return valType != null ? Optional.ofNullable(refType) : Optional.of(this);
     }
diff a/src/java.base/share/classes/java/lang/invoke/AbstractValidatingLambdaMetafactory.java b/src/java.base/share/classes/java/lang/invoke/AbstractValidatingLambdaMetafactory.java
--- a/src/java.base/share/classes/java/lang/invoke/AbstractValidatingLambdaMetafactory.java
+++ b/src/java.base/share/classes/java/lang/invoke/AbstractValidatingLambdaMetafactory.java
@@ -402,20 +402,11 @@
 
         if (!fromType.isInlineClass() && !toType.isInlineClass()) {
             return false;
         }
 
-        Class<?> valType = fromType.valueType().orElse(null);
-        Class<?> refType = fromType.referenceType().orElse(null);
-        if (fromType.isInlineClass()) {
-            return refType == toType;
-        }
-        if (toType.isInlineClass()) {
-            return valType == toType;
-        }
-
-        return false;
+        return fromType.valueType().equals(toType.valueType());
     }
 
     /**
      * Check type adaptability for return types --
      * special handling of void type) and parameterized fromType
diff a/test/jdk/valhalla/valuetypes/InlineTypeConversionTest.java b/test/jdk/valhalla/valuetypes/InlineTypeConversionTest.java
--- a/test/jdk/valhalla/valuetypes/InlineTypeConversionTest.java
+++ b/test/jdk/valhalla/valuetypes/InlineTypeConversionTest.java
@@ -65,16 +65,16 @@
         MethodHandle mh2 = mh1.asType(methodType(Value.class, Value.class));
         Object v = mh1.invoke(VALUE);
         assertEquals(v, VALUE);
         try {
             Object v1 = mh1.invoke((Object)null);
-            assertTrue(false);
+            fail("Expected NullPointerException but not thrown");
         } catch (NullPointerException e) {}
 
         try {
             Object v2 = mh2.invoke((Object)null);
-            assertTrue(false);
+            fail("Expected NullPointerException but not thrown");
         } catch (NullPointerException e) {}
     }
 
     @Test
     public static void inlineNarrowing() throws Throwable {
@@ -82,18 +82,18 @@
         MethodHandle mh = lookup.findStatic(InlineTypeConversionTest.class, "widen", methodType(Value.ref.class, Value.class));
         Object v = mh.invoke(VALUE);
         assertTrue(v == null);
         try {
             Object v1 = mh.invoke((Object)null);
-            assertTrue(false);
+            fail("Expected NullPointerException but not thrown");
         } catch (NullPointerException e) {
             e.printStackTrace();
         }
         MethodHandle mh2 = mh.asType(methodType(Value.class, Value.ref.class));
         try {
             Value v2 = (Value) mh2.invoke((Value.ref)null);
-            assertTrue(false);
+            fail("Expected NullPointerException but not thrown");
         } catch (NullPointerException e) {
             e.printStackTrace();
         }
     }
 
@@ -151,9 +151,9 @@
         Value v = new Value(new Point(10,10), null);
 
         Point.ref p1 = (Point.ref) mh1.invokeExact(v);
         try {
             Point p2 = (Point) mh2.invokeExact(v);
-            assertFalse(true);
+            fail("Expected NullPointerException but not thrown");
         } catch (NullPointerException e) {}
     }
 }
diff a/test/jdk/valhalla/valuetypes/Reflection.java b/test/jdk/valhalla/valuetypes/Reflection.java
--- a/test/jdk/valhalla/valuetypes/Reflection.java
+++ b/test/jdk/valhalla/valuetypes/Reflection.java
@@ -75,11 +75,12 @@
         Class<?> inlineClass = Point.class;
         assertTrue(inlineClass.isInlineClass());
         assertFalse(Point.ref.class.isInlineClass());
         assertEquals(inlineClass.valueType().get(), Point.class);
         assertEquals(inlineClass.referenceType().get(), Point.ref.class);
-
+        assertEquals(Point.ref.class.valueType().get(), Point.class);
+        assertEquals(Point.ref.class.referenceType().get(), Point.ref.class);
 
         Point o = Point.makePoint(10, 20);
         assertTrue(Point.class.isInstance(o));
         assertTrue(Point.ref.class.isInstance(o));
 
