diff a/test/jdk/valhalla/valuetypes/InlineTypeConversionTest.java b/test/jdk/valhalla/valuetypes/InlineTypeConversionTest.java
--- a/test/jdk/valhalla/valuetypes/InlineTypeConversionTest.java
+++ b/test/jdk/valhalla/valuetypes/InlineTypeConversionTest.java
@@ -65,16 +65,16 @@
         MethodHandle mh2 = mh1.asType(methodType(Value.class, Value.class));
         Object v = mh1.invoke(VALUE);
         assertEquals(v, VALUE);
         try {
             Object v1 = mh1.invoke((Object)null);
-            assertTrue(false);
+            fail("Expected NullPointerException but not thrown");
         } catch (NullPointerException e) {}
 
         try {
             Object v2 = mh2.invoke((Object)null);
-            assertTrue(false);
+            fail("Expected NullPointerException but not thrown");
         } catch (NullPointerException e) {}
     }
 
     @Test
     public static void inlineNarrowing() throws Throwable {
@@ -82,18 +82,18 @@
         MethodHandle mh = lookup.findStatic(InlineTypeConversionTest.class, "widen", methodType(Value.ref.class, Value.class));
         Object v = mh.invoke(VALUE);
         assertTrue(v == null);
         try {
             Object v1 = mh.invoke((Object)null);
-            assertTrue(false);
+            fail("Expected NullPointerException but not thrown");
         } catch (NullPointerException e) {
             e.printStackTrace();
         }
         MethodHandle mh2 = mh.asType(methodType(Value.class, Value.ref.class));
         try {
             Value v2 = (Value) mh2.invoke((Value.ref)null);
-            assertTrue(false);
+            fail("Expected NullPointerException but not thrown");
         } catch (NullPointerException e) {
             e.printStackTrace();
         }
     }
 
@@ -151,9 +151,9 @@
         Value v = new Value(new Point(10,10), null);
 
         Point.ref p1 = (Point.ref) mh1.invokeExact(v);
         try {
             Point p2 = (Point) mh2.invokeExact(v);
-            assertFalse(true);
+            fail("Expected NullPointerException but not thrown");
         } catch (NullPointerException e) {}
     }
 }
