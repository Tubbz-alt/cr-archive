diff a/src/java.base/share/classes/java/lang/invoke/AbstractValidatingLambdaMetafactory.java b/src/java.base/share/classes/java/lang/invoke/AbstractValidatingLambdaMetafactory.java
--- a/src/java.base/share/classes/java/lang/invoke/AbstractValidatingLambdaMetafactory.java
+++ b/src/java.base/share/classes/java/lang/invoke/AbstractValidatingLambdaMetafactory.java
@@ -364,16 +364,60 @@
                 } else {
                     // must be convertible to primitive
                     return !strict;
                 }
             } else {
-                // both are reference types: fromType should be a superclass of toType.
-                return !strict || toType.isAssignableFrom(fromType);
+                // inline types: fromType and toType are projection types of the same inline class
+                // identity types: fromType should be a superclass of toType.
+                return !strict || canConvert(fromType, toType);
             }
         }
     }
 
+    /**
+     * Tests if {@code fromType} can be converted to {@code toType}
+     * via an identity conversion, via a widening reference conversion or
+     * via inline narrowing and widening conversions.
+     * <p>
+     * If {@code fromType} represents a class or interface, this method
+     * returns {@code true} if {@code toType} is the same as,
+     * or is a superclass or superinterface of, {@code fromType}.
+     * <p>
+     * If {@code fromType} is an inline class, this method returns {@code true}
+     * if {@code toType} is the {@linkplain Class#referenceType() reference projection type}
+     * of {@code fromType}.
+     * If {@code toType} is an inline class, this method returns {@code true}
+     * if {@code toType} is the {@linkplain Class#valueType() value projection type}
+     * of {@code fromType}.
+     * <p>
+     * Otherwise, this method returns {@code false}.
+     *
+     * @param     fromType the {@code Class} object to be converted from
+     * @param     toType the {@code Class} object to be converted to
+     * @return    {@code true} if {@code fromType} can be converted to {@code toType}
+     */
+    private boolean canConvert(Class<?> fromType, Class<?> toType) {
+        if (toType.isAssignableFrom(fromType)) {
+            return true;
+        }
+
+        if (!fromType.isInlineClass() && !toType.isInlineClass()) {
+            return false;
+        }
+
+        Class<?> valType = fromType.valueType().orElse(null);
+        Class<?> refType = fromType.referenceType().orElse(null);
+        if (fromType.isInlineClass()) {
+            return refType == toType;
+        }
+        if (toType.isInlineClass()) {
+            return valType == toType;
+        }
+
+        return false;
+    }
+
     /**
      * Check type adaptability for return types --
      * special handling of void type) and parameterized fromType
      * @return True if 'fromType' can be converted to 'toType'
      */
