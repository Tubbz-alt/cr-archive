diff a/test/micro/org/openjdk/bench/valhalla/lworld/invoke/ObjectHashCodeExplicit.java b/test/micro/org/openjdk/bench/valhalla/lworld/invoke/ObjectHashCodeExplicit.java
--- a/test/micro/org/openjdk/bench/valhalla/lworld/invoke/ObjectHashCodeExplicit.java
+++ b/test/micro/org/openjdk/bench/valhalla/lworld/invoke/ObjectHashCodeExplicit.java
@@ -43,13 +43,13 @@
 
 
     Val1[] values1;
     Val2[] values2;
     Val3[] values3;
-    Val1?[] boxed1;
-    Val2?[] boxed2;
-    Val3?[] boxed3;
+    Val1.ref[] boxed1;
+    Val2.ref[] boxed2;
+    Val3.ref[] boxed3;
 
     @Setup
     public void setup() {
         values1 = new Val1[SIZE];
         for (int i = 0; i < SIZE; i++) {
@@ -61,19 +61,19 @@
         }
         values3 = new Val3[SIZE];
         for (int i = 0; i < SIZE; i++) {
             values3[i] = new Val3(42);
         }
-        boxed1 = new Val1?[SIZE];
+        boxed1 = new Val1.ref[SIZE];
         for (int i = 0; i < SIZE; i++) {
             boxed1[i] = new Val1(42);
         }
-        boxed2 = new Val2?[SIZE];
+        boxed2 = new Val2.ref[SIZE];
         for (int i = 0; i < SIZE; i++) {
             boxed2[i] = new Val2(42);
         }
-        boxed3 = new Val3?[SIZE];
+        boxed3 = new Val3.ref[SIZE];
         for (int i = 0; i < SIZE; i++) {
             boxed3[i] = new Val3(42);
         }
     }
 
@@ -95,13 +95,13 @@
         }
         return r;
     }
 
     @CompilerControl(CompilerControl.Mode.DONT_INLINE)
-    public int hashExactBoxed(Val1?[] arr) {
+    public int hashExactBoxed(Val1.ref[] arr) {
         int r = 0;
-        for(Val1? o : arr) {
+        for(Val1.ref o : arr) {
             r += o.hashCode();
         }
         return r;
     }
 
@@ -200,6 +200,6 @@
                 hashObject(values2) +
                 hashObject(values3) ;
     }
 
 
-}
+}
