diff a/test/micro/org/openjdk/bench/valhalla/lworld/matrix/Boxed.java b/test/micro/org/openjdk/bench/valhalla/lworld/matrix/Boxed.java
--- a/test/micro/org/openjdk/bench/valhalla/lworld/matrix/Boxed.java
+++ b/test/micro/org/openjdk/bench/valhalla/lworld/matrix/Boxed.java
@@ -9,33 +9,33 @@
 import java.util.concurrent.ThreadLocalRandom;
 
 
 public class Boxed extends MatrixBase {
 
-    Complex?[][] A;
-    Complex?[][] B;
+    Complex.ref[][] A;
+    Complex.ref[][] B;
 
     @Setup
     public void setup() {
-        A = populate(new Complex?[size][size]);
-        B = populate(new Complex?[size][size]);
+        A = populate(new Complex.ref[size][size]);
+        B = populate(new Complex.ref[size][size]);
     }
 
-    private Complex?[][] populate(Complex?[][] m) {
+    private Complex.ref[][] populate(Complex.ref[][] m) {
         int size = m.length;
         for (int i = 0; i < size; i++) {
             for (int j = 0; j < size; j++) {
                 m[i][j] = new Complex(ThreadLocalRandom.current().nextDouble(), ThreadLocalRandom.current().nextDouble());
             }
         }
         return m;
     }
 
     @Benchmark
-    public Complex?[][] multiply() {
+    public Complex.ref[][] multiply() {
         int size = A.length;
-        Complex?[][] R = new Complex?[size][size];
+        Complex.ref[][] R = new Complex.ref[size][size];
         for (int i = 0; i < size; i++) {
             for (int j = 0; j < size; j++) {
                 Complex s = Complex.H.ZERO;
                 for (int k = 0; k < size; k++) {
                     s = s.add(A[i][k].mul((Complex)B[k][j]));
@@ -45,39 +45,39 @@
         }
         return R;
     }
 
     @Benchmark
-    public Complex?[][] multiplyCacheFriendly() {
+    public Complex.ref[][] multiplyCacheFriendly() {
         int size = A.length;
-        Complex?[][] R = new Complex?[size][size];
+        Complex.ref[][] R = new Complex.ref[size][size];
         for (int i = 0; i < size; i++) {
             Arrays.fill(R[i], Complex.H.ZERO);
         }
         for (int i = 0; i < size; i++) {
             for (int k = 0; k < size; k++) {
-                Complex? aik = A[i][k];
+                Complex.ref aik = A[i][k];
                 for (int j = 0; j < size; j++) {
                     R[i][j] = R[i][j].add(aik.mul((Complex)B[k][j]));
                 }
             }
         }
         return R;
     }
 
     @Benchmark
-    public Complex?[][] multiplyCacheFriendly1() {
+    public Complex.ref[][] multiplyCacheFriendly1() {
         int size = A.length;
-        Complex?[][] R = new Complex?[size][size];
+        Complex.ref[][] R = new Complex.ref[size][size];
         for (int i = 0; i < size; i++) {
             for (int j = 0; j < size; j++) {
                 R[i][j] = Complex.H.ZERO;
             }
         }
         for (int i = 0; i < size; i++) {
             for (int k = 0; k < size; k++) {
-                Complex? aik = A[i][k];
+                Complex.ref aik = A[i][k];
                 for (int j = 0; j < size; j++) {
                     R[i][j] = R[i][j].add(aik.mul((Complex)B[k][j]));
                 }
             }
         }
