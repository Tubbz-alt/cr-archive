diff a/test/micro/org/openjdk/bench/valhalla/lworld/acmp/IsCmpBranch1.java b/test/micro/org/openjdk/bench/valhalla/lworld/acmp/IsCmpBranch1.java
--- a/test/micro/org/openjdk/bench/valhalla/lworld/acmp/IsCmpBranch1.java
+++ b/test/micro/org/openjdk/bench/valhalla/lworld/acmp/IsCmpBranch1.java
@@ -60,15 +60,15 @@
     Val1[] value1_25, value2_25;
     Val1[] value1_50, value2_50;
     Val1[] value1_75, value2_75;
     Val1[] value1_100, value2_100;
 
-    Val1?[] boxed1_00, boxed2_00;
-    Val1?[] boxed1_25, boxed2_25;
-    Val1?[] boxed1_50, boxed2_50;
-    Val1?[] boxed1_75, boxed2_75;
-    Val1?[] boxed1_100, boxed2_100;
+    Val1.ref[] boxed1_00, boxed2_00;
+    Val1.ref[] boxed1_25, boxed2_25;
+    Val1.ref[] boxed1_50, boxed2_50;
+    Val1.ref[] boxed1_75, boxed2_75;
+    Val1.ref[] boxed1_100, boxed2_100;
 
     Vector[] covariance1_00, covariance2_00;
     Vector[] covariance1_25, covariance2_25;
     Vector[] covariance1_50, covariance2_50;
     Vector[] covariance1_75, covariance2_75;
@@ -85,20 +85,20 @@
         value2_50 = populateValues2(value1_50, 50);
         value1_75 = populateValues1();
         value2_75 = populateValues2(value1_75, 75);
         value1_100 = populateValues1();
         value2_100 = populateValues2(value1_100, 100);
-        boxed1_00 = new Val1?[SIZE];
-        boxed2_00 = new Val1?[SIZE];
-        boxed1_25 = new Val1?[SIZE];
-        boxed2_25 = new Val1?[SIZE];
-        boxed1_50 = new Val1?[SIZE];
-        boxed2_50 = new Val1?[SIZE];
-        boxed1_75 = new Val1?[SIZE];
-        boxed2_75 = new Val1?[SIZE];
-        boxed1_100 = new Val1?[SIZE];
-        boxed2_100 = new Val1?[SIZE];
+        boxed1_00 = new Val1.ref[SIZE];
+        boxed2_00 = new Val1.ref[SIZE];
+        boxed1_25 = new Val1.ref[SIZE];
+        boxed2_25 = new Val1.ref[SIZE];
+        boxed1_50 = new Val1.ref[SIZE];
+        boxed2_50 = new Val1.ref[SIZE];
+        boxed1_75 = new Val1.ref[SIZE];
+        boxed2_75 = new Val1.ref[SIZE];
+        boxed1_100 = new Val1.ref[SIZE];
+        boxed2_100 = new Val1.ref[SIZE];
         for(int i = 0; i< SIZE; i++) {
             boxed1_00[i] = value1_00[i];
             boxed2_00[i] = value2_00[i];
             boxed1_25[i] = value1_25[i];
             boxed2_25[i] = value2_25[i];
@@ -199,11 +199,11 @@
     public int value100() {
         return value_comparison(value1_100, value2_100);
     }
 
     @CompilerControl(CompilerControl.Mode.DONT_INLINE)
-    private static int boxed_comparison(Val1?[] objects1, Val1?[] objects2) {
+    private static int boxed_comparison(Val1.ref[] objects1, Val1.ref[] objects2) {
         int s = 0;
         for (int i = 0; i < SIZE; i++) {
             if (objects1[i] == objects2[i]) {
                 s += 1;
             } else {
