diff a/src/java.base/share/classes/java/lang/reflect/Field.java b/src/java.base/share/classes/java/lang/reflect/Field.java
--- a/src/java.base/share/classes/java/lang/reflect/Field.java
+++ b/src/java.base/share/classes/java/lang/reflect/Field.java
@@ -163,11 +163,18 @@
      */
     @Override
     @CallerSensitive
     public void setAccessible(boolean flag) {
         AccessibleObject.checkPermission();
-        if (flag) checkCanSetAccessible(Reflection.getCallerClass());
+
+        if (clazz.isInlineClass()) {
+            throw new InaccessibleObjectException("cannot make a field accessible of inline class "
+                    + clazz.getName());
+        }
+        if (flag) {
+            checkCanSetAccessible(Reflection.getCallerClass());
+        }
         setAccessible0(flag);
     }
 
     @Override
     void checkCanSetAccessible(Class<?> caller) {
@@ -769,10 +776,12 @@
     @CallerSensitive
     @ForceInline // to ensure Reflection.getCallerClass optimization
     public void set(Object obj, Object value)
         throws IllegalArgumentException, IllegalAccessException
     {
+        ensureNotValueClass();
+
         if (!override) {
             Class<?> caller = Reflection.getCallerClass();
             checkAccess(caller, obj);
         }
         getFieldAccessor(obj).set(obj, value);
@@ -805,10 +814,12 @@
     @CallerSensitive
     @ForceInline // to ensure Reflection.getCallerClass optimization
     public void setBoolean(Object obj, boolean z)
         throws IllegalArgumentException, IllegalAccessException
     {
+        ensureNotValueClass();
+
         if (!override) {
             Class<?> caller = Reflection.getCallerClass();
             checkAccess(caller, obj);
         }
         getFieldAccessor(obj).setBoolean(obj, z);
@@ -841,10 +852,12 @@
     @CallerSensitive
     @ForceInline // to ensure Reflection.getCallerClass optimization
     public void setByte(Object obj, byte b)
         throws IllegalArgumentException, IllegalAccessException
     {
+        ensureNotValueClass();
+
         if (!override) {
             Class<?> caller = Reflection.getCallerClass();
             checkAccess(caller, obj);
         }
         getFieldAccessor(obj).setByte(obj, b);
@@ -877,10 +890,12 @@
     @CallerSensitive
     @ForceInline // to ensure Reflection.getCallerClass optimization
     public void setChar(Object obj, char c)
         throws IllegalArgumentException, IllegalAccessException
     {
+        ensureNotValueClass();
+
         if (!override) {
             Class<?> caller = Reflection.getCallerClass();
             checkAccess(caller, obj);
         }
         getFieldAccessor(obj).setChar(obj, c);
@@ -913,10 +928,12 @@
     @CallerSensitive
     @ForceInline // to ensure Reflection.getCallerClass optimization
     public void setShort(Object obj, short s)
         throws IllegalArgumentException, IllegalAccessException
     {
+        ensureNotValueClass();
+
         if (!override) {
             Class<?> caller = Reflection.getCallerClass();
             checkAccess(caller, obj);
         }
         getFieldAccessor(obj).setShort(obj, s);
@@ -949,10 +966,12 @@
     @CallerSensitive
     @ForceInline // to ensure Reflection.getCallerClass optimization
     public void setInt(Object obj, int i)
         throws IllegalArgumentException, IllegalAccessException
     {
+        ensureNotValueClass();
+
         if (!override) {
             Class<?> caller = Reflection.getCallerClass();
             checkAccess(caller, obj);
         }
         getFieldAccessor(obj).setInt(obj, i);
@@ -985,10 +1004,12 @@
     @CallerSensitive
     @ForceInline // to ensure Reflection.getCallerClass optimization
     public void setLong(Object obj, long l)
         throws IllegalArgumentException, IllegalAccessException
     {
+        ensureNotValueClass();
+
         if (!override) {
             Class<?> caller = Reflection.getCallerClass();
             checkAccess(caller, obj);
         }
         getFieldAccessor(obj).setLong(obj, l);
@@ -1021,10 +1042,12 @@
     @CallerSensitive
     @ForceInline // to ensure Reflection.getCallerClass optimization
     public void setFloat(Object obj, float f)
         throws IllegalArgumentException, IllegalAccessException
     {
+        ensureNotValueClass();
+
         if (!override) {
             Class<?> caller = Reflection.getCallerClass();
             checkAccess(caller, obj);
         }
         getFieldAccessor(obj).setFloat(obj, f);
@@ -1057,10 +1080,12 @@
     @CallerSensitive
     @ForceInline // to ensure Reflection.getCallerClass optimization
     public void setDouble(Object obj, double d)
         throws IllegalArgumentException, IllegalAccessException
     {
+        ensureNotValueClass();
+
         if (!override) {
             Class<?> caller = Reflection.getCallerClass();
             checkAccess(caller, obj);
         }
         getFieldAccessor(obj).setDouble(obj, d);
@@ -1073,10 +1098,20 @@
         checkAccess(caller, clazz,
                     Modifier.isStatic(modifiers) ? null : obj.getClass(),
                     modifiers);
     }
 
+    /*
+     * Ensure the declaring class is not an inline class.
+     */
+    private void ensureNotValueClass() throws IllegalAccessException {
+        if (clazz.isInlineClass()) {
+            throw new IllegalAccessException("cannot set field \"" + this + "\" of inline class "
+                + clazz.getName());
+        }
+    }
+
     // security check is done before calling this method
     private FieldAccessor getFieldAccessor(Object obj)
         throws IllegalAccessException
     {
         boolean ov = override;
