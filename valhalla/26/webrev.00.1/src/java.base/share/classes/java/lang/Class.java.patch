diff a/src/java.base/share/classes/java/lang/Class.java b/src/java.base/share/classes/java/lang/Class.java
--- a/src/java.base/share/classes/java/lang/Class.java
+++ b/src/java.base/share/classes/java/lang/Class.java
@@ -61,12 +61,10 @@
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
-import java.util.StringJoiner;
-import java.util.stream.Stream;
 import java.util.stream.Collectors;
 
 import jdk.internal.HotSpotIntrinsicCandidate;
 import jdk.internal.loader.BootLoader;
 import jdk.internal.loader.BuiltinClassLoader;
@@ -160,13 +158,14 @@
                               GenericDeclaration,
                               Type,
                               AnnotatedElement,
                               TypeDescriptor.OfField<Class<?>>,
                               Constable {
-    private static final int ANNOTATION= 0x00002000;
-    private static final int ENUM      = 0x00004000;
-    private static final int SYNTHETIC = 0x00001000;
+    private static final int ANNOTATION = 0x00002000;
+    private static final int ENUM       = 0x00004000;
+    private static final int SYNTHETIC  = 0x00001000;
+    private static final int VALUE_TYPE = 0x00000100;
 
     private static native void registerNatives();
     static {
         registerNatives();
     }
@@ -194,12 +193,13 @@
      * this method returns "class " followed by {@code getName}.
      *
      * @return a string representation of this {@code Class} object.
      */
     public String toString() {
-        return (isInterface() ? "interface " : (isPrimitive() ? "" : "class "))
-            + getName();
+        return (isInlineClass() ? "inline " : "")
+               + (isInterface() ? "interface " : (isPrimitive() ? "" : "class "))
+               + getName() + (isInlineClass() && isIndirectType() ? "?" : "");
     }
 
     /**
      * Returns a string describing this {@code Class}, including
      * information about modifiers and type parameters.
@@ -257,10 +257,14 @@
                 }
 
                 if (isAnnotation()) {
                     sb.append('@');
                 }
+                if (isInlineClass()) {
+                    sb.append("inline");
+                    sb.append(' ');
+                }
                 if (isInterface()) { // Note: all annotation types are interfaces
                     sb.append("interface");
                 } else {
                     if (isEnum())
                         sb.append("enum");
@@ -431,12 +435,12 @@
         return forName0(name, initialize, loader, caller);
     }
 
     /** Called after security check for system loader access checks have been made. */
     private static native Class<?> forName0(String name, boolean initialize,
-                                            ClassLoader loader,
-                                            Class<?> caller)
+                                    ClassLoader loader,
+                                    Class<?> caller)
         throws ClassNotFoundException;
 
 
     /**
      * Returns the {@code Class} with the given <a href="ClassLoader.html#binary-name">
@@ -510,10 +514,98 @@
         } else {
             return BootLoader.loadClass(module, name);
         }
     }
 
+    /**
+     * Returns {@code true} if this class is an inline class.
+     *
+     * @return {@code true} if this class is an inline class.
+     */
+    public boolean isInlineClass() {
+        return (this.getModifiers() & VALUE_TYPE) != 0;
+    }
+
+    /**
+     * Returns a {@code Class} object representing the primary type of
+     * this class.
+     *
+     * <p> For class {@code C}, {@code C.class} is the primary type of {@code C}.
+     * For a primitive type, the {@code Class} instance representing
+     * that primitive type is its primary type, for example {@code int.class}.
+     *
+     * @return the {@code Class} object representing the primary type of
+     *         this class
+     */
+    @HotSpotIntrinsicCandidate
+    public Class<T> asPrimaryType() {
+        return isInlineClass() ? inlineType : this;
+    }
+
+    /**
+     * Returns a {@code Class} object representing the <em>indirect projection</em>
+     * type if this class is an {@linkplain #isInlineClass() inline class};
+     * otherwise, returns this class.
+     *
+     * <p> An inline class, {@code V}, has two {@code Class} representations,
+     * {@code V.class} and its {@linkplain #asIndirectType() indirect projection
+     * type}.  The indirect projection type is always
+     * {@linkplain #isNullableType() nullable}.
+     * The indirect projection type of a zero-default inline class
+     * is also its nullable projection type.
+     *
+     * @return the {@code Class} object representing the indirect projection type of
+     *         this class if this class is an inline class; otherwise, this class.
+     */
+    @HotSpotIntrinsicCandidate
+    public Class<T> asIndirectType() {
+        return isInlineClass() ? indirectType : this;
+    }
+
+    /**
+     * Returns a {@code Class} object representing the <em>nullable projection</em>
+     * type if this class is an {@linkplain #isInlineClass() inline class};
+     * otherwise, returns this class.
+     *
+     * <p> An inline class, {@code V}, has two {@code Class} representations,
+     * {@code V.class} and its {@linkplain #asIndirectType() indirect projection
+     * type}.  The indirect projection type is always
+     * {@linkplain #isNullableType() nullable}.
+     * The indirect projection type of a zero-default inline class
+     * is also its nullable projection type.
+     *
+     * @return the {@code Class} object representing the nullable projection type of
+     *         this class if this class is an inline class; otherwise, this class.
+     */
+    public Class<T> asNullableType() {
+        return asIndirectType();
+    }
+
+    /**
+     * Returns {@code true} if this class is an indirect type.
+     * An indirect type is always {@linkplain #isNullableType() nullable}.
+     *
+     * @return {@code true} if this class is an indirect type.
+     */
+    public boolean isIndirectType() {
+        return indirectType == null || this == indirectType;
+    }
+
+    /**
+     * Returns {@code true} if this class is a nullable type.
+     *
+     * @return {@code true} if this class is a nullable type.
+     */
+    public boolean isNullableType() {
+        return isIndirectType();
+    }
+
+    // set by VM if this class is an inline type
+    // otherwise, these two fields are null
+    private transient Class<T> inlineType;
+    private transient Class<T> indirectType;
+
     /**
      * Creates a new instance of the class represented by this {@code Class}
      * object.  The class is instantiated as if by a {@code new}
      * expression with an empty argument list.  The class is initialized if it
      * has not already been initialized.
@@ -784,10 +876,12 @@
      * <tr><th scope="row"> boolean      <td style="text-align:center"> Z
      * <tr><th scope="row"> byte         <td style="text-align:center"> B
      * <tr><th scope="row"> char         <td style="text-align:center"> C
      * <tr><th scope="row"> class or interface
      *                                   <td style="text-align:center"> L<i>classname</i>;
+     * <tr><th scope="row"> non-nullable {@linkplain #isInlineClass() inline class}
+     *                                   <td style="text-align:center"> Q<i>classname</i>;
      * <tr><th scope="row"> double       <td style="text-align:center"> D
      * <tr><th scope="row"> float        <td style="text-align:center"> F
      * <tr><th scope="row"> int          <td style="text-align:center"> I
      * <tr><th scope="row"> long         <td style="text-align:center"> J
      * <tr><th scope="row"> short        <td style="text-align:center"> S
@@ -801,12 +895,18 @@
      * <blockquote><pre>
      * String.class.getName()
      *     returns "java.lang.String"
      * byte.class.getName()
      *     returns "byte"
+     * Point.class.getName()
+     *     returns "Point"
      * (new Object[3]).getClass().getName()
      *     returns "[Ljava.lang.Object;"
+     * (new Point[3]).getClass().getName()
+     *     returns "[QPoint;"
+     * (new Point?[3][4]).getClass().getName()
+     *     returns "[[LPoint;"
      * (new int[3][4][5][6][7][8][9]).getClass().getName()
      *     returns "[[[[[[[I"
      * </pre></blockquote>
      *
      * @return  the name of the class or interface
@@ -1213,26 +1313,32 @@
      * @since 1.1
      */
     @HotSpotIntrinsicCandidate
     public native int getModifiers();
 
-
     /**
      * Gets the signers of this class.
      *
      * @return  the signers of this class, or null if there are no signers.  In
      *          particular, this method returns null if this {@code Class} object represents
      *          a primitive type or void.
      * @since   1.1
      */
-    public native Object[] getSigners();
+    public Object[] getSigners() {
+        return asPrimaryType().getSigners0();
+    }
 
+    private native Object[] getSigners0();
 
     /**
      * Set the signers of this class.
      */
-    native void setSigners(Object[] signers);
+    void setSigners(Object[] signers) {
+        asPrimaryType().setSigners0(signers);
+    }
+
+    native void setSigners0(Object[] signers);
 
 
     /**
      * If this {@code Class} object represents a local or anonymous
      * class within a method, returns a {@link
@@ -1587,11 +1693,11 @@
         String simpleName = getSimpleBinaryName();
         if (simpleName == null) { // top level class
             simpleName = getName();
             simpleName = simpleName.substring(simpleName.lastIndexOf('.') + 1); // strip the package name
         }
-        return simpleName;
+        return isInlineClass() && isIndirectType() ? simpleName + "?" : simpleName;
     }
 
     /**
      * Return an informative string for the name of this type.
      *
@@ -1605,14 +1711,14 @@
                 int dimensions = 0;
                 do {
                     dimensions++;
                     cl = cl.getComponentType();
                 } while (cl.isArray());
-                return cl.getName() + "[]".repeat(dimensions);
+                return cl.getTypeName() + "[]".repeat(dimensions);
             } catch (Throwable e) { /*FALLTHRU*/ }
         }
-        return getName();
+        return toTypeName();
     }
 
     /**
      * Returns the canonical name of the underlying class as defined
      * by <cite>The Java&trade; Language Specification</cite>, section
@@ -3502,14 +3608,22 @@
     private String methodToString(String name, Class<?>[] argTypes) {
         return getName() + '.' + name +
                 ((argTypes == null || argTypes.length == 0) ?
                 "()" :
                 Arrays.stream(argTypes)
-                        .map(c -> c == null ? "null" : c.getName())
+                        .map(c -> c == null ? "null" : c.toTypeName())
                         .collect(Collectors.joining(",", "(", ")")));
     }
 
+    /*
+     * Returns the class name appended with "?" if it is the nullable projection
+     * of an inline class.
+     */
+    private String toTypeName() {
+        return isInlineClass() && isIndirectType() ? getName() + "?" : getName();
+    }
+
     /** use serialVersionUID from JDK 1.1 for interoperability */
     @java.io.Serial
     private static final long serialVersionUID = 3206093459760846163L;
 
 
@@ -3730,17 +3844,22 @@
      *
      * @param obj the object to be cast
      * @return the object after casting, or null if obj is null
      *
      * @throws ClassCastException if the object is not
-     * null and is not assignable to the type T.
+     * {@code null} and is not assignable to the type T.
+     * @throws NullPointerException if this is not a {@linkplain #isNullableType()
+     * nullable type} and the object is {@code null}
      *
      * @since 1.5
      */
     @SuppressWarnings("unchecked")
     @HotSpotIntrinsicCandidate
     public T cast(Object obj) {
+        if (!isNullableType() && obj == null)
+            throw new NullPointerException(getName() + " is an inline class");
+
         if (obj != null && !isInstance(obj))
             throw new ClassCastException(cannotCastMsg(obj));
         return (T) obj;
     }
 
@@ -4032,11 +4151,11 @@
      *
      * @return an array representing the superinterfaces
      * @since 1.8
      */
     public AnnotatedType[] getAnnotatedInterfaces() {
-         return TypeAnnotationParser.buildAnnotatedInterfaces(getRawTypeAnnotations(), getConstantPool(), this);
+        return TypeAnnotationParser.buildAnnotatedInterfaces(getRawTypeAnnotations(), getConstantPool(), this);
     }
 
     private native Class<?> getNestHost0();
 
     /**
