diff a/src/hotspot/share/runtime/jniHandles.cpp b/src/hotspot/share/runtime/jniHandles.cpp
--- a/src/hotspot/share/runtime/jniHandles.cpp
+++ b/src/hotspot/share/runtime/jniHandles.cpp
@@ -29,10 +29,11 @@
 #include "memory/iterator.hpp"
 #include "memory/universe.hpp"
 #include "oops/access.inline.hpp"
 #include "oops/oop.inline.hpp"
 #include "runtime/handles.inline.hpp"
+#include "runtime/javaCalls.hpp"
 #include "runtime/jniHandles.inline.hpp"
 #include "runtime/mutexLocker.hpp"
 #include "runtime/thread.inline.hpp"
 #include "utilities/align.hpp"
 #include "utilities/debug.hpp"
@@ -323,10 +324,44 @@
   Thread* thread = Thread::current();
   return (thread->is_Java_thread() &&
           JavaThread::current()->thread_state() == _thread_in_native);
 }
 
+bool JNIHandles::is_same_object(jobject handle1, jobject handle2) {
+  oop obj1 = resolve_no_keepalive(handle1);
+  oop obj2 = resolve_no_keepalive(handle2);
+
+  bool ret = obj1 == obj2;
+
+  if (EnableValhalla) {
+    if (!ret && obj1 != NULL && obj2 != NULL && obj1->klass() == obj2->klass() && obj1->klass()->is_inline_klass()) {
+      Thread* THREAD = Thread::current();
+        Handle ha(THREAD, obj1);
+        Handle hb(THREAD, obj2);
+        JavaValue result(T_BOOLEAN);
+        JavaCallArguments args;
+        args.push_oop(ha);
+        args.push_oop(hb);
+        methodHandle method(THREAD, Universe::is_substitutable_method());
+        JavaCalls::call(&result, method, &args, THREAD);
+        if (HAS_PENDING_EXCEPTION) {
+          // Something really bad happened because isSubstitutable() should not throw exceptions
+          // If it is an error, just let it propagate
+          // If it is an exception, wrap it into an InternalError
+          if (!PENDING_EXCEPTION->is_a(SystemDictionary::Error_klass())) {
+            Handle e(THREAD, PENDING_EXCEPTION);
+            CLEAR_PENDING_EXCEPTION;
+            THROW_MSG_CAUSE_(vmSymbols::java_lang_InternalError(), "Internal error in substitutability test", e, false);
+          }
+        }
+        ret = result.get_jboolean();
+    }
+  }
+
+  return ret;
+}
+
 
 int             JNIHandleBlock::_blocks_allocated     = 0;
 JNIHandleBlock* JNIHandleBlock::_block_free_list      = NULL;
 #ifndef PRODUCT
 JNIHandleBlock* JNIHandleBlock::_block_list           = NULL;
diff a/src/hotspot/share/runtime/jniHandles.inline.hpp b/src/hotspot/share/runtime/jniHandles.inline.hpp
--- a/src/hotspot/share/runtime/jniHandles.inline.hpp
+++ b/src/hotspot/share/runtime/jniHandles.inline.hpp
@@ -79,16 +79,10 @@
     result = resolve_impl<AS_NO_KEEPALIVE, false /* external_guard */>(handle);
   }
   return result;
 }
 
-inline bool JNIHandles::is_same_object(jobject handle1, jobject handle2) {
-  oop obj1 = resolve_no_keepalive(handle1);
-  oop obj2 = resolve_no_keepalive(handle2);
-  return obj1 == obj2;
-}
-
 inline oop JNIHandles::resolve_non_null(jobject handle) {
   assert(handle != NULL, "JNI handle should not be null");
   oop result = resolve_impl<DECORATORS_NONE, false /* external_guard */>(handle);
   assert(result != NULL, "NULL read from jni handle");
   return result;
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestJNIIsSameObject.java b/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestJNIIsSameObject.java
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/TestJNIIsSameObject.java
@@ -0,0 +1,80 @@
+/*
+ * Copyright (c) 2020, 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+
+import jdk.test.lib.Asserts;
+
+
+/*
+ * @test
+ * @summary Test JNI IsSameObject semantic with inline types
+ * @library /testlibrary /test/lib
+ * @requires (os.simpleArch == "x64")
+ * @requires (os.family == "linux" | os.family == "mac")
+ * @run main/othervm/native TestJNIIsSameObject
+ */
+public class TestJNIIsSameObject {
+  static inline class Value {
+    int i;
+
+    public Value(int i) {
+      this.i = i;
+    }
+  }
+  native static boolean isSameObject(Object o0, Object o1);
+
+  static {
+    System.loadLibrary("JNIIsSameObject");
+  }
+
+  public static void main(String[] args) {
+    // Same value in different instances
+    Value v0 = new Value(3);
+    Value v1 = new Value(3);
+    Asserts.assertTrue(isSameObject(v0, v1));
+
+    // Different values
+    Value v2 = new Value(4);
+    Asserts.assertFalse(isSameObject(v0, v2));
+
+    // Same object
+    TestJNIIsSameObject t0 = new TestJNIIsSameObject();
+    Object o = t0;
+    Asserts.assertTrue(isSameObject(t0, o));
+
+    // Different objects
+    TestJNIIsSameObject t1 = new TestJNIIsSameObject();
+    Asserts.assertFalse(isSameObject(t0, t1));
+
+    // Comparing against null
+    Asserts.assertFalse(isSameObject(v0, null));
+    Asserts.assertFalse(isSameObject(null, v0));
+    Asserts.assertFalse(isSameObject(t0, null));
+    Asserts.assertFalse(isSameObject(null, t0));
+
+    // Object vs value
+    Asserts.assertFalse(isSameObject(v0, t0));
+    Asserts.assertFalse(isSameObject(t0, v0));
+
+  }
+}
diff a/test/hotspot/jtreg/runtime/valhalla/valuetypes/libJNIIsSameObject.c b/test/hotspot/jtreg/runtime/valhalla/valuetypes/libJNIIsSameObject.c
--- /dev/null
+++ b/test/hotspot/jtreg/runtime/valhalla/valuetypes/libJNIIsSameObject.c
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2020, 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <jni.h>
+
+#if !defined(_WIN32) && !defined(_WIN64)
+
+JNIEXPORT jboolean JNICALL
+Java_TestJNIIsSameObject_isSameObject(JNIEnv* env, jclass klass, jobject obj0, jobject obj1) {
+  return (*env)->IsSameObject(env, obj0, obj1);
+}
+
+#endif
