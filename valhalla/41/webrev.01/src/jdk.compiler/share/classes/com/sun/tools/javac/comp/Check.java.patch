diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
@@ -2676,16 +2676,12 @@
                 if (!checkCompatibleAbstracts(pos, l.head, m.head, c))
                     return;
         }
         checkCompatibleConcretes(pos, c);
 
-        /* Check for inline/identity incompatibilities: But first, we may need to switch to the
-           reference universe to make the hierarchy navigable.
-        */
-        Type asRefType = c.isValue() ? c.referenceProjection() : c;
-        boolean isIdentityObject = types.asSuper(asRefType, syms.identityObjectType.tsym) != null;
-        boolean isInlineObject = types.asSuper(asRefType, syms.inlineObjectType.tsym) != null;
+        boolean isIdentityObject = types.asSuper(c, syms.identityObjectType.tsym, true) != null;
+        boolean isInlineObject = types.asSuper(c, syms.inlineObjectType.tsym, true) != null;
         if (c.isValue() && isIdentityObject) {
             log.error(pos, Errors.InlineTypeMustNotImplementIdentityObject(c));
         } else if (!c.isInterface() && !c.tsym.isAbstract() && !c.isValue() && isInlineObject) {
             log.error(pos, Errors.IdentityTypeMustNotImplementInlineObject(c));
         } else if (isIdentityObject && isInlineObject) {
