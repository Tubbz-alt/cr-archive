diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java
@@ -2150,11 +2150,10 @@
         return new ArrayType(t, syms.arrayClass);
     }
     // </editor-fold>
 
     // <editor-fold defaultstate="collapsed" desc="asSuper">
-
     /**
      * Return the (most specific) base type of t that starts with the
      * given symbol.  If none exists, return null.
      *
      * Caveat Emptor: Since javac represents the class of all arrays with a singleton
@@ -2162,20 +2161,13 @@
      * this method could yield surprising answers when invoked on arrays. For example when
      * invoked with t being byte [] and sym being t.sym itself, asSuper would answer null.
      *
      * @param t a type
      * @param sym a symbol
-     * @param checkReferenceProjection if true, first compute reference projection of t
      */
-    public Type asSuper(Type t, Symbol sym, boolean checkReferenceProjection) {
-        /* For a (value or identity) class V, whether it implements an interface I, boils down to whether
-           V.ref is a subtype of I. OIOW, whether asSuper(V.ref, sym) != null. (Likewise for an abstract
-           superclass)
-        */
-        if (checkReferenceProjection)
-            t = t.isValue() ? t.referenceProjection() : t;
-        return asSuper(t, sym);
+    public Type asSuper(Type t, Symbol sym) {
+        return asSuper(t, sym, false);
     }
 
     /**
      * Return the (most specific) base type of t that starts with the
      * given symbol.  If none exists, return null.
@@ -2185,20 +2177,29 @@
      * this method could yield surprising answers when invoked on arrays. For example when
      * invoked with t being byte [] and sym being t.sym itself, asSuper would answer null.
      *
      * @param t a type
      * @param sym a symbol
+     * @param checkReferenceProjection if true, first compute reference projection of t
      */
-    public Type asSuper(Type t, Symbol sym) {
+    public Type asSuper(Type t, Symbol sym, boolean checkReferenceProjection) {
         /* Some examples:
          *
          * (Enum<E>, Comparable) => Comparable<E>
          * (c.s.s.d.AttributeTree.ValueKind, Enum) => Enum<c.s.s.d.AttributeTree.ValueKind>
          * (c.s.s.t.ExpressionTree, c.s.s.t.Tree) => c.s.s.t.Tree
          * (j.u.List<capture#160 of ? extends c.s.s.d.DocTree>, Iterable) =>
          *     Iterable<capture#160 of ? extends c.s.s.d.DocTree>
          */
+
+        /* For a (value or identity) class V, whether it implements an interface I, boils down to whether
+           V.ref is a subtype of I. OIOW, whether asSuper(V.ref, sym) != null. (Likewise for an abstract
+           superclass)
+        */
+        if (checkReferenceProjection)
+            t = t.isValue() ? t.referenceProjection() : t;
+
         if (sym.type == syms.objectType) { //optimization
             if (!isValue(t))
                 return syms.objectType;
         }
         return asSuper.visit(t, sym);
diff a/test/langtools/tools/javac/valhalla/lworld-values/AutoCloseableTest.java b/test/langtools/tools/javac/valhalla/lworld-values/AutoCloseableTest.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/AutoCloseableTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/AutoCloseableTest.java
@@ -52,6 +52,6 @@
             found = e.getMessage();
         }
         if (expected.length() == 0 || !expected.equals(found))
             throw new AssertionError("Should not get here!");
     }
-}
+}
diff a/test/langtools/tools/javac/valhalla/lworld-values/ConflictingSuperInterfaceTest.java b/test/langtools/tools/javac/valhalla/lworld-values/ConflictingSuperInterfaceTest.java
--- a/test/langtools/tools/javac/valhalla/lworld-values/ConflictingSuperInterfaceTest.java
+++ b/test/langtools/tools/javac/valhalla/lworld-values/ConflictingSuperInterfaceTest.java
@@ -10,6 +10,6 @@
     interface I<T> {}
     abstract class S implements I<String> {}
     inline static class Foo extends S implements I<Integer> {
         String s = "";
     }
-}
+}
