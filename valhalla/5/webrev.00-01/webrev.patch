diff a/test/micro/org/openjdk/bench/valhalla/corelibs/InlineCursor.java b/test/micro/org/openjdk/bench/valhalla/corelibs/InlineCursor.java
--- a/test/micro/org/openjdk/bench/valhalla/corelibs/InlineCursor.java
+++ b/test/micro/org/openjdk/bench/valhalla/corelibs/InlineCursor.java
@@ -91,25 +91,6 @@
      *         or no longer exists
      * @throws ConcurrentModificationException if the collection
      *         has been modified since this Cursor was created
      */
     T get();
-
-    /**
-     * Remove the current element if it exists.
-     *
-     * The collection is modified by removing the element.
-     * After calling {@code #remove()}, this Cursor is not valid
-     * to refer to the element.
-     * Calling {@link #advance()} on the cursor returns a Cursor for
-     * the next element after the element that has been removed.
-     *
-     * @return a Cursor for a non-existent position before the next element;
-     *         the Cursor does not refer to an element
-     * @throws NoSuchElementException if not valid
-     * @throws ConcurrentModificationException if the collection
-     *         has been modified since this Cursor was created
-     */
-    default InlineCursor<T> remove() {
-        throw new UnsupportedOperationException();
-    }
 }
diff a/test/micro/org/openjdk/bench/valhalla/corelibs/XArrayList.java b/test/micro/org/openjdk/bench/valhalla/corelibs/XArrayList.java
--- a/test/micro/org/openjdk/bench/valhalla/corelibs/XArrayList.java
+++ b/test/micro/org/openjdk/bench/valhalla/corelibs/XArrayList.java
@@ -1095,81 +1095,46 @@
     /**
      * Create an inline cursor for this XArrayList.
      */
     private inline class AListCursor<E> implements InlineCursor<E> {
         // Inner class field 'this' is initialized
-        int index;          // index of next element to return; if neg is removed index
+        int index;
         int expectedModCount;
 
-        /**
-         * Return true if the element has been removed.
-         * @return true if the element has been removed
-         */
-        private boolean isRemoved() {
-            return index < 0;
-        }
-
         /**
          * Create a new Cursor for this XArrayList.
          *
-         * @param cursor index if positive;
-         *               if negative is the inverse (not) of a removed element
+         * @param cursor index
          */
         public AListCursor(int cursor) {
             this.index = cursor;
             this.expectedModCount = XArrayList.this.modCount;
         }
 
-        /**
-         * Return true if the index is in range for the Collection
-         * and has not been explicitly removed.
-         * It does NOT check for co-modification.
-         *
-         * @param cursor and index
-         * @return true if the index is a valid index.
-         */
-        private boolean validIndex(int cursor) {
-            return cursor >= 0 && cursor < XArrayList.this.size;
-        }
-
         @Override
         public boolean exists() {
-            return validIndex(index);
+            return index < XArrayList.this.size;
         }
 
         @SuppressWarnings("unchecked")
         public E get() {
-            if (!validIndex(index))
-                throw new NoSuchElementException();
-            checkForComodification();
-            try {
-                Object[] elementData = XArrayList.this.elementData;
-                return (E) elementData[index];
-            } catch (ArrayIndexOutOfBoundsException aioobe) {
-                throw new ConcurrentModificationException();
+            if (exists()) {
+                checkForComodification();
+                try {
+                    return (E) XArrayList.this.elementData[index];
+                } catch (ArrayIndexOutOfBoundsException aioobe) {
+                    throw new ConcurrentModificationException();
+                }
             }
+            throw new NoSuchElementException();
         }
 
         @Override
         public AListCursor<E> advance() {
-            checkForComodification();   // Reject if Collection has changed
             // new Cursor will have a current expectedModCount
             // TBD: Saturate index?  So calling adv, adv, adv, prev == last
-            return new AListCursor<>(isRemoved() ? ~index : index + 1);
-        }
-
-        @Override
-        public AListCursor<E> remove() {
-            if (!validIndex(index))
-                throw new NoSuchElementException();
-            checkForComodification();
-            try {
-                XArrayList.this.remove(index);
-                return new AListCursor<>(~index); // invert for removed index
-            } catch (IndexOutOfBoundsException ex) {
-                throw new ConcurrentModificationException();
-            }
+            return new AListCursor<>(Math.min(index + 1, size));
         }
 
         final void checkForComodification() {
             if (XArrayList.this.modCount != expectedModCount)
                 throw new ConcurrentModificationException();
@@ -1210,17 +1175,10 @@
             lastRet = cursor;
             cursor = cursor.advance();
             return val;
         }
 
-        public void remove() {
-            if (lastRet.exists())
-                lastRet.remove();
-            else
-                throw new IllegalStateException();
-        }
-
         @Override
         public void forEachRemaining(Consumer<? super E> action) {
             Objects.requireNonNull(action);
 
             AListCursor<E> cur = cursor;
diff a/test/micro/org/openjdk/bench/valhalla/corelibs/XArrayListCursorTest.java b/test/micro/org/openjdk/bench/valhalla/corelibs/XArrayListCursorTest.java
--- a/test/micro/org/openjdk/bench/valhalla/corelibs/XArrayListCursorTest.java
+++ b/test/micro/org/openjdk/bench/valhalla/corelibs/XArrayListCursorTest.java
@@ -10,12 +10,12 @@
 import org.openjdk.jmh.annotations.*;
 import org.openjdk.jmh.infra.Blackhole;
 
 @Fork(1)
 @Warmup(iterations = 3, time = 1)
-@Measurement(iterations = 5, time = 1)
-@OutputTimeUnit(TimeUnit.NANOSECONDS)
+@Measurement(iterations = 5, time = 3)
+@OutputTimeUnit(TimeUnit.MILLISECONDS)
 @BenchmarkMode(Mode.AverageTime)
 @State(Scope.Thread)
 public class XArrayListCursorTest {
     @Param({"100000"})
     public static int size;
