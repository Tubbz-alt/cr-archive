diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symbol.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symbol.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symbol.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Symbol.java
@@ -424,19 +424,19 @@
     public boolean isReferenceProjection() {
         return false;
     }
 
     /**
-     * Return the value projection IFF `this' happens to be derived reference projection, null
+     * Return the value projection IFF 'this' happens to be derived reference projection, null
      * otherwise.
      */
     public Symbol valueProjection() {
         return null;
     }
 
     /**
-     * Return the reference projection IFF `this' happens to be value projection, null
+     * Return the reference projection IFF 'this' happens to be value projection, null
      * otherwise.
      */
     public Symbol referenceProjection() {
         return null;
     }
@@ -541,11 +541,11 @@
         }
         return (ClassSymbol)c;
     }
 
     /** The outermost class which indirectly owns this symbol.
-     * `outermost' being a lexical construct, should transcend
+     * 'outermost' being a lexical construct, should transcend
      *  projections
      */
     public ClassSymbol outermostClass() {
         Symbol sym = this;
         Symbol prev = null;
@@ -1314,11 +1314,11 @@
         /* the list of any of record components, only non empty if the class is a record
          * and it has at least one record component
          */
         private List<RecordComponent> recordComponents = List.nil();
 
-        /* the `other' projection: If `this' is an inline class then 'projection' is its reference projection
+        /* the 'other' projection: If 'this' is an inline class then 'projection' is its reference projection
            and vice versa.
          */
         public ClassSymbol projection;
 
 
@@ -1664,24 +1664,24 @@
             Name projectionName = this.name.append('$', this.name.table.names.ref);
             long projectionFlags = (this.flags() & ~(VALUE | UNATTRIBUTED));
 
             projection = new ClassSymbol(projectionFlags, projectionName, projectedType, this.owner);
             projection.members_field = WriteableScope.create(projection);
-            for (Symbol s : this.members().getSymbols(s->(s.kind == MTH || s.kind == VAR), NON_RECURSIVE)) { // TODO: TYP?, CLINT?
+            for (Symbol s : this.members().getSymbols(s->(s.kind == MTH || s.kind == VAR), NON_RECURSIVE)) {
                 Symbol clone = null;
                 if (s.kind == MTH) {
-                    MethodSymbol vMethod = (MethodSymbol)s;
-                    MethodSymbol rMethod = vMethod.clone(projection);
-                    vMethod.projection = rMethod;
-                    rMethod.projection = vMethod;
-                    clone = rMethod;
+                    MethodSymbol valMethod = (MethodSymbol)s;
+                    MethodSymbol refMethod = valMethod.clone(projection);
+                    valMethod.projection = refMethod;
+                    refMethod.projection = valMethod;
+                    clone = refMethod;
                 } else if (s.kind == VAR) {
-                    VarSymbol vVar = (VarSymbol)s;
-                    VarSymbol rVar = vVar.clone(projection);
-                    vVar.projection = rVar;
-                    rVar.projection = vVar;
-                    clone = rVar;
+                    VarSymbol valVar = (VarSymbol)s;
+                    VarSymbol refVar = valVar.clone(projection);
+                    valVar.projection = refVar;
+                    refVar.projection = valVar;
+                    clone = refVar;
                 }
                 projection.members_field.enter(clone);
             }
             projection.completer = Completer.NULL_COMPLETER;
             projection.sourcefile = this.sourcefile;
@@ -1710,11 +1710,11 @@
          *  Code generation:
          *    If this is a local variable, its logical slot number.
          */
         public int adr = -1;
 
-        /* The `other' projection: If `this' is a field of an inline class, then 'projection' is the
+        /* The 'other' projection: If 'this' is a field of an inline class, then 'projection' is the
            its doppleganger in its referene projection class and vice versa.
         */
         public VarSymbol projection;
 
         /** Construct a variable symbol, given its flags, name, type and owner.
@@ -1962,11 +1962,11 @@
          *  The value is null if none appeared in the method
          *  declaration.
          */
         public Attribute defaultValue = null;
 
-        /* The `other' projection: If `this' is a method of an inline class, then 'projection' is the
+        /* The 'other' projection: If 'this' is a method of an inline class, then 'projection' is the
            its doppleganger in its referene projection class and vice versa.
         */
         public MethodSymbol projection;
 
         /** Construct a method symbol, given its flags, name, type and owner.
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Type.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Type.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Type.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Type.java
@@ -1022,11 +1022,11 @@
 
         /** All the interfaces of this class, including missing ones.
          */
         public List<Type> all_interfaces_field;
 
-        /* The `other' projection: If `this' is type of an inline class, then 'projection' is the
+        /* The 'other' projection: If 'this' is type of an inline class, then 'projection' is the
            its doppleganger in its referene projection world and vice versa.
         */
         public ClassType projection;
 
         public ClassType(Type outer, List<Type> typarams, TypeSymbol tsym) {
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Types.java
@@ -2189,11 +2189,11 @@
             @Override
             public Type visitClassType(ClassType t, Symbol sym) {
                 if (t.tsym == sym)
                     return t;
 
-               // No man may be an island, but the bell tolls for a value.
+                // No man may be an island, but the bell tolls for a value.
                 if (isValue(t))
                     return null;
 
                 Type st = supertype(t);
                 if (st.hasTag(CLASS) || st.hasTag(TYPEVAR)) {
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
@@ -896,11 +896,11 @@
         } else
             return true;
     }
 
     void checkParameterizationWithValues(DiagnosticPosition pos, Type t) {
-        if (t.tsym != syms.classType.tsym) { // tolerate Value.class for now.
+        if (t.tsym != syms.classType.tsym) { // tolerate Value.class.
             valueParameterizationChecker.visit(t, pos);
         }
     }
 
     /** valueParameterizationChecker: A type visitor that descends down the given type looking for instances of value types
