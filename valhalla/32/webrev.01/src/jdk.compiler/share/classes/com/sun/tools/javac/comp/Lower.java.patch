diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Lower.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Lower.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Lower.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Lower.java
@@ -2097,11 +2097,12 @@
     }
 
     /** Visitor method: Translate a single node, boxing or unboxing if needed.
      */
     public <T extends JCExpression> T translate(T tree, Type type) {
-        return (tree == null) ? null : boxIfNeeded(translate(tree), type);
+        return (tree == null) ? null :
+                applyInlineConversionsAsNeeded(boxIfNeeded(translate(tree), type), type);
     }
 
     /** Visitor method: Translate tree.
      */
     public <T extends JCTree> T translate(T tree, JCExpression enclOp) {
@@ -3087,10 +3088,27 @@
             if (!anyChanges) return _args;
         }
         return result.toList();
     }
 
+    /** Apply inline widening/narrowing conversions as needed */
+    @SuppressWarnings("unchecked")
+    <T extends JCExpression> T applyInlineConversionsAsNeeded(T tree, Type type) {
+        boolean haveValue = tree.type.isValue();
+        if (haveValue == type.isValue())
+            return tree;
+        if (haveValue) {
+            // widening coversion is a NOP for the VM due to subtyping relationship at class file
+            return tree;
+        } else {
+            // For narrowing conversion, insert a cast which should trigger a null check
+            return (T) make.TypeCast(type, tree);
+        }
+    }
+
+
+
     /** Expand a boxing or unboxing conversion if needed. */
     @SuppressWarnings("unchecked") // XXX unchecked
     <T extends JCExpression> T boxIfNeeded(T tree, Type type) {
         boolean havePrimitive = tree.type.isPrimitive();
         if (havePrimitive == type.isPrimitive())
