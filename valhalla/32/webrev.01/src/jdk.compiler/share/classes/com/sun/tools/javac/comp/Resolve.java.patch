diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Resolve.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Resolve.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Resolve.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Resolve.java
@@ -405,47 +405,63 @@
         if (env.info.visitingServiceImplementation &&
             env.toplevel.modle == sym.packge().modle) {
             return true;
         }
 
-        switch ((short)(sym.flags() & AccessFlags)) {
-        case PRIVATE:
-            return
-                (env.enclClass.sym == sym.owner // fast special case
-                 ||
-                 env.enclClass.sym.outermostClass() ==
-                 sym.owner.outermostClass())
-                &&
-                sym.isInheritedIn(site.tsym, types);
-        case 0:
-            return
-                (env.toplevel.packge == sym.owner.owner // fast special case
-                 ||
-                 env.toplevel.packge == sym.packge())
-                &&
-                isAccessible(env, site, checkInner)
-                &&
-                sym.isInheritedIn(site.tsym, types)
-                &&
-                notOverriddenIn(site, sym);
-        case PROTECTED:
-            return
-                (env.toplevel.packge == sym.owner.owner // fast special case
-                 ||
-                 env.toplevel.packge == sym.packge()
-                 ||
-                 isProtectedAccessible(sym, env.enclClass.sym, site)
-                 ||
-                 // OK to select instance method or field from 'super' or type name
-                 // (but type names should be disallowed elsewhere!)
-                 env.info.selectSuper && (sym.flags() & STATIC) == 0 && sym.kind != TYP)
-                &&
-                isAccessible(env, site, checkInner)
-                &&
-                notOverriddenIn(site, sym);
-        default: // this case includes erroneous combinations as well
-            return isAccessible(env, site, checkInner) && notOverriddenIn(site, sym);
+        ClassSymbol enclosingCsym = env.enclClass.sym;
+        if (sym.kind == MTH || sym.kind == VAR) {
+            /* If any inline types are involved, ask the same question in the reference universe,
+               where the hierarchy is navigable
+            */
+            if (site.isValue())
+                site = site.referenceProjection();
+            if (sym.owner.isValue())
+                sym = sym.referenceProjection();
+            if (env.enclClass.sym.isValue())
+                env.enclClass.sym = env.enclClass.sym.referenceProjection();
+        }
+        try {
+            switch ((short)(sym.flags() & AccessFlags)) {
+                case PRIVATE:
+                    return
+                            (env.enclClass.sym == sym.owner // fast special case
+                                    ||
+                                    env.enclClass.sym.outermostClass() ==
+                                            sym.owner.outermostClass())
+                                    &&
+                                    sym.isInheritedIn(site.tsym, types);
+                case 0:
+                    return
+                            (env.toplevel.packge == sym.owner.owner // fast special case
+                                    ||
+                                    env.toplevel.packge == sym.packge())
+                                    &&
+                                    isAccessible(env, site, checkInner)
+                                    &&
+                                    sym.isInheritedIn(site.tsym, types)
+                                    &&
+                                    notOverriddenIn(site, sym);
+                case PROTECTED:
+                    return
+                            (env.toplevel.packge == sym.owner.owner // fast special case
+                                    ||
+                                    env.toplevel.packge == sym.packge()
+                                    ||
+                                    isProtectedAccessible(sym, env.enclClass.sym, site)
+                                    ||
+                                    // OK to select instance method or field from 'super' or type name
+                                    // (but type names should be disallowed elsewhere!)
+                                    env.info.selectSuper && (sym.flags() & STATIC) == 0 && sym.kind != TYP)
+                                    &&
+                                    isAccessible(env, site, checkInner)
+                                    &&
+                                    notOverriddenIn(site, sym);
+                default: // this case includes erroneous combinations as well
+                    return isAccessible(env, site, checkInner) && notOverriddenIn(site, sym);
+            }
+        } finally {
+            env.enclClass.sym = enclosingCsym;
         }
     }
     //where
     /* `sym' is accessible only if not overridden by
      * another symbol which is a member of `site'
@@ -454,15 +470,22 @@
      * cannot be overridden (e.g. MH.invokeExact(Object[])).
      */
     private boolean notOverriddenIn(Type site, Symbol sym) {
         if (sym.kind != MTH || sym.isConstructor() || sym.isStatic())
             return true;
-        else {
-            Symbol s2 = ((MethodSymbol)sym).implementation(site.tsym, types, true);
-            return (s2 == null || s2 == sym || sym.owner == s2.owner ||
-                    !types.isSubSignature(types.memberType(site, s2), types.memberType(site, sym)));
-        }
+
+        /* If any inline types are involved, ask the same question in the reference universe,
+           where the hierarchy is navigable
+        */
+        if (site.isValue())
+            site = site.referenceProjection();
+        if (sym.owner.isValue())
+            sym = sym.referenceProjection();
+
+        Symbol s2 = ((MethodSymbol)sym).implementation(site.tsym, types, true);
+        return (s2 == null || s2 == sym || sym.owner == s2.owner ||
+                !types.isSubSignature(types.memberType(site, s2), types.memberType(site, sym)));
     }
     //where
         /** Is given protected symbol accessible if it is selected from given site
          *  and the selection takes place in given class?
          *  @param sym     The symbol with protected access
@@ -2232,12 +2255,11 @@
      */
     Symbol findMemberType(Env<AttrContext> env,
                           Type site,
                           Name name,
                           TypeSymbol c) {
-        Symbol sym = findMemberTypeInternal(env,site, name, c);
-        return env.info.isQuestioned && sym.isValue() ? types.projectedNullableType((ClassSymbol) sym) : sym;
+        return findMemberTypeInternal(env,site, name, c);
     }
 
     /** Find qualified member type.
      *  @param env       The current environment.
      *  @param site      The original type from where the selection takes
@@ -2294,12 +2316,11 @@
     /** Find an unqualified type symbol.
      *  @param env       The current environment.
      *  @param name      The type's name.
      */
     Symbol findType(Env<AttrContext> env, Name name) {
-        Symbol sym = findTypeInternal(env, name);
-        return env.info.isQuestioned && sym.isValue() ? types.projectedNullableType((ClassSymbol) sym) : sym;
+        return findTypeInternal(env, name);
     }
 
     /** Find an unqualified type symbol.
      *  @param env       The current environment.
      *  @param name      The type's name.
@@ -2411,12 +2432,11 @@
      *                   (a nonempty subset of TYP, PCK).
      */
     Symbol findIdentInPackage(DiagnosticPosition pos,
                               Env<AttrContext> env, TypeSymbol pck,
                               Name name, KindSelector kind) {
-        Symbol sym = checkRestrictedType(pos, findIdentInPackageInternal(env, pck, name, kind), name);
-        return env.info.isQuestioned && sym.isValue() ? types.projectedNullableType((ClassSymbol) sym) : sym;
+        return checkRestrictedType(pos, findIdentInPackageInternal(env, pck, name, kind), name);
     }
 
     Symbol findIdentInPackageInternal(Env<AttrContext> env, TypeSymbol pck,
                               Name name, KindSelector kind) {
         Name fullname = TypeSymbol.formFullName(name, pck);
