diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java
@@ -239,19 +239,17 @@
      *     mode = EXPR        : an expression
      *     mode = TYPE        : a type
      *     mode = NOPARAMS    : no parameters allowed for type
      *     mode = TYPEARG     : type argument
      *     mode |= NOLAMBDA   : lambdas are not allowed
-     *     mode |= NOQUESTION   : type terminal ? is not allowed
      */
     protected static final int EXPR = 0x1;
     protected static final int TYPE = 0x2;
     protected static final int NOPARAMS = 0x4;
     protected static final int TYPEARG = 0x8;
     protected static final int DIAMOND = 0x10;
     protected static final int NOLAMBDA = 0x20;
-    protected static final int NOQUESTION = 0x40;
 
     protected void selectExprMode() {
         mode = (mode & NOLAMBDA) | EXPR;
     }
 
@@ -636,11 +634,11 @@
             return names.error;
         }
     }
 
     /**
-     * Qualident = Ident { DOT [Annotations] Ident } {?}
+     * Qualident = Ident { DOT [Annotations] Ident }
      */
     public JCExpression qualident(boolean allowAnnos) {
         JCExpression t = toP(F.at(token.pos).Ident(ident()));
         while (token.kind == DOT) {
             int pos = token.pos;
@@ -652,17 +650,10 @@
             t = toP(F.at(pos).Select(t, ident()));
             if (tyannos != null && tyannos.nonEmpty()) {
                 t = toP(F.at(tyannos.head.pos).AnnotatedType(tyannos, t));
             }
         }
-        /* if the qualified identifier being parsed is for a type name (as indicated by allowAnnos),
-           also process any terminal ? to signal nullable projection for a value type.
-        */
-        if (allowAnnos && token.kind == QUES) {
-            t.setQuestioned();
-            nextToken();
-        }
         return t;
     }
 
     JCExpression literal(Name prefix) {
         return literal(prefix, token.pos);
@@ -802,39 +793,27 @@
      */
     public JCExpression parseType() {
         return parseType(false);
     }
 
-    public JCExpression parseTypeSansQuestion() {
-        List<JCAnnotation> annotations = typeAnnotationsOpt();
-        boolean questionOK = peekToken(0, QUES) && peekToken(1, LBRACKET)  && peekToken(2, RBRACKET);
-        JCExpression result = unannotatedType(false, TYPE | (questionOK ? 0 : NOQUESTION));
-        mode &= ~NOQUESTION;
-        if (annotations.nonEmpty()) {
-            result = insertAnnotationsToMostInner(result, annotations, false);
-        }
-
-        return result;
-    }
-
     public JCExpression parseType(boolean allowVar) {
         List<JCAnnotation> annotations = typeAnnotationsOpt();
         return parseType(allowVar, annotations);
     }
 
     public JCExpression parseType(boolean allowVar, List<JCAnnotation> annotations) {
-        JCExpression result = unannotatedType(allowVar, TYPE);
+        JCExpression result = unannotatedType(allowVar);
 
         if (annotations.nonEmpty()) {
             result = insertAnnotationsToMostInner(result, annotations, false);
         }
 
         return result;
     }
 
-    public JCExpression unannotatedType(boolean allowVar, int termMode) {
-        JCExpression result = term(termMode);
+    public JCExpression unannotatedType(boolean allowVar) {
+        JCExpression result = term(TYPE);
         Name restrictedTypeName = restrictedTypeName(result, !allowVar);
 
         if (restrictedTypeName != null && (!allowVar || restrictedTypeName != names.var)) {
             syntaxError(result.pos, Errors.RestrictedTypeNotAllowedHere(restrictedTypeName));
         }
@@ -976,11 +955,11 @@
             opStack[top] = topOp;
 
             if (token.kind == INSTANCEOF) {
                 int pos = token.pos;
                 nextToken();
-                JCTree pattern = parseTypeSansQuestion();
+                JCTree pattern = parseType();
                 if (token.kind == IDENTIFIER) {
                     checkSourceLevel(token.pos, Feature.PATTERN_MATCHING_IN_INSTANCEOF);
                     pattern = toP(F.at(token.pos).BindingPattern(ident(), pattern));
                 }
                 odStack[top] = F.at(pos).TypeTest(odStack[top], pattern);
@@ -1293,11 +1272,10 @@
             if (typeArgs != null) return illegal();
             if ((mode & EXPR) != 0 && (mode & NOLAMBDA) == 0 && peekToken(ARROW)) {
                 t = lambdaExpressionOrStatement(false, false, pos);
             } else {
                 t = toP(F.at(token.pos).Ident(ident()));
-                handleQuestion(t);
                 loop: while (true) {
                     pos = token.pos;
                     final List<JCAnnotation> annos = typeAnnotationsOpt();
 
                     // need to report an error later if LBRACKET is for array
@@ -1385,11 +1363,10 @@
                         if ((mode & TYPE) != 0 && token.kind == MONKEYS_AT) {
                             tyannos = typeAnnotationsOpt();
                         }
                         // typeArgs saved for next loop iteration.
                         t = toP(F.at(pos).Select(t, ident()));
-                        handleQuestion(t);
                         if (tyannos != null && tyannos.nonEmpty()) {
                             t = toP(F.at(tyannos.head.pos).AnnotatedType(tyannos, t));
                         }
                         break;
                     case ELLIPSIS:
@@ -1499,21 +1476,10 @@
             return illegal();
         }
         return term3Rest(t, typeArgs);
     }
 
-    // where
-        private void handleQuestion(JCExpression t) {
-            if (token.kind == QUES) {
-                if (((mode & NOQUESTION) == 0 && (mode & TYPE) != 0) ||
-                        (peekToken(0, LBRACKET) && peekToken(1, RBRACKET) && peekToken(2, DOT) && peekToken(3, CLASS))) {
-                    t.setQuestioned();
-                    nextToken();
-                }
-            }
-        }
-
     private List<JCCase> switchExpressionStatementGroup() {
         ListBuffer<JCCase> caseExprs = new ListBuffer<>();
         int casePos = token.pos;
         ListBuffer<JCExpression> pats = new ListBuffer<>();
 
@@ -2181,20 +2147,17 @@
             result = toP(F.at(pos).Wildcard(t, null));
         }
         if (!annotations.isEmpty()) {
             result = toP(F.at(annotations.head.pos).AnnotatedType(annotations,result));
         }
-        handleQuestion(result);
         return result;
     }
 
     JCTypeApply typeArguments(JCExpression t, boolean diamondAllowed) {
         int pos = token.pos;
         List<JCExpression> args = typeArguments(diamondAllowed);
-        JCTypeApply ta = toP(F.at(pos).TypeApply(t, args));
-        handleQuestion(ta);
-        return ta;
+        return toP(F.at(pos).TypeApply(t, args));
     }
 
     /**
      * BracketsOpt = { [Annotations] "[" "]" }*
      *
@@ -4231,11 +4194,11 @@
                 if (isVoid) {
                     type = to(F.at(pos).TypeIdent(TypeTag.VOID));
                     nextToken();
                 } else {
                     // method returns types are un-annotated types
-                    type = unannotatedType(false, TYPE);
+                    type = unannotatedType(false);
                 }
                 if ((token.kind == LPAREN && !isInterface ||
                         isRecord && token.kind == LBRACE) && type.hasTag(IDENT)) {
                     if (isInterface || tk.name() != className)
                         log.error(DiagnosticFlag.SYNTAX, pos, Errors.InvalidMethDeclRetTypeReq);
