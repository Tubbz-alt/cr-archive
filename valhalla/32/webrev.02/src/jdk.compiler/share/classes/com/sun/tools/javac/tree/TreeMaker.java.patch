diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java
@@ -807,17 +807,23 @@
                 }
                 tp = TypeIntersection(la.toList());
                 break;
             }
             default: {
-                Type outer = t.getEnclosingType();
-                JCExpression clazz = outer.hasTag(CLASS) && t.tsym.owner.kind == TYP
-                        ? Select(Type(outer), t.tsym)
-                        : QualIdent(t.tsym);
-                tp = t.getTypeArguments().isEmpty()
-                        ? clazz
-                        : TypeApply(clazz, Types(t.getTypeArguments()));
+                if (t.isReferenceProjection()) {
+                    JCFieldAccess f = (JCFieldAccess) Select(Type(t.valueProjection()), t.tsym);
+                    f.name = names.ref;
+                    tp = f;
+                } else {
+                    Type outer = t.getEnclosingType();
+                    JCExpression clazz = outer.hasTag(CLASS) && t.tsym.owner.kind == TYP
+                            ? Select(Type(outer), t.tsym)
+                            : QualIdent(t.tsym);
+                    tp = t.getTypeArguments().isEmpty()
+                            ? clazz
+                            : TypeApply(clazz, Types(t.getTypeArguments()));
+                }
                 break;
             }
             }
             break;
         case ARRAY:
@@ -827,12 +833,10 @@
             tp = TypeIdent(ERROR);
             break;
         default:
             throw new AssertionError("unexpected type: " + t);
         }
-        if (t.tsym.isProjectedNullable())
-            tp.setQuestioned();
         return tp.setType(t);
     }
 
     /** Create a list of trees representing given list of types.
      */
