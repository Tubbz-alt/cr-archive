diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
@@ -93,11 +93,10 @@
     private final Source source;
     private final Target target;
     private final Profile profile;
     private final Preview preview;
     private final boolean warnOnAnyAccessToMembers;
-    private final boolean allowGenericsOverValues;
     private final boolean allowValueBasedClasses;
 
     // The set of lint options currently in effect. It is initialized
     // from the context, and then is set/reset as needed by Attr as it
     // visits all the various parts of the trees during attribution.
@@ -135,11 +134,10 @@
         fileManager = context.get(JavaFileManager.class);
 
         source = Source.instance(context);
         target = Target.instance(context);
         warnOnAnyAccessToMembers = options.isSet("warnOnAccessToMembers");
-        allowGenericsOverValues = options.isSet("allowGenericsOverValues");
         allowValueBasedClasses = options.isSet("allowValueBasedClasses");
         Target target = Target.instance(context);
         syntheticNameChar = target.syntheticNameChar();
 
         profile = Profile.instance(context);
@@ -599,11 +597,12 @@
         if (inferenceContext.free(req) || inferenceContext.free(found)) {
             inferenceContext.addFreeTypeListener(List.of(req, found),
                     solvedContext -> checkType(pos, solvedContext.asInstType(found), solvedContext.asInstType(req), checkContext));
         } else {
             if (found.hasTag(CLASS)) {
-                checkParameterizationWithValues(pos, found);
+                if (inferenceContext != infer.emptyContext)
+                    checkParameterizationWithValues(pos, found);
             }
         }
         if (req.hasTag(ERROR))
             return req;
         if (req.hasTag(NONE))
@@ -860,11 +859,11 @@
      *  @param types         The types to be checked.
      */
     List<Type> checkRefTypes(List<JCExpression> trees, List<Type> types) {
         List<JCExpression> tl = trees;
         for (List<Type> l = types; l.nonEmpty(); l = l.tail) {
-            l.head = checkRefType(tl.head.pos(), l.head, allowGenericsOverValues);
+            l.head = checkRefType(tl.head.pos(), l.head, false);
             tl = tl.tail;
         }
         return types;
     }
 
@@ -897,11 +896,11 @@
         } else
             return true;
     }
 
     void checkParameterizationWithValues(DiagnosticPosition pos, Type t) {
-        if (!allowGenericsOverValues && t.tsym != syms.classType.tsym) { // tolerate Value.class for now.
+        if (t.tsym != syms.classType.tsym) { // tolerate Value.class.
             valueParameterizationChecker.visit(t, pos);
         }
     }
 
     /** valueParameterizationChecker: A type visitor that descends down the given type looking for instances of value types
@@ -915,11 +914,11 @@
         }
 
         @Override
         public Void visitClassType(ClassType t, DiagnosticPosition pos) {
             for (Type targ : t.allparams()) {
-                if (types.isValue(targ) && !allowGenericsOverValues) {
+                if (types.isValue(targ)) {
                     log.error(pos, Errors.GenericParameterizationWithValueType(t));
                 }
                 visit(targ, pos);
             }
             return null;
@@ -2673,15 +2672,20 @@
             for (List<Type> m = supertypes; m != l; m = m.tail)
                 if (!checkCompatibleAbstracts(pos, l.head, m.head, c))
                     return;
         }
         checkCompatibleConcretes(pos, c);
-        boolean isIdentityObject = types.asSuper(c, syms.identityObjectType.tsym) != null;
-        boolean isInlineObject = types.asSuper(c, syms.inlineObjectType.tsym) != null;
-        if (types.isValue(c) && isIdentityObject) {
+
+        /* Check for inline/identity incompatibilities: But first, we may need to switch to the
+           reference universe to make the hierarchy navigable.
+        */
+        Type asRefType = c.isValue() ? c.referenceProjection() : c;
+        boolean isIdentityObject = types.asSuper(asRefType, syms.identityObjectType.tsym) != null;
+        boolean isInlineObject = types.asSuper(asRefType, syms.inlineObjectType.tsym) != null;
+        if (c.isValue() && isIdentityObject) {
             log.error(pos, Errors.InlineTypeMustNotImplementIdentityObject(c));
-        } else if (!c.isInterface() && !types.isValue(c) && isInlineObject) {
+        } else if (!c.isInterface() && !c.tsym.isAbstract() && !c.isValue() && isInlineObject) {
             log.error(pos, Errors.IdentityTypeMustNotImplementInlineObject(c));
         } else if (isIdentityObject && isInlineObject) {
             log.error(pos, Errors.MutuallyIncompatibleInterfaces(c));
         }
     }
