diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/TransValues.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/TransValues.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/TransValues.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/TransValues.java
@@ -27,13 +27,16 @@
 
 import com.sun.tools.javac.code.Flags;
 import com.sun.tools.javac.code.Scope.LookupKind;
 import com.sun.tools.javac.code.Scope.WriteableScope;
 import com.sun.tools.javac.code.Symbol;
+import com.sun.tools.javac.code.Symbol.ClassSymbol;
 import com.sun.tools.javac.code.Symbol.MethodSymbol;
+import com.sun.tools.javac.code.Symbol.TypeSymbol;
 import com.sun.tools.javac.code.Symbol.VarSymbol;
 import com.sun.tools.javac.code.Symtab;
+import com.sun.tools.javac.code.Type.ClassType;
 import com.sun.tools.javac.code.Type.MethodType;
 import com.sun.tools.javac.code.Types;
 import com.sun.tools.javac.tree.JCTree;
 import com.sun.tools.javac.tree.JCTree.JCAssign;
 import com.sun.tools.javac.tree.JCTree.JCClassDecl;
@@ -216,10 +219,20 @@
 
                 MethodSymbol factorySym = getValueFactory(tree.sym);
                 currentMethod.setType(factorySym.type);
                 currentMethod.factoryProduct = product;
                 currentClass.sym.members().remove(tree.sym);
+                ClassSymbol refProjection = currentClass.sym.projection;
+                if (refProjection != null) {
+                    MethodSymbol projection = tree.sym.projection;
+                    Assert.check(projection != null);
+                    refProjection.members().remove(projection);
+                    projection = factorySym.clone(refProjection);
+                    projection.projection = factorySym;
+                    factorySym.projection = projection;
+                    refProjection.members().enter(projection);
+                }
                 tree.sym = factorySym;
                 currentClass.sym.members().enter(factorySym);
                 tree.mods.flags |= STATIC;
 
                 /* We may need an epilogue that returns the value product, but we can't eagerly insert
@@ -311,11 +324,31 @@
                     result = make.Select(facHandle, symbol);
                     return;
                 }
             }
         }
-        super.visitSelect(fieldAccess);
+        // Rewrite any accesses of the form V.ref.member to ((V) V.ref).member
+        fieldAccess.selected = translate(fieldAccess.selected);
+        if (fieldAccess.name != names._class && fieldAccess.name != names._default) {  // TODO: this and super ??
+            Symbol sym = TreeInfo.symbol(fieldAccess);
+            TypeSymbol selectedType = fieldAccess.selected.type.tsym;
+            if (selectedType.isReferenceProjection()) {
+                switch (sym.kind) {
+                    case MTH:
+                    case VAR:
+                        fieldAccess.selected =
+                                make.TypeCast(types.erasure(selectedType.valueProjection().type), fieldAccess.selected);
+                        if (sym.owner.isReferenceProjection()) // is an empty class file.
+                            sym = sym.valueProjection();
+                        break;
+                    case TYP:
+                        fieldAccess.selected = make.Type(types.erasure(selectedType.valueProjection().type));
+                        break;
+                }
+            }
+        }
+        result = fieldAccess;
     }
 
     // Translate a reference style instance creation attempt on a value type to a static factory call.
     @Override
     public void visitNewClass(JCNewClass tree) {
