diff a/src/hotspot/share/ci/ciEnv.cpp b/src/hotspot/share/ci/ciEnv.cpp
--- a/src/hotspot/share/ci/ciEnv.cpp
+++ b/src/hotspot/share/ci/ciEnv.cpp
@@ -467,11 +467,11 @@
   // to be loaded if their element klasses are loaded, except when memory
   // is exhausted.
   if (Signature::is_array(sym) &&
       (sym->char_at(1) == JVM_SIGNATURE_ARRAY ||
        sym->char_at(1) == JVM_SIGNATURE_CLASS ||
-       sym->char_at(1) == JVM_SIGNATURE_VALUETYPE )) {
+       sym->char_at(1) == JVM_SIGNATURE_INLINE_TYPE )) {
     // We have an unloaded array.
     // Build it on the fly if the element class exists.
     SignatureStream ss(sym, false);
     ss.skip_array_prefix(1);
     // Get element ciKlass recursively.
@@ -510,11 +510,11 @@
   // Make a CI representative for it.
   int i = 0;
   while (sym->char_at(i) == JVM_SIGNATURE_ARRAY) {
     i++;
   }
-  if (i > 0 && sym->char_at(i) == JVM_SIGNATURE_VALUETYPE) {
+  if (i > 0 && sym->char_at(i) == JVM_SIGNATURE_INLINE_TYPE) {
     // An unloaded array class of value types is an ObjArrayKlass, an
     // unloaded value type class is an InstanceKlass. For consistency,
     // make the signature of the unloaded array of value type use L
     // rather than Q.
     char *new_name = CURRENT_THREAD_ENV->name_buffer(sym->utf8_length()+1);
