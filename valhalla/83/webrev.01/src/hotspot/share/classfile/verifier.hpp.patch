diff a/src/hotspot/share/classfile/verifier.hpp b/src/hotspot/share/classfile/verifier.hpp
--- a/src/hotspot/share/classfile/verifier.hpp
+++ b/src/hotspot/share/classfile/verifier.hpp
@@ -152,11 +152,11 @@
     STACK_SIZE_MISMATCH,  // Frames have different stack sizes
     STACK_OVERFLOW,       // Attempt to push onto a full expression stack
     STACK_UNDERFLOW,      // Attempt to pop and empty expression stack
     MISSING_STACKMAP,     // No stackmap for this location and there should be
     BAD_STACKMAP,         // Format error in stackmap
-    WRONG_VALUE_TYPE,     // Mismatched value type
+    WRONG_INLINE_TYPE,    // Mismatched inline type
     NO_FAULT,             // No error
     UNKNOWN
   } FaultType;
 
   int _bci;
@@ -216,12 +216,12 @@
     return ErrorContext(bci, MISSING_STACKMAP);
   }
   static ErrorContext bad_stackmap(int index, StackMapFrame* frame) {
     return ErrorContext(0, BAD_STACKMAP, TypeOrigin::frame(frame));
   }
-  static ErrorContext bad_value_type(u2 bci, TypeOrigin type, TypeOrigin exp) {
-    return ErrorContext(bci, WRONG_VALUE_TYPE, type, exp);
+  static ErrorContext bad_inline_type(u2 bci, TypeOrigin type, TypeOrigin exp) {
+    return ErrorContext(bci, WRONG_INLINE_TYPE, type, exp);
   }
 
   bool is_valid() const { return _fault != NO_FAULT; }
   int bci() const { return _bci; }
 
@@ -456,11 +456,11 @@
     Symbol* name = cp->klass_name_at(index);
     if (name->is_Q_signature()) {
       // Remove the Q and ;
       // TBD need error msg if fundamental_name() returns NULL?
       Symbol* fund_name = name->fundamental_name(CHECK_(VerificationType::bogus_type()));
-      return VerificationType::valuetype_type(fund_name);
+      return VerificationType::inlinetype_type(fund_name);
     }
     return VerificationType::reference_type(name);
   }
 
   // Keep a list of temporary symbols created during verification because
@@ -505,11 +505,11 @@
       {
         Symbol* vname = sig_type->as_symbol();
         // Create another symbol to save as signature stream unreferences this symbol.
         Symbol* vname_copy = create_temporary_symbol(vname);
         assert(vname_copy == vname, "symbols don't match");
-        *inference_type = VerificationType::valuetype_type(vname_copy);
+        *inference_type = VerificationType::inlinetype_type(vname_copy);
         return 1;
       }
     case T_LONG:
       *inference_type = VerificationType::long_type();
       *++inference_type = VerificationType::long2_type();
