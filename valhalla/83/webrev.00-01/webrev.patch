diff a/src/hotspot/share/ci/ciEnv.cpp b/src/hotspot/share/ci/ciEnv.cpp
--- a/src/hotspot/share/ci/ciEnv.cpp
+++ b/src/hotspot/share/ci/ciEnv.cpp
@@ -467,11 +467,11 @@
   // to be loaded if their element klasses are loaded, except when memory
   // is exhausted.
   if (Signature::is_array(sym) &&
       (sym->char_at(1) == JVM_SIGNATURE_ARRAY ||
        sym->char_at(1) == JVM_SIGNATURE_CLASS ||
-       sym->char_at(1) == JVM_SIGNATURE_INLINETYPE )) {
+       sym->char_at(1) == JVM_SIGNATURE_INLINE_TYPE )) {
     // We have an unloaded array.
     // Build it on the fly if the element class exists.
     SignatureStream ss(sym, false);
     ss.skip_array_prefix(1);
     // Get element ciKlass recursively.
@@ -510,11 +510,11 @@
   // Make a CI representative for it.
   int i = 0;
   while (sym->char_at(i) == JVM_SIGNATURE_ARRAY) {
     i++;
   }
-  if (i > 0 && sym->char_at(i) == JVM_SIGNATURE_INLINETYPE) {
+  if (i > 0 && sym->char_at(i) == JVM_SIGNATURE_INLINE_TYPE) {
     // An unloaded array class of value types is an ObjArrayKlass, an
     // unloaded value type class is an InstanceKlass. For consistency,
     // make the signature of the unloaded array of value type use L
     // rather than Q.
     char *new_name = CURRENT_THREAD_ENV->name_buffer(sym->utf8_length()+1);
diff a/src/hotspot/share/ci/ciObjArrayKlass.cpp b/src/hotspot/share/ci/ciObjArrayKlass.cpp
--- a/src/hotspot/share/ci/ciObjArrayKlass.cpp
+++ b/src/hotspot/share/ci/ciObjArrayKlass.cpp
@@ -114,11 +114,11 @@
   int pos = 0;
   for ( ; pos < dimension; pos++) {
     name[pos] = JVM_SIGNATURE_ARRAY;
   }
   Symbol* base_name_sym = element_name->get_symbol();
-  assert(base_name_sym->char_at(0) != JVM_SIGNATURE_INLINETYPE, "unloaded array klass element should not have Q-type");
+  assert(base_name_sym->char_at(0) != JVM_SIGNATURE_INLINE_TYPE, "unloaded array klass element should not have Q-type");
   if (Signature::is_array(base_name_sym) ||
       Signature::has_envelope(base_name_sym)) {
     strncpy(&name[pos], (char*)element_name->base(), element_len);
     name[pos + element_len] = '\0';
   } else {
diff a/src/hotspot/share/ci/ciReplay.cpp b/src/hotspot/share/ci/ciReplay.cpp
--- a/src/hotspot/share/ci/ciReplay.cpp
+++ b/src/hotspot/share/ci/ciReplay.cpp
@@ -910,11 +910,11 @@
         } else if (field_signature[0] == JVM_SIGNATURE_ARRAY &&
                    field_signature[1] == JVM_SIGNATURE_CLASS) {
           Klass* kelem = resolve_klass(field_signature + 1, CHECK_(true));
           value = oopFactory::new_objArray(kelem, length, CHECK_(true));
         } else if (field_signature[0] == JVM_SIGNATURE_ARRAY &&
-                   field_signature[1] == JVM_SIGNATURE_INLINETYPE) {
+                   field_signature[1] == JVM_SIGNATURE_INLINE_TYPE) {
           Klass* kelem = resolve_klass(field_signature + 1, CHECK_(true));
           value = oopFactory::new_valueArray(kelem, length, CHECK_(true));
         } else {
           report_error("unhandled array staticfield");
         }
@@ -997,11 +997,11 @@
       java_mirror->float_field_put(fd.offset(), value);
     } else if (strcmp(field_signature, "D") == 0) {
       const char* string_value = parse_escaped_string();
       double value = atof(string_value);
       java_mirror->double_field_put(fd.offset(), value);
-    } else if (field_signature[0] == JVM_SIGNATURE_INLINETYPE) {
+    } else if (field_signature[0] == JVM_SIGNATURE_INLINE_TYPE) {
       Klass* kelem = resolve_klass(field_signature, CHECK);
       ValueKlass* vk = ValueKlass::cast(kelem);
       oop value = vk->allocate_instance(CHECK);
       ValueTypeFieldInitializer init_fields(value, this);
       vk->do_nonstatic_fields(&init_fields);
diff a/src/hotspot/share/ci/ciValueArrayKlass.cpp b/src/hotspot/share/ci/ciValueArrayKlass.cpp
--- a/src/hotspot/share/ci/ciValueArrayKlass.cpp
+++ b/src/hotspot/share/ci/ciValueArrayKlass.cpp
@@ -112,11 +112,11 @@
     name = CURRENT_THREAD_ENV->name_buffer(new_len);
     int pos = 0;
     for ( ; pos < dimension; pos++) {
       name[pos] = JVM_SIGNATURE_ARRAY;
     }
-    name[pos++] = JVM_SIGNATURE_INLINETYPE;
+    name[pos++] = JVM_SIGNATURE_INLINE_TYPE;
     strncpy(name+pos, (char*)element_name->base(), element_len);
     name[new_len-2] = JVM_SIGNATURE_ENDCLASS;
     name[new_len-1] = '\0';
   }
   return ciSymbol::make(name);
diff a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -5766,11 +5766,11 @@
     case JVM_SIGNATURE_INT:
     case JVM_SIGNATURE_FLOAT:
     case JVM_SIGNATURE_LONG:
     case JVM_SIGNATURE_DOUBLE:
       return signature + 1;
-    case JVM_SIGNATURE_INLINETYPE:
+    case JVM_SIGNATURE_INLINE_TYPE:
       // Can't enable this check until JDK upgrades the bytecode generators
       // if (_major_version < CONSTANT_CLASS_DESCRIPTORS ) {
       //   classfile_parse_error("Class name contains illegal Q-signature "
       //                                    "in descriptor in class file %s",
       //                                    CHECK_0);
diff a/src/hotspot/share/classfile/classLoader.cpp b/src/hotspot/share/classfile/classLoader.cpp
--- a/src/hotspot/share/classfile/classLoader.cpp
+++ b/src/hotspot/share/classfile/classLoader.cpp
@@ -200,11 +200,11 @@
 
     // Fully qualified class names should not contain a 'L'.
     // Set bad_class_name to true to indicate that the package name
     // could not be obtained due to an error condition.
     // In this situation, is_same_class_package returns false.
-    if (*start == JVM_SIGNATURE_CLASS || *start == JVM_SIGNATURE_INLINETYPE) {
+    if (*start == JVM_SIGNATURE_CLASS || *start == JVM_SIGNATURE_INLINE_TYPE) {
       if (bad_class_name != NULL) {
         *bad_class_name = true;
       }
       return NULL;
     }
diff a/src/hotspot/share/classfile/verificationType.hpp b/src/hotspot/share/classfile/verificationType.hpp
--- a/src/hotspot/share/classfile/verificationType.hpp
+++ b/src/hotspot/share/classfile/verificationType.hpp
@@ -240,11 +240,11 @@
   bool is_long_array() const { return is_x_array(JVM_SIGNATURE_LONG); }
   bool is_float_array() const { return is_x_array(JVM_SIGNATURE_FLOAT); }
   bool is_double_array() const { return is_x_array(JVM_SIGNATURE_DOUBLE); }
   bool is_object_array() const { return is_x_array(JVM_SIGNATURE_CLASS); }
   bool is_array_array() const { return is_x_array(JVM_SIGNATURE_ARRAY); }
-  bool is_inline_array() const { return is_x_array(JVM_SIGNATURE_INLINETYPE); }
+  bool is_inline_array() const { return is_x_array(JVM_SIGNATURE_INLINE_TYPE); }
   bool is_reference_array() const
     { return is_object_array() || is_array_array(); }
   bool is_nonscalar_array() const
     { return is_object_array() || is_array_array() || is_inline_array(); }
   bool is_object() const
diff a/src/hotspot/share/classfile/verifier.cpp b/src/hotspot/share/classfile/verifier.cpp
--- a/src/hotspot/share/classfile/verifier.cpp
+++ b/src/hotspot/share/classfile/verifier.cpp
@@ -58,11 +58,11 @@
 #include "utilities/bytes.hpp"
 
 #define NOFAILOVER_MAJOR_VERSION                       51
 #define NONZERO_PADDING_BYTES_IN_SWITCH_MAJOR_VERSION  51
 #define STATIC_METHOD_IN_INTERFACE_MAJOR_VERSION       52
-#define INLINETYPE_MAJOR_VERSION                       56
+#define INLINE_TYPE_MAJOR_VERSION                       56
 #define MAX_ARRAY_DIMENSIONS 255
 
 // Access to external entry for VerifyClassForMajorVersion - old byte code verifier
 
 extern "C" {
@@ -1706,11 +1706,11 @@
           // pass FALSE, operand can't be an array type for getfield/putfield.
           verify_field_instructions(
             &bcs, &current_frame, cp, false, CHECK_VERIFY(this));
           no_control_flow = false; break;
         case Bytecodes::_withfield :
-          if (_klass->major_version() < INLINETYPE_MAJOR_VERSION) {
+          if (_klass->major_version() < INLINE_TYPE_MAJOR_VERSION) {
             class_format_error(
               "withfield not supported by this class file version (%d.%d), class %s",
               _klass->major_version(), _klass->minor_version(), _klass->external_name());
             return;
           }
@@ -1743,11 +1743,11 @@
           current_frame.push_stack(type, CHECK_VERIFY(this));
           no_control_flow = false; break;
         }
         case Bytecodes::_defaultvalue :
         {
-          if (_klass->major_version() < INLINETYPE_MAJOR_VERSION) {
+          if (_klass->major_version() < INLINE_TYPE_MAJOR_VERSION) {
             class_format_error(
               "defaultvalue not supported by this class file version (%d.%d), class %s",
               _klass->major_version(), _klass->minor_version(), _klass->external_name());
             return;
           }
@@ -3117,11 +3117,11 @@
     int n = os::snprintf(arr_sig_str, length + 1, "%c%s",
                          JVM_SIGNATURE_ARRAY, component_name);
     assert(n == length, "Unexpected number of characters in string");
   } else {         // it's an object or interface
     const char* component_name = component_type.name()->as_utf8();
-    char Q_or_L = component_type.is_inlinetype() ? JVM_SIGNATURE_INLINETYPE : JVM_SIGNATURE_CLASS;
+    char Q_or_L = component_type.is_inlinetype() ? JVM_SIGNATURE_INLINE_TYPE : JVM_SIGNATURE_CLASS;
     // add one dimension to component with 'L' or 'Q' prepended and ';' appended.
     length = (int)strlen(component_name) + 3;
     arr_sig_str = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, char, length + 1);
     int n = os::snprintf(arr_sig_str, length + 1, "%c%c%s;",
                          JVM_SIGNATURE_ARRAY, Q_or_L, component_name);
diff a/src/hotspot/share/interpreter/interpreterRuntime.cpp b/src/hotspot/share/interpreter/interpreterRuntime.cpp
--- a/src/hotspot/share/interpreter/interpreterRuntime.cpp
+++ b/src/hotspot/share/interpreter/interpreterRuntime.cpp
@@ -1509,11 +1509,11 @@
     default:  ShouldNotReachHere(); return;
   }
 
   // Both Q-signatures and L-signatures are mapped to atos
   if (cp_entry->flag_state() == atos && ik->field_signature(index)->is_Q_signature()) {
-    sig_type = JVM_SIGNATURE_INLINETYPE;
+    sig_type = JVM_SIGNATURE_INLINE_TYPE;
   }
 
   bool is_static = (obj == NULL);
   bool is_inlined = cp_entry->is_inlined();
 
diff a/src/hotspot/share/oops/arrayKlass.cpp b/src/hotspot/share/oops/arrayKlass.cpp
--- a/src/hotspot/share/oops/arrayKlass.cpp
+++ b/src/hotspot/share/oops/arrayKlass.cpp
@@ -108,11 +108,11 @@
   char *new_str = NEW_RESOURCE_ARRAY(char, len + 4);
   int idx = 0;
   new_str[idx++] = JVM_SIGNATURE_ARRAY;
   if (element_klass->is_instance_klass()) { // it could be an array or simple type
     if (is_qtype) {
-      new_str[idx++] = JVM_SIGNATURE_INLINETYPE;
+      new_str[idx++] = JVM_SIGNATURE_INLINE_TYPE;
     } else {
       new_str[idx++] = JVM_SIGNATURE_CLASS;
     }
   }
   memcpy(&new_str[idx], name_str, len * sizeof(char));
diff a/src/hotspot/share/oops/instanceKlass.cpp b/src/hotspot/share/oops/instanceKlass.cpp
--- a/src/hotspot/share/oops/instanceKlass.cpp
+++ b/src/hotspot/share/oops/instanceKlass.cpp
@@ -2891,11 +2891,11 @@
 
   char* dest = NEW_RESOURCE_ARRAY(char, src_length + hash_len + 3);
 
   // Add L or Q as type indicator
   int dest_index = 0;
-  dest[dest_index++] = is_value() ? JVM_SIGNATURE_INLINETYPE : JVM_SIGNATURE_CLASS;
+  dest[dest_index++] = is_value() ? JVM_SIGNATURE_INLINE_TYPE : JVM_SIGNATURE_CLASS;
 
   // Add the actual class name
   for (int src_index = 0; src_index < src_length; ) {
     dest[dest_index++] = src[src_index++];
   }
diff a/src/hotspot/share/oops/symbol.cpp b/src/hotspot/share/oops/symbol.cpp
--- a/src/hotspot/share/oops/symbol.cpp
+++ b/src/hotspot/share/oops/symbol.cpp
@@ -105,21 +105,21 @@
 }
 #endif
 
 bool Symbol::is_Q_signature() const {
   int len = utf8_length();
-  return len > 2 && char_at(0) == JVM_SIGNATURE_INLINETYPE && char_at(len - 1) == JVM_SIGNATURE_ENDCLASS;
+  return len > 2 && char_at(0) == JVM_SIGNATURE_INLINE_TYPE && char_at(len - 1) == JVM_SIGNATURE_ENDCLASS;
 }
 
 bool Symbol::is_Q_array_signature() const {
   int l = utf8_length();
   if (l < 2 || char_at(0) != JVM_SIGNATURE_ARRAY || char_at(l - 1) != JVM_SIGNATURE_ENDCLASS) {
     return false;
   }
   for (int i = 1; i < (l - 2); i++) {
     char c = char_at(i);
-    if (c == JVM_SIGNATURE_INLINETYPE) {
+    if (c == JVM_SIGNATURE_INLINE_TYPE) {
       return true;
     }
     if (c != JVM_SIGNATURE_ARRAY) {
       return false;
     }
@@ -130,26 +130,26 @@
 bool Symbol::is_Q_method_signature() const {
   assert(SignatureVerifier::is_valid_method_signature(this), "must be");
   int len = utf8_length();
   if (len > 4 && char_at(0) == JVM_SIGNATURE_FUNC) {
     for (int i=1; i<len-3; i++) { // Must end with ")Qx;", where x is at least one character or more.
-      if (char_at(i) == JVM_SIGNATURE_ENDFUNC && char_at(i+1) == JVM_SIGNATURE_INLINETYPE) {
+      if (char_at(i) == JVM_SIGNATURE_ENDFUNC && char_at(i+1) == JVM_SIGNATURE_INLINE_TYPE) {
         return true;
       }
     }
   }
   return false;
 }
 
 bool Symbol::is_Q_singledim_array_signature() const {
   int len = utf8_length();
-  return len > 3 && char_at(0) == JVM_SIGNATURE_ARRAY && char_at(1) == JVM_SIGNATURE_INLINETYPE &&
+  return len > 3 && char_at(0) == JVM_SIGNATURE_ARRAY && char_at(1) == JVM_SIGNATURE_INLINE_TYPE &&
                     char_at(len - 1) == JVM_SIGNATURE_ENDCLASS;
 }
 
 Symbol* Symbol::fundamental_name(TRAPS) {
-  if ((char_at(0) == JVM_SIGNATURE_INLINETYPE || char_at(0) == JVM_SIGNATURE_CLASS) && ends_with(JVM_SIGNATURE_ENDCLASS)) {
+  if ((char_at(0) == JVM_SIGNATURE_INLINE_TYPE || char_at(0) == JVM_SIGNATURE_CLASS) && ends_with(JVM_SIGNATURE_ENDCLASS)) {
     return SymbolTable::new_symbol(this, 1, utf8_length() - 1);
   } else {
     // reference count is incremented to be consistent with the behavior with
     // the SymbolTable::new_symbol() call above
     this->increment_refcount();
@@ -160,19 +160,19 @@
 bool Symbol::is_same_fundamental_type(Symbol* s) const {
   if (this == s) return true;
   if (utf8_length() < 3) return false;
   int offset1, offset2, len;
   if (ends_with(JVM_SIGNATURE_ENDCLASS)) {
-    if (char_at(0) != JVM_SIGNATURE_INLINETYPE && char_at(0) != JVM_SIGNATURE_CLASS) return false;
+    if (char_at(0) != JVM_SIGNATURE_INLINE_TYPE && char_at(0) != JVM_SIGNATURE_CLASS) return false;
     offset1 = 1;
     len = utf8_length() - 2;
   } else {
     offset1 = 0;
     len = utf8_length();
   }
   if (ends_with(JVM_SIGNATURE_ENDCLASS)) {
-    if (s->char_at(0) != JVM_SIGNATURE_INLINETYPE && s->char_at(0) != JVM_SIGNATURE_CLASS) return false;
+    if (s->char_at(0) != JVM_SIGNATURE_INLINE_TYPE && s->char_at(0) != JVM_SIGNATURE_CLASS) return false;
     offset2 = 1;
   } else {
     offset2 = 0;
   }
   if ((offset2 + len) > s->utf8_length()) return false;
diff a/src/hotspot/share/prims/jvmtiImpl.cpp b/src/hotspot/share/prims/jvmtiImpl.cpp
--- a/src/hotspot/share/prims/jvmtiImpl.cpp
+++ b/src/hotspot/share/prims/jvmtiImpl.cpp
@@ -511,11 +511,11 @@
   assert(thread != NULL, "thread must not be NULL");
   assert(klass != NULL, "klass must not be NULL");
 
   int len = (int) strlen(ty_sign);
   if ((ty_sign[0] == JVM_SIGNATURE_CLASS ||
-       ty_sign[0] == JVM_SIGNATURE_INLINETYPE) &&
+       ty_sign[0] == JVM_SIGNATURE_INLINE_TYPE) &&
       ty_sign[len-1] == JVM_SIGNATURE_ENDCLASS) { // Need pure class/interface name
     ty_sign++;
     len -= 2;
   }
   TempNewSymbol ty_sym = SymbolTable::new_symbol(ty_sign, len);
diff a/src/hotspot/share/runtime/signature.cpp b/src/hotspot/share/runtime/signature.cpp
--- a/src/hotspot/share/runtime/signature.cpp
+++ b/src/hotspot/share/runtime/signature.cpp
@@ -296,11 +296,11 @@
   case JVM_SIGNATURE_SHORT:
   case JVM_SIGNATURE_BOOLEAN:
     // If it is an array, the type is the last character
     return (i + 1 == len);
   case JVM_SIGNATURE_CLASS:
-  case JVM_SIGNATURE_INLINETYPE:
+  case JVM_SIGNATURE_INLINE_TYPE:
     // If it is an object, the last character must be a ';'
     return sig->char_at(len - 1) == JVM_SIGNATURE_ENDCLASS;
   }
   return false;
 }
@@ -546,11 +546,11 @@
     case JVM_SIGNATURE_LONG:
     case JVM_SIGNATURE_SHORT:
     case JVM_SIGNATURE_BOOLEAN:
     case JVM_SIGNATURE_VOID:
       return index + 1;
-    case JVM_SIGNATURE_INLINETYPE: // fall through
+    case JVM_SIGNATURE_INLINE_TYPE: // fall through
     case JVM_SIGNATURE_CLASS:
       for (index = index + 1; index < limit; ++index) {
         char c = type[index];
         switch (c) {
           case JVM_SIGNATURE_ENDCLASS:
diff a/src/hotspot/share/runtime/signature.hpp b/src/hotspot/share/runtime/signature.hpp
--- a/src/hotspot/share/runtime/signature.hpp
+++ b/src/hotspot/share/runtime/signature.hpp
@@ -122,11 +122,11 @@
   }
 
   // Determine if this signature char introduces an
   // envelope, which is a class name plus ';'.
   static bool has_envelope(char signature_char) {
-    return (signature_char == JVM_SIGNATURE_CLASS) || (signature_char == JVM_SIGNATURE_INLINETYPE);
+    return (signature_char == JVM_SIGNATURE_CLASS) || (signature_char == JVM_SIGNATURE_INLINE_TYPE);
   }
 
   // Assuming has_envelope is true, return the symbol
   // inside the envelope, by stripping 'L' and ';'.
   // Caller is responsible for decrementing the newly created
diff a/src/hotspot/share/utilities/globalDefinitions.cpp b/src/hotspot/share/utilities/globalDefinitions.cpp
--- a/src/hotspot/share/utilities/globalDefinitions.cpp
+++ b/src/hotspot/share/utilities/globalDefinitions.cpp
@@ -204,11 +204,11 @@
   JVM_SIGNATURE_BOOLEAN, JVM_SIGNATURE_CHAR,
   JVM_SIGNATURE_FLOAT,   JVM_SIGNATURE_DOUBLE,
   JVM_SIGNATURE_BYTE,    JVM_SIGNATURE_SHORT,
   JVM_SIGNATURE_INT,     JVM_SIGNATURE_LONG,
   JVM_SIGNATURE_CLASS,   JVM_SIGNATURE_ARRAY,
-  JVM_SIGNATURE_INLINETYPE, JVM_SIGNATURE_VOID,
+  JVM_SIGNATURE_INLINE_TYPE, JVM_SIGNATURE_VOID,
   0, 0, 0, 0, 0
 };
 
 // Map BasicType to Java type name
 const char* type2name_tab[T_CONFLICT+1] = {
@@ -221,11 +221,11 @@
   "short",
   "int",
   "long",
   "object",
   "array",
-  "valuetype",
+  "inline_type",
   "void",
   "*address*",
   "*narrowoop*",
   "*metadata*",
   "*narrowklass*",
diff a/src/hotspot/share/utilities/globalDefinitions.hpp b/src/hotspot/share/utilities/globalDefinitions.hpp
--- a/src/hotspot/share/utilities/globalDefinitions.hpp
+++ b/src/hotspot/share/utilities/globalDefinitions.hpp
@@ -644,11 +644,11 @@
     F(JVM_SIGNATURE_SHORT,   T_SHORT,   N)      \
     F(JVM_SIGNATURE_INT,     T_INT,     N)      \
     F(JVM_SIGNATURE_LONG,    T_LONG,    N)      \
     F(JVM_SIGNATURE_CLASS,   T_OBJECT,  N)      \
     F(JVM_SIGNATURE_ARRAY,   T_ARRAY,   N)      \
-    F(JVM_SIGNATURE_INLINETYPE, T_VALUETYPE, N) \
+    F(JVM_SIGNATURE_INLINE_TYPE, T_VALUETYPE, N) \
     F(JVM_SIGNATURE_VOID,    T_VOID,    N)      \
     /*end*/
 
 inline bool is_java_type(BasicType t) {
   return T_BOOLEAN <= t && t <= T_VOID;
diff a/src/java.base/share/native/include/classfile_constants.h.template b/src/java.base/share/native/include/classfile_constants.h.template
--- a/src/java.base/share/native/include/classfile_constants.h.template
+++ b/src/java.base/share/native/include/classfile_constants.h.template
@@ -151,11 +151,11 @@
     JVM_SIGNATURE_ENDSPECIAL    = '>',
     JVM_SIGNATURE_ARRAY         = '[',
     JVM_SIGNATURE_BYTE          = 'B',
     JVM_SIGNATURE_CHAR          = 'C',
     JVM_SIGNATURE_CLASS         = 'L',
-    JVM_SIGNATURE_INLINETYPE    = 'Q',
+    JVM_SIGNATURE_INLINE_TYPE   = 'Q',
     JVM_SIGNATURE_ENDCLASS      = ';',
     JVM_SIGNATURE_ENUM          = 'E',
     JVM_SIGNATURE_FLOAT         = 'F',
     JVM_SIGNATURE_DOUBLE        = 'D',
     JVM_SIGNATURE_FUNC          = '(',
diff a/src/java.base/share/native/libjava/check_classname.c b/src/java.base/share/native/libjava/check_classname.c
--- a/src/java.base/share/native/libjava/check_classname.c
+++ b/src/java.base/share/native/libjava/check_classname.c
@@ -193,11 +193,11 @@
             case JVM_SIGNATURE_LONG:
             case JVM_SIGNATURE_DOUBLE:
                 return name + 1;
 
             case JVM_SIGNATURE_CLASS:
-            case JVM_SIGNATURE_INLINETYPE: {
+            case JVM_SIGNATURE_INLINE_TYPE: {
                 /* Skip over the classname, if one is there. */
                 char *p =
                     skip_over_fieldname(name + 1, JNI_TRUE, --length);
                 /* The next character better be a semicolon. */
                 if (p && p - name - 1 > 0 && p[0] == ';')
diff a/src/java.base/share/native/libverify/check_code.c b/src/java.base/share/native/libverify/check_code.c
--- a/src/java.base/share/native/libverify/check_code.c
+++ b/src/java.base/share/native/libverify/check_code.c
@@ -3721,17 +3721,17 @@
           case JVM_SIGNATURE_DOUBLE:
           case JVM_SIGNATURE_LONG:
           case JVM_SIGNATURE_FUNC:  /* ignore initial (, if given */
             break;
           case JVM_SIGNATURE_CLASS:
-          case JVM_SIGNATURE_INLINETYPE:
+          case JVM_SIGNATURE_INLINE_TYPE:
             while (*p != JVM_SIGNATURE_ENDCLASS) p++;
             break;
           case JVM_SIGNATURE_ARRAY:
             while (*p == JVM_SIGNATURE_ARRAY) p++;
             /* If an array of classes, skip over class name, too. */
-            if (*p == JVM_SIGNATURE_CLASS || *p == JVM_SIGNATURE_INLINETYPE) {
+            if (*p == JVM_SIGNATURE_CLASS || *p == JVM_SIGNATURE_INLINE_TYPE) {
                 while (*p != JVM_SIGNATURE_ENDCLASS) p++;
             }
             break;
           default:
             /* Indicate an error. */
@@ -3807,11 +3807,11 @@
             case JVM_SIGNATURE_ARRAY:
                 array_depth++;
                 continue;       /* only time we ever do the loop > 1 */
 
             case JVM_SIGNATURE_CLASS:
-            case JVM_SIGNATURE_INLINETYPE: {
+            case JVM_SIGNATURE_INLINE_TYPE: {
                 char buffer_space[256];
                 char *buffer = buffer_space;
                 char *finish = strchr(p, JVM_SIGNATURE_ENDCLASS);
                 int length;
                 if (finish == NULL) {
@@ -4190,19 +4190,19 @@
           case JVM_SIGNATURE_INT:
           case JVM_SIGNATURE_FLOAT:
             args_size += 1;
             break;
           case JVM_SIGNATURE_CLASS:
-          case JVM_SIGNATURE_INLINETYPE:
+          case JVM_SIGNATURE_INLINE_TYPE:
             args_size += 1;
             while (*p != JVM_SIGNATURE_ENDCLASS) p++;
             break;
           case JVM_SIGNATURE_ARRAY:
             args_size += 1;
             while ((*p == JVM_SIGNATURE_ARRAY)) p++;
             /* If an array of classes, skip over class name, too. */
-            if (*p == JVM_SIGNATURE_CLASS || *p == JVM_SIGNATURE_INLINETYPE) {
+            if (*p == JVM_SIGNATURE_CLASS || *p == JVM_SIGNATURE_INLINE_TYPE) {
                 while (*p != JVM_SIGNATURE_ENDCLASS)
                   p++;
             }
             break;
           case JVM_SIGNATURE_DOUBLE:
