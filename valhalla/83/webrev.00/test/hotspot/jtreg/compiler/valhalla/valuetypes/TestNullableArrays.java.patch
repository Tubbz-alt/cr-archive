diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNullableArrays.java b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNullableArrays.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNullableArrays.java
+++ b/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNullableArrays.java
@@ -27,11 +27,11 @@
 import java.lang.reflect.Method;
 import java.util.Arrays;
 
 /*
  * @test
- * @summary Test nullable value type arrays
+ * @summary Test nullable inline type arrays
  * @library /testlibrary /test/lib /compiler/whitebox /
  * @requires (os.simpleArch == "x64" | os.simpleArch == "aarch64")
  * @compile TestNullableArrays.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform
  * @run main/othervm/timeout=300 -Xbootclasspath/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions
@@ -75,13 +75,13 @@
         return MyValue1.createWithFieldsInline(x, y).hash();
     }
 
     private static final MyValue1 testValue1 = MyValue1.createWithFieldsInline(rI, rL);
 
-    // Test nullable value type array creation and initialization
-    @Test(valid = ValueTypeArrayFlattenOn, match = { ALLOCA }, matchCount = { 1 })
-    @Test(valid = ValueTypeArrayFlattenOff, match = { ALLOCA }, matchCount = { 1 }, failOn = LOAD)
+    // Test nullable inline type array creation and initialization
+    @Test(valid = InlineTypeArrayFlattenOn, match = { ALLOCA }, matchCount = { 1 })
+    @Test(valid = InlineTypeArrayFlattenOff, match = { ALLOCA }, matchCount = { 1 }, failOn = LOAD)
     public MyValue1.ref[] test1(int len) {
         MyValue1.ref[] va = new MyValue1.ref[len];
         if (len > 0) {
             va[0] = null;
         }
@@ -101,11 +101,11 @@
         for (int i = 1; i < len; ++i) {
             Asserts.assertEQ(va[i].hash(), hash());
         }
     }
 
-    // Test creation of a value type array and element access
+    // Test creation of a inline type array and element access
     @Test
     // TODO 8227588
     // @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
     public long test2() {
         MyValue1.ref[] va = new MyValue1.ref[1];
@@ -117,11 +117,11 @@
     public void test2_verifier(boolean warmup) {
         long result = test2();
         Asserts.assertEQ(result, hash());
     }
 
-    // Test receiving a value type array from the interpreter,
+    // Test receiving a inline type array from the interpreter,
     // updating its elements in a loop and computing a hash.
     @Test(failOn = ALLOCA)
     public long test3(MyValue1.ref[] va) {
         long result = 0;
         for (int i = 0; i < 10; ++i) {
@@ -150,11 +150,11 @@
                 Asserts.assertEQ(va[i].hash(), hash(rI + 1, rL + 1));
             }
         }
     }
 
-    // Test returning a value type array received from the interpreter
+    // Test returning an inline type array received from the interpreter
     @Test(failOn = ALLOC + ALLOCA + LOAD + STORE + LOOP + TRAP)
     public MyValue1.ref[] test4(MyValue1.ref[] va) {
         return va;
     }
 
@@ -168,11 +168,11 @@
         for (int i = 0; i < 10; ++i) {
             Asserts.assertEQ(va[i].hash(), hash(rI + i, rL + i));
         }
     }
 
-    // Merge value type arrays created from two branches
+    // Merge inline type arrays created from two branches
     @Test
     public MyValue1.ref[] test5(boolean b) {
         MyValue1.ref[] va;
         if (b) {
             va = new MyValue1.ref[5];
@@ -212,11 +212,11 @@
             Asserts.assertEQ(va[i].hash(), hash(rI + i, rL + i));
         }
         Asserts.assertEQ(va[9], null);
     }
 
-    // Test creation of value type array with single element
+    // Test creation of inline type array with single element
     @Test(failOn = ALLOC + ALLOCA + LOOP + LOAD + STORE + TRAP)
     public MyValue1.ref test6() {
         MyValue1.ref[] va = new MyValue1.ref[1];
         return va[0];
     }
@@ -226,11 +226,11 @@
         MyValue1.ref[] va = new MyValue1.ref[1];
         MyValue1.ref v = test6();
         Asserts.assertEQ(v, null);
     }
 
-    // Test default initialization of value type arrays
+    // Test default initialization of inline type arrays
     @Test(failOn = LOAD)
     public MyValue1.ref[] test7(int len) {
         return new MyValue1.ref[len];
     }
 
@@ -242,11 +242,11 @@
             Asserts.assertEQ(va[i], null);
             va[i] = null;
         }
     }
 
-    // Test creation of value type array with zero length
+    // Test creation of inline type array with zero length
     @Test(failOn = ALLOC + LOAD + STORE + LOOP + TRAP)
     public MyValue1.ref[] test8() {
         return new MyValue1.ref[0];
     }
 
@@ -256,11 +256,11 @@
         Asserts.assertEQ(va.length, 0);
     }
 
     static MyValue1.ref[] test9_va;
 
-    // Test that value type array loaded from field has correct type
+    // Test that inline type array loaded from field has correct type
     @Test(failOn = LOOP)
     public long test9() {
         return test9_va[0].hash();
     }
 
@@ -544,11 +544,11 @@
         for (int i = 1; i < test19_orig.length; ++i) {
             Asserts.assertEQ(result[i].hash(), test19_orig[i].hash());
         }
     }
 
-    // arraycopy() of value type array with oop fields
+    // arraycopy() of inline type array with oop fields
     @Test
     public void test20(MyValue1.ref[] src, MyValue1.ref[] dst) {
         System.arraycopy(src, 0, dst, 0, src.length);
     }
 
@@ -588,11 +588,11 @@
             Asserts.assertEQ(src3[i].hash(), dst3[i].hash());
             Asserts.assertEQ(src4[i].hash(), dst4[i].hash());
         }
     }
 
-    // arraycopy() of value type array with no oop field
+    // arraycopy() of inline type array with no oop field
     @Test
     public void test21(MyValue2.ref[] src, MyValue2.ref[] dst) {
         System.arraycopy(src, 0, dst, 0, src.length);
     }
 
@@ -632,11 +632,11 @@
             Asserts.assertEQ(src3[i].hash(), dst3[i].hash());
             Asserts.assertEQ(src4[i].hash(), dst4[i].hash());
         }
     }
 
-    // arraycopy() of value type array with oop field and tightly
+    // arraycopy() of inline type array with oop field and tightly
     // coupled allocation as dest
     @Test
     public MyValue1.ref[] test22(MyValue1.ref[] src) {
         MyValue1.ref[] dst = new MyValue1.ref[src.length];
         System.arraycopy(src, 0, dst, 0, src.length);
@@ -662,11 +662,11 @@
             Asserts.assertEQ(src1[i].hash(), dst1[i].hash());
             Asserts.assertEQ(src2[i].hash(), dst2[i].hash());
         }
     }
 
-    // arraycopy() of value type array with oop fields and tightly
+    // arraycopy() of inline type array with oop fields and tightly
     // coupled allocation as dest
     @Test
     public MyValue1.ref[] test23(MyValue1.ref[] src) {
         MyValue1.ref[] dst = new MyValue1.ref[src.length + 10];
         System.arraycopy(src, 0, dst, 5, src.length);
@@ -692,11 +692,11 @@
             Asserts.assertEQ(src1[i].hash(), dst1[i].hash());
             Asserts.assertEQ(src2[i].hash(), dst2[i].hash());
         }
     }
 
-    // arraycopy() of value type array passed as Object
+    // arraycopy() of inline type array passed as Object
     @Test
     public void test24(MyValue1.ref[] src, Object dst) {
         System.arraycopy(src, 0, dst, 0, src.length);
     }
 
@@ -892,11 +892,11 @@
         MyValue2.ref v = test29(src);
         Asserts.assertEQ(src[0].hash(), v.hash());
     }
 
     // non escaping allocation with uncommon trap that needs
-    // eliminated value type array element as debug info
+    // eliminated inline type array element as debug info
     @Test
     @Warmup(10000)
     public MyValue2.ref test30(MyValue2.ref[] src, boolean flag) {
         MyValue2.ref[] dst = new MyValue2.ref[10];
         System.arraycopy(src, 0, dst, 0, 10);
@@ -1077,21 +1077,21 @@
 
     static boolean compile_and_run_again_if_deoptimized(boolean warmup, String test) {
         if (!warmup) {
             Method m = tests.get(test);
             if (USE_COMPILER &&  !WHITE_BOX.isMethodCompiled(m, false)) {
-                if (!ValueTypeArrayFlatten && !XCOMP && !STRESS_CC) {
+                if (!InlineTypeArrayFlatten && !XCOMP && !STRESS_CC) {
                     throw new RuntimeException("Unexpected deoptimization");
                 }
                 enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);
                 return true;
             }
         }
         return false;
     }
 
-    // arraycopy() of value type array of unknown size
+    // arraycopy() of inline type array of unknown size
     @Test
     public void test35(Object src, Object dst, int len) {
         System.arraycopy(src, 0, dst, 0, len);
     }
 
@@ -1709,11 +1709,11 @@
         test63_helper(42, va, oa);
         Object[] result = test63(va, oa);
         verify(verif, result);
     }
 
-    // Test default initialization of value type arrays: small array
+    // Test default initialization of inline type arrays: small array
     @Test
     public MyValue1.ref[] test64() {
         return new MyValue1.ref[8];
     }
 
@@ -1723,11 +1723,11 @@
         for (int i = 0; i < 8; ++i) {
             Asserts.assertEQ(va[i], null);
         }
     }
 
-    // Test default initialization of value type arrays: large array
+    // Test default initialization of inline type arrays: large array
     @Test
     public MyValue1.ref[] test65() {
         return new MyValue1.ref[32];
     }
 
@@ -2056,11 +2056,11 @@
         for (int i = 1; i < 10; ++i) {
             Asserts.assertEQ(((MyValue1)va[i]).hash(), hash(rI + i, rL + i));
         }
     }
 
-    // Same as test76 but with non value type array cases
+    // Same as test76 but with non inline type array cases
     @Test
     public Object[] test78(MyValue1[] vva, MyValue1.ref[] vba, Object val, Object[] out, int n) {
         Object[] result = null;
         if (n == 0) {
             result = vva;
@@ -2241,12 +2241,12 @@
         va[0] = testValue1;
         long res = test83(va);
         Asserts.assertEquals(res, testValue1.hash());
     }
 
-    @Test(valid = ValueTypeArrayFlattenOn, failOn = ALLOC + LOOP + STORE + TRAP)
-    @Test(valid = ValueTypeArrayFlattenOff)
+    @Test(valid = InlineTypeArrayFlattenOn, failOn = ALLOC + LOOP + STORE + TRAP)
+    @Test(valid = InlineTypeArrayFlattenOff)
     public static MyValue1.ref[] test84(MyValue1 vt1, MyValue1.ref vt2) {
         MyValue1.ref[] result = new MyValue1[2];
         result[0] = vt1;
         result[1] = vt2;
         return result;
