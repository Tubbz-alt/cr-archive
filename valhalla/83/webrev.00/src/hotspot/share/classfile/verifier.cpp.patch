diff a/src/hotspot/share/classfile/verifier.cpp b/src/hotspot/share/classfile/verifier.cpp
--- a/src/hotspot/share/classfile/verifier.cpp
+++ b/src/hotspot/share/classfile/verifier.cpp
@@ -58,11 +58,11 @@
 #include "utilities/bytes.hpp"
 
 #define NOFAILOVER_MAJOR_VERSION                       51
 #define NONZERO_PADDING_BYTES_IN_SWITCH_MAJOR_VERSION  51
 #define STATIC_METHOD_IN_INTERFACE_MAJOR_VERSION       52
-#define VALUETYPE_MAJOR_VERSION                        56
+#define INLINETYPE_MAJOR_VERSION                       56
 #define MAX_ARRAY_DIMENSIONS 255
 
 // Access to external entry for VerifyClassForMajorVersion - old byte code verifier
 
 extern "C" {
@@ -485,11 +485,11 @@
       ss->print("Expected stackmap frame at this location.");
       break;
     case BAD_STACKMAP:
       ss->print("Invalid stackmap specification.");
       break;
-    case WRONG_VALUE_TYPE:
+    case WRONG_INLINE_TYPE:
       ss->print("Type ");
       _type.details(ss);
       ss->print(" and type ");
       _expected.details(ss);
       ss->print(" must be identical inline types.");
@@ -586,23 +586,23 @@
   }
 }
 
 // Methods in ClassVerifier
 
-VerificationType reference_or_valuetype(InstanceKlass* klass) {
+VerificationType reference_or_inlinetype(InstanceKlass* klass) {
   if (klass->is_value()) {
-    return VerificationType::valuetype_type(klass->name());
+    return VerificationType::inlinetype_type(klass->name());
   } else {
     return VerificationType::reference_type(klass->name());
   }
 }
 
 ClassVerifier::ClassVerifier(
     InstanceKlass* klass, TRAPS)
     : _thread(THREAD), _previous_symbol(NULL), _symbols(NULL), _exception_type(NULL),
       _message(NULL), _method_signatures_table(NULL), _klass(klass) {
-  _this_type = reference_or_valuetype(klass);
+  _this_type = reference_or_inlinetype(klass);
 }
 
 ClassVerifier::~ClassVerifier() {
   // Decrement the reference count for any symbols created.
   if (_symbols != NULL) {
@@ -1706,11 +1706,11 @@
           // pass FALSE, operand can't be an array type for getfield/putfield.
           verify_field_instructions(
             &bcs, &current_frame, cp, false, CHECK_VERIFY(this));
           no_control_flow = false; break;
         case Bytecodes::_withfield :
-          if (_klass->major_version() < VALUETYPE_MAJOR_VERSION) {
+          if (_klass->major_version() < INLINETYPE_MAJOR_VERSION) {
             class_format_error(
               "withfield not supported by this class file version (%d.%d), class %s",
               _klass->major_version(), _klass->minor_version(), _klass->external_name());
             return;
           }
@@ -1743,11 +1743,11 @@
           current_frame.push_stack(type, CHECK_VERIFY(this));
           no_control_flow = false; break;
         }
         case Bytecodes::_defaultvalue :
         {
-          if (_klass->major_version() < VALUETYPE_MAJOR_VERSION) {
+          if (_klass->major_version() < INLINETYPE_MAJOR_VERSION) {
             class_format_error(
               "defaultvalue not supported by this class file version (%d.%d), class %s",
               _klass->major_version(), _klass->minor_version(), _klass->external_name());
             return;
           }
@@ -1758,13 +1758,13 @@
             verify_error(ErrorContext::bad_type(bci,
                 TypeOrigin::cp(index, ref_type)),
                 "Illegal defaultvalue instruction");
             return;
           }
-          VerificationType value_type =
-            VerificationType::change_ref_to_valuetype(ref_type);
-          current_frame.push_stack(value_type, CHECK_VERIFY(this));
+          VerificationType inline_type =
+            VerificationType::change_ref_to_inlinetype(ref_type);
+          current_frame.push_stack(inline_type, CHECK_VERIFY(this));
           no_control_flow = false; break;
         }
         case Bytecodes::_newarray :
           type = get_newarray_type(bcs.get_index(), bci, CHECK_VERIFY(this));
           current_frame.pop_stack(
@@ -2398,23 +2398,23 @@
     }
     case Bytecodes::_withfield: {
       for (int i = n - 1; i >= 0; i--) {
         current_frame->pop_stack(field_type[i], CHECK_VERIFY(this));
       }
-      // stack_object_type and target_class_type must be the same value type.
+      // stack_object_type and target_class_type must be the same inline type.
       stack_object_type =
-        current_frame->pop_stack(VerificationType::valuetype_check(), CHECK_VERIFY(this));
-      VerificationType target_value_type =
-        VerificationType::change_ref_to_valuetype(target_class_type);
-      if (!stack_object_type.equals(target_value_type)) {
-        verify_error(ErrorContext::bad_value_type(bci,
+        current_frame->pop_stack(VerificationType::inlinetype_check(), CHECK_VERIFY(this));
+      VerificationType target_inline_type =
+        VerificationType::change_ref_to_inlinetype(target_class_type);
+      if (!stack_object_type.equals(target_inline_type)) {
+        verify_error(ErrorContext::bad_inline_type(bci,
             current_frame->stack_top_ctx(),
             TypeOrigin::cp(index, target_class_type)),
             "Invalid type on operand stack in withfield instruction");
         return;
       }
-      current_frame->push_stack(target_value_type, CHECK_VERIFY(this));
+      current_frame->push_stack(target_inline_type, CHECK_VERIFY(this));
       break;
     }
     case Bytecodes::_getfield: {
       stack_object_type = current_frame->pop_stack(
         target_class_type, CHECK_VERIFY(this));
@@ -2931,19 +2931,19 @@
       return;
     }
   } else if (opcode == Bytecodes::_invokespecial
              && !is_same_or_direct_interface(current_class(), current_type(), ref_class_type)
              && !ref_class_type.equals(VerificationType::reference_type(
-                  current_class()->super()->name()))) { // super() can never be a value_type.
+                  current_class()->super()->name()))) { // super() can never be an inline_type.
     bool subtype = false;
     bool have_imr_indirect = cp->tag_at(index).value() == JVM_CONSTANT_InterfaceMethodref;
     if (!current_class()->is_unsafe_anonymous()) {
       subtype = ref_class_type.is_assignable_from(
                  current_type(), this, false, CHECK_VERIFY(this));
     } else {
       InstanceKlass* unsafe_host = current_class()->unsafe_anonymous_host();
-      VerificationType unsafe_anonymous_host_type = reference_or_valuetype(unsafe_host);
+      VerificationType unsafe_anonymous_host_type = reference_or_inlinetype(unsafe_host);
       subtype = ref_class_type.is_assignable_from(unsafe_anonymous_host_type, this, false, CHECK_VERIFY(this));
 
       // If invokespecial of IMR, need to recheck for same or
       // direct interface relative to the host class
       have_imr_indirect = (have_imr_indirect &&
@@ -2993,11 +2993,11 @@
           // objectref is a subtype of the unsafe_anonymous_host of the current class
           // to allow an anonymous class to reference methods in the unsafe_anonymous_host
           VerificationType top = current_frame->pop_stack(CHECK_VERIFY(this));
 
           InstanceKlass* unsafe_host = current_class()->unsafe_anonymous_host();
-          VerificationType host_type = reference_or_valuetype(unsafe_host);
+          VerificationType host_type = reference_or_inlinetype(unsafe_host);
           bool subtype = host_type.is_assignable_from(top, this, false, CHECK_VERIFY(this));
           if (!subtype) {
             verify_error( ErrorContext::bad_type(current_frame->offset(),
               current_frame->stack_top_ctx(),
               TypeOrigin::implicit(top)),
@@ -3117,11 +3117,11 @@
     int n = os::snprintf(arr_sig_str, length + 1, "%c%s",
                          JVM_SIGNATURE_ARRAY, component_name);
     assert(n == length, "Unexpected number of characters in string");
   } else {         // it's an object or interface
     const char* component_name = component_type.name()->as_utf8();
-    char Q_or_L = component_type.is_valuetype() ? JVM_SIGNATURE_VALUETYPE : JVM_SIGNATURE_CLASS;
+    char Q_or_L = component_type.is_inlinetype() ? JVM_SIGNATURE_INLINETYPE : JVM_SIGNATURE_CLASS;
     // add one dimension to component with 'L' or 'Q' prepended and ';' appended.
     length = (int)strlen(component_name) + 3;
     arr_sig_str = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, char, length + 1);
     int n = os::snprintf(arr_sig_str, length + 1, "%c%c%s;",
                          JVM_SIGNATURE_ARRAY, Q_or_L, component_name);
