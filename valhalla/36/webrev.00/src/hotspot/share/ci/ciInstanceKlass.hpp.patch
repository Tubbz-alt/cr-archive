diff a/src/hotspot/share/ci/ciInstanceKlass.hpp b/src/hotspot/share/ci/ciInstanceKlass.hpp
--- a/src/hotspot/share/ci/ciInstanceKlass.hpp
+++ b/src/hotspot/share/ci/ciInstanceKlass.hpp
@@ -68,12 +68,10 @@
   ciConstantPoolCache*   _field_cache;  // cached map index->field
   GrowableArray<ciField*>* _nonstatic_fields;
 
   int                    _has_injected_fields; // any non static injected fields? lazily initialized.
 
-  ciInstanceKlass*       _vcc_klass; // points to the value-capable class corresponding to the current derived value type class.
-
   // The possible values of the _implementor fall into following three cases:
   //   NULL: no implementor.
   //   A ciInstanceKlass that's not itself: one implementor.
   //   Itself: more than one implementor.
   ciInstanceKlass*       _implementor;
@@ -249,21 +247,18 @@
   // Note:  To find a method from name and type strings, use ciSymbol::make,
   // but consider adding to vmSymbols.hpp instead.
 
   bool is_leaf_type();
   ciInstanceKlass* implementor();
-  ciInstanceKlass* vcc_klass();
 
   ciInstanceKlass* unique_implementor() {
     assert(is_loaded(), "must be loaded");
     ciInstanceKlass* impl = implementor();
     return (impl != this ? impl : NULL);
   }
 
-  virtual bool can_be_value_klass(bool is_exact = false) {
-    return EnableValhalla && (!is_loaded() || is_valuetype() || ((is_java_lang_Object() || is_interface() || (is_abstract() && !has_nonstatic_fields())) && !is_exact));
-  }
+  virtual bool can_be_value_klass(bool is_exact = false);
 
   // Is the defining class loader of this class the default loader?
   bool uses_default_loader() const;
 
   bool is_java_lang_Object() const;
