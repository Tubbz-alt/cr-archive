diff a/src/hotspot/share/ci/ciMetadata.hpp b/src/hotspot/share/ci/ciMetadata.hpp
--- a/src/hotspot/share/ci/ciMetadata.hpp
+++ b/src/hotspot/share/ci/ciMetadata.hpp
@@ -54,13 +54,13 @@
   virtual bool is_return_address() const    { return false; }
   virtual bool is_method() const            { return false; }
   virtual bool is_method_data() const       { return false; }
   virtual bool is_klass() const             { return false; }
   virtual bool is_instance_klass() const    { return false; }
-  virtual bool is_inlinetype() const         { return false; }
+  virtual bool is_inlinetype() const        { return false; }
   virtual bool is_array_klass() const       { return false; }
-  virtual bool is_flat_array_klass() const { return false; }
+  virtual bool is_flat_array_klass() const  { return false; }
   virtual bool is_obj_array_klass() const   { return false; }
   virtual bool is_type_array_klass() const  { return false; }
   virtual bool flatten_array() const        { return false; }
   virtual void dump_replay_data(outputStream* st) { /* do nothing */ }
 
@@ -94,11 +94,11 @@
   }
   ciArrayKlass*            as_array_klass() {
     assert(is_array_klass(), "bad cast");
     return (ciArrayKlass*)this;
   }
-  ciFlatArrayKlass*       as_flat_array_klass() {
+  ciFlatArrayKlass*        as_flat_array_klass() {
     assert(is_flat_array_klass(), "bad cast");
     return (ciFlatArrayKlass*)this;
   }
   ciObjArrayKlass*         as_obj_array_klass() {
     assert(is_obj_array_klass(), "bad cast");
@@ -106,11 +106,11 @@
   }
   ciTypeArrayKlass*        as_type_array_klass() {
     assert(is_type_array_klass(), "bad cast");
     return (ciTypeArrayKlass*)this;
   }
-  ciInlineKlass*            as_inline_klass() {
+  ciInlineKlass*           as_inline_klass() {
     assert(is_inlinetype(), "bad cast");
     return (ciInlineKlass*)this;
   }
 
   Metadata* constant_encoding() { return _metadata; }
