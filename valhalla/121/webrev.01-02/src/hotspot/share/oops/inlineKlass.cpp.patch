diff a/src/hotspot/share/oops/inlineKlass.cpp b/src/hotspot/share/oops/inlineKlass.cpp
--- a/src/hotspot/share/oops/inlineKlass.cpp
+++ b/src/hotspot/share/oops/inlineKlass.cpp
@@ -536,21 +536,21 @@
   assert(j == regs->length(), "missed a field?");
   assert(k == handles.length(), "missed an oop?");
   return new_vt;
 }
 
-// Check the return register for a InlineKlass oop
+// Check the return register for an InlineKlass oop
 InlineKlass* InlineKlass::returned_inline_klass(const RegisterMap& map) {
   BasicType bt = T_METADATA;
   VMRegPair pair;
   int nb = SharedRuntime::java_return_convention(&bt, &pair, 1);
   assert(nb == 1, "broken");
 
   address loc = map.location(pair.first());
   intptr_t ptr = *(intptr_t*)loc;
   if (is_set_nth_bit(ptr, 0)) {
-    // Oop is tagged, must be a InlineKlass oop
+    // Oop is tagged, must be an InlineKlass oop
     clear_nth_bit(ptr, 0);
     assert(Metaspace::contains((void*)ptr), "should be klass");
     InlineKlass* vk = (InlineKlass*)ptr;
     assert(vk->can_be_returned_as_fields(), "must be able to return as fields");
     return vk;
