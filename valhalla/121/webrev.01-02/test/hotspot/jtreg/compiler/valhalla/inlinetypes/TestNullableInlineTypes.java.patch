diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNullableInlineTypes.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNullableInlineTypes.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNullableInlineTypes.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNullableInlineTypes.java
@@ -461,11 +461,11 @@
     @DontInline
     public boolean test16_dontinline(MyValue1.ref vt) {
         return (Object)vt == null;
     }
 
-    // Test c2c call passing null for a inline type
+    // Test c2c call passing null for an inline type
     @Test
     @Warmup(10000) // Warmup to make sure 'test17_dontinline' is compiled
     public boolean test16(Object arg) throws Exception {
         Method test16method = getClass().getMethod("test16_dontinline", MyValue1.ref.class);
         return (boolean)test16method.invoke(this, arg);
@@ -516,11 +516,11 @@
     @ForceInline
     static void test18_target2(MyValue1.ref vt) {
         nullValue = vt;
     }
 
-    // Test passing null for a inline type
+    // Test passing null for an inline type
     @Test
     @Warmup(11000) // Make sure lambda forms get compiled
     public void test18() throws Throwable {
         test18_mh1.invokeExact(nullValue);
         test18_mh2.invokeExact(nullValue);
@@ -582,11 +582,11 @@
         } catch (Throwable t) {
             throw new RuntimeException("test20 failed", t);
         }
     }
 
-    // Test writing null to a flattenable/non-flattenable inline type field in a inline type
+    // Test writing null to a flattenable/non-flattenable inline type field in an inline type
     final inline class Test21Value {
         final MyValue1.ref valueField1;
         final MyValue1 valueField2;
         final MyValue1.ref alwaysNull = null;
 
@@ -897,11 +897,11 @@
     public void test35_verifier(boolean warmup) {
         test35(true);
         test35(false);
     }
 
-    // Test that when explicitly null checking a inline type, we keep
+    // Test that when explicitly null checking an inline type, we keep
     // track of the information that the inline type can never be null.
     @Test(failOn = ALLOC + STORE)
     public int test37(boolean b, MyValue1.ref vt1, MyValue1.val vt2) {
         if (vt1 == null) {
             return 0;
@@ -918,11 +918,11 @@
         Asserts.assertEquals(res, testValue1.x);
         res = test37(false, testValue1, testValue1);
         Asserts.assertEquals(res, testValue1.x);
     }
 
-    // Test that when explicitly null checking a inline type receiver,
+    // Test that when explicitly null checking an inline type receiver,
     // we keep track of the information that the inline type can never be null.
     @Test(failOn = ALLOC + STORE)
     public int test38(boolean b, MyValue1.ref vt1, MyValue1.val vt2) {
         vt1.hash(); // Inlined - Explicit null check
         // vt1 should be scalarized because it's always non-null
@@ -937,11 +937,11 @@
         Asserts.assertEquals(res, testValue1.x);
         res = test38(false, testValue1, testValue1);
         Asserts.assertEquals(res, testValue1.x);
     }
 
-    // Test that when implicitly null checking a inline type receiver,
+    // Test that when implicitly null checking an inline type receiver,
     // we keep track of the information that the inline type can never be null.
     @Test(failOn = ALLOC + STORE)
     public int test39(boolean b, MyValue1.ref vt1, MyValue1.val vt2) {
         vt1.hashInterpreted(); // Not inlined - Implicit null check
         // vt1 should be scalarized because it's always non-null
