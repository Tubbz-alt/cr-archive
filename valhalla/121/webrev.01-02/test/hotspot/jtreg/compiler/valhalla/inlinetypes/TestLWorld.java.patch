diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestLWorld.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestLWorld.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestLWorld.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestLWorld.java
@@ -69,11 +69,11 @@
 
     protected long hash() {
         return testValue1.hash();
     }
 
-    // Test passing a inline type as an Object
+    // Test passing an inline type as an Object
     @DontInline
     public Object test1_dontinline1(Object o) {
         return o;
     }
 
@@ -1073,11 +1073,11 @@
             // Expected
         }
         Asserts.assertEQ(testValue1Array[index].hash(), hash());
     }
 
-    // Test writing a inline type to a null inline type array
+    // Test writing an inline type to a null inline type array
     @Test()
     public void test36(MyValue1[] va, MyValue1 vt, int index) {
         va[index] = vt;
     }
 
@@ -1563,11 +1563,11 @@
                    holder.valueField3.hash() +
                    holder.valueField4.hashPrimitive();
         }
     }
 
-    // Same as test2 but with field holder being a inline type
+    // Same as test2 but with field holder being an inline type
     @Test()
     public long test51(Test51Value holder, MyValue1 vt1, Object vt2) {
         return holder.test(holder, vt1, vt2);
     }
 
@@ -1882,11 +1882,11 @@
         Integer[] array = new Integer[1];
         test68(array, 1);
         Asserts.assertEQ(array[0], Integer.valueOf(1));
     }
 
-    // Test convertion between a inline type and java.lang.Object without an allocation
+    // Test convertion between an inline type and java.lang.Object without an allocation
     @ForceInline
     public Object test69_sum(Object a, Object b) {
         int sum = ((MyValue1)a).x + ((MyValue1)b).x;
         return MyValue1.setX(((MyValue1)a), sum);
     }
@@ -2721,11 +2721,11 @@
     public void test102_verifier(boolean warmup) {
         boolean result = test102(null);
         Asserts.assertFalse(result);
     }
 
-    // An abstract class with a non-static field can never be implemented by a inline type
+    // An abstract class with a non-static field can never be implemented by an inline type
     abstract class NoValueImplementors1 {
         int field = 42;
     }
 
     class MyObject3 extends NoValueImplementors1 {
