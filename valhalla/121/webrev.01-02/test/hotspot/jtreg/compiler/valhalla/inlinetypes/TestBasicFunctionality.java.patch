diff a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestBasicFunctionality.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestBasicFunctionality.java
--- a/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestBasicFunctionality.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestBasicFunctionality.java
@@ -102,11 +102,11 @@
         MyValue1 v2 = test3(v1);
         Asserts.assertEQ(v1.x, v2.x);
         Asserts.assertEQ(v1.y, v2.y);
     }
 
-    // Create a inline type in compiled code and only use fields.
+    // Create an inline type in compiled code and only use fields.
     // Allocation should go away because inline type does not escape.
     @Test(failOn = ALLOC + LOAD + STORE + TRAP)
     public long test4() {
         MyValue1 v = MyValue1.createWithFieldsInline(rI, rL);
         return v.hash();
@@ -116,11 +116,11 @@
     public void test4_verifier(boolean warmup) {
         long result = test4();
         Asserts.assertEQ(result, hash());
     }
 
-    // Create a inline type in compiled code and pass it to
+    // Create an inline type in compiled code and pass it to
     // an inlined compiled method via a call.
     @Test(failOn = ALLOC + LOAD + STORE + TRAP)
     public long test5() {
         MyValue1 v = MyValue1.createWithFieldsInline(rI, rL);
         return test5Inline(v);
@@ -135,11 +135,11 @@
     public void test5_verifier(boolean warmup) {
         long result = test5();
         Asserts.assertEQ(result, hash());
     }
 
-    // Create a inline type in compiled code and pass it to
+    // Create an inline type in compiled code and pass it to
     // the interpreter via a call.
     @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = LOAD + TRAP + ALLOC)
     @Test(valid = InlineTypePassFieldsAsArgsOff, match = {ALLOC}, matchCount = {1}, failOn = LOAD + TRAP)
     public long test6() {
         MyValue1 v = MyValue1.createWithFieldsInline(rI, rL);
@@ -151,11 +151,11 @@
     public void test6_verifier(boolean warmup) {
         long result = test6();
         Asserts.assertEQ(result, hash());
     }
 
-    // Create a inline type in compiled code and pass it to
+    // Create an inline type in compiled code and pass it to
     // the interpreter by returning.
     @Test(match = {ALLOC}, matchCount = {1}, failOn = LOAD + TRAP)
     public MyValue1 test7(int x, long y) {
         return MyValue1.createWithFieldsInline(x, y);
     }
@@ -250,11 +250,11 @@
     public void test11_verifier(boolean warmup) {
         long result = test11(rI, rL);
         Asserts.assertEQ(result, hash(rI + 10, rL + 10));
     }
 
-    // Test loop with uncommon trap referencing a inline type
+    // Test loop with uncommon trap referencing an inline type
     @Test(match = {SCOBJ}, matchCount = {-1 /* at least 1 */}, failOn = LOAD)
     public long test12(boolean b) {
         MyValue1 v = MyValue1.createWithFieldsInline(rI, rL);
         MyValue1[] va = new MyValue1[Math.abs(rI) % 10];
         for (int i = 0; i < va.length; ++i) {
@@ -280,11 +280,11 @@
     public void test12_verifier(boolean warmup) {
         long result = test12(warmup);
         Asserts.assertEQ(result, warmup ? rL + (1000 * rI) : ((Math.abs(rI) % 10) + 1) * hash());
     }
 
-    // Test loop with uncommon trap referencing a inline type
+    // Test loop with uncommon trap referencing an inline type
     @Test
     public long test13(boolean b) {
         MyValue1 v = MyValue1.createWithFieldsDontInline(rI, rL);
         MyValue1[] va = new MyValue1[Math.abs(rI) % 10];
         for (int i = 0; i < va.length; ++i) {
@@ -310,11 +310,11 @@
     public void test13_verifier(boolean warmup) {
         long result = test13(warmup);
         Asserts.assertEQ(result, warmup ? rL + (1000 * rI) : ((Math.abs(rI) % 10) + 1) * hash());
     }
 
-    // Create a inline type in a non-inlined method and then call a
+    // Create an inline type in a non-inlined method and then call a
     // non-inlined method on that inline type.
     @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = (ALLOC + STORE + TRAP), match = {LOAD}, matchCount = {12})
     @Test(valid = InlineTypePassFieldsAsArgsOff, failOn = (ALLOC + LOAD + STORE + TRAP))
     public long test14() {
         MyValue1 v = MyValue1.createWithFieldsDontInline(rI, rL);
@@ -325,11 +325,11 @@
     public void test14_verifier(boolean b) {
         long result = test14();
         Asserts.assertEQ(result, hash());
     }
 
-    // Create a inline type in an inlined method and then call a
+    // Create an inline type in an inlined method and then call a
     // non-inlined method on that inline type.
     @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = (LOAD + TRAP + ALLOC))
     @Test(valid = InlineTypePassFieldsAsArgsOff, failOn = (LOAD + TRAP), match = {ALLOC}, matchCount = {1})
     public long test15() {
         MyValue1 v = MyValue1.createWithFieldsInline(rI, rL);
@@ -340,11 +340,11 @@
     public void test15_verifier(boolean b) {
         long result = test15();
         Asserts.assertEQ(result, hash());
     }
 
-    // Create a inline type in a non-inlined method and then call an
+    // Create an inline type in a non-inlined method and then call an
     // inlined method on that inline type.
     @Test(failOn = (ALLOC + STORE + TRAP))
     public long test16() {
         MyValue1 v = MyValue1.createWithFieldsDontInline(rI, rL);
         return v.hash();
@@ -354,11 +354,11 @@
     public void test16_verifier(boolean b) {
         long result = test16();
         Asserts.assertEQ(result, hash());
     }
 
-    // Create a inline type in an inlined method and then call an
+    // Create an inline type in an inlined method and then call an
     // inlined method on that inline type.
     @Test(failOn = (ALLOC + LOAD + STORE + TRAP))
     public long test17() {
         MyValue1 v = MyValue1.createWithFieldsInline(rI, rL);
         return v.hash();
@@ -368,11 +368,11 @@
     public void test17_verifier(boolean b) {
         long result = test17();
         Asserts.assertEQ(result, hash());
     }
 
-    // Create a inline type in compiled code and pass it to the
+    // Create an inline type in compiled code and pass it to the
     // interpreter via a call. The inline type is live at the first call so
     // debug info should include a reference to all its fields.
     @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = ALLOC + LOAD + TRAP)
     @Test(valid = InlineTypePassFieldsAsArgsOff, match = {ALLOC}, matchCount = {1}, failOn = LOAD + TRAP)
     public long test18() {
@@ -385,11 +385,11 @@
     public void test18_verifier(boolean warmup) {
         long result = test18();
         Asserts.assertEQ(result, hash());
     }
 
-    // Create a inline type in compiled code and pass it to the
+    // Create an inline type in compiled code and pass it to the
     // interpreter via a call. The inline type is passed twice but
     // should only be allocated once.
     @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = ALLOC + LOAD + TRAP)
     @Test(valid = InlineTypePassFieldsAsArgsOff, match = {ALLOC}, matchCount = {1}, failOn = LOAD + TRAP)
     public long test19() {
@@ -406,11 +406,11 @@
     public void test19_verifier(boolean warmup) {
         long result = test19();
         Asserts.assertEQ(result, hash());
     }
 
-    // Create a inline type (array) in compiled code and pass it to the
+    // Create an inline type (array) in compiled code and pass it to the
     // interpreter via a call. The inline type is live at the uncommon
     // trap: verify that deoptimization causes the inline type to be
     // correctly allocated.
     @Test(valid = InlineTypePassFieldsAsArgsOn, failOn = LOAD + ALLOC + STORE)
     @Test(valid = InlineTypePassFieldsAsArgsOff, match = {ALLOC}, matchCount = {1}, failOn = LOAD)
