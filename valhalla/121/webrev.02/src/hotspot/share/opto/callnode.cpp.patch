diff a/src/hotspot/share/opto/callnode.cpp b/src/hotspot/share/opto/callnode.cpp
--- a/src/hotspot/share/opto/callnode.cpp
+++ b/src/hotspot/share/opto/callnode.cpp
@@ -22,29 +22,30 @@
  *
  */
 
 #include "precompiled.hpp"
 #include "compiler/compileLog.hpp"
+#include "ci/ciFlatArrayKlass.hpp"
 #include "ci/bcEscapeAnalyzer.hpp"
 #include "compiler/oopMap.hpp"
 #include "gc/shared/barrierSet.hpp"
 #include "gc/shared/c2/barrierSetC2.hpp"
 #include "interpreter/interpreter.hpp"
 #include "opto/callGenerator.hpp"
 #include "opto/callnode.hpp"
 #include "opto/castnode.hpp"
 #include "opto/convertnode.hpp"
 #include "opto/escape.hpp"
+#include "opto/inlinetypenode.hpp"
 #include "opto/locknode.hpp"
 #include "opto/machnode.hpp"
 #include "opto/matcher.hpp"
 #include "opto/parse.hpp"
 #include "opto/regalloc.hpp"
 #include "opto/regmask.hpp"
 #include "opto/rootnode.hpp"
 #include "opto/runtime.hpp"
-#include "opto/valuetypenode.hpp"
 #include "runtime/sharedRuntime.hpp"
 #include "utilities/powerOfTwo.hpp"
 
 // Portions of code courtesy of Clifford Click
 
@@ -469,12 +470,12 @@
         st->print("[%d]", spobj->n_fields());
         int ndim = cik->as_array_klass()->dimension() - 1;
         while (ndim-- > 0) {
           st->print("[]");
         }
-      } else if (cik->is_value_array_klass()) {
-        ciKlass* cie = cik->as_value_array_klass()->base_element_klass();
+      } else if (cik->is_flat_array_klass()) {
+        ciKlass* cie = cik->as_flat_array_klass()->base_element_klass();
         cie->print_name_on(st);
         st->print("[%d]", spobj->n_fields());
         int ndim = cik->as_array_klass()->dimension() - 1;
         while (ndim-- > 0) {
           st->print("[]");
@@ -731,11 +732,11 @@
         assert(range_cc->field_at(TypeFunc::Parms+1) == Type::HALF, "");
         return new MachProjNode(this,con, RegMask::Empty, (uint)OptoReg::Bad);
       }
     } else {
       // The Call may return multiple values (inline type fields): we
-      // create one projection per returned values.
+      // create one projection per returned value.
       assert(con <= TypeFunc::Parms+1 || InlineTypeReturnedAsFields, "only for multi value return");
       uint ideal_reg = range_cc->field_at(con)->ideal_reg();
       return new MachProjNode(this, con, mask[con-TypeFunc::Parms], ideal_reg);
     }
   }
@@ -1147,11 +1148,11 @@
       return false;
     }
     if (c->is_Proj() || c->is_Catch() || c->is_MemBar()) {
       c = c->in(0);
     } else if (c->Opcode() == Op_CallLeaf &&
-               c->as_Call()->entry_point() == CAST_FROM_FN_PTR(address, OptoRuntime::load_unknown_value)) {
+               c->as_Call()->entry_point() == CAST_FROM_FN_PTR(address, OptoRuntime::load_unknown_inline)) {
       copy = c;
       c = c->in(0);
     } else if (c->is_Allocate()) {
       Node* new_obj = c->as_Allocate()->result_cast();
       if (copy == NULL || new_obj == NULL) {
@@ -1192,11 +1193,11 @@
       } else if (m1->is_Proj()) {
         m1 = m1->in(0);
       } else if (m1->is_MemBar()) {
         m1 = m1->in(TypeFunc::Memory);
       } else if (m1->Opcode() == Op_CallLeaf &&
-                 m1->as_Call()->entry_point() == CAST_FROM_FN_PTR(address, OptoRuntime::load_unknown_value)) {
+                 m1->as_Call()->entry_point() == CAST_FROM_FN_PTR(address, OptoRuntime::load_unknown_inline)) {
         if (m1 != copy) {
           return false;
         }
         m1 = m1->in(TypeFunc::Memory);
       } else if (m1->is_Allocate()) {
@@ -1602,11 +1603,11 @@
 
 AllocateNode::AllocateNode(Compile* C, const TypeFunc *atype,
                            Node *ctrl, Node *mem, Node *abio,
                            Node *size, Node *klass_node,
                            Node* initial_test,
-                           ValueTypeBaseNode* value_node)
+                           InlineTypeBaseNode* inline_type_node)
   : CallNode(atype, NULL, TypeRawPtr::BOTTOM)
 {
   init_class_id(Class_Allocate);
   init_flags(Flag_is_macro);
   _is_scalar_replaceable = false;
@@ -1622,11 +1623,11 @@
   init_req( TypeFunc::FramePtr , topnode );
   init_req( AllocSize          , size);
   init_req( KlassNode          , klass_node);
   init_req( InitialTest        , initial_test);
   init_req( ALength            , topnode);
-  init_req( ValueNode          , value_node);
+  init_req( InlineTypeNode     , inline_type_node);
   // DefaultValue defaults to NULL
   // RawDefaultValue defaults to NULL
   C->add_macro_node(this);
 }
 
@@ -2092,11 +2093,11 @@
   // prevents macro expansion from expanding the lock.  Since we don't
   // modify the graph, the value returned from this function is the
   // one computed above.
   const Type* obj_type = phase->type(obj_node());
   if (can_reshape && EliminateLocks && !is_non_esc_obj() &&
-      !obj_type->isa_valuetype() && !obj_type->is_valuetypeptr()) {
+      !obj_type->isa_inlinetype() && !obj_type->is_inlinetypeptr()) {
     //
     // If we are locking an unescaped object, the lock/unlock is unnecessary
     //
     ConnectionGraph *cgr = phase->C->congraph();
     if (cgr != NULL && cgr->not_global_escape(obj_node())) {
@@ -2262,11 +2263,11 @@
   // modify the graph, the value returned from this function is the
   // one computed above.
   // Escape state is defined after Parse phase.
   const Type* obj_type = phase->type(obj_node());
   if (can_reshape && EliminateLocks && !is_non_esc_obj() &&
-      !obj_type->isa_valuetype() && !obj_type->is_valuetypeptr()) {
+      !obj_type->isa_inlinetype() && !obj_type->is_inlinetypeptr()) {
     //
     // If we are unlocking an unescaped object, the lock/unlock is unnecessary.
     //
     ConnectionGraph *cgr = phase->C->congraph();
     if (cgr != NULL && cgr->not_global_escape(obj_node())) {
