diff a/src/hotspot/share/opto/runtime.cpp b/src/hotspot/share/opto/runtime.cpp
--- a/src/hotspot/share/opto/runtime.cpp
+++ b/src/hotspot/share/opto/runtime.cpp
@@ -1710,11 +1710,11 @@
   tempst.print("]");
 
   st->print_raw_cr(tempst.as_string());
 }
 
-const TypeFunc *OptoRuntime::store_value_type_fields_Type() {
+const TypeFunc *OptoRuntime::store_inline_type_fields_Type() {
   // create input type (domain)
   uint total = SharedRuntime::java_return_convention_max_int + SharedRuntime::java_return_convention_max_float*2;
   const Type **fields = TypeTuple::fields(total);
   // We don't know the number of returned values and their
   // types. Assume all registers available to the return convention
@@ -1737,11 +1737,11 @@
   const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+1,fields);
 
   return TypeFunc::make(domain, range);
 }
 
-const TypeFunc *OptoRuntime::pack_value_type_Type() {
+const TypeFunc *OptoRuntime::pack_inline_type_Type() {
   // create input type (domain)
   uint total = 1 + SharedRuntime::java_return_convention_max_int + SharedRuntime::java_return_convention_max_float*2;
   const Type **fields = TypeTuple::fields(total);
   // We don't know the number of returned values and their
   // types. Assume all registers available to the return convention
@@ -1765,19 +1765,19 @@
   const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+1,fields);
 
   return TypeFunc::make(domain, range);
 }
 
-JRT_LEAF(void, OptoRuntime::load_unknown_value(flatArrayOopDesc* array, int index, instanceOopDesc* buffer))
+JRT_LEAF(void, OptoRuntime::load_unknown_inline(flatArrayOopDesc* array, int index, instanceOopDesc* buffer))
 {
   array->value_copy_from_index(index, buffer);
 }
 JRT_END
 
-const TypeFunc *OptoRuntime::load_unknown_value_Type() {
+const TypeFunc* OptoRuntime::load_unknown_inline_type() {
   // create input type (domain)
-  const Type **fields = TypeTuple::fields(3);
+  const Type** fields = TypeTuple::fields(3);
   // We don't know the number of returned values and their
   // types. Assume all registers available to the return convention
   // are used.
   fields[TypeFunc::Parms] = TypeOopPtr::NOTNULL;
   fields[TypeFunc::Parms+1] = TypeInt::POS;
@@ -1785,25 +1785,25 @@
 
   const TypeTuple* domain = TypeTuple::make(TypeFunc::Parms+3, fields);
 
   // create result type (range)
   fields = TypeTuple::fields(0);
-  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+0, fields);
+  const TypeTuple* range = TypeTuple::make(TypeFunc::Parms+0, fields);
 
   return TypeFunc::make(domain, range);
 }
 
-JRT_LEAF(void, OptoRuntime::store_unknown_value(instanceOopDesc* buffer, flatArrayOopDesc* array, int index))
+JRT_LEAF(void, OptoRuntime::store_unknown_inline(instanceOopDesc* buffer, flatArrayOopDesc* array, int index))
 {
   assert(buffer != NULL, "can't store null into flat array");
   array->value_copy_to_index(buffer, index);
 }
 JRT_END
 
-const TypeFunc *OptoRuntime::store_unknown_value_Type() {
+const TypeFunc* OptoRuntime::store_unknown_inline_type() {
   // create input type (domain)
-  const Type **fields = TypeTuple::fields(3);
+  const Type** fields = TypeTuple::fields(3);
   // We don't know the number of returned values and their
   // types. Assume all registers available to the return convention
   // are used.
   fields[TypeFunc::Parms] = TypeInstPtr::NOTNULL;
   fields[TypeFunc::Parms+1] = TypeOopPtr::NOTNULL;
@@ -1811,9 +1811,9 @@
 
   const TypeTuple* domain = TypeTuple::make(TypeFunc::Parms+3, fields);
 
   // create result type (range)
   fields = TypeTuple::fields(0);
-  const TypeTuple *range = TypeTuple::make(TypeFunc::Parms+0, fields);
+  const TypeTuple* range = TypeTuple::make(TypeFunc::Parms+0, fields);
 
   return TypeFunc::make(domain, range);
 }
