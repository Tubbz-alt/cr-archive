diff a/src/hotspot/share/opto/node.cpp b/src/hotspot/share/opto/node.cpp
--- a/src/hotspot/share/opto/node.cpp
+++ b/src/hotspot/share/opto/node.cpp
@@ -546,12 +546,12 @@
     n->as_Call()->clone_jvms(C);
   }
   if (n->is_SafePoint()) {
     n->as_SafePoint()->clone_replaced_nodes();
   }
-  if (n->is_ValueTypeBase()) {
-    C->add_value_type(n);
+  if (n->is_InlineTypeBase()) {
+    C->add_inline_type(n);
   }
   return n;                     // Return the clone
 }
 
 //---------------------------setup_is_top--------------------------------------
@@ -626,12 +626,12 @@
     compile->remove_range_check_cast(cast);
   }
   if (Opcode() == Op_Opaque4) {
     compile->remove_opaque4_node(this);
   }
-  if (is_ValueTypeBase()) {
-    compile->remove_value_type(this);
+  if (is_InlineTypeBase()) {
+    compile->remove_inline_type(this);
   }
 
   if (is_SafePoint()) {
     as_SafePoint()->delete_replaced_nodes();
   }
@@ -1402,12 +1402,12 @@
         igvn->C->remove_range_check_cast(cast);
       }
       if (dead->Opcode() == Op_Opaque4) {
         igvn->C->remove_opaque4_node(dead);
       }
-      if (dead->is_ValueTypeBase()) {
-        igvn->C->remove_value_type(dead);
+      if (dead->is_InlineTypeBase()) {
+        igvn->C->remove_inline_type(dead);
       }
       BarrierSetC2* bs = BarrierSet::barrier_set()->barrier_set_c2();
       bs->unregister_potential_barrier_node(dead);
       igvn->C->record_dead_node(dead->_idx);
       // Kill all inputs to the dead guy
@@ -2145,11 +2145,11 @@
         if( in(j) == n ) cnt--;
       }
       assert( cnt == 0,"Mismatched edge count.");
     } else if (n == NULL) {
       assert(i >= req() || i == 0 || is_Region() || is_Phi() || is_ArrayCopy() ||
-             (is_Allocate() && i >= AllocateNode::ValueNode) ||
+             (is_Allocate() && i >= AllocateNode::InlineTypeNode) ||
              (is_Unlock() && i == req()-1),
              "only region, phi, arraycopy, allocate or unlock nodes have null data edges");
     } else {
       assert(n->is_top(), "sanity");
       // Nothing to check.
