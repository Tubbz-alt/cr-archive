diff a/src/hotspot/share/c1/c1_Instruction.hpp b/src/hotspot/share/c1/c1_Instruction.hpp
--- a/src/hotspot/share/c1/c1_Instruction.hpp
+++ b/src/hotspot/share/c1/c1_Instruction.hpp
@@ -70,11 +70,11 @@
 class   OsrEntry;
 class   ExceptionObject;
 class   StateSplit;
 class     Invoke;
 class     NewInstance;
-class     NewValueTypeInstance;
+class     NewInlineTypeInstance;
 class     NewArray;
 class       NewTypeArray;
 class       NewObjectArray;
 class       NewMultiArray;
 class     WithField;
@@ -178,11 +178,11 @@
   virtual void do_Convert        (Convert*         x) = 0;
   virtual void do_NullCheck      (NullCheck*       x) = 0;
   virtual void do_TypeCast       (TypeCast*        x) = 0;
   virtual void do_Invoke         (Invoke*          x) = 0;
   virtual void do_NewInstance    (NewInstance*     x) = 0;
-  virtual void do_NewValueTypeInstance(NewValueTypeInstance* x) = 0;
+  virtual void do_NewInlineTypeInstance(NewInlineTypeInstance* x) = 0;
   virtual void do_NewTypeArray   (NewTypeArray*    x) = 0;
   virtual void do_NewObjectArray (NewObjectArray*  x) = 0;
   virtual void do_NewMultiArray  (NewMultiArray*   x) = 0;
   virtual void do_WithField      (WithField*       x) = 0;
   virtual void do_DefaultValue   (DefaultValue*    x) = 0;
@@ -584,11 +584,11 @@
   virtual NullCheck*        as_NullCheck()       { return NULL; }
   virtual OsrEntry*         as_OsrEntry()        { return NULL; }
   virtual StateSplit*       as_StateSplit()      { return NULL; }
   virtual Invoke*           as_Invoke()          { return NULL; }
   virtual NewInstance*      as_NewInstance()     { return NULL; }
-  virtual NewValueTypeInstance* as_NewValueTypeInstance() { return NULL; }
+  virtual NewInlineTypeInstance* as_NewInlineTypeInstance() { return NULL; }
   virtual NewArray*         as_NewArray()        { return NULL; }
   virtual NewTypeArray*     as_NewTypeArray()    { return NULL; }
   virtual NewObjectArray*   as_NewObjectArray()  { return NULL; }
   virtual NewMultiArray*    as_NewMultiArray()   { return NULL; }
   virtual WithField*        as_WithField()       { return NULL; }
@@ -867,11 +867,11 @@
 LEAF(LoadField, AccessField)
  public:
   // creation
   LoadField(Value obj, int offset, ciField* field, bool is_static,
             ValueStack* state_before, bool needs_patching,
-            ciValueKlass* value_klass = NULL, Value default_value = NULL )
+            ciInlineKlass* inline_klass = NULL, Value default_value = NULL )
   : AccessField(obj, offset, field, is_static, state_before, needs_patching)
   {
     set_never_null(field->signature()->is_Q_signature());
   }
 
@@ -1000,11 +1000,11 @@
 
 
 LEAF(LoadIndexed, AccessIndexed)
  private:
   NullCheck*  _explicit_null_check;              // For explicit null check elimination
-  NewValueTypeInstance* _vt;
+  NewInlineTypeInstance* _vt;
 
  public:
   // creation
   LoadIndexed(Value array, Value index, Value length, BasicType elt_type, ValueStack* state_before, bool mismatched = false)
   : AccessIndexed(array, index, length, elt_type, state_before, mismatched)
@@ -1018,12 +1018,12 @@
   void set_explicit_null_check(NullCheck* check) { _explicit_null_check = check; }
 
   ciType* exact_type() const;
   ciType* declared_type() const;
 
-  NewValueTypeInstance* vt() const { return _vt; }
-  void set_vt(NewValueTypeInstance* vt) { _vt = vt; }
+  NewInlineTypeInstance* vt() const { return _vt; }
+  void set_vt(NewInlineTypeInstance* vt) { _vt = vt; }
 
   // generic
   HASHING4(LoadIndexed, !should_profile(), type()->tag(), array()->subst(), index()->subst(), vt())
 };
 
@@ -1369,20 +1369,20 @@
   virtual bool can_trap() const                  { return true; }
   ciType* exact_type() const;
   ciType* declared_type() const;
 };
 
-LEAF(NewValueTypeInstance, StateSplit)
+LEAF(NewInlineTypeInstance, StateSplit)
   bool _is_unresolved;
-  ciValueKlass* _klass;
+  ciInlineKlass* _klass;
   Value _depends_on;      // Link to instance on with withfield was called on
   bool _is_optimizable_for_withfield;
   int _first_local_index;
 public:
 
   // Default creation, always allocated for now
-  NewValueTypeInstance(ciValueKlass* klass, ValueStack* state_before, bool is_unresolved, Value depends_on = NULL, bool from_default_value = false)
+  NewInlineTypeInstance(ciInlineKlass* klass, ValueStack* state_before, bool is_unresolved, Value depends_on = NULL, bool from_default_value = false)
   : StateSplit(instanceType, state_before)
    , _is_unresolved(is_unresolved)
    , _klass(klass)
    , _is_optimizable_for_withfield(from_default_value)
    , _first_local_index(-1)
@@ -1397,11 +1397,11 @@
 
   // accessors
   bool is_unresolved() const                     { return _is_unresolved; }
   Value depends_on();
 
-  ciValueKlass* klass() const { return _klass; }
+  ciInlineKlass* klass() const { return _klass; }
 
   virtual bool needs_exception_state() const     { return false; }
 
   // generic
   virtual bool can_trap() const                  { return true; }
@@ -1635,22 +1635,22 @@
   virtual void input_values_do(ValueVisitor* f)   { StateSplit::input_values_do(f); f->visit(&_obj); }
 };
 
 
 LEAF(MonitorEnter, AccessMonitor)
-  bool _maybe_valuetype;
+  bool _maybe_inlinetype;
  public:
   // creation
-  MonitorEnter(Value obj, int monitor_no, ValueStack* state_before, bool maybe_valuetype)
+  MonitorEnter(Value obj, int monitor_no, ValueStack* state_before, bool maybe_inlinetype)
   : AccessMonitor(obj, monitor_no, state_before)
-  , _maybe_valuetype(maybe_valuetype)
+  , _maybe_inlinetype(maybe_inlinetype)
   {
     ASSERT_VALUES
   }
 
   // accessors
-  bool maybe_valuetype() const                   { return _maybe_valuetype; }
+  bool maybe_inlinetype() const                   { return _maybe_inlinetype; }
 
   // generic
   virtual bool can_trap() const                  { return true; }
 };
 
