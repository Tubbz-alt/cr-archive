diff a/src/hotspot/share/c1/c1_Instruction.cpp b/src/hotspot/share/c1/c1_Instruction.cpp
--- a/src/hotspot/share/c1/c1_Instruction.cpp
+++ b/src/hotspot/share/c1/c1_Instruction.cpp
@@ -25,14 +25,14 @@
 #include "precompiled.hpp"
 #include "c1/c1_IR.hpp"
 #include "c1/c1_Instruction.hpp"
 #include "c1/c1_InstructionPrinter.hpp"
 #include "c1/c1_ValueStack.hpp"
+#include "ci/ciFlatArrayKlass.hpp"
+#include "ci/ciInlineKlass.hpp"
 #include "ci/ciObjArrayKlass.hpp"
 #include "ci/ciTypeArrayKlass.hpp"
-#include "ci/ciValueArrayKlass.hpp"
-#include "ci/ciValueKlass.hpp"
 #include "utilities/bitMap.inline.hpp"
 
 
 // Implementation of Instruction
 
@@ -127,11 +127,11 @@
 }
 
 bool Instruction::is_loaded_flattened_array() const {
   if (UseFlatArray) {
     ciType* type = declared_type();
-    return type != NULL && type->is_value_array_klass();
+    return type != NULL && type->is_flat_array_klass();
   }
   return false;
 }
 
 bool Instruction::maybe_flattened_array() {
@@ -139,16 +139,16 @@
     ciType* type = declared_type();
     if (type != NULL) {
       if (type->is_obj_array_klass()) {
         // Due to array covariance, the runtime type might be a flattened array.
         ciKlass* element_klass = type->as_obj_array_klass()->element_klass();
-        if (element_klass->can_be_value_klass() && (!element_klass->is_valuetype() || element_klass->as_value_klass()->flatten_array())) {
+        if (element_klass->can_be_inline_klass() && (!element_klass->is_inlinetype() || element_klass->as_inline_klass()->flatten_array())) {
           return true;
         }
-      } else if (type->is_value_array_klass()) {
-        ciKlass* element_klass = type->as_value_array_klass()->element_klass();
-        assert(!element_klass->is_loaded() || element_klass->as_value_klass()->flatten_array(), "must be flattened");
+      } else if (type->is_flat_array_klass()) {
+        ciKlass* element_klass = type->as_flat_array_klass()->element_klass();
+        assert(!element_klass->is_loaded() || element_klass->as_inline_klass()->flatten_array(), "must be flattened");
         return true;
       } else if (type->is_klass() && type->as_klass()->is_java_lang_Object()) {
         // This can happen as a parameter to System.arraycopy()
         return true;
       }
@@ -165,11 +165,11 @@
   ciType* type = declared_type();
   if (type != NULL) {
     if (type->is_obj_array_klass()) {
       // Due to array covariance, the runtime type might be a null-free array.
       ciKlass* element_klass = type->as_obj_array_klass()->element_klass();
-      if (element_klass->can_be_value_klass()) {
+      if (element_klass->can_be_inline_klass()) {
         return true;
       }
     }
   } else {
     // Type info gets lost during Phi merging (Phi, IfOp, etc), but we might be storing into a
@@ -263,11 +263,11 @@
   return ak->element_type();
 }
 
 bool StoreIndexed::is_exact_flattened_array_store() const {
   if (array()->is_loaded_flattened_array() && value()->as_Constant() == NULL && value()->declared_type() != NULL) {
-    ciKlass* element_klass = array()->declared_type()->as_value_array_klass()->element_klass();
+    ciKlass* element_klass = array()->declared_type()->as_flat_array_klass()->element_klass();
     ciKlass* actual_klass = value()->declared_type()->as_klass();
 
     // The following check can fail with inlining:
     //     void test45_inline(Object[] oa, Object o, int index) { oa[index] = o; }
     //     void test45(MyValue1[] va, int index, MyValue2 v) { test45_inline(va, v, index); }
@@ -305,24 +305,24 @@
 
 ciType* NewInstance::declared_type() const {
   return exact_type();
 }
 
-Value NewValueTypeInstance::depends_on() {
+Value NewInlineTypeInstance::depends_on() {
   if (_depends_on != this) {
-    if (_depends_on->as_NewValueTypeInstance() != NULL) {
-      return _depends_on->as_NewValueTypeInstance()->depends_on();
+    if (_depends_on->as_NewInlineTypeInstance() != NULL) {
+      return _depends_on->as_NewInlineTypeInstance()->depends_on();
     }
   }
   return _depends_on;
 }
 
-ciType* NewValueTypeInstance::exact_type() const {
+ciType* NewInlineTypeInstance::exact_type() const {
   return klass();
 }
 
-ciType* NewValueTypeInstance::declared_type() const {
+ciType* NewInlineTypeInstance::declared_type() const {
   return exact_type();
 }
 
 ciType* CheckCast::declared_type() const {
   return klass();
