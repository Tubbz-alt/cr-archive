diff a/src/hotspot/share/ci/ciReplay.cpp b/src/hotspot/share/ci/ciReplay.cpp
--- a/src/hotspot/share/ci/ciReplay.cpp
+++ b/src/hotspot/share/ci/ciReplay.cpp
@@ -787,15 +787,15 @@
       }
 
     }
   }
 
-  class ValueTypeFieldInitializer : public FieldClosure {
+  class InlineTypeFieldInitializer : public FieldClosure {
     oop _vt;
     CompileReplay* _replay;
   public:
-    ValueTypeFieldInitializer(oop vt, CompileReplay* replay)
+    InlineTypeFieldInitializer(oop vt, CompileReplay* replay)
   : _vt(vt), _replay(replay) {}
 
     void do_field(fieldDescriptor* fd) {
       BasicType bt = fd->field_type();
       const char* string_value = bt != T_INLINE_TYPE ? _replay->parse_escaped_string() : NULL;
@@ -854,11 +854,11 @@
       case T_INLINE_TYPE: {
         InlineKlass* vk = InlineKlass::cast(fd->field_holder()->get_inline_type_field_klass(fd->index()));
         if (fd->is_inlined()) {
           int field_offset = fd->offset() - vk->first_field_offset();
           oop obj = (oop)(cast_from_oop<address>(_vt) + field_offset);
-          ValueTypeFieldInitializer init_fields(obj, _replay);
+          InlineTypeFieldInitializer init_fields(obj, _replay);
           vk->do_nonstatic_fields(&init_fields);
         } else {
           oop value = vk->allocate_instance(Thread::current());
           _vt->obj_field_put(fd->offset(), value);
         }
@@ -1001,11 +1001,11 @@
       java_mirror->double_field_put(fd.offset(), value);
     } else if (field_signature[0] == JVM_SIGNATURE_INLINE_TYPE) {
       Klass* kelem = resolve_klass(field_signature, CHECK);
       InlineKlass* vk = InlineKlass::cast(kelem);
       oop value = vk->allocate_instance(CHECK);
-      ValueTypeFieldInitializer init_fields(value, this);
+      InlineTypeFieldInitializer init_fields(value, this);
       vk->do_nonstatic_fields(&init_fields);
       java_mirror->obj_field_put(fd.offset(), value);
     } else {
       bool res = process_staticfield_reference(field_signature, java_mirror, &fd, CHECK);
       if (!res)  {
