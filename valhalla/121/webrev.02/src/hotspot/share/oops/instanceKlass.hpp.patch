diff a/src/hotspot/share/oops/instanceKlass.hpp b/src/hotspot/share/oops/instanceKlass.hpp
--- a/src/hotspot/share/oops/instanceKlass.hpp
+++ b/src/hotspot/share/oops/instanceKlass.hpp
@@ -54,11 +54,11 @@
 //      indicating where oops are located in instances of this klass.
 //    [EMBEDDED implementor of the interface] only exist for interface
 //    [EMBEDDED unsafe_anonymous_host klass] only exist for an unsafe anonymous class (JSR 292 enabled)
 //    [EMBEDDED fingerprint       ] only if should_store_fingerprint()==true
 //    [EMBEDDED inline_type_field_klasses] only if has_inline_fields() == true
-//    [EMBEDDED InlineKlassFixedBlock] only if is a InlineKlass instance
+//    [EMBEDDED InlineKlassFixedBlock] only if is an InlineKlass instance
 
 
 // forward declaration for class -- see below for definition
 #if INCLUDE_JVMTI
 class BreakpointInfo;
@@ -71,11 +71,11 @@
 class jniIdMapBase;
 class JNIid;
 class JvmtiCachedClassFieldMap;
 class nmethodBucket;
 class OopMapCache;
-class BufferedValueTypeBlob;
+class BufferedInlineTypeBlob;
 class InterpreterOopMap;
 class PackageEntry;
 class ModuleEntry;
 
 // This is used in iterators below.
@@ -440,11 +440,11 @@
   void set_is_naturally_atomic() {
     _misc_flags |= _misc_is_naturally_atomic;
   }
 
   // Query if this class implements jl.NonTearable or was
-  // mentioned in the JVM option AlwaysAtomicValueTypes.
+  // mentioned in the JVM option ForceNonTearable.
   // This bit can occur anywhere, but is only significant
   // for inline classes *and* their super types.
   // It inherits from supers along with NonTearable.
   bool is_declared_atomic() const {
     return (_misc_flags & _misc_is_declared_atomic) != 0;
@@ -1297,19 +1297,19 @@
   Klass* get_inline_type_field_klass(int idx) const {
     assert(has_inline_type_fields(), "Sanity checking");
     assert(idx < java_fields_count(), "IOOB");
     Klass* k = ((Klass**)adr_inline_type_field_klasses())[idx];
     assert(k != NULL, "Should always be set before being read");
-    assert(k->is_inline_klass(), "Must be a inline type");
+    assert(k->is_inline_klass(), "Must be an inline type");
     return k;
   }
 
   Klass* get_inline_type_field_klass_or_null(int idx) const {
     assert(has_inline_type_fields(), "Sanity checking");
     assert(idx < java_fields_count(), "IOOB");
     Klass* k = ((Klass**)adr_inline_type_field_klasses())[idx];
-    assert(k == NULL || k->is_inline_klass(), "Must be a inline type");
+    assert(k == NULL || k->is_inline_klass(), "Must be an inline type");
     return k;
   }
 
   void set_inline_type_field_klass(int idx, Klass* k) {
     assert(has_inline_type_fields(), "Sanity checking");
