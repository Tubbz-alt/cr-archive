diff a/src/hotspot/cpu/x86/c1_Runtime1_x86.cpp b/src/hotspot/cpu/x86/c1_Runtime1_x86.cpp
--- a/src/hotspot/cpu/x86/c1_Runtime1_x86.cpp
+++ b/src/hotspot/cpu/x86/c1_Runtime1_x86.cpp
@@ -1119,22 +1119,22 @@
       }
       break;
 
     case new_type_array_id:
     case new_object_array_id:
-    case new_value_array_id:
+    case new_flat_array_id:
       {
         Register length   = rbx; // Incoming
         Register klass    = rdx; // Incoming
         Register obj      = rax; // Result
 
         if (id == new_type_array_id) {
           __ set_info("new_type_array", dont_gc_arguments);
         } else if (id == new_object_array_id) {
           __ set_info("new_object_array", dont_gc_arguments);
         } else {
-          __ set_info("new_value_array", dont_gc_arguments);
+          __ set_info("new_flat_array", dont_gc_arguments);
         }
 
 #ifdef ASSERT
         // assert object type is really an array of the proper kind
         {
@@ -1151,19 +1151,19 @@
           case new_object_array_id:
             __ cmpl(t0, Klass::_lh_array_tag_obj_value); // new "[Ljava/lang/Object;"
             __ jcc(Assembler::equal, ok);
             __ cmpl(t0, Klass::_lh_array_tag_vt_value);  // new "[LVT;"
             __ jcc(Assembler::equal, ok);
-            __ stop("assert(is an object or value array klass)");
+            __ stop("assert(is an object or inline type array klass)");
             break;
-          case new_value_array_id:
+          case new_flat_array_id:
             // new "[QVT;"
             __ cmpl(t0, Klass::_lh_array_tag_vt_value);  // the array can be flattened.
             __ jcc(Assembler::equal, ok);
             __ cmpl(t0, Klass::_lh_array_tag_obj_value); // the array cannot be flattened (due to InlineArrayElementMaxFlatSize, etc)
             __ jcc(Assembler::equal, ok);
-            __ stop("assert(is an object or value array klass)");
+            __ stop("assert(is an object or inline type array klass)");
             break;
           default:  ShouldNotReachHere();
           }
           __ should_not_reach_here();
           __ bind(ok);
@@ -1217,12 +1217,12 @@
         if (id == new_type_array_id) {
           call_offset = __ call_RT(obj, noreg, CAST_FROM_FN_PTR(address, new_type_array), klass, length);
         } else if (id == new_object_array_id) {
           call_offset = __ call_RT(obj, noreg, CAST_FROM_FN_PTR(address, new_object_array), klass, length);
         } else {
-          assert(id == new_value_array_id, "must be");
-          call_offset = __ call_RT(obj, noreg, CAST_FROM_FN_PTR(address, new_value_array), klass, length);
+          assert(id == new_flat_array_id, "must be");
+          call_offset = __ call_RT(obj, noreg, CAST_FROM_FN_PTR(address, new_flat_array), klass, length);
         }
 
         oop_maps = new OopMapSet();
         oop_maps->add_gc_map(call_offset, map);
         restore_live_registers_except_rax(sasm);
@@ -1308,21 +1308,21 @@
         // rax,: are the two operands substitutable
       }
       break;
 
 
-    case buffer_value_args_id:
-    case buffer_value_args_no_receiver_id:
+    case buffer_inline_args_id:
+    case buffer_inline_args_no_receiver_id:
       {
-        const char* name = (id == buffer_value_args_id) ?
-          "buffer_value_args" : "buffer_value_args_no_receiver";
+        const char* name = (id == buffer_inline_args_id) ?
+          "buffer_inline_args" : "buffer_inline_args_no_receiver";
         StubFrame f(sasm, name, dont_gc_arguments);
         OopMap* map = save_live_registers(sasm, 2);
         Register method = rbx;
-        address entry = (id == buffer_value_args_id) ?
-          CAST_FROM_FN_PTR(address, buffer_value_args) :
-          CAST_FROM_FN_PTR(address, buffer_value_args_no_receiver);
+        address entry = (id == buffer_inline_args_id) ?
+          CAST_FROM_FN_PTR(address, buffer_inline_args) :
+          CAST_FROM_FN_PTR(address, buffer_inline_args_no_receiver);
         int call_offset = __ call_RT(rax, noreg, entry, method);
         oop_maps = new OopMapSet();
         oop_maps->add_gc_map(call_offset, map);
         restore_live_registers_except_rax(sasm);
         __ verify_oop(rax);  // rax: an array of buffered value objects
