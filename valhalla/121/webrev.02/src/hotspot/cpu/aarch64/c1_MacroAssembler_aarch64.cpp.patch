diff a/src/hotspot/cpu/aarch64/c1_MacroAssembler_aarch64.cpp b/src/hotspot/cpu/aarch64/c1_MacroAssembler_aarch64.cpp
--- a/src/hotspot/cpu/aarch64/c1_MacroAssembler_aarch64.cpp
+++ b/src/hotspot/cpu/aarch64/c1_MacroAssembler_aarch64.cpp
@@ -86,11 +86,11 @@
   ldr(hdr, Address(obj, hdr_offset));
   // and mark it as unlocked
   orr(hdr, hdr, markWord::unlocked_value);
 
   if (EnableValhalla && !UseBiasedLocking) {
-    // Mask always_locked bit such that we go to the slow path if object is a value type
+    // Mask always_locked bit such that we go to the slow path if object is an inline type
     andr(hdr, hdr, ~markWord::biased_lock_bit_in_place);
   }
 
   // save unlocked object header into the displaced header location on the stack
   str(hdr, Address(disp_hdr, 0));
@@ -337,19 +337,19 @@
 
   cmp_klass(receiver, iCache, rscratch1);
 }
 
 
-void C1_MacroAssembler::build_frame(int framesize, int bang_size_in_bytes, bool needs_stack_repair, Label* verified_value_entry_label) {
+void C1_MacroAssembler::build_frame(int framesize, int bang_size_in_bytes, bool needs_stack_repair, Label* verified_inline_entry_label) {
   assert(bang_size_in_bytes >= framesize, "stack bang size incorrect");
   // Make sure there is enough stack space for this method's activation.
   // Note that we do this before doing an enter().
   generate_stack_overflow_check(bang_size_in_bytes);
 
   guarantee(needs_stack_repair == false, "Stack repair should not be true");
-  if (verified_value_entry_label != NULL) {
-    bind(*verified_value_entry_label);
+  if (verified_inline_entry_label != NULL) {
+    bind(*verified_inline_entry_label);
   }
 
   MacroAssembler::build_frame(framesize + 2 * wordSize);
 
   // Insert nmethod entry barrier into frame.
@@ -362,11 +362,11 @@
   guarantee(needs_stack_repair == false, "Stack repair should not be true");
 
   MacroAssembler::remove_frame(framesize + 2 * wordSize);
 }
 
-void C1_MacroAssembler::verified_value_entry() {
+void C1_MacroAssembler::verified_inline_entry() {
   if (C1Breakpoint || VerifyFPU || !UseStackBanging) {
     // Verified Entry first instruction should be 5 bytes long for correct
     // patching by patch_verified_entry().
     //
     // C1Breakpoint and VerifyFPU have one byte first instruction.
@@ -379,11 +379,11 @@
   nop();
   // build frame
   // verify_FPU(0, "method_entry");
 }
 
-int C1_MacroAssembler::scalarized_entry(const CompiledEntrySignature *ces, int frame_size_in_bytes, int bang_size_in_bytes, Label& verified_value_entry_label, bool is_value_ro_entry) {
+int C1_MacroAssembler::scalarized_entry(const CompiledEntrySignature* ces, int frame_size_in_bytes, int bang_size_in_bytes, Label& verified_inline_entry_label, bool is_inline_ro_entry) {
   // This function required to support for InlineTypePassFieldsAsArgs
   if (C1Breakpoint || VerifyFPU || !UseStackBanging) {
     // Verified Entry first instruction should be 5 bytes long for correct
     // patching by patch_verified_entry().
     //
@@ -398,17 +398,17 @@
   // verify_FPU(0, "method_entry");
 
   assert(InlineTypePassFieldsAsArgs, "sanity");
 
   GrowableArray<SigEntry>* sig   = &ces->sig();
-  GrowableArray<SigEntry>* sig_cc = is_value_ro_entry ? &ces->sig_cc_ro() : &ces->sig_cc();
+  GrowableArray<SigEntry>* sig_cc = is_inline_ro_entry ? &ces->sig_cc_ro() : &ces->sig_cc();
   VMRegPair* regs      = ces->regs();
-  VMRegPair* regs_cc   = is_value_ro_entry ? ces->regs_cc_ro() : ces->regs_cc();
+  VMRegPair* regs_cc   = is_inline_ro_entry ? ces->regs_cc_ro() : ces->regs_cc();
   int args_on_stack    = ces->args_on_stack();
-  int args_on_stack_cc = is_value_ro_entry ? ces->args_on_stack_cc_ro() : ces->args_on_stack_cc();
+  int args_on_stack_cc = is_inline_ro_entry ? ces->args_on_stack_cc_ro() : ces->args_on_stack_cc();
 
-  assert(sig->length() <= sig_cc->length(), "Zero-sized value class not allowed!");
+  assert(sig->length() <= sig_cc->length(), "Zero-sized inline class not allowed!");
   BasicType* sig_bt = NEW_RESOURCE_ARRAY(BasicType, sig_cc->length());
   int args_passed = sig->length();
   int args_passed_cc = SigEntry::fill_sig_bt(sig_cc, sig_bt);
 
   int extra_stack_offset = wordSize; // tos is return address.
@@ -430,36 +430,36 @@
            + sp_inc;   // stack extension
     mov(rscratch1, real_frame_size);
     str(rscratch1, Address(sp, frame_size_in_bytes - wordSize));
   }
 
-  // FIXME -- call runtime only if we cannot in-line allocate all the incoming value args.
+  // FIXME -- call runtime only if we cannot in-line allocate all the incoming inline type args.
   mov(r1, (intptr_t) ces->method());
-  if (is_value_ro_entry) {
-    far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::buffer_value_args_no_receiver_id)));
+  if (is_inline_ro_entry) {
+    far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::buffer_inline_args_no_receiver_id)));
   } else {
-    far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::buffer_value_args_id)));
+    far_call(RuntimeAddress(Runtime1::entry_for(Runtime1::buffer_inline_args_id)));
   }
   int rt_call_offset = offset();
 
   // Remove the temp frame
   add(sp, sp, frame_size_in_bytes);
 
-  int n = shuffle_value_args(true, is_value_ro_entry, extra_stack_offset, sig_bt, sig_cc,
-                             args_passed_cc, args_on_stack_cc, regs_cc, // from
-                             args_passed, args_on_stack, regs);         // to
+  int n = shuffle_inline_args(true, is_inline_ro_entry, extra_stack_offset, sig_bt, sig_cc,
+                              args_passed_cc, args_on_stack_cc, regs_cc, // from
+                              args_passed, args_on_stack, regs);         // to
   assert(sp_inc == n, "must be");
 
   if (sp_inc != 0) {
     // Do the stack banging here, and skip over the stack repair code in the
-    // verified_value_entry (which has a different real_frame_size).
+    // verified_inline_entry (which has a different real_frame_size).
     assert(sp_inc > 0, "stack should not shrink");
     generate_stack_overflow_check(bang_size_in_bytes);
     decrement(sp, frame_size_in_bytes);
   }
 
-  b(verified_value_entry_label);
+  b(verified_inline_entry_label);
   return rt_call_offset;
 }
 
 
 void C1_MacroAssembler::load_parameter(int offset_in_words, Register reg) {
