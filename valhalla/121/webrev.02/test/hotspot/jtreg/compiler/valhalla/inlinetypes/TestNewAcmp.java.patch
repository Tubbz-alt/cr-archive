diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNewAcmp.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNewAcmp.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNewAcmp.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNewAcmp.java
@@ -26,14 +26,14 @@
  * @summary Verifies correctness of the new acmp bytecode.
  * @library /testlibrary /test/lib /compiler/whitebox /
  * @compile TestNewAcmp.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox
  * @run main/othervm/timeout=300 -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI
- *                               compiler.valhalla.valuetypes.TestNewAcmp
+ *                               compiler.valhalla.inlinetypes.TestNewAcmp
  */
 
-package compiler.valhalla.valuetypes;
+package compiler.valhalla.inlinetypes;
 
 import jdk.test.lib.Asserts;
 import jdk.test.lib.process.ProcessTools;
 import jdk.test.lib.process.OutputAnalyzer;
 import java.lang.annotation.Retention;
@@ -1802,11 +1802,11 @@
         for (Method m : getClass().getMethods()) {
             if (m.getName().startsWith("test")) {
                 // Do some warmup runs
                 runTest(m, args, 1000, nullMode, equalities);
                 // Make sure method is compiled
-                ValueTypeTest.enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);
+                InlineTypeTest.enqueueMethodForCompilation(m, COMP_LEVEL_FULL_OPTIMIZATION);
                 Asserts.assertTrue(WHITE_BOX.isMethodCompiled(m, false), m + " not compiled");
                 // Run again to verify correctness of compiled code
                 runTest(m, args, 1, nullMode, equalities);
             }
         }
@@ -1869,12 +1869,12 @@
             "-Xbootclasspath/a:.",
             "-XX:+UnlockDiagnosticVMOptions",
             "-XX:+WhiteBoxAPI",
             "-Xbatch",
             "-XX:TypeProfileLevel=222",
-            "-XX:CompileCommand=dontinline,compiler.valhalla.valuetypes.TestNewAcmp::test*",
-            "-XX:CompileCommand=dontinline,compiler.valhalla.valuetypes.TestNewAcmp::cmp*"};
+            "-XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestNewAcmp::test*",
+            "-XX:CompileCommand=dontinline,compiler.valhalla.inlinetypes.TestNewAcmp::cmp*"};
 
         String SCENARIOS = System.getProperty("Scenarios", "");
         List<String> scenarios = null;
         if (!SCENARIOS.isEmpty()) {
            scenarios = Arrays.asList(SCENARIOS.split(","));
@@ -1888,11 +1888,11 @@
                 String[] cmds = baseOptions;
                 if (incrInline != 0) {
                     cmds = addOptions(cmds, "-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AlwaysIncrementalInline");
                 }
 
-                cmds = addOptions(cmds, "compiler.valhalla.valuetypes.TestNewAcmp");
+                cmds = addOptions(cmds, "compiler.valhalla.inlinetypes.TestNewAcmp");
                 cmds = addOptions(cmds, Integer.toString(nullMode));
 
                 if (scenarios != null && !scenarios.contains(Integer.toString(scenario))) {
                     System.out.println("Scenario #" + scenario + " is skipped due to -Dscenarios=" + SCENARIOS);
                     continue;
