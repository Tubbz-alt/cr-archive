diff a/src/hotspot/share/opto/machnode.cpp b/src/hotspot/share/opto/machnode.cpp
--- a/src/hotspot/share/opto/machnode.cpp
+++ b/src/hotspot/share/opto/machnode.cpp
@@ -382,11 +382,11 @@
     return TypePtr::BOTTOM;
   }
   assert(tp->base() != Type::AnyPtr, "not a bare pointer");
 
   if (tp->isa_aryptr()) {
-    // In the case of a flattened value type array, each field has its
+    // In the case of a flattened inline type array, each field has its
     // own slice so we need to extract the field being accessed from
     // the address computation
     if (offset == Type::OffsetBot) {
       Node* base;
       Node* index;
@@ -701,11 +701,11 @@
   if (tf()->range_sig()->cnt() == TypeFunc::Parms) {
     // void return
     return false;
   }
 
-  assert(tf()->returns_value_type_as_fields(), "multiple return values not supported");
+  assert(tf()->returns_inline_type_as_fields(), "multiple return values not supported");
 
   // find the projection corresponding to the return value
   for (DUIterator_Fast imax, i = fast_outs(imax); i < imax; i++) {
     Node *use = fast_out(i);
     if (!use->is_Proj()) continue;
@@ -724,11 +724,11 @@
   return (r->cnt() > TypeFunc::Parms &&
           r->field_at(TypeFunc::Parms)->isa_ptr());
 }
 
 bool MachCallNode::returns_vt() const {
-  return tf()->returns_value_type_as_fields();
+  return tf()->returns_inline_type_as_fields();
 }
 
 //------------------------------Registers--------------------------------------
 const RegMask &MachCallNode::in_RegMask(uint idx) const {
   // Values in the domain use the users calling convention, embodied in the
