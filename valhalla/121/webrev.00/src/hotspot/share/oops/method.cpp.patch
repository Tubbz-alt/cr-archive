diff a/src/hotspot/share/oops/method.cpp b/src/hotspot/share/oops/method.cpp
--- a/src/hotspot/share/oops/method.cpp
+++ b/src/hotspot/share/oops/method.cpp
@@ -148,23 +148,23 @@
 address Method::get_c2i_entry() {
   assert(adapter() != NULL, "must have");
   return adapter()->get_c2i_entry();
 }
 
-address Method::get_c2i_value_entry() {
+address Method::get_c2i_inline_entry() {
   assert(adapter() != NULL, "must have");
-  return adapter()->get_c2i_value_entry();
+  return adapter()->get_c2i_inline_entry();
 }
 
 address Method::get_c2i_unverified_entry() {
   assert(adapter() != NULL, "must have");
   return adapter()->get_c2i_unverified_entry();
 }
 
-address Method::get_c2i_unverified_value_entry() {
+address Method::get_c2i_unverified_inline_entry() {
   assert(adapter() != NULL, "must have");
-  return adapter()->get_c2i_unverified_value_entry();
+  return adapter()->get_c2i_unverified_inline_entry();
 }
 
 address Method::get_c2i_no_clinit_check_entry() {
   assert(VM_Version::supports_fast_class_init_checks(), "");
   assert(adapter() != NULL, "must have");
@@ -355,12 +355,12 @@
   it->push(&_method_counters);
 
   Method* this_ptr = this;
   it->push_method_entry(&this_ptr, (intptr_t*)&_i2i_entry);
   it->push_method_entry(&this_ptr, (intptr_t*)&_from_compiled_entry);
-  it->push_method_entry(&this_ptr, (intptr_t*)&_from_compiled_value_ro_entry);
-  it->push_method_entry(&this_ptr, (intptr_t*)&_from_compiled_value_entry);
+  it->push_method_entry(&this_ptr, (intptr_t*)&_from_compiled_inline_ro_entry);
+  it->push_method_entry(&this_ptr, (intptr_t*)&_from_compiled_inline_entry);
   it->push_method_entry(&this_ptr, (intptr_t*)&_from_interpreted_entry);
 }
 
 // Attempt to return method oop to original state.  Clear any pointers
 // (to objects outside the shared spaces).  We won't be able to predict
@@ -1070,16 +1070,16 @@
 void Method::clear_code() {
   // this may be NULL if c2i adapters have not been made yet
   // Only should happen at allocate time.
   if (adapter() == NULL) {
     _from_compiled_entry    = NULL;
-    _from_compiled_value_entry = NULL;
-    _from_compiled_value_ro_entry = NULL;
+    _from_compiled_inline_entry = NULL;
+    _from_compiled_inline_ro_entry = NULL;
   } else {
     _from_compiled_entry    = adapter()->get_c2i_entry();
-    _from_compiled_value_entry = adapter()->get_c2i_value_entry();
-    _from_compiled_value_ro_entry = adapter()->get_c2i_value_ro_entry();
+    _from_compiled_inline_entry = adapter()->get_c2i_inline_entry();
+    _from_compiled_inline_ro_entry = adapter()->get_c2i_inline_ro_entry();
   }
   OrderAccess::storestore();
   _from_interpreted_entry = _i2i_entry;
   OrderAccess::storestore();
   _code = NULL;
@@ -1125,16 +1125,16 @@
 
     _from_compiled_entry = cds_adapter->get_c2i_entry_trampoline();
     assert(*((int*)_from_compiled_entry) == 0,
            "instructions must be zeros during dump time, to be initialized at run time");
 
-    _from_compiled_value_ro_entry = cds_adapter->get_c2i_value_ro_entry_trampoline();
-    assert(*((int*)_from_compiled_value_ro_entry) == 0,
+    _from_compiled_inline_ro_entry = cds_adapter->get_c2i_inline_ro_entry_trampoline();
+    assert(*((int*)_from_compiled_inline_ro_entry) == 0,
            "instructions must be zeros during dump time, to be initialized at run time");
 
-    _from_compiled_value_entry = cds_adapter->get_c2i_value_entry_trampoline();
-    assert(*((int*)_from_compiled_value_entry) == 0,
+    _from_compiled_inline_entry = cds_adapter->get_c2i_inline_entry_trampoline();
+    assert(*((int*)_from_compiled_inline_entry) == 0,
            "instructions must be zeros during dump time, to be initialized at run time");
   }
 
   if (is_native()) {
     *native_function_addr() = NULL;
@@ -1284,17 +1284,17 @@
   }
 
   if (mh->is_shared()) {
     assert(mh->adapter() == adapter, "must be");
     assert(mh->_from_compiled_entry != NULL, "must be");
-    assert(mh->_from_compiled_value_entry != NULL, "must be");
-    assert(mh->_from_compiled_value_ro_entry != NULL, "must be");
+    assert(mh->_from_compiled_inline_entry != NULL, "must be");
+    assert(mh->_from_compiled_inline_ro_entry != NULL, "must be");
   } else {
     mh->set_adapter_entry(adapter);
     mh->_from_compiled_entry = adapter->get_c2i_entry();
-    mh->_from_compiled_value_entry = adapter->get_c2i_value_entry();
-    mh->_from_compiled_value_ro_entry = adapter->get_c2i_value_ro_entry();
+    mh->_from_compiled_inline_entry = adapter->get_c2i_inline_entry();
+    mh->_from_compiled_inline_ro_entry = adapter->get_c2i_inline_ro_entry();
   }
   return adapter->get_c2i_entry();
 }
 
 void Method::restore_unshareable_info(TRAPS) {
@@ -1322,18 +1322,18 @@
 }
 
 address Method::from_compiled_entry_no_trampoline(bool caller_is_c1) const {
   CompiledMethod *code = Atomic::load_acquire(&_code);
   if (caller_is_c1) {
-    // C1 - value arguments are passed as objects
+    // C1 - inline type arguments are passed as objects
     if (code) {
-      return code->verified_value_entry_point();
+      return code->verified_inline_entry_point();
     } else {
-      return adapter()->get_c2i_value_entry();
+      return adapter()->get_c2i_inline_entry();
     }
   } else {
-    // C2 - value arguments may be passed as fields
+    // C2 - inline type arguments may be passed as fields
     if (code) {
       return code->verified_entry_point();
     } else {
       return adapter()->get_c2i_entry();
     }
@@ -1351,20 +1351,20 @@
   debug_only(NoSafepointVerifier nsv;)
   assert(_from_compiled_entry != NULL, "must be set");
   return _from_compiled_entry;
 }
 
-address Method::verified_value_code_entry() {
+address Method::verified_inline_code_entry() {
   debug_only(NoSafepointVerifier nsv;)
-  assert(_from_compiled_value_entry != NULL, "must be set");
-  return _from_compiled_value_entry;
+  assert(_from_compiled_inline_entry != NULL, "must be set");
+  return _from_compiled_inline_entry;
 }
 
-address Method::verified_value_ro_code_entry() {
+address Method::verified_inline_ro_code_entry() {
   debug_only(NoSafepointVerifier nsv;)
-  assert(_from_compiled_value_ro_entry != NULL, "must be set");
-  return _from_compiled_value_ro_entry;
+  assert(_from_compiled_inline_ro_entry != NULL, "must be set");
+  return _from_compiled_inline_ro_entry;
 }
 
 // Check that if an nmethod ref exists, it has a backlink to this or no backlink at all
 // (could be racing a deopt).
 // Not inline to avoid circular ref.
@@ -1394,12 +1394,12 @@
     mh->set_highest_comp_level(comp_level);
   }
 
   OrderAccess::storestore();
   mh->_from_compiled_entry = code->verified_entry_point();
-  mh->_from_compiled_value_entry = code->verified_value_entry_point();
-  mh->_from_compiled_value_ro_entry = code->verified_value_ro_entry_point();
+  mh->_from_compiled_inline_entry = code->verified_inline_entry_point();
+  mh->_from_compiled_inline_ro_entry = code->verified_inline_ro_entry_point();
   OrderAccess::storestore();
   // Instantly compiled code can execute.
   if (!mh->is_method_handle_intrinsic())
     mh->_from_interpreted_entry = mh->get_i2c_entry();
 }
