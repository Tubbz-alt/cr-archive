diff a/src/hotspot/share/oops/inlineKlass.cpp b/src/hotspot/share/oops/inlineKlass.cpp
--- a/src/hotspot/share/oops/inlineKlass.cpp
+++ b/src/hotspot/share/oops/inlineKlass.cpp
@@ -343,11 +343,11 @@
         *((Array<VMRegPair>**)adr_return_regs()) = return_regs;
         for (int i = 0; i < nb_fields; i++) {
           return_regs->at_put(i, regs[i]);
         }
 
-        BufferedValueTypeBlob* buffered_blob = SharedRuntime::generate_buffered_inline_type_adapter(this);
+        BufferedInlineTypeBlob* buffered_blob = SharedRuntime::generate_buffered_inline_type_adapter(this);
         *((address*)adr_pack_handler()) = buffered_blob->pack_fields();
         *((address*)adr_pack_handler_jobject()) = buffered_blob->pack_fields_jobject();
         *((address*)adr_unpack_handler()) = buffered_blob->unpack_fields();
         assert(CodeCache::find_blob(pack_handler()) == buffered_blob, "lost track of blob");
         assert(can_be_returned_as_fields(), "sanity");
@@ -376,11 +376,11 @@
 }
 
 void InlineKlass::cleanup_blobs() {
   if (pack_handler() != NULL) {
     CodeBlob* buffered_blob = CodeCache::find_blob(pack_handler());
-    assert(buffered_blob->is_buffered_value_type_blob(), "bad blob type");
+    assert(buffered_blob->is_buffered_inline_type_blob(), "bad blob type");
     BufferBlob::free((BufferBlob*)buffered_blob);
     *((address*)adr_pack_handler()) = NULL;
     *((address*)adr_pack_handler_jobject()) = NULL;
     *((address*)adr_unpack_handler()) = NULL;
   }
