diff a/src/hotspot/share/oops/method.hpp b/src/hotspot/share/oops/method.hpp
--- a/src/hotspot/share/oops/method.hpp
+++ b/src/hotspot/share/oops/method.hpp
@@ -105,12 +105,12 @@
   // Entry point for calling both from and to the interpreter.
   address _i2i_entry;           // All-args-on-stack calling convention
   // Entry point for calling from compiled code, to compiled code if it exists
   // or else the interpreter.
   volatile address _from_compiled_entry;          // Cache of: _code ? _code->verified_entry_point()          : _adapter->c2i_entry()
-  volatile address _from_compiled_value_ro_entry; // Cache of: _code ? _code->verified_value_ro_entry_point() : _adapter->c2i_value_ro_entry()
-  volatile address _from_compiled_value_entry;    // Cache of: _code ? _code->verified_value_entry_point()    : _adapter->c2i_value_entry()
+  volatile address _from_compiled_inline_ro_entry; // Cache of: _code ? _code->verified_inline_ro_entry_point() : _adapter->c2i_inline_ro_entry()
+  volatile address _from_compiled_inline_entry;    // Cache of: _code ? _code->verified_inline_entry_point()    : _adapter->c2i_inline_entry()
   // The entry point for calling both from and to compiled code is
   // "_code->entry_point()".  Because of tiered compilation and de-opt, this
   // field can come and go.  It can transition from NULL to not-null at any
   // time (whenever a compile completes).  It can transition from not-null to
   // NULL only at safepoints (because of a de-opt).
@@ -146,12 +146,12 @@
   void set_constMethod(ConstMethod* xconst)    { _constMethod = xconst; }
 
 
   static address make_adapters(const methodHandle& mh, TRAPS);
   address from_compiled_entry() const;
-  address from_compiled_value_ro_entry() const;
-  address from_compiled_value_entry() const;
+  address from_compiled_inline_ro_entry() const;
+  address from_compiled_inline_entry() const;
   address from_compiled_entry_no_trampoline(bool caller_is_c1) const;
   address from_interpreted_entry() const;
 
   // access flag
   AccessFlags access_flags() const               { return _access_flags;  }
@@ -475,12 +475,12 @@
   // if this (shared) method were mapped into another JVM.
   void remove_unshareable_info();
 
   // nmethod/verified compiler entry
   address verified_code_entry();
-  address verified_value_code_entry();
-  address verified_value_ro_code_entry();
+  address verified_inline_code_entry();
+  address verified_inline_ro_code_entry();
   bool check_code() const;      // Not inline to avoid circular ref
   CompiledMethod* volatile code() const;
 
   // Locks CompiledMethod_lock if not held.
   void unlink_code(CompiledMethod *compare);
@@ -503,22 +503,22 @@
     constMethod()->update_adapter_trampoline(adapter);
   }
   void set_from_compiled_entry(address entry) {
     _from_compiled_entry = entry;
   }
-  void set_from_compiled_value_ro_entry(address entry) {
-    _from_compiled_value_ro_entry = entry;
+  void set_from_compiled_inline_ro_entry(address entry) {
+    _from_compiled_inline_ro_entry = entry;
   }
-  void set_from_compiled_value_entry(address entry) {
-    _from_compiled_value_entry = entry;
+  void set_from_compiled_inline_entry(address entry) {
+    _from_compiled_inline_entry = entry;
   }
 
   address get_i2c_entry();
   address get_c2i_entry();
-  address get_c2i_value_entry();
+  address get_c2i_inline_entry();
   address get_c2i_unverified_entry();
-  address get_c2i_unverified_value_entry();
+  address get_c2i_unverified_inline_entry();
   address get_c2i_no_clinit_check_entry();
   AdapterHandlerEntry* adapter() const {
     return constMethod()->adapter();
   }
   // setup entry points
@@ -738,12 +738,12 @@
 
   // interpreter support
   static ByteSize const_offset()                 { return byte_offset_of(Method, _constMethod       ); }
   static ByteSize access_flags_offset()          { return byte_offset_of(Method, _access_flags      ); }
   static ByteSize from_compiled_offset()         { return byte_offset_of(Method, _from_compiled_entry); }
-  static ByteSize from_compiled_value_offset()   { return byte_offset_of(Method, _from_compiled_value_entry); }
-  static ByteSize from_compiled_value_ro_offset(){ return byte_offset_of(Method, _from_compiled_value_ro_entry); }
+  static ByteSize from_compiled_inline_offset()  { return byte_offset_of(Method, _from_compiled_inline_entry); }
+  static ByteSize from_compiled_inline_ro_offset(){ return byte_offset_of(Method, _from_compiled_inline_ro_entry); }
   static ByteSize code_offset()                  { return byte_offset_of(Method, _code); }
   static ByteSize flags_offset()                 { return byte_offset_of(Method, _flags); }
   static ByteSize method_data_offset()           {
     return byte_offset_of(Method, _method_data);
   }
