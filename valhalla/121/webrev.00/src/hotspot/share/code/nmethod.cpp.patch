diff a/src/hotspot/share/code/nmethod.cpp b/src/hotspot/share/code/nmethod.cpp
--- a/src/hotspot/share/code/nmethod.cpp
+++ b/src/hotspot/share/code/nmethod.cpp
@@ -633,13 +633,13 @@
     _comp_level              = CompLevel_none;
     _entry_point             = code_begin()          + offsets->value(CodeOffsets::Entry);
     _verified_entry_point    = code_begin()          + offsets->value(CodeOffsets::Verified_Entry);
 
     assert(!method->has_scalarized_args(), "scalarized native wrappers not supported yet"); // for the next 3 fields
-    _value_entry_point       = _entry_point;
-    _verified_value_entry_point = _verified_entry_point;
-    _verified_value_ro_entry_point = _verified_entry_point;
+    _inline_entry_point       = _entry_point;
+    _verified_inline_entry_point = _verified_entry_point;
+    _verified_inline_ro_entry_point = _verified_entry_point;
 
     _osr_entry_point         = NULL;
     _exception_cache         = NULL;
     _pc_desc_container.reset_to(NULL);
     _hotness_counter         = NMethodSweeper::hotness_counter_reset_val();
@@ -808,13 +808,13 @@
 #else
     _nmethod_end_offset      = _nul_chk_table_offset + align_up(nul_chk_table->size_in_bytes(), oopSize);
 #endif
     _entry_point             = code_begin()          + offsets->value(CodeOffsets::Entry);
     _verified_entry_point    = code_begin()          + offsets->value(CodeOffsets::Verified_Entry);
-    _value_entry_point       = code_begin()          + offsets->value(CodeOffsets::Value_Entry);
-    _verified_value_entry_point = code_begin()       + offsets->value(CodeOffsets::Verified_Value_Entry);
-    _verified_value_ro_entry_point = code_begin()    + offsets->value(CodeOffsets::Verified_Value_Entry_RO);
+    _inline_entry_point       = code_begin()          + offsets->value(CodeOffsets::Inline_Entry);
+    _verified_inline_entry_point = code_begin()       + offsets->value(CodeOffsets::Verified_Inline_Entry);
+    _verified_inline_ro_entry_point = code_begin()    + offsets->value(CodeOffsets::Verified_Inline_Entry_RO);
     _osr_entry_point         = code_begin()          + offsets->value(CodeOffsets::OSR_Entry);
     _exception_cache         = NULL;
     _scopes_data_begin       = (address) this + scopes_data_offset;
 
     _pc_desc_container.reset_to(scopes_pcs_begin());
@@ -3090,14 +3090,14 @@
 
 const char* nmethod::nmethod_section_label(address pos) const {
   const char* label = NULL;
   if (pos == code_begin())                                              label = "[Instructions begin]";
   if (pos == entry_point())                                             label = "[Entry Point]";
-  if (pos == value_entry_point())                                       label = "[Value Entry Point]";
+  if (pos == inline_entry_point())                                       label = "[Value Entry Point]";
   if (pos == verified_entry_point())                                    label = "[Verified Entry Point]";
-  if (pos == verified_value_entry_point())                              label = "[Verified Value Entry Point]";
-  if (pos == verified_value_ro_entry_point())                           label = "[Verified Value Entry Point (RO)]";
+  if (pos == verified_inline_entry_point())                              label = "[Verified Value Entry Point]";
+  if (pos == verified_inline_ro_entry_point())                           label = "[Verified Value Entry Point (RO)]";
   if (has_method_handle_invokes() && (pos == deopt_mh_handler_begin())) label = "[Deopt MH Handler Code]";
   if (pos == consts_begin() && pos != insts_begin())                    label = "[Constants]";
   // Check stub_code before checking exception_handler or deopt_handler.
   if (pos == this->stub_begin())                                        label = "[Stub Code]";
   if (JVMCI_ONLY(_exception_offset >= 0 &&) pos == exception_begin())           label = "[Exception Handler]";
@@ -3118,14 +3118,14 @@
 void nmethod::print_nmethod_labels(outputStream* stream, address block_begin, bool print_section_labels) const {
   if (print_section_labels) {
     int n = 0;
     // Multiple entry points may be at the same position. Print them all.
     n += maybe_print_entry_label(stream, block_begin, entry_point(),                   "[Entry Point]");
-    n += maybe_print_entry_label(stream, block_begin, value_entry_point(),             "[Value Entry Point]");
+    n += maybe_print_entry_label(stream, block_begin, inline_entry_point(),             "[Value Entry Point]");
     n += maybe_print_entry_label(stream, block_begin, verified_entry_point(),          "[Verified Entry Point]");
-    n += maybe_print_entry_label(stream, block_begin, verified_value_entry_point(),    "[Verified Value Entry Point]");
-    n += maybe_print_entry_label(stream, block_begin, verified_value_ro_entry_point(), "[Verified Value Entry Point (RO)]");
+    n += maybe_print_entry_label(stream, block_begin, verified_inline_entry_point(),    "[Verified Value Entry Point]");
+    n += maybe_print_entry_label(stream, block_begin, verified_inline_ro_entry_point(), "[Verified Value Entry Point (RO)]");
     if (n == 0) {
       const char* label = nmethod_section_label(block_begin);
       if (label != NULL) {
         stream->bol();
         stream->print_cr("%s", label);
@@ -3140,12 +3140,12 @@
   if (m == NULL || is_osr_method()) {
     return;
   }
 
   // Print the name of the method (only once)
-  address low = MIN4(entry_point(), verified_entry_point(), verified_value_entry_point(), verified_value_ro_entry_point());
-  low = MIN2(low, value_entry_point());
+  address low = MIN4(entry_point(), verified_entry_point(), verified_inline_entry_point(), verified_inline_ro_entry_point());
+  low = MIN2(low, inline_entry_point());
   assert(low != 0, "sanity");
   if (block_begin == low) {
     stream->print("  # ");
     m->print_value_on(stream);
     stream->cr();
@@ -3157,14 +3157,14 @@
     const GrowableArray<SigEntry>* sig_cc;
     const VMRegPair* regs;
     if (block_begin == verified_entry_point()) {
       sig_cc = &ces->sig_cc();
       regs = ces->regs_cc();
-    } else if (block_begin == verified_value_entry_point()) {
+    } else if (block_begin == verified_inline_entry_point()) {
       sig_cc = &ces->sig();
       regs = ces->regs();
-    } else if (block_begin == verified_value_ro_entry_point()) {
+    } else if (block_begin == verified_inline_ro_entry_point()) {
       sig_cc = &ces->sig_cc_ro();
       regs = ces->regs_cc_ro();
     } else {
       return;
     }
@@ -3182,11 +3182,11 @@
       } else {
         assert(type2size[t] == 1, "size is 1 or 2");
       }
     }
     bool has_this = !m->is_static();
-    if (ces->has_value_recv() && block_begin == verified_entry_point()) {
+    if (ces->has_inline_recv() && block_begin == verified_entry_point()) {
       // <this> argument is scalarized for verified_entry_point()
       has_this = false;
     }
     const char* spname = "sp"; // make arch-specific?
     int stack_slot_offset = this->frame_size() * wordSize;
