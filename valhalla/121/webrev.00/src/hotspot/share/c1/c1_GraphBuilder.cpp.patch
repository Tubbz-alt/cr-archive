diff a/src/hotspot/share/c1/c1_GraphBuilder.cpp b/src/hotspot/share/c1/c1_GraphBuilder.cpp
--- a/src/hotspot/share/c1/c1_GraphBuilder.cpp
+++ b/src/hotspot/share/c1/c1_GraphBuilder.cpp
@@ -25,17 +25,19 @@
 #include "precompiled.hpp"
 #include "c1/c1_CFGPrinter.hpp"
 #include "c1/c1_Canonicalizer.hpp"
 #include "c1/c1_Compilation.hpp"
 #include "c1/c1_GraphBuilder.hpp"
+
 #include "c1/c1_InstructionPrinter.hpp"
 #include "ci/ciCallSite.hpp"
 #include "ci/ciField.hpp"
+#include "ci/ciFlatArrayKlass.hpp"
+#include "ci/ciInlineKlass.hpp"
 #include "ci/ciKlass.hpp"
 #include "ci/ciMemberName.hpp"
 #include "ci/ciUtilities.inline.hpp"
-#include "ci/ciValueKlass.hpp"
 #include "compiler/compilationPolicy.hpp"
 #include "compiler/compileBroker.hpp"
 #include "compiler/compilerEvent.hpp"
 #include "interpreter/bytecode.hpp"
 #include "jfr/jfrEvents.hpp"
@@ -656,11 +658,11 @@
       _fields.at(index)->kill();
     }
   }
 
   // Record this newly allocated object
-  void new_instance(NewValueTypeInstance* object) {
+  void new_instance(NewInlineTypeInstance* object) {
     int index = _newobjects.length();
     _newobjects.append(object);
     if (_fields.at_grow(index, NULL) == NULL) {
       _fields.at_put(index, new FieldBuffer());
     } else {
@@ -1011,12 +1013,12 @@
 
   LoadIndexed* load_indexed = NULL;
   Instruction* result = NULL;
   if (array->is_loaded_flattened_array()) {
     ciType* array_type = array->declared_type();
-    ciValueKlass* elem_klass = array_type->as_value_array_klass()->element_klass()->as_value_klass();
-    NewValueTypeInstance* new_instance = new NewValueTypeInstance(elem_klass, state_before, false);
+    ciInlineKlass* elem_klass = array_type->as_flat_array_klass()->element_klass()->as_inline_klass();
+    NewInlineTypeInstance* new_instance = new NewInlineTypeInstance(elem_klass, state_before, false);
     _memory->new_instance(new_instance);
     apush(append_split(new_instance));
     load_indexed = new LoadIndexed(array, index, length, type, state_before);
     load_indexed->set_vt(new_instance);
   } else {
@@ -1291,11 +1293,11 @@
       ciKlass* right_klass = y->as_loaded_klass_or_null();
 
       if (left_klass == NULL || right_klass == NULL) {
         // The klass is still unloaded, or came from a Phi node. Go slow case;
         subst_check = true;
-      } else if (left_klass->can_be_value_klass() || right_klass->can_be_value_klass()) {
+      } else if (left_klass->can_be_inline_klass() || right_klass->can_be_inline_klass()) {
         // Either operand may be a value object, but we're not sure. Go slow case;
         subst_check = true;
       } else {
         // No need to do substitutability check
       }
@@ -1704,12 +1706,12 @@
     default:
       return new Constant(value);
   }
 }
 
-void GraphBuilder::copy_value_content(ciValueKlass* vk, Value src, int src_off, Value dest, int dest_off,
-    ValueStack* state_before, bool needs_patching) {
+void GraphBuilder::copy_inline_content(ciInlineKlass* vk, Value src, int src_off, Value dest, int dest_off,
+                                       ValueStack* state_before, bool needs_patching) {
   src->set_escaped();
   for (int i = 0; i < vk->nof_nonstatic_fields(); i++) {
     ciField* inner_field = vk->nonstatic_field_at(i);
     assert(!inner_field->is_flattened(), "the iteration over nested fields is handled by the loop itself");
     int off = inner_field->offset() - vk->first_field_offset();
@@ -1811,11 +1813,11 @@
         if (!const_oop->is_null_object() && const_oop->is_loaded()) {
           ciConstant field_value = field->constant_value_of(const_oop);
           if (field_value.is_valid()) {
             if (field->signature()->is_Q_signature() && field_value.is_null_or_zero()) {
               // Non-flattened inline type field. Replace null by the default value.
-              constant = new Constant(new InstanceConstant(field->type()->as_value_klass()->default_value_instance()));
+              constant = new Constant(new InstanceConstant(field->type()->as_inline_klass()->default_instance()));
             } else {
               constant = make_constant(field_value, field);
             }
             // For CallSite objects add a dependency for invalidation of the optimization.
             if (field->is_call_site_target()) {
@@ -1859,20 +1861,20 @@
             push(type, replacement);
           } else {
             push(type, append(load));
           }
         } else { // flattened field, not optimized solution: re-instantiate the flattened value
-          assert(field->type()->is_valuetype(), "Sanity check");
-          ciValueKlass* value_klass = field->type()->as_value_klass();
-          int flattening_offset = field->offset() - value_klass->first_field_offset();
-          assert(field->type()->is_valuetype(), "Sanity check");
+          assert(field->type()->is_inlinetype(), "Sanity check");
+          ciInlineKlass* inline_klass = field->type()->as_inline_klass();
+          int flattening_offset = field->offset() - inline_klass->first_field_offset();
+          assert(field->type()->is_inlinetype(), "Sanity check");
           scope()->set_wrote_final();
           scope()->set_wrote_fields();
-          NewValueTypeInstance* new_instance = new NewValueTypeInstance(value_klass, state_before, false);
+          NewInlineTypeInstance* new_instance = new NewInlineTypeInstance(inline_klass, state_before, false);
           _memory->new_instance(new_instance);
           apush(append_split(new_instance));
-          copy_value_content(value_klass, obj, field->offset(), new_instance, value_klass->first_field_offset(),
+          copy_inline_content(inline_klass, obj, field->offset(), new_instance, inline_klass->first_field_offset(),
                        state_before, needs_patching);
         }
       }
       break;
     }
@@ -1894,14 +1896,14 @@
         if (!needs_patching) store = _memory->store(store);
         if (store != NULL) {
           append(store);
         }
       } else {
-        assert(field->type()->is_valuetype(), "Sanity check");
-        ciValueKlass* value_klass = field->type()->as_value_klass();
-        int flattening_offset = field->offset() - value_klass->first_field_offset();
-        copy_value_content(value_klass, val, value_klass->first_field_offset(), obj, field->offset(),
+        assert(field->type()->is_inlinetype(), "Sanity check");
+        ciInlineKlass* inline_klass = field->type()->as_inline_klass();
+        int flattening_offset = field->offset() - inline_klass->first_field_offset();
+        copy_inline_content(inline_klass, val, inline_klass->first_field_offset(), obj, field->offset(),
                    state_before, needs_patching);
       }
       break;
     }
     default:
@@ -1958,11 +1960,11 @@
     default: astore_index = -1;
     }
 
     if (astore_index >= 0 && obj == state()->local_at(astore_index)) {
       // We have a sequence like this, where we load a value object from a local slot,
-      // and overwrite the same local slot with a modified copy of the value object.
+      // and overwrite the same local slot with a modified copy of the inline object.
       //      defaultvalue #1 // class compiler/valhalla/valuetypes/MyValue1
       //      astore 9
       //      ...
       //      iload_0
       //      aload 9
@@ -1978,27 +1980,27 @@
       stream()->next(); // skip the next astore/astore_n bytecode.
       return;
     }
   }
 
-  assert(holder->is_valuetype(), "must be a value klass");
+  assert(holder->is_inlinetype(), "must be an inline klass");
   // Save the entire state and re-execute on deopt when executing withfield
   state_before->set_should_reexecute(true);
-  NewValueTypeInstance* new_instance = new NewValueTypeInstance(holder->as_value_klass(), state_before, false);
+  NewInlineTypeInstance* new_instance = new NewInlineTypeInstance(holder->as_inline_klass(), state_before, false);
   _memory->new_instance(new_instance);
   apush(append_split(new_instance));
 
   for (int i = 0; i < holder->nof_nonstatic_fields(); i++) {
     ciField* field = holder->nonstatic_field_at(i);
     int off = field->offset();
 
     if (field->offset() != offset) {
       if (field->is_flattened()) {
-        assert(field->type()->is_valuetype(), "Sanity check");
-        assert(field->type()->is_valuetype(), "Only value types can be flattened");
-        ciValueKlass* vk = field->type()->as_value_klass();
-        copy_value_content(vk, obj, off, new_instance, vk->first_field_offset(), state_before, needs_patching);
+        assert(field->type()->is_inlinetype(), "Sanity check");
+        assert(field->type()->is_inlinetype(), "Only inline types can be flattened");
+        ciInlineKlass* vk = field->type()->as_inline_klass();
+        copy_inline_content(vk, obj, off, new_instance, vk->first_field_offset(), state_before, needs_patching);
       } else {
         // Only load those fields who are not modified
         LoadField* load = new LoadField(obj, off, field, false, state_before, needs_patching);
         Value replacement = append(load);
         StoreField* store = new StoreField(new_instance, off, field, replacement, false, state_before, needs_patching);
@@ -2011,13 +2013,13 @@
   if (field_modify->type()->basic_type() == T_BOOLEAN) {
     Value mask = append(new Constant(new IntConstant(1)));
     val = append(new LogicOp(Bytecodes::_iand, val, mask));
   }
   if (field_modify->is_flattened()) {
-    assert(field_modify->type()->is_valuetype(), "Only value types can be flattened");
-    ciValueKlass* vk = field_modify->type()->as_value_klass();
-    copy_value_content(vk, val, vk->first_field_offset(), new_instance, field_modify->offset(), state_before, needs_patching);
+    assert(field_modify->type()->is_inlinetype(), "Only inline types can be flattened");
+    ciInlineKlass* vk = field_modify->type()->as_inline_klass();
+    copy_inline_content(vk, val, vk->first_field_offset(), new_instance, field_modify->offset(), state_before, needs_patching);
   } else {
     StoreField* store = new StoreField(new_instance, offset, field_modify, val, false, state_before, needs_patching);
     append(store);
   }
 }
@@ -2367,11 +2369,11 @@
   for (int i=0; i<args->length(); i++) {
     args->at(0)->set_escaped();
   }
 
   Invoke* result = new Invoke(code, result_type, recv, args, vtable_index, target, state_before,
-                              declared_signature->return_type()->is_valuetype());
+                              declared_signature->return_type()->is_inlinetype());
   // push result
   append_split(result);
 
   if (result_type != voidType) {
     if (method()->is_strict()) {
@@ -2389,21 +2391,21 @@
 void GraphBuilder::new_instance(int klass_index) {
   ValueStack* state_before = copy_state_exhandling();
   bool will_link;
   ciKlass* klass = stream()->get_klass(will_link);
   assert(klass->is_instance_klass(), "must be an instance klass");
-  assert(!klass->is_valuetype(), "must not be a value klass");
+  assert(!klass->is_inlinetype(), "must not be an inline klass");
   NewInstance* new_instance = new NewInstance(klass->as_instance_klass(), state_before, stream()->is_unresolved_klass());
   _memory->new_instance(new_instance);
   apush(append_split(new_instance));
 }
 
 void GraphBuilder::default_value(int klass_index) {
   bool will_link;
   if (!stream()->is_unresolved_klass()) {
-    ciValueKlass* vk = stream()->get_klass(will_link)->as_value_klass();
-    apush(append(new Constant(new InstanceConstant(vk->default_value_instance()))));
+    ciInlineKlass* vk = stream()->get_klass(will_link)->as_inline_klass();
+    apush(append(new Constant(new InstanceConstant(vk->default_instance()))));
   } else {
     ValueStack* state_before = copy_state_before();
     apush(append_split(new DefaultValue(state_before)));
   }
 }
@@ -2483,32 +2485,32 @@
   }
 }
 
 
 void GraphBuilder::monitorenter(Value x, int bci) {
-  bool maybe_valuetype = false;
+  bool maybe_inlinetype = false;
   if (bci == InvocationEntryBci) {
     // Called by GraphBuilder::inline_sync_entry.
 #ifdef ASSERT
     ciType* obj_type = x->declared_type();
-    assert(obj_type == NULL || !obj_type->is_valuetype(), "valuetypes cannot have synchronized methods");
+    assert(obj_type == NULL || !obj_type->is_inlinetype(), "inline types cannot have synchronized methods");
 #endif
   } else {
     // We are compiling a monitorenter bytecode
     if (EnableValhalla) {
       ciType* obj_type = x->declared_type();
-      if (obj_type == NULL || obj_type->as_klass()->can_be_value_klass()) {
-        // If we're (possibly) locking on a valuetype, check for markWord::always_locked_pattern
+      if (obj_type == NULL || obj_type->as_klass()->can_be_inline_klass()) {
+        // If we're (possibly) locking on an inline type, check for markWord::always_locked_pattern
         // and throw IMSE. (obj_type is null for Phi nodes, so let's just be conservative).
-        maybe_valuetype = true;
+        maybe_inlinetype = true;
       }
     }
   }
 
   // save state before locking in case of deoptimization after a NullPointerException
   ValueStack* state_before = copy_state_for_exception_with_bci(bci);
-  append_with_bci(new MonitorEnter(x, state()->lock(x), state_before, maybe_valuetype), bci);
+  append_with_bci(new MonitorEnter(x, state()->lock(x), state_before, maybe_inlinetype), bci);
   kill_all();
 }
 
 
 void GraphBuilder::monitorexit(Value x, int bci) {
@@ -3454,11 +3456,11 @@
   // Set up locals for receiver
   int idx = 0;
   if (!method()->is_static()) {
     // we should always see the receiver
     state->store_local(idx, new Local(method()->holder(), objectType, idx,
-             /*receiver*/ true, /*never_null*/ method()->holder()->is_value_array_klass()));
+             /*receiver*/ true, /*never_null*/ method()->holder()->is_flat_array_klass()));
     idx = 1;
   }
 
   // Set up locals for incoming arguments
   ciSignature* sig = method()->signature();
@@ -3466,11 +3468,11 @@
     ciType* type = sig->type_at(i);
     BasicType basic_type = type->basic_type();
     // don't allow T_ARRAY to propagate into locals types
     if (is_reference_type(basic_type)) basic_type = T_OBJECT;
     ValueType* vt = as_ValueType(basic_type);
-    state->store_local(idx, new Local(type, vt, idx, false, type->is_valuetype()));
+    state->store_local(idx, new Local(type, vt, idx, false, type->is_inlinetype()));
     idx += type->size();
   }
 
   // lock synchronized method
   if (method()->is_synchronized()) {
