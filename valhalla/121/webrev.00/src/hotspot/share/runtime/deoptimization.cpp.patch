diff a/src/hotspot/share/runtime/deoptimization.cpp b/src/hotspot/share/runtime/deoptimization.cpp
--- a/src/hotspot/share/runtime/deoptimization.cpp
+++ b/src/hotspot/share/runtime/deoptimization.cpp
@@ -232,11 +232,11 @@
     }
 #endif
   }
   if (save_oop_result || vk != NULL) {
     // Restore result.
-    assert(return_oops.length() == 1, "no value type");
+    assert(return_oops.length() == 1, "no inline type");
     deoptee.set_saved_oop_result(&map, return_oops.pop()());
   }
   return realloc_failures;
 }
 
@@ -1034,11 +1034,11 @@
       if (obj == NULL) {
         obj = ik->allocate_instance(THREAD);
       }
     } else if (k->is_flatArray_klass()) {
       FlatArrayKlass* ak = FlatArrayKlass::cast(k);
-      // Value type array must be zeroed because not all memory is reassigned
+      // Inline type array must be zeroed because not all memory is reassigned
       obj = ak->allocate(sv->field_size(), THREAD);
     } else if (k->is_typeArray_klass()) {
       TypeArrayKlass* ak = TypeArrayKlass::cast(k);
       assert(sv->field_size() % type2size[ak->element_type()] == 0, "non-integral array length");
       int len = sv->field_size() / type2size[ak->element_type()];
@@ -1281,11 +1281,11 @@
         field._type = Signature::basic_type(fs.signature());
         if (field._type == T_INLINE_TYPE) {
           field._type = T_OBJECT;
         }
         if (fs.is_inlined()) {
-          // Resolve klass of flattened value type field
+          // Resolve klass of flattened inline type field
           Klass* vk = klass->get_inline_type_field_klass(fs.index());
           field._klass = InlineKlass::cast(vk);
           field._type = T_INLINE_TYPE;
         }
         fields->append(field);
@@ -1306,11 +1306,11 @@
         assert(value->type() == T_OBJECT, "Agreement.");
         obj->obj_field_put(offset, value->get_obj()());
         break;
 
       case T_INLINE_TYPE: {
-        // Recursively re-assign flattened value type fields
+        // Recursively re-assign flattened inline type fields
         InstanceKlass* vk = fields->at(i)._klass;
         assert(vk != NULL, "must be resolved");
         offset -= InlineKlass::cast(vk)->first_field_offset(); // Adjust offset to omit oop header
         svIndex = reassign_fields_by_klass(vk, fr, reg_map, sv, svIndex, obj, skip_internal, offset, CHECK_0);
         continue; // Continue because we don't need to increment svIndex
