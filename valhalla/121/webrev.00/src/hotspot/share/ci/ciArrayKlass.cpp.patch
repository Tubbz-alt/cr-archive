diff a/src/hotspot/share/ci/ciArrayKlass.cpp b/src/hotspot/share/ci/ciArrayKlass.cpp
--- a/src/hotspot/share/ci/ciArrayKlass.cpp
+++ b/src/hotspot/share/ci/ciArrayKlass.cpp
@@ -22,16 +22,16 @@
  *
  */
 
 #include "precompiled.hpp"
 #include "ci/ciArrayKlass.hpp"
+#include "ci/ciFlatArrayKlass.hpp"
+#include "ci/ciInlineKlass.hpp"
 #include "ci/ciObjArrayKlass.hpp"
 #include "ci/ciTypeArrayKlass.hpp"
 #include "ci/ciUtilities.hpp"
 #include "ci/ciUtilities.inline.hpp"
-#include "ci/ciValueArrayKlass.hpp"
-#include "ci/ciValueKlass.hpp"
 
 // ciArrayKlass
 //
 // This class represents a Klass* in the HotSpot virtual machine
 // whose Klass part in an ArrayKlass.
@@ -79,11 +79,11 @@
     if (ek->is_type_array_klass()) {
       return ciType::make(ek->as_type_array_klass()->element_type());
     }
     return ek;
   } else {
-    return as_value_array_klass()->base_element_klass();
+    return as_flat_array_klass()->base_element_klass();
   }
 }
 
 
 // ------------------------------------------------------------------
@@ -102,12 +102,12 @@
 //
 // What type is obtained when this array is indexed as many times as possible?
 ciArrayKlass* ciArrayKlass::make(ciType* element_type) {
   if (element_type->is_primitive_type()) {
     return ciTypeArrayKlass::make(element_type->basic_type());
-  } else if (element_type->is_valuetype() && element_type->as_value_klass()->flatten_array()) {
-    return ciValueArrayKlass::make(element_type->as_klass());
+  } else if (element_type->is_inlinetype() && element_type->as_inline_klass()->flatten_array()) {
+    return ciFlatArrayKlass::make(element_type->as_klass());
   } else {
     return ciObjArrayKlass::make(element_type->as_klass());
   }
 }
 
