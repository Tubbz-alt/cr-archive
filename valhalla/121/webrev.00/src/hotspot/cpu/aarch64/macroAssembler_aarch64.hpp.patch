diff a/src/hotspot/cpu/aarch64/macroAssembler_aarch64.hpp b/src/hotspot/cpu/aarch64/macroAssembler_aarch64.hpp
--- a/src/hotspot/cpu/aarch64/macroAssembler_aarch64.hpp
+++ b/src/hotspot/cpu/aarch64/macroAssembler_aarch64.hpp
@@ -31,11 +31,11 @@
 #include "utilities/macros.hpp"
 #include "utilities/powerOfTwo.hpp"
 #include "runtime/signature.hpp"
 
 
-class ciValueKlass;
+class ciInlineKlass;
 
 // MacroAssembler extends Assembler by frequently used macros.
 //
 // Instructions for which a 'better' code sequence exists depending
 // on arguments should also go in here.
@@ -617,11 +617,11 @@
 
   void test_field_is_inline_type(Register flags, Register temp_reg, Label& is_inline);
   void test_field_is_not_inline_type(Register flags, Register temp_reg, Label& not_inline);
   void test_field_is_inlined(Register flags, Register temp_reg, Label& is_flattened);
 
-  // Check klass/oops is flat value type array (oop->_klass->_layout_helper & vt_bit)
+  // Check klass/oops is flat inline type array (oop->_klass->_layout_helper & vt_bit)
   void test_flattened_array_oop(Register klass, Register temp_reg, Label& is_flattened_array);
   void test_null_free_array_oop(Register oop, Register temp_reg, Label& is_null_free_array);
 
   static address target_addr_for_insn(address insn_addr, unsigned insn);
   static address target_addr_for_insn(address insn_addr) {
@@ -1197,27 +1197,27 @@
      reg_written
   };
 
   void verified_entry(Compile* C, int sp_inc);
 
-  int store_inline_type_fields_to_buf(ciValueKlass* vk, bool from_interpreter = true);
+  int store_inline_type_fields_to_buf(ciInlineKlass* vk, bool from_interpreter = true);
 
-// Unpack all value type arguments passed as oops
-  void unpack_value_args(Compile* C, bool receiver_only);
+// Unpack all inline type arguments passed as oops
+  void unpack_inline_args(Compile* C, bool receiver_only);
   bool move_helper(VMReg from, VMReg to, BasicType bt, RegState reg_state[], int ret_off, int extra_stack_offset);
-  bool unpack_value_helper(const GrowableArray<SigEntry>* sig, int& sig_index, VMReg from, VMRegPair* regs_to, int& to_index,
+  bool unpack_inline_helper(const GrowableArray<SigEntry>* sig, int& sig_index, VMReg from, VMRegPair* regs_to, int& to_index,
                            RegState reg_state[], int ret_off, int extra_stack_offset);
-  bool pack_value_helper(const GrowableArray<SigEntry>* sig, int& sig_index, int vtarg_index,
+  bool pack_inline_helper(const GrowableArray<SigEntry>* sig, int& sig_index, int vtarg_index,
                          VMReg to, VMRegPair* regs_from, int regs_from_count, int& from_index, RegState reg_state[],
                          int ret_off, int extra_stack_offset);
   void restore_stack(Compile* C);
 
-  int shuffle_value_args(bool is_packing, bool receiver_only, int extra_stack_offset,
+  int shuffle_inline_args(bool is_packing, bool receiver_only, int extra_stack_offset,
                          BasicType* sig_bt, const GrowableArray<SigEntry>* sig_cc,
                          int args_passed, int args_on_stack, VMRegPair* regs,
                          int args_passed_to, int args_on_stack_to, VMRegPair* regs_to);
-  bool shuffle_value_args_spill(bool is_packing,  const GrowableArray<SigEntry>* sig_cc, int sig_cc_index,
+  bool shuffle_inline_args_spill(bool is_packing,  const GrowableArray<SigEntry>* sig_cc, int sig_cc_index,
                                 VMRegPair* regs_from, int from_index, int regs_from_count,
                                 RegState* reg_state, int sp_inc, int extra_stack_offset);
   VMReg spill_reg_for(VMReg reg);
 
 
