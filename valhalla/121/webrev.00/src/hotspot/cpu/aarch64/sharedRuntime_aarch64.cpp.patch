diff a/src/hotspot/cpu/aarch64/sharedRuntime_aarch64.cpp b/src/hotspot/cpu/aarch64/sharedRuntime_aarch64.cpp
--- a/src/hotspot/cpu/aarch64/sharedRuntime_aarch64.cpp
+++ b/src/hotspot/cpu/aarch64/sharedRuntime_aarch64.cpp
@@ -437,27 +437,27 @@
   // restore sp
   __ leave();
   __ bind(L);
 }
 
-// For each value type argument, sig includes the list of fields of
-// the value type. This utility function computes the number of
-// arguments for the call if value types are passed by reference (the
+// For each inline type argument, sig includes the list of fields of
+// the inline type. This utility function computes the number of
+// arguments for the call if inline types are passed by reference (the
 // calling convention the interpreter expects).
 static int compute_total_args_passed_int(const GrowableArray<SigEntry>* sig_extended) {
   int total_args_passed = 0;
   if (InlineTypePassFieldsAsArgs) {
      for (int i = 0; i < sig_extended->length(); i++) {
        BasicType bt = sig_extended->at(i)._bt;
        if (SigEntry::is_reserved_entry(sig_extended, i)) {
          // Ignore reserved entry
        } else if (bt == T_INLINE_TYPE) {
-         // In sig_extended, a value type argument starts with:
+         // In sig_extended, an inline type argument starts with:
          // T_INLINE_TYPE, followed by the types of the fields of the
-         // value type and T_VOID to mark the end of the value
-         // type. Value types are flattened so, for instance, in the
-         // case of a value type with an int field and a value type
+         // inline type and T_VOID to mark the end of the value
+         // type. Inline types are flattened so, for instance, in the
+         // case of an inline type with an int field and an inline type
          // field that itself has 2 fields, an int and a long:
          // T_INLINE_TYPE T_INT T_INLINE_TYPE T_INT T_LONG T_VOID (second
          // slot for the T_LONG) T_VOID (inner T_INLINE_TYPE) T_VOID
          // (outer T_INLINE_TYPE)
          total_args_passed++;
@@ -546,44 +546,44 @@
                             Label& skip_fixup,
                             address start,
                             OopMapSet* oop_maps,
                             int& frame_complete,
                             int& frame_size_in_words,
-                            bool alloc_value_receiver) {
+                            bool alloc_inline_receiver) {
 
   // Before we get into the guts of the C2I adapter, see if we should be here
   // at all.  We've come from compiled code and are attempting to jump to the
   // interpreter, which means the caller made a static call to get here
   // (vcalls always get a compiled target if there is one).  Check for a
   // compiled target.  If there is one, we need to patch the caller's call.
   patch_callers_callsite(masm);
 
   __ bind(skip_fixup);
 
-  bool has_value_argument = false;
+  bool has_inline_argument = false;
 
   if (InlineTypePassFieldsAsArgs) {
       // Is there an inline type argument?
-     for (int i = 0; i < sig_extended->length() && !has_value_argument; i++) {
-       has_value_argument = (sig_extended->at(i)._bt == T_INLINE_TYPE);
+     for (int i = 0; i < sig_extended->length() && !has_inline_argument; i++) {
+       has_inline_argument = (sig_extended->at(i)._bt == T_INLINE_TYPE);
      }
-     if (has_value_argument) {
-      // There is at least a value type argument: we're coming from
-      // compiled code so we have no buffers to back the value
-      // types. Allocate the buffers here with a runtime call.
+     if (has_inline_argument) {
+      // There is at least an inline type argument: we're coming from
+      // compiled code so we have no buffers to back the inline types
+      // Allocate the buffers here with a runtime call.
       OopMap* map = RegisterSaver::save_live_registers(masm, 0, &frame_size_in_words);
 
       frame_complete = __ offset();
       address the_pc = __ pc();
 
       __ set_last_Java_frame(noreg, noreg, the_pc, rscratch1);
 
       __ mov(c_rarg0, rthread);
       __ mov(c_rarg1, r1);
-      __ mov(c_rarg2, (int64_t)alloc_value_receiver);
+      __ mov(c_rarg2, (int64_t)alloc_inline_receiver);
 
-      __ lea(rscratch1, RuntimeAddress(CAST_FROM_FN_PTR(address, SharedRuntime::allocate_value_types)));
+      __ lea(rscratch1, RuntimeAddress(CAST_FROM_FN_PTR(address, SharedRuntime::allocate_inline_types)));
       __ blr(rscratch1);
 
       oop_maps->add_gc_map((int)(__ pc() - start), map);
       __ reset_last_Java_frame(false);
 
@@ -655,14 +655,14 @@
       __ load_heap_oop(rscratch1, Address(r10, index));
       next_vt_arg++;
       next_arg_int++;
       int vt = 1;
       // write fields we get from compiled code in registers/stack
-      // slots to the buffer: we know we are done with that value type
+      // slots to the buffer: we know we are done with that inline type
       // argument when we hit the T_VOID that acts as an end of value
-      // type delimiter for this value type. Value types are flattened
-      // so we might encounter embedded value types. Each entry in
+      // type delimiter for this inline type. Inline types are flattened
+      // so we might encounter embedded inline types. Each entry in
       // sig_extended contains a field offset in the buffer.
       do {
         next_arg_comp++;
         BasicType bt = sig_extended->at(next_arg_comp)._bt;
         BasicType prev_bt = sig_extended->at(next_arg_comp - 1)._bt;
@@ -688,12 +688,12 @@
       __ str(rscratch1, Address(sp, st_off));
    }
 
   }
 
-// If a value type was allocated and initialized, apply post barrier to all oop fields
-  if (has_value_argument && has_oop_field) {
+// If an inline type was allocated and initialized, apply post barrier to all oop fields
+  if (has_inline_argument && has_oop_field) {
     __ push(r13); // save senderSP
     __ push(r1); // save callee
     // Allocate argument register save area
     if (frame::arg_reg_save_area_bytes != 0) {
       __ sub(sp, sp, frame::arg_reg_save_area_bytes);
@@ -801,11 +801,11 @@
 
   // Now generate the shuffle code.
   for (int i = 0; i < total_args_passed; i++) {
     BasicType bt = sig->at(i)._bt;
 
-    assert(bt != T_INLINE_TYPE, "i2c adapter doesn't unpack value args");
+    assert(bt != T_INLINE_TYPE, "i2c adapter doesn't unpack inline typ args");
     if (bt == T_VOID) {
       assert(i > 0 && (sig->at(i - 1)._bt == T_LONG || sig->at(i - 1)._bt == T_DOUBLE), "missing half");
       continue;
     }
 
@@ -952,11 +952,11 @@
   OopMapSet* oop_maps = new OopMapSet();
   int frame_complete = CodeOffsets::frame_never_safe;
   int frame_size_in_words = 0;
 
   // Scalarized c2i adapter with non-scalarized receiver (i.e., don't pack receiver)
-  address c2i_value_ro_entry = __ pc();
+  address c2i_inline_ro_entry = __ pc();
   if (regs_cc != regs_cc_ro) {
     Label unused;
     gen_c2i_adapter(masm, sig_cc_ro, regs_cc_ro, skip_fixup, i2c_entry, oop_maps, frame_complete, frame_size_in_words, false);
     skip_fixup = unused;
   }
@@ -990,33 +990,33 @@
   BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();
   bs->c2i_entry_barrier(masm);
 
   gen_c2i_adapter(masm, total_args_passed, comp_args_on_stack, sig_bt, regs, skip_fixup);
 
-  address c2i_unverified_value_entry = c2i_unverified_entry;
+  address c2i_unverified_inline_entry = c2i_unverified_entry;
 
  // Non-scalarized c2i adapter
-  address c2i_value_entry = c2i_entry;
+  address c2i_inline_entry = c2i_entry;
   if (regs != regs_cc) {
-    Label value_entry_skip_fixup;
-    c2i_unverified_value_entry = __ pc();
-    gen_inline_cache_check(masm, value_entry_skip_fixup);
+    Label inline_entry_skip_fixup;
+    c2i_unverified_inline_entry = __ pc();
+    gen_inline_cache_check(masm, inline_entry_skip_fixup);
 
-    c2i_value_entry = __ pc();
+    c2i_inline_entry = __ pc();
     Label unused;
-    gen_c2i_adapter(masm, sig, regs, value_entry_skip_fixup, i2c_entry, oop_maps, frame_complete, frame_size_in_words, false);
+    gen_c2i_adapter(masm, sig, regs, inline_entry_skip_fixup, i2c_entry, oop_maps, frame_complete, frame_size_in_words, false);
   }
 
   __ flush();
 
   // The c2i adapter might safepoint and trigger a GC. The caller must make sure that
   // the GC knows about the location of oop argument locations passed to the c2i adapter.
 
   bool caller_must_gc_arguments = (regs != regs_cc);
   new_adapter = AdapterBlob::create(masm->code(), frame_complete, frame_size_in_words + 10, oop_maps, caller_must_gc_arguments);
 
-  return AdapterHandlerLibrary::new_entry(fingerprint, i2c_entry, c2i_entry, c2i_value_entry, c2i_value_ro_entry, c2i_unverified_entry, c2i_unverified_value_entry, c2i_no_clinit_check_entry);
+  return AdapterHandlerLibrary::new_entry(fingerprint, i2c_entry, c2i_entry, c2i_inline_entry, c2i_inline_ro_entry, c2i_unverified_entry, c2i_unverified_inline_entry, c2i_no_clinit_check_entry);
 }
 
 int SharedRuntime::c_calling_convention(const BasicType *sig_bt,
                                          VMRegPair *regs,
                                          VMRegPair *regs2,
@@ -3322,12 +3322,12 @@
 
   // Set exception blob
   _exception_blob =  ExceptionBlob::create(&buffer, oop_maps, SimpleRuntimeFrame::framesize >> 1);
 }
 
-BufferedValueTypeBlob* SharedRuntime::generate_buffered_inline_type_adapter(const InlineKlass* vk) {
-  BufferBlob* buf = BufferBlob::create("value types pack/unpack", 16 * K);
+BufferedInlineTypeBlob* SharedRuntime::generate_buffered_inline_type_adapter(const InlineKlass* vk) {
+  BufferBlob* buf = BufferBlob::create("inline types pack/unpack", 16 * K);
   CodeBuffer buffer(buf);
   short buffer_locs[20];
   buffer.insts()->initialize_shared_locs((relocInfo*)buffer_locs,
                                          sizeof(buffer_locs)/sizeof(relocInfo));
 
@@ -3424,8 +3424,8 @@
 
   __ ret(lr);
 
   __ flush();
 
-  return BufferedValueTypeBlob::create(&buffer, pack_fields_off, unpack_fields_off);
+  return BufferedInlineTypeBlob::create(&buffer, pack_fields_off, unpack_fields_off);
 }
 #endif // COMPILER2
