diff a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNullableArrays.java b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNullableArrays.java
--- a/test/hotspot/jtreg/compiler/valhalla/valuetypes/TestNullableArrays.java
+++ b/test/hotspot/jtreg/compiler/valhalla/inlinetypes/TestNullableArrays.java
@@ -19,11 +19,11 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
-package compiler.valhalla.valuetypes;
+package compiler.valhalla.inlinetypes;
 
 import jdk.test.lib.Asserts;
 import java.lang.reflect.Method;
 import java.util.Arrays;
 
@@ -34,23 +34,23 @@
  * @requires (os.simpleArch == "x64" | os.simpleArch == "aarch64")
  * @compile TestNullableArrays.java
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox jdk.test.lib.Platform
  * @run main/othervm/timeout=300 -Xbootclasspath/a:. -XX:+IgnoreUnrecognizedVMOptions -XX:+UnlockDiagnosticVMOptions
  *                               -XX:+UnlockExperimentalVMOptions -XX:+WhiteBoxAPI
- *                               compiler.valhalla.valuetypes.ValueTypeTest
- *                               compiler.valhalla.valuetypes.TestNullableArrays
+ *                               compiler.valhalla.inlinetypes.InlineTypeTest
+ *                               compiler.valhalla.inlinetypes.TestNullableArrays
  */
-public class TestNullableArrays extends ValueTypeTest {
+public class TestNullableArrays extends InlineTypeTest {
     // Unlike C2, C1 intrinsics never deoptimize System.arraycopy. Instead, we fall back to
     // a normal method invocation when encountering flattened arrays.
     private static void assertDeoptimizedByC2(Method m) {
         if (isCompiledByC2(m)) {
             throw new RuntimeException("Type check should have caused it to deoptimize");
         }
     }
 
-    // Extra VM parameters for some test scenarios. See ValueTypeTest.getVMParameters()
+    // Extra VM parameters for some test scenarios. See InlineTypeTest.getVMParameters()
     @Override
     public String[] getExtraVMParameters(int scenario) {
         switch (scenario) {
         case 2: return new String[] {"-XX:-MonomorphicArrayCheck", "-XX:-UncommonNullCast", "-XX:+StressArrayCopyMacroNode"};
         case 3: return new String[] {"-XX:-MonomorphicArrayCheck", "-XX:-UncommonNullCast"};
@@ -2283,11 +2283,11 @@
         res = test85(vab, testValue1);
         Asserts.assertEquals(res, testValue1.hash());
         Asserts.assertEquals(vab[0].hash(), testValue1.hash());
     }
 
-    // Same as test85 but with box value
+    // Same as test85 but with ref value
     @Test()
     public static long test86(MyValue1.ref[] va, MyValue1.ref val) {
         va[0] = val;
         return va[1].hash();
     }
@@ -2464,11 +2464,11 @@
     public static void test94_verifier(boolean warmup) {
         long result = test94();
         Asserts.assertEquals(result, MyValue1.default.hash());
     }
 
-    // Test meeting constant TypeInstPtr with ValueTypeNode
+    // Test meeting constant TypeInstPtr with InlineTypeNode
     @ForceInline
     public long test95_callee() {
         MyValue1.ref[] va = new MyValue1.ref[1];
         va[0] = testValue1;
         return va[0].hashInterpreted();
@@ -2484,11 +2484,11 @@
     public void test95_verifier(boolean warmup) {
         long result = test95();
         Asserts.assertEQ(result, hash());
     }
 
-    // Matrix multiplication test to exercise type flow analysis with nullable value arrays
+    // Matrix multiplication test to exercise type flow analysis with nullable inline type arrays
     inline static class Complex {
         private final double re;
         private final double im;
 
         Complex(double re, double im) {
@@ -2546,11 +2546,11 @@
             }
         }
     }
 
     // Test loads from vararg arrays
-    @Test(failOn = LOAD_UNKNOWN_VALUE)
+    @Test(failOn = LOAD_UNKNOWN_INLINE)
     public static Object test97(Object... args) {
         return args[0];
     }
 
     @DontCompile
@@ -2635,11 +2635,11 @@
             }
         }
     }
 
     // Test stores to varag arrays
-    @Test(failOn = STORE_UNKNOWN_VALUE)
+    @Test(failOn = STORE_UNKNOWN_INLINE)
     public static void test101(Object val, Object... args) {
         args[0] = val;
     }
 
     @DontCompile
