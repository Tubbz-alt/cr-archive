diff a/src/hotspot/share/opto/parseHelper.cpp b/src/hotspot/share/opto/parseHelper.cpp
--- a/src/hotspot/share/opto/parseHelper.cpp
+++ b/src/hotspot/share/opto/parseHelper.cpp
@@ -21,23 +21,23 @@
  * questions.
  *
  */
 
 #include "precompiled.hpp"
-#include "ci/ciValueKlass.hpp"
+#include "ci/ciInlineKlass.hpp"
 #include "classfile/systemDictionary.hpp"
 #include "compiler/compileLog.hpp"
 #include "oops/flatArrayKlass.hpp"
 #include "oops/objArrayKlass.hpp"
 #include "opto/addnode.hpp"
 #include "opto/castnode.hpp"
+#include "opto/inlinetypenode.hpp"
 #include "opto/memnode.hpp"
 #include "opto/mulnode.hpp"
 #include "opto/parse.hpp"
 #include "opto/rootnode.hpp"
 #include "opto/runtime.hpp"
-#include "opto/valuetypenode.hpp"
 #include "runtime/sharedRuntime.hpp"
 
 //------------------------------make_dtrace_method_entry_exit ----------------
 // Dtrace -- record entry or exit of a method if compiled with dtrace support
 void GraphKit::make_dtrace_method_entry_exit(ciMethod* method, bool is_entry) {
@@ -260,15 +260,15 @@
   // we must set a control edge from the IfTrue node created by the uncommon_trap above to the
   // LoadKlassNode.
   Node* a_e_klass = _gvn.transform(LoadKlassNode::make(_gvn, always_see_exact_class ? control() : NULL,
                                                        immutable_memory(), p2, tak));
 
-  // Handle value type arrays
+  // Handle inline type arrays
   const Type* elemtype = _gvn.type(ary)->is_aryptr()->elem();
-  if (elemtype->isa_valuetype() != NULL || elemtype->is_valuetypeptr()) {
-    // We statically know that this is a value type array, use precise klass ptr
-    a_e_klass = makecon(TypeKlassPtr::make(elemtype->value_klass()));
+  if (elemtype->isa_inlinetype() != NULL || elemtype->is_inlinetypeptr()) {
+    // We statically know that this is an inline type array, use precise klass ptr
+    a_e_klass = makecon(TypeKlassPtr::make(elemtype->inline_klass()));
   }
 
   // Check (the hard way) and throw if not a subklass.
   return gen_checkcast(obj, a_e_klass);
 }
@@ -318,11 +318,11 @@
 }
 
 //------------------------------do_defaultvalue---------------------------------
 void Parse::do_defaultvalue() {
   bool will_link;
-  ciValueKlass* vk = iter().get_klass(will_link)->as_value_klass();
+  ciInlineKlass* vk = iter().get_klass(will_link)->as_inline_klass();
   assert(will_link, "defaultvalue: typeflow responsibility");
 
   // Should throw an InstantiationError?
   if (iter().is_unresolved_klass()) {
     uncommon_trap(Deoptimization::Reason_unhandled,
@@ -334,11 +334,11 @@
   if (C->needs_clinit_barrier(vk, method())) {
     clinit_barrier(vk, method());
     if (stopped())  return;
   }
 
-  ValueTypeNode* vt = ValueTypeNode::make_default(_gvn, vk);
+  InlineTypeNode* vt = InlineTypeNode::make_default(_gvn, vk);
   if (vk->is_scalarizable()) {
     push(vt);
   } else {
     push(vt->get_oop());
   }
@@ -348,34 +348,34 @@
 void Parse::do_withfield() {
   bool will_link;
   ciField* field = iter().get_field(will_link);
   assert(will_link, "withfield: typeflow responsibility");
   Node* val = pop_node(field->layout_type());
-  ciValueKlass* holder_klass = field->holder()->as_value_klass();
+  ciInlineKlass* holder_klass = field->holder()->as_inline_klass();
   Node* holder = pop();
   int nargs = 1 + field->type()->size();
 
-  if (!holder->is_ValueType()) {
-    // Scalarize value type holder
+  if (!holder->is_InlineType()) {
+    // Scalarize inline type holder
     assert(!gvn().type(holder)->maybe_null(), "Inline types are null-free");
-    holder = ValueTypeNode::make_from_oop(this, holder, holder_klass);
+    holder = InlineTypeNode::make_from_oop(this, holder, holder_klass);
   }
-  if (!val->is_ValueType() && field->type()->is_valuetype()) {
-    // Scalarize value type field value
+  if (!val->is_InlineType() && field->type()->is_inlinetype()) {
+    // Scalarize inline type field value
     assert(!gvn().type(holder)->maybe_null(), "Inline types are null-free");
-    val = ValueTypeNode::make_from_oop(this, val, gvn().type(val)->value_klass());
-  } else if (val->is_ValueType() && !field->type()->is_valuetype()) {
+    val = InlineTypeNode::make_from_oop(this, val, gvn().type(val)->inline_klass());
+  } else if (val->is_InlineType() && !field->type()->is_inlinetype()) {
     // Field value needs to be allocated because it can be merged with an oop.
     // Re-execute withfield if buffering triggers deoptimization.
     PreserveReexecuteState preexecs(this);
     jvms()->set_should_reexecute(true);
     inc_sp(nargs);
-    val = val->as_ValueType()->buffer(this);
+    val = val->as_InlineType()->buffer(this);
   }
 
-  // Clone the value type node and set the new field value
-  ValueTypeNode* new_vt = holder->clone()->as_ValueType();
+  // Clone the inline type node and set the new field value
+  InlineTypeNode* new_vt = holder->clone()->as_InlineType();
   new_vt->set_oop(_gvn.zerocon(T_INLINE_TYPE));
   gvn().set_type(new_vt, new_vt->bottom_type());
   new_vt->set_field_value_by_offset(field->offset(), val);
   Node* res = new_vt;
 
