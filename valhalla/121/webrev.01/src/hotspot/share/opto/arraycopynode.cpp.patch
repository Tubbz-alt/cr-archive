diff a/src/hotspot/share/opto/arraycopynode.cpp b/src/hotspot/share/opto/arraycopynode.cpp
--- a/src/hotspot/share/opto/arraycopynode.cpp
+++ b/src/hotspot/share/opto/arraycopynode.cpp
@@ -21,16 +21,17 @@
  * questions.
  *
  */
 
 #include "precompiled.hpp"
+#include "ci/ciFlatArrayKlass.hpp"
 #include "gc/shared/barrierSet.hpp"
 #include "gc/shared/c2/barrierSetC2.hpp"
 #include "gc/shared/c2/cardTableBarrierSetC2.hpp"
 #include "opto/arraycopynode.hpp"
 #include "opto/graphKit.hpp"
-#include "opto/valuetypenode.hpp"
+#include "opto/inlinetypenode.hpp"
 #include "runtime/sharedRuntime.hpp"
 #include "utilities/macros.hpp"
 #include "utilities/powerOfTwo.hpp"
 
 ArrayCopyNode::ArrayCopyNode(Compile* C, bool alloc_tightly_coupled, bool has_negative_length_guard)
@@ -140,11 +141,11 @@
       // cloning an array we'll do it element by element. If the
       // length input to ArrayCopyNode is constant, length of input
       // array must be too.
 
       assert((get_length_if_constant(phase) == -1) == !ary_src->size()->is_con() ||
-             (UseFlatArray && ary_src->elem()->make_oopptr() != NULL && ary_src->elem()->make_oopptr()->can_be_value_type()) ||
+             (UseFlatArray && ary_src->elem()->make_oopptr() != NULL && ary_src->elem()->make_oopptr()->can_be_inline_type()) ||
              phase->is_IterGVN() || phase->C->inlining_incrementally() || StressReflectiveCode, "inconsistent");
       if (ary_src->size()->is_con()) {
         return ary_src->size()->get_con();
       }
       return -1;
@@ -283,21 +284,21 @@
       return false;
     }
 
     BarrierSetC2* bs = BarrierSet::barrier_set()->barrier_set_c2();
     if (bs->array_copy_requires_gc_barriers(is_alloc_tightly_coupled(), dest_elem, false, BarrierSetC2::Optimization) ||
-        (src_elem == T_INLINE_TYPE && ary_src->elem()->value_klass()->contains_oops() &&
+        (src_elem == T_INLINE_TYPE && ary_src->elem()->inline_klass()->contains_oops() &&
          bs->array_copy_requires_gc_barriers(is_alloc_tightly_coupled(), T_OBJECT, false, BarrierSetC2::Optimization))) {
       // It's an object array copy but we can't emit the card marking that is needed
       return false;
     }
 
     value_type = ary_src->elem();
 
     uint shift  = exact_log2(type2aelembytes(dest_elem));
     if (dest_elem == T_INLINE_TYPE) {
-      ciValueArrayKlass* vak = ary_src->klass()->as_value_array_klass();
+      ciFlatArrayKlass* vak = ary_src->klass()->as_flat_array_klass();
       shift = vak->log2_element_size();
     }
     uint header = arrayOopDesc::base_offset_in_bytes(dest_elem);
 
     src_offset = Compile::conv_I2X_index(phase, src_offset, ary_src->size());
@@ -322,11 +323,11 @@
     assert(is_clonebasic(), "should be");
 
     disjoint_bases = true;
 
     if (ary_src->elem()->make_oopptr() != NULL &&
-        ary_src->elem()->make_oopptr()->can_be_value_type()) {
+        ary_src->elem()->make_oopptr()->can_be_inline_type()) {
       return false;
     }
 
     adr_src  = phase->transform(new AddPNode(base_src, base_src, src_offset));
     adr_dest = phase->transform(new AddPNode(base_dest, base_dest, dest_offset));
@@ -337,11 +338,11 @@
       elem = T_OBJECT;
     }
 
     BarrierSetC2* bs = BarrierSet::barrier_set()->barrier_set_c2();
     if (bs->array_copy_requires_gc_barriers(true, elem, true, BarrierSetC2::Optimization) ||
-        (elem == T_INLINE_TYPE && ary_src->elem()->value_klass()->contains_oops() &&
+        (elem == T_INLINE_TYPE && ary_src->elem()->inline_klass()->contains_oops() &&
          bs->array_copy_requires_gc_barriers(true, T_OBJECT, true, BarrierSetC2::Optimization))) {
       return false;
     }
 
     // The address is offseted to an aligned address where a raw copy would start.
@@ -398,12 +399,12 @@
                          BasicType copy_type,
                          const Type* value_type) {
   BarrierSetC2* bs = BarrierSet::barrier_set()->barrier_set_c2();
   Node* ctl = kit.control();
   if (copy_type == T_INLINE_TYPE) {
-    ciValueArrayKlass* vak = atp_src->klass()->as_value_array_klass();
-    ciValueKlass* vk = vak->element_klass()->as_value_klass();
+    ciFlatArrayKlass* vak = atp_src->klass()->as_flat_array_klass();
+    ciInlineKlass* vk = vak->element_klass()->as_inline_klass();
     for (int j = 0; j < vk->nof_nonstatic_fields(); j++) {
       ciField* field = vk->nonstatic_field_at(j);
       int off_in_vt = field->offset() - vk->first_field_offset();
       Node* off  = kit.MakeConX(off_in_vt + i * vak->element_byte_size());
       ciType* ft = field->type();
@@ -600,11 +601,11 @@
   Node* dest = in(ArrayCopyNode::Dest);
   const Type* src_type = phase->type(src);
   const Type* dest_type = phase->type(dest);
 
   if (src_type->isa_aryptr() && dest_type->isa_instptr()) {
-    // clone used for load of unknown value type can't be optimized at
+    // clone used for load of unknown inline type can't be optimized at
     // this point
     return NULL;
   }
 
   Node* mem = try_clone_instance(phase, can_reshape, count);
@@ -801,12 +802,12 @@
 
   ciArrayKlass* klass = ary_t->klass()->as_array_klass();
   BasicType ary_elem = klass->element_type()->basic_type();
   uint header = arrayOopDesc::base_offset_in_bytes(ary_elem);
   uint elemsize = type2aelembytes(ary_elem);
-  if (klass->is_value_array_klass()) {
-    elemsize = klass->as_value_array_klass()->element_byte_size();
+  if (klass->is_flat_array_klass()) {
+    elemsize = klass->as_flat_array_klass()->element_byte_size();
   }
 
   jlong dest_pos_plus_len_lo = (((jlong)dest_pos_t->_lo) + len_t->_lo) * elemsize + header;
   jlong dest_pos_plus_len_hi = (((jlong)dest_pos_t->_hi) + len_t->_hi) * elemsize + header;
   jlong dest_pos_lo = ((jlong)dest_pos_t->_lo) * elemsize + header;
