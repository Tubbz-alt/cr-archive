diff a/src/hotspot/share/opto/loopUnswitch.cpp b/src/hotspot/share/opto/loopUnswitch.cpp
--- a/src/hotspot/share/opto/loopUnswitch.cpp
+++ b/src/hotspot/share/opto/loopUnswitch.cpp
@@ -220,11 +220,11 @@
   Node* invar_iff_c   = invar_iff->in(0);
   invar_iff->_prob    = unswitch_iff->_prob;
   BoolNode* bol       = unswitch_iff->in(1)->as_Bool();
   if (unswitch_iffs.size() > 1) {
     // Flattened array checks are used on array access to switch between
-    // a legacy object array access and a flattened value type array
+    // a legacy object array access and a flattened inline type array
     // access. We want the performance impact on legacy accesses to be
     // as small as possible so we make two copies of the loop: a fast
     // one where all accesses are known to be legacy, a slow one where
     // some accesses are to flattened arrays. Flattened array checks
     // can be removed from the fast loop but not from the slow loop
