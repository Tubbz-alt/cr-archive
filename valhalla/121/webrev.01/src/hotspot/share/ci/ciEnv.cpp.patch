diff a/src/hotspot/share/ci/ciEnv.cpp b/src/hotspot/share/ci/ciEnv.cpp
--- a/src/hotspot/share/ci/ciEnv.cpp
+++ b/src/hotspot/share/ci/ciEnv.cpp
@@ -25,17 +25,17 @@
 #include "precompiled.hpp"
 #include "jvm.h"
 #include "ci/ciConstant.hpp"
 #include "ci/ciEnv.hpp"
 #include "ci/ciField.hpp"
+#include "ci/ciInlineKlass.hpp"
 #include "ci/ciInstance.hpp"
 #include "ci/ciInstanceKlass.hpp"
 #include "ci/ciMethod.hpp"
 #include "ci/ciNullObject.hpp"
 #include "ci/ciReplay.hpp"
 #include "ci/ciUtilities.inline.hpp"
-#include "ci/ciValueKlass.hpp"
 #include "classfile/symbolTable.hpp"
 #include "classfile/systemDictionary.hpp"
 #include "classfile/vmSymbols.hpp"
 #include "code/codeCache.hpp"
 #include "code/scopeDesc.hpp"
@@ -513,13 +513,13 @@
   int i = 0;
   while (sym->char_at(i) == JVM_SIGNATURE_ARRAY) {
     i++;
   }
   if (i > 0 && sym->char_at(i) == JVM_SIGNATURE_INLINE_TYPE) {
-    // An unloaded array class of value types is an ObjArrayKlass, an
-    // unloaded value type class is an InstanceKlass. For consistency,
-    // make the signature of the unloaded array of value type use L
+    // An unloaded array class of inline types is an ObjArrayKlass, an
+    // unloaded inline type class is an InstanceKlass. For consistency,
+    // make the signature of the unloaded array of inline type use L
     // rather than Q.
     char *new_name = CURRENT_THREAD_ENV->name_buffer(sym->utf8_length()+1);
     strncpy(new_name, (char*)sym->base(), sym->utf8_length());
     new_name[i] = JVM_SIGNATURE_CLASS;
     new_name[sym->utf8_length()] = '\0';
