diff a/src/hotspot/share/code/compiledIC.cpp b/src/hotspot/share/code/compiledIC.cpp
--- a/src/hotspot/share/code/compiledIC.cpp
+++ b/src/hotspot/share/code/compiledIC.cpp
@@ -534,13 +534,13 @@
     //     null check on a call when the target isn't loaded).
     //     This causes problems when verifying the IC because
     //     it looks vanilla but is optimized. Code in is_call_to_interpreted
     //     is aware of this and weakens its asserts.
     if (is_optimized) {
-      entry      = caller_is_c1 ? method_code->verified_value_entry_point() : method_code->verified_entry_point();
+      entry      = caller_is_c1 ? method_code->verified_inline_entry_point() : method_code->verified_entry_point();
     } else {
-      entry      = caller_is_c1 ? method_code->value_entry_point() : method_code->entry_point();
+      entry      = caller_is_c1 ? method_code->inline_entry_point() : method_code->entry_point();
     }
   }
   bool far_c2a = entry != NULL && caller_is_nmethod && method_code->is_far_code();
   if (entry != NULL && !far_c2a) {
     // Call to near compiled code (nmethod or aot).
@@ -550,18 +550,18 @@
       if (far_c2a) {
         // Call to aot code from nmethod.
         info.set_aot_entry(entry, method());
       } else {
         // Use stub entry
-        address entry = caller_is_c1 ? method()->get_c2i_value_entry() : method()->get_c2i_entry();
+        address entry = caller_is_c1 ? method()->get_c2i_inline_entry() : method()->get_c2i_entry();
         info.set_interpreter_entry(entry, method());
       }
     } else {
       // Use icholder entry
       assert(method_code == NULL || method_code->is_compiled(), "must be compiled");
       CompiledICHolder* holder = new CompiledICHolder(method(), receiver_klass);
-      entry = (caller_is_c1)? method()->get_c2i_unverified_value_entry() : method()->get_c2i_unverified_entry();
+      entry = (caller_is_c1)? method()->get_c2i_unverified_inline_entry() : method()->get_c2i_unverified_entry();
       info.set_icholder_entry(entry, holder);
     }
   }
   assert(info.is_optimized() == is_optimized, "must agree");
 }
@@ -670,11 +670,11 @@
     } else {
       info._to_aot = false;
     }
     info._to_interpreter = false;
     if (caller_nm->is_compiled_by_c1()) {
-      info._entry = m_code->verified_value_entry_point();
+      info._entry = m_code->verified_inline_entry_point();
     } else {
       info._entry = m_code->verified_entry_point();
     }
   } else {
     // Callee is interpreted code.  In any case entering the interpreter
@@ -682,11 +682,11 @@
     assert(!m->is_method_handle_intrinsic(), "Compiled code should never call interpreter MH intrinsics");
     info._to_interpreter = true;
 
     if (caller_nm->is_compiled_by_c1()) {
       // C1 -> interp: values passed as oops
-      info._entry = m()->get_c2i_value_entry();
+      info._entry = m()->get_c2i_inline_entry();
     } else {
       // C2 -> interp: values passed fields
       info._entry = m()->get_c2i_entry();
     }
   }
