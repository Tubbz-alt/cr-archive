diff a/src/hotspot/share/code/nmethod.cpp b/src/hotspot/share/code/nmethod.cpp
--- a/src/hotspot/share/code/nmethod.cpp
+++ b/src/hotspot/share/code/nmethod.cpp
@@ -808,13 +808,13 @@
 #else
     _nmethod_end_offset      = _nul_chk_table_offset + align_up(nul_chk_table->size_in_bytes(), oopSize);
 #endif
     _entry_point             = code_begin()          + offsets->value(CodeOffsets::Entry);
     _verified_entry_point    = code_begin()          + offsets->value(CodeOffsets::Verified_Entry);
-    _inline_entry_point       = code_begin()          + offsets->value(CodeOffsets::Inline_Entry);
-    _verified_inline_entry_point = code_begin()       + offsets->value(CodeOffsets::Verified_Inline_Entry);
-    _verified_inline_ro_entry_point = code_begin()    + offsets->value(CodeOffsets::Verified_Inline_Entry_RO);
+    _inline_entry_point       = code_begin()         + offsets->value(CodeOffsets::Inline_Entry);
+    _verified_inline_entry_point = code_begin()      + offsets->value(CodeOffsets::Verified_Inline_Entry);
+    _verified_inline_ro_entry_point = code_begin()   + offsets->value(CodeOffsets::Verified_Inline_Entry_RO);
     _osr_entry_point         = code_begin()          + offsets->value(CodeOffsets::OSR_Entry);
     _exception_cache         = NULL;
     _scopes_data_begin       = (address) this + scopes_data_offset;
 
     _pc_desc_container.reset_to(scopes_pcs_begin());
@@ -3090,14 +3090,14 @@
 
 const char* nmethod::nmethod_section_label(address pos) const {
   const char* label = NULL;
   if (pos == code_begin())                                              label = "[Instructions begin]";
   if (pos == entry_point())                                             label = "[Entry Point]";
-  if (pos == inline_entry_point())                                       label = "[Value Entry Point]";
+  if (pos == inline_entry_point())                                      label = "[Value Entry Point]";
   if (pos == verified_entry_point())                                    label = "[Verified Entry Point]";
-  if (pos == verified_inline_entry_point())                              label = "[Verified Value Entry Point]";
-  if (pos == verified_inline_ro_entry_point())                           label = "[Verified Value Entry Point (RO)]";
+  if (pos == verified_inline_entry_point())                             label = "[Verified Value Entry Point]";
+  if (pos == verified_inline_ro_entry_point())                          label = "[Verified Value Entry Point (RO)]";
   if (has_method_handle_invokes() && (pos == deopt_mh_handler_begin())) label = "[Deopt MH Handler Code]";
   if (pos == consts_begin() && pos != insts_begin())                    label = "[Constants]";
   // Check stub_code before checking exception_handler or deopt_handler.
   if (pos == this->stub_begin())                                        label = "[Stub Code]";
   if (JVMCI_ONLY(_exception_offset >= 0 &&) pos == exception_begin())           label = "[Exception Handler]";
@@ -3117,13 +3117,13 @@
 
 void nmethod::print_nmethod_labels(outputStream* stream, address block_begin, bool print_section_labels) const {
   if (print_section_labels) {
     int n = 0;
     // Multiple entry points may be at the same position. Print them all.
-    n += maybe_print_entry_label(stream, block_begin, entry_point(),                   "[Entry Point]");
+    n += maybe_print_entry_label(stream, block_begin, entry_point(),                    "[Entry Point]");
     n += maybe_print_entry_label(stream, block_begin, inline_entry_point(),             "[Value Entry Point]");
-    n += maybe_print_entry_label(stream, block_begin, verified_entry_point(),          "[Verified Entry Point]");
+    n += maybe_print_entry_label(stream, block_begin, verified_entry_point(),           "[Verified Entry Point]");
     n += maybe_print_entry_label(stream, block_begin, verified_inline_entry_point(),    "[Verified Value Entry Point]");
     n += maybe_print_entry_label(stream, block_begin, verified_inline_ro_entry_point(), "[Verified Value Entry Point (RO)]");
     if (n == 0) {
       const char* label = nmethod_section_label(block_begin);
       if (label != NULL) {
