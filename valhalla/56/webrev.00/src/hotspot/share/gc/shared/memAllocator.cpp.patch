diff a/src/hotspot/share/gc/shared/memAllocator.cpp b/src/hotspot/share/gc/shared/memAllocator.cpp
--- a/src/hotspot/share/gc/shared/memAllocator.cpp
+++ b/src/hotspot/share/gc/shared/memAllocator.cpp
@@ -388,16 +388,10 @@
   // concurrent collectors.
   oopDesc::release_set_klass(mem, _klass);
   return oop(mem);
 }
 
-oop MemAllocator::finish_with_properties(HeapWord* mem, ArrayStorageProperties storage_props) const {
-  oop res = finish(mem); // finish() returns on purpose (can be overloaded, clearing memory might safepoint)
-  oopDesc::release_set_metadata(cast_from_oop<HeapWord*>(res), storage_props, _klass);
-  return res;
-}
-
 oop ObjAllocator::initialize(HeapWord* mem) const {
   mem_clear(mem);
   return finish(mem);
 }
 
@@ -423,13 +417,11 @@
   assert(_length >= 0, "length should be non-negative");
   if (_do_zero) {
     mem_clear(mem);
   }
   arrayOopDesc::set_length(mem, _length);
-  assert(ArrayKlass::cast(_klass)->storage_properties().is_empty() ||
-      ArrayKlass::cast(_klass)->dimension() == 1, "Multidim should have no storage props");
-  return finish_with_properties(mem, ArrayKlass::cast(_klass)->storage_properties());
+  return finish(mem);
 }
 
 oop ClassAllocator::initialize(HeapWord* mem) const {
   // Set oop_size field before setting the _klass field because a
   // non-NULL _klass field indicates that the object is parsable by
