diff a/src/hotspot/share/oops/arrayKlass.hpp b/src/hotspot/share/oops/arrayKlass.hpp
--- a/src/hotspot/share/oops/arrayKlass.hpp
+++ b/src/hotspot/share/oops/arrayKlass.hpp
@@ -24,11 +24,10 @@
 
 #ifndef SHARE_OOPS_ARRAYKLASS_HPP
 #define SHARE_OOPS_ARRAYKLASS_HPP
 
 #include "oops/klass.hpp"
-#include "oops/arrayStorageProperties.hpp"
 
 class fieldDescriptor;
 class klassVtable;
 
 // ArrayKlass is the abstract baseclass for all array classes
@@ -65,13 +64,10 @@
   virtual void set_element_klass(Klass* k)  { _element_klass = k; }
 
   // Compiler/Interpreter offset
   static ByteSize element_klass_offset() { return in_ByteSize(offset_of(ArrayKlass, _element_klass)); }
 
-  // Presented with an ArrayKlass, which storage_properties should be encoded into arrayOop
-  virtual ArrayStorageProperties storage_properties() { return ArrayStorageProperties::empty; }
-
   // Are loads and stores to this concrete array type atomic?
   // Note that Object[] is naturally atomic, but its subtypes may not be.
   virtual bool element_access_is_atomic() { return true; }
 
   // Testing operation
