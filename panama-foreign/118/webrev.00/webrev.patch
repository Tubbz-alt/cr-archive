diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
@@ -59,11 +59,11 @@
         checkRawNativeAddress(base);
         return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(base.toRawLongValue(), byteSize, Thread.currentThread(), true);
     }
 
     private void checkRawNativeAddress(MemoryAddress base) {
-        if (base.segment() != AbstractMemorySegmentImpl.NOTHING) {
+        if (base.segment() != null) {
             throw new IllegalArgumentException("Not an unchecked memory address");
         }
     }
 
     @Override
diff a/test/jdk/java/foreign/TestNative.java b/test/jdk/java/foreign/TestNative.java
--- a/test/jdk/java/foreign/TestNative.java
+++ b/test/jdk/java/foreign/TestNative.java
@@ -54,11 +54,11 @@
 import java.util.function.BiConsumer;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import java.util.function.Function;
 
-import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.*;
 
 public class TestNative {
 
     static Unsafe UNSAFE;
 
@@ -148,10 +148,12 @@
     public static native long getLongRaw(long addr, int index);
     public static native double getDoubleRaw(long addr, int index);
 
     public static native long getCapacity(Buffer buffer);
 
+    public static native long allocate(int size);
+
     @Test(dataProvider="nativeAccessOps")
     public void testNativeAccess(Consumer<MemoryAddress> checker, Consumer<MemoryAddress> initializer, SequenceLayout seq) {
         try (MemorySegment segment = MemorySegment.allocateNative(seq)) {
             MemoryAddress address = segment.baseAddress();
             initializer.accept(address);
@@ -169,10 +171,28 @@
             assertEquals(buf.capacity(), expected);
             assertEquals(getCapacity(buf), expected);
         }
     }
 
+    @Test
+    public void testResize() {
+        MemoryAddress addr = MemoryAddress.ofLong(42);
+        assertNull(addr.segment());
+        MemoryAddress sized = InternalForeign.getInstancePrivileged().withSize(addr, 12);
+        assertEquals(sized.segment().byteSize(), 12);
+    }
+
+    @Test
+    public void testMallocSegment() {
+        MemoryAddress addr = MemoryAddress.ofLong(allocate(12));
+        assertNull(addr.segment());
+        MemorySegment mallocSegment = InternalForeign.getInstancePrivileged().asMallocSegment(addr, 12);
+        assertEquals(mallocSegment.byteSize(), 12);
+        mallocSegment.close(); //free here
+        assertTrue(!mallocSegment.isAlive());
+    }
+
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadResize() {
         try (MemorySegment segment = MemorySegment.allocateNative(4)) {
             InternalForeign.getInstancePrivileged().withSize(segment.baseAddress(), 12);
         }
diff a/test/jdk/java/foreign/libNativeAccess.c b/test/jdk/java/foreign/libNativeAccess.c
--- a/test/jdk/java/foreign/libNativeAccess.c
+++ b/test/jdk/java/foreign/libNativeAccess.c
@@ -21,10 +21,11 @@
  *  questions.
  *
  */
 
 #include "jni.h"
+#include <stdlib.h>
 #include <stdio.h>
 #include <stdint.h>
 
 JNIEXPORT jbyte JNICALL
 Java_TestNative_getByteRaw(JNIEnv *env, jclass cls, jlong addr, jint index) {
@@ -112,5 +113,10 @@
 
 JNIEXPORT jlong JNICALL
 Java_TestNative_getCapacity(JNIEnv *env, jclass cls, jobject buf) {
     return (*env)->GetDirectBufferCapacity(env, buf);
 }
+
+JNIEXPORT jlong JNICALL
+Java_TestNative_allocate(JNIEnv *env, jclass cls, jobject buf, jint size) {
+    return (jlong)malloc(size);
+}
