diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
@@ -1,10 +1,10 @@
 // Generated by jextract
 
 import java.lang.invoke.VarHandle;
 import java.nio.charset.Charset;
-import jdk.incubator.foreign.AllocationScope;
+import jdk.incubator.foreign.NativeAllocationScope;
 import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import static jdk.incubator.foreign.MemoryLayouts.C_CHAR;
@@ -34,11 +34,11 @@
         MemoryAddress addr = segment.baseAddress();
         copy(addr, bytes);
         return segment;
     }
 
-    private static MemoryAddress toCString(byte[] bytes, AllocationScope scope) {
+    private static MemoryAddress toCString(byte[] bytes, NativeAllocationScope scope) {
         MemoryLayout strLayout = MemoryLayout.ofSequence(bytes.length + 1, C_CHAR);
         MemoryAddress addr = scope.allocate(strLayout);
         copy(addr, bytes);
         return addr;
     }
@@ -57,27 +57,25 @@
 
     public static MemorySegment toCString(String str, Charset charset) {
          return toCString(str.getBytes(charset));
     }
 
-    public static MemoryAddress toCString(String str, AllocationScope scope) {
+    public static MemoryAddress toCString(String str, NativeAllocationScope scope) {
         return toCString(str.getBytes(), scope);
     }
 
-    public static MemoryAddress toCString(String str, Charset charset, AllocationScope scope) {
+    public static MemoryAddress toCString(String str, Charset charset, NativeAllocationScope scope) {
         return toCString(str.getBytes(charset), scope);
     }
 
     public static String toJavaString(MemoryAddress addr) {
         StringBuilder buf = new StringBuilder();
-        try (MemorySegment seg = foreign.ofNativeUnchecked(addr, Long.MAX_VALUE)) {
-            MemoryAddress baseAddr = seg.baseAddress();
-            byte curr = (byte) byteArrHandle.get(baseAddr, 0);
-            long offset = 0;
-            while (curr != 0) {
-                buf.append((char) curr);
-                curr = (byte) byteArrHandle.get(baseAddr, ++offset);
-            }
+        MemoryAddress baseAddr = foreign.withSize(addr, Long.MAX_VALUE);
+        byte curr = (byte) byteArrHandle.get(baseAddr, 0);
+        long offset = 0;
+        while (curr != 0) {
+            buf.append((char) curr);
+            curr = (byte) byteArrHandle.get(baseAddr, ++offset);
         }
         return buf.toString();
     }
 }
