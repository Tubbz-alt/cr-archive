diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
@@ -197,24 +197,34 @@
         decrAlign();
     }
 
     protected void addHandlePath(Class<?> type, String strName, String fieldName) {
         String ty = type.getName();
-        if (ty.contains("MemoryAddress")) {
+        boolean isAddress = ty.contains("MemoryAddress");
+        if (isAddress) {
+            sb.append("MemoryHandles.asAddressVarHandle(");
             ty = "long";
         }
         sb.append(strName + "$LAYOUT.varHandle(" + ty + ".class, ");
         sb.append("PathElement.groupElement(\"" + fieldName +"\")");
         sb.append(")");
+        if (isAddress) {
+            sb.append(")");
+        }
     }
 
     protected void addHandlePath(Class<?> type, String varName) {
         String ty = type.getName();
-        if (ty.contains("MemoryAddress")) {
+        boolean isAddress = ty.contains("MemoryAddress");
+        if (isAddress) {
+            sb.append("MemoryHandles.asAddressVarHandle(");
             ty = "long";
         }
         sb.append(varName + "$LAYOUT.varHandle(" + ty + ".class)");
+        if (isAddress) {
+            sb.append(")");
+        }
     }
 
     protected void addMethodHandle(Declaration.Function funcTree, MethodType mtype, FunctionDescriptor desc) {
         incrAlign();
         indent();
