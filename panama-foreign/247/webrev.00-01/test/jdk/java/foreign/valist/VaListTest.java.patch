diff a/test/jdk/java/foreign/valist/VaListTest.java b/test/jdk/java/foreign/valist/VaListTest.java
--- a/test/jdk/java/foreign/valist/VaListTest.java
+++ b/test/jdk/java/foreign/valist/VaListTest.java
@@ -194,16 +194,16 @@
         }
     }
 
     @DataProvider
     @SuppressWarnings("unchecked")
-    public static Object[][] getInt() {
+    public static Object[][] pointers() {
         Function<MemoryLayout, Function<VaList, Integer>> getIntJavaFact = layout ->
             list -> {
                 MemoryAddress ma = list.vargAsAddress(layout);
                 MemorySegment accessibleSegment = MemorySegment.ofNativeRestricted(ma,
-                        C_INT.byteSize(), Thread.currentThread(), null, null);
+                        4, Thread.currentThread(), null, null);
                 return MemoryAccess.getInt(accessibleSegment.baseAddress());
             };
         Function<VaList, Integer> getIntNative = MethodHandleProxies.asInterfaceInstance(Function.class, MH_getInt);
         return new Object[][]{
             { winVaListFactory,      getIntJavaFact.apply(Win64.C_POINTER),   Win64.C_POINTER   },
@@ -211,18 +211,18 @@
             { aarch64VaListFactory,  getIntJavaFact.apply(AArch64.C_POINTER), AArch64.C_POINTER },
             { platformVaListFactory, getIntNative,                            C_POINTER         },
         };
     }
 
-    @Test(dataProvider = "getInt")
+    @Test(dataProvider = "pointers")
     public void testVaListMemoryAddress(Function<Consumer<VaList.Builder>, VaList> vaListFactory,
-                                        Function<VaList, Integer> getInt,
+                                        Function<VaList, Integer> getFromPointer,
                                         MemoryLayout pointerLayout) {
         try (MemorySegment msInt = MemorySegment.allocateNative(JAVA_INT)) {
             MemoryAccess.setInt(msInt.baseAddress(), 10);
             try (VaList vaList = vaListFactory.apply(b -> b.vargFromAddress(pointerLayout, msInt.baseAddress()))) {
-                int x = getInt.apply(vaList);
+                int x = getFromPointer.apply(vaList);
                 assertEquals(x, 10);
             }
         }
     }
 
@@ -230,11 +230,11 @@
         R apply(S s, T t, U u);
     }
 
     @DataProvider
     @SuppressWarnings("unchecked")
-    public static Object[][] winStructByValue() {
+    public static Object[][] structs() {
         TriFunction<MemoryLayout, VarHandle, VarHandle, Function<VaList, Integer>> sumStructJavaFact
             = (pointLayout, VH_Point_x, VH_Point_y) ->
                 list -> {
                     MemorySegment struct = list.vargAsSegment(pointLayout);
                     int x = (int) VH_Point_x.get(struct.baseAddress());
@@ -264,14 +264,14 @@
             argsFact.apply(aarch64VaListFactory,  AArch64.C_INT, sumStructJavaFact),
             argsFact.apply(platformVaListFactory, C_INT,         sumStructNativeFact),
         };
     }
 
-    @Test(dataProvider = "winStructByValue")
-    public void testWinStructByValue(Function<Consumer<VaList.Builder>, VaList> vaListFactory,
-                                     Function<VaList, Integer> sumStruct,
-                                     MemoryLayout Point_LAYOUT, VarHandle VH_Point_x, VarHandle VH_Point_y) {
+    @Test(dataProvider = "structs")
+    public void testStruct(Function<Consumer<VaList.Builder>, VaList> vaListFactory,
+                           Function<VaList, Integer> sumStruct,
+                           MemoryLayout Point_LAYOUT, VarHandle VH_Point_x, VarHandle VH_Point_y) {
         try (MemorySegment struct = MemorySegment.allocateNative(Point_LAYOUT)) {
             VH_Point_x.set(struct.baseAddress(), 5);
             VH_Point_y.set(struct.baseAddress(), 10);
 
             try (VaList vaList = vaListFactory.apply(b -> b.vargFromSegment(Point_LAYOUT, struct))) {
@@ -281,11 +281,11 @@
         }
     }
 
     @DataProvider
     @SuppressWarnings("unchecked")
-    public static Object[][] winStructByReference() {
+    public static Object[][] bigStructs() {
         TriFunction<MemoryLayout, VarHandle, VarHandle, Function<VaList, Long>> sumStructJavaFact
             = (BigPoint_LAYOUT, VH_BigPoint_x, VH_BigPoint_y) ->
                 list -> {
                     MemorySegment struct = list.vargAsSegment(BigPoint_LAYOUT);
                     long x = (long) VH_BigPoint_x.get(struct.baseAddress());
@@ -315,14 +315,14 @@
             argsFact.apply(aarch64VaListFactory,  AArch64.C_LONGLONG, sumStructJavaFact),
             argsFact.apply(platformVaListFactory, C_LONGLONG,         sumStructNativeFact),
         };
     }
 
-    @Test(dataProvider = "winStructByReference")
-    public void testWinStructByReference(Function<Consumer<VaList.Builder>, VaList> vaListFactory,
-                                         Function<VaList, Long> sumBigStruct,
-                                         MemoryLayout BigPoint_LAYOUT, VarHandle VH_BigPoint_x, VarHandle VH_BigPoint_y) {
+    @Test(dataProvider = "bigStructs")
+    public void testBigStruct(Function<Consumer<VaList.Builder>, VaList> vaListFactory,
+                              Function<VaList, Long> sumBigStruct,
+                              MemoryLayout BigPoint_LAYOUT, VarHandle VH_BigPoint_x, VarHandle VH_BigPoint_y) {
         try (MemorySegment struct = MemorySegment.allocateNative(BigPoint_LAYOUT)) {
             VH_BigPoint_x.set(struct.baseAddress(), 5);
             VH_BigPoint_y.set(struct.baseAddress(), 10);
 
             try (VaList vaList = vaListFactory.apply(b -> b.vargFromSegment(BigPoint_LAYOUT, struct))) {
@@ -332,11 +332,11 @@
         }
     }
 
     @DataProvider
     @SuppressWarnings("unchecked")
-    public static Object[][] floatStructByValue() {
+    public static Object[][] floatStructs() {
         TriFunction<MemoryLayout, VarHandle, VarHandle, Function<VaList, Float>> sumStructJavaFact
             = (FloatPoint_LAYOUT, VH_FloatPoint_x, VH_FloatPoint_y) ->
                 list -> {
                     MemorySegment struct = list.vargAsSegment(FloatPoint_LAYOUT);
                     float x = (float) VH_FloatPoint_x.get(struct.baseAddress());
@@ -366,15 +366,15 @@
             argsFact.apply(aarch64VaListFactory,  AArch64.C_FLOAT, sumStructJavaFact),
             argsFact.apply(platformVaListFactory, C_FLOAT,         sumStructNativeFact),
         };
     }
 
-    @Test(dataProvider = "floatStructByValue")
-    public void testFloatStructByValue(Function<Consumer<VaList.Builder>, VaList> vaListFactory,
-                                       Function<VaList, Float> sumFloatStruct,
-                                       MemoryLayout FloatPoint_LAYOUT,
-                                       VarHandle VH_FloatPoint_x, VarHandle VH_FloatPoint_y) {
+    @Test(dataProvider = "floatStructs")
+    public void testFloatStruct(Function<Consumer<VaList.Builder>, VaList> vaListFactory,
+                                Function<VaList, Float> sumFloatStruct,
+                                MemoryLayout FloatPoint_LAYOUT,
+                                VarHandle VH_FloatPoint_x, VarHandle VH_FloatPoint_y) {
         try (MemorySegment struct = MemorySegment.allocateNative(FloatPoint_LAYOUT)) {
             VH_FloatPoint_x.set(struct.baseAddress(), 1.234f);
             VH_FloatPoint_y.set(struct.baseAddress(), 3.142f);
 
             try (VaList vaList = vaListFactory.apply(b -> b.vargFromSegment(FloatPoint_LAYOUT, struct))) {
@@ -388,11 +388,11 @@
         R apply(T0 t0, T1 t1, T2 t2, T3 t3);
     }
 
     @DataProvider
     @SuppressWarnings("unchecked")
-    public static Object[][] hugeStructByValue() {
+    public static Object[][] hugeStructs() {
         QuadFunc<MemoryLayout, VarHandle, VarHandle, VarHandle, Function<VaList, Long>> sumStructJavaFact
             = (HugePoint_LAYOUT, VH_HugePoint_x, VH_HugePoint_y, VH_HugePoint_z) ->
                 list -> {
                     MemorySegment struct = list.vargAsSegment(HugePoint_LAYOUT);
                     long x = (long) VH_HugePoint_x.get(struct.baseAddress());
@@ -426,15 +426,15 @@
             argsFact.apply(aarch64VaListFactory,  AArch64.C_LONGLONG, sumStructJavaFact),
             argsFact.apply(platformVaListFactory, C_LONGLONG,         sumStructNativeFact),
         };
     }
 
-    @Test(dataProvider = "hugeStructByValue")
-    public void testHugeStructByValue(Function<Consumer<VaList.Builder>, VaList> vaListFactory,
-                                      Function<VaList, Long> sumHugeStruct,
-                                      MemoryLayout HugePoint_LAYOUT,
-                                      VarHandle VH_HugePoint_x, VarHandle VH_HugePoint_y, VarHandle VH_HugePoint_z) {
+    @Test(dataProvider = "hugeStructs")
+    public void testHugeStruct(Function<Consumer<VaList.Builder>, VaList> vaListFactory,
+                               Function<VaList, Long> sumHugeStruct,
+                               MemoryLayout HugePoint_LAYOUT,
+                               VarHandle VH_HugePoint_x, VarHandle VH_HugePoint_y, VarHandle VH_HugePoint_z) {
         // On AArch64 a struct needs to be larger than 16 bytes to be
         // passed by reference.
         try (MemorySegment struct = MemorySegment.allocateNative(HugePoint_LAYOUT)) {
             VH_HugePoint_x.set(struct.baseAddress(), 1);
             VH_HugePoint_y.set(struct.baseAddress(), 2);
@@ -562,11 +562,11 @@
             listLeaked = list;
         }
         assertFalse(listLeaked.isAlive());
     }
 
-    @Test(dataProvider = "winStructByValue")
+    @Test(dataProvider = "structs")
     public void testScopeMSRead(Function<Consumer<VaList.Builder>, VaList> vaListFactory,
                                 Function<VaList, Integer> sumStruct, // ignored
                                 MemoryLayout Point_LAYOUT, VarHandle VH_Point_x, VarHandle VH_Point_y) {
         MemorySegment pointOut;
         try (NativeScope scope = NativeScope.unboundedScope()) {
