diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
@@ -60,13 +60,12 @@
         return rv;
     }
 
     public final void save(Path path) throws TranslationUnitSaveException {
         try (MemorySegment pathStr = Utils.toNativeString(path.toAbsolutePath().toString())) {
-            int res = Index_h.clang_saveTranslationUnit(tu,
-                    pathStr.baseAddress(), 0);
-            if (res != 0) {
+            SaveError res = SaveError.valueOf(Index_h.clang_saveTranslationUnit(tu, pathStr.baseAddress(), 0));
+            if (res != SaveError.None) {
                 throw new TranslationUnitSaveException(path);
             }
         }
     }
 
@@ -79,24 +78,30 @@
 
     static long FILENAME_OFFSET = Index_h.CXUnsavedFile$LAYOUT.offset(MemoryLayout.PathElement.groupElement("Filename")) / 8;
     static long CONTENTS_OFFSET = Index_h.CXUnsavedFile$LAYOUT.offset(MemoryLayout.PathElement.groupElement("Contents")) / 8;
     static long LENGTH_OFFSET = Index_h.CXUnsavedFile$LAYOUT.offset(MemoryLayout.PathElement.groupElement("Length")) / 8;
 
-    public int reparse(Index.UnsavedFile... inMemoryFiles) {
+    public void reparse(Index.UnsavedFile... inMemoryFiles) {
         try (AllocationScope scope = new AllocationScope()) {
             MemorySegment files = inMemoryFiles.length == 0 ?
                     null :
                     scope.track(MemorySegment.allocateNative(MemoryLayout.ofSequence(inMemoryFiles.length, Index_h.CXUnsavedFile$LAYOUT)));
             for (int i = 0; i < inMemoryFiles.length; i++) {
                 MemoryAddress start = files.baseAddress().addOffset(i * Index_h.CXUnsavedFile$LAYOUT.byteSize());
                 Utils.setPointer(start.addOffset(FILENAME_OFFSET), scope.track(Utils.toNativeString(inMemoryFiles[i].file)).baseAddress());
                 Utils.setPointer(start.addOffset(CONTENTS_OFFSET), scope.track(Utils.toNativeString(inMemoryFiles[i].contents)).baseAddress());
                 Utils.setLong(start.addOffset(LENGTH_OFFSET), inMemoryFiles[i].contents.length());
             }
-            return Index_h.clang_reparseTranslationUnit(tu, inMemoryFiles.length,
-                    files == null ? MemoryAddress.NULL : files.baseAddress(),
-                    Index_h.clang_defaultReparseOptions(tu));
+            ErrorCode code = ErrorCode.valueOf(Index_h.clang_reparseTranslationUnit(
+                        tu,
+                        inMemoryFiles.length,
+                        files == null ? MemoryAddress.NULL : files.baseAddress(),
+                        Index_h.clang_defaultReparseOptions(tu)));
+
+            if (code != ErrorCode.Success) {
+                throw new IllegalStateException("Re-parsing failed: " + code);
+            }
         }
     }
 
     public void reparse(Consumer<Diagnostic> dh, Index.UnsavedFile... inMemoryFiles) {
         reparse(inMemoryFiles);
