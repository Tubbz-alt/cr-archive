diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/ErrorCode.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/ErrorCode.java
--- /dev/null
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/ErrorCode.java
@@ -0,0 +1,63 @@
+/*
+ *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ *  This code is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 only, as
+ *  published by the Free Software Foundation.  Oracle designates this
+ *  particular file as subject to the "Classpath" exception as provided
+ *  by Oracle in the LICENSE file that accompanied this code.
+ *
+ *  This code is distributed in the hope that it will be useful, but WITHOUT
+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ *  version 2 for more details (a copy is included in the LICENSE file that
+ *  accompanied this code).
+ *
+ *  You should have received a copy of the GNU General Public License version
+ *  2 along with this work; if not, write to the Free Software Foundation,
+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ *  or visit www.oracle.com if you need additional information or have any
+ *  questions.
+ *
+ */
+package jdk.internal.clang;
+
+import java.util.Arrays;
+import java.util.Map;
+import java.util.NoSuchElementException;
+import java.util.function.Function;
+
+import static java.util.stream.Collectors.toMap;
+import static jdk.internal.clang.libclang.Index_h.CXError_ASTReadError;
+import static jdk.internal.clang.libclang.Index_h.CXError_Crashed;
+import static jdk.internal.clang.libclang.Index_h.CXError_Failure;
+import static jdk.internal.clang.libclang.Index_h.CXError_InvalidArguments;
+import static jdk.internal.clang.libclang.Index_h.CXError_Success;
+
+public enum ErrorCode {
+    Success(CXError_Success),
+    Failue(CXError_Failure),
+    Crashed(CXError_Crashed),
+    InvalidArguments(CXError_InvalidArguments),
+    ASTReadError(CXError_ASTReadError);
+
+    private final int code;
+
+    ErrorCode(int code) {
+        this.code = code;
+    }
+
+    public int code() {
+        return code;
+    }
+
+    private static final Map<Integer, ErrorCode> lookup = Arrays.stream(values())
+            .collect(toMap(ErrorCode::code, Function.identity()));
+
+    public static ErrorCode valueOf(int code) {
+        return lookup.computeIfAbsent(code, k -> { throw new NoSuchElementException("No ErrorCode with code: " + k); });
+    }
+}
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Index.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Index.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Index.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Index.java
@@ -28,15 +28,18 @@
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.internal.clang.libclang.Index_h;
 
+import java.lang.invoke.VarHandle;
 import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Consumer;
 
+import static jdk.internal.jextract.impl.LayoutUtils.C_POINTER;
+
 public class Index implements AutoCloseable {
     // Pointer to CXIndex
     private MemoryAddress ptr;
     // Set of TranslationUnit
     public final List<TranslationUnit> translationUnits;
@@ -61,29 +64,44 @@
     }
 
     public static class ParsingFailedException extends RuntimeException {
         private static final long serialVersionUID = -1L;
         private final Path srcFile;
+        private final ErrorCode code;
 
-        public ParsingFailedException(Path srcFile) {
-            super("Failed to parse " + srcFile.toAbsolutePath().toString());
+        public ParsingFailedException(Path srcFile, ErrorCode code) {
+            super("Failed to parse " + srcFile.toAbsolutePath().toString() + ": " + code);
             this.srcFile = srcFile;
+            this.code = code;
         }
     }
 
-    public TranslationUnit parseTU(String file, int options, String... args)
+    private static final VarHandle VH_MemoryAddress = C_POINTER.varHandle(MemoryAddress.class);
+
+    public TranslationUnit parseTU(String file, Consumer<Diagnostic> dh, int options, String... args)
     throws ParsingFailedException {
         try (MemorySegment src = Utils.toNativeString(file) ;
-             MemorySegment cargs = Utils.toNativeStringArray(args)) {
-            MemoryAddress tu = Index_h.clang_parseTranslationUnit(
-                    ptr, src.baseAddress(), cargs == null ? MemoryAddress.NULL : cargs.baseAddress(), args.length, MemoryAddress.NULL, 0, options);
+             MemorySegment cargs = Utils.toNativeStringArray(args);
+             MemorySegment outAddress = MemorySegment.allocateNative(C_POINTER)) {
+            ErrorCode code = ErrorCode.valueOf(Index_h.clang_parseTranslationUnit2(
+                    ptr,
+                    src.baseAddress(),
+                    cargs == null ? MemoryAddress.NULL : cargs.baseAddress(),
+                    args.length, MemoryAddress.NULL,
+                    0,
+                    options,
+                    outAddress.baseAddress()));
+
+            MemoryAddress tu = (MemoryAddress) VH_MemoryAddress.get(outAddress.baseAddress());
+            TranslationUnit rv = new TranslationUnit(tu);
+            // even if we failed to parse, we might still have diagnostics
+            rv.processDiagnostics(dh);
 
-            if (tu == null || tu == MemoryAddress.NULL) {
-                throw new ParsingFailedException(Path.of(file).toAbsolutePath());
+            if (code != ErrorCode.Success) {
+                throw new ParsingFailedException(Path.of(file).toAbsolutePath(), code);
             }
 
-            TranslationUnit rv = new TranslationUnit(tu);
             translationUnits.add(rv);
             return rv;
         }
     }
 
@@ -96,18 +114,16 @@
         return rv;
     }
 
     public TranslationUnit parse(String file, Consumer<Diagnostic> dh, boolean detailedPreprocessorRecord, String... args)
     throws ParsingFailedException {
-        TranslationUnit tu = parse(file, detailedPreprocessorRecord, args);
-        tu.processDiagnostics(dh);
-        return tu;
+        return parseTU(file, dh, defaultOptions(detailedPreprocessorRecord), args);
     }
 
     public TranslationUnit parse(String file, boolean detailedPreprocessorRecord, String... args)
     throws ParsingFailedException {
-        return parseTU(file, defaultOptions(detailedPreprocessorRecord), args);
+        return parse(file, dh -> {}, detailedPreprocessorRecord, args);
     }
 
     @Override
     public void close() {
         dispose();
@@ -120,6 +136,7 @@
         if (ptr != MemoryAddress.NULL) {
             Index_h.clang_disposeIndex(ptr);
         }
         ptr = MemoryAddress.NULL;
     }
+
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/LibClang.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/LibClang.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/LibClang.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/LibClang.java
@@ -29,16 +29,17 @@
 import jdk.incubator.foreign.MemorySegment;
 import jdk.internal.clang.libclang.Index_h;
 
 public class LibClang {
     private static final boolean DEBUG = Boolean.getBoolean("libclang.debug");
+    private static final boolean CRASH_RECOVERY = Boolean.getBoolean("libclang.crash_recovery");
 
     public static Index createIndex(boolean local) {
         Index index = new Index(Index_h.clang_createIndex(local ? 1 : 0, 0));
-        Index_h.clang_toggleCrashRecovery(0);
+        Index_h.clang_toggleCrashRecovery(CRASH_RECOVERY ? 1 : 0);
         if (DEBUG) {
-            System.err.println("LibClang crash recovery disabled");
+            System.err.println("LibClang crash recovery " + (CRASH_RECOVERY ? "enabled" : "disabled"));
         }
         return index;
     }
 
     public static String CXStrToString(MemorySegment cxstr) {
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/SaveError.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/SaveError.java
--- /dev/null
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/SaveError.java
@@ -0,0 +1,61 @@
+/*
+ *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ *  This code is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 only, as
+ *  published by the Free Software Foundation.  Oracle designates this
+ *  particular file as subject to the "Classpath" exception as provided
+ *  by Oracle in the LICENSE file that accompanied this code.
+ *
+ *  This code is distributed in the hope that it will be useful, but WITHOUT
+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ *  version 2 for more details (a copy is included in the LICENSE file that
+ *  accompanied this code).
+ *
+ *  You should have received a copy of the GNU General Public License version
+ *  2 along with this work; if not, write to the Free Software Foundation,
+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ *  or visit www.oracle.com if you need additional information or have any
+ *  questions.
+ *
+ */
+package jdk.internal.clang;
+
+import java.util.Arrays;
+import java.util.Map;
+import java.util.NoSuchElementException;
+import java.util.function.Function;
+
+import static java.util.stream.Collectors.toMap;
+import static jdk.internal.clang.libclang.Index_h.CXSaveError_InvalidTU;
+import static jdk.internal.clang.libclang.Index_h.CXSaveError_None;
+import static jdk.internal.clang.libclang.Index_h.CXSaveError_TranslationErrors;
+import static jdk.internal.clang.libclang.Index_h.CXSaveError_Unknown;
+
+public enum SaveError {
+    None(CXSaveError_None),
+    Unknown(CXSaveError_Unknown),
+    TranslationErrors(CXSaveError_TranslationErrors),
+    InvalidTU(CXSaveError_InvalidTU);
+
+    private final int code;
+
+    SaveError(int code) {
+        this.code = code;
+    }
+
+    public int code() {
+        return code;
+    }
+
+    private static final Map<Integer, SaveError> lookup = Arrays.stream(values())
+            .collect(toMap(SaveError::code, Function.identity()));
+
+    public static SaveError valueOf(int code) {
+        return lookup.computeIfAbsent(code, k -> { throw new NoSuchElementException("No SaveError with code: " + k); });
+    }
+}
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
@@ -60,14 +60,13 @@
         return rv;
     }
 
     public final void save(Path path) throws TranslationUnitSaveException {
         try (MemorySegment pathStr = Utils.toNativeString(path.toAbsolutePath().toString())) {
-            int res = Index_h.clang_saveTranslationUnit(tu,
-                    pathStr.baseAddress(), 0);
-            if (res != 0) {
-                throw new TranslationUnitSaveException(path);
+            SaveError res = SaveError.valueOf(Index_h.clang_saveTranslationUnit(tu, pathStr.baseAddress(), 0));
+            if (res != SaveError.None) {
+                throw new TranslationUnitSaveException(path, res);
             }
         }
     }
 
     void processDiagnostics(Consumer<Diagnostic> dh) {
@@ -79,24 +78,30 @@
 
     static long FILENAME_OFFSET = Index_h.CXUnsavedFile$LAYOUT.offset(MemoryLayout.PathElement.groupElement("Filename")) / 8;
     static long CONTENTS_OFFSET = Index_h.CXUnsavedFile$LAYOUT.offset(MemoryLayout.PathElement.groupElement("Contents")) / 8;
     static long LENGTH_OFFSET = Index_h.CXUnsavedFile$LAYOUT.offset(MemoryLayout.PathElement.groupElement("Length")) / 8;
 
-    public int reparse(Index.UnsavedFile... inMemoryFiles) {
+    public void reparse(Index.UnsavedFile... inMemoryFiles) {
         try (AllocationScope scope = new AllocationScope()) {
             MemorySegment files = inMemoryFiles.length == 0 ?
                     null :
                     scope.track(MemorySegment.allocateNative(MemoryLayout.ofSequence(inMemoryFiles.length, Index_h.CXUnsavedFile$LAYOUT)));
             for (int i = 0; i < inMemoryFiles.length; i++) {
                 MemoryAddress start = files.baseAddress().addOffset(i * Index_h.CXUnsavedFile$LAYOUT.byteSize());
                 Utils.setPointer(start.addOffset(FILENAME_OFFSET), scope.track(Utils.toNativeString(inMemoryFiles[i].file)).baseAddress());
                 Utils.setPointer(start.addOffset(CONTENTS_OFFSET), scope.track(Utils.toNativeString(inMemoryFiles[i].contents)).baseAddress());
                 Utils.setLong(start.addOffset(LENGTH_OFFSET), inMemoryFiles[i].contents.length());
             }
-            return Index_h.clang_reparseTranslationUnit(tu, inMemoryFiles.length,
-                    files == null ? MemoryAddress.NULL : files.baseAddress(),
-                    Index_h.clang_defaultReparseOptions(tu));
+            ErrorCode code = ErrorCode.valueOf(Index_h.clang_reparseTranslationUnit(
+                        tu,
+                        inMemoryFiles.length,
+                        files == null ? MemoryAddress.NULL : files.baseAddress(),
+                        Index_h.clang_defaultReparseOptions(tu)));
+
+            if (code != ErrorCode.Success) {
+                throw new IllegalStateException("Re-parsing failed: " + code);
+            }
         }
     }
 
     public void reparse(Consumer<Diagnostic> dh, Index.UnsavedFile... inMemoryFiles) {
         reparse(inMemoryFiles);
@@ -203,10 +208,13 @@
 
     public static class TranslationUnitSaveException extends IOException {
 
         static final long serialVersionUID = 1L;
 
-        TranslationUnitSaveException(Path path) {
-            super("Cannot save translation unit to: " + path.toAbsolutePath());
+        private final SaveError error;
+
+        TranslationUnitSaveException(Path path, SaveError error) {
+            super("Cannot save translation unit to: " + path.toAbsolutePath() + ". Error: " + error);
+            this.error = error;
         }
     }
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java
@@ -78,13 +78,11 @@
                 result = reparse(constantDecl(macroName, true)).asType(result.type);
             }
             return result.success() ?
                     Optional.of((Macro)result) :
                     Optional.empty();
-        } catch (Throwable ex) {
-            // This ate the NPE and cause skip of macros
-            // Why are we expecting exception here? Simply be defensive?
+        } catch (BadMacroException ex) {
             if (JextractTaskImpl.VERBOSE) {
                 System.err.println("Failed to handle macro " + macroName);
                 ex.printStackTrace(System.err);
             }
             return Optional.empty();
