diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java
@@ -251,12 +251,12 @@
      * @param segment the segment which will be registered on this native scope.
      * @return a new, non closeable memory segment, backed by the same underlying region as {@code segment},
      * but whose life-cycle is tied to that of this native scope.
      * @throws IllegalStateException if {@code segment} is not <em>alive</em> (see {@link MemorySegment#isAlive()}).
      * @throws NullPointerException if {@code segment == null}
-     * @throws IllegalArgumentException if {@code segment.ownerThread() != this.ownerThread()}, or if {@code segment}
-     * does not feature the {@link MemorySegment#CLOSE} access mode.
+     * @throws IllegalArgumentException if {@code segment} is not confined and {@code segment.ownerThread() != this.ownerThread()},
+     * or if {@code segment} does not feature the {@link MemorySegment#CLOSE} access mode.
      */
     public abstract MemorySegment register(MemorySegment segment);
 
     /**
      * Close this native scope; calling this method will render any address obtained through this native scope
