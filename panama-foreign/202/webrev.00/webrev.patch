diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractNativeScope.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractNativeScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractNativeScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractNativeScope.java
@@ -53,11 +53,11 @@
     }
 
     @Override
     public MemorySegment register(MemorySegment segment) {
         Objects.requireNonNull(segment);
-        if (segment.ownerThread() != ownerThread()) {
+        if (segment.ownerThread() != null && (segment.ownerThread() != ownerThread())) {
             throw new IllegalArgumentException("Cannot register segment owned by a different thread");
         } else if (!segment.hasAccessModes(MemorySegment.CLOSE)) {
             throw new IllegalArgumentException("Cannot register a non-closeable segment");
         }
         MemorySegment attachedSegment = ((AbstractMemorySegmentImpl)segment)
diff a/test/jdk/java/foreign/TestNativeScope.java b/test/jdk/java/foreign/TestNativeScope.java
--- a/test/jdk/java/foreign/TestNativeScope.java
+++ b/test/jdk/java/foreign/TestNativeScope.java
@@ -22,11 +22,11 @@
  *
  */
 
 /*
  * @test
- * @run testng TestNativeScope
+ * @run testng/othervm -Dforeign.restricted=permit TestNativeScope
  */
 
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.NativeScope;
 import jdk.incubator.foreign.MemoryHandles;
@@ -182,10 +182,21 @@
         t.start();
         t.join();
         assertTrue(failed.get());
     }
 
+    @Test
+    public void testRegisterFromUnconfined() {
+        MemorySegment unconfined = MemorySegment.ofNativeRestricted(MemoryAddress.ofLong(42), 10, null, null, null);
+        NativeScope scope = NativeScope.boundedScope(10);
+        MemorySegment registered = scope.register(unconfined);
+        assertFalse(unconfined.isAlive());
+        assertEquals(registered.ownerThread(), scope.ownerThread());
+        scope.close();
+        assertFalse(registered.isAlive());
+    }
+
     @DataProvider(name = "nativeScopes")
     static Object[][] nativeScopes() {
         return new Object[][] {
                 { (byte)42, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_8_BE, byte.class,
                         (AllocationFunction<Byte>) NativeScope::allocate,
