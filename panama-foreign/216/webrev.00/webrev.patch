diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/ConstantHelper.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/ConstantHelper.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/ConstantHelper.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/ConstantHelper.java
@@ -25,10 +25,11 @@
 package jdk.incubator.jextract.tool;
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.internal.org.objectweb.asm.ClassWriter;
 import jdk.internal.org.objectweb.asm.ConstantDynamic;
 import jdk.internal.org.objectweb.asm.Handle;
@@ -97,10 +98,17 @@
             desc(MemorySegment.class),
             "baseAddress",
             desc(methodType(MemoryAddress.class))
     );
 
+    private static final DirectMethodHandleDesc MH_MemoryHandles_asAddressVarHandle = MethodHandleDesc.ofMethod(
+            Kind.STATIC,
+            desc(MemoryHandles.class),
+            "asAddressVarHandle",
+            desc(methodType(VarHandle.class, VarHandle.class))
+    );
+
     private static final DirectMethodHandleDesc BSM_GET_STATIC_FINAL = ConstantDescs.ofConstantBootstrap(
             CD_ConstantBootstraps,
             "getStaticFinal",
             CD_Object,
             CD_Class
@@ -121,10 +129,21 @@
     private final ClassDesc CD_constantsHelper;
     private final ConstantDesc LIBRARIES;
 
     private final Map<String, DirectMethodHandleDesc> pool = new HashMap<>();
 
+    private static final Map<Class<?>, ClassDesc> CARRIERS = Map.ofEntries(
+            Map.entry(Byte.TYPE,                desc(Byte.TYPE)),
+            Map.entry(Short.TYPE,               desc(Short.TYPE)),
+            Map.entry(Character.TYPE,           desc(Character.TYPE)),
+            Map.entry(Integer.TYPE,             desc(Integer.TYPE)),
+            Map.entry(Long.TYPE,                desc(Short.TYPE)),
+            Map.entry(Float.TYPE,               desc(Short.TYPE)),
+            Map.entry(Double.TYPE,              desc(Short.TYPE)),
+            Map.entry(MemoryAddress.class,      desc(Long.TYPE))
+    );
+
     ConstantHelper(String parentClassName, ClassDesc runtimeHelper, ClassDesc cString, String[] libraryNames) {
         this.cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
         String className = parentClassName + "$constants";
         this.CD_constantsHelper = ClassDesc.of(className);
         this.internalClassName = className.replace('.', '/');
@@ -406,20 +425,29 @@
 
     private static ConstantDesc varHandleDesc(String name, ConstantDesc memoryLayout, ClassDesc carrier) {
         return DynamicConstantDesc.ofNamed(BSM_INVOKE, "VH_" + name, CD_VarHandle, MH_MemoryLayout_varHandle, memoryLayout, carrier);
     }
 
+    private static ConstantDesc addressVarHandleDesc(String name, ConstantDesc varHandle) {
+        return DynamicConstantDesc.ofNamed(BSM_INVOKE, "VH_" + name, CD_VarHandle, MH_MemoryHandles_asAddressVarHandle, varHandle);
+    }
+
     private static ConstantDesc groupElementDesc(String fieldName) {
         return DynamicConstantDesc.ofNamed(BSM_INVOKE, "groupElement_" + fieldName, CD_PathElelemt, MH_PathElement_groupElement, fieldName);
     }
 
     private static ConstantDesc varHandleDesc(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
-        if (parentLayout != null) {
-            return varHandleDesc(javaName, desc(parentLayout), desc(type), groupElementDesc(nativeName));
-        } else {
-            return varHandleDesc(javaName, desc(layout), desc(type));
+        var carrier = CARRIERS.get(type);
+        if (carrier == null) {
+            carrier = desc(type);
         }
+
+        var varHandle = parentLayout != null ?
+                varHandleDesc(javaName, desc(parentLayout), carrier, groupElementDesc(nativeName)) :
+                varHandleDesc(javaName, desc(layout), carrier);
+
+        return type == MemoryAddress.class ? addressVarHandleDesc(javaName, varHandle) : varHandle;
     }
 
     private ConstantDesc globalVarAddressDesc(String name, MemoryLayout layout) {
         return DynamicConstantDesc.ofNamed(BSM_INVOKE, "ADDR_" + name, CD_MemoryAddress, MH_lookupGlobalVariable, LIBRARIES, name, desc(layout));
     }
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -396,11 +396,11 @@
         if (layout == null) {
             //no layout - abort
             return null;
         }
         Class<?> clazz = typeTranslator.getJavaType(type);
-        if (tree.kind() == Declaration.Variable.Kind.BITFIELD || clazz == MemoryAddress.class ||
+        if (tree.kind() == Declaration.Variable.Kind.BITFIELD ||
                 (layout instanceof ValueLayout && layout.byteSize() > 8)) {
             //skip
             return null;
         }
 
