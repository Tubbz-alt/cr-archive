diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
@@ -163,14 +163,24 @@
             } else {
                 return clazz;
             }
         }
 
+        private Class<?> promote(Class<?> c) {
+            if (c == byte.class || c == char.class || c == short.class || c == int.class) {
+                return long.class;
+            } else if (c == float.class) {
+                return double.class;
+            } else {
+                return c;
+            }
+        }
+
         private Class<?> normalize(Class<?> c) {
             c = unboxIfNeeded(c);
             if (c.isPrimitive()) {
-                return c;
+                return promote(c);
             }
             if (MemoryAddress.class.isAssignableFrom(c)) {
                 return MemoryAddress.class;
             }
             if (MemorySegment.class.isAssignableFrom(c)) {
@@ -178,19 +188,13 @@
             }
             throw new IllegalArgumentException("Invalid type for ABI: " + c.getTypeName());
         }
 
         private MemoryLayout variadicLayout(Class<?> c) {
-            if (c == byte.class) {
-                return C_CHAR;
-            } else if (c == char.class || c == short.class) {
-                return C_SHORT;
-            } else if (c == int.class) {
-                return C_INT;
-            } else if (c == long.class) {
+            if (c == long.class) {
                 return C_LONGLONG;
-            } else if (c == float.class || c == double.class) {
+            } else if (c == double.class) {
                 return C_DOUBLE;
             } else if (MemoryAddress.class.isAssignableFrom(c)) {
                 return C_POINTER;
             } else {
                 throw new IllegalArgumentException("Unhandled variadic argument class: " + c);
diff a/test/jdk/tools/jextract/test8244959/Test8244959.java b/test/jdk/tools/jextract/test8244959/Test8244959.java
--- a/test/jdk/tools/jextract/test8244959/Test8244959.java
+++ b/test/jdk/tools/jextract/test8244959/Test8244959.java
@@ -39,12 +39,12 @@
 public class Test8244959 {
     @Test
     public void testsPrintf() {
         try (MemorySegment s = MemorySegment.allocateNative(1024)) {
             sprintf(s.baseAddress(),
-                toCString("%hhd %hd %d %ld %lld %c").baseAddress(),
-                (byte) 1, (short) 2, 3, 4l, 5l, 'a');
+                toCString("%hhd %c %.2f %.2f %ld %ld %d %hd %d %d %lld %c").baseAddress(),
+                (byte) 1, 'b', -1.25f, 5.5d, -200l, Long.MAX_VALUE, (byte) -2, (short) 2, 3, (short) -4, 5l, 'a');
             String str = toJavaString(s.baseAddress());
-            assertEquals(str, "1 2 3 4 5 a");
+            assertEquals(str, "1 b -1.25 5.50 -200 " + Long.MAX_VALUE + " -2 2 3 -4 5 a");
         }
     }
 }
