diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
@@ -163,14 +163,24 @@
             } else {
                 return clazz;
             }
         }
 
+        private Class<?> promote(Class<?> c) {
+            if (c == byte.class || c == char.class || c == short.class || c == int.class) {
+                return long.class;
+            } else if (c == float.class) {
+                return double.class;
+            } else {
+                return c;
+            }
+        }
+
         private Class<?> normalize(Class<?> c) {
             c = unboxIfNeeded(c);
             if (c.isPrimitive()) {
-                return c;
+                return promote(c);
             }
             if (MemoryAddress.class.isAssignableFrom(c)) {
                 return MemoryAddress.class;
             }
             if (MemorySegment.class.isAssignableFrom(c)) {
@@ -178,19 +188,13 @@
             }
             throw new IllegalArgumentException("Invalid type for ABI: " + c.getTypeName());
         }
 
         private MemoryLayout variadicLayout(Class<?> c) {
-            if (c == byte.class) {
-                return C_CHAR;
-            } else if (c == char.class || c == short.class) {
-                return C_SHORT;
-            } else if (c == int.class) {
-                return C_INT;
-            } else if (c == long.class) {
+            if (c == long.class) {
                 return C_LONGLONG;
-            } else if (c == float.class || c == double.class) {
+            } else if (c == double.class) {
                 return C_DOUBLE;
             } else if (MemoryAddress.class.isAssignableFrom(c)) {
                 return C_POINTER;
             } else {
                 throw new IllegalArgumentException("Unhandled variadic argument class: " + c);
