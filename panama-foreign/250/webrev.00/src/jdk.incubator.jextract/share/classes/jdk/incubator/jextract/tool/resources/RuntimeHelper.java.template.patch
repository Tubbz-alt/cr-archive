diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
@@ -9,10 +9,11 @@
 import jdk.incubator.foreign.MemorySegment;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
+import java.io.File;
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.Optional;
 
 import static ${C_LANG}.*;
@@ -28,11 +29,17 @@
     static final LibraryLookup[] libraries(String... libNames) {
         if (libNames.length == 0) {
             return new LibraryLookup[] { LibraryLookup.ofDefault() };
         } else {
             return Arrays.stream(libNames)
-                .map(libName -> LibraryLookup.ofLibrary(libName))
+                 .map(libName -> {
+                      if (libName.indexOf(File.separatorChar) != -1) {
+                          return LibraryLookup.ofPath(libName);
+                      } else {
+                          return LibraryLookup.ofLibrary(libName);
+                      }
+                 })
                 .toArray(LibraryLookup[]::new);
         }
     }
 
     private static final Optional<MemoryAddress> lookup(LibraryLookup[] LIBRARIES, String sym) {
