diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java
@@ -148,15 +148,21 @@
         }
         boolean librariesSpecified = optionSet.has("l");
         if (librariesSpecified) {
             for (Object arg : optionSet.valuesOf("l")) {
                 String lib = (String)arg;
-                if (lib.indexOf(File.separatorChar) != -1) {
-                    err.println(format("l.name.should.not.be.path", lib));
-                    return OPTION_ERROR;
+                if (lib.indexOf(File.separatorChar) == -1) {
+                    builder.addLibraryName(lib);
+                } else {
+                    Path libPath = Paths.get(lib);
+                    if (libPath.isAbsolute() && Files.isRegularFile(libPath)) {
+                        builder.addLibraryName(lib);
+                    } else {
+                        err.println(format("l.option.value.invalid", lib));
+                        return OPTION_ERROR;
+                    }
                 }
-                builder.addLibraryName(lib);
             }
         }
 
         String targetPackage = optionSet.has("t") ? (String) optionSet.valueOf("t") : "";
         builder.setTargetPackage(targetPackage);
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Messages.properties b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Messages.properties
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Messages.properties
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Messages.properties
@@ -21,11 +21,11 @@
 #  questions.
 #
 
 # error message
 cannot.read.header.file=cannot read header file: {0}
-l.name.should.not.be.path=option value for -l option cannot be a path
+l.option.value.invalid=option value for -l option should be a name or an absolute path
 
 # help messages for options
 help.C=pass through argument for clang
 help.I=specify include files path
 help.d=specify where to place generated files
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
@@ -9,10 +9,11 @@
 import jdk.incubator.foreign.MemorySegment;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
+import java.io.File;
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.Optional;
 
 import static ${C_LANG}.*;
@@ -28,11 +29,17 @@
     static final LibraryLookup[] libraries(String... libNames) {
         if (libNames.length == 0) {
             return new LibraryLookup[] { LibraryLookup.ofDefault() };
         } else {
             return Arrays.stream(libNames)
-                .map(libName -> LibraryLookup.ofLibrary(libName))
+                 .map(libName -> {
+                      if (libName.indexOf(File.separatorChar) != -1) {
+                          return LibraryLookup.ofPath(libName);
+                      } else {
+                          return LibraryLookup.ofLibrary(libName);
+                      }
+                 })
                 .toArray(LibraryLookup[]::new);
         }
     }
 
     private static final Optional<MemoryAddress> lookup(LibraryLookup[] LIBRARIES, String sym) {
diff a/test/jdk/tools/jextract/JtregJextract.java b/test/jdk/tools/jextract/JtregJextract.java
--- a/test/jdk/tools/jextract/JtregJextract.java
+++ b/test/jdk/tools/jextract/JtregJextract.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 import java.io.IOException;
+import java.io.File;
 import java.io.UncheckedIOException;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -62,10 +63,20 @@
             String opt = args[i++];
             if ("--".equals(opt)) {
                 break;
             }
 
+            if ("-libpath".equals(opt)) {
+                String lib = args[i];
+                jextrOpts.add("-l");
+                String libpath = System.getProperty("test.nativepath") + File.separator + System.mapLibraryName(lib);
+                System.err.println("jextract driver libpath passed: " + libpath);
+                jextrOpts.add(libpath);
+                i++;
+                continue;
+            }
+
             if ("-d".equals(opt)) {
                 i++;
                 continue;
             }
             // Pattern $(system.property.name) is replaced with the
diff a/test/jdk/tools/jextract/test8249757/LibTest8249757Test.java b/test/jdk/tools/jextract/test8249757/LibTest8249757Test.java
--- /dev/null
+++ b/test/jdk/tools/jextract/test8249757/LibTest8249757Test.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+import org.testng.annotations.Test;
+import static org.testng.Assert.assertEquals;
+import static test.jextract.test8249757.test8249757_h.*;
+
+/*
+ * @test
+ * @library ..
+ * @modules jdk.incubator.jextract
+ * @bug 8249757
+ * @summary jextract should expose a way to load library from a given absolute path
+ * @run driver JtregJextract -libpath Test8249757 -t test.jextract.test8249757 -- test8249757.h
+ * @run testng/othervm -Dforeign.restricted=permit LibTest8249757Test
+ */
+public class LibTest8249757Test {
+    @Test
+    public void testSquare() {
+        assertEquals(square(5), 25);
+        assertEquals(square(16), 256);
+        assertEquals(square(20), 400);
+    }
+}
diff a/test/jdk/tools/jextract/test8249757/libTest8249757.c b/test/jdk/tools/jextract/test8249757/libTest8249757.c
--- /dev/null
+++ b/test/jdk/tools/jextract/test8249757/libTest8249757.c
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+#include "test8249757.h"
+
+EXPORT int square(int x) {
+    return x*x;
+}
diff a/test/jdk/tools/jextract/test8249757/test8249757.h b/test/jdk/tools/jextract/test8249757/test8249757.h
--- /dev/null
+++ b/test/jdk/tools/jextract/test8249757/test8249757.h
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+#ifdef __cplusplus
+extern "C" {
+#endif // __cplusplus
+
+#ifdef _WIN64
+#define EXPORT __declspec(dllexport)
+#else
+#define EXPORT
+#endif
+
+EXPORT int square(int);
+
+#ifdef __cplusplus
+}
+#endif // __cplusplus
