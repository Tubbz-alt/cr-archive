diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -68,14 +68,23 @@
     protected final TypeTranslator typeTranslator = new TypeTranslator();
     private final String clsName;
     private final String pkgName;
     private StructBuilder structBuilder;
     private List<String> structSources = new ArrayList<>();
-    private Set<String> structClassNames = new HashSet<>();
-    private int structClassNameCount = 0;
-    private String uniqueStructClassName(String name) {
-        return structClassNames.add(name.toLowerCase())? name : (name + "$" + structClassNameCount++);
+    private Set<String> nestedClassNames = new HashSet<>();
+    private int nestedClassNameCount = 0;
+    /*
+     * We may have case-insensitive name collision! A C program may have
+     * defined structs/unions/typedefs with the names FooS, fooS, FoOs, fOOs.
+     * Because we map structs/unions/typedefs to nested classes of header classes,
+     * such a case-insensitive name collision is problematic. This is because in
+     * a case-insensitive file system javac will overwrite classes for
+     * Header$CFooS, Header$CfooS, Header$CFoOs and so on! We solve this by
+     * generating unique case-insensitive names for nested classes.
+     */
+    private String uniqueNestedClassName(String name) {
+        return nestedClassNames.add(name.toLowerCase())? name : (name + "$" + nestedClassNameCount++);
     }
 
     // have we seen this Variable earlier?
     protected boolean variableSeen(Declaration.Variable tree) {
         return !variables.add(tree);
@@ -231,26 +240,18 @@
         if (parent instanceof Declaration.Typedef) {
             name = parent.name();
         }
 
         boolean structClass = false;
+        StructBuilder oldStructBuilder = this.structBuilder;
         if (!d.name().isEmpty() || !isRecord(parent)) {
             //only add explicit struct layout if the struct is not to be flattened inside another struct
             switch (d.kind()) {
                 case STRUCT:
                 case UNION: {
                     structClass = true;
-                    /*
-                     * We may have case-insensitive name collision! A C program may have
-                     * defined structs with the names FooS, fooS, FoOs, fOOs. Because we
-                     * map structs and unions to nested classes of header classes, such
-                     * a case-insensitive name collision is problematic. This is because in
-                     * a case-insensitive file system javac will overwrite classes for
-                     * Header$CFooS, Header$CfooS, Header$CFoOs and so on! We solve this by
-                     * generating unique case-insensitive names for classes.
-                     */
-                    String structClassName = uniqueStructClassName("C" + name);
+                    String structClassName = uniqueNestedClassName("C" + name);
                     this.structBuilder = new StructBuilder(structClassName, pkgName, constantHelper);
                     structBuilder.incrAlign();
                     structBuilder.classBegin();
                     structBuilder.addLayoutGetter(structClassName, d.layout().get());
                     break;
@@ -259,11 +260,11 @@
         }
         d.members().forEach(fieldTree -> fieldTree.accept(this, d.name().isEmpty() ? parent : d));
         if (structClass) {
             this.structBuilder.classEnd();
             structSources.add(structBuilder.getSource());
-            this.structBuilder = null;
+            this.structBuilder = oldStructBuilder;
         }
         return null;
     }
 
     @Override
@@ -326,11 +327,11 @@
             Declaration.Scoped s = ((Type.Declared) type).tree();
             if (!s.name().equals(tree.name())) {
                 return visitScoped(s, tree);
             }
         } else if (type instanceof Type.Primitive) {
-             builder.emitPrimitiveTypedef((Type.Primitive)type, tree.name());
+             builder.emitPrimitiveTypedef((Type.Primitive)type, uniqueNestedClassName("C" + tree.name()));
         }
         return null;
     }
 
     @Override
