diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
@@ -71,43 +71,43 @@
          * Reads a value into an {@code int}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code int}
          */
-        int readInt(MemoryLayout layout);
+        int vargAsInt(MemoryLayout layout);
 
         /**
          * Reads a value into a {@code long}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code long}
          */
-        long readLong(MemoryLayout layout);
+        long vargAsLong(MemoryLayout layout);
 
         /**
          * Reads a value into a {@code double}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code double}
          */
-        double readDouble(MemoryLayout layout);
+        double vargAsDouble(MemoryLayout layout);
 
         /**
          * Reads a value into a {@code MemoryAddress}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code MemoryAddress}
          */
-        MemoryAddress readPointer(MemoryLayout layout);
+        MemoryAddress vargAsAddress(MemoryLayout layout);
 
         /**
          * Reads a value into a {@code MemorySegment}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code MemorySegment}
          */
-        MemorySegment readStructOrUnion(MemoryLayout layout);
+        MemorySegment vargAsSegment(MemoryLayout layout);
 
         /**
          * Skips a number of va arguments with the given memory layouts.
          *
          * @param layouts the layout of the value
@@ -165,47 +165,47 @@
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as an {@code int}.
              * @return this builder.
              */
-            Builder intArg(MemoryLayout layout, int value);
+            Builder vargFromInt(MemoryLayout layout, int value);
 
             /**
              * Adds a native value represented as a {@code long} to the va list.
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as a {@code long}.
              * @return this builder.
              */
-            Builder longArg(MemoryLayout layout, long value);
+            Builder vargFromLong(MemoryLayout layout, long value);
 
             /**
              * Adds a native value represented as a {@code double} to the va list.
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as a {@code double}.
              * @return this builder.
              */
-            Builder doubleArg(MemoryLayout layout, double value);
+            Builder vargFromDouble(MemoryLayout layout, double value);
 
             /**
              * Adds a native value represented as a {@code MemoryAddress} to the va list.
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as a {@code MemoryAddress}.
              * @return this builder.
              */
-            Builder memoryAddressArg(MemoryLayout layout, MemoryAddress value);
+            Builder vargFromAddress(MemoryLayout layout, MemoryAddress value);
 
             /**
              * Adds a native value represented as a {@code MemorySegment} to the va list.
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as a {@code MemorySegment}.
              * @return this builder.
              */
-            Builder memorySegmentArg(MemoryLayout layout, MemorySegment value);
+            Builder vargFromSegment(MemoryLayout layout, MemorySegment value);
         }
     }
 
     /**
      * The {@code _Bool} native type.
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java
@@ -159,31 +159,31 @@
     private void postAlignStack(MemoryLayout layout) {
         stackPtr(Utils.alignUp(stackPtr().addOffset(layout.byteSize()), 8));
     }
 
     @Override
-    public int readInt(MemoryLayout layout) {
+    public int vargAsInt(MemoryLayout layout) {
         return (int) read(int.class, layout);
     }
 
     @Override
-    public long readLong(MemoryLayout layout) {
+    public long vargAsLong(MemoryLayout layout) {
         return (long) read(long.class, layout);
     }
 
     @Override
-    public double readDouble(MemoryLayout layout) {
+    public double vargAsDouble(MemoryLayout layout) {
         return (double) read(double.class, layout);
     }
 
     @Override
-    public MemoryAddress readPointer(MemoryLayout layout) {
+    public MemoryAddress vargAsAddress(MemoryLayout layout) {
         return (MemoryAddress) read(MemoryAddress.class, layout);
     }
 
     @Override
-    public MemorySegment readStructOrUnion(MemoryLayout layout) {
+    public MemorySegment vargAsSegment(MemoryLayout layout) {
         return (MemorySegment) read(MemorySegment.class, layout);
     }
 
     private Object read(Class<?> carrier, MemoryLayout layout) {
         checkCompatibleType(carrier, layout, SysVx64Linker.ADDRESS_SIZE);
@@ -316,31 +316,31 @@
         private long currentGPOffset = 0;
         private long currentFPOffset = FP_OFFSET;
         private final List<SimpleVaArg> stackArgs = new ArrayList<>();
 
         @Override
-        public Builder intArg(MemoryLayout layout, int value) {
+        public Builder vargFromInt(MemoryLayout layout, int value) {
             return arg(int.class, layout, value);
         }
 
         @Override
-        public Builder longArg(MemoryLayout layout, long value) {
+        public Builder vargFromLong(MemoryLayout layout, long value) {
             return arg(long.class, layout, value);
         }
 
         @Override
-        public Builder doubleArg(MemoryLayout layout, double value) {
+        public Builder vargFromDouble(MemoryLayout layout, double value) {
             return arg(double.class, layout, value);
         }
 
         @Override
-        public Builder memoryAddressArg(MemoryLayout layout, MemoryAddress value) {
+        public Builder vargFromAddress(MemoryLayout layout, MemoryAddress value) {
             return arg(MemoryAddress.class, layout, value);
         }
 
         @Override
-        public Builder memorySegmentArg(MemoryLayout layout, MemorySegment value) {
+        public Builder vargFromSegment(MemoryLayout layout, MemorySegment value) {
             return arg(MemorySegment.class, layout, value);
         }
 
         private Builder arg(Class<?> carrier, MemoryLayout layout, Object value) {
             checkCompatibleType(carrier, layout, SysVx64Linker.ADDRESS_SIZE);
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
@@ -75,31 +75,31 @@
         this.ptr = segment.baseAddress();
         this.copies = copies;
     }
 
     @Override
-    public int readInt(MemoryLayout layout) {
+    public int vargAsInt(MemoryLayout layout) {
         return (int) read(int.class, layout);
     }
 
     @Override
-    public long readLong(MemoryLayout layout) {
+    public long vargAsLong(MemoryLayout layout) {
         return (long) read(long.class, layout);
     }
 
     @Override
-    public double readDouble(MemoryLayout layout) {
+    public double vargAsDouble(MemoryLayout layout) {
         return (double) read(double.class, layout);
     }
 
     @Override
-    public MemoryAddress readPointer(MemoryLayout layout) {
+    public MemoryAddress vargAsAddress(MemoryLayout layout) {
         return (MemoryAddress) read(MemoryAddress.class, layout);
     }
 
     @Override
-    public MemorySegment readStructOrUnion(MemoryLayout layout) {
+    public MemorySegment vargAsSegment(MemoryLayout layout) {
         return (MemorySegment) read(MemorySegment.class, layout);
     }
 
     private Object read(Class<?> carrier, MemoryLayout layout) {
         SharedUtils.checkCompatibleType(carrier, layout, Windowsx64Linker.ADDRESS_SIZE);
@@ -178,31 +178,31 @@
             args.add(new SimpleVaArg(carrier, layout, value));
             return this;
         }
 
         @Override
-        public Builder intArg(MemoryLayout layout, int value) {
+        public Builder vargFromInt(MemoryLayout layout, int value) {
             return arg(int.class, layout, value);
         }
 
         @Override
-        public Builder longArg(MemoryLayout layout, long value) {
+        public Builder vargFromLong(MemoryLayout layout, long value) {
             return arg(long.class, layout, value);
         }
 
         @Override
-        public Builder doubleArg(MemoryLayout layout, double value) {
+        public Builder vargFromDouble(MemoryLayout layout, double value) {
             return arg(double.class, layout, value);
         }
 
         @Override
-        public Builder memoryAddressArg(MemoryLayout layout, MemoryAddress value) {
+        public Builder vargFromAddress(MemoryLayout layout, MemoryAddress value) {
             return arg(MemoryAddress.class, layout, value);
         }
 
         @Override
-        public Builder memorySegmentArg(MemoryLayout layout, MemorySegment value) {
+        public Builder vargFromSegment(MemoryLayout layout, MemorySegment value) {
             return arg(MemorySegment.class, layout, value);
         }
 
         public WinVaList build() {
             MemorySegment ms = MemorySegment.allocateNative(VA_SLOT_SIZE_BYTES * args.size());
diff a/test/jdk/java/foreign/valist/VaListTest.java b/test/jdk/java/foreign/valist/VaListTest.java
--- a/test/jdk/java/foreign/valist/VaListTest.java
+++ b/test/jdk/java/foreign/valist/VaListTest.java
@@ -129,34 +129,34 @@
     private static final VarHandle VH_Point_y = Point_LAYOUT.varHandle(int.class, groupElement("y"));
 
     @Test
     public void testIntSum() throws Throwable {
         try (VaList vaList = CSupport.newVaList(b ->
-                b.intArg(C_INT, 10)
-                 .intArg(C_INT, 15)
-                 .intArg(C_INT, 20))) {
+                b.vargFromInt(C_INT, 10)
+                 .vargFromInt(C_INT, 15)
+                 .vargFromInt(C_INT, 20))) {
             int x = (int) MH_sumInts.invokeExact(3, vaList);
             assertEquals(x, 45);
         }
     }
 
     @Test
     public void testDoubleSum() throws Throwable {
         try (VaList vaList = CSupport.newVaList(b ->
-                b.doubleArg(C_DOUBLE, 3.0D)
-                 .doubleArg(C_DOUBLE, 4.0D)
-                 .doubleArg(C_DOUBLE, 5.0D))) {
+                b.vargFromDouble(C_DOUBLE, 3.0D)
+                 .vargFromDouble(C_DOUBLE, 4.0D)
+                 .vargFromDouble(C_DOUBLE, 5.0D))) {
             double x = (double) MH_sumDoubles.invokeExact(3, vaList);
             assertEquals(x, 12.0D);
         }
     }
 
     @Test
     public void testVaListMemoryAddress() throws Throwable {
         try (MemorySegment msInt = MemorySegment.allocateNative(C_INT)) {
             VH_int.set(msInt.baseAddress(), 10);
-            try (VaList vaList = CSupport.newVaList(b -> b.memoryAddressArg(C_POINTER, msInt.baseAddress()))) {
+            try (VaList vaList = CSupport.newVaList(b -> b.vargFromAddress(C_POINTER, msInt.baseAddress()))) {
                 int x = (int) MH_getInt.invokeExact(vaList);
                 assertEquals(x, 10);
             }
         }
     }
@@ -165,11 +165,11 @@
     public void testWinStructByValue() throws Throwable {
         try (MemorySegment struct = MemorySegment.allocateNative(Point_LAYOUT)) {
             VH_Point_x.set(struct.baseAddress(), 5);
             VH_Point_y.set(struct.baseAddress(), 10);
 
-            try (VaList vaList = CSupport.newVaList(b -> b.memorySegmentArg(Point_LAYOUT, struct))) {
+            try (VaList vaList = CSupport.newVaList(b -> b.vargFromSegment(Point_LAYOUT, struct))) {
                 int sum = (int) MH_sumStruct.invokeExact(vaList);
                 assertEquals(sum, 15);
             }
         }
     }
@@ -178,11 +178,11 @@
     public void testWinStructByReference() throws Throwable {
         try (MemorySegment struct = MemorySegment.allocateNative(BigPoint_LAYOUT)) {
             VH_BigPoint_x.set(struct.baseAddress(), 5);
             VH_BigPoint_y.set(struct.baseAddress(), 10);
 
-            try (VaList vaList = CSupport.newVaList(b -> b.memorySegmentArg(BigPoint_LAYOUT, struct))) {
+            try (VaList vaList = CSupport.newVaList(b -> b.vargFromSegment(BigPoint_LAYOUT, struct))) {
                 long sum = (long) MH_sumBigStruct.invokeExact(vaList);
                 assertEquals(sum, 15);
             }
         }
     }
@@ -216,135 +216,135 @@
 
     @DataProvider
     public static Object[][] upcalls() {
         return new Object[][]{
             { linkVaListCB("upcallBigStruct"), VaListConsumer.mh(vaList -> {
-                try (MemorySegment struct = vaList.readStructOrUnion(BigPoint_LAYOUT)) {
+                try (MemorySegment struct = vaList.vargAsSegment(BigPoint_LAYOUT)) {
                     assertEquals((long) VH_BigPoint_x.get(struct.baseAddress()), 8);
                     assertEquals((long) VH_BigPoint_y.get(struct.baseAddress()), 16);
                 }
             })},
             { linkVaListCB("upcallBigStruct"), VaListConsumer.mh(vaList -> {
                 VaList copy = vaList.copy();
-                try (MemorySegment struct = vaList.readStructOrUnion(BigPoint_LAYOUT)) {
+                try (MemorySegment struct = vaList.vargAsSegment(BigPoint_LAYOUT)) {
                     assertEquals((long) VH_BigPoint_x.get(struct.baseAddress()), 8);
                     assertEquals((long) VH_BigPoint_y.get(struct.baseAddress()), 16);
 
                     VH_BigPoint_x.set(struct.baseAddress(), 0);
                     VH_BigPoint_y.set(struct.baseAddress(), 0);
                 }
 
                 // should be independent
-                try (MemorySegment struct = copy.readStructOrUnion(BigPoint_LAYOUT)) {
+                try (MemorySegment struct = copy.vargAsSegment(BigPoint_LAYOUT)) {
                     assertEquals((long) VH_BigPoint_x.get(struct.baseAddress()), 8);
                     assertEquals((long) VH_BigPoint_y.get(struct.baseAddress()), 16);
                 }
             })},
             { linkVaListCB("upcallStruct"), VaListConsumer.mh(vaList -> {
-                try (MemorySegment struct = vaList.readStructOrUnion(Point_LAYOUT)) {
+                try (MemorySegment struct = vaList.vargAsSegment(Point_LAYOUT)) {
                     assertEquals((int) VH_Point_x.get(struct.baseAddress()), 5);
                     assertEquals((int) VH_Point_y.get(struct.baseAddress()), 10);
                 }
             })},
             { linkVaListCB("upcallMemoryAddress"), VaListConsumer.mh(vaList -> {
-                MemoryAddress intPtr = vaList.readPointer(C_POINTER);
+                MemoryAddress intPtr = vaList.vargAsAddress(C_POINTER);
                 MemorySegment ms = MemorySegment.ofNativeRestricted(intPtr, C_INT.byteSize(),
                                                                     Thread.currentThread(), null, null);
                 int x = (int) VH_int.get(ms.baseAddress());
                 assertEquals(x, 10);
             })},
             { linkVaListCB("upcallDoubles"), VaListConsumer.mh(vaList -> {
-                assertEquals(vaList.readDouble(C_DOUBLE), 3.0);
-                assertEquals(vaList.readDouble(C_DOUBLE), 4.0);
-                assertEquals(vaList.readDouble(C_DOUBLE), 5.0);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 3.0);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 4.0);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 5.0);
             })},
             { linkVaListCB("upcallInts"), VaListConsumer.mh(vaList -> {
-                assertEquals(vaList.readInt(C_INT), 10);
-                assertEquals(vaList.readInt(C_INT), 15);
-                assertEquals(vaList.readInt(C_INT), 20);
+                assertEquals(vaList.vargAsInt(C_INT), 10);
+                assertEquals(vaList.vargAsInt(C_INT), 15);
+                assertEquals(vaList.vargAsInt(C_INT), 20);
             })},
             { linkVaListCB("upcallStack"), VaListConsumer.mh(vaList -> {
                 // skip all registers
-                assertEquals(vaList.readLong(C_LONGLONG), 1L); // 1st windows arg read from shadow space
-                assertEquals(vaList.readLong(C_LONGLONG), 2L); // 2nd windows arg read from shadow space
-                assertEquals(vaList.readLong(C_LONGLONG), 3L); // windows 1st stack arg (int/float)
-                assertEquals(vaList.readLong(C_LONGLONG), 4L);
-                assertEquals(vaList.readLong(C_LONGLONG), 5L);
-                assertEquals(vaList.readLong(C_LONGLONG), 6L);
-                assertEquals(vaList.readLong(C_LONGLONG), 7L); // sysv 1st int stack arg
-                assertEquals(vaList.readLong(C_LONGLONG), 8L);
-                assertEquals(vaList.readLong(C_LONGLONG), 9L);
-                assertEquals(vaList.readLong(C_LONGLONG), 10L);
-                assertEquals(vaList.readLong(C_LONGLONG), 11L);
-                assertEquals(vaList.readLong(C_LONGLONG), 12L);
-                assertEquals(vaList.readLong(C_LONGLONG), 13L);
-                assertEquals(vaList.readLong(C_LONGLONG), 14L);
-                assertEquals(vaList.readLong(C_LONGLONG), 15L);
-                assertEquals(vaList.readLong(C_LONGLONG), 16L);
-                assertEquals(vaList.readDouble(C_DOUBLE), 1.0D);
-                assertEquals(vaList.readDouble(C_DOUBLE), 2.0D);
-                assertEquals(vaList.readDouble(C_DOUBLE), 3.0D);
-                assertEquals(vaList.readDouble(C_DOUBLE), 4.0D);
-                assertEquals(vaList.readDouble(C_DOUBLE), 5.0D);
-                assertEquals(vaList.readDouble(C_DOUBLE), 6.0D);
-                assertEquals(vaList.readDouble(C_DOUBLE), 7.0D);
-                assertEquals(vaList.readDouble(C_DOUBLE), 8.0D);
-                assertEquals(vaList.readDouble(C_DOUBLE), 9.0D); // sysv 1st float stack arg
-                assertEquals(vaList.readDouble(C_DOUBLE), 10.0D);
-                assertEquals(vaList.readDouble(C_DOUBLE), 11.0D);
-                assertEquals(vaList.readDouble(C_DOUBLE), 12.0D);
-                assertEquals(vaList.readDouble(C_DOUBLE), 13.0D);
-                assertEquals(vaList.readDouble(C_DOUBLE), 14.0D);
-                assertEquals(vaList.readDouble(C_DOUBLE), 15.0D);
-                assertEquals(vaList.readDouble(C_DOUBLE), 16.0D);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 1L); // 1st windows arg read from shadow space
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 2L); // 2nd windows arg read from shadow space
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 3L); // windows 1st stack arg (int/float)
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 4L);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 5L);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 6L);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 7L); // sysv 1st int stack arg
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 8L);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 9L);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 10L);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 11L);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 12L);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 13L);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 14L);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 15L);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 16L);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 1.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 2.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 3.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 4.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 5.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 6.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 7.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 8.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 9.0D); // sysv 1st float stack arg
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 10.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 11.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 12.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 13.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 14.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 15.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 16.0D);
 
                 // test some arbitrary values on the stack
-                assertEquals((byte) vaList.readInt(C_INT), (byte) 1);
-                assertEquals((char) vaList.readInt(C_INT), 'a');
-                assertEquals((short) vaList.readInt(C_INT), (short) 3);
-                assertEquals(vaList.readInt(C_INT), 4);
-                assertEquals(vaList.readLong(C_LONGLONG), 5L);
-                assertEquals((float) vaList.readDouble(C_DOUBLE), 6.0F);
-                assertEquals(vaList.readDouble(C_DOUBLE), 7.0D);
-                assertEquals((byte) vaList.readInt(C_INT), (byte) 8);
-                assertEquals((char) vaList.readInt(C_INT), 'b');
-                assertEquals((short) vaList.readInt(C_INT), (short) 10);
-                assertEquals(vaList.readInt(C_INT), 11);
-                assertEquals(vaList.readLong(C_LONGLONG), 12L);
-                assertEquals((float) vaList.readDouble(C_DOUBLE), 13.0F);
-                assertEquals(vaList.readDouble(C_DOUBLE), 14.0D);
-
-                try (MemorySegment point = vaList.readStructOrUnion(Point_LAYOUT)) {
+                assertEquals((byte) vaList.vargAsInt(C_INT), (byte) 1);
+                assertEquals((char) vaList.vargAsInt(C_INT), 'a');
+                assertEquals((short) vaList.vargAsInt(C_INT), (short) 3);
+                assertEquals(vaList.vargAsInt(C_INT), 4);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 5L);
+                assertEquals((float) vaList.vargAsDouble(C_DOUBLE), 6.0F);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 7.0D);
+                assertEquals((byte) vaList.vargAsInt(C_INT), (byte) 8);
+                assertEquals((char) vaList.vargAsInt(C_INT), 'b');
+                assertEquals((short) vaList.vargAsInt(C_INT), (short) 10);
+                assertEquals(vaList.vargAsInt(C_INT), 11);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 12L);
+                assertEquals((float) vaList.vargAsDouble(C_DOUBLE), 13.0F);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 14.0D);
+
+                try (MemorySegment point = vaList.vargAsSegment(Point_LAYOUT)) {
                     assertEquals((int) VH_Point_x.get(point.baseAddress()), 5);
                     assertEquals((int) VH_Point_y.get(point.baseAddress()), 10);
                 }
 
                 VaList copy = vaList.copy();
-                try (MemorySegment bigPoint = vaList.readStructOrUnion(BigPoint_LAYOUT)) {
+                try (MemorySegment bigPoint = vaList.vargAsSegment(BigPoint_LAYOUT)) {
                     assertEquals((long) VH_BigPoint_x.get(bigPoint.baseAddress()), 15);
                     assertEquals((long) VH_BigPoint_y.get(bigPoint.baseAddress()), 20);
 
                     VH_BigPoint_x.set(bigPoint.baseAddress(), 0);
                     VH_BigPoint_y.set(bigPoint.baseAddress(), 0);
                 }
 
                 // should be independent
-                try (MemorySegment struct = copy.readStructOrUnion(BigPoint_LAYOUT)) {
+                try (MemorySegment struct = copy.vargAsSegment(BigPoint_LAYOUT)) {
                     assertEquals((long) VH_BigPoint_x.get(struct.baseAddress()), 15);
                     assertEquals((long) VH_BigPoint_y.get(struct.baseAddress()), 20);
                 }
             })},
             // test skip
             { linkVaListCB("upcallStack"), VaListConsumer.mh(vaList -> {
                 vaList.skip(C_LONGLONG, C_LONGLONG, C_LONGLONG, C_LONGLONG);
-                assertEquals(vaList.readLong(C_LONGLONG), 5L);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 5L);
                 vaList.skip(C_LONGLONG, C_LONGLONG, C_LONGLONG, C_LONGLONG);
-                assertEquals(vaList.readLong(C_LONGLONG), 10L);
+                assertEquals(vaList.vargAsLong(C_LONGLONG), 10L);
                 vaList.skip(C_LONGLONG, C_LONGLONG, C_LONGLONG, C_LONGLONG, C_LONGLONG, C_LONGLONG);
-                assertEquals(vaList.readDouble(C_DOUBLE), 1.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 1.0D);
                 vaList.skip(C_DOUBLE, C_DOUBLE, C_DOUBLE, C_DOUBLE);
-                assertEquals(vaList.readDouble(C_DOUBLE), 6.0D);
+                assertEquals(vaList.vargAsDouble(C_DOUBLE), 6.0D);
             })},
         };
     }
 
     interface VaListConsumer {
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/VaList.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/VaList.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/VaList.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/VaList.java
@@ -78,13 +78,13 @@
     }
 
     @Benchmark
     public void vaList() throws Throwable {
         try (CSupport.VaList vaList = CSupport.newVaList(b ->
-            b.intArg(C_INT, 1)
-             .doubleArg(C_DOUBLE, 2D)
-             .longArg(C_LONGLONG, 3L)
+            b.vargFromInt(C_INT, 1)
+             .vargFromDouble(C_DOUBLE, 2D)
+             .vargFromLong(C_LONGLONG, 3L)
         )) {
             MH_vaList.invokeExact(3,
                                   vaList);
         }
     }
