diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
@@ -71,43 +71,43 @@
          * Reads a value into an {@code int}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code int}
          */
-        int readInt(MemoryLayout layout);
+        int vargAsInt(MemoryLayout layout);
 
         /**
          * Reads a value into a {@code long}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code long}
          */
-        long readLong(MemoryLayout layout);
+        long vargAsLong(MemoryLayout layout);
 
         /**
          * Reads a value into a {@code double}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code double}
          */
-        double readDouble(MemoryLayout layout);
+        double vargAsDouble(MemoryLayout layout);
 
         /**
          * Reads a value into a {@code MemoryAddress}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code MemoryAddress}
          */
-        MemoryAddress readPointer(MemoryLayout layout);
+        MemoryAddress vargAsAddress(MemoryLayout layout);
 
         /**
          * Reads a value into a {@code MemorySegment}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code MemorySegment}
          */
-        MemorySegment readStructOrUnion(MemoryLayout layout);
+        MemorySegment vargAsSegment(MemoryLayout layout);
 
         /**
          * Skips a number of va arguments with the given memory layouts.
          *
          * @param layouts the layout of the value
@@ -165,47 +165,47 @@
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as an {@code int}.
              * @return this builder.
              */
-            Builder intArg(MemoryLayout layout, int value);
+            Builder vargFromInt(MemoryLayout layout, int value);
 
             /**
              * Adds a native value represented as a {@code long} to the va list.
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as a {@code long}.
              * @return this builder.
              */
-            Builder longArg(MemoryLayout layout, long value);
+            Builder vargFromLong(MemoryLayout layout, long value);
 
             /**
              * Adds a native value represented as a {@code double} to the va list.
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as a {@code double}.
              * @return this builder.
              */
-            Builder doubleArg(MemoryLayout layout, double value);
+            Builder vargFromDouble(MemoryLayout layout, double value);
 
             /**
              * Adds a native value represented as a {@code MemoryAddress} to the va list.
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as a {@code MemoryAddress}.
              * @return this builder.
              */
-            Builder memoryAddressArg(MemoryLayout layout, MemoryAddress value);
+            Builder vargFromAddress(MemoryLayout layout, MemoryAddress value);
 
             /**
              * Adds a native value represented as a {@code MemorySegment} to the va list.
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as a {@code MemorySegment}.
              * @return this builder.
              */
-            Builder memorySegmentArg(MemoryLayout layout, MemorySegment value);
+            Builder vargFromSegment(MemoryLayout layout, MemorySegment value);
         }
     }
 
     /**
      * The {@code _Bool} native type.
