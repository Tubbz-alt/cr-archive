diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SequenceLayout.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SequenceLayout.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SequenceLayout.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SequenceLayout.java
@@ -200,25 +200,31 @@
      * <pre>{@code
     var flattenedSeq = MemoryLayout.ofSequence(12, MemoryLayouts.JAVA_INT);
      * }</pre>
      * @return a new sequence layout with the same size as this layout (but, possibly, with different
      * element count), whose element layout is not a sequence layout.
-     * @throws UnsupportedOperationException if this sequence layout does not have an element count.
+     * @throws UnsupportedOperationException if this sequence layout, or one of the nested sequence layouts being
+     * flattened, does not have an element count.
      */
     public SequenceLayout flatten() {
         if (!elementCount().isPresent()) {
-            throw new UnsupportedOperationException("Cannot flatten a sequence layout whose element count is unspecified");
+            throw badUnboundSequenceLayout();
         }
         long count = elementCount().getAsLong();
         MemoryLayout elemLayout = elementLayout();
         while (elemLayout instanceof SequenceLayout) {
-            count = count * ((SequenceLayout)elemLayout).elementCount().getAsLong();
-            elemLayout = ((SequenceLayout)elemLayout).elementLayout();
+            SequenceLayout elemSeq = (SequenceLayout)elemLayout;
+            count = count * elemSeq.elementCount().orElseThrow(this::badUnboundSequenceLayout);
+            elemLayout = elemSeq.elementLayout();
         }
         return MemoryLayout.ofSequence(count, elemLayout);
     }
 
+    private UnsupportedOperationException badUnboundSequenceLayout() {
+        return new UnsupportedOperationException("Cannot flatten a sequence layout whose element count is unspecified");
+    }
+
     @Override
     public String toString() {
         return decorateLayoutString(String.format("[%s:%s]",
                 elemCount.isPresent() ? elemCount.getAsLong() : "", elementLayout));
     }
diff a/test/jdk/java/foreign/TestReshape.java b/test/jdk/java/foreign/TestReshape.java
--- a/test/jdk/java/foreign/TestReshape.java
+++ b/test/jdk/java/foreign/TestReshape.java
@@ -2,13 +2,11 @@
  * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
+ * published by the Free Software Foundation.
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
@@ -94,10 +92,16 @@
     public void testFlattenOnUnboundSequence() {
         SequenceLayout seq = MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT);
         seq.flatten();
     }
 
+    @Test(expectedExceptions = UnsupportedOperationException.class)
+    public void testFlattenOnUnboundNestedSequence() {
+        SequenceLayout seq = MemoryLayout.ofSequence(4, MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT));
+        seq.flatten();
+    }
+
     static void assertDimensions(SequenceLayout layout, long... dims) {
         SequenceLayout prev = null;
         for (int i = 0 ; i < dims.length ; i++) {
             if (prev != null) {
                 layout = (SequenceLayout)prev.elementLayout();
