diff a/test/jdk/java/foreign/StdLibTest.java b/test/jdk/java/foreign/StdLibTest.java
--- a/test/jdk/java/foreign/StdLibTest.java
+++ b/test/jdk/java/foreign/StdLibTest.java
@@ -223,35 +223,35 @@
             }
         }
 
         String strcat(String s1, String s2) throws Throwable {
             try (MemorySegment buf = MemorySegment.allocateNative(s1.length() + s2.length() + 1) ;
-                 MemorySegment other = makeNativeString(s2)) {
+                 MemorySegment other = toCString(s2)) {
                 char[] chars = s1.toCharArray();
                 for (long i = 0 ; i < chars.length ; i++) {
                     byteArrHandle.set(buf.baseAddress(), i, (byte)chars[(int)i]);
                 }
                 byteArrHandle.set(buf.baseAddress(), (long)chars.length, (byte)'\0');
                 return toJavaString(((MemoryAddress)strcat.invokeExact(buf.baseAddress(), other.baseAddress())).rebase(buf));
             }
         }
 
         int strcmp(String s1, String s2) throws Throwable {
-            try (MemorySegment ns1 = makeNativeString(s1) ;
-                 MemorySegment ns2 = makeNativeString(s2)) {
+            try (MemorySegment ns1 = toCString(s1) ;
+                 MemorySegment ns2 = toCString(s2)) {
                 return (int)strcmp.invokeExact(ns1.baseAddress(), ns2.baseAddress());
             }
         }
 
         int puts(String msg) throws Throwable {
-            try (MemorySegment s = makeNativeString(msg)) {
+            try (MemorySegment s = toCString(msg)) {
                 return (int)puts.invokeExact(s.baseAddress());
             }
         }
 
         int strlen(String msg) throws Throwable {
-            try (MemorySegment s = makeNativeString(msg)) {
+            try (MemorySegment s = toCString(msg)) {
                 return (int)strlen.invokeExact(s.baseAddress());
             }
         }
 
         Tm gmtime(long arg) throws Throwable {
@@ -335,11 +335,11 @@
         int rand() throws Throwable {
             return (int)rand.invokeExact();
         }
 
         int printf(String format, List<PrintfArg> args) throws Throwable {
-            try (MemorySegment formatStr = makeNativeString(format)) {
+            try (MemorySegment formatStr = toCString(format)) {
                 return (int)specializedPrintf(args).invokeExact(formatStr.baseAddress(),
                         args.stream().map(a -> a.nativeValue).toArray());
             }
         }
 
@@ -410,11 +410,11 @@
                 .toArray(Object[][]::new);
     }
 
     enum PrintfArg {
         INTEGRAL(int.class, asVarArg(C_INT), "%d", 42, 42),
-        STRING(MemoryAddress.class, asVarArg(C_POINTER), "%s", makeNativeString("str").baseAddress(), "str"),
+        STRING(MemoryAddress.class, asVarArg(C_POINTER), "%s", toCString("str").baseAddress(), "str"),
         CHAR(char.class, asVarArg(C_CHAR), "%c", 'h', 'h'),
         DOUBLE(double.class, asVarArg(C_DOUBLE), "%.4f", 1.2345d, 1.2345d);
 
         final Class<?> carrier;
         final MemoryLayout layout;
@@ -449,12 +449,12 @@
                                 perms.stream());
                     }).collect(Collectors.toCollection(LinkedHashSet::new));
         }
     }
 
-    static MemorySegment makeNativeString(String value) {
-        return ForeignUnsafe.makeNativeString(value);
+    static MemorySegment toCString(String value) {
+        return ForeignUnsafe.toCString(value);
     }
 
     static String toJavaString(MemoryAddress address) {
         return ForeignUnsafe.toJavaString(address);
     }
