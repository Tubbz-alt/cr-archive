diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java
@@ -25,10 +25,11 @@
  */
 
 package jdk.incubator.foreign.unsafe;
 
 import java.lang.invoke.VarHandle;
+import java.nio.charset.Charset;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.internal.foreign.MemoryAddressImpl;
 import jdk.internal.foreign.Utils;
@@ -93,28 +94,38 @@
     /**
      * Returns a new native memory segment holding contents of the given Java String
      * @param str the Java String
      * @return a new native memory segment
      */
-    public static MemorySegment makeNativeString(String str) {
-        return makeNativeString(str, str.length() + 1);
+    public static MemorySegment toCString(String str) {
+        return toCString(str.getBytes());
     }
 
-    private static MemorySegment makeNativeString(String str, int length) {
-        MemoryLayout strLayout = MemoryLayout.ofSequence(length, C_CHAR);
+    /**
+     * Returns a new native memory segment holding contents of the given Java String
+     * @param str The Java String
+     * @param charset The Charset to be used to encode the String
+     * @return a new native memory segment
+     */
+    public static MemorySegment toCString(String str, Charset charset) {
+        return toCString(str.getBytes(charset));
+    }
+
+    private static MemorySegment toCString(byte[] bytes) {
+        MemoryLayout strLayout = MemoryLayout.ofSequence(bytes.length + 1, C_CHAR);
         MemorySegment segment = MemorySegment.allocateNative(strLayout);
         MemoryAddress addr = segment.baseAddress();
-        for (int i = 0 ; i < str.length() ; i++) {
-            byteArrHandle.set(addr, i, (byte)str.charAt(i));
+        for (int i = 0 ; i < bytes.length; i++) {
+            byteArrHandle.set(addr, i, bytes[i]);
         }
-        byteArrHandle.set(addr, (long)str.length(), (byte)0);
+        byteArrHandle.set(addr, (long)bytes.length, (byte)0);
         return segment;
     }
 
     /**
      * Returns a Java String from the contents of the given C '\0' terminated string
-     * @param addr the address of the C string
+     * @param addr The address of the C string
      * @return a Java String
      */
     public static String toJavaString(MemoryAddress addr) {
         StringBuilder buf = new StringBuilder();
         try (MemorySegment seg = ofNativeUnchecked(addr, Long.MAX_VALUE)) {
diff a/test/jdk/java/foreign/StdLibTest.java b/test/jdk/java/foreign/StdLibTest.java
--- a/test/jdk/java/foreign/StdLibTest.java
+++ b/test/jdk/java/foreign/StdLibTest.java
@@ -223,35 +223,35 @@
             }
         }
 
         String strcat(String s1, String s2) throws Throwable {
             try (MemorySegment buf = MemorySegment.allocateNative(s1.length() + s2.length() + 1) ;
-                 MemorySegment other = makeNativeString(s2)) {
+                 MemorySegment other = toCString(s2)) {
                 char[] chars = s1.toCharArray();
                 for (long i = 0 ; i < chars.length ; i++) {
                     byteArrHandle.set(buf.baseAddress(), i, (byte)chars[(int)i]);
                 }
                 byteArrHandle.set(buf.baseAddress(), (long)chars.length, (byte)'\0');
                 return toJavaString(((MemoryAddress)strcat.invokeExact(buf.baseAddress(), other.baseAddress())).rebase(buf));
             }
         }
 
         int strcmp(String s1, String s2) throws Throwable {
-            try (MemorySegment ns1 = makeNativeString(s1) ;
-                 MemorySegment ns2 = makeNativeString(s2)) {
+            try (MemorySegment ns1 = toCString(s1) ;
+                 MemorySegment ns2 = toCString(s2)) {
                 return (int)strcmp.invokeExact(ns1.baseAddress(), ns2.baseAddress());
             }
         }
 
         int puts(String msg) throws Throwable {
-            try (MemorySegment s = makeNativeString(msg)) {
+            try (MemorySegment s = toCString(msg)) {
                 return (int)puts.invokeExact(s.baseAddress());
             }
         }
 
         int strlen(String msg) throws Throwable {
-            try (MemorySegment s = makeNativeString(msg)) {
+            try (MemorySegment s = toCString(msg)) {
                 return (int)strlen.invokeExact(s.baseAddress());
             }
         }
 
         Tm gmtime(long arg) throws Throwable {
@@ -335,11 +335,11 @@
         int rand() throws Throwable {
             return (int)rand.invokeExact();
         }
 
         int printf(String format, List<PrintfArg> args) throws Throwable {
-            try (MemorySegment formatStr = makeNativeString(format)) {
+            try (MemorySegment formatStr = toCString(format)) {
                 return (int)specializedPrintf(args).invokeExact(formatStr.baseAddress(),
                         args.stream().map(a -> a.nativeValue).toArray());
             }
         }
 
@@ -410,11 +410,11 @@
                 .toArray(Object[][]::new);
     }
 
     enum PrintfArg {
         INTEGRAL(int.class, asVarArg(C_INT), "%d", 42, 42),
-        STRING(MemoryAddress.class, asVarArg(C_POINTER), "%s", makeNativeString("str").baseAddress(), "str"),
+        STRING(MemoryAddress.class, asVarArg(C_POINTER), "%s", toCString("str").baseAddress(), "str"),
         CHAR(char.class, asVarArg(C_CHAR), "%c", 'h', 'h'),
         DOUBLE(double.class, asVarArg(C_DOUBLE), "%.4f", 1.2345d, 1.2345d);
 
         final Class<?> carrier;
         final MemoryLayout layout;
@@ -449,12 +449,12 @@
                                 perms.stream());
                     }).collect(Collectors.toCollection(LinkedHashSet::new));
         }
     }
 
-    static MemorySegment makeNativeString(String value) {
-        return ForeignUnsafe.makeNativeString(value);
+    static MemorySegment toCString(String value) {
+        return ForeignUnsafe.toCString(value);
     }
 
     static String toJavaString(MemoryAddress address) {
         return ForeignUnsafe.toJavaString(address);
     }
diff a/test/jdk/java/foreign/Test8241148.java b/test/jdk/java/foreign/Test8241148.java
--- a/test/jdk/java/foreign/Test8241148.java
+++ b/test/jdk/java/foreign/Test8241148.java
@@ -67,19 +67,20 @@
         }
     }
 
     @Test
     public void test() throws Throwable {
-        try (var seg = ForeignUnsafe.makeNativeString("java")) {
+        try (var seg = ForeignUnsafe.toCString("java")) {
             assertEquals((int) strlen.invoke(seg.baseAddress()), 4);
         }
-        try (var pathSeg = ForeignUnsafe.makeNativeString("PATH")) {
+        try (var pathSeg = ForeignUnsafe.toCString("PATH")) {
             var path = (MemoryAddress) getenv.invoke(pathSeg.baseAddress());
             if (!path.equals(NULL)) {
                 int len = (int) strlen.invoke(path);
                 var pathStr = ForeignUnsafe.toJavaString(path);
                 assertEquals(pathStr.length(), len);
                 System.out.println("PATH = " + pathStr);
+                assertEquals(pathStr, System.getenv("PATH"));
             }
         }
     }
 }
