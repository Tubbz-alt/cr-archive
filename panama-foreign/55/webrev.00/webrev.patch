diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java
@@ -24,15 +24,17 @@
  *
  */
 
 package jdk.incubator.foreign.unsafe;
 
+import java.lang.invoke.VarHandle;
 import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.internal.foreign.MemoryAddressImpl;
-import jdk.internal.foreign.MemorySegmentImpl;
 import jdk.internal.foreign.Utils;
+import static jdk.incubator.foreign.MemoryLayouts.C_CHAR;
 
 /**
  * Unsafe methods to allow interop between sun.misc.unsafe and memory access API.
  */
 public final class ForeignUnsafe {
@@ -79,6 +81,51 @@
      * @throws IllegalArgumentException if {@code base} does not encapsulate a native memory address.
      */
     public static MemorySegment ofNativeUnchecked(MemoryAddress base, long byteSize) {
         return Utils.makeNativeSegmentUnchecked(base, byteSize);
     }
+
+    private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
+        return MemoryLayout.ofSequence(1, elemLayout)
+                .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
+    }
+    private final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);
+
+    /**
+     * Returns a new native memory segment holding contents of the given Java String
+     * @param str the Java String
+     * @return a new native memory segment
+     */
+    public static MemorySegment makeNativeString(String str) {
+        return makeNativeString(str, str.length() + 1);
+    }
+
+    private static MemorySegment makeNativeString(String str, int length) {
+        MemoryLayout strLayout = MemoryLayout.ofSequence(length, C_CHAR);
+        MemorySegment segment = MemorySegment.allocateNative(strLayout);
+        MemoryAddress addr = segment.baseAddress();
+        for (int i = 0 ; i < str.length() ; i++) {
+            byteArrHandle.set(addr, i, (byte)str.charAt(i));
+        }
+        byteArrHandle.set(addr, (long)str.length(), (byte)0);
+        return segment;
+    }
+
+    /**
+     * Returns a Java String from the contents of the given C '\0' terminated string
+     * @param addr the address of the C string
+     * @return a Java String
+     */
+    public static String toJavaString(MemoryAddress addr) {
+        StringBuilder buf = new StringBuilder();
+        try (MemorySegment seg = ofNativeUnchecked(addr, Long.MAX_VALUE)) {
+            MemoryAddress baseAddr = seg.baseAddress();
+            byte curr = (byte) byteArrHandle.get(baseAddr, 0);
+            long offset = 0;
+            while (curr != 0) {
+                buf.append((char) curr);
+                curr = (byte) byteArrHandle.get(baseAddr, ++offset);
+            }
+        }
+        return buf.toString();
+    }
 }
diff a/test/jdk/java/foreign/StdLibTest.java b/test/jdk/java/foreign/StdLibTest.java
--- a/test/jdk/java/foreign/StdLibTest.java
+++ b/test/jdk/java/foreign/StdLibTest.java
@@ -450,30 +450,12 @@
                     }).collect(Collectors.toCollection(LinkedHashSet::new));
         }
     }
 
     static MemorySegment makeNativeString(String value) {
-        return makeNativeString(value, value.length() + 1);
-    }
-
-    static MemorySegment makeNativeString(String value, int length) {
-        MemoryLayout strLayout = MemoryLayout.ofSequence(length, C_CHAR);
-        MemorySegment segment = MemorySegment.allocateNative(strLayout);
-        MemoryAddress addr = segment.baseAddress();
-        for (int i = 0 ; i < value.length() ; i++) {
-            byteArrHandle.set(addr, i, (byte)value.charAt(i));
-        }
-        byteArrHandle.set(addr, (long)value.length(), (byte)0);
-        return segment;
+        return ForeignUnsafe.makeNativeString(value);
     }
 
     static String toJavaString(MemoryAddress address) {
-        StringBuilder buf = new StringBuilder();
-        byte curr = (byte)byteArrHandle.get(address, 0);
-        long offset = 0;
-        while (curr != 0) {
-            buf.append((char)curr);
-            curr = (byte)byteArrHandle.get(address, ++offset);
-        }
-        return buf.toString();
+        return ForeignUnsafe.toJavaString(address);
     }
 }
diff a/test/jdk/java/foreign/Test8241148.java b/test/jdk/java/foreign/Test8241148.java
--- /dev/null
+++ b/test/jdk/java/foreign/Test8241148.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodType;
+import jdk.incubator.foreign.FunctionDescriptor;
+import jdk.incubator.foreign.LibraryLookup;
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.SystemABI;
+import jdk.incubator.foreign.unsafe.ForeignUnsafe;
+
+import org.testng.annotations.*;
+import static jdk.incubator.foreign.MemoryAddress.NULL;
+import static jdk.incubator.foreign.MemoryLayouts.*;
+import static org.testng.Assert.*;
+
+/*
+ * @test
+ * @bug 8241148
+ * @summary need a way to create MemorySegment with contents from java String and a way to read a C char* as java String
+ * @modules jdk.incubator.foreign/jdk.incubator.foreign.unsafe
+ *          jdk.incubator.foreign/jdk.internal.foreign
+ *          jdk.incubator.foreign/jdk.internal.foreign.abi
+ * @run testng Test8241148
+ */
+@Test
+public class Test8241148 {
+    private final static MethodHandle getenv;
+    private final static MethodHandle strlen;
+
+    static {
+        try {
+            SystemABI abi = SystemABI.getInstance();
+            LibraryLookup lookup = LibraryLookup.ofDefault();
+
+            getenv = abi.downcallHandle(lookup.lookup("getenv"),
+                    MethodType.methodType(MemoryAddress.class, MemoryAddress.class),
+                    FunctionDescriptor.of(C_POINTER, C_POINTER));
+
+            strlen = abi.downcallHandle(lookup.lookup("strlen"),
+                    MethodType.methodType(int.class, MemoryAddress.class),
+                    FunctionDescriptor.of(C_INT, C_POINTER));
+        } catch (Throwable ex) {
+            throw new IllegalStateException(ex);
+        }
+    }
+
+    @Test
+    public void test() throws Throwable {
+        try (var seg = ForeignUnsafe.makeNativeString("java")) {
+            assertEquals((int) strlen.invoke(seg.baseAddress()), 4);
+        }
+        try (var pathSeg = ForeignUnsafe.makeNativeString("PATH")) {
+            var path = (MemoryAddress) getenv.invoke(pathSeg.baseAddress());
+            if (!path.equals(NULL)) {
+                int len = (int) strlen.invoke(path);
+                var pathStr = ForeignUnsafe.toJavaString(path);
+                assertEquals(pathStr.length(), len);
+                System.out.println("PATH = " + pathStr);
+            }
+        }
+    }
+}
