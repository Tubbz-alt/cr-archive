diff a/src/java.base/share/classes/java/lang/invoke/MethodHandleImpl.java b/src/java.base/share/classes/java/lang/invoke/MethodHandleImpl.java
--- a/src/java.base/share/classes/java/lang/invoke/MethodHandleImpl.java
+++ b/src/java.base/share/classes/java/lang/invoke/MethodHandleImpl.java
@@ -1826,10 +1826,40 @@
             @Override
             public boolean isMemoryAccessVarHandle(VarHandle handle) {
                 return asMemoryAccessVarHandle(handle) != null;
             }
 
+            @Override
+            public VarHandle filterValue(VarHandle target, MethodHandle filterToTarget, MethodHandle filterFromTarget) {
+                return VarHandles.filterValue(target, filterToTarget, filterFromTarget);
+            }
+
+            @Override
+            public VarHandle filterCoordinates(VarHandle target, int pos, MethodHandle... filters) {
+                return VarHandles.filterCoordinates(target, pos, filters);
+            }
+
+            @Override
+            public VarHandle dropCoordinates(VarHandle target, int pos, Class<?>... valueTypes) {
+                return VarHandles.dropCoordinates(target, pos, valueTypes);
+            }
+
+            @Override
+            public VarHandle permuteCoordinates(VarHandle target, List<Class<?>> newCoordinates, int... reorder) {
+                return VarHandles.permuteCoordinates(target, newCoordinates, reorder);
+            }
+
+            @Override
+            public VarHandle collectCoordinates(VarHandle target, int pos, MethodHandle filter) {
+                return VarHandles.collectCoordinates(target, pos, filter);
+            }
+
+            @Override
+            public VarHandle insertCoordinates(VarHandle target, int pos, Object... values) {
+                return VarHandles.insertCoordinates(target, pos, values);
+            }
+
             private MemoryAccessVarHandleBase asMemoryAccessVarHandle(VarHandle handle) {
                 if (handle instanceof MemoryAccessVarHandleBase) {
                     return (MemoryAccessVarHandleBase)handle;
                 } else if (handle.target() instanceof MemoryAccessVarHandleBase) {
                     // skip first adaptation, since we have to step over MemoryAddressProxy
diff a/src/java.base/share/classes/java/lang/invoke/MethodHandles.java b/src/java.base/share/classes/java/lang/invoke/MethodHandles.java
--- a/src/java.base/share/classes/java/lang/invoke/MethodHandles.java
+++ b/src/java.base/share/classes/java/lang/invoke/MethodHandles.java
@@ -4071,11 +4071,11 @@
             }
             return ~zeroPos;
         }
     }
 
-    private static boolean permuteArgumentChecks(int[] reorder, MethodType newType, MethodType oldType) {
+    static boolean permuteArgumentChecks(int[] reorder, MethodType newType, MethodType oldType) {
         if (newType.returnType() != oldType.returnType())
             throw newIllegalArgumentException("return types do not match",
                     oldType, newType);
         if (reorder.length == oldType.parameterCount()) {
             int limit = newType.parameterCount();
@@ -4936,414 +4936,10 @@
                 ? (rtype != void.class)
                 : (rtype != filterType.parameterType(0) || filterValues != 1))
             throw newIllegalArgumentException("target and filter types do not match", targetType, filterType);
     }
 
-    /**
-     * Adapts a target var handle by pre-processing incoming and outgoing values using a pair of unary filter functions.
-     * <p>
-     * When calling e.g. {@link VarHandle#set(Object...)} on the resulting var handle, the incoming value (of type {@code T}, where
-     * {@code T} is the parameter type of the first filter function) is processed using the first filter and then passed
-     * to the target var handle.
-     * Conversely, when calling e.g. {@link VarHandle#get(Object...)} on the resulting var handle, the return value obtained from
-     * the target var handle (of type {@code T}, where {@code T} is the parameter type of the second filter function)
-     * is processed using the second filter and returned to the caller. More advanced access mode types, such as
-     * {@link java.lang.invoke.VarHandle.AccessMode#COMPARE_AND_EXCHANGE} might apply both filters at the same time.
-     * <p>
-     * For the boxing and unboxing filters to be well formed, their types must be of the form {@code S -> T} and {@code T -> S},
-     * respectively, where {@code T} is the type of the target var handle. If this is the case, the resulting var handle will
-     * have type {@code S}.
-     * <p>
-     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
-     * atomic access guarantees as those featured by the target var handle.
-     *
-     * @param target the target var handle
-     * @param filterToTarget a filter to convert some type {@code S} into the type of {@code target}
-     * @param filterFromTarget a filter to convert the type of {@code target} to some type {@code S}
-     * @return an adapter var handle which accepts a new type, performing the provided boxing/unboxing conversions.
-     * @throws NullPointerException if either {@code target}, {@code filterToTarget} or {@code filterFromTarget} are {@code == null}.
-     * @throws IllegalArgumentException if {@code filterFromTarget} and {@code filterToTarget} are not well-formed, that is, they have types
-     * other than {@code S -> T} and {@code T -> S}, respectively, where {@code T} is the type of the target var handle,
-     * or if either {@code filterFromTarget} or {@code filterToTarget} throws any checked exceptions.
-     */
-    public static VarHandle filterValue(VarHandle target, MethodHandle filterToTarget, MethodHandle filterFromTarget) {
-        Objects.nonNull(target);
-        Objects.nonNull(filterToTarget);
-        Objects.nonNull(filterFromTarget);
-        //check that from/to filters do not throw checked exceptions
-        noCheckedExceptions(filterToTarget);
-        noCheckedExceptions(filterFromTarget);
-
-        //check that from/to filters have right signatures
-        if (filterFromTarget.type().parameterCount() != 1) {
-            throw newIllegalArgumentException("filterFromTarget filter type has wrong arity", filterFromTarget.type());
-        } else if (filterToTarget.type().parameterCount() != 1) {
-            throw newIllegalArgumentException("filterToTarget filter type has wrong arity", filterFromTarget.type());
-        } else if (filterFromTarget.type().parameterType(0) != filterToTarget.type().returnType() ||
-                filterToTarget.type().parameterType(0) != filterFromTarget.type().returnType()) {
-            throw newIllegalArgumentException("filterFromTarget and filterToTarget filter types do not match", filterFromTarget.type(), filterToTarget.type());
-        } else if (target.varType() != filterFromTarget.type().parameterType(0)) {
-            throw newIllegalArgumentException("filterFromTarget filter type does not match target var handle type", filterFromTarget.type(), target.varType());
-        } else if (target.varType() != filterToTarget.type().returnType()) {
-            throw newIllegalArgumentException("filterFromTarget filter type does not match target var handle type", filterToTarget.type(), target.varType());
-        }
-
-        return new IndirectVarHandle(target, filterFromTarget.type().returnType(), target.coordinateTypes().toArray(new Class<?>[0]),
-                (mode, modeHandle) -> {
-                    int lastParameterPos = modeHandle.type().parameterCount() - 1;
-                    return switch (mode.at) {
-                        case GET -> MethodHandles.filterReturnValue(modeHandle, filterFromTarget);
-                        case SET -> MethodHandles.filterArgument(modeHandle, lastParameterPos, filterToTarget);
-                        case GET_AND_UPDATE -> {
-                            MethodHandle adapter = MethodHandles.filterReturnValue(modeHandle, filterFromTarget);
-                            yield MethodHandles.filterArgument(adapter, lastParameterPos, filterToTarget);
-                        }
-                        case COMPARE_AND_EXCHANGE -> {
-                            MethodHandle adapter = MethodHandles.filterReturnValue(modeHandle, filterFromTarget);
-                            adapter = MethodHandles.filterArgument(adapter, lastParameterPos, filterToTarget);
-                            yield MethodHandles.filterArgument(adapter, lastParameterPos - 1, filterToTarget);
-                        }
-                        case COMPARE_AND_SET -> {
-                            MethodHandle adapter = MethodHandles.filterArgument(modeHandle, lastParameterPos, filterToTarget);
-                            yield MethodHandles.filterArgument(adapter, lastParameterPos - 1, filterToTarget);
-                        }
-                    };
-                });
-    }
-
-    /**
-     * Adapts a target var handle by pre-processing incoming coordinate values using unary filter functions.
-     * <p>
-     * When calling e.g. {@link VarHandle#get(Object...)} on the resulting var handle, the incoming coordinate values
-     * starting at position {@code pos} (of type {@code C1, C2 ... Cn}, where {@code C1, C2 ... Cn} are the return type
-     * of the unary filter functions) are transformed into new values (of type {@code S1, S2 ... Sn}, where {@code S1, S2 ... Sn} are the
-     * parameter types of the unary filter functions), and then passed (along with any coordinate that was left unaltered
-     * by the adaptation) to the target var handle.
-     * <p>
-     * For the coordinate filters to be well formed, their types must be of the form {@code S1 -> T1, S2 -> T1 ... Sn -> Tn},
-     * where {@code T1, T2 ... Tn} are the coordinate types starting at position {@code pos} of the target var handle.
-     * <p>
-     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
-     * atomic access guarantees as those featured by the target var handle.
-     *
-     * @param target the target var handle
-     * @param pos the position of the first coordinate to be transformed
-     * @param filters the unary functions which are used to transform coordinates starting at position {@code pos}
-     * @return an adapter var handle which accepts new coordinate types, applying the provided transformation
-     * to the new coordinate values.
-     * @throws NullPointerException if either {@code target}, {@code filters} are {@code == null}.
-     * @throws IllegalArgumentException if the handles in {@code filters} are not well-formed, that is, they have types
-     * other than {@code S1 -> T1, S2 -> T2, ... Sn -> Tn} where {@code T1, T2 ... Tn} are the coordinate types starting
-     * at position {@code pos} of the target var handle, if {@code pos} is not between 0 and the target var handle coordinate arity, inclusive,
-     * or if more filters are provided than the actual number of coordinate types, or if any of the filters throws any
-     * checked exceptions.
-     * available starting at {@code pos}.
-     */
-    public static VarHandle filterCoordinates(VarHandle target, int pos, MethodHandle... filters) {
-        Objects.nonNull(target);
-        Objects.nonNull(filters);
-
-        List<Class<?>> targetCoordinates = target.coordinateTypes();
-        if (pos < 0 || pos >= targetCoordinates.size()) {
-            throw newIllegalArgumentException("Invalid position " + pos + " for coordinate types", targetCoordinates);
-        } else if (pos + filters.length > targetCoordinates.size()) {
-            throw new IllegalArgumentException("Too many filters");
-        }
-
-        if (filters.length == 0) return target;
-
-        List<Class<?>> newCoordinates = new ArrayList<>(targetCoordinates);
-        for (int i = 0 ; i < filters.length ; i++) {
-            noCheckedExceptions(filters[i]);
-            MethodType filterType = filters[i].type();
-            if (filterType.parameterCount() != 1) {
-                throw newIllegalArgumentException("Invalid filter type " + filterType);
-            } else if (newCoordinates.get(pos + i) != filterType.returnType()) {
-                throw newIllegalArgumentException("Invalid filter type " + filterType + " for coordinate type " + newCoordinates.get(i));
-            }
-            newCoordinates.set(pos + i, filters[i].type().parameterType(0));
-        }
-
-        return new IndirectVarHandle(target, target.varType(), newCoordinates.toArray(new Class<?>[0]),
-                (mode, modeHandle) -> MethodHandles.filterArguments(modeHandle, 1 + pos, filters));
-    }
-
-    /**
-     * Provides a target var handle with one or more <em>bound coordinates</em>
-     * in advance of the var handle's invocation. As a consequence, the resulting var handle will feature less
-     * coordinate types than the target var handle.
-     * <p>
-     * When calling e.g. {@link VarHandle#get(Object...)} on the resulting var handle, incoming coordinate values
-     * are joined with bound coordinate values, and then passed to the target var handle.
-     * <p>
-     * For the bound coordinates to be well formed, their types must be {@code T1, T2 ... Tn },
-     * where {@code T1, T2 ... Tn} are the coordinate types starting at position {@code pos} of the target var handle.
-     * <p>
-     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
-     * atomic access guarantees as those featured by the target var handle.
-     *
-     * @param target the var handle to invoke after the bound coordinates are inserted
-     * @param pos the position of the first coordinate to be inserted
-     * @param values the series of bound coordinates to insert
-     * @return an adapter var handle which inserts an additional coordinates,
-     *         before calling the target var handle
-     * @throws NullPointerException if either {@code target}, {@code values} are {@code == null}.
-     * @throws IllegalArgumentException if {@code pos} is not between 0 and the target var handle coordinate arity, inclusive,
-     * or if more values are provided than the actual number of coordinate types available starting at {@code pos}.
-     * @throws ClassCastException if the bound coordinates in {@code values} are not well-formed, that is, they have types
-     * other than {@code T1, T2 ... Tn }, where {@code T1, T2 ... Tn} are the coordinate types starting at position {@code pos}
-     * of the target var handle.
-     */
-    public static VarHandle insertCoordinates(VarHandle target, int pos, Object... values) {
-        Objects.nonNull(target);
-        Objects.nonNull(values);
-
-        List<Class<?>> targetCoordinates = target.coordinateTypes();
-        if (pos < 0 || pos >= targetCoordinates.size()) {
-            throw newIllegalArgumentException("Invalid position " + pos + " for coordinate types", targetCoordinates);
-        } else if (pos + values.length > targetCoordinates.size()) {
-            throw new IllegalArgumentException("Too many values");
-        }
-
-        if (values.length == 0) return target;
-
-        List<Class<?>> newCoordinates = new ArrayList<>(targetCoordinates);
-        for (int i = 0 ; i < values.length ; i++) {
-            Class<?> pt = newCoordinates.get(pos);
-            if (pt.isPrimitive()) {
-                Wrapper w = Wrapper.forPrimitiveType(pt);
-                w.convert(values[i], pt);
-            } else {
-                pt.cast(values[i]);
-            }
-            newCoordinates.remove(pos);
-        }
-
-        return new IndirectVarHandle(target, target.varType(), newCoordinates.toArray(new Class<?>[0]),
-                (mode, modeHandle) -> MethodHandles.insertArguments(modeHandle, 1 + pos, values));
-    }
-
-    /**
-     * Provides a var handle which adapts the coordinate values of the target var handle, by re-arranging them
-     * so that the new coordinates match the provided ones.
-     * <p>
-     * The given array controls the reordering.
-     * Call {@code #I} the number of incoming coordinates (the value
-     * {@code newCoordinates.size()}, and call {@code #O} the number
-     * of outgoing coordinates (the number of coordinates associated with the target var handle).
-     * Then the length of the reordering array must be {@code #O},
-     * and each element must be a non-negative number less than {@code #I}.
-     * For every {@code N} less than {@code #O}, the {@code N}-th
-     * outgoing coordinate will be taken from the {@code I}-th incoming
-     * coordinate, where {@code I} is {@code reorder[N]}.
-     * <p>
-     * No coordinate value conversions are applied.
-     * The type of each incoming coordinate, as determined by {@code newCoordinates},
-     * must be identical to the type of the corresponding outgoing coordinate
-     * in the target var handle.
-     * <p>
-     * The reordering array need not specify an actual permutation.
-     * An incoming coordinate will be duplicated if its index appears
-     * more than once in the array, and an incoming coordinate will be dropped
-     * if its index does not appear in the array.
-     * <p>
-     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
-     * atomic access guarantees as those featured by the target var handle.
-     * @param target the var handle to invoke after the coordinates have been reordered
-     * @param newCoordinates the new coordinate types
-     * @param reorder an index array which controls the reordering
-     * @return an adapter var handle which re-arranges the incoming coordinate values,
-     * before calling the target var handle
-     * @throws NullPointerException if either {@code target}, {@code newCoordinates} or {@code reorder} are {@code == null}.
-     * @throws IllegalArgumentException if the index array length is not equal to
-     * the number of coordinates of the target var handle, or if any index array element is not a valid index for
-     * a coordinate of {@code newCoordinates}, or if two corresponding coordinate types in
-     * the target var handle and in {@code newCoordinates} are not identical.
-     */
-    public static VarHandle permuteCoordinates(VarHandle target, List<Class<?>> newCoordinates, int... reorder) {
-        Objects.nonNull(target);
-        Objects.nonNull(newCoordinates);
-        Objects.nonNull(reorder);
-
-        List<Class<?>> targetCoordinates = target.coordinateTypes();
-        permuteArgumentChecks(reorder,
-                MethodType.methodType(void.class, newCoordinates),
-                MethodType.methodType(void.class, targetCoordinates));
-
-        return new IndirectVarHandle(target, target.varType(), newCoordinates.toArray(new Class<?>[0]),
-                (mode, modeHandle) ->
-                    MethodHandles.permuteArguments(modeHandle,
-                        methodTypeFor(mode.at, modeHandle.type(), targetCoordinates, newCoordinates),
-                        reorderArrayFor(mode.at, newCoordinates, reorder)));
-    }
-
-    private static int numTrailingArgs(VarHandle.AccessType at) {
-        return switch (at) {
-            case GET -> 0;
-            case GET_AND_UPDATE, SET -> 1;
-            case COMPARE_AND_SET, COMPARE_AND_EXCHANGE -> 2;
-        };
-    }
-
-    private static int[] reorderArrayFor(VarHandle.AccessType at, List<Class<?>> newCoordinates, int[] reorder) {
-        int numTrailingArgs = numTrailingArgs(at);
-        int[] adjustedReorder = new int[reorder.length + 1 + numTrailingArgs];
-        adjustedReorder[0] = 0;
-        for (int i = 0 ; i < reorder.length ; i++) {
-            adjustedReorder[i + 1] = reorder[i] + 1;
-        }
-        for (int i = 0 ; i < numTrailingArgs ; i++) {
-            adjustedReorder[i + reorder.length + 1] = i + newCoordinates.size() + 1;
-        }
-        return adjustedReorder;
-    }
-
-    private static MethodType methodTypeFor(VarHandle.AccessType at, MethodType oldType, List<Class<?>> oldCoordinates, List<Class<?>> newCoordinates) {
-        int numTrailingArgs = numTrailingArgs(at);
-        MethodType adjustedType = MethodType.methodType(oldType.returnType(), oldType.parameterType(0));
-        adjustedType = adjustedType.appendParameterTypes(newCoordinates);
-        for (int i = 0 ; i < numTrailingArgs ; i++) {
-            adjustedType = adjustedType.appendParameterTypes(oldType.parameterType(1 + oldCoordinates.size() + i));
-        }
-        return adjustedType;
-    }
-
-    /**
-     * Adapts a target var handle handle by pre-processing
-     * a sub-sequence of its coordinate values with a filter (a method handle).
-     * The pre-processed coordinates are replaced by the result (if any) of the
-     * filter function and the target var handle is then called on the modified (usually shortened)
-     * coordinate list.
-     * <p>
-     * If {code R} is the return type of the filter (which cannot be void), the target var handle must accept a value of
-     * type {@code R} as its coordinate in position {@code pos}, preceded and/or followed by
-     * any coordinate not passed to the filter.
-     * No coordinates are reordered, and the result returned from the filter
-     * replaces (in order) the whole subsequence of coordinates originally
-     * passed to the adapter.
-     * <p>
-     * The argument types (if any) of the filter
-     * replace zero or one coordinate types of the target var handle, at position {@code pos},
-     * in the resulting adapted var handle.
-     * The return type of the filter must be identical to the
-     * coordinate type of the target var handle at position {@code pos}, and that target var handle
-     * coordinate is supplied by the return value of the filter.
-     * <p>
-     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
-     * atomic access guarantees as those featured by the target var handle.
-     *
-     * @param target the var handle to invoke after the coordinates have been filtered
-     * @param pos the position of the coordinate to be filtered
-     * @param filter the filter method handle
-     * @return an adapter var handle which filters the incoming coordinate values,
-     * before calling the target var handle
-     * @throws NullPointerException if either {@code target}, {@code filter} are {@code == null}.
-     * @throws IllegalArgumentException if the return type of {@code filter}
-     * is void, or it is not the same as the {@code pos} coordinate of the target var handle,
-     * if {@code pos} is not between 0 and the target var handle coordinate arity, inclusive,
-     * if the resulting var handle's type would have <a href="MethodHandle.html#maxarity">too many coordinates</a>,
-     * or if {@code filter} throws any checked exceptions.
-     */
-    public static VarHandle collectCoordinates(VarHandle target, int pos, MethodHandle filter) {
-        Objects.nonNull(target);
-        Objects.nonNull(filter);
-        noCheckedExceptions(filter);
-
-        List<Class<?>> targetCoordinates = target.coordinateTypes();
-        if (pos < 0 || pos >= targetCoordinates.size()) {
-            throw newIllegalArgumentException("Invalid position " + pos + " for coordinate types", targetCoordinates);
-        } else if (filter.type().returnType() == void.class) {
-            throw newIllegalArgumentException("Invalid filter type " + filter.type() + " ; filter cannot be void");
-        } else if (filter.type().returnType() != targetCoordinates.get(pos)) {
-            throw newIllegalArgumentException("Invalid filter type " + filter.type() + " for coordinate type " + targetCoordinates.get(pos));
-        }
-
-        List<Class<?>> newCoordinates = new ArrayList<>(targetCoordinates);
-        newCoordinates.remove(pos);
-        newCoordinates.addAll(pos, filter.type().parameterList());
-
-        return new IndirectVarHandle(target, target.varType(), newCoordinates.toArray(new Class<?>[0]),
-                (mode, modeHandle) -> MethodHandles.collectArguments(modeHandle, 1 + pos, filter));
-    }
-
-    /**
-     * Returns a var handle which will discard some dummy coordinates before delegating to the
-     * target var handle. As a consequence, the resulting var handle will feature more
-     * coordinate types than the target var handle.
-     * <p>
-     * The {@code pos} argument may range between zero and <i>N</i>, where <i>N</i> is the arity of the
-     * target var handle's coordinate types. If {@code pos} is zero, the dummy coordinates will precede
-     * the target's real arguments; if {@code pos} is <i>N</i> they will come after.
-     * <p>
-     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
-     * atomic access guarantees as those featured by the target var handle.
-     *
-     * @param target the var handle to invoke after the dummy coordinates are dropped
-     * @param pos position of first coordinate to drop (zero for the leftmost)
-     * @param valueTypes the type(s) of the coordinate(s) to drop
-     * @return an adapter var handle which drops some dummy coordinates,
-     *         before calling the target var handle
-     * @throws NullPointerException if either {@code target}, {@code valueTypes} are {@code == null}.
-     * @throws IllegalArgumentException if {@code pos} is not between 0 and the target var handle coordinate arity, inclusive.
-     */
-    public static VarHandle dropCoordinates(VarHandle target, int pos, Class<?>... valueTypes) {
-        Objects.nonNull(target);
-        Objects.nonNull(valueTypes);
-
-        List<Class<?>> targetCoordinates = target.coordinateTypes();
-        if (pos < 0 || pos > targetCoordinates.size()) {
-            throw newIllegalArgumentException("Invalid position " + pos + " for coordinate types", targetCoordinates);
-        }
-
-        if (valueTypes.length == 0) return target;
-
-        List<Class<?>> newCoordinates = new ArrayList<>(targetCoordinates);
-        newCoordinates.addAll(pos, List.of(valueTypes));
-
-        return new IndirectVarHandle(target, target.varType(), newCoordinates.toArray(new Class<?>[0]),
-                (mode, modeHandle) -> MethodHandles.dropArguments(modeHandle, 1 + pos, valueTypes));
-    }
-
-    private static void noCheckedExceptions(MethodHandle handle) {
-        if (handle instanceof DirectMethodHandle) {
-            DirectMethodHandle directHandle = (DirectMethodHandle)handle;
-            MethodHandleInfo info = Lookup.IMPL_LOOKUP.revealDirect(directHandle);
-            Class<?>[] exceptionTypes = switch (info.getReferenceKind()) {
-                case MethodHandleInfo.REF_invokeInterface, MethodHandleInfo.REF_invokeSpecial,
-                     MethodHandleInfo.REF_invokeStatic, MethodHandleInfo.REF_invokeVirtual ->
-                        info.reflectAs(Method.class, Lookup.IMPL_LOOKUP).getExceptionTypes();
-                case MethodHandleInfo.REF_newInvokeSpecial ->
-                        info.reflectAs(Constructor.class, Lookup.IMPL_LOOKUP).getExceptionTypes();
-                case MethodHandleInfo.REF_getField, MethodHandleInfo.REF_getStatic,
-                     MethodHandleInfo.REF_putField, MethodHandleInfo.REF_putStatic -> null;
-                default -> throw new AssertionError("Cannot get here");
-            };
-            if (exceptionTypes != null) {
-                if (Stream.of(exceptionTypes).anyMatch(MethodHandles::isCheckedException)) {
-                    throw newIllegalArgumentException("Cannot adapt a var handle with a method handle which throws checked exceptions");
-                }
-            }
-        } else if (handle instanceof DelegatingMethodHandle) {
-            noCheckedExceptions(((DelegatingMethodHandle)handle).getTarget());
-        } else {
-            //bound
-            BoundMethodHandle boundHandle = (BoundMethodHandle)handle;
-            for (int i = 0 ; i < boundHandle.fieldCount() ; i++) {
-                Object arg = boundHandle.arg(i);
-                if (arg instanceof MethodHandle){
-                    noCheckedExceptions((MethodHandle) arg);
-                }
-            }
-        }
-    }
-
-    private static boolean isCheckedException(Class<?> clazz) {
-        return Throwable.class.isAssignableFrom(clazz) &&
-                !RuntimeException.class.isAssignableFrom(clazz) &&
-                !Error.class.isAssignableFrom(clazz);
-    }
-
     /**
      * Adapts a target method handle by pre-processing
      * some of its arguments, and then calling the target with
      * the result of the pre-processing, inserted into the original
      * sequence of arguments.
diff a/src/java.base/share/classes/java/lang/invoke/VarHandles.java b/src/java.base/share/classes/java/lang/invoke/VarHandles.java
--- a/src/java.base/share/classes/java/lang/invoke/VarHandles.java
+++ b/src/java.base/share/classes/java/lang/invoke/VarHandles.java
@@ -25,19 +25,26 @@
 
 package java.lang.invoke;
 
 import sun.invoke.util.Wrapper;
 
+import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
+import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.nio.ByteOrder;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
+import java.util.stream.Stream;
 
 import static java.lang.invoke.MethodHandleStatics.UNSAFE;
 import static java.lang.invoke.MethodHandleStatics.VAR_HANDLE_IDENTITY_ADAPT;
+import static java.lang.invoke.MethodHandleStatics.newIllegalArgumentException;
 
 final class VarHandles {
 
     static ClassValue<ConcurrentMap<Integer, MethodHandle>> ADDRESS_FACTORIES = new ClassValue<>() {
         @Override
@@ -330,19 +337,249 @@
         }
     }
 
     private static VarHandle maybeAdapt(VarHandle target) {
         if (!VAR_HANDLE_IDENTITY_ADAPT) return target;
-        target = MethodHandles.filterValue(target,
+        target = filterValue(target,
                         MethodHandles.identity(target.varType()), MethodHandles.identity(target.varType()));
         MethodType mtype = target.accessModeType(VarHandle.AccessMode.GET).dropParameterTypes(0, 1);
         for (int i = 0 ; i < mtype.parameterCount() ; i++) {
-            target = MethodHandles.filterCoordinates(target, i, MethodHandles.identity(mtype.parameterType(i)));
+            target = filterCoordinates(target, i, MethodHandles.identity(mtype.parameterType(i)));
         }
         return target;
     }
 
+    public static VarHandle filterValue(VarHandle target, MethodHandle filterToTarget, MethodHandle filterFromTarget) {
+        Objects.nonNull(target);
+        Objects.nonNull(filterToTarget);
+        Objects.nonNull(filterFromTarget);
+        //check that from/to filters do not throw checked exceptions
+        noCheckedExceptions(filterToTarget);
+        noCheckedExceptions(filterFromTarget);
+
+        //check that from/to filters have right signatures
+        if (filterFromTarget.type().parameterCount() != 1) {
+            throw newIllegalArgumentException("filterFromTarget filter type has wrong arity", filterFromTarget.type());
+        } else if (filterToTarget.type().parameterCount() != 1) {
+            throw newIllegalArgumentException("filterToTarget filter type has wrong arity", filterFromTarget.type());
+        } else if (filterFromTarget.type().parameterType(0) != filterToTarget.type().returnType() ||
+                filterToTarget.type().parameterType(0) != filterFromTarget.type().returnType()) {
+            throw newIllegalArgumentException("filterFromTarget and filterToTarget filter types do not match", filterFromTarget.type(), filterToTarget.type());
+        } else if (target.varType() != filterFromTarget.type().parameterType(0)) {
+            throw newIllegalArgumentException("filterFromTarget filter type does not match target var handle type", filterFromTarget.type(), target.varType());
+        } else if (target.varType() != filterToTarget.type().returnType()) {
+            throw newIllegalArgumentException("filterFromTarget filter type does not match target var handle type", filterToTarget.type(), target.varType());
+        }
+
+        return new IndirectVarHandle(target, filterFromTarget.type().returnType(), target.coordinateTypes().toArray(new Class<?>[0]),
+                (mode, modeHandle) -> {
+                    int lastParameterPos = modeHandle.type().parameterCount() - 1;
+                    return switch (mode.at) {
+                        case GET -> MethodHandles.filterReturnValue(modeHandle, filterFromTarget);
+                        case SET -> MethodHandles.filterArgument(modeHandle, lastParameterPos, filterToTarget);
+                        case GET_AND_UPDATE -> {
+                            MethodHandle adapter = MethodHandles.filterReturnValue(modeHandle, filterFromTarget);
+                            yield MethodHandles.filterArgument(adapter, lastParameterPos, filterToTarget);
+                        }
+                        case COMPARE_AND_EXCHANGE -> {
+                            MethodHandle adapter = MethodHandles.filterReturnValue(modeHandle, filterFromTarget);
+                            adapter = MethodHandles.filterArgument(adapter, lastParameterPos, filterToTarget);
+                            yield MethodHandles.filterArgument(adapter, lastParameterPos - 1, filterToTarget);
+                        }
+                        case COMPARE_AND_SET -> {
+                            MethodHandle adapter = MethodHandles.filterArgument(modeHandle, lastParameterPos, filterToTarget);
+                            yield MethodHandles.filterArgument(adapter, lastParameterPos - 1, filterToTarget);
+                        }
+                    };
+                });
+    }
+
+    public static VarHandle filterCoordinates(VarHandle target, int pos, MethodHandle... filters) {
+        Objects.nonNull(target);
+        Objects.nonNull(filters);
+
+        List<Class<?>> targetCoordinates = target.coordinateTypes();
+        if (pos < 0 || pos >= targetCoordinates.size()) {
+            throw newIllegalArgumentException("Invalid position " + pos + " for coordinate types", targetCoordinates);
+        } else if (pos + filters.length > targetCoordinates.size()) {
+            throw new IllegalArgumentException("Too many filters");
+        }
+
+        if (filters.length == 0) return target;
+
+        List<Class<?>> newCoordinates = new ArrayList<>(targetCoordinates);
+        for (int i = 0 ; i < filters.length ; i++) {
+            noCheckedExceptions(filters[i]);
+            MethodType filterType = filters[i].type();
+            if (filterType.parameterCount() != 1) {
+                throw newIllegalArgumentException("Invalid filter type " + filterType);
+            } else if (newCoordinates.get(pos + i) != filterType.returnType()) {
+                throw newIllegalArgumentException("Invalid filter type " + filterType + " for coordinate type " + newCoordinates.get(i));
+            }
+            newCoordinates.set(pos + i, filters[i].type().parameterType(0));
+        }
+
+        return new IndirectVarHandle(target, target.varType(), newCoordinates.toArray(new Class<?>[0]),
+                (mode, modeHandle) -> MethodHandles.filterArguments(modeHandle, 1 + pos, filters));
+    }
+
+    public static VarHandle insertCoordinates(VarHandle target, int pos, Object... values) {
+        Objects.nonNull(target);
+        Objects.nonNull(values);
+
+        List<Class<?>> targetCoordinates = target.coordinateTypes();
+        if (pos < 0 || pos >= targetCoordinates.size()) {
+            throw newIllegalArgumentException("Invalid position " + pos + " for coordinate types", targetCoordinates);
+        } else if (pos + values.length > targetCoordinates.size()) {
+            throw new IllegalArgumentException("Too many values");
+        }
+
+        if (values.length == 0) return target;
+
+        List<Class<?>> newCoordinates = new ArrayList<>(targetCoordinates);
+        for (int i = 0 ; i < values.length ; i++) {
+            Class<?> pt = newCoordinates.get(pos);
+            if (pt.isPrimitive()) {
+                Wrapper w = Wrapper.forPrimitiveType(pt);
+                w.convert(values[i], pt);
+            } else {
+                pt.cast(values[i]);
+            }
+            newCoordinates.remove(pos);
+        }
+
+        return new IndirectVarHandle(target, target.varType(), newCoordinates.toArray(new Class<?>[0]),
+                (mode, modeHandle) -> MethodHandles.insertArguments(modeHandle, 1 + pos, values));
+    }
+
+    public static VarHandle permuteCoordinates(VarHandle target, List<Class<?>> newCoordinates, int... reorder) {
+        Objects.nonNull(target);
+        Objects.nonNull(newCoordinates);
+        Objects.nonNull(reorder);
+
+        List<Class<?>> targetCoordinates = target.coordinateTypes();
+        MethodHandles.permuteArgumentChecks(reorder,
+                MethodType.methodType(void.class, newCoordinates),
+                MethodType.methodType(void.class, targetCoordinates));
+
+        return new IndirectVarHandle(target, target.varType(), newCoordinates.toArray(new Class<?>[0]),
+                (mode, modeHandle) ->
+                        MethodHandles.permuteArguments(modeHandle,
+                                methodTypeFor(mode.at, modeHandle.type(), targetCoordinates, newCoordinates),
+                                reorderArrayFor(mode.at, newCoordinates, reorder)));
+    }
+
+    private static int numTrailingArgs(VarHandle.AccessType at) {
+        return switch (at) {
+            case GET -> 0;
+            case GET_AND_UPDATE, SET -> 1;
+            case COMPARE_AND_SET, COMPARE_AND_EXCHANGE -> 2;
+        };
+    }
+
+    private static int[] reorderArrayFor(VarHandle.AccessType at, List<Class<?>> newCoordinates, int[] reorder) {
+        int numTrailingArgs = numTrailingArgs(at);
+        int[] adjustedReorder = new int[reorder.length + 1 + numTrailingArgs];
+        adjustedReorder[0] = 0;
+        for (int i = 0 ; i < reorder.length ; i++) {
+            adjustedReorder[i + 1] = reorder[i] + 1;
+        }
+        for (int i = 0 ; i < numTrailingArgs ; i++) {
+            adjustedReorder[i + reorder.length + 1] = i + newCoordinates.size() + 1;
+        }
+        return adjustedReorder;
+    }
+
+    private static MethodType methodTypeFor(VarHandle.AccessType at, MethodType oldType, List<Class<?>> oldCoordinates, List<Class<?>> newCoordinates) {
+        int numTrailingArgs = numTrailingArgs(at);
+        MethodType adjustedType = MethodType.methodType(oldType.returnType(), oldType.parameterType(0));
+        adjustedType = adjustedType.appendParameterTypes(newCoordinates);
+        for (int i = 0 ; i < numTrailingArgs ; i++) {
+            adjustedType = adjustedType.appendParameterTypes(oldType.parameterType(1 + oldCoordinates.size() + i));
+        }
+        return adjustedType;
+    }
+
+    public static VarHandle collectCoordinates(VarHandle target, int pos, MethodHandle filter) {
+        Objects.nonNull(target);
+        Objects.nonNull(filter);
+        noCheckedExceptions(filter);
+
+        List<Class<?>> targetCoordinates = target.coordinateTypes();
+        if (pos < 0 || pos >= targetCoordinates.size()) {
+            throw newIllegalArgumentException("Invalid position " + pos + " for coordinate types", targetCoordinates);
+        } else if (filter.type().returnType() == void.class) {
+            throw newIllegalArgumentException("Invalid filter type " + filter.type() + " ; filter cannot be void");
+        } else if (filter.type().returnType() != targetCoordinates.get(pos)) {
+            throw newIllegalArgumentException("Invalid filter type " + filter.type() + " for coordinate type " + targetCoordinates.get(pos));
+        }
+
+        List<Class<?>> newCoordinates = new ArrayList<>(targetCoordinates);
+        newCoordinates.remove(pos);
+        newCoordinates.addAll(pos, filter.type().parameterList());
+
+        return new IndirectVarHandle(target, target.varType(), newCoordinates.toArray(new Class<?>[0]),
+                (mode, modeHandle) -> MethodHandles.collectArguments(modeHandle, 1 + pos, filter));
+    }
+
+    public static VarHandle dropCoordinates(VarHandle target, int pos, Class<?>... valueTypes) {
+        Objects.nonNull(target);
+        Objects.nonNull(valueTypes);
+
+        List<Class<?>> targetCoordinates = target.coordinateTypes();
+        if (pos < 0 || pos > targetCoordinates.size()) {
+            throw newIllegalArgumentException("Invalid position " + pos + " for coordinate types", targetCoordinates);
+        }
+
+        if (valueTypes.length == 0) return target;
+
+        List<Class<?>> newCoordinates = new ArrayList<>(targetCoordinates);
+        newCoordinates.addAll(pos, List.of(valueTypes));
+
+        return new IndirectVarHandle(target, target.varType(), newCoordinates.toArray(new Class<?>[0]),
+                (mode, modeHandle) -> MethodHandles.dropArguments(modeHandle, 1 + pos, valueTypes));
+    }
+
+    private static void noCheckedExceptions(MethodHandle handle) {
+        if (handle instanceof DirectMethodHandle) {
+            DirectMethodHandle directHandle = (DirectMethodHandle)handle;
+            MethodHandleInfo info = MethodHandles.Lookup.IMPL_LOOKUP.revealDirect(directHandle);
+            Class<?>[] exceptionTypes = switch (info.getReferenceKind()) {
+                case MethodHandleInfo.REF_invokeInterface, MethodHandleInfo.REF_invokeSpecial,
+                        MethodHandleInfo.REF_invokeStatic, MethodHandleInfo.REF_invokeVirtual ->
+                        info.reflectAs(Method.class, MethodHandles.Lookup.IMPL_LOOKUP).getExceptionTypes();
+                case MethodHandleInfo.REF_newInvokeSpecial ->
+                        info.reflectAs(Constructor.class, MethodHandles.Lookup.IMPL_LOOKUP).getExceptionTypes();
+                case MethodHandleInfo.REF_getField, MethodHandleInfo.REF_getStatic,
+                        MethodHandleInfo.REF_putField, MethodHandleInfo.REF_putStatic -> null;
+                default -> throw new AssertionError("Cannot get here");
+            };
+            if (exceptionTypes != null) {
+                if (Stream.of(exceptionTypes).anyMatch(VarHandles::isCheckedException)) {
+                    throw newIllegalArgumentException("Cannot adapt a var handle with a method handle which throws checked exceptions");
+                }
+            }
+        } else if (handle instanceof DelegatingMethodHandle) {
+            noCheckedExceptions(((DelegatingMethodHandle)handle).getTarget());
+        } else {
+            //bound
+            BoundMethodHandle boundHandle = (BoundMethodHandle)handle;
+            for (int i = 0 ; i < boundHandle.fieldCount() ; i++) {
+                Object arg = boundHandle.arg(i);
+                if (arg instanceof MethodHandle){
+                    noCheckedExceptions((MethodHandle) arg);
+                }
+            }
+        }
+    }
+
+    private static boolean isCheckedException(Class<?> clazz) {
+        return Throwable.class.isAssignableFrom(clazz) &&
+                !RuntimeException.class.isAssignableFrom(clazz) &&
+                !Error.class.isAssignableFrom(clazz);
+    }
+
 //    /**
 //     * A helper program to generate the VarHandleGuards class with a set of
 //     * static guard methods each of which corresponds to a particular shape and
 //     * performs a type check of the symbolic type descriptor with the VarHandle
 //     * type descriptor before linking/invoking to the underlying operation as
diff a/src/java.base/share/classes/jdk/internal/access/JavaLangInvokeAccess.java b/src/java.base/share/classes/jdk/internal/access/JavaLangInvokeAccess.java
--- a/src/java.base/share/classes/jdk/internal/access/JavaLangInvokeAccess.java
+++ b/src/java.base/share/classes/jdk/internal/access/JavaLangInvokeAccess.java
@@ -23,13 +23,15 @@
  * questions.
  */
 
 package jdk.internal.access;
 
+import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
 import java.nio.ByteOrder;
+import java.util.List;
 import java.util.Map;
 
 public interface JavaLangInvokeAccess {
     /**
      * Create a new MemberName instance. Used by {@code StackFrameInfo}.
@@ -149,6 +151,42 @@
     /**
      * Returns the strides associated with a memory access var handle.
      * Used by {@code jdk.incubator.foreign.MemoryHandles}.
      */
     long[] memoryAddressStrides(VarHandle handle);
+
+    /**
+     * Var handle carrier combinator.
+     * Used by {@code jdk.incubator.foreign.MemoryHandles}.
+     */
+    VarHandle filterValue(VarHandle target, MethodHandle filterToTarget, MethodHandle filterFromTarget);
+
+    /**
+     * Var handle filter coordinates combinator.
+     * Used by {@code jdk.incubator.foreign.MemoryHandles}.
+     */
+    VarHandle filterCoordinates(VarHandle target, int pos, MethodHandle... filters);
+
+    /**
+     * Var handle drop coordinates combinator.
+     * Used by {@code jdk.incubator.foreign.MemoryHandles}.
+     */
+    VarHandle dropCoordinates(VarHandle target, int pos, Class<?>... valueTypes);
+
+    /**
+     * Var handle permute coordinates combinator.
+     * Used by {@code jdk.incubator.foreign.MemoryHandles}.
+     */
+    VarHandle permuteCoordinates(VarHandle target, List<Class<?>> newCoordinates, int... reorder);
+
+    /**
+     * Var handle collect coordinates combinator.
+     * Used by {@code jdk.incubator.foreign.MemoryHandles}.
+     */
+    VarHandle collectCoordinates(VarHandle target, int pos, MethodHandle filter);
+
+    /**
+     * Var handle insert coordinates combinator.
+     * Used by {@code jdk.incubator.foreign.MemoryHandles}.
+     */
+    VarHandle insertCoordinates(VarHandle target, int pos, Object... values);
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- *  This code is free software; you can redistribute it and/or modify it
- *  under the terms of the GNU General Public License version 2 only, as
- *  published by the Free Software Foundation.  Oracle designates this
- *  particular file as subject to the "Classpath" exception as provided
- *  by Oracle in the LICENSE file that accompanied this code.
- *
- *  This code is distributed in the hope that it will be useful, but WITHOUT
- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- *  version 2 for more details (a copy is included in the LICENSE file that
- *  accompanied this code).
- *
- *  You should have received a copy of the GNU General Public License version
- *  2 along with this work; if not, write to the Free Software Foundation,
- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- *  or visit www.oracle.com if you need additional information or have any
- *  questions.
- *
- */
-
-package jdk.incubator.foreign;
-
-import jdk.internal.foreign.InternalForeign;
-
-/**
- * A class containing various methods relating to native interop.
- */
-public interface Foreign {
-
-    /**
-     * Get an instance of the {@linkplain Foreign} interface.
-     * <p>
-     * Access to this method must be explicitly enabled by setting the {@code jdk.incubator.foreign.Foreign} system
-     * property. The available values are {@code deny}, {@code warn}, {@code debug}, {@code permit}.
-     * <ul>
-     * <li>
-     * If set to {@code deny} an {@linkplain IllegalAccessError} will be thrown.
-     * <li>
-     * If set to {@code warn} a warning message will be written to the standard error stream.
-     * <li>
-     * If set to {@code debug} a debug message and a stack trace will be printed to the standard output stream.
-     * <li>
-     * If set to {@code permit} no special action will be taken.
-     * <li>
-     * If set to any other value an {@linkplain IllegalAccessError} will be thrown.
-     * </ul>
-     * <p>
-     * {@code deny} is the default value.
-     *
-     * @return an instance of {@linkplain Foreign}
-     * @throws IllegalAccessError if {@code jdk.incubator.foreign.Foreign} is set to {@code deny}
-     */
-    static Foreign getInstance() throws IllegalAccessError {
-        return InternalForeign.getInstance();
-    }
-
-    /**
-     * Returns a new memory address attached to a native memory segment with given base address and size. The segment
-     * attached to the returned address has <em>no temporal bounds</em> and cannot be closed; as such,
-     * the returned address is assumed to always be <em>alive</em>. Also, the segment attached to the returned address
-     * has <em>no confinement thread</em>; this means that the returned address can be used by multiple threads.
-     * <p>
-     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
-     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
-     * restricted methods, and use safe and supported functionalities, where possible.
-     *
-     * @param base the desired base address
-     * @param byteSize the desired size (in bytes).
-     * @return a new memory address attached to a native memory segment with given base address and size.
-     * @throws IllegalArgumentException if {@code base} does not encapsulate an <em>unchecked</em> native memory address,
-     * e.g. if {@code base.segment() != null}.
-     * @throws IllegalAccessError if the permission jkd.incubator.foreign.restrictedMethods is set to 'deny'
-     */
-    MemoryAddress withSize(MemoryAddress base, long byteSize);
-
-    /**
-     * Returns a new native memory segment with given base address and size; the returned segment has its own temporal
-     * bounds, and can therefore be closed; closing such a segment results in releasing the native memory by calling
-     * <em>free</em> on the base address of the returned memory segment. As for other ordinary memory segments,
-     * the returned segment will also be confined on the current thread (see {@link Thread#currentThread()}).
-     * <p>
-     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
-     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
-     * restricted methods, and use safe and supported functionalities, where possible.
-     *
-     * @param base the desired base address
-     * @param byteSize the desired size.
-     * @return a new native memory segment with given base address and size.
-     * @throws IllegalArgumentException if {@code base} does not encapsulate an <em>unchecked</em> native memory address,
-      * e.g. if {@code base.segment() != null}.
-     * @throws IllegalAccessError if the permission jkd.incubator.foreign.restrictedMethods is set to 'deny'
-     */
-    MemorySegment asMallocSegment(MemoryAddress base, long byteSize);
-
-    /**
-     * Returns a non-confined memory segment that has the same spatial and temporal bounds as the provided segment.
-     * Since the returned segment can be effectively accessed by multiple threads in an unconstrained fashion,
-     * this method should be used with care, as it might lead to JVM crashes - e.g. in the case where a thread {@code A}
-     * closes a segment while another thread {@code B} is accessing it.
-     * <p>
-     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
-     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
-     * restricted methods, and use safe and supported functionalities, where possible.
-     * @param segment the segment from which an unconfined view is to be created.
-     * @return a non-confined memory segment that has the same spatial and temporal bounds as the provided segment.
-     */
-    MemorySegment asUnconfined(MemorySegment segment);
-
-    /**
-     * Obtain an instance of the system ABI.
-     * @return system ABI.
-     */
-    SystemABI getSystemABI();
-}
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
@@ -25,19 +25,19 @@
  */
 package jdk.incubator.foreign;
 
 import jdk.internal.access.JavaLangInvokeAccess;
 import jdk.internal.access.SharedSecrets;
-import jdk.internal.foreign.MemoryAddressImpl;
 import jdk.internal.foreign.Utils;
 import sun.invoke.util.Wrapper;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
 import java.nio.ByteOrder;
+import java.util.List;
 
 /**
  * This class defines several factory methods for constructing and combining memory access var handles.
  * To obtain a memory access var handle, clients must start from one of the <em>leaf</em> methods
  * (see {@link MemoryHandles#varHandle(Class, ByteOrder)},
@@ -232,12 +232,12 @@
                     JLI.memoryAddressByteOrder(target),
                     JLI.memoryAddressOffset(target) + bytesOffset,
                     JLI.memoryAddressStrides(target)));
         } else {
             //slow path
-            VarHandle res = MethodHandles.collectCoordinates(target, 0, ADD_OFFSET);
-            return MethodHandles.insertCoordinates(res, 1, bytesOffset);
+            VarHandle res = collectCoordinates(target, 0, ADD_OFFSET);
+            return insertCoordinates(res, 1, bytesOffset);
         }
     }
 
     /**
      * Returns a var handle which adds a <em>variable</em> offset to the incoming {@link MemoryAddress}
@@ -257,11 +257,11 @@
      * @return the adapted var handle.
      * @throws IllegalArgumentException if the first access coordinate type is not of type {@link MemoryAddress}.
      */
     public static VarHandle withStride(VarHandle target, long bytesStride) {
         if (bytesStride == 0) {
-            return MethodHandles.dropCoordinates(target, 1, long.class); // dummy coordinate
+            return dropCoordinates(target, 1, long.class); // dummy coordinate
         }
 
         checkAddressFirstCoordinate(target);
 
         if (JLI.isMemoryAccessVarHandle(target) &&
@@ -278,12 +278,12 @@
                     JLI.memoryAddressByteOrder(target),
                     JLI.memoryAddressOffset(target),
                     newStrides));
         } else {
             //slow path
-            VarHandle res = MethodHandles.collectCoordinates(target, 0, ADD_STRIDE);
-            return MethodHandles.insertCoordinates(res, 2, bytesStride);
+            VarHandle res = collectCoordinates(target, 0, ADD_STRIDE);
+            return insertCoordinates(res, 2, bytesStride);
         }
     }
 
     /**
      * Adapt an existing var handle into a new var handle whose carrier type is {@link MemoryAddress}.
@@ -305,19 +305,217 @@
             throw new IllegalArgumentException("Unsupported carrier type: " + carrier.getName());
         }
 
         if (carrier != long.class) {
             // slow-path, we need to adapt
-            return MethodHandles.filterValue(target,
+            return filterValue(target,
                     MethodHandles.explicitCastArguments(ADDRESS_TO_LONG, MethodType.methodType(carrier, MemoryAddress.class)),
                     MethodHandles.explicitCastArguments(LONG_TO_ADDRESS, MethodType.methodType(MemoryAddress.class, carrier)));
         } else {
             // fast-path
-            return MethodHandles.filterValue(target, ADDRESS_TO_LONG, LONG_TO_ADDRESS);
+            return filterValue(target, ADDRESS_TO_LONG, LONG_TO_ADDRESS);
         }
     }
 
+    /**
+     * Adapts a target var handle by pre-processing incoming and outgoing values using a pair of unary filter functions.
+     * <p>
+     * When calling e.g. {@link VarHandle#set(Object...)} on the resulting var handle, the incoming value (of type {@code T}, where
+     * {@code T} is the parameter type of the first filter function) is processed using the first filter and then passed
+     * to the target var handle.
+     * Conversely, when calling e.g. {@link VarHandle#get(Object...)} on the resulting var handle, the return value obtained from
+     * the target var handle (of type {@code T}, where {@code T} is the parameter type of the second filter function)
+     * is processed using the second filter and returned to the caller. More advanced access mode types, such as
+     * {@link java.lang.invoke.VarHandle.AccessMode#COMPARE_AND_EXCHANGE} might apply both filters at the same time.
+     * <p>
+     * For the boxing and unboxing filters to be well formed, their types must be of the form {@code S -> T} and {@code T -> S},
+     * respectively, where {@code T} is the type of the target var handle. If this is the case, the resulting var handle will
+     * have type {@code S}.
+     * <p>
+     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
+     * atomic access guarantees as those featured by the target var handle.
+     *
+     * @param target the target var handle
+     * @param filterToTarget a filter to convert some type {@code S} into the type of {@code target}
+     * @param filterFromTarget a filter to convert the type of {@code target} to some type {@code S}
+     * @return an adapter var handle which accepts a new type, performing the provided boxing/unboxing conversions.
+     * @throws NullPointerException if either {@code target}, {@code filterToTarget} or {@code filterFromTarget} are {@code == null}.
+     * @throws IllegalArgumentException if {@code filterFromTarget} and {@code filterToTarget} are not well-formed, that is, they have types
+     * other than {@code S -> T} and {@code T -> S}, respectively, where {@code T} is the type of the target var handle,
+     * or if either {@code filterFromTarget} or {@code filterToTarget} throws any checked exceptions.
+     */
+    public static VarHandle filterValue(VarHandle target, MethodHandle filterToTarget, MethodHandle filterFromTarget) {
+        return JLI.filterValue(target, filterToTarget, filterFromTarget);
+    }
+
+    /**
+     * Adapts a target var handle by pre-processing incoming coordinate values using unary filter functions.
+     * <p>
+     * When calling e.g. {@link VarHandle#get(Object...)} on the resulting var handle, the incoming coordinate values
+     * starting at position {@code pos} (of type {@code C1, C2 ... Cn}, where {@code C1, C2 ... Cn} are the return type
+     * of the unary filter functions) are transformed into new values (of type {@code S1, S2 ... Sn}, where {@code S1, S2 ... Sn} are the
+     * parameter types of the unary filter functions), and then passed (along with any coordinate that was left unaltered
+     * by the adaptation) to the target var handle.
+     * <p>
+     * For the coordinate filters to be well formed, their types must be of the form {@code S1 -> T1, S2 -> T1 ... Sn -> Tn},
+     * where {@code T1, T2 ... Tn} are the coordinate types starting at position {@code pos} of the target var handle.
+     * <p>
+     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
+     * atomic access guarantees as those featured by the target var handle.
+     *
+     * @param target the target var handle
+     * @param pos the position of the first coordinate to be transformed
+     * @param filters the unary functions which are used to transform coordinates starting at position {@code pos}
+     * @return an adapter var handle which accepts new coordinate types, applying the provided transformation
+     * to the new coordinate values.
+     * @throws NullPointerException if either {@code target}, {@code filters} are {@code == null}.
+     * @throws IllegalArgumentException if the handles in {@code filters} are not well-formed, that is, they have types
+     * other than {@code S1 -> T1, S2 -> T2, ... Sn -> Tn} where {@code T1, T2 ... Tn} are the coordinate types starting
+     * at position {@code pos} of the target var handle, if {@code pos} is not between 0 and the target var handle coordinate arity, inclusive,
+     * or if more filters are provided than the actual number of coordinate types, or if any of the filters throws any
+     * checked exceptions.
+     * available starting at {@code pos}.
+     */
+    public static VarHandle filterCoordinates(VarHandle target, int pos, MethodHandle... filters) {
+        return JLI.filterCoordinates(target, pos, filters);
+    }
+
+    /**
+     * Provides a target var handle with one or more <em>bound coordinates</em>
+     * in advance of the var handle's invocation. As a consequence, the resulting var handle will feature less
+     * coordinate types than the target var handle.
+     * <p>
+     * When calling e.g. {@link VarHandle#get(Object...)} on the resulting var handle, incoming coordinate values
+     * are joined with bound coordinate values, and then passed to the target var handle.
+     * <p>
+     * For the bound coordinates to be well formed, their types must be {@code T1, T2 ... Tn },
+     * where {@code T1, T2 ... Tn} are the coordinate types starting at position {@code pos} of the target var handle.
+     * <p>
+     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
+     * atomic access guarantees as those featured by the target var handle.
+     *
+     * @param target the var handle to invoke after the bound coordinates are inserted
+     * @param pos the position of the first coordinate to be inserted
+     * @param values the series of bound coordinates to insert
+     * @return an adapter var handle which inserts an additional coordinates,
+     *         before calling the target var handle
+     * @throws NullPointerException if either {@code target}, {@code values} are {@code == null}.
+     * @throws IllegalArgumentException if {@code pos} is not between 0 and the target var handle coordinate arity, inclusive,
+     * or if more values are provided than the actual number of coordinate types available starting at {@code pos}.
+     * @throws ClassCastException if the bound coordinates in {@code values} are not well-formed, that is, they have types
+     * other than {@code T1, T2 ... Tn }, where {@code T1, T2 ... Tn} are the coordinate types starting at position {@code pos}
+     * of the target var handle.
+     */
+    public static VarHandle insertCoordinates(VarHandle target, int pos, Object... values) {
+        return JLI.insertCoordinates(target, pos, values);
+    }
+
+    /**
+     * Provides a var handle which adapts the coordinate values of the target var handle, by re-arranging them
+     * so that the new coordinates match the provided ones.
+     * <p>
+     * The given array controls the reordering.
+     * Call {@code #I} the number of incoming coordinates (the value
+     * {@code newCoordinates.size()}, and call {@code #O} the number
+     * of outgoing coordinates (the number of coordinates associated with the target var handle).
+     * Then the length of the reordering array must be {@code #O},
+     * and each element must be a non-negative number less than {@code #I}.
+     * For every {@code N} less than {@code #O}, the {@code N}-th
+     * outgoing coordinate will be taken from the {@code I}-th incoming
+     * coordinate, where {@code I} is {@code reorder[N]}.
+     * <p>
+     * No coordinate value conversions are applied.
+     * The type of each incoming coordinate, as determined by {@code newCoordinates},
+     * must be identical to the type of the corresponding outgoing coordinate
+     * in the target var handle.
+     * <p>
+     * The reordering array need not specify an actual permutation.
+     * An incoming coordinate will be duplicated if its index appears
+     * more than once in the array, and an incoming coordinate will be dropped
+     * if its index does not appear in the array.
+     * <p>
+     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
+     * atomic access guarantees as those featured by the target var handle.
+     * @param target the var handle to invoke after the coordinates have been reordered
+     * @param newCoordinates the new coordinate types
+     * @param reorder an index array which controls the reordering
+     * @return an adapter var handle which re-arranges the incoming coordinate values,
+     * before calling the target var handle
+     * @throws NullPointerException if either {@code target}, {@code newCoordinates} or {@code reorder} are {@code == null}.
+     * @throws IllegalArgumentException if the index array length is not equal to
+     * the number of coordinates of the target var handle, or if any index array element is not a valid index for
+     * a coordinate of {@code newCoordinates}, or if two corresponding coordinate types in
+     * the target var handle and in {@code newCoordinates} are not identical.
+     */
+    public static VarHandle permuteCoordinates(VarHandle target, List<Class<?>> newCoordinates, int... reorder) {
+        return JLI.permuteCoordinates(target, newCoordinates, reorder);
+    }
+
+    /**
+     * Adapts a target var handle handle by pre-processing
+     * a sub-sequence of its coordinate values with a filter (a method handle).
+     * The pre-processed coordinates are replaced by the result (if any) of the
+     * filter function and the target var handle is then called on the modified (usually shortened)
+     * coordinate list.
+     * <p>
+     * If {code R} is the return type of the filter (which cannot be void), the target var handle must accept a value of
+     * type {@code R} as its coordinate in position {@code pos}, preceded and/or followed by
+     * any coordinate not passed to the filter.
+     * No coordinates are reordered, and the result returned from the filter
+     * replaces (in order) the whole subsequence of coordinates originally
+     * passed to the adapter.
+     * <p>
+     * The argument types (if any) of the filter
+     * replace zero or one coordinate types of the target var handle, at position {@code pos},
+     * in the resulting adapted var handle.
+     * The return type of the filter must be identical to the
+     * coordinate type of the target var handle at position {@code pos}, and that target var handle
+     * coordinate is supplied by the return value of the filter.
+     * <p>
+     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
+     * atomic access guarantees as those featured by the target var handle.
+     *
+     * @param target the var handle to invoke after the coordinates have been filtered
+     * @param pos the position of the coordinate to be filtered
+     * @param filter the filter method handle
+     * @return an adapter var handle which filters the incoming coordinate values,
+     * before calling the target var handle
+     * @throws NullPointerException if either {@code target}, {@code filter} are {@code == null}.
+     * @throws IllegalArgumentException if the return type of {@code filter}
+     * is void, or it is not the same as the {@code pos} coordinate of the target var handle,
+     * if {@code pos} is not between 0 and the target var handle coordinate arity, inclusive,
+     * if the resulting var handle's type would have <a href="MethodHandle.html#maxarity">too many coordinates</a>,
+     * or if {@code filter} throws any checked exceptions.
+     */
+    public static VarHandle collectCoordinates(VarHandle target, int pos, MethodHandle filter) {
+        return JLI.collectCoordinates(target, pos, filter);
+    }
+
+    /**
+     * Returns a var handle which will discard some dummy coordinates before delegating to the
+     * target var handle. As a consequence, the resulting var handle will feature more
+     * coordinate types than the target var handle.
+     * <p>
+     * The {@code pos} argument may range between zero and <i>N</i>, where <i>N</i> is the arity of the
+     * target var handle's coordinate types. If {@code pos} is zero, the dummy coordinates will precede
+     * the target's real arguments; if {@code pos} is <i>N</i> they will come after.
+     * <p>
+     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
+     * atomic access guarantees as those featured by the target var handle.
+     *
+     * @param target the var handle to invoke after the dummy coordinates are dropped
+     * @param pos position of first coordinate to drop (zero for the leftmost)
+     * @param valueTypes the type(s) of the coordinate(s) to drop
+     * @return an adapter var handle which drops some dummy coordinates,
+     *         before calling the target var handle
+     * @throws NullPointerException if either {@code target}, {@code valueTypes} are {@code == null}.
+     * @throws IllegalArgumentException if {@code pos} is not between 0 and the target var handle coordinate arity, inclusive.
+     */
+    public static VarHandle dropCoordinates(VarHandle target, int pos, Class<?>... valueTypes) {
+        return JLI.dropCoordinates(target, pos, valueTypes);
+    }
+
     private static void checkAddressFirstCoordinate(VarHandle handle) {
         if (handle.coordinateTypes().size() < 1 ||
                 handle.coordinateTypes().get(0) != MemoryAddress.class) {
             throw new IllegalArgumentException("Expected var handle with leading coordinate of type MemoryAddress");
         }
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java
@@ -24,11 +24,11 @@
  *
  */
 
 package jdk.incubator.foreign;
 
-import jdk.internal.foreign.InternalForeign;
+import jdk.internal.foreign.abi.SharedUtils;
 import jdk.internal.foreign.abi.x64.windows.Windowsx64ABI;
 
 import java.nio.ByteOrder;
 
 import static jdk.incubator.foreign.SystemABI.ABI_AARCH64;
@@ -222,11 +222,11 @@
      * The {@code T*} native type.
      */
     public static final ValueLayout C_POINTER;
 
     static {
-        SystemABI abi = InternalForeign.getInstancePrivileged().getSystemABI();
+        SystemABI abi = SharedUtils.getSystemABI();
         switch (abi.name()) {
             case ABI_SYSV -> {
                 C_BOOL = SysV.C_BOOL;
                 C_UCHAR = SysV.C_UCHAR;
                 C_SCHAR = SysV.C_SCHAR;
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -30,14 +30,16 @@
 
 import jdk.internal.foreign.AbstractMemorySegmentImpl;
 import jdk.internal.foreign.HeapMemorySegmentImpl;
 import jdk.internal.foreign.MappedMemorySegmentImpl;
 import jdk.internal.foreign.NativeMemorySegmentImpl;
+import jdk.internal.foreign.Utils;
 
 import java.io.IOException;
 import java.nio.channels.FileChannel;
 import java.nio.file.Path;
+import java.util.Objects;
 import java.util.Spliterator;
 import java.util.function.Consumer;
 
 /**
  * A memory segment models a contiguous region of memory. A memory segment is associated with both spatial
@@ -477,10 +479,45 @@
         }
 
         return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, alignmentBytes);
     }
 
+    /**
+     * Returns a new native memory segment with given base address and size; the returned segment has its own temporal
+     * bounds, and can therefore be closed; closing such a segment can optionally result in calling an user-provided cleanup
+     * action. This method can be very useful when interacting with custom native memory sources (e.g. custom allocators,
+     * GPU memory, etc.), where an address to some underlying memory region is typically obtained from native code
+     * (often as a plain {@code long} value).
+     * <p>
+     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
+     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
+     * restricted methods, and use safe and supported functionalities, where possible.
+     *
+     * @param addr the desired base address
+     * @param bytesSize the desired size.
+     * @param owner the desired owner thread. If {@code owner == null}, the returned segment is <em>not</em> confined.
+     * @param cleanup a cleanup action to be executed when the {@link MemorySegment#close()} method is called on the
+     *                returned segment. If {@code cleanup == null}, no cleanup action is executed.
+     * @param attachment an object that must be kept alive by the returned segment; this can be useful when
+     *                   the returned segment depends on memory which could be released if a certain object
+     *                   is determined to be unreacheable. In most cases this will be set to {@code null}.
+     * @return a new native memory segment with given base address, size, owner, cleanup action and object attachment.
+     * @throws IllegalArgumentException if {@code bytesSize <= 0}.
+     * @throws UnsupportedOperationException if {@code addr} is associated with an heap segment.
+     * @throws IllegalAccessError if the runtime property {@code foreign.restricted} is not set to either
+     * {@code permit}, {@code warn} or {@code debug} (the default value is set to {@code deny}).
+     * @throws NullPointerException if {@code addr == null}.
+     */
+    static MemorySegment ofNativeRestricted(MemoryAddress addr, long bytesSize, Thread owner, Runnable cleanup, Object attachment) {
+        Objects.requireNonNull(addr);
+        if (bytesSize <= 0) {
+            throw new IllegalArgumentException("Invalid size : " + bytesSize);
+        }
+        Utils.checkRestrictedAccess("MemorySegment.ofNativeRestricted");
+        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(addr, bytesSize, owner, cleanup, attachment);
+    }
+
     // access mode masks
 
     /**
      * Read access mode; read operations are supported by a segment which supports this access mode.
      * @see MemorySegment#accessModes()
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
@@ -23,11 +23,16 @@
  *  questions.
  *
  */
 package jdk.incubator.foreign;
 
+import jdk.internal.foreign.Utils;
+import jdk.internal.foreign.abi.SharedUtils;
 import jdk.internal.foreign.abi.UpcallStubs;
+import jdk.internal.foreign.abi.aarch64.AArch64ABI;
+import jdk.internal.foreign.abi.x64.sysv.SysVx64ABI;
+import jdk.internal.foreign.abi.x64.windows.Windowsx64ABI;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodType;
 import java.util.Optional;
 
@@ -200,6 +205,21 @@
      * Returns memory layout for the given native type if supported by the platform ABI.
      * @param type the native type for which the layout is to be retrieved.
      * @return the layout (if any) associated with {@code type}
      */
     Optional<MemoryLayout> layoutFor(Type type);
+
+    /**
+     * Obtain an instance of the system ABI.
+     * <p>
+     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
+     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
+     * restricted methods, and use safe and supported functionalities, where possible.
+     * @return system ABI.
+     * @throws IllegalAccessError if the runtime property {@code foreign.restricted} is not set to either
+     * {@code permit}, {@code warn} or {@code debug} (the default value is set to {@code deny}).
+     */
+    static SystemABI getSystemABI() {
+        Utils.checkRestrictedAccess("SystemABI.getSystemABI");
+        return SharedUtils.getSystemABI();
+    }
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
@@ -224,15 +224,10 @@
         scope.checkAliveConfined();
     }
 
     // Helper methods
 
-    AbstractMemorySegmentImpl asUnconfined() {
-        checkValidState();
-        return dup(0, length, mask, null, scope);
-    }
-
     private boolean isSet(int mask) {
         return (this.mask & mask) != 0;
     }
 
     private void checkIntSize(String typeName) {
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
+++ /dev/null
@@ -1,116 +0,0 @@
-/*
- *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- *  This code is free software; you can redistribute it and/or modify it
- *  under the terms of the GNU General Public License version 2 only, as
- *  published by the Free Software Foundation.  Oracle designates this
- *  particular file as subject to the "Classpath" exception as provided
- *  by Oracle in the LICENSE file that accompanied this code.
- *
- *  This code is distributed in the hope that it will be useful, but WITHOUT
- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- *  version 2 for more details (a copy is included in the LICENSE file that
- *  accompanied this code).
- *
- *  You should have received a copy of the GNU General Public License version
- *  2 along with this work; if not, write to the Free Software Foundation,
- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- *  or visit www.oracle.com if you need additional information or have any
- *  questions.
- *
- */
-package jdk.internal.foreign;
-
-import jdk.incubator.foreign.Foreign;
-import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.MemorySegment;
-import jdk.incubator.foreign.SystemABI;
-import jdk.internal.foreign.abi.aarch64.AArch64ABI;
-import jdk.internal.foreign.abi.x64.sysv.SysVx64ABI;
-import jdk.internal.foreign.abi.x64.windows.Windowsx64ABI;
-import sun.security.action.GetPropertyAction;
-
-public class InternalForeign implements Foreign {
-
-    private static final String foreignAccess
-            = GetPropertyAction.privilegedGetProperty("jdk.incubator.foreign.Foreign", "deny");
-    private static final InternalForeign INSTANCE = new InternalForeign();
-
-    private InternalForeign() {}
-
-    public static InternalForeign getInstance() {
-        checkRestrictedAccess();
-        return getInstancePrivileged();
-    }
-
-    public static InternalForeign getInstancePrivileged() {
-        return INSTANCE;
-    }
-
-    @Override
-    public MemoryAddress withSize(MemoryAddress base, long byteSize) throws IllegalAccessError {
-        checkRawNativeAddress(base);
-        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(base.toRawLongValue(), byteSize, null, false)
-                .baseAddress();
-    }
-
-    @Override
-    public MemorySegment asMallocSegment(MemoryAddress base, long byteSize) throws IllegalAccessError {
-        checkRawNativeAddress(base);
-        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(base.toRawLongValue(), byteSize, Thread.currentThread(), true);
-    }
-
-    private void checkRawNativeAddress(MemoryAddress base) {
-        if (base.segment() != null) {
-            throw new IllegalArgumentException("Not an unchecked memory address");
-        }
-    }
-
-    @Override
-    public MemorySegment asUnconfined(MemorySegment segment) {
-        return ((NativeMemorySegmentImpl)segment).asUnconfined();
-    }
-
-    @Override
-    public SystemABI getSystemABI() {
-        String arch = System.getProperty("os.arch");
-        String os = System.getProperty("os.name");
-        if (arch.equals("amd64") || arch.equals("x86_64")) {
-            if (os.startsWith("Windows")) {
-                return Windowsx64ABI.getInstance();
-            } else {
-                return SysVx64ABI.getInstance();
-            }
-        } else if (arch.equals("aarch64")) {
-            return AArch64ABI.getInstance();
-        }
-        throw new UnsupportedOperationException("Unsupported os or arch: " + os + ", " + arch);
-    }
-
-    private static void checkRestrictedAccess() {
-        switch (foreignAccess) {
-            case "deny" -> throwIllegalAccessError(foreignAccess);
-            case "warn" -> System.err.println("WARNING: Accessing jdk.incubator.foreign.Foreign.");
-            case "debug" -> {
-                StringBuilder sb = new StringBuilder("DEBUG: Accessing jdk.incubator.foreign.Foreign.");
-                StackWalker.getInstance().walk(s -> {
-                     s
-                     .forEach(f -> sb.append(System.lineSeparator()).append("\tat ").append(f));
-                    return null;
-                });
-                System.out.println(sb.toString());
-            }
-            case "permit" -> {}
-            default -> throwIllegalAccessError(foreignAccess);
-        }
-    }
-
-    private static void throwIllegalAccessError(String value) {
-        throw new IllegalAccessError("Can not access jdk.incubator.foreign.Foreign." +
-                " System property 'jdk.incubator.foreign.Foreign' is set to '" + value + "'");
-    }
-}
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
@@ -38,11 +38,10 @@
  * about the segment this address is associated with, as well as an offset into such segment.
  */
 public final class MemoryAddressImpl implements MemoryAddress, MemoryAddressProxy {
 
     private static final Unsafe UNSAFE = Unsafe.getUnsafe();
-    private static final InternalForeign foreign = InternalForeign.getInstancePrivileged();
 
     private final AbstractMemorySegmentImpl segment;
     private final long offset;
 
     public MemoryAddressImpl(long offset) {
@@ -149,8 +148,9 @@
     public static MemoryAddress ofLongUnchecked(long value) {
         return ofLongUnchecked(value, Long.MAX_VALUE);
     }
 
     public static MemoryAddress ofLongUnchecked(long value, long byteSize) {
-        return foreign.withSize(MemoryAddress.ofLong(value), byteSize);
+        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(
+                MemoryAddress.ofLong(value), byteSize, null, null, null).baseAddress();
     }
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
@@ -24,10 +24,11 @@
  *
  */
 
 package jdk.internal.foreign;
 
+import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.internal.access.JavaNioAccess;
 import jdk.internal.access.SharedSecrets;
 import jdk.internal.misc.Unsafe;
 import jdk.internal.vm.annotation.ForceInline;
@@ -100,14 +101,10 @@
             segment = segment.asSlice(delta, bytesSize);
         }
         return segment;
     }
 
-    public static MemorySegment makeNativeSegmentUnchecked(long min, long bytesSize, Thread owner, boolean allowClose) {
-        MemoryScope scope = new MemoryScope(null, allowClose ? () -> unsafe.freeMemory(min) : null);
-        int mask = defaultAccessModes(bytesSize);
-        if (!allowClose) {
-            mask &= ~MemorySegment.CLOSE;
-        }
-        return new NativeMemorySegmentImpl(min, bytesSize, mask, owner, scope);
+    public static MemorySegment makeNativeSegmentUnchecked(MemoryAddress min, long bytesSize, Thread owner, Runnable cleanup, Object attachment) {
+        MemoryScope scope = new MemoryScope(attachment, cleanup);
+        return new NativeMemorySegmentImpl(min.toRawLongValue(), bytesSize, defaultAccessModes(bytesSize), owner, scope);
     }
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
@@ -25,37 +25,29 @@
  */
 
 package jdk.internal.foreign;
 
 import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.MemorySegment;
-import jdk.internal.access.JavaNioAccess;
-import jdk.internal.access.SharedSecrets;
+import jdk.incubator.foreign.MemoryHandles;
 import jdk.internal.access.foreign.MemoryAddressProxy;
-import jdk.internal.access.foreign.UnmapperProxy;
-import jdk.internal.misc.Unsafe;
-import sun.nio.ch.FileChannelImpl;
-import sun.security.action.GetBooleanAction;
+import jdk.internal.misc.VM;
 
-import java.io.IOException;
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
-import java.lang.reflect.Method;
-import java.nio.ByteBuffer;
-import java.nio.channels.FileChannel;
-import java.nio.file.OpenOption;
-import java.nio.file.Path;
-import java.nio.file.StandardOpenOption;
+import java.util.Optional;
 import java.util.function.Supplier;
 
 /**
  * This class contains misc helper functions to support creation of memory segments.
  */
 public final class Utils {
 
+    private static final String foreignRestrictedAccess = Optional.ofNullable(VM.getSavedProperty("foreign.restricted"))
+            .orElse("deny");
+
     private static final MethodHandle ADDRESS_FILTER;
 
     static {
         try {
             ADDRESS_FILTER = MethodHandles.lookup().findStatic(Utils.class, "filterAddress",
@@ -78,12 +70,33 @@
     }
 
     public static VarHandle fixUpVarHandle(VarHandle handle) {
         // This adaptation is required, otherwise the memory access var handle will have type MemoryAddressProxy,
         // and not MemoryAddress (which the user expects), which causes performance issues with asType() adaptations.
-        return MethodHandles.filterCoordinates(handle, 0, ADDRESS_FILTER);
+        return MemoryHandles.filterCoordinates(handle, 0, ADDRESS_FILTER);
     }
 
     private static MemoryAddressProxy filterAddress(MemoryAddress addr) {
         return (MemoryAddressImpl)addr;
     }
+
+    public static void checkRestrictedAccess(String method) {
+        switch (foreignRestrictedAccess) {
+            case "deny" -> throwIllegalAccessError(foreignRestrictedAccess, method);
+            case "warn" -> System.err.println("WARNING: Accessing restricted foreign method: " + method);
+            case "debug" -> {
+                StringBuilder sb = new StringBuilder("DEBUG: restricted foreign method: \" + method");
+                StackWalker.getInstance().forEach(f -> sb.append(System.lineSeparator())
+                        .append("\tat ")
+                        .append(f));
+                System.err.println(sb.toString());
+            }
+            case "permit" -> {}
+            default -> throwIllegalAccessError(foreignRestrictedAccess, method);
+        }
+    }
+
+    private static void throwIllegalAccessError(String value, String method) {
+        throw new IllegalAccessError("Illegal access to restricted foreign method: " + method +
+                " ; system property 'foreign.restricted' is set to '" + value + "'");
+    }
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/BindingInterpreter.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/BindingInterpreter.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/BindingInterpreter.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/BindingInterpreter.java
@@ -23,11 +23,10 @@
 package jdk.internal.foreign.abi;
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemorySegment;
-import jdk.internal.foreign.InternalForeign;
 import jdk.internal.foreign.MemoryAddressImpl;
 import jdk.internal.foreign.Utils;
 
 import java.lang.invoke.VarHandle;
 import java.nio.ByteOrder;
@@ -43,12 +42,10 @@
     private static final VarHandle VH_INT = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());
     private static final VarHandle VH_LONG = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());
     private static final VarHandle VH_FLOAT = MemoryHandles.varHandle(float.class, ByteOrder.nativeOrder());
     private static final VarHandle VH_DOUBLE = MemoryHandles.varHandle(double.class, ByteOrder.nativeOrder());
 
-    private static InternalForeign foreign = InternalForeign.getInstancePrivileged();
-
     static void unbox(Object arg, List<Binding> bindings, Function<VMStorage,
             MemoryAddress> ptrFunction, List<? super MemorySegment> buffers) {
         Deque<Object> stack = new ArrayDeque<>();
         stack.push(arg);
         for (Binding b : bindings) {
@@ -105,11 +102,11 @@
                     write(writeAddress, binding.type(), value);
                 }
                 case COPY_BUFFER -> {
                     Binding.Copy binding = (Binding.Copy) b;
                     MemoryAddress operand = (MemoryAddress) stack.pop();
-                    operand = foreign.withSize(operand, binding.size());
+                    operand = MemoryAddressImpl.ofLongUnchecked(operand.toRawLongValue(), binding.size());
                     MemorySegment copy = MemorySegment.allocateNative(binding.size(), binding.alignment());
                     MemoryAddress.copy(operand, copy.baseAddress(), binding.size());
                     stack.push(copy); // leaked
                 }
                 case ALLOC_BUFFER -> {
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableUpcallHandler.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableUpcallHandler.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableUpcallHandler.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableUpcallHandler.java
@@ -23,11 +23,10 @@
 
 package jdk.internal.foreign.abi;
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
-import jdk.internal.foreign.InternalForeign;
 import jdk.internal.foreign.MemoryAddressImpl;
 import jdk.internal.foreign.Utils;
 import jdk.internal.vm.annotation.Stable;
 
 import java.lang.invoke.MethodHandle;
@@ -50,12 +49,10 @@
     private static final boolean DEBUG =
         privilegedGetProperty("jdk.internal.foreign.ProgrammableUpcallHandler.DEBUG");
 
     private static final VarHandle VH_LONG = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());
 
-    private static InternalForeign foreign = InternalForeign.getInstancePrivileged();
-
     @Stable
     private final MethodHandle mh;
     private final MethodType type;
     private final CallingSequence callingSequence;
     private final long entryPoint;
@@ -86,11 +83,11 @@
             if (DEBUG) {
                 System.err.println("Buffer state before:");
                 layout.dump(abi.arch, buffer, System.err);
             }
 
-            MemoryAddress bufferBase = foreign.withSize(buffer, layout.size);
+            MemoryAddress bufferBase = MemoryAddressImpl.ofLongUnchecked(buffer.toRawLongValue(), layout.size);
             MemoryAddress stackArgsBase = MemoryAddressImpl.ofLongUnchecked((long)VH_LONG.get(buffer.rebase(bufferBase.segment()).addOffset(layout.stack_args)));
             Object[] args = new Object[type.parameterCount()];
             for (int i = 0 ; i < type.parameterCount() ; i++) {
                 args[i] = jdk.internal.foreign.abi.BindingInterpreter.box(callingSequence.argumentBindings(i),
                         s -> abi.arch.isStackType(s.type())
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
@@ -25,17 +25,21 @@
 package jdk.internal.foreign.abi;
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
-import jdk.internal.foreign.InternalForeign;
+import jdk.incubator.foreign.SystemABI;
+import jdk.internal.foreign.MemoryAddressImpl;
 import jdk.internal.foreign.Utils;
 
 import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.SequenceLayout;
 import jdk.incubator.foreign.ValueLayout;
+import jdk.internal.foreign.abi.aarch64.AArch64ABI;
+import jdk.internal.foreign.abi.x64.sysv.SysVx64ABI;
+import jdk.internal.foreign.abi.x64.windows.Windowsx64ABI;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.util.stream.IntStream;
@@ -50,12 +54,10 @@
 
     private static final MethodHandle MH_ALLOC_BUFFER;
     private static final MethodHandle MH_BASEADDRESS;
     private static final MethodHandle MH_BUFFER_COPY;
 
-    private static InternalForeign foreign = InternalForeign.getInstancePrivileged();
-
     static {
         try {
             var lookup = MethodHandles.lookup();
             MH_ALLOC_BUFFER = lookup.findStatic(MemorySegment.class, "allocateNative",
                     methodType(MemorySegment.class, MemoryLayout.class));
@@ -171,11 +173,13 @@
 
         return target;
     }
 
     private static MemoryAddress bufferCopy(MemoryAddress dest, MemorySegment buffer) {
-        MemoryAddress.copy(buffer.baseAddress(), foreign.withSize(dest, buffer.byteSize()), buffer.byteSize());
+        MemoryAddress.copy(buffer.baseAddress(),
+                MemoryAddressImpl.ofLongUnchecked(dest.toRawLongValue(), buffer.byteSize()),
+                buffer.byteSize());
         return dest;
     }
 
     public static void checkFunctionTypes(MethodType mt, FunctionDescriptor cDesc) {
         if (mt.parameterCount() != cDesc.argumentLayouts().size())
@@ -195,6 +199,21 @@
             return long.class;
         }
 
         throw new IllegalArgumentException("Size too large: " + size);
     }
+
+    public static SystemABI getSystemABI() {
+        String arch = System.getProperty("os.arch");
+        String os = System.getProperty("os.name");
+        if (arch.equals("amd64") || arch.equals("x86_64")) {
+            if (os.startsWith("Windows")) {
+                return Windowsx64ABI.getInstance();
+            } else {
+                return SysVx64ABI.getInstance();
+            }
+        } else if (arch.equals("aarch64")) {
+            return AArch64ABI.getInstance();
+        }
+        throw new UnsupportedOperationException("Unsupported os or arch: " + os + ", " + arch);
+    }
 }
diff a/test/jdk/java/foreign/Cstring.java b/test/jdk/java/foreign/Cstring.java
--- a/test/jdk/java/foreign/Cstring.java
+++ b/test/jdk/java/foreign/Cstring.java
@@ -22,23 +22,20 @@
  */
 
 import java.lang.invoke.VarHandle;
 import java.nio.charset.Charset;
 import jdk.incubator.foreign.NativeAllocationScope;
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import static jdk.incubator.foreign.MemoryLayouts.C_CHAR;
 
 public final class Cstring {
     // don't create!
     private Cstring() {
     }
 
-    private static final Foreign foreign = Foreign.getInstance();
-
     private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
         return MemoryLayout.ofSequence(elemLayout)
                 .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
     }
     private final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);
@@ -88,13 +85,14 @@
         return toCString(str.getBytes(charset), scope);
     }
 
     public static String toJavaString(MemoryAddress addr) {
         StringBuilder buf = new StringBuilder();
-        MemoryAddress sizedAddr = addr.segment() == null ?
-                foreign.withSize(addr, Long.MAX_VALUE) :
-                addr;
+        MemoryAddress sizedAddr = addr.segment() != null ?
+                addr :
+                MemorySegment.ofNativeRestricted(addr, Long.MAX_VALUE, Thread.currentThread(),
+                        null, null).baseAddress();
         byte curr = (byte) byteArrHandle.get(sizedAddr, 0);
         long offset = 0;
         while (curr != 0) {
             buf.append((char) curr);
             curr = (byte) byteArrHandle.get(sizedAddr, ++offset);
diff a/test/jdk/java/foreign/NativeTestHelper.java b/test/jdk/java/foreign/NativeTestHelper.java
--- a/test/jdk/java/foreign/NativeTestHelper.java
+++ b/test/jdk/java/foreign/NativeTestHelper.java
@@ -20,11 +20,10 @@
  *  or visit www.oracle.com if you need additional information or have any
  *  questions.
  *
  */
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts.WinABI;
 import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.SystemABI.Type;
 import jdk.incubator.foreign.ValueLayout;
@@ -33,11 +32,11 @@
 
 import static jdk.incubator.foreign.SystemABI.ABI_WINDOWS;
 
 public class NativeTestHelper {
 
-    public static final SystemABI ABI = Foreign.getInstance().getSystemABI();
+    public static final SystemABI ABI = SystemABI.getSystemABI();
 
     public static boolean isIntegral(MemoryLayout layout) {
         return switch(SystemABI.Type.fromLayout(layout)) {
             case BOOL, UNSIGNED_CHAR, SIGNED_CHAR, CHAR, SHORT, UNSIGNED_SHORT,
                 INT, UNSIGNED_INT, LONG, UNSIGNED_LONG, LONG_LONG, UNSIGNED_LONG_LONG -> true;
diff a/test/jdk/java/foreign/StdLibTest.java b/test/jdk/java/foreign/StdLibTest.java
--- a/test/jdk/java/foreign/StdLibTest.java
+++ b/test/jdk/java/foreign/StdLibTest.java
@@ -26,11 +26,11 @@
   * @modules jdk.incubator.foreign/jdk.incubator.foreign.unsafe
  *          jdk.incubator.foreign/jdk.internal.foreign
  *          jdk.incubator.foreign/jdk.internal.foreign.abi
  *          java.base/sun.security.action
  * @build NativeTestHelper StdLibTest
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit StdLibTest
+ * @run testng/othervm -Dforeign.restricted=permit StdLibTest
  */
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
@@ -49,11 +49,10 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import java.util.stream.LongStream;
 import java.util.stream.Stream;
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayout;
@@ -66,12 +65,11 @@
 import static org.testng.Assert.*;
 
 @Test
 public class StdLibTest extends NativeTestHelper {
 
-    final static Foreign FOREIGN = Foreign.getInstance();
-    final static SystemABI abi = FOREIGN.getSystemABI();
+    final static SystemABI abi = SystemABI.getSystemABI();
 
     final static VarHandle byteHandle = MemoryHandles.varHandle(byte.class, ByteOrder.nativeOrder());
     final static VarHandle intHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());
     final static VarHandle longHandle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());
     final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);
@@ -259,16 +257,17 @@
         }
 
         static class Tm {
 
             //Tm pointer should never be freed directly, as it points to shared memory
-            private MemoryAddress base;
+            private final MemoryAddress base;
 
             static final long SIZE = 56;
 
             Tm(MemoryAddress base) {
-                this.base = FOREIGN.withSize(base, SIZE);
+                this.base = MemorySegment.ofNativeRestricted(base, SIZE, Thread.currentThread(),
+                        null, null).baseAddress();
             }
 
             int sec() {
                 return (int)intHandle.get(base);
             }
diff a/test/jdk/java/foreign/TestAdaptVarHandles.java b/test/jdk/java/foreign/TestAdaptVarHandles.java
--- a/test/jdk/java/foreign/TestAdaptVarHandles.java
+++ b/test/jdk/java/foreign/TestAdaptVarHandles.java
@@ -31,11 +31,10 @@
  * @run testng/othervm -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true -Xverify:all TestAdaptVarHandles
  */
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
-import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.ValueLayout;
 import org.testng.annotations.*;
 import static org.testng.Assert.*;
@@ -43,11 +42,10 @@
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
 import java.util.List;
-import java.util.function.Function;
 
 public class TestAdaptVarHandles {
 
     static MethodHandle S2I;
     static MethodHandle I2S;
@@ -84,11 +82,11 @@
     @Test
     public void testFilterValue() throws Throwable {
         ValueLayout layout = MemoryLayouts.JAVA_INT;
         MemorySegment segment = MemorySegment.allocateNative(layout);
         VarHandle intHandle = layout.varHandle(int.class);
-        VarHandle i2SHandle = MethodHandles.filterValue(intHandle, S2I, I2S);
+        VarHandle i2SHandle = MemoryHandles.filterValue(intHandle, S2I, I2S);
         i2SHandle.set(segment.baseAddress(), "1");
         String oldValue = (String)i2SHandle.getAndAdd(segment.baseAddress(), "42");
         assertEquals(oldValue, "1");
         String value = (String)i2SHandle.get(segment.baseAddress());
         assertEquals(value, "43");
@@ -100,73 +98,73 @@
         assertEquals(value, "42");
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadFilterNullTarget() {
-        MethodHandles.filterValue(null, S2I, I2S);
+        MemoryHandles.filterValue(null, S2I, I2S);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadFilterNullUnbox() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.filterValue(intHandle, null, I2S);
+        MemoryHandles.filterValue(intHandle, null, I2S);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadFilterNullBox() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.filterValue(intHandle, S2I, null);
+        MemoryHandles.filterValue(intHandle, S2I, null);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadFilterCarrier() {
         VarHandle floatHandle = MemoryLayouts.JAVA_FLOAT.varHandle(float.class);
-        MethodHandles.filterValue(floatHandle, S2I, I2S);
+        MemoryHandles.filterValue(floatHandle, S2I, I2S);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadFilterUnboxArity() {
         VarHandle floatHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.filterValue(floatHandle, S2I.bindTo(""), I2S);
+        MemoryHandles.filterValue(floatHandle, S2I.bindTo(""), I2S);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadFilterBoxArity() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.filterValue(intHandle, S2I, I2S.bindTo(42));
+        MemoryHandles.filterValue(intHandle, S2I, I2S.bindTo(42));
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadFilterBoxException() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.filterValue(intHandle, I2S, S2L_EX);
+        MemoryHandles.filterValue(intHandle, I2S, S2L_EX);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadFilterUnboxException() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.filterValue(intHandle, S2L_EX, I2S);
+        MemoryHandles.filterValue(intHandle, S2L_EX, I2S);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadFilterBoxHandleException() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.filterValue(intHandle, S2I, I2S_EX);
+        MemoryHandles.filterValue(intHandle, S2I, I2S_EX);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadFilterUnboxHandleException() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.filterValue(intHandle, S2I_EX, I2S);
+        MemoryHandles.filterValue(intHandle, S2I_EX, I2S);
     }
 
     @Test
     public void testFilterCoordinates() throws Throwable {
         ValueLayout layout = MemoryLayouts.JAVA_INT;
         MemorySegment segment = MemorySegment.allocateNative(layout);
         VarHandle intHandle = MemoryHandles.withStride(layout.varHandle(int.class), 4);
-        VarHandle intHandle_longIndex = MethodHandles.filterCoordinates(intHandle, 0, BASE_ADDR, S2L);
+        VarHandle intHandle_longIndex = MemoryHandles.filterCoordinates(intHandle, 0, BASE_ADDR, S2L);
         intHandle_longIndex.set(segment, "0", 1);
         int oldValue = (int)intHandle_longIndex.getAndAdd(segment, "0", 42);
         assertEquals(oldValue, 1);
         int value = (int)intHandle_longIndex.get(segment, "0");
         assertEquals(value, 43);
@@ -178,55 +176,55 @@
         assertEquals(value, 42);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadFilterCoordinatesNullTarget() {
-        MethodHandles.filterCoordinates(null, 0, S2I);
+        MemoryHandles.filterCoordinates(null, 0, S2I);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadFilterCoordinatesNullFilters() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.filterCoordinates(intHandle, 0, null);
+        MemoryHandles.filterCoordinates(intHandle, 0, null);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadFilterCoordinatesNegativePos() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.filterCoordinates(intHandle, -1, SUM_OFFSETS);
+        MemoryHandles.filterCoordinates(intHandle, -1, SUM_OFFSETS);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadFilterCoordinatesPosTooBig() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.filterCoordinates(intHandle, 1, SUM_OFFSETS);
+        MemoryHandles.filterCoordinates(intHandle, 1, SUM_OFFSETS);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadFilterCoordinatesWrongFilterType() {
         VarHandle intHandle = MemoryHandles.withStride(MemoryLayouts.JAVA_INT.varHandle(int.class), 4);
-        MethodHandles.filterCoordinates(intHandle, 1, S2I);
+        MemoryHandles.filterCoordinates(intHandle, 1, S2I);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadFilterCoordinatesWrongFilterException() {
         VarHandle intHandle = MemoryHandles.withStride(MemoryLayouts.JAVA_INT.varHandle(int.class), 4);
-        MethodHandles.filterCoordinates(intHandle, 1, S2L_EX);
+        MemoryHandles.filterCoordinates(intHandle, 1, S2L_EX);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadFilterCoordinatesTooManyFilters() {
         VarHandle intHandle = MemoryHandles.withStride(MemoryLayouts.JAVA_INT.varHandle(int.class), 4);
-        MethodHandles.filterCoordinates(intHandle, 1, S2L, S2L);
+        MemoryHandles.filterCoordinates(intHandle, 1, S2L, S2L);
     }
 
     @Test
     public void testInsertCoordinates() throws Throwable {
         ValueLayout layout = MemoryLayouts.JAVA_INT;
         MemorySegment segment = MemorySegment.allocateNative(layout);
         VarHandle intHandle = MemoryHandles.withStride(layout.varHandle(int.class), 4);
-        VarHandle intHandle_longIndex = MethodHandles.insertCoordinates(intHandle, 0, segment.baseAddress(), 0L);
+        VarHandle intHandle_longIndex = MemoryHandles.insertCoordinates(intHandle, 0, segment.baseAddress(), 0L);
         intHandle_longIndex.set(1);
         int oldValue = (int)intHandle_longIndex.getAndAdd(42);
         assertEquals(oldValue, 1);
         int value = (int)intHandle_longIndex.get();
         assertEquals(value, 43);
@@ -238,49 +236,49 @@
         assertEquals(value, 42);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadInsertCoordinatesNullTarget() {
-        MethodHandles.insertCoordinates(null, 0, 42);
+        MemoryHandles.insertCoordinates(null, 0, 42);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadInsertCoordinatesNullValues() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.insertCoordinates(intHandle, 0, null);
+        MemoryHandles.insertCoordinates(intHandle, 0, null);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadInsertCoordinatesNegativePos() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.insertCoordinates(intHandle, -1, 42);
+        MemoryHandles.insertCoordinates(intHandle, -1, 42);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadInsertCoordinatesPosTooBig() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.insertCoordinates(intHandle, 1, 42);
+        MemoryHandles.insertCoordinates(intHandle, 1, 42);
     }
 
     @Test(expectedExceptions = ClassCastException.class)
     public void testBadInsertCoordinatesWrongCoordinateType() {
         VarHandle intHandle = MemoryHandles.withStride(MemoryLayouts.JAVA_INT.varHandle(int.class), 4);
-        MethodHandles.insertCoordinates(intHandle, 1, "Hello");
+        MemoryHandles.insertCoordinates(intHandle, 1, "Hello");
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadInsertCoordinatesTooManyValues() {
         VarHandle intHandle = MemoryHandles.withStride(MemoryLayouts.JAVA_INT.varHandle(int.class), 4);
-        MethodHandles.insertCoordinates(intHandle, 1, 0L, 0L);
+        MemoryHandles.insertCoordinates(intHandle, 1, 0L, 0L);
     }
 
     @Test
     public void testPermuteCoordinates() throws Throwable {
         ValueLayout layout = MemoryLayouts.JAVA_INT;
         MemorySegment segment = MemorySegment.allocateNative(layout);
         VarHandle intHandle = MemoryHandles.withStride(layout.varHandle(int.class), 4);
-        VarHandle intHandle_swap = MethodHandles.permuteCoordinates(intHandle,
+        VarHandle intHandle_swap = MemoryHandles.permuteCoordinates(intHandle,
                 List.of(long.class, MemoryAddress.class), 1, 0);
         intHandle_swap.set(0L, segment.baseAddress(), 1);
         int oldValue = (int)intHandle_swap.getAndAdd(0L, segment.baseAddress(), 42);
         assertEquals(oldValue, 1);
         int value = (int)intHandle_swap.get(0L, segment.baseAddress());
@@ -293,55 +291,55 @@
         assertEquals(value, 42);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadPermuteCoordinatesNullTarget() {
-        MethodHandles.permuteCoordinates(null, List.of());
+        MemoryHandles.permuteCoordinates(null, List.of());
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadPermuteCoordinatesNullCoordinates() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.permuteCoordinates(intHandle, null);
+        MemoryHandles.permuteCoordinates(intHandle, null);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadPermuteCoordinatesNullReorder() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.permuteCoordinates(intHandle, List.of(int.class), null);
+        MemoryHandles.permuteCoordinates(intHandle, List.of(int.class), null);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadPermuteCoordinatesTooManyCoordinates() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.permuteCoordinates(intHandle, List.of(int.class, int.class), new int[2]);
+        MemoryHandles.permuteCoordinates(intHandle, List.of(int.class, int.class), new int[2]);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadPermuteCoordinatesTooFewCoordinates() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.permuteCoordinates(intHandle, List.of());
+        MemoryHandles.permuteCoordinates(intHandle, List.of());
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadPermuteCoordinatesIndexTooBig() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.permuteCoordinates(intHandle, List.of(int.class, int.class), 3);
+        MemoryHandles.permuteCoordinates(intHandle, List.of(int.class, int.class), 3);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadPermuteCoordinatesIndexTooSmall() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.permuteCoordinates(intHandle, List.of(int.class, int.class), -1);
+        MemoryHandles.permuteCoordinates(intHandle, List.of(int.class, int.class), -1);
     }
 
     @Test
     public void testCollectCoordinates() throws Throwable {
         ValueLayout layout = MemoryLayouts.JAVA_INT;
         MemorySegment segment = MemorySegment.allocateNative(layout);
         VarHandle intHandle = MemoryHandles.withStride(layout.varHandle(int.class), 4);
-        VarHandle intHandle_sum = MethodHandles.collectCoordinates(intHandle, 1, SUM_OFFSETS);
+        VarHandle intHandle_sum = MemoryHandles.collectCoordinates(intHandle, 1, SUM_OFFSETS);
         intHandle_sum.set(segment.baseAddress(), -2L, 2L, 1);
         int oldValue = (int)intHandle_sum.getAndAdd(segment.baseAddress(), -2L, 2L, 42);
         assertEquals(oldValue, 1);
         int value = (int)intHandle_sum.get(segment.baseAddress(), -2L, 2L);
         assertEquals(value, 43);
@@ -353,55 +351,55 @@
         assertEquals(value, 42);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadCollectCoordinatesNullTarget() {
-        MethodHandles.collectCoordinates(null, 0, SUM_OFFSETS);
+        MemoryHandles.collectCoordinates(null, 0, SUM_OFFSETS);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadCollectCoordinatesNullFilters() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.collectCoordinates(intHandle, 0, null);
+        MemoryHandles.collectCoordinates(intHandle, 0, null);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadCollectCoordinatesNegativePos() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.collectCoordinates(intHandle, -1, SUM_OFFSETS);
+        MemoryHandles.collectCoordinates(intHandle, -1, SUM_OFFSETS);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadCollectCoordinatesPosTooBig() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.collectCoordinates(intHandle, 1, SUM_OFFSETS);
+        MemoryHandles.collectCoordinates(intHandle, 1, SUM_OFFSETS);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadCollectCoordinatesWrongFilterType() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.collectCoordinates(intHandle, 0, SUM_OFFSETS);
+        MemoryHandles.collectCoordinates(intHandle, 0, SUM_OFFSETS);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadCollectCoordinatesWrongVoidFilterType() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.collectCoordinates(intHandle, 0, VOID_FILTER);
+        MemoryHandles.collectCoordinates(intHandle, 0, VOID_FILTER);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadCollectCoordinatesWrongFilterException() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.collectCoordinates(intHandle, 0, S2L_EX);
+        MemoryHandles.collectCoordinates(intHandle, 0, S2L_EX);
     }
 
     @Test
     public void testDropCoordinates() throws Throwable {
         ValueLayout layout = MemoryLayouts.JAVA_INT;
         MemorySegment segment = MemorySegment.allocateNative(layout);
         VarHandle intHandle = MemoryHandles.withStride(layout.varHandle(int.class), 4);
-        VarHandle intHandle_dummy = MethodHandles.dropCoordinates(intHandle, 1, float.class, String.class);
+        VarHandle intHandle_dummy = MemoryHandles.dropCoordinates(intHandle, 1, float.class, String.class);
         intHandle_dummy.set(segment.baseAddress(), 1f, "hello", 0L, 1);
         int oldValue = (int)intHandle_dummy.getAndAdd(segment.baseAddress(), 1f, "hello", 0L, 42);
         assertEquals(oldValue, 1);
         int value = (int)intHandle_dummy.get(segment.baseAddress(), 1f, "hello", 0L);
         assertEquals(value, 43);
@@ -414,28 +412,28 @@
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadDropCoordinatesNegativePos() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.dropCoordinates(intHandle, -1);
+        MemoryHandles.dropCoordinates(intHandle, -1);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadDropCoordinatesPosTooBig() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.dropCoordinates(intHandle, 2);
+        MemoryHandles.dropCoordinates(intHandle, 2);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadDropCoordinatesNullValueTypes() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
-        MethodHandles.dropCoordinates(intHandle, 1, null);
+        MemoryHandles.dropCoordinates(intHandle, 1, null);
     }
 
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadDropCoordinatesNullTarget() {
-        MethodHandles.dropCoordinates(null, 1);
+        MemoryHandles.dropCoordinates(null, 1);
     }
 
     //helper methods
 
     static int stringToInt(String s) {
diff a/test/jdk/java/foreign/TestAddressHandle.java b/test/jdk/java/foreign/TestAddressHandle.java
--- a/test/jdk/java/foreign/TestAddressHandle.java
+++ b/test/jdk/java/foreign/TestAddressHandle.java
@@ -101,18 +101,18 @@
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadAdaptBoolean() {
         VarHandle intHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());
-        VarHandle boolHandle = MethodHandles.filterValue(intHandle, BOOL_TO_INT, INT_TO_BOOL);
+        VarHandle boolHandle = MemoryHandles.filterValue(intHandle, BOOL_TO_INT, INT_TO_BOOL);
         MemoryHandles.asAddressVarHandle(boolHandle);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadAdaptString() {
         VarHandle intHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());
-        VarHandle stringHandle = MethodHandles.filterValue(intHandle, STRING_TO_INT, INT_TO_STRING);
+        VarHandle stringHandle = MemoryHandles.filterValue(intHandle, STRING_TO_INT, INT_TO_STRING);
         MemoryHandles.asAddressVarHandle(stringHandle);
     }
 
     @DataProvider(name = "addressHandles")
     static Object[][] addressHandles() {
diff a/test/jdk/java/foreign/TestDowncall.java b/test/jdk/java/foreign/TestDowncall.java
--- a/test/jdk/java/foreign/TestDowncall.java
+++ b/test/jdk/java/foreign/TestDowncall.java
@@ -28,14 +28,13 @@
  *          jdk.incubator.foreign/jdk.internal.foreign
  *          jdk.incubator.foreign/jdk.internal.foreign.abi
  *          java.base/sun.security.action
  * @build NativeTestHelper CallGeneratorHelper TestDowncall
  *
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit TestDowncall
+ * @run testng/othervm -Dforeign.restricted=permit TestDowncall
  */
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.SystemABI;
@@ -51,11 +50,11 @@
 import static org.testng.Assert.*;
 
 public class TestDowncall extends CallGeneratorHelper {
 
     static LibraryLookup lib = LibraryLookup.ofLibrary(MethodHandles.lookup(), "TestDowncall");
-    static SystemABI abi = Foreign.getInstance().getSystemABI();
+    static SystemABI abi = SystemABI.getSystemABI();
 
 
     @Test(dataProvider="functions", dataProviderClass=CallGeneratorHelper.class)
     public void testDowncall(String fName, Ret ret, List<ParamType> paramTypes, List<StructFieldType> fields) throws Throwable {
         List<Consumer<Object>> checks = new ArrayList<>();
diff a/test/jdk/java/foreign/TestNative.java b/test/jdk/java/foreign/TestNative.java
--- a/test/jdk/java/foreign/TestNative.java
+++ b/test/jdk/java/foreign/TestNative.java
@@ -24,21 +24,19 @@
 
 /*
  * @test
  * @modules java.base/jdk.internal.misc
  *          jdk.incubator.foreign/jdk.internal.foreign
- * @run testng TestNative
+ * @run testng/othervm -Dforeign.restricted=permit TestNative
  */
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayout.PathElement;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
-import jdk.internal.foreign.InternalForeign;
 import jdk.internal.misc.Unsafe;
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 
 import java.lang.invoke.VarHandle;
@@ -171,40 +169,31 @@
             assertEquals(buf.capacity(), expected);
             assertEquals(getCapacity(buf), expected);
         }
     }
 
-    @Test
-    public void testResize() {
-        MemoryAddress addr = MemoryAddress.ofLong(42);
-        assertNull(addr.segment());
-        MemoryAddress sized = InternalForeign.getInstancePrivileged().withSize(addr, 12);
-        assertEquals(sized.segment().byteSize(), 12);
-    }
-
     @Test
     public void testMallocSegment() {
         MemoryAddress addr = MemoryAddress.ofLong(allocate(12));
         assertNull(addr.segment());
-        MemorySegment mallocSegment = InternalForeign.getInstancePrivileged().asMallocSegment(addr, 12);
+        MemorySegment mallocSegment = MemorySegment.ofNativeRestricted(addr, 12, null,
+                () -> UNSAFE.freeMemory(addr.toRawLongValue()), null);
         assertEquals(mallocSegment.byteSize(), 12);
         mallocSegment.close(); //free here
         assertTrue(!mallocSegment.isAlive());
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadResize() {
         try (MemorySegment segment = MemorySegment.allocateNative(4)) {
-            InternalForeign.getInstancePrivileged().withSize(segment.baseAddress(), 12);
+            MemorySegment.ofNativeRestricted(segment.baseAddress(), 0, null, null, null);
         }
     }
 
-    @Test(expectedExceptions = IllegalArgumentException.class)
-    public void testBadMallocSegment() {
-        try (MemorySegment segment = MemorySegment.allocateNative(4)) {
-            InternalForeign.getInstancePrivileged().asMallocSegment(segment.baseAddress(), 12);
-        }
+    @Test(expectedExceptions = NullPointerException.class)
+    public void testNullUnsafeSegment() {
+        MemorySegment.ofNativeRestricted(null, 10, null, null, null);
     }
 
     static {
         System.loadLibrary("NativeAccess");
     }
diff a/test/jdk/java/foreign/TestNoForeignUnsafeOverride.java b/test/jdk/java/foreign/TestNoForeignUnsafeOverride.java
--- /dev/null
+++ b/test/jdk/java/foreign/TestNoForeignUnsafeOverride.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @modules java.base/jdk.internal.misc
+ *          jdk.incubator.foreign/jdk.internal.foreign
+ * @run testng TestNoForeignUnsafeOverride
+ */
+
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemorySegment;
+
+import org.testng.annotations.Test;
+
+public class TestNoForeignUnsafeOverride {
+    static {
+        System.setProperty("foreign.restricted", "permit");
+    }
+
+    @Test(expectedExceptions = IllegalAccessError.class)
+    public void testUnsafeAccess() {
+        MemorySegment.ofNativeRestricted(MemoryAddress.ofLong(42), 10, null, null, null);
+    }
+}
diff a/test/jdk/java/foreign/TestSharedAccess.java b/test/jdk/java/foreign/TestSharedAccess.java
--- a/test/jdk/java/foreign/TestSharedAccess.java
+++ b/test/jdk/java/foreign/TestSharedAccess.java
@@ -22,14 +22,13 @@
  *
  */
 
 /*
  * @test
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit TestSharedAccess
+ * @run testng/othervm -Dforeign.restricted=permit TestSharedAccess
  */
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.SequenceLayout;
@@ -40,11 +39,10 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Spliterator;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static org.testng.Assert.*;
 
 public class TestSharedAccess {
@@ -100,11 +98,12 @@
     public void testSharedUnsafe() throws Throwable {
         try (MemorySegment s = MemorySegment.allocateNative(4)) {
             setInt(s.baseAddress(), 42);
             assertEquals(getInt(s.baseAddress()), 42);
             List<Thread> threads = new ArrayList<>();
-            MemorySegment sharedSegment = Foreign.getInstance().asUnconfined(s);
+            MemorySegment sharedSegment = MemorySegment.ofNativeRestricted(
+                    s.baseAddress(), s.byteSize(), null, null, null);
             for (int i = 0 ; i < 1000 ; i++) {
                 threads.add(new Thread(() -> {
                     assertEquals(getInt(sharedSegment.baseAddress()), 42);
                 }));
             }
@@ -138,11 +137,12 @@
     }
 
     @Test(expectedExceptions=IllegalStateException.class)
     public void testBadCloseWithPendingAcquireBuffer() throws InterruptedException {
         MemorySegment segment = MemorySegment.allocateNative(16);
-        Spliterator<MemorySegment> spliterator = segment.spliterator(MemoryLayout.ofSequence(16, MemoryLayouts.JAVA_BYTE));
+        Spliterator<MemorySegment> spliterator = MemorySegment.spliterator(segment,
+                MemoryLayout.ofSequence(16, MemoryLayouts.JAVA_BYTE));
         Runnable r = () -> spliterator.forEachRemaining(s -> {
             try {
                 Thread.sleep(5000 * 100);
             } catch (InterruptedException ex) {
                 throw new AssertionError(ex);
diff a/test/jdk/java/foreign/TestUpcall.java b/test/jdk/java/foreign/TestUpcall.java
--- a/test/jdk/java/foreign/TestUpcall.java
+++ b/test/jdk/java/foreign/TestUpcall.java
@@ -28,14 +28,13 @@
  *          jdk.incubator.foreign/jdk.internal.foreign
  *          jdk.incubator.foreign/jdk.internal.foreign.abi
  *          java.base/sun.security.action
  * @build NativeTestHelper CallGeneratorHelper TestUpcall
  *
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit TestUpcall
+ * @run testng/othervm -Dforeign.restricted=permit TestUpcall
  */
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
@@ -61,11 +60,11 @@
 
 
 public class TestUpcall extends CallGeneratorHelper {
 
     static LibraryLookup lib = LibraryLookup.ofLibrary(MethodHandles.lookup(), "TestUpcall");
-    static SystemABI abi = Foreign.getInstance().getSystemABI();
+    static SystemABI abi = SystemABI.getSystemABI();
     static final MemoryAddress dummyAddress;
     static final Cleaner cleaner = Cleaner.create();
 
     static MethodHandle DUMMY;
     static MethodHandle PASS_AND_SAVE;
diff a/test/jdk/java/foreign/TestUpcallStubs.java b/test/jdk/java/foreign/TestUpcallStubs.java
--- a/test/jdk/java/foreign/TestUpcallStubs.java
+++ b/test/jdk/java/foreign/TestUpcallStubs.java
@@ -22,14 +22,13 @@
  *
  */
 
 /*
  * @test
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit TestUpcallStubs
+ * @run testng/othervm -Dforeign.restricted=permit TestUpcallStubs
  */
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SystemABI;
 import org.testng.annotations.*;
@@ -41,11 +40,11 @@
 
 import static jdk.incubator.foreign.MemoryLayouts.JAVA_INT;
 
 public class TestUpcallStubs {
 
-    static final SystemABI abi = Foreign.getInstance().getSystemABI();
+    static final SystemABI abi = SystemABI.getSystemABI();
     static final MethodHandle MH_dummy;
 
     static {
         try {
             MH_dummy = MethodHandles.lookup()
diff a/test/jdk/java/foreign/TestVarArgs.java b/test/jdk/java/foreign/TestVarArgs.java
--- a/test/jdk/java/foreign/TestVarArgs.java
+++ b/test/jdk/java/foreign/TestVarArgs.java
@@ -26,14 +26,13 @@
  * @test
  * @modules jdk.incubator.foreign/jdk.incubator.foreign.unsafe
  *          jdk.incubator.foreign/jdk.internal.foreign
  *          jdk.incubator.foreign/jdk.internal.foreign.abi
  *          java.base/sun.security.action
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit TestVarArgs
+ * @run testng/othervm -Dforeign.restricted=permit TestVarArgs
  */
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
@@ -64,11 +63,11 @@
     static final VarHandle VH_CallInfo_writeback = ML_CallInfo.varHandle(long.class, groupElement("writeback"));
     static final VarHandle VH_CallInfo_argIDs = ML_CallInfo.varHandle(long.class, groupElement("argIDs"));
 
     static final VarHandle VH_IntArray = MemoryLayout.ofSequence(C_INT).varHandle(int.class, sequenceElement());
 
-    static final SystemABI abi = Foreign.getInstance().getSystemABI();
+    static final SystemABI abi = SystemABI.getSystemABI();
     static final MemoryAddress varargsAddr;
 
     static {
         try {
             varargsAddr = LibraryLookup.ofLibrary(MethodHandles.lookup(), "VarArgs").lookup("varargs");
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/CallOverhead.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/CallOverhead.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/CallOverhead.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/CallOverhead.java
@@ -20,11 +20,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.bench.jdk.incubator.foreign;
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.SystemABI;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;
@@ -48,11 +47,11 @@
 @State(org.openjdk.jmh.annotations.Scope.Thread)
 @OutputTimeUnit(TimeUnit.NANOSECONDS)
 @Fork(3)
 public class CallOverhead {
 
-    static final SystemABI abi = Foreign.getInstance().getSystemABI();
+    static final SystemABI abi = SystemABI.getSystemABI();
     static final MethodHandle func;
     static final MethodHandle identity;
 
     static {
         System.loadLibrary("CallOverheadJNI");
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/support/PanamaPoint.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/support/PanamaPoint.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/support/PanamaPoint.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/points/support/PanamaPoint.java
@@ -20,11 +20,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.bench.jdk.incubator.foreign.points.support;
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
@@ -51,11 +50,11 @@
     private static final MethodHandle MH_distance;
     private static final MethodHandle MH_distance_ptrs;
 
     static {
         try {
-            SystemABI abi = Foreign.getInstance().getSystemABI();
+            SystemABI abi = SystemABI.getSystemABI();
             LibraryLookup lookup = LibraryLookup.ofLibrary(MethodHandles.lookup(), "Point");
             MH_distance = abi.downcallHandle(
                 lookup.lookup("distance"),
                 methodType(double.class, MemorySegment.class, MemorySegment.class),
                 FunctionDescriptor.of(C_DOUBLE, LAYOUT, LAYOUT)
