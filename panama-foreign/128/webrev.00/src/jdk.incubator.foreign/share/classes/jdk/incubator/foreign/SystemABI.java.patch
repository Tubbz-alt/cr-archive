diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
@@ -23,11 +23,16 @@
  *  questions.
  *
  */
 package jdk.incubator.foreign;
 
+import jdk.internal.foreign.Utils;
+import jdk.internal.foreign.abi.SharedUtils;
 import jdk.internal.foreign.abi.UpcallStubs;
+import jdk.internal.foreign.abi.aarch64.AArch64ABI;
+import jdk.internal.foreign.abi.x64.sysv.SysVx64ABI;
+import jdk.internal.foreign.abi.x64.windows.Windowsx64ABI;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodType;
 import java.util.Optional;
 
@@ -200,6 +205,21 @@
      * Returns memory layout for the given native type if supported by the platform ABI.
      * @param type the native type for which the layout is to be retrieved.
      * @return the layout (if any) associated with {@code type}
      */
     Optional<MemoryLayout> layoutFor(Type type);
+
+    /**
+     * Obtain an instance of the system ABI.
+     * <p>
+     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
+     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
+     * restricted methods, and use safe and supported functionalities, where possible.
+     * @return system ABI.
+     * @throws IllegalAccessError if the runtime property {@code foreign.restricted} is not set to either
+     * {@code permit}, {@code warn} or {@code debug} (the default value is set to {@code deny}).
+     */
+    static SystemABI getSystemABI() {
+        Utils.checkRestrictedAccess("SystemABI.getSystemABI");
+        return SharedUtils.getSystemABI();
+    }
 }
