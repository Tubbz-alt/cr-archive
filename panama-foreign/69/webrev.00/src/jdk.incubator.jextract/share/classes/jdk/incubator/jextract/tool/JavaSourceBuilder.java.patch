diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
@@ -43,10 +43,12 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 import javax.lang.model.SourceVersion;
 
+import static jdk.incubator.foreign.SystemABI.NATIVE_TYPE;
+
 /**
  * A helper class to generate header interface class in source form.
  * After aggregating various constituents of a .java source, build
  * method is called to get overall generated source string.
  */
@@ -130,11 +132,13 @@
         decrAlign();
     }
 
     private void addLayout(MemoryLayout l) {
         if (l instanceof ValueLayout) {
-            SystemABI.Type type = l.abiType().orElseThrow(()->new AssertionError("Should not get here: " + l));
+            SystemABI.Type type = l.attribute(NATIVE_TYPE)
+                                   .map(SystemABI.Type.class::cast)
+                                   .orElseThrow(()->new AssertionError("Should not get here: " + l));
             sb.append(switch (type) {
                 case BOOL -> "C_BOOL";
                 case SIGNED_CHAR -> "C_SCHAR";
                 case UNSIGNED_CHAR -> "C_UCHAR";
                 case CHAR -> "C_CHAR";
@@ -158,11 +162,13 @@
                 sb.append(((SequenceLayout) l).elementCount().getAsLong() + ", ");
             }
             addLayout(((SequenceLayout) l).elementLayout());
             sb.append(")");
         } else if (l instanceof GroupLayout) {
-            SystemABI.Type type = l.abiType().orElse(null);
+            SystemABI.Type type = l.attribute(NATIVE_TYPE)
+                                   .map(SystemABI.Type.class::cast)
+                                   .orElse(null);
             if (type == SystemABI.Type.COMPLEX_LONG_DOUBLE) {
                 if (!ABI.equals(SystemABI.ABI_SYSV)) {
                     throw new RuntimeException("complex long double is supported only for SysV ABI");
                 } else {
                     sb.append("C_COMPLEX_LONGDOUBLE");
