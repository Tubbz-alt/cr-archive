diff a/make/autoconf/spec.gmk.in b/make/autoconf/spec.gmk.in
--- a/make/autoconf/spec.gmk.in
+++ b/make/autoconf/spec.gmk.in
@@ -120,10 +120,19 @@
 RELEASE_FILE_OS_ARCH:=@RELEASE_FILE_OS_ARCH@
 
 LIBM:=@LIBM@
 LIBDL:=@LIBDL@
 
+ENABLE_LIBCLANG:=@ENABLE_LIBCLANG@
+CLANG_LIB_PATH:=@CLANG_LIB_PATH@
+CLANG_INCLUDE_PATH:=@CLANG_INCLUDE_PATH@
+CLANG_INCLUDE_AUX_PATH:=@CLANG_INCLUDE_AUX_PATH@
+CLANG_LIBNAME:=@CLANG_LIBNAME@
+LIBCLANG_CPPFLAGS:=@LIBCLANG_CPPFLAGS@
+LIBCLANG_LDFLAGS:=@LIBCLANG_LDFLAGS@
+LIBCLANG_LIBS:=@LIBCLANG_LIBS@
+
 # colon or semicolon
 PATH_SEP:=@PATH_SEP@
 
 # Save the original path before replacing it with the Visual Studio tools
 ORIGINAL_PATH:=@ORIGINAL_PATH@
@@ -594,10 +603,11 @@
 SHARED_LIBRARY_FLAGS=@SHARED_LIBRARY_FLAGS@
 
 # Set origin using the linker, ie use the relative path to the dependent library to find the dependees.
 # (Note absence of := assignment, because we do not want to evaluate the macro body here)
 SET_SHARED_LIBRARY_ORIGIN=@SET_SHARED_LIBRARY_ORIGIN@
+SET_JCLANG_LIBRARY_ORIGIN=@SET_JCLANG_LIBRARY_ORIGIN@
 SET_EXECUTABLE_ORIGIN=@SET_EXECUTABLE_ORIGIN@
 
 # Different OS:es have different ways of naming shared libraries.
 # The SHARED_LIBRARY macro takes "verify" as and argument and returns:
 #    "libverify.so" or "libverify.dylib" or "verify.dll" depending on platform.
