diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeMaker.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeMaker.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeMaker.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeMaker.java
@@ -30,31 +30,70 @@
 import java.util.ArrayList;
 import java.util.ConcurrentModificationException;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
+import java.util.function.Supplier;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Type;
 import jdk.incubator.jextract.Type.Delegated;
 import jdk.incubator.jextract.Type.Primitive;
 
 class TypeMaker {
 
     TreeMaker treeMaker;
     private final Map<jdk.internal.clang.Type, Type> typeCache = new HashMap<>();
-    private final List<TypeImpl.PointerImpl> pointers = new ArrayList<>();
+    private List<ClangTypeReference> unresolved = new ArrayList<>();
+
+    private class ClangTypeReference implements Supplier<Type> {
+        jdk.internal.clang.Type origin;
+        Type derived;
+
+        private ClangTypeReference(jdk.internal.clang.Type origin) {
+            this.origin = origin;
+            derived = typeCache.get(origin);
+        }
+
+        public boolean isUnresolved() {
+            return null == derived;
+        }
+
+        public void resolve() {
+            derived = makeType(origin);
+            Objects.requireNonNull(derived, "Clang type cannot be resolved: " + origin.spelling());
+        }
+
+        public Type get() {
+            Objects.requireNonNull(derived, "Type is not yet resolved.");
+            return derived;
+        }
+    }
+
+    private ClangTypeReference reference(jdk.internal.clang.Type type) {
+        ClangTypeReference ref = new ClangTypeReference(type);
+        if (ref.isUnresolved()) {
+            unresolved.add(ref);
+        }
+        return ref;
+    }
 
     public TypeMaker(TreeMaker treeMaker) {
         this.treeMaker = treeMaker;
     }
 
     /**
      * Resolve all type references. This method should be called before discard clang cursors/types
      */
     void resolveTypeReferences() {
-        pointers.forEach(TypeImpl.PointerImpl::type);
-        pointers.clear();
+        List<ClangTypeReference> resolving = unresolved;
+        unresolved = new ArrayList<>();
+        while (! resolving.isEmpty()) {
+            resolving.forEach(ClangTypeReference::resolve);
+            resolving = unresolved;
+            unresolved = new ArrayList<>();
+        }
     }
 
     Type makeType(jdk.internal.clang.Type t) {
         Type rv = typeCache.get(t);
         if (rv != null) {
@@ -150,13 +189,11 @@
                 return Type.declared((Declaration.Scoped) treeMaker.createTree(t.getDeclarationCursor()));
             }
             case BlockPointer:
             case Pointer: {
                 // TODO: We can always erase type for macro evaluation, should we?
-                TypeImpl.PointerImpl rv = new TypeImpl.PointerImpl(() -> makeType(t.getPointeeType()));
-                pointers.add(rv);
-                return rv;
+                return new TypeImpl.PointerImpl(reference(t.getPointeeType()));
             }
             case Typedef: {
                 Type __type = makeType(t.canonicalType());
                 return Type.typedef(t.spelling(), __type);
             }
