diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java
@@ -101,11 +101,13 @@
                         decls.add(constant.get());
                     }
                 }
             });
 
-        return treeMaker.createHeader(tuCursor, decls);
+        Declaration.Scoped rv = treeMaker.createHeader(tuCursor, decls);
+        treeMaker.freeze();
+        return rv;
     }
 
     private boolean isMacro(Cursor c) {
         return c.isPreprocessing() && c.kind() == CursorKind.MacroDefinition;
     }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
@@ -51,10 +51,14 @@
 
     public TreeMaker() {}
 
     TypeMaker typeMaker = new TypeMaker(this);
 
+    public void freeze() {
+        typeMaker.resolveTypeReferences();
+    }
+
     private <T extends Declaration> T checkCache(Cursor c, Class<T> clazz, Supplier<Declaration> factory) {
         // The supplier function may lead to adding some other type, which will cause CME using computeIfAbsent.
         // This implementation relax the constraint a bit only check for same key
         Declaration rv;
         if (treeCache.containsKey(c)) {
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
@@ -24,19 +24,17 @@
  *
  */
 
 package jdk.internal.jextract.impl;
 
-import java.util.Objects;
-import jdk.incubator.foreign.MemoryLayout;
-import jdk.incubator.jextract.Declaration;
-import jdk.incubator.jextract.Type;
-
 import java.util.List;
 import java.util.Optional;
 import java.util.OptionalLong;
 import java.util.function.Supplier;
+import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.jextract.Declaration;
+import jdk.incubator.jextract.Type;
 
 public abstract class TypeImpl implements Type {
 
     @Override
     public boolean isErroneous() {
@@ -137,31 +135,23 @@
         }
     }
 
     public static class PointerImpl extends DelegatedBase {
         private final Supplier<Type> pointeeFactory;
-        private Type pointee;
 
         public PointerImpl(Supplier<Type> pointeeFactory) {
             super(Kind.POINTER, Optional.empty());
             this.pointeeFactory = pointeeFactory;
-            this.pointee = null;
         }
 
         public PointerImpl(Type pointee) {
-            super(Kind.POINTER, Optional.empty());
-            pointeeFactory = null;
-            this.pointee = pointee;
+            this(() -> pointee);
         }
 
         @Override
         public Type type() {
-            if (pointee == null && pointeeFactory != null) {
-                pointee =pointeeFactory.get();
-                Objects.requireNonNull(pointee);
-            }
-            return pointee;
+            return pointeeFactory.get();
         }
     }
 
     public static class DeclaredImpl extends TypeImpl implements Type.Declared {
 
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeMaker.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeMaker.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeMaker.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeMaker.java
@@ -30,31 +30,70 @@
 import java.util.ArrayList;
 import java.util.ConcurrentModificationException;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
+import java.util.function.Supplier;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Type;
 import jdk.incubator.jextract.Type.Delegated;
 import jdk.incubator.jextract.Type.Primitive;
 
 class TypeMaker {
 
     TreeMaker treeMaker;
     private final Map<jdk.internal.clang.Type, Type> typeCache = new HashMap<>();
-    private final List<TypeImpl.PointerImpl> pointers = new ArrayList<>();
+    private List<ClangTypeReference> unresolved = new ArrayList<>();
+
+    private class ClangTypeReference implements Supplier<Type> {
+        jdk.internal.clang.Type origin;
+        Type derived;
+
+        private ClangTypeReference(jdk.internal.clang.Type origin) {
+            this.origin = origin;
+            derived = typeCache.get(origin);
+        }
+
+        public boolean isUnresolved() {
+            return null == derived;
+        }
+
+        public void resolve() {
+            derived = makeType(origin);
+            Objects.requireNonNull(derived, "Clang type cannot be resolved: " + origin.spelling());
+        }
+
+        public Type get() {
+            Objects.requireNonNull(derived, "Type is not yet resolved.");
+            return derived;
+        }
+    }
+
+    private ClangTypeReference reference(jdk.internal.clang.Type type) {
+        ClangTypeReference ref = new ClangTypeReference(type);
+        if (ref.isUnresolved()) {
+            unresolved.add(ref);
+        }
+        return ref;
+    }
 
     public TypeMaker(TreeMaker treeMaker) {
         this.treeMaker = treeMaker;
     }
 
     /**
      * Resolve all type references. This method should be called before discard clang cursors/types
      */
     void resolveTypeReferences() {
-        pointers.forEach(TypeImpl.PointerImpl::type);
-        pointers.clear();
+        List<ClangTypeReference> resolving = unresolved;
+        unresolved = new ArrayList<>();
+        while (! resolving.isEmpty()) {
+            resolving.forEach(ClangTypeReference::resolve);
+            resolving = unresolved;
+            unresolved = new ArrayList<>();
+        }
     }
 
     Type makeType(jdk.internal.clang.Type t) {
         Type rv = typeCache.get(t);
         if (rv != null) {
@@ -150,13 +189,11 @@
                 return Type.declared((Declaration.Scoped) treeMaker.createTree(t.getDeclarationCursor()));
             }
             case BlockPointer:
             case Pointer: {
                 // TODO: We can always erase type for macro evaluation, should we?
-                TypeImpl.PointerImpl rv = new TypeImpl.PointerImpl(() -> makeType(t.getPointeeType()));
-                pointers.add(rv);
-                return rv;
+                return new TypeImpl.PointerImpl(reference(t.getPointeeType()));
             }
             case Typedef: {
                 Type __type = makeType(t.canonicalType());
                 return Type.typedef(t.spelling(), __type);
             }
diff a/test/jdk/java/jextract/JextractApiTestBase.java b/test/jdk/java/jextract/JextractApiTestBase.java
--- a/test/jdk/java/jextract/JextractApiTestBase.java
+++ b/test/jdk/java/jextract/JextractApiTestBase.java
@@ -51,16 +51,27 @@
             assertEquals(struct.members().get(i).name(), fields[i]);
         }
         return struct;
     }
 
+    public static Declaration.Variable checkConstant(Declaration.Scoped scope, String name, Type type) {
+        Declaration.Variable var = findDecl(scope, name, Declaration.Variable.class);
+        assertTypeEquals(type, var.type());
+        return var;
+    }
+
     public static Declaration.Variable checkGlobal(Declaration.Scoped toplevel, String name, Type type) {
-        Declaration.Variable global = findDecl(toplevel, name, Declaration.Variable.class);
-        assertTypeEquals(type, global.type());
+        Declaration.Variable global = checkConstant(toplevel, name, type);
+        assertEquals(global.kind(), Declaration.Variable.Kind.GLOBAL);
         return global;
     }
 
+    public static Declaration.Variable checkField(Declaration.Scoped record, String name, Type type) {
+        Declaration.Variable global = checkConstant(record, name, type);
+        assertEquals(global.kind(), Declaration.Variable.Kind.FIELD);
+        return global;
+    }
     public static Declaration.Function checkFunction(Declaration.Scoped toplevel, String name, Type ret, Type... params) {
         Declaration.Function function = findDecl(toplevel, name, Declaration.Function.class);
         assertTypeEquals(ret, function.type().returnType());
         assertEquals(function.parameters().size(), params.length);
         for (int i = 0 ; i < params.length ; i++) {
diff a/test/jdk/java/jextract/TestMacros.java b/test/jdk/java/jextract/TestMacros.java
--- a/test/jdk/java/jextract/TestMacros.java
+++ b/test/jdk/java/jextract/TestMacros.java
@@ -24,35 +24,72 @@
  *
  */
 
 /*
  * @test
+ * @bug 8239128
  * @build JextractApiTestBase
  * @run testng TestMacros
  */
 
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Type;
+import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
 
 import static org.testng.Assert.assertNotNull;
 
 public class TestMacros extends JextractApiTestBase {
-    @Test
-    public void testBadMacros() {
+    Declaration.Scoped badMacro;
+    Declaration.Scoped foo;
+    Declaration.Scoped bar;
+    private final static Type C_INT = Type.primitive(Type.Primitive.Kind.Int, MemoryLayouts.C_INT);
+
+    @BeforeClass
+    public void parse() {
         // Somehow without this line, C_INT will be null after parse. Still looking for affirmative explanation.
         assertNotNull(MemoryLayouts.C_INT);
         // We need stdint.h for pointer macro, otherwise evaluation failed and Constant declaration is not created
         Path builtinInc = Paths.get(System.getProperty("java.home"), "conf", "jextract");
-        Declaration.Scoped d = parse("badMacros.h", "-I", builtinInc.toString());
+        badMacro = parse("badMacros.h", "-I", builtinInc.toString());
         assertNotNull(MemoryLayouts.C_INT);
-        checkConstant(d, "INVALID_INT_CONSUMER",
-            Type.pointer(Type.function(false, Type.void_(), Type.primitive(Type.Primitive.Kind.Int, MemoryLayouts.C_INT))),
+
+        foo = checkStruct(badMacro, "foo", "ptrFoo", "ptrBar");
+        bar = checkStruct(badMacro, "bar", "ptrFoo", "arFooPtr");
+    }
+
+    @Test
+    public void testBadMacros() {
+        checkConstant(badMacro, "INVALID_INT_CONSUMER",
+            Type.pointer(Type.function(false, Type.void_(), C_INT)),
             0L);
-        Declaration.Scoped structFoo = checkStruct(d, "foo", "ptrFoo", "ptrBar");
         // Record type in macro definition are erased to void
-        checkConstant(d, "NO_FOO", Type.pointer(Type.void_()), 0L);
+        checkConstant(badMacro, "NO_FOO", Type.pointer(Type.void_()), 0L);
+        checkConstant(badMacro, "INVALID_INT_ARRAY_PTR", Type.pointer(Type.pointer(C_INT)), 0L);
+    }
+
+    @Test
+    public void verifyFunctions() {
+        checkFunction(badMacro, "func", Type.void_(),
+            Type.pointer(Type.declared(bar)), Type.pointer(Type.declared(foo)));
+        checkFunction(badMacro, "withArray", Type.void_(),
+            Type.pointer(Type.typedef("foo_t", Type.pointer(Type.declared(foo)))));
+    }
+
+    @Test
+    public void verifyGlobals() {
+        checkGlobal(badMacro, "op", Type.pointer(
+                Type.function(false, Type.void_(), C_INT, Type.pointer(C_INT))));
+    }
+
+    @Test
+    public void verifyFields() {
+        Type foo_t = Type.typedef("foo_t", Type.pointer(Type.declared(foo)));
+        checkField(foo, "ptrFoo", foo_t);
+        checkField(foo, "ptrBar", Type.pointer(Type.declared(bar)));
+        checkField(bar, "ptrFoo", foo_t);
+        checkField(bar, "arFooPtr", Type.pointer(foo_t));
     }
 }
diff a/test/jdk/java/jextract/badMacros.h b/test/jdk/java/jextract/badMacros.h
--- a/test/jdk/java/jextract/badMacros.h
+++ b/test/jdk/java/jextract/badMacros.h
@@ -25,21 +25,32 @@
  */
 
 // Macro of constant function pointer
 #define INVALID_INT_CONSUMER         (void (*)(int))0
 
-// Macro of constant struct pointer
 struct foo;
 typedef struct foo *foo_t;
 struct bar;
 
+// Macro of constant struct pointer
 #define NO_FOO ((foo_t)0)
 
+// Cases where resolving introduce new type references
+// Pointer to pointer in macro
+#define INVALID_INT_ARRAY_PTR (int**) 0
+// Function pointer with pointer type argument
+void (*op)(int cnt, int* operands);
+void func(struct bar *pBar, struct foo *pFoo);
+
 // Cyclic struct pointer within struct definitions
 struct foo {
     foo_t ptrFoo;
     struct bar *ptrBar;
 };
 
 struct bar {
     foo_t ptrFoo;
-};
+    foo_t *arFooPtr;
+};
+
+// Function with array to pointer
+void withArray(foo_t ar[2]);
