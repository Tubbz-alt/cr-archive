diff a/test/jdk/java/foreign/TestNative.java b/test/jdk/java/foreign/TestNative.java
--- a/test/jdk/java/foreign/TestNative.java
+++ b/test/jdk/java/foreign/TestNative.java
@@ -147,10 +147,11 @@
     public static native double getDoubleRaw(long addr, int index);
 
     public static native long getCapacity(Buffer buffer);
 
     public static native long allocate(int size);
+    public static native long free(long ptr);
 
     @Test(dataProvider="nativeAccessOps")
     public void testNativeAccess(Consumer<MemoryAddress> checker, Consumer<MemoryAddress> initializer, SequenceLayout seq) {
         try (MemorySegment segment = MemorySegment.allocateNative(seq)) {
             MemoryAddress address = segment.baseAddress();
@@ -174,11 +175,11 @@
     @Test
     public void testMallocSegment() {
         MemoryAddress addr = MemoryAddress.ofLong(allocate(12));
         assertNull(addr.segment());
         MemorySegment mallocSegment = MemorySegment.ofNativeRestricted(addr, 12, null,
-                () -> UNSAFE.freeMemory(addr.toRawLongValue()), null);
+                () -> free(addr.toRawLongValue()), null);
         assertEquals(mallocSegment.byteSize(), 12);
         mallocSegment.close(); //free here
         assertTrue(!mallocSegment.isAlive());
     }
 
diff a/test/jdk/java/foreign/libNativeAccess.c b/test/jdk/java/foreign/libNativeAccess.c
--- a/test/jdk/java/foreign/libNativeAccess.c
+++ b/test/jdk/java/foreign/libNativeAccess.c
@@ -115,8 +115,13 @@
 Java_TestNative_getCapacity(JNIEnv *env, jclass cls, jobject buf) {
     return (*env)->GetDirectBufferCapacity(env, buf);
 }
 
 JNIEXPORT jlong JNICALL
-Java_TestNative_allocate(JNIEnv *env, jclass cls, jobject buf, jint size) {
+Java_TestNative_allocate(JNIEnv *env, jclass cls, jint size) {
     return (jlong)malloc(size);
 }
+
+JNIEXPORT void JNICALL
+Java_TestNative_free(JNIEnv *env, jclass cls, jlong ptr) {
+    free(ptr);
+}
