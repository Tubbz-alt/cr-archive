diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
@@ -281,11 +281,11 @@
     public static VaList newVaList(Consumer<VaList.Builder> actions) {
         String name = CSupport.getSystemLinker().name();
         return switch(name) {
             case Win64.NAME -> Windowsx64Linker.newVaList(actions);
             case SysV.NAME -> SysVx64Linker.newVaList(actions);
-            case AArch64.NAME -> throw new UnsupportedOperationException("Not yet implemented for this platform");
+            case AArch64.NAME -> AArch64Linker.newVaList(actions);
             default -> throw new IllegalStateException("Unknown linker name: " + name);
         };
     }
 
     public static VarHandle vhPrimitiveOrAddress(Class<?> carrier, MemoryLayout layout) {
@@ -297,21 +297,21 @@
     public static VaList newVaListOfAddress(MemoryAddress ma) {
         String name = CSupport.getSystemLinker().name();
         return switch(name) {
             case Win64.NAME -> Windowsx64Linker.newVaListOfAddress(ma);
             case SysV.NAME -> SysVx64Linker.newVaListOfAddress(ma);
-            case AArch64.NAME -> throw new UnsupportedOperationException("Not yet implemented for this platform");
+            case AArch64.NAME -> AArch64Linker.newVaListOfAddress(ma);
             default -> throw new IllegalStateException("Unknown linker name: " + name);
         };
     }
 
     public static VaList emptyVaList() {
         String name = CSupport.getSystemLinker().name();
         return switch(name) {
             case Win64.NAME -> Windowsx64Linker.emptyVaList();
             case SysV.NAME -> SysVx64Linker.emptyVaList();
-            case AArch64.NAME -> throw new UnsupportedOperationException("Not yet implemented for this platform");
+            case AArch64.NAME -> AArch64Linker.emptyVaList();
             default -> throw new IllegalStateException("Unknown linker name: " + name);
         };
     }
 
     public static MethodType convertVaListCarriers(MethodType mt, Class<?> carrier) {
