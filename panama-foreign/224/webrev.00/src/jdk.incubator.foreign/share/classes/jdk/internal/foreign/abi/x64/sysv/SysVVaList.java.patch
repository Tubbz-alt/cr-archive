diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java
@@ -211,11 +211,12 @@
     }
 
     private Object read(Class<?> carrier, MemoryLayout layout) {
         checkCompatibleType(carrier, layout, SysVx64Linker.ADDRESS_SIZE);
         TypeClass typeClass = TypeClass.classifyLayout(layout);
-        if (isRegOverflow(currentGPOffset(), currentFPOffset(), typeClass)) {
+        if (isRegOverflow(currentGPOffset(), currentFPOffset(), typeClass)
+                || typeClass.inMemory()) {
             preAlignStack(layout);
             return switch (typeClass.kind()) {
                 case STRUCT -> {
                     try (MemorySegment slice = MemorySegment.ofNativeRestricted(stackPtr(), layout.byteSize(),
                                                                                 segment.ownerThread(), null, null)) {
@@ -364,11 +365,12 @@
         }
 
         private Builder arg(Class<?> carrier, MemoryLayout layout, Object value) {
             checkCompatibleType(carrier, layout, SysVx64Linker.ADDRESS_SIZE);
             TypeClass typeClass = TypeClass.classifyLayout(layout);
-            if (isRegOverflow(currentGPOffset, currentFPOffset, typeClass)) {
+            if (isRegOverflow(currentGPOffset, currentFPOffset, typeClass)
+                    || typeClass.inMemory()) {
                 // stack it!
                 stackArgs.add(new SimpleVaArg(carrier, layout, value));
             } else {
                 switch (typeClass.kind()) {
                     case STRUCT -> {
@@ -422,12 +424,18 @@
                 MemoryAddress maOverflowArgArea = stackArgsSegment.baseAddress();
                 for (SimpleVaArg arg : stackArgs) {
                     if (arg.layout.byteSize() > 8) {
                         maOverflowArgArea = Utils.alignUp(maOverflowArgArea, Math.min(16, arg.layout.byteSize()));
                     }
-                    VarHandle writer = arg.varHandle();
-                    writer.set(maOverflowArgArea, arg.value);
+                    if (arg.value instanceof MemorySegment) {
+                        MemorySegment slice
+                            = stackArgsSegment.asSlice(maOverflowArgArea.segmentOffset(), arg.layout.byteSize());
+                        slice.copyFrom((MemorySegment) arg.value);
+                    } else {
+                        VarHandle writer = arg.varHandle();
+                        writer.set(maOverflowArgArea, arg.value);
+                    }
                     maOverflowArgArea = maOverflowArgArea.addOffset(arg.layout.byteSize());
                 }
                 stackArgsPtr = stackArgsSegment.baseAddress();
                 res.slices.add(stackArgsSegment);
             }
