diff a/test/jdk/java/foreign/TestSegments.java b/test/jdk/java/foreign/TestSegments.java
--- a/test/jdk/java/foreign/TestSegments.java
+++ b/test/jdk/java/foreign/TestSegments.java
@@ -184,18 +184,21 @@
         VarHandle byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)
                 .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());
 
         for (byte value : new byte[] {(byte) 0xFF, (byte) 0x00, (byte) 0x45}) {
             try (MemorySegment segment = memorySegmentSupplier.get()) {
-                MemorySegment.fill(segment, value);
+                segment.fill(value);
                 for (long l = 0; l < segment.byteSize(); l++) {
                     assertEquals((byte) byteHandle.get(segment.baseAddress(), l), value);
                 }
 
                 // fill a slice
-                MemorySegment sliceSegment = segment.asSlice(1, segment.byteSize() - 2);
-                MemorySegment.fill(sliceSegment, (byte) ~value);
+                var sliceSegment = segment.asSlice(1, segment.byteSize() - 2).fill((byte) ~value);
+                for (long l = 0; l < sliceSegment.byteSize(); l++) {
+                    assertEquals((byte) byteHandle.get(sliceSegment.baseAddress(), l), ~value);
+                }
+                // assert enclosing slice
                 assertEquals((byte) byteHandle.get(segment.baseAddress(), 0L), value);
                 for (long l = 1; l < segment.byteSize() - 2; l++) {
                     assertEquals((byte) byteHandle.get(segment.baseAddress(), l), (byte) ~value);
                 }
                 assertEquals((byte) byteHandle.get(segment.baseAddress(), segment.byteSize() - 1L), value);
@@ -205,28 +208,27 @@
 
     @Test(dataProvider = "segmentFactories", expectedExceptions = IllegalStateException.class)
     public void testFillClosed(Supplier<MemorySegment> memorySegmentSupplier) {
         MemorySegment segment = memorySegmentSupplier.get();
         segment.close();
-        MemorySegment.fill(segment, (byte) 0xFF);
+        segment.fill((byte) 0xFF);
     }
 
     @Test(dataProvider = "segmentFactories", expectedExceptions = UnsupportedOperationException.class)
     public void testFillIllegalAccessMode(Supplier<MemorySegment> memorySegmentSupplier) {
         try (MemorySegment segment = memorySegmentSupplier.get()) {
-            var readOnlySegment = segment.withAccessModes(segment.accessModes() & ~WRITE);
-            MemorySegment.fill(readOnlySegment, (byte) 0xFF);
+            segment.withAccessModes(segment.accessModes() & ~WRITE).fill((byte) 0xFF);
         }
     }
 
     @Test(dataProvider = "segmentFactories")
     public void testFillThread(Supplier<MemorySegment> memorySegmentSupplier) throws Exception {
         try (MemorySegment segment = memorySegmentSupplier.get()) {
             AtomicReference<RuntimeException> exception = new AtomicReference<>();
             Runnable action = () -> {
                 try {
-                    MemorySegment.fill(segment, (byte) 0xBA);
+                    segment.fill((byte) 0xBA);
                 } catch (RuntimeException e) {
                     exception.set(e);
                 }
             };
             Thread thread = new Thread(action);
@@ -240,24 +242,13 @@
         }
     }
 
     @Test
     public void testFillEmpty() {
-        try (MemorySegment segment = MemorySegment.ofArray(new byte[] { })) {
-            MemorySegment.fill(segment, (byte) 0xFF);
-        }
-        try (MemorySegment segment = MemorySegment.ofArray(new byte[2]).asSlice(0, 0)) {
-            MemorySegment.fill(segment, (byte) 0xFF);
-        }
-        try (MemorySegment segment = MemorySegment.ofByteBuffer(ByteBuffer.allocateDirect(0))) {
-            MemorySegment.fill(segment, (byte) 0xFF);
-        }
-    }
-
-    @Test(expectedExceptions = NullPointerException.class)
-    public void testFillNull() {
-        MemorySegment.fill(null, (byte) 0xFF);
+        MemorySegment.ofArray(new byte[] { }).fill((byte) 0xFF);
+        MemorySegment.ofArray(new byte[2]).asSlice(0, 0).fill((byte) 0xFF);
+        MemorySegment.ofByteBuffer(ByteBuffer.allocateDirect(0)).fill((byte) 0xFF);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadWithAccessModes() {
         int[] arr = new int[1];
@@ -327,10 +318,11 @@
         final Method method;
         final Object[] params;
 
         final static List<String> CONFINED_NAMES = List.of(
                 "close",
+                "fill",
                 "toByteArray",
                 "withOwnerThread"
         );
 
         public SegmentMember(Method method, Object[] params) {
