diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
@@ -40,10 +40,11 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
+import javax.lang.model.SourceVersion;
 
 /**
  * A helper class to generate header interface class in source form.
  * After aggregating various constituents of a .java source, build
  * method is called to get overall generated source string.
@@ -120,11 +121,11 @@
     }
 
     protected void addLayout(String elementName, MemoryLayout layout) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + "MemoryLayout " + elementName + "$LAYOUT = ");
+        sb.append(PUB_MODS + "MemoryLayout " + javaSafeIdentifier(elementName) + "$LAYOUT = ");
         addLayout(layout);
         sb.append(";\n");
         decrAlign();
     }
 
@@ -194,13 +195,14 @@
     }
 
     protected void addVarHandle(String name, Class<?> type, String parentName) {
         incrAlign();
         indent();
+        parentName = parentName != null? javaSafeIdentifier(parentName) : parentName;
+        name = javaSafeIdentifier(name);
         String vhName = parentName != null ?
-                parentName + "$" + name :
-                name;
+                parentName + "$" + name : name;
         sb.append(PUB_MODS + "VarHandle " + vhName + " = ");
         if (parentName != null) {
             addHandlePath(type, parentName, name);
         } else {
             addHandlePath(type, name);
@@ -228,11 +230,11 @@
     }
 
     protected void addMethodHandle(Declaration.Function funcTree, MethodType mtype, FunctionDescriptor desc) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + "MethodHandle " + funcTree.name() + " = ");
+        sb.append(PUB_MODS + "MethodHandle " + javaSafeIdentifier(funcTree.name()) + " = ");
         sb.append("RuntimeHelper.downcallHandle(\n");
         incrAlign();
         indent();
         sb.append("LIBRARIES, \"" + funcTree.name() + "\"");
         sb.append(",\n");
@@ -283,11 +285,11 @@
     }
 
     protected void addAddress(String name) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + "MemoryAddress " + name + "$ADDR" + " = ");
+        sb.append(PUB_MODS + "MemoryAddress " + javaSafeIdentifier(name) + "$ADDR" + " = ");
         addAddressLookup(name);
         sb.append(";\n");
         decrAlign();
     }
 
@@ -295,11 +297,11 @@
         incrAlign();
         indent();
         if (type == MemoryAddress.class || type == MemorySegment.class) {
             //todo, skip for now (address constants and string constants)
         } else {
-            sb.append(PUB_MODS + type.getName() + " " + name);
+            sb.append(PUB_MODS + type.getName() + " " + javaSafeIdentifier(name));
             sb.append(" = ");
             if (type == float.class) {
                 sb.append(value);
                 sb.append("f");
             } else if (type == long.class) {
@@ -339,19 +341,20 @@
     }
 
     protected void addStaticFunctionWrapper(Declaration.Function f, MethodType mtype) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + mtype.returnType().getName() + " " + f.name() + " (");
+        sb.append(PUB_MODS + mtype.returnType().getName() + " " + javaSafeIdentifier(f.name()) + " (");
         String delim = "";
         List<String> pNames = new ArrayList<>();
         final int numParams = f.parameters().size();
         for (int i = 0 ; i < numParams; i++) {
             String pName = f.parameters().get(i).name();
             if (pName.isEmpty()) {
                 pName = "x" + i;
             }
+            pName = javaSafeIdentifier(pName);
             pNames.add(pName);
             sb.append(delim + mtype.parameterType(i).getName() + " " + pName);
             delim = ", ";
         }
         if (f.type().varargs()) {
@@ -398,11 +401,11 @@
     }
 
     void addFunctionalInterface(String name, MethodType mtype) {
         incrAlign();
         indent();
-        sb.append("public interface " + name + " {\n");
+        sb.append("public interface " + javaSafeIdentifier(name) + " {\n");
         incrAlign();
         indent();
         sb.append(mtype.returnType().getName() + " apply(");
         String delim = "";
         for (int i = 0 ; i < mtype.parameterCount() ; i++) {
@@ -432,11 +435,12 @@
     }
 
     void addGetter(String name, Class<?> type, Declaration parent) {
         incrAlign();
         indent();
-        String vhName = (parent != null ? (parent.name() + "$") : "") + name;
+        name = javaSafeIdentifier(name);
+        String vhName = (parent != null ? (javaSafeIdentifier(parent.name()) + "$") : "") + name;
         String param = parent != null ? (MemorySegment.class.getName() + " seg") : "";
         sb.append(PUB_MODS + type.getName() + " " + vhName + "$get(" + param + ") {\n");
         incrAlign();
         indent();
         String vhParam = parent != null ?
@@ -449,11 +453,12 @@
     }
 
     void addSetter(String name, Class<?> type, Declaration parent) {
         incrAlign();
         indent();
-        String vhName = (parent != null ? (parent.name() + "$") : "") + name;
+        name = javaSafeIdentifier(name);
+        String vhName = (parent != null ? (javaSafeIdentifier(parent.name()) + "$") : "") + name;
         String param = parent != null ? (MemorySegment.class.getName() + " seg, ") : "";
         sb.append(PUB_MODS + "void " + vhName + "$set(" + param + type.getName() + " x) {\n");
         incrAlign();
         indent();
         String vhParam = parent != null ?
@@ -482,6 +487,14 @@
     }
 
     protected void decrAlign() {
         align--;
     }
+
+    protected final String javaSafeIdentifier(String name) {
+        // We never get the problem of Java non-identifiers (like 123, ab-xy) as
+        // C identifiers. But we may have a java keyword used as a C identifier.
+        assert SourceVersion.isIdentifier(name);
+
+        return SourceVersion.isKeyword(name)? (name + "_") : name;
+    }
 }
diff a/test/jdk/tools/jextract/Test8240657.java b/test/jdk/tools/jextract/Test8240657.java
--- /dev/null
+++ b/test/jdk/tools/jextract/Test8240657.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+import java.nio.file.Path;
+import org.testng.annotations.Test;
+import static org.testng.Assert.assertNotNull;
+
+/*
+ * @test
+ * @modules jdk.incubator.jextract
+ * @build JextractToolRunner
+ * @bug 8240657
+ * @summary when Java keywords are used as identifiers in C header, jextract generates non-compilable java code
+ * @run testng Test8240657
+ */
+public class Test8240657 extends JextractToolRunner {
+    @Test
+    public void testKeywordIdentifiers() {
+        Path exportsOutput = getOutputFilePath("exportsgen");
+        Path exportsH = getInputFilePath("exports.h");
+        run("-d", exportsOutput.toString(), exportsH.toString()).checkSuccess();
+        try(Loader loader = classLoader(exportsOutput)) {
+            Class<?> cls = loader.loadClass("exports_h");
+            assertNotNull(cls);
+        } finally {
+            deleteDir(exportsOutput);
+        }
+    }
+}
diff a/test/jdk/tools/jextract/exports.h b/test/jdk/tools/jextract/exports.h
--- /dev/null
+++ b/test/jdk/tools/jextract/exports.h
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+void foo(int boolean);
+
+int finally;
+
+struct abstract {
+    short is;
+    short throws;
+} abstract;
+
+typedef char Byte;
+void func(Byte byte, Byte* out);
+
+#define byte 1
+#define content byte + 1
+
+typedef struct {
+    short s1;
+    short s2;
+} Long;
+
+long twoShorts(Long s, Long* out, long* rv);
