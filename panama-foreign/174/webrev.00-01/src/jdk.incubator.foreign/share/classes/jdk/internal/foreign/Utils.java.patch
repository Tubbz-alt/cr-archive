diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
@@ -24,11 +24,11 @@
  *
  */
 
 package jdk.internal.foreign;
 
-import jdk.incubator.foreign.C;
+import jdk.incubator.foreign.CSupport;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.ForeignLinker;
 import jdk.incubator.foreign.ValueLayout;
@@ -107,13 +107,13 @@
     }
 
     public static <Z extends MemoryLayout> Z pick(Z sysv, Z win64, Z aarch64) {
         ForeignLinker abi = SharedUtils.getSystemLinker();
         return switch (abi.name()) {
-            case C.SysV.NAME -> sysv;
-            case C.Win64.NAME -> win64;
-            case C.AArch64.NAME -> aarch64;
+            case CSupport.SysV.NAME -> sysv;
+            case CSupport.Win64.NAME -> win64;
+            case CSupport.AArch64.NAME -> aarch64;
             default -> throw new ExceptionInInitializerError("Unexpected ABI: " + abi.name());
         };
     }
 
     public static void checkPrimitiveCarrierCompat(Class<?> carrier, MemoryLayout layout) {
