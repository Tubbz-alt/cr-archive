diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
@@ -36,11 +36,11 @@
  * A given native library remains loaded as long as there is at least one <em>live</em> library lookup instance referring
  * to it.
  * <p>
  * Memory address instances generated by a library lookup will contain a strong reference to the originating lookup object,
  * therefore preventing library unloading; in turn method handle instances obtained from
- * {@link SystemABI#downcallHandle(MemoryAddress, MethodType, FunctionDescriptor)}) also maintain a strong reference
+ * {@link ForeignLinker#downcallHandle(MemoryAddress, MethodType, FunctionDescriptor)}) also maintain a strong reference
  * to the memory address parameter used for their construction. This means that there is always a strong reachability chain
  * from a native method handle to a lookup object (the one that was used to lookup the native library symbol the method handle
  * refers to); this is useful to prevent situations where a native library is unloaded in the middle of a native call.
  * <p>
  * To allow for a library to be unloaded, a client will have to discard any strong references it
