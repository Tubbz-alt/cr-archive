diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/CallingSequenceBuilder.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/CallingSequenceBuilder.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/CallingSequenceBuilder.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/CallingSequenceBuilder.java
@@ -1,7 +1,7 @@
 /*
- *  Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ *  Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  *  This code is free software; you can redistribute it and/or modify it
  *  under the terms of the GNU General Public License version 2 only, as
  *  published by the Free Software Foundation.
@@ -34,10 +34,11 @@
 
 public class CallingSequenceBuilder {
     private static final boolean VERIFY_BINDINGS = Boolean.parseBoolean(
             GetPropertyAction.privilegedGetProperty("jdk.incubator.foreign.VERIFY_BINDINGS", "true"));
 
+    private boolean isTrivial;
     private final boolean forUpcall;
     private final List<List<Binding>> inputBindings = new ArrayList<>();
     private List<Binding> outputBindings = List.of();
 
     private MethodType mt = MethodType.methodType(void.class);
@@ -63,12 +64,17 @@
         mt = mt.changeReturnType(carrier);
         desc = desc.changeReturnLayout(layout);
         return this;
     }
 
+    public CallingSequenceBuilder setTrivial(boolean isTrivial) {
+        this.isTrivial = isTrivial;
+        return this;
+    }
+
     public CallingSequence build() {
-        return new CallingSequence(mt, desc, inputBindings, outputBindings);
+        return new CallingSequence(mt, desc, isTrivial, inputBindings, outputBindings);
     }
 
     private void verifyBindings(boolean forArguments, Class<?> carrier, List<Binding> bindings) {
         if (VERIFY_BINDINGS) {
             if (forUpcall == forArguments) {
