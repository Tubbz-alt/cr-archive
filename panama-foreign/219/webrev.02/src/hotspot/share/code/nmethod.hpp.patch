diff a/src/hotspot/share/code/nmethod.hpp b/src/hotspot/share/code/nmethod.hpp
--- a/src/hotspot/share/code/nmethod.hpp
+++ b/src/hotspot/share/code/nmethod.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -280,10 +280,13 @@
   // JVMTI's GetLocalInstance() also uses these offsets to find the receiver
   // for non-static native wrapper frames.
   ByteSize _native_receiver_sp_offset;
   ByteSize _native_basic_lock_sp_offset;
 
+  address* _native_stubs;
+  int _num_stubs;
+
   friend class nmethodLocker;
 
   // For native wrappers
   nmethod(Method* method,
           CompilerType type,
@@ -310,11 +313,13 @@
           int frame_size,
           OopMapSet* oop_maps,
           ExceptionHandlerTable* handler_table,
           ImplicitExceptionTable* nul_chk_table,
           AbstractCompiler* compiler,
-          int comp_level
+          int comp_level,
+          address* native_stubs,
+          int num_stubs
 #if INCLUDE_JVMCI
           , char* speculations,
           int speculations_len,
           int jvmci_data_size
 #endif
@@ -358,11 +363,13 @@
                               int frame_size,
                               OopMapSet* oop_maps,
                               ExceptionHandlerTable* handler_table,
                               ImplicitExceptionTable* nul_chk_table,
                               AbstractCompiler* compiler,
-                              int comp_level
+                              int comp_level,
+                              address* native_stubs = NULL,
+                              int num_stubs = 0
 #if INCLUDE_JVMCI
                               , char* speculations = NULL,
                               int speculations_len = 0,
                               int nmethod_mirror_index = -1,
                               const char* nmethod_mirror_name = NULL,
@@ -523,10 +530,12 @@
   }
 
   void copy_values(GrowableArray<jobject>* oops);
   void copy_values(GrowableArray<Metadata*>* metadata);
 
+  void free_native_stubs();
+
   // Relocation support
 private:
   void fix_oop_relocations(address begin, address end, bool initialize_immediates);
   inline void initialize_immediate_oop(oop* dest, jobject handle);
 
