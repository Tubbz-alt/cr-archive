diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java
@@ -1,7 +1,7 @@
 /*
- *  Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ *  Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  *  This code is free software; you can redistribute it and/or modify it
  *  under the terms of the GNU General Public License version 2 only, as
  *  published by the Free Software Foundation.
@@ -26,30 +26,50 @@
 import java.lang.constant.ConstantDesc;
 import java.lang.constant.ConstantDescs;
 import java.lang.constant.DynamicConstantDesc;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 /**
  * A function descriptor is made up of zero or more argument layouts and one return  A function descriptor
  * is used to model the signature of native functions.
  */
 public final class FunctionDescriptor implements Constable {
+    public static final String IS_TRIVIAL = "abi/is_trivial";
     
     private final MemoryLayout resLayout;
     private final MemoryLayout[] argLayouts;
+    private final Map<String, Constable> attributes;
 
-    private FunctionDescriptor(MemoryLayout resLayout, MemoryLayout... argLayouts) {
+    private FunctionDescriptor(MemoryLayout resLayout, Map<String, Constable> attributes, MemoryLayout... argLayouts) {
         this.resLayout = resLayout;
+        this.attributes = Collections.unmodifiableMap(attributes);
         this.argLayouts = argLayouts;
     }
 
+    public Optional<Constable> attribute(String name) {
+        return Optional.ofNullable(attributes.get(name));
+    }
+
+    public Stream<String> attributes() {
+        return attributes.keySet().stream();
+    }
+
+    public FunctionDescriptor withAttribute(String name, Constable value) {
+        Map<String, Constable> newAttributes = new HashMap<>(attributes);
+        newAttributes.put(name, value);
+        return new FunctionDescriptor(resLayout, newAttributes, argLayouts);
+    }
+
     /**
      * Returns the return foreign.layout associated with this function.
      * @return the return
      */
     public Optional<MemoryLayout> returnLayout() {
@@ -69,20 +89,20 @@
      * @param resLayout the return
      * @param argLayouts the argument layouts.
      * @return the new function descriptor.
      */
     public static FunctionDescriptor of(MemoryLayout resLayout, MemoryLayout... argLayouts) {
-        return new FunctionDescriptor(resLayout, argLayouts);
+        return new FunctionDescriptor(resLayout, Map.of(), argLayouts);
     }
 
     /**
      * Create a void function descriptor with given argument layouts.
      * @param argLayouts the argument layouts.
      * @return the new function descriptor.
      */
     public static FunctionDescriptor ofVoid(MemoryLayout... argLayouts) {
-        return new FunctionDescriptor(null, argLayouts);
+        return new FunctionDescriptor(null, Map.of(), argLayouts);
     }
 
     /**
      * Create a new function descriptor with the given argument layouts appended to the argument layout array
      * of this function descriptor.
@@ -90,20 +110,20 @@
      * @return the new function descriptor
      */
     public FunctionDescriptor appendArgumentLayouts(MemoryLayout... addedLayouts) {
         MemoryLayout[] newLayouts = Arrays.copyOf(argLayouts, argLayouts.length + addedLayouts.length);
         System.arraycopy(addedLayouts, 0, newLayouts, argLayouts.length, addedLayouts.length);
-        return new FunctionDescriptor(resLayout, newLayouts);
+        return new FunctionDescriptor(resLayout, attributes, newLayouts);
     }
 
     /**
      * Create a new function descriptor with the given memory layout as the new return layout.
      * @param newReturn the new return layout
      * @return the new function descriptor
      */
     public FunctionDescriptor changeReturnLayout(MemoryLayout newReturn) {
-        return new FunctionDescriptor(newReturn, argLayouts);
+        return new FunctionDescriptor(newReturn, attributes, argLayouts);
     }
 
     /**
      * Returns a string representation of this function descriptor.
      * @return a string representation of this function descriptor.
