diff a/src/hotspot/share/code/nmethod.cpp b/src/hotspot/share/code/nmethod.cpp
--- a/src/hotspot/share/code/nmethod.cpp
+++ b/src/hotspot/share/code/nmethod.cpp
@@ -493,11 +493,13 @@
   CodeBuffer* code_buffer, int frame_size,
   OopMapSet* oop_maps,
   ExceptionHandlerTable* handler_table,
   ImplicitExceptionTable* nul_chk_table,
   AbstractCompiler* compiler,
-  int comp_level
+  int comp_level,
+  address* native_stubs,
+  int num_stubs
 #if INCLUDE_JVMCI
   , char* speculations,
   int speculations_len,
   int nmethod_mirror_index,
   const char* nmethod_mirror_name,
@@ -530,11 +532,13 @@
             orig_pc_offset, debug_info, dependencies, code_buffer, frame_size,
             oop_maps,
             handler_table,
             nul_chk_table,
             compiler,
-            comp_level
+            comp_level,
+            native_stubs,
+            num_stubs
 #if INCLUDE_JVMCI
             , speculations,
             speculations_len,
             jvmci_data_size
 #endif
@@ -594,11 +598,12 @@
   ByteSize basic_lock_sp_offset,
   OopMapSet* oop_maps )
   : CompiledMethod(method, "native nmethod", type, nmethod_size, sizeof(nmethod), code_buffer, offsets->value(CodeOffsets::Frame_Complete), frame_size, oop_maps, false),
   _is_unloading_state(0),
   _native_receiver_sp_offset(basic_lock_owner_sp_offset),
-  _native_basic_lock_sp_offset(basic_lock_sp_offset)
+  _native_basic_lock_sp_offset(basic_lock_sp_offset),
+  _native_stubs(NULL), _num_stubs(0)
 {
   {
     int scopes_data_offset   = 0;
     int deoptimize_offset    = 0;
     int deoptimize_mh_offset = 0;
@@ -714,21 +719,24 @@
   int frame_size,
   OopMapSet* oop_maps,
   ExceptionHandlerTable* handler_table,
   ImplicitExceptionTable* nul_chk_table,
   AbstractCompiler* compiler,
-  int comp_level
+  int comp_level,
+  address* native_stubs,
+  int num_stubs
 #if INCLUDE_JVMCI
   , char* speculations,
   int speculations_len,
   int jvmci_data_size
 #endif
   )
   : CompiledMethod(method, "nmethod", type, nmethod_size, sizeof(nmethod), code_buffer, offsets->value(CodeOffsets::Frame_Complete), frame_size, oop_maps, false),
   _is_unloading_state(0),
   _native_receiver_sp_offset(in_ByteSize(-1)),
-  _native_basic_lock_sp_offset(in_ByteSize(-1))
+  _native_basic_lock_sp_offset(in_ByteSize(-1)),
+  _native_stubs(native_stubs), _num_stubs(num_stubs)
 {
   assert(debug_info->oop_recorder() == code_buffer->oop_recorder(), "shared OR");
   {
     debug_only(NoSafepointVerifier nsv;)
     assert_locked_or_safepoint(CodeCache_lock);
@@ -1037,10 +1045,21 @@
   for (int index = 0 ; index < length; index++) {
     dest[index] = array->at(index);
   }
 }
 
+void nmethod::free_native_stubs() {
+  if (_native_stubs != NULL) {
+    for (int i = 0; i < _num_stubs; i++) {
+      CodeBlob* cb = CodeCache::find_blob((char*)  _native_stubs[i]);
+      assert(cb != NULL, "Expected to find blob");
+      CodeCache::free(cb);
+    }
+    FREE_C_HEAP_ARRAY(address, _native_stubs);
+  }
+}
+
 void nmethod::fix_oop_relocations(address begin, address end, bool initialize_immediates) {
   // re-patch all oop-bearing instructions, just in case some oops moved
   RelocIterator iter(this, begin, end);
   while (iter.next()) {
     if (iter.type() == relocInfo::oop_type) {
