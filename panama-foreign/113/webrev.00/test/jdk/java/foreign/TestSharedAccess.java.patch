diff a/test/jdk/java/foreign/TestSharedAccess.java b/test/jdk/java/foreign/TestSharedAccess.java
--- a/test/jdk/java/foreign/TestSharedAccess.java
+++ b/test/jdk/java/foreign/TestSharedAccess.java
@@ -136,10 +136,27 @@
             new Thread(r).start();
             Thread.sleep(5000);
         } //should fail here!
     }
 
+    @Test(expectedExceptions=IllegalStateException.class)
+    public void testBadCloseWithPendingAcquireBuffer() throws InterruptedException {
+        MemorySegment segment = MemorySegment.allocateNative(16);
+        Spliterator<MemorySegment> spliterator = segment.spliterator(MemoryLayout.ofSequence(16, MemoryLayouts.JAVA_BYTE));
+        Runnable r = () -> spliterator.forEachRemaining(s -> {
+            try {
+                Thread.sleep(5000 * 100);
+            } catch (InterruptedException ex) {
+                throw new AssertionError(ex);
+            }
+        });
+        new Thread(r).start();
+        Thread.sleep(5000);
+        segment = MemorySegment.ofByteBuffer(segment.asByteBuffer()); // original segment is lost
+        segment.close(); // this should still fail
+    }
+
     @Test
     public void testOutsideConfinementThread() throws Throwable {
         CountDownLatch a = new CountDownLatch(1);
         CountDownLatch b = new CountDownLatch(1);
         CompletableFuture<?> r;
