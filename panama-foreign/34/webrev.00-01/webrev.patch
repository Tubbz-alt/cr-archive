diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
@@ -189,11 +189,11 @@
     // Helper methods
 
     void checkRange(long offset, long length, boolean writeAccess) {
         checkValidState();
         if (isSet(NO_ACCESS)) {
-            throw new UnsupportedOperationException("Segment cannot be dereferenced");
+            throw new UnsupportedOperationException("Segment cannot be accessed");
         } else if (isReadOnly() && writeAccess) {
             throw new UnsupportedOperationException("Cannot write to read-only memory segment");
         }
         checkBounds(offset, length);
     }
diff a/test/jdk/java/foreign/TestAddressHandle.java b/test/jdk/java/foreign/TestAddressHandle.java
--- a/test/jdk/java/foreign/TestAddressHandle.java
+++ b/test/jdk/java/foreign/TestAddressHandle.java
@@ -43,11 +43,11 @@
             MemoryAddress address = (MemoryAddress)addrHandle.get(segment.baseAddress());
             assertEquals(address.offset(), 42L);
             try {
                 longHandle.get(address); // check OOB
                 fail();
-            } catch (IndexOutOfBoundsException ex) {
+            } catch (UnsupportedOperationException ex) {
                 assertTrue(true);
             }
             addrHandle.set(segment.baseAddress(), address.addOffset(1));
             long result = (long)longHandle.get(segment.baseAddress());
             assertEquals(43L, result);
diff a/test/jdk/java/foreign/TestSegments.java b/test/jdk/java/foreign/TestSegments.java
--- a/test/jdk/java/foreign/TestSegments.java
+++ b/test/jdk/java/foreign/TestSegments.java
@@ -102,11 +102,11 @@
         for (long value : values) {
             MemoryAddress addr = MemoryAddress.ofLong(value);
             try {
                 longHandle.get(addr);
             } catch (UnsupportedOperationException ex) {
-                assertTrue(ex.getMessage().contains("cannot be dereferenced"));
+                assertTrue(ex.getMessage().contains("cannot be accessed"));
             }
         }
     }
 
     @Test
diff a/test/jdk/java/foreign/TestUpcallStubs.java b/test/jdk/java/foreign/TestUpcallStubs.java
--- a/test/jdk/java/foreign/TestUpcallStubs.java
+++ b/test/jdk/java/foreign/TestUpcallStubs.java
@@ -56,11 +56,11 @@
 
     private static MemoryAddress getStub() {
         return abi.upcallStub(MH_dummy, FunctionDescriptor.ofVoid());
     }
 
-    @Test(expectedExceptions = IndexOutOfBoundsException.class)
+    @Test(expectedExceptions = UnsupportedOperationException.class)
     public void testNoAccess() {
         MemoryAddress stub = getStub();
         try {
             VarHandle vh = JAVA_INT.varHandle(int.class);
             vh.set(stub, 10);
