diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
@@ -58,18 +58,23 @@
     final Thread owner;
     final MemoryScope scope;
 
     final static int READ_ONLY = 1;
     final static int SMALL = READ_ONLY << 1;
+    final static int NO_ACCESS = SMALL << 1;
     final static long NONCE = new Random().nextLong();
 
     public static MemorySegmentImpl NOTHING =
-            new MemorySegmentImpl(0, null, 0, 0, null, MemoryScope.GLOBAL);
+            new MemorySegmentImpl(0, null, 0, NO_ACCESS, null, MemoryScope.GLOBAL);
 
-    public MemorySegmentImpl(long min, Object base, long length, int mask, Thread owner, MemoryScope scope) {
+    public MemorySegmentImpl(long min, Object base, long length, Thread owner, MemoryScope scope) {
+        this(min, base, length, length > Integer.MAX_VALUE ? 0 : SMALL, owner, scope);
+    }
+
+    private MemorySegmentImpl(long min, Object base, long length, int mask, Thread owner, MemoryScope scope) {
         this.length = length;
-        this.mask = length > Integer.MAX_VALUE ? mask : (mask | SMALL);
+        this.mask = mask;
         this.min = min;
         this.base = base;
         this.owner = owner;
         this.scope = scope;
     }
@@ -183,11 +188,13 @@
 
     // Helper methods
 
     void checkRange(long offset, long length, boolean writeAccess) {
         checkValidState();
-        if (isReadOnly() && writeAccess) {
+        if (isSet(NO_ACCESS)) {
+            throw new UnsupportedOperationException("Segment cannot be dereferenced");
+        } else if (isReadOnly() && writeAccess) {
             throw new UnsupportedOperationException("Cannot write to read-only memory segment");
         }
         checkBounds(offset, length);
     }
 
