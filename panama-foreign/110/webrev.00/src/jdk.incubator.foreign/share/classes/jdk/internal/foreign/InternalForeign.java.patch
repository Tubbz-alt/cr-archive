diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
@@ -47,22 +47,30 @@
         return INSTANCE;
     }
 
     @Override
     public MemoryAddress withSize(MemoryAddress base, long byteSize) throws IllegalAccessError {
-        return Utils.makeNativeSegmentUnchecked(base.toRawLongValue(), byteSize, null, false)
+        checkRawNativeAddress(base);
+        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(base.toRawLongValue(), byteSize, null, false)
                 .baseAddress();
     }
 
     @Override
     public MemorySegment asMallocSegment(MemoryAddress base, long byteSize) throws IllegalAccessError {
-        return Utils.makeNativeSegmentUnchecked(base.toRawLongValue(), byteSize, Thread.currentThread(), true);
+        checkRawNativeAddress(base);
+        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(base.toRawLongValue(), byteSize, Thread.currentThread(), true);
+    }
+
+    private void checkRawNativeAddress(MemoryAddress base) {
+        if (base.segment() != AbstractMemorySegmentImpl.NOTHING) {
+            throw new IllegalArgumentException("Not an unchecked memory address");
+        }
     }
 
     @Override
     public MemorySegment asUnconfined(MemorySegment segment) {
-        return ((MemorySegmentImpl)segment).asUnconfined();
+        return ((NativeMemorySegmentImpl)segment).asUnconfined();
     }
 
     private static void checkRestrictedAccess() {
         switch (foreignAccess) {
             case "deny" -> throwIllegalAccessError(foreignAccess);
