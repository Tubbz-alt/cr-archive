diff a/make/modules/jdk.incubator.jextract/Launcher.gmk b/make/modules/jdk.incubator.jextract/Launcher.gmk
--- a/make/modules/jdk.incubator.jextract/Launcher.gmk
+++ b/make/modules/jdk.incubator.jextract/Launcher.gmk
@@ -25,7 +25,8 @@
 
 include LauncherCommon.gmk
 
 $(eval $(call SetupBuildLauncher, jextract,\
     CFLAGS := -DENABLE_ARG_FILES, \
+    JAVA_ARGS := -Dforeign.restricted=permit, \
     MAIN_CLASS := jdk.incubator.jextract.tool.Main, \
 ))
diff a/src/jdk.incubator.foreign/share/classes/module-info.java b/src/jdk.incubator.foreign/share/classes/module-info.java
--- a/src/jdk.incubator.foreign/share/classes/module-info.java
+++ b/src/jdk.incubator.foreign/share/classes/module-info.java
@@ -30,8 +30,6 @@
  *
  * @moduleGraph
  */
 module jdk.incubator.foreign {
     exports jdk.incubator.foreign;
-    exports jdk.internal.foreign.abi to jdk.incubator.jextract;
-    exports jdk.internal.foreign to jdk.incubator.jextract;
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -26,12 +26,10 @@
 
 import jdk.incubator.foreign.*;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Type;
 import jdk.incubator.jextract.Type.Primitive;
-import jdk.internal.foreign.abi.SharedUtils;
-
 import javax.tools.JavaFileObject;
 import javax.tools.SimpleJavaFileObject;
 import java.io.IOException;
 import java.io.UncheckedIOException;
 import java.lang.constant.ClassDesc;
@@ -119,11 +117,11 @@
         this.constantHelper = constantHelper;
     }
 
     private static String getCLangConstantsHolder() {
         String prefix = "jdk.incubator.foreign.CSupport.";
-        String abi = SharedUtils.getSystemLinker().name();
+        String abi = CSupport.getSystemLinker().name();
         switch (abi) {
             case CSupport.SysV.NAME:
                 return prefix + "SysV";
             case CSupport.Win64.NAME:
                 return prefix + "Win64";
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/LibClang.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/LibClang.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/LibClang.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/LibClang.java
@@ -30,11 +30,10 @@
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.internal.clang.libclang.Index_h;
-import jdk.internal.foreign.abi.SharedUtils;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodType;
 
 public class LibClang {
@@ -48,11 +47,11 @@
     static {
         if (!CRASH_RECOVERY) {
             //this is an hack - needed because clang_toggleCrashRecovery only takes effect _after_ the
             //first call to createIndex.
             try {
-                ForeignLinker abi = SharedUtils.getSystemLinker();
+                ForeignLinker abi = CSupport.getSystemLinker();
                 String putenv = abi.name().equals(CSupport.Win64.NAME) ?
                         "_putenv" : "putenv";
                 MethodHandle PUT_ENV = abi.downcallHandle(LibraryLookup.ofDefault().lookup(putenv),
                                 MethodType.methodType(int.class, MemoryAddress.class),
                                 FunctionDescriptor.of(CSupport.C_INT, CSupport.C_POINTER));
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
@@ -29,11 +29,10 @@
 import jdk.incubator.foreign.CSupport;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.internal.clang.libclang.Index_h;
-import jdk.internal.foreign.MemoryAddressImpl;
 
 import java.io.IOException;
 import java.nio.file.Path;
 import java.util.Objects;
 import java.util.function.Consumer;
@@ -155,11 +154,11 @@
             return size;
         }
 
         public MemorySegment getTokenSegment(int idx) {
             MemoryAddress p = ar.addOffset(idx * Index_h.CXToken$LAYOUT.byteSize());
-            return MemoryAddressImpl.ofLongUnchecked(p.toRawLongValue(), Index_h.CXToken$LAYOUT.byteSize()).segment();
+            return MemorySegment.ofNativeRestricted(p, Index_h.CXToken$LAYOUT.byteSize(), null, null, null);
         }
 
         public Token getToken(int index) {
             return new Token(getTokenSegment(index));
         }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Utils.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Utils.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Utils.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Utils.java
@@ -25,49 +25,24 @@
  */
 
 package jdk.internal.clang;
 
 import jdk.incubator.foreign.CSupport;
-import jdk.incubator.foreign.FunctionDescriptor;
-import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
-import jdk.internal.foreign.abi.SharedUtils;
-
-import java.lang.invoke.MethodHandle;
-import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
 
 public class Utils {
     public static final VarHandle BYTE_VH = CSupport.C_CHAR.varHandle(byte.class);
     public static final VarHandle BYTE_ARR_VH = MemoryHandles.withStride(BYTE_VH, 1);
     public static final VarHandle INT_VH = CSupport.C_INT.varHandle(int.class);
     public static final VarHandle LONG_VH = CSupport.C_LONGLONG.varHandle(long.class);
     public static final VarHandle POINTER_VH = MemoryHandles.asAddressVarHandle(CSupport.C_POINTER.varHandle(long.class));
     public static final VarHandle POINTER_ARR_VH = MemoryHandles.withStride(POINTER_VH, 8);
 
-    private static final MethodHandle STRLEN;
-    private static final MethodHandle STRCPY;
-
-    static {
-        try {
-            STRLEN = SharedUtils.getSystemLinker().downcallHandle(
-                    LibraryLookup.ofDefault().lookup("strlen"),
-                    MethodType.methodType(int.class, MemoryAddress.class),
-                    FunctionDescriptor.of(CSupport.C_INT, CSupport.C_POINTER));
-
-            STRCPY = SharedUtils.getSystemLinker().downcallHandle(
-                    LibraryLookup.ofDefault().lookup("strcpy"),
-                    MethodType.methodType(MemoryAddress.class, MemoryAddress.class, MemoryAddress.class),
-                    FunctionDescriptor.of(CSupport.C_POINTER, CSupport.C_POINTER, CSupport.C_POINTER));
-        } catch (Throwable ex) {
-            throw new ExceptionInInitializerError(ex);
-        }
-    }
-
     static int getInt(MemoryAddress addr) {
         return (int)INT_VH.get(addr);
     }
 
     static void setInt(MemoryAddress addr, int i) {
@@ -107,38 +82,12 @@
         }
         BYTE_ARR_VH.set(addr, (long)value.length(), (byte)0);
         return segment;
     }
 
-    static int strlen(MemoryAddress str) {
-        try {
-            return (int)STRLEN.invokeExact(str);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-
-    static MemoryAddress strcpy(MemoryAddress dest, MemoryAddress src) {
-        try {
-            return (MemoryAddress)STRCPY.invokeExact(dest, src);
-        } catch (Throwable ex) {
-            throw new AssertionError(ex);
-        }
-    }
-
     static String toJavaString(MemoryAddress address) {
-        try (MemorySegment str = MemorySegment.allocateNative(strlen(address) + 1)) {
-            strcpy(str.baseAddress(), address);
-            StringBuilder buf = new StringBuilder();
-            byte curr = (byte)BYTE_ARR_VH.get(str.baseAddress(), 0);
-            long offset = 0;
-            while (curr != 0) {
-                buf.append((char)curr); // interpreting as UTF-16 ?
-                curr = (byte)BYTE_ARR_VH.get(str.baseAddress(), ++offset);
-            }
-            return buf.toString();
-        }
+        return CSupport.toJavaStringRestricted(address);
     }
 
     static MemorySegment toNativeStringArray(String[] ar) {
         if (ar.length == 0) {
             return null;
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java
@@ -25,17 +25,17 @@
  */
 
 package jdk.internal.clang.libclang;
 // Generated by jextract
 
+import jdk.incubator.foreign.CSupport;
 import jdk.incubator.foreign.ForeignLinker;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
-import jdk.internal.foreign.abi.SharedUtils;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.nio.file.Files;
@@ -44,11 +44,11 @@
 import java.util.Arrays;
 import java.util.Optional;
 
 public class RuntimeHelper {
 
-    private final static ForeignLinker ABI = SharedUtils.getSystemLinker();
+    private final static ForeignLinker ABI = CSupport.getSystemLinker();
 
     private final static ClassLoader LOADER = RuntimeHelper.class.getClassLoader();
 
     private final static MethodHandles.Lookup MH_LOOKUP = MethodHandles.lookup();
 
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
@@ -31,20 +31,18 @@
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.jextract.Type.Primitive;
 import jdk.internal.clang.Cursor;
 import jdk.internal.clang.Type;
-import jdk.internal.foreign.abi.SharedUtils;
-
 import java.util.Optional;
 import java.util.function.Supplier;
 
 /**
  * General Layout utility functions
  */
 public final class LayoutUtils {
-    private static ForeignLinker abi = SharedUtils.getSystemLinker();
+    private static ForeignLinker abi = CSupport.getSystemLinker();
     private LayoutUtils() {}
 
     public static String getName(Type type) {
         Cursor c = type.getDeclarationCursor();
         if (c.isInvalid()) {
diff a/test/jdk/java/jextract/SmokeTest.java b/test/jdk/java/jextract/SmokeTest.java
--- a/test/jdk/java/jextract/SmokeTest.java
+++ b/test/jdk/java/jextract/SmokeTest.java
@@ -22,11 +22,11 @@
  */
 
 /*
  * @test
  * @build JextractApiTestBase
- * @run testng SmokeTest
+ * @run testng/othervm -Dforeign.restricted=permit SmokeTest
  */
 
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Type;
 import org.testng.annotations.Test;
diff a/test/jdk/java/jextract/Test8238712.java b/test/jdk/java/jextract/Test8238712.java
--- a/test/jdk/java/jextract/Test8238712.java
+++ b/test/jdk/java/jextract/Test8238712.java
@@ -22,11 +22,11 @@
  */
 
 /*
  * @test
  * @build JextractApiTestBase
- * @run testng Test8238712
+ * @run testng/othervm -Dforeign.restricted=permit Test8238712
  */
 
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Type;
 import org.testng.annotations.Test;
diff a/test/jdk/java/jextract/Test8239490.java b/test/jdk/java/jextract/Test8239490.java
--- a/test/jdk/java/jextract/Test8239490.java
+++ b/test/jdk/java/jextract/Test8239490.java
@@ -22,11 +22,11 @@
  */
 
 /*
  * @test
  * @build JextractApiTestBase
- * @run testng Test8239490
+ * @run testng/othervm -Dforeign.restricted=permit Test8239490
  */
 
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Type;
 import org.testng.annotations.Test;
diff a/test/jdk/java/jextract/Test8240372.java b/test/jdk/java/jextract/Test8240372.java
--- a/test/jdk/java/jextract/Test8240372.java
+++ b/test/jdk/java/jextract/Test8240372.java
@@ -22,11 +22,11 @@
  */
 
 /*
  * @test
  * @build JextractApiTestBase
- * @run testng Test8240372
+ * @run testng/othervm -Dforeign.restricted=permit Test8240372
  */
 
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Type;
 import org.testng.annotations.Test;
diff a/test/jdk/java/jextract/Test8240853.java b/test/jdk/java/jextract/Test8240853.java
--- a/test/jdk/java/jextract/Test8240853.java
+++ b/test/jdk/java/jextract/Test8240853.java
@@ -22,11 +22,11 @@
  */
 
 /*
  * @test
  * @build JextractApiTestBase
- * @run testng Test8240853
+ * @run testng/othervm -Dforeign.restricted=permit Test8240853
  */
 
 import jdk.incubator.jextract.Declaration;
 import org.testng.annotations.Test;
 
diff a/test/jdk/java/jextract/TestAttributes.java b/test/jdk/java/jextract/TestAttributes.java
--- a/test/jdk/java/jextract/TestAttributes.java
+++ b/test/jdk/java/jextract/TestAttributes.java
@@ -23,11 +23,11 @@
 
 /*
  * @test
  * @bug 8239808
  * @build JextractApiTestBase
- * @run testng TestAttributes
+ * @run testng/othervm -Dforeign.restricted=permit TestAttributes
  */
 
 import java.lang.constant.Constable;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
diff a/test/jdk/java/jextract/TestMacros.java b/test/jdk/java/jextract/TestMacros.java
--- a/test/jdk/java/jextract/TestMacros.java
+++ b/test/jdk/java/jextract/TestMacros.java
@@ -23,11 +23,11 @@
 
 /*
  * @test
  * @bug 8239128
  * @build JextractApiTestBase
- * @run testng TestMacros
+ * @run testng/othervm -Dforeign.restricted=permit TestMacros
  */
 
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import jdk.incubator.jextract.Declaration;
diff a/test/jdk/java/jextract/TestTypedef.java b/test/jdk/java/jextract/TestTypedef.java
--- a/test/jdk/java/jextract/TestTypedef.java
+++ b/test/jdk/java/jextract/TestTypedef.java
@@ -22,11 +22,11 @@
  */
 
 /*
  * @test
  * @build JextractApiTestBase
- * @run testng/othervm -ea TestTypedef
+ * @run testng/othervm -ea -Dforeign.restricted=permit TestTypedef
  */
 
 import java.util.Set;
 import java.util.Optional;
 import java.util.function.Consumer;
diff a/test/jdk/tools/jextract/BadBitfieldTest.java b/test/jdk/tools/jextract/BadBitfieldTest.java
--- a/test/jdk/tools/jextract/BadBitfieldTest.java
+++ b/test/jdk/tools/jextract/BadBitfieldTest.java
@@ -25,11 +25,11 @@
  * @test
  * @requires os.family != "windows"
  * @modules jdk.incubator.jextract
  * @library /test/lib
  * @build BadBitfieldTest
- * @run testng BadBitfieldTest
+ * @run testng/othervm -Dforeign.restricted=permit BadBitfieldTest
  */
 
 /*
  * Not running on Windows since MSVC will not cross storage unit boundaries.
  * Resulting struct on SysV is 16 bytes, but 24 on MSx64
