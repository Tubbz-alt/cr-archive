diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/ConstantHelper.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/ConstantHelper.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/ConstantHelper.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/ConstantHelper.java
@@ -26,10 +26,11 @@
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.MemorySegment;
 import jdk.internal.org.objectweb.asm.ClassWriter;
 import jdk.internal.org.objectweb.asm.ConstantDynamic;
 import jdk.internal.org.objectweb.asm.Handle;
 import jdk.internal.org.objectweb.asm.MethodVisitor;
 import jdk.internal.org.objectweb.asm.Type;
@@ -89,10 +90,17 @@
             desc(MemoryAddress.class),
             "ofLong",
             desc(methodType(MemoryAddress.class, long.class))
     );
 
+    private static final DirectMethodHandleDesc MH_MemorySegment_baseAddress = MethodHandleDesc.ofMethod(
+            Kind.INTERFACE_VIRTUAL,
+            desc(MemorySegment.class),
+            "baseAddress",
+            desc(methodType(MemoryAddress.class))
+    );
+
     private static final DirectMethodHandleDesc BSM_GET_STATIC_FINAL = ConstantDescs.ofConstantBootstrap(
             CD_ConstantBootstraps,
             "getStaticFinal",
             CD_Object,
             CD_Class
@@ -100,10 +108,11 @@
 
     private static final ConstantDesc TRUE = DynamicConstantDesc.ofNamed(BSM_GET_STATIC_FINAL, "TRUE", ConstantDescs.CD_Boolean, ConstantDescs.CD_Boolean);
     private static final ConstantDesc FALSE = DynamicConstantDesc.ofNamed(BSM_GET_STATIC_FINAL, "FALSE", ConstantDescs.CD_Boolean, ConstantDescs.CD_Boolean);
     private static final ClassDesc CD_PathElelemt = desc(MemoryLayout.PathElement.class);
     private static final ClassDesc CD_MemoryAddress = desc(MemoryAddress.class);
+    private static final ClassDesc CD_MemorySegment = desc(MemorySegment.class);
 
     private final DirectMethodHandleDesc MH_downcallHandle;
     private final DirectMethodHandleDesc MH_lookupGlobalVariable;
     private final DirectMethodHandleDesc MH_makeCString;
 
@@ -112,11 +121,11 @@
     private final ClassDesc CD_constantsHelper;
     private final ConstantDesc LIBRARIES;
 
     private final Map<String, DirectMethodHandleDesc> pool = new HashMap<>();
 
-    ConstantHelper(String parentClassName, ClassDesc runtimeHelper, String[] libraryNames) {
+    ConstantHelper(String parentClassName, ClassDesc runtimeHelper, ClassDesc cString, String[] libraryNames) {
         this.cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
         String className = parentClassName + "$constants";
         this.CD_constantsHelper = ClassDesc.of(className);
         this.internalClassName = className.replace('.', '/');
 
@@ -138,14 +147,14 @@
                         MemoryAddress.class,
                         LibraryLookup[].class,
                         String.class)
         );
         this.MH_makeCString = findRuntimeHelperBootstrap(
-                runtimeHelper,
-                "makeCString",
+                cString,
+                "toCString",
                 methodType(
-                        MemoryAddress.class,
+                        MemorySegment.class,
                         String.class)
         );
 
         this.LIBRARIES = librariesDesc(findRuntimeHelperBootstrap(
                 runtimeHelper,
@@ -196,17 +205,17 @@
             } else {
                 throw new IllegalStateException("Unhandled constant value type: " + value.getClass());
             }
         } else if (type.isPrimitive()) {
             if (type == int.class || type == byte.class || type == short.class || type == char.class) {
-                return emitGetter(name, type, mv -> emitConInt(mv, ((Long) value).intValue()));
+                return emitConIntGetter(name, type, ((Long) value).intValue());
             } else if (type == float.class) {
-                return emitGetter(name, type, mv -> emitConFloat(mv, ((Double) value).floatValue()));
+                return emitConFloatGetter(name, type, ((Double) value).floatValue());
             } else if (type == long.class) {
-                return emitGetter(name, type, mv -> emitConLong(mv, (Long) value));
+                return emitConLongGetter(name, type, (Long) value);
             } else if (type == double.class) {
-                return emitGetter(name, type, mv -> emitConDouble(mv, (Double) value));
+                return emitConDoubleGetter(name, type, (Double) value);
             } else { // boolean and void
                 throw new IllegalStateException("Unhandled primitive target type: " + type);
             }
         } else if (type == value.getClass() && value instanceof Constable) {
             // Constable value that requires no conversion
@@ -337,10 +346,26 @@
                     mt.describeConstable().orElseThrow()
             );
         });
     }
 
+    private DirectMethodHandleDesc emitConDoubleGetter(String name, Class<?> type, double value) {
+        return emitGetter(name, type, mv -> emitConDouble(mv, value));
+    }
+
+    private DirectMethodHandleDesc emitConLongGetter(String name, Class<?> type, long value) {
+        return emitGetter(name, type, mv -> emitConLong(mv, value));
+    }
+
+    private DirectMethodHandleDesc emitConFloatGetter(String name, Class<?> type, float value) {
+        return emitGetter(name, type, mv -> emitConFloat(mv, value));
+    }
+
+    private DirectMethodHandleDesc emitConIntGetter(String name, Class<?> type, int value) {
+        return emitGetter(name, type, mv -> emitConInt(mv, value));
+    }
+
     private DirectMethodHandleDesc emitCondyGetter(String name, Class<?> type, ConstantDesc desc) {
         return emitGetter(name, type, mv -> mv.visitLdcInsn(asmConstant(desc)));
     }
 
     private static void emitReturn(MethodVisitor mv, Class<?> type) {
@@ -401,11 +426,13 @@
     private ConstantDesc addressDesc(long value) {
         return DynamicConstantDesc.ofNamed(BSM_INVOKE, "MA_" + value, CD_MemoryAddress, MH_MemoryAddress_ofLong, value);
     }
 
     private ConstantDesc cStringDesc(String value) {
-        return DynamicConstantDesc.ofNamed(BSM_INVOKE, "CSTRING", CD_MemoryAddress, MH_makeCString, value);
+        return DynamicConstantDesc.ofNamed(BSM_INVOKE, "BASEADDRESS", CD_MemoryAddress, MH_MemorySegment_baseAddress,
+            DynamicConstantDesc.ofNamed(BSM_INVOKE, "CSTRING", CD_MemorySegment, MH_makeCString, value)
+        );
     }
 
     private ConstantDesc methodHandleDesc(String name, MethodType mtype, FunctionDescriptor funcDesc, boolean varargs) {
         return DynamicConstantDesc.ofNamed(BSM_INVOKE, "MH_" + name, CD_MethodHandle, MH_downcallHandle,
             LIBRARIES,
