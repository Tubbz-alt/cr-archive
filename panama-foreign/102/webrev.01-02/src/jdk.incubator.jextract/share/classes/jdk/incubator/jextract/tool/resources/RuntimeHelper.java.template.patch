diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
@@ -51,26 +51,10 @@
 
     public static final MemoryAddress lookupGlobalVariable(LibraryLookup[] LIBRARIES, String name) {
         return lookup(LIBRARIES, name).orElse(null);
     }
 
-    public static final MemoryAddress makeCString(String value) {
-        value += '\0';
-        MemorySegment dest = MemorySegment.allocateNative(value.length());
-        // Utils::toJavaString casts bytes to 'char'
-        //     -> interpreted as UTF-16
-        //     -> get back as UTF-8 assuming no surrogate pairs
-        byte[] bytes = value.getBytes(StandardCharsets.UTF_8);
-        if (bytes.length != value.length()) {
-            throw new IllegalStateException("bytes.length != value.length(). " +
-                    "bytes: " + Arrays.toString(bytes) + ", value: " + value);
-        }
-        MemorySegment src = MemorySegment.ofArray(bytes);
-        MemoryAddress.copy(src.baseAddress(), dest.baseAddress(), value.length());
-        return dest.baseAddress();
-    }
-
     public static final MethodHandle downcallHandle(LibraryLookup[] LIBRARIES, String name, String desc, FunctionDescriptor fdesc, boolean variadic) {
         return lookup(LIBRARIES, name).map(
                 addr -> {
                     MethodType mt = MethodType.fromMethodDescriptorString(desc, LOADER);
                     return variadic ?
