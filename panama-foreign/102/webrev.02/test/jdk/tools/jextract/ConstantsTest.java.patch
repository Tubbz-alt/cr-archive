diff a/test/jdk/tools/jextract/ConstantsTest.java b/test/jdk/tools/jextract/ConstantsTest.java
--- a/test/jdk/tools/jextract/ConstantsTest.java
+++ b/test/jdk/tools/jextract/ConstantsTest.java
@@ -24,16 +24,20 @@
 import org.testng.annotations.AfterTest;
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 import java.nio.file.Path;
+import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.SystemABI.Type;
+
+import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
+import static org.testng.Assert.assertSame;
 import static org.testng.Assert.assertTrue;
 
 /*
  * @test
  * @modules jdk.incubator.jextract
@@ -61,19 +65,19 @@
     }
 
 
     @Test(dataProvider = "definedConstants")
     public void checkConstantsSignatures(String name, Class<?> type, Object value) {
-        var f = findField(constants, name);
+        var f = findMethod(constants, name);
         assertNotNull(f);
-        assertTrue(f.getType() == type);
+        assertSame(f.getReturnType(), type);
     }
 
     @Test(dataProvider = "definedConstants")
-    public void checkConstantsValues(String name, Class<?> type, Predicate<Object> checker) throws ReflectiveOperationException {
-        Object actual = findField(constants, name).get(null);
-        assertTrue(checker.test(actual));
+    public void checkConstantsValues(String name, Class<?> type, Consumer<Object> checker) throws ReflectiveOperationException {
+        Object actual = findMethod(constants, name).invoke(null);
+        checker.accept(actual);
     }
 
     @Test(dataProvider = "missingConstants")
     public void checkMissingConstants(String name) {
         assertTrue(Stream.of(constants.getDeclaredFields())
@@ -90,20 +94,20 @@
                 { "THREE", int.class, equalsTo(3) },
                 { "FOUR", long.class, equalsTo(4L) },
                 { "FIVE", long.class, equalsTo(5L) },
                 { "SIX", int.class, equalsTo(6) },
                 { "FLOAT_VALUE", float.class, equalsTo(1.32f) },
-                { "DOUBLE_VALUE", double.class, equalsTo(1.32) },
+                { "DOUBLE_VALUE", double.class, (Consumer<Double>) (actual -> assertEquals(actual, 1.32, 0.1)) },
                 { "CHAR_VALUE", int.class, equalsTo(104) }, //integer char constants have type int
                 { "MULTICHAR_VALUE", int.class, equalsTo(26728) },  //integer char constants have type int
                 { "BOOL_VALUE", byte.class, equalsTo((byte)1) },
                 { "SUB", int.class, equalsTo( 7 ) }
         };
     }
 
-    static Predicate<Object> equalsTo(Object that) {
-        return o -> o.equals(that);
+    static Consumer<Object> equalsTo(Object expected) {
+        return actual -> assertEquals(actual, expected);
     }
 
     @DataProvider
     public static Object[][] missingConstants() {
         return new Object[][] {
