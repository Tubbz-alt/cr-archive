diff a/test/jdk/tools/jextract/Test8240752.java b/test/jdk/tools/jextract/Test8240752.java
--- a/test/jdk/tools/jextract/Test8240752.java
+++ b/test/jdk/tools/jextract/Test8240752.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 import java.lang.reflect.Field;
+import java.lang.reflect.Method;
 import java.nio.file.Path;
 import org.testng.annotations.Test;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.assertTrue;
@@ -36,28 +37,28 @@
  * @summary jextract generates non-compilable code for special floating point values
  * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit Test8240752
  */
 public class Test8240752 extends JextractToolRunner {
     private float getFloatConstant(Class<?> cls, String name) {
-        Field field = findField(cls, name);
-        assertNotNull(field);
-        assertEquals(field.getType(), float.class);
+        Method method = findMethod(cls, name);
+        assertNotNull(method);
+        assertEquals(method.getReturnType(), float.class);
         try {
-            return (float)field.get(null);
+            return (float)method.invoke(null);
         } catch (Exception exp) {
             System.err.println(exp);
             assertTrue(false, "should not reach here");
         }
         return 0.0f;
     }
 
     private double getDoubleConstant(Class<?> cls, String name) {
-        Field field = findField(cls, name);
-        assertNotNull(field);
-        assertEquals(field.getType(), double.class);
+        Method method = findMethod(cls, name);
+        assertNotNull(method);
+        assertEquals(method.getReturnType(), double.class);
         try {
-            return (double)field.get(null);
+            return (double)method.invoke(null);
         } catch (Exception exp) {
             System.err.println(exp);
             assertTrue(false, "should not reach here");
         }
         return 0.0d;
