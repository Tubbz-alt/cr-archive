diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
@@ -9,10 +9,11 @@
 import jdk.incubator.foreign.SystemABI;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.Optional;
 
 import static ${C_LANG}.*;
 
@@ -22,11 +23,11 @@
 
     private final static ClassLoader LOADER = RuntimeHelper.class.getClassLoader();
 
     private final static MethodHandles.Lookup MH_LOOKUP = MethodHandles.lookup();
 
-    static final LibraryLookup[] libraries(String[] libNames) {
+    static final LibraryLookup[] libraries(String... libNames) {
         if (libNames.length == 0) {
             return new LibraryLookup[] { LibraryLookup.ofDefault() };
         } else {
             return Arrays.stream(libNames)
                 .map(libName -> LibraryLookup.ofLibrary(MH_LOOKUP, libName))
@@ -50,10 +51,26 @@
 
     public static final MemoryAddress lookupGlobalVariable(LibraryLookup[] LIBRARIES, String name) {
         return lookup(LIBRARIES, name).orElse(null);
     }
 
+    public static final MemoryAddress makeCString(String value) {
+        value += '\0';
+        MemorySegment dest = MemorySegment.allocateNative(value.length());
+        // Utils::toJavaString casts bytes to 'char'
+        //     -> interpreted as UTF-16
+        //     -> get back as UTF-8 assuming no surrogate pairs
+        byte[] bytes = value.getBytes(StandardCharsets.UTF_8);
+        if (bytes.length != value.length()) {
+            throw new IllegalStateException("bytes.length != value.length(). " +
+                    "bytes: " + Arrays.toString(bytes) + ", value: " + value);
+        }
+        MemorySegment src = MemorySegment.ofArray(bytes);
+        MemoryAddress.copy(src.baseAddress(), dest.baseAddress(), value.length());
+        return dest.baseAddress();
+    }
+
     public static final MethodHandle downcallHandle(LibraryLookup[] LIBRARIES, String name, String desc, FunctionDescriptor fdesc, boolean variadic) {
         return lookup(LIBRARIES, name).map(
                 addr -> {
                     MethodType mt = MethodType.fromMethodDescriptorString(desc, LOADER);
                     return variadic ?
