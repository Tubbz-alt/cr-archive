diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/HeaderBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/HeaderBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/HeaderBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/HeaderBuilder.java
@@ -22,10 +22,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package jdk.incubator.jextract;
 
+import jdk.incubator.foreign.Addressable;
 import jdk.incubator.foreign.FunctionDescriptor;
 import java.lang.invoke.MethodType;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -58,44 +59,48 @@
         sb.append("}\n");
         decrAlign();
         indent();
     }
 
-    public void addStaticFunctionWrapper(String javaName, String nativeName, MethodType mtype, FunctionDescriptor desc, boolean varargs, List<String> paramNames) {
+    public void addStaticFunctionWrapper(String javaName, String nativeName, MethodType sigtype, MethodType mhtype, FunctionDescriptor desc, boolean varargs, List<String> paramNames) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + mtype.returnType().getName() + " " + javaName + " (");
+        sb.append(PUB_MODS + sigtype.returnType().getName() + " " + javaName + " (");
         String delim = "";
-        List<String> pNames = new ArrayList<>();
+        List<String> pExprs = new ArrayList<>();
         final int numParams = paramNames.size();
         for (int i = 0 ; i < numParams; i++) {
             String pName = paramNames.get(i);
             if (pName.isEmpty()) {
                 pName = "x" + i;
             }
-            pNames.add(pName);
-            sb.append(delim + mtype.parameterType(i).getName() + " " + pName);
+            if (sigtype.parameterType(i).equals(Addressable.class)) {
+                pExprs.add(pName + ".address()");
+            } else {
+                pExprs.add(pName);
+            }
+            sb.append(delim + sigtype.parameterType(i).getName() + " " + pName);
             delim = ", ";
         }
         if (varargs) {
             String lastArg = "x" + numParams;
             if (numParams > 0) {
                 sb.append(", ");
             }
             sb.append("Object... " + lastArg);
-            pNames.add(lastArg);
+            pExprs.add(lastArg);
         }
         sb.append(") {\n");
         incrAlign();
         indent();
         sb.append("try {\n");
         incrAlign();
         indent();
-        if (!mtype.returnType().equals(void.class)) {
-            sb.append("return (" + mtype.returnType().getName() + ")");
+        if (!sigtype.returnType().equals(void.class)) {
+            sb.append("return (" + sigtype.returnType().getName() + ")");
         }
-        sb.append(methodHandleGetCallString(javaName, nativeName, mtype, desc, varargs) + ".invokeExact(" + String.join(", ", pNames) + ");\n");
+        sb.append(methodHandleGetCallString(javaName, nativeName, mhtype, desc, varargs) + ".invokeExact(" + String.join(", ", pExprs) + ");\n");
         decrAlign();
         indent();
         sb.append("} catch (Throwable ex) {\n");
         incrAlign();
         indent();
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/OutputFactory.java
@@ -241,25 +241,26 @@
     public Void visitFunction(Declaration.Function funcTree, Declaration parent) {
         if (functionSeen(funcTree)) {
             return null;
         }
 
-        MethodType mtype = typeTranslator.getMethodType(funcTree.type());
+        MethodType sigtype = typeTranslator.getMethodType(funcTree.type(), true, false);
+        MethodType mhtype = typeTranslator.getMethodType(funcTree.type(), false, false);
         FunctionDescriptor descriptor = Type.descriptorFor(funcTree.type()).orElse(null);
         if (descriptor == null) {
             //abort
             return null;
         }
         String mhName = Utils.javaSafeIdentifier(funcTree.name());
-        builder.addMethodHandleGetter(mhName, funcTree.name(), mtype, descriptor, funcTree.type().varargs());
+        builder.addMethodHandleGetter(mhName, funcTree.name(), mhtype, descriptor, funcTree.type().varargs());
         //generate static wrapper for function
         List<String> paramNames = funcTree.parameters()
                                           .stream()
                                           .map(Declaration.Variable::name)
                                           .map(p -> !p.isEmpty() ? Utils.javaSafeIdentifier(p) : p)
                                           .collect(Collectors.toList());
-        builder.addStaticFunctionWrapper(Utils.javaSafeIdentifier(funcTree.name()), funcTree.name(), mtype,
+        builder.addStaticFunctionWrapper(Utils.javaSafeIdentifier(funcTree.name()), funcTree.name(), sigtype, mhtype,
                 Type.descriptorFor(funcTree.type()).orElseThrow(), funcTree.type().varargs(), paramNames);
         int i = 0;
         for (Declaration.Variable param : funcTree.parameters()) {
             Type.Function f = getAsFunctionPointer(param.type());
             if (f != null) {
@@ -267,11 +268,11 @@
                 name = Utils.javaSafeIdentifier(name);
                 //generate functional interface
                 if (f.varargs()) {
                     System.err.println("WARNING: varargs in callbacks is not supported");
                 }
-                MethodType fitype = typeTranslator.getMethodType(f, false);
+                MethodType fitype = typeTranslator.getMethodType(f, false, true);
                 builder.addFunctionalInterface(name, fitype, Type.descriptorFor(f).orElseThrow());
                 i++;
             }
         }
         return null;
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/TypeTranslator.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/TypeTranslator.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/TypeTranslator.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/TypeTranslator.java
@@ -23,21 +23,22 @@
  * questions.
  */
 
 package jdk.incubator.jextract;
 
+import jdk.incubator.foreign.Addressable;
 import jdk.incubator.jextract.Type.Primitive;
 import jdk.incubator.jextract.Type;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 
 import java.lang.invoke.MethodType;
 
-public class TypeTranslator implements Type.Visitor<Class<?>, Void> {
+public class TypeTranslator implements Type.Visitor<Class<?>, Boolean> {
     @Override
-    public Class<?> visitPrimitive(Type.Primitive t, Void aVoid) {
+    public Class<?> visitPrimitive(Type.Primitive t, Boolean allowAddressable) {
         if (t.kind().layout().isEmpty()) {
             return void.class;
         } else {
             return layoutToClass(isFloatingPoint(t), t.kind().layout().orElseThrow(UnsupportedOperationException::new));
         }
@@ -82,23 +83,23 @@
                 throw new UnsupportedOperationException();
         }
     }
 
     @Override
-    public Class<?> visitDelegated(Type.Delegated t, Void aVoid) {
+    public Class<?> visitDelegated(Type.Delegated t, Boolean allowAddressable) {
         return t.kind() == Type.Delegated.Kind.POINTER ?
-                MemoryAddress.class :
-                t.type().accept(this, null);
+                (allowAddressable ? Addressable.class : MemoryAddress.class) :
+                t.type().accept(this, allowAddressable);
     }
 
     @Override
-    public Class<?> visitFunction(Type.Function t, Void aVoid) {
+    public Class<?> visitFunction(Type.Function t, Boolean allowAddressable) {
         return MemoryAddress.class; // function pointer
     }
 
     @Override
-    public Class<?> visitDeclared(Type.Declared t, Void aVoid) {
+    public Class<?> visitDeclared(Type.Declared t, Boolean allowAddressable) {
         switch (t.tree().kind()) {
             case UNION:
             case STRUCT:
                 return MemorySegment.class;
             case ENUM:
@@ -107,37 +108,37 @@
                 throw new UnsupportedOperationException();
         }
     }
 
     @Override
-    public Class<?> visitArray(Type.Array t, Void aVoid) {
+    public Class<?> visitArray(Type.Array t, Boolean allowAddressable) {
         if (t.kind() == Type.Array.Kind.VECTOR) {
             throw new UnsupportedOperationException();
         } else {
             return MemorySegment.class;
         }
     }
 
     @Override
-    public Class<?> visitType(Type t, Void aVoid) {
+    public Class<?> visitType(Type t, Boolean allowAddressable) {
         throw new UnsupportedOperationException();
     }
 
     Class<?> getJavaType(Type t) {
-        return t.accept(this, null);
+        return t.accept(this, false);
     }
 
-    MethodType getMethodType(Type.Function type) {
-        return getMethodType(type, true);
+    Class<?> getJavaType(Type t, boolean allowAddressable) {
+        return t.accept(this, allowAddressable);
     }
 
-    MethodType getMethodType(Type.Function type, boolean varargsCheck) {
-        MethodType mtype = MethodType.methodType(getJavaType(type.returnType()));
+    MethodType getMethodType(Type.Function type, boolean allowAddressable, boolean upcall) {
+        MethodType mtype = MethodType.methodType(getJavaType(type.returnType(), false));
         for (Type arg : type.argumentTypes()) {
-            mtype = mtype.appendParameterTypes(getJavaType(arg));
+            mtype = mtype.appendParameterTypes(getJavaType(arg, allowAddressable));
         }
-        if (varargsCheck && type.varargs()) {
+        if (!upcall && type.varargs()) {
             mtype = mtype.appendParameterTypes(Object[].class);
         }
         return mtype;
     }
 }
diff a/test/jdk/tools/jextract/JextractToolProviderTest.java b/test/jdk/tools/jextract/JextractToolProviderTest.java
--- a/test/jdk/tools/jextract/JextractToolProviderTest.java
+++ b/test/jdk/tools/jextract/JextractToolProviderTest.java
@@ -22,10 +22,12 @@
  */
 
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+
+import jdk.incubator.foreign.Addressable;
 import jdk.incubator.foreign.MemoryAddress;
 
 import org.testng.annotations.Test;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertFalse;
@@ -66,11 +68,11 @@
         try(Loader loader = classLoader(helloOutput)) {
             Class<?> cls = loader.loadClass("hello_h");
             // check a method for "void func(int)"
             assertNotNull(findMethod(cls, "func", int.class));
             // check a method for "int printf(MemoryAddress, Object[])"
-            assertNotNull(findMethod(cls, "printf", MemoryAddress.class, Object[].class));
+            assertNotNull(findMethod(cls, "printf", Addressable.class, Object[].class));
         } finally {
             deleteDir(helloOutput);
         }
     }
 
@@ -82,11 +84,11 @@
         try(Loader loader = classLoader(helloOutput)) {
             Class<?> cls = loader.loadClass("com.acme.hello_h");
             // check a method for "void func(int)"
             assertNotNull(findMethod(cls, "func", int.class));
             // check a method for "int printf(MemoryAddress, Object[])"
-            assertNotNull(findMethod(cls, "printf", MemoryAddress.class, Object[].class));
+            assertNotNull(findMethod(cls, "printf", Addressable.class, Object[].class));
         } finally {
             deleteDir(helloOutput);
         }
     }
 
diff a/test/jdk/tools/jextract/RepeatedDeclsTest.java b/test/jdk/tools/jextract/RepeatedDeclsTest.java
--- a/test/jdk/tools/jextract/RepeatedDeclsTest.java
+++ b/test/jdk/tools/jextract/RepeatedDeclsTest.java
@@ -19,16 +19,16 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
+import jdk.incubator.foreign.Addressable;
 import jdk.incubator.foreign.CSupport;
 import org.testng.annotations.Test;
 
 import java.nio.file.Path;
 import jdk.incubator.foreign.GroupLayout;
-import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.assertTrue;
 
@@ -54,14 +54,14 @@
 
             // check a method for "void func2(int)"
             assertNotNull(findMethod(cls, "func2", int.class));
 
             // check a method for "void func3(int*)"
-            assertNotNull(findMethod(cls, "func3", MemoryAddress.class));
+            assertNotNull(findMethod(cls, "func3", Addressable.class));
 
             // check a method for "void func4(int*)"
-            assertNotNull(findMethod(cls, "func4", MemoryAddress.class));
+            assertNotNull(findMethod(cls, "func4", Addressable.class));
 
             // check a method for "void func5(int)"
             assertNotNull(findMethod(cls, "func5", int.class));
 
             // check a method for "double distance(struct Point)"
diff a/test/jdk/tools/jextract/Test8249290.java b/test/jdk/tools/jextract/Test8249290.java
--- a/test/jdk/tools/jextract/Test8249290.java
+++ b/test/jdk/tools/jextract/Test8249290.java
@@ -20,11 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 import java.nio.file.Path;
-import jdk.incubator.foreign.MemoryAddress;
+
+import jdk.incubator.foreign.Addressable;
 import org.testng.annotations.Test;
 
 /*
  * @test
  * @library /test/lib
@@ -40,11 +41,11 @@
         Path outputPath = getOutputFilePath("output8249290");
         Path headerFile = getInputFilePath("test8249290.h");
         run("-d", outputPath.toString(), headerFile.toString()).checkSuccess();
         try(Loader loader = classLoader(outputPath)) {
             Class<?> headerClass = loader.loadClass("test8249290_h");
-            checkMethod(headerClass, "func", void.class, MemoryAddress.class);
+            checkMethod(headerClass, "func", void.class, Addressable.class);
             Class<?> fiClass = loader.loadClass("test8249290_h$func$f");
             checkMethod(fiClass, "apply", void.class);
         } finally {
             deleteDir(outputPath);
         }
diff a/test/jdk/tools/jextract/Test8249300.java b/test/jdk/tools/jextract/Test8249300.java
--- a/test/jdk/tools/jextract/Test8249300.java
+++ b/test/jdk/tools/jextract/Test8249300.java
@@ -20,11 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 import java.nio.file.Path;
-import jdk.incubator.foreign.MemoryAddress;
+
+import jdk.incubator.foreign.Addressable;
 import org.testng.annotations.Test;
 
 /*
  * @test
  * @library /test/lib
@@ -40,11 +41,11 @@
         Path outputPath = getOutputFilePath("output8249300");
         Path headerFile = getInputFilePath("test8249300.h");
         run("-d", outputPath.toString(), headerFile.toString()).checkSuccess();
         try(Loader loader = classLoader(outputPath)) {
             Class<?> headerClass = loader.loadClass("test8249300_h");
-            checkMethod(headerClass, "func", void.class, MemoryAddress.class);
+            checkMethod(headerClass, "func", void.class, Addressable.class);
             Class<?> fiClass = loader.loadClass("test8249300_h$func$f");
             checkMethod(fiClass, "apply", void.class);
         } finally {
             deleteDir(outputPath);
         }
diff a/test/jdk/tools/jextract/UniondeclTest.java b/test/jdk/tools/jextract/UniondeclTest.java
--- a/test/jdk/tools/jextract/UniondeclTest.java
+++ b/test/jdk/tools/jextract/UniondeclTest.java
@@ -19,15 +19,15 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
+import jdk.incubator.foreign.Addressable;
 import jdk.incubator.foreign.CSupport;
 import org.testng.annotations.Test;
 import java.nio.file.Path;
 import jdk.incubator.foreign.GroupLayout;
-import jdk.incubator.foreign.MemoryAddress;
 import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.assertTrue;
 
 /*
  * @test
@@ -43,11 +43,11 @@
         Path uniondeclH = getInputFilePath("uniondecl.h");
         run("-d", uniondeclOutput.toString(), uniondeclH.toString()).checkSuccess();
         try(Loader loader = classLoader(uniondeclOutput)) {
             Class<?> cls = loader.loadClass("uniondecl_h");
             // check a method for "void func(IntOrFloat*)"
-            assertNotNull(findMethod(cls, "func", MemoryAddress.class));
+            assertNotNull(findMethod(cls, "func", Addressable.class));
             // check IntOrFloat layout
             Class<?> intOrFloatCls = loader.loadClass("uniondecl_h$IntOrFloat");
             GroupLayout intOrFloatLayout = (GroupLayout)findLayout(intOrFloatCls);
             assertNotNull(intOrFloatLayout);
             assertTrue(intOrFloatLayout.isUnion());
