diff a/test/jdk/tools/jextract/JextractToolProviderTest.java b/test/jdk/tools/jextract/JextractToolProviderTest.java
--- a/test/jdk/tools/jextract/JextractToolProviderTest.java
+++ b/test/jdk/tools/jextract/JextractToolProviderTest.java
@@ -22,10 +22,12 @@
  */
 
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+
+import jdk.incubator.foreign.Addressable;
 import jdk.incubator.foreign.MemoryAddress;
 
 import org.testng.annotations.Test;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertFalse;
@@ -66,11 +68,11 @@
         try(Loader loader = classLoader(helloOutput)) {
             Class<?> cls = loader.loadClass("hello_h");
             // check a method for "void func(int)"
             assertNotNull(findMethod(cls, "func", int.class));
             // check a method for "int printf(MemoryAddress, Object[])"
-            assertNotNull(findMethod(cls, "printf", MemoryAddress.class, Object[].class));
+            assertNotNull(findMethod(cls, "printf", Addressable.class, Object[].class));
         } finally {
             deleteDir(helloOutput);
         }
     }
 
@@ -82,11 +84,11 @@
         try(Loader loader = classLoader(helloOutput)) {
             Class<?> cls = loader.loadClass("com.acme.hello_h");
             // check a method for "void func(int)"
             assertNotNull(findMethod(cls, "func", int.class));
             // check a method for "int printf(MemoryAddress, Object[])"
-            assertNotNull(findMethod(cls, "printf", MemoryAddress.class, Object[].class));
+            assertNotNull(findMethod(cls, "printf", Addressable.class, Object[].class));
         } finally {
             deleteDir(helloOutput);
         }
     }
 
