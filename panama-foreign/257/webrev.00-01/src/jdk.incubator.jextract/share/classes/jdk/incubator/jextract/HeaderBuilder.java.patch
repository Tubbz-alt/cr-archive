diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/HeaderBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/HeaderBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/HeaderBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/HeaderBuilder.java
@@ -24,10 +24,12 @@
  */
 package jdk.incubator.jextract;
 
 import jdk.incubator.foreign.Addressable;
 import jdk.incubator.foreign.FunctionDescriptor;
+import jdk.incubator.foreign.MemoryAddress;
+
 import java.lang.invoke.MethodType;
 import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -59,28 +61,32 @@
         sb.append("}\n");
         decrAlign();
         indent();
     }
 
-    public void addStaticFunctionWrapper(String javaName, String nativeName, MethodType sigtype, MethodType mhtype, FunctionDescriptor desc, boolean varargs, List<String> paramNames) {
+    public void addStaticFunctionWrapper(String javaName, String nativeName, MethodType mtype, FunctionDescriptor desc, boolean varargs, List<String> paramNames) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + sigtype.returnType().getName() + " " + javaName + " (");
+        sb.append(PUB_MODS + mtype.returnType().getName() + " " + javaName + " (");
         String delim = "";
         List<String> pExprs = new ArrayList<>();
         final int numParams = paramNames.size();
         for (int i = 0 ; i < numParams; i++) {
             String pName = paramNames.get(i);
             if (pName.isEmpty()) {
                 pName = "x" + i;
             }
-            if (sigtype.parameterType(i).equals(Addressable.class)) {
+            if (mtype.parameterType(i).equals(MemoryAddress.class)) {
                 pExprs.add(pName + ".address()");
             } else {
                 pExprs.add(pName);
             }
-            sb.append(delim + sigtype.parameterType(i).getName() + " " + pName);
+            Class<?> pType = mtype.parameterType(i);
+            if (pType.equals(MemoryAddress.class)) {
+                pType = Addressable.class;
+            }
+            sb.append(delim + pType.getName() + " " + pName);
             delim = ", ";
         }
         if (varargs) {
             String lastArg = "x" + numParams;
             if (numParams > 0) {
@@ -93,14 +99,14 @@
         incrAlign();
         indent();
         sb.append("try {\n");
         incrAlign();
         indent();
-        if (!sigtype.returnType().equals(void.class)) {
-            sb.append("return (" + sigtype.returnType().getName() + ")");
+        if (!mtype.returnType().equals(void.class)) {
+            sb.append("return (" + mtype.returnType().getName() + ")");
         }
-        sb.append(methodHandleGetCallString(javaName, nativeName, mhtype, desc, varargs) + ".invokeExact(" + String.join(", ", pExprs) + ");\n");
+        sb.append(methodHandleGetCallString(javaName, nativeName, mtype, desc, varargs) + ".invokeExact(" + String.join(", ", pExprs) + ");\n");
         decrAlign();
         indent();
         sb.append("} catch (Throwable ex) {\n");
         incrAlign();
         indent();
