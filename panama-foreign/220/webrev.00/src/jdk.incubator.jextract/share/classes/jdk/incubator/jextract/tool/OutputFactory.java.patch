diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -79,15 +79,16 @@
      * a case-insensitive file system javac will overwrite classes for
      * Header$CFooS, Header$CfooS, Header$CFoOs and so on! We solve this by
      * generating unique case-insensitive names for nested classes.
      */
     private String uniqueNestedClassName(String name) {
+        name = Utils.javaSafeIdentifier(name);
         return nestedClassNames.add(name.toLowerCase())? name : (name + "$" + nestedClassNameCount++);
     }
 
     private String structClassName(Declaration decl) {
-        return structClassNames.computeIfAbsent(decl, d -> uniqueNestedClassName("C" + d.name()));
+        return structClassNames.computeIfAbsent(decl, d -> uniqueNestedClassName(d.name()));
     }
 
     private boolean structDefinitionSeen(Declaration decl) {
         return structClassNames.containsKey(decl);
     }
@@ -144,11 +145,11 @@
         }
         // check if unresolved typedefs can be resolved now!
         for (Declaration.Typedef td : unresolvedStructTypedefs) {
             Declaration.Scoped structDef = ((Type.Declared)td.type()).tree();
             if (structDefinitionSeen(structDef)) {
-                builder.emitTypedef(uniqueNestedClassName("C" + td.name()), structClassName(structDef));
+                builder.emitTypedef(uniqueNestedClassName(td.name()), structClassName(structDef));
             }
         }
         builder.classEnd();
         try {
             List<JavaFileObject> files = new ArrayList<>();
@@ -356,11 +357,11 @@
                              * struct Foo {
                              *     int x, y;
                              * };
                              */
                             if (structDefinitionSeen(s)) {
-                                builder.emitTypedef(uniqueNestedClassName("C" + tree.name()), structClassName(s));
+                                builder.emitTypedef(uniqueNestedClassName(tree.name()), structClassName(s));
                             } else {
                                 /*
                                  * Definition of typedef'ed struct/union not seen yet. May be the definition comes later.
                                  * Save it to visit at the end of all declarations.
                                  */
@@ -372,11 +373,11 @@
                     default:
                         visitScoped(s, tree);
                 }
             }
         } else if (type instanceof Type.Primitive) {
-             builder.emitPrimitiveTypedef((Type.Primitive)type, uniqueNestedClassName("C" + tree.name()));
+             builder.emitPrimitiveTypedef((Type.Primitive)type, uniqueNestedClassName(tree.name()));
         }
         return null;
     }
 
     @Override
