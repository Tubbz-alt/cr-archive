diff a/src/jdk.incubator.foreign/share/classes/module-info.java b/src/jdk.incubator.foreign/share/classes/module-info.java
--- a/src/jdk.incubator.foreign/share/classes/module-info.java
+++ b/src/jdk.incubator.foreign/share/classes/module-info.java
@@ -33,8 +33,7 @@
 module jdk.incubator.foreign {
     exports jdk.incubator.foreign;
     exports jdk.internal.foreign.abi.aarch64 to jdk.incubator.jextract;
     exports jdk.internal.foreign.abi.x64.sysv to jdk.incubator.jextract;
     exports jdk.internal.foreign.abi.x64.windows to jdk.incubator.jextract;
-    exports jdk.incubator.foreign.unsafe to jdk.incubator.jextract;
     exports jdk.internal.foreign to jdk.incubator.jextract;
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
@@ -29,10 +29,11 @@
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SystemABI;
+import jdk.internal.foreign.InternalForeign;
 
 import javax.tools.JavaFileObject;
 import javax.tools.SimpleJavaFileObject;
 import java.io.IOException;
 import java.io.UncheckedIOException;
@@ -124,11 +125,11 @@
         this.pkgName = pkgName;
     }
 
     private static String getCLangConstantsHolder() {
         String prefix = "jdk.incubator.foreign.MemoryLayouts.";
-        String abi = SystemABI.getInstance().name();
+        String abi = InternalForeign.getInstancePriviledged().getSystemABI().name();
         switch (abi) {
             case SystemABI.ABI_SYSV:
                 return prefix + "SysV";
             case SystemABI.ABI_WINDOWS:
                 return prefix + "WinABI";
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
@@ -32,10 +32,11 @@
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
 import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.ValueLayout;
+import jdk.internal.foreign.InternalForeign;
 
 import java.lang.invoke.MethodType;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
@@ -48,11 +49,11 @@
  * A helper class to generate header interface class in source form.
  * After aggregating various constituents of a .java source, build
  * method is called to get overall generated source string.
  */
 class JavaSourceBuilder {
-    private static final String ABI = SystemABI.getInstance().name();
+    private static final String ABI = InternalForeign.getInstancePriviledged().getSystemABI().name();
     // buffer
     protected StringBuffer sb;
     // current line alignment (number of 4-spaces)
     protected int align;
 
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.template
@@ -1,7 +1,8 @@
 // Generated by jextract
 
+import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
@@ -15,11 +16,11 @@
 
 import static ${C_LANG}.*;
 
 public class RuntimeHelper {
 
-    private final static SystemABI ABI = SystemABI.getInstance();
+    private final static SystemABI ABI = Foreign.getInstance().getSystemABI();
 
     private final static ClassLoader LOADER = RuntimeHelper.class.getClassLoader();
 
     private final static MethodHandles.Lookup MH_LOOKUP = MethodHandles.lookup();
 
@@ -129,11 +130,11 @@
 
             MethodType mt = MethodType.methodType(varargs.returnType(), argTypes);
             FunctionDescriptor f = (function.returnLayout().isEmpty()) ?
                     FunctionDescriptor.ofVoid(argLayouts) :
                     FunctionDescriptor.of(function.returnLayout().get(), argLayouts);
-            MethodHandle mh = SystemABI.getInstance().downcallHandle(symbol, mt, f);
+            MethodHandle mh = Foreign.getInstance().getSystemABI().downcallHandle(symbol, mt, f);
             // flatten argument list so that it can be passed to an asSpreader MH
             Object[] allArgs = new Object[nNamedArgs + unnamedArgs.length];
             System.arraycopy(args, 0, allArgs, 0, nNamedArgs);
             System.arraycopy(unnamedArgs, 0, allArgs, nNamedArgs, unnamedArgs.length);
 
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
@@ -24,23 +24,26 @@
  *
  */
 
 package jdk.internal.clang;
 
+import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
-import jdk.incubator.foreign.unsafe.ForeignUnsafe;
 import jdk.internal.clang.libclang.Index_h;
+import jdk.internal.foreign.InternalForeign;
 import jdk.internal.jextract.impl.LayoutUtils;
 
 import java.io.IOException;
 import java.nio.file.Path;
 import java.util.Objects;
 import java.util.function.Consumer;
 
 public class TranslationUnit implements AutoCloseable {
+    private static final Foreign FOREIGN = InternalForeign.getInstancePriviledged();
+
     private MemoryAddress tu;
 
     TranslationUnit(MemoryAddress tu) {
         this.tu = tu;
     }
@@ -154,11 +157,11 @@
             return size;
         }
 
         public MemorySegment getTokenSegment(int idx) {
             MemoryAddress p = ar.addOffset(idx * Index_h.CXToken$LAYOUT.byteSize());
-            return ForeignUnsafe.ofNativeUnchecked(p, Index_h.CXToken$LAYOUT.byteSize());
+            return FOREIGN.ofNativeUnchecked(p, Index_h.CXToken$LAYOUT.byteSize());
         }
 
         public Token getToken(int index) {
             return new Token(getTokenSegment(index));
         }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Utils.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Utils.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Utils.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Utils.java
@@ -31,10 +31,11 @@
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SystemABI;
+import jdk.internal.foreign.InternalForeign;
 import jdk.internal.jextract.impl.LayoutUtils;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
@@ -50,16 +51,16 @@
     private static final MethodHandle STRLEN;
     private static final MethodHandle STRCPY;
 
     static {
         try {
-            STRLEN = SystemABI.getInstance().downcallHandle(
+            STRLEN = InternalForeign.getInstancePriviledged().getSystemABI().downcallHandle(
                     LibraryLookup.ofDefault().lookup("strlen"),
                     MethodType.methodType(int.class, MemoryAddress.class),
                     FunctionDescriptor.of(LayoutUtils.C_INT, LayoutUtils.C_POINTER));
 
-            STRCPY = SystemABI.getInstance().downcallHandle(
+            STRCPY = InternalForeign.getInstancePriviledged().getSystemABI().downcallHandle(
                     LibraryLookup.ofDefault().lookup("strcpy"),
                     MethodType.methodType(MemoryAddress.class, MemoryAddress.class, MemoryAddress.class),
                     FunctionDescriptor.of(LayoutUtils.C_POINTER, LayoutUtils.C_POINTER, LayoutUtils.C_POINTER));
         } catch (Throwable ex) {
             throw new ExceptionInInitializerError(ex);
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java
@@ -29,10 +29,11 @@
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.SystemABI;
+import jdk.internal.foreign.InternalForeign;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.nio.file.Files;
@@ -41,11 +42,11 @@
 import java.util.Arrays;
 import java.util.Optional;
 
 public class RuntimeHelper {
 
-    private final static SystemABI ABI = SystemABI.getInstance();
+    private final static SystemABI ABI = InternalForeign.getInstancePriviledged().getSystemABI();
 
     private final static ClassLoader LOADER = RuntimeHelper.class.getClassLoader();
 
     private final static MethodHandles.Lookup MH_LOOKUP = MethodHandles.lookup();
 
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
@@ -34,21 +34,22 @@
 import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.ValueLayout;
 import jdk.internal.clang.Cursor;
 import jdk.internal.clang.Type;
 import jdk.internal.clang.TypeKind;
+import jdk.internal.foreign.InternalForeign;
 import jdk.internal.foreign.abi.aarch64.AArch64ABI;
 import jdk.internal.foreign.abi.x64.sysv.SysVx64ABI;
 import jdk.internal.foreign.abi.x64.windows.Windowsx64ABI;
 
 import java.util.Optional;
 
 /**
  * General Layout utility functions
  */
 public final class LayoutUtils {
-    private static SystemABI abi = SystemABI.getInstance();
+    private static SystemABI abi = InternalForeign.getInstancePriviledged().getSystemABI();
     private LayoutUtils() {}
 
     public static String getName(Type type) {
         Cursor c = type.getDeclarationCursor();
         if (c.isInvalid()) {
diff a/test/jdk/tools/jextract/ConstantsTest.java b/test/jdk/tools/jextract/ConstantsTest.java
--- a/test/jdk/tools/jextract/ConstantsTest.java
+++ b/test/jdk/tools/jextract/ConstantsTest.java
@@ -36,11 +36,11 @@
 
 /*
  * @test
  * @modules jdk.incubator.jextract
  * @build ConstantsTest
- * @run testng ConstantsTest
+ * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit ConstantsTest
  */
 public class ConstantsTest extends JextractToolRunner {
     private Class<?> constants;
     private Path dirPath;
     private Loader loader;
diff a/test/jdk/tools/jextract/JextractToolProviderTest.java b/test/jdk/tools/jextract/JextractToolProviderTest.java
--- a/test/jdk/tools/jextract/JextractToolProviderTest.java
+++ b/test/jdk/tools/jextract/JextractToolProviderTest.java
@@ -36,11 +36,11 @@
 /*
  * @test
  * @modules jdk.incubator.jextract
  * @build JextractToolRunner
  * @bug 8240181
- * @run testng/othervm -Duser.language=en --add-modules jdk.incubator.jextract JextractToolProviderTest
+ * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit -Duser.language=en --add-modules jdk.incubator.jextract JextractToolProviderTest
  */
 public class JextractToolProviderTest extends JextractToolRunner {
     @Test
     public void testHelp() {
         run().checkFailure(); // no options
diff a/test/jdk/tools/jextract/RepeatedDeclsTest.java b/test/jdk/tools/jextract/RepeatedDeclsTest.java
--- a/test/jdk/tools/jextract/RepeatedDeclsTest.java
+++ b/test/jdk/tools/jextract/RepeatedDeclsTest.java
@@ -38,11 +38,11 @@
  * @test
  * @bug 8240300
  * @summary jextract produces non compilable code with repeated declarations
  * @modules jdk.incubator.jextract
  * @build JextractToolRunner
- * @run testng RepeatedDeclsTest
+ * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit RepeatedDeclsTest
  */
 public class RepeatedDeclsTest extends JextractToolRunner {
     @Test
     public void repeatedDecls() {
         Path repeatedDeclsOutput = getOutputFilePath("repeatedDeclsgen");
diff a/test/jdk/tools/jextract/Test8240181.java b/test/jdk/tools/jextract/Test8240181.java
--- a/test/jdk/tools/jextract/Test8240181.java
+++ b/test/jdk/tools/jextract/Test8240181.java
@@ -27,11 +27,11 @@
 /*
  * @test
  * @modules jdk.incubator.jextract
  * @build JextractToolRunner
  * @bug 8240181
- * @run testng/othervm -Duser.language=en --add-modules jdk.incubator.jextract Test8240181
+ * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit -Duser.language=en --add-modules jdk.incubator.jextract Test8240181
  */
 public class Test8240181 extends JextractToolRunner {
     @Test
     public void testAnonymousEnum() {
         Path anonenumOutput = getOutputFilePath("anonenumgen");
diff a/test/jdk/tools/jextract/Test8240657.java b/test/jdk/tools/jextract/Test8240657.java
--- a/test/jdk/tools/jextract/Test8240657.java
+++ b/test/jdk/tools/jextract/Test8240657.java
@@ -29,11 +29,11 @@
  * @test
  * @modules jdk.incubator.jextract
  * @build JextractToolRunner
  * @bug 8240657
  * @summary when Java keywords are used as identifiers in C header, jextract generates non-compilable java code
- * @run testng Test8240657
+ * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit Test8240657
  */
 public class Test8240657 extends JextractToolRunner {
     @Test
     public void testKeywordIdentifiers() {
         Path exportsOutput = getOutputFilePath("exportsgen");
diff a/test/jdk/tools/jextract/Test8240752.java b/test/jdk/tools/jextract/Test8240752.java
--- a/test/jdk/tools/jextract/Test8240752.java
+++ b/test/jdk/tools/jextract/Test8240752.java
@@ -32,11 +32,11 @@
  * @test
  * @modules jdk.incubator.jextract
  * @build JextractToolRunner
  * @bug 8240752
  * @summary jextract generates non-compilable code for special floating point values
- * @run testng Test8240752
+ * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit Test8240752
  */
 public class Test8240752 extends JextractToolRunner {
     private float getFloatConstant(Class<?> cls, String name) {
         Field field = findField(cls, name);
         assertNotNull(field);
diff a/test/jdk/tools/jextract/Test8240811.java b/test/jdk/tools/jextract/Test8240811.java
--- a/test/jdk/tools/jextract/Test8240811.java
+++ b/test/jdk/tools/jextract/Test8240811.java
@@ -33,11 +33,11 @@
  * @test
  * @modules jdk.incubator.jextract
  * @build JextractToolRunner
  * @bug 8240811
  * @summary jextract generates non-compilable code for name collision between a struct and a global variable
- * @run testng Test8240811
+ * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit Test8240811
  */
 public class Test8240811 extends JextractToolRunner {
     @Test
     public void testNameCollision() {
         Path nameCollisionOutput = getOutputFilePath("name_collision_gen");
diff a/test/jdk/tools/jextract/UniondeclTest.java b/test/jdk/tools/jextract/UniondeclTest.java
--- a/test/jdk/tools/jextract/UniondeclTest.java
+++ b/test/jdk/tools/jextract/UniondeclTest.java
@@ -31,11 +31,11 @@
 
 /*
  * @test
  * @modules jdk.incubator.jextract
  * @build JextractToolRunner
- * @run testng UniondeclTest
+ * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit UniondeclTest
  */
 public class UniondeclTest extends JextractToolRunner {
     @Test
     public void unionDecl() {
         Path uniondeclOutput = getOutputFilePath("uniondecl.h");
diff a/test/jdk/tools/jextract/test8239918/LibTest8239918Test.java b/test/jdk/tools/jextract/test8239918/LibTest8239918Test.java
--- a/test/jdk/tools/jextract/test8239918/LibTest8239918Test.java
+++ b/test/jdk/tools/jextract/test8239918/LibTest8239918Test.java
@@ -30,11 +30,11 @@
  * @library ..
  * @modules jdk.incubator.jextract
  * @bug 8239918
  * @summary jextract generates uncompilable code for no argument C function
  * @run driver JtregJextract -l Test8239918 -t test.jextract.test8239918 -- test8239918.h
- * @run testng LibTest8239918Test
+ * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit LibTest8239918Test
  */
 public class LibTest8239918Test {
     @Test
     public void testRand() {
         assertEquals(rand(), 1729);
diff a/test/jdk/tools/jextract/testStruct/LibStructTest.java b/test/jdk/tools/jextract/testStruct/LibStructTest.java
--- a/test/jdk/tools/jextract/testStruct/LibStructTest.java
+++ b/test/jdk/tools/jextract/testStruct/LibStructTest.java
@@ -31,11 +31,11 @@
 /*
  * @test
  * @library ..
  * @modules jdk.incubator.jextract
  * @run driver JtregJextract -l Struct -t test.jextract.struct -- struct.h
- * @run testng LibStructTest
+ * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit LibStructTest
  */
 public class LibStructTest {
     @Test
     public void testMakePoint() {
         try (var seg = makePoint(42, -39)) {
