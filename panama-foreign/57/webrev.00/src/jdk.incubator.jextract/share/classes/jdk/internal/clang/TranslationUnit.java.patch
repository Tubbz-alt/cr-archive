diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
@@ -24,23 +24,26 @@
  *
  */
 
 package jdk.internal.clang;
 
+import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
-import jdk.incubator.foreign.unsafe.ForeignUnsafe;
 import jdk.internal.clang.libclang.Index_h;
+import jdk.internal.foreign.InternalForeign;
 import jdk.internal.jextract.impl.LayoutUtils;
 
 import java.io.IOException;
 import java.nio.file.Path;
 import java.util.Objects;
 import java.util.function.Consumer;
 
 public class TranslationUnit implements AutoCloseable {
+    private static final Foreign FOREIGN = InternalForeign.getInstancePriviledged();
+
     private MemoryAddress tu;
 
     TranslationUnit(MemoryAddress tu) {
         this.tu = tu;
     }
@@ -154,11 +157,11 @@
             return size;
         }
 
         public MemorySegment getTokenSegment(int idx) {
             MemoryAddress p = ar.addOffset(idx * Index_h.CXToken$LAYOUT.byteSize());
-            return ForeignUnsafe.ofNativeUnchecked(p, Index_h.CXToken$LAYOUT.byteSize());
+            return FOREIGN.ofNativeUnchecked(p, Index_h.CXToken$LAYOUT.byteSize());
         }
 
         public Token getToken(int index) {
             return new Token(getTokenSegment(index));
         }
