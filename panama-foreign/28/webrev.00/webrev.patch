diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/CursorKind.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/CursorKind.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/CursorKind.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/CursorKind.java
@@ -38,11 +38,11 @@
     EnumDecl(5),
     FieldDecl(6),
     EnumConstantDecl(7),
     FunctionDecl(8),
     VarDecl(9),
-    ParamDecl(10),
+    ParmDecl(10),
     ObjCInterfaceDecl(11),
     ObjCCategoryDecl(12),
     ObjCProtocolDecl(13),
     ObjCPropertyDecl(14),
     ObjCIvarDecl(15),
@@ -130,10 +130,13 @@
     PackExpansionExpr(142),
     SizeOfPackExpr(143),
     LambdaExpr(144),
     ObjCBoolLiteralExpr(145),
     ObjCSelfExpr(146),
+    OMPArraySectionExpr(147),
+    ObjCAvailabilityCheckExpr(148),
+    FixedPointLiteral(149),
     UnexposedStmt(200),
     LabelStmt(201),
     CompoundStmt(202),
     CaseStmt(203),
     DefaultStmt(204),
@@ -164,10 +167,58 @@
     SEHFinallyStmt(228),
     MSAsmStmt(229),
     NullStmt(230),
     DeclStmt(231),
     OMPParallelDirective(232),
+    OMPSimdDirective(233),
+    OMPForDirective(234),
+    OMPSectionsDirective(235),
+    OMPSectionDirective(236),
+    OMPSingleDirective(237),
+    OMPParallelForDirective(238),
+    OMPParallelSectionsDirective(239),
+    OMPTaskDirective(240),
+    OMPMasterDirective(241),
+    OMPCriticalDirective(242),
+    OMPTaskyieldDirective(243),
+    OMPBarrierDirective(244),
+    OMPTaskwaitDirective(245),
+    OMPFlushDirective(246),
+    SEHLeaveStmt(247),
+    OMPOrderedDirective(248),
+    OMPAtomicDirective(249),
+    OMPForSimdDirective(250),
+    OMPParallelForSimdDirective(251),
+    OMPTargetDirective(252),
+    OMPTeamsDirective(253),
+    OMPTaskgroupDirective(254),
+    OMPCancellationPointDirective(255),
+    OMPCancelDirective(256),
+    OMPTargetDataDirective(257),
+    OMPTaskLoopDirective(258),
+    OMPTaskLoopSimdDirective(259),
+    OMPDistributeDirective(260),
+    OMPTargetEnterDataDirective(261),
+    OMPTargetExitDataDirective(262),
+    OMPTargetParallelDirective(263),
+    OMPTargetParallelForDirective(264),
+    OMPTargetUpdateDirective(265),
+    OMPDistributeParallelForDirective(266),
+    OMPDistributeParallelForSimdDirective(267),
+    OMPDistributeSimdDirective(268),
+    OMPTargetParallelForSimdDirective(269),
+    OMPTargetSimdDirective(270),
+    OMPTeamsDistributeDirective(271),
+    OMPTeamsDistributeSimdDirective(272),
+    OMPTeamsDistributeParallelForSimdDirective(273),
+    OMPTeamsDistributeParallelForDirective(274),
+    OMPTargetTeamsDirective(275),
+    OMPTargetTeamsDistributeDirective(276),
+    OMPTargetTeamsDistributeParallelForDirective(277),
+    OMPTargetTeamsDistributeParallelForSimdDirective(278),
+    OMPTargetTeamsDistributeSimdDirective(279),
+    BuiltinBitCastExpr(280),
     TranslationUnit(300),
     UnexposedAttr(400),
     IBActionAttr(401),
     IBOutletAttr(402),
     IBOutletCollectionAttr(403),
@@ -185,21 +236,41 @@
     CUDAHostAttr(415),
     CUDASharedAttr(416),
     VisibilityAttr(417),
     DLLExport(418),
     DLLImport(419),
+    NSReturnsRetained(420),
+    NSReturnsNotRetained(421),
+    NSReturnsAutoreleased(422),
+    NSConsumesSelf(423),
+    NSConsumed(424),
+    ObjCException(425),
+    ObjCNSObject(426),
+    ObjCIndependentClass(427),
+    ObjCPreciseLifetime(428),
+    ObjCReturnsInnerPointer(429),
+    ObjCRequiresSuper(430),
+    ObjCRootClass(431),
+    ObjCSubclassingRestricted(432),
+    ObjCExplicitProtocolImpl(433),
+    ObjCDesignatedInitializer(434),
+    ObjCRuntimeVisible(435),
+    ObjCBoxable(436),
+    FlagEnum(437),
+    ConvergentAttr(438),
+    WarnUnusedAttr(439),
+    WarnUnusedResultAttr(440),
+    AlignedAttr(441),
     PreprocessingDirective(500),
     MacroDefinition(501),
     MacroExpansion(502),
     MacroInstantiation(502),
     InclusionDirective(503),
     ModuleImportDecl(600),
     TypeAliasTemplateDecl(601),
     StaticAssert(602),
     FriendDecl(603),
-    FirstExtraDecl(600),
-    LastExtraDecl(603),
     OverloadCandidate(700);
 
     private final int value;
 
     CursorKind(int value) {
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TypeKind.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TypeKind.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TypeKind.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TypeKind.java
@@ -61,10 +61,17 @@
     ObjCId(27),
     ObjCClass(28),
     ObjCSel(29),
     Float128(30),
     Half(31),
+    Float16(32),
+    ShortAccum(33),
+    Accum(34),
+    LongAccum(35),
+    UShortAccum(36),
+    UAccum(37),
+    ULongAccum(38),
     Complex(100),
     Pointer(101),
     BlockPointer(102),
     LValueReference(103),
     RValueReference(104),
@@ -81,10 +88,67 @@
     VariableArray(115),
     DependentSizedArray(116),
     MemberPointer(117),
     Auto(118),
     Elaborated(119),
+    Pipe(120),
+    OCLImage1dRO(121),
+    OCLImage1dArrayRO(122),
+    OCLImage1dBufferRO(123),
+    OCLImage2dRO(124),
+    OCLImage2dArrayRO(125),
+    OCLImage2dDepthRO(126),
+    OCLImage2dArrayDepthRO(127),
+    OCLImage2dMSAARO(128),
+    OCLImage2dArrayMSAARO(129),
+    OCLImage2dMSAADepthRO(130),
+    OCLImage2dArrayMSAADepthRO(131),
+    OCLImage3dRO(132),
+    OCLImage1dWO(133),
+    OCLImage1dArrayWO(134),
+    OCLImage1dBufferWO(135),
+    OCLImage2dWO(136),
+    OCLImage2dArrayWO(137),
+    OCLImage2dDepthWO(138),
+    OCLImage2dArrayDepthWO(139),
+    OCLImage2dMSAAWO(140),
+    OCLImage2dArrayMSAAWO(141),
+    OCLImage2dMSAADepthWO(142),
+    OCLImage2dArrayMSAADepthWO(143),
+    OCLImage3dWO(144),
+    OCLImage1dRW(145),
+    OCLImage1dArrayRW(146),
+    OCLImage1dBufferRW(147),
+    OCLImage2dRW(148),
+    OCLImage2dArrayRW(149),
+    OCLImage2dDepthRW(150),
+    OCLImage2dArrayDepthRW(151),
+    OCLImage2dMSAARW(152),
+    OCLImage2dArrayMSAARW(153),
+    OCLImage2dMSAADepthRW(154),
+    OCLImage2dArrayMSAADepthRW(155),
+    OCLImage3dRW(156),
+    OCLSampler(157),
+    OCLEvent(158),
+    OCLQueue(159),
+    OCLReserveID(160),
+    ObjCObject(161),
+    ObjCTypeParam(162),
+    Attributed(163),
+    OCLIntelSubgroupAVCMcePayload(164),
+    OCLIntelSubgroupAVCImePayload(165),
+    OCLIntelSubgroupAVCRefPayload(166),
+    OCLIntelSubgroupAVCSicPayload(167),
+    OCLIntelSubgroupAVCMceResult(168),
+    OCLIntelSubgroupAVCImeResult(169),
+    OCLIntelSubgroupAVCRefResult(170),
+    OCLIntelSubgroupAVCSicResult(171),
+    OCLIntelSubgroupAVCImeResultSingleRefStreamout(172),
+    OCLIntelSubgroupAVCImeResultDualRefStreamout(173),
+    OCLIntelSubgroupAVCImeSingleRefStreamin(174),
+    OCLIntelSubgroupAVCImeDualRefStreamin(175),
+    ExtVector(176),
     Atomic(177);
 
     private final int value;
 
     TypeKind(int value) {
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
@@ -91,11 +91,11 @@
             case EnumConstantDecl:
                 return createEnumConstant(c);
             case FieldDecl:
                 return createVar(c.isBitField() ?
                         Declaration.Variable.Kind.BITFIELD : Declaration.Variable.Kind.FIELD, c, Declaration::field);
-            case ParamDecl:
+            case ParmDecl:
                 return createVar(Declaration.Variable.Kind.PARAMETER, c, Declaration::parameter);
             case FunctionDecl:
                 return createFunction(c);
             case StructDecl:
                 return createScoped(c, Declaration.Scoped.Kind.STRUCT, Declaration::struct, Declaration::struct);
@@ -233,11 +233,11 @@
         }
         return null;
     }
 
     private Declaration.Variable createVar(Declaration.Variable.Kind kind, Cursor c, VarFactoryNoLayout varFactory) {
-        checkCursorAny(c, CursorKind.VarDecl, CursorKind.FieldDecl, CursorKind.ParamDecl);
+        checkCursorAny(c, CursorKind.VarDecl, CursorKind.FieldDecl, CursorKind.ParmDecl);
         if (c.isBitField()) {
             return checkCache(c, Declaration.Variable.class,
                     () -> Declaration.bitfield(toPos(c), c.spelling(), toType(c),
                     MemoryLayout.ofValueBits(c.getBitFieldWidth(), ByteOrder.nativeOrder())));
         } else {
