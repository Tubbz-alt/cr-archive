diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java
@@ -1,7 +1,9 @@
 package jdk.incubator.foreign;
 
+import jdk.internal.vm.annotation.ForceInline;
+
 import java.lang.invoke.VarHandle;
 import java.nio.ByteOrder;
 
 /**
  * This class defines ready-made static accessors which can be used to dereference memory segments in many ways.
@@ -1412,11 +1414,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
      * @return a char value read from {@code addr} at the element index specified by {@code index}.
      */
     public static char getCharAtIndex_LE(MemoryAddress addr, long index) {
-        return getCharAtOffset_LE(addr, 2 * index);
+        return getCharAtOffset_LE(addr, scale(index, 2));
     }
 
     /**
      * Writes a char at given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
      * <p>
@@ -1427,11 +1429,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
      * @param value the char value to be written.
      */
     public static void setCharAtIndex_LE(MemoryAddress addr, long index, char value) {
-        setCharAtOffset_LE(addr, 2 * index, value);
+        setCharAtOffset_LE(addr, scale(index, 2), value);
     }
 
     /**
      * Read a short from given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
      * <p>
@@ -1442,11 +1444,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
      * @return a short value read from {@code addr} at the element index specified by {@code index}.
      */
     public static short getShortAtIndex_LE(MemoryAddress addr, long index) {
-        return getShortAtOffset_LE(addr, 2 * index);
+        return getShortAtOffset_LE(addr, scale(index, 2));
     }
 
     /**
      * Writes a short at given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
      * <p>
@@ -1457,11 +1459,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
      * @param value the short value to be written.
      */
     public static void setShortAtIndex_LE(MemoryAddress addr, long index, short value) {
-        setShortAtOffset_LE(addr, 2 * index, value);
+        setShortAtOffset_LE(addr, scale(index, 2), value);
     }
 
     /**
      * Read an int from given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
      * <p>
@@ -1472,11 +1474,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
      * @return an int value read from {@code addr} at the element index specified by {@code index}.
      */
     public static int getIntAtIndex_LE(MemoryAddress addr, long index) {
-        return getIntAtOffset_LE(addr, 4 * index);
+        return getIntAtOffset_LE(addr, scale(index, 4));
     }
 
     /**
      * Writes an int at given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
      * <p>
@@ -1487,11 +1489,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
      * @param value the int value to be written.
      */
     public static void setIntAtIndex_LE(MemoryAddress addr, long index, int value) {
-        setIntAtOffset_LE(addr, 4 * index, value);
+        setIntAtOffset_LE(addr, scale(index, 4), value);
     }
 
     /**
      * Read a float from given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
      * <p>
@@ -1502,11 +1504,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
      * @return a float value read from {@code addr} at the element index specified by {@code index}.
      */
     public static float getFloatAtIndex_LE(MemoryAddress addr, long index) {
-        return getFloatAtOffset_LE(addr, 4 * index);
+        return getFloatAtOffset_LE(addr, scale(index, 4));
     }
 
     /**
      * Writes a float at given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
      * <p>
@@ -1517,11 +1519,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
      * @param value the float value to be written.
      */
     public static void setFloatAtIndex_LE(MemoryAddress addr, long index, float value) {
-        setFloatAtOffset_LE(addr, 4 * index, value);
+        setFloatAtOffset_LE(addr, scale(index, 4), value);
     }
 
     /**
      * Read a long from given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
      * <p>
@@ -1532,11 +1534,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
      * @return a long value read from {@code addr} at the element index specified by {@code index}.
      */
     public static long getLongAtIndex_LE(MemoryAddress addr, long index) {
-        return getLongAtOffset_LE(addr, 8 * index);
+        return getLongAtOffset_LE(addr, scale(index, 8));
     }
 
     /**
      * Writes a long at given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
      * <p>
@@ -1547,11 +1549,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
      * @param value the long value to be written.
      */
     public static void setLongAtIndex_LE(MemoryAddress addr, long index, long value) {
-        setLongAtOffset_LE(addr, 8 * index, value);
+        setLongAtOffset_LE(addr, scale(index, 8), value);
     }
 
     /**
      * Read a double from given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
      * <p>
@@ -1562,11 +1564,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
      * @return a double value read from {@code addr} at the element index specified by {@code index}.
      */
     public static double getDoubleAtIndex_LE(MemoryAddress addr, long index) {
-        return getDoubleAtOffset_LE(addr, 8 * index);
+        return getDoubleAtOffset_LE(addr, scale(index, 8));
     }
 
     /**
      * Writes a double at given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
      * <p>
@@ -1577,11 +1579,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
      * @param value the double value to be written.
      */
     public static void setDoubleAtIndex_LE(MemoryAddress addr, long index, double value) {
-        setDoubleAtOffset_LE(addr, 8 * index, value);
+        setDoubleAtOffset_LE(addr, scale(index, 8), value);
     }
 
     /**
      * Read a byte from given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
      * <p>
@@ -1623,11 +1625,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
      * @return a char value read from {@code addr} at the element index specified by {@code index}.
      */
     public static char getCharAtIndex_BE(MemoryAddress addr, long index) {
-        return getCharAtOffset_BE(addr, 2 * index);
+        return getCharAtOffset_BE(addr, scale(index, 2));
     }
 
     /**
      * Writes a char at given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
      * <p>
@@ -1638,11 +1640,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
      * @param value the char value to be written.
      */
     public static void setCharAtIndex_BE(MemoryAddress addr, long index, char value) {
-        setCharAtOffset_BE(addr, 2 * index, value);
+        setCharAtOffset_BE(addr, scale(index, 2), value);
     }
 
     /**
      * Read a short from given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
      * <p>
@@ -1653,11 +1655,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
      * @return a short value read from {@code addr} at the element index specified by {@code index}.
      */
     public static short getShortAtIndex_BE(MemoryAddress addr, long index) {
-        return getShortAtOffset_BE(addr, 2 * index);
+        return getShortAtOffset_BE(addr, scale(index, 2));
     }
 
     /**
      * Writes a short at given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
      * <p>
@@ -1668,11 +1670,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
      * @param value the short value to be written.
      */
     public static void setShortAtIndex_BE(MemoryAddress addr, long index, short value) {
-        setShortAtOffset_BE(addr, 2 * index, value);
+        setShortAtOffset_BE(addr, scale(index, 2), value);
     }
 
     /**
      * Read an int from given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
      * <p>
@@ -1683,11 +1685,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
      * @return an int value read from {@code addr} at the element index specified by {@code index}.
      */
     public static int getIntAtIndex_BE(MemoryAddress addr, long index) {
-        return getIntAtOffset_BE(addr, 4 * index);
+        return getIntAtOffset_BE(addr, scale(index, 4));
     }
 
     /**
      * Writes an int at given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
      * <p>
@@ -1698,11 +1700,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
      * @param value the int value to be written.
      */
     public static void setIntAtIndex_BE(MemoryAddress addr, long index, int value) {
-        setIntAtOffset_BE(addr, 4 * index, value);
+        setIntAtOffset_BE(addr, scale(index, 4), value);
     }
 
     /**
      * Read a float from given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
      * <p>
@@ -1713,11 +1715,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
      * @return a float value read from {@code addr} at the element index specified by {@code index}.
      */
     public static float getFloatAtIndex_BE(MemoryAddress addr, long index) {
-        return getFloatAtOffset_BE(addr, 4 * index);
+        return getFloatAtOffset_BE(addr, scale(index, 4));
     }
 
     /**
      * Writes a float at given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
      * <p>
@@ -1728,11 +1730,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
      * @param value the float value to be written.
      */
     public static void setFloatAtIndex_BE(MemoryAddress addr, long index, float value) {
-        setFloatAtOffset_BE(addr, 4 * index, value);
+        setFloatAtOffset_BE(addr, scale(index, 4), value);
     }
 
     /**
      * Read a long from given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
      * <p>
@@ -1743,11 +1745,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
      * @return a long value read from {@code addr} at the element index specified by {@code index}.
      */
     public static long getLongAtIndex_BE(MemoryAddress addr, long index) {
-        return getLongAtOffset_BE(addr, 8 * index);
+        return getLongAtOffset_BE(addr, scale(index, 8));
     }
 
     /**
      * Writes a long at given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
      * <p>
@@ -1758,11 +1760,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
      * @param value the long value to be written.
      */
     public static void setLongAtIndex_BE(MemoryAddress addr, long index, long value) {
-        setLongAtOffset_BE(addr, 8 * index, value);
+        setLongAtOffset_BE(addr, scale(index, 8), value);
     }
 
     /**
      * Read a double from given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
      * <p>
@@ -1773,11 +1775,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
      * @return a double value read from {@code addr} at the element index specified by {@code index}.
      */
     public static double getDoubleAtIndex_BE(MemoryAddress addr, long index) {
-        return getDoubleAtOffset_BE(addr, 8 * index);
+        return getDoubleAtOffset_BE(addr, scale(index, 8));
     }
 
     /**
      * Writes a double at given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
      * <p>
@@ -1788,11 +1790,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
      * @param value the double value to be written.
      */
     public static void setDoubleAtIndex_BE(MemoryAddress addr, long index, double value) {
-        setDoubleAtOffset_BE(addr, 8 * index, value);
+        setDoubleAtOffset_BE(addr, scale(index, 8), value);
     }
 
     /**
      * Read a byte from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
      * <p>
@@ -1834,11 +1836,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
      * @return a char value read from {@code addr} at the element index specified by {@code index}.
      */
     public static char getCharAtIndex(MemoryAddress addr, long index) {
-        return getCharAtOffset(addr, 2 * index);
+        return getCharAtOffset(addr, scale(index, 2));
     }
 
     /**
      * Writes a char at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
      * <p>
@@ -1849,11 +1851,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
      * @param value the char value to be written.
      */
     public static void setCharAtIndex(MemoryAddress addr, long index, char value) {
-        setCharAtOffset(addr, 2 * index, value);
+        setCharAtOffset(addr, scale(index, 2), value);
     }
 
     /**
      * Read a short from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
      * <p>
@@ -1864,11 +1866,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
      * @return a short value read from {@code addr} at the element index specified by {@code index}.
      */
     public static short getShortAtIndex(MemoryAddress addr, long index) {
-        return getShortAtOffset(addr, 2 * index);
+        return getShortAtOffset(addr, scale(index, 2));
     }
 
     /**
      * Writes a short at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
      * <p>
@@ -1879,11 +1881,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
      * @param value the short value to be written.
      */
     public static void setShortAtIndex(MemoryAddress addr, long index, short value) {
-        setShortAtOffset(addr, 2 * index, value);
+        setShortAtOffset(addr, scale(index, 2), value);
     }
 
     /**
      * Read an int from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
      * <p>
@@ -1894,11 +1896,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
      * @return an int value read from {@code addr} at the element index specified by {@code index}.
      */
     public static int getIntAtIndex(MemoryAddress addr, long index) {
-        return getIntAtOffset(addr, 4 * index);
+        return getIntAtOffset(addr, scale(index, 4));
     }
 
     /**
      * Writes an int at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
      * <p>
@@ -1909,11 +1911,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
      * @param value the int value to be written.
      */
     public static void setIntAtIndex(MemoryAddress addr, long index, int value) {
-        setIntAtOffset(addr, 4 * index, value);
+        setIntAtOffset(addr, scale(index, 4), value);
     }
 
     /**
      * Read a float from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
      * <p>
@@ -1924,11 +1926,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
      * @return a float value read from {@code addr} at the element index specified by {@code index}.
      */
     public static float getFloatAtIndex(MemoryAddress addr, long index) {
-        return getFloatAtOffset(addr, 4 * index);
+        return getFloatAtOffset(addr, scale(index, 4));
     }
 
     /**
      * Writes a float at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
      * <p>
@@ -1939,11 +1941,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
      * @param value the float value to be written.
      */
     public static void setFloatAtIndex(MemoryAddress addr, long index, float value) {
-        setFloatAtOffset(addr, 4 * index, value);
+        setFloatAtOffset(addr, scale(index, 4), value);
     }
 
     /**
      * Read a long from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
      * <p>
@@ -1954,11 +1956,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
      * @return a long value read from {@code addr} at the element index specified by {@code index}.
      */
     public static long getLongAtIndex(MemoryAddress addr, long index) {
-        return getLongAtOffset(addr, 8 * index);
+        return getLongAtOffset(addr, scale(index, 8));
     }
 
     /**
      * Writes a long at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
      * <p>
@@ -1969,11 +1971,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
      * @param value the long value to be written.
      */
     public static void setLongAtIndex(MemoryAddress addr, long index, long value) {
-        setLongAtOffset(addr, 8 * index, value);
+        setLongAtOffset(addr, scale(index, 8), value);
     }
 
     /**
      * Read a double from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
      * <p>
@@ -1984,11 +1986,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
      * @return a double value read from {@code addr} at the element index specified by {@code index}.
      */
     public static double getDoubleAtIndex(MemoryAddress addr, long index) {
-        return getDoubleAtOffset(addr, 8 * index);
+        return getDoubleAtOffset(addr, scale(index, 8));
     }
 
     /**
      * Writes a double at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
      * <p>
@@ -1999,11 +2001,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
      * @param value the double value to be written.
      */
     public static void setDoubleAtIndex(MemoryAddress addr, long index, double value) {
-        setDoubleAtOffset(addr, 8 * index, value);
+        setDoubleAtOffset(addr, scale(index, 8), value);
     }
 
     /**
      * Read a memory address from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
      * <p>
@@ -2014,11 +2016,11 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
      * @return a memory address read from {@code addr} at the element index specified by {@code index}.
      */
     public static MemoryAddress getAddressAtIndex(MemoryAddress addr, long index) {
-        return getAddressAtOffset(addr, index * 8);
+        return getAddressAtOffset(addr, scale(index, 8));
     }
 
     /**
      * Writes a memory address at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
      * <p>
@@ -2029,8 +2031,17 @@
      * @param addr base address.
      * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
      * @param value the memory address to be written.
      */
     public static void setAddressAtIndex(MemoryAddress addr, long index, MemoryAddress value) {
-        setAddressAtOffset(addr, index * 8, value);
+        setAddressAtOffset(addr, scale(index, 8), value);
+    }
+
+    @ForceInline
+    private static long scale(long index, int size) {
+        if (index < Integer.MAX_VALUE) {
+            return (int)index * size;
+        } else {
+            return index * size;
+        }
     }
 }
