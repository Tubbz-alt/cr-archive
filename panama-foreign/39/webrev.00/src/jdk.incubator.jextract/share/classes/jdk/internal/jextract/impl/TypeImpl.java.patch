diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
@@ -44,11 +44,11 @@
 
     static boolean equals(Type t1, Type.Delegated t2) {
         assert t1 != null;
         assert t2 != null;
 
-        return (t2.kind() == Delegated.Kind.TYPEDEF)? t1.equals(t2.type()) : false;
+        return (t2.kind() == Delegated.Kind.TYPEDEF) && t1.equals(t2.type());
     }
 
     public static final TypeImpl ERROR = new TypeImpl() {
         @Override
         public <R, D> R accept(Visitor<R, D> visitor, D data) {
@@ -97,11 +97,11 @@
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
             if (!(o instanceof Type.Primitive)) {
-                return (o instanceof Type.Delegated)? equals(this, (Type.Delegated)o) : false;
+                return (o instanceof Delegated) && equals(this, (Delegated)o);
             }
             Type.Primitive primitive = (Type.Primitive) o;
             return kind == primitive.kind();
         }
 
@@ -137,11 +137,11 @@
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
             if (!(o instanceof Type.Delegated)) {
-                return (o instanceof Type)? equals((Type)o, this) : false;
+                return (o instanceof Type) && equals((Type)o, this);
             }
             Type.Delegated that = (Type.Delegated) o;
             return kind == that.kind() &&
                     name.equals(that.name());
         }
@@ -176,11 +176,11 @@
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
             if (!(o instanceof Type.Delegated)) return false;
             if (!super.equals(o)) {
-                return (o instanceof Type.Delegated)? equals(this, (Type.Delegated)o) : false;
+                return (o instanceof Delegated) && equals(this, (Delegated) o);
             }
             Type.Delegated qualified = (Type.Delegated) o;
             return Objects.equals(type, qualified.type());
         }
 
@@ -229,11 +229,11 @@
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
             if (!(o instanceof Type.Declared)) {
-                return (o instanceof Type.Delegated)? equals(this, (Type.Delegated)o) : false;
+                return (o instanceof Delegated) && equals(this, (Delegated) o);
             }
             Type.Declared declared = (Type.Declared) o;
             return declaration.equals(declared.tree());
         }
 
@@ -278,11 +278,11 @@
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
             if (!(o instanceof Type.Function)) {
-                return (o instanceof Type.Delegated)? equals(this, (Type.Delegated)o) : false;
+                return (o instanceof Delegated) && equals(this, (Delegated) o);
             }
             Type.Function function = (Type.Function) o;
             return varargs == function.varargs() &&
                     argtypes.equals(function.argumentTypes()) &&
                     restype.equals(function.returnType());
@@ -337,11 +337,11 @@
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
             if (!(o instanceof Type.Array)) {
-                return (o instanceof Type.Delegated)? equals(this, (Type.Delegated)o) : false;
+                return (o instanceof Delegated) && equals(this, (Delegated) o);
             }
             Type.Array array = (Type.Array) o;
             return kind == array.kind() &&
                     elemType.equals(array.elementType());
         }
