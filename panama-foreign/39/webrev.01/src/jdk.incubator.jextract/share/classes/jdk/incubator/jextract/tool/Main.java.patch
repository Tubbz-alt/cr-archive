diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/Main.java
@@ -169,26 +169,26 @@
         if (!Files.isReadable(header)) {
             err.println(format("cannot.read.header.file", header));
             return INPUT_ERROR;
         }
 
-        //parse
-        JextractTask jextractTask = JextractTask.newTask(!options.source, header);
-        Declaration.Scoped toplevel = jextractTask.parse(options.clangArgs.toArray(new String[0]));
+        //parse    //generate
+        try {
+            JextractTask jextractTask = JextractTask.newTask(!options.source, header);
+            Declaration.Scoped toplevel = jextractTask.parse(options.clangArgs.toArray(new String[0]));
 
-        //filter
-        if (!options.filters.isEmpty()) {
-            toplevel = Filter.filter(toplevel, options.filters.toArray(new String[0]));
-        }
+            //filter
+            if (!options.filters.isEmpty()) {
+                toplevel = Filter.filter(toplevel, options.filters.toArray(new String[0]));
+            }
 
-        if (Main.DEBUG) {
-            System.out.println(toplevel);
-        }
+            if (Main.DEBUG) {
+                System.out.println(toplevel);
+            }
+
+            Path output = Path.of(options.outputDir);
 
-        Path output = Path.of(options.outputDir);
-        //generate
-        try {
             JavaFileObject[] files = HandleSourceFactory.generateWrapped(
                 toplevel,
                 header.getFileName().toString().replace(".h", "_h"),
                 options.targetPackage,
                 options.libraryNames);
