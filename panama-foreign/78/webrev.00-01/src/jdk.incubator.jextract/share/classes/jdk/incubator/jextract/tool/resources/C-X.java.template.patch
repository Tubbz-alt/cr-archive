diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
@@ -49,10 +49,20 @@
         var addr = scope.allocate(LAYOUT);
         handle.set(addr, value);
         return addr;
     }
 
+    public static MemorySegment allocateArray(int length) {
+        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
+        return MemorySegment.allocateNative(arrLayout);
+    }
+
+    public static MemoryAddress allocateArray(int length, AllocationScope scope) {
+        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
+        return scope.allocate(arrLayout);
+    }
+
     public static MemorySegment allocateArray(${CARRIER}[] arr) {
         var arrLayout = MemoryLayout.ofSequence(arr.length, LAYOUT);
         var seg = MemorySegment.allocateNative(arrLayout);
         copy(seg.baseAddress(), arr);
         return seg;
@@ -67,11 +77,10 @@
 
     public static long sizeof() {
         return LAYOUT.byteSize();
     }
 
-    private static void copy(MemoryAddress addr, ${CARRIER}[] arr) {
-        for (int i = 0 ; i < arr.length; i++) {
-            arrayHandle.set(addr, (long)i, arr[i]);
-        }
+    public static void copy(MemoryAddress addr, ${CARRIER}[] arr) {
+        var heapSegment = MemorySegment.ofArray(arr);
+        MemoryAddress.copy(heapSegment.baseAddress(), addr, arr.length * sizeof());
     }
 }
