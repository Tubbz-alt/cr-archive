diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/TypeTranslator.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/TypeTranslator.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/TypeTranslator.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/TypeTranslator.java
@@ -23,10 +23,11 @@
  * questions.
  */
 
 package jdk.incubator.jextract.tool;
 
+import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.jextract.Type;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 
@@ -53,11 +54,35 @@
             default:
                 return false;
         }
     }
 
-    private Class<?> layoutToClass(boolean fp, MemoryLayout layout) {
+    static String typeToLayoutName(SystemABI.Type type) {
+        return switch (type) {
+            case BOOL -> "C_BOOL";
+            case SIGNED_CHAR -> "C_SCHAR";
+            case UNSIGNED_CHAR -> "C_UCHAR";
+            case CHAR -> "C_CHAR";
+            case SHORT -> "C_SHORT";
+            case UNSIGNED_SHORT -> "C_USHORT";
+            case INT -> "C_INT";
+            case UNSIGNED_INT -> "C_UINT";
+            case LONG -> "C_LONG";
+            case UNSIGNED_LONG -> "C_ULONG";
+            case LONG_LONG -> "C_LONGLONG";
+            case UNSIGNED_LONG_LONG -> "C_ULONGLONG";
+            case FLOAT -> "C_FLOAT";
+            case DOUBLE -> "C_DOUBLE";
+            case LONG_DOUBLE -> "C_LONGDOUBLE";
+            case POINTER -> "C_POINTER";
+            default -> {
+                throw new RuntimeException("should not reach here: " + type);
+            }
+        };
+    }
+
+    static Class<?> layoutToClass(boolean fp, MemoryLayout layout) {
         switch ((int)layout.bitSize()) {
             case 8: return byte.class;
             case 16: return short.class;
             case 32: return !fp ? int.class : float.class;
             case 64:
