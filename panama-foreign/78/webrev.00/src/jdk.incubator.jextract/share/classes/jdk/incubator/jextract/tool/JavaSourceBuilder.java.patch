diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
@@ -27,23 +27,20 @@
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
-import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
 import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.ValueLayout;
 import jdk.internal.foreign.InternalForeign;
 
 import java.lang.invoke.MethodType;
-import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.stream.Collectors;
-import java.util.stream.IntStream;
 import java.util.stream.Stream;
 import javax.lang.model.SourceVersion;
 
 import static jdk.incubator.foreign.SystemABI.NATIVE_TYPE;
 
@@ -135,29 +132,11 @@
     private void addLayout(MemoryLayout l) {
         if (l instanceof ValueLayout) {
             SystemABI.Type type = l.attribute(NATIVE_TYPE)
                                    .map(SystemABI.Type.class::cast)
                                    .orElseThrow(()->new AssertionError("Should not get here: " + l));
-            sb.append(switch (type) {
-                case BOOL -> "C_BOOL";
-                case SIGNED_CHAR -> "C_SCHAR";
-                case UNSIGNED_CHAR -> "C_UCHAR";
-                case CHAR -> "C_CHAR";
-                case SHORT -> "C_SHORT";
-                case UNSIGNED_SHORT -> "C_USHORT";
-                case INT -> "C_INT";
-                case UNSIGNED_INT -> "C_UINT";
-                case LONG -> "C_LONG";
-                case UNSIGNED_LONG -> "C_ULONG";
-                case LONG_LONG -> "C_LONGLONG";
-                case UNSIGNED_LONG_LONG -> "C_ULONGLONG";
-                case FLOAT -> "C_FLOAT";
-                case DOUBLE -> "C_DOUBLE";
-                case LONG_DOUBLE -> "C_LONGDOUBLE";
-                case POINTER -> "C_POINTER";
-                default -> { throw new RuntimeException("should not reach here: " + type); }
-            });
+            sb.append(TypeTranslator.typeToLayoutName(type));
         } else if (l instanceof SequenceLayout) {
             sb.append("MemoryLayout.ofSequence(");
             if (((SequenceLayout) l).elementCount().isPresent()) {
                 sb.append(((SequenceLayout) l).elementCount().getAsLong() + ", ");
             }
