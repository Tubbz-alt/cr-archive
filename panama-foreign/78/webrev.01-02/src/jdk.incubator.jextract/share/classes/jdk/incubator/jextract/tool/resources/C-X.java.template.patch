diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
@@ -21,10 +21,15 @@
     public static final MemoryLayout LAYOUT = ${LAYOUT};
     public static final Class<?> CARRIER = ${CARRIER}.class;
     private static final VarHandle handle = LAYOUT.varHandle(CARRIER);
     private static final VarHandle arrayHandle = arrayHandle(LAYOUT, CARRIER);
 
+    private static void copy(MemoryAddress addr, ${CARRIER}[] arr) {
+        var heapSegment = MemorySegment.ofArray(arr);
+        MemoryAddress.copy(heapSegment.baseAddress(), addr, arr.length * sizeof());
+    }
+
     public static ${CARRIER} get(MemoryAddress addr) {
         return (${CARRIER}) handle.get(addr);
     }
 
     public static void set(MemoryAddress addr, ${CARRIER} value) {
@@ -77,10 +82,16 @@
 
     public static long sizeof() {
         return LAYOUT.byteSize();
     }
 
-    public static void copy(MemoryAddress addr, ${CARRIER}[] arr) {
-        var heapSegment = MemorySegment.ofArray(arr);
-        MemoryAddress.copy(heapSegment.baseAddress(), addr, arr.length * sizeof());
+    public static ${CARRIER}[] toJavaArray(MemorySegment seg) {
+        var segSize = seg.byteSize();
+        var elemSize = sizeof();
+        if (segSize % elemSize != 0) {
+            throw new UnsupportedOperationException("segment cannot contain integral number of elements");
+        }
+        ${CARRIER}[] array = new ${CARRIER}[(int) (segSize / elemSize)];
+        MemoryAddress.copy(seg.baseAddress(), MemorySegment.ofArray(array).baseAddress(), array.length * elemSize);
+        return array;
     }
 }
