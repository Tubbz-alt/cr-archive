diff a/doc/panama_jextract.html b/doc/panama_jextract.html
--- a/doc/panama_jextract.html
+++ b/doc/panama_jextract.html
@@ -227,11 +227,11 @@
 <span id="cb11-12"><a href="#cb11-12"></a>            var p = <span class="fu">readline</span>(pstr);</span>
 <span id="cb11-13"><a href="#cb11-13"></a></span>
 <span id="cb11-14"><a href="#cb11-14"></a>            <span class="co">// print char* as is</span></span>
 <span id="cb11-15"><a href="#cb11-15"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(p);</span>
 <span id="cb11-16"><a href="#cb11-16"></a>            <span class="co">// convert char* ptr from readline as Java String &amp; print it</span></span>
-<span id="cb11-17"><a href="#cb11-17"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;Hello, &quot;</span> + Cstring.<span class="fu">toString</span>(p));</span>
+<span id="cb11-17"><a href="#cb11-17"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;Hello, &quot;</span> + Cstring.<span class="fu">toJavaString</span>(p));</span>
 <span id="cb11-18"><a href="#cb11-18"></a>        }</span>
 <span id="cb11-19"><a href="#cb11-19"></a>    }</span>
 <span id="cb11-20"><a href="#cb11-20"></a>}</span></code></pre></div>
 <h3 id="running-the-java-code-that-uses-readline">Running the java code that uses readline</h3>
 <pre><code>java -Djdk.incubator.foreign.Foreign=permit --add-modules jdk.incubator.foreign \
@@ -316,11 +316,11 @@
 <span id="cb18-20"><a href="#cb18-20"></a>        lda = <span class="dv">4</span>; <span class="co">/* Leading dimension of 5 * 4 matrix is 5 */</span></span>
 <span id="cb18-21"><a href="#cb18-21"></a>        incx = <span class="dv">1</span>;</span>
 <span id="cb18-22"><a href="#cb18-22"></a>        incy = <span class="dv">1</span>;</span>
 <span id="cb18-23"><a href="#cb18-23"></a>        alpha = <span class="dv">1</span>;</span>
 <span id="cb18-24"><a href="#cb18-24"></a>        beta = <span class="dv">0</span>;</span>
-<span id="cb18-25"><a href="#cb18-25"></a>      <span class="kw">try</span> (AllocationScope scope = AllocationScope.<span class="fu">unboundedNativeScope</span>()) {</span>
+<span id="cb18-25"><a href="#cb18-25"></a>        <span class="kw">try</span> (AllocationScope scope = AllocationScope.<span class="fu">unboundedNativeScope</span>()) {</span>
 <span id="cb18-26"><a href="#cb18-26"></a>            var a = Cdouble.<span class="fu">allocateArray</span>(m*n, scope);</span>
 <span id="cb18-27"><a href="#cb18-27"></a>            var x = Cdouble.<span class="fu">allocateArray</span>(n, scope);</span>
 <span id="cb18-28"><a href="#cb18-28"></a>            var y = Cdouble.<span class="fu">allocateArray</span>(n, scope);</span>
 <span id="cb18-29"><a href="#cb18-29"></a></span>
 <span id="cb18-30"><a href="#cb18-30"></a>            <span class="co">/* The elements of the first column */</span></span>
diff a/doc/panama_jextract.md b/doc/panama_jextract.md
--- a/doc/panama_jextract.md
+++ b/doc/panama_jextract.md
@@ -161,11 +161,11 @@
             var p = readline(pstr);
 
             // print char* as is
             System.out.println(p);
             // convert char* ptr from readline as Java String & print it
-            System.out.println("Hello, " + Cstring.toString(p));
+            System.out.println("Hello, " + Cstring.toJavaString(p));
         }
     }
 }
 
 ```
@@ -292,11 +292,11 @@
         lda = 4; /* Leading dimension of 5 * 4 matrix is 5 */
         incx = 1;
         incy = 1;
         alpha = 1;
         beta = 0;
-      try (AllocationScope scope = AllocationScope.unboundedNativeScope()) {
+        try (AllocationScope scope = AllocationScope.unboundedNativeScope()) {
             var a = Cdouble.allocateArray(m*n, scope);
             var x = Cdouble.allocateArray(n, scope);
             var y = Cdouble.allocateArray(n, scope);
 
             /* The elements of the first column */
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
@@ -21,10 +21,15 @@
     public static final MemoryLayout LAYOUT = ${LAYOUT};
     public static final Class<?> CARRIER = ${CARRIER}.class;
     private static final VarHandle handle = LAYOUT.varHandle(CARRIER);
     private static final VarHandle arrayHandle = arrayHandle(LAYOUT, CARRIER);
 
+    private static void copy(MemoryAddress addr, ${CARRIER}[] arr) {
+        var heapSegment = MemorySegment.ofArray(arr);
+        MemoryAddress.copy(heapSegment.baseAddress(), addr, arr.length * sizeof());
+    }
+
     public static ${CARRIER} get(MemoryAddress addr) {
         return (${CARRIER}) handle.get(addr);
     }
 
     public static void set(MemoryAddress addr, ${CARRIER} value) {
@@ -77,10 +82,16 @@
 
     public static long sizeof() {
         return LAYOUT.byteSize();
     }
 
-    public static void copy(MemoryAddress addr, ${CARRIER}[] arr) {
-        var heapSegment = MemorySegment.ofArray(arr);
-        MemoryAddress.copy(heapSegment.baseAddress(), addr, arr.length * sizeof());
+    public static ${CARRIER}[] toJavaArray(MemorySegment seg) {
+        var segSize = seg.byteSize();
+        var elemSize = sizeof();
+        if (segSize % elemSize != 0) {
+            throw new UnsupportedOperationException("segment cannot contain integral number of elements");
+        }
+        ${CARRIER}[] array = new ${CARRIER}[(int) (segSize / elemSize)];
+        MemoryAddress.copy(seg.baseAddress(), MemorySegment.ofArray(array).baseAddress(), array.length * elemSize);
+        return array;
     }
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
@@ -65,11 +65,11 @@
 
     public static MemoryAddress toCString(String str, Charset charset, AllocationScope scope) {
         return toCString(str.getBytes(charset), scope);
     }
 
-    public static String toString(MemoryAddress addr) {
+    public static String toJavaString(MemoryAddress addr) {
         StringBuilder buf = new StringBuilder();
         try (MemorySegment seg = foreign.ofNativeUnchecked(addr, Long.MAX_VALUE)) {
             MemoryAddress baseAddr = seg.baseAddress();
             byte curr = (byte) byteArrHandle.get(baseAddr, 0);
             long offset = 0;
diff a/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java b/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
--- a/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
+++ b/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
@@ -54,20 +54,26 @@
 
             int[] intArray = { 34, 67, 78, 8 };
             addr = Cint.allocateArray(intArray, scope);
             int sum = sum(addr, intArray.length);
             assertEquals(sum, IntStream.of(intArray).sum());
+            int[] convertedArray = Cint.toJavaArray(addr.segment());
+            assertEquals(convertedArray, intArray);
 
             double[] dblArray = { 34.5, 67.56, 78.2, 8.45 };
             addr = Cdouble.allocateArray(dblArray, scope);
             double sumd = sum_fp(addr, dblArray.length);
             assertEquals(sumd, DoubleStream.of(dblArray).sum(), 0.1);
+            double[] convertedDblArray = Cdouble.toJavaArray(addr.segment());
+            for (int i = 0; i < dblArray.length; i++) {
+                assertEquals(dblArray[i], convertedDblArray[i], 0.1);
+            }
 
-            assertEquals(Cstring.toString(name()), "java");
+            assertEquals(Cstring.toJavaString(name()), "java");
 
             var dest = Cchar.allocateArray(12, scope);
             Cstring.copy(dest, "hello ");
             var src = Cstring.toCString("world", scope);
-            assertEquals(Cstring.toString(concatenate(dest, src)), "hello world");
+            assertEquals(Cstring.toJavaString(concatenate(dest, src)), "hello world");
         }
     }
 }
