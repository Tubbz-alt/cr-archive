diff a/doc/panama_jextract.html b/doc/panama_jextract.html
--- a/doc/panama_jextract.html
+++ b/doc/panama_jextract.html
@@ -113,10 +113,17 @@
 <ul>
 <li><a href="#jextract-a-jar-for-curl.h">jextract a jar for curl.h</a></li>
 <li><a href="#java-code-that-uses-libcurl">Java code that uses libcurl</a></li>
 <li><a href="#running-the-java-code-that-uses-libcurl">Running the java code that uses libcurl</a></li>
 </ul></li>
+<li><a href="#using-blas-library">Using BLAS library</a>
+<ul>
+<li><a href="#installing-openblas-mac-os">Installing OpenBLAS (Mac OS)</a></li>
+<li><a href="#jextracting-cblas.h-macos">jextracting cblas.h (MacOS)</a></li>
+<li><a href="#java-sample-code-that-uses-cblas-library">Java sample code that uses cblas library</a></li>
+<li><a href="#compiling-and-running-the-above-lapack-sample">Compiling and running the above LAPACK sample</a></li>
+</ul></li>
 </ul></li>
 </ul>
 </nav>
 <?xml version="1.0" encoding="utf-8"?>
 <h1 id="using-panama-foreign-jextract-jdk">Using Panama "foreign-jextract" JDK</h1>
@@ -174,27 +181,28 @@
 <span id="cb7-7"><a href="#cb7-7"></a>  --filter python.h \</span>
 <span id="cb7-8"><a href="#cb7-8"></a>   /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/python2.7/Python.h</span></code></pre></div>
 <h3 id="java-program-that-uses-extracted-python-interface">Java program that uses extracted Python interface</h3>
 <div class="sourceCode" id="cb8"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb8-1"><a href="#cb8-1"></a></span>
 <span id="cb8-2"><a href="#cb8-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.Foreign;</span></span>
-<span id="cb8-3"><a href="#cb8-3"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
-<span id="cb8-4"><a href="#cb8-4"></a><span class="co">// import jextracted python &#39;header&#39; class</span></span>
-<span id="cb8-5"><a href="#cb8-5"></a><span class="kw">import static</span><span class="im"> org.python.Python_h.*;</span></span>
-<span id="cb8-6"><a href="#cb8-6"></a></span>
-<span id="cb8-7"><a href="#cb8-7"></a><span class="kw">public</span> <span class="kw">class</span> PythonMain {</span>
-<span id="cb8-8"><a href="#cb8-8"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
-<span id="cb8-9"><a href="#cb8-9"></a>        var f = Foreign.<span class="fu">getInstance</span>();</span>
-<span id="cb8-10"><a href="#cb8-10"></a>        <span class="bu">String</span> script = <span class="st">&quot;print(sum([33, 55, 66])); print(&#39;Hello from Python!&#39;)</span><span class="sc">\n</span><span class="st">&quot;</span>;</span>
-<span id="cb8-11"><a href="#cb8-11"></a></span>
-<span id="cb8-12"><a href="#cb8-12"></a>        <span class="fu">Py_Initialize</span>();</span>
-<span id="cb8-13"><a href="#cb8-13"></a>        <span class="kw">try</span> (var s = f.<span class="fu">toCString</span>(script)) {</span>
-<span id="cb8-14"><a href="#cb8-14"></a>            var str = s.<span class="fu">baseAddress</span>();</span>
-<span id="cb8-15"><a href="#cb8-15"></a>            <span class="fu">PyRun_SimpleStringFlags</span>(str, NULL);</span>
-<span id="cb8-16"><a href="#cb8-16"></a>            <span class="fu">Py_Finalize</span>();</span>
-<span id="cb8-17"><a href="#cb8-17"></a>        }</span>
-<span id="cb8-18"><a href="#cb8-18"></a>    }</span>
-<span id="cb8-19"><a href="#cb8-19"></a>}</span></code></pre></div>
+<span id="cb8-3"><a href="#cb8-3"></a><span class="kw">import</span><span class="im"> org.python.Cstring;</span></span>
+<span id="cb8-4"><a href="#cb8-4"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
+<span id="cb8-5"><a href="#cb8-5"></a><span class="co">// import jextracted python &#39;header&#39; class</span></span>
+<span id="cb8-6"><a href="#cb8-6"></a><span class="kw">import static</span><span class="im"> org.python.RuntimeHelper.*;</span></span>
+<span id="cb8-7"><a href="#cb8-7"></a><span class="kw">import static</span><span class="im"> org.python.Python_h.*;</span></span>
+<span id="cb8-8"><a href="#cb8-8"></a></span>
+<span id="cb8-9"><a href="#cb8-9"></a><span class="kw">public</span> <span class="kw">class</span> PythonMain {</span>
+<span id="cb8-10"><a href="#cb8-10"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
+<span id="cb8-11"><a href="#cb8-11"></a>        <span class="bu">String</span> script = <span class="st">&quot;print(sum([33, 55, 66])); print(&#39;Hello from Python!&#39;)</span><span class="sc">\n</span><span class="st">&quot;</span>;</span>
+<span id="cb8-12"><a href="#cb8-12"></a></span>
+<span id="cb8-13"><a href="#cb8-13"></a>        <span class="fu">Py_Initialize</span>();</span>
+<span id="cb8-14"><a href="#cb8-14"></a>        <span class="kw">try</span> (var s = Cstring.<span class="fu">toCString</span>(script)) {</span>
+<span id="cb8-15"><a href="#cb8-15"></a>            var str = s.<span class="fu">baseAddress</span>();</span>
+<span id="cb8-16"><a href="#cb8-16"></a>            <span class="fu">PyRun_SimpleStringFlags</span>(str, NULL);</span>
+<span id="cb8-17"><a href="#cb8-17"></a>            <span class="fu">Py_Finalize</span>();</span>
+<span id="cb8-18"><a href="#cb8-18"></a>        }</span>
+<span id="cb8-19"><a href="#cb8-19"></a>    }</span>
+<span id="cb8-20"><a href="#cb8-20"></a>}</span></code></pre></div>
 <h3 id="running-the-java-code-that-calls-python-interpreter">Running the Java code that calls Python interpreter</h3>
 <div class="sourceCode" id="cb9"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1"></a></span>
 <span id="cb9-2"><a href="#cb9-2"></a><span class="ex">java</span> -Djdk.incubator.foreign.Foreign=permit --add-modules jdk.incubator.foreign \</span>
 <span id="cb9-3"><a href="#cb9-3"></a>    -Djava.library.path=/System/Library/Frameworks/Python.framework/Versions/2.7/lib PythonMain.java</span></code></pre></div>
 <h2 id="using-readline-library-from-java-code-mac-os">Using readline library from Java code (Mac OS)</h2>
@@ -205,27 +213,28 @@
 <span id="cb10-4"><a href="#cb10-4"></a>  --filter readline.h \</span>
 <span id="cb10-5"><a href="#cb10-5"></a>   /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/readline/readline.h</span></code></pre></div>
 <h3 id="java-code-that-uses-readline">Java code that uses readline</h3>
 <div class="sourceCode" id="cb11"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb11-1"><a href="#cb11-1"></a></span>
 <span id="cb11-2"><a href="#cb11-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.Foreign;</span></span>
-<span id="cb11-3"><a href="#cb11-3"></a><span class="kw">import static</span><span class="im"> org.unix.readline_h.*;</span></span>
-<span id="cb11-4"><a href="#cb11-4"></a></span>
-<span id="cb11-5"><a href="#cb11-5"></a><span class="kw">public</span> <span class="kw">class</span> Readline {</span>
-<span id="cb11-6"><a href="#cb11-6"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
-<span id="cb11-7"><a href="#cb11-7"></a>        var f = Foreign.<span class="fu">getInstance</span>();</span>
-<span id="cb11-8"><a href="#cb11-8"></a>        <span class="kw">try</span> (var s = f.<span class="fu">toCString</span>(<span class="st">&quot;name? &quot;</span>)) {</span>
-<span id="cb11-9"><a href="#cb11-9"></a>            var pstr = s.<span class="fu">baseAddress</span>();</span>
-<span id="cb11-10"><a href="#cb11-10"></a>            <span class="co">// call &quot;readline&quot; API</span></span>
-<span id="cb11-11"><a href="#cb11-11"></a>            var p = <span class="fu">readline</span>(pstr);</span>
-<span id="cb11-12"><a href="#cb11-12"></a></span>
-<span id="cb11-13"><a href="#cb11-13"></a>            <span class="co">// print char* as is</span></span>
-<span id="cb11-14"><a href="#cb11-14"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(p);</span>
-<span id="cb11-15"><a href="#cb11-15"></a>            <span class="co">// convert char* ptr from readline as Java String &amp; print it</span></span>
-<span id="cb11-16"><a href="#cb11-16"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;Hello, &quot;</span> + f.<span class="fu">toJavaString</span>(p));</span>
-<span id="cb11-17"><a href="#cb11-17"></a>        }</span>
-<span id="cb11-18"><a href="#cb11-18"></a>    }</span>
-<span id="cb11-19"><a href="#cb11-19"></a>}</span></code></pre></div>
+<span id="cb11-3"><a href="#cb11-3"></a><span class="kw">import</span><span class="im"> org.unix.Cstring;</span></span>
+<span id="cb11-4"><a href="#cb11-4"></a><span class="kw">import static</span><span class="im"> org.unix.RuntimeHelper.*;</span></span>
+<span id="cb11-5"><a href="#cb11-5"></a><span class="kw">import static</span><span class="im"> org.unix.readline_h.*;</span></span>
+<span id="cb11-6"><a href="#cb11-6"></a></span>
+<span id="cb11-7"><a href="#cb11-7"></a><span class="kw">public</span> <span class="kw">class</span> Readline {</span>
+<span id="cb11-8"><a href="#cb11-8"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
+<span id="cb11-9"><a href="#cb11-9"></a>        <span class="kw">try</span> (var s = Cstring.<span class="fu">toCString</span>(<span class="st">&quot;name? &quot;</span>)) {</span>
+<span id="cb11-10"><a href="#cb11-10"></a>            var pstr = s.<span class="fu">baseAddress</span>();</span>
+<span id="cb11-11"><a href="#cb11-11"></a>            <span class="co">// call &quot;readline&quot; API</span></span>
+<span id="cb11-12"><a href="#cb11-12"></a>            var p = <span class="fu">readline</span>(pstr);</span>
+<span id="cb11-13"><a href="#cb11-13"></a></span>
+<span id="cb11-14"><a href="#cb11-14"></a>            <span class="co">// print char* as is</span></span>
+<span id="cb11-15"><a href="#cb11-15"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(p);</span>
+<span id="cb11-16"><a href="#cb11-16"></a>            <span class="co">// convert char* ptr from readline as Java String &amp; print it</span></span>
+<span id="cb11-17"><a href="#cb11-17"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;Hello, &quot;</span> + Cstring.<span class="fu">toString</span>(p));</span>
+<span id="cb11-18"><a href="#cb11-18"></a>        }</span>
+<span id="cb11-19"><a href="#cb11-19"></a>    }</span>
+<span id="cb11-20"><a href="#cb11-20"></a>}</span></code></pre></div>
 <h3 id="running-the-java-code-that-uses-readline">Running the java code that uses readline</h3>
 <pre><code>java -Djdk.incubator.foreign.Foreign=permit --add-modules jdk.incubator.foreign \
     -Djava.library.path=/usr/local/opt/readline/lib/ Readline.java
 </code></pre>
 <h2 id="using-libcurl-from-java-mac-os">Using libcurl from Java (Mac OS)</h2>
@@ -238,34 +247,123 @@
 <span id="cb13-6"><a href="#cb13-6"></a>  --filter curl.h \</span>
 <span id="cb13-7"><a href="#cb13-7"></a>  /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/curl/curl.h</span></code></pre></div>
 <h3 id="java-code-that-uses-libcurl">Java code that uses libcurl</h3>
 <div class="sourceCode" id="cb14"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb14-1"><a href="#cb14-1"></a></span>
 <span id="cb14-2"><a href="#cb14-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.Foreign;</span></span>
-<span id="cb14-3"><a href="#cb14-3"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
-<span id="cb14-4"><a href="#cb14-4"></a><span class="kw">import static</span><span class="im"> org.unix.curl_h.*;</span></span>
-<span id="cb14-5"><a href="#cb14-5"></a></span>
-<span id="cb14-6"><a href="#cb14-6"></a><span class="kw">public</span> <span class="kw">class</span> CurlMain {</span>
-<span id="cb14-7"><a href="#cb14-7"></a>   <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
-<span id="cb14-8"><a href="#cb14-8"></a>       var f = Foreign.<span class="fu">getInstance</span>();</span>
-<span id="cb14-9"><a href="#cb14-9"></a>       var urlStr = args[<span class="dv">0</span>];</span>
-<span id="cb14-10"><a href="#cb14-10"></a>       <span class="fu">curl_global_init</span>(CURL_GLOBAL_DEFAULT);</span>
-<span id="cb14-11"><a href="#cb14-11"></a>       var curl = <span class="fu">curl_easy_init</span>();</span>
-<span id="cb14-12"><a href="#cb14-12"></a>       <span class="kw">if</span>(!curl.<span class="fu">equals</span>(NULL)) {</span>
-<span id="cb14-13"><a href="#cb14-13"></a>           <span class="kw">try</span> (var s = f.<span class="fu">toCString</span>(urlStr)) {</span>
-<span id="cb14-14"><a href="#cb14-14"></a>               var url = s.<span class="fu">baseAddress</span>();</span>
-<span id="cb14-15"><a href="#cb14-15"></a>               <span class="fu">curl_easy_setopt</span>(curl, CURLOPT_URL, url);</span>
-<span id="cb14-16"><a href="#cb14-16"></a>               <span class="dt">int</span> res = <span class="fu">curl_easy_perform</span>(curl);</span>
-<span id="cb14-17"><a href="#cb14-17"></a>               <span class="kw">if</span> (res != CURLE_OK) {</span>
-<span id="cb14-18"><a href="#cb14-18"></a>                   <span class="fu">curl_easy_cleanup</span>(curl);</span>
-<span id="cb14-19"><a href="#cb14-19"></a>               }</span>
-<span id="cb14-20"><a href="#cb14-20"></a>           }</span>
-<span id="cb14-21"><a href="#cb14-21"></a>       }</span>
-<span id="cb14-22"><a href="#cb14-22"></a>       <span class="fu">curl_global_cleanup</span>();</span>
-<span id="cb14-23"><a href="#cb14-23"></a>   }</span>
-<span id="cb14-24"><a href="#cb14-24"></a>}</span></code></pre></div>
+<span id="cb14-3"><a href="#cb14-3"></a><span class="kw">import</span><span class="im"> org.unix.Cstring;</span></span>
+<span id="cb14-4"><a href="#cb14-4"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
+<span id="cb14-5"><a href="#cb14-5"></a><span class="kw">import static</span><span class="im"> org.unix.RuntimeHelper.*;</span></span>
+<span id="cb14-6"><a href="#cb14-6"></a><span class="kw">import static</span><span class="im"> org.unix.curl_h.*;</span></span>
+<span id="cb14-7"><a href="#cb14-7"></a></span>
+<span id="cb14-8"><a href="#cb14-8"></a><span class="kw">public</span> <span class="kw">class</span> CurlMain {</span>
+<span id="cb14-9"><a href="#cb14-9"></a>   <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
+<span id="cb14-10"><a href="#cb14-10"></a>       var urlStr = args[<span class="dv">0</span>];</span>
+<span id="cb14-11"><a href="#cb14-11"></a>       <span class="fu">curl_global_init</span>(CURL_GLOBAL_DEFAULT);</span>
+<span id="cb14-12"><a href="#cb14-12"></a>       var curl = <span class="fu">curl_easy_init</span>();</span>
+<span id="cb14-13"><a href="#cb14-13"></a>       <span class="kw">if</span>(!curl.<span class="fu">equals</span>(NULL)) {</span>
+<span id="cb14-14"><a href="#cb14-14"></a>           <span class="kw">try</span> (var s = Cstring.<span class="fu">toCString</span>(urlStr)) {</span>
+<span id="cb14-15"><a href="#cb14-15"></a>               var url = s.<span class="fu">baseAddress</span>();</span>
+<span id="cb14-16"><a href="#cb14-16"></a>               <span class="fu">curl_easy_setopt</span>(curl, CURLOPT_URL, url);</span>
+<span id="cb14-17"><a href="#cb14-17"></a>               <span class="dt">int</span> res = <span class="fu">curl_easy_perform</span>(curl);</span>
+<span id="cb14-18"><a href="#cb14-18"></a>               <span class="kw">if</span> (res != CURLE_OK) {</span>
+<span id="cb14-19"><a href="#cb14-19"></a>                   <span class="fu">curl_easy_cleanup</span>(curl);</span>
+<span id="cb14-20"><a href="#cb14-20"></a>               }</span>
+<span id="cb14-21"><a href="#cb14-21"></a>           }</span>
+<span id="cb14-22"><a href="#cb14-22"></a>       }</span>
+<span id="cb14-23"><a href="#cb14-23"></a>       <span class="fu">curl_global_cleanup</span>();</span>
+<span id="cb14-24"><a href="#cb14-24"></a>   }</span>
+<span id="cb14-25"><a href="#cb14-25"></a>}</span></code></pre></div>
 <h3 id="running-the-java-code-that-uses-libcurl">Running the java code that uses libcurl</h3>
 <div class="sourceCode" id="cb15"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb15-1"><a href="#cb15-1"></a></span>
 <span id="cb15-2"><a href="#cb15-2"></a><span class="co"># run this shell script by passing a URL as first argument</span></span>
 <span id="cb15-3"><a href="#cb15-3"></a><span class="ex">java</span> -Djdk.incubator.foreign.Foreign=permit --add-modules \</span>
 <span id="cb15-4"><a href="#cb15-4"></a>    jdk.incubator.foreign -Djava.library.path=/usr/lib CurlMain.java <span class="va">$*</span></span></code></pre></div>
+<h2 id="using-blas-library">Using BLAS library</h2>
+<p>BLAS is a popular library that allows fast matrix and vector computation: <a href="http://www.netlib.org/blas/">http://www.netlib.org/blas/</a>.</p>
+<h3 id="installing-openblas-mac-os">Installing OpenBLAS (Mac OS)</h3>
+<p>On Mac, blas is available as part of the OpenBLAS library: <a href="https://github.com/xianyi/OpenBLAS/wiki">https://github.com/xianyi/OpenBLAS/wiki</a></p>
+<p>OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version.</p>
+<p>You can install openblas using HomeBrew</p>
+<div class="sourceCode" id="cb16"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb16-1"><a href="#cb16-1"></a></span>
+<span id="cb16-2"><a href="#cb16-2"></a><span class="ex">brew</span> install openblas</span></code></pre></div>
+<p>It installs include and lib directories under /usr/local/opt/openblas</p>
+<h3 id="jextracting-cblas.h-macos">jextracting cblas.h (MacOS)</h3>
+<p>The following command can be used to extract cblas.h on MacOs</p>
+<div class="sourceCode" id="cb17"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb17-1"><a href="#cb17-1"></a></span>
+<span id="cb17-2"><a href="#cb17-2"></a><span class="ex">jextract</span> -C <span class="st">&quot;-D FORCE_OPENBLAS_COMPLEX_STRUCT&quot;</span> \</span>
+<span id="cb17-3"><a href="#cb17-3"></a>  -I /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include \</span>
+<span id="cb17-4"><a href="#cb17-4"></a>  --filter cblas.h \</span>
+<span id="cb17-5"><a href="#cb17-5"></a>  -l openblas -t blas /usr/local/opt/openblas/include/cblas.h</span></code></pre></div>
+<h3 id="java-sample-code-that-uses-cblas-library">Java sample code that uses cblas library</h3>
+<div class="sourceCode" id="cb18"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb18-1"><a href="#cb18-1"></a></span>
+<span id="cb18-2"><a href="#cb18-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.AllocationScope;</span></span>
+<span id="cb18-3"><a href="#cb18-3"></a><span class="kw">import</span><span class="im"> blas.*;</span></span>
+<span id="cb18-4"><a href="#cb18-4"></a><span class="kw">import static</span><span class="im"> blas.RuntimeHelper.*;</span></span>
+<span id="cb18-5"><a href="#cb18-5"></a><span class="kw">import static</span><span class="im"> blas.cblas_h.*;</span></span>
+<span id="cb18-6"><a href="#cb18-6"></a></span>
+<span id="cb18-7"><a href="#cb18-7"></a><span class="kw">public</span> <span class="kw">class</span> TestBlas {</span>
+<span id="cb18-8"><a href="#cb18-8"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
+<span id="cb18-9"><a href="#cb18-9"></a>        <span class="dt">int</span> Layout;</span>
+<span id="cb18-10"><a href="#cb18-10"></a>        <span class="dt">int</span> transa;</span>
+<span id="cb18-11"><a href="#cb18-11"></a></span>
+<span id="cb18-12"><a href="#cb18-12"></a>        <span class="dt">double</span> alpha, beta;</span>
+<span id="cb18-13"><a href="#cb18-13"></a>        <span class="dt">int</span> m, n, lda, incx, incy, i;</span>
+<span id="cb18-14"><a href="#cb18-14"></a></span>
+<span id="cb18-15"><a href="#cb18-15"></a>        Layout = CblasColMajor;</span>
+<span id="cb18-16"><a href="#cb18-16"></a>        transa = CblasNoTrans;</span>
+<span id="cb18-17"><a href="#cb18-17"></a></span>
+<span id="cb18-18"><a href="#cb18-18"></a>        m = <span class="dv">4</span>; <span class="co">/* Size of Column ( the number of rows ) */</span></span>
+<span id="cb18-19"><a href="#cb18-19"></a>        n = <span class="dv">4</span>; <span class="co">/* Size of Row ( the number of columns ) */</span></span>
+<span id="cb18-20"><a href="#cb18-20"></a>        lda = <span class="dv">4</span>; <span class="co">/* Leading dimension of 5 * 4 matrix is 5 */</span></span>
+<span id="cb18-21"><a href="#cb18-21"></a>        incx = <span class="dv">1</span>;</span>
+<span id="cb18-22"><a href="#cb18-22"></a>        incy = <span class="dv">1</span>;</span>
+<span id="cb18-23"><a href="#cb18-23"></a>        alpha = <span class="dv">1</span>;</span>
+<span id="cb18-24"><a href="#cb18-24"></a>        beta = <span class="dv">0</span>;</span>
+<span id="cb18-25"><a href="#cb18-25"></a>      <span class="kw">try</span> (AllocationScope scope = AllocationScope.<span class="fu">unboundedNativeScope</span>()) {</span>
+<span id="cb18-26"><a href="#cb18-26"></a>            var a = Cdouble.<span class="fu">allocateArray</span>(m*n, scope);</span>
+<span id="cb18-27"><a href="#cb18-27"></a>            var x = Cdouble.<span class="fu">allocateArray</span>(n, scope);</span>
+<span id="cb18-28"><a href="#cb18-28"></a>            var y = Cdouble.<span class="fu">allocateArray</span>(n, scope);</span>
+<span id="cb18-29"><a href="#cb18-29"></a></span>
+<span id="cb18-30"><a href="#cb18-30"></a>            <span class="co">/* The elements of the first column */</span></span>
+<span id="cb18-31"><a href="#cb18-31"></a>            Cdouble.<span class="fu">set</span>(a, <span class="dv">0</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
+<span id="cb18-32"><a href="#cb18-32"></a>            Cdouble.<span class="fu">set</span>(a, <span class="dv">1</span>, <span class="fl">2.</span><span class="dv">0</span>);</span>
+<span id="cb18-33"><a href="#cb18-33"></a>            Cdouble.<span class="fu">set</span>(a, <span class="dv">2</span>, <span class="fl">3.</span><span class="dv">0</span>);</span>
+<span id="cb18-34"><a href="#cb18-34"></a>            Cdouble.<span class="fu">set</span>(a, <span class="dv">3</span>, <span class="fl">4.</span><span class="dv">0</span>);</span>
+<span id="cb18-35"><a href="#cb18-35"></a>            <span class="co">/* The elements of the second column */</span></span>
+<span id="cb18-36"><a href="#cb18-36"></a>            Cdouble.<span class="fu">set</span>(a, m, <span class="fl">1.</span><span class="dv">0</span>);</span>
+<span id="cb18-37"><a href="#cb18-37"></a>            Cdouble.<span class="fu">set</span>(a, m + <span class="dv">1</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
+<span id="cb18-38"><a href="#cb18-38"></a>            Cdouble.<span class="fu">set</span>(a, m + <span class="dv">2</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
+<span id="cb18-39"><a href="#cb18-39"></a>            Cdouble.<span class="fu">set</span>(a, m + <span class="dv">3</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
+<span id="cb18-40"><a href="#cb18-40"></a>            <span class="co">/* The elements of the third column */</span></span>
+<span id="cb18-41"><a href="#cb18-41"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">2</span>, <span class="fl">3.</span><span class="dv">0</span>);</span>
+<span id="cb18-42"><a href="#cb18-42"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">2</span> + <span class="dv">1</span>, <span class="fl">4.</span><span class="dv">0</span>);</span>
+<span id="cb18-43"><a href="#cb18-43"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">2</span> + <span class="dv">2</span>, <span class="fl">5.</span><span class="dv">0</span>);</span>
+<span id="cb18-44"><a href="#cb18-44"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">2</span> + <span class="dv">3</span>, <span class="fl">6.</span><span class="dv">0</span>);</span>
+<span id="cb18-45"><a href="#cb18-45"></a>            <span class="co">/* The elements of the fourth column */</span></span>
+<span id="cb18-46"><a href="#cb18-46"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">3</span>, <span class="fl">5.</span><span class="dv">0</span>);</span>
+<span id="cb18-47"><a href="#cb18-47"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">3</span> + <span class="dv">1</span>, <span class="fl">6.</span><span class="dv">0</span>);</span>
+<span id="cb18-48"><a href="#cb18-48"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">3</span> + <span class="dv">2</span>, <span class="fl">7.</span><span class="dv">0</span>);</span>
+<span id="cb18-49"><a href="#cb18-49"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">3</span> + <span class="dv">3</span>, <span class="fl">8.</span><span class="dv">0</span>);</span>
+<span id="cb18-50"><a href="#cb18-50"></a>            <span class="co">/* The elemetns of x and y */</span></span>
+<span id="cb18-51"><a href="#cb18-51"></a>            Cdouble.<span class="fu">set</span>(x, <span class="dv">0</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
+<span id="cb18-52"><a href="#cb18-52"></a>            Cdouble.<span class="fu">set</span>(x, <span class="dv">1</span>, <span class="fl">2.</span><span class="dv">0</span>);</span>
+<span id="cb18-53"><a href="#cb18-53"></a>            Cdouble.<span class="fu">set</span>(x, <span class="dv">2</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
+<span id="cb18-54"><a href="#cb18-54"></a>            Cdouble.<span class="fu">set</span>(x, <span class="dv">3</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
+<span id="cb18-55"><a href="#cb18-55"></a>            Cdouble.<span class="fu">set</span>(y, <span class="dv">0</span>, <span class="fl">0.</span><span class="dv">0</span>);</span>
+<span id="cb18-56"><a href="#cb18-56"></a>            Cdouble.<span class="fu">set</span>(y, <span class="dv">1</span>, <span class="fl">0.</span><span class="dv">0</span>);</span>
+<span id="cb18-57"><a href="#cb18-57"></a>            Cdouble.<span class="fu">set</span>(y, <span class="dv">2</span>, <span class="fl">0.</span><span class="dv">0</span>);</span>
+<span id="cb18-58"><a href="#cb18-58"></a>            Cdouble.<span class="fu">set</span>(y, <span class="dv">3</span>, <span class="fl">0.</span><span class="dv">0</span>);</span>
+<span id="cb18-59"><a href="#cb18-59"></a>            <span class="fu">cblas_dgemv</span>(Layout, transa, m, n, alpha, a, lda, x, incx, beta, y, incy);</span>
+<span id="cb18-60"><a href="#cb18-60"></a>            <span class="co">/* Print y */</span></span>
+<span id="cb18-61"><a href="#cb18-61"></a>            <span class="kw">for</span> (i = <span class="dv">0</span>; i &lt; n; i++) {</span>
+<span id="cb18-62"><a href="#cb18-62"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">print</span>(<span class="bu">String</span><span class="fu">.format</span>(<span class="st">&quot; y</span><span class="sc">%d</span><span class="st"> = </span><span class="sc">%f\n</span><span class="st">&quot;</span>, i, Cdouble.<span class="fu">get</span>(y, (<span class="dt">long</span>)i)));</span>
+<span id="cb18-63"><a href="#cb18-63"></a>            }</span>
+<span id="cb18-64"><a href="#cb18-64"></a>        }</span>
+<span id="cb18-65"><a href="#cb18-65"></a>    }</span>
+<span id="cb18-66"><a href="#cb18-66"></a>}</span></code></pre></div>
+<h3 id="compiling-and-running-the-above-lapack-sample">Compiling and running the above LAPACK sample</h3>
+<div class="sourceCode" id="cb19"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb19-1"><a href="#cb19-1"></a></span>
+<span id="cb19-2"><a href="#cb19-2"></a><span class="ex">java</span> -Djdk.incubator.foreign.Foreign=permit --add-modules jdk.incubator.foreign \</span>
+<span id="cb19-3"><a href="#cb19-3"></a>    -Djava.library.path=/usr/local/opt/openblas/lib \</span>
+<span id="cb19-4"><a href="#cb19-4"></a>    TestBlas.java</span></code></pre></div>
 </body>
 </html>
diff a/doc/panama_jextract.md b/doc/panama_jextract.md
--- a/doc/panama_jextract.md
+++ b/doc/panama_jextract.md
@@ -99,21 +99,22 @@
 ### Java program that uses extracted Python interface
 
 ```java
 
 import jdk.incubator.foreign.Foreign;
+import org.python.Cstring;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 // import jextracted python 'header' class
+import static org.python.RuntimeHelper.*;
 import static org.python.Python_h.*;
 
 public class PythonMain {
     public static void main(String[] args) {
-        var f = Foreign.getInstance();
         String script = "print(sum([33, 55, 66])); print('Hello from Python!')\n";
 
         Py_Initialize();
-        try (var s = f.toCString(script)) {
+        try (var s = Cstring.toCString(script)) {
             var str = s.baseAddress();
             PyRun_SimpleStringFlags(str, NULL);
             Py_Finalize();
         }
     }
@@ -146,24 +147,25 @@
 ### Java code that uses readline
 
 ```java
 
 import jdk.incubator.foreign.Foreign;
+import org.unix.Cstring;
+import static org.unix.RuntimeHelper.*;
 import static org.unix.readline_h.*;
 
 public class Readline {
     public static void main(String[] args) {
-        var f = Foreign.getInstance();
-        try (var s = f.toCString("name? ")) {
+        try (var s = Cstring.toCString("name? ")) {
             var pstr = s.baseAddress();
             // call "readline" API
             var p = readline(pstr);
 
             // print char* as is
             System.out.println(p);
             // convert char* ptr from readline as Java String & print it
-            System.out.println("Hello, " + f.toJavaString(p));
+            System.out.println("Hello, " + Cstring.toString(p));
         }
     }
 }
 
 ```
@@ -194,21 +196,22 @@
 ### Java code that uses libcurl
 
 ```java
 
 import jdk.incubator.foreign.Foreign;
+import org.unix.Cstring;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
+import static org.unix.RuntimeHelper.*;
 import static org.unix.curl_h.*;
 
 public class CurlMain {
    public static void main(String[] args) {
-       var f = Foreign.getInstance();
        var urlStr = args[0];
        curl_global_init(CURL_GLOBAL_DEFAULT);
        var curl = curl_easy_init();
        if(!curl.equals(NULL)) {
-           try (var s = f.toCString(urlStr)) {
+           try (var s = Cstring.toCString(urlStr)) {
                var url = s.baseAddress();
                curl_easy_setopt(curl, CURLOPT_URL, url);
                int res = curl_easy_perform(curl);
                if (res != CURLE_OK) {
                    curl_easy_cleanup(curl);
@@ -228,5 +231,120 @@
 # run this shell script by passing a URL as first argument
 java -Djdk.incubator.foreign.Foreign=permit --add-modules \
     jdk.incubator.foreign -Djava.library.path=/usr/lib CurlMain.java $*
 
 ```
+
+## Using BLAS library
+
+BLAS is a popular library that allows fast matrix and vector computation: [http://www.netlib.org/blas/](http://www.netlib.org/blas/).
+
+### Installing OpenBLAS (Mac OS)
+
+On Mac, blas is available as part of the OpenBLAS library: [https://github.com/xianyi/OpenBLAS/wiki](https://github.com/xianyi/OpenBLAS/wiki)
+
+OpenBLAS is an optimized BLAS library based on GotoBLAS2 1.13 BSD version.
+
+You can install openblas using HomeBrew
+
+```sh
+
+brew install openblas
+
+```
+
+It installs include and lib directories under /usr/local/opt/openblas
+
+### jextracting cblas.h (MacOS)
+
+The following command can be used to extract cblas.h on MacOs
+
+```sh
+
+jextract -C "-D FORCE_OPENBLAS_COMPLEX_STRUCT" \
+  -I /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include \
+  --filter cblas.h \
+  -l openblas -t blas /usr/local/opt/openblas/include/cblas.h
+
+```
+
+### Java sample code that uses cblas library
+
+```java
+
+import jdk.incubator.foreign.AllocationScope;
+import blas.*;
+import static blas.RuntimeHelper.*;
+import static blas.cblas_h.*;
+
+public class TestBlas {
+    public static void main(String[] args) {
+        int Layout;
+        int transa;
+
+        double alpha, beta;
+        int m, n, lda, incx, incy, i;
+
+        Layout = CblasColMajor;
+        transa = CblasNoTrans;
+
+        m = 4; /* Size of Column ( the number of rows ) */
+        n = 4; /* Size of Row ( the number of columns ) */
+        lda = 4; /* Leading dimension of 5 * 4 matrix is 5 */
+        incx = 1;
+        incy = 1;
+        alpha = 1;
+        beta = 0;
+      try (AllocationScope scope = AllocationScope.unboundedNativeScope()) {
+            var a = Cdouble.allocateArray(m*n, scope);
+            var x = Cdouble.allocateArray(n, scope);
+            var y = Cdouble.allocateArray(n, scope);
+
+            /* The elements of the first column */
+            Cdouble.set(a, 0, 1.0);
+            Cdouble.set(a, 1, 2.0);
+            Cdouble.set(a, 2, 3.0);
+            Cdouble.set(a, 3, 4.0);
+            /* The elements of the second column */
+            Cdouble.set(a, m, 1.0);
+            Cdouble.set(a, m + 1, 1.0);
+            Cdouble.set(a, m + 2, 1.0);
+            Cdouble.set(a, m + 3, 1.0);
+            /* The elements of the third column */
+            Cdouble.set(a, m*2, 3.0);
+            Cdouble.set(a, m*2 + 1, 4.0);
+            Cdouble.set(a, m*2 + 2, 5.0);
+            Cdouble.set(a, m*2 + 3, 6.0);
+            /* The elements of the fourth column */
+            Cdouble.set(a, m*3, 5.0);
+            Cdouble.set(a, m*3 + 1, 6.0);
+            Cdouble.set(a, m*3 + 2, 7.0);
+            Cdouble.set(a, m*3 + 3, 8.0);
+            /* The elemetns of x and y */
+            Cdouble.set(x, 0, 1.0);
+            Cdouble.set(x, 1, 2.0);
+            Cdouble.set(x, 2, 1.0);
+            Cdouble.set(x, 3, 1.0);
+            Cdouble.set(y, 0, 0.0);
+            Cdouble.set(y, 1, 0.0);
+            Cdouble.set(y, 2, 0.0);
+            Cdouble.set(y, 3, 0.0);
+            cblas_dgemv(Layout, transa, m, n, alpha, a, lda, x, incx, beta, y, incy);
+            /* Print y */
+            for (i = 0; i < n; i++) {
+                System.out.print(String.format(" y%d = %f\n", i, Cdouble.get(y, (long)i)));
+            }
+        }
+    }
+}
+
+```
+
+### Compiling and running the above LAPACK sample
+
+```sh
+
+java -Djdk.incubator.foreign.Foreign=permit --add-modules jdk.incubator.foreign \
+    -Djava.library.path=/usr/local/opt/openblas/lib \
+    TestBlas.java
+
+```
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
@@ -41,10 +41,11 @@
 import java.net.URI;
 import java.net.URL;
 import java.net.URISyntaxException;
 import java.nio.file.Files;
 import java.nio.file.Paths;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -153,19 +154,21 @@
         generateFunctionalInterfaces(decl);
 
         builder.classEnd();
         String src = builder.build();
 
-        URL runtimeHelper = HandleSourceFactory.class.getResource("resources/RuntimeHelper.template");
+        URL runtimeHelper = HandleSourceFactory.class.getResource("resources/RuntimeHelper.java.template");
 
         try {
-            return new JavaFileObject[] {
-                    fileFromString(pkgName, clsName, src),
-                    fileFromString(pkgName,"RuntimeHelper", (pkgName.isEmpty()? "" : "package " + pkgName + ";\n") +
+            List<JavaFileObject> files = new ArrayList<>();
+            files.add(fileFromString(pkgName, clsName, src));
+            files.add(fileFromString(pkgName,"RuntimeHelper", (pkgName.isEmpty()? "" : "package " + pkgName + ";\n") +
                             Files.readAllLines(Paths.get(runtimeHelper.toURI()))
-                            .stream().collect(Collectors.joining("\n")).replace("${C_LANG}", C_LANG_CONSTANTS_HOLDER))
-            };
+                            .stream().collect(Collectors.joining("\n")).replace("${C_LANG}", C_LANG_CONSTANTS_HOLDER)));
+            files.add(getCstringFile(pkgName));
+            files.addAll(getPrimitiveTypeFiles(pkgName));
+            return files.toArray(new JavaFileObject[0]);
         } catch (IOException ex) {
             throw new UncheckedIOException(ex);
         } catch (URISyntaxException ex2) {
             throw new RuntimeException(ex2);
         }
@@ -184,10 +187,53 @@
         } catch (Exception ex) {
             ex.printStackTrace();
         }
     }
 
+    private JavaFileObject getCstringFile(String pkgName) throws IOException, URISyntaxException {
+        var cstringFile = HandleSourceFactory.class.getResource("resources/Cstring.java.template");
+        var lines = Files.readAllLines(Paths.get(cstringFile.toURI()));
+        String pkgPrefix = pkgName.isEmpty()? "" : "package " + pkgName + ";\n";
+        String contents =  pkgPrefix +
+                lines.stream().collect(Collectors.joining("\n"));
+        return fileFromString(pkgName,"Cstring", contents);
+    }
+
+    private List<JavaFileObject> getPrimitiveTypeFiles(String pkgName) throws IOException, URISyntaxException {
+        var abi = InternalForeign.getInstancePrivileged().getSystemABI();
+        var cXJavaFile = HandleSourceFactory.class.getResource("resources/C-X.java.template");
+        var lines = Files.readAllLines(Paths.get(cXJavaFile.toURI()));
+
+        List<JavaFileObject> files = new ArrayList<>();
+        String pkgPrefix = pkgName.isEmpty()? "" : "package " + pkgName + ";\n";
+        for (SystemABI.Type type : SystemABI.Type.values()) {
+            // FIXME: ignore pointer and complex type
+            if (type == SystemABI.Type.POINTER || type == SystemABI.Type.COMPLEX_LONG_DOUBLE) {
+                continue;
+            }
+
+            String typeName = type.name().toLowerCase();
+            MemoryLayout layout = abi.layoutFor(type).get();
+            String contents =  pkgPrefix +
+                    lines.stream().collect(Collectors.joining("\n")).
+                            replace("-X", typeName).
+                            replace("${C_LANG}", C_LANG_CONSTANTS_HOLDER).
+                            replace("${LAYOUT}", TypeTranslator.typeToLayoutName(type)).
+                            replace("${CARRIER}", classForType(type, layout).getName());
+            files.add(fileFromString(pkgName,"C" + typeName, contents));
+        }
+        return files;
+    }
+
+    private static Class<?> classForType(SystemABI.Type type, MemoryLayout layout) {
+        boolean isFloat = switch(type) {
+            case FLOAT, DOUBLE, LONG_DOUBLE -> true;
+            default-> false;
+        };
+        return TypeTranslator.layoutToClass(isFloat, layout);
+    }
+
     private JavaFileObject fileFromString(String pkgName, String clsName, String contents) {
         String pkgPrefix = pkgName.isEmpty() ? "" : pkgName.replaceAll("\\.", "/") + "/";
         return new SimpleJavaFileObject(URI.create(pkgPrefix + clsName + ".java"), JavaFileObject.Kind.SOURCE) {
             @Override
             public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
@@ -27,23 +27,20 @@
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
-import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
 import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.ValueLayout;
 import jdk.internal.foreign.InternalForeign;
 
 import java.lang.invoke.MethodType;
-import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.stream.Collectors;
-import java.util.stream.IntStream;
 import java.util.stream.Stream;
 import javax.lang.model.SourceVersion;
 
 import static jdk.incubator.foreign.SystemABI.NATIVE_TYPE;
 
@@ -135,29 +132,11 @@
     private void addLayout(MemoryLayout l) {
         if (l instanceof ValueLayout) {
             SystemABI.Type type = l.attribute(NATIVE_TYPE)
                                    .map(SystemABI.Type.class::cast)
                                    .orElseThrow(()->new AssertionError("Should not get here: " + l));
-            sb.append(switch (type) {
-                case BOOL -> "C_BOOL";
-                case SIGNED_CHAR -> "C_SCHAR";
-                case UNSIGNED_CHAR -> "C_UCHAR";
-                case CHAR -> "C_CHAR";
-                case SHORT -> "C_SHORT";
-                case UNSIGNED_SHORT -> "C_USHORT";
-                case INT -> "C_INT";
-                case UNSIGNED_INT -> "C_UINT";
-                case LONG -> "C_LONG";
-                case UNSIGNED_LONG -> "C_ULONG";
-                case LONG_LONG -> "C_LONGLONG";
-                case UNSIGNED_LONG_LONG -> "C_ULONGLONG";
-                case FLOAT -> "C_FLOAT";
-                case DOUBLE -> "C_DOUBLE";
-                case LONG_DOUBLE -> "C_LONGDOUBLE";
-                case POINTER -> "C_POINTER";
-                default -> { throw new RuntimeException("should not reach here: " + type); }
-            });
+            sb.append(TypeTranslator.typeToLayoutName(type));
         } else if (l instanceof SequenceLayout) {
             sb.append("MemoryLayout.ofSequence(");
             if (((SequenceLayout) l).elementCount().isPresent()) {
                 sb.append(((SequenceLayout) l).elementCount().getAsLong() + ", ");
             }
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/TypeTranslator.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/TypeTranslator.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/TypeTranslator.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/TypeTranslator.java
@@ -23,10 +23,11 @@
  * questions.
  */
 
 package jdk.incubator.jextract.tool;
 
+import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.jextract.Type;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 
@@ -53,11 +54,35 @@
             default:
                 return false;
         }
     }
 
-    private Class<?> layoutToClass(boolean fp, MemoryLayout layout) {
+    static String typeToLayoutName(SystemABI.Type type) {
+        return switch (type) {
+            case BOOL -> "C_BOOL";
+            case SIGNED_CHAR -> "C_SCHAR";
+            case UNSIGNED_CHAR -> "C_UCHAR";
+            case CHAR -> "C_CHAR";
+            case SHORT -> "C_SHORT";
+            case UNSIGNED_SHORT -> "C_USHORT";
+            case INT -> "C_INT";
+            case UNSIGNED_INT -> "C_UINT";
+            case LONG -> "C_LONG";
+            case UNSIGNED_LONG -> "C_ULONG";
+            case LONG_LONG -> "C_LONGLONG";
+            case UNSIGNED_LONG_LONG -> "C_ULONGLONG";
+            case FLOAT -> "C_FLOAT";
+            case DOUBLE -> "C_DOUBLE";
+            case LONG_DOUBLE -> "C_LONGDOUBLE";
+            case POINTER -> "C_POINTER";
+            default -> {
+                throw new RuntimeException("should not reach here: " + type);
+            }
+        };
+    }
+
+    static Class<?> layoutToClass(boolean fp, MemoryLayout layout) {
         switch ((int)layout.bitSize()) {
             case 8: return byte.class;
             case 16: return short.class;
             case 32: return !fp ? int.class : float.class;
             case 64:
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
--- /dev/null
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
@@ -0,0 +1,86 @@
+// Generated by jextract
+
+import java.lang.invoke.VarHandle;
+import jdk.incubator.foreign.AllocationScope;
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.MemorySegment;
+
+import static ${C_LANG}.*;
+
+public final class C-X {
+    // don't create!
+    private C-X() {
+    }
+
+    private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
+        return MemoryLayout.ofSequence(elemLayout)
+                 .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
+    }
+
+    public static final MemoryLayout LAYOUT = ${LAYOUT};
+    public static final Class<?> CARRIER = ${CARRIER}.class;
+    private static final VarHandle handle = LAYOUT.varHandle(CARRIER);
+    private static final VarHandle arrayHandle = arrayHandle(LAYOUT, CARRIER);
+
+    public static ${CARRIER} get(MemoryAddress addr) {
+        return (${CARRIER}) handle.get(addr);
+    }
+
+    public static void set(MemoryAddress addr, ${CARRIER} value) {
+        handle.set(addr, value);
+    }
+
+    public static ${CARRIER} get(MemoryAddress addr, long index) {
+        return (${CARRIER}) arrayHandle.get(addr, index);
+    }
+
+    public static void set(MemoryAddress addr, long index, ${CARRIER} value) {
+        arrayHandle.set(addr, index, value);
+    }
+
+    public static MemorySegment allocate(${CARRIER} value) {
+        var seg = MemorySegment.allocateNative(LAYOUT);
+        handle.set(seg.baseAddress(), value);
+        return seg;
+    }
+
+    public static MemoryAddress allocate(${CARRIER} value, AllocationScope scope) {
+        var addr = scope.allocate(LAYOUT);
+        handle.set(addr, value);
+        return addr;
+    }
+
+    public static MemorySegment allocateArray(int length) {
+        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
+        return MemorySegment.allocateNative(arrLayout);
+    }
+
+    public static MemoryAddress allocateArray(int length, AllocationScope scope) {
+        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
+        return scope.allocate(arrLayout);
+    }
+
+    public static MemorySegment allocateArray(${CARRIER}[] arr) {
+        var arrLayout = MemoryLayout.ofSequence(arr.length, LAYOUT);
+        var seg = MemorySegment.allocateNative(arrLayout);
+        copy(seg.baseAddress(), arr);
+        return seg;
+    }
+
+    public static MemoryAddress allocateArray(${CARRIER}[] arr, AllocationScope scope) {
+        var arrLayout = MemoryLayout.ofSequence(arr.length, LAYOUT);
+        var addr = scope.allocate(arrLayout);
+        copy(addr, arr);
+        return addr;
+    }
+
+    public static long sizeof() {
+        return LAYOUT.byteSize();
+    }
+
+    public static void copy(MemoryAddress addr, ${CARRIER}[] arr) {
+        var heapSegment = MemorySegment.ofArray(arr);
+        MemoryAddress.copy(heapSegment.baseAddress(), addr, arr.length * sizeof());
+    }
+}
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
--- /dev/null
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
@@ -0,0 +1,83 @@
+// Generated by jextract
+
+import java.lang.invoke.VarHandle;
+import java.nio.charset.Charset;
+import jdk.incubator.foreign.AllocationScope;
+import jdk.incubator.foreign.Foreign;
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.MemorySegment;
+import static jdk.incubator.foreign.MemoryLayouts.C_CHAR;
+
+public final class Cstring {
+    // don't create!
+    private Cstring() {
+    }
+
+    private static final Foreign foreign = Foreign.getInstance();
+
+    private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
+        return MemoryLayout.ofSequence(elemLayout)
+                .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
+    }
+    private final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);
+
+    private static void copy(MemoryAddress addr, byte[] bytes) {
+        var heapSegment = MemorySegment.ofArray(bytes);
+        MemoryAddress.copy(heapSegment.baseAddress(), addr, bytes.length);
+        byteArrHandle.set(addr, (long)bytes.length, (byte)0);
+    }
+
+    private static MemorySegment toCString(byte[] bytes) {
+        MemoryLayout strLayout = MemoryLayout.ofSequence(bytes.length + 1, C_CHAR);
+        MemorySegment segment = MemorySegment.allocateNative(strLayout);
+        MemoryAddress addr = segment.baseAddress();
+        copy(addr, bytes);
+        return segment;
+    }
+
+    private static MemoryAddress toCString(byte[] bytes, AllocationScope scope) {
+        MemoryLayout strLayout = MemoryLayout.ofSequence(bytes.length + 1, C_CHAR);
+        MemoryAddress addr = scope.allocate(strLayout);
+        copy(addr, bytes);
+        return addr;
+    }
+
+    public static void copy(MemoryAddress addr, String str) {
+        copy(addr, str.getBytes());
+    }
+
+    public static void copy(MemoryAddress addr, String str, Charset charset) {
+        copy(addr, str.getBytes(charset));
+    }
+
+    public static MemorySegment toCString(String str) {
+         return toCString(str.getBytes());
+    }
+
+    public static MemorySegment toCString(String str, Charset charset) {
+         return toCString(str.getBytes(charset));
+    }
+
+    public static MemoryAddress toCString(String str, AllocationScope scope) {
+        return toCString(str.getBytes(), scope);
+    }
+
+    public static MemoryAddress toCString(String str, Charset charset, AllocationScope scope) {
+        return toCString(str.getBytes(charset), scope);
+    }
+
+    public static String toString(MemoryAddress addr) {
+        StringBuilder buf = new StringBuilder();
+        try (MemorySegment seg = foreign.ofNativeUnchecked(addr, Long.MAX_VALUE)) {
+            MemoryAddress baseAddr = seg.baseAddress();
+            byte curr = (byte) byteArrHandle.get(baseAddr, 0);
+            long offset = 0;
+            while (curr != 0) {
+                buf.append((char) curr);
+                curr = (byte) byteArrHandle.get(baseAddr, ++offset);
+            }
+        }
+        return buf.toString();
+    }
+}
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
diff a/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java b/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
--- /dev/null
+++ b/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+import java.util.stream.DoubleStream;
+import java.util.stream.IntStream;
+import jdk.incubator.foreign.AllocationScope;
+import org.testng.annotations.Test;
+import test.jextract.test8241925.*;
+import static org.testng.Assert.assertEquals;
+import static test.jextract.test8241925.test8241925_h.*;
+
+/*
+ * @test
+ * @library ..
+ * @modules jdk.incubator.jextract
+ * @bug 8241925
+ * @summary jextract should generate simple allocation, access API for C primitive types
+ * @run driver JtregJextract -l Test8241925 -t test.jextract.test8241925 -- test8241925.h
+ * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit LibTest8241925Test
+ */
+public class LibTest8241925Test {
+    @Test
+    public void test() {
+        try (var scope = AllocationScope.unboundedNativeScope()) {
+            var addr = Cint.allocate(12, scope);
+            assertEquals(Cint.get(addr), 12);
+            square(addr);
+            assertEquals(Cint.get(addr), 144);
+
+            addr = Cdouble.allocate(12.0, scope);
+            assertEquals(Cdouble.get(addr), 12.0, 0.1);
+            square_fp(addr);
+            assertEquals(Cdouble.get(addr), 144.0, 0.1);
+
+            int[] intArray = { 34, 67, 78, 8 };
+            addr = Cint.allocateArray(intArray, scope);
+            int sum = sum(addr, intArray.length);
+            assertEquals(sum, IntStream.of(intArray).sum());
+
+            double[] dblArray = { 34.5, 67.56, 78.2, 8.45 };
+            addr = Cdouble.allocateArray(dblArray, scope);
+            double sumd = sum_fp(addr, dblArray.length);
+            assertEquals(sumd, DoubleStream.of(dblArray).sum(), 0.1);
+
+            assertEquals(Cstring.toString(name()), "java");
+
+            var dest = Cchar.allocateArray(12, scope);
+            Cstring.copy(dest, "hello ");
+            var src = Cstring.toCString("world", scope);
+            assertEquals(Cstring.toString(concatenate(dest, src)), "hello world");
+        }
+    }
+}
diff a/test/jdk/tools/jextract/test8241925/libTest8241925.c b/test/jdk/tools/jextract/test8241925/libTest8241925.c
--- /dev/null
+++ b/test/jdk/tools/jextract/test8241925/libTest8241925.c
@@ -0,0 +1,61 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+#include "test8241925.h"
+#include <string.h>
+
+EXPORT void square(int* v) {
+    *v = (*v) * (*v);
+}
+
+EXPORT int sum(int* arr, int num) {
+    int res = 0;
+    int i = 0;
+    for (; i < num; i++) {
+        res += arr[i];
+    }
+    return res;
+}
+
+EXPORT void square_fp(double* v) {
+    *v = (*v) * (*v);
+}
+
+EXPORT double sum_fp(double* arr, int num) {
+    double res = 0;
+    int i = 0;
+    for (; i < num; i++) {
+        res += arr[i];
+    }
+    return res;
+}
+
+const char* cptr = "java";
+
+EXPORT const char* name(void) {
+    return cptr;
+}
+
+EXPORT char* concatenate(char* dest, char* src) {
+    return strcat(dest, src);
+}
diff a/test/jdk/tools/jextract/test8241925/test8241925.h b/test/jdk/tools/jextract/test8241925/test8241925.h
--- /dev/null
+++ b/test/jdk/tools/jextract/test8241925/test8241925.h
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+#ifdef __cplusplus
+extern "C" {
+#endif // __cplusplus
+
+#ifdef _WIN64
+#define EXPORT __declspec(dllexport)
+#else
+#define EXPORT
+#endif
+
+EXPORT void square(int* v);
+EXPORT int sum(int* arr, int num);
+
+EXPORT void square_fp(double* v);
+EXPORT double sum_fp(double* arr, int num);
+
+EXPORT const char* name(void);
+
+EXPORT char* concatenate(char* dest, char* src);
+
+#ifdef __cplusplus
+}
+#endif // __cplusplus
