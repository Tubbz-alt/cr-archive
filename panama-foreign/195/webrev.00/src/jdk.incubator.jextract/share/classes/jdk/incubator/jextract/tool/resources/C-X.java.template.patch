diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
@@ -48,22 +48,22 @@
         var seg = MemorySegment.allocateNative(LAYOUT);
         handle.set(seg.baseAddress(), value);
         return seg;
     }
 
-    public static MemoryAddress allocate(${CARRIER} value, NativeAllocationScope scope) {
+    public static MemoryAddress allocate(${CARRIER} value, CScope scope) {
         var addr = scope.allocate(LAYOUT);
         handle.set(addr, value);
         return addr;
     }
 
     public static MemorySegment allocateArray(int length) {
         var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
         return MemorySegment.allocateNative(arrLayout);
     }
 
-    public static MemoryAddress allocateArray(int length, NativeAllocationScope scope) {
+    public static MemoryAddress allocateArray(int length, CScope scope) {
         var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
         return scope.allocate(arrLayout);
     }
 
     public static MemorySegment allocateArray(${CARRIER}[] arr) {
@@ -71,11 +71,11 @@
         var seg = MemorySegment.allocateNative(arrLayout);
         seg.copyFrom(MemorySegment.ofArray(arr));
         return seg;
     }
 
-    public static MemoryAddress allocateArray(${CARRIER}[] arr, NativeAllocationScope scope) {
+    public static MemoryAddress allocateArray(${CARRIER}[] arr, CScope scope) {
         var arrLayout = MemoryLayout.ofSequence(arr.length, LAYOUT);
         var addr = scope.allocate(arrLayout);
         addr.segment().copyFrom(MemorySegment.ofArray(arr));
         return addr;
     }
