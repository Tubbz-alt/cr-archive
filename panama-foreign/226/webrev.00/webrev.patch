diff a/test/jdk/java/jextract/Test8239490.h b/test/jdk/java/jextract/Test8239490.h
--- a/test/jdk/java/jextract/Test8239490.h
+++ b/test/jdk/java/jextract/Test8239490.h
@@ -32,9 +32,9 @@
     unsigned int y:31;
     struct Foo z[1];
 };
 
 struct Baz {
-    unsigned long x:1;
-    unsigned long y:63;
+    unsigned long long x:1;
+    unsigned long long y:63;
     struct Bar z[1];
 };
diff a/test/jdk/java/jextract/Test8240853.h b/test/jdk/java/jextract/Test8240853.h
--- a/test/jdk/java/jextract/Test8240853.h
+++ b/test/jdk/java/jextract/Test8240853.h
@@ -21,7 +21,7 @@
  * questions.
  */
 
 union Foo {
     int i;
-    long l;
+    long long l;
 };
diff a/test/jdk/java/jextract/Test8240853.java b/test/jdk/java/jextract/Test8240853.java
--- a/test/jdk/java/jextract/Test8240853.java
+++ b/test/jdk/java/jextract/Test8240853.java
@@ -22,11 +22,11 @@
  */
 
 /*
  * @test
  * @build JextractApiTestBase
- * @run testng Test8239490
+ * @run testng Test8240853
  */
 
 import jdk.incubator.jextract.Declaration;
 import org.testng.annotations.Test;
 
diff a/test/jdk/tools/jextract/test8244959/Test8244959.java b/test/jdk/tools/jextract/test8244959/Test8244959.java
--- a/test/jdk/tools/jextract/test8244959/Test8244959.java
+++ b/test/jdk/tools/jextract/test8244959/Test8244959.java
@@ -31,20 +31,20 @@
 
 /*
  * @test
  * @library ..
  * @modules jdk.incubator.jextract
- * @run driver JtregJextract -t test.jextract.printf -- printf.h
+ * @run driver JtregJextract -t test.jextract.printf -l Printf -- printf.h
  * @run testng/othervm -Dforeign.restricted=permit Test8244959
  */
 public class Test8244959 {
     @Test
     public void testsPrintf() {
         try (MemorySegment s = MemorySegment.allocateNative(1024)) {
-            sprintf(s.baseAddress(),
-                toCString("%hhd %c %.2f %.2f %ld %ld %d %hd %d %d %lld %c").baseAddress(),
-                (byte) 1, 'b', -1.25f, 5.5d, -200l, Long.MAX_VALUE, (byte) -2, (short) 2, 3, (short) -4, 5l, 'a');
+            my_sprintf(s.baseAddress(),
+                toCString("%hhd %c %.2f %.2f %lld %lld %d %hd %d %d %lld %c").baseAddress(), 12,
+                (byte) 1, 'b', -1.25f, 5.5d, -200L, Long.MAX_VALUE, (byte) -2, (short) 2, 3, (short) -4, 5L, 'a');
             String str = toJavaString(s.baseAddress());
             assertEquals(str, "1 b -1.25 5.50 -200 " + Long.MAX_VALUE + " -2 2 3 -4 5 a");
         }
     }
 }
diff a/test/jdk/tools/jextract/test8244959/libPrintf.c b/test/jdk/tools/jextract/test8244959/libPrintf.c
--- /dev/null
+++ b/test/jdk/tools/jextract/test8244959/libPrintf.c
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+#include "printf.h"
+
+#include <stdio.h>
+#include <stdarg.h>
+
+EXPORT int my_sprintf(char *buf, const char *fmt, int arg_num, ...) {
+    va_list list;
+    va_start(list, arg_num);
+    int result = vsprintf(buf, fmt, list);
+    va_end(list);
+    return result;
+}
diff a/test/jdk/tools/jextract/test8244959/printf.h b/test/jdk/tools/jextract/test8244959/printf.h
--- a/test/jdk/tools/jextract/test8244959/printf.h
+++ b/test/jdk/tools/jextract/test8244959/printf.h
@@ -1,1 +1,30 @@
-int sprintf(char *buf, const char *fmt, ...);
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+#ifdef _WIN64
+#define EXPORT __declspec(dllexport)
+#else
+#define EXPORT
+#endif
+
+EXPORT int my_sprintf(char *buf, const char *fmt, int arg_num, ...);
