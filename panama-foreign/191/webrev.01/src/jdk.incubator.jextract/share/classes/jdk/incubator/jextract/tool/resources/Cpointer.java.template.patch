diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
--- /dev/null
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
@@ -0,0 +1,33 @@
+// Generated by jextract
+
+import java.lang.invoke.VarHandle;
+import jdk.incubator.foreign.NativeAllocationScope;
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.MemorySegment;
+import static jdk.incubator.foreign.CSupport.C_POINTER;
+
+public final class Cpointer {
+    private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
+        return MemoryLayout.ofSequence(elemLayout)
+            .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
+    }
+
+    public static final MemoryLayout LAYOUT = C_POINTER;
+    public static final Class<?> CARRIER = long.class;
+    private static final VarHandle handle = LAYOUT.varHandle(CARRIER);
+    private static final VarHandle arrayHandle = arrayHandle(LAYOUT, CARRIER);
+
+    private static MemoryAddress get(MemoryAddress addr) {
+        return MemoryAddress.ofLong((long) handle.get(addr));
+    }
+
+    public static MemoryAddress asArray(MemoryAddress addr, int numPointers) {
+        return MemorySegment.ofNativeRestricted(addr, numPointers * LAYOUT.byteSize(),
+               Thread.currentThread(), null, null).baseAddress();
+    }
+
+    public static MemoryAddress get(MemoryAddress addr, long index) {
+        return MemoryAddress.ofLong((long)arrayHandle.get(addr, index));
+    }
+}
