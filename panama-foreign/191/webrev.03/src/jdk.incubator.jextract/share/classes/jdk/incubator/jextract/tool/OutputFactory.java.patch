diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -154,10 +154,11 @@
             List<JavaFileObject> files = new ArrayList<>();
             files.add(builder.build());
             files.addAll(constantHelper.getClasses());
             files.add(fileFromString(pkgName,"RuntimeHelper", getRuntimeHelperSource()));
             files.add(getCstringFile(pkgName));
+            files.add(getCpointerFile(pkgName));
             files.addAll(getPrimitiveTypeFiles(pkgName));
             return files.toArray(new JavaFileObject[0]);
         } catch (IOException ex) {
             throw new UncheckedIOException(ex);
         } catch (URISyntaxException ex2) {
@@ -179,16 +180,24 @@
             ex.printStackTrace();
         }
     }
 
     private JavaFileObject getCstringFile(String pkgName) throws IOException, URISyntaxException {
-        var cstringFile = OutputFactory.class.getResource("resources/Cstring.java.template");
+        return getTemplateFile(pkgName, "Cstring", "resources/Cstring.java.template");
+    }
+
+    private JavaFileObject getCpointerFile(String pkgName) throws IOException, URISyntaxException {
+        return getTemplateFile(pkgName, "Cpointer", "resources/Cpointer.java.template");
+    }
+
+    private JavaFileObject getTemplateFile(String pkgName, String className, String path) throws IOException, URISyntaxException {
+        var cstringFile = OutputFactory.class.getResource(path);
         var lines = Files.readAllLines(Paths.get(cstringFile.toURI()));
         String pkgPrefix = pkgName.isEmpty()? "" : "package " + pkgName + ";\n";
         String contents =  pkgPrefix +
                 lines.stream().collect(Collectors.joining("\n"));
-        return fileFromString(pkgName,"Cstring", contents);
+        return fileFromString(pkgName,className, contents);
     }
 
     private List<JavaFileObject> getPrimitiveTypeFiles(String pkgName) throws IOException, URISyntaxException {
         var abi = SharedUtils.getSystemLinker();
         var cXJavaFile = OutputFactory.class.getResource("resources/C-X.java.template");
