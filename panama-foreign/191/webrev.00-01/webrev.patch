diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
@@ -20,11 +20,11 @@
 
     private static MemoryAddress get(MemoryAddress addr) {
         return MemoryAddress.ofLong((long) handle.get(addr));
     }
 
-    public static MemoryAddress resize(MemoryAddress addr, int numPointers) {
+    public static MemoryAddress asArray(MemoryAddress addr, int numPointers) {
         return MemorySegment.ofNativeRestricted(addr, numPointers * LAYOUT.byteSize(),
                Thread.currentThread(), null, null).baseAddress();
     }
 
     public static MemoryAddress get(MemoryAddress addr, long index) {
diff a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
--- a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
+++ b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
@@ -25,10 +25,11 @@
 import java.util.stream.IntStream;
 import jdk.incubator.foreign.NativeAllocationScope;
 import org.testng.annotations.Test;
 import test.jextract.test8246341.*;
 import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
 import static test.jextract.test8246341.test8246341_h.*;
 
 /*
  * @test
  * @library ..
@@ -39,15 +40,20 @@
  * @run testng/othervm -Dforeign.restricted=permit LibTest8246341Test
  */
 public class LibTest8246341Test {
     @Test
     public void test() {
-        try (var scope = func$callback.allocate((argc, argv) -> {
-            var addr = Cpointer.resize(argv, argc);
+        boolean[] callbackCalled = new boolean[1];
+        try (var callback = func$callback.allocate((argc, argv) -> {
+            callbackCalled[0] = true;
+            var addr = Cpointer.asArray(argv, argc);
             assertEquals(argc, 4);
             assertEquals(Cstring.toJavaString(Cpointer.get(addr, 0)), "java");
             assertEquals(Cstring.toJavaString(Cpointer.get(addr, 1)), "python");
             assertEquals(Cstring.toJavaString(Cpointer.get(addr, 2)), "javascript");
             assertEquals(Cstring.toJavaString(Cpointer.get(addr, 3)), "c++");
-        })) {}
+        })) {
+            func(callback.baseAddress());
+        }
+        assertTrue(callbackCalled[0]);
     }
 }
diff a/test/jdk/tools/jextract/test8246341/test8246341.h b/test/jdk/tools/jextract/test8246341/test8246341.h
--- a/test/jdk/tools/jextract/test8246341/test8246341.h
+++ b/test/jdk/tools/jextract/test8246341/test8246341.h
@@ -29,10 +29,10 @@
 #define EXPORT __declspec(dllexport)
 #else
 #define EXPORT
 #endif
 
-void func(void (*callback)(int argc, char** argv));
+EXPORT void func(void (*callback)(int argc, char** argv));
 
 #ifdef __cplusplus
 }
 #endif // __cplusplus
