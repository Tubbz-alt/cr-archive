diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
@@ -21,10 +21,15 @@
     public static final MemoryLayout LAYOUT = ${LAYOUT};
     public static final Class<?> CARRIER = ${CARRIER}.class;
     private static final VarHandle handle = LAYOUT.varHandle(CARRIER);
     private static final VarHandle arrayHandle = arrayHandle(LAYOUT, CARRIER);
 
+    public static MemoryAddress asArray(MemoryAddress addr, int numElements) {
+        return MemorySegment.ofNativeRestricted(addr, numElements * LAYOUT.byteSize(),
+               Thread.currentThread(), null, null).baseAddress();
+    }
+
     public static ${CARRIER} get(MemoryAddress addr) {
         return (${CARRIER}) handle.get(addr);
     }
 
     public static void set(MemoryAddress addr, ${CARRIER} value) {
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
@@ -17,18 +17,52 @@
     public static final MemoryLayout LAYOUT = C_POINTER;
     public static final Class<?> CARRIER = long.class;
     private static final VarHandle handle = MemoryHandles.asAddressVarHandle(LAYOUT.varHandle(CARRIER));
     private static final VarHandle arrayHandle = MemoryHandles.asAddressVarHandle(arrayHandle(LAYOUT, CARRIER));
 
-    private static MemoryAddress get(MemoryAddress addr) {
-        return (MemoryAddress) handle.get(addr);
-    }
-
     public static MemoryAddress asArray(MemoryAddress addr, int numPointers) {
         return MemorySegment.ofNativeRestricted(addr, numPointers * LAYOUT.byteSize(),
                Thread.currentThread(), null, null).baseAddress();
     }
 
+    public static MemoryAddress get(MemoryAddress addr) {
+        return (MemoryAddress) handle.get(addr);
+    }
+
+    public static void set(MemoryAddress addr, MemoryAddress value) {
+        handle.set(addr, value);
+    }
+
     public static MemoryAddress get(MemoryAddress addr, long index) {
         return (MemoryAddress) arrayHandle.get(addr, index);
     }
+
+    public static void set(MemoryAddress addr, long index, MemoryAddress value) {
+        arrayHandle.set(addr, index, value);
+    }
+
+    public static MemorySegment allocate(MemoryAddress value) {
+        var seg = MemorySegment.allocateNative(LAYOUT);
+        handle.set(seg.baseAddress(), value);
+        return seg;
+    }
+
+    public static MemoryAddress allocate(MemoryAddress value, NativeAllocationScope scope) {
+        var addr = scope.allocate(LAYOUT);
+        handle.set(addr, value);
+        return addr;
+    }
+
+    public static MemorySegment allocateArray(int length) {
+        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
+        return MemorySegment.allocateNative(arrLayout);
+    }
+
+    public static MemoryAddress allocateArray(int length, NativeAllocationScope scope) {
+        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
+        return scope.allocate(arrLayout);
+    }
+
+    public static long sizeof() {
+        return LAYOUT.byteSize();
+    }
 }
diff a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
--- a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
+++ b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
@@ -21,10 +21,11 @@
  * questions.
  */
 
 import java.util.stream.DoubleStream;
 import java.util.stream.IntStream;
+import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.NativeAllocationScope;
 import org.testng.annotations.Test;
 import test.jextract.test8246341.*;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
@@ -39,11 +40,11 @@
  * @run driver JtregJextract -l Test8246341 -t test.jextract.test8246341 -- test8246341.h
  * @run testng/othervm -Dforeign.restricted=permit LibTest8246341Test
  */
 public class LibTest8246341Test {
     @Test
-    public void test() {
+    public void testPointerArray() {
         boolean[] callbackCalled = new boolean[1];
         try (var callback = func$callback.allocate((argc, argv) -> {
             callbackCalled[0] = true;
             var addr = Cpointer.asArray(argv, argc);
             assertEquals(argc, 4);
@@ -54,6 +55,21 @@
         })) {
             func(callback.baseAddress());
         }
         assertTrue(callbackCalled[0]);
     }
+
+    @Test
+    public void testPointerAllocate() {
+        try (var scope = NativeAllocationScope.boundedScope(Cpointer.sizeof())) {
+            var addr = Cpointer.allocate(MemoryAddress.NULL, scope);
+            fillin(addr);
+            assertEquals(Cstring.toJavaString(Cpointer.get(addr)), "hello world");
+        }
+
+        try (var seg = Cpointer.allocate(MemoryAddress.NULL)) {
+            var addr = seg.baseAddress();
+            fillin(addr);
+            assertEquals(Cstring.toJavaString(Cpointer.get(addr)), "hello world");
+        }
+    }
 }
diff a/test/jdk/tools/jextract/test8246341/libTest8246341.c b/test/jdk/tools/jextract/test8246341/libTest8246341.c
--- a/test/jdk/tools/jextract/test8246341/libTest8246341.c
+++ b/test/jdk/tools/jextract/test8246341/libTest8246341.c
@@ -23,10 +23,15 @@
 
 #include "test8246341.h"
 
 #define NUM_STRINGS 4
 
-char* table[NUM_STRINGS] = { "java", "python", "javascript", "c++" };
+static char* table[NUM_STRINGS] = { "java", "python", "javascript", "c++" };
+static char* msg = "hello world";
 
 EXPORT void func(void (*callback)(int argc, char** argv)) {
     callback(NUM_STRINGS, table);
 }
+
+EXPORT void fillin(char** pmsg) {
+    *pmsg = msg;
+}
diff a/test/jdk/tools/jextract/test8246341/test8246341.h b/test/jdk/tools/jextract/test8246341/test8246341.h
--- a/test/jdk/tools/jextract/test8246341/test8246341.h
+++ b/test/jdk/tools/jextract/test8246341/test8246341.h
@@ -30,9 +30,10 @@
 #else
 #define EXPORT
 #endif
 
 EXPORT void func(void (*callback)(int argc, char** argv));
+EXPORT void fillin(char** pmsg);
 
 #ifdef __cplusplus
 }
 #endif // __cplusplus
