diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
@@ -17,18 +17,52 @@
     public static final MemoryLayout LAYOUT = C_POINTER;
     public static final Class<?> CARRIER = long.class;
     private static final VarHandle handle = MemoryHandles.asAddressVarHandle(LAYOUT.varHandle(CARRIER));
     private static final VarHandle arrayHandle = MemoryHandles.asAddressVarHandle(arrayHandle(LAYOUT, CARRIER));
 
-    private static MemoryAddress get(MemoryAddress addr) {
-        return (MemoryAddress) handle.get(addr);
-    }
-
     public static MemoryAddress asArray(MemoryAddress addr, int numPointers) {
         return MemorySegment.ofNativeRestricted(addr, numPointers * LAYOUT.byteSize(),
                Thread.currentThread(), null, null).baseAddress();
     }
 
+    public static MemoryAddress get(MemoryAddress addr) {
+        return (MemoryAddress) handle.get(addr);
+    }
+
+    public static void set(MemoryAddress addr, MemoryAddress value) {
+        handle.set(addr, value);
+    }
+
     public static MemoryAddress get(MemoryAddress addr, long index) {
         return (MemoryAddress) arrayHandle.get(addr, index);
     }
+
+    public static void set(MemoryAddress addr, long index, MemoryAddress value) {
+        arrayHandle.set(addr, index, value);
+    }
+
+    public static MemorySegment allocate(MemoryAddress value) {
+        var seg = MemorySegment.allocateNative(LAYOUT);
+        handle.set(seg.baseAddress(), value);
+        return seg;
+    }
+
+    public static MemoryAddress allocate(MemoryAddress value, NativeAllocationScope scope) {
+        var addr = scope.allocate(LAYOUT);
+        handle.set(addr, value);
+        return addr;
+    }
+
+    public static MemorySegment allocateArray(int length) {
+        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
+        return MemorySegment.allocateNative(arrLayout);
+    }
+
+    public static MemoryAddress allocateArray(int length, NativeAllocationScope scope) {
+        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
+        return scope.allocate(arrLayout);
+    }
+
+    public static long sizeof() {
+        return LAYOUT.byteSize();
+    }
 }
