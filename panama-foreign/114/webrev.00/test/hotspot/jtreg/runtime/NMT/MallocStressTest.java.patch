diff a/test/hotspot/jtreg/runtime/NMT/MallocStressTest.java b/test/hotspot/jtreg/runtime/NMT/MallocStressTest.java
--- a/test/hotspot/jtreg/runtime/NMT/MallocStressTest.java
+++ b/test/hotspot/jtreg/runtime/NMT/MallocStressTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,11 +22,11 @@
  */
 
 /*
  * @test
  * @summary Stress test for malloc tracking
- * @key nmt jcmd stress
+ * @key nmt jcmd stress randomness
  * @library /test/lib
  * @modules java.base/jdk.internal.misc
  *          java.management
  * @build sun.hotspot.WhiteBox
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox
@@ -37,10 +37,11 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 import jdk.test.lib.JDKToolFinder;
 import jdk.test.lib.Platform;
+import jdk.test.lib.Utils;
 import jdk.test.lib.process.ProcessTools;
 import jdk.test.lib.process.OutputAnalyzer;
 import sun.hotspot.WhiteBox;
 
 public class MallocStressTest {
@@ -157,18 +158,18 @@
         long addr()  { return this.addr; }
         int  size()  { return this.size; }
     }
 
     static class AllocThread extends Thread {
+        private final Random random = new Random(Utils.getRandomInstance().nextLong());
         AllocThread() {
             this.setName("MallocThread");
             this.start();
         }
 
         // AllocThread only runs "Alloc" phase
         public void run() {
-            Random random = new Random();
             // MallocStressTest.phase == TestPhase.alloc
             for (int loops = 0; loops < 100; loops++) {
                 int r = random.nextInt(Integer.MAX_VALUE);
                 // Only malloc small amount to avoid OOM
                 int size = r % 32;
@@ -199,11 +200,11 @@
             MallocStressTest.pause_count.incrementAndGet();
         }
     }
 
     static class ReleaseThread extends Thread {
-        private Random random = new Random();
+        private final Random random = new Random(Utils.getRandomInstance().nextLong());
         ReleaseThread() {
             this.setName("ReleaseThread");
             this.start();
         }
 
