diff a/test/hotspot/jtreg/runtime/NMT/MallocTrackingVerify.java b/test/hotspot/jtreg/runtime/NMT/MallocTrackingVerify.java
--- a/test/hotspot/jtreg/runtime/NMT/MallocTrackingVerify.java
+++ b/test/hotspot/jtreg/runtime/NMT/MallocTrackingVerify.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -23,11 +23,11 @@
 
 /*
  * @test
  * @bug 8054836
  * @summary Test to verify correctness of malloc tracking
- * @key nmt jcmd
+ * @key nmt jcmd randomness
  * @library /test/lib
  * @modules java.base/jdk.internal.misc
  *          java.management
  * @build sun.hotspot.WhiteBox
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox
@@ -39,10 +39,11 @@
 import java.util.Random;
 
 import jdk.test.lib.process.ProcessTools;
 import jdk.test.lib.process.OutputAnalyzer;
 import jdk.test.lib.JDKToolFinder;
+import jdk.test.lib.Utils;
 
 import sun.hotspot.WhiteBox;
 
 public class MallocTrackingVerify {
     private static int MAX_ALLOC = 4 * 1024;
@@ -56,11 +57,11 @@
 
         // Grab my own PID
         String pid = Long.toString(ProcessTools.getProcessId());
         ProcessBuilder pb = new ProcessBuilder();
 
-        Random random = new Random();
+        Random random = Utils.getRandomInstance();
         // Allocate small amounts of memory with random pseudo call stack
         while (mallocd_total < MAX_ALLOC) {
             int size = random.nextInt(31) + 1;
             long addr = wb.NMTMallocWithPseudoStack(size, random.nextInt());
             if (addr != 0) {
