diff a/src/jdk.jfr/share/classes/jdk/jfr/consumer/RecordedObject.java b/src/jdk.jfr/share/classes/jdk/jfr/consumer/RecordedObject.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/consumer/RecordedObject.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/consumer/RecordedObject.java
@@ -502,11 +502,11 @@
      * @throws IllegalArgumentException if the field doesn't exist, or the field
      *         value can't be converted to the type {@code short} by a widening
      *         conversion
      *
      * @see #hasField(String)
-     * @set #getValue(String)
+     * @see #getValue(String)
      */
     public final short getShort(String name) {
         Object o = getValue(name, true);
         if (o instanceof Short) {
             return ((Short) o).shortValue();
@@ -549,11 +549,11 @@
      * @throws IllegalArgumentException if the field doesn't exist, or the field
      *         value can't be converted to the type {@code int} by a widening
      *         conversion
      *
      * @see #hasField(String)
-     * @set #getValue(String)
+     * @see #getValue(String)
      */
     public final int getInt(String name) {
         Object o = getValue(name, true);
         if (o instanceof Integer) {
             return ((Integer) o).intValue();
@@ -602,11 +602,11 @@
      * @throws IllegalArgumentException if the field doesn't exist, or the field
      *         value can't be converted to the type {@code float} by a widening
      *         conversion
      *
      * @see #hasField(String)
-     * @set #getValue(String)
+     * @see #getValue(String)
      */
     public final float getFloat(String name) {
         Object o = getValue(name);
         if (o instanceof Float) {
             return ((Float) o).floatValue();
@@ -652,11 +652,11 @@
      * @throws IllegalArgumentException if the field doesn't exist, or the field
      *         value can't be converted to the type {@code long} via a widening
      *         conversion
      *
      * @see #hasField(String)
-     * @set #getValue(String)
+     * @see #getValue(String)
      */
     public final long getLong(String name) {
         Object o = getValue(name, true);
         if (o instanceof Long) {
             return ((Long) o).longValue();
@@ -708,11 +708,11 @@
      * @throws IllegalArgumentException if the field doesn't exist, or the field
      *         value can't be converted to the type {@code double} by a widening
      *         conversion
      *
      * @see #hasField(String)
-     * @set #getValue(String)
+     * @see #getValue(String)
      */
     public final double getDouble(String name) {
         Object o = getValue(name);
         if (o instanceof Double) {
             return ((Double) o).doubleValue();
@@ -753,11 +753,11 @@
      *
      * @throws IllegalArgumentException if the field doesn't exist, or the field
      *         isn't of type {@code String}
      *
      * @see #hasField(String)
-     * @set #getValue(String)
+     * @see #getValue(String)
      */
     public final String getString(String name) {
         return getTypedValue(name, "java.lang.String");
     }
 
@@ -780,11 +780,11 @@
      *
      * @throws IllegalArgumentException if the field doesn't exist, or the field
      *         value can't be converted to a {@code Duration} object
      *
      * @see #hasField(String)
-     * @set #getValue(String)
+     * @see #getValue(String)
      */
     public final Duration getDuration(String name) {
         Object o = getValue(name);
         if (o instanceof Long) {
             return getDuration(((Long) o).longValue(), name);
@@ -811,11 +811,11 @@
             }
             if (u instanceof Byte) {
                 return getDuration(Short.toUnsignedLong((Byte) u), name);
             }
         }
-        throw newIllegalArgumentException(name, "java,time.Duration");
+        throw newIllegalArgumentException(name, "java.time.Duration");
     }
 
     private Duration getDuration(long timespan, String name) throws InternalError {
         ValueDescriptor v = getValueDescriptor(objectContext.fields, name, null);
         if (timespan == Long.MIN_VALUE) {
@@ -859,11 +859,11 @@
      *
      * @throws IllegalArgumentException if the field doesn't exist, or the field
      *         value can't be converted to an {@code Instant} object
      *
      * @see #hasField(String)
-     * @set #getValue(String)
+     * @see #getValue(String)
      */
     public final Instant getInstant(String name) {
         Object o = getValue(name, true);
         if (o instanceof Long) {
             return getInstant(((Long) o).longValue(), name);
@@ -929,11 +929,11 @@
      *
      * @throws IllegalArgumentException if the field doesn't exist, or the field
      *         isn't of type {@code Class}
      *
      * @see #hasField(String)
-     * @set #getValue(String)
+     * @see #getValue(String)
      */
     public final RecordedClass getClass(String name) {
         return getTypedValue(name, "java.lang.Class");
     }
 
@@ -953,11 +953,11 @@
      *
      * @throws IllegalArgumentException if the field doesn't exist, or the field
      *         isn't of type {@code Thread}
      *
      * @see #hasField(String)
-     * @set #getValue(String)
+     * @see #getValue(String)
      */
     public final RecordedThread getThread(String name) {
         return getTypedValue(name, "java.lang.Thread");
     }
 
