diff a/src/java.base/share/classes/sun/security/ssl/Finished.java b/src/java.base/share/classes/sun/security/ssl/Finished.java
--- a/src/java.base/share/classes/sun/security/ssl/Finished.java
+++ b/src/java.base/share/classes/sun/security/ssl/Finished.java
@@ -479,15 +479,20 @@
                         ChangeCipherSpec.t10Consumer);
                 shc.handshakeConsumers.put(
                         SSLHandshake.FINISHED.id, SSLHandshake.FINISHED);
                 shc.conContext.inputRecord.expectingFinishFlight();
             } else {
-                if (shc.handshakeSession.isRejoinable() &&
-                        !shc.handshakeSession.isStatelessable(shc)) {
-                    ((SSLSessionContextImpl)shc.sslContext.
-                        engineGetServerSessionContext()).put(
-                            shc.handshakeSession);
+                // Set the session's context based on stateless/cache status
+                if (shc.handshakeSession.isStatelessable(shc)) {
+                    shc.handshakeSession.setContext((SSLSessionContextImpl)
+                            shc.sslContext.engineGetServerSessionContext());
+                } else {
+                    if (shc.handshakeSession.isRejoinable()) {
+                        ((SSLSessionContextImpl)shc.sslContext.
+                                engineGetServerSessionContext()).put(
+                                shc.handshakeSession);
+                    }
                 }
                 shc.conContext.conSession = shc.handshakeSession.finish();
                 shc.conContext.protocolVersion = shc.negotiatedProtocol;
 
                 // handshake context cleanup.
@@ -855,10 +860,13 @@
              */
             if (shc.conContext.secureRenegotiation) {
                 shc.conContext.serverVerifyData = fm.verifyData;
             }
 
+            // Make sure session's context is set
+            shc.handshakeSession.setContext((SSLSessionContextImpl)
+                    shc.sslContext.engineGetServerSessionContext());
             shc.conContext.conSession = shc.handshakeSession.finish();
 
             // update the context
             shc.handshakeConsumers.put(
                     SSLHandshake.FINISHED.id, SSLHandshake.FINISHED);
@@ -895,10 +903,12 @@
                 ByteBuffer message) throws IOException {
             // Make sure that any expected CertificateVerify message
             // has been received and processed.
             if (!chc.isResumption) {
                 if (chc.handshakeConsumers.containsKey(
+                        SSLHandshake.CERTIFICATE.id) ||
+                    chc.handshakeConsumers.containsKey(
                         SSLHandshake.CERTIFICATE_VERIFY.id)) {
                     throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE,
                             "Unexpected Finished handshake message");
                 }
             }
@@ -1027,10 +1037,12 @@
                 ByteBuffer message) throws IOException {
             // Make sure that any expected CertificateVerify message
             // has been received and processed.
             if (!shc.isResumption) {
                 if (shc.handshakeConsumers.containsKey(
+                        SSLHandshake.CERTIFICATE.id) ||
+                    shc.handshakeConsumers.containsKey(
                         SSLHandshake.CERTIFICATE_VERIFY.id)) {
                     throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE,
                             "Unexpected Finished handshake message");
                 }
             }
@@ -1068,18 +1080,10 @@
                 throw shc.conContext.fatal(Alert.INTERNAL_ERROR,
                         "Not supported key derivation: " +
                         shc.negotiatedProtocol);
             }
 
-            // Save the session if possible and not stateless
-            if (!shc.statelessResumption && !shc.isResumption &&
-                    shc.handshakeSession.isRejoinable()) {
-                SSLSessionContextImpl sessionContext = (SSLSessionContextImpl)
-                        shc.sslContext.engineGetServerSessionContext();
-                sessionContext.put(shc.handshakeSession);
-            }
-
             try {
                 // update the application traffic read keys.
                 SecretKey readSecret = kd.deriveKey(
                         "TlsClientAppTrafficSecret", null);
 
