diff a/src/java.base/share/classes/javax/security/auth/callback/ConfirmationCallback.java b/src/java.base/share/classes/javax/security/auth/callback/ConfirmationCallback.java
--- a/src/java.base/share/classes/javax/security/auth/callback/ConfirmationCallback.java
+++ b/src/java.base/share/classes/javax/security/auth/callback/ConfirmationCallback.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -120,35 +120,36 @@
     /** WARNING message type. */
     public static final int WARNING                     = 1;
 
     /** ERROR message type. */
     public static final int ERROR                       = 2;
+
     /**
      * @serial
      * @since 1.4
      */
-    private String prompt;
+    private final String prompt;
     /**
      * @serial
      * @since 1.4
      */
-    private int messageType;
+    private final int messageType;
     /**
      * @serial
      * @since 1.4
      */
-    private int optionType = UNSPECIFIED_OPTION;
+    private final int optionType;
     /**
      * @serial
      * @since 1.4
      */
-    private int defaultOption;
+    private final int defaultOption;
     /**
      * @serial
      * @since 1.4
      */
-    private String[] options;
+    private final String[] options;
     /**
      * @serial
      * @since 1.4
      */
     private int selection;
@@ -204,12 +205,14 @@
             if (defaultOption != OK && defaultOption != CANCEL)
                 throw new IllegalArgumentException();
             break;
         }
 
+        this.prompt = null;
         this.messageType = messageType;
         this.optionType = optionType;
+        this.options = null;
         this.defaultOption = defaultOption;
     }
 
     /**
      * Construct a {@code ConfirmationCallback} with a
@@ -223,11 +226,12 @@
      * in a manner consistent with the way preset options are displayed.
      *
      * @param messageType the message type ({@code INFORMATION},
      *                  {@code WARNING} or {@code ERROR}).
      *
-     * @param options the list of confirmation options.
+     * @param options the list of confirmation options. The array is cloned
+     *                  to protect against subsequent modification.
      *
      * @param defaultOption the default option, represented as an index
      *                  into the {@code options} array.
      *
      * @exception IllegalArgumentException if messageType is not either
@@ -251,12 +255,14 @@
         for (int i = 0; i < options.length; i++) {
             if (options[i] == null || options[i].isEmpty())
                 throw new IllegalArgumentException();
         }
 
+        this.prompt = null;
         this.messageType = messageType;
-        this.options = options;
+        this.optionType = UNSPECIFIED_OPTION;
+        this.options = options.clone();
         this.defaultOption = defaultOption;
     }
 
     /**
      * Construct a {@code ConfirmationCallback} with a prompt,
@@ -317,10 +323,11 @@
         }
 
         this.prompt = prompt;
         this.messageType = messageType;
         this.optionType = optionType;
+        this.options = null;
         this.defaultOption = defaultOption;
     }
 
     /**
      * Construct a {@code ConfirmationCallback} with a prompt,
@@ -336,11 +343,12 @@
      * @param prompt the prompt used to describe the list of options.
      *
      * @param messageType the message type ({@code INFORMATION},
      *                  {@code WARNING} or {@code ERROR}).
      *
-     * @param options the list of confirmation options.
+     * @param options the list of confirmation options. The array is cloned
+     *                  to protect against subsequent modification.
      *
      * @param defaultOption the default option, represented as an index
      *                  into the {@code options} array.
      *
      * @exception IllegalArgumentException if {@code prompt} is null,
@@ -369,11 +377,12 @@
                 throw new IllegalArgumentException();
         }
 
         this.prompt = prompt;
         this.messageType = messageType;
-        this.options = options;
+        this.optionType = UNSPECIFIED_OPTION;
+        this.options = options.clone();
         this.defaultOption = defaultOption;
     }
 
     /**
      * Get the prompt.
@@ -416,16 +425,16 @@
     }
 
     /**
      * Get the confirmation options.
      *
-     * @return the list of confirmation options, or null if this
+     * @return a copy of the list of confirmation options, or null if this
      *          {@code ConfirmationCallback} was instantiated with
      *          an {@code optionType} instead of {@code options}.
      */
     public String[] getOptions() {
-        return options;
+        return options == null ? null : options.clone();
     }
 
     /**
      * Get the default option.
      *
