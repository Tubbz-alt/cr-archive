diff a/src/java.base/share/classes/javax/net/ssl/SSLEngine.java b/src/java.base/share/classes/javax/net/ssl/SSLEngine.java
--- a/src/java.base/share/classes/javax/net/ssl/SSLEngine.java
+++ b/src/java.base/share/classes/javax/net/ssl/SSLEngine.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -327,13 +327,16 @@
  * <P>
  * Each SSL/TLS/DTLS connection must have one client and one server, thus
  * each endpoint must decide which role to assume.  This choice determines
  * who begins the handshaking process as well as which type of messages
  * should be sent by each party.  The method {@link
- * #setUseClientMode(boolean)} configures the mode.  Once the initial
- * handshaking has started, an {@code SSLEngine} can not switch
- * between client and server modes, even when performing renegotiations.
+ * #setUseClientMode(boolean)} configures the mode.  Note that the
+ * default mode for a new {@code SSLEngine} is provider-specific.
+ * Applications should set the mode explicitly before invoking other
+ * methods of the {@code SSLEngine}.  Once the initial handshaking has
+ * started, an {@code SSLEngine} can not switch between client and server
+ * modes, even when performing renegotiations.
  * <P>
  * Applications might choose to process delegated tasks in different
  * threads.  When an {@code SSLEngine}
  * is created, the current {@link java.security.AccessControlContext}
  * is saved.  All future delegated tasks will be processed using this
@@ -1096,10 +1099,13 @@
      * life of this engine.
      * <P>
      * Servers normally authenticate themselves, and clients
      * are not required to do so.
      *
+     * @implNote
+     * The JDK SunJSSE provider implementation default for this mode is false.
+     *
      * @param   mode true if the engine should start its handshaking
      *          in "client" mode
      * @throws  IllegalArgumentException if a mode change is attempted
      *          after the initial handshake has begun.
      * @see     #getUseClientMode()
@@ -1109,10 +1115,14 @@
 
     /**
      * Returns true if the engine is set to use client mode when
      * handshaking.
      *
+     * @implNote
+     * The JDK SunJSSE provider implementation returns false unless
+     * {@link setUseClientMode(boolean)} is used to change the mode to true.
+     *
      * @return  true if the engine should do handshaking
      *          in "client" mode
      * @see     #setUseClientMode(boolean)
      */
     public abstract boolean getUseClientMode();
