diff a/src/java.base/windows/native/libjli/java_md.c b/src/java.base/windows/native/libjli/java_md.c
--- a/src/java.base/windows/native/libjli/java_md.c
+++ b/src/java.base/windows/native/libjli/java_md.c
@@ -249,10 +249,27 @@
                     return JNI_FALSE;
                 }
             }
         }
 #endif /* MSVCR_DLL_NAME */
+#ifdef VCRUNTIME_1_DLL_NAME
+        if (GetJREPath(crtpath, MAXPATHLEN)) {
+            if (JLI_StrLen(crtpath) + JLI_StrLen("\\bin\\") +
+                    JLI_StrLen(VCRUNTIME_1_DLL_NAME) >= MAXPATHLEN) {
+                JLI_ReportErrorMessage(JRE_ERROR11);
+                return JNI_FALSE;
+            }
+            (void)JLI_StrCat(crtpath, "\\bin\\" VCRUNTIME_1_DLL_NAME);   /* Add crt dll */
+            JLI_TraceLauncher("CRT path is %s\n", crtpath);
+            if (_access(crtpath, 0) == 0) {
+                if (LoadLibrary(crtpath) == 0) {
+                    JLI_ReportErrorMessage(DLL_ERROR4, crtpath);
+                    return JNI_FALSE;
+                }
+            }
+        }
+#endif /* VCRUNTIME_1_DLL_NAME */
 #ifdef MSVCP_DLL_NAME
         if (GetJREPath(crtpath, MAXPATHLEN)) {
             if (JLI_StrLen(crtpath) + JLI_StrLen("\\bin\\") +
                     JLI_StrLen(MSVCP_DLL_NAME) >= MAXPATHLEN) {
                 JLI_ReportErrorMessage(JRE_ERROR11);
@@ -502,11 +519,11 @@
 
     /*
      * Get required buffer size to convert to Unicode.
      * The return value includes the terminating null character.
      */
-    unicode_path_len = MultiByteToWideChar(CP_THREAD_ACP, MB_ERR_INVALID_CHARS,
+    unicode_path_len = MultiByteToWideChar(CP_ACP, MB_ERR_INVALID_CHARS,
                                            path, -1, NULL, 0);
     if (unicode_path_len == 0) {
         return EINVAL;
     }
 
@@ -516,11 +533,11 @@
     if (*wpath == NULL) {
         return ENOMEM;
     }
 
     wcsncpy(*wpath, prefix, prefix_len);
-    if (MultiByteToWideChar(CP_THREAD_ACP, MB_ERR_INVALID_CHARS,
+    if (MultiByteToWideChar(CP_ACP, MB_ERR_INVALID_CHARS,
                             path, -1, &((*wpath)[prefix_len]), (int)wpath_len) == 0) {
         JLI_MemFree(*wpath);
         *wpath = NULL;
         return EINVAL;
     }
