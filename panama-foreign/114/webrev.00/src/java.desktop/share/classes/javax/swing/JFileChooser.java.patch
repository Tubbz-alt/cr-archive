diff a/src/java.desktop/share/classes/javax/swing/JFileChooser.java b/src/java.desktop/share/classes/javax/swing/JFileChooser.java
--- a/src/java.desktop/share/classes/javax/swing/JFileChooser.java
+++ b/src/java.desktop/share/classes/javax/swing/JFileChooser.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -20,39 +20,52 @@
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package javax.swing;
-
-import javax.swing.event.*;
-import javax.swing.filechooser.*;
-import javax.swing.filechooser.FileFilter;
-import javax.swing.plaf.FileChooserUI;
 
-import javax.accessibility.*;
-
-import java.io.*;
+package javax.swing;
 
-import java.util.Vector;
 import java.awt.AWTEvent;
+import java.awt.BorderLayout;
 import java.awt.Component;
 import java.awt.Container;
-import java.awt.BorderLayout;
-import java.awt.Window;
 import java.awt.Dialog;
+import java.awt.EventQueue;
 import java.awt.Frame;
 import java.awt.GraphicsEnvironment;
 import java.awt.HeadlessException;
-import java.awt.EventQueue;
 import java.awt.Toolkit;
-import java.awt.event.*;
-import java.beans.JavaBean;
+import java.awt.Window;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.HierarchyEvent;
+import java.awt.event.HierarchyListener;
+import java.awt.event.InputEvent;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
 import java.beans.BeanProperty;
-import java.beans.PropertyChangeListener;
+import java.beans.JavaBean;
 import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
+import java.io.File;
+import java.io.IOException;
+import java.io.InvalidObjectException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
 import java.lang.ref.WeakReference;
+import java.util.Vector;
+
+import javax.accessibility.Accessible;
+import javax.accessibility.AccessibleContext;
+import javax.accessibility.AccessibleRole;
+import javax.swing.event.EventListenerList;
+import javax.swing.filechooser.FileFilter;
+import javax.swing.filechooser.FileSystemView;
+import javax.swing.filechooser.FileView;
+import javax.swing.plaf.FileChooserUI;
 
 /**
  * <code>JFileChooser</code> provides a simple mechanism for the user to
  * choose a file.
  * For information about using <code>JFileChooser</code>, see
@@ -1608,38 +1621,38 @@
      * @see FileView#isTraversable
      */
     public boolean isTraversable(File f) {
         Boolean traversable = null;
         if (f != null) {
-            if (getFileView() != null) {
-                traversable = getFileView().isTraversable(f);
+            FileView fileView = getFileView();
+            if (fileView != null) {
+                traversable = fileView.isTraversable(f);
             }
-
-            FileView uiFileView = getUI().getFileView(this);
-
-            if (traversable == null && uiFileView != null) {
-                traversable = uiFileView.isTraversable(f);
+            FileChooserUI ui = getUI();
+            if (traversable == null && ui != null) {
+                FileView uiFileView = ui.getFileView(this);
+                if (uiFileView != null) {
+                    traversable = uiFileView.isTraversable(f);
+                }
             }
-            if (traversable == null) {
-                traversable = getFileSystemView().isTraversable(f);
+            FileSystemView fileSystemView = getFileSystemView();
+            if (traversable == null && fileSystemView != null) {
+                traversable = fileSystemView.isTraversable(f);
             }
         }
-        return (traversable != null && traversable.booleanValue());
+        return traversable != null && traversable;
     }
 
     /**
      * Returns true if the file should be displayed.
      * @param f the <code>File</code>
      * @return true if the file should be displayed, otherwise false
      * @see FileFilter#accept
      */
     public boolean accept(File f) {
-        boolean shown = true;
-        if(f != null && fileFilter != null) {
-            shown = fileFilter.accept(f);
-        }
-        return shown;
+        FileFilter filter = fileFilter;
+        return f == null || filter == null || filter.accept(f);
     }
 
     /**
      * Sets the file system view that the <code>JFileChooser</code> uses for
      * accessing and creating file system resources, such as finding
