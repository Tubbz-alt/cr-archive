diff a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/FileAssociation.java b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/FileAssociation.java
--- a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/FileAssociation.java
+++ b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/FileAssociation.java
@@ -25,10 +25,11 @@
 
 package jdk.incubator.jpackage.internal;
 
 import java.io.File;
 import java.nio.file.Path;
+import java.text.MessageFormat;
 import java.util.*;
 import java.util.stream.Collectors;
 import static jdk.incubator.jpackage.internal.StandardBundlerParam.*;
 
 final class FileAssociation {
@@ -37,10 +38,33 @@
             Log.error(I18N.getString(
                     "message.creating-association-with-null-extension"));
         }
     }
 
+    static void verify(List<FileAssociation> associations) throws ConfigException {
+        // only one mime type per association, at least one file extention
+        int assocIdx = 0;
+        for (var assoc : associations) {
+            ++assocIdx;
+            if (assoc.mimeTypes.isEmpty()) {
+                String msgKey = "error.no-content-types-for-file-association";
+                throw new ConfigException(
+                        MessageFormat.format(I18N.getString(msgKey), assocIdx),
+                        MessageFormat.format(I18N.getString(msgKey + ".advice"), assocIdx));
+            }
+
+            if (assoc.mimeTypes.size() > 1) {
+                String msgKey = "error.too-many-content-types-for-file-association";
+                throw new ConfigException(
+                        MessageFormat.format(I18N.getString(msgKey), assocIdx),
+                        MessageFormat.format(I18N.getString(msgKey + ".advice"), assocIdx));
+            }
+
+            assoc.verify();
+        }
+    }
+
     static List<FileAssociation> fetchFrom(Map<String, ? super Object> params) {
         String launcherName = APP_NAME.fetchFrom(params);
 
         return FILE_ASSOCIATIONS.fetchFrom(params).stream().filter(
                 Objects::nonNull).map(fa -> {
