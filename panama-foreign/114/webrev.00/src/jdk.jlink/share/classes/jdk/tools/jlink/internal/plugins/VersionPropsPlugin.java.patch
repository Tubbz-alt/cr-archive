diff a/src/jdk.jlink/share/classes/jdk/tools/jlink/internal/plugins/VersionPropsPlugin.java b/src/jdk.jlink/share/classes/jdk/tools/jlink/internal/plugins/VersionPropsPlugin.java
--- a/src/jdk.jlink/share/classes/jdk/tools/jlink/internal/plugins/VersionPropsPlugin.java
+++ b/src/jdk.jlink/share/classes/jdk/tools/jlink/internal/plugins/VersionPropsPlugin.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,22 +23,29 @@
  * questions.
  */
 
 package jdk.tools.jlink.internal.plugins;
 
-import java.io.*;
-import java.nio.charset.*;
-import java.util.*;
-import java.util.function.*;
-import java.util.stream.*;
-import jdk.tools.jlink.plugin.*;
-import jdk.internal.org.objectweb.asm.*;
+import java.util.Map;
 
-import static java.lang.System.out;
+import jdk.internal.org.objectweb.asm.ClassReader;
+import jdk.internal.org.objectweb.asm.ClassVisitor;
+import jdk.internal.org.objectweb.asm.ClassWriter;
+import jdk.internal.org.objectweb.asm.MethodVisitor;
+import jdk.internal.org.objectweb.asm.Opcodes;
+import jdk.tools.jlink.plugin.Plugin;
+import jdk.tools.jlink.plugin.ResourcePool;
+import jdk.tools.jlink.plugin.ResourcePoolBuilder;
+import jdk.tools.jlink.plugin.ResourcePoolEntry;
 
 /**
  * Base plugin to update a static field in java.lang.VersionProps
+ *
+ * Fields to be updated must not be final such that values are not constant
+ * replaced at compile time and initialization code is generated.
+ * We assume that the initialization code only has ldcs, method calls and
+ * field instructions.
  */
 abstract class VersionPropsPlugin implements Plugin {
 
     private static final String VERSION_PROPS_CLASS
         = "/java.base/java/lang/VersionProps.class";
@@ -111,10 +118,11 @@
         var cr = new ClassReader(classFile);
         var cw = new ClassWriter(0);
 
         cr.accept(new ClassVisitor(Opcodes.ASM7, cw) {
 
+                @Override
                 public MethodVisitor visitMethod(int access,
                                                  String name,
                                                  String desc,
                                                  String sig,
                                                  String[] xs)
@@ -125,24 +133,60 @@
                                                                    name,
                                                                    desc,
                                                                    sig,
                                                                    xs))
                             {
+                                private Object pendingLDC = null;
+
+                                private void flushPendingLDC() {
+                                    if (pendingLDC != null) {
+                                        super.visitLdcInsn(pendingLDC);
+                                        pendingLDC = null;
+                                    }
+                                }
+
+                                @Override
+                                public void visitLdcInsn(Object value) {
+                                    flushPendingLDC();
+                                    pendingLDC = value;
+                                }
+
+                                @Override
+                                public void visitMethodInsn(int opcode,
+                                                            String owner,
+                                                            String name,
+                                                            String descriptor,
+                                                            boolean isInterface) {
+                                    flushPendingLDC();
+                                    super.visitMethodInsn(opcode, owner, name,
+                                                          descriptor, isInterface);
+                                }
 
+                                @Override
                                 public void visitFieldInsn(int opcode,
                                                            String owner,
                                                            String name,
                                                            String desc)
                                 {
                                     if (opcode == Opcodes.PUTSTATIC
                                         && name.equals(field))
                                     {
-                                        // Discard the original value
-                                        super.visitInsn(Opcodes.POP);
-                                        // Load the value that we want
+                                        // assert that there is a pending ldc
+                                        // for the old value
+                                        if (pendingLDC == null) {
+                                            throw new AssertionError("No load " +
+                                                "instruction found for field " + field +
+                                                " in static initializer of " +
+                                                VERSION_PROPS_CLASS);
+                                        }
+                                        // forget about it
+                                        pendingLDC = null;
+                                        // and add an ldc for the new value
                                         super.visitLdcInsn(value);
                                         redefined = true;
+                                    } else {
+                                        flushPendingLDC();
                                     }
                                     super.visitFieldInsn(opcode, owner,
                                                          name, desc);
                                 }
 
