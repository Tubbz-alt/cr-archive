diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/interpreter/BytecodeDisassembler.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/interpreter/BytecodeDisassembler.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/interpreter/BytecodeDisassembler.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/interpreter/BytecodeDisassembler.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -30,18 +30,18 @@
 import sun.jvm.hotspot.utilities.*;
 
 public class BytecodeDisassembler {
    private Method method;
 
-   private static Map bytecode2Class = new HashMap(); // Map<int, Class>
+   private static Map<Integer, Class> bytecode2Class = new HashMap<>();
 
    private static void addBytecodeClass(int bytecode, Class clazz) {
-      bytecode2Class.put(new Integer(bytecode), clazz);
+      bytecode2Class.put(bytecode, clazz);
    }
 
    private static Class getBytecodeClass(int bytecode) {
-      return (Class) bytecode2Class.get(new Integer(bytecode));
+      return (Class) bytecode2Class.get(bytecode);
    }
 
    static {
       addBytecodeClass(Bytecodes._anewarray, BytecodeANewArray.class);
       addBytecodeClass(Bytecodes._bipush, BytecodeBipush.class);
@@ -114,11 +114,11 @@
       int javacode = Bytecodes._illegal;
       while ( (javacode = stream.next()) != Bytecodes._illegal) {
          // look for special Bytecode class
          int bci = stream.bci();
          int hotspotcode = method.getBytecodeOrBPAt(bci);
-         Class clazz = getBytecodeClass(javacode);
+         Class<?> clazz = getBytecodeClass(javacode);
          if (clazz == null) {
             // check for fast_(i|a)_access_0
             clazz = getBytecodeClass(hotspotcode);
             if (clazz == null) {
                // use generic bytecode class
@@ -138,11 +138,11 @@
             }
          }
 
          Bytecode bytecodeObj = null;
          try {
-            bytecodeObj = (Bytecode)cstr.newInstance(new Object[] { method, new Integer(bci) });
+            bytecodeObj = (Bytecode)cstr.newInstance(new Object[] { method, bci});
          } catch (Exception exp) {
             if (Assert.ASSERTS_ENABLED) {
                Assert.that(false, "Bytecode instance of class "
                            + clazz.getName() + " can not be created!");
             }
