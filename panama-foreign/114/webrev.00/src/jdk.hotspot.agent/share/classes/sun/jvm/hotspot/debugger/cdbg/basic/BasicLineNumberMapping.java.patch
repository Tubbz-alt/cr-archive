diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/cdbg/basic/BasicLineNumberMapping.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/cdbg/basic/BasicLineNumberMapping.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/cdbg/basic/BasicLineNumberMapping.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/cdbg/basic/BasicLineNumberMapping.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -28,34 +28,32 @@
 import sun.jvm.hotspot.debugger.*;
 import sun.jvm.hotspot.debugger.cdbg.*;
 import sun.jvm.hotspot.utilities.AddressOps;
 
 public class BasicLineNumberMapping {
-  private List infoList;
+  private List<BasicLineNumberInfo> infoList;
 
   public BasicLineNumberMapping() {
   }
 
   /** Add line number information for the given PC. The end PC may be
       a very loose approximation (i.e., the end of the given DLL) if
       that information is not available in the debug information.
       recomputeEndPCs() will recompute them if needed. */
   public void addLineNumberInfo(BasicLineNumberInfo info) {
     if (infoList == null) {
-      infoList = new ArrayList();
+      infoList = new ArrayList<>();
     }
     infoList.add(info);
   }
 
   /** Sort the line number information by increasing starting program
       counter. This must be done before any queries are made. */
   public void sort() {
     if (infoList == null) return;
-    Collections.sort(infoList, new Comparator() {
-        public int compare(Object o1, Object o2) {
-          BasicLineNumberInfo l1 = (BasicLineNumberInfo) o1;
-          BasicLineNumberInfo l2 = (BasicLineNumberInfo) o2;
+    Collections.sort(infoList, new Comparator<>() {
+        public int compare(BasicLineNumberInfo l1, BasicLineNumberInfo l2) {
           Address a1 = l1.getStartPC();
           Address a2 = l2.getStartPC();
           if (AddressOps.lt(a1, a2)) { return -1; }
           if (AddressOps.gt(a1, a2)) { return 1; }
           return 0;
