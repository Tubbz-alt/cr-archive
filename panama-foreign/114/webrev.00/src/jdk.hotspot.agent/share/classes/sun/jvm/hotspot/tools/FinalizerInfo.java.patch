diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/FinalizerInfo.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/FinalizerInfo.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/FinalizerInfo.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/FinalizerInfo.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -104,33 +104,33 @@
             OopField referentField =
                 (OopField) k.findField("referent", "Ljava/lang/Object;");
             OopField nextField =
                 (OopField) k.findField("next", "Ljava/lang/ref/Reference;");
 
-            HashMap map = new HashMap();
+            HashMap<Klass, ObjectHistogramElement> map = new HashMap<>();
             for (;;) {
                 Oop referent = referentField.getValue(head);
 
                 Klass klass = referent.getKlass();
                 if (!map.containsKey(klass)) {
                     map.put(klass, new ObjectHistogramElement(klass));
                 }
-                ((ObjectHistogramElement)map.get(klass)).updateWith(referent);
+                map.get(klass).updateWith(referent);
 
                 Oop next = nextField.getValue(head);
                 if (next == null || next.equals(head)) break;
                 head = next;
             }
 
             /*
              * Sort results - decending order by total size
              */
-            ArrayList list = new ArrayList();
+            ArrayList<ObjectHistogramElement> list = new ArrayList<>();
             list.addAll(map.values());
-            Collections.sort(list, new Comparator() {
-              public int compare(Object o1, Object o2) {
-                  return ((ObjectHistogramElement)o1).compare((ObjectHistogramElement)o2);
+            Collections.sort(list, new Comparator<>() {
+              public int compare(ObjectHistogramElement o1, ObjectHistogramElement o2) {
+                  return o1.compare(o2);
               }
             });
 
             /*
              * Print summary of objects in queue
