diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/SystemDictionaryHelper.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/SystemDictionaryHelper.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/SystemDictionaryHelper.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/SystemDictionaryHelper.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -27,10 +27,12 @@
 import java.util.*;
 import sun.jvm.hotspot.classfile.*;
 import sun.jvm.hotspot.oops.*;
 import sun.jvm.hotspot.memory.*;
 import sun.jvm.hotspot.runtime.*;
+import sun.jvm.hotspot.utilities.Observable;
+import sun.jvm.hotspot.utilities.Observer;
 
 public class SystemDictionaryHelper {
    static {
       VM.registerVMInitializedObserver(new Observer() {
          public void update(Observable o, Object data) {
@@ -50,11 +52,11 @@
    public static synchronized InstanceKlass[] getAllInstanceKlasses() {
       if (klasses != null) {
          return klasses;
       }
 
-      final Vector tmp = new Vector();
+      final Vector<InstanceKlass> tmp = new Vector<>();
       ClassLoaderDataGraph cldg = VM.getVM().getClassLoaderDataGraph();
       cldg.classesDo(new ClassLoaderDataGraph.ClassVisitor() {
                         public void visit(Klass k) {
                            if (k instanceof InstanceKlass) {
                               InstanceKlass ik = (InstanceKlass) k;
@@ -64,14 +66,12 @@
                      });
 
       Object[] tmpArray = tmp.toArray();
       klasses = new InstanceKlass[tmpArray.length];
       System.arraycopy(tmpArray, 0, klasses, 0, tmpArray.length);
-      Arrays.sort(klasses, new Comparator() {
-                          public int compare(Object o1, Object o2) {
-                             InstanceKlass k1 = (InstanceKlass) o1;
-                             InstanceKlass k2 = (InstanceKlass) o2;
+      Arrays.sort(klasses, new Comparator<>() {
+                          public int compare(InstanceKlass k1, InstanceKlass k2) {
                              Symbol s1 = k1.getName();
                              Symbol s2 = k2.getName();
                              return s1.asString().compareTo(s2.asString());
                           }
                       });
@@ -81,11 +81,11 @@
    // returns array of instance klasses whose name contains given namePart
    public static InstanceKlass[] findInstanceKlasses(String namePart) {
       namePart = namePart.replace('.', '/');
       InstanceKlass[] tmpKlasses = getAllInstanceKlasses();
 
-      Vector tmp = new Vector();
+      Vector<InstanceKlass> tmp = new Vector<>();
       for (int i = 0; i < tmpKlasses.length; i++) {
          String name = tmpKlasses[i].getName().asString();
          if (name.indexOf(namePart) != -1) {
             tmp.add(tmpKlasses[i]);
          }
