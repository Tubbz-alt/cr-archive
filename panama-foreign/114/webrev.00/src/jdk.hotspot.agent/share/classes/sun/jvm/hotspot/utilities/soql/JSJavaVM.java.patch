diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaVM.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaVM.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaVM.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaVM.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -52,11 +52,11 @@
 
     public Object get(String name) {
         int fieldID = getFieldID(name);
         switch (fieldID) {
         case FIELD_ADDRESS_SIZE:
-            return new Long(getVMBit());
+            return getVMBit();
         case FIELD_BUILD_INFO:
             return vm.getVMInternalInfo();
         case FIELD_CPU:
             return vm.getCPU();
         case FIELD_FLAGS:
@@ -117,13 +117,13 @@
         buf.append(")");
         return buf.toString();
     }
 
     //-- Internals only below this point
-    private static Map fields = new HashMap();
+    private static Map<String, Integer> fields = new HashMap<>();
     private static void addField(String name, int fieldId) {
-        fields.put(name, new Integer(fieldId));
+        fields.put(name, fieldId);
     }
 
     private static int getFieldID(String name) {
         Integer res = (Integer) fields.get(name);
         return (res != null)? res.intValue() : FIELD_UNDEFINED;
@@ -150,11 +150,11 @@
     }
 
     private synchronized JSMap getFlags() {
         if (flagsCache == null) {
             VM.Flag[] flags = vm.getCommandLineFlags();
-            Map map = new HashMap();
+            Map<String, String> map = new HashMap<>();
             if (flags != null) {
                 for (int f = 0; f < flags.length; f++) {
                     VM.Flag flag = flags[f];
                     map.put(flag.getName(), flag.getValue());
                 }
@@ -172,11 +172,11 @@
     }
 
     private synchronized JSMap getSysProps() {
         if (sysPropsCache == null) {
             Properties props = vm.getSystemProperties();
-            Map map = new HashMap();
+            Map<String, String> map = new HashMap<>();
             if (props != null) {
                 Enumeration e = props.propertyNames();
                 while (e.hasMoreElements()) {
                     String key = (String) e.nextElement();
                     map.put(key, props.getProperty(key));
@@ -187,11 +187,11 @@
         return sysPropsCache;
     }
 
     private synchronized JSList getThreads() {
         if (threadsCache == null) {
-            List threadsList = new ArrayList(0);
+            List<JavaThread> threadsList = new ArrayList<>(0);
             threadsCache = factory.newJSList(threadsList);
             Threads threads = VM.getVM().getThreads();
             for (int i = 0; i < threads.getNumberOfThreads(); i++) {
                 JavaThread thread = threads.getJavaThreadAt(i);
                 threadsList.add(thread);
