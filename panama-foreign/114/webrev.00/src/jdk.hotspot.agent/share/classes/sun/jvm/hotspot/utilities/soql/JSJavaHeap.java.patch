diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaHeap.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaHeap.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaHeap.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaHeap.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -48,13 +48,13 @@
 
     public Object get(String name) {
         int fieldID = getFieldID(name);
         switch (fieldID) {
         case FIELD_CAPACITY:
-            return new Long(getCapacity());
+            return getCapacity();
         case FIELD_USED:
-            return new Long(getUsed());
+            return getUsed();
         case FIELD_FOR_EACH_OBJECT:
             return new MethodCallable(this, forEachObjectMethod);
         case FIELD_FOR_EACH_CLASS:
             return new MethodCallable(this, forEachClassMethod);
         case FIELD_UNDEFINED:
@@ -221,13 +221,13 @@
         buf.append(")");
         return buf.toString();
     }
 
     //-- Internals only below this point
-    private static Map fields = new HashMap();
+    private static Map<String, Integer> fields = new HashMap<>();
     private static void addField(String name, int fieldId) {
-        fields.put(name, new Integer(fieldId));
+        fields.put(name, fieldId);
     }
 
     private static int getFieldID(String name) {
         Integer res = (Integer) fields.get(name);
         return (res != null)? res.intValue() : FIELD_UNDEFINED;
@@ -237,11 +237,11 @@
         addField("capacity", FIELD_CAPACITY);
         addField("used", FIELD_USED);
         addField("forEachObject", FIELD_FOR_EACH_OBJECT);
         addField("forEachClass", FIELD_FOR_EACH_CLASS);
       try {
-          Class myClass = JSJavaHeap.class;
+          Class<?> myClass = JSJavaHeap.class;
           forEachObjectMethod = myClass.getMethod("forEachObject",
                                 new Class[] { Object[].class });
           forEachClassMethod = myClass.getMethod("forEachClass",
                                 new Class[] {Object[].class });
       } catch (RuntimeException re) {
