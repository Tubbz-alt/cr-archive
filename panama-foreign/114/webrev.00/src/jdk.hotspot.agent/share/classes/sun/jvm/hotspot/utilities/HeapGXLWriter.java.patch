diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/HeapGXLWriter.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/HeapGXLWriter.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/HeapGXLWriter.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/HeapGXLWriter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -99,11 +99,11 @@
         out.print(getID(null));
         out.println("'/>");
     }
 
     protected void writeObjectHeader(Oop oop) throws IOException  {
-        refFields = new ArrayList();
+        refFields = new ArrayList<>();
         isArray = oop.isArray();
 
         // generate an edge for instanceof relation
         // between object node and it's class node.
         writeEdge(oop, oop.getKlass().getJavaMirror(), "instanceof");
@@ -401,10 +401,10 @@
 
     // XML encoding that we'll use
     private static final String ENCODING = "UTF-8";
 
     // reference fields of currently visited object
-    private List/*<OopField>*/ refFields;
+    private List<OopField> refFields;
     // are we writing an array now?
     private boolean isArray;
     private PrintWriter out;
 }
