diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -45,10 +45,12 @@
 import sun.jvm.hotspot.runtime.*;
 import sun.jvm.hotspot.ui.*;
 import sun.jvm.hotspot.ui.tree.*;
 import sun.jvm.hotspot.ui.classbrowser.*;
 import sun.jvm.hotspot.utilities.*;
+import sun.jvm.hotspot.utilities.Observable;
+import sun.jvm.hotspot.utilities.Observer;
 
 /** The top-level HotSpot Debugger. FIXME: make this an embeddable
     component! (Among other things, figure out what to do with the
     menu bar...) */
 
@@ -64,14 +66,12 @@
   private JVMDebugger jvmDebugger;
   private JDesktopPane desktop;
   private boolean      attached;
   private boolean      argError;
   private JFrame frame;
-  /** List <JMenuItem> */
-  private java.util.List attachMenuItems;
-  /** List <JMenuItem> */
-  private java.util.List detachMenuItems;
+  private java.util.List<JMenuItem> attachMenuItems;
+  private java.util.List<JMenuItem> detachMenuItems;
   private JMenu toolsMenu;
   private JMenuItem showDbgConsoleMenuItem;
   private JMenuItem computeRevPtrsMenuItem;
   private JInternalFrame attachWaitDialog;
   private JInternalFrame threadsFrame;
@@ -153,12 +153,12 @@
     frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
     frame.addWindowListener(new CloseUI());
 
     agent = new HotSpotAgent();
     workerThread = new WorkerThread();
-    attachMenuItems = new java.util.ArrayList();
-    detachMenuItems = new java.util.ArrayList();
+    attachMenuItems = new java.util.ArrayList<>();
+    detachMenuItems = new java.util.ArrayList<>();
 
 
     JMenuBar menuBar = new JMenuBar();
 
     //
@@ -873,11 +873,11 @@
           // by a signal. We do this by making two passes over the stack,
           // one which finds signal handler frames and puts the parent
           // frames in a table and one which finds Java frames and if they
           // are in the table indicates that they were interrupted by a signal.
 
-          Map interruptedFrameMap = new HashMap();
+          Map<sun.jvm.hotspot.runtime.Frame, SignalInfo> interruptedFrameMap = new HashMap<>();
           {
             sun.jvm.hotspot.runtime.Frame tmpFrame = thread.getCurrentFrameGuess();
             RegisterMap tmpMap = thread.newRegisterMap(false);
             while ((tmpFrame != null) && (!tmpFrame.isFirstFrame())) {
               if (tmpFrame.isSignalHandlerFrameDbg()) {
@@ -1843,11 +1843,11 @@
       curLineLength += tok.length();
     }
     return buf.toString();
   }
 
-  private void setMenuItemsEnabled(java.util.List items, boolean enabled) {
-    for (Iterator iter = items.iterator(); iter.hasNext(); ) {
-      ((JMenuItem) iter.next()).setEnabled(enabled);
+  private void setMenuItemsEnabled(java.util.List<JMenuItem> items, boolean enabled) {
+    for (Iterator<JMenuItem> iter = items.iterator(); iter.hasNext(); ) {
+      iter.next().setEnabled(enabled);
     }
   }
 }
