diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/ProcessListPanel.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/ProcessListPanel.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/ProcessListPanel.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/ProcessListPanel.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -34,11 +34,11 @@
 import sun.jvm.hotspot.debugger.*;
 
 public class ProcessListPanel extends JPanel {
   private Debugger           dbg;
   private AbstractTableModel dataModel;
-  private java.util.List     els;
+  private java.util.List<ProcessInfo> els;
   private boolean            sortByName   = true;
   private boolean            sortReversed = false;
   private javax.swing.Timer  timer;
   private JTable             table;
 
@@ -71,11 +71,11 @@
 
           switch (col) {
           case 0:
             return info.getName();
           case 1:
-            return new Integer(info.getPid());
+            return info.getPid();
           default:
             throw new RuntimeException("Index (" + col + ", " + row + ") out of bounds");
           }
         }
       };
@@ -147,11 +147,11 @@
   /** Call this to update the panel's notion of the process list */
   public synchronized void update() {
     if (!dbg.hasProcessList()) {
       throw new RuntimeException("ProcessListPanel requires that debugger supports getProcessList()");
     }
-    java.util.List newEls = dbg.getProcessList();
+    java.util.List<ProcessInfo> newEls = dbg.getProcessList();
     sort(newEls);
     if (table != null) {
       // Keep the current selection if possible
       int i = table.getSelectedRow();
       int pid = getPid(els, i);
@@ -174,28 +174,28 @@
   public synchronized ProcessInfo getSelectedProcess() {
     int i = table.getSelectedRow();
     if (i < 0) {
       return null;
     }
-    return (ProcessInfo) els.get(i);
+    return els.get(i);
   }
 
-  private synchronized void sort(java.util.List els) {
-    Comparator c;
+  private synchronized void sort(java.util.List<ProcessInfo> els) {
+    Comparator<ProcessInfo> c;
     if (sortByName) {
-      c = new Comparator() {
-          public int compare(Object o1, Object o2) {
+      c = new Comparator<>() {
+          public int compare(ProcessInfo o1, ProcessInfo o2) {
             int scale = (sortReversed ? -1 : 1);
-            return scale * ((ProcessInfo) o1).getName().compareToIgnoreCase(((ProcessInfo) o2).getName());
+            return scale * o1.getName().compareToIgnoreCase(o2.getName());
           }
         };
     } else {
-      c = new Comparator() {
-          public int compare(Object o1, Object o2) {
+      c = new Comparator<>() {
+          public int compare(ProcessInfo o1, ProcessInfo o2) {
             int scale = (sortReversed ? -1 : 1);
-            int pid1 = ((ProcessInfo) o1).getPid();
-            int pid2 = ((ProcessInfo) o2).getPid();
+            int pid1 = o1.getPid();
+            int pid2 = o2.getPid();
             int ret;
             if      (pid1 <  pid2) ret = -1;
             else if (pid1 == pid2) ret = 0;
             else ret = 1;
             return ret * scale;
@@ -214,17 +214,17 @@
         });
     }
     return timer;
   }
 
-  private synchronized int getPid(java.util.List els, int index) {
-    return ((ProcessInfo) els.get(index)).getPid();
+  private synchronized int getPid(java.util.List<ProcessInfo> els, int index) {
+    return els.get(index).getPid();
   }
 
-  private synchronized int findPid(java.util.List els, int pid) {
+  private synchronized int findPid(java.util.List<ProcessInfo> els, int pid) {
     for (int i = 0; i < els.size(); i++) {
-      ProcessInfo info = (ProcessInfo) els.get(i);
+      ProcessInfo info = els.get(i);
       if (info.getPid() == pid) {
         return i;
       }
     }
     return -1;
