diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/jcore/ClassWriter.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/jcore/ClassWriter.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/jcore/ClassWriter.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/jcore/ClassWriter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -120,11 +120,11 @@
 
         for (ci = 1; ci < len; ci++) {
             int cpConstType = tags.at(ci);
             if(cpConstType == JVM_CONSTANT_Utf8) {
                 Symbol sym = cpool.getSymbolAt(ci);
-                utf8ToIndex.put(sym.asString(), new Short((short) ci));
+                utf8ToIndex.put(sym.asString(), (short) ci);
             }
             else if(cpConstType == JVM_CONSTANT_Long ||
                       cpConstType == JVM_CONSTANT_Double) {
                 ci++;
             }
@@ -231,11 +231,11 @@
                 case JVM_CONSTANT_UnresolvedClass:
                 case JVM_CONSTANT_UnresolvedClassInError: {
                      dos.writeByte(JVM_CONSTANT_Class);
                      String klassName = cpool.getKlassNameAt(ci).asString();
                      Short s = (Short) utf8ToIndex.get(klassName);
-                     classToIndex.put(klassName, new Short((short)ci));
+                     classToIndex.put(klassName, (short) ci);
                      dos.writeShort(s.shortValue());
                      if (DEBUG) debugMessage("CP[" + ci  + "] = class " + s);
                      break;
                 }
 
