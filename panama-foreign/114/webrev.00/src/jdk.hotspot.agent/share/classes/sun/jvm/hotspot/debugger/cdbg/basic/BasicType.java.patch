diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/cdbg/basic/BasicType.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/cdbg/basic/BasicType.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/cdbg/basic/BasicType.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/cdbg/basic/BasicType.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -31,11 +31,11 @@
 public abstract class BasicType implements Type, CVAttributes {
   private String name;
   private int    size;
   private int    cvAttributes;
   // Types keep a list of const/volatile qualified variants of themselves
-  private List   cvVariants;
+  private List<Type> cvVariants;
 
   protected BasicType(String name, int size) {
     this(name, size, 0);
   }
 
@@ -81,12 +81,12 @@
   public boolean      isConst()    { return ((cvAttributes & CONST) != 0); }
   public boolean      isVolatile() { return ((cvAttributes & VOLATILE) != 0); }
 
   Type resolveTypes(BasicCDebugInfoDataBase db, ResolveListener listener) {
     if (cvVariants != null) {
-      for (ListIterator iter = cvVariants.listIterator(); iter.hasNext(); ) {
-        iter.set(db.resolveType(this, (BasicType) iter.next(), listener, "resolving const/var variants"));
+      for (ListIterator<Type> iter = cvVariants.listIterator(); iter.hasNext(); ) {
+        iter.set(db.resolveType(this, iter.next(), listener, "resolving const/var variants"));
       }
     }
     return this;
   }
   public boolean       isLazy() { return false; }
@@ -108,20 +108,20 @@
 
   private   int           getCVAttributes() { return cvAttributes; }
   protected abstract Type createCVVariant(int cvAttributes);
   protected Type          findCVVariant(int cvAttributes) {
     if (cvVariants != null) {
-      for (Iterator iter = cvVariants.iterator(); iter.hasNext(); ) {
+      for (Iterator<Type> iter = cvVariants.iterator(); iter.hasNext(); ) {
         BasicType t = (BasicType) iter.next();
         if (t.getCVAttributes() == cvAttributes) return t;
       }
     }
     return null;
   }
   protected void addCVVariant(Type t) {
     if (cvVariants == null) {
-      cvVariants = new ArrayList();
+      cvVariants = new ArrayList<>();
     }
     cvVariants.add(t);
   }
 
   public abstract void visit(TypeVisitor v);
