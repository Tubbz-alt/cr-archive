diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/cdbg/basic/BasicFunctionType.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/cdbg/basic/BasicFunctionType.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/cdbg/basic/BasicFunctionType.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/cdbg/basic/BasicFunctionType.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -28,11 +28,11 @@
 import sun.jvm.hotspot.debugger.*;
 import sun.jvm.hotspot.debugger.cdbg.*;
 
 public class BasicFunctionType extends BasicType implements FunctionType {
   private Type returnType;
-  private List argumentTypes;
+  private List<Type> argumentTypes;
 
   public BasicFunctionType(String name, int size, Type returnType) {
     this(name, size, returnType, 0);
   }
 
@@ -49,21 +49,21 @@
   public Type getArgumentType(int i) {
     return (Type) argumentTypes.get(i);
   }
   public void addArgumentType(Type t) {
     if (argumentTypes == null) {
-      argumentTypes = new ArrayList();
+      argumentTypes = new ArrayList<>();
     }
     argumentTypes.add(t);
   }
 
   Type resolveTypes(BasicCDebugInfoDataBase db, ResolveListener listener) {
     super.resolveTypes(db, listener);
     returnType = db.resolveType(this, returnType, listener, "resolving function return type");
     if (argumentTypes != null) {
-      for (ListIterator iter = argumentTypes.listIterator(); iter.hasNext(); ) {
-        iter.set(db.resolveType(this, (Type) iter.next(), listener, "resolving function argument types"));
+      for (ListIterator<Type> iter = argumentTypes.listIterator(); iter.hasNext(); ) {
+        iter.set(db.resolveType(this, iter.next(), listener, "resolving function argument types"));
       }
     }
     return this;
   }
 
