diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/RBTree.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/RBTree.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/RBTree.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/RBTree.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -55,16 +55,16 @@
 import java.util.Comparator;
 import java.util.Random;
 
 public class RBTree {
   private RBNode root;
-  private Comparator comparator;
+  private Comparator<Object> comparator;
   protected static final boolean DEBUGGING = true;
   protected static final boolean VERBOSE   = true;
   protected static final boolean REALLY_VERBOSE = false;
 
-  public RBTree(Comparator comparator) {
+  public RBTree(Comparator<Object> comparator) {
     this.comparator = comparator;
   }
 
   public RBNode getRoot() {
     return root;
@@ -532,11 +532,11 @@
 
   public static void main(String[] args) {
     int treeSize = 10000;
     int maxVal = treeSize;
     System.err.println("Building tree...");
-    RBTree tree = new RBTree(new Comparator() {
+    RBTree tree = new RBTree(new Comparator<>() {
         public int compare(Object o1, Object o2) {
           Integer i1 = (Integer) o1;
           Integer i2 = (Integer) o2;
           if (i1.intValue() < i2.intValue()) {
             return -1;
@@ -546,11 +546,11 @@
           return 1;
         }
       });
     Random rand = new Random(System.currentTimeMillis());
     for (int i = 0; i < treeSize; i++) {
-      Integer val = new Integer(rand.nextInt(maxVal) + 1);
+      Integer val = rand.nextInt(maxVal) + 1;
       try {
         tree.insertNode(new RBNode(val));
         if ((i > 0) && (i % 100 == 0)) {
           System.err.print(i + "...");
           System.err.flush();
@@ -603,11 +603,11 @@
         System.err.println("(Removing value " + tree.getNodeValue(xParent) + ")");
       }
       tree.deleteNode(xParent);
 
       // Now create and insert a new value
-      Integer newVal = new Integer(rand.nextInt(maxVal) + 1);
+      Integer newVal = rand.nextInt(maxVal) + 1;
       if (DEBUGGING && VERBOSE) {
         System.err.println("(Inserting value " + newVal + ")");
       }
       tree.insertNode(new RBNode(newVal));
     }
