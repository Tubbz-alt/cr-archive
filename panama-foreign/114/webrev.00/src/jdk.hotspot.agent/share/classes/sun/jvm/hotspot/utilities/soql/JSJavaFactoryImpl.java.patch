diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaFactoryImpl.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaFactoryImpl.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaFactoryImpl.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaFactoryImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -43,11 +43,11 @@
          } else if (oop instanceof Instance) {
             res = newJavaInstance((Instance) oop);
          }
       }
       if (res != null) {
-         om.put(oop, new SoftReference(res));
+         om.put(oop, new SoftReference<>(res));
       }
       return res;
    }
 
    public JSJavaKlass newJSJavaKlass(Klass klass) {
@@ -58,19 +58,19 @@
           res = new JSJavaObjArrayKlass((ObjArrayKlass) klass, this);
       } else if (klass instanceof TypeArrayKlass) {
           res = new JSJavaTypeArrayKlass((TypeArrayKlass) klass, this);
       }
       if (res != null) {
-         om.put(klass, new SoftReference(res));
+         om.put(klass, new SoftReference<>(res));
       }
       return res;
    }
 
    public JSJavaMethod newJSJavaMethod(Method method) {
       JSJavaMethod res = new JSJavaMethod(method, this);
       if (res != null) {
-         om.put(method, new SoftReference(res));
+         om.put(method, new SoftReference<>(res));
       }
       return res;
    }
 
    public JSJavaField newJSJavaField(Field field) {
@@ -188,11 +188,10 @@
          res = new JSJavaInstance(instance, this);
       }
       return res;
    }
 
-   // Map<Oop, SoftReference<JSJavaObject>>
-   private Map om = new HashMap();
+   private Map<Object, SoftReference<?>> om = new HashMap<>();
    private String javaLangString;
    private String javaLangThread;
    private String javaLangClass;
 }
