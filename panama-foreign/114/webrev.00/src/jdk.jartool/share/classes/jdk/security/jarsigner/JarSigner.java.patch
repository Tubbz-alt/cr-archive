diff a/src/jdk.jartool/share/classes/jdk/security/jarsigner/JarSigner.java b/src/jdk.jartool/share/classes/jdk/security/jarsigner/JarSigner.java
--- a/src/jdk.jartool/share/classes/jdk/security/jarsigner/JarSigner.java
+++ b/src/jdk.jartool/share/classes/jdk/security/jarsigner/JarSigner.java
@@ -32,10 +32,11 @@
 import sun.security.util.ManifestDigester;
 import sun.security.util.SignatureFileVerifier;
 import sun.security.x509.AlgorithmId;
 
 import java.io.*;
+import java.lang.reflect.InvocationTargetException;
 import java.net.SocketTimeoutException;
 import java.net.URI;
 import java.net.URL;
 import java.net.URLClassLoader;
 import java.security.*;
@@ -839,18 +840,18 @@
         byte[] content = baos.toByteArray();
 
         signer.update(content);
         byte[] signature = signer.sign();
 
-        @SuppressWarnings("deprecation")
+        @SuppressWarnings("removal")
         ContentSigner signingMechanism = null;
         if (altSigner != null) {
             signingMechanism = loadSigningMechanism(altSigner,
                     altSignerPath);
         }
 
-        @SuppressWarnings("deprecation")
+        @SuppressWarnings("removal")
         ContentSignerParameters params =
                 new JarSignerParameters(null, tsaUrl, tSAPolicyID,
                         tSADigestAlg, signature,
                         signer.getAlgorithm(), certChain, content, zipFile);
         block = sf.generateBlock(params, externalSF, signingMechanism);
@@ -1056,14 +1057,19 @@
 
     /*
      * Try to load the specified signing mechanism.
      * The URL class loader is used.
      */
-    @SuppressWarnings("deprecation")
+    @SuppressWarnings("removal")
     private ContentSigner loadSigningMechanism(String signerClassName,
                                                String signerClassPath) {
 
+        // If there is no signerClassPath provided, search from here
+        if (signerClassPath == null) {
+            signerClassPath = ".";
+        }
+
         // construct class loader
         String cpString;   // make sure env.class.path defaults to dot
 
         // do prepends to get correct ordering
         cpString = PathList.appendPath(
@@ -1075,14 +1081,15 @@
         ClassLoader appClassLoader = new URLClassLoader(urls);
 
         try {
             // attempt to find signer
             Class<?> signerClass = appClassLoader.loadClass(signerClassName);
-            Object signer = signerClass.newInstance();
+            Object signer = signerClass.getDeclaredConstructor().newInstance();
             return (ContentSigner) signer;
         } catch (ClassNotFoundException|InstantiationException|
-                IllegalAccessException|ClassCastException e) {
+                IllegalAccessException|ClassCastException|
+                NoSuchMethodException| InvocationTargetException e) {
             throw new IllegalArgumentException(
                     "Invalid altSigner or altSignerPath", e);
         }
     }
 
@@ -1172,11 +1179,11 @@
             String keyAlgorithm = privateKey.getAlgorithm();
             return getBaseSignatureFilesName(baseName) + keyAlgorithm;
         }
 
         // Generates the PKCS#7 content of block file
-        @SuppressWarnings("deprecation")
+        @SuppressWarnings("removal")
         public byte[] generateBlock(ContentSignerParameters params,
                                     boolean externalSF,
                                     ContentSigner signingMechanism)
                 throws NoSuchAlgorithmException,
                        IOException, CertificateException {
@@ -1190,11 +1197,11 @@
                     params.getTimestampingAuthority() != null
                         || params.getTimestampingAuthorityCertificate() != null);
         }
     }
 
-    @SuppressWarnings("deprecation")
+    @SuppressWarnings("removal")
     class JarSignerParameters implements ContentSignerParameters {
 
         private String[] args;
         private URI tsa;
         private byte[] signature;
