diff a/src/hotspot/share/runtime/arguments.cpp b/src/hotspot/share/runtime/arguments.cpp
--- a/src/hotspot/share/runtime/arguments.cpp
+++ b/src/hotspot/share/runtime/arguments.cpp
@@ -584,11 +584,13 @@
   { "TraceClassLoadingPreorder", LogLevel::Debug, true,  LOG_TAGS(class, preorder) },
   { "TraceClassPaths",           LogLevel::Info,  true,  LOG_TAGS(class, path) },
   { "TraceClassResolution",      LogLevel::Debug, true,  LOG_TAGS(class, resolve) },
   { "TraceClassUnloading",       LogLevel::Info,  true,  LOG_TAGS(class, unload) },
   { "TraceExceptions",           LogLevel::Info,  true,  LOG_TAGS(exceptions) },
+  { "TraceInvokeDynamic",        LogLevel::Debug, true,  LOG_TAGS(methodhandles, indy) },
   { "TraceLoaderConstraints",    LogLevel::Info,  true,  LOG_TAGS(class, loader, constraints) },
+  { "TraceMethodHandles",        LogLevel::Info,  true,  LOG_TAGS(methodhandles) },
   { "TraceMonitorInflation",     LogLevel::Trace, true,  LOG_TAGS(monitorinflation) },
   { "TraceSafepointCleanupTime", LogLevel::Info,  true,  LOG_TAGS(safepoint, cleanup) },
   { "TraceJVMTIObjectTagging",   LogLevel::Debug, true,  LOG_TAGS(jvmti, objecttagging) },
   { "TraceRedefineClasses",      LogLevel::Info,  false, LOG_TAGS(redefine, class) },
   { "PrintJNIResolving",         LogLevel::Debug, true,  LOG_TAGS(jni, resolve) },
@@ -716,17 +718,17 @@
 // version is first updated, without needing to update all the impacted flags at
 // the same time. In practice we can't issue the warning immediately when the version
 // is updated as it occurs for every test and some tests are not prepared to handle
 // unexpected output - see 8196739. Instead we only check if the table is up-to-date
 // if the check_globals flag is true, and in addition allow a grace period and only
-// check for stale flags when we hit build 20 (which is far enough into the 6 month
+// check for stale flags when we hit build 25 (which is far enough into the 6 month
 // release cycle that all flag updates should have been processed, whilst still
 // leaving time to make the change before RDP2).
 // We use a gtest to call this, passing true, so that we can detect stale flags before
 // the end of the release cycle.
 
-static const int SPECIAL_FLAG_VALIDATION_BUILD = 20;
+static const int SPECIAL_FLAG_VALIDATION_BUILD = 25;
 
 bool Arguments::verify_special_jvm_flags(bool check_globals) {
   bool success = true;
   for (size_t i = 0; special_jvm_flags[i].name != NULL; i++) {
     const SpecialFlag& flag = special_jvm_flags[i];
