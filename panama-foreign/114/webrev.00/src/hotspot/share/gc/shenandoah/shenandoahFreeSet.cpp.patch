diff a/src/hotspot/share/gc/shenandoah/shenandoahFreeSet.cpp b/src/hotspot/share/gc/shenandoah/shenandoahFreeSet.cpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahFreeSet.cpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahFreeSet.cpp
@@ -147,11 +147,11 @@
 }
 
 HeapWord* ShenandoahFreeSet::try_allocate_in(ShenandoahHeapRegion* r, ShenandoahAllocRequest& req, bool& in_new_region) {
   assert (!has_no_alloc_capacity(r), "Performance: should avoid full regions on this path: " SIZE_FORMAT, r->index());
 
-  if (_heap->is_concurrent_root_in_progress() &&
+  if (_heap->is_concurrent_weak_root_in_progress() &&
       r->is_trash()) {
     return NULL;
   }
 
   try_recycle_trashed(r);
@@ -335,11 +335,11 @@
   req.set_actual_size(words_size);
   return _heap->get_region(beg)->bottom();
 }
 
 bool ShenandoahFreeSet::can_allocate_from(ShenandoahHeapRegion *r) {
-  return r->is_empty() || (r->is_trash() && !_heap->is_concurrent_root_in_progress());
+  return r->is_empty() || (r->is_trash() && !_heap->is_concurrent_weak_root_in_progress());
 }
 
 size_t ShenandoahFreeSet::alloc_capacity(ShenandoahHeapRegion *r) {
   if (r->is_trash()) {
     // This would be recycled on allocation path
