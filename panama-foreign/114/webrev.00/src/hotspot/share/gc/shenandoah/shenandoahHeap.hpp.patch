diff a/src/hotspot/share/gc/shenandoah/shenandoahHeap.hpp b/src/hotspot/share/gc/shenandoah/shenandoahHeap.hpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahHeap.hpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahHeap.hpp
@@ -274,11 +274,12 @@
   ShenandoahSharedBitmap _gc_state;
   ShenandoahSharedFlag   _degenerated_gc_in_progress;
   ShenandoahSharedFlag   _full_gc_in_progress;
   ShenandoahSharedFlag   _full_gc_move_in_progress;
   ShenandoahSharedFlag   _progress_last_gc;
-  ShenandoahSharedFlag   _concurrent_root_in_progress;
+  ShenandoahSharedFlag   _concurrent_strong_root_in_progress;
+  ShenandoahSharedFlag   _concurrent_weak_root_in_progress;
 
   void set_gc_state_all_threads(char state);
   void set_gc_state_mask(uint mask, bool value);
 
 public:
@@ -290,11 +291,12 @@
   void set_update_refs_in_progress(bool in_progress);
   void set_degenerated_gc_in_progress(bool in_progress);
   void set_full_gc_in_progress(bool in_progress);
   void set_full_gc_move_in_progress(bool in_progress);
   void set_has_forwarded_objects(bool cond);
-  void set_concurrent_root_in_progress(bool cond);
+  void set_concurrent_strong_root_in_progress(bool cond);
+  void set_concurrent_weak_root_in_progress(bool cond);
 
   inline bool is_stable() const;
   inline bool is_idle() const;
   inline bool is_concurrent_mark_in_progress() const;
   inline bool is_update_refs_in_progress() const;
@@ -303,11 +305,12 @@
   inline bool is_full_gc_in_progress() const;
   inline bool is_full_gc_move_in_progress() const;
   inline bool has_forwarded_objects() const;
   inline bool is_gc_in_progress_mask(uint mask) const;
   inline bool is_stw_gc_in_progress() const;
-  inline bool is_concurrent_root_in_progress() const;
+  inline bool is_concurrent_strong_root_in_progress() const;
+  inline bool is_concurrent_weak_root_in_progress() const;
 
 // ---------- GC cancellation and degeneration machinery
 //
 // Cancelled GC flag is used to notify concurrent phases that they should terminate.
 //
@@ -392,11 +395,12 @@
   // Entry methods to normally concurrent GC operations. These set up logging, monitoring
   // for concurrent operation.
   void entry_reset();
   void entry_mark();
   void entry_preclean();
-  void entry_roots();
+  void entry_weak_roots();
+  void entry_strong_roots();
   void entry_cleanup();
   void entry_evac();
   void entry_updaterefs();
   void entry_uncommit(double shrink_before);
 
@@ -412,11 +416,12 @@
   void op_degenerated_futile();
 
   void op_reset();
   void op_mark();
   void op_preclean();
-  void op_roots();
+  void op_weak_roots();
+  void op_strong_roots();
   void op_cleanup();
   void op_conc_evac();
   void op_stw_evac();
   void op_updaterefs();
   void op_uncommit(double shrink_before);
