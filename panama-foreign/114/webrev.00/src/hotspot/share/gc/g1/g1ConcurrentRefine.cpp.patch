diff a/src/hotspot/share/gc/g1/g1ConcurrentRefine.cpp b/src/hotspot/share/gc/g1/g1ConcurrentRefine.cpp
--- a/src/hotspot/share/gc/g1/g1ConcurrentRefine.cpp
+++ b/src/hotspot/share/gc/g1/g1ConcurrentRefine.cpp
@@ -406,24 +406,22 @@
     dcqs.set_max_cards_padding(0);
   }
   dcqs.notify_if_necessary();
 }
 
-G1ConcurrentRefine::RefinementStats G1ConcurrentRefine::total_refinement_stats() const {
-  struct CollectData : public ThreadClosure {
-    Tickspan _total_time;
-    size_t _total_cards;
-    CollectData() : _total_time(), _total_cards(0) {}
+G1ConcurrentRefineStats G1ConcurrentRefine::get_and_reset_refinement_stats() {
+  struct CollectStats : public ThreadClosure {
+    G1ConcurrentRefineStats _total_stats;
     virtual void do_thread(Thread* t) {
       G1ConcurrentRefineThread* crt = static_cast<G1ConcurrentRefineThread*>(t);
-      _total_time += crt->total_refinement_time();
-      _total_cards += crt->total_refined_cards();
+      G1ConcurrentRefineStats& stats = *crt->refinement_stats();
+      _total_stats += stats;
+      stats.reset();
     }
   } collector;
-  // Cast away const so we can call non-modifying closure on threads.
-  const_cast<G1ConcurrentRefine*>(this)->threads_do(&collector);
-  return RefinementStats(collector._total_time, collector._total_cards);
+  threads_do(&collector);
+  return collector._total_stats;
 }
 
 size_t G1ConcurrentRefine::activation_threshold(uint worker_id) const {
   Thresholds thresholds = calc_thresholds(_green_zone, _yellow_zone, worker_id);
   return activation_level(thresholds);
@@ -443,11 +441,11 @@
     _thread_control.maybe_activate_next(worker_id);
   }
 }
 
 bool G1ConcurrentRefine::do_refinement_step(uint worker_id,
-                                            size_t* total_refined_cards) {
+                                            G1ConcurrentRefineStats* stats) {
   G1DirtyCardQueueSet& dcqs = G1BarrierSet::dirty_card_queue_set();
 
   size_t curr_cards = dcqs.num_cards();
   // If the number of the cards falls down into the yellow zone,
   // that means that the transition period after the evacuation pause has ended.
@@ -458,7 +456,7 @@
   maybe_activate_more_threads(worker_id, curr_cards);
 
   // Process the next buffer, if there are enough left.
   return dcqs.refine_completed_buffer_concurrently(worker_id + worker_id_offset(),
                                                    deactivation_threshold(worker_id),
-                                                   total_refined_cards);
+                                                   stats);
 }
