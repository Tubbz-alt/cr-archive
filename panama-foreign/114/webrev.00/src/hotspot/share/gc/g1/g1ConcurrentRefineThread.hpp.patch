diff a/src/hotspot/share/gc/g1/g1ConcurrentRefineThread.hpp b/src/hotspot/share/gc/g1/g1ConcurrentRefineThread.hpp
--- a/src/hotspot/share/gc/g1/g1ConcurrentRefineThread.hpp
+++ b/src/hotspot/share/gc/g1/g1ConcurrentRefineThread.hpp
@@ -28,22 +28,22 @@
 #include "gc/shared/concurrentGCThread.hpp"
 #include "utilities/ticks.hpp"
 
 // Forward Decl.
 class G1ConcurrentRefine;
+class G1ConcurrentRefineStats;
 
 // One or more G1 Concurrent Refinement Threads may be active if concurrent
 // refinement is in progress.
 class G1ConcurrentRefineThread: public ConcurrentGCThread {
   friend class VMStructs;
   friend class G1CollectedHeap;
 
   double _vtime_start;  // Initial virtual time.
   double _vtime_accum;  // Accumulated virtual time.
 
-  Tickspan _total_refinement_time;
-  size_t _total_refined_cards;
+  G1ConcurrentRefineStats* _refinement_stats;
 
   uint _worker_id;
 
   // _notifier and _should_notify form a single-reader / multi-writer
   // notification mechanism.  The owning concurrent refinement thread is the
@@ -69,16 +69,18 @@
   virtual void run_service();
   virtual void stop_service();
 
 public:
   G1ConcurrentRefineThread(G1ConcurrentRefine* cg1r, uint worker_id);
+  virtual ~G1ConcurrentRefineThread();
 
   // Activate this thread.
   void activate();
 
-  Tickspan total_refinement_time() const { return _total_refinement_time; }
-  size_t total_refined_cards() const { return _total_refined_cards; }
+  G1ConcurrentRefineStats* refinement_stats() const {
+    return _refinement_stats;
+  }
 
   // Total virtual time so far.
   double vtime_accum() { return _vtime_accum; }
 };
 
