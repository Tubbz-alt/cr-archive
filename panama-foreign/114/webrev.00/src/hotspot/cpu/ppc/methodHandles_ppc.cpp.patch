diff a/src/hotspot/cpu/ppc/methodHandles_ppc.cpp b/src/hotspot/cpu/ppc/methodHandles_ppc.cpp
--- a/src/hotspot/cpu/ppc/methodHandles_ppc.cpp
+++ b/src/hotspot/cpu/ppc/methodHandles_ppc.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2012, 2017 SAP SE. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
@@ -26,10 +26,11 @@
 #include "precompiled.hpp"
 #include "jvm.h"
 #include "asm/macroAssembler.inline.hpp"
 #include "classfile/javaClasses.inline.hpp"
 #include "interpreter/interpreter.hpp"
+#include "logging/log.hpp"
 #include "memory/allocation.inline.hpp"
 #include "memory/resourceArea.hpp"
 #include "prims/methodHandles.hpp"
 #include "runtime/frame.inline.hpp"
 #include "utilities/preserveException.hpp"
@@ -262,11 +263,11 @@
   if (!is_signature_polymorphic_static(iid)) {
     __ ld(tmp_mh = temp1, __ argument_offset(param_size, param_size, 0), argbase);
     DEBUG_ONLY(param_size = noreg);
   }
 
-  if (TraceMethodHandles) {
+  if (log_is_enabled(Info, methodhandles)) {
     if (tmp_mh != noreg) {
       __ mr(R23_method_handle, tmp_mh);  // make stub happy
     }
     trace_method_handle_interpreter_entry(_masm, iid);
   }
@@ -543,11 +544,11 @@
     }
   }
 }
 
 void MethodHandles::trace_method_handle(MacroAssembler* _masm, const char* adaptername) {
-  if (!TraceMethodHandles) return;
+  if (!log_is_enabled(Info, methodhandles)) return;
 
   BLOCK_COMMENT("trace_method_handle {");
 
   const Register tmp = R11; // Will be preserved.
   const int nbytes_save = MacroAssembler::num_volatile_regs * 8;
