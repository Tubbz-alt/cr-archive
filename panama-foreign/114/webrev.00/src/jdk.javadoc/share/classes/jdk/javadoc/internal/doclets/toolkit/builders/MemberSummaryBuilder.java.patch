diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MemberSummaryBuilder.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MemberSummaryBuilder.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MemberSummaryBuilder.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MemberSummaryBuilder.java
@@ -98,19 +98,19 @@
      */
     public static MemberSummaryBuilder getInstance(
             ClassWriter classWriter, Context context) {
         MemberSummaryBuilder builder = new MemberSummaryBuilder(context, classWriter.getTypeElement()) {
             @Override
-            public void build(Content contentTree) {
-                buildPropertiesSummary(contentTree);
-                buildNestedClassesSummary(contentTree);
-                buildEnumConstantsSummary(contentTree);
-                buildAnnotationTypeRequiredMemberSummary(contentTree);
-                buildAnnotationTypeOptionalMemberSummary(contentTree);
-                buildFieldsSummary(contentTree);
-                buildConstructorsSummary(contentTree);
-                buildMethodsSummary(contentTree);
+            public void build(Content summariesList) {
+                buildPropertiesSummary(summariesList);
+                buildNestedClassesSummary(summariesList);
+                buildEnumConstantsSummary(summariesList);
+                buildAnnotationTypeRequiredMemberSummary(summariesList);
+                buildAnnotationTypeOptionalMemberSummary(summariesList);
+                buildFieldsSummary(summariesList);
+                buildConstructorsSummary(summariesList);
+                buildMethodsSummary(summariesList);
             }
 
             @Override
             public boolean hasMembersToDocument() {
                 return visibleMemberTable.hasVisibleMembers();
@@ -172,97 +172,87 @@
     public boolean hasMembers(VisibleMemberTable.Kind kind) {
         return !getVisibleMembers(kind).isEmpty();
     }
 
     /**
-     * Build the summary for the enum constants.
+     * Builds the summary for any optional members of an annotation type.
      *
-     * @param memberSummaryTree the content tree to which the documentation will be added
+     * @param summariesList the list of summaries to which the summary will be added
      */
-    protected void buildEnumConstantsSummary(Content memberSummaryTree) {
-        MemberSummaryWriter writer = memberSummaryWriters.get(ENUM_CONSTANTS);
-        addSummary(writer, ENUM_CONSTANTS, false, memberSummaryTree);
-    }
-
-    /**
-     * Build the summary for fields.
-     *
-     * @param memberSummaryTree the content tree to which the documentation will be added
-     */
-    protected void buildAnnotationTypeFieldsSummary(Content memberSummaryTree) {
-        MemberSummaryWriter writer = memberSummaryWriters.get(FIELDS);
-        addSummary(writer, FIELDS, false, memberSummaryTree);
+    protected void buildAnnotationTypeOptionalMemberSummary(Content summariesList) {
+        MemberSummaryWriter writer = memberSummaryWriters.get(ANNOTATION_TYPE_MEMBER_OPTIONAL);
+        addSummary(writer, ANNOTATION_TYPE_MEMBER_OPTIONAL, false, summariesList);
     }
 
     /**
-     * Build the summary for the optional members.
+     * Builds the summary for any required members of an annotation type.
      *
-     * @param memberSummaryTree the content tree to which the documentation will be added
+     * @param summariesList the list of summaries to which the summary will be added
      */
-    protected void buildAnnotationTypeOptionalMemberSummary(Content memberSummaryTree) {
-        MemberSummaryWriter writer = memberSummaryWriters.get(ANNOTATION_TYPE_MEMBER_OPTIONAL);
-        addSummary(writer, ANNOTATION_TYPE_MEMBER_OPTIONAL, false, memberSummaryTree);
+    protected void buildAnnotationTypeRequiredMemberSummary(Content summariesList) {
+        MemberSummaryWriter writer = memberSummaryWriters.get(ANNOTATION_TYPE_MEMBER_REQUIRED);
+        addSummary(writer, ANNOTATION_TYPE_MEMBER_REQUIRED, false, summariesList);
     }
 
     /**
-     * Build the summary for the optional members.
+     * Builds the summary for any enum constants of an enum type.
      *
-     * @param memberSummaryTree the content tree to which the documentation will be added
+     * @param summariesList the list of summaries to which the summary will be added
      */
-    protected void buildAnnotationTypeRequiredMemberSummary(Content memberSummaryTree) {
-        MemberSummaryWriter writer = memberSummaryWriters.get(ANNOTATION_TYPE_MEMBER_REQUIRED);
-        addSummary(writer, ANNOTATION_TYPE_MEMBER_REQUIRED, false, memberSummaryTree);
+    protected void buildEnumConstantsSummary(Content summariesList) {
+        MemberSummaryWriter writer = memberSummaryWriters.get(ENUM_CONSTANTS);
+        addSummary(writer, ENUM_CONSTANTS, false, summariesList);
     }
 
     /**
-     * Build the summary for the fields.
+     * Builds the summary for any fields.
      *
-     * @param memberSummaryTree the content tree to which the documentation will be added
+     * @param summariesList the list of summaries to which the summary will be added
      */
-    protected void buildFieldsSummary(Content memberSummaryTree) {
+    protected void buildFieldsSummary(Content summariesList) {
         MemberSummaryWriter writer = memberSummaryWriters.get(FIELDS);
-        addSummary(writer, FIELDS, true, memberSummaryTree);
+        addSummary(writer, FIELDS, true, summariesList);
     }
 
     /**
-     * Build the summary for the fields.
+     * Builds the summary for any properties.
      *
-     * @param memberSummaryTree the content tree to which the documentation will be added
+     * @param summariesList the list of summaries to which the summary will be added
      */
-    protected void buildPropertiesSummary(Content memberSummaryTree) {
+    protected void buildPropertiesSummary(Content summariesList) {
         MemberSummaryWriter writer = memberSummaryWriters.get(PROPERTIES);
-        addSummary(writer, PROPERTIES, true, memberSummaryTree);
+        addSummary(writer, PROPERTIES, true, summariesList);
     }
 
     /**
-     * Build the summary for the nested classes.
+     * Builds the summary for any nested classes.
      *
-     * @param memberSummaryTree the content tree to which the documentation will be added
+     * @param summariesList the list of summaries to which the summary will be added
      */
-    protected void buildNestedClassesSummary(Content memberSummaryTree) {
+    protected void buildNestedClassesSummary(Content summariesList) {
         MemberSummaryWriter writer = memberSummaryWriters.get(INNER_CLASSES);
-        addSummary(writer, INNER_CLASSES, true, memberSummaryTree);
+        addSummary(writer, INNER_CLASSES, true, summariesList);
     }
 
     /**
-     * Build the method summary.
+     * Builds the summary for any methods.
      *
-     * @param memberSummaryTree the content tree to which the documentation will be added
+     * @param summariesList the content tree to which the documentation will be added
      */
-    protected void buildMethodsSummary(Content memberSummaryTree) {
+    protected void buildMethodsSummary(Content summariesList) {
         MemberSummaryWriter writer = memberSummaryWriters.get(METHODS);
-        addSummary(writer, METHODS, true, memberSummaryTree);
+        addSummary(writer, METHODS, true, summariesList);
     }
 
     /**
-     * Build the constructor summary.
+     * Builds the summary for any constructors.
      *
-     * @param memberSummaryTree the content tree to which the documentation will be added
+     * @param summariesList the content tree to which the documentation will be added
      */
-    protected void buildConstructorsSummary(Content memberSummaryTree) {
+    protected void buildConstructorsSummary(Content summariesList) {
         MemberSummaryWriter writer = memberSummaryWriters.get(CONSTRUCTORS);
-        addSummary(writer, CONSTRUCTORS, false, memberSummaryTree);
+        addSummary(writer, CONSTRUCTORS, false, summariesList);
     }
 
     /**
      * Build the member summary for the given members.
      *
@@ -442,30 +432,30 @@
                     inheritedMembers.last() == member, linksTree);
         }
     }
 
     /**
-     * Add the summary for the documentation.
+     * Adds the summary for the documentation.
      *
-     * @param writer the writer for this member summary.
-     * @param kind the kind of members to document.
-     * @param showInheritedSummary true if inherited summary should be documented
-     * @param memberSummaryTree the content tree to which the documentation will be added
+     * @param writer               the writer for this member summary
+     * @param kind                 the kind of members to document
+     * @param showInheritedSummary true if a summary of any inherited elements should be documented
+     * @param summariesList        the list of summaries to which the summary will be added
      */
     private void addSummary(MemberSummaryWriter writer,
                             VisibleMemberTable.Kind kind,
                             boolean showInheritedSummary,
-                            Content memberSummaryTree)
+                            Content summariesList)
     {
         LinkedList<Content> summaryTreeList = new LinkedList<>();
         buildSummary(writer, kind, summaryTreeList);
         if (showInheritedSummary)
             buildInheritedSummary(writer, kind, summaryTreeList);
         if (!summaryTreeList.isEmpty()) {
-            Content memberTree = writer.getMemberSummaryHeader(typeElement, memberSummaryTree);
+            Content memberTree = writer.getMemberSummaryHeader(typeElement, summariesList);
             summaryTreeList.forEach(memberTree::add);
-            writer.addMemberTree(memberSummaryTree, memberTree);
+            writer.addSummary(summariesList, memberTree);
         }
     }
 
     private SortedSet<? extends Element> asSortedSet(Collection<? extends Element> members) {
         SortedSet<Element> out = new TreeSet<>(comparator);
