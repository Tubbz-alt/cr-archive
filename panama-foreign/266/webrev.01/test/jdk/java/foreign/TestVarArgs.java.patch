diff a/test/jdk/java/foreign/TestVarArgs.java b/test/jdk/java/foreign/TestVarArgs.java
--- a/test/jdk/java/foreign/TestVarArgs.java
+++ b/test/jdk/java/foreign/TestVarArgs.java
@@ -82,15 +82,15 @@
             MemorySegment callInfo = MemorySegment.allocateNative(ML_CallInfo);
             MemorySegment argIDs = MemorySegment.allocateNative(MemoryLayout.ofSequence(args.size(), C_INT))) {
 
             MemoryAddress callInfoPtr = callInfo.address();
 
-            VH_CallInfo_writeback.set(callInfoPtr, writeBack.address().toRawLongValue());
-            VH_CallInfo_argIDs.set(callInfoPtr, argIDs.address().toRawLongValue());
+            VH_CallInfo_writeback.set(callInfo, writeBack.address().toRawLongValue());
+            VH_CallInfo_argIDs.set(callInfo, argIDs.address().toRawLongValue());
 
             for (int i = 0; i < args.size(); i++) {
-                VH_IntArray.set(argIDs.address(), (long) i, args.get(i).id.ordinal());
+                VH_IntArray.set(argIDs, (long) i, args.get(i).id.ordinal());
             }
 
             List<MemoryLayout> argLayouts = new ArrayList<>();
             argLayouts.add(C_POINTER); // call info
             argLayouts.add(C_INT); // size
@@ -114,11 +114,11 @@
 
             downcallHandle.invokeWithArguments(argValues);
 
             for (int i = 0; i < args.size(); i++) {
                 VarArg a = args.get(i);
-                MemoryAddress writtenPtr = writeBack.address().addOffset(i * WRITEBACK_BYTES_PER_ARG);
+                MemorySegment writtenPtr = writeBack.asSlice(i * WRITEBACK_BYTES_PER_ARG);
                 Object written = a.vh.get(writtenPtr);
                 assertEquals(written, a.value);
             }
         }
     }
