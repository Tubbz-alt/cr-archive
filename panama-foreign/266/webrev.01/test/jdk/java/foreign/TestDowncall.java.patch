diff a/test/jdk/java/foreign/TestDowncall.java b/test/jdk/java/foreign/TestDowncall.java
--- a/test/jdk/java/foreign/TestDowncall.java
+++ b/test/jdk/java/foreign/TestDowncall.java
@@ -63,10 +63,11 @@
 import java.lang.invoke.MethodType;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Consumer;
 
+import jdk.incubator.foreign.MemorySegment;
 import org.testng.annotations.*;
 
 public class TestDowncall extends CallGeneratorHelper {
 
     static LibraryLookup lib = LibraryLookup.ofLibrary("TestDowncall");
@@ -74,21 +75,20 @@
 
 
     @Test(dataProvider="functions", dataProviderClass=CallGeneratorHelper.class)
     public void testDowncall(String fName, Ret ret, List<ParamType> paramTypes, List<StructFieldType> fields) throws Throwable {
         List<Consumer<Object>> checks = new ArrayList<>();
+        List<MemorySegment> segments = new ArrayList<>();
         LibraryLookup.Symbol addr = lib.lookup(fName);
         MethodHandle mh = abi.downcallHandle(addr, methodType(ret, paramTypes, fields), function(ret, paramTypes, fields));
-        Object[] args = makeArgs(paramTypes, fields, checks);
+        Object[] args = makeArgs(paramTypes, fields, checks, segments);
         mh = mh.asSpreader(Object[].class, paramTypes.size());
         Object res = mh.invoke(args);
         if (ret == Ret.NON_VOID) {
             checks.forEach(c -> c.accept(res));
         }
-        for (Object arg : args) {
-            cleanup(arg);
-        }
+        segments.forEach(MemorySegment::close);
     }
 
     static MethodType methodType(Ret ret, List<ParamType> params, List<StructFieldType> fields) {
         MethodType mt = ret == Ret.VOID ?
                 MethodType.methodType(void.class) : MethodType.methodType(paramCarrier(params.get(0).layout(fields)));
@@ -103,13 +103,13 @@
         return ret == Ret.VOID ?
                 FunctionDescriptor.ofVoid(paramLayouts) :
                 FunctionDescriptor.of(paramLayouts[0], paramLayouts);
     }
 
-    static Object[] makeArgs(List<ParamType> params, List<StructFieldType> fields, List<Consumer<Object>> checks) throws ReflectiveOperationException {
+    static Object[] makeArgs(List<ParamType> params, List<StructFieldType> fields, List<Consumer<Object>> checks, List<MemorySegment> segments) throws ReflectiveOperationException {
         Object[] args = new Object[params.size()];
         for (int i = 0 ; i < params.size() ; i++) {
-            args[i] = makeArg(params.get(i).layout(fields), checks, i == 0);
+            args[i] = makeArg(params.get(i).layout(fields), checks, i == 0, segments);
         }
         return args;
     }
 }
