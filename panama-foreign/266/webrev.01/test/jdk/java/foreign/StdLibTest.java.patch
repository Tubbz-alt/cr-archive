diff a/test/jdk/java/foreign/StdLibTest.java b/test/jdk/java/foreign/StdLibTest.java
--- a/test/jdk/java/foreign/StdLibTest.java
+++ b/test/jdk/java/foreign/StdLibTest.java
@@ -231,13 +231,13 @@
         String strcat(String s1, String s2) throws Throwable {
             try (MemorySegment buf = MemorySegment.allocateNative(s1.length() + s2.length() + 1) ;
                  MemorySegment other = toCString(s2)) {
                 char[] chars = s1.toCharArray();
                 for (long i = 0 ; i < chars.length ; i++) {
-                    setByteAtOffset(buf.address(), i, (byte)chars[(int)i]);
+                    setByteAtOffset(buf, i, (byte)chars[(int)i]);
                 }
-                setByteAtOffset(buf.address(), chars.length, (byte)'\0');
+                setByteAtOffset(buf, chars.length, (byte)'\0');
                 return toJavaStringRestricted(((MemoryAddress)strcat.invokeExact(buf.address(), other.address())));
             }
         }
 
         int strcmp(String s1, String s2) throws Throwable {
@@ -259,25 +259,25 @@
             }
         }
 
         Tm gmtime(long arg) throws Throwable {
             try (MemorySegment time = MemorySegment.allocateNative(8)) {
-                setLong(time.address(), arg);
+                setLong(time, arg);
                 return new Tm((MemoryAddress)gmtime.invokeExact(time.address()));
             }
         }
 
         static class Tm {
 
             //Tm pointer should never be freed directly, as it points to shared memory
-            private final MemoryAddress base;
+            private final MemorySegment base;
 
             static final long SIZE = 56;
 
-            Tm(MemoryAddress base) {
-                this.base = MemorySegment.ofNativeRestricted(base, SIZE, Thread.currentThread(),
-                        null, null).address();
+            Tm(MemoryAddress addr) {
+                this.base = MemorySegment.ofNativeRestricted(addr, SIZE, Thread.currentThread(),
+                        null, null);
             }
 
             int sec() {
                 return getIntAtOffset(base, 0);
             }
@@ -310,26 +310,26 @@
 
         int[] qsort(int[] arr) throws Throwable {
             //init native array
             try (NativeScope scope = NativeScope.unboundedScope()) {
 
-                MemorySegment nativeArr = scope.allocateArray(C_INT, arr).segment();
+                MemorySegment nativeArr = scope.allocateArray(C_INT, arr);
 
                 //call qsort
                 MemorySegment qsortUpcallStub = abi.upcallStub(qsortCompar.bindTo(nativeArr), qsortComparFunction);
-                scope.register(qsortUpcallStub);
+                qsortUpcallStub = scope.register(qsortUpcallStub);
 
                 qsort.invokeExact(nativeArr.address(), (long)arr.length, C_INT.byteSize(), qsortUpcallStub.address());
 
                 //convert back to Java array
                 return nativeArr.toIntArray();
             }
         }
 
         static int qsortCompare(MemorySegment base, MemoryAddress addr1, MemoryAddress addr2) {
-            return getIntAtOffset(base.address(), addr1.rebase(base).segmentOffset()) -
-                   getIntAtOffset(base.address(), addr2.rebase(base).segmentOffset());
+            return getIntAtOffset(base, addr1.segmentOffset(base)) -
+                   getIntAtOffset(base, addr2.segmentOffset(base));
         }
 
         int rand() throws Throwable {
             return (int)rand.invokeExact();
         }
