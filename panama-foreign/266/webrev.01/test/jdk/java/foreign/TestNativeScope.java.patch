diff a/test/jdk/java/foreign/TestNativeScope.java b/test/jdk/java/foreign/TestNativeScope.java
--- a/test/jdk/java/foreign/TestNativeScope.java
+++ b/test/jdk/java/foreign/TestNativeScope.java
@@ -66,21 +66,21 @@
                 layout.withBitAlignment(layout.bitAlignment() * 2),
                 layout.withBitAlignment(layout.bitAlignment() * 4),
                 layout.withBitAlignment(layout.bitAlignment() * 8)
         };
         for (ValueLayout alignedLayout : layouts) {
-            List<MemoryAddress> addressList = new ArrayList<>();
+            List<MemorySegment> addressList = new ArrayList<>();
             int elems = ELEMS / ((int)alignedLayout.byteAlignment() / (int)layout.byteAlignment());
             try (NativeScope scope = scopeFactory.make((int)alignedLayout.byteSize() * ELEMS)) {
                 for (int i = 0 ; i < elems ; i++) {
-                    MemoryAddress address = allocationFunction.allocate(scope, alignedLayout, value);
-                    assertEquals(address.segment().byteSize(), alignedLayout.byteSize());
+                    MemorySegment address = allocationFunction.allocate(scope, alignedLayout, value);
+                    assertEquals(address.byteSize(), alignedLayout.byteSize());
                     addressList.add(address);
                     VarHandle handle = handleFactory.apply(alignedLayout);
                     assertEquals(value, handle.get(address));
                     try {
-                        address.segment().close();
+                        address.close();
                         fail();
                     } catch (UnsupportedOperationException uoe) {
                         //failure is expected
                         assertTrue(true);
                     }
@@ -93,27 +93,27 @@
                     //failure is expected if bound
                     assertTrue(isBound);
                 }
             }
             // addresses should be invalid now
-            for (MemoryAddress address : addressList) {
-                assertFalse(address.segment().isAlive());
+            for (MemorySegment address : addressList) {
+                assertFalse(address.isAlive());
             }
         }
     }
 
     static final int SIZE_256M = 1024 * 1024 * 256;
 
     @Test
     public void testBigAllocationInUnboundedScope() {
         try (NativeScope scope = NativeScope.unboundedScope()) {
             for (int i = 8 ; i < SIZE_256M ; i *= 8) {
-                MemoryAddress address = scope.allocate(i);
+                MemorySegment address = scope.allocate(i);
                 //check size
-                assertEquals(address.segment().byteSize(), i);
+                assertEquals(address.byteSize(), i);
                 //check alignment
-                assertTrue(address.segment().address().toRawLongValue() % i == 0);
+                assertTrue(address.address().toRawLongValue() % i == 0);
             }
         }
     }
 
     @Test
@@ -206,12 +206,12 @@
 
     @Test(dataProvider = "arrayScopes")
     public <Z> void testArray(ScopeFactory scopeFactory, ValueLayout layout, AllocationFunction<Object> allocationFunction, ToArrayHelper<Z> arrayHelper) {
         Z arr = arrayHelper.array();
         try (NativeScope scope = scopeFactory.make(100)) {
-            MemoryAddress address = allocationFunction.allocate(scope, layout, arr);
-            Z found = arrayHelper.toArray(address.segment(), layout);
+            MemorySegment address = allocationFunction.allocate(scope, layout, arr);
+            Z found = arrayHelper.toArray(address, layout);
             assertEquals(found, arr);
         }
     }
 
     @DataProvider(name = "nativeScopes")
@@ -385,11 +385,11 @@
                         ToArrayHelper.toDoubleArray },
         };
     }
 
     interface AllocationFunction<X> {
-        MemoryAddress allocate(NativeScope scope, ValueLayout layout, X value);
+        MemorySegment allocate(NativeScope scope, ValueLayout layout, X value);
     }
 
     interface ScopeFactory {
         NativeScope make(int size);
     }
