diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractNativeScope.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractNativeScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractNativeScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractNativeScope.java
@@ -1,8 +1,7 @@
 package jdk.internal.foreign;
 
-import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.NativeScope;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -90,26 +89,25 @@
             super(Thread.currentThread());
             this.segment = newSegment(BLOCK_SIZE);
         }
 
         @Override
-        public MemoryAddress allocate(long bytesSize, long bytesAlignment) {
+        public MemorySegment allocate(long bytesSize, long bytesAlignment) {
             checkOwnerThread();
             if (bytesSize > MAX_ALLOC_SIZE) {
                 MemorySegment segment = newSegment(bytesSize, bytesAlignment);
-                return segment.withAccessModes(SCOPE_MASK)
-                        .address();
+                return segment.withAccessModes(SCOPE_MASK);
             }
             for (int i = 0; i < 2; i++) {
-                long min = ((MemoryAddressImpl) segment.address()).unsafeGetOffset();
+                long min = segment.address().toRawLongValue();
                 long start = Utils.alignUp(min + sp, bytesAlignment) - min;
                 try {
                     MemorySegment slice = segment.asSlice(start, bytesSize)
                             .withAccessModes(SCOPE_MASK);
                     sp = start + bytesSize;
                     size += Utils.alignUp(bytesSize, bytesAlignment);
-                    return slice.address();
+                    return slice;
                 } catch (IndexOutOfBoundsException ex) {
                     sp = 0L;
                     segment = newSegment(BLOCK_SIZE, 1L);
                 }
             }
@@ -135,19 +133,19 @@
             super(Thread.currentThread());
             this.segment = newSegment(size, 1);
         }
 
         @Override
-        public MemoryAddress allocate(long bytesSize, long bytesAlignment) {
+        public MemorySegment allocate(long bytesSize, long bytesAlignment) {
             checkOwnerThread();
-            long min = ((MemoryAddressImpl)segment.address()).unsafeGetOffset();
+            long min = segment.address().toRawLongValue();
             long start = Utils.alignUp(min + sp, bytesAlignment) - min;
             try {
                 MemorySegment slice = segment.asSlice(start, bytesSize)
                         .withAccessModes(SCOPE_MASK);
                 sp = start + bytesSize;
-                return slice.address();
+                return slice;
             } catch (IndexOutOfBoundsException ex) {
                 throw new OutOfMemoryError("Not enough space left to allocate");
             }
         }
     }
