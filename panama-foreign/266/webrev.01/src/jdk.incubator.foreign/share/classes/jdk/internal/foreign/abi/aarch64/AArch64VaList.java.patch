diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/AArch64VaList.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/AArch64VaList.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/AArch64VaList.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/AArch64VaList.java
@@ -134,17 +134,16 @@
         long ptr = U.allocateMemory(LAYOUT.byteSize());
         MemorySegment ms = NativeMemorySegmentImpl.makeNativeSegmentUnchecked(
                 MemoryAddress.ofLong(ptr), LAYOUT.byteSize(), null,
                 () -> U.freeMemory(ptr), null);
         cleaner.register(AArch64VaList.class, ms::close);
-        MemoryAddress base = ms.address();
-        VH_stack.set(base, MemoryAddress.NULL);
-        VH_gr_top.set(base, MemoryAddress.NULL);
-        VH_vr_top.set(base, MemoryAddress.NULL);
-        VH_gr_offs.set(base, 0);
-        VH_vr_offs.set(base, 0);
-        return ms.withAccessModes(0).address();
+        VH_stack.set(ms, MemoryAddress.NULL);
+        VH_gr_top.set(ms, MemoryAddress.NULL);
+        VH_vr_top.set(ms, MemoryAddress.NULL);
+        VH_gr_offs.set(ms, 0);
+        VH_vr_offs.set(ms, 0);
+        return ms.address();
     }
 
     public static CSupport.VaList empty() {
         return EMPTY;
     }
@@ -152,49 +151,49 @@
     private MemoryAddress grTop() {
         return grTop(segment);
     }
 
     private static MemoryAddress grTop(MemorySegment segment) {
-        return (MemoryAddress) VH_gr_top.get(segment.address());
+        return (MemoryAddress) VH_gr_top.get(segment);
     }
 
     private MemoryAddress vrTop() {
         return vrTop(segment);
     }
 
     private static MemoryAddress vrTop(MemorySegment segment) {
-        return (MemoryAddress) VH_vr_top.get(segment.address());
+        return (MemoryAddress) VH_vr_top.get(segment);
     }
 
     private int grOffs() {
-        final int offs = (int) VH_gr_offs.get(segment.address());
+        final int offs = (int) VH_gr_offs.get(segment);
         assert offs <= 0;
         return offs;
     }
 
     private int vrOffs() {
-        final int offs = (int) VH_vr_offs.get(segment.address());
+        final int offs = (int) VH_vr_offs.get(segment);
         assert offs <= 0;
         return offs;
     }
 
     private MemoryAddress stackPtr() {
-        return (MemoryAddress) VH_stack.get(segment.address());
+        return (MemoryAddress) VH_stack.get(segment);
     }
 
     private void stackPtr(MemoryAddress ptr) {
-        VH_stack.set(segment.address(), ptr);
+        VH_stack.set(segment, ptr);
     }
 
     private void consumeGPSlots(int num) {
-        final int old = (int) VH_gr_offs.get(segment.address());
-        VH_gr_offs.set(segment.address(), old + num * GP_SLOT_SIZE);
+        final int old = (int) VH_gr_offs.get(segment);
+        VH_gr_offs.set(segment, old + num * GP_SLOT_SIZE);
     }
 
     private void consumeFPSlots(int num) {
-        final int old = (int) VH_vr_offs.get(segment.address());
-        VH_vr_offs.set(segment.address(), old + num * FP_SLOT_SIZE);
+        final int old = (int) VH_vr_offs.get(segment);
+        VH_vr_offs.set(segment, old + num * FP_SLOT_SIZE);
     }
 
     private long currentGPOffset() {
         // Offset from start of GP register segment. __gr_top points to the top
         // (highest address) of the GP registers area. __gr_offs is the negative
@@ -275,11 +274,11 @@
                 case POINTER, INTEGER, FLOAT -> {
                     VarHandle reader = vhPrimitiveOrAddress(carrier, layout);
                     try (MemorySegment slice = MemorySegment.ofNativeRestricted(
                              stackPtr(), layout.byteSize(),
                              segment.ownerThread(), null, null)) {
-                        Object res = reader.get(slice.address());
+                        Object res = reader.get(slice);
                         postAlignStack(layout);
                         yield res;
                     }
                 }
             };
@@ -317,11 +316,11 @@
                 case STRUCT_REFERENCE -> {
                     // Struct is passed indirectly via a pointer in an integer register.
                     VarHandle ptrReader
                         = SharedUtils.vhPrimitiveOrAddress(MemoryAddress.class, AArch64.C_POINTER);
                     MemoryAddress ptr = (MemoryAddress) ptrReader.get(
-                        gpRegsArea.address().addOffset(currentGPOffset()));
+                        gpRegsArea.asSlice(currentGPOffset()));
                     consumeGPSlots(1);
 
                     try (MemorySegment slice = MemorySegment.ofNativeRestricted(
                              ptr, layout.byteSize(), segment.ownerThread(), null, null)) {
                         MemorySegment seg = allocator.allocate(layout);
@@ -329,17 +328,17 @@
                         yield seg;
                     }
                 }
                 case POINTER, INTEGER -> {
                     VarHandle reader = SharedUtils.vhPrimitiveOrAddress(carrier, layout);
-                    Object res = reader.get(gpRegsArea.address().addOffset(currentGPOffset()));
+                    Object res = reader.get(gpRegsArea.asSlice(currentGPOffset()));
                     consumeGPSlots(1);
                     yield res;
                 }
                 case FLOAT -> {
                     VarHandle reader = layout.varHandle(carrier);
-                    Object res = reader.get(fpRegsArea.address().addOffset(currentFPOffset()));
+                    Object res = reader.get(fpRegsArea.asSlice(currentFPOffset()));
                     consumeFPSlots(1);
                     yield res;
                 }
             };
         }
@@ -508,22 +507,22 @@
                         // Struct is passed indirectly via a pointer in an integer register.
                         MemorySegment valueSegment = (MemorySegment) value;
                         VarHandle writer
                             = SharedUtils.vhPrimitiveOrAddress(MemoryAddress.class,
                                                                AArch64.C_POINTER);
-                        writer.set(gpRegs.address().addOffset(currentGPOffset),
+                        writer.set(gpRegs.asSlice(currentGPOffset),
                                    valueSegment.address());
                         currentGPOffset += GP_SLOT_SIZE;
                     }
                     case POINTER, INTEGER -> {
                         VarHandle writer = SharedUtils.vhPrimitiveOrAddress(carrier, layout);
-                        writer.set(gpRegs.address().addOffset(currentGPOffset), value);
+                        writer.set(gpRegs.asSlice(currentGPOffset), value);
                         currentGPOffset += GP_SLOT_SIZE;
                     }
                     case FLOAT -> {
                         VarHandle writer = layout.varHandle(carrier);
-                        writer.set(fpRegs.address().addOffset(currentFPOffset), value);
+                        writer.set(fpRegs.asSlice(currentFPOffset), value);
                         currentFPOffset += FP_SLOT_SIZE;
                     }
                 }
             }
             return this;
@@ -543,28 +542,26 @@
             MemoryAddress stackArgsPtr = MemoryAddress.NULL;
             if (!stackArgs.isEmpty()) {
                 long stackArgsSize = stackArgs.stream()
                     .reduce(0L, (acc, e) -> acc + Utils.alignUp(e.layout.byteSize(), 8), Long::sum);
                 MemorySegment stackArgsSegment = allocator.allocate(stackArgsSize, 16);
-                MemoryAddress maStackArea = stackArgsSegment.address();
+                stackArgsPtr = stackArgsSegment.address();
                 for (SimpleVaArg arg : stackArgs) {
                     final long alignedSize = Utils.alignUp(arg.layout.byteSize(), 8);
-                    maStackArea = Utils.alignUp(maStackArea, alignedSize);
+                    stackArgsSegment = Utils.alignUp(stackArgsSegment, alignedSize);
                     VarHandle writer = arg.varHandle();
-                    writer.set(maStackArea, arg.value);
-                    maStackArea = maStackArea.addOffset(alignedSize);
+                    writer.set(stackArgsSegment, arg.value);
+                    stackArgsSegment = stackArgsSegment.asSlice(alignedSize);
                 }
-                stackArgsPtr = stackArgsSegment.address();
                 attachedSegments.add(stackArgsSegment);
             }
 
-            MemoryAddress vaListAddr = vaListSegment.address();
-            VH_gr_top.set(vaListAddr, gpRegs.address().addOffset(gpRegs.byteSize()));
-            VH_vr_top.set(vaListAddr, fpRegs.address().addOffset(fpRegs.byteSize()));
-            VH_stack.set(vaListAddr, stackArgsPtr);
-            VH_gr_offs.set(vaListAddr, -MAX_GP_OFFSET);
-            VH_vr_offs.set(vaListAddr, -MAX_FP_OFFSET);
+            VH_gr_top.set(vaListSegment, gpRegs.asSlice(gpRegs.byteSize()).address());
+            VH_vr_top.set(vaListSegment, fpRegs.asSlice(fpRegs.byteSize()).address());
+            VH_stack.set(vaListSegment, stackArgsPtr);
+            VH_gr_offs.set(vaListSegment, -MAX_GP_OFFSET);
+            VH_vr_offs.set(vaListSegment, -MAX_FP_OFFSET);
 
             attachedSegments.add(gpRegs);
             attachedSegments.add(fpRegs);
             assert gpRegs.ownerThread() == vaListSegment.ownerThread();
             assert fpRegs.ownerThread() == vaListSegment.ownerThread();
