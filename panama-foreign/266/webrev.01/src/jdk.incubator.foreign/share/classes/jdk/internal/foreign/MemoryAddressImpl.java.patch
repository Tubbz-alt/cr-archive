diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
@@ -23,123 +23,81 @@
  *  questions.
  *
  */
 package jdk.internal.foreign;
 
-import jdk.internal.access.foreign.MemoryAddressProxy;
-import jdk.internal.misc.Unsafe;
-
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 
 import java.util.Objects;
 
 /**
  * This class provides an immutable implementation for the {@code MemoryAddress} interface. This class contains information
  * about the segment this address is associated with, as well as an offset into such segment.
  */
-public final class MemoryAddressImpl implements MemoryAddress, MemoryAddressProxy {
-
-    private static final Unsafe UNSAFE = Unsafe.getUnsafe();
+public final class MemoryAddressImpl implements MemoryAddress {
 
-    private final AbstractMemorySegmentImpl segment;
+    private final Object base;
     private final long offset;
 
-    public MemoryAddressImpl(long offset) {
-        this.segment = AbstractMemorySegmentImpl.NOTHING;
-        this.offset = offset;
-    }
-
-    public MemoryAddressImpl(AbstractMemorySegmentImpl segment, long offset) {
-        this.segment = Objects.requireNonNull(segment);
+    public MemoryAddressImpl(Object base, long offset) {
+        this.base = base;
         this.offset = offset;
     }
 
     // MemoryAddress methods
 
     @Override
-    public long segmentOffset() {
-        if (segment() == null) {
-            throw new UnsupportedOperationException("Address does not have a segment");
+    public long segmentOffset(MemorySegment segment) {
+        Objects.requireNonNull(segment);
+        AbstractMemorySegmentImpl segmentImpl = (AbstractMemorySegmentImpl)segment;
+        if (segmentImpl.base() != base) {
+            throw new IllegalArgumentException("Invalid segment: " + segment);
         }
-        return offset;
+        return offset - segmentImpl.min();
     }
 
     @Override
     public long toRawLongValue() {
-        if (unsafeGetBase() != null) {
+        if (base != null) {
             throw new UnsupportedOperationException("Not a native address");
         }
-        return unsafeGetOffset();
-    }
-
-    @Override
-    public MemorySegment segment() {
-        return segment != AbstractMemorySegmentImpl.NOTHING ?
-                segment : null;
+        return offset;
     }
 
     @Override
     public MemoryAddress addOffset(long bytes) {
-        return new MemoryAddressImpl(segment, offset + bytes);
+        return new MemoryAddressImpl(base, offset + bytes);
     }
 
-    @Override
-    public MemoryAddress rebase(MemorySegment segment) {
-        AbstractMemorySegmentImpl segmentImpl = (AbstractMemorySegmentImpl)segment;
-        if (segmentImpl.base() != this.segment.base()) {
-            throw new IllegalArgumentException("Invalid rebase target: " + segment);
-        }
-        return new MemoryAddressImpl((AbstractMemorySegmentImpl)segment,
-                unsafeGetOffset() - ((MemoryAddressImpl)segment.address()).unsafeGetOffset());
-    }
-
-    // MemoryAddressProxy methods
-
-    public void checkAccess(long offset, long length, boolean readOnly) {
-        segment.checkRange(MemoryAddressProxy.addOffsets(this.offset, offset, this), length, !readOnly);
-    }
-
-    public long unsafeGetOffset() {
-        return segment.min() + offset;
-    }
-
-    public Object unsafeGetBase() {
-        return segment.base();
-    }
-
-    @Override
-    public boolean isSmall() {
-        return segment.isSmall();
-    }
     // Object methods
 
     @Override
     public int hashCode() {
-        return Objects.hash(unsafeGetBase(), unsafeGetOffset());
+        return Objects.hash(base, offset);
     }
 
     @Override
     public boolean equals(Object that) {
         if (that instanceof MemoryAddressImpl) {
             MemoryAddressImpl addr = (MemoryAddressImpl)that;
-            return Objects.equals(unsafeGetBase(), ((MemoryAddressImpl) that).unsafeGetBase()) &&
-                    unsafeGetOffset() == addr.unsafeGetOffset();
+            return Objects.equals(base, addr.base) &&
+                    offset == addr.offset;
         } else {
             return false;
         }
     }
 
     @Override
     public String toString() {
-        return "MemoryAddress{ region: " + segment + " offset=0x" + Long.toHexString(offset) + " }";
+        return "MemoryAddress{ base: " + base + " offset=0x" + Long.toHexString(offset) + " }";
     }
 
-    public static MemoryAddress ofLongUnchecked(long value) {
+    public static MemorySegment ofLongUnchecked(long value) {
         return ofLongUnchecked(value, Long.MAX_VALUE);
     }
 
-    public static MemoryAddress ofLongUnchecked(long value, long byteSize) {
+    public static MemorySegment ofLongUnchecked(long value, long byteSize) {
         return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(
-                MemoryAddress.ofLong(value), byteSize, null, null, null).address();
+                MemoryAddress.ofLong(value), byteSize, null, null, null);
     }
 }
