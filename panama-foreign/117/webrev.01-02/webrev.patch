diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -197,13 +197,13 @@
     /**
      * Obtains a new memory segment backed by the same underlying memory region as this segment,
      * but with different owner thread. As a side-effect, this segment will be marked as <em>not alive</em>,
      * and subsequent operations on this segment will result in runtime errors.
      * <p>
-     * It is important that the segment returned by this method is published by clients in a safe fashion
-     * (e.g. through a {@code volatile} field, or some other form of synchronization). Failures to do so might
-     * result in the new owner thread reading stale values from the memory region backing this segment.
+     * Write accesses to the segment’s content happens before hand-over from the current owner thread to the
+     * new owner thread, which in turn happens before read accesses to the segment’s contents on
+     * the new owner thread.
      *
      * @param newOwner the new owner thread.
      * @return a new memory segment backed by the same underlying memory region as this segment,
      *      owned by {@code newOwner}.
      * @throws IllegalStateException if this segment is not <em>alive</em>, or if access occurs from a thread other than the
