diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -95,10 +95,14 @@
  * typically the thread which initiated the creation operation. After creation, only the owner thread will be allowed
  * to directly manipulate the memory segment (e.g. close the memory segment) or access the underlying memory associated with
  * the segment using a memory access var handle. Any attempt to perform such operations from a thread other than the
  * owner thread will result in a runtime failure.
  * <p>
+ * Memory segments support <em>serial thread confinement</em>; that is, ownership of a memory segment can change (see
+ * {@link #withOwnerThread(Thread)}). This allows, for instance, for two threads {@code A} and {@code B} to share
+ * a segment in a controlled, cooperative and race-free fashion.
+ * <p>
  * In some cases, it might be useful for multiple threads to process the contents of the same memory segment concurrently
  * (e.g. in the case of parallel processing); while memory segments provide strong confinement guarantees, it is possible
  * to obtain a {@link Spliterator} from a segment, which can be used to slice the segment and allow multiple thread to
  * work in parallel on disjoint segment slices (this assumes that the access mode {@link #ACQUIRE} is set).
  * For instance, the following code can be used to sum all int values in a memory segment in parallel:
@@ -188,10 +192,31 @@
      * The thread owning this segment.
      * @return the thread owning this segment.
      */
     Thread ownerThread();
 
+    /**
+     * Obtains a new memory segment backed by the same underlying memory region as this segment,
+     * but with different owner thread. As a side-effect, this segment will be marked as <em>not alive</em>,
+     * and subsequent operations on this segment will result in runtime errors.
+     * <p>
+     * Write accesses to the segment’s content <a href="../../../java/util/concurrent/package-summary.html#MemoryVisibility"><i>happens-before</i></a>
+     * hand-over from the current owner thread to the new owner thread, which in turn <i>happens before</i> read accesses to the segment’s contents on
+     * the new owner thread.
+     *
+     * @param newOwner the new owner thread.
+     * @return a new memory segment backed by the same underlying memory region as this segment,
+     *      owned by {@code newOwner}.
+     * @throws IllegalStateException if this segment is not <em>alive</em>, or if access occurs from a thread other than the
+     * thread owning this segment, or if the segment cannot be closed because it is being operated upon by a different
+     * thread (see {@link #spliterator(SequenceLayout)}).
+     * @throws NullPointerException if {@code newOwner == null}
+     * @throws IllegalArgumentException if the segment is already a confined segment owner by {@code newOnwer}.
+     * @throws UnsupportedOperationException if this segment does not support the {@link #HANDOFF} access mode.
+     */
+    MemorySegment withOwnerThread(Thread newOwner);
+
     /**
      * The size (in bytes) of this memory segment.
      * @return The size (in bytes) of this memory segment.
      */
     long byteSize();
@@ -501,6 +526,14 @@
      * (see {@link #spliterator(SequenceLayout)}).
      * @see MemorySegment#accessModes()
      * @see MemorySegment#withAccessModes(int)
      */
     int ACQUIRE = CLOSE << 1;
+
+    /**
+     * Handoff access mode; this segment support serial thread-confinement via thread ownership changes
+     * (see {@link #withOwnerThread(Thread)}).
+     * @see MemorySegment#accessModes()
+     * @see MemorySegment#withAccessModes(int)
+     */
+    int HANDOFF = ACQUIRE << 1;
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
@@ -33,10 +33,11 @@
 import jdk.internal.access.foreign.MemorySegmentProxy;
 import jdk.internal.access.foreign.UnmapperProxy;
 import jdk.internal.vm.annotation.ForceInline;
 import sun.security.action.GetPropertyAction;
 
+import java.lang.invoke.VarHandle;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
 import java.util.Random;
@@ -55,15 +56,15 @@
 public abstract class AbstractMemorySegmentImpl implements MemorySegment, MemorySegmentProxy {
 
     private static final boolean enableSmallSegments =
             Boolean.parseBoolean(GetPropertyAction.privilegedGetProperty("jdk.incubator.foreign.SmallSegments", "true"));
 
-    final static int ACCESS_MASK = READ | WRITE | CLOSE | ACQUIRE;
+    final static int ACCESS_MASK = READ | WRITE | CLOSE | ACQUIRE | HANDOFF;
     final static int FIRST_RESERVED_FLAG = 1 << 16; // upper 16 bits are reserved
     final static int SMALL = FIRST_RESERVED_FLAG;
     final static long NONCE = new Random().nextLong();
-    final static int DEFAULT_MASK = READ | WRITE | CLOSE | ACQUIRE;
+    final static int DEFAULT_MASK = READ | WRITE | CLOSE | ACQUIRE | HANDOFF;
 
     final static JavaNioAccess nioAccess = SharedSecrets.getJavaNioAccess();
 
     final long length;
     final int mask;
@@ -171,21 +172,40 @@
         if ((accessModes & ~ACCESS_MASK) != 0) {
             throw new IllegalArgumentException("Invalid access modes");
         }
     }
 
+    @Override
+    public MemorySegment withOwnerThread(Thread newOwner) {
+        Objects.requireNonNull(newOwner);
+        checkValidState();
+        if (!isSet(HANDOFF)) {
+            throw unsupportedAccessMode(HANDOFF);
+        }
+        if (owner == newOwner) {
+            throw new IllegalArgumentException("Segment already owned by thread: " + newOwner);
+        } else {
+            try {
+                return dup(0L, length, mask, newOwner, scope.dup());
+            } finally {
+                //flush read/writes to memory before returning the new segment
+                VarHandle.fullFence();
+            }
+        }
+    }
+
     @Override
     public final void close() {
         if (!isSet(CLOSE)) {
             throw unsupportedAccessMode(CLOSE);
         }
         checkValidState();
         closeNoCheck();
     }
 
     private final void closeNoCheck() {
-        scope.close();
+        scope.close(true);
     }
 
     final AbstractMemorySegmentImpl acquire() {
         if (Thread.currentThread() != ownerThread() && !isSet(ACQUIRE)) {
             throw unsupportedAccessMode(ACQUIRE);
@@ -278,10 +298,13 @@
             modes.add("CLOSE");
         }
         if ((mode & ACQUIRE) != 0) {
             modes.add("ACQUIRE");
         }
+        if ((mode & HANDOFF) != 0) {
+            modes.add("HANDOFF");
+        }
         return modes;
     }
 
     private IndexOutOfBoundsException outOfBoundException(long offset, long length) {
         return new IndexOutOfBoundsException(String.format("Out of bound access on segment %s; new offset = %d; new length = %d",
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
@@ -105,17 +105,22 @@
                 throw new IllegalStateException();
             }
         } while (!COUNT_HANDLE.compareAndSet(this, value, value - 1));
     }
 
-    void close() {
+    void close(boolean doCleanup) {
         if (!COUNT_HANDLE.compareAndSet(this, UNACQUIRED, CLOSED)) {
             //first check if already closed...
             checkAliveConfined();
             //...if not, then we have acquired views that are still active
             throw new IllegalStateException("Cannot close a segment that has active acquired views");
         }
-        if (cleanupAction != null) {
+        if (doCleanup && cleanupAction != null) {
             cleanupAction.run();
         }
     }
+
+    MemoryScope dup() {
+        close(false);
+        return new MemoryScope(ref, cleanupAction);
+    }
 }
diff a/test/jdk/java/foreign/TestSegments.java b/test/jdk/java/foreign/TestSegments.java
--- a/test/jdk/java/foreign/TestSegments.java
+++ b/test/jdk/java/foreign/TestSegments.java
@@ -231,11 +231,12 @@
         final Object[] params;
 
         final static List<String> CONFINED_NAMES = List.of(
                 "close",
                 "spliterator",
-                "toByteArray"
+                "toByteArray",
+                "withOwnerThread"
         );
 
         public SegmentMember(Method method, Object[] params) {
             this.method = method;
             this.params = params;
@@ -329,10 +330,16 @@
         WRITE(MemorySegment.WRITE) {
             @Override
             void run(MemorySegment segment) {
                 INT_HANDLE.set(segment.baseAddress(), 42);
             }
+        },
+        HANDOFF(MemorySegment.HANDOFF) {
+            @Override
+            void run(MemorySegment segment) {
+                segment.withOwnerThread(new Thread());
+            }
         };
 
         final int accessMode;
 
         static VarHandle INT_HANDLE = MemoryLayouts.JAVA_INT.varHandle(int.class);
diff a/test/jdk/java/foreign/TestSharedAccess.java b/test/jdk/java/foreign/TestSharedAccess.java
--- a/test/jdk/java/foreign/TestSharedAccess.java
+++ b/test/jdk/java/foreign/TestSharedAccess.java
@@ -42,19 +42,47 @@
 import java.util.Spliterator;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.function.Consumer;
 
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
 import static org.testng.Assert.fail;
 
 public class TestSharedAccess {
 
     static final VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
 
+    @Test
+    public void testConfined() throws Throwable {
+        Thread owner = Thread.currentThread();
+        MemorySegment s = MemorySegment.allocateNative(4);
+        AtomicReference<MemorySegment> confined = new AtomicReference<>(s);
+        setInt(s.baseAddress(), 42);
+        assertEquals(getInt(s.baseAddress()), 42);
+        List<Thread> threads = new ArrayList<>();
+        for (int i = 0 ; i < 1000 ; i++) {
+            threads.add(new Thread(() -> {
+                assertEquals(getInt(confined.get().baseAddress()), 42);
+                confined.set(confined.get().withOwnerThread(owner));
+            }));
+        }
+        threads.forEach(t -> {
+            confined.set(confined.get().withOwnerThread(t));
+            t.start();
+            try {
+                t.join();
+            } catch (Throwable e) {
+                throw new IllegalStateException(e);
+            }
+        });
+        confined.get().close();
+    }
+
     @Test
     public void testShared() throws Throwable {
         SequenceLayout layout = MemoryLayout.ofSequence(1024, MemoryLayouts.JAVA_INT);
         try (MemorySegment s = MemorySegment.allocateNative(layout)) {
             for (int i = 0 ; i < layout.elementCount().getAsLong() ; i++) {
@@ -119,42 +147,68 @@
                 }
             });
         }
     }
 
+    @Test(expectedExceptions=IllegalStateException.class)
+    public void testBadCloseWithPendingAcquire() {
+        withAcquired(MemorySegment::close);
+    }
 
     @Test(expectedExceptions=IllegalStateException.class)
-    public void testBadCloseWithPendingAcquire() throws InterruptedException {
-        try (MemorySegment segment = MemorySegment.allocateNative(16)) {
-            Spliterator<MemorySegment> spliterator = segment.spliterator(MemoryLayout.ofSequence(16, MemoryLayouts.JAVA_BYTE));
-            Runnable r = () -> spliterator.forEachRemaining(s -> {
-                try {
-                    Thread.sleep(5000 * 100);
-                } catch (InterruptedException ex) {
-                    throw new AssertionError(ex);
-                }
-            });
-            new Thread(r).start();
-            Thread.sleep(5000);
-        } //should fail here!
+    public void testBadCloseWithPendingAcquireBuffer() {
+        withAcquired(segment -> {
+            segment = MemorySegment.ofByteBuffer(segment.asByteBuffer()); // original segment is lost
+            segment.close(); // this should still fail
+        });
+    }
+
+    @Test(expectedExceptions=IllegalStateException.class)
+    public void testBadHandoffWithPendingAcquire() {
+        withAcquired(segment -> segment.withOwnerThread(new Thread()));
     }
 
     @Test(expectedExceptions=IllegalStateException.class)
-    public void testBadCloseWithPendingAcquireBuffer() throws InterruptedException {
+    public void testBadHandoffWithPendingAcquireBuffer() {
+        withAcquired(segment -> {
+            segment = MemorySegment.ofByteBuffer(segment.asByteBuffer()); // original segment is lost
+            segment.withOwnerThread(new Thread()); // this should still fail
+        });
+    }
+
+    @Test(expectedExceptions=IllegalArgumentException.class)
+    public void testBadHandoffSameThread() {
+        MemorySegment.ofArray(new int[4]).withOwnerThread(Thread.currentThread());
+    }
+
+    @Test(expectedExceptions=NullPointerException.class)
+    public void testBadHandoffNullThread() {
+        MemorySegment.ofArray(new int[4]).withOwnerThread(null);
+    }
+
+    private void withAcquired(Consumer<MemorySegment> acquiredAction) {
+        CountDownLatch holder = new CountDownLatch(1);
         MemorySegment segment = MemorySegment.allocateNative(16);
         Spliterator<MemorySegment> spliterator = segment.spliterator(MemoryLayout.ofSequence(16, MemoryLayouts.JAVA_BYTE));
-        Runnable r = () -> spliterator.forEachRemaining(s -> {
+        CountDownLatch acquired = new CountDownLatch(1);
+        Runnable r = () -> spliterator.tryAdvance(s -> {
             try {
-                Thread.sleep(5000 * 100);
+                acquired.countDown();
+                holder.await();
             } catch (InterruptedException ex) {
                 throw new AssertionError(ex);
             }
         });
         new Thread(r).start();
-        Thread.sleep(5000);
-        segment = MemorySegment.ofByteBuffer(segment.asByteBuffer()); // original segment is lost
-        segment.close(); // this should still fail
+        try {
+            acquired.await();
+            acquiredAction.accept(segment);
+        } catch (InterruptedException ex) {
+            throw new AssertionError(ex);
+        } finally {
+            holder.countDown();
+        }
     }
 
     @Test
     public void testOutsideConfinementThread() throws Throwable {
         CountDownLatch a = new CountDownLatch(1);
