diff a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
--- a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
+++ b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
@@ -19,18 +19,19 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.NativeScope;
 import org.testng.annotations.Test;
 import test.jextract.test8246341.*;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
 import static test.jextract.test8246341.test8246341_h.*;
-import static test.jextract.test8246341.Cstring.toJavaStringRestricted;
+import static jdk.incubator.foreign.CSupport.*;
 
 /*
  * @test
  * @library ..
  * @modules jdk.incubator.jextract
@@ -39,37 +40,36 @@
  * @summary jextract should generate Cpointer utilities class
  * @run driver JtregJextract -l Test8246341 -t test.jextract.test8246341 -- test8246341.h
  * @run testng/othervm -Dforeign.restricted=permit LibTest8246341Test
  */
 public class LibTest8246341Test {
+    private static MemoryAddress getPointerAt(MemoryAddress addr, int element) {
+        return MemoryAccess.getAddress(addr, element*C_POINTER.byteSize());
+    }
+
     @Test
     public void testPointerArray() {
         boolean[] callbackCalled = new boolean[1];
         try (var callback = func$callback.allocate((argc, argv) -> {
             callbackCalled[0] = true;
-            var addr = Cpointer.asArrayRestricted(argv, argc);
+            var addr = RuntimeHelper.asArrayRestricted(argv, C_POINTER, argc);
             assertEquals(argc, 4);
-            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 0)), "java");
-            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 1)), "python");
-            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 2)), "javascript");
-            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 3)), "c++");
+            assertEquals(toJavaStringRestricted(getPointerAt(addr, 0)), "java");
+            assertEquals(toJavaStringRestricted(getPointerAt(addr, 1)), "python");
+            assertEquals(toJavaStringRestricted(getPointerAt(addr, 2)), "javascript");
+            assertEquals(toJavaStringRestricted(getPointerAt(addr, 3)), "c++");
         })) {
             func(callback.baseAddress());
         }
         assertTrue(callbackCalled[0]);
     }
 
     @Test
     public void testPointerAllocate() {
-        try (var scope = NativeScope.boundedScope(Cpointer.sizeof())) {
-            var addr = Cpointer.allocate(MemoryAddress.NULL, scope);
-            fillin(addr);
-            assertEquals(toJavaStringRestricted(Cpointer.get(addr)), "hello world");
-        }
-
-        try (var seg = Cpointer.allocate(MemoryAddress.NULL)) {
-            var addr = seg.baseAddress();
+        try (var scope = NativeScope.boundedScope(C_POINTER.byteSize())) {
+            var addr = scope.allocate(C_POINTER);
+            MemoryAccess.setAddress(addr, 0, MemoryAddress.NULL);
             fillin(addr);
-            assertEquals(toJavaStringRestricted(Cpointer.get(addr)), "hello world");
+            assertEquals(toJavaStringRestricted(getPointerAt(addr, 0)), "hello world");
         }
     }
 }
