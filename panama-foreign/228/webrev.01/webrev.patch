diff a/doc/panama_jextract.html b/doc/panama_jextract.html
--- a/doc/panama_jextract.html
+++ b/doc/panama_jextract.html
@@ -197,64 +197,66 @@
 <div class="sourceCode" id="cb6"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1"></a></span>
 <span id="cb6-2"><a href="#cb6-2"></a><span class="ex">java</span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign HelloWorld.java</span></code></pre></div>
 <h2 id="embedding-python-interpreter-in-your-java-program-mac-os">Embedding Python interpreter in your Java program (Mac OS)</h2>
 <h3 id="jextract-python.h">jextract Python.h</h3>
 <div class="sourceCode" id="cb7"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1"></a></span>
-<span id="cb7-2"><a href="#cb7-2"></a><span class="ex">jextract</span> -l python2.7 \</span>
-<span id="cb7-3"><a href="#cb7-3"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \</span>
-<span id="cb7-4"><a href="#cb7-4"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/python2.7/ \</span>
-<span id="cb7-5"><a href="#cb7-5"></a>  -t org.python \</span>
-<span id="cb7-6"><a href="#cb7-6"></a>   /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/python2.7/Python.h</span></code></pre></div>
+<span id="cb7-2"><a href="#cb7-2"></a><span class="ex">jextract</span> \</span>
+<span id="cb7-3"><a href="#cb7-3"></a>  -l python2.7 \</span>
+<span id="cb7-4"><a href="#cb7-4"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \</span>
+<span id="cb7-5"><a href="#cb7-5"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/python2.7/ \</span>
+<span id="cb7-6"><a href="#cb7-6"></a>  -t org.python \</span>
+<span id="cb7-7"><a href="#cb7-7"></a>   /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/python2.7/Python.h</span></code></pre></div>
 <h3 id="java-program-that-uses-extracted-python-interface">Java program that uses extracted Python interface</h3>
 <div class="sourceCode" id="cb8"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb8-1"><a href="#cb8-1"></a></span>
-<span id="cb8-2"><a href="#cb8-2"></a><span class="kw">import</span><span class="im"> org.python.Cstring;</span></span>
-<span id="cb8-3"><a href="#cb8-3"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
-<span id="cb8-4"><a href="#cb8-4"></a><span class="co">// import jextracted python &#39;header&#39; class</span></span>
-<span id="cb8-5"><a href="#cb8-5"></a><span class="kw">import static</span><span class="im"> org.python.RuntimeHelper.*;</span></span>
-<span id="cb8-6"><a href="#cb8-6"></a><span class="kw">import static</span><span class="im"> org.python.Python_h.*;</span></span>
-<span id="cb8-7"><a href="#cb8-7"></a></span>
-<span id="cb8-8"><a href="#cb8-8"></a><span class="kw">public</span> <span class="kw">class</span> PythonMain {</span>
-<span id="cb8-9"><a href="#cb8-9"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
-<span id="cb8-10"><a href="#cb8-10"></a>        <span class="bu">String</span> script = <span class="st">&quot;print(sum([33, 55, 66])); print(&#39;Hello from Python!&#39;)</span><span class="sc">\n</span><span class="st">&quot;</span>;</span>
-<span id="cb8-11"><a href="#cb8-11"></a></span>
-<span id="cb8-12"><a href="#cb8-12"></a>        <span class="fu">Py_Initialize</span>();</span>
-<span id="cb8-13"><a href="#cb8-13"></a>        <span class="kw">try</span> (var s = Cstring.<span class="fu">toCString</span>(script)) {</span>
-<span id="cb8-14"><a href="#cb8-14"></a>            var str = s.<span class="fu">baseAddress</span>();</span>
-<span id="cb8-15"><a href="#cb8-15"></a>            <span class="fu">PyRun_SimpleStringFlags</span>(str, NULL);</span>
-<span id="cb8-16"><a href="#cb8-16"></a>            <span class="fu">Py_Finalize</span>();</span>
-<span id="cb8-17"><a href="#cb8-17"></a>        }</span>
-<span id="cb8-18"><a href="#cb8-18"></a>    }</span>
-<span id="cb8-19"><a href="#cb8-19"></a>}</span></code></pre></div>
+<span id="cb8-2"><a href="#cb8-2"></a></span>
+<span id="cb8-3"><a href="#cb8-3"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.CSupport.*;</span></span>
+<span id="cb8-4"><a href="#cb8-4"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
+<span id="cb8-5"><a href="#cb8-5"></a><span class="co">// import jextracted python &#39;header&#39; class</span></span>
+<span id="cb8-6"><a href="#cb8-6"></a><span class="kw">import static</span><span class="im"> org.python.RuntimeHelper.*;</span></span>
+<span id="cb8-7"><a href="#cb8-7"></a><span class="kw">import static</span><span class="im"> org.python.Python_h.*;</span></span>
+<span id="cb8-8"><a href="#cb8-8"></a></span>
+<span id="cb8-9"><a href="#cb8-9"></a><span class="kw">public</span> <span class="kw">class</span> PythonMain {</span>
+<span id="cb8-10"><a href="#cb8-10"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
+<span id="cb8-11"><a href="#cb8-11"></a>        <span class="bu">String</span> script = <span class="st">&quot;print(sum([33, 55, 66])); print(&#39;Hello from Python!&#39;)</span><span class="sc">\n</span><span class="st">&quot;</span>;</span>
+<span id="cb8-12"><a href="#cb8-12"></a></span>
+<span id="cb8-13"><a href="#cb8-13"></a>        <span class="fu">Py_Initialize</span>();</span>
+<span id="cb8-14"><a href="#cb8-14"></a>        <span class="kw">try</span> (var s = <span class="fu">toCString</span>(script)) {</span>
+<span id="cb8-15"><a href="#cb8-15"></a>            var str = s.<span class="fu">baseAddress</span>();</span>
+<span id="cb8-16"><a href="#cb8-16"></a>            <span class="fu">PyRun_SimpleStringFlags</span>(str, NULL);</span>
+<span id="cb8-17"><a href="#cb8-17"></a>            <span class="fu">Py_Finalize</span>();</span>
+<span id="cb8-18"><a href="#cb8-18"></a>        }</span>
+<span id="cb8-19"><a href="#cb8-19"></a>    }</span>
+<span id="cb8-20"><a href="#cb8-20"></a>}</span></code></pre></div>
 <h3 id="running-the-java-code-that-calls-python-interpreter">Running the Java code that calls Python interpreter</h3>
 <div class="sourceCode" id="cb9"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1"></a></span>
 <span id="cb9-2"><a href="#cb9-2"></a><span class="ex">java</span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \</span>
 <span id="cb9-3"><a href="#cb9-3"></a>    -Djava.library.path=/System/Library/Frameworks/Python.framework/Versions/2.7/lib \</span>
 <span id="cb9-4"><a href="#cb9-4"></a>    PythonMain.java</span></code></pre></div>
 <h2 id="using-readline-library-from-java-code-mac-os">Using readline library from Java code (Mac OS)</h2>
 <h3 id="jextract-readline.h">jextract readline.h</h3>
 <div class="sourceCode" id="cb10"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1"></a></span>
-<span id="cb10-2"><a href="#cb10-2"></a><span class="ex">jextract</span> -l readline -t org.unix \</span>
-<span id="cb10-3"><a href="#cb10-3"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \</span>
-<span id="cb10-4"><a href="#cb10-4"></a>   /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/readline/readline.h</span>
-<span id="cb10-5"><a href="#cb10-5"></a></span></code></pre></div>
+<span id="cb10-2"><a href="#cb10-2"></a><span class="ex">jextract</span> \</span>
+<span id="cb10-3"><a href="#cb10-3"></a>  -l readline -t org.unix \</span>
+<span id="cb10-4"><a href="#cb10-4"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \</span>
+<span id="cb10-5"><a href="#cb10-5"></a>   /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/readline/readline.h</span></code></pre></div>
 <h3 id="java-code-that-uses-readline">Java code that uses readline</h3>
 <div class="sourceCode" id="cb11"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb11-1"><a href="#cb11-1"></a></span>
-<span id="cb11-2"><a href="#cb11-2"></a><span class="kw">import</span><span class="im"> org.unix.Cstring;</span></span>
-<span id="cb11-3"><a href="#cb11-3"></a><span class="kw">import static</span><span class="im"> org.unix.RuntimeHelper.*;</span></span>
-<span id="cb11-4"><a href="#cb11-4"></a><span class="kw">import static</span><span class="im"> org.unix.readline_h.*;</span></span>
+<span id="cb11-2"><a href="#cb11-2"></a><span class="kw">import static</span><span class="im"> org.unix.RuntimeHelper.*;</span></span>
+<span id="cb11-3"><a href="#cb11-3"></a><span class="kw">import static</span><span class="im"> org.unix.readline_h.*;</span></span>
+<span id="cb11-4"><a href="#cb11-4"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.CSupport.*;</span></span>
 <span id="cb11-5"><a href="#cb11-5"></a></span>
 <span id="cb11-6"><a href="#cb11-6"></a><span class="kw">public</span> <span class="kw">class</span> Readline {</span>
 <span id="cb11-7"><a href="#cb11-7"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
-<span id="cb11-8"><a href="#cb11-8"></a>        <span class="kw">try</span> (var s = Cstring.<span class="fu">toCString</span>(<span class="st">&quot;name? &quot;</span>)) {</span>
+<span id="cb11-8"><a href="#cb11-8"></a>        <span class="kw">try</span> (var s = <span class="fu">toCString</span>(<span class="st">&quot;name? &quot;</span>)) {</span>
 <span id="cb11-9"><a href="#cb11-9"></a>            var pstr = s.<span class="fu">baseAddress</span>();</span>
 <span id="cb11-10"><a href="#cb11-10"></a>            <span class="co">// call &quot;readline&quot; API</span></span>
 <span id="cb11-11"><a href="#cb11-11"></a>            var p = <span class="fu">readline</span>(pstr);</span>
 <span id="cb11-12"><a href="#cb11-12"></a></span>
 <span id="cb11-13"><a href="#cb11-13"></a>            <span class="co">// print char* as is</span></span>
 <span id="cb11-14"><a href="#cb11-14"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(p);</span>
 <span id="cb11-15"><a href="#cb11-15"></a>            <span class="co">// convert char* ptr from readline as Java String &amp; print it</span></span>
-<span id="cb11-16"><a href="#cb11-16"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;Hello, &quot;</span> + Cstring.<span class="fu">toJavaStringRestricted</span>(p));</span>
+<span id="cb11-16"><a href="#cb11-16"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;Hello, &quot;</span> + <span class="fu">toJavaStringRestricted</span>(p));</span>
 <span id="cb11-17"><a href="#cb11-17"></a>        }</span>
 <span id="cb11-18"><a href="#cb11-18"></a>    }</span>
 <span id="cb11-19"><a href="#cb11-19"></a>}</span></code></pre></div>
 <h3 id="running-the-java-code-that-uses-readline">Running the java code that uses readline</h3>
 <pre><code>java -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \
@@ -267,33 +269,34 @@
 <span id="cb13-3"><a href="#cb13-3"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/ \</span>
 <span id="cb13-4"><a href="#cb13-4"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/curl/ \</span>
 <span id="cb13-5"><a href="#cb13-5"></a>  /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/curl/curl.h</span></code></pre></div>
 <h3 id="java-code-that-uses-libcurl">Java code that uses libcurl</h3>
 <div class="sourceCode" id="cb14"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb14-1"><a href="#cb14-1"></a></span>
-<span id="cb14-2"><a href="#cb14-2"></a><span class="kw">import</span><span class="im"> org.unix.Cstring;</span></span>
+<span id="cb14-2"><a href="#cb14-2"></a></span>
 <span id="cb14-3"><a href="#cb14-3"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
 <span id="cb14-4"><a href="#cb14-4"></a><span class="kw">import static</span><span class="im"> org.unix.RuntimeHelper.*;</span></span>
 <span id="cb14-5"><a href="#cb14-5"></a><span class="kw">import static</span><span class="im"> org.unix.curl_h.*;</span></span>
-<span id="cb14-6"><a href="#cb14-6"></a></span>
-<span id="cb14-7"><a href="#cb14-7"></a><span class="kw">public</span> <span class="kw">class</span> CurlMain {</span>
-<span id="cb14-8"><a href="#cb14-8"></a>   <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
-<span id="cb14-9"><a href="#cb14-9"></a>       var urlStr = args[<span class="dv">0</span>];</span>
-<span id="cb14-10"><a href="#cb14-10"></a>       <span class="fu">curl_global_init</span>(<span class="fu">CURL_GLOBAL_DEFAULT</span>());</span>
-<span id="cb14-11"><a href="#cb14-11"></a>       var curl = <span class="fu">curl_easy_init</span>();</span>
-<span id="cb14-12"><a href="#cb14-12"></a>       <span class="kw">if</span>(!curl.<span class="fu">equals</span>(NULL)) {</span>
-<span id="cb14-13"><a href="#cb14-13"></a>           <span class="kw">try</span> (var s = Cstring.<span class="fu">toCString</span>(urlStr)) {</span>
-<span id="cb14-14"><a href="#cb14-14"></a>               var url = s.<span class="fu">baseAddress</span>();</span>
-<span id="cb14-15"><a href="#cb14-15"></a>               <span class="fu">curl_easy_setopt</span>(curl, <span class="fu">CURLOPT_URL</span>(), url);</span>
-<span id="cb14-16"><a href="#cb14-16"></a>               <span class="dt">int</span> res = <span class="fu">curl_easy_perform</span>(curl);</span>
-<span id="cb14-17"><a href="#cb14-17"></a>               <span class="kw">if</span> (res != <span class="fu">CURLE_OK</span>()) {</span>
-<span id="cb14-18"><a href="#cb14-18"></a>                   <span class="fu">curl_easy_cleanup</span>(curl);</span>
-<span id="cb14-19"><a href="#cb14-19"></a>               }</span>
-<span id="cb14-20"><a href="#cb14-20"></a>           }</span>
-<span id="cb14-21"><a href="#cb14-21"></a>       }</span>
-<span id="cb14-22"><a href="#cb14-22"></a>       <span class="fu">curl_global_cleanup</span>();</span>
-<span id="cb14-23"><a href="#cb14-23"></a>   }</span>
-<span id="cb14-24"><a href="#cb14-24"></a>}</span></code></pre></div>
+<span id="cb14-6"><a href="#cb14-6"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.CSupport.*;</span></span>
+<span id="cb14-7"><a href="#cb14-7"></a></span>
+<span id="cb14-8"><a href="#cb14-8"></a><span class="kw">public</span> <span class="kw">class</span> CurlMain {</span>
+<span id="cb14-9"><a href="#cb14-9"></a>   <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
+<span id="cb14-10"><a href="#cb14-10"></a>       var urlStr = args[<span class="dv">0</span>];</span>
+<span id="cb14-11"><a href="#cb14-11"></a>       <span class="fu">curl_global_init</span>(<span class="fu">CURL_GLOBAL_DEFAULT</span>());</span>
+<span id="cb14-12"><a href="#cb14-12"></a>       var curl = <span class="fu">curl_easy_init</span>();</span>
+<span id="cb14-13"><a href="#cb14-13"></a>       <span class="kw">if</span>(!curl.<span class="fu">equals</span>(NULL)) {</span>
+<span id="cb14-14"><a href="#cb14-14"></a>           <span class="kw">try</span> (var s = <span class="fu">toCString</span>(urlStr)) {</span>
+<span id="cb14-15"><a href="#cb14-15"></a>               var url = s.<span class="fu">baseAddress</span>();</span>
+<span id="cb14-16"><a href="#cb14-16"></a>               <span class="fu">curl_easy_setopt</span>(curl, <span class="fu">CURLOPT_URL</span>(), url);</span>
+<span id="cb14-17"><a href="#cb14-17"></a>               <span class="dt">int</span> res = <span class="fu">curl_easy_perform</span>(curl);</span>
+<span id="cb14-18"><a href="#cb14-18"></a>               <span class="kw">if</span> (res != <span class="fu">CURLE_OK</span>()) {</span>
+<span id="cb14-19"><a href="#cb14-19"></a>                   <span class="fu">curl_easy_cleanup</span>(curl);</span>
+<span id="cb14-20"><a href="#cb14-20"></a>               }</span>
+<span id="cb14-21"><a href="#cb14-21"></a>           }</span>
+<span id="cb14-22"><a href="#cb14-22"></a>       }</span>
+<span id="cb14-23"><a href="#cb14-23"></a>       <span class="fu">curl_global_cleanup</span>();</span>
+<span id="cb14-24"><a href="#cb14-24"></a>   }</span>
+<span id="cb14-25"><a href="#cb14-25"></a>}</span></code></pre></div>
 <h3 id="running-the-java-code-that-uses-libcurl">Running the java code that uses libcurl</h3>
 <div class="sourceCode" id="cb15"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb15-1"><a href="#cb15-1"></a></span>
 <span id="cb15-2"><a href="#cb15-2"></a><span class="co"># run this shell script by passing a URL as first argument</span></span>
 <span id="cb15-3"><a href="#cb15-3"></a><span class="ex">java</span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \</span>
 <span id="cb15-4"><a href="#cb15-4"></a>    -Djava.library.path=/usr/lib CurlMain.java <span class="va">$*</span></span></code></pre></div>
@@ -312,82 +315,67 @@
 <span id="cb17-2"><a href="#cb17-2"></a><span class="ex">jextract</span> -C <span class="st">&quot;-D FORCE_OPENBLAS_COMPLEX_STRUCT&quot;</span> \</span>
 <span id="cb17-3"><a href="#cb17-3"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \</span>
 <span id="cb17-4"><a href="#cb17-4"></a>  -l openblas -t blas /usr/local/opt/openblas/include/cblas.h</span></code></pre></div>
 <h3 id="java-sample-code-that-uses-cblas-library">Java sample code that uses cblas library</h3>
 <div class="sourceCode" id="cb18"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb18-1"><a href="#cb18-1"></a></span>
-<span id="cb18-2"><a href="#cb18-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.NativeScope;</span></span>
-<span id="cb18-3"><a href="#cb18-3"></a><span class="kw">import</span><span class="im"> blas.*;</span></span>
-<span id="cb18-4"><a href="#cb18-4"></a><span class="kw">import static</span><span class="im"> blas.RuntimeHelper.*;</span></span>
-<span id="cb18-5"><a href="#cb18-5"></a><span class="kw">import static</span><span class="im"> blas.cblas_h.*;</span></span>
-<span id="cb18-6"><a href="#cb18-6"></a></span>
-<span id="cb18-7"><a href="#cb18-7"></a><span class="kw">public</span> <span class="kw">class</span> TestBlas {</span>
-<span id="cb18-8"><a href="#cb18-8"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
-<span id="cb18-9"><a href="#cb18-9"></a>        <span class="dt">int</span> Layout;</span>
-<span id="cb18-10"><a href="#cb18-10"></a>        <span class="dt">int</span> transa;</span>
-<span id="cb18-11"><a href="#cb18-11"></a></span>
-<span id="cb18-12"><a href="#cb18-12"></a>        <span class="dt">double</span> alpha, beta;</span>
-<span id="cb18-13"><a href="#cb18-13"></a>        <span class="dt">int</span> m, n, lda, incx, incy, i;</span>
+<span id="cb18-2"><a href="#cb18-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.MemoryAddress;</span></span>
+<span id="cb18-3"><a href="#cb18-3"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.MemoryAccess;</span></span>
+<span id="cb18-4"><a href="#cb18-4"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.NativeScope;</span></span>
+<span id="cb18-5"><a href="#cb18-5"></a><span class="kw">import</span><span class="im"> blas.*;</span></span>
+<span id="cb18-6"><a href="#cb18-6"></a><span class="kw">import static</span><span class="im"> blas.RuntimeHelper.*;</span></span>
+<span id="cb18-7"><a href="#cb18-7"></a><span class="kw">import static</span><span class="im"> blas.cblas_h.*;</span></span>
+<span id="cb18-8"><a href="#cb18-8"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.CSupport.*;</span></span>
+<span id="cb18-9"><a href="#cb18-9"></a></span>
+<span id="cb18-10"><a href="#cb18-10"></a><span class="kw">public</span> <span class="kw">class</span> TestBlas {</span>
+<span id="cb18-11"><a href="#cb18-11"></a>    <span class="kw">private</span> <span class="dt">static</span> <span class="dt">double</span> <span class="fu">getDouble</span>(MemoryAddress addr, <span class="dt">int</span> element) {</span>
+<span id="cb18-12"><a href="#cb18-12"></a>        <span class="kw">return</span> MemoryAccess.<span class="fu">getDouble</span>(addr, element*C_DOUBLE.<span class="fu">byteSize</span>());</span>
+<span id="cb18-13"><a href="#cb18-13"></a>    }</span>
 <span id="cb18-14"><a href="#cb18-14"></a></span>
-<span id="cb18-15"><a href="#cb18-15"></a>        Layout = <span class="fu">CblasColMajor</span>();</span>
-<span id="cb18-16"><a href="#cb18-16"></a>        transa = <span class="fu">CblasNoTrans</span>();</span>
-<span id="cb18-17"><a href="#cb18-17"></a></span>
-<span id="cb18-18"><a href="#cb18-18"></a>        m = <span class="dv">4</span>; <span class="co">/* Size of Column ( the number of rows ) */</span></span>
-<span id="cb18-19"><a href="#cb18-19"></a>        n = <span class="dv">4</span>; <span class="co">/* Size of Row ( the number of columns ) */</span></span>
-<span id="cb18-20"><a href="#cb18-20"></a>        lda = <span class="dv">4</span>; <span class="co">/* Leading dimension of 5 * 4 matrix is 5 */</span></span>
-<span id="cb18-21"><a href="#cb18-21"></a>        incx = <span class="dv">1</span>;</span>
-<span id="cb18-22"><a href="#cb18-22"></a>        incy = <span class="dv">1</span>;</span>
-<span id="cb18-23"><a href="#cb18-23"></a>        alpha = <span class="dv">1</span>;</span>
-<span id="cb18-24"><a href="#cb18-24"></a>        beta = <span class="dv">0</span>;</span>
-<span id="cb18-25"><a href="#cb18-25"></a></span>
-<span id="cb18-26"><a href="#cb18-26"></a>        <span class="kw">try</span> (var scope = NativeScope.<span class="fu">unboundedScope</span>()) {</span>
-<span id="cb18-27"><a href="#cb18-27"></a>            var a = Cdouble.<span class="fu">allocateArray</span>(m*n, scope);</span>
-<span id="cb18-28"><a href="#cb18-28"></a>            var x = Cdouble.<span class="fu">allocateArray</span>(n, scope);</span>
-<span id="cb18-29"><a href="#cb18-29"></a>            var y = Cdouble.<span class="fu">allocateArray</span>(n, scope);</span>
-<span id="cb18-30"><a href="#cb18-30"></a></span>
-<span id="cb18-31"><a href="#cb18-31"></a>            <span class="co">/* The elements of the first column */</span></span>
-<span id="cb18-32"><a href="#cb18-32"></a>            Cdouble.<span class="fu">set</span>(a, <span class="dv">0</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
-<span id="cb18-33"><a href="#cb18-33"></a>            Cdouble.<span class="fu">set</span>(a, <span class="dv">1</span>, <span class="fl">2.</span><span class="dv">0</span>);</span>
-<span id="cb18-34"><a href="#cb18-34"></a>            Cdouble.<span class="fu">set</span>(a, <span class="dv">2</span>, <span class="fl">3.</span><span class="dv">0</span>);</span>
-<span id="cb18-35"><a href="#cb18-35"></a>            Cdouble.<span class="fu">set</span>(a, <span class="dv">3</span>, <span class="fl">4.</span><span class="dv">0</span>);</span>
-<span id="cb18-36"><a href="#cb18-36"></a>            <span class="co">/* The elements of the second column */</span></span>
-<span id="cb18-37"><a href="#cb18-37"></a>            Cdouble.<span class="fu">set</span>(a, m, <span class="fl">1.</span><span class="dv">0</span>);</span>
-<span id="cb18-38"><a href="#cb18-38"></a>            Cdouble.<span class="fu">set</span>(a, m + <span class="dv">1</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
-<span id="cb18-39"><a href="#cb18-39"></a>            Cdouble.<span class="fu">set</span>(a, m + <span class="dv">2</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
-<span id="cb18-40"><a href="#cb18-40"></a>            Cdouble.<span class="fu">set</span>(a, m + <span class="dv">3</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
-<span id="cb18-41"><a href="#cb18-41"></a>            <span class="co">/* The elements of the third column */</span></span>
-<span id="cb18-42"><a href="#cb18-42"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">2</span>, <span class="fl">3.</span><span class="dv">0</span>);</span>
-<span id="cb18-43"><a href="#cb18-43"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">2</span> + <span class="dv">1</span>, <span class="fl">4.</span><span class="dv">0</span>);</span>
-<span id="cb18-44"><a href="#cb18-44"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">2</span> + <span class="dv">2</span>, <span class="fl">5.</span><span class="dv">0</span>);</span>
-<span id="cb18-45"><a href="#cb18-45"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">2</span> + <span class="dv">3</span>, <span class="fl">6.</span><span class="dv">0</span>);</span>
-<span id="cb18-46"><a href="#cb18-46"></a>            <span class="co">/* The elements of the fourth column */</span></span>
-<span id="cb18-47"><a href="#cb18-47"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">3</span>, <span class="fl">5.</span><span class="dv">0</span>);</span>
-<span id="cb18-48"><a href="#cb18-48"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">3</span> + <span class="dv">1</span>, <span class="fl">6.</span><span class="dv">0</span>);</span>
-<span id="cb18-49"><a href="#cb18-49"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">3</span> + <span class="dv">2</span>, <span class="fl">7.</span><span class="dv">0</span>);</span>
-<span id="cb18-50"><a href="#cb18-50"></a>            Cdouble.<span class="fu">set</span>(a, m*<span class="dv">3</span> + <span class="dv">3</span>, <span class="fl">8.</span><span class="dv">0</span>);</span>
-<span id="cb18-51"><a href="#cb18-51"></a>            <span class="co">/* The elemetns of x and y */</span></span>
-<span id="cb18-52"><a href="#cb18-52"></a>            Cdouble.<span class="fu">set</span>(x, <span class="dv">0</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
-<span id="cb18-53"><a href="#cb18-53"></a>            Cdouble.<span class="fu">set</span>(x, <span class="dv">1</span>, <span class="fl">2.</span><span class="dv">0</span>);</span>
-<span id="cb18-54"><a href="#cb18-54"></a>            Cdouble.<span class="fu">set</span>(x, <span class="dv">2</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
-<span id="cb18-55"><a href="#cb18-55"></a>            Cdouble.<span class="fu">set</span>(x, <span class="dv">3</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
-<span id="cb18-56"><a href="#cb18-56"></a>            Cdouble.<span class="fu">set</span>(y, <span class="dv">0</span>, <span class="fl">0.</span><span class="dv">0</span>);</span>
-<span id="cb18-57"><a href="#cb18-57"></a>            Cdouble.<span class="fu">set</span>(y, <span class="dv">1</span>, <span class="fl">0.</span><span class="dv">0</span>);</span>
-<span id="cb18-58"><a href="#cb18-58"></a>            Cdouble.<span class="fu">set</span>(y, <span class="dv">2</span>, <span class="fl">0.</span><span class="dv">0</span>);</span>
-<span id="cb18-59"><a href="#cb18-59"></a>            Cdouble.<span class="fu">set</span>(y, <span class="dv">3</span>, <span class="fl">0.</span><span class="dv">0</span>);</span>
-<span id="cb18-60"><a href="#cb18-60"></a></span>
-<span id="cb18-61"><a href="#cb18-61"></a>            <span class="fu">cblas_dgemv</span>(Layout, transa, m, n, alpha, a, lda, x, incx, beta, y, incy);</span>
-<span id="cb18-62"><a href="#cb18-62"></a>            <span class="co">/* Print y */</span></span>
-<span id="cb18-63"><a href="#cb18-63"></a>            <span class="kw">for</span> (i = <span class="dv">0</span>; i &lt; n; i++) {</span>
-<span id="cb18-64"><a href="#cb18-64"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">print</span>(<span class="bu">String</span><span class="fu">.format</span>(<span class="st">&quot; y</span><span class="sc">%d</span><span class="st"> = </span><span class="sc">%f\n</span><span class="st">&quot;</span>, i, Cdouble.<span class="fu">get</span>(y, (<span class="dt">long</span>)i)));</span>
-<span id="cb18-65"><a href="#cb18-65"></a>            }</span>
-<span id="cb18-66"><a href="#cb18-66"></a>        }</span>
-<span id="cb18-67"><a href="#cb18-67"></a>    }</span>
-<span id="cb18-68"><a href="#cb18-68"></a>}</span></code></pre></div>
+<span id="cb18-15"><a href="#cb18-15"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
+<span id="cb18-16"><a href="#cb18-16"></a>        <span class="dt">int</span> Layout;</span>
+<span id="cb18-17"><a href="#cb18-17"></a>        <span class="dt">int</span> transa;</span>
+<span id="cb18-18"><a href="#cb18-18"></a></span>
+<span id="cb18-19"><a href="#cb18-19"></a>        <span class="dt">double</span> alpha, beta;</span>
+<span id="cb18-20"><a href="#cb18-20"></a>        <span class="dt">int</span> m, n, lda, incx, incy, i;</span>
+<span id="cb18-21"><a href="#cb18-21"></a></span>
+<span id="cb18-22"><a href="#cb18-22"></a>        Layout = <span class="fu">CblasColMajor</span>();</span>
+<span id="cb18-23"><a href="#cb18-23"></a>        transa = <span class="fu">CblasNoTrans</span>();</span>
+<span id="cb18-24"><a href="#cb18-24"></a></span>
+<span id="cb18-25"><a href="#cb18-25"></a>        m = <span class="dv">4</span>; <span class="co">/* Size of Column ( the number of rows ) */</span></span>
+<span id="cb18-26"><a href="#cb18-26"></a>        n = <span class="dv">4</span>; <span class="co">/* Size of Row ( the number of columns ) */</span></span>
+<span id="cb18-27"><a href="#cb18-27"></a>        lda = <span class="dv">4</span>; <span class="co">/* Leading dimension of 5 * 4 matrix is 5 */</span></span>
+<span id="cb18-28"><a href="#cb18-28"></a>        incx = <span class="dv">1</span>;</span>
+<span id="cb18-29"><a href="#cb18-29"></a>        incy = <span class="dv">1</span>;</span>
+<span id="cb18-30"><a href="#cb18-30"></a>        alpha = <span class="dv">1</span>;</span>
+<span id="cb18-31"><a href="#cb18-31"></a>        beta = <span class="dv">0</span>;</span>
+<span id="cb18-32"><a href="#cb18-32"></a></span>
+<span id="cb18-33"><a href="#cb18-33"></a>        <span class="kw">try</span> (var scope = NativeScope.<span class="fu">unboundedScope</span>()) {</span>
+<span id="cb18-34"><a href="#cb18-34"></a>            var a = scope.<span class="fu">allocateArray</span>(C_DOUBLE, <span class="kw">new</span> <span class="dt">double</span>[] {</span>
+<span id="cb18-35"><a href="#cb18-35"></a>                <span class="fl">1.</span><span class="dv">0</span>, <span class="fl">2.</span><span class="dv">0</span>, <span class="fl">3.</span><span class="dv">0</span>, <span class="fl">4.</span><span class="dv">0</span>,</span>
+<span id="cb18-36"><a href="#cb18-36"></a>                <span class="fl">1.</span><span class="dv">0</span>, <span class="fl">1.</span><span class="dv">0</span>, <span class="fl">1.</span><span class="dv">0</span>, <span class="fl">1.</span><span class="dv">0</span>,</span>
+<span id="cb18-37"><a href="#cb18-37"></a>                <span class="fl">3.</span><span class="dv">0</span>, <span class="fl">4.</span><span class="dv">0</span>, <span class="fl">5.</span><span class="dv">0</span>, <span class="fl">6.</span><span class="dv">0</span>,</span>
+<span id="cb18-38"><a href="#cb18-38"></a>                <span class="fl">5.</span><span class="dv">0</span>, <span class="fl">6.</span><span class="dv">0</span>, <span class="fl">7.</span><span class="dv">0</span>, <span class="fl">8.</span><span class="dv">0</span></span>
+<span id="cb18-39"><a href="#cb18-39"></a>            });</span>
+<span id="cb18-40"><a href="#cb18-40"></a>            var x = scope.<span class="fu">allocateArray</span>(C_DOUBLE, <span class="kw">new</span> <span class="dt">double</span>[] {</span>
+<span id="cb18-41"><a href="#cb18-41"></a>                <span class="fl">1.</span><span class="dv">0</span>, <span class="fl">2.</span><span class="dv">0</span>, <span class="fl">1.</span><span class="dv">0</span>, <span class="fl">1.</span><span class="dv">0</span></span>
+<span id="cb18-42"><a href="#cb18-42"></a>            });</span>
+<span id="cb18-43"><a href="#cb18-43"></a>            var y = scope.<span class="fu">allocateArray</span>(C_DOUBLE, n);</span>
+<span id="cb18-44"><a href="#cb18-44"></a></span>
+<span id="cb18-45"><a href="#cb18-45"></a>            <span class="fu">cblas_dgemv</span>(Layout, transa, m, n, alpha, a, lda, x, incx, beta, y, incy);</span>
+<span id="cb18-46"><a href="#cb18-46"></a>            <span class="co">/* Print y */</span></span>
+<span id="cb18-47"><a href="#cb18-47"></a>            <span class="kw">for</span> (i = <span class="dv">0</span>; i &lt; n; i++) {</span>
+<span id="cb18-48"><a href="#cb18-48"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">print</span>(<span class="bu">String</span><span class="fu">.format</span>(<span class="st">&quot; y</span><span class="sc">%d</span><span class="st"> = </span><span class="sc">%f\n</span><span class="st">&quot;</span>, i, <span class="fu">getDouble</span>(y, i)));</span>
+<span id="cb18-49"><a href="#cb18-49"></a>            }</span>
+<span id="cb18-50"><a href="#cb18-50"></a>        }</span>
+<span id="cb18-51"><a href="#cb18-51"></a>    }</span>
+<span id="cb18-52"><a href="#cb18-52"></a>}</span></code></pre></div>
 <h3 id="compiling-and-running-the-above-blas-sample">Compiling and running the above BLAS sample</h3>
 <div class="sourceCode" id="cb19"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb19-1"><a href="#cb19-1"></a></span>
-<span id="cb19-2"><a href="#cb19-2"></a><span class="ex">java</span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \</span>
-<span id="cb19-3"><a href="#cb19-3"></a>    -Djava.library.path=/usr/local/opt/openblas/lib \</span>
-<span id="cb19-4"><a href="#cb19-4"></a>    TestBlas.java</span></code></pre></div>
+<span id="cb19-2"><a href="#cb19-2"></a><span class="ex">jextract</span> \</span>
+<span id="cb19-3"><a href="#cb19-3"></a>  -C <span class="st">&quot;-D FORCE_OPENBLAS_COMPLEX_STRUCT&quot;</span> \</span>
+<span id="cb19-4"><a href="#cb19-4"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \</span>
+<span id="cb19-5"><a href="#cb19-5"></a>  -l openblas -t blas /usr/local/opt/openblas/include/cblas.h</span></code></pre></div>
 <h2 id="using-lapack-library-mac-os">Using LAPACK library (Mac OS)</h2>
 <p>On Mac OS, lapack is installed under /usr/local/opt/lapack directory.</p>
 <h3 id="jextracting-lapacke.h">jextracting lapacke.h</h3>
 <div class="sourceCode" id="cb20"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb20-1"><a href="#cb20-1"></a></span>
 <span id="cb20-2"><a href="#cb20-2"></a><span class="ex">jextract</span> \</span>
@@ -395,109 +383,114 @@
 <span id="cb20-4"><a href="#cb20-4"></a>   -l lapacke -t lapack \</span>
 <span id="cb20-5"><a href="#cb20-5"></a>   --filter lapacke.h \</span>
 <span id="cb20-6"><a href="#cb20-6"></a>   /usr/local/opt/lapack/include/lapacke.h</span></code></pre></div>
 <h3 id="java-sample-code-that-uses-lapack-library">Java sample code that uses LAPACK library</h3>
 <div class="sourceCode" id="cb21"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb21-1"><a href="#cb21-1"></a></span>
-<span id="cb21-2"><a href="#cb21-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.MemoryAddress;</span></span>
-<span id="cb21-3"><a href="#cb21-3"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.NativeScope;</span></span>
-<span id="cb21-4"><a href="#cb21-4"></a><span class="kw">import</span><span class="im"> lapack.*;</span></span>
-<span id="cb21-5"><a href="#cb21-5"></a><span class="kw">import static</span><span class="im"> lapack.lapacke_h.*;</span></span>
-<span id="cb21-6"><a href="#cb21-6"></a></span>
-<span id="cb21-7"><a href="#cb21-7"></a><span class="kw">public</span> <span class="kw">class</span> TestLapack {</span>
-<span id="cb21-8"><a href="#cb21-8"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
-<span id="cb21-9"><a href="#cb21-9"></a></span>
-<span id="cb21-10"><a href="#cb21-10"></a>        <span class="co">/* Locals */</span></span>
-<span id="cb21-11"><a href="#cb21-11"></a>        <span class="kw">try</span> (var scope = NativeScope.<span class="fu">unboundedScope</span>()) {</span>
-<span id="cb21-12"><a href="#cb21-12"></a>            var A = Cdouble.<span class="fu">allocateArray</span>(<span class="kw">new</span> <span class="dt">double</span>[]{</span>
-<span id="cb21-13"><a href="#cb21-13"></a>                    <span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">1</span>, <span class="dv">3</span>, <span class="dv">5</span>, <span class="dv">2</span>, <span class="dv">4</span>, <span class="dv">1</span>, <span class="dv">4</span>, <span class="dv">2</span>, <span class="dv">5</span>, <span class="dv">3</span></span>
-<span id="cb21-14"><a href="#cb21-14"></a>            }, scope);</span>
-<span id="cb21-15"><a href="#cb21-15"></a>            var b = Cdouble.<span class="fu">allocateArray</span>(<span class="kw">new</span> <span class="dt">double</span>[]{</span>
-<span id="cb21-16"><a href="#cb21-16"></a>                    -<span class="dv">10</span>, <span class="dv">12</span>, <span class="dv">14</span>, <span class="dv">16</span>, <span class="dv">18</span>, -<span class="dv">3</span>, <span class="dv">14</span>, <span class="dv">12</span>, <span class="dv">16</span>, <span class="dv">16</span></span>
-<span id="cb21-17"><a href="#cb21-17"></a>            }, scope);</span>
-<span id="cb21-18"><a href="#cb21-18"></a>            <span class="dt">int</span> info, m, n, lda, ldb, nrhs;</span>
-<span id="cb21-19"><a href="#cb21-19"></a></span>
-<span id="cb21-20"><a href="#cb21-20"></a>            <span class="co">/* Initialization */</span></span>
-<span id="cb21-21"><a href="#cb21-21"></a>            m = <span class="dv">5</span>;</span>
-<span id="cb21-22"><a href="#cb21-22"></a>            n = <span class="dv">3</span>;</span>
-<span id="cb21-23"><a href="#cb21-23"></a>            nrhs = <span class="dv">2</span>;</span>
-<span id="cb21-24"><a href="#cb21-24"></a>            lda = <span class="dv">5</span>;</span>
-<span id="cb21-25"><a href="#cb21-25"></a>            ldb = <span class="dv">5</span>;</span>
-<span id="cb21-26"><a href="#cb21-26"></a></span>
-<span id="cb21-27"><a href="#cb21-27"></a>            <span class="co">/* Print Entry Matrix */</span></span>
-<span id="cb21-28"><a href="#cb21-28"></a>            <span class="fu">print_matrix_colmajor</span>(<span class="st">&quot;Entry Matrix A&quot;</span>, m, n, A, lda );</span>
-<span id="cb21-29"><a href="#cb21-29"></a>            <span class="co">/* Print Right Rand Side */</span></span>
-<span id="cb21-30"><a href="#cb21-30"></a>            <span class="fu">print_matrix_colmajor</span>(<span class="st">&quot;Right Hand Side b&quot;</span>, n, nrhs, b, ldb );</span>
-<span id="cb21-31"><a href="#cb21-31"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>();</span>
-<span id="cb21-32"><a href="#cb21-32"></a></span>
-<span id="cb21-33"><a href="#cb21-33"></a>            <span class="co">/* Executable statements */</span></span>
-<span id="cb21-34"><a href="#cb21-34"></a>            <span class="co">//            printf( &quot;LAPACKE_dgels (col-major, high-level) Example Program Results\n&quot; );</span></span>
-<span id="cb21-35"><a href="#cb21-35"></a>            <span class="co">/* Solve least squares problem*/</span></span>
-<span id="cb21-36"><a href="#cb21-36"></a>            info = <span class="fu">LAPACKE_dgels</span>(<span class="fu">LAPACK_COL_MAJOR</span>(), (<span class="dt">byte</span>)<span class="ch">&#39;N&#39;</span>, m, n, nrhs, A, lda, b, ldb);</span>
-<span id="cb21-37"><a href="#cb21-37"></a></span>
-<span id="cb21-38"><a href="#cb21-38"></a>            <span class="co">/* Print Solution */</span></span>
-<span id="cb21-39"><a href="#cb21-39"></a>            <span class="fu">print_matrix_colmajor</span>(<span class="st">&quot;Solution&quot;</span>, n, nrhs, b, ldb );</span>
-<span id="cb21-40"><a href="#cb21-40"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>();</span>
-<span id="cb21-41"><a href="#cb21-41"></a>            <span class="bu">System</span>.<span class="fu">exit</span>(info);</span>
-<span id="cb21-42"><a href="#cb21-42"></a>        }</span>
-<span id="cb21-43"><a href="#cb21-43"></a>    }</span>
-<span id="cb21-44"><a href="#cb21-44"></a></span>
-<span id="cb21-45"><a href="#cb21-45"></a>    <span class="dt">static</span> <span class="dt">void</span> <span class="fu">print_matrix_colmajor</span>(<span class="bu">String</span> msg, <span class="dt">int</span> m, <span class="dt">int</span> n, MemoryAddress mat, <span class="dt">int</span> ldm) {</span>
-<span id="cb21-46"><a href="#cb21-46"></a>        <span class="dt">int</span> i, j;</span>
-<span id="cb21-47"><a href="#cb21-47"></a>        <span class="bu">System</span>.<span class="fu">out.printf</span>(<span class="st">&quot;</span><span class="sc">\n</span><span class="st"> </span><span class="sc">%s\n</span><span class="st">&quot;</span>, msg);</span>
-<span id="cb21-48"><a href="#cb21-48"></a></span>
-<span id="cb21-49"><a href="#cb21-49"></a>        <span class="kw">for</span>( i = <span class="dv">0</span>; i &lt; m; i++ ) {</span>
-<span id="cb21-50"><a href="#cb21-50"></a>            <span class="kw">for</span>( j = <span class="dv">0</span>; j &lt; n; j++ ) <span class="bu">System</span>.<span class="fu">out.printf</span>(<span class="st">&quot; </span><span class="sc">%6.2f</span><span class="st">&quot;</span>, Cdouble.<span class="fu">get</span>(mat, i+j*ldm));</span>
-<span id="cb21-51"><a href="#cb21-51"></a>            <span class="bu">System</span>.<span class="fu">out.printf</span>( <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span> );</span>
-<span id="cb21-52"><a href="#cb21-52"></a>        }</span>
-<span id="cb21-53"><a href="#cb21-53"></a>    }</span>
-<span id="cb21-54"><a href="#cb21-54"></a>}</span></code></pre></div>
+<span id="cb21-2"><a href="#cb21-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.MemoryAccess;</span></span>
+<span id="cb21-3"><a href="#cb21-3"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.MemoryAddress;</span></span>
+<span id="cb21-4"><a href="#cb21-4"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.NativeScope;</span></span>
+<span id="cb21-5"><a href="#cb21-5"></a><span class="kw">import</span><span class="im"> lapack.*;</span></span>
+<span id="cb21-6"><a href="#cb21-6"></a><span class="kw">import static</span><span class="im"> lapack.lapacke_h.*;</span></span>
+<span id="cb21-7"><a href="#cb21-7"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.CSupport.*;</span></span>
+<span id="cb21-8"><a href="#cb21-8"></a></span>
+<span id="cb21-9"><a href="#cb21-9"></a><span class="kw">public</span> <span class="kw">class</span> TestLapack {</span>
+<span id="cb21-10"><a href="#cb21-10"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
+<span id="cb21-11"><a href="#cb21-11"></a></span>
+<span id="cb21-12"><a href="#cb21-12"></a>        <span class="co">/* Locals */</span></span>
+<span id="cb21-13"><a href="#cb21-13"></a>        <span class="kw">try</span> (var scope = NativeScope.<span class="fu">unboundedScope</span>()) {</span>
+<span id="cb21-14"><a href="#cb21-14"></a>            var A = scope.<span class="fu">allocateArray</span>(C_DOUBLE, <span class="kw">new</span> <span class="dt">double</span>[]{</span>
+<span id="cb21-15"><a href="#cb21-15"></a>                    <span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">1</span>, <span class="dv">3</span>, <span class="dv">5</span>, <span class="dv">2</span>, <span class="dv">4</span>, <span class="dv">1</span>, <span class="dv">4</span>, <span class="dv">2</span>, <span class="dv">5</span>, <span class="dv">3</span></span>
+<span id="cb21-16"><a href="#cb21-16"></a>            });</span>
+<span id="cb21-17"><a href="#cb21-17"></a>            var b = scope.<span class="fu">allocateArray</span>(C_DOUBLE, <span class="kw">new</span> <span class="dt">double</span>[]{</span>
+<span id="cb21-18"><a href="#cb21-18"></a>                    -<span class="dv">10</span>, <span class="dv">12</span>, <span class="dv">14</span>, <span class="dv">16</span>, <span class="dv">18</span>, -<span class="dv">3</span>, <span class="dv">14</span>, <span class="dv">12</span>, <span class="dv">16</span>, <span class="dv">16</span></span>
+<span id="cb21-19"><a href="#cb21-19"></a>            });</span>
+<span id="cb21-20"><a href="#cb21-20"></a>            <span class="dt">int</span> info, m, n, lda, ldb, nrhs;</span>
+<span id="cb21-21"><a href="#cb21-21"></a></span>
+<span id="cb21-22"><a href="#cb21-22"></a>            <span class="co">/* Initialization */</span></span>
+<span id="cb21-23"><a href="#cb21-23"></a>            m = <span class="dv">5</span>;</span>
+<span id="cb21-24"><a href="#cb21-24"></a>            n = <span class="dv">3</span>;</span>
+<span id="cb21-25"><a href="#cb21-25"></a>            nrhs = <span class="dv">2</span>;</span>
+<span id="cb21-26"><a href="#cb21-26"></a>            lda = <span class="dv">5</span>;</span>
+<span id="cb21-27"><a href="#cb21-27"></a>            ldb = <span class="dv">5</span>;</span>
+<span id="cb21-28"><a href="#cb21-28"></a></span>
+<span id="cb21-29"><a href="#cb21-29"></a>            <span class="co">/* Print Entry Matrix */</span></span>
+<span id="cb21-30"><a href="#cb21-30"></a>            <span class="fu">print_matrix_colmajor</span>(<span class="st">&quot;Entry Matrix A&quot;</span>, m, n, A, lda );</span>
+<span id="cb21-31"><a href="#cb21-31"></a>            <span class="co">/* Print Right Rand Side */</span></span>
+<span id="cb21-32"><a href="#cb21-32"></a>            <span class="fu">print_matrix_colmajor</span>(<span class="st">&quot;Right Hand Side b&quot;</span>, n, nrhs, b, ldb );</span>
+<span id="cb21-33"><a href="#cb21-33"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>();</span>
+<span id="cb21-34"><a href="#cb21-34"></a></span>
+<span id="cb21-35"><a href="#cb21-35"></a>            <span class="co">/* Executable statements */</span></span>
+<span id="cb21-36"><a href="#cb21-36"></a>            <span class="co">//            printf( &quot;LAPACKE_dgels (col-major, high-level) Example Program Results\n&quot; );</span></span>
+<span id="cb21-37"><a href="#cb21-37"></a>            <span class="co">/* Solve least squares problem*/</span></span>
+<span id="cb21-38"><a href="#cb21-38"></a>            info = <span class="fu">LAPACKE_dgels</span>(<span class="fu">LAPACK_COL_MAJOR</span>(), (<span class="dt">byte</span>)<span class="ch">&#39;N&#39;</span>, m, n, nrhs, A, lda, b, ldb);</span>
+<span id="cb21-39"><a href="#cb21-39"></a></span>
+<span id="cb21-40"><a href="#cb21-40"></a>            <span class="co">/* Print Solution */</span></span>
+<span id="cb21-41"><a href="#cb21-41"></a>            <span class="fu">print_matrix_colmajor</span>(<span class="st">&quot;Solution&quot;</span>, n, nrhs, b, ldb );</span>
+<span id="cb21-42"><a href="#cb21-42"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>();</span>
+<span id="cb21-43"><a href="#cb21-43"></a>            <span class="bu">System</span>.<span class="fu">exit</span>(info);</span>
+<span id="cb21-44"><a href="#cb21-44"></a>        }</span>
+<span id="cb21-45"><a href="#cb21-45"></a>    }</span>
+<span id="cb21-46"><a href="#cb21-46"></a></span>
+<span id="cb21-47"><a href="#cb21-47"></a>    <span class="dt">static</span> <span class="dt">void</span> <span class="fu">print_matrix_colmajor</span>(<span class="bu">String</span> msg, <span class="dt">int</span> m, <span class="dt">int</span> n, MemoryAddress mat, <span class="dt">int</span> ldm) {</span>
+<span id="cb21-48"><a href="#cb21-48"></a>        <span class="dt">int</span> i, j;</span>
+<span id="cb21-49"><a href="#cb21-49"></a>        <span class="bu">System</span>.<span class="fu">out.printf</span>(<span class="st">&quot;</span><span class="sc">\n</span><span class="st"> </span><span class="sc">%s\n</span><span class="st">&quot;</span>, msg);</span>
+<span id="cb21-50"><a href="#cb21-50"></a></span>
+<span id="cb21-51"><a href="#cb21-51"></a>        <span class="kw">for</span>( i = <span class="dv">0</span>; i &lt; m; i++ ) {</span>
+<span id="cb21-52"><a href="#cb21-52"></a>            <span class="kw">for</span>( j = <span class="dv">0</span>; j &lt; n; j++ ) <span class="bu">System</span>.<span class="fu">out.printf</span>(<span class="st">&quot; </span><span class="sc">%6.2f</span><span class="st">&quot;</span>, MemoryAccess.<span class="fu">getDouble</span>(mat, C_DOUBLE.<span class="fu">byteSize</span>()*(i+j*ldm)));</span>
+<span id="cb21-53"><a href="#cb21-53"></a>            <span class="bu">System</span>.<span class="fu">out.printf</span>( <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span> );</span>
+<span id="cb21-54"><a href="#cb21-54"></a>        }</span>
+<span id="cb21-55"><a href="#cb21-55"></a>    }</span>
+<span id="cb21-56"><a href="#cb21-56"></a>}</span></code></pre></div>
 <h3 id="compiling-and-running-the-above-lapack-sample">Compiling and running the above LAPACK sample</h3>
 <div class="sourceCode" id="cb22"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb22-1"><a href="#cb22-1"></a></span>
 <span id="cb22-2"><a href="#cb22-2"></a><span class="ex">java</span> -Dforeign.restricted=permit \</span>
 <span id="cb22-3"><a href="#cb22-3"></a>    --add-modules jdk.incubator.foreign \</span>
 <span id="cb22-4"><a href="#cb22-4"></a>    -Djava.library.path=/usr/local/opt/lapack/lib \</span>
 <span id="cb22-5"><a href="#cb22-5"></a>    TestLapack.java</span></code></pre></div>
 <h2 id="using-libproc-library-to-list-processes-from-java-mac-os">Using libproc library to list processes from Java (Mac OS)</h2>
 <h3 id="jextract-libproc.h">jextract libproc.h</h3>
 <div class="sourceCode" id="cb23"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb23-1"><a href="#cb23-1"></a></span>
-<span id="cb23-2"><a href="#cb23-2"></a><span class="ex">jextract</span> -t org.unix \</span>
-<span id="cb23-3"><a href="#cb23-3"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \</span>
-<span id="cb23-4"><a href="#cb23-4"></a>  --filter libproc.h \</span>
-<span id="cb23-5"><a href="#cb23-5"></a>  /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libproc.h</span></code></pre></div>
+<span id="cb23-2"><a href="#cb23-2"></a><span class="ex">jextract</span> \</span>
+<span id="cb23-3"><a href="#cb23-3"></a>  -t org.unix \</span>
+<span id="cb23-4"><a href="#cb23-4"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \</span>
+<span id="cb23-5"><a href="#cb23-5"></a>  --filter libproc.h \</span>
+<span id="cb23-6"><a href="#cb23-6"></a>  /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libproc.h</span></code></pre></div>
 <h3 id="java-program-that-uses-libproc-to-list-processes">Java program that uses libproc to list processes</h3>
 <div class="sourceCode" id="cb24"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb24-1"><a href="#cb24-1"></a></span>
-<span id="cb24-2"><a href="#cb24-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.NativeScope;</span></span>
-<span id="cb24-3"><a href="#cb24-3"></a><span class="kw">import</span><span class="im"> org.unix.*;</span></span>
-<span id="cb24-4"><a href="#cb24-4"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
-<span id="cb24-5"><a href="#cb24-5"></a><span class="kw">import static</span><span class="im"> org.unix.libproc_h.*;</span></span>
-<span id="cb24-6"><a href="#cb24-6"></a></span>
-<span id="cb24-7"><a href="#cb24-7"></a><span class="kw">public</span> <span class="kw">class</span> LibprocMain {</span>
-<span id="cb24-8"><a href="#cb24-8"></a>    <span class="kw">private</span> <span class="dt">static</span> <span class="dt">final</span> <span class="dt">int</span> NAME_BUF_MAX = <span class="dv">256</span>;</span>
-<span id="cb24-9"><a href="#cb24-9"></a></span>
-<span id="cb24-10"><a href="#cb24-10"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
-<span id="cb24-11"><a href="#cb24-11"></a>        <span class="kw">try</span> (var scope = NativeScope.<span class="fu">unboundedScope</span>()) {</span>
-<span id="cb24-12"><a href="#cb24-12"></a>            <span class="co">// get the number of processes</span></span>
-<span id="cb24-13"><a href="#cb24-13"></a>            <span class="dt">int</span> numPids = <span class="fu">proc_listallpids</span>(NULL, <span class="dv">0</span>);</span>
-<span id="cb24-14"><a href="#cb24-14"></a>            <span class="co">// allocate an array</span></span>
-<span id="cb24-15"><a href="#cb24-15"></a>            var pids = Cint.<span class="fu">allocateArray</span>(numPids, scope);</span>
-<span id="cb24-16"><a href="#cb24-16"></a>            <span class="co">// list all the pids into the native array</span></span>
-<span id="cb24-17"><a href="#cb24-17"></a>            <span class="fu">proc_listallpids</span>(pids, numPids);</span>
-<span id="cb24-18"><a href="#cb24-18"></a>            <span class="co">// convert native array to java array</span></span>
-<span id="cb24-19"><a href="#cb24-19"></a>            <span class="dt">int</span>[] jpids = Cint.<span class="fu">toJavaArray</span>(pids.<span class="fu">segment</span>());</span>
-<span id="cb24-20"><a href="#cb24-20"></a>            <span class="co">// buffer for process name</span></span>
-<span id="cb24-21"><a href="#cb24-21"></a>            var nameBuf = Cchar.<span class="fu">allocateArray</span>(NAME_BUF_MAX,scope);</span>
-<span id="cb24-22"><a href="#cb24-22"></a>            <span class="kw">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; jpids.<span class="fu">length</span>; i++) {</span>
-<span id="cb24-23"><a href="#cb24-23"></a>                <span class="dt">int</span> pid = jpids[i];</span>
-<span id="cb24-24"><a href="#cb24-24"></a>                <span class="co">// get the process name</span></span>
-<span id="cb24-25"><a href="#cb24-25"></a>                <span class="fu">proc_name</span>(pid, nameBuf, NAME_BUF_MAX);</span>
-<span id="cb24-26"><a href="#cb24-26"></a>                <span class="bu">String</span> procName = Cstring.<span class="fu">toJavaString</span>(nameBuf);</span>
-<span id="cb24-27"><a href="#cb24-27"></a>                <span class="co">// print pid and process name</span></span>
-<span id="cb24-28"><a href="#cb24-28"></a>                <span class="bu">System</span>.<span class="fu">out.printf</span>(<span class="st">&quot;</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%s\n</span><span class="st">&quot;</span>, pid, procName);</span>
-<span id="cb24-29"><a href="#cb24-29"></a>            }</span>
-<span id="cb24-30"><a href="#cb24-30"></a>        }</span>
-<span id="cb24-31"><a href="#cb24-31"></a>    }</span>
-<span id="cb24-32"><a href="#cb24-32"></a>}</span></code></pre></div>
+<span id="cb24-2"><a href="#cb24-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.CSupport;</span></span>
+<span id="cb24-3"><a href="#cb24-3"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.MemorySegment;</span></span>
+<span id="cb24-4"><a href="#cb24-4"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.NativeScope;</span></span>
+<span id="cb24-5"><a href="#cb24-5"></a><span class="kw">import</span><span class="im"> org.unix.*;</span></span>
+<span id="cb24-6"><a href="#cb24-6"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
+<span id="cb24-7"><a href="#cb24-7"></a><span class="kw">import static</span><span class="im"> org.unix.libproc_h.*;</span></span>
+<span id="cb24-8"><a href="#cb24-8"></a></span>
+<span id="cb24-9"><a href="#cb24-9"></a><span class="kw">public</span> <span class="kw">class</span> LibprocMain {</span>
+<span id="cb24-10"><a href="#cb24-10"></a>    <span class="kw">private</span> <span class="dt">static</span> <span class="dt">final</span> <span class="dt">int</span> NAME_BUF_MAX = <span class="dv">256</span>;</span>
+<span id="cb24-11"><a href="#cb24-11"></a></span>
+<span id="cb24-12"><a href="#cb24-12"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
+<span id="cb24-13"><a href="#cb24-13"></a>        <span class="kw">try</span> (var scope = NativeScope.<span class="fu">unboundedScope</span>()) {</span>
+<span id="cb24-14"><a href="#cb24-14"></a>            <span class="co">// get the number of processes</span></span>
+<span id="cb24-15"><a href="#cb24-15"></a>            <span class="dt">int</span> numPids = <span class="fu">proc_listallpids</span>(NULL, <span class="dv">0</span>);</span>
+<span id="cb24-16"><a href="#cb24-16"></a>            <span class="co">// allocate an array</span></span>
+<span id="cb24-17"><a href="#cb24-17"></a>            var pids = scope.<span class="fu">allocateArray</span>(CSupport.<span class="fu">C_INT</span>, numPids);</span>
+<span id="cb24-18"><a href="#cb24-18"></a>            <span class="co">// list all the pids into the native array</span></span>
+<span id="cb24-19"><a href="#cb24-19"></a>            <span class="fu">proc_listallpids</span>(pids, numPids);</span>
+<span id="cb24-20"><a href="#cb24-20"></a>            <span class="co">// convert native array to java array</span></span>
+<span id="cb24-21"><a href="#cb24-21"></a>            <span class="dt">int</span>[] jpids = pids.<span class="fu">segment</span>().<span class="fu">toIntArray</span>();</span>
+<span id="cb24-22"><a href="#cb24-22"></a>            <span class="co">// buffer for process name</span></span>
+<span id="cb24-23"><a href="#cb24-23"></a>            var nameBuf = scope.<span class="fu">allocateArray</span>(CSupport.<span class="fu">C_CHAR</span>, NAME_BUF_MAX);</span>
+<span id="cb24-24"><a href="#cb24-24"></a>            <span class="kw">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; jpids.<span class="fu">length</span>; i++) {</span>
+<span id="cb24-25"><a href="#cb24-25"></a>                <span class="dt">int</span> pid = jpids[i];</span>
+<span id="cb24-26"><a href="#cb24-26"></a>                <span class="co">// get the process name</span></span>
+<span id="cb24-27"><a href="#cb24-27"></a>                <span class="fu">proc_name</span>(pid, nameBuf, NAME_BUF_MAX);</span>
+<span id="cb24-28"><a href="#cb24-28"></a>                <span class="bu">String</span> procName = CSupport.<span class="fu">toJavaString</span>(nameBuf);</span>
+<span id="cb24-29"><a href="#cb24-29"></a>                <span class="co">// print pid and process name</span></span>
+<span id="cb24-30"><a href="#cb24-30"></a>                <span class="bu">System</span>.<span class="fu">out.printf</span>(<span class="st">&quot;</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%s\n</span><span class="st">&quot;</span>, pid, procName);</span>
+<span id="cb24-31"><a href="#cb24-31"></a>            }</span>
+<span id="cb24-32"><a href="#cb24-32"></a>        }</span>
+<span id="cb24-33"><a href="#cb24-33"></a>    }</span>
+<span id="cb24-34"><a href="#cb24-34"></a>}</span></code></pre></div>
 <h3 id="compiling-and-running-the-libproc-sample">Compiling and running the libproc sample</h3>
 <div class="sourceCode" id="cb25"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb25-1"><a href="#cb25-1"></a></span>
 <span id="cb25-2"><a href="#cb25-2"></a><span class="ex">java</span> -Dforeign.restricted=permit \</span>
 <span id="cb25-3"><a href="#cb25-3"></a>    --add-modules jdk.incubator.foreign \</span>
 <span id="cb25-4"><a href="#cb25-4"></a>    -Djava.library.path=/usr/lib LibprocMain.java</span></code></pre></div>
@@ -509,38 +502,47 @@
 <li>Let ${LIBGIT2_HOME} be the directory where you expanded libgit2 sources.</li>
 <li>Let ${LIBGIT2_HOME}/build be the build directory where libgit2.dylib is built.</li>
 </ul>
 <h3 id="jextract-git2.h">jextract git2.h</h3>
 <div class="sourceCode" id="cb26"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb26-1"><a href="#cb26-1"></a></span>
-<span id="cb26-2"><a href="#cb26-2"></a><span class="ex">jextract</span> -t com.github -lgit2 \</span>
-<span id="cb26-3"><a href="#cb26-3"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/ \</span>
-<span id="cb26-4"><a href="#cb26-4"></a>  -I <span class="va">${LIBGIT2_HOME}</span>/include/ \</span>
-<span id="cb26-5"><a href="#cb26-5"></a>  -I <span class="va">${LIBGIT2_HOME}</span>/include/git2 \</span>
-<span id="cb26-6"><a href="#cb26-6"></a>  <span class="va">${LIBGIT2_HOME}</span>/include/git2.h</span></code></pre></div>
+<span id="cb26-2"><a href="#cb26-2"></a><span class="ex">jextract</span> \</span>
+<span id="cb26-3"><a href="#cb26-3"></a>  -t com.github -lgit2 \</span>
+<span id="cb26-4"><a href="#cb26-4"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/ \</span>
+<span id="cb26-5"><a href="#cb26-5"></a>  -I <span class="va">${LIBGIT2_HOME}</span>/include/ \</span>
+<span id="cb26-6"><a href="#cb26-6"></a>  -I <span class="va">${LIBGIT2_HOME}</span>/include/git2 \</span>
+<span id="cb26-7"><a href="#cb26-7"></a>  <span class="va">${LIBGIT2_HOME}</span>/include/git2.h</span></code></pre></div>
 <h3 id="java-program-that-uses-libgit2-to-clone-github-repo">Java program that uses libgit2 to clone github repo</h3>
 <div class="sourceCode" id="cb27"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb27-1"><a href="#cb27-1"></a></span>
-<span id="cb27-2"><a href="#cb27-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.NativeScope;</span></span>
-<span id="cb27-3"><a href="#cb27-3"></a><span class="kw">import static</span><span class="im"> com.github.git2_h.*;</span></span>
-<span id="cb27-4"><a href="#cb27-4"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.CSupport.*;</span></span>
-<span id="cb27-5"><a href="#cb27-5"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
-<span id="cb27-6"><a href="#cb27-6"></a></span>
-<span id="cb27-7"><a href="#cb27-7"></a><span class="kw">public</span> <span class="kw">class</span> GitClone {</span>
-<span id="cb27-8"><a href="#cb27-8"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
-<span id="cb27-9"><a href="#cb27-9"></a>          <span class="kw">if</span> (args.<span class="fu">length</span> != <span class="dv">2</span>) {</span>
-<span id="cb27-10"><a href="#cb27-10"></a>              <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;java GitClone &lt;url&gt; &lt;path&gt;&quot;</span>);</span>
-<span id="cb27-11"><a href="#cb27-11"></a>              <span class="bu">System</span>.<span class="fu">exit</span>(<span class="dv">1</span>);</span>
-<span id="cb27-12"><a href="#cb27-12"></a>          }</span>
-<span id="cb27-13"><a href="#cb27-13"></a>          <span class="fu">git_libgit2_init</span>();</span>
-<span id="cb27-14"><a href="#cb27-14"></a>          <span class="kw">try</span> (var scope = NativeScope.<span class="fu">unboundedScope</span>()) {</span>
-<span id="cb27-15"><a href="#cb27-15"></a>              var repo = scope.<span class="fu">allocate</span>(C_POINTER, NULL);</span>
-<span id="cb27-16"><a href="#cb27-16"></a>              var url = <span class="fu">toCString</span>(args[<span class="dv">0</span>], scope);</span>
-<span id="cb27-17"><a href="#cb27-17"></a>              var path = <span class="fu">toCString</span>(args[<span class="dv">1</span>], scope);</span>
-<span id="cb27-18"><a href="#cb27-18"></a>              <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="fu">git_clone</span>(repo, url, path, NULL));</span>
-<span id="cb27-19"><a href="#cb27-19"></a>          }</span>
-<span id="cb27-20"><a href="#cb27-20"></a>          <span class="fu">git_libgit2_shutdown</span>();</span>
-<span id="cb27-21"><a href="#cb27-21"></a>    }</span>
-<span id="cb27-22"><a href="#cb27-22"></a>}</span></code></pre></div>
+<span id="cb27-2"><a href="#cb27-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.MemoryAddress;</span></span>
+<span id="cb27-3"><a href="#cb27-3"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.NativeScope;</span></span>
+<span id="cb27-4"><a href="#cb27-4"></a><span class="kw">import static</span><span class="im"> com.github.git2_h.*;</span></span>
+<span id="cb27-5"><a href="#cb27-5"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.CSupport.*;</span></span>
+<span id="cb27-6"><a href="#cb27-6"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
+<span id="cb27-7"><a href="#cb27-7"></a></span>
+<span id="cb27-8"><a href="#cb27-8"></a><span class="kw">public</span> <span class="kw">class</span> GitClone {</span>
+<span id="cb27-9"><a href="#cb27-9"></a>    <span class="kw">private</span> <span class="dt">static</span> MemoryAddress <span class="fu">allocatePointer</span>(MemoryAddress value, NativeScope scope) {</span>
+<span id="cb27-10"><a href="#cb27-10"></a>        var addr = scope.<span class="fu">allocate</span>(C_POINTER);</span>
+<span id="cb27-11"><a href="#cb27-11"></a>        var handle = C_POINTER.<span class="fu">varHandle</span>(<span class="dt">long</span>.<span class="fu">class</span>);</span>
+<span id="cb27-12"><a href="#cb27-12"></a>        handle.<span class="fu">set</span>(addr, value.<span class="fu">toRawLongValue</span>());</span>
+<span id="cb27-13"><a href="#cb27-13"></a>        <span class="kw">return</span> addr;</span>
+<span id="cb27-14"><a href="#cb27-14"></a>    }</span>
+<span id="cb27-15"><a href="#cb27-15"></a></span>
+<span id="cb27-16"><a href="#cb27-16"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
+<span id="cb27-17"><a href="#cb27-17"></a>          <span class="kw">if</span> (args.<span class="fu">length</span> != <span class="dv">2</span>) {</span>
+<span id="cb27-18"><a href="#cb27-18"></a>              <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;java GitClone &lt;url&gt; &lt;path&gt;&quot;</span>);</span>
+<span id="cb27-19"><a href="#cb27-19"></a>              <span class="bu">System</span>.<span class="fu">exit</span>(<span class="dv">1</span>);</span>
+<span id="cb27-20"><a href="#cb27-20"></a>          }</span>
+<span id="cb27-21"><a href="#cb27-21"></a>          <span class="fu">git_libgit2_init</span>();</span>
+<span id="cb27-22"><a href="#cb27-22"></a>          <span class="kw">try</span> (var scope = NativeScope.<span class="fu">unboundedScope</span>()) {</span>
+<span id="cb27-23"><a href="#cb27-23"></a>              var repo = <span class="fu">allocatePointer</span>(NULL, scope);</span>
+<span id="cb27-24"><a href="#cb27-24"></a>              var url = <span class="fu">toCString</span>(args[<span class="dv">0</span>], scope);</span>
+<span id="cb27-25"><a href="#cb27-25"></a>              var path = <span class="fu">toCString</span>(args[<span class="dv">1</span>], scope);</span>
+<span id="cb27-26"><a href="#cb27-26"></a>              <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="fu">git_clone</span>(repo, url, path, NULL));</span>
+<span id="cb27-27"><a href="#cb27-27"></a>          }</span>
+<span id="cb27-28"><a href="#cb27-28"></a>          <span class="fu">git_libgit2_shutdown</span>();</span>
+<span id="cb27-29"><a href="#cb27-29"></a>    }</span>
+<span id="cb27-30"><a href="#cb27-30"></a>}</span></code></pre></div>
 <h3 id="compiling-and-running-the-libgit2-sample">Compiling and running the libgit2 sample</h3>
 <div class="sourceCode" id="cb28"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb28-1"><a href="#cb28-1"></a></span>
 <span id="cb28-2"><a href="#cb28-2"></a><span class="co"># file run.sh</span></span>
 <span id="cb28-3"><a href="#cb28-3"></a></span>
 <span id="cb28-4"><a href="#cb28-4"></a><span class="ex">java</span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \</span>
@@ -553,104 +555,121 @@
 <h3 id="jextract-sqlite3.h">jextract sqlite3.h</h3>
 <div class="sourceCode" id="cb30"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb30-1"><a href="#cb30-1"></a></span>
 <span id="cb30-2"><a href="#cb30-2"></a><span class="ex">jextract</span> \</span>
 <span id="cb30-3"><a href="#cb30-3"></a>  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \</span>
 <span id="cb30-4"><a href="#cb30-4"></a>  /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sqlite3.h \</span>
-<span id="cb30-5"><a href="#cb30-5"></a>  -t org.sqlite -lsqlite3</span></code></pre></div>
+<span id="cb30-5"><a href="#cb30-5"></a>  -t org.sqlite -lsqlite3 </span></code></pre></div>
 <h3 id="java-program-that-uses-sqlite3">Java program that uses sqlite3</h3>
 <div class="sourceCode" id="cb31"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb31-1"><a href="#cb31-1"></a></span>
-<span id="cb31-2"><a href="#cb31-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.NativeScope;</span></span>
-<span id="cb31-3"><a href="#cb31-3"></a><span class="kw">import</span><span class="im"> org.sqlite.Cpointer;</span></span>
-<span id="cb31-4"><a href="#cb31-4"></a><span class="kw">import</span><span class="im"> org.sqlite.Cstring;</span></span>
+<span id="cb31-2"><a href="#cb31-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.MemoryAddress;</span></span>
+<span id="cb31-3"><a href="#cb31-3"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.MemoryAccess;</span></span>
+<span id="cb31-4"><a href="#cb31-4"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.NativeScope;</span></span>
 <span id="cb31-5"><a href="#cb31-5"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
 <span id="cb31-6"><a href="#cb31-6"></a><span class="kw">import static</span><span class="im"> org.sqlite.sqlite3_h.*;</span></span>
-<span id="cb31-7"><a href="#cb31-7"></a></span>
-<span id="cb31-8"><a href="#cb31-8"></a><span class="kw">public</span> <span class="kw">class</span> SqliteMain {</span>
-<span id="cb31-9"><a href="#cb31-9"></a>   <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) <span class="kw">throws</span> <span class="bu">Exception</span> {</span>
-<span id="cb31-10"><a href="#cb31-10"></a>        <span class="kw">try</span> (var scope = NativeScope.<span class="fu">unboundedScope</span>()) {</span>
-<span id="cb31-11"><a href="#cb31-11"></a>            <span class="co">// char** errMsgPtrPtr;</span></span>
-<span id="cb31-12"><a href="#cb31-12"></a>            var errMsgPtrPtr = Cpointer.<span class="fu">allocate</span>(NULL, scope);</span>
-<span id="cb31-13"><a href="#cb31-13"></a></span>
-<span id="cb31-14"><a href="#cb31-14"></a>            <span class="co">// sqlite3** dbPtrPtr;</span></span>
-<span id="cb31-15"><a href="#cb31-15"></a>            var dbPtrPtr = Cpointer.<span class="fu">allocate</span>(NULL, scope);</span>
-<span id="cb31-16"><a href="#cb31-16"></a></span>
-<span id="cb31-17"><a href="#cb31-17"></a>            <span class="dt">int</span> rc = <span class="fu">sqlite3_open</span>(Cstring.<span class="fu">toCString</span>(<span class="st">&quot;employee.db&quot;</span>,scope), dbPtrPtr);</span>
-<span id="cb31-18"><a href="#cb31-18"></a>            <span class="kw">if</span> (rc != <span class="dv">0</span>) {</span>
-<span id="cb31-19"><a href="#cb31-19"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;sqlite3_open failed: &quot;</span> + rc);</span>
-<span id="cb31-20"><a href="#cb31-20"></a>                <span class="kw">return</span>;</span>
-<span id="cb31-21"><a href="#cb31-21"></a>            } <span class="kw">else</span> {</span>
-<span id="cb31-22"><a href="#cb31-22"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;employee db opened&quot;</span>);</span>
-<span id="cb31-23"><a href="#cb31-23"></a>            }</span>
-<span id="cb31-24"><a href="#cb31-24"></a></span>
-<span id="cb31-25"><a href="#cb31-25"></a>            <span class="co">// sqlite3* dbPtr;</span></span>
-<span id="cb31-26"><a href="#cb31-26"></a>            var dbPtr = Cpointer.<span class="fu">get</span>(dbPtrPtr);</span>
-<span id="cb31-27"><a href="#cb31-27"></a></span>
-<span id="cb31-28"><a href="#cb31-28"></a>            <span class="co">// create a new table</span></span>
-<span id="cb31-29"><a href="#cb31-29"></a>            var sql = Cstring.<span class="fu">toCString</span>(</span>
-<span id="cb31-30"><a href="#cb31-30"></a>                <span class="st">&quot;CREATE TABLE EMPLOYEE (&quot;</span>  +</span>
-<span id="cb31-31"><a href="#cb31-31"></a>                <span class="st">&quot;  ID INT PRIMARY KEY NOT NULL,&quot;</span> +</span>
-<span id="cb31-32"><a href="#cb31-32"></a>                <span class="st">&quot;  NAME TEXT NOT NULL,&quot;</span>    +</span>
-<span id="cb31-33"><a href="#cb31-33"></a>                <span class="st">&quot;  SALARY REAL NOT NULL )&quot;</span>, scope);</span>
-<span id="cb31-34"><a href="#cb31-34"></a></span>
-<span id="cb31-35"><a href="#cb31-35"></a>            rc = <span class="fu">sqlite3_exec</span>(dbPtr, sql, NULL, NULL, errMsgPtrPtr);</span>
-<span id="cb31-36"><a href="#cb31-36"></a></span>
-<span id="cb31-37"><a href="#cb31-37"></a>            <span class="kw">if</span> (rc != <span class="dv">0</span>) {</span>
-<span id="cb31-38"><a href="#cb31-38"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;sqlite3_exec failed: &quot;</span> + rc);</span>
-<span id="cb31-39"><a href="#cb31-39"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;SQL error: &quot;</span> + Cstring.<span class="fu">toJavaStringRestricted</span>(Cpointer.<span class="fu">get</span>(errMsgPtrPtr)));</span>
-<span id="cb31-40"><a href="#cb31-40"></a>                <span class="fu">sqlite3_free</span>(Cpointer.<span class="fu">get</span>(errMsgPtrPtr));</span>
-<span id="cb31-41"><a href="#cb31-41"></a>            } <span class="kw">else</span> {</span>
-<span id="cb31-42"><a href="#cb31-42"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;employee table created&quot;</span>);</span>
-<span id="cb31-43"><a href="#cb31-43"></a>            }</span>
+<span id="cb31-7"><a href="#cb31-7"></a><span class="kw">import static</span><span class="im"> org.sqlite.RuntimeHelper.*;</span></span>
+<span id="cb31-8"><a href="#cb31-8"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.CSupport.*;</span></span>
+<span id="cb31-9"><a href="#cb31-9"></a></span>
+<span id="cb31-10"><a href="#cb31-10"></a><span class="kw">public</span> <span class="kw">class</span> SqliteMain {</span>
+<span id="cb31-11"><a href="#cb31-11"></a>   <span class="kw">private</span> <span class="dt">static</span> MemoryAddress <span class="fu">allocatePointer</span>(MemoryAddress value, NativeScope scope) {</span>
+<span id="cb31-12"><a href="#cb31-12"></a>        var addr = scope.<span class="fu">allocate</span>(C_POINTER);</span>
+<span id="cb31-13"><a href="#cb31-13"></a>        var handle = C_POINTER.<span class="fu">varHandle</span>(<span class="dt">long</span>.<span class="fu">class</span>);</span>
+<span id="cb31-14"><a href="#cb31-14"></a>        handle.<span class="fu">set</span>(addr, value.<span class="fu">toRawLongValue</span>());</span>
+<span id="cb31-15"><a href="#cb31-15"></a>        <span class="kw">return</span> addr;</span>
+<span id="cb31-16"><a href="#cb31-16"></a>   }</span>
+<span id="cb31-17"><a href="#cb31-17"></a></span>
+<span id="cb31-18"><a href="#cb31-18"></a>   <span class="kw">private</span> <span class="dt">static</span> MemoryAddress <span class="fu">getPointer</span>(MemoryAddress addr) {</span>
+<span id="cb31-19"><a href="#cb31-19"></a>       <span class="kw">return</span> <span class="fu">getPointer</span>(addr, <span class="dv">0</span>);</span>
+<span id="cb31-20"><a href="#cb31-20"></a>   }</span>
+<span id="cb31-21"><a href="#cb31-21"></a></span>
+<span id="cb31-22"><a href="#cb31-22"></a>   <span class="kw">private</span> <span class="dt">static</span> MemoryAddress <span class="fu">getPointer</span>(MemoryAddress addr, <span class="dt">int</span> element) {</span>
+<span id="cb31-23"><a href="#cb31-23"></a>       <span class="kw">return</span> MemoryAccess.<span class="fu">getAddress</span>(addr, element*C_POINTER.<span class="fu">byteSize</span>());</span>
+<span id="cb31-24"><a href="#cb31-24"></a>   }</span>
+<span id="cb31-25"><a href="#cb31-25"></a></span>
+<span id="cb31-26"><a href="#cb31-26"></a>   <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) <span class="kw">throws</span> <span class="bu">Exception</span> {</span>
+<span id="cb31-27"><a href="#cb31-27"></a>        <span class="kw">try</span> (var scope = NativeScope.<span class="fu">unboundedScope</span>()) {</span>
+<span id="cb31-28"><a href="#cb31-28"></a>            <span class="co">// char** errMsgPtrPtr;</span></span>
+<span id="cb31-29"><a href="#cb31-29"></a>            var errMsgPtrPtr = <span class="fu">allocatePointer</span>(NULL, scope);</span>
+<span id="cb31-30"><a href="#cb31-30"></a></span>
+<span id="cb31-31"><a href="#cb31-31"></a>            <span class="co">// sqlite3** dbPtrPtr;</span></span>
+<span id="cb31-32"><a href="#cb31-32"></a>            var dbPtrPtr = <span class="fu">allocatePointer</span>(NULL, scope);</span>
+<span id="cb31-33"><a href="#cb31-33"></a></span>
+<span id="cb31-34"><a href="#cb31-34"></a>            <span class="dt">int</span> rc = <span class="fu">sqlite3_open</span>(<span class="fu">toCString</span>(<span class="st">&quot;employee.db&quot;</span>,scope), dbPtrPtr);</span>
+<span id="cb31-35"><a href="#cb31-35"></a>            <span class="kw">if</span> (rc != <span class="dv">0</span>) {</span>
+<span id="cb31-36"><a href="#cb31-36"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;sqlite3_open failed: &quot;</span> + rc);</span>
+<span id="cb31-37"><a href="#cb31-37"></a>                <span class="kw">return</span>;</span>
+<span id="cb31-38"><a href="#cb31-38"></a>            } <span class="kw">else</span> {</span>
+<span id="cb31-39"><a href="#cb31-39"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;employee db opened&quot;</span>);</span>
+<span id="cb31-40"><a href="#cb31-40"></a>            }</span>
+<span id="cb31-41"><a href="#cb31-41"></a></span>
+<span id="cb31-42"><a href="#cb31-42"></a>            <span class="co">// sqlite3* dbPtr;</span></span>
+<span id="cb31-43"><a href="#cb31-43"></a>            var dbPtr = <span class="fu">getPointer</span>(dbPtrPtr);</span>
 <span id="cb31-44"><a href="#cb31-44"></a></span>
-<span id="cb31-45"><a href="#cb31-45"></a>            <span class="co">// insert two rows</span></span>
-<span id="cb31-46"><a href="#cb31-46"></a>            sql = Cstring.<span class="fu">toCString</span>(</span>
-<span id="cb31-47"><a href="#cb31-47"></a>                <span class="st">&quot;INSERT INTO EMPLOYEE (ID,NAME,SALARY) &quot;</span> +</span>
-<span id="cb31-48"><a href="#cb31-48"></a>                    <span class="st">&quot;VALUES (134, &#39;Xyz&#39;, 200000.0); &quot;</span> +</span>
-<span id="cb31-49"><a href="#cb31-49"></a>                <span class="st">&quot;INSERT INTO EMPLOYEE (ID,NAME,SALARY) &quot;</span> +</span>
-<span id="cb31-50"><a href="#cb31-50"></a>                    <span class="st">&quot;VALUES (333, &#39;Abc&#39;, 100000.0);&quot;</span>, scope</span>
-<span id="cb31-51"><a href="#cb31-51"></a>            );</span>
+<span id="cb31-45"><a href="#cb31-45"></a>            <span class="co">// create a new table</span></span>
+<span id="cb31-46"><a href="#cb31-46"></a>            var sql = <span class="fu">toCString</span>(</span>
+<span id="cb31-47"><a href="#cb31-47"></a>                <span class="st">&quot;CREATE TABLE EMPLOYEE (&quot;</span>  +</span>
+<span id="cb31-48"><a href="#cb31-48"></a>                <span class="st">&quot;  ID INT PRIMARY KEY NOT NULL,&quot;</span> +</span>
+<span id="cb31-49"><a href="#cb31-49"></a>                <span class="st">&quot;  NAME TEXT NOT NULL,&quot;</span>    +</span>
+<span id="cb31-50"><a href="#cb31-50"></a>                <span class="st">&quot;  SALARY REAL NOT NULL )&quot;</span>, scope);</span>
+<span id="cb31-51"><a href="#cb31-51"></a></span>
 <span id="cb31-52"><a href="#cb31-52"></a>            rc = <span class="fu">sqlite3_exec</span>(dbPtr, sql, NULL, NULL, errMsgPtrPtr);</span>
 <span id="cb31-53"><a href="#cb31-53"></a></span>
 <span id="cb31-54"><a href="#cb31-54"></a>            <span class="kw">if</span> (rc != <span class="dv">0</span>) {</span>
 <span id="cb31-55"><a href="#cb31-55"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;sqlite3_exec failed: &quot;</span> + rc);</span>
-<span id="cb31-56"><a href="#cb31-56"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;SQL error: &quot;</span> + Cstring.<span class="fu">toJavaStringRestricted</span>(Cpointer.<span class="fu">get</span>(errMsgPtrPtr)));</span>
-<span id="cb31-57"><a href="#cb31-57"></a>                <span class="fu">sqlite3_free</span>(Cpointer.<span class="fu">get</span>(errMsgPtrPtr));</span>
+<span id="cb31-56"><a href="#cb31-56"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;SQL error: &quot;</span> + <span class="fu">toJavaStringRestricted</span>(<span class="fu">getPointer</span>(errMsgPtrPtr)));</span>
+<span id="cb31-57"><a href="#cb31-57"></a>                <span class="fu">sqlite3_free</span>(<span class="fu">getPointer</span>(errMsgPtrPtr));</span>
 <span id="cb31-58"><a href="#cb31-58"></a>            } <span class="kw">else</span> {</span>
-<span id="cb31-59"><a href="#cb31-59"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;rows inserted&quot;</span>);</span>
+<span id="cb31-59"><a href="#cb31-59"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;employee table created&quot;</span>);</span>
 <span id="cb31-60"><a href="#cb31-60"></a>            }</span>
 <span id="cb31-61"><a href="#cb31-61"></a></span>
-<span id="cb31-62"><a href="#cb31-62"></a>            <span class="dt">int</span>[] rowNum = <span class="kw">new</span> <span class="dt">int</span>[<span class="dv">1</span>];</span>
-<span id="cb31-63"><a href="#cb31-63"></a>            <span class="co">// callback to print rows from SELECT query</span></span>
-<span id="cb31-64"><a href="#cb31-64"></a>            var callback = sqlite3_exec$callback.<span class="fu">allocate</span>((a, argc, argv, columnNames) -&gt; {</span>
-<span id="cb31-65"><a href="#cb31-65"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;Row num: &quot;</span> + rowNum[<span class="dv">0</span>]++);</span>
-<span id="cb31-66"><a href="#cb31-66"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;numColumns = &quot;</span> + argc);</span>
-<span id="cb31-67"><a href="#cb31-67"></a>                argv = Cpointer.<span class="fu">asArrayRestricted</span>(argv, argc);</span>
-<span id="cb31-68"><a href="#cb31-68"></a>                columnNames = Cpointer.<span class="fu">asArrayRestricted</span>(columnNames, argc);</span>
-<span id="cb31-69"><a href="#cb31-69"></a>                <span class="kw">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; argc; i++) {</span>
-<span id="cb31-70"><a href="#cb31-70"></a>                     <span class="bu">String</span> name = Cstring.<span class="fu">toJavaStringRestricted</span>(Cpointer.<span class="fu">get</span>(columnNames, i));</span>
-<span id="cb31-71"><a href="#cb31-71"></a>                     <span class="bu">String</span> value = Cstring.<span class="fu">toJavaStringRestricted</span>(Cpointer.<span class="fu">get</span>(argv, i));</span>
-<span id="cb31-72"><a href="#cb31-72"></a>                     <span class="bu">System</span>.<span class="fu">out.printf</span>(<span class="st">&quot;</span><span class="sc">%s</span><span class="st"> = </span><span class="sc">%s\n</span><span class="st">&quot;</span>, name, value);</span>
-<span id="cb31-73"><a href="#cb31-73"></a>                }</span>
-<span id="cb31-74"><a href="#cb31-74"></a>                <span class="kw">return</span> <span class="dv">0</span>;</span>
-<span id="cb31-75"><a href="#cb31-75"></a>            }, scope);</span>
-<span id="cb31-76"><a href="#cb31-76"></a></span>
-<span id="cb31-77"><a href="#cb31-77"></a>            <span class="co">// select query</span></span>
-<span id="cb31-78"><a href="#cb31-78"></a>            sql = Cstring.<span class="fu">toCString</span>(<span class="st">&quot;SELECT * FROM EMPLOYEE&quot;</span>, scope);</span>
-<span id="cb31-79"><a href="#cb31-79"></a>            rc = <span class="fu">sqlite3_exec</span>(dbPtr, sql, callback, NULL, errMsgPtrPtr);</span>
-<span id="cb31-80"><a href="#cb31-80"></a></span>
-<span id="cb31-81"><a href="#cb31-81"></a>            <span class="kw">if</span> (rc != <span class="dv">0</span>) {</span>
-<span id="cb31-82"><a href="#cb31-82"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;sqlite3_exec failed: &quot;</span> + rc);</span>
-<span id="cb31-83"><a href="#cb31-83"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;SQL error: &quot;</span> + Cstring.<span class="fu">toJavaStringRestricted</span>(Cpointer.<span class="fu">get</span>(errMsgPtrPtr)));</span>
-<span id="cb31-84"><a href="#cb31-84"></a>                <span class="fu">sqlite3_free</span>(Cpointer.<span class="fu">get</span>(errMsgPtrPtr));</span>
-<span id="cb31-85"><a href="#cb31-85"></a>            } <span class="kw">else</span> {</span>
-<span id="cb31-86"><a href="#cb31-86"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;done&quot;</span>);</span>
-<span id="cb31-87"><a href="#cb31-87"></a>            }</span>
-<span id="cb31-88"><a href="#cb31-88"></a></span>
-<span id="cb31-89"><a href="#cb31-89"></a>            <span class="fu">sqlite3_close</span>(dbPtr);</span>
-<span id="cb31-90"><a href="#cb31-90"></a>        }</span>
-<span id="cb31-91"><a href="#cb31-91"></a>    }</span>
-<span id="cb31-92"><a href="#cb31-92"></a>}</span></code></pre></div>
+<span id="cb31-62"><a href="#cb31-62"></a>            <span class="co">// insert two rows</span></span>
+<span id="cb31-63"><a href="#cb31-63"></a>            sql = <span class="fu">toCString</span>(</span>
+<span id="cb31-64"><a href="#cb31-64"></a>                <span class="st">&quot;INSERT INTO EMPLOYEE (ID,NAME,SALARY) &quot;</span> +</span>
+<span id="cb31-65"><a href="#cb31-65"></a>                    <span class="st">&quot;VALUES (134, &#39;Xyz&#39;, 200000.0); &quot;</span> +</span>
+<span id="cb31-66"><a href="#cb31-66"></a>                <span class="st">&quot;INSERT INTO EMPLOYEE (ID,NAME,SALARY) &quot;</span> +</span>
+<span id="cb31-67"><a href="#cb31-67"></a>                    <span class="st">&quot;VALUES (333, &#39;Abc&#39;, 100000.0);&quot;</span>, scope</span>
+<span id="cb31-68"><a href="#cb31-68"></a>            );</span>
+<span id="cb31-69"><a href="#cb31-69"></a>            rc = <span class="fu">sqlite3_exec</span>(dbPtr, sql, NULL, NULL, errMsgPtrPtr);</span>
+<span id="cb31-70"><a href="#cb31-70"></a></span>
+<span id="cb31-71"><a href="#cb31-71"></a>            <span class="kw">if</span> (rc != <span class="dv">0</span>) {</span>
+<span id="cb31-72"><a href="#cb31-72"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;sqlite3_exec failed: &quot;</span> + rc);</span>
+<span id="cb31-73"><a href="#cb31-73"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;SQL error: &quot;</span> + <span class="fu">toJavaStringRestricted</span>(<span class="fu">getPointer</span>(errMsgPtrPtr)));</span>
+<span id="cb31-74"><a href="#cb31-74"></a>                <span class="fu">sqlite3_free</span>(<span class="fu">getPointer</span>(errMsgPtrPtr));</span>
+<span id="cb31-75"><a href="#cb31-75"></a>            } <span class="kw">else</span> {</span>
+<span id="cb31-76"><a href="#cb31-76"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;rows inserted&quot;</span>);</span>
+<span id="cb31-77"><a href="#cb31-77"></a>            }</span>
+<span id="cb31-78"><a href="#cb31-78"></a></span>
+<span id="cb31-79"><a href="#cb31-79"></a>            <span class="dt">int</span>[] rowNum = <span class="kw">new</span> <span class="dt">int</span>[<span class="dv">1</span>];</span>
+<span id="cb31-80"><a href="#cb31-80"></a>            <span class="co">// callback to print rows from SELECT query</span></span>
+<span id="cb31-81"><a href="#cb31-81"></a>            var callback = sqlite3_exec$callback.<span class="fu">allocate</span>((a, argc, argv, columnNames) -&gt; {</span>
+<span id="cb31-82"><a href="#cb31-82"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;Row num: &quot;</span> + rowNum[<span class="dv">0</span>]++);</span>
+<span id="cb31-83"><a href="#cb31-83"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;numColumns = &quot;</span> + argc);</span>
+<span id="cb31-84"><a href="#cb31-84"></a>                argv = <span class="fu">asArrayRestricted</span>(argv, C_POINTER, argc);</span>
+<span id="cb31-85"><a href="#cb31-85"></a>                columnNames = <span class="fu">asArrayRestricted</span>(columnNames, C_POINTER, argc);</span>
+<span id="cb31-86"><a href="#cb31-86"></a>                <span class="kw">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; argc; i++) {</span>
+<span id="cb31-87"><a href="#cb31-87"></a>                     <span class="bu">String</span> name = <span class="fu">toJavaStringRestricted</span>(<span class="fu">getPointer</span>(columnNames, i));</span>
+<span id="cb31-88"><a href="#cb31-88"></a>                     <span class="bu">String</span> value = <span class="fu">toJavaStringRestricted</span>(<span class="fu">getPointer</span>(argv, i));</span>
+<span id="cb31-89"><a href="#cb31-89"></a>                     <span class="bu">System</span>.<span class="fu">out.printf</span>(<span class="st">&quot;</span><span class="sc">%s</span><span class="st"> = </span><span class="sc">%s\n</span><span class="st">&quot;</span>, name, value);</span>
+<span id="cb31-90"><a href="#cb31-90"></a>                }</span>
+<span id="cb31-91"><a href="#cb31-91"></a>                <span class="kw">return</span> <span class="dv">0</span>;</span>
+<span id="cb31-92"><a href="#cb31-92"></a>            }, scope);</span>
+<span id="cb31-93"><a href="#cb31-93"></a></span>
+<span id="cb31-94"><a href="#cb31-94"></a>            <span class="co">// select query</span></span>
+<span id="cb31-95"><a href="#cb31-95"></a>            sql = <span class="fu">toCString</span>(<span class="st">&quot;SELECT * FROM EMPLOYEE&quot;</span>, scope);</span>
+<span id="cb31-96"><a href="#cb31-96"></a>            rc = <span class="fu">sqlite3_exec</span>(dbPtr, sql, callback, NULL, errMsgPtrPtr);</span>
+<span id="cb31-97"><a href="#cb31-97"></a></span>
+<span id="cb31-98"><a href="#cb31-98"></a>            <span class="kw">if</span> (rc != <span class="dv">0</span>) {</span>
+<span id="cb31-99"><a href="#cb31-99"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;sqlite3_exec failed: &quot;</span> + rc);</span>
+<span id="cb31-100"><a href="#cb31-100"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;SQL error: &quot;</span> + <span class="fu">toJavaStringRestricted</span>(<span class="fu">getPointer</span>(errMsgPtrPtr)));</span>
+<span id="cb31-101"><a href="#cb31-101"></a>                <span class="fu">sqlite3_free</span>(<span class="fu">getPointer</span>(errMsgPtrPtr));</span>
+<span id="cb31-102"><a href="#cb31-102"></a>            } <span class="kw">else</span> {</span>
+<span id="cb31-103"><a href="#cb31-103"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;done&quot;</span>);</span>
+<span id="cb31-104"><a href="#cb31-104"></a>            }</span>
+<span id="cb31-105"><a href="#cb31-105"></a></span>
+<span id="cb31-106"><a href="#cb31-106"></a>            <span class="fu">sqlite3_close</span>(dbPtr);</span>
+<span id="cb31-107"><a href="#cb31-107"></a>        }</span>
+<span id="cb31-108"><a href="#cb31-108"></a>    }</span>
+<span id="cb31-109"><a href="#cb31-109"></a>}</span></code></pre></div>
 <h3 id="compiling-and-running-the-sqlite3-sample">Compiling and running the sqlite3 sample</h3>
 <div class="sourceCode" id="cb32"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb32-1"><a href="#cb32-1"></a></span>
 <span id="cb32-2"><a href="#cb32-2"></a><span class="ex">java</span> -Dforeign.restricted=permit \</span>
 <span id="cb32-3"><a href="#cb32-3"></a>   --add-modules jdk.incubator.foreign \</span>
 <span id="cb32-4"><a href="#cb32-4"></a>   -Djava.library.path=/usr/lib SqliteMain.java</span></code></pre></div>
diff a/doc/panama_jextract.md b/doc/panama_jextract.md
--- a/doc/panama_jextract.md
+++ b/doc/panama_jextract.md
@@ -84,11 +84,12 @@
 
 ### jextract Python.h
 
 ```sh
 
-jextract -l python2.7 \
+jextract \
+  -l python2.7 \
   -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \
   -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/python2.7/ \
   -t org.python \
    /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/python2.7/Python.h
 
@@ -96,22 +97,23 @@
 
 ### Java program that uses extracted Python interface
 
 ```java
 
-import org.python.Cstring;
+
+import static jdk.incubator.foreign.CSupport.*;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 // import jextracted python 'header' class
 import static org.python.RuntimeHelper.*;
 import static org.python.Python_h.*;
 
 public class PythonMain {
     public static void main(String[] args) {
         String script = "print(sum([33, 55, 66])); print('Hello from Python!')\n";
 
         Py_Initialize();
-        try (var s = Cstring.toCString(script)) {
+        try (var s = toCString(script)) {
             var str = s.baseAddress();
             PyRun_SimpleStringFlags(str, NULL);
             Py_Finalize();
         }
     }
@@ -133,36 +135,36 @@
 
 ### jextract readline.h
 
 ```sh
 
-jextract -l readline -t org.unix \
+jextract \
+  -l readline -t org.unix \
   -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \
    /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/readline/readline.h
 
-
 ```
 
 ### Java code that uses readline
 
 ```java
 
-import org.unix.Cstring;
 import static org.unix.RuntimeHelper.*;
 import static org.unix.readline_h.*;
+import static jdk.incubator.foreign.CSupport.*;
 
 public class Readline {
     public static void main(String[] args) {
-        try (var s = Cstring.toCString("name? ")) {
+        try (var s = toCString("name? ")) {
             var pstr = s.baseAddress();
             // call "readline" API
             var p = readline(pstr);
 
             // print char* as is
             System.out.println(p);
             // convert char* ptr from readline as Java String & print it
-            System.out.println("Hello, " + Cstring.toJavaStringRestricted(p));
+            System.out.println("Hello, " + toJavaStringRestricted(p));
         }
     }
 }
 
 ```
@@ -190,22 +192,23 @@
 
 ### Java code that uses libcurl
 
 ```java
 
-import org.unix.Cstring;
+
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 import static org.unix.RuntimeHelper.*;
 import static org.unix.curl_h.*;
+import static jdk.incubator.foreign.CSupport.*;
 
 public class CurlMain {
    public static void main(String[] args) {
        var urlStr = args[0];
        curl_global_init(CURL_GLOBAL_DEFAULT());
        var curl = curl_easy_init();
        if(!curl.equals(NULL)) {
-           try (var s = Cstring.toCString(urlStr)) {
+           try (var s = toCString(urlStr)) {
                var url = s.baseAddress();
                curl_easy_setopt(curl, CURLOPT_URL(), url);
                int res = curl_easy_perform(curl);
                if (res != CURLE_OK()) {
                    curl_easy_cleanup(curl);
@@ -262,16 +265,23 @@
 
 ### Java sample code that uses cblas library
 
 ```java
 
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.NativeScope;
 import blas.*;
 import static blas.RuntimeHelper.*;
 import static blas.cblas_h.*;
+import static jdk.incubator.foreign.CSupport.*;
 
 public class TestBlas {
+    private static double getDouble(MemoryAddress addr, int element) {
+        return MemoryAccess.getDouble(addr, element*C_DOUBLE.byteSize());
+    }
+
     public static void main(String[] args) {
         int Layout;
         int transa;
 
         double alpha, beta;
@@ -287,48 +297,25 @@
         incy = 1;
         alpha = 1;
         beta = 0;
 
         try (var scope = NativeScope.unboundedScope()) {
-            var a = Cdouble.allocateArray(m*n, scope);
-            var x = Cdouble.allocateArray(n, scope);
-            var y = Cdouble.allocateArray(n, scope);
-
-            /* The elements of the first column */
-            Cdouble.set(a, 0, 1.0);
-            Cdouble.set(a, 1, 2.0);
-            Cdouble.set(a, 2, 3.0);
-            Cdouble.set(a, 3, 4.0);
-            /* The elements of the second column */
-            Cdouble.set(a, m, 1.0);
-            Cdouble.set(a, m + 1, 1.0);
-            Cdouble.set(a, m + 2, 1.0);
-            Cdouble.set(a, m + 3, 1.0);
-            /* The elements of the third column */
-            Cdouble.set(a, m*2, 3.0);
-            Cdouble.set(a, m*2 + 1, 4.0);
-            Cdouble.set(a, m*2 + 2, 5.0);
-            Cdouble.set(a, m*2 + 3, 6.0);
-            /* The elements of the fourth column */
-            Cdouble.set(a, m*3, 5.0);
-            Cdouble.set(a, m*3 + 1, 6.0);
-            Cdouble.set(a, m*3 + 2, 7.0);
-            Cdouble.set(a, m*3 + 3, 8.0);
-            /* The elemetns of x and y */
-            Cdouble.set(x, 0, 1.0);
-            Cdouble.set(x, 1, 2.0);
-            Cdouble.set(x, 2, 1.0);
-            Cdouble.set(x, 3, 1.0);
-            Cdouble.set(y, 0, 0.0);
-            Cdouble.set(y, 1, 0.0);
-            Cdouble.set(y, 2, 0.0);
-            Cdouble.set(y, 3, 0.0);
+            var a = scope.allocateArray(C_DOUBLE, new double[] {
+                1.0, 2.0, 3.0, 4.0,
+                1.0, 1.0, 1.0, 1.0,
+                3.0, 4.0, 5.0, 6.0,
+                5.0, 6.0, 7.0, 8.0
+            });
+            var x = scope.allocateArray(C_DOUBLE, new double[] {
+                1.0, 2.0, 1.0, 1.0
+            });
+            var y = scope.allocateArray(C_DOUBLE, n);
 
             cblas_dgemv(Layout, transa, m, n, alpha, a, lda, x, incx, beta, y, incy);
             /* Print y */
             for (i = 0; i < n; i++) {
-                System.out.print(String.format(" y%d = %f\n", i, Cdouble.get(y, (long)i)));
+                System.out.print(String.format(" y%d = %f\n", i, getDouble(y, i)));
             }
         }
     }
 }
 
@@ -336,13 +323,14 @@
 
 ### Compiling and running the above BLAS sample
 
 ```sh
 
-java -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \
-    -Djava.library.path=/usr/local/opt/openblas/lib \
-    TestBlas.java
+jextract \
+  -C "-D FORCE_OPENBLAS_COMPLEX_STRUCT" \
+  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \
+  -l openblas -t blas /usr/local/opt/openblas/include/cblas.h
 
 ```
 
 ## Using LAPACK library (Mac OS)
 
@@ -362,26 +350,28 @@
 
 ### Java sample code that uses LAPACK library
 
 ```java
 
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.NativeScope;
 import lapack.*;
 import static lapack.lapacke_h.*;
+import static jdk.incubator.foreign.CSupport.*;
 
 public class TestLapack {
     public static void main(String[] args) {
 
         /* Locals */
         try (var scope = NativeScope.unboundedScope()) {
-            var A = Cdouble.allocateArray(new double[]{
+            var A = scope.allocateArray(C_DOUBLE, new double[]{
                     1, 2, 3, 4, 5, 1, 3, 5, 2, 4, 1, 4, 2, 5, 3
-            }, scope);
-            var b = Cdouble.allocateArray(new double[]{
+            });
+            var b = scope.allocateArray(C_DOUBLE, new double[]{
                     -10, 12, 14, 16, 18, -3, 14, 12, 16, 16
-            }, scope);
+            });
             int info, m, n, lda, ldb, nrhs;
 
             /* Initialization */
             m = 5;
             n = 3;
@@ -410,11 +400,11 @@
     static void print_matrix_colmajor(String msg, int m, int n, MemoryAddress mat, int ldm) {
         int i, j;
         System.out.printf("\n %s\n", msg);
 
         for( i = 0; i < m; i++ ) {
-            for( j = 0; j < n; j++ ) System.out.printf(" %6.2f", Cdouble.get(mat, i+j*ldm));
+            for( j = 0; j < n; j++ ) System.out.printf(" %6.2f", MemoryAccess.getDouble(mat, C_DOUBLE.byteSize()*(i+j*ldm)));
             System.out.printf( "\n" );
         }
     }
 }
 
@@ -434,21 +424,24 @@
 
 ### jextract libproc.h
 
 ```sh
 
-jextract -t org.unix \
+jextract \
+  -t org.unix \
   -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \
   --filter libproc.h \
   /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libproc.h
 
 ```
 
 ### Java program that uses libproc to list processes
 
 ```java
 
+import jdk.incubator.foreign.CSupport;
+import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.NativeScope;
 import org.unix.*;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 import static org.unix.libproc_h.*;
 
@@ -458,22 +451,22 @@
     public static void main(String[] args) {
         try (var scope = NativeScope.unboundedScope()) {
             // get the number of processes
             int numPids = proc_listallpids(NULL, 0);
             // allocate an array
-            var pids = Cint.allocateArray(numPids, scope);
+            var pids = scope.allocateArray(CSupport.C_INT, numPids);
             // list all the pids into the native array
             proc_listallpids(pids, numPids);
             // convert native array to java array
-            int[] jpids = Cint.toJavaArray(pids.segment());
+            int[] jpids = pids.segment().toIntArray();
             // buffer for process name
-            var nameBuf = Cchar.allocateArray(NAME_BUF_MAX,scope);
+            var nameBuf = scope.allocateArray(CSupport.C_CHAR, NAME_BUF_MAX);
             for (int i = 0; i < jpids.length; i++) {
                 int pid = jpids[i];
                 // get the process name
                 proc_name(pid, nameBuf, NAME_BUF_MAX);
-                String procName = Cstring.toJavaString(nameBuf);
+                String procName = CSupport.toJavaString(nameBuf);
                 // print pid and process name
                 System.out.printf("%d %s\n", pid, procName);
             }
         }
     }
@@ -502,11 +495,12 @@
 
 ### jextract git2.h
 
 ```sh
 
-jextract -t com.github -lgit2 \
+jextract \
+  -t com.github -lgit2 \
   -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/ \
   -I ${LIBGIT2_HOME}/include/ \
   -I ${LIBGIT2_HOME}/include/git2 \
   ${LIBGIT2_HOME}/include/git2.h
 
@@ -514,31 +508,40 @@
 
 ### Java program that uses libgit2 to clone github repo
 
 ```java
 
+import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.NativeScope;
 import static com.github.git2_h.*;
 import static jdk.incubator.foreign.CSupport.*;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 
 public class GitClone {
+    private static MemoryAddress allocatePointer(MemoryAddress value, NativeScope scope) {
+        var addr = scope.allocate(C_POINTER);
+        var handle = C_POINTER.varHandle(long.class);
+        handle.set(addr, value.toRawLongValue());
+        return addr;
+    }
+
     public static void main(String[] args) {
           if (args.length != 2) {
               System.err.println("java GitClone <url> <path>");
               System.exit(1);
           }
           git_libgit2_init();
           try (var scope = NativeScope.unboundedScope()) {
-              var repo = scope.allocate(C_POINTER, NULL);
+              var repo = allocatePointer(NULL, scope);
               var url = toCString(args[0], scope);
               var path = toCString(args[1], scope);
               System.out.println(git_clone(repo, url, path, NULL));
           }
           git_libgit2_shutdown();
     }
 }
+
 ```
 
 ### Compiling and running the libgit2 sample
 
 ```sh
@@ -566,108 +569,126 @@
 ```sh
 
 jextract \
   -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \
   /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sqlite3.h \
-  -t org.sqlite -lsqlite3
+  -t org.sqlite -lsqlite3 
 
 ```
 ### Java program that uses sqlite3
 
 ```java
 
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.NativeScope;
-import org.sqlite.Cpointer;
-import org.sqlite.Cstring;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 import static org.sqlite.sqlite3_h.*;
+import static org.sqlite.RuntimeHelper.*;
+import static jdk.incubator.foreign.CSupport.*;
 
 public class SqliteMain {
+   private static MemoryAddress allocatePointer(MemoryAddress value, NativeScope scope) {
+        var addr = scope.allocate(C_POINTER);
+        var handle = C_POINTER.varHandle(long.class);
+        handle.set(addr, value.toRawLongValue());
+        return addr;
+   }
+
+   private static MemoryAddress getPointer(MemoryAddress addr) {
+       return getPointer(addr, 0);
+   }
+
+   private static MemoryAddress getPointer(MemoryAddress addr, int element) {
+       return MemoryAccess.getAddress(addr, element*C_POINTER.byteSize());
+   }
+
    public static void main(String[] args) throws Exception {
         try (var scope = NativeScope.unboundedScope()) {
             // char** errMsgPtrPtr;
-            var errMsgPtrPtr = Cpointer.allocate(NULL, scope);
+            var errMsgPtrPtr = allocatePointer(NULL, scope);
 
             // sqlite3** dbPtrPtr;
-            var dbPtrPtr = Cpointer.allocate(NULL, scope);
+            var dbPtrPtr = allocatePointer(NULL, scope);
 
-            int rc = sqlite3_open(Cstring.toCString("employee.db",scope), dbPtrPtr);
+            int rc = sqlite3_open(toCString("employee.db",scope), dbPtrPtr);
             if (rc != 0) {
                 System.err.println("sqlite3_open failed: " + rc);
                 return;
             } else {
                 System.out.println("employee db opened");
             }
 
             // sqlite3* dbPtr;
-            var dbPtr = Cpointer.get(dbPtrPtr);
+            var dbPtr = getPointer(dbPtrPtr);
 
             // create a new table
-            var sql = Cstring.toCString(
+            var sql = toCString(
                 "CREATE TABLE EMPLOYEE ("  +
                 "  ID INT PRIMARY KEY NOT NULL," +
                 "  NAME TEXT NOT NULL,"    +
                 "  SALARY REAL NOT NULL )", scope);
 
             rc = sqlite3_exec(dbPtr, sql, NULL, NULL, errMsgPtrPtr);
 
             if (rc != 0) {
                 System.err.println("sqlite3_exec failed: " + rc);
-                System.err.println("SQL error: " + Cstring.toJavaStringRestricted(Cpointer.get(errMsgPtrPtr)));
-                sqlite3_free(Cpointer.get(errMsgPtrPtr));
+                System.err.println("SQL error: " + toJavaStringRestricted(getPointer(errMsgPtrPtr)));
+                sqlite3_free(getPointer(errMsgPtrPtr));
             } else {
                 System.out.println("employee table created");
             }
 
             // insert two rows
-            sql = Cstring.toCString(
+            sql = toCString(
                 "INSERT INTO EMPLOYEE (ID,NAME,SALARY) " +
                     "VALUES (134, 'Xyz', 200000.0); " +
                 "INSERT INTO EMPLOYEE (ID,NAME,SALARY) " +
                     "VALUES (333, 'Abc', 100000.0);", scope
             );
             rc = sqlite3_exec(dbPtr, sql, NULL, NULL, errMsgPtrPtr);
 
             if (rc != 0) {
                 System.err.println("sqlite3_exec failed: " + rc);
-                System.err.println("SQL error: " + Cstring.toJavaStringRestricted(Cpointer.get(errMsgPtrPtr)));
-                sqlite3_free(Cpointer.get(errMsgPtrPtr));
+                System.err.println("SQL error: " + toJavaStringRestricted(getPointer(errMsgPtrPtr)));
+                sqlite3_free(getPointer(errMsgPtrPtr));
             } else {
                 System.out.println("rows inserted");
             }
 
             int[] rowNum = new int[1];
             // callback to print rows from SELECT query
             var callback = sqlite3_exec$callback.allocate((a, argc, argv, columnNames) -> {
                 System.out.println("Row num: " + rowNum[0]++);
                 System.out.println("numColumns = " + argc);
-                argv = Cpointer.asArrayRestricted(argv, argc);
-                columnNames = Cpointer.asArrayRestricted(columnNames, argc);
+                argv = asArrayRestricted(argv, C_POINTER, argc);
+                columnNames = asArrayRestricted(columnNames, C_POINTER, argc);
                 for (int i = 0; i < argc; i++) {
-                     String name = Cstring.toJavaStringRestricted(Cpointer.get(columnNames, i));
-                     String value = Cstring.toJavaStringRestricted(Cpointer.get(argv, i));
+                     String name = toJavaStringRestricted(getPointer(columnNames, i));
+                     String value = toJavaStringRestricted(getPointer(argv, i));
                      System.out.printf("%s = %s\n", name, value);
                 }
                 return 0;
             }, scope);
 
             // select query
-            sql = Cstring.toCString("SELECT * FROM EMPLOYEE", scope);
+            sql = toCString("SELECT * FROM EMPLOYEE", scope);
             rc = sqlite3_exec(dbPtr, sql, callback, NULL, errMsgPtrPtr);
 
             if (rc != 0) {
                 System.err.println("sqlite3_exec failed: " + rc);
-                System.err.println("SQL error: " + Cstring.toJavaStringRestricted(Cpointer.get(errMsgPtrPtr)));
-                sqlite3_free(Cpointer.get(errMsgPtrPtr));
+                System.err.println("SQL error: " + toJavaStringRestricted(getPointer(errMsgPtrPtr)));
+                sqlite3_free(getPointer(errMsgPtrPtr));
             } else {
                 System.out.println("done");
             }
 
             sqlite3_close(dbPtr);
         }
     }
 }
+
 ```
 
 ### Compiling and running the sqlite3 sample
 
 ```sh
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
@@ -108,15 +108,22 @@
         indent();
         sb.append("}\n");
         decrAlign();
     }
 
-    public void emitPrimitiveTypedef(Type.Primitive primType, String className) {
+    public void emitPrimitiveTypedef(Type.Primitive primType, String name) {
         Type.Primitive.Kind kind = primType.kind();
-        if (primitiveKindSupported(kind)) {
-            String superClassName = "C" + kind.typeName().replace(" ", "_");
-            emitTypedef(className, superClassName);
+        if (primitiveKindSupported(kind) && !kind.layout().isEmpty()) {
+            incrAlign();
+            indent();
+            sb.append(PUB_MODS);
+            sb.append("ValueLayout ");
+            sb.append(name);
+            sb.append(" = ");
+            sb.append(TypeTranslator.typeToLayoutName(kind));
+            sb.append(";\n");
+            decrAlign();
         }
     }
 
     private boolean primitiveKindSupported(Type.Primitive.Kind kind) {
         return switch(kind) {
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -104,11 +104,11 @@
     }
 
     static JavaFileObject[] generateWrapped(Declaration.Scoped decl, String clsName, String pkgName, List<String> libraryNames) {
         String qualName = pkgName.isEmpty() ? clsName : pkgName + "." + clsName;
         ConstantHelper constantHelper = new ConstantHelper(qualName,
-                ClassDesc.of(pkgName, "RuntimeHelper"), ClassDesc.of(pkgName, "Cstring"),
+                ClassDesc.of(pkgName, "RuntimeHelper"), ClassDesc.of("jdk.incubator.foreign", "CSupport"),
                 libraryNames.toArray(String[]::new));
         return new OutputFactory(clsName, pkgName,
                 new HeaderBuilder(clsName, pkgName, constantHelper), constantHelper).generate(decl);
     }
 
@@ -154,13 +154,10 @@
         try {
             List<JavaFileObject> files = new ArrayList<>();
             files.add(builder.build());
             files.addAll(constantHelper.getClasses());
             files.add(fileFromString(pkgName,"RuntimeHelper", getRuntimeHelperSource()));
-            files.add(getCstringFile(pkgName));
-            files.add(getCpointerFile(pkgName));
-            files.addAll(getPrimitiveTypeFiles(pkgName));
             return files.toArray(new JavaFileObject[0]);
         } catch (IOException ex) {
             throw new UncheckedIOException(ex);
         } catch (URISyntaxException ex2) {
             throw new RuntimeException(ex2);
@@ -180,49 +177,10 @@
         } catch (Exception ex) {
             ex.printStackTrace();
         }
     }
 
-    private JavaFileObject getCstringFile(String pkgName) throws IOException, URISyntaxException {
-        return getTemplateFile(pkgName, "Cstring", "resources/Cstring.java.template");
-    }
-
-    private JavaFileObject getCpointerFile(String pkgName) throws IOException, URISyntaxException {
-        return getTemplateFile(pkgName, "Cpointer", "resources/Cpointer.java.template");
-    }
-
-    private JavaFileObject getTemplateFile(String pkgName, String className, String path) throws IOException, URISyntaxException {
-        var cstringFile = OutputFactory.class.getResource(path);
-        var lines = Files.readAllLines(Paths.get(cstringFile.toURI()));
-        String pkgPrefix = pkgName.isEmpty()? "" : "package " + pkgName + ";\n";
-        String contents =  pkgPrefix +
-                lines.stream().collect(Collectors.joining("\n"));
-        return fileFromString(pkgName,className, contents);
-    }
-
-    private List<JavaFileObject> getPrimitiveTypeFiles(String pkgName) throws IOException, URISyntaxException {
-        var abi = SharedUtils.getSystemLinker();
-        var cXJavaFile = OutputFactory.class.getResource("resources/C-X.java.template");
-        var lines = Files.readAllLines(Paths.get(cXJavaFile.toURI()));
-
-        List<JavaFileObject> files = new ArrayList<>();
-        String pkgPrefix = pkgName.isEmpty()? "" : "package " + pkgName + ";\n";
-        for (Primitive.Kind type : Primitive.Kind.values()) {
-            if (type.layout().isEmpty()) continue;
-            String typeName = type.typeName().toLowerCase().replace(' ', '_');
-            MemoryLayout layout = type.layout().get();
-            String contents =  pkgPrefix +
-                    lines.stream().collect(Collectors.joining("\n")).
-                            replace("-X", typeName).
-                            replace("${C_LANG}", C_LANG_CONSTANTS_HOLDER).
-                            replace("${LAYOUT}", TypeTranslator.typeToLayoutName(type)).
-                            replace("${CARRIER}", classForType(type, layout).getName());
-            files.add(fileFromString(pkgName,"C" + typeName, contents));
-        }
-        return files;
-    }
-
     private static Class<?> classForType(Primitive.Kind type, MemoryLayout layout) {
         boolean isFloat = switch(type) {
             case Float, Double, LongDouble -> true;
             default-> false;
         };
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
+++ /dev/null
@@ -1,105 +0,0 @@
-// Generated by jextract
-
-import java.lang.invoke.VarHandle;
-import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.MemoryLayout;
-import jdk.incubator.foreign.MemorySegment;
-import jdk.incubator.foreign.NativeScope;
-
-import static ${C_LANG}.*;
-
-public class C-X {
-    // don't create!
-    C-X() {
-    }
-
-    private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
-        return MemoryLayout.ofSequence(elemLayout)
-                 .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
-    }
-
-    public static final MemoryLayout LAYOUT = ${LAYOUT};
-    public static final Class<?> CARRIER = ${CARRIER}.class;
-    private static final VarHandle handle = LAYOUT.varHandle(CARRIER);
-    private static final VarHandle arrayHandle = arrayHandle(LAYOUT, CARRIER);
-
-    public static MemoryAddress asArrayRestricted(MemoryAddress addr, int numElements) {
-        return MemorySegment.ofNativeRestricted(addr, numElements * LAYOUT.byteSize(),
-               Thread.currentThread(), null, null).baseAddress();
-    }
-
-    public static MemoryAddress asArray(MemoryAddress addr, int numElements) {
-        var seg = addr.segment();
-        if (seg == null) {
-            throw new IllegalArgumentException("no underlying segment for the address");
-        }
-        return seg.asSlice(addr.segmentOffset(), numElements * LAYOUT.byteSize()).baseAddress();
-    }
-
-    public static ${CARRIER} get(MemoryAddress addr) {
-        return (${CARRIER}) handle.get(addr);
-    }
-
-    public static void set(MemoryAddress addr, ${CARRIER} value) {
-        handle.set(addr, value);
-    }
-
-    public static ${CARRIER} get(MemoryAddress addr, long index) {
-        return (${CARRIER}) arrayHandle.get(addr, index);
-    }
-
-    public static void set(MemoryAddress addr, long index, ${CARRIER} value) {
-        arrayHandle.set(addr, index, value);
-    }
-
-    public static MemorySegment allocate(${CARRIER} value) {
-        var seg = MemorySegment.allocateNative(LAYOUT);
-        handle.set(seg.baseAddress(), value);
-        return seg;
-    }
-
-    public static MemoryAddress allocate(${CARRIER} value, NativeScope scope) {
-        var addr = scope.allocate(LAYOUT);
-        handle.set(addr, value);
-        return addr;
-    }
-
-    public static MemorySegment allocateArray(int length) {
-        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
-        return MemorySegment.allocateNative(arrLayout);
-    }
-
-    public static MemoryAddress allocateArray(int length, NativeScope scope) {
-        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
-        return scope.allocate(arrLayout);
-    }
-
-    public static MemorySegment allocateArray(${CARRIER}[] arr) {
-        var arrLayout = MemoryLayout.ofSequence(arr.length, LAYOUT);
-        var seg = MemorySegment.allocateNative(arrLayout);
-        seg.copyFrom(MemorySegment.ofArray(arr));
-        return seg;
-    }
-
-    public static MemoryAddress allocateArray(${CARRIER}[] arr, NativeScope scope) {
-        var arrLayout = MemoryLayout.ofSequence(arr.length, LAYOUT);
-        var addr = scope.allocate(arrLayout);
-        addr.segment().copyFrom(MemorySegment.ofArray(arr));
-        return addr;
-    }
-
-    public static long sizeof() {
-        return LAYOUT.byteSize();
-    }
-
-    public static ${CARRIER}[] toJavaArray(MemorySegment seg) {
-        var segSize = seg.byteSize();
-        var elemSize = sizeof();
-        if (segSize % elemSize != 0) {
-            throw new UnsupportedOperationException("segment cannot contain integral number of elements");
-        }
-        ${CARRIER}[] array = new ${CARRIER}[(int) (segSize / elemSize)];
-        MemorySegment.ofArray(array).copyFrom(seg);
-        return array;
-    }
-}
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
+++ /dev/null
@@ -1,76 +0,0 @@
-// Generated by jextract
-
-import java.lang.invoke.VarHandle;
-import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.MemoryHandles;
-import jdk.incubator.foreign.MemoryLayout;
-import jdk.incubator.foreign.MemorySegment;
-import jdk.incubator.foreign.NativeScope;
-import static jdk.incubator.foreign.CSupport.C_POINTER;
-
-public final class Cpointer {
-    private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
-        return MemoryLayout.ofSequence(elemLayout)
-            .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
-    }
-
-    public static final MemoryLayout LAYOUT = C_POINTER;
-    public static final Class<?> CARRIER = long.class;
-    private static final VarHandle handle = MemoryHandles.asAddressVarHandle(LAYOUT.varHandle(CARRIER));
-    private static final VarHandle arrayHandle = MemoryHandles.asAddressVarHandle(arrayHandle(LAYOUT, CARRIER));
-
-    public static MemoryAddress asArrayRestricted(MemoryAddress addr, int numPointers) {
-        return MemorySegment.ofNativeRestricted(addr, numPointers * LAYOUT.byteSize(),
-               Thread.currentThread(), null, null).baseAddress();
-    }
-
-    public static MemoryAddress asArray(MemoryAddress addr, int numPointers) {
-        var seg = addr.segment();
-        if (seg == null) {
-            throw new IllegalArgumentException("no underlying segment for the address");
-        }
-        return seg.asSlice(addr.segmentOffset(), numPointers * LAYOUT.byteSize()).baseAddress();
-    }
-
-    public static MemoryAddress get(MemoryAddress addr) {
-        return (MemoryAddress) handle.get(addr);
-    }
-
-    public static void set(MemoryAddress addr, MemoryAddress value) {
-        handle.set(addr, value);
-    }
-
-    public static MemoryAddress get(MemoryAddress addr, long index) {
-        return (MemoryAddress) arrayHandle.get(addr, index);
-    }
-
-    public static void set(MemoryAddress addr, long index, MemoryAddress value) {
-        arrayHandle.set(addr, index, value);
-    }
-
-    public static MemorySegment allocate(MemoryAddress value) {
-        var seg = MemorySegment.allocateNative(LAYOUT);
-        handle.set(seg.baseAddress(), value);
-        return seg;
-    }
-
-    public static MemoryAddress allocate(MemoryAddress value, NativeScope scope) {
-        var addr = scope.allocate(LAYOUT);
-        handle.set(addr, value);
-        return addr;
-    }
-
-    public static MemorySegment allocateArray(int length) {
-        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
-        return MemorySegment.allocateNative(arrLayout);
-    }
-
-    public static MemoryAddress allocateArray(int length, NativeScope scope) {
-        var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
-        return scope.allocate(arrLayout);
-    }
-
-    public static long sizeof() {
-        return LAYOUT.byteSize();
-    }
-}
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
+++ /dev/null
@@ -1,63 +0,0 @@
-// Generated by jextract
-
-import java.lang.invoke.VarHandle;
-import java.nio.charset.Charset;
-import jdk.incubator.foreign.CSupport;
-import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.MemoryLayout;
-import jdk.incubator.foreign.MemorySegment;
-import jdk.incubator.foreign.NativeScope;
-import static jdk.incubator.foreign.CSupport.C_CHAR;
-
-public final class Cstring {
-    // don't create!
-    private Cstring() {
-    }
-
-    private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
-        return MemoryLayout.ofSequence(elemLayout)
-                .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
-    }
-    private final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);
-
-    public static void copy(MemoryAddress addr, String str) {
-        copy(addr, str.getBytes());
-    }
-
-    public static void copy(MemoryAddress addr, String str, Charset charset) {
-        copy(addr, str.getBytes(charset));
-    }
-
-    //where
-    private static void copy(MemoryAddress addr, byte[] bytes) {
-            var heapSegment = MemorySegment.ofArray(bytes);
-            addr.segment()
-                    .asSlice(addr.segmentOffset(), bytes.length)
-                    .copyFrom(heapSegment);
-            byteArrHandle.set(addr, (long)bytes.length, (byte)0);
-        }
-
-    public static MemorySegment toCString(String str) {
-         return CSupport.toCString(str);
-    }
-
-    public static MemorySegment toCString(String str, Charset charset) {
-         return CSupport.toCString(str, charset);
-    }
-
-    public static MemoryAddress toCString(String str, NativeScope scope) {
-        return CSupport.toCString(str, scope);
-    }
-
-    public static MemoryAddress toCString(String str, Charset charset, NativeScope scope) {
-        return CSupport.toCString(str, charset, scope);
-    }
-
-    public static String toJavaStringRestricted(MemoryAddress addr) {
-        return CSupport.toJavaStringRestricted(addr);
-    }
-
-    public static String toJavaString(MemoryAddress addr) {
-        return CSupport.toJavaString(addr);
-    }
-}
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
@@ -79,10 +79,23 @@
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
 
+    public static MemoryAddress asArrayRestricted(MemoryAddress addr, MemoryLayout layout, int numElements) {
+        return MemorySegment.ofNativeRestricted(addr, numElements * layout.byteSize(),
+               Thread.currentThread(), null, null).baseAddress();
+    }
+
+    public static MemoryAddress asArray(MemoryAddress addr, MemoryLayout layout, int numElements) {
+        var seg = addr.segment();
+        if (seg == null) {
+            throw new IllegalArgumentException("no underlying segment for the address");
+        }
+        return seg.asSlice(addr.segmentOffset(), numElements * layout.byteSize()).baseAddress();
+    }
+
     private static class VarargsInvoker {
         private static final MethodHandle INVOKE_MH;
         private final MemoryAddress symbol;
         private final MethodType varargs;
         private final FunctionDescriptor function;
diff a/test/jdk/tools/jextract/Test8244412.java b/test/jdk/tools/jextract/Test8244412.java
--- a/test/jdk/tools/jextract/Test8244412.java
+++ b/test/jdk/tools/jextract/Test8244412.java
@@ -39,14 +39,13 @@
     public void testPrimitiveTypedefs() {
         Path typedefsOutput = getOutputFilePath("typedefsgen");
         Path typedefsH = getInputFilePath("typedefs.h");
         run("-d", typedefsOutput.toString(), typedefsH.toString()).checkSuccess();
         try(Loader loader = classLoader(typedefsOutput)) {
-            Class<?> bytetCls = loader.loadClass("typedefs_h$byte_t");
-            assertNotNull(bytetCls);
-            Class<?> sizetCls = loader.loadClass("typedefs_h$mysize_t");
-            assertNotNull(sizetCls);
+            Class<?> headerCls = loader.loadClass("typedefs_h");
+            assertNotNull(findField(headerCls, "byte_t"));
+            assertNotNull(findField(headerCls, "mysize_t"));
         } finally {
             deleteDir(typedefsOutput);
         }
     }
 }
diff a/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java b/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
--- a/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
+++ b/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
@@ -21,15 +21,17 @@
  * questions.
  */
 
 import java.util.stream.DoubleStream;
 import java.util.stream.IntStream;
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.NativeScope;
 import org.testng.annotations.Test;
 import test.jextract.test8241925.*;
 import static org.testng.Assert.assertEquals;
 import static test.jextract.test8241925.test8241925_h.*;
+import static jdk.incubator.foreign.CSupport.*;
 
 /*
  * @test
  * @library ..
  * @modules jdk.incubator.jextract
@@ -40,40 +42,40 @@
  */
 public class LibTest8241925Test {
     @Test
     public void test() {
         try (var scope = NativeScope.unboundedScope()) {
-            var addr = Cint.allocate(12, scope);
-            assertEquals(Cint.get(addr), 12);
+            var addr = scope.allocate(C_INT, 12);
+            assertEquals(MemoryAccess.getInt(addr, 0), 12);
             square(addr);
-            assertEquals(Cint.get(addr), 144);
+            assertEquals(MemoryAccess.getInt(addr, 0), 144);
 
-            addr = Cdouble.allocate(12.0, scope);
-            assertEquals(Cdouble.get(addr), 12.0, 0.1);
+            addr = scope.allocate(C_DOUBLE, 12.0);
+            assertEquals(MemoryAccess.getDouble(addr, 0), 12.0, 0.1);
             square_fp(addr);
-            assertEquals(Cdouble.get(addr), 144.0, 0.1);
+            assertEquals(MemoryAccess.getDouble(addr, 0), 144.0, 0.1);
 
             int[] intArray = { 34, 67, 78, 8 };
-            addr = Cint.allocateArray(intArray, scope);
+            addr = scope.allocateArray(C_INT, intArray);
             int sum = sum(addr, intArray.length);
             assertEquals(sum, IntStream.of(intArray).sum());
-            int[] convertedArray = Cint.toJavaArray(addr.segment());
+            int[] convertedArray = addr.segment().toIntArray();
             assertEquals(convertedArray, intArray);
 
             double[] dblArray = { 34.5, 67.56, 78.2, 8.45 };
-            addr = Cdouble.allocateArray(dblArray, scope);
+            addr = scope.allocateArray(C_DOUBLE, dblArray);
             double sumd = sum_fp(addr, dblArray.length);
             assertEquals(sumd, DoubleStream.of(dblArray).sum(), 0.1);
-            double[] convertedDblArray = Cdouble.toJavaArray(addr.segment());
+            double[] convertedDblArray = addr.segment().toDoubleArray();
             for (int i = 0; i < dblArray.length; i++) {
                 assertEquals(dblArray[i], convertedDblArray[i], 0.1);
             }
 
-            assertEquals(Cstring.toJavaStringRestricted(name()), "java");
+            assertEquals(toJavaStringRestricted(name()), "java");
 
-            var dest = Cchar.allocateArray(12, scope);
-            Cstring.copy(dest, "hello ");
-            var src = Cstring.toCString("world", scope);
-            assertEquals(Cstring.toJavaStringRestricted(concatenate(dest, src)), "hello world");
+            var dest = scope.allocateArray(C_CHAR, 12);
+            dest.segment().copyFrom(toCString("hello "));
+            var src = toCString("world", scope);
+            assertEquals(toJavaStringRestricted(concatenate(dest, src)), "hello world");
         }
     }
 }
diff a/test/jdk/tools/jextract/test8244412/LibTest8244412Test.java b/test/jdk/tools/jextract/test8244412/LibTest8244412Test.java
--- a/test/jdk/tools/jextract/test8244412/LibTest8244412Test.java
+++ b/test/jdk/tools/jextract/test8244412/LibTest8244412Test.java
@@ -20,15 +20,15 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.NativeScope;
 
 import org.testng.annotations.Test;
-import test.jextract.test8244412.Clong_long;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
 import static test.jextract.test8244412.test8244412_h.*;
 
 /*
@@ -42,13 +42,12 @@
  */
 public class LibTest8244412Test {
     @Test
     public void test() {
         try (var scope = NativeScope.unboundedScope()) {
-            var addr = mysize_t.allocate(0L, scope);
-            assertEquals(mysize_t.get(addr), 0L);
-            mysize_t.set(addr, 13455566L);
-            assertEquals(mysize_t.get(addr), 13455566L);
-            assertTrue(mysize_t.sizeof() == Clong_long.sizeof());
+            var addr = scope.allocate(mysize_t, 0L);
+            assertEquals(MemoryAccess.getLong(addr, 0), 0L);
+            MemoryAccess.setLong(addr, 0, 13455566L);
+            assertEquals(MemoryAccess.getLong(addr, 0), 13455566L);
         }
     }
 }
diff a/test/jdk/tools/jextract/test8244959/Test8244959.java b/test/jdk/tools/jextract/test8244959/Test8244959.java
--- a/test/jdk/tools/jextract/test8244959/Test8244959.java
+++ b/test/jdk/tools/jextract/test8244959/Test8244959.java
@@ -24,12 +24,12 @@
 import org.testng.annotations.Test;
 
 import jdk.incubator.foreign.MemorySegment;
 
 import static org.testng.Assert.assertEquals;
-import static test.jextract.printf.Cstring.*;
 import static test.jextract.printf.printf_h.*;
+import static jdk.incubator.foreign.CSupport.*;
 
 /*
  * @test
  * @library ..
  * @modules jdk.incubator.jextract
diff a/test/jdk/tools/jextract/test8245003/Test8245003.java b/test/jdk/tools/jextract/test8245003/Test8245003.java
--- a/test/jdk/tools/jextract/test8245003/Test8245003.java
+++ b/test/jdk/tools/jextract/test8245003/Test8245003.java
@@ -23,10 +23,11 @@
 
 import org.testng.annotations.Test;
 import test.jextract.test8245003.*;
 import static org.testng.Assert.assertEquals;
 import static test.jextract.test8245003.test8245003_h.*;
+import static jdk.incubator.foreign.CSupport.*;
 
 /*
  * @test
  * @bug 8245003
  * @summary jextract does not generate accessor for MemorySegement typed values
@@ -53,12 +54,12 @@
     }
 
     @Test
     public void testArrayAccessor() {
         var addr = iarr$ADDR();
-        assertEquals(addr.segment().byteSize(), Cint.sizeof()*5);
-        int[] arr = Cint.toJavaArray(addr.segment());
+        assertEquals(addr.segment().byteSize(), C_INT.byteSize()*5);
+        int[] arr = addr.segment().toIntArray();
         assertEquals(arr.length, 5);
         assertEquals(arr[0], 2);
         assertEquals(arr[1], -2);
         assertEquals(arr[2], 42);
         assertEquals(arr[3], -42);
@@ -66,9 +67,9 @@
 
         addr = foo$ADDR();
         assertEquals(addr.segment().byteSize(), Foo.sizeof());
         assertEquals(Foo.count$get(addr), 37);
         var greeting = Foo.greeting$addr(addr);
-        byte[] barr = Cchar.toJavaArray(greeting.segment());
+        byte[] barr = greeting.segment().toByteArray();
         assertEquals(new String(barr), "hello");
     }
 }
diff a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
--- a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
+++ b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
@@ -19,18 +19,19 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.NativeScope;
 import org.testng.annotations.Test;
 import test.jextract.test8246341.*;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
 import static test.jextract.test8246341.test8246341_h.*;
-import static test.jextract.test8246341.Cstring.toJavaStringRestricted;
+import static jdk.incubator.foreign.CSupport.*;
 
 /*
  * @test
  * @library ..
  * @modules jdk.incubator.jextract
@@ -39,37 +40,42 @@
  * @summary jextract should generate Cpointer utilities class
  * @run driver JtregJextract -l Test8246341 -t test.jextract.test8246341 -- test8246341.h
  * @run testng/othervm -Dforeign.restricted=permit LibTest8246341Test
  */
 public class LibTest8246341Test {
+    private static MemoryAddress getPointerAt(MemoryAddress addr, int element) {
+        return MemoryAccess.getAddress(addr, element*C_POINTER.byteSize());
+    }
+
+    public static MemoryAddress allocatePointer(MemoryAddress value, NativeScope scope) {
+        var addr = scope.allocate(C_POINTER);
+        var handle = C_POINTER.varHandle(long.class);
+        handle.set(addr, value.toRawLongValue());
+        return addr;
+    }
+
     @Test
     public void testPointerArray() {
         boolean[] callbackCalled = new boolean[1];
         try (var callback = func$callback.allocate((argc, argv) -> {
             callbackCalled[0] = true;
-            var addr = Cpointer.asArrayRestricted(argv, argc);
+            var addr = RuntimeHelper.asArrayRestricted(argv, C_POINTER, argc);
             assertEquals(argc, 4);
-            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 0)), "java");
-            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 1)), "python");
-            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 2)), "javascript");
-            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 3)), "c++");
+            assertEquals(toJavaStringRestricted(getPointerAt(addr, 0)), "java");
+            assertEquals(toJavaStringRestricted(getPointerAt(addr, 1)), "python");
+            assertEquals(toJavaStringRestricted(getPointerAt(addr, 2)), "javascript");
+            assertEquals(toJavaStringRestricted(getPointerAt(addr, 3)), "c++");
         })) {
             func(callback.baseAddress());
         }
         assertTrue(callbackCalled[0]);
     }
 
     @Test
     public void testPointerAllocate() {
-        try (var scope = NativeScope.boundedScope(Cpointer.sizeof())) {
-            var addr = Cpointer.allocate(MemoryAddress.NULL, scope);
-            fillin(addr);
-            assertEquals(toJavaStringRestricted(Cpointer.get(addr)), "hello world");
-        }
-
-        try (var seg = Cpointer.allocate(MemoryAddress.NULL)) {
-            var addr = seg.baseAddress();
+        try (var scope = NativeScope.boundedScope(C_POINTER.byteSize())) {
+            var addr = allocatePointer(MemoryAddress.NULL, scope);
             fillin(addr);
-            assertEquals(toJavaStringRestricted(Cpointer.get(addr)), "hello world");
+            assertEquals(toJavaStringRestricted(getPointerAt(addr, 0)), "hello world");
         }
     }
 }
