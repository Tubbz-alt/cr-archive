diff a/doc/panama_jextract.md b/doc/panama_jextract.md
--- a/doc/panama_jextract.md
+++ b/doc/panama_jextract.md
@@ -84,11 +84,12 @@
 
 ### jextract Python.h
 
 ```sh
 
-jextract -l python2.7 \
+jextract \
+  -l python2.7 \
   -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \
   -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/python2.7/ \
   -t org.python \
    /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/python2.7/Python.h
 
@@ -96,22 +97,23 @@
 
 ### Java program that uses extracted Python interface
 
 ```java
 
-import org.python.Cstring;
+
+import static jdk.incubator.foreign.CSupport.*;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 // import jextracted python 'header' class
 import static org.python.RuntimeHelper.*;
 import static org.python.Python_h.*;
 
 public class PythonMain {
     public static void main(String[] args) {
         String script = "print(sum([33, 55, 66])); print('Hello from Python!')\n";
 
         Py_Initialize();
-        try (var s = Cstring.toCString(script)) {
+        try (var s = toCString(script)) {
             var str = s.baseAddress();
             PyRun_SimpleStringFlags(str, NULL);
             Py_Finalize();
         }
     }
@@ -133,36 +135,36 @@
 
 ### jextract readline.h
 
 ```sh
 
-jextract -l readline -t org.unix \
+jextract \
+  -l readline -t org.unix \
   -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \
    /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/readline/readline.h
 
-
 ```
 
 ### Java code that uses readline
 
 ```java
 
-import org.unix.Cstring;
 import static org.unix.RuntimeHelper.*;
 import static org.unix.readline_h.*;
+import static jdk.incubator.foreign.CSupport.*;
 
 public class Readline {
     public static void main(String[] args) {
-        try (var s = Cstring.toCString("name? ")) {
+        try (var s = toCString("name? ")) {
             var pstr = s.baseAddress();
             // call "readline" API
             var p = readline(pstr);
 
             // print char* as is
             System.out.println(p);
             // convert char* ptr from readline as Java String & print it
-            System.out.println("Hello, " + Cstring.toJavaStringRestricted(p));
+            System.out.println("Hello, " + toJavaStringRestricted(p));
         }
     }
 }
 
 ```
@@ -190,22 +192,23 @@
 
 ### Java code that uses libcurl
 
 ```java
 
-import org.unix.Cstring;
+
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 import static org.unix.RuntimeHelper.*;
 import static org.unix.curl_h.*;
+import static jdk.incubator.foreign.CSupport.*;
 
 public class CurlMain {
    public static void main(String[] args) {
        var urlStr = args[0];
        curl_global_init(CURL_GLOBAL_DEFAULT());
        var curl = curl_easy_init();
        if(!curl.equals(NULL)) {
-           try (var s = Cstring.toCString(urlStr)) {
+           try (var s = toCString(urlStr)) {
                var url = s.baseAddress();
                curl_easy_setopt(curl, CURLOPT_URL(), url);
                int res = curl_easy_perform(curl);
                if (res != CURLE_OK()) {
                    curl_easy_cleanup(curl);
@@ -262,16 +265,23 @@
 
 ### Java sample code that uses cblas library
 
 ```java
 
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.NativeScope;
 import blas.*;
 import static blas.RuntimeHelper.*;
 import static blas.cblas_h.*;
+import static jdk.incubator.foreign.CSupport.*;
 
 public class TestBlas {
+    private static double getDouble(MemoryAddress addr, int element) {
+        return MemoryAccess.getDouble(addr, element*C_DOUBLE.byteSize());
+    }
+
     public static void main(String[] args) {
         int Layout;
         int transa;
 
         double alpha, beta;
@@ -287,48 +297,25 @@
         incy = 1;
         alpha = 1;
         beta = 0;
 
         try (var scope = NativeScope.unboundedScope()) {
-            var a = Cdouble.allocateArray(m*n, scope);
-            var x = Cdouble.allocateArray(n, scope);
-            var y = Cdouble.allocateArray(n, scope);
-
-            /* The elements of the first column */
-            Cdouble.set(a, 0, 1.0);
-            Cdouble.set(a, 1, 2.0);
-            Cdouble.set(a, 2, 3.0);
-            Cdouble.set(a, 3, 4.0);
-            /* The elements of the second column */
-            Cdouble.set(a, m, 1.0);
-            Cdouble.set(a, m + 1, 1.0);
-            Cdouble.set(a, m + 2, 1.0);
-            Cdouble.set(a, m + 3, 1.0);
-            /* The elements of the third column */
-            Cdouble.set(a, m*2, 3.0);
-            Cdouble.set(a, m*2 + 1, 4.0);
-            Cdouble.set(a, m*2 + 2, 5.0);
-            Cdouble.set(a, m*2 + 3, 6.0);
-            /* The elements of the fourth column */
-            Cdouble.set(a, m*3, 5.0);
-            Cdouble.set(a, m*3 + 1, 6.0);
-            Cdouble.set(a, m*3 + 2, 7.0);
-            Cdouble.set(a, m*3 + 3, 8.0);
-            /* The elemetns of x and y */
-            Cdouble.set(x, 0, 1.0);
-            Cdouble.set(x, 1, 2.0);
-            Cdouble.set(x, 2, 1.0);
-            Cdouble.set(x, 3, 1.0);
-            Cdouble.set(y, 0, 0.0);
-            Cdouble.set(y, 1, 0.0);
-            Cdouble.set(y, 2, 0.0);
-            Cdouble.set(y, 3, 0.0);
+            var a = scope.allocateArray(C_DOUBLE, new double[] {
+                1.0, 2.0, 3.0, 4.0,
+                1.0, 1.0, 1.0, 1.0,
+                3.0, 4.0, 5.0, 6.0,
+                5.0, 6.0, 7.0, 8.0
+            });
+            var x = scope.allocateArray(C_DOUBLE, new double[] {
+                1.0, 2.0, 1.0, 1.0
+            });
+            var y = scope.allocateArray(C_DOUBLE, n);
 
             cblas_dgemv(Layout, transa, m, n, alpha, a, lda, x, incx, beta, y, incy);
             /* Print y */
             for (i = 0; i < n; i++) {
-                System.out.print(String.format(" y%d = %f\n", i, Cdouble.get(y, (long)i)));
+                System.out.print(String.format(" y%d = %f\n", i, getDouble(y, i)));
             }
         }
     }
 }
 
@@ -336,13 +323,14 @@
 
 ### Compiling and running the above BLAS sample
 
 ```sh
 
-java -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \
-    -Djava.library.path=/usr/local/opt/openblas/lib \
-    TestBlas.java
+jextract \
+  -C "-D FORCE_OPENBLAS_COMPLEX_STRUCT" \
+  -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \
+  -l openblas -t blas /usr/local/opt/openblas/include/cblas.h
 
 ```
 
 ## Using LAPACK library (Mac OS)
 
@@ -362,26 +350,28 @@
 
 ### Java sample code that uses LAPACK library
 
 ```java
 
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.NativeScope;
 import lapack.*;
 import static lapack.lapacke_h.*;
+import static jdk.incubator.foreign.CSupport.*;
 
 public class TestLapack {
     public static void main(String[] args) {
 
         /* Locals */
         try (var scope = NativeScope.unboundedScope()) {
-            var A = Cdouble.allocateArray(new double[]{
+            var A = scope.allocateArray(C_DOUBLE, new double[]{
                     1, 2, 3, 4, 5, 1, 3, 5, 2, 4, 1, 4, 2, 5, 3
-            }, scope);
-            var b = Cdouble.allocateArray(new double[]{
+            });
+            var b = scope.allocateArray(C_DOUBLE, new double[]{
                     -10, 12, 14, 16, 18, -3, 14, 12, 16, 16
-            }, scope);
+            });
             int info, m, n, lda, ldb, nrhs;
 
             /* Initialization */
             m = 5;
             n = 3;
@@ -410,11 +400,11 @@
     static void print_matrix_colmajor(String msg, int m, int n, MemoryAddress mat, int ldm) {
         int i, j;
         System.out.printf("\n %s\n", msg);
 
         for( i = 0; i < m; i++ ) {
-            for( j = 0; j < n; j++ ) System.out.printf(" %6.2f", Cdouble.get(mat, i+j*ldm));
+            for( j = 0; j < n; j++ ) System.out.printf(" %6.2f", MemoryAccess.getDouble(mat, C_DOUBLE.byteSize()*(i+j*ldm)));
             System.out.printf( "\n" );
         }
     }
 }
 
@@ -434,21 +424,24 @@
 
 ### jextract libproc.h
 
 ```sh
 
-jextract -t org.unix \
+jextract \
+  -t org.unix \
   -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \
   --filter libproc.h \
   /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/libproc.h
 
 ```
 
 ### Java program that uses libproc to list processes
 
 ```java
 
+import jdk.incubator.foreign.CSupport;
+import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.NativeScope;
 import org.unix.*;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 import static org.unix.libproc_h.*;
 
@@ -458,22 +451,22 @@
     public static void main(String[] args) {
         try (var scope = NativeScope.unboundedScope()) {
             // get the number of processes
             int numPids = proc_listallpids(NULL, 0);
             // allocate an array
-            var pids = Cint.allocateArray(numPids, scope);
+            var pids = scope.allocateArray(CSupport.C_INT, numPids);
             // list all the pids into the native array
             proc_listallpids(pids, numPids);
             // convert native array to java array
-            int[] jpids = Cint.toJavaArray(pids.segment());
+            int[] jpids = pids.segment().toIntArray();
             // buffer for process name
-            var nameBuf = Cchar.allocateArray(NAME_BUF_MAX,scope);
+            var nameBuf = scope.allocateArray(CSupport.C_CHAR, NAME_BUF_MAX);
             for (int i = 0; i < jpids.length; i++) {
                 int pid = jpids[i];
                 // get the process name
                 proc_name(pid, nameBuf, NAME_BUF_MAX);
-                String procName = Cstring.toJavaString(nameBuf);
+                String procName = CSupport.toJavaString(nameBuf);
                 // print pid and process name
                 System.out.printf("%d %s\n", pid, procName);
             }
         }
     }
@@ -502,11 +495,12 @@
 
 ### jextract git2.h
 
 ```sh
 
-jextract -t com.github -lgit2 \
+jextract \
+  -t com.github -lgit2 \
   -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/ \
   -I ${LIBGIT2_HOME}/include/ \
   -I ${LIBGIT2_HOME}/include/git2 \
   ${LIBGIT2_HOME}/include/git2.h
 
@@ -514,31 +508,40 @@
 
 ### Java program that uses libgit2 to clone github repo
 
 ```java
 
+import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.NativeScope;
 import static com.github.git2_h.*;
 import static jdk.incubator.foreign.CSupport.*;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 
 public class GitClone {
+    private static MemoryAddress allocatePointer(MemoryAddress value, NativeScope scope) {
+        var addr = scope.allocate(C_POINTER);
+        var handle = C_POINTER.varHandle(long.class);
+        handle.set(addr, value.toRawLongValue());
+        return addr;
+    }
+
     public static void main(String[] args) {
           if (args.length != 2) {
               System.err.println("java GitClone <url> <path>");
               System.exit(1);
           }
           git_libgit2_init();
           try (var scope = NativeScope.unboundedScope()) {
-              var repo = scope.allocate(C_POINTER, NULL);
+              var repo = allocatePointer(NULL, scope);
               var url = toCString(args[0], scope);
               var path = toCString(args[1], scope);
               System.out.println(git_clone(repo, url, path, NULL));
           }
           git_libgit2_shutdown();
     }
 }
+
 ```
 
 ### Compiling and running the libgit2 sample
 
 ```sh
@@ -566,108 +569,126 @@
 ```sh
 
 jextract \
   -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \
   /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sqlite3.h \
-  -t org.sqlite -lsqlite3
+  -t org.sqlite -lsqlite3 
 
 ```
 ### Java program that uses sqlite3
 
 ```java
 
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.NativeScope;
-import org.sqlite.Cpointer;
-import org.sqlite.Cstring;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 import static org.sqlite.sqlite3_h.*;
+import static org.sqlite.RuntimeHelper.*;
+import static jdk.incubator.foreign.CSupport.*;
 
 public class SqliteMain {
+   private static MemoryAddress allocatePointer(MemoryAddress value, NativeScope scope) {
+        var addr = scope.allocate(C_POINTER);
+        var handle = C_POINTER.varHandle(long.class);
+        handle.set(addr, value.toRawLongValue());
+        return addr;
+   }
+
+   private static MemoryAddress getPointer(MemoryAddress addr) {
+       return getPointer(addr, 0);
+   }
+
+   private static MemoryAddress getPointer(MemoryAddress addr, int element) {
+       return MemoryAccess.getAddress(addr, element*C_POINTER.byteSize());
+   }
+
    public static void main(String[] args) throws Exception {
         try (var scope = NativeScope.unboundedScope()) {
             // char** errMsgPtrPtr;
-            var errMsgPtrPtr = Cpointer.allocate(NULL, scope);
+            var errMsgPtrPtr = allocatePointer(NULL, scope);
 
             // sqlite3** dbPtrPtr;
-            var dbPtrPtr = Cpointer.allocate(NULL, scope);
+            var dbPtrPtr = allocatePointer(NULL, scope);
 
-            int rc = sqlite3_open(Cstring.toCString("employee.db",scope), dbPtrPtr);
+            int rc = sqlite3_open(toCString("employee.db",scope), dbPtrPtr);
             if (rc != 0) {
                 System.err.println("sqlite3_open failed: " + rc);
                 return;
             } else {
                 System.out.println("employee db opened");
             }
 
             // sqlite3* dbPtr;
-            var dbPtr = Cpointer.get(dbPtrPtr);
+            var dbPtr = getPointer(dbPtrPtr);
 
             // create a new table
-            var sql = Cstring.toCString(
+            var sql = toCString(
                 "CREATE TABLE EMPLOYEE ("  +
                 "  ID INT PRIMARY KEY NOT NULL," +
                 "  NAME TEXT NOT NULL,"    +
                 "  SALARY REAL NOT NULL )", scope);
 
             rc = sqlite3_exec(dbPtr, sql, NULL, NULL, errMsgPtrPtr);
 
             if (rc != 0) {
                 System.err.println("sqlite3_exec failed: " + rc);
-                System.err.println("SQL error: " + Cstring.toJavaStringRestricted(Cpointer.get(errMsgPtrPtr)));
-                sqlite3_free(Cpointer.get(errMsgPtrPtr));
+                System.err.println("SQL error: " + toJavaStringRestricted(getPointer(errMsgPtrPtr)));
+                sqlite3_free(getPointer(errMsgPtrPtr));
             } else {
                 System.out.println("employee table created");
             }
 
             // insert two rows
-            sql = Cstring.toCString(
+            sql = toCString(
                 "INSERT INTO EMPLOYEE (ID,NAME,SALARY) " +
                     "VALUES (134, 'Xyz', 200000.0); " +
                 "INSERT INTO EMPLOYEE (ID,NAME,SALARY) " +
                     "VALUES (333, 'Abc', 100000.0);", scope
             );
             rc = sqlite3_exec(dbPtr, sql, NULL, NULL, errMsgPtrPtr);
 
             if (rc != 0) {
                 System.err.println("sqlite3_exec failed: " + rc);
-                System.err.println("SQL error: " + Cstring.toJavaStringRestricted(Cpointer.get(errMsgPtrPtr)));
-                sqlite3_free(Cpointer.get(errMsgPtrPtr));
+                System.err.println("SQL error: " + toJavaStringRestricted(getPointer(errMsgPtrPtr)));
+                sqlite3_free(getPointer(errMsgPtrPtr));
             } else {
                 System.out.println("rows inserted");
             }
 
             int[] rowNum = new int[1];
             // callback to print rows from SELECT query
             var callback = sqlite3_exec$callback.allocate((a, argc, argv, columnNames) -> {
                 System.out.println("Row num: " + rowNum[0]++);
                 System.out.println("numColumns = " + argc);
-                argv = Cpointer.asArrayRestricted(argv, argc);
-                columnNames = Cpointer.asArrayRestricted(columnNames, argc);
+                argv = asArrayRestricted(argv, C_POINTER, argc);
+                columnNames = asArrayRestricted(columnNames, C_POINTER, argc);
                 for (int i = 0; i < argc; i++) {
-                     String name = Cstring.toJavaStringRestricted(Cpointer.get(columnNames, i));
-                     String value = Cstring.toJavaStringRestricted(Cpointer.get(argv, i));
+                     String name = toJavaStringRestricted(getPointer(columnNames, i));
+                     String value = toJavaStringRestricted(getPointer(argv, i));
                      System.out.printf("%s = %s\n", name, value);
                 }
                 return 0;
             }, scope);
 
             // select query
-            sql = Cstring.toCString("SELECT * FROM EMPLOYEE", scope);
+            sql = toCString("SELECT * FROM EMPLOYEE", scope);
             rc = sqlite3_exec(dbPtr, sql, callback, NULL, errMsgPtrPtr);
 
             if (rc != 0) {
                 System.err.println("sqlite3_exec failed: " + rc);
-                System.err.println("SQL error: " + Cstring.toJavaStringRestricted(Cpointer.get(errMsgPtrPtr)));
-                sqlite3_free(Cpointer.get(errMsgPtrPtr));
+                System.err.println("SQL error: " + toJavaStringRestricted(getPointer(errMsgPtrPtr)));
+                sqlite3_free(getPointer(errMsgPtrPtr));
             } else {
                 System.out.println("done");
             }
 
             sqlite3_close(dbPtr);
         }
     }
 }
+
 ```
 
 ### Compiling and running the sqlite3 sample
 
 ```sh
