diff a/test/jdk/java/foreign/TestSharedAccess.java b/test/jdk/java/foreign/TestSharedAccess.java
--- a/test/jdk/java/foreign/TestSharedAccess.java
+++ b/test/jdk/java/foreign/TestSharedAccess.java
@@ -60,11 +60,11 @@
             for (int i = 0 ; i < layout.elementCount().getAsLong() ; i++) {
                 setInt(s.baseAddress().addOffset(i * 4), 42);
             }
             List<Thread> threads = new ArrayList<>();
             List<Spliterator<MemorySegment>> spliterators = new ArrayList<>();
-            spliterators.add(s.spliterator(layout));
+            spliterators.add(MemorySegment.spliterator(s, layout));
             while (true) {
                 boolean progress = false;
                 List<Spliterator<MemorySegment>> newSpliterators = new ArrayList<>();
                 for (Spliterator<MemorySegment> spliterator : spliterators) {
                     Spliterator<MemorySegment> sub = spliterator.trySplit();
@@ -123,11 +123,12 @@
 
 
     @Test(expectedExceptions=IllegalStateException.class)
     public void testBadCloseWithPendingAcquire() throws InterruptedException {
         try (MemorySegment segment = MemorySegment.allocateNative(16)) {
-            Spliterator<MemorySegment> spliterator = segment.spliterator(MemoryLayout.ofSequence(16, MemoryLayouts.JAVA_BYTE));
+            Spliterator<MemorySegment> spliterator = MemorySegment.spliterator(segment,
+                    MemoryLayout.ofSequence(16, MemoryLayouts.JAVA_BYTE));
             Runnable r = () -> spliterator.forEachRemaining(s -> {
                 try {
                     Thread.sleep(5000 * 100);
                 } catch (InterruptedException ex) {
                     throw new AssertionError(ex);
