diff a/src/java.base/share/classes/java/nio/Buffer.java b/src/java.base/share/classes/java/nio/Buffer.java
--- a/src/java.base/share/classes/java/nio/Buffer.java
+++ b/src/java.base/share/classes/java/nio/Buffer.java
@@ -811,10 +811,15 @@
                 @Override
                 public void load(long address, boolean isSync, long size) {
                     MappedMemoryUtils.load(address, isSync, size);
                 }
 
+                @Override
+                public void unload(long address, boolean isSync, long size) {
+                    MappedMemoryUtils.unload(address, isSync, size);
+                }
+
                 @Override
                 public boolean isLoaded(long address, boolean isSync, long size) {
                     return MappedMemoryUtils.isLoaded(address, isSync, size);
                 }
             });
diff a/src/java.base/share/classes/java/nio/MappedMemoryUtils.java b/src/java.base/share/classes/java/nio/MappedMemoryUtils.java
--- a/src/java.base/share/classes/java/nio/MappedMemoryUtils.java
+++ b/src/java.base/share/classes/java/nio/MappedMemoryUtils.java
@@ -73,10 +73,22 @@
     }
 
     // not used, but a potential target for a store, see load() for details.
     private static byte unused;
 
+    static void unload(long address, boolean isSync, long size) {
+        // no need to load a sync mapped buffer
+        if (isSync) {
+            return;
+        }
+        if ((address == 0) || (size == 0))
+            return;
+        long offset = mappingOffset(address);
+        long length = mappingLength(offset, size);
+        unload0(mappingAddress(address, offset), length);
+    }
+
     static void force(FileDescriptor fd, long address, boolean isSync, long index, long length) {
         if (isSync) {
             // simply force writeback of associated cache lines
             Unsafe.getUnsafe().writebackMemory(address + index, length);
         } else {
@@ -88,10 +100,11 @@
 
     // native methods
 
     private static native boolean isLoaded0(long address, long length, int pageCount);
     private static native void load0(long address, long length);
+    private static native void unload0(long address, long length);
     private static native void force0(FileDescriptor fd, long address, long length);
 
     // utility methods
 
     // Returns the distance (in bytes) of the buffer start from the
diff a/src/java.base/share/classes/jdk/internal/access/JavaNioAccess.java b/src/java.base/share/classes/jdk/internal/access/JavaNioAccess.java
--- a/src/java.base/share/classes/jdk/internal/access/JavaNioAccess.java
+++ b/src/java.base/share/classes/jdk/internal/access/JavaNioAccess.java
@@ -97,10 +97,15 @@
     /**
      * Used by {@code jdk.internal.foreign.MappedMemorySegmentImpl} and byte buffer var handle views.
      */
     void load(long address, boolean isSync, long size);
 
+    /**
+     * Used by {@code jdk.internal.foreign.MappedMemorySegmentImpl}.
+     */
+    void unload(long address, boolean isSync, long size);
+
     /**
      * Used by {@code jdk.internal.foreign.MappedMemorySegmentImpl} and byte buffer var handle views.
      */
     boolean isLoaded(long address, boolean isSync, long size);
 }
diff a/src/java.base/unix/native/libnio/MappedMemoryUtils.c b/src/java.base/unix/native/libnio/MappedMemoryUtils.c
--- a/src/java.base/unix/native/libnio/MappedMemoryUtils.c
+++ b/src/java.base/unix/native/libnio/MappedMemoryUtils.c
@@ -112,10 +112,20 @@
     if (result == -1) {
         JNU_ThrowIOExceptionWithLastError(env, "madvise failed");
     }
 }
 
+JNIEXPORT void JNICALL
+Java_java_nio_MappedMemoryUtils_unload0(JNIEnv *env, jobject obj, jlong address,
+                                     jlong len)
+{
+    char *a = (char *)jlong_to_ptr(address);
+    int result = madvise((caddr_t)a, (size_t)len, MADV_DONTNEED);
+    if (result == -1) {
+        JNU_ThrowIOExceptionWithLastError(env, "madvise failed");
+    }
+}
 
 JNIEXPORT void JNICALL
 Java_java_nio_MappedMemoryUtils_force0(JNIEnv *env, jobject obj, jobject fdo,
                                       jlong address, jlong len)
 {
diff a/src/java.base/windows/native/libnio/MappedMemoryUtils.c b/src/java.base/windows/native/libnio/MappedMemoryUtils.c
--- a/src/java.base/windows/native/libnio/MappedMemoryUtils.c
+++ b/src/java.base/windows/native/libnio/MappedMemoryUtils.c
@@ -48,10 +48,17 @@
                                      jlong len)
 {
     // no madvise available
 }
 
+JNIEXPORT void JNICALL
+Java_java_nio_MappedMemoryUtils_unload0(JNIEnv *env, jobject obj, jlong address,
+                                     jlong len)
+{
+    // no madvise available
+}
+
 JNIEXPORT void JNICALL
 Java_java_nio_MappedMemoryUtils_force0(JNIEnv *env, jobject obj, jobject fdo,
                                       jlong address, jlong len)
 {
     void *a = (void *) jlong_to_ptr(address);
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MappedMemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MappedMemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MappedMemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MappedMemorySegment.java
@@ -92,16 +92,26 @@
 
     /**
      * Loads this segment's content into physical memory.
      *
      * <p> This method makes a best effort to ensure that, when it returns,
-     * this segment's content is resident in physical memory.  Invoking this
+     * this segment's contents is resident in physical memory.  Invoking this
      * method may cause some number of page faults and I/O operations to
      * occur. </p>
      */
     void load();
 
+    /**
+     * Unloads this segment's content from physical memory.
+     *
+     * <p> This method makes a best effort to ensure that this segment's contents are
+     * are no longer resident in physical memory. Accessing this segment's contents
+     * after invoking this method may cause some number of page faults and I/O operations to
+     * occur (as this segment's contents might need to be paged back in). </p>
+     */
+    void unload();
+
     /**
      * Tells whether or not this segment's content is resident in physical
      * memory.
      *
      * <p> A return value of {@code true} implies that it is highly likely
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MappedMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MappedMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MappedMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MappedMemorySegmentImpl.java
@@ -80,10 +80,15 @@
     @Override
     public void load() {
         nioAccess.load(min, unmapper.isSync(), length);
     }
 
+    @Override
+    public void unload() {
+        nioAccess.unload(min, unmapper.isSync(), length);
+    }
+
     @Override
     public boolean isLoaded() {
         return nioAccess.isLoaded(min, unmapper.isSync(), length);
     }
 
