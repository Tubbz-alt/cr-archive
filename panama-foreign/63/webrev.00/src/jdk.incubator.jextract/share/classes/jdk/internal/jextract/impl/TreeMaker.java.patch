diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
@@ -25,11 +25,10 @@
  */
 package jdk.internal.jextract.impl;
 
 import java.lang.constant.Constable;
 import java.nio.ByteOrder;
-import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.ConcurrentModificationException;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -43,18 +42,19 @@
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Position;
 import jdk.incubator.jextract.Type;
 import jdk.internal.clang.Cursor;
 import jdk.internal.clang.CursorKind;
-import jdk.internal.clang.SourceLocation;
 
 class TreeMaker {
     private final Map<Cursor, Declaration> treeCache = new HashMap<>();
+    private final PositionTracker tracker;
+    private final TypeMaker typeMaker = new TypeMaker(this);
 
-    public TreeMaker() {}
-
-    TypeMaker typeMaker = new TypeMaker(this);
+    public TreeMaker(PositionTracker tracker) {
+        this.tracker = tracker;
+    }
 
     public void freeze() {
         typeMaker.resolveTypeReferences();
     }
 
@@ -126,59 +126,12 @@
             default:
                 return null;
         }
     }
 
-    Position toPos(Cursor cursor) {
-        SourceLocation loc = cursor.getSourceLocation();
-        if (loc == null) {
-            return Position.NO_POSITION;
-        }
-        SourceLocation.Location sloc = loc.getFileLocation();
-        if (sloc == null) {
-            return Position.NO_POSITION;
-        }
-        return new CursorPosition(cursor);
-    }
-
-    static class CursorPosition implements Position {
-        private final Cursor cursor;
-        private final Path path;
-        private final int line;
-        private final int column;
-
-        CursorPosition(Cursor cursor) {
-            this.cursor = cursor;
-            SourceLocation.Location loc = cursor.getSourceLocation().getFileLocation();
-            this.path = loc.path();
-            this.line = loc.line();
-            this.column = loc.column();
-        }
-
-        @Override
-        public Path path() {
-            return path;
-        }
-
-        @Override
-        public int line() {
-            return line;
-        }
-
-        @Override
-        public int col() {
-            return column;
-        }
-
-        public Cursor cursor() {
-            return cursor;
-        }
-
-        @Override
-        public String toString() {
-            return PrettyPrinter.position(this);
-        }
+    Position toPos(Cursor c) {
+        return tracker.toPos(c);
     }
 
     public Declaration.Function createFunction(Cursor c) {
         checkCursor(c, CursorKind.FunctionDecl);
         List<Declaration.Variable> params = new ArrayList<>();
@@ -237,11 +190,12 @@
     }
 
     private List<Declaration> filterNestedDeclarations(List<Declaration> declarations) {
         return declarations.stream()
                 .filter(Objects::nonNull)
-                .filter(d -> isEnum(d) || !d.name().isEmpty() || ((CursorPosition)d.pos()).cursor.isAnonymousStruct())
+                .filter(d -> isEnum(d) || !d.name().isEmpty() ||
+                    ((CursorPosition) d.pos()).cursor().isAnonymousStruct())
                 .collect(Collectors.toList());
     }
 
     private Declaration.Scoped createTypedef(Cursor c) {
         Optional<Cursor> decl = c.children().findFirst();
