diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java
@@ -23,10 +23,15 @@
  *  questions.
  *
  */
 package jdk.internal.jextract.impl;
 
+import java.nio.file.Path;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Optional;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.JextractTask;
 import jdk.incubator.jextract.Position;
 import jdk.internal.clang.Cursor;
 import jdk.internal.clang.CursorKind;
@@ -35,22 +40,18 @@
 import jdk.internal.clang.LibClang;
 import jdk.internal.clang.SourceLocation;
 import jdk.internal.clang.SourceRange;
 import jdk.internal.clang.TranslationUnit;
 
-import java.nio.file.Path;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.Optional;
-
 class Parser {
     private final TreeMaker treeMaker;
     private final JextractTask.ConstantParser constantParser;
+    private final PositionTracker tracker;
 
     public Parser(JextractTask.ConstantParser constantParser) {
-        this.treeMaker = new TreeMaker();
+        this.tracker = new PositionTracker();
+        this.treeMaker = new TreeMaker(tracker);
         this.constantParser = constantParser;
     }
 
     public Declaration.Scoped parse(Path path, Collection<String> args) {
         final Index index = LibClang.createIndex(false);
@@ -66,23 +67,24 @@
         JextractTask.ConstantParser constantParser = this.constantParser != null ?
                 this.constantParser : new DefaultConstantParser(new MacroParserImpl(tu, args));
 
         List<Declaration> decls = new ArrayList<>();
         Cursor tuCursor = tu.getCursor();
+        tracker.start(path);
         tuCursor.children().
             forEach(c -> {
+                tracker.track(c);
                 SourceLocation loc = c.getSourceLocation();
                 if (loc == null) {
                     return;
                 }
 
                 SourceLocation.Location src = loc.getFileLocation();
                 if (src == null) {
                     return;
                 }
 
-
                 if (c.isDeclaration()) {
                     if (c.kind() == CursorKind.UnexposedDecl ||
                         c.kind() == CursorKind.Namespace) {
                         c.children().map(treeMaker::createTree)
                                 .filter(t -> t != null)
@@ -121,14 +123,14 @@
             this.macroParser = macroParser;
         }
 
         @Override
         public Optional<Declaration.Constant> parseConstant(Position pos, String name, String[] tokens) {
-            if (!(pos instanceof TreeMaker.CursorPosition)) {
+            if (!(pos instanceof CursorPosition)) {
                 return Optional.empty();
             } else {
-                Cursor cursor = ((TreeMaker.CursorPosition)pos).cursor();
+                Cursor cursor = ((CursorPosition)pos).cursor();
                 if (cursor.isMacroFunctionLike()) {
                     return Optional.empty();
                 } else {
                     return Optional.ofNullable(treeMaker.createMacro(cursor, macroParser.eval(name, tokens)));
                 }
