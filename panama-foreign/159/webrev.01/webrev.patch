diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
@@ -111,37 +111,43 @@
     }
 
     public void emitPrimitiveTypedef(Type.Primitive primType, String className) {
         Type.Primitive.Kind kind = primType.kind();
         if (primitiveKindSupported(kind)) {
-            incrAlign();
-            indent();
-            sb.append(PUB_MODS);
-            sb.append("class ");
-            sb.append(className);
-            sb.append(" extends ");
-            sb.append("C" + kind.typeName().replace(" ", "_"));
-            sb.append(" {\n");
-            incrAlign();
-            indent();
-            // private constructor
-            sb.append("private ");
-            sb.append(className);
-            sb.append("() {}");
-            decrAlign();
-            sb.append("}\n");
-            decrAlign();
+            String superClassName = "C" + kind.typeName().replace(" ", "_");
+            emitTypedef(className, superClassName);
         }
     }
 
     private boolean primitiveKindSupported(Type.Primitive.Kind kind) {
         return switch(kind) {
             case Short, Int, Long, LongLong, Float, Double, LongDouble, Char -> true;
             default -> false;
         };
     }
 
+    public void emitTypedef(String className, String superClassName) {
+        incrAlign();
+        indent();
+        sb.append(PUB_MODS);
+        sb.append("class ");
+        sb.append(className);
+        sb.append(" extends ");
+        sb.append(superClassName);
+        sb.append(" {\n");
+        incrAlign();
+        indent();
+        // private constructor
+        sb.append("private ");
+        sb.append(className);
+        sb.append("() {}\n");
+        decrAlign();
+        indent();
+        sb.append("}\n");
+        decrAlign();
+    }
+
     private void addFunctionalFactory(String className, MethodType mtype, FunctionDescriptor fDesc) {
         indent();
         sb.append(PUB_MODS + "MemorySegment allocate(" + className + " fi) {\n");
         incrAlign();
         indent();
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -44,12 +44,14 @@
 import java.net.URL;
 import java.net.URISyntaxException;
 import java.nio.file.Files;
 import java.nio.file.Paths;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 import java.util.stream.Collectors;
 
 /*
  * Scan a header file and generate Java source items for entities defined in that header
@@ -66,10 +68,11 @@
     protected final ConstantHelper constantHelper;
     protected final TypeTranslator typeTranslator = new TypeTranslator();
     private final String clsName;
     private final String pkgName;
     private StructBuilder structBuilder;
+    private Map<Declaration, String> structClassNames = new HashMap<>();
     private List<String> structSources = new ArrayList<>();
     private Set<String> nestedClassNames = new HashSet<>();
     private int nestedClassNameCount = 0;
     /*
      * We may have case-insensitive name collision! A C program may have
@@ -82,10 +85,14 @@
      */
     private String uniqueNestedClassName(String name) {
         return nestedClassNames.add(name.toLowerCase())? name : (name + "$" + nestedClassNameCount++);
     }
 
+    private String structClassName(Declaration decl) {
+        return structClassNames.computeIfAbsent(decl, d -> uniqueNestedClassName("C" + d.name()));
+    }
+
     // have we seen this Variable earlier?
     protected boolean variableSeen(Declaration.Variable tree) {
         return !variables.add(tree);
     }
 
@@ -229,28 +236,23 @@
     public Void visitScoped(Declaration.Scoped d, Declaration parent) {
         if (d.layout().isEmpty()) {
             //skip decl-only
             return null;
         }
-        String name = d.name();
-        if (parent instanceof Declaration.Typedef) {
-            name = parent.name();
-        }
-
         boolean structClass = false;
         StructBuilder oldStructBuilder = this.structBuilder;
         if (!d.name().isEmpty() || !isRecord(parent)) {
             //only add explicit struct layout if the struct is not to be flattened inside another struct
             switch (d.kind()) {
                 case STRUCT:
                 case UNION: {
                     structClass = true;
-                    String structClassName = uniqueNestedClassName("C" + name);
-                    this.structBuilder = new StructBuilder(structClassName, pkgName, constantHelper);
+                    String className = structClassName(d.name().isEmpty() ? parent : d);
+                    this.structBuilder = new StructBuilder(className, pkgName, constantHelper);
                     structBuilder.incrAlign();
                     structBuilder.classBegin();
-                    structBuilder.addLayoutGetter(structClassName, d.layout().get());
+                    structBuilder.addLayoutGetter(className, d.layout().get());
                     break;
                 }
             }
         }
         d.members().forEach(fieldTree -> fieldTree.accept(this, d.name().isEmpty() ? parent : d));
@@ -319,11 +321,23 @@
     public Void visitTypedef(Declaration.Typedef tree, Declaration parent) {
         Type type = tree.type();
         if (type instanceof Type.Declared) {
             Declaration.Scoped s = ((Type.Declared) type).tree();
             if (!s.name().equals(tree.name())) {
-                return visitScoped(s, tree);
+                switch (s.kind()) {
+                    case STRUCT:
+                    case UNION: {
+                        if (s.name().isEmpty()) {
+                            visitScoped(s, tree);
+                        } else {
+                            builder.emitTypedef(uniqueNestedClassName("C" + tree.name()), structClassName(s));
+                        }
+                    }
+                    break;
+                    default:
+                        visitScoped(s, tree);
+                }
             }
         } else if (type instanceof Type.Primitive) {
              builder.emitPrimitiveTypedef((Type.Primitive)type, uniqueNestedClassName("C" + tree.name()));
         }
         return null;
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
@@ -76,13 +76,13 @@
         for (Diagnostic diag : getDiagnostics()) {
             dh.accept(diag);
         }
     }
 
-    static long FILENAME_OFFSET = Index_h.CXUnsavedFile$LAYOUT.offset(MemoryLayout.PathElement.groupElement("Filename")) / 8;
-    static long CONTENTS_OFFSET = Index_h.CXUnsavedFile$LAYOUT.offset(MemoryLayout.PathElement.groupElement("Contents")) / 8;
-    static long LENGTH_OFFSET = Index_h.CXUnsavedFile$LAYOUT.offset(MemoryLayout.PathElement.groupElement("Length")) / 8;
+    static long FILENAME_OFFSET = Index_h.CXUnsavedFile$LAYOUT.bitOffset(MemoryLayout.PathElement.groupElement("Filename")) / 8;
+    static long CONTENTS_OFFSET = Index_h.CXUnsavedFile$LAYOUT.bitOffset(MemoryLayout.PathElement.groupElement("Contents")) / 8;
+    static long LENGTH_OFFSET = Index_h.CXUnsavedFile$LAYOUT.bitOffset(MemoryLayout.PathElement.groupElement("Length")) / 8;
 
     public void reparse(Index.UnsavedFile... inMemoryFiles) {
         try (AllocationScope scope = new AllocationScope()) {
             MemorySegment files = inMemoryFiles.length == 0 ?
                     null :
diff a/test/jdk/tools/jextract/RepeatedDeclsTest.java b/test/jdk/tools/jextract/RepeatedDeclsTest.java
--- a/test/jdk/tools/jextract/RepeatedDeclsTest.java
+++ b/test/jdk/tools/jextract/RepeatedDeclsTest.java
@@ -82,17 +82,25 @@
             checkIntGetter(cls, "C", 0);
             checkIntGetter(cls, "M", 1);
             checkIntGetter(cls, "Y", 2);
 
             // check Point layout
-            checkPoint(loader.loadClass("repeatedDecls_h$CPoint"));
-            checkPoint(loader.loadClass("repeatedDecls_h$CPoint_t"));
-            checkPoint(loader.loadClass("repeatedDecls_h$CPOINT$0"));
+            Class<?> pointCls = loader.loadClass("repeatedDecls_h$CPoint");
+            checkPoint(pointCls);
+            Class<?> point_tCls = loader.loadClass("repeatedDecls_h$CPoint_t");
+            checkPoint(point_tCls);
+            assertTrue(pointCls.isAssignableFrom(point_tCls));
+            Class<?> point$0Cls = loader.loadClass("repeatedDecls_h$CPOINT$0");
+            checkPoint(point$0Cls);
+            assertTrue(pointCls.isAssignableFrom(point$0Cls));
 
             // check Point3D layout
-            checkPoint3D(loader.loadClass("repeatedDecls_h$CPoint3D"));
-            checkPoint3D(loader.loadClass("repeatedDecls_h$CPoint3D_t"));
+            Class<?> point3DCls = loader.loadClass("repeatedDecls_h$CPoint3D");
+            checkPoint3D(point3DCls);
+            Class<?> point3D_tCls = loader.loadClass("repeatedDecls_h$CPoint3D_t");
+            checkPoint3D(point3D_tCls);
+            assertTrue(point3DCls.isAssignableFrom(point3D_tCls));
         } finally {
             deleteDir(repeatedDeclsOutput);
         }
     }
 
