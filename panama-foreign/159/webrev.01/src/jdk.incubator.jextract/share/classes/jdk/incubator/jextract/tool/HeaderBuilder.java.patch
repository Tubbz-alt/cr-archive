diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
@@ -111,37 +111,43 @@
     }
 
     public void emitPrimitiveTypedef(Type.Primitive primType, String className) {
         Type.Primitive.Kind kind = primType.kind();
         if (primitiveKindSupported(kind)) {
-            incrAlign();
-            indent();
-            sb.append(PUB_MODS);
-            sb.append("class ");
-            sb.append(className);
-            sb.append(" extends ");
-            sb.append("C" + kind.typeName().replace(" ", "_"));
-            sb.append(" {\n");
-            incrAlign();
-            indent();
-            // private constructor
-            sb.append("private ");
-            sb.append(className);
-            sb.append("() {}");
-            decrAlign();
-            sb.append("}\n");
-            decrAlign();
+            String superClassName = "C" + kind.typeName().replace(" ", "_");
+            emitTypedef(className, superClassName);
         }
     }
 
     private boolean primitiveKindSupported(Type.Primitive.Kind kind) {
         return switch(kind) {
             case Short, Int, Long, LongLong, Float, Double, LongDouble, Char -> true;
             default -> false;
         };
     }
 
+    public void emitTypedef(String className, String superClassName) {
+        incrAlign();
+        indent();
+        sb.append(PUB_MODS);
+        sb.append("class ");
+        sb.append(className);
+        sb.append(" extends ");
+        sb.append(superClassName);
+        sb.append(" {\n");
+        incrAlign();
+        indent();
+        // private constructor
+        sb.append("private ");
+        sb.append(className);
+        sb.append("() {}\n");
+        decrAlign();
+        indent();
+        sb.append("}\n");
+        decrAlign();
+    }
+
     private void addFunctionalFactory(String className, MethodType mtype, FunctionDescriptor fDesc) {
         indent();
         sb.append(PUB_MODS + "MemorySegment allocate(" + className + " fi) {\n");
         incrAlign();
         indent();
