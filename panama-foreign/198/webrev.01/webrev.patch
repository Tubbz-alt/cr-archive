diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
@@ -195,11 +195,11 @@
     public static Primitive.Kind valueLayoutForSize(long size) {
         switch ((int)size) {
             case 8: return Primitive.Kind.Char;
             case 16: return Primitive.Kind.Short;
             case 32: return Primitive.Kind.Int;
-            case 64: return CSupport.getSystemLinker().name().equals(CSupport.Win64.NAME) ?
+            case 64: return abi.name().equals(CSupport.Win64.NAME) ?
                     Primitive.Kind.LongLong : Primitive.Kind.Long;
             default:
                 throw new IllegalStateException("Cannot infer container layout");
         }
     }
diff a/test/jdk/java/jextract/Test8239490.h b/test/jdk/java/jextract/Test8239490.h
--- a/test/jdk/java/jextract/Test8239490.h
+++ b/test/jdk/java/jextract/Test8239490.h
@@ -30,5 +30,11 @@
 struct Bar {
     unsigned int x:1;
     unsigned int y:31;
     struct Foo z[1];
 };
+
+struct Baz {
+    unsigned long x:1;
+    unsigned long y:63;
+    struct Bar z[1];
+};
diff a/test/jdk/java/jextract/Test8239490.java b/test/jdk/java/jextract/Test8239490.java
--- a/test/jdk/java/jextract/Test8239490.java
+++ b/test/jdk/java/jextract/Test8239490.java
@@ -53,7 +53,18 @@
         Declaration.Scoped bitfieldsBar = checkBitfields(structBar, "", "x", "y");
         for (int i = 0 ; i < barBitfieldNames.length ; i++) {
             checkBitField(bitfieldsBar, barBitfieldNames[i], intType, barBitfieldSizes[i]);
         }
         checkField(structBar, "z", Type.array(1, Type.declared(structFoo)));
+
+        // check Baz
+        String[] bazBitfieldNames = { "x", "y" };
+        int[] bazBitfieldSizes = { 1, 63 };
+        Declaration.Scoped structBaz = checkStruct(d, "Baz", "", "z");
+        Declaration.Scoped bitfieldsBaz = checkBitfields(structBaz, "", "x", "y");
+        Type longType = ((Declaration.Variable)bitfieldsBaz.members().get(0)).type();
+        for (int i = 0 ; i < bazBitfieldNames.length ; i++) {
+            checkBitField(bitfieldsBaz, bazBitfieldNames[i], longType, bazBitfieldSizes[i]);
+        }
+        checkField(structBaz, "z", Type.array(1, Type.declared(structBar)));
     }
 }
