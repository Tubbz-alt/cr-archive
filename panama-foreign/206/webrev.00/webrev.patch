diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
@@ -52,14 +52,10 @@
     public static ForeignLinker getSystemLinker() {
         Utils.checkRestrictedAccess("CSupport.getSystemLinker");
         return SharedUtils.getSystemLinker();
     }
 
-    public static VaList newVaList(Consumer<VaList.Builder> actions) {
-        return SharedUtils.newVaList(actions);
-    }
-
     /**
      * An interface that models a C {@code va_list}.
      *
      * Per the C specification (see C standard 6.5.2.2 Function calls - item 6),
      * arguments to variadic calls are erased by way of 'default argument promotions',
@@ -74,136 +70,162 @@
         /**
          * Reads a value into an {@code int}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code int}
+         * @throws IllegalStateException if the C {@code va_list} associated with this instance is no longer valid
+         * (see {@link #close()}).
          */
         int vargAsInt(MemoryLayout layout);
 
         /**
          * Reads a value into a {@code long}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code long}
+         * @throws IllegalStateException if the C {@code va_list} associated with this instance is no longer valid
+         * (see {@link #close()}).
          */
         long vargAsLong(MemoryLayout layout);
 
         /**
          * Reads a value into a {@code double}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code double}
+         * @throws IllegalStateException if the C {@code va_list} associated with this instance is no longer valid
+         * (see {@link #close()}).
          */
         double vargAsDouble(MemoryLayout layout);
 
         /**
          * Reads a value into a {@code MemoryAddress}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code MemoryAddress}
+         * @throws IllegalStateException if the C {@code va_list} associated with this instance is no longer valid
+         * (see {@link #close()}).
          */
         MemoryAddress vargAsAddress(MemoryLayout layout);
 
         /**
          * Reads a value into a {@code MemorySegment}
          *
          * @param layout the layout of the value
          * @return the value read as an {@code MemorySegment}
+         * @throws IllegalStateException if the C {@code va_list} associated with this instance is no longer valid
+         * (see {@link #close()}).
          */
         MemorySegment vargAsSegment(MemoryLayout layout);
 
         /**
          * Skips a number of va arguments with the given memory layouts.
          *
          * @param layouts the layout of the value
+         * @throws IllegalStateException if the C {@code va_list} associated with this instance is no longer valid
+         * (see {@link #close()}).
          */
-        void skip(MemoryLayout...layouts);
+        void skip(MemoryLayout... layouts);
 
         /**
-         * A predicate used to check if this va list is alive,
-         * or in other words; if {@code close()} has been called on this
-         * va list.
+         * A predicate used to check if the memory associated with the C {@code va_list} modelled
+         * by this instance is still valid; or, in other words, if {@code close()} has been called on this
+         * instance.
          *
-         * @return true if this va list is still alive.
+         * @return true, if the memory associated with the C {@code va_list} modelled by this instance is still valid
          * @see #close()
          */
         boolean isAlive();
 
         /**
-         * Closes this va list, releasing any resources it was using.
+         * Releases the underlying C {@code va_list} modelled by this instance. As a result, subsequent attempts to call
+         * operations on this instance (e.g. {@link #copy()} will fail with an exception.
          *
          * @see #isAlive()
          */
         void close();
 
         /**
-         * Copies this va list.
+         * Copies this C {@code va_list}.
          *
-         * @return a copy of this va list.
+         * @return a copy of this C {@code va_list}.
+         * @throws IllegalStateException if the C {@code va_list} associated with this instance is no longer valid
+         * (see {@link #close()}).
          */
         VaList copy();
 
         /**
-         * Returns the underlying memory address of this va list.
+         * Returns the memory address of the C {@code va_list} associated with this instance.
          *
-         * @return the address
+         * @return the memory address of the C {@code va_list} associated with this instance.
          */
-        MemoryAddress toAddress();
+        MemoryAddress address();
+
+        /**
+         * Constructs a new {@code VaList} instance out of a memory address pointing to an existing C {@code va_list}.
+         *
+         * @param address a memory address pointing to an existing C {@code va_list}.
+         * @return a new {@code VaList} instance backed by the C {@code va_list} at {@code address}.
+         */
+        static VaList ofAddress(MemoryAddress address) {
+            return SharedUtils.newVaListOfAddress(address);
+        }
 
         /**
-         * Constructs a {@code VaList} out of the memory address of a va_list.
+         * Constructs a new {@code VaList} using a builder (see {@link Builder}).
          *
-         * @param ma the memory address
-         * @return the new {@code VaList}.
+         * @param actions a consumer for a builder (see {@link Builder}) which can be used to specify the contents
+         *                of the underlying C {@code va_list}.
+         * @return a new {@code VaList} instance backed a fresh C {@code va_list}.
          */
-        static VaList ofAddress(MemoryAddress ma) {
-            return SharedUtils.newVaListOfAddress(ma);
+        static VaList make(Consumer<VaList.Builder> actions) {
+            return SharedUtils.newVaList(actions);
         }
 
         /**
-         * A builder interface used to construct a va list.
+         * A builder interface used to construct a C {@code va_list}.
          */
         interface Builder {
 
             /**
-             * Adds a native value represented as an {@code int} to the va list.
+             * Adds a native value represented as an {@code int} to the C {@code va_list} being constructed.
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as an {@code int}.
              * @return this builder.
              */
             Builder vargFromInt(MemoryLayout layout, int value);
 
             /**
-             * Adds a native value represented as a {@code long} to the va list.
+             * Adds a native value represented as a {@code long} to the C {@code va_list} being constructed.
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as a {@code long}.
              * @return this builder.
              */
             Builder vargFromLong(MemoryLayout layout, long value);
 
             /**
-             * Adds a native value represented as a {@code double} to the va list.
+             * Adds a native value represented as a {@code double} to the C {@code va_list} being constructed.
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as a {@code double}.
              * @return this builder.
              */
             Builder vargFromDouble(MemoryLayout layout, double value);
 
             /**
-             * Adds a native value represented as a {@code MemoryAddress} to the va list.
+             * Adds a native value represented as a {@code MemoryAddress} to the C {@code va_list} being constructed.
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as a {@code MemoryAddress}.
              * @return this builder.
              */
             Builder vargFromAddress(MemoryLayout layout, MemoryAddress value);
 
             /**
-             * Adds a native value represented as a {@code MemorySegment} to the va list.
+             * Adds a native value represented as a {@code MemorySegment} to the C {@code va_list} being constructed.
              *
              * @param layout the native layout of the value.
              * @param value the value, represented as a {@code MemorySegment}.
              * @return this builder.
              */
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java
@@ -290,11 +290,11 @@
         copy.copyFrom(segment);
         return new SysVVaList(copy);
     }
 
     @Override
-    public MemoryAddress toAddress() {
+    public MemoryAddress address() {
         return segment.baseAddress();
     }
 
     private static boolean isRegOverflow(long currentGPOffset, long currentFPOffset, TypeClass typeClass) {
         return currentGPOffset > MAX_GP_OFFSET - typeClass.nIntegerRegs() * GP_SLOT_SIZE
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
@@ -158,11 +158,11 @@
     public CSupport.VaList copy() {
         return WinVaList.ofAddress(ptr);
     }
 
     @Override
-    public MemoryAddress toAddress() {
+    public MemoryAddress address() {
         return ptr;
     }
 
     @Override
     public boolean isAlive() {
diff a/test/jdk/java/foreign/valist/VaListTest.java b/test/jdk/java/foreign/valist/VaListTest.java
--- a/test/jdk/java/foreign/valist/VaListTest.java
+++ b/test/jdk/java/foreign/valist/VaListTest.java
@@ -128,22 +128,22 @@
     private static final VarHandle VH_Point_x = Point_LAYOUT.varHandle(int.class, groupElement("x"));
     private static final VarHandle VH_Point_y = Point_LAYOUT.varHandle(int.class, groupElement("y"));
 
     @Test
     public void testIntSum() throws Throwable {
-        try (VaList vaList = CSupport.newVaList(b ->
+        try (VaList vaList = VaList.make(b ->
                 b.vargFromInt(C_INT, 10)
                  .vargFromInt(C_INT, 15)
                  .vargFromInt(C_INT, 20))) {
             int x = (int) MH_sumInts.invokeExact(3, vaList);
             assertEquals(x, 45);
         }
     }
 
     @Test
     public void testDoubleSum() throws Throwable {
-        try (VaList vaList = CSupport.newVaList(b ->
+        try (VaList vaList = VaList.make(b ->
                 b.vargFromDouble(C_DOUBLE, 3.0D)
                  .vargFromDouble(C_DOUBLE, 4.0D)
                  .vargFromDouble(C_DOUBLE, 5.0D))) {
             double x = (double) MH_sumDoubles.invokeExact(3, vaList);
             assertEquals(x, 12.0D);
@@ -152,11 +152,11 @@
 
     @Test
     public void testVaListMemoryAddress() throws Throwable {
         try (MemorySegment msInt = MemorySegment.allocateNative(C_INT)) {
             VH_int.set(msInt.baseAddress(), 10);
-            try (VaList vaList = CSupport.newVaList(b -> b.vargFromAddress(C_POINTER, msInt.baseAddress()))) {
+            try (VaList vaList = VaList.make(b -> b.vargFromAddress(C_POINTER, msInt.baseAddress()))) {
                 int x = (int) MH_getInt.invokeExact(vaList);
                 assertEquals(x, 10);
             }
         }
     }
@@ -165,11 +165,11 @@
     public void testWinStructByValue() throws Throwable {
         try (MemorySegment struct = MemorySegment.allocateNative(Point_LAYOUT)) {
             VH_Point_x.set(struct.baseAddress(), 5);
             VH_Point_y.set(struct.baseAddress(), 10);
 
-            try (VaList vaList = CSupport.newVaList(b -> b.vargFromSegment(Point_LAYOUT, struct))) {
+            try (VaList vaList = VaList.make(b -> b.vargFromSegment(Point_LAYOUT, struct))) {
                 int sum = (int) MH_sumStruct.invokeExact(vaList);
                 assertEquals(sum, 15);
             }
         }
     }
@@ -178,11 +178,11 @@
     public void testWinStructByReference() throws Throwable {
         try (MemorySegment struct = MemorySegment.allocateNative(BigPoint_LAYOUT)) {
             VH_BigPoint_x.set(struct.baseAddress(), 5);
             VH_BigPoint_y.set(struct.baseAddress(), 10);
 
-            try (VaList vaList = CSupport.newVaList(b -> b.vargFromSegment(BigPoint_LAYOUT, struct))) {
+            try (VaList vaList = VaList.make(b -> b.vargFromSegment(BigPoint_LAYOUT, struct))) {
                 long sum = (long) MH_sumBigStruct.invokeExact(vaList);
                 assertEquals(sum, 15);
             }
         }
     }
