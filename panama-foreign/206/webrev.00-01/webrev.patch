diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
@@ -173,11 +173,11 @@
         /**
          * Constructs a new {@code VaList} using a builder (see {@link Builder}).
          *
          * @param actions a consumer for a builder (see {@link Builder}) which can be used to specify the contents
          *                of the underlying C {@code va_list}.
-         * @return a new {@code VaList} instance backed a fresh C {@code va_list}.
+         * @return a new {@code VaList} instance backed by a fresh C {@code va_list}.
          */
         static VaList make(Consumer<VaList.Builder> actions) {
             return SharedUtils.newVaList(actions);
         }
 
diff a/test/jdk/java/foreign/StdLibTest.java b/test/jdk/java/foreign/StdLibTest.java
--- a/test/jdk/java/foreign/StdLibTest.java
+++ b/test/jdk/java/foreign/StdLibTest.java
@@ -357,11 +357,11 @@
         }
 
         int vprintf(String format, List<PrintfArg> args) throws Throwable {
             try (MemorySegment formatStr = toCString(format)) {
                 return (int)vprintf.invokeExact(formatStr.baseAddress(),
-                        newVaList(b -> args.forEach(a -> a.accept(b))));
+                        VaList.make(b -> args.forEach(a -> a.accept(b))));
             }
         }
 
         private MethodHandle specializedPrintf(List<PrintfArg> args) {
             //method type
