diff a/test/jdk/java/foreign/valist/VaListTest.java b/test/jdk/java/foreign/valist/VaListTest.java
--- a/test/jdk/java/foreign/valist/VaListTest.java
+++ b/test/jdk/java/foreign/valist/VaListTest.java
@@ -128,22 +128,22 @@
     private static final VarHandle VH_Point_x = Point_LAYOUT.varHandle(int.class, groupElement("x"));
     private static final VarHandle VH_Point_y = Point_LAYOUT.varHandle(int.class, groupElement("y"));
 
     @Test
     public void testIntSum() throws Throwable {
-        try (VaList vaList = CSupport.newVaList(b ->
+        try (VaList vaList = VaList.make(b ->
                 b.vargFromInt(C_INT, 10)
                  .vargFromInt(C_INT, 15)
                  .vargFromInt(C_INT, 20))) {
             int x = (int) MH_sumInts.invokeExact(3, vaList);
             assertEquals(x, 45);
         }
     }
 
     @Test
     public void testDoubleSum() throws Throwable {
-        try (VaList vaList = CSupport.newVaList(b ->
+        try (VaList vaList = VaList.make(b ->
                 b.vargFromDouble(C_DOUBLE, 3.0D)
                  .vargFromDouble(C_DOUBLE, 4.0D)
                  .vargFromDouble(C_DOUBLE, 5.0D))) {
             double x = (double) MH_sumDoubles.invokeExact(3, vaList);
             assertEquals(x, 12.0D);
@@ -152,11 +152,11 @@
 
     @Test
     public void testVaListMemoryAddress() throws Throwable {
         try (MemorySegment msInt = MemorySegment.allocateNative(C_INT)) {
             VH_int.set(msInt.baseAddress(), 10);
-            try (VaList vaList = CSupport.newVaList(b -> b.vargFromAddress(C_POINTER, msInt.baseAddress()))) {
+            try (VaList vaList = VaList.make(b -> b.vargFromAddress(C_POINTER, msInt.baseAddress()))) {
                 int x = (int) MH_getInt.invokeExact(vaList);
                 assertEquals(x, 10);
             }
         }
     }
@@ -165,11 +165,11 @@
     public void testWinStructByValue() throws Throwable {
         try (MemorySegment struct = MemorySegment.allocateNative(Point_LAYOUT)) {
             VH_Point_x.set(struct.baseAddress(), 5);
             VH_Point_y.set(struct.baseAddress(), 10);
 
-            try (VaList vaList = CSupport.newVaList(b -> b.vargFromSegment(Point_LAYOUT, struct))) {
+            try (VaList vaList = VaList.make(b -> b.vargFromSegment(Point_LAYOUT, struct))) {
                 int sum = (int) MH_sumStruct.invokeExact(vaList);
                 assertEquals(sum, 15);
             }
         }
     }
@@ -178,11 +178,11 @@
     public void testWinStructByReference() throws Throwable {
         try (MemorySegment struct = MemorySegment.allocateNative(BigPoint_LAYOUT)) {
             VH_BigPoint_x.set(struct.baseAddress(), 5);
             VH_BigPoint_y.set(struct.baseAddress(), 10);
 
-            try (VaList vaList = CSupport.newVaList(b -> b.vargFromSegment(BigPoint_LAYOUT, struct))) {
+            try (VaList vaList = VaList.make(b -> b.vargFromSegment(BigPoint_LAYOUT, struct))) {
                 long sum = (long) MH_sumBigStruct.invokeExact(vaList);
                 assertEquals(sum, 15);
             }
         }
     }
