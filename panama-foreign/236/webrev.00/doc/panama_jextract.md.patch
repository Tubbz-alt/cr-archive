diff a/doc/panama_jextract.md b/doc/panama_jextract.md
--- a/doc/panama_jextract.md
+++ b/doc/panama_jextract.md
@@ -274,14 +274,10 @@
 import static blas.RuntimeHelper.*;
 import static blas.cblas_h.*;
 import static jdk.incubator.foreign.CSupport.*;
 
 public class TestBlas {
-    private static double getDouble(MemoryAddress addr, int element) {
-        return MemoryAccess.getDouble(addr, element*C_DOUBLE.byteSize());
-    }
-
     public static void main(String[] args) {
         int Layout;
         int transa;
 
         double alpha, beta;
@@ -311,16 +307,15 @@
             var y = scope.allocateArray(C_DOUBLE, n);
 
             cblas_dgemv(Layout, transa, m, n, alpha, a, lda, x, incx, beta, y, incy);
             /* Print y */
             for (i = 0; i < n; i++) {
-                System.out.print(String.format(" y%d = %f\n", i, getDouble(y, i)));
+                System.out.print(String.format(" y%d = %f\n", i, MemoryAccess.getDoubleAtIndex(y, i)));
             }
         }
     }
 }
-
 ```
 
 ### Compiling and running the above BLAS sample
 
 ```sh
@@ -400,11 +395,11 @@
     static void print_matrix_colmajor(String msg, int m, int n, MemoryAddress mat, int ldm) {
         int i, j;
         System.out.printf("\n %s\n", msg);
 
         for( i = 0; i < m; i++ ) {
-            for( j = 0; j < n; j++ ) System.out.printf(" %6.2f", MemoryAccess.getDouble(mat, C_DOUBLE.byteSize()*(i+j*ldm)));
+            for( j = 0; j < n; j++ ) System.out.printf(" %6.2f", MemoryAccess.getDoubleAtIndex(mat, i+j*ldm));
             System.out.printf( "\n" );
         }
     }
 }
 
@@ -508,11 +503,10 @@
 
 ### Java program that uses libgit2 to clone github repo
 
 ```java
 
-import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.NativeScope;
 import static com.github.git2_h.*;
 import static jdk.incubator.foreign.CSupport.*;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
@@ -524,18 +518,18 @@
               System.exit(1);
           }
           git_libgit2_init();
           try (var scope = NativeScope.unboundedScope()) {
               var repo = scope.allocate(C_POINTER);
-              MemoryAccess.setAddress(repo, 0, NULL);
               var url = toCString(args[0], scope);
               var path = toCString(args[1], scope);
               System.out.println(git_clone(repo, url, path, NULL));
-          }          
+          }
           git_libgit2_shutdown();
     }
 }
+
 ```
 
 ### Compiling and running the libgit2 sample
 
 ```sh
@@ -563,11 +557,11 @@
 ```sh
 
 jextract \
   -I /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include \
   /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/sqlite3.h \
-  -t org.sqlite -lsqlite3 
+  -t org.sqlite -lsqlite3
 
 ```
 ### Java program that uses sqlite3
 
 ```java
@@ -579,38 +573,28 @@
 import static org.sqlite.sqlite3_h.*;
 import static org.sqlite.RuntimeHelper.*;
 import static jdk.incubator.foreign.CSupport.*;
 
 public class SqliteMain {
-   private static MemoryAddress getPointer(MemoryAddress addr) {
-       return getPointer(addr, 0);
-   }
-
-   private static MemoryAddress getPointer(MemoryAddress addr, int element) {
-       return MemoryAccess.getAddress(addr, element*C_POINTER.byteSize());
-   }
-
    public static void main(String[] args) throws Exception {
         try (var scope = NativeScope.unboundedScope()) {
             // char** errMsgPtrPtr;
             var errMsgPtrPtr = scope.allocate(C_POINTER);
-            MemoryAccess.setAddress(errMsgPtrPtr, 0, NULL);
 
             // sqlite3** dbPtrPtr;
             var dbPtrPtr = scope.allocate(C_POINTER);
-            MemoryAccess.setAddress(dbPtrPtr, 0, NULL);
 
             int rc = sqlite3_open(toCString("employee.db",scope), dbPtrPtr);
             if (rc != 0) {
                 System.err.println("sqlite3_open failed: " + rc);
                 return;
             } else {
                 System.out.println("employee db opened");
             }
 
             // sqlite3* dbPtr;
-            var dbPtr = getPointer(dbPtrPtr);
+            var dbPtr = MemoryAccess.getAddress(dbPtrPtr);
 
             // create a new table
             var sql = toCString(
                 "CREATE TABLE EMPLOYEE ("  +
                 "  ID INT PRIMARY KEY NOT NULL," +
@@ -619,12 +603,12 @@
 
             rc = sqlite3_exec(dbPtr, sql, NULL, NULL, errMsgPtrPtr);
 
             if (rc != 0) {
                 System.err.println("sqlite3_exec failed: " + rc);
-                System.err.println("SQL error: " + toJavaStringRestricted(getPointer(errMsgPtrPtr)));
-                sqlite3_free(getPointer(errMsgPtrPtr));
+                System.err.println("SQL error: " + toJavaStringRestricted(MemoryAccess.getAddress(errMsgPtrPtr)));
+                sqlite3_free(MemoryAccess.getAddress(errMsgPtrPtr));
             } else {
                 System.out.println("employee table created");
             }
 
             // insert two rows
@@ -636,12 +620,12 @@
             );
             rc = sqlite3_exec(dbPtr, sql, NULL, NULL, errMsgPtrPtr);
 
             if (rc != 0) {
                 System.err.println("sqlite3_exec failed: " + rc);
-                System.err.println("SQL error: " + toJavaStringRestricted(getPointer(errMsgPtrPtr)));
-                sqlite3_free(getPointer(errMsgPtrPtr));
+                System.err.println("SQL error: " + toJavaStringRestricted(MemoryAccess.getAddress(errMsgPtrPtr)));
+                sqlite3_free(MemoryAccess.getAddress(errMsgPtrPtr));
             } else {
                 System.out.println("rows inserted");
             }
 
             int[] rowNum = new int[1];
@@ -650,12 +634,12 @@
                 System.out.println("Row num: " + rowNum[0]++);
                 System.out.println("numColumns = " + argc);
                 argv = asArrayRestricted(argv, C_POINTER, argc);
                 columnNames = asArrayRestricted(columnNames, C_POINTER, argc);
                 for (int i = 0; i < argc; i++) {
-                     String name = toJavaStringRestricted(getPointer(columnNames, i));
-                     String value = toJavaStringRestricted(getPointer(argv, i));
+                     String name = toJavaStringRestricted(MemoryAccess.getAddressAtIndex(columnNames, i));
+                     String value = toJavaStringRestricted(MemoryAccess.getAddressAtIndex(argv, i));
                      System.out.printf("%s = %s\n", name, value);
                 }
                 return 0;
             }, scope);
 
@@ -663,12 +647,12 @@
             sql = toCString("SELECT * FROM EMPLOYEE", scope);
             rc = sqlite3_exec(dbPtr, sql, callback, NULL, errMsgPtrPtr);
 
             if (rc != 0) {
                 System.err.println("sqlite3_exec failed: " + rc);
-                System.err.println("SQL error: " + toJavaStringRestricted(getPointer(errMsgPtrPtr)));
-                sqlite3_free(getPointer(errMsgPtrPtr));
+                System.err.println("SQL error: " + toJavaStringRestricted(MemoryAccess.getAddress(errMsgPtrPtr)));
+                sqlite3_free(MemoryAccess.getAddress(errMsgPtrPtr));
             } else {
                 System.out.println("done");
             }
 
             sqlite3_close(dbPtr);
