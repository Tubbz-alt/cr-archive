diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
@@ -25,13 +25,10 @@
  */
 
 package jdk.incubator.foreign;
 
 import jdk.internal.foreign.InternalForeign;
-import jdk.internal.foreign.MemorySegmentImpl;
-
-import java.nio.charset.Charset;
 
 /**
  * A class containing various methods relating to native interop.
  */
 public interface Foreign {
@@ -116,28 +113,6 @@
     /**
      * Obtain an instance of the system ABI.
      * @return system ABI.
      */
     SystemABI getSystemABI();
-
-    /**
-     * Returns a new native memory segment holding contents of the given Java String
-     * @param str the Java String
-     * @return a new native memory segment
-     */
-    MemorySegment toCString(String str);
-
-    /**
-     * Returns a new native memory segment holding contents of the given Java String
-     * @param str The Java String
-     * @param charset The Charset to be used to encode the String
-     * @return a new native memory segment
-     */
-    MemorySegment toCString(String str, Charset charset);
-
-    /**
-     * Returns a Java String from the contents of the given C '\0' terminated string
-     * @param addr The address of the C string
-     * @return a Java String
-     */
-    String toJavaString(MemoryAddress addr);
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
@@ -25,23 +25,17 @@
  */
 package jdk.internal.foreign;
 
 import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SystemABI;
 import jdk.internal.foreign.abi.aarch64.AArch64ABI;
 import jdk.internal.foreign.abi.x64.sysv.SysVx64ABI;
 import jdk.internal.foreign.abi.x64.windows.Windowsx64ABI;
 import sun.security.action.GetPropertyAction;
 
-import java.lang.invoke.VarHandle;
-import java.nio.charset.Charset;
-
-import static jdk.incubator.foreign.MemoryLayouts.C_CHAR;
-
 public class InternalForeign implements Foreign {
 
     private static final String foreignAccess
             = GetPropertyAction.privilegedGetProperty("jdk.incubator.foreign.Foreign", "deny");
     private static final InternalForeign INSTANCE = new InternalForeign();
@@ -108,54 +102,6 @@
 
     private static void throwIllegalAccessError(String value) {
         throw new IllegalAccessError("Can not access jdk.incubator.foreign.Foreign." +
                 " System property 'jdk.incubator.foreign.Foreign' is set to '" + value + "'");
     }
-
-    private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
-        return MemoryLayout.ofSequence(1, elemLayout)
-                .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
-    }
-
-
-    @Override
-    public MemorySegment toCString(String str) {
-        return toCString(str.getBytes());
-    }
-
-    @Override
-    public MemorySegment toCString(String str, Charset charset) {
-        return toCString(str.getBytes(charset));
-    }
-
-    private MemorySegment toCString(byte[] bytes) {
-        MemoryLayout strLayout = MemoryLayout.ofSequence(bytes.length + 1, C_CHAR);
-        MemorySegment segment = MemorySegment.allocateNative(strLayout);
-        MemoryAddress addr = segment.baseAddress();
-        for (int i = 0 ; i < bytes.length; i++) {
-            Lazy.byteArrHandle.set(addr, i, bytes[i]);
-        }
-        Lazy.byteArrHandle.set(addr, (long)bytes.length, (byte)0);
-        return segment;
-    }
-
-    @Override
-    public String toJavaString(MemoryAddress addr) {
-        StringBuilder buf = new StringBuilder();
-        try (MemorySegment seg = ofNativeUnchecked(addr, Long.MAX_VALUE)) {
-            MemoryAddress baseAddr = seg.baseAddress();
-            byte curr = (byte) Lazy.byteArrHandle.get(baseAddr, 0);
-            long offset = 0;
-            while (curr != 0) {
-                buf.append((char) curr);
-                curr = (byte) Lazy.byteArrHandle.get(baseAddr, ++offset);
-            }
-        }
-        return buf.toString();
-    }
-
-    // need to lazily initialize this to prevent circular init
-    // MemoryLayouts -> Foreign -> MemoryLayouts
-    private static class Lazy {
-        final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);
-    }
 }
diff a/test/jdk/java/foreign/Cstring.java b/test/jdk/java/foreign/Cstring.java
--- /dev/null
+++ b/test/jdk/java/foreign/Cstring.java
@@ -0,0 +1,104 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+import java.lang.invoke.VarHandle;
+import java.nio.charset.Charset;
+import jdk.incubator.foreign.AllocationScope;
+import jdk.incubator.foreign.Foreign;
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.MemorySegment;
+import static jdk.incubator.foreign.MemoryLayouts.C_CHAR;
+
+public final class Cstring {
+    // don't create!
+    private Cstring() {
+    }
+
+    private static final Foreign foreign = Foreign.getInstance();
+
+    private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
+        return MemoryLayout.ofSequence(elemLayout)
+                .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
+    }
+    private final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);
+
+    private static void copy(MemoryAddress addr, byte[] bytes) {
+        var heapSegment = MemorySegment.ofArray(bytes);
+        MemoryAddress.copy(heapSegment.baseAddress(), addr, bytes.length);
+        byteArrHandle.set(addr, (long)bytes.length, (byte)0);
+    }
+
+    private static MemorySegment toCString(byte[] bytes) {
+        MemoryLayout strLayout = MemoryLayout.ofSequence(bytes.length + 1, C_CHAR);
+        MemorySegment segment = MemorySegment.allocateNative(strLayout);
+        MemoryAddress addr = segment.baseAddress();
+        copy(addr, bytes);
+        return segment;
+    }
+
+    private static MemoryAddress toCString(byte[] bytes, AllocationScope scope) {
+        MemoryLayout strLayout = MemoryLayout.ofSequence(bytes.length + 1, C_CHAR);
+        MemoryAddress addr = scope.allocate(strLayout);
+        copy(addr, bytes);
+        return addr;
+    }
+
+    public static void copy(MemoryAddress addr, String str) {
+        copy(addr, str.getBytes());
+    }
+
+    public static void copy(MemoryAddress addr, String str, Charset charset) {
+        copy(addr, str.getBytes(charset));
+    }
+
+    public static MemorySegment toCString(String str) {
+         return toCString(str.getBytes());
+    }
+
+    public static MemorySegment toCString(String str, Charset charset) {
+         return toCString(str.getBytes(charset));
+    }
+
+    public static MemoryAddress toCString(String str, AllocationScope scope) {
+        return toCString(str.getBytes(), scope);
+    }
+
+    public static MemoryAddress toCString(String str, Charset charset, AllocationScope scope) {
+        return toCString(str.getBytes(charset), scope);
+    }
+
+    public static String toJavaString(MemoryAddress addr) {
+        StringBuilder buf = new StringBuilder();
+        try (MemorySegment seg = foreign.ofNativeUnchecked(addr, Long.MAX_VALUE)) {
+            MemoryAddress baseAddr = seg.baseAddress();
+            byte curr = (byte) byteArrHandle.get(baseAddr, 0);
+            long offset = 0;
+            while (curr != 0) {
+                buf.append((char) curr);
+                curr = (byte) byteArrHandle.get(baseAddr, ++offset);
+            }
+        }
+        return buf.toString();
+    }
+}
diff a/test/jdk/java/foreign/StdLibTest.java b/test/jdk/java/foreign/StdLibTest.java
--- a/test/jdk/java/foreign/StdLibTest.java
+++ b/test/jdk/java/foreign/StdLibTest.java
@@ -2,13 +2,11 @@
  * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
+ * published by the Free Software Foundation.
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
@@ -450,12 +448,12 @@
                     }).collect(Collectors.toCollection(LinkedHashSet::new));
         }
     }
 
     static MemorySegment toCString(String value) {
-        return FOREIGN.toCString(value);
+        return Cstring.toCString(value);
     }
 
     static String toJavaString(MemoryAddress address) {
-        return FOREIGN.toJavaString(address);
+        return Cstring.toJavaString(address);
     }
 }
diff a/test/jdk/java/foreign/Test8241148.java b/test/jdk/java/foreign/Test8241148.java
--- a/test/jdk/java/foreign/Test8241148.java
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-
-import java.lang.invoke.MethodHandle;
-import java.lang.invoke.MethodType;
-
-import jdk.incubator.foreign.Foreign;
-import jdk.incubator.foreign.FunctionDescriptor;
-import jdk.incubator.foreign.LibraryLookup;
-import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.SystemABI;
-
-import org.testng.annotations.*;
-import static jdk.incubator.foreign.MemoryLayouts.*;
-import static org.testng.Assert.*;
-
-/*
- * @test
- * @bug 8241148
- * @summary need a way to create MemorySegment with contents from java String and a way to read a C char* as java String
- * @modules jdk.incubator.foreign/jdk.incubator.foreign.unsafe
- *          jdk.incubator.foreign/jdk.internal.foreign
- *          jdk.incubator.foreign/jdk.internal.foreign.abi
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit Test8241148
- */
-@Test
-public class Test8241148 {
-    private final static Foreign FOREIGN = Foreign.getInstance();
-    private final static MethodHandle getenv;
-    private final static MethodHandle strlen;
-
-    static {
-        try {
-            SystemABI abi = FOREIGN.getSystemABI();
-            LibraryLookup lookup = LibraryLookup.ofDefault();
-
-            getenv = abi.downcallHandle(lookup.lookup("getenv"),
-                    MethodType.methodType(MemoryAddress.class, MemoryAddress.class),
-                    FunctionDescriptor.of(C_POINTER, C_POINTER));
-
-            strlen = abi.downcallHandle(lookup.lookup("strlen"),
-                    MethodType.methodType(int.class, MemoryAddress.class),
-                    FunctionDescriptor.of(C_INT, C_POINTER));
-        } catch (Throwable ex) {
-            throw new IllegalStateException(ex);
-        }
-    }
-
-    @Test
-    public void test() throws Throwable {
-        try (var seg = FOREIGN.toCString("java")) {
-            assertEquals((int) strlen.invoke(seg.baseAddress()), 4);
-        }
-        var envMap = System.getenv();
-        for (var entry : envMap.entrySet()) {
-            try (var envVar = FOREIGN.toCString(entry.getKey())) {
-                var envValue = (MemoryAddress) getenv.invoke(envVar.baseAddress());
-                var envValueStr = FOREIGN.toJavaString(envValue);
-                assertEquals(entry.getValue(), envValueStr);
-                System.out.println(entry.getKey() + " = " + envValueStr);
-            }
-        }
-    }
-}
diff a/test/jdk/java/foreign/TestByteBuffer.java b/test/jdk/java/foreign/TestByteBuffer.java
--- a/test/jdk/java/foreign/TestByteBuffer.java
+++ b/test/jdk/java/foreign/TestByteBuffer.java
@@ -2,13 +2,11 @@
  * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
+ * published by the Free Software Foundation.
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
diff a/test/jdk/java/foreign/TestDowncall.java b/test/jdk/java/foreign/TestDowncall.java
--- a/test/jdk/java/foreign/TestDowncall.java
+++ b/test/jdk/java/foreign/TestDowncall.java
@@ -1,14 +1,12 @@
 /*
  *  Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
  *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
- *  This code is free software; you can redistribute it and/or modify it
- *  under the terms of the GNU General Public License version 2 only, as
- *  published by the Free Software Foundation.  Oracle designates this
- *  particular file as subject to the "Classpath" exception as provided
- *  by Oracle in the LICENSE file that accompanied this code.
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
  *
  *  This code is distributed in the hope that it will be useful, but WITHOUT
  *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  *  version 2 for more details (a copy is included in the LICENSE file that
diff a/test/jdk/java/foreign/TestSpliterator.java b/test/jdk/java/foreign/TestSpliterator.java
--- a/test/jdk/java/foreign/TestSpliterator.java
+++ b/test/jdk/java/foreign/TestSpliterator.java
@@ -2,13 +2,11 @@
  * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
+ * published by the Free Software Foundation.
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
diff a/test/jdk/java/foreign/libTestDowncall.c b/test/jdk/java/foreign/libTestDowncall.c
--- a/test/jdk/java/foreign/libTestDowncall.c
+++ b/test/jdk/java/foreign/libTestDowncall.c
@@ -2,13 +2,11 @@
  * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
+ * published by the Free Software Foundation.
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
diff a/test/jdk/java/foreign/libTestDowncall.h b/test/jdk/java/foreign/libTestDowncall.h
--- a/test/jdk/java/foreign/libTestDowncall.h
+++ b/test/jdk/java/foreign/libTestDowncall.h
@@ -2,13 +2,11 @@
  * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
+ * published by the Free Software Foundation.
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
diff a/test/jdk/java/foreign/libTestUpcall.c b/test/jdk/java/foreign/libTestUpcall.c
--- a/test/jdk/java/foreign/libTestUpcall.c
+++ b/test/jdk/java/foreign/libTestUpcall.c
@@ -2,13 +2,11 @@
  * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
+ * published by the Free Software Foundation.
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
diff a/test/jdk/java/foreign/libTestUpcall.h b/test/jdk/java/foreign/libTestUpcall.h
--- a/test/jdk/java/foreign/libTestUpcall.h
+++ b/test/jdk/java/foreign/libTestUpcall.h
@@ -2,13 +2,11 @@
  * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
+ * published by the Free Software Foundation.
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
