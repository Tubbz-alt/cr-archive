diff a/make/autoconf/jdk-options.m4 b/make/autoconf/jdk-options.m4
--- a/make/autoconf/jdk-options.m4
+++ b/make/autoconf/jdk-options.m4
@@ -44,23 +44,21 @@
 #    fastdebug: debug information (-g), all optimizations, all asserts
 #    slowdebug: debug information (-g), no optimizations, all asserts
 AC_DEFUN_ONCE([JDKOPT_SETUP_DEBUG_LEVEL],
 [
   DEBUG_LEVEL="release"
-  AC_MSG_CHECKING([which debug level to use])
-  AC_ARG_ENABLE([debug], [AS_HELP_STRING([--enable-debug],
-      [set the debug level to fastdebug (shorthand for --with-debug-level=fastdebug) @<:@disabled@:>@])],
-      [
-        ENABLE_DEBUG="${enableval}"
-        DEBUG_LEVEL="fastdebug"
-      ], [ENABLE_DEBUG="no"])
 
+  UTIL_ARG_ENABLE(NAME: debug, DEFAULT: false, RESULT: ENABLE_DEBUG,
+      DESC: [enable debugging (shorthand for --with-debug-level=fastdebug)],
+      IF_ENABLED: [ DEBUG_LEVEL="fastdebug" ])
+
+  AC_MSG_CHECKING([which debug level to use])
   AC_ARG_WITH([debug-level], [AS_HELP_STRING([--with-debug-level],
       [set the debug level (release, fastdebug, slowdebug, optimized) @<:@release@:>@])],
       [
         DEBUG_LEVEL="${withval}"
-        if test "x$ENABLE_DEBUG" = xyes; then
+        if test "x$ENABLE_DEBUG" = xtrue; then
           AC_MSG_ERROR([You cannot use both --enable-debug and --with-debug-level at the same time.])
         fi
       ])
   AC_MSG_RESULT([$DEBUG_LEVEL])
 
@@ -101,117 +99,60 @@
 #
 # Should we build only OpenJDK even if closed sources are present?
 #
 AC_DEFUN_ONCE([JDKOPT_SETUP_OPEN_OR_CUSTOM],
 [
-  AC_ARG_ENABLE([openjdk-only], [AS_HELP_STRING([--enable-openjdk-only],
-      [suppress building custom source even if present @<:@disabled@:>@])],,[enable_openjdk_only="no"])
-
-  AC_MSG_CHECKING([if custom source is suppressed (openjdk-only)])
-  AC_MSG_RESULT([$enable_openjdk_only])
-  if test "x$enable_openjdk_only" = "xyes"; then
-    SUPPRESS_CUSTOM_EXTENSIONS="true"
-  elif test "x$enable_openjdk_only" = "xno"; then
-    SUPPRESS_CUSTOM_EXTENSIONS="false"
-  else
-    AC_MSG_ERROR([Invalid value for --enable-openjdk-only: $enable_openjdk_only])
-  fi
+  UTIL_ARG_ENABLE(NAME: openjdk-only, DEFAULT: false,
+      RESULT: SUPPRESS_CUSTOM_EXTENSIONS,
+      DESC: [suppress building custom source even if present],
+      CHECKING_MSG: [if custom source is suppressed (openjdk-only)])
 ])
 
 AC_DEFUN_ONCE([JDKOPT_SETUP_JDK_OPTIONS],
 [
   # Should we build a JDK without a graphical UI?
-  AC_MSG_CHECKING([headless only])
-  AC_ARG_ENABLE([headless-only], [AS_HELP_STRING([--enable-headless-only],
-      [only build headless (no GUI) support @<:@disabled@:>@])])
-
-  if test "x$enable_headless_only" = "xyes"; then
-    ENABLE_HEADLESS_ONLY="true"
-    AC_MSG_RESULT([yes])
-  elif test "x$enable_headless_only" = "xno"; then
-    ENABLE_HEADLESS_ONLY="false"
-    AC_MSG_RESULT([no])
-  elif test "x$enable_headless_only" = "x"; then
-    ENABLE_HEADLESS_ONLY="false"
-    AC_MSG_RESULT([no])
-  else
-    AC_MSG_ERROR([--enable-headless-only can only take yes or no])
-  fi
-
+  UTIL_ARG_ENABLE(NAME: headless-only, DEFAULT: false,
+      RESULT: ENABLE_HEADLESS_ONLY,
+      DESC: [only build headless (no GUI) support],
+      CHECKING_MSG: [if we should build headless-only (no GUI)])
   AC_SUBST(ENABLE_HEADLESS_ONLY)
 
   # should we linktime gc unused code sections in the JDK build ?
-  AC_MSG_CHECKING([linktime gc])
-  AC_ARG_ENABLE([linktime-gc], [AS_HELP_STRING([--enable-linktime-gc],
-      [linktime gc unused code sections in the JDK build @<:@disabled@:>@])])
-
-  if test "x$enable_linktime_gc" = "xyes"; then
-    ENABLE_LINKTIME_GC="true"
-    AC_MSG_RESULT([yes])
-  elif test "x$enable_linktime_gc" = "xno"; then
-    ENABLE_LINKTIME_GC="false"
-    AC_MSG_RESULT([no])
-  elif test "x$OPENJDK_TARGET_OS" = "xlinux" && test "x$OPENJDK_TARGET_CPU" = xs390x; then
-    ENABLE_LINKTIME_GC="true"
-    AC_MSG_RESULT([yes])
-  elif test "x$enable_linktime_gc" = "x"; then
-    ENABLE_LINKTIME_GC="false"
-    AC_MSG_RESULT([no])
+  if test "x$OPENJDK_TARGET_OS" = "xlinux" && test "x$OPENJDK_TARGET_CPU" = xs390x; then
+    LINKTIME_GC_DEFAULT=true
   else
-    AC_MSG_ERROR([--enable-linktime-gc can only take yes or no])
+    LINKTIME_GC_DEFAULT=false
   fi
 
+  UTIL_ARG_ENABLE(NAME: linktime-gc, DEFAULT: $LINKTIME_GC_DEFAULT,
+      DEFAULT_DESC: [auto], RESULT: ENABLE_LINKTIME_GC,
+      DESC: [use link time gc on unused code sections in the JDK build],
+      CHECKING_MSG: [if linker should clean out unused code (linktime-gc)])
   AC_SUBST(ENABLE_LINKTIME_GC)
 
-
-  # Should we build the complete docs, or just a lightweight version?
-  AC_ARG_ENABLE([full-docs], [AS_HELP_STRING([--enable-full-docs],
-      [build complete documentation @<:@enabled if all tools found@:>@])])
-
-  # Verify dependencies
+  # Check for full doc dependencies
+  FULL_DOCS_AVAILABLE=true
   AC_MSG_CHECKING([for graphviz dot])
   if test "x$DOT" != "x"; then
     AC_MSG_RESULT([yes])
   else
     AC_MSG_RESULT([no, cannot generate full docs])
-    FULL_DOCS_DEP_MISSING=true
+    FULL_DOCS_AVAILABLE=false
   fi
 
   AC_MSG_CHECKING([for pandoc])
   if test "x$PANDOC" != "x"; then
     AC_MSG_RESULT([yes])
   else
     AC_MSG_RESULT([no, cannot generate full docs])
-    FULL_DOCS_DEP_MISSING=true
-  fi
-
-  AC_MSG_CHECKING([full docs])
-  if test "x$enable_full_docs" = xyes; then
-    if test "x$FULL_DOCS_DEP_MISSING" = "xtrue"; then
-      AC_MSG_RESULT([no, missing dependencies])
-      HELP_MSG_MISSING_DEPENDENCY([dot])
-      AC_MSG_ERROR([Cannot enable full docs with missing dependencies. See above. $HELP_MSG])
-    else
-      ENABLE_FULL_DOCS=true
-      AC_MSG_RESULT([yes, forced])
-    fi
-  elif test "x$enable_full_docs" = xno; then
-    ENABLE_FULL_DOCS=false
-    AC_MSG_RESULT([no, forced])
-  elif test "x$enable_full_docs" = x; then
-    # Check for prerequisites
-    if test "x$FULL_DOCS_DEP_MISSING" = xtrue; then
-      ENABLE_FULL_DOCS=false
-      AC_MSG_RESULT([no, missing dependencies])
-    else
-      ENABLE_FULL_DOCS=true
-      AC_MSG_RESULT([yes, dependencies present])
-    fi
-  else
-    AC_MSG_ERROR([--enable-full-docs can only take yes or no])
+    FULL_DOCS_AVAILABLE=false
   fi
 
+  # Should we build the complete docs, or just a lightweight version?
+  UTIL_ARG_ENABLE(NAME: full-docs, DEFAULT: auto, RESULT: ENABLE_FULL_DOCS,
+      AVAILABLE: $FULL_DOCS_AVAILABLE, DESC: [build complete documentation],
+      DEFAULT_DESC: [enabled if all tools found])
   AC_SUBST(ENABLE_FULL_DOCS)
 
   # Choose cacerts source file
   AC_ARG_WITH(cacerts-file, [AS_HELP_STRING([--with-cacerts-file],
       [specify alternative cacerts file])])
@@ -227,18 +168,12 @@
     AC_MSG_RESULT([$CACERTS_FILE])
   fi
   AC_SUBST(CACERTS_FILE)
 
   # Enable or disable unlimited crypto
-  AC_ARG_ENABLE(unlimited-crypto, [AS_HELP_STRING([--disable-unlimited-crypto],
-      [Disable unlimited crypto policy @<:@enabled@:>@])],,
-      [enable_unlimited_crypto=yes])
-  if test "x$enable_unlimited_crypto" = "xyes"; then
-    UNLIMITED_CRYPTO=true
-  else
-    UNLIMITED_CRYPTO=false
-  fi
+  UTIL_ARG_ENABLE(NAME: unlimited-crypto, DEFAULT: true, RESULT: UNLIMITED_CRYPTO,
+      DESC: [enable unlimited crypto policy])
   AC_SUBST(UNLIMITED_CRYPTO)
 
   # Should we build the serviceability agent (SA)?
   INCLUDE_SA=true
   if HOTSPOT_CHECK_JVM_VARIANT(zero); then
@@ -420,40 +355,34 @@
 #
 # Native and Java code coverage
 #
 AC_DEFUN_ONCE([JDKOPT_SETUP_CODE_COVERAGE],
 [
-  AC_ARG_ENABLE(native-coverage, [AS_HELP_STRING([--enable-native-coverage],
-      [enable native compilation with code coverage data@<:@disabled@:>@])])
-  GCOV_ENABLED="false"
-  if test "x$enable_native_coverage" = "xyes"; then
-    case $TOOLCHAIN_TYPE in
-      gcc | clang)
-        AC_MSG_CHECKING([if native coverage is enabled])
-        AC_MSG_RESULT([yes])
+  UTIL_ARG_ENABLE(NAME: native-coverage, DEFAULT: false, RESULT: GCOV_ENABLED,
+      DESC: [enable native compilation with code coverage data],
+      CHECK_AVAILABLE: [
+        AC_MSG_CHECKING([if native coverage is available])
+        if test "x$TOOLCHAIN_TYPE" = "xgcc" ||
+            test "x$TOOLCHAIN_TYPE" = "xclang"; then
+          AC_MSG_RESULT([yes])
+        else
+          AC_MSG_RESULT([no])
+          AVAILABLE=false
+        fi
+      ],
+      IF_ENABLED: [
         GCOV_CFLAGS="-fprofile-arcs -ftest-coverage -fno-inline"
         GCOV_LDFLAGS="-fprofile-arcs"
         JVM_CFLAGS="$JVM_CFLAGS $GCOV_CFLAGS"
         JVM_LDFLAGS="$JVM_LDFLAGS $GCOV_LDFLAGS"
         CFLAGS_JDKLIB="$CFLAGS_JDKLIB $GCOV_CFLAGS"
         CFLAGS_JDKEXE="$CFLAGS_JDKEXE $GCOV_CFLAGS"
         CXXFLAGS_JDKLIB="$CXXFLAGS_JDKLIB $GCOV_CFLAGS"
         CXXFLAGS_JDKEXE="$CXXFLAGS_JDKEXE $GCOV_CFLAGS"
         LDFLAGS_JDKLIB="$LDFLAGS_JDKLIB $GCOV_LDFLAGS"
         LDFLAGS_JDKEXE="$LDFLAGS_JDKEXE $GCOV_LDFLAGS"
-        GCOV_ENABLED="true"
-        ;;
-      *)
-        AC_MSG_ERROR([--enable-native-coverage only works with toolchain type gcc or clang])
-        ;;
-    esac
-  elif test "x$enable_native_coverage" = "xno"; then
-    AC_MSG_CHECKING([if native coverage is enabled])
-    AC_MSG_RESULT([no])
-  elif test "x$enable_native_coverage" != "x"; then
-    AC_MSG_ERROR([--enable-native-coverage can only be assigned "yes" or "no"])
-  fi
+      ])
   AC_SUBST(GCOV_ENABLED)
 
   AC_ARG_WITH(jcov, [AS_HELP_STRING([--with-jcov],
       [jcov library location])])
   AC_ARG_WITH(jcov-input-jdk, [AS_HELP_STRING([--with-jcov-input-jdk],
@@ -496,18 +425,23 @@
 #
 # AddressSanitizer
 #
 AC_DEFUN_ONCE([JDKOPT_SETUP_ADDRESS_SANITIZER],
 [
-  AC_ARG_ENABLE(asan, [AS_HELP_STRING([--enable-asan],
-      [enable AddressSanitizer if possible @<:@disabled@:>@])])
-  ASAN_ENABLED="no"
-  if test "x$enable_asan" = "xyes"; then
-    case $TOOLCHAIN_TYPE in
-      gcc | clang)
-        AC_MSG_CHECKING([if asan is enabled])
-        AC_MSG_RESULT([yes])
+  UTIL_ARG_ENABLE(NAME: asan, DEFAULT: false,
+      DESC: [enable AddressSanitizer],
+      CHECK_AVAILABLE: [
+        AC_MSG_CHECKING([if AddressSanitizer (asan) is available])
+        if test "x$TOOLCHAIN_TYPE" = "xgcc" ||
+            test "x$TOOLCHAIN_TYPE" = "xclang"; then
+          AC_MSG_RESULT([yes])
+        else
+          AC_MSG_RESULT([no])
+          AVAILABLE=false
+        fi
+      ],
+      IF_ENABLED: [
         ASAN_CFLAGS="-fsanitize=address -fno-omit-frame-pointer"
         ASAN_LDFLAGS="-fsanitize=address"
         JVM_CFLAGS="$JVM_CFLAGS $ASAN_CFLAGS"
         JVM_LDFLAGS="$JVM_LDFLAGS $ASAN_LDFLAGS"
         CFLAGS_JDKLIB="$CFLAGS_JDKLIB $ASAN_CFLAGS"
@@ -515,21 +449,14 @@
         CXXFLAGS_JDKLIB="$CXXFLAGS_JDKLIB $ASAN_CFLAGS"
         CXXFLAGS_JDKEXE="$CXXFLAGS_JDKEXE $ASAN_CFLAGS"
         LDFLAGS_JDKLIB="$LDFLAGS_JDKLIB $ASAN_LDFLAGS"
         LDFLAGS_JDKEXE="$LDFLAGS_JDKEXE $ASAN_LDFLAGS"
         ASAN_ENABLED="yes"
-        ;;
-      *)
-        AC_MSG_ERROR([--enable-asan only works with toolchain type gcc or clang])
-        ;;
-    esac
-  elif test "x$enable_asan" = "xno"; then
-    AC_MSG_CHECKING([if asan is enabled])
-    AC_MSG_RESULT([no])
-  elif test "x$enable_asan" != "x"; then
-    AC_MSG_ERROR([--enable-asan can only be assigned "yes" or "no"])
-  fi
+      ],
+      IF_DISABLED: [
+        ASAN_ENABLED="no"
+      ])
 
   AC_SUBST(ASAN_ENABLED)
 ])
 
 ################################################################################
@@ -537,139 +464,81 @@
 # Static build support.  When enabled will generate static
 # libraries instead of shared libraries for all JDK libs.
 #
 AC_DEFUN_ONCE([JDKOPT_SETUP_STATIC_BUILD],
 [
-  AC_ARG_ENABLE([static-build], [AS_HELP_STRING([--enable-static-build],
-    [enable static library build @<:@disabled@:>@])])
-  STATIC_BUILD=false
-  if test "x$enable_static_build" = "xyes"; then
-    AC_MSG_CHECKING([if static build is enabled])
-    AC_MSG_RESULT([yes])
-    if test "x$OPENJDK_TARGET_OS" != "xmacosx"; then
-      AC_MSG_ERROR([--enable-static-build is only supported for macosx builds])
-    fi
-    STATIC_BUILD_CFLAGS="-DSTATIC_BUILD=1"
-    CFLAGS_JDKLIB_EXTRA="$CFLAGS_JDKLIB_EXTRA $STATIC_BUILD_CFLAGS"
-    CXXFLAGS_JDKLIB_EXTRA="$CXXFLAGS_JDKLIB_EXTRA $STATIC_BUILD_CFLAGS"
-    STATIC_BUILD=true
-  elif test "x$enable_static_build" = "xno"; then
-    AC_MSG_CHECKING([if static build is enabled])
-    AC_MSG_RESULT([no])
-  elif test "x$enable_static_build" != "x"; then
-    AC_MSG_ERROR([--enable-static-build can only be assigned "yes" or "no"])
-  fi
-
+  UTIL_ARG_ENABLE(NAME: static-build, DEFAULT: false, RESULT: STATIC_BUILD,
+      DESC: [enable static library build],
+      CHECKING_MSG: [if static build is enabled],
+      CHECK_AVAILABLE: [
+        AC_MSG_CHECKING([if static build is available])
+        if test "x$OPENJDK_TARGET_OS" = "xmacosx"; then
+          AC_MSG_RESULT([yes])
+        else
+          AC_MSG_RESULT([no])
+          AVAILABLE=false
+        fi
+      ],
+      IF_ENABLED: [
+        STATIC_BUILD_CFLAGS="-DSTATIC_BUILD=1"
+        CFLAGS_JDKLIB_EXTRA="$CFLAGS_JDKLIB_EXTRA $STATIC_BUILD_CFLAGS"
+        CXXFLAGS_JDKLIB_EXTRA="$CXXFLAGS_JDKLIB_EXTRA $STATIC_BUILD_CFLAGS"
+      ])
   AC_SUBST(STATIC_BUILD)
 ])
 
 ################################################################################
 #
 # jlink options.
 # We always keep packaged modules in JDK image.
 #
 AC_DEFUN_ONCE([JDKOPT_SETUP_JLINK_OPTIONS],
 [
-  AC_ARG_ENABLE([keep-packaged-modules], [AS_HELP_STRING([--disable-keep-packaged-modules],
-    [Do not keep packaged modules in jdk image @<:@enable@:>@])])
-
-  AC_MSG_CHECKING([if packaged modules are kept])
-  if test "x$enable_keep_packaged_modules" = "xyes"; then
-    AC_MSG_RESULT([yes])
-    JLINK_KEEP_PACKAGED_MODULES=true
-  elif test "x$enable_keep_packaged_modules" = "xno"; then
-    AC_MSG_RESULT([no])
-    JLINK_KEEP_PACKAGED_MODULES=false
-  elif test "x$enable_keep_packaged_modules" = "x"; then
-    AC_MSG_RESULT([yes (default)])
-    JLINK_KEEP_PACKAGED_MODULES=true
-  else
-    AC_MSG_RESULT([error])
-    AC_MSG_ERROR([--enable-keep-packaged-modules accepts no argument])
-  fi
-
+  UTIL_ARG_ENABLE(NAME: keep-packaged-modules, DEFAULT: true,
+      RESULT: JLINK_KEEP_PACKAGED_MODULES,
+      DESC: [enable keeping of packaged modules in jdk image],
+      CHECKING_MSG: [if packaged modules are kept])
   AC_SUBST(JLINK_KEEP_PACKAGED_MODULES)
 ])
 
 ################################################################################
 #
 # Check if building of the jtreg failure handler should be enabled.
 #
 AC_DEFUN_ONCE([JDKOPT_ENABLE_DISABLE_FAILURE_HANDLER],
 [
-  AC_ARG_ENABLE([jtreg-failure-handler], [AS_HELP_STRING([--enable-jtreg-failure-handler],
-    [forces build of the jtreg failure handler to be enabled, missing dependencies
-     become fatal errors. Default is auto, where the failure handler is built if all
-     dependencies are present and otherwise just disabled.])])
-
-  AC_MSG_CHECKING([if jtreg failure handler should be built])
-
-  if test "x$enable_jtreg_failure_handler" = "xyes"; then
-    if test "x$JT_HOME" = "x"; then
-      AC_MSG_ERROR([Cannot enable jtreg failure handler without jtreg.])
-    else
-      BUILD_FAILURE_HANDLER=true
-      AC_MSG_RESULT([yes, forced])
-    fi
-  elif test "x$enable_jtreg_failure_handler" = "xno"; then
-    BUILD_FAILURE_HANDLER=false
-    AC_MSG_RESULT([no, forced])
-  elif test "x$enable_jtreg_failure_handler" = "xauto" \
-      || test "x$enable_jtreg_failure_handler" = "x"; then
-    if test "x$JT_HOME" = "x"; then
-      BUILD_FAILURE_HANDLER=false
-      AC_MSG_RESULT([no, missing jtreg])
-    else
-      BUILD_FAILURE_HANDLER=true
-      AC_MSG_RESULT([yes, jtreg present])
-    fi
-  else
-    AC_MSG_ERROR([Invalid value for --enable-jtreg-failure-handler: $enable_jtreg_failure_handler])
-  fi
-
+  UTIL_ARG_ENABLE(NAME: jtreg-failure-handler, DEFAULT: auto,
+      RESULT: BUILD_FAILURE_HANDLER,
+      DESC: [enable keeping of packaged modules in jdk image],
+      DEFAULT_DESC: [enabled if jtreg is present],
+      CHECKING_MSG: [if the jtreg failure handler should be built],
+      CHECK_AVAILABLE: [
+        AC_MSG_CHECKING([if the jtreg failure handler is available])
+        if test "x$JT_HOME" != "x"; then
+          AC_MSG_RESULT([yes])
+        else
+          AVAILABLE=false
+          AC_MSG_RESULT([no (jtreg not present)])
+        fi
+      ])
   AC_SUBST(BUILD_FAILURE_HANDLER)
 ])
 
 ################################################################################
 #
 # Enable or disable generation of the classlist at build time
 #
 AC_DEFUN_ONCE([JDKOPT_ENABLE_DISABLE_GENERATE_CLASSLIST],
 [
-  AC_ARG_ENABLE([generate-classlist], [AS_HELP_STRING([--disable-generate-classlist],
-      [forces enabling or disabling of the generation of a CDS classlist at build time.
-      Default is to generate it when either the server or client JVMs are built and
-      enable-cds is true.])])
-
-  # In jvm-features.m4 ENABLE_CDS is set to true iff all JVM variants has cds
-  # enabled.
-
-  AC_MSG_CHECKING([if the CDS classlist generation should be enabled])
-  if test "x$enable_generate_classlist" = "xyes"; then
-    AC_MSG_RESULT([yes, forced])
-    ENABLE_GENERATE_CLASSLIST="true"
-    if test "x$ENABLE_CDS" = "xfalse"; then
-      # In GenerateLinkOptData.gmk, DumpLoadedClassList is used to generate the
-      # classlist file. It never will work in this case since the VM will report
-      # an error for DumpLoadedClassList when CDS is disabled.
-      AC_MSG_ERROR([Generation of classlist is not possible without JVM feature 'cds'])
-    fi
-  elif test "x$enable_generate_classlist" = "xno"; then
-    AC_MSG_RESULT([no, forced])
-    ENABLE_GENERATE_CLASSLIST="false"
-  elif test "x$enable_generate_classlist" = "x"; then
-    if test "x$ENABLE_CDS" = "xtrue"; then
-      AC_MSG_RESULT([yes])
-      ENABLE_GENERATE_CLASSLIST="true"
-    else
-      AC_MSG_RESULT([no])
-      ENABLE_GENERATE_CLASSLIST="false"
-    fi
-  else
-    AC_MSG_ERROR([Invalid value for --enable-generate-classlist: $enable_generate_classlist])
-  fi
-
+  # In GenerateLinkOptData.gmk, DumpLoadedClassList is used to generate the
+  # classlist file. It never will work if CDS is disabled, since the VM will report
+  # an error for DumpLoadedClassList.
+  UTIL_ARG_ENABLE(NAME: generate-classlist, DEFAULT: auto,
+      RESULT: ENABLE_GENERATE_CLASSLIST, AVAILABLE: $ENABLE_CDS,
+      DESC: [enable generation of a CDS classlist at build time],
+      DEFAULT_DESC: [enabled if the JVM feature 'cds' is enabled for all JVM variants],
+      CHECKING_MSG: [if the CDS classlist generation should be enabled])
   AC_SUBST(ENABLE_GENERATE_CLASSLIST)
 ])
 
 ################################################################################
 #
@@ -697,58 +566,35 @@
 #
 # Optionally disable man pages
 #
 AC_DEFUN([JDKOPT_ENABLE_DISABLE_MANPAGES],
 [
-  AC_ARG_ENABLE([manpages], [AS_HELP_STRING([--disable-manpages],
-      [Set to disable copy of static man pages @<:@enabled@:>@])])
-
-  BUILD_MANPAGES="true"
-  AC_MSG_CHECKING([if static man pages should be copied])
-  if test "x$enable_manpages" = "x"; then
-    AC_MSG_RESULT([yes])
-  elif test "x$enable_manpages" = "xyes"; then
-    AC_MSG_RESULT([yes, forced])
-  elif test "x$enable_manpages" = "xno"; then
-    AC_MSG_RESULT([no, forced])
-    BUILD_MANPAGES="false"
-  else
-    AC_MSG_RESULT([no])
-    AC_MSG_ERROR([--enable-manpages can only yes/no or empty])
-  fi
-
+  UTIL_ARG_ENABLE(NAME: manpages, DEFAULT: true, RESULT: BUILD_MANPAGES,
+      DESC: [enable copying of static man pages],
+      CHECKING_MSG: [if static man pages should be copied])
   AC_SUBST(BUILD_MANPAGES)
 ])
 
 ################################################################################
 #
 # Disable the default CDS archive generation
-#   cross compilation - disabled
 #
 AC_DEFUN([JDKOPT_ENABLE_DISABLE_CDS_ARCHIVE],
 [
-  AC_ARG_ENABLE([cds-archive], [AS_HELP_STRING([--disable-cds-archive],
-      [Set to disable generation of a default CDS archive in the product image @<:@enabled@:>@])])
-
-  AC_MSG_CHECKING([if a default CDS archive should be generated])
-  if test "x$ENABLE_CDS" = "xfalse"; then
-    AC_MSG_RESULT([no, because CDS is disabled])
-    BUILD_CDS_ARCHIVE="false"
-  elif test "x$COMPILE_TYPE" = "xcross"; then
-    AC_MSG_RESULT([no, not possible with cross compilation])
-    BUILD_CDS_ARCHIVE="false"
-  elif test "x$enable_cds_archive" = "xyes"; then
-    AC_MSG_RESULT([yes, forced])
-    BUILD_CDS_ARCHIVE="true"
-  elif test "x$enable_cds_archive" = "x"; then
-    AC_MSG_RESULT([yes])
-    BUILD_CDS_ARCHIVE="true"
-  elif test "x$enable_cds_archive" = "xno"; then
-    AC_MSG_RESULT([no, forced])
-    BUILD_CDS_ARCHIVE="false"
-  else
-    AC_MSG_RESULT([no])
-    AC_MSG_ERROR([--enable-cds_archive can only be yes/no or empty])
-  fi
-
+  UTIL_ARG_ENABLE(NAME: cds-archive, DEFAULT: auto, RESULT: BUILD_CDS_ARCHIVE,
+      DESC: [enable generation of a default CDS archive in the product image],
+      DEFAULT_DESC: [enabled if possible],
+      CHECKING_MSG: [if a default CDS archive should be generated],
+      CHECK_AVAILABLE: [
+        AC_MSG_CHECKING([if CDS archive is available])
+        if test "x$ENABLE_CDS" = "xfalse"; then
+          AC_MSG_RESULT([no (CDS is disabled)])
+          AVAILABLE=false
+        elif test "x$COMPILE_TYPE" = "xcross"; then
+          AC_MSG_RESULT([no (not possible with cross compilation)])
+          AVAILABLE=false
+        else
+          AC_MSG_RESULT([yes])
+        fi
+      ])
   AC_SUBST(BUILD_CDS_ARCHIVE)
 ])
