diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/JVM.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/JVM.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/JVM.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/JVM.java
@@ -104,11 +104,10 @@
      *
      */
     @HotSpotIntrinsicCandidate
     public static native long counterTime();
 
-
     /**
      * Emits native periodic event.
      *
      * @param eventTypeId type id
      *
@@ -117,12 +116,10 @@
      *
      * @return true if the event was committed
      */
     public native boolean emitEvent(long eventTypeId, long timestamp, long when);
 
-
-
     /**
      * Return a list of all classes deriving from {@link jdk.internal.event.Event}
      *
      * @return list of event classes.
      */
@@ -141,11 +138,11 @@
      *
      * @param clazz clazz
      *
      * @return a unique class identifier
      */
-   @HotSpotIntrinsicCandidate
+    @HotSpotIntrinsicCandidate
     public static native long getClassId(Class<?> clazz);
 
     // temporary workaround until we solve intrinsics supporting epoch shift tagging
     public static native long getClassIdNonIntrinsic(Class<?> clazz);
 
@@ -253,22 +250,20 @@
      * @throws IllegalArgumentException if memory size is not within a valid
      *         range
      */
     public native void setMemorySize(long size) throws IllegalArgumentException;
 
-    /**
-
     /**
      * Set interval for method samples, in milliseconds.
      *
      * Setting interval to 0 turns off the method sampler.
      *
      * @param intervalMillis the sampling interval
      */
     public native void setMethodSamplingInterval(long type, long intervalMillis);
 
-      /**
+    /**
      * Sets the file where data should be written.
      *
      * Requires that JFR has been started with {@link #createNativeJFR()}
      *
      * <pre>
@@ -470,22 +465,23 @@
      * pointers to the metadata event, last check point event, correct file size and
      * the generation id.
      *
      */
     public native void flush();
+
     /**
      * Sets the location of the disk repository, to be used at an emergency
      * dump.
      *
      * @param dirText
      */
     public native void setRepositoryLocation(String dirText);
 
-    /**
+   /**
     * Access to VM termination support.
     *
-    *@param errorMsg descriptive message to be include in VM termination sequence
+    * @param errorMsg descriptive message to be include in VM termination sequence
     */
     public native void abort(String errorMsg);
 
     /**
      * Adds a string to the string constant pool.
@@ -497,20 +493,22 @@
      * @param s string constant to be added, not null
      *
      * @return the current epoch of this insertion attempt
      */
     public static native boolean addStringConstant(boolean epoch, long id, String s);
+
     /**
      * Gets the address of the jboolean epoch.
      *
      * The epoch alternates every checkpoint.
      *
      * @return The address of the jboolean.
      */
     public native long getEpochAddress();
 
     public native void uncaughtException(Thread thread, Throwable t);
+
     /**
      * Sets cutoff for event.
      *
      * Determines how long the event should be allowed to run.
      *
@@ -557,11 +555,11 @@
     public native boolean isExcluded(Thread thread);
 
     /**
      * Get the start time in nanos from the header of the current chunk
      *
-     *@return start time of the recording in nanos, -1 in case of in-memory
+     * @return start time of the recording in nanos, -1 in case of in-memory
      */
     public native long getChunkStartNanos();
 
     /**
      * Stores an EventHandler to the eventHandler field of an event class.
@@ -580,7 +578,6 @@
      * @param eventClass the class, not {@code null}
      *
      * @return the handler, may be {@code null}
      */
     public native Object getHandler(Class<? extends jdk.internal.event.Event> eventClass);
-
 }
