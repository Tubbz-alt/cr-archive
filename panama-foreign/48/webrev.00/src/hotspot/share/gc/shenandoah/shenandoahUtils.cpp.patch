diff a/src/hotspot/share/gc/shenandoah/shenandoahUtils.cpp b/src/hotspot/share/gc/shenandoah/shenandoahUtils.cpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahUtils.cpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahUtils.cpp
@@ -27,26 +27,24 @@
 #include "jfr/jfrEvents.hpp"
 #include "gc/shared/gcCause.hpp"
 #include "gc/shared/gcTimer.hpp"
 #include "gc/shared/gcTrace.hpp"
 #include "gc/shared/gcWhen.hpp"
-#include "gc/shenandoah/shenandoahAllocTracker.hpp"
 #include "gc/shenandoah/shenandoahCollectorPolicy.hpp"
 #include "gc/shenandoah/shenandoahMarkCompact.hpp"
 #include "gc/shenandoah/shenandoahHeap.hpp"
 #include "gc/shenandoah/shenandoahHeuristics.hpp"
 #include "gc/shenandoah/shenandoahUtils.hpp"
 #include "utilities/debug.hpp"
 
-ShenandoahPhaseTimings::Phase ShenandoahGCPhase::_current_phase = ShenandoahGCPhase::_invalid_phase;
+ShenandoahPhaseTimings::Phase ShenandoahGCPhase::_current_phase = ShenandoahPhaseTimings::_invalid_phase;
 
 ShenandoahGCSession::ShenandoahGCSession(GCCause::Cause cause) :
   _heap(ShenandoahHeap::heap()),
   _timer(_heap->gc_timer()),
   _tracer(_heap->tracer()) {
-  assert(!ShenandoahGCPhase::is_valid_phase(ShenandoahGCPhase::current_phase()),
-    "No current GC phase");
+  assert(!ShenandoahGCPhase::is_current_phase_valid(), "No current GC phase");
 
   _heap->set_gc_cause(cause);
   _timer->register_gc_start();
   _tracer->report_gc_start(cause, _timer->gc_start());
   _heap->trace_heap(GCWhen::BeforeGC, _tracer);
@@ -68,12 +66,11 @@
 ShenandoahGCSession::~ShenandoahGCSession() {
   _heap->heuristics()->record_cycle_end();
   _timer->register_gc_end();
   _heap->trace_heap(GCWhen::AfterGC, _tracer);
   _tracer->report_gc_end(_timer->gc_end(), _timer->time_partitions());
-  assert(!ShenandoahGCPhase::is_valid_phase(ShenandoahGCPhase::current_phase()),
-    "No current GC phase");
+  assert(!ShenandoahGCPhase::is_current_phase_valid(), "No current GC phase");
   _heap->set_gc_cause(GCCause::_no_gc);
 }
 
 ShenandoahGCPauseMark::ShenandoahGCPauseMark(uint gc_id, SvcGCMarker::reason_type type) :
   _heap(ShenandoahHeap::heap()), _gc_id_mark(gc_id), _svc_gc_mark(type), _is_gc_active_mark() {
@@ -99,28 +96,27 @@
   _heap->gc_timer()->register_gc_phase_end(Ticks::now());
   _heap->heuristics()->record_gc_end();
 }
 
 ShenandoahGCPhase::ShenandoahGCPhase(const ShenandoahPhaseTimings::Phase phase) :
-  _heap(ShenandoahHeap::heap()), _phase(phase) {
-   assert(!Thread::current()->is_Worker_thread() &&
+  _timings(ShenandoahHeap::heap()->phase_timings()), _phase(phase) {
+  assert(!Thread::current()->is_Worker_thread() &&
               (Thread::current()->is_VM_thread() ||
                Thread::current()->is_ConcurrentGC_thread()),
           "Must be set by these threads");
   _parent_phase = _current_phase;
   _current_phase = phase;
-
-  _heap->phase_timings()->record_phase_start(_phase);
+  _start = os::elapsedTime();
 }
 
 ShenandoahGCPhase::~ShenandoahGCPhase() {
-  _heap->phase_timings()->record_phase_end(_phase);
+  _timings->record_phase_time(_phase, os::elapsedTime() - _start);
   _current_phase = _parent_phase;
 }
 
-bool ShenandoahGCPhase::is_valid_phase(ShenandoahPhaseTimings::Phase phase) {
-  return phase >= 0 && phase < ShenandoahPhaseTimings::_num_phases;
+bool ShenandoahGCPhase::is_current_phase_valid() {
+  return _current_phase < ShenandoahPhaseTimings::_num_phases;
 }
 
 bool ShenandoahGCPhase::is_root_work_phase() {
   switch(current_phase()) {
     case ShenandoahPhaseTimings::scan_roots:
@@ -136,10 +132,19 @@
     default:
       return false;
   }
 }
 
+ShenandoahGCWorkerPhase::ShenandoahGCWorkerPhase(const ShenandoahPhaseTimings::Phase phase) :
+    _timings(ShenandoahHeap::heap()->phase_timings()), _phase(phase) {
+  _timings->record_workers_start(_phase);
+}
+
+ShenandoahGCWorkerPhase::~ShenandoahGCWorkerPhase() {
+  _timings->record_workers_end(_phase);
+}
+
 ShenandoahWorkerSession::ShenandoahWorkerSession(uint worker_id) : _worker_id(worker_id) {
   Thread* thr = Thread::current();
   assert(ShenandoahThreadLocalData::worker_id(thr) == ShenandoahThreadLocalData::INVALID_WORKER_ID, "Already set");
   ShenandoahThreadLocalData::set_worker_id(thr, worker_id);
 }
