diff a/src/hotspot/cpu/x86/macroAssembler_x86.cpp b/src/hotspot/cpu/x86/macroAssembler_x86.cpp
--- a/src/hotspot/cpu/x86/macroAssembler_x86.cpp
+++ b/src/hotspot/cpu/x86/macroAssembler_x86.cpp
@@ -2722,21 +2722,10 @@
     lea(rscratch1, src);
     Assembler::divss(dst, Address(rscratch1, 0));
   }
 }
 
-#ifndef _LP64
-void MacroAssembler::empty_FPU_stack() {
-  if (VM_Version::supports_mmx()) {
-    emms();
-  } else {
-    for (int i = 8; i-- > 0; ) ffree(i);
-  }
-}
-#endif // !LP64
-
-
 void MacroAssembler::enter() {
   push(rbp);
   mov(rbp, rsp);
 }
 
@@ -2751,11 +2740,11 @@
     emit_int8(0x65); // gs:
     emit_int8((unsigned char)0x90);
   }
 }
 
-#if !defined(_LP64)
+#ifndef _LP64
 void MacroAssembler::fcmp(Register tmp) {
   fcmp(tmp, 1, true, true);
 }
 
 void MacroAssembler::fcmp(Register tmp, int index, bool pop_left, bool pop_right) {
@@ -2854,10 +2843,18 @@
   // Note: fxch & fpop to get rid of ST1
   // (otherwise FPU stack could overflow eventually)
   fxch(1);
   fpop();
 }
+
+void MacroAssembler::empty_FPU_stack() {
+  if (VM_Version::supports_mmx()) {
+    emms();
+  } else {
+    for (int i = 8; i-- > 0; ) ffree(i);
+  }
+}
 #endif // !LP64
 
 void MacroAssembler::mulpd(XMMRegister dst, AddressLiteral src) {
   if (reachable(src)) {
     Assembler::mulpd(dst, as_Address(src));
@@ -2866,43 +2863,55 @@
     Assembler::mulpd(dst, Address(rscratch1, 0));
   }
 }
 
 void MacroAssembler::load_float(Address src) {
+#ifdef _LP64
+  movflt(xmm0, src);
+#else
   if (UseSSE >= 1) {
     movflt(xmm0, src);
   } else {
-    LP64_ONLY(ShouldNotReachHere());
-    NOT_LP64(fld_s(src));
+    fld_s(src);
   }
+#endif // LP64
 }
 
 void MacroAssembler::store_float(Address dst) {
+#ifdef _LP64
+  movflt(dst, xmm0);
+#else
   if (UseSSE >= 1) {
     movflt(dst, xmm0);
   } else {
-    LP64_ONLY(ShouldNotReachHere());
-    NOT_LP64(fstp_s(dst));
+    fstp_s(dst);
   }
+#endif // LP64
 }
 
 void MacroAssembler::load_double(Address src) {
+#ifdef _LP64
+  movdbl(xmm0, src);
+#else
   if (UseSSE >= 2) {
     movdbl(xmm0, src);
   } else {
-    LP64_ONLY(ShouldNotReachHere());
-    NOT_LP64(fld_d(src));
+    fld_d(src);
   }
+#endif // LP64
 }
 
 void MacroAssembler::store_double(Address dst) {
+#ifdef _LP64
+  movdbl(dst, xmm0);
+#else
   if (UseSSE >= 2) {
     movdbl(dst, xmm0);
   } else {
-    LP64_ONLY(ShouldNotReachHere());
-    NOT_LP64(fstp_d(dst));
+    fstp_d(dst);
   }
+#endif // LP64
 }
 
 // dst = c = a * b + c
 void MacroAssembler::fmad(XMMRegister dst, XMMRegister a, XMMRegister b, XMMRegister c) {
   Assembler::vfmadd231sd(c, a, b);
