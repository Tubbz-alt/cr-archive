diff a/doc/panama_jextract.md b/doc/panama_jextract.md
--- a/doc/panama_jextract.md
+++ b/doc/panama_jextract.md
@@ -261,10 +261,11 @@
 
 ### Java sample code that uses cblas library
 
 ```java
 
+import jdk.incubator.foreign.NativeScope;
 import blas.*;
 import static blas.RuntimeHelper.*;
 import static blas.cblas_h.*;
 
 public class TestBlas {
@@ -284,11 +285,11 @@
         incx = 1;
         incy = 1;
         alpha = 1;
         beta = 0;
 
-        try (var scope = new CScope()) {
+        try (var scope = NativeScope.unboundedScope()) {
             var a = Cdouble.allocateArray(m*n, scope);
             var x = Cdouble.allocateArray(n, scope);
             var y = Cdouble.allocateArray(n, scope);
 
             /* The elements of the first column */
@@ -327,10 +328,11 @@
                 System.out.print(String.format(" y%d = %f\n", i, Cdouble.get(y, (long)i)));
             }
         }
     }
 }
+
 ```
 
 ### Compiling and running the above BLAS sample
 
 ```sh
@@ -360,18 +362,19 @@
 ### Java sample code that uses LAPACK library
 
 ```java
 
 import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.NativeScope;
 import lapack.*;
 import static lapack.lapacke_h.*;
 
 public class TestLapack {
     public static void main(String[] args) {
 
         /* Locals */
-        try (var scope = new CScope()) {
+        try (var scope = NativeScope.unboundedScope()) {
             var A = Cdouble.allocateArray(new double[]{
                     1, 2, 3, 4, 5, 1, 3, 5, 2, 4, 1, 4, 2, 5, 3
             }, scope);
             var b = Cdouble.allocateArray(new double[]{
                     -10, 12, 14, 16, 18, -3, 14, 12, 16, 16
@@ -412,11 +415,10 @@
             System.out.printf( "\n" );
         }
     }
 }
 
-
 ```
 
 ### Compiling and running the above LAPACK sample
 
 ```sh
@@ -442,19 +444,20 @@
 
 ### Java program that uses libproc to list processes
 
 ```java
 
+import jdk.incubator.foreign.NativeScope;
 import org.unix.*;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 import static org.unix.libproc_h.*;
 
 public class LibprocMain {
     private static final int NAME_BUF_MAX = 256;
 
     public static void main(String[] args) {
-        try (var scope = new CScope()) {
+        try (var scope = NativeScope.unboundedScope()) {
             // get the number of processes
             int numPids = proc_listallpids(NULL, 0);
             // allocate an array
             var pids = Cint.allocateArray(numPids, scope);
             // list all the pids into the native array
@@ -510,11 +513,11 @@
 
 ### Java program that uses libgit2 to clone github repo
 
 ```java
 
-import com.github.CScope;
+import jdk.incubator.foreign.NativeScope;
 import static com.github.git2_h.*;
 import static jdk.incubator.foreign.CSupport.*;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 import static com.github.Cstring.*;
 
@@ -523,11 +526,11 @@
           if (args.length != 2) {
               System.err.println("java GitClone <url> <path>");
               System.exit(1);
           }
           git_libgit2_init();
-          try (var scope = new CScope()) {
+          try (var scope = NativeScope.unboundedScope()) {
               var repo = scope.allocate(C_POINTER, NULL);
               var url = toCString(args[0], scope);
               var path = toCString(args[1], scope);
               System.out.println(git_clone(repo, url, path, NULL));
           }
@@ -570,19 +573,19 @@
 ```
 ### Java program that uses sqlite3
 
 ```java
 
+import jdk.incubator.foreign.NativeScope;
 import org.sqlite.Cpointer;
 import org.sqlite.Cstring;
-import org.sqlite.CScope;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 import static org.sqlite.sqlite3_h.*;
 
 public class SqliteMain {
    public static void main(String[] args) throws Exception {
-        try (var scope = new CScope()) {
+        try (var scope = NativeScope.unboundedScope()) {
             // char** errMsgPtrPtr;
             var errMsgPtrPtr = Cpointer.allocate(NULL, scope);
 
             // sqlite3** dbPtrPtr;
             var dbPtrPtr = Cpointer.allocate(NULL, scope);
