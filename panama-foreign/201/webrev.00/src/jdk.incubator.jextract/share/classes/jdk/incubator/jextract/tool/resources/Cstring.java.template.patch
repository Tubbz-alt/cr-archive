diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
@@ -3,10 +3,11 @@
 import java.lang.invoke.VarHandle;
 import java.nio.charset.Charset;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.NativeScope;
 import static jdk.incubator.foreign.CSupport.C_CHAR;
 
 public final class Cstring {
     // don't create!
     private Cstring() {
@@ -24,11 +25,11 @@
         MemoryAddress addr = segment.baseAddress();
         copy(addr, bytes);
         return segment;
     }
 
-    private static MemoryAddress toCString(byte[] bytes, CScope scope) {
+    private static MemoryAddress toCString(byte[] bytes, NativeScope scope) {
         MemoryLayout strLayout = MemoryLayout.ofSequence(bytes.length + 1, C_CHAR);
         MemoryAddress addr = scope.allocate(strLayout);
         addr.segment().copyFrom(MemorySegment.ofArray(bytes));
         return addr;
     }
@@ -56,15 +57,15 @@
 
     public static MemorySegment toCString(String str, Charset charset) {
          return toCString(str.getBytes(charset));
     }
 
-    public static MemoryAddress toCString(String str, CScope scope) {
+    public static MemoryAddress toCString(String str, NativeScope scope) {
         return toCString(str.getBytes(), scope);
     }
 
-    public static MemoryAddress toCString(String str, Charset charset, CScope scope) {
+    public static MemoryAddress toCString(String str, Charset charset, NativeScope scope) {
         return toCString(str.getBytes(charset), scope);
     }
 
     public static String toJavaStringRestricted(MemoryAddress addr) {
         MemoryAddress baseAddr = addr.segment() != null ?
