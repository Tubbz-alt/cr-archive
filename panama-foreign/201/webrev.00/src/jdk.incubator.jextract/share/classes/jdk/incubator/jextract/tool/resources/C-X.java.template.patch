diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
@@ -1,12 +1,12 @@
 // Generated by jextract
 
 import java.lang.invoke.VarHandle;
-import jdk.incubator.foreign.NativeAllocationScope;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.NativeScope;
 
 import static ${C_LANG}.*;
 
 public class C-X {
     // don't create!
@@ -56,22 +56,22 @@
         var seg = MemorySegment.allocateNative(LAYOUT);
         handle.set(seg.baseAddress(), value);
         return seg;
     }
 
-    public static MemoryAddress allocate(${CARRIER} value, CScope scope) {
+    public static MemoryAddress allocate(${CARRIER} value, NativeScope scope) {
         var addr = scope.allocate(LAYOUT);
         handle.set(addr, value);
         return addr;
     }
 
     public static MemorySegment allocateArray(int length) {
         var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
         return MemorySegment.allocateNative(arrLayout);
     }
 
-    public static MemoryAddress allocateArray(int length, CScope scope) {
+    public static MemoryAddress allocateArray(int length, NativeScope scope) {
         var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
         return scope.allocate(arrLayout);
     }
 
     public static MemorySegment allocateArray(${CARRIER}[] arr) {
@@ -79,11 +79,11 @@
         var seg = MemorySegment.allocateNative(arrLayout);
         seg.copyFrom(MemorySegment.ofArray(arr));
         return seg;
     }
 
-    public static MemoryAddress allocateArray(${CARRIER}[] arr, CScope scope) {
+    public static MemoryAddress allocateArray(${CARRIER}[] arr, NativeScope scope) {
         var arrLayout = MemoryLayout.ofSequence(arr.length, LAYOUT);
         var addr = scope.allocate(arrLayout);
         addr.segment().copyFrom(MemorySegment.ofArray(arr));
         return addr;
     }
