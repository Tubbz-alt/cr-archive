diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
@@ -25,10 +25,11 @@
  */
 
 package jdk.incubator.foreign;
 
 import jdk.internal.foreign.InternalForeign;
+import jdk.internal.foreign.MemorySegmentImpl;
 
 /**
  * A class containing various methods relating to native interop.
  */
 public interface Foreign {
@@ -58,24 +59,10 @@
      */
     static Foreign getInstance() throws IllegalAccessError {
         return InternalForeign.getInstance();
     }
 
-    /**
-     * Returns the absolute address represented by the given off-heap memory address as a {@code long}.
-     * <p>
-     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
-     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
-     * restricted methods, and use safe and supported functionalities, where possible.
-     *
-     * @param address the address to turn into a {@code long}
-     * @return the address as a {@code long}
-     * @throws IllegalAccessError if the permission jkd.incubator.foreign.restrictedMethods is set to 'deny'
-     * @throws IllegalStateException if the given address is not an off-heap address
-     */
-    long asLong(MemoryAddress address) throws IllegalAccessError;
-
     /**
      * Returns a new memory address attached to a native memory segment with given base address and size. The segment
      * attached to the returned address has <em>no temporal bounds</em> and cannot be closed; as such,
      * the returned address is assumed to always be <em>alive</em>. Also, the segment attached to the returned address
      * has <em>no confinement thread</em>; this means that the returned address can be used by multiple threads.
