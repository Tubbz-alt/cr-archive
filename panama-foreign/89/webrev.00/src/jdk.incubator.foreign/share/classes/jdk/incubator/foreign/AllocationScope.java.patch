diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/AllocationScope.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/AllocationScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/AllocationScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/AllocationScope.java
@@ -172,16 +172,26 @@
      * @throws OutOfMemoryError if there is not enough space left in this allocation scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
      * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of an address value.
      */
     public MemoryAddress allocate(MemoryLayout layout, MemoryAddress value) {
-        VarHandle handle = layout.varHandle(MemoryAddress.class);
+        VarHandle handle = MemoryHandles.asAddressVarHandle(layout.varHandle(carrierForSize(layout.byteSize())));
         MemoryAddress addr = allocate(layout);
         handle.set(addr, value);
         return addr;
     }
 
+    private static Class<?> carrierForSize(long size) {
+        return switch ((int)size) {
+            case 1 -> byte.class;
+            case 2 -> short.class;
+            case 4 -> int.class;
+            case 8 -> long.class;
+            default -> throw new IllegalArgumentException("Bad layout size: " + size);
+        };
+    }
+
     /**
      * Allocate a block of memory in this allocation scope with given layout. The address returned by this method is
      * associated with a segment which cannot be closed. Moreover, the returned address must conform to the layout alignment constraints.
      * @param layout the layout of the block of memory to be allocated.
      * @return an address which points to the newly allocated memory block.
