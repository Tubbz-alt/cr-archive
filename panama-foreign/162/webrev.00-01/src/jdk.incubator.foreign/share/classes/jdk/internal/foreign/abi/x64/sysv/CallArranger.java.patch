diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
@@ -457,10 +457,11 @@
 
         for (int i = 0; i < classes.size(); i++) {
             ArgumentClassImpl c = classes.get(i);
 
             if (c == ArgumentClassImpl.MEMORY) {
+                // if any of the eightbytes was passed in memory, pass the whole thing in memory
                 return createMemoryClassArray(classes.size());
             }
 
             if (c == ArgumentClassImpl.X87UP) {
                 if (i == 0) {
@@ -539,11 +540,15 @@
             List<ArgumentClassImpl> layouts = groups[(int)offset / 8];
             if (layouts == null) {
                 layouts = new ArrayList<>();
                 groups[(int)offset / 8] = layouts;
             }
-            layouts.add(classifyValueType((ValueLayout)l));
+            // if the aggregate contains unaligned fields, it has class MEMORY
+            ArgumentClassImpl argumentClass = (offset % l.byteAlignment()) == 0 ?
+                    classifyValueType((ValueLayout)l) :
+                    ArgumentClassImpl.MEMORY;
+            layouts.add(argumentClass);
         } else {
             throw new IllegalStateException("Unexpected layout: " + l);
         }
     }
 }
