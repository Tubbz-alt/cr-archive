diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -68,10 +68,15 @@
     protected final TypeTranslator typeTranslator = new TypeTranslator();
     private final String clsName;
     private final String pkgName;
     private StructBuilder structBuilder;
     private List<String> structSources = new ArrayList<>();
+    private Set<String> structClassNames = new HashSet<>();
+    private int structClassNameCount = 0;
+    private String uniqueStructClassName(String name) {
+        return structClassNames.add(name.toLowerCase())? name : (name + "$" + structClassNameCount++);
+    }
 
     // have we seen this Variable earlier?
     protected boolean variableSeen(Declaration.Variable tree) {
         return !variables.add(tree);
     }
@@ -221,25 +226,35 @@
         if (d.layout().isEmpty()) {
             //skip decl-only
             return null;
         }
         String name = d.name();
-        if (name.isEmpty() && parent != null) {
+        if (parent instanceof Declaration.Typedef) {
             name = parent.name();
         }
 
         boolean structClass = false;
         if (!d.name().isEmpty() || !isRecord(parent)) {
             //only add explicit struct layout if the struct is not to be flattened inside another struct
             switch (d.kind()) {
                 case STRUCT:
                 case UNION: {
                     structClass = true;
-                    this.structBuilder = new StructBuilder("C" + name, pkgName, constantHelper);
+                    /*
+                     * We may have case-insensitive name collision! A C program may have
+                     * defined structs with the names FooS, fooS, FoOs, fOOs. Because we
+                     * map structs and unions to nested classes of header classes, such
+                     * a case-insensitive name collision is problematic. This is because in
+                     * a case-insensitive file system javac will overwrite classes for
+                     * Header$CFooS, Header$CfooS, Header$CFoOs and so on! We solve this by
+                     * generating unique case-insensitive names for classes.
+                     */
+                    String structClassName = uniqueStructClassName("C" + name);
+                    this.structBuilder = new StructBuilder(structClassName, pkgName, constantHelper);
                     structBuilder.incrAlign();
                     structBuilder.classBegin();
-                    structBuilder.addLayoutGetter("C" + name, d.layout().get());
+                    structBuilder.addLayoutGetter(structClassName, d.layout().get());
                     break;
                 }
             }
         }
         d.members().forEach(fieldTree -> fieldTree.accept(this, d.name().isEmpty() ? parent : d));
@@ -307,13 +322,11 @@
     @Override
     public Void visitTypedef(Declaration.Typedef tree, Declaration parent) {
         Type type = tree.type();
         if (type instanceof Type.Declared) {
             Declaration.Scoped s = ((Type.Declared) type).tree();
-            // only generate unnamed for now
-            // skip typedef with different name
-            if (s.name().isEmpty()) {
+            if (!s.name().equals(tree.name())) {
                 return visitScoped(s, tree);
             }
         }
         return null;
     }
