diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
@@ -24,13 +24,14 @@
  *
  */
 
 package jdk.internal.jextract.impl;
 
+import jdk.incubator.foreign.CSupport;
+import jdk.incubator.foreign.ForeignLinker;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryLayout;
-import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.jextract.Type.Primitive;
 import jdk.internal.clang.Cursor;
 import jdk.internal.clang.Type;
 import jdk.internal.foreign.abi.SharedUtils;
 
@@ -39,11 +40,11 @@
 
 /**
  * General Layout utility functions
  */
 public final class LayoutUtils {
-    private static SystemABI abi = SharedUtils.getSystemABI();
+    private static ForeignLinker abi = SharedUtils.getSystemLinker();
     private LayoutUtils() {}
 
     public static String getName(Type type) {
         Cursor c = type.getDeclarationCursor();
         if (c.isInvalid()) {
@@ -87,14 +88,14 @@
             case Double:
                 return Primitive.Kind.Double.layout().orElseThrow(unsupported);
             case LongDouble:
                 return Primitive.Kind.LongDouble.layout().orElseThrow(unsupported);
             case Complex:
-                if (!abi.name().equals(SystemABI.ABI_SYSV)) {
+                if (!abi.name().equals(CSupport.SysV.NAME)) {
                     throw new UnsupportedOperationException("unsupported: " + t.kind());
                 }
-                return SystemABI.SysV.C_COMPLEX_LONGDOUBLE;
+                return CSupport.SysV.C_COMPLEX_LONGDOUBLE;
             case Record:
                 return getRecordLayout(t);
             case Vector:
                 return MemoryLayout.ofSequence(t.getNumberOfElements(), getLayout(t.getElementType()));
             case ConstantArray:
@@ -110,11 +111,11 @@
             case Typedef:
             case Elaborated:
                 return getLayout(t.canonicalType());
             case Pointer:
             case BlockPointer:
-                return SystemABI.C_POINTER;
+                return CSupport.C_POINTER;
             default:
                 throw new UnsupportedOperationException("unsupported: " + t.kind());
         }
     }
 
@@ -137,11 +138,11 @@
         }
 
         @Override
         public MemoryLayout visitDelegated(jdk.incubator.jextract.Type.Delegated t, Void _ignored) {
             if (t.kind() == jdk.incubator.jextract.Type.Delegated.Kind.POINTER) {
-                return SystemABI.C_POINTER;
+                return CSupport.C_POINTER;
             } else {
                 return t.type().accept(this, null);
             }
         }
 
@@ -194,11 +195,11 @@
     public static Primitive.Kind valueLayoutForSize(long size) {
         switch ((int)size) {
             case 8: return Primitive.Kind.Char;
             case 16: return Primitive.Kind.Short;
             case 32: return Primitive.Kind.Int;
-            case 64: return SystemABI.getSystemABI().name().equals(SystemABI.Win64.NAME) ?
+            case 64: return CSupport.getSystemLinker().name().equals(CSupport.Win64.NAME) ?
                     Primitive.Kind.LongLong : Primitive.Kind.Long;
             default:
                 throw new IllegalStateException("Cannot infer container layout");
         }
     }
