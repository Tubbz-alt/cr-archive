diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Index.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Index.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Index.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Index.java
@@ -24,14 +24,14 @@
  *
  */
 
 package jdk.internal.clang;
 
+import jdk.incubator.foreign.CSupport;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemorySegment;
-import jdk.incubator.foreign.SystemABI;
 import jdk.internal.clang.libclang.Index_h;
 
 import java.lang.invoke.VarHandle;
 import java.nio.file.Path;
 import java.util.ArrayList;
@@ -74,17 +74,17 @@
             this.code = code;
         }
     }
 
     private static final VarHandle VH_MemoryAddress =
-            MemoryHandles.asAddressVarHandle(SystemABI.C_POINTER.varHandle(long.class));
+            MemoryHandles.asAddressVarHandle(CSupport.C_POINTER.varHandle(long.class));
 
     public TranslationUnit parseTU(String file, Consumer<Diagnostic> dh, int options, String... args)
     throws ParsingFailedException {
         try (MemorySegment src = Utils.toNativeString(file) ;
              MemorySegment cargs = Utils.toNativeStringArray(args);
-             MemorySegment outAddress = MemorySegment.allocateNative(SystemABI.C_POINTER)) {
+             MemorySegment outAddress = MemorySegment.allocateNative(CSupport.C_POINTER)) {
             ErrorCode code = ErrorCode.valueOf(Index_h.clang_parseTranslationUnit2(
                     ptr,
                     src.baseAddress(),
                     cargs == null ? MemoryAddress.NULL : cargs.baseAddress(),
                     args.length, MemoryAddress.NULL,
