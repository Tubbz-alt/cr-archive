diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
@@ -38,20 +38,31 @@
 class HeaderBuilder extends JavaSourceBuilder {
     HeaderBuilder(String className, String pkgName, ConstantHelper constantHelper) {
         super(className, pkgName, constantHelper);
     }
 
+    private String getArrayTypeName(Class<?> type) {
+        assert type.isArray();
+        Class<?> elemType = type.getComponentType();
+        return elemType.isArray()? getArrayTypeName(elemType) + "[]" : elemType.getName() + "[]";
+    }
+
     public void addFunctionalInterface(String name, MethodType mtype,  FunctionDescriptor fDesc) {
         incrAlign();
         indent();
         sb.append("public interface " + name + " {\n");
         incrAlign();
         indent();
         sb.append(mtype.returnType().getName() + " apply(");
         String delim = "";
-        for (int i = 0 ; i < mtype.parameterCount() ; i++) {
-            sb.append(delim + mtype.parameterType(i).getName() + " x" + i);
+        for (int i = 0 ; i < mtype.parameterCount(); i++) {
+            Class<?> paramType = mtype.parameterType(i);
+            if (paramType.isArray()) {
+                sb.append(delim + getArrayTypeName(paramType) + " x" + i);
+            } else {
+                sb.append(delim + paramType.getName() + " x" + i);
+            }
             delim = ", ";
         }
         sb.append(");\n");
         addFunctionalFactory(name, mtype, fDesc);
         decrAlign();
@@ -72,11 +83,12 @@
             String pName = paramNames.get(i);
             if (pName.isEmpty()) {
                 pName = "x" + i;
             }
             pNames.add(pName);
-            sb.append(delim + mtype.parameterType(i).getName() + " " + pName);
+            Class<?> paramType = mtype.parameterType(i);
+            sb.append(delim + (paramType.isArray()? getArrayTypeName(paramType) : paramType.getName()) + " " + pName);
             delim = ", ";
         }
         if (varargs) {
             String lastArg = "x" + numParams;
             if (numParams > 0) {
diff a/test/jdk/tools/jextract/Test8249300.java b/test/jdk/tools/jextract/Test8249300.java
--- /dev/null
+++ b/test/jdk/tools/jextract/Test8249300.java
@@ -0,0 +1,52 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+import java.nio.file.Path;
+import jdk.incubator.foreign.MemoryAddress;
+import org.testng.annotations.Test;
+
+/*
+ * @test
+ * @library /test/lib
+ * @modules jdk.incubator.jextract
+ * @build JextractToolRunner
+ * @bug 8249300
+ * @summary jextract does not handle empty parameter list of a function pointer parameters
+ * @run testng/othervm -Dforeign.restricted=permit Test8249300
+ */
+public class Test8249300 extends JextractToolRunner {
+    @Test
+    public void testVoidTypedef() {
+        Path outputPath = getOutputFilePath("output8249300");
+        Path headerFile = getInputFilePath("test8249300.h");
+        run("-d", outputPath.toString(), headerFile.toString()).checkSuccess();
+        try(Loader loader = classLoader(outputPath)) {
+            Class<?> headerClass = loader.loadClass("test8249300_h");
+            checkMethod(headerClass, "func", void.class, MemoryAddress.class);
+            Class<?> fiClass = loader.loadClass("test8249300_h$func$f");
+            checkMethod(fiClass, "apply", void.class, Object[].class);
+        } finally {
+            deleteDir(outputPath);
+        }
+    }
+}
diff a/test/jdk/tools/jextract/test8249300.h b/test/jdk/tools/jextract/test8249300.h
--- /dev/null
+++ b/test/jdk/tools/jextract/test8249300.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+#ifdef __cplusplus
+extern "C" {
+#endif // __cplusplus
+
+#ifdef _WIN64
+#define EXPORT __declspec(dllexport)
+#else
+#define EXPORT
+#endif
+
+typedef void MyVoid;
+EXPORT void func(MyVoid (*f)());
+
+#ifdef __cplusplus
+}
+#endif // __cplusplus
