diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
@@ -38,31 +38,20 @@
 class HeaderBuilder extends JavaSourceBuilder {
     HeaderBuilder(String className, String pkgName, ConstantHelper constantHelper) {
         super(className, pkgName, constantHelper);
     }
 
-    private String getArrayTypeName(Class<?> type) {
-        assert type.isArray();
-        Class<?> elemType = type.getComponentType();
-        return elemType.isArray()? getArrayTypeName(elemType) + "[]" : elemType.getName() + "[]";
-    }
-
     public void addFunctionalInterface(String name, MethodType mtype,  FunctionDescriptor fDesc) {
         incrAlign();
         indent();
         sb.append("public interface " + name + " {\n");
         incrAlign();
         indent();
         sb.append(mtype.returnType().getName() + " apply(");
         String delim = "";
         for (int i = 0 ; i < mtype.parameterCount(); i++) {
-            Class<?> paramType = mtype.parameterType(i);
-            if (paramType.isArray()) {
-                sb.append(delim + getArrayTypeName(paramType) + " x" + i);
-            } else {
-                sb.append(delim + paramType.getName() + " x" + i);
-            }
+            sb.append(delim + mtype.parameterType(i).getName() + " x" + i);
             delim = ", ";
         }
         sb.append(");\n");
         addFunctionalFactory(name, mtype, fDesc);
         decrAlign();
@@ -83,12 +72,11 @@
             String pName = paramNames.get(i);
             if (pName.isEmpty()) {
                 pName = "x" + i;
             }
             pNames.add(pName);
-            Class<?> paramType = mtype.parameterType(i);
-            sb.append(delim + (paramType.isArray()? getArrayTypeName(paramType) : paramType.getName()) + " " + pName);
+            sb.append(delim + mtype.parameterType(i).getName() + " " + pName);
             delim = ", ";
         }
         if (varargs) {
             String lastArg = "x" + numParams;
             if (numParams > 0) {
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -265,11 +265,14 @@
             Type.Function f = getAsFunctionPointer(param.type());
             if (f != null) {
                 String name = funcTree.name() + "$" + (param.name().isEmpty() ? "x" + i : param.name());
                 name = Utils.javaSafeIdentifier(name);
                 //generate functional interface
-                MethodType fitype = typeTranslator.getMethodType(f);
+                if (f.varargs()) {
+                    System.err.println("WARNING: varargs in callbacks is not supported");
+                }
+                MethodType fitype = typeTranslator.getMethodType(f, false);
                 builder.addFunctionalInterface(name, fitype, Type.descriptorFor(f).orElseThrow());
                 i++;
             }
         }
         return null;
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/TypeTranslator.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/TypeTranslator.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/TypeTranslator.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/TypeTranslator.java
@@ -125,15 +125,19 @@
     Class<?> getJavaType(Type t) {
         return t.accept(this, null);
     }
 
     MethodType getMethodType(Type.Function type) {
+        return getMethodType(type, true);
+    }
+
+    MethodType getMethodType(Type.Function type, boolean varargsCheck) {
         MethodType mtype = MethodType.methodType(getJavaType(type.returnType()));
         for (Type arg : type.argumentTypes()) {
             mtype = mtype.appendParameterTypes(getJavaType(arg));
         }
-        if (type.varargs()) {
+        if (varargsCheck && type.varargs()) {
             mtype = mtype.appendParameterTypes(Object[].class);
         }
         return mtype;
     }
 }
diff a/test/jdk/tools/jextract/Test8249300.java b/test/jdk/tools/jextract/Test8249300.java
--- a/test/jdk/tools/jextract/Test8249300.java
+++ b/test/jdk/tools/jextract/Test8249300.java
@@ -42,11 +42,11 @@
         run("-d", outputPath.toString(), headerFile.toString()).checkSuccess();
         try(Loader loader = classLoader(outputPath)) {
             Class<?> headerClass = loader.loadClass("test8249300_h");
             checkMethod(headerClass, "func", void.class, MemoryAddress.class);
             Class<?> fiClass = loader.loadClass("test8249300_h$func$f");
-            checkMethod(fiClass, "apply", void.class, Object[].class);
+            checkMethod(fiClass, "apply", void.class);
         } finally {
             deleteDir(outputPath);
         }
     }
 }
