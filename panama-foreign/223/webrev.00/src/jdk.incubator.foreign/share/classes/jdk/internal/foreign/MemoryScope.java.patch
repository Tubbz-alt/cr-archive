diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
@@ -53,11 +53,11 @@
  * scope that doesn't check for thread-confinement while its temporal bounds are
  * enforced reliably only under condition that thread that closes the scope is also
  * the single thread performing the checked access or there is an external synchronization
  * in place that prevents concurrent access and closing of the scope.
  */
-abstract class MemoryScope {
+public abstract class MemoryScope {
 
     /**
      * Creates a root MemoryScope with given ref, cleanupAction and current
      * thread as the "owner" thread.
      * This method may be called in any thread.
@@ -68,11 +68,11 @@
      *
      * @param ref           an optional reference to an instance that needs to be kept reachable
      * @param cleanupAction an optional cleanup action to be executed when returned scope is closed
      * @return a root MemoryScope
      */
-    static MemoryScope create(Object ref, Runnable cleanupAction) {
+    public static MemoryScope create(Object ref, Runnable cleanupAction) {
         return new Root(Thread.currentThread(), ref, cleanupAction);
     }
 
     /**
      * Creates a root MemoryScope with given ref, cleanupAction and "owner" thread.
