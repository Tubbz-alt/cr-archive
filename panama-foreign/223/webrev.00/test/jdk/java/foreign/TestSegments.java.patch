diff a/test/jdk/java/foreign/TestSegments.java b/test/jdk/java/foreign/TestSegments.java
--- a/test/jdk/java/foreign/TestSegments.java
+++ b/test/jdk/java/foreign/TestSegments.java
@@ -28,10 +28,11 @@
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.MemorySegments;
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 
 import java.lang.invoke.VarHandle;
 import java.lang.reflect.Method;
@@ -51,27 +52,27 @@
 
 public class TestSegments {
 
     @Test(dataProvider = "badSizeAndAlignments", expectedExceptions = IllegalArgumentException.class)
     public void testBadAllocateAlign(long size, long align) {
-        MemorySegment.allocateNative(size, align);
+        MemorySegments.allocateNative(size, align);
     }
 
     @Test(dataProvider = "badLayouts", expectedExceptions = UnsupportedOperationException.class)
     public void testBadAllocateLayout(MemoryLayout layout) {
-        MemorySegment.allocateNative(layout);
+        MemorySegments.allocateNative(layout);
     }
 
     @Test(expectedExceptions = { OutOfMemoryError.class,
                                  IllegalArgumentException.class })
     public void testAllocateTooBig() {
-        MemorySegment.allocateNative(Long.MAX_VALUE);
+        MemorySegments.allocateNative(Long.MAX_VALUE);
     }
 
     @Test(dataProvider = "segmentOperations")
     public void testOpOutsideConfinement(SegmentMember member) throws Throwable {
-        try (MemorySegment segment = MemorySegment.allocateNative(4)) {
+        try (MemorySegment segment = MemorySegments.allocateNative(4)) {
             AtomicBoolean failed = new AtomicBoolean(false);
             Thread t = new Thread(() -> {
                 try {
                     Object o = member.method.invoke(segment, member.params);
                     if (member.method.getName().equals("acquire")) {
@@ -90,11 +91,11 @@
 
     @Test
     public void testNativeSegmentIsZeroed() {
         VarHandle byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)
                 .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());
-        try (MemorySegment segment = MemorySegment.allocateNative(1000)) {
+        try (MemorySegment segment = MemorySegments.allocateNative(1000)) {
             for (long i = 0 ; i < segment.byteSize() ; i++) {
                 assertEquals(0, (byte)byteHandle.get(segment.baseAddress(), i));
             }
         }
     }
@@ -122,11 +123,11 @@
 
     @Test
     public void testSlices() {
         VarHandle byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)
                 .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());
-        try (MemorySegment segment = MemorySegment.allocateNative(10)) {
+        try (MemorySegment segment = MemorySegments.allocateNative(10)) {
             //init
             for (byte i = 0 ; i < segment.byteSize() ; i++) {
                 byteHandle.set(segment.baseAddress(), (long)i, i);
             }
             long start = 0;
@@ -156,11 +157,11 @@
 
     @Test(dataProvider = "accessModes")
     public void testAccessModes(int accessModes) {
         int[] arr = new int[1];
         for (AccessActions action : AccessActions.values()) {
-            MemorySegment segment = MemorySegment.ofArray(arr);
+            MemorySegment segment = MemorySegments.ofArray(arr);
             MemorySegment restrictedSegment = segment.withAccessModes(accessModes);
             assertEquals(restrictedSegment.accessModes(), accessModes);
             boolean shouldFail = !restrictedSegment.hasAccessModes(action.accessMode);
             try {
                 action.run(restrictedSegment);
@@ -172,20 +173,20 @@
     }
 
     @DataProvider(name = "segmentFactories")
     public Object[][] segmentFactories() {
         List<Supplier<MemorySegment>> l = List.of(
-                () -> MemorySegment.ofArray(new byte[] { 0x00, 0x01, 0x02, 0x03 }),
-                () -> MemorySegment.ofArray(new char[] {'a', 'b', 'c', 'd' }),
-                () -> MemorySegment.ofArray(new double[] { 1d, 2d, 3d, 4d} ),
-                () -> MemorySegment.ofArray(new float[] { 1.0f, 2.0f, 3.0f, 4.0f }),
-                () -> MemorySegment.ofArray(new int[] { 1, 2, 3, 4 }),
-                () -> MemorySegment.ofArray(new long[] { 1l, 2l, 3l, 4l } ),
-                () -> MemorySegment.ofArray(new short[] { 1, 2, 3, 4 } ),
-                () -> MemorySegment.allocateNative(4),
-                () -> MemorySegment.allocateNative(4, 8),
-                () -> MemorySegment.allocateNative(MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder()))
+                () -> MemorySegments.ofArray(new byte[] { 0x00, 0x01, 0x02, 0x03 }),
+                () -> MemorySegments.ofArray(new char[] {'a', 'b', 'c', 'd' }),
+                () -> MemorySegments.ofArray(new double[] { 1d, 2d, 3d, 4d} ),
+                () -> MemorySegments.ofArray(new float[] { 1.0f, 2.0f, 3.0f, 4.0f }),
+                () -> MemorySegments.ofArray(new int[] { 1, 2, 3, 4 }),
+                () -> MemorySegments.ofArray(new long[] { 1l, 2l, 3l, 4l } ),
+                () -> MemorySegments.ofArray(new short[] { 1, 2, 3, 4 } ),
+                () -> MemorySegments.allocateNative(4),
+                () -> MemorySegments.allocateNative(4, 8),
+                () -> MemorySegments.allocateNative(MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder()))
         );
         return l.stream().map(s -> new Object[] { s }).toArray(Object[][]::new);
     }
 
     @Test(dataProvider = "segmentFactories")
@@ -193,17 +194,18 @@
         VarHandle byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)
                 .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());
 
         for (byte value : new byte[] {(byte) 0xFF, (byte) 0x00, (byte) 0x45}) {
             try (MemorySegment segment = memorySegmentSupplier.get()) {
-                segment.fill(value);
+                MemorySegments.fill(segment, value);
                 for (long l = 0; l < segment.byteSize(); l++) {
                     assertEquals((byte) byteHandle.get(segment.baseAddress(), l), value);
                 }
 
                 // fill a slice
-                var sliceSegment = segment.asSlice(1, segment.byteSize() - 2).fill((byte) ~value);
+                var sliceSegment = segment.asSlice(1, segment.byteSize() - 2);
+                MemorySegments.fill(sliceSegment, (byte) ~value);
                 for (long l = 0; l < sliceSegment.byteSize(); l++) {
                     assertEquals((byte) byteHandle.get(sliceSegment.baseAddress(), l), ~value);
                 }
                 // assert enclosing slice
                 assertEquals((byte) byteHandle.get(segment.baseAddress(), 0L), value);
@@ -217,27 +219,27 @@
 
     @Test(dataProvider = "segmentFactories", expectedExceptions = IllegalStateException.class)
     public void testFillClosed(Supplier<MemorySegment> memorySegmentSupplier) {
         MemorySegment segment = memorySegmentSupplier.get();
         segment.close();
-        segment.fill((byte) 0xFF);
+        MemorySegments.fill(segment, (byte) 0xFF);
     }
 
     @Test(dataProvider = "segmentFactories", expectedExceptions = UnsupportedOperationException.class)
     public void testFillIllegalAccessMode(Supplier<MemorySegment> memorySegmentSupplier) {
         try (MemorySegment segment = memorySegmentSupplier.get()) {
-            segment.withAccessModes(segment.accessModes() & ~WRITE).fill((byte) 0xFF);
+            MemorySegments.fill(segment.withAccessModes(segment.accessModes() & ~WRITE), (byte) 0xFF);
         }
     }
 
     @Test(dataProvider = "segmentFactories")
     public void testFillThread(Supplier<MemorySegment> memorySegmentSupplier) throws Exception {
         try (MemorySegment segment = memorySegmentSupplier.get()) {
             AtomicReference<RuntimeException> exception = new AtomicReference<>();
             Runnable action = () -> {
                 try {
-                    segment.fill((byte) 0xBA);
+                    MemorySegments.fill(segment, (byte) 0xBA);
                 } catch (RuntimeException e) {
                     exception.set(e);
                 }
             };
             Thread thread = new Thread(action);
@@ -251,33 +253,33 @@
         }
     }
 
     @Test
     public void testFillEmpty() {
-        MemorySegment.ofArray(new byte[] { }).fill((byte) 0xFF);
-        MemorySegment.ofArray(new byte[2]).asSlice(0, 0).fill((byte) 0xFF);
-        MemorySegment.ofByteBuffer(ByteBuffer.allocateDirect(0)).fill((byte) 0xFF);
+        MemorySegments.fill(MemorySegments.ofArray(new byte[] { }), (byte) 0xFF);
+        MemorySegments.fill(MemorySegments.ofArray(new byte[2]).asSlice(0, 0), (byte) 0xFF);
+        MemorySegments.fill(MemorySegments.ofByteBuffer(ByteBuffer.allocateDirect(0)), (byte) 0xFF);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testWithAccessModesBadUnsupportedMode() {
         int[] arr = new int[1];
-        MemorySegment segment = MemorySegment.ofArray(arr);
+        MemorySegment segment = MemorySegments.ofArray(arr);
         segment.withAccessModes((1 << AccessActions.values().length) + 1);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadWithAccessModesBadStrongerMode() {
         int[] arr = new int[1];
-        MemorySegment segment = MemorySegment.ofArray(arr).withAccessModes(READ);
+        MemorySegment segment = MemorySegments.ofArray(arr).withAccessModes(READ);
         segment.withAccessModes(WRITE);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadHasAccessModes() {
         int[] arr = new int[1];
-        MemorySegment segment = MemorySegment.ofArray(arr);
+        MemorySegment segment = MemorySegments.ofArray(arr);
         segment.hasAccessModes((1 << AccessActions.values().length) + 1);
     }
 
     @DataProvider(name = "badSizeAndAlignments")
     public Object[][] sizesAndAlignments() {
@@ -338,10 +340,16 @@
                 "close",
                 "fill",
                 "copyFrom",
                 "mismatch",
                 "toByteArray",
+                "toCharArray",
+                "toShortArray",
+                "toIntArray",
+                "toFloatArray",
+                "toLongArray",
+                "toDoubleArray",
                 "withOwnerThread"
         );
 
         public SegmentMember(Method method, Object[] params) {
             this.method = method;
@@ -397,11 +405,11 @@
     enum AccessActions {
         ACQUIRE(MemorySegment.ACQUIRE) {
             @Override
             void run(MemorySegment segment) {
                 Spliterator<MemorySegment> spliterator =
-                        MemorySegment.spliterator(segment, MemoryLayout.ofSequence(segment.byteSize(), MemoryLayouts.JAVA_BYTE));
+                        MemorySegments.spliterator(segment, MemoryLayout.ofSequence(segment.byteSize(), MemoryLayouts.JAVA_BYTE));
                 AtomicReference<RuntimeException> exception = new AtomicReference<>();
                 Runnable action = () -> {
                     try {
                         spliterator.tryAdvance(s -> { });
                     } catch (RuntimeException e) {
