diff a/test/jdk/java/foreign/TestMemoryCopy.java b/test/jdk/java/foreign/TestMemoryCopy.java
--- a/test/jdk/java/foreign/TestMemoryCopy.java
+++ b/test/jdk/java/foreign/TestMemoryCopy.java
@@ -28,10 +28,11 @@
  */
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.MemorySegments;
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 
 import java.lang.invoke.VarHandle;
 import java.util.ArrayList;
@@ -55,22 +56,22 @@
         }
         for (int i = 0 ; i < size ; i++) {
             BYTE_HANDLE.set(addr1.addOffset(i), (byte) i);
         }
         //perform copy
-        s2.segment.copyFrom(s1.segment.asSlice(0, size));
+        MemorySegments.copy(s1.segment.asSlice(0, size), s2.segment);
         //check that copy actually worked
         for (int i = 0 ; i < size ; i++) {
             assertEquals((byte)i, BYTE_HANDLE.get(addr2.addOffset(i)));
         }
     }
 
     static class SegmentSlice {
 
         enum Kind {
-            NATIVE(MemorySegment::allocateNative),
-            ARRAY(i -> MemorySegment.ofArray(new byte[i]));
+            NATIVE(MemorySegments::allocateNative),
+            ARRAY(i -> MemorySegments.ofArray(new byte[i]));
 
             final IntFunction<MemorySegment> segmentFactory;
 
             Kind(IntFunction<MemorySegment> segmentFactory) {
                 this.segmentFactory = segmentFactory;
