diff a/test/jdk/java/foreign/TestVarHandleCombinators.java b/test/jdk/java/foreign/TestVarHandleCombinators.java
--- a/test/jdk/java/foreign/TestVarHandleCombinators.java
+++ b/test/jdk/java/foreign/TestVarHandleCombinators.java
@@ -26,10 +26,11 @@
  * @test
  * @run testng TestVarHandleCombinators
  */
 
 import jdk.incubator.foreign.MemoryHandles;
+import jdk.incubator.foreign.MemorySegments;
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
@@ -46,28 +47,28 @@
     public void testElementAccess() {
         VarHandle vh = MemoryHandles.varHandle(byte.class, ByteOrder.nativeOrder());
         vh = MemoryHandles.withStride(vh, 1);
 
         byte[] arr = { 0, 0, -1, 0 };
-        MemorySegment segment = MemorySegment.ofArray(arr);
+        MemorySegment segment = MemorySegments.ofArray(arr);
         MemoryAddress addr = segment.baseAddress();
 
         assertEquals((byte) vh.get(addr, 2), (byte) -1);
     }
 
     @Test(expectedExceptions = IllegalStateException.class)
     public void testUnalignedElement() {
         VarHandle vh = MemoryHandles.varHandle(byte.class, 4, ByteOrder.nativeOrder());
         vh = MemoryHandles.withStride(vh, 2);
-        MemorySegment segment = MemorySegment.ofArray(new byte[4]);
+        MemorySegment segment = MemorySegments.ofArray(new byte[4]);
         vh.get(segment.baseAddress(), 1L); //should throw
     }
 
     public void testZeroStrideElement() {
         VarHandle vh = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());
         VarHandle strided_vh = MemoryHandles.withStride(vh, 0);
-        MemorySegment segment = MemorySegment.ofArray(new int[] { 42 });
+        MemorySegment segment = MemorySegments.ofArray(new int[] { 42 });
         for (int i = 0 ; i < 100 ; i++) {
             assertEquals((int)vh.get(segment.baseAddress()), strided_vh.get(segment.baseAddress(), (long)i));
         }
     }
 
@@ -89,11 +90,11 @@
 
     @Test
     public void testAlign() {
         VarHandle vh = MemoryHandles.varHandle(byte.class, 2, ByteOrder.nativeOrder());
 
-        MemorySegment segment = MemorySegment.allocateNative(1, 2);
+        MemorySegment segment = MemorySegments.allocateNative(1, 2);
         MemoryAddress address = segment.baseAddress();
 
         vh.set(address, (byte) 10); // fine, memory region is aligned
         assertEquals((byte) vh.get(address), (byte) 10);
     }
@@ -101,20 +102,20 @@
     @Test(expectedExceptions = IllegalStateException.class)
     public void testAlignBadAccess() {
         VarHandle vh = MemoryHandles.varHandle(byte.class, 2, ByteOrder.nativeOrder());
         vh = MemoryHandles.withOffset(vh, 1); // offset by 1 byte
 
-        MemorySegment segment = MemorySegment.allocateNative(2, 2);
+        MemorySegment segment = MemorySegments.allocateNative(2, 2);
         MemoryAddress address = segment.baseAddress();
 
         vh.set(address, (byte) 10); // should be bad align
     }
 
     public void testZeroOffsetElement() {
         VarHandle vh = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());
         VarHandle offset_vh = MemoryHandles.withOffset(vh, 0);
-        MemorySegment segment = MemorySegment.ofArray(new int[] { 42 });
+        MemorySegment segment = MemorySegments.ofArray(new int[] { 42 });
         for (int i = 0 ; i < 100 ; i++) {
             assertEquals((int)vh.get(segment.baseAddress()), offset_vh.get(segment.baseAddress(), (long)i));
         }
     }
 
@@ -126,31 +127,31 @@
 
     @Test(expectedExceptions = IllegalStateException.class)
     public void testUnalignedOffset() {
         VarHandle vh = MemoryHandles.varHandle(byte.class, 4, ByteOrder.nativeOrder());
         vh = MemoryHandles.withOffset(vh, 2);
-        MemorySegment segment = MemorySegment.ofArray(new byte[4]);
+        MemorySegment segment = MemorySegments.ofArray(new byte[4]);
         vh.get(segment.baseAddress()); //should throw
     }
 
     @Test
     public void testOffset() {
         VarHandle vh = MemoryHandles.varHandle(byte.class, ByteOrder.nativeOrder());
         vh = MemoryHandles.withOffset(vh, 1);
 
-        MemorySegment segment = MemorySegment.ofArray(new byte[2]);
+        MemorySegment segment = MemorySegments.ofArray(new byte[2]);
         MemoryAddress address = segment.baseAddress();
 
         vh.set(address, (byte) 10);
         assertEquals((byte) vh.get(address), (byte) 10);
     }
 
     @Test
     public void testByteOrderLE() {
         VarHandle vh = MemoryHandles.varHandle(short.class, 2, ByteOrder.LITTLE_ENDIAN);
         byte[] arr = new byte[2];
-        MemorySegment segment = MemorySegment.ofArray(arr);
+        MemorySegment segment = MemorySegments.ofArray(arr);
         MemoryAddress address = segment.baseAddress();
 
         vh.set(address, (short) 0xFF);
         assertEquals(arr[0], (byte) 0xFF);
         assertEquals(arr[1], (byte) 0);
@@ -158,11 +159,11 @@
 
     @Test
     public void testByteOrderBE() {
         VarHandle vh = MemoryHandles.varHandle(short.class, 2, ByteOrder.BIG_ENDIAN);
         byte[] arr = new byte[2];
-        MemorySegment segment = MemorySegment.ofArray(arr);
+        MemorySegment segment = MemorySegments.ofArray(arr);
         MemoryAddress address = segment.baseAddress();
 
         vh.set(address, (short) 0xFF);
         assertEquals(arr[0], (byte) 0);
         assertEquals(arr[1], (byte) 0xFF);
@@ -178,11 +179,11 @@
         VarHandle vh = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());
         vh = MemoryHandles.withOffset(vh, 4);
         VarHandle inner_vh = MemoryHandles.withStride(vh, 8);
         VarHandle outer_vh = MemoryHandles.withStride(inner_vh, 5 * 8);
         int count = 0;
-        try (MemorySegment segment = MemorySegment.allocateNative(inner_size * outer_size * 8)) {
+        try (MemorySegment segment = MemorySegments.allocateNative(inner_size * outer_size * 8)) {
             for (long i = 0; i < outer_size; i++) {
                 for (long j = 0; j < inner_size; j++) {
                     outer_vh.set(segment.baseAddress(), i, j, count);
                     assertEquals(
                             (int)inner_vh.get(segment.baseAddress().addOffset(i * inner_size * 8), j),
