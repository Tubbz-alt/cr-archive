diff a/test/jdk/java/foreign/TestMemoryHandleAsUnsigned.java b/test/jdk/java/foreign/TestMemoryHandleAsUnsigned.java
--- a/test/jdk/java/foreign/TestMemoryHandleAsUnsigned.java
+++ b/test/jdk/java/foreign/TestMemoryHandleAsUnsigned.java
@@ -31,10 +31,12 @@
 import java.lang.invoke.VarHandle;
 import java.nio.ByteOrder;
 import java.util.Arrays;
 import java.util.stream.IntStream;
 import java.util.stream.LongStream;
+
+import jdk.incubator.foreign.MemorySegments;
 import org.testng.annotations.*;
 import static java.nio.ByteOrder.BIG_ENDIAN;
 import static org.testng.Assert.*;
 
 /*
@@ -56,11 +58,11 @@
 
         MemoryLayout layout = MemoryLayouts.BITS_8_BE;
         VarHandle byteHandle = layout.varHandle(byte.class);
         VarHandle intHandle = MemoryHandles.asUnsigned(byteHandle, int.class);
 
-        try (MemorySegment segment = MemorySegment.allocateNative(layout)) {
+        try (MemorySegment segment = MemorySegments.allocateNative(layout)) {
             intHandle.set(segment.baseAddress(), intValue);
             int expectedIntValue = Byte.toUnsignedInt(byteValue);
             assertEquals((int) intHandle.get(segment.baseAddress()), expectedIntValue);
             assertEquals((byte) byteHandle.get(segment.baseAddress()), byteValue);
         }
@@ -78,11 +80,11 @@
 
         MemoryLayout layout = MemoryLayouts.BITS_8_BE;
         VarHandle byteHandle = layout.varHandle(byte.class);
         VarHandle longHandle = MemoryHandles.asUnsigned(byteHandle, long.class);
 
-        try (MemorySegment segment = MemorySegment.allocateNative(layout)) {
+        try (MemorySegment segment = MemorySegments.allocateNative(layout)) {
             longHandle.set(segment.baseAddress(), longValue);
             long expectedLongValue = Byte.toUnsignedLong(byteValue);
             assertEquals((long) longHandle.get(segment.baseAddress()), expectedLongValue);
             assertEquals((byte) byteHandle.get(segment.baseAddress()), byteValue);
         }
@@ -100,11 +102,11 @@
 
         MemoryLayout layout = MemoryLayouts.BITS_16_BE;
         VarHandle shortHandle = layout.varHandle(short.class);
         VarHandle intHandle = MemoryHandles.asUnsigned(shortHandle, int.class);
 
-        try (MemorySegment segment = MemorySegment.allocateNative(layout)) {
+        try (MemorySegment segment = MemorySegments.allocateNative(layout)) {
             intHandle.set(segment.baseAddress(), intValue);
             int expectedIntValue = Short.toUnsignedInt(shortValue);
             assertEquals((int) intHandle.get(segment.baseAddress()), expectedIntValue);
             assertEquals((short) shortHandle.get(segment.baseAddress()), shortValue);
         }
@@ -122,11 +124,11 @@
 
         MemoryLayout layout = MemoryLayouts.BITS_16_BE;
         VarHandle shortHandle = layout.varHandle(short.class);
         VarHandle longHandle = MemoryHandles.asUnsigned(shortHandle, long.class);
 
-        try (MemorySegment segment = MemorySegment.allocateNative(layout)) {
+        try (MemorySegment segment = MemorySegments.allocateNative(layout)) {
             longHandle.set(segment.baseAddress(), longValue);
             long expectedLongValue = Short.toUnsignedLong(shortValue);
             assertEquals((long) longHandle.get(segment.baseAddress()), expectedLongValue);
             assertEquals((short) shortHandle.get(segment.baseAddress()), shortValue);
         }
@@ -148,11 +150,11 @@
 
         MemoryLayout layout = MemoryLayouts.BITS_32_BE;
         VarHandle intHandle = layout.varHandle(int.class);
         VarHandle longHandle = MemoryHandles.asUnsigned(intHandle, long.class);
 
-        try (MemorySegment segment = MemorySegment.allocateNative(layout)) {
+        try (MemorySegment segment = MemorySegments.allocateNative(layout)) {
             longHandle.set(segment.baseAddress(), longValue);
             long expectedLongValue = Integer.toUnsignedLong(intValue);
             assertEquals((long) longHandle.get(segment.baseAddress()), expectedLongValue);
             assertEquals((int) intHandle.get(segment.baseAddress()), intValue);
         }
@@ -162,22 +164,22 @@
     public void testCoordinatesSequenceLayout() {
         MemoryLayout layout = MemoryLayout.ofSequence(2, MemoryLayouts.BITS_8_BE);
         VarHandle byteHandle = layout.varHandle(byte.class, PathElement.sequenceElement());
         VarHandle intHandle = MemoryHandles.asUnsigned(byteHandle, int.class);
 
-        try (MemorySegment segment = MemorySegment.allocateNative(layout)) {
+        try (MemorySegment segment = MemorySegments.allocateNative(layout)) {
             intHandle.set(segment.baseAddress(), 0L, (int) -1);
             assertEquals((int) intHandle.get(segment.baseAddress(), 0L), 255);
             intHandle.set(segment.baseAddress(), 1L, (int) 200);
             assertEquals((int) intHandle.get(segment.baseAddress(), 1L), 200);
         }
     }
 
     @Test
     public void testCoordinatesStride() {
         byte[] arr = { 0, 0, (byte) 129, 0 };
-        MemorySegment segment = MemorySegment.ofArray(arr);
+        MemorySegment segment = MemorySegments.ofArray(arr);
         MemoryAddress addr = segment.baseAddress();
 
         {
             VarHandle byteHandle = MemoryHandles.varHandle(byte.class, ByteOrder.nativeOrder());
             VarHandle intHandle = MemoryHandles.asUnsigned(byteHandle, int.class);
