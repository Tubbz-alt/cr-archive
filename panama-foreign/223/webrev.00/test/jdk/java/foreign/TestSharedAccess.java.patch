diff a/test/jdk/java/foreign/TestSharedAccess.java b/test/jdk/java/foreign/TestSharedAccess.java
--- a/test/jdk/java/foreign/TestSharedAccess.java
+++ b/test/jdk/java/foreign/TestSharedAccess.java
@@ -29,10 +29,11 @@
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.MemorySegments;
 import jdk.incubator.foreign.SequenceLayout;
 import org.testng.annotations.Test;
 
 import java.lang.invoke.VarHandle;
 import java.nio.ByteBuffer;
@@ -55,11 +56,11 @@
     static final VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
 
     @Test
     public void testConfined() throws Throwable {
         Thread owner = Thread.currentThread();
-        MemorySegment s = MemorySegment.allocateNative(4);
+        MemorySegment s = MemorySegments.allocateNative(4);
         AtomicReference<MemorySegment> confined = new AtomicReference<>(s);
         setInt(s.baseAddress(), 42);
         assertEquals(getInt(s.baseAddress()), 42);
         List<Thread> threads = new ArrayList<>();
         for (int i = 0 ; i < 1000 ; i++) {
@@ -81,17 +82,17 @@
     }
 
     @Test
     public void testShared() throws Throwable {
         SequenceLayout layout = MemoryLayout.ofSequence(1024, MemoryLayouts.JAVA_INT);
-        try (MemorySegment s = MemorySegment.allocateNative(layout)) {
+        try (MemorySegment s = MemorySegments.allocateNative(layout)) {
             for (int i = 0 ; i < layout.elementCount().getAsLong() ; i++) {
                 setInt(s.baseAddress().addOffset(i * 4), 42);
             }
             List<Thread> threads = new ArrayList<>();
             List<Spliterator<MemorySegment>> spliterators = new ArrayList<>();
-            spliterators.add(MemorySegment.spliterator(s, layout));
+            spliterators.add(MemorySegments.spliterator(s, layout));
             while (true) {
                 boolean progress = false;
                 List<Spliterator<MemorySegment>> newSpliterators = new ArrayList<>();
                 for (Spliterator<MemorySegment> spliterator : spliterators) {
                     Spliterator<MemorySegment> sub = spliterator.trySplit();
@@ -125,15 +126,15 @@
         }
     }
 
     @Test
     public void testSharedUnsafe() throws Throwable {
-        try (MemorySegment s = MemorySegment.allocateNative(4)) {
+        try (MemorySegment s = MemorySegments.allocateNative(4)) {
             setInt(s.baseAddress(), 42);
             assertEquals(getInt(s.baseAddress()), 42);
             List<Thread> threads = new ArrayList<>();
-            MemorySegment sharedSegment = MemorySegment.ofNativeRestricted(
+            MemorySegment sharedSegment = MemorySegments.ofNativeRestricted(
                     s.baseAddress(), s.byteSize(), null, null, null);
             for (int i = 0 ; i < 1000 ; i++) {
                 threads.add(new Thread(() -> {
                     assertEquals(getInt(sharedSegment.baseAddress()), 42);
                 }));
@@ -155,11 +156,11 @@
     }
 
     @Test(expectedExceptions=IllegalStateException.class)
     public void testBadCloseWithPendingAcquireBuffer() {
         withAcquired(segment -> {
-            segment = MemorySegment.ofByteBuffer(segment.asByteBuffer()); // original segment is lost
+            segment = MemorySegments.ofByteBuffer(MemorySegments.asByteBuffer(segment)); // original segment is lost
             segment.close(); // this should still fail
         });
     }
 
     @Test(expectedExceptions=IllegalStateException.class)
@@ -168,29 +169,29 @@
     }
 
     @Test(expectedExceptions=IllegalStateException.class)
     public void testBadHandoffWithPendingAcquireBuffer() {
         withAcquired(segment -> {
-            segment = MemorySegment.ofByteBuffer(segment.asByteBuffer()); // original segment is lost
+            segment = MemorySegments.ofByteBuffer(MemorySegments.asByteBuffer(segment)); // original segment is lost
             segment.withOwnerThread(new Thread()); // this should still fail
         });
     }
 
     @Test(expectedExceptions=IllegalArgumentException.class)
     public void testBadHandoffSameThread() {
-        MemorySegment.ofArray(new int[4]).withOwnerThread(Thread.currentThread());
+        MemorySegments.ofArray(new int[4]).withOwnerThread(Thread.currentThread());
     }
 
     @Test(expectedExceptions=NullPointerException.class)
     public void testBadHandoffNullThread() {
-        MemorySegment.ofArray(new int[4]).withOwnerThread(null);
+        MemorySegments.ofArray(new int[4]).withOwnerThread(null);
     }
 
     private void withAcquired(Consumer<MemorySegment> acquiredAction) {
         CountDownLatch holder = new CountDownLatch(1);
-        MemorySegment segment = MemorySegment.allocateNative(16);
-        Spliterator<MemorySegment> spliterator = MemorySegment.spliterator(segment,
+        MemorySegment segment = MemorySegments.allocateNative(16);
+        Spliterator<MemorySegment> spliterator = MemorySegments.spliterator(segment,
                 MemoryLayout.ofSequence(16, MemoryLayouts.JAVA_BYTE));
         CountDownLatch acquired = new CountDownLatch(1);
         Runnable r = () -> spliterator.tryAdvance(s -> {
             try {
                 acquired.countDown();
@@ -213,16 +214,16 @@
     @Test
     public void testOutsideConfinementThread() throws Throwable {
         CountDownLatch a = new CountDownLatch(1);
         CountDownLatch b = new CountDownLatch(1);
         CompletableFuture<?> r;
-        try (MemorySegment s1 = MemorySegment.allocateNative(MemoryLayout.ofSequence(2, MemoryLayouts.JAVA_INT))) {
+        try (MemorySegment s1 = MemorySegments.allocateNative(MemoryLayout.ofSequence(2, MemoryLayouts.JAVA_INT))) {
             r = CompletableFuture.runAsync(() -> {
                 try {
-                    ByteBuffer bb = s1.asByteBuffer();
+                    ByteBuffer bb = MemorySegments.asByteBuffer(s1);
 
-                    MemorySegment s2 = MemorySegment.ofByteBuffer(bb);
+                    MemorySegment s2 = MemorySegments.ofByteBuffer(bb);
                     a.countDown();
 
                     try {
                         b.await();
                     } catch (InterruptedException e) {
