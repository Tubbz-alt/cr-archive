diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantHeap.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantHeap.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantHeap.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantHeap.java
@@ -22,11 +22,13 @@
  */
 package org.openjdk.bench.jdk.incubator.foreign;
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.MemorySegments;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;
 import org.openjdk.jmh.annotations.Fork;
 import org.openjdk.jmh.annotations.Measurement;
 import org.openjdk.jmh.annotations.Mode;
@@ -70,11 +72,11 @@
     public void setup() {
         base = new byte[ALLOC_SIZE];
         for (int i = 0; i < ELEM_SIZE; i++) {
             unsafe.putInt(base, UNSAFE_BYTE_BASE + (i * CARRIER_SIZE) , i);
         }
-        segment = MemorySegment.ofArray(base);
+        segment = MemorySegments.ofArray(base);
         byteBuffer = ByteBuffer.wrap(base).order(ByteOrder.nativeOrder());
     }
 
     @TearDown
     public void tearDown() {
@@ -116,10 +118,19 @@
             sum += (int) VH_int.get(base, (long) i);
         }
         return sum;
     }
 
+    @Benchmark
+    public int segment_loop_static() {
+        int res = 0;
+        for (int i = 0; i < ELEM_SIZE; i ++) {
+            res += MemorySegments.getInt(segment.baseAddress(), i * CARRIER_SIZE);
+        }
+        return res;
+    }
+
     @Benchmark
     public int segment_loop_slice() {
         int sum = 0;
         MemoryAddress base = segment.asSlice(0, segment.byteSize()).baseAddress();
         for (int i = 0; i < ELEM_SIZE; i++) {
