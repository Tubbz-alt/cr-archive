diff a/doc/panama_jextract.md b/doc/panama_jextract.md
--- a/doc/panama_jextract.md
+++ b/doc/panama_jextract.md
@@ -88,12 +88,10 @@
 
 jextract -l python2.7 \
   -I /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include \
   -I /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/python2.7/ \
   -t org.python \
-  --filter pythonrun.h \
-  --filter python.h \
    /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/python2.7/Python.h
 
 ```
 
 ### Java program that uses extracted Python interface
@@ -131,17 +129,16 @@
 
 ```
 
 ## Using readline library from Java code (Mac OS)
 
-### jextract a jar file for readline.h
+### jextract readline.h
 
 ```sh
 
 jextract -l readline -t org.unix \
   -I /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include \
-  --filter readline.h \
    /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/readline/readline.h
 
 ```
 
 ### Java code that uses readline
@@ -178,19 +175,17 @@
 
 ```
 
 ## Using libcurl from Java (Mac OS)
 
-### jextract a jar for curl.h
+### jextract curl.h
 
 ```sh
 
 jextract -t org.unix -lcurl \
   -I /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/ \
   -I /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/curl/ \
-  --filter easy.h \
-  --filter curl.h \
   /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/curl/curl.h
 
 ```
 
 ### Java code that uses libcurl
@@ -260,11 +255,10 @@
 
 ```sh
 
 jextract -C "-D FORCE_OPENBLAS_COMPLEX_STRUCT" \
   -I /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include \
-  --filter cblas.h \
   -l openblas -t blas /usr/local/opt/openblas/include/cblas.h
 
 ```
 
 ### Java sample code that uses cblas library
@@ -346,5 +340,152 @@
 java -Djdk.incubator.foreign.Foreign=permit --add-modules jdk.incubator.foreign \
     -Djava.library.path=/usr/local/opt/openblas/lib \
     TestBlas.java
 
 ```
+
+## Using LAPACK library (Mac OS)
+
+On Mac OS, lapack is installed under /usr/local/opt/lapack directory.
+
+### jextracting lapacke.h
+
+```sh
+
+jextract \
+   -I /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include \
+   -l lapacke -t lapack \
+   --filter lapacke.h \
+   /usr/local/opt/lapack/include/lapacke.h
+
+```
+
+### Java sample code that uses LAPACK library
+
+```java
+
+import jdk.incubator.foreign.NativeAllocationScope;
+import lapack.*;
+import static lapack.lapacke_h.*;
+
+public class TestLapack {
+    public static void main(String[] args) {
+
+        /* Locals */
+        try (var scope = NativeAllocationScope.unboundedScope()) {
+            var A = Cdouble.allocateArray(new double[]{
+                    1, 2, 3, 4, 5, 1, 3, 5, 2, 4, 1, 4, 2, 5, 3
+            }, scope);
+            var b = Cdouble.allocateArray(new double[]{
+                    -10, 12, 14, 16, 18, -3, 14, 12, 16, 16
+            }, scope);
+            int info, m, n, lda, ldb, nrhs;
+
+            /* Initialization */
+            m = 5;
+            n = 3;
+            nrhs = 2;
+            lda = 5;
+            ldb = 5;
+
+            /* Print Entry Matrix */
+            print_matrix_colmajor("Entry Matrix A", m, n, A, lda );
+            /* Print Right Rand Side */
+            print_matrix_colmajor("Right Hand Side b", n, nrhs, b, ldb );
+            System.out.println();
+
+            /* Executable statements */
+            //            printf( "LAPACKE_dgels (col-major, high-level) Example Program Results\n" );
+            /* Solve least squares problem*/
+            info = LAPACKE_dgels(LAPACK_COL_MAJOR(), (byte)'N', m, n, nrhs, A, lda, b, ldb);
+
+            /* Print Solution */
+            print_matrix_colmajor("Solution", n, nrhs, b, ldb );
+            System.out.println();
+            System.exit(info);
+        }
+    }
+
+    static void print_matrix_colmajor(String msg, int m, int n, MemoryAddress mat, int ldm) {
+        int i, j;
+        System.out.printf("\n %s\n", msg);
+
+        for( i = 0; i < m; i++ ) {
+            for( j = 0; j < n; j++ ) System.out.printf(" %6.2f", Cdouble.get(mat, i+j*ldm));
+            System.out.printf( "\n" );
+        }
+    }
+}
+
+```
+
+### Compiling and running the above LAPACK sample
+
+```sh
+
+java -Djdk.incubator.foreign.Foreign=permit \
+    --add-modules jdk.incubator.foreign \
+    -Djava.library.path=/usr/local/opt/lapack/lib \
+    TestLapack.java
+
+```
+
+## Using libproc library to list processes from Java (Mac OS)
+
+### jextract libproc.h
+
+```sh
+
+jextract -t org.unix \
+  -I /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include \
+  --filter libproc.h \
+  /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/libproc.h
+
+```
+
+### Java program that uses libproc to list processes
+
+```java
+
+import jdk.incubator.foreign.NativeAllocationScope;
+import org.unix.*;
+import static jdk.incubator.foreign.MemoryAddress.NULL;
+import static org.unix.libproc_h.*;
+
+public class LibprocMain {
+    private static final int NAME_BUF_MAX = 256;
+
+    public static void main(String[] args) {
+        try (var scope = NativeAllocationScope.unboundedScope()) {
+            // get the number of processes
+            int numPids = proc_listallpids(NULL, 0);
+            // allocate an array
+            var pids = Cint.allocateArray(numPids, scope);
+            // list all the pids into the native array
+            proc_listallpids(pids, numPids);
+            // convert native array to java array
+            int[] jpids = Cint.toJavaArray(pids.segment());
+            // buffer for process name
+            var nameBuf = Cchar.allocateArray(NAME_BUF_MAX,scope);
+            for (int i = 0; i < jpids.length; i++) {
+                int pid = jpids[i];
+                // get the process name
+                proc_name(pid, nameBuf, NAME_BUF_MAX);
+                String procName = Cstring.toJavaString(nameBuf);
+                // print pid and process name
+                System.out.printf("%d %s\n", pid, procName);
+            }
+        }
+    }
+}
+
+```
+
+### Compiling and running the libproc sample
+
+```sh
+
+java -Djdk.incubator.foreign.Foreign=permit \
+    --add-modules jdk.incubator.foreign \
+    -Djava.library.path=/usr/lib LibprocMain.java
+
+```
