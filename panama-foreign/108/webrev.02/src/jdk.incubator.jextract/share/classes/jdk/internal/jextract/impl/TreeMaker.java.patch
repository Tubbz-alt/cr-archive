diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
@@ -210,11 +210,18 @@
     public Declaration.Scoped createScoped(Cursor c, Declaration.Scoped.Kind scopeKind, ScopedFactoryLayout factoryLayout, ScopedFactoryNoLayout factoryNoLayout) {
         List<Declaration> decls = filterNestedDeclarations(c.children()
                 .map(this::createTree).collect(Collectors.toList()));
         if (c.isDefinition()) {
             //just a declaration AND definition, we have a layout
-            MemoryLayout layout = LayoutUtils.getLayout(c.type());
+            MemoryLayout layout = null;
+            try {
+                layout = LayoutUtils.getLayout(c.type());
+            } catch (TypeMaker.TypeException ex) {
+                System.err.println(ex);
+                System.err.println("WARNING: generating empty struct: " + c.spelling());
+                return factoryNoLayout.make(toPos(c), c.spelling(), decls.toArray(new Declaration[0]));
+            }
             List<Declaration> adaptedDecls = layout instanceof GroupLayout ?
                     collectBitfields(layout, decls) :
                     decls;
             return factoryLayout.make(toPos(c), c.spelling(), layout, adaptedDecls.toArray(new Declaration[0]));
         } else {
@@ -258,11 +265,19 @@
         checkCursorAny(c, CursorKind.VarDecl, CursorKind.FieldDecl, CursorKind.ParmDecl);
         if (c.isBitField()) {
             return Declaration.bitfield(toPos(c), c.spelling(), toType(c),
                     MemoryLayout.ofValueBits(c.getBitFieldWidth(), ByteOrder.nativeOrder()));
         } else {
-            return varFactory.make(toPos(c), c.spelling(), toType(c));
+            Type type = null;
+            try {
+                type = toType(c);
+            } catch (TypeMaker.TypeException ex) {
+                System.err.println(ex);
+                System.err.println("WARNING: ignoring variable: " + c.spelling());
+                return null;
+            }
+            return varFactory.make(toPos(c), c.spelling(), type);
         }
     }
 
     private List<Declaration> collectBitfields(MemoryLayout layout, List<Declaration> declarations) {
         List<Declaration> newDecls = new ArrayList<>();
