diff a/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java b/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
--- a/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
+++ b/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
@@ -43,18 +43,18 @@
 public class LibTest8241925Test {
     @Test
     public void test() {
         try (var scope = NativeScope.unboundedScope()) {
             var addr = scope.allocate(C_INT, 12);
-            assertEquals(MemoryAccess.getInt(addr, 0), 12);
+            assertEquals(MemoryAccess.getInt(addr), 12);
             square(addr);
-            assertEquals(MemoryAccess.getInt(addr, 0), 144);
+            assertEquals(MemoryAccess.getInt(addr), 144);
 
             addr = scope.allocate(C_DOUBLE, 12.0);
-            assertEquals(MemoryAccess.getDouble(addr, 0), 12.0, 0.1);
+            assertEquals(MemoryAccess.getDouble(addr), 12.0, 0.1);
             square_fp(addr);
-            assertEquals(MemoryAccess.getDouble(addr, 0), 144.0, 0.1);
+            assertEquals(MemoryAccess.getDouble(addr), 144.0, 0.1);
 
             int[] intArray = { 34, 67, 78, 8 };
             addr = scope.allocateArray(C_INT, intArray);
             int sum = sum(addr, intArray.length);
             assertEquals(sum, IntStream.of(intArray).sum());
diff a/test/jdk/tools/jextract/test8244412/LibTest8244412Test.java b/test/jdk/tools/jextract/test8244412/LibTest8244412Test.java
--- a/test/jdk/tools/jextract/test8244412/LibTest8244412Test.java
+++ b/test/jdk/tools/jextract/test8244412/LibTest8244412Test.java
@@ -43,11 +43,11 @@
 public class LibTest8244412Test {
     @Test
     public void test() {
         try (var scope = NativeScope.unboundedScope()) {
             var addr = scope.allocate(mysize_t, 0L);
-            assertEquals(MemoryAccess.getLong(addr, 0), 0L);
-            MemoryAccess.setLong(addr, 0, 13455566L);
-            assertEquals(MemoryAccess.getLong(addr, 0), 13455566L);
+            assertEquals(MemoryAccess.getLong(addr), 0L);
+            MemoryAccess.setLong(addr, 13455566L);
+            assertEquals(MemoryAccess.getLong(addr), 13455566L);
         }
     }
 }
diff a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
--- a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
+++ b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
@@ -40,36 +40,32 @@
  * @summary jextract should generate Cpointer utilities class
  * @run driver JtregJextract -l Test8246341 -t test.jextract.test8246341 -- test8246341.h
  * @run testng/othervm -Dforeign.restricted=permit LibTest8246341Test
  */
 public class LibTest8246341Test {
-    private static MemoryAddress getPointerAt(MemoryAddress addr, int element) {
-        return MemoryAccess.getAddress(addr, element*C_POINTER.byteSize());
-    }
-
     @Test
     public void testPointerArray() {
         boolean[] callbackCalled = new boolean[1];
         try (var callback = func$callback.allocate((argc, argv) -> {
             callbackCalled[0] = true;
             var addr = RuntimeHelper.asArrayRestricted(argv, C_POINTER, argc);
             assertEquals(argc, 4);
-            assertEquals(toJavaStringRestricted(getPointerAt(addr, 0)), "java");
-            assertEquals(toJavaStringRestricted(getPointerAt(addr, 1)), "python");
-            assertEquals(toJavaStringRestricted(getPointerAt(addr, 2)), "javascript");
-            assertEquals(toJavaStringRestricted(getPointerAt(addr, 3)), "c++");
+            assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 0)), "java");
+            assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 1)), "python");
+            assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 2)), "javascript");
+            assertEquals(toJavaStringRestricted(MemoryAccess.getAddressAtIndex(addr, 3)), "c++");
         })) {
             func(callback.baseAddress());
         }
         assertTrue(callbackCalled[0]);
     }
 
     @Test
     public void testPointerAllocate() {
         try (var scope = NativeScope.boundedScope(C_POINTER.byteSize())) {
             var addr = scope.allocate(C_POINTER);
-            MemoryAccess.setAddress(addr, 0, MemoryAddress.NULL);
+            MemoryAccess.setAddress(addr, MemoryAddress.NULL);
             fillin(addr);
-            assertEquals(toJavaStringRestricted(getPointerAt(addr, 0)), "hello world");
+            assertEquals(toJavaStringRestricted(MemoryAccess.getAddress(addr)), "hello world");
         }
     }
 }
