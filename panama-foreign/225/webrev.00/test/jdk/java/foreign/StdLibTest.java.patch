diff a/test/jdk/java/foreign/StdLibTest.java b/test/jdk/java/foreign/StdLibTest.java
--- a/test/jdk/java/foreign/StdLibTest.java
+++ b/test/jdk/java/foreign/StdLibTest.java
@@ -32,12 +32,10 @@
  */
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
-import java.lang.invoke.VarHandle;
-import java.nio.ByteOrder;
 import java.time.Instant;
 import java.time.LocalDateTime;
 import java.time.ZoneOffset;
 import java.time.ZonedDateTime;
 import java.util.ArrayList;
@@ -46,44 +44,34 @@
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
 import java.util.function.Consumer;
 import java.util.stream.Collectors;
-import java.util.stream.IntStream;
-import java.util.stream.LongStream;
 import java.util.stream.Stream;
 
 import jdk.incubator.foreign.CSupport;
 import jdk.incubator.foreign.ForeignLinker;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.NativeScope;
 import jdk.incubator.foreign.SequenceLayout;
+
+import static jdk.incubator.foreign.MemoryAccess.*;
+
 import org.testng.annotations.*;
 
 import static jdk.incubator.foreign.CSupport.*;
 import static org.testng.Assert.*;
 
 @Test
 public class StdLibTest extends NativeTestHelper {
 
     final static ForeignLinker abi = CSupport.getSystemLinker();
 
-    final static VarHandle byteHandle = MemoryHandles.varHandle(byte.class, ByteOrder.nativeOrder());
-    final static VarHandle intHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());
-    final static VarHandle longHandle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());
-    final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);
-    final static VarHandle intArrHandle = arrayHandle(C_INT, int.class);
-
-    static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
-        return MemoryLayout.ofSequence(1, elemLayout)
-                .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
-    }
-
     private StdLibHelper stdLibHelper = new StdLibHelper();
 
     @Test(dataProvider = "stringPairs")
     void test_strcat(String s1, String s2) throws Throwable {
         assertEquals(stdLibHelper.strcat(s1, s2), s1 + s2);
@@ -243,13 +231,13 @@
         String strcat(String s1, String s2) throws Throwable {
             try (MemorySegment buf = MemorySegment.allocateNative(s1.length() + s2.length() + 1) ;
                  MemorySegment other = toCString(s2)) {
                 char[] chars = s1.toCharArray();
                 for (long i = 0 ; i < chars.length ; i++) {
-                    byteArrHandle.set(buf.baseAddress(), i, (byte)chars[(int)i]);
+                    setByte(buf.baseAddress(), i, (byte)chars[(int)i]);
                 }
-                byteArrHandle.set(buf.baseAddress(), (long)chars.length, (byte)'\0');
+                setByte(buf.baseAddress(), chars.length, (byte)'\0');
                 return toJavaStringRestricted(((MemoryAddress)strcat.invokeExact(buf.baseAddress(), other.baseAddress())));
             }
         }
 
         int strcmp(String s1, String s2) throws Throwable {
@@ -271,11 +259,11 @@
             }
         }
 
         Tm gmtime(long arg) throws Throwable {
             try (MemorySegment time = MemorySegment.allocateNative(8)) {
-                longHandle.set(time.baseAddress(), arg);
+                setLong(time.baseAddress(), 0, arg);
                 return new Tm((MemoryAddress)gmtime.invokeExact(time.baseAddress()));
             }
         }
 
         static class Tm {
@@ -289,62 +277,59 @@
                 this.base = MemorySegment.ofNativeRestricted(base, SIZE, Thread.currentThread(),
                         null, null).baseAddress();
             }
 
             int sec() {
-                return (int)intHandle.get(base);
+                return getInt(base, 0);
             }
             int min() {
-                return (int)intHandle.get(base.addOffset(4));
+                return getInt(base, 4);
             }
             int hour() {
-                return (int)intHandle.get(base.addOffset(8));
+                return getInt(base, 8);
             }
             int mday() {
-                return (int)intHandle.get(base.addOffset(12));
+                return getInt(base, 12);
             }
             int mon() {
-                return (int)intHandle.get(base.addOffset(16));
+                return getInt(base, 16);
             }
             int year() {
-                return (int)intHandle.get(base.addOffset(20));
+                return getInt(base, 20);
             }
             int wday() {
-                return (int)intHandle.get(base.addOffset(24));
+                return getInt(base, 24);
             }
             int yday() {
-                return (int)intHandle.get(base.addOffset(28));
+                return getInt(base, 28);
             }
             boolean isdst() {
-                byte b = (byte)byteHandle.get(base.addOffset(32));
+                byte b = getByte(base, 32);
                 return b != 0;
             }
         }
 
         int[] qsort(int[] arr) throws Throwable {
             //init native array
-            SequenceLayout seq = MemoryLayout.ofSequence(arr.length, C_INT);
-
-            try (MemorySegment nativeArr = MemorySegment.allocateNative(seq)) {
+            try (NativeScope scope = NativeScope.unboundedScope()) {
 
-                IntStream.range(0, arr.length)
-                        .forEach(i -> intArrHandle.set(nativeArr.baseAddress(), i, arr[i]));
+                MemorySegment nativeArr = scope.allocateArray(C_INT, arr).segment();
 
                 //call qsort
-                try (MemorySegment qsortUpcallStub = abi.upcallStub(qsortCompar.bindTo(nativeArr), qsortComparFunction)) {
-                    qsort.invokeExact(nativeArr.baseAddress(), seq.elementCount().getAsLong(), C_INT.byteSize(), qsortUpcallStub.baseAddress());
-                }
+                MemorySegment qsortUpcallStub = abi.upcallStub(qsortCompar.bindTo(nativeArr), qsortComparFunction);
+                scope.register(qsortUpcallStub);
+
+                qsort.invokeExact(nativeArr.baseAddress(), (long)arr.length, C_INT.byteSize(), qsortUpcallStub.baseAddress());
 
                 //convert back to Java array
-                return LongStream.range(0, arr.length)
-                        .mapToInt(i -> (int)intArrHandle.get(nativeArr.baseAddress(), i))
-                        .toArray();
+                return nativeArr.toIntArray();
             }
         }
 
         static int qsortCompare(MemorySegment base, MemoryAddress addr1, MemoryAddress addr2) {
-            return (int)intHandle.get(addr1.rebase(base)) - (int)intHandle.get(addr2.rebase(base));
+            return getInt(base.baseAddress(), addr1.rebase(base).segmentOffset()) -
+                   getInt(base.baseAddress(), addr2.rebase(base).segmentOffset());
         }
 
         int rand() throws Throwable {
             return (int)rand.invokeExact();
         }
