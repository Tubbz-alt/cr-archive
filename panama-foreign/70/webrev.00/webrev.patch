diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/CallArranger.java
@@ -201,13 +201,15 @@
         ArgumentClassImpl baseArgClass = AArch64ABI.argumentClassFor(SystemABI.Type.fromLayout(baseType));
         if (baseArgClass != ArgumentClassImpl.VECTOR)
            return false;
 
         for (MemoryLayout elem : groupLayout.memberLayouts()) {
+            if (!(elem instanceof ValueLayout))
+                return false;
+
             ArgumentClassImpl argClass = AArch64ABI.argumentClassFor(SystemABI.Type.fromLayout(elem));
-            if (!(elem instanceof ValueLayout) ||
-                    elem.bitSize() != baseType.bitSize() ||
+            if (elem.bitSize() != baseType.bitSize() ||
                     elem.bitAlignment() != baseType.bitAlignment() ||
                     baseArgClass != argClass) {
                 return false;
             }
         }
diff a/test/jdk/java/foreign/callarranger/TestAarch64CallArranger.java b/test/jdk/java/foreign/callarranger/TestAarch64CallArranger.java
--- a/test/jdk/java/foreign/callarranger/TestAarch64CallArranger.java
+++ b/test/jdk/java/foreign/callarranger/TestAarch64CallArranger.java
@@ -168,10 +168,19 @@
                     // s.a[0] & s.a[1]
                     dereference(0, long.class), move(r0, long.class),
                     // s.b[0] & s.b[1]
                     dereference(8, long.class), move(r1, long.class),
             }},
+            // struct s { int32_t a; /* padding */ double b };
+            { MemoryLayout.ofStruct(C_INT, MemoryLayout.ofPaddingBits(32), C_DOUBLE),
+              new Binding[] {
+                dup(),
+                // s.a
+                dereference(0, long.class), move(r0, long.class),
+                // s.b
+                dereference(8, long.class), move(r1, long.class),
+            }},
         };
     }
 
     @Test
     public void testMultipleStructs() {
