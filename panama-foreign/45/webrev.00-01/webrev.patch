diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -183,10 +183,17 @@
      * @throws UnsupportedOperationException when {@code mask} is an access mask which is less strict than the one supported by this
      * segment.
      */
     MemorySegment withAccessModes(int accessModes);
 
+    /**
+     * Does this segment support a given set of access modes?
+     * @param accessModes an ORed mask of zero or more access modes.
+     * @return true, if the access modes in {@accessModes} are stricter than the ones supported by this segment.
+     */
+    boolean hasAccessModes(int accessModes);
+
     /**
      * Returns the <a href="#access-modes">access modes</a> associated with this segment; the result is represented as ORed values from
      * {@link #READ}, {@link #WRITE}, {@link #CLOSE} and {@link #ACQUIRE}.
      * @return the access modes associated with this segment.
      */
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
@@ -153,10 +153,15 @@
             throw new UnsupportedOperationException("Cannot acquire more access modes");
         }
         return new MemorySegmentImpl(min, base, length, accessModes, owner, scope);
     }
 
+    @Override
+    public boolean hasAccessModes(int accessModes) {
+        return (this.mask & accessModes) == accessModes;
+    }
+
     @Override
     public int accessModes() {
         return mask;
     }
 
diff a/test/jdk/java/foreign/TestMemoryAccess.java b/test/jdk/java/foreign/TestMemoryAccess.java
--- a/test/jdk/java/foreign/TestMemoryAccess.java
+++ b/test/jdk/java/foreign/TestMemoryAccess.java
@@ -82,11 +82,11 @@
     }
 
     private void testAccessInternal(Function<MemorySegment, MemorySegment> viewFactory, MemoryLayout layout, VarHandle handle, Checker checker) {
         MemoryAddress outer_address;
         try (MemorySegment segment = viewFactory.apply(MemorySegment.allocateNative(layout))) {
-            boolean isRO = (segment.accessModes() & MemorySegment.WRITE) == 0;
+            boolean isRO = !segment.hasAccessModes(MemorySegment.WRITE);
             MemoryAddress addr = segment.baseAddress();
             try {
                 checker.check(handle, addr);
                 if (isRO) {
                     throw new AssertionError(); //not ok, memory should be immutable
@@ -114,11 +114,11 @@
     }
 
     private void testArrayAccessInternal(Function<MemorySegment, MemorySegment> viewFactory, SequenceLayout seq, VarHandle handle, ArrayChecker checker) {
         MemoryAddress outer_address;
         try (MemorySegment segment = viewFactory.apply(MemorySegment.allocateNative(seq))) {
-            boolean isRO = (segment.accessModes() & MemorySegment.WRITE) == 0;
+            boolean isRO = !segment.hasAccessModes(MemorySegment.WRITE);
             MemoryAddress addr = segment.baseAddress();
             try {
                 for (int i = 0; i < seq.elementCount().getAsLong(); i++) {
                     checker.check(handle, addr, i);
                 }
@@ -183,11 +183,11 @@
     }
 
     private void testMatrixAccessInternal(Function<MemorySegment, MemorySegment> viewFactory, SequenceLayout seq, VarHandle handle, MatrixChecker checker) {
         MemoryAddress outer_address;
         try (MemorySegment segment = viewFactory.apply(MemorySegment.allocateNative(seq))) {
-            boolean isRO = (segment.accessModes() & MemorySegment.WRITE) == 0;
+            boolean isRO = !segment.hasAccessModes(MemorySegment.WRITE);
             MemoryAddress addr = segment.baseAddress();
             try {
                 for (int i = 0; i < seq.elementCount().getAsLong(); i++) {
                     for (int j = 0; j < ((SequenceLayout) seq.elementLayout()).elementCount().getAsLong(); j++) {
                         checker.check(handle, addr, i, j);
diff a/test/jdk/java/foreign/TestSegments.java b/test/jdk/java/foreign/TestSegments.java
--- a/test/jdk/java/foreign/TestSegments.java
+++ b/test/jdk/java/foreign/TestSegments.java
@@ -125,13 +125,14 @@
     @Test(dataProvider = "accessModes")
     public void testAccessModes(int accessModes) {
         int[] arr = new int[1];
         for (AccessActions action : AccessActions.values()) {
             MemorySegment segment = MemorySegment.ofArray(arr);
-            boolean shouldFail = (accessModes & action.accessMode) == 0;
+            MemorySegment restrictedSegment = segment.withAccessModes(accessModes);
+            boolean shouldFail = !restrictedSegment.hasAccessModes(action.accessMode);
             try {
-                action.run(segment.withAccessModes(accessModes));
+                action.run(restrictedSegment);
                 assertFalse(shouldFail);
             } catch (UnsupportedOperationException ex) {
                 assertTrue(shouldFail);
             }
         }
@@ -239,11 +240,11 @@
     }
 
     @DataProvider(name = "accessModes")
     public Object[][] accessModes() {
         int nActions = AccessActions.values().length;
-        Object[][] results = new Object[nActions * nActions][];
+        Object[][] results = new Object[1 << nActions][];
         for (int accessModes = 0 ; accessModes < results.length ; accessModes++) {
             results[accessModes] = new Object[] { accessModes };
         }
         return results;
     }
