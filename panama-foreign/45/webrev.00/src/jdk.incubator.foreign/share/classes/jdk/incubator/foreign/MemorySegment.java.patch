diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -100,21 +100,38 @@
  * be closed until all the acquired memory segments derived from S have been closed. Furthermore, closing an acquired
  * memory segment does <em>not</em> trigger any deallocation action. It is therefore important that clients remember to
  * explicitly close the original segment from which the acquired memory segments have been obtained in order to truly
  * ensure that off-heap resources associated with the memory segment are released.
  *
+ * <h2><a id = "access-modes">Access modes</a></h2>
+ *
+ * Memory segments supports zero or more <em>access modes</em>. Supported access modes are {@link #READ},
+ * {@link #WRITE}, {@link #CLOSE} and {@link #ACQUIRE}. The set of access modes supported by a segment alters the
+ * set of operations that are supported by that segment. For instance, attempting to call {@link #close()} on
+ * a segment which does not support the {@link #CLOSE} access mode will result in an exception.
+ * <p>
+ * The set of supported access modes can only be made stricter (by supporting <em>less</em> access modes). This means
+ * that restricting the set of access modes supported by a segment before sharing it with other clients
+ * is generally a good practice if the creator of the segment wants to retain some control over how the segment
+ * is going to be accessed.
+ *
  * <h2>Memory segment views</h2>
  *
- * Memory segments support <em>views</em>. It is possible to create an <em>immutable</em> view of a memory segment
- * (see {@link MemorySegment#asReadOnly()}) which does not support write operations. It is also possible to create views
- * whose spatial bounds are stricter than the ones of the original segment (see {@link MemorySegment#asSlice(long, long)}).
+ * Memory segments support <em>views</em>. For instance, it is possible to alter the set of supported access modes,
+ * by creating an <em>immutable</em> view of a memory segment, as follows:
+ * <blockquote><pre>{@code
+MemorySegment segment = ...
+MemorySegment roSegment = segment.withAccessModes(segment.accessModes() & ~WRITE);
+ * }</pre></blockquote>
+ * It is also possible to create views whose spatial bounds are stricter than the ones of the original segment
+ * (see {@link MemorySegment#asSlice(long, long)}).
  * <p>
  * Temporal bounds of the original segment are inherited by the view; that is, closing a segment view, such as a sliced
  * view, will cause the original segment to be closed; as such special care must be taken when sharing views
  * between multiple clients. If a client want to protect itself against early closure of a segment by
- * another actor, it is the responsibility of that client to take protective measures, such as calling
- * {@link MemorySegment#acquire()} before sharing the view with another client.
+ * another actor, it is the responsibility of that client to take protective measures, such as removing {@link #CLOSE}
+ * from the set of supported access modes, before sharing the view with another client.
  * <p>
  * To allow for interoperability with existing code, a byte buffer view can be obtained from a memory segment
  * (see {@link #asByteBuffer()}). This can be useful, for instance, for those clients that want to keep using the
  * {@link ByteBuffer} API, but need to operate on large memory segments. Byte buffers obtained in such a way support
  * the same spatial and temporal access restrictions associated to the memory address from which they originated.
@@ -155,58 +172,60 @@
      * @return The size (in bytes) of this memory segment.
      */
     long byteSize();
 
     /**
-     * Obtains a read-only view of this segment. An attempt to write memory associated with a read-only memory segment
-     * will fail with {@link UnsupportedOperationException}.
-     * @return a read-only view of this segment.
-     * @throws IllegalStateException if this segment has been closed, or if access occurs from a thread other than the
-     * thread owning this segment.
+     * Obtains a segment view with specific <a href="#access-modes">access modes</a>. Supported access modes are {@link #READ}, {@link #WRITE},
+     * {@link #CLOSE} and {@link #ACQUIRE}. It is generally not possible to go from a segment with stricter access modes
+     * to one with less strict access modes. For instance, attempting to add {@link #WRITE} access mode to a read-only segment
+     * will be met with an exception.
+     * @param accessModes an ORed mask of zero or more access modes.
+     * @return a segment view with specific access modes.
+     * @throws UnsupportedOperationException when {@code mask} is an access mask which is less strict than the one supported by this
+     * segment.
+     */
+    MemorySegment withAccessModes(int accessModes);
+
+    /**
+     * Returns the <a href="#access-modes">access modes</a> associated with this segment; the result is represented as ORed values from
+     * {@link #READ}, {@link #WRITE}, {@link #CLOSE} and {@link #ACQUIRE}.
+     * @return the access modes associated with this segment.
      */
-    MemorySegment asReadOnly();
+    int accessModes();
 
     /**
      * Obtains a new memory segment view whose base address is the same as the base address of this segment plus a given offset,
      * and whose new size is specified by the given argument.
      * @param offset The new segment base offset (relative to the current segment base address), specified in bytes.
      * @param newSize The new segment size, specified in bytes.
      * @return a new memory segment view with updated base/limit addresses.
      * @throws IndexOutOfBoundsException if {@code offset < 0}, {@code offset > byteSize()}, {@code newSize < 0}, or {@code newSize > byteSize() - offset}
-     * @throws IllegalStateException if this segment has been closed, or if access occurs from a thread other than the
-     * thread owning this segment.
      */
     MemorySegment asSlice(long offset, long newSize);
 
     /**
      * Is this segment alive?
      * @return true, if the segment is alive.
      * @see MemorySegment#close()
      */
     boolean isAlive();
 
-    /**
-     * Is this segment read-only?
-     * @return true, if the segment is read-only.
-     * @see MemorySegment#asReadOnly()
-     */
-    boolean isReadOnly();
-
     /**
      * Closes this memory segment. Once a memory segment has been closed, any attempt to use the memory segment,
      * or to access the memory associated with the segment will fail with {@link IllegalStateException}. Depending on
      * the kind of memory segment being closed, calling this method further trigger deallocation of all the resources
      * associated with the memory segment.
-     * @throws IllegalStateException if this segment has been closed, or if access occurs from a thread other than the
-     * thread owning this segment, or if existing acquired views of this segment are still in use (see {@link MemorySegment#acquire()}).
+     * @throws IllegalStateException if this segment is not <em>alive</em>, or if access occurs from a thread other than the
+     * thread owning this segment.
+     * @throws UnsupportedOperationException if this segment does not support the {@link #CLOSE} access mode.
      */
     void close();
 
     /**
      * Wraps this segment in a {@link ByteBuffer}. Some of the properties of the returned buffer are linked to
      * the properties of this segment. For instance, if this segment is <em>immutable</em>
-     * (see {@link MemorySegment#asReadOnly()}, then the resulting buffer is <em>read-only</em>
+     * (e.g. the segment has access mode {@link #READ} but not {@link #WRITE}), then the resulting buffer is <em>read-only</em>
      * (see {@link ByteBuffer#isReadOnly()}. Additionally, if this is a native memory segment, the resulting buffer is
      * <em>direct</em> (see {@link ByteBuffer#isDirect()}).
      * <p>
      * The life-cycle of the returned buffer will be tied to that of this segment. That means that if the this segment
      * is closed (see {@link MemorySegment#close()}, accessing the returned
@@ -216,13 +235,11 @@
      * {@link ByteBuffer#order(java.nio.ByteOrder)}.
      *
      * @return a {@link ByteBuffer} view of this memory segment.
      * @throws UnsupportedOperationException if this segment cannot be mapped onto a {@link ByteBuffer} instance,
      * e.g. because it models an heap-based segment that is not based on a {@code byte[]}), or if its size is greater
-     * than {@link Integer#MAX_VALUE}.
-     * @throws IllegalStateException if this segment has been closed, or if access occurs from a thread other than the
-     * thread owning this segment.
+     * than {@link Integer#MAX_VALUE}, or if the segment does not support the {@link #READ} access mode.
      */
     ByteBuffer asByteBuffer();
 
     /**
      * Copy the contents of this memory segment into a fresh byte array.
@@ -363,11 +380,11 @@
     /**
      * Creates a new native memory segment that models a newly allocated block of off-heap memory with given size (in bytes).
      * <p>
      * This is equivalent to the following code:
      * <blockquote><pre>{@code
-    allocateNative(bytesSize, 1);
+allocateNative(bytesSize, 1);
      * }</pre></blockquote>
      *
      * @implNote The block of off-heap memory associated with the returned native memory segment is initialized to zero.
      * Moreover, a client is responsible to call the {@link MemorySegment#close()} on a native memory segment,
      * to make sure the backing off-heap memory block is deallocated accordingly. Failure to do so will result in off-heap memory leaks.
@@ -422,6 +439,36 @@
             throw new IllegalArgumentException("Invalid alignment constraint : " + alignmentBytes);
         }
 
         return Utils.makeNativeSegment(bytesSize, alignmentBytes);
     }
+
+    // access mode masks
+
+    /**
+     * Read access mode; read operations are supported by a segment which supports this access mode.
+     * @see MemorySegment#accessModes()
+     * @see MemorySegment#withAccessModes(int)
+     */
+    int READ = 1;
+
+    /**
+     * Write access mode; write operations are supported by a segment which supports this access mode.
+     * @see MemorySegment#accessModes()
+     * @see MemorySegment#withAccessModes(int)
+     */
+    int WRITE = READ << 1;
+
+    /**
+     * Close access mode; calling {@link #close()} is supported by a segment which supports this access mode.
+     * @see MemorySegment#accessModes()
+     * @see MemorySegment#withAccessModes(int)
+     */
+    int CLOSE = WRITE << 1;
+
+    /**
+     * Acquire access mode; calling {@link #acquire()} is supported by a segment which supports this access mode.
+     * @see MemorySegment#accessModes()
+     * @see MemorySegment#withAccessModes(int)
+     */
+    int ACQUIRE = CLOSE << 1;
 }
