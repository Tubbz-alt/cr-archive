diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
@@ -33,10 +33,12 @@
 import jdk.internal.access.foreign.MemorySegmentProxy;
 import jdk.internal.misc.Unsafe;
 import jdk.internal.vm.annotation.ForceInline;
 
 import java.nio.ByteBuffer;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Objects;
 import java.util.Random;
 
 /**
  * This class provides an immutable implementation for the {@code MemorySegment} interface. This class contains information
@@ -56,15 +58,20 @@
     final long min;
     final Object base;
     final Thread owner;
     final MemoryScope scope;
 
-    final static int READ_ONLY = 1;
-    final static int SMALL = READ_ONLY << 1;
+    final static int SMALL = ACQUIRE << 1;
     final static long NONCE = new Random().nextLong();
 
-    public MemorySegmentImpl(long min, Object base, long length, int mask, Thread owner, MemoryScope scope) {
+    final static int DEFAULT_MASK = READ | WRITE | CLOSE | ACQUIRE;
+
+    public MemorySegmentImpl(long min, Object base, long length, Thread owner, MemoryScope scope) {
+        this(min, base, length, DEFAULT_MASK, owner, scope);
+    }
+
+    private MemorySegmentImpl(long min, Object base, long length, int mask, Thread owner, MemoryScope scope) {
         this.length = length;
         this.mask = length > Integer.MAX_VALUE ? mask : (mask | SMALL);
         this.min = min;
         this.base = base;
         this.owner = owner;
@@ -73,17 +80,19 @@
 
     // MemorySegment methods
 
     @Override
     public final MemorySegmentImpl asSlice(long offset, long newSize) {
-        checkValidState();
         checkBounds(offset, newSize);
         return new MemorySegmentImpl(min + offset, base, newSize, mask, owner, scope);
     }
 
     @Override
     public MemorySegment acquire() {
+        if (!isSet(ACQUIRE)) {
+            throw unsupportedAccessMode(ACQUIRE);
+        }
         return new MemorySegmentImpl(min, base, length, mask, Thread.currentThread(), scope.acquire());
     }
 
     @Override
     @ForceInline
@@ -94,40 +103,34 @@
     @Override
     public final long byteSize() {
         return length;
     }
 
-    @Override
-    public final MemorySegmentImpl asReadOnly() {
-        checkValidState();
-        return new MemorySegmentImpl(min, base, length, mask | READ_ONLY, owner, scope);
-    }
-
     @Override
     public final boolean isAlive() {
         return scope.isAliveThreadSafe();
     }
 
-    @Override
-    public final boolean isReadOnly() {
-        return isSet(READ_ONLY);
-    }
-
     @Override
     public Thread ownerThread() {
         return owner;
     }
 
     @Override
     public final void close() {
+        if (!isSet(CLOSE)) {
+            throw unsupportedAccessMode(CLOSE);
+        }
         checkValidState();
         scope.close();
     }
 
     @Override
     public ByteBuffer asByteBuffer() {
-        checkValidState();
+        if (!isSet(READ)) {
+            throw unsupportedAccessMode(READ);
+        }
         checkIntSize("ByteBuffer");
         JavaNioAccess nioAccess = SharedSecrets.getJavaNioAccess();
         ByteBuffer _bb;
         if (base() != null) {
             if (!(base() instanceof byte[])) {
@@ -135,20 +138,32 @@
             }
             _bb = nioAccess.newHeapByteBuffer((byte[]) base(), (int)min - BYTE_ARR_BASE, (int) length, this);
         } else {
             _bb = nioAccess.newDirectByteBuffer(min, (int) length, null, this);
         }
-        if (isReadOnly()) {
+        if (!isSet(WRITE)) {
             //scope is IMMUTABLE - obtain a RO byte buffer
             _bb = _bb.asReadOnlyBuffer();
         }
         return _bb;
     }
 
+    @Override
+    public MemorySegment withAccessModes(int accessModes) {
+        if ((~this.mask & accessModes) != 0) {
+            throw new UnsupportedOperationException("Cannot acquire more access modes");
+        }
+        return new MemorySegmentImpl(min, base, length, accessModes, owner, scope);
+    }
+
+    @Override
+    public int accessModes() {
+        return mask;
+    }
+
     @Override
     public byte[] toByteArray() {
-        checkValidState();
         checkIntSize("byte[]");
         byte[] arr = new byte[(int)length];
         MemorySegment arrSegment = MemorySegment.ofArray(arr);
         MemoryAddress.copy(this.baseAddress(), arrSegment.baseAddress(), length);
         return arr;
@@ -177,12 +192,14 @@
 
     // Helper methods
 
     void checkRange(long offset, long length, boolean writeAccess) {
         checkValidState();
-        if (isReadOnly() && writeAccess) {
-            throw new UnsupportedOperationException("Cannot write to read-only memory segment");
+        if (writeAccess && !isSet(WRITE)) {
+            throw unsupportedAccessMode(WRITE);
+        } else if (!writeAccess && !isSet(READ)) {
+            throw unsupportedAccessMode(READ);
         }
         checkBounds(offset, length);
     }
 
     Object base() {
@@ -218,10 +235,32 @@
                 offset > (int)this.length - length) { // careful of overflow
             throw outOfBoundException(offset, length);
         }
     }
 
+    UnsupportedOperationException unsupportedAccessMode(int expected) {
+        return new UnsupportedOperationException((String.format("Required access mode %s ; current access modes: %s",
+                modeStrings(expected).get(0), modeStrings(mask))));
+    }
+
+    private List<String> modeStrings(int mode) {
+        List<String> modes = new ArrayList<>();
+        if ((mode & READ) != 0) {
+            modes.add("READ");
+        }
+        if ((mode & WRITE) != 0) {
+            modes.add("WRITE");
+        }
+        if ((mode & CLOSE) != 0) {
+            modes.add("CLOSE");
+        }
+        if ((mode & ACQUIRE) != 0) {
+            modes.add("ACQUIRE");
+        }
+        return modes;
+    }
+
     private IndexOutOfBoundsException outOfBoundException(long offset, long length) {
         return new IndexOutOfBoundsException(String.format("Out of bound access on segment %s; new offset = %d; new length = %d",
                         this, offset, length));
     }
 
