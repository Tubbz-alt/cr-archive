diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java
@@ -3,13 +3,23 @@
 import java.lang.invoke.VarHandle;
 import java.nio.ByteOrder;
 
 /**
  * This class defines ready-made static accessors which can be used to dereference memory segments in many ways.
- * Each accessor (see {@link #getInt(MemoryAddress, long)} takes a <em>base</em> address and an offset (expressed in bytes).
+ * <p>
+ * The most primitive accessors (see {@link #getIntAtOffset(MemoryAddress, long)} (MemoryAddress, long)}) take a <em>base</em> address and an offset (expressed in bytes).
  * The final address at which the dereference will occur will be computed by offsetting the base address by
  * the specified offset, as if by calling {@link MemoryAddress#addOffset(long)} on the specified base address.
+ * <p>
+ * In cases where no offset is required, overloads are provided (see {@link #getInt(MemoryAddress)}) so that
+ * clients can omit the offset coordinate.
+ * <p>
+ * To help dereferencing in array-like use cases (e.g. where the layout of a given memory segment is a sequence
+ * layout of given size an element count), higher-level overloads are also provided (see {@link #getIntAtIndex(MemoryAddress, long)}),
+ * which take an <em>base</em> address and a <em>logical</em> element index. The formula to obtain the byte offset {@code O} from an
+ * index {@code I} is given by {@code O = I * S} where {@code S} is the size (expressed in bytes) of the element to
+ * be dereferenced.
  */
 public final class MemoryAccess {
 
     private MemoryAccess() {
         // just the one
@@ -42,11 +52,11 @@
      *
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a byte value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static byte getByte_LE(MemoryAddress addr, long offset) {
+    public static byte getByteAtOffset_LE(MemoryAddress addr, long offset) {
         return (byte)byte_LE_handle.get(addr, offset);
     }
 
     /**
      * Writes a byte at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
@@ -58,11 +68,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the byte value to be written.
      */
-    public static void setByte_LE(MemoryAddress addr, long offset, byte value) {
+    public static void setByteAtOffset_LE(MemoryAddress addr, long offset, byte value) {
         byte_LE_handle.set(addr, offset, value);
     }
 
     /**
      * Read a char from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
@@ -74,11 +84,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a char value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static char getChar_LE(MemoryAddress addr, long offset) {
+    public static char getCharAtOffset_LE(MemoryAddress addr, long offset) {
         return (char)char_LE_handle.get(addr, offset);
     }
 
     /**
      * Writes a char at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
@@ -90,11 +100,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the char value to be written.
      */
-    public static void setChar_LE(MemoryAddress addr, long offset, char value) {
+    public static void setCharAtOffset_LE(MemoryAddress addr, long offset, char value) {
         char_LE_handle.set(addr, offset, value);
     }
 
     /**
      * Read a short from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
@@ -106,11 +116,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a short value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static short getShort_LE(MemoryAddress addr, long offset) {
+    public static short getShortAtOffset_LE(MemoryAddress addr, long offset) {
         return (short)short_LE_handle.get(addr, offset);
     }
 
     /**
      * Writes a short at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
@@ -122,11 +132,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the short value to be written.
      */
-    public static void setShort_LE(MemoryAddress addr, long offset, short value) {
+    public static void setShortAtOffset_LE(MemoryAddress addr, long offset, short value) {
         short_LE_handle.set(addr, offset, value);
     }
 
     /**
      * Read an int from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
@@ -138,11 +148,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return an int value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static int getInt_LE(MemoryAddress addr, long offset) {
+    public static int getIntAtOffset_LE(MemoryAddress addr, long offset) {
         return (int)int_LE_handle.get(addr, offset);
     }
 
     /**
      * Writes an int at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
@@ -154,11 +164,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the int value to be written.
      */
-    public static void setInt_LE(MemoryAddress addr, long offset, int value) {
+    public static void setIntAtOffset_LE(MemoryAddress addr, long offset, int value) {
         int_LE_handle.set(addr, offset, value);
     }
 
     /**
      * Read a float from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
@@ -170,11 +180,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a float value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static float getFloat_LE(MemoryAddress addr, long offset) {
+    public static float getFloatAtOffset_LE(MemoryAddress addr, long offset) {
         return (float)float_LE_handle.get(addr, offset);
     }
 
     /**
      * Writes a float at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
@@ -186,11 +196,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the float value to be written.
      */
-    public static void setFloat_LE(MemoryAddress addr, long offset, float value) {
+    public static void setFloatAtOffset_LE(MemoryAddress addr, long offset, float value) {
         float_LE_handle.set(addr, offset, value);
     }
 
     /**
      * Read a long from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
@@ -202,11 +212,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a long value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static long getLong_LE(MemoryAddress addr, long offset) {
+    public static long getLongAtOffset_LE(MemoryAddress addr, long offset) {
         return (long)long_LE_handle.get(addr, offset);
     }
 
     /**
      * Writes a long at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
@@ -218,27 +228,27 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the long value to be written.
      */
-    public static void setLong_LE(MemoryAddress addr, long offset, long value) {
+    public static void setLongAtOffset_LE(MemoryAddress addr, long offset, long value) {
         long_LE_handle.set(addr, offset, value);
     }
 
     /**
      * Read a double from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
      * <p>
      * This is equivalent to the following code:
      * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(double.class), 1L);
+    VarHandle handle = MemoryHandles.withStride(BITS_64_LE.withBitAlignment(8).varHandle(double.class), 1L);
     double value = (double)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a double value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static double getDouble_LE(MemoryAddress addr, long offset) {
+    public static double getDoubleAtOffset_LE(MemoryAddress addr, long offset) {
         return (double)double_LE_handle.get(addr, offset);
     }
 
     /**
      * Writes a double at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
@@ -250,11 +260,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the double value to be written.
      */
-    public static void setDouble_LE(MemoryAddress addr, long offset, double value) {
+    public static void setDoubleAtOffset_LE(MemoryAddress addr, long offset, double value) {
         double_LE_handle.set(addr, offset, value);
     }
 
     /**
      * Read a byte from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
@@ -267,11 +277,11 @@
      *
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a byte value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static byte getByte_BE(MemoryAddress addr, long offset) {
+    public static byte getByteAtOffset_BE(MemoryAddress addr, long offset) {
         return (byte)byte_BE_handle.get(addr, offset);
     }
 
     /**
      * Writes a byte at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
@@ -283,11 +293,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the byte value to be written.
      */
-    public static void setByte_BE(MemoryAddress addr, long offset, byte value) {
+    public static void setByteAtOffset_BE(MemoryAddress addr, long offset, byte value) {
         byte_BE_handle.set(addr, offset, value);
     }
 
     /**
      * Read a char from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
@@ -299,11 +309,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a char value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static char getChar_BE(MemoryAddress addr, long offset) {
+    public static char getCharAtOffset_BE(MemoryAddress addr, long offset) {
         return (char)char_BE_handle.get(addr, offset);
     }
 
     /**
      * Writes a char at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
@@ -315,11 +325,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the char value to be written.
      */
-    public static void setChar_BE(MemoryAddress addr, long offset, char value) {
+    public static void setCharAtOffset_BE(MemoryAddress addr, long offset, char value) {
         char_BE_handle.set(addr, offset, value);
     }
 
     /**
      * Read a short from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
@@ -331,11 +341,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a short value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static short getShort_BE(MemoryAddress addr, long offset) {
+    public static short getShortAtOffset_BE(MemoryAddress addr, long offset) {
         return (short)short_BE_handle.get(addr, offset);
     }
 
     /**
      * Writes a short at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
@@ -347,11 +357,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the short value to be written.
      */
-    public static void setShort_BE(MemoryAddress addr, long offset, short value) {
+    public static void setShortAtOffset_BE(MemoryAddress addr, long offset, short value) {
         short_BE_handle.set(addr, offset, value);
     }
 
     /**
      * Read an int from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
@@ -363,11 +373,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return an int value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static int getInt_BE(MemoryAddress addr, long offset) {
+    public static int getIntAtOffset_BE(MemoryAddress addr, long offset) {
         return (int)int_BE_handle.get(addr, offset);
     }
 
     /**
      * Writes an int at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
@@ -379,11 +389,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the int value to be written.
      */
-    public static void setInt_BE(MemoryAddress addr, long offset, int value) {
+    public static void setIntAtOffset_BE(MemoryAddress addr, long offset, int value) {
         int_BE_handle.set(addr, offset, value);
     }
 
     /**
      * Read a float from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
@@ -395,11 +405,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a float value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static float getFloat_BE(MemoryAddress addr, long offset) {
+    public static float getFloatAtOffset_BE(MemoryAddress addr, long offset) {
         return (float)float_BE_handle.get(addr, offset);
     }
 
     /**
      * Writes a float at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
@@ -411,11 +421,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the float value to be written.
      */
-    public static void setFloat_BE(MemoryAddress addr, long offset, float value) {
+    public static void setFloatAtOffset_BE(MemoryAddress addr, long offset, float value) {
         float_BE_handle.set(addr, offset, value);
     }
 
     /**
      * Read a long from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
@@ -427,11 +437,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a long value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static long getLong_BE(MemoryAddress addr, long offset) {
+    public static long getLongAtOffset_BE(MemoryAddress addr, long offset) {
         return (long)long_BE_handle.get(addr, offset);
     }
 
     /**
      * Writes a long at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
@@ -443,27 +453,27 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the long value to be written.
      */
-    public static void setLong_BE(MemoryAddress addr, long offset, long value) {
+    public static void setLongAtOffset_BE(MemoryAddress addr, long offset, long value) {
         long_BE_handle.set(addr, offset, value);
     }
 
     /**
      * Read a double from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
      * <p>
      * This is equivalent to the following code:
      * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(double.class), 1L);
+    VarHandle handle = MemoryHandles.withStride(BITS_64_BE.withBitAlignment(8).varHandle(double.class), 1L);
     double value = (double)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a double value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static double getDouble_BE(MemoryAddress addr, long offset) {
+    public static double getDoubleAtOffset_BE(MemoryAddress addr, long offset) {
         return (double)double_BE_handle.get(addr, offset);
     }
 
     /**
      * Writes a double at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
@@ -475,11 +485,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the double value to be written.
      */
-    public static void setDouble_BE(MemoryAddress addr, long offset, double value) {
+    public static void setDoubleAtOffset_BE(MemoryAddress addr, long offset, double value) {
         double_BE_handle.set(addr, offset, value);
     }
 
     /**
      * Read a byte from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -492,11 +502,11 @@
      *
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a byte value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static byte getByte(MemoryAddress addr, long offset) {
+    public static byte getByteAtOffset(MemoryAddress addr, long offset) {
         return (byte)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? byte_BE_handle : byte_LE_handle).get(addr, offset);
     }
 
     /**
      * Writes a byte at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -508,11 +518,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the byte value to be written.
      */
-    public static void setByte(MemoryAddress addr, long offset, byte value) {
+    public static void setByteAtOffset(MemoryAddress addr, long offset, byte value) {
         ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? byte_BE_handle : byte_LE_handle).set(addr, offset, value);
     }
 
     /**
      * Read a char from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -524,11 +534,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a char value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static char getChar(MemoryAddress addr, long offset) {
+    public static char getCharAtOffset(MemoryAddress addr, long offset) {
         return (char)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? char_BE_handle : char_LE_handle).get(addr, offset);
     }
 
     /**
      * Writes a char at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -540,11 +550,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the char value to be written.
      */
-    public static void setChar(MemoryAddress addr, long offset, char value) {
+    public static void setCharAtOffset(MemoryAddress addr, long offset, char value) {
         ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? char_BE_handle : char_LE_handle).set(addr, offset, value);
     }
 
     /**
      * Read a short from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -556,11 +566,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a short value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static short getShort(MemoryAddress addr, long offset) {
+    public static short getShortAtOffset(MemoryAddress addr, long offset) {
         return (short)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? short_BE_handle : short_LE_handle).get(addr, offset);
     }
 
     /**
      * Writes a short at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -572,11 +582,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the short value to be written.
      */
-    public static void setShort(MemoryAddress addr, long offset, short value) {
+    public static void setShortAtOffset(MemoryAddress addr, long offset, short value) {
         ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? short_BE_handle : short_LE_handle).set(addr, offset, value);
     }
 
     /**
      * Read an int from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -588,11 +598,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return an int value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static int getInt(MemoryAddress addr, long offset) {
+    public static int getIntAtOffset(MemoryAddress addr, long offset) {
         return (int)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? int_BE_handle : int_LE_handle).get(addr, offset);
     }
 
     /**
      * Writes an int at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -604,11 +614,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the int value to be written.
      */
-    public static void setInt(MemoryAddress addr, long offset, int value) {
+    public static void setIntAtOffset(MemoryAddress addr, long offset, int value) {
         ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? int_BE_handle : int_LE_handle).set(addr, offset, value);
     }
 
     /**
      * Read a float from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -620,11 +630,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a float value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static float getFloat(MemoryAddress addr, long offset) {
+    public static float getFloatAtOffset(MemoryAddress addr, long offset) {
         return (float)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? float_BE_handle : float_LE_handle).get(addr, offset);
     }
 
     /**
      * Writes a float at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -636,11 +646,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the float value to be written.
      */
-    public static void setFloat(MemoryAddress addr, long offset, float value) {
+    public static void setFloatAtOffset(MemoryAddress addr, long offset, float value) {
         ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? float_BE_handle : float_LE_handle).set(addr, offset, value);
     }
 
     /**
      * Read a long from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -652,11 +662,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a long value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static long getLong(MemoryAddress addr, long offset) {
+    public static long getLongAtOffset(MemoryAddress addr, long offset) {
         return (long)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? long_BE_handle : long_LE_handle).get(addr, offset);
     }
 
     /**
      * Writes a long at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -668,11 +678,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the long value to be written.
      */
-    public static void setLong(MemoryAddress addr, long offset, long value) {
+    public static void setLongAtOffset(MemoryAddress addr, long offset, long value) {
         ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? long_BE_handle : long_LE_handle).set(addr, offset, value);
     }
 
     /**
      * Read a double from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -684,11 +694,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a double value read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static double getDouble(MemoryAddress addr, long offset) {
+    public static double getDoubleAtOffset(MemoryAddress addr, long offset) {
         return (double)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? double_BE_handle : double_LE_handle).get(addr, offset);
     }
 
     /**
      * Writes a double at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -700,11 +710,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the double value to be written.
      */
-    public static void setDouble(MemoryAddress addr, long offset, double value) {
+    public static void setDoubleAtOffset(MemoryAddress addr, long offset, double value) {
         ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? double_BE_handle : double_LE_handle).set(addr, offset, value);
     }
 
     /**
      * Read a memory address from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -716,11 +726,11 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @return a memory address read from {@code addr} at the offset specified by {@code offset}.
      */
-    public static MemoryAddress getAddress(MemoryAddress addr, long offset) {
+    public static MemoryAddress getAddressAtOffset(MemoryAddress addr, long offset) {
         return (MemoryAddress)address_handle.get(addr, offset);
     }
 
     /**
      * Writes a memory address at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
@@ -732,13 +742,1295 @@
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
      * @param value the memory address to be written.
      */
-    public static void setAddress(MemoryAddress addr, long offset, MemoryAddress value) {
+    public static void setAddressAtOffset(MemoryAddress addr, long offset, MemoryAddress value) {
         address_handle.set(addr, offset, value);
     }
 
     private static VarHandle indexedHandle(MemoryLayout elementLayout, Class<?> carrier) {
         return MemoryHandles.withStride(elementLayout.withBitAlignment(8).varHandle(carrier), 1L);
     }
+
+    /**
+     * Read a byte from given address, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    byte value = getByteAtOffset_LE(addr, 0L);
+     * }</pre></blockquote>
+     *
+     * @param addr base address.
+     * @return a byte value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static byte getByte_LE(MemoryAddress addr) {
+        return getByteAtOffset_LE(addr, 0L);
+    }
+
+    /**
+     * Writes a byte at given address, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setByteAtOffset_LE(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the byte value to be written.
+     */
+    public static void setByte_LE(MemoryAddress addr, byte value) {
+        setByteAtOffset_LE(addr, 0L, value);
+    }
+
+    /**
+     * Read a char from given address, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    char value = getCharAtOffset_LE(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a char value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static char getChar_LE(MemoryAddress addr) {
+        return getCharAtOffset_LE(addr, 0L);
+    }
+
+    /**
+     * Writes a char at given address, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setCharAtOffset_LE(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the char value to be written.
+     */
+    public static void setChar_LE(MemoryAddress addr, char value) {
+        setCharAtOffset_LE(addr, 0L, value);
+    }
+
+    /**
+     * Read a short from given address, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    short value = getShortAtOffset_LE(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a short value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static short getShort_LE(MemoryAddress addr) {
+        return getShortAtOffset_LE(addr, 0L);
+    }
+
+    /**
+     * Writes a short at given address, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setShortAtOffset_LE(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the short value to be written.
+     */
+    public static void setShort_LE(MemoryAddress addr, short value) {
+        setShortAtOffset_LE(addr, 0L, value);
+    }
+
+    /**
+     * Read an int from given address, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    int value = getIntAtOffset_LE(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return an int value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static int getInt_LE(MemoryAddress addr) {
+        return getIntAtOffset_LE(addr, 0L);
+    }
+
+    /**
+     * Writes an int at given address, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setIntAtOffset_LE(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the int value to be written.
+     */
+    public static void setInt_LE(MemoryAddress addr, int value) {
+        setIntAtOffset_LE(addr, 0L, value);
+    }
+
+    /**
+     * Read a float from given address, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    float value = getFloatAtOffset_LE(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a float value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static float getFloat_LE(MemoryAddress addr) {
+        return getFloatAtOffset_LE(addr, 0L);
+    }
+
+    /**
+     * Writes a float at given address, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setFloatAtOffset_LE(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the float value to be written.
+     */
+    public static void setFloat_LE(MemoryAddress addr, float value) {
+        setFloatAtOffset_LE(addr, 0L, value);
+    }
+
+    /**
+     * Read a long from given address, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    long value = getLongAtOffset_LE(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a long value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static long getLong_LE(MemoryAddress addr) {
+        return getLongAtOffset_LE(addr, 0L);
+    }
+
+    /**
+     * Writes a long at given address, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setLongAtOffset_LE(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the long value to be written.
+     */
+    public static void setLong_LE(MemoryAddress addr, long value) {
+        setLongAtOffset_LE(addr, 0L, value);
+    }
+
+    /**
+     * Read a double from given address, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    double value = getDoubleAtOffset_LE(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a double value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static double getDouble_LE(MemoryAddress addr) {
+        return getDoubleAtOffset_LE(addr, 0L);
+    }
+
+    /**
+     * Writes a double at given address, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setDoubleAtOffset_LE(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the double value to be written.
+     */
+    public static void setDouble_LE(MemoryAddress addr, double value) {
+        setDoubleAtOffset_LE(addr, 0L, value);
+    }
+
+    /**
+     * Read a byte from given address, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    byte value = getByteAtOffset_BE(addr, 0L);
+     * }</pre></blockquote>
+     *
+     * @param addr base address.
+     * @return a byte value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static byte getByte_BE(MemoryAddress addr) {
+        return getByteAtOffset_BE(addr, 0L);
+    }
+
+    /**
+     * Writes a byte at given address, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setByteAtOffset_BE(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the byte value to be written.
+     */
+    public static void setByte_BE(MemoryAddress addr, byte value) {
+        setByteAtOffset_BE(addr, 0L, value);
+    }
+
+    /**
+     * Read a char from given address, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    char value = getCharAtOffset_BE(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a char value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static char getChar_BE(MemoryAddress addr) {
+        return getCharAtOffset_BE(addr, 0L);
+    }
+
+    /**
+     * Writes a char at given address, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setCharAtOffset_BE(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the char value to be written.
+     */
+    public static void setChar_BE(MemoryAddress addr, char value) {
+        setCharAtOffset_BE(addr, 0L, value);
+    }
+
+    /**
+     * Read a short from given address, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    short value = getShortAtOffset_BE(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a short value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static short getShort_BE(MemoryAddress addr) {
+        return getShortAtOffset_BE(addr, 0L);
+    }
+
+    /**
+     * Writes a short at given address, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setShortAtOffset_BE(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the short value to be written.
+     */
+    public static void setShort_BE(MemoryAddress addr, short value) {
+        setShortAtOffset_BE(addr, 0L, value);
+    }
+
+    /**
+     * Read an int from given address, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    int value = getIntAtOffset_BE(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return an int value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static int getInt_BE(MemoryAddress addr) {
+        return getIntAtOffset_BE(addr, 0L);
+    }
+
+    /**
+     * Writes an int at given address, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setIntAtOffset_BE(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the int value to be written.
+     */
+    public static void setInt_BE(MemoryAddress addr, int value) {
+        setIntAtOffset_BE(addr, 0L, value);
+    }
+
+    /**
+     * Read a float from given address, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    float value = getFloatAtOffset_BE(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a float value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static float getFloat_BE(MemoryAddress addr) {
+        return getFloatAtOffset_BE(addr, 0L);
+    }
+
+    /**
+     * Writes a float at given address, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setFloatAtOffset_BE(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the float value to be written.
+     */
+    public static void setFloat_BE(MemoryAddress addr, float value) {
+        setFloatAtOffset_BE(addr, 0L, value);
+    }
+
+    /**
+     * Read a long from given address, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    long value = getLongAtOffset_BE(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a long value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static long getLong_BE(MemoryAddress addr) {
+        return getLongAtOffset_BE(addr, 0L);
+    }
+
+    /**
+     * Writes a long at given address, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setLongAtOffset_BE(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the long value to be written.
+     */
+    public static void setLong_BE(MemoryAddress addr, long value) {
+        setLongAtOffset_BE(addr, 0L, value);
+    }
+
+    /**
+     * Read a double from given address, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    double value = getDoubleAtOffset_BE(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a double value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static double getDouble_BE(MemoryAddress addr) {
+        return getDoubleAtOffset_BE(addr, 0L);
+    }
+
+    /**
+     * Writes a double at given address, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setDoubleAtOffset_BE(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the double value to be written.
+     */
+    public static void setDouble_BE(MemoryAddress addr, double value) {
+        setDoubleAtOffset_BE(addr, 0L, value);
+    }
+
+    /**
+     * Read a byte from given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    byte value = getByteAtOffset(addr, 0L);
+     * }</pre></blockquote>
+     *
+     * @param addr base address.
+     * @return a byte value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static byte getByte(MemoryAddress addr) {
+        return getByteAtOffset(addr, 0L);
+    }
+
+    /**
+     * Writes a byte at given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setByteAtOffset(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the byte value to be written.
+     */
+    public static void setByte(MemoryAddress addr, byte value) {
+        setByteAtOffset(addr, 0L, value);
+    }
+
+    /**
+     * Read a char from given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    char value = getCharAtOffset(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a char value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static char getChar(MemoryAddress addr) {
+        return getCharAtOffset(addr, 0L);
+    }
+
+    /**
+     * Writes a char at given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setCharAtOffset(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the char value to be written.
+     */
+    public static void setChar(MemoryAddress addr, char value) {
+        setCharAtOffset(addr, 0L, value);
+    }
+
+    /**
+     * Read a short from given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    short value = getShortAtOffset(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a short value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static short getShort(MemoryAddress addr) {
+        return getShortAtOffset(addr, 0L);
+    }
+
+    /**
+     * Writes a short at given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setShortAtOffset(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the short value to be written.
+     */
+    public static void setShort(MemoryAddress addr, short value) {
+        setShortAtOffset(addr, 0L, value);
+    }
+
+    /**
+     * Read an int from given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    int value = getIntAtOffset(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return an int value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static int getInt(MemoryAddress addr) {
+        return getIntAtOffset(addr, 0L);
+    }
+
+    /**
+     * Writes an int at given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setIntAtOffset(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the int value to be written.
+     */
+    public static void setInt(MemoryAddress addr, int value) {
+        setIntAtOffset(addr, 0L, value);
+    }
+
+    /**
+     * Read a float from given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    float value = getFloatAtOffset(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a float value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static float getFloat(MemoryAddress addr) {
+        return getFloatAtOffset(addr, 0L);
+    }
+
+    /**
+     * Writes a float at given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setFloatAtOffset(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the float value to be written.
+     */
+    public static void setFloat(MemoryAddress addr, float value) {
+        setFloatAtOffset(addr, 0L, value);
+    }
+
+    /**
+     * Read a long from given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    long value = getLongAtOffset(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a long value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static long getLong(MemoryAddress addr) {
+        return getLongAtOffset(addr, 0L);
+    }
+
+    /**
+     * Writes a long at given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setLongAtOffset(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the long value to be written.
+     */
+    public static void setLong(MemoryAddress addr, long value) {
+        setLongAtOffset(addr, 0L, value);
+    }
+
+    /**
+     * Read a double from given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    double value = getDoubleAtOffset(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a double value read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static double getDouble(MemoryAddress addr) {
+        return getDoubleAtOffset(addr, 0L);
+    }
+
+    /**
+     * Writes a double at given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setDoubleAtOffset(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the double value to be written.
+     */
+    public static void setDouble(MemoryAddress addr, double value) {
+        setDoubleAtOffset(addr, 0L, value);
+    }
+
+    /**
+     * Read a memory address from given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    MemoryAddress value = getAddressAtOffset(addr, 0L);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @return a memory address read from {@code addr} at the offset specified by {@code offset}.
+     */
+    public static MemoryAddress getAddress(MemoryAddress addr) {
+        return getAddressAtOffset(addr, 0L);
+    }
+
+    /**
+     * Writes a memory address at given address, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setAddressAtOffset(addr, 0L, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param value the memory address to be written.
+     */
+    public static void setAddress(MemoryAddress addr, MemoryAddress value) {
+        setAddressAtOffset(addr, 0L, value);
+    }
+
+    /**
+     * Read a byte from given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    byte value = getByteAtOffset_LE(addr, index);
+     * }</pre></blockquote>
+     *
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index)}.
+     * @return a byte value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static byte getByteAtIndex_LE(MemoryAddress addr, long index) {
+        return getByteAtOffset_LE(addr, index);
+    }
+
+    /**
+     * Writes a byte at given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setByteAtOffset_LE(addr, index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index)}.
+     * @param value the byte value to be written.
+     */
+    public static void setByteAtIndex_LE(MemoryAddress addr, long index, byte value) {
+        setByteAtOffset_LE(addr, index, value);
+    }
+
+    /**
+     * Read a char from given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    char value = getCharAtOffset_LE(addr, 2 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
+     * @return a char value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static char getCharAtIndex_LE(MemoryAddress addr, long index) {
+        return getCharAtOffset_LE(addr, 2 * index);
+    }
+
+    /**
+     * Writes a char at given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setCharAtOffset_LE(addr, 2 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
+     * @param value the char value to be written.
+     */
+    public static void setCharAtIndex_LE(MemoryAddress addr, long index, char value) {
+        setCharAtOffset_LE(addr, 2 * index, value);
+    }
+
+    /**
+     * Read a short from given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    short value = getShortAtOffset_LE(addr, 2 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
+     * @return a short value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static short getShortAtIndex_LE(MemoryAddress addr, long index) {
+        return getShortAtOffset_LE(addr, 2 * index);
+    }
+
+    /**
+     * Writes a short at given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setShortAtOffset_LE(addr, 2 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
+     * @param value the short value to be written.
+     */
+    public static void setShortAtIndex_LE(MemoryAddress addr, long index, short value) {
+        setShortAtOffset_LE(addr, 2 * index, value);
+    }
+
+    /**
+     * Read an int from given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    int value = getIntAtOffset_LE(addr, 4 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
+     * @return an int value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static int getIntAtIndex_LE(MemoryAddress addr, long index) {
+        return getIntAtOffset_LE(addr, 4 * index);
+    }
+
+    /**
+     * Writes an int at given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setIntAtOffset_LE(addr, 4 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
+     * @param value the int value to be written.
+     */
+    public static void setIntAtIndex_LE(MemoryAddress addr, long index, int value) {
+        setIntAtOffset_LE(addr, 4 * index, value);
+    }
+
+    /**
+     * Read a float from given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    float value = getFloatAtOffset_LE(addr, 4 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
+     * @return a float value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static float getFloatAtIndex_LE(MemoryAddress addr, long index) {
+        return getFloatAtOffset_LE(addr, 4 * index);
+    }
+
+    /**
+     * Writes a float at given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setFloatAtOffset_LE(addr, 4 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
+     * @param value the float value to be written.
+     */
+    public static void setFloatAtIndex_LE(MemoryAddress addr, long index, float value) {
+        setFloatAtOffset_LE(addr, 4 * index, value);
+    }
+
+    /**
+     * Read a long from given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    return getLongAtOffset_LE(addr, 8 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
+     * @return a long value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static long getLongAtIndex_LE(MemoryAddress addr, long index) {
+        return getLongAtOffset_LE(addr, 8 * index);
+    }
+
+    /**
+     * Writes a long at given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setLongAtOffset_LE(addr, 8 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
+     * @param value the long value to be written.
+     */
+    public static void setLongAtIndex_LE(MemoryAddress addr, long index, long value) {
+        setLongAtOffset_LE(addr, 8 * index, value);
+    }
+
+    /**
+     * Read a double from given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    return getDoubleAtOffset_LE(addr, 8 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
+     * @return a double value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static double getDoubleAtIndex_LE(MemoryAddress addr, long index) {
+        return getDoubleAtOffset_LE(addr, 8 * index);
+    }
+
+    /**
+     * Writes a double at given address and element index, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setDoubleAtOffset_LE(addr, 8 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
+     * @param value the double value to be written.
+     */
+    public static void setDoubleAtIndex_LE(MemoryAddress addr, long index, double value) {
+        setDoubleAtOffset_LE(addr, 8 * index, value);
+    }
+
+    /**
+     * Read a byte from given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    byte value = getByteAtOffset_BE(addr, index);
+     * }</pre></blockquote>
+     *
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index)}.
+     * @return a byte value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static byte getByteAtIndex_BE(MemoryAddress addr, long index) {
+        return getByteAtOffset_BE(addr, index);
+    }
+
+    /**
+     * Writes a byte at given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setByteAtOffset_BE(addr, index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index)}.
+     * @param value the byte value to be written.
+     */
+    public static void setByteAtIndex_BE(MemoryAddress addr, long index, byte value) {
+        setByteAtOffset_BE(addr, index, value);
+    }
+
+    /**
+     * Read a char from given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    char value = getCharAtOffset_BE(addr, 2 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
+     * @return a char value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static char getCharAtIndex_BE(MemoryAddress addr, long index) {
+        return getCharAtOffset_BE(addr, 2 * index);
+    }
+
+    /**
+     * Writes a char at given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setCharAtOffset_BE(addr, 2 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
+     * @param value the char value to be written.
+     */
+    public static void setCharAtIndex_BE(MemoryAddress addr, long index, char value) {
+        setCharAtOffset_BE(addr, 2 * index, value);
+    }
+
+    /**
+     * Read a short from given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    short value = getShortAtOffset_BE(addr, 2 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
+     * @return a short value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static short getShortAtIndex_BE(MemoryAddress addr, long index) {
+        return getShortAtOffset_BE(addr, 2 * index);
+    }
+
+    /**
+     * Writes a short at given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setShortAtOffset_BE(addr, 2 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
+     * @param value the short value to be written.
+     */
+    public static void setShortAtIndex_BE(MemoryAddress addr, long index, short value) {
+        setShortAtOffset_BE(addr, 2 * index, value);
+    }
+
+    /**
+     * Read an int from given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    int value = getIntAtOffset_BE(addr, 4 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
+     * @return an int value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static int getIntAtIndex_BE(MemoryAddress addr, long index) {
+        return getIntAtOffset_BE(addr, 4 * index);
+    }
+
+    /**
+     * Writes an int at given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setIntAtOffset_BE(addr, 4 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
+     * @param value the int value to be written.
+     */
+    public static void setIntAtIndex_BE(MemoryAddress addr, long index, int value) {
+        setIntAtOffset_BE(addr, 4 * index, value);
+    }
+
+    /**
+     * Read a float from given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    float value = getFloatAtOffset_BE(addr, 4 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
+     * @return a float value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static float getFloatAtIndex_BE(MemoryAddress addr, long index) {
+        return getFloatAtOffset_BE(addr, 4 * index);
+    }
+
+    /**
+     * Writes a float at given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setFloatAtOffset_BE(addr, 4 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
+     * @param value the float value to be written.
+     */
+    public static void setFloatAtIndex_BE(MemoryAddress addr, long index, float value) {
+        setFloatAtOffset_BE(addr, 4 * index, value);
+    }
+
+    /**
+     * Read a long from given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    return getLongAtOffset_BE(addr, 8 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
+     * @return a long value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static long getLongAtIndex_BE(MemoryAddress addr, long index) {
+        return getLongAtOffset_BE(addr, 8 * index);
+    }
+
+    /**
+     * Writes a long at given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setLongAtOffset_BE(addr, 8 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
+     * @param value the long value to be written.
+     */
+    public static void setLongAtIndex_BE(MemoryAddress addr, long index, long value) {
+        setLongAtOffset_BE(addr, 8 * index, value);
+    }
+
+    /**
+     * Read a double from given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    return getDoubleAtOffset_BE(addr, 8 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
+     * @return a double value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static double getDoubleAtIndex_BE(MemoryAddress addr, long index) {
+        return getDoubleAtOffset_BE(addr, 8 * index);
+    }
+
+    /**
+     * Writes a double at given address and element index, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setDoubleAtOffset_BE(addr, 8 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
+     * @param value the double value to be written.
+     */
+    public static void setDoubleAtIndex_BE(MemoryAddress addr, long index, double value) {
+        setDoubleAtOffset_BE(addr, 8 * index, value);
+    }
+
+    /**
+     * Read a byte from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    byte value = getByteAtOffset(addr, index);
+     * }</pre></blockquote>
+     *
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index)}.
+     * @return a byte value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static byte getByteAtIndex(MemoryAddress addr, long index) {
+        return getByteAtOffset(addr, index);
+    }
+
+    /**
+     * Writes a byte at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setByteAtOffset(addr, index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index)}.
+     * @param value the byte value to be written.
+     */
+    public static void setByteAtIndex(MemoryAddress addr, long index, byte value) {
+        setByteAtOffset(addr, index, value);
+    }
+
+    /**
+     * Read a char from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    char value = getCharAtOffset(addr, 2 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
+     * @return a char value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static char getCharAtIndex(MemoryAddress addr, long index) {
+        return getCharAtOffset(addr, 2 * index);
+    }
+
+    /**
+     * Writes a char at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setCharAtOffset(addr, 2 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
+     * @param value the char value to be written.
+     */
+    public static void setCharAtIndex(MemoryAddress addr, long index, char value) {
+        setCharAtOffset(addr, 2 * index, value);
+    }
+
+    /**
+     * Read a short from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    short value = getShortAtOffset(addr, 2 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
+     * @return a short value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static short getShortAtIndex(MemoryAddress addr, long index) {
+        return getShortAtOffset(addr, 2 * index);
+    }
+
+    /**
+     * Writes a short at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setShortAtOffset(addr, 2 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 2)}.
+     * @param value the short value to be written.
+     */
+    public static void setShortAtIndex(MemoryAddress addr, long index, short value) {
+        setShortAtOffset(addr, 2 * index, value);
+    }
+
+    /**
+     * Read an int from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    int value = getIntAtOffset(addr, 4 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
+     * @return an int value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static int getIntAtIndex(MemoryAddress addr, long index) {
+        return getIntAtOffset(addr, 4 * index);
+    }
+
+    /**
+     * Writes an int at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setIntAtOffset(addr, 4 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
+     * @param value the int value to be written.
+     */
+    public static void setIntAtIndex(MemoryAddress addr, long index, int value) {
+        setIntAtOffset(addr, 4 * index, value);
+    }
+
+    /**
+     * Read a float from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    float value = getFloatAtOffset(addr, 4 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
+     * @return a float value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static float getFloatAtIndex(MemoryAddress addr, long index) {
+        return getFloatAtOffset(addr, 4 * index);
+    }
+
+    /**
+     * Writes a float at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setFloatAtOffset(addr, 4 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 4)}.
+     * @param value the float value to be written.
+     */
+    public static void setFloatAtIndex(MemoryAddress addr, long index, float value) {
+        setFloatAtOffset(addr, 4 * index, value);
+    }
+
+    /**
+     * Read a long from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    return getLongAtOffset(addr, 8 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
+     * @return a long value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static long getLongAtIndex(MemoryAddress addr, long index) {
+        return getLongAtOffset(addr, 8 * index);
+    }
+
+    /**
+     * Writes a long at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setLongAtOffset(addr, 8 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
+     * @param value the long value to be written.
+     */
+    public static void setLongAtIndex(MemoryAddress addr, long index, long value) {
+        setLongAtOffset(addr, 8 * index, value);
+    }
+
+    /**
+     * Read a double from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    return getDoubleAtOffset(addr, 8 * index);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
+     * @return a double value read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static double getDoubleAtIndex(MemoryAddress addr, long index) {
+        return getDoubleAtOffset(addr, 8 * index);
+    }
+
+    /**
+     * Writes a double at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setDoubleAtOffset(addr, 8 * index, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
+     * @param value the double value to be written.
+     */
+    public static void setDoubleAtIndex(MemoryAddress addr, long index, double value) {
+        setDoubleAtOffset(addr, 8 * index, value);
+    }
+
+    /**
+     * Read a memory address from given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    return getAddressAtOffset(addr, index * 8);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
+     * @return a memory address read from {@code addr} at the element index specified by {@code index}.
+     */
+    public static MemoryAddress getAddressAtIndex(MemoryAddress addr, long index) {
+        return getAddressAtOffset(addr, index * 8);
+    }
+
+    /**
+     * Writes a memory address at given address and element index, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    setAddressAtOffset(addr, index * 8, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param index element index (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(index * 8)}.
+     * @param value the memory address to be written.
+     */
+    public static void setAddressAtIndex(MemoryAddress addr, long index, MemoryAddress value) {
+        setAddressAtOffset(addr, index * 8, value);
+    }
 }
diff a/test/jdk/java/foreign/TestByteBuffer.java b/test/jdk/java/foreign/TestByteBuffer.java
--- a/test/jdk/java/foreign/TestByteBuffer.java
+++ b/test/jdk/java/foreign/TestByteBuffer.java
@@ -553,11 +553,11 @@
         MemorySegment s1 = MemorySegment.allocateNative(MemoryLayouts.JAVA_INT);
         MemorySegment s2 = MemorySegment.ofByteBuffer(s1.asByteBuffer());
 
         s1.close(); // memory freed
 
-        MemoryAccess.setInt(s2.baseAddress(), 0L, 10); // Dead access!
+        MemoryAccess.setInt(s2.baseAddress(), 10); // Dead access!
     }
 
     @DataProvider(name = "bufferOps")
     public static Object[][] bufferOps() throws Throwable {
         return new Object[][]{
@@ -614,38 +614,38 @@
     }
 
     @DataProvider(name = "resizeOps")
     public Object[][] resizeOps() {
         Consumer<MemoryAddress> byteInitializer =
-                (base) -> initBytes(base, bytes, (addr, pos) -> MemoryAccess.setByte_BE(addr, pos, (byte)(long)pos));
+                (base) -> initBytes(base, bytes, (addr, pos) -> MemoryAccess.setByteAtIndex_BE(addr, pos, (byte)(long)pos));
         Consumer<MemoryAddress> charInitializer =
-                (base) -> initBytes(base, chars, (addr, pos) -> MemoryAccess.setChar_BE(addr, pos * 2, (char)(long)pos));
+                (base) -> initBytes(base, chars, (addr, pos) -> MemoryAccess.setCharAtIndex_BE(addr, pos, (char)(long)pos));
         Consumer<MemoryAddress> shortInitializer =
-                (base) -> initBytes(base, shorts, (addr, pos) -> MemoryAccess.setShort_BE(addr, pos * 2, (short)(long)pos));
+                (base) -> initBytes(base, shorts, (addr, pos) -> MemoryAccess.setShortAtIndex_BE(addr, pos, (short)(long)pos));
         Consumer<MemoryAddress> intInitializer =
-                (base) -> initBytes(base, ints, (addr, pos) -> MemoryAccess.setInt_BE(addr, pos * 4, (int)(long)pos));
+                (base) -> initBytes(base, ints, (addr, pos) -> MemoryAccess.setIntAtIndex_BE(addr, pos, (int)(long)pos));
         Consumer<MemoryAddress> floatInitializer =
-                (base) -> initBytes(base, floats, (addr, pos) -> MemoryAccess.setFloat_BE(addr, pos * 4, (float)(long)pos));
+                (base) -> initBytes(base, floats, (addr, pos) -> MemoryAccess.setFloatAtIndex_BE(addr, pos, (float)(long)pos));
         Consumer<MemoryAddress> longInitializer =
-                (base) -> initBytes(base, longs, (addr, pos) -> MemoryAccess.setLong_BE(addr, pos * 8, (long)pos));
+                (base) -> initBytes(base, longs, (addr, pos) -> MemoryAccess.setLongAtIndex_BE(addr, pos, pos));
         Consumer<MemoryAddress> doubleInitializer =
-                (base) -> initBytes(base, doubles, (addr, pos) -> MemoryAccess.setDouble_BE(addr, pos * 8, (double)(long)pos));
+                (base) -> initBytes(base, doubles, (addr, pos) -> MemoryAccess.setDoubleAtIndex_BE(addr, pos, (double)(long)pos));
 
         Consumer<MemoryAddress> byteChecker =
-                (base) -> checkBytes(base, bytes, Function.identity(), MemoryAccess::getByte_BE, ByteBuffer::get);
+                (base) -> checkBytes(base, bytes, Function.identity(), MemoryAccess::getByteAtIndex_BE, ByteBuffer::get);
         Consumer<MemoryAddress> charChecker =
-                (base) -> checkBytes(base, chars, ByteBuffer::asCharBuffer, (addr, pos) -> MemoryAccess.getChar_BE(addr, pos * 2), CharBuffer::get);
+                (base) -> checkBytes(base, chars, ByteBuffer::asCharBuffer, MemoryAccess::getCharAtIndex_BE, CharBuffer::get);
         Consumer<MemoryAddress> shortChecker =
-                (base) -> checkBytes(base, shorts, ByteBuffer::asShortBuffer, (addr, pos) -> MemoryAccess.getShort_BE(addr, pos * 2), ShortBuffer::get);
+                (base) -> checkBytes(base, shorts, ByteBuffer::asShortBuffer, MemoryAccess::getShortAtIndex_BE, ShortBuffer::get);
         Consumer<MemoryAddress> intChecker =
-                (base) -> checkBytes(base, ints, ByteBuffer::asIntBuffer, (addr, pos) -> MemoryAccess.getInt_BE(addr, pos * 4), IntBuffer::get);
+                (base) -> checkBytes(base, ints, ByteBuffer::asIntBuffer, MemoryAccess::getIntAtIndex_BE, IntBuffer::get);
         Consumer<MemoryAddress> floatChecker =
-                (base) -> checkBytes(base, floats, ByteBuffer::asFloatBuffer, (addr, pos) -> MemoryAccess.getFloat_BE(addr, pos * 4), FloatBuffer::get);
+                (base) -> checkBytes(base, floats, ByteBuffer::asFloatBuffer, MemoryAccess::getFloatAtIndex_BE, FloatBuffer::get);
         Consumer<MemoryAddress> longChecker =
-                (base) -> checkBytes(base, longs, ByteBuffer::asLongBuffer, (addr, pos) -> MemoryAccess.getLong_BE(addr, pos * 8), LongBuffer::get);
+                (base) -> checkBytes(base, longs, ByteBuffer::asLongBuffer, MemoryAccess::getLongAtIndex_BE, LongBuffer::get);
         Consumer<MemoryAddress> doubleChecker =
-                (base) -> checkBytes(base, doubles, ByteBuffer::asDoubleBuffer, (addr, pos) -> MemoryAccess.getDouble_BE(addr, pos * 8), DoubleBuffer::get);
+                (base) -> checkBytes(base, doubles, ByteBuffer::asDoubleBuffer, MemoryAccess::getDoubleAtIndex_BE, DoubleBuffer::get);
 
         return new Object[][]{
                 {byteChecker, byteInitializer, bytes},
                 {charChecker, charInitializer, chars},
                 {shortChecker, shortInitializer, shorts},
