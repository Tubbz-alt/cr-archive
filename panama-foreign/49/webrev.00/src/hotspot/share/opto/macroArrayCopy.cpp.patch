diff a/src/hotspot/share/opto/macroArrayCopy.cpp b/src/hotspot/share/opto/macroArrayCopy.cpp
--- a/src/hotspot/share/opto/macroArrayCopy.cpp
+++ b/src/hotspot/share/opto/macroArrayCopy.cpp
@@ -31,12 +31,12 @@
 #include "opto/macro.hpp"
 #include "opto/runtime.hpp"
 #include "utilities/align.hpp"
 #include "utilities/powerOfTwo.hpp"
 
-void PhaseMacroExpand::insert_mem_bar(Node** ctrl, Node** mem, int opcode, int alias_idx, Node* precedent) {
-  MemBarNode* mb = MemBarNode::make(C, opcode, alias_idx, precedent);
+void PhaseMacroExpand::insert_mem_bar(Node** ctrl, Node** mem, int opcode, Node* precedent) {
+  MemBarNode* mb = MemBarNode::make(C, opcode, Compile::AliasIdxBot, precedent);
   mb->init_req(TypeFunc::Control, *ctrl);
   mb->init_req(TypeFunc::Memory, *mem);
   transform_later(mb);
   *ctrl = new ProjNode(mb,TypeFunc::Control);
   transform_later(*ctrl);
@@ -704,19 +704,11 @@
   // The next memory barrier is added to avoid it. If the arraycopy can be
   // optimized away (which it can, sometimes) then we can manually remove
   // the membar also.
   //
   // Do not let reads from the cloned object float above the arraycopy.
-  if (ac->_dest_type != TypeOopPtr::BOTTOM && adr_type != ac->_dest_type) {
-    // Known instance: add memory of the destination type
-    MergeMemNode* mm = out_mem->clone()->as_MergeMem();
-    transform_later(mm);
-    uint dest_idx = C->get_alias_index(ac->_dest_type);
-    insert_mem_bar(ctrl, &out_mem, Op_MemBarCPUOrder, dest_idx);
-    mm->set_memory_at(dest_idx, out_mem);
-    out_mem = mm;
-  } else if (alloc != NULL && !alloc->initialization()->does_not_escape()) {
+  if (alloc != NULL && !alloc->initialization()->does_not_escape()) {
     // Do not let stores that initialize this object be reordered with
     // a subsequent store that would make this object accessible by
     // other threads.
     insert_mem_bar(ctrl, &out_mem, Op_MemBarStoreStore);
   } else if (InsertMemBarAfterArraycopy) {
