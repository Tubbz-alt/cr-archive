diff a/src/hotspot/share/gc/shenandoah/shenandoahConcurrentMark.cpp b/src/hotspot/share/gc/shenandoah/shenandoahConcurrentMark.cpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahConcurrentMark.cpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahConcurrentMark.cpp
@@ -39,12 +39,12 @@
 #include "gc/shenandoah/shenandoahConcurrentMark.inline.hpp"
 #include "gc/shenandoah/shenandoahMarkCompact.hpp"
 #include "gc/shenandoah/shenandoahHeap.inline.hpp"
 #include "gc/shenandoah/shenandoahRootProcessor.inline.hpp"
 #include "gc/shenandoah/shenandoahOopClosures.inline.hpp"
+#include "gc/shenandoah/shenandoahPhaseTimings.hpp"
 #include "gc/shenandoah/shenandoahTaskqueue.inline.hpp"
-#include "gc/shenandoah/shenandoahTimingTracker.hpp"
 #include "gc/shenandoah/shenandoahUtils.hpp"
 
 #include "memory/iterator.inline.hpp"
 #include "memory/metaspace.hpp"
 #include "memory/resourceArea.hpp"
@@ -82,16 +82,14 @@
 
 template<UpdateRefsMode UPDATE_REFS>
 class ShenandoahInitMarkRootsTask : public AbstractGangTask {
 private:
   ShenandoahAllRootScanner* _rp;
-  bool _process_refs;
 public:
-  ShenandoahInitMarkRootsTask(ShenandoahAllRootScanner* rp, bool process_refs) :
+  ShenandoahInitMarkRootsTask(ShenandoahAllRootScanner* rp) :
     AbstractGangTask("Shenandoah init mark roots task"),
-    _rp(rp),
-    _process_refs(process_refs) {
+    _rp(rp) {
   }
 
   void work(uint worker_id) {
     assert(ShenandoahSafepoint::is_at_shenandoah_safepoint(), "Must be at a safepoint");
     ShenandoahParallelWorkerSession worker_session(worker_id);
@@ -266,16 +264,16 @@
   ShenandoahAllRootScanner root_proc(nworkers, root_phase);
   TASKQUEUE_STATS_ONLY(task_queues()->reset_taskqueue_stats());
   task_queues()->reserve(nworkers);
 
   if (heap->has_forwarded_objects()) {
-    ShenandoahInitMarkRootsTask<RESOLVE> mark_roots(&root_proc, _heap->process_references());
+    ShenandoahInitMarkRootsTask<RESOLVE> mark_roots(&root_proc);
     workers->run_task(&mark_roots);
   } else {
     // No need to update references, which means the heap is stable.
     // Can save time not walking through forwarding pointers.
-    ShenandoahInitMarkRootsTask<NONE> mark_roots(&root_proc, _heap->process_references());
+    ShenandoahInitMarkRootsTask<NONE> mark_roots(&root_proc);
     workers->run_task(&mark_roots);
   }
 
   if (ShenandoahConcurrentScanCodeRoots) {
     clear_claim_codecache();
@@ -309,21 +307,18 @@
 
 class ShenandoahUpdateThreadRootsTask : public AbstractGangTask {
 private:
   ShenandoahThreadRoots           _thread_roots;
   ShenandoahPhaseTimings::Phase   _phase;
+  ShenandoahGCWorkerPhase         _worker_phase;
 public:
   ShenandoahUpdateThreadRootsTask(bool is_par, ShenandoahPhaseTimings::Phase phase) :
     AbstractGangTask("Shenandoah Update Thread Roots"),
     _thread_roots(is_par),
-    _phase(phase) {
-    ShenandoahHeap::heap()->phase_timings()->record_workers_start(_phase);
-  }
+    _phase(phase),
+    _worker_phase(phase) {}
 
-  ~ShenandoahUpdateThreadRootsTask() {
-    ShenandoahHeap::heap()->phase_timings()->record_workers_end(_phase);
-  }
   void work(uint worker_id) {
     ShenandoahUpdateRefsClosure cl;
     _thread_roots.oops_do(&cl, NULL, worker_id);
   }
 };
@@ -701,31 +696,10 @@
                    false, // not cancellable
                    false); // do not do strdedup
   }
 };
 
-class ShenandoahPrecleanKeepAliveUpdateClosure : public OopClosure {
-private:
-  ShenandoahObjToScanQueue* _queue;
-  ShenandoahHeap* _heap;
-  ShenandoahMarkingContext* const _mark_context;
-
-  template <class T>
-  inline void do_oop_work(T* p) {
-    ShenandoahConcurrentMark::mark_through_ref<T, CONCURRENT, NO_DEDUP>(p, _heap, _queue, _mark_context);
-  }
-
-public:
-  ShenandoahPrecleanKeepAliveUpdateClosure(ShenandoahObjToScanQueue* q) :
-    _queue(q),
-    _heap(ShenandoahHeap::heap()),
-    _mark_context(_heap->marking_context()) {}
-
-  void do_oop(narrowOop* p) { do_oop_work(p); }
-  void do_oop(oop* p)       { do_oop_work(p); }
-};
-
 class ShenandoahPrecleanTask : public AbstractGangTask {
 private:
   ReferenceProcessor* _rp;
 
 public:
@@ -736,31 +710,23 @@
   void work(uint worker_id) {
     assert(worker_id == 0, "The code below is single-threaded, only one worker is expected");
     ShenandoahParallelWorkerSession worker_session(worker_id);
 
     ShenandoahHeap* sh = ShenandoahHeap::heap();
+    assert(!sh->has_forwarded_objects(), "No forwarded objects expected here");
 
     ShenandoahObjToScanQueue* q = sh->concurrent_mark()->get_queue(worker_id);
 
     ShenandoahCancelledGCYieldClosure yield;
     ShenandoahPrecleanCompleteGCClosure complete_gc;
 
-    if (sh->has_forwarded_objects()) {
-      ShenandoahForwardedIsAliveClosure is_alive;
-      ShenandoahPrecleanKeepAliveUpdateClosure keep_alive(q);
-      ResourceMark rm;
-      _rp->preclean_discovered_references(&is_alive, &keep_alive,
-                                          &complete_gc, &yield,
-                                          NULL);
-    } else {
-      ShenandoahIsAliveClosure is_alive;
-      ShenandoahCMKeepAliveClosure keep_alive(q);
-      ResourceMark rm;
-      _rp->preclean_discovered_references(&is_alive, &keep_alive,
-                                          &complete_gc, &yield,
-                                          NULL);
-    }
+    ShenandoahIsAliveClosure is_alive;
+    ShenandoahCMKeepAliveClosure keep_alive(q);
+    ResourceMark rm;
+    _rp->preclean_discovered_references(&is_alive, &keep_alive,
+                                        &complete_gc, &yield,
+                                        NULL);
   }
 };
 
 void ShenandoahConcurrentMark::preclean_weak_refs() {
   // Pre-cleaning weak references before diving into STW makes sense at the
