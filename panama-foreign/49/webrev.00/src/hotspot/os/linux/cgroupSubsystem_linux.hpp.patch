diff a/src/hotspot/os/linux/cgroupSubsystem_linux.hpp b/src/hotspot/os/linux/cgroupSubsystem_linux.hpp
--- a/src/hotspot/os/linux/cgroupSubsystem_linux.hpp
+++ b/src/hotspot/os/linux/cgroupSubsystem_linux.hpp
@@ -52,10 +52,24 @@
  * [3] https://github.com/apache/mesos/blob/3478e344fb77d931f6122980c6e94cd3913c441d/src/docker/docker.cpp#L648
  *     https://github.com/apache/mesos/blob/3478e344fb77d931f6122980c6e94cd3913c441d/src/slave/containerizer/mesos/isolators/cgroups/constants.hpp#L30
  */
 #define PER_CPU_SHARES 1024
 
+#define CGROUPS_V1               1
+#define CGROUPS_V2               2
+#define INVALID_CGROUPS_V2       3
+#define INVALID_CGROUPS_V1       4
+#define INVALID_CGROUPS_NO_MOUNT 5
+#define INVALID_CGROUPS_GENERIC  6
+
+// Four controllers: cpu, cpuset, cpuacct, memory
+#define CG_INFO_LENGTH 4
+#define CPUSET_IDX     0
+#define CPU_IDX        1
+#define CPUACCT_IDX    2
+#define MEMORY_IDX     3
+
 typedef char * cptr;
 
 class CgroupController: public CHeapObj<mtInternal> {
   public:
     virtual char *subsystem_path() = 0;
@@ -178,12 +192,10 @@
     return (return_type) OSCONTAINER_ERROR;                               \
                                                                           \
   log_trace(os, container)(logstring, variable);                          \
 }
 
-// Four controllers: cpu, cpuset, cpuacct, memory
-#define CG_INFO_LENGTH 4
 
 class CachedMetric : public CHeapObj<mtInternal>{
   private:
     volatile jlong _metric;
     volatile jlong _next_check_counter;
@@ -240,25 +252,64 @@
     virtual const char * container_type() = 0;
     virtual CachingCgroupController* memory_controller() = 0;
     virtual CachingCgroupController* cpu_controller() = 0;
 };
 
-class CgroupSubsystemFactory: AllStatic {
-  public:
-    static CgroupSubsystem* create();
-};
-
-// Class representing info in /proc/self/cgroup.
-// See man 7 cgroups
+// Utility class for storing info retrieved from /proc/cgroups,
+// /proc/self/cgroup and /proc/self/mountinfo
+// For reference see man 7 cgroups and CgroupSubsystemFactory
 class CgroupInfo : public StackObj {
   friend class CgroupSubsystemFactory;
+  friend class WhiteBox;
 
   private:
-  char* _name;
-  int _hierarchy_id;
-  bool _enabled;
-  char* _cgroup_path;
+    char* _name;
+    int _hierarchy_id;
+    bool _enabled;
+    bool _data_complete;    // indicating cgroup v1 data is complete for this controller
+    char* _cgroup_path;     // cgroup controller path from /proc/self/cgroup
+    char* _root_mount_path; // root mount path from /proc/self/mountinfo. Unused for cgroup v2
+    char* _mount_path;      // mount path from /proc/self/mountinfo.
+
+  public:
+    CgroupInfo() {
+      _name = NULL;
+      _hierarchy_id = -1;
+      _enabled = false;
+      _data_complete = false;
+      _cgroup_path = NULL;
+      _root_mount_path = NULL;
+      _mount_path = NULL;
+    }
 
 };
 
+class CgroupSubsystemFactory: AllStatic {
+  friend class WhiteBox;
+
+  public:
+    static CgroupSubsystem* create();
+  private:
+    static inline bool is_cgroup_v2(u1* flags) {
+       return *flags == CGROUPS_V2;
+    }
+
+#ifdef ASSERT
+    static inline bool is_valid_cgroup(u1* flags) {
+       return *flags == CGROUPS_V1 || *flags == CGROUPS_V2;
+    }
+    static inline bool is_cgroup_v1(u1* flags) {
+       return *flags == CGROUPS_V1;
+    }
+#endif
+
+    // Determine the cgroup type (version 1 or version 2), given
+    // relevant paths to files. Sets 'flags' accordingly.
+    static bool determine_type(CgroupInfo* cg_infos,
+                               const char* proc_cgroups,
+                               const char* proc_self_cgroup,
+                               const char* proc_self_mountinfo,
+                               u1* flags);
+    static void cleanup(CgroupInfo* cg_infos);
+};
 
 #endif // CGROUP_SUBSYSTEM_LINUX_HPP
