diff a/src/hotspot/cpu/x86/vm_version_x86.cpp b/src/hotspot/cpu/x86/vm_version_x86.cpp
--- a/src/hotspot/cpu/x86/vm_version_x86.cpp
+++ b/src/hotspot/cpu/x86/vm_version_x86.cpp
@@ -560,11 +560,14 @@
     __ andl(rcx, Address(rsi, 0));
     __ cmpl(rcx, 0x00050670);              // If it is Xeon Phi 3200/5200/7200
     __ jcc(Assembler::equal, L_wrapup);
     __ cmpl(rcx, 0x00080650);              // If it is Future Xeon Phi
     __ jcc(Assembler::equal, L_wrapup);
-    __ vzeroupper();
+    // vzeroupper() will use a pre-computed instruction sequence that we
+    // can't compute until after we've determined CPU capabilities. Use
+    // uncached variant here directly to be able to bootstrap correctly
+    __ vzeroupper_uncached();
 #   undef __
   }
 };
 
 void VM_Version::get_processor_features() {
@@ -695,13 +698,13 @@
     _features &= ~CPU_AVX512CD;
     _features &= ~CPU_AVX512BW;
     _features &= ~CPU_AVX512VL;
     _features &= ~CPU_AVX512_VPOPCNTDQ;
     _features &= ~CPU_AVX512_VPCLMULQDQ;
-    _features &= ~CPU_VAES;
-    _features &= ~CPU_VNNI;
-    _features &= ~CPU_VBMI2;
+    _features &= ~CPU_AVX512_VAES;
+    _features &= ~CPU_AVX512_VNNI;
+    _features &= ~CPU_AVX512_VBMI2;
   }
 
   if (UseAVX < 2)
     _features &= ~CPU_AVX2;
 
@@ -725,48 +728,71 @@
     _has_intel_jcc_erratum = compute_has_intel_jcc_erratum();
   } else {
     _has_intel_jcc_erratum = IntelJccErratumMitigation;
   }
 
-  char buf[256];
-  jio_snprintf(buf, sizeof(buf), "(%u cores per cpu, %u threads per core) family %d model %d stepping %d%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",
+  char buf[512];
+  int res = jio_snprintf(buf, sizeof(buf),
+              "(%u cores per cpu, %u threads per core) family %d model %d stepping %d"
+              "%s%s%s%s%s%s%s%s%s%s" "%s%s%s%s%s%s%s%s%s%s" "%s%s%s%s%s%s%s%s%s%s" "%s%s%s%s%s%s%s%s%s%s" "%s%s%s%s%s%s",
+
                cores_per_cpu(), threads_per_core(),
                cpu_family(), _model, _stepping,
+
                (supports_cmov() ? ", cmov" : ""),
                (supports_cmpxchg8() ? ", cx8" : ""),
                (supports_fxsr() ? ", fxsr" : ""),
                (supports_mmx()  ? ", mmx"  : ""),
                (supports_sse()  ? ", sse"  : ""),
                (supports_sse2() ? ", sse2" : ""),
                (supports_sse3() ? ", sse3" : ""),
                (supports_ssse3()? ", ssse3": ""),
                (supports_sse4_1() ? ", sse4.1" : ""),
                (supports_sse4_2() ? ", sse4.2" : ""),
+
                (supports_popcnt() ? ", popcnt" : ""),
+               (supports_vzeroupper() ? ", vzeroupper" : ""),
                (supports_avx()    ? ", avx" : ""),
                (supports_avx2()   ? ", avx2" : ""),
                (supports_aes()    ? ", aes" : ""),
                (supports_clmul()  ? ", clmul" : ""),
                (supports_erms()   ? ", erms" : ""),
                (supports_rtm()    ? ", rtm" : ""),
                (supports_mmx_ext() ? ", mmxext" : ""),
                (supports_3dnow_prefetch() ? ", 3dnowpref" : ""),
+
                (supports_lzcnt()   ? ", lzcnt": ""),
                (supports_sse4a()   ? ", sse4a": ""),
                (supports_ht() ? ", ht": ""),
                (supports_tsc() ? ", tsc": ""),
                (supports_tscinv_bit() ? ", tscinvbit": ""),
                (supports_tscinv() ? ", tscinv": ""),
                (supports_bmi1() ? ", bmi1" : ""),
                (supports_bmi2() ? ", bmi2" : ""),
                (supports_adx() ? ", adx" : ""),
-               (supports_evex() ? ", evex" : ""),
+               (supports_evex() ? ", avx512f" : ""),
+
+               (supports_avx512dq() ? ", avx512dq" : ""),
+               (supports_avx512pf() ? ", avx512pf" : ""),
+               (supports_avx512er() ? ", avx512er" : ""),
+               (supports_avx512cd() ? ", avx512cd" : ""),
+               (supports_avx512bw() ? ", avx512bw" : ""),
+               (supports_avx512vl() ? ", avx512vl" : ""),
+               (supports_avx512_vpopcntdq() ? ", avx512_vpopcntdq" : ""),
+               (supports_avx512_vpclmulqdq() ? ", avx512_vpclmulqdq" : ""),
+               (supports_avx512_vbmi2() ? ", avx512_vbmi2" : ""),
+               (supports_avx512_vaes() ? ", avx512_vaes" : ""),
+
+               (supports_avx512_vnni() ? ", avx512_vnni" : ""),
                (supports_sha() ? ", sha" : ""),
                (supports_fma() ? ", fma" : ""),
-               (supports_vbmi2() ? ", vbmi2" : ""),
-               (supports_vaes() ? ", vaes" : ""),
-               (supports_vnni() ? ", vnni" : ""));
+               (supports_clflush() ? ", clflush" : ""),
+               (supports_clflushopt() ? ", clflushopt" : ""),
+               (supports_clwb() ? ", clwb" : ""));
+
+  assert(res > 0, "not enough temporary space allocated"); // increase 'buf' size
+
   _features_string = os::strdup(buf);
 
   // UseSSE is set to the smaller of what hardware supports and what
   // the command line requires.  I.e., you cannot set UseSSE to 2 on
   // older Pentiums which do not support it.
@@ -1831,9 +1857,12 @@
   VM_Version_StubGenerator g(&c);
   get_cpu_info_stub = CAST_TO_FN_PTR(get_cpu_info_stub_t,
                                      g.generate_get_cpu_info());
 
   get_processor_features();
+
+  LP64_ONLY(Assembler::precompute_instructions();)
+
   if (cpu_family() > 4) { // it supports CPUID
     check_virtualizations();
   }
 }
