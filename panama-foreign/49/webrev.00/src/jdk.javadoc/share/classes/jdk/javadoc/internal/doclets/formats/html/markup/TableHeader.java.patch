diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/TableHeader.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/TableHeader.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/TableHeader.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/TableHeader.java
@@ -23,30 +23,32 @@
  * questions.
  */
 
 package jdk.javadoc.internal.doclets.formats.html.markup;
 
+import java.io.IOException;
+import java.io.Writer;
 import java.util.Arrays;
 import java.util.List;
 import java.util.stream.Collectors;
 
 import jdk.javadoc.internal.doclets.formats.html.Contents;
 import jdk.javadoc.internal.doclets.toolkit.Content;
 
 /**
- * A row header for an HTML table.
+ * A row of header cells for an HTML table.
  *
  * The header contains a list of {@code <th>} cells, providing the column headers.
  * The attribute {@code scope="col"} is automatically added to each header cell.
  * In addition, a series of style class names can be specified, to be applied one per cell.
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
  */
-public class TableHeader {
+public class TableHeader extends Content {
 
     /**
      * The content to be put in each of the {@code <th>} cells in the header row.
      */
     private final List<Content> cellContents;
@@ -110,15 +112,32 @@
         }
         this.styles = styles;
         return this;
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     * @implSpec This implementation always returns {@code false}.
+     *
+     * @return {@code false}
+     */
+    @Override
+    public boolean isEmpty() {
+        return false;
+    }
+
+    @Override
+    public boolean write(Writer out, boolean atNewline) throws IOException {
+        return toContent().write(out, atNewline);
+    }
+
     /**
      * Converts this header to a {@link Content} object, for use in an {@link HtmlTree}.
      * @return a Content object
      */
-    public Content toContent() {
+    private Content toContent() {
         String scope = "col";
         Content tr = new HtmlTree(HtmlTag.TR);
         int i = 0;
         for (Content cellContent : cellContents) {
             HtmlStyle style = (styles != null) ? styles.get(i)
