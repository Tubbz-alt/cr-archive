diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java
@@ -23,10 +23,12 @@
  * questions.
  */
 
 package jdk.javadoc.internal.doclets.formats.html.markup;
 
+import java.io.IOException;
+import java.io.Writer;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -39,12 +41,11 @@
 import javax.lang.model.element.Element;
 
 import jdk.javadoc.internal.doclets.toolkit.Content;
 
 /**
- * A builder for HTML tables, such as the summary tables for various
- * types of element.
+ * An HTML table, such as the summary tables for various kinds of element.
  *
  * <p>The table should be used in three phases:
  * <ol>
  * <li>Configuration: the overall characteristics of the table should be specified
  * <li>Population: the content for the cells in each row should be added
@@ -56,11 +57,11 @@
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
  */
-public class Table {
+public class Table extends Content {
     private final HtmlStyle tableStyle;
     private Content caption;
     private Map<String, Predicate<Element>> tabMap;
     private String defaultTab;
     private Set<String> tabs;
@@ -205,11 +206,11 @@
      * Sets the styles used for {@code <tr>} tags, to give a "striped" appearance.
      * The defaults are currently {@code rowColor} and {@code altColor}.
      *
      * @param evenRowStyle  the style to use for even-numbered rows
      * @param oddRowStyle   the style to use for odd-numbered rows
-     * @return
+     * @return this object
      */
     public Table setStripedStyles(HtmlStyle evenRowStyle, HtmlStyle oddRowStyle) {
         stripedStyles = Arrays.asList(evenRowStyle, oddRowStyle);
         return this;
     }
@@ -286,11 +287,11 @@
         this.id = id;
         return this;
     }
 
     /**
-     * Add a row of data to the table.
+     * Adds a row of data to the table.
      * Each item of content should be suitable for use as the content of a
      * {@code <th>} or {@code <td>} cell.
      * This method should not be used when the table has tabs: use a method
      * that takes an {@code Element} parameter instead.
      *
@@ -299,11 +300,11 @@
     public void addRow(Content... contents) {
         addRow(null, Arrays.asList(contents));
     }
 
     /**
-     * Add a row of data to the table.
+     * Adds a row of data to the table.
      * Each item of content should be suitable for use as the content of a
      * {@code <th>} or {@code <td> cell}.
      * This method should not be used when the table has tabs: use a method
      * that takes an {@code element} parameter instead.
      *
@@ -312,18 +313,18 @@
     public void addRow(List<Content> contents) {
         addRow(null, contents);
     }
 
     /**
-     * Add a row of data to the table.
+     * Adds a row of data to the table.
      * Each item of content should be suitable for use as the content of a
      * {@code <th>} or {@code <td>} cell.
      *
      * If tabs have been added to the table, the specified element will be used
      * to determine whether the row should be displayed when any particular tab
      * is selected, using the predicate specified when the tab was
-     * {@link #add(String,Predicate) added}.
+     * {@link #addTab(String,Predicate) added}.
      *
      * @param element the element
      * @param contents the contents for the row
      * @throws NullPointerException if tabs have previously been added to the table
      *      and {@code element} is null
@@ -331,18 +332,18 @@
     public void addRow(Element element, Content... contents) {
         addRow(element, Arrays.asList(contents));
     }
 
     /**
-     * Add a row of data to the table.
+     * Adds a row of data to the table.
      * Each item of content should be suitable for use as the content of a
      * {@code <th>} or {@code <td>} cell.
      *
      * If tabs have been added to the table, the specified element will be used
      * to determine whether the row should be displayed when any particular tab
      * is selected, using the predicate specified when the tab was
-     * {@link #add(String,Predicate) added}.
+     * {@link #addTab(String,Predicate) added}.
      *
      * @param element the element
      * @param contents the contents for the row
      * @throws NullPointerException if tabs have previously been added to the table
      *      and {@code element} is null
@@ -397,16 +398,21 @@
      */
     public boolean isEmpty() {
         return bodyRows.isEmpty();
     }
 
+    @Override
+    public boolean write(Writer out, boolean atNewline) throws IOException {
+        return toContent().write(out, atNewline);
+    }
+
     /**
      * Returns the HTML for the table.
      *
      * @return the HTML
      */
-    public Content toContent() {
+    private Content toContent() {
         HtmlTree mainDiv = new HtmlTree(HtmlTag.DIV);
         mainDiv.setStyle(tableStyle);
         if (id != null) {
             mainDiv.setId(id);
         }
@@ -462,11 +468,11 @@
     }
 
     private Content getTableBody() {
         ContentBuilder tableContent = new ContentBuilder();
         Content thead = new HtmlTree(HtmlTag.THEAD);
-        thead.add(header.toContent());
+        thead.add(header);
         tableContent.add(thead);
         Content tbody = new HtmlTree(HtmlTag.TBODY);
         bodyRows.forEach(tbody::add);
         tableContent.add(tbody);
         return tableContent;
@@ -541,10 +547,10 @@
         }
 
     }
 
     private HtmlTree getCaption(Content title) {
-        return new HtmlTree(HtmlTag.CAPTION,
-                HtmlTree.SPAN(title),
-                HtmlTree.SPAN(tabEnd, Entity.NO_BREAK_SPACE));
+        return new HtmlTree(HtmlTag.CAPTION)
+                .add(HtmlTree.SPAN(title))
+                .add(HtmlTree.SPAN(tabEnd, Entity.NO_BREAK_SPACE));
     }
 }
