diff a/src/java.base/share/native/libjli/args.c b/src/java.base/share/native/libjli/args.c
--- a/src/java.base/share/native/libjli/args.c
+++ b/src/java.base/share/native/libjli/args.c
@@ -216,15 +216,16 @@
             continue;
         // ignore comment to EOL
         } else if (pctx->state == IN_COMMENT) {
             while (ch != '\n' && ch != '\r') {
                 nextc++;
-                if (nextc > eob) {
+                if (nextc >= eob) {
                     return NULL;
                 }
                 ch = *nextc;
             }
+            anchor = nextc + 1;
             pctx->state = FIND_NEXT;
             continue;
         }
 
         assert(pctx->state != IN_ESCAPE);
@@ -256,10 +257,11 @@
             case '#':
                 if (pctx->state == IN_QUOTE) {
                     continue;
                 }
                 pctx->state = IN_COMMENT;
+                anchor = nextc + 1;
                 break;
             case '\\':
                 if (pctx->state != IN_QUOTE) {
                     continue;
                 }
@@ -291,13 +293,16 @@
                 break;
         }
     }
 
     assert(nextc == eob);
-    if (anchor != nextc) {
-        // not yet return until end of stream, we have part of a token.
-        JLI_List_addSubstring(pctx->parts, anchor, nextc - anchor);
+    // Only need partial token, not comment or whitespaces
+    if (pctx->state == IN_TOKEN || pctx->state == IN_QUOTE) {
+        if (anchor < nextc) {
+            // not yet return until end of stream, we have part of a token.
+            JLI_List_addSubstring(pctx->parts, anchor, nextc - anchor);
+        }
     }
     return NULL;
 }
 
 static JLI_List readArgFile(FILE *file) {
