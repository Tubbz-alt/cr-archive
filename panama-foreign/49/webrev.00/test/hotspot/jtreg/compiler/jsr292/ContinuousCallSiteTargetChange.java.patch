diff a/test/hotspot/jtreg/compiler/jsr292/ContinuousCallSiteTargetChange.java b/test/hotspot/jtreg/compiler/jsr292/ContinuousCallSiteTargetChange.java
--- a/test/hotspot/jtreg/compiler/jsr292/ContinuousCallSiteTargetChange.java
+++ b/test/hotspot/jtreg/compiler/jsr292/ContinuousCallSiteTargetChange.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020 Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -23,18 +23,22 @@
 
 /**
  * @test
  * @library /test/lib /
  *
+ * @build sun.hotspot.WhiteBox
+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox
+ *                                sun.hotspot.WhiteBox$WhiteBoxPermission
  * @run driver compiler.jsr292.ContinuousCallSiteTargetChange
  */
 
 package compiler.jsr292;
 
 import jdk.test.lib.Asserts;
 import jdk.test.lib.process.OutputAnalyzer;
 import jdk.test.lib.process.ProcessTools;
+import sun.hotspot.WhiteBox;
 
 import java.lang.invoke.CallSite;
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
@@ -69,19 +73,21 @@
 
     }
 
     static void testServer(Class<?> test, String... args) throws Exception {
         List<String> extraArgsList = new ArrayList<>(
-                List.of("-server", "-XX:-TieredCompilation"));
+                List.of("-server", "-XX:-TieredCompilation", "-Xbootclasspath/a:.",
+                        "-XX:+UnlockDiagnosticVMOptions", "-XX:+WhiteBoxAPI"));
         extraArgsList.addAll(Arrays.asList(args));
 
         runTest(test, extraArgsList.toArray(new String[extraArgsList.size()]));
     }
 
     static void testClient(Class<?> test, String... args) throws Exception {
         List<String> extraArgsList = new ArrayList<>(
-                List.of("-client", "-XX:+TieredCompilation", "-XX:TieredStopAtLevel=1"));
+                List.of("-client", "-XX:+TieredCompilation", "-XX:TieredStopAtLevel=1",
+                        "-Xbootclasspath/a:.", "-XX:+UnlockDiagnosticVMOptions", "-XX:+WhiteBoxAPI"));
         extraArgsList.addAll(Arrays.asList(args));
 
         runTest(test, extraArgsList.toArray(new String[extraArgsList.size()]));
     }
 
@@ -161,11 +167,13 @@
             }
         }
 
         public static void main(String[] args) throws Throwable {
             int iterations = Integer.parseInt(args[0]);
+            WhiteBox whiteBox = WhiteBox.getWhiteBox();
             for (int i = 0; i < iterations; i++) {
                 iteration();
+                whiteBox.forceNMethodSweep();
             }
         }
     }
 }
