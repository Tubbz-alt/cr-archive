diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
@@ -42,10 +42,14 @@
     private static final Unsafe UNSAFE = Unsafe.getUnsafe();
 
     private final MemorySegmentImpl segment;
     private final long offset;
 
+    public MemoryAddressImpl(MemorySegmentImpl segment) {
+        this(segment, 0);
+    }
+
     public MemoryAddressImpl(MemorySegmentImpl segment, long offset) {
         this.segment = Objects.requireNonNull(segment);
         this.offset = offset;
     }
 
@@ -130,12 +134,20 @@
     }
 
     // helper methods
 
     public static long addressof(MemoryAddress address) {
-        MemoryAddressImpl addressImpl = (MemoryAddressImpl) address;
+        MemoryAddressImpl addressImpl = (MemoryAddressImpl)address;
         if (addressImpl.unsafeGetBase() != null) {
             throw new IllegalStateException("Heap address!");
         }
         return addressImpl.unsafeGetOffset();
     }
+
+    public static MemoryAddress ofLongUnchecked(long value) {
+        return ofLongUnchecked(value, Long.MAX_VALUE);
+    }
+
+    public static MemoryAddress ofLongUnchecked(long value, long byteSize) {
+        return new MemoryAddressImpl((MemorySegmentImpl)Utils.makeNativeSegmentUnchecked(value, byteSize), 0);
+    }
 }
