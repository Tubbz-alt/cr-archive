diff a/test/jdk/java/foreign/TestTypeAccess.java b/test/jdk/java/foreign/TestTypeAccess.java
--- a/test/jdk/java/foreign/TestTypeAccess.java
+++ b/test/jdk/java/foreign/TestTypeAccess.java
@@ -25,21 +25,26 @@
 /*
  * @test
  * @run testng TestTypeAccess
  */
 
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.MemoryLayouts;
 import org.testng.annotations.*;
 
 import java.lang.invoke.VarHandle;
 import java.lang.invoke.WrongMethodTypeException;
+import java.nio.ByteOrder;
 
 public class TestTypeAccess {
 
     static final VarHandle INT_HANDLE = MemoryLayouts.JAVA_INT.varHandle(int.class);
 
+    static final VarHandle ADDR_HANDLE = MemoryHandles.varHandle(MemoryAddress .class, ByteOrder.nativeOrder());
+
     @Test(expectedExceptions=ClassCastException.class)
     public void testMemoryAddressCoordinateAsString() {
         try (MemorySegment s = MemorySegment.allocateNative(8)) {
             int v = (int)INT_HANDLE.get("string");
         }
@@ -49,6 +54,35 @@
     public void testMemoryCoordinatePrimitive() {
         try (MemorySegment s = MemorySegment.allocateNative(8)) {
             int v = (int)INT_HANDLE.get(1);
         }
     }
+
+    @Test(expectedExceptions=ClassCastException.class)
+    public void testMemoryAddressValueGetAsString() {
+        try (MemorySegment s = MemorySegment.allocateNative(8)) {
+            String address = (String)ADDR_HANDLE.get(s.baseAddress());
+        }
+    }
+
+    @Test(expectedExceptions=ClassCastException.class)
+    public void testMemoryAddressValueSetAsString() {
+        try (MemorySegment s = MemorySegment.allocateNative(8)) {
+            ADDR_HANDLE.set(s.baseAddress(), "string");
+        }
+    }
+
+    @Test(expectedExceptions=WrongMethodTypeException.class)
+    public void testMemoryAddressValueGetAsPrimitive() {
+        try (MemorySegment s = MemorySegment.allocateNative(8)) {
+            int address = (int)ADDR_HANDLE.get(s.baseAddress());
+        }
+    }
+
+    @Test(expectedExceptions=WrongMethodTypeException.class)
+    public void testMemoryAddressValueSetAsPrimitive() {
+        try (MemorySegment s = MemorySegment.allocateNative(8)) {
+            ADDR_HANDLE.set(s.baseAddress(), 1);
+        }
+    }
+
 }
