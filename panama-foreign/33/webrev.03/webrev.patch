diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
@@ -24,17 +24,18 @@
  *
  */
 
 package jdk.incubator.jextract;
 
-import jdk.incubator.foreign.MemoryLayout;
-import jdk.internal.jextract.impl.DeclarationImpl;
-
+import java.lang.constant.Constable;
 import java.util.List;
 import java.util.Optional;
+import java.util.Set;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
+import jdk.incubator.foreign.MemoryLayout;
+import jdk.internal.jextract.impl.DeclarationImpl;
 
 /**
  * Instances of this class are used to model declaration elements in the foreign language.
  * All declarations have a position (see {@link Position}) and a name. Instances of this class
  * support the <em>visitor</em> pattern (see {@link Declaration#accept(Visitor, Object)} and
@@ -52,10 +53,40 @@
      * The name associated with this declaration.
      * @return The name associated with this declaration.
      */
     String name();
 
+    /**
+     * Get a declaration with specified attribute.
+     * Set the values to the specified attribute while other attributes remains unchanged. If the specified attribute
+     * already exist, the new values are replacing the old ones. By not specifying any value, the attribute will become
+     * empty as {@link #getAttribute(String) getAttribute(name).isEmpty()} will return true.
+     * @param name The attribute name
+     * @param values More attribute values
+     * @return the Declaration with attributes
+     */
+    Declaration withAttribute(String name, Constable... values);
+
+    /**
+     * Get a declaration without current attributes
+     * @return the Declatation without any attributes
+     */
+    Declaration stripAttributes();
+
+    /**
+     * The values of the specified attribute.
+     * @param name The attribute to retrieve
+     * @return The list of values associate with this attribute
+     */
+    Optional<List<Constable>> getAttribute(String name);
+
+    /**
+     * The attributes associated with this declaration
+     * @return The attributes associated with this declaration
+     */
+    Set<String> attributeNames();
+
     /**
      * Entry point for visiting declaration instances.
      * @param visitor the declaration visitor.
      * @param data optional data to be passed to the visitor.
      * @param <R> the visitor's return type.
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Cursor.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Cursor.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Cursor.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Cursor.java
@@ -57,10 +57,12 @@
 
     public boolean isDefinition() {
         return Index_h.clang_isCursorDefinition(cursor) != 0;
     }
 
+    public boolean isAttribute() { return Index_h.clang_isAttribute(kind) != 0; }
+
     public boolean isAnonymousStruct() {
         return Index_h.clang_Cursor_isAnonymousRecordDecl(cursor) != 0;
     }
 
     public boolean isMacroFunctionLike() {
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
@@ -24,26 +24,32 @@
  *
  */
 
 package jdk.internal.jextract.impl;
 
+import java.lang.constant.Constable;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import java.util.Set;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Position;
 import jdk.incubator.jextract.Type;
 
-import java.util.List;
-import java.util.Optional;
-
 public abstract class DeclarationImpl implements Declaration {
 
     private final String name;
     private final Position pos;
+    private final Optional<Map<String, List<Constable>>> attributes;
 
-    public DeclarationImpl(String name, Position pos) {
+    public DeclarationImpl(String name, Position pos, Map<String, List<Constable>> attrs) {
         this.name = name;
         this.pos = pos;
+        this.attributes = Optional.ofNullable(attrs);
     }
 
     public String toString() {
         return new PrettyPrinter().print(this);
     }
@@ -55,29 +61,51 @@
     @Override
     public Position pos() {
         return pos;
     }
 
+    @Override
+    public Optional<List<Constable>> getAttribute(String name) {
+        return attributes.map(attrs -> attrs.get(name));
+    }
+
+    @Override
+    public Set<String> attributeNames() { return Collections.unmodifiableSet(
+            attributes.map(Map::keySet).orElse(Collections.emptySet()));
+    }
+
+    @Override
+    public Declaration withAttribute(String name, Constable... values) {
+        if (values == null || values.length == 0) {
+            return withAttributes(null);
+        }
+        var attrs = attributes.map(HashMap::new).orElseGet(HashMap::new);
+        attrs.put(name, List.of(values));
+        return withAttributes(attrs);
+    }
+
+    abstract protected Declaration withAttributes(Map<String, List<Constable>> attrs);
+
     public static class VariableImpl extends DeclarationImpl implements Declaration.Variable {
 
         final Variable.Kind kind;
         final Type type;
         final Optional<MemoryLayout> layout;
 
-        public VariableImpl(Type type, Variable.Kind kind, String name, Position pos) {
-            this(type, LayoutUtils.getLayout(type), kind, name, pos);
+        private VariableImpl(Type type, Optional<MemoryLayout> layout, Variable.Kind kind, String name, Position pos, Map<String, List<Constable>> attrs) {
+            super(name, pos, attrs);
+            this.kind = kind;
+            this.type = type;
+            this.layout = layout;
         }
 
-        public VariableImpl(Type type, MemoryLayout layout, Variable.Kind kind, String name, Position pos) {
-            this(type, Optional.of(layout), kind, name, pos);
+        public VariableImpl(Type type, Variable.Kind kind, String name, Position pos) {
+            this(type, LayoutUtils.getLayout(type), kind, name, pos, null);
         }
 
-        private VariableImpl(Type type, Optional<MemoryLayout> layout, Variable.Kind kind, String name, Position pos) {
-            super(name, pos);
-            this.kind = kind;
-            this.type = type;
-            this.layout = layout;
+        public VariableImpl(Type type, MemoryLayout layout, Variable.Kind kind, String name, Position pos) {
+            this(type, Optional.of(layout), kind, name, pos, null);
         }
 
         @Override
         public Kind kind() {
             return kind;
@@ -95,19 +123,33 @@
 
         @Override
         public Optional<MemoryLayout> layout() {
             return layout;
         }
+
+        @Override
+        public Variable withAttributes(Map<String, List<Constable>> attrs) {
+            return new VariableImpl(type, layout, kind, name(), pos(), attrs);
+        }
+
+        @Override
+        public Variable stripAttributes() {
+            return new VariableImpl(type, layout, kind, name(), pos(), null);
+        }
     }
 
     public static class FunctionImpl extends DeclarationImpl implements Declaration.Function {
 
         final List<Variable> params;
         final Type.Function type;
 
         public FunctionImpl(Type.Function type, List<Variable> params, String name, Position pos) {
-            super(name, pos);
+            this(type, params, name, pos, null);
+        }
+
+        public FunctionImpl(Type.Function type, List<Variable> params, String name, Position pos, Map<String, List<Constable>> attrs) {
+            super(name, pos, attrs);
             this.params = params;
             this.type = type;
         }
 
         @Override
@@ -122,28 +164,39 @@
 
         @Override
         public Type.Function type() {
             return type;
         }
+
+        @Override
+        public Function withAttributes(Map<String, List<Constable>> attrs) {
+            return new FunctionImpl(type, params, name(), pos(), attrs);
+        }
+
+        @Override
+        public Function stripAttributes() {
+            return new FunctionImpl(type, params, name(), pos(), null);
+        }
     }
 
     public static class ScopedImpl extends DeclarationImpl implements Declaration.Scoped {
 
         private final Scoped.Kind kind;
         private final List<Declaration> declarations;
         private final Optional<MemoryLayout> optLayout;
 
         public ScopedImpl(Kind kind, MemoryLayout layout, List<Declaration> declarations, String name, Position pos) {
-            this(kind, Optional.of(layout), declarations, name, pos);
+            this(kind, Optional.of(layout), declarations, name, pos, null);
         }
 
         public ScopedImpl(Kind kind, List<Declaration> declarations, String name, Position pos) {
-            this(kind, Optional.empty(), declarations, name, pos);
+            this(kind, Optional.empty(), declarations, name, pos, null);
         }
 
-        ScopedImpl(Kind kind, Optional<MemoryLayout> optLayout, List<Declaration> declarations, String name, Position pos) {
-            super(name, pos);
+        ScopedImpl(Kind kind, Optional<MemoryLayout> optLayout, List<Declaration> declarations,
+                String name, Position pos, Map<String, List<Constable>> attrs) {
+            super(name, pos, attrs);
             this.kind = kind;
             this.declarations = declarations;
             this.optLayout = optLayout;
         }
 
@@ -164,19 +217,33 @@
 
         @Override
         public Kind kind() {
             return kind;
         }
+
+        @Override
+        public Scoped withAttributes(Map<String, List<Constable>> attrs) {
+            return new ScopedImpl(kind, optLayout, declarations, name(), pos(), attrs);
+        }
+
+        @Override
+        public Scoped stripAttributes() {
+            return new ScopedImpl(kind, optLayout, declarations, name(), pos(), null);
+        }
     }
 
     public static class ConstantImpl extends DeclarationImpl implements Declaration.Constant {
 
         final Object value;
         final Type type;
 
         public ConstantImpl(Type type, Object value, String name, Position pos) {
-            super(name, pos);
+            this(type, value, name, pos, null);
+        }
+
+        public ConstantImpl(Type type, Object value, String name, Position pos, Map<String, List<Constable>> attrs) {
+            super(name, pos, attrs);
             this.value = value;
             this.type = type;
         }
 
         @Override
@@ -191,7 +258,17 @@
 
         @Override
         public Type type() {
             return type;
         }
+
+        @Override
+        public Constant withAttributes(Map<String, List<Constable>> attrs) {
+            return new ConstantImpl(type, value, name(), pos(), attrs);
+        }
+
+        @Override
+        public Constant stripAttributes() {
+            return new ConstantImpl(type, value, name(), pos(), null);
+        }
     }
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java
@@ -24,17 +24,18 @@
  *
  */
 
 package jdk.internal.jextract.impl;
 
+import java.lang.constant.Constable;
+import java.util.Set;
+import java.util.stream.Collectors;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Position;
 import jdk.incubator.jextract.Type;
 
-import java.util.stream.Collectors;
-
 class PrettyPrinter implements Declaration.Visitor<Void, Void> {
 
     int align = 0;
 
     void incr() {
@@ -49,20 +50,40 @@
         builder.append("                                                                                           ".substring(0, align));
     }
     
     StringBuilder builder = new StringBuilder();
 
+    private void getAttributes(Declaration decl) {
+        Set<String> attrs = decl.attributeNames();
+        if (attrs.isEmpty()) {
+            return;
+        }
+        incr();
+        indent();
+        for (String k: attrs) {
+            builder.append("Attr: ");
+            builder.append(k);
+            builder.append(" -> [");
+            builder.append(decl.getAttribute(k).get().stream()
+                .map(Constable::toString)
+                .collect(Collectors.joining(", ")));
+            builder.append("]\n");
+        }
+        decr();
+    }
+
     public String print(Declaration decl) {
         decl.accept(this, null);
         return builder.toString();
     }
 
     @Override
     public Void visitScoped(Declaration.Scoped d, Void aVoid) {
         indent();
         builder.append("Scoped: " + d.kind() + " " + d.name() + d.layout().map(l -> " layout = " + l).orElse(""));
         builder.append("\n");
+        getAttributes(d);
         incr();
         d.members().forEach(m -> m.accept(this, null));
         decr();
         return null;
     }
@@ -70,10 +91,11 @@
     @Override
     public Void visitFunction(Declaration.Function d, Void aVoid) {
         indent();
         builder.append("Function: " + d.name() + " type = " + d.type().accept(typeVisitor, null));
         builder.append("\n");
+        getAttributes(d);
         incr();
         d.parameters().forEach(m -> m.accept(this, null));
         decr();
         return null;
     }
@@ -81,18 +103,20 @@
     @Override
     public Void visitVariable(Declaration.Variable d, Void aVoid) {
         indent();
         builder.append("Variable: " + d.kind() + " " + d.name() + " type = " + d.type().accept(typeVisitor, null) + ", layout = " + d.layout());
         builder.append("\n");
+        getAttributes(d);
         return null;
     }
 
     @Override
     public Void visitConstant(Declaration.Constant d, Void aVoid) {
         indent();
         builder.append("Constant: " + d.name() + " " + d.value() + " type = " + d.type().accept(typeVisitor, null));
         builder.append("\n");
+        getAttributes(d);
         return null;
     }
 
     private static Type.Visitor<String, Void> typeVisitor = new Type.Visitor<>() {
         @Override
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
@@ -23,10 +23,11 @@
  *  questions.
  *
  */
 package jdk.internal.jextract.impl;
 
+import java.lang.constant.Constable;
 import java.nio.ByteOrder;
 import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.ConcurrentModificationException;
 import java.util.HashMap;
@@ -55,11 +56,11 @@
 
     public void freeze() {
         typeMaker.resolveTypeReferences();
     }
 
-    private <T extends Declaration> T checkCache(Cursor c, Class<T> clazz, Supplier<Declaration> factory) {
+    private Declaration checkCache(Cursor c, Supplier<Declaration> factory) {
         // The supplier function may lead to adding some other type, which will cause CME using computeIfAbsent.
         // This implementation relax the constraint a bit only check for same key
         Declaration rv;
         if (treeCache.containsKey(c)) {
             rv = treeCache.get(c);
@@ -67,11 +68,11 @@
             rv = factory.get();
             if (null != rv && treeCache.put(c, rv) != null) {
                 throw new ConcurrentModificationException();
             }
         }
-        return clazz.cast(rv);
+        return rv;
     }
 
     interface ScopedFactoryLayout {
         Declaration.Scoped make(Position pos, String name, MemoryLayout layout, Declaration... decls);
     }
@@ -82,12 +83,28 @@
 
     interface VarFactoryNoLayout {
         Declaration.Variable make(Position pos, String name, Type type);
     }
 
+    Map<String, List<Constable>> collectAttributes(Cursor c) {
+        return c.children().filter(Cursor::isAttribute)
+                .collect(Collectors.groupingBy(
+                        attr -> attr.kind().name(),
+                        Collectors.mapping(Cursor::spelling, Collectors.toList())
+                ));
+    }
+
     public Declaration createTree(Cursor c) {
-        switch (Objects.requireNonNull(c).kind()) {
+        Objects.requireNonNull(c);
+        return checkCache(c, () -> {
+            var rv = (DeclarationImpl) createTreeInternal(c);
+            return (rv == null) ? null : rv.withAttributes(collectAttributes(c));
+        });
+    }
+
+    private Declaration createTreeInternal(Cursor c) {
+        switch (c.kind()) {
             case EnumDecl:
                 return createScoped(c, Declaration.Scoped.Kind.ENUM, Declaration::enum_, Declaration::enum_);
             case EnumConstantDecl:
                 return createEnumConstant(c);
             case FieldDecl:
@@ -153,98 +170,98 @@
         }
 
         public Cursor cursor() {
             return cursor;
         }
+
+        @Override
+        public String toString() {
+            return PrettyPrinter.position(this);
+        }
     }
 
     public Declaration.Function createFunction(Cursor c) {
         checkCursor(c, CursorKind.FunctionDecl);
         List<Declaration.Variable> params = new ArrayList<>();
         for (int i = 0 ; i < c.numberOfArgs() ; i++) {
             params.add((Declaration.Variable)createTree(c.getArgument(i)));
         }
-        return checkCache(c, Declaration.Function.class,
-                ()->Declaration.function(toPos(c), c.spelling(), (Type.Function)toType(c), params.toArray(new Declaration.Variable[0])));
+        return Declaration.function(toPos(c), c.spelling(), (Type.Function)toType(c),
+                params.toArray(new Declaration.Variable[0]));
     }
 
     public Declaration.Constant createMacro(Cursor c, Optional<MacroParserImpl.Macro> macro) {
         checkCursorAny(c, CursorKind.MacroDefinition);
         if (macro.isEmpty()) {
             return null;
         } else {
             MacroParserImpl.Macro parsedMacro = macro.get();
-            return checkCache(c, Declaration.Constant.class,
-                    ()->Declaration.constant(toPos(c), c.spelling(), parsedMacro.value, parsedMacro.type()));
+            return Declaration.constant(toPos(c), c.spelling(), parsedMacro.value, parsedMacro.type());
         }
     }
 
     public Declaration.Constant createEnumConstant(Cursor c) {
-        return checkCache(c, Declaration.Constant.class,
-                ()->Declaration.constant(toPos(c), c.spelling(), c.getEnumConstantValue(), typeMaker.makeType(c.type())));
+        return Declaration.constant(toPos(c), c.spelling(), c.getEnumConstantValue(), typeMaker.makeType(c.type()));
     }
 
     public Declaration.Scoped createHeader(Cursor c, List<Declaration> decls) {
-        return checkCache(c, Declaration.Scoped.class,
-                ()->Declaration.toplevel(toPos(c), filterNestedDeclarations(decls).toArray(new Declaration[0])));
+        return Declaration.toplevel(toPos(c), filterNestedDeclarations(decls).toArray(new Declaration[0]));
     }
 
     public Declaration.Scoped createScoped(Cursor c, Declaration.Scoped.Kind scopeKind, ScopedFactoryLayout factoryLayout, ScopedFactoryNoLayout factoryNoLayout) {
         List<Declaration> decls = filterNestedDeclarations(c.children()
                 .map(this::createTree).collect(Collectors.toList()));
-        return checkCache(c, Declaration.Scoped.class, () -> {
-            if (c.isDefinition()) {
-                //just a declaration AND definition, we have a layout
-                MemoryLayout layout = LayoutUtils.getLayout(c.type());
-                List<Declaration> adaptedDecls = layout instanceof GroupLayout ?
-                        collectBitfields(layout, decls) :
-                        decls;
-                return factoryLayout.make(toPos(c), c.spelling(), layout, adaptedDecls.toArray(new Declaration[0]));
-            } else {
-                //just a declaration
-                if (scopeKind == Declaration.Scoped.Kind.STRUCT ||
-                        scopeKind == Declaration.Scoped.Kind.UNION ||
-                        scopeKind == Declaration.Scoped.Kind.ENUM ||
-                        scopeKind == Declaration.Scoped.Kind.CLASS) {
-                    //if there's a real definition somewhere else, skip this redundant declaration
-                    if (!c.getDefinition().isInvalid()) {
-                        return null;
-                    }
+        if (c.isDefinition()) {
+            //just a declaration AND definition, we have a layout
+            MemoryLayout layout = LayoutUtils.getLayout(c.type());
+            List<Declaration> adaptedDecls = layout instanceof GroupLayout ?
+                    collectBitfields(layout, decls) :
+                    decls;
+            return factoryLayout.make(toPos(c), c.spelling(), layout, adaptedDecls.toArray(new Declaration[0]));
+        } else {
+            //just a declaration
+            if (scopeKind == Declaration.Scoped.Kind.STRUCT ||
+                    scopeKind == Declaration.Scoped.Kind.UNION ||
+                    scopeKind == Declaration.Scoped.Kind.ENUM ||
+                    scopeKind == Declaration.Scoped.Kind.CLASS) {
+                //if there's a real definition somewhere else, skip this redundant declaration
+                if (!c.getDefinition().isInvalid()) {
+                    return null;
                 }
-                return factoryNoLayout.make(toPos(c), c.spelling(), decls.toArray(new Declaration[0]));
             }
-        });
+            return factoryNoLayout.make(toPos(c), c.spelling(), decls.toArray(new Declaration[0]));
+        }
     }
 
     private List<Declaration> filterNestedDeclarations(List<Declaration> declarations) {
         return declarations.stream()
                 .filter(Objects::nonNull)
-                .filter(d -> !d.name().isEmpty() || ((CursorPosition)d.pos()).cursor.isAnonymousStruct())
+                .filter(d -> !d.name().isEmpty() ||
+                    ((CursorPosition)d.pos()).cursor.isAnonymousStruct() ||
+                    // Somehow clang isAnonymous() not apply to enum
+                    ((CursorPosition)d.pos()).cursor.kind() == CursorKind.EnumDecl)
                 .collect(Collectors.toList());
     }
 
     private Declaration.Scoped createTypedef(Cursor c) {
         Optional<Cursor> decl = c.children().findFirst();
         if (decl.isPresent() && decl.get().isDefinition() && decl.get().spelling().isEmpty()) {
             Declaration def = createTree(decl.get());
             if (def instanceof Declaration.Scoped) {
-                return checkCache(c, Declaration.Scoped.class,
-                        () -> Declaration.typedef(toPos(c), c.spelling(), def));
+                return Declaration.typedef(toPos(c), c.spelling(), def);
             }
         }
         return null;
     }
 
     private Declaration.Variable createVar(Declaration.Variable.Kind kind, Cursor c, VarFactoryNoLayout varFactory) {
         checkCursorAny(c, CursorKind.VarDecl, CursorKind.FieldDecl, CursorKind.ParmDecl);
         if (c.isBitField()) {
-            return checkCache(c, Declaration.Variable.class,
-                    () -> Declaration.bitfield(toPos(c), c.spelling(), toType(c),
-                    MemoryLayout.ofValueBits(c.getBitFieldWidth(), ByteOrder.nativeOrder())));
+            return Declaration.bitfield(toPos(c), c.spelling(), toType(c),
+                    MemoryLayout.ofValueBits(c.getBitFieldWidth(), ByteOrder.nativeOrder()));
         } else {
-            return checkCache(c, Declaration.Variable.class,
-                    ()->varFactory.make(toPos(c), c.spelling(), toType(c)));
+            return varFactory.make(toPos(c), c.spelling(), toType(c));
         }
     }
 
     private List<Declaration> collectBitfields(MemoryLayout layout, List<Declaration> declarations) {
         List<Declaration> newDecls = new ArrayList<>();
diff a/test/jdk/java/jextract/JextractApiTestBase.java b/test/jdk/java/jextract/JextractApiTestBase.java
--- a/test/jdk/java/jextract/JextractApiTestBase.java
+++ b/test/jdk/java/jextract/JextractApiTestBase.java
@@ -34,10 +34,14 @@
 
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.fail;
 
 public class JextractApiTestBase {
+    static final boolean isMacOSX =
+            System.getProperty("os.name", "unknown").contains("OS X");
+    static final boolean isWindows =
+            System.getProperty("os.name", "unknown").startsWith("Windows");
 
     public static  Declaration.Scoped parse(String headerFilename, String... parseOptions) {
         Path header = Paths.get(System.getProperty("test.src.path", "."), headerFilename);
         var task = JextractTask.newTask(false, header);
         Path builtinInc = Paths.get(System.getProperty("java.home"), "conf", "jextract");
@@ -68,12 +72,12 @@
     public static Declaration.Variable checkField(Declaration.Scoped record, String name, Type type) {
         Declaration.Variable global = checkConstant(record, name, type);
         assertEquals(global.kind(), Declaration.Variable.Kind.FIELD);
         return global;
     }
-    public static Declaration.Function checkFunction(Declaration.Scoped toplevel, String name, Type ret, Type... params) {
-        Declaration.Function function = findDecl(toplevel, name, Declaration.Function.class);
+
+    public static void checkFunction(Declaration.Function function, Type ret, Type... params) {
         assertTypeEquals(ret, function.type().returnType());
         assertEquals(function.parameters().size(), params.length);
         for (int i = 0 ; i < params.length ; i++) {
             assertTypeEquals(params[i], function.type().argumentTypes().get(i));
             Type paramType = function.parameters().get(i).type();
@@ -81,10 +85,15 @@
                 assertTypeEquals(params[i], Type.pointer(((Type.Array) paramType).elementType()));
             } else {
                 assertTypeEquals(params[i], function.parameters().get(i).type());
             }
         }
+    }
+
+    public static Declaration.Function checkFunction(Declaration.Scoped toplevel,String name , Type ret, Type... params) {
+        Declaration.Function function = findDecl(toplevel, name, Declaration.Function.class);
+        checkFunction(function, ret,params);
         return function;
     }
 
     public static Declaration.Constant checkConstant(Declaration.Scoped toplevel, String name, Type type, Object value) {
         Declaration.Constant constant = findDecl(toplevel, name, Declaration.Constant.class);
diff a/test/jdk/java/jextract/TestAttributes.java b/test/jdk/java/jextract/TestAttributes.java
--- /dev/null
+++ b/test/jdk/java/jextract/TestAttributes.java
@@ -0,0 +1,164 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ *
+ */
+
+/*
+ * @test
+ * @bug 8239808
+ * @build JextractApiTestBase
+ * @run testng TestAttributes
+ */
+
+import java.lang.constant.Constable;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+import jdk.incubator.foreign.MemoryLayouts;
+import jdk.incubator.jextract.Declaration;
+import jdk.incubator.jextract.Type;
+import org.testng.annotations.Test;
+
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+
+public class TestAttributes extends JextractApiTestBase {
+    private final static Type C_INT = Type.primitive(Type.Primitive.Kind.Int, MemoryLayouts.C_INT);
+    private final static String ASMLABEL = "AsmLabelAttr";
+
+    private void validateAsmLabel(Declaration d, boolean isAdd) {
+        var attrs = d.getAttribute(ASMLABEL).get();
+        String value = isMacOSX ? "_" : "";
+        value += d.name();
+        value += isAdd ? "A" : "B";
+        assertEquals(attrs.get(0), value);
+    }
+
+    private void validateHeader(Declaration.Scoped top, boolean isAdd) {
+        if (isWindows) {
+            // TODO: add Windows validation
+            // Simply dump declaration for now
+            System.out.println(top);
+            return;
+        }
+        var list = top.members().stream()
+                .filter(byNameAndType("foo", Declaration.Variable.class))
+                .map(Declaration.Variable.class::cast)
+                .collect(Collectors.toList());
+        assertEquals(list.size(), 3);
+        int hasAttrs = 0;
+        for (Declaration.Variable foo: list) {
+            assertEquals(Declaration.Variable.Kind.GLOBAL, foo.kind());
+            assertTypeEquals(C_INT, foo.type());
+            if (foo.getAttribute(ASMLABEL).isPresent()) {
+                hasAttrs++;
+                validateAsmLabel(foo, isAdd);
+            }
+        }
+        assertEquals(hasAttrs, 2);
+        var listFunc = top.members().stream()
+                .filter(byNameAndType("func", Declaration.Function.class))
+                .map(Declaration.Function.class::cast)
+                .collect(Collectors.toList());
+        assertEquals(listFunc.size(), 3);
+        hasAttrs = 0;
+        for (Declaration.Function func: listFunc) {
+            checkFunction(func, C_INT, C_INT, C_INT);
+            if (func.getAttribute(ASMLABEL).isPresent()) {
+                hasAttrs++;
+                validateAsmLabel(func, isAdd);
+            }
+        }
+        assertEquals(hasAttrs, 2);
+    }
+
+    @Test
+    public void testA() {
+        Declaration.Scoped d = parse("libAsmSymbol.h", "-DADD");
+        validateHeader(d, true);
+    }
+
+    @Test
+    public void testB() {
+        Declaration.Scoped d = parse("libAsmSymbol.h");
+        validateHeader(d, false);
+    }
+
+    private static  Constable getSingleValue(Declaration d, String name) {
+        List<Constable> values = d.getAttribute(name).get();
+        assertEquals(1, values.size());
+        return values.get(0);
+    }
+
+    @Test
+    public void testAddAttribute() {
+        final String ts = "timestamp";
+        Declaration.Scoped d = parse("libAsmSymbol.h");
+        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME);
+        Declaration withAttrs = d.withAttribute("header", d.name())
+                .withAttribute(ts, timestamp);
+
+        assertEquals(getSingleValue(withAttrs, "header"), d.name());
+        assertEquals(getSingleValue(withAttrs, ts), timestamp);
+
+        String timestamp2 = LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
+        Declaration withNewAttrs = withAttrs.withAttribute(ts, timestamp2);
+        assertEquals(getSingleValue(withNewAttrs, ts), timestamp2);
+
+        // Make sure original Declaration is not altered
+        assertEquals(getSingleValue(withAttrs, ts), timestamp);
+
+        // Add more value to same attribute
+        withNewAttrs = withAttrs.withAttribute(ts, Stream.concat(
+                withAttrs.getAttribute(ts).map(List::stream).orElse(Stream.empty()),
+                Stream.of(timestamp2)
+            ).toArray(Constable[]::new));
+        assertEquals(withNewAttrs.getAttribute(ts).get(), List.of(timestamp, timestamp2));
+        assertEquals(getSingleValue(withNewAttrs,"header"), d.name());
+
+        // Remove attribute
+        withAttrs = withNewAttrs.withAttribute(ts);
+        assertTrue(withAttrs.getAttribute(ts).isEmpty());
+
+        // Strip attribute
+        withNewAttrs = withNewAttrs.stripAttributes();
+        assertTrue(withNewAttrs.attributeNames().isEmpty());
+    }
+
+    @Test
+    public void replaceFunctionSymbol() {
+        Declaration.Scoped d = parse("libAsmSymbol.h", "-DADD");
+        validateHeader(d, true);
+
+        var members = d.members().stream()
+            .map(m -> m.getAttribute(ASMLABEL)
+                    .map(attr -> m.withAttribute(ASMLABEL, attr.get(0).toString().replace('A', 'B')))
+                    .orElse(m))
+            .toArray(Declaration[]::new);
+        Declaration.Scoped patched = Declaration.toplevel(d.pos(), members);
+        validateHeader(patched, false);
+    }
+}
diff a/test/jdk/java/jextract/libAsmSymbol.h b/test/jdk/java/jextract/libAsmSymbol.h
--- /dev/null
+++ b/test/jdk/java/jextract/libAsmSymbol.h
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+#ifdef _WIN64
+  #ifdef IMPL
+    #define EXPORT __declspec(dllexport)
+  #else
+    #define EXPORT __declspec(dllimport)
+  #endif // IMPL
+#else
+#define EXPORT
+#endif //_WIN64
+
+#ifdef _WIN32
+// Windows doesn't really support asm symbol, this is similar approach for C code to
+// achieve similar, but this won't work with Panama until we support such Macro
+#ifdef ADD
+#define foo fooA
+#define func funcA
+#else
+#define foo fooB
+#define func funcB
+#endif //ADD
+#define ALIAS(sym)
+
+#elif __APPLE__
+#define ALIAS(sym) __asm("_" #sym)
+#else
+#define ALIAS(sym) __asm__(#sym)
+#endif // _WIN32
+
+// We do 3 declarations to make sure we will pick up alias no matter the sequence of encounter
+// Without alias
+EXPORT extern int foo;
+EXPORT int func (int x, int y);
+
+// With alias
+#ifdef ADD
+
+EXPORT extern int foo ALIAS(fooA);
+EXPORT int func (int x, int y) ALIAS(funcA);
+
+#else
+
+EXPORT extern int foo ALIAS(fooB);
+EXPORT int func (int x, int y) ALIAS(funcB);
+
+#endif // ADD
+
+// Without alias again
+EXPORT extern int foo;
+EXPORT int func (int x, int y);
+
