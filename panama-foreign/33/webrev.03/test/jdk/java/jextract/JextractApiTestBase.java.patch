diff a/test/jdk/java/jextract/JextractApiTestBase.java b/test/jdk/java/jextract/JextractApiTestBase.java
--- a/test/jdk/java/jextract/JextractApiTestBase.java
+++ b/test/jdk/java/jextract/JextractApiTestBase.java
@@ -34,10 +34,14 @@
 
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.fail;
 
 public class JextractApiTestBase {
+    static final boolean isMacOSX =
+            System.getProperty("os.name", "unknown").contains("OS X");
+    static final boolean isWindows =
+            System.getProperty("os.name", "unknown").startsWith("Windows");
 
     public static  Declaration.Scoped parse(String headerFilename, String... parseOptions) {
         Path header = Paths.get(System.getProperty("test.src.path", "."), headerFilename);
         var task = JextractTask.newTask(false, header);
         Path builtinInc = Paths.get(System.getProperty("java.home"), "conf", "jextract");
@@ -68,12 +72,12 @@
     public static Declaration.Variable checkField(Declaration.Scoped record, String name, Type type) {
         Declaration.Variable global = checkConstant(record, name, type);
         assertEquals(global.kind(), Declaration.Variable.Kind.FIELD);
         return global;
     }
-    public static Declaration.Function checkFunction(Declaration.Scoped toplevel, String name, Type ret, Type... params) {
-        Declaration.Function function = findDecl(toplevel, name, Declaration.Function.class);
+
+    public static void checkFunction(Declaration.Function function, Type ret, Type... params) {
         assertTypeEquals(ret, function.type().returnType());
         assertEquals(function.parameters().size(), params.length);
         for (int i = 0 ; i < params.length ; i++) {
             assertTypeEquals(params[i], function.type().argumentTypes().get(i));
             Type paramType = function.parameters().get(i).type();
@@ -81,10 +85,15 @@
                 assertTypeEquals(params[i], Type.pointer(((Type.Array) paramType).elementType()));
             } else {
                 assertTypeEquals(params[i], function.parameters().get(i).type());
             }
         }
+    }
+
+    public static Declaration.Function checkFunction(Declaration.Scoped toplevel,String name , Type ret, Type... params) {
+        Declaration.Function function = findDecl(toplevel, name, Declaration.Function.class);
+        checkFunction(function, ret,params);
         return function;
     }
 
     public static Declaration.Constant checkConstant(Declaration.Scoped toplevel, String name, Type type, Object value) {
         Declaration.Constant constant = findDecl(toplevel, name, Declaration.Constant.class);
