diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
@@ -79,14 +79,10 @@
 
     interface ScopedFactoryNoLayout {
         Declaration.Scoped make(Position pos, String name, Declaration... decls);
     }
 
-    interface VarFactoryNoLayout {
-        Declaration.Variable make(Position pos, String name, Type type, Map<String, List<ConstantDesc>> attrs);
-    }
-
     Map<String, List<ConstantDesc>> collectAttributes(Cursor c) {
         return c.children().filter(Cursor::isAttribute)
                 .collect(Collectors.groupingBy(
                         attr -> attr.kind().name(),
                         Collectors.mapping(Cursor::spelling, Collectors.toList())
@@ -101,24 +97,24 @@
                 return createScoped(c, Declaration.Scoped.Kind.ENUM, Declaration::enum_, Declaration::enum_);
             case EnumConstantDecl:
                 return createEnumConstant(c);
             case FieldDecl:
                 return createVar(c.isBitField() ?
-                        Declaration.Variable.Kind.BITFIELD : Declaration.Variable.Kind.FIELD, c, Declaration::field, attrs);
+                        Declaration.Variable.Kind.BITFIELD : Declaration.Variable.Kind.FIELD, c, attrs);
             case ParmDecl:
-                return createVar(Declaration.Variable.Kind.PARAMETER, c, Declaration::parameter, attrs);
+                return createVar(Declaration.Variable.Kind.PARAMETER, c, attrs);
             case FunctionDecl:
                 return createFunction(c, attrs);
             case StructDecl:
                 return createScoped(c, Declaration.Scoped.Kind.STRUCT, Declaration::struct, Declaration::struct);
             case UnionDecl:
                 return createScoped(c, Declaration.Scoped.Kind.UNION, Declaration::union, Declaration::union);
             case TypedefDecl: {
                 return createTypedef(c);
             }
             case VarDecl:
-                return createVar(Declaration.Variable.Kind.GLOBAL, c, Declaration::globalVariable, attrs);
+                return createVar(Declaration.Variable.Kind.GLOBAL, c, attrs);
             default:
                 return null;
         }
     }
 
@@ -176,11 +172,11 @@
         List<Declaration.Variable> params = new ArrayList<>();
         for (int i = 0 ; i < c.numberOfArgs() ; i++) {
             params.add((Declaration.Variable)createTree(c.getArgument(i)));
         }
         return checkCache(c, Declaration.Function.class,
-                ()->Declaration.function(toPos(c), c.spelling(), attrs, (Type.Function)toType(c), params.toArray(new Declaration.Variable[0])));
+                () -> new DeclarationImpl.FunctionImpl((Type.Function)toType(c), params, c.spelling(), toPos(c), attrs));
     }
 
     public Declaration.Constant createMacro(Cursor c, Optional<MacroParserImpl.Macro> macro) {
         checkCursorAny(c, CursorKind.MacroDefinition);
         if (macro.isEmpty()) {
@@ -249,19 +245,21 @@
             }
         }
         return null;
     }
 
-    private Declaration.Variable createVar(Declaration.Variable.Kind kind, Cursor c, VarFactoryNoLayout varFactory, Map<String, List<ConstantDesc>> attrs) {
+    private Declaration.Variable createVar(Declaration.Variable.Kind kind, Cursor c, Map<String, List<ConstantDesc>> attrs) {
         checkCursorAny(c, CursorKind.VarDecl, CursorKind.FieldDecl, CursorKind.ParmDecl);
         if (c.isBitField()) {
             return checkCache(c, Declaration.Variable.class,
-                    () -> Declaration.bitfield(toPos(c), c.spelling(), toType(c),
-                    MemoryLayout.ofValueBits(c.getBitFieldWidth(), ByteOrder.nativeOrder()), attrs));
+                    () -> DeclarationImpl.VariableImpl.of(toType(c),
+                            MemoryLayout.ofValueBits(c.getBitFieldWidth(), ByteOrder.nativeOrder()),
+                            Declaration.Variable.Kind.BITFIELD,
+                            c.spelling(), toPos(c), attrs));
         } else {
             return checkCache(c, Declaration.Variable.class,
-                    ()->varFactory.make(toPos(c), c.spelling(), toType(c), attrs));
+                    () -> DeclarationImpl.VariableImpl.of(toType(c), kind, c.spelling(), toPos(c), attrs));
         }
     }
 
     private List<Declaration> collectBitfields(MemoryLayout layout, List<Declaration> declarations) {
         List<Declaration> newDecls = new ArrayList<>();
