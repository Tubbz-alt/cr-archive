diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
@@ -26,11 +26,10 @@
 
 package jdk.incubator.jextract;
 
 import java.lang.constant.ConstantDesc;
 import java.util.List;
-import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import jdk.incubator.foreign.MemoryLayout;
@@ -65,11 +64,11 @@
 
     /**
      * The attributes associated with this declaration
      * @return The attributes associated with this declaration
      */
-    Set<String> availableAttributes();
+    Set<String> attributeNames();
 
     /**
      * Entry point for visiting declaration instances.
      * @param visitor the declaration visitor.
      * @param data optional data to be passed to the visitor.
@@ -290,46 +289,46 @@
      * @param pos the global variable declaration position.
      * @param name the global variable declaration name.
      * @param type the global variable declaration type.
      * @return a new global variable declaration with given name and type.
      */
-    static Declaration.Variable globalVariable(Position pos, String name, Type type, Map<String, List<ConstantDesc>> attrs) {
-        return new DeclarationImpl.VariableImpl(type, Declaration.Variable.Kind.GLOBAL, name, pos, attrs);
+    static Declaration.Variable globalVariable(Position pos, String name, Type type) {
+        return new DeclarationImpl.VariableImpl(type, Declaration.Variable.Kind.GLOBAL, name, pos);
     }
 
     /**
      * Creates a new field declaration with given name and type.
      * @param pos the field declaration position.
      * @param name the field declaration name.
      * @param type the field declaration type.
      * @return a new field declaration with given name and type.
      */
-    static Declaration.Variable field(Position pos, String name, Type type, Map<String, List<ConstantDesc>> attrs) {
-        return new DeclarationImpl.VariableImpl(type, Declaration.Variable.Kind.FIELD, name, pos, attrs);
+    static Declaration.Variable field(Position pos, String name, Type type) {
+        return new DeclarationImpl.VariableImpl(type, Declaration.Variable.Kind.FIELD, name, pos);
     }
 
     /**
      * Creates a new bitfield declaration with given name, type and layout.
      * @param pos the bitfield declaration position.
      * @param name the bitfield declaration name.
      * @param type the bitfield declaration type.
      * @param layout the bitfield declaration layout.
      * @return a new bitfield declaration with given name, type and layout.
      */
-    static Declaration.Variable bitfield(Position pos, String name, Type type, MemoryLayout layout, Map<String, List<ConstantDesc>> attrs) {
-        return new DeclarationImpl.VariableImpl(type, layout, Declaration.Variable.Kind.BITFIELD, name, pos, attrs);
+    static Declaration.Variable bitfield(Position pos, String name, Type type, MemoryLayout layout) {
+        return new DeclarationImpl.VariableImpl(type, layout, Declaration.Variable.Kind.BITFIELD, name, pos);
     }
 
     /**
      * Creates a new parameter declaration with given name and type.
      * @param pos the parameter declaration position.
      * @param name the parameter declaration name.
      * @param type the parameter declaration type.
      * @return a new parameter declaration with given name and type.
      */
-    static Declaration.Variable parameter(Position pos, String name, Type type, Map<String, List<ConstantDesc>> attrs) {
-        return new DeclarationImpl.VariableImpl(type, Declaration.Variable.Kind.PARAMETER, name, pos, attrs);
+    static Declaration.Variable parameter(Position pos, String name, Type type) {
+        return new DeclarationImpl.VariableImpl(type, Declaration.Variable.Kind.PARAMETER, name, pos);
     }
 
     /**
      * Creates a new toplevel declaration with given member declarations.
      * @param pos the toplevel declaration position.
@@ -472,13 +471,13 @@
      * @param name the function declaration name.
      * @param type the function declaration type.
      * @param params the function declaration parameter declarations.
      * @return a new function declaration with given name, type and parameter declarations.
      */
-    static Declaration.Function function(Position pos, String name, Map<String, List<ConstantDesc>> attrs, Type.Function type, Declaration.Variable... params) {
+    static Declaration.Function function(Position pos, String name, Type.Function type, Declaration.Variable... params) {
         List<Variable> paramList = Stream.of(params).collect(Collectors.toList());
-        return new DeclarationImpl.FunctionImpl(type, paramList, name, pos, attrs);
+        return new DeclarationImpl.FunctionImpl(type, paramList, name, pos);
     }
 
     /**
      * Creates a new typedef declaration with given name and declared type.
      * @param pos the typedef declaration position.
