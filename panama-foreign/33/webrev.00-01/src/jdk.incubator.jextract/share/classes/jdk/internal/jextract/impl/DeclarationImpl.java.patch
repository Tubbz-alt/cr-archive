diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
@@ -66,33 +66,41 @@
     public Optional<List<ConstantDesc>> getAttribute(String name) {
         return Optional.ofNullable(attributes.get(name));
     }
 
     @Override
-    public Set<String> availableAttributes() { return Collections.unmodifiableSet(attributes.keySet()); }
+    public Set<String> attributeNames() { return Collections.unmodifiableSet(attributes.keySet()); }
 
     public static class VariableImpl extends DeclarationImpl implements Declaration.Variable {
 
         final Variable.Kind kind;
         final Type type;
         final Optional<MemoryLayout> layout;
 
-        public VariableImpl(Type type, Variable.Kind kind, String name, Position pos, Map<String, List<ConstantDesc>> attrs) {
-            this(type, LayoutUtils.getLayout(type), kind, name, pos, attrs);
-        }
-
-        public VariableImpl(Type type, MemoryLayout layout, Variable.Kind kind, String name, Position pos, Map<String, List<ConstantDesc>> attrs) {
-            this(type, Optional.of(layout), kind, name, pos, attrs);
-        }
-
         private VariableImpl(Type type, Optional<MemoryLayout> layout, Variable.Kind kind, String name, Position pos, Map<String, List<ConstantDesc>> attrs) {
             super(name, pos, attrs);
             this.kind = kind;
             this.type = type;
             this.layout = layout;
         }
 
+        public VariableImpl(Type type, Variable.Kind kind, String name, Position pos) {
+            this(type, LayoutUtils.getLayout(type), kind, name, pos, Collections.emptyMap());
+        }
+
+        public VariableImpl(Type type, MemoryLayout layout, Variable.Kind kind, String name, Position pos) {
+            this(type, Optional.of(layout), kind, name, pos, Collections.emptyMap());
+        }
+
+        public static VariableImpl of(Type type, Variable.Kind kind, String name, Position pos, Map<String, List<ConstantDesc>> attrs) {
+            return new VariableImpl(type, LayoutUtils.getLayout(type), kind, name, pos, attrs);
+        }
+
+        public static VariableImpl of(Type type, MemoryLayout layout, Variable.Kind kind, String name, Position pos, Map<String, List<ConstantDesc>> attrs) {
+            return new VariableImpl(type, Optional.of(layout), kind, name, pos, attrs);
+        }
+
         @Override
         public Kind kind() {
             return kind;
         }
 
@@ -115,10 +123,14 @@
     public static class FunctionImpl extends DeclarationImpl implements Declaration.Function {
 
         final List<Variable> params;
         final Type.Function type;
 
+        public FunctionImpl(Type.Function type, List<Variable> params, String name, Position pos) {
+            this(type, params, name, pos, Collections.emptyMap());
+        }
+
         public FunctionImpl(Type.Function type, List<Variable> params, String name, Position pos, Map<String, List<ConstantDesc>> attrs) {
             super(name, pos, attrs);
             this.params = params;
             this.type = type;
         }
