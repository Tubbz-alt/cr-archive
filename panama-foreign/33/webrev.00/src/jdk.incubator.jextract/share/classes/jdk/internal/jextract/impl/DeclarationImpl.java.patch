diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
@@ -24,26 +24,31 @@
  *
  */
 
 package jdk.internal.jextract.impl;
 
+import java.lang.constant.ConstantDesc;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import java.util.Set;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Position;
 import jdk.incubator.jextract.Type;
 
-import java.util.List;
-import java.util.Optional;
-
 public abstract class DeclarationImpl implements Declaration {
 
     private final String name;
     private final Position pos;
+    private final Map<String, List<ConstantDesc>> attributes;
 
-    public DeclarationImpl(String name, Position pos) {
+    public DeclarationImpl(String name, Position pos, Map<String, List<ConstantDesc>> attrs) {
         this.name = name;
         this.pos = pos;
+        this.attributes = attrs;
     }
 
     public String toString() {
         return new PrettyPrinter().print(this);
     }
@@ -55,26 +60,34 @@
     @Override
     public Position pos() {
         return pos;
     }
 
+    @Override
+    public Optional<List<ConstantDesc>> getAttribute(String name) {
+        return Optional.ofNullable(attributes.get(name));
+    }
+
+    @Override
+    public Set<String> availableAttributes() { return Collections.unmodifiableSet(attributes.keySet()); }
+
     public static class VariableImpl extends DeclarationImpl implements Declaration.Variable {
 
         final Variable.Kind kind;
         final Type type;
         final Optional<MemoryLayout> layout;
 
-        public VariableImpl(Type type, Variable.Kind kind, String name, Position pos) {
-            this(type, LayoutUtils.getLayout(type), kind, name, pos);
+        public VariableImpl(Type type, Variable.Kind kind, String name, Position pos, Map<String, List<ConstantDesc>> attrs) {
+            this(type, LayoutUtils.getLayout(type), kind, name, pos, attrs);
         }
 
-        public VariableImpl(Type type, MemoryLayout layout, Variable.Kind kind, String name, Position pos) {
-            this(type, Optional.of(layout), kind, name, pos);
+        public VariableImpl(Type type, MemoryLayout layout, Variable.Kind kind, String name, Position pos, Map<String, List<ConstantDesc>> attrs) {
+            this(type, Optional.of(layout), kind, name, pos, attrs);
         }
 
-        private VariableImpl(Type type, Optional<MemoryLayout> layout, Variable.Kind kind, String name, Position pos) {
-            super(name, pos);
+        private VariableImpl(Type type, Optional<MemoryLayout> layout, Variable.Kind kind, String name, Position pos, Map<String, List<ConstantDesc>> attrs) {
+            super(name, pos, attrs);
             this.kind = kind;
             this.type = type;
             this.layout = layout;
         }
 
@@ -102,12 +115,12 @@
     public static class FunctionImpl extends DeclarationImpl implements Declaration.Function {
 
         final List<Variable> params;
         final Type.Function type;
 
-        public FunctionImpl(Type.Function type, List<Variable> params, String name, Position pos) {
-            super(name, pos);
+        public FunctionImpl(Type.Function type, List<Variable> params, String name, Position pos, Map<String, List<ConstantDesc>> attrs) {
+            super(name, pos, attrs);
             this.params = params;
             this.type = type;
         }
 
         @Override
@@ -139,11 +152,11 @@
         public ScopedImpl(Kind kind, List<Declaration> declarations, String name, Position pos) {
             this(kind, Optional.empty(), declarations, name, pos);
         }
 
         ScopedImpl(Kind kind, Optional<MemoryLayout> optLayout, List<Declaration> declarations, String name, Position pos) {
-            super(name, pos);
+            super(name, pos, Collections.emptyMap());
             this.kind = kind;
             this.declarations = declarations;
             this.optLayout = optLayout;
         }
 
@@ -172,11 +185,15 @@
 
         final Object value;
         final Type type;
 
         public ConstantImpl(Type type, Object value, String name, Position pos) {
-            super(name, pos);
+            this(type, value, name, pos, Collections.emptyMap());
+        }
+
+        public ConstantImpl(Type type, Object value, String name, Position pos, Map<String, List<ConstantDesc>> attrs) {
+            super(name, pos, attrs);
             this.value = value;
             this.type = type;
         }
 
         @Override
