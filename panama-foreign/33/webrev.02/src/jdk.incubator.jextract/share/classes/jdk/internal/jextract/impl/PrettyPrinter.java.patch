diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java
@@ -24,17 +24,18 @@
  *
  */
 
 package jdk.internal.jextract.impl;
 
+import java.lang.constant.Constable;
+import java.util.Set;
+import java.util.stream.Collectors;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Position;
 import jdk.incubator.jextract.Type;
 
-import java.util.stream.Collectors;
-
 class PrettyPrinter implements Declaration.Visitor<Void, Void> {
 
     int align = 0;
 
     void incr() {
@@ -49,20 +50,40 @@
         builder.append("                                                                                           ".substring(0, align));
     }
     
     StringBuilder builder = new StringBuilder();
 
+    private void getAttributes(Declaration decl) {
+        Set<String> attrs = decl.attributeNames();
+        if (attrs.isEmpty()) {
+            return;
+        }
+        incr();
+        indent();
+        for (String k: attrs) {
+            builder.append("Attr: ");
+            builder.append(k);
+            builder.append(" -> [");
+            builder.append(decl.getAttribute(k).get().stream()
+                .map(Constable::toString)
+                .collect(Collectors.joining(", ")));
+            builder.append("]\n");
+        }
+        decr();
+    }
+
     public String print(Declaration decl) {
         decl.accept(this, null);
         return builder.toString();
     }
 
     @Override
     public Void visitScoped(Declaration.Scoped d, Void aVoid) {
         indent();
         builder.append("Scoped: " + d.kind() + " " + d.name() + d.layout().map(l -> " layout = " + l).orElse(""));
         builder.append("\n");
+        getAttributes(d);
         incr();
         d.members().forEach(m -> m.accept(this, null));
         decr();
         return null;
     }
@@ -70,10 +91,11 @@
     @Override
     public Void visitFunction(Declaration.Function d, Void aVoid) {
         indent();
         builder.append("Function: " + d.name() + " type = " + d.type().accept(typeVisitor, null));
         builder.append("\n");
+        getAttributes(d);
         incr();
         d.parameters().forEach(m -> m.accept(this, null));
         decr();
         return null;
     }
@@ -81,18 +103,20 @@
     @Override
     public Void visitVariable(Declaration.Variable d, Void aVoid) {
         indent();
         builder.append("Variable: " + d.kind() + " " + d.name() + " type = " + d.type().accept(typeVisitor, null) + ", layout = " + d.layout());
         builder.append("\n");
+        getAttributes(d);
         return null;
     }
 
     @Override
     public Void visitConstant(Declaration.Constant d, Void aVoid) {
         indent();
         builder.append("Constant: " + d.name() + " " + d.value() + " type = " + d.type().accept(typeVisitor, null));
         builder.append("\n");
+        getAttributes(d);
         return null;
     }
 
     private static Type.Visitor<String, Void> typeVisitor = new Type.Visitor<>() {
         @Override
