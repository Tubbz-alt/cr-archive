diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
@@ -28,17 +28,20 @@
 
 import jdk.internal.foreign.MemoryAddressImpl;
 import jdk.internal.foreign.MemorySegmentImpl;
 
 /**
- * A memory address encodes an offset within a given {@link MemorySegment}. Memory addresses are typically obtained
- * using the {@link MemorySegment#baseAddress()} method; such addresses can then be adjusted as required,
- * using {@link MemoryAddress#addOffset(long)}.
+ * A memory address models a reference into a memory location. Memory addresses are typically obtained using the
+ * {@link MemorySegment#baseAddress()} method; such addresses are said to be <em>checked</em>, and can be expressed
+ * as <em>offsets</em> into some underlying memory segment (see {@link #segment()} and {@link #segmentOffset()}).
+ * Since checked memory addresses feature both spatial and temporal bounds, these addresses can <em>safely</em> be
+ * dereferenced using a memory access var handle (see {@link MemoryHandles}).
  * <p>
- * A memory address is typically used as the first argument in a memory access var handle call, to perform some operation
- * on the underlying memory backing a given memory segment. Since a memory address is always associated with a memory segment,
- * such access operations are always subject to spatial and temporal checks as enforced by the address' owning memory region.
+ * If an address does not have any associated segment, it is said to be <em>unchecked</em>. Unchecked memory
+ * addresses do not feature known spatial or temporal bounds; as such, attempting a memory dereference operation
+ * using an unchecked memory address will result in a runtime exception. Unchecked addresses can be obtained
+ * e.g. by calling the {@link #ofLong(long)} method.
  * <p>
  * All implementations of this interface must be <a href="{@docRoot}/java.base/java/lang/doc-files/ValueBased.html">value-based</a>;
  * use of identity-sensitive operations (including reference equality ({@code ==}), identity hash code, or synchronization) on
  * instances of {@code MemoryAddress} may have unpredictable results and should be avoided. The {@code equals} method should
  * be used for comparisons.
@@ -59,25 +62,27 @@
      * @return a new memory address with given offset from current one.
      */
     MemoryAddress addOffset(long offset);
 
     /**
-     * Returns the offset of this memory address into the underlying segment.
-     * @return the offset of this memory address into the underlying segment.
+     * Returns the offset of this memory address into the underlying segment (if any).
+     * @return the offset of this memory address into the underlying segment (if any).
+     * @throws UnsupportedOperationException if no segment is associated with this memory address,
+     * e.g. if {@code segment() == null}.
      */
-    long offset();
+    long segmentOffset();
 
     /**
      * Returns the raw long value associated to this memory address.
      * @return The raw long value associated to this memory address.
      * @throws UnsupportedOperationException if this memory address is associated with an heap segment.
      */
     long toRawLongValue();
 
     /**
-     * Returns the memory segment this address belongs to.
-     * @return The memory segment this address belongs to.
+     * Returns the memory segment (if any) this address belongs to.
+     * @return The memory segment this address belongs to, or {@code null} if no such segment exists.
      */
     MemorySegment segment();
 
     /**
      * Reinterpret this address as an offset into the provided segment.
@@ -131,23 +136,23 @@
     static void copy(MemoryAddress src, MemoryAddress dst, long bytes) {
         MemoryAddressImpl.copy((MemoryAddressImpl)src, (MemoryAddressImpl)dst, bytes);
     }
 
     /**
-     * A native memory address instance modelling the {@code NULL} pointer. This address is backed by a memory segment
-     * which can be neither closed, nor dereferenced.
+     * The <em>unchecked</em> memory address instance modelling the {@code NULL} address. This address is <em>not</em> backed by
+     * a memory segment and hence it cannot be dereferenced.
      */
-    MemoryAddress NULL = MemorySegmentImpl.NOTHING.baseAddress();
+    MemoryAddress NULL = new MemoryAddressImpl( 0L);
 
     /**
-     * Obtain a new memory address instance from given long address. The returned address is backed by a memory segment
-     * which can be neither closed, nor dereferenced.
+     * Obtain a new <em>unchecked</em> memory address instance from given long address. The returned address is <em>not</em> backed by
+     * a memory segment and hence it cannot be dereferenced.
      * @param value the long address.
      * @return the new memory address instance.
      */
     static MemoryAddress ofLong(long value) {
         return value == 0 ?
                 NULL :
-                MemorySegmentImpl.NOTHING.baseAddress().addOffset(value);
+                new MemoryAddressImpl(value);
     }
 
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -149,11 +149,13 @@
  * Implementations of this interface are immutable and thread-safe.
  */
 public interface MemorySegment extends AutoCloseable {
 
     /**
-     * The base memory address associated with this memory segment.
+     * The base memory address associated with this memory segment. The returned address is
+     * a <em>checked</em> memory address and can therefore be used in derefrence operations
+     * (see {@link MemoryAddress}).
      * @return The base memory address.
      */
     MemoryAddress baseAddress();
 
     /**
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
@@ -42,10 +42,15 @@
     private static final Unsafe UNSAFE = Unsafe.getUnsafe();
 
     private final MemorySegmentImpl segment;
     private final long offset;
 
+    public MemoryAddressImpl(long offset) {
+        this.segment = MemorySegmentImpl.NOTHING;
+        this.offset = offset;
+    }
+
     public MemoryAddressImpl(MemorySegmentImpl segment, long offset) {
         this.segment = Objects.requireNonNull(segment);
         this.offset = offset;
     }
 
@@ -61,11 +66,14 @@
     }
 
     // MemoryAddress methods
 
     @Override
-    public long offset() {
+    public long segmentOffset() {
+        if (segment() == null) {
+            throw new UnsupportedOperationException("Address does not have a segment");
+        }
         return offset;
     }
 
     @Override
     public long toRawLongValue() {
@@ -75,11 +83,12 @@
         return unsafeGetOffset();
     }
 
     @Override
     public MemorySegment segment() {
-        return segment;
+        return segment != MemorySegmentImpl.NOTHING ?
+                segment : null;
     }
 
     @Override
     public MemoryAddress addOffset(long bytes) {
         return new MemoryAddressImpl(segment, offset + bytes);
diff a/test/jdk/java/foreign/TestAddressHandle.java b/test/jdk/java/foreign/TestAddressHandle.java
--- a/test/jdk/java/foreign/TestAddressHandle.java
+++ b/test/jdk/java/foreign/TestAddressHandle.java
@@ -63,13 +63,13 @@
     public void testAddressHandle(VarHandle addrHandle) {
         VarHandle longHandle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());
         try (MemorySegment segment = MemorySegment.allocateNative(8)) {
             longHandle.set(segment.baseAddress(), 42L);
             MemoryAddress address = (MemoryAddress)addrHandle.get(segment.baseAddress());
-            assertEquals(address.offset(), 42L);
+            assertEquals(address.toRawLongValue(), 42L);
             try {
-                longHandle.get(address); // check OOB
+                longHandle.get(address); // check that address cannot be de-referenced
                 fail();
             } catch (UnsupportedOperationException ex) {
                 assertTrue(true);
             }
             addrHandle.set(segment.baseAddress(), address.addOffset(1));
diff a/test/jdk/java/foreign/TestNative.java b/test/jdk/java/foreign/TestNative.java
--- a/test/jdk/java/foreign/TestNative.java
+++ b/test/jdk/java/foreign/TestNative.java
@@ -110,11 +110,11 @@
                                               BiFunction<MemoryAddress, Long, Object> handleExtractor,
                                               Function<ByteBuffer, Z> bufferFactory,
                                               BiFunction<Z, Integer, Object> nativeBufferExtractor,
                                               BiFunction<Long, Integer, Object> nativeRawExtractor) {
         long nelems = layout.elementCount().getAsLong();
-        ByteBuffer bb = base.segment().asSlice(base.offset(), (int)layout.byteSize()).asByteBuffer();
+        ByteBuffer bb = base.segment().asSlice(base.segmentOffset(), (int)layout.byteSize()).asByteBuffer();
         Z z = bufferFactory.apply(bb);
         for (long i = 0 ; i < nelems ; i++) {
             Object handleValue = handleExtractor.apply(base, i);
             Object bufferValue = nativeBufferExtractor.apply(z, (int)i);
             Object rawValue = nativeRawExtractor.apply(base.toRawLongValue(), (int)i);
diff a/test/jdk/java/foreign/TestSegments.java b/test/jdk/java/foreign/TestSegments.java
--- a/test/jdk/java/foreign/TestSegments.java
+++ b/test/jdk/java/foreign/TestSegments.java
@@ -43,13 +43,11 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.LongFunction;
 import java.util.stream.Stream;
 
-import static org.testng.Assert.assertEquals;
-import static org.testng.Assert.assertFalse;
-import static org.testng.Assert.assertTrue;
+import static org.testng.Assert.*;
 
 public class TestSegments {
 
     @Test(dataProvider = "badSizeAndAlignments", expectedExceptions = IllegalArgumentException.class)
     public void testBadAllocateAlign(long size, long align) {
@@ -111,10 +109,17 @@
                 assertTrue(ex.getMessage().contains("Required access mode"));
             }
         }
     }
 
+    @Test(expectedExceptions = UnsupportedOperationException.class)
+    public void testNothingSegmentOffset() {
+        MemoryAddress addr = MemoryAddress.ofLong(42);
+        assertNull(addr.segment());
+        addr.segmentOffset();
+    }
+
     @Test
     public void testSlices() {
         VarHandle byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)
                 .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());
         try (MemorySegment segment = MemorySegment.allocateNative(10)) {
@@ -124,11 +129,11 @@
             }
             long start = 0;
             MemoryAddress base = segment.baseAddress();
             MemoryAddress last = base.addOffset(10);
             while (!base.equals(last)) {
-                MemorySegment slice = segment.asSlice(base.offset(), 10 - start);
+                MemorySegment slice = segment.asSlice(base.segmentOffset(), 10 - start);
                 for (long i = start ; i < 10 ; i++) {
                     assertEquals(
                             byteHandle.get(segment.baseAddress(), i),
                             byteHandle.get(slice.baseAddress(), i - start)
                     );
