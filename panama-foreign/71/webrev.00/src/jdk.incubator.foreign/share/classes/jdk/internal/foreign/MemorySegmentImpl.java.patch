diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
@@ -26,21 +26,25 @@
 
 package jdk.internal.foreign;
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.SequenceLayout;
 import jdk.internal.access.JavaNioAccess;
 import jdk.internal.access.SharedSecrets;
+import jdk.internal.access.foreign.MemoryAddressProxy;
 import jdk.internal.access.foreign.MemorySegmentProxy;
 import jdk.internal.misc.Unsafe;
 import jdk.internal.vm.annotation.ForceInline;
 
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
 import java.util.Random;
+import java.util.Spliterator;
+import java.util.function.Consumer;
 
 /**
  * This class provides an immutable implementation for the {@code MemorySegment} interface. This class contains information
  * about the segment's spatial and temporal bounds, as well as the addressing coordinates (base + offset) which allows
  * unsafe access; each memory segment implementation is associated with an owner thread which is set at creation time.
@@ -70,10 +74,11 @@
 
     public MemorySegmentImpl(long min, Object base, long length, Thread owner, MemoryScope scope) {
         this(min, base, length, DEFAULT_MASK, owner, scope);
     }
 
+    @ForceInline
     private MemorySegmentImpl(long min, Object base, long length, int mask, Thread owner, MemoryScope scope) {
         this.length = length;
         this.mask = length > Integer.MAX_VALUE ? mask : (mask | SMALL);
         this.min = min;
         this.base = base;
@@ -82,21 +87,28 @@
     }
 
     // MemorySegment methods
 
     @Override
-    public final MemorySegmentImpl asSlice(long offset, long newSize) {
+    public final MemorySegment asSlice(long offset, long newSize) {
         checkBounds(offset, newSize);
+        return asSliceNoCheck(offset, newSize);
+    }
+
+    @ForceInline
+    private MemorySegmentImpl asSliceNoCheck(long offset, long newSize) {
         return new MemorySegmentImpl(min + offset, base, newSize, mask, owner, scope);
     }
 
     @Override
-    public MemorySegment acquire() {
-        if (!isSet(ACQUIRE)) {
-            throw unsupportedAccessMode(ACQUIRE);
+    public Spliterator<MemorySegment> spliterator(SequenceLayout sequenceLayout) {
+        checkValidState();
+        if (sequenceLayout.byteSize() != byteSize()) {
+            throw new IllegalArgumentException();
         }
-        return new MemorySegmentImpl(min, base, length, mask, Thread.currentThread(), scope.acquire());
+        return new SegmentSplitter(sequenceLayout.elementLayout().byteSize(), sequenceLayout.elementCount().getAsLong(),
+                this.withAccessModes(accessModes() & ~CLOSE));
     }
 
     @Override
     @ForceInline
     public final MemoryAddress baseAddress() {
@@ -122,10 +134,14 @@
     public final void close() {
         if (!isSet(CLOSE)) {
             throw unsupportedAccessMode(CLOSE);
         }
         checkValidState();
+        closeNoCheck();
+    }
+
+    private void closeNoCheck() {
         scope.close();
     }
 
     @Override
     public ByteBuffer asByteBuffer() {
@@ -149,11 +165,11 @@
         }
         return _bb;
     }
 
     @Override
-    public MemorySegment withAccessModes(int accessModes) {
+    public MemorySegmentImpl withAccessModes(int accessModes) {
         checkAccessModes(accessModes);
         if ((~accessModes() & accessModes) != 0) {
             throw new UnsupportedOperationException("Cannot acquire more access modes");
         }
         return new MemorySegmentImpl(min, base, length, accessModes, owner, scope);
@@ -206,10 +222,17 @@
         return "MemorySegment{ id=0x" + Long.toHexString(id()) + " limit: " + byteSize() + " }";
     }
 
     // Helper methods
 
+    private MemorySegmentImpl acquire() {
+        if (Thread.currentThread() != owner && !isSet(ACQUIRE)) {
+            throw unsupportedAccessMode(ACQUIRE);
+        }
+        return new MemorySegmentImpl(min, base, length, mask, Thread.currentThread(), scope.acquire());
+    }
+
     void checkRange(long offset, long length, boolean writeAccess) {
         checkValidState();
         if (writeAccess && !isSet(WRITE)) {
             throw unsupportedAccessMode(WRITE);
         } else if (!writeAccess && !isSet(READ)) {
@@ -283,6 +306,90 @@
     private int id() {
         //compute a stable and random id for this memory segment
         return Math.abs(Objects.hash(base, min, NONCE));
     }
 
+    static class SegmentSplitter implements Spliterator<MemorySegment> {
+        MemorySegmentImpl segment;
+        long elemCount;
+        final long elementSize;
+        long currentIndex;
+
+        SegmentSplitter(long elementSize, long elemCount, MemorySegmentImpl segment) {
+            this.segment = segment;
+            this.elementSize = elementSize;
+            this.elemCount = elemCount;
+        }
+
+        @Override
+        public SegmentSplitter trySplit() {
+            if (currentIndex == 0 && elemCount > 1) {
+                MemorySegmentImpl old = segment;
+                long rem = elemCount % 2;
+                elemCount  = elemCount / 2;
+                long lobound = elemCount * elementSize;
+                long hibound = lobound + (rem * elementSize);
+                segment = old.asSliceNoCheck(0, lobound);
+                return new SegmentSplitter(elementSize, elemCount + rem, old.asSliceNoCheck(lobound, hibound));
+            } else {
+                return null;
+            }
+        }
+
+        @Override
+        public boolean tryAdvance(Consumer<? super MemorySegment> action) {
+            Objects.requireNonNull(action);
+            if (currentIndex < elemCount) {
+                MemorySegmentImpl acquired = segment.acquire();
+                try {
+                    action.accept(acquired.asSliceNoCheck(currentIndex * elementSize, elementSize));
+                } finally {
+                    acquired.closeNoCheck();
+                }
+                currentIndex++;
+                if (currentIndex == elemCount) {
+                    segment = null;
+                }
+                return true;
+            } else {
+                return false;
+            }
+        }
+
+        @Override
+        public void forEachRemaining(Consumer<? super MemorySegment> action) {
+            Objects.requireNonNull(action);
+            if (currentIndex < elemCount) {
+                MemorySegmentImpl acquired = segment.acquire();
+                try {
+                    if (acquired.isSmall()) {
+                        int index = (int) currentIndex;
+                        int limit = (int) elemCount;
+                        int elemSize = (int) elementSize;
+                        for (; index < limit; index++) {
+                            action.accept(acquired.asSliceNoCheck(index * elemSize, elemSize));
+                        }
+                        currentIndex = index;
+                    } else {
+                        while (currentIndex < elemCount) {
+                            action.accept(acquired.asSliceNoCheck(currentIndex * elementSize, elementSize));
+                            currentIndex++;
+                        }
+                    }
+                } finally {
+                    acquired.closeNoCheck();
+                    segment = null;
+                }
+            }
+        }
+
+        @Override
+        public long estimateSize() {
+            return elemCount;
+        }
+
+        @Override
+        public int characteristics() {
+            return NONNULL | SUBSIZED | SIZED | IMMUTABLE;
+        }
+    }
 }
