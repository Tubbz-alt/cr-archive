diff a/test/jdk/java/foreign/TestSegments.java b/test/jdk/java/foreign/TestSegments.java
--- a/test/jdk/java/foreign/TestSegments.java
+++ b/test/jdk/java/foreign/TestSegments.java
@@ -35,11 +35,13 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.nio.ByteOrder;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Spliterator;
 import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
 import java.util.function.LongFunction;
 import java.util.stream.Stream;
 
 import org.testng.annotations.*;
@@ -208,10 +210,11 @@
         final Method method;
         final Object[] params;
 
         final static List<String> CONFINED_NAMES = List.of(
                 "close",
+                "spliterator",
                 "toByteArray"
         );
 
         public SegmentMember(Method method, Object[] params) {
             this.method = method;
@@ -266,11 +269,31 @@
 
     enum AccessActions {
         ACQUIRE(MemorySegment.ACQUIRE) {
             @Override
             void run(MemorySegment segment) {
-                segment.acquire();
+                Spliterator<MemorySegment> spliterator =
+                        segment.spliterator(MemoryLayout.ofSequence(segment.byteSize(), MemoryLayouts.JAVA_BYTE));
+                AtomicReference<RuntimeException> exception = new AtomicReference<>();
+                Runnable action = () -> {
+                    try {
+                        spliterator.tryAdvance(s -> { });
+                    } catch (RuntimeException e) {
+                        exception.set(e);
+                    }
+                };
+                Thread thread = new Thread(action);
+                thread.start();
+                try {
+                    thread.join();
+                } catch (InterruptedException ex) {
+                    throw new AssertionError(ex);
+                }
+                RuntimeException e = exception.get();
+                if (e != null) {
+                    throw e;
+                }
             }
         },
         CLOSE(MemorySegment.CLOSE) {
             @Override
             void run(MemorySegment segment) {
