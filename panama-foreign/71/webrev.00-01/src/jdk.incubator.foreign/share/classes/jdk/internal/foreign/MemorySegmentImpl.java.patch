diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
@@ -29,11 +29,10 @@
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
 import jdk.internal.access.JavaNioAccess;
 import jdk.internal.access.SharedSecrets;
-import jdk.internal.access.foreign.MemoryAddressProxy;
 import jdk.internal.access.foreign.MemorySegmentProxy;
 import jdk.internal.misc.Unsafe;
 import jdk.internal.vm.annotation.ForceInline;
 
 import java.nio.ByteBuffer;
@@ -321,17 +320,18 @@
         }
 
         @Override
         public SegmentSplitter trySplit() {
             if (currentIndex == 0 && elemCount > 1) {
-                MemorySegmentImpl old = segment;
+                MemorySegmentImpl parent = segment;
                 long rem = elemCount % 2;
-                elemCount  = elemCount / 2;
-                long lobound = elemCount * elementSize;
+                long split = elemCount / 2;
+                long lobound = split * elementSize;
                 long hibound = lobound + (rem * elementSize);
-                segment = old.asSliceNoCheck(0, lobound);
-                return new SegmentSplitter(elementSize, elemCount + rem, old.asSliceNoCheck(lobound, hibound));
+                elemCount  = split + rem;
+                segment = parent.asSliceNoCheck(lobound, hibound);
+                return new SegmentSplitter(elementSize, split, parent.asSliceNoCheck(0, lobound));
             } else {
                 return null;
             }
         }
 
@@ -342,14 +342,14 @@
                 MemorySegmentImpl acquired = segment.acquire();
                 try {
                     action.accept(acquired.asSliceNoCheck(currentIndex * elementSize, elementSize));
                 } finally {
                     acquired.closeNoCheck();
-                }
-                currentIndex++;
-                if (currentIndex == elemCount) {
-                    segment = null;
+                    currentIndex++;
+                    if (currentIndex == elemCount) {
+                        segment = null;
+                    }
                 }
                 return true;
             } else {
                 return false;
             }
@@ -366,19 +366,18 @@
                         int limit = (int) elemCount;
                         int elemSize = (int) elementSize;
                         for (; index < limit; index++) {
                             action.accept(acquired.asSliceNoCheck(index * elemSize, elemSize));
                         }
-                        currentIndex = index;
                     } else {
-                        while (currentIndex < elemCount) {
-                            action.accept(acquired.asSliceNoCheck(currentIndex * elementSize, elementSize));
-                            currentIndex++;
+                        for (long i = currentIndex ; i < elemCount ; i++) {
+                            action.accept(acquired.asSliceNoCheck(i * elementSize, elementSize));
                         }
                     }
                 } finally {
                     acquired.closeNoCheck();
+                    currentIndex = elemCount;
                     segment = null;
                 }
             }
         }
 
@@ -387,9 +386,9 @@
             return elemCount;
         }
 
         @Override
         public int characteristics() {
-            return NONNULL | SUBSIZED | SIZED | IMMUTABLE;
+            return NONNULL | SUBSIZED | SIZED | IMMUTABLE | ORDERED;
         }
     }
 }
