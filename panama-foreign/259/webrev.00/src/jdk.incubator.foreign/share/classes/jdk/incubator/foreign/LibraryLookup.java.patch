diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
@@ -34,14 +34,14 @@
 /**
  * A native library lookup. Exposes lookup operation for searching symbols, see {@link LibraryLookup#lookup(String)}.
  * A given native library remains loaded as long as there is at least one <em>live</em> library lookup instance referring
  * to it.
  * <p>
- * Memory address instances generated by a library lookup will contain a strong reference to the originating lookup object,
- * therefore preventing library unloading; in turn method handle instances obtained from
+ * All symbol instances (see {@link LibraryLookup.Symbol}) generated by a given library lookup object contain a strong reference
+ * to said lookup object, therefore preventing library unloading; in turn method handle instances obtained from
  * {@link ForeignLinker#downcallHandle(Addressable, MethodType, FunctionDescriptor)}) also maintain a strong reference
- * to the memory address parameter used for their construction. This means that there is always a strong reachability chain
+ * to the addressable parameter used for their construction. This means that there is always a strong reachability chain
  * from a native method handle to a lookup object (the one that was used to lookup the native library symbol the method handle
  * refers to); this is useful to prevent situations where a native library is unloaded in the middle of a native call.
  * <p>
  * To allow for a library to be unloaded, a client will have to discard any strong references it
  * maintains, directly, or indirectly to a lookup object associated with given library.
@@ -73,14 +73,13 @@
         @Override
         MemoryAddress address();
     }
 
     /**
-     * Lookups a symbol with given name in this library. The returned address has the same temporal bounds
-     * as this lookup object.
+     * Lookups a symbol with given name in this library. The returned symbol maintains a strong reference to this lookup object.
      * @param name the symbol name.
-     * @return the library symbol (if any)
+     * @return the library symbol (if any).
      * @throws NoSuchMethodException if no symbol with given name could be found.
      */
     Symbol lookup(String name) throws NoSuchMethodException;
 
     /**
