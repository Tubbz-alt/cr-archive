diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java
@@ -24,11 +24,15 @@
  *
  */
 
 package jdk.internal.jextract.impl;
 
+import jdk.incubator.jextract.Declaration;
+import jdk.incubator.jextract.JextractTask;
+import jdk.incubator.jextract.Position;
 import jdk.incubator.jextract.Type;
+import jdk.incubator.jextract.tool.Main;
 import jdk.internal.clang.Cursor;
 import jdk.internal.clang.CursorKind;
 import jdk.internal.clang.Diagnostic;
 import jdk.internal.clang.EvalResult;
 import jdk.internal.clang.Index;
@@ -37,21 +41,28 @@
 
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.Collection;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
 import java.util.Optional;
+import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-class MacroParserImpl {
+class MacroParserImpl implements JextractTask.ConstantParser {
 
     private Reparser reparser;
-    TypeMaker typeMaker = new TypeMaker(null);
+    TreeMaker treeMaker;
+    MacroTable macroTable;
 
-    public MacroParserImpl(TranslationUnit tu, Collection<String> args) {
+    public MacroParserImpl(TreeMaker treeMaker, TranslationUnit tu, Collection<String> args) {
         try {
             this.reparser = new ClangReparser(tu, args);
+            this.treeMaker = treeMaker;
+            this.macroTable = new MacroTable();
         } catch (IOException | Index.ParsingFailedException ex) {
             this.reparser = Reparser.DUMMY;
         }
     }
 
@@ -59,153 +70,39 @@
      * This method attempts to evaluate the macro. Evaluation occurs in two steps: first, an attempt is made
      * to see if the macro corresponds to a simple numeric constant. If so, the constant is parsed in Java directly.
      * If that is not possible (e.g. because the macro refers to other macro, or has a more complex grammar), fall
      * back to use clang evaluation support.
      */
-    Optional<Macro> eval(String macroName, String... tokens) {
-        if (tokens.length == 2) {
-            //check for fast path
-            Integer num = toNumber(tokens[1]);
-            if (num != null) {
-                return Optional.of(Macro.longMacro(Type.primitive(Type.Primitive.Kind.Int), num));
-            }
-        }
-        //slow path
-        try {
-            //step one, parse constant as is
-            MacroResult result = reparse(constantDecl(macroName, false));
-            if (!result.success()) {
-                //step two, attempt parsing pointer constant, by forcing it to uintptr_t
-                result = reparse(constantDecl(macroName, true)).asType(result.type);
-            }
-            return result.success() ?
-                    Optional.of((Macro)result) :
-                    Optional.empty();
-        } catch (BadMacroException ex) {
-            if (JextractTaskImpl.VERBOSE) {
-                System.err.println("Failed to handle macro " + macroName);
-                ex.printStackTrace(System.err);
+    @Override
+    public Optional<Declaration.Constant> parseConstant(Position pos, String name, String[] tokens) {
+        if (!(pos instanceof TreeMaker.CursorPosition)) {
+            return Optional.empty();
+        } else {
+            Cursor cursor = ((TreeMaker.CursorPosition)pos).cursor();
+            if (cursor.isMacroFunctionLike()) {
+                return Optional.empty();
+            } else if (tokens.length == 2) {
+                //check for fast path
+                Integer num = toNumber(tokens[1]);
+                if (num != null) {
+                    return Optional.of(treeMaker.createMacro(cursor, name, Type.primitive(Type.Primitive.Kind.Int), (long)num));
+                }
             }
+            macroTable.enterMacro(name, tokens, cursor);
             return Optional.empty();
         }
     }
 
-    MacroResult reparse(String snippet) {
-        MacroResult rv = reparser.reparse(snippet)
-                .filter(c -> c.kind() == CursorKind.VarDecl &&
-                        c.spelling().contains("jextract$"))
-                .map(c -> compute(c))
-                .findAny().get();
-        typeMaker.resolveTypeReferences();
-        return rv;
-    }
-
     private Integer toNumber(String str) {
         try {
             // Integer.decode supports '#' hex literals which is not valid in C.
             return str.length() > 0 && str.charAt(0) != '#'? Integer.decode(str) : null;
         } catch (NumberFormatException nfe) {
             return null;
         }
     }
 
-    String constantDecl(String macroName, boolean forcePtr) {
-        //we use __auto_type, so that clang will also do type inference for us
-        return (forcePtr) ?
-                "#include <stdint.h> \n __auto_type jextract$macro$ptr$" + macroName + " = (uintptr_t)" + macroName + ";" :
-                "__auto_type jextract$macro$" + macroName + " = " + macroName + ";";
-    }
-
-    MacroResult compute(Cursor decl) {
-        try (EvalResult result = decl.eval()) {
-            switch (result.getKind()) {
-                case Integral: {
-                    long value = result.getAsInt();
-                    return Macro.longMacro(typeMaker.makeType(decl.type()), value);
-                }
-                case FloatingPoint: {
-                    double value = result.getAsFloat();
-                    return Macro.doubleMacro(typeMaker.makeType(decl.type()), value);
-                }
-                case StrLiteral: {
-                    String value = result.getAsString();
-                    return Macro.stringMacro(typeMaker.makeType(decl.type()), value);
-                }
-                default:
-                    return new Failure(typeMaker.makeType(decl.type()));
-            }
-        }
-    }
-
-    static abstract class MacroResult {
-        private final Type type;
-
-        MacroResult(Type type) {
-            this.type = type;
-        }
-
-        public Type type() {
-            return type;
-        }
-
-        abstract boolean success();
-
-        abstract MacroResult asType(Type type);
-    }
-
-    static class Failure extends MacroResult {
-
-        public Failure(Type type) {
-            super(type);
-        }
-
-        @Override
-        boolean success() {
-            return false;
-        }
-
-        @Override
-        MacroResult asType(Type type) {
-            return new Failure(type);
-        }
-    }
-
-    public static class Macro extends MacroResult {
-        Object value;
-
-        private Macro(Type type, Object value) {
-            super(type);
-            this.value = value;
-        }
-
-        @Override
-        boolean success() {
-            return true;
-        }
-
-        public Object value() {
-            return value;
-        }
-
-        @Override
-        MacroResult asType(Type type) {
-            return new Macro(type, value);
-        }
-
-        static Macro longMacro(Type type, long value) {
-            return new Macro(type, value);
-        }
-
-        static Macro doubleMacro(Type type, double value) {
-            return new Macro(type, value);
-        }
-
-        static Macro stringMacro(Type type, String value) {
-            return new Macro(type, value);
-        }
-    }
-
     interface Reparser {
         Stream<Cursor> reparse(String snippet);
 
         Reparser DUMMY = s -> Stream.empty();
     }
@@ -213,11 +110,11 @@
     /**
      * This class allows client to reparse a snippet of code against a given set of include files.
      * For performance reasons, the set of includes (which comes from the jextract parser) is compiled
      * into a precompiled header, so as to speed to incremental recompilation of the generated snippets.
      */
-    class ClangReparser implements Reparser {
+    static class ClangReparser implements Reparser {
         final Path macro;
         final Index macroIndex = LibClang.createIndex(true);
         final TranslationUnit macroUnit;
 
         public ClangReparser(TranslationUnit tu, Collection<String> args) throws IOException, Index.ParsingFailedException {
@@ -228,36 +125,244 @@
             this.macro.toFile().deleteOnExit();
             String[] patchedArgs = Stream.concat(
                 Stream.of(
                     // Avoid system search path, use bundled instead
                     "-nostdinc",
+                    "-ferror-limit=0",
                     // precompiled header
                     "-include-pch", precompiled.toAbsolutePath().toString()),
                 args.stream()).toArray(String[]::new);
             this.macroUnit = macroIndex.parse(macro.toAbsolutePath().toString(),
-                    d -> processDiagnostics(null, d),
+                    this::processDiagnostics,
                     false, //add serialization support (needed for macros)
                     patchedArgs);
         }
 
+        void processDiagnostics(Diagnostic diag) {
+            if (Main.DEBUG) {
+                System.err.println("Error while processing macro: " + diag.spelling());
+            }
+        }
+
         @Override
         public Stream<Cursor> reparse(String snippet) {
-            macroUnit.reparse(d -> processDiagnostics(snippet, d),
+            macroUnit.reparse(this::processDiagnostics,
                     Index.UnsavedFile.of(macro, snippet));
             return macroUnit.getCursor().children();
         }
+    }
+
+    /**
+     * This abstraction is used to collect all macros which could not be interpreted during {@link #parseConstant(Position, String, String[])}.
+     * All unparsed macros in the table can have three different states: UNPARSED (which means the macro has not been parsed yet),
+     * SUCCESS (which means the macro has been parsed and has a type and a value) and FAILURE, which means the macro has been
+     * parsed with some errors, but for which we were at least able to infer a type.
+     *
+     * The reparsing process goes as follows:
+     * 1. all unparsed macros are added to the table in the UNPARSED state.
+     * 2. a snippet for all macros in the UNPARSED state is compiled and the table state is updated
+     * 3. a recovery snippet for all macros in the FAILURE state is compiled and the table state is updated again
+     * 4. we repeat from (2) until no further progress is made.
+     * 5. we return a list of macro which are in the SUCCESS state.
+     *
+     * State transitions in the table are as follows:
+     * - an UNPARSED macro can go to either SUCCESS, to FAILURE or be removed (if not even a type can be inferred)
+     * - a FAILURE macro can go to either SUCCESS (if recovery step succeds) or be removed
+     * - a SUCCESS macro cannot go in any other state
+     */
+    class MacroTable {
+
+        final Map<String, Entry> macrosByMangledName = new LinkedHashMap<>();
+
+        abstract class Entry {
+            final String name;
+            final String[] tokens;
+            final Cursor cursor;
+
+            Entry(String name, String[] tokens, Cursor cursor) {
+                this.name = name;
+                this.tokens = tokens;
+                this.cursor = cursor;
+            }
+
+            String mangledName() {
+                return "jextract$macro$" + name;
+            }
+
+            Success success(Type type, Object value) {
+                throw new IllegalStateException();
+            }
+
+            RecoverableFailure failure(Type type) {
+                throw new IllegalStateException();
+            }
+
+            boolean isSuccess() {
+                return false;
+            }
+            boolean isRecoverableFailure() {
+                return false;
+            }
+            boolean isUnparsed() {
+                return false;
+            }
+        }
+
+        class Unparsed extends Entry {
+            Unparsed(String name, String[] tokens, Cursor cursor) {
+                super(name, tokens, cursor);
+            }
+
+            @Override
+            Success success(Type type, Object value) {
+                return new Success(name, tokens, cursor, type, value);
+            }
 
-        void processDiagnostics(String snippet, Diagnostic diag) {
-            if (diag.severity() > Diagnostic.CXDiagnostic_Warning) {
-                throw new BadMacroException(diag);
+            @Override
+            RecoverableFailure failure(Type type) {
+                return type != null ?
+                        new RecoverableFailure(name, tokens, cursor, type) :
+                        null;
+            }
+
+            @Override
+            boolean isUnparsed() {
+                return true;
             }
         }
-    }
 
-    private static class BadMacroException extends RuntimeException {
-        static final long serialVersionUID = 1L;
+        class RecoverableFailure extends Entry {
+
+            final Type type;
 
-        public BadMacroException(Diagnostic diag) {
-            super(diag.toString());
+            public RecoverableFailure(String name, String[] tokens, Cursor cursor, Type type) {
+                super(name, tokens, cursor);
+                this.type = type;
+            }
+
+            @Override
+            Success success(Type type, Object value) {
+                return new Success(name, tokens, cursor, this.type, value);
+            }
+
+            @Override
+            RecoverableFailure failure(Type type) {
+                return null;
+            }
+
+            @Override
+            boolean isRecoverableFailure() {
+                return true;
+            }
+        }
+
+        class Success extends Entry {
+            final Type type;
+            final Object value;
+
+            public Success(String name, String[] tokens, Cursor cursor, Type type, Object value) {
+                super(name, tokens, cursor);
+                this.type = type;
+                this.value = value;
+            }
+
+            @Override
+            boolean isSuccess() {
+                return true;
+            }
+
+            public Object value() {
+                return value;
+            }
+        }
+
+        void enterMacro(String name, String[] tokens, Cursor cursor) {
+            Unparsed unparsed = new Unparsed(name, tokens, cursor);
+            macrosByMangledName.put(unparsed.mangledName(), unparsed);
+        }
+
+        public List<Declaration.Constant> reparseConstants() {
+            int last = -1;
+            while (macrosByMangledName.size() > 0 && last != macrosByMangledName.size()) {
+                last = macrosByMangledName.size();
+                // step 1 - try parsing macros as var declarations
+                reparseMacros(false);
+                // step 2 - retry failed parsed macros as pointers
+                reparseMacros(true);
+            }
+            treeMaker.typeMaker.resolveTypeReferences();
+            return macrosByMangledName.values().stream()
+                    .filter(Entry::isSuccess)
+                    .map(e -> treeMaker.createMacro(e.cursor, e.name, ((Success)e).type, ((Success)e).value))
+                    .collect(Collectors.toList());
+        }
+
+        void updateTable(TypeMaker typeMaker, Cursor decl) {
+            String mangledName = decl.spelling();
+            Entry entry = macrosByMangledName.get(mangledName);
+            Entry newEntry;
+            try (EvalResult result = decl.eval()) {
+                switch (result.getKind()) {
+                    case Integral: {
+                        long value = result.getAsInt();
+                        newEntry = entry.success(typeMaker.makeType(decl.type()), value);
+                        break;
+                    }
+                    case FloatingPoint: {
+                        double value = result.getAsFloat();
+                        newEntry = entry.success(typeMaker.makeType(decl.type()), value);
+                        break;
+                    }
+                    case StrLiteral: {
+                        String value = result.getAsString();
+                        newEntry = entry.success(typeMaker.makeType(decl.type()), value);
+                        break;
+                    }
+                    default: {
+                        Type type = decl.type().equals(decl.type().canonicalType()) ?
+                                null : typeMaker.makeType(decl.type());
+                        newEntry = entry.failure(type);
+                    }
+                }
+            }
+            if (newEntry != null) {
+                macrosByMangledName.put(newEntry.mangledName(), newEntry);
+            } else {
+                macrosByMangledName.remove(entry.mangledName());
+            }
+        }
+
+        void reparseMacros(boolean recovery) {
+            String snippet = macroDecl(recovery);
+            TreeMaker treeMaker = new TreeMaker();
+            try {
+                reparser.reparse(snippet)
+                        .filter(c -> c.kind() == CursorKind.VarDecl &&
+                                c.spelling().contains("jextract$"))
+                        .forEach(c -> updateTable(treeMaker.typeMaker, c));
+            } finally {
+                treeMaker.typeMaker.resolveTypeReferences();
+            }
+        }
+
+        String macroDecl(boolean recovery) {
+            StringBuilder buf = new StringBuilder();
+            if (recovery) {
+                buf.append("#include <stdint.h>\n");
+            }
+            macrosByMangledName.values().stream()
+                    .filter(e -> !e.isSuccess()) // skip macros that already have passed
+                    .filter(recovery ? Entry::isRecoverableFailure : Entry::isUnparsed)
+                    .forEach(e -> {
+                        buf.append("__auto_type ")
+                                .append(e.mangledName())
+                                .append(" = ");
+                        if (recovery) {
+                            buf.append("(uintptr_t)");
+                        }
+                        buf.append(e.name)
+                                .append(";\n");
+                    });
+            return buf.toString();
         }
     }
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java
@@ -26,10 +26,11 @@
 package jdk.internal.jextract.impl;
 
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.JextractTask;
 import jdk.incubator.jextract.Position;
+import jdk.incubator.jextract.Type;
 import jdk.internal.clang.Cursor;
 import jdk.internal.clang.CursorKind;
 import jdk.internal.clang.Diagnostic;
 import jdk.internal.clang.Index;
 import jdk.internal.clang.LibClang;
@@ -38,11 +39,14 @@
 import jdk.internal.clang.TranslationUnit;
 
 import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 
 class Parser {
     private final TreeMaker treeMaker;
     private final JextractTask.ConstantParser constantParser;
@@ -62,11 +66,11 @@
                 }
             },
             true, args.toArray(new String[0]));
 
         JextractTask.ConstantParser constantParser = this.constantParser != null ?
-                this.constantParser : new DefaultConstantParser(new MacroParserImpl(tu, args));
+                this.constantParser : new MacroParserImpl(treeMaker, tu, args);
 
         List<Declaration> decls = new ArrayList<>();
         Cursor tuCursor = tu.getCursor();
         tuCursor.children().
             forEach(c -> {
@@ -101,38 +105,18 @@
                         decls.add(constant.get());
                     }
                 }
             });
 
+        if (constantParser instanceof MacroParserImpl) {
+            decls.addAll(((MacroParserImpl)constantParser).macroTable.reparseConstants());
+        }
         Declaration.Scoped rv = treeMaker.createHeader(tuCursor, decls);
         treeMaker.freeze();
         index.close();
         return rv;
     }
 
     private boolean isMacro(Cursor c) {
         return c.isPreprocessing() && c.kind() == CursorKind.MacroDefinition;
     }
-
-    class DefaultConstantParser implements JextractTask.ConstantParser {
-
-        final MacroParserImpl macroParser;
-
-        public DefaultConstantParser(MacroParserImpl macroParser) {
-            this.macroParser = macroParser;
-        }
-
-        @Override
-        public Optional<Declaration.Constant> parseConstant(Position pos, String name, String[] tokens) {
-            if (!(pos instanceof TreeMaker.CursorPosition)) {
-                return Optional.empty();
-            } else {
-                Cursor cursor = ((TreeMaker.CursorPosition)pos).cursor();
-                if (cursor.isMacroFunctionLike()) {
-                    return Optional.empty();
-                } else {
-                    return Optional.ofNullable(treeMaker.createMacro(cursor, macroParser.eval(name, tokens)));
-                }
-            }
-        }
-    }
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
@@ -168,18 +168,13 @@
         }
         return Declaration.function(toPos(c), c.spelling(), (Type.Function)toType(c),
                 params.toArray(new Declaration.Variable[0]));
     }
 
-    public Declaration.Constant createMacro(Cursor c, Optional<MacroParserImpl.Macro> macro) {
+    public Declaration.Constant createMacro(Cursor c, String name, Type type, Object value) {
         checkCursorAny(c, CursorKind.MacroDefinition);
-        if (macro.isEmpty()) {
-            return null;
-        } else {
-            MacroParserImpl.Macro parsedMacro = macro.get();
-            return Declaration.constant(toPos(c), c.spelling(), parsedMacro.value, parsedMacro.type());
-        }
+        return Declaration.constant(toPos(c), name, value, type);
     }
 
     public Declaration.Constant createEnumConstant(Cursor c) {
         return Declaration.constant(toPos(c), c.spelling(), c.getEnumConstantValue(), typeMaker.makeType(c.type()));
     }
diff a/test/jdk/java/jextract/TestMacros.java b/test/jdk/java/jextract/TestMacros.java
--- a/test/jdk/java/jextract/TestMacros.java
+++ b/test/jdk/java/jextract/TestMacros.java
@@ -55,11 +55,11 @@
     public void testBadMacros() {
         checkConstant(badMacro, "INVALID_INT_CONSUMER",
             Type.pointer(Type.function(false, Type.void_(), C_INT)),
             0L);
         // Record type in macro definition are erased to void
-        checkConstant(badMacro, "NO_FOO", Type.pointer(Type.void_()), 0L);
+        checkConstant(badMacro, "NO_FOO", Type.pointer(Type.declared(foo)), 0L);
         checkConstant(badMacro, "INVALID_INT_ARRAY_PTR", Type.pointer(Type.pointer(C_INT)), 0L);
     }
 
     @Test
     public void verifyFunctions() {
