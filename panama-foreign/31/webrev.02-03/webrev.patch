diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
@@ -147,20 +147,19 @@
     // The following methods can be used in conjunction with the java.foreign API.
 
     /**
      * Returns the absolute address represented by the given off-heap memory address as a {@code long}.
      * <p>
-     * This method is <em>unsafe</em>. Its use can result in putting the VM in a corrupt state when used incorrectly,
-     * and is provided solely to cover use-cases that can not otherwise be addressed safely. When used incorrectly, there
-     * are no guarantees made about the behaviour of the program. More specifically, incorrect uses of this method might
-     * result in a JVM crash or, worse, might silently result in memory corruption.
+     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
+     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
+     * restricted methods, and use safe and supported functionalities, where possible.
      *
      * @param address the address to turn into a {@code long}
      * @return the address as a {@code long}
      * @throws IllegalAccessError if the permission jkd.incubator.foreign.restrictedMethods is set to 'deny'
      * @throws IllegalStateException if the given address is not an off-heap address
      */
     static long asLong(MemoryAddress address) throws IllegalAccessError {
-        Utils.checkUnsafeAccess("jdk.incubator.foreign.MemoryAddress#getUnsafeOffset");
+        Utils.checkRestrictedAcccess("jdk.incubator.foreign.MemoryAddress#asLong");
         return MemoryAddressImpl.addressof(address);
     }
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -428,14 +428,13 @@
     /**
      * Returns a new native memory segment with given base address and size. The returned segment has its own temporal
      * bounds, and can therefore be closed; closing such a segment does <em>not</em> result in any resource being
      * deallocated.
      * <p>
-     * This method is <em>unsafe</em>. Its use can result in putting the VM in a corrupt state when used incorrectly,
-     * and is provided solely to cover use-cases that can not otherwise be addressed safely. When used incorrectly, there
-     * are no guarantees made about the behaviour of the program. More specifically, incorrect uses of this method might
-     * result in a JVM crash or, worse, might silently result in memory corruption.
+     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
+     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
+     * restricted methods, and use safe and supported functionalities, where possible.
      * <p>
      * This method allows for making an otherwise in-accessible memory region accessible. However, there
      * is no guarantee that this memory is safe to access, or that the given size for the new segment is not too large,
      * potentially resulting in out-of-bounds accesses. The developer is trusted to make the judgement that the use of the
      * returned memory segment is safe.
@@ -445,9 +444,9 @@
      * @return a new native memory segment with given base address and size.
      * @throws IllegalArgumentException if {@code base} does not encapsulate a native memory address.
      * @throws IllegalAccessError if the permission jkd.incubator.foreign.restrictedMethods is set to 'deny'
      */
     static MemorySegment ofNativeUnchecked(MemoryAddress base, long byteSize) throws IllegalAccessError {
-        Utils.checkUnsafeAccess("jdk.incubator.foreign.MemorySegment#ofNativeUnchecked");
+        Utils.checkRestrictedAcccess("jdk.incubator.foreign.MemorySegment#ofNativeUnchecked");
         return Utils.makeNativeSegmentUnchecked(base, byteSize);
     }
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
@@ -91,19 +91,36 @@
     private static final JavaLangInvokeAccess javaLangInvokeAccess = SharedSecrets.getJavaLangInvokeAccess();
 
     private static final String restrictedMethods = GetPropertyAction.privilegedGetProperty("jdk.incubator.foreign.restrictedMethods", "deny");
     private static final boolean skipZeroMemory = GetBooleanAction.privilegedGetProperty("jdk.internal.foreign.skipZeroMemory");
 
-    public static void checkUnsafeAccess(String sourceMethod) {
+    private static boolean isBootModuleCaller() {
+        Class<?> caller = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE)
+                .walk(s -> s.skip(3).findFirst().orElseThrow().getDeclaringClass());
+        return ModuleLayer.boot().modules().contains(caller.getModule());
+    }
+
+    public static void checkRestrictedAcccess(String sourceMethod) {
         switch (restrictedMethods) {
-            case "deny" ->
-                throw new IllegalAccessError("Can not access unsafe method: " + sourceMethod + "." +
-                        " jdk.incubator.foreign.permitUnsafe is set to 'deny'");
-            case "warn" ->
-                System.err.println("WARNING: Accessing unsafe method: " + sourceMethod);
-            case "debug" ->
-                System.out.println("DEBUG: Accessing unsafe method: " + sourceMethod);
+            case "deny" -> {
+                if (isBootModuleCaller()) return;
+                throw new IllegalAccessError("Can not access restricted method: " + sourceMethod + "." +
+                        " jdk.incubator.foreign.restrictedMethods is set to 'deny'");
+            }
+            case "warn" -> {
+                if (isBootModuleCaller()) return;
+                System.err.println("WARNING: Accessing restricted method: " + sourceMethod);
+            }
+            case "debug" -> {
+                StringBuilder sb = new StringBuilder("DEBUG: Accessing restricted method: " + sourceMethod);
+                StackWalker.getInstance().walk(s -> {
+                    s.skip(2)
+                     .forEach(f -> sb.append(System.lineSeparator()).append("\tat " + f));
+                    return null;
+                });
+                System.out.println(sb.toString());
+            }
             case "permit" -> {}
             default -> {}
         }
     }
 
