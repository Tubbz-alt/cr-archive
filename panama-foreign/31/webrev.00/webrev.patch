diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
@@ -26,10 +26,11 @@
 
 package jdk.incubator.foreign;
 
 import jdk.internal.foreign.MemoryAddressImpl;
 import jdk.internal.foreign.MemorySegmentImpl;
+import jdk.internal.foreign.Utils;
 
 /**
  * A memory address encodes an offset within a given {@link MemorySegment}. Memory addresses are typically obtained
  * using the {@link MemorySegment#baseAddress()} method; such addresses can then be adjusted as required,
  * using {@link MemoryAddress#addOffset(long)}.
@@ -140,6 +141,52 @@
     static MemoryAddress ofLong(long value) {
         return value == 0 ?
                 NULL :
                 MemorySegmentImpl.NOTHING.baseAddress().addOffset(value);
     }
+
+    // The following methods can be used in conjunction with the java.foreign API.
+
+    /**
+     * Obtain the base object (if any) associated with this address. This can be used in conjunction with
+     * {@link #getUnsafeOffset(MemoryAddress)} in order to obtain a base/offset addressing coordinate pair
+     * to be used with methods like {@link sun.misc.Unsafe#getInt(Object, long)} and the likes.
+     * <p>
+     * This method is <em>unsafe</em>. It's use can result in putting the VM in a corrupt state when used incorrectly,
+     * and is provided solely to cover use-cases that can not otherwise be addressed safely. When used incorrectly, there
+     * are no guarantees made about the behaviour of the program. Particularly, incorrect use is not guaranteed to
+     * result in a VM crash, but might instead silently cause memory to be corrupted.
+     *
+     * @param address the address whose base object is to be obtained.
+     * @return the base object associated with the address, or {@code null}.
+     * @throws IllegalAccessError if the permission jkd.incubator.foreign.permitUnsafeInterop is not set
+     */
+    static Object getUnsafeBase(MemoryAddress address) throws IllegalAccessError {
+        if (!Utils.permitUnsafeInterop) {
+            throw new IllegalAccessError("Can not get unsafe base. Permission is not enabled");
+        }
+        return ((MemoryAddressImpl)address).unsafeGetBase();
+    }
+
+    /**
+     * Obtain the offset associated with this address. If {@link #getUnsafeBase(MemoryAddress)} returns {@code null} on the passed
+     * address, then the offset is to be interpreted as the (absolute) numerical value associated said address.
+     * Alternatively, the offset represents the displacement of a field or an array element within the containing
+     * base object. This can be used in conjunction with {@link #getUnsafeBase(MemoryAddress)} in order to obtain a base/offset
+     * addressing coordinate pair to be used with methods like {@link sun.misc.Unsafe#getInt(Object, long)} and the likes.
+     * <p>
+     * This method is <em>unsafe</em>. It's use can result in putting the VM in a corrupt state when used incorrectly,
+     * and is provided solely to cover use-cases that can not otherwise be addressed safely. When used incorrectly, there
+     * are no guarantees made about the behaviour of the program. Particularly, incorrect use is not guaranteed to
+     * result in a VM crash, but might instead silently cause memory to be corrupted.
+     *
+     * @param address the address whose offset is to be obtained.
+     * @return the offset associated with the address.
+     * @throws IllegalAccessError if the permission jkd.incubator.foreign.permitUnsafeInterop is not set
+     */
+    static long getUnsafeOffset(MemoryAddress address) throws IllegalAccessError {
+        if (!Utils.permitUnsafeInterop) {
+            throw new IllegalAccessError("Can not get unsafe offset. Permission is not enabled");
+        }
+        return ((MemoryAddressImpl)address).unsafeGetOffset();
+    }
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -26,10 +26,11 @@
 
 package jdk.incubator.foreign;
 
 import java.nio.ByteBuffer;
 
+import jdk.internal.foreign.MemorySegmentImpl;
 import jdk.internal.foreign.Utils;
 
 import java.io.IOException;
 import java.nio.channels.FileChannel;
 import java.nio.file.Path;
@@ -422,6 +423,34 @@
             throw new IllegalArgumentException("Invalid alignment constraint : " + alignmentBytes);
         }
 
         return Utils.makeNativeSegment(bytesSize, alignmentBytes);
     }
+
+    /**
+     * Returns a new native memory segment with given base address and size. The returned segment has its own temporal
+     * bounds, and can therefore be closed; closing such a segment does <em>not</em> result in any resource being
+     * deallocated.
+     * <p>
+     * This method is <em>unsafe</em>. It's use can result in putting the VM in a corrupt state when used incorrectly,
+     * and is provided solely to cover use-cases that can not otherwise be addressed safely. When used incorrectly, there
+     * are no guarantees made about the behaviour of the program. Particularly, incorrect use is not guaranteed to
+     * result in a VM crash, but might instead silently cause memory to be corrupted.
+     * <p>
+     * This method allows for making an otherwise in-accessible memory region accessible. However, there
+     * is no guarantee that this memory is safe to access, or that the given size for the new segment is not too large,
+     * potentially resulting in out-of-bounds accesses. The developer is trusted to make the judgement that the use of the
+     * returned memory segment is safe.
+     *
+     * @param base the desired base address
+     * @param byteSize the desired size.
+     * @return a new native memory segment with given base address and size.
+     * @throws IllegalArgumentException if {@code base} does not encapsulate a native memory address.
+     * @throws IllegalAccessError if the permission jkd.incubator.foreign.premitUncheckedSegments is not set
+     */
+    static MemorySegment ofNativeUnchecked(MemoryAddress base, long byteSize) throws IllegalAccessError {
+        if (!Utils.premitUncheckedSegments) {
+            throw new IllegalAccessError("Can not create unchecked segments. Permission is not enabled");
+        }
+        return Utils.makeNativeSegmentUnchecked(base, byteSize);
+    }
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- *  Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- *  This code is free software; you can redistribute it and/or modify it
- *  under the terms of the GNU General Public License version 2 only, as
- *  published by the Free Software Foundation.  Oracle designates this
- *  particular file as subject to the "Classpath" exception as provided
- *  by Oracle in the LICENSE file that accompanied this code.
- *
- *  This code is distributed in the hope that it will be useful, but WITHOUT
- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- *  version 2 for more details (a copy is included in the LICENSE file that
- *  accompanied this code).
- *
- *  You should have received a copy of the GNU General Public License version
- *  2 along with this work; if not, write to the Free Software Foundation,
- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- *  or visit www.oracle.com if you need additional information or have any
- *  questions.
- *
- */
-
-package jdk.incubator.foreign.unsafe;
-
-import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.MemorySegment;
-import jdk.internal.foreign.MemoryAddressImpl;
-import jdk.internal.foreign.MemorySegmentImpl;
-import jdk.internal.foreign.Utils;
-
-/**
- * Unsafe methods to allow interop between sun.misc.unsafe and memory access API.
- */
-public final class ForeignUnsafe {
-
-    private ForeignUnsafe() {
-        //just the one, please
-    }
-
-    // The following methods can be used in conjunction with the java.foreign API.
-
-    /**
-     * Obtain the base object (if any) associated with this address. This can be used in conjunction with
-     * {@link #getUnsafeOffset(MemoryAddress)} in order to obtain a base/offset addressing coordinate pair
-     * to be used with methods like {@link sun.misc.Unsafe#getInt(Object, long)} and the likes.
-     *
-     * @param address the address whose base object is to be obtained.
-     * @return the base object associated with the address, or {@code null}.
-     */
-    public static Object getUnsafeBase(MemoryAddress address) {
-        return ((MemoryAddressImpl)address).unsafeGetBase();
-    }
-
-    /**
-     * Obtain the offset associated with this address. If {@link #getUnsafeBase(MemoryAddress)} returns {@code null} on the passed
-     * address, then the offset is to be interpreted as the (absolute) numerical value associated said address.
-     * Alternatively, the offset represents the displacement of a field or an array element within the containing
-     * base object. This can be used in conjunction with {@link #getUnsafeBase(MemoryAddress)} in order to obtain a base/offset
-     * addressing coordinate pair to be used with methods like {@link sun.misc.Unsafe#getInt(Object, long)} and the likes.
-     *
-     * @param address the address whose offset is to be obtained.
-     * @return the offset associated with the address.
-     */
-    public static long getUnsafeOffset(MemoryAddress address) {
-        return ((MemoryAddressImpl)address).unsafeGetOffset();
-    }
-
-    /**
-     * Returns a new native memory segment with given base address and size. The returned segment has its own temporal
-     * bounds, and can therefore be closed; closing such a segment does <em>not</em> result in any resource being
-     * deallocated.
-     * @param base the desired base address
-     * @param byteSize the desired size.
-     * @return a new native memory segment with given base address and size.
-     * @throws IllegalArgumentException if {@code base} does not encapsulate a native memory address.
-     */
-    public static MemorySegment ofNativeUnchecked(MemoryAddress base, long byteSize) {
-        return Utils.makeNativeSegmentUnchecked(base, byteSize);
-    }
-}
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
@@ -87,10 +87,12 @@
     private final static long POINTER_SIZE = 8;
 
     private static final JavaNioAccess javaNioAccess = SharedSecrets.getJavaNioAccess();
     private static final JavaLangInvokeAccess javaLangInvokeAccess = SharedSecrets.getJavaLangInvokeAccess();
 
+    public static final boolean premitUncheckedSegments = GetBooleanAction.privilegedGetProperty("jdk.incubator.foreign.permitUncheckedSegments");
+    public static final boolean permitUnsafeInterop = GetBooleanAction.privilegedGetProperty("jdk.incubator.foreign.permitUnsafeInterop");
     private static final boolean skipZeroMemory = GetBooleanAction.privilegedGetProperty("jdk.internal.foreign.skipZeroMemory");
 
     public static long alignUp(long n, long alignment) {
         return (n + alignment - 1) & -alignment;
     }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVx64ABI.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVx64ABI.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVx64ABI.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVx64ABI.java
@@ -53,11 +53,10 @@
     public static final int MAX_INTEGER_RETURN_REGISTERS = 2;
     public static final int MAX_VECTOR_ARGUMENT_REGISTERS = 8;
     public static final int MAX_VECTOR_RETURN_REGISTERS = 2;
     public static final int MAX_X87_RETURN_REGISTERS = 2;
 
-    private static final String fastPath = privilegedGetProperty("jdk.internal.foreign.NativeInvoker.FASTPATH");
     private static SysVx64ABI instance;
 
     public static SysVx64ABI getInstance() {
         if (instance == null) {
             instance = new SysVx64ABI();
diff a/test/jdk/java/foreign/CallGeneratorHelper.java b/test/jdk/java/foreign/CallGeneratorHelper.java
--- a/test/jdk/java/foreign/CallGeneratorHelper.java
+++ b/test/jdk/java/foreign/CallGeneratorHelper.java
@@ -25,11 +25,10 @@
 import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.ValueLayout;
-import jdk.incubator.foreign.unsafe.ForeignUnsafe;
 import jdk.internal.foreign.Utils;
 
 import java.lang.invoke.VarHandle;
 import java.util.ArrayList;
 import java.util.List;
@@ -389,11 +388,11 @@
             if (Utils.isPadding(l)) continue;
             VarHandle accessor = g.varHandle(structFieldCarrier(l), MemoryLayout.PathElement.groupElement(l.name().get()));
             List<Consumer<Object>> fieldsCheck = new ArrayList<>();
             Object value = makeArg(l, fieldsCheck, check);
             if (isPointer(l)) {
-                value = ForeignUnsafe.getUnsafeOffset((MemoryAddress)value);
+                value = MemoryAddress.getUnsafeOffset((MemoryAddress)value);
             }
             //set value
             accessor.set(str.baseAddress(), value);
             //add check
             if (check) {
diff a/test/jdk/java/foreign/StdLibTest.java b/test/jdk/java/foreign/StdLibTest.java
--- a/test/jdk/java/foreign/StdLibTest.java
+++ b/test/jdk/java/foreign/StdLibTest.java
@@ -28,12 +28,11 @@
   * @modules jdk.incubator.foreign/jdk.incubator.foreign.unsafe
  *          jdk.incubator.foreign/jdk.internal.foreign
  *          jdk.incubator.foreign/jdk.internal.foreign.abi
  *          java.base/sun.security.action
  * @build NativeTestHelper StdLibTest
- * @run testng StdLibTest
- * @run testng/othervm -Djdk.internal.foreign.NativeInvoker.FASTPATH=none -Djdk.internal.foreign.UpcallHandler.FASTPATH=none StdLibTest
+ * @run testng/othervm -Djdk.incubator.foreign.permitUncheckedSegments=true StdLibTest
  */
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
@@ -60,11 +59,10 @@
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
 import jdk.incubator.foreign.SystemABI;
-import jdk.incubator.foreign.unsafe.ForeignUnsafe;
 import org.testng.annotations.*;
 
 import static jdk.incubator.foreign.MemoryLayouts.*;
 import static org.testng.Assert.*;
 
@@ -267,11 +265,11 @@
             private MemoryAddress base;
 
             static final long SIZE = 56;
 
             Tm(MemoryAddress base) {
-                this.base = base.rebase(ForeignUnsafe.ofNativeUnchecked(base, SIZE));
+                this.base = base.rebase(MemorySegment.ofNativeUnchecked(base, SIZE));
             }
 
             int sec() {
                 return (int)intHandle.get(base);
             }
diff a/test/jdk/java/foreign/TestDowncall.java b/test/jdk/java/foreign/TestDowncall.java
--- a/test/jdk/java/foreign/TestDowncall.java
+++ b/test/jdk/java/foreign/TestDowncall.java
@@ -30,12 +30,11 @@
  *          jdk.incubator.foreign/jdk.internal.foreign
  *          jdk.incubator.foreign/jdk.internal.foreign.abi
  *          java.base/sun.security.action
  * @build NativeTestHelper CallGeneratorHelper TestDowncall
  *
- * @run testng/othervm -Djdk.internal.foreign.NativeInvoker.FASTPATH=none TestDowncall
- * @run testng/othervm TestDowncall
+ * @run testng/othervm -Djdk.incubator.foreign.permitUnsafeInterop=true TestDowncall
  */
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
diff a/test/jdk/java/foreign/TestNative.java b/test/jdk/java/foreign/TestNative.java
--- a/test/jdk/java/foreign/TestNative.java
+++ b/test/jdk/java/foreign/TestNative.java
@@ -24,17 +24,16 @@
 
 /*
  * @test
  * @modules java.base/jdk.internal.misc
  *          jdk.incubator.foreign/jdk.incubator.foreign.unsafe
- * @run testng TestNative
+ * @run testng/othervm -Djdk.incubator.foreign.permitUnsafeInterop=true TestNative
  */
 
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayout.PathElement;
-import jdk.incubator.foreign.unsafe.ForeignUnsafe;
 import jdk.internal.misc.Unsafe;
 import org.testng.annotations.*;
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
@@ -116,11 +115,11 @@
         ByteBuffer bb = base.segment().asSlice(base.offset(), (int)layout.byteSize()).asByteBuffer();
         Z z = bufferFactory.apply(bb);
         for (long i = 0 ; i < nelems ; i++) {
             Object handleValue = handleExtractor.apply(base, i);
             Object bufferValue = nativeBufferExtractor.apply(z, (int)i);
-            Object rawValue = nativeRawExtractor.apply(ForeignUnsafe.getUnsafeOffset(base), (int)i);
+            Object rawValue = nativeRawExtractor.apply(MemoryAddress.getUnsafeOffset(base), (int)i);
             if (handleValue instanceof Number) {
                 assertEquals(((Number)handleValue).longValue(), i);
                 assertEquals(((Number)bufferValue).longValue(), i);
                 assertEquals(((Number)rawValue).longValue(), i);
             } else {
diff a/test/jdk/java/foreign/TestUpcall.java b/test/jdk/java/foreign/TestUpcall.java
--- a/test/jdk/java/foreign/TestUpcall.java
+++ b/test/jdk/java/foreign/TestUpcall.java
@@ -28,12 +28,11 @@
  *          jdk.incubator.foreign/jdk.internal.foreign
  *          jdk.incubator.foreign/jdk.internal.foreign.abi
  *          java.base/sun.security.action
  * @build NativeTestHelper CallGeneratorHelper TestUpcall
  *
- * @run testng/othervm -Djdk.internal.foreign.UpcallHandler.FASTPATH=none TestUpcall
- * @run testng/othervm TestUpcall
+ * @run testng/othervm -Djdk.incubator.foreign.permitUnsafeInterop=true TestUpcall
  */
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.LibraryLookup;
