diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
@@ -5,17 +5,22 @@
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.NativeAllocationScope;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
+import java.util.OptionalLong;
 
 import static ${C_LANG}.*;
 
 public class RuntimeHelper {
 
@@ -79,10 +84,51 @@
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
 
+    public static final class CScope extends NativeAllocationScope {
+        private final NativeAllocationScope impl;
+        private final List<MemorySegment> segments = new ArrayList<>();
+
+        public CScope() {
+            impl = NativeAllocationScope.unboundedScope();
+        }
+
+        public CScope(long size) {
+            impl = NativeAllocationScope.boundedScope(size);
+        }
+
+        @Override
+        public OptionalLong byteSize() {
+            return impl.byteSize();
+        }
+
+        @Override
+        public long allocatedBytes() {
+            return impl.allocatedBytes();
+        }
+
+        @Override
+        public MemoryAddress allocate(long bytesSize, long bytesAlignment) {
+            return impl.allocate(bytesSize, bytesAlignment);
+        }
+
+        @Override
+        public void close() {
+            for (var seg : segments) {
+                seg.close();
+            }
+            impl.close();
+        }
+
+        public MemorySegment register(MemorySegment seg) {
+            segments.add(Objects.requireNonNull(seg));
+            return seg;
+        }
+    }
+
     private static class VarargsInvoker {
         private static final MethodHandle INVOKE_MH;
         private final MemoryAddress symbol;
         private final MethodType varargs;
         private final FunctionDescriptor function;
