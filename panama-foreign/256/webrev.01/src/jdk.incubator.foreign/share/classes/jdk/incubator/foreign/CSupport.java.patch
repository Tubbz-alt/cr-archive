diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
@@ -64,11 +64,11 @@
      * and which erases all {@code float} arguments to {@code double}.
      * <p>
      * As such, this interface only supports reading {@code int}, {@code double},
      * and any other type that fits into a {@code long}.
      */
-    public interface VaList extends AutoCloseable {
+    public interface VaList extends Addressable, AutoCloseable {
 
         /**
          * Reads the next value as an {@code int} and advances this va list's position.
          *
          * @param layout the layout of the value
@@ -212,10 +212,11 @@
         /**
          * Returns the memory address of the C {@code va_list} associated with this instance.
          *
          * @return the memory address of the C {@code va_list} associated with this instance.
          */
+        @Override
         MemoryAddress address();
 
         /**
          * Constructs a new {@code VaList} instance out of a memory address pointing to an existing C {@code va_list}.
          *
@@ -259,10 +260,11 @@
          * Note that when there are no elements added to the created va list,
          * this method will return the same as {@linkplain #empty()}.
          *
          * @param actions a consumer for a builder (see {@link Builder}) which can be used to specify the elements
          *                of the underlying C {@code va_list}.
+         * @param scope the scope to be used for the valist allocation.
          * @return a new {@code VaList} instance backed by a fresh C {@code va_list}.
          */
         static VaList make(Consumer<VaList.Builder> actions, NativeScope scope) {
             return SharedUtils.newVaList(actions, SharedUtils.Allocator.ofScope(scope));
         }
