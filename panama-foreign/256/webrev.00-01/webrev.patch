diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
@@ -49,10 +49,17 @@
 public interface LibraryLookup {
 
     /**
      * A symbol retrieved during a library lookup. A lookup symbol has a <em>name</em> and can be projected
      * into a memory address (see {@link #name()} and {@link #address()}, respectively).
+     *
+     * @apiNote In the future, if the Java language permits, {@link Symbol}
+     * may become a {@code sealed} interface, which would prohibit subclassing except by
+     * explicitly permitted types.
+     *
+     * @implSpec
+     * Implementations of this interface are immutable, thread-safe and <a href="{@docRoot}/java.base/java/lang/doc-files/ValueBased.html">value-based</a>.
      */
     interface Symbol extends Addressable {
         /**
          * The name of this lookup symbol.
          * @return the name of this lookup symbol.
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableInvoker.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableInvoker.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableInvoker.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/ProgrammableInvoker.java
@@ -101,21 +101,21 @@
     private final BufferLayout layout;
     private final long stackArgsBytes;
 
     private final CallingSequence callingSequence;
 
-    private final MemoryAddress addr;
+    private final Addressable addr;
     private final long stubAddress;
 
     private final long bufferCopySize;
 
     public ProgrammableInvoker(ABIDescriptor abi, Addressable addr, CallingSequence callingSequence) {
         this.abi = abi;
         this.layout = BufferLayout.of(abi);
         this.stubAddress = adapterStubs.computeIfAbsent(abi, key -> generateAdapter(key, layout));
 
-        this.addr = addr.address();
+        this.addr = addr;
         this.callingSequence = callingSequence;
 
         this.stackArgsBytes = callingSequence.argMoveBindings()
                 .map(Binding.Move::storage)
                 .filter(s -> abi.arch.isStackType(s.type()))
@@ -160,11 +160,11 @@
                                             .asType(leafType);
 
         boolean isSimple = !(retMoves.length > 1);
         if (USE_INTRINSICS && isSimple) {
             NativeEntryPoint nep = NativeEntryPoint.make(
-                addr.toRawLongValue(),
+                addr.address().toRawLongValue(),
                 "native_call",
                 abi,
                 toStorageArray(argMoves),
                 toStorageArray(retMoves),
                 !callingSequence.isTrivial(),
@@ -274,11 +274,11 @@
                 stackArgs = stackArgsSeg.address();
             } else {
                 stackArgs = MemoryAddressImpl.NULL;
             }
 
-            VH_LONG.set(argsPtr.addOffset(layout.arguments_next_pc), addr.toRawLongValue());
+            VH_LONG.set(argsPtr.addOffset(layout.arguments_next_pc), addr.address().toRawLongValue());
             VH_LONG.set(argsPtr.addOffset(layout.stack_args_bytes), stackArgsBytes);
             VH_LONG.set(argsPtr.addOffset(layout.stack_args), stackArgs.toRawLongValue());
 
             for (int i = 0; i < argBindings.length; i++) {
                 Binding.Move binding = argBindings[i];
