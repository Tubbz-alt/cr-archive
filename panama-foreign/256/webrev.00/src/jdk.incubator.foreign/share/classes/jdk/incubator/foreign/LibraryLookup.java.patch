diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
@@ -36,28 +36,47 @@
  * A given native library remains loaded as long as there is at least one <em>live</em> library lookup instance referring
  * to it.
  * <p>
  * Memory address instances generated by a library lookup will contain a strong reference to the originating lookup object,
  * therefore preventing library unloading; in turn method handle instances obtained from
- * {@link ForeignLinker#downcallHandle(MemoryAddress, MethodType, FunctionDescriptor)}) also maintain a strong reference
+ * {@link ForeignLinker#downcallHandle(Addressable, MethodType, FunctionDescriptor)}) also maintain a strong reference
  * to the memory address parameter used for their construction. This means that there is always a strong reachability chain
  * from a native method handle to a lookup object (the one that was used to lookup the native library symbol the method handle
  * refers to); this is useful to prevent situations where a native library is unloaded in the middle of a native call.
  * <p>
  * To allow for a library to be unloaded, a client will have to discard any strong references it
  * maintains, directly, or indirectly to a lookup object associated with given library.
  */
 public interface LibraryLookup {
 
+    /**
+     * A symbol retrieved during a library lookup. A lookup symbol has a <em>name</em> and can be projected
+     * into a memory address (see {@link #name()} and {@link #address()}, respectively).
+     */
+    interface Symbol extends Addressable {
+        /**
+         * The name of this lookup symbol.
+         * @return the name of this lookup symbol.
+         */
+        String name();
+
+        /**
+         * The memory address of this lookup symbol.
+         * @return the memory address of this lookup symbol.
+         */
+        @Override
+        MemoryAddress address();
+    }
+
     /**
      * Lookups a symbol with given name in this library. The returned address has the same temporal bounds
      * as this lookup object.
      * @param name the symbol name.
      * @return the library symbol (if any)
      * @throws NoSuchMethodException if no symbol with given name could be found.
      */
-    MemoryAddress lookup(String name) throws NoSuchMethodException;
+    Symbol lookup(String name) throws NoSuchMethodException;
 
     /**
      * Obtain a default library lookup object.
      * @return the default library lookup object.
      */
