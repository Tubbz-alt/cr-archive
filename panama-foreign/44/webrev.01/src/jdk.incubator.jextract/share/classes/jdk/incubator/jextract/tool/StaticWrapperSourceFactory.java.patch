diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java
@@ -24,24 +24,19 @@
  */
 
 package jdk.incubator.jextract.tool;
 
 import java.lang.invoke.MethodType;
-import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Type;
 
 public class StaticWrapperSourceFactory extends HandleSourceFactory {
-    private final Set<Declaration.Variable> variables = new HashSet<>();
-    private final Set<Declaration.Function> functions = new HashSet<>();
-
     public StaticWrapperSourceFactory(String clsName, String pkgName, List<String> libraryNames) {
         super(clsName, pkgName, libraryNames);
     }
 
     @Override
@@ -49,13 +44,14 @@
         //do nothing
     }
 
     @Override
     public Void visitFunction(Declaration.Function funcTree, Declaration parent) {
-        if (! functions.add(funcTree)) {
+        if (visitedFunction(funcTree)) {
             return null;
         }
+
         MethodType mtype = typeTranslator.getMethodType(funcTree.type());
         FunctionDescriptor descriptor = Type.descriptorFor(funcTree.type()).orElse(null);
         if (descriptor == null) {
             //abort
             return null;
@@ -97,18 +93,25 @@
         }
     }
 
     @Override
     public Void visitVariable(Declaration.Variable tree, Declaration parent) {
-        if (parent == null && !(variables.add(tree))) {
+        if (parent == null && visitedVariable(tree)) {
             return null;
         }
 
         String fieldName = tree.name();
         String symbol = tree.name();
         assert !symbol.isEmpty();
         assert !fieldName.isEmpty();
+
+        // FIXME: we need tree transformer. The mangling should be a separate tree transform phase
+        if (parent == null) {
+            setMangledName(tree);
+            fieldName = getMangledName(tree);
+        }
+
         Type type = tree.type();
         MemoryLayout layout = tree.layout().orElse(Type.layoutFor(type).orElse(null));
         if (layout == null) {
             //no layout - abort
             return null;
@@ -118,20 +121,21 @@
                 clazz == MemorySegment.class || layout.byteSize() > 8) {
             //skip
             return null;
         }
 
+        String parentName = parent != null? getMangledName(parent) : null;
         if (parent != null) {
             //struct field
-            builder.addVarHandle(fieldName, clazz, parent.name());
+            builder.addVarHandle(fieldName, clazz, parentName);
         } else {
             builder.addLayout(fieldName, layout);
             builder.addVarHandle(fieldName, clazz, null);
             builder.addAddress(fieldName);
         }
         //add getter and setters
-        builder.addGetter(fieldName, clazz, parent);
-        builder.addSetter(fieldName, clazz, parent);
+        builder.addGetter(fieldName, clazz, parentName);
+        builder.addSetter(fieldName, clazz, parentName);
 
         return null;
     }
 }
