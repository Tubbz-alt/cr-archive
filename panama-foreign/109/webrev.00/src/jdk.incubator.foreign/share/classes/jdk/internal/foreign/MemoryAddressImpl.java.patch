diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
@@ -39,19 +39,19 @@
  */
 public final class MemoryAddressImpl implements MemoryAddress, MemoryAddressProxy {
 
     private static final Unsafe UNSAFE = Unsafe.getUnsafe();
 
-    private final MemorySegmentImpl segment;
+    private final AbstractMemorySegmentImpl segment;
     private final long offset;
 
     public MemoryAddressImpl(long offset) {
-        this.segment = MemorySegmentImpl.NOTHING;
+        this.segment = AbstractMemorySegmentImpl.NOTHING;
         this.offset = offset;
     }
 
-    public MemoryAddressImpl(MemorySegmentImpl segment, long offset) {
+    public MemoryAddressImpl(AbstractMemorySegmentImpl segment, long offset) {
         this.segment = Objects.requireNonNull(segment);
         this.offset = offset;
     }
 
     public static void copy(MemoryAddressImpl src, MemoryAddressImpl dst, long size) {
@@ -83,48 +83,47 @@
         return unsafeGetOffset();
     }
 
     @Override
     public MemorySegment segment() {
-        return segment != MemorySegmentImpl.NOTHING ?
+        return segment != AbstractMemorySegmentImpl.NOTHING ?
                 segment : null;
     }
 
     @Override
     public MemoryAddress addOffset(long bytes) {
         return new MemoryAddressImpl(segment, offset + bytes);
     }
 
     @Override
     public MemoryAddress rebase(MemorySegment segment) {
-        MemorySegmentImpl segmentImpl = (MemorySegmentImpl)segment;
-        if (segmentImpl.base != this.segment.base) {
+        AbstractMemorySegmentImpl segmentImpl = (AbstractMemorySegmentImpl) segment;
+        if (segmentImpl.base() != this.segment.base()) {
             throw new IllegalArgumentException("Invalid rebase target: " + segment);
         }
-        return new MemoryAddressImpl((MemorySegmentImpl)segment,
+        return new MemoryAddressImpl((AbstractMemorySegmentImpl) segment,
                 unsafeGetOffset() - ((MemoryAddressImpl)segment.baseAddress()).unsafeGetOffset());
     }
 
     // MemoryAddressProxy methods
 
     public void checkAccess(long offset, long length, boolean readOnly) {
         segment.checkRange(MemoryAddressProxy.addOffsets(this.offset, offset, this), length, !readOnly);
     }
 
     public long unsafeGetOffset() {
-        return segment.min + offset;
+        return segment.min() + offset;
     }
 
     public Object unsafeGetBase() {
         return segment.base();
     }
 
     @Override
     public boolean isSmall() {
         return segment.isSmall();
     }
-
     // Object methods
 
     @Override
     public int hashCode() {
         return Objects.hash(unsafeGetBase(), unsafeGetOffset());
