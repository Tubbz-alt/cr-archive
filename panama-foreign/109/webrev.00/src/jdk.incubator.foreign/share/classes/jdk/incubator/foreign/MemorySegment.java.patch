diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -26,11 +26,14 @@
 
 package jdk.incubator.foreign;
 
 import java.nio.ByteBuffer;
 
-import jdk.internal.foreign.Utils;
+import jdk.internal.foreign.AbstractMemorySegmentImpl;
+import jdk.internal.foreign.HeapMemorySegmentImpl;
+import jdk.internal.foreign.MappedMemorySegmentImpl;
+import jdk.internal.foreign.NativeMemorySegmentImpl;
 
 import java.io.IOException;
 import java.nio.channels.FileChannel;
 import java.nio.file.Path;
 import java.util.Spliterator;
@@ -289,11 +292,11 @@
      *
      * @param bb the byte buffer backing the buffer memory segment.
      * @return a new buffer memory segment.
      */
     static MemorySegment ofByteBuffer(ByteBuffer bb) {
-        return Utils.makeBufferSegment(bb);
+        return AbstractMemorySegmentImpl.ofBuffer(bb);
     }
 
     /**
      * Creates a new array memory segment that models the memory associated with a given heap-allocated byte array.
      * <p>
@@ -302,11 +305,11 @@
      *
      * @param arr the primitive array backing the array memory segment.
      * @return a new array memory segment.
      */
     static MemorySegment ofArray(byte[] arr) {
-        return Utils.makeArraySegment(arr);
+        return HeapMemorySegmentImpl.makeArraySegment(arr);
     }
 
     /**
      * Creates a new array memory segment that models the memory associated with a given heap-allocated char array.
      * <p>
@@ -315,11 +318,11 @@
      *
      * @param arr the primitive array backing the array memory segment.
      * @return a new array memory segment.
      */
     static MemorySegment ofArray(char[] arr) {
-        return Utils.makeArraySegment(arr);
+        return HeapMemorySegmentImpl.makeArraySegment(arr);
     }
 
     /**
      * Creates a new array memory segment that models the memory associated with a given heap-allocated short array.
      * <p>
@@ -328,11 +331,11 @@
      *
      * @param arr the primitive array backing the array memory segment.
      * @return a new array memory segment.
      */
     static MemorySegment ofArray(short[] arr) {
-        return Utils.makeArraySegment(arr);
+        return HeapMemorySegmentImpl.makeArraySegment(arr);
     }
 
     /**
      * Creates a new array memory segment that models the memory associated with a given heap-allocated int array.
      * <p>
@@ -341,11 +344,11 @@
      *
      * @param arr the primitive array backing the array memory segment.
      * @return a new array memory segment.
      */
     static MemorySegment ofArray(int[] arr) {
-        return Utils.makeArraySegment(arr);
+        return HeapMemorySegmentImpl.makeArraySegment(arr);
     }
 
     /**
      * Creates a new array memory segment that models the memory associated with a given heap-allocated float array.
      * <p>
@@ -354,11 +357,11 @@
      *
      * @param arr the primitive array backing the array memory segment.
      * @return a new array memory segment.
      */
     static MemorySegment ofArray(float[] arr) {
-        return Utils.makeArraySegment(arr);
+        return HeapMemorySegmentImpl.makeArraySegment(arr);
     }
 
     /**
      * Creates a new array memory segment that models the memory associated with a given heap-allocated long array.
      * <p>
@@ -367,11 +370,11 @@
      *
      * @param arr the primitive array backing the array memory segment.
      * @return a new array memory segment.
      */
     static MemorySegment ofArray(long[] arr) {
-        return Utils.makeArraySegment(arr);
+        return HeapMemorySegmentImpl.makeArraySegment(arr);
     }
 
     /**
      * Creates a new array memory segment that models the memory associated with a given heap-allocated double array.
      * <p>
@@ -380,11 +383,11 @@
      *
      * @param arr the primitive array backing the array memory segment.
      * @return a new array memory segment.
      */
     static MemorySegment ofArray(double[] arr) {
-        return Utils.makeArraySegment(arr);
+        return HeapMemorySegmentImpl.makeArraySegment(arr);
     }
 
     /**
      * Creates a new native memory segment that models a newly allocated block of off-heap memory with given layout.
      * <p>
@@ -438,11 +441,11 @@
      * @throws IllegalArgumentException if {@code bytesSize < 0}.
      * @throws UnsupportedOperationException if an unsupported map mode is specified.
      * @throws IOException if the specified path does not point to an existing file, or if some other I/O error occurs.
      */
     static MemorySegment mapFromPath(Path path, long bytesSize, FileChannel.MapMode mapMode) throws IOException {
-        return Utils.makeMappedSegment(path, bytesSize, mapMode);
+        return MappedMemorySegmentImpl.makeMappedSegment(path, bytesSize, mapMode);
     }
 
     /**
      * Creates a new native memory segment that models a newly allocated block of off-heap memory with given size and
      * alignment constraint (in bytes).
@@ -465,11 +468,11 @@
         if (alignmentBytes < 0 ||
                 ((alignmentBytes & (alignmentBytes - 1)) != 0L)) {
             throw new IllegalArgumentException("Invalid alignment constraint : " + alignmentBytes);
         }
 
-        return Utils.makeNativeSegment(bytesSize, alignmentBytes);
+        return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, alignmentBytes);
     }
 
     // access mode masks
 
     /**
