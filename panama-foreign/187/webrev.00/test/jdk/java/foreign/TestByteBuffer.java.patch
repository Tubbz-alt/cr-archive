diff a/test/jdk/java/foreign/TestByteBuffer.java b/test/jdk/java/foreign/TestByteBuffer.java
--- a/test/jdk/java/foreign/TestByteBuffer.java
+++ b/test/jdk/java/foreign/TestByteBuffer.java
@@ -141,21 +141,24 @@
     static VarHandle floatHandle = floats.varHandle(float.class, PathElement.sequenceElement());
     static VarHandle longHandle = longs.varHandle(long.class, PathElement.sequenceElement());
     static VarHandle doubleHandle = doubles.varHandle(double.class, PathElement.sequenceElement());
 
 
-    static void initTuples(MemoryAddress base) {
-        for (long i = 0; i < tuples.elementCount().getAsLong() ; i++) {
+    static void initTuples(MemoryAddress base, long count) {
+        for (long i = 0; i < count ; i++) {
             indexHandle.set(base, i, (int)i);
             valueHandle.set(base, i, (float)(i / 500f));
         }
     }
 
-    static void checkTuples(MemoryAddress base, ByteBuffer bb) {
-        for (long i = 0; i < tuples.elementCount().getAsLong() ; i++) {
-            assertEquals(bb.getInt(), (int)indexHandle.get(base, i));
-            assertEquals(bb.getFloat(), (float)valueHandle.get(base, i));
+    static void checkTuples(MemoryAddress base, ByteBuffer bb, long count) {
+        for (long i = 0; i < count ; i++) {
+            int index;
+            float value;
+            assertEquals(index = bb.getInt(), (int)indexHandle.get(base, i));
+            assertEquals(value = bb.getFloat(), (float)valueHandle.get(base, i));
+            assertEquals(value, index / 500f);
         }
     }
 
     static void initBytes(MemoryAddress base, SequenceLayout seq, BiConsumer<MemoryAddress, Long> handleSetter) {
         for (long i = 0; i < seq.elementCount().getAsLong() ; i++) {
@@ -190,26 +193,26 @@
 
     @Test
     public void testOffheap() {
         try (MemorySegment segment = MemorySegment.allocateNative(tuples)) {
             MemoryAddress base = segment.baseAddress();
-            initTuples(base);
+            initTuples(base, tuples.elementCount().getAsLong());
 
             ByteBuffer bb = segment.asByteBuffer();
-            checkTuples(base, bb);
+            checkTuples(base, bb, tuples.elementCount().getAsLong());
         }
     }
 
     @Test
     public void testHeap() {
         byte[] arr = new byte[(int) tuples.byteSize()];
         MemorySegment region = MemorySegment.ofArray(arr);
         MemoryAddress base = region.baseAddress();
-        initTuples(base);
+        initTuples(base, tuples.elementCount().getAsLong());
 
         ByteBuffer bb = region.asByteBuffer();
-        checkTuples(base, bb);
+        checkTuples(base, bb, tuples.elementCount().getAsLong());
     }
 
     @Test
     public void testChannel() throws Throwable {
         File f = new File("test.out");
@@ -219,35 +222,35 @@
         //write to channel
         try (FileChannel channel = FileChannel.open(f.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)) {
             withMappedBuffer(channel, FileChannel.MapMode.READ_WRITE, 0, tuples.byteSize(), mbb -> {
                 MemorySegment segment = MemorySegment.ofByteBuffer(mbb);
                 MemoryAddress base = segment.baseAddress();
-                initTuples(base);
+                initTuples(base, tuples.elementCount().getAsLong());
                 mbb.force();
             });
         }
 
         //read from channel
         try (FileChannel channel = FileChannel.open(f.toPath(), StandardOpenOption.READ)) {
             withMappedBuffer(channel, FileChannel.MapMode.READ_ONLY, 0, tuples.byteSize(), mbb -> {
                 MemorySegment segment = MemorySegment.ofByteBuffer(mbb);
                 MemoryAddress base = segment.baseAddress();
-                checkTuples(base, mbb);
+                checkTuples(base, mbb, tuples.elementCount().getAsLong());
             });
         }
     }
 
     static final int ALL_ACCESS_MODES = READ | WRITE | CLOSE | ACQUIRE | HANDOFF;
 
     @Test
     public void testDefaultAccessModesMappedSegment() throws Throwable {
-        try (MappedMemorySegment segment = MemorySegment.mapFromPath(tempPath, 8, FileChannel.MapMode.READ_WRITE)) {
+        try (MappedMemorySegment segment = MemorySegment.mapFromPath(tempPath, 0L, 8, FileChannel.MapMode.READ_WRITE)) {
             assertTrue(segment.hasAccessModes(ALL_ACCESS_MODES));
             assertEquals(segment.accessModes(), ALL_ACCESS_MODES);
         }
 
-        try (MappedMemorySegment segment = MemorySegment.mapFromPath(tempPath, 8, FileChannel.MapMode.READ_ONLY)) {
+        try (MappedMemorySegment segment = MemorySegment.mapFromPath(tempPath, 0L, 8, FileChannel.MapMode.READ_ONLY)) {
             assertTrue(segment.hasAccessModes(ALL_ACCESS_MODES & ~WRITE));
             assertEquals(segment.accessModes(), ALL_ACCESS_MODES& ~WRITE);
         }
     }
 
@@ -256,20 +259,48 @@
         File f = new File("test2.out");
         f.createNewFile();
         f.deleteOnExit();
 
         //write to channel
-        try (MappedMemorySegment segment = MemorySegment.mapFromPath(f.toPath(), tuples.byteSize(), FileChannel.MapMode.READ_WRITE)) {
+        try (MappedMemorySegment segment = MemorySegment.mapFromPath(f.toPath(), 0L, tuples.byteSize(), FileChannel.MapMode.READ_WRITE)) {
             MemoryAddress base = segment.baseAddress();
-            initTuples(base);
+            initTuples(base, tuples.elementCount().getAsLong());
             segment.force();
         }
 
         //read from channel
-        try (MemorySegment segment = MemorySegment.mapFromPath(f.toPath(), tuples.byteSize(), FileChannel.MapMode.READ_ONLY)) {
+        try (MemorySegment segment = MemorySegment.mapFromPath(f.toPath(), 0L, tuples.byteSize(), FileChannel.MapMode.READ_ONLY)) {
             MemoryAddress base = segment.baseAddress();
-            checkTuples(base, segment.asByteBuffer());
+            checkTuples(base, segment.asByteBuffer(), tuples.elementCount().getAsLong());
+        }
+    }
+
+    @Test
+    public void testMappedSegmentOffset() throws Throwable {
+        File f = new File("test3.out");
+        f.createNewFile();
+        f.deleteOnExit();
+
+        MemoryLayout tupleLayout = tuples.elementLayout();
+
+        // write one at a time
+        for (int i = 0 ; i < tuples.byteSize() ; i += tupleLayout.byteSize()) {
+            //write to channel
+            try (MappedMemorySegment segment = MemorySegment.mapFromPath(f.toPath(), i, tuples.byteSize(), FileChannel.MapMode.READ_WRITE)) {
+                MemoryAddress base = segment.baseAddress();
+                initTuples(base, 1);
+                segment.force();
+            }
+        }
+
+        // check one at a time
+        for (int i = 0 ; i < tuples.byteSize() ; i += tupleLayout.byteSize()) {
+            //read from channel
+            try (MemorySegment segment = MemorySegment.mapFromPath(f.toPath(), 0L, tuples.byteSize(), FileChannel.MapMode.READ_ONLY)) {
+                MemoryAddress base = segment.baseAddress();
+                checkTuples(base, segment.asByteBuffer(), 1);
+            }
         }
     }
 
     static void withMappedBuffer(FileChannel channel, FileChannel.MapMode mode, long pos, long size, Consumer<MappedByteBuffer> action) throws Throwable {
         MappedByteBuffer mbb = channel.map(mode, pos, size);
@@ -435,10 +466,35 @@
         try (MemorySegment segment = MemorySegment.allocateNative((long)Integer.MAX_VALUE + 10L)) {
             segment.asByteBuffer();
         }
     }
 
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void testBadMapNegativeSize() throws IOException {
+        File f = new File("testNeg1.out");
+        f.createNewFile();
+        f.deleteOnExit();
+        MemorySegment.mapFromPath(f.toPath(), 0L, -1, FileChannel.MapMode.READ_WRITE);
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void testBadMapNegativeOffset() throws IOException {
+        File f = new File("testNeg2.out");
+        f.createNewFile();
+        f.deleteOnExit();
+        MemorySegment.mapFromPath(f.toPath(), -1, 1, FileChannel.MapMode.READ_WRITE);
+    }
+
+    public void testMapZeroSize() throws IOException {
+        File f = new File("testPos1.out");
+        f.createNewFile();
+        f.deleteOnExit();
+        try (MemorySegment segment = MemorySegment.mapFromPath(f.toPath(), 0L, 0L, FileChannel.MapMode.READ_WRITE)) {
+            assertEquals(segment.byteSize(), 0);
+        }
+    }
+
     @Test(dataProvider="resizeOps")
     public void testCopyHeapToNative(Consumer<MemoryAddress> checker, Consumer<MemoryAddress> initializer, SequenceLayout seq) {
         checkByteArrayAlignment(seq.elementLayout());
         int bytes = (int)seq.byteSize();
         try (MemorySegment nativeArray = MemorySegment.allocateNative(bytes);
