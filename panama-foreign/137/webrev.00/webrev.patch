diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
@@ -162,14 +162,10 @@
             UNION,
             /**
              * Bitfields declaration.
              */
             BITFIELDS,
-            /**
-             * Type definition declaration.
-             */
-            TYPEDEF,
             /**
              * Toplevel declaration.
              */
             TOPLEVEL;
         }
@@ -218,11 +214,15 @@
              */
             BITFIELD,
             /**
              * Function parameter declaration.
              */
-            PARAMETER;
+            PARAMETER,
+            /**
+             * Type definition declaration.
+             */
+            TYPE;
         }
 
         /**
          * The type associated with this variable declaration.
          * @return The type associated with this variable declaration.
@@ -514,12 +514,12 @@
 
     /**
      * Creates a new typedef declaration with given name and declared type.
      * @param pos the typedef declaration position.
      * @param name the typedef declaration name.
-     * @param decl the typedef declared type
-     * @return a new typedef declaration with given name and declared type.
+     * @param type the typedef type
+     * @return a new type declaration with given name and declared type.
      */
-    static Declaration.Scoped typedef(Position pos, String name, Declaration decl) {
-        return new DeclarationImpl.ScopedImpl(Scoped.Kind.TYPEDEF, List.of(decl), name, pos);
+    static Declaration.Variable typedef(Position pos, String name, Type type) {
+        return new DeclarationImpl.VariableImpl(type, Declaration.Variable.Kind.TYPE, name, pos);
     }
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -215,13 +215,10 @@
         return null;
     }
 
     @Override
     public Void visitScoped(Declaration.Scoped d, Declaration parent) {
-        if (d.kind() == Declaration.Scoped.Kind.TYPEDEF) {
-            return d.members().get(0).accept(this, d);
-        }
         if (d.layout().isEmpty()) {
             //skip decl-only
             return null;
         }
         String name = d.name();
@@ -313,20 +310,34 @@
             return null;
         }
 
         String fieldName = tree.name();
         String symbol = tree.name();
+        Type type = tree.type();
+
+        if (tree.kind() == Declaration.Variable.Kind.TYPE) {
+            if (type instanceof Type.Declared) {
+                Declaration.Scoped s = ((Type.Declared) type).tree();
+                // only generate unnamed for now
+                // skip typedef with different name
+                if (!s.name().isEmpty()) return null;
+                return visitScoped(s, tree);
+            } else {
+                // skip for now
+                return null;
+            }
+        }
+
         assert !symbol.isEmpty();
         assert !fieldName.isEmpty();
 
         // FIXME: we need tree transformer. The mangling should be a separate tree transform phase
         if (parent == null) {
             fieldName = tree.name();
         }
         fieldName = Utils.javaSafeIdentifier(fieldName);
 
-        Type type = tree.type();
         MemoryLayout layout = tree.layout().orElse(Type.layoutFor(type).orElse(null));
         if (layout == null) {
             //no layout - abort
             return null;
         }
@@ -337,12 +348,11 @@
             return null;
         }
 
         MemoryLayout treeLayout = tree.layout().orElseThrow();
         if (parent != null) { //struct field
-            Declaration.Scoped parentC = (Declaration.Scoped) parent;
-            MemoryLayout parentLayout = parentLayout(parentC);
+            MemoryLayout parentLayout = parentLayout(parent);
             structBuilder.addVarHandleGetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
             structBuilder.addGetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
             structBuilder.addSetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
         } else {
             builder.addLayoutGetter(fieldName, layout);
@@ -366,12 +376,20 @@
                     scope.kind() == Declaration.Scoped.Kind.STRUCT ||
                     scope.kind() == Declaration.Scoped.Kind.UNION;
         }
     }
 
-    protected static MemoryLayout parentLayout(Declaration.Scoped parent) {
+    protected static MemoryLayout parentLayout(Declaration parent) {
+        Declaration.Scoped scope;
+        if (parent instanceof Declaration.Variable) {
+            Declaration.Variable v = (Declaration.Variable) parent;
+            assert v.kind() == Declaration.Variable.Kind.TYPE;
+            scope = ((Type.Declared)(v.type())).tree();
+        } else if (parent instanceof Declaration.Scoped) {
+            scope = (Declaration.Scoped) parent;
+        } else {
+            throw new IllegalArgumentException("Unexpected parent declaration");
+        }
         // case like `typedef struct { ... } Foo`
-        return (parent.kind() == Declaration.Scoped.Kind.TYPEDEF
-            ? (Declaration.Scoped) parent.members().get(0)
-            : parent).layout().orElseThrow();
+        return scope.layout().orElseThrow();
     }
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
@@ -152,12 +152,17 @@
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
             if (!(o instanceof Declaration.Variable)) return false;
-            if (!super.equals(o)) return false;
+
             Declaration.Variable variable = (Declaration.Variable) o;
+            if (variable.kind() == Kind.TYPE) {
+                if (!variable.name().equals(name())) return false;
+            } else {
+                if (!super.equals(o)) return false;
+            }
             return kind == variable.kind() &&
                     type.equals(variable.type());
         }
 
         @Override
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
@@ -248,19 +248,21 @@
                 .filter(Objects::nonNull)
                 .filter(d -> isEnum(d) || !d.name().isEmpty() || ((CursorPosition)d.pos()).cursor.isAnonymousStruct())
                 .collect(Collectors.toList());
     }
 
-    private Declaration.Scoped createTypedef(Cursor c) {
-        Optional<Cursor> decl = c.children().findFirst();
-        if (decl.isPresent() && decl.get().isDefinition() && decl.get().spelling().isEmpty()) {
-            Declaration def = createTree(decl.get());
-            if (def instanceof Declaration.Scoped) {
-                return Declaration.typedef(toPos(c), c.spelling(), def);
+    private Declaration.Variable createTypedef(Cursor c) {
+        Type.Delegated typedef = (Type.Delegated) toType(c);
+        Type canonicalType = typedef.type();
+        if (canonicalType instanceof Type.Declared) {
+            Declaration.Scoped s = ((Type.Declared) canonicalType).tree();
+            if (s.name().equals(c.spelling())) {
+                // typedef record with the same name, no need to present twice
+                return null;
             }
         }
-        return null;
+        return Declaration.typedef(toPos(c), c.spelling(), canonicalType);
     }
 
     private Declaration.Variable createVar(Declaration.Variable.Kind kind, Cursor c, VarFactoryNoLayout varFactory) {
         checkCursorAny(c, CursorKind.VarDecl, CursorKind.FieldDecl, CursorKind.ParmDecl);
         if (c.isBitField()) {
diff a/test/jdk/java/jextract/JextractApiTestBase.java b/test/jdk/java/jextract/JextractApiTestBase.java
--- a/test/jdk/java/jextract/JextractApiTestBase.java
+++ b/test/jdk/java/jextract/JextractApiTestBase.java
@@ -21,12 +21,15 @@
  * questions.
  */
 
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Optional;
 import java.util.function.Predicate;
+
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.JextractTask;
 import jdk.incubator.jextract.Type;
 
 import static org.testng.Assert.assertEquals;
@@ -44,17 +47,48 @@
         var task = JextractTask.newTask(false, header);
         Path builtinInc = Paths.get(System.getProperty("java.home"), "conf", "jextract");
         return task.parse(parseOptions);
     }
 
+    public static void checkNames(List<Declaration> members, String... fields) {
+        assertEquals(members.size(), fields.length);
+        for (int i = 0; i < fields.length; i++) {
+            assertEquals(members.get(i).name(), fields[i]);
+        }
+    }
+
     public static Declaration.Scoped checkScoped(Declaration.Scoped toplevel, String name, Declaration.Scoped.Kind kind,  String... fields) {
         Declaration.Scoped scoped = findDecl(toplevel, name, Declaration.Scoped.class);
-        assertEquals(scoped.members().size(), fields.length);
         assertTrue(scoped.kind() == kind);
-        for (int i = 0; i < fields.length; i++) {
-            assertEquals(scoped.members().get(i).name(), fields[i]);
-        }
+        checkNames(scoped.members(), fields);
+        return scoped;
+    }
+
+    private static List<Declaration> getNamedFields(Declaration.Scoped scoped) {
+        List<Declaration> fields = new ArrayList<>();
+        scoped.members().forEach(d -> {
+            if (d instanceof Declaration.Variable) {
+                Declaration.Variable v = (Declaration.Variable) d;
+                if (v.kind() == Declaration.Variable.Kind.FIELD) {
+                    assert (!v.name().isEmpty());
+                    fields.add(v);
+                }
+            } else if (d instanceof Declaration.Scoped) {
+                Declaration.Scoped record = (Declaration.Scoped) d;
+                if (record.name().isEmpty()) {
+                    fields.addAll(getNamedFields(record));
+                } else {
+                    fields.add(record);
+                }
+            }
+        });
+        return fields;
+    }
+
+    public static Declaration.Scoped checkRecord(Declaration.Scoped scoped, String name, Declaration.Scoped.Kind kind,  String... fields) {
+        assertTrue(scoped.kind() == kind);
+        checkNames(getNamedFields(scoped), fields);
         return scoped;
     }
 
     public static Declaration.Scoped checkStruct(Declaration.Scoped toplevel, String name, String... fields) {
         return checkScoped(toplevel, name, Declaration.Scoped.Kind.STRUCT, fields);
@@ -66,30 +100,30 @@
 
     public static Declaration.Scoped checkUnion(Declaration.Scoped toplevel, String name, String... fields) {
         return checkScoped(toplevel, name, Declaration.Scoped.Kind.UNION, fields);
     }
 
-    public static Declaration.Variable checkConstant(Declaration.Scoped scope, String name, Type type) {
+    public static Declaration.Variable checkVariable(Declaration.Scoped scope, String name, Type type) {
         Declaration.Variable var = findDecl(scope, name, Declaration.Variable.class);
         assertTypeEquals(type, var.type());
         return var;
     }
 
     public static Declaration.Variable checkGlobal(Declaration.Scoped toplevel, String name, Type type) {
-        Declaration.Variable global = checkConstant(toplevel, name, type);
+        Declaration.Variable global = checkVariable(toplevel, name, type);
         assertEquals(global.kind(), Declaration.Variable.Kind.GLOBAL);
         return global;
     }
 
     public static Declaration.Variable checkField(Declaration.Scoped record, String name, Type type) {
-        Declaration.Variable global = checkConstant(record, name, type);
+        Declaration.Variable global = checkVariable(record, name, type);
         assertEquals(global.kind(), Declaration.Variable.Kind.FIELD);
         return global;
     }
 
     public static Declaration.Variable checkBitField(Declaration.Scoped record, String name, Type type, int size) {
-        Declaration.Variable global = checkConstant(record, name, type);
+        Declaration.Variable global = checkVariable(record, name, type);
         assertEquals(global.kind(), Declaration.Variable.Kind.BITFIELD);
         assertEquals(global.layout().get().bitSize(), size);
         return global;
     }
 
@@ -163,6 +197,74 @@
             for (int i = 0 ; i < ((Type.Function)expected).argumentTypes().size() ; i++) {
                 assertTypeEquals(((Type.Function)expected).argumentTypes().get(i), ((Type.Function)found).argumentTypes().get(i));
             }
         }
     }
+
+    public static Type unwrapDelegatedType(Type type, Type.Delegated.Kind kind) {
+        assertTrue(type instanceof Type.Delegated,
+                "Expecting Type.Delegated, got " + type.getClass());
+        Type.Delegated delegated = (Type.Delegated) type;
+        assertEquals(delegated.kind(), kind);
+        return delegated.type();
+    }
+
+    public static Type unwrapPointerType(Type type) {
+        return unwrapDelegatedType(type, Type.Delegated.Kind.POINTER);
+    }
+
+    public static Type unwrapTypedefType(Type type) {
+        return unwrapDelegatedType(type, Type.Delegated.Kind.TYPEDEF);
+    }
+
+    public static Type unwrapArrayType(Type type, long size) {
+        assertTrue(type instanceof Type.Array,
+                "Expecting Type.Array, got " + type.getClass());
+        Type.Array arType = (Type.Array) type;
+        assertEquals(arType.elementCount().getAsLong(), size);
+        return arType.elementType();
+    }
+
+    public static Type unwrapArrayType(Type type) {
+        assertTrue(type instanceof Type.Array,
+                "Expecting Type.Array, got " + type.getClass());
+        Type.Array arType = (Type.Array) type;
+        assertTrue(arType.elementCount().isEmpty());
+        return arType.elementType();
+    }
+
+    static class TypeUnwrapper {
+        private Type type;
+
+        private TypeUnwrapper(Type type) {
+            this.type = type;
+        }
+
+        public static TypeUnwrapper of(Type type) {
+            return new TypeUnwrapper(type);
+        }
+
+        public TypeUnwrapper unwrapPointer() {
+            type = unwrapPointerType(type);
+            return this;
+        }
+
+        public TypeUnwrapper unwrapTypedef() {
+            type = unwrapTypedefType(type);
+            return this;
+        }
+
+        public TypeUnwrapper unwrapArray(long size) {
+            type = unwrapArrayType(type, size);
+            return this;
+        }
+
+        public TypeUnwrapper unwrapArray() {
+            type = unwrapArrayType(type);
+            return this;
+        }
+
+        public Type get() {
+            return type;
+        }
+    }
 }
diff a/test/jdk/java/jextract/TestAnonymousDecl.java b/test/jdk/java/jextract/TestAnonymousDecl.java
--- /dev/null
+++ b/test/jdk/java/jextract/TestAnonymousDecl.java
@@ -0,0 +1,185 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @build JextractApiTestBase
+ * @modules jdk.incubator.jbind/jdk.incubator.jbind jdk.incubator.jextract/jdk.internal.jextract.impl
+ * @run testng/othervm -ea TestAnonymousDecl
+ */
+
+import java.util.Set;
+import java.util.Optional;
+import java.util.function.Consumer;
+import jdk.incubator.jbind.AnonymousRegistry;
+import jdk.incubator.jbind.SymbolDependencyCollector;
+import jdk.incubator.jextract.Declaration;
+import jdk.incubator.jextract.Type;
+
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
+
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+import static org.testng.Assert.fail;
+
+public class TestAnonymousDecl extends JextractApiTestBase {
+    Declaration.Scoped root;
+
+    @BeforeClass
+    public void parse() {
+        root = parse("anonymousDecl.h");
+        System.out.println(root);
+    }
+
+    private String brief(AnonymousRegistry registry, Declaration decl) {
+        StringBuilder sb = new StringBuilder();
+        sb.append(registry.getName(decl).get());
+        sb.append(" for ");
+        if (decl instanceof Declaration.Scoped) {
+            sb.append(((Declaration.Scoped)decl).kind());
+        } else if (decl instanceof Declaration.Variable) {
+            sb.append(((Declaration.Variable)decl).kind());
+        } else {
+            sb.append(decl.getClass().getSimpleName());
+        }
+        sb.append(" ")
+          .append(decl.name())
+          .append("@")
+          .append(decl.pos().toString());
+        return sb.toString();
+    }
+
+    @SuppressWarnings("unchecked")
+    public static <D extends Declaration> D findDecl(Set<Declaration> set, String name, Class<D> declType) {
+        Optional<Declaration> d = set.stream().filter(byNameAndType(name, declType)).findAny();
+        if (d.isEmpty()) {
+            fail("No declaration with name " + name + " found");
+            return null;
+        }
+        return (D) d.get();
+    }
+
+    public static void checkStructType(Type actual, String name, String... fields) {
+        Declaration.Scoped s = ((Type.Declared) actual).tree();
+        checkRecord(s, name, Declaration.Scoped.Kind.STRUCT, fields);
+    }
+
+    private Declaration.Scoped assertDeclaredTypedef(Declaration.Variable decl) {
+        assertEquals(decl.kind(), Declaration.Variable.Kind.TYPE);
+        Type type = decl.type();
+        assertTrue(type instanceof Type.Declared);
+        return ((Type.Declared) type).tree();
+    }
+
+    private void validatePointT(Set<Declaration> deps) {
+        Declaration.Scoped point = checkStruct(root, "point", "x", "y");
+        assertEquals(findDecl(deps, "point", Declaration.Scoped.class), point);
+        Declaration.Variable point_t = findDecl(deps, "point_t", Declaration.Variable.class);
+        assertEquals(point_t.kind(), Declaration.Variable.Kind.TYPE);
+        assertTypeEquals(point_t.type(), Type.declared(point));
+    }
+
+    private void validateCircleT(Set<Declaration> deps) {
+        Declaration.Variable circle_t = findDecl(deps, "circle_t", Declaration.Variable.class);
+        Declaration.Scoped s = assertDeclaredTypedef(circle_t);
+        checkRecord(s, "", Declaration.Scoped.Kind.STRUCT, "center", "radius");
+        Declaration.Variable center = findDecl(s, "center", Declaration.Variable.class);
+        assertEquals(center.kind(), Declaration.Variable.Kind.FIELD);
+        checkStructType(center.type(), "", "x", "y");
+    }
+
+    private void validateShapeT(Set<Declaration> deps) {
+        Declaration.Variable shape_t = findDecl(deps, "shape_t", Declaration.Variable.class);
+        Declaration.Scoped struct = assertDeclaredTypedef(shape_t);
+        checkRecord(struct, "", Declaration.Scoped.Kind.STRUCT, "kind", "line", "circle", "polygon");
+        // TODO: More specific
+        validatePointT(deps);
+        validateCircleT(deps);
+    }
+
+    @Test
+    public void testDependencyVar() {
+        AnonymousRegistry registry = new AnonymousRegistry();
+        Declaration.Variable canvas = findDecl(root, "canvas_size", Declaration.Variable.class);
+        Set<Declaration> deps = SymbolDependencyCollector.collect(canvas, registry);
+        System.out.println("Dependency of canvas_size:");
+        deps.forEach(d -> System.out.println(brief(registry, d)));
+        assertEquals(deps.size(), 1);
+        Declaration.Variable v = findDecl(deps, "canvas_size", Declaration.Variable.class);
+        assertEquals(v.kind(), Declaration.Variable.Kind.TYPE);
+        assertEquals(v.pos(), canvas.pos());
+        checkStructType(v.type(), "", "width", "height");
+    }
+
+    @Test
+    public void testDependencyFn() {
+        AnonymousRegistry registry = new AnonymousRegistry();
+        Declaration.Function makeCircle = findDecl(root, "makeCircle", Declaration.Function.class);
+        Set<Declaration> deps = SymbolDependencyCollector.collect(makeCircle, registry);
+        System.out.println("Dependency of makeCircle:");
+        deps.forEach(d -> System.out.println(brief(registry, d)));
+        validateShapeT(deps);
+        validatePointT(deps);
+    }
+
+    @Test
+    public void testDependencyTypedef() {
+        Declaration.Variable shape_t = findDecl(root, "shape_t", Declaration.Variable.class);
+        Declaration.Scoped shape = assertDeclaredTypedef(shape_t);
+        assertEquals(shape.kind(), Declaration.Scoped.Kind.STRUCT);
+        final AnonymousRegistry regShape = new AnonymousRegistry();
+        Set<Declaration> deps = SymbolDependencyCollector.collect(shape_t, regShape);
+        System.out.println("Dependency of shape:");
+        deps.forEach(d -> System.out.println(brief(regShape, d)));
+        validateShapeT(deps);
+    }
+
+    @Test
+    public void testRegistry() {
+        AnonymousRegistry registry = new AnonymousRegistry();
+        SymbolDependencyCollector.collect(root, registry);
+        root.accept(WALKER, d -> System.out.println(registry.getName(d).orElseThrow() + ": " + d));
+    }
+
+    private static Declaration.Visitor<Void, Consumer<Declaration>> WALKER = new Declaration.Visitor<>() {
+        @Override
+        public Void visitScoped(Declaration.Scoped scope, Consumer<Declaration> act) {
+            act.accept(scope);
+            scope.members().forEach(m -> m.accept(this, act));
+            return null;
+        }
+
+        @Override
+        public Void visitFunction(Declaration.Function func, Consumer<Declaration> act) {
+            SymbolDependencyCollector.collect(func, new AnonymousRegistry()).forEach(act);
+            return null;
+        }
+
+        @Override
+        public Void visitDeclaration(Declaration d, Consumer<Declaration> act) {
+            act.accept(d);
+            return null;
+        }
+    };
+}
diff a/test/jdk/java/jextract/TestTypedef.java b/test/jdk/java/jextract/TestTypedef.java
--- /dev/null
+++ b/test/jdk/java/jextract/TestTypedef.java
@@ -0,0 +1,228 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @build JextractApiTestBase
+ * @run testng/othervm -ea TestTypedef
+ */
+
+import java.util.Set;
+import java.util.Optional;
+import java.util.function.Consumer;
+import jdk.incubator.jextract.Declaration;
+import jdk.incubator.jextract.Type;
+
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
+
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertNotEquals;
+import static org.testng.Assert.assertTrue;
+import static org.testng.Assert.fail;
+
+public class TestTypedef extends JextractApiTestBase {
+    Declaration.Scoped root;
+
+    @BeforeClass
+    public void parse() {
+        root = parse("testTypedef.h");
+        System.out.println(root);
+    }
+
+    private Declaration[] findAllWithName(Declaration.Scoped scope, String name) {
+        return scope.members().stream().filter(byName(name)).toArray(Declaration[]::new);
+    }
+
+    public static Type getTypedefType(Declaration.Scoped scope, String name) {
+        Declaration.Variable variable = findDecl(scope, name, Declaration.Variable.class);
+        assertEquals(variable.kind(), Declaration.Variable.Kind.TYPE);
+        Type type = variable.type();
+        // Typedef declaration should return canonical type
+        if (type instanceof Type.Delegated) {
+            assertNotEquals(((Type.Delegated) type).kind(), Type.Delegated.Kind.TYPEDEF);
+        }
+        return variable.type();
+    }
+
+    private Declaration.Scoped assertDeclaredTypedef(Declaration.Variable decl) {
+        assertEquals(decl.kind(), Declaration.Variable.Kind.TYPE);
+        Type type = decl.type();
+        assertTrue(type instanceof Type.Declared, "Expecting Type.Declared, got " + type.getClass());
+        return ((Type.Declared) type).tree();
+    }
+
+    private Declaration.Scoped assertAnonymousRecord(Declaration.Scoped scope, String name) {
+        Declaration[] ar = findAllWithName(scope, name);
+        assertEquals(ar.length, 1);
+        assertTrue(ar[0] instanceof Declaration.Variable, "Expectint Declaration.Variable, but got " + ar[0].getClass());
+        Declaration.Scoped record = assertDeclaredTypedef((Declaration.Variable) ar[0]);
+        return record;
+    }
+
+    private Declaration.Scoped assertNamedRecord(Declaration.Scoped scope, String name) {
+        Declaration[] ar = findAllWithName(scope, name);
+        assertEquals(ar.length, 1);
+        assertTrue(ar[0] instanceof Declaration.Scoped, "Expectint Declaration.Scoped, but got " + ar[0].getClass());
+        return (Declaration.Scoped) ar[0];
+    }
+
+    @Test
+    public void NoDuplicateSameNameTypedef() {
+        // When typedef a named record with the same name, present the scoped
+        // declaration and ignore the typedef
+        Declaration.Scoped s = assertNamedRecord(root, "Point3D");
+        assertEquals(s.kind(), Declaration.Scoped.Kind.STRUCT);
+        checkNames(s.members(), "i", "j", "k");
+
+        s = assertNamedRecord(root, "SIZE");
+        assertEquals(s.kind(), Declaration.Scoped.Kind.ENUM);
+        checkNames(s.members(), "XS", "S", "M", "L", "XL");
+    }
+
+    @Test
+    public void TypedefReferences() {
+        // When reference to a typedef, the Type should be Type.Delegated
+        // With the type to be the referenced type
+        Declaration.Scoped pt3d = checkStruct(root, "Point3D", "i", "j", "k");
+        Declaration.Function drawParamid = findDecl(root, "drawParamid", Declaration.Function.class);
+        Type.Function fnType = drawParamid.type();
+        // Array in function argument is lowered to pointer
+        Type type = TypeUnwrapper.of(fnType.argumentTypes().get(0))
+                        .unwrapPointer().unwrapTypedef().get();
+        assertEquals(type, Type.declared(pt3d));
+
+        Declaration.Function do_ops = findDecl(root, "do_ops", Declaration.Function.class);
+        fnType = do_ops.type();
+        type = unwrapTypedefType(fnType.returnType());
+        assertEquals(type, getTypedefType(root, "op_sequence"));
+        type = fnType.argumentTypes().get(0);
+        type = unwrapTypedefType(type);
+        assertEquals(type, getTypedefType(root, "int_op"));
+        type = fnType.argumentTypes().get(1);
+        type = unwrapTypedefType(type);
+        assertEquals(type, getTypedefType(root, "count_t"));
+    }
+
+    @Test
+    public void TypedefsToSameType()  {
+        // For typedef declaration, the type will be the canonical type
+        // Which means, the type will not be another typedef
+        // However, it can be other delegated type or an array
+        Declaration.Scoped pt = checkStruct(root, "Point", "i", "j");
+        Type.Declared type = Type.declared(pt);
+        assertEquals(getTypedefType(root, "POINT"), type);
+        assertEquals(getTypedefType(root, "point_t"), type);
+
+        Type canonical = TypeUnwrapper.of(getTypedefType(root, "rectangle"))
+                .unwrapArray(4)
+                // FIXME? If we would like to generate array using typedef type
+                // then we need to use typedef as array element type and
+                // requires following line to pass the test.
+                // .unwrapTypedef()
+                .get();
+        assertEquals(canonical, type);
+
+        Declaration.Variable canvas = findDecl(root, "canvas", Declaration.Variable.class);
+        assertEquals(canvas.kind(), Declaration.Variable.Kind.GLOBAL);
+        Type ref = TypeUnwrapper.of(canvas.type())
+            .unwrapTypedef()
+            .unwrapArray(4)
+            .get();
+        assertEquals(ref, type);
+
+        getTypedefType(root, "count_t");
+    }
+
+    @Test
+    public void TypedefsArrays()  {
+        Type intType = getTypedefType(root, "cordinate_t");
+
+        // As noted earlier, we currently have canonical array element type from typedef
+        Type type = getTypedefType(root, "location2D");
+        Type elementType = unwrapArrayType(type, 2);
+        assertEquals(elementType, intType);
+
+        Type count_t = getTypedefType(root, "count_t");
+        type = getTypedefType(root, "dimensions");
+        elementType = unwrapArrayType(type);
+        assertEquals(elementType, count_t);
+        type = getTypedefType(root, "count_ptr");
+        assertEquals(type, Type.pointer(count_t));
+    }
+
+    @Test
+    public void AnonymousRecordTypedef() {
+        // For anonymous typedef, present the typedef declaration and
+        // the Scope declaration can be obtained via Variable.type()
+        Declaration.Scoped record = assertAnonymousRecord(root, "op_sequence");
+        assertEquals(record.kind(), Declaration.Scoped.Kind.STRUCT);
+        checkNames(record.members(), "times", "op");
+
+        record = assertAnonymousRecord(root, "IntOrFloat");
+        assertEquals(record.kind(), Declaration.Scoped.Kind.UNION);
+        checkNames(record.members(), "i", "f");
+
+        record = assertAnonymousRecord(root, "codetype_t");
+        assertEquals(record.kind(), Declaration.Scoped.Kind.ENUM);
+        checkNames(record.members(), "Java", "C", "CPP", "Python", "Ruby");
+    }
+
+    @Test
+    public void CheckAnonyousDeclarations() {
+        // Should we expunge anonymous declaration?
+        // They only needed if referenced as a field or gloabal variable
+        // Exception enum, as they can be used as pleased, so we need to
+        // elevate them into constants.
+        // Anyhow, current implementation pass through enum, not elevate them.
+        // So we just check that
+        Declaration[] ar = findAllWithName(root, "");
+        assertEquals(ar.length, 2);
+        Declaration.Scoped e = (Declaration.Scoped) ar[0];
+        assertEquals(e.kind(), Declaration.Scoped.Kind.ENUM);
+        checkNames(e.members(), "RED", "GREEN", "BLUE");
+        e = (Declaration.Scoped) ar[1];
+        assertEquals(e.kind(), Declaration.Scoped.Kind.ENUM);
+        checkNames(e.members(), "Java", "C", "CPP", "Python", "Ruby");
+    }
+
+    @Test
+    public void CheckFunctionPointers() {
+        Type intType = getTypedefType(root, "cordinate_t");
+        Type intOpType = getTypedefType(root, "int_op");
+        assertEquals(intOpType, Type.pointer(Type.function(false, intType, intType)));
+        Type intOp2Type = getTypedefType(root, "int_op2");
+        assertEquals(intOp2Type, Type.pointer(Type.function(false, intType, intType, intType)));
+
+        checkGlobal(root, "another_int_op", intOpType);
+
+        Declaration.Function getFn = findDecl(root, "getFn", Declaration.Function.class);
+        assertEquals(getFn.parameters().size(), 0);
+        Type.Delegated retType = (Type.Delegated) getFn.type().returnType();
+        assertTrue(retType.kind() == Type.Delegated.Kind.POINTER);
+        Type.Function fnType = (Type.Function) retType.type();
+        assertEquals(fnType.returnType(), Type.void_());
+        assertEquals(fnType.argumentTypes().get(1),
+                Type.typedef("count_t", getTypedefType(root, "count_t")));
+    }
+}
diff a/test/jdk/java/jextract/anonymousDecl.h b/test/jdk/java/jextract/anonymousDecl.h
--- /dev/null
+++ b/test/jdk/java/jextract/anonymousDecl.h
@@ -0,0 +1,90 @@
+#ifndef __ANONYMOUS_DECLARATION__
+#define __ANONYMOUS_DECLARATION__
+
+// Anonymous struct as golbal variable
+struct {
+    int width;
+    int height;
+} canvas_size;
+
+// Anonymous struct typedef and anonymous struct as field
+typedef struct {
+    struct {
+        int x;
+        int y;
+    } center;
+    int radius;
+} circle_t;
+
+// Typedef with named struct
+typedef struct point {
+    int x;
+    int y;
+} point_t;
+
+// Anonymous enum and union as field
+typedef struct {
+    enum {
+        LINE,
+        CIRCLE,
+        POLYGON
+    } kind;
+    union {
+        struct {
+            point_t a;
+            point_t b;
+        } line;
+        circle_t circle;
+        struct {
+            int sides;
+            struct point *vertices;
+        } polygon;
+    };
+} shape_t;
+
+// Completely anonymous enum
+enum {
+    RED = 0xff0000,
+    GREEN = 0x00ff00,
+    BLUE = 0x0000ff
+};
+
+// Typedef anonymous enum
+typedef enum {
+   Java,
+   C,
+   CPP,
+   Python,
+   Ruby
+} codetype_t;
+
+// Named enum
+enum SIZE {
+   XS,
+   S,
+   M,
+   L,
+   XL,
+   XXL
+};
+
+// Cannot have anonymous type in function, leads to visibility warning.
+// While it's possible, make no sense to use in header file
+shape_t makeCircle(point_t center, int radius);
+
+// Make a right triangle by moving down delta.x and move right delta.y from origin.
+typedef point_t delta_t;
+shape_t makeRightTriangle(struct point origin, delta_t delta);
+
+int byArea(long *area_calculator(shape_t*), shape_t *s1, shape_t *s2);
+
+typedef int (*comparator)(shape_t *s1, shape_t *s2);
+typedef long (*quantifyShape)(shape_t *shape);
+
+comparator compareBy(quantifyShape calculator);
+
+long area(shape_t *shape);
+
+extern comparator compareByArea; // = compareBy(area);
+
+#endif // __ANONYMOUS_DECLARATION__
diff a/test/jdk/java/jextract/testTypedef.h b/test/jdk/java/jextract/testTypedef.h
--- /dev/null
+++ b/test/jdk/java/jextract/testTypedef.h
@@ -0,0 +1,90 @@
+typedef unsigned long count_t;
+typedef int (*int_op)(int);
+typedef int (*int_op2)(int, int);
+
+typedef struct {
+    count_t times;
+    int_op op;
+} op_sequence;
+
+int_op add;
+
+// Global variable with unnamed function type
+int (*another_int_op)(int);
+
+// Function prototype
+op_sequence do_ops(int_op op, count_t times);
+
+// anonymous typedef
+typedef union {
+    int i;
+    float f;
+} IntOrFloat;
+
+// Completely anonymous enum
+enum {
+    RED = 0xff0000,
+    GREEN = 0x00ff00,
+    BLUE = 0x0000ff
+};
+
+typedef enum SIZE {
+    XS,
+    S,
+    M,
+    L,
+    XL
+} SIZE;
+
+// Typedef anonymous enum
+typedef enum {
+   Java,
+   C,
+   CPP,
+   Python,
+   Ruby
+} codetype_t;
+
+// declaration only
+struct Point;
+// definition
+struct Point {
+   int i;
+   int j;
+};
+// different name struct typedef
+typedef struct Point POINT;
+// layered typedef
+typedef POINT point_t;
+typedef point_t rectangle[4];
+
+rectangle canvas;
+
+typedef int cordinate_t;
+typedef cordinate_t location2D[2];
+typedef count_t dimensions[];
+typedef count_t *count_ptr;
+
+// same name struct typedef
+typedef struct Point3D {
+    int i;
+    int j;
+    int k;
+} Point3D;
+// User of same name typedef
+void drawParamid(Point3D vertices[4]);
+
+// anonymous types not references
+struct {
+    int foo;
+    int bar;
+};
+
+static union {
+    int i;
+    long l;
+};
+
+// No way to declare anonymous function type
+// But here is a function getFn to return a function type
+void (*getFn(void))(int, count_t, int_op);
diff a/test/jdk/tools/jextract/JextractToolRunner.java b/test/jdk/tools/jextract/JextractToolRunner.java
--- a/test/jdk/tools/jextract/JextractToolRunner.java
+++ b/test/jdk/tools/jextract/JextractToolRunner.java
@@ -92,16 +92,16 @@
             this.exitCode = exitCode;
             this.output = output;
         }
 
         protected JextractResult checkSuccess() {
-            assertEquals(exitCode, 0, "Sucess excepted, failed: " + exitCode);
+            assertEquals(exitCode, 0, "Sucess expected, failed: " + exitCode);
             return this;
         }
 
         protected JextractResult checkFailure() {
-            assertNotEquals(exitCode, 0, "Failure excepted, succeeded!");
+            assertNotEquals(exitCode, 0, "Failure expected, succeeded!");
             return this;
         }
 
         protected JextractResult checkContainsOutput(String expected) {
             Objects.requireNonNull(expected);
