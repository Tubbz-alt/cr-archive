diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
@@ -191,10 +191,21 @@
          * @return The scoped declaration kind.
          */
         Kind kind();
     }
 
+    /**
+     * A typedef declaration
+     */
+    interface Typedef extends Declaration {
+        /**
+         * The canonical type associated with this typedef declaration.
+         * @return The canonical type associated with this typedef declaration.
+         */
+        Type type();
+    }
+
     /**
      * A variable declaration.
      */
     interface Variable extends Declaration {
         /**
@@ -295,10 +306,18 @@
          * @param p the visitor parameter.
          * @return the result of visiting the given constant declaration through this visitor object.
          */
         default R visitConstant(Constant d, P p) { return visitDeclaration(d, p); }
 
+        /**
+         * Visit a typedef declaration.
+         * @param d the typedef declaration.
+         * @param p the visitor parameter.
+         * @return the result of visiting the given typedef declaration through this visitor object.
+         */
+        default R visitTypedef(Typedef d, P p) { return visitDeclaration(d, p); }
+
         /**
          * Visit a declaration.
          * @param d the declaration.
          * @param p the visitor parameter.
          * @return the result of visiting the given declaration through this visitor object.
@@ -517,9 +536,9 @@
      * @param pos the typedef declaration position.
      * @param name the typedef declaration name.
      * @param type the typedef type
      * @return a new type declaration with given name and declared type.
      */
-    static Declaration.Variable typedef(Position pos, String name, Type type) {
-        return new DeclarationImpl.VariableImpl(type, Declaration.Variable.Kind.TYPE, name, pos);
+    static Declaration.Typedef typedef(Position pos, String name, Type type) {
+        return new DeclarationImpl.TypedefImpl(type, name, pos, null);
     }
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -302,42 +302,42 @@
         } else {
             return null;
         }
     }
 
+    @Override
+    public Void visitTypedef(Declaration.Typedef tree, Declaration parent) {
+        Type type = tree.type();
+        if (type instanceof Type.Declared) {
+            Declaration.Scoped s = ((Type.Declared) type).tree();
+            // only generate unnamed for now
+            // skip typedef with different name
+            if (s.name().isEmpty()) {
+                return visitScoped(s, tree);
+            }
+        }
+        return null;
+    }
+
     @Override
     public Void visitVariable(Declaration.Variable tree, Declaration parent) {
         if (parent == null && variableSeen(tree)) {
             return null;
         }
 
         String fieldName = tree.name();
         String symbol = tree.name();
-        Type type = tree.type();
-
-        if (tree.kind() == Declaration.Variable.Kind.TYPE) {
-            if (type instanceof Type.Declared) {
-                Declaration.Scoped s = ((Type.Declared) type).tree();
-                // only generate unnamed for now
-                // skip typedef with different name
-                if (!s.name().isEmpty()) return null;
-                return visitScoped(s, tree);
-            } else {
-                // skip for now
-                return null;
-            }
-        }
-
         assert !symbol.isEmpty();
         assert !fieldName.isEmpty();
 
         // FIXME: we need tree transformer. The mangling should be a separate tree transform phase
         if (parent == null) {
             fieldName = tree.name();
         }
         fieldName = Utils.javaSafeIdentifier(fieldName);
 
+        Type type = tree.type();
         MemoryLayout layout = tree.layout().orElse(Type.layoutFor(type).orElse(null));
         if (layout == null) {
             //no layout - abort
             return null;
         }
@@ -377,19 +377,16 @@
                     scope.kind() == Declaration.Scoped.Kind.UNION;
         }
     }
 
     protected static MemoryLayout parentLayout(Declaration parent) {
-        Declaration.Scoped scope;
-        if (parent instanceof Declaration.Variable) {
-            Declaration.Variable v = (Declaration.Variable) parent;
-            assert v.kind() == Declaration.Variable.Kind.TYPE;
-            scope = ((Type.Declared)(v.type())).tree();
+        if (parent instanceof Declaration.Typedef) {
+            Declaration.Typedef alias = (Declaration.Typedef) parent;
+            return Type.layoutFor(alias.type()).orElseThrow();
         } else if (parent instanceof Declaration.Scoped) {
-            scope = (Declaration.Scoped) parent;
+            return ((Declaration.Scoped) parent).layout().orElseThrow();
         } else {
             throw new IllegalArgumentException("Unexpected parent declaration");
         }
         // case like `typedef struct { ... } Foo`
-        return scope.layout().orElseThrow();
     }
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
@@ -97,10 +97,54 @@
     @Override
     public int hashCode() {
         return Objects.hash(name);
     }
 
+    public static final class TypedefImpl extends DeclarationImpl implements Declaration.Typedef {
+        final Type type;
+
+        public TypedefImpl(Type type, String name, Position pos, Map<String, List<Constable>> attrs) {
+            super(name, pos, attrs);
+            this.type = Objects.requireNonNull(type);
+        }
+
+        @Override
+        public <R, D> R accept(Visitor<R, D> visitor, D data) {
+            return visitor.visitTypedef(this, data);
+        }
+
+        @Override
+        public Type type() {
+            return type;
+        }
+
+        @Override
+        public Typedef withAttributes(Map<String, List<Constable>> attrs) {
+            return new TypedefImpl(type, name(), pos(), attrs);
+        }
+
+        @Override
+        public Typedef stripAttributes() {
+            return new TypedefImpl(type, name(), pos(), null);
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (!(o instanceof Declaration.Typedef)) return false;
+
+            Declaration.Typedef other = (Declaration.Typedef) o;
+            return name().equals(other.name()) &&
+                    type.equals(other.type());
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(super.hashCode(), type);
+        }
+    }
+
     public static final class VariableImpl extends DeclarationImpl implements Declaration.Variable {
 
         final Variable.Kind kind;
         final Type type;
         final Optional<MemoryLayout> layout;
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/PrettyPrinter.java
@@ -47,11 +47,11 @@
     }
 
     void indent() {
         builder.append("                                                                                           ".substring(0, align));
     }
-    
+
     StringBuilder builder = new StringBuilder();
 
     private void getAttributes(Declaration decl) {
         Set<String> attrs = decl.attributeNames();
         if (attrs.isEmpty()) {
@@ -116,10 +116,19 @@
         builder.append("\n");
         getAttributes(d);
         return null;
     }
 
+    @Override
+    public Void visitTypedef(Declaration.Typedef d, Void aVoid) {
+        indent();
+        builder.append("Typedef: ").append(d.name()).append(" = ")
+               .append(d.type().accept(typeVisitor, null)).append("\n");
+        getAttributes(d);
+        return null;
+    }
+
     private static Type.Visitor<String, Void> typeVisitor = new Type.Visitor<>() {
         @Override
         public String visitPrimitive(Type.Primitive t, Void aVoid) {
             return t.kind().toString() + t.layout().map(l -> "(layout = " + l + ")").orElse("");
         }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
@@ -248,11 +248,11 @@
                 .filter(Objects::nonNull)
                 .filter(d -> isEnum(d) || !d.name().isEmpty() || ((CursorPosition)d.pos()).cursor.isAnonymousStruct())
                 .collect(Collectors.toList());
     }
 
-    private Declaration.Variable createTypedef(Cursor c) {
+    private Declaration.Typedef createTypedef(Cursor c) {
         Type.Delegated typedef = (Type.Delegated) toType(c);
         Type canonicalType = typedef.type();
         if (canonicalType instanceof Type.Declared) {
             Declaration.Scoped s = ((Type.Declared) canonicalType).tree();
             if (s.name().equals(c.spelling())) {
diff a/test/jdk/java/jextract/TestTypedef.java b/test/jdk/java/jextract/TestTypedef.java
--- a/test/jdk/java/jextract/TestTypedef.java
+++ b/test/jdk/java/jextract/TestTypedef.java
@@ -53,32 +53,30 @@
     private Declaration[] findAllWithName(Declaration.Scoped scope, String name) {
         return scope.members().stream().filter(byName(name)).toArray(Declaration[]::new);
     }
 
     public static Type getTypedefType(Declaration.Scoped scope, String name) {
-        Declaration.Variable variable = findDecl(scope, name, Declaration.Variable.class);
-        assertEquals(variable.kind(), Declaration.Variable.Kind.TYPE);
-        Type type = variable.type();
+        Declaration.Typedef d = findDecl(scope, name, Declaration.Typedef.class);
+        Type type = d.type();
         // Typedef declaration should return canonical type
         if (type instanceof Type.Delegated) {
             assertNotEquals(((Type.Delegated) type).kind(), Type.Delegated.Kind.TYPEDEF);
         }
-        return variable.type();
+        return d.type();
     }
 
-    private Declaration.Scoped assertDeclaredTypedef(Declaration.Variable decl) {
-        assertEquals(decl.kind(), Declaration.Variable.Kind.TYPE);
+    private Declaration.Scoped assertDeclaredTypedef(Declaration.Typedef decl) {
         Type type = decl.type();
         assertTrue(type instanceof Type.Declared, "Expecting Type.Declared, got " + type.getClass());
         return ((Type.Declared) type).tree();
     }
 
     private Declaration.Scoped assertAnonymousRecord(Declaration.Scoped scope, String name) {
         Declaration[] ar = findAllWithName(scope, name);
         assertEquals(ar.length, 1);
-        assertTrue(ar[0] instanceof Declaration.Variable, "Expectint Declaration.Variable, but got " + ar[0].getClass());
-        Declaration.Scoped record = assertDeclaredTypedef((Declaration.Variable) ar[0]);
+        assertTrue(ar[0] instanceof Declaration.Typedef, "Expectint Declaration.Typedef, but got " + ar[0].getClass());
+        Declaration.Scoped record = assertDeclaredTypedef((Declaration.Typedef) ar[0]);
         return record;
     }
 
     private Declaration.Scoped assertNamedRecord(Declaration.Scoped scope, String name) {
         Declaration[] ar = findAllWithName(scope, name);
