diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
@@ -248,19 +248,21 @@
                 .filter(Objects::nonNull)
                 .filter(d -> isEnum(d) || !d.name().isEmpty() || ((CursorPosition)d.pos()).cursor.isAnonymousStruct())
                 .collect(Collectors.toList());
     }
 
-    private Declaration.Scoped createTypedef(Cursor c) {
-        Optional<Cursor> decl = c.children().findFirst();
-        if (decl.isPresent() && decl.get().isDefinition() && decl.get().spelling().isEmpty()) {
-            Declaration def = createTree(decl.get());
-            if (def instanceof Declaration.Scoped) {
-                return Declaration.typedef(toPos(c), c.spelling(), def);
+    private Declaration.Typedef createTypedef(Cursor c) {
+        Type.Delegated typedef = (Type.Delegated) toType(c);
+        Type canonicalType = typedef.type();
+        if (canonicalType instanceof Type.Declared) {
+            Declaration.Scoped s = ((Type.Declared) canonicalType).tree();
+            if (s.name().equals(c.spelling())) {
+                // typedef record with the same name, no need to present twice
+                return null;
             }
         }
-        return null;
+        return Declaration.typedef(toPos(c), c.spelling(), canonicalType);
     }
 
     private Declaration.Variable createVar(Declaration.Variable.Kind kind, Cursor c, VarFactoryNoLayout varFactory) {
         checkCursorAny(c, CursorKind.VarDecl, CursorKind.FieldDecl, CursorKind.ParmDecl);
         if (c.isBitField()) {
