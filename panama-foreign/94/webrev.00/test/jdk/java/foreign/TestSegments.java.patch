diff a/test/jdk/java/foreign/TestSegments.java b/test/jdk/java/foreign/TestSegments.java
--- a/test/jdk/java/foreign/TestSegments.java
+++ b/test/jdk/java/foreign/TestSegments.java
@@ -28,26 +28,25 @@
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
+import org.testng.annotations.DataProvider;
+import org.testng.annotations.Test;
 
 import java.lang.invoke.VarHandle;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.nio.ByteOrder;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Spliterator;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
-import java.util.function.Consumer;
 import java.util.function.LongFunction;
 import java.util.stream.Stream;
 
-import org.testng.annotations.*;
-
 import static org.testng.Assert.*;
 
 public class TestSegments {
 
     @Test(dataProvider = "badSizeAndAlignments", expectedExceptions = IllegalArgumentException.class)
@@ -99,21 +98,28 @@
     }
 
     @Test
     public void testNothingSegmentAccess() {
         VarHandle longHandle = MemoryLayouts.JAVA_LONG.varHandle(long.class);
-        long[] values = { 0L, Integer.MAX_VALUE - 1, (long)Integer.MAX_VALUE + 1 };
+        long[] values = { 0L, Integer.MAX_VALUE - 1, (long) Integer.MAX_VALUE + 1 };
         for (long value : values) {
             MemoryAddress addr = MemoryAddress.ofLong(value);
             try {
                 longHandle.get(addr);
             } catch (UnsupportedOperationException ex) {
                 assertTrue(ex.getMessage().contains("Required access mode"));
             }
         }
     }
 
+    @Test(expectedExceptions = UnsupportedOperationException.class)
+    public void testNothingSegmentOffset() {
+        MemoryAddress addr = MemoryAddress.ofLong(42);
+        assertNull(addr.segment());
+        addr.segmentOffset();
+    }
+
     @Test
     public void testSlices() {
         VarHandle byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)
                 .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());
         try (MemorySegment segment = MemorySegment.allocateNative(10)) {
@@ -123,11 +129,11 @@
             }
             long start = 0;
             MemoryAddress base = segment.baseAddress();
             MemoryAddress last = base.addOffset(10);
             while (!base.equals(last)) {
-                MemorySegment slice = segment.asSlice(base.offset(), 10 - start);
+                MemorySegment slice = segment.asSlice(base.segmentOffset(), 10 - start);
                 for (long i = start ; i < 10 ; i++) {
                     assertEquals(
                             byteHandle.get(segment.baseAddress(), i),
                             byteHandle.get(slice.baseAddress(), i - start)
                     );
