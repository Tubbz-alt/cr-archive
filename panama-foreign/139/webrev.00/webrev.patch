diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
@@ -27,11 +27,11 @@
     static final LibraryLookup[] libraries(String... libNames) {
         if (libNames.length == 0) {
             return new LibraryLookup[] { LibraryLookup.ofDefault() };
         } else {
             return Arrays.stream(libNames)
-                .map(libName -> LibraryLookup.ofLibrary(MH_LOOKUP, libName))
+                .map(libName -> LibraryLookup.ofLibrary(libName))
                 .toArray(LibraryLookup[]::new);
         }
     }
 
     private static final Optional<MemoryAddress> lookup(LibraryLookup[] LIBRARIES, String sym) {
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java
@@ -56,12 +56,12 @@
         } else {
             Path[] paths = Arrays.stream(libPaths).map(Paths::get).toArray(Path[]::new);
             return Arrays.stream(libNames).map(libName -> {
                 Optional<Path> absPath = findLibraryPath(paths, libName);
                 return absPath.isPresent() ?
-                        LibraryLookup.ofPath(MH_LOOKUP, absPath.get().toString()) :
-                        LibraryLookup.ofLibrary(MH_LOOKUP, libName);
+                        LibraryLookup.ofPath(absPath.get().toString()) :
+                        LibraryLookup.ofLibrary(libName);
             }).toArray(LibraryLookup[]::new);
         }
     }
 
     private static final Optional<Path> findLibraryPath(Path[] paths, String libName) {
