diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
@@ -531,13 +531,12 @@
 
     private final static VarHandle byteArrHandle =
             MemoryLayout.ofSequence(C_CHAR).varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());
 
     /**
-     * Convert a Java string into a null-terminated C string, using the given
-     * {@linkplain java.nio.charset.Charset charset}, storing the result into a
-     * new native memory segment.
+     * Convert a Java string into a null-terminated C string, using the
+     * platform's default charset, storing the result into a new native memory segment.
      * <p>
      * This method always replaces malformed-input and unmappable-character
      * sequences with this charset's default replacement byte array.  The
      * {@link java.nio.charset.CharsetEncoder} class should be used when more
      * control over the encoding process is required.
@@ -550,12 +549,12 @@
         Objects.requireNonNull(str);
         return toCString(str.getBytes());
     }
 
     /**
-     * Convert a Java string into a null-terminated C string, using the
-     * platform's default charset, storing the result into a new native memory segment.
+     * Convert a Java string into a null-terminated C string, using the given {@linkplain java.nio.charset.Charset charset},
+     * storing the result into a new native memory segment.
      * <p>
      * This method always replaces malformed-input and unmappable-character
      * sequences with this charset's default replacement byte array.  The
      * {@link java.nio.charset.CharsetEncoder} class should be used when more
      * control over the encoding process is required.
@@ -570,13 +569,12 @@
         Objects.requireNonNull(charset);
         return toCString(str.getBytes(charset));
     }
 
     /**
-     * Convert a Java string into a null-terminated C string, using the given
-     * {@linkplain java.nio.charset.Charset charset}, storing the result into a
-     * native memory segment allocated using the provided scope.
+     * Convert a Java string into a null-terminated C string, using the platform's default charset,
+     * storing the result into a native memory segment allocated using the provided scope.
      * <p>
      * This method always replaces malformed-input and unmappable-character
      * sequences with this charset's default replacement byte array.  The
      * {@link java.nio.charset.CharsetEncoder} class should be used when more
      * control over the encoding process is required.
@@ -591,13 +589,12 @@
         Objects.requireNonNull(scope);
         return toCString(str.getBytes(), scope);
     }
 
     /**
-     * Convert a Java string into a null-terminated C string, using the
-     * platform's default charset, storing the result into a new native memory segment
-     * native memory segment allocated using the provided scope.
+     * Convert a Java string into a null-terminated C string, using the given {@linkplain java.nio.charset.Charset charset},
+     * storing the result into a new native memory segment native memory segment allocated using the provided scope.
      * <p>
      * This method always replaces malformed-input and unmappable-character
      * sequences with this charset's default replacement byte array.  The
      * {@link java.nio.charset.CharsetEncoder} class should be used when more
      * control over the encoding process is required.
