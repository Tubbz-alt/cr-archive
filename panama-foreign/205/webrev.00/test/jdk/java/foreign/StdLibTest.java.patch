diff a/test/jdk/java/foreign/StdLibTest.java b/test/jdk/java/foreign/StdLibTest.java
--- a/test/jdk/java/foreign/StdLibTest.java
+++ b/test/jdk/java/foreign/StdLibTest.java
@@ -44,10 +44,11 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
+import java.util.function.Consumer;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import java.util.stream.LongStream;
 import java.util.stream.Stream;
 
@@ -157,10 +158,25 @@
 
         int found = stdLibHelper.printf(formatString, args);
         assertEquals(found, expected.length());
     }
 
+    @Test(dataProvider = "printfArgs")
+    void test_vprintf(List<PrintfArg> args) throws Throwable {
+        String formatArgs = args.stream()
+                .map(a -> a.format)
+                .collect(Collectors.joining(","));
+
+        String formatString = "hello(" + formatArgs + ")\n";
+
+        String expected = String.format(formatString, args.stream()
+                .map(a -> a.javaValue).toArray());
+
+        int found = stdLibHelper.vprintf(formatString, args);
+        assertEquals(found, expected.length());
+    }
+
     static class StdLibHelper {
 
         final static MethodHandle strcat;
         final static MethodHandle strcmp;
         final static MethodHandle puts;
@@ -168,10 +184,11 @@
         final static MethodHandle gmtime;
         final static MethodHandle qsort;
         final static MethodHandle qsortCompar;
         final static FunctionDescriptor qsortComparFunction;
         final static MethodHandle rand;
+        final static MethodHandle vprintf;
         final static MemoryAddress printfAddr;
         final static FunctionDescriptor printfBase;
 
         static {
             try {
@@ -209,10 +226,14 @@
 
                 rand = abi.downcallHandle(lookup.lookup("rand"),
                         MethodType.methodType(int.class),
                         FunctionDescriptor.of(C_INT));
 
+                vprintf = abi.downcallHandle(lookup.lookup("vprintf"),
+                        MethodType.methodType(int.class, MemoryAddress.class, VaList.class),
+                        FunctionDescriptor.of(C_INT, C_POINTER, C_VA_LIST));
+
                 printfAddr = lookup.lookup("printf");
 
                 printfBase = FunctionDescriptor.of(C_INT, C_POINTER);
             } catch (Throwable ex) {
                 throw new IllegalStateException(ex);
@@ -333,10 +354,17 @@
                 return (int)specializedPrintf(args).invokeExact(formatStr.baseAddress(),
                         args.stream().map(a -> a.nativeValue).toArray());
             }
         }
 
+        int vprintf(String format, List<PrintfArg> args) throws Throwable {
+            try (MemorySegment formatStr = toCString(format)) {
+                return (int)vprintf.invokeExact(formatStr.baseAddress(),
+                        newVaList(b -> args.forEach(a -> a.accept(b))));
+            }
+        }
+
         private MethodHandle specializedPrintf(List<PrintfArg> args) {
             //method type
             MethodType mt = MethodType.methodType(int.class, MemoryAddress.class);
             FunctionDescriptor fd = printfBase;
             for (PrintfArg arg : args) {
@@ -400,28 +428,42 @@
         return res.stream()
                 .map(l -> new Object[] { l })
                 .toArray(Object[][]::new);
     }
 
-    enum PrintfArg {
-        INTEGRAL(int.class, asVarArg(C_INT), "%d", 42, 42),
-        STRING(MemoryAddress.class, asVarArg(C_POINTER), "%s", toCString("str").baseAddress(), "str"),
-        CHAR(byte.class, asVarArg(C_CHAR), "%c", (byte) 'h', 'h'),
-        DOUBLE(double.class, asVarArg(C_DOUBLE), "%.4f", 1.2345d, 1.2345d);
+    enum PrintfArg implements Consumer<VaList.Builder> {
+
+        INTEGRAL(int.class, asVarArg(C_INT), "%d", 42, 42, VaList.Builder::vargFromInt),
+        STRING(MemoryAddress.class, asVarArg(C_POINTER), "%s", toCString("str").baseAddress(), "str", VaList.Builder::vargFromAddress),
+        CHAR(byte.class, asVarArg(C_CHAR), "%c", (byte) 'h', 'h', (builder, layout, value) -> builder.vargFromInt(C_INT, (int)value)),
+        DOUBLE(double.class, asVarArg(C_DOUBLE), "%.4f", 1.2345d, 1.2345d, VaList.Builder::vargFromDouble);
 
         final Class<?> carrier;
         final MemoryLayout layout;
         final String format;
         final Object nativeValue;
         final Object javaValue;
+        @SuppressWarnings("rawtypes")
+        final VaListBuilderCall builderCall;
 
-        PrintfArg(Class<?> carrier, MemoryLayout layout, String format, Object nativeValue, Object javaValue) {
+        <Z> PrintfArg(Class<?> carrier, MemoryLayout layout, String format, Z nativeValue, Object javaValue, VaListBuilderCall<Z> builderCall) {
             this.carrier = carrier;
             this.layout = layout;
             this.format = format;
             this.nativeValue = nativeValue;
             this.javaValue = javaValue;
+            this.builderCall = builderCall;
+        }
+
+        @Override
+        @SuppressWarnings("unchecked")
+        public void accept(VaList.Builder builder) {
+            builderCall.build(builder, layout, nativeValue);
+        }
+
+        interface VaListBuilderCall<V> {
+            void build(VaList.Builder builder, MemoryLayout layout, V value);
         }
     }
 
     static <Z> Set<List<Z>> perms(int count, Z[] arr) {
         if (count == arr.length) {
