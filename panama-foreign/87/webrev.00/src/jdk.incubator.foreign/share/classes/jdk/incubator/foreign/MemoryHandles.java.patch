diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
@@ -25,13 +25,17 @@
  */
 package jdk.incubator.foreign;
 
 import jdk.internal.access.JavaLangInvokeAccess;
 import jdk.internal.access.SharedSecrets;
+import jdk.internal.foreign.MemoryAddressImpl;
 import jdk.internal.foreign.Utils;
 import sun.invoke.util.Wrapper;
 
+import java.lang.invoke.MethodHandle;
+import java.lang.invoke.MethodHandles;
+import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
 import java.nio.ByteOrder;
 
 /**
  * This class defines several factory methods for constructing and combining memory access var handles.
@@ -121,10 +125,31 @@
 
     private MemoryHandles() {
         //sorry, just the one!
     }
 
+    private static final MethodHandle LONG_TO_ADDRESS;
+    private static final MethodHandle ADDRESS_TO_LONG;
+    private static final MethodHandle ADD_OFFSET;
+    private static final MethodHandle ADD_STRIDE;
+
+    static {
+        try {
+            LONG_TO_ADDRESS = MethodHandles.lookup().findStatic(MemoryHandles.class, "longToAddress",
+                    MethodType.methodType(MemoryAddress.class, long.class));
+            ADDRESS_TO_LONG = MethodHandles.lookup().findStatic(MemoryHandles.class, "addressToLong",
+                    MethodType.methodType(long.class, MemoryAddress.class));
+            ADD_OFFSET = MethodHandles.lookup().findStatic(MemoryHandles.class, "addOffset",
+                    MethodType.methodType(MemoryAddress.class, MemoryAddress.class, long.class));
+
+            ADD_STRIDE = MethodHandles.lookup().findStatic(MemoryHandles.class, "addStride",
+                    MethodType.methodType(MemoryAddress.class, MemoryAddress.class, long.class, long.class));
+        } catch (Throwable ex) {
+            throw new ExceptionInInitializerError(ex);
+        }
+    }
+
     /**
      * Creates a memory access var handle with the given carrier type and byte order.
      *
      * The resulting memory access var handle features a single {@link MemoryAddress} access coordinate,
      * and its variable type is set by the given carrier type.
@@ -172,89 +197,132 @@
         if (alignmentBytes <= 0
                 || (alignmentBytes & (alignmentBytes - 1)) != 0) { // is power of 2?
             throw new IllegalArgumentException("Bad alignment: " + alignmentBytes);
         }
 
-        return Utils.fixUpVarHandle(JLI.memoryAddressViewVarHandle(carrier, alignmentBytes - 1, byteOrder, 0, new long[]{}));
+        return Utils.fixUpVarHandle(JLI.memoryAccessVarHandle(carrier, alignmentBytes - 1, byteOrder, 0, new long[]{}));
     }
 
     /**
-     * Creates a memory access var handle with a fixed offset added to the accessed offset. That is,
-     * if the target memory access var handle accesses a memory location at offset <em>O</em>, the new memory access var
-     * handle will access a memory location at offset <em>O' + O</em>.
-     *
-     * The resulting memory access var handle will feature the same access coordinates as the ones in the target memory access var handle.
+     * Returns a var handle that adds a <em>fixed</em> offset to the incoming {@link MemoryAddress} coordinate
+     * and then propagates such value to the target var handle. That is,
+     * when the returned var handle receives a memory address coordinate pointing at a memory location at
+     * offset <em>O</em>, a memory address coordinate pointing at a memory location at offset <em>O' + O</em>
+     * is created, and then passed to the target var handle.
      *
-     * @apiNote the resulting var handle features certain <a href="#memaccess-mode">access mode restrictions</a>,
-     * which are common to all memory access var handles.
+     * The returned var handle will feature the same type and access coordinates as the target var handle.
      *
      * @param target the target memory access handle to access after the offset adjustment.
      * @param bytesOffset the offset, in bytes. Must be positive or zero.
-     * @return the new memory access var handle.
-     * @throws IllegalArgumentException when the target var handle is not a memory access var handle,
-     * or when {@code bytesOffset < 0}, or otherwise incompatible with the alignment constraint.
+     * @return the adapted var handle.
+     * @throws IllegalArgumentException if the first access coordinate type is not of type {@link MemoryAddress}.
      */
     public static VarHandle withOffset(VarHandle target, long bytesOffset) {
-        if (bytesOffset < 0) {
-            throw new IllegalArgumentException("Illegal offset: " + bytesOffset);
+        if (bytesOffset == 0) {
+            return target; //nothing to do
         }
 
-        long alignMask = JLI.memoryAddressAlignmentMask(target);
+        checkAddressFirstCoordinate(target);
 
-        if ((bytesOffset & alignMask) != 0) {
-            throw new IllegalArgumentException("Offset " + bytesOffset + " does not conform to alignment " + (alignMask + 1));
+        if (JLI.isMemoryAccessVarHandle(target) &&
+                (bytesOffset & JLI.memoryAddressAlignmentMask(target)) == 0) {
+            //flatten
+            return Utils.fixUpVarHandle(JLI.memoryAccessVarHandle(
+                    JLI.memoryAddressCarrier(target),
+                    JLI.memoryAddressAlignmentMask(target),
+                    JLI.memoryAddressByteOrder(target),
+                    JLI.memoryAddressOffset(target) + bytesOffset,
+                    JLI.memoryAddressStrides(target)));
+        } else {
+            //slow path
+            VarHandle res = MethodHandles.collectCoordinates(target, 0, ADD_OFFSET);
+            return MethodHandles.insertCoordinates(res, 1, bytesOffset);
         }
-
-        return Utils.fixUpVarHandle(JLI.memoryAddressViewVarHandle(
-                JLI.memoryAddressCarrier(target),
-                alignMask,
-                JLI.memoryAddressByteOrder(target),
-                JLI.memoryAddressOffset(target) + bytesOffset,
-                JLI.memoryAddressStrides(target)));
     }
 
     /**
-     * Creates a memory access var handle with a <em>variable</em> offset added to the accessed offset.
-     * That is, if the target memory access var handle accesses a memory location at offset <em>O</em>,
-     * the new memory access var handle will access a memory location at offset <em>(S * X) + O</em>, where <em>S</em>
-     * is a constant <em>stride</em>, whereas <em>X</em> is a dynamic value that will be provided as an additional access
-     * coordinate (of type {@code long}). The new access coordinate will be <em>prepended</em> to the ones available
-     * in the target memory access var handles (if any).
+     * Returns a var handle which adds a <em>variable</em> offset to the incoming {@link MemoryAddress}
+     * access coordinate value and then propagates such value to the target var handle.
+     * That is, when the returned var handle receives a memory address coordinate pointing at a memory location at
+     * offset <em>O</em>, a new memory address coordinate pointing at a memory location at offset <em>(S * X) + O</em>
+     * is created, and then passed to the target var handle,
+     * where <em>S</em> is a constant <em>stride</em>, whereas <em>X</em> is a dynamic value that will be
+     * provided as an additional access coordinate (of type {@code long}).
      *
-     * @apiNote the resulting var handle features certain <a href="#memaccess-mode">access mode restrictions</a>,
-     * which are common to all memory access var handles.
+     * The returned var handle will feature the same type as the target var handle; an additional access coordinate
+     * of type {@code long} will be added to the access coordinate types of the target var handle at the position
+     * immediately following the leading access coordinate of type {@link MemoryAddress}.
      *
      * @param target the target memory access handle to access after the scale adjustment.
      * @param bytesStride the stride, in bytes, by which to multiply the coordinate value. Must be greater than zero.
-     * @return the new memory access var handle.
-     * @throws IllegalArgumentException when the target var handle is not a memory access var handle,
-     * or if {@code bytesStride <= 0}, or otherwise incompatible with the alignment constraint.
+     * @return the adapted var handle.
+     * @throws IllegalArgumentException if the first access coordinate type is not of type {@link MemoryAddress}.
      */
     public static VarHandle withStride(VarHandle target, long bytesStride) {
         if (bytesStride == 0) {
-            throw new IllegalArgumentException("Stride must be positive: " + bytesStride);
+            return MethodHandles.dropCoordinates(target, 1, long.class); // dummy coordinate
         }
 
-        long alignMask = JLI.memoryAddressAlignmentMask(target);
+        checkAddressFirstCoordinate(target);
+
+        if (JLI.isMemoryAccessVarHandle(target) &&
+                (bytesStride & JLI.memoryAddressAlignmentMask(target)) == 0) {
+            //flatten
+            long[] strides = JLI.memoryAddressStrides(target);
+            long[] newStrides = new long[strides.length + 1];
+            System.arraycopy(strides, 0, newStrides, 1, strides.length);
+            newStrides[0] = bytesStride;
 
-        if ((bytesStride & alignMask) != 0) {
-            throw new IllegalArgumentException("Stride " + bytesStride + " does not conform to alignment " + (alignMask + 1));
+            return Utils.fixUpVarHandle(JLI.memoryAccessVarHandle(
+                    JLI.memoryAddressCarrier(target),
+                    JLI.memoryAddressAlignmentMask(target),
+                    JLI.memoryAddressByteOrder(target),
+                    JLI.memoryAddressOffset(target),
+                    newStrides));
+        } else {
+            //slow path
+            VarHandle res = MethodHandles.collectCoordinates(target, 0, ADD_STRIDE);
+            return MethodHandles.insertCoordinates(res, 2, bytesStride);
         }
+    }
 
-        long offset = JLI.memoryAddressOffset(target);
+    /**
+     * Adapt an existing var handle into a new var handle whose carrier type is {@link MemoryAddress}.
+     * That is, when calling {@link VarHandle#get(Object...)} on the returned var handle,
+     * the read numeric value will be turned into a memory address (as if by calling {@link MemoryAddress#ofLong(long)});
+     * similarly, when calling {@link VarHandle#set(Object...)}, the memory address to be set will be converted
+     * into a numeric value, and then written into memory. The amount of bytes read (resp. written) from (resp. to)
+     * memory depends on the carrier of the original memory access var handle.
+     *
+     * @param target the memory access var handle to be adapted
+     * @return the adapted var handle.
+     * @throws IllegalArgumentException if the carrier type of {@code varHandle} is either {@code boolean},
+     * {@code float}, or {@code double}, or is not a primitive type.
+     */
+    public static VarHandle asAddressVarHandle(VarHandle target) {
+        Class<?> carrier = target.varType();
+        if (!carrier.isPrimitive() || carrier == boolean.class ||
+                carrier == float.class || carrier == double.class) {
+            throw new IllegalArgumentException("Unsupported carrier type: " + carrier.getName());
+        }
 
-        long[] strides = JLI.memoryAddressStrides(target);
-        long[] newStrides = new long[strides.length + 1];
-        System.arraycopy(strides, 0, newStrides, 1, strides.length);
-        newStrides[0] = bytesStride;
+        if (carrier != long.class) {
+            // slow-path, we need to adapt
+            return MethodHandles.filterValue(target,
+                    MethodHandles.explicitCastArguments(ADDRESS_TO_LONG, MethodType.methodType(carrier, MemoryAddress.class)),
+                    MethodHandles.explicitCastArguments(LONG_TO_ADDRESS, MethodType.methodType(MemoryAddress.class, carrier)));
+        } else {
+            // fast-path
+            return MethodHandles.filterValue(target, ADDRESS_TO_LONG, LONG_TO_ADDRESS);
+        }
+    }
 
-        return Utils.fixUpVarHandle(JLI.memoryAddressViewVarHandle(
-                JLI.memoryAddressCarrier(target),
-                alignMask,
-                JLI.memoryAddressByteOrder(target),
-                offset,
-                newStrides));
+    private static void checkAddressFirstCoordinate(VarHandle handle) {
+        if (handle.coordinateTypes().size() < 1 ||
+                handle.coordinateTypes().get(0) != MemoryAddress.class) {
+            throw new IllegalArgumentException("Expected var handle with leading coordinate of type MemoryAddress");
+        }
     }
 
     private static void checkCarrier(Class<?> carrier) {
         if (!carrier.isPrimitive() || carrier == void.class || carrier == boolean.class) {
             throw new IllegalArgumentException("Illegal carrier: " + carrier.getSimpleName());
@@ -263,6 +331,22 @@
 
     private static long carrierSize(Class<?> carrier) {
         long bitsAlignment = Math.max(8, Wrapper.forPrimitiveType(carrier).bitWidth());
         return Utils.bitsToBytesOrThrow(bitsAlignment, IllegalStateException::new);
     }
+
+    private static MemoryAddress longToAddress(long value) {
+        return MemoryAddress.ofLong(value);
+    }
+
+    private static long addressToLong(MemoryAddress value) {
+        return MemoryAddressImpl.addressof(value);
+    }
+
+    private static MemoryAddress addOffset(MemoryAddress address, long offset) {
+        return address.addOffset(offset);
+    }
+
+    private static MemoryAddress addStride(MemoryAddress address, long index, long stride) {
+        return address.addOffset(index * stride);
+    }
 }
