diff a/test/jdk/java/foreign/TestSegments.java b/test/jdk/java/foreign/TestSegments.java
--- a/test/jdk/java/foreign/TestSegments.java
+++ b/test/jdk/java/foreign/TestSegments.java
@@ -30,10 +30,11 @@
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
+
 import java.lang.invoke.VarHandle;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
@@ -43,11 +44,11 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.LongFunction;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
-import static jdk.incubator.foreign.MemorySegment.WRITE;
+import static jdk.incubator.foreign.MemorySegment.*;
 import static org.testng.Assert.*;
 
 public class TestSegments {
 
     @Test(dataProvider = "badSizeAndAlignments", expectedExceptions = IllegalArgumentException.class)
@@ -143,10 +144,20 @@
                 start++;
             }
         }
     }
 
+    static final int ALL_ACCESS_MODES = READ | WRITE | CLOSE | ACQUIRE | HANDOFF;
+
+    @Test(dataProvider = "segmentFactories")
+    public void testAccessModesOfFactories(Supplier<MemorySegment> memorySegmentSupplier) {
+        try (MemorySegment segment = memorySegmentSupplier.get()) {
+            assertTrue(segment.hasAccessModes(ALL_ACCESS_MODES));
+            assertEquals(segment.accessModes(), ALL_ACCESS_MODES);
+        }
+    }
+
     @Test(dataProvider = "accessModes")
     public void testAccessModes(int accessModes) {
         int[] arr = new int[1];
         for (AccessActions action : AccessActions.values()) {
             MemorySegment segment = MemorySegment.ofArray(arr);
@@ -248,16 +259,23 @@
         MemorySegment.ofArray(new byte[2]).asSlice(0, 0).fill((byte) 0xFF);
         MemorySegment.ofByteBuffer(ByteBuffer.allocateDirect(0)).fill((byte) 0xFF);
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
-    public void testBadWithAccessModes() {
+    public void testWithAccessModesBadUnsupportedMode() {
         int[] arr = new int[1];
         MemorySegment segment = MemorySegment.ofArray(arr);
         segment.withAccessModes((1 << AccessActions.values().length) + 1);
     }
 
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void testBadWithAccessModesBadStrongerMode() {
+        int[] arr = new int[1];
+        MemorySegment segment = MemorySegment.ofArray(arr).withAccessModes(READ);
+        segment.withAccessModes(WRITE);
+    }
+
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadHasAccessModes() {
         int[] arr = new int[1];
         MemorySegment segment = MemorySegment.ofArray(arr);
         segment.hasAccessModes((1 << AccessActions.values().length) + 1);
@@ -320,10 +338,11 @@
 
         final static List<String> CONFINED_NAMES = List.of(
                 "close",
                 "fill",
                 "copyFrom",
+                "mismatch",
                 "toByteArray",
                 "withOwnerThread"
         );
 
         public SegmentMember(Method method, Object[] params) {
