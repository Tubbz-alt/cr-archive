diff a/test/hotspot/jtreg/runtime/CompressedOops/CompressedClassPointers.java b/test/hotspot/jtreg/runtime/CompressedOops/CompressedClassPointers.java
--- a/test/hotspot/jtreg/runtime/CompressedOops/CompressedClassPointers.java
+++ b/test/hotspot/jtreg/runtime/CompressedOops/CompressedClassPointers.java
@@ -23,11 +23,11 @@
 
 /*
  * @test
  * @bug 8024927
  * @summary Testing address of compressed class pointer space as best as possible.
- * @requires vm.bits == 64 & os.family != "windows" & !vm.graal.enabled
+ * @requires vm.bits == 64 & !vm.graal.enabled
  * @library /test/lib
  * @modules java.base/jdk.internal.misc
  *          java.management
  * @run driver CompressedClassPointers
  */
@@ -37,63 +37,105 @@
 import jdk.test.lib.process.OutputAnalyzer;
 import jtreg.SkippedException;
 
 public class CompressedClassPointers {
 
+    static final String logging_option = "-Xlog:gc+metaspace=trace,cds=trace";
+
+    // Returns true if we are to test the narrow klass base; we only do this on
+    // platforms where we can be reasonably shure that we get reproducable placement).
+    static boolean testNarrowKlassBase() {
+        if (Platform.isWindows() || Platform.isPPC()) {
+            return false;
+        }
+        return true;
+
+    }
+
+    // CDS off, small heap, ccs size default (1G)
+    // A small heap should allow us to place the ccs within the lower 32G and thus allow zero based encoding.
     public static void smallHeapTest() throws Exception {
         ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(
             "-XX:+UnlockDiagnosticVMOptions",
             "-XX:SharedBaseAddress=8g",
             "-Xmx128m",
-            "-Xlog:gc+metaspace=trace",
+            logging_option,
             "-Xshare:off",
-            "-Xlog:cds=trace",
             "-XX:+VerifyBeforeGC", "-version");
         OutputAnalyzer output = new OutputAnalyzer(pb.start());
-        output.shouldContain("Narrow klass base: 0x0000000000000000");
+        if (testNarrowKlassBase()) {
+            output.shouldContain("Narrow klass base: 0x0000000000000000");
+        }
         output.shouldHaveExitValue(0);
     }
 
+    // CDS off, small heap, ccs size explicitely set to 1G
+    // A small heap should allow us to place the ccs within the lower 32G and thus allow zero based encoding.
     public static void smallHeapTestWith1G() throws Exception {
         ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(
             "-XX:+UnlockDiagnosticVMOptions",
             "-XX:CompressedClassSpaceSize=1g",
             "-Xmx128m",
-            "-Xlog:gc+metaspace=trace",
+            logging_option,
             "-Xshare:off",
-            "-Xlog:cds=trace",
             "-XX:+VerifyBeforeGC", "-version");
         OutputAnalyzer output = new OutputAnalyzer(pb.start());
-        output.shouldContain("Narrow klass base: 0x0000000000000000, Narrow klass shift: 3");
+        if (testNarrowKlassBase()) {
+            output.shouldContain("Narrow klass base: 0x0000000000000000, Narrow klass shift: 3");
+        }
         output.shouldHaveExitValue(0);
     }
 
+    // CDS off, a very large heap, ccs size left to 1G default.
+    // We expect the ccs to be mapped somewhere far beyond the heap, such that it is not possible
+    // to use zero based encoding.
     public static void largeHeapTest() throws Exception {
         ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(
             "-XX:+UnlockDiagnosticVMOptions",
             "-XX:+UnlockExperimentalVMOptions",
             "-Xmx30g",
             "-XX:-UseAOT", // AOT explicitly set klass shift to 3.
-            "-Xlog:gc+metaspace=trace",
+            logging_option,
             "-Xshare:off",
-            "-Xlog:cds=trace",
             "-XX:+VerifyBeforeGC", "-version");
         OutputAnalyzer output = new OutputAnalyzer(pb.start());
-        output.shouldNotContain("Narrow klass base: 0x0000000000000000");
-        output.shouldContain("Narrow klass shift: 0");
+        if (testNarrowKlassBase()) {
+            output.shouldNotContain("Narrow klass base: 0x0000000000000000");
+            output.shouldContain("Narrow klass shift: 0");
+        }
+        output.shouldHaveExitValue(0);
+    }
+
+    // Using large paged heap, metaspace uses small pages.
+    public static void largePagesForHeapTest() throws Exception {
+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(
+                "-XX:+UnlockDiagnosticVMOptions",
+                "-Xmx128m",
+                "-XX:+UseLargePages",
+                logging_option,
+                "-XX:+VerifyBeforeGC", "-version");
+        OutputAnalyzer output = new OutputAnalyzer(pb.start());
+        if (testNarrowKlassBase()) {
+            output.shouldContain("Narrow klass base:");
+        }
         output.shouldHaveExitValue(0);
     }
 
-    public static void largePagesTest() throws Exception {
+    // Using large pages for heap and metaspace.
+    // Note that this is still unexciting since the compressed class space always uses small pages;
+    // UseLargePagesInMetaspace only affects non-class metaspace.
+    public static void largePagesForHeapAndMetaspaceTest() throws Exception {
         ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(
             "-XX:+UnlockDiagnosticVMOptions",
             "-Xmx128m",
-            "-XX:+UseLargePages",
-            "-Xlog:gc+metaspace=trace",
+            "-XX:+UseLargePages", "-XX:+UseLargePagesInMetaspace",
+            logging_option,
             "-XX:+VerifyBeforeGC", "-version");
         OutputAnalyzer output = new OutputAnalyzer(pb.start());
-        output.shouldContain("Narrow klass base:");
+        if (testNarrowKlassBase()) {
+            output.shouldContain("Narrow klass base:");
+        }
         output.shouldHaveExitValue(0);
     }
 
     public static void heapBaseMinAddressTest() throws Exception {
         ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(
@@ -110,13 +152,13 @@
         ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(
             "-XX:+UnlockDiagnosticVMOptions",
             "-XX:SharedArchiveFile=./CompressedClassPointers.jsa",
             "-Xmx128m",
             "-XX:SharedBaseAddress=8g",
-            "-XX:+PrintCompressedOopsMode",
             "-XX:+VerifyBeforeGC",
-            "-Xshare:dump", "-Xlog:cds");
+            "-Xshare:dump",
+            "-Xlog:cds,gc+heap+coops=debug");
         OutputAnalyzer output = new OutputAnalyzer(pb.start());
         if (output.firstMatch("Shared spaces are not supported in this VM") != null) {
             return;
         }
         try {
@@ -126,11 +168,11 @@
           pb = ProcessTools.createJavaProcessBuilder(
             "-XX:+UnlockDiagnosticVMOptions",
             "-XX:SharedArchiveFile=./CompressedClassPointers.jsa",
             "-Xmx128m",
             "-XX:SharedBaseAddress=8g",
-            "-XX:+PrintCompressedOopsMode",
+            "-Xlog:gc+heap+coops=debug",
             "-Xshare:on",
             "-version");
           output = new OutputAnalyzer(pb.start());
           output.shouldContain("sharing");
           output.shouldHaveExitValue(0);
@@ -225,13 +267,13 @@
             "-XX:+UseCompressedClassPointers",
             "-XX:+UnlockDiagnosticVMOptions",
             "-XX:SharedArchiveFile=./CompressedClassPointers.jsa",
             "-Xmx128m",
             "-XX:SharedBaseAddress=8g",
-            "-XX:+PrintCompressedOopsMode",
             "-XX:+VerifyBeforeGC",
-            "-Xshare:dump", "-Xlog:cds");
+            "-Xshare:dump",
+            "-Xlog:cds,gc+heap+coops=debug");
         OutputAnalyzer output = new OutputAnalyzer(pb.start());
         if (output.firstMatch("Shared spaces are not supported in this VM") != null) {
             return;
         }
         try {
@@ -243,11 +285,11 @@
             "-XX:+UseCompressedClassPointers",
             "-XX:+UnlockDiagnosticVMOptions",
             "-XX:SharedArchiveFile=./CompressedClassPointers.jsa",
             "-Xmx128m",
             "-XX:SharedBaseAddress=8g",
-            "-XX:+PrintCompressedOopsMode",
+            "-Xlog:gc+heap+coops=debug",
             "-Xshare:on",
             "-version");
           output = new OutputAnalyzer(pb.start());
           output.shouldContain("sharing");
           output.shouldHaveExitValue(0);
@@ -260,11 +302,12 @@
 
     public static void main(String[] args) throws Exception {
         smallHeapTest();
         smallHeapTestWith1G();
         largeHeapTest();
-        largePagesTest();
+        largePagesForHeapTest();
+        largePagesForHeapAndMetaspaceTest();
         heapBaseMinAddressTest();
         sharingTest();
 
         boolean ccpRequiresCoop = Platform.isAArch64();
 
