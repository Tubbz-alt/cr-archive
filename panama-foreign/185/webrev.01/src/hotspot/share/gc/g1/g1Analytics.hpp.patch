diff a/src/hotspot/share/gc/g1/g1Analytics.hpp b/src/hotspot/share/gc/g1/g1Analytics.hpp
--- a/src/hotspot/share/gc/g1/g1Analytics.hpp
+++ b/src/hotspot/share/gc/g1/g1Analytics.hpp
@@ -73,14 +73,14 @@
   TruncatedSeq* _cost_per_byte_ms_during_cm_seq;
 
   // Statistics kept per GC stoppage, pause or full.
   TruncatedSeq* _recent_prev_end_times_for_all_gcs_sec;
 
-  // The ratio of gc time to elapsed time, computed over recent pauses,
-  // and the ratio for just the last pause.
-  double _recent_avg_pause_time_ratio;
-  double _last_pause_time_ratio;
+  // Cached values for long and short term pause time ratios. See
+  // compute_pause_time_ratios() for how they are computed.
+  double _long_term_pause_time_ratio;
+  double _short_term_pause_time_ratio;
 
   // Returns whether the sequence have enough samples to get a "good" prediction.
   // The constant used is random but "small".
   bool enough_samples_available(TruncatedSeq const* seq) const;
 
@@ -93,16 +93,16 @@
 
   double prev_collection_pause_end_ms() const {
     return _prev_collection_pause_end_ms;
   }
 
-  double recent_avg_pause_time_ratio() const {
-    return _recent_avg_pause_time_ratio;
+  double long_term_pause_time_ratio() const {
+    return _long_term_pause_time_ratio;
   }
 
-  double last_pause_time_ratio() const {
-    return _last_pause_time_ratio;
+  double short_term_pause_time_ratio() const {
+    return _short_term_pause_time_ratio;
   }
 
   uint number_of_recorded_pause_times() const {
     return NumPrevPausesForHeuristics;
   }
