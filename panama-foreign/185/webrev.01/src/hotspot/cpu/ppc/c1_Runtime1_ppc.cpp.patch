diff a/src/hotspot/cpu/ppc/c1_Runtime1_ppc.cpp b/src/hotspot/cpu/ppc/c1_Runtime1_ppc.cpp
--- a/src/hotspot/cpu/ppc/c1_Runtime1_ppc.cpp
+++ b/src/hotspot/cpu/ppc/c1_Runtime1_ppc.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2012, 2018 SAP SE. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
@@ -197,19 +197,19 @@
   int i;
   for (i = 0; i < FrameMap::nof_cpu_regs; i++) {
     Register r = as_Register(i);
     if (FrameMap::reg_needs_save(r)) {
       int sp_offset = cpu_reg_save_offsets[i];
-      __ std(r, sp_offset + STACK_BIAS, R1_SP);
+      __ std(r, sp_offset, R1_SP);
     }
   }
 
   if (save_fpu_registers) {
     for (i = 0; i < FrameMap::nof_fpu_regs; i++) {
       FloatRegister r = as_FloatRegister(i);
       int sp_offset = fpu_reg_save_offsets[i];
-      __ stfd(r, sp_offset + STACK_BIAS, R1_SP);
+      __ stfd(r, sp_offset, R1_SP);
     }
   }
 
   return generate_oop_map(sasm, save_fpu_registers);
 }
@@ -218,19 +218,19 @@
                                    bool restore_fpu_registers = true) {
   for (int i = 0; i < FrameMap::nof_cpu_regs; i++) {
     Register r = as_Register(i);
     if (FrameMap::reg_needs_save(r) && r != result1 && r != result2) {
       int sp_offset = cpu_reg_save_offsets[i];
-      __ ld(r, sp_offset + STACK_BIAS, R1_SP);
+      __ ld(r, sp_offset, R1_SP);
     }
   }
 
   if (restore_fpu_registers) {
     for (int i = 0; i < FrameMap::nof_fpu_regs; i++) {
       FloatRegister r = as_FloatRegister(i);
       int sp_offset = fpu_reg_save_offsets[i];
-      __ lfd(r, sp_offset + STACK_BIAS, R1_SP);
+      __ lfd(r, sp_offset, R1_SP);
     }
   }
 
   __ pop_frame();
   __ ld(R0, _abi(lr), R1_SP);
@@ -794,14 +794,14 @@
 #ifdef ASSERT
   // Check that fields in JavaThread for exception oop and issuing pc are
   // empty before writing to them.
   __ ld(R0, in_bytes(JavaThread::exception_oop_offset()), R16_thread);
   __ cmpdi(CCR0, R0, 0);
-  __ asm_assert_eq("exception oop already set", 0x963);
+  __ asm_assert_eq("exception oop already set");
   __ ld(R0, in_bytes(JavaThread::exception_pc_offset() ), R16_thread);
   __ cmpdi(CCR0, R0, 0);
-  __ asm_assert_eq("exception pc already set", 0x962);
+  __ asm_assert_eq("exception pc already set");
 #endif
 
   // Save the exception and issuing pc in the thread.
   __ std(Rexception,    in_bytes(JavaThread::exception_oop_offset()), R16_thread);
   __ std(Rexception_pc, in_bytes(JavaThread::exception_pc_offset() ), R16_thread);
