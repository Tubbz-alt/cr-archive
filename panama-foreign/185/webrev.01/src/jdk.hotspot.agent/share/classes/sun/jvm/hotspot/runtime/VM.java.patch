diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/runtime/VM.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/runtime/VM.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/runtime/VM.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/runtime/VM.java
@@ -74,11 +74,10 @@
   private List<Observer> vmSuspendedObservers = new ArrayList<>();
   private TypeDataBase db;
   private boolean      isBigEndian;
   /** This is only present if in a debugging system */
   private JVMDebugger  debugger;
-  private long         stackBias;
   private long         logAddressSize;
   private Universe     universe;
   private ObjectHeap   heap;
   private SystemDictionary dict;
   private ClassLoaderDataGraph cldGraph;
@@ -441,11 +440,10 @@
        throw new RuntimeException("can't determine target's VM version : " + exp.getMessage());
     }
 
     checkVMVersion(vmRelease);
 
-    stackBias    = db.lookupIntConstant("STACK_BIAS").intValue();
     invocationEntryBCI = db.lookupIntConstant("InvocationEntryBci").intValue();
 
     // We infer the presence of JVMTI from the presence of the InstanceKlass::_breakpoints field.
     {
       Type type = db.lookupType("InstanceKlass");
@@ -670,15 +668,10 @@
 
   public long getIntSize() {
     return db.getJIntType().getSize();
   }
 
-  /** NOTE: this offset is in BYTES in this system! */
-  public long getStackBias() {
-    return stackBias;
-  }
-
   /** Indicates whether the underlying machine supports the LP64 data
       model. This is needed for conditionalizing code in a few places */
   public boolean isLP64() {
     if (Assert.ASSERTS_ENABLED) {
       Assert.that(isDebugging(), "Debugging system only for now");
