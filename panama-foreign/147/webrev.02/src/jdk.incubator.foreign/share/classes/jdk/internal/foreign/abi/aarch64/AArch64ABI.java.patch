diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/AArch64ABI.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/AArch64ABI.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/AArch64ABI.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/aarch64/AArch64ABI.java
@@ -27,19 +27,14 @@
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.SystemABI;
-import jdk.internal.foreign.MemoryAddressImpl;
 import jdk.internal.foreign.abi.*;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodType;
-import java.util.Objects;
-import java.util.Optional;
-
-import static jdk.incubator.foreign.MemoryLayouts.AArch64ABI.*;
 
 /**
  * ABI implementation based on ARM document "Procedure Call Standard for
  * the ARM 64-bit Architecture".
  */
@@ -63,42 +58,12 @@
         return UpcallStubs.upcallAddress(CallArranger.arrangeUpcall(target, target.type(), function));
     }
 
     @Override
     public String name() {
-        return SystemABI.ABI_AARCH64;
-    }
-
-    @Override
-    public Optional<MemoryLayout> layoutFor(Type type) {
-        return switch (Objects.requireNonNull(type)) {
-            case BOOL -> Optional.of(C_BOOL);
-            case UNSIGNED_CHAR -> Optional.of(C_UCHAR);
-            case SIGNED_CHAR -> Optional.of(C_SCHAR);
-            case CHAR -> Optional.of(C_CHAR);
-            case SHORT -> Optional.of(C_SHORT);
-            case UNSIGNED_SHORT -> Optional.of(C_USHORT);
-            case INT -> Optional.of(C_INT);
-            case UNSIGNED_INT -> Optional.of(C_UINT);
-            case LONG -> Optional.of(C_LONG);
-            case UNSIGNED_LONG -> Optional.of(C_ULONG);
-            case LONG_LONG -> Optional.of(C_LONGLONG);
-            case UNSIGNED_LONG_LONG -> Optional.of(C_ULONGLONG);
-            case FLOAT -> Optional.of(C_FLOAT);
-            case DOUBLE -> Optional.of(C_DOUBLE);
-            case LONG_DOUBLE -> Optional.of(C_LONGDOUBLE);
-            case POINTER -> Optional.of(C_POINTER);
-            default -> Optional.empty();
-        };
+        return AArch64.NAME;
     }
 
-    static ArgumentClassImpl argumentClassFor(Type type) {
-        return switch (Objects.requireNonNull(type)) {
-            case BOOL, UNSIGNED_CHAR, SIGNED_CHAR, CHAR, SHORT, UNSIGNED_SHORT,
-                INT, UNSIGNED_INT, LONG, UNSIGNED_LONG, LONG_LONG, UNSIGNED_LONG_LONG ->
-                    ArgumentClassImpl.INTEGER;
-            case FLOAT, DOUBLE -> ArgumentClassImpl.VECTOR;
-            case POINTER -> ArgumentClassImpl.POINTER;
-            default -> null;
-        };
+    static AArch64.ArgumentClass argumentClassFor(MemoryLayout layout) {
+        return (AArch64.ArgumentClass)layout.attribute(AArch64.CLASS_ATTRIBUTE_NAME).get();
     }
 }
