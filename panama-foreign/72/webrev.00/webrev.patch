diff a/src/java.base/share/classes/jdk/internal/loader/NativeLibraries.java b/src/java.base/share/classes/jdk/internal/loader/NativeLibraries.java
--- a/src/java.base/share/classes/jdk/internal/loader/NativeLibraries.java
+++ b/src/java.base/share/classes/jdk/internal/loader/NativeLibraries.java
@@ -382,11 +382,11 @@
 
             return load(this, name, isBuiltin, isJNI);
         }
     }
 
-    public static NativeLibrary defaultLibrary = new NativeLibraryImpl(Object.class, "<default>", true) {
+    public static NativeLibrary defaultLibrary = new NativeLibraryImpl(Object.class, "<default>", true, true) {
 
         @Override
         boolean open() {
             throw new UnsupportedOperationException("Cannot load default library");
         }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/LibrariesHelper.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/LibrariesHelper.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/LibrariesHelper.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/LibrariesHelper.java
@@ -39,14 +39,15 @@
 import java.util.Optional;
 
 public final class LibrariesHelper {
     private LibrariesHelper() {}
 
+    // FIXME - revisit this (refcount for unload)
     private final static ClassValue<NativeLibraries> nativeLibrary = new ClassValue<>() {
         @Override
         protected NativeLibraries computeValue(Class<?> type) {
-            return new NativeLibraries(type.getClassLoader());
+            return NativeLibraries.jniNativeLibraries(type.getClassLoader());
         }
     };
 
 
     /**
