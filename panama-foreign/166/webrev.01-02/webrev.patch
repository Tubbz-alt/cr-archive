diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StructBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StructBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StructBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StructBuilder.java
@@ -113,11 +113,11 @@
 
     @Override
     public void addAddressGetter(String javaName, String nativeName, MemoryLayout layout, MemoryLayout parentLayout) {
         incrAlign();
         indent();
-        sb.append(PUB_MODS + "MemoryAddress " + javaName + "$ADDR(MemoryAddress addr) {\n");
+        sb.append(PUB_MODS + "MemoryAddress " + javaName + "$addr(MemoryAddress addr) {\n");
         incrAlign();
         indent();
         sb.append("return addr.segment().asSlice(");
         sb.append(parentLayout.byteOffset(MemoryLayout.PathElement.groupElement(nativeName)));
         sb.append(", ");
diff a/test/jdk/tools/jextract/test8244938/Test8244938.java b/test/jdk/tools/jextract/test8244938/Test8244938.java
--- a/test/jdk/tools/jextract/test8244938/Test8244938.java
+++ b/test/jdk/tools/jextract/test8244938/Test8244938.java
@@ -39,10 +39,10 @@
     public void testNestedStructReturn() {
          var seg = func();
          assertEquals(seg.byteSize(), CPoint.sizeof());
          var addr = seg.baseAddress();
          assertEquals(CPoint.k$get(addr), 44);
-         var point2dAddr = CPoint.point2d$ADDR(addr);
+         var point2dAddr = CPoint.point2d$addr(addr);
          assertEquals(CPoint2D.i$get(point2dAddr), 567);
          assertEquals(CPoint2D.j$get(point2dAddr), 33);
     }
 }
diff a/test/jdk/tools/jextract/test8245003/Test8245003.java b/test/jdk/tools/jextract/test8245003/Test8245003.java
--- a/test/jdk/tools/jextract/test8245003/Test8245003.java
+++ b/test/jdk/tools/jextract/test8245003/Test8245003.java
@@ -44,11 +44,11 @@
         assertEquals(CPoint.y$get(addr), 75);
 
         addr = special_pt3d$ADDR();
         assertEquals(addr.segment().byteSize(), CPoint3D.sizeof());
         assertEquals(CPoint3D.z$get(addr), 35);
-        var pointAddr = CPoint3D.p$ADDR(addr);
+        var pointAddr = CPoint3D.p$addr(addr);
         assertEquals(pointAddr.segment().byteSize(), CPoint.sizeof());
         assertEquals(CPoint.x$get(pointAddr), 43);
         assertEquals(CPoint.y$get(pointAddr), 45);
     }
 
@@ -65,10 +65,10 @@
         assertEquals(arr[4], 345);
 
         addr = foo$ADDR();
         assertEquals(addr.segment().byteSize(), CFoo.sizeof());
         assertEquals(CFoo.count$get(addr), 37);
-        var greeting = CFoo.greeting$ADDR(addr);
+        var greeting = CFoo.greeting$addr(addr);
         byte[] barr = Cchar.toJavaArray(greeting.segment());
         assertEquals(new String(barr), "hello");
     }
 }
