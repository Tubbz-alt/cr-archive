diff a/src/java.net.http/share/classes/jdk/internal/net/http/ResponseBodyHandlers.java b/src/java.net.http/share/classes/jdk/internal/net/http/ResponseBodyHandlers.java
--- a/src/java.net.http/share/classes/jdk/internal/net/http/ResponseBodyHandlers.java
+++ b/src/java.net.http/share/classes/jdk/internal/net/http/ResponseBodyHandlers.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -32,15 +32,16 @@
 import java.net.URI;
 import java.nio.file.Files;
 import java.nio.file.OpenOption;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.security.AccessControlContext;
+import java.security.AccessController;
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentMap;
 import java.util.function.Function;
-import java.net.http.HttpHeaders;
 import java.net.http.HttpRequest;
 import java.net.http.HttpResponse;
 import java.net.http.HttpResponse.BodyHandler;
 import java.net.http.HttpResponse.ResponseInfo;
 import java.net.http.HttpResponse.BodySubscriber;
@@ -61,10 +62,11 @@
      * A Path body handler.
      */
     public static class PathBodyHandler implements BodyHandler<Path>{
         private final Path file;
         private final List<OpenOption> openOptions;  // immutable list
+        private final AccessControlContext acc;
         private final FilePermission filePermission;
 
         /**
          * Factory for creating PathBodyHandler.
          *
@@ -75,29 +77,38 @@
         public static PathBodyHandler create(Path file,
                                              List<OpenOption> openOptions) {
             FilePermission filePermission = null;
             SecurityManager sm = System.getSecurityManager();
             if (sm != null) {
-                String fn = pathForSecurityCheck(file);
-                FilePermission writePermission = new FilePermission(fn, "write");
-                sm.checkPermission(writePermission);
-                filePermission = writePermission;
+                try {
+                    String fn = pathForSecurityCheck(file);
+                    FilePermission writePermission = new FilePermission(fn, "write");
+                    sm.checkPermission(writePermission);
+                    filePermission = writePermission;
+                } catch (UnsupportedOperationException ignored) {
+                    // path not associated with the default file system provider
+                }
             }
-            return new PathBodyHandler(file, openOptions, filePermission);
+
+            assert filePermission == null || filePermission.getActions().equals("write");
+            var acc = sm != null ? AccessController.getContext() : null;
+            return new PathBodyHandler(file, openOptions, acc, filePermission);
         }
 
         private PathBodyHandler(Path file,
                                 List<OpenOption> openOptions,
+                                AccessControlContext acc,
                                 FilePermission filePermission) {
             this.file = file;
             this.openOptions = openOptions;
+            this.acc = acc;
             this.filePermission = filePermission;
         }
 
         @Override
         public BodySubscriber<Path> apply(ResponseInfo responseInfo) {
-            return new PathSubscriber(file, openOptions, filePermission);
+            return new PathSubscriber(file, openOptions, acc, filePermission);
         }
     }
 
     /** With push promise Map implementation */
     public static class PushPromisesHandlerWithMap<T>
@@ -147,10 +158,11 @@
 
     // Similar to Path body handler, but for file download.
     public static class FileDownloadBodyHandler implements BodyHandler<Path> {
         private final Path directory;
         private final List<OpenOption> openOptions;
+        private final AccessControlContext acc;
         private final FilePermission[] filePermissions;  // may be null
 
         /**
          * Factory for creating FileDownloadBodyHandler.
          *
@@ -158,14 +170,21 @@
          * FileDownloadBodyHandler. Permission checking and construction are
          * deliberately and tightly co-located.
          */
         public static FileDownloadBodyHandler create(Path directory,
                                                      List<OpenOption> openOptions) {
+            String fn;
+            try {
+                fn = pathForSecurityCheck(directory);
+            } catch (UnsupportedOperationException uoe) {
+                // directory not associated with the default file system provider
+                throw new IllegalArgumentException("invalid path: " + directory, uoe);
+            }
+
             FilePermission filePermissions[] = null;
             SecurityManager sm = System.getSecurityManager();
             if (sm != null) {
-                String fn = pathForSecurityCheck(directory);
                 FilePermission writePermission = new FilePermission(fn, "write");
                 String writePathPerm = fn + File.separatorChar + "*";
                 FilePermission writeInDirPermission = new FilePermission(writePathPerm, "write");
                 sm.checkPermission(writeInDirPermission);
                 FilePermission readPermission = new FilePermission(fn, "read");
@@ -182,19 +201,23 @@
             if (!Files.isDirectory(directory))
                 throw new IllegalArgumentException("not a directory: " + directory);
             if (!Files.isWritable(directory))
                 throw new IllegalArgumentException("non-writable directory: " + directory);
 
-            return new FileDownloadBodyHandler(directory, openOptions, filePermissions);
-
+            assert filePermissions == null || (filePermissions[0].getActions().equals("write")
+                    && filePermissions[1].getActions().equals("write"));
+            var acc = sm != null ? AccessController.getContext() : null;
+            return new FileDownloadBodyHandler(directory, openOptions, acc, filePermissions);
         }
 
         private FileDownloadBodyHandler(Path directory,
                                        List<OpenOption> openOptions,
+                                       AccessControlContext acc,
                                        FilePermission... filePermissions) {
             this.directory = directory;
             this.openOptions = openOptions;
+            this.acc = acc;
             this.filePermissions = filePermissions;
         }
 
         /** The "attachment" disposition-type and separator. */
         static final String DISPOSITION_TYPE = "attachment;";
@@ -271,9 +294,9 @@
             if (!file.startsWith(directory)) {
                 throw unchecked(responseInfo,
                         "Resulting file, " + file.toString() + ", outside of given directory");
             }
 
-            return new PathSubscriber(file, openOptions, filePermissions);
+            return new PathSubscriber(file, openOptions, acc, filePermissions);
         }
     }
 }
