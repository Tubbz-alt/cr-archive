diff a/src/java.base/share/classes/jdk/internal/module/ModuleInfo.java b/src/java.base/share/classes/jdk/internal/module/ModuleInfo.java
--- a/src/java.base/share/classes/jdk/internal/module/ModuleInfo.java
+++ b/src/java.base/share/classes/jdk/internal/module/ModuleInfo.java
@@ -47,10 +47,11 @@
 import java.util.Set;
 import java.util.function.Supplier;
 
 import jdk.internal.access.JavaLangModuleAccess;
 import jdk.internal.access.SharedSecrets;
+import jdk.internal.misc.VM;
 
 import static jdk.internal.module.ClassFileConstants.*;
 
 
 /**
@@ -60,13 +61,10 @@
  * and fine control over the throwing of InvalidModuleDescriptorException.
  */
 
 public final class ModuleInfo {
 
-    private final int JAVA_MIN_SUPPORTED_VERSION = 53;
-    private final int JAVA_MAX_SUPPORTED_VERSION = 59;
-
     private static final JavaLangModuleAccess JLMA
         = SharedSecrets.getJavaLangModuleAccess();
 
     // supplies the set of packages when ModulePackages attribute not present
     private final Supplier<Set<String>> packageFinder;
@@ -188,12 +186,11 @@
         if (magic != 0xCAFEBABE)
             throw invalidModuleDescriptor("Bad magic number");
 
         int minor_version = in.readUnsignedShort();
         int major_version = in.readUnsignedShort();
-        if (major_version < JAVA_MIN_SUPPORTED_VERSION ||
-                major_version > JAVA_MAX_SUPPORTED_VERSION) {
+        if (!VM.isSupportedModuleDescriptorVersion(major_version, minor_version)) {
             throw invalidModuleDescriptor("Unsupported major.minor version "
                                           + major_version + "." + minor_version);
         }
 
         ConstantPool cpool = new ConstantPool(in);
