diff a/src/java.base/share/classes/jdk/internal/org/objectweb/asm/tree/ClassNode.java b/src/java.base/share/classes/jdk/internal/org/objectweb/asm/tree/ClassNode.java
--- a/src/java.base/share/classes/jdk/internal/org/objectweb/asm/tree/ClassNode.java
+++ b/src/java.base/share/classes/jdk/internal/org/objectweb/asm/tree/ClassNode.java
@@ -158,16 +158,16 @@
     /** The internal names of the nest members of this class. May be {@literal null}. */
     public List<String> nestMembers;
 
     /**
       * <b>Experimental, use at your own risk. This method will be renamed when it becomes stable, this
-      * will break existing code using it</b>. The internal names of the permitted subtypes of this
+      * will break existing code using it</b>. The internal names of the permitted subclasses of this
       * class. May be {@literal null}.
       *
       * @deprecated this API is experimental.
       */
-    @Deprecated public List<String> permittedSubtypesExperimental;
+    @Deprecated public List<String> permittedSubclassesExperimental;
 
     /** The record components of this class. May be {@literal null}. */
     public List<RecordComponentNode> recordComponents;
 
     /** The fields of this class. */
@@ -282,17 +282,17 @@
     }
 
     /**
       * <b>Experimental, use at your own risk.</b>.
       *
-      * @param permittedSubtype the internal name of a permitted subtype.
+      * @param permittedSubclass the internal name of a permitted subclass.
       * @deprecated this API is experimental.
       */
     @Override
     @Deprecated
-    public void visitPermittedSubtypeExperimental(final String permittedSubtype) {
-        permittedSubtypesExperimental = Util.add(permittedSubtypesExperimental, permittedSubtype);
+    public void visitPermittedSubclassExperimental(final String permittedSubclass) {
+        permittedSubclassesExperimental = Util.add(permittedSubclassesExperimental, permittedSubclass);
     }
 
     @Override
     public void visitInnerClass(
             final String name, final String outerName, final String innerName, final int access) {
@@ -349,11 +349,11 @@
       * @param api an ASM API version. Must be one of {@link Opcodes#ASM4}, {@link Opcodes#ASM5},
       *     {@link Opcodes#ASM6}, {@link Opcodes#ASM7}. or {@link Opcodes#ASM8}.
       */
     @SuppressWarnings("deprecation")
     public void check(final int api) {
-        if (api != Opcodes.ASM9_EXPERIMENTAL && permittedSubtypesExperimental != null) {
+        if (api != Opcodes.ASM9_EXPERIMENTAL && permittedSubclassesExperimental != null) {
             throw new UnsupportedClassVersionException();
         }
         if (api < Opcodes.ASM8 && ((access & Opcodes.ACC_RECORD) != 0 || recordComponents != null)) {
             throw new UnsupportedClassVersionException();
         }
@@ -471,14 +471,14 @@
         if (nestMembers != null) {
             for (int i = 0, n = nestMembers.size(); i < n; ++i) {
                 classVisitor.visitNestMember(nestMembers.get(i));
             }
         }
-        // Visit the permitted subtypes.
-        if (permittedSubtypesExperimental != null) {
-            for (int i = 0, n = permittedSubtypesExperimental.size(); i < n; ++i) {
-                classVisitor.visitPermittedSubtypeExperimental(permittedSubtypesExperimental.get(i));
+        // Visit the permitted subclass.
+        if (permittedSubclassesExperimental != null) {
+            for (int i = 0, n = permittedSubclassesExperimental.size(); i < n; ++i) {
+                classVisitor.visitPermittedSubclassExperimental(permittedSubclassesExperimental.get(i));
             }
         }
         // Visit the inner classes.
         for (int i = 0, n = innerClasses.size(); i < n; ++i) {
             innerClasses.get(i).accept(classVisitor);
