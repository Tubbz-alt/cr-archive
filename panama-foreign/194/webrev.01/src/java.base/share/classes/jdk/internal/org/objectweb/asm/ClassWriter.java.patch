diff a/src/java.base/share/classes/jdk/internal/org/objectweb/asm/ClassWriter.java b/src/java.base/share/classes/jdk/internal/org/objectweb/asm/ClassWriter.java
--- a/src/java.base/share/classes/jdk/internal/org/objectweb/asm/ClassWriter.java
+++ b/src/java.base/share/classes/jdk/internal/org/objectweb/asm/ClassWriter.java
@@ -206,15 +206,15 @@
     private int numberOfNestMemberClasses;
 
     /** The 'classes' array of the NestMembers attribute, or {@literal null}. */
     private ByteVector nestMemberClasses;
 
-    /** The number_of_classes field of the PermittedSubtypes attribute, or 0. */
-    private int numberOfPermittedSubtypeClasses;
+    /** The number_of_classes field of the PermittedSubclasses attribute, or 0. */
+    private int numberOfPermittedSubclassClasses;
 
-    /** The 'classes' array of the PermittedSubtypes attribute, or {@literal null}. */
-    private ByteVector permittedSubtypeClasses;
+    /** The 'classes' array of the PermittedSubclasses attribute, or {@literal null}. */
+    private ByteVector permittedSubclassClasses;
 
     /**
       * The record components of this class, stored in a linked list of {@link RecordComponentWriter}
       * linked via their {@link RecordComponentWriter#delegate} field. This field stores the first
       * element of this list.
@@ -404,21 +404,21 @@
     }
 
     /**
       * <b>Experimental, use at your own risk.</b>
       *
-      * @param permittedSubtype the internal name of a permitted subtype.
+      * @param permittedSubclass the internal name of a permitted subclass.
       * @deprecated this API is experimental.
       */
     @Override
     @Deprecated
-    public final void visitPermittedSubtypeExperimental(final String permittedSubtype) {
-        if (permittedSubtypeClasses == null) {
-            permittedSubtypeClasses = new ByteVector();
+    public final void visitPermittedSubclassExperimental(final String permittedSubclass) {
+        if (permittedSubclassClasses == null) {
+            permittedSubclassClasses = new ByteVector();
         }
-        ++numberOfPermittedSubtypeClasses;
-        permittedSubtypeClasses.putShort(symbolTable.addConstantClass(permittedSubtype).index);
+        ++numberOfPermittedSubclassClasses;
+        permittedSubclassClasses.putShort(symbolTable.addConstantClass(permittedSubclass).index);
     }
 
     @Override
     public final void visitInnerClass(
             final String name, final String outerName, final String innerName, final int access) {
@@ -605,14 +605,14 @@
         if (nestMemberClasses != null) {
             ++attributesCount;
             size += 8 + nestMemberClasses.length;
             symbolTable.addConstantUtf8(Constants.NEST_MEMBERS);
         }
-        if (permittedSubtypeClasses != null) {
+        if (permittedSubclassClasses != null) {
             ++attributesCount;
-            size += 8 + permittedSubtypeClasses.length;
-            symbolTable.addConstantUtf8(Constants.PERMITTED_SUBTYPES);
+            size += 8 + permittedSubclassClasses.length;
+            symbolTable.addConstantUtf8(Constants.PERMITTED_SUBCLASSES);
         }
         int recordComponentCount = 0;
         int recordSize = 0;
         if ((accessFlags & Opcodes.ACC_RECORD) != 0 || firstRecordComponent != null) {
             RecordComponentWriter recordComponentWriter = firstRecordComponent;
@@ -727,16 +727,16 @@
                     .putShort(symbolTable.addConstantUtf8(Constants.NEST_MEMBERS))
                     .putInt(nestMemberClasses.length + 2)
                     .putShort(numberOfNestMemberClasses)
                     .putByteArray(nestMemberClasses.data, 0, nestMemberClasses.length);
         }
-        if (permittedSubtypeClasses != null) {
+        if (permittedSubclassClasses != null) {
             result
-                    .putShort(symbolTable.addConstantUtf8(Constants.PERMITTED_SUBTYPES))
-                    .putInt(permittedSubtypeClasses.length + 2)
-                    .putShort(numberOfPermittedSubtypeClasses)
-                    .putByteArray(permittedSubtypeClasses.data, 0, permittedSubtypeClasses.length);
+                    .putShort(symbolTable.addConstantUtf8(Constants.PERMITTED_SUBCLASSES))
+                    .putInt(permittedSubclassClasses.length + 2)
+                    .putShort(numberOfPermittedSubclassClasses)
+                    .putByteArray(permittedSubclassClasses.data, 0, permittedSubclassClasses.length);
         }
         if ((accessFlags & Opcodes.ACC_RECORD) != 0 || firstRecordComponent != null) {
             result
                     .putShort(symbolTable.addConstantUtf8(Constants.RECORD))
                     .putInt(recordSize + 2)
@@ -781,12 +781,12 @@
         lastRuntimeInvisibleTypeAnnotation = null;
         moduleWriter = null;
         nestHostClassIndex = 0;
         numberOfNestMemberClasses = 0;
         nestMemberClasses = null;
-        numberOfPermittedSubtypeClasses = 0;
-        permittedSubtypeClasses = null;
+        numberOfPermittedSubclassClasses = 0;
+        permittedSubclassClasses = null;
         firstRecordComponent = null;
         lastRecordComponent = null;
         firstAttribute = null;
         compute = hasFrames ? MethodWriter.COMPUTE_INSERTED_FRAMES : MethodWriter.COMPUTE_NOTHING;
         new ClassReader(classFile, 0, /* checkClassVersion = */ false)
