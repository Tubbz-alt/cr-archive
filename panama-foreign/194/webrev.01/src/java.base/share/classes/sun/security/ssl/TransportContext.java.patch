diff a/src/java.base/share/classes/sun/security/ssl/TransportContext.java b/src/java.base/share/classes/sun/security/ssl/TransportContext.java
--- a/src/java.base/share/classes/sun/security/ssl/TransportContext.java
+++ b/src/java.base/share/classes/sun/security/ssl/TransportContext.java
@@ -62,10 +62,27 @@
     boolean                         isInputCloseNotified = false;
     boolean                         peerUserCanceled = false;
     Exception                       closeReason = null;
     Exception                       delegatedThrown = null;
 
+    // For TLS 1.3 full handshake, the last handshake flight could be wrapped
+    // and encrypted in one record and delegated task would be used.  There is
+    // no chance to return FINISHED handshake status with SSLEngine.(un)wrap().
+    // However, per the HandshakeStatus.FINISHED specification, this value is
+    // only generated by a call to SSLEngine.wrap()/unwrap() and it is never
+    // generated by SSLEngine.getHandshakeStatus().
+    //
+    // In order to workaround this case for TLS 1.3, the FINISHED status is
+    // present with SSLEngine.wrap() while delivering of the NewSessionTicket
+    // post-handshake message.  If this post-handshake message is not needed,
+    // a follow-on SSLEngine.wrap() should be called to indicate the FINISHED
+    // handshake status.  Although this special SSLEngine.wrap() should not
+    // consume or produce any application or network data.
+    boolean                         needHandshakeFinishedStatus = false;
+    boolean                         hasDelegatedFinished = false;
+
+
     // negotiated security parameters
     SSLSessionImpl                  conSession;
     ProtocolVersion                 protocolVersion;
     String                          applicationProtocol= null;
 
@@ -587,10 +604,13 @@
                 }
             } else if (!isOutboundClosed()) {
                 // Special case that the inbound was closed, but outbound open.
                 return HandshakeStatus.NEED_WRAP;
             }   // Otherwise, both inbound and outbound are closed.
+        } else if (needHandshakeFinishedStatus) {
+            // Special case to get FINISHED status for TLS 1.3 full handshake.
+            return HandshakeStatus.NEED_WRAP;
         }
 
         return HandshakeStatus.NOT_HANDSHAKING;
     }
 
