diff a/src/java.base/share/classes/sun/security/ssl/Finished.java b/src/java.base/share/classes/sun/security/ssl/Finished.java
--- a/src/java.base/share/classes/sun/security/ssl/Finished.java
+++ b/src/java.base/share/classes/sun/security/ssl/Finished.java
@@ -480,11 +480,12 @@
                 shc.handshakeConsumers.put(
                         SSLHandshake.FINISHED.id, SSLHandshake.FINISHED);
                 shc.conContext.inputRecord.expectingFinishFlight();
             } else {
                 // Set the session's context based on stateless/cache status
-                if (shc.handshakeSession.isStatelessable(shc)) {
+                if (shc.statelessResumption &&
+                        shc.handshakeSession.isStatelessable()) {
                     shc.handshakeSession.setContext((SSLSessionContextImpl)
                             shc.sslContext.engineGetServerSessionContext());
                 } else {
                     if (shc.handshakeSession.isRejoinable()) {
                         ((SSLSessionContextImpl)shc.sslContext.
@@ -1138,16 +1139,11 @@
             }
             recordEvent(shc.conContext.conSession);
 
             //
             // produce
-            if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
-                SSLLogger.fine(
-                "Sending new session ticket");
-            }
-
-            NewSessionTicket.kickstartProducer.produce(shc);
+            NewSessionTicket.t13PosthandshakeProducer.produce(shc);
         }
     }
 
     private static void recordEvent(SSLSessionImpl session) {
         TLSHandshakeEvent event = new TLSHandshakeEvent();
