diff a/src/java.base/share/classes/sun/security/ssl/NewSessionTicket.java b/src/java.base/share/classes/sun/security/ssl/NewSessionTicket.java
--- a/src/java.base/share/classes/sun/security/ssl/NewSessionTicket.java
+++ b/src/java.base/share/classes/sun/security/ssl/NewSessionTicket.java
@@ -31,10 +31,11 @@
 import java.security.SecureRandom;
 import java.text.MessageFormat;
 import java.util.Locale;
 import javax.crypto.SecretKey;
 import javax.net.ssl.SSLHandshakeException;
+import sun.security.ssl.PskKeyExchangeModesExtension.PskKeyExchangeMode;
 import sun.security.ssl.PskKeyExchangeModesExtension.PskKeyExchangeModesSpec;
 import sun.security.ssl.SessionTicketExtension.SessionTicketSpec;
 import sun.security.ssl.SSLHandshake.HandshakeMessage;
 import sun.security.util.HexDumpEncoder;
 
@@ -47,12 +48,12 @@
     static final int MAX_TICKET_LIFETIME = 604800;  // seconds, 7 days
     static final SSLConsumer handshakeConsumer =
         new T13NewSessionTicketConsumer();
     static final SSLConsumer handshake12Consumer =
         new T12NewSessionTicketConsumer();
-    static final SSLProducer kickstartProducer =
-        new NewSessionTicketKickstartProducer();
+    static final SSLProducer t13PosthandshakeProducer =
+        new T13NewSessionTicketProducer();
     static final HandshakeProducer handshake12Producer =
         new T12NewSessionTicketProducer();
 
     /**
      * The NewSessionTicketMessage handshake messages.
@@ -203,11 +204,11 @@
 
             this.ticket = Record.getBytes16(m);
             if (ticket.length == 0) {
                 if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
                     SSLLogger.fine(
-                    "No ticket in the NewSessionTicket handshake message");
+                        "No ticket in the NewSessionTicket handshake message");
                 }
             }
 
             if (m.remaining() < 2) {
                 throw context.conContext.fatal(Alert.ILLEGAL_PARAMETER,
@@ -305,24 +306,40 @@
                     "Could not derive PSK").initCause(gse);
         }
     }
 
     private static final
-            class NewSessionTicketKickstartProducer implements SSLProducer {
+            class T13NewSessionTicketProducer implements SSLProducer {
         // Prevent instantiation of this class.
-        private NewSessionTicketKickstartProducer() {
+        private T13NewSessionTicketProducer() {
             // blank
         }
 
         @Override
         public byte[] produce(ConnectionContext context) throws IOException {
             HandshakeContext hc = (HandshakeContext)context;
 
+            // See note on TransportContext.needHandshakeFinishedStatus.
+            //
+            // Set to need handshake finished status.  Reset it later if a
+            // session ticket get delivered.
+            if (hc.conContext.hasDelegatedFinished) {
+                // Reset, as the delegated finished case will be handled later.
+                hc.conContext.hasDelegatedFinished = false;
+                hc.conContext.needHandshakeFinishedStatus = true;
+            }
+
             // The producing happens in server side only.
             if (hc instanceof ServerHandshakeContext) {
                 // Is this session resumable?
                 if (!hc.handshakeSession.isRejoinable()) {
+                    if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
+                        SSLLogger.fine(
+                                "No session ticket produced: " +
+                                "session is not resumable");
+                    }
+
                     return null;
                 }
 
                 // What's the requested PSK key exchange modes?
                 //
@@ -330,20 +347,30 @@
                 // produced and delivered only in the current handshake context
                 // if required.
                 PskKeyExchangeModesSpec pkemSpec =
                         (PskKeyExchangeModesSpec) hc.handshakeExtensions.get(
                                 SSLExtension.PSK_KEY_EXCHANGE_MODES);
-                if (pkemSpec == null || !pkemSpec.contains(
-                        PskKeyExchangeModesExtension.PskKeyExchangeMode.PSK_DHE_KE)) {
-                    // Client doesn't support PSK with (EC)DHE key establishment.
+                if (pkemSpec == null ||
+                        !pkemSpec.contains(PskKeyExchangeMode.PSK_DHE_KE)) {
+                    if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
+                        SSLLogger.fine(
+                                "No session ticket produced: " +
+                                "client does not support psk_dhe_ke");
+                    }
+
                     return null;
                 }
-            } else { // PostHandshakeContext
-
-                // Check if we have sent a PSK already, then we know it is using a
-                // allowable PSK exchange key mode
+            } else {     // PostHandshakeContext
+                // Check if we have sent a PSK already, then we know it is
+                // using a allowable PSK exchange key mode.
                 if (!hc.handshakeSession.isPSKable()) {
+                    if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
+                        SSLLogger.fine(
+                                "No session ticket produced: " +
+                                "No session ticket allowed in this session");
+                    }
+
                     return null;
                 }
             }
 
             // get a new session ID
@@ -355,12 +382,14 @@
             SecretKey resumptionMasterSecret =
                 hc.handshakeSession.getResumptionMasterSecret();
             if (resumptionMasterSecret == null) {
                 if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
                     SSLLogger.fine(
-                        "Session has no resumption secret. No ticket sent.");
+                            "No session ticket produced: " +
+                            "no resumption secret");
                 }
+
                 return null;
             }
 
             // construct the PSK and handshake message
             BigInteger nonce = hc.handshakeSession.incrTicketNonceCounter();
@@ -371,12 +400,14 @@
 
             int sessionTimeoutSeconds = sessionCache.getSessionTimeout();
             if (sessionTimeoutSeconds > MAX_TICKET_LIFETIME) {
                 if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
                     SSLLogger.fine(
-                        "Session timeout is too long. No ticket sent.");
+                            "No session ticket produced: " +
+                            "session timeout");
                 }
+
                 return null;
             }
 
             NewSessionTicketMessage nstm = null;
 
@@ -384,11 +415,12 @@
                     new SSLSessionImpl(hc.handshakeSession, newId);
             sessionCopy.setPreSharedKey(psk);
             sessionCopy.setPskIdentity(newId.getId());
 
             // If a stateless ticket is allowed, attempt to make one
-            if (hc.handshakeSession.isStatelessable(hc)) {
+            if (hc.statelessResumption &&
+                    hc.handshakeSession.isStatelessable()) {
                 nstm = new T13NewSessionTicketMessage(hc,
                         sessionTimeoutSeconds,
                         hc.sslContext.getSecureRandom(),
                         nonceArr,
                         new SessionTicketSpec().encrypt(hc, sessionCopy));
@@ -396,23 +428,25 @@
                 if (!nstm.isValid()) {
                     hc.statelessResumption = false;
                 } else {
                     if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
                         SSLLogger.fine(
-                                "Produced NewSessionTicket stateless " +
-                                        "handshake message", nstm);
+                            "Produced NewSessionTicket stateless " +
+                            "post-handshake message", nstm);
                     }
                 }
             }
+
             // If a session cache ticket is being used, make one
-            if (!hc.handshakeSession.isStatelessable(hc)) {
+            if (!hc.statelessResumption ||
+                    !hc.handshakeSession.isStatelessable()) {
                 nstm = new T13NewSessionTicketMessage(hc, sessionTimeoutSeconds,
                         hc.sslContext.getSecureRandom(), nonceArr,
                         newId.getId());
                 if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
                     SSLLogger.fine(
-                            "Produced NewSessionTicket handshake message",
+                            "Produced NewSessionTicket post-handshake message",
                             nstm);
                 }
 
                 // create and cache the new session
                 // The new session must be a child of the existing session so
@@ -425,16 +459,25 @@
             // Output the handshake message.
             if (nstm != null) {
                 // should never be null
                 nstm.write(hc.handshakeOutput);
                 hc.handshakeOutput.flush();
-            }
 
-            if (hc.negotiatedProtocol.useTLS13PlusSpec()) {
-                hc.conContext.finishPostHandshake();
+                // See note on TransportContext.needHandshakeFinishedStatus.
+                //
+                // Reset the needHandshakeFinishedStatus flag.  The delivery
+                // of this post-handshake message will indicate the FINISHED
+                // handshake status.  It is not needed to have a follow-on
+                // SSLEngine.wrap() any longer.
+                if (hc.conContext.needHandshakeFinishedStatus) {
+                    hc.conContext.needHandshakeFinishedStatus = false;
+                }
             }
 
+            // clean the post handshake context
+            hc.conContext.finishPostHandshake();
+
             // The message has been delivered.
             return null;
         }
     }
 
@@ -481,11 +524,12 @@
             NewSessionTicketMessage nstm = new T12NewSessionTicketMessage(shc,
                     sessionTimeoutSeconds,
                     new SessionTicketSpec().encrypt(shc, sessionCopy));
             if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
                 SSLLogger.fine(
-                        "Produced NewSessionTicket stateless handshake message", nstm);
+                    "Produced NewSessionTicket stateless handshake message",
+                    nstm);
             }
 
             // Output the handshake message.
             nstm.write(shc.handshakeOutput);
             shc.handshakeOutput.flush();
@@ -519,56 +563,54 @@
             HandshakeContext hc = (HandshakeContext)context;
             NewSessionTicketMessage nstm =
                     new T13NewSessionTicketMessage(hc, message);
             if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
                 SSLLogger.fine(
-                "Consuming NewSessionTicket message", nstm);
+                        "Consuming NewSessionTicket message", nstm);
             }
 
             SSLSessionContextImpl sessionCache = (SSLSessionContextImpl)
                     hc.sslContext.engineGetClientSessionContext();
 
             // discard tickets with timeout 0
             if (nstm.ticketLifetime <= 0 ||
                 nstm.ticketLifetime > MAX_TICKET_LIFETIME) {
                 if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
                     SSLLogger.fine(
-                    "Discarding NewSessionTicket with lifetime "
-                        + nstm.ticketLifetime, nstm);
+                            "Discarding NewSessionTicket with lifetime " +
+                            nstm.ticketLifetime, nstm);
                 }
                 sessionCache.remove(hc.handshakeSession.getSessionId());
                 return;
             }
 
             if (sessionCache.getSessionTimeout() > MAX_TICKET_LIFETIME) {
                 if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
                     SSLLogger.fine(
-                    "Session cache lifetime is too long. Discarding ticket.");
+                        "Session cache lifetime is too long. " +
+                        "Discarding ticket.");
                 }
                 return;
             }
 
             SSLSessionImpl sessionToSave = hc.conContext.conSession;
-            SecretKey psk = null;
-            if (hc.negotiatedProtocol.useTLS13PlusSpec()) {
-                SecretKey resumptionMasterSecret =
-                        sessionToSave.getResumptionMasterSecret();
-                if (resumptionMasterSecret == null) {
-                    if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
-                        SSLLogger.fine(
-                                "Session has no resumption master secret." +
-                                        " Ignoring ticket.");
-                    }
-                    return;
+            SecretKey resumptionMasterSecret =
+                    sessionToSave.getResumptionMasterSecret();
+            if (resumptionMasterSecret == null) {
+                if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
+                    SSLLogger.fine(
+                            "Session has no resumption master secret. " +
+                            "Ignoring ticket.");
                 }
-
-                // derive the PSK
-                psk = derivePreSharedKey(
-                        sessionToSave.getSuite().hashAlg,
-                        resumptionMasterSecret, nstm.getTicketNonce());
+                return;
             }
 
+            // derive the PSK
+            SecretKey psk = derivePreSharedKey(
+                    sessionToSave.getSuite().hashAlg,
+                    resumptionMasterSecret, nstm.getTicketNonce());
+
             // create and cache the new session
             // The new session must be a child of the existing session so
             // they will be invalidated together, etc.
             SessionId newId =
                     new SessionId(true, hc.sslContext.getSecureRandom());
@@ -578,14 +620,12 @@
             sessionCopy.setPreSharedKey(psk);
             sessionCopy.setTicketAgeAdd(nstm.getTicketAgeAdd());
             sessionCopy.setPskIdentity(nstm.ticket);
             sessionCache.put(sessionCopy);
 
-            // clean handshake context
-            if (hc.negotiatedProtocol.useTLS13PlusSpec()) {
-                hc.conContext.finishPostHandshake();
-            }
+            // clean the post handshake context
+            hc.conContext.finishPostHandshake();
         }
     }
 
     private static final
     class T12NewSessionTicketConsumer implements SSLConsumer {
@@ -613,23 +653,24 @@
             // discard tickets with timeout 0
             if (nstm.ticketLifetime <= 0 ||
                 nstm.ticketLifetime > MAX_TICKET_LIFETIME) {
                 if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
                     SSLLogger.fine(
-                    "Discarding NewSessionTicket with lifetime "
-                        + nstm.ticketLifetime, nstm);
+                            "Discarding NewSessionTicket with lifetime " +
+                            nstm.ticketLifetime, nstm);
                 }
                 return;
             }
 
             SSLSessionContextImpl sessionCache = (SSLSessionContextImpl)
                     hc.sslContext.engineGetClientSessionContext();
 
             if (sessionCache.getSessionTimeout() > MAX_TICKET_LIFETIME) {
                 if (SSLLogger.isOn && SSLLogger.isOn("ssl,handshake")) {
                     SSLLogger.fine(
-                    "Session cache lifetime is too long. Discarding ticket.");
+                        "Session cache lifetime is too long. " +
+                        "Discarding ticket.");
                 }
                 return;
             }
 
             hc.handshakeSession.setPskIdentity(nstm.ticket);
