diff a/src/hotspot/share/prims/jvmti.xml b/src/hotspot/share/prims/jvmti.xml
--- a/src/hotspot/share/prims/jvmti.xml
+++ b/src/hotspot/share/prims/jvmti.xml
@@ -6898,11 +6898,11 @@
 
     <function id="GetClassLoaderClasses" jkernel="yes" num="79">
       <synopsis>Get Classloader Classes</synopsis>
       <description>
         Returns an array of all classes which this class loader
-        can find by name via 
+        can find by name via
         <externallink id="../api/java.base/java/lang/ClassLoader.html#loadClass(java.lang.String,boolean)">ClassLoader::loadClass</externallink>,
         <externallink id="../api/java.base/java/lang/Class.html#forName(java.lang.String,boolean,java.lang.ClassLoader)">Class::forName</externallink> and bytecode linkage.
         That is, all classes for which <code>initiating_loader</code>
         has been recorded as an initiating loader.
         Each class in the returned array was created by this class loader,
@@ -7678,11 +7678,12 @@
         The retransformation may change method bodies, the constant pool and attributes
         (unless explicitly prohibited).
         The retransformation must not add, remove or rename fields or methods, change the
         signatures of methods, change modifiers, or change inheritance.
         The retransformation must not change the <code>NestHost</code>,
-        <code>NestMembers</code>, or <code>Record</code> attributes.
+        <code>NestMembers</code>, <code>Record</code>, or <code>PermittedSubclasses</code>
+        attributes.
         These restrictions may be lifted in future versions.
         See the error return description below for information on error codes
         returned if an unsupported retransformation is attempted.
         The class file bytes are not verified or installed until they have passed
         through the chain of <eventlink id="ClassFileLoadHook"/> events, thus the
@@ -7831,11 +7832,12 @@
         The redefinition may change method bodies, the constant pool and attributes
         (unless explicitly prohibited).
         The redefinition must not add, remove or rename fields or methods, change the
         signatures of methods, change modifiers, or change inheritance.
         The redefinition must not change the <code>NestHost</code>,
-        <code>NestMembers</code>, or <code>Record</code> attributes.
+        <code>NestMembers</code>, <code>Record</code>, or <code>PermittedSubclasses</code>
+        attributes.
         These restrictions may be lifted in future versions.
         See the error return description below for information on error codes
         returned if an unsupported redefinition is attempted.
         The class file bytes are not verified or installed until they have passed
         through the chain of <eventlink id="ClassFileLoadHook"/> events, thus the
@@ -12279,11 +12281,11 @@
       (see <paramlink id="was_popped_by_exception"></paramlink>).
       However, frame pops caused by the <functionlink id="PopFrame"/>
       function are not reported.
       <p/>
       The location reported by <functionlink id="GetFrameLocation"></functionlink>
-      identifies the executable location in the returning method,
+      for the depth 0 identifies the executable location in the returning method,
       immediately prior to the return.
     </description>
     <origin>jvmdi</origin>
     <capabilities>
       <required id="can_generate_frame_pop_events"></required>
@@ -12330,12 +12332,11 @@
     <description>
       Method entry events are generated upon entry of Java
       programming language methods (including native methods).
       <p/>
       The location reported by <functionlink id="GetFrameLocation"></functionlink>
-      identifies the initial executable location in
-      the method.
+      for the depth 0 identifies the initial executable location in the method.
       <p/>
       Enabling method
       entry or exit events will significantly degrade performance on many platforms and is thus
       not advised for performance critical usage (such as profiling).
       <internallink id="bci">Bytecode instrumentation</internallink> should be
@@ -12383,16 +12384,12 @@
       This is true whether termination is caused by
       executing its return instruction
       or by throwing an exception to its caller
       (see <paramlink id="was_popped_by_exception"></paramlink>).
       <p/>
-      The <code>method</code> field uniquely identifies the
-      method being entered or exited. The <code>frame</code> field provides
-      access to the stack frame for the method.
-      <p/>
       The location reported by <functionlink id="GetFrameLocation"></functionlink>
-      identifies the executable location in the returning method
+      for the depth 0 identifies the executable location in the returning method
       immediately prior to the return.
       <p/>
         Enabling method
         entry or exit events will significantly degrade performance on many platforms and is thus
         not advised for performance critical usage (such as profiling).
@@ -15026,10 +15023,15 @@
   <change date="10 October 2019" version="14.0.0">
       Minor update for new class file Record attribute:
         - Specify that RedefineClasses and RetransformClasses are not allowed
           to change the class file Record attribute.
   </change>
+  <change date="13 May 2020" version="15.0.0">
+      Minor update for new class file PermittedSubclasses attribute:
+        - Specify that RedefineClasses and RetransformClasses are not allowed
+          to change the class file PermittedSubclasses attribute.
+  </change>
 </changehistory>
 
 </specification>
 <!-- Keep this comment at the end of the file
 Local variables:
