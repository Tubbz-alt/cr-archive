diff a/src/hotspot/share/oops/instanceRefKlass.cpp b/src/hotspot/share/oops/instanceRefKlass.cpp
--- a/src/hotspot/share/oops/instanceRefKlass.cpp
+++ b/src/hotspot/share/oops/instanceRefKlass.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -43,24 +43,24 @@
 
   OopMapBlock* map = ik->start_of_nonstatic_oop_maps();
 
 #ifdef ASSERT
   // Verify fields are in the expected places.
-  int referent_offset = java_lang_ref_Reference::referent_offset;
-  int queue_offset = java_lang_ref_Reference::queue_offset;
-  int next_offset = java_lang_ref_Reference::next_offset;
-  int discovered_offset = java_lang_ref_Reference::discovered_offset;
+  int referent_offset = java_lang_ref_Reference::referent_offset();
+  int queue_offset = java_lang_ref_Reference::queue_offset();
+  int next_offset = java_lang_ref_Reference::next_offset();
+  int discovered_offset = java_lang_ref_Reference::discovered_offset();
   assert(referent_offset < queue_offset, "just checking");
   assert(queue_offset < next_offset, "just checking");
   assert(next_offset < discovered_offset, "just checking");
   const unsigned int count =
     1 + ((discovered_offset - referent_offset) / heapOopSize);
   assert(count == 4, "just checking");
 #endif // ASSERT
 
   // Updated map starts at "queue", covers "queue" and "next".
-  const int new_offset = java_lang_ref_Reference::queue_offset;
+  const int new_offset = java_lang_ref_Reference::queue_offset();
   const unsigned int new_count = 2; // queue and next
 
   // Verify existing map is as expected, and update if needed.
   if (UseSharedSpaces) {
     assert(map->offset() == new_offset, "just checking");
