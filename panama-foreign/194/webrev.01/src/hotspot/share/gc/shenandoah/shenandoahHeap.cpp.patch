diff a/src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp b/src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp
@@ -1587,21 +1587,24 @@
       if (ShenandoahPacing) {
         pacer()->setup_for_evac();
       }
 
       if (ShenandoahVerify) {
-        ShenandoahRootVerifier::RootTypes types = ShenandoahRootVerifier::None;
-        if (ShenandoahConcurrentRoots::should_do_concurrent_roots()) {
-          types = ShenandoahRootVerifier::combine(ShenandoahRootVerifier::JNIHandleRoots, ShenandoahRootVerifier::WeakRoots);
-          types = ShenandoahRootVerifier::combine(types, ShenandoahRootVerifier::CLDGRoots);
-          types = ShenandoahRootVerifier::combine(types, ShenandoahRootVerifier::StringDedupRoots);
+        // If OOM while evacuating/updating of roots, there is no guarantee of their consistencies
+        if (!cancelled_gc()) {
+          ShenandoahRootVerifier::RootTypes types = ShenandoahRootVerifier::None;
+          if (ShenandoahConcurrentRoots::should_do_concurrent_roots()) {
+            types = ShenandoahRootVerifier::combine(ShenandoahRootVerifier::JNIHandleRoots, ShenandoahRootVerifier::WeakRoots);
+            types = ShenandoahRootVerifier::combine(types, ShenandoahRootVerifier::CLDGRoots);
+            types = ShenandoahRootVerifier::combine(types, ShenandoahRootVerifier::StringDedupRoots);
+          }
+
+          if (ShenandoahConcurrentRoots::should_do_concurrent_class_unloading()) {
+            types = ShenandoahRootVerifier::combine(types, ShenandoahRootVerifier::CodeRoots);
+          }
+          verifier()->verify_roots_no_forwarded_except(types);
         }
-
-        if (ShenandoahConcurrentRoots::should_do_concurrent_class_unloading()) {
-          types = ShenandoahRootVerifier::combine(types, ShenandoahRootVerifier::CodeRoots);
-        }
-        verifier()->verify_roots_no_forwarded_except(types);
         verifier()->verify_during_evacuation();
       }
     } else {
       if (ShenandoahVerify) {
         verifier()->verify_after_concmark();
@@ -1658,11 +1661,11 @@
 
 public:
   ShenandoahConcurrentRootsEvacUpdateTask(ShenandoahPhaseTimings::Phase phase) :
     AbstractGangTask("Shenandoah Evacuate/Update Concurrent Strong Roots Task"),
     _vm_roots(phase),
-    _cld_roots(phase) {}
+    _cld_roots(phase, ShenandoahHeap::heap()->workers()->active_workers()) {}
 
   void work(uint worker_id) {
     ShenandoahConcurrentWorkerSession worker_session(worker_id);
     ShenandoahEvacOOMScope oom;
     {
@@ -1779,11 +1782,11 @@
     AbstractGangTask("Shenandoah Concurrent Weak Root Task"),
     _jni_roots(OopStorageSet::jni_weak(), phase, ShenandoahPhaseTimings::JNIWeakRoots),
     _string_table_roots(OopStorageSet::string_table_weak(), phase, ShenandoahPhaseTimings::StringTableRoots),
     _resolved_method_table_roots(OopStorageSet::resolved_method_table_weak(), phase, ShenandoahPhaseTimings::ResolvedMethodTableRoots),
     _vm_roots(OopStorageSet::vm_weak(), phase, ShenandoahPhaseTimings::VMWeakRoots),
-    _cld_roots(phase),
+    _cld_roots(phase, ShenandoahHeap::heap()->workers()->active_workers()),
     _nmethod_itr(ShenandoahCodeRoots::table()),
     _concurrent_class_unloading(ShenandoahConcurrentRoots::should_do_concurrent_class_unloading()) {
     StringTable::reset_dead_counter();
     ResolvedMethodTable::reset_dead_counter();
     if (_concurrent_class_unloading) {
