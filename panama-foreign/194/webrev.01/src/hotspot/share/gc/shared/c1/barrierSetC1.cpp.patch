diff a/src/hotspot/share/gc/shared/c1/barrierSetC1.cpp b/src/hotspot/share/gc/shared/c1/barrierSetC1.cpp
--- a/src/hotspot/share/gc/shared/c1/barrierSetC1.cpp
+++ b/src/hotspot/share/gc/shared/c1/barrierSetC1.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -191,11 +191,11 @@
 
   /* Normalize boolean value returned by unsafe operation, i.e., value  != 0 ? value = true : value false. */
   if (mask_boolean) {
     LabelObj* equalZeroLabel = new LabelObj();
     __ cmp(lir_cond_equal, result, 0);
-    __ branch(lir_cond_equal, T_BOOLEAN, equalZeroLabel->label());
+    __ branch(lir_cond_equal, equalZeroLabel->label());
     __ move(LIR_OprFact::intConst(1), result);
     __ branch_destination(equalZeroLabel->label());
   }
 }
 
@@ -220,11 +220,11 @@
   // object graph. If G1 is enabled then we need to record
   // the value that is being returned in an SATB log buffer.
   //
   // We need to generate code similar to the following...
   //
-  // if (offset == java_lang_ref_Reference::referent_offset) {
+  // if (offset == java_lang_ref_Reference::referent_offset()) {
   //   if (src != NULL) {
   //     if (klass(src)->reference_type() != REF_NONE) {
   //       pre_barrier(..., value, ...);
   //     }
   //   }
@@ -245,11 +245,11 @@
     jlong off_con = (constant->type() == T_INT ?
                      (jlong)constant->as_jint() :
                      constant->as_jlong());
 
 
-    if (off_con != (jlong) java_lang_ref_Reference::referent_offset) {
+    if (off_con != (jlong) java_lang_ref_Reference::referent_offset()) {
       // The constant offset is something other than referent_offset.
       // We can skip generating/checking the remaining guards and
       // skip generation of the code stub.
       gen_pre_barrier = false;
     } else {
@@ -312,35 +312,35 @@
       // a reg-reg compare.
 
       LIR_Opr referent_off;
 
       if (offset->type() == T_INT) {
-        referent_off = LIR_OprFact::intConst(java_lang_ref_Reference::referent_offset);
+        referent_off = LIR_OprFact::intConst(java_lang_ref_Reference::referent_offset());
       } else {
         assert(offset->type() == T_LONG, "what else?");
         referent_off = gen->new_register(T_LONG);
-        __ move(LIR_OprFact::longConst(java_lang_ref_Reference::referent_offset), referent_off);
+        __ move(LIR_OprFact::longConst(java_lang_ref_Reference::referent_offset()), referent_off);
       }
       __ cmp(lir_cond_notEqual, offset, referent_off);
-      __ branch(lir_cond_notEqual, offset->type(), cont->label());
+      __ branch(lir_cond_notEqual, cont->label());
     }
     if (gen_source_check) {
       // offset is a const and equals referent offset
       // if (source == null) -> continue
       __ cmp(lir_cond_equal, base_reg, LIR_OprFact::oopConst(NULL));
-      __ branch(lir_cond_equal, T_OBJECT, cont->label());
+      __ branch(lir_cond_equal, cont->label());
     }
     LIR_Opr src_klass = gen->new_register(T_METADATA);
     if (gen_type_check) {
       // We have determined that offset == referent_offset && src != null.
       // if (src->_klass->_reference_type == REF_NONE) -> continue
       __ move(new LIR_Address(base_reg, oopDesc::klass_offset_in_bytes(), T_ADDRESS), src_klass);
       LIR_Address* reference_type_addr = new LIR_Address(src_klass, in_bytes(InstanceKlass::reference_type_offset()), T_BYTE);
       LIR_Opr reference_type = gen->new_register(T_INT);
       __ move(reference_type_addr, reference_type);
       __ cmp(lir_cond_equal, reference_type, LIR_OprFact::intConst(REF_NONE));
-      __ branch(lir_cond_equal, T_INT, cont->label());
+      __ branch(lir_cond_equal, cont->label());
     }
   }
 }
 
 LIR_Opr BarrierSetC1::resolve(LIRGenerator* gen, DecoratorSet decorators, LIR_Opr obj) {
