diff a/src/hotspot/os/linux/gc/z/zMountPoint_linux.cpp b/src/hotspot/os/linux/gc/z/zMountPoint_linux.cpp
--- a/src/hotspot/os/linux/gc/z/zMountPoint_linux.cpp
+++ b/src/hotspot/os/linux/gc/z/zMountPoint_linux.cpp
@@ -20,15 +20,15 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 #include "precompiled.hpp"
+#include "gc/shared/gcLogPrecious.hpp"
 #include "gc/z/zArray.inline.hpp"
 #include "gc/z/zErrno.hpp"
 #include "gc/z/zMountPoint_linux.hpp"
 #include "runtime/globals.hpp"
-#include "logging/log.hpp"
 
 #include <stdio.h>
 #include <unistd.h>
 
 // Mount information, see proc(5) for more details.
@@ -71,11 +71,11 @@
 
 void ZMountPoint::get_mountpoints(const char* filesystem, ZArray<char*>* mountpoints) const {
   FILE* fd = fopen(PROC_SELF_MOUNTINFO, "r");
   if (fd == NULL) {
     ZErrno err;
-    log_error(gc)("Failed to open %s: %s", PROC_SELF_MOUNTINFO, err.to_string());
+    log_error_p(gc)("Failed to open %s: %s", PROC_SELF_MOUNTINFO, err.to_string());
     return;
   }
 
   char* line = NULL;
   size_t length = 0;
@@ -112,14 +112,14 @@
       }
     }
   }
 
   // Preferred mount point not found
-  log_error(gc)("More than one %s filesystem found:", filesystem);
+  log_error_p(gc)("More than one %s filesystem found:", filesystem);
   ZArrayIterator<char*> iter2(mountpoints);
   for (char* mountpoint; iter2.next(&mountpoint);) {
-    log_error(gc)("  %s", mountpoint);
+    log_error_p(gc)("  %s", mountpoint);
   }
 
   return NULL;
 }
 
@@ -129,11 +129,11 @@
 
   get_mountpoints(filesystem, &mountpoints);
 
   if (mountpoints.size() == 0) {
     // No mount point found
-    log_error(gc)("Failed to find an accessible %s filesystem", filesystem);
+    log_error_p(gc)("Failed to find an accessible %s filesystem", filesystem);
   } else if (mountpoints.size() == 1) {
     // One mount point found
     path = strdup(mountpoints.at(0));
   } else {
     // More than one mount point found
