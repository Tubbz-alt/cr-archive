diff a/src/hotspot/cpu/s390/methodHandles_s390.cpp b/src/hotspot/cpu/s390/methodHandles_s390.cpp
--- a/src/hotspot/cpu/s390/methodHandles_s390.cpp
+++ b/src/hotspot/cpu/s390/methodHandles_s390.cpp
@@ -54,11 +54,11 @@
                                           Register temp_reg, Register temp2_reg) {
   if (VerifyMethodHandles) {
     verify_klass(_masm, klass_reg, SystemDictionary::WK_KLASS_ENUM_NAME(java_lang_Class),
                  temp_reg, temp2_reg, "MH argument is a Class");
   }
-  __ z_lg(klass_reg, Address(klass_reg, java_lang_Class::klass_offset_in_bytes()));
+  __ z_lg(klass_reg, Address(klass_reg, java_lang_Class::klass_offset()));
 }
 
 
 #ifdef ASSERT
 static int check_nonzero(const char* xname, int x) {
@@ -109,11 +109,11 @@
   NearLabel L;
   BLOCK_COMMENT("verify_ref_kind {");
 
   __ z_llgf(temp,
             Address(member_reg,
-                    NONZERO(java_lang_invoke_MemberName::flags_offset_in_bytes())));
+                    NONZERO(java_lang_invoke_MemberName::flags_offset())));
   __ z_srl(temp,  java_lang_invoke_MemberName::MN_REFERENCE_KIND_SHIFT);
   __ z_nilf(temp, java_lang_invoke_MemberName::MN_REFERENCE_KIND_MASK);
   __ compare32_and_branch(temp, constant(ref_kind), Assembler::bcondEqual, L);
 
   {
@@ -196,26 +196,26 @@
 
   // Load the invoker, as MH -> MH.form -> LF.vmentry
   __ verify_oop(recv, FILE_AND_LINE);
   __ load_heap_oop(method_temp,
                    Address(recv,
-                           NONZERO(java_lang_invoke_MethodHandle::form_offset_in_bytes())),
+                           NONZERO(java_lang_invoke_MethodHandle::form_offset())),
                    noreg, noreg, IS_NOT_NULL);
   __ verify_oop(method_temp, FILE_AND_LINE);
   __ load_heap_oop(method_temp,
                    Address(method_temp,
-                           NONZERO(java_lang_invoke_LambdaForm::vmentry_offset_in_bytes())),
+                           NONZERO(java_lang_invoke_LambdaForm::vmentry_offset())),
                    noreg, noreg, IS_NOT_NULL);
   __ verify_oop(method_temp, FILE_AND_LINE);
   __ load_heap_oop(method_temp,
                    Address(method_temp,
-                           NONZERO(java_lang_invoke_MemberName::method_offset_in_bytes())),
+                           NONZERO(java_lang_invoke_MemberName::method_offset())),
                    noreg, noreg, IS_NOT_NULL);
   __ verify_oop(method_temp, FILE_AND_LINE);
   __ z_lg(method_temp,
           Address(method_temp,
-                  NONZERO(java_lang_invoke_ResolvedMethodName::vmtarget_offset_in_bytes())));
+                  NONZERO(java_lang_invoke_ResolvedMethodName::vmtarget_offset())));
 
   if (VerifyMethodHandles && !for_compiler_entry) {
     // Make sure recv is already on stack.
     NearLabel L;
     Address paramSize(temp2, ConstMethod::size_of_parameters_offset());
@@ -377,14 +377,14 @@
                  SystemDictionary::WK_KLASS_ENUM_NAME(MemberName_klass),
                  temp1, temp2,
                  "MemberName required for invokeVirtual etc.");
   }
 
-  Address  member_clazz(   member_reg, NONZERO(java_lang_invoke_MemberName::clazz_offset_in_bytes()));
-  Address  member_vmindex( member_reg, NONZERO(java_lang_invoke_MemberName::vmindex_offset_in_bytes()));
-  Address  member_vmtarget(member_reg, NONZERO(java_lang_invoke_MemberName::method_offset_in_bytes()));
-  Address  vmtarget_method(Z_method, NONZERO(java_lang_invoke_ResolvedMethodName::vmtarget_offset_in_bytes()));
+  Address  member_clazz(   member_reg, NONZERO(java_lang_invoke_MemberName::clazz_offset()));
+  Address  member_vmindex( member_reg, NONZERO(java_lang_invoke_MemberName::vmindex_offset()));
+  Address  member_vmtarget(member_reg, NONZERO(java_lang_invoke_MemberName::method_offset()));
+  Address  vmtarget_method(Z_method, NONZERO(java_lang_invoke_ResolvedMethodName::vmtarget_offset()));
   Register temp1_recv_klass = temp1;
 
   if (iid != vmIntrinsics::_linkToStatic) {
     __ verify_oop(receiver_reg, FILE_AND_LINE);
     if (iid == vmIntrinsics::_linkToSpecial) {
@@ -606,13 +606,11 @@
     tty->print_cr("  stack layout:");
     values.print(p);
     if (has_mh && oopDesc::is_oop(mh)) {
       mh->print();
       if (java_lang_invoke_MethodHandle::is_instance(mh)) {
-        if (java_lang_invoke_MethodHandle::form_offset_in_bytes() != 0) {
-          java_lang_invoke_MethodHandle::form(mh)->print();
-        }
+        java_lang_invoke_MethodHandle::form(mh)->print();
       }
     }
   }
 }
 
