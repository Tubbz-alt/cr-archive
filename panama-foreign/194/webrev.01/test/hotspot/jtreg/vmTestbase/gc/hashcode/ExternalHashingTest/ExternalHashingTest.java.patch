diff a/test/hotspot/jtreg/vmTestbase/gc/hashcode/ExternalHashingTest/ExternalHashingTest.java b/test/hotspot/jtreg/vmTestbase/gc/hashcode/ExternalHashingTest/ExternalHashingTest.java
--- a/test/hotspot/jtreg/vmTestbase/gc/hashcode/ExternalHashingTest/ExternalHashingTest.java
+++ b/test/hotspot/jtreg/vmTestbase/gc/hashcode/ExternalHashingTest/ExternalHashingTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -23,11 +23,11 @@
 
 
 
 /*
  * @test
- * @key stress gc
+ * @key stress gc randomness
  *
  * @summary converted from VM Testbase gc/hashcode/ExternalHashingTest.
  * VM Testbase keywords: [gc, stress, stressopt, nonconcurrent, jrockit]
  * VM Testbase readme:
  * DESCRIPTION
@@ -56,10 +56,12 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Random;
 import java.util.Vector;
 
+import jdk.test.lib.Utils;
+
 /**
  * Test the possible interaction of external hashing and locking on object
  * headers.
  *
  * The approach is to nearly simultaneously lock/hash a relatively small group
@@ -75,11 +77,11 @@
  */
 
 public final class ExternalHashingTest {
 
     /** Random number generator. */
-    static Random rand = new Random();
+    static Random rand = Utils.getRandomInstance();
 
     /** Goes to true when the threads should start working. */
     public static volatile boolean startingGun;
 
     /** Goes to true when the hashing thread is done. */
