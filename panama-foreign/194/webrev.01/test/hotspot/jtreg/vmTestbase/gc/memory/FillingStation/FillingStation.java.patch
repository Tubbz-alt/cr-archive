diff a/test/hotspot/jtreg/vmTestbase/gc/memory/FillingStation/FillingStation.java b/test/hotspot/jtreg/vmTestbase/gc/memory/FillingStation/FillingStation.java
--- a/test/hotspot/jtreg/vmTestbase/gc/memory/FillingStation/FillingStation.java
+++ b/test/hotspot/jtreg/vmTestbase/gc/memory/FillingStation/FillingStation.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 
 /*
  * @test
- * @key stress gc
+ * @key stress gc randomness
  *
  * @summary converted from VM Testbase gc/memory/FillingStation.
  * VM Testbase keywords: [gc, stress, nonconcurrent]
  *
  * @library /vmTestbase
@@ -34,10 +34,13 @@
  * @run main/othervm gc.memory.FillingStation.FillingStation
  */
 
 package gc.memory.FillingStation;
 
+import jdk.test.lib.Utils;
+import java.util.Random;
+
 public class FillingStation {
 
     public static final long minObjectSize  = 4;
     public static final long freeSpaceLimit = 64;
     public static final long maxObjectSize  = 32*1024;
@@ -75,11 +78,11 @@
     }
 
     public static void fill() {
         boolean _overflow = false;
         Runtime rt = java.lang.Runtime.getRuntime();
-        java.util.Random stream = new java.util.Random();
+        Random stream = Utils.getRandomInstance();
         Space next = null;
         try {
             for (long available = rt.freeMemory();
                  available > freeSpaceLimit;
                  available = rt.freeMemory()) {
