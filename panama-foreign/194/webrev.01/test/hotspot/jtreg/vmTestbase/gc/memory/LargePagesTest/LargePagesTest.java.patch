diff a/test/hotspot/jtreg/vmTestbase/gc/memory/LargePagesTest/LargePagesTest.java b/test/hotspot/jtreg/vmTestbase/gc/memory/LargePagesTest/LargePagesTest.java
--- a/test/hotspot/jtreg/vmTestbase/gc/memory/LargePagesTest/LargePagesTest.java
+++ b/test/hotspot/jtreg/vmTestbase/gc/memory/LargePagesTest/LargePagesTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 
 /*
  * @test
- * @key stress gc
+ * @key stress gc randomness
  *
  * @summary converted from VM Testbase gc/memory/LargePagesTest.
  * VM Testbase keywords: [gc, stress, stressopt]
  *
  * @library /vmTestbase
@@ -35,11 +35,11 @@
  */
 
 package gc.memory.LargePagesTest;
 
 import java.io.PrintStream;
-import java.util.Random;
+import nsk.share.test.LocalRandom;
 
 /*
  * Allocators purpose is to create pressure on the garbage collector
  * for a certain amount of time.
  * Note: this test moved from the "jr", the original name is func.vm.largepages.LargePagesTest
@@ -156,28 +156,25 @@
             result = true;
         }
     }
 
     private void allocate() {
-
-        Random r = new Random();
         for (int j = 0; j < 1000; j++) {
-            r = new Random();
             int i = 0;
 
             switch (myType) {
             case SMALL_OBJECT_ALLOCATER:
                 i = 5;
                 break;
             case LARGE_OBJECT_ALLOCATER:
                 i = 1;
                 break;
             case ANY_OBJECT_ALLOCATER:
-                i = r.nextInt(100);
+                i = LocalRandom.nextInt(100);
                 break;
             case ANY_NO_MULTIARRAYS_ALLOCATER:
-                i = r.nextInt(100);
+                i = LocalRandom.nextInt(100);
                 if ((i >= 2) && (i <= 4)) {
                     i = 5;
                 }
                 break;
             default:
