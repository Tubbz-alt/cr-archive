diff a/test/jdk/sun/security/tools/keytool/fakegen/java.base/sun/security/rsa/RSAKeyPairGenerator.java b/test/jdk/sun/security/tools/keytool/fakegen/java.base/sun/security/rsa/RSAKeyPairGenerator.java
--- a/test/jdk/sun/security/tools/keytool/fakegen/java.base/sun/security/rsa/RSAKeyPairGenerator.java
+++ b/test/jdk/sun/security/tools/keytool/fakegen/java.base/sun/security/rsa/RSAKeyPairGenerator.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -27,12 +27,11 @@
 
 import java.security.*;
 import java.security.spec.AlgorithmParameterSpec;
 import java.security.spec.RSAKeyGenParameterSpec;
 
-import sun.security.x509.AlgorithmId;
-import static sun.security.rsa.RSAUtil.KeyType;
+import sun.security.rsa.RSAUtil.KeyType;
 
 /**
  * A fake RSA keypair generation.
  */
 public abstract class RSAKeyPairGenerator extends KeyPairGeneratorSpi {
@@ -42,11 +41,11 @@
 
     // size of the key to generate, >= RSAKeyFactory.MIN_MODLEN
     private int keySize;
 
     private final KeyType type;
-    private AlgorithmId rsaId;
+    private AlgorithmParameterSpec keyParams;
 
     RSAKeyPairGenerator(KeyType type, int defKeySize) {
         this.type = type;
         // initialize to default in case the app does not call initialize()
         initialize(defKeySize, null);
@@ -96,11 +95,11 @@
             throw new InvalidAlgorithmParameterException(
                 "Invalid key sizes", e);
         }
 
         try {
-            this.rsaId = RSAUtil.createAlgorithmId(type, tmpParams);
+            this.keyParams = RSAUtil.checkParamsAgainstType(type, tmpParams);
         } catch (ProviderException e) {
             throw new InvalidAlgorithmParameterException(
                 "Invalid key parameters", e);
         }
 
@@ -434,13 +433,13 @@
 
         // crt coefficient coeff is the inverse of q mod p
         BigInteger coeff = q.modInverse(p);
 
         try {
-            PublicKey publicKey = new RSAPublicKeyImpl(rsaId, n, e);
+            PublicKey publicKey = new RSAPublicKeyImpl(type, keyParams, n, e);
             PrivateKey privateKey = new RSAPrivateCrtKeyImpl(
-                    rsaId, n, e, d, p, q, pe, qe, coeff);
+                    type, keyParams, n, e, d, p, q, pe, qe, coeff);
             return new KeyPair(publicKey, privateKey);
         } catch (InvalidKeyException exc) {
             // invalid key exception only thrown for keys < 512 bit,
             // will not happen here
             throw new RuntimeException(exc);
