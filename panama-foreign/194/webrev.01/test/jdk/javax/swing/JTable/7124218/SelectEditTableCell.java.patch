diff a/test/jdk/javax/swing/JTable/7124218/SelectEditTableCell.java b/test/jdk/javax/swing/JTable/7124218/SelectEditTableCell.java
--- a/test/jdk/javax/swing/JTable/7124218/SelectEditTableCell.java
+++ b/test/jdk/javax/swing/JTable/7124218/SelectEditTableCell.java
@@ -48,27 +48,32 @@
     private static JTable table;
     private static Robot robot;
 
     public static void main(String[] args) throws Exception {
         robot = new Robot();
-        robot.delay(2000);
+        robot.setAutoDelay(100);
         UIManager.LookAndFeelInfo[] lookAndFeelArray
                 = UIManager.getInstalledLookAndFeels();
         for (UIManager.LookAndFeelInfo lookAndFeelItem : lookAndFeelArray) {
             executeCase(lookAndFeelItem.getClassName());
         }
-
     }
 
     private static void executeCase(String lookAndFeelString) throws Exception {
-        if (tryLookAndFeel(lookAndFeelString)) {
-            createUI(lookAndFeelString);
-            robot.delay(2000);
-            runTestCase();
-            robot.delay(2000);
-            cleanUp();
-            robot.delay(2000);
+        try {
+            if (tryLookAndFeel(lookAndFeelString)) {
+                createUI(lookAndFeelString);
+                robot.delay(2000);
+                runTestCase();
+                robot.delay(2000);
+                cleanUp();
+                robot.delay(2000);
+            }
+        } finally {
+            if (frame != null) {
+                SwingUtilities.invokeAndWait(frame::dispose);
+            }
         }
 
     }
 
     private static void createUI(final String lookAndFeelString)
@@ -98,10 +103,11 @@
         centerPoint = Util.getCenterPoint(table);
         LookAndFeel lookAndFeel = UIManager.getLookAndFeel();
         robot.mouseMove(centerPoint.x, centerPoint.y);
         robot.mousePress(InputEvent.BUTTON1_MASK);
         robot.mouseRelease(InputEvent.BUTTON1_MASK);
+        robot.waitForIdle();
         SwingUtilities.invokeAndWait(new Runnable() {
             @Override
             public void run() {
                 table.clearSelection();
                 if (table.isEditing() || table.isCellSelected(0, 0)) {
@@ -110,11 +116,11 @@
                     throw new AssertionError("Failed assumption: assumed no"
                             + "editing and no selection.");
                 }
             }
         });
-        robot.waitForIdle();
+
         int fetchKeyCode;
         keyTap(fetchKeyCode = isMac(lookAndFeel)
                 ? KeyEvent.VK_ENTER : KeyEvent.VK_SPACE);
         final int keyCode = fetchKeyCode;
         robot.waitForIdle();
@@ -127,11 +133,11 @@
                             ? "Enter" : "Space")
                             + " should select cell");
                 }
             }
         });
-        robot.waitForIdle();
+
         keyTap(KeyEvent.VK_SPACE);
         robot.waitForIdle();
         SwingUtilities.invokeAndWait(new Runnable() {
             @Override
             public void run() {
@@ -147,14 +153,16 @@
                     throw new AssertionError("Failed assumption: assumed no "
                             + "editing and no selection.");
                 }
             }
         });
-        robot.waitForIdle();
+
         // hitting a letter key will start editing
         keyTap(KeyEvent.VK_A);
+        robot.waitForIdle();
         keyTap(KeyEvent.VK_SPACE);
+        robot.waitForIdle();
         keyTap(KeyEvent.VK_A);
         robot.waitForIdle();
         SwingUtilities.invokeAndWait(new Runnable() {
             @Override
             public void run() {
