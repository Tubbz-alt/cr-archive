diff a/test/jdk/java/lang/String/concat/StringConcatFactoryInvariants.java b/test/jdk/java/lang/String/concat/StringConcatFactoryInvariants.java
--- a/test/jdk/java/lang/String/concat/StringConcatFactoryInvariants.java
+++ b/test/jdk/java/lang/String/concat/StringConcatFactoryInvariants.java
@@ -26,10 +26,11 @@
 import java.util.concurrent.Callable;
 
 /**
  * @test
  * @summary Test input invariants for StringConcatFactory
+ * @bug 8246152
  *
  * @compile StringConcatFactoryInvariants.java
  *
  * @run main/othervm -Xverify:all StringConcatFactoryInvariants
  *
@@ -211,13 +212,19 @@
 
         // Advanced factory: check for mismatched recipe and Constants
         ok("Static arguments and recipe match",
                 () -> StringConcatFactory.makeConcatWithConstants(lookup, methodName, mtThreshold, recipeThreshold, "bar"));
 
-        fail("Static arguments and recipe mismatch",
+        fail("Static arguments and recipe mismatch: too few",
+                () -> StringConcatFactory.makeConcatWithConstants(lookup, methodName, mtThreshold, recipeThreshold));
+
+        fail("Static arguments and recipe mismatch: too many",
                 () -> StringConcatFactory.makeConcatWithConstants(lookup, methodName, mtThreshold, recipeThreshold, "bar", "baz"));
 
+        fail("Static arguments and recipe mismatch, too many, overflowing constant is null",
+                () -> StringConcatFactory.makeConcatWithConstants(lookup, methodName, mtThreshold, recipeThreshold, "bar", null));
+
         // Advanced factory: check for mismatched recipe and dynamic arguments
         fail("Dynamic arguments and recipe mismatch",
                 () -> StringConcatFactory.makeConcatWithConstants(lookup, methodName, mtThreshold, recipeUnderThreshold, constants[0]));
 
         ok("Dynamic arguments and recipe match",
