diff a/test/jdk/java/util/stream/test/org/openjdk/tests/java/util/stream/SegmentTestDataProvider.java b/test/jdk/java/util/stream/test/org/openjdk/tests/java/util/stream/SegmentTestDataProvider.java
--- a/test/jdk/java/util/stream/test/org/openjdk/tests/java/util/stream/SegmentTestDataProvider.java
+++ b/test/jdk/java/util/stream/test/org/openjdk/tests/java/util/stream/SegmentTestDataProvider.java
@@ -21,11 +21,10 @@
  * questions.
  */
 
 package org.openjdk.tests.java.util.stream;
 
-import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 
 import java.lang.invoke.VarHandle;
@@ -114,13 +113,13 @@
         return list1.equals(list2);
     }
 
     static Consumer<MemorySegment> segmentCopier(Consumer<MemorySegment> input) {
         return segment -> {
-            MemorySegment copy = MemorySegment.ofArray(new byte[(int)segment.byteSize()]);
-            MemoryAddress.copy(segment.baseAddress(), copy.baseAddress(), segment.byteSize());
-            input.accept(copy);
+            MemorySegment dest = MemorySegment.ofArray(new byte[(int)segment.byteSize()]);
+            dest.copyFrom(segment);
+            input.accept(dest);
         };
     }
 
     static boolean compareSegmentsDouble(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
         Function<MemorySegment, Double> mapper = segment -> (double)DOUBLE_HANDLE.get(segment.baseAddress());
