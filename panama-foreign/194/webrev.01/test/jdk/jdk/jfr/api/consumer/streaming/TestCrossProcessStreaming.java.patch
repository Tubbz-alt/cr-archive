diff a/test/jdk/jdk/jfr/api/consumer/streaming/TestCrossProcessStreaming.java b/test/jdk/jdk/jfr/api/consumer/streaming/TestCrossProcessStreaming.java
--- a/test/jdk/jdk/jfr/api/consumer/streaming/TestCrossProcessStreaming.java
+++ b/test/jdk/jdk/jfr/api/consumer/streaming/TestCrossProcessStreaming.java
@@ -25,20 +25,18 @@
 package jdk.jfr.api.consumer.streaming;
 
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
-import java.time.Duration;
 import java.time.Instant;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 
 import jdk.jfr.Event;
 import jdk.jfr.Name;
-import jdk.jfr.Recording;
 import jdk.jfr.consumer.EventStream;
 import jdk.test.lib.Asserts;
 import jdk.test.lib.jfr.StreamingUtils;
 import jdk.test.lib.process.ProcessTools;
 
@@ -97,11 +95,11 @@
         signal("second-batch");
 
         // Consume events until 'exit' signal.
         AtomicInteger total = new AtomicInteger();
         AtomicInteger produced = new AtomicInteger(-1);
-        AtomicReference<Exception> exception = new AtomicReference();
+        AtomicReference<Exception> exception = new AtomicReference<>();
         try (EventStream es = EventStream.openRepository(repo)) {
             es.onEvent("Batch2", e -> {
                     try {
                         if (total.incrementAndGet() == 1000)  {
                             signal("exit");
