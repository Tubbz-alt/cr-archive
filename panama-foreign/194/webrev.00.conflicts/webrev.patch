diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
@@ -355,18 +355,24 @@
      * <p>
      * The returned var handle can be used to conveniently treat unsigned
      * primitive data types as if they were a wider signed primitive type. For
      * example, it is often convenient to model an <i>unsigned short</i> as a
      * Java {@code int} to avoid dealing with negative values, which would be
+<<<<<<< HEAD
      * the case if modeled as a Java {@code short}. This is illustrated in the following example:
      * <blockquote><pre>{@code
     MemorySegment segment = MemorySegment.allocateNative(2);
     VarHandle SHORT_VH = MemoryLayouts.JAVA_SHORT.varHandle(short.class);
     VarHandle INT_VH = MemoryHandles.asUnsigned(SHORT_VH, int.class);
     SHORT_VH.set(segment.baseAddress(), (short)-1);
     INT_VH.get(segment.baseAddress()); // returns 65535
      * }</pre></blockquote>
+=======
+     * the case if modeled as a Java {@code short}. The returned var handle
+     * converts to and from wider primitive types, to a more narrow possibly
+     * unsigned primitive type.
+>>>>>>> 0215250226e7da9e59e1c990f4d5788b964c6b6b
      * <p>
      * When calling e.g. {@link VarHandle#set(Object...)} on the resulting var
      * handle, the incoming value (of type {@code adaptedType}) is converted by a
      * <i>narrowing primitive conversion</i> and then passed to the {@code
      * target} var handle. A narrowing primitive conversion may lose information
@@ -384,11 +390,15 @@
      * java.lang.invoke.VarHandle.AccessMode}, and the same atomic access
      * guarantees, as those featured by the {@code target} var handle.
      *
      * @param target the memory access var handle to be adapted
      * @param adaptedType the adapted type
+<<<<<<< HEAD
      * @return the adapted var handle.
+=======
+     * @returns the adapted var handle.
+>>>>>>> 0215250226e7da9e59e1c990f4d5788b964c6b6b
      * @throws IllegalArgumentException if the carrier type of {@code target}
      * is not one of {@code byte}, {@code short}, or {@code int}; if {@code
      * adaptedType} is not one of {@code int}, or {@code long}; if the bitwidth
      * of the {@code adaptedType} is not greater than that of the {@code target}
      * carrier type
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -290,18 +290,27 @@
      * Fills a value into this memory segment.
      * <p>
      * More specifically, the given value is filled into each address of this
      * segment. Equivalent to (but likely more efficient than) the following code:
      *
+<<<<<<< HEAD
      * <pre>{@code
 byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)
          .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());
 for (long l = 0; l < segment.byteSize(); l++) {
      byteHandle.set(segment.baseAddress(), l, value);
 }
      * }</pre>
      *
+=======
+     * <blockquote><pre>
+     * byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)
+     *         .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());
+     * for (long l = 0; l < segment.byteSize(); l++) {
+     *     byteHandle.set(segment.baseAddress(), l, value);
+     * }</pre></blockquote>
+>>>>>>> 0215250226e7da9e59e1c990f4d5788b964c6b6b
      * without any regard or guarantees on the ordering of particular memory
      * elements being set.
      * <p>
      * Fill can be useful to initialize or reset the memory of a segment.
      *
@@ -325,11 +334,15 @@
      * The result of a bulk copy is unspecified if, in the uncommon case, the source segment and this segment
      * do not overlap, but refer to overlapping regions of the same backing storage using different addresses.
      * For example, this may occur if the same file is {@link MemorySegment#mapFromPath mapped} to two segments.
      *
      * @param src the source segment.
+<<<<<<< HEAD
      * @throws IndexOutOfBoundsException if {@code src.byteSize() > this.byteSize()}.
+=======
+     * @throws IndexOutOfBoundsException if {src.byteSize() > this.byteSize()}.
+>>>>>>> 0215250226e7da9e59e1c990f4d5788b964c6b6b
      * @throws IllegalStateException if either the source segment or this segment have been already closed,
      * or if access occurs from a thread other than the thread owning either segment.
      * @throws UnsupportedOperationException if either the source segment or this segment do not feature required access modes;
      * more specifically, {@code src} should feature at least the {@link MemorySegment#READ} access mode,
      * while this segment should feature at least the {@link MemorySegment#WRITE} access mode.
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MappedMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MappedMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MappedMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MappedMemorySegmentImpl.java
@@ -98,12 +98,17 @@
     }
 
     // factories
 
     public static MappedMemorySegment makeMappedSegment(Path path, long bytesOffset, long bytesSize, FileChannel.MapMode mapMode) throws IOException {
+<<<<<<< HEAD
         if (bytesSize < 0) throw new IllegalArgumentException("Requested bytes size must be >= 0.");
         if (bytesOffset < 0) throw new IllegalArgumentException("Requested bytes offset must be >= 0.");
+=======
+        if (bytesSize < 0) throw new IllegalArgumentException("Requested bytes size must be > 0.");
+        if (bytesOffset < 0) throw new IllegalArgumentException("Requested bytes offset must be > 0.");
+>>>>>>> 0215250226e7da9e59e1c990f4d5788b964c6b6b
         try (FileChannelImpl channelImpl = (FileChannelImpl)FileChannel.open(path, openOptions(mapMode))) {
             UnmapperProxy unmapperProxy = channelImpl.mapInternal(mapMode, bytesOffset, bytesSize);
             MemoryScope scope = MemoryScope.create(null, unmapperProxy::unmap);
             int modes = defaultAccessModes(bytesSize);
             if (mapMode == FileChannel.MapMode.READ_ONLY) {
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/TestAdaptVarHandles.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/TestAdaptVarHandles.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/TestAdaptVarHandles.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/TestAdaptVarHandles.java
@@ -1,6 +1,7 @@
 /*
+<<<<<<< HEAD
  *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  *  This code is free software; you can redistribute it and/or modify it
  *  under the terms of the GNU General Public License version 2 only, as
@@ -20,10 +21,33 @@
  *  or visit www.oracle.com if you need additional information or have any
  *  questions.
  *
  */
 
+=======
+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+>>>>>>> 0215250226e7da9e59e1c990f4d5788b964c6b6b
 package org.openjdk.bench.jdk.incubator.foreign;
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayout;
