diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
@@ -355,18 +355,24 @@
      * <p>
      * The returned var handle can be used to conveniently treat unsigned
      * primitive data types as if they were a wider signed primitive type. For
      * example, it is often convenient to model an <i>unsigned short</i> as a
      * Java {@code int} to avoid dealing with negative values, which would be
+<<<<<<< HEAD
      * the case if modeled as a Java {@code short}. This is illustrated in the following example:
      * <blockquote><pre>{@code
     MemorySegment segment = MemorySegment.allocateNative(2);
     VarHandle SHORT_VH = MemoryLayouts.JAVA_SHORT.varHandle(short.class);
     VarHandle INT_VH = MemoryHandles.asUnsigned(SHORT_VH, int.class);
     SHORT_VH.set(segment.baseAddress(), (short)-1);
     INT_VH.get(segment.baseAddress()); // returns 65535
      * }</pre></blockquote>
+=======
+     * the case if modeled as a Java {@code short}. The returned var handle
+     * converts to and from wider primitive types, to a more narrow possibly
+     * unsigned primitive type.
+>>>>>>> 0215250226e7da9e59e1c990f4d5788b964c6b6b
      * <p>
      * When calling e.g. {@link VarHandle#set(Object...)} on the resulting var
      * handle, the incoming value (of type {@code adaptedType}) is converted by a
      * <i>narrowing primitive conversion</i> and then passed to the {@code
      * target} var handle. A narrowing primitive conversion may lose information
@@ -384,11 +390,15 @@
      * java.lang.invoke.VarHandle.AccessMode}, and the same atomic access
      * guarantees, as those featured by the {@code target} var handle.
      *
      * @param target the memory access var handle to be adapted
      * @param adaptedType the adapted type
+<<<<<<< HEAD
      * @return the adapted var handle.
+=======
+     * @returns the adapted var handle.
+>>>>>>> 0215250226e7da9e59e1c990f4d5788b964c6b6b
      * @throws IllegalArgumentException if the carrier type of {@code target}
      * is not one of {@code byte}, {@code short}, or {@code int}; if {@code
      * adaptedType} is not one of {@code int}, or {@code long}; if the bitwidth
      * of the {@code adaptedType} is not greater than that of the {@code target}
      * carrier type
