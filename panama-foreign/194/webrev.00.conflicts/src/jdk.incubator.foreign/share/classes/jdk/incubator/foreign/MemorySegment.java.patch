diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -290,18 +290,27 @@
      * Fills a value into this memory segment.
      * <p>
      * More specifically, the given value is filled into each address of this
      * segment. Equivalent to (but likely more efficient than) the following code:
      *
+<<<<<<< HEAD
      * <pre>{@code
 byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)
          .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());
 for (long l = 0; l < segment.byteSize(); l++) {
      byteHandle.set(segment.baseAddress(), l, value);
 }
      * }</pre>
      *
+=======
+     * <blockquote><pre>
+     * byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)
+     *         .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());
+     * for (long l = 0; l < segment.byteSize(); l++) {
+     *     byteHandle.set(segment.baseAddress(), l, value);
+     * }</pre></blockquote>
+>>>>>>> 0215250226e7da9e59e1c990f4d5788b964c6b6b
      * without any regard or guarantees on the ordering of particular memory
      * elements being set.
      * <p>
      * Fill can be useful to initialize or reset the memory of a segment.
      *
@@ -325,11 +334,15 @@
      * The result of a bulk copy is unspecified if, in the uncommon case, the source segment and this segment
      * do not overlap, but refer to overlapping regions of the same backing storage using different addresses.
      * For example, this may occur if the same file is {@link MemorySegment#mapFromPath mapped} to two segments.
      *
      * @param src the source segment.
+<<<<<<< HEAD
      * @throws IndexOutOfBoundsException if {@code src.byteSize() > this.byteSize()}.
+=======
+     * @throws IndexOutOfBoundsException if {src.byteSize() > this.byteSize()}.
+>>>>>>> 0215250226e7da9e59e1c990f4d5788b964c6b6b
      * @throws IllegalStateException if either the source segment or this segment have been already closed,
      * or if access occurs from a thread other than the thread owning either segment.
      * @throws UnsupportedOperationException if either the source segment or this segment do not feature required access modes;
      * more specifically, {@code src} should feature at least the {@link MemorySegment#READ} access mode,
      * while this segment should feature at least the {@link MemorySegment#WRITE} access mode.
