diff a/test/jdk/java/foreign/CallGeneratorHelper.java b/test/jdk/java/foreign/CallGeneratorHelper.java
--- a/test/jdk/java/foreign/CallGeneratorHelper.java
+++ b/test/jdk/java/foreign/CallGeneratorHelper.java
@@ -42,16 +42,16 @@
 
 import static jdk.incubator.foreign.MemoryLayouts.*;
 import static org.testng.Assert.*;
 
 public class CallGeneratorHelper extends NativeTestHelper {
-    
-	static final int MAX_FIELDS = 3;
-	static final int MAX_PARAMS = 3;
-	static final int CHUNK_SIZE = 600;
 
-	static int functions = 0;
+    static final int MAX_FIELDS = 3;
+    static final int MAX_PARAMS = 3;
+    static final int CHUNK_SIZE = 600;
+
+    static int functions = 0;
 
     enum Ret {
         VOID,
         NON_VOID
     }
@@ -153,11 +153,11 @@
                 combo.pop();
             }
         }
     }
 
-	@DataProvider(name = "functions")
+    @DataProvider(name = "functions")
     public static Object[][] functions() {
         List<Object[]> downcalls = new ArrayList<>();
         for (Ret r : Ret.values()) {
             for (int i = 0; i <= MAX_PARAMS; i++) {
                 if (r != Ret.VOID && i == 0) continue;
@@ -335,12 +335,12 @@
         if (arg instanceof MemoryAddress) {
             cleanup(((MemoryAddress)arg).segment());
         } else if (arg instanceof MemorySegment) {
             try {
                 ((MemorySegment) arg).close();
-            } catch (IllegalStateException e) {
-                assertEquals(e.getMessage(), "Cannot close a root segment");
+            } catch (UnsupportedOperationException e) {
+                assertTrue(e.getMessage().contains("Required access mode"));
                 // fine, NOTHING segment for upcall stubs
             }
         }
     }
 
