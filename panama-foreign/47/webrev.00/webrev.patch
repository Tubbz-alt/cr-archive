diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
@@ -116,11 +116,13 @@
      * @param bytes the number of bytes to be copied.
      * @throws IndexOutOfBoundsException if {@code bytes < 0}, or if it is greater than the size of the segments
      * associated with either {@code src} or {@code dst}.
      * @throws IllegalStateException if either the source address or the target address belong to memory segments
      * which have been already closed, or if access occurs from a thread other than the thread owning either segment.
-     * @throws UnsupportedOperationException if {@code dst} is associated with a read-only segment (see {@link MemorySegment#isReadOnly()}).
+     * @throws UnsupportedOperationException if either {@code src} or {@code dst} do not feature required access modes;
+     * more specifically, {@code src} should be associated with a segment with {@link MemorySegment#READ} access mode,
+     * while {@code dst} should be associated with a segment with {@link MemorySegment#WRITE} access mode.
      */
     static void copy(MemoryAddress src, MemoryAddress dst, long bytes) {
         MemoryAddressImpl.copy((MemoryAddressImpl)src, (MemoryAddressImpl)dst, bytes);
     }
 
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -100,21 +100,38 @@
  * be closed until all the acquired memory segments derived from S have been closed. Furthermore, closing an acquired
  * memory segment does <em>not</em> trigger any deallocation action. It is therefore important that clients remember to
  * explicitly close the original segment from which the acquired memory segments have been obtained in order to truly
  * ensure that off-heap resources associated with the memory segment are released.
  *
+ * <h2><a id = "access-modes">Access modes</a></h2>
+ *
+ * Memory segments supports zero or more <em>access modes</em>. Supported access modes are {@link #READ},
+ * {@link #WRITE}, {@link #CLOSE} and {@link #ACQUIRE}. The set of access modes supported by a segment alters the
+ * set of operations that are supported by that segment. For instance, attempting to call {@link #close()} on
+ * a segment which does not support the {@link #CLOSE} access mode will result in an exception.
+ * <p>
+ * The set of supported access modes can only be made stricter (by supporting <em>less</em> access modes). This means
+ * that restricting the set of access modes supported by a segment before sharing it with other clients
+ * is generally a good practice if the creator of the segment wants to retain some control over how the segment
+ * is going to be accessed.
+ *
  * <h2>Memory segment views</h2>
  *
- * Memory segments support <em>views</em>. It is possible to create an <em>immutable</em> view of a memory segment
- * (see {@link MemorySegment#asReadOnly()}) which does not support write operations. It is also possible to create views
- * whose spatial bounds are stricter than the ones of the original segment (see {@link MemorySegment#asSlice(long, long)}).
+ * Memory segments support <em>views</em>. For instance, it is possible to alter the set of supported access modes,
+ * by creating an <em>immutable</em> view of a memory segment, as follows:
+ * <blockquote><pre>{@code
+MemorySegment segment = ...
+MemorySegment roSegment = segment.withAccessModes(segment.accessModes() & ~WRITE);
+ * }</pre></blockquote>
+ * It is also possible to create views whose spatial bounds are stricter than the ones of the original segment
+ * (see {@link MemorySegment#asSlice(long, long)}).
  * <p>
  * Temporal bounds of the original segment are inherited by the view; that is, closing a segment view, such as a sliced
  * view, will cause the original segment to be closed; as such special care must be taken when sharing views
  * between multiple clients. If a client want to protect itself against early closure of a segment by
- * another actor, it is the responsibility of that client to take protective measures, such as calling
- * {@link MemorySegment#acquire()} before sharing the view with another client.
+ * another actor, it is the responsibility of that client to take protective measures, such as removing {@link #CLOSE}
+ * from the set of supported access modes, before sharing the view with another client.
  * <p>
  * To allow for interoperability with existing code, a byte buffer view can be obtained from a memory segment
  * (see {@link #asByteBuffer()}). This can be useful, for instance, for those clients that want to keep using the
  * {@link ByteBuffer} API, but need to operate on large memory segments. Byte buffers obtained in such a way support
  * the same spatial and temporal access restrictions associated to the memory address from which they originated.
@@ -155,58 +172,67 @@
      * @return The size (in bytes) of this memory segment.
      */
     long byteSize();
 
     /**
-     * Obtains a read-only view of this segment. An attempt to write memory associated with a read-only memory segment
-     * will fail with {@link UnsupportedOperationException}.
-     * @return a read-only view of this segment.
-     * @throws IllegalStateException if this segment has been closed, or if access occurs from a thread other than the
-     * thread owning this segment.
+     * Obtains a segment view with specific <a href="#access-modes">access modes</a>. Supported access modes are {@link #READ}, {@link #WRITE},
+     * {@link #CLOSE} and {@link #ACQUIRE}. It is generally not possible to go from a segment with stricter access modes
+     * to one with less strict access modes. For instance, attempting to add {@link #WRITE} access mode to a read-only segment
+     * will be met with an exception.
+     * @param accessModes an ORed mask of zero or more access modes.
+     * @return a segment view with specific access modes.
+     * @throws UnsupportedOperationException when {@code mask} is an access mask which is less strict than the one supported by this
+     * segment.
      */
-    MemorySegment asReadOnly();
+    MemorySegment withAccessModes(int accessModes);
+
+    /**
+     * Does this segment support a given set of access modes?
+     * @param accessModes an ORed mask of zero or more access modes.
+     * @return true, if the access modes in {@accessModes} are stricter than the ones supported by this segment.
+     */
+    boolean hasAccessModes(int accessModes);
+
+    /**
+     * Returns the <a href="#access-modes">access modes</a> associated with this segment; the result is represented as ORed values from
+     * {@link #READ}, {@link #WRITE}, {@link #CLOSE} and {@link #ACQUIRE}.
+     * @return the access modes associated with this segment.
+     */
+    int accessModes();
 
     /**
      * Obtains a new memory segment view whose base address is the same as the base address of this segment plus a given offset,
      * and whose new size is specified by the given argument.
      * @param offset The new segment base offset (relative to the current segment base address), specified in bytes.
      * @param newSize The new segment size, specified in bytes.
      * @return a new memory segment view with updated base/limit addresses.
      * @throws IndexOutOfBoundsException if {@code offset < 0}, {@code offset > byteSize()}, {@code newSize < 0}, or {@code newSize > byteSize() - offset}
-     * @throws IllegalStateException if this segment has been closed, or if access occurs from a thread other than the
-     * thread owning this segment.
      */
     MemorySegment asSlice(long offset, long newSize);
 
     /**
      * Is this segment alive?
      * @return true, if the segment is alive.
      * @see MemorySegment#close()
      */
     boolean isAlive();
 
-    /**
-     * Is this segment read-only?
-     * @return true, if the segment is read-only.
-     * @see MemorySegment#asReadOnly()
-     */
-    boolean isReadOnly();
-
     /**
      * Closes this memory segment. Once a memory segment has been closed, any attempt to use the memory segment,
      * or to access the memory associated with the segment will fail with {@link IllegalStateException}. Depending on
      * the kind of memory segment being closed, calling this method further trigger deallocation of all the resources
      * associated with the memory segment.
-     * @throws IllegalStateException if this segment has been closed, or if access occurs from a thread other than the
-     * thread owning this segment, or if existing acquired views of this segment are still in use (see {@link MemorySegment#acquire()}).
+     * @throws IllegalStateException if this segment is not <em>alive</em>, or if access occurs from a thread other than the
+     * thread owning this segment.
+     * @throws UnsupportedOperationException if this segment does not support the {@link #CLOSE} access mode.
      */
     void close();
 
     /**
      * Wraps this segment in a {@link ByteBuffer}. Some of the properties of the returned buffer are linked to
      * the properties of this segment. For instance, if this segment is <em>immutable</em>
-     * (see {@link MemorySegment#asReadOnly()}, then the resulting buffer is <em>read-only</em>
+     * (e.g. the segment has access mode {@link #READ} but not {@link #WRITE}), then the resulting buffer is <em>read-only</em>
      * (see {@link ByteBuffer#isReadOnly()}. Additionally, if this is a native memory segment, the resulting buffer is
      * <em>direct</em> (see {@link ByteBuffer#isDirect()}).
      * <p>
      * The life-cycle of the returned buffer will be tied to that of this segment. That means that if the this segment
      * is closed (see {@link MemorySegment#close()}, accessing the returned
@@ -216,13 +242,11 @@
      * {@link ByteBuffer#order(java.nio.ByteOrder)}.
      *
      * @return a {@link ByteBuffer} view of this memory segment.
      * @throws UnsupportedOperationException if this segment cannot be mapped onto a {@link ByteBuffer} instance,
      * e.g. because it models an heap-based segment that is not based on a {@code byte[]}), or if its size is greater
-     * than {@link Integer#MAX_VALUE}.
-     * @throws IllegalStateException if this segment has been closed, or if access occurs from a thread other than the
-     * thread owning this segment.
+     * than {@link Integer#MAX_VALUE}, or if the segment does not support the {@link #READ} access mode.
      */
     ByteBuffer asByteBuffer();
 
     /**
      * Copy the contents of this memory segment into a fresh byte array.
@@ -363,11 +387,11 @@
     /**
      * Creates a new native memory segment that models a newly allocated block of off-heap memory with given size (in bytes).
      * <p>
      * This is equivalent to the following code:
      * <blockquote><pre>{@code
-    allocateNative(bytesSize, 1);
+allocateNative(bytesSize, 1);
      * }</pre></blockquote>
      *
      * @implNote The block of off-heap memory associated with the returned native memory segment is initialized to zero.
      * Moreover, a client is responsible to call the {@link MemorySegment#close()} on a native memory segment,
      * to make sure the backing off-heap memory block is deallocated accordingly. Failure to do so will result in off-heap memory leaks.
@@ -422,6 +446,36 @@
             throw new IllegalArgumentException("Invalid alignment constraint : " + alignmentBytes);
         }
 
         return Utils.makeNativeSegment(bytesSize, alignmentBytes);
     }
+
+    // access mode masks
+
+    /**
+     * Read access mode; read operations are supported by a segment which supports this access mode.
+     * @see MemorySegment#accessModes()
+     * @see MemorySegment#withAccessModes(int)
+     */
+    int READ = 1;
+
+    /**
+     * Write access mode; write operations are supported by a segment which supports this access mode.
+     * @see MemorySegment#accessModes()
+     * @see MemorySegment#withAccessModes(int)
+     */
+    int WRITE = READ << 1;
+
+    /**
+     * Close access mode; calling {@link #close()} is supported by a segment which supports this access mode.
+     * @see MemorySegment#accessModes()
+     * @see MemorySegment#withAccessModes(int)
+     */
+    int CLOSE = WRITE << 1;
+
+    /**
+     * Acquire access mode; calling {@link #acquire()} is supported by a segment which supports this access mode.
+     * @see MemorySegment#accessModes()
+     * @see MemorySegment#withAccessModes(int)
+     */
+    int ACQUIRE = CLOSE << 1;
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
@@ -33,10 +33,12 @@
 import jdk.internal.access.foreign.MemorySegmentProxy;
 import jdk.internal.misc.Unsafe;
 import jdk.internal.vm.annotation.ForceInline;
 
 import java.nio.ByteBuffer;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Objects;
 import java.util.Random;
 
 /**
  * This class provides an immutable implementation for the {@code MemorySegment} interface. This class contains information
@@ -56,42 +58,51 @@
     final long min;
     final Object base;
     final Thread owner;
     final MemoryScope scope;
 
-    final static int READ_ONLY = 1;
-    final static int SMALL = READ_ONLY << 1;
-    final static int NO_ACCESS = SMALL << 1;
+    final static int SMALL = ACQUIRE << 1;
     final static long NONCE = new Random().nextLong();
 
-    public static MemorySegmentImpl NOTHING =
-            new MemorySegmentImpl(0, null, 0, NO_ACCESS, null, MemoryScope.GLOBAL);
+    final static int DEFAULT_MASK = READ | WRITE | CLOSE | ACQUIRE;
+    public static MemorySegmentImpl NOTHING = new MemorySegmentImpl();
+
+    private MemorySegmentImpl() {
+        this.length = 0L;
+        this.mask = 0;
+        this.min = 0L;
+        this.base = null;
+        this.owner = null;
+        this.scope = MemoryScope.GLOBAL;
+    }
 
     public MemorySegmentImpl(long min, Object base, long length, Thread owner, MemoryScope scope) {
-        this(min, base, length, length > Integer.MAX_VALUE ? 0 : SMALL, owner, scope);
+        this(min, base, length, DEFAULT_MASK, owner, scope);
     }
 
     private MemorySegmentImpl(long min, Object base, long length, int mask, Thread owner, MemoryScope scope) {
         this.length = length;
-        this.mask = mask;
+        this.mask = length > Integer.MAX_VALUE ? mask : (mask | SMALL);
         this.min = min;
         this.base = base;
         this.owner = owner;
         this.scope = scope;
     }
 
     // MemorySegment methods
 
     @Override
     public final MemorySegmentImpl asSlice(long offset, long newSize) {
-        checkValidState();
         checkBounds(offset, newSize);
         return new MemorySegmentImpl(min + offset, base, newSize, mask, owner, scope);
     }
 
     @Override
     public MemorySegment acquire() {
+        if (!isSet(ACQUIRE)) {
+            throw unsupportedAccessMode(ACQUIRE);
+        }
         return new MemorySegmentImpl(min, base, length, mask, Thread.currentThread(), scope.acquire());
     }
 
     @Override
     @ForceInline
@@ -102,43 +113,34 @@
     @Override
     public final long byteSize() {
         return length;
     }
 
-    @Override
-    public final MemorySegmentImpl asReadOnly() {
-        checkValidState();
-        return new MemorySegmentImpl(min, base, length, mask | READ_ONLY, owner, scope);
-    }
-
     @Override
     public final boolean isAlive() {
         return scope.isAliveThreadSafe();
     }
 
-    @Override
-    public final boolean isReadOnly() {
-        return isSet(READ_ONLY);
-    }
-
     @Override
     public Thread ownerThread() {
         return owner;
     }
 
     @Override
     public final void close() {
-        checkValidState();
-        if (scope == MemoryScope.GLOBAL) {
-            throw new IllegalStateException("Cannot close a root segment");
+        if (!isSet(CLOSE)) {
+            throw unsupportedAccessMode(CLOSE);
         }
+        checkValidState();
         scope.close();
     }
 
     @Override
     public ByteBuffer asByteBuffer() {
-        checkValidState();
+        if (!isSet(READ)) {
+            throw unsupportedAccessMode(READ);
+        }
         checkIntSize("ByteBuffer");
         JavaNioAccess nioAccess = SharedSecrets.getJavaNioAccess();
         ByteBuffer _bb;
         if (base() != null) {
             if (!(base() instanceof byte[])) {
@@ -146,20 +148,37 @@
             }
             _bb = nioAccess.newHeapByteBuffer((byte[]) base(), (int)min - BYTE_ARR_BASE, (int) length, this);
         } else {
             _bb = nioAccess.newDirectByteBuffer(min, (int) length, null, this);
         }
-        if (isReadOnly()) {
+        if (!isSet(WRITE)) {
             //scope is IMMUTABLE - obtain a RO byte buffer
             _bb = _bb.asReadOnlyBuffer();
         }
         return _bb;
     }
 
+    @Override
+    public MemorySegment withAccessModes(int accessModes) {
+        if ((~this.mask & accessModes) != 0) {
+            throw new UnsupportedOperationException("Cannot acquire more access modes");
+        }
+        return new MemorySegmentImpl(min, base, length, accessModes, owner, scope);
+    }
+
+    @Override
+    public boolean hasAccessModes(int accessModes) {
+        return (this.mask & accessModes) == accessModes;
+    }
+
+    @Override
+    public int accessModes() {
+        return mask;
+    }
+
     @Override
     public byte[] toByteArray() {
-        checkValidState();
         checkIntSize("byte[]");
         byte[] arr = new byte[(int)length];
         MemorySegment arrSegment = MemorySegment.ofArray(arr);
         MemoryAddress.copy(this.baseAddress(), arrSegment.baseAddress(), length);
         return arr;
@@ -188,14 +207,14 @@
 
     // Helper methods
 
     void checkRange(long offset, long length, boolean writeAccess) {
         checkValidState();
-        if (isSet(NO_ACCESS)) {
-            throw new UnsupportedOperationException("Segment cannot be accessed");
-        } else if (isReadOnly() && writeAccess) {
-            throw new UnsupportedOperationException("Cannot write to read-only memory segment");
+        if (writeAccess && !isSet(WRITE)) {
+            throw unsupportedAccessMode(WRITE);
+        } else if (!writeAccess && !isSet(READ)) {
+            throw unsupportedAccessMode(READ);
         }
         checkBounds(offset, length);
     }
 
     Object base() {
@@ -231,10 +250,32 @@
                 offset > (int)this.length - length) { // careful of overflow
             throw outOfBoundException(offset, length);
         }
     }
 
+    UnsupportedOperationException unsupportedAccessMode(int expected) {
+        return new UnsupportedOperationException((String.format("Required access mode %s ; current access modes: %s",
+                modeStrings(expected).get(0), modeStrings(mask))));
+    }
+
+    private List<String> modeStrings(int mode) {
+        List<String> modes = new ArrayList<>();
+        if ((mode & READ) != 0) {
+            modes.add("READ");
+        }
+        if ((mode & WRITE) != 0) {
+            modes.add("WRITE");
+        }
+        if ((mode & CLOSE) != 0) {
+            modes.add("CLOSE");
+        }
+        if ((mode & ACQUIRE) != 0) {
+            modes.add("ACQUIRE");
+        }
+        return modes;
+    }
+
     private IndexOutOfBoundsException outOfBoundException(long offset, long length) {
         return new IndexOutOfBoundsException(String.format("Out of bound access on segment %s; new offset = %d; new length = %d",
                         this, offset, length));
     }
 
diff a/test/jdk/java/foreign/CallGeneratorHelper.java b/test/jdk/java/foreign/CallGeneratorHelper.java
--- a/test/jdk/java/foreign/CallGeneratorHelper.java
+++ b/test/jdk/java/foreign/CallGeneratorHelper.java
@@ -42,16 +42,16 @@
 
 import static jdk.incubator.foreign.MemoryLayouts.*;
 import static org.testng.Assert.*;
 
 public class CallGeneratorHelper extends NativeTestHelper {
-    
-	static final int MAX_FIELDS = 3;
-	static final int MAX_PARAMS = 3;
-	static final int CHUNK_SIZE = 600;
 
-	static int functions = 0;
+    static final int MAX_FIELDS = 3;
+    static final int MAX_PARAMS = 3;
+    static final int CHUNK_SIZE = 600;
+
+    static int functions = 0;
 
     enum Ret {
         VOID,
         NON_VOID
     }
@@ -153,11 +153,11 @@
                 combo.pop();
             }
         }
     }
 
-	@DataProvider(name = "functions")
+    @DataProvider(name = "functions")
     public static Object[][] functions() {
         List<Object[]> downcalls = new ArrayList<>();
         for (Ret r : Ret.values()) {
             for (int i = 0; i <= MAX_PARAMS; i++) {
                 if (r != Ret.VOID && i == 0) continue;
@@ -335,12 +335,12 @@
         if (arg instanceof MemoryAddress) {
             cleanup(((MemoryAddress)arg).segment());
         } else if (arg instanceof MemorySegment) {
             try {
                 ((MemorySegment) arg).close();
-            } catch (IllegalStateException e) {
-                assertEquals(e.getMessage(), "Cannot close a root segment");
+            } catch (UnsupportedOperationException e) {
+                assertTrue(e.getMessage().contains("Required access mode"));
                 // fine, NOTHING segment for upcall stubs
             }
         }
     }
 
diff a/test/jdk/java/foreign/TestByteBuffer.java b/test/jdk/java/foreign/TestByteBuffer.java
--- a/test/jdk/java/foreign/TestByteBuffer.java
+++ b/test/jdk/java/foreign/TestByteBuffer.java
@@ -388,11 +388,12 @@
     public void testBufferOnClosedScope() {
         MemorySegment leaked;
         try (MemorySegment segment = MemorySegment.allocateNative(bytes)) {
             leaked = segment;
         }
-        leaked.asByteBuffer();
+        ByteBuffer byteBuffer = leaked.asByteBuffer(); // ok
+        byteBuffer.get(); // should throw
     }
 
     @Test(expectedExceptions = { UnsupportedOperationException.class,
                                  IllegalArgumentException.class })
     public void testTooBigForByteBuffer() {
diff a/test/jdk/java/foreign/TestMemoryAccess.java b/test/jdk/java/foreign/TestMemoryAccess.java
--- a/test/jdk/java/foreign/TestMemoryAccess.java
+++ b/test/jdk/java/foreign/TestMemoryAccess.java
@@ -82,18 +82,19 @@
     }
 
     private void testAccessInternal(Function<MemorySegment, MemorySegment> viewFactory, MemoryLayout layout, VarHandle handle, Checker checker) {
         MemoryAddress outer_address;
         try (MemorySegment segment = viewFactory.apply(MemorySegment.allocateNative(layout))) {
+            boolean isRO = !segment.hasAccessModes(MemorySegment.WRITE);
             MemoryAddress addr = segment.baseAddress();
             try {
                 checker.check(handle, addr);
-                if (segment.isReadOnly()) {
+                if (isRO) {
                     throw new AssertionError(); //not ok, memory should be immutable
                 }
             } catch (UnsupportedOperationException ex) {
-                if (!segment.isReadOnly()) {
+                if (!isRO) {
                     throw new AssertionError(); //we should not have failed!
                 }
                 return;
             }
             try {
@@ -113,20 +114,21 @@
     }
 
     private void testArrayAccessInternal(Function<MemorySegment, MemorySegment> viewFactory, SequenceLayout seq, VarHandle handle, ArrayChecker checker) {
         MemoryAddress outer_address;
         try (MemorySegment segment = viewFactory.apply(MemorySegment.allocateNative(seq))) {
+            boolean isRO = !segment.hasAccessModes(MemorySegment.WRITE);
             MemoryAddress addr = segment.baseAddress();
             try {
                 for (int i = 0; i < seq.elementCount().getAsLong(); i++) {
                     checker.check(handle, addr, i);
                 }
-                if (segment.isReadOnly()) {
+                if (isRO) {
                     throw new AssertionError(); //not ok, memory should be immutable
                 }
             } catch (UnsupportedOperationException ex) {
-                if (!segment.isReadOnly()) {
+                if (!isRO) {
                     throw new AssertionError(); //we should not have failed!
                 }
                 return;
             }
             try {
@@ -181,22 +183,23 @@
     }
 
     private void testMatrixAccessInternal(Function<MemorySegment, MemorySegment> viewFactory, SequenceLayout seq, VarHandle handle, MatrixChecker checker) {
         MemoryAddress outer_address;
         try (MemorySegment segment = viewFactory.apply(MemorySegment.allocateNative(seq))) {
+            boolean isRO = !segment.hasAccessModes(MemorySegment.WRITE);
             MemoryAddress addr = segment.baseAddress();
             try {
                 for (int i = 0; i < seq.elementCount().getAsLong(); i++) {
                     for (int j = 0; j < ((SequenceLayout) seq.elementLayout()).elementCount().getAsLong(); j++) {
                         checker.check(handle, addr, i, j);
                     }
                 }
-                if (segment.isReadOnly()) {
+                if (isRO) {
                     throw new AssertionError(); //not ok, memory should be immutable
                 }
             } catch (UnsupportedOperationException ex) {
-                if (!segment.isReadOnly()) {
+                if (!isRO) {
                     throw new AssertionError(); //we should not have failed!
                 }
                 return;
             }
             try {
@@ -215,11 +218,11 @@
             //ok, should fail (scope is closed)
         }
     }
 
     static Function<MemorySegment, MemorySegment> ID = Function.identity();
-    static Function<MemorySegment, MemorySegment> IMMUTABLE = MemorySegment::asReadOnly;
+    static Function<MemorySegment, MemorySegment> IMMUTABLE = ms -> ms.withAccessModes(MemorySegment.READ | MemorySegment.CLOSE);
 
     @DataProvider(name = "elements")
     public Object[][] createData() {
         return new Object[][] {
                 //BE, RW
diff a/test/jdk/java/foreign/TestSegments.java b/test/jdk/java/foreign/TestSegments.java
--- a/test/jdk/java/foreign/TestSegments.java
+++ b/test/jdk/java/foreign/TestSegments.java
@@ -36,10 +36,11 @@
 import java.lang.reflect.Modifier;
 import java.nio.ByteOrder;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.function.Consumer;
 import java.util.function.LongFunction;
 import java.util.stream.Stream;
 
 import org.testng.annotations.*;
 
@@ -102,11 +103,11 @@
         for (long value : values) {
             MemoryAddress addr = MemoryAddress.ofLong(value);
             try {
                 longHandle.get(addr);
             } catch (UnsupportedOperationException ex) {
-                assertTrue(ex.getMessage().contains("cannot be accessed"));
+                assertTrue(ex.getMessage().contains("Required access mode"));
             }
         }
     }
 
     @Test
@@ -133,10 +134,26 @@
                 start++;
             }
         }
     }
 
+    @Test(dataProvider = "accessModes")
+    public void testAccessModes(int accessModes) {
+        int[] arr = new int[1];
+        for (AccessActions action : AccessActions.values()) {
+            MemorySegment segment = MemorySegment.ofArray(arr);
+            MemorySegment restrictedSegment = segment.withAccessModes(accessModes);
+            boolean shouldFail = !restrictedSegment.hasAccessModes(action.accessMode);
+            try {
+                action.run(restrictedSegment);
+                assertFalse(shouldFail);
+            } catch (UnsupportedOperationException ex) {
+                assertTrue(shouldFail);
+            }
+        }
+    }
+
     @DataProvider(name = "badSizeAndAlignments")
     public Object[][] sizesAndAlignments() {
         return new Object[][] {
                 { -1, 8 },
                 { 1, 15 },
@@ -188,20 +205,22 @@
 
     static class SegmentMember {
         final Method method;
         final Object[] params;
 
+        final static List<String> CONFINED_NAMES = List.of(
+                "close",
+                "toByteArray"
+        );
+
         public SegmentMember(Method method, Object[] params) {
             this.method = method;
             this.params = params;
         }
 
         boolean isConfined() {
-            return method.getName().startsWith("as") ||
-                    method.getName().startsWith("to") ||
-                    method.getName().equals("close") ||
-                    method.getName().equals("slice");
+            return CONFINED_NAMES.contains(method.getName());
         }
 
         @Override
         public String toString() {
             return method.getName();
@@ -231,6 +250,53 @@
             }
         } else {
             return null;
         }
     }
+
+    @DataProvider(name = "accessModes")
+    public Object[][] accessModes() {
+        int nActions = AccessActions.values().length;
+        Object[][] results = new Object[1 << nActions][];
+        for (int accessModes = 0 ; accessModes < results.length ; accessModes++) {
+            results[accessModes] = new Object[] { accessModes };
+        }
+        return results;
+    }
+
+    enum AccessActions {
+        ACQUIRE(MemorySegment.ACQUIRE) {
+            @Override
+            void run(MemorySegment segment) {
+                segment.acquire();
+            }
+        },
+        CLOSE(MemorySegment.CLOSE) {
+            @Override
+            void run(MemorySegment segment) {
+                segment.close();
+            }
+        },
+        READ(MemorySegment.READ) {
+            @Override
+            void run(MemorySegment segment) {
+                INT_HANDLE.get(segment.baseAddress());
+            }
+        },
+        WRITE(MemorySegment.WRITE) {
+            @Override
+            void run(MemorySegment segment) {
+                INT_HANDLE.set(segment.baseAddress(), 42);
+            }
+        };
+
+        final int accessMode;
+
+        static VarHandle INT_HANDLE = MemoryLayouts.JAVA_INT.varHandle(int.class);
+
+        AccessActions(int accessMode) {
+            this.accessMode = accessMode;
+        }
+
+        abstract void run(MemorySegment segment);
+    }
 }
