diff a/src/java.base/share/classes/java/lang/invoke/X-VarHandleMemoryAddressView.java.template b/src/java.base/share/classes/java/lang/invoke/X-VarHandleMemoryAddressView.java.template
--- a/src/java.base/share/classes/java/lang/invoke/X-VarHandleMemoryAddressView.java.template
+++ b/src/java.base/share/classes/java/lang/invoke/X-VarHandleMemoryAddressView.java.template
@@ -69,11 +69,11 @@
     static MemoryAddressProxy checkAddress(Object obb, long offset, long length, boolean ro) {
         MemoryAddressProxy oo = (MemoryAddressProxy)Objects.requireNonNull(obb);
         oo.checkAccess(offset, length, ro);
         return oo;
     }
-    
+
     @ForceInline
     static long offset(MemoryAddressProxy bb, long offset, long alignmentMask) {
         long address = offsetNoVMAlignCheck(bb, offset, alignmentMask);
         if ((address & VM_ALIGN) != 0) {
             throw VarHandleMemoryAddressBase.newIllegalStateExceptionForMisalignedAccess(address);
@@ -89,11 +89,11 @@
         if ((base & alignmentMask) != 0) {
             throw VarHandleMemoryAddressBase.newIllegalStateExceptionForMisalignedAccess(address);
         }
         return address;
     }
-    
+
     @ForceInline
     static $type$ get0(VarHandle ob, Object obb, long base) {
         VarHandleMemoryAddressBase handle = (VarHandleMemoryAddressBase)ob;
         MemoryAddressProxy bb = checkAddress(obb, base, handle.length, true);
 #if[floatingPoint]
