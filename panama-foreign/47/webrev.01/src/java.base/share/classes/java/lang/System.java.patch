diff a/src/java.base/share/classes/java/lang/System.java b/src/java.base/share/classes/java/lang/System.java
--- a/src/java.base/share/classes/java/lang/System.java
+++ b/src/java.base/share/classes/java/lang/System.java
@@ -33,10 +33,11 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.PrintStream;
 import java.io.UnsupportedEncodingException;
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.lang.module.ModuleDescriptor;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Executable;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
@@ -59,10 +60,11 @@
 import java.util.Set;
 import java.util.function.Supplier;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Stream;
 
+import jdk.internal.access.foreign.NativeLibraryProxy;
 import jdk.internal.util.StaticProperty;
 import jdk.internal.module.ModuleBootstrap;
 import jdk.internal.module.ServicesCatalog;
 import jdk.internal.reflect.CallerSensitive;
 import jdk.internal.reflect.Reflection;
@@ -2279,8 +2281,22 @@
 
             public void loadLibrary(Class<?> caller, String library) {
                 assert library.indexOf(java.io.File.separatorChar) < 0;
                 ClassLoader.loadLibrary(caller, library, false);
             }
+
+            //Panama
+            @Override
+            public NativeLibraryProxy loadLibrary(MethodHandles.Lookup lookup, String libname) {
+                return Runtime.getRuntime().loadLibrary(lookup, libname);
+            }
+            @Override
+            public NativeLibraryProxy load(MethodHandles.Lookup lookup, String libname) {
+                return Runtime.getRuntime().load0(lookup.lookupClass(), libname);
+            }
+            @Override
+            public NativeLibraryProxy defaultLibrary() {
+                return Runtime.getRuntime().defaultLibrary();
+            }
         });
     }
 }
