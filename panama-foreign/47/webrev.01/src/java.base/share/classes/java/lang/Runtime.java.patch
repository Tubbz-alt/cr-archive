diff a/src/java.base/share/classes/java/lang/Runtime.java b/src/java.base/share/classes/java/lang/Runtime.java
--- a/src/java.base/share/classes/java/lang/Runtime.java
+++ b/src/java.base/share/classes/java/lang/Runtime.java
@@ -25,19 +25,24 @@
  */
 
 package java.lang;
 
 import java.io.*;
+import java.lang.ClassLoader.NativeLibrary;
+import java.lang.invoke.MethodHandles;
+import java.lang.invoke.MethodHandles.Lookup;
 import java.math.BigInteger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 import java.util.List;
 import java.util.Optional;
 import java.util.StringTokenizer;
 
+import jdk.internal.access.JavaLangAccess;
 import jdk.internal.access.SharedSecrets;
+import jdk.internal.access.foreign.NativeLibraryProxy;
 import jdk.internal.reflect.CallerSensitive;
 import jdk.internal.reflect.Reflection;
 
 /**
  * Every Java application has a single instance of class
@@ -731,20 +736,20 @@
     @CallerSensitive
     public void load(String filename) {
         load0(Reflection.getCallerClass(), filename);
     }
 
-    void load0(Class<?> fromClass, String filename) {
+    NativeLibraryProxy load0(Class<?> fromClass, String filename) {
         SecurityManager security = System.getSecurityManager();
         if (security != null) {
             security.checkLink(filename);
         }
         if (!(new File(filename).isAbsolute())) {
             throw new UnsatisfiedLinkError(
                 "Expecting an absolute path of the library: " + filename);
         }
-        ClassLoader.loadLibrary(fromClass, filename, true);
+        return ClassLoader.loadLibrary(fromClass, filename, true);
     }
 
     /**
      * Loads the native library specified by the {@code libname}
      * argument.  The {@code libname} argument must not contain any platform
@@ -793,20 +798,36 @@
     @CallerSensitive
     public void loadLibrary(String libname) {
         loadLibrary0(Reflection.getCallerClass(), libname);
     }
 
-    void loadLibrary0(Class<?> fromClass, String libname) {
+    /**
+     * Panama specific: find library given name and lookup.
+     * See {@link JavaLangAccess#loadLibrary(Lookup, String)}.
+     */
+    NativeLibrary loadLibrary(MethodHandles.Lookup lookup, String libname) {
+        return loadLibrary0(lookup.lookupClass(), libname);
+    }
+
+    /**
+     * Panama specific: find default system library.
+     * See {@link JavaLangAccess#defaultLibrary()}.
+     */
+    NativeLibrary defaultLibrary() {
+        return NativeLibrary.defaultLibrary;
+    }
+
+    NativeLibrary loadLibrary0(Class<?> fromClass, String libname) {
         SecurityManager security = System.getSecurityManager();
         if (security != null) {
             security.checkLink(libname);
         }
         if (libname.indexOf((int)File.separatorChar) != -1) {
             throw new UnsatisfiedLinkError(
                 "Directory separator should not appear in library name: " + libname);
         }
-        ClassLoader.loadLibrary(fromClass, libname, false);
+        return ClassLoader.loadLibrary(fromClass, libname, false);
     }
 
     /**
      * Returns the version of the Java Runtime Environment as a {@link Version}.
      *
