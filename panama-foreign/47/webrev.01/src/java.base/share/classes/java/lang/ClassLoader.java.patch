diff a/src/java.base/share/classes/java/lang/ClassLoader.java b/src/java.base/share/classes/java/lang/ClassLoader.java
--- a/src/java.base/share/classes/java/lang/ClassLoader.java
+++ b/src/java.base/share/classes/java/lang/ClassLoader.java
@@ -57,10 +57,11 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 
+import jdk.internal.access.foreign.NativeLibraryProxy;
 import jdk.internal.loader.BuiltinClassLoader;
 import jdk.internal.perf.PerfCounter;
 import jdk.internal.loader.BootLoader;
 import jdk.internal.loader.ClassLoaders;
 import jdk.internal.misc.Unsafe;
@@ -2390,11 +2391,11 @@
      * version of JNI to the native methods.  </p>
      *
      * @see      ClassLoader
      * @since    1.2
      */
-    static class NativeLibrary {
+    static class NativeLibrary implements NativeLibraryProxy {
         // the class from which the library is loaded, also indicates
         // the loader this native library belongs.
         final Class<?> fromClass;
         // the canonicalized name of the native library.
         // or static library name
@@ -2407,18 +2408,34 @@
         // the version of JNI environment the native library requires.
         int jniVersion;
 
         native boolean load0(String name, boolean isBuiltin);
 
-        native long findEntry(String name);
+        private native long findEntry0(String name);
+
+        // used by default library
+        private static native long findEntryInProcess(String name);
+
+        long findEntry(String name) {
+            return findEntry0(name);
+        }
 
         NativeLibrary(Class<?> fromClass, String name, boolean isBuiltin) {
             this.name = name;
             this.fromClass = fromClass;
             this.isBuiltin = isBuiltin;
         }
 
+        @Override
+        public long lookup(String name) throws NoSuchMethodException {
+            long addr = findEntry(name);
+            if (0 == addr) {
+                throw new NoSuchMethodException("Cannot find symbol " + name + " in library " + this.name);
+            }
+            return addr;
+        }
+
         /*
          * Loads the native library and registers for cleanup when its
          * associated class loader is unloaded
          */
         boolean load() {
@@ -2438,19 +2455,34 @@
                         new Unloader(name, handle, isBuiltin));
             }
             return true;
         }
 
-        static boolean loadLibrary(Class<?> fromClass, String name, boolean isBuiltin) {
+        static NativeLibrary defaultLibrary = new NativeLibrary(Object.class, "<default>", true) {
+
+            @Override
+            boolean load() {
+                throw new UnsupportedOperationException("Cannot load default library");
+            }
+
+            @Override
+            long findEntry(String name) {
+                return NativeLibrary.findEntryInProcess(name);
+            }
+            
+        };
+
+        static NativeLibrary loadLibrary(Class<?> fromClass, String name, boolean isBuiltin) {
             ClassLoader loader =
                 fromClass == null ? null : fromClass.getClassLoader();
 
             synchronized (loadedLibraryNames) {
                 Map<String, NativeLibrary> libs =
                     loader != null ? loader.nativeLibraries() : systemNativeLibraries();
-                if (libs.containsKey(name)) {
-                    return true;
+                NativeLibrary cached = libs.get(name);
+                if (cached != null) {
+                    return cached;
                 }
 
                 if (loadedLibraryNames.contains(name)) {
                     throw new UnsatisfiedLinkError("Native Library " + name +
                         " already loaded in another classloader");
@@ -2469,35 +2501,38 @@
                  * UnsatisfiedLinkError.
                  */
                 for (NativeLibrary lib : nativeLibraryContext) {
                     if (name.equals(lib.name)) {
                         if (loader == lib.fromClass.getClassLoader()) {
-                            return true;
+                            return lib;
                         } else {
                             throw new UnsatisfiedLinkError("Native Library " +
                                 name + " is being loaded in another classloader");
                         }
                     }
                 }
                 NativeLibrary lib = new NativeLibrary(fromClass, name, isBuiltin);
                 // load the native library
                 nativeLibraryContext.push(lib);
                 try {
-                    if (!lib.load()) return false;
+                    if (!lib.load()) return null;
                 } finally {
                     nativeLibraryContext.pop();
                 }
                 // register the loaded native library
                 loadedLibraryNames.add(name);
                 libs.put(name, lib);
+                return lib;
             }
-            return true;
         }
 
         // Invoked in the VM to determine the context class in JNI_OnLoad
         // and JNI_OnUnload
         static Class<?> getFromClass() {
+            if(nativeLibraryContext.isEmpty()) { // only default library 
+                return defaultLibrary.fromClass;
+            }
             return nativeLibraryContext.peek().fromClass;
         }
 
         // native libraries being loaded
         static Deque<NativeLibrary> nativeLibraryContext = new ArrayDeque<>(8);
@@ -2559,18 +2594,19 @@
         static final String[] SYS =
                 ClassLoaderHelper.parsePath(StaticProperty.sunBootLibraryPath());
     }
 
     // Invoked in the java.lang.Runtime class to implement load and loadLibrary.
-    static void loadLibrary(Class<?> fromClass, String name,
-                            boolean isAbsolute) {
+    static NativeLibrary loadLibrary(Class<?> fromClass, String name,
+                                     boolean isAbsolute) {
         ClassLoader loader =
             (fromClass == null) ? null : fromClass.getClassLoader();
 
         if (isAbsolute) {
-            if (loadLibrary0(fromClass, new File(name))) {
-                return;
+            NativeLibrary nl = loadLibrary0(fromClass, new File(name));
+            if (nl != null) {
+                return nl;
             }
             throw new UnsatisfiedLinkError("Can't load library: " + name);
         }
         if (loader != null) {
             String libfilename = loader.findLibrary(name);
@@ -2578,46 +2614,55 @@
                 File libfile = new File(libfilename);
                 if (!libfile.isAbsolute()) {
                     throw new UnsatisfiedLinkError(
                         "ClassLoader.findLibrary failed to return an absolute path: " + libfilename);
                 }
-                if (loadLibrary0(fromClass, libfile)) {
-                    return;
+                NativeLibrary nl = loadLibrary0(fromClass, libfile);
+                if (nl != null) {
+                    return nl;
                 }
                 throw new UnsatisfiedLinkError("Can't load " + libfilename);
             }
         }
         for (String sysPath : LibraryPaths.SYS) {
             File libfile = new File(sysPath, System.mapLibraryName(name));
-            if (loadLibrary0(fromClass, libfile)) {
-                return;
+            NativeLibrary nl = loadLibrary0(fromClass, libfile);
+            if (nl != null) {
+                return nl;
             }
             libfile = ClassLoaderHelper.mapAlternativeName(libfile);
-            if (libfile != null && loadLibrary0(fromClass, libfile)) {
-                return;
+            if (libfile != null) {
+                nl = loadLibrary0(fromClass, libfile);
+                if (nl != null) {
+                    return nl;
+                }
             }
         }
         if (loader != null) {
             for (String userPath : LibraryPaths.USER) {
                 File libfile = new File(userPath, System.mapLibraryName(name));
-                if (loadLibrary0(fromClass, libfile)) {
-                    return;
+                NativeLibrary nl = loadLibrary0(fromClass, libfile);
+                if (nl != null) {
+                    return nl;
                 }
                 libfile = ClassLoaderHelper.mapAlternativeName(libfile);
-                if (libfile != null && loadLibrary0(fromClass, libfile)) {
-                    return;
+                if (libfile != null) {
+                    nl = loadLibrary0(fromClass, libfile);
+                    if (nl != null) {
+                        return nl;
+                    }
                 }
             }
         }
         // Oops, it failed
         throw new UnsatisfiedLinkError("no " + name +
             " in java.library.path: " + Arrays.toString(LibraryPaths.USER));
     }
 
     private static native String findBuiltinLib(String name);
 
-    private static boolean loadLibrary0(Class<?> fromClass, final File file) {
+    private static NativeLibrary loadLibrary0(Class<?> fromClass, final File file) {
         // Check to see if we're attempting to access a static library
         String name = findBuiltinLib(file.getName());
         boolean isBuiltin = (name != null);
         if (!isBuiltin) {
             name = AccessController.doPrivileged(
@@ -2629,11 +2674,11 @@
                             return null;
                         }
                     }
                 });
             if (name == null) {
-                return false;
+                return null;
             }
         }
         return NativeLibrary.loadLibrary(fromClass, name, isBuiltin);
     }
 
