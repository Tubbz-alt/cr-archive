diff a/src/java.base/share/classes/jdk/internal/access/JavaLangAccess.java b/src/java.base/share/classes/jdk/internal/access/JavaLangAccess.java
--- a/src/java.base/share/classes/jdk/internal/access/JavaLangAccess.java
+++ b/src/java.base/share/classes/jdk/internal/access/JavaLangAccess.java
@@ -24,10 +24,11 @@
  */
 
 package jdk.internal.access;
 
 import java.lang.annotation.Annotation;
+import java.lang.invoke.MethodHandles;
 import java.lang.module.ModuleDescriptor;
 import java.lang.reflect.Executable;
 import java.lang.reflect.Method;
 import java.net.URI;
 import java.nio.charset.CharacterCodingException;
@@ -39,10 +40,11 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Stream;
 
+import jdk.internal.access.foreign.NativeLibraryProxy;
 import jdk.internal.module.ServicesCatalog;
 import jdk.internal.reflect.ConstantPool;
 import sun.reflect.annotation.AnnotationType;
 import sun.nio.ch.Interruptible;
 
@@ -318,6 +320,38 @@
      *
      * @param caller on behalf of which the library is being loaded
      * @param library name of the library to load
      */
     void loadLibrary(Class<?> caller, String library);
+
+    //Panama
+
+    /**
+     * Panama: load a native library.
+     * @param lookup the lookup object.
+     * @param libname the name of the library.
+     * @return the found library
+     * @throws     UnsatisfiedLinkError if either the libname argument
+     *             contains a file path, the native library is not statically
+     *             linked with the VM,  or the library cannot be mapped to a
+     *             native library image by the host system.
+     */
+    NativeLibraryProxy loadLibrary(MethodHandles.Lookup lookup, String libname);
+
+    /**
+     * Panama: load a native library.
+     * @param lookup the lookup object.
+     * @param libname the absolute path of the library.
+     * @return the loaded library
+     * @throws     UnsatisfiedLinkError if either the libname argument is not an
+     *             absolute path name, the native library is not statically
+     *             linked with the VM, or the library cannot be mapped to
+     *             a native library image by the host system.
+     */
+    NativeLibraryProxy load(MethodHandles.Lookup lookup, String libname);
+
+    /**
+     * Panama: lookup default library
+     * @return defauult library.
+     */
+    NativeLibraryProxy defaultLibrary();
 }
