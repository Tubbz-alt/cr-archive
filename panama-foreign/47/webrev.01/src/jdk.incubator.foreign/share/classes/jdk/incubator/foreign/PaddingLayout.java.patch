diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/PaddingLayout.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/PaddingLayout.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/PaddingLayout.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/PaddingLayout.java
@@ -23,12 +23,14 @@
  *  questions.
  *
  */
 package jdk.incubator.foreign;
 
+import java.lang.constant.Constable;
 import java.lang.constant.ConstantDescs;
 import java.lang.constant.DynamicConstantDesc;
+import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.OptionalLong;
 
 /**
@@ -45,15 +47,15 @@
  * This class is immutable and thread-safe.
  */
 /* package-private */ final class PaddingLayout extends AbstractLayout implements MemoryLayout {
 
     PaddingLayout(long size) {
-        this(size, 1, Optional.empty());
+        this(size, 1, Map.of());
     }
 
-    PaddingLayout(long size, long alignment, Optional<String> name) {
-        super(OptionalLong.of(size), alignment, name);
+    PaddingLayout(long size, long alignment, Map<String, Constable> annotations) {
+        super(OptionalLong.of(size), alignment, annotations);
     }
 
     @Override
     public String toString() {
         return decorateLayoutString("x" + bitSize());
@@ -78,12 +80,12 @@
     public int hashCode() {
         return Objects.hash(super.hashCode(), bitSize());
     }
 
     @Override
-    PaddingLayout dup(long alignment, Optional<String> name) {
-        return new PaddingLayout(bitSize(), alignment, name);
+    PaddingLayout dup(long alignment, Map<String, Constable> annotations) {
+        return new PaddingLayout(bitSize(), alignment, annotations);
     }
 
     @Override
     public Optional<DynamicConstantDesc<MemoryLayout>> describeConstable() {
         return Optional.of(DynamicConstantDesc.ofNamed(ConstantDescs.BSM_INVOKE, "padding",
