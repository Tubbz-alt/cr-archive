diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/ValueLayout.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/ValueLayout.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/ValueLayout.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/ValueLayout.java
@@ -23,14 +23,16 @@
  *  questions.
  *
  */
 package jdk.incubator.foreign;
 
+import java.lang.constant.Constable;
 import java.lang.constant.ConstantDescs;
 import java.lang.constant.DynamicConstantDesc;
 import java.lang.constant.MethodHandleDesc;
 import java.nio.ByteOrder;
+import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.OptionalLong;
 
 /**
@@ -50,15 +52,15 @@
 public final class ValueLayout extends AbstractLayout implements MemoryLayout {
 
     private final ByteOrder order;
 
     ValueLayout(ByteOrder order, long size) {
-        this(order, size, size, Optional.empty());
+        this(order, size, size, Map.of());
     }
 
-    ValueLayout(ByteOrder order, long size, long alignment, Optional<String> name) {
-        super(OptionalLong.of(size), alignment, name);
+    ValueLayout(ByteOrder order, long size, long alignment, Map<String, Constable> annotations) {
+        super(OptionalLong.of(size), alignment, annotations);
         this.order = order;
     }
 
     /**
      * Returns the value's byte order.
@@ -74,11 +76,11 @@
      *
      * @param order the desired byte order.
      * @return a new value layout with given byte order.
      */
     public ValueLayout withOrder(ByteOrder order) {
-        return new ValueLayout(order, bitSize(), alignment, optName());
+        return new ValueLayout(order, bitSize(), alignment, annotations);
     }
 
     @Override
     public String toString() {
         return decorateLayoutString(String.format("%s%d",
@@ -107,12 +109,12 @@
     public int hashCode() {
         return Objects.hash(super.hashCode(), order, bitSize(), alignment);
     }
 
     @Override
-    ValueLayout dup(long alignment, Optional<String> name) {
-        return new ValueLayout(order, bitSize(), alignment, name);
+    ValueLayout dup(long alignment, Map<String, Constable> annotations) {
+        return new ValueLayout(order, bitSize(), alignment, annotations);
     }
 
     @Override
     public Optional<DynamicConstantDesc<ValueLayout>> describeConstable() {
         return Optional.of(DynamicConstantDesc.ofNamed(ConstantDescs.BSM_INVOKE, "value",
