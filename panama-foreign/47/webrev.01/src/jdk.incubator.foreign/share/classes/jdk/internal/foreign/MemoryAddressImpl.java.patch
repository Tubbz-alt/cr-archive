diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
@@ -43,10 +43,14 @@
     private static final Unsafe UNSAFE = Unsafe.getUnsafe();
 
     private final MemorySegmentImpl segment;
     private final long offset;
 
+    public MemoryAddressImpl(MemorySegmentImpl segment) {
+        this(segment, 0);
+    }
+
     public MemoryAddressImpl(MemorySegmentImpl segment, long offset) {
         this.segment = Objects.requireNonNull(segment);
         this.offset = offset;
     }
 
@@ -76,10 +80,20 @@
     @Override
     public MemoryAddress addOffset(long bytes) {
         return new MemoryAddressImpl(segment, offset + bytes);
     }
 
+    @Override
+    public MemoryAddress rebase(MemorySegment segment) {
+        MemorySegmentImpl segmentImpl = (MemorySegmentImpl)segment;
+        if (segmentImpl.base != this.segment.base) {
+            throw new IllegalArgumentException("Invalid rebase target: " + segment);
+        }
+        return new MemoryAddressImpl((MemorySegmentImpl)segment,
+                unsafeGetOffset() - ((MemoryAddressImpl)segment.baseAddress()).unsafeGetOffset());
+    }
+
     // MemoryAddressProxy methods
 
     public void checkAccess(long offset, long length, boolean readOnly) {
         segment.checkRange(MemoryAddressProxy.addOffsets(this.offset, offset, this), length, !readOnly);
     }
@@ -117,6 +131,24 @@
 
     @Override
     public String toString() {
         return "MemoryAddress{ region: " + segment + " offset=0x" + Long.toHexString(offset) + " }";
     }
+
+    // helper methods
+
+    public static long addressof(MemoryAddress address) {
+        MemoryAddressImpl addressImpl = (MemoryAddressImpl)address;
+        if (addressImpl.unsafeGetBase() != null) {
+            throw new IllegalStateException("Heap address!");
+        }
+        return addressImpl.unsafeGetOffset();
+    }
+
+    public static MemoryAddress ofLongUnchecked(long value) {
+        return ofLongUnchecked(value, Long.MAX_VALUE);
+    }
+
+    public static MemoryAddress ofLongUnchecked(long value, long byteSize) {
+        return new MemoryAddressImpl((MemorySegmentImpl)Utils.makeNativeSegmentUnchecked(value, byteSize), 0);
+    }
 }
