diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
@@ -62,10 +62,20 @@
 
     final static int SMALL = ACQUIRE << 1;
     final static long NONCE = new Random().nextLong();
 
     final static int DEFAULT_MASK = READ | WRITE | CLOSE | ACQUIRE;
+    public static MemorySegmentImpl NOTHING = new MemorySegmentImpl();
+
+    private MemorySegmentImpl() {
+        this.length = 0L;
+        this.mask = 0;
+        this.min = 0L;
+        this.base = null;
+        this.owner = null;
+        this.scope = MemoryScope.GLOBAL;
+    }
 
     public MemorySegmentImpl(long min, Object base, long length, Thread owner, MemoryScope scope) {
         this(min, base, length, DEFAULT_MASK, owner, scope);
     }
 
@@ -176,11 +186,11 @@
 
     // MemorySegmentProxy methods
 
     @Override
     public final void checkValidState() {
-        if (owner != Thread.currentThread()) {
+        if (owner != null && owner != Thread.currentThread()) {
             throw new IllegalStateException("Attempt to access segment outside owning thread");
         }
         scope.checkAliveConfined();
     }
 
