diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
@@ -25,10 +25,11 @@
  */
 
 package jdk.incubator.foreign;
 
 import jdk.internal.foreign.MemoryAddressImpl;
+import jdk.internal.foreign.MemorySegmentImpl;
 
 /**
  * A memory address encodes an offset within a given {@link MemorySegment}. Memory addresses are typically obtained
  * using the {@link MemorySegment#baseAddress()} method; such addresses can then be adjusted as required,
  * using {@link MemoryAddress#addOffset(long)}.
@@ -70,10 +71,19 @@
      * The memory segment this address belongs to.
      * @return The memory segment this address belongs to.
      */
     MemorySegment segment();
 
+    /**
+     * Reinterpret this address as an offset into the provided segment.
+     * @param segment
+     * @return a new address pointing to the same memory location through the provided segment
+     * @throws IllegalArgumentException if the provided segment is not a valid rebase target for this address. This
+     * can happen, for instance, if an heap-based addressed is rebased to an off-heap memory segment.
+     */
+    MemoryAddress rebase(MemorySegment segment);
+
     /**
      * Compares the specified object with this address for equality. Returns {@code true} if and only if the specified
      * object is also an address, and it refers to the same memory location as this address.
      *
      * @apiNote two addresses might be considered equal despite their associated segments differ. This
@@ -114,6 +124,24 @@
      */
     static void copy(MemoryAddress src, MemoryAddress dst, long bytes) {
         MemoryAddressImpl.copy((MemoryAddressImpl)src, (MemoryAddressImpl)dst, bytes);
     }
 
+    /**
+     * A native memory address instance modelling the {@code NULL} pointer. This address is backed by a memory segment
+     * which can be neither closed, nor dereferenced.
+     * @return the NULL memory address.
+     */
+    MemoryAddress NULL = MemorySegmentImpl.NOTHING.baseAddress();
+
+    /**
+     * Obtain a new memory address instance from given long address. The returned address is backed by a memory segment
+     * which can be neither closed, nor dereferenced.
+     * @param value the long address.
+     * @return the new memory address instance.
+     */
+    static MemoryAddress ofLong(long value) {
+        return value == 0 ?
+                NULL :
+                MemorySegmentImpl.NOTHING.baseAddress().addOffset(value);
+    }
 }
