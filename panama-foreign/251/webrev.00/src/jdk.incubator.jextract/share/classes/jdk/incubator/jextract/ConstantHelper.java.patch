diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/ConstantHelper.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/ConstantHelper.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/ConstantHelper.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/ConstantHelper.java
@@ -20,11 +20,11 @@
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package jdk.incubator.jextract.tool;
+package jdk.incubator.jextract;
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
@@ -61,11 +61,11 @@
 import static java.lang.constant.ConstantDescs.*;
 import static java.lang.invoke.MethodHandleInfo.*;
 import static java.lang.invoke.MethodType.methodType;
 import static jdk.internal.org.objectweb.asm.Opcodes.*;
 
-class ConstantHelper {
+public class ConstantHelper {
 
     private static final String INTR_OBJECT = Type.getInternalName(Object.class);
 
     private static final ClassDesc CD_LIBRARIES = desc(LibraryLookup[].class);
 
@@ -140,11 +140,11 @@
             Map.entry(Float.TYPE,               desc(Float.TYPE)),
             Map.entry(Double.TYPE,              desc(Double.TYPE)),
             Map.entry(MemoryAddress.class,      desc(Long.TYPE))
     );
 
-    ConstantHelper(String parentClassName, ClassDesc runtimeHelper, ClassDesc cString, String[] libraryNames) {
+    public ConstantHelper(String parentClassName, ClassDesc runtimeHelper, ClassDesc cString, String[] libraryNames) {
         this.cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
         String className = parentClassName + "$constants";
         this.CD_constantsHelper = ClassDesc.of(className);
         this.internalClassName = className.replace('.', '/');
 
