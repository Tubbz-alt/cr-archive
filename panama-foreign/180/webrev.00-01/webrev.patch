diff a/src/java.base/share/classes/jdk/internal/util/ArraysSupport.java b/src/java.base/share/classes/jdk/internal/util/ArraysSupport.java
--- a/src/java.base/share/classes/jdk/internal/util/ArraysSupport.java
+++ b/src/java.base/share/classes/jdk/internal/util/ArraysSupport.java
@@ -158,10 +158,41 @@
         else {
             return ~tail;
         }
     }
 
+    /**
+     * Mismatch over long lengths.
+     */
+    public static long vectorizedMismatchLarge(Object a, long aOffset,
+                                               Object b, long bOffset,
+                                               long length,
+                                               int log2ArrayIndexScale) {
+        long off = 0;
+        long remaining = length;
+        int i ;
+        while (remaining > 7) {
+            int size;
+            if (remaining > Integer.MAX_VALUE) {
+                size = Integer.MAX_VALUE;
+            } else {
+                size = (int) remaining;
+            }
+            i = vectorizedMismatch(
+                    a, aOffset + off,
+                    b, bOffset + off,
+                    size, log2ArrayIndexScale);
+            if (i >= 0)
+                return off + i;
+
+            i = size - ~i;
+            off += i;
+            remaining -= i;
+        }
+        return ~off;
+    }
+
     // Booleans
     // Each boolean element takes up one byte
 
     public static int mismatch(boolean[] a,
                                boolean[] b,
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -342,11 +342,12 @@
      * If the two segments share a common prefix then the returned offset is
      * the length of the common prefix and it follows that there is a mismatch
      * between the two segments at that offset within the respective segments.
      * If one segment is a proper prefix of the other then the returned offset is
      * the smaller of the segment sizes, and it follows that the offset is only
-     * valid for the larger segment. Otherwise, there is no mismatch.
+     * valid for the larger segment. Otherwise, there is no mismatch and {@code
+     * -1} is returned.
      *
      * @param other the segment to be tested for a mismatch with this segment
      * @return the relative offset, in bytes, of the first mismatch between this
      * and the given other segment, otherwise -1 if no mismatch
      * @throws IllegalStateException if either this segment of the other segment
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
@@ -24,10 +24,12 @@
  */
 
 package jdk.internal.foreign;
 
 import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
 import jdk.internal.access.JavaNioAccess;
 import jdk.internal.access.SharedSecrets;
 import jdk.internal.access.foreign.MemorySegmentProxy;
@@ -130,55 +132,45 @@
         UNSAFE.copyMemory(
                 that.base(), that.min(),
                 base(), min(), size);
     }
 
+    private final static VarHandle BYTE_HANDLE = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)
+            .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());
+
     @Override
     public long mismatch(MemorySegment other) {
         AbstractMemorySegmentImpl that = (AbstractMemorySegmentImpl)other;
         final long thisSize = this.byteSize();
         final long thatSize = that.byteSize();
-        final long minSize = Math.min(thisSize, thatSize);
-
-        this.checkRange(0, minSize, false);
-        that.checkRange(0, minSize, false);
-
-        if (this == other)
+        final long length = Math.min(thisSize, thatSize);
+        this.checkRange(0, length, false);
+        that.checkRange(0, length, false);
+        if (this == other) {
             return -1;
+        }
 
-        long off = 0;
-        long remaining = minSize;
-        int i = 0;
-        while (remaining > 7) {
-            int size;
-            if (remaining > Integer.MAX_VALUE) {
-                size = Integer.MAX_VALUE;
-            } else {
-                size = (int) remaining;
-            }
-            i = ArraysSupport.vectorizedMismatch(
-                    this.base(),
-                    this.min() + off,
-                    that.base(),
-                    that.min() + off,
-                    size,
-                    ArraysSupport.LOG2_ARRAY_BYTE_INDEX_SCALE);
+        long i = 0;
+        if (length > 7) {
+            i = ArraysSupport.vectorizedMismatchLarge(
+                    this.base(), this.min(),
+                    that.base(), that.min(),
+                    length, ArraysSupport.LOG2_ARRAY_BYTE_INDEX_SCALE);
             if (i >= 0) {
-                return off + i;
+                return i;
             }
-            i = size - ~i;
-
-            off += i;
-            remaining -= i;
+            i = length - ~i;
         }
 
-        for (; off < minSize; off++) {
-            if (UNSAFE.getByte(this.base(), this.min() + off) != UNSAFE.getByte(that.base(), that.min() + off)) {
-                return off;
+        MemoryAddress thisAddress = this.baseAddress();
+        MemoryAddress thatAddress = that.baseAddress();
+        for (; i < length; i++) {
+            if ((byte) BYTE_HANDLE.get(thisAddress, i) != (byte) BYTE_HANDLE.get(thatAddress, i)) {
+                return i;
             }
         }
-        return thisSize != thatSize ? minSize : -1;
+        return thisSize != thatSize ? length : -1;
     }
 
     @Override
     @ForceInline
     public final MemoryAddress baseAddress() {
diff a/test/jdk/java/foreign/TestMismatch.java b/test/jdk/java/foreign/TestMismatch.java
--- a/test/jdk/java/foreign/TestMismatch.java
+++ b/test/jdk/java/foreign/TestMismatch.java
@@ -207,11 +207,11 @@
         }
     }
 
     @DataProvider(name = "slices")
     static Object[][] slices() {
-        int[] sizes = { 16, 8, 4, 2, 1 };
+        int[] sizes = { 16, 8, 1 };
         List<MemorySegment> aSlices = new ArrayList<>();
         List<MemorySegment> bSlices = new ArrayList<>();
         for (List<MemorySegment> slices : List.of(aSlices, bSlices)) {
             for (SegmentKind kind : SegmentKind.values()) {
                 MemorySegment segment = kind.makeSegment(16);
