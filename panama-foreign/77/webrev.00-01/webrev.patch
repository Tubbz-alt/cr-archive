diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAddress.java
@@ -124,24 +124,16 @@
      */
     static void copy(MemoryAddress src, MemoryAddress dst, long bytes) {
         MemoryAddressImpl.copy((MemoryAddressImpl)src, (MemoryAddressImpl)dst, bytes);
     }
 
-    /**
-     * A native memory address instance modelling the {@code NULL} pointer. This address is backed by a memory segment
-     * which can be neither closed, nor dereferenced.
-     */
-    MemoryAddress NULL = MemorySegmentImpl.NOTHING.baseAddress();
-
     /**
      * Obtain a new memory address instance from given long address. The returned address is backed by a memory segment
      * which can be neither closed, nor dereferenced.
      * @param value the long address.
      * @return the new memory address instance.
      */
     static MemoryAddress ofLong(long value) {
-        return value == 0 ?
-                NULL :
-                MemorySegmentImpl.NOTHING.baseAddress().addOffset(value);
+        return MemorySegmentImpl.NOTHING.baseAddress().addOffset(value);
     }
 
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
@@ -130,20 +130,12 @@
     }
 
     // helper methods
 
     public static long addressof(MemoryAddress address) {
-        MemoryAddressImpl addressImpl = (MemoryAddressImpl)address;
+        MemoryAddressImpl addressImpl = (MemoryAddressImpl) address;
         if (addressImpl.unsafeGetBase() != null) {
             throw new IllegalStateException("Heap address!");
         }
         return addressImpl.unsafeGetOffset();
     }
-
-    public static MemoryAddress ofLongUnchecked(long value) {
-        return ofLongUnchecked(value, Long.MAX_VALUE);
-    }
-
-    public static MemoryAddress ofLongUnchecked(long value, long byteSize) {
-        return new MemoryAddressImpl((MemorySegmentImpl)Utils.makeNativeSegmentUnchecked(value, byteSize), 0);
-    }
 }
