diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
@@ -51,11 +51,11 @@
 /**
  * This class contains misc helper functions to support creation of memory segments.
  */
 public final class Utils {
 
-    private static Unsafe unsafe = Unsafe.getUnsafe();
+    private static final Unsafe unsafe = Unsafe.getUnsafe();
 
     private static final MethodHandle ADDRESS_FILTER;
 
     static {
         try {
@@ -107,10 +107,22 @@
             segment = segment.asSlice(delta, bytesSize);
         }
         return segment;
     }
 
+    public static MemorySegment makeNativeSegmentUnchecked(MemoryAddress base, long bytesSize) {
+        if (((MemorySegmentImpl)base.segment()).base != null) {
+            throw new IllegalArgumentException("Not a native address: " + base);
+        }
+        return makeNativeSegmentUnchecked(((MemoryAddressImpl)base).unsafeGetOffset(), bytesSize);
+    }
+
+    public static MemorySegment makeNativeSegmentUnchecked(long min, long bytesSize) {
+        MemoryScope scope = new MemoryScope(null, null);
+        return new MemorySegmentImpl(min, null, bytesSize, Thread.currentThread(), scope);
+    }
+
     public static MemorySegment makeArraySegment(byte[] arr) {
         return makeArraySegment(arr, arr.length, Unsafe.ARRAY_BYTE_BASE_OFFSET, Unsafe.ARRAY_BYTE_INDEX_SCALE);
     }
 
     public static MemorySegment makeArraySegment(char[] arr) {
