diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
@@ -17,16 +17,10 @@
         return MemoryLayout.ofSequence(elemLayout)
                 .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
     }
     private final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);
 
-    private static void copy(MemoryAddress addr, byte[] bytes) {
-        var heapSegment = MemorySegment.ofArray(bytes);
-        MemoryAddress.copy(heapSegment.baseAddress(), addr, bytes.length);
-        byteArrHandle.set(addr, (long)bytes.length, (byte)0);
-    }
-
     private static MemorySegment toCString(byte[] bytes) {
         MemoryLayout strLayout = MemoryLayout.ofSequence(bytes.length + 1, C_CHAR);
         MemorySegment segment = MemorySegment.allocateNative(strLayout);
         MemoryAddress addr = segment.baseAddress();
         copy(addr, bytes);
@@ -34,11 +28,11 @@
     }
 
     private static MemoryAddress toCString(byte[] bytes, NativeAllocationScope scope) {
         MemoryLayout strLayout = MemoryLayout.ofSequence(bytes.length + 1, C_CHAR);
         MemoryAddress addr = scope.allocate(strLayout);
-        copy(addr, bytes);
+        addr.segment().copyFrom(MemorySegment.ofArray(bytes));
         return addr;
     }
 
     public static void copy(MemoryAddress addr, String str) {
         copy(addr, str.getBytes());
@@ -46,10 +40,19 @@
 
     public static void copy(MemoryAddress addr, String str, Charset charset) {
         copy(addr, str.getBytes(charset));
     }
 
+    //where
+    private static void copy(MemoryAddress addr, byte[] bytes) {
+            var heapSegment = MemorySegment.ofArray(bytes);
+            addr.segment()
+                    .asSlice(addr.segmentOffset(), bytes.length)
+                    .copyFrom(heapSegment);
+            byteArrHandle.set(addr, (long)bytes.length, (byte)0);
+        }
+
     public static MemorySegment toCString(String str) {
          return toCString(str.getBytes());
     }
 
     public static MemorySegment toCString(String str, Charset charset) {
