diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
@@ -21,15 +21,10 @@
     public static final MemoryLayout LAYOUT = ${LAYOUT};
     public static final Class<?> CARRIER = ${CARRIER}.class;
     private static final VarHandle handle = LAYOUT.varHandle(CARRIER);
     private static final VarHandle arrayHandle = arrayHandle(LAYOUT, CARRIER);
 
-    private static void copy(MemoryAddress addr, ${CARRIER}[] arr) {
-        var heapSegment = MemorySegment.ofArray(arr);
-        MemoryAddress.copy(heapSegment.baseAddress(), addr, arr.length * sizeof());
-    }
-
     public static ${CARRIER} get(MemoryAddress addr) {
         return (${CARRIER}) handle.get(addr);
     }
 
     public static void set(MemoryAddress addr, ${CARRIER} value) {
@@ -67,18 +62,18 @@
     }
 
     public static MemorySegment allocateArray(${CARRIER}[] arr) {
         var arrLayout = MemoryLayout.ofSequence(arr.length, LAYOUT);
         var seg = MemorySegment.allocateNative(arrLayout);
-        copy(seg.baseAddress(), arr);
+        seg.copyFrom(MemorySegment.ofArray(arr));
         return seg;
     }
 
     public static MemoryAddress allocateArray(${CARRIER}[] arr, NativeAllocationScope scope) {
         var arrLayout = MemoryLayout.ofSequence(arr.length, LAYOUT);
         var addr = scope.allocate(arrLayout);
-        copy(addr, arr);
+        addr.segment().copyFrom(MemorySegment.ofArray(arr));
         return addr;
     }
 
     public static long sizeof() {
         return LAYOUT.byteSize();
@@ -89,9 +84,9 @@
         var elemSize = sizeof();
         if (segSize % elemSize != 0) {
             throw new UnsupportedOperationException("segment cannot contain integral number of elements");
         }
         ${CARRIER}[] array = new ${CARRIER}[(int) (segSize / elemSize)];
-        MemoryAddress.copy(seg.baseAddress(), MemorySegment.ofArray(array).baseAddress(), array.length * elemSize);
+        MemorySegment.ofArray(array).copyFrom(seg);
         return array;
     }
 }
