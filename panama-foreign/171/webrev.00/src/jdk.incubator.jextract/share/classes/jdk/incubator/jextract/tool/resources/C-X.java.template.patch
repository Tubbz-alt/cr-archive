diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
@@ -23,11 +23,11 @@
     private static final VarHandle handle = LAYOUT.varHandle(CARRIER);
     private static final VarHandle arrayHandle = arrayHandle(LAYOUT, CARRIER);
 
     private static void copy(MemoryAddress addr, ${CARRIER}[] arr) {
         var heapSegment = MemorySegment.ofArray(arr);
-        MemoryAddress.copy(heapSegment.baseAddress(), addr, arr.length * sizeof());
+        addr.segment().copyFrom(heapSegment);
     }
 
     public static ${CARRIER} get(MemoryAddress addr) {
         return (${CARRIER}) handle.get(addr);
     }
@@ -89,9 +89,9 @@
         var elemSize = sizeof();
         if (segSize % elemSize != 0) {
             throw new UnsupportedOperationException("segment cannot contain integral number of elements");
         }
         ${CARRIER}[] array = new ${CARRIER}[(int) (segSize / elemSize)];
-        MemoryAddress.copy(seg.baseAddress(), MemorySegment.ofArray(array).baseAddress(), array.length * elemSize);
+        MemorySegment.ofArray(array).copyFrom(seg);
         return array;
     }
 }
