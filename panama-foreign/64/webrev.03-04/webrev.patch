diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
@@ -189,11 +189,10 @@
          * @return the retrieved ABI type
          * @throws IllegalArgumentException if the given layout does not have an ABI type attribute
          */
         public static Type fromLayout(MemoryLayout ml) throws IllegalArgumentException {
             return ml.attribute(NATIVE_TYPE)
-                     .filter(SystemABI.Type.class::isInstance)
                      .map(SystemABI.Type.class::cast)
                      .orElseThrow(() -> new IllegalArgumentException("No ABI attribute present"));
         }
     }
 
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
@@ -516,11 +516,10 @@
 
     // TODO: handle zero length arrays
     // TODO: Handle nested structs (and primitives)
     private static List<ArgumentClassImpl> classifyStructType(GroupLayout type) {
         if (type.attribute(SystemABI.NATIVE_TYPE)
-                .filter(SystemABI.Type.class::isInstance)
                 .map(SystemABI.Type.class::cast)
                 .map(SysVx64ABI::argumentClassFor)
                 .filter(ArgumentClassImpl.COMPLEX_X87::equals)
                 .isPresent()) {
             return COMPLEX_X87_CLASSES;
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/CallArranger.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/CallArranger.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/CallArranger.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/CallArranger.java
@@ -182,11 +182,10 @@
             return TypeClass.INTEGER;
         } else if(clazz == ArgumentClassImpl.POINTER) {
             return TypeClass.POINTER;
         } else if (clazz == ArgumentClassImpl.SSE) {
             if (type.attribute(VARARGS_ATTRIBUTE_NAME)
-                    .filter(String.class::isInstance)
                     .map(String.class::cast)
                     .map(Boolean::parseBoolean).orElse(false)) {
                 return TypeClass.VARARG_FLOAT;
             }
             return TypeClass.FLOAT;
