diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayout.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayout.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayout.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayout.java
@@ -291,21 +291,10 @@
      * @param name the name of the attribute
      * @return the optional attribute
      */
     Optional<Constable> attribute(String name);
 
-    /**
-     * Returns the attribute with the given name and the given type if it exists, or an empty optional
-     *
-     * @param name the name of the attribute
-     * @param type the type to filter by
-     * @return the optional attribute
-     */
-    default <T extends Constable> Optional<T> attribute(String name, Class<T> type) {
-        return attribute(name).filter(type::isInstance).map(type::cast);
-    }
-
     /**
      * Returns a new MemoryLayout with the given additional attribute
      *
      * @param name the name of the attribute
      * @param value the value of the attribute
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
@@ -188,11 +188,13 @@
          * @param ml the layout to retrieve the ABI type of
          * @return the retrieved ABI type
          * @throws IllegalArgumentException if the given layout does not have an ABI type attribute
          */
         public static Type fromLayout(MemoryLayout ml) throws IllegalArgumentException {
-            return ml.attribute(NATIVE_TYPE, SystemABI.Type.class)
+            return ml.attribute(NATIVE_TYPE)
+                     .filter(SystemABI.Type.class::isInstance)
+                     .map(SystemABI.Type.class::cast)
                      .orElseThrow(() -> new IllegalArgumentException("No ABI attribute present"));
         }
     }
 
     /**
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
@@ -515,11 +515,13 @@
     }
 
     // TODO: handle zero length arrays
     // TODO: Handle nested structs (and primitives)
     private static List<ArgumentClassImpl> classifyStructType(GroupLayout type) {
-        if (type.attribute(SystemABI.NATIVE_TYPE, SystemABI.Type.class)
+        if (type.attribute(SystemABI.NATIVE_TYPE)
+                .filter(SystemABI.Type.class::isInstance)
+                .map(SystemABI.Type.class::cast)
                 .map(SysVx64ABI::argumentClassFor)
                 .filter(ArgumentClassImpl.COMPLEX_X87::equals)
                 .isPresent()) {
             return COMPLEX_X87_CLASSES;
         }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/CallArranger.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/CallArranger.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/CallArranger.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/CallArranger.java
@@ -181,11 +181,14 @@
         if (clazz == ArgumentClassImpl.INTEGER) {
             return TypeClass.INTEGER;
         } else if(clazz == ArgumentClassImpl.POINTER) {
             return TypeClass.POINTER;
         } else if (clazz == ArgumentClassImpl.SSE) {
-            if (type.attribute(VARARGS_ATTRIBUTE_NAME, String.class).map(Boolean::parseBoolean).orElse(false)) {
+            if (type.attribute(VARARGS_ATTRIBUTE_NAME)
+                    .filter(String.class::isInstance)
+                    .map(String.class::cast)
+                    .map(Boolean::parseBoolean).orElse(false)) {
                 return TypeClass.VARARG_FLOAT;
             }
             return TypeClass.FLOAT;
         }
         throw new IllegalArgumentException("Unknown ABI class: " + clazz);
diff a/test/jdk/java/foreign/TestLayoutAttributes.java b/test/jdk/java/foreign/TestLayoutAttributes.java
--- a/test/jdk/java/foreign/TestLayoutAttributes.java
+++ b/test/jdk/java/foreign/TestLayoutAttributes.java
@@ -40,35 +40,26 @@
 
     @Test
     public void testAttribute() {
         MemoryLayout ml = MemoryLayouts.BITS_32_LE
                 .withAttribute("MyAttribute", 10L);
-        assertEquals((long) ml.attribute("MyAttribute", Long.class).orElseThrow(), 10L);
+        assertEquals((long) ml.attribute("MyAttribute").orElseThrow(), 10L);
     }
 
     @Test
     public void testAttributeNonExistent() {
         MemoryLayout ml = MemoryLayouts.BITS_32_LE
                 .withAttribute("MyAttribute", 10L);
         assertTrue(ml.attribute("Foo").isEmpty());
     }
 
-    @Test
-    public void testAttributeTypeFilter() {
-        MemoryLayout ml = MemoryLayouts.BITS_32_LE
-                .withAttribute("MyAttribute", 10L);
-        assertTrue(ml.attribute("MyAttribute", Integer.class).isEmpty());
-        assertTrue(ml.attribute("MyAttribute", Long.class).isPresent());
-        assertTrue(ml.attribute("MyAttribute").isPresent());
-    }
-
     @Test
     public void testNameAttribute() {
         MemoryLayout ml = MemoryLayouts.BITS_32_LE
                 .withName("foo");
         assertEquals(ml.name().orElseThrow(), "foo");
-        assertEquals(ml.attribute("name", String.class).orElseThrow(), "foo");
+        assertEquals(ml.attribute("name").orElseThrow(), "foo");
     }
 
     @Test
     public void testAttributesStream() {
         MemoryLayout ml = MemoryLayouts.BITS_32_LE
