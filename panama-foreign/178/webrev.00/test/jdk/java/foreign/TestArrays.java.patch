diff a/test/jdk/java/foreign/TestArrays.java b/test/jdk/java/foreign/TestArrays.java
--- a/test/jdk/java/foreign/TestArrays.java
+++ b/test/jdk/java/foreign/TestArrays.java
@@ -37,10 +37,12 @@
 import java.lang.invoke.VarHandle;
 import java.util.function.BiConsumer;
 import java.util.function.Consumer;
 
 import org.testng.annotations.*;
+
+import static jdk.incubator.foreign.MemorySegment.READ;
 import static org.testng.Assert.*;
 
 public class TestArrays {
 
     static SequenceLayout bytes = MemoryLayout.ofSequence(100,
@@ -114,10 +116,24 @@
         MemorySegment segment = MemorySegment.allocateNative(8);
         segment.close();
         segment.toByteArray();
     }
 
+    @Test(expectedExceptions = UnsupportedOperationException.class)
+    public void testArrayFromHeapSegmentWithoutAccess() {
+        MemorySegment segment = MemorySegment.ofArray(new byte[8]);
+        segment = segment.withAccessModes(segment.accessModes() & ~READ);
+        segment.toByteArray();
+    }
+
+    @Test(expectedExceptions = UnsupportedOperationException.class)
+    public void testArrayFromNativeSegmentWithoutAccess() {
+        MemorySegment segment = MemorySegment.allocateNative(8);
+        segment = segment.withAccessModes(segment.accessModes() & ~READ);
+        segment.toByteArray();
+    }
+
     @DataProvider(name = "arrays")
     public Object[][] nativeAccessOps() {
         Consumer<MemoryAddress> byteInitializer =
                 (base) -> initBytes(base, bytes, (addr, pos) -> byteHandle.set(addr, pos, (byte)(long)pos));
         Consumer<MemoryAddress> charInitializer =
