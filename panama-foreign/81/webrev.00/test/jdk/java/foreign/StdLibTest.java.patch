diff a/test/jdk/java/foreign/StdLibTest.java b/test/jdk/java/foreign/StdLibTest.java
--- a/test/jdk/java/foreign/StdLibTest.java
+++ b/test/jdk/java/foreign/StdLibTest.java
@@ -106,25 +106,24 @@
         assertEquals(stdLibHelper.strlen(s), s.length());
     }
 
     @Test(dataProvider = "instants")
     void test_time(Instant instant) throws Throwable {
-        try (StdLibHelper.Tm tm = stdLibHelper.gmtime(instant.getEpochSecond())) {
-            LocalDateTime localTime = LocalDateTime.ofInstant(instant, ZoneOffset.UTC);
-            assertEquals(tm.sec(), localTime.getSecond());
-            assertEquals(tm.min(), localTime.getMinute());
-            assertEquals(tm.hour(), localTime.getHour());
-            //day pf year in Java has 1-offset
-            assertEquals(tm.yday(), localTime.getDayOfYear() - 1);
-            assertEquals(tm.mday(), localTime.getDayOfMonth());
-            //days of week starts from Sunday in C, but on Monday in Java, also account for 1-offset
-            assertEquals((tm.wday() + 6) % 7, localTime.getDayOfWeek().getValue() - 1);
-            //month in Java has 1-offset
-            assertEquals(tm.mon(), localTime.getMonth().getValue() - 1);
-            assertEquals(tm.isdst(), ZoneOffset.UTC.getRules()
-                    .isDaylightSavings(Instant.ofEpochMilli(instant.getEpochSecond() * 1000)));
-        }
+        StdLibHelper.Tm tm = stdLibHelper.gmtime(instant.getEpochSecond());
+        LocalDateTime localTime = LocalDateTime.ofInstant(instant, ZoneOffset.UTC);
+        assertEquals(tm.sec(), localTime.getSecond());
+        assertEquals(tm.min(), localTime.getMinute());
+        assertEquals(tm.hour(), localTime.getHour());
+        //day pf year in Java has 1-offset
+        assertEquals(tm.yday(), localTime.getDayOfYear() - 1);
+        assertEquals(tm.mday(), localTime.getDayOfMonth());
+        //days of week starts from Sunday in C, but on Monday in Java, also account for 1-offset
+        assertEquals((tm.wday() + 6) % 7, localTime.getDayOfWeek().getValue() - 1);
+        //month in Java has 1-offset
+        assertEquals(tm.mon(), localTime.getMonth().getValue() - 1);
+        assertEquals(tm.isdst(), ZoneOffset.UTC.getRules()
+                .isDaylightSavings(Instant.ofEpochMilli(instant.getEpochSecond() * 1000)));
     }
 
     @Test(dataProvider = "ints")
     void test_qsort(List<Integer> ints) throws Throwable {
         if (ints.size() > 0) {
@@ -259,19 +258,19 @@
                 longHandle.set(time.baseAddress(), arg);
                 return new Tm((MemoryAddress)gmtime.invokeExact(time.baseAddress()));
             }
         }
 
-        static class Tm implements AutoCloseable {
+        static class Tm {
 
             //Tm pointer should never be freed directly, as it points to shared memory
             private MemoryAddress base;
 
             static final long SIZE = 56;
 
             Tm(MemoryAddress base) {
-                this.base = base.rebase(FOREIGN.ofNativeUnchecked(base, SIZE));
+                this.base = FOREIGN.withSize(base, SIZE);
             }
 
             int sec() {
                 return (int)intHandle.get(base);
             }
@@ -298,15 +297,10 @@
             }
             boolean isdst() {
                 byte b = (byte)byteHandle.get(base.addOffset(32));
                 return b == 0 ? false : true;
             }
-
-            @Override
-            public void close() throws Exception {
-                base.segment().close();
-            }
         }
 
         int[] qsort(int[] arr) throws Throwable {
             //init native array
             SequenceLayout seq = MemoryLayout.ofSequence(arr.length, C_INT);
