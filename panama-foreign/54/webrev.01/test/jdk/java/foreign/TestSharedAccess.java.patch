diff a/test/jdk/java/foreign/TestSharedAccess.java b/test/jdk/java/foreign/TestSharedAccess.java
--- a/test/jdk/java/foreign/TestSharedAccess.java
+++ b/test/jdk/java/foreign/TestSharedAccess.java
@@ -41,10 +41,11 @@
 
     static final VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
 
     @Test
     public void testShared() throws Throwable {
+        MemorySegment closedSegment;
         try (MemorySegment s = MemorySegment.allocateNative(4)) {
             setInt(s, 42);
             assertEquals(getInt(s), 42);
             List<Thread> threads = new ArrayList<>();
             for (int i = 0 ; i < 1000 ; i++) {
@@ -60,18 +61,23 @@
                     t.join();
                 } catch (Throwable e) {
                     throw new IllegalStateException(e);
                 }
             });
+            closedSegment = s;
         }
+        assertTrue(closedSegment.source().isReleased());
     }
 
-    @Test(expectedExceptions=IllegalStateException.class)
-    public void testBadCloseWithPendingAcquire() {
-        try (MemorySegment segment = MemorySegment.allocateNative(8)) {
-            segment.acquire();
-        } //should fail here!
+    @Test
+    public void testCloseWithPendingAcquire() {
+        MemorySegment segment = MemorySegment.allocateNative(8);
+        MemorySegment acquired = segment.acquire();
+        segment.close();
+        assertFalse(segment.source().isReleased());
+        acquired.close();
+        assertTrue(segment.source().isReleased());
     }
 
     static int getInt(MemorySegment handle) {
         return (int)intHandle.getVolatile(handle.baseAddress());
     }
