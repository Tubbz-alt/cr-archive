diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
@@ -26,17 +26,20 @@
 
 package jdk.internal.foreign;
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.MemorySource;
 import jdk.internal.access.JavaNioAccess;
 import jdk.internal.access.SharedSecrets;
 import jdk.internal.access.foreign.MemorySegmentProxy;
+import jdk.internal.access.foreign.UnmapperProxy;
 import jdk.internal.misc.Unsafe;
 import jdk.internal.vm.annotation.ForceInline;
 
 import java.nio.ByteBuffer;
+import java.nio.MappedByteBuffer;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
 import java.util.Random;
 
@@ -54,11 +57,10 @@
     private static final int BYTE_ARR_BASE = UNSAFE.arrayBaseOffset(byte[].class);
 
     final long length;
     final int mask;
     final long min;
-    final Object base;
     final Thread owner;
     final MemoryScope scope;
 
     final static int ACCESS_MASK = READ | WRITE | CLOSE | ACQUIRE;
     final static int FIRST_RESERVED_FLAG = 1 << 16; // upper 16 bits are reserved
@@ -66,37 +68,36 @@
 
     final static long NONCE = new Random().nextLong();
 
     final static int DEFAULT_MASK = READ | WRITE | CLOSE | ACQUIRE;
 
-    public MemorySegmentImpl(long min, Object base, long length, Thread owner, MemoryScope scope) {
-        this(min, base, length, DEFAULT_MASK, owner, scope);
+    public MemorySegmentImpl(long min, long length, Thread owner, MemoryScope scope) {
+        this(min, length, DEFAULT_MASK, owner, scope);
     }
 
-    private MemorySegmentImpl(long min, Object base, long length, int mask, Thread owner, MemoryScope scope) {
+    private MemorySegmentImpl(long min, long length, int mask, Thread owner, MemoryScope scope) {
         this.length = length;
         this.mask = length > Integer.MAX_VALUE ? mask : (mask | SMALL);
         this.min = min;
-        this.base = base;
         this.owner = owner;
         this.scope = scope;
     }
 
     // MemorySegment methods
 
     @Override
     public final MemorySegmentImpl asSlice(long offset, long newSize) {
         checkBounds(offset, newSize);
-        return new MemorySegmentImpl(min + offset, base, newSize, mask, owner, scope);
+        return new MemorySegmentImpl(min + offset, newSize, mask, owner, scope);
     }
 
     @Override
     public MemorySegment acquire() {
         if (!isSet(ACQUIRE)) {
             throw unsupportedAccessMode(ACQUIRE);
         }
-        return new MemorySegmentImpl(min, base, length, mask, Thread.currentThread(), scope.acquire());
+        return new MemorySegmentImpl(min, length, mask, Thread.currentThread(), scope.source.acquire());
     }
 
     @Override
     @ForceInline
     public final MemoryAddress baseAddress() {
@@ -108,11 +109,16 @@
         return length;
     }
 
     @Override
     public final boolean isAlive() {
-        return scope.isAliveThreadSafe();
+        return scope.isAlive;
+    }
+
+    @Override
+    public MemorySource source() {
+        return scope.source;
     }
 
     @Override
     public Thread ownerThread() {
         return owner;
@@ -138,12 +144,14 @@
         if (base() != null) {
             if (!(base() instanceof byte[])) {
                 throw new UnsupportedOperationException("Not an address to an heap-allocated byte array");
             }
             _bb = nioAccess.newHeapByteBuffer((byte[]) base(), (int)min - BYTE_ARR_BASE, (int) length, this);
+        } else if (unmapper() != null) {
+            _bb = nioAccess.newMappedByteBuffer(unmapper(), addr() + min, (int) length, null, this);
         } else {
-            _bb = nioAccess.newDirectByteBuffer(min, (int) length, null, this);
+            _bb = nioAccess.newDirectByteBuffer(addr() + min, (int) length, null, this);
         }
         if (!isSet(WRITE)) {
             //scope is IMMUTABLE - obtain a RO byte buffer
             _bb = _bb.asReadOnlyBuffer();
         }
@@ -154,11 +162,11 @@
     public MemorySegment withAccessModes(int accessModes) {
         checkAccessModes(accessModes);
         if ((~accessModes() & accessModes) != 0) {
             throw new UnsupportedOperationException("Cannot acquire more access modes");
         }
-        return new MemorySegmentImpl(min, base, length, accessModes, owner, scope);
+        return new MemorySegmentImpl(min, length, accessModes, owner, scope);
     }
 
     @Override
     public boolean hasAccessModes(int accessModes) {
         checkAccessModes(accessModes);
@@ -190,11 +198,13 @@
     @Override
     public final void checkValidState() {
         if (owner != Thread.currentThread()) {
             throw new IllegalStateException("Attempt to access segment outside owning thread");
         }
-        scope.checkAliveConfined();
+        if (!scope.isAlive) {
+            throw new IllegalStateException("Scope is not alive");
+        }
     }
 
     boolean isSmall() {
         return isSet(SMALL);
     }
@@ -216,12 +226,20 @@
             throw unsupportedAccessMode(READ);
         }
         checkBounds(offset, length);
     }
 
+    long addr() {
+        return scope.source.unsafeAddress();
+    }
+
+    UnmapperProxy unmapper() {
+        return scope.source.unmapper();
+    }
+
     Object base() {
-        return base;
+        return scope.source.unsafeBase();
     }
 
     private boolean isSet(int mask) {
         return (this.mask & mask) != 0;
     }
@@ -280,9 +298,9 @@
                         this, offset, length));
     }
 
     private int id() {
         //compute a stable and random id for this memory segment
-        return Math.abs(Objects.hash(base, min, NONCE));
+        return Math.abs(Objects.hash(scope.source.unsafeBase(), min, NONCE));
     }
 
 }
