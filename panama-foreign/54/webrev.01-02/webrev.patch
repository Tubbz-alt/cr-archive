diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MappedMemorySource.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MappedMemorySource.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MappedMemorySource.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MappedMemorySource.java
@@ -26,11 +26,11 @@
 package jdk.incubator.foreign;
 
 /**
  * A mapped memory source describes an underlying memory region which is memory-mapped from a given path.
  * As such, it provides additional operations to allow for syncing the contents of the mapped memory source with
- * the ones of the underlying file backing the memory mapping (see {@link #force()} and {@link #force(MemorySegment)}).
+ * that of the underlying file backing the memory mapping (see {@link #force()} and {@link #force(MemorySegment)}).
  *
  * @apiNote In the future, if the Java language permits, {@link MemorySource}
  * may become a {@code sealed} interface, which would prohibit subclassing except by
  * explicitly permitted types.
  */
@@ -45,11 +45,11 @@
      * invoked, will have been written to that device.
      *
      * <p> If the path associated to this memory source does not reside on a local device,
      * then no such guarantee is made.
      *
-     * <p> If this the map mode associated with this memory source is not ({@link
+     * <p> If the map mode associated with this memory source is not ({@link
      * java.nio.channels.FileChannel.MapMode#READ_WRITE}) then invoking this method may have no effect.
      * This method may or may not have an effect for implementation-specific mapping modes.</p>
      *
      * @throws IllegalStateException if the memory region backing this memory source has already been released (see
      * {@link #isReleased()}).
@@ -74,8 +74,9 @@
      *
      * @param segment the memory segment whose contents are to be written back to storage.
      *
      * @throws IllegalStateException if the memory region backing this memory source has already been released (see
      * {@link #isReleased()}).
+     * @throws IllegalArgumentException if {@code segment} is not derived from this memory source.
      */
     void force(MemorySegment segment);
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySource.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySource.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySource.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySource.java
@@ -56,16 +56,37 @@
      * @return {@code true}, if this memory source been released.
      */
     boolean isReleased();
 
     /**
-     * Register this memory source against a {@link java.lang.ref.Cleaner}; this means that when all memory segments
+     * Registers this memory source against a {@link java.lang.ref.Cleaner}; this means that when all memory segments
      * backed by this memory sources become unreacheable, this memory source will be automatically released.
      */
     void registerCleaner();
 
     /**
      * Obtains the size (in bytes) of this memory source.
      * @return the size (in bytes) of this memory source.
      */
     long byteSize();
+
+    /**
+     * Is this a memory source backed by off-heap memory?
+     * @return true, if this is either a native or mapped memory source.
+     */
+    boolean isNative();
+
+    /**
+     * Return the raw native address from a {@link MemoryAddress} instance associated with this memory source.
+     * @return the raw native address associated with {@code address}.
+     * @throws UnsupportedOperationException if {@link #isNative()} returns {@code false}.
+     * @throws IllegalArgumentException if {@code address} is not associated with this memory source.
+     */
+    long address(MemoryAddress address);
+
+    /**
+     * Return the base object associated with this heap memory source.
+     * @return the base object associated with this heap memory source.
+     * @throws UnsupportedOperationException if {@link #isNative()} returns {@code true}.
+     */
+    Object base();
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- *  Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- *  This code is free software; you can redistribute it and/or modify it
- *  under the terms of the GNU General Public License version 2 only, as
- *  published by the Free Software Foundation.  Oracle designates this
- *  particular file as subject to the "Classpath" exception as provided
- *  by Oracle in the LICENSE file that accompanied this code.
- *
- *  This code is distributed in the hope that it will be useful, but WITHOUT
- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- *  version 2 for more details (a copy is included in the LICENSE file that
- *  accompanied this code).
- *
- *  You should have received a copy of the GNU General Public License version
- *  2 along with this work; if not, write to the Free Software Foundation,
- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- *  or visit www.oracle.com if you need additional information or have any
- *  questions.
- *
- */
-
-package jdk.incubator.foreign.unsafe;
-
-import jdk.incubator.foreign.MemoryAddress;
-import jdk.internal.foreign.MemoryAddressImpl;
-
-/**
- * Unsafe methods to allow interop between sun.misc.unsafe and memory access API.
- */
-public final class ForeignUnsafe {
-
-    private ForeignUnsafe() {
-        //just the one, please
-    }
-
-    // The following methods can be used in conjunction with the java.foreign API.
-
-    /**
-     * Obtain the base object (if any) associated with this address. This can be used in conjunction with
-     * {@link #getUnsafeOffset(MemoryAddress)} in order to obtain a base/offset addressing coordinate pair
-     * to be used with methods like {@link sun.misc.Unsafe#getInt(Object, long)} and the likes.
-     *
-     * @param address the address whose base object is to be obtained.
-     * @return the base object associated with the address, or {@code null}.
-     */
-    public static Object getUnsafeBase(MemoryAddress address) {
-        return ((MemoryAddressImpl)address).unsafeGetBase();
-    }
-
-    /**
-     * Obtain the offset associated with this address. If {@link #getUnsafeBase(MemoryAddress)} returns {@code null} on the passed
-     * address, then the offset is to be interpreted as the (absolute) numerical value associated said address.
-     * Alternatively, the offset represents the displacement of a field or an array element within the containing
-     * base object. This can be used in conjunction with {@link #getUnsafeBase(MemoryAddress)} in order to obtain a base/offset
-     * addressing coordinate pair to be used with methods like {@link sun.misc.Unsafe#getInt(Object, long)} and the likes.
-     *
-     * @param address the address whose offset is to be obtained.
-     * @return the offset associated with the address.
-     */
-    public static long getUnsafeOffset(MemoryAddress address) {
-        return ((MemoryAddressImpl)address).unsafeGetOffset();
-    }
-}
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySourceImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySourceImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySourceImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySourceImpl.java
@@ -24,10 +24,11 @@
  */
 
 package jdk.internal.foreign;
 
 import jdk.incubator.foreign.MappedMemorySource;
+import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.MemorySource;
 import jdk.internal.access.foreign.UnmapperProxy;
 import jdk.internal.ref.CleanerFactory;
 import jdk.internal.ref.PhantomCleanable;
@@ -158,19 +159,40 @@
                 }
             }
         }
     }
 
+    void checkSegmentSource(MemorySegment segment) {
+        if (segment.source() != this) {
+            throw new IllegalArgumentException("Segment does not belong to this memory source");
+        }
+    }
+
     public static class OfHeap extends MemorySourceImpl {
 
         final Object base;
 
         public OfHeap(long size, Object base, Object ref, Runnable cleanupAction) {
             super(size, ref, cleanupAction);
             this.base = base;
         }
 
+        @Override
+        public boolean isNative() {
+            return false;
+        }
+
+        @Override
+        public Object base() {
+            return unsafeBase();
+        }
+
+        @Override
+        public long address(MemoryAddress address) {
+            throw new UnsupportedOperationException("Not a native memory source");
+        }
+
         @Override
         Object unsafeBase() {
             return base;
         }
     }
@@ -182,42 +204,50 @@
         public OfNative(long addr, long size, Object ref, Runnable cleanupAction) {
             super(size, ref, cleanupAction);
             this.addr = addr;
         }
 
+        @Override
+        public boolean isNative() {
+            return true;
+        }
+
+        @Override
+        public long address(MemoryAddress address) {
+            checkSegmentSource(address.segment());
+            return address.offset() + ((MemorySegmentImpl)address.segment()).min + unsafeAddress();
+        }
+
+        @Override
+        public Object base() {
+            throw new UnsupportedOperationException("Not a heap memory source");
+        }
+
         @Override
         long unsafeAddress() {
             return addr;
         }
     }
 
-    public static class OfMapped extends MemorySourceImpl implements MappedMemorySource {
+    public static class OfMapped extends OfNative implements MappedMemorySource {
 
         final UnmapperProxy unmapperProxy;
 
         public OfMapped(UnmapperProxy unmapperProxy, long size, Object ref, Runnable cleanupAction) {
-            super(size, ref, cleanupAction);
+            super(unmapperProxy.address(), size, ref, cleanupAction);
             this.unmapperProxy = unmapperProxy;
         }
 
-        @Override
-        long unsafeAddress() {
-            return unmapperProxy.address();
-        }
-
         @Override
         public void force() {
             try (MemorySegment segment = new MemorySegmentImpl(0L, size, Thread.currentThread(), acquire())) {
                 force(segment);
             }
         }
 
         @Override
         public void force(MemorySegment segment) {
-            if (segment.source() instanceof MappedMemorySource) {
-                ((MappedByteBuffer)segment.asByteBuffer()).force();
-            } else {
-                throw new IllegalArgumentException("Not a mapped memory segment");
-            }
+            checkSegmentSource(segment);
+            ((MappedByteBuffer)segment.asByteBuffer()).force();
         }
     }
 }
diff a/test/jdk/java/foreign/TestCleaner.java b/test/jdk/java/foreign/TestCleaner.java
--- a/test/jdk/java/foreign/TestCleaner.java
+++ b/test/jdk/java/foreign/TestCleaner.java
@@ -2,13 +2,11 @@
  * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
+ * published by the Free Software Foundation.
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
diff a/test/jdk/java/foreign/TestNative.java b/test/jdk/java/foreign/TestNative.java
--- a/test/jdk/java/foreign/TestNative.java
+++ b/test/jdk/java/foreign/TestNative.java
@@ -23,18 +23,17 @@
  */
 
 /*
  * @test
  * @modules java.base/jdk.internal.misc
- *          jdk.incubator.foreign/jdk.incubator.foreign.unsafe
+ *          jdk.incubator.foreign
  * @run testng TestNative
  */
 
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayout.PathElement;
-import jdk.incubator.foreign.unsafe.ForeignUnsafe;
 import jdk.internal.misc.Unsafe;
 import org.testng.annotations.*;
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
@@ -116,11 +115,11 @@
         ByteBuffer bb = base.segment().asSlice(base.offset(), (int)layout.byteSize()).asByteBuffer();
         Z z = bufferFactory.apply(bb);
         for (long i = 0 ; i < nelems ; i++) {
             Object handleValue = handleExtractor.apply(base, i);
             Object bufferValue = nativeBufferExtractor.apply(z, (int)i);
-            Object rawValue = nativeRawExtractor.apply(ForeignUnsafe.getUnsafeOffset(base), (int)i);
+            Object rawValue = nativeRawExtractor.apply(base.segment().source().address(base), (int)i);
             if (handleValue instanceof Number) {
                 assertEquals(((Number)handleValue).longValue(), i);
                 assertEquals(((Number)bufferValue).longValue(), i);
                 assertEquals(((Number)rawValue).longValue(), i);
             } else {
diff a/test/jdk/java/foreign/TestSegments.java b/test/jdk/java/foreign/TestSegments.java
--- a/test/jdk/java/foreign/TestSegments.java
+++ b/test/jdk/java/foreign/TestSegments.java
@@ -90,10 +90,45 @@
         VarHandle byteHandle = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)
                 .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());
         try (MemorySegment segment = MemorySegment.allocateNative(1000)) {
             for (long i = 0 ; i < segment.byteSize() ; i++) {
                 assertEquals(0, (byte)byteHandle.get(segment.baseAddress(), i));
+            }
+        }
+    }
+
+    @Test
+    public void testHeapSource() {
+        int[] arr = { 1, 2, 3};
+        MemorySegment segment = MemorySegment.ofArray(arr);
+        assertFalse(segment.source().isNative());
+        assertEquals(segment.source().base(), arr);
+        try {
+            segment.source().address(segment.baseAddress()); //should not work - not a native segment
+            fail();
+        } catch (UnsupportedOperationException ex) {
+            //ok
+        }
+    }
+
+    @Test
+    public void testNativeSource() {
+        try (MemorySegment segment = MemorySegment.allocateNative(4);
+             MemorySegment other = MemorySegment.allocateNative(4)) {
+            assertTrue(segment.source().isNative());
+            segment.source().address(segment.baseAddress()); //should work
+            try {
+                other.source().address(segment.baseAddress()); //should not work - wrong segment
+                fail();
+            } catch (IllegalArgumentException ex) {
+                //ok
+            }
+            try {
+                segment.source().base(); //should not work - not a heap segment
+                fail();
+            } catch (UnsupportedOperationException ex) {
+                //ok
             }
         }
     }
 
     @Test
