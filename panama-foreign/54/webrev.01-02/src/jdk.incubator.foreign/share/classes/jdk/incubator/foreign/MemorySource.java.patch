diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySource.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySource.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySource.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySource.java
@@ -56,16 +56,37 @@
      * @return {@code true}, if this memory source been released.
      */
     boolean isReleased();
 
     /**
-     * Register this memory source against a {@link java.lang.ref.Cleaner}; this means that when all memory segments
+     * Registers this memory source against a {@link java.lang.ref.Cleaner}; this means that when all memory segments
      * backed by this memory sources become unreacheable, this memory source will be automatically released.
      */
     void registerCleaner();
 
     /**
      * Obtains the size (in bytes) of this memory source.
      * @return the size (in bytes) of this memory source.
      */
     long byteSize();
+
+    /**
+     * Is this a memory source backed by off-heap memory?
+     * @return true, if this is either a native or mapped memory source.
+     */
+    boolean isNative();
+
+    /**
+     * Return the raw native address from a {@link MemoryAddress} instance associated with this memory source.
+     * @return the raw native address associated with {@code address}.
+     * @throws UnsupportedOperationException if {@link #isNative()} returns {@code false}.
+     * @throws IllegalArgumentException if {@code address} is not associated with this memory source.
+     */
+    long address(MemoryAddress address);
+
+    /**
+     * Return the base object associated with this heap memory source.
+     * @return the base object associated with this heap memory source.
+     * @throws UnsupportedOperationException if {@link #isNative()} returns {@code true}.
+     */
+    Object base();
 }
