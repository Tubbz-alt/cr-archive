diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySourceImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySourceImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySourceImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySourceImpl.java
@@ -24,10 +24,11 @@
  */
 
 package jdk.internal.foreign;
 
 import jdk.incubator.foreign.MappedMemorySource;
+import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.MemorySource;
 import jdk.internal.access.foreign.UnmapperProxy;
 import jdk.internal.ref.CleanerFactory;
 import jdk.internal.ref.PhantomCleanable;
@@ -158,19 +159,40 @@
                 }
             }
         }
     }
 
+    void checkSegmentSource(MemorySegment segment) {
+        if (segment.source() != this) {
+            throw new IllegalArgumentException("Segment does not belong to this memory source");
+        }
+    }
+
     public static class OfHeap extends MemorySourceImpl {
 
         final Object base;
 
         public OfHeap(long size, Object base, Object ref, Runnable cleanupAction) {
             super(size, ref, cleanupAction);
             this.base = base;
         }
 
+        @Override
+        public boolean isNative() {
+            return false;
+        }
+
+        @Override
+        public Object base() {
+            return unsafeBase();
+        }
+
+        @Override
+        public long address(MemoryAddress address) {
+            throw new UnsupportedOperationException("Not a native memory source");
+        }
+
         @Override
         Object unsafeBase() {
             return base;
         }
     }
@@ -182,42 +204,50 @@
         public OfNative(long addr, long size, Object ref, Runnable cleanupAction) {
             super(size, ref, cleanupAction);
             this.addr = addr;
         }
 
+        @Override
+        public boolean isNative() {
+            return true;
+        }
+
+        @Override
+        public long address(MemoryAddress address) {
+            checkSegmentSource(address.segment());
+            return address.offset() + ((MemorySegmentImpl)address.segment()).min + unsafeAddress();
+        }
+
+        @Override
+        public Object base() {
+            throw new UnsupportedOperationException("Not a heap memory source");
+        }
+
         @Override
         long unsafeAddress() {
             return addr;
         }
     }
 
-    public static class OfMapped extends MemorySourceImpl implements MappedMemorySource {
+    public static class OfMapped extends OfNative implements MappedMemorySource {
 
         final UnmapperProxy unmapperProxy;
 
         public OfMapped(UnmapperProxy unmapperProxy, long size, Object ref, Runnable cleanupAction) {
-            super(size, ref, cleanupAction);
+            super(unmapperProxy.address(), size, ref, cleanupAction);
             this.unmapperProxy = unmapperProxy;
         }
 
-        @Override
-        long unsafeAddress() {
-            return unmapperProxy.address();
-        }
-
         @Override
         public void force() {
             try (MemorySegment segment = new MemorySegmentImpl(0L, size, Thread.currentThread(), acquire())) {
                 force(segment);
             }
         }
 
         @Override
         public void force(MemorySegment segment) {
-            if (segment.source() instanceof MappedMemorySource) {
-                ((MappedByteBuffer)segment.asByteBuffer()).force();
-            } else {
-                throw new IllegalArgumentException("Not a mapped memory segment");
-            }
+            checkSegmentSource(segment);
+            ((MappedByteBuffer)segment.asByteBuffer()).force();
         }
     }
 }
