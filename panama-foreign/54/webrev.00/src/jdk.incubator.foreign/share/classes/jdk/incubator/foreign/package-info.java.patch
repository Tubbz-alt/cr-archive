diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/package-info.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/package-info.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/package-info.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/package-info.java
@@ -57,14 +57,13 @@
  * memory access var handles, e.g. using <a href="MemoryLayout.html#layout-paths"><em>layout paths</em></a>.
  *
  * <h2><a id="deallocation"></a>Deterministic deallocation</h2>
  *
  * When writing code that manipulates memory segments, especially if backed by memory which resides outside the Java heap, it is
- * crucial that the resources associated with a memory segment are released when the segment is no longer in use, by calling the {@link jdk.incubator.foreign.MemorySegment#close()}
- * method either explicitly, or implicitly, by relying on try-with-resources construct (as demonstrated in the example above).
- * Closing a given memory segment is an <em>atomic</em> operation which can either succeed - and result in the underlying
- * memory associated with the segment to be released, or <em>fail</em> with an exception.
+ * crucial that the memory source associated with a memory segment is <a href="MemorySource.html#releasing-sources">released</a>
+ * when the segment is no longer in use; this is achieved by calling the {@link jdk.incubator.foreign.MemorySegment#close()} method,
+ * either explicitly, or implicitly, by relying on try-with-resources construct (as demonstrated in the example above).
  * <p>
  * The deterministic deallocation model differs significantly from the implicit strategies adopted within other APIs, most
  * notably the {@link java.nio.ByteBuffer} API: in that case, when a native byte buffer is created (see {@link java.nio.ByteBuffer#allocateDirect(int)}),
  * the underlying memory is not released until the byte buffer reference becomes <em>unreachable</em>. While implicit deallocation
  * models such as this can be very convenient - clients do not have to remember to <em>close</em> a direct buffer - such models can also make it
