diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -276,11 +276,11 @@
      * <p>
      * The resulting memory segment keeps a reference to the backing array, to ensure it remains <em>reachable</em>
      * for the life-time of the segment.
      *
      * @param arr the primitive array backing the array memory segment.
-     * @return a new memory segment backed by an heap memory source.
+     * @return a new memory segment backed by a heap memory source.
      */
     static MemorySegment ofArray(byte[] arr) {
         return Utils.makeArraySegment(arr);
     }
 
@@ -302,11 +302,11 @@
      * <p>
      * The resulting memory segment keeps a reference to the backing array, to ensure it remains <em>reachable</em>
      * for the life-time of the segment.
      *
      * @param arr the primitive array backing the array memory segment.
-     * @return a new memory segment backed by an heap memory source.
+     * @return a new memory segment backed by a heap memory source.
      */
     static MemorySegment ofArray(short[] arr) {
         return Utils.makeArraySegment(arr);
     }
 
@@ -328,11 +328,11 @@
      * <p>
      * The resulting memory segment keeps a reference to the backing array, to ensure it remains <em>reachable</em>
      * for the life-time of the segment.
      *
      * @param arr the primitive array backing the array memory segment.
-     * @return a new memory segment backed by an heap memory source.
+     * @return a new memory segment backed by a heap memory source.
      */
     static MemorySegment ofArray(float[] arr) {
         return Utils.makeArraySegment(arr);
     }
 
@@ -354,11 +354,11 @@
      * <p>
      * The resulting memory segment keeps a reference to the backing array, to ensure it remains <em>reachable</em>
      * for the life-time of the segment.
      *
      * @param arr the primitive array backing the array memory segment.
-     * @return a new memory segment backed by an heap memory source.
+     * @return a new memory segment backed by a heap memory source.
      */
     static MemorySegment ofArray(double[] arr) {
         return Utils.makeArraySegment(arr);
     }
 
