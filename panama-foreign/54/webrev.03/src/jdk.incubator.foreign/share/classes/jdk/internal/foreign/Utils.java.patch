diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
@@ -26,10 +26,11 @@
 
 package jdk.internal.foreign;
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.MemorySource;
 import jdk.internal.access.JavaNioAccess;
 import jdk.internal.access.SharedSecrets;
 import jdk.internal.access.foreign.MemoryAddressProxy;
 import jdk.internal.access.foreign.UnmapperProxy;
 import jdk.internal.misc.Unsafe;
@@ -40,10 +41,11 @@
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
 import java.nio.ByteBuffer;
+import java.nio.MappedByteBuffer;
 import java.nio.channels.FileChannel;
 import java.nio.file.OpenOption;
 import java.nio.file.Path;
 import java.nio.file.StandardOpenOption;
 import java.util.function.Supplier;
@@ -98,12 +100,12 @@
         long buf = unsafe.allocateMemory(alignedSize);
         if (!skipZeroMemory) {
             unsafe.setMemory(buf, alignedSize, (byte)0);
         }
         long alignedBuf = Utils.alignUp(buf, alignmentBytes);
-        MemoryScope scope = new MemoryScope(null, () -> unsafe.freeMemory(buf));
-        MemorySegment segment = new MemorySegmentImpl(buf, null, alignedSize, Thread.currentThread(), scope);
+        MemorySourceImpl source = new MemorySourceImpl.OfNative(buf, alignedSize, null, () -> unsafe.freeMemory(buf));
+        MemorySegment segment = new MemorySegmentImpl(0, alignedSize, Thread.currentThread(), source.acquire());
         if (alignedBuf != buf) {
             long delta = alignedBuf - buf;
             segment = segment.asSlice(delta, bytesSize);
         }
         return segment;
@@ -136,32 +138,41 @@
     public static MemorySegment makeArraySegment(double[] arr) {
         return makeArraySegment(arr, arr.length, Unsafe.ARRAY_DOUBLE_BASE_OFFSET, Unsafe.ARRAY_DOUBLE_INDEX_SCALE);
     }
 
     private static MemorySegment makeArraySegment(Object arr, int size, int base, int scale) {
-        MemoryScope scope = new MemoryScope(null, null);
-        return new MemorySegmentImpl(base, arr, size * scale, Thread.currentThread(), scope);
+        MemorySourceImpl source = new MemorySourceImpl.OfHeap(size, arr, null, null);
+        return new MemorySegmentImpl(base,  size * scale, Thread.currentThread(), source.acquire());
     }
 
     public static MemorySegment makeBufferSegment(ByteBuffer bb) {
-        long bbAddress = javaNioAccess.getBufferAddress(bb);
-        Object base = javaNioAccess.getBufferBase(bb);
-
         int pos = bb.position();
         int limit = bb.limit();
-
-        MemoryScope bufferScope = new MemoryScope(bb, null);
-        return new MemorySegmentImpl(bbAddress + pos, base, limit - pos, Thread.currentThread(), bufferScope);
+        int cap = bb.capacity();
+        long bbAddress = javaNioAccess.getBufferAddress(bb);
+        Object base = javaNioAccess.getBufferBase(bb);
+        UnmapperProxy unmapper = javaNioAccess.unmapper(bb);
+
+        if (unmapper != null) {
+            MemorySourceImpl source = new MemorySourceImpl.OfMapped(unmapper, cap, bb, null);
+            return new MemorySegmentImpl(pos, limit - pos, Thread.currentThread(), source.acquire());
+        } else if (base == null) {
+            MemorySourceImpl source = new MemorySourceImpl.OfNative(bbAddress, cap, bb, null);
+            return new MemorySegmentImpl(pos, limit - pos, Thread.currentThread(), source.acquire());
+        } else {
+            MemorySourceImpl source = new MemorySourceImpl.OfHeap(cap, base, bb, null);
+            return new MemorySegmentImpl(bbAddress + pos, limit - pos, Thread.currentThread(), source.acquire());
+        }
     }
 
     // create and map a file into a fresh segment
     public static MemorySegment makeMappedSegment(Path path, long bytesSize, FileChannel.MapMode mapMode) throws IOException {
         if (bytesSize <= 0) throw new IllegalArgumentException("Requested bytes size must be > 0.");
         try (FileChannelImpl channelImpl = (FileChannelImpl)FileChannel.open(path, openOptions(mapMode))) {
             UnmapperProxy unmapperProxy = channelImpl.mapInternal(mapMode, 0L, bytesSize);
-            MemoryScope scope = new MemoryScope(null, unmapperProxy::unmap);
-            return new MemorySegmentImpl(unmapperProxy.address(), null, bytesSize, Thread.currentThread(), scope);
+            MemorySourceImpl source = new MemorySourceImpl.OfMapped(unmapperProxy, bytesSize, null, unmapperProxy::unmap);
+            return new MemorySegmentImpl(0L, bytesSize, Thread.currentThread(), source.acquire());
         }
     }
 
     private static OpenOption[] openOptions(FileChannel.MapMode mapMode) {
         if (mapMode == FileChannel.MapMode.READ_ONLY) {
