diff a/src/java.base/share/classes/java/nio/Buffer.java b/src/java.base/share/classes/java/nio/Buffer.java
--- a/src/java.base/share/classes/java/nio/Buffer.java
+++ b/src/java.base/share/classes/java/nio/Buffer.java
@@ -27,10 +27,11 @@
 
 import jdk.internal.HotSpotIntrinsicCandidate;
 import jdk.internal.access.JavaNioAccess;
 import jdk.internal.access.SharedSecrets;
 import jdk.internal.access.foreign.MemorySegmentProxy;
+import jdk.internal.access.foreign.UnmapperProxy;
 import jdk.internal.misc.Unsafe;
 import jdk.internal.vm.annotation.ForceInline;
 
 import java.util.Spliterator;
 
@@ -765,10 +766,15 @@
                 @Override
                 public ByteBuffer newDirectByteBuffer(long addr, int cap, Object obj, MemorySegmentProxy segment) {
                     return new DirectByteBuffer(addr, cap, obj, segment);
                 }
 
+                @Override
+                public ByteBuffer newMappedByteBuffer(UnmapperProxy unmapperProxy, long addr, int cap, Object obj, MemorySegmentProxy segment) {
+                    return new DirectByteBuffer(addr, cap, obj, unmapperProxy.fileDescriptor(), unmapperProxy.isSync(), segment);
+                }
+
                 @Override
                 public ByteBuffer newHeapByteBuffer(byte[] hb, int offset, int capacity, MemorySegmentProxy segment) {
                     return new HeapByteBuffer(hb, offset, capacity, segment);
                 }
 
@@ -780,10 +786,19 @@
                 @Override
                 public long getBufferAddress(ByteBuffer bb) {
                     return bb.address;
                 }
 
+                @Override
+                public UnmapperProxy unmapper(ByteBuffer bb) {
+                    if (bb instanceof MappedByteBuffer) {
+                        return ((MappedByteBuffer)bb).unmapper();
+                    } else {
+                        return null;
+                    }
+                }
+
                 @Override
                 public void checkSegment(Buffer buffer) {
                     buffer.checkSegment();
                 }
             });
