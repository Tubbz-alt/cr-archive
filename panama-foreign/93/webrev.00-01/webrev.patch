diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeAllocationScope.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeAllocationScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeAllocationScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeAllocationScope.java
@@ -237,16 +237,16 @@
      * Creates a new bounded allocation scope, backed by off-heap memory.
      * @param size the size of the allocation scope.
      * @return a new bounded allocation scope, with given size (in bytes).
      */
     public static NativeAllocationScope boundedScope(long size) {
-        return new BoundedAllocationScope(MemorySegment.allocateNative(size));
+        return new BoundedAllocationScope(size);
     }
 
     /**
      * Creates a new unbounded allocation scope, backed by off-heap memory.
      * @return a new unbounded allocation scope.
      */
     public static NativeAllocationScope unboundedScope() {
-        return new UnboundedAllocationScope(MemorySegment::allocateNative);
+        return new UnboundedAllocationScope();
     }
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/BoundedAllocationScope.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/BoundedAllocationScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/BoundedAllocationScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/BoundedAllocationScope.java
@@ -43,12 +43,12 @@
     @Override
     public long allocatedBytes() {
         return sp;
     }
 
-    public BoundedAllocationScope(MemorySegment segment) {
-        this.segment = segment;
+    public BoundedAllocationScope(long size) {
+        this.segment = MemorySegment.allocateNative(size);
     }
 
     @Override
     public MemoryAddress allocate(long bytesSize, long bytesAlignment) {
         long min = ((MemoryAddressImpl)segment.baseAddress()).unsafeGetOffset();
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/UnboundedAllocationScope.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/UnboundedAllocationScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/UnboundedAllocationScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/UnboundedAllocationScope.java
@@ -35,12 +35,12 @@
 import java.util.function.LongFunction;
 
 public class UnboundedAllocationScope extends NativeAllocationScope {
 
     private static final long BLOCK_SIZE = 4 * 1024;
+    private static final long MAX_ALLOC_SIZE = BLOCK_SIZE / 2;
 
-    private final LongFunction<MemorySegment> segmentFactory;
     private final List<MemorySegment> usedSegments = new ArrayList<>();
     private MemorySegment segment;
     private long sp = 0L;
     private long size = 0L;
 
@@ -52,18 +52,17 @@
     @Override
     public long allocatedBytes() {
         return size;
     }
 
-    public UnboundedAllocationScope(LongFunction<MemorySegment> segmentFactory) {
-        this.segmentFactory = segmentFactory;
-        this.segment = segmentFactory.apply(BLOCK_SIZE);
+    public UnboundedAllocationScope() {
+        this.segment = MemorySegment.allocateNative(BLOCK_SIZE);
     }
 
     @Override
     public MemoryAddress allocate(long bytesSize, long bytesAlignment) {
-        if (bytesSize > BLOCK_SIZE) {
+        if (bytesSize > MAX_ALLOC_SIZE) {
             MemorySegment segment = MemorySegment.allocateNative(bytesSize, bytesAlignment);
             usedSegments.add(segment);
             return segment.withAccessModes(MemorySegment.READ | MemorySegment.WRITE | MemorySegment.ACQUIRE)
                     .baseAddress();
         }
@@ -77,14 +76,14 @@
                 size += Utils.alignUp(bytesSize, bytesAlignment);
                 return slice.baseAddress();
             } catch (IndexOutOfBoundsException ex) {
                 sp = 0L;
                 usedSegments.add(segment);
-                segment = segmentFactory.apply(BLOCK_SIZE);
+                segment = MemorySegment.allocateNative(BLOCK_SIZE);
             }
         }
-        throw new OutOfMemoryError("Allocation request exceeds scope block size");
+        throw new AssertionError("Cannot get here!");
     }
 
     @Override
     public void close() {
         segment.close();
diff a/test/jdk/java/foreign/TestAllocationScope.java b/test/jdk/java/foreign/TestAllocationScope.java
--- a/test/jdk/java/foreign/TestAllocationScope.java
+++ b/test/jdk/java/foreign/TestAllocationScope.java
@@ -86,10 +86,24 @@
                 assertFalse(address.segment().isAlive());
             }
         }
     }
 
+    static final int SIZE_256M = 1024 * 1024 * 256;
+
+    @Test
+    public void testBigAllocationInUnboundedScope() {
+        try (NativeAllocationScope scope = NativeAllocationScope.unboundedScope()) {
+            for (int i = 8 ; i < SIZE_256M ; i *= 8) {
+                MemoryAddress address = scope.allocate(i);
+                //check size
+                assertEquals(address.segment().byteSize(), i);
+                //check alignment
+                assertTrue(address.segment().baseAddress().toRawLongValue() % i == 0);
+            }
+        }
+    }
 
     @DataProvider(name = "allocationScopes")
     static Object[][] allocationScopes() {
         return new Object[][] {
                 { (byte)42, (ScopeFactory) NativeAllocationScope::boundedScope, MemoryLayouts.BITS_8_BE, byte.class,
