diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java
@@ -26,15 +26,18 @@
 
 package jdk.incubator.foreign;
 
 import jdk.internal.foreign.AbstractMemorySegmentImpl;
 import jdk.internal.foreign.AbstractNativeScope;
+import jdk.internal.foreign.Utils;
 import jdk.internal.misc.Unsafe;
 
 import java.lang.invoke.VarHandle;
+import java.lang.reflect.Array;
 import java.nio.ByteOrder;
 import java.util.OptionalLong;
+import java.util.function.Function;
 
 /**
  * This class provides a scope of given size, within which several allocations can be performed. An native scope is backed
  * by off-heap memory. Native scopes can be either <em>bounded</em> or <em>unbounded</em>, depending on whether the size
  * of the native scope is known statically. If an application knows before-hand how much memory it needs to allocate the values it needs,
@@ -188,16 +191,11 @@
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
      * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a byte value.
      */
     public MemoryAddress allocateArray(ValueLayout elementLayout, byte[] array) {
-        if (elementLayout.byteSize() != 1) {
-            throw new IllegalArgumentException("Bad layout size");
-        }
-        MemoryAddress addr = allocate(MemoryLayout.ofSequence(array.length, elementLayout));
-        addr.segment().copyFrom(MemorySegment.ofArray(array));
-        return addr;
+        return copyArrayWithSwapIfNeeded(array, elementLayout, MemorySegment::ofArray);
     }
 
     /**
      * Allocate a block of memory in this native scope with given layout and initialize it with given short array.
      * The address returned by this method is associated with a segment which cannot be closed. Moreover, the returned
@@ -208,20 +206,11 @@
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
      * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a short value.
      */
     public MemoryAddress allocateArray(ValueLayout elementLayout, short[] array) {
-        if (elementLayout.byteSize() != 2) {
-            throw new IllegalArgumentException("Bad layout size");
-        }
-        MemoryAddress addr = allocate(MemoryLayout.ofSequence(array.length, elementLayout));
-        if (elementLayout.order() == ByteOrder.nativeOrder()) {
-            addr.segment().copyFrom(MemorySegment.ofArray(array));
-        } else {
-            ((AbstractMemorySegmentImpl)addr.segment()).copyFromSwap(MemorySegment.ofArray(array), elementLayout.byteSize());
-        }
-        return addr;
+        return copyArrayWithSwapIfNeeded(array, elementLayout, MemorySegment::ofArray);
     }
 
     /**
      * Allocate a block of memory in this native scope with given layout and initialize it with given char array.
      * The address returned by this method is associated with a segment which cannot be closed. Moreover, the returned
@@ -232,20 +221,11 @@
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
      * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a char value.
      */
     public MemoryAddress allocateArray(ValueLayout elementLayout, char[] array) {
-        if (elementLayout.byteSize() != 2) {
-            throw new IllegalArgumentException("Bad layout size");
-        }
-        MemoryAddress addr = allocate(MemoryLayout.ofSequence(array.length, elementLayout));
-        if (elementLayout.order() == ByteOrder.nativeOrder()) {
-            addr.segment().copyFrom(MemorySegment.ofArray(array));
-        } else {
-            ((AbstractMemorySegmentImpl)addr.segment()).copyFromSwap(MemorySegment.ofArray(array), elementLayout.byteSize());
-        }
-        return addr;
+        return copyArrayWithSwapIfNeeded(array, elementLayout, MemorySegment::ofArray);
     }
 
     /**
      * Allocate a block of memory in this native scope with given layout and initialize it with given int array.
      * The address returned by this method is associated with a segment which cannot be closed. Moreover, the returned
@@ -256,20 +236,11 @@
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
      * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a int value.
      */
     public MemoryAddress allocateArray(ValueLayout elementLayout, int[] array) {
-        if (elementLayout.byteSize() != 4) {
-            throw new IllegalArgumentException("Bad layout size");
-        }
-        MemoryAddress addr = allocate(MemoryLayout.ofSequence(array.length, elementLayout));
-        if (elementLayout.order() == ByteOrder.nativeOrder()) {
-            addr.segment().copyFrom(MemorySegment.ofArray(array));
-        } else {
-            ((AbstractMemorySegmentImpl)addr.segment()).copyFromSwap(MemorySegment.ofArray(array), elementLayout.byteSize());
-        }
-        return addr;
+        return copyArrayWithSwapIfNeeded(array, elementLayout, MemorySegment::ofArray);
     }
 
     /**
      * Allocate a block of memory in this native scope with given layout and initialize it with given float array.
      * The address returned by this method is associated with a segment which cannot be closed. Moreover, the returned
@@ -280,20 +251,11 @@
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
      * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a float value.
      */
     public MemoryAddress allocateArray(ValueLayout elementLayout, float[] array) {
-        if (elementLayout.byteSize() != 4) {
-            throw new IllegalArgumentException("Bad layout size");
-        }
-        MemoryAddress addr = allocate(MemoryLayout.ofSequence(array.length, elementLayout));
-        if (elementLayout.order() == ByteOrder.nativeOrder()) {
-            addr.segment().copyFrom(MemorySegment.ofArray(array));
-        } else {
-            ((AbstractMemorySegmentImpl)addr.segment()).copyFromSwap(MemorySegment.ofArray(array), elementLayout.byteSize());
-        }
-        return addr;
+        return copyArrayWithSwapIfNeeded(array, elementLayout, MemorySegment::ofArray);
     }
 
     /**
      * Allocate a block of memory in this native scope with given layout and initialize it with given long array.
      * The address returned by this method is associated with a segment which cannot be closed. Moreover, the returned
@@ -304,20 +266,11 @@
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
      * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a long value.
      */
     public MemoryAddress allocateArray(ValueLayout elementLayout, long[] array) {
-        if (elementLayout.byteSize() != 8) {
-            throw new IllegalArgumentException("Bad layout size");
-        }
-        MemoryAddress addr = allocate(MemoryLayout.ofSequence(array.length, elementLayout));
-        if (elementLayout.order() == ByteOrder.nativeOrder()) {
-            addr.segment().copyFrom(MemorySegment.ofArray(array));
-        } else {
-            ((AbstractMemorySegmentImpl)addr.segment()).copyFromSwap(MemorySegment.ofArray(array), elementLayout.byteSize());
-        }
-        return addr;
+        return copyArrayWithSwapIfNeeded(array, elementLayout, MemorySegment::ofArray);
     }
 
     /**
      * Allocate a block of memory in this native scope with given layout and initialize it with given double array.
      * The address returned by this method is associated with a segment which cannot be closed. Moreover, the returned
@@ -328,18 +281,21 @@
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
      * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
      * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a double value.
      */
     public MemoryAddress allocateArray(ValueLayout elementLayout, double[] array) {
-        if (elementLayout.byteSize() != 8) {
-            throw new IllegalArgumentException("Bad layout size");
-        }
-        MemoryAddress addr = allocate(MemoryLayout.ofSequence(array.length, elementLayout));
-        if (elementLayout.order() == ByteOrder.nativeOrder()) {
-            addr.segment().copyFrom(MemorySegment.ofArray(array));
+        return copyArrayWithSwapIfNeeded(array, elementLayout, MemorySegment::ofArray);
+    }
+
+    private <Z> MemoryAddress copyArrayWithSwapIfNeeded(Z array, ValueLayout elementLayout,
+                                                        Function<Z, MemorySegment> heapSegmentFactory) {
+        Utils.checkPrimitiveCarrierCompat(array.getClass().componentType(), elementLayout);
+        MemoryAddress addr = allocate(MemoryLayout.ofSequence(Array.getLength(array), elementLayout));
+        if (elementLayout.byteSize() == 1 || (elementLayout.order() == ByteOrder.nativeOrder())) {
+            addr.segment().copyFrom(heapSegmentFactory.apply(array));
         } else {
-            ((AbstractMemorySegmentImpl)addr.segment()).copyFromSwap(MemorySegment.ofArray(array), elementLayout.byteSize());
+            ((AbstractMemorySegmentImpl)addr.segment()).copyFromSwap(heapSegmentFactory.apply(array), elementLayout.byteSize());
         }
         return addr;
     }
 
     /**
