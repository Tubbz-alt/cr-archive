diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/NativeScope.java
@@ -24,13 +24,16 @@
  *
  */
 
 package jdk.incubator.foreign;
 
+import jdk.internal.foreign.AbstractMemorySegmentImpl;
 import jdk.internal.foreign.AbstractNativeScope;
+import jdk.internal.misc.Unsafe;
 
 import java.lang.invoke.VarHandle;
+import java.nio.ByteOrder;
 import java.util.OptionalLong;
 
 /**
  * This class provides a scope of given size, within which several allocations can be performed. An native scope is backed
  * by off-heap memory. Native scopes can be either <em>bounded</em> or <em>unbounded</em>, depending on whether the size
@@ -174,35 +177,171 @@
         handle.set(addr, value);
         return addr;
     }
 
     /**
-     * Allocate a block of memory in this native scope with given layout and initialize it with given address value.
+     * Allocate a block of memory in this native scope with given layout and initialize it with given byte array.
      * The address returned by this method is associated with a segment which cannot be closed. Moreover, the returned
      * address must conform to the layout alignment constraints.
-     * @param layout the layout of the block of memory to be allocated.
-     * @param value the value to be set on the newly allocated memory block.
+     * @param elementLayout the element layout of the array to be allocated.
+     * @param array the array to be copied on the newly allocated memory block.
      * @return an address which points to the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
-     * {@code limit() - size() < layout.byteSize()}.
-     * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of an address value.
+     * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
+     * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a byte value.
      */
-    public MemoryAddress allocate(MemoryLayout layout, MemoryAddress value) {
-        VarHandle handle = MemoryHandles.asAddressVarHandle(layout.varHandle(carrierForSize(layout.byteSize())));
-        MemoryAddress addr = allocate(layout);
-        handle.set(addr, value);
+    public MemoryAddress allocateArray(ValueLayout elementLayout, byte[] array) {
+        if (elementLayout.byteSize() != 1) {
+            throw new IllegalArgumentException("Bad layout size");
+        }
+        MemoryAddress addr = allocate(MemoryLayout.ofSequence(array.length, elementLayout));
+        addr.segment().copyFrom(MemorySegment.ofArray(array));
+        return addr;
+    }
+
+    /**
+     * Allocate a block of memory in this native scope with given layout and initialize it with given short array.
+     * The address returned by this method is associated with a segment which cannot be closed. Moreover, the returned
+     * address must conform to the layout alignment constraints.
+     * @param elementLayout the element layout of the array to be allocated.
+     * @param array the array to be copied on the newly allocated memory block.
+     * @return an address which points to the newly allocated memory block.
+     * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
+     * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
+     * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a short value.
+     */
+    public MemoryAddress allocateArray(ValueLayout elementLayout, short[] array) {
+        if (elementLayout.byteSize() != 2) {
+            throw new IllegalArgumentException("Bad layout size");
+        }
+        MemoryAddress addr = allocate(MemoryLayout.ofSequence(array.length, elementLayout));
+        if (elementLayout.order() == ByteOrder.nativeOrder()) {
+            addr.segment().copyFrom(MemorySegment.ofArray(array));
+        } else {
+            ((AbstractMemorySegmentImpl)addr.segment()).copyFromSwap(MemorySegment.ofArray(array), elementLayout.byteSize());
+        }
+        return addr;
+    }
+
+    /**
+     * Allocate a block of memory in this native scope with given layout and initialize it with given char array.
+     * The address returned by this method is associated with a segment which cannot be closed. Moreover, the returned
+     * address must conform to the layout alignment constraints.
+     * @param elementLayout the element layout of the array to be allocated.
+     * @param array the array to be copied on the newly allocated memory block.
+     * @return an address which points to the newly allocated memory block.
+     * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
+     * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
+     * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a char value.
+     */
+    public MemoryAddress allocateArray(ValueLayout elementLayout, char[] array) {
+        if (elementLayout.byteSize() != 2) {
+            throw new IllegalArgumentException("Bad layout size");
+        }
+        MemoryAddress addr = allocate(MemoryLayout.ofSequence(array.length, elementLayout));
+        if (elementLayout.order() == ByteOrder.nativeOrder()) {
+            addr.segment().copyFrom(MemorySegment.ofArray(array));
+        } else {
+            ((AbstractMemorySegmentImpl)addr.segment()).copyFromSwap(MemorySegment.ofArray(array), elementLayout.byteSize());
+        }
         return addr;
     }
 
-    private static Class<?> carrierForSize(long size) {
-        return switch ((int)size) {
-            case 1 -> byte.class;
-            case 2 -> short.class;
-            case 4 -> int.class;
-            case 8 -> long.class;
-            default -> throw new IllegalArgumentException("Bad layout size: " + size);
-        };
+    /**
+     * Allocate a block of memory in this native scope with given layout and initialize it with given int array.
+     * The address returned by this method is associated with a segment which cannot be closed. Moreover, the returned
+     * address must conform to the layout alignment constraints.
+     * @param elementLayout the element layout of the array to be allocated.
+     * @param array the array to be copied on the newly allocated memory block.
+     * @return an address which points to the newly allocated memory block.
+     * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
+     * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
+     * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a int value.
+     */
+    public MemoryAddress allocateArray(ValueLayout elementLayout, int[] array) {
+        if (elementLayout.byteSize() != 4) {
+            throw new IllegalArgumentException("Bad layout size");
+        }
+        MemoryAddress addr = allocate(MemoryLayout.ofSequence(array.length, elementLayout));
+        if (elementLayout.order() == ByteOrder.nativeOrder()) {
+            addr.segment().copyFrom(MemorySegment.ofArray(array));
+        } else {
+            ((AbstractMemorySegmentImpl)addr.segment()).copyFromSwap(MemorySegment.ofArray(array), elementLayout.byteSize());
+        }
+        return addr;
+    }
+
+    /**
+     * Allocate a block of memory in this native scope with given layout and initialize it with given float array.
+     * The address returned by this method is associated with a segment which cannot be closed. Moreover, the returned
+     * address must conform to the layout alignment constraints.
+     * @param elementLayout the element layout of the array to be allocated.
+     * @param array the array to be copied on the newly allocated memory block.
+     * @return an address which points to the newly allocated memory block.
+     * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
+     * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
+     * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a float value.
+     */
+    public MemoryAddress allocateArray(ValueLayout elementLayout, float[] array) {
+        if (elementLayout.byteSize() != 4) {
+            throw new IllegalArgumentException("Bad layout size");
+        }
+        MemoryAddress addr = allocate(MemoryLayout.ofSequence(array.length, elementLayout));
+        if (elementLayout.order() == ByteOrder.nativeOrder()) {
+            addr.segment().copyFrom(MemorySegment.ofArray(array));
+        } else {
+            ((AbstractMemorySegmentImpl)addr.segment()).copyFromSwap(MemorySegment.ofArray(array), elementLayout.byteSize());
+        }
+        return addr;
+    }
+
+    /**
+     * Allocate a block of memory in this native scope with given layout and initialize it with given long array.
+     * The address returned by this method is associated with a segment which cannot be closed. Moreover, the returned
+     * address must conform to the layout alignment constraints.
+     * @param elementLayout the element layout of the array to be allocated.
+     * @param array the array to be copied on the newly allocated memory block.
+     * @return an address which points to the newly allocated memory block.
+     * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
+     * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
+     * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a long value.
+     */
+    public MemoryAddress allocateArray(ValueLayout elementLayout, long[] array) {
+        if (elementLayout.byteSize() != 8) {
+            throw new IllegalArgumentException("Bad layout size");
+        }
+        MemoryAddress addr = allocate(MemoryLayout.ofSequence(array.length, elementLayout));
+        if (elementLayout.order() == ByteOrder.nativeOrder()) {
+            addr.segment().copyFrom(MemorySegment.ofArray(array));
+        } else {
+            ((AbstractMemorySegmentImpl)addr.segment()).copyFromSwap(MemorySegment.ofArray(array), elementLayout.byteSize());
+        }
+        return addr;
+    }
+
+    /**
+     * Allocate a block of memory in this native scope with given layout and initialize it with given double array.
+     * The address returned by this method is associated with a segment which cannot be closed. Moreover, the returned
+     * address must conform to the layout alignment constraints.
+     * @param elementLayout the element layout of the array to be allocated.
+     * @param array the array to be copied on the newly allocated memory block.
+     * @return an address which points to the newly allocated memory block.
+     * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
+     * {@code limit() - size() < (elementLayout.byteSize() * array.length)}.
+     * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a double value.
+     */
+    public MemoryAddress allocateArray(ValueLayout elementLayout, double[] array) {
+        if (elementLayout.byteSize() != 8) {
+            throw new IllegalArgumentException("Bad layout size");
+        }
+        MemoryAddress addr = allocate(MemoryLayout.ofSequence(array.length, elementLayout));
+        if (elementLayout.order() == ByteOrder.nativeOrder()) {
+            addr.segment().copyFrom(MemorySegment.ofArray(array));
+        } else {
+            ((AbstractMemorySegmentImpl)addr.segment()).copyFromSwap(MemorySegment.ofArray(array), elementLayout.byteSize());
+        }
+        return addr;
     }
 
     /**
      * Allocate a block of memory in this native scope with given layout. The address returned by this method is
      * associated with a segment which cannot be closed. Moreover, the returned address must conform to the layout alignment constraints.
@@ -213,10 +352,29 @@
      */
     public MemoryAddress allocate(MemoryLayout layout) {
         return allocate(layout.byteSize(), layout.byteAlignment());
     }
 
+    /**
+     * Allocate a block of memory corresponding to an array with given element layout and size.
+     * The address returned by this method is associated with a segment which cannot be closed.
+     * Moreover, the returned address must conform to the layout alignment constraints. This is equivalent to the
+     * following code:
+     * <pre>{@code
+    allocate(MemoryLayout.ofSequence(size, elementLayout));
+     * }</pre>
+     * @param elementLayout the array element layout.
+     * @param size the array size.
+     * @return an address which points to the newly allocated memory block.
+     * @throws OutOfMemoryError if there is not enough space left in this native scope, that is, if
+     * {@code limit() - size() < (elementLayout.byteSize() * size)}.
+     * @throws IllegalArgumentException if {@code elementLayout.byteSize()} does not conform to the size of a double value.
+     */
+    public MemoryAddress allocateArray(MemoryLayout elementLayout, long size) {
+        return allocate(MemoryLayout.ofSequence(size, elementLayout));
+    }
+
     /**
      * Allocate a block of memory in this native scope with given size. The address returned by this method is
      * associated with a segment which cannot be closed. Moreover, the returned address must be aligned to {@code size}.
      * @param bytesSize the size (in bytes) of the block of memory to be allocated.
      * @return an address which points to the newly allocated memory block.
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
@@ -130,10 +130,20 @@
         UNSAFE.copyMemory(
                 that.base(), that.min(),
                 base(), min(), size);
     }
 
+    public void copyFromSwap(MemorySegment src, long elemSize) {
+        AbstractMemorySegmentImpl that = (AbstractMemorySegmentImpl)src;
+        long size = that.byteSize();
+        checkRange(0, size, true);
+        that.checkRange(0, size, false);
+        UNSAFE.copySwapMemory(
+                that.base(), that.min(),
+                base(), min(), size, elemSize);
+    }
+
     private final static VarHandle BYTE_HANDLE = MemoryLayout.ofSequence(MemoryLayouts.JAVA_BYTE)
             .varHandle(byte.class, MemoryLayout.PathElement.sequenceElement());
 
     @Override
     public long mismatch(MemorySegment other) {
diff a/test/jdk/java/foreign/TestNativeScope.java b/test/jdk/java/foreign/TestNativeScope.java
--- a/test/jdk/java/foreign/TestNativeScope.java
+++ b/test/jdk/java/foreign/TestNativeScope.java
@@ -32,16 +32,25 @@
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryAddress;
 
+import jdk.incubator.foreign.ValueLayout;
 import org.testng.annotations.*;
 
 import java.lang.invoke.VarHandle;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.DoubleBuffer;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+import java.nio.LongBuffer;
+import java.nio.ShortBuffer;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.function.BiFunction;
 import java.util.function.Function;
 
 import static jdk.incubator.foreign.MemorySegment.CLOSE;
 import static jdk.incubator.foreign.MemorySegment.HANDOFF;
 import static org.testng.Assert.*;
@@ -49,18 +58,18 @@
 public class TestNativeScope {
 
     final static int ELEMS = 128;
 
     @Test(dataProvider = "nativeScopes")
-    public <Z> void testAllocation(Z value, ScopeFactory scopeFactory, MemoryLayout layout, Class<?> carrier, AllocationFunction<Z> allocationFunction, Function<MemoryLayout, VarHandle> handleFactory) {
-        MemoryLayout[] layouts = {
+    public <Z> void testAllocation(Z value, ScopeFactory scopeFactory, ValueLayout layout, AllocationFunction<Z> allocationFunction, Function<MemoryLayout, VarHandle> handleFactory) {
+        ValueLayout[] layouts = {
                 layout,
                 layout.withBitAlignment(layout.bitAlignment() * 2),
                 layout.withBitAlignment(layout.bitAlignment() * 4),
                 layout.withBitAlignment(layout.bitAlignment() * 8)
         };
-        for (MemoryLayout alignedLayout : layouts) {
+        for (ValueLayout alignedLayout : layouts) {
             List<MemoryAddress> addressList = new ArrayList<>();
             int elems = ELEMS / ((int)alignedLayout.byteAlignment() / (int)layout.byteAlignment());
             try (NativeScope scope = scopeFactory.make((int)alignedLayout.byteSize() * ELEMS)) {
                 for (int i = 0 ; i < elems ; i++) {
                     MemoryAddress address = allocationFunction.allocate(scope, alignedLayout, value);
@@ -193,110 +202,290 @@
         assertEquals(registered.ownerThread(), scope.ownerThread());
         scope.close();
         assertFalse(registered.isAlive());
     }
 
+    @Test(dataProvider = "arrayScopes")
+    public <Z> void testArray(ScopeFactory scopeFactory, ValueLayout layout, AllocationFunction<Object> allocationFunction, ToArrayHelper<Z> arrayHelper) {
+        Z arr = arrayHelper.array();
+        try (NativeScope scope = scopeFactory.make(100)) {
+            MemoryAddress address = allocationFunction.allocate(scope, layout, arr);
+            Z found = arrayHelper.toArray(address.segment(), layout);
+            assertEquals(found, arr);
+        }
+    }
+
     @DataProvider(name = "nativeScopes")
     static Object[][] nativeScopes() {
         return new Object[][] {
-                { (byte)42, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_8_BE, byte.class,
+                { (byte)42, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_8_BE,
                         (AllocationFunction<Byte>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(byte.class) },
-                { (short)42, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_16_BE, short.class,
+                { (short)42, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_16_BE,
                         (AllocationFunction<Short>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(short.class) },
                 { 42, (ScopeFactory) NativeScope::boundedScope,
-                        MemoryLayouts.BITS_32_BE, int.class,
+                        MemoryLayouts.BITS_32_BE,
                         (AllocationFunction<Integer>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(int.class) },
-                { 42f, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_32_BE, float.class,
+                { 42f, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_32_BE,
                         (AllocationFunction<Float>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(float.class) },
-                { 42L, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_64_BE, long.class,
+                { 42L, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_64_BE,
                         (AllocationFunction<Long>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(long.class) },
-                { 42d, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_64_BE, double.class,
+                { 42d, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_64_BE,
                         (AllocationFunction<Double>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(double.class) },
-                { MemoryAddress.ofLong(42), (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_64_BE, MemoryAddress.class,
-                        (AllocationFunction<MemoryAddress>) NativeScope::allocate,
-                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(long.class)) },
 
-                { (byte)42, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_8_LE, byte.class,
+                { (byte)42, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_8_LE,
                         (AllocationFunction<Byte>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(byte.class) },
-                { (short)42, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_16_LE, short.class,
+                { (short)42, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_16_LE,
                         (AllocationFunction<Short>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(short.class) },
                 { 42, (ScopeFactory) NativeScope::boundedScope,
-                        MemoryLayouts.BITS_32_LE, int.class,
+                        MemoryLayouts.BITS_32_LE,
                         (AllocationFunction<Integer>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(int.class) },
-                { 42f, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_32_LE, float.class,
+                { 42f, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_32_LE,
                         (AllocationFunction<Float>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(float.class) },
-                { 42L, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_64_LE, long.class,
+                { 42L, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_64_LE,
                         (AllocationFunction<Long>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(long.class) },
-                { 42d, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_64_LE, double.class,
+                { 42d, (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_64_LE,
                         (AllocationFunction<Double>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(double.class) },
-                { MemoryAddress.ofLong(42), (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_64_LE, MemoryAddress.class,
-                        (AllocationFunction<MemoryAddress>) NativeScope::allocate,
-                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(long.class)) },
 
-                { (byte)42, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_8_BE, byte.class,
+                { (byte)42, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_8_BE,
                         (AllocationFunction<Byte>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(byte.class) },
-                { (short)42, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_16_BE, short.class,
+                { (short)42, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_16_BE,
                         (AllocationFunction<Short>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(short.class) },
                 { 42, (ScopeFactory)size -> NativeScope.unboundedScope(),
-                        MemoryLayouts.BITS_32_BE, int.class,
+                        MemoryLayouts.BITS_32_BE,
                         (AllocationFunction<Integer>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(int.class) },
-                { 42f, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_32_BE, float.class,
+                { 42f, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_32_BE,
                         (AllocationFunction<Float>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(float.class) },
-                { 42L, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_64_BE, long.class,
+                { 42L, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_64_BE,
                         (AllocationFunction<Long>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(long.class) },
-                { 42d, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_64_BE, double.class,
+                { 42d, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_64_BE,
                         (AllocationFunction<Double>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(double.class) },
-                { MemoryAddress.ofLong(42), (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_64_BE, MemoryAddress.class,
-                        (AllocationFunction<MemoryAddress>) NativeScope::allocate,
-                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(long.class)) },
 
-                { (byte)42, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_8_LE, byte.class,
+                { (byte)42, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_8_LE,
                         (AllocationFunction<Byte>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(byte.class) },
-                { (short)42, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_16_LE, short.class,
+                { (short)42, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_16_LE,
                         (AllocationFunction<Short>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(short.class) },
                 { 42, (ScopeFactory)size -> NativeScope.unboundedScope(),
-                        MemoryLayouts.BITS_32_LE, int.class,
+                        MemoryLayouts.BITS_32_LE,
                         (AllocationFunction<Integer>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(int.class) },
-                { 42f, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_32_LE, float.class,
+                { 42f, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_32_LE,
                         (AllocationFunction<Float>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(float.class) },
-                { 42L, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_64_LE, long.class,
+                { 42L, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_64_LE,
                         (AllocationFunction<Long>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(long.class) },
-                { 42d, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_64_LE, double.class,
+                { 42d, (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_64_LE,
                         (AllocationFunction<Double>) NativeScope::allocate,
                         (Function<MemoryLayout, VarHandle>)l -> l.varHandle(double.class) },
-                { MemoryAddress.ofLong(42), (ScopeFactory)size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_64_LE, MemoryAddress.class,
-                        (AllocationFunction<MemoryAddress>) NativeScope::allocate,
-                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(long.class)) },
+        };
+    }
+
+    @DataProvider(name = "arrayScopes")
+    static Object[][] arrayScopes() {
+        return new Object[][] {
+                { (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_8_LE,
+                        (AllocationFunction<byte[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toByteArray },
+                { (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_16_LE,
+                        (AllocationFunction<short[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toShortArray },
+                { (ScopeFactory) NativeScope::boundedScope,
+                        MemoryLayouts.BITS_32_LE,
+                        (AllocationFunction<int[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toIntArray },
+                { (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_32_LE,
+                        (AllocationFunction<float[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toFloatArray },
+                { (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_64_LE,
+                        (AllocationFunction<long[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toLongArray },
+                { (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_64_LE,
+                        (AllocationFunction<double[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toDoubleArray },
+
+
+                { (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_8_BE,
+                        (AllocationFunction<byte[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toByteArray },
+                { (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_16_BE,
+                        (AllocationFunction<short[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toShortArray },
+                { (ScopeFactory) NativeScope::boundedScope,
+                        MemoryLayouts.BITS_32_BE,
+                        (AllocationFunction<int[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toIntArray },
+                { (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_32_BE,
+                        (AllocationFunction<float[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toFloatArray },
+                { (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_64_BE,
+                        (AllocationFunction<long[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toLongArray },
+                { (ScopeFactory) NativeScope::boundedScope, MemoryLayouts.BITS_64_BE,
+                        (AllocationFunction<double[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toDoubleArray },
+
+                { (ScopeFactory) size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_8_LE,
+                        (AllocationFunction<byte[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toByteArray },
+                { (ScopeFactory) size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_16_LE,
+                        (AllocationFunction<short[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toShortArray },
+                { (ScopeFactory) size -> NativeScope.unboundedScope(),
+                        MemoryLayouts.BITS_32_LE,
+                        (AllocationFunction<int[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toIntArray },
+                { (ScopeFactory) size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_32_LE,
+                        (AllocationFunction<float[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toFloatArray },
+                { (ScopeFactory) size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_64_LE,
+                        (AllocationFunction<long[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toLongArray },
+                { (ScopeFactory) size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_64_LE,
+                        (AllocationFunction<double[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toDoubleArray },
+
+
+                { (ScopeFactory) size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_8_BE,
+                        (AllocationFunction<byte[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toByteArray },
+                { (ScopeFactory) size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_16_BE,
+                        (AllocationFunction<short[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toShortArray },
+                { (ScopeFactory) size -> NativeScope.unboundedScope(),
+                        MemoryLayouts.BITS_32_BE,
+                        (AllocationFunction<int[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toIntArray },
+                { (ScopeFactory) size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_32_BE,
+                        (AllocationFunction<float[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toFloatArray },
+                { (ScopeFactory) size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_64_BE,
+                        (AllocationFunction<long[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toLongArray },
+                { (ScopeFactory) size -> NativeScope.unboundedScope(), MemoryLayouts.BITS_64_BE,
+                        (AllocationFunction<double[]>) NativeScope::allocateArray,
+                        ToArrayHelper.toDoubleArray },
         };
     }
 
     interface AllocationFunction<X> {
-        MemoryAddress allocate(NativeScope scope, MemoryLayout layout, X value);
+        MemoryAddress allocate(NativeScope scope, ValueLayout layout, X value);
     }
 
     interface ScopeFactory {
         NativeScope make(int size);
     }
+
+    interface ToArrayHelper<T> {
+        T array();
+        T toArray(MemorySegment segment, ValueLayout layout);
+
+        ToArrayHelper<byte[]> toByteArray = new ToArrayHelper<>() {
+            @Override
+            public byte[] array() {
+                return new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
+            }
+
+            @Override
+            public byte[] toArray(MemorySegment segment, ValueLayout layout) {
+                ByteBuffer buffer = segment.asByteBuffer().order(layout.order());
+                byte[] found = new byte[buffer.limit()];
+                buffer.get(found);
+                return found;
+            }
+        };
+
+        ToArrayHelper<short[]> toShortArray = new ToArrayHelper<>() {
+            @Override
+            public short[] array() {
+                return new short[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
+            }
+
+            @Override
+            public short[] toArray(MemorySegment segment, ValueLayout layout) {
+                ShortBuffer buffer = segment.asByteBuffer().order(layout.order()).asShortBuffer();
+                short[] found = new short[buffer.limit()];
+                buffer.get(found);
+                return found;
+            }
+        };
+
+        ToArrayHelper<int[]> toIntArray = new ToArrayHelper<>() {
+            @Override
+            public int[] array() {
+                return new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
+            }
+
+            @Override
+            public int[] toArray(MemorySegment segment, ValueLayout layout) {
+                IntBuffer buffer = segment.asByteBuffer().order(layout.order()).asIntBuffer();
+                int[] found = new int[buffer.limit()];
+                buffer.get(found);
+                return found;
+            }
+        };
+
+        ToArrayHelper<float[]> toFloatArray = new ToArrayHelper<>() {
+            @Override
+            public float[] array() {
+                return new float[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
+            }
+
+            @Override
+            public float[] toArray(MemorySegment segment, ValueLayout layout) {
+                FloatBuffer buffer = segment.asByteBuffer().order(layout.order()).asFloatBuffer();
+                float[] found = new float[buffer.limit()];
+                buffer.get(found);
+                return found;
+            }
+        };
+
+        ToArrayHelper<long[]> toLongArray = new ToArrayHelper<>() {
+            @Override
+            public long[] array() {
+                return new long[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
+            }
+
+            @Override
+            public long[] toArray(MemorySegment segment, ValueLayout layout) {
+                LongBuffer buffer = segment.asByteBuffer().order(layout.order()).asLongBuffer();
+                long[] found = new long[buffer.limit()];
+                buffer.get(found);
+                return found;
+            }
+        };
+
+        ToArrayHelper<double[]> toDoubleArray = new ToArrayHelper<>() {
+            @Override
+            public double[] array() {
+                return new double[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
+            }
+
+            @Override
+            public double[] toArray(MemorySegment segment, ValueLayout layout) {
+                DoubleBuffer buffer = segment.asByteBuffer().order(layout.order()).asDoubleBuffer();
+                double[] found = new double[buffer.limit()];
+                buffer.get(found);
+                return found;
+            }
+        };
+    }
 }
