diff a/src/java.base/share/classes/jdk/internal/module/ServicesCatalog.java b/src/java.base/share/classes/jdk/internal/module/ServicesCatalog.java
--- a/src/java.base/share/classes/jdk/internal/module/ServicesCatalog.java
+++ b/src/java.base/share/classes/jdk/internal/module/ServicesCatalog.java
@@ -25,11 +25,11 @@
 
 package jdk.internal.module;
 
 import java.lang.module.ModuleDescriptor;
 import java.lang.module.ModuleDescriptor.Provides;
-import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
@@ -92,23 +92,28 @@
     public static ServicesCatalog create() {
         return new ServicesCatalog();
     }
 
     /**
-     * Returns the list of service providers for the given service type
-     * name, creating it if needed.
+     * Adds service providers for the given service type.
      */
-    private List<ServiceProvider> providers(String service) {
-        // avoid computeIfAbsent here
+    private void addProviders(String service, ServiceProvider ... providers) {
         List<ServiceProvider> list = map.get(service);
         if (list == null) {
-            list = new CopyOnWriteArrayList<>();
+            list = new CopyOnWriteArrayList<>(providers);
             List<ServiceProvider> prev = map.putIfAbsent(service, list);
-            if (prev != null)
-                list = prev;  // someone else got there
+            if (prev != null) {
+                // someone else got there
+                prev.addAll(list);
+            }
+        } else {
+            if (providers.length == 1) {
+                list.add(providers[0]);
+            } else {
+                list.addAll(Arrays.asList(providers));
+            }
         }
-        return list;
     }
 
     /**
      * Registers the providers in the given module in this services catalog.
      */
@@ -116,31 +121,25 @@
         ModuleDescriptor descriptor = module.getDescriptor();
         for (Provides provides : descriptor.provides()) {
             String service = provides.service();
             List<String> providerNames = provides.providers();
             int count = providerNames.size();
-            if (count == 1) {
-                String pn = providerNames.get(0);
-                providers(service).add(new ServiceProvider(module, pn));
-            } else {
-                List<ServiceProvider> list = new ArrayList<>(count);
-                for (String pn : providerNames) {
-                    list.add(new ServiceProvider(module, pn));
-                }
-                providers(service).addAll(list);
+            ServiceProvider[] providers = new ServiceProvider[count];
+            for (int i = 0; i < count; i++) {
+                providers[i] = new ServiceProvider(module, providerNames.get(i));
             }
+            addProviders(service, providers);
         }
     }
 
     /**
      * Adds a provider in the given module to this services catalog.
      *
      * @apiNote This method is for use by java.lang.instrument
      */
     public void addProvider(Module module, Class<?> service, Class<?> impl) {
-        List<ServiceProvider> list = providers(service.getName());
-        list.add(new ServiceProvider(module, impl.getName()));
+        addProviders(service.getName(), new ServiceProvider(module, impl.getName()));
     }
 
     /**
      * Returns the (possibly empty) list of service providers that implement
      * the given service type.
