diff a/src/java.base/share/classes/jdk/internal/util/ArraysSupport.java b/src/java.base/share/classes/jdk/internal/util/ArraysSupport.java
--- a/src/java.base/share/classes/jdk/internal/util/ArraysSupport.java
+++ b/src/java.base/share/classes/jdk/internal/util/ArraysSupport.java
@@ -161,31 +161,36 @@
     }
 
     /**
      * Mismatch over long lengths.
      */
-    public static long vectorizedMismatchLarge(Object a, long aOffset,
-                                               Object b, long bOffset,
-                                               long length,
-                                               int log2ArrayIndexScale) {
+    public static long vectorizedMismatchLargeForBytes(Object a, long aOffset,
+                                                       Object b, long bOffset,
+                                                       long length) {
         long off = 0;
         long remaining = length;
-        int i ;
-        while (remaining > 7) {
-            int size = (int) Math.min(Integer.MAX_VALUE, remaining);
+        int i, size;
+        boolean lastSubRange = false;
+        while (remaining > 7 && !lastSubRange) {
+            if (remaining > Integer.MAX_VALUE) {
+                size = Integer.MAX_VALUE;
+            } else {
+                size = (int) remaining;
+                lastSubRange = true;
+            }
             i = vectorizedMismatch(
                     a, aOffset + off,
                     b, bOffset + off,
-                    size, log2ArrayIndexScale);
+                    size, LOG2_ARRAY_BYTE_INDEX_SCALE);
             if (i >= 0)
                 return off + i;
 
             i = size - ~i;
             off += i;
             remaining -= i;
         }
-        return ~off;
+        return ~remaining;
     }
 
     // Booleans
     // Each boolean element takes up one byte
 
