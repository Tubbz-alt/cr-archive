diff a/src/hotspot/cpu/zero/nativeInst_zero.cpp b/src/hotspot/cpu/zero/nativeInst_zero.cpp
--- a/src/hotspot/cpu/zero/nativeInst_zero.cpp
+++ b/src/hotspot/cpu/zero/nativeInst_zero.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright 2008 Red Hat, Inc.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
@@ -24,21 +24,13 @@
  */
 
 #include "precompiled.hpp"
 #include "assembler_zero.inline.hpp"
 #include "entry_zero.hpp"
-#include "interpreter/cppInterpreter.hpp"
-#include "memory/resourceArea.hpp"
+#include "interpreter/zero/zeroInterpreter.hpp"
 #include "nativeInst_zero.hpp"
-#include "oops/oop.inline.hpp"
-#include "runtime/handles.hpp"
 #include "runtime/sharedRuntime.hpp"
-#include "runtime/stubRoutines.hpp"
-#include "utilities/ostream.hpp"
-#ifdef COMPILER1
-#include "c1/c1_Runtime1.hpp"
-#endif
 
 // This method is called by nmethod::make_not_entrant_or_zombie to
 // insert a jump to SharedRuntime::get_handle_wrong_method_stub()
 // (dest) at the start of a compiled method (verified_entry) to avoid
 // a race where a method is invoked while being made non-entrant.
@@ -46,12 +38,8 @@
 void NativeJump::patch_verified_entry(address entry,
                                       address verified_entry,
                                       address dest) {
   assert(dest == SharedRuntime::get_handle_wrong_method_stub(), "should be");
 
-#ifdef CC_INTERP
   ((ZeroEntry*) verified_entry)->set_entry_point(
-    (address) CppInterpreter::normal_entry);
-#else
-  Unimplemented();
-#endif // CC_INTERP
+    (address) ZeroInterpreter::normal_entry);
 }
