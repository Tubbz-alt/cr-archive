diff a/src/hotspot/share/compiler/compilerDirectives.hpp b/src/hotspot/share/compiler/compilerDirectives.hpp
--- a/src/hotspot/share/compiler/compilerDirectives.hpp
+++ b/src/hotspot/share/compiler/compilerDirectives.hpp
@@ -28,10 +28,11 @@
 #include "ci/ciMetadata.hpp"
 #include "ci/ciMethod.hpp"
 #include "compiler/methodMatcher.hpp"
 #include "compiler/compilerOracle.hpp"
 #include "utilities/exceptions.hpp"
+#include "utilities/tribool.hpp"
 
   //      Directives flag name,    type, default value, compile command name
   #define compilerdirectives_common_flags(cflags) \
     cflags(Enable,                  bool, false, X) \
     cflags(Exclude,                 bool, false, X) \
@@ -44,11 +45,12 @@
     cflags(BackgroundCompilation,   bool, BackgroundCompilation, BackgroundCompilation) \
     cflags(ReplayInline,            bool, false, ReplayInline) \
     cflags(DumpReplay,              bool, false, DumpReplay) \
     cflags(DumpInline,              bool, false, DumpInline) \
     cflags(CompilerDirectivesIgnoreCompileCommands, bool, CompilerDirectivesIgnoreCompileCommands, X) \
-    cflags(DisableIntrinsic,        ccstrlist, DisableIntrinsic, DisableIntrinsic)
+    cflags(DisableIntrinsic,        ccstrlist, DisableIntrinsic, DisableIntrinsic) \
+    cflags(ControlIntrinsic,        ccstrlist, ControlIntrinsic, ControlIntrinsic)
 
 #ifdef COMPILER1
   #define compilerdirectives_c1_flags(cflags)
 #else
   #define compilerdirectives_c1_flags(cflags)
@@ -97,15 +99,16 @@
 
 class DirectiveSet : public CHeapObj<mtCompiler> {
 private:
   InlineMatcher* _inlinematchers;
   CompilerDirectives* _directive;
+  TriBoolArray<vmIntrinsics::ID_LIMIT, int> _intrinsic_control_words;
 
 public:
   DirectiveSet(CompilerDirectives* directive);
   ~DirectiveSet();
-  void init_disableintrinsic();
+  void init_control_intrinsic();
   CompilerDirectives* directive();
   bool parse_and_add_inline(char* str, const char*& error_msg);
   void append_inline(InlineMatcher* m);
   bool should_inline(ciMethod* inlinee);
   bool should_not_inline(ciMethod* inlinee);
@@ -113,23 +116,25 @@
   DirectiveSet* compilecommand_compatibility_init(const methodHandle& method);
   bool is_exclusive_copy() { return _directive == NULL; }
   bool matches_inline(const methodHandle& method, int inline_action);
   static DirectiveSet* clone(DirectiveSet const* src);
   bool is_intrinsic_disabled(const methodHandle& method);
-  static ccstrlist canonicalize_disableintrinsic(ccstrlist option_value);
+  static ccstrlist canonicalize_control_intrinsic(ccstrlist option_value);
   void finalize(outputStream* st);
 
   typedef enum {
 #define enum_of_flags(name, type, dvalue, cc_flag) name##Index,
     compilerdirectives_common_flags(enum_of_flags)
     compilerdirectives_c2_flags(enum_of_flags)
     compilerdirectives_c1_flags(enum_of_flags)
     number_of_flags
   } flags;
 
+ private:
   bool _modified[number_of_flags]; // Records what options where set by a directive
 
+ public:
 #define flag_store_definition(name, type, dvalue, cc_flag) type name##Option;
   compilerdirectives_common_flags(flag_store_definition)
   compilerdirectives_c2_flags(flag_store_definition)
   compilerdirectives_c1_flags(flag_store_definition)
 
@@ -155,10 +160,32 @@
     compilerdirectives_c1_flags(print_function_definition)
     st->cr();
   }
 };
 
+// Iterator of ControlIntrinsic
+// if disable_all is true, it accepts DisableIntrinsic(deprecated) and all intrinsics
+// appear in the list are to disable
+class ControlIntrinsicIter {
+ private:
+  bool _enabled;
+  char* _token;
+  char* _saved_ptr;
+  char* _list;
+  const bool _disableIntrinsic;
+  void next_token();
+
+ public:
+  ControlIntrinsicIter(ccstrlist option, bool disable_all = false);
+  ~ControlIntrinsicIter();
+
+  bool is_enabled() const { return _enabled; }
+  const char* operator*() const { return _token; }
+
+  ControlIntrinsicIter& operator++();
+};
+
 class CompilerDirectives : public CHeapObj<mtCompiler> {
 private:
   CompilerDirectives* _next;
   BasicMatcher* _match;
   int _ref_count;
