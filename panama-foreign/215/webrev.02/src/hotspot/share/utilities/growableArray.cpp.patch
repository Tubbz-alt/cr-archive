diff a/src/hotspot/share/utilities/growableArray.cpp b/src/hotspot/share/utilities/growableArray.cpp
--- a/src/hotspot/share/utilities/growableArray.cpp
+++ b/src/hotspot/share/utilities/growableArray.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -26,38 +26,67 @@
 #include "memory/allocation.inline.hpp"
 #include "memory/resourceArea.hpp"
 #include "runtime/thread.inline.hpp"
 #include "utilities/growableArray.hpp"
 
+void* GrowableArrayResourceAllocator::allocate(int max, int elementSize) {
+  assert(max >= 0, "integer overflow");
+  size_t byte_size = elementSize * (size_t) max;
+
+  return (void*)resource_allocate_bytes(byte_size);
+}
+
+void* GrowableArrayArenaAllocator::allocate(int max, int element_size, Arena* arena) {
+  assert(max >= 0, "integer overflow");
+  size_t byte_size = element_size * (size_t) max;
+
+  return arena->Amalloc(byte_size);
+}
+
+void* GrowableArrayCHeapAllocator::allocate(int max, int element_size, MEMFLAGS memflags) {
+  assert(max >= 0, "integer overflow");
+  size_t byte_size = element_size * (size_t) max;
+
+  // memory type has to be specified for C heap allocation
+  assert(memflags != mtNone, "memory type not specified for C heap object");
+  return (void*)AllocateHeap(byte_size, memflags);
+}
+
+void GrowableArrayCHeapAllocator::deallocate(void* elements) {
+  FreeHeap(elements);
+}
+
 #ifdef ASSERT
-void GenericGrowableArray::set_nesting() {
-  if (on_stack()) {
-    _nesting = Thread::current()->resource_area()->nesting();
-  }
+
+GrowableArrayNestingCheck::GrowableArrayNestingCheck(bool on_stack) :
+    _nesting(on_stack ? Thread::current()->resource_area()->nesting() : 0) {
 }
 
-void GenericGrowableArray::check_nesting() {
+void GrowableArrayNestingCheck::on_stack_alloc() const {
   // Check for insidious allocation bug: if a GrowableArray overflows, the
   // grown array must be allocated under the same ResourceMark as the original.
   // Otherwise, the _data array will be deallocated too early.
-  if (on_stack() &&
-      _nesting != Thread::current()->resource_area()->nesting()) {
+  if (_nesting != Thread::current()->resource_area()->nesting()) {
     fatal("allocation bug: GrowableArray could grow within nested ResourceMark");
   }
 }
-#endif
-
-void* GenericGrowableArray::raw_allocate(int elementSize) {
-  assert(_max >= 0, "integer overflow");
-  size_t byte_size = elementSize * (size_t) _max;
-  if (on_stack()) {
-    return (void*)resource_allocate_bytes(byte_size);
-  } else if (on_C_heap()) {
-    return (void*)AllocateHeap(byte_size, _memflags);
-  } else {
-    return _arena->Amalloc(byte_size);
+
+void GrowableArrayMetadata::init_checks(const GrowableArrayBase* array) const {
+  // Stack allocated arrays support all three element allocation locations
+  if (array->allocated_on_stack()) {
+    return;
   }
+
+  // Otherwise there's a strict one-to-one mapping
+  assert(on_C_heap() == array->allocated_on_C_heap(),
+         "growable array must be C heap allocated if elements are");
+  assert(on_stack() == array->allocated_on_res_area(),
+         "growable array must be resource allocated if elements are");
+  assert(on_arena() == array->allocated_on_arena(),
+         "growable array must be arena allocated if elements are");
 }
 
-void GenericGrowableArray::free_C_heap(void* elements) {
-  FreeHeap(elements);
+void GrowableArrayMetadata::on_stack_alloc_check() const {
+  _nesting_check.on_stack_alloc();
 }
+
+#endif // ASSERT
