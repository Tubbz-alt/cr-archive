diff a/src/hotspot/share/utilities/hashtable.inline.hpp b/src/hotspot/share/utilities/hashtable.inline.hpp
--- a/src/hotspot/share/utilities/hashtable.inline.hpp
+++ b/src/hotspot/share/utilities/hashtable.inline.hpp
@@ -34,11 +34,12 @@
 
 // --------------------------------------------------------------------------
 
 // Initialize a table.
 
-template <MEMFLAGS F> inline BasicHashtable<F>::BasicHashtable(int table_size, int entry_size) {
+template <MEMFLAGS F> inline BasicHashtable<F>::BasicHashtable(int table_size, int entry_size) :
+    _entry_blocks(4) {
   // Called on startup, no locking needed
   initialize(table_size, entry_size, 0);
   _buckets = NEW_C_HEAP_ARRAY2(HashtableBucket<F>, table_size, F, CURRENT_PC);
   for (int index = 0; index < _table_size; index++) {
     _buckets[index].clear();
@@ -47,22 +48,22 @@
 }
 
 
 template <MEMFLAGS F> inline BasicHashtable<F>::BasicHashtable(int table_size, int entry_size,
                                       HashtableBucket<F>* buckets,
-                                      int number_of_entries) {
+                                      int number_of_entries) :
+    _entry_blocks(4) {
   // Called on startup, no locking needed
   initialize(table_size, entry_size, number_of_entries);
   _buckets = buckets;
   _stats_rate = TableRateStatistics();
 }
 
 template <MEMFLAGS F> inline BasicHashtable<F>::~BasicHashtable() {
-  for (int i = 0; i < _entry_blocks->length(); i++) {
-    FREE_C_HEAP_ARRAY(char, _entry_blocks->at(i));
+  for (int i = 0; i < _entry_blocks.length(); i++) {
+    FREE_C_HEAP_ARRAY(char, _entry_blocks.at(i));
   }
-  delete _entry_blocks;
   free_buckets();
 }
 
 template <MEMFLAGS F> inline void BasicHashtable<F>::initialize(int table_size, int entry_size,
                                        int number_of_entries) {
@@ -71,11 +72,10 @@
   _entry_size = entry_size;
   _free_list = NULL;
   _first_free_entry = NULL;
   _end_block = NULL;
   _number_of_entries = number_of_entries;
-  _entry_blocks = new(ResourceObj::C_HEAP, F) GrowableArray<char*>(4, F);
 }
 
 
 // The following method is MT-safe and may be used with caution.
 template <MEMFLAGS F> inline BasicHashtableEntry<F>* BasicHashtable<F>::bucket(int i) const {
