diff a/src/hotspot/share/runtime/sweeper.hpp b/src/hotspot/share/runtime/sweeper.hpp
--- a/src/hotspot/share/runtime/sweeper.hpp
+++ b/src/hotspot/share/runtime/sweeper.hpp
@@ -35,12 +35,14 @@
 // An NmethodSweeper is an incremental cleaner for:
 //    - cleanup inline caches
 //    - reclamation of nmethods
 // Removing nmethods from the code cache includes two operations
 //  1) mark active nmethods
-//     Is done in 'mark_active_nmethods()'. This function is called at a
-//     safepoint and marks all nmethods that are active on a thread's stack.
+//     Is done in 'do_stack_scanning()'. This function invokes a thread-local handshake
+//     that marks all nmethods that are active on a thread's stack, and resets their
+//     hotness counters. This allows the sweeper to assume that a decayed hotness counter
+//     of an nmethod implies that it is seemingly not used actively.
 //  2) sweep nmethods
 //     Is done in sweep_code_cache(). This function is the only place in the
 //     sweeper where memory is reclaimed. Note that sweep_code_cache() is not
 //     called at a safepoint. However, sweep_code_cache() stops executing if
 //     another thread requests a safepoint. Consequently, 'mark_active_nmethods()'
@@ -108,12 +110,10 @@
   // Keep track of sweeper activity in the ring buffer
   static void record_sweep(CompiledMethod* nm, int line);
 #endif
 
   static CodeBlobClosure* prepare_mark_active_nmethods();
-  static CodeBlobClosure* prepare_reset_hotness_counters();
-
   static void sweeper_loop();
   static bool should_start_aggressive_sweep(int code_blob_type);
   static void force_sweep();
   static int hotness_counter_reset_val();
   static void report_state_change(nmethod* nm);
