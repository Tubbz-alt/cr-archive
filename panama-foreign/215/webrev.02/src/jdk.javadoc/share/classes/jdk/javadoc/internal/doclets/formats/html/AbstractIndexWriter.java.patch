diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractIndexWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractIndexWriter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractIndexWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractIndexWriter.java
@@ -25,10 +25,11 @@
 
 package jdk.javadoc.internal.doclets.formats.html;
 
 import java.io.IOException;
 import java.io.Writer;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
@@ -103,12 +104,16 @@
     protected void addContents(Character uc, List<IndexItem> memberlist,
             Content contentTree) {
         addHeading(uc, contentTree);
 
         HtmlTree dl = HtmlTree.DL(HtmlStyle.index);
+        Map<String,Integer> duplicateLabelCheck = new HashMap<>();
+        memberlist.forEach(e -> duplicateLabelCheck.compute(e.getFullyQualifiedLabel(utils),
+                (k, v) -> v == null ? 1 : v + 1));
         for (IndexItem indexItem : memberlist) {
-            addDescription(indexItem, dl);
+            addDescription(indexItem, dl,
+                    duplicateLabelCheck.get(indexItem.getFullyQualifiedLabel(utils)) > 1);
         }
         contentTree.add(dl);
     }
 
     protected void addHeading(Character uc, Content contentTree) {
@@ -118,30 +123,32 @@
                 HtmlStyle.title, headContent);
         heading.setId(getNameForIndex(unicode));
         contentTree.add(heading);
     }
 
-    protected void addDescription(IndexItem indexItem, Content dl) {
+    protected void addDescription(IndexItem indexItem, Content dl, boolean addModuleInfo) {
         SearchIndexItem si = indexItem.getSearchTag();
         if (si != null) {
             addDescription(si, dl);
         } else {
             si = new SearchIndexItem();
             si.setLabel(indexItem.getLabel());
-            addElementDescription(indexItem, dl, si);
+            addElementDescription(indexItem, dl, si, addModuleInfo);
             searchItems.add(si);
         }
     }
 
     /**
      * Add one line summary comment for the element.
      *
      * @param indexItem the element to be documented
      * @param dlTree the content tree to which the description will be added
      * @param si the search index item
+     * @param addModuleInfo whether to include module information
      */
-    protected void addElementDescription(IndexItem indexItem, Content dlTree, SearchIndexItem si) {
+    protected void addElementDescription(IndexItem indexItem, Content dlTree, SearchIndexItem si,
+                                         boolean addModuleInfo) {
         Content dt;
         Element element = indexItem.getElement();
         String label = indexItem.getLabel();
         switch (element.getKind()) {
             case MODULE:
@@ -163,20 +170,26 @@
             case ANNOTATION_TYPE:
             case INTERFACE:
                 dt = HtmlTree.DT(getLink(new LinkInfoImpl(configuration,
                         LinkInfoImpl.Kind.INDEX, (TypeElement)element).strong(true)));
                 si.setContainingPackage(utils.getPackageName(utils.containingPackage(element)));
+                if (configuration.showModules && addModuleInfo) {
+                    si.setContainingModule(utils.getFullyQualifiedName(utils.containingModule(element)));
+                }
                 si.setCategory(Category.TYPES);
                 dt.add(" - ");
                 addClassInfo((TypeElement)element, dt);
                 break;
             default:
                 TypeElement containingType = indexItem.getTypeElement();
                 dt = HtmlTree.DT(HtmlTree.SPAN(HtmlStyle.memberNameLink,
                         getDocLink(LinkInfoImpl.Kind.INDEX, containingType, element, new StringContent(label))));
                 si.setContainingPackage(utils.getPackageName(utils.containingPackage(element)));
                 si.setContainingClass(utils.getSimpleName(containingType));
+                if (configuration.showModules && addModuleInfo) {
+                    si.setContainingModule(utils.getFullyQualifiedName(utils.containingModule(element)));
+                }
                 if (utils.isExecutableElement(element)) {
                     String url = HtmlTree.encodeURL(links.getName(getAnchor((ExecutableElement)element)));
                     if (!label.equals(url)) {
                         si.setUrl(url);
                     }
