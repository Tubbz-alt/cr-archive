diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/Start.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/Start.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/Start.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/Start.java
@@ -29,20 +29,18 @@
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.text.BreakIterator;
 import java.text.Collator;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.IllformedLocaleException;
 import java.util.List;
 import java.util.Locale;
-import java.util.MissingResourceException;
 import java.util.Objects;
-import java.util.ResourceBundle;
 import java.util.Set;
+import java.util.function.Supplier;
 import java.util.stream.Collectors;
 
 import javax.tools.JavaFileManager;
 import javax.tools.JavaFileObject;
 import javax.tools.StandardJavaFileManager;
@@ -60,10 +58,11 @@
 
 import jdk.javadoc.doclet.Doclet;
 import jdk.javadoc.doclet.Doclet.Option;
 import jdk.javadoc.doclet.DocletEnvironment;
 import jdk.javadoc.doclet.StandardDoclet;
+import jdk.javadoc.internal.Versions;
 import jdk.javadoc.internal.tool.Main.Result;
 import jdk.javadoc.internal.tool.ToolOptions.ToolOption;
 
 import static javax.tools.DocumentationTool.Location.*;
 
@@ -165,21 +164,34 @@
                 showUsage("main.Xusage", ToolOption.Kind.EXTENDED, "main.Xusage.foot");
             }
 
             @Override
             public void version() {
-                showVersion("javadoc.version", "release");
+                showVersion("javadoc.version", orDefault(() -> Versions.shortVersionStringOf(toolVersion())));
             }
 
             @Override
             public void fullVersion() {
-                showVersion("javadoc.fullversion", "full");
+                showVersion("javadoc.fullversion", orDefault(() -> Versions.fullVersionStringOf(toolVersion())));
+            }
+
+            private String orDefault(Supplier<String> s) {
+                try {
+                    return s.get();
+                } catch (RuntimeException e) {
+                    assert false : e;
+                    return Log.getLocalizedString("version.not.available");
+                }
             }
         };
         return new ToolOptions(context, messager, helper);
     }
 
+    private Runtime.Version toolVersion() {
+        return Versions.javadocVersion();
+    }
+
     private void showUsage() {
         showUsage("main.usage", ToolOption.Kind.STANDARD, "main.usage.foot");
     }
 
     private void showUsage(String headerKey, ToolOption.Kind kind, String footerKey) {
@@ -194,30 +206,12 @@
         }
         if (footerKey != null)
             messager.notice(footerKey);
     }
 
-    private static final String versionRBName = "jdk.javadoc.internal.tool.resources.version";
-    private static ResourceBundle versionRB;
-
-    private void showVersion(String labelKey, String versionKey) {
-        messager.notice(labelKey, messager.programName, getVersion(versionKey));
-    }
-
-    private static String getVersion(String key) {
-        if (versionRB == null) {
-            try {
-                versionRB = ResourceBundle.getBundle(versionRBName);
-            } catch (MissingResourceException e) {
-                return Log.getLocalizedString("version.not.available");
-            }
-        }
-        try {
-            return versionRB.getString(key);
-        } catch (MissingResourceException e) {
-            return Log.getLocalizedString("version.not.available");
-        }
+    private void showVersion(String labelKey, String value) {
+        messager.notice(labelKey, messager.programName, value);
     }
 
     private void showToolOptions(ToolOption.Kind kind) {
         Comparator<ToolOption> comp = new Comparator<ToolOption>() {
             final Collator collator = Collator.getInstance(Locale.US);
