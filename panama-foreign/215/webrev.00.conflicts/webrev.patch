diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayout.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayout.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayout.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayout.java
@@ -66,13 +66,19 @@
  * The above declaration can be modelled using a layout object, as follows:
  *
  * <blockquote><pre>{@code
 SequenceLayout taggedValues = MemoryLayout.ofSequence(5,
     MemoryLayout.ofStruct(
+<<<<<<< HEAD
         MemoryLayout.ofValueBits(8, ByteOrder.NATIVE_ORDER).withName("kind"),
         MemoryLayout.ofPaddingBits(24),
         MemoryLayout.ofValueBits(32, ByteOrder.NATIVE_ORDER).withName("value")
+=======
+        MemoryLayout.ofValueBits(8, ByteOrder.nativeOrder()).withName("kind"),
+        MemoryLayout.ofPaddingBits(24),
+        MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder()).withName("value")
+>>>>>>> 73cff1a006833459b974947217027eeeb46b2f59
     )
 ).withName("TaggedValues");
  * }</pre></blockquote>
  * <p>
  * All implementations of this interface must be <a href="{@docRoot}/java.base/java/lang/doc-files/ValueBased.html">value-based</a>;
@@ -145,11 +151,15 @@
  *
  * That is, the above declaration is identical to the following, more verbose one:
  * <blockquote><pre>{@code
 MemoryLayout taggedValuesWithHole = MemoryLayout.ofSequence(5,
     MemoryLayout.ofStruct(
+<<<<<<< HEAD
         MemoryLayout.ofValueBits(8, ByteOrder.NATIVE_ORDER).withName("kind").
+=======
+        MemoryLayout.ofPaddingBits(8, ByteOrder.nativeOrder()).withName("kind").
+>>>>>>> 73cff1a006833459b974947217027eeeb46b2f59
         MemoryLayout.ofPaddingBits(32),
         MemoryLayout.ofPaddingBits(32)
 ));
  * }</pre></blockquote>
  *
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -156,12 +156,17 @@
  * <blockquote><pre>{@code
 MemorySegment segment = ...
 SequenceLayout SEQUENCE_LAYOUT = MemoryLayout.ofSequence(1024, MemoryLayouts.JAVA_INT);
 VarHandle VH_int = SEQUENCE_LAYOUT.elementLayout().varHandle(int.class);
 int sum = StreamSupport.stream(MemorySegment.spliterator(segment, SEQUENCE_LAYOUT), true)
+<<<<<<< HEAD
                        .mapToInt(s -> (int)VH_int.get(s.baseAddress()))
                        .sum();
+=======
+.mapToInt(s -> (int)VH_int.get(s.baseAddress()))
+.sum();
+>>>>>>> 73cff1a006833459b974947217027eeeb46b2f59
  * }</pre></blockquote>
  *
  * @apiNote In the future, if the Java language permits, {@link MemorySegment}
  * may become a {@code sealed} interface, which would prohibit subclassing except by
  * {@link MappedMemorySegment} and other explicitly permitted subtypes.
@@ -618,11 +623,15 @@
      * action. This method can be very useful when interacting with custom native memory sources (e.g. custom allocators,
      * GPU memory, etc.), where an address to some underlying memory region is typically obtained from native code
      * (often as a plain {@code long} value). The segment will feature all <a href="#access-modes">access modes</a>
      * (see {@link #ALL_ACCESS}).
      * <p>
+<<<<<<< HEAD
      * This method is <em>restricted</em>. Restricted methods are unsafe, and, if used incorrectly, their use might crash
+=======
+     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
+>>>>>>> 73cff1a006833459b974947217027eeeb46b2f59
      * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
      * restricted methods, and use safe and supported functionalities, where possible.
      *
      * @param addr the desired base address
      * @param bytesSize the desired size.
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/package-info.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/package-info.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/package-info.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/package-info.java
@@ -49,11 +49,15 @@
 }
  * }</pre>
  *
  * Here we create a var handle, namely {@code intHandle}, to manipulate values of the primitive type {@code int}, at
  * a given memory location. Also, {@code intHandle} is stored in a {@code static} and {@code final} field, to achieve
+<<<<<<< HEAD
  * better performance and allow for inlining of the memory access operation through the {@link java.lang.invoke.VarHandle}
+=======
+ * better performances and allow for inlining of the memory access operation through the {@link java.lang.invoke.VarHandle}
+>>>>>>> 73cff1a006833459b974947217027eeeb46b2f59
  * instance. We then create a <em>native</em> memory segment, that is, a memory segment backed by
  * off-heap memory; the size of the segment is 40 bytes, enough to store 10 values of the primitive type {@code int}.
  * The segment is created inside a <em>try-with-resources</em> construct: this idiom ensures that all the memory resources
  * associated with the segment will be released at the end of the block, according to the semantics described in
  * Section {@jls 14.20.3} of <cite>The Java&trade; Language Specification</cite>. Inside the try-with-resources block, we initialize
