diff a/src/hotspot/share/prims/resolvedMethodTable.cpp b/src/hotspot/share/prims/resolvedMethodTable.cpp
--- a/src/hotspot/share/prims/resolvedMethodTable.cpp
+++ b/src/hotspot/share/prims/resolvedMethodTable.cpp
@@ -62,11 +62,11 @@
                             mtClass> ResolvedMethodTableHash;
 
 class ResolvedMethodTableConfig : public AllStatic {
  private:
  public:
-  typedef WeakHandle<vm_resolved_method_table_data> Value;
+  typedef WeakHandle Value;
 
   static uintx get_hash(Value const& value, bool* is_dead) {
     oop val_oop = value.peek();
     if (val_oop == NULL) {
       *is_dead = true;
@@ -81,11 +81,11 @@
   static void* allocate_node(size_t size, Value const& value) {
     ResolvedMethodTable::item_added();
     return AllocateHeap(size, mtClass);
   }
   static void free_node(void* memory, Value const& value) {
-    value.release();
+    value.release(OopStorageSet::resolved_method_table_weak());
     FreeHeap(memory);
     ResolvedMethodTable::item_removed();
   }
 };
 
@@ -119,11 +119,11 @@
     : _thread(thread), _hash(hash), _method(key) {
   }
   uintx get_hash() const {
     return _hash;
   }
-  bool equals(WeakHandle<vm_resolved_method_table_data>* value, bool* is_dead) {
+  bool equals(WeakHandle* value, bool* is_dead) {
     oop val_oop = value->peek();
     if (val_oop == NULL) {
       // dead oop, mark this hash dead for cleaning
       *is_dead = true;
       return false;
@@ -143,11 +143,11 @@
   Thread*       _thread;
   const Method* _method;
   Handle        _return;
 public:
   ResolvedMethodGet(Thread* thread, const Method* method) : _thread(thread), _method(method) {}
-  void operator()(WeakHandle<vm_resolved_method_table_data>* val) {
+  void operator()(WeakHandle* val) {
     oop result = val->resolve();
     assert(result != NULL, "Result should be reachable");
     _return = Handle(_thread, result);
     log_get();
   }
@@ -191,11 +191,11 @@
 
   while (true) {
     if (_local_table->get(thread, lookup, rmg)) {
       return rmg.get_res_oop();
     }
-    WeakHandle<vm_resolved_method_table_data> wh = WeakHandle<vm_resolved_method_table_data>::create(rmethod_name);
+    WeakHandle wh(OopStorageSet::resolved_method_table_weak(), rmethod_name);
     // The hash table takes ownership of the WeakHandle, even if it's not inserted.
     if (_local_table->insert(thread, lookup, wh)) {
       log_insert(method);
       return wh.resolve();
     }
@@ -280,20 +280,20 @@
   _current_size = table_size();
   log_info(membername, table)("Grown to size:" SIZE_FORMAT, _current_size);
 }
 
 struct ResolvedMethodTableDoDelete : StackObj {
-  void operator()(WeakHandle<vm_resolved_method_table_data>* val) {
+  void operator()(WeakHandle* val) {
     /* do nothing */
   }
 };
 
 struct ResolvedMethodTableDeleteCheck : StackObj {
   long _count;
   long _item;
   ResolvedMethodTableDeleteCheck() : _count(0), _item(0) {}
-  bool operator()(WeakHandle<vm_resolved_method_table_data>* val) {
+  bool operator()(WeakHandle* val) {
     ++_item;
     oop tmp = val->peek();
     if (tmp == NULL) {
       ++_count;
       return true;
@@ -343,11 +343,11 @@
 #if INCLUDE_JVMTI
 class AdjustMethodEntries : public StackObj {
   bool* _trace_name_printed;
 public:
   AdjustMethodEntries(bool* trace_name_printed) : _trace_name_printed(trace_name_printed) {};
-  bool operator()(WeakHandle<vm_resolved_method_table_data>* entry) {
+  bool operator()(WeakHandle* entry) {
     oop mem_name = entry->peek();
     if (mem_name == NULL) {
       // Removed
       return true;
     }
@@ -385,11 +385,11 @@
 #endif // INCLUDE_JVMTI
 
 // Verification
 class VerifyResolvedMethod : StackObj {
  public:
-  bool operator()(WeakHandle<vm_resolved_method_table_data>* val) {
+  bool operator()(WeakHandle* val) {
     oop obj = val->peek();
     if (obj != NULL) {
       Method* method = (Method*)java_lang_invoke_ResolvedMethodName::vmtarget(obj);
       guarantee(method->is_method(), "Must be");
       guarantee(!method->is_old(), "Must be");
