diff a/src/hotspot/share/memory/filemap.hpp b/src/hotspot/share/memory/filemap.hpp
--- a/src/hotspot/share/memory/filemap.hpp
+++ b/src/hotspot/share/memory/filemap.hpp
@@ -56,18 +56,19 @@
   };
 
   void set_name(const char* name, TRAPS);
 
   u1     _type;
+  bool   _is_module_path;
   bool   _from_class_path_attr;
   time_t _timestamp;          // jar timestamp,  0 if is directory, modules image or other
   long   _filesize;           // jar/jimage file size, -1 if is directory, -2 if other
   Array<char>* _name;
   Array<u1>*   _manifest;
 
 public:
-  void init(bool is_modules_image, ClassPathEntry* cpe, TRAPS);
+  void init(bool is_modules_image, bool is_module_path, ClassPathEntry* cpe, TRAPS);
   void init_as_non_existent(const char* path, TRAPS);
   void metaspace_pointers_do(MetaspaceClosure* it);
   bool validate(bool is_class_path = true) const;
 
   // The _timestamp only gets set for jar files.
@@ -94,10 +95,14 @@
   void set_manifest(Array<u1>* manifest) {
     _manifest = manifest;
   }
   bool check_non_existent() const;
   void copy_from(SharedClassPathEntry* ent, ClassLoaderData* loader_data, TRAPS);
+  bool in_named_module() {
+    return is_modules_image() || // modules image doesn't contain unnamed modules
+           _is_module_path;      // module path doesn't contain unnamed modules
+  }
 };
 
 struct ArchiveHeapOopmapInfo {
   address _oopmap;               // bitmap for relocating embedded oops
   size_t  _offset;               // this oopmap is stored at this offset from the bottom of the BM region
@@ -520,10 +525,12 @@
 
   static int get_number_of_shared_paths() {
     return _shared_path_table.size();
   }
 
+  static int get_module_shared_path_index(Symbol* location) NOT_CDS_RETURN_(-1);
+
   char* region_addr(int idx);
 
   // The offset of the first core region in the archive, relative to SharedBaseAddress
   size_t mapping_base_offset() const { return first_core_space()->mapping_offset(); }
   // The offset of the (exclusive) end of the last core region in this archive, relative to SharedBaseAddress
