diff a/src/hotspot/share/interpreter/abstractInterpreter.cpp b/src/hotspot/share/interpreter/abstractInterpreter.cpp
--- a/src/hotspot/share/interpreter/abstractInterpreter.cpp
+++ b/src/hotspot/share/interpreter/abstractInterpreter.cpp
@@ -25,11 +25,10 @@
 #include "precompiled.hpp"
 #include "asm/macroAssembler.hpp"
 #include "asm/macroAssembler.inline.hpp"
 #include "compiler/disassembler.hpp"
 #include "interpreter/bytecodeHistogram.hpp"
-#include "interpreter/bytecodeInterpreter.hpp"
 #include "interpreter/bytecodeStream.hpp"
 #include "interpreter/interpreter.hpp"
 #include "interpreter/interpreterRuntime.hpp"
 #include "interpreter/interp_masm.hpp"
 #include "interpreter/templateTable.hpp"
@@ -119,11 +118,11 @@
                                     ((int)id - vmIntrinsics::FIRST_MH_SIG_POLY) );
     assert(kind <= method_handle_invoke_LAST, "parallel enum ranges");
     return kind;
   }
 
-#ifndef CC_INTERP
+#ifndef ZERO
   switch (m->intrinsic_id()) {
     // Use optimized stub code for CRC32 native methods.
     case vmIntrinsics::_updateCRC32            : return java_util_zip_CRC32_update;
     case vmIntrinsics::_updateBytesCRC32       : return java_util_zip_CRC32_updateBytes;
     case vmIntrinsics::_updateByteBufferCRC32  : return java_util_zip_CRC32_updateByteBuffer;
@@ -134,11 +133,11 @@
     case vmIntrinsics::_floatToRawIntBits:   return java_lang_Float_floatToRawIntBits;
     case vmIntrinsics::_longBitsToDouble:    return java_lang_Double_longBitsToDouble;
     case vmIntrinsics::_doubleToRawLongBits: return java_lang_Double_doubleToRawLongBits;
     default:                                 break;
   }
-#endif // CC_INTERP
+#endif // ZERO
 
   // Native method?
   // Note: This test must come _before_ the test for intrinsic
   //       methods. See also comments below.
   if (m->is_native()) {
@@ -187,11 +186,11 @@
   }
 
   // Accessor method?
   if (m->is_getter()) {
     // TODO: We should have used ::is_accessor above, but fast accessors in Zero expect only getters.
-    // See CppInterpreter::accessor_entry in cppInterpreter_zero.cpp. This should be fixed in Zero,
+    // See ZeroInterpreter::accessor_entry in zeroInterpreter_zero.cpp. This should be fixed in Zero,
     // then the call above updated to ::is_accessor
     assert(m->size_of_parameters() == 1, "fast code for accessors assumes parameter size = 1");
     return accessor;
   }
 
