diff a/test/jdk/tools/jmod/JmodTest.java b/test/jdk/tools/jmod/JmodTest.java
--- a/test/jdk/tools/jmod/JmodTest.java
+++ b/test/jdk/tools/jmod/JmodTest.java
@@ -1,7 +1,7 @@
 /**
- * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 
 /*
  * @test
- * @bug 8142968 8166568 8166286 8170618 8168149
+ * @bug 8142968 8166568 8166286 8170618 8168149 8240910
  * @summary Basic test for jmod
  * @library /test/lib
  * @modules jdk.compiler
  *          jdk.jlink
  * @build jdk.test.lib.compiler.CompilerUtils
@@ -58,10 +58,14 @@
 
     static final ToolProvider JMOD_TOOL = ToolProvider.findFirst("jmod")
         .orElseThrow(() ->
             new RuntimeException("jmod tool not found")
         );
+    static final ToolProvider JAR_TOOL = ToolProvider.findFirst("jar")
+        .orElseThrow(() ->
+            new RuntimeException("jar tool not found")
+        );
 
     static final String TEST_SRC = System.getProperty("test.src", ".");
     static final Path SRC_DIR = Paths.get(TEST_SRC, "src");
     static final Path EXPLODED_DIR = Paths.get("build");
     static final Path MODS_DIR = Paths.get("jmods");
@@ -434,10 +438,29 @@
              .resultChecker(r ->
                  assertContains(r.output, "Warning: ignoring duplicate entry")
              );
     }
 
+    @Test
+    public void testDuplicateEntriesFromJarFile() throws IOException {
+        String cp = EXPLODED_DIR.resolve("foo").resolve("classes").toString();
+        Path jar = Paths.get("foo.jar");
+        Path jmod = MODS_DIR.resolve("testDuplicates.jmod");
+        FileUtils.deleteFileIfExistsWithRetry(jar);
+        FileUtils.deleteFileIfExistsWithRetry(jmod);
+        // create JAR file
+        assertTrue(JAR_TOOL.run(System.out, System.err, "cf", jar.toString(), "-C", cp, ".") == 0);
+
+        jmod("create",
+             "--class-path", jar.toString() + pathSeparator + jar.toString(),
+             jmod.toString())
+             .assertSuccess()
+             .resultChecker(r ->
+                 assertContains(r.output, "Warning: ignoring duplicate entry")
+             );
+    }
+
     @Test
     public void testIgnoreModuleInfoInOtherSections() throws IOException {
         Path jmod = MODS_DIR.resolve("testIgnoreModuleInfoInOtherSections.jmod");
         FileUtils.deleteFileIfExistsWithRetry(jmod);
         String cp = EXPLODED_DIR.resolve("foo").resolve("classes").toString();
