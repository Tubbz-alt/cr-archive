diff a/test/hotspot/jtreg/runtime/cds/appcds/TestCommon.java b/test/hotspot/jtreg/runtime/cds/appcds/TestCommon.java
--- a/test/hotspot/jtreg/runtime/cds/appcds/TestCommon.java
+++ b/test/hotspot/jtreg/runtime/cds/appcds/TestCommon.java
@@ -135,10 +135,26 @@
     public static OutputAnalyzer dump(String appJarDir, String appJar, String classList[],
                                                String... suffix) throws Exception {
         return createArchive(appJarDir, appJar, classList, suffix);
     }
 
+    /**
+     * Dump the base archive. The JDK's default class list is used (unless otherwise specified
+     * in cmdLineSuffix).
+     */
+    public static OutputAnalyzer dumpBaseArchive(String baseArchiveName, String ... cmdLineSuffix)
+        throws Exception
+    {
+        CDSOptions opts = new CDSOptions();
+        opts.setArchiveName(baseArchiveName);
+        opts.addSuffix(cmdLineSuffix);
+        opts.addSuffix("-Djava.class.path=");
+        OutputAnalyzer out = CDSTestUtils.createArchive(opts);
+        CDSTestUtils.checkBaseDump(out);
+        return out;
+    }
+
     // Create AppCDS archive using most common args - convenience method
     public static OutputAnalyzer createArchive(String appJar, String classList[],
                                                String... suffix) throws Exception {
         AppCDSOptions opts = (new AppCDSOptions()).setAppJar(appJar);
         opts.setClassList(classList);
@@ -156,10 +172,13 @@
     }
 
     // Simulate -Xshare:dump with -XX:ArchiveClassesAtExit. See comments around patchJarForDynamicDump()
     private static final Class tmp = DynamicDumpHelper.class;
 
+    // name of the base archive to be used for dynamic dump
+    private static String tempBaseArchive = null;
+
     // Create AppCDS archive using appcds options
     public static OutputAnalyzer createArchive(AppCDSOptions opts)
         throws Exception {
         ArrayList<String> cmd = new ArrayList<String>();
         startNewArchiveName();
@@ -180,13 +199,18 @@
         if (opts.archiveName == null) {
             opts.archiveName = getCurrentArchiveName();
         }
 
         if (DYNAMIC_DUMP) {
+            File baseArchive = null;
+            if (tempBaseArchive == null || !(new File(tempBaseArchive)).isFile()) {
+                tempBaseArchive = getNewArchiveName("tempBaseArchive");
+                dumpBaseArchive(tempBaseArchive);
+            }
             cmd.add("-Xshare:on");
+            cmd.add("-XX:SharedArchiveFile=" + tempBaseArchive);
             cmd.add("-XX:ArchiveClassesAtExit=" + opts.archiveName);
-
             cmd.add("-Xlog:cds");
             cmd.add("-Xlog:cds+dynamic");
             boolean mainModuleSpecified = false;
             boolean patchModuleSpecified = false;
             for (String s : opts.suffix) {
