diff a/test/hotspot/jtreg/gc/metaspace/TestSizeTransitions.java b/test/hotspot/jtreg/gc/metaspace/TestSizeTransitions.java
--- a/test/hotspot/jtreg/gc/metaspace/TestSizeTransitions.java
+++ b/test/hotspot/jtreg/gc/metaspace/TestSizeTransitions.java
@@ -77,17 +77,17 @@
   // matches a size transition
   //   e.g., 177K(4864K)->177K(4864K)
   private static final String SIZE_TRANSITION_REGEX = "\\d+K\\(\\d+K\\)->\\d+K\\(\\d+K\\)";
 
   // matches -coops metaspace size transitions
-  private static final String NO_COOPS_REGEX =
+  private static final String NO_COMPRESSED_KLASS_POINTERS_REGEX =
     String.format("^%s.* Metaspace: %s$",
                   LOG_TAGS_REGEX,
                   SIZE_TRANSITION_REGEX);
 
   // matches +coops metaspace size transitions
-  private static final String COOPS_REGEX =
+  private static final String COMPRESSED_KLASS_POINTERS_REGEX =
     String.format("^%s.* Metaspace: %s NonClass: %s Class: %s$",
                   LOG_TAGS_REGEX,
                   SIZE_TRANSITION_REGEX,
                   SIZE_TRANSITION_REGEX,
                   SIZE_TRANSITION_REGEX);
@@ -96,23 +96,23 @@
     // args: <use-coops> <gc-arg>
     if (args.length != 2) {
       throw new RuntimeException("wrong number of args: " + args.length);
     }
 
-    final boolean hasCoops = Platform.is64bit();
-    final boolean useCoops = Boolean.parseBoolean(args[0]);
+    final boolean hasCompressedKlassPointers = Platform.is64bit();
+    final boolean useCompressedKlassPointers = Boolean.parseBoolean(args[0]);
     final String gcArg = args[1];
 
-    if (!hasCoops && useCoops) {
+    if (!hasCompressedKlassPointers && useCompressedKlassPointers) {
        // No need to run this configuration.
        System.out.println("Skipping test.");
        return;
     }
 
     List<String> jvmArgs = new ArrayList<>();
-    if (hasCoops) {
-      jvmArgs.add(useCoops ? "-XX:+UseCompressedOops" : "-XX:-UseCompressedOops");
+    if (hasCompressedKlassPointers) {
+      jvmArgs.add(useCompressedKlassPointers ? "-XX:+UseCompressedClassPointers" : "-XX:-UseCompressedClassPointers");
     }
     jvmArgs.add(gcArg);
     jvmArgs.add("-Xmx256m");
     jvmArgs.add("-Xlog:gc,gc+metaspace=info");
     jvmArgs.add(TestSizeTransitions.Run.class.getName());
@@ -125,14 +125,14 @@
     final ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(jvmArgs);
     final OutputAnalyzer output = new OutputAnalyzer(pb.start());
     System.out.println(output.getStdout());
     output.shouldHaveExitValue(0);
 
-    if (useCoops) {
-      output.stdoutShouldMatch(COOPS_REGEX);
-      output.stdoutShouldNotMatch(NO_COOPS_REGEX);
+    if (useCompressedKlassPointers) {
+      output.stdoutShouldMatch(COMPRESSED_KLASS_POINTERS_REGEX);
+      output.stdoutShouldNotMatch(NO_COMPRESSED_KLASS_POINTERS_REGEX);
     } else {
-      output.stdoutShouldMatch(NO_COOPS_REGEX);
-      output.stdoutShouldNotMatch(COOPS_REGEX);
+      output.stdoutShouldMatch(NO_COMPRESSED_KLASS_POINTERS_REGEX);
+      output.stdoutShouldNotMatch(COMPRESSED_KLASS_POINTERS_REGEX);
     }
   }
 }
