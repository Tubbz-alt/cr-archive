diff a/src/java.base/share/native/libjava/FileInputStream.c b/src/java.base/share/native/libjava/FileInputStream.c
--- a/src/java.base/share/native/libjava/FileInputStream.c
+++ b/src/java.base/share/native/libjava/FileInputStream.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -74,11 +74,11 @@
 
 JNIEXPORT jlong JNICALL
 Java_java_io_FileInputStream_skip0(JNIEnv *env, jobject this, jlong toSkip) {
     jlong cur = jlong_zero;
     jlong end = jlong_zero;
-    FD fd = GET_FD(this, fis_fd);
+    FD fd = getFD(env, this, fis_fd);
     if (fd == -1) {
         JNU_ThrowIOException (env, "Stream Closed");
         return 0;
     }
     if ((cur = IO_Lseek(fd, (jlong)0, (jint)SEEK_CUR)) == -1) {
@@ -90,11 +90,11 @@
 }
 
 JNIEXPORT jint JNICALL
 Java_java_io_FileInputStream_available0(JNIEnv *env, jobject this) {
     jlong ret;
-    FD fd = GET_FD(this, fis_fd);
+    FD fd = getFD(env, this, fis_fd);
     if (fd == -1) {
         JNU_ThrowIOException (env, "Stream Closed");
         return 0;
     }
     if (IO_Available(fd, &ret)) {
