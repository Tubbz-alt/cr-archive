diff a/src/java.base/share/native/libjava/io_util.c b/src/java.base/share/native/libjava/io_util.c
--- a/src/java.base/share/native/libjava/io_util.c
+++ b/src/java.base/share/native/libjava/io_util.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1994, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1994, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -37,11 +37,11 @@
 
 jint
 readSingle(JNIEnv *env, jobject this, jfieldID fid) {
     jint nread;
     char ret;
-    FD fd = GET_FD(this, fid);
+    FD fd = getFD(env, this, fid);
     if (fd == -1) {
         JNU_ThrowIOException(env, "Stream Closed");
         return -1;
     }
     nread = IO_Read(fd, &ret, 1);
@@ -99,11 +99,11 @@
         }
     } else {
         buf = stackBuf;
     }
 
-    fd = GET_FD(this, fid);
+    fd = getFD(env, this, fid);
     if (fd == -1) {
         JNU_ThrowIOException(env, "Stream Closed");
         nread = -1;
     } else {
         nread = IO_Read(fd, buf, len);
@@ -125,11 +125,11 @@
 void
 writeSingle(JNIEnv *env, jobject this, jint byte, jboolean append, jfieldID fid) {
     // Discard the 24 high-order bits of byte. See OutputStream#write(int)
     char c = (char) byte;
     jint n;
-    FD fd = GET_FD(this, fid);
+    FD fd = getFD(env, this, fid);
     if (fd == -1) {
         JNU_ThrowIOException(env, "Stream Closed");
         return;
     }
     if (append == JNI_TRUE) {
@@ -176,11 +176,11 @@
     (*env)->GetByteArrayRegion(env, bytes, off, len, (jbyte *)buf);
 
     if (!(*env)->ExceptionOccurred(env)) {
         off = 0;
         while (len > 0) {
-            fd = GET_FD(this, fid);
+            fd = getFD(env, this, fid);
             if (fd == -1) {
                 JNU_ThrowIOException(env, "Stream Closed");
                 break;
             }
             if (append == JNI_TRUE) {
