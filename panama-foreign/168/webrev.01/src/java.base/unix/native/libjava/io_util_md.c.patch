diff a/src/java.base/unix/native/libjava/io_util_md.c b/src/java.base/unix/native/libjava/io_util_md.c
--- a/src/java.base/unix/native/libjava/io_util_md.c
+++ b/src/java.base/unix/native/libjava/io_util_md.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -90,10 +90,18 @@
         }
     }
     return fd;
 }
 
+FD getFD(JNIEnv *env, jobject obj, jfieldID fid) {
+  jobject fdo = (*env)->GetObjectField(env, obj, fid);
+  if (fdo == NULL) {
+    return -1;
+  }
+  return (*env)->GetIntField(env, fdo, IO_fd_fdID);
+}
+
 void
 fileOpen(JNIEnv *env, jobject this, jstring path, jfieldID fid, int flags)
 {
     WITH_PLATFORM_STRING(env, path, ps) {
         FD fd;
@@ -106,14 +114,14 @@
 #endif
         fd = handleOpen(ps, flags, 0666);
         if (fd != -1) {
             jobject fdobj;
             jboolean append;
-            SET_FD(this, fd, fid);
-
             fdobj = (*env)->GetObjectField(env, this, fid);
             if (fdobj != NULL) {
+                // Set FD
+                (*env)->SetIntField(env, fdobj, IO_fd_fdID, fd);
                 append = (flags & O_APPEND) == 0 ? JNI_FALSE : JNI_TRUE;
                 (*env)->SetBooleanField(env, fdobj, IO_append_fdID, append);
             }
         } else {
             throwFileNotFoundException(env, path);
