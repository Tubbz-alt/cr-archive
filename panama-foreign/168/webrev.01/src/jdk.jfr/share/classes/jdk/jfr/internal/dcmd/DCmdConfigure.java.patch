diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/DCmdConfigure.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/DCmdConfigure.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/DCmdConfigure.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/DCmdConfigure.java
@@ -30,11 +30,10 @@
 import jdk.jfr.FlightRecorder;
 import jdk.jfr.internal.LogLevel;
 import jdk.jfr.internal.LogTag;
 import jdk.jfr.internal.Logger;
 import jdk.jfr.internal.Options;
-import jdk.jfr.internal.PlatformRecorder;
 import jdk.jfr.internal.PrivateAccess;
 import jdk.jfr.internal.Repository;
 import jdk.jfr.internal.SecuritySupport.SafePath;
 
 /**
@@ -60,10 +59,11 @@
      * @throws DCmdException
      *             if the dump could not be completed
      */
     public String execute
     (
+            boolean verbose,
             String repositoryPath,
             String dumpPath,
             Integer stackDepth,
             Long globalBufferCount,
             Long globalBufferSize,
@@ -97,70 +97,90 @@
                 }
                 Logger.log(LogTag.JFR, LogLevel.INFO, "Base repository path set to " + repositoryPath);
             } catch (Exception e) {
                 throw new DCmdException("Could not use " + repositoryPath + " as repository. " + e.getMessage(), e);
             }
-            printRepositoryPath();
+            if (verbose) {
+                printRepositoryPath();
+            }
             updated = true;
         }
 
         if (dumpPath != null)  {
             Options.setDumpPath(new SafePath(dumpPath));
             Logger.log(LogTag.JFR, LogLevel.INFO, "Emergency dump path set to " + dumpPath);
-            printDumpPath();
+           if (verbose) {
+               printDumpPath();
+           }
             updated = true;
         }
 
         if (stackDepth != null)  {
             Options.setStackDepth(stackDepth);
             Logger.log(LogTag.JFR, LogLevel.INFO, "Stack depth set to " + stackDepth);
-            printStackDepth();
+            if (verbose) {
+                printStackDepth();
+            }
             updated = true;
         }
 
         if (globalBufferCount != null)  {
             Options.setGlobalBufferCount(globalBufferCount);
             Logger.log(LogTag.JFR, LogLevel.INFO, "Global buffer count set to " + globalBufferCount);
-            printGlobalBufferCount();
+            if (verbose) {
+                printGlobalBufferCount();
+            }
             updated = true;
         }
 
         if (globalBufferSize != null)  {
             Options.setGlobalBufferSize(globalBufferSize);
             Logger.log(LogTag.JFR, LogLevel.INFO, "Global buffer size set to " + globalBufferSize);
-            printGlobalBufferSize();
+            if (verbose) {
+                printGlobalBufferSize();
+            }
             updated = true;
         }
 
         if (threadBufferSize != null)  {
             Options.setThreadBufferSize(threadBufferSize);
             Logger.log(LogTag.JFR, LogLevel.INFO, "Thread buffer size set to " + threadBufferSize);
-            printThreadBufferSize();
+            if (verbose) {
+                printThreadBufferSize();
+            }
             updated = true;
         }
 
         if (memorySize != null) {
             Options.setMemorySize(memorySize);
             Logger.log(LogTag.JFR, LogLevel.INFO, "Memory size set to " + memorySize);
-            printMemorySize();
+            if (verbose) {
+                printMemorySize();
+            }
             updated = true;
         }
 
         if (maxChunkSize != null)  {
             Options.setMaxChunkSize(maxChunkSize);
             Logger.log(LogTag.JFR, LogLevel.INFO, "Max chunk size set to " + maxChunkSize);
-            printMaxChunkSize();
+            if (verbose) {
+                printMaxChunkSize();
+            }
             updated = true;
         }
 
         if (sampleThreads != null)  {
             Options.setSampleThreads(sampleThreads);
             Logger.log(LogTag.JFR, LogLevel.INFO, "Sample threads set to " + sampleThreads);
-            printSampleThreads();
+            if (verbose) {
+                printSampleThreads();
+            }
             updated = true;
         }
-
+        if (!verbose) {
+            return "";
+        }
         if (!updated) {
             println("Current configuration:");
             println();
             printRepositoryPath();
             printStackDepth();
