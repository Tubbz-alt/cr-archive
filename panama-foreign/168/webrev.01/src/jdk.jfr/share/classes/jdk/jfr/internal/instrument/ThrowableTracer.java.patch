diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/instrument/ThrowableTracer.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/instrument/ThrowableTracer.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/instrument/ThrowableTracer.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/instrument/ThrowableTracer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -25,38 +25,40 @@
 
 package jdk.jfr.internal.instrument;
 
 import java.util.concurrent.atomic.AtomicLong;
 
-import jdk.jfr.events.ErrorThrownEvent;
-import jdk.jfr.events.ExceptionThrownEvent;
+import jdk.jfr.events.Handlers;
+import jdk.jfr.internal.handlers.EventHandler;
 
 public final class ThrowableTracer {
 
-    private static AtomicLong numThrowables = new AtomicLong(0);
+    private static final AtomicLong numThrowables = new AtomicLong(0);
 
     public static void traceError(Error e, String message) {
         if (e instanceof OutOfMemoryError) {
             return;
         }
-        ErrorThrownEvent errorEvent = new ErrorThrownEvent();
-        errorEvent.message = message;
-        errorEvent.thrownClass = e.getClass();
-        errorEvent.commit();
+        long timestamp = EventHandler.timestamp();
 
-        ExceptionThrownEvent exceptionEvent = new ExceptionThrownEvent();
-        exceptionEvent.message = message;
-        exceptionEvent.thrownClass = e.getClass();
-        exceptionEvent.commit();
+        EventHandler h1 = Handlers.ERROR_THROWN;
+        if (h1.isEnabled()) {
+            h1.write(timestamp, 0L, message, e.getClass());
+        }
+        EventHandler h2 = Handlers.EXCEPTION_THROWN;
+        if (h2.isEnabled()) {
+            h2.write(timestamp, 0L, message, e.getClass());
+        }
         numThrowables.incrementAndGet();
     }
 
     public static void traceThrowable(Throwable t, String message) {
-        ExceptionThrownEvent event = new ExceptionThrownEvent();
-        event.message = message;
-        event.thrownClass = t.getClass();
-        event.commit();
+        EventHandler h = Handlers.EXCEPTION_THROWN;
+        if (h.isEnabled()) {
+            long timestamp = EventHandler.timestamp();
+            h.write(timestamp, 0L, message, t.getClass());
+        }
         numThrowables.incrementAndGet();
     }
 
     public static long numThrowables() {
         return numThrowables.get();
