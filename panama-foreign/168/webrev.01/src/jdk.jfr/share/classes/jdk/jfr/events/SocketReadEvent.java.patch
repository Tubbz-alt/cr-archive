diff a/src/jdk.jfr/share/classes/jdk/jfr/events/SocketReadEvent.java b/src/jdk.jfr/share/classes/jdk/jfr/events/SocketReadEvent.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/events/SocketReadEvent.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/events/SocketReadEvent.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -37,16 +37,12 @@
 @Label("Socket Read")
 @Category("Java Application")
 @Description("Reading data from a socket")
 public final class SocketReadEvent extends AbstractJDKEvent {
 
-    public static final ThreadLocal<SocketReadEvent> EVENT =
-        new ThreadLocal<>() {
-            @Override protected SocketReadEvent initialValue() {
-                return new SocketReadEvent();
-            }
-        };
+    // The order of these fields must be the same as the parameters in
+    // EventHandler::write(..., String, String, int, long, long, boolean)
 
     @Label("Remote Host")
     public String host;
 
     @Label("Remote Address")
@@ -65,15 +61,6 @@
     public long bytesRead;
 
     @Label("End of Stream")
     @Description("If end of stream was reached")
     public boolean endOfStream;
-
-    public void reset() {
-        host = null;
-        address = null;
-        port = 0;
-        timeout = 0;
-        bytesRead = 0L;
-        endOfStream = false;
-    }
 }
