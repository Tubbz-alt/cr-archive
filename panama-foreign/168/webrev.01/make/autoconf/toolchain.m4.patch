diff a/make/autoconf/toolchain.m4 b/make/autoconf/toolchain.m4
--- a/make/autoconf/toolchain.m4
+++ b/make/autoconf/toolchain.m4
@@ -632,11 +632,16 @@
     LINKER_VERSION_NUMBER="0.0"
   elif test  "x$TOOLCHAIN_TYPE" = xmicrosoft; then
     # There is no specific version flag, but all output starts with a version string.
     # First line typically looks something like:
     #   Microsoft (R) Incremental Linker Version 12.00.31101.0
+    # Reset PATH since it can contain a mix of WSL/linux paths and Windows paths from VS,
+    # which, in combination with WSLENV, will make the WSL layer complain
+    old_path="$PATH"
+    PATH=
     LINKER_VERSION_STRING=`$LD 2>&1 | $HEAD -n 1 | $TR -d '\r'`
+    PATH="$old_path"
     # Extract version number
     [ LINKER_VERSION_NUMBER=`$ECHO $LINKER_VERSION_STRING | \
         $SED -e 's/.* \([0-9][0-9]*\(\.[0-9][0-9]*\)*\).*/\1/'` ]
   elif test  "x$TOOLCHAIN_TYPE" = xgcc; then
     # gcc -Wl,-version output typically looks like:
@@ -730,17 +735,27 @@
     # a cygwin program for something completely different.
     AC_CHECK_PROG([LD], [link$EXE_SUFFIX],[link$EXE_SUFFIX],,, [$CYGWIN_LINK])
     UTIL_FIXUP_EXECUTABLE(LD)
     # Verify that we indeed succeeded with this trick.
     AC_MSG_CHECKING([if the found link.exe is actually the Visual Studio linker])
+
+    # Reset PATH since it can contain a mix of WSL/linux paths and Windows paths from VS,
+    # which, in combination with WSLENV, will make the WSL layer complain
+    old_path="$PATH"
+    PATH=
+
     "$LD" --version > /dev/null
+
     if test $? -eq 0 ; then
       AC_MSG_RESULT([no])
       AC_MSG_ERROR([This is the Cygwin link tool. Please check your PATH and rerun configure.])
     else
       AC_MSG_RESULT([yes])
     fi
+
+    PATH="$old_path"
+
     LDCXX="$LD"
     # jaotc being a windows program expects the linker to be supplied with exe suffix.
     LD_JAOTC="$LD$EXE_SUFFIX"
   else
     # All other toolchains use the compiler to link.
