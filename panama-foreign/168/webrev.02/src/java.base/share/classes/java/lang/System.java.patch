diff a/src/java.base/share/classes/java/lang/System.java b/src/java.base/share/classes/java/lang/System.java
--- a/src/java.base/share/classes/java/lang/System.java
+++ b/src/java.base/share/classes/java/lang/System.java
@@ -2049,11 +2049,10 @@
      * @param printStackTrace print stack trace when exception occurs
      *
      * @return JNI_OK for success, JNI_ERR for failure
      */
     private static int initPhase2(boolean printToStderr, boolean printStackTrace) {
-
         try {
             bootLayer = ModuleBootstrap.boot();
         } catch (Exception | Error e) {
             logInitException(printToStderr, printStackTrace,
                              "Error occurred during initialization of boot layer", e);
@@ -2066,27 +2065,19 @@
         return 0; // JNI_OK
     }
 
     /*
      * Invoked by VM.  Phase 3 is the final system initialization:
-     * 1. eagerly initialize bootstrap method factories that might interact
-     *    negatively with custom security managers and custom class loaders
-     * 2. set security manager
-     * 3. set system class loader
-     * 4. set TCCL
+     * 1. set security manager
+     * 2. set system class loader
+     * 3. set TCCL
      *
      * This method must be called after the module system initialization.
      * The security manager and system class loader may be a custom class from
      * the application classpath or modulepath.
      */
     private static void initPhase3() {
-
-        // Initialize the StringConcatFactory eagerly to avoid potential
-        // bootstrap circularity issues that could be caused by a custom
-        // SecurityManager
-        Unsafe.getUnsafe().ensureClassInitialized(StringConcatFactory.class);
-
         String smProp = System.getProperty("java.security.manager");
         if (smProp != null) {
             switch (smProp) {
                 case "disallow":
                     allowSecurityManager = NEVER;
