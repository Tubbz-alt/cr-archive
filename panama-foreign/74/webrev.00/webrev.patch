diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/unsafe/ForeignUnsafe.java
@@ -25,11 +25,13 @@
  */
 
 package jdk.incubator.foreign.unsafe;
 
 import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemorySegment;
 import jdk.internal.foreign.MemoryAddressImpl;
+import jdk.internal.foreign.MemorySegmentImpl;
 
 /**
  * Unsafe methods to allow interop between sun.misc.unsafe and memory access API.
  */
 public final class ForeignUnsafe {
@@ -63,6 +65,18 @@
      * @return the offset associated with the address.
      */
     public static long getUnsafeOffset(MemoryAddress address) {
         return ((MemoryAddressImpl)address).unsafeGetOffset();
     }
+
+    /**
+     * Returns a non-confined memory segment that has the same spatial and temporal bounds as the provided segment.
+     * Since the returned segment can be effectively accessed by multiple threads in an unconstrained fashion,
+     * this method should be used with care, as it might lead to JVM crashes - e.g. in the case where a thread {@code A}
+     * closes a segment while another thread {@code B} is accessing it.
+     * @param segment the segment from which an unconfined view is to be created.
+     * @return a non-confined memory segment that has the same spatial and temporal bounds as the provided segment.
+     */
+    public static MemorySegment asUnconfined(MemorySegment segment) {
+        return ((MemorySegmentImpl)segment).asUnconfined();
+    }
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
@@ -202,11 +202,11 @@
 
     // MemorySegmentProxy methods
 
     @Override
     public final void checkValidState() {
-        if (owner != Thread.currentThread()) {
+        if (owner != null && owner != Thread.currentThread()) {
             throw new IllegalStateException("Attempt to access segment outside owning thread");
         }
         scope.checkAliveConfined();
     }
 
@@ -228,10 +228,15 @@
             throw unsupportedAccessMode(ACQUIRE);
         }
         return new MemorySegmentImpl(min, base, length, mask, Thread.currentThread(), scope.acquire());
     }
 
+    public MemorySegment asUnconfined() {
+        checkValidState();
+        return new MemorySegmentImpl(min, base, length, mask, null, scope);
+    }
+
     void checkRange(long offset, long length, boolean writeAccess) {
         checkValidState();
         if (writeAccess && !isSet(WRITE)) {
             throw unsupportedAccessMode(WRITE);
         } else if (!writeAccess && !isSet(READ)) {
diff a/test/jdk/java/foreign/TestSharedAccess.java b/test/jdk/java/foreign/TestSharedAccess.java
--- a/test/jdk/java/foreign/TestSharedAccess.java
+++ b/test/jdk/java/foreign/TestSharedAccess.java
@@ -22,18 +22,20 @@
  *
  */
 
 /*
  * @test
+ * @modules jdk.incubator.foreign/jdk.incubator.foreign.unsafe
  * @run testng TestSharedAccess
  */
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.SequenceLayout;
+import jdk.incubator.foreign.unsafe.ForeignUnsafe;
 import org.testng.annotations.*;
 
 import java.lang.invoke.VarHandle;
 import java.util.ArrayList;
 import java.util.List;
@@ -89,10 +91,34 @@
             });
             assertEquals(accessCount.get(), 1024);
         }
     }
 
+    @Test
+    public void testSharedUnsafe() throws Throwable {
+        try (MemorySegment s = MemorySegment.allocateNative(4)) {
+            setInt(s.baseAddress(), 42);
+            assertEquals(getInt(s.baseAddress()), 42);
+            List<Thread> threads = new ArrayList<>();
+            MemorySegment sharedSegment = ForeignUnsafe.asUnconfined(s);
+            for (int i = 0 ; i < 1000 ; i++) {
+                threads.add(new Thread(() -> {
+                    assertEquals(getInt(sharedSegment.baseAddress()), 42);
+                }));
+            }
+            threads.forEach(Thread::start);
+            threads.forEach(t -> {
+                try {
+                    t.join();
+                } catch (Throwable e) {
+                    throw new IllegalStateException(e);
+                }
+            });
+        }
+    }
+
+
     @Test(expectedExceptions=IllegalStateException.class)
     public void testBadCloseWithPendingAcquire() throws InterruptedException {
         try (MemorySegment segment = MemorySegment.allocateNative(16)) {
             Spliterator<MemorySegment> spliterator = segment.spliterator(MemoryLayout.ofSequence(16, MemoryLayouts.JAVA_BYTE));
             Runnable r = () -> spliterator.forEachRemaining(s -> {
