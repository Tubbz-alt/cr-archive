diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
@@ -776,11 +776,11 @@
     }
 
     private static void copy(MemoryAddress addr, byte[] bytes) {
         var heapSegment = MemorySegment.ofArray(bytes);
         addr.segment().copyFrom(heapSegment);
-        MemoryAccess.setByte(addr, bytes.length, (byte)0);
+        MemoryAccess.setByteAtOffset(addr, bytes.length, (byte)0);
     }
 
     private static MemorySegment toCString(byte[] bytes) {
         MemorySegment segment = MemorySegment.allocateNative(bytes.length + 1, 1L);
         MemoryAddress addr = segment.baseAddress();
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
@@ -268,11 +268,11 @@
     }
 
     private static int strlen(MemoryAddress address) {
         // iterate until overflow (String can only hold a byte[], whose length can be expressed as an int)
         for (int offset = 0; offset >= 0; offset++) {
-            byte curr = MemoryAccess.getByte(address, offset);
+            byte curr = MemoryAccess.getByteAtOffset(address, offset);
             if (curr == 0) {
                 return offset;
             }
         }
         throw new IllegalArgumentException("String too large");
diff a/test/jdk/java/foreign/StdLibTest.java b/test/jdk/java/foreign/StdLibTest.java
--- a/test/jdk/java/foreign/StdLibTest.java
+++ b/test/jdk/java/foreign/StdLibTest.java
@@ -231,13 +231,13 @@
         String strcat(String s1, String s2) throws Throwable {
             try (MemorySegment buf = MemorySegment.allocateNative(s1.length() + s2.length() + 1) ;
                  MemorySegment other = toCString(s2)) {
                 char[] chars = s1.toCharArray();
                 for (long i = 0 ; i < chars.length ; i++) {
-                    setByte(buf.baseAddress(), i, (byte)chars[(int)i]);
+                    setByteAtOffset(buf.baseAddress(), i, (byte)chars[(int)i]);
                 }
-                setByte(buf.baseAddress(), chars.length, (byte)'\0');
+                setByteAtOffset(buf.baseAddress(), chars.length, (byte)'\0');
                 return toJavaStringRestricted(((MemoryAddress)strcat.invokeExact(buf.baseAddress(), other.baseAddress())));
             }
         }
 
         int strcmp(String s1, String s2) throws Throwable {
@@ -259,11 +259,11 @@
             }
         }
 
         Tm gmtime(long arg) throws Throwable {
             try (MemorySegment time = MemorySegment.allocateNative(8)) {
-                setLong(time.baseAddress(), 0, arg);
+                setLong(time.baseAddress(), arg);
                 return new Tm((MemoryAddress)gmtime.invokeExact(time.baseAddress()));
             }
         }
 
         static class Tm {
@@ -277,35 +277,35 @@
                 this.base = MemorySegment.ofNativeRestricted(base, SIZE, Thread.currentThread(),
                         null, null).baseAddress();
             }
 
             int sec() {
-                return getInt(base, 0);
+                return getIntAtOffset(base, 0);
             }
             int min() {
-                return getInt(base, 4);
+                return getIntAtOffset(base, 4);
             }
             int hour() {
-                return getInt(base, 8);
+                return getIntAtOffset(base, 8);
             }
             int mday() {
-                return getInt(base, 12);
+                return getIntAtOffset(base, 12);
             }
             int mon() {
-                return getInt(base, 16);
+                return getIntAtOffset(base, 16);
             }
             int year() {
-                return getInt(base, 20);
+                return getIntAtOffset(base, 20);
             }
             int wday() {
-                return getInt(base, 24);
+                return getIntAtOffset(base, 24);
             }
             int yday() {
-                return getInt(base, 28);
+                return getIntAtOffset(base, 28);
             }
             boolean isdst() {
-                byte b = getByte(base, 32);
+                byte b = getByteAtOffset(base, 32);
                 return b != 0;
             }
         }
 
         int[] qsort(int[] arr) throws Throwable {
@@ -324,12 +324,12 @@
                 return nativeArr.toIntArray();
             }
         }
 
         static int qsortCompare(MemorySegment base, MemoryAddress addr1, MemoryAddress addr2) {
-            return getInt(base.baseAddress(), addr1.rebase(base).segmentOffset()) -
-                   getInt(base.baseAddress(), addr2.rebase(base).segmentOffset());
+            return getIntAtOffset(base.baseAddress(), addr1.rebase(base).segmentOffset()) -
+                   getIntAtOffset(base.baseAddress(), addr2.rebase(base).segmentOffset());
         }
 
         int rand() throws Throwable {
             return (int)rand.invokeExact();
         }
