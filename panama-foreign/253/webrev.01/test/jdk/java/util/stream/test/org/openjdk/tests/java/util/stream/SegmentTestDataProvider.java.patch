diff a/test/jdk/java/util/stream/test/org/openjdk/tests/java/util/stream/SegmentTestDataProvider.java b/test/jdk/java/util/stream/test/org/openjdk/tests/java/util/stream/SegmentTestDataProvider.java
--- a/test/jdk/java/util/stream/test/org/openjdk/tests/java/util/stream/SegmentTestDataProvider.java
+++ b/test/jdk/java/util/stream/test/org/openjdk/tests/java/util/stream/SegmentTestDataProvider.java
@@ -46,66 +46,66 @@
     static VarHandle LONG_HANDLE = MemoryLayouts.JAVA_LONG.varHandle(long.class);
     static VarHandle FLOAT_HANDLE = MemoryLayouts.JAVA_FLOAT.varHandle(float.class);
     static VarHandle DOUBLE_HANDLE = MemoryLayouts.JAVA_DOUBLE.varHandle(double.class);
 
     static boolean compareSegmentsByte(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
-        Function<MemorySegment, Byte> mapper = segment -> (byte)BYTE_HANDLE.get(segment.baseAddress());
+        Function<MemorySegment, Byte> mapper = segment -> (byte)BYTE_HANDLE.get(segment.address());
         List<Byte> list1 = segments1.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         List<Byte> list2 = segments2.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         return list1.equals(list2);
     }
 
     static boolean compareSegmentsChar(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
-        Function<MemorySegment, Character> mapper = segment -> (char)CHAR_HANDLE.get(segment.baseAddress());
+        Function<MemorySegment, Character> mapper = segment -> (char)CHAR_HANDLE.get(segment.address());
         List<Character> list1 = segments1.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         List<Character> list2 = segments2.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         return list1.equals(list2);
     }
 
     static boolean compareSegmentsShort(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
-        Function<MemorySegment, Short> mapper = segment -> (short)SHORT_HANDLE.get(segment.baseAddress());
+        Function<MemorySegment, Short> mapper = segment -> (short)SHORT_HANDLE.get(segment.address());
         List<Short> list1 = segments1.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         List<Short> list2 = segments2.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         return list1.equals(list2);
     }
 
     static boolean compareSegmentsInt(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
-        Function<MemorySegment, Integer> mapper = segment -> (int)INT_HANDLE.get(segment.baseAddress());
+        Function<MemorySegment, Integer> mapper = segment -> (int)INT_HANDLE.get(segment.address());
         List<Integer> list1 = segments1.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         List<Integer> list2 = segments2.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         return list1.equals(list2);
     }
 
     static boolean compareSegmentsLong(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
-        Function<MemorySegment, Long> mapper = segment -> (long)LONG_HANDLE.get(segment.baseAddress());
+        Function<MemorySegment, Long> mapper = segment -> (long)LONG_HANDLE.get(segment.address());
         List<Long> list1 = segments1.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         List<Long> list2 = segments2.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         return list1.equals(list2);
     }
 
     static boolean compareSegmentsFloat(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
-        Function<MemorySegment, Float> mapper = segment -> (float)FLOAT_HANDLE.get(segment.baseAddress());
+        Function<MemorySegment, Float> mapper = segment -> (float)FLOAT_HANDLE.get(segment.address());
         List<Float> list1 = segments1.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         List<Float> list2 = segments2.stream()
                 .map(mapper)
@@ -120,11 +120,11 @@
             input.accept(dest);
         };
     }
 
     static boolean compareSegmentsDouble(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
-        Function<MemorySegment, Double> mapper = segment -> (double)DOUBLE_HANDLE.get(segment.baseAddress());
+        Function<MemorySegment, Double> mapper = segment -> (double)DOUBLE_HANDLE.get(segment.address());
         List<Double> list1 = segments1.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         List<Double> list2 = segments2.stream()
                 .map(mapper)
@@ -132,11 +132,11 @@
         return list1.equals(list2);
     }
 
     static void initSegment(MemorySegment segment) {
         for (int i = 0 ; i < segment.byteSize() ; i++) {
-            BYTE_HANDLE.set(segment.baseAddress(), (byte)i);
+            BYTE_HANDLE.set(segment.address(), (byte)i);
         }
     }
 
     static Object[][] spliteratorTestData = {
             { "bytes", MemoryLayout.ofSequence(1024, MemoryLayouts.JAVA_BYTE), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsByte },
