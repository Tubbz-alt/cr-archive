diff a/test/jdk/java/foreign/TestUpcall.java b/test/jdk/java/foreign/TestUpcall.java
--- a/test/jdk/java/foreign/TestUpcall.java
+++ b/test/jdk/java/foreign/TestUpcall.java
@@ -99,11 +99,11 @@
 
     static MemoryAddress dummyAddress;
 
     @BeforeClass
     void setup() {
-        dummyAddress = abi.upcallStub(DUMMY, FunctionDescriptor.ofVoid()).baseAddress();
+        dummyAddress = abi.upcallStub(DUMMY, FunctionDescriptor.ofVoid()).address();
     }
 
     @AfterClass
     void teardown() {
         dummyAddress.segment().close();
@@ -194,21 +194,21 @@
 
         MemoryLayout[] paramLayouts = params.stream().map(p -> p.layout(fields)).toArray(MemoryLayout[]::new);
         FunctionDescriptor func = ret != Ret.VOID
                 ? FunctionDescriptor.of(firstlayout, paramLayouts)
                 : FunctionDescriptor.ofVoid(paramLayouts);
-        MemoryAddress stub = abi.upcallStub(mh, func).baseAddress();
+        MemoryAddress stub = abi.upcallStub(mh, func).address();
         return stub;
     }
 
     private static void assertStructEquals(MemorySegment actual, MemorySegment expected, MemoryLayout layout) {
         assertEquals(actual.byteSize(), expected.byteSize());
         GroupLayout g = (GroupLayout) layout;
         for (MemoryLayout field : g.memberLayouts()) {
             if (field instanceof ValueLayout) {
                 VarHandle vh = g.varHandle(vhCarrier(field), MemoryLayout.PathElement.groupElement(field.name().orElseThrow()));
-                assertEquals(vh.get(actual.baseAddress()), vh.get(expected.baseAddress()));
+                assertEquals(vh.get(actual.address()), vh.get(expected.address()));
             }
         }
     }
 
     private static Class<?> vhCarrier(MemoryLayout layout) {
