diff a/test/jdk/java/foreign/CallGeneratorHelper.java b/test/jdk/java/foreign/CallGeneratorHelper.java
--- a/test/jdk/java/foreign/CallGeneratorHelper.java
+++ b/test/jdk/java/foreign/CallGeneratorHelper.java
@@ -346,17 +346,17 @@
         } else if (isPointer(layout)) {
             MemorySegment segment = MemorySegment.allocateNative(1);
             if (check) {
                 checks.add(o -> {
                     try {
-                        assertEquals((MemoryAddress)o, segment.baseAddress());
+                        assertEquals((MemoryAddress)o, segment.address());
                     } catch (Throwable ex) {
                         throw new IllegalStateException(ex);
                     }
                 });
             }
-            return segment.baseAddress();
+            return segment.address();
         } else if (layout instanceof ValueLayout) {
             if (isIntegral(layout)) {
                 if (check) {
                     checks.add(o -> assertEquals(o, 42));
                 }
@@ -385,21 +385,21 @@
             Object value = makeArg(l, fieldsCheck, check);
             if (isPointer(l)) {
                 value = ((MemoryAddress)value).toRawLongValue();
             }
             //set value
-            accessor.set(str.baseAddress(), value);
+            accessor.set(str.address(), value);
             //add check
             if (check) {
                 assertTrue(fieldsCheck.size() == 1);
                 checks.add(o -> {
                     MemorySegment actual = (MemorySegment)o;
                     try {
                         if (isPointer(l)) {
-                            fieldsCheck.get(0).accept(MemoryAddress.ofLong((long)accessor.get(actual.baseAddress())));
+                            fieldsCheck.get(0).accept(MemoryAddress.ofLong((long)accessor.get(actual.address())));
                         } else {
-                            fieldsCheck.get(0).accept(accessor.get(actual.baseAddress()));
+                            fieldsCheck.get(0).accept(accessor.get(actual.address()));
                         }
                     } catch (Throwable ex) {
                         throw new IllegalStateException(ex);
                     }
                 });
