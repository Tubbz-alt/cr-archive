diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
@@ -146,11 +146,11 @@
         ptr = ptr.addOffset(layouts.length * VA_SLOT_SIZE_BYTES);
     }
 
     static WinVaList ofAddress(MemoryAddress addr) {
         MemorySegment segment = MemorySegment.ofNativeRestricted(addr, Long.MAX_VALUE, Thread.currentThread(), null, null);
-        return new WinVaList(segment.baseAddress(), List.of(segment), null);
+        return new WinVaList(segment.address(), List.of(segment), null);
     }
 
     static Builder builder(SharedUtils.Allocator allocator) {
         return new Builder(allocator);
     }
@@ -234,21 +234,21 @@
                 return EMPTY;
             }
             MemorySegment ms = allocator.allocate(VA_SLOT_SIZE_BYTES * args.size());
             List<MemorySegment> attachedSegments = new ArrayList<>();
             attachedSegments.add(ms);
-            MemoryAddress addr = ms.baseAddress();
+            MemoryAddress addr = ms.address();
             for (SimpleVaArg arg : args) {
                 if (arg.carrier == MemorySegment.class) {
                     MemorySegment msArg = ((MemorySegment) arg.value);
                     TypeClass typeClass = TypeClass.typeClassFor(arg.layout);
                     switch (typeClass) {
                         case STRUCT_REFERENCE -> {
                             MemorySegment copy = allocator.allocate(arg.layout);
                             copy.copyFrom(msArg); // by-value
                             attachedSegments.add(copy);
-                            VH_address.set(addr, copy.baseAddress());
+                            VH_address.set(addr, copy.address());
                         }
                         case STRUCT_REGISTER -> {
                             MemorySegment slice = ms.asSlice(addr.segmentOffset(), VA_SLOT_SIZE_BYTES);
                             slice.copyFrom(msArg);
                         }
@@ -259,9 +259,9 @@
                     writer.set(addr, arg.value);
                 }
                 addr = addr.addOffset(VA_SLOT_SIZE_BYTES);
             }
 
-            return new WinVaList(ms.baseAddress(), attachedSegments, null);
+            return new WinVaList(ms.address(), attachedSegments, null);
         }
     }
 }
