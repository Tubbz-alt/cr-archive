diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/Binding.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/Binding.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/Binding.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/Binding.java
@@ -213,11 +213,11 @@
             MethodHandles.Lookup lookup = MethodHandles.lookup();
             MH_UNBOX_ADDRESS = lookup.findVirtual(MemoryAddress.class, "toRawLongValue",
                     methodType(long.class));
             MH_BOX_ADDRESS = lookup.findStatic(MemoryAddress.class, "ofLong",
                     methodType(MemoryAddress.class, long.class));
-            MH_BASE_ADDRESS = lookup.findVirtual(MemorySegment.class, "baseAddress",
+            MH_BASE_ADDRESS = lookup.findVirtual(MemorySegment.class, "address",
                     methodType(MemoryAddress.class));
             MH_COPY_BUFFER = lookup.findStatic(Binding.class, "copyBuffer",
                     methodType(MemorySegment.class, MemorySegment.class, long.class, long.class, NativeScope.class));
             MH_ALLOCATE_BUFFER = lookup.findStatic(MemorySegment.class, "allocateNative",
                     methodType(MemorySegment.class, long.class, long.class));
@@ -516,20 +516,20 @@
         }
 
         @Override
         public void unbox(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc, NativeScope scope) {
             MemorySegment operand = (MemorySegment) stack.pop();
-            MemoryAddress baseAddress = operand.baseAddress();
+            MemoryAddress baseAddress = operand.address();
             MemoryAddress readAddress = baseAddress.addOffset(offset);
             stack.push(SharedUtils.read(readAddress, type));
         }
 
         @Override
         public void box(Deque<Object> stack, BindingInterpreter.LoadFunc loadFunc) {
             Object value = stack.pop();
             MemorySegment operand = (MemorySegment) stack.pop();
-            MemoryAddress baseAddress = operand.baseAddress();
+            MemoryAddress baseAddress = operand.address();
             MemoryAddress writeAddress = baseAddress.addOffset(offset);
             SharedUtils.write(writeAddress, type, value);
         }
 
         private VarHandle varHandle() {
@@ -831,16 +831,16 @@
             stack.push(MemoryAddress.class);
         }
 
         @Override
         public void unbox(Deque<Object> stack, BindingInterpreter.StoreFunc storeFunc, NativeScope scope) {
-            stack.push(((MemorySegment) stack.pop()).baseAddress());
+            stack.push(((MemorySegment) stack.pop()).address());
         }
 
         @Override
         public void box(Deque<Object> stack, BindingInterpreter.LoadFunc loadFunc) {
-            stack.push(((MemorySegment) stack.pop()).baseAddress());
+            stack.push(((MemorySegment) stack.pop()).address());
         }
 
         @Override
         public MethodHandle specializeUnbox(MethodHandle specializedHandle, int insertPos) {
             return filterArguments(specializedHandle, insertPos, MH_BASE_ADDRESS);
