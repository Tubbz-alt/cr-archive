diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractNativeScope.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractNativeScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractNativeScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractNativeScope.java
@@ -95,21 +95,21 @@
         public MemoryAddress allocate(long bytesSize, long bytesAlignment) {
             checkOwnerThread();
             if (bytesSize > MAX_ALLOC_SIZE) {
                 MemorySegment segment = newSegment(bytesSize, bytesAlignment);
                 return segment.withAccessModes(SCOPE_MASK)
-                        .baseAddress();
+                        .address();
             }
             for (int i = 0; i < 2; i++) {
-                long min = ((MemoryAddressImpl) segment.baseAddress()).unsafeGetOffset();
+                long min = ((MemoryAddressImpl) segment.address()).unsafeGetOffset();
                 long start = Utils.alignUp(min + sp, bytesAlignment) - min;
                 try {
                     MemorySegment slice = segment.asSlice(start, bytesSize)
                             .withAccessModes(SCOPE_MASK);
                     sp = start + bytesSize;
                     size += Utils.alignUp(bytesSize, bytesAlignment);
-                    return slice.baseAddress();
+                    return slice.address();
                 } catch (IndexOutOfBoundsException ex) {
                     sp = 0L;
                     segment = newSegment(BLOCK_SIZE, 1L);
                 }
             }
@@ -137,17 +137,17 @@
         }
 
         @Override
         public MemoryAddress allocate(long bytesSize, long bytesAlignment) {
             checkOwnerThread();
-            long min = ((MemoryAddressImpl)segment.baseAddress()).unsafeGetOffset();
+            long min = ((MemoryAddressImpl)segment.address()).unsafeGetOffset();
             long start = Utils.alignUp(min + sp, bytesAlignment) - min;
             try {
                 MemorySegment slice = segment.asSlice(start, bytesSize)
                         .withAccessModes(SCOPE_MASK);
                 sp = start + bytesSize;
-                return slice.baseAddress();
+                return slice.address();
             } catch (IndexOutOfBoundsException ex) {
                 throw new OutOfMemoryError("Not enough space left to allocate");
             }
         }
     }
