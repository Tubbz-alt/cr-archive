diff a/src/java.base/windows/native/libjava/jni_util_md.c b/src/java.base/windows/native/libjava/jni_util_md.c
--- a/src/java.base/windows/native/libjava/jni_util_md.c
+++ b/src/java.base/windows/native/libjava/jni_util_md.c
@@ -24,19 +24,45 @@
  */
 
 #include <stdlib.h>
 #include <string.h>
 #include <windows.h>
+#include <psapi.h>
 #include <locale.h>
 
 #include "jni.h"
 #include "jni_util.h"
 
 void* getProcessHandle() {
     return (void*)GetModuleHandle(NULL);
 }
 
+/*
+ * Windows doesn't have an RTLD_DEFAULT equivalent, so in stead we have to
+ * iterate over all the modules loaded by the process to implement the
+ * default library behaviour.
+ */
+void* findEntryInProcess(const char* name) {
+    HANDLE hProcess = GetCurrentProcess();
+
+    HMODULE hMods[1024];
+    DWORD cbNeeded; // array size in bytes
+
+    // first come, first served
+    if(EnumProcessModules(hProcess, hMods, sizeof(hMods), &cbNeeded)) {
+        for (int i = 0; i < (cbNeeded / sizeof(HMODULE)); i++) {
+            HMODULE mod = hMods[i];
+            FARPROC proc = GetProcAddress(mod, name);
+            if(proc != NULL) {
+                return proc;
+            }
+        }
+    }
+
+    return NULL;
+}
+
 /*
  * Windows symbols can be simple like JNI_OnLoad or __stdcall format
  * like _JNI_OnLoad@8. We need to handle both.
  */
 void buildJniFunctionName(const char *sym, const char *cname,
