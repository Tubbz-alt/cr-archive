diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java
@@ -9,11 +9,11 @@
  * The final address at which the dereference will occur will be computed by offsetting the base address by
  * the specified offset, as if by calling {@link MemoryAddress#addOffset(long)} on the specified base address.
  */
 public final class MemoryAccess {
 
-    public MemoryAccess() {
+    private MemoryAccess() {
         // just the one
     }
 
     private static final VarHandle byte_LE_handle = indexedHandle(MemoryLayouts.BITS_8_LE, byte.class);
     private static final VarHandle char_LE_handle = indexedHandle(MemoryLayouts.BITS_16_LE, char.class);
@@ -40,11 +40,11 @@
     byte value = (byte)handle.get(addr, offset);
      * }</pre></blockquote>
      *
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a byte value read from {@code addr} at the offset specified by {@code index}.
+     * @return a byte value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static byte getByte_LE(MemoryAddress addr, long offset) {
         return (byte)byte_LE_handle.get(addr, offset);
     }
 
@@ -72,11 +72,11 @@
     VarHandle handle = MemoryHandles.withStride(BITS_16_LE.withBitAlignment(8).varHandle(char.class), 1L);
     char value = (char)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a char value read from {@code addr} at the offset specified by {@code index}.
+     * @return a char value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static char getChar_LE(MemoryAddress addr, long offset) {
         return (char)char_LE_handle.get(addr, offset);
     }
 
@@ -104,11 +104,11 @@
     VarHandle handle = MemoryHandles.withStride(BITS_16_LE.withBitAlignment(8).varHandle(short.class), 1L);
     short value = (short)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a short value read from {@code addr} at the offset specified by {@code index}.
+     * @return a short value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static short getShort_LE(MemoryAddress addr, long offset) {
         return (short)short_LE_handle.get(addr, offset);
     }
 
@@ -136,11 +136,11 @@
     VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(int.class), 1L);
     int value = (int)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return an int value read from {@code addr} at the offset specified by {@code index}.
+     * @return an int value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static int getInt_LE(MemoryAddress addr, long offset) {
         return (int)int_LE_handle.get(addr, offset);
     }
 
@@ -168,11 +168,11 @@
     VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(float.class), 1L);
     float value = (float)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a float value read from {@code addr} at the offset specified by {@code index}.
+     * @return a float value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static float getFloat_LE(MemoryAddress addr, long offset) {
         return (float)float_LE_handle.get(addr, offset);
     }
 
@@ -200,11 +200,11 @@
     VarHandle handle = MemoryHandles.withStride(BITS_64_LE.withBitAlignment(8).varHandle(long.class), 1L);
     long value = (long)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a long value read from {@code addr} at the offset specified by {@code index}.
+     * @return a long value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static long getLong_LE(MemoryAddress addr, long offset) {
         return (long)long_LE_handle.get(addr, offset);
     }
 
@@ -232,11 +232,11 @@
     VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(double.class), 1L);
     double value = (double)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a double value read from {@code addr} at the offset specified by {@code index}.
+     * @return a double value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static double getDouble_LE(MemoryAddress addr, long offset) {
         return (double)double_LE_handle.get(addr, offset);
     }
 
@@ -265,11 +265,11 @@
     byte value = (byte)handle.get(addr, offset);
      * }</pre></blockquote>
      *
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a byte value read from {@code addr} at the offset specified by {@code index}.
+     * @return a byte value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static byte getByte_BE(MemoryAddress addr, long offset) {
         return (byte)byte_BE_handle.get(addr, offset);
     }
 
@@ -297,11 +297,11 @@
     VarHandle handle = MemoryHandles.withStride(BITS_16_BE.withBitAlignment(8).varHandle(char.class), 1L);
     char value = (char)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a char value read from {@code addr} at the offset specified by {@code index}.
+     * @return a char value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static char getChar_BE(MemoryAddress addr, long offset) {
         return (char)char_BE_handle.get(addr, offset);
     }
 
@@ -329,11 +329,11 @@
     VarHandle handle = MemoryHandles.withStride(BITS_16_BE.withBitAlignment(8).varHandle(short.class), 1L);
     short value = (short)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a short value read from {@code addr} at the offset specified by {@code index}.
+     * @return a short value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static short getShort_BE(MemoryAddress addr, long offset) {
         return (short)short_BE_handle.get(addr, offset);
     }
 
@@ -361,11 +361,11 @@
     VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(int.class), 1L);
     int value = (int)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return an int value read from {@code addr} at the offset specified by {@code index}.
+     * @return an int value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static int getInt_BE(MemoryAddress addr, long offset) {
         return (int)int_BE_handle.get(addr, offset);
     }
 
@@ -393,11 +393,11 @@
     VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(float.class), 1L);
     float value = (float)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a float value read from {@code addr} at the offset specified by {@code index}.
+     * @return a float value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static float getFloat_BE(MemoryAddress addr, long offset) {
         return (float)float_BE_handle.get(addr, offset);
     }
 
@@ -425,11 +425,11 @@
     VarHandle handle = MemoryHandles.withStride(BITS_64_BE.withBitAlignment(8).varHandle(long.class), 1L);
     long value = (long)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a long value read from {@code addr} at the offset specified by {@code index}.
+     * @return a long value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static long getLong_BE(MemoryAddress addr, long offset) {
         return (long)long_BE_handle.get(addr, offset);
     }
 
@@ -457,11 +457,11 @@
     VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(double.class), 1L);
     double value = (double)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a double value read from {@code addr} at the offset specified by {@code index}.
+     * @return a double value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static double getDouble_BE(MemoryAddress addr, long offset) {
         return (double)double_BE_handle.get(addr, offset);
     }
 
@@ -490,11 +490,11 @@
     byte value = (byte)handle.get(addr, offset);
      * }</pre></blockquote>
      *
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a byte value read from {@code addr} at the offset specified by {@code index}.
+     * @return a byte value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static byte getByte(MemoryAddress addr, long offset) {
         return (byte)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? byte_BE_handle : byte_LE_handle).get(addr, offset);
     }
 
@@ -522,11 +522,11 @@
     VarHandle handle = MemoryHandles.withStride(JAVA_CHAR.withBitAlignment(8).varHandle(char.class), 1L);
     char value = (char)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a char value read from {@code addr} at the offset specified by {@code index}.
+     * @return a char value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static char getChar(MemoryAddress addr, long offset) {
         return (char)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? char_BE_handle : char_LE_handle).get(addr, offset);
     }
 
@@ -554,11 +554,11 @@
     VarHandle handle = MemoryHandles.withStride(JAVA_SHORT.withBitAlignment(8).varHandle(short.class), 1L);
     short value = (short)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a short value read from {@code addr} at the offset specified by {@code index}.
+     * @return a short value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static short getShort(MemoryAddress addr, long offset) {
         return (short)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? short_BE_handle : short_LE_handle).get(addr, offset);
     }
 
@@ -586,11 +586,11 @@
     VarHandle handle = MemoryHandles.withStride(JAVA_INT.withBitAlignment(8).varHandle(int.class), 1L);
     int value = (int)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return an int value read from {@code addr} at the offset specified by {@code index}.
+     * @return an int value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static int getInt(MemoryAddress addr, long offset) {
         return (int)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? int_BE_handle : int_LE_handle).get(addr, offset);
     }
 
@@ -618,11 +618,11 @@
     VarHandle handle = MemoryHandles.withStride(JAVA_FLOAT.withBitAlignment(8).varHandle(float.class), 1L);
     float value = (float)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a float value read from {@code addr} at the offset specified by {@code index}.
+     * @return a float value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static float getFloat(MemoryAddress addr, long offset) {
         return (float)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? float_BE_handle : float_LE_handle).get(addr, offset);
     }
 
@@ -650,11 +650,11 @@
     VarHandle handle = MemoryHandles.withStride(JAVA_LONG.withBitAlignment(8).varHandle(long.class), 1L);
     long value = (long)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a long value read from {@code addr} at the offset specified by {@code index}.
+     * @return a long value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static long getLong(MemoryAddress addr, long offset) {
         return (long)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? long_BE_handle : long_LE_handle).get(addr, offset);
     }
 
@@ -682,11 +682,11 @@
     VarHandle handle = MemoryHandles.withStride(JAVA_DOUBLE.withBitAlignment(8).varHandle(double.class), 1L);
     double value = (double)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a double value read from {@code addr} at the offset specified by {@code index}.
+     * @return a double value read from {@code addr} at the offset specified by {@code offset}.
      */
     public static double getDouble(MemoryAddress addr, long offset) {
         return (double)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? double_BE_handle : double_LE_handle).get(addr, offset);
     }
 
@@ -714,11 +714,11 @@
     VarHandle handle = MemoryHandles.asAddressHandle(MemoryHandles.withStride(JAVA_LONG.withBitAlignment(8).varHandle(long.class), 1L));
     MemoryAddress value = (MemoryAddress)handle.get(addr, offset);
      * }</pre></blockquote>
      * @param addr base address.
      * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a memory address read from {@code addr} at the offset specified by {@code index}.
+     * @return a memory address read from {@code addr} at the offset specified by {@code offset}.
      */
     public static MemoryAddress getAddress(MemoryAddress addr, long offset) {
         return (MemoryAddress)address_handle.get(addr, offset);
     }
 
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java
@@ -24,11 +24,10 @@
  *
  */
 
 package jdk.incubator.foreign;
 
-import java.lang.invoke.VarHandle;
 import java.nio.ByteOrder;
 
 /**
  * This class defines useful layout constants. Some of the constants defined in this class are explicit in both
  * size and byte order (see {@link #BITS_64_BE}), and can therefore be used to explicitly and unambiguously specify the
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -405,11 +405,11 @@
 
     /**
      * Copy the contents of this memory segment into a fresh short array.
      * @return a fresh short array copy of this memory segment.
      * @throws UnsupportedOperationException if this segment does not feature the {@link #READ} access mode, or if this
-     * segment's contents cannot be copied into a {@link short[]} instance, e.g. because {@code byteSize() % 4 != 0},
+     * segment's contents cannot be copied into a {@link short[]} instance, e.g. because {@code byteSize() % 2 != 0},
      * or {@code byteSize() / 2 > Integer#MAX_VALUE}.
      * @throws IllegalStateException if this segment has been closed, or if access occurs from a thread other than the
      * thread owning this segment.
      */
     short[] toShortArray();
