diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java
--- /dev/null
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryAccess.java
@@ -0,0 +1,744 @@
+package jdk.incubator.foreign;
+
+import java.lang.invoke.VarHandle;
+import java.nio.ByteOrder;
+
+/**
+ * This class defines ready-made static accessors which can be used to dereference memory segments in many ways.
+ * Each accessor (see {@link #getInt(MemoryAddress, long)} takes a <em>base</em> address and an offset (expressed in bytes).
+ * The final address at which the dereference will occur will be computed by offsetting the base address by
+ * the specified offset, as if by calling {@link MemoryAddress#addOffset(long)} on the specified base address.
+ */
+public final class MemoryAccess {
+
+    public MemoryAccess() {
+        // just the one
+    }
+
+    private static final VarHandle byte_LE_handle = indexedHandle(MemoryLayouts.BITS_8_LE, byte.class);
+    private static final VarHandle char_LE_handle = indexedHandle(MemoryLayouts.BITS_16_LE, char.class);
+    private static final VarHandle short_LE_handle = indexedHandle(MemoryLayouts.BITS_16_LE, short.class);
+    private static final VarHandle int_LE_handle = indexedHandle(MemoryLayouts.BITS_32_LE, int.class);
+    private static final VarHandle float_LE_handle = indexedHandle(MemoryLayouts.BITS_32_LE, float.class);
+    private static final VarHandle long_LE_handle = indexedHandle(MemoryLayouts.BITS_64_LE, long.class);
+    private static final VarHandle double_LE_handle = indexedHandle(MemoryLayouts.BITS_64_LE, double.class);
+    private static final VarHandle byte_BE_handle = indexedHandle(MemoryLayouts.BITS_8_BE, byte.class);
+    private static final VarHandle char_BE_handle = indexedHandle(MemoryLayouts.BITS_16_BE, char.class);
+    private static final VarHandle short_BE_handle = indexedHandle(MemoryLayouts.BITS_16_BE, short.class);
+    private static final VarHandle int_BE_handle = indexedHandle(MemoryLayouts.BITS_32_BE, int.class);
+    private static final VarHandle float_BE_handle = indexedHandle(MemoryLayouts.BITS_32_BE, float.class);
+    private static final VarHandle long_BE_handle = indexedHandle(MemoryLayouts.BITS_64_BE, long.class);
+    private static final VarHandle double_BE_handle = indexedHandle(MemoryLayouts.BITS_64_BE, double.class);
+    private static final VarHandle address_handle = MemoryHandles.asAddressVarHandle((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? long_BE_handle : long_LE_handle);
+
+    /**
+     * Read a byte from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_8_LE.withBitAlignment(8).varHandle(byte.class), 1L);
+    byte value = (byte)handle.get(addr, offset);
+     * }</pre></blockquote>
+     *
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a byte value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static byte getByte_LE(MemoryAddress addr, long offset) {
+        return (byte)byte_LE_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes a byte at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_8_LE.withBitAlignment(8).varHandle(byte.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the byte value to be written.
+     */
+    public static void setByte_LE(MemoryAddress addr, long offset, byte value) {
+        byte_LE_handle.set(addr, offset, value);
+    }
+
+    /**
+     * Read a char from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_16_LE.withBitAlignment(8).varHandle(char.class), 1L);
+    char value = (char)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a char value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static char getChar_LE(MemoryAddress addr, long offset) {
+        return (char)char_LE_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes a char at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_16_LE.withBitAlignment(8).varHandle(char.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the char value to be written.
+     */
+    public static void setChar_LE(MemoryAddress addr, long offset, char value) {
+        char_LE_handle.set(addr, offset, value);
+    }
+
+    /**
+     * Read a short from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_16_LE.withBitAlignment(8).varHandle(short.class), 1L);
+    short value = (short)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a short value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static short getShort_LE(MemoryAddress addr, long offset) {
+        return (short)short_LE_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes a short at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_16_LE.withBitAlignment(8).varHandle(short.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the short value to be written.
+     */
+    public static void setShort_LE(MemoryAddress addr, long offset, short value) {
+        short_LE_handle.set(addr, offset, value);
+    }
+
+    /**
+     * Read an int from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(int.class), 1L);
+    int value = (int)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return an int value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static int getInt_LE(MemoryAddress addr, long offset) {
+        return (int)int_LE_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes an int at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(int.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the int value to be written.
+     */
+    public static void setInt_LE(MemoryAddress addr, long offset, int value) {
+        int_LE_handle.set(addr, offset, value);
+    }
+
+    /**
+     * Read a float from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(float.class), 1L);
+    float value = (float)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a float value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static float getFloat_LE(MemoryAddress addr, long offset) {
+        return (float)float_LE_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes a float at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(float.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the float value to be written.
+     */
+    public static void setFloat_LE(MemoryAddress addr, long offset, float value) {
+        float_LE_handle.set(addr, offset, value);
+    }
+
+    /**
+     * Read a long from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_64_LE.withBitAlignment(8).varHandle(long.class), 1L);
+    long value = (long)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a long value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static long getLong_LE(MemoryAddress addr, long offset) {
+        return (long)long_LE_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes a long at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_64_LE.withBitAlignment(8).varHandle(long.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the long value to be written.
+     */
+    public static void setLong_LE(MemoryAddress addr, long offset, long value) {
+        long_LE_handle.set(addr, offset, value);
+    }
+
+    /**
+     * Read a double from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(double.class), 1L);
+    double value = (double)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a double value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static double getDouble_LE(MemoryAddress addr, long offset) {
+        return (double)double_LE_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes a double at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_64_LE.withBitAlignment(8).varHandle(double.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the double value to be written.
+     */
+    public static void setDouble_LE(MemoryAddress addr, long offset, double value) {
+        double_LE_handle.set(addr, offset, value);
+    }
+
+    /**
+     * Read a byte from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_8_BE.withBitAlignment(8).varHandle(byte.class), 1L);
+    byte value = (byte)handle.get(addr, offset);
+     * }</pre></blockquote>
+     *
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a byte value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static byte getByte_BE(MemoryAddress addr, long offset) {
+        return (byte)byte_BE_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes a byte at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_8_BE.withBitAlignment(8).varHandle(byte.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the byte value to be written.
+     */
+    public static void setByte_BE(MemoryAddress addr, long offset, byte value) {
+        byte_BE_handle.set(addr, offset, value);
+    }
+
+    /**
+     * Read a char from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_16_BE.withBitAlignment(8).varHandle(char.class), 1L);
+    char value = (char)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a char value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static char getChar_BE(MemoryAddress addr, long offset) {
+        return (char)char_BE_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes a char at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_16_BE.withBitAlignment(8).varHandle(char.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the char value to be written.
+     */
+    public static void setChar_BE(MemoryAddress addr, long offset, char value) {
+        char_BE_handle.set(addr, offset, value);
+    }
+
+    /**
+     * Read a short from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_16_BE.withBitAlignment(8).varHandle(short.class), 1L);
+    short value = (short)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a short value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static short getShort_BE(MemoryAddress addr, long offset) {
+        return (short)short_BE_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes a short at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_16_BE.withBitAlignment(8).varHandle(short.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the short value to be written.
+     */
+    public static void setShort_BE(MemoryAddress addr, long offset, short value) {
+        short_BE_handle.set(addr, offset, value);
+    }
+
+    /**
+     * Read an int from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(int.class), 1L);
+    int value = (int)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return an int value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static int getInt_BE(MemoryAddress addr, long offset) {
+        return (int)int_BE_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes an int at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(int.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the int value to be written.
+     */
+    public static void setInt_BE(MemoryAddress addr, long offset, int value) {
+        int_BE_handle.set(addr, offset, value);
+    }
+
+    /**
+     * Read a float from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(float.class), 1L);
+    float value = (float)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a float value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static float getFloat_BE(MemoryAddress addr, long offset) {
+        return (float)float_BE_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes a float at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(float.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the float value to be written.
+     */
+    public static void setFloat_BE(MemoryAddress addr, long offset, float value) {
+        float_BE_handle.set(addr, offset, value);
+    }
+
+    /**
+     * Read a long from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_64_BE.withBitAlignment(8).varHandle(long.class), 1L);
+    long value = (long)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a long value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static long getLong_BE(MemoryAddress addr, long offset) {
+        return (long)long_BE_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes a long at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_64_BE.withBitAlignment(8).varHandle(long.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the long value to be written.
+     */
+    public static void setLong_BE(MemoryAddress addr, long offset, long value) {
+        long_BE_handle.set(addr, offset, value);
+    }
+
+    /**
+     * Read a double from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(double.class), 1L);
+    double value = (double)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a double value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static double getDouble_BE(MemoryAddress addr, long offset) {
+        return (double)double_BE_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes a double at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(BITS_64_BE.withBitAlignment(8).varHandle(double.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the double value to be written.
+     */
+    public static void setDouble_BE(MemoryAddress addr, long offset, double value) {
+        double_BE_handle.set(addr, offset, value);
+    }
+
+    /**
+     * Read a byte from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(JAVA_BYTE.withBitAlignment(8).varHandle(byte.class), 1L);
+    byte value = (byte)handle.get(addr, offset);
+     * }</pre></blockquote>
+     *
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a byte value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static byte getByte(MemoryAddress addr, long offset) {
+        return (byte)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? byte_BE_handle : byte_LE_handle).get(addr, offset);
+    }
+
+    /**
+     * Writes a byte at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(JAVA_BYTE.withBitAlignment(8).varHandle(byte.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the byte value to be written.
+     */
+    public static void setByte(MemoryAddress addr, long offset, byte value) {
+        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? byte_BE_handle : byte_LE_handle).set(addr, offset, value);
+    }
+
+    /**
+     * Read a char from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(JAVA_CHAR.withBitAlignment(8).varHandle(char.class), 1L);
+    char value = (char)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a char value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static char getChar(MemoryAddress addr, long offset) {
+        return (char)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? char_BE_handle : char_LE_handle).get(addr, offset);
+    }
+
+    /**
+     * Writes a char at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(JAVA_CHAR.withBitAlignment(8).varHandle(char.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the char value to be written.
+     */
+    public static void setChar(MemoryAddress addr, long offset, char value) {
+        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? char_BE_handle : char_LE_handle).set(addr, offset, value);
+    }
+
+    /**
+     * Read a short from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(JAVA_SHORT.withBitAlignment(8).varHandle(short.class), 1L);
+    short value = (short)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a short value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static short getShort(MemoryAddress addr, long offset) {
+        return (short)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? short_BE_handle : short_LE_handle).get(addr, offset);
+    }
+
+    /**
+     * Writes a short at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(JAVA_SHORT.withBitAlignment(8).varHandle(short.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the short value to be written.
+     */
+    public static void setShort(MemoryAddress addr, long offset, short value) {
+        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? short_BE_handle : short_LE_handle).set(addr, offset, value);
+    }
+
+    /**
+     * Read an int from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(JAVA_INT.withBitAlignment(8).varHandle(int.class), 1L);
+    int value = (int)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return an int value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static int getInt(MemoryAddress addr, long offset) {
+        return (int)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? int_BE_handle : int_LE_handle).get(addr, offset);
+    }
+
+    /**
+     * Writes an int at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(JAVA_INT.withBitAlignment(8).varHandle(int.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the int value to be written.
+     */
+    public static void setInt(MemoryAddress addr, long offset, int value) {
+        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? int_BE_handle : int_LE_handle).set(addr, offset, value);
+    }
+
+    /**
+     * Read a float from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(JAVA_FLOAT.withBitAlignment(8).varHandle(float.class), 1L);
+    float value = (float)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a float value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static float getFloat(MemoryAddress addr, long offset) {
+        return (float)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? float_BE_handle : float_LE_handle).get(addr, offset);
+    }
+
+    /**
+     * Writes a float at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(JAVA_FLOAT.withBitAlignment(8).varHandle(float.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the float value to be written.
+     */
+    public static void setFloat(MemoryAddress addr, long offset, float value) {
+        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? float_BE_handle : float_LE_handle).set(addr, offset, value);
+    }
+
+    /**
+     * Read a long from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(JAVA_LONG.withBitAlignment(8).varHandle(long.class), 1L);
+    long value = (long)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a long value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static long getLong(MemoryAddress addr, long offset) {
+        return (long)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? long_BE_handle : long_LE_handle).get(addr, offset);
+    }
+
+    /**
+     * Writes a long at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(JAVA_LONG.withBitAlignment(8).varHandle(long.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the long value to be written.
+     */
+    public static void setLong(MemoryAddress addr, long offset, long value) {
+        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? long_BE_handle : long_LE_handle).set(addr, offset, value);
+    }
+
+    /**
+     * Read a double from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(JAVA_DOUBLE.withBitAlignment(8).varHandle(double.class), 1L);
+    double value = (double)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a double value read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static double getDouble(MemoryAddress addr, long offset) {
+        return (double)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? double_BE_handle : double_LE_handle).get(addr, offset);
+    }
+
+    /**
+     * Writes a double at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.withStride(JAVA_DOUBLE.withBitAlignment(8).varHandle(double.class), 1L);
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the double value to be written.
+     */
+    public static void setDouble(MemoryAddress addr, long offset, double value) {
+        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? double_BE_handle : double_LE_handle).set(addr, offset, value);
+    }
+
+    /**
+     * Read a memory address from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.asAddressHandle(MemoryHandles.withStride(JAVA_LONG.withBitAlignment(8).varHandle(long.class), 1L));
+    MemoryAddress value = (MemoryAddress)handle.get(addr, offset);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @return a memory address read from {@code addr} at the offset specified by {@code index}.
+     */
+    public static MemoryAddress getAddress(MemoryAddress addr, long offset) {
+        return (MemoryAddress)address_handle.get(addr, offset);
+    }
+
+    /**
+     * Writes a memory address at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    VarHandle handle = MemoryHandles.asAddressHandle(MemoryHandles.withStride(JAVA_LONG.withBitAlignment(8).varHandle(long.class), 1L));
+    handle.set(addr, offset, value);
+     * }</pre></blockquote>
+     * @param addr base address.
+     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
+     * @param value the memory address to be written.
+     */
+    public static void setAddress(MemoryAddress addr, long offset, MemoryAddress value) {
+        address_handle.set(addr, offset, value);
+    }
+
+    private static VarHandle indexedHandle(MemoryLayout elementLayout, Class<?> carrier) {
+        return MemoryHandles.withStride(elementLayout.withBitAlignment(8).varHandle(carrier), 1L);
+    }
+}
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayouts.java
@@ -60,243 +60,10 @@
     /**
      * A value layout constant with size of eight bytes, and byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
      */
     public static final ValueLayout BITS_64_LE = MemoryLayout.ofValueBits(64, ByteOrder.LITTLE_ENDIAN);
 
-    private static final VarHandle byte_LE_handle = indexedHandle(BITS_8_LE, byte.class);
-    private static final VarHandle char_LE_handle = indexedHandle(BITS_16_LE, char.class);
-    private static final VarHandle short_LE_handle = indexedHandle(BITS_16_LE, short.class);
-    private static final VarHandle int_LE_handle = indexedHandle(BITS_32_LE, int.class);
-    private static final VarHandle float_LE_handle = indexedHandle(BITS_32_LE, float.class);
-    private static final VarHandle long_LE_handle = indexedHandle(BITS_64_LE, long.class);
-    private static final VarHandle double_LE_handle = indexedHandle(BITS_64_LE, double.class);
-
-    /**
-     * Read a byte from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_8_LE.withBitAlignment(8).varHandle(byte.class), 1L);
-    byte value = (byte)handle.get(addr, offset);
-     * }</pre></blockquote>
-     *
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a byte value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static byte getByte_LE(MemoryAddress addr, long offset) {
-        return (byte)byte_LE_handle.get(addr, offset);
-    }
-
-    /**
-     * Writes a byte at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_8_LE.withBitAlignment(8).varHandle(byte.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the byte value to be written.
-     */
-    public static void setByte_LE(MemoryAddress addr, long offset, byte value) {
-        byte_LE_handle.set(addr, offset, value);
-    }
-
-    /**
-     * Read a char from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_16_LE.withBitAlignment(8).varHandle(char.class), 1L);
-    char value = (char)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a char value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static char getChar_LE(MemoryAddress addr, long offset) {
-        return (char)char_LE_handle.get(addr, offset);
-    }
-
-    /**
-     * Writes a char at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_16_LE.withBitAlignment(8).varHandle(char.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the char value to be written.
-     */
-    public static void setChar_LE(MemoryAddress addr, long offset, char value) {
-        char_LE_handle.set(addr, offset, value);
-    }
-
-    /**
-     * Read a short from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_16_LE.withBitAlignment(8).varHandle(short.class), 1L);
-    short value = (short)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a short value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static short getShort_LE(MemoryAddress addr, long offset) {
-        return (short)short_LE_handle.get(addr, offset);
-    }
-
-    /**
-     * Writes a short at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_16_LE.withBitAlignment(8).varHandle(short.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the short value to be written.
-     */
-    public static void setShort_LE(MemoryAddress addr, long offset, short value) {
-        short_LE_handle.set(addr, offset, value);
-    }
-
-    /**
-     * Read an int from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(int.class), 1L);
-    int value = (int)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return an int value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static int getInt_LE(MemoryAddress addr, long offset) {
-        return (int)int_LE_handle.get(addr, offset);
-    }
-
-    /**
-     * Writes an int at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(int.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the int value to be written.
-     */
-    public static void setInt_LE(MemoryAddress addr, long offset, int value) {
-        int_LE_handle.set(addr, offset, value);
-    }
-
-    /**
-     * Read a float from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(float.class), 1L);
-    float value = (float)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a float value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static float getFloat_LE(MemoryAddress addr, long offset) {
-        return (float)float_LE_handle.get(addr, offset);
-    }
-
-    /**
-     * Writes a float at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(float.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the float value to be written.
-     */
-    public static void setFloat_LE(MemoryAddress addr, long offset, float value) {
-        float_LE_handle.set(addr, offset, value);
-    }
-
-    /**
-     * Read a long from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_64_LE.withBitAlignment(8).varHandle(long.class), 1L);
-    long value = (long)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a long value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static long getLong_LE(MemoryAddress addr, long offset) {
-        return (long)long_LE_handle.get(addr, offset);
-    }
-
-    /**
-     * Writes a long at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_64_LE.withBitAlignment(8).varHandle(long.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the long value to be written.
-     */
-    public static void setLong_LE(MemoryAddress addr, long offset, long value) {
-        long_LE_handle.set(addr, offset, value);
-    }
-
-    /**
-     * Read a double from given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_32_LE.withBitAlignment(8).varHandle(double.class), 1L);
-    double value = (double)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a double value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static double getDouble_LE(MemoryAddress addr, long offset) {
-        return (double)double_LE_handle.get(addr, offset);
-    }
-
-    /**
-     * Writes a double at given address and offset, with byte order set to {@link ByteOrder#LITTLE_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_64_LE.withBitAlignment(8).varHandle(double.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the double value to be written.
-     */
-    public static void setDouble_LE(MemoryAddress addr, long offset, double value) {
-        double_LE_handle.set(addr, offset, value);
-    }
-
     /**
      * A value layout constant with size of one byte, and byte order set to {@link ByteOrder#BIG_ENDIAN}.
      */
     public static final ValueLayout BITS_8_BE = MemoryLayout.ofValueBits(8, ByteOrder.BIG_ENDIAN);
 
@@ -313,243 +80,10 @@
     /**
      * A value layout constant with size of eight bytes, and byte order set to {@link ByteOrder#BIG_ENDIAN}.
      */
     public static final ValueLayout BITS_64_BE = MemoryLayout.ofValueBits(64, ByteOrder.BIG_ENDIAN);
 
-    private static final VarHandle byte_BE_handle = indexedHandle(BITS_8_BE, byte.class);
-    private static final VarHandle char_BE_handle = indexedHandle(BITS_16_BE, char.class);
-    private static final VarHandle short_BE_handle = indexedHandle(BITS_16_BE, short.class);
-    private static final VarHandle int_BE_handle = indexedHandle(BITS_32_BE, int.class);
-    private static final VarHandle float_BE_handle = indexedHandle(BITS_32_BE, float.class);
-    private static final VarHandle long_BE_handle = indexedHandle(BITS_64_BE, long.class);
-    private static final VarHandle double_BE_handle = indexedHandle(BITS_64_BE, double.class);
-
-    /**
-     * Read a byte from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_8_BE.withBitAlignment(8).varHandle(byte.class), 1L);
-    byte value = (byte)handle.get(addr, offset);
-     * }</pre></blockquote>
-     *
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a byte value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static byte getByte_BE(MemoryAddress addr, long offset) {
-        return (byte)byte_BE_handle.get(addr, offset);
-    }
-
-    /**
-     * Writes a byte at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_8_BE.withBitAlignment(8).varHandle(byte.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the byte value to be written.
-     */
-    public static void setByte_BE(MemoryAddress addr, long offset, byte value) {
-        byte_BE_handle.set(addr, offset, value);
-    }
-
-    /**
-     * Read a char from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_16_BE.withBitAlignment(8).varHandle(char.class), 1L);
-    char value = (char)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a char value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static char getChar_BE(MemoryAddress addr, long offset) {
-        return (char)char_BE_handle.get(addr, offset);
-    }
-
-    /**
-     * Writes a char at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_16_BE.withBitAlignment(8).varHandle(char.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the char value to be written.
-     */
-    public static void setChar_BE(MemoryAddress addr, long offset, char value) {
-        char_BE_handle.set(addr, offset, value);
-    }
-
-    /**
-     * Read a short from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_16_BE.withBitAlignment(8).varHandle(short.class), 1L);
-    short value = (short)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a short value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static short getShort_BE(MemoryAddress addr, long offset) {
-        return (short)short_BE_handle.get(addr, offset);
-    }
-
-    /**
-     * Writes a short at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_16_BE.withBitAlignment(8).varHandle(short.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the short value to be written.
-     */
-    public static void setShort_BE(MemoryAddress addr, long offset, short value) {
-        short_BE_handle.set(addr, offset, value);
-    }
-
-    /**
-     * Read an int from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(int.class), 1L);
-    int value = (int)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return an int value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static int getInt_BE(MemoryAddress addr, long offset) {
-        return (int)int_BE_handle.get(addr, offset);
-    }
-
-    /**
-     * Writes an int at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(int.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the int value to be written.
-     */
-    public static void setInt_BE(MemoryAddress addr, long offset, int value) {
-        int_BE_handle.set(addr, offset, value);
-    }
-
-    /**
-     * Read a float from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(float.class), 1L);
-    float value = (float)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a float value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static float getFloat_BE(MemoryAddress addr, long offset) {
-        return (float)float_BE_handle.get(addr, offset);
-    }
-
-    /**
-     * Writes a float at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(float.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the float value to be written.
-     */
-    public static void setFloat_BE(MemoryAddress addr, long offset, float value) {
-        float_BE_handle.set(addr, offset, value);
-    }
-
-    /**
-     * Read a long from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_64_BE.withBitAlignment(8).varHandle(long.class), 1L);
-    long value = (long)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a long value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static long getLong_BE(MemoryAddress addr, long offset) {
-        return (long)long_BE_handle.get(addr, offset);
-    }
-
-    /**
-     * Writes a long at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_64_BE.withBitAlignment(8).varHandle(long.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the long value to be written.
-     */
-    public static void setLong_BE(MemoryAddress addr, long offset, long value) {
-        long_BE_handle.set(addr, offset, value);
-    }
-
-    /**
-     * Read a double from given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_32_BE.withBitAlignment(8).varHandle(double.class), 1L);
-    double value = (double)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a double value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static double getDouble_BE(MemoryAddress addr, long offset) {
-        return (double)double_BE_handle.get(addr, offset);
-    }
-
-    /**
-     * Writes a double at given address and offset, with byte order set to {@link ByteOrder#BIG_ENDIAN}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(BITS_64_BE.withBitAlignment(8).varHandle(double.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the double value to be written.
-     */
-    public static void setDouble_BE(MemoryAddress addr, long offset, double value) {
-        double_BE_handle.set(addr, offset, value);
-    }
-
     /**
      * A padding layout constant with size of one byte.
      */
     public static final MemoryLayout PAD_8 = MemoryLayout.ofPaddingBits(8);
 
@@ -601,234 +135,6 @@
     /**
      * A value layout constant whose size is the same as that of a Java {@code double}, and byte order set to {@link ByteOrder#nativeOrder()}.
      */
     public static final ValueLayout JAVA_DOUBLE = MemoryLayout.ofValueBits(64, ByteOrder.nativeOrder());
 
-    /**
-     * Read a byte from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(JAVA_BYTE.withBitAlignment(8).varHandle(byte.class), 1L);
-    byte value = (byte)handle.get(addr, offset);
-     * }</pre></blockquote>
-     *
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a byte value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static byte getByte(MemoryAddress addr, long offset) {
-        return (byte)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? byte_BE_handle : byte_LE_handle).get(addr, offset);
-    }
-
-    /**
-     * Writes a byte at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(JAVA_BYTE.withBitAlignment(8).varHandle(byte.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the byte value to be written.
-     */
-    public static void setByte(MemoryAddress addr, long offset, byte value) {
-        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? byte_BE_handle : byte_LE_handle).set(addr, offset, value);
-    }
-
-    /**
-     * Read a char from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(JAVA_CHAR.withBitAlignment(8).varHandle(char.class), 1L);
-    char value = (char)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a char value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static char getChar(MemoryAddress addr, long offset) {
-        return (char)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? char_BE_handle : char_LE_handle).get(addr, offset);
-    }
-
-    /**
-     * Writes a char at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(JAVA_CHAR.withBitAlignment(8).varHandle(char.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the char value to be written.
-     */
-    public static void setChar(MemoryAddress addr, long offset, char value) {
-        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? char_BE_handle : char_LE_handle).set(addr, offset, value);
-    }
-
-    /**
-     * Read a short from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(JAVA_SHORT.withBitAlignment(8).varHandle(short.class), 1L);
-    short value = (short)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a short value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static short getShort(MemoryAddress addr, long offset) {
-        return (short)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? short_BE_handle : short_LE_handle).get(addr, offset);
-    }
-
-    /**
-     * Writes a short at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(JAVA_SHORT.withBitAlignment(8).varHandle(short.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the short value to be written.
-     */
-    public static void setShort(MemoryAddress addr, long offset, short value) {
-        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? short_BE_handle : short_LE_handle).set(addr, offset, value);
-    }
-
-    /**
-     * Read an int from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(JAVA_INT.withBitAlignment(8).varHandle(int.class), 1L);
-    int value = (int)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return an int value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static int getInt(MemoryAddress addr, long offset) {
-        return (int)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? int_BE_handle : int_LE_handle).get(addr, offset);
-    }
-
-    /**
-     * Writes an int at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(JAVA_INT.withBitAlignment(8).varHandle(int.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the int value to be written.
-     */
-    public static void setInt(MemoryAddress addr, long offset, int value) {
-        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? int_BE_handle : int_LE_handle).set(addr, offset, value);
-    }
-
-    /**
-     * Read a float from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(JAVA_FLOAT.withBitAlignment(8).varHandle(float.class), 1L);
-    float value = (float)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a float value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static float getFloat(MemoryAddress addr, long offset) {
-        return (float)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? float_BE_handle : float_LE_handle).get(addr, offset);
-    }
-
-    /**
-     * Writes a float at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(JAVA_FLOAT.withBitAlignment(8).varHandle(float.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the float value to be written.
-     */
-    public static void setFloat(MemoryAddress addr, long offset, float value) {
-        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? float_BE_handle : float_LE_handle).set(addr, offset, value);
-    }
-
-    /**
-     * Read a long from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(JAVA_LONG.withBitAlignment(8).varHandle(long.class), 1L);
-    long value = (long)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a long value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static long getLong(MemoryAddress addr, long offset) {
-        return (long)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? long_BE_handle : long_LE_handle).get(addr, offset);
-    }
-
-    /**
-     * Writes a long at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(JAVA_LONG.withBitAlignment(8).varHandle(long.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the long value to be written.
-     */
-    public static void setLong(MemoryAddress addr, long offset, long value) {
-        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? long_BE_handle : long_LE_handle).set(addr, offset, value);
-    }
-
-    /**
-     * Read a double from given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(JAVA_DOUBLE.withBitAlignment(8).varHandle(double.class), 1L);
-    double value = (double)handle.get(addr, offset);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @return a double value read from {@code addr} at the offset specified by {@code index}.
-     */
-    public static double getDouble(MemoryAddress addr, long offset) {
-        return (double)((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? double_BE_handle : double_LE_handle).get(addr, offset);
-    }
-
-    /**
-     * Writes a double at given address and offset, with byte order set to {@link ByteOrder#nativeOrder()}.
-     * <p>
-     * This is equivalent to the following code:
-     * <blockquote><pre>{@code
-    VarHandle handle = MemoryHandles.withStride(JAVA_DOUBLE.withBitAlignment(8).varHandle(double.class), 1L);
-    handle.set(addr, offset, value);
-     * }</pre></blockquote>
-     * @param addr base address.
-     * @param offset offset (relative to {@code addr}). The final address of this read operation can be expressed as {@code addr.addOffset(offset)}.
-     * @param value the double value to be written.
-     */
-    public static void setDouble(MemoryAddress addr, long offset, double value) {
-        ((ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN) ? double_BE_handle : double_LE_handle).set(addr, offset, value);
-    }
-
-    private static VarHandle indexedHandle(MemoryLayout elementLayout, Class<?> carrier) {
-        return MemoryHandles.withStride(elementLayout.withBitAlignment(8).varHandle(carrier), 1L);
-    }
 }
diff a/test/jdk/java/foreign/TestByteBuffer.java b/test/jdk/java/foreign/TestByteBuffer.java
--- a/test/jdk/java/foreign/TestByteBuffer.java
+++ b/test/jdk/java/foreign/TestByteBuffer.java
@@ -30,10 +30,11 @@
  * @run testng TestByteBuffer
  */
 
 
 import jdk.incubator.foreign.MappedMemorySegment;
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.MemoryLayout.PathElement;
@@ -552,11 +553,11 @@
         MemorySegment s1 = MemorySegment.allocateNative(MemoryLayouts.JAVA_INT);
         MemorySegment s2 = MemorySegment.ofByteBuffer(s1.asByteBuffer());
 
         s1.close(); // memory freed
 
-        MemoryLayouts.setInt(s2.baseAddress(), 0L, 10); // Dead access!
+        MemoryAccess.setInt(s2.baseAddress(), 0L, 10); // Dead access!
     }
 
     @DataProvider(name = "bufferOps")
     public static Object[][] bufferOps() throws Throwable {
         return new Object[][]{
@@ -613,38 +614,38 @@
     }
 
     @DataProvider(name = "resizeOps")
     public Object[][] resizeOps() {
         Consumer<MemoryAddress> byteInitializer =
-                (base) -> initBytes(base, bytes, (addr, pos) -> MemoryLayouts.setByte_BE(addr, pos, (byte)(long)pos));
+                (base) -> initBytes(base, bytes, (addr, pos) -> MemoryAccess.setByte_BE(addr, pos, (byte)(long)pos));
         Consumer<MemoryAddress> charInitializer =
-                (base) -> initBytes(base, chars, (addr, pos) -> MemoryLayouts.setChar_BE(addr, pos * 2, (char)(long)pos));
+                (base) -> initBytes(base, chars, (addr, pos) -> MemoryAccess.setChar_BE(addr, pos * 2, (char)(long)pos));
         Consumer<MemoryAddress> shortInitializer =
-                (base) -> initBytes(base, shorts, (addr, pos) -> MemoryLayouts.setShort_BE(addr, pos * 2, (short)(long)pos));
+                (base) -> initBytes(base, shorts, (addr, pos) -> MemoryAccess.setShort_BE(addr, pos * 2, (short)(long)pos));
         Consumer<MemoryAddress> intInitializer =
-                (base) -> initBytes(base, ints, (addr, pos) -> MemoryLayouts.setInt_BE(addr, pos * 4, (int)(long)pos));
+                (base) -> initBytes(base, ints, (addr, pos) -> MemoryAccess.setInt_BE(addr, pos * 4, (int)(long)pos));
         Consumer<MemoryAddress> floatInitializer =
-                (base) -> initBytes(base, floats, (addr, pos) -> MemoryLayouts.setFloat_BE(addr, pos * 4, (float)(long)pos));
+                (base) -> initBytes(base, floats, (addr, pos) -> MemoryAccess.setFloat_BE(addr, pos * 4, (float)(long)pos));
         Consumer<MemoryAddress> longInitializer =
-                (base) -> initBytes(base, longs, (addr, pos) -> MemoryLayouts.setLong_BE(addr, pos * 8, (long)pos));
+                (base) -> initBytes(base, longs, (addr, pos) -> MemoryAccess.setLong_BE(addr, pos * 8, (long)pos));
         Consumer<MemoryAddress> doubleInitializer =
-                (base) -> initBytes(base, doubles, (addr, pos) -> MemoryLayouts.setDouble_BE(addr, pos * 8, (double)(long)pos));
+                (base) -> initBytes(base, doubles, (addr, pos) -> MemoryAccess.setDouble_BE(addr, pos * 8, (double)(long)pos));
 
         Consumer<MemoryAddress> byteChecker =
-                (base) -> checkBytes(base, bytes, Function.identity(), MemoryLayouts::getByte_BE, ByteBuffer::get);
+                (base) -> checkBytes(base, bytes, Function.identity(), MemoryAccess::getByte_BE, ByteBuffer::get);
         Consumer<MemoryAddress> charChecker =
-                (base) -> checkBytes(base, chars, ByteBuffer::asCharBuffer, (addr, pos) -> MemoryLayouts.getChar_BE(addr, pos * 2), CharBuffer::get);
+                (base) -> checkBytes(base, chars, ByteBuffer::asCharBuffer, (addr, pos) -> MemoryAccess.getChar_BE(addr, pos * 2), CharBuffer::get);
         Consumer<MemoryAddress> shortChecker =
-                (base) -> checkBytes(base, shorts, ByteBuffer::asShortBuffer, (addr, pos) -> MemoryLayouts.getShort_BE(addr, pos * 2), ShortBuffer::get);
+                (base) -> checkBytes(base, shorts, ByteBuffer::asShortBuffer, (addr, pos) -> MemoryAccess.getShort_BE(addr, pos * 2), ShortBuffer::get);
         Consumer<MemoryAddress> intChecker =
-                (base) -> checkBytes(base, ints, ByteBuffer::asIntBuffer, (addr, pos) -> MemoryLayouts.getInt_BE(addr, pos * 4), IntBuffer::get);
+                (base) -> checkBytes(base, ints, ByteBuffer::asIntBuffer, (addr, pos) -> MemoryAccess.getInt_BE(addr, pos * 4), IntBuffer::get);
         Consumer<MemoryAddress> floatChecker =
-                (base) -> checkBytes(base, floats, ByteBuffer::asFloatBuffer, (addr, pos) -> MemoryLayouts.getFloat_BE(addr, pos * 4), FloatBuffer::get);
+                (base) -> checkBytes(base, floats, ByteBuffer::asFloatBuffer, (addr, pos) -> MemoryAccess.getFloat_BE(addr, pos * 4), FloatBuffer::get);
         Consumer<MemoryAddress> longChecker =
-                (base) -> checkBytes(base, longs, ByteBuffer::asLongBuffer, (addr, pos) -> MemoryLayouts.getLong_BE(addr, pos * 8), LongBuffer::get);
+                (base) -> checkBytes(base, longs, ByteBuffer::asLongBuffer, (addr, pos) -> MemoryAccess.getLong_BE(addr, pos * 8), LongBuffer::get);
         Consumer<MemoryAddress> doubleChecker =
-                (base) -> checkBytes(base, doubles, ByteBuffer::asDoubleBuffer, (addr, pos) -> MemoryLayouts.getDouble_BE(addr, pos * 8), DoubleBuffer::get);
+                (base) -> checkBytes(base, doubles, ByteBuffer::asDoubleBuffer, (addr, pos) -> MemoryAccess.getDouble_BE(addr, pos * 8), DoubleBuffer::get);
 
         return new Object[][]{
                 {byteChecker, byteInitializer, bytes},
                 {charChecker, charInitializer, chars},
                 {shortChecker, shortInitializer, shorts},
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstant.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstant.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstant.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstant.java
@@ -20,13 +20,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.bench.jdk.incubator.foreign;
 
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
-import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;
 import org.openjdk.jmh.annotations.Fork;
 import org.openjdk.jmh.annotations.Measurement;
@@ -118,11 +118,11 @@
 
     @Benchmark
     public int segment_loop_static() {
         int res = 0;
         for (int i = 0; i < ELEM_SIZE; i ++) {
-            res += MemoryLayouts.getInt(segment.baseAddress(), i * CARRIER_SIZE);
+            res += MemoryAccess.getInt(segment.baseAddress(), i * CARRIER_SIZE);
         }
         return res;
     }
 
     @Benchmark
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantHeap.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantHeap.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantHeap.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantHeap.java
@@ -20,13 +20,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.bench.jdk.incubator.foreign;
 
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
-import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;
 import org.openjdk.jmh.annotations.Fork;
 import org.openjdk.jmh.annotations.Measurement;
@@ -121,11 +121,11 @@
 
     @Benchmark
     public int segment_loop_static() {
         int res = 0;
         for (int i = 0; i < ELEM_SIZE; i ++) {
-            res += MemoryLayouts.getInt(segment.baseAddress(), i * CARRIER_SIZE);
+            res += MemoryAccess.getInt(segment.baseAddress(), i * CARRIER_SIZE);
         }
         return res;
     }
 
     @Benchmark
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantMapped.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantMapped.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantMapped.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverNonConstantMapped.java
@@ -20,13 +20,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.bench.jdk.incubator.foreign;
 
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
-import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;
 import org.openjdk.jmh.annotations.Fork;
 import org.openjdk.jmh.annotations.Measurement;
@@ -145,11 +145,11 @@
 
     @Benchmark
     public int segment_loop_static() {
         int res = 0;
         for (int i = 0; i < ELEM_SIZE; i ++) {
-            res += MemoryLayouts.getInt(segment.baseAddress(), i * CARRIER_SIZE);
+            res += MemoryAccess.getInt(segment.baseAddress(), i * CARRIER_SIZE);
         }
         return res;
     }
 
     @Benchmark
