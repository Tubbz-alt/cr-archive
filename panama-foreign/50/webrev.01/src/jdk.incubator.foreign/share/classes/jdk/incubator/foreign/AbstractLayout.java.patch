diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/AbstractLayout.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/AbstractLayout.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/AbstractLayout.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/AbstractLayout.java
@@ -24,52 +24,75 @@
  *
  */
 package jdk.incubator.foreign;
 
 import java.lang.constant.ClassDesc;
+import java.lang.constant.Constable;
 import java.lang.constant.ConstantDesc;
 import java.lang.constant.ConstantDescs;
 import java.lang.constant.DirectMethodHandleDesc;
 import java.lang.constant.DynamicConstantDesc;
 import java.lang.constant.MethodHandleDesc;
 import java.lang.constant.MethodTypeDesc;
 import java.nio.ByteOrder;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.OptionalLong;
 
 abstract class AbstractLayout implements MemoryLayout {
     private final OptionalLong size;
     final long alignment;
-    private final Optional<String> name;
+    protected final Map<String, Constable> annotations;
 
-    public AbstractLayout(OptionalLong size, long alignment, Optional<String> name) {
+    public AbstractLayout(OptionalLong size, long alignment, Map<String, Constable> annotations) {
         this.size = size;
         this.alignment = alignment;
-        this.name = name;
+        this.annotations = Collections.unmodifiableMap(annotations);
     }
 
     Optional<String> optName() {
-        return name;
+        return Optional.ofNullable((String)annotations.get(NAME));
+    }
+
+    // memory layout annotation key for abi native type
+    static final String NATIVE_TYPE = "abi/native-type";
+
+    Optional<SystemABI.Type> optABIType() {
+        return Optional.ofNullable((SystemABI.Type)annotations.get(NATIVE_TYPE));
     }
 
     @Override
     public AbstractLayout withName(String name) {
-        return dup(alignment, Optional.of(name));
+        return withAnnotation(NAME, name);
+    }
+
+    @SuppressWarnings("unchecked")
+    public <Z extends AbstractLayout> Z withAnnotation(String name, Constable value) {
+        Map<String, Constable> new_annos = new HashMap<>(annotations);
+        new_annos.put(name, value);
+        return (Z)dup(alignment, new_annos);
     }
 
     @Override
     public final Optional<String> name() {
-        return name;
+        return optName();
+    }
+
+    @Override
+    public final Optional<SystemABI.Type> abiType() {
+        return optABIType();
     }
 
-    abstract AbstractLayout dup(long alignment, Optional<String> name);
+    abstract AbstractLayout dup(long alignment, Map<String, Constable> annos);
 
     @Override
     public AbstractLayout withBitAlignment(long alignmentBits) {
         checkAlignment(alignmentBits);
-        return dup(alignmentBits, name);
+        return dup(alignmentBits, annotations);
     }
 
     void checkAlignment(long alignmentBitCount) {
         if (((alignmentBitCount & (alignmentBitCount - 1)) != 0L) || //alignment must be a power of two
                 (alignmentBitCount < 8)) { //alignment must be greater than 8
@@ -109,12 +132,12 @@
     private static UnsupportedOperationException badSizeException() {
         return new UnsupportedOperationException("Cannot compute size of a layout which is, or depends on a sequence layout with unspecified size");
     }
 
     String decorateLayoutString(String s) {
-        if (name.isPresent()) {
-            s = String.format("%s(%s)", s, name.get());
+        if (optName().isPresent()) {
+            s = String.format("%s(%s)", s, optName().get());
         }
         if (!hasNaturalAlignment()) {
             s = alignment + "%" + s;
         }
         return s;
@@ -124,11 +147,11 @@
         return size.isPresent() && size.getAsLong() == alignment;
     }
 
     @Override
     public int hashCode() {
-        return name.hashCode() << Long.hashCode(alignment);
+        return annotations.hashCode() << Long.hashCode(alignment);
     }
 
     @Override
     public boolean equals(Object other) {
         if (this == other) {
@@ -137,14 +160,16 @@
 
         if (!(other instanceof AbstractLayout)) {
             return false;
         }
 
-        return Objects.equals(name, ((AbstractLayout)other).name) &&
+        return Objects.equals(annotations, ((AbstractLayout)other).annotations) &&
                 Objects.equals(alignment, ((AbstractLayout)other).alignment);
     }
 
+    static final String NAME = "name";
+
     /*** Helper constants for implementing Layout::describeConstable ***/
 
     static final DirectMethodHandleDesc BSM_GET_STATIC_FINAL
             = ConstantDescs.ofConstantBootstrap(ConstantDescs.CD_ConstantBootstraps, "getStaticFinal",
             ConstantDescs.CD_Object, ConstantDescs.CD_Class);
@@ -157,14 +182,20 @@
 
     static final ClassDesc CD_GROUP_LAYOUT = GroupLayout.class.describeConstable().get();
 
     static final ClassDesc CD_BYTEORDER = ByteOrder.class.describeConstable().get();
 
+    static final ClassDesc CD_FUNCTION_DESC = FunctionDescriptor.class.describeConstable().get();
+
     static final ConstantDesc BIG_ENDIAN = DynamicConstantDesc.ofNamed(BSM_GET_STATIC_FINAL, "BIG_ENDIAN", CD_BYTEORDER, CD_BYTEORDER);
 
     static final ConstantDesc LITTLE_ENDIAN = DynamicConstantDesc.ofNamed(BSM_GET_STATIC_FINAL, "LITTLE_ENDIAN", CD_BYTEORDER, CD_BYTEORDER);
 
+    static final ConstantDesc TRUE = DynamicConstantDesc.ofNamed(BSM_GET_STATIC_FINAL, "TRUE", ConstantDescs.CD_Boolean, ConstantDescs.CD_Boolean);
+
+    static final ConstantDesc FALSE = DynamicConstantDesc.ofNamed(BSM_GET_STATIC_FINAL, "FALSE", ConstantDescs.CD_Boolean, ConstantDescs.CD_Boolean);
+
     static final MethodHandleDesc MH_PADDING = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_LAYOUT, "ofPaddingBits",
                 MethodTypeDesc.of(CD_LAYOUT, ConstantDescs.CD_long));
 
     static final MethodHandleDesc MH_VALUE = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_LAYOUT, "ofValueBits",
                 MethodTypeDesc.of(CD_VALUE_LAYOUT, ConstantDescs.CD_long, CD_BYTEORDER));
@@ -178,6 +209,12 @@
     static final MethodHandleDesc MH_STRUCT = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_LAYOUT, "ofStruct",
                 MethodTypeDesc.of(CD_GROUP_LAYOUT, CD_LAYOUT.arrayType()));
 
     static final MethodHandleDesc MH_UNION = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_LAYOUT, "ofUnion",
                 MethodTypeDesc.of(CD_GROUP_LAYOUT, CD_LAYOUT.arrayType()));
+
+    static final MethodHandleDesc MH_VOID_FUNCTION = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_FUNCTION_DESC, "ofVoid",
+                MethodTypeDesc.of(CD_FUNCTION_DESC, CD_LAYOUT.arrayType()));
+
+    static final MethodHandleDesc MH_FUNCTION = MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.INTERFACE_STATIC, CD_FUNCTION_DESC, "of",
+                MethodTypeDesc.of(CD_FUNCTION_DESC, CD_LAYOUT, CD_LAYOUT.arrayType()));
 }
