diff a/test/jdk/java/foreign/TestLayoutConstants.java b/test/jdk/java/foreign/TestLayoutConstants.java
--- a/test/jdk/java/foreign/TestLayoutConstants.java
+++ b/test/jdk/java/foreign/TestLayoutConstants.java
@@ -24,10 +24,11 @@
 /*
  * @test
  * @run testng TestLayoutConstants
  */
 
+import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemoryLayout;
 
 import java.lang.invoke.MethodHandles;
 
@@ -45,10 +46,24 @@
         } catch (ReflectiveOperationException ex) {
             throw new AssertionError(ex);
         }
     }
 
+    @Test(dataProvider = "functions")
+    public void testDescribeResolveFunction(MemoryLayout layout, boolean isVoid) {
+        FunctionDescriptor expected = isVoid ?
+                FunctionDescriptor.ofVoid(layout) :
+                FunctionDescriptor.of(layout, layout);
+        try {
+            FunctionDescriptor actual = expected.describeConstable().get()
+                    .resolveConstantDesc(MethodHandles.lookup());
+            assertEquals(actual, expected);
+        } catch (ReflectiveOperationException ex) {
+            throw new AssertionError(ex);
+        }
+    }
+
     @DataProvider(name = "layouts")
     public Object[][] createLayouts() {
         return new Object[][] {
                 //padding
                 { MemoryLayouts.PAD_32 },
@@ -91,6 +106,23 @@
                         MemoryLayout.ofStruct(
                                 MemoryLayouts.PAD_8,
                                 MemoryLayouts.BITS_32_BE)) },
         };
     }
+
+    @DataProvider(name = "functions")
+    public Object[][] createFunctions() {
+        Object[][] layouts = createLayouts();
+        Object[][] functions = new Object[layouts.length * 2][];
+        boolean[] values = new boolean[] { true, false };
+        for (int i = 0 ; i < layouts.length ; i++) {
+            for (boolean isVoid : values) {
+                int offset = 0;
+                if (isVoid) {
+                    offset += 1;
+                }
+                functions[i * 2 + offset] = new Object[] { layouts[i][0], isVoid };
+            }
+        }
+        return functions;
+    }
 }
