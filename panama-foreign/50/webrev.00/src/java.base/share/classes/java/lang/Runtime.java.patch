diff a/src/java.base/share/classes/java/lang/Runtime.java b/src/java.base/share/classes/java/lang/Runtime.java
--- a/src/java.base/share/classes/java/lang/Runtime.java
+++ b/src/java.base/share/classes/java/lang/Runtime.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1995, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1995, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2019, Azul Systems, Inc. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
@@ -25,24 +25,20 @@
  */
 
 package java.lang;
 
 import java.io.*;
-import java.lang.ClassLoader.NativeLibrary;
-import java.lang.invoke.MethodHandles;
-import java.lang.invoke.MethodHandles.Lookup;
 import java.math.BigInteger;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 import java.util.List;
 import java.util.Optional;
 import java.util.StringTokenizer;
 
-import jdk.internal.access.JavaLangAccess;
 import jdk.internal.access.SharedSecrets;
-import jdk.internal.access.foreign.NativeLibraryProxy;
+import jdk.internal.loader.NativeLibrary;
 import jdk.internal.reflect.CallerSensitive;
 import jdk.internal.reflect.Reflection;
 
 /**
  * Every Java application has a single instance of class
@@ -736,20 +732,21 @@
     @CallerSensitive
     public void load(String filename) {
         load0(Reflection.getCallerClass(), filename);
     }
 
-    NativeLibraryProxy load0(Class<?> fromClass, String filename) {
+    void load0(Class<?> fromClass, String filename) {
         SecurityManager security = System.getSecurityManager();
         if (security != null) {
             security.checkLink(filename);
         }
-        if (!(new File(filename).isAbsolute())) {
+        File file = new File(filename);
+        if (!file.isAbsolute()) {
             throw new UnsatisfiedLinkError(
                 "Expecting an absolute path of the library: " + filename);
         }
-        return ClassLoader.loadLibrary(fromClass, filename, true);
+        ClassLoader.loadLibrary(fromClass, file);
     }
 
     /**
      * Loads the native library specified by the {@code libname}
      * argument.  The {@code libname} argument must not contain any platform
@@ -798,36 +795,20 @@
     @CallerSensitive
     public void loadLibrary(String libname) {
         loadLibrary0(Reflection.getCallerClass(), libname);
     }
 
-    /**
-     * Panama specific: find library given name and lookup.
-     * See {@link JavaLangAccess#loadLibrary(Lookup, String)}.
-     */
-    NativeLibrary loadLibrary(MethodHandles.Lookup lookup, String libname) {
-        return loadLibrary0(lookup.lookupClass(), libname);
-    }
-
-    /**
-     * Panama specific: find default system library.
-     * See {@link JavaLangAccess#defaultLibrary()}.
-     */
-    NativeLibrary defaultLibrary() {
-        return NativeLibrary.defaultLibrary;
-    }
-
-    NativeLibrary loadLibrary0(Class<?> fromClass, String libname) {
+    void loadLibrary0(Class<?> fromClass, String libname) {
         SecurityManager security = System.getSecurityManager();
         if (security != null) {
             security.checkLink(libname);
         }
         if (libname.indexOf((int)File.separatorChar) != -1) {
             throw new UnsatisfiedLinkError(
                 "Directory separator should not appear in library name: " + libname);
         }
-        return ClassLoader.loadLibrary(fromClass, libname, false);
+        ClassLoader.loadLibrary(fromClass, libname);
     }
 
     /**
      * Returns the version of the Java Runtime Environment as a {@link Version}.
      *
