diff a/src/hotspot/cpu/x86/c1_Runtime1_x86.cpp b/src/hotspot/cpu/x86/c1_Runtime1_x86.cpp
--- a/src/hotspot/cpu/x86/c1_Runtime1_x86.cpp
+++ b/src/hotspot/cpu/x86/c1_Runtime1_x86.cpp
@@ -365,10 +365,11 @@
     xmm_bypass_limit = xmm_bypass_limit / 2;
   }
 #endif
 
   if (save_fpu_registers) {
+#ifndef _LP64
     if (UseSSE < 2) {
       int fpu_off = float_regs_as_doubles_off;
       for (int n = 0; n < FrameMap::nof_fpu_regs; n++) {
         VMReg fpu_name_0 = FrameMap::fpu_regname(n);
         map->set_callee_saved(VMRegImpl::stack2reg(fpu_off +     num_rt_args), fpu_name_0);
@@ -377,11 +378,22 @@
           map->set_callee_saved(VMRegImpl::stack2reg(fpu_off + 1 + num_rt_args), fpu_name_0->next());
         }
         fpu_off += 2;
       }
       assert(fpu_off == fpu_state_off, "incorrect number of fpu stack slots");
+
+      if (UseSSE == 1) {
+        int xmm_off = xmm_regs_as_doubles_off;
+        for (int n = 0; n < FrameMap::nof_fpu_regs; n++) {
+          VMReg xmm_name_0 = as_XMMRegister(n)->as_VMReg();
+          map->set_callee_saved(VMRegImpl::stack2reg(xmm_off + num_rt_args), xmm_name_0);
+          xmm_off += 2;
+        }
+        assert(xmm_off == float_regs_as_doubles_off, "incorrect number of xmm registers");
+      }
     }
+#endif // !LP64
 
     if (UseSSE >= 2) {
       int xmm_off = xmm_regs_as_doubles_off;
       for (int n = 0; n < FrameMap::nof_xmm_regs; n++) {
         if (n < xmm_bypass_limit) {
@@ -393,19 +405,10 @@
           }
         }
         xmm_off += 2;
       }
       assert(xmm_off == float_regs_as_doubles_off, "incorrect number of xmm registers");
-
-    } else if (UseSSE == 1) {
-      int xmm_off = xmm_regs_as_doubles_off;
-      for (int n = 0; n < FrameMap::nof_fpu_regs; n++) {
-        VMReg xmm_name_0 = as_XMMRegister(n)->as_VMReg();
-        map->set_callee_saved(VMRegImpl::stack2reg(xmm_off + num_rt_args), xmm_name_0);
-        xmm_off += 2;
-      }
-      assert(xmm_off == float_regs_as_doubles_off, "incorrect number of xmm registers");
     }
   }
 
   return map;
 }
@@ -452,10 +455,20 @@
       int offset = 0;
       for (int n = 0; n < FrameMap::nof_fpu_regs; n++) {
         __ fstp_d(Address(rsp, float_regs_as_doubles_off * VMRegImpl::stack_slot_size + offset));
         offset += 8;
       }
+
+      if (UseSSE == 1) {
+        // save XMM registers as float because double not supported without SSE2(num MMX == num fpu)
+        int offset = 0;
+        for (int n = 0; n < FrameMap::nof_fpu_regs; n++) {
+          XMMRegister xmm_name = as_XMMRegister(n);
+          __ movflt(Address(rsp, xmm_regs_as_doubles_off * VMRegImpl::stack_slot_size + offset), xmm_name);
+          offset += 8;
+        }
+      }
     }
 #endif // !_LP64
 
     if (UseSSE >= 2) {
       // save XMM registers
@@ -473,20 +486,10 @@
       for (int n = 0; n < xmm_bypass_limit; n++) {
         XMMRegister xmm_name = as_XMMRegister(n);
         __ movdbl(Address(rsp, xmm_regs_as_doubles_off * VMRegImpl::stack_slot_size + offset), xmm_name);
         offset += 8;
       }
-#ifndef _LP64
-    } else if (UseSSE == 1) {
-      // save XMM registers as float because double not supported without SSE2(num MMX == num fpu)
-      int offset = 0;
-      for (int n = 0; n < FrameMap::nof_fpu_regs; n++) {
-        XMMRegister xmm_name = as_XMMRegister(n);
-        __ movflt(Address(rsp, xmm_regs_as_doubles_off * VMRegImpl::stack_slot_size + offset), xmm_name);
-        offset += 8;
-      }
-#endif // !_LP64
     }
   }
 
   // FPU stack must be empty now
   NOT_LP64( __ verify_FPU(0, "save_live_registers"); )
