diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractIndexWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractIndexWriter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractIndexWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractIndexWriter.java
@@ -25,30 +25,31 @@
 
 package jdk.javadoc.internal.doclets.formats.html;
 
 import java.io.IOException;
 import java.io.Writer;
-import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.ModuleElement;
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.util.SimpleElementVisitor14;
 
 import com.sun.source.doctree.DocTree;
+import jdk.javadoc.internal.doclets.formats.html.SearchIndexItem.Category;
 import jdk.javadoc.internal.doclets.formats.html.markup.Entity;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTag;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;
-import jdk.javadoc.internal.doclets.formats.html.markup.Navigation;
-import jdk.javadoc.internal.doclets.formats.html.markup.Navigation.PageMode;
+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;
 import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;
 import jdk.javadoc.internal.doclets.toolkit.Content;
 import jdk.javadoc.internal.doclets.toolkit.util.DocFile;
 import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;
 import jdk.javadoc.internal.doclets.toolkit.util.DocPath;
@@ -91,12 +92,13 @@
                                   DocPath path,
                                   IndexBuilder indexBuilder) {
         super(configuration, path);
         this.indexBuilder = indexBuilder;
         this.navBar = new Navigation(null, configuration, PageMode.INDEX, path);
-        Collection<SearchIndexItem> items =
-                searchItems.get(SearchIndexItem.Category.SEARCH_TAGS);
+        Stream<SearchIndexItem> items =
+                searchItems.itemsOfCategories(Category.INDEX, Category.SYSTEM_PROPERTY)
+                        .sorted(utils.makeGenericSearchIndexComparator());
         this.tagSearchIndexMap = buildSearchTagIndex(items);
     }
 
     /**
      * Add the member information for the unicode character along with the
@@ -173,11 +175,11 @@
     }
 
     protected void addHeading(Character uc, Content contentTree) {
         String unicode = uc.toString();
         Content headContent = new StringContent(unicode);
-        HtmlTree heading = HtmlTree.HEADING(Headings.CONTENT_HEADING, false,
+        HtmlTree heading = HtmlTree.HEADING(Headings.CONTENT_HEADING,
                 HtmlStyle.title, headContent);
         heading.setId(getNameForIndex(unicode));
         contentTree.add(heading);
     }
 
@@ -228,11 +230,11 @@
      */
     protected void addDescription(ModuleElement mdle, Content dlTree, SearchIndexItem si) {
         String moduleName = utils.getFullyQualifiedName(mdle);
         Content link = getModuleLink(mdle, new StringContent(moduleName));
         si.setLabel(moduleName);
-        si.setCategory(SearchIndexItem.Category.MODULES);
+        si.setCategory(Category.MODULES);
         Content dt = HtmlTree.DT(link);
         dt.add(" - ");
         dt.add(contents.module_);
         dt.add(" " + moduleName);
         dlTree.add(dt);
@@ -252,11 +254,11 @@
         Content link = getPackageLink(pkg, new StringContent(utils.getPackageName(pkg)));
         if (configuration.showModules) {
             si.setContainingModule(utils.getFullyQualifiedName(utils.containingModule(pkg)));
         }
         si.setLabel(utils.getPackageName(pkg));
-        si.setCategory(SearchIndexItem.Category.PACKAGES);
+        si.setCategory(Category.PACKAGES);
         Content dt = HtmlTree.DT(link);
         dt.add(" - ");
         dt.add(contents.package_);
         dt.add(" " + utils.getPackageName(pkg));
         dlTree.add(dt);
@@ -275,11 +277,11 @@
     protected void addDescription(TypeElement typeElement, Content dlTree, SearchIndexItem si) {
         Content link = getLink(new LinkInfoImpl(configuration,
                         LinkInfoImpl.Kind.INDEX, typeElement).strong(true));
         si.setContainingPackage(utils.getPackageName(utils.containingPackage(typeElement)));
         si.setLabel(utils.getSimpleName(typeElement));
-        si.setCategory(SearchIndexItem.Category.TYPES);
+        si.setCategory(Category.TYPES);
         Content dt = HtmlTree.DT(link);
         dt.add(" - ");
         addClassInfo(typeElement, dt);
         dlTree.add(dt);
         Content dd = new HtmlTree(HtmlTag.DD);
@@ -323,11 +325,11 @@
                 si.setUrl(url);
             }
         }  else {
             si.setLabel(name);
         }
-        si.setCategory(SearchIndexItem.Category.MEMBERS);
+        si.setCategory(Category.MEMBERS);
         Content span = HtmlTree.SPAN(HtmlStyle.memberNameLink,
                 getDocLink(LinkInfoImpl.Kind.INDEX, member, name));
         Content dt = HtmlTree.DT(span);
         dt.add(" - ");
         addMemberDesc(member, dt);
@@ -430,36 +432,36 @@
      * @throws DocFileIOException if there is a problem creating any of the search index files
      */
     protected void createSearchIndexFiles() throws DocFileIOException {
         if (configuration.showModules) {
             createSearchIndexFile(DocPaths.MODULE_SEARCH_INDEX_JS,
-                                  searchItems.get(SearchIndexItem.Category.MODULES),
+                                  searchItems.itemsOfCategories(Category.MODULES),
                                   "moduleSearchIndex");
         }
         if (!configuration.packages.isEmpty()) {
             SearchIndexItem si = new SearchIndexItem();
-            si.setCategory(SearchIndexItem.Category.PACKAGES);
+            si.setCategory(Category.PACKAGES);
             si.setLabel(resources.getText("doclet.All_Packages"));
             si.setUrl(DocPaths.ALLPACKAGES_INDEX.getPath());
             searchItems.add(si);
         }
         createSearchIndexFile(DocPaths.PACKAGE_SEARCH_INDEX_JS,
-                              searchItems.get(SearchIndexItem.Category.PACKAGES),
+                              searchItems.itemsOfCategories(Category.PACKAGES),
                               "packageSearchIndex");
         SearchIndexItem si = new SearchIndexItem();
-        si.setCategory(SearchIndexItem.Category.TYPES);
+        si.setCategory(Category.TYPES);
         si.setLabel(resources.getText("doclet.All_Classes"));
         si.setUrl(DocPaths.ALLCLASSES_INDEX.getPath());
         searchItems.add(si);
         createSearchIndexFile(DocPaths.TYPE_SEARCH_INDEX_JS,
-                              searchItems.get(SearchIndexItem.Category.TYPES),
+                              searchItems.itemsOfCategories(Category.TYPES),
                               "typeSearchIndex");
         createSearchIndexFile(DocPaths.MEMBER_SEARCH_INDEX_JS,
-                              searchItems.get(SearchIndexItem.Category.MEMBERS),
+                              searchItems.itemsOfCategories(Category.MEMBERS),
                               "memberSearchIndex");
         createSearchIndexFile(DocPaths.TAG_SEARCH_INDEX_JS,
-                              searchItems.get(SearchIndexItem.Category.SEARCH_TAGS),
+                              searchItems.itemsOfCategories(Category.INDEX, Category.SYSTEM_PROPERTY),
                               "tagSearchIndex");
     }
 
     /**
      * Creates a search index file.
@@ -468,20 +470,22 @@
      * @param searchIndex       the search index items
      * @param varName           the variable name to write in the JavaScript file
      * @throws DocFileIOException if there is a problem creating the search index file
      */
     protected void createSearchIndexFile(DocPath searchIndexJS,
-                                         Collection<SearchIndexItem> searchIndex,
+                                         Stream<SearchIndexItem> searchIndex,
                                          String varName)
             throws DocFileIOException
     {
         // The file needs to be created even if there are no searchIndex items
         // File could be written straight-through, without an intermediate StringBuilder
-        if (!searchIndex.isEmpty()) {
+        Iterator<SearchIndexItem> index = searchIndex.iterator();
+        if (index.hasNext()) {
             StringBuilder searchVar = new StringBuilder("[");
             boolean first = true;
-            for (SearchIndexItem item : searchIndex) {
+            while (index.hasNext()) {
+                SearchIndexItem item = index.next();
                 if (first) {
                     searchVar.append(item.toString());
                     first = false;
                 } else {
                     searchVar.append(",").append(item.toString());
@@ -497,19 +501,15 @@
                 throw new DocFileIOException(jsFile, DocFileIOException.Mode.WRITE, ie);
             }
         }
     }
 
-    protected static Map<Character, List<SearchIndexItem>> buildSearchTagIndex(
-            Collection<? extends SearchIndexItem> searchItems)
+    private static Map<Character, List<SearchIndexItem>> buildSearchTagIndex(
+            Stream<? extends SearchIndexItem> searchItems)
     {
-        Map<Character, List<SearchIndexItem>> map = new HashMap<>();
-        for (SearchIndexItem sii : searchItems) {
-            String tagLabel = sii.getLabel();
-            Character unicode = (tagLabel.length() == 0)
-                    ? '*'
-                    : Character.toUpperCase(tagLabel.charAt(0));
-            map.computeIfAbsent(unicode, k -> new ArrayList<>()).add(sii);
-        }
-        return map;
+        return searchItems.collect(Collectors.groupingBy(i -> keyCharacter(i.getLabel())));
+    }
+
+    protected static Character keyCharacter(String s) {
+        return s.isEmpty() ? '*' : Character.toUpperCase(s.charAt(0));
     }
 }
