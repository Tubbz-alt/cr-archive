diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/ContentBuilder.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/ContentBuilder.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/ContentBuilder.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/ContentBuilder.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -28,10 +28,11 @@
 import java.io.IOException;
 import java.io.Writer;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Objects;
 
 import jdk.javadoc.internal.doclets.toolkit.Content;
 
 /**
  * A sequence of Content nodes.
@@ -46,32 +47,34 @@
             add(c);
         }
     }
 
     @Override
-    public void add(Content content) {
-        nullCheck(content);
+    public ContentBuilder add(Content content) {
+        Objects.requireNonNull(content);
         ensureMutableContents();
         if (content instanceof ContentBuilder) {
             contents.addAll(((ContentBuilder) content).contents);
         } else
             contents.add(content);
+        return this;
     }
 
     @Override
-    public void add(CharSequence text) {
-        if (text.length() == 0)
-            return;
-        ensureMutableContents();
-        Content c = contents.isEmpty() ? null : contents.get(contents.size() - 1);
-        StringContent sc;
-        if (c != null && c instanceof StringContent) {
-            sc = (StringContent) c;
-        } else {
-            contents.add(sc = new StringContent());
+    public ContentBuilder add(CharSequence text) {
+        if (text.length() > 0) {
+            ensureMutableContents();
+            Content c = contents.isEmpty() ? null : contents.get(contents.size() - 1);
+            StringContent sc;
+            if (c != null && c instanceof StringContent) {
+                sc = (StringContent) c;
+            } else {
+                contents.add(sc = new StringContent());
+            }
+            sc.add(text);
         }
-        sc.add(text);
+        return this;
     }
 
     @Override
     public boolean write(Writer writer, boolean atNewline) throws IOException {
         for (Content content: contents) {
