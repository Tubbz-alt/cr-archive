diff a/test/lib/jdk/test/lib/containers/cgroup/CgroupMetricsTester.java b/test/lib/jdk/test/lib/containers/cgroup/CgroupMetricsTester.java
--- a/test/lib/jdk/test/lib/containers/cgroup/CgroupMetricsTester.java
+++ b/test/lib/jdk/test/lib/containers/cgroup/CgroupMetricsTester.java
@@ -23,10 +23,11 @@
 
 package jdk.test.lib.containers.cgroup;
 
 import java.io.IOException;
 import java.math.BigInteger;
+import java.util.Arrays;
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 
 interface CgroupMetricsTester {
 
@@ -39,13 +40,13 @@
     public void testCpuSets();
     public void testCpuConsumption() throws IOException, InterruptedException;
     public void testMemoryUsage() throws Exception;
     public void testMisc();
 
-    public static long convertStringToLong(String strval, long overflowRetval) {
-        long retval = 0;
-        if (strval == null) return 0L;
+    public static long convertStringToLong(String strval, long initialVal, long overflowRetval) {
+        long retval = initialVal;
+        if (strval == null) return retval;
 
         try {
             retval = Long.parseLong(strval);
         } catch (NumberFormatException e) {
             // For some properties (e.g. memory.limit_in_bytes) we may overflow the range of signed long.
@@ -91,11 +92,11 @@
                 + ", expected [" + oldVal + "], got [" + testVal + "]");
     }
 
     public static Integer[] convertCpuSetsToArray(String cpusstr) {
         if (cpusstr == null || EMPTY_STR.equals(cpusstr)) {
-            return new Integer[0];
+            return null;
         }
         // Parse range string in the format 1,2-6,7
         Integer[] cpuSets = Stream.of(cpusstr.split(",")).flatMap(a -> {
             if (a.contains("-")) {
                 String[] range = a.split("-");
@@ -106,6 +107,21 @@
             }
         }).toArray(Integer[]::new);
         return cpuSets;
     }
 
+    public static Integer[] boxedArrayOrNull(int[] primitiveArray) {
+        if (primitiveArray == null) {
+            return null;
+        }
+        return Arrays.stream(primitiveArray).boxed().toArray(Integer[]::new);
+    }
+
+    public static Integer[] sortAllowNull(Integer[] array) {
+        if (array == null) {
+            return null;
+        }
+        Arrays.sort(array);
+        return array;
+    }
+
 }
