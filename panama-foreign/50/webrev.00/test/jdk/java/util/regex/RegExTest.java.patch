diff a/test/jdk/java/util/regex/RegExTest.java b/test/jdk/java/util/regex/RegExTest.java
--- a/test/jdk/java/util/regex/RegExTest.java
+++ b/test/jdk/java/util/regex/RegExTest.java
@@ -34,10 +34,11 @@
  * 7067045 7014640 7189363 8007395 8013252 8013254 8012646 8023647 6559590
  * 8027645 8035076 8039124 8035975 8074678 6854417 8143854 8147531 7071819
  * 8151481 4867170 7080302 6728861 6995635 6736245 4916384 6328855 6192895
  * 6345469 6988218 6693451 7006761 8140212 8143282 8158482 8176029 8184706
  * 8194667 8197462 8184692 8221431 8224789 8228352 8230829 8236034 8235812
+ * 8216332
  *
  * @library /test/lib
  * @library /lib/testlibrary/java/lang
  * @build jdk.test.lib.RandomFactory
  * @run main RegExTest
@@ -53,10 +54,12 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.math.BigInteger;
 import java.nio.CharBuffer;
 import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -66,10 +69,12 @@
 import java.util.function.Predicate;
 import java.util.regex.Matcher;
 import java.util.regex.MatchResult;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
+import java.util.stream.Stream;
+
 import jdk.test.lib.RandomFactory;
 
 /**
  * This is a test class created to check the operation of
  * the Pattern and Matcher classes.
@@ -4788,51 +4793,52 @@
         }
         report("Embedded flags");
     }
 
     private static void grapheme() throws Exception {
-        Files.lines(UCDFiles.GRAPHEME_BREAK_TEST)
+        Stream.concat(Files.lines(UCDFiles.GRAPHEME_BREAK_TEST),
+                Files.lines(Paths.get(System.getProperty("test.src", "."), "GraphemeTestCases.txt")))
             .filter( ln -> ln.length() != 0 && !ln.startsWith("#") )
             .forEach( ln -> {
-                    ln = ln.replaceAll("\\s+|\\([a-zA-Z]+\\)|\\[[a-zA-Z]]+\\]|#.*", "");
-                    // System.out.println(str);
-                    String[] strs = ln.split("\u00f7|\u00d7");
-                    StringBuilder src = new StringBuilder();
-                    ArrayList<String> graphemes = new ArrayList<>();
-                    StringBuilder buf = new StringBuilder();
-                    int offBk = 0;
-                    for (String str : strs) {
-                        if (str.length() == 0)  // first empty str
-                            continue;
-                        int cp = Integer.parseInt(str, 16);
-                        src.appendCodePoint(cp);
-                        buf.appendCodePoint(cp);
-                        offBk += (str.length() + 1);
-                        if (ln.charAt(offBk) == '\u00f7') {    // DIV
-                            graphemes.add(buf.toString());
-                            buf = new StringBuilder();
-                        }
+                ln = ln.replaceAll("\\s+|\\([a-zA-Z]+\\)|\\[[a-zA-Z]]+\\]|#.*", "");
+                // System.out.println(str);
+                String[] strs = ln.split("\u00f7|\u00d7");
+                StringBuilder src = new StringBuilder();
+                ArrayList<String> graphemes = new ArrayList<>();
+                StringBuilder buf = new StringBuilder();
+                int offBk = 0;
+                for (String str : strs) {
+                    if (str.length() == 0)  // first empty str
+                        continue;
+                    int cp = Integer.parseInt(str, 16);
+                    src.appendCodePoint(cp);
+                    buf.appendCodePoint(cp);
+                    offBk += (str.length() + 1);
+                    if (ln.charAt(offBk) == '\u00f7') {    // DIV
+                        graphemes.add(buf.toString());
+                        buf = new StringBuilder();
                     }
-                    Pattern p = Pattern.compile("\\X");
-                    Matcher m = p.matcher(src.toString());
-                    Scanner s = new Scanner(src.toString()).useDelimiter("\\b{g}");
-                    for (String g : graphemes) {
-                        // System.out.printf("     grapheme:=[%s]%n", g);
-                        // (1) test \\X directly
-                        if (!m.find() || !m.group().equals(g)) {
-                            System.out.println("Failed \\X [" + ln + "] : " + g);
-                            failCount++;
-                        }
-                        // (2) test \\b{g} + \\X  via Scanner
-                        boolean hasNext = s.hasNext(p);
-                        // if (!s.hasNext() || !s.next().equals(next)) {
-                        if (!s.hasNext(p) || !s.next(p).equals(g)) {
-                            System.out.println("Failed b{g} [" + ln + "] : " + g);
-                            failCount++;
-                        }
+                }
+                Pattern p = Pattern.compile("\\X");
+                Matcher m = p.matcher(src.toString());
+                Scanner s = new Scanner(src.toString()).useDelimiter("\\b{g}");
+                for (String g : graphemes) {
+                    // System.out.printf("     grapheme:=[%s]%n", g);
+                    // (1) test \\X directly
+                    if (!m.find() || !m.group().equals(g)) {
+                        System.out.println("Failed \\X [" + ln + "] : " + g);
+                        failCount++;
                     }
-                });
+                    // (2) test \\b{g} + \\X  via Scanner
+                    boolean hasNext = s.hasNext(p);
+                    // if (!s.hasNext() || !s.next().equals(next)) {
+                    if (!s.hasNext(p) || !s.next(p).equals(g)) {
+                        System.out.println("Failed b{g} [" + ln + "] : " + g);
+                        failCount++;
+                    }
+                }
+            });
         // some sanity checks
         if (!Pattern.compile("\\X{10}").matcher("abcdefghij").matches() ||
             !Pattern.compile("\\b{g}(?:\\X\\b{g}){5}\\b{g}").matcher("abcde").matches() ||
             !Pattern.compile("(?:\\X\\b{g}){2}").matcher("\ud800\udc00\ud801\udc02").matches())
             failCount++;
