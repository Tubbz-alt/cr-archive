diff a/test/jdk/tools/launcher/ArgFileSyntax.java b/test/jdk/tools/launcher/ArgFileSyntax.java
--- a/test/jdk/tools/launcher/ArgFileSyntax.java
+++ b/test/jdk/tools/launcher/ArgFileSyntax.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 
 /**
  * @test
- * @bug 8027634 8210810
+ * @bug 8027634 8210810 8240629
  * @summary Verify syntax of argument file
  * @build TestHelper
  * @run main ArgFileSyntax
  */
 import java.io.File;
@@ -34,11 +34,10 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 public class ArgFileSyntax extends TestHelper {
     // Buffer size in args.c readArgFile() method
     private static final int ARG_FILE_PARSER_BUF_SIZE = 4096;
@@ -211,14 +210,32 @@
         scratch = new ArrayList<>();
         String filling = String.valueOf(data);
         scratch.add(bag + "'" + filling + "\\\\aaa\\\\'");
         scratch.add(ver);
         rv.add(List.of(scratch, List.of(bag + filling + "\\aaa\\", ver)));
-
         return rv;
     }
 
+    // 8240629: end or start comment at boundary
+    @Test
+    public void test8240629() throws IOException {
+        char[] data = new char[ARG_FILE_PARSER_BUF_SIZE];
+        data[0] = '#';
+        Arrays.fill(data, 1, data.length, '0');
+
+        int need = ARG_FILE_PARSER_BUF_SIZE - System.lineSeparator().length();
+        // Comment end before, at, after boundary
+        for (int count = need - 1; count <= need + 1 ; count++) {
+            String commentAtBoundary = String.valueOf(data, 0, count);
+            List<String> content = new ArrayList<>();
+            content.add(commentAtBoundary);
+            content.add("# start a new comment at boundary");
+            content.add("-Dfoo=bar");
+            verifyParsing(content, List.of("-Dfoo=bar"));
+        }
+    }
+
     // ensure the arguments in the file are read in correctly
     private void verifyParsing(List<String> lines, List<String> args) throws IOException {
         File argFile = createArgFile(lines);
         String fname = "@" + argFile.getName();
         Map<String, String> env = new HashMap<>();
