diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -67,11 +67,11 @@
     protected final ConstantHelper constantHelper;
     protected final TypeTranslator typeTranslator = new TypeTranslator();
     private final String clsName;
     private final String pkgName;
     private StructBuilder structBuilder;
-    private List<JavaFileObject> structFiles = new ArrayList<>();
+    private List<String> structSources = new ArrayList<>();
 
     // have we seen this Variable earlier?
     protected boolean variableSeen(Declaration.Variable tree) {
         return !variables.add(tree);
     }
@@ -116,20 +116,21 @@
 
     public JavaFileObject[] generate(Declaration.Scoped decl) {
         builder.classBegin();
         //generate all decls
         decl.members().forEach(this::generateDecl);
-
+        for (String src : structSources) {
+            builder.addContent(src);
+        }
         builder.classEnd();
         try {
             List<JavaFileObject> files = new ArrayList<>();
             files.add(builder.build());
             files.addAll(constantHelper.getClasses());
             files.add(fileFromString(pkgName,"RuntimeHelper", getRuntimeHelperSource()));
             files.add(getCstringFile(pkgName));
             files.addAll(getPrimitiveTypeFiles(pkgName));
-            files.addAll(structFiles);
             return files.toArray(new JavaFileObject[0]);
         } catch (IOException ex) {
             throw new UncheckedIOException(ex);
         } catch (URISyntaxException ex2) {
             throw new RuntimeException(ex2);
@@ -235,20 +236,21 @@
             switch (d.kind()) {
                 case STRUCT:
                 case UNION: {
                     structClass = true;
                     this.structBuilder = new StructBuilder("C" + name, pkgName, constantHelper);
+                    structBuilder.incrAlign();
                     structBuilder.classBegin();
                     structBuilder.addLayoutGetter("C" + name, d.layout().get());
                     break;
                 }
             }
         }
         d.members().forEach(fieldTree -> fieldTree.accept(this, d.name().isEmpty() ? parent : d));
         if (structClass) {
             this.structBuilder.classEnd();
-            structFiles.add(structBuilder.build());
+            structSources.add(structBuilder.getSource());
             this.structBuilder = null;
         }
         return null;
     }
 
