diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
@@ -23,10 +23,11 @@
  * questions.
  */
 package jdk.incubator.jextract.tool;
 
 import jdk.incubator.foreign.FunctionDescriptor;
+import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 
 import javax.tools.JavaFileObject;
 import java.lang.constant.ClassDesc;
@@ -59,16 +60,21 @@
 
     JavaSourceBuilder(String className, String pkgName, ConstantHelper constantHelper) {
         this(className, pkgName, constantHelper, 0);
     }
 
+    protected String getClassModifiers() {
+        return PUB_CLS_MODS;
+    }
+
     public void classBegin() {
         addPackagePrefix();
         addImportSection();
 
         indent();
-        sb.append(PUB_CLS_MODS + "class ");
+        sb.append(getClassModifiers());
+        sb.append("class ");
         sb.append(className);
         sb.append(" {\n\n");
         emitConstructor();
     }
 
@@ -85,10 +91,18 @@
     public void classEnd() {
         indent();
         sb.append("}\n\n");
     }
 
+    public String getSource() {
+        return sb.toString();
+    }
+
+    public void addContent(String src) {
+        sb.append(src);
+    }
+
     public JavaFileObject build() {
         String res = sb.toString();
         this.sb.delete(0, res.length());
         return Utils.fileFromString(pkgName, className, res);
     }
@@ -114,16 +128,16 @@
     }
 
     public void addGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
         incrAlign();
         indent();
-        String param = parentLayout != null ? (MemorySegment.class.getName() + " seg") : "";
+        String param = parentLayout != null ? (MemoryAddress.class.getName() + " addr") : "";
         sb.append(PUB_MODS + type.getName() + " " + javaName + "$get(" + param + ") {\n");
         incrAlign();
         indent();
         String vhParam = parentLayout != null ?
-                "seg.baseAddress()" : addressGetCallString(javaName, nativeName);
+                "addr" : addressGetCallString(javaName, nativeName);
         sb.append("return (" + type.getName() + ")"
                 + varHandleGetCallString(javaName, nativeName, layout, type, parentLayout) + ".get(" + vhParam + ");\n");
         decrAlign();
         indent();
         sb.append("}\n");
@@ -131,16 +145,16 @@
     }
 
     public void addSetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
         incrAlign();
         indent();
-        String param = parentLayout != null ? (MemorySegment.class.getName() + " seg, ") : "";
+        String param = parentLayout != null ? (MemoryAddress.class.getName() + " addr, ") : "";
         sb.append(PUB_MODS + "void " + javaName + "$set(" + param + type.getName() + " x) {\n");
         incrAlign();
         indent();
         String vhParam = parentLayout != null ?
-                "seg.baseAddress()" : addressGetCallString(javaName, nativeName);
+                "addr" : addressGetCallString(javaName, nativeName);
         sb.append(varHandleGetCallString(javaName, nativeName, layout, type, parentLayout) + ".set(" + vhParam + ", x);\n");
         decrAlign();
         indent();
         sb.append("}\n");
         decrAlign();
