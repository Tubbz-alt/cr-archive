diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
@@ -23,10 +23,11 @@
  * questions.
  */
 package jdk.incubator.jextract.tool;
 
 import jdk.incubator.foreign.FunctionDescriptor;
+import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 
 import javax.tools.JavaFileObject;
 import java.lang.constant.ClassDesc;
@@ -59,16 +60,21 @@
 
     JavaSourceBuilder(String className, String pkgName, ConstantHelper constantHelper) {
         this(className, pkgName, constantHelper, 0);
     }
 
+    protected String getClassModifiers() {
+        return PUB_CLS_MODS;
+    }
+
     public void classBegin() {
         addPackagePrefix();
         addImportSection();
 
         indent();
-        sb.append(PUB_CLS_MODS + "class ");
+        sb.append(getClassModifiers());
+        sb.append("class ");
         sb.append(className);
         sb.append(" {\n\n");
         emitConstructor();
     }
 
@@ -85,10 +91,18 @@
     public void classEnd() {
         indent();
         sb.append("}\n\n");
     }
 
+    public String getSource() {
+        return sb.toString();
+    }
+
+    public void addContent(String src) {
+        sb.append(src);
+    }
+
     public JavaFileObject build() {
         String res = sb.toString();
         this.sb.delete(0, res.length());
         return Utils.fileFromString(pkgName, className, res);
     }
@@ -114,16 +128,16 @@
     }
 
     public void addGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
         incrAlign();
         indent();
-        String param = parentLayout != null ? (MemorySegment.class.getName() + " seg") : "";
+        String param = parentLayout != null ? (MemoryAddress.class.getName() + " addr") : "";
         sb.append(PUB_MODS + type.getName() + " " + javaName + "$get(" + param + ") {\n");
         incrAlign();
         indent();
         String vhParam = parentLayout != null ?
-                "seg.baseAddress()" : addressGetCallString(javaName, nativeName);
+                "addr" : addressGetCallString(javaName, nativeName);
         sb.append("return (" + type.getName() + ")"
                 + varHandleGetCallString(javaName, nativeName, layout, type, parentLayout) + ".get(" + vhParam + ");\n");
         decrAlign();
         indent();
         sb.append("}\n");
@@ -131,16 +145,16 @@
     }
 
     public void addSetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
         incrAlign();
         indent();
-        String param = parentLayout != null ? (MemorySegment.class.getName() + " seg, ") : "";
+        String param = parentLayout != null ? (MemoryAddress.class.getName() + " addr, ") : "";
         sb.append(PUB_MODS + "void " + javaName + "$set(" + param + type.getName() + " x) {\n");
         incrAlign();
         indent();
         String vhParam = parentLayout != null ?
-                "seg.baseAddress()" : addressGetCallString(javaName, nativeName);
+                "addr" : addressGetCallString(javaName, nativeName);
         sb.append(varHandleGetCallString(javaName, nativeName, layout, type, parentLayout) + ".set(" + vhParam + ", x);\n");
         decrAlign();
         indent();
         sb.append("}\n");
         decrAlign();
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -67,11 +67,11 @@
     protected final ConstantHelper constantHelper;
     protected final TypeTranslator typeTranslator = new TypeTranslator();
     private final String clsName;
     private final String pkgName;
     private StructBuilder structBuilder;
-    private List<JavaFileObject> structFiles = new ArrayList<>();
+    private List<String> structSources = new ArrayList<>();
 
     // have we seen this Variable earlier?
     protected boolean variableSeen(Declaration.Variable tree) {
         return !variables.add(tree);
     }
@@ -116,20 +116,21 @@
 
     public JavaFileObject[] generate(Declaration.Scoped decl) {
         builder.classBegin();
         //generate all decls
         decl.members().forEach(this::generateDecl);
-
+        for (String src : structSources) {
+            builder.addContent(src);
+        }
         builder.classEnd();
         try {
             List<JavaFileObject> files = new ArrayList<>();
             files.add(builder.build());
             files.addAll(constantHelper.getClasses());
             files.add(fileFromString(pkgName,"RuntimeHelper", getRuntimeHelperSource()));
             files.add(getCstringFile(pkgName));
             files.addAll(getPrimitiveTypeFiles(pkgName));
-            files.addAll(structFiles);
             return files.toArray(new JavaFileObject[0]);
         } catch (IOException ex) {
             throw new UncheckedIOException(ex);
         } catch (URISyntaxException ex2) {
             throw new RuntimeException(ex2);
@@ -235,20 +236,21 @@
             switch (d.kind()) {
                 case STRUCT:
                 case UNION: {
                     structClass = true;
                     this.structBuilder = new StructBuilder("C" + name, pkgName, constantHelper);
+                    structBuilder.incrAlign();
                     structBuilder.classBegin();
                     structBuilder.addLayoutGetter("C" + name, d.layout().get());
                     break;
                 }
             }
         }
         d.members().forEach(fieldTree -> fieldTree.accept(this, d.name().isEmpty() ? parent : d));
         if (structClass) {
             this.structBuilder.classEnd();
-            structFiles.add(structBuilder.build());
+            structSources.add(structBuilder.getSource());
             this.structBuilder = null;
         }
         return null;
     }
 
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StructBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StructBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StructBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StructBuilder.java
@@ -22,10 +22,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package jdk.incubator.jextract.tool;
 
+import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 
 import java.lang.constant.DirectMethodHandleDesc;
 
 /**
@@ -34,15 +35,32 @@
 class StructBuilder extends JavaSourceBuilder {
     StructBuilder(String className, String pkgName, ConstantHelper constantHelper) {
         super(className, pkgName, constantHelper);
     }
 
+    @Override
+    protected String getClassModifiers() {
+        return PUB_MODS;
+    }
+
+    @Override
+    protected void addPackagePrefix() {
+        // nested class. containing class has necessary package declaration
+    }
+
+    @Override
+    protected void addImportSection() {
+        // nested class. containing class has necessary imports
+    }
+
     @Override
     public void classEnd() {
         emitSizeof();
         emitAllocate();
         emitScopeAllocate();
+        emitAllocateArray();
+        emitScopeAllocateArray();
         super.classEnd();
     }
 
     @Override
     public void addLayoutGetter(String javaName, MemoryLayout layout) {
@@ -57,10 +75,22 @@
         indent();
         sb.append("}\n");
         decrAlign();
     }
 
+    @Override
+    public void addGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
+        super.addGetter(javaName, nativeName, layout, type, parentLayout);
+        addIndexGetter(javaName, nativeName, layout, type, parentLayout);
+    }
+
+    @Override
+    public void addSetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
+        super.addSetter(javaName, nativeName, layout, type, parentLayout);
+        addIndexSetter(javaName, nativeName, layout, type, parentLayout);
+    }
+
     private void emitSizeof() {
         incrAlign();
         indent();
         sb.append(PUB_MODS);
         sb.append("long sizeof() { return $LAYOUT().byteSize(); }\n");
@@ -80,6 +110,61 @@
         indent();
         sb.append(PUB_MODS);
         sb.append("MemoryAddress allocate(NativeAllocationScope scope) { return scope.allocate($LAYOUT()); }\n");
         decrAlign();
     }
+
+    private void emitAllocateArray() {
+        incrAlign();
+        indent();
+        sb.append(PUB_MODS);
+        sb.append("MemorySegment allocateArray(int len) {\n");
+        incrAlign();
+        indent();
+        sb.append("return MemorySegment.allocateNative(MemoryLayout.ofSequence(len, $LAYOUT()));");
+        decrAlign();
+        sb.append("}\n");
+        decrAlign();
+    }
+
+    private void emitScopeAllocateArray() {
+        incrAlign();
+        indent();
+        sb.append(PUB_MODS);
+        sb.append("MemoryAddress allocateArray(int len, NativeAllocationScope scope) {\n");
+        incrAlign();
+        indent();
+        sb.append("return scope.allocate(MemoryLayout.ofSequence(len, $LAYOUT()));");
+        decrAlign();
+        sb.append("}\n");
+        decrAlign();
+    }
+
+    private void addIndexGetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
+        incrAlign();
+        indent();
+        String params = MemoryAddress.class.getName() + " addr, long index";
+        sb.append(PUB_MODS + type.getName() + " " + javaName + "$get(" + params + ") {\n");
+        incrAlign();
+        indent();
+        sb.append("return (" + type.getName() + ")"
+                + varHandleGetCallString(javaName, nativeName, layout, type, parentLayout) + ".get(addr.addOffset(index*sizeof()));\n");
+        decrAlign();
+        indent();
+        sb.append("}\n");
+        decrAlign();
+    }
+
+    private void addIndexSetter(String javaName, String nativeName, MemoryLayout layout, Class<?> type, MemoryLayout parentLayout) {
+        incrAlign();
+        indent();
+        String params = MemoryAddress.class.getName() + " addr, long index, " + type.getName() + " x";
+        sb.append(PUB_MODS + "void " + javaName + "$set(" + params + ") {\n");
+        incrAlign();
+        indent();
+        sb.append(varHandleGetCallString(javaName, nativeName, layout, type, parentLayout) + ".set(addr.addOffset(index*sizeof()), x);\n");
+        decrAlign();
+        indent();
+        sb.append("}\n");
+        decrAlign();
+    }
 }
diff a/test/jdk/tools/jextract/RepeatedDeclsTest.java b/test/jdk/tools/jextract/RepeatedDeclsTest.java
--- a/test/jdk/tools/jextract/RepeatedDeclsTest.java
+++ b/test/jdk/tools/jextract/RepeatedDeclsTest.java
@@ -81,19 +81,19 @@
             checkIntGetter(cls, "C", 0);
             checkIntGetter(cls, "M", 1);
             checkIntGetter(cls, "Y", 2);
 
             // check Point layout
-            Class<?> pointCls = loader.loadClass("CPoint");
+            Class<?> pointCls = loader.loadClass("repeatedDecls_h$CPoint");
             MemoryLayout pointLayout = findLayout(pointCls);
             assertNotNull(pointLayout);
             assertTrue(((GroupLayout)pointLayout).isStruct());
             checkFieldABIType(pointLayout, "i",  Type.INT);
             checkFieldABIType(pointLayout, "j",  Type.INT);
 
             // check Point3D layout
-            Class<?> point3DCls = loader.loadClass("CPoint3D");
+            Class<?> point3DCls = loader.loadClass("repeatedDecls_h$CPoint3D");
             MemoryLayout point3DLayout = findLayout(point3DCls);
             assertNotNull(point3DLayout);
             assertTrue(((GroupLayout)point3DLayout).isStruct());
             checkFieldABIType(point3DLayout, "i",  Type.INT);
             checkFieldABIType(point3DLayout, "j",  Type.INT);
diff a/test/jdk/tools/jextract/Test8240811.java b/test/jdk/tools/jextract/Test8240811.java
--- a/test/jdk/tools/jextract/Test8240811.java
+++ b/test/jdk/tools/jextract/Test8240811.java
@@ -47,11 +47,11 @@
         try(Loader loader = classLoader(nameCollisionOutput)) {
             Class<?> cls = loader.loadClass("name_collision_h");
             assertNotNull(cls);
 
             // check foo layout
-            Class<?> fooCls = loader.loadClass("Cfoo");
+            Class<?> fooCls = loader.loadClass("name_collision_h$Cfoo");
             MemoryLayout fooLayout = findLayout(fooCls);
             assertNotNull(fooLayout);
             assertTrue(((GroupLayout)fooLayout).isStruct());
             checkFieldABIType(fooLayout, "x",  Type.INT);
             checkFieldABIType(fooLayout, "y",  Type.INT);
@@ -59,11 +59,11 @@
 
             MemoryLayout fooVarLayout = findLayout(cls, "foo");
             assertNotNull(fooVarLayout);
 
             // check foo2 layout
-            Class<?> foo2Cls = loader.loadClass("Cfoo2");
+            Class<?> foo2Cls = loader.loadClass("name_collision_h$Cfoo2");
             MemoryLayout foo2Layout = findLayout(foo2Cls);
             assertNotNull(foo2Layout);
             assertTrue(((GroupLayout)foo2Layout).isUnion());
             checkFieldABIType(foo2Layout, "i",  Type.INT);
             checkFieldABIType(foo2Layout, "l",  Type.LONG);
@@ -73,22 +73,22 @@
 
             MemoryLayout barVarLayout = findLayout(cls, "bar");
             assertNotNull(barVarLayout);
 
             // check bar layout
-            Class<?> barCls = loader.loadClass("Cbar");
+            Class<?> barCls = loader.loadClass("name_collision_h$Cbar");
             MemoryLayout barLayout = findLayout(barCls);
             assertNotNull(barLayout);
             assertTrue(((GroupLayout)barLayout).isStruct());
             checkFieldABIType(barLayout, "f1",  Type.FLOAT);
             checkFieldABIType(barLayout, "f2",  Type.FLOAT);
 
             MemoryLayout bar2VarLayout = findLayout(cls, "bar2");
             assertNotNull(bar2VarLayout);
 
             // check bar layout
-            Class<?> bar2Cls = loader.loadClass("Cbar2");
+            Class<?> bar2Cls = loader.loadClass("name_collision_h$Cbar2");
             MemoryLayout bar2Layout = findLayout(bar2Cls);
             assertNotNull(bar2Layout);
             assertTrue(((GroupLayout)bar2Layout).isUnion());
             checkFieldABIType(bar2Layout, "f",  Type.FLOAT);
             checkFieldABIType(bar2Layout, "d",  Type.DOUBLE);
diff a/test/jdk/tools/jextract/UniondeclTest.java b/test/jdk/tools/jextract/UniondeclTest.java
--- a/test/jdk/tools/jextract/UniondeclTest.java
+++ b/test/jdk/tools/jextract/UniondeclTest.java
@@ -45,11 +45,11 @@
         try(Loader loader = classLoader(uniondeclOutput)) {
             Class<?> cls = loader.loadClass("uniondecl_h");
             // check a method for "void func(IntOrFloat*)"
             assertNotNull(findMethod(cls, "func", MemoryAddress.class));
             // check IntOrFloat layout
-            Class<?> intOrFloatCls = loader.loadClass("CIntOrFloat");
+            Class<?> intOrFloatCls = loader.loadClass("uniondecl_h$CIntOrFloat");
             GroupLayout intOrFloatLayout = (GroupLayout)findLayout(intOrFloatCls);
             assertNotNull(intOrFloatLayout);
             assertTrue(intOrFloatLayout.isUnion());
             checkFieldABIType(intOrFloatLayout, "i",  Type.INT);
             checkFieldABIType(intOrFloatLayout, "f",  Type.FLOAT);
diff a/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java b/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java
--- a/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java
+++ b/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java
@@ -195,23 +195,23 @@
 
     @Test(dataProvider = "structMembers")
     public void testStructMember(String structName, MemoryLayout memberLayout, Class<?> expectedType, Object testValue) throws Throwable {
         String memberName = memberLayout.name().orElseThrow();
 
-        Class<?> structCls = loader.loadClass("com.acme.C" + structName);
+        Class<?> structCls = loader.loadClass("com.acme.examples_h$C" + structName);
         Method layout_getter = checkMethod(structCls, "$LAYOUT", MemoryLayout.class);
         MemoryLayout structLayout = (MemoryLayout) layout_getter.invoke(null);
         try (MemorySegment struct = MemorySegment.allocateNative(structLayout)) {
             Method vh_getter = checkMethod(structCls, memberName + "$VH", VarHandle.class);
             VarHandle vh = (VarHandle) vh_getter.invoke(null);
             assertEquals(vh.varType(), expectedType);
 
-            Method getter = checkMethod(structCls, memberName + "$get", expectedType, MemorySegment.class);
-            Method setter = checkMethod(structCls, memberName + "$set", void.class, MemorySegment.class, expectedType);
-
-            setter.invoke(null, struct, testValue);
-            assertEquals(getter.invoke(null, struct), testValue);
+            Method getter = checkMethod(structCls, memberName + "$get", expectedType, MemoryAddress.class);
+            Method setter = checkMethod(structCls, memberName + "$set", void.class, MemoryAddress.class, expectedType);
+            MemoryAddress addr = struct.baseAddress();
+            setter.invoke(null, addr, testValue);
+            assertEquals(getter.invoke(null, addr), testValue);
         }
     }
 
     @Test(dataProvider = "functionalInterfaces")
     public void testFunctionalInterface(String name, MethodType type) {
diff a/test/jdk/tools/jextract/testStruct/LibStructTest.java b/test/jdk/tools/jextract/testStruct/LibStructTest.java
--- a/test/jdk/tools/jextract/testStruct/LibStructTest.java
+++ b/test/jdk/tools/jextract/testStruct/LibStructTest.java
@@ -24,12 +24,10 @@
 import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.MemoryLayout.PathElement;
 import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.SystemABI.Type;
 import org.testng.annotations.Test;
-import test.jextract.struct.CAllTypes;
-import test.jextract.struct.CPoint;
 
 import static jdk.incubator.foreign.SystemABI.NATIVE_TYPE;
 import static org.testng.Assert.assertEquals;
 import static test.jextract.struct.struct_h.*;
 
@@ -42,19 +40,39 @@
  */
 public class LibStructTest {
     @Test
     public void testMakePoint() {
         try (var seg = makePoint(42, -39)) {
-            assertEquals(CPoint.x$get(seg), 42);
-            assertEquals(CPoint.y$get(seg), -39);
+            var addr = seg.baseAddress();
+            assertEquals(CPoint.x$get(addr), 42);
+            assertEquals(CPoint.y$get(addr), -39);
         }
+    }
+
+    @Test
+    public void testAllocate() {
+        try (var seg = CPoint.allocate()) {
+            var addr = seg.baseAddress();
+            CPoint.x$set(addr, 56);
+            CPoint.y$set(addr, 65);
+            assertEquals(CPoint.x$get(addr), 56);
+            assertEquals(CPoint.y$get(addr), 65);
+        }
+    }
 
-        try (var seg2 = CPoint.allocate()) {
-            CPoint.x$set(seg2, 56);
-            CPoint.y$set(seg2, 65);
-            assertEquals(CPoint.x$get(seg2), 56);
-            assertEquals(CPoint.y$get(seg2), 65);
+    @Test
+    public void testAllocateArray() {
+        try (var seg = CPoint.allocateArray(3)) {
+            var addr = seg.baseAddress();
+            for (int i = 0; i < 3; i++) {
+                CPoint.x$set(addr, i, 56 + i);
+                CPoint.y$set(addr, i, 65 + i);
+            }
+            for (int i = 0; i < 3; i++) {
+                assertEquals(CPoint.x$get(addr, i), 56 + i);
+                assertEquals(CPoint.y$get(addr, i), 65 + i);
+            }
         }
     }
 
     private static void checkFieldABIType(GroupLayout group, String fieldName, Type expected) {
         assertEquals(group.select(PathElement.groupElement(fieldName)).attribute(NATIVE_TYPE)
