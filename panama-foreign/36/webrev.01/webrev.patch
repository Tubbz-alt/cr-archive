diff a/make/autoconf/lib-clang.m4 b/make/autoconf/lib-clang.m4
--- a/make/autoconf/lib-clang.m4
+++ b/make/autoconf/lib-clang.m4
@@ -100,18 +100,18 @@
       CLANG_BIN_PATH="$with_libclang_bin"
     fi
 
     dnl Only for Windows platform now, as we don't need bin yet for other platform
     if test "x$OPENJDK_TARGET_OS" = xwindows; then
-        BASIC_FIXUP_PATH(CLANG_BIN_PATH)
+        UTIL_FIXUP_PATH(CLANG_BIN_PATH)
     else
         CLANG_BIN_PATH=""
     fi
 
-    BASIC_FIXUP_PATH(CLANG_INCLUDE_PATH)
-    BASIC_FIXUP_PATH(CLANG_LIB_PATH)
-    BASIC_FIXUP_PATH(CLANG_INCLUDE_AUX_PATH)
+    UTIL_FIXUP_PATH(CLANG_INCLUDE_PATH)
+    UTIL_FIXUP_PATH(CLANG_LIB_PATH)
+    UTIL_FIXUP_PATH(CLANG_INCLUDE_AUX_PATH)
 
     if test "x$CLANG_INCLUDE_PATH" != "x"; then
         LIBCLANG_CPPFLAGS="-I$CLANG_INCLUDE_PATH"
     else
         LIBCLANG_CPPFLAGS=""
@@ -187,11 +187,11 @@
     if test "x$OPENJDK_TARGET_OS" = xwindows; then
       CLANG_LIBNAME=[$CLANG_BIN_PATH]["/libclang"][$SHARED_LIBRARY_SUFFIX]
     else
       CLANG_LIBNAME=[$CLANG_LIB_PATH/$LIBRARY_PREFIX]["clang"][$SHARED_LIBRARY_SUFFIX]
     fi
-    BASIC_REMOVE_SYMBOLIC_LINKS(CLANG_LIBNAME)
+    UTIL_REMOVE_SYMBOLIC_LINKS(CLANG_LIBNAME)
   fi
 
   AC_SUBST(ENABLE_LIBCLANG)
   AC_SUBST(CLANG_INCLUDE_PATH)
   AC_SUBST(CLANG_INCLUDE_AUX_PATH)
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
@@ -45,10 +45,11 @@
 import java.lang.invoke.MethodHandles;
 import java.lang.constant.Constable;
 import java.lang.reflect.Field;
 import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
+import java.lang.reflect.Method;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 import java.nio.file.OpenOption;
 import java.nio.file.Path;
 import java.nio.file.StandardOpenOption;
@@ -130,10 +131,20 @@
 
     public static Constable getAnnotation(MemoryLayout layout, String name) {
         return getAnnotations(layout).get(name);
     }
 
+    public static MemoryLayout withAnnotation(MemoryLayout layout, String name, Constable value) {
+        try {
+            Method m = ValueLayout.class.getSuperclass().getDeclaredMethod("withAnnotation", String.class, Constable.class);
+            m.setAccessible(true);
+            return (MemoryLayout)m.invoke(layout, name, value);
+        } catch (ReflectiveOperationException ex) {
+            throw new IllegalStateException(ex);
+        }
+    }
+
     public static MemoryAddress resizeNativeAddress(MemoryAddress base, long byteSize) {
         return new MemoryAddressImpl((MemorySegmentImpl)Utils.makeNativeSegmentUnchecked(base, byteSize), 0);
     }
 
     public static void checkCarrier(Class<?> carrier) {
diff a/src/jdk.incubator.foreign/share/classes/module-info.java b/src/jdk.incubator.foreign/share/classes/module-info.java
--- a/src/jdk.incubator.foreign/share/classes/module-info.java
+++ b/src/jdk.incubator.foreign/share/classes/module-info.java
@@ -34,6 +34,7 @@
     exports jdk.incubator.foreign;
     exports jdk.internal.foreign.abi.aarch64 to jdk.incubator.jextract;
     exports jdk.internal.foreign.abi.x64.sysv to jdk.incubator.jextract;
     exports jdk.internal.foreign.abi.x64.windows to jdk.incubator.jextract;
     exports jdk.incubator.foreign.unsafe to jdk.incubator.jextract;
+    exports jdk.internal.foreign to jdk.incubator.jextract;
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
@@ -159,11 +159,12 @@
         if (layout == null) {
             //no layout - abort
             return null;
         }
         Class<?> clazz = typeTranslator.getJavaType(type);
-        if (clazz == MemoryAddress.class || clazz == MemorySegment.class || layout.byteSize() > 8) {
+        if (tree.kind() == Declaration.Variable.Kind.BITFIELD || clazz == MemoryAddress.class ||
+                clazz == MemorySegment.class || layout.byteSize() > 8) {
             //skip
             return null;
         }
 
         if (parent != null) {
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/StaticWrapperSourceFactory.java
@@ -100,11 +100,12 @@
         if (layout == null) {
             //no layout - abort
             return null;
         }
         Class<?> clazz = typeTranslator.getJavaType(type);
-        if (clazz == MemoryAddress.class || clazz == MemorySegment.class || layout.byteSize() > 8) {
+        if (tree.kind() == Declaration.Variable.Kind.BITFIELD || clazz == MemoryAddress.class ||
+                clazz == MemorySegment.class || layout.byteSize() > 8) {
             //skip
             return null;
         }
 
         if (parent != null) {
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Utils.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Utils.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Utils.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Utils.java
@@ -33,10 +33,11 @@
 import jdk.internal.clang.SourceLocation;
 import jdk.internal.clang.Type;
 import jdk.internal.clang.TypeKind;
 
 import javax.lang.model.SourceVersion;
+import java.lang.reflect.Method;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -277,16 +278,14 @@
      */
     private static boolean isPrintableAscii(char ch) {
         return ch >= ' ' && ch <= '~';
     }
 
-    private static HashMap<MemoryLayout, GroupLayout> bitfieldContents = new HashMap<>();
-
     public static Optional<GroupLayout> getContents(MemoryLayout layout) {
-        return Optional.ofNullable(bitfieldContents.remove(layout));
+        return Optional.ofNullable((GroupLayout)jdk.internal.foreign.Utils.getAnnotation(layout, "contents"));
     }
 
+    @SuppressWarnings("unchecked")
     public static <Z extends MemoryLayout> Z addContents(Z layout, GroupLayout contents) {
-        bitfieldContents.put(layout, contents);
-        return layout;
+        return (Z)jdk.internal.foreign.Utils.withAnnotation(layout, "contents", contents);
     }
 }
diff a/test/jdk/java/jextract/JextractApiTestBase.java b/test/jdk/java/jextract/JextractApiTestBase.java
--- a/test/jdk/java/jextract/JextractApiTestBase.java
+++ b/test/jdk/java/jextract/JextractApiTestBase.java
@@ -73,10 +73,17 @@
         Declaration.Variable global = checkConstant(record, name, type);
         assertEquals(global.kind(), Declaration.Variable.Kind.FIELD);
         return global;
     }
 
+    public static Declaration.Variable checkBitField(Declaration.Scoped record, String name, Type type, int size) {
+        Declaration.Variable global = checkConstant(record, name, type);
+        assertEquals(global.kind(), Declaration.Variable.Kind.BITFIELD);
+        assertEquals(global.layout().get().bitSize(), size);
+        return global;
+    } 
+
     public static void checkFunction(Declaration.Function function, Type ret, Type... params) {
         assertTypeEquals(ret, function.type().returnType());
         assertEquals(function.parameters().size(), params.length);
         for (int i = 0 ; i < params.length ; i++) {
             assertTypeEquals(params[i], function.type().argumentTypes().get(i));
diff a/test/jdk/java/jextract/Test8239490.h b/test/jdk/java/jextract/Test8239490.h
--- /dev/null
+++ b/test/jdk/java/jextract/Test8239490.h
@@ -0,0 +1,12 @@
+
+struct Foo {
+    unsigned int a:1;
+    unsigned int b:1;
+    unsigned int c:30;
+};
+
+struct Bar {
+    unsigned int x:1;
+    unsigned int y:31;
+    struct Foo z[1];
+};
diff a/test/jdk/java/jextract/Test8239490.java b/test/jdk/java/jextract/Test8239490.java
--- /dev/null
+++ b/test/jdk/java/jextract/Test8239490.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @build JextractApiTestBase
+ * @run testng Test8239490
+ */
+
+import jdk.incubator.jextract.Declaration;
+import jdk.incubator.jextract.Type;
+import org.testng.annotations.Test;
+
+import static org.testng.Assert.*;
+
+public class Test8239490 extends JextractApiTestBase {
+    @Test
+    public void test8239490() {
+        Declaration.Scoped d = parse("Test8239490.h");
+        // check Foo
+        String[] fooBitfieldNames = { "a", "b", "c" };
+        int[] fooBitfieldSizes = { 1, 1, 30 };
+        Declaration.Scoped structFoo = checkStruct(d, "Foo", "");
+        Declaration.Scoped bitfieldsFoo = checkStruct(structFoo, "", "a", "b", "c");
+        Type intType = ((Declaration.Variable)bitfieldsFoo.members().get(0)).type();
+        for (int i = 0 ; i < fooBitfieldNames.length ; i++) {
+            checkBitField(bitfieldsFoo, fooBitfieldNames[i], intType, fooBitfieldSizes[i]);
+        }
+        // check Bar
+        String[] barBitfieldNames = { "x", "y" };
+        int[] barBitfieldSizes = { 1, 31 };
+        Declaration.Scoped structBar = checkStruct(d, "Bar", "", "z");
+        Declaration.Scoped bitfieldsBar = checkStruct(structBar, "", "x", "y");
+        for (int i = 0 ; i < barBitfieldNames.length ; i++) {
+            checkBitField(bitfieldsBar, barBitfieldNames[i], intType, barBitfieldSizes[i]);
+        }
+        checkField(structBar, "z", Type.array(1, Type.declared(structFoo)));
+    }
+}
