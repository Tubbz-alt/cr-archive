diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
@@ -45,10 +45,11 @@
 import java.lang.invoke.MethodHandles;
 import java.lang.constant.Constable;
 import java.lang.reflect.Field;
 import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
+import java.lang.reflect.Method;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 import java.nio.file.OpenOption;
 import java.nio.file.Path;
 import java.nio.file.StandardOpenOption;
@@ -130,10 +131,20 @@
 
     public static Constable getAnnotation(MemoryLayout layout, String name) {
         return getAnnotations(layout).get(name);
     }
 
+    public static MemoryLayout withAnnotation(MemoryLayout layout, String name, Constable value) {
+        try {
+            Method m = ValueLayout.class.getSuperclass().getDeclaredMethod("withAnnotation", String.class, Constable.class);
+            m.setAccessible(true);
+            return (MemoryLayout)m.invoke(layout, name, value);
+        } catch (ReflectiveOperationException ex) {
+            throw new IllegalStateException(ex);
+        }
+    }
+
     public static MemoryAddress resizeNativeAddress(MemoryAddress base, long byteSize) {
         return new MemoryAddressImpl((MemorySegmentImpl)Utils.makeNativeSegmentUnchecked(base, byteSize), 0);
     }
 
     public static void checkCarrier(Class<?> carrier) {
