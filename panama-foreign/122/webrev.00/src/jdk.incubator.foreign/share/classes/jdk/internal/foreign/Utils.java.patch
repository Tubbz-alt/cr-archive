diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
@@ -25,36 +25,28 @@
  */
 
 package jdk.internal.foreign;
 
 import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.MemorySegment;
-import jdk.internal.access.JavaNioAccess;
-import jdk.internal.access.SharedSecrets;
 import jdk.internal.access.foreign.MemoryAddressProxy;
-import jdk.internal.access.foreign.UnmapperProxy;
-import jdk.internal.misc.Unsafe;
-import sun.nio.ch.FileChannelImpl;
-import sun.security.action.GetBooleanAction;
+import jdk.internal.misc.VM;
 
-import java.io.IOException;
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
-import java.nio.ByteBuffer;
-import java.nio.channels.FileChannel;
-import java.nio.file.OpenOption;
-import java.nio.file.Path;
-import java.nio.file.StandardOpenOption;
+import java.util.Optional;
 import java.util.function.Supplier;
 
 /**
  * This class contains misc helper functions to support creation of memory segments.
  */
 public final class Utils {
 
+    private static final String foreignAccess = Optional.ofNullable(VM.getSavedProperty("foreign.unsafe"))
+            .orElse("deny");
+
     private static final MethodHandle ADDRESS_FILTER;
 
     static {
         try {
             ADDRESS_FILTER = MethodHandles.lookup().findStatic(Utils.class, "filterAddress",
@@ -83,6 +75,29 @@
     }
 
     private static MemoryAddressProxy filterAddress(MemoryAddress addr) {
         return (MemoryAddressImpl)addr;
     }
+
+    public static void checkRestrictedAccess() {
+        switch (foreignAccess) {
+            case "deny" -> throwIllegalAccessError(foreignAccess);
+            case "warn" -> System.err.println("WARNING: Accessing jdk.incubator.foreign.Foreign.");
+            case "debug" -> {
+                StringBuilder sb = new StringBuilder("DEBUG: Accessing jdk.incubator.foreign.Foreign.");
+                StackWalker.getInstance().walk(s -> {
+                    s
+                            .forEach(f -> sb.append(System.lineSeparator()).append("\tat ").append(f));
+                    return null;
+                });
+                System.out.println(sb.toString());
+            }
+            case "permit" -> {}
+            default -> throwIllegalAccessError(foreignAccess);
+        }
+    }
+
+    private static void throwIllegalAccessError(String value) {
+        throw new IllegalAccessError("Can not access jdk.incubator.foreign.Foreign." +
+                " System property 'jdk.incubator.foreign.Foreign' is set to '" + value + "'");
+    }
 }
