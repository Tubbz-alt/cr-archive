diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
@@ -24,10 +24,11 @@
  *
  */
 
 package jdk.internal.foreign;
 
+import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.internal.access.JavaNioAccess;
 import jdk.internal.access.SharedSecrets;
 import jdk.internal.misc.Unsafe;
 import jdk.internal.vm.annotation.ForceInline;
@@ -100,14 +101,16 @@
             segment = segment.asSlice(delta, bytesSize);
         }
         return segment;
     }
 
-    public static MemorySegment makeNativeSegmentUnchecked(long min, long bytesSize, Thread owner, boolean allowClose) {
-        MemoryScope scope = new MemoryScope(null, allowClose ? () -> unsafe.freeMemory(min) : null);
-        int mask = defaultAccessModes(bytesSize);
-        if (!allowClose) {
-            mask &= ~MemorySegment.CLOSE;
-        }
-        return new NativeMemorySegmentImpl(min, bytesSize, mask, owner, scope);
+    public static MemorySegment makeNativeSegmentUnchecked(MemoryAddress min, long bytesSize, Thread owner, AutoCloseable cleanup, Object attachment) {
+        MemoryScope scope = new MemoryScope(attachment, extractCleanup(cleanup));
+        return new NativeMemorySegmentImpl(min.toRawLongValue(), bytesSize, defaultAccessModes(bytesSize), owner, scope);
+    }
+
+    private static AutoCloseable extractCleanup(AutoCloseable cleanup) {
+        return (cleanup instanceof AbstractMemorySegmentImpl) ?
+            ((AbstractMemorySegmentImpl) cleanup).scope.cleanupAction :
+            cleanup;
     }
 }
