diff a/test/jdk/java/foreign/TestNative.java b/test/jdk/java/foreign/TestNative.java
--- a/test/jdk/java/foreign/TestNative.java
+++ b/test/jdk/java/foreign/TestNative.java
@@ -24,21 +24,19 @@
 
 /*
  * @test
  * @modules java.base/jdk.internal.misc
  *          jdk.incubator.foreign/jdk.internal.foreign
- * @run testng TestNative
+ * @run testng/othervm -Dforeign.unsafe=permit TestNative
  */
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayout.PathElement;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
-import jdk.internal.foreign.InternalForeign;
 import jdk.internal.misc.Unsafe;
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 
 import java.lang.invoke.VarHandle;
@@ -171,40 +169,31 @@
             assertEquals(buf.capacity(), expected);
             assertEquals(getCapacity(buf), expected);
         }
     }
 
-    @Test
-    public void testResize() {
-        MemoryAddress addr = MemoryAddress.ofLong(42);
-        assertNull(addr.segment());
-        MemoryAddress sized = InternalForeign.getInstancePrivileged().withSize(addr, 12);
-        assertEquals(sized.segment().byteSize(), 12);
-    }
-
     @Test
     public void testMallocSegment() {
         MemoryAddress addr = MemoryAddress.ofLong(allocate(12));
         assertNull(addr.segment());
-        MemorySegment mallocSegment = InternalForeign.getInstancePrivileged().asMallocSegment(addr, 12);
+        MemorySegment mallocSegment = MemorySegment.ofNativeUnsafe(addr, 12, null,
+                () -> UNSAFE.freeMemory(addr.toRawLongValue()), null);
         assertEquals(mallocSegment.byteSize(), 12);
         mallocSegment.close(); //free here
         assertTrue(!mallocSegment.isAlive());
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadResize() {
         try (MemorySegment segment = MemorySegment.allocateNative(4)) {
-            InternalForeign.getInstancePrivileged().withSize(segment.baseAddress(), 12);
+            MemorySegment.ofNativeUnsafe(segment.baseAddress(), 0, null, null, null);
         }
     }
 
-    @Test(expectedExceptions = IllegalArgumentException.class)
-    public void testBadMallocSegment() {
-        try (MemorySegment segment = MemorySegment.allocateNative(4)) {
-            InternalForeign.getInstancePrivileged().asMallocSegment(segment.baseAddress(), 12);
-        }
+    @Test(expectedExceptions = NullPointerException.class)
+    public void testNullUnsafeSegment() {
+        MemorySegment.ofNativeUnsafe(null, 10, null, null, null);
     }
 
     static {
         System.loadLibrary("NativeAccess");
     }
