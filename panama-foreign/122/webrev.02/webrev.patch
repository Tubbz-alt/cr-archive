diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/*
- *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- *  This code is free software; you can redistribute it and/or modify it
- *  under the terms of the GNU General Public License version 2 only, as
- *  published by the Free Software Foundation.  Oracle designates this
- *  particular file as subject to the "Classpath" exception as provided
- *  by Oracle in the LICENSE file that accompanied this code.
- *
- *  This code is distributed in the hope that it will be useful, but WITHOUT
- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- *  version 2 for more details (a copy is included in the LICENSE file that
- *  accompanied this code).
- *
- *  You should have received a copy of the GNU General Public License version
- *  2 along with this work; if not, write to the Free Software Foundation,
- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- *  or visit www.oracle.com if you need additional information or have any
- *  questions.
- *
- */
-
-package jdk.incubator.foreign;
-
-import jdk.internal.foreign.InternalForeign;
-
-/**
- * A class containing various methods relating to native interop.
- */
-public interface Foreign {
-
-    /**
-     * Get an instance of the {@linkplain Foreign} interface.
-     * <p>
-     * Access to this method must be explicitly enabled by setting the {@code jdk.incubator.foreign.Foreign} system
-     * property. The available values are {@code deny}, {@code warn}, {@code debug}, {@code permit}.
-     * <ul>
-     * <li>
-     * If set to {@code deny} an {@linkplain IllegalAccessError} will be thrown.
-     * <li>
-     * If set to {@code warn} a warning message will be written to the standard error stream.
-     * <li>
-     * If set to {@code debug} a debug message and a stack trace will be printed to the standard output stream.
-     * <li>
-     * If set to {@code permit} no special action will be taken.
-     * <li>
-     * If set to any other value an {@linkplain IllegalAccessError} will be thrown.
-     * </ul>
-     * <p>
-     * {@code deny} is the default value.
-     *
-     * @return an instance of {@linkplain Foreign}
-     * @throws IllegalAccessError if {@code jdk.incubator.foreign.Foreign} is set to {@code deny}
-     */
-    static Foreign getInstance() throws IllegalAccessError {
-        return InternalForeign.getInstance();
-    }
-
-    /**
-     * Returns a new memory address attached to a native memory segment with given base address and size. The segment
-     * attached to the returned address has <em>no temporal bounds</em> and cannot be closed; as such,
-     * the returned address is assumed to always be <em>alive</em>. Also, the segment attached to the returned address
-     * has <em>no confinement thread</em>; this means that the returned address can be used by multiple threads.
-     * <p>
-     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
-     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
-     * restricted methods, and use safe and supported functionalities, where possible.
-     *
-     * @param base the desired base address
-     * @param byteSize the desired size (in bytes).
-     * @return a new memory address attached to a native memory segment with given base address and size.
-     * @throws IllegalArgumentException if {@code base} does not encapsulate an <em>unchecked</em> native memory address,
-     * e.g. if {@code base.segment() != null}.
-     * @throws IllegalAccessError if the permission jkd.incubator.foreign.restrictedMethods is set to 'deny'
-     */
-    MemoryAddress withSize(MemoryAddress base, long byteSize);
-
-    /**
-     * Returns a new native memory segment with given base address and size; the returned segment has its own temporal
-     * bounds, and can therefore be closed; closing such a segment results in releasing the native memory by calling
-     * <em>free</em> on the base address of the returned memory segment. As for other ordinary memory segments,
-     * the returned segment will also be confined on the current thread (see {@link Thread#currentThread()}).
-     * <p>
-     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
-     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
-     * restricted methods, and use safe and supported functionalities, where possible.
-     *
-     * @param base the desired base address
-     * @param byteSize the desired size.
-     * @return a new native memory segment with given base address and size.
-     * @throws IllegalArgumentException if {@code base} does not encapsulate an <em>unchecked</em> native memory address,
-      * e.g. if {@code base.segment() != null}.
-     * @throws IllegalAccessError if the permission jkd.incubator.foreign.restrictedMethods is set to 'deny'
-     */
-    MemorySegment asMallocSegment(MemoryAddress base, long byteSize);
-
-    /**
-     * Returns a non-confined memory segment that has the same spatial and temporal bounds as the provided segment.
-     * Since the returned segment can be effectively accessed by multiple threads in an unconstrained fashion,
-     * this method should be used with care, as it might lead to JVM crashes - e.g. in the case where a thread {@code A}
-     * closes a segment while another thread {@code B} is accessing it.
-     * <p>
-     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
-     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
-     * restricted methods, and use safe and supported functionalities, where possible.
-     * @param segment the segment from which an unconfined view is to be created.
-     * @return a non-confined memory segment that has the same spatial and temporal bounds as the provided segment.
-     */
-    MemorySegment asUnconfined(MemorySegment segment);
-
-}
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -30,14 +30,16 @@
 
 import jdk.internal.foreign.AbstractMemorySegmentImpl;
 import jdk.internal.foreign.HeapMemorySegmentImpl;
 import jdk.internal.foreign.MappedMemorySegmentImpl;
 import jdk.internal.foreign.NativeMemorySegmentImpl;
+import jdk.internal.foreign.Utils;
 
 import java.io.IOException;
 import java.nio.channels.FileChannel;
 import java.nio.file.Path;
+import java.util.Objects;
 import java.util.Spliterator;
 import java.util.function.Consumer;
 
 /**
  * A memory segment models a contiguous region of memory. A memory segment is associated with both spatial
@@ -471,10 +473,45 @@
         }
 
         return NativeMemorySegmentImpl.makeNativeSegment(bytesSize, alignmentBytes);
     }
 
+    /**
+     * Returns a new native memory segment with given base address and size; the returned segment has its own temporal
+     * bounds, and can therefore be closed; closing such a segment can optionally result in calling an user-provided cleanup
+     * action. This method can be very useful when interacting with custom native memory sources (e.g. custom allocators,
+     * GPU memory, etc.), where an address to some underlying memory region is typically obtained from native code
+     * (often as a plain {@code long} value).
+     * <p>
+     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
+     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
+     * restricted methods, and use safe and supported functionalities, where possible.
+     *
+     * @param addr the desired base address
+     * @param bytesSize the desired size.
+     * @param owner the desired owner thread. If {@code owner == null}, the returned segment is <em>not</em> confined.
+     * @param cleanup a cleanup action to be executed when the {@link MemorySegment#close()} method is called on the
+     *                returned segment. If {@code cleanup == null}, no cleanup action is executed.
+     * @param attachment an object that must be kept alive by the returned segment; this can be useful when
+     *                   the returned segment depends on memory which could be released if a certain object
+     *                   is determined to be unreacheable. In most cases this will be set to {@code null}.
+     * @return a new native memory segment with given base address, size, owner, cleanup action and object attachment.
+     * @throws IllegalArgumentException if {@code bytesSize <= 0}.
+     * @throws UnsupportedOperationException if {@code addr} is associated with an heap segment.
+     * @throws IllegalAccessError if the runtime property {@code foreign.restricted} is not set to either
+     * {@code permit}, {@code warn} or {@code debug} (the default value is set to {@code deny}).
+     * @throws NullPointerException if {@code addr == null}.
+     */
+    static MemorySegment ofNativeRestricted(MemoryAddress addr, long bytesSize, Thread owner, Runnable cleanup, Object attachment) {
+        Objects.requireNonNull(addr);
+        if (bytesSize <= 0) {
+            throw new IllegalArgumentException("Invalid size : " + bytesSize);
+        }
+        Utils.checkRestrictedAccess("MemorySegment.ofNativeRestricted");
+        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(addr, bytesSize, owner, cleanup, attachment);
+    }
+
     // access mode masks
 
     /**
      * Read access mode; read operations are supported by a segment which supports this access mode.
      * @see MemorySegment#accessModes()
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
@@ -224,15 +224,10 @@
         scope.checkAliveConfined();
     }
 
     // Helper methods
 
-    AbstractMemorySegmentImpl asUnconfined() {
-        checkValidState();
-        return dup(0, length, mask, null, scope);
-    }
-
     private boolean isSet(int mask) {
         return (this.mask & mask) != 0;
     }
 
     private void checkIntSize(String typeName) {
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
+++ /dev/null
@@ -1,96 +0,0 @@
-/*
- *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- *  This code is free software; you can redistribute it and/or modify it
- *  under the terms of the GNU General Public License version 2 only, as
- *  published by the Free Software Foundation.  Oracle designates this
- *  particular file as subject to the "Classpath" exception as provided
- *  by Oracle in the LICENSE file that accompanied this code.
- *
- *  This code is distributed in the hope that it will be useful, but WITHOUT
- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- *  version 2 for more details (a copy is included in the LICENSE file that
- *  accompanied this code).
- *
- *  You should have received a copy of the GNU General Public License version
- *  2 along with this work; if not, write to the Free Software Foundation,
- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- *  or visit www.oracle.com if you need additional information or have any
- *  questions.
- *
- */
-package jdk.internal.foreign;
-
-import jdk.incubator.foreign.Foreign;
-import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.MemorySegment;
-import sun.security.action.GetPropertyAction;
-
-public class InternalForeign implements Foreign {
-
-    private static final String foreignAccess
-            = GetPropertyAction.privilegedGetProperty("jdk.incubator.foreign.Foreign", "deny");
-    private static final InternalForeign INSTANCE = new InternalForeign();
-
-    private InternalForeign() {}
-
-    public static InternalForeign getInstance() {
-        checkRestrictedAccess();
-        return getInstancePrivileged();
-    }
-
-    public static InternalForeign getInstancePrivileged() {
-        return INSTANCE;
-    }
-
-    @Override
-    public MemoryAddress withSize(MemoryAddress base, long byteSize) throws IllegalAccessError {
-        checkRawNativeAddress(base);
-        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(base.toRawLongValue(), byteSize, null, false)
-                .baseAddress();
-    }
-
-    @Override
-    public MemorySegment asMallocSegment(MemoryAddress base, long byteSize) throws IllegalAccessError {
-        checkRawNativeAddress(base);
-        return NativeMemorySegmentImpl.makeNativeSegmentUnchecked(base.toRawLongValue(), byteSize, Thread.currentThread(), true);
-    }
-
-    private void checkRawNativeAddress(MemoryAddress base) {
-        if (base.segment() != null) {
-            throw new IllegalArgumentException("Not an unchecked memory address");
-        }
-    }
-
-    @Override
-    public MemorySegment asUnconfined(MemorySegment segment) {
-        return ((NativeMemorySegmentImpl)segment).asUnconfined();
-    }
-
-    private static void checkRestrictedAccess() {
-        switch (foreignAccess) {
-            case "deny" -> throwIllegalAccessError(foreignAccess);
-            case "warn" -> System.err.println("WARNING: Accessing jdk.incubator.foreign.Foreign.");
-            case "debug" -> {
-                StringBuilder sb = new StringBuilder("DEBUG: Accessing jdk.incubator.foreign.Foreign.");
-                StackWalker.getInstance().walk(s -> {
-                     s
-                     .forEach(f -> sb.append(System.lineSeparator()).append("\tat ").append(f));
-                    return null;
-                });
-                System.out.println(sb.toString());
-            }
-            case "permit" -> {}
-            default -> throwIllegalAccessError(foreignAccess);
-        }
-    }
-
-    private static void throwIllegalAccessError(String value) {
-        throw new IllegalAccessError("Can not access jdk.incubator.foreign.Foreign." +
-                " System property 'jdk.incubator.foreign.Foreign' is set to '" + value + "'");
-    }
-}
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
@@ -24,10 +24,11 @@
  *
  */
 
 package jdk.internal.foreign;
 
+import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.internal.access.JavaNioAccess;
 import jdk.internal.access.SharedSecrets;
 import jdk.internal.misc.Unsafe;
 import jdk.internal.vm.annotation.ForceInline;
@@ -100,14 +101,10 @@
             segment = segment.asSlice(delta, bytesSize);
         }
         return segment;
     }
 
-    public static MemorySegment makeNativeSegmentUnchecked(long min, long bytesSize, Thread owner, boolean allowClose) {
-        MemoryScope scope = new MemoryScope(null, allowClose ? () -> unsafe.freeMemory(min) : null);
-        int mask = defaultAccessModes(bytesSize);
-        if (!allowClose) {
-            mask &= ~MemorySegment.CLOSE;
-        }
-        return new NativeMemorySegmentImpl(min, bytesSize, mask, owner, scope);
+    public static MemorySegment makeNativeSegmentUnchecked(MemoryAddress min, long bytesSize, Thread owner, Runnable cleanup, Object attachment) {
+        MemoryScope scope = new MemoryScope(attachment, cleanup);
+        return new NativeMemorySegmentImpl(min.toRawLongValue(), bytesSize, defaultAccessModes(bytesSize), owner, scope);
     }
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
@@ -25,36 +25,28 @@
  */
 
 package jdk.internal.foreign;
 
 import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.MemorySegment;
-import jdk.internal.access.JavaNioAccess;
-import jdk.internal.access.SharedSecrets;
 import jdk.internal.access.foreign.MemoryAddressProxy;
-import jdk.internal.access.foreign.UnmapperProxy;
-import jdk.internal.misc.Unsafe;
-import sun.nio.ch.FileChannelImpl;
-import sun.security.action.GetBooleanAction;
+import jdk.internal.misc.VM;
 
-import java.io.IOException;
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
-import java.nio.ByteBuffer;
-import java.nio.channels.FileChannel;
-import java.nio.file.OpenOption;
-import java.nio.file.Path;
-import java.nio.file.StandardOpenOption;
+import java.util.Optional;
 import java.util.function.Supplier;
 
 /**
  * This class contains misc helper functions to support creation of memory segments.
  */
 public final class Utils {
 
+    private static final String foreignRestrictedAccess = Optional.ofNullable(VM.getSavedProperty("foreign.restricted"))
+            .orElse("deny");
+
     private static final MethodHandle ADDRESS_FILTER;
 
     static {
         try {
             ADDRESS_FILTER = MethodHandles.lookup().findStatic(Utils.class, "filterAddress",
@@ -83,6 +75,27 @@
     }
 
     private static MemoryAddressProxy filterAddress(MemoryAddress addr) {
         return (MemoryAddressImpl)addr;
     }
+
+    public static void checkRestrictedAccess(String method) {
+        switch (foreignRestrictedAccess) {
+            case "deny" -> throwIllegalAccessError(foreignRestrictedAccess, method);
+            case "warn" -> System.err.println("WARNING: Accessing restricted foreign method: " + method);
+            case "debug" -> {
+                StringBuilder sb = new StringBuilder("DEBUG: restricted foreign method: \" + method");
+                StackWalker.getInstance().forEach(f -> sb.append(System.lineSeparator())
+                        .append("\tat ")
+                        .append(f));
+                System.err.println(sb.toString());
+            }
+            case "permit" -> {}
+            default -> throwIllegalAccessError(foreignRestrictedAccess, method);
+        }
+    }
+
+    private static void throwIllegalAccessError(String value, String method) {
+        throw new IllegalAccessError("Illegal access to restricted foreign method: " + method +
+                " ; system property 'foreign.restricted' is set to '" + value + "'");
+    }
 }
diff a/test/jdk/java/foreign/TestNative.java b/test/jdk/java/foreign/TestNative.java
--- a/test/jdk/java/foreign/TestNative.java
+++ b/test/jdk/java/foreign/TestNative.java
@@ -24,21 +24,19 @@
 
 /*
  * @test
  * @modules java.base/jdk.internal.misc
  *          jdk.incubator.foreign/jdk.internal.foreign
- * @run testng TestNative
+ * @run testng/othervm -Dforeign.restricted=permit TestNative
  */
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayout.PathElement;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
-import jdk.internal.foreign.InternalForeign;
 import jdk.internal.misc.Unsafe;
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 
 import java.lang.invoke.VarHandle;
@@ -171,40 +169,31 @@
             assertEquals(buf.capacity(), expected);
             assertEquals(getCapacity(buf), expected);
         }
     }
 
-    @Test
-    public void testResize() {
-        MemoryAddress addr = MemoryAddress.ofLong(42);
-        assertNull(addr.segment());
-        MemoryAddress sized = InternalForeign.getInstancePrivileged().withSize(addr, 12);
-        assertEquals(sized.segment().byteSize(), 12);
-    }
-
     @Test
     public void testMallocSegment() {
         MemoryAddress addr = MemoryAddress.ofLong(allocate(12));
         assertNull(addr.segment());
-        MemorySegment mallocSegment = InternalForeign.getInstancePrivileged().asMallocSegment(addr, 12);
+        MemorySegment mallocSegment = MemorySegment.ofNativeRestricted(addr, 12, null,
+                () -> UNSAFE.freeMemory(addr.toRawLongValue()), null);
         assertEquals(mallocSegment.byteSize(), 12);
         mallocSegment.close(); //free here
         assertTrue(!mallocSegment.isAlive());
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
     public void testBadResize() {
         try (MemorySegment segment = MemorySegment.allocateNative(4)) {
-            InternalForeign.getInstancePrivileged().withSize(segment.baseAddress(), 12);
+            MemorySegment.ofNativeRestricted(segment.baseAddress(), 0, null, null, null);
         }
     }
 
-    @Test(expectedExceptions = IllegalArgumentException.class)
-    public void testBadMallocSegment() {
-        try (MemorySegment segment = MemorySegment.allocateNative(4)) {
-            InternalForeign.getInstancePrivileged().asMallocSegment(segment.baseAddress(), 12);
-        }
+    @Test(expectedExceptions = NullPointerException.class)
+    public void testNullUnsafeSegment() {
+        MemorySegment.ofNativeRestricted(null, 10, null, null, null);
     }
 
     static {
         System.loadLibrary("NativeAccess");
     }
diff a/test/jdk/java/foreign/TestNoForeignUnsafeOverride.java b/test/jdk/java/foreign/TestNoForeignUnsafeOverride.java
--- /dev/null
+++ b/test/jdk/java/foreign/TestNoForeignUnsafeOverride.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @modules java.base/jdk.internal.misc
+ *          jdk.incubator.foreign/jdk.internal.foreign
+ * @run testng TestNoForeignUnsafeOverride
+ */
+
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemorySegment;
+
+import org.testng.annotations.Test;
+
+public class TestNoForeignUnsafeOverride {
+    static {
+        System.setProperty("foreign.restricted", "permit");
+    }
+
+    @Test(expectedExceptions = IllegalAccessError.class)
+    public void testUnsafeAccess() {
+        MemorySegment.ofNativeRestricted(MemoryAddress.ofLong(42), 10, null, null, null);
+    }
+}
diff a/test/jdk/java/foreign/TestSharedAccess.java b/test/jdk/java/foreign/TestSharedAccess.java
--- a/test/jdk/java/foreign/TestSharedAccess.java
+++ b/test/jdk/java/foreign/TestSharedAccess.java
@@ -22,14 +22,13 @@
  *
  */
 
 /*
  * @test
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit TestSharedAccess
+ * @run testng/othervm -Dforeign.restricted=permit TestSharedAccess
  */
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
@@ -40,11 +39,10 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Spliterator;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
 import static org.testng.Assert.fail;
@@ -102,11 +100,12 @@
     public void testSharedUnsafe() throws Throwable {
         try (MemorySegment s = MemorySegment.allocateNative(4)) {
             setInt(s.baseAddress(), 42);
             assertEquals(getInt(s.baseAddress()), 42);
             List<Thread> threads = new ArrayList<>();
-            MemorySegment sharedSegment = Foreign.getInstance().asUnconfined(s);
+            MemorySegment sharedSegment = MemorySegment.ofNativeRestricted(
+                    s.baseAddress(), s.byteSize(), null, null, null);
             for (int i = 0 ; i < 1000 ; i++) {
                 threads.add(new Thread(() -> {
                     assertEquals(getInt(sharedSegment.baseAddress()), 42);
                 }));
             }
