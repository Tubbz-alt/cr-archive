diff a/test/jdk/java/foreign/TestNative.java b/test/jdk/java/foreign/TestNative.java
--- a/test/jdk/java/foreign/TestNative.java
+++ b/test/jdk/java/foreign/TestNative.java
@@ -147,11 +147,15 @@
     public static native double getDoubleRaw(long addr, int index);
 
     public static native long getCapacity(Buffer buffer);
 
     public static native long allocate(int size);
+<<<<<<< HEAD
     public static native void free(long address);
+=======
+    public static native long free(long address);
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059
 
     @Test(dataProvider="nativeAccessOps")
     public void testNativeAccess(Consumer<MemoryAddress> checker, Consumer<MemoryAddress> initializer, SequenceLayout seq) {
         try (MemorySegment segment = MemorySegment.allocateNative(seq)) {
             MemoryAddress address = segment.baseAddress();
@@ -170,10 +174,11 @@
             assertEquals(buf.capacity(), expected);
             assertEquals(getCapacity(buf), expected);
         }
     }
 
+<<<<<<< HEAD
     static final int ALL_ACCESS_MODES = READ | WRITE | CLOSE | ACQUIRE | HANDOFF;
 
     @Test
     public void testDefaultAccessModes() {
         MemoryAddress addr = MemoryAddress.ofLong(allocate(12));
@@ -183,10 +188,12 @@
             assertTrue(segment.hasAccessModes(ALL_ACCESS_MODES));
             assertEquals(segment.accessModes(), ALL_ACCESS_MODES);
         }
     }
 
+=======
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059
     @Test
     public void testMallocSegment() {
         MemoryAddress addr = MemoryAddress.ofLong(allocate(12));
         assertNull(addr.segment());
         MemorySegment mallocSegment = MemorySegment.ofNativeRestricted(addr, 12, null,
