diff a/test/jdk/java/foreign/TestSpliterator.java b/test/jdk/java/foreign/TestSpliterator.java
--- a/test/jdk/java/foreign/TestSpliterator.java
+++ b/test/jdk/java/foreign/TestSpliterator.java
@@ -2,11 +2,17 @@
  * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
+<<<<<<< HEAD
  * published by the Free Software Foundation.
+=======
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059
  *
  * This code is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  * version 2 for more details (a copy is included in the LICENSE file that
@@ -33,22 +39,31 @@
 import jdk.incubator.foreign.SequenceLayout;
 
 import java.lang.invoke.VarHandle;
 import java.util.LinkedList;
 import java.util.List;
+<<<<<<< HEAD
 import java.util.Map;
+=======
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059
 import java.util.Spliterator;
 import java.util.concurrent.CountedCompleter;
 import java.util.concurrent.RecursiveTask;
 import java.util.concurrent.atomic.AtomicLong;
+<<<<<<< HEAD
 import java.util.function.Consumer;
 import java.util.function.Supplier;
+=======
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059
 import java.util.stream.LongStream;
 import java.util.stream.StreamSupport;
 
 import org.testng.annotations.*;
+<<<<<<< HEAD
 import static jdk.incubator.foreign.MemorySegment.*;
+=======
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059
 import static org.testng.Assert.*;
 
 public class TestSpliterator {
 
     static final VarHandle INT_HANDLE = MemoryLayout.ofSequence(MemoryLayouts.JAVA_INT)
@@ -92,11 +107,15 @@
         }
         long expected = LongStream.range(0, layout.elementCount().getAsLong()).sum();
 
         //check that a segment w/o ACQUIRE access mode can still be used from same thread
         AtomicLong spliteratorSum = new AtomicLong();
+<<<<<<< HEAD
         spliterator(segment.withAccessModes(MemorySegment.READ), layout)
+=======
+        MemorySegment.spliterator(segment.withAccessModes(MemorySegment.READ), layout)
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059
                 .forEachRemaining(s -> spliteratorSum.addAndGet(sumSingle(0L, s)));
         assertEquals(spliteratorSum.get(), expected);
     }
 
     static long sumSingle(long acc, MemorySegment segment) {
@@ -202,10 +221,11 @@
                 { 100, 10000 },
                 { 1000, 10000 },
                 { 10000, 10000 },
         };
     }
+<<<<<<< HEAD
 
     static final int ALL_ACCESS_MODES = READ | WRITE | CLOSE | ACQUIRE | HANDOFF;
 
     @DataProvider(name = "accessScenarios")
     public Object[][] accessScenarios() {
@@ -252,6 +272,8 @@
             splitOrConsume(spliterator, consumer);
         } else {
             spliterator.forEachRemaining(consumer);
         }
     }
+=======
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059
 }
