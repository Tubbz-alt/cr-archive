diff a/test/jdk/java/foreign/TestAdaptVarHandles.java b/test/jdk/java/foreign/TestAdaptVarHandles.java
--- a/test/jdk/java/foreign/TestAdaptVarHandles.java
+++ b/test/jdk/java/foreign/TestAdaptVarHandles.java
@@ -47,10 +47,16 @@
 
 public class TestAdaptVarHandles {
 
     static MethodHandle S2I;
     static MethodHandle I2S;
+<<<<<<< HEAD
+=======
+    static MethodHandle CTX_I2S;
+    static MethodHandle O2I;
+    static MethodHandle I2O;
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059
     static MethodHandle S2L;
     static MethodHandle S2L_EX;
     static MethodHandle S2I_EX;
     static MethodHandle I2S_EX;
     static MethodHandle BASE_ADDR;
@@ -59,10 +65,17 @@
 
     static {
         try {
             S2I = MethodHandles.lookup().findStatic(TestAdaptVarHandles.class, "stringToInt", MethodType.methodType(int.class, String.class));
             I2S = MethodHandles.lookup().findStatic(TestAdaptVarHandles.class, "intToString", MethodType.methodType(String.class, int.class));
+<<<<<<< HEAD
+=======
+            CTX_I2S = MethodHandles.lookup().findStatic(TestAdaptVarHandles.class, "ctxIntToString",
+                    MethodType.methodType(String.class, String.class, String.class, int.class));
+            O2I = MethodHandles.explicitCastArguments(S2I, MethodType.methodType(int.class, Object.class));
+            I2O = MethodHandles.explicitCastArguments(I2S, MethodType.methodType(Object.class, int.class));
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059
             S2L = MethodHandles.lookup().findStatic(TestAdaptVarHandles.class, "stringToLong", MethodType.methodType(long.class, String.class));
             S2L_EX = MethodHandles.lookup().findStatic(TestAdaptVarHandles.class, "stringToLongException", MethodType.methodType(long.class, String.class));
             BASE_ADDR = MethodHandles.lookup().findStatic(TestAdaptVarHandles.class, "baseAddress", MethodType.methodType(MemoryAddress.class, MemorySegment.class));
             SUM_OFFSETS = MethodHandles.lookup().findStatic(TestAdaptVarHandles.class, "sumOffsets", MethodType.methodType(long.class, long.class, long.class));
             VOID_FILTER = MethodHandles.lookup().findStatic(TestAdaptVarHandles.class, "void_filter", MethodType.methodType(void.class, String.class));
@@ -96,10 +109,53 @@
         assertEquals(oldValue, "12");
         value = (String)i2SHandle.toMethodHandle(VarHandle.AccessMode.GET).invokeExact(segment.baseAddress());
         assertEquals(value, "42");
     }
 
+<<<<<<< HEAD
+=======
+    @Test
+    public void testFilterValueComposite() throws Throwable {
+        ValueLayout layout = MemoryLayouts.JAVA_INT;
+        MemorySegment segment = MemorySegment.allocateNative(layout);
+        VarHandle intHandle = layout.varHandle(int.class);
+        MethodHandle CTX_S2I = MethodHandles.dropArguments(S2I, 0, String.class, String.class);
+        VarHandle i2SHandle = MemoryHandles.filterValue(intHandle, CTX_S2I, CTX_I2S);
+        i2SHandle = MemoryHandles.insertCoordinates(i2SHandle, 1, "a", "b");
+        i2SHandle.set(segment.baseAddress(), "1");
+        String oldValue = (String)i2SHandle.getAndAdd(segment.baseAddress(), "42");
+        assertEquals(oldValue, "ab1");
+        String value = (String)i2SHandle.get(segment.baseAddress());
+        assertEquals(value, "ab43");
+        boolean swapped = (boolean)i2SHandle.compareAndSet(segment.baseAddress(), "43", "12");
+        assertTrue(swapped);
+        oldValue = (String)i2SHandle.compareAndExchange(segment.baseAddress(), "12", "42");
+        assertEquals(oldValue, "ab12");
+        value = (String)i2SHandle.toMethodHandle(VarHandle.AccessMode.GET).invokeExact(segment.baseAddress());
+        assertEquals(value, "ab42");
+    }
+
+    @Test
+    public void testFilterValueLoose() throws Throwable {
+        ValueLayout layout = MemoryLayouts.JAVA_INT;
+        MemorySegment segment = MemorySegment.allocateNative(layout);
+        VarHandle intHandle = layout.varHandle(int.class);
+        VarHandle i2SHandle = MemoryHandles.filterValue(intHandle, O2I, I2O);
+        i2SHandle.set(segment.baseAddress(), "1");
+        String oldValue = (String)i2SHandle.getAndAdd(segment.baseAddress(), "42");
+        assertEquals(oldValue, "1");
+        String value = (String)i2SHandle.get(segment.baseAddress());
+        assertEquals(value, "43");
+        boolean swapped = (boolean)i2SHandle.compareAndSet(segment.baseAddress(), "43", "12");
+        assertTrue(swapped);
+        oldValue = (String)i2SHandle.compareAndExchange(segment.baseAddress(), "12", "42");
+        assertEquals(oldValue, "12");
+        value = (String)(Object)i2SHandle.toMethodHandle(VarHandle.AccessMode.GET).invokeExact(segment.baseAddress());
+        assertEquals(value, "42");
+    }
+
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059
     @Test(expectedExceptions = NullPointerException.class)
     public void testBadFilterNullTarget() {
         MemoryHandles.filterValue(null, S2I, I2S);
     }
 
@@ -132,10 +188,21 @@
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
         MemoryHandles.filterValue(intHandle, S2I, I2S.bindTo(42));
     }
 
     @Test(expectedExceptions = IllegalArgumentException.class)
+<<<<<<< HEAD
+=======
+    public void testBadFilterBoxPrefixCoordinates() {
+        VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
+        MemoryHandles.filterValue(intHandle,
+                MethodHandles.dropArguments(S2I, 1, int.class),
+                MethodHandles.dropArguments(I2S, 1, long.class));
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059
     public void testBadFilterBoxException() {
         VarHandle intHandle = MemoryLayouts.JAVA_INT.varHandle(int.class);
         MemoryHandles.filterValue(intHandle, I2S, S2L_EX);
     }
 
@@ -459,6 +526,13 @@
     static long sumOffsets(long l1, long l2) {
         return l1 + l2;
     }
 
     static void void_filter(String s) { }
+<<<<<<< HEAD
+=======
+
+    static String ctxIntToString(String a, String b, int i) {
+        return a + b + String.valueOf(i);
+    }
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059
 }
