diff a/src/java.base/share/classes/java/lang/invoke/MemoryAccessVarHandleGenerator.java b/src/java.base/share/classes/java/lang/invoke/MemoryAccessVarHandleGenerator.java
--- a/src/java.base/share/classes/java/lang/invoke/MemoryAccessVarHandleGenerator.java
+++ b/src/java.base/share/classes/java/lang/invoke/MemoryAccessVarHandleGenerator.java
@@ -59,13 +59,16 @@
 import static jdk.internal.org.objectweb.asm.Opcodes.CHECKCAST;
 import static jdk.internal.org.objectweb.asm.Opcodes.GETFIELD;
 import static jdk.internal.org.objectweb.asm.Opcodes.GETSTATIC;
 import static jdk.internal.org.objectweb.asm.Opcodes.H_INVOKESTATIC;
 import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_0;
+<<<<<<< HEAD:src/java.base/share/classes/java/lang/invoke/MemoryAccessVarHandleGenerator.java
 import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_1;
 import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_2;
 import static jdk.internal.org.objectweb.asm.Opcodes.ICONST_3;
+=======
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059:src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java
 import static jdk.internal.org.objectweb.asm.Opcodes.ILOAD;
 import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESPECIAL;
 import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESTATIC;
 import static jdk.internal.org.objectweb.asm.Opcodes.INVOKEVIRTUAL;
 import static jdk.internal.org.objectweb.asm.Opcodes.LALOAD;
@@ -329,18 +332,27 @@
             mv.visitVarInsn(ALOAD, 0); // load recv
             mv.visitTypeInsn(CHECKCAST, Type.getInternalName(BASE_CLASS));
             mv.visitFieldInsn(GETFIELD, Type.getInternalName(BASE_CLASS), "offset", "J");
             for (int i = 0 ; i < dimensions ; i++) {
                 // load ADD MH
+<<<<<<< HEAD:src/java.base/share/classes/java/lang/invoke/MemoryAccessVarHandleGenerator.java
                 mv.visitFieldInsn(GETSTATIC, implClassName, "addHandle", MethodHandle.class.descriptorString());
+=======
+                mv.visitLdcInsn(cw.makeConstantPoolPatch(ADD_OFFSETS_HANDLE));
+                mv.visitTypeInsn(CHECKCAST, Type.getInternalName(MethodHandle.class));
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059:src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java
 
                 //fixup stack so that ADD MH ends up bottom
                 mv.visitInsn(Opcodes.DUP_X2);
                 mv.visitInsn(Opcodes.POP);
 
                 // load MUL MH
+<<<<<<< HEAD:src/java.base/share/classes/java/lang/invoke/MemoryAccessVarHandleGenerator.java
                 mv.visitFieldInsn(GETSTATIC, implClassName, "mulHandle", MethodHandle.class.descriptorString());
+=======
+                mv.visitLdcInsn(cw.makeConstantPoolPatch(MUL_OFFSETS_HANDLE));
+>>>>>>> cd397502f19f72fa8a926f4508d3913c8ace9059:src/java.base/share/classes/java/lang/invoke/AddressVarHandleGenerator.java
                 mv.visitTypeInsn(CHECKCAST, Type.getInternalName(MethodHandle.class));
 
                 mv.visitVarInsn(ALOAD, 0); // load recv
                 mv.visitTypeInsn(CHECKCAST, implClassName);
                 mv.visitFieldInsn(GETFIELD, implClassName, "dim" + i, "J");
