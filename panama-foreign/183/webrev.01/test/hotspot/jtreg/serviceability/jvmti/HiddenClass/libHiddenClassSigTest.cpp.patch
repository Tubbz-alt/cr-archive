diff a/test/hotspot/jtreg/serviceability/jvmti/HiddenClass/libHiddenClassSigTest.cpp b/test/hotspot/jtreg/serviceability/jvmti/HiddenClass/libHiddenClassSigTest.cpp
--- a/test/hotspot/jtreg/serviceability/jvmti/HiddenClass/libHiddenClassSigTest.cpp
+++ b/test/hotspot/jtreg/serviceability/jvmti/HiddenClass/libHiddenClassSigTest.cpp
@@ -74,11 +74,16 @@
 
   if (is_hid_mid == NULL) {
     is_hid_mid = is_hidden_mid(jni);
   }
   // invoke j.l.Class.isHidden() method
-  return jni->CallBooleanMethod(klass, is_hid_mid);
+  bool res = jni->CallBooleanMethod(klass, is_hid_mid);
+  if (jni->ExceptionCheck()) {
+    jni->ExceptionDescribe();
+    jni->FatalError("is_hidden: Exception in jni CallBooleanMethod\n");
+  }
+  return res;
 }
 
 /* Check the class signature matches the expected. */
 static void
 check_class_signature(jvmtiEnv* jvmti, JNIEnv* jni, jclass klass, bool is_hidden, const char* exp_sig) {
@@ -153,10 +158,12 @@
   jvmtiError err;
 
   err = jvmti->GetClassLoader(klass, &loader);
   CHECK_JVMTI_ERROR(jni, err, "check_hidden_class_loader: Error in JVMTI GetClassLoader");
 
+  jni->EnsureLocalCapacity(256); // to avoid warnings: JNI local refs NN exceeds capacity
+
   err = jvmti->GetClassLoaderClasses(loader, &count, &loader_classes);
   CHECK_JVMTI_ERROR(jni, err, "check_hidden_class_loader: Error in JVMTI GetClassLoaderClasses");
 
   for (int idx = 0; idx < count; idx++) {
     char* sig = NULL;
