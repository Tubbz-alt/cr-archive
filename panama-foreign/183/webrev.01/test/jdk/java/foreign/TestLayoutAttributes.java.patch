diff a/test/jdk/java/foreign/TestLayoutAttributes.java b/test/jdk/java/foreign/TestLayoutAttributes.java
--- a/test/jdk/java/foreign/TestLayoutAttributes.java
+++ b/test/jdk/java/foreign/TestLayoutAttributes.java
@@ -43,10 +43,19 @@
         MemoryLayout ml = MemoryLayouts.BITS_32_LE
                 .withAttribute("MyAttribute", 10L);
         assertEquals((long) ml.attribute("MyAttribute").orElseThrow(), 10L);
     }
 
+    @Test
+    public void testAttributeOverwrite() {
+        MemoryLayout ml = MemoryLayouts.BITS_32_LE
+                .withAttribute("MyAttribute", 10L);
+        assertEquals((long) ml.attribute("MyAttribute").orElseThrow(), 10L);
+        ml = ml.withAttribute("MyAttribute", 11L);
+        assertEquals((long) ml.attribute("MyAttribute").orElseThrow(), 11L);
+    }
+
     @Test
     public void testAttributeNonExistent() {
         MemoryLayout ml = MemoryLayouts.BITS_32_LE
                 .withAttribute("MyAttribute", 10L);
         assertTrue(ml.attribute("Foo").isEmpty());
@@ -55,18 +64,20 @@
     @Test
     public void testNameAttribute() {
         MemoryLayout ml = MemoryLayouts.BITS_32_LE
                 .withName("foo");
         assertEquals(ml.name().orElseThrow(), "foo");
-        assertEquals(ml.attribute("name").orElseThrow(), "foo");
+        assertEquals(ml.attribute(MemoryLayout.LAYOUT_NAME).orElseThrow(), "foo");
     }
 
     @Test
     public void testAttributesStream() {
         MemoryLayout ml = MemoryLayouts.BITS_32_LE
                 .withName("foo")
                 .withAttribute("MyAttribute", 10L);
         List<String> attribs = ml.attributes().collect(Collectors.toList());
-        assertEquals(attribs, List.of("name", "MyAttribute"));
+        assertEquals(attribs.size(), 2);
+        assertTrue(attribs.contains("MyAttribute"));
+        assertTrue(attribs.contains(MemoryLayout.LAYOUT_NAME));
     }
 
 }
