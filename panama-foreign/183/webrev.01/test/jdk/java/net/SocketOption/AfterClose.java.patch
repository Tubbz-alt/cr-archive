diff a/test/jdk/java/net/SocketOption/AfterClose.java b/test/jdk/java/net/SocketOption/AfterClose.java
--- a/test/jdk/java/net/SocketOption/AfterClose.java
+++ b/test/jdk/java/net/SocketOption/AfterClose.java
@@ -236,11 +236,11 @@
         throws IOException
     {
         DatagramSocket datagramSocket = createClosedUnboundDatagramSocket();
         for (int i=0; i<3; i++); {
             for (T value : values) {
-                expectThrows(IOE, () -> datagramSocket.setOption(option, value));
+                if (!RO.equals(value)) expectThrows(IOE, () -> datagramSocket.setOption(option, value));
                 expectThrows(IOE, () -> datagramSocket.getOption(option));
             }
         }
     }
 
@@ -249,11 +249,11 @@
         throws IOException
     {
         DatagramSocket datagramSocket = createClosedBoundDatagramSocket();
         for (int i=0; i<3; i++); {
             for (T value : values) {
-                expectThrows(IOE, () -> datagramSocket.setOption(option, value));
+                if (!RO.equals(value)) expectThrows(IOE, () -> datagramSocket.setOption(option, value));
                 expectThrows(IOE, () -> datagramSocket.getOption(option));
             }
         }
     }
 
@@ -262,11 +262,11 @@
         throws IOException
     {
         DatagramSocket datagramSocket = createClosedBoundDatagramSocket();
         for (int i=0; i<3; i++); {
             for (T value : values) {
-                expectThrows(IOE, () -> datagramSocket.setOption(option, value));
+                if (!RO.equals(value)) expectThrows(IOE, () -> datagramSocket.setOption(option, value));
                 expectThrows(IOE, () -> datagramSocket.getOption(option));
             }
         }
     }
 
@@ -286,11 +286,11 @@
         throws IOException
     {
         MulticastSocket multicastSocket = createClosedUnboundMulticastSocket();
         for (int i=0; i<3; i++); {
             for (T value : values) {
-                expectThrows(IOE, () -> multicastSocket.setOption(option, value));
+                if (!RO.equals(value)) expectThrows(IOE, () -> multicastSocket.setOption(option, value));
                 expectThrows(IOE, () -> multicastSocket.getOption(option));
             }
         }
     }
 
@@ -299,11 +299,11 @@
         throws IOException
     {
         MulticastSocket multicastSocket = createClosedBoundMulticastSocket();
         for (int i=0; i<3; i++); {
             for (T value : values) {
-                expectThrows(IOE, () -> multicastSocket.setOption(option, value));
+                if (!RO.equals(value)) expectThrows(IOE, () -> multicastSocket.setOption(option, value));
                 expectThrows(IOE, () -> multicastSocket.getOption(option));
             }
         }
     }
 
