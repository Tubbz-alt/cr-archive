diff a/src/java.base/share/native/libjli/java.c b/src/java.base/share/native/libjli/java.c
--- a/src/java.base/share/native/libjli/java.c
+++ b/src/java.base/share/native/libjli/java.c
@@ -290,23 +290,22 @@
 
     ifn.CreateJavaVM = 0;
     ifn.GetDefaultJavaVMInitArgs = 0;
 
     if (JLI_IsTraceLauncher()) {
-        start = CounterGet();
+        start = CurrentTimeMicros();
     }
 
     if (!LoadJavaVM(jvmpath, &ifn)) {
         return(6);
     }
 
     if (JLI_IsTraceLauncher()) {
-        end   = CounterGet();
+        end   = CurrentTimeMicros();
     }
 
-    JLI_TraceLauncher("%ld micro seconds to LoadJavaVM\n",
-             (long)(jint)Counter2Micros(end-start));
+    JLI_TraceLauncher("%ld micro seconds to LoadJavaVM\n", (long)(end-start));
 
     ++argv;
     --argc;
 
     if (IsJavaArgs()) {
@@ -411,11 +410,11 @@
     jlong start = 0, end = 0;
 
     RegisterThread();
 
     /* Initialize the virtual machine */
-    start = CounterGet();
+    start = CurrentTimeMicros();
     if (!InitializeJVM(&vm, &env, &ifn)) {
         JLI_ReportErrorMessage(JVM_ERROR1);
         exit(1);
     }
 
@@ -465,13 +464,12 @@
     }
 
     FreeKnownVMs(); /* after last possible PrintUsage */
 
     if (JLI_IsTraceLauncher()) {
-        end = CounterGet();
-        JLI_TraceLauncher("%ld micro seconds to InitializeJVM\n",
-               (long)(jint)Counter2Micros(end-start));
+        end = CurrentTimeMicros();
+        JLI_TraceLauncher("%ld micro seconds to InitializeJVM\n", (long)(end-start));
     }
 
     /* At this stage, argc/argv have the application's arguments */
     if (JLI_IsTraceLauncher()){
         int i;
@@ -1620,24 +1618,23 @@
     jobject result;
     jlong start = 0, end = 0;
     jclass cls = GetLauncherHelperClass(env);
     NULL_CHECK0(cls);
     if (JLI_IsTraceLauncher()) {
-        start = CounterGet();
+        start = CurrentTimeMicros();
     }
     NULL_CHECK0(mid = (*env)->GetStaticMethodID(env, cls,
                 "checkAndLoadMain",
                 "(ZILjava/lang/String;)Ljava/lang/Class;"));
 
     NULL_CHECK0(str = NewPlatformString(env, name));
     NULL_CHECK0(result = (*env)->CallStaticObjectMethod(env, cls, mid,
                                                         USE_STDERR, mode, str));
 
     if (JLI_IsTraceLauncher()) {
-        end = CounterGet();
-        printf("%ld micro seconds to load main class\n",
-               (long)(jint)Counter2Micros(end-start));
+        end = CurrentTimeMicros();
+        printf("%ld micro seconds to load main class\n", (long)(end-start));
         printf("----%s----\n", JLDEBUG_ENV_ENTRY);
     }
 
     return (jclass)result;
 }
@@ -2085,11 +2082,11 @@
     char *tmpPtr;
     char *altVMName = NULL;
     char *serverClassVMName = NULL;
     static char *whiteSpace = " \t";
     if (JLI_IsTraceLauncher()) {
-        start = CounterGet();
+        start = CurrentTimeMicros();
     }
 
     jvmCfg = fopen(jvmCfgName, "r");
     if (jvmCfg == NULL) {
       if (!speculative) {
@@ -2170,13 +2167,12 @@
     }
     fclose(jvmCfg);
     knownVMsCount = cnt;
 
     if (JLI_IsTraceLauncher()) {
-        end = CounterGet();
-        printf("%ld micro seconds to parse jvm.cfg\n",
-               (long)(jint)Counter2Micros(end-start));
+        end = CurrentTimeMicros();
+        printf("%ld micro seconds to parse jvm.cfg\n", (long)(end-start));
     }
 
     return cnt;
 }
 
