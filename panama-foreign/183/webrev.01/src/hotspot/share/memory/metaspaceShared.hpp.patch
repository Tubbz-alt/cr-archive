diff a/src/hotspot/share/memory/metaspaceShared.hpp b/src/hotspot/share/memory/metaspaceShared.hpp
--- a/src/hotspot/share/memory/metaspaceShared.hpp
+++ b/src/hotspot/share/memory/metaspaceShared.hpp
@@ -34,10 +34,11 @@
 #include "utilities/macros.hpp"
 #include "utilities/resourceHash.hpp"
 
 #define MAX_SHARED_DELTA                (0x7FFFFFFF)
 
+class outputStream;
 class FileMapInfo;
 class CHeapBitMap;
 struct ArchiveHeapOopmapInfo;
 
 enum MapArchiveResult {
@@ -164,10 +165,12 @@
 
 // Class Data Sharing Support
 class MetaspaceShared : AllStatic {
 
   // CDS support
+
+  // Note: _shared_rs and _symbol_rs are only used at dump time.
   static ReservedSpace _shared_rs;
   static VirtualSpace _shared_vs;
   static ReservedSpace _symbol_rs;
   static VirtualSpace _symbol_vs;
   static int _max_alignment;
@@ -225,10 +228,12 @@
   static void commit_to(ReservedSpace* rs, VirtualSpace* vs, char* newtop) NOT_CDS_RETURN;
   static void initialize_dumptime_shared_and_meta_spaces() NOT_CDS_RETURN;
   static void initialize_runtime_shared_and_meta_spaces() NOT_CDS_RETURN;
   static void post_initialize(TRAPS) NOT_CDS_RETURN;
 
+  static void print_on(outputStream* st);
+
   // Delta of this object from SharedBaseAddress
   static uintx object_delta_uintx(void* obj);
 
   static u4 object_delta_u4(void* obj) {
     // offset is guaranteed to be less than MAX_SHARED_DELTA in DumpRegion::expand_top_to()
@@ -294,11 +299,10 @@
 
   static bool try_link_class(InstanceKlass* ik, TRAPS);
   static void link_and_cleanup_shared_classes(TRAPS) NOT_CDS_RETURN;
 
 #if INCLUDE_CDS
-  static ReservedSpace reserve_shared_space(size_t size, char* requested_address = NULL);
   static size_t reserved_space_alignment();
   static void init_shared_dump_space(DumpRegion* first_space);
   static DumpRegion* misc_code_dump_space();
   static DumpRegion* read_write_dump_space();
   static DumpRegion* read_only_dump_space();
@@ -367,20 +371,19 @@
                            bool read_only,  bool allow_exec);
 #endif
   static void read_extra_data(const char* filename, TRAPS) NOT_CDS_RETURN;
   static FileMapInfo* open_static_archive();
   static FileMapInfo* open_dynamic_archive();
+  // use_requested_addr: If true (default), attempt to map at the address the
   static MapArchiveResult map_archives(FileMapInfo* static_mapinfo, FileMapInfo* dynamic_mapinfo,
                                        bool use_requested_addr);
   static char* reserve_address_space_for_archives(FileMapInfo* static_mapinfo,
                                                   FileMapInfo* dynamic_mapinfo,
-                                                  bool use_requested_addr,
-                                                  ReservedSpace& main_rs,
+                                                  bool use_archive_base_addr,
                                                   ReservedSpace& archive_space_rs,
                                                   ReservedSpace& class_space_rs);
-  static void release_reserved_spaces(ReservedSpace& main_rs,
-                                      ReservedSpace& archive_space_rs,
+  static void release_reserved_spaces(ReservedSpace& archive_space_rs,
                                       ReservedSpace& class_space_rs);
   static MapArchiveResult map_archive(FileMapInfo* mapinfo, char* mapped_base_address, ReservedSpace rs);
   static void unmap_archive(FileMapInfo* mapinfo);
 };
 #endif // SHARE_MEMORY_METASPACESHARED_HPP
