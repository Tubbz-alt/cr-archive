diff a/src/hotspot/cpu/ppc/templateInterpreterGenerator_ppc.cpp b/src/hotspot/cpu/ppc/templateInterpreterGenerator_ppc.cpp
--- a/src/hotspot/cpu/ppc/templateInterpreterGenerator_ppc.cpp
+++ b/src/hotspot/cpu/ppc/templateInterpreterGenerator_ppc.cpp
@@ -214,11 +214,11 @@
   //  __ cmplwi(CCR0, sig_byte, 'V'); // void cannot appear since we do not parse the return type
   //  __ beq(CCR0, do_void);
 
   __ bind(do_dontreachhere);
 
-  __ unimplemented("ShouldNotReachHere in slow_signature_handler", 120);
+  __ unimplemented("ShouldNotReachHere in slow_signature_handler");
 
   __ bind(do_array);
 
   {
     Label start_skip, end_skip;
@@ -832,16 +832,16 @@
   // Restore caller_sp (c2i adapter may exist, but no shrinking of interpreted caller frame).
 #ifdef ASSERT
   Label frame_not_shrunk;
   __ cmpld(CCR0, R1_SP, R21_sender_SP);
   __ ble(CCR0, frame_not_shrunk);
-  __ stop("frame shrunk", 0x546);
+  __ stop("frame shrunk");
   __ bind(frame_not_shrunk);
   __ ld(Rscratch1, 0, R1_SP);
   __ ld(R0, 0, R21_sender_SP);
   __ cmpd(CCR0, R0, Rscratch1);
-  __ asm_assert_eq("backlink", 0x547);
+  __ asm_assert_eq("backlink");
 #endif // ASSERT
   __ mr(R1_SP, R21_sender_SP);
   __ bctr();
 
   __ align(32, 12);
@@ -1724,11 +1724,11 @@
 #ifdef ASSERT
   else {
     Label Lok;
     __ lwz(R0, in_bytes(Method::access_flags_offset()), R19_method);
     __ andi_(R0, R0, JVM_ACC_SYNCHRONIZED);
-    __ asm_assert_eq("method needs synchronization", 0x8521);
+    __ asm_assert_eq("method needs synchronization");
     __ bind(Lok);
   }
 #endif // ASSERT
 
   __ verify_thread();
