diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryHandles.java
@@ -284,11 +284,11 @@
      * The returned var handle will feature the same type as the target var handle; an additional access coordinate
      * of type {@code long} will be added to the access coordinate types of the target var handle at the position
      * immediately following the leading access coordinate of type {@link MemoryAddress}.
      *
      * @param target the target memory access handle to access after the scale adjustment.
-     * @param bytesStride the stride, in bytes, by which to multiply the coordinate value. Must be greater than zero.
+     * @param bytesStride the stride, in bytes, by which to multiply the coordinate value.
      * @return the adapted var handle.
      * @throws IllegalArgumentException if the first access coordinate type is not of type {@link MemoryAddress}.
      */
     public static VarHandle withStride(VarHandle target, long bytesStride) {
         if (bytesStride == 0) {
@@ -457,11 +457,11 @@
      * by the adaptation) to the target var handle.
      * <p>
      * For the coordinate filters to be well formed, their types must be of the form {@code S1 -> T1, S2 -> T1 ... Sn -> Tn},
      * where {@code T1, T2 ... Tn} are the coordinate types starting at position {@code pos} of the target var handle.
      * <p>
-     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
+     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode}) and
      * atomic access guarantees as those featured by the target var handle.
      *
      * @param target the target var handle
      * @param pos the position of the first coordinate to be transformed
      * @param filters the unary functions which are used to transform coordinates starting at position {@code pos}
@@ -469,13 +469,12 @@
      * to the new coordinate values.
      * @throws NullPointerException if either {@code target}, {@code filters} are {@code == null}.
      * @throws IllegalArgumentException if the handles in {@code filters} are not well-formed, that is, they have types
      * other than {@code S1 -> T1, S2 -> T2, ... Sn -> Tn} where {@code T1, T2 ... Tn} are the coordinate types starting
      * at position {@code pos} of the target var handle, if {@code pos} is not between 0 and the target var handle coordinate arity, inclusive,
-     * or if more filters are provided than the actual number of coordinate types, or if any of the filters throws any
-     * checked exceptions.
-     * available starting at {@code pos}.
+     * or if more filters are provided than the actual number of coordinate types available starting at {@code pos},
+     * or if any of the filters throws any checked exceptions.
      */
     public static VarHandle filterCoordinates(VarHandle target, int pos, MethodHandle... filters) {
         return JLI.filterCoordinates(target, pos, filters);
     }
 
@@ -488,11 +487,11 @@
      * are joined with bound coordinate values, and then passed to the target var handle.
      * <p>
      * For the bound coordinates to be well formed, their types must be {@code T1, T2 ... Tn },
      * where {@code T1, T2 ... Tn} are the coordinate types starting at position {@code pos} of the target var handle.
      * <p>
-     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
+     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode}) and
      * atomic access guarantees as those featured by the target var handle.
      *
      * @param target the var handle to invoke after the bound coordinates are inserted
      * @param pos the position of the first coordinate to be inserted
      * @param values the series of bound coordinates to insert
@@ -531,11 +530,11 @@
      * The reordering array need not specify an actual permutation.
      * An incoming coordinate will be duplicated if its index appears
      * more than once in the array, and an incoming coordinate will be dropped
      * if its index does not appear in the array.
      * <p>
-     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
+     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode}) and
      * atomic access guarantees as those featured by the target var handle.
      * @param target the var handle to invoke after the coordinates have been reordered
      * @param newCoordinates the new coordinate types
      * @param reorder an index array which controls the reordering
      * @return an adapter var handle which re-arranges the incoming coordinate values,
@@ -555,11 +554,11 @@
      * a sub-sequence of its coordinate values with a filter (a method handle).
      * The pre-processed coordinates are replaced by the result (if any) of the
      * filter function and the target var handle is then called on the modified (usually shortened)
      * coordinate list.
      * <p>
-     * If {code R} is the return type of the filter (which cannot be void), the target var handle must accept a value of
+     * If {@code R} is the return type of the filter (which cannot be void), the target var handle must accept a value of
      * type {@code R} as its coordinate in position {@code pos}, preceded and/or followed by
      * any coordinate not passed to the filter.
      * No coordinates are reordered, and the result returned from the filter
      * replaces (in order) the whole subsequence of coordinates originally
      * passed to the adapter.
@@ -569,11 +568,11 @@
      * in the resulting adapted var handle.
      * The return type of the filter must be identical to the
      * coordinate type of the target var handle at position {@code pos}, and that target var handle
      * coordinate is supplied by the return value of the filter.
      * <p>
-     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
+     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode}) and
      * atomic access guarantees as those featured by the target var handle.
      *
      * @param target the var handle to invoke after the coordinates have been filtered
      * @param pos the position of the coordinate to be filtered
      * @param filter the filter method handle
@@ -597,11 +596,11 @@
      * <p>
      * The {@code pos} argument may range between zero and <i>N</i>, where <i>N</i> is the arity of the
      * target var handle's coordinate types. If {@code pos} is zero, the dummy coordinates will precede
      * the target's real arguments; if {@code pos} is <i>N</i> they will come after.
      * <p>
-     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode} and
+     * The resulting var handle will feature the same access modes (see {@link java.lang.invoke.VarHandle.AccessMode}) and
      * atomic access guarantees as those featured by the target var handle.
      *
      * @param target the var handle to invoke after the dummy coordinates are dropped
      * @param pos position of first coordinate to drop (zero for the leftmost)
      * @param valueTypes the type(s) of the coordinate(s) to drop
