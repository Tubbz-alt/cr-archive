diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayout.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayout.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayout.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemoryLayout.java
@@ -166,10 +166,17 @@
  *
  * Since the layout path {@code seq} constructed in the above example features exactly one free dimension,
  * it follows that the memory access var handle {@code valueHandle} will feature an extra {@code long}
  * access coordinate.
  *
+ * <h2>Layout attributes</h2>
+ *
+ * Layouts can be optionally associated with one or more <em>attributes</em>. A layout attribute forms a <em>name/value</em>
+ * pair, where the name is a {@link String} and the value is a {@link Constable}. The most common form of layout attribute
+ * is the <em>layout name</em> (see {@link #LAYOUT_NAME}), a custom name that can be associated to memory layouts and that can be referred to when
+ * constructing <a href="MemoryLayout.html#layout-paths"><em>layout paths</em></a>.
+ *
  * @apiNote In the future, if the Java language permits, {@link MemoryLayout}
  * may become a {@code sealed} interface, which would prohibit subclassing except by
  * explicitly permitted types.
  *
  * @implSpec
@@ -219,18 +226,28 @@
                 () -> new UnsupportedOperationException("Cannot compute byte size; bit size is not a multiple of 8"));
     }
 
     /**
      * Return the <em>name</em> (if any) associated with this layout.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    attribute(LAYOUT_NAME).map(String.class::cast);
+     * }</pre></blockquote>
      *
      * @return the layout <em>name</em> (if any).
      * @see MemoryLayout#withName(String)
      */
     Optional<String> name();
 
     /**
      * Creates a new layout which features the desired layout <em>name</em>.
+     * <p>
+     * This is equivalent to the following code:
+     * <blockquote><pre>{@code
+    withAttribute(LAYOUT_NAME, name);
+     * }</pre></blockquote>
      *
      * @param name the layout name.
      * @return a new layout which is the same as this layout, except for the <em>name</em> associated to it.
      * @see MemoryLayout#name()
      */
@@ -284,30 +301,32 @@
      * @throws IllegalArgumentException if {@code bitAlignment} is not a power of two, or if it's less than than 8.
      */
     MemoryLayout withBitAlignment(long bitAlignment);
 
     /**
-     * Returns the attribute with the given name if it exists, or an empty optional
+     * Returns the attribute with the given name (if it exists).
      *
-     * @param name the name of the attribute
-     * @return the optional attribute
+     * @param name the attribute name
+     * @return the attribute with the given name (if it exists).
      */
     Optional<Constable> attribute(String name);
 
     /**
-     * Returns a new MemoryLayout with the given additional attribute
+     * Returns a new memory layout which features the same attributes as this layout, plus the newly specified attribute.
+     * If this layout already contains an attribute with the same name, the existing attribute value is overwritten in the returned
+     * layout.
      *
-     * @param name the name of the attribute
-     * @param value the value of the attribute
-     * @return the new MemoryLayout
+     * @param name the attribute name.
+     * @param value the attribute value.
+     * @return a new memory layout which features the same attributes as this layout, plus the newly specified attribute.
      */
     MemoryLayout withAttribute(String name, Constable value);
 
     /**
-     * Returns a stream of the names of the attributes of this layout
+     * Returns a stream of the attribute names associated with this layout.
      *
-     * @return the stream of names
+     * @return a stream of the attribute names associated with this layout.
      */
     Stream<String> attributes();
 
     /**
      * Computes the offset, in bits, of the layout selected by a given layout path, where the path is considered rooted in this
@@ -411,11 +430,11 @@
         }
         return finalizer.apply(path);
     }
 
     /**
-     * Is this a padding layout (e.g. a layout created from {@link #ofPaddingBits(long)} ?
+     * Is this a padding layout (e.g. a layout created from {@link #ofPaddingBits(long)}) ?
      * @return true, if this layout is a padding layout.
      */
     boolean isPadding();
 
     /**
@@ -614,6 +633,11 @@
      * @return a new <em>union</em> group layout with given member layouts.
      */
     static GroupLayout ofUnion(MemoryLayout... elements) {
         return new GroupLayout(GroupLayout.Kind.UNION, List.of(elements));
     }
+
+    /**
+     * Attribute name used to specify the <em>name</em> property of a memory layout (see {@link #name()} and {@link #withName(String)}).
+     */
+    String LAYOUT_NAME = "layout/name";
 }
