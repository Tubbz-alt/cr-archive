diff a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot.aarch64/src/jdk/vm/ci/hotspot/aarch64/AArch64HotSpotVMConfig.java b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot.aarch64/src/jdk/vm/ci/hotspot/aarch64/AArch64HotSpotVMConfig.java
--- a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot.aarch64/src/jdk/vm/ci/hotspot/aarch64/AArch64HotSpotVMConfig.java
+++ b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot.aarch64/src/jdk/vm/ci/hotspot/aarch64/AArch64HotSpotVMConfig.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -44,11 +44,10 @@
     // CPU Capabilities
 
     /*
      * These flags are set based on the corresponding command line flags.
      */
-    final boolean useBarriersForVolatile = getFlag("UseBarriersForVolatile", Boolean.class);
     final boolean useCRC32 = getFlag("UseCRC32", Boolean.class);
     final boolean useNeon = getFlag("UseNeon", Boolean.class);
     final boolean useSIMDForMemoryOps = getFlag("UseSIMDForMemoryOps", Boolean.class);
     final boolean avoidUnalignedAccesses = getFlag("AvoidUnalignedAccesses", Boolean.class);
     final boolean useLSE = getFlag("UseLSE", Boolean.class);
@@ -69,8 +68,7 @@
     final long aarch64SHA2 = getConstant("VM_Version::CPU_SHA2", Long.class);
     final long aarch64CRC32 = getConstant("VM_Version::CPU_CRC32", Long.class);
     final long aarch64LSE = getConstant("VM_Version::CPU_LSE", Long.class);
     final long aarch64STXR_PREFETCH = getConstant("VM_Version::CPU_STXR_PREFETCH", Long.class);
     final long aarch64A53MAC = getConstant("VM_Version::CPU_A53MAC", Long.class);
-    final long aarch64DMB_ATOMICS = getConstant("VM_Version::CPU_DMB_ATOMICS", Long.class);
     // Checkstyle: resume
 }
