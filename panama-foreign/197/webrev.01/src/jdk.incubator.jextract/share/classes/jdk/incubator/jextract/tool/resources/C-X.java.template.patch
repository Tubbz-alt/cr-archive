diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
@@ -21,15 +21,23 @@
     public static final MemoryLayout LAYOUT = ${LAYOUT};
     public static final Class<?> CARRIER = ${CARRIER}.class;
     private static final VarHandle handle = LAYOUT.varHandle(CARRIER);
     private static final VarHandle arrayHandle = arrayHandle(LAYOUT, CARRIER);
 
-    public static MemoryAddress asArray(MemoryAddress addr, int numElements) {
+    public static MemoryAddress asArrayRestricted(MemoryAddress addr, int numElements) {
         return MemorySegment.ofNativeRestricted(addr, numElements * LAYOUT.byteSize(),
                Thread.currentThread(), null, null).baseAddress();
     }
 
+    public static MemoryAddress asArray(MemoryAddress addr, int numElements) {
+        var seg = addr.segment();
+        if (seg == null) {
+            throw new IllegalArgumentException("no underlying segment for the address");
+        }
+        return seg.asSlice(addr.segmentOffset(), numElements * LAYOUT.byteSize()).baseAddress();
+    }
+
     public static ${CARRIER} get(MemoryAddress addr) {
         return (${CARRIER}) handle.get(addr);
     }
 
     public static void set(MemoryAddress addr, ${CARRIER} value) {
