diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
@@ -64,20 +64,31 @@
 
     public static MemoryAddress toCString(String str, Charset charset, CScope scope) {
         return toCString(str.getBytes(charset), scope);
     }
 
-    public static String toJavaString(MemoryAddress addr) {
-        StringBuilder buf = new StringBuilder();
+    public static String toJavaStringRestricted(MemoryAddress addr) {
         MemoryAddress baseAddr = addr.segment() != null ?
                 addr :
                 MemorySegment.ofNativeRestricted(addr, Long.MAX_VALUE, Thread.currentThread(),
                         null, null).baseAddress();
-        byte curr = (byte) byteArrHandle.get(baseAddr, 0);
+        return readString(baseAddr);
+    }
+
+    public static String toJavaString(MemoryAddress addr) {
+        if (addr.segment() == null) {
+            throw new IllegalArgumentException("no underlying segment for the address");
+        }
+        return readString(addr);
+    }
+
+    private static String readString(MemoryAddress addr) {
+        StringBuilder buf = new StringBuilder();
+        byte curr = (byte) byteArrHandle.get(addr, 0);
         long offset = 0;
         while (curr != 0) {
             buf.append((char) curr);
-            curr = (byte) byteArrHandle.get(baseAddr, ++offset);
+            curr = (byte) byteArrHandle.get(addr, ++offset);
         }
         return buf.toString();
     }
 }
