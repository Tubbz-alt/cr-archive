diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
@@ -21,15 +21,23 @@
     public static final MemoryLayout LAYOUT = ${LAYOUT};
     public static final Class<?> CARRIER = ${CARRIER}.class;
     private static final VarHandle handle = LAYOUT.varHandle(CARRIER);
     private static final VarHandle arrayHandle = arrayHandle(LAYOUT, CARRIER);
 
-    public static MemoryAddress asArray(MemoryAddress addr, int numElements) {
+    public static MemoryAddress asArrayRestricted(MemoryAddress addr, int numElements) {
         return MemorySegment.ofNativeRestricted(addr, numElements * LAYOUT.byteSize(),
                Thread.currentThread(), null, null).baseAddress();
     }
 
+    public static MemoryAddress asArray(MemoryAddress addr, int numElements) {
+        var seg = addr.segment();
+        if (seg == null) {
+            throw new IllegalArgumentException("no underlying segment for the address");
+        }
+        return seg.asSlice(addr.segmentOffset(), numElements * LAYOUT.byteSize()).baseAddress();
+    }
+
     public static ${CARRIER} get(MemoryAddress addr) {
         return (${CARRIER}) handle.get(addr);
     }
 
     public static void set(MemoryAddress addr, ${CARRIER} value) {
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
@@ -16,15 +16,23 @@
     public static final MemoryLayout LAYOUT = C_POINTER;
     public static final Class<?> CARRIER = long.class;
     private static final VarHandle handle = MemoryHandles.asAddressVarHandle(LAYOUT.varHandle(CARRIER));
     private static final VarHandle arrayHandle = MemoryHandles.asAddressVarHandle(arrayHandle(LAYOUT, CARRIER));
 
-    public static MemoryAddress asArray(MemoryAddress addr, int numPointers) {
+    public static MemoryAddress asArrayRestricted(MemoryAddress addr, int numPointers) {
         return MemorySegment.ofNativeRestricted(addr, numPointers * LAYOUT.byteSize(),
                Thread.currentThread(), null, null).baseAddress();
     }
 
+    public static MemoryAddress asArray(MemoryAddress addr, int numPointers) {
+        var seg = addr.segment();
+        if (seg == null) {
+            throw new IllegalArgumentException("no underlying segment for the address");
+        }
+        return seg.asSlice(addr.segmentOffset(), numPointers * LAYOUT.byteSize()).baseAddress();
+    }
+
     public static MemoryAddress get(MemoryAddress addr) {
         return (MemoryAddress) handle.get(addr);
     }
 
     public static void set(MemoryAddress addr, MemoryAddress value) {
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
@@ -64,20 +64,31 @@
 
     public static MemoryAddress toCString(String str, Charset charset, CScope scope) {
         return toCString(str.getBytes(charset), scope);
     }
 
-    public static String toJavaString(MemoryAddress addr) {
-        StringBuilder buf = new StringBuilder();
+    public static String toJavaStringRestricted(MemoryAddress addr) {
         MemoryAddress baseAddr = addr.segment() != null ?
                 addr :
                 MemorySegment.ofNativeRestricted(addr, Long.MAX_VALUE, Thread.currentThread(),
                         null, null).baseAddress();
-        byte curr = (byte) byteArrHandle.get(baseAddr, 0);
+        return readString(baseAddr);
+    }
+
+    public static String toJavaString(MemoryAddress addr) {
+        if (addr.segment() == null) {
+            throw new IllegalArgumentException("no underlying segment for the address");
+        }
+        return readString(addr);
+    }
+
+    private static String readString(MemoryAddress addr) {
+        StringBuilder buf = new StringBuilder();
+        byte curr = (byte) byteArrHandle.get(addr, 0);
         long offset = 0;
         while (curr != 0) {
             buf.append((char) curr);
-            curr = (byte) byteArrHandle.get(baseAddr, ++offset);
+            curr = (byte) byteArrHandle.get(addr, ++offset);
         }
         return buf.toString();
     }
 }
diff a/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java b/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
--- a/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
+++ b/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
@@ -65,14 +65,14 @@
             double[] convertedDblArray = Cdouble.toJavaArray(addr.segment());
             for (int i = 0; i < dblArray.length; i++) {
                 assertEquals(dblArray[i], convertedDblArray[i], 0.1);
             }
 
-            assertEquals(Cstring.toJavaString(name()), "java");
+            assertEquals(Cstring.toJavaStringRestricted(name()), "java");
 
             var dest = Cchar.allocateArray(12, scope);
             Cstring.copy(dest, "hello ");
             var src = Cstring.toCString("world", scope);
-            assertEquals(Cstring.toJavaString(concatenate(dest, src)), "hello world");
+            assertEquals(Cstring.toJavaStringRestricted(concatenate(dest, src)), "hello world");
         }
     }
 }
diff a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
--- a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
+++ b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
@@ -25,10 +25,11 @@
 import org.testng.annotations.Test;
 import test.jextract.test8246341.*;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
 import static test.jextract.test8246341.test8246341_h.*;
+import static test.jextract.test8246341.Cstring.toJavaStringRestricted;
 
 /*
  * @test
  * @library ..
  * @modules jdk.incubator.jextract
@@ -41,16 +42,16 @@
     @Test
     public void testPointerArray() {
         boolean[] callbackCalled = new boolean[1];
         try (var callback = func$callback.allocate((argc, argv) -> {
             callbackCalled[0] = true;
-            var addr = Cpointer.asArray(argv, argc);
+            var addr = Cpointer.asArrayRestricted(argv, argc);
             assertEquals(argc, 4);
-            assertEquals(Cstring.toJavaString(Cpointer.get(addr, 0)), "java");
-            assertEquals(Cstring.toJavaString(Cpointer.get(addr, 1)), "python");
-            assertEquals(Cstring.toJavaString(Cpointer.get(addr, 2)), "javascript");
-            assertEquals(Cstring.toJavaString(Cpointer.get(addr, 3)), "c++");
+            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 0)), "java");
+            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 1)), "python");
+            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 2)), "javascript");
+            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 3)), "c++");
         })) {
             func(callback.baseAddress());
         }
         assertTrue(callbackCalled[0]);
     }
@@ -58,15 +59,15 @@
     @Test
     public void testPointerAllocate() {
         try (var scope = new CScope(Cpointer.sizeof())) {
             var addr = Cpointer.allocate(MemoryAddress.NULL, scope);
             fillin(addr);
-            assertEquals(Cstring.toJavaString(Cpointer.get(addr)), "hello world");
+            assertEquals(toJavaStringRestricted(Cpointer.get(addr)), "hello world");
         }
 
         try (var seg = Cpointer.allocate(MemoryAddress.NULL)) {
             var addr = seg.baseAddress();
             fillin(addr);
-            assertEquals(Cstring.toJavaString(Cpointer.get(addr)), "hello world");
+            assertEquals(toJavaStringRestricted(Cpointer.get(addr)), "hello world");
         }
     }
 }
