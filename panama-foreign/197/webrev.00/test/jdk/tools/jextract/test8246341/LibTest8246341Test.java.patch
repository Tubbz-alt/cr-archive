diff a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
--- a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
+++ b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
@@ -25,10 +25,11 @@
 import org.testng.annotations.Test;
 import test.jextract.test8246341.*;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
 import static test.jextract.test8246341.test8246341_h.*;
+import static test.jextract.test8246341.Cstring.toJavaStringRestricted;
 
 /*
  * @test
  * @library ..
  * @modules jdk.incubator.jextract
@@ -41,16 +42,16 @@
     @Test
     public void testPointerArray() {
         boolean[] callbackCalled = new boolean[1];
         try (var callback = func$callback.allocate((argc, argv) -> {
             callbackCalled[0] = true;
-            var addr = Cpointer.asArray(argv, argc);
+            var addr = Cpointer.asArrayRestricted(argv, argc);
             assertEquals(argc, 4);
-            assertEquals(Cstring.toJavaString(Cpointer.get(addr, 0)), "java");
-            assertEquals(Cstring.toJavaString(Cpointer.get(addr, 1)), "python");
-            assertEquals(Cstring.toJavaString(Cpointer.get(addr, 2)), "javascript");
-            assertEquals(Cstring.toJavaString(Cpointer.get(addr, 3)), "c++");
+            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 0)), "java");
+            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 1)), "python");
+            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 2)), "javascript");
+            assertEquals(toJavaStringRestricted(Cpointer.get(addr, 3)), "c++");
         })) {
             func(callback.baseAddress());
         }
         assertTrue(callbackCalled[0]);
     }
@@ -58,15 +59,15 @@
     @Test
     public void testPointerAllocate() {
         try (var scope = new CScope(Cpointer.sizeof())) {
             var addr = Cpointer.allocate(MemoryAddress.NULL, scope);
             fillin(addr);
-            assertEquals(Cstring.toJavaString(Cpointer.get(addr)), "hello world");
+            assertEquals(toJavaStringRestricted(Cpointer.get(addr)), "hello world");
         }
 
         try (var seg = Cpointer.allocate(MemoryAddress.NULL)) {
             var addr = seg.baseAddress();
             fillin(addr);
-            assertEquals(Cstring.toJavaString(Cpointer.get(addr)), "hello world");
+            assertEquals(toJavaStringRestricted(Cpointer.get(addr)), "hello world");
         }
     }
 }
