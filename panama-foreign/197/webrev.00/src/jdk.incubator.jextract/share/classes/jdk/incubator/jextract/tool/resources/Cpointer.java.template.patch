diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
@@ -16,15 +16,23 @@
     public static final MemoryLayout LAYOUT = C_POINTER;
     public static final Class<?> CARRIER = long.class;
     private static final VarHandle handle = MemoryHandles.asAddressVarHandle(LAYOUT.varHandle(CARRIER));
     private static final VarHandle arrayHandle = MemoryHandles.asAddressVarHandle(arrayHandle(LAYOUT, CARRIER));
 
-    public static MemoryAddress asArray(MemoryAddress addr, int numPointers) {
+    public static MemoryAddress asArrayRestricted(MemoryAddress addr, int numPointers) {
         return MemorySegment.ofNativeRestricted(addr, numPointers * LAYOUT.byteSize(),
                Thread.currentThread(), null, null).baseAddress();
     }
 
+    public static MemoryAddress asArray(MemoryAddress addr, int numPointers) {
+        var seg = addr.segment();
+        if (seg == null) {
+            throw new IllegalArgumentException("no underlying segment for the address");
+        }
+        return seg.asSlice(addr.segmentOffset(), numPointers * LAYOUT.byteSize()).baseAddress();
+    }
+
     public static MemoryAddress get(MemoryAddress addr) {
         return (MemoryAddress) handle.get(addr);
     }
 
     public static void set(MemoryAddress addr, MemoryAddress value) {
