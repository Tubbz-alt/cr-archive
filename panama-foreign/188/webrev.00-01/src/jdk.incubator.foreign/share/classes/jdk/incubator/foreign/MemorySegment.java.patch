diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/MemorySegment.java
@@ -394,11 +394,11 @@
     /**
      * Creates a new buffer memory segment that models the memory associated with the given byte
      * buffer. The segment starts relative to the buffer's position (inclusive)
      * and ends relative to the buffer's limit (exclusive).
      * <p>
-     * The segment will feature all <a href="#access-modes">access modes</a> (see {@link #DEFAULT_ACCESS}),
+     * The segment will feature all <a href="#access-modes">access modes</a> (see {@link #ALL_ACCESS}),
      * unless the given buffer is {@linkplain ByteBuffer#isReadOnly() read-only} in which case the segment will
      * not feature the {@link #WRITE} access mode.
      * <p>
      * The resulting memory segment keeps a reference to the backing buffer, to ensure it remains <em>reachable</em>
      * for the life-time of the segment.
@@ -413,11 +413,11 @@
     /**
      * Creates a new array memory segment that models the memory associated with a given heap-allocated byte array.
      * <p>
      * The resulting memory segment keeps a reference to the backing array, to ensure it remains <em>reachable</em>
      * for the life-time of the segment. The segment will feature all <a href="#access-modes">access modes</a>
-     * (see {@link #DEFAULT_ACCESS}).
+     * (see {@link #ALL_ACCESS}).
      *
      * @param arr the primitive array backing the array memory segment.
      * @return a new array memory segment.
      */
     static MemorySegment ofArray(byte[] arr) {
@@ -427,11 +427,11 @@
     /**
      * Creates a new array memory segment that models the memory associated with a given heap-allocated char array.
      * <p>
      * The resulting memory segment keeps a reference to the backing array, to ensure it remains <em>reachable</em>
      * for the life-time of the segment. The segment will feature all <a href="#access-modes">access modes</a>
-     * (see {@link #DEFAULT_ACCESS}).
+     * (see {@link #ALL_ACCESS}).
      *
      * @param arr the primitive array backing the array memory segment.
      * @return a new array memory segment.
      */
     static MemorySegment ofArray(char[] arr) {
@@ -441,11 +441,11 @@
     /**
      * Creates a new array memory segment that models the memory associated with a given heap-allocated short array.
      * <p>
      * The resulting memory segment keeps a reference to the backing array, to ensure it remains <em>reachable</em>
      * for the life-time of the segment. The segment will feature all <a href="#access-modes">access modes</a>
-     * (see {@link #DEFAULT_ACCESS}).
+     * (see {@link #ALL_ACCESS}).
      *
      * @param arr the primitive array backing the array memory segment.
      * @return a new array memory segment.
      */
     static MemorySegment ofArray(short[] arr) {
@@ -468,11 +468,11 @@
     /**
      * Creates a new array memory segment that models the memory associated with a given heap-allocated float array.
      * <p>
      * The resulting memory segment keeps a reference to the backing array, to ensure it remains <em>reachable</em>
      * for the life-time of the segment. The segment will feature all <a href="#access-modes">access modes</a>
-     * (see {@link #DEFAULT_ACCESS}).
+     * (see {@link #ALL_ACCESS}).
      *
      * @param arr the primitive array backing the array memory segment.
      * @return a new array memory segment.
      */
     static MemorySegment ofArray(float[] arr) {
@@ -482,11 +482,11 @@
     /**
      * Creates a new array memory segment that models the memory associated with a given heap-allocated long array.
      * <p>
      * The resulting memory segment keeps a reference to the backing array, to ensure it remains <em>reachable</em>
      * for the life-time of the segment. The segment will feature all <a href="#access-modes">access modes</a>
-     * (see {@link #DEFAULT_ACCESS}).
+     * (see {@link #ALL_ACCESS}).
      *
      * @param arr the primitive array backing the array memory segment.
      * @return a new array memory segment.
      */
     static MemorySegment ofArray(long[] arr) {
@@ -496,11 +496,11 @@
     /**
      * Creates a new array memory segment that models the memory associated with a given heap-allocated double array.
      * <p>
      * The resulting memory segment keeps a reference to the backing array, to ensure it remains <em>reachable</em>
      * for the life-time of the segment. The segment will feature all <a href="#access-modes">access modes</a>
-     * (see {@link #DEFAULT_ACCESS}).
+     * (see {@link #ALL_ACCESS}).
      *
      * @param arr the primitive array backing the array memory segment.
      * @return a new array memory segment.
      */
     static MemorySegment ofArray(double[] arr) {
@@ -548,11 +548,11 @@
     }
 
     /**
      * Creates a new mapped memory segment that models a memory-mapped region of a file from a given path.
      * <p>
-     * The segment will feature all <a href="#access-modes">access modes</a> (see {@link #DEFAULT_ACCESS}),
+     * The segment will feature all <a href="#access-modes">access modes</a> (see {@link #ALL_ACCESS}),
      * unless the given mapping mode is {@linkplain FileChannel.MapMode#READ_ONLY READ_ONLY}, in which case
      * the segment will not feature the {@link #WRITE} access mode.
      *
      * @implNote When obtaining a mapped segment from a newly created file, the initialization state of the contents of the block
      * of mapped memory associated with the returned mapped memory segment is unspecified and should not be relied upon.
@@ -571,11 +571,11 @@
     }
 
     /**
      * Creates a new native memory segment that models a newly allocated block of off-heap memory with given size and
      * alignment constraint (in bytes). The segment will feature all <a href="#access-modes">access modes</a>
-     * (see {@link #DEFAULT_ACCESS}).
+     * (see {@link #ALL_ACCESS}).
      *
      * @implNote The block of off-heap memory associated with the returned native memory segment is initialized to zero.
      * Moreover, a client is responsible to call the {@link MemorySegment#close()} on a native memory segment,
      * to make sure the backing off-heap memory block is deallocated accordingly. Failure to do so will result in off-heap memory leaks.
      *
@@ -602,11 +602,11 @@
      * Returns a new native memory segment with given base address and size; the returned segment has its own temporal
      * bounds, and can therefore be closed; closing such a segment can optionally result in calling an user-provided cleanup
      * action. This method can be very useful when interacting with custom native memory sources (e.g. custom allocators,
      * GPU memory, etc.), where an address to some underlying memory region is typically obtained from native code
      * (often as a plain {@code long} value). The segment will feature all <a href="#access-modes">access modes</a>
-     * (see {@link #DEFAULT_ACCESS}).
+     * (see {@link #ALL_ACCESS}).
      * <p>
      * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
      * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
      * restricted methods, and use safe and supported functionalities, where possible.
      *
@@ -676,7 +676,7 @@
     /**
      * Default access mode; this is a union of all the access modes supported by memory segments.
      * @see MemorySegment#accessModes()
      * @see MemorySegment#withAccessModes(int)
      */
-    int DEFAULT_ACCESS = READ | WRITE | CLOSE | ACQUIRE | HANDOFF;
+    int ALL_ACCESS = READ | WRITE | CLOSE | ACQUIRE | HANDOFF;
 }
