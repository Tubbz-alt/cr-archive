diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/Utils.java
@@ -25,13 +25,11 @@
  */
 
 package jdk.internal.foreign;
 
 import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
-import jdk.incubator.foreign.SystemABI;
 import jdk.internal.access.JavaNioAccess;
 import jdk.internal.access.SharedSecrets;
 import jdk.internal.access.foreign.MemoryAddressProxy;
 import jdk.internal.access.foreign.UnmapperProxy;
 import jdk.internal.misc.Unsafe;
@@ -191,16 +189,6 @@
     }
 
     private static MemoryAddressProxy filterAddress(MemoryAddress addr) {
         return (MemoryAddressImpl)addr;
     }
-
-    public static <Z extends MemoryLayout> Z pick(Z sysv, Z win64, Z aarch64) {
-        SystemABI abi = InternalForeign.getInstancePrivileged().getSystemABI();
-        return switch (abi.name()) {
-            case SystemABI.SysV.NAME -> sysv;
-            case SystemABI.Win64.NAME -> win64;
-            case SystemABI.AArch64.NAME -> aarch64;
-            default -> throw new ExceptionInInitializerError("Unexpected ABI: " + abi.name());
-        };
-    }
 }
