diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
@@ -172,20 +172,31 @@
 
     static MemoryLayout getRecordLayout(Type type) {
         return RecordLayoutComputer.compute(0, type, type);
     }
 
+    private static boolean isVoidType(jdk.incubator.jextract.Type type) {
+        if (type instanceof jdk.incubator.jextract.Type.Primitive) {
+            jdk.incubator.jextract.Type.Primitive pt = (jdk.incubator.jextract.Type.Primitive)type;
+            return pt.kind() == jdk.incubator.jextract.Type.Primitive.Kind.Void;
+        } else if (type instanceof jdk.incubator.jextract.Type.Delegated) {
+            jdk.incubator.jextract.Type.Delegated dt = (jdk.incubator.jextract.Type.Delegated)type;
+            return dt.kind() == jdk.incubator.jextract.Type.Delegated.Kind.TYPEDEF? isVoidType(dt.type()) : false;
+        }
+        return false;
+    }
+
     public static Optional<FunctionDescriptor> getDescriptor(jdk.incubator.jextract.Type.Function t) {
         try {
             MemoryLayout[] args = t.argumentTypes().stream()
                     .map(LayoutUtils::getLayoutInternal)
                     .toArray(MemoryLayout[]::new);
-            if (t.returnType() instanceof jdk.incubator.jextract.Type.Primitive &&
-                    ((jdk.incubator.jextract.Type.Primitive) t.returnType()).kind() == jdk.incubator.jextract.Type.Primitive.Kind.Void) {
+            jdk.incubator.jextract.Type retType = t.returnType();
+            if (isVoidType(retType)) {
                 return Optional.of(FunctionDescriptor.ofVoid(args));
             } else {
-                return Optional.of(FunctionDescriptor.of(getLayoutInternal(t.returnType()), args));
+                return Optional.of(FunctionDescriptor.of(getLayoutInternal(retType), args));
             }
         } catch (Throwable ex) {
             return Optional.empty();
         }
     }
