diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/resources/RuntimeHelper.java.template
@@ -58,11 +58,11 @@
 
     public static final MemoryAddress lookupGlobalVariable(LibraryLookup[] LIBRARIES, String name, MemoryLayout layout) {
         return lookup(LIBRARIES, name).map(a ->
             MemorySegment.ofNativeRestricted(
                  a, layout.byteSize(), null, null, a
-            ).withAccessModes(MemorySegment.READ | MemorySegment.WRITE).baseAddress()).orElse(null);
+            ).withAccessModes(MemorySegment.READ | MemorySegment.WRITE).address()).orElse(null);
     }
 
     public static final MethodHandle downcallHandle(LibraryLookup[] LIBRARIES, String name, String desc, FunctionDescriptor fdesc, boolean variadic) {
         return lookup(LIBRARIES, name).map(
                 addr -> {
@@ -88,19 +88,19 @@
         }
     }
 
     public static MemoryAddress asArrayRestricted(MemoryAddress addr, MemoryLayout layout, int numElements) {
         return MemorySegment.ofNativeRestricted(addr, numElements * layout.byteSize(),
-               Thread.currentThread(), null, null).baseAddress();
+               Thread.currentThread(), null, null).address();
     }
 
     public static MemoryAddress asArray(MemoryAddress addr, MemoryLayout layout, int numElements) {
         var seg = addr.segment();
         if (seg == null) {
             throw new IllegalArgumentException("no underlying segment for the address");
         }
-        return seg.asSlice(addr.segmentOffset(), numElements * layout.byteSize()).baseAddress();
+        return seg.asSlice(addr.segmentOffset(), numElements * layout.byteSize()).address();
     }
 
     private static class VarargsInvoker {
         private static final MethodHandle INVOKE_MH;
         private final MemoryAddress symbol;
