diff a/test/jdk/java/jextract/JextractApiTestBase.java b/test/jdk/java/jextract/JextractApiTestBase.java
--- a/test/jdk/java/jextract/JextractApiTestBase.java
+++ b/test/jdk/java/jextract/JextractApiTestBase.java
@@ -28,10 +28,11 @@
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.JextractTask;
 import jdk.incubator.jextract.Type;
 
 import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
 import static org.testng.Assert.fail;
 
 public class JextractApiTestBase {
     static final boolean isMacOSX =
             System.getProperty("os.name", "unknown").contains("OS X");
@@ -43,17 +44,30 @@
         var task = JextractTask.newTask(false, header);
         Path builtinInc = Paths.get(System.getProperty("java.home"), "conf", "jextract");
         return task.parse(parseOptions);
     }
 
-    public static Declaration.Scoped checkStruct(Declaration.Scoped toplevel, String name, String... fields) {
-        Declaration.Scoped struct = findDecl(toplevel, name, Declaration.Scoped.class);
-        assertEquals(struct.members().size(), fields.length);
-        for (int i = 0 ; i < fields.length ; i++) {
-            assertEquals(struct.members().get(i).name(), fields[i]);
+    public static Declaration.Scoped checkScoped(Declaration.Scoped toplevel, String name, Declaration.Scoped.Kind kind,  String... fields) {
+        Declaration.Scoped scoped = findDecl(toplevel, name, Declaration.Scoped.class);
+        assertEquals(scoped.members().size(), fields.length);
+        assertTrue(scoped.kind() == kind);
+        for (int i = 0; i < fields.length; i++) {
+            assertEquals(scoped.members().get(i).name(), fields[i]);
         }
-        return struct;
+        return scoped;
+    }
+
+    public static Declaration.Scoped checkStruct(Declaration.Scoped toplevel, String name, String... fields) {
+        return checkScoped(toplevel, name, Declaration.Scoped.Kind.STRUCT, fields);
+    }
+
+    public static Declaration.Scoped checkBitfields(Declaration.Scoped toplevel, String name, String... fields) {
+        return checkScoped(toplevel, name, Declaration.Scoped.Kind.BITFIELDS, fields);
+    }
+
+    public static Declaration.Scoped checkUnion(Declaration.Scoped toplevel, String name, String... fields) {
+        return checkScoped(toplevel, name, Declaration.Scoped.Kind.UNION, fields);
     }
 
     public static Declaration.Variable checkConstant(Declaration.Scoped scope, String name, Type type) {
         Declaration.Variable var = findDecl(scope, name, Declaration.Variable.class);
         assertTypeEquals(type, var.type());
