diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
@@ -119,11 +119,11 @@
         /**
          * The parameters associated with this function declaration.
          * @return The parameters associated with this function declaration.
          */
         List<Variable> parameters();
-        
+
         /**
          * The foreign type associated with this function declaration.
          * @return The foreign type associated with this function declaration.
          */
         Type.Function type();
@@ -444,11 +444,11 @@
      * @param decls the union declaration member declarations.
      * @return a new union declaration with given name, layout and member declarations.
      */
     static Declaration.Scoped union(Position pos, String name, MemoryLayout layout, Declaration... decls) {
         List<Declaration> declList = Stream.of(decls).collect(Collectors.toList());
-        return new DeclarationImpl.ScopedImpl(Declaration.Scoped.Kind.STRUCT, layout, declList, name, pos);
+        return new DeclarationImpl.ScopedImpl(Declaration.Scoped.Kind.UNION, layout, declList, name, pos);
     }
 
     /**
      * Creates a new class declaration with given name and member declarations.
      * @param pos the class declaration position.
diff a/test/jdk/java/jextract/JextractApiTestBase.java b/test/jdk/java/jextract/JextractApiTestBase.java
--- a/test/jdk/java/jextract/JextractApiTestBase.java
+++ b/test/jdk/java/jextract/JextractApiTestBase.java
@@ -28,10 +28,11 @@
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.JextractTask;
 import jdk.incubator.jextract.Type;
 
 import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
 import static org.testng.Assert.fail;
 
 public class JextractApiTestBase {
     static final boolean isMacOSX =
             System.getProperty("os.name", "unknown").contains("OS X");
@@ -43,17 +44,30 @@
         var task = JextractTask.newTask(false, header);
         Path builtinInc = Paths.get(System.getProperty("java.home"), "conf", "jextract");
         return task.parse(parseOptions);
     }
 
-    public static Declaration.Scoped checkStruct(Declaration.Scoped toplevel, String name, String... fields) {
-        Declaration.Scoped struct = findDecl(toplevel, name, Declaration.Scoped.class);
-        assertEquals(struct.members().size(), fields.length);
-        for (int i = 0 ; i < fields.length ; i++) {
-            assertEquals(struct.members().get(i).name(), fields[i]);
+    public static Declaration.Scoped checkScoped(Declaration.Scoped toplevel, String name, Declaration.Scoped.Kind kind,  String... fields) {
+        Declaration.Scoped scoped = findDecl(toplevel, name, Declaration.Scoped.class);
+        assertEquals(scoped.members().size(), fields.length);
+        assertTrue(scoped.kind() == kind);
+        for (int i = 0; i < fields.length; i++) {
+            assertEquals(scoped.members().get(i).name(), fields[i]);
         }
-        return struct;
+        return scoped;
+    }
+
+    public static Declaration.Scoped checkStruct(Declaration.Scoped toplevel, String name, String... fields) {
+        return checkScoped(toplevel, name, Declaration.Scoped.Kind.STRUCT, fields);
+    }
+
+    public static Declaration.Scoped checkBitfields(Declaration.Scoped toplevel, String name, String... fields) {
+        return checkScoped(toplevel, name, Declaration.Scoped.Kind.BITFIELDS, fields);
+    }
+
+    public static Declaration.Scoped checkUnion(Declaration.Scoped toplevel, String name, String... fields) {
+        return checkScoped(toplevel, name, Declaration.Scoped.Kind.UNION, fields);
     }
 
     public static Declaration.Variable checkConstant(Declaration.Scoped scope, String name, Type type) {
         Declaration.Variable var = findDecl(scope, name, Declaration.Variable.class);
         assertTypeEquals(type, var.type());
diff a/test/jdk/java/jextract/Test8239490.java b/test/jdk/java/jextract/Test8239490.java
--- a/test/jdk/java/jextract/Test8239490.java
+++ b/test/jdk/java/jextract/Test8239490.java
@@ -39,20 +39,20 @@
         Declaration.Scoped d = parse("Test8239490.h");
         // check Foo
         String[] fooBitfieldNames = { "a", "b", "c" };
         int[] fooBitfieldSizes = { 1, 1, 30 };
         Declaration.Scoped structFoo = checkStruct(d, "Foo", "");
-        Declaration.Scoped bitfieldsFoo = checkStruct(structFoo, "", "a", "b", "c");
+        Declaration.Scoped bitfieldsFoo = checkBitfields(structFoo, "", "a", "b", "c");
         Type intType = ((Declaration.Variable)bitfieldsFoo.members().get(0)).type();
         for (int i = 0 ; i < fooBitfieldNames.length ; i++) {
             checkBitField(bitfieldsFoo, fooBitfieldNames[i], intType, fooBitfieldSizes[i]);
         }
         // check Bar
         String[] barBitfieldNames = { "x", "y" };
         int[] barBitfieldSizes = { 1, 31 };
         Declaration.Scoped structBar = checkStruct(d, "Bar", "", "z");
-        Declaration.Scoped bitfieldsBar = checkStruct(structBar, "", "x", "y");
+        Declaration.Scoped bitfieldsBar = checkBitfields(structBar, "", "x", "y");
         for (int i = 0 ; i < barBitfieldNames.length ; i++) {
             checkBitField(bitfieldsBar, barBitfieldNames[i], intType, barBitfieldSizes[i]);
         }
         checkField(structBar, "z", Type.array(1, Type.declared(structFoo)));
     }
diff a/test/jdk/java/jextract/Test8240853.h b/test/jdk/java/jextract/Test8240853.h
--- /dev/null
+++ b/test/jdk/java/jextract/Test8240853.h
@@ -0,0 +1,27 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+union Foo {
+    int i;
+    long l;
+};
diff a/test/jdk/java/jextract/Test8240853.java b/test/jdk/java/jextract/Test8240853.java
--- /dev/null
+++ b/test/jdk/java/jextract/Test8240853.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @build JextractApiTestBase
+ * @run testng Test8239490
+ */
+
+import jdk.incubator.jextract.Declaration;
+import org.testng.annotations.Test;
+
+public class Test8240853 extends JextractApiTestBase {
+    @Test
+    public void test8240853() {
+        Declaration.Scoped d = parse("Test8240853.h");
+        // check Foo
+        checkUnion(d, "Foo", "i", "l");
+    }
+}
