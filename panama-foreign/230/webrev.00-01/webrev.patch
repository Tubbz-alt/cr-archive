diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
@@ -541,11 +541,11 @@
          * Constants used for ABI classification. They are referred to by the layout attribute {@link #CLASS_ATTRIBUTE_NAME}.
          */
         public enum ArgumentClass {
             /** Classification constant for machine integral values */
             INTEGER,
-            /** Classification constant for machine integral values */
+            /** Classification constant for machine floating point values */
             VECTOR,
             /** Classification constant for machine pointer values */
             POINTER;
         }
 
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java
@@ -42,11 +42,11 @@
  * is used to model the signature of native functions.
  */
 public final class FunctionDescriptor implements Constable {
 
     /**
-     * The name of the function descriptor attribute (see {@link #attributes()} used to mark variadic parameters. The
+     * The name of the function descriptor attribute (see {@link #attributes()} used to mark trivial functions. The
      * attribute value must be a boolean.
      */
     public static final String TRIVIAL_ATTRIBUTE_NAME = "abi/trivial";
     
     private final MemoryLayout resLayout;
@@ -202,6 +202,6 @@
             constants.add(argLayout.describeConstable().get());
         }
         return Optional.of(DynamicConstantDesc.ofNamed(
                     ConstantDescs.BSM_INVOKE, "function", AbstractLayout.CD_FUNCTION_DESC, constants.toArray(new ConstantDesc[0])));
     }
-}
+}
