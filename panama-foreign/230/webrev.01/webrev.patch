diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
@@ -300,21 +300,34 @@
         private SysV() {
             //just the one
         }
 
         /**
-         * The name of the SysV linker ({@see ForeignLinker#name})
+         * The name of the SysV linker
+         * @see ForeignLinker#name
          */
         public static final String NAME = "SysV";
 
+        /**
+         * The name of the layout attribute (see {@link MemoryLayout#attributes()} used for ABI classification. The
+         * attribute value must be an enum constant from {@link ArgumentClass}.
+         */
         public final static String CLASS_ATTRIBUTE_NAME = "abi/sysv/class";
 
+        /**
+         * Constants used for ABI classification. They are referred to by the layout attribute {@link #CLASS_ATTRIBUTE_NAME}.
+         */
         public enum ArgumentClass {
+            /** Classification constant for integral values */
             INTEGER,
+            /** Classification constant for floating point values */
             SSE,
+            /** Classification constant for x87 floating point values */
             X87,
+            /** Classification constant for {@code complex long double} values */
             COMPLEX_87,
+            /** Classification constant for machine pointer values */
             POINTER;
         }
 
         /**
          * The {@code _Bool} native type.
@@ -396,21 +409,36 @@
         private Win64() {
             //just the one
         }
 
         /**
-         * The name of the Windows linker ({@see ForeignLinker#name})
+         * The name of the Windows linker
+         * @see ForeignLinker#name
          */
         public final static String NAME = "Windows";
 
+        /**
+         * The name of the layout attribute (see {@link MemoryLayout#attributes()} used to mark variadic parameters. The
+         * attribute value must be a boolean.
+         */
         public final static String VARARGS_ATTRIBUTE_NAME = "abi/windows/varargs";
 
+        /**
+         * The name of the layout attribute (see {@link MemoryLayout#attributes()} used for ABI classification. The
+         * attribute value must be an enum constant from {@link ArgumentClass}.
+         */
         public final static String CLASS_ATTRIBUTE_NAME = "abi/windows/class";
 
+        /**
+         * Constants used for ABI classification. They are referred to by the layout attribute {@link #CLASS_ATTRIBUTE_NAME}.
+         */
         public enum ArgumentClass {
+            /** Classification constant for integral values */
             INTEGER,
+            /** Classification constant for floating point values */
             FLOAT,
+            /** Classification constant for machine pointer values */
             POINTER;
         }
 
         /**
          * The {@code _Bool} native type.
@@ -475,12 +503,18 @@
         /**
          * The {@code va_list} native type, as it is passed to a function.
          */
         public static final MemoryLayout C_VA_LIST = Win64.C_POINTER;
 
-        public static ValueLayout asVarArg(ValueLayout l) {
-            return l.withAttribute(VARARGS_ATTRIBUTE_NAME, "true");
+        /**
+         * Return a new memory layout which describes a variadic parameter to be passed to a function.
+         * @param layout the original parameter layout.
+         * @return a layout which is the same as {@code layout}, except for the extra attribute {@link #VARARGS_ATTRIBUTE_NAME},
+         * which is set to {@code true}.
+         */
+        public static ValueLayout asVarArg(ValueLayout layout) {
+            return layout.withAttribute(VARARGS_ATTRIBUTE_NAME, "true");
         }
     }
 
     /**
      * This class defines layout constants modelling standard primitive types supported by the AArch64 ABI.
@@ -490,19 +524,30 @@
         private AArch64() {
             //just the one
         }
 
         /**
-         * The name of the AArch64 linker ({@see ForeignLinker#name})
+         * The name of the AArch64 linker
+         * @see ForeignLinker#name
          */
         public final static String NAME = "AArch64";
 
+        /**
+         * The name of the layout attribute (see {@link MemoryLayout#attributes()} used for ABI classification. The
+         * attribute value must be an enum constant from {@link ArgumentClass}.
+         */
         public static final String CLASS_ATTRIBUTE_NAME = "abi/aarch64/class";
 
+        /**
+         * Constants used for ABI classification. They are referred to by the layout attribute {@link #CLASS_ATTRIBUTE_NAME}.
+         */
         public enum ArgumentClass {
+            /** Classification constant for machine integral values */
             INTEGER,
+            /** Classification constant for machine floating point values */
             VECTOR,
+            /** Classification constant for machine pointer values */
             POINTER;
         }
 
         /**
          * The {@code _Bool} native type.
@@ -698,11 +743,11 @@
      * @param addr the address at which the string is stored.
      * @return a Java string with the contents of the null-terminated C string at given address.
      * @throws NullPointerException if {@code addr == null}
      * @throws IllegalArgumentException if the size of the native string is greater than {@code Integer.MAX_VALUE}.
      * @throws IllegalStateException if the size of the native string is greater than the size of the segment
-     * associated with {@code addr}, or if {@code addr} is associated with a segment that is </em>not alive<em>.
+     * associated with {@code addr}, or if {@code addr} is associated with a segment that is <em>not alive</em>.
      */
     public static String toJavaString(MemoryAddress addr) {
         return SharedUtils.toJavaStringInternal(addr, Charset.defaultCharset());
     }
 
@@ -717,11 +762,11 @@
      * @param charset The {@linkplain java.nio.charset.Charset} to be used to compute the contents of the Java string.
      * @return a Java string with the contents of the null-terminated C string at given address.
      * @throws NullPointerException if {@code addr == null}
      * @throws IllegalArgumentException if the size of the native string is greater than {@code Integer.MAX_VALUE}.
      * @throws IllegalStateException if the size of the native string is greater than the size of the segment
-     * associated with {@code addr}, or if {@code addr} is associated with a segment that is </em>not alive<em>.
+     * associated with {@code addr}, or if {@code addr} is associated with a segment that is <em>not alive</em>.
      */
     public static String toJavaString(MemoryAddress addr, Charset charset) {
         return SharedUtils.toJavaStringInternal(addr, charset);
     }
 
diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/FunctionDescriptor.java
@@ -40,11 +40,16 @@
 /**
  * A function descriptor is made up of zero or more argument layouts and one return  A function descriptor
  * is used to model the signature of native functions.
  */
 public final class FunctionDescriptor implements Constable {
-    public static final String IS_TRIVIAL = "abi/is_trivial";
+
+    /**
+     * The name of the function descriptor attribute (see {@link #attributes()} used to mark trivial functions. The
+     * attribute value must be a boolean.
+     */
+    public static final String TRIVIAL_ATTRIBUTE_NAME = "abi/trivial";
     
     private final MemoryLayout resLayout;
     private final MemoryLayout[] argLayouts;
     private final Map<String, Constable> attributes;
 
@@ -52,18 +57,38 @@
         this.resLayout = resLayout;
         this.attributes = Collections.unmodifiableMap(attributes);
         this.argLayouts = argLayouts;
     }
 
+    /**
+     * Returns the attribute with the given name (if it exists).
+     *
+     * @param name the attribute name
+     * @return the attribute with the given name (if it exists).
+     */
     public Optional<Constable> attribute(String name) {
         return Optional.ofNullable(attributes.get(name));
     }
 
+    /**
+     * Returns a stream of the attribute names associated with this function descriptor.
+     *
+     * @return a stream of the attribute names associated with this function descriptor.
+     */
     public Stream<String> attributes() {
         return attributes.keySet().stream();
     }
 
+    /**
+     * Returns a new function descriptor which features the same attributes as this descriptor, plus the newly specified attribute.
+     * If this descriptor already contains an attribute with the same name, the existing attribute value is overwritten in the returned
+     * descriptor.
+     *
+     * @param name the attribute name.
+     * @param value the attribute value.
+     * @return a new function descriptor which features the same attributes as this descriptor, plus the newly specified attribute.
+     */
     public FunctionDescriptor withAttribute(String name, Constable value) {
         Map<String, Constable> newAttributes = new HashMap<>(attributes);
         newAttributes.put(name, value);
         return new FunctionDescriptor(resLayout, newAttributes, argLayouts);
     }
@@ -177,6 +202,6 @@
             constants.add(argLayout.describeConstable().get());
         }
         return Optional.of(DynamicConstantDesc.ofNamed(
                     ConstantDescs.BSM_INVOKE, "function", AbstractLayout.CD_FUNCTION_DESC, constants.toArray(new ConstantDesc[0])));
     }
-}
+}
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
@@ -349,11 +349,11 @@
                     String.format("Invalid operand type: %s. %s expected", actualType, expectedType));
         }
     }
 
     public static boolean isTrivial(FunctionDescriptor cDesc) {
-        return cDesc.attribute(FunctionDescriptor.IS_TRIVIAL)
+        return cDesc.attribute(FunctionDescriptor.TRIVIAL_ATTRIBUTE_NAME)
                 .map(Boolean.class::cast)
                 .orElse(false);
     }
 
     public static class SimpleVaArg {
diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/CallOverhead.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/CallOverhead.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/CallOverhead.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/CallOverhead.java
@@ -79,18 +79,18 @@
             {
                 MemoryAddress addr = ll.lookup("func");
                 MethodType mt = MethodType.methodType(void.class);
                 FunctionDescriptor fd = FunctionDescriptor.ofVoid();
                 func = abi.downcallHandle(addr, mt, fd);
-                func_trivial = abi.downcallHandle(addr, mt, fd.withAttribute(FunctionDescriptor.IS_TRIVIAL, true));
+                func_trivial = abi.downcallHandle(addr, mt, fd.withAttribute(FunctionDescriptor.TRIVIAL_ATTRIBUTE_NAME, true));
             }
             {
                 MemoryAddress addr = ll.lookup("identity");
                 MethodType mt = MethodType.methodType(int.class, int.class);
                 FunctionDescriptor fd = FunctionDescriptor.of(C_INT, C_INT);
                 identity = abi.downcallHandle(addr, mt, fd);
-                identity_trivial = abi.downcallHandle(addr, mt, fd.withAttribute(FunctionDescriptor.IS_TRIVIAL, true));
+                identity_trivial = abi.downcallHandle(addr, mt, fd.withAttribute(FunctionDescriptor.TRIVIAL_ATTRIBUTE_NAME, true));
             }
             identity_struct = abi.downcallHandle(ll.lookup("identity_struct"),
                     MethodType.methodType(MemorySegment.class, MemorySegment.class),
                     FunctionDescriptor.of(POINT_LAYOUT, POINT_LAYOUT));
             identity_memory_address = abi.downcallHandle(ll.lookup("identity_memory_address"),
