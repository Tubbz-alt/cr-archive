diff a/test/jdk/tools/jextract/testStruct/LibStructTest.java b/test/jdk/tools/jextract/testStruct/LibStructTest.java
--- a/test/jdk/tools/jextract/testStruct/LibStructTest.java
+++ b/test/jdk/tools/jextract/testStruct/LibStructTest.java
@@ -19,15 +19,17 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
-import jdk.incubator.foreign.MemoryLayout.PathElement;
 import jdk.incubator.foreign.GroupLayout;
+import jdk.incubator.foreign.MemoryLayout.PathElement;
 import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.SystemABI.Type;
 import org.testng.annotations.Test;
+import test.jextract.struct.CAllTypes;
+import test.jextract.struct.CPoint;
 
 import static jdk.incubator.foreign.SystemABI.NATIVE_TYPE;
 import static org.testng.Assert.assertEquals;
 import static test.jextract.struct.struct_h.*;
 
@@ -40,12 +42,19 @@
  */
 public class LibStructTest {
     @Test
     public void testMakePoint() {
         try (var seg = makePoint(42, -39)) {
-            assertEquals(Point$x$get(seg), 42);
-            assertEquals(Point$y$get(seg), -39);
+            assertEquals(CPoint.x$get(seg), 42);
+            assertEquals(CPoint.y$get(seg), -39);
+        }
+
+        try (var seg2 = CPoint.allocate()) {
+            CPoint.x$set(seg2, 56);
+            CPoint.y$set(seg2, 65);
+            assertEquals(CPoint.x$get(seg2), 56);
+            assertEquals(CPoint.y$get(seg2), 65);
         }
     }
 
     private static void checkFieldABIType(GroupLayout group, String fieldName, Type expected) {
         assertEquals(group.select(PathElement.groupElement(fieldName)).attribute(NATIVE_TYPE)
@@ -53,11 +62,11 @@
                                                                       .orElseThrow(), expected);
     }
 
     @Test
     public void testFieldTypes() {
-        GroupLayout g = (GroupLayout)AllTypes$LAYOUT();
+        GroupLayout g = (GroupLayout)CAllTypes.$LAYOUT();
         checkFieldABIType(g, "sc",  Type.SIGNED_CHAR);
         checkFieldABIType(g, "uc",  Type.UNSIGNED_CHAR);
         checkFieldABIType(g, "s",   Type.SHORT);
         checkFieldABIType(g, "us",  Type.UNSIGNED_SHORT);
         checkFieldABIType(g, "i",   Type.INT);
