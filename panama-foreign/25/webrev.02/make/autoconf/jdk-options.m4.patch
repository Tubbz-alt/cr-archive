diff a/make/autoconf/jdk-options.m4 b/make/autoconf/jdk-options.m4
--- a/make/autoconf/jdk-options.m4
+++ b/make/autoconf/jdk-options.m4
@@ -312,11 +312,11 @@
 ])
 
 AC_DEFUN_ONCE([JDKOPT_SETUP_DEBUG_SYMBOLS],
 [
   #
-  # NATIVE_DEBUG_SYMBOLS
+  # Native debug symbols.
   # This must be done after the toolchain is setup, since we're looking at objcopy.
   #
   AC_MSG_CHECKING([what type of native debug symbols to use])
   AC_ARG_WITH([native-debug-symbols],
       [AS_HELP_STRING([--with-native-debug-symbols],
@@ -324,15 +324,13 @@
       [
         if test "x$OPENJDK_TARGET_OS" = xaix; then
           if test "x$withval" = xexternal || test "x$withval" = xzipped; then
             AC_MSG_ERROR([AIX only supports the parameters 'none' and 'internal' for --with-native-debug-symbols])
           fi
-        else
-          if test "x$OPENJDK_TARGET_OS" = xwindows; then
-            if test "x$withval" = xinternal; then
-              AC_MSG_ERROR([Windows does not support the parameter 'internal' for --with-native-debug-symbols])
-            fi
+        elif test "x$OPENJDK_TARGET_OS" = xwindows; then
+          if test "x$withval" = xinternal; then
+            AC_MSG_ERROR([Windows does not support the parameter 'internal' for --with-native-debug-symbols])
           fi
         fi
       ],
       [
         if test "x$STATIC_BUILD" = xtrue; then
@@ -344,22 +342,21 @@
           else
             with_native_debug_symbols="external"
           fi
         fi
       ])
-  NATIVE_DEBUG_SYMBOLS=$with_native_debug_symbols
-  AC_MSG_RESULT([$NATIVE_DEBUG_SYMBOLS])
+  AC_MSG_RESULT([$with_native_debug_symbols])
 
-  if test "x$NATIVE_DEBUG_SYMBOLS" = xnone; then
+  if test "x$with_native_debug_symbols" = xnone; then
     COMPILE_WITH_DEBUG_SYMBOLS=false
     COPY_DEBUG_SYMBOLS=false
     ZIP_EXTERNAL_DEBUG_SYMBOLS=false
-  elif test "x$NATIVE_DEBUG_SYMBOLS" = xinternal; then
+  elif test "x$with_native_debug_symbols" = xinternal; then
     COMPILE_WITH_DEBUG_SYMBOLS=true
     COPY_DEBUG_SYMBOLS=false
     ZIP_EXTERNAL_DEBUG_SYMBOLS=false
-  elif test "x$NATIVE_DEBUG_SYMBOLS" = xexternal; then
+  elif test "x$with_native_debug_symbols" = xexternal; then
 
     if test "x$OPENJDK_TARGET_OS" = xsolaris || test "x$OPENJDK_TARGET_OS" = xlinux; then
       if test "x$OBJCOPY" = x; then
         # enabling of enable-debug-symbols and can't find objcopy
         # this is an error
@@ -368,11 +365,11 @@
     fi
 
     COMPILE_WITH_DEBUG_SYMBOLS=true
     COPY_DEBUG_SYMBOLS=true
     ZIP_EXTERNAL_DEBUG_SYMBOLS=false
-  elif test "x$NATIVE_DEBUG_SYMBOLS" = xzipped; then
+  elif test "x$with_native_debug_symbols" = xzipped; then
 
     if test "x$OPENJDK_TARGET_OS" = xsolaris || test "x$OPENJDK_TARGET_OS" = xlinux; then
       if test "x$OBJCOPY" = x; then
         # enabling of enable-debug-symbols and can't find objcopy
         # this is an error
@@ -388,10 +385,37 @@
   fi
 
   AC_SUBST(COMPILE_WITH_DEBUG_SYMBOLS)
   AC_SUBST(COPY_DEBUG_SYMBOLS)
   AC_SUBST(ZIP_EXTERNAL_DEBUG_SYMBOLS)
+
+  # Should we add external native debug symbols to the shipped bundles?
+  AC_MSG_CHECKING([if we should add external native debug symbols to the shipped bundles])
+  AC_ARG_WITH([external-symbols-in-bundles],
+      [AS_HELP_STRING([--with-external-symbols-in-bundles],
+      [which type of external native debug symbol information shall be shipped in product bundles (none, public, full)
+      (e.g. ship full/stripped pdbs on Windows) @<:@none@:>@])])
+
+  if test "x$with_external_symbols_in_bundles" = x || test "x$with_external_symbols_in_bundles" = xnone ; then
+    AC_MSG_RESULT([no])
+  elif test "x$with_external_symbols_in_bundles" = xfull || test "x$with_external_symbols_in_bundles" = xpublic ; then
+    if test "x$OPENJDK_TARGET_OS" != xwindows ; then
+      AC_MSG_ERROR([--with-external-symbols-in-bundles currently only works on windows!])
+    elif test "x$COPY_DEBUG_SYMBOLS" != xtrue ; then
+      AC_MSG_ERROR([--with-external-symbols-in-bundles only works when --with-native-debug-symbols=external is used!])
+    elif test "x$with_external_symbols_in_bundles" = xfull ; then
+      AC_MSG_RESULT([full])
+      SHIP_DEBUG_SYMBOLS=full
+    else
+      AC_MSG_RESULT([public])
+      SHIP_DEBUG_SYMBOLS=public
+    fi
+  else
+    AC_MSG_ERROR([$with_external_symbols_in_bundles is an unknown value for --with-external-symbols-in-bundles])
+  fi
+
+  AC_SUBST(SHIP_DEBUG_SYMBOLS)
 ])
 
 ################################################################################
 #
 # Native and Java code coverage
@@ -614,37 +638,28 @@
   AC_ARG_ENABLE([generate-classlist], [AS_HELP_STRING([--disable-generate-classlist],
       [forces enabling or disabling of the generation of a CDS classlist at build time.
       Default is to generate it when either the server or client JVMs are built and
       enable-cds is true.])])
 
-  # Check if it's likely that it's possible to generate the classlist. Depending
-  # on exact jvm configuration it could be possible anyway.
-  if test "x$ENABLE_CDS" = "xtrue" && (HOTSPOT_CHECK_JVM_VARIANT(server) || HOTSPOT_CHECK_JVM_VARIANT(client) || HOTSPOT_CHECK_JVM_FEATURE(cds)); then
-    ENABLE_GENERATE_CLASSLIST_POSSIBLE="true"
-  else
-    ENABLE_GENERATE_CLASSLIST_POSSIBLE="false"
-  fi
+  # In jvm-features.m4 ENABLE_CDS is set to true iff all JVM variants has cds
+  # enabled.
 
   AC_MSG_CHECKING([if the CDS classlist generation should be enabled])
   if test "x$enable_generate_classlist" = "xyes"; then
     AC_MSG_RESULT([yes, forced])
     ENABLE_GENERATE_CLASSLIST="true"
-    if test "x$ENABLE_GENERATE_CLASSLIST_POSSIBLE" = "xfalse"; then
-      if test "x$ENABLE_CDS" = "xfalse"; then
-        # In GenerateLinkOptData.gmk, DumpLoadedClassList is used to generate the
-        # classlist file. It never will work in this case since the VM will report
-        # an error for DumpLoadedClassList when CDS is disabled.
-        AC_MSG_ERROR([Generation of classlist is not possible with enable-cds=false])
-      else
-        AC_MSG_WARN([Generation of classlist might not be possible with JVM Variants $JVM_VARIANTS and enable-cds=$ENABLE_CDS])
-      fi
+    if test "x$ENABLE_CDS" = "xfalse"; then
+      # In GenerateLinkOptData.gmk, DumpLoadedClassList is used to generate the
+      # classlist file. It never will work in this case since the VM will report
+      # an error for DumpLoadedClassList when CDS is disabled.
+      AC_MSG_ERROR([Generation of classlist is not possible without JVM feature 'cds'])
     fi
   elif test "x$enable_generate_classlist" = "xno"; then
     AC_MSG_RESULT([no, forced])
     ENABLE_GENERATE_CLASSLIST="false"
   elif test "x$enable_generate_classlist" = "x"; then
-    if test "x$ENABLE_GENERATE_CLASSLIST_POSSIBLE" = "xtrue"; then
+    if test "x$ENABLE_CDS" = "xtrue"; then
       AC_MSG_RESULT([yes])
       ENABLE_GENERATE_CLASSLIST="true"
     else
       AC_MSG_RESULT([no])
       ENABLE_GENERATE_CLASSLIST="false"
