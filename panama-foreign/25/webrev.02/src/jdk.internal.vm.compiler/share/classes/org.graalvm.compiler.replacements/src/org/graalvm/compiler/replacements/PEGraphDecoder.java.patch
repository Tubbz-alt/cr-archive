diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/PEGraphDecoder.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/PEGraphDecoder.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/PEGraphDecoder.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/PEGraphDecoder.java
@@ -39,11 +39,10 @@
 import jdk.internal.vm.compiler.collections.EconomicMap;
 import jdk.internal.vm.compiler.collections.Equivalence;
 import org.graalvm.compiler.api.replacements.Fold;
 import org.graalvm.compiler.bytecode.Bytecode;
 import org.graalvm.compiler.bytecode.BytecodeProvider;
-import org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecode;
 import org.graalvm.compiler.core.common.PermanentBailoutException;
 import org.graalvm.compiler.core.common.cfg.CFGVerifier;
 import org.graalvm.compiler.core.common.spi.ConstantFieldProvider;
 import org.graalvm.compiler.core.common.type.Stamp;
 import org.graalvm.compiler.core.common.type.StampFactory;
@@ -189,10 +188,27 @@
         @Override
         public boolean isInlinedMethod() {
             return caller != null;
         }
 
+        /**
+         * Gets the call stack representing this method scope and its callers.
+         */
+        public StackTraceElement[] getCallStack() {
+            StackTraceElement[] stack = new StackTraceElement[inliningDepth + 1];
+            PEMethodScope frame = this;
+            int index = 0;
+            int bci = -1;
+            while (frame != null) {
+                stack[index++] = frame.method.asStackTraceElement(bci);
+                bci = frame.invokeData == null ? 0 : frame.invokeData.invoke.bci();
+                frame = frame.caller;
+            }
+            assert index == stack.length : index + " != " + stack.length;
+            return stack;
+        }
+
         @Override
         public NodeSourcePosition getCallerBytecodePosition(NodeSourcePosition position) {
             if (caller == null) {
                 return position;
             }
@@ -224,10 +240,15 @@
                 }
                 sourceLanguagePosition = res;
             }
             return res;
         }
+
+        @Override
+        public String toString() {
+            return getClass().getSimpleName() + '[' + method.format("%H.%n(%p)") + ']';
+        }
     }
 
     private static final class UnresolvedSourceLanguagePosition implements SourceLanguagePosition {
         static final SourceLanguagePosition INSTANCE = new UnresolvedSourceLanguagePosition();
 
@@ -305,11 +326,11 @@
         }
 
         @Override
         public BailoutException bailout(String string) {
             BailoutException bailout = new PermanentBailoutException(string);
-            throw GraphUtil.createBailoutException(string, bailout, GraphUtil.approxSourceStackTraceElement(methodScope.getCallerBytecodePosition()));
+            throw GraphUtil.createBailoutException(string, bailout, methodScope.getCallStack());
         }
 
         @Override
         public StampProvider getStampProvider() {
             return providers.getStampProvider();
@@ -395,16 +416,17 @@
             throw unimplemented();
         }
 
         @Override
         public ResolvedJavaMethod getMethod() {
-            throw unimplemented();
+            return methodScope.method;
         }
 
         @Override
         public int bci() {
-            return invoke.bci();
+            // There is no BCI available when decoding an encoded method
+            return -1;
         }
 
         @Override
         public InvokeKind getInvokeKind() {
             throw unimplemented();
@@ -416,15 +438,13 @@
         }
 
         @Override
         public String toString() {
             Formatter fmt = new Formatter();
-            PEMethodScope scope = this.methodScope;
-            fmt.format("%s", new ResolvedJavaMethodBytecode(scope.method).asStackTraceElement(invoke.bci()));
-            NodeSourcePosition callers = scope.getCallerBytecodePosition();
-            if (callers != null) {
-                fmt.format("%n%s", callers);
+            fmt.format("Decoding %s", methodScope.method.format("%H.%n(%p)"));
+            for (StackTraceElement e : methodScope.getCallStack()) {
+                fmt.format("%n\tat %s", e);
             }
             return fmt.toString();
         }
     }
 
@@ -669,11 +689,11 @@
     }
 
     private static RuntimeException tooManyLoopExplosionIterations(PEMethodScope methodScope, OptionValues options) {
         String message = "too many loop explosion iterations - does the explosion not terminate for method " + methodScope.method + "?";
         RuntimeException bailout = Options.FailedLoopExplosionIsFatal.getValue(options) ? new RuntimeException(message) : new PermanentBailoutException(message);
-        throw GraphUtil.createBailoutException(message, bailout, GraphUtil.approxSourceStackTraceElement(methodScope.getCallerBytecodePosition()));
+        throw GraphUtil.createBailoutException(message, bailout, methodScope.getCallStack());
     }
 
     @Override
     protected LoopScope handleInvoke(MethodScope s, LoopScope loopScope, InvokeData invokeData) {
         PEMethodScope methodScope = (PEMethodScope) s;
