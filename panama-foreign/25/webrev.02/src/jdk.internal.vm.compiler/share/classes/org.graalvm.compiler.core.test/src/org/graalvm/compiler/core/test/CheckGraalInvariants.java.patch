diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.test/src/org/graalvm/compiler/core/test/CheckGraalInvariants.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.test/src/org/graalvm/compiler/core/test/CheckGraalInvariants.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.test/src/org/graalvm/compiler/core/test/CheckGraalInvariants.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.test/src/org/graalvm/compiler/core/test/CheckGraalInvariants.java
@@ -27,17 +27,22 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.lang.annotation.Annotation;
+import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
@@ -46,10 +51,11 @@
 import org.graalvm.compiler.api.replacements.Snippet;
 import org.graalvm.compiler.api.replacements.Snippet.ConstantParameter;
 import org.graalvm.compiler.api.replacements.Snippet.NonNullParameter;
 import org.graalvm.compiler.api.replacements.Snippet.VarargsParameter;
 import org.graalvm.compiler.api.test.Graal;
+import org.graalvm.compiler.api.test.ModuleSupport;
 import org.graalvm.compiler.bytecode.BridgeMethodUtils;
 import org.graalvm.compiler.core.CompilerThreadFactory;
 import org.graalvm.compiler.core.common.LIRKind;
 import org.graalvm.compiler.core.common.type.ArithmeticOpTable;
 import org.graalvm.compiler.debug.DebugCloseable;
@@ -64,23 +70,27 @@
 import org.graalvm.compiler.nodes.StructuredGraph;
 import org.graalvm.compiler.nodes.StructuredGraph.AllowAssumptions;
 import org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration;
 import org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderConfiguration.Plugins;
 import org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins;
+import org.graalvm.compiler.nodes.java.LoadFieldNode;
 import org.graalvm.compiler.nodes.spi.CoreProviders;
+import org.graalvm.compiler.options.Option;
+import org.graalvm.compiler.options.OptionDescriptor;
+import org.graalvm.compiler.options.OptionDescriptors;
 import org.graalvm.compiler.options.OptionValues;
+import org.graalvm.compiler.options.OptionsParser;
 import org.graalvm.compiler.phases.OptimisticOptimizations;
 import org.graalvm.compiler.phases.PhaseSuite;
 import org.graalvm.compiler.phases.VerifyPhase;
 import org.graalvm.compiler.phases.VerifyPhase.VerificationError;
 import org.graalvm.compiler.phases.contract.VerifyNodeCosts;
 import org.graalvm.compiler.phases.tiers.HighTierContext;
 import org.graalvm.compiler.phases.util.Providers;
 import org.graalvm.compiler.runtime.RuntimeProvider;
 import org.graalvm.compiler.serviceprovider.JavaVersionUtil;
 import org.graalvm.compiler.test.AddExports;
-import org.graalvm.compiler.api.test.ModuleSupport;
 import jdk.internal.vm.compiler.word.LocationIdentity;
 import org.junit.Assert;
 import org.junit.Assume;
 import org.junit.Test;
 
@@ -89,10 +99,11 @@
 import jdk.vm.ci.code.Register.RegisterCategory;
 import jdk.vm.ci.meta.JavaField;
 import jdk.vm.ci.meta.JavaMethod;
 import jdk.vm.ci.meta.JavaType;
 import jdk.vm.ci.meta.MetaAccessProvider;
+import jdk.vm.ci.meta.ResolvedJavaField;
 import jdk.vm.ci.meta.ResolvedJavaMethod;
 import jdk.vm.ci.meta.ResolvedJavaType;
 import jdk.vm.ci.meta.Value;
 
 /**
@@ -195,14 +206,35 @@
          * Makes edits to the list of verifiers to be run.
          */
         @SuppressWarnings("unused")
         protected void updateVerifiers(List<VerifyPhase<CoreProviders>> verifiers) {
         }
+
+        /**
+         * Determines if {@code option} should be checked to ensure it has at least one usage.
+         */
+        public boolean shouldCheckUsage(OptionDescriptor option) {
+            Class<?> declaringClass = option.getDeclaringClass();
+            if (declaringClass.getName().equals("org.graalvm.compiler.truffle.compiler.SharedTruffleCompilerOptions")) {
+                /*
+                 * These options are aliases for Truffle runtime options whose usages are not on the
+                 * class path used when running CheckGraalInvariants.
+                 */
+                return false;
+            }
+            if (option.getOptionKey().getClass().isAnonymousClass()) {
+                /*
+                 * Probably a derived option such as
+                 * org.graalvm.compiler.debug.DebugOptions.PrintGraphFile.
+                 */
+                return false;
+            }
+            return true;
+        }
     }
 
     @Test
-    @SuppressWarnings("try")
     public void test() {
         assumeManagementLibraryIsLoadable();
         runTest(new InvariantsTool());
     }
 
@@ -328,10 +360,14 @@
                 } catch (Throwable e) {
                     errors.add(String.format("Error while checking %s:%n%s", m, printStackTraceToString(e)));
                 }
             }
         }
+
+        Map<ResolvedJavaField, Set<ResolvedJavaMethod>> optionFieldUsages = initOptionFieldUsagesMap(tool, metaAccess, errors);
+        ResolvedJavaType optionDescriptorsType = metaAccess.lookupJavaType(OptionDescriptors.class);
+
         if (errors.isEmpty()) {
             // Order outer classes before the inner classes
             classNames.sort((String a, String b) -> a.compareTo(b));
             // Initialize classes in single thread to avoid deadlocking issues during initialization
             List<Class<?>> classes = initializeClasses(tool, classNames);
@@ -371,10 +407,11 @@
                                     try (DebugCloseable s = debug.disableIntercept(); DebugContext.Scope ds = debug.scope("CheckingGraph", graph, method)) {
                                         checkMethod(method);
                                         graphBuilderSuite.apply(graph, context);
                                         // update phi stamps
                                         graph.getNodes().filter(PhiNode.class).forEach(PhiNode::inferStamp);
+                                        collectOptionFieldUsages(optionFieldUsages, optionDescriptorsType, method, graph);
                                         checkGraph(verifiers, context, graph);
                                     } catch (VerificationError e) {
                                         errors.add(e.getMessage());
                                     } catch (LinkageError e) {
                                         // suppress linkages errors resulting from eager resolution
@@ -409,10 +446,13 @@
                 } catch (Throwable e) {
                     errors.add(e.getMessage());
                 }
             }
         }
+
+        checkOptionFieldUsages(errors, optionFieldUsages);
+
         if (!errors.isEmpty()) {
             StringBuilder msg = new StringBuilder();
             String nl = String.format("%n");
             for (String e : errors) {
                 if (msg.length() != 0) {
@@ -422,10 +462,56 @@
             }
             Assert.fail(msg.toString());
         }
     }
 
+    /**
+     * Initializes a map from a field annotated by {@link Option} to a set that will be used to
+     * collect methods that accesses the option field.
+     *
+     * @param tool
+     */
+    private static Map<ResolvedJavaField, Set<ResolvedJavaMethod>> initOptionFieldUsagesMap(InvariantsTool tool, MetaAccessProvider metaAccess, List<String> errors) {
+        Map<ResolvedJavaField, Set<ResolvedJavaMethod>> optionFields = new HashMap<>();
+        for (OptionDescriptors set : OptionsParser.getOptionsLoader()) {
+            for (OptionDescriptor option : set) {
+                if (tool.shouldCheckUsage(option)) {
+                    Class<?> declaringClass = option.getDeclaringClass();
+                    try {
+                        Field javaField = declaringClass.getDeclaredField(option.getFieldName());
+                        optionFields.put(metaAccess.lookupJavaField(javaField), new HashSet<>());
+                    } catch (NoSuchFieldException e) {
+                        errors.add(e.toString());
+                    }
+                }
+            }
+        }
+        return optionFields;
+    }
+
+    private static void collectOptionFieldUsages(Map<ResolvedJavaField, Set<ResolvedJavaMethod>> optionFields, ResolvedJavaType optionDescriptorsType, ResolvedJavaMethod method,
+                    StructuredGraph graph) {
+        if (!optionDescriptorsType.isAssignableFrom(method.getDeclaringClass())) {
+            for (LoadFieldNode lfn : graph.getNodes().filter(LoadFieldNode.class)) {
+
+                ResolvedJavaField field = lfn.field();
+                Set<ResolvedJavaMethod> loads = optionFields.get(field);
+                if (loads != null) {
+                    loads.add(graph.method());
+                }
+            }
+        }
+    }
+
+    private static void checkOptionFieldUsages(List<String> errors, Map<ResolvedJavaField, Set<ResolvedJavaMethod>> optionFieldUsages) {
+        for (Map.Entry<ResolvedJavaField, Set<ResolvedJavaMethod>> e : optionFieldUsages.entrySet()) {
+            if (e.getValue().isEmpty()) {
+                errors.add("No uses found for " + e.getKey().format("%H.%n"));
+            }
+        }
+    }
+
     private static boolean isInNativeImage(String className) {
         return className.startsWith("org.graalvm.nativeimage");
     }
 
     private static boolean isGSON(String className) {
