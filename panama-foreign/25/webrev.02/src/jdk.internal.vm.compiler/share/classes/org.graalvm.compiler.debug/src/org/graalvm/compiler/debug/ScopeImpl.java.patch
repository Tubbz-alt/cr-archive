diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.debug/src/org/graalvm/compiler/debug/ScopeImpl.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.debug/src/org/graalvm/compiler/debug/ScopeImpl.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.debug/src/org/graalvm/compiler/debug/ScopeImpl.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.debug/src/org/graalvm/compiler/debug/ScopeImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -145,23 +145,23 @@
     private int currentLogLevel;
 
     private PrintStream output;
     private boolean interceptDisabled;
 
-    ScopeImpl(DebugContext owner, Thread thread) {
-        this(owner, thread.getName(), null, false);
+    ScopeImpl(DebugContext owner, Thread thread, boolean interceptDisabled) {
+        this(owner, thread.getName(), null, false, interceptDisabled);
     }
 
-    private ScopeImpl(DebugContext owner, String unqualifiedName, ScopeImpl parent, boolean sandbox, Object... context) {
+    private ScopeImpl(DebugContext owner, String unqualifiedName, ScopeImpl parent, boolean sandbox, boolean interceptDisabled, Object... context) {
         this.owner = owner;
         this.parent = parent;
         this.sandbox = sandbox;
         this.context = context;
         this.unqualifiedName = unqualifiedName;
+        this.interceptDisabled = interceptDisabled;
         if (parent != null) {
             emptyScope = unqualifiedName.equals("");
-            this.interceptDisabled = parent.interceptDisabled;
         } else {
             if (unqualifiedName.isEmpty()) {
                 throw new IllegalArgumentException("root scope name must be non-empty");
             }
             emptyScope = false;
@@ -256,11 +256,11 @@
      * @return the new scope which will be exited when its {@link #close()} method is called
      */
     public ScopeImpl scope(CharSequence name, DebugConfig sandboxConfig, Object... newContextObjects) {
         ScopeImpl newScope = null;
         if (sandboxConfig != null) {
-            newScope = new ScopeImpl(owner, name.toString(), this, true, newContextObjects);
+            newScope = new ScopeImpl(owner, name.toString(), this, true, this.interceptDisabled, newContextObjects);
         } else {
             newScope = this.createChild(name.toString(), newContextObjects);
         }
         newScope.updateFlags(owner.currentConfig);
         return newScope;
@@ -374,11 +374,11 @@
         }
         return null;
     }
 
     private ScopeImpl createChild(String newName, Object[] newContext) {
-        return new ScopeImpl(owner, newName, this, false, newContext);
+        return new ScopeImpl(owner, newName, this, false, this.interceptDisabled, newContext);
     }
 
     @Override
     public Iterable<Object> getCurrentContext() {
         final ScopeImpl scope = this;
