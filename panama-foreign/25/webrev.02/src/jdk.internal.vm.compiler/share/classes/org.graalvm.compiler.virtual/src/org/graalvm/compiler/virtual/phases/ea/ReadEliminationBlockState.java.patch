diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.virtual/src/org/graalvm/compiler/virtual/phases/ea/ReadEliminationBlockState.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.virtual/src/org/graalvm/compiler/virtual/phases/ea/ReadEliminationBlockState.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.virtual/src/org/graalvm/compiler/virtual/phases/ea/ReadEliminationBlockState.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.virtual/src/org/graalvm/compiler/virtual/phases/ea/ReadEliminationBlockState.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -32,20 +32,20 @@
 import jdk.internal.vm.compiler.word.LocationIdentity;
 
 /**
  * This class maintains a set of known values, identified by base object, locations and offset.
  */
-public final class ReadEliminationBlockState extends EffectsBlockState<ReadEliminationBlockState> {
+public class ReadEliminationBlockState extends EffectsBlockState<ReadEliminationBlockState> {
 
     final EconomicMap<CacheEntry<?>, ValueNode> readCache;
 
-    abstract static class CacheEntry<T> {
+    public abstract static class CacheEntry<T> {
 
         public final ValueNode object;
         public final T identity;
 
-        CacheEntry(ValueNode object, T identity) {
+        protected CacheEntry(ValueNode object, T identity) {
             this.object = object;
             this.identity = identity;
         }
 
         public abstract CacheEntry<T> duplicateWithObject(ValueNode newObject);
@@ -68,28 +68,28 @@
         @Override
         public String toString() {
             return object + ":" + identity;
         }
 
-        public abstract boolean conflicts(LocationIdentity other);
+        public abstract boolean conflicts(LocationIdentity other, ValueNode index, ValueNode array);
 
         public abstract LocationIdentity getIdentity();
     }
 
-    static final class LoadCacheEntry extends CacheEntry<LocationIdentity> {
+    public static final class LoadCacheEntry extends CacheEntry<LocationIdentity> {
 
-        LoadCacheEntry(ValueNode object, LocationIdentity identity) {
+        public LoadCacheEntry(ValueNode object, LocationIdentity identity) {
             super(object, identity);
         }
 
         @Override
         public CacheEntry<LocationIdentity> duplicateWithObject(ValueNode newObject) {
             return new LoadCacheEntry(newObject, identity);
         }
 
         @Override
-        public boolean conflicts(LocationIdentity other) {
+        public boolean conflicts(LocationIdentity other, ValueNode index, ValueNode array) {
             return identity.equals(other);
         }
 
         @Override
         public LocationIdentity getIdentity() {
@@ -100,15 +100,15 @@
     /**
      * CacheEntry describing an Unsafe memory reference. The memory location and the location
      * identity are separate so both must be considered when looking for optimizable memory
      * accesses.
      */
-    static final class UnsafeLoadCacheEntry extends CacheEntry<ValueNode> {
+    public static final class UnsafeLoadCacheEntry extends CacheEntry<ValueNode> {
 
         private final LocationIdentity locationIdentity;
 
-        UnsafeLoadCacheEntry(ValueNode object, ValueNode location, LocationIdentity locationIdentity) {
+        public UnsafeLoadCacheEntry(ValueNode object, ValueNode location, LocationIdentity locationIdentity) {
             super(object, location);
             assert locationIdentity != null;
             this.locationIdentity = locationIdentity;
         }
 
@@ -116,11 +116,11 @@
         public CacheEntry<ValueNode> duplicateWithObject(ValueNode newObject) {
             return new UnsafeLoadCacheEntry(newObject, identity, locationIdentity);
         }
 
         @Override
-        public boolean conflicts(LocationIdentity other) {
+        public boolean conflicts(LocationIdentity other, ValueNode index, ValueNode array) {
             return locationIdentity.equals(other);
         }
 
         @Override
         public int hashCode() {
@@ -172,19 +172,27 @@
 
     public ValueNode getCacheEntry(CacheEntry<?> identifier) {
         return readCache.get(identifier);
     }
 
-    public void killReadCache() {
-        readCache.clear();
-    }
-
-    public void killReadCache(LocationIdentity identity) {
+    public void killReadCache(LocationIdentity identity, ValueNode index, ValueNode array) {
+        if (identity.isAny()) {
+            // ANY aliases with every other location
+            readCache.clear();
+            return;
+        }
         Iterator<CacheEntry<?>> iterator = readCache.getKeys().iterator();
         while (iterator.hasNext()) {
             CacheEntry<?> entry = iterator.next();
-            if (entry.conflicts(identity)) {
+            /*
+             * We cover multiple cases here but in general index and array can only be !=null for
+             * indexed nodes thus the location identity of other accesses (field and object
+             * locations) will never be the same and will never alias with array accesses.
+             *
+             * Unsafe accesses will alias if they are writing to any location.
+             */
+            if (entry.conflicts(identity, index, array)) {
                 iterator.remove();
             }
         }
     }
 
