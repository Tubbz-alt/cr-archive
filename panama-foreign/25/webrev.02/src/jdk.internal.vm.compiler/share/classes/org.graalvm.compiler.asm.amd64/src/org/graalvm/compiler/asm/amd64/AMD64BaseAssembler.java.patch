diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.amd64/src/org/graalvm/compiler/asm/amd64/AMD64BaseAssembler.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.amd64/src/org/graalvm/compiler/asm/amd64/AMD64BaseAssembler.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.amd64/src/org/graalvm/compiler/asm/amd64/AMD64BaseAssembler.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.amd64/src/org/graalvm/compiler/asm/amd64/AMD64BaseAssembler.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -289,24 +289,30 @@
 
     protected final void rexw() {
         emitByte(Prefix.REXW);
     }
 
+    private static boolean isInvalidEncoding(Register reg) {
+        return Register.None.equals(reg) || AMD64.rip.equals(reg);
+    }
+
     protected final void prefix(Register reg) {
         prefix(reg, false);
     }
 
     protected final void prefix(Register reg, boolean byteinst) {
+        assert !isInvalidEncoding(reg);
         int regEnc = reg.encoding;
         if (regEnc >= 8) {
             emitByte(Prefix.REXB);
         } else if (byteinst && regEnc >= 4) {
             emitByte(Prefix.REX);
         }
     }
 
     protected final void prefixq(Register reg) {
+        assert !isInvalidEncoding(reg);
         if (reg.encoding < 8) {
             emitByte(Prefix.REXW);
         } else {
             emitByte(Prefix.REXWB);
         }
@@ -315,10 +321,11 @@
     protected final void prefix(Register dst, Register src) {
         prefix(dst, false, src, false);
     }
 
     protected final void prefix(Register dst, boolean dstIsByte, Register src, boolean srcIsByte) {
+        assert !isInvalidEncoding(dst) && !isInvalidEncoding(src);
         int dstEnc = dst.encoding;
         int srcEnc = src.encoding;
         if (dstEnc < 8) {
             if (srcEnc >= 8) {
                 emitByte(Prefix.REXB);
@@ -337,10 +344,11 @@
     /**
      * Creates prefix for the operands. If the given operands exceed 3 bits, the 4th bit is encoded
      * in the prefix.
      */
     protected final void prefixq(Register reg, Register rm) {
+        assert !isInvalidEncoding(reg) && !isInvalidEncoding(rm);
         int regEnc = reg.encoding;
         int rmEnc = rm.encoding;
         if (regEnc < 8) {
             if (rmEnc < 8) {
                 emitByte(Prefix.REXW);
@@ -354,14 +362,19 @@
                 emitByte(Prefix.REXWRB);
             }
         }
     }
 
-    private static boolean needsRex(Register reg) {
+    protected static boolean needsRex(Register reg) {
+        // rip is excluded implicitly.
         return reg.encoding >= MinEncodingNeedsRex;
     }
 
+    protected static boolean needsRex(Register src, boolean srcIsByte) {
+        return srcIsByte ? src.encoding >= 4 : needsRex(src);
+    }
+
     protected final void prefix(AMD64Address adr) {
         if (needsRex(adr.getBase())) {
             if (needsRex(adr.getIndex())) {
                 emitByte(Prefix.REXXB);
             } else {
@@ -397,10 +410,11 @@
     protected void prefix(AMD64Address adr, Register reg) {
         prefix(adr, reg, false);
     }
 
     protected void prefix(AMD64Address adr, Register reg, boolean byteinst) {
+        assert !isInvalidEncoding(reg);
         if (reg.encoding < 8) {
             if (needsRex(adr.getBase())) {
                 if (needsRex(adr.getIndex())) {
                     emitByte(Prefix.REXXB);
                 } else {
@@ -429,10 +443,11 @@
             }
         }
     }
 
     protected void prefixq(AMD64Address adr, Register src) {
+        assert !isInvalidEncoding(src);
         if (src.encoding < 8) {
             if (needsRex(adr.getBase())) {
                 if (needsRex(adr.getIndex())) {
                     emitByte(Prefix.REXWXB);
                 } else {
@@ -466,10 +481,11 @@
      * Get RXB bits for register-register instruction. In that encoding, ModRM.rm contains a
      * register index. The R bit extends the ModRM.reg field and the B bit extends the ModRM.rm
      * field. The X bit must be 0.
      */
     protected static int getRXB(Register reg, Register rm) {
+        assert !isInvalidEncoding(rm) && !isInvalidEncoding(reg);
         int rxb = (reg == null ? 0 : reg.encoding & 0x08) >> 1;
         rxb |= (rm == null ? 0 : rm.encoding & 0x08) >> 3;
         return rxb;
     }
 
@@ -479,15 +495,16 @@
      * ModRM.rm contains the base register: In that case, B extends the ModRM.rm field and X = 0.
      * <br>
      * There is an SIB byte: In that case, X extends SIB.index and B extends SIB.base.
      */
     protected static int getRXB(Register reg, AMD64Address rm) {
+        assert !isInvalidEncoding(reg);
         int rxb = (reg == null ? 0 : reg.encoding & 0x08) >> 1;
-        if (!rm.getIndex().equals(Register.None)) {
+        if (!isInvalidEncoding(rm.getIndex())) {
             rxb |= (rm.getIndex().encoding & 0x08) >> 2;
         }
-        if (!rm.getBase().equals(Register.None)) {
+        if (!isInvalidEncoding(rm.getBase())) {
             rxb |= (rm.getBase().encoding & 0x08) >> 3;
         }
         return rxb;
     }
 
@@ -496,19 +513,21 @@
      * <p>
      * Format: [ 11 reg r/m ]
      */
     protected final void emitModRM(int reg, Register rm) {
         assert (reg & 0x07) == reg;
+        assert !isInvalidEncoding(rm);
         emitByte(0xC0 | (reg << 3) | (rm.encoding & 0x07));
     }
 
     /**
      * Emit the ModR/M byte for two register operands.
      * <p>
      * Format: [ 11 reg r/m ]
      */
     protected final void emitModRM(Register reg, Register rm) {
+        assert !isInvalidEncoding(reg);
         emitModRM(reg.encoding & 0x07, rm);
     }
 
     public static final int DEFAULT_DISP8_SCALE = 1;
 
@@ -516,25 +535,25 @@
      * Emits the ModR/M byte and optionally the SIB byte for one register and one memory operand.
      *
      * @param force4Byte use 4 byte encoding for displacements that would normally fit in a byte
      */
     protected final void emitOperandHelper(Register reg, AMD64Address addr, boolean force4Byte, int additionalInstructionSize) {
-        assert !reg.equals(Register.None);
+        assert !isInvalidEncoding(reg);
         emitOperandHelper(encode(reg), addr, force4Byte, additionalInstructionSize, DEFAULT_DISP8_SCALE);
     }
 
     protected final void emitOperandHelper(int reg, AMD64Address addr, int additionalInstructionSize) {
         emitOperandHelper(reg, addr, false, additionalInstructionSize, DEFAULT_DISP8_SCALE);
     }
 
     protected final void emitOperandHelper(Register reg, AMD64Address addr, int additionalInstructionSize) {
-        assert !reg.equals(Register.None);
+        assert !isInvalidEncoding(reg);
         emitOperandHelper(encode(reg), addr, false, additionalInstructionSize, DEFAULT_DISP8_SCALE);
     }
 
     protected final void emitOperandHelper(Register reg, AMD64Address addr, int additionalInstructionSize, int evexDisp8Scale) {
-        assert !reg.equals(Register.None);
+        assert !isInvalidEncoding(reg);
         emitOperandHelper(encode(reg), addr, false, additionalInstructionSize, evexDisp8Scale);
     }
 
     /**
      * Emits the ModR/M byte and optionally the SIB byte for one memory operand and an opcode
@@ -557,11 +576,11 @@
 
         Scale scale = addr.getScale();
         int disp = addr.getDisplacement();
 
         if (base.equals(AMD64.rip)) { // also matches addresses returned by getPlaceholder()
-            // [00 000 101] disp32
+            // [00 reg 101] disp32
             assert index.equals(Register.None) : "cannot use RIP relative addressing with index register";
             emitByte(0x05 | regenc);
             if (codePatchingAnnotationConsumer != null && addr.instructionStartPosition >= 0) {
                 codePatchingAnnotationConsumer.accept(new OperandDataAnnotation(addr.instructionStartPosition, position(), 4, position() + 4 + additionalInstructionSize));
             }
@@ -1035,10 +1054,21 @@
                     throw GraalError.shouldNotReachHere("Unsupported vector size.");
             }
         }
     }
 
+    public static final class EVEXComparisonPredicate {
+        public static final int EQ = 0;
+        public static final int LT = 1;
+        public static final int LE = 2;
+        public static final int FALSE = 3;
+        public static final int NEQ = 4;
+        public static final int NLT = 5;
+        public static final int NLE = 6;
+        public static final int TRUE = 7;
+    }
+
  // @formatter:off
  //
  // Instruction Format and EVEX illustrated below (optional []):
  //
  // #of bytes:      4       1       1       1       1,2,4       1
