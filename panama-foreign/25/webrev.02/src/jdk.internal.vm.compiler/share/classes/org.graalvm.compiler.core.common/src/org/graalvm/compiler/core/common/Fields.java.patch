diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/Fields.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/Fields.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/Fields.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/Fields.java
@@ -25,10 +25,11 @@
 package org.graalvm.compiler.core.common;
 
 import static org.graalvm.compiler.serviceprovider.GraalUnsafeAccess.getUnsafe;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 
 import org.graalvm.compiler.debug.GraalError;
 
 import sun.misc.Unsafe;
@@ -144,15 +145,46 @@
                 } else {
                     assert false : "unhandled property type: " + type;
                 }
             } else {
                 Object obj = UNSAFE.getObject(from, offset);
+                if (obj != null && type.isArray()) {
+                    if (type.getComponentType().isPrimitive()) {
+                        obj = copyObjectAsArray(obj);
+                    } else {
+                        obj = ((Object[]) obj).clone();
+                    }
+                }
                 UNSAFE.putObject(to, offset, trans == null ? obj : trans.apply(index, obj));
             }
         }
     }
 
+    private static Object copyObjectAsArray(Object obj) {
+        Object objCopy;
+        if (obj instanceof int[]) {
+            objCopy = Arrays.copyOf((int[]) obj, ((int[]) obj).length);
+        } else if (obj instanceof short[]) {
+            objCopy = Arrays.copyOf((short[]) obj, ((short[]) obj).length);
+        } else if (obj instanceof long[]) {
+            objCopy = Arrays.copyOf((long[]) obj, ((long[]) obj).length);
+        } else if (obj instanceof float[]) {
+            objCopy = Arrays.copyOf((float[]) obj, ((float[]) obj).length);
+        } else if (obj instanceof double[]) {
+            objCopy = Arrays.copyOf((double[]) obj, ((double[]) obj).length);
+        } else if (obj instanceof boolean[]) {
+            objCopy = Arrays.copyOf((boolean[]) obj, ((boolean[]) obj).length);
+        } else if (obj instanceof byte[]) {
+            objCopy = Arrays.copyOf((byte[]) obj, ((byte[]) obj).length);
+        } else if (obj instanceof char[]) {
+            objCopy = Arrays.copyOf((char[]) obj, ((char[]) obj).length);
+        } else {
+            throw GraalError.shouldNotReachHere();
+        }
+        return objCopy;
+    }
+
     /**
      * Gets the value of a field for a given object.
      *
      * @param object the object whose field is to be read
      * @param index the index of the field (between 0 and {@link #getCount()})
