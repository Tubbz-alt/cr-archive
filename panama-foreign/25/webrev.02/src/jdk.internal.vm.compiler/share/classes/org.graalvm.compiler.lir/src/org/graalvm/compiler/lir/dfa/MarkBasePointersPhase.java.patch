diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/dfa/MarkBasePointersPhase.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/dfa/MarkBasePointersPhase.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/dfa/MarkBasePointersPhase.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/dfa/MarkBasePointersPhase.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -37,10 +37,15 @@
 
 import jdk.vm.ci.code.TargetDescription;
 import jdk.vm.ci.meta.Value;
 import jdk.vm.ci.meta.ValueKind;
 
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
 /**
  * Record all derived reference base pointers in a frame state.
  */
 public final class MarkBasePointersPhase extends AllocationPhase {
 
@@ -52,57 +57,144 @@
     private static final class Marker extends LocationMarker<Marker.BasePointersSet> {
 
         private final class BasePointersSet extends ValueSet<Marker.BasePointersSet> {
 
             private final IndexedValueMap variables;
+            private final Map<Integer, Set<Value>> baseDerivedRefs;
 
             BasePointersSet() {
                 variables = new IndexedValueMap();
+                baseDerivedRefs = new HashMap<>();
             }
 
-            private BasePointersSet(BasePointersSet s) {
-                variables = new IndexedValueMap(s.variables);
+            private BasePointersSet(BasePointersSet other) {
+                variables = new IndexedValueMap(other.variables);
+                // Deep copy.
+                baseDerivedRefs = new HashMap<>(other.baseDerivedRefs.size());
+                for (Map.Entry<Integer, Set<Value>> entry : other.baseDerivedRefs.entrySet()) {
+                    Set<Value> s = new HashSet<>(entry.getValue());
+                    baseDerivedRefs.put(entry.getKey(), s);
+                }
             }
 
             @Override
             public Marker.BasePointersSet copy() {
                 return new BasePointersSet(this);
             }
 
+            // Verify that there is no base includes derivedRef already.
+            // The single derivedRef maps to multiple bases case can not happen.
+            private boolean verifyDerivedRefs(Value derivedRef, int base) {
+                for (Map.Entry<Integer, Set<Value>> entry : baseDerivedRefs.entrySet()) {
+                    Set<Value> s = entry.getValue();
+                    if (s.contains(derivedRef) && base != entry.getKey()) {
+                        return false;
+                    }
+                }
+                return true;
+            }
+
             @Override
             public void put(Value v) {
                 Variable base = (Variable) v.getValueKind(LIRKind.class).getDerivedReferenceBase();
                 assert !base.getValueKind(LIRKind.class).isValue();
                 variables.put(base.index, base);
+
+                Set<Value> derivedRefs = baseDerivedRefs.get(base.index);
+                assert verifyDerivedRefs(v, base.index);
+                if (derivedRefs == null) {
+                    HashSet<Value> s = new HashSet<>();
+                    s.add(v);
+                    baseDerivedRefs.put(base.index, s);
+                } else {
+                    derivedRefs.add(v);
+                }
             }
 
             @Override
             public void putAll(BasePointersSet v) {
                 variables.putAll(v.variables);
+
+                for (Map.Entry<Integer, Set<Value>> entry : v.baseDerivedRefs.entrySet()) {
+                    Integer k = entry.getKey();
+                    Set<Value> derivedRefsOther = entry.getValue();
+                    Set<Value> derivedRefs = baseDerivedRefs.get(k);
+                    if (derivedRefs == null) {
+                        // Deep copy.
+                        Set<Value> s = new HashSet<>(derivedRefsOther);
+                        baseDerivedRefs.put(k, s);
+                    } else {
+                        derivedRefs.addAll(derivedRefsOther);
+                    }
+                }
             }
 
             @Override
             public void remove(Value v) {
                 Variable base = (Variable) v.getValueKind(LIRKind.class).getDerivedReferenceBase();
                 assert !base.getValueKind(LIRKind.class).isValue();
-                variables.put(base.index, null);
+                Set<Value> derivedRefs = baseDerivedRefs.get(base.index);
+                // Just mark the base pointer as null if no derived references exist.
+                if (derivedRefs == null) {
+                    variables.put(base.index, null);
+                    return;
+                }
+
+                // Remove the value from the derived reference set if the set exists.
+                if (derivedRefs.contains(v)) {
+                    derivedRefs.remove(v);
+                    if (derivedRefs.isEmpty()) {
+                        variables.put(base.index, null);
+                        baseDerivedRefs.remove(base.index);
+                    }
+                }
             }
 
             @Override
             public boolean equals(Object obj) {
                 if (obj instanceof Marker.BasePointersSet) {
                     BasePointersSet other = (BasePointersSet) obj;
-                    return variables.equals(other.variables);
+                    return variables.equals(other.variables) && baseDerivedRefs.equals(other.baseDerivedRefs);
                 } else {
                     return false;
                 }
             }
 
             @Override
             public int hashCode() {
                 throw new UnsupportedOperationException();
             }
+
+            @Override
+            public String toString() {
+                StringBuilder sb = new StringBuilder();
+                sb.append("[BasePointersSet] variables: ");
+                sb.append(variables.toString());
+                sb.append(" baseDerivedRefs map: {");
+
+                boolean mapHaveElement = false;
+                for (Map.Entry<Integer, Set<Value>> entry : baseDerivedRefs.entrySet()) {
+                    sb.append(entry.getKey());
+                    sb.append(": (");
+
+                    boolean setHaveElement = false;
+                    for (Value v : entry.getValue()) {
+                        sb.append(v + ",");
+                        setHaveElement = true;
+                    }
+                    if (setHaveElement) {
+                        sb.deleteCharAt(sb.length() - 1);
+                    }
+                    sb.append("),");
+                    mapHaveElement = true;
+                }
+                if (mapHaveElement) {
+                    sb.deleteCharAt(sb.length() - 1);
+                }
+                sb.append("}");
+                return sb.toString();
+            }
         }
 
         private Marker(LIR lir, FrameMap frameMap) {
             super(lir, frameMap);
         }
