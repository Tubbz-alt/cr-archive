diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64MathLogOp.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64MathLogOp.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64MathLogOp.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64MathLogOp.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2016, Intel Corporation. All rights reserved.
  * Intel Math Library (LIBM) Source Code
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -44,10 +44,11 @@
 import static org.graalvm.compiler.lir.amd64.AMD64HotSpotHelper.recordExternalAddress;
 
 import org.graalvm.compiler.asm.Label;
 import org.graalvm.compiler.asm.amd64.AMD64Address;
 import org.graalvm.compiler.asm.amd64.AMD64Assembler;
+import org.graalvm.compiler.asm.amd64.AMD64Assembler.ConditionFlag;
 import org.graalvm.compiler.asm.amd64.AMD64MacroAssembler;
 import org.graalvm.compiler.lir.LIRInstructionClass;
 import org.graalvm.compiler.lir.asm.ArrayDataPointerConstant;
 import org.graalvm.compiler.lir.asm.CompilationResultBuilder;
 
@@ -254,12 +255,11 @@
         masm.rcpps(xmm0, xmm0);
         masm.psllq(xmm1, 12);
         masm.pshufd(xmm6, xmm5, 228);
         masm.psrlq(xmm1, 12);
         masm.subl(rax, 16);
-        masm.cmpl(rax, 32736);
-        masm.jcc(AMD64Assembler.ConditionFlag.AboveEqual, block0);
+        masm.cmplAndJcc(rax, 32736, ConditionFlag.AboveEqual, block0, false);
 
         masm.bind(block1);
         masm.paddd(xmm0, xmm4);
         masm.por(xmm1, xmm3);
         masm.movdl(rdx, xmm0);
@@ -322,34 +322,30 @@
 
         masm.bind(block0);
         masm.movq(xmm0, new AMD64Address(rsp, 0));
         masm.movq(xmm1, new AMD64Address(rsp, 0));
         masm.addl(rax, 16);
-        masm.cmpl(rax, 32768);
-        masm.jcc(AMD64Assembler.ConditionFlag.AboveEqual, block2);
-        masm.cmpl(rax, 16);
-        masm.jcc(AMD64Assembler.ConditionFlag.Below, block3);
+        masm.cmplAndJcc(rax, 32768, ConditionFlag.AboveEqual, block2, false);
+        masm.cmplAndJcc(rax, 16, ConditionFlag.Below, block3, false);
 
         masm.bind(block4);
         masm.addsd(xmm0, xmm0);
         masm.jmp(block9);
 
         masm.bind(block5);
         masm.jcc(AMD64Assembler.ConditionFlag.Above, block4);
-        masm.cmpl(rdx, 0);
-        masm.jcc(AMD64Assembler.ConditionFlag.Above, block4);
+        masm.cmplAndJcc(rdx, 0, ConditionFlag.Above, block4, false);
         masm.jmp(block6);
 
         masm.bind(block3);
         masm.xorpd(xmm1, xmm1);
         masm.addsd(xmm1, xmm0);
         masm.movdl(rdx, xmm1);
         masm.psrlq(xmm1, 32);
         masm.movdl(rcx, xmm1);
         masm.orl(rdx, rcx);
-        masm.cmpl(rdx, 0);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block7);
+        masm.cmplAndJcc(rdx, 0, ConditionFlag.Equal, block7, false);
         masm.xorpd(xmm1, xmm1);
         masm.movl(rax, 18416);
         masm.pinsrw(xmm1, rax, 3);
         masm.mulsd(xmm0, xmm1);
         masm.movdqu(xmm1, xmm0);
@@ -367,15 +363,13 @@
         masm.bind(block2);
         masm.movdl(rdx, xmm1);
         masm.psrlq(xmm1, 32);
         masm.movdl(rcx, xmm1);
         masm.addl(rcx, rcx);
-        masm.cmpl(rcx, -2097152);
-        masm.jcc(AMD64Assembler.ConditionFlag.AboveEqual, block5);
+        masm.cmplAndJcc(rcx, -2097152, ConditionFlag.AboveEqual, block5, false);
         masm.orl(rdx, rcx);
-        masm.cmpl(rdx, 0);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block7);
+        masm.cmplAndJcc(rdx, 0, ConditionFlag.Equal, block7, false);
 
         masm.bind(block6);
         masm.xorpd(xmm1, xmm1);
         masm.xorpd(xmm0, xmm0);
         masm.movl(rax, 32752);
