diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64ArrayEqualsOp.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64ArrayEqualsOp.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64ArrayEqualsOp.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64ArrayEqualsOp.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -256,12 +256,11 @@
         Label loopCheck = new Label();
         Label nanCheck = new Label();
 
         // Compare 16-byte vectors
         masm.andl(result, elementsPerVector - 1); // tail count
-        masm.andl(length, ~(elementsPerVector - 1)); // vector count
-        masm.jcc(ConditionFlag.Zero, compareTail);
+        masm.andlAndJcc(length, ~(elementsPerVector - 1), ConditionFlag.Zero, compareTail, false);
 
         masm.leaq(array1, new AMD64Address(array1, length, arrayIndexScale1, 0));
         masm.leaq(array2, new AMD64Address(array2, length, arrayIndexScale2, 0));
         masm.negq(length);
 
@@ -272,15 +271,13 @@
         emitVectorLoad2(masm, vector2, array2, length, 0, vectorSize);
         emitVectorCmp(masm, vector1, vector2, vectorSize);
         masm.jcc(ConditionFlag.NotZero, requiresNaNCheck ? nanCheck : falseLabel);
 
         masm.bind(loopCheck);
-        masm.addq(length, elementsPerVector);
-        masm.jcc(ConditionFlag.NotZero, loop);
+        masm.addqAndJcc(length, elementsPerVector, ConditionFlag.NotZero, loop, false);
 
-        masm.testl(result, result);
-        masm.jcc(ConditionFlag.Zero, trueLabel);
+        masm.testlAndJcc(result, result, ConditionFlag.Zero, trueLabel, false);
 
         if (requiresNaNCheck) {
             Label unalignedCheck = new Label();
             masm.jmpb(unalignedCheck);
             masm.bind(nanCheck);
@@ -484,30 +481,26 @@
         Label nanCheck = new Label();
 
         Register temp = asRegister(temp4);
 
         masm.andl(result, elementsPerVector - 1); // tail count
-        masm.andl(length, ~(elementsPerVector - 1));  // vector count
-        masm.jcc(ConditionFlag.Zero, compareTail);
+        masm.andlAndJcc(length, ~(elementsPerVector - 1), ConditionFlag.Zero, compareTail, false);
 
         masm.leaq(array1, new AMD64Address(array1, length, arrayIndexScale1, 0));
         masm.leaq(array2, new AMD64Address(array2, length, arrayIndexScale2, 0));
         masm.negq(length);
 
         // Align the main loop
         masm.align(crb.target.wordSize * 2);
         masm.bind(loop);
         masm.movq(temp, new AMD64Address(array1, length, arrayIndexScale1, 0));
-        masm.cmpq(temp, new AMD64Address(array2, length, arrayIndexScale2, 0));
-        masm.jcc(ConditionFlag.NotEqual, requiresNaNCheck ? nanCheck : falseLabel);
+        masm.cmpqAndJcc(temp, new AMD64Address(array2, length, arrayIndexScale2, 0), ConditionFlag.NotEqual, requiresNaNCheck ? nanCheck : falseLabel, false);
 
         masm.bind(loopCheck);
-        masm.addq(length, elementsPerVector);
-        masm.jccb(ConditionFlag.NotZero, loop);
+        masm.addqAndJcc(length, elementsPerVector, ConditionFlag.NotZero, loop, true);
 
-        masm.testl(result, result);
-        masm.jcc(ConditionFlag.Zero, trueLabel);
+        masm.testlAndJcc(result, result, ConditionFlag.Zero, trueLabel, false);
 
         if (requiresNaNCheck) {
             // NaN check is slow path and hence placed outside of the main loop.
             Label unalignedCheck = new Label();
             masm.jmpb(unalignedCheck);
@@ -523,19 +516,18 @@
         /*
          * Compare the remaining bytes with an unaligned memory load aligned to the end of the
          * array.
          */
         masm.movq(temp, new AMD64Address(array1, result, arrayIndexScale1, -VECTOR_SIZE));
-        masm.cmpq(temp, new AMD64Address(array2, result, arrayIndexScale2, -VECTOR_SIZE));
         if (requiresNaNCheck) {
-            masm.jcc(ConditionFlag.Equal, trueLabel);
+            masm.cmpqAndJcc(temp, new AMD64Address(array2, result, arrayIndexScale2, -VECTOR_SIZE), ConditionFlag.Equal, trueLabel, false);
             // At most two iterations, unroll in the emitted code.
             for (int offset = 0; offset < VECTOR_SIZE; offset += kind1.getByteCount()) {
                 emitFloatCompare(masm, array1, array2, result, -VECTOR_SIZE + offset, falseLabel, kind1.getByteCount() == VECTOR_SIZE);
             }
         } else {
-            masm.jccb(ConditionFlag.NotEqual, falseLabel);
+            masm.cmpqAndJcc(temp, new AMD64Address(array2, result, arrayIndexScale2, -VECTOR_SIZE), ConditionFlag.NotEqual, falseLabel, true);
         }
         masm.jmpb(trueLabel);
 
         masm.bind(compareTail);
         masm.movl(length, result);
@@ -552,49 +544,44 @@
 
         Register temp = asRegister(temp4);
 
         if (kind1.getByteCount() <= 4) {
             // Compare trailing 4 bytes, if any.
-            masm.testl(result, arrayIndexScale1.log2 == 0 ? 4 : 4 >> arrayIndexScale1.log2);
-            masm.jccb(ConditionFlag.Zero, compare2Bytes);
+            masm.testlAndJcc(result, arrayIndexScale1.log2 == 0 ? 4 : 4 >> arrayIndexScale1.log2, ConditionFlag.Zero, compare2Bytes, true);
             masm.movl(temp, new AMD64Address(array1, 0));
-            masm.cmpl(temp, new AMD64Address(array2, 0));
             if (kind1 == JavaKind.Float) {
-                masm.jccb(ConditionFlag.Equal, trueLabel);
+                masm.cmplAndJcc(temp, new AMD64Address(array2, 0), ConditionFlag.Equal, trueLabel, true);
                 emitFloatCompare(masm, array1, array2, Register.None, 0, falseLabel, true);
                 masm.jmpb(trueLabel);
             } else {
-                masm.jccb(ConditionFlag.NotEqual, falseLabel);
+                masm.cmplAndJcc(temp, new AMD64Address(array2, 0), ConditionFlag.NotEqual, falseLabel, true);
             }
             if (kind1.getByteCount() <= 2) {
                 // Move array pointers forward.
                 masm.leaq(array1, new AMD64Address(array1, 4));
                 masm.leaq(array2, new AMD64Address(array2, 4));
 
                 // Compare trailing 2 bytes, if any.
                 masm.bind(compare2Bytes);
-                masm.testl(result, arrayIndexScale1.log2 == 0 ? 2 : 2 >> arrayIndexScale1.log2);
-                masm.jccb(ConditionFlag.Zero, compare1Byte);
+                masm.testlAndJcc(result, arrayIndexScale1.log2 == 0 ? 2 : 2 >> arrayIndexScale1.log2, ConditionFlag.Zero, compare1Byte, true);
                 masm.movzwl(temp, new AMD64Address(array1, 0));
                 masm.movzwl(length, new AMD64Address(array2, 0));
-                masm.cmpl(temp, length);
-                masm.jccb(ConditionFlag.NotEqual, falseLabel);
+                masm.cmplAndJcc(temp, length, ConditionFlag.NotEqual, falseLabel, true);
 
                 // The one-byte tail compare is only required for boolean and byte arrays.
                 if (kind1.getByteCount() <= 1) {
                     // Move array pointers forward before we compare the last trailing byte.
                     masm.leaq(array1, new AMD64Address(array1, 2));
                     masm.leaq(array2, new AMD64Address(array2, 2));
 
                     // Compare trailing byte, if any.
+                    // TODO (yz) this can be optimized, i.e., bind after padding
                     masm.bind(compare1Byte);
-                    masm.testl(result, 1);
-                    masm.jccb(ConditionFlag.Zero, trueLabel);
+                    masm.testlAndJcc(result, 1, ConditionFlag.Zero, trueLabel, true);
                     masm.movzbl(temp, new AMD64Address(array1, 0));
                     masm.movzbl(length, new AMD64Address(array2, 0));
-                    masm.cmpl(temp, length);
-                    masm.jccb(ConditionFlag.NotEqual, falseLabel);
+                    masm.cmplAndJcc(temp, length, ConditionFlag.NotEqual, falseLabel, true);
                 } else {
                     masm.bind(compare1Byte);
                 }
             } else {
                 masm.bind(compare2Bytes);
@@ -613,12 +600,11 @@
 
         Register tmp1 = asRegister(temp4);
         Register tmp2 = asRegister(temp5);
 
         masm.andl(result, elementsPerLoopIteration - 1); // tail count
-        masm.andl(length, ~(elementsPerLoopIteration - 1));  // bulk loop count
-        masm.jcc(ConditionFlag.Zero, compareTail);
+        masm.andlAndJcc(length, ~(elementsPerLoopIteration - 1), ConditionFlag.Zero, compareTail, false);
 
         masm.leaq(array1, new AMD64Address(array1, length, arrayIndexScale1, 0));
         masm.leaq(array2, new AMD64Address(array2, length, arrayIndexScale2, 0));
         masm.negq(length);
 
@@ -630,28 +616,23 @@
         masm.align(crb.target.wordSize * 2);
         masm.bind(loop);
         for (int i = 0; i < elementsPerLoopIteration; i++) {
             emitMovBytes(masm, tmp1, new AMD64Address(array1, length, arrayIndexScale1, i << arrayIndexScale1.log2), kind1.getByteCount());
             emitMovBytes(masm, tmp2, new AMD64Address(array2, length, arrayIndexScale2, i << arrayIndexScale2.log2), kind2.getByteCount());
-            masm.cmpq(tmp1, tmp2);
-            masm.jcc(ConditionFlag.NotEqual, falseLabel);
+            masm.cmpqAndJcc(tmp1, tmp2, ConditionFlag.NotEqual, falseLabel, false);
         }
-        masm.addq(length, elementsPerLoopIteration);
-        masm.jccb(ConditionFlag.NotZero, loop);
+        masm.addqAndJcc(length, elementsPerLoopIteration, ConditionFlag.NotZero, loop, true);
 
         masm.bind(compareTail);
-        masm.testl(result, result);
-        masm.jcc(ConditionFlag.Zero, trueLabel);
+        masm.testlAndJcc(result, result, ConditionFlag.Zero, trueLabel, false);
         for (int i = 0; i < elementsPerLoopIteration - 1; i++) {
             emitMovBytes(masm, tmp1, new AMD64Address(array1, length, arrayIndexScale1, 0), kind1.getByteCount());
             emitMovBytes(masm, tmp2, new AMD64Address(array2, length, arrayIndexScale2, 0), kind2.getByteCount());
-            masm.cmpq(tmp1, tmp2);
-            masm.jcc(ConditionFlag.NotEqual, falseLabel);
+            masm.cmpqAndJcc(tmp1, tmp2, ConditionFlag.NotEqual, falseLabel, false);
             if (i < elementsPerLoopIteration - 2) {
                 masm.incrementq(length, 1);
-                masm.decrementq(result, 1);
-                masm.jcc(ConditionFlag.Zero, trueLabel);
+                masm.decqAndJcc(result, ConditionFlag.Zero, trueLabel, false);
             } else {
                 masm.jmpb(trueLabel);
             }
         }
     }
@@ -685,16 +666,15 @@
             // Bitwise compare
             Register temp = asRegister(temp4);
 
             if (kind1 == JavaKind.Float) {
                 masm.movl(temp, address1);
-                masm.cmpl(temp, address2);
+                masm.cmplAndJcc(temp, address2, ConditionFlag.Equal, bitwiseEqual, true);
             } else {
                 masm.movq(temp, address1);
-                masm.cmpq(temp, address2);
+                masm.cmpqAndJcc(temp, address2, ConditionFlag.Equal, bitwiseEqual, true);
             }
-            masm.jccb(ConditionFlag.Equal, bitwiseEqual);
         }
 
         emitNaNCheck(masm, address1, falseLabel);
         emitNaNCheck(masm, address2, falseLabel);
 
@@ -715,12 +695,11 @@
         // Align the main loop
         masm.align(crb.target.wordSize * 2);
         masm.bind(loop);
         emitFloatCompare(masm, base1, base2, index, offset, falseLabel, range == 1);
         masm.incrementq(index, 1);
-        masm.incrementq(i, 1);
-        masm.jccb(ConditionFlag.NotZero, loop);
+        masm.incqAndJcc(i, ConditionFlag.NotZero, loop, true);
         // Floats within the range are equal, revert change to the register index
         masm.subq(index, range);
     }
 
     private boolean constantLengthCompareNeedsTmpArrayPointers() {
@@ -791,12 +770,11 @@
                 emitVectorXor(asm, tmpVectors[2], tmpVectors[3], vSize);
                 emitVectorTest(asm, tmpVectors[0], vSize);
                 asm.jccb(AMD64Assembler.ConditionFlag.NotZero, noMatch);
                 emitVectorTest(asm, tmpVectors[2], vSize);
                 asm.jccb(AMD64Assembler.ConditionFlag.NotZero, noMatch);
-                asm.addq(tmp, elementsPerVectorLoop);
-                asm.jccb(AMD64Assembler.ConditionFlag.NotZero, loopBegin);
+                asm.addqAndJcc(tmp, elementsPerVectorLoop, AMD64Assembler.ConditionFlag.NotZero, loopBegin, true);
             }
             if (tailCount > 0) {
                 emitVectorLoad1(asm, tmpVectors[0], arrayPtr1, arrayBaseOffset1 + (tailCount << arrayIndexScale1.log2) - scaleDisplacement1(bytesPerVector), vSize);
                 emitVectorLoad2(asm, tmpVectors[1], arrayPtr2, arrayBaseOffset2 + (tailCount << arrayIndexScale2.log2) - scaleDisplacement2(bytesPerVector), vSize);
                 emitVectorXor(asm, tmpVectors[0], tmpVectors[1], vSize);
