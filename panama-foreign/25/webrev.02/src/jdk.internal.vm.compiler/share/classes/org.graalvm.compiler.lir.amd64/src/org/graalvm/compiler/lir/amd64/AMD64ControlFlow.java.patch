diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64ControlFlow.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64ControlFlow.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64ControlFlow.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64ControlFlow.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -24,30 +24,41 @@
 
 package org.graalvm.compiler.lir.amd64;
 
 import static jdk.vm.ci.code.ValueUtil.asRegister;
 import static jdk.vm.ci.code.ValueUtil.isRegister;
+import static jdk.vm.ci.code.ValueUtil.isStackSlot;
+import static org.graalvm.compiler.asm.amd64.AMD64BaseAssembler.OperandSize.DWORD;
+import static org.graalvm.compiler.asm.amd64.AMD64BaseAssembler.OperandSize.QWORD;
+import static org.graalvm.compiler.asm.amd64.AMD64BaseAssembler.OperandSize.WORD;
+import static org.graalvm.compiler.lir.LIRInstruction.OperandFlag.COMPOSITE;
 import static org.graalvm.compiler.lir.LIRInstruction.OperandFlag.CONST;
 import static org.graalvm.compiler.lir.LIRInstruction.OperandFlag.HINT;
 import static org.graalvm.compiler.lir.LIRInstruction.OperandFlag.ILLEGAL;
 import static org.graalvm.compiler.lir.LIRInstruction.OperandFlag.REG;
 import static org.graalvm.compiler.lir.LIRInstruction.OperandFlag.STACK;
 
+import java.util.function.IntConsumer;
+import java.util.function.Supplier;
+
 import org.graalvm.compiler.asm.Label;
 import org.graalvm.compiler.asm.amd64.AMD64Address;
 import org.graalvm.compiler.asm.amd64.AMD64Address.Scale;
 import org.graalvm.compiler.asm.amd64.AMD64Assembler.ConditionFlag;
+import org.graalvm.compiler.asm.amd64.AMD64BaseAssembler.OperandSize;
 import org.graalvm.compiler.asm.amd64.AMD64MacroAssembler;
 import org.graalvm.compiler.code.CompilationResult.JumpTable;
 import org.graalvm.compiler.core.common.NumUtil;
 import org.graalvm.compiler.core.common.calc.Condition;
 import org.graalvm.compiler.debug.GraalError;
+import org.graalvm.compiler.lir.LIRFrameState;
 import org.graalvm.compiler.lir.LIRInstructionClass;
 import org.graalvm.compiler.lir.LabelRef;
 import org.graalvm.compiler.lir.Opcode;
 import org.graalvm.compiler.lir.StandardOp;
 import org.graalvm.compiler.lir.StandardOp.BlockEndOp;
+import org.graalvm.compiler.lir.StandardOp.ImplicitNullCheck;
 import org.graalvm.compiler.lir.SwitchStrategy;
 import org.graalvm.compiler.lir.SwitchStrategy.BaseSwitchClosure;
 import org.graalvm.compiler.lir.Variable;
 import org.graalvm.compiler.lir.asm.CompilationResultBuilder;
 
@@ -56,10 +67,11 @@
 import jdk.vm.ci.amd64.AMD64Kind;
 import jdk.vm.ci.code.Register;
 import jdk.vm.ci.meta.AllocatableValue;
 import jdk.vm.ci.meta.Constant;
 import jdk.vm.ci.meta.JavaConstant;
+import jdk.vm.ci.meta.VMConstant;
 import jdk.vm.ci.meta.Value;
 
 public class AMD64ControlFlow {
 
     public static final class ReturnOp extends AMD64BlockEndOp implements BlockEndOp {
@@ -90,11 +102,11 @@
         public static final LIRInstructionClass<BranchOp> TYPE = LIRInstructionClass.create(BranchOp.class);
         protected final ConditionFlag condition;
         protected final LabelRef trueDestination;
         protected final LabelRef falseDestination;
 
-        private final double trueDestinationProbability;
+        protected final double trueDestinationProbability;
 
         public BranchOp(Condition condition, LabelRef trueDestination, LabelRef falseDestination, double trueDestinationProbability) {
             this(intCond(condition), trueDestination, falseDestination, trueDestinationProbability);
         }
 
@@ -110,41 +122,438 @@
             this.trueDestinationProbability = trueDestinationProbability;
         }
 
         @Override
         public void emitCode(CompilationResultBuilder crb, AMD64MacroAssembler masm) {
-            boolean isNegated = false;
-            int jccPos = masm.position();
             /*
              * The strategy for emitting jumps is: If either trueDestination or falseDestination is
              * the successor block, assume the block scheduler did the correct thing and jcc to the
              * other. Otherwise, we need a jcc followed by a jmp. Use the branch probability to make
              * sure it is more likely to branch on the jcc (= less likely to execute both the jcc
              * and the jmp instead of just the jcc). In the case of loops, that means the jcc is the
              * back-edge.
              */
             if (crb.isSuccessorEdge(trueDestination)) {
                 jcc(masm, true, falseDestination);
-                isNegated = true;
             } else if (crb.isSuccessorEdge(falseDestination)) {
                 jcc(masm, false, trueDestination);
             } else if (trueDestinationProbability < 0.5) {
                 jcc(masm, true, falseDestination);
                 masm.jmp(trueDestination.label());
-                isNegated = true;
             } else {
                 jcc(masm, false, trueDestination);
                 masm.jmp(falseDestination.label());
             }
-            crb.recordBranch(jccPos, isNegated);
         }
 
         protected void jcc(AMD64MacroAssembler masm, boolean negate, LabelRef target) {
             masm.jcc(negate ? condition.negate() : condition, target.label());
         }
     }
 
+    public static class TestByteBranchOp extends BranchOp {
+
+        public static final LIRInstructionClass<TestByteBranchOp> TYPE = LIRInstructionClass.create(TestByteBranchOp.class);
+
+        @Use({REG}) protected AllocatableValue x;
+        @Use({REG, STACK}) protected AllocatableValue y;
+
+        public TestByteBranchOp(AllocatableValue x, AllocatableValue y, Condition cond, LabelRef trueDestination, LabelRef falseDestination, double trueDestinationProbability) {
+            super(TYPE, intCond(cond), trueDestination, falseDestination, trueDestinationProbability);
+
+            this.x = x;
+            this.y = y;
+        }
+
+        @Override
+        public void emitCode(CompilationResultBuilder crb, AMD64MacroAssembler masm) {
+            if (isRegister(y)) {
+                if (crb.isSuccessorEdge(trueDestination)) {
+                    masm.testbAndJcc(asRegister(x), asRegister(y), condition.negate(), falseDestination.label(), false);
+                } else if (crb.isSuccessorEdge(falseDestination)) {
+                    masm.testbAndJcc(asRegister(x), asRegister(y), condition, trueDestination.label(), false);
+                } else if (trueDestinationProbability < 0.5) {
+                    masm.testbAndJcc(asRegister(x), asRegister(y), condition.negate(), falseDestination.label(), false);
+                    masm.jmp(trueDestination.label());
+                } else {
+                    masm.testbAndJcc(asRegister(x), asRegister(y), condition, trueDestination.label(), false);
+                    masm.jmp(falseDestination.label());
+                }
+            } else {
+                assert isStackSlot(y);
+                if (crb.isSuccessorEdge(trueDestination)) {
+                    masm.testbAndJcc(asRegister(x), (AMD64Address) crb.asAddress(y), condition.negate(), falseDestination.label(), false);
+                } else if (crb.isSuccessorEdge(falseDestination)) {
+                    masm.testbAndJcc(asRegister(x), (AMD64Address) crb.asAddress(y), condition, trueDestination.label(), false);
+                } else if (trueDestinationProbability < 0.5) {
+                    masm.testbAndJcc(asRegister(x), (AMD64Address) crb.asAddress(y), condition.negate(), falseDestination.label(), false);
+                    masm.jmp(trueDestination.label());
+                } else {
+                    masm.testbAndJcc(asRegister(x), (AMD64Address) crb.asAddress(y), condition, trueDestination.label(), false);
+                    masm.jmp(falseDestination.label());
+                }
+            }
+        }
+    }
+
+    public static class TestBranchOp extends BranchOp implements ImplicitNullCheck {
+
+        public static final LIRInstructionClass<TestBranchOp> TYPE = LIRInstructionClass.create(TestBranchOp.class);
+
+        private final OperandSize size;
+
+        @Use({REG}) protected AllocatableValue x;
+        @Use({REG, STACK, COMPOSITE}) protected Value y;
+
+        @State protected LIRFrameState state;
+
+        public TestBranchOp(OperandSize size, AllocatableValue x, Value y, LIRFrameState state, Condition cond, LabelRef trueDestination, LabelRef falseDestination,
+                        double trueDestinationProbability) {
+            super(TYPE, intCond(cond), trueDestination, falseDestination, trueDestinationProbability);
+            assert size == WORD || size == DWORD || size == QWORD;
+            this.size = size;
+
+            this.x = x;
+            this.y = y;
+
+            this.state = state;
+        }
+
+        @Override
+        public void emitCode(CompilationResultBuilder crb, AMD64MacroAssembler masm) {
+            if (isRegister(y)) {
+                assert state == null;
+                if (crb.isSuccessorEdge(trueDestination)) {
+                    masm.testAndJcc(size, asRegister(x), asRegister(y), condition.negate(), falseDestination.label(), false);
+                } else if (crb.isSuccessorEdge(falseDestination)) {
+                    masm.testAndJcc(size, asRegister(x), asRegister(y), condition, trueDestination.label(), false);
+                } else if (trueDestinationProbability < 0.5) {
+                    masm.testAndJcc(size, asRegister(x), asRegister(y), condition.negate(), falseDestination.label(), false);
+                    masm.jmp(trueDestination.label());
+                } else {
+                    masm.testAndJcc(size, asRegister(x), asRegister(y), condition, trueDestination.label(), false);
+                    masm.jmp(falseDestination.label());
+                }
+                return;
+            }
+            IntConsumer applyBeforeFusedPair = state == null ? null : pos -> crb.recordImplicitException(pos, state);
+            if (isStackSlot(y)) {
+                if (crb.isSuccessorEdge(trueDestination)) {
+                    masm.testAndJcc(size, asRegister(x), (AMD64Address) crb.asAddress(y), condition.negate(), falseDestination.label(), false, applyBeforeFusedPair);
+                } else if (crb.isSuccessorEdge(falseDestination)) {
+                    masm.testAndJcc(size, asRegister(x), (AMD64Address) crb.asAddress(y), condition, trueDestination.label(), false, applyBeforeFusedPair);
+                } else if (trueDestinationProbability < 0.5) {
+                    masm.testAndJcc(size, asRegister(x), (AMD64Address) crb.asAddress(y), condition.negate(), falseDestination.label(), false, applyBeforeFusedPair);
+                    masm.jmp(trueDestination.label());
+                } else {
+                    masm.testAndJcc(size, asRegister(x), (AMD64Address) crb.asAddress(y), condition, trueDestination.label(), false, applyBeforeFusedPair);
+                    masm.jmp(falseDestination.label());
+                }
+            } else {
+                AMD64AddressValue yAddress = (AMD64AddressValue) y;
+                if (crb.isSuccessorEdge(trueDestination)) {
+                    masm.testAndJcc(size, asRegister(x), yAddress.toAddress(), condition.negate(), falseDestination.label(), false, applyBeforeFusedPair);
+                } else if (crb.isSuccessorEdge(falseDestination)) {
+                    masm.testAndJcc(size, asRegister(x), yAddress.toAddress(), condition, trueDestination.label(), false, applyBeforeFusedPair);
+                } else if (trueDestinationProbability < 0.5) {
+                    masm.testAndJcc(size, asRegister(x), yAddress.toAddress(), condition.negate(), falseDestination.label(), false, applyBeforeFusedPair);
+                    masm.jmp(trueDestination.label());
+                } else {
+                    masm.testAndJcc(size, asRegister(x), yAddress.toAddress(), condition, trueDestination.label(), false, applyBeforeFusedPair);
+                    masm.jmp(falseDestination.label());
+                }
+            }
+        }
+
+        @Override
+        public boolean makeNullCheckFor(Value value, LIRFrameState nullCheckState, int implicitNullCheckLimit) {
+            if (state == null && y instanceof AMD64AddressValue && ((AMD64AddressValue) y).isValidImplicitNullCheckFor(value, implicitNullCheckLimit)) {
+                state = nullCheckState;
+                return true;
+            }
+            return false;
+        }
+    }
+
+    public static class TestConstBranchOp extends BranchOp implements ImplicitNullCheck {
+
+        public static final LIRInstructionClass<TestConstBranchOp> TYPE = LIRInstructionClass.create(TestConstBranchOp.class);
+
+        private final OperandSize size;
+
+        @Use({REG, STACK, COMPOSITE}) protected Value x;
+        private final int y;
+
+        @State protected LIRFrameState state;
+
+        public TestConstBranchOp(OperandSize size, Value x, int y, LIRFrameState state, Condition cond, LabelRef trueDestination, LabelRef falseDestination, double trueDestinationProbability) {
+            super(TYPE, intCond(cond), trueDestination, falseDestination, trueDestinationProbability);
+            assert size == DWORD || size == QWORD;
+            this.size = size;
+
+            this.x = x;
+            this.y = y;
+
+            this.state = state;
+        }
+
+        @Override
+        public void emitCode(CompilationResultBuilder crb, AMD64MacroAssembler masm) {
+            if (isRegister(x)) {
+                assert state == null;
+                if (crb.isSuccessorEdge(trueDestination)) {
+                    masm.testAndJcc(size, asRegister(x), y, condition.negate(), falseDestination.label(), false);
+                } else if (crb.isSuccessorEdge(falseDestination)) {
+                    masm.testAndJcc(size, asRegister(x), y, condition, trueDestination.label(), false);
+                } else if (trueDestinationProbability < 0.5) {
+                    masm.testAndJcc(size, asRegister(x), y, condition.negate(), falseDestination.label(), false);
+                    masm.jmp(trueDestination.label());
+                } else {
+                    masm.testAndJcc(size, asRegister(x), y, condition, trueDestination.label(), false);
+                    masm.jmp(falseDestination.label());
+                }
+                return;
+            }
+            IntConsumer applyBeforeFusedPair = state == null ? null : pos -> crb.recordImplicitException(pos, state);
+            if (isStackSlot(x)) {
+                if (crb.isSuccessorEdge(trueDestination)) {
+                    masm.testAndJcc(size, (AMD64Address) crb.asAddress(x), y, condition.negate(), falseDestination.label(), false, applyBeforeFusedPair);
+                } else if (crb.isSuccessorEdge(falseDestination)) {
+                    masm.testAndJcc(size, (AMD64Address) crb.asAddress(x), y, condition, trueDestination.label(), false, applyBeforeFusedPair);
+                } else if (trueDestinationProbability < 0.5) {
+                    masm.testAndJcc(size, (AMD64Address) crb.asAddress(x), y, condition.negate(), falseDestination.label(), false, applyBeforeFusedPair);
+                    masm.jmp(trueDestination.label());
+                } else {
+                    masm.testAndJcc(size, (AMD64Address) crb.asAddress(x), y, condition, trueDestination.label(), false, applyBeforeFusedPair);
+                    masm.jmp(falseDestination.label());
+                }
+            } else {
+                AMD64AddressValue xAddress = (AMD64AddressValue) x;
+                if (crb.isSuccessorEdge(trueDestination)) {
+                    masm.testAndJcc(size, xAddress.toAddress(), y, condition.negate(), falseDestination.label(), false, applyBeforeFusedPair);
+                } else if (crb.isSuccessorEdge(falseDestination)) {
+                    masm.testAndJcc(size, xAddress.toAddress(), y, condition, trueDestination.label(), false, applyBeforeFusedPair);
+                } else if (trueDestinationProbability < 0.5) {
+                    masm.testAndJcc(size, xAddress.toAddress(), y, condition.negate(), falseDestination.label(), false, applyBeforeFusedPair);
+                    masm.jmp(trueDestination.label());
+                } else {
+                    masm.testAndJcc(size, xAddress.toAddress(), y, condition, trueDestination.label(), false, applyBeforeFusedPair);
+                    masm.jmp(falseDestination.label());
+                }
+            }
+        }
+
+        @Override
+        public boolean makeNullCheckFor(Value value, LIRFrameState nullCheckState, int implicitNullCheckLimit) {
+            if (state == null && x instanceof AMD64AddressValue && ((AMD64AddressValue) x).isValidImplicitNullCheckFor(value, implicitNullCheckLimit)) {
+                state = nullCheckState;
+                return true;
+            }
+            return false;
+        }
+    }
+
+    public static class CmpBranchOp extends BranchOp implements ImplicitNullCheck {
+
+        public static final LIRInstructionClass<CmpBranchOp> TYPE = LIRInstructionClass.create(CmpBranchOp.class);
+
+        private final OperandSize size;
+
+        @Use({REG}) protected AllocatableValue x;
+        @Use({REG, STACK, COMPOSITE}) protected Value y;
+
+        @State protected LIRFrameState state;
+
+        public CmpBranchOp(OperandSize size, AllocatableValue x, Value y, LIRFrameState state, Condition cond, LabelRef trueDestination, LabelRef falseDestination, double trueDestinationProbability) {
+            super(TYPE, intCond(cond), trueDestination, falseDestination, trueDestinationProbability);
+            this.size = size;
+
+            this.x = x;
+            this.y = y;
+
+            this.state = state;
+        }
+
+        @Override
+        public void emitCode(CompilationResultBuilder crb, AMD64MacroAssembler masm) {
+            if (isRegister(y)) {
+                assert state == null;
+                if (crb.isSuccessorEdge(trueDestination)) {
+                    masm.cmpAndJcc(size, asRegister(x), asRegister(y), condition.negate(), falseDestination.label(), false);
+                } else if (crb.isSuccessorEdge(falseDestination)) {
+                    masm.cmpAndJcc(size, asRegister(x), asRegister(y), condition, trueDestination.label(), false);
+                } else if (trueDestinationProbability < 0.5) {
+                    masm.cmpAndJcc(size, asRegister(x), asRegister(y), condition.negate(), falseDestination.label(), false);
+                    masm.jmp(trueDestination.label());
+                } else {
+                    masm.cmpAndJcc(size, asRegister(x), asRegister(y), condition, trueDestination.label(), false);
+                    masm.jmp(falseDestination.label());
+                }
+                return;
+            }
+            IntConsumer applyBeforeFusedPair = state == null ? null : pos -> crb.recordImplicitException(pos, state);
+            if (isStackSlot(y)) {
+                if (crb.isSuccessorEdge(trueDestination)) {
+                    masm.cmpAndJcc(size, asRegister(x), (AMD64Address) crb.asAddress(y), condition.negate(), falseDestination.label(), false, applyBeforeFusedPair);
+                } else if (crb.isSuccessorEdge(falseDestination)) {
+                    masm.cmpAndJcc(size, asRegister(x), (AMD64Address) crb.asAddress(y), condition, trueDestination.label(), false, applyBeforeFusedPair);
+                } else if (trueDestinationProbability < 0.5) {
+                    masm.cmpAndJcc(size, asRegister(x), (AMD64Address) crb.asAddress(y), condition.negate(), falseDestination.label(), false, applyBeforeFusedPair);
+                    masm.jmp(trueDestination.label());
+                } else {
+                    masm.cmpAndJcc(size, asRegister(x), (AMD64Address) crb.asAddress(y), condition, trueDestination.label(), false, applyBeforeFusedPair);
+                    masm.jmp(falseDestination.label());
+                }
+            } else {
+                AMD64AddressValue yAddress = (AMD64AddressValue) y;
+                if (crb.isSuccessorEdge(trueDestination)) {
+                    masm.cmpAndJcc(size, asRegister(x), yAddress.toAddress(), condition.negate(), falseDestination.label(), false, applyBeforeFusedPair);
+                } else if (crb.isSuccessorEdge(falseDestination)) {
+                    masm.cmpAndJcc(size, asRegister(x), yAddress.toAddress(), condition, trueDestination.label(), false, applyBeforeFusedPair);
+                } else if (trueDestinationProbability < 0.5) {
+                    masm.cmpAndJcc(size, asRegister(x), yAddress.toAddress(), condition.negate(), falseDestination.label(), false, applyBeforeFusedPair);
+                    masm.jmp(trueDestination.label());
+                } else {
+                    masm.cmpAndJcc(size, asRegister(x), yAddress.toAddress(), condition, trueDestination.label(), false, applyBeforeFusedPair);
+                    masm.jmp(falseDestination.label());
+                }
+            }
+        }
+
+        @Override
+        public boolean makeNullCheckFor(Value value, LIRFrameState nullCheckState, int implicitNullCheckLimit) {
+            if (state == null && y instanceof AMD64AddressValue && ((AMD64AddressValue) y).isValidImplicitNullCheckFor(value, implicitNullCheckLimit)) {
+                state = nullCheckState;
+                return true;
+            }
+            return false;
+        }
+    }
+
+    public static class CmpConstBranchOp extends BranchOp {
+
+        public static final LIRInstructionClass<CmpConstBranchOp> TYPE = LIRInstructionClass.create(CmpConstBranchOp.class);
+
+        private final OperandSize size;
+
+        @Use({REG, STACK, COMPOSITE}) protected Value x;
+        private final int y;
+        private final VMConstant inlinedY;
+
+        @State protected LIRFrameState state;
+
+        public CmpConstBranchOp(OperandSize size, Value x, int y, LIRFrameState state, Condition cond, LabelRef trueDestination, LabelRef falseDestination, double trueDestinationProbability) {
+            super(TYPE, intCond(cond), trueDestination, falseDestination, trueDestinationProbability);
+            this.size = size;
+
+            this.x = x;
+            this.y = y;
+            this.inlinedY = null;
+
+            this.state = state;
+        }
+
+        public CmpConstBranchOp(OperandSize size, Value x, VMConstant y, LIRFrameState state, Condition cond, LabelRef trueDestination, LabelRef falseDestination, double trueDestinationProbability) {
+            super(TYPE, intCond(cond), trueDestination, falseDestination, trueDestinationProbability);
+            this.size = size;
+
+            this.x = x;
+            this.y = 0xDEADDEAD;
+            this.inlinedY = y;
+
+            this.state = state;
+        }
+
+        @Override
+        public void emitCode(CompilationResultBuilder crb, AMD64MacroAssembler masm) {
+            final boolean inlineDataInCode = inlinedY != null;
+            IntConsumer applyBeforeFusedPair = null;
+            if (inlineDataInCode) {
+                applyBeforeFusedPair = pos -> crb.recordInlineDataInCode(inlinedY);
+            }
+            if (isRegister(x)) {
+                assert state == null;
+                if (crb.isSuccessorEdge(trueDestination)) {
+                    masm.cmpAndJcc(size, asRegister(x), y, condition.negate(), falseDestination.label(), false, inlineDataInCode, applyBeforeFusedPair);
+                } else if (crb.isSuccessorEdge(falseDestination)) {
+                    masm.cmpAndJcc(size, asRegister(x), y, condition, trueDestination.label(), false, inlineDataInCode, applyBeforeFusedPair);
+                } else if (trueDestinationProbability < 0.5) {
+                    masm.cmpAndJcc(size, asRegister(x), y, condition.negate(), falseDestination.label(), false, inlineDataInCode, applyBeforeFusedPair);
+                    masm.jmp(trueDestination.label());
+                } else {
+                    masm.cmpAndJcc(size, asRegister(x), y, condition, trueDestination.label(), false, inlineDataInCode, applyBeforeFusedPair);
+                    masm.jmp(falseDestination.label());
+                }
+                return;
+            }
+            if (state != null) {
+                IntConsumer implicitException = pos -> crb.recordImplicitException(pos, state);
+                applyBeforeFusedPair = applyBeforeFusedPair == null ? implicitException : applyBeforeFusedPair.andThen(implicitException);
+            }
+            if (isStackSlot(x)) {
+                if (crb.isSuccessorEdge(trueDestination)) {
+                    masm.cmpAndJcc(size, (AMD64Address) crb.asAddress(x), y, condition.negate(), falseDestination.label(), false, inlineDataInCode, applyBeforeFusedPair);
+                } else if (crb.isSuccessorEdge(falseDestination)) {
+                    masm.cmpAndJcc(size, (AMD64Address) crb.asAddress(x), y, condition, trueDestination.label(), false, inlineDataInCode, applyBeforeFusedPair);
+                } else if (trueDestinationProbability < 0.5) {
+                    masm.cmpAndJcc(size, (AMD64Address) crb.asAddress(x), y, condition.negate(), falseDestination.label(), false, inlineDataInCode, applyBeforeFusedPair);
+                    masm.jmp(trueDestination.label());
+                } else {
+                    masm.cmpAndJcc(size, (AMD64Address) crb.asAddress(x), y, condition, trueDestination.label(), false, inlineDataInCode, applyBeforeFusedPair);
+                    masm.jmp(falseDestination.label());
+                }
+            } else {
+                AMD64AddressValue xAddress = (AMD64AddressValue) x;
+                if (crb.isSuccessorEdge(trueDestination)) {
+                    masm.cmpAndJcc(size, xAddress.toAddress(), y, condition.negate(), falseDestination.label(), false, inlineDataInCode, applyBeforeFusedPair);
+                } else if (crb.isSuccessorEdge(falseDestination)) {
+                    masm.cmpAndJcc(size, xAddress.toAddress(), y, condition, trueDestination.label(), false, inlineDataInCode, applyBeforeFusedPair);
+                } else if (trueDestinationProbability < 0.5) {
+                    masm.cmpAndJcc(size, xAddress.toAddress(), y, condition.negate(), falseDestination.label(), false, inlineDataInCode, applyBeforeFusedPair);
+                    masm.jmp(trueDestination.label());
+                } else {
+                    masm.cmpAndJcc(size, xAddress.toAddress(), y, condition, trueDestination.label(), false, inlineDataInCode, applyBeforeFusedPair);
+                    masm.jmp(falseDestination.label());
+                }
+            }
+        }
+    }
+
+    public static class CmpDataBranchOp extends BranchOp {
+
+        public static final LIRInstructionClass<CmpDataBranchOp> TYPE = LIRInstructionClass.create(CmpDataBranchOp.class);
+
+        private final OperandSize size;
+
+        @Use({REG}) protected AllocatableValue x;
+        private final Constant y;
+
+        public CmpDataBranchOp(OperandSize size, AllocatableValue x, Constant y, Condition cond, LabelRef trueDestination, LabelRef falseDestination, double trueDestinationProbability) {
+            super(TYPE, intCond(cond), trueDestination, falseDestination, trueDestinationProbability);
+            this.size = size;
+
+            this.x = x;
+            this.y = y;
+        }
+
+        @Override
+        public void emitCode(CompilationResultBuilder crb, AMD64MacroAssembler masm) {
+            Supplier<AMD64Address> applyBeforeConsumer = () -> (AMD64Address) crb.recordDataReferenceInCode(y, size.getBytes());
+            if (crb.isSuccessorEdge(trueDestination)) {
+                masm.cmpAndJcc(size, asRegister(x), applyBeforeConsumer, condition.negate(), falseDestination.label());
+            } else if (crb.isSuccessorEdge(falseDestination)) {
+                masm.cmpAndJcc(size, asRegister(x), applyBeforeConsumer, condition, trueDestination.label());
+            } else if (trueDestinationProbability < 0.5) {
+                masm.cmpAndJcc(size, asRegister(x), applyBeforeConsumer, condition.negate(), falseDestination.label());
+                masm.jmp(trueDestination.label());
+            } else {
+                masm.cmpAndJcc(size, asRegister(x), applyBeforeConsumer, condition, trueDestination.label());
+                masm.jmp(falseDestination.label());
+            }
+        }
+    }
+
     public static final class FloatBranchOp extends BranchOp {
         public static final LIRInstructionClass<FloatBranchOp> TYPE = LIRInstructionClass.create(FloatBranchOp.class);
         protected boolean unorderedIsTrue;
 
         public FloatBranchOp(Condition condition, boolean unorderedIsTrue, LabelRef trueDestination, LabelRef falseDestination, double trueDestinationProbability) {
@@ -152,11 +561,21 @@
             this.unorderedIsTrue = unorderedIsTrue;
         }
 
         @Override
         protected void jcc(AMD64MacroAssembler masm, boolean negate, LabelRef target) {
-            floatJcc(masm, negate ? condition.negate() : condition, negate ? !unorderedIsTrue : unorderedIsTrue, target.label());
+            ConditionFlag condition1 = negate ? condition.negate() : condition;
+            boolean unorderedIsTrue1 = negate ? !unorderedIsTrue : unorderedIsTrue;
+            Label label = target.label();
+            Label endLabel = new Label();
+            if (unorderedIsTrue1 && !trueOnUnordered(condition1)) {
+                masm.jcc(ConditionFlag.Parity, label);
+            } else if (!unorderedIsTrue1 && trueOnUnordered(condition1)) {
+                masm.jccb(ConditionFlag.Parity, endLabel);
+            }
+            masm.jcc(condition1, label);
+            masm.bind(endLabel);
         }
     }
 
     public static class StrategySwitchOp extends AMD64BlockEndOp {
         public static final LIRInstructionClass<StrategySwitchOp> TYPE = LIRInstructionClass.create(StrategySwitchOp.class);
@@ -351,12 +770,11 @@
                 // Move the table entry (two DWORDs) into a QWORD
                 masm.movq(entryScratchReg, new AMD64Address(scratchReg, indexReg, Scale.Times8, 0));
 
                 // Jump to the default target if the first DWORD (original key) doesn't match the
                 // current key. Accounts for hash collisions with unknown keys
-                masm.cmpl(entryScratchReg, valueReg);
-                masm.jcc(ConditionFlag.NotEqual, defaultTarget.label());
+                masm.cmplAndJcc(entryScratchReg, valueReg, ConditionFlag.NotEqual, defaultTarget.label(), false);
 
                 // Shift to the second DWORD
                 masm.sarq(entryScratchReg, 32);
             } else {
 
@@ -485,21 +903,10 @@
         public void emitCode(CompilationResultBuilder crb, AMD64MacroAssembler masm) {
             cmove(crb, masm, result, true, condition, unorderedIsTrue, trueValue, falseValue);
         }
     }
 
-    private static void floatJcc(AMD64MacroAssembler masm, ConditionFlag condition, boolean unorderedIsTrue, Label label) {
-        Label endLabel = new Label();
-        if (unorderedIsTrue && !trueOnUnordered(condition)) {
-            masm.jcc(ConditionFlag.Parity, label);
-        } else if (!unorderedIsTrue && trueOnUnordered(condition)) {
-            masm.jccb(ConditionFlag.Parity, endLabel);
-        }
-        masm.jcc(condition, label);
-        masm.bind(endLabel);
-    }
-
     private static void cmove(CompilationResultBuilder crb, AMD64MacroAssembler masm, Value result, boolean isFloat, ConditionFlag condition, boolean unorderedIsTrue, Value trueValue,
                     Value falseValue) {
         // check that we don't overwrite an input operand before it is used.
         assert !result.equals(trueValue);
 
