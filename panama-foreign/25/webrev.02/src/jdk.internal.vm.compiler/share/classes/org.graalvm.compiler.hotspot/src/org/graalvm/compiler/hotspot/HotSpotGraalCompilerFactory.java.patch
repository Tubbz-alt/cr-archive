diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotGraalCompilerFactory.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotGraalCompilerFactory.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotGraalCompilerFactory.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotGraalCompilerFactory.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -49,11 +49,11 @@
 import jdk.vm.ci.runtime.JVMCIRuntime;
 import jdk.vm.ci.services.Services;
 
 public final class HotSpotGraalCompilerFactory extends HotSpotJVMCICompilerFactory {
 
-    private static MethodFilter[] graalCompileOnlyFilter;
+    private static MethodFilter graalCompileOnlyFilter;
     private static boolean compileGraalWithC1Only;
 
     private IsGraalPredicate isGraalPredicate;
 
     private final HotSpotGraalJVMCIServiceLocator locator;
@@ -95,12 +95,12 @@
 
     private static void initializeGraalCompilePolicyFields(OptionValues options) {
         compileGraalWithC1Only = Options.CompileGraalWithC1Only.getValue(options) && !IS_IN_NATIVE_IMAGE;
         String optionValue = Options.GraalCompileOnly.getValue(options);
         if (optionValue != null) {
-            MethodFilter[] filter = MethodFilter.parse(optionValue);
-            if (filter.length == 0) {
+            MethodFilter filter = MethodFilter.parse(optionValue);
+            if (filter.matchesNothing()) {
                 filter = null;
             }
             graalCompileOnlyFilter = filter;
         }
     }
@@ -189,14 +189,12 @@
     static boolean shouldExclude(HotSpotResolvedJavaMethod method) {
         if (graalCompileOnlyFilter != null) {
             String javaClassName = method.getDeclaringClass().toJavaName();
             String name = method.getName();
             Signature signature = method.getSignature();
-            for (MethodFilter filter : graalCompileOnlyFilter) {
-                if (filter.matches(javaClassName, name, signature)) {
-                    return false;
-                }
+            if (graalCompileOnlyFilter.matches(javaClassName, name, signature)) {
+                return false;
             }
             return true;
         }
         return false;
     }
