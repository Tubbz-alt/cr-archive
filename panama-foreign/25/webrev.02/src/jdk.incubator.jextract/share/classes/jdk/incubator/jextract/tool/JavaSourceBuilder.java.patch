diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
@@ -28,12 +28,14 @@
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
+import jdk.incubator.foreign.MemoryLayouts.SysV;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
+import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.ValueLayout;
 
 import java.lang.invoke.MethodType;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
@@ -46,10 +48,11 @@
  * A helper class to generate header interface class in source form.
  * After aggregating various constituents of a .java source, build
  * method is called to get overall generated source string.
  */
 class JavaSourceBuilder {
+    private static final String ABI = SystemABI.getInstance().name();
     // buffer
     protected StringBuffer sb;
     // current line alignment (number of 4-spaces)
     protected int align;
 
@@ -84,10 +87,13 @@
     protected void addImportSection() {
         sb.append("import java.lang.invoke.MethodHandle;\n");
         sb.append("import java.lang.invoke.VarHandle;\n");
         sb.append("import jdk.incubator.foreign.*;\n");
         sb.append("import jdk.incubator.foreign.MemoryLayout.PathElement;\n");
+        sb.append("import static ");
+        sb.append(HandleSourceFactory.C_LANG_CONSTANTS_HOLDER);
+        sb.append(".*;\n");
     }
 
     protected void classBegin(String name) {
         indent();
         sb.append(PUB_CLS_MODS + "class ");
@@ -123,54 +129,64 @@
         decrAlign();
     }
 
     private void addLayout(MemoryLayout l) {
         if (l instanceof ValueLayout) {
-            boolean found = false;
-            for (Field fs : MemoryLayouts.SysV.class.getDeclaredFields()) {
-                try {
-                    MemoryLayout constant = (MemoryLayout)fs.get(null);
-                    if (l.name().isPresent()) {
-                        constant = constant.withName(l.name().get());
-                    }
-                    if (constant.equals(l)) {
-                        found = true;
-                        sb.append("MemoryLayouts.SysV." + fs.getName());
-                        break;
-                    }
-                } catch (ReflectiveOperationException ex) {
-                    throw new AssertionError(ex);
-                }
-            }
-            if (!found) {
-                throw new AssertionError("Should not get here: " + l);
-            }
+            SystemABI.Type type = l.abiType().orElseThrow(()->new AssertionError("Should not get here: " + l));
+            sb.append(switch (type) {
+                case BOOL -> "C_BOOL";
+                case SIGNED_CHAR -> "C_SCHAR";
+                case UNSIGNED_CHAR -> "C_UCHAR";
+                case CHAR -> "C_CHAR";
+                case SHORT -> "C_SHORT";
+                case UNSIGNED_SHORT -> "C_USHORT";
+                case INT -> "C_INT";
+                case UNSIGNED_INT -> "C_UINT";
+                case LONG -> "C_LONG";
+                case UNSIGNED_LONG -> "C_ULONG";
+                case LONG_LONG -> "C_LONGLONG";
+                case UNSIGNED_LONG_LONG -> "C_ULONGLONG";
+                case FLOAT -> "C_FLOAT";
+                case DOUBLE -> "C_DOUBLE";
+                case LONG_DOUBLE -> "C_LONGDOUBLE";
+                case POINTER -> "C_POINTER";
+                default -> { throw new RuntimeException("should not reach here: " + type); }
+            });
         } else if (l instanceof SequenceLayout) {
             sb.append("MemoryLayout.ofSequence(");
             if (((SequenceLayout) l).elementCount().isPresent()) {
                 sb.append(((SequenceLayout) l).elementCount().getAsLong() + ", ");
             }
             addLayout(((SequenceLayout) l).elementLayout());
             sb.append(")");
         } else if (l instanceof GroupLayout) {
-            if (((GroupLayout) l).isStruct()) {
-                sb.append("MemoryLayout.ofStruct(\n");
+            SystemABI.Type type = l.abiType().orElse(null);
+            if (type == SystemABI.Type.COMPLEX_LONG_DOUBLE) {
+                if (ABI != SystemABI.ABI_SYSV) {
+                    throw new RuntimeException("complex long double is supported only for SysV ABI");
+                } else {
+                    sb.append("C_COMPLEX_LONGDOUBLE");
+                }
             } else {
-                sb.append("MemoryLayout.ofUnion(\n");
-            }
-            incrAlign();
-            String delim = "";
-            for (MemoryLayout e : ((GroupLayout) l).memberLayouts()) {
-                sb.append(delim);
+                if (((GroupLayout) l).isStruct()) {
+                    sb.append("MemoryLayout.ofStruct(\n");
+                } else {
+                    sb.append("MemoryLayout.ofUnion(\n");
+                }
+                incrAlign();
+                String delim = "";
+                for (MemoryLayout e : ((GroupLayout) l).memberLayouts()) {
+                    sb.append(delim);
+                    indent();
+                    addLayout(e);
+                    delim = ",\n";
+                }
+                sb.append("\n");
+                decrAlign();
                 indent();
-                addLayout(e);
-                delim = ",\n";
+                sb.append(")");
             }
-            sb.append("\n");
-            decrAlign();
-            indent();
-            sb.append(")");
         } else {
             //padding
             sb.append("MemoryLayout.ofPaddingBits(" + l.bitSize() + ")");
         }
         if (l.name().isPresent()) {
