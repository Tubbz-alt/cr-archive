diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/TagletWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/TagletWriter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/TagletWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/TagletWriter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -72,11 +72,11 @@
      * @return the output of the taglet.
      */
     protected abstract Content codeTagOutput(Element element, DocTree tag);
 
     /**
-     * Return the output for a {@index...} tag.
+     * Return the output for a {@code {@index...}} tag.
      *
      * @param tag the tag.
      * @return the output of the taglet.
      */
     protected abstract Content indexTagOutput(Element element, DocTree tag);
@@ -231,12 +231,16 @@
      * @param element the element that we are print tags for.
      * @param taglets the taglets to print.
      * @param writer the writer that will generate the output strings.
      * @param output the output buffer to store the output in.
      */
-    public static void genTagOutput(TagletManager tagletManager, Element element,
-            List<Taglet> taglets, TagletWriter writer, Content output) {
+    public static void genTagOutput(TagletManager tagletManager,
+                                    Element element,
+                                    List<Taglet> taglets,
+                                    TagletWriter writer,
+                                    Content output)
+    {
         Utils utils = writer.configuration().utils;
         tagletManager.checkTags(element, utils.getBlockTags(element), false);
         tagletManager.checkTags(element, utils.getFullBody(element), true);
         for (Taglet taglet : taglets) {
             if (utils.isTypeElement(element) && taglet instanceof ParamTaglet) {
@@ -282,18 +286,22 @@
     }
     /**
      * Given an inline tag, return its output.
      * @param holder
      * @param tagletManager The taglet manager for the current doclet.
-     * @param holderTag The tag this holds this inline tag.  Null if there
-     * is no tag that holds it.
+     * @param holderTag The tag that holds this inline tag, or {@code null} if
+     *                  there is no tag that holds it.
      * @param inlineTag The inline tag to be documented.
      * @param tagletWriter The taglet writer to write the output.
      * @return The output of the inline tag.
      */
-    public static Content getInlineTagOutput(Element holder, TagletManager tagletManager,
-            DocTree holderTag, DocTree inlineTag, TagletWriter tagletWriter) {
+    public static Content getInlineTagOutput(Element holder,
+                                             TagletManager tagletManager,
+                                             DocTree holderTag,
+                                             DocTree inlineTag,
+                                             TagletWriter tagletWriter)
+    {
         List<Taglet> definedTags = tagletManager.getInlineTaglets();
         CommentHelper ch = tagletWriter.configuration().utils.getCommentHelper(holder);
         final String inlineTagName = ch.getTagName(inlineTag);
         //This is a custom inline tag.
         for (Taglet definedTag : definedTags) {
