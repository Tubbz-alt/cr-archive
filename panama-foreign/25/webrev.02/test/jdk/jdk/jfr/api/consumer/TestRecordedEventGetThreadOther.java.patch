diff a/test/jdk/jdk/jfr/api/consumer/TestRecordedEventGetThreadOther.java b/test/jdk/jdk/jfr/api/consumer/TestRecordedEventGetThreadOther.java
--- a/test/jdk/jdk/jfr/api/consumer/TestRecordedEventGetThreadOther.java
+++ b/test/jdk/jdk/jfr/api/consumer/TestRecordedEventGetThreadOther.java
@@ -45,65 +45,55 @@
  * @run main/othervm jdk.jfr.api.consumer.TestRecordedEventGetThreadOther
  */
 public class TestRecordedEventGetThreadOther {
 
     private static final String MY_THREAD_NAME = "MY_THREAD_NAME";
-    private static long expectedThreadId;
-    private static Path dumpFilePath;
 
     static class TestEvent extends Event {
     }
 
     static class PostingThread extends Thread {
-
-        PostingThread() {
-            setName(MY_THREAD_NAME);
-            expectedThreadId = getId();
+        private final Path dumpFilePath;
+        PostingThread(Path dumpFilePath) {
+            this.dumpFilePath = dumpFilePath;
         }
 
         @Override
         public void run() {
             try {
                 System.out.println("Starting thread...");
-                dumpFilePath = postEventAndDumpToFile();
-                System.out.println("events dumped to the file " + dumpFilePath);
+                try (Recording r = new Recording()) {
+                    r.start();
+                    TestEvent t = new TestEvent();
+                    t.commit();
+                    r.stop();
+                    r.dump(dumpFilePath);
+                    System.out.println("events dumped to the file " + dumpFilePath);
+                }
             } catch (Throwable t) {
                 t.printStackTrace();
                 Asserts.fail();
             }
         }
     }
 
-    public static void main(String[] args) throws Throwable {
-        Thread.currentThread().setName("MyMainThread");
+    public static void main(String[] args) throws Exception  {
+        Path dumpFilePath = Utils.createTempFile("event-thread", ".jfr");
 
-        PostingThread thread = new PostingThread();
+        PostingThread thread = new PostingThread(dumpFilePath);
+        thread.setName(MY_THREAD_NAME);
         thread.start();
         thread.join();
-        System.out.println("testing dump in file " + dumpFilePath);
 
         List<RecordedEvent> events = RecordingFile.readAllEvents(dumpFilePath);
         Asserts.assertEquals(events.size(), 1);
 
         RecordedEvent event = events.get(0);
         RecordedThread recordedThread = event.getThread();
 
         Asserts.assertNotNull(recordedThread);
         Asserts.assertEquals(recordedThread.getJavaName(), MY_THREAD_NAME);
-        Asserts.assertEquals(recordedThread.getJavaThreadId(), expectedThreadId);
+        Asserts.assertEquals(recordedThread.getJavaThreadId(), thread.getId());
         Asserts.assertNotNull(recordedThread.getId());
         Asserts.assertEquals(recordedThread.getOSName(), MY_THREAD_NAME);
     }
-
-    private static Path postEventAndDumpToFile() throws Throwable {
-        Recording r = new Recording();
-        r.start();
-        TestEvent t = new TestEvent();
-        t.commit();
-        r.stop();
-        Path path = Utils.createTempFile("event-thread", ".jfr");
-        System.out.println("Created path: " + path);
-        r.dump(path);
-        r.close();
-        return path;
-    }
 }
