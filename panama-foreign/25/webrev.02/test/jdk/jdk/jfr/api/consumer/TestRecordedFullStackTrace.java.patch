diff a/test/jdk/jdk/jfr/api/consumer/TestRecordedFullStackTrace.java b/test/jdk/jdk/jfr/api/consumer/TestRecordedFullStackTrace.java
--- a/test/jdk/jdk/jfr/api/consumer/TestRecordedFullStackTrace.java
+++ b/test/jdk/jdk/jfr/api/consumer/TestRecordedFullStackTrace.java
@@ -77,20 +77,20 @@
     }
 
     private static void assertStackTraces(RecurseThread[] threads) throws Throwable {
         Path path = null;
         do {
-            Recording recording = new Recording();
-            recording.enable(EVENT_NAME).withPeriod(Duration.ofMillis(50));
-            recording.start();
-            Thread.sleep(500);
-            recording.stop();
-            // Dump the recording to a file
-            path = Utils.createTempFile("execution-stack-trace", ".jfr");
-            System.out.println("Dumping to " + path);
-            recording.dump(path);
-            recording.close();
+            try (Recording recording = new Recording()) {
+                recording.enable(EVENT_NAME).withPeriod(Duration.ofMillis(1));
+                recording.start();
+                Thread.sleep(50);
+                recording.stop();
+                // Dump the recording to a file
+                path = Utils.createTempFile("execution-stack-trace", ".jfr");
+                System.out.println("Dumping to " + path);
+                recording.dump(path);
+            }
         } while (!hasValidStackTraces(path, threads));
     }
 
     private static boolean hasValidStackTraces(Path path, RecurseThread[] threads) throws Throwable {
         boolean[] isEventFound = new boolean[threads.length];
@@ -101,12 +101,11 @@
             long threadId = Events.assertField(event, "sampledThread.javaThreadId").getValue();
 
             for (int threadIndex = 0; threadIndex < threads.length; ++threadIndex) {
                 RecurseThread currThread = threads[threadIndex];
                 if (threadId == currThread.getId()) {
-                    System.out.println("ThreadName=" + currThread.getName() + ", depth=" + currThread.totalDepth);
-                    Asserts.assertEquals(threadName, currThread.getName(), "Wrong thread name");
+                    Asserts.assertEquals(threadName, currThread.getName(), "Wrong thread name, deptth=" + currThread.totalDepth);
                     if ("recurseEnd".equals(getTopMethodName(event))) {
                         isEventFound[threadIndex] = true;
                         checkEvent(event, currThread.totalDepth);
                         break;
                     }
@@ -145,12 +144,11 @@
             Asserts.assertEquals(expectedMethods.size(), frames.size(), "Wrong expectedMethods depth. Test error.");
 
             for (int i = 0; i < frames.size(); ++i) {
                 String name = frames.get(i).getMethod().getName();
                 String expectedName = expectedMethods.get(i);
-                System.out.printf("method[%d]=%s, expected=%s%n", i, name, expectedName);
-                Asserts.assertEquals(name, expectedName, "Wrong method name");
+                Asserts.assertEquals(name, expectedName, "Wrong method name at index " + i);
             }
 
             boolean isTruncated = stacktrace.isTruncated();
             boolean isTruncateExpected = expectedDepth > MAX_DEPTH;
             Asserts.assertEquals(isTruncated, isTruncateExpected, "Wrong value for isTruncated. Expected:" + isTruncateExpected);
