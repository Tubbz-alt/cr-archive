diff a/test/jdk/jdk/jfr/api/consumer/TestFieldAccess.java b/test/jdk/jdk/jfr/api/consumer/TestFieldAccess.java
--- a/test/jdk/jdk/jfr/api/consumer/TestFieldAccess.java
+++ b/test/jdk/jdk/jfr/api/consumer/TestFieldAccess.java
@@ -43,10 +43,12 @@
  * @run main/othervm jdk.jfr.api.consumer.TestFieldAccess
  */
 public class TestFieldAccess {
 
     private static class MyEvent extends Event {
+        byte byteField = 42;
+        char charField = 'X';
         String stringField = "Hello";
         int intField = 4711;
         long longField = 4712L;
         short shortField = (short)67;
         double doubleField = Double.NaN;
@@ -70,10 +72,16 @@
             testGetField(event, myEvent);
         }
     }
 
     private static void testGetField(RecordedEvent event, MyEvent myEvent) {
+        char charField = event.getValue("charField");
+        Asserts.assertEquals(charField, myEvent.charField);
+
+        byte byteField = event.getValue("byteField");
+        Asserts.assertEquals(byteField, myEvent.byteField);
+
         String stringField = event.getValue("stringField");
         Asserts.assertEquals(stringField, myEvent.stringField);
 
         int intField = event.getValue("intField");
         Asserts.assertEquals(intField, myEvent.intField);
@@ -101,11 +109,10 @@
         RecordedClass  classField = event.getValue("classField");
         Asserts.assertEquals(classField.getName(), myEvent.classField.getName());
         String className = event.getValue("classField.name");
         Asserts.assertEquals(classField.getName(), className.replace("/", "."));
 
-
         try {
             event.getValue("doesnotexist");
         } catch (IllegalArgumentException iae) {
             // as expected
         }
@@ -123,10 +130,12 @@
         }
     }
 
     private static void testHasField(RecordedEvent event) {
         System.out.println(event);
+        Asserts.assertTrue(event.hasField("charField"));
+        Asserts.assertTrue(event.hasField("byteField"));
         Asserts.assertTrue(event.hasField("stringField"));
         Asserts.assertTrue(event.hasField("intField"));
         Asserts.assertTrue(event.hasField("longField"));
         Asserts.assertTrue(event.hasField("shortField"));
         Asserts.assertTrue(event.hasField("doubleField"));
