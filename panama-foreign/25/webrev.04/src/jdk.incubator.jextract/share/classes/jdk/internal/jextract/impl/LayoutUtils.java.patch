diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
@@ -27,10 +27,11 @@
 package jdk.internal.jextract.impl;
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
+import jdk.incubator.foreign.MemoryLayouts.SysV;
 import jdk.incubator.foreign.SequenceLayout;
 import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.ValueLayout;
 import jdk.internal.clang.Cursor;
 import jdk.internal.clang.Type;
@@ -43,10 +44,11 @@
 
 /**
  * General Layout utility functions
  */
 public final class LayoutUtils {
+    private static SystemABI abi = SystemABI.getInstance();
     private LayoutUtils() {}
 
     public static String getName(Type type) {
         Cursor c = type.getDeclarationCursor();
         if (c.isInvalid()) {
@@ -59,25 +61,28 @@
         return cursor.spelling();
     }
 
     public static MemoryLayout getLayout(Type t) {
         switch(t.kind()) {
-            case Char_S:
-            case Char_U:
-            case UChar:
-            case SChar:
+            case UChar, Char_U:
+                return C_UCHAR;
+            case SChar, Char_S:
                 return C_SCHAR;
-            case UShort:
             case Short:
                 return C_SHORT;
+            case UShort:
+                return C_USHORT;
             case Int:
-            case UInt:
                 return C_INT;
+            case UInt:
+                return C_UINT;
             case ULong:
+                return C_ULONG;
             case Long:
                 return C_LONG;
             case ULongLong:
+                return C_ULONGLONG;
             case LongLong:
                 return C_LONGLONG;
             case UInt128:
             case Int128:
                 throw new UnsupportedOperationException();
@@ -89,10 +94,15 @@
                 return C_FLOAT;
             case Double:
                 return C_DOUBLE;
             case LongDouble:
                 return C_LONGDOUBLE;
+            case Complex:
+                if (!abi.name().equals(SystemABI.ABI_SYSV)) {
+                    throw new UnsupportedOperationException("unsupported: " + t.kind());
+                }
+                return SysV.C_COMPLEX_LONGDOUBLE;
             case Record:
                 return getRecordLayout(t);
             case Vector:
                 return MemoryLayout.ofSequence(t.getNumberOfElements(), getLayout(t.getElementType()));
             case ConstantArray:
@@ -197,11 +207,11 @@
             case 64: return INT64;
             default:
                 throw new IllegalStateException("Cannot infer container layout");
         }
     }
-    
+
     // platform-dependent layouts
 
     public static final ValueLayout C_BOOL;
     public static final ValueLayout C_CHAR;
     public static final ValueLayout C_UCHAR;
@@ -223,11 +233,10 @@
     public static final ValueLayout INT16;
     public static final ValueLayout INT32;
     public static final ValueLayout INT64;
 
     static {
-        SystemABI abi = SystemABI.getInstance();
         if (abi instanceof SysVx64ABI) {
             C_BOOL = MemoryLayouts.SysV.C_BOOL;
             C_CHAR = MemoryLayouts.SysV.C_CHAR;
             C_UCHAR = MemoryLayouts.SysV.C_UCHAR;
             C_SCHAR = MemoryLayouts.SysV.C_SCHAR;
