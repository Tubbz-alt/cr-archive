diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
@@ -90,11 +90,11 @@
             default:
                 throw new UnsupportedOperationException("Unsupported ABI: " + abi);
         }
     }
 
-    private static final String C_LANG_CONSTANTS_HOLDER = getCLangConstantsHolder();
+    static final String C_LANG_CONSTANTS_HOLDER = getCLangConstantsHolder();
 
     public JavaFileObject[] generate(Declaration.Scoped decl) {
         builder.addPackagePrefix(pkgName);
         builder.classBegin(clsName);
         builder.addLibraries(libraryNames.toArray(new String[0]));
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
@@ -30,10 +30,11 @@
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
+import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.ValueLayout;
 
 import java.lang.invoke.MethodType;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
@@ -46,10 +47,11 @@
  * A helper class to generate header interface class in source form.
  * After aggregating various constituents of a .java source, build
  * method is called to get overall generated source string.
  */
 class JavaSourceBuilder {
+    private static final String ABI = SystemABI.getInstance().name();
     // buffer
     protected StringBuffer sb;
     // current line alignment (number of 4-spaces)
     protected int align;
 
@@ -84,10 +86,13 @@
     protected void addImportSection() {
         sb.append("import java.lang.invoke.MethodHandle;\n");
         sb.append("import java.lang.invoke.VarHandle;\n");
         sb.append("import jdk.incubator.foreign.*;\n");
         sb.append("import jdk.incubator.foreign.MemoryLayout.PathElement;\n");
+        sb.append("import static ");
+        sb.append(HandleSourceFactory.C_LANG_CONSTANTS_HOLDER);
+        sb.append(".*;\n");
     }
 
     protected void classBegin(String name) {
         indent();
         sb.append(PUB_CLS_MODS + "class ");
@@ -123,54 +128,64 @@
         decrAlign();
     }
 
     private void addLayout(MemoryLayout l) {
         if (l instanceof ValueLayout) {
-            boolean found = false;
-            for (Field fs : MemoryLayouts.SysV.class.getDeclaredFields()) {
-                try {
-                    MemoryLayout constant = (MemoryLayout)fs.get(null);
-                    if (l.name().isPresent()) {
-                        constant = constant.withName(l.name().get());
-                    }
-                    if (constant.equals(l)) {
-                        found = true;
-                        sb.append("MemoryLayouts.SysV." + fs.getName());
-                        break;
-                    }
-                } catch (ReflectiveOperationException ex) {
-                    throw new AssertionError(ex);
-                }
-            }
-            if (!found) {
-                throw new AssertionError("Should not get here: " + l);
-            }
+            SystemABI.Type type = l.abiType().orElseThrow(()->new AssertionError("Should not get here: " + l));
+            sb.append(switch (type) {
+                case BOOL -> "C_BOOL";
+                case SIGNED_CHAR -> "C_SCHAR";
+                case UNSIGNED_CHAR -> "C_UCHAR";
+                case CHAR -> "C_CHAR";
+                case SHORT -> "C_SHORT";
+                case UNSIGNED_SHORT -> "C_USHORT";
+                case INT -> "C_INT";
+                case UNSIGNED_INT -> "C_UINT";
+                case LONG -> "C_LONG";
+                case UNSIGNED_LONG -> "C_ULONG";
+                case LONG_LONG -> "C_LONGLONG";
+                case UNSIGNED_LONG_LONG -> "C_ULONGLONG";
+                case FLOAT -> "C_FLOAT";
+                case DOUBLE -> "C_DOUBLE";
+                case LONG_DOUBLE -> "C_LONGDOUBLE";
+                case POINTER -> "C_POINTER";
+                default -> { throw new RuntimeException("should not reach here: " + type); }
+            });
         } else if (l instanceof SequenceLayout) {
             sb.append("MemoryLayout.ofSequence(");
             if (((SequenceLayout) l).elementCount().isPresent()) {
                 sb.append(((SequenceLayout) l).elementCount().getAsLong() + ", ");
             }
             addLayout(((SequenceLayout) l).elementLayout());
             sb.append(")");
         } else if (l instanceof GroupLayout) {
-            if (((GroupLayout) l).isStruct()) {
-                sb.append("MemoryLayout.ofStruct(\n");
+            SystemABI.Type type = l.abiType().orElse(null);
+            if (type == SystemABI.Type.COMPLEX_LONG_DOUBLE) {
+                if (!ABI.equals(SystemABI.ABI_SYSV)) {
+                    throw new RuntimeException("complex long double is supported only for SysV ABI");
+                } else {
+                    sb.append("C_COMPLEX_LONGDOUBLE");
+                }
             } else {
-                sb.append("MemoryLayout.ofUnion(\n");
-            }
-            incrAlign();
-            String delim = "";
-            for (MemoryLayout e : ((GroupLayout) l).memberLayouts()) {
-                sb.append(delim);
+                if (((GroupLayout) l).isStruct()) {
+                    sb.append("MemoryLayout.ofStruct(\n");
+                } else {
+                    sb.append("MemoryLayout.ofUnion(\n");
+                }
+                incrAlign();
+                String delim = "";
+                for (MemoryLayout e : ((GroupLayout) l).memberLayouts()) {
+                    sb.append(delim);
+                    indent();
+                    addLayout(e);
+                    delim = ",\n";
+                }
+                sb.append("\n");
+                decrAlign();
                 indent();
-                addLayout(e);
-                delim = ",\n";
+                sb.append(")");
             }
-            sb.append("\n");
-            decrAlign();
-            indent();
-            sb.append(")");
         } else {
             //padding
             sb.append("MemoryLayout.ofPaddingBits(" + l.bitSize() + ")");
         }
         if (l.name().isPresent()) {
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
@@ -27,10 +27,11 @@
 package jdk.internal.jextract.impl;
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
+import jdk.incubator.foreign.MemoryLayouts.SysV;
 import jdk.incubator.foreign.SequenceLayout;
 import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.ValueLayout;
 import jdk.internal.clang.Cursor;
 import jdk.internal.clang.Type;
@@ -43,10 +44,11 @@
 
 /**
  * General Layout utility functions
  */
 public final class LayoutUtils {
+    private static SystemABI abi = SystemABI.getInstance();
     private LayoutUtils() {}
 
     public static String getName(Type type) {
         Cursor c = type.getDeclarationCursor();
         if (c.isInvalid()) {
@@ -59,25 +61,28 @@
         return cursor.spelling();
     }
 
     public static MemoryLayout getLayout(Type t) {
         switch(t.kind()) {
-            case Char_S:
-            case Char_U:
-            case UChar:
-            case SChar:
+            case UChar, Char_U:
+                return C_UCHAR;
+            case SChar, Char_S:
                 return C_SCHAR;
-            case UShort:
             case Short:
                 return C_SHORT;
+            case UShort:
+                return C_USHORT;
             case Int:
-            case UInt:
                 return C_INT;
+            case UInt:
+                return C_UINT;
             case ULong:
+                return C_ULONG;
             case Long:
                 return C_LONG;
             case ULongLong:
+                return C_ULONGLONG;
             case LongLong:
                 return C_LONGLONG;
             case UInt128:
             case Int128:
                 throw new UnsupportedOperationException();
@@ -89,10 +94,15 @@
                 return C_FLOAT;
             case Double:
                 return C_DOUBLE;
             case LongDouble:
                 return C_LONGDOUBLE;
+            case Complex:
+                if (!abi.name().equals(SystemABI.ABI_SYSV)) {
+                    throw new UnsupportedOperationException("unsupported: " + t.kind());
+                }
+                return SysV.C_COMPLEX_LONGDOUBLE;
             case Record:
                 return getRecordLayout(t);
             case Vector:
                 return MemoryLayout.ofSequence(t.getNumberOfElements(), getLayout(t.getElementType()));
             case ConstantArray:
@@ -197,11 +207,11 @@
             case 64: return INT64;
             default:
                 throw new IllegalStateException("Cannot infer container layout");
         }
     }
-    
+
     // platform-dependent layouts
 
     public static final ValueLayout C_BOOL;
     public static final ValueLayout C_CHAR;
     public static final ValueLayout C_UCHAR;
@@ -223,11 +233,10 @@
     public static final ValueLayout INT16;
     public static final ValueLayout INT32;
     public static final ValueLayout INT64;
 
     static {
-        SystemABI abi = SystemABI.getInstance();
         if (abi instanceof SysVx64ABI) {
             C_BOOL = MemoryLayouts.SysV.C_BOOL;
             C_CHAR = MemoryLayouts.SysV.C_CHAR;
             C_UCHAR = MemoryLayouts.SysV.C_UCHAR;
             C_SCHAR = MemoryLayouts.SysV.C_SCHAR;
diff a/test/jdk/tools/jextract/testStruct/LibStructTest.java b/test/jdk/tools/jextract/testStruct/LibStructTest.java
--- a/test/jdk/tools/jextract/testStruct/LibStructTest.java
+++ b/test/jdk/tools/jextract/testStruct/LibStructTest.java
@@ -19,10 +19,13 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
+import jdk.incubator.foreign.MemoryLayout.PathElement;
+import jdk.incubator.foreign.GroupLayout;
+import jdk.incubator.foreign.SystemABI.Type;
 import org.testng.annotations.Test;
 import static org.testng.Assert.assertEquals;
 import static test.jextract.struct.struct_h.*;
 
 /*
@@ -38,6 +41,28 @@
         try (var seg = makePoint(42, -39)) {
             assertEquals(Point$x$get(seg), 42);
             assertEquals(Point$y$get(seg), -39);
         }
     }
+
+    private static void checkFieldABIType(GroupLayout group, String fieldName, Type expected) {
+        assertEquals(group.select(PathElement.groupElement(fieldName)).abiType().orElseThrow(), expected);
+    }
+
+    @Test
+    public void testFieldTypes() {
+        GroupLayout g = (GroupLayout)AllTypes$LAYOUT;
+        checkFieldABIType(g, "sc",  Type.SIGNED_CHAR);
+        checkFieldABIType(g, "uc",  Type.UNSIGNED_CHAR);
+        checkFieldABIType(g, "s",   Type.SHORT);
+        checkFieldABIType(g, "us",  Type.UNSIGNED_SHORT);
+        checkFieldABIType(g, "i",   Type.INT);
+        checkFieldABIType(g, "ui",  Type.UNSIGNED_INT);
+        checkFieldABIType(g, "l",   Type.LONG);
+        checkFieldABIType(g, "ul",  Type.UNSIGNED_LONG);
+        checkFieldABIType(g, "ll",  Type.LONG_LONG);
+        checkFieldABIType(g, "ull", Type.UNSIGNED_LONG_LONG);
+        checkFieldABIType(g, "f", Type.FLOAT);
+        checkFieldABIType(g, "d", Type.DOUBLE);
+        checkFieldABIType(g, "ld", Type.LONG_DOUBLE);
+    }
 }
diff a/test/jdk/tools/jextract/testStruct/struct.h b/test/jdk/tools/jextract/testStruct/struct.h
--- a/test/jdk/tools/jextract/testStruct/struct.h
+++ b/test/jdk/tools/jextract/testStruct/struct.h
@@ -36,8 +36,24 @@
     int y;
 } Point;
 
 EXPORT Point makePoint(int x, int y);
 
+struct AllTypes {
+    signed char sc;
+    unsigned char uc;
+    short s;
+    unsigned short us;
+    int i;
+    unsigned int ui;
+    long l;
+    unsigned long ul;
+    long long ll;
+    unsigned long long ull;
+    float f;
+    double d;
+    long double ld;
+};
+
 #ifdef __cplusplus
 }
 #endif // __cplusplus
