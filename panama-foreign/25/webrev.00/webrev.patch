diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HandleSourceFactory.java
@@ -90,11 +90,11 @@
             default:
                 throw new UnsupportedOperationException("Unsupported ABI: " + abi);
         }
     }
 
-    private static final String C_LANG_CONSTANTS_HOLDER = getCLangConstantsHolder();
+    static final String C_LANG_CONSTANTS_HOLDER = getCLangConstantsHolder();
 
     public JavaFileObject[] generate(Declaration.Scoped decl) {
         builder.addPackagePrefix(pkgName);
         builder.classBegin(clsName);
         builder.addLibraries(libraryNames.toArray(new String[0]));
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
@@ -28,12 +28,14 @@
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
+import jdk.incubator.foreign.MemoryLayouts.SysV;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
+import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.ValueLayout;
 
 import java.lang.invoke.MethodType;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
@@ -46,10 +48,11 @@
  * A helper class to generate header interface class in source form.
  * After aggregating various constituents of a .java source, build
  * method is called to get overall generated source string.
  */
 class JavaSourceBuilder {
+    private static final String ABI = SystemABI.getInstance().name();
     // buffer
     protected StringBuffer sb;
     // current line alignment (number of 4-spaces)
     protected int align;
 
@@ -84,10 +87,13 @@
     protected void addImportSection() {
         sb.append("import java.lang.invoke.MethodHandle;\n");
         sb.append("import java.lang.invoke.VarHandle;\n");
         sb.append("import jdk.incubator.foreign.*;\n");
         sb.append("import jdk.incubator.foreign.MemoryLayout.PathElement;\n");
+        sb.append("import static ");
+        sb.append(HandleSourceFactory.C_LANG_CONSTANTS_HOLDER);
+        sb.append(".*;\n");
     }
 
     protected void classBegin(String name) {
         indent();
         sb.append(PUB_CLS_MODS + "class ");
@@ -123,54 +129,71 @@
         decrAlign();
     }
 
     private void addLayout(MemoryLayout l) {
         if (l instanceof ValueLayout) {
-            boolean found = false;
-            for (Field fs : MemoryLayouts.SysV.class.getDeclaredFields()) {
-                try {
-                    MemoryLayout constant = (MemoryLayout)fs.get(null);
-                    if (l.name().isPresent()) {
-                        constant = constant.withName(l.name().get());
-                    }
-                    if (constant.equals(l)) {
-                        found = true;
-                        sb.append("MemoryLayouts.SysV." + fs.getName());
-                        break;
-                    }
-                } catch (ReflectiveOperationException ex) {
-                    throw new AssertionError(ex);
+            SystemABI.Type type = l.abiType().orElseThrow(()->new AssertionError("Should not get here: " + l));
+            if (type == SystemABI.Type.LONG_DOUBLE) {
+                if (ABI != SystemABI.ABI_SYSV) {
+                    throw new RuntimeException("long double is supported only for SysV ABI");
+                } else {
+                    sb.append("C_LONGDOUBLE");
                 }
-            }
-            if (!found) {
-                throw new AssertionError("Should not get here: " + l);
+            } else {
+                sb.append(switch (type) {
+                    case BOOL -> "C_BOOL";
+                    case SIGNED_CHAR -> "C_SCHAR";
+                    case UNSIGNED_CHAR -> "C_UCHAR";
+                    case CHAR -> "C_CHAR";
+                    case SHORT -> "C_SHORT";
+                    case UNSIGNED_SHORT -> "C_USHORT";
+                    case INT -> "C_INT";
+                    case UNSIGNED_INT -> "C_UINT";
+                    case LONG -> "C_LONG";
+                    case UNSIGNED_LONG -> "C_ULONG";
+                    case LONG_LONG -> "C_LONGLONG";
+                    case UNSIGNED_LONG_LONG -> "C_ULONGLONG";
+                    case FLOAT -> "C_FLOAT";
+                    case DOUBLE -> "C_DOUBLE";
+                    case POINTER -> "C_POINTER";
+                    default -> { throw new RuntimeException("should not reach here: " + type); }
+                });
             }
         } else if (l instanceof SequenceLayout) {
             sb.append("MemoryLayout.ofSequence(");
             if (((SequenceLayout) l).elementCount().isPresent()) {
                 sb.append(((SequenceLayout) l).elementCount().getAsLong() + ", ");
             }
             addLayout(((SequenceLayout) l).elementLayout());
             sb.append(")");
         } else if (l instanceof GroupLayout) {
-            if (((GroupLayout) l).isStruct()) {
-                sb.append("MemoryLayout.ofStruct(\n");
+            SystemABI.Type type = l.abiType().orElse(null);
+            if (type == SystemABI.Type.COMPLEX_LONG_DOUBLE) {
+                if (ABI != SystemABI.ABI_SYSV) {
+                    throw new RuntimeException("complex long double is supported only for SysV ABI");
+                } else {
+                    sb.append("C_COMPLEX_LONGDOUBLE");
+                }
             } else {
-                sb.append("MemoryLayout.ofUnion(\n");
-            }
-            incrAlign();
-            String delim = "";
-            for (MemoryLayout e : ((GroupLayout) l).memberLayouts()) {
-                sb.append(delim);
+                if (((GroupLayout) l).isStruct()) {
+                    sb.append("MemoryLayout.ofStruct(\n");
+                } else {
+                    sb.append("MemoryLayout.ofUnion(\n");
+                }
+                incrAlign();
+                String delim = "";
+                for (MemoryLayout e : ((GroupLayout) l).memberLayouts()) {
+                    sb.append(delim);
+                    indent();
+                    addLayout(e);
+                    delim = ",\n";
+                }
+                sb.append("\n");
+                decrAlign();
                 indent();
-                addLayout(e);
-                delim = ",\n";
+                sb.append(")");
             }
-            sb.append("\n");
-            decrAlign();
-            indent();
-            sb.append(")");
         } else {
             //padding
             sb.append("MemoryLayout.ofPaddingBits(" + l.bitSize() + ")");
         }
         if (l.name().isPresent()) {
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
@@ -58,26 +58,32 @@
     public static String getName(Cursor cursor) {
         return cursor.spelling();
     }
 
     public static MemoryLayout getLayout(Type t) {
+        System.out.println(t.spelling() + " -> " + t.kind());
         switch(t.kind()) {
-            case Char_S:
-            case Char_U:
             case UChar:
+            case Char_U:
+                return C_UCHAR;
             case SChar:
+            case Char_S:
                 return C_SCHAR;
-            case UShort:
             case Short:
                 return C_SHORT;
+            case UShort:
+                return C_USHORT;
             case Int:
-            case UInt:
                 return C_INT;
+            case UInt:
+                return C_UINT;
             case ULong:
+                return C_ULONG;
             case Long:
                 return C_LONG;
             case ULongLong:
+                return C_ULONGLONG;
             case LongLong:
                 return C_LONGLONG;
             case UInt128:
             case Int128:
                 throw new UnsupportedOperationException();
diff a/test/jdk/tools/jextract/testStruct/LibStructTest.java b/test/jdk/tools/jextract/testStruct/LibStructTest.java
--- a/test/jdk/tools/jextract/testStruct/LibStructTest.java
+++ b/test/jdk/tools/jextract/testStruct/LibStructTest.java
@@ -19,10 +19,12 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
+import jdk.incubator.foreign.GroupLayout;
+import jdk.incubator.foreign.SystemABI.Type;
 import org.testng.annotations.Test;
 import static org.testng.Assert.assertEquals;
 import static test.jextract.struct.struct_h.*;
 
 /*
@@ -38,6 +40,53 @@
         try (var seg = makePoint(42, -39)) {
             assertEquals(Point$x$get(seg), 42);
             assertEquals(Point$y$get(seg), -39);
         }
     }
+
+    @Test
+    public void testFieldTypes() {
+         GroupLayout g = (GroupLayout)AllTypes$LAYOUT;
+         int fieldCount = 0;
+         for (var ml : g.memberLayouts()) {
+             var type = ml.abiType().orElse(null);
+             if (type == null) {
+                 // ignore paddings
+                 continue;
+             }
+             switch (ml.name().get()) {
+                 case "sc":
+                     assertEquals(type, Type.SIGNED_CHAR);
+                     break;
+                 case "uc":
+                     assertEquals(type, Type.UNSIGNED_CHAR);
+                     break;
+                 case "s":
+                     assertEquals(type, Type.SHORT);
+                     break;
+                 case "us":
+                     assertEquals(type, Type.UNSIGNED_SHORT);
+                     break;
+                 case "i":
+                     assertEquals(type, Type.INT);
+                     break;
+                 case "ui":
+                     assertEquals(type, Type.UNSIGNED_INT);
+                     break;
+                 case "l":
+                     assertEquals(type, Type.LONG);
+                     break;
+                 case "ul":
+                     assertEquals(type, Type.UNSIGNED_LONG);
+                     break;
+                 case "ll":
+                     assertEquals(type, Type.LONG_LONG);
+                     break;
+                 case "ull":
+                     assertEquals(type, Type.UNSIGNED_LONG_LONG);
+                     break;
+             }
+             fieldCount++;
+         }
+         assertEquals(fieldCount, 10);
+    }
 }
diff a/test/jdk/tools/jextract/testStruct/struct.h b/test/jdk/tools/jextract/testStruct/struct.h
--- a/test/jdk/tools/jextract/testStruct/struct.h
+++ b/test/jdk/tools/jextract/testStruct/struct.h
@@ -36,8 +36,21 @@
     int y;
 } Point;
 
 EXPORT Point makePoint(int x, int y);
 
+struct AllTypes {
+    signed char sc;
+    unsigned char uc;
+    short s;
+    unsigned short us;
+    int i;
+    unsigned int ui;
+    long l;
+    unsigned long ul;
+    long long ll;
+    unsigned long long ull;
+};
+
 #ifdef __cplusplus
 }
 #endif // __cplusplus
