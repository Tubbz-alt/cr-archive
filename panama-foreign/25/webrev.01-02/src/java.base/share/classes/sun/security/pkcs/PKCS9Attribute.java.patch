diff a/src/java.base/share/classes/sun/security/pkcs/PKCS9Attribute.java b/src/java.base/share/classes/sun/security/pkcs/PKCS9Attribute.java
--- a/src/java.base/share/classes/sun/security/pkcs/PKCS9Attribute.java
+++ b/src/java.base/share/classes/sun/security/pkcs/PKCS9Attribute.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -28,11 +28,11 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.security.cert.CertificateException;
 import java.util.Locale;
 import java.util.Date;
-import java.util.Hashtable;
+import java.util.HashMap;
 import sun.security.x509.CertificateExtensions;
 import sun.security.util.Debug;
 import sun.security.util.DerEncoder;
 import sun.security.util.DerValue;
 import sun.security.util.DerInputStream;
@@ -188,19 +188,18 @@
 
     private static final Class<?> BYTE_ARRAY_CLASS;
 
     static {   // static initializer for PKCS9_OIDS
         for (int i = 1; i < PKCS9_OIDS.length - 2; i++) {
-            PKCS9_OIDS[i] =
-                ObjectIdentifier.newInternal(new int[]{1,2,840,113549,1,9,i});
+            PKCS9_OIDS[i] = ObjectIdentifier.of("1.2.840.113549.1.9." + i);
         }
         // Initialize SigningCertificate and SignatureTimestampToken
         // separately (because their values are out of sequence)
         PKCS9_OIDS[PKCS9_OIDS.length - 2] =
-            ObjectIdentifier.newInternal(new int[]{1,2,840,113549,1,9,16,2,12});
+            ObjectIdentifier.of("1.2.840.113549.1.9.16.2.12");
         PKCS9_OIDS[PKCS9_OIDS.length - 1] =
-            ObjectIdentifier.newInternal(new int[]{1,2,840,113549,1,9,16,2,14});
+            ObjectIdentifier.of("1.2.840.113549.1.9.16.2.14");
 
         try {
             BYTE_ARRAY_CLASS = Class.forName("[B");
         } catch (ClassNotFoundException e) {
             throw new ExceptionInInitializerError(e.toString());
@@ -246,16 +245,16 @@
     public static final String SIGNING_CERTIFICATE_STR = "SigningCertificate";
     public static final String SIGNATURE_TIMESTAMP_TOKEN_STR =
                                 "SignatureTimestampToken";
 
     /**
-     * Hashtable mapping names and variant names of supported
+     * HashMap mapping names and variant names of supported
      * attributes to their OIDs. This table contains all name forms
      * that occur in PKCS9, in lower case.
      */
-    private static final Hashtable<String, ObjectIdentifier> NAME_OID_TABLE =
-        new Hashtable<String, ObjectIdentifier>(18);
+    private static final HashMap<String, ObjectIdentifier> NAME_OID_TABLE =
+        new HashMap<String, ObjectIdentifier>(17);
 
     static { // static initializer for PCKS9_NAMES
         NAME_OID_TABLE.put("emailaddress", PKCS9_OIDS[1]);
         NAME_OID_TABLE.put("unstructuredname", PKCS9_OIDS[2]);
         NAME_OID_TABLE.put("contenttype", PKCS9_OIDS[3]);
@@ -274,15 +273,15 @@
         NAME_OID_TABLE.put("signingcertificate", PKCS9_OIDS[16]);
         NAME_OID_TABLE.put("signaturetimestamptoken", PKCS9_OIDS[17]);
     };
 
     /**
-     * Hashtable mapping attribute OIDs defined in PKCS9 to the
+     * HashMap mapping attribute OIDs defined in PKCS9 to the
      * corresponding attribute value type.
      */
-    private static final Hashtable<ObjectIdentifier, String> OID_NAME_TABLE =
-        new Hashtable<ObjectIdentifier, String>(16);
+    private static final HashMap<ObjectIdentifier, String> OID_NAME_TABLE =
+        new HashMap<ObjectIdentifier, String>(17);
     static {
         OID_NAME_TABLE.put(PKCS9_OIDS[1], EMAIL_ADDRESS_STR);
         OID_NAME_TABLE.put(PKCS9_OIDS[2], UNSTRUCTURED_NAME_STR);
         OID_NAME_TABLE.put(PKCS9_OIDS[3], CONTENT_TYPE_STR);
         OID_NAME_TABLE.put(PKCS9_OIDS[4], MESSAGE_DIGEST_STR);
@@ -314,11 +313,14 @@
         {DerValue.tag_ObjectId},    // ContentType
         {DerValue.tag_OctetString}, // MessageDigest
         {DerValue.tag_UtcTime},     // SigningTime
         {DerValue.tag_Sequence},    // Countersignature
         {DerValue.tag_PrintableString,
-         DerValue.tag_T61String},   // ChallengePassword
+         DerValue.tag_T61String,
+         DerValue.tag_BMPString,
+         DerValue.tag_UniversalString,
+         DerValue.tag_UTF8String},   // ChallengePassword
         {DerValue.tag_PrintableString,
          DerValue.tag_T61String},   // UnstructuredAddress
         {DerValue.tag_SetOf},       // ExtendedCertificateAttributes
         {DerValue.tag_Sequence},    // issuerAndSerialNumber
         null,
@@ -507,13 +509,12 @@
         if (SINGLE_VALUED[index] && elems.length > 1)
             throwSingleValuedException();
 
         // check for illegal element tags
         Byte tag;
-        for (int i=0; i < elems.length; i++) {
-            tag = elems[i].tag;
-
+        for (DerValue elem : elems) {
+            tag = elem.tag;
             if (indexOf(tag, PKCS9_VALUE_TAGS[index], 0) == -1)
                 throwTagException(tag);
         }
 
         switch (index) {
@@ -598,10 +599,11 @@
      * <P> N.B.: This method always encodes values of
      * ChallengePassword and UnstructuredAddress attributes as ASN.1
      * <code>PrintableString</code>s, without checking whether they
      * should be encoded as <code>T61String</code>s.
      */
+    @Override
     public void derEncode(OutputStream out) throws IOException {
         DerOutputStream temp = new DerOutputStream();
         temp.putOID(oid);
         switch (index) {
         case -1:    // Unknown
@@ -786,10 +788,11 @@
     }
 
     /**
      * Returns a string representation of this attribute.
      */
+    @Override
     public String toString() {
         StringBuilder sb = new StringBuilder(100);
 
         sb.append("[");
 
@@ -811,17 +814,16 @@
             return sb.toString();
         } else { // multi-valued
             boolean first = true;
             Object[] values = (Object[]) value;
 
-            for (int j=0; j < values.length; j++) {
+            for (Object curVal : values) {
                 if (first)
                     first = false;
                 else
                     sb.append(", ");
-
-                sb.append(values[j].toString());
+                sb.append(curVal.toString());
             }
             return sb.toString();
         }
     }
 
