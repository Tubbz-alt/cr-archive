diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TreeMaker.java
@@ -51,10 +51,14 @@
 
     public TreeMaker() {}
 
     TypeMaker typeMaker = new TypeMaker(this);
 
+    public void freeze() {
+        typeMaker.resolveTypeReferences();
+    }
+
     private <T extends Declaration> T checkCache(Cursor c, Class<T> clazz, Supplier<Declaration> factory) {
         // The supplier function may lead to adding some other type, which will cause CME using computeIfAbsent.
         // This implementation relax the constraint a bit only check for same key
         Declaration rv;
         if (treeCache.containsKey(c)) {
@@ -119,28 +123,35 @@
         return new CursorPosition(cursor);
     }
 
     static class CursorPosition implements Position {
         private final Cursor cursor;
+        private final Path path;
+        private final int line;
+        private final int column;
 
         CursorPosition(Cursor cursor) {
             this.cursor = cursor;
+            SourceLocation.Location loc = cursor.getSourceLocation().getFileLocation();
+            this.path = loc.path();
+            this.line = loc.line();
+            this.column = loc.column();
         }
 
         @Override
         public Path path() {
-            return cursor.getSourceLocation().getFileLocation().path();
+            return path;
         }
 
         @Override
         public int line() {
-            return cursor.getSourceLocation().getFileLocation().line();
+            return line;
         }
 
         @Override
         public int col() {
-            return cursor.getSourceLocation().getFileLocation().column();
+            return column;
         }
 
         public Cursor cursor() {
             return cursor;
         }
