diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/JavaSourceBuilder.java
@@ -130,36 +130,29 @@
     }
 
     private void addLayout(MemoryLayout l) {
         if (l instanceof ValueLayout) {
             SystemABI.Type type = l.abiType().orElseThrow(()->new AssertionError("Should not get here: " + l));
-            if (type == SystemABI.Type.LONG_DOUBLE) {
-                if (ABI != SystemABI.ABI_SYSV) {
-                    throw new RuntimeException("long double is supported only for SysV ABI");
-                } else {
-                    sb.append("C_LONGDOUBLE");
-                }
-            } else {
-                sb.append(switch (type) {
-                    case BOOL -> "C_BOOL";
-                    case SIGNED_CHAR -> "C_SCHAR";
-                    case UNSIGNED_CHAR -> "C_UCHAR";
-                    case CHAR -> "C_CHAR";
-                    case SHORT -> "C_SHORT";
-                    case UNSIGNED_SHORT -> "C_USHORT";
-                    case INT -> "C_INT";
-                    case UNSIGNED_INT -> "C_UINT";
-                    case LONG -> "C_LONG";
-                    case UNSIGNED_LONG -> "C_ULONG";
-                    case LONG_LONG -> "C_LONGLONG";
-                    case UNSIGNED_LONG_LONG -> "C_ULONGLONG";
-                    case FLOAT -> "C_FLOAT";
-                    case DOUBLE -> "C_DOUBLE";
-                    case POINTER -> "C_POINTER";
-                    default -> { throw new RuntimeException("should not reach here: " + type); }
-                });
-            }
+            sb.append(switch (type) {
+                case BOOL -> "C_BOOL";
+                case SIGNED_CHAR -> "C_SCHAR";
+                case UNSIGNED_CHAR -> "C_UCHAR";
+                case CHAR -> "C_CHAR";
+                case SHORT -> "C_SHORT";
+                case UNSIGNED_SHORT -> "C_USHORT";
+                case INT -> "C_INT";
+                case UNSIGNED_INT -> "C_UINT";
+                case LONG -> "C_LONG";
+                case UNSIGNED_LONG -> "C_ULONG";
+                case LONG_LONG -> "C_LONGLONG";
+                case UNSIGNED_LONG_LONG -> "C_ULONGLONG";
+                case FLOAT -> "C_FLOAT";
+                case DOUBLE -> "C_DOUBLE";
+                case LONG_DOUBLE -> "C_LONGDOUBLE";
+                case POINTER -> "C_POINTER";
+                default -> { throw new RuntimeException("should not reach here: " + type); }
+            });
         } else if (l instanceof SequenceLayout) {
             sb.append("MemoryLayout.ofSequence(");
             if (((SequenceLayout) l).elementCount().isPresent()) {
                 sb.append(((SequenceLayout) l).elementCount().getAsLong() + ", ");
             }
