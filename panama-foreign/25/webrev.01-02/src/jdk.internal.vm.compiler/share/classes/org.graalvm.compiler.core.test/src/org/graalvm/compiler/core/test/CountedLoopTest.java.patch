diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.test/src/org/graalvm/compiler/core/test/CountedLoopTest.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.test/src/org/graalvm/compiler/core/test/CountedLoopTest.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.test/src/org/graalvm/compiler/core/test/CountedLoopTest.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.test/src/org/graalvm/compiler/core/test/CountedLoopTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -42,13 +42,15 @@
 import org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins;
 import org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins.Registration;
 import org.graalvm.compiler.nodes.spi.LIRLowerable;
 import org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool;
 import org.graalvm.compiler.nodes.util.GraphUtil;
+import org.graalvm.compiler.options.OptionValues;
 import org.graalvm.compiler.phases.OptimisticOptimizations;
 import org.junit.Test;
 
+import jdk.vm.ci.code.InstalledCode;
 import jdk.vm.ci.meta.JavaKind;
 import jdk.vm.ci.meta.ResolvedJavaMethod;
 
 public class CountedLoopTest extends GraalCompilerTest {
 
@@ -645,12 +647,12 @@
         assert graph.getNodes().filter(IVPropertyNode.class).isEmpty();
     }
 
     @Override
     protected OptimisticOptimizations getOptimisticOptimizations() {
-        // Don't convert unreached paths into Guard
-        return OptimisticOptimizations.ALL.remove(OptimisticOptimizations.Optimization.RemoveNeverExecutedCode);
+        // Disable profile based optimizations
+        return OptimisticOptimizations.NONE;
     }
 
     private Object[] argsToBind;
     private boolean loopCanBeRemoved;
 
@@ -673,10 +675,16 @@
 
     public void testRemovableCounted(String snippetName, Object start, Object limit, Object step) {
         testCounted(true, snippetName, start, limit, step);
     }
 
+    @Override
+    protected InstalledCode getCode(ResolvedJavaMethod installedCodeOwner, StructuredGraph graph, boolean forceCompile, boolean installAsDefault, OptionValues options) {
+        installedCodeOwner.reprofile();
+        return super.getCode(installedCodeOwner, graph, forceCompile, installAsDefault, options);
+    }
+
     public void testCounted(boolean removable, String snippetName, Object start, Object limit, Object step) {
         this.loopCanBeRemoved = removable;
         Object[] args = {start, limit, step};
         test(snippetName, args);
         this.argsToBind = args;
