diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64MathTanOp.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64MathTanOp.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64MathTanOp.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64MathTanOp.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2016, Intel Corporation. All rights reserved.
  * Intel Math Library (LIBM) Source Code
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -49,10 +49,11 @@
 import static org.graalvm.compiler.lir.amd64.AMD64HotSpotHelper.recordExternalAddress;
 
 import org.graalvm.compiler.asm.Label;
 import org.graalvm.compiler.asm.amd64.AMD64Address;
 import org.graalvm.compiler.asm.amd64.AMD64Assembler;
+import org.graalvm.compiler.asm.amd64.AMD64Assembler.ConditionFlag;
 import org.graalvm.compiler.asm.amd64.AMD64MacroAssembler;
 import org.graalvm.compiler.lir.LIRInstructionClass;
 import org.graalvm.compiler.lir.asm.ArrayDataPointerConstant;
 import org.graalvm.compiler.lir.asm.CompilationResultBuilder;
 
@@ -577,12 +578,11 @@
         masm.movsd(new AMD64Address(rsp, 8), xmm0);
 
         masm.pextrw(rax, xmm0, 3);
         masm.andl(rax, 32767);
         masm.subl(rax, 16314);
-        masm.cmpl(rax, 270);
-        masm.jcc(AMD64Assembler.ConditionFlag.Above, block0);
+        masm.cmplAndJcc(rax, 270, ConditionFlag.Above, block0, false);
         masm.movdqu(xmm5, recordExternalAddress(crb, onehalf));        // 0x00000000, 0x3fe00000,
                                                                        // 0x00000000, 0x3fe00000
         masm.movdqu(xmm6, recordExternalAddress(crb, mul16));          // 0x00000000, 0x40300000,
                                                                        // 0x00000000, 0x3ff00000
         masm.unpcklpd(xmm0, xmm0);
@@ -699,15 +699,13 @@
 
         masm.bind(block0);
         masm.jcc(AMD64Assembler.ConditionFlag.Greater, block1);
         masm.pextrw(rax, xmm0, 3);
         masm.movl(rdx, rax);
-        masm.andl(rax, 32752);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block2);
+        masm.andlAndJcc(rax, 32752, ConditionFlag.Equal, block2, false);
         masm.andl(rdx, 32767);
-        masm.cmpl(rdx, 15904);
-        masm.jcc(AMD64Assembler.ConditionFlag.Below, block3);
+        masm.cmplAndJcc(rdx, 15904, ConditionFlag.Below, block3, false);
         masm.movdqu(xmm2, xmm0);
         masm.movdqu(xmm3, xmm0);
         masm.movq(xmm1, recordExternalAddress(crb, q11));              // 0xb8fe4d77, 0x3f82609a
         masm.mulsd(xmm2, xmm0);
         masm.mulsd(xmm3, xmm2);
@@ -736,12 +734,11 @@
         masm.jmp(block14);
 
         masm.bind(block1);
         masm.pextrw(rax, xmm0, 3);
         masm.andl(rax, 32752);
-        masm.cmpl(rax, 32752);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block4);
+        masm.cmplAndJcc(rax, 32752, ConditionFlag.Equal, block4, false);
         masm.pextrw(rcx, xmm0, 3);
         masm.andl(rcx, 32752);
         masm.subl(rcx, 16224);
         masm.shrl(rcx, 7);
         masm.andl(rcx, 65532);
@@ -829,35 +826,31 @@
         masm.subl(rbx, 1023);
         masm.subl(rcx, rbx);
         masm.addq(r9, rdx);
         masm.movl(rdx, rcx);
         masm.addl(rdx, 32);
-        masm.cmpl(rcx, 0);
-        masm.jcc(AMD64Assembler.ConditionFlag.Less, block5);
+        masm.cmplAndJcc(rcx, 0, ConditionFlag.Less, block5, false);
         masm.negl(rcx);
         masm.addl(rcx, 29);
         masm.shll(r9);
         masm.movl(rdi, r9);
         masm.andl(r9, 1073741823);
-        masm.testl(r9, 536870912);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block6);
+        masm.testlAndJcc(r9, 536870912, ConditionFlag.NotEqual, block6, false);
         masm.shrl(r9);
         masm.movl(rbx, 0);
         masm.shlq(r9, 32);
         masm.orq(r9, r11);
 
         masm.bind(block7);
 
         masm.bind(block8);
-        masm.cmpq(r9, 0);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block9);
+        masm.cmpqAndJcc(r9, 0, ConditionFlag.Equal, block9, false);
 
         masm.bind(block10);
         masm.bsrq(r11, r9);
         masm.movl(rcx, 29);
-        masm.subl(rcx, r11);
-        masm.jcc(AMD64Assembler.ConditionFlag.LessEqual, block11);
+        masm.sublAndJcc(rcx, r11, ConditionFlag.LessEqual, block11, false);
         masm.shlq(r9);
         masm.movq(rax, r10);
         masm.shlq(r10);
         masm.addl(rdx, rcx);
         masm.negl(rcx);
@@ -1034,17 +1027,15 @@
         masm.bind(block9);
         masm.addl(rdx, 64);
         masm.movq(r9, r10);
         masm.movq(r10, r8);
         masm.movl(r8, 0);
-        masm.cmpq(r9, 0);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block10);
+        masm.cmpqAndJcc(r9, 0, ConditionFlag.NotEqual, block10, false);
         masm.addl(rdx, 64);
         masm.movq(r9, r10);
         masm.movq(r10, r8);
-        masm.cmpq(r9, 0);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block10);
+        masm.cmpqAndJcc(r9, 0, ConditionFlag.NotEqual, block10, false);
         masm.jmp(block12);
 
         masm.bind(block11);
         masm.jcc(AMD64Assembler.ConditionFlag.Equal, block12);
         masm.negl(rcx);
@@ -1062,12 +1053,11 @@
         masm.notl(rcx);
         masm.shlq(r9, 32);
         masm.orq(r9, r11);
         masm.shlq(r9);
         masm.movq(rdi, r9);
-        masm.testl(r9, Integer.MIN_VALUE);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block13);
+        masm.testlAndJcc(r9, Integer.MIN_VALUE, ConditionFlag.NotEqual, block13, false);
         masm.shrl(r9);
         masm.movl(rbx, 0);
         masm.shrq(rdi, 2);
         masm.jmp(block8);
 
