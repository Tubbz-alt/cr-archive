diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.aarch64/src/org/graalvm/compiler/core/aarch64/AArch64AddressLoweringByUse.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.aarch64/src/org/graalvm/compiler/core/aarch64/AArch64AddressLoweringByUse.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.aarch64/src/org/graalvm/compiler/core/aarch64/AArch64AddressLoweringByUse.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.aarch64/src/org/graalvm/compiler/core/aarch64/AArch64AddressLoweringByUse.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2017, Red Hat Inc. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
@@ -24,28 +24,36 @@
 
 
 
 package org.graalvm.compiler.core.aarch64;
 
-import org.graalvm.compiler.asm.aarch64.AArch64Address;
+import org.graalvm.compiler.asm.aarch64.AArch64Address.AddressingMode;
 import org.graalvm.compiler.core.common.LIRKind;
 import org.graalvm.compiler.core.common.NumUtil;
 import org.graalvm.compiler.core.common.type.Stamp;
 import org.graalvm.compiler.nodes.ValueNode;
 import org.graalvm.compiler.nodes.calc.AddNode;
+import org.graalvm.compiler.nodes.calc.LeftShiftNode;
+import org.graalvm.compiler.nodes.calc.ZeroExtendNode;
 import org.graalvm.compiler.nodes.memory.address.AddressNode;
 import org.graalvm.compiler.nodes.memory.address.OffsetAddressNode;
 import org.graalvm.compiler.phases.common.AddressLoweringByUsePhase;
 
 import jdk.vm.ci.aarch64.AArch64Kind;
 import jdk.vm.ci.meta.JavaConstant;
 
 public class AArch64AddressLoweringByUse extends AddressLoweringByUsePhase.AddressLoweringByUse {
     private AArch64LIRKindTool kindtool;
+    private boolean supportsDerivedReference;
 
     public AArch64AddressLoweringByUse(AArch64LIRKindTool kindtool) {
+        this(kindtool, true);
+    }
+
+    public AArch64AddressLoweringByUse(AArch64LIRKindTool kindtool, boolean supportsDerivedReference) {
         this.kindtool = kindtool;
+        this.supportsDerivedReference = supportsDerivedReference;
     }
 
     @Override
     public AddressNode lower(ValueNode use, Stamp stamp, AddressNode address) {
         if (address instanceof OffsetAddressNode) {
@@ -74,12 +82,12 @@
 
         // avoid duplicates
         return base.graph().unique(ret);
     }
 
-    protected boolean improve(AArch64Kind kind, AArch64AddressNode ret) {
-        AArch64Address.AddressingMode mode = ret.getAddressingMode();
+    private boolean improve(AArch64Kind kind, AArch64AddressNode ret) {
+        AddressingMode mode = ret.getAddressingMode();
         // if we have already set a displacement or set to base only mode then we are done
         if (isDisplacementMode(mode) || isBaseOnlyMode(mode)) {
             return false;
         }
         ValueNode base = ret.getBase();
@@ -126,24 +134,24 @@
                         AddNode add = (AddNode) base;
                         tryNextBase = false;
                         ValueNode child = add.getX();
                         if (child.isJavaConstant() && child.asJavaConstant().getJavaKind().isNumericInteger()) {
                             long newDisp = disp + child.asJavaConstant().asLong();
-                            AArch64Address.AddressingMode newMode = immediateMode(kind, newDisp);
-                            if (newMode != AArch64Address.AddressingMode.REGISTER_OFFSET) {
+                            AddressingMode newMode = immediateMode(kind, newDisp);
+                            if (newMode != AddressingMode.REGISTER_OFFSET) {
                                 disp = newDisp;
                                 mode = newMode;
                                 base = add.getY();
                                 ret.setBase(base);
                                 tryNextBase = (base instanceof AddNode);
                             }
                         } else {
                             child = add.getY();
                             if (child.isJavaConstant() && child.asJavaConstant().getJavaKind().isNumericInteger()) {
                                 long newDisp = disp + child.asJavaConstant().asLong();
-                                AArch64Address.AddressingMode newMode = immediateMode(kind, newDisp);
-                                if (newMode != AArch64Address.AddressingMode.REGISTER_OFFSET) {
+                                AddressingMode newMode = immediateMode(kind, newDisp);
+                                if (newMode != AddressingMode.REGISTER_OFFSET) {
                                     disp = newDisp;
                                     mode = newMode;
                                     base = add.getX();
                                     ret.setBase(base);
                                     tryNextBase = (base instanceof AddNode);
@@ -157,16 +165,58 @@
                         int scaleFactor = computeScaleFactor(kind, mode);
                         ret.setDisplacement(disp, scaleFactor, mode);
                     } else {
                         // reset to base register only
                         ret.setIndex(null);
-                        ret.setDisplacement(0, 1, AArch64Address.AddressingMode.BASE_REGISTER_ONLY);
+                        ret.setDisplacement(0, 1, AddressingMode.BASE_REGISTER_ONLY);
                     }
                     return true;
                 }
             }
         }
+
+        // We try to convert (OffsetAddress base (Add (LeftShift (Ext i) k) #imm))
+        // to (AArch64AddressNode (AArch64PointerAdd (base (LeftShift (Ext i) k)) #imm)
+        if (supportsDerivedReference && index != null && index instanceof AddNode && index.getStackKind().isNumericInteger()) {
+            ValueNode x = ((AddNode) index).getX();
+            ValueNode y = ((AddNode) index).getY();
+            ValueNode objHeadOffset = null;
+            ValueNode scaledIndex = null;
+            if (x.isConstant()) {
+                objHeadOffset = x;
+                scaledIndex = y;
+            } else if (y.isConstant()) {
+                objHeadOffset = y;
+                scaledIndex = x;
+            }
+
+            if (scaledIndex == null || objHeadOffset == null) {
+                return false;
+            }
+
+            ZeroExtendNode wordIndex = null;
+            if (scaledIndex instanceof LeftShiftNode) {
+                ValueNode var = ((LeftShiftNode) scaledIndex).getX();
+                ValueNode amount = ((LeftShiftNode) scaledIndex).getY();
+                if (amount.isConstant() && var instanceof ZeroExtendNode) {
+                    int s = amount.asJavaConstant().asInt();
+                    if (s >= 0 && s <= 4) {
+                        wordIndex = (ZeroExtendNode) var;
+                    }
+                }
+            } else if (scaledIndex instanceof ZeroExtendNode) {
+                wordIndex = (ZeroExtendNode) scaledIndex;
+            }
+
+            if (wordIndex != null) {
+                AArch64PointerAddNode addP = base.graph().unique(new AArch64PointerAddNode(base, scaledIndex));
+                ret.setBase(addP);
+                ret.setIndex(objHeadOffset);
+                return true;
+            }
+        }
+
         // nope cannot improve this any more
         return false;
     }
 
     private AArch64Kind getAArch64Kind(Stamp stamp) {
@@ -178,45 +228,45 @@
         }
 
         return (AArch64Kind) lirKind.getPlatformKind();
     }
 
-    private static AArch64Address.AddressingMode immediateMode(AArch64Kind kind, long value) {
+    private static AddressingMode immediateMode(AArch64Kind kind, long value) {
         if (kind != null) {
             int size = kind.getSizeInBytes();
             // this next test should never really fail
             if ((value & (size - 1)) == 0) {
                 long encodedValue = value / size;
                 // assert value % size == 0
                 // we can try for a 12 bit scaled offset
                 if (NumUtil.isUnsignedNbit(12, encodedValue)) {
-                    return AArch64Address.AddressingMode.IMMEDIATE_SCALED;
+                    return AddressingMode.IMMEDIATE_SCALED;
                 }
             }
         }
 
         // we can try for a 9 bit unscaled offset
         if (NumUtil.isSignedNbit(9, value)) {
-            return AArch64Address.AddressingMode.IMMEDIATE_UNSCALED;
+            return AddressingMode.IMMEDIATE_UNSCALED;
         }
 
         // nope this index needs to be passed via offset register
-        return AArch64Address.AddressingMode.REGISTER_OFFSET;
+        return AddressingMode.REGISTER_OFFSET;
     }
 
-    private static int computeScaleFactor(AArch64Kind kind, AArch64Address.AddressingMode mode) {
-        if (mode == AArch64Address.AddressingMode.IMMEDIATE_SCALED) {
+    private static int computeScaleFactor(AArch64Kind kind, AddressingMode mode) {
+        if (mode == AddressingMode.IMMEDIATE_SCALED) {
             return kind.getSizeInBytes();
         }
         return 1;
     }
 
-    boolean isBaseOnlyMode(AArch64Address.AddressingMode addressingMode) {
-        return addressingMode == AArch64Address.AddressingMode.BASE_REGISTER_ONLY;
+    boolean isBaseOnlyMode(AddressingMode addressingMode) {
+        return addressingMode == AddressingMode.BASE_REGISTER_ONLY;
     }
 
-    private static boolean isDisplacementMode(AArch64Address.AddressingMode addressingMode) {
+    private static boolean isDisplacementMode(AddressingMode addressingMode) {
         switch (addressingMode) {
             case IMMEDIATE_POST_INDEXED:
             case IMMEDIATE_PRE_INDEXED:
             case IMMEDIATE_SCALED:
             case IMMEDIATE_UNSCALED:
