diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.code/src/org/graalvm/compiler/code/CompilationResult.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.code/src/org/graalvm/compiler/code/CompilationResult.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.code/src/org/graalvm/compiler/code/CompilationResult.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.code/src/org/graalvm/compiler/code/CompilationResult.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -32,10 +32,11 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
+import java.util.function.Function;
 
 import jdk.internal.vm.compiler.collections.EconomicSet;
 import org.graalvm.compiler.core.common.CompilationIdentifier;
 import org.graalvm.compiler.graph.NodeSourcePosition;
 
@@ -68,11 +69,11 @@
      * {@link CompilationResult#getTargetCode()}. This is optional information that can be used to
      * enhance a disassembly of the code.
      */
     public abstract static class CodeAnnotation {
 
-        public final int position;
+        private int position;
 
         public CodeAnnotation(int position) {
             this.position = position;
         }
 
@@ -86,10 +87,18 @@
             return identityHashCodeString(this);
         }
 
         @Override
         public abstract boolean equals(Object obj);
+
+        public int getPosition() {
+            return position;
+        }
+
+        void setPosition(int position) {
+            this.position = position;
+        }
     }
 
     /**
      * A string comment about one or more instructions at a specific position in the code.
      */
@@ -107,20 +116,20 @@
             if (this == obj) {
                 return true;
             }
             if (obj instanceof CodeComment) {
                 CodeComment that = (CodeComment) obj;
-                if (this.position == that.position && this.value.equals(that.value)) {
+                if (this.getPosition() == that.getPosition() && this.value.equals(that.value)) {
                     return true;
                 }
             }
             return false;
         }
 
         @Override
         public String toString() {
-            return getClass().getSimpleName() + "@" + position + ": " + value;
+            return getClass().getSimpleName() + "@" + getPosition() + ": " + value;
         }
     }
 
     /**
      * Describes a table of signed offsets embedded in the code. The offsets are relative to the
@@ -160,20 +169,20 @@
             if (this == obj) {
                 return true;
             }
             if (obj instanceof JumpTable) {
                 JumpTable that = (JumpTable) obj;
-                if (this.position == that.position && this.entrySize == that.entrySize && this.low == that.low && this.high == that.high) {
+                if (this.getPosition() == that.getPosition() && this.entrySize == that.entrySize && this.low == that.low && this.high == that.high) {
                     return true;
                 }
             }
             return false;
         }
 
         @Override
         public String toString() {
-            return getClass().getSimpleName() + "@" + position + ": [" + low + " .. " + high + "]";
+            return getClass().getSimpleName() + "@" + getPosition() + ": [" + low + " .. " + high + "]";
         }
     }
 
     private boolean closed;
 
@@ -765,6 +774,37 @@
             throw new IllegalStateException("Cannot re-close compilation result " + this);
         }
         dataSection.close();
         closed = true;
     }
+
+    public void shiftCodePatch(int pos, int bytesToShift) {
+        iterateAndReplace(infopoints, pos, site -> {
+            if (site instanceof Call) {
+                Call call = (Call) site;
+                return new Call(call.target, site.pcOffset + bytesToShift, call.size, call.direct, call.debugInfo);
+            } else {
+                return new Infopoint(site.pcOffset + bytesToShift, site.debugInfo, site.reason);
+            }
+        });
+        iterateAndReplace(dataPatches, pos, site -> new DataPatch(site.pcOffset + bytesToShift, site.reference, site.note));
+        iterateAndReplace(exceptionHandlers, pos, site -> new ExceptionHandler(site.pcOffset + bytesToShift, site.handlerPos));
+        iterateAndReplace(marks, pos, site -> new Mark(site.pcOffset + bytesToShift, site.id));
+        if (annotations != null) {
+            for (CodeAnnotation annotation : annotations) {
+                int annotationPos = annotation.position;
+                if (pos <= annotationPos) {
+                    annotation.setPosition(annotationPos + bytesToShift);
+                }
+            }
+        }
+    }
+
+    private static <T extends Site> void iterateAndReplace(List<T> sites, int pos, Function<T, T> replacement) {
+        for (int i = 0; i < sites.size(); i++) {
+            T site = sites.get(i);
+            if (pos <= site.pcOffset) {
+                sites.set(i, replacement.apply(site));
+            }
+        }
+    }
 }
