diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.virtual/src/org/graalvm/compiler/virtual/phases/ea/EarlyReadEliminationPhase.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.virtual/src/org/graalvm/compiler/virtual/phases/ea/EarlyReadEliminationPhase.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.virtual/src/org/graalvm/compiler/virtual/phases/ea/EarlyReadEliminationPhase.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.virtual/src/org/graalvm/compiler/virtual/phases/ea/EarlyReadEliminationPhase.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -29,14 +29,41 @@
 import org.graalvm.compiler.nodes.StructuredGraph;
 import org.graalvm.compiler.nodes.StructuredGraph.ScheduleResult;
 import org.graalvm.compiler.nodes.cfg.ControlFlowGraph;
 import org.graalvm.compiler.nodes.spi.CoreProviders;
 import org.graalvm.compiler.phases.common.CanonicalizerPhase;
+import org.graalvm.compiler.phases.graph.ReentrantBlockIterator;
+import jdk.internal.vm.compiler.word.LocationIdentity;
 
+/**
+ * This phase performs read and (simple) write elimination on a graph. It operates on multiple
+ * granularities, i.e., before and after high-tier lowering. The phase iterates the graph in a
+ * reverse-post-order fashion {@linkplain ReentrantBlockIterator} and tracks the currently active
+ * value for a specific {@linkplain LocationIdentity}, which allows the removal of subsequent reads
+ * if no writes happen in between, etc. if the value read from memory is in a virtual register
+ * (node).
+ *
+ * A trivial example for read elimination can be seen below:
+ *
+ * <pre>
+ * int i = object.fieldValue;
+ * // code not changing object.fieldValue but using i
+ * consume(object.fieldValue);
+ * </pre>
+ *
+ * Read elimination will transform this piece of code to the code below and remove the second,
+ * unnecessary, memory read of the field:
+ *
+ * <pre>
+ * int i = object.fieldValue;
+ * // code not changing object.fieldValue but using i
+ * consume(i);
+ * </pre>
+ */
 public class EarlyReadEliminationPhase extends EffectsPhase<CoreProviders> {
 
-    private final boolean considerGuards;
+    protected final boolean considerGuards;
 
     public EarlyReadEliminationPhase(CanonicalizerPhase canonicalizer) {
         super(1, canonicalizer, true);
         this.considerGuards = true;
     }
