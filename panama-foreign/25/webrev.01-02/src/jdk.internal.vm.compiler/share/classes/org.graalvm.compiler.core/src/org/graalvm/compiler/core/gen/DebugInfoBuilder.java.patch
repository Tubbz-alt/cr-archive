diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core/src/org/graalvm/compiler/core/gen/DebugInfoBuilder.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core/src/org/graalvm/compiler/core/gen/DebugInfoBuilder.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core/src/org/graalvm/compiler/core/gen/DebugInfoBuilder.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core/src/org/graalvm/compiler/core/gen/DebugInfoBuilder.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -138,13 +138,27 @@
                             slotKinds[pos] = toSlotKind(value);
                             pos++;
                         } else {
                             assert value.getStackKind() == JavaKind.Illegal;
                             ValueNode previousValue = currentField.values().get(i - 1);
-                            assert (previousValue != null && previousValue.getStackKind().needsTwoSlots()) : vobjNode + " " + i +
+                            assert (previousValue != null && (previousValue.getStackKind().needsTwoSlots()) || vobjNode.isVirtualByteArray()) : vobjNode + " " + i +
                                             " " + previousValue + " " + currentField.values().snapshot();
-                            if (previousValue == null || !previousValue.getStackKind().needsTwoSlots()) {
+                            if (vobjNode.isVirtualByteArray()) {
+                                /*
+                                 * Let Illegals pass through to help knowing the number of bytes to
+                                 * write. For example, writing a short to index 2 of a byte array of
+                                 * size 6 would look like, in debug info:
+                                 *
+                                 * {b0, b1, INT(...), ILLEGAL, b4, b5}
+                                 *
+                                 * Thus, from the VM, we can simply count the number of illegals to
+                                 * restore the byte count.
+                                 */
+                                values[pos] = Value.ILLEGAL;
+                                slotKinds[pos] = JavaKind.Illegal;
+                                pos++;
+                            } else if (previousValue == null || !previousValue.getStackKind().needsTwoSlots()) {
                                 // Don't allow the IllegalConstant to leak into the debug info
                                 JavaKind entryKind = vobjNode.entryKind(i);
                                 values[pos] = JavaConstant.defaultForKind(entryKind.getStackKind());
                                 slotKinds[pos] = entryKind.getStackKind();
                                 pos++;
@@ -201,11 +215,13 @@
                     for (int i = 0; i < values.length; i++) {
                         assert slotKinds[i].isObject() : slotKinds[i] + " != " + componentKind;
                     }
                 } else {
                     for (int i = 0; i < values.length; i++) {
-                        assert slotKinds[i] == componentKind || componentKind.getBitCount() >= slotKinds[i].getBitCount() ||
+                        assert slotKinds[i] == componentKind ||
+                                        (slotKinds[i] == JavaKind.Illegal && storageKind(type.getComponentType()) == JavaKind.Byte) ||
+                                        componentKind.getBitCount() >= slotKinds[i].getBitCount() ||
                                         (componentKind == JavaKind.Int && slotKinds[i].getBitCount() >= JavaKind.Int.getBitCount()) : slotKinds[i] + " != " + componentKind;
                     }
                 }
             }
         }
