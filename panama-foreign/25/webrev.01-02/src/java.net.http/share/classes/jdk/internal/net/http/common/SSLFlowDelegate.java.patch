diff a/src/java.net.http/share/classes/jdk/internal/net/http/common/SSLFlowDelegate.java b/src/java.net.http/share/classes/jdk/internal/net/http/common/SSLFlowDelegate.java
--- a/src/java.net.http/share/classes/jdk/internal/net/http/common/SSLFlowDelegate.java
+++ b/src/java.net.http/share/classes/jdk/internal/net/http/common/SSLFlowDelegate.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -227,10 +227,14 @@
 
     protected SchedulingAction enterReadScheduling() {
         return SchedulingAction.CONTINUE;
     }
 
+    protected Throwable checkForHandshake(Throwable t) {
+        return t;
+    }
+
 
     /**
      * Processing function for incoming data. Pass it thru SSLEngine.unwrap().
      * Any decrypted buffers returned to be passed downstream.
      * Status codes:
@@ -354,10 +358,16 @@
                     minBytesRequired = 0;
                 }
             }
         }
 
+        @Override
+        protected boolean errorCommon(Throwable throwable) {
+            throwable = SSLFlowDelegate.this.checkForHandshake(throwable);
+            return super.errorCommon(throwable);
+        }
+
         void schedule() {
             scheduler.runOrSchedule(exec);
         }
 
         void stop() {
@@ -477,12 +487,13 @@
                             if (trySetALPN()) {
                                 resumeActivity();
                             }
                         }
                     } catch (IOException ex) {
-                        errorCommon(ex);
-                        handleError(ex);
+                        Throwable cause = checkForHandshake(ex);
+                        errorCommon(cause);
+                        handleError(cause);
                         return;
                     }
                     if (handshaking && !complete) {
                         requestMoreDataIfNeeded();
                         return;
@@ -502,10 +513,11 @@
                     outgoing(Utils.EMPTY_BB_LIST, true);
                 } else {
                     requestMoreDataIfNeeded();
                 }
             } catch (Throwable ex) {
+                ex = checkForHandshake(ex);
                 errorCommon(ex);
                 handleError(ex);
             }
         }
 
@@ -821,10 +833,11 @@
                 }
                 if (writeList.isEmpty() && needWrap()) {
                     writer.addData(HS_TRIGGER);
                 }
             } catch (Throwable ex) {
+                ex = checkForHandshake(ex);
                 errorCommon(ex);
                 handleError(ex);
             }
         }
 
@@ -1125,11 +1138,11 @@
                     // We're no longer handshaking, try setting ALPN
                     trySetALPN();
                 }
                 resumeActivity();
             } catch (Throwable t) {
-                handleError(t);
+                handleError(checkForHandshake(t));
             }
         });
     }
 
     boolean trySetALPN() {
