diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/api/JavadocTaskImpl.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/api/JavadocTaskImpl.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/api/JavadocTaskImpl.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/api/JavadocTaskImpl.java
@@ -27,11 +27,10 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
-import java.util.Objects;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import javax.tools.DocumentationTool.DocumentationTask;
 import javax.tools.JavaFileObject;
 
@@ -52,18 +51,21 @@
  */
 public class JavadocTaskImpl implements DocumentationTask {
     private final AtomicBoolean used = new AtomicBoolean();
 
     private final Context context;
-    private Class<?> docletClass;
-    private Iterable<String> options;
-    private Iterable<? extends JavaFileObject> fileObjects;
+    private final Class<?> docletClass;
+    private final Iterable<String> options;
+    private final Iterable<? extends JavaFileObject> fileObjects;
     private Locale locale;
-    private List<String> addModules = new ArrayList<>();
+    private final List<String> addModules = new ArrayList<>();
 
-    public JavadocTaskImpl(Context context, Class<?> docletClass,
-            Iterable<String> options, Iterable<? extends JavaFileObject> fileObjects) {
+    public JavadocTaskImpl(Context context,
+                           Class<?> docletClass,
+                           Iterable<String> options,
+                           Iterable<? extends JavaFileObject> fileObjects)
+    {
         this.context = context;
         this.docletClass = docletClass;
 
         this.options = (options == null) ? Collections.emptySet()
                 : nullCheck(options);
@@ -72,38 +74,39 @@
         setLocale(Locale.getDefault());
     }
 
     @Override
     public void setLocale(Locale locale) {
-        if (used.get())
+        if (used.get()) {
             throw new IllegalStateException();
+        }
         this.locale = locale;
     }
 
     @Override
     public void addModules(Iterable<String> moduleNames) {
         nullCheck(moduleNames);
-        if (used.get())
+        if (used.get()) {
             throw new IllegalStateException();
+        }
         for (String name : moduleNames) {
             addModules.add(name);
         }
     }
 
     @Override
     public Boolean call() {
-        if (!used.getAndSet(true)) {
-            initContext();
-            Start jdoc = new Start(context);
-            try {
-                return jdoc.begin(docletClass, options, fileObjects);
-            } catch (ClientCodeException e) {
-                throw new RuntimeException(e.getCause());
-            }
-        } else {
+        if (used.getAndSet(true)) {
             throw new IllegalStateException("multiple calls to method 'call'");
         }
+        initContext();
+        Start jdoc = new Start(context);
+        try {
+            return jdoc.begin(docletClass, options, fileObjects);
+        } catch (ClientCodeException e) {
+            throw new RuntimeException(e.getCause());
+        }
     }
 
     private void initContext() {
         //initialize compiler's default locale
         context.put(Locale.class, locale);
@@ -114,11 +117,11 @@
             opts.put(Option.ADD_MODULES, (prev == null) ? names : prev + "," + names);
         }
     }
 
     private static <T> Iterable<T> nullCheck(Iterable<T> items) {
-        for (T item: items) {
+        for (T item : items) {
             if (item == null)
                 throw new NullPointerException();
         }
         return items;
     }
