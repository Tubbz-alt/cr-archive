diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/VisibleMemberTable.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/VisibleMemberTable.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/VisibleMemberTable.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/VisibleMemberTable.java
@@ -389,13 +389,11 @@
     private void computeLeafMembers(LocalMemberTable lmt, Kind kind) {
         List<Element> list = new ArrayList<>();
         if (utils.isUndocumentedEnclosure(te)) {
             list.addAll(lmt.getOrderedMembers(kind));
         }
-        parents.forEach(pvmt -> {
-            list.addAll(pvmt.getExtraMembers(kind));
-        });
+        parents.forEach(pvmt -> list.addAll(pvmt.getExtraMembers(kind)));
         extraMembers.put(kind, Collections.unmodifiableList(list));
     }
 
     void computeVisibleMembers(LocalMemberTable lmt, Kind kind) {
         switch (kind) {
@@ -460,11 +458,12 @@
         }
 
         // Filter out members in the inherited list that are hidden
         // by this type or should not be inherited at all.
         List<Element> list = result.stream()
-                .filter(e -> allowInheritedMembers(e, kind, lmt)).collect(Collectors.toList());
+                .filter(e -> allowInheritedMembers(e, kind, lmt))
+                .collect(Collectors.toList());
 
         // Prefix local results first
         list.addAll(0, lmt.getOrderedMembers(kind));
 
         // Filter out elements that should not be documented
@@ -521,11 +520,11 @@
         // a. cannot override (private instance members)
         // b. are overridden and should not be visible in this type
         // c. are hidden in the type being considered
         // see allowInheritedMethods, which performs the above actions
         List<Element> list = inheritedMethods.stream()
-                .filter(e -> allowInheritedMethods((ExecutableElement)e, overriddenByTable, lmt))
+                .filter(e -> allowInheritedMethods((ExecutableElement) e, overriddenByTable, lmt))
                 .collect(Collectors.toList());
 
         // Filter out the local methods, that do not override or simply
         // overrides a super method, or those methods that should not
         // be visible.
