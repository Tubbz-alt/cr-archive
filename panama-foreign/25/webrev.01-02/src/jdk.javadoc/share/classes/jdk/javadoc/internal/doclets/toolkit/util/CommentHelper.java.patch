diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/CommentHelper.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/CommentHelper.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/CommentHelper.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/CommentHelper.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -125,13 +125,13 @@
             case SERIAL_FIELD:
             case THROWS:
             case UNKNOWN_BLOCK_TAG:
             case USES:
             case VERSION:
-                return ((BlockTagTree)dtree).getTagName();
+                return ((BlockTagTree) dtree).getTagName();
             case UNKNOWN_INLINE_TAG:
-                return ((InlineTagTree)dtree).getTagName();
+                return ((InlineTagTree) dtree).getTagName();
             case ERRONEOUS:
                 return "erroneous";
             default:
                 return dtree.getKind().tagName;
         }
@@ -264,11 +264,11 @@
                 if (node.getReference() == null) {
                     return null;
                 }
 
                 node.getReference().accept(this, null);
-                node.getLabel().forEach(dt -> dt.accept(this, null) );
+                node.getLabel().forEach(dt -> dt.accept(this, null));
                 return null;
             }
 
             @Override
             public Void visitLiteral(LiteralTree node, Void p) {
@@ -303,11 +303,11 @@
             @Override
             public Void visitStartElement(StartElementTree node, Void p) {
                 sb.append("<");
                 sb.append(node.getName());
                 node.getAttributes().forEach(dt -> dt.accept(this, null));
-                sb.append((node.isSelfClosing() ? "/>" : ">"));
+                sb.append(node.isSelfClosing() ? "/>" : ">");
                 return null;
             }
 
             @Override
             public Void visitText(TextTree node, Void p) {
@@ -671,11 +671,10 @@
 
     public Element getOverriddenElement() {
         return overriddenElement;
     }
 
-
     /**
      * For debugging purposes only. Do not rely on this for other things.
      * @return a string representation.
      */
     @Override
