diff a/test/jdk/tools/launcher/VersionCheck.java b/test/jdk/tools/launcher/VersionCheck.java
--- a/test/jdk/tools/launcher/VersionCheck.java
+++ b/test/jdk/tools/launcher/VersionCheck.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2007, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -31,16 +31,15 @@
  * @compile VersionCheck.java
  * @run main VersionCheck
  */
 
 import java.io.File;
-import java.io.FileFilter;
-import java.util.Map;
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.List;
 import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
 import java.util.Set;
 
 public class VersionCheck extends TestHelper {
 
     // tools that do not accept -J-option
@@ -276,34 +275,6 @@
             System.out.println("All Version string comparisons: PASS");
         } else {
             throw new AssertionError("VersionCheck failed: " + errorMessage);
         }
     }
-
-    static class ToolFilter implements FileFilter {
-        final Iterable<String> exclude;
-        protected ToolFilter(String... exclude) {
-            List<String> tlist = new ArrayList<>();
-            this.exclude = tlist;
-            for (String x : exclude) {
-                String str = x + ((isWindows) ? EXE_FILE_EXT : "");
-                tlist.add(str.toLowerCase());
-            }
-        }
-        @Override
-        public boolean accept(File pathname) {
-            if (!pathname.isFile() || !pathname.canExecute()) {
-                return false;
-            }
-            String name = pathname.getName().toLowerCase();
-            if (isWindows && !name.endsWith(EXE_FILE_EXT)) {
-                return false;
-            }
-            for (String x : exclude) {
-                if (name.endsWith(x)) {
-                    return false;
-                }
-            }
-            return true;
-        }
-    }
 }
