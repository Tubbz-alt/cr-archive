diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/LibraryLookup.java
@@ -26,20 +26,33 @@
 package jdk.incubator.foreign;
 
 import jdk.internal.foreign.LibrariesHelper;
 
 import java.io.File;
-import java.lang.invoke.MethodHandles;
+import java.lang.invoke.MethodType;
 import java.util.Objects;
 
 /**
  * A native library lookup. Exposes lookup operation for searching symbols, see {@link LibraryLookup#lookup(String)}.
+ * A given native library remains loaded as long as there is at least one <em>live</em> library lookup instance referring
+ * to it.
+ * <p>
+ * Memory address instances generated by a library lookup will contain a strong reference to the originating lookup object,
+ * therefore preventing library unloading; in turn method handle instances obtained from
+ * {@link SystemABI#downcallHandle(MemoryAddress, MethodType, FunctionDescriptor)}) also maintain a strong reference
+ * to the memory address parameter used for their construction. This means that there is always a strong reachability chain
+ * from a native method handle to a lookup object (the one that was used to lookup the native library symbol the method handle
+ * refers to); this is useful to prevent situations where a native library is unloaded in the middle of a native call.
+ * <p>
+ * To allow for a library to be unloaded, a client will have to discard any strong references it
+ * maintains, directly, or indirectly to a lookup object associated with given library.
  */
 public interface LibraryLookup {
 
     /**
-     * Lookups a symbol with given name in this library.
+     * Lookups a symbol with given name in this library. The returned address has the same temporal bounds
+     * as this lookup object.
      * @param name the symbol name.
      * @return the library symbol (if any)
      * @throws NoSuchMethodException if no symbol with given name could be found.
      */
     MemoryAddress lookup(String name) throws NoSuchMethodException;
@@ -56,41 +69,39 @@
         return LibrariesHelper.getDefaultLibrary();
     }
 
     /**
      * Obtain a library lookup object corresponding to a library identified by given path.
-     * @param lookup the contextual lookup object.
      * @param path the library path.
      * @return a library lookup object for given path.
      */
-    static LibraryLookup ofPath(MethodHandles.Lookup lookup, String path) {
+    static LibraryLookup ofPath(String path) {
         Objects.requireNonNull(path);
         SecurityManager security = System.getSecurityManager();
         if (security != null) {
             security.checkLink(path);
         }
         if (!(new File(path).isAbsolute())) {
             throw new UnsatisfiedLinkError(
                     "Expecting an absolute path of the library: " + path);
         }
-        return LibrariesHelper.load(lookup, path);
+        return LibrariesHelper.load(path);
     }
 
     /**
      * Obtain a library lookup object corresponding to a library identified by given library name.
-     * @param lookup the contextual lookup object.
      * @param libName the library name.
      * @return a library lookup object for given library name.
      */
-    static LibraryLookup ofLibrary(MethodHandles.Lookup lookup, String libName) {
+    static LibraryLookup ofLibrary(String libName) {
         Objects.requireNonNull(libName);
         SecurityManager security = System.getSecurityManager();
         if (security != null) {
             security.checkLink(libName);
         }
         if (libName.indexOf(File.separatorChar) != -1) {
             throw new UnsatisfiedLinkError(
                     "Directory separator should not appear in library name: " + libName);
         }
-        return LibrariesHelper.loadLibrary(lookup, libName);
+        return LibrariesHelper.loadLibrary(libName);
     }
 }
