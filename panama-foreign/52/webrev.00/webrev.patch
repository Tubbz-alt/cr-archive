diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
@@ -58,11 +58,14 @@
     final long min;
     final Object base;
     final Thread owner;
     final MemoryScope scope;
 
-    final static int SMALL = ACQUIRE << 1;
+    final static int ACCESS_MASK = READ | WRITE | CLOSE | ACQUIRE;
+    final static int FIRST_RESERVED_FLAG = 1 << 16; // upper 16 bits are reserved
+    final static int SMALL = FIRST_RESERVED_FLAG;
+
     final static long NONCE = new Random().nextLong();
 
     final static int DEFAULT_MASK = READ | WRITE | CLOSE | ACQUIRE;
 
     public MemorySegmentImpl(long min, Object base, long length, Thread owner, MemoryScope scope) {
@@ -147,24 +150,32 @@
         return _bb;
     }
 
     @Override
     public MemorySegment withAccessModes(int accessModes) {
-        if ((~this.mask & accessModes) != 0) {
+        checkAccessModes(accessModes);
+        if ((~accessModes() & accessModes) != 0) {
             throw new UnsupportedOperationException("Cannot acquire more access modes");
         }
         return new MemorySegmentImpl(min, base, length, accessModes, owner, scope);
     }
 
     @Override
     public boolean hasAccessModes(int accessModes) {
-        return (this.mask & accessModes) == accessModes;
+        checkAccessModes(accessModes);
+        return (accessModes() & accessModes) == accessModes;
+    }
+
+    private void checkAccessModes(int accessModes) {
+        if ((accessModes & ~ACCESS_MASK) != 0) {
+            throw new IllegalArgumentException("Invalid access modes");
+        }
     }
 
     @Override
     public int accessModes() {
-        return mask;
+        return mask & ACCESS_MASK;
     }
 
     @Override
     public byte[] toByteArray() {
         checkIntSize("byte[]");
diff a/test/jdk/java/foreign/TestSegments.java b/test/jdk/java/foreign/TestSegments.java
--- a/test/jdk/java/foreign/TestSegments.java
+++ b/test/jdk/java/foreign/TestSegments.java
@@ -126,20 +126,35 @@
     public void testAccessModes(int accessModes) {
         int[] arr = new int[1];
         for (AccessActions action : AccessActions.values()) {
             MemorySegment segment = MemorySegment.ofArray(arr);
             MemorySegment restrictedSegment = segment.withAccessModes(accessModes);
+            assertEquals(restrictedSegment.accessModes(), accessModes);
             boolean shouldFail = !restrictedSegment.hasAccessModes(action.accessMode);
             try {
                 action.run(restrictedSegment);
                 assertFalse(shouldFail);
             } catch (UnsupportedOperationException ex) {
                 assertTrue(shouldFail);
             }
         }
     }
 
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void testBadWithAccessModes() {
+        int[] arr = new int[1];
+        MemorySegment segment = MemorySegment.ofArray(arr);
+        segment.withAccessModes((1 << AccessActions.values().length) + 1);
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void testBadHasAccessModes() {
+        int[] arr = new int[1];
+        MemorySegment segment = MemorySegment.ofArray(arr);
+        segment.hasAccessModes((1 << AccessActions.values().length) + 1);
+    }
+
     @DataProvider(name = "badSizeAndAlignments")
     public Object[][] sizesAndAlignments() {
         return new Object[][] {
                 { -1, 8 },
                 { 1, 15 },
