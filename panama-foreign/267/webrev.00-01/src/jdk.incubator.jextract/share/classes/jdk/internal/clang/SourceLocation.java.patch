diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/SourceLocation.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/SourceLocation.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/SourceLocation.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/SourceLocation.java
@@ -24,10 +24,11 @@
  *
  */
 package jdk.internal.clang;
 
 import jdk.incubator.foreign.CSupport;
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.internal.clang.libclang.Index_h;
 
 import java.nio.file.Path;
@@ -54,19 +55,19 @@
              MemorySegment line = MemorySegment.allocateNative(CSupport.C_INT);
              MemorySegment col = MemorySegment.allocateNative(CSupport.C_INT);
              MemorySegment offset = MemorySegment.allocateNative(CSupport.C_INT)) {
 
             fn.get(loc, file.address(), line.address(), col.address(), offset.address());
-            MemoryAddress fname = Utils.getPointer(file);
+            MemoryAddress fname = MemoryAccess.getAddress(file);
 
 
             String str = fname == MemoryAddress.NULL ?
                     null :
                     LibClang.CXStrToString(Index_h.clang_getFileName(fname));
 
-            return new Location(str, Utils.getInt(line),
-                Utils.getInt(col), Utils.getInt(offset));
+            return new Location(str, MemoryAccess.getInt(line),
+                MemoryAccess.getInt(col), MemoryAccess.getInt(offset));
         }
     }
 
     public Location getFileLocation() { return getLocation(Index_h::clang_getFileLocation); }
     public Location getExpansionLocation() { return getLocation(Index_h::clang_getExpansionLocation); }
