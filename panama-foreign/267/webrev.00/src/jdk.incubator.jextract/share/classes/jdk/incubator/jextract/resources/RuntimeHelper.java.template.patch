diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/resources/RuntimeHelper.java.template
@@ -13,10 +13,11 @@
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.io.File;
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
+import java.util.Objects;
 import java.util.Optional;
 
 import static ${C_LANG}.*;
 
 public class RuntimeHelper {
@@ -55,15 +56,15 @@
         } catch (Throwable t) {
             return Optional.empty();
         }
     }
 
-    public static final MemoryAddress lookupGlobalVariable(LibraryLookup[] LIBRARIES, String name, MemoryLayout layout) {
-        return lookup(LIBRARIES, name).map(a ->
+    public static final MemorySegment lookupGlobalVariable(LibraryLookup[] LIBRARIES, String name, MemoryLayout layout) {
+        return lookup(LIBRARIES, name).map(s ->
             MemorySegment.ofNativeRestricted(
-                 a.address(), layout.byteSize(), null, null, a
-            ).withAccessModes(MemorySegment.READ | MemorySegment.WRITE).address()).orElse(null);
+                 s.address(), layout.byteSize(), null, null, s
+            ).withAccessModes(MemorySegment.READ | MemorySegment.WRITE)).orElse(null);
     }
 
     public static final MethodHandle downcallHandle(LibraryLookup[] LIBRARIES, String name, String desc, FunctionDescriptor fdesc, boolean variadic) {
         return lookup(LIBRARIES, name).map(
                 addr -> {
@@ -87,21 +88,18 @@
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
 
-    public static MemoryAddress asArrayRestricted(MemoryAddress addr, MemoryLayout layout, int numElements) {
+    public static MemorySegment asArrayRestricted(MemoryAddress addr, MemoryLayout layout, int numElements) {
         return MemorySegment.ofNativeRestricted(addr, numElements * layout.byteSize(),
-               Thread.currentThread(), null, null).address();
+               Thread.currentThread(), null, null);
     }
 
-    public static MemoryAddress asArray(MemoryAddress addr, MemoryLayout layout, int numElements) {
-        var seg = addr.segment();
-        if (seg == null) {
-            throw new IllegalArgumentException("no underlying segment for the address");
-        }
-        return seg.asSlice(addr.segmentOffset(), numElements * layout.byteSize()).address();
+    public static MemorySegment asArray(MemorySegment seg, MemoryLayout layout, int numElements) {
+        Objects.requireNonNull(seg);
+        return seg.asSlice(0L, numElements * layout.byteSize());
     }
 
     private static class VarargsInvoker {
         private static final MethodHandle INVOKE_MH;
         private final Addressable symbol;
