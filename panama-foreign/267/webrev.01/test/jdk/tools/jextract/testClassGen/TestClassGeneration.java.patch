diff a/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java b/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java
--- a/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java
+++ b/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java
@@ -148,14 +148,14 @@
         assertEquals(getter.invoke(null), expectedValue);
     }
 
     @Test(dataProvider = "stringConstants")
     public void testStringConstant(String name, String expectedValue) throws Throwable {
-        Method getter = checkMethod(cls, name, MemoryAddress.class);
-        MemoryAddress actual = (MemoryAddress) getter.invoke(null);
+        Method getter = checkMethod(cls, name, MemorySegment.class);
+        MemorySegment actual = (MemorySegment) getter.invoke(null);
         byte[] expected = expectedValue.getBytes(StandardCharsets.UTF_8);
-        assertEquals(actual.segment().byteSize(), expected.length + 1);
+        assertEquals(actual.byteSize(), expected.length + 1);
         for (int i = 0; i < expected.length; i++) {
             assertEquals((byte) VH_bytes.get(actual, (long) i), expected[i]);
         }
     }
 
@@ -176,20 +176,17 @@
     @Test(dataProvider = "globals")
     public void testGlobal(String name, Class<?> expectedType, MemoryLayout expectedLayout, Object expectedValue) throws Throwable {
         Method layout_getter = checkMethod(cls, name + "$LAYOUT", MemoryLayout.class);
         assertEquals(layout_getter.invoke(null), expectedLayout);
 
-        Method addr_getter = checkMethod(cls, name + "$ADDR", MemoryAddress.class);
-        MemoryAddress addr = MemorySegment.ofNativeRestricted(
-                (MemoryAddress)addr_getter.invoke(null),
-                expectedLayout.byteSize(),
-                null, null, null).address();
+        Method addr_getter = checkMethod(cls, name + "$ADDR", MemorySegment.class);
+        MemorySegment segment = (MemorySegment)addr_getter.invoke(null);
 
         Method vh_getter = checkMethod(cls, name + "$VH", VarHandle.class);
         VarHandle vh = (VarHandle) vh_getter.invoke(null);
         assertEquals(vh.varType(), expectedType);
-        assertEquals(vh.get(addr), expectedValue);
+        assertEquals(vh.get(segment), expectedValue);
 
         checkMethod(cls, name + "$get", expectedType);
         checkMethod(cls, name + "$set", void.class, expectedType);
     }
 
@@ -203,13 +200,13 @@
         try (MemorySegment struct = MemorySegment.allocateNative(structLayout)) {
             Method vh_getter = checkMethod(structCls, memberName + "$VH", VarHandle.class);
             VarHandle vh = (VarHandle) vh_getter.invoke(null);
             assertEquals(vh.varType(), expectedType);
 
-            Method getter = checkMethod(structCls, memberName + "$get", expectedType, MemoryAddress.class);
-            Method setter = checkMethod(structCls, memberName + "$set", void.class, MemoryAddress.class, expectedType);
-            MemoryAddress addr = struct.address();
+            Method getter = checkMethod(structCls, memberName + "$get", expectedType, MemorySegment.class);
+            Method setter = checkMethod(structCls, memberName + "$set", void.class, MemorySegment.class, expectedType);
+            MemorySegment addr = struct;
             setter.invoke(null, addr, testValue);
             assertEquals(getter.invoke(null, addr), testValue);
         }
     }
 
