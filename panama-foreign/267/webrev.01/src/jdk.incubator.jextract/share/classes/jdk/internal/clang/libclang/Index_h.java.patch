diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/Index_h.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/Index_h.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/Index_h.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/Index_h.java
@@ -63,26 +63,26 @@
         CSupport.C_INT.withName("private_flags"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXString$private_flags = CXString$LAYOUT.varHandle(int.class, PathElement.groupElement("private_flags"));
     public static final int CXString$private_flags$get(MemorySegment seg) {
-        return (int)CXString$private_flags.get(seg.address());
+        return (int)CXString$private_flags.get(seg);
     }
     public static final void CXString$private_flags$set(MemorySegment seg, int x) {
-        CXString$private_flags.set(seg.address(), x);
+        CXString$private_flags.set(seg, x);
     }
     public static final MemoryLayout CXStringSet$LAYOUT = MemoryLayout.ofStruct(
         CSupport.C_POINTER.withName("Strings"),
         CSupport.C_INT.withName("Count"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXStringSet$Count = CXStringSet$LAYOUT.varHandle(int.class, PathElement.groupElement("Count"));
     public static final int CXStringSet$Count$get(MemorySegment seg) {
-        return (int)CXStringSet$Count.get(seg.address());
+        return (int)CXStringSet$Count.get(seg);
     }
     public static final void CXStringSet$Count$set(MemorySegment seg, int x) {
-        CXStringSet$Count.set(seg.address(), x);
+        CXStringSet$Count.set(seg, x);
     }
     public static final MethodHandle clang_getCString = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCString",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
         FunctionDescriptor.of(CSupport.C_POINTER,
@@ -314,14 +314,14 @@
         CSupport.C_POINTER.withName("Contents"),
         CSupport.C_LONGLONG.withName("Length")
     ).withName("CXUnsavedFile");
     public static final VarHandle CXUnsavedFile$Length = CXUnsavedFile$LAYOUT.varHandle(long.class, PathElement.groupElement("Length"));
     public static final long CXUnsavedFile$Length$get(MemorySegment seg) {
-        return (long)CXUnsavedFile$Length.get(seg.address());
+        return (long)CXUnsavedFile$Length.get(seg);
     }
     public static final void CXUnsavedFile$Length$set(MemorySegment seg, long x) {
-        CXUnsavedFile$Length.set(seg.address(), x);
+        CXUnsavedFile$Length.set(seg, x);
     }
     public static final int CXAvailability_Available = (int)0L;
     public static final int CXAvailability_Deprecated = (int)1L;
     public static final int CXAvailability_NotAvailable = (int)2L;
     public static final int CXAvailability_NotAccessible = (int)3L;
@@ -330,28 +330,28 @@
         CSupport.C_INT.withName("Minor"),
         CSupport.C_INT.withName("Subminor")
     ).withName("CXVersion");
     public static final VarHandle CXVersion$Major = CXVersion$LAYOUT.varHandle(int.class, PathElement.groupElement("Major"));
     public static final int CXVersion$Major$get(MemorySegment seg) {
-        return (int)CXVersion$Major.get(seg.address());
+        return (int)CXVersion$Major.get(seg);
     }
     public static final void CXVersion$Major$set(MemorySegment seg, int x) {
-        CXVersion$Major.set(seg.address(), x);
+        CXVersion$Major.set(seg, x);
     }
     public static final VarHandle CXVersion$Minor = CXVersion$LAYOUT.varHandle(int.class, PathElement.groupElement("Minor"));
     public static final int CXVersion$Minor$get(MemorySegment seg) {
-        return (int)CXVersion$Minor.get(seg.address());
+        return (int)CXVersion$Minor.get(seg);
     }
     public static final void CXVersion$Minor$set(MemorySegment seg, int x) {
-        CXVersion$Minor.set(seg.address(), x);
+        CXVersion$Minor.set(seg, x);
     }
     public static final VarHandle CXVersion$Subminor = CXVersion$LAYOUT.varHandle(int.class, PathElement.groupElement("Subminor"));
     public static final int CXVersion$Subminor$get(MemorySegment seg) {
-        return (int)CXVersion$Subminor.get(seg.address());
+        return (int)CXVersion$Subminor.get(seg);
     }
     public static final void CXVersion$Subminor$set(MemorySegment seg, int x) {
-        CXVersion$Subminor.set(seg.address(), x);
+        CXVersion$Subminor.set(seg, x);
     }
     public static final int CXCursor_ExceptionSpecificationKind_None = (int)0L;
     public static final int CXCursor_ExceptionSpecificationKind_DynamicNone = (int)1L;
     public static final int CXCursor_ExceptionSpecificationKind_Dynamic = (int)2L;
     public static final int CXCursor_ExceptionSpecificationKind_MSAny = (int)3L;
@@ -572,33 +572,33 @@
         CSupport.C_INT.withName("int_data"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXSourceLocation$int_data = CXSourceLocation$LAYOUT.varHandle(int.class, PathElement.groupElement("int_data"));
     public static final int CXSourceLocation$int_data$get(MemorySegment seg) {
-        return (int)CXSourceLocation$int_data.get(seg.address());
+        return (int)CXSourceLocation$int_data.get(seg);
     }
     public static final void CXSourceLocation$int_data$set(MemorySegment seg, int x) {
-        CXSourceLocation$int_data.set(seg.address(), x);
+        CXSourceLocation$int_data.set(seg, x);
     }
     public static final MemoryLayout CXSourceRange$LAYOUT = MemoryLayout.ofStruct(
         MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
         CSupport.C_INT.withName("begin_int_data"),
         CSupport.C_INT.withName("end_int_data")
     );
     public static final VarHandle CXSourceRange$begin_int_data = CXSourceRange$LAYOUT.varHandle(int.class, PathElement.groupElement("begin_int_data"));
     public static final int CXSourceRange$begin_int_data$get(MemorySegment seg) {
-        return (int)CXSourceRange$begin_int_data.get(seg.address());
+        return (int)CXSourceRange$begin_int_data.get(seg);
     }
     public static final void CXSourceRange$begin_int_data$set(MemorySegment seg, int x) {
-        CXSourceRange$begin_int_data.set(seg.address(), x);
+        CXSourceRange$begin_int_data.set(seg, x);
     }
     public static final VarHandle CXSourceRange$end_int_data = CXSourceRange$LAYOUT.varHandle(int.class, PathElement.groupElement("end_int_data"));
     public static final int CXSourceRange$end_int_data$get(MemorySegment seg) {
-        return (int)CXSourceRange$end_int_data.get(seg.address());
+        return (int)CXSourceRange$end_int_data.get(seg);
     }
     public static final void CXSourceRange$end_int_data$set(MemorySegment seg, int x) {
-        CXSourceRange$end_int_data.set(seg.address(), x);
+        CXSourceRange$end_int_data.set(seg, x);
     }
     public static final MethodHandle clang_getNullLocation = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getNullLocation",
         "()Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
@@ -956,14 +956,14 @@
         MemoryLayout.ofPaddingBits(32),
         CSupport.C_POINTER.withName("ranges")
     );
     public static final VarHandle CXSourceRangeList$count = CXSourceRangeList$LAYOUT.varHandle(int.class, PathElement.groupElement("count"));
     public static final int CXSourceRangeList$count$get(MemorySegment seg) {
-        return (int)CXSourceRangeList$count.get(seg.address());
+        return (int)CXSourceRangeList$count.get(seg);
     }
     public static final void CXSourceRangeList$count$set(MemorySegment seg, int x) {
-        CXSourceRangeList$count.set(seg.address(), x);
+        CXSourceRangeList$count.set(seg, x);
     }
     public static final MethodHandle clang_getSkippedRanges = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getSkippedRanges",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
         FunctionDescriptor.of(CSupport.C_POINTER,
@@ -1658,34 +1658,34 @@
         MemoryLayout.ofPaddingBits(32),
         CSupport.C_LONGLONG.withName("amount")
     ).withName("CXTUResourceUsageEntry");
     public static final VarHandle CXTUResourceUsageEntry$kind = CXTUResourceUsageEntry$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
     public static final int CXTUResourceUsageEntry$kind$get(MemorySegment seg) {
-        return (int)CXTUResourceUsageEntry$kind.get(seg.address());
+        return (int)CXTUResourceUsageEntry$kind.get(seg);
     }
     public static final void CXTUResourceUsageEntry$kind$set(MemorySegment seg, int x) {
-        CXTUResourceUsageEntry$kind.set(seg.address(), x);
+        CXTUResourceUsageEntry$kind.set(seg, x);
     }
     public static final VarHandle CXTUResourceUsageEntry$amount = CXTUResourceUsageEntry$LAYOUT.varHandle(long.class, PathElement.groupElement("amount"));
     public static final long CXTUResourceUsageEntry$amount$get(MemorySegment seg) {
-        return (long)CXTUResourceUsageEntry$amount.get(seg.address());
+        return (long)CXTUResourceUsageEntry$amount.get(seg);
     }
     public static final void CXTUResourceUsageEntry$amount$set(MemorySegment seg, long x) {
-        CXTUResourceUsageEntry$amount.set(seg.address(), x);
+        CXTUResourceUsageEntry$amount.set(seg, x);
     }
     public static final MemoryLayout CXTUResourceUsage$LAYOUT = MemoryLayout.ofStruct(
         CSupport.C_POINTER.withName("data"),
         CSupport.C_INT.withName("numEntries"),
         MemoryLayout.ofPaddingBits(32),
         CSupport.C_POINTER.withName("entries")
     ).withName("CXTUResourceUsage");
     public static final VarHandle CXTUResourceUsage$numEntries = CXTUResourceUsage$LAYOUT.varHandle(int.class, PathElement.groupElement("numEntries"));
     public static final int CXTUResourceUsage$numEntries$get(MemorySegment seg) {
-        return (int)CXTUResourceUsage$numEntries.get(seg.address());
+        return (int)CXTUResourceUsage$numEntries.get(seg);
     }
     public static final void CXTUResourceUsage$numEntries$set(MemorySegment seg, int x) {
-        CXTUResourceUsage$numEntries.set(seg.address(), x);
+        CXTUResourceUsage$numEntries.set(seg, x);
     }
     public static final MethodHandle clang_getCXTUResourceUsage = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCXTUResourceUsage",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
@@ -2043,21 +2043,21 @@
         CSupport.C_INT.withName("xdata"),
         MemoryLayout.ofSequence(3, CSupport.C_POINTER).withName("data")
     );
     public static final VarHandle CXCursor$kind = CXCursor$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
     public static final int CXCursor$kind$get(MemorySegment seg) {
-        return (int)CXCursor$kind.get(seg.address());
+        return (int)CXCursor$kind.get(seg);
     }
     public static final void CXCursor$kind$set(MemorySegment seg, int x) {
-        CXCursor$kind.set(seg.address(), x);
+        CXCursor$kind.set(seg, x);
     }
     public static final VarHandle CXCursor$xdata = CXCursor$LAYOUT.varHandle(int.class, PathElement.groupElement("xdata"));
     public static final int CXCursor$xdata$get(MemorySegment seg) {
-        return (int)CXCursor$xdata.get(seg.address());
+        return (int)CXCursor$xdata.get(seg);
     }
     public static final void CXCursor$xdata$set(MemorySegment seg, int x) {
-        CXCursor$xdata.set(seg.address(), x);
+        CXCursor$xdata.set(seg, x);
     }
     public static final MethodHandle clang_getNullCursor = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getNullCursor",
         "()Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
@@ -2421,14 +2421,14 @@
             MemoryLayout.ofPaddingBits(32)
         ).withName("Message")
     ).withName("CXPlatformAvailability");
     public static final VarHandle CXPlatformAvailability$Unavailable = CXPlatformAvailability$LAYOUT.varHandle(int.class, PathElement.groupElement("Unavailable"));
     public static final int CXPlatformAvailability$Unavailable$get(MemorySegment seg) {
-        return (int)CXPlatformAvailability$Unavailable.get(seg.address());
+        return (int)CXPlatformAvailability$Unavailable.get(seg);
     }
     public static final void CXPlatformAvailability$Unavailable$set(MemorySegment seg, int x) {
-        CXPlatformAvailability$Unavailable.set(seg.address(), x);
+        CXPlatformAvailability$Unavailable.set(seg, x);
     }
     public static final MethodHandle clang_getCursorPlatformAvailability = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorPlatformAvailability",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
         FunctionDescriptor.of(CSupport.C_INT,
@@ -2897,14 +2897,14 @@
         MemoryLayout.ofPaddingBits(32),
         MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("data")
     );
     public static final VarHandle CXType$kind = CXType$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
     public static final int CXType$kind$get(MemorySegment seg) {
-        return (int)CXType$kind.get(seg.address());
+        return (int)CXType$kind.get(seg);
     }
     public static final void CXType$kind$set(MemorySegment seg, int x) {
-        CXType$kind.set(seg.address(), x);
+        CXType$kind.set(seg, x);
     }
     public static final MethodHandle clang_getCursorType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
@@ -5770,14 +5770,14 @@
         MemoryLayout.ofPaddingBits(32),
         CSupport.C_POINTER.withName("CompletionString")
     );
     public static final VarHandle CXCompletionResult$CursorKind = CXCompletionResult$LAYOUT.varHandle(int.class, PathElement.groupElement("CursorKind"));
     public static final int CXCompletionResult$CursorKind$get(MemorySegment seg) {
-        return (int)CXCompletionResult$CursorKind.get(seg.address());
+        return (int)CXCompletionResult$CursorKind.get(seg);
     }
     public static final void CXCompletionResult$CursorKind$set(MemorySegment seg, int x) {
-        CXCompletionResult$CursorKind.set(seg.address(), x);
+        CXCompletionResult$CursorKind.set(seg, x);
     }
     public static final int CXCompletionChunk_Optional = (int)0L;
     public static final int CXCompletionChunk_TypedText = (int)1L;
     public static final int CXCompletionChunk_Text = (int)2L;
     public static final int CXCompletionChunk_Placeholder = (int)3L;
@@ -5982,14 +5982,14 @@
         CSupport.C_INT.withName("NumResults"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXCodeCompleteResults$NumResults = CXCodeCompleteResults$LAYOUT.varHandle(int.class, PathElement.groupElement("NumResults"));
     public static final int CXCodeCompleteResults$NumResults$get(MemorySegment seg) {
-        return (int)CXCodeCompleteResults$NumResults.get(seg.address());
+        return (int)CXCodeCompleteResults$NumResults.get(seg);
     }
     public static final void CXCodeCompleteResults$NumResults$set(MemorySegment seg, int x) {
-        CXCodeCompleteResults$NumResults.set(seg.address(), x);
+        CXCodeCompleteResults$NumResults.set(seg, x);
     }
     public static final MethodHandle clang_getCompletionNumFixIts = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCompletionNumFixIts",
         "(Ljdk/incubator/foreign/MemoryAddress;I)I",
         FunctionDescriptor.of(CSupport.C_INT,
@@ -6535,14 +6535,14 @@
         CSupport.C_INT.withName("int_data"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxLoc$int_data = CXIdxLoc$LAYOUT.varHandle(int.class, PathElement.groupElement("int_data"));
     public static final int CXIdxLoc$int_data$get(MemorySegment seg) {
-        return (int)CXIdxLoc$int_data.get(seg.address());
+        return (int)CXIdxLoc$int_data.get(seg);
     }
     public static final void CXIdxLoc$int_data$set(MemorySegment seg, int x) {
-        CXIdxLoc$int_data.set(seg.address(), x);
+        CXIdxLoc$int_data.set(seg, x);
     }
     public static final MemoryLayout CXIdxIncludedFileInfo$LAYOUT = MemoryLayout.ofStruct(
         MemoryLayout.ofStruct(
             MemoryLayout.ofSequence(2, CSupport.C_POINTER).withName("ptr_data"),
             CSupport.C_INT.withName("int_data"),
@@ -6555,28 +6555,28 @@
         CSupport.C_INT.withName("isModuleImport"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxIncludedFileInfo$isImport = CXIdxIncludedFileInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isImport"));
     public static final int CXIdxIncludedFileInfo$isImport$get(MemorySegment seg) {
-        return (int)CXIdxIncludedFileInfo$isImport.get(seg.address());
+        return (int)CXIdxIncludedFileInfo$isImport.get(seg);
     }
     public static final void CXIdxIncludedFileInfo$isImport$set(MemorySegment seg, int x) {
-        CXIdxIncludedFileInfo$isImport.set(seg.address(), x);
+        CXIdxIncludedFileInfo$isImport.set(seg, x);
     }
     public static final VarHandle CXIdxIncludedFileInfo$isAngled = CXIdxIncludedFileInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isAngled"));
     public static final int CXIdxIncludedFileInfo$isAngled$get(MemorySegment seg) {
-        return (int)CXIdxIncludedFileInfo$isAngled.get(seg.address());
+        return (int)CXIdxIncludedFileInfo$isAngled.get(seg);
     }
     public static final void CXIdxIncludedFileInfo$isAngled$set(MemorySegment seg, int x) {
-        CXIdxIncludedFileInfo$isAngled.set(seg.address(), x);
+        CXIdxIncludedFileInfo$isAngled.set(seg, x);
     }
     public static final VarHandle CXIdxIncludedFileInfo$isModuleImport = CXIdxIncludedFileInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isModuleImport"));
     public static final int CXIdxIncludedFileInfo$isModuleImport$get(MemorySegment seg) {
-        return (int)CXIdxIncludedFileInfo$isModuleImport.get(seg.address());
+        return (int)CXIdxIncludedFileInfo$isModuleImport.get(seg);
     }
     public static final void CXIdxIncludedFileInfo$isModuleImport$set(MemorySegment seg, int x) {
-        CXIdxIncludedFileInfo$isModuleImport.set(seg.address(), x);
+        CXIdxIncludedFileInfo$isModuleImport.set(seg, x);
     }
     public static final MemoryLayout CXIdxImportedASTFileInfo$LAYOUT = MemoryLayout.ofStruct(
         CSupport.C_POINTER.withName("file"),
         CSupport.C_POINTER.withName("module"),
         MemoryLayout.ofStruct(
@@ -6587,14 +6587,14 @@
         CSupport.C_INT.withName("isImplicit"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxImportedASTFileInfo$isImplicit = CXIdxImportedASTFileInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isImplicit"));
     public static final int CXIdxImportedASTFileInfo$isImplicit$get(MemorySegment seg) {
-        return (int)CXIdxImportedASTFileInfo$isImplicit.get(seg.address());
+        return (int)CXIdxImportedASTFileInfo$isImplicit.get(seg);
     }
     public static final void CXIdxImportedASTFileInfo$isImplicit$set(MemorySegment seg, int x) {
-        CXIdxImportedASTFileInfo$isImplicit.set(seg.address(), x);
+        CXIdxImportedASTFileInfo$isImplicit.set(seg, x);
     }
     public static final int CXIdxEntity_Unexposed = (int)0L;
     public static final int CXIdxEntity_Typedef = (int)1L;
     public static final int CXIdxEntity_Function = (int)2L;
     public static final int CXIdxEntity_Variable = (int)3L;
@@ -6648,14 +6648,14 @@
             MemoryLayout.ofPaddingBits(32)
         ).withName("loc")
     );
     public static final VarHandle CXIdxAttrInfo$kind = CXIdxAttrInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
     public static final int CXIdxAttrInfo$kind$get(MemorySegment seg) {
-        return (int)CXIdxAttrInfo$kind.get(seg.address());
+        return (int)CXIdxAttrInfo$kind.get(seg);
     }
     public static final void CXIdxAttrInfo$kind$set(MemorySegment seg, int x) {
-        CXIdxAttrInfo$kind.set(seg.address(), x);
+        CXIdxAttrInfo$kind.set(seg, x);
     }
     public static final MemoryLayout CXIdxEntityInfo$LAYOUT = MemoryLayout.ofStruct(
         CSupport.C_INT.withName("kind"),
         CSupport.C_INT.withName("templateKind"),
         CSupport.C_INT.withName("lang"),
@@ -6671,35 +6671,35 @@
         CSupport.C_INT.withName("numAttributes"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxEntityInfo$kind = CXIdxEntityInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
     public static final int CXIdxEntityInfo$kind$get(MemorySegment seg) {
-        return (int)CXIdxEntityInfo$kind.get(seg.address());
+        return (int)CXIdxEntityInfo$kind.get(seg);
     }
     public static final void CXIdxEntityInfo$kind$set(MemorySegment seg, int x) {
-        CXIdxEntityInfo$kind.set(seg.address(), x);
+        CXIdxEntityInfo$kind.set(seg, x);
     }
     public static final VarHandle CXIdxEntityInfo$templateKind = CXIdxEntityInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("templateKind"));
     public static final int CXIdxEntityInfo$templateKind$get(MemorySegment seg) {
-        return (int)CXIdxEntityInfo$templateKind.get(seg.address());
+        return (int)CXIdxEntityInfo$templateKind.get(seg);
     }
     public static final void CXIdxEntityInfo$templateKind$set(MemorySegment seg, int x) {
-        CXIdxEntityInfo$templateKind.set(seg.address(), x);
+        CXIdxEntityInfo$templateKind.set(seg, x);
     }
     public static final VarHandle CXIdxEntityInfo$lang = CXIdxEntityInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("lang"));
     public static final int CXIdxEntityInfo$lang$get(MemorySegment seg) {
-        return (int)CXIdxEntityInfo$lang.get(seg.address());
+        return (int)CXIdxEntityInfo$lang.get(seg);
     }
     public static final void CXIdxEntityInfo$lang$set(MemorySegment seg, int x) {
-        CXIdxEntityInfo$lang.set(seg.address(), x);
+        CXIdxEntityInfo$lang.set(seg, x);
     }
     public static final VarHandle CXIdxEntityInfo$numAttributes = CXIdxEntityInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("numAttributes"));
     public static final int CXIdxEntityInfo$numAttributes$get(MemorySegment seg) {
-        return (int)CXIdxEntityInfo$numAttributes.get(seg.address());
+        return (int)CXIdxEntityInfo$numAttributes.get(seg);
     }
     public static final void CXIdxEntityInfo$numAttributes$set(MemorySegment seg, int x) {
-        CXIdxEntityInfo$numAttributes.set(seg.address(), x);
+        CXIdxEntityInfo$numAttributes.set(seg, x);
     }
     public static final MemoryLayout CXIdxContainerInfo$LAYOUT = MemoryLayout.ofStruct(
         MemoryLayout.ofStruct(
             CSupport.C_INT.withName("kind"),
             CSupport.C_INT.withName("xdata"),
@@ -6746,49 +6746,49 @@
         CSupport.C_INT.withName("numAttributes"),
         CSupport.C_INT.withName("flags")
     );
     public static final VarHandle CXIdxDeclInfo$isRedeclaration = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isRedeclaration"));
     public static final int CXIdxDeclInfo$isRedeclaration$get(MemorySegment seg) {
-        return (int)CXIdxDeclInfo$isRedeclaration.get(seg.address());
+        return (int)CXIdxDeclInfo$isRedeclaration.get(seg);
     }
     public static final void CXIdxDeclInfo$isRedeclaration$set(MemorySegment seg, int x) {
-        CXIdxDeclInfo$isRedeclaration.set(seg.address(), x);
+        CXIdxDeclInfo$isRedeclaration.set(seg, x);
     }
     public static final VarHandle CXIdxDeclInfo$isDefinition = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isDefinition"));
     public static final int CXIdxDeclInfo$isDefinition$get(MemorySegment seg) {
-        return (int)CXIdxDeclInfo$isDefinition.get(seg.address());
+        return (int)CXIdxDeclInfo$isDefinition.get(seg);
     }
     public static final void CXIdxDeclInfo$isDefinition$set(MemorySegment seg, int x) {
-        CXIdxDeclInfo$isDefinition.set(seg.address(), x);
+        CXIdxDeclInfo$isDefinition.set(seg, x);
     }
     public static final VarHandle CXIdxDeclInfo$isContainer = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isContainer"));
     public static final int CXIdxDeclInfo$isContainer$get(MemorySegment seg) {
-        return (int)CXIdxDeclInfo$isContainer.get(seg.address());
+        return (int)CXIdxDeclInfo$isContainer.get(seg);
     }
     public static final void CXIdxDeclInfo$isContainer$set(MemorySegment seg, int x) {
-        CXIdxDeclInfo$isContainer.set(seg.address(), x);
+        CXIdxDeclInfo$isContainer.set(seg, x);
     }
     public static final VarHandle CXIdxDeclInfo$isImplicit = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isImplicit"));
     public static final int CXIdxDeclInfo$isImplicit$get(MemorySegment seg) {
-        return (int)CXIdxDeclInfo$isImplicit.get(seg.address());
+        return (int)CXIdxDeclInfo$isImplicit.get(seg);
     }
     public static final void CXIdxDeclInfo$isImplicit$set(MemorySegment seg, int x) {
-        CXIdxDeclInfo$isImplicit.set(seg.address(), x);
+        CXIdxDeclInfo$isImplicit.set(seg, x);
     }
     public static final VarHandle CXIdxDeclInfo$numAttributes = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("numAttributes"));
     public static final int CXIdxDeclInfo$numAttributes$get(MemorySegment seg) {
-        return (int)CXIdxDeclInfo$numAttributes.get(seg.address());
+        return (int)CXIdxDeclInfo$numAttributes.get(seg);
     }
     public static final void CXIdxDeclInfo$numAttributes$set(MemorySegment seg, int x) {
-        CXIdxDeclInfo$numAttributes.set(seg.address(), x);
+        CXIdxDeclInfo$numAttributes.set(seg, x);
     }
     public static final VarHandle CXIdxDeclInfo$flags = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("flags"));
     public static final int CXIdxDeclInfo$flags$get(MemorySegment seg) {
-        return (int)CXIdxDeclInfo$flags.get(seg.address());
+        return (int)CXIdxDeclInfo$flags.get(seg);
     }
     public static final void CXIdxDeclInfo$flags$set(MemorySegment seg, int x) {
-        CXIdxDeclInfo$flags.set(seg.address(), x);
+        CXIdxDeclInfo$flags.set(seg, x);
     }
     public static final int CXIdxObjCContainer_ForwardRef = (int)0L;
     public static final int CXIdxObjCContainer_Interface = (int)1L;
     public static final int CXIdxObjCContainer_Implementation = (int)2L;
     public static final MemoryLayout CXIdxObjCContainerDeclInfo$LAYOUT = MemoryLayout.ofStruct(
@@ -6796,14 +6796,14 @@
         CSupport.C_INT.withName("kind"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxObjCContainerDeclInfo$kind = CXIdxObjCContainerDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
     public static final int CXIdxObjCContainerDeclInfo$kind$get(MemorySegment seg) {
-        return (int)CXIdxObjCContainerDeclInfo$kind.get(seg.address());
+        return (int)CXIdxObjCContainerDeclInfo$kind.get(seg);
     }
     public static final void CXIdxObjCContainerDeclInfo$kind$set(MemorySegment seg, int x) {
-        CXIdxObjCContainerDeclInfo$kind.set(seg.address(), x);
+        CXIdxObjCContainerDeclInfo$kind.set(seg, x);
     }
     public static final MemoryLayout CXIdxBaseClassInfo$LAYOUT = MemoryLayout.ofStruct(
         CSupport.C_POINTER.withName("base"),
         MemoryLayout.ofStruct(
             CSupport.C_INT.withName("kind"),
@@ -6834,14 +6834,14 @@
         CSupport.C_INT.withName("numProtocols"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxObjCProtocolRefListInfo$numProtocols = CXIdxObjCProtocolRefListInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("numProtocols"));
     public static final int CXIdxObjCProtocolRefListInfo$numProtocols$get(MemorySegment seg) {
-        return (int)CXIdxObjCProtocolRefListInfo$numProtocols.get(seg.address());
+        return (int)CXIdxObjCProtocolRefListInfo$numProtocols.get(seg);
     }
     public static final void CXIdxObjCProtocolRefListInfo$numProtocols$set(MemorySegment seg, int x) {
-        CXIdxObjCProtocolRefListInfo$numProtocols.set(seg.address(), x);
+        CXIdxObjCProtocolRefListInfo$numProtocols.set(seg, x);
     }
     public static final MemoryLayout CXIdxObjCInterfaceDeclInfo$LAYOUT = MemoryLayout.ofStruct(
         CSupport.C_POINTER.withName("containerInfo"),
         CSupport.C_POINTER.withName("superInfo"),
         CSupport.C_POINTER.withName("protocols")
@@ -6872,14 +6872,14 @@
         CSupport.C_INT.withName("numBases"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxCXXClassDeclInfo$numBases = CXIdxCXXClassDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("numBases"));
     public static final int CXIdxCXXClassDeclInfo$numBases$get(MemorySegment seg) {
-        return (int)CXIdxCXXClassDeclInfo$numBases.get(seg.address());
+        return (int)CXIdxCXXClassDeclInfo$numBases.get(seg);
     }
     public static final void CXIdxCXXClassDeclInfo$numBases$set(MemorySegment seg, int x) {
-        CXIdxCXXClassDeclInfo$numBases.set(seg.address(), x);
+        CXIdxCXXClassDeclInfo$numBases.set(seg, x);
     }
     public static final int CXIdxEntityRef_Direct = (int)1L;
     public static final int CXIdxEntityRef_Implicit = (int)2L;
     public static final int CXSymbolRole_None = (int)0L;
     public static final int CXSymbolRole_Declaration = (int)1L;
@@ -6910,21 +6910,21 @@
         CSupport.C_INT.withName("role"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxEntityRefInfo$kind = CXIdxEntityRefInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
     public static final int CXIdxEntityRefInfo$kind$get(MemorySegment seg) {
-        return (int)CXIdxEntityRefInfo$kind.get(seg.address());
+        return (int)CXIdxEntityRefInfo$kind.get(seg);
     }
     public static final void CXIdxEntityRefInfo$kind$set(MemorySegment seg, int x) {
-        CXIdxEntityRefInfo$kind.set(seg.address(), x);
+        CXIdxEntityRefInfo$kind.set(seg, x);
     }
     public static final VarHandle CXIdxEntityRefInfo$role = CXIdxEntityRefInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("role"));
     public static final int CXIdxEntityRefInfo$role$get(MemorySegment seg) {
-        return (int)CXIdxEntityRefInfo$role.get(seg.address());
+        return (int)CXIdxEntityRefInfo$role.get(seg);
     }
     public static final void CXIdxEntityRefInfo$role$set(MemorySegment seg, int x) {
-        CXIdxEntityRefInfo$role.set(seg.address(), x);
+        CXIdxEntityRefInfo$role.set(seg, x);
     }
     public static final MemoryLayout IndexerCallbacks$LAYOUT = MemoryLayout.ofStruct(
         CSupport.C_POINTER.withName("abortQuery"),
         CSupport.C_POINTER.withName("diagnostic"),
         CSupport.C_POINTER.withName("enteredMainFile"),
