diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/ConstantHelper.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/ConstantHelper.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/ConstantHelper.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/ConstantHelper.java
@@ -91,17 +91,10 @@
             desc(MemoryAddress.class),
             "ofLong",
             desc(methodType(MemoryAddress.class, long.class))
     );
 
-    private static final DirectMethodHandleDesc MH_MemorySegment_baseAddress = MethodHandleDesc.ofMethod(
-            Kind.INTERFACE_VIRTUAL,
-            desc(MemorySegment.class),
-            "address",
-            desc(methodType(MemoryAddress.class))
-    );
-
     private static final DirectMethodHandleDesc MH_MemoryHandles_asAddressVarHandle = MethodHandleDesc.ofMethod(
             Kind.STATIC,
             desc(MemoryHandles.class),
             "asAddressVarHandle",
             desc(methodType(VarHandle.class, VarHandle.class))
@@ -161,11 +154,11 @@
         );
         this.MH_lookupGlobalVariable = findRuntimeHelperBootstrap(
                 runtimeHelper,
                 "lookupGlobalVariable",
                 methodType(
-                        MemoryAddress.class,
+                        MemorySegment.class,
                         LibraryLookup[].class,
                         String.class,
                         MemoryLayout.class)
         );
         this.MH_makeCString = findRuntimeHelperBootstrap(
@@ -207,22 +200,26 @@
     public DirectMethodHandleDesc addMethodHandle(String javaName, String nativeName, MethodType mtype, FunctionDescriptor desc, boolean varargs) {
         return emitCondyGetter(javaName + "$MH", MethodHandle.class, methodHandleDesc(nativeName, mtype, desc, varargs));
     }
 
     public DirectMethodHandleDesc addAddress(String javaName, String nativeName, MemoryLayout layout) {
-        return emitCondyGetter(javaName + "$ADDR", MemoryAddress.class, globalVarAddressDesc(nativeName, layout));
+        return emitCondyGetter(javaName + "$ADDR", MemorySegment.class, globalVarAddressDesc(nativeName, layout));
     }
 
     public DirectMethodHandleDesc addFunctionDesc(String javaName, FunctionDescriptor fDesc) {
         return emitCondyGetter(javaName + "$DESC", FunctionDescriptor.class, desc(fDesc));
     }
 
     public DirectMethodHandleDesc addConstant(String name, Class<?> type, Object value) {
         if (type == MemoryAddress.class) {
             if (value instanceof Long) {
                 return emitCondyGetter(name, type, addressDesc((Long) value));
-            } else if (value instanceof String) {
+            } else {
+                throw new IllegalStateException("Unhandled constant value type: " + value.getClass());
+            }
+        } else if (type == MemorySegment.class) {
+            if (value instanceof String) {
                 return emitCondyGetter(name, type, cStringDesc((String) value));
             } else {
                 throw new IllegalStateException("Unhandled constant value type: " + value.getClass());
             }
         } else if (type.isPrimitive()) {
@@ -447,21 +444,19 @@
 
         return type == MemoryAddress.class ? addressVarHandleDesc(javaName, varHandle) : varHandle;
     }
 
     private ConstantDesc globalVarAddressDesc(String name, MemoryLayout layout) {
-        return DynamicConstantDesc.ofNamed(BSM_INVOKE, "ADDR_" + name, CD_MemoryAddress, MH_lookupGlobalVariable, LIBRARIES, name, desc(layout));
+        return DynamicConstantDesc.ofNamed(BSM_INVOKE, "ADDR_" + name, CD_MemorySegment, MH_lookupGlobalVariable, LIBRARIES, name, desc(layout));
     }
 
     private ConstantDesc addressDesc(long value) {
         return DynamicConstantDesc.ofNamed(BSM_INVOKE, "MA_" + value, CD_MemoryAddress, MH_MemoryAddress_ofLong, value);
     }
 
     private ConstantDesc cStringDesc(String value) {
-        return DynamicConstantDesc.ofNamed(BSM_INVOKE, "BASEADDRESS", CD_MemoryAddress, MH_MemorySegment_baseAddress,
-            DynamicConstantDesc.ofNamed(BSM_INVOKE, "CSTRING", CD_MemorySegment, MH_makeCString, value)
-        );
+        return DynamicConstantDesc.ofNamed(BSM_INVOKE, "CSTRING", CD_MemorySegment, MH_makeCString, value);
     }
 
     private ConstantDesc methodHandleDesc(String name, MethodType mtype, FunctionDescriptor funcDesc, boolean varargs) {
         return DynamicConstantDesc.ofNamed(BSM_INVOKE, "MH_" + name, CD_MethodHandle, MH_downcallHandle,
             LIBRARIES,
