diff a/test/hotspot/jtreg/vmTestbase/nsk/share/gc/lock/jni/ShortArrayCriticalLocker.cpp b/test/hotspot/jtreg/vmTestbase/nsk/share/gc/lock/jni/ShortArrayCriticalLocker.cpp
--- a/test/hotspot/jtreg/vmTestbase/nsk/share/gc/lock/jni/ShortArrayCriticalLocker.cpp
+++ b/test/hotspot/jtreg/vmTestbase/nsk/share/gc/lock/jni/ShortArrayCriticalLocker.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2007, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -35,42 +35,44 @@
  * Method:    criticalNative
  * Signature: ([Z)Z
  */
 JNIEXPORT jshort JNICALL Java_nsk_share_gc_lock_jni_ShortArrayCriticalLocker_criticalNative
 (JNIEnv *jni_env, jobject o, jlong enterTime, jlong sleepTime) {
-        ExceptionCheckingJniEnvPtr ec_jni(jni_env);
+  ExceptionCheckingJniEnvPtr ec_jni(jni_env);
 
-        jsize size, i;
-        jshortArray arr;
-        jshort *pa;
-        jshort hash = 0;
-        time_t start_time, current_time;
+  jsize size, i;
+  jshortArray arr;
+  jshort *pa;
+  jshort hash = 0;
+  time_t start_time, current_time;
 
-        if (objFieldId == NULL) {
-                jclass klass = ec_jni->GetObjectClass(o, TRACE_JNI_CALL);
-                objFieldId = ec_jni->GetFieldID(klass, "obj", "Ljava/lang/Object;", TRACE_JNI_CALL);
-        }
-        arr = (jshortArray) ec_jni->GetObjectField(o, objFieldId, TRACE_JNI_CALL);
-        ec_jni->SetObjectField(o, objFieldId, NULL, TRACE_JNI_CALL);
+  if (objFieldId == NULL) {
+  jclass klass = ec_jni->GetObjectClass(o, TRACE_JNI_CALL);
+  objFieldId = ec_jni->GetFieldID(klass, "obj", "Ljava/lang/Object;", TRACE_JNI_CALL);
+  }
+  arr = (jshortArray) ec_jni->GetObjectField(o, objFieldId, TRACE_JNI_CALL);
+  ec_jni->SetObjectField(o, objFieldId, NULL, TRACE_JNI_CALL);
 
-        size = ec_jni->GetArrayLength(arr, TRACE_JNI_CALL);
-        start_time = time(NULL);
-        enterTime /= 1000;
-        current_time = 0;
-        while (current_time - start_time < enterTime) {
-                pa = (jshort*) ec_jni->GetPrimitiveArrayCritical(arr, NULL, TRACE_JNI_CALL);
-                if (pa != NULL) {
-                        for (i = 0; i < size; ++i)
-                                hash ^= pa[i];
-                } else {
-                        hash = 0;
-                }
-                mssleep((long) sleepTime);
-                ec_jni->ReleasePrimitiveArrayCritical(arr, pa, 0, TRACE_JNI_CALL);
-                mssleep((long) sleepTime);
-                current_time = time(NULL);
-        }
-        ec_jni->SetObjectField(o, objFieldId, arr, TRACE_JNI_CALL);
-        return hash;
+  size = ec_jni->GetArrayLength(arr, TRACE_JNI_CALL);
+  start_time = time(NULL);
+  enterTime /= 1000;
+  current_time = 0;
+  while (current_time - start_time < enterTime) {
+    hash = 0;
+    pa = (jshort*) ec_jni->GetPrimitiveArrayCritical(arr, NULL, TRACE_JNI_CALL);
+    if (pa != NULL) {
+      for (i = 0; i < size; ++i) {
+        hash ^= pa[i];
+      }
+    } else {
+      jni_env->FatalError("GetPrimitiveArrayCritical returned NULL");
+    }
+    mssleep((long) sleepTime);
+    ec_jni->ReleasePrimitiveArrayCritical(arr, pa, 0, TRACE_JNI_CALL);
+    mssleep((long) sleepTime);
+    current_time = time(NULL);
+  }
+  ec_jni->SetObjectField(o, objFieldId, arr, TRACE_JNI_CALL);
+  return hash;
 }
 
 }
