diff a/test/hotspot/jtreg/serviceability/sa/ClhsdbFindPC.java b/test/hotspot/jtreg/serviceability/sa/ClhsdbFindPC.java
--- a/test/hotspot/jtreg/serviceability/sa/ClhsdbFindPC.java
+++ b/test/hotspot/jtreg/serviceability/sa/ClhsdbFindPC.java
@@ -25,42 +25,67 @@
 import java.util.List;
 import java.util.Map;
 import java.util.ArrayList;
 
 import jdk.test.lib.apps.LingeredApp;
+import jdk.test.lib.util.CoreUtils;
 import jtreg.SkippedException;
 
 /**
  * @test
  * @bug 8193124
- * @summary Test the clhsdb 'findpc' command
+ * @summary Test the clhsdb 'findpc' command with Xcomp on live process
  * @requires vm.hasSA
  * @requires vm.compiler1.enabled
  * @requires vm.opt.DeoptimizeALot != true
  * @library /test/lib
- * @run main/othervm/timeout=480 ClhsdbFindPC true
+ * @run main/othervm/timeout=480 ClhsdbFindPC true false
  */
 
 /**
  * @test
  * @bug 8193124
- * @summary Test the clhsdb 'findpc' command
+ * @summary Test the clhsdb 'findpc' command with Xcomp on core file
  * @requires vm.compMode != "Xcomp"
  * @requires vm.hasSA
  * @requires vm.compiler1.enabled
  * @library /test/lib
- * @run main/othervm/timeout=480 ClhsdbFindPC false
+ * @run main/othervm/timeout=480 ClhsdbFindPC true true
+ */
+
+/**
+ * @test
+ * @bug 8193124
+ * @summary Test the clhsdb 'findpc' command w/o Xcomp on live process
+ * @requires vm.hasSA
+ * @requires vm.compiler1.enabled
+ * @requires vm.opt.DeoptimizeALot != true
+ * @library /test/lib
+ * @run main/othervm/timeout=480 ClhsdbFindPC false false
+ */
+
+/**
+ * @test
+ * @bug 8193124
+ * @summary Test the clhsdb 'findpc' command w/o Xcomp on core file
+ * @requires vm.compMode != "Xcomp"
+ * @requires vm.hasSA
+ * @requires vm.compiler1.enabled
+ * @library /test/lib
+ * @run main/othervm/timeout=480 ClhsdbFindPC false true
  */
 
 public class ClhsdbFindPC {
 
-    private static void testFindPC(boolean withXcomp) throws Exception {
+    private static void testFindPC(boolean withXcomp, boolean withCore) throws Exception {
         LingeredApp theApp = null;
+        String coreFileName = null;
         try {
             ClhsdbLauncher test = new ClhsdbLauncher();
 
             theApp = new LingeredAppWithTrivialMain();
+            theApp.setForceCrash(withCore);
             if (withXcomp) {
                 LingeredApp.startApp(theApp, "-Xcomp");
             } else {
                 LingeredApp.startApp(theApp, "-Xint");
             }
@@ -70,31 +95,45 @@
             } else {
                 System.out.print("(-Xint) ");
             }
             System.out.println("with pid " + theApp.getPid());
 
-            // Run 'jstack -v' command to get the pc
-            List<String> cmds = List.of("jstack -v");
-            String output = test.run(theApp.getPid(), cmds, null, null);
+            // Get the core file name if we are debugging a core instead of live process
+            if (withCore) {
+                coreFileName = CoreUtils.getCoreFileLocation(theApp.getOutput().getStdout());
+            }
 
-            // Test the 'findpc' command passing in the pc obtained from
-            // the 'jstack -v' command
-            cmds = new ArrayList<String>();
+            // Run 'jstack -v' command to get the findpc address
+            List<String> cmds = List.of("jstack -v");
+            String output;
+            if (withCore) {
+                output = test.runOnCore(coreFileName, cmds, null, null);
+            } else {
+                output = test.run(theApp.getPid(), cmds, null, null);
+            }
 
-            String cmdStr = null;
+            // Extract pc address from the following line:
+            //   - LingeredAppWithTrivialMain.main(java.lang.String[]) @bci=1, line=33, pc=0x00007ff18ff519f0, ...
+            String pcAddress = null;
             String[] parts = output.split("LingeredAppWithTrivialMain.main");
             String[] tokens = parts[1].split(" ");
             for (String token : tokens) {
                 if (token.contains("pc")) {
-                    String[] address = token.split("=");
-                    // address[1] represents the address of the Method
-                    cmdStr = "findpc " + address[1].replace(",","");
-                    cmds.add(cmdStr);
+                    String[] addresses = token.split("=");
+                    // addresses[1] represents the address of the Method
+                    pcAddress = addresses[1].replace(",","");
                     break;
                 }
             }
+            if (pcAddress == null) {
+                throw new RuntimeException("Cannot find LingeredAppWithTrivialMain.main pc in output");
+            }
 
+            // Test the 'findpc' command passing in the pc obtained from above
+            cmds = new ArrayList<String>();
+            String cmdStr = "findpc " + pcAddress;
+            cmds.add(cmdStr);
             Map<String, List<String>> expStrMap = new HashMap<>();
             if (withXcomp) {
                 expStrMap.put(cmdStr, List.of(
                             "In code in NMethod for LingeredAppWithTrivialMain.main",
                             "content:",
@@ -103,22 +142,29 @@
             } else {
                 expStrMap.put(cmdStr, List.of(
                             "In interpreter codelet"));
             }
 
-            test.run(theApp.getPid(), cmds, expStrMap, null);
+            if (withCore) {
+                test.runOnCore(coreFileName, cmds, expStrMap, null);
+            } else {
+                test.run(theApp.getPid(), cmds, expStrMap, null);
+            }
         } catch (SkippedException se) {
             throw se;
         } catch (Exception ex) {
             throw new RuntimeException("Test ERROR " + ex, ex);
         } finally {
-            LingeredApp.stopApp(theApp);
+            if (!withCore) {
+                LingeredApp.stopApp(theApp);
+            }
         }
     }
 
     public static void main(String[] args) throws Exception {
-        boolean xComp = Boolean.parseBoolean(args[0]);
+        boolean withXcomp = Boolean.parseBoolean(args[0]);
+        boolean withCore = Boolean.parseBoolean(args[1]);
         System.out.println("Starting the ClhsdbFindPC test");
-        testFindPC(xComp);
+        testFindPC(withXcomp, withCore);
         System.out.println("Test PASSED");
     }
 }
