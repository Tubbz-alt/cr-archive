diff a/test/lib/jdk/test/lib/apps/LingeredApp.java b/test/lib/jdk/test/lib/apps/LingeredApp.java
--- a/test/lib/jdk/test/lib/apps/LingeredApp.java
+++ b/test/lib/jdk/test/lib/apps/LingeredApp.java
@@ -42,10 +42,11 @@
 
 import jdk.test.lib.JDKToolFinder;
 import jdk.test.lib.Utils;
 import jdk.test.lib.process.OutputBuffer;
 import jdk.test.lib.process.StreamPumper;
+import jdk.test.lib.util.CoreUtils;
 
 /**
  * This is a framework to launch an app that could be synchronized with caller
  * to make further attach actions reliable across supported platforms
 
@@ -91,10 +92,12 @@
     protected Process appProcess;
     protected OutputBuffer output;
     protected static final int appWaitTime = 100;
     protected final String lockFileName;
 
+    protected boolean forceCrash = false; // set true to force a crash and core file
+
     /**
      * Create LingeredApp object on caller side. Lock file have be a valid filename
      * at writable location
      *
      * @param lockFileName - the name of lock file
@@ -106,10 +109,16 @@
     public LingeredApp() {
         final String lockName = UUID.randomUUID().toString() + ".lck";
         this.lockFileName = lockName;
     }
 
+    public void setForceCrash(boolean forceCrash) {
+        this.forceCrash = forceCrash;
+    }
+
+    native private static int crash();
+
     /**
      *
      * @return name of lock file
      */
     public String getLockFileName() {
@@ -261,11 +270,15 @@
                 break;
             }
 
             // Make sure process didn't already exit
             if (!appProcess.isAlive()) {
-                throw new IOException("App exited unexpectedly with " + appProcess.exitValue());
+                if (forceCrash) {
+                    return; // This is expected. Just return.
+                } else {
+                    throw new IOException("App exited unexpectedly with " + appProcess.exitValue());
+                }
             }
 
             try {
                 Thread.sleep(spinDelay);
             } catch (InterruptedException ex) {
@@ -287,10 +300,15 @@
      */
     private List<String> runAppPrepare(String[] vmArguments) {
         List<String> cmd = new ArrayList<>();
         cmd.add(JDKToolFinder.getTestJDKTool("java"));
         Collections.addAll(cmd, vmArguments);
+        if (forceCrash) {
+            cmd.add("-XX:+CreateCoredumpOnCrash");
+            // We need to find libLingeredApp.so for the crash() native method
+            cmd.add("-Djava.library.path=" + System.getProperty("java.library.path"));
+        }
 
         // Make sure we set correct classpath to run the app
         cmd.add("-cp");
         String classpath = System.getProperty("test.class.path");
         cmd.add((classpath == null) ? "." : classpath);
@@ -327,14 +345,21 @@
 
         List<String> cmd = runAppPrepare(vmOpts);
 
         runAddAppName(cmd);
         cmd.add(lockFileName);
+        if (forceCrash) {
+            cmd.add("forceCrash"); // Let the subprocess know to force a crash
+        }
 
         printCommandLine(cmd);
 
         ProcessBuilder pb = new ProcessBuilder(cmd);
+        if (forceCrash) {
+            // If we are going to force a core dump, apply "ulimit -c unlimited" if we can.
+            pb = CoreUtils.addCoreUlimitCommand(pb);
+        }
         // ProcessBuilder.start can throw IOException
         appProcess = pb.start();
 
         startOutputPumpers();
     }
@@ -468,23 +493,41 @@
 
         return sane;
     }
 
     /**
-     * This part is the application it self
+     * This part is the application itself. First arg is optional "forceCrash".
+     * Following arg is the lock file name.
      */
     public static void main(String args[]) {
+        boolean forceCrash = false;
 
-        if (args.length != 1) {
+        if (args.length == 0) {
             System.err.println("Lock file name is not specified");
             System.exit(7);
+        } else if (args.length > 2) {
+            System.err.println("Too many arguments specified: "  + args.length);
+            System.exit(7);
+        }
+
+        if (args.length == 2) {
+            if (args[1].equals("forceCrash")) {
+                forceCrash = true;
+            } else {
+                System.err.println("Invalid 1st argment: " + args[1]);
+                System.exit(7);
+            }
         }
 
         String theLockFileName = args[0];
         Path path = Paths.get(theLockFileName);
 
         try {
+            if (forceCrash) {
+                System.loadLibrary("LingeredApp"); // location of native crash() method
+                crash();
+            }
             while (Files.exists(path)) {
                 // Touch the lock to indicate our readiness
                 setLastModified(theLockFileName, epoch());
                 Thread.sleep(spinDelay);
             }
