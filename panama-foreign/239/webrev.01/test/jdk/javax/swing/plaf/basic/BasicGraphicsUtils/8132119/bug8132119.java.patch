diff a/test/jdk/javax/swing/plaf/basic/BasicGraphicsUtils/8132119/bug8132119.java b/test/jdk/javax/swing/plaf/basic/BasicGraphicsUtils/8132119/bug8132119.java
--- a/test/jdk/javax/swing/plaf/basic/BasicGraphicsUtils/8132119/bug8132119.java
+++ b/test/jdk/javax/swing/plaf/basic/BasicGraphicsUtils/8132119/bug8132119.java
@@ -18,10 +18,12 @@
  *
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
+import java.io.File;
+import javax.imageio.ImageIO;
 
 import java.awt.Color;
 import java.awt.Font;
 import java.awt.FontMetrics;
 import java.awt.Graphics2D;
@@ -149,22 +151,27 @@
         g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,
                             RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
 
         FontMetrics fontMetrices = comp.getFontMetrics(comp.getFont());
         float width = BasicGraphicsUtils.getStringWidth(comp, fontMetrices, str);
-        float x = (WIDTH - width) / 2;
         int y = 3 * HEIGHT / 4;
 
         if (underlined) {
-            BasicGraphicsUtils.drawStringUnderlineCharAt(comp, g2, str, 1, x, y);
+            BasicGraphicsUtils.drawStringUnderlineCharAt(comp, g2, str, 1, 0, y);
         } else {
-            BasicGraphicsUtils.drawString(comp, g2, str, x, y);
+            BasicGraphicsUtils.drawString(comp, g2, str, 0, y);
         }
         g2.dispose();
 
-        float xx = BasicGraphicsUtils.getStringWidth(comp, fontMetrices, "A") +
-                BasicGraphicsUtils.getStringWidth(comp, fontMetrices, "O")/2 -  10;
+        float xx = 0;
+        if (underlined) {
+            xx = BasicGraphicsUtils.getStringWidth(comp, fontMetrices, "A") +
+                BasicGraphicsUtils.getStringWidth(comp, fontMetrices, "O")/2  - 5;
+        } else {
+            xx = BasicGraphicsUtils.getStringWidth(comp, fontMetrices, "A") +
+                BasicGraphicsUtils.getStringWidth(comp, fontMetrices, "O")/2;
+        }
 
         checkImageContainsSymbol(buffImage, (int) xx, underlined ? 3 : 2);
     }
 
     private static void checkNullArguments() {
@@ -345,11 +352,15 @@
                 isBackground = !isBackground;
                 backgroundChangesCount++;
             }
         }
 
+
         if (backgroundChangesCount != intersections * 2) {
+            try {
+                ImageIO.write(buffImage, "png", new File("image.png"));
+            } catch (Exception e) {}
             throw new RuntimeException("String is not properly drawn!");
         }
     }
 
     private static BufferedImage createBufferedImage(int width, int height) {
