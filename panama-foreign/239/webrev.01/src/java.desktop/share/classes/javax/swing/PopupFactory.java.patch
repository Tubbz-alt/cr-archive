diff a/src/java.desktop/share/classes/javax/swing/PopupFactory.java b/src/java.desktop/share/classes/javax/swing/PopupFactory.java
--- a/src/java.desktop/share/classes/javax/swing/PopupFactory.java
+++ b/src/java.desktop/share/classes/javax/swing/PopupFactory.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,23 +23,34 @@
  * questions.
  */
 
 package javax.swing;
 
-import sun.awt.EmbeddedFrame;
-import sun.awt.OSInfo;
-import sun.swing.SwingAccessor;
-
 import java.applet.Applet;
-import java.awt.*;
+import java.awt.BorderLayout;
+import java.awt.Component;
+import java.awt.Container;
+import java.awt.GraphicsConfiguration;
+import java.awt.GraphicsEnvironment;
+import java.awt.Insets;
+import java.awt.Panel;
+import java.awt.Point;
+import java.awt.Rectangle;
+import java.awt.Toolkit;
+import java.awt.Window;
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
 import java.security.AccessController;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+
+import sun.awt.EmbeddedFrame;
+import sun.awt.OSInfo;
+import sun.swing.SwingAccessor;
+
 import static javax.swing.ClientPropertyKey.PopupFactory_FORCE_HEAVYWEIGHT_POPUP;
 
 /**
  * <code>PopupFactory</code>, as the name implies, is used to obtain
  * instances of <code>Popup</code>s. <code>Popup</code>s are used to
@@ -824,17 +835,16 @@
             if (parent instanceof JLayeredPane) {
                 parent.add(component, JLayeredPane.POPUP_LAYER, 0);
             } else {
                 parent.add(component);
             }
+            pack();
+            component.setVisible(true);
         }
 
         Component createComponent(Component owner) {
-            JComponent component = new JPanel(new BorderLayout(), true);
-
-            component.setOpaque(true);
-            return component;
+            return new JPanel(new BorderLayout(), true);
         }
 
         //
         // Local methods
         //
@@ -845,15 +855,14 @@
         void reset(Component owner, Component contents, int ownerX,
                    int ownerY) {
             super.reset(owner, contents, ownerX, ownerY);
 
             JComponent component = (JComponent)getComponent();
-
-            component.setOpaque(contents.isOpaque());
+            component.setVisible(false);
             component.setLocation(ownerX, ownerY);
+            component.setOpaque(contents.isOpaque());
             component.add(contents, BorderLayout.CENTER);
-            contents.invalidate();
             pack();
         }
     }
 
 
@@ -958,31 +967,26 @@
               add to the window. */
             while (!(parent instanceof Window || parent instanceof Applet) &&
                    (parent!=null)) {
                 parent = parent.getParent();
             }
-            // Set the visibility to false before adding to workaround a
-            // bug in Solaris in which the Popup gets added at the wrong
-            // location, which will result in a mouseExit, which will then
-            // result in the ToolTip being removed.
+
             if (parent instanceof RootPaneContainer) {
-                parent = ((RootPaneContainer)parent).getLayeredPane();
-                Point p = SwingUtilities.convertScreenLocationToParent(parent,
-                                                                       x, y);
-                component.setVisible(false);
-                component.setLocation(p.x, p.y);
-                parent.add(component, JLayeredPane.POPUP_LAYER,
-                                           0);
-            } else {
-                Point p = SwingUtilities.convertScreenLocationToParent(parent,
-                                                                       x, y);
+                parent = ((RootPaneContainer) parent).getLayeredPane();
+            }
 
-                component.setLocation(p.x, p.y);
-                component.setVisible(false);
+            Point p = SwingUtilities.convertScreenLocationToParent(parent,
+                                                                   x, y);
+            component.setLocation(p.x, p.y);
+            if (parent instanceof JLayeredPane) {
+                parent.add(component, JLayeredPane.POPUP_LAYER, 0);
+            } else {
                 parent.add(component);
             }
+            pack();
             component.setVisible(true);
+            component.revalidate();
         }
 
         Component createComponent(Component owner) {
             Panel component = new MediumWeightComponent();
 
@@ -1002,15 +1006,13 @@
         void reset(Component owner, Component contents, int ownerX,
                    int ownerY) {
             super.reset(owner, contents, ownerX, ownerY);
 
             Component component = getComponent();
-
+            component.setVisible(false);
             component.setLocation(ownerX, ownerY);
             rootPane.getContentPane().add(contents, BorderLayout.CENTER);
-            contents.invalidate();
-            component.validate();
             pack();
         }
 
 
         // This implements SwingHeavyWeight so that repaints on it
