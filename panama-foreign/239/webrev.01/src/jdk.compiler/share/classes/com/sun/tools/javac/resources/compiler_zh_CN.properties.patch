diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler_zh_CN.properties b/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler_zh_CN.properties
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler_zh_CN.properties
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler_zh_CN.properties
@@ -595,12 +595,10 @@
 # 0: name
 compiler.err.modifier.not.allowed.here=\u6B64\u5904\u4E0D\u5141\u8BB8\u4F7F\u7528\u4FEE\u9970\u7B26{0}
 
 compiler.err.intf.not.allowed.here=\u6B64\u5904\u4E0D\u5141\u8BB8\u4F7F\u7528\u63A5\u53E3
 
-compiler.err.enums.must.be.static=\u53EA\u6709\u5728\u9759\u6001\u4E0A\u4E0B\u6587\u4E2D\u624D\u5141\u8BB8\u4F7F\u7528\u679A\u4E3E\u58F0\u660E
-
 # 0: symbol, 1: symbol
 compiler.err.name.clash.same.erasure=\u540D\u79F0\u51B2\u7A81: {0}\u548C{1}\u5177\u6709\u76F8\u540C\u7591\u7B26
 
 # 0: name, 1: list of type, 2: symbol, 3: name, 4: list of type, 5: symbol
 compiler.err.name.clash.same.erasure.no.override=\u540D\u79F0\u51B2\u7A81: {2} \u4E2D\u7684 {0}({1}) \u548C {5} \u4E2D\u7684 {3}({4}) \u5177\u6709\u76F8\u540C\u7591\u7B26, \u4F46\u4E24\u8005\u5747\u4E0D\u8986\u76D6\u5BF9\u65B9
@@ -2092,10 +2090,12 @@
 
 compiler.misc.feature.reifiable.types.instanceof=instanceof \u4E2D\u7684\u53EF\u5177\u4F53\u5316\u7C7B\u578B
 
 compiler.misc.feature.records=\u8BB0\u5F55
 
+compiler.misc.feature.sealed.classes=\u5BC6\u5C01\u7C7B
+
 compiler.warn.underscore.as.identifier=\u4ECE\u53D1\u884C\u7248 9 \u5F00\u59CB, ''_'' \u4E3A\u5173\u952E\u5B57, \u4E0D\u80FD\u7528\u4F5C\u6807\u8BC6\u7B26
 
 compiler.err.underscore.as.identifier=\u4ECE\u53D1\u884C\u7248 9 \u5F00\u59CB, ''_'' \u4E3A\u5173\u952E\u5B57, \u4E0D\u80FD\u7528\u4F5C\u6807\u8BC6\u7B26
 
 compiler.err.underscore.as.identifier.in.lambda=''_'' \u7528\u4F5C\u6807\u8BC6\u7B26\n(\u5BF9\u4E8E lambda \u53C2\u6570, \u7981\u6B62\u5C06 ''_'' \u7528\u4F5C\u6807\u8BC6\u7B26)
@@ -2235,12 +2235,10 @@
 ###
 # errors related to doc comments
 
 compiler.err.dc.bad.entity=HTML \u5B9E\u4F53\u9519\u8BEF
 
-compiler.err.dc.bad.gt=''>'' \u7684\u7528\u6CD5\u9519\u8BEF
-
 compiler.err.dc.bad.inline.tag=\u5185\u5D4C\u6807\u8BB0\u7684\u7528\u6CD5\u4E0D\u6B63\u786E
 
 compiler.err.dc.identifier.expected=\u9700\u8981\u6807\u8BC6\u7B26
 
 compiler.err.dc.malformed.html=\u683C\u5F0F\u9519\u8BEF\u7684 HTML
@@ -2447,10 +2445,53 @@
 
 compiler.err.switch.case.unexpected.statement=case \u4E2D\u5B58\u5728\u610F\u5916\u8BED\u53E5\uFF0C\u5E94\u4E3A\u8868\u8FBE\u5F0F\u3001\u5757\u6216\u629B\u51FA\u8BED\u53E5
 
 compiler.err.switch.mixing.case.types=\u5728 switch \u4E2D\u4F7F\u7528\u4E86\u4E0D\u540C case \u7C7B\u578B
 
+###
+# errors related to sealed classes
+
+# permits clause
+# 0: fragment
+compiler.err.invalid.permits.clause=\u65E0\u6548\u7684 permits \u5B50\u53E5\n({0})
+
+# 0: string
+compiler.misc.class.is.not.sealed=\u5FC5\u987B\u5BC6\u5C01 {0}
+
+# 0: type
+compiler.misc.is.a.type.variable=\u4E0D\u5F97\u5305\u542B\u7C7B\u578B\u53D8\u91CF\uFF1A{0}
+
+# 0: type
+compiler.misc.is.duplicated=\u4E0D\u5F97\u5305\u542B\u91CD\u590D\u9879\uFF1A{0}
+
+# 0: type
+compiler.misc.doesnt.extend.sealed=\u5B50\u7C7B {0} \u5FC5\u987B\u6269\u5C55\u5BC6\u5C01\u7C7B
+
+compiler.misc.must.not.be.same.class=permits \u5B50\u53E5\u4E2D\u5B58\u5728\u975E\u6CD5\u81EA\u5F15\u7528
+
+# 0: type
+compiler.misc.must.not.be.supertype=\u5BF9\u8D85\u7C7B\u578B {0} \u7684\u5F15\u7528\u975E\u6CD5
+
+# other sealed types related errors
+
+compiler.err.sealed.class.must.have.subclasses=\u5BC6\u5C01\u7C7B\u5FC5\u987B\u5177\u6709\u5B50\u7C7B
+
+# errors in subclasses of sealed classes
+# 0: symbol
+compiler.err.cant.inherit.from.sealed=\u7C7B\u4E0D\u5F97\u6269\u5C55\u5BC6\u5C01\u7C7B\uFF1A{0}
+
+# 0: symbol
+compiler.err.non.sealed.with.no.sealed.supertype=\u6B64\u5904\u4E0D\u5141\u8BB8\u4F7F\u7528\u975E\u5BC6\u5C01\u4FEE\u9970\u7B26\n\uFF08\u7C7B {0} \u4E0D\u5177\u6709\u4EFB\u4F55\u5BC6\u5C01\u7684\u8D85\u7C7B\u578B\uFF09
+
+compiler.err.non.sealed.sealed.or.final.expected=\u9700\u8981\u5BC6\u5C01\u3001\u975E\u5BC6\u5C01\u6216\u6700\u7EC8\u4FEE\u9970\u7B26
+
+compiler.err.non.sealed.or.sealed.expected=\u9700\u8981\u5BC6\u5C01\u6216\u975E\u5BC6\u5C01\u4FEE\u9970\u7B26
+
+compiler.err.sealed.or.non.sealed.local.classes.not.allowed=\u4E0D\u5141\u8BB8\u4F7F\u7528\u5BC6\u5C01\u6216\u975E\u5BC6\u5C01\u672C\u5730\u7C7B
+
+compiler.err.local.classes.cant.extend.sealed=\u672C\u5730\u7C7B\u4E0D\u5F97\u6269\u5C55\u5BC6\u5C01\u7C7B
+
 ###
 # errors related to records
 
 # record components
 compiler.err.record.cant.declare.field.modifiers=\u8BB0\u5F55\u7EC4\u4EF6\u4E0D\u80FD\u5177\u6709\u9650\u5B9A\u7B26
@@ -2472,41 +2513,43 @@
 compiler.misc.accessor.method.must.not.be.generic=\u5B58\u53D6\u65B9\u6CD5\u4E0D\u80FD\u4E3A\u6CDB\u578B\u65B9\u6CD5
 
 compiler.misc.accessor.method.must.not.be.static=\u5B58\u53D6\u65B9\u6CD5\u4E0D\u80FD\u4E3A\u9759\u6001\u65B9\u6CD5
 
 # canonical constructors
-# 0: fragment, 1: symbol, 2: fragment
+# 0: fragment, 1: name, 2: fragment
 compiler.err.invalid.canonical.constructor.in.record=\u8BB0\u5F55 {1} \u4E2D\u7684 {0} \u6784\u9020\u5668\u65E0\u6548\n({2})
 
 compiler.misc.canonical=\u89C4\u8303
 
 compiler.misc.compact=\u7CBE\u7B80
 
-compiler.misc.canonical.constructor.must.be.public=\u89C4\u8303\u6784\u9020\u5668\u5FC5\u987B\u662F\u516C\u5171\u7684
-
-compiler.misc.throws.clause.not.allowed.for.canonical.constructor=\u5BF9\u4E8E\u89C4\u8303\u6784\u9020\u5668\u4E0D\u5141\u8BB8\u4F7F\u7528 throws \u5B50\u53E5
+# 0: fragment
+compiler.misc.throws.clause.not.allowed.for.canonical.constructor=\u5BF9\u4E8E {0} \u6784\u9020\u5668\uFF0C\u4E0D\u5141\u8BB8\u4F7F\u7528 throws \u5B50\u53E5
 
 compiler.misc.canonical.with.name.mismatch=\u89C4\u8303\u6784\u9020\u5668\u4E2D\u7684\u53C2\u6570\u540D\u79F0\u65E0\u6548
 
 compiler.misc.canonical.cant.have.return.statement=\u7CBE\u7B80\u6784\u9020\u5668\u4E0D\u5F97\u5305\u542B\u8FD4\u56DE\u8BED\u53E5
 
 compiler.misc.canonical.must.not.declare.type.variables=\u89C4\u8303\u6784\u9020\u5668\u4E0D\u5F97\u58F0\u660E\u7C7B\u578B\u53D8\u91CF
 
-compiler.misc.type.must.be.identical.to.corresponding.record.component.type=\u7C7B\u578B\u5FC5\u987B\u4E0E\u76F8\u5E94\u8BB0\u5F55\u7EC4\u4EF6\u7684\u7C7B\u578B\u76F8\u5339\u914D
+compiler.misc.type.must.be.identical.to.corresponding.record.component.type=\u7C7B\u578B\u548C\u5143\u6570\u5FC5\u987B\u4E0E\u76F8\u5E94\u8BB0\u5F55\u7EC4\u4EF6\u7684\u7C7B\u578B\u548C\u5143\u6570\u76F8\u5339\u914D
 compiler.misc.canonical.must.not.contain.explicit.constructor.invocation=\u89C4\u8303\u6784\u9020\u5668\u4E0D\u5F97\u5305\u542B\u663E\u5F0F\u6784\u9020\u5668\u8C03\u7528
 
+# 0: set of flag or string
+compiler.misc.canonical.must.not.have.stronger.access=\u6B63\u5728\u5C1D\u8BD5\u5206\u914D\u66F4\u5F3A\u7684\u8BBF\u95EE\u6743\u9650\uFF1B\u4EE5\u524D\u4E3A {0}
+
 # other
 compiler.err.record.cannot.declare.instance.fields=\u5B57\u6BB5\u58F0\u660E\u5FC5\u987B\u4E3A\u9759\u6001\n\uFF08\u8003\u8651\u5C06\u5B57\u6BB5\u66FF\u6362\u4E3A\u8BB0\u5F55\u7EC4\u4EF6\uFF09
 
 # 0: symbol
 compiler.err.invalid.supertype.record=\u7C7B\u65E0\u6CD5\u76F4\u63A5\u6269\u5C55 {0}
 
 compiler.err.first.statement.must.be.call.to.another.constructor=\u6784\u9020\u5668\u4E0D\u662F\u89C4\u8303\u7684\uFF0C\u56E0\u6B64\u5B83\u7684\u7B2C\u4E00\u4E2A\u8BED\u53E5\u5FC5\u987B\u8C03\u7528\u53E6\u4E00\u4E2A\u6784\u9020\u5668
 
 compiler.err.instance.initializer.not.allowed.in.records=\u8BB0\u5F55\u4E2D\u4E0D\u5141\u8BB8\u4F7F\u7528\u5B9E\u4F8B\u521D\u59CB\u5316\u7A0B\u5E8F
 
-compiler.err.record.declaration.not.allowed.in.inner.classes=\u5185\u90E8\u7C7B\u4E2D\u4E0D\u5141\u8BB8\u4F7F\u7528\u8BB0\u5F55\u58F0\u660E
+compiler.err.static.declaration.not.allowed.in.inner.classes=\u5185\u90E8\u7C7B\u4E2D\u4E0D\u5141\u8BB8\u4F7F\u7528\u9759\u6001\u58F0\u660E
 
 compiler.err.record.header.expected=\u9700\u8981\u8BB0\u5F55\u6807\u5934
 
 ############################################
 # messages previously at javac.properties
