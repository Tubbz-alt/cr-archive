diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ModuleNameReader.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ModuleNameReader.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ModuleNameReader.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ModuleNameReader.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,10 +23,11 @@
  * questions.
  */
 package com.sun.tools.javac.jvm;
 
 import com.sun.tools.javac.util.ByteBuffer;
+import com.sun.tools.javac.util.Convert;
 import com.sun.tools.javac.util.Name.NameMapper;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.file.Files;
@@ -145,10 +146,11 @@
         return res;
     }
 
     NameMapper<String> utf8Mapper(boolean internalize) {
         return internalize ?
-                (buf, offset, len) -> new String(ClassFile.internalize(buf, offset, len)) :
-                String::new;
+                (buf, offset, len) ->
+                    Convert.utf2string(ClassFile.internalize(buf, offset, len)) :
+                Convert::utf2string;
     }
 
 }
