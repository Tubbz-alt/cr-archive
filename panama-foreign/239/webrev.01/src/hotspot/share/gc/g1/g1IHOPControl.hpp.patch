diff a/src/hotspot/share/gc/g1/g1IHOPControl.hpp b/src/hotspot/share/gc/g1/g1IHOPControl.hpp
--- a/src/hotspot/share/gc/g1/g1IHOPControl.hpp
+++ b/src/hotspot/share/gc/g1/g1IHOPControl.hpp
@@ -49,11 +49,11 @@
 
   // Initialize an instance with the initial IHOP value in percent. The target
   // occupancy will be updated at the first heap expansion.
   G1IHOPControl(double initial_ihop_percent);
 
-  // Most recent time from the end of the initial mark to the start of the first
+  // Most recent time from the end of the concurrent start to the start of the first
   // mixed gc.
   virtual double last_marking_length_s() const = 0;
  public:
   virtual ~G1IHOPControl() { }
 
@@ -69,22 +69,22 @@
   // humongous objects that can not be used for allocation, etc.
   // Together with the target occupancy, this additional buffer should contain the
   // difference between old gen size and total heap size at the start of reclamation,
   // and space required for that reclamation.
   virtual void update_allocation_info(double allocation_time_s, size_t allocated_bytes, size_t additional_buffer_size);
-  // Update the time spent in the mutator beginning from the end of initial mark to
+  // Update the time spent in the mutator beginning from the end of concurrent start to
   // the first mixed gc.
   virtual void update_marking_length(double marking_length_s) = 0;
 
   virtual void print();
   virtual void send_trace_event(G1NewTracer* tracer);
 };
 
 // The returned concurrent mark starting occupancy threshold is a fixed value
 // relative to the maximum heap size.
 class G1StaticIHOPControl : public G1IHOPControl {
-  // Most recent mutator time between the end of initial mark to the start of the
+  // Most recent mutator time between the end of concurrent mark to the start of the
   // first mixed gc.
   double _last_marking_length_s;
  protected:
   double last_marking_length_s() const { return _last_marking_length_s; }
  public:
@@ -102,11 +102,11 @@
 };
 
 // This algorithm tries to return a concurrent mark starting occupancy value that
 // makes sure that during marking the given target occupancy is never exceeded,
 // based on predictions of current allocation rate and time periods between
-// initial mark and the first mixed gc.
+// concurrent start and the first mixed gc.
 class G1AdaptiveIHOPControl : public G1IHOPControl {
   size_t _heap_reserve_percent; // Percentage of maximum heap capacity we should avoid to touch
   size_t _heap_waste_percent;   // Percentage of free heap that should be considered as waste.
 
   const G1Predictions * _predictor;
