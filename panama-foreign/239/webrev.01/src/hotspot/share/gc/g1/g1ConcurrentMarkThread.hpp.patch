diff a/src/hotspot/share/gc/g1/g1ConcurrentMarkThread.hpp b/src/hotspot/share/gc/g1/g1ConcurrentMarkThread.hpp
--- a/src/hotspot/share/gc/g1/g1ConcurrentMarkThread.hpp
+++ b/src/hotspot/share/gc/g1/g1ConcurrentMarkThread.hpp
@@ -74,11 +74,11 @@
   bool started()           { return _state == Started; }
   void set_in_progress()   { assert(_state == Started, "must be starting a cycle"); _state = InProgress; }
   bool in_progress()       { return _state == InProgress; }
 
   // Returns true from the moment a marking cycle is
-  // initiated (during the initial-mark pause when started() is set)
+  // initiated (during the concurrent start pause when started() is set)
   // to the moment when the cycle completes (just after the next
   // marking bitmap has been cleared and in_progress() is
   // cleared). While during_cycle() is true we will not start another cycle
   // so that cycles do not overlap. We cannot use just in_progress()
   // as the CM thread might take some time to wake up before noticing
