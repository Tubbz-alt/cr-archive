diff a/src/hotspot/share/gc/shenandoah/shenandoahRootVerifier.cpp b/src/hotspot/share/gc/shenandoah/shenandoahRootVerifier.cpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahRootVerifier.cpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahRootVerifier.cpp
@@ -44,10 +44,11 @@
 
 // Check for overflow of number of root types.
 STATIC_ASSERT((static_cast<uint>(ShenandoahRootVerifier::AllRoots) + 1) > static_cast<uint>(ShenandoahRootVerifier::AllRoots));
 
 ShenandoahRootVerifier::ShenandoahRootVerifier(RootTypes types) : _types(types) {
+  Threads::change_thread_claim_token();
 }
 
 void ShenandoahRootVerifier::excludes(RootTypes types) {
   _types = static_cast<ShenandoahRootVerifier::RootTypes>(static_cast<uint>(_types) & (~static_cast<uint>(types)));
 }
@@ -136,11 +137,11 @@
   }
 
   // Do thread roots the last. This allows verification code to find
   // any broken objects from those special roots first, not the accidental
   // dangling reference from the thread root.
-  Threads::possibly_parallel_oops_do(false, oops, &blobs);
+  Threads::possibly_parallel_oops_do(true, oops, &blobs);
 }
 
 void ShenandoahRootVerifier::strong_roots_do(OopClosure* oops) {
   shenandoah_assert_safepoint();
 
@@ -157,11 +158,11 @@
   OopStorageSet::vm_global()->oops_do(oops);
 
   // Do thread roots the last. This allows verification code to find
   // any broken objects from those special roots first, not the accidental
   // dangling reference from the thread root.
-  Threads::possibly_parallel_oops_do(false, oops, &blobs);
+  Threads::possibly_parallel_oops_do(true, oops, &blobs);
 }
 
 void ShenandoahRootVerifier::serial_weak_roots_do(OopClosure* cl) {
   WeakProcessorPhases::Iterator itr = WeakProcessorPhases::serial_iterator();
   AlwaysTrueClosure always_true;
