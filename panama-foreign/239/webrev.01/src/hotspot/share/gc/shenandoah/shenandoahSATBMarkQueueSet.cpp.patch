diff a/src/hotspot/share/gc/shenandoah/shenandoahSATBMarkQueueSet.cpp b/src/hotspot/share/gc/shenandoah/shenandoahSATBMarkQueueSet.cpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahSATBMarkQueueSet.cpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahSATBMarkQueueSet.cpp
@@ -34,31 +34,26 @@
 
 SATBMarkQueue& ShenandoahSATBMarkQueueSet::satb_queue_for_thread(Thread* const t) const {
   return ShenandoahThreadLocalData::satb_mark_queue(t);
 }
 
-template <bool RESOLVE>
 class ShenandoahSATBMarkQueueFilterFn {
   ShenandoahHeap* const _heap;
 
 public:
   ShenandoahSATBMarkQueueFilterFn(ShenandoahHeap* heap) : _heap(heap) {}
 
   // Return true if entry should be filtered out (removed), false if
   // it should be retained.
   bool operator()(const void* entry) const {
-    return !_heap->requires_marking<RESOLVE>(entry);
+    return !_heap->requires_marking(entry);
   }
 };
 
 void ShenandoahSATBMarkQueueSet::filter(SATBMarkQueue* queue) {
   ShenandoahHeap* heap = ShenandoahHeap::heap();
-  if (heap->has_forwarded_objects()) {
-    apply_filter(ShenandoahSATBMarkQueueFilterFn<true>(heap), queue);
-  } else {
-    apply_filter(ShenandoahSATBMarkQueueFilterFn<false>(heap), queue);
-  }
+  apply_filter(ShenandoahSATBMarkQueueFilterFn(heap), queue);
 }
 
 void ShenandoahSATBMarkQueue::handle_completed_buffer() {
   SATBMarkQueue::handle_completed_buffer();
   if (!is_empty()) {
