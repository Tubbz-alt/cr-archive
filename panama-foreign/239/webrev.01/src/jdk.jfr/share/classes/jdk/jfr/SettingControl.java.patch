diff a/src/jdk.jfr/share/classes/jdk/jfr/SettingControl.java b/src/jdk.jfr/share/classes/jdk/jfr/SettingControl.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/SettingControl.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/SettingControl.java
@@ -23,14 +23,15 @@
  * questions.
  */
 
 package jdk.jfr;
 
+import java.security.AccessControlContext;
 import java.security.AccessController;
 import java.util.Set;
 
-import jdk.jfr.internal.Control;
+import jdk.jfr.internal.settings.JDKSettingControl;
 
 /**
  * Base class to extend to create setting controls.
  * <p>
  * The following example shows a naive implementation of a setting control for
@@ -137,18 +138,33 @@
  * @see SettingDefinition
  *
  * @since 9
  */
 @MetadataDefinition
-public abstract class SettingControl extends Control {
+public abstract class SettingControl {
+
+    private final AccessControlContext context;
+    private final boolean initialized;
 
     /**
      * Constructor for invocation by subclass constructors.
      */
     protected SettingControl() {
-        super(AccessController.getContext());
+        context = this instanceof JDKSettingControl ? null : AccessController.getContext();
+        initialized = true;
+    }
 
+    final AccessControlContext getContext() {
+        // Ensure object state is safe
+        if (!initialized) {
+            throw new InternalError("Object must be initialized before security context can be retrieved");
+        }
+        AccessControlContext c = this.context;
+        if (c == null && !(this instanceof JDKSettingControl)) {
+            throw new InternalError("Security context can only be null for trusted setting controls");
+        }
+        return c;
     }
 
     /**
      * Combines the setting values for all running recordings into one value when
      * multiple recordings are running at the same time,
@@ -179,22 +195,20 @@
      *
      * @param settingValues the set of values, not {@code null}
      *
      * @return the value to use, not {@code null}
      */
-    @Override
     public abstract String combine(Set<String> settingValues);
 
     /**
      * Sets the value for this setting.
      * <p>
      * If the setting value is not valid for this setting, this method
      * does not throw an exception. Instead, the value is ignored.
      *
      * @param settingValue the string value, not {@code null}
      */
-    @Override
     public abstract void setValue(String settingValue);
 
     /**
      * Returns the currently used value for this setting, not {@code null}.
      * <p>
@@ -206,8 +220,7 @@
      * returned immediately after an instance of this class is created. It is
      * not valid to return {@code null}.
      *
      * @return the setting value, not {@code null}
      */
-    @Override
     public abstract String getValue();
 }
