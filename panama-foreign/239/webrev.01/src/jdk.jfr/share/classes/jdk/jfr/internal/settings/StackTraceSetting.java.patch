diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/settings/StackTraceSetting.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/settings/StackTraceSetting.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/settings/StackTraceSetting.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/settings/StackTraceSetting.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -32,25 +32,23 @@
 import jdk.jfr.BooleanFlag;
 import jdk.jfr.Label;
 import jdk.jfr.MetadataDefinition;
 import jdk.jfr.Name;
 import jdk.jfr.internal.PlatformEventType;
-import jdk.jfr.internal.Control;
 import jdk.jfr.internal.Type;
 
 @MetadataDefinition
 @Label("Stack Trace")
 @Name(Type.SETTINGS_PREFIX + "StackTrace")
 @Description("Record stack traces")
 @BooleanFlag
-public final class StackTraceSetting extends Control {
+public final class StackTraceSetting extends JDKSettingControl {
     private final static long typeId =  Type.getTypeId(StackTraceSetting.class);
     private final BooleanValue booleanValue;
     private final PlatformEventType eventType;
 
     public StackTraceSetting(PlatformEventType eventType, String defaultValue) {
-        super(defaultValue);
         this.booleanValue = BooleanValue.valueOf(defaultValue);
         this.eventType = Objects.requireNonNull(eventType);
     }
 
     @Override
