diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/EventControl.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/EventControl.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/EventControl.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/EventControl.java
@@ -165,24 +165,24 @@
             Module settingModule = settingsClass.getModule();
             Modules.addReads(settingModule, EventControl.class.getModule());
             int index = settingInfos.size();
             SettingInfo si = new SettingInfo(FIELD_SETTING_PREFIX + index, index);
             si.settingControl = instantiateSettingControl(settingsClass);
-            Control c = si.settingControl;
+            Control c = new Control(si.settingControl, null);
             c.setDefault();
-            String defaultValue = c.getValueSafe();
+            String defaultValue = c.getValue();
             if (defaultValue != null) {
                 Type settingType = TypeLibrary.createType(settingsClass);
                 ArrayList<AnnotationElement> aes = new ArrayList<>();
                 for (Annotation a : method.getDeclaredAnnotations()) {
                     AnnotationElement ae = TypeLibrary.createAnnotation(a);
                     if (ae != null) {
                         aes.add(ae);
                     }
                 }
                 aes.trimToSize();
-                addControl(settingName, si.settingControl);
+                addControl(settingName, c);
                 eventType.add(PrivateAccess.getInstance().newSettingDescriptor(settingType, settingName, defaultValue, aes));
                 settingInfos.add(si);
             }
         } catch (InstantiationException e) {
             // Programming error by user, fail fast
@@ -203,11 +203,11 @@
         }
         SecuritySupport.setAccessible(cc);
         try {
             return (SettingControl) cc.newInstance();
         } catch (IllegalArgumentException | InvocationTargetException e) {
-            throw (Error) new InternalError("Could not instantiate setting for class " + settingControlClass.getName());
+            throw new InternalError("Could not instantiate setting for class " + settingControlClass.getName());
         }
     }
 
     private static Control defineEnabled(PlatformEventType type) {
         Enabled enabled = type.getAnnotation(Enabled.class);
@@ -217,58 +217,58 @@
         String def = type.isJVM() ? "false" : "true";
         if (enabled != null) {
             def = Boolean.toString(enabled.value());
         }
         type.add(PrivateAccess.getInstance().newSettingDescriptor(TYPE_ENABLED, Enabled.NAME, def, Collections.emptyList()));
-        return new EnabledSetting(type, def);
+        return new Control(new EnabledSetting(type, def), def);
     }
 
     private static Control defineThreshold(PlatformEventType type) {
         Threshold threshold = type.getAnnotation(Threshold.class);
         String def = "0 ns";
         if (threshold != null) {
             def = threshold.value();
         }
         type.add(PrivateAccess.getInstance().newSettingDescriptor(TYPE_THRESHOLD, Threshold.NAME, def, Collections.emptyList()));
-        return new ThresholdSetting(type, def);
+        return new Control(new ThresholdSetting(type), def);
     }
 
     private static Control defineStackTrace(PlatformEventType type) {
         StackTrace stackTrace = type.getAnnotation(StackTrace.class);
         String def = "true";
         if (stackTrace != null) {
             def = Boolean.toString(stackTrace.value());
         }
         type.add(PrivateAccess.getInstance().newSettingDescriptor(TYPE_STACK_TRACE, StackTrace.NAME, def, Collections.emptyList()));
-        return new StackTraceSetting(type, def);
+        return new Control(new StackTraceSetting(type, def), def);
     }
 
     private static Control defineCutoff(PlatformEventType type) {
         Cutoff cutoff = type.getAnnotation(Cutoff.class);
         String def = Cutoff.INFINITY;
         if (cutoff != null) {
             def = cutoff.value();
         }
         type.add(PrivateAccess.getInstance().newSettingDescriptor(TYPE_CUTOFF, Cutoff.NAME, def, Collections.emptyList()));
-        return new CutoffSetting(type, def);
+        return new Control(new CutoffSetting(type), def);
     }
 
 
     private static Control definePeriod(PlatformEventType type) {
         Period period = type.getAnnotation(Period.class);
         String def = "everyChunk";
         if (period != null) {
             def = period.value();
         }
         type.add(PrivateAccess.getInstance().newSettingDescriptor(TYPE_PERIOD, PeriodSetting.NAME, def, Collections.emptyList()));
-        return new PeriodSetting(type, def);
+        return new Control(new PeriodSetting(type), def);
     }
 
     void disable() {
         for (NamedControl nc : namedControls) {
-            if (nc.control instanceof EnabledSetting) {
-                nc.control.setValueSafe("false");
+            if (nc.control.isType(EnabledSetting.class)) {
+                nc.control.setValue("false");
                 return;
             }
         }
     }
 
