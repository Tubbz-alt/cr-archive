diff a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/AbstractAppImageBuilder.java b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/AbstractAppImageBuilder.java
--- a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/AbstractAppImageBuilder.java
+++ b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/AbstractAppImageBuilder.java
@@ -23,11 +23,10 @@
  * questions.
  */
 
 package jdk.incubator.jpackage.internal;
 
-import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.file.Path;
 import java.util.Map;
 import static jdk.incubator.jpackage.internal.OverridableResource.createResource;
@@ -77,11 +76,11 @@
         }
         AppImageFile.save(root, params);
     }
 
     public static OverridableResource createIconResource(String defaultIconName,
-            BundlerParamInfo<File> iconParam, Map<String, ? super Object> params,
+            BundlerParamInfo<Path> iconParam, Map<String, ? super Object> params,
             Map<String, ? super Object> mainParams) throws IOException {
 
         if (mainParams != null) {
             params = AddLauncherArguments.merge(mainParams, params, ICON.getID(),
                     iconParam.getID());
@@ -117,16 +116,16 @@
     }
 
     private enum IconType { DefaultOrResourceDirIcon, CustomIcon, NoIcon };
 
     private static IconType getLauncherIconType(Map<String, ? super Object> params) {
-        File launcherIcon = ICON.fetchFrom(params);
+        Path launcherIcon = ICON.fetchFrom(params);
         if (launcherIcon == null) {
             return IconType.DefaultOrResourceDirIcon;
         }
 
-        if (launcherIcon.getName().isEmpty()) {
+        if (launcherIcon.toFile().getName().isEmpty()) {
             return IconType.NoIcon;
         }
 
         return IconType.CustomIcon;
     }
