diff a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/IOUtils.java b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/IOUtils.java
--- a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/IOUtils.java
+++ b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/IOUtils.java
@@ -26,11 +26,10 @@
 package jdk.incubator.jpackage.internal;
 
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
 import java.io.IOException;
-import java.io.File;
 import java.io.PrintStream;
 import java.io.Writer;
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
@@ -54,15 +53,15 @@
  *
  * A collection of static utility methods.
  */
 public class IOUtils {
 
-    public static void deleteRecursive(File path) throws IOException {
-        if (!path.exists()) {
+    public static void deleteRecursive(Path directory) throws IOException {
+        if (!Files.exists(directory)) {
             return;
         }
-        Path directory = path.toPath();
+
         Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {
             @Override
             public FileVisitResult visitFile(Path file,
                             BasicFileAttributes attr) throws IOException {
                 if (Platform.getPlatform() == Platform.WINDOWS) {
@@ -117,26 +116,34 @@
                 return FileVisitResult.CONTINUE;
             }
         });
     }
 
-    public static void copyFile(File sourceFile, File destFile)
+    public static void copyFile(Path sourceFile, Path destFile)
             throws IOException {
-        Files.createDirectories(destFile.getParentFile().toPath());
+        Files.createDirectories(destFile.getParent());
 
-        Files.copy(sourceFile.toPath(), destFile.toPath(),
+        Files.copy(sourceFile, destFile,
                    StandardCopyOption.REPLACE_EXISTING,
                    StandardCopyOption.COPY_ATTRIBUTES);
     }
 
+    public static boolean exists(Path path) {
+        if (path == null) {
+            return false;
+        }
+
+        return Files.exists(path);
+    }
+
     // run "launcher paramfile" in the directory where paramfile is kept
-    public static void run(String launcher, File paramFile)
+    public static void run(String launcher, Path paramFile)
             throws IOException {
-        if (paramFile != null && paramFile.exists()) {
+        if (IOUtils.exists(paramFile)) {
             ProcessBuilder pb =
-                    new ProcessBuilder(launcher, paramFile.getName());
-            pb = pb.directory(paramFile.getParentFile());
+                    new ProcessBuilder(launcher, paramFile.getFileName().toString());
+            pb = pb.directory(paramFile.getParent().toFile());
             exec(pb);
         }
     }
 
     public static void exec(ProcessBuilder pb)
@@ -220,19 +227,22 @@
 
         return ret;
     }
 
     static void writableOutputDir(Path outdir) throws PackagerException {
-        File file = outdir.toFile();
-
-        if (!file.isDirectory() && !file.mkdirs()) {
-            throw new PackagerException("error.cannot-create-output-dir",
-                    file.getAbsolutePath());
+        if (!Files.isDirectory(outdir)) {
+            try {
+                Files.createDirectories(outdir);
+            } catch (IOException ex) {
+                throw new PackagerException("error.cannot-create-output-dir",
+                    outdir.toAbsolutePath().toString());
+            }
         }
-        if (!file.canWrite()) {
+
+        if (!Files.isWritable(outdir)) {
             throw new PackagerException("error.cannot-write-to-output-dir",
-                    file.getAbsolutePath());
+                    outdir.toAbsolutePath().toString());
         }
     }
 
     public static Path replaceSuffix(Path path, String suffix) {
         Path parent = path.getParent();
