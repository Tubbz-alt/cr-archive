diff a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/AbstractBundler.java b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/AbstractBundler.java
--- a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/AbstractBundler.java
+++ b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/AbstractBundler.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,12 +23,12 @@
  * questions.
  */
 
 package jdk.incubator.jpackage.internal;
 
-import java.io.File;
 import java.io.IOException;
+import java.nio.file.Path;
 import java.util.Map;
 
 
 /**
  * AbstractBundler
@@ -37,16 +37,16 @@
  * It contains methods and parameters common to all bundlers.
  * The concrete implementations are in the platform specific bundlers.
  */
 abstract class AbstractBundler implements Bundler {
 
-    static final BundlerParamInfo<File> IMAGES_ROOT =
+    static final BundlerParamInfo<Path> IMAGES_ROOT =
             new StandardBundlerParam<>(
             "imagesRoot",
-            File.class,
-            params -> new File(
-                StandardBundlerParam.TEMP_ROOT.fetchFrom(params), "images"),
+            Path.class,
+            params ->
+                StandardBundlerParam.TEMP_ROOT.fetchFrom(params).resolve("images"),
             (s, p) -> null);
 
     @Override
     public String toString() {
         return getName();
