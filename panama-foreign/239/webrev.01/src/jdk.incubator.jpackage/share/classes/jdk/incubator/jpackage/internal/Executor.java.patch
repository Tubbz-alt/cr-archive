diff a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/Executor.java b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/Executor.java
--- a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/Executor.java
+++ b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/Executor.java
@@ -23,14 +23,14 @@
  * questions.
  */
 package jdk.incubator.jpackage.internal;
 
 import java.io.BufferedReader;
-import java.io.File;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.nio.file.Files;
+import java.nio.file.Path;
 import java.util.List;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
@@ -80,16 +80,16 @@
 
     int execute() throws IOException {
         output = null;
 
         boolean needProcessOutput = outputConsumer != null || Log.isVerbose() || saveOutput;
-        File outputFile = null;
+        Path outputFile = null;
         if (needProcessOutput) {
             pb.redirectErrorStream(true);
             if (writeOutputToFile) {
-                outputFile = File.createTempFile("jpackageOutputTempFile", ".tmp");
-                pb.redirectOutput(outputFile);
+                outputFile = Files.createTempFile("jpackageOutputTempFile", ".tmp");
+                pb.redirectOutput(outputFile.toFile());
             }
         } else {
             // We are not going to read process output, so need to notify
             // ProcessBuilder about this. Otherwise some processes might just
             // hang up (`ldconfig -p`).
@@ -113,12 +113,12 @@
         if (needProcessOutput) {
             final List<String> savedOutput;
             Supplier<Stream<String>> outputStream;
 
             if (writeOutputToFile) {
-                savedOutput = Files.readAllLines(outputFile.toPath());
-                outputFile.delete();
+                savedOutput = Files.readAllLines(outputFile);
+                Files.delete(outputFile);
                 outputStream = () -> {
                     if (savedOutput != null) {
                         return savedOutput.stream();
                     }
                     return null;
