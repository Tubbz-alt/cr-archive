diff a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/StandardBundlerParam.java b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/StandardBundlerParam.java
--- a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/StandardBundlerParam.java
+++ b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/StandardBundlerParam.java
@@ -118,16 +118,16 @@
                         return LAUNCHER_DATA.fetchFrom(params).qualifiedClassName();
                     },
                     (s, p) -> s
             );
 
-    static final StandardBundlerParam<File> PREDEFINED_RUNTIME_IMAGE =
+    static final StandardBundlerParam<Path> PREDEFINED_RUNTIME_IMAGE =
             new StandardBundlerParam<>(
                     Arguments.CLIOptions.PREDEFINED_RUNTIME_IMAGE.getId(),
-                    File.class,
+                    Path.class,
                     params -> null,
-                    (s, p) -> new File(s)
+                    (s, p) -> Path.of(s)
             );
 
     static final StandardBundlerParam<String> APP_NAME =
             new StandardBundlerParam<>(
                     Arguments.CLIOptions.NAME.getId(),
@@ -139,26 +139,26 @@
                             if (idx >= 0) {
                                 return s.substring(idx+1);
                             }
                             return s;
                         } else if (isRuntimeInstaller(params)) {
-                            File f = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);
+                            Path f = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);
                             if (f != null) {
-                                return f.getName();
+                                return f.getFileName().toString();
                             }
                         }
                         return null;
                     },
                     (s, p) -> s
             );
 
-    static final StandardBundlerParam<File> ICON =
+    static final StandardBundlerParam<Path> ICON =
             new StandardBundlerParam<>(
                     Arguments.CLIOptions.ICON.getId(),
-                    File.class,
+                    Path.class,
                     params -> null,
-                    (s, p) -> new File(s)
+                    (s, p) -> Path.of(s)
             );
 
     static final StandardBundlerParam<String> VENDOR =
             new StandardBundlerParam<>(
                     Arguments.CLIOptions.VENDOR.getId(),
@@ -227,33 +227,35 @@
                     String.class,
                     params -> null,
                     (s, p) -> s
             );
 
-    static final StandardBundlerParam<File> TEMP_ROOT =
+    static final StandardBundlerParam<Path> TEMP_ROOT =
             new StandardBundlerParam<>(
                     Arguments.CLIOptions.TEMP_ROOT.getId(),
-                    File.class,
+                    Path.class,
                     params -> {
                         try {
-                            return Files.createTempDirectory(
-                                    "jdk.incubator.jpackage").toFile();
+                            return Files.createTempDirectory("jdk.incubator.jpackage");
                         } catch (IOException ioe) {
                             return null;
                         }
                     },
-                    (s, p) -> new File(s)
+                    (s, p) -> Path.of(s)
             );
 
-    public static final StandardBundlerParam<File> CONFIG_ROOT =
+    public static final StandardBundlerParam<Path> CONFIG_ROOT =
             new StandardBundlerParam<>(
                 "configRoot",
-                File.class,
+                Path.class,
                 params -> {
-                    File root =
-                            new File(TEMP_ROOT.fetchFrom(params), "config");
-                    root.mkdirs();
+                    Path root = TEMP_ROOT.fetchFrom(params).resolve("config");
+                    try {
+                        Files.createDirectories(root);
+                    } catch (IOException ioe) {
+                        return null;
+                    }
                     return root;
                 },
                 (s, p) -> null
             );
 
@@ -275,32 +277,32 @@
                     // valueOf(null) is false, and we actually do want null
                     (s, p) -> (s == null || "null".equalsIgnoreCase(s)) ?
                             true : Boolean.valueOf(s)
             );
 
-    static final StandardBundlerParam<File> RESOURCE_DIR =
+    static final StandardBundlerParam<Path> RESOURCE_DIR =
             new StandardBundlerParam<>(
                     Arguments.CLIOptions.RESOURCE_DIR.getId(),
-                    File.class,
+                    Path.class,
                     params -> null,
-                    (s, p) -> new File(s)
+                    (s, p) -> Path.of(s)
             );
 
     static final BundlerParamInfo<String> INSTALL_DIR =
             new StandardBundlerParam<>(
                     Arguments.CLIOptions.INSTALL_DIR.getId(),
                     String.class,
                      params -> null,
                     (s, p) -> s
     );
 
-    static final StandardBundlerParam<File> PREDEFINED_APP_IMAGE =
+    static final StandardBundlerParam<Path> PREDEFINED_APP_IMAGE =
             new StandardBundlerParam<>(
             Arguments.CLIOptions.PREDEFINED_APP_IMAGE.getId(),
-            File.class,
+            Path.class,
             params -> null,
-            (s, p) -> new File(s));
+            (s, p) -> Path.of(s));
 
     @SuppressWarnings("unchecked")
     static final StandardBundlerParam<List<Map<String, ? super Object>>> ADD_LAUNCHERS =
             new StandardBundlerParam<>(
                     Arguments.CLIOptions.ADD_LAUNCHER.getId(),
@@ -344,20 +346,20 @@
 
     static final StandardBundlerParam<String> FA_DESCRIPTION =
             new StandardBundlerParam<>(
                     "fileAssociation.description",
                     String.class,
-                    params -> APP_NAME.fetchFrom(params) + " File",
+                    params -> APP_NAME.fetchFrom(params) + " Path",
                     null
             );
 
-    static final StandardBundlerParam<File> FA_ICON =
+    static final StandardBundlerParam<Path> FA_ICON =
             new StandardBundlerParam<>(
                     "fileAssociation.icon",
-                    File.class,
+                    Path.class,
                     ICON::fetchFrom,
-                    (s, p) -> new File(s)
+                    (s, p) -> Path.of(s)
             );
 
     @SuppressWarnings("unchecked")
     static final BundlerParamInfo<List<Path>> MODULE_PATH =
             new StandardBundlerParam<>(
@@ -447,13 +449,13 @@
         // runtime installer requires --runtime-image, if this is false
         // here then we should have thrown error validating args.
         return params.containsKey(PREDEFINED_RUNTIME_IMAGE.getID());
     }
 
-    static File getPredefinedAppImage(Map<String, ? super Object> params) {
-        File applicationImage = PREDEFINED_APP_IMAGE.fetchFrom(params);
-        if (applicationImage != null && !applicationImage.exists()) {
+    static Path getPredefinedAppImage(Map<String, ? super Object> params) {
+        Path applicationImage = PREDEFINED_APP_IMAGE.fetchFrom(params);
+        if (applicationImage != null && !IOUtils.exists(applicationImage)) {
             throw new RuntimeException(
                     MessageFormat.format(I18N.getString(
                             "message.app-image-dir-does-not-exist"),
                             PREDEFINED_APP_IMAGE.getID(),
                             applicationImage.toString()));
@@ -461,12 +463,12 @@
         return applicationImage;
     }
 
     static void copyPredefinedRuntimeImage(Map<String, ? super Object> params,
             ApplicationLayout appLayout) throws IOException, ConfigException {
-        File topImage = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);
-        if (!topImage.exists()) {
+        Path topImage = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);
+        if (!IOUtils.exists(topImage)) {
             throw new ConfigException(
                     MessageFormat.format(I18N.getString(
                     "message.runtime-image-dir-does-not-exist"),
                     PREDEFINED_RUNTIME_IMAGE.getID(),
                     topImage.toString()),
@@ -475,21 +477,21 @@
                     PREDEFINED_RUNTIME_IMAGE.getID()));
         }
 
         if (Platform.isMac()) {
             // On Mac topImage can be runtime root or runtime home.
-            Path runtimeHome = topImage.toPath().resolve("Contents/Home");
+            Path runtimeHome = topImage.resolve("Contents/Home");
             if (Files.isDirectory(runtimeHome)) {
                 // topImage references runtime root, adjust it to pick data from
                 // runtime home
-                topImage = runtimeHome.toFile();
+                topImage = runtimeHome;
             }
         }
 
         // copy whole runtime, need to skip jmods and src.zip
         final List<String> excludes = Arrays.asList("jmods", "src.zip");
-        IOUtils.copyRecursive(topImage.toPath(),
+        IOUtils.copyRecursive(topImage,
                 appLayout.runtimeHomeDirectory(), excludes);
 
         // if module-path given - copy modules to appDir/mods
         List<Path> modulePath = MODULE_PATH.fetchFrom(params);
         List<Path> defaultModulePath = getDefaultModulePath();
