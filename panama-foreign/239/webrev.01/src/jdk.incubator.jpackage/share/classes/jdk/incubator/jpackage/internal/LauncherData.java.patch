diff a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/LauncherData.java b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/LauncherData.java
--- a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/LauncherData.java
+++ b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/LauncherData.java
@@ -143,11 +143,11 @@
                     moduleRef.descriptor());
         } else if (params.containsKey(PREDEFINED_RUNTIME_IMAGE.getID())) {
             // Failed to find module in the specified module path list and
             // there is external runtime given to jpackage.
             // Lookup module in this runtime.
-            Path cookedRuntime = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params).toPath();
+            Path cookedRuntime = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);
             launcherData.moduleInfo = ModuleInfo.fromCookedRuntime(moduleName,
                     cookedRuntime);
         }
 
         if (launcherData.moduleInfo == null) {
@@ -229,14 +229,15 @@
             throws IOException {
         Path inputDir = StandardBundlerParam.SOURCE_DIR.fetchFrom(params);
         if (inputDir == null) {
             classPath = Collections.emptyList();
         } else {
-            try (Stream<Path> walk = Files.walk(inputDir, 1)) {
+            try (Stream<Path> walk = Files.walk(inputDir, Integer.MAX_VALUE)) {
                 Set<Path> jars = walk.filter(Files::isRegularFile)
                         .filter(file -> file.toString().endsWith(".jar"))
-                        .map(Path::getFileName)
+                        .map(p -> inputDir.toAbsolutePath()
+                                  .relativize(p.toAbsolutePath()))
                         .collect(Collectors.toSet());
                 jars.remove(mainJarName);
                 classPath = jars.stream().sorted().collect(Collectors.toList());
             }
         }
@@ -290,11 +291,11 @@
     private static List<Path> getModulePath(Map<String, ? super Object> params)
             throws ConfigException {
         List<Path> modulePath = getPathListParameter(Arguments.CLIOptions.MODULE_PATH.getId(), params);
 
         if (params.containsKey(PREDEFINED_RUNTIME_IMAGE.getID())) {
-            Path runtimePath = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params).toPath();
+            Path runtimePath = PREDEFINED_RUNTIME_IMAGE.fetchFrom(params);
             runtimePath = runtimePath.resolve("lib");
             modulePath = Stream.of(modulePath, List.of(runtimePath))
                     .flatMap(List::stream)
                     .collect(Collectors.toUnmodifiableList());
         }
