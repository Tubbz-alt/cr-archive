diff a/src/jdk.incubator.jpackage/windows/classes/jdk/incubator/jpackage/internal/WinExeBundler.java b/src/jdk.incubator.jpackage/windows/classes/jdk/incubator/jpackage/internal/WinExeBundler.java
--- a/src/jdk.incubator.jpackage/windows/classes/jdk/incubator/jpackage/internal/WinExeBundler.java
+++ b/src/jdk.incubator.jpackage/windows/classes/jdk/incubator/jpackage/internal/WinExeBundler.java
@@ -22,35 +22,37 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package jdk.incubator.jpackage.internal;
 
-import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.nio.file.Paths;
 import java.text.MessageFormat;
 import java.util.Map;
 
 public class WinExeBundler extends AbstractBundler {
 
     static {
         System.loadLibrary("jpackage");
     }
 
-    public static final BundlerParamInfo<File> EXE_IMAGE_DIR
+    public static final BundlerParamInfo<Path> EXE_IMAGE_DIR
             = new StandardBundlerParam<>(
                     "win.exe.imageDir",
-                    File.class,
+                    Path.class,
                     params -> {
-                        File imagesRoot = IMAGES_ROOT.fetchFrom(params);
-                        if (!imagesRoot.exists()) {
-                            imagesRoot.mkdirs();
+                        Path imagesRoot = IMAGES_ROOT.fetchFrom(params);
+                        if (!Files.exists(imagesRoot)) {
+                            try {
+                                Files.createDirectories(imagesRoot);
+                            } catch (IOException ioe) {
+                                return null;
+                            }
                         }
-                        return new File(imagesRoot, "win-exe.image");
+                        return imagesRoot.resolve("win-exe.image");
                     },
                     (s, p) -> null);
 
     private final static String EXE_WRAPPER_NAME = "msiwrapper.exe";
 
@@ -68,12 +70,12 @@
     public String getBundleType() {
         return "INSTALLER";
     }
 
     @Override
-    public File execute(Map<String, ? super Object> params,
-            File outputParentDir) throws PackagerException {
+    public Path execute(Map<String, ? super Object> params,
+            Path outputParentDir) throws PackagerException {
         return bundle(params, outputParentDir);
     }
 
     @Override
     public boolean supported(boolean platformInstaller) {
@@ -89,64 +91,63 @@
     public boolean validate(Map<String, ? super Object> params)
             throws ConfigException {
         return msiBundler.validate(params);
     }
 
-    public File bundle(Map<String, ? super Object> params, File outdir)
+    public Path bundle(Map<String, ? super Object> params, Path outdir)
             throws PackagerException {
 
-        IOUtils.writableOutputDir(outdir.toPath());
+        IOUtils.writableOutputDir(outdir);
 
-        File exeImageDir = EXE_IMAGE_DIR.fetchFrom(params);
+        Path exeImageDir = EXE_IMAGE_DIR.fetchFrom(params);
 
         // Write msi to temporary directory.
-        File msi = msiBundler.execute(params, exeImageDir);
+        Path msi = msiBundler.execute(params, exeImageDir);
 
         try {
             new ScriptRunner()
-            .setDirectory(msi.toPath().getParent())
+            .setDirectory(msi.getParent())
             .setResourceCategoryId("resource.post-msi-script")
             .setScriptNameSuffix("post-msi")
-            .setEnvironmentVariable("JpMsiFile", msi.getAbsolutePath().toString())
+            .setEnvironmentVariable("JpMsiFile", msi.toAbsolutePath().toString())
             .run(params);
 
             return buildEXE(params, msi, outdir);
         } catch (IOException ex) {
             Log.verbose(ex);
             throw new PackagerException(ex);
         }
     }
 
-    private File buildEXE(Map<String, ? super Object> params, File msi,
-            File outdir) throws IOException {
+    private Path buildEXE(Map<String, ? super Object> params, Path msi,
+            Path outdir) throws IOException {
 
         Log.verbose(MessageFormat.format(
                 I18N.getString("message.outputting-to-location"),
-                outdir.getAbsolutePath()));
+                outdir.toAbsolutePath().toString()));
 
         // Copy template msi wrapper next to msi file
-        final Path exePath = IOUtils.replaceSuffix(msi.toPath(), ".exe");
+        final Path exePath = IOUtils.replaceSuffix(msi, ".exe");
         try (InputStream is = OverridableResource.readDefault(EXE_WRAPPER_NAME)) {
             Files.copy(is, exePath);
         }
 
         new ExecutableRebrander().addAction((resourceLock) -> {
             // Embed msi in msi wrapper exe.
-            embedMSI(resourceLock, msi.getAbsolutePath());
+            embedMSI(resourceLock, msi.toAbsolutePath().toString());
         }).rebrandInstaller(params, exePath);
 
-        Path dstExePath = Paths.get(outdir.getAbsolutePath(),
-                exePath.getFileName().toString());
+        Path dstExePath = outdir.toAbsolutePath().resolve(exePath.getFileName());
         Files.deleteIfExists(dstExePath);
 
         Files.copy(exePath, dstExePath);
 
         Log.verbose(MessageFormat.format(
                 I18N.getString("message.output-location"),
-                outdir.getAbsolutePath()));
+                outdir.toAbsolutePath().toString()));
 
-        return dstExePath.toFile();
+        return dstExePath;
     }
 
     private final WinMsiBundler msiBundler = new WinMsiBundler();
 
     private static native int embedMSI(long resourceLock, String msiPath);
