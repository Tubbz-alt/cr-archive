diff a/src/jdk.incubator.jpackage/linux/classes/jdk/incubator/jpackage/internal/LinuxPackageBundler.java b/src/jdk.incubator.jpackage/linux/classes/jdk/incubator/jpackage/internal/LinuxPackageBundler.java
--- a/src/jdk.incubator.jpackage/linux/classes/jdk/incubator/jpackage/internal/LinuxPackageBundler.java
+++ b/src/jdk.incubator.jpackage/linux/classes/jdk/incubator/jpackage/internal/LinuxPackageBundler.java
@@ -22,11 +22,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package jdk.incubator.jpackage.internal;
 
-import java.io.File;
 import java.io.IOException;
 import java.nio.file.InvalidPathException;
 import java.nio.file.Path;
 import java.text.MessageFormat;
 import java.util.Collections;
@@ -102,44 +101,44 @@
     final public String getBundleType() {
         return "INSTALLER";
     }
 
     @Override
-    final public File execute(Map<String, ? super Object> params,
-            File outputParentDir) throws PackagerException {
-        IOUtils.writableOutputDir(outputParentDir.toPath());
+    final public Path execute(Map<String, ? super Object> params,
+            Path outputParentDir) throws PackagerException {
+        IOUtils.writableOutputDir(outputParentDir);
 
         PlatformPackage thePackage = createMetaPackage(params);
 
-        Function<File, ApplicationLayout> initAppImageLayout = imageRoot -> {
+        Function<Path, ApplicationLayout> initAppImageLayout = imageRoot -> {
             ApplicationLayout layout = appImageLayout(params);
             layout.pathGroup().setPath(new Object(),
                     AppImageFile.getPathInAppImage(Path.of("")));
-            return layout.resolveAt(imageRoot.toPath());
+            return layout.resolveAt(imageRoot);
         };
 
         try {
-            File appImage = StandardBundlerParam.getPredefinedAppImage(params);
+            Path appImage = StandardBundlerParam.getPredefinedAppImage(params);
 
             // we either have an application image or need to build one
             if (appImage != null) {
                 initAppImageLayout.apply(appImage).copy(
                         thePackage.sourceApplicationLayout());
             } else {
                 final Path srcAppImageRoot = thePackage.sourceRoot().resolve("src");
-                appImage = appImageBundler.execute(params, srcAppImageRoot.toFile());
+                appImage = appImageBundler.execute(params, srcAppImageRoot);
                 ApplicationLayout srcAppLayout = initAppImageLayout.apply(
                         appImage);
                 if (appImage.equals(PREDEFINED_RUNTIME_IMAGE.fetchFrom(params))) {
                     // Application image points to run-time image.
                     // Copy it.
                     srcAppLayout.copy(thePackage.sourceApplicationLayout());
                 } else {
                     // Application image is a newly created directory tree.
                     // Move it.
                     srcAppLayout.move(thePackage.sourceApplicationLayout());
-                    IOUtils.deleteRecursive(srcAppImageRoot.toFile());
+                    IOUtils.deleteRecursive(srcAppImageRoot);
                 }
             }
 
             desktopIntegration = DesktopIntegration.create(thePackage, params);
 
@@ -151,14 +150,14 @@
                         UTILITY_SCRIPTS).forEach(v -> data.put(v, ""));
             }
 
             data.putAll(createReplacementData(params));
 
-            File packageBundle = buildPackageBundle(Collections.unmodifiableMap(
+            Path packageBundle = buildPackageBundle(Collections.unmodifiableMap(
                     data), params, outputParentDir);
 
-            verifyOutputBundle(params, packageBundle.toPath()).stream()
+            verifyOutputBundle(params, packageBundle).stream()
                     .filter(Objects::nonNull)
                     .forEachOrdered(ex -> {
                 Log.verbose(ex.getLocalizedMessage());
                 Log.verbose(ex.getAdvice());
             });
@@ -238,13 +237,13 @@
             throws ConfigException;
 
     abstract protected Map<String, String> createReplacementData(
             Map<String, ? super Object> params) throws IOException;
 
-    abstract protected File buildPackageBundle(
+    abstract protected Path buildPackageBundle(
             Map<String, String> replacementData,
-            Map<String, ? super Object> params, File outputParentDir) throws
+            Map<String, ? super Object> params, Path outputParentDir) throws
             PackagerException, IOException;
 
     final protected PlatformPackage createMetaPackage(
             Map<String, ? super Object> params) {
 
@@ -264,11 +263,11 @@
                 return packageName.fetchFrom(params);
             }
 
             @Override
             public Path sourceRoot() {
-                return IMAGES_ROOT.fetchFrom(params).toPath().toAbsolutePath();
+                return IMAGES_ROOT.fetchFrom(params).toAbsolutePath();
             }
 
             @Override
             public ApplicationLayout sourceApplicationLayout() {
                 return packageLayout.get().resolveAt(
