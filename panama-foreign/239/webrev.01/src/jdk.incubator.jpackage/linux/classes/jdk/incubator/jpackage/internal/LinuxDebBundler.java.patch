diff a/src/jdk.incubator.jpackage/linux/classes/jdk/incubator/jpackage/internal/LinuxDebBundler.java b/src/jdk.incubator.jpackage/linux/classes/jdk/incubator/jpackage/internal/LinuxDebBundler.java
--- a/src/jdk.incubator.jpackage/linux/classes/jdk/incubator/jpackage/internal/LinuxDebBundler.java
+++ b/src/jdk.incubator.jpackage/linux/classes/jdk/incubator/jpackage/internal/LinuxDebBundler.java
@@ -23,11 +23,10 @@
  * questions.
  */
 
 package jdk.incubator.jpackage.internal;
 
-import java.io.File;
 import java.io.IOException;
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.SimpleFileVisitor;
@@ -176,17 +175,17 @@
         return Stream.of(TOOL_DPKG_DEB, TOOL_DPKG, TOOL_FAKEROOT).map(
                 ToolValidator::new).collect(Collectors.toList());
     }
 
     @Override
-    protected File buildPackageBundle(
+    protected Path buildPackageBundle(
             Map<String, String> replacementData,
-            Map<String, ? super Object> params, File outputParentDir) throws
+            Map<String, ? super Object> params, Path outputParentDir) throws
             PackagerException, IOException {
 
         prepareProjectConfig(replacementData, params);
-        adjustPermissionsRecursive(createMetaPackage(params).sourceRoot().toFile());
+        adjustPermissionsRecursive(createMetaPackage(params).sourceRoot());
         return buildDeb(params, outputParentDir);
     }
 
     private static final Pattern PACKAGE_NAME_REGEX = Pattern.compile("^(^\\S+):");
 
@@ -307,16 +306,16 @@
     /*
      * set permissions with a string like "rwxr-xr-x"
      *
      * This cannot be directly backport to 22u which is built with 1.6
      */
-    private void setPermissions(File file, String permissions) {
+    private void setPermissions(Path file, String permissions) {
         Set<PosixFilePermission> filePermissions =
                 PosixFilePermissions.fromString(permissions);
         try {
-            if (file.exists()) {
-                Files.setPosixFilePermissions(file.toPath(), filePermissions);
+            if (Files.exists(file)) {
+                Files.setPosixFilePermissions(file, filePermissions);
             }
         } catch (IOException ex) {
             Log.error(ex.getMessage());
             Log.verbose(ex);
         }
@@ -333,29 +332,29 @@
             // just fall thru
         }
         return false;
     }
 
-    private void adjustPermissionsRecursive(File dir) throws IOException {
-        Files.walkFileTree(dir.toPath(), new SimpleFileVisitor<Path>() {
+    private void adjustPermissionsRecursive(Path dir) throws IOException {
+        Files.walkFileTree(dir, new SimpleFileVisitor<Path>() {
             @Override
             public FileVisitResult visitFile(Path file,
                     BasicFileAttributes attrs)
                     throws IOException {
                 if (file.endsWith(".so") || !Files.isExecutable(file)) {
-                    setPermissions(file.toFile(), "rw-r--r--");
+                    setPermissions(file, "rw-r--r--");
                 } else if (Files.isExecutable(file)) {
-                    setPermissions(file.toFile(), "rwxr-xr-x");
+                    setPermissions(file, "rwxr-xr-x");
                 }
                 return FileVisitResult.CONTINUE;
             }
 
             @Override
             public FileVisitResult postVisitDirectory(Path dir, IOException e)
                     throws IOException {
                 if (e == null) {
-                    setPermissions(dir.toFile(), "rwxr-xr-x");
+                    setPermissions(dir, "rwxr-xr-x");
                     return FileVisitResult.CONTINUE;
                 } else {
                     // directory iteration failed
                     throw e;
                 }
@@ -381,11 +380,11 @@
                     params)
                     .setCategory(I18N.getString(comment))
                     .setSubstitutionData(data)
                     .saveToFile(dstFilePath);
             if (permissions != null) {
-                setPermissions(dstFilePath.toFile(), permissions);
+                setPermissions(dstFilePath, permissions);
             }
         }
 
         private final Path dstFilePath;
         private final String comment;
@@ -413,11 +412,11 @@
                 configDir.resolve("postrm"),
                 "resource.deb-postrm-script").setExecutable());
 
         if (!StandardBundlerParam.isRuntimeInstaller(params)) {
             debianFiles.add(new DebianFile(
-                    getConfig_CopyrightFile(params).toPath(),
+                    getConfig_CopyrightFile(params),
                     "resource.copyright-file"));
         }
 
         for (DebianFile debianFile : debianFiles) {
             debianFile.create(data, params);
@@ -438,11 +437,11 @@
                 createMetaPackage(params).sourceApplicationLayout().sizeInBytes() >> 10));
 
         return data;
     }
 
-    private File getConfig_CopyrightFile(Map<String, ? super Object> params) {
+    private Path getConfig_CopyrightFile(Map<String, ? super Object> params) {
         final String installDir = LINUX_INSTALL_DIR.fetchFrom(params);
         final String packageName = PACKAGE_NAME.fetchFrom(params);
 
         final Path installPath;
         if (isInstallDirInUsrTree(installDir) || installDir.startsWith("/usr/")) {
@@ -450,35 +449,35 @@
         } else {
             installPath = Path.of(installDir, packageName, "share/doc/copyright");
         }
 
         return createMetaPackage(params).sourceRoot().resolve(
-                Path.of("/").relativize(installPath)).toFile();
+                Path.of("/").relativize(installPath));
     }
 
-    private File buildDeb(Map<String, ? super Object> params,
-            File outdir) throws IOException {
-        File outFile = new File(outdir,
+    private Path buildDeb(Map<String, ? super Object> params,
+            Path outdir) throws IOException {
+        Path outFile = outdir.resolve(
                 FULL_PACKAGE_NAME.fetchFrom(params)+".deb");
         Log.verbose(MessageFormat.format(I18N.getString(
-                "message.outputting-to-location"), outFile.getAbsolutePath()));
+                "message.outputting-to-location"), outFile.toAbsolutePath().toString()));
 
         PlatformPackage thePackage = createMetaPackage(params);
 
         List<String> cmdline = new ArrayList<>();
         cmdline.addAll(List.of(TOOL_FAKEROOT, TOOL_DPKG_DEB));
         if (Log.isVerbose()) {
             cmdline.add("--verbose");
         }
         cmdline.addAll(List.of("-b", thePackage.sourceRoot().toString(),
-                outFile.getAbsolutePath()));
+                outFile.toAbsolutePath().toString()));
 
         // run dpkg
         Executor.of(cmdline.toArray(String[]::new)).executeExpectSuccess();
 
         Log.verbose(MessageFormat.format(I18N.getString(
-                "message.output-to-location"), outFile.getAbsolutePath()));
+                "message.output-to-location"), outFile.toAbsolutePath().toString()));
 
         return outFile;
     }
 
     @Override
