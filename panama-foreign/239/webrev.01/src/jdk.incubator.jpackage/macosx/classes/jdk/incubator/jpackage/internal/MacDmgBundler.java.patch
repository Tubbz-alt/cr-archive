diff a/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacDmgBundler.java b/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacDmgBundler.java
--- a/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacDmgBundler.java
+++ b/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacDmgBundler.java
@@ -67,26 +67,26 @@
             "mac.dmg.installerName.suffix",
             String.class,
             params -> "",
             (s, p) -> s);
 
-    public File bundle(Map<String, ? super Object> params,
-            File outdir) throws PackagerException {
+    public Path bundle(Map<String, ? super Object> params,
+            Path outdir) throws PackagerException {
         Log.verbose(MessageFormat.format(I18N.getString("message.building-dmg"),
                 APP_NAME.fetchFrom(params)));
 
-        IOUtils.writableOutputDir(outdir.toPath());
+        IOUtils.writableOutputDir(outdir);
 
         try {
-            File appLocation = prepareAppBundle(params);
+            Path appLocation = prepareAppBundle(params);
 
             if (appLocation != null && prepareConfigFiles(params)) {
-                File configScript = getConfig_Script(params);
-                if (configScript.exists()) {
+                Path configScript = getConfig_Script(params);
+                if (IOUtils.exists(configScript)) {
                     Log.verbose(MessageFormat.format(
                             I18N.getString("message.running-script"),
-                            configScript.getAbsolutePath()));
+                            configScript.toAbsolutePath().toString()));
                     IOUtils.run("bash", configScript);
                 }
 
                 return buildDMG(params, appLocation, outdir);
             }
@@ -99,20 +99,23 @@
 
     private static final String hdiutil = "/usr/bin/hdiutil";
 
     private void prepareDMGSetupScript(Map<String, ? super Object> params)
                                                                     throws IOException {
-        File dmgSetup = getConfig_VolumeScript(params);
+        Path dmgSetup = getConfig_VolumeScript(params);
         Log.verbose(MessageFormat.format(
                 I18N.getString("message.preparing-dmg-setup"),
-                dmgSetup.getAbsolutePath()));
+                dmgSetup.toAbsolutePath().toString()));
 
         // We need to use URL for DMG to find it. We cannot use volume name, since
         // user might have open DMG with same volume name already. Url should end with
         // '/' and it should be real path (no symbolic links).
-        File imageDir = IMAGES_ROOT.fetchFrom(params);
-        if (!imageDir.exists()) imageDir.mkdirs(); // Create it, since it does not exist
+        Path imageDir = IMAGES_ROOT.fetchFrom(params);
+        if (!Files.exists(imageDir)) {
+             // Create it, since it does not exist
+             Files.createDirectories(imageDir);
+        }
         Path rootPath = Path.of(imageDir.toString()).toRealPath();
         Path volumePath = rootPath.resolve(APP_NAME.fetchFrom(params));
         String volumeUrl = volumePath.toUri().toString() + File.separator;
 
         // Provide full path to backround image, so we can find it.
@@ -132,41 +135,41 @@
                 .setCategory(I18N.getString("resource.dmg-setup-script"))
                 .setSubstitutionData(data)
                 .saveToFile(dmgSetup);
     }
 
-    private File getConfig_VolumeScript(Map<String, ? super Object> params) {
-        return new File(CONFIG_ROOT.fetchFrom(params),
+    private Path getConfig_VolumeScript(Map<String, ? super Object> params) {
+        return CONFIG_ROOT.fetchFrom(params).resolve(
                 APP_NAME.fetchFrom(params) + "-dmg-setup.scpt");
     }
 
-    private File getConfig_VolumeBackground(
+    private Path getConfig_VolumeBackground(
             Map<String, ? super Object> params) {
-        return new File(CONFIG_ROOT.fetchFrom(params),
+        return CONFIG_ROOT.fetchFrom(params).resolve(
                 APP_NAME.fetchFrom(params) + "-background.tiff");
     }
 
-    private File getConfig_VolumeIcon(Map<String, ? super Object> params) {
-        return new File(CONFIG_ROOT.fetchFrom(params),
+    private Path getConfig_VolumeIcon(Map<String, ? super Object> params) {
+        return CONFIG_ROOT.fetchFrom(params).resolve(
                 APP_NAME.fetchFrom(params) + "-volume.icns");
     }
 
-    private File getConfig_LicenseFile(Map<String, ? super Object> params) {
-        return new File(CONFIG_ROOT.fetchFrom(params),
+    private Path getConfig_LicenseFile(Map<String, ? super Object> params) {
+        return CONFIG_ROOT.fetchFrom(params).resolve(
                 APP_NAME.fetchFrom(params) + "-license.plist");
     }
 
     private void prepareLicense(Map<String, ? super Object> params) {
         try {
             String licFileStr = LICENSE_FILE.fetchFrom(params);
             if (licFileStr == null) {
                 return;
             }
 
-            File licFile = new File(licFileStr);
+            Path licFile = Path.of(licFileStr);
             byte[] licenseContentOriginal =
-                    Files.readAllBytes(licFile.toPath());
+                    Files.readAllBytes(licFile);
             String licenseInBase64 =
                     Base64.getEncoder().encodeToString(licenseContentOriginal);
 
             Map<String, String> data = new HashMap<>();
             data.put("APPLICATION_LICENSE_TEXT", licenseInBase64);
@@ -203,12 +206,12 @@
 
         return true;
     }
 
     // name of post-image script
-    private File getConfig_Script(Map<String, ? super Object> params) {
-        return new File(CONFIG_ROOT.fetchFrom(params),
+    private Path getConfig_Script(Map<String, ? super Object> params) {
+        return CONFIG_ROOT.fetchFrom(params).resolve(
                 APP_NAME.fetchFrom(params) + "-post-image.sh");
     }
 
     // Location of SetFile utility may be different depending on MacOS version
     // We look for several known places and if none of them work will
@@ -216,13 +219,13 @@
     private String findSetFileUtility() {
         String typicalPaths[] = {"/Developer/Tools/SetFile",
                 "/usr/bin/SetFile", "/Developer/usr/bin/SetFile"};
 
         String setFilePath = null;
-        for (String path: typicalPaths) {
-            File f = new File(path);
-            if (f.exists() && f.canExecute()) {
+        for (String path : typicalPaths) {
+            Path f = Path.of(path);
+            if (Files.exists(f) && Files.isExecutable(f)) {
                 setFilePath = path;
                 break;
             }
         }
 
@@ -249,80 +252,81 @@
             Process p = pb.start();
             InputStreamReader isr = new InputStreamReader(p.getInputStream());
             BufferedReader br = new BufferedReader(isr);
             String lineRead = br.readLine();
             if (lineRead != null) {
-                File f = new File(lineRead);
-                if (f.exists() && f.canExecute()) {
-                    return f.getAbsolutePath();
+                Path f = Path.of(lineRead);
+                if (Files.exists(f) && Files.isExecutable(f)) {
+                    return f.toAbsolutePath().toString();
                 }
             }
         } catch (IOException ignored) {}
 
         return null;
     }
 
-    private File buildDMG( Map<String, ? super Object> params,
-            File appLocation, File outdir) throws IOException, PackagerException {
+    private Path buildDMG( Map<String, ? super Object> params,
+            Path appLocation, Path outdir) throws IOException {
         boolean copyAppImage = false;
-        File imagesRoot = IMAGES_ROOT.fetchFrom(params);
-        if (!imagesRoot.exists()) imagesRoot.mkdirs();
+        Path imagesRoot = IMAGES_ROOT.fetchFrom(params);
+        if (!Files.exists(imagesRoot)) {
+            Files.createDirectories(imagesRoot);
+        }
 
-        File protoDMG = new File(imagesRoot,
-                APP_NAME.fetchFrom(params) +"-tmp.dmg");
-        File finalDMG = new File(outdir, INSTALLER_NAME.fetchFrom(params)
+        Path protoDMG = imagesRoot.resolve(APP_NAME.fetchFrom(params) +"-tmp.dmg");
+        Path finalDMG = outdir.resolve(INSTALLER_NAME.fetchFrom(params)
                 + INSTALLER_SUFFIX.fetchFrom(params) + ".dmg");
 
-        File srcFolder = APP_IMAGE_TEMP_ROOT.fetchFrom(params);
-        File predefinedImage =
-                StandardBundlerParam.getPredefinedAppImage(params);
+        Path srcFolder = APP_IMAGE_TEMP_ROOT.fetchFrom(params);
+        Path predefinedImage = StandardBundlerParam.getPredefinedAppImage(params);
         if (predefinedImage != null) {
             srcFolder = predefinedImage;
         } else if (StandardBundlerParam.isRuntimeInstaller(params)) {
-            Path newRoot = Files.createTempDirectory(
-                TEMP_ROOT.fetchFrom(params).toPath(), "root-");
+            Path newRoot = Files.createTempDirectory(TEMP_ROOT.fetchFrom(params),
+                    "root-");
 
             // first, is this already a runtime with
             // <runtime>/Contents/Home - if so we need the Home dir
-            Path original = appLocation.toPath();
-            Path home = original.resolve("Contents/Home");
-            Path source = (Files.exists(home)) ? home : original;
+            Path home = appLocation.resolve("Contents/Home");
+            Path source = (Files.exists(home)) ? home : appLocation;
 
             // Then we need to put back the <NAME>/Content/Home
             Path root = newRoot.resolve(
                     MAC_CF_BUNDLE_IDENTIFIER.fetchFrom(params));
             Path dest = root.resolve("Contents/Home");
 
             IOUtils.copyRecursive(source, dest);
 
-            srcFolder = newRoot.toFile();
+            srcFolder = newRoot;
         }
 
         Log.verbose(MessageFormat.format(I18N.getString(
-                "message.creating-dmg-file"), finalDMG.getAbsolutePath()));
+                "message.creating-dmg-file"), finalDMG.toAbsolutePath()));
 
-        protoDMG.delete();
-        if (finalDMG.exists() && !finalDMG.delete()) {
+        Files.deleteIfExists(protoDMG);
+        try {
+            Files.deleteIfExists(finalDMG);
+        } catch (IOException ex) {
             throw new IOException(MessageFormat.format(I18N.getString(
                     "message.dmg-cannot-be-overwritten"),
-                    finalDMG.getAbsolutePath()));
+                    finalDMG.toAbsolutePath()));
         }
 
-        protoDMG.getParentFile().mkdirs();
-        finalDMG.getParentFile().mkdirs();
+        Files.createDirectories(protoDMG.getParent());
+        Files.createDirectories(finalDMG.getParent());
 
         String hdiUtilVerbosityFlag = VERBOSE.fetchFrom(params) ?
                 "-verbose" : "-quiet";
 
         // create temp image
         ProcessBuilder pb = new ProcessBuilder(
                 hdiutil,
                 "create",
                 hdiUtilVerbosityFlag,
-                "-srcfolder", srcFolder.getAbsolutePath(),
+                "-srcfolder", srcFolder.toAbsolutePath().toString(),
                 "-volname", APP_NAME.fetchFrom(params),
-                "-ov", protoDMG.getAbsolutePath(),
+                "-ov", protoDMG.toAbsolutePath().toString(),
                 "-fs", "HFS+",
                 "-format", "UDRW");
         try {
             IOUtils.exec(pb);
         } catch (IOException ex) {
@@ -330,75 +334,73 @@
 
             // Creating DMG from entire app image failed, so lets try to create empty
             // DMG and copy files manually. See JDK-8248059.
             copyAppImage = true;
 
-            long size = new PathGroup(Map.of(new Object(), srcFolder.toPath()))
-                    .sizeInBytes();
+            long size = new PathGroup(Map.of(new Object(), srcFolder)).sizeInBytes();
             size += 50 * 1024 * 1024; // Add extra 50 megabytes. Actually DMG size will
             // not be bigger, but it will able to hold additional 50 megabytes of data.
             // We need extra room for icons and background image. When we providing
             // actual files to hdiutil, it will create DMG with ~50 megabytes extra room.
             pb = new ProcessBuilder(
                 hdiutil,
                 "create",
                 hdiUtilVerbosityFlag,
                 "-size", String.valueOf(size),
                 "-volname", APP_NAME.fetchFrom(params),
-                "-ov", protoDMG.getAbsolutePath(),
+                "-ov", protoDMG.toAbsolutePath().toString(),
                 "-fs", "HFS+");
             IOUtils.exec(pb);
         }
 
         // mount temp image
         pb = new ProcessBuilder(
                 hdiutil,
                 "attach",
-                protoDMG.getAbsolutePath(),
+                protoDMG.toAbsolutePath().toString(),
                 hdiUtilVerbosityFlag,
-                "-mountroot", imagesRoot.getAbsolutePath());
+                "-mountroot", imagesRoot.toAbsolutePath().toString());
         IOUtils.exec(pb, false, null, true);
 
-        File mountedRoot = new File(imagesRoot.getAbsolutePath(),
-                    APP_NAME.fetchFrom(params));
+        Path mountedRoot = imagesRoot.resolve(APP_NAME.fetchFrom(params));
 
         // Copy app image, since we did not create DMG with it, but instead we created
         // empty one.
         if (copyAppImage) {
             // In case of predefine app image srcFolder will point to app bundle, so if
             // we use it as is we will copy content of app bundle, but we need app bundle
             // folder as well.
-            if (srcFolder.toPath().toString().toLowerCase().endsWith(".app")) {
-                Path destPath = mountedRoot.toPath()
-                        .resolve(srcFolder.toPath().getFileName());
+            if (srcFolder.toString().toLowerCase().endsWith(".app")) {
+                Path destPath = mountedRoot
+                        .resolve(srcFolder.getFileName());
                 Files.createDirectory(destPath);
-                IOUtils.copyRecursive(srcFolder.toPath(), destPath);
+                IOUtils.copyRecursive(srcFolder, destPath);
             } else {
-                IOUtils.copyRecursive(srcFolder.toPath(), mountedRoot.toPath());
+                IOUtils.copyRecursive(srcFolder, mountedRoot);
             }
         }
 
         try {
             // background image
-            File bgdir = new File(mountedRoot, BACKGROUND_IMAGE_FOLDER);
-            bgdir.mkdirs();
+            Path bgdir = mountedRoot.resolve(BACKGROUND_IMAGE_FOLDER);
+            Files.createDirectories(bgdir);
             IOUtils.copyFile(getConfig_VolumeBackground(params),
-                    new File(bgdir, BACKGROUND_IMAGE));
+                    bgdir.resolve(BACKGROUND_IMAGE));
 
             // We will not consider setting background image and creating link
             // to install-dir in DMG as critical error, since it can fail in
             // headless enviroment.
             try {
                 pb = new ProcessBuilder("osascript",
-                        getConfig_VolumeScript(params).getAbsolutePath());
+                        getConfig_VolumeScript(params).toAbsolutePath().toString());
                 IOUtils.exec(pb);
             } catch (IOException ex) {
                 Log.verbose(ex);
             }
 
             // volume icon
-            File volumeIconFile = new File(mountedRoot, ".VolumeIcon.icns");
+            Path volumeIconFile = mountedRoot.resolve(".VolumeIcon.icns");
             IOUtils.copyFile(getConfig_VolumeIcon(params),
                     volumeIconFile);
 
             // Indicate that we want a custom icon
             // NB: attributes of the root directory are ignored
@@ -406,26 +408,26 @@
             // Therefore we have to do this after we mount image
             String setFileUtility = findSetFileUtility();
             if (setFileUtility != null) {
                 //can not find utility => keep going without icon
                 try {
-                    volumeIconFile.setWritable(true);
+                    volumeIconFile.toFile().setWritable(true);
                     // The "creator" attribute on a file is a legacy attribute
                     // but it seems Finder excepts these bytes to be
                     // "icnC" for the volume icon
                     // (might not work on Mac 10.13 with old XCode)
                     pb = new ProcessBuilder(
                             setFileUtility,
                             "-c", "icnC",
-                            volumeIconFile.getAbsolutePath());
+                            volumeIconFile.toAbsolutePath().toString());
                     IOUtils.exec(pb);
-                    volumeIconFile.setReadOnly();
+                    volumeIconFile.toFile().setReadOnly();
 
                     pb = new ProcessBuilder(
                             setFileUtility,
                             "-a", "C",
-                            mountedRoot.getAbsolutePath());
+                            mountedRoot.toAbsolutePath().toString());
                     IOUtils.exec(pb);
                 } catch (IOException ex) {
                     Log.error(ex.getMessage());
                     Log.verbose("Cannot enable custom icon using SetFile utility");
                 }
@@ -438,60 +440,60 @@
             pb = new ProcessBuilder(
                     hdiutil,
                     "detach",
                     "-force",
                     hdiUtilVerbosityFlag,
-                    mountedRoot.getAbsolutePath());
+                    mountedRoot.toAbsolutePath().toString());
             IOUtils.exec(pb);
         }
 
         // Compress it to a new image
         pb = new ProcessBuilder(
                 hdiutil,
                 "convert",
-                protoDMG.getAbsolutePath(),
+                protoDMG.toAbsolutePath().toString(),
                 hdiUtilVerbosityFlag,
                 "-format", "UDZO",
-                "-o", finalDMG.getAbsolutePath());
+                "-o", finalDMG.toAbsolutePath().toString());
         IOUtils.exec(pb);
 
         //add license if needed
-        if (getConfig_LicenseFile(params).exists()) {
+        if (Files.exists(getConfig_LicenseFile(params))) {
             //hdiutil unflatten your_image_file.dmg
             pb = new ProcessBuilder(
                     hdiutil,
                     "unflatten",
-                    finalDMG.getAbsolutePath()
+                    finalDMG.toAbsolutePath().toString()
             );
             IOUtils.exec(pb);
 
             //add license
             pb = new ProcessBuilder(
                     hdiutil,
                     "udifrez",
-                    finalDMG.getAbsolutePath(),
+                    finalDMG.toAbsolutePath().toString(),
                     "-xml",
-                    getConfig_LicenseFile(params).getAbsolutePath()
+                    getConfig_LicenseFile(params).toAbsolutePath().toString()
             );
             IOUtils.exec(pb);
 
             //hdiutil flatten your_image_file.dmg
             pb = new ProcessBuilder(
                     hdiutil,
                     "flatten",
-                    finalDMG.getAbsolutePath()
+                    finalDMG.toAbsolutePath().toString()
             );
             IOUtils.exec(pb);
 
         }
 
         //Delete the temporary image
-        protoDMG.delete();
+        Files.deleteIfExists(protoDMG);
 
         Log.verbose(MessageFormat.format(I18N.getString(
                 "message.output-to-location"),
-                APP_NAME.fetchFrom(params), finalDMG.getAbsolutePath()));
+                APP_NAME.fetchFrom(params), finalDMG.toAbsolutePath().toString()));
 
         return finalDMG;
     }
 
 
@@ -528,12 +530,12 @@
             }
         }
     }
 
     @Override
-    public File execute(Map<String, ? super Object> params,
-            File outputParentDir) throws PackagerException {
+    public Path execute(Map<String, ? super Object> params,
+            Path outputParentDir) throws PackagerException {
         return bundle(params, outputParentDir);
     }
 
     @Override
     public boolean supported(boolean runtimeInstaller) {
@@ -543,12 +545,12 @@
     public final static String[] required =
             {"/usr/bin/hdiutil", "/usr/bin/osascript"};
     public static boolean isSupported() {
         try {
             for (String s : required) {
-                File f = new File(s);
-                if (!f.exists() || !f.canExecute()) {
+                Path f = Path.of(s);
+                if (!Files.exists(f) || !Files.isExecutable(f)) {
                     return false;
                 }
             }
             return true;
         } catch (Exception e) {
