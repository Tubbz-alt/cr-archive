diff a/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacBaseInstallerBundler.java b/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacBaseInstallerBundler.java
--- a/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacBaseInstallerBundler.java
+++ b/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacBaseInstallerBundler.java
@@ -24,14 +24,14 @@
  */
 
 package jdk.incubator.jpackage.internal;
 
 import java.io.ByteArrayOutputStream;
-import java.io.File;
 import java.io.IOException;
 import java.io.PrintStream;
 import java.nio.file.Files;
+import java.nio.file.Path;
 import java.text.MessageFormat;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.regex.Matcher;
@@ -41,25 +41,27 @@
 import static jdk.incubator.jpackage.internal.StandardBundlerParam.PREDEFINED_APP_IMAGE;
 import static jdk.incubator.jpackage.internal.StandardBundlerParam.VERSION;
 
 public abstract class MacBaseInstallerBundler extends AbstractBundler {
 
-    public final BundlerParamInfo<File> APP_IMAGE_TEMP_ROOT =
+    public final BundlerParamInfo<Path> APP_IMAGE_TEMP_ROOT =
             new StandardBundlerParam<>(
             "mac.app.imageRoot",
-            File.class,
+            Path.class,
             params -> {
-                File imageDir = IMAGES_ROOT.fetchFrom(params);
-                if (!imageDir.exists()) imageDir.mkdirs();
+                Path imageDir = IMAGES_ROOT.fetchFrom(params);
                 try {
+                    if (!IOUtils.exists(imageDir)) {
+                        Files.createDirectories(imageDir);
+                    }
                     return Files.createTempDirectory(
-                            imageDir.toPath(), "image-").toFile();
+                            imageDir, "image-");
                 } catch (IOException e) {
-                    return new File(imageDir, getID()+ ".image");
+                    return imageDir.resolve(getID()+ ".image");
                 }
             },
-            (s, p) -> new File(s));
+            (s, p) -> Path.of(s));
 
     public static final BundlerParamInfo<String> SIGNING_KEY_USER =
             new StandardBundlerParam<>(
             Arguments.CLIOptions.MAC_SIGNING_KEY_NAME.getId(),
             String.class,
@@ -108,12 +110,12 @@
     }
 
     protected void validateAppImageAndBundeler(
             Map<String, ? super Object> params) throws ConfigException {
         if (PREDEFINED_APP_IMAGE.fetchFrom(params) != null) {
-            File applicationImage = PREDEFINED_APP_IMAGE.fetchFrom(params);
-            if (!applicationImage.exists()) {
+            Path applicationImage = PREDEFINED_APP_IMAGE.fetchFrom(params);
+            if (!IOUtils.exists(applicationImage)) {
                 throw new ConfigException(
                         MessageFormat.format(I18N.getString(
                                 "message.app-image-dir-does-not-exist"),
                                 PREDEFINED_APP_IMAGE.getID(),
                                 applicationImage.toString()),
@@ -130,18 +132,18 @@
         } else {
             appImageBundler.validate(params);
         }
     }
 
-    protected File prepareAppBundle(Map<String, ? super Object> params)
+    protected Path prepareAppBundle(Map<String, ? super Object> params)
             throws PackagerException {
-        File predefinedImage =
+        Path predefinedImage =
                 StandardBundlerParam.getPredefinedAppImage(params);
         if (predefinedImage != null) {
             return predefinedImage;
         }
-        File appImageRoot = APP_IMAGE_TEMP_ROOT.fetchFrom(params);
+        Path appImageRoot = APP_IMAGE_TEMP_ROOT.fetchFrom(params);
 
         return appImageBundler.execute(params, appImageRoot);
     }
 
     @Override
