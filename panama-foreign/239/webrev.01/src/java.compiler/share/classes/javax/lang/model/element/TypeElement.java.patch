diff a/src/java.compiler/share/classes/javax/lang/model/element/TypeElement.java b/src/java.compiler/share/classes/javax/lang/model/element/TypeElement.java
--- a/src/java.compiler/share/classes/javax/lang/model/element/TypeElement.java
+++ b/src/java.compiler/share/classes/javax/lang/model/element/TypeElement.java
@@ -116,14 +116,14 @@
      * @return the nesting kind of this type element
      */
     NestingKind getNestingKind();
 
     /**
-     * Returns the fully qualified name of this type element.
-     * More precisely, it returns the <i>canonical</i> name.
-     * For local and anonymous classes, which do not have canonical names,
-     * an empty name is returned.
+     * Returns the fully qualified name of this type element.  More
+     * precisely, it returns the <i>canonical</i> name.  For local and
+     * anonymous classes, which do not have canonical names, an <a
+     * href=Name.html#empty_name>empty name</a> is returned.
      *
      * <p>The name of a generic type does not include any reference
      * to its formal type parameters.
      * For example, the fully qualified name of the interface
      * {@code java.util.Set<E>} is "{@code java.util.Set}".
@@ -139,11 +139,12 @@
     Name getQualifiedName();
 
     /**
      * Returns the simple name of this type element.
      *
-     * For an anonymous class, an empty name is returned.
+     * For an anonymous class, an <a href=Name.html#empty_name> empty
+     * name</a> is returned.
      *
      * @return the simple name of this class or interface,
      * an empty name for an anonymous class
      *
      */
