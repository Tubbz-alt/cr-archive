diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryAddressImpl.java
@@ -29,11 +29,10 @@
 import jdk.internal.misc.Unsafe;
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 
-import java.lang.ref.Reference;
 import java.util.Objects;
 
 /**
  * This class provides an immutable implementation for the {@code MemoryAddress} interface. This class contains information
  * about the segment this address is associated with, as well as an offset into such segment.
@@ -76,10 +75,20 @@
     @Override
     public MemoryAddress addOffset(long bytes) {
         return new MemoryAddressImpl(segment, offset + bytes);
     }
 
+    @Override
+    public MemoryAddress rebase(MemorySegment segment) {
+        MemorySegmentImpl segmentImpl = (MemorySegmentImpl)segment;
+        if (segmentImpl.base != this.segment.base) {
+            throw new IllegalArgumentException("Invalid rebase target: " + segment);
+        }
+        return new MemoryAddressImpl((MemorySegmentImpl)segment,
+                unsafeGetOffset() - ((MemoryAddressImpl)segment.baseAddress()).unsafeGetOffset());
+    }
+
     // MemoryAddressProxy methods
 
     public void checkAccess(long offset, long length, boolean readOnly) {
         segment.checkRange(MemoryAddressProxy.addOffsets(this.offset, offset, this), length, !readOnly);
     }
@@ -117,6 +126,16 @@
 
     @Override
     public String toString() {
         return "MemoryAddress{ region: " + segment + " offset=0x" + Long.toHexString(offset) + " }";
     }
+
+    // helper methods
+
+    public static long addressof(MemoryAddress address) {
+        MemoryAddressImpl addressImpl = (MemoryAddressImpl) address;
+        if (addressImpl.unsafeGetBase() != null) {
+            throw new IllegalStateException("Heap address!");
+        }
+        return addressImpl.unsafeGetOffset();
+    }
 }
