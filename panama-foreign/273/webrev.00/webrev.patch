diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/MacroParserImpl.java
@@ -50,22 +50,29 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 class MacroParserImpl implements JextractTask.ConstantParser {
 
-    private Reparser reparser;
-    TreeMaker treeMaker;
-    MacroTable macroTable;
+    private final Reparser reparser;
+    private final TreeMaker treeMaker;
+    final MacroTable macroTable;
 
-    public MacroParserImpl(TreeMaker treeMaker, TranslationUnit tu, Collection<String> args) {
+    private MacroParserImpl(Reparser reparser, TreeMaker treeMaker) {
+        this.reparser = reparser;
+        this.treeMaker = treeMaker;
+        this.macroTable = new MacroTable();
+    }
+
+    public static MacroParserImpl make(TreeMaker treeMaker, TranslationUnit tu, Collection<String> args) {
+        Reparser reparser;
         try {
-            this.reparser = new ClangReparser(tu, args);
-            this.treeMaker = treeMaker;
-            this.macroTable = new MacroTable();
+            reparser = new ClangReparser(tu, args);
         } catch (IOException | Index.ParsingFailedException ex) {
-            this.reparser = Reparser.DUMMY;
+            throw new RuntimeException(ex);
         }
+
+        return new MacroParserImpl(reparser, treeMaker);
     }
 
     /**
      * This method attempts to evaluate the macro. Evaluation occurs in two steps: first, an attempt is made
      * to see if the macro corresponds to a simple numeric constant. If so, the constant is parsed in Java directly.
@@ -101,12 +108,10 @@
         }
     }
 
     interface Reparser {
         Stream<Cursor> reparse(String snippet);
-
-        Reparser DUMMY = s -> Stream.empty();
     }
 
     /**
      * This class allows client to reparse a snippet of code against a given set of include files.
      * For performance reasons, the set of includes (which comes from the jextract parser) is compiled
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/Parser.java
@@ -66,11 +66,11 @@
                 }
             },
             true, args.toArray(new String[0]));
 
         JextractTask.ConstantParser constantParser = this.constantParser != null ?
-                this.constantParser : new MacroParserImpl(treeMaker, tu, args);
+                this.constantParser : MacroParserImpl.make(treeMaker, tu, args);
 
         List<Declaration> decls = new ArrayList<>();
         Cursor tuCursor = tu.getCursor();
         tuCursor.children().
             forEach(c -> {
