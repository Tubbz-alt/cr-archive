diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java
@@ -52,24 +52,33 @@
  * <li>Generation: the HTML content and any associated JavaScript can be accessed
  * </ol>
  *
  * Many methods return the current object, to facilitate fluent builder-style usage.
  *
+ * A table may support filtered views, which can be selected by clicking on
+ * one of a list of tabs above the table. If the table does not support filtered
+ * views, the {@code <caption>} element is typically displayed as a single (inactive)
+ * tab.
+ *
+ * Tables are always enclosed in a {@code <div>} element, which will also contain
+ * a {@code <div>} element for the list of tabs, when the table supports filtered views.
+ *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
  */
 public class Table extends Content {
+    private final HtmlStyle topStyle;
     private final HtmlStyle tableStyle;
     private Content caption;
     private Map<String, Predicate<Element>> tabMap;
     private String defaultTab;
     private Set<String> tabs;
+    private HtmlStyle tabListStyle = HtmlStyle.tableTabs;
     private HtmlStyle activeTabStyle = HtmlStyle.activeTableTab;
     private HtmlStyle tabStyle = HtmlStyle.tableTab;
-    private HtmlStyle tabEnd = HtmlStyle.tabEnd;
     private IntFunction<String> tabScript;
     private Function<Integer, String> tabId = (i -> "t" + i);
     private TableHeader header;
     private List<HtmlStyle> columnStyles;
     private int rowScopeColumnIndex;
@@ -80,14 +89,16 @@
     private String id;
 
     /**
      * Creates a builder for an HTML table.
      *
-     * @param style     the style class for the {@code <table>} tag
+     * @param topStyle       the style class for the top-level {@code <div>} element
+     * @param tableStyle     the style class for the {@code <table>} element
      */
-    public Table(HtmlStyle style) {
-        this.tableStyle = style;
+    public Table(HtmlStyle topStyle, HtmlStyle tableStyle) {
+        this.topStyle = topStyle;
+        this.tableStyle = tableStyle;
         bodyRows = new ArrayList<>();
         bodyRowMasks = new ArrayList<>();
     }
 
     /**
@@ -95,24 +106,15 @@
      * This is ignored if the table is configured to provide tabs to select
      * different subsets of rows within the table.
      * The caption should be suitable for use as the content of a {@code <caption>}
      * element.
      *
-     * <b>For compatibility, the code currently accepts a {@code <caption>} element
-     * as well. This should be removed when all clients rely on using the {@code <caption>}
-     * element being generated by this class.</b>
-     *
      * @param captionContent the caption
      * @return this object
      */
     public Table setCaption(Content captionContent) {
-        if (captionContent instanceof HtmlTree
-                && ((HtmlTree) captionContent).tagName == TagName.CAPTION) {
-            caption = captionContent;
-        } else {
-            caption = getCaption(captionContent);
-        }
+        caption = getCaption(captionContent);
         return this;
     }
 
     /**
      * Adds a tab to the table.
@@ -159,19 +161,19 @@
     }
 
     /**
      * Sets the name of the styles used to display the tabs.
      *
+     * @param tabListStyle      the style for the {@code <div>} element containing the tabs
      * @param activeTabStyle    the style for the active tab
      * @param tabStyle          the style for other tabs
-     * @param tabEnd            the style for the padding that appears within each tab
      * @return  this object
      */
-    public Table setTabStyles(HtmlStyle activeTabStyle, HtmlStyle tabStyle, HtmlStyle tabEnd) {
+    public Table setTabStyles(HtmlStyle tabListStyle, HtmlStyle activeTabStyle, HtmlStyle tabStyle) {
+        this.tabListStyle = tabListStyle;
         this.activeTabStyle = activeTabStyle;
         this.tabStyle = tabStyle;
-        this.tabEnd = tabEnd;
         return this;
     }
 
     /**
      * Sets the JavaScript function used to generate the {@code id} attribute for each tag.
@@ -277,10 +279,13 @@
         return this;
     }
 
     /**
      * Sets the id attribute of the table.
+     * This is required if the table has tabs, in which case a subsidiary id
+     * will be generated for the tabpanel. This subsidiary id is required for
+     * the ARIA support.
      *
      * @param id the id
      * @return this object
      */
     public Table setId(String id) {
@@ -409,27 +414,26 @@
      * Returns the HTML for the table.
      *
      * @return the HTML
      */
     private Content toContent() {
-        HtmlTree mainDiv = new HtmlTree(TagName.DIV);
-        mainDiv.setStyle(tableStyle);
+        HtmlTree mainDiv = new HtmlTree(TagName.DIV).setStyle(topStyle);
         if (id != null) {
             mainDiv.setId(id);
         }
-        HtmlTree table = new HtmlTree(TagName.TABLE);
+        HtmlTree table = new HtmlTree(TagName.TABLE).setStyle(tableStyle);
         if (tabMap == null || tabs.size() == 1) {
             if (tabMap == null) {
                 table.add(caption);
             } else if (tabs.size() == 1) {
                 String tabName = tabs.iterator().next();
                 table.add(getCaption(new StringContent(tabName)));
             }
             table.add(getTableBody());
             mainDiv.add(table);
         } else {
-            HtmlTree tablist = new HtmlTree(TagName.DIV)
+            HtmlTree tablist = new HtmlTree(TagName.DIV).setStyle(tabListStyle)
                     .put(HtmlAttr.ROLE, "tablist")
                     .put(HtmlAttr.ARIA_ORIENTATION, "horizontal");
 
             int tabIndex = 0;
             tablist.add(createTab(tabId.apply(tabIndex), activeTabStyle, true, defaultTab));
@@ -441,12 +445,15 @@
                     HtmlTree tab = createTab(tabId.apply(tabIndex), tabStyle, false, tabName);
                     tab.put(HtmlAttr.ONCLICK, script);
                     tablist.add(tab);
                 }
             }
+            if (id == null) {
+                throw new IllegalStateException("no id set for table");
+            }
             HtmlTree tabpanel = new HtmlTree(TagName.DIV)
-                    .put(HtmlAttr.ID, tableStyle.cssName() + "_tabpanel")
+                    .put(HtmlAttr.ID, id + ".tabpanel")
                     .put(HtmlAttr.ROLE, "tabpanel");
             table.add(getTableBody());
             tabpanel.add(table);
             mainDiv.add(tablist);
             mainDiv.add(tabpanel);
@@ -456,11 +463,11 @@
 
     private HtmlTree createTab(String tabId, HtmlStyle style, boolean defaultTab, String tabName) {
         HtmlTree tab = new HtmlTree(TagName.BUTTON)
                 .put(HtmlAttr.ROLE, "tab")
                 .put(HtmlAttr.ARIA_SELECTED, defaultTab ? "true" : "false")
-                .put(HtmlAttr.ARIA_CONTROLS, tableStyle.cssName() + "_tabpanel")
+                .put(HtmlAttr.ARIA_CONTROLS, id + ".tabpanel")
                 .put(HtmlAttr.TABINDEX, defaultTab ? "0" : "-1")
                 .put(HtmlAttr.ONKEYDOWN, "switchTab(event)")
                 .put(HtmlAttr.ID, tabId)
                 .setStyle(style);
         tab.add(tabName);
@@ -548,9 +555,8 @@
 
     }
 
     private HtmlTree getCaption(Content title) {
         return new HtmlTree(TagName.CAPTION)
-                .add(HtmlTree.SPAN(title))
-                .add(HtmlTree.SPAN(tabEnd, Entity.NO_BREAK_SPACE));
+                .add(HtmlTree.SPAN(title));
     }
 }
