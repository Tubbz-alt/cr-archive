diff a/src/java.base/share/classes/sun/security/ssl/SSLSocketImpl.java b/src/java.base/share/classes/sun/security/ssl/SSLSocketImpl.java
--- a/src/java.base/share/classes/sun/security/ssl/SSLSocketImpl.java
+++ b/src/java.base/share/classes/sun/security/ssl/SSLSocketImpl.java
@@ -617,10 +617,19 @@
             if (pv == null || (!pv.useTLS13PlusSpec())) {
                 hasCloseReceipt = true;
             }
         }
 
+        // Deliver the user_canceled alert and the close notify alert.
+        closeNotify(useUserCanceled);
+
+        if (!isInputShutdown()) {
+            bruteForceCloseInput(hasCloseReceipt);
+        }
+    }
+
+    void closeNotify(boolean useUserCanceled) throws IOException {
         // Need a lock here so that the user_canceled alert and the
         // close_notify alert can be delivered together.
         int linger = getSoLinger();
         if (linger >= 0) {
             // don't wait more than SO_LINGER for obtaining the
@@ -631,11 +640,11 @@
             try {
                 if (conContext.outputRecord.recordLock.tryLock() ||
                         conContext.outputRecord.recordLock.tryLock(
                                 linger, TimeUnit.SECONDS)) {
                     try {
-                        handleClosedNotifyAlert(useUserCanceled);
+                        deliverClosedNotify(useUserCanceled);
                     } finally {
                         conContext.outputRecord.recordLock.unlock();
                     }
                 } else {
                     // For layered, non-autoclose sockets, we are not
@@ -685,22 +694,18 @@
                 Thread.currentThread().interrupt();
             }
         } else {
             conContext.outputRecord.recordLock.lock();
             try {
-                handleClosedNotifyAlert(useUserCanceled);
+                deliverClosedNotify(useUserCanceled);
             } finally {
                 conContext.outputRecord.recordLock.unlock();
             }
         }
-
-        if (!isInputShutdown()) {
-            bruteForceCloseInput(hasCloseReceipt);
-        }
     }
 
-    private void handleClosedNotifyAlert(
+    private void deliverClosedNotify(
             boolean useUserCanceled) throws IOException {
         try {
             // send a user_canceled alert if needed.
             if (useUserCanceled) {
                 conContext.warning(Alert.USER_CANCELED);
