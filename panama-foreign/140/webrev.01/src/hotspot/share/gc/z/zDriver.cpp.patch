diff a/src/hotspot/share/gc/z/zDriver.cpp b/src/hotspot/share/gc/z/zDriver.cpp
--- a/src/hotspot/share/gc/z/zDriver.cpp
+++ b/src/hotspot/share/gc/z/zDriver.cpp
@@ -162,11 +162,11 @@
     return true;
   }
 
   virtual bool do_operation() {
     ZStatTimer timer(ZPhasePauseMarkStart);
-    ZServiceabilityMarkStartTracer tracer;
+    ZServiceabilityPauseTracer tracer;
 
     // Set up soft reference policy
     const bool clear = should_clear_soft_references();
     ZHeap::heap()->set_soft_reference_policy(clear);
 
@@ -187,11 +187,11 @@
     return VMOp_ZMarkEnd;
   }
 
   virtual bool do_operation() {
     ZStatTimer timer(ZPhasePauseMarkEnd);
-    ZServiceabilityMarkEndTracer tracer;
+    ZServiceabilityPauseTracer tracer;
     return ZHeap::heap()->mark_end();
   }
 };
 
 class VM_ZRelocateStart : public VM_ZOperation {
@@ -204,11 +204,11 @@
     return true;
   }
 
   virtual bool do_operation() {
     ZStatTimer timer(ZPhasePauseRelocateStart);
-    ZServiceabilityRelocateStartTracer tracer;
+    ZServiceabilityPauseTracer tracer;
     ZHeap::heap()->relocate_start();
     return true;
   }
 };
 
@@ -352,21 +352,23 @@
   ZHeap::heap()->check_out_of_memory();
 }
 
 class ZDriverGCScope : public StackObj {
 private:
-  GCIdMark       _gc_id;
-  GCCause::Cause _gc_cause;
-  GCCauseSetter  _gc_cause_setter;
-  ZStatTimer     _timer;
+  GCIdMark                   _gc_id;
+  GCCause::Cause             _gc_cause;
+  GCCauseSetter              _gc_cause_setter;
+  ZStatTimer                 _timer;
+  ZServiceabilityCycleTracer _tracer;
 
 public:
   ZDriverGCScope(GCCause::Cause cause) :
       _gc_id(),
       _gc_cause(cause),
       _gc_cause_setter(ZCollectedHeap::heap(), cause),
-      _timer(ZPhaseCycle) {
+      _timer(ZPhaseCycle),
+      _tracer() {
     // Update statistics
     ZStatCycle::at_start();
   }
 
   ~ZDriverGCScope() {
