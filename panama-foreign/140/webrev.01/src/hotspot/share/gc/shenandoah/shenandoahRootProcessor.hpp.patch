diff a/src/hotspot/share/gc/shenandoah/shenandoahRootProcessor.hpp b/src/hotspot/share/gc/shenandoah/shenandoahRootProcessor.hpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahRootProcessor.hpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahRootProcessor.hpp
@@ -36,16 +36,18 @@
 
 class ShenandoahSerialRoot {
 public:
   typedef void (*OopsDo)(OopClosure*);
 private:
-  ShenandoahSharedFlag                      _claimed;
-  const OopsDo                              _oops_do;
-  const ShenandoahPhaseTimings::GCParPhases _phase;
+  ShenandoahSharedFlag                   _claimed;
+  const OopsDo                           _oops_do;
+  const ShenandoahPhaseTimings::Phase    _phase;
+  const ShenandoahPhaseTimings::ParPhase _par_phase;
 
 public:
-  ShenandoahSerialRoot(OopsDo oops_do, ShenandoahPhaseTimings::GCParPhases);
+  ShenandoahSerialRoot(OopsDo oops_do,
+          ShenandoahPhaseTimings::Phase phase, ShenandoahPhaseTimings::ParPhase par_phase);
   void oops_do(OopClosure* cl, uint worker_id);
 };
 
 class ShenandoahSerialRoots {
 private:
@@ -53,75 +55,85 @@
   ShenandoahSerialRoot  _object_synchronizer_root;
   ShenandoahSerialRoot  _management_root;
   ShenandoahSerialRoot  _system_dictionary_root;
   ShenandoahSerialRoot  _jvmti_root;
 public:
-  ShenandoahSerialRoots();
+  ShenandoahSerialRoots(ShenandoahPhaseTimings::Phase phase);
   void oops_do(OopClosure* cl, uint worker_id);
 };
 
 class ShenandoahWeakSerialRoot {
   typedef void (*WeakOopsDo)(BoolObjectClosure*, OopClosure*);
 private:
-  ShenandoahSharedFlag                      _claimed;
-  const WeakOopsDo                          _weak_oops_do;
-  const ShenandoahPhaseTimings::GCParPhases _phase;
+  ShenandoahSharedFlag                   _claimed;
+  const WeakOopsDo                       _weak_oops_do;
+  const ShenandoahPhaseTimings::Phase    _phase;
+  const ShenandoahPhaseTimings::ParPhase _par_phase;
 
 public:
-  ShenandoahWeakSerialRoot(WeakOopsDo oops_do, ShenandoahPhaseTimings::GCParPhases);
+  ShenandoahWeakSerialRoot(WeakOopsDo oops_do,
+          ShenandoahPhaseTimings::Phase phase, ShenandoahPhaseTimings::ParPhase par_phase);
   void weak_oops_do(BoolObjectClosure* is_alive, OopClosure* keep_alive, uint worker_id);
 };
 
 #if INCLUDE_JVMTI
 class ShenandoahJVMTIWeakRoot : public ShenandoahWeakSerialRoot {
 public:
-  ShenandoahJVMTIWeakRoot();
+  ShenandoahJVMTIWeakRoot(ShenandoahPhaseTimings::Phase phase);
 };
 #endif // INCLUDE_JVMTI
 
 #if INCLUDE_JFR
 class ShenandoahJFRWeakRoot : public ShenandoahWeakSerialRoot {
 public:
-  ShenandoahJFRWeakRoot();
+  ShenandoahJFRWeakRoot(ShenandoahPhaseTimings::Phase phase);
 };
 #endif // INCLUDE_JFR
 
 class ShenandoahSerialWeakRoots {
 private:
   JVMTI_ONLY(ShenandoahJVMTIWeakRoot _jvmti_weak_roots;)
   JFR_ONLY(ShenandoahJFRWeakRoot     _jfr_weak_roots;)
 public:
+  ShenandoahSerialWeakRoots(ShenandoahPhaseTimings::Phase phase) :
+  JVMTI_ONLY(_jvmti_weak_roots(phase))
+  JFR_ONLY(JVMTI_ONLY(COMMA)_jfr_weak_roots(phase)) {};
   void weak_oops_do(BoolObjectClosure* is_alive, OopClosure* keep_alive, uint worker_id);
   void weak_oops_do(OopClosure* cl, uint worker_id);
 };
 
 template <bool CONCURRENT>
 class ShenandoahVMRoot {
 private:
   OopStorage::ParState<CONCURRENT, false /* is_const */> _itr;
-  const ShenandoahPhaseTimings::GCParPhases _phase;
+  const ShenandoahPhaseTimings::Phase    _phase;
+  const ShenandoahPhaseTimings::ParPhase _par_phase;
 public:
-  ShenandoahVMRoot(OopStorage* storage, ShenandoahPhaseTimings::GCParPhases phase);
+  ShenandoahVMRoot(OopStorage* storage,
+          ShenandoahPhaseTimings::Phase phase, ShenandoahPhaseTimings::ParPhase par_phase);
 
   template <typename Closure>
   void oops_do(Closure* cl, uint worker_id);
 };
 
 template <bool CONCURRENT>
 class ShenandoahWeakRoot : public ShenandoahVMRoot<CONCURRENT> {
 public:
-  ShenandoahWeakRoot(OopStorage* storage, ShenandoahPhaseTimings::GCParPhases phase);
+  ShenandoahWeakRoot(OopStorage* storage,
+          ShenandoahPhaseTimings::Phase phase, ShenandoahPhaseTimings::ParPhase par_phase);
 };
 
 template <>
 class ShenandoahWeakRoot<false /*concurrent*/> {
 private:
   OopStorage::ParState<false /*concurrent*/, false /*is_const*/> _itr;
-  const ShenandoahPhaseTimings::GCParPhases _phase;
+  const ShenandoahPhaseTimings::Phase    _phase;
+  const ShenandoahPhaseTimings::ParPhase _par_phase;
 
 public:
-  ShenandoahWeakRoot(OopStorage* storage, ShenandoahPhaseTimings::GCParPhases phase);
+  ShenandoahWeakRoot(OopStorage* storage,
+          ShenandoahPhaseTimings::Phase phase, ShenandoahPhaseTimings::ParPhase par_phase);
 
   template <typename IsAliveClosure, typename KeepAliveClosure>
   void weak_oops_do(IsAliveClosure* is_alive, KeepAliveClosure* keep_alive, uint worker_id);
 };
 
@@ -146,11 +158,11 @@
   ShenandoahWeakRoot<false /*concurrent*/>  _jni_roots;
   ShenandoahWeakRoot<false /*concurrent*/>  _string_table_roots;
   ShenandoahWeakRoot<false /*concurrent*/>  _resolved_method_table_roots;
   ShenandoahWeakRoot<false /*concurrent*/>  _vm_roots;
 public:
-  ShenandoahWeakRoots();
+  ShenandoahWeakRoots(ShenandoahPhaseTimings::Phase phase);
 
   template <typename Closure>
   void oops_do(Closure* cl, uint worker_id);
 
   template <typename IsAliveClosure, typename KeepAliveClosure>
@@ -162,30 +174,33 @@
 private:
   ShenandoahVMRoot<CONCURRENT>    _jni_handle_roots;
   ShenandoahVMRoot<CONCURRENT>    _vm_global_roots;
 
 public:
-  ShenandoahVMRoots();
+  ShenandoahVMRoots(ShenandoahPhaseTimings::Phase phase);
 
   template <typename T>
   void oops_do(T* cl, uint worker_id);
 };
 
 class ShenandoahThreadRoots {
 private:
+  ShenandoahPhaseTimings::Phase _phase;
   const bool _is_par;
 public:
-  ShenandoahThreadRoots(bool is_par);
+  ShenandoahThreadRoots(ShenandoahPhaseTimings::Phase phase, bool is_par);
   ~ShenandoahThreadRoots();
 
   void oops_do(OopClosure* oops_cl, CodeBlobClosure* code_cl, uint worker_id);
   void threads_do(ThreadClosure* tc, uint worker_id);
 };
 
 class ShenandoahStringDedupRoots {
+private:
+  ShenandoahPhaseTimings::Phase _phase;
 public:
-  ShenandoahStringDedupRoots();
+  ShenandoahStringDedupRoots(ShenandoahPhaseTimings::Phase phase);
   ~ShenandoahStringDedupRoots();
 
   void oops_do(BoolObjectClosure* is_alive, OopClosure* keep_alive, uint worker_id);
 };
 
@@ -198,22 +213,25 @@
 };
 
 template <typename ITR>
 class ShenandoahCodeCacheRoots {
 private:
+  ShenandoahPhaseTimings::Phase _phase;
   ITR _coderoots_iterator;
 public:
-  ShenandoahCodeCacheRoots();
+  ShenandoahCodeCacheRoots(ShenandoahPhaseTimings::Phase phase);
   ~ShenandoahCodeCacheRoots();
 
   void code_blobs_do(CodeBlobClosure* blob_cl, uint worker_id);
 };
 
 template <bool CONCURRENT, bool SINGLE_THREADED>
 class ShenandoahClassLoaderDataRoots {
+private:
+  ShenandoahPhaseTimings::Phase _phase;
 public:
-  ShenandoahClassLoaderDataRoots();
+  ShenandoahClassLoaderDataRoots(ShenandoahPhaseTimings::Phase phase);
   ~ShenandoahClassLoaderDataRoots();
 
   void always_strong_cld_do(CLDClosure* clds, uint worker_id);
   void cld_do(CLDClosure* clds, uint worker_id);
 };
