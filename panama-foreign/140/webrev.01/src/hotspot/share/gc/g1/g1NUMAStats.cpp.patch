diff a/src/hotspot/share/gc/g1/g1NUMAStats.cpp b/src/hotspot/share/gc/g1/g1NUMAStats.cpp
--- a/src/hotspot/share/gc/g1/g1NUMAStats.cpp
+++ b/src/hotspot/share/gc/g1/g1NUMAStats.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -29,11 +29,12 @@
 double G1NUMAStats::Stat::rate() const {
   return _requested == 0 ? 0 : (double)_hit / _requested * 100;
 }
 
 G1NUMAStats::NodeDataArray::NodeDataArray(uint num_nodes) {
-  guarantee(num_nodes > 1, "Number of nodes (%u) should be set", num_nodes);
+  // Not using > 1, for -XX:+ForceNUMA support.
+  guarantee(num_nodes > 0, "Number of nodes (%u) should be set", num_nodes);
 
   // The row represents the number of nodes.
   _num_column = num_nodes;
   // +1 for G1MemoryNodeManager::AnyNodeIndex.
   _num_row = num_nodes + 1;
@@ -122,11 +123,12 @@
 }
 
 G1NUMAStats::G1NUMAStats(const int* node_ids, uint num_node_ids) :
   _node_ids(node_ids), _num_node_ids(num_node_ids), _node_data() {
 
-  assert(_num_node_ids  > 1, "Should have more than one active memory nodes %u", _num_node_ids);
+  // Not using > 1, for -XX:+ForceNUMA support.
+  assert(_num_node_ids > 0, "Should have at least one node id: %u", _num_node_ids);
 
   for (int i = 0; i < NodeDataItemsSentinel; i++) {
     _node_data[i] = new NodeDataArray(_num_node_ids);
   }
 }
