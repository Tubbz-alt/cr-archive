diff a/src/jdk.jfr/share/classes/jdk/jfr/AnnotationElement.java b/src/jdk.jfr/share/classes/jdk/jfr/AnnotationElement.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/AnnotationElement.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/AnnotationElement.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -44,28 +44,26 @@
 /**
  * Describes event metadata, such as labels, descriptions and units.
  * <p>
  * The following example shows how {@code AnnotationElement} can be used to dynamically define events.
  *
- * <pre>
- * <code>
- *   List{@literal <}AnnotationElement{@literal >} typeAnnotations = new ArrayList{@literal <}{@literal >}();
- *   typeannotations.add(new AnnotationElement(Name.class, "com.example.HelloWorld");
+ * <pre>{@literal
+ *   List<AnnotationElement> typeAnnotations = new ArrayList<>();
+ *   typeAnnotations.add(new AnnotationElement(Name.class, "com.example.HelloWorld"));
  *   typeAnnotations.add(new AnnotationElement(Label.class, "Hello World"));
  *   typeAnnotations.add(new AnnotationElement(Description.class, "Helps programmer getting started"));
  *
- *   List{@literal <}AnnotationElement{@literal >} fieldAnnotations = new ArrayList{@literal <}{@literal >}();
+ *   List<AnnotationElement> fieldAnnotations = new ArrayList<>();
  *   fieldAnnotations.add(new AnnotationElement(Label.class, "Message"));
  *
- *   List{@literal <}ValueDescriptor{@literal >} fields = new ArrayList{@literal <}{@literal >}();
+ *   List<ValueDescriptor> fields = new ArrayList<>();
  *   fields.add(new ValueDescriptor(String.class, "message", fieldAnnotations));
  *
  *   EventFactory f = EventFactory.create(typeAnnotations, fields);
  *   Event event = f.newEvent();
  *   event.commit();
- * </code>
- * </pre>
+ * }</pre>
  *
  * @since 9
  */
 public final class AnnotationElement {
     private final Type type;
@@ -355,11 +353,11 @@
      *
      * @param <A> the type of the annotation to query for and return if it exists
      * @param annotationType the {@code Class object} corresponding to the annotation type,
      *        not {@code null}
      * @return this element's annotation for the specified annotation type if
-     *         it it exists, else {@code null}
+     *         it exists, else {@code null}
      */
     public final <A> A getAnnotation(Class<? extends Annotation> annotationType) {
         Objects.requireNonNull(annotationType);
         return type.getAnnotation(annotationType);
     }
