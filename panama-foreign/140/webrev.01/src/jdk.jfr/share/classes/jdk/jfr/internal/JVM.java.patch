diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/JVM.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/JVM.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/JVM.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/JVM.java
@@ -23,11 +23,10 @@
  * questions.
  */
 
 package jdk.jfr.internal;
 
-import java.io.IOException;
 import java.util.List;
 
 import jdk.internal.HotSpotIntrinsicCandidate;
 import jdk.jfr.Event;
 import jdk.jfr.internal.handlers.EventHandler;
@@ -281,11 +280,10 @@
      * recording can be set to true/false with {@link #beginRecording()}
      * {@link #endRecording()}
      *
      * @param file the file where data should be written, or null if it should
      *        not be copied out (in memory).
-     * @throws IOException
      */
     public native void setOutput(String file);
 
     /**
      * Controls if a class deriving from jdk.jfr.Event should
@@ -360,12 +358,10 @@
      * should be adjusted
      *
      * Requires that JFR has been started with {@link #createNativeJFR()}
      *
      * @param bytes binary representation of metadata descriptor
-     *
-     * @param binary representation of descriptor
      */
     public native void storeMetadataDescriptor(byte[] bytes);
 
     /**
      * If the JVM supports JVM TI and retransformation has not been disabled this
@@ -426,12 +422,12 @@
      * To convert ticks to wall clock time.
      */
     public native double getTimeConversionFactor();
 
     /**
-     * Return a unique identifier for a class. Compared to {@link #getClassId()}
-     * , this method does not tag the class as being "in-use".
+     * Return a unique identifier for a class. Compared to {@link #getClassId(Class)},
+     * this method does not tag the class as being "in-use".
      *
      * @param clazz class
      *
      * @return a unique class identifier
      */
