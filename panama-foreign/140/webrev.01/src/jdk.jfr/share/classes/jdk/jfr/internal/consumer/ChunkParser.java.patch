diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/ChunkParser.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/ChunkParser.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/ChunkParser.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/ChunkParser.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -185,22 +185,20 @@
         });
     }
 
     /**
      * Reads an event and returns null when segment or chunk ends.
-     *
-     * @param awaitNewEvents wait for new data.
      */
     RecordedEvent readStreamingEvent() throws IOException {
         long absoluteChunkEnd = chunkHeader.getEnd();
         RecordedEvent event = readEvent();
         if (event != null) {
             return event;
         }
         long lastValid = absoluteChunkEnd;
         long metadataPosition = chunkHeader.getMetataPosition();
-        long contantPosition = chunkHeader.getConstantPoolPosition();
+        long constantPosition = chunkHeader.getConstantPoolPosition();
         chunkFinished = awaitUpdatedHeader(absoluteChunkEnd, configuration.filterEnd);
         if (chunkFinished) {
             Logger.log(LogTag.JFR_SYSTEM_PARSER, LogLevel.INFO, "At chunk end");
             return null;
         }
@@ -212,14 +210,14 @@
             ParserFactory factory = new ParserFactory(metadata, constantLookups, timeConverter);
             parsers = factory.getParsers();
             typeMap = factory.getTypeMap();
             updateConfiguration();
         }
-        if (contantPosition != chunkHeader.getConstantPoolPosition()) {
+        if (constantPosition != chunkHeader.getConstantPoolPosition()) {
             Logger.log(LogTag.JFR_SYSTEM_PARSER, LogLevel.INFO, "Found new constant pool data. Filling up pools with new values");
             constantLookups.forEach(c -> c.getLatestPool().setAllResolved(false));
-            fillConstantPools(contantPosition + chunkHeader.getAbsoluteChunkStart());
+            fillConstantPools(constantPosition + chunkHeader.getAbsoluteChunkStart());
             constantLookups.forEach(c -> c.getLatestPool().setResolving());
             constantLookups.forEach(c -> c.getLatestPool().resolve());
             constantLookups.forEach(c -> c.getLatestPool().setResolved());
         }
         input.position(lastValid);
