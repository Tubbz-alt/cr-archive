diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/WriteableUserPath.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/WriteableUserPath.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/WriteableUserPath.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/WriteableUserPath.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -42,11 +42,11 @@
  * at all time know what kind of paths we are dealing with.
  * <p>
  * A user supplied path must never be used in an unsafe context, such as a
  * shutdown hook or any other thread created by JFR.
  * <p>
- * All operation using this path must happen in {@link #doPriviligedIO(Callable)}
+ * All operation using this path must happen in {@link #doPrivilegedIO(Callable)}
  */
 public final class WriteableUserPath {
     private final AccessControlContext controlContext;
     private final Path original;
     private final Path real;
@@ -118,11 +118,11 @@
             throw new InternalError("A user path was accessed outside the context it was supplied in");
         }
         return real;
     }
 
-    public void doPriviligedIO(Callable<?> function) throws IOException {
+    public void doPrivilegedIO(Callable<?> function) throws IOException {
         try {
             inPrivileged = true;
             AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {
                 @Override
                 public Void run() throws Exception {
