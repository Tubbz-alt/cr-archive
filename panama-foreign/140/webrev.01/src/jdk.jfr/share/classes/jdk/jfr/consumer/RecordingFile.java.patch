diff a/src/jdk.jfr/share/classes/jdk/jfr/consumer/RecordingFile.java b/src/jdk.jfr/share/classes/jdk/jfr/consumer/RecordingFile.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/consumer/RecordingFile.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/consumer/RecordingFile.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -46,20 +46,18 @@
 /**
  * A recording file.
  * <p>
  * The following example shows how read and print all events in a recording file.
  *
- * <pre>
- * <code>
+ * <pre>{@literal
  * try (RecordingFile recordingFile = new RecordingFile(Paths.get("recording.jfr"))) {
  *   while (recordingFile.hasMoreEvents()) {
  *     RecordedEvent event = recordingFile.readEvent();
  *     System.out.println(event);
  *   }
  * }
- * </code>
- * </pre>
+ * }</pre>
  *
  * @since 9
  */
 public final class RecordingFile implements Closeable {
 
@@ -81,21 +79,21 @@
      * @throws SecurityException if a security manager exists and its
      *         {@code checkRead} method denies read access to the file.
      */
     public RecordingFile(Path file) throws IOException {
         this.file = file.toFile();
-        this.input = new RecordingInput(this.file, FileAccess.UNPRIVILIGED);
+        this.input = new RecordingInput(this.file, FileAccess.UNPRIVILEGED);
         findNext();
     }
 
     /**
      * Reads the next event in the recording.
      *
      * @return the next event, not {@code null}
      *
      * @throws EOFException if no more events exist in the recording file
-     * @throws IOException if an I/O error occurs.
+     * @throws IOException if an I/O error occurs
      *
      * @see #hasMoreEvents()
      */
     public RecordedEvent readEvent() throws IOException {
         if (eof) {
@@ -134,11 +132,11 @@
     public List<EventType> readEventTypes() throws IOException {
         ensureOpen();
         MetadataDescriptor previous = null;
         List<EventType> types = new ArrayList<>();
         HashSet<Long> foundIds = new HashSet<>();
-        try (RecordingInput ri = new RecordingInput(file, FileAccess.UNPRIVILIGED)) {
+        try (RecordingInput ri = new RecordingInput(file, FileAccess.UNPRIVILEGED)) {
             ChunkHeader ch = new ChunkHeader(ri);
             aggregateEventTypeForChunk(ch, null, types, foundIds);
             while (!ch.isLastChunk()) {
                 ch = ch.nextHeader();
                 previous = aggregateEventTypeForChunk(ch, previous, types, foundIds);
@@ -150,11 +148,11 @@
     List<Type> readTypes() throws IOException  {
         ensureOpen();
         MetadataDescriptor previous = null;
         List<Type> types = new ArrayList<>();
         HashSet<Long> foundIds = new HashSet<>();
-        try (RecordingInput ri = new RecordingInput(file, FileAccess.UNPRIVILIGED)) {
+        try (RecordingInput ri = new RecordingInput(file, FileAccess.UNPRIVILEGED)) {
             ChunkHeader ch = new ChunkHeader(ri);
             ch.awaitFinished();
             aggregateTypeForChunk(ch, null, types, foundIds);
             while (!ch.isLastChunk()) {
                 ch = ch.nextHeader();
