diff a/src/jdk.jfr/share/classes/jdk/jfr/consumer/EventStream.java b/src/jdk.jfr/share/classes/jdk/jfr/consumer/EventStream.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/consumer/EventStream.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/consumer/EventStream.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -85,19 +85,18 @@
  * these occasions, use the {@link #onClose(Runnable)} method to register an
  * action.
  * <p>
  * If an unexpected exception occurs in an action, it is possible to catch the
  * exception in an error handler. An error handler can be registered using the
- * {@link #onError(Runnable)} method. If no error handler is registered, the
+ * {@link #onError(Consumer)} method. If no error handler is registered, the
  * default behavior is to print the exception and its backtrace to the standard
  * error stream.
  * <p>
  * The following example shows how an {@code EventStream} can be used to listen
  * to events on a JVM running Flight Recorder
  *
- * <pre>
- * <code>
+ * <pre>{@literal
  * try (var es = EventStream.openRepository()) {
  *   es.onEvent("jdk.CPULoad", event -> {
  *     System.out.println("CPU Load " + event.getEndTime());
  *     System.out.println(" Machine total: " + 100 * event.getFloat("machineTotal") + "%");
  *     System.out.println(" JVM User: " + 100 * event.getFloat("jvmUser") + "%");
@@ -111,12 +110,11 @@
  *     System.out.println(" Longest pause: " + event.getDuration("longestPause"));
  *     System.out.println();
  *   });
  *   es.start();
  * }
- * </code>
- * </pre>
+ * }</pre>
  * <p>
  * To start recording together with the stream, see {@link RecordingStream}.
  *
  * @since 14
  */
@@ -137,11 +135,11 @@
      *         does not have
      *         {@code FlightRecorderPermission("accessFlightRecorder")}
      */
     public static EventStream openRepository() throws IOException {
         Utils.checkAccessFlightRecorder();
-        return new EventDirectoryStream(AccessController.getContext(), null, SecuritySupport.PRIVILIGED, null);
+        return new EventDirectoryStream(AccessController.getContext(), null, SecuritySupport.PRIVILEGED, null);
     }
 
     /**
      * Creates an event stream from a disk repository.
      * <p>
@@ -160,11 +158,11 @@
      *         files in the directory.
      */
     public static EventStream openRepository(Path directory) throws IOException {
         Objects.nonNull(directory);
         AccessControlContext acc = AccessController.getContext();
-        return new EventDirectoryStream(acc, directory, FileAccess.UNPRIVILIGED, null);
+        return new EventDirectoryStream(acc, directory, FileAccess.UNPRIVILEGED, null);
     }
 
     /**
      * Creates an event stream from a file.
      * <p>
@@ -211,11 +209,11 @@
     void onFlush(Runnable action);
 
     /**
      * Registers an action to perform if an exception occurs.
      * <p>
-     * if an action is not registered, an exception stack trace is printed to
+     * If an action is not registered, an exception stack trace is printed to
      * standard error.
      * <p>
      * Registering an action overrides the default behavior. If multiple actions
      * have been registered, they are performed in the order of registration.
      * <p>
@@ -271,11 +269,11 @@
 
     /**
      * Specifies that the event object in an {@link #onEvent(Consumer)} action
      * can be reused.
      * <p>
-     * If reuse is set to {@code true), an action should not keep a reference
+     * If reuse is set to {@code true}, an action should not keep a reference
      * to the event object after the action has completed.
      *
      * @param reuse {@code true} if an event object can be reused, {@code false}
      * otherwise
      */
@@ -284,11 +282,11 @@
     /**
      * Specifies that events arrives in chronological order, sorted by the time
      * they were committed to the stream.
      *
      * @param ordered if event objects arrive in chronological order to
-     *        {@code #onEvent(Consumer)}
+     *        {@link #onEvent(Consumer)}
      */
     void setOrdered(boolean ordered);
 
     /**
      * Specifies the start time of the stream.
@@ -319,26 +317,26 @@
      * @see #startAsync()
      */
     void setEndTime(Instant endTime);
 
     /**
-     * Start processing of actions.
+     * Starts processing of actions.
      * <p>
      * Actions are performed in the current thread.
      * <p>
-     * To stop the stream, use the {@code #close()} method.
+     * To stop the stream, use the {@link #close()} method.
      *
      * @throws IllegalStateException if the stream is already started or closed
      */
     void start();
 
     /**
-     * Start asynchronous processing of actions.
+     * Starts asynchronous processing of actions.
      * <p>
      * Actions are performed in a single separate thread.
      * <p>
-     * To stop the stream, use the {@code #close()} method.
+     * To stop the stream, use the {@link #close()} method.
      *
      * @throws IllegalStateException if the stream is already started or closed
      */
     void startAsync();
 
