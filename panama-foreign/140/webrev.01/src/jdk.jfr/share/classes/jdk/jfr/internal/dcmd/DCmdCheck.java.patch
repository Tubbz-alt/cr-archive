diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/DCmdCheck.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/DCmdCheck.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/DCmdCheck.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/DCmdCheck.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -48,11 +48,11 @@
 final class DCmdCheck extends AbstractDCmd {
     /**
      * Execute JFR.check
      *
      * @param recordingText name or id of the recording to check, or
-     *        <code>null</code> to show a list of all recordings.
+     *        {@code null} to show a list of all recordings.
      *
      * @param verbose if event settings should be included.
      *
      * @return result output
      *
@@ -100,11 +100,11 @@
 
     private void printRecording(Recording recording, boolean verbose) {
         printGeneral(recording);
         if (verbose) {
             println();
-            printSetttings(recording);
+            printSettings(recording);
         }
     }
 
     private void printGeneral(Recording recording) {
         print("Recording " + recording.getId() + ": name=" + recording.getName());
@@ -128,11 +128,11 @@
 
         print(" (" + recording.getState().toString().toLowerCase() + ")");
         println();
     }
 
-    private void printSetttings(Recording recording) {
+    private void printSettings(Recording recording) {
         Map<String, String> settings = recording.getSettings();
         for (EventType eventType : sortByEventPath(getFlightRecorder().getEventTypes())) {
             StringJoiner sj = new StringJoiner(",", "[", "]");
             sj.setEmptyValue("");
             for (SettingDescriptor s : eventType.getSettingDescriptors()) {
