diff a/src/jdk.jfr/share/classes/jdk/jfr/Recording.java b/src/jdk.jfr/share/classes/jdk/jfr/Recording.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/Recording.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/Recording.java
@@ -44,21 +44,19 @@
 /**
  * Provides means to configure, start, stop and dump recording data to disk.
  * <p>
  * The following example shows how configure, start, stop and dump recording data to disk.
  *
- * <pre>
- * <code>
+ * <pre>{@literal
  *   Configuration c = Configuration.getConfiguration("default");
  *   Recording r = new Recording(c);
  *   r.start();
  *   System.gc();
  *   Thread.sleep(5000);
  *   r.stop();
  *   r.dump(Files.createTempFile("my-recording", ".jfr"));
- * </code>
- * </pre>
+ * }</pre>
  *
  * @since 9
  */
 public final class Recording implements Closeable {
 
@@ -143,15 +141,13 @@
     /**
      * Creates a recording with settings from a configuration.
      * <p>
      * The following example shows how create a recording that uses a predefined configuration.
      *
-     * <pre>
-     * <code>
+     * <pre>{@literal
      * Recording r = new Recording(Configuration.getConfiguration("default"));
-     * </code>
-     * </pre>
+     * }</pre>
      *
      * The newly created recording is in the {@link RecordingState#NEW} state. To
      * start the recording, invoke the {@link Recording#start()} method.
      *
      * @param configuration configuration that contains the settings to be use, not
@@ -267,11 +263,11 @@
     }
 
     /**
      * Returns the time when this recording was started.
      *
-     * @return the the time, or {@code null} if this recording is not started
+     * @return the time, or {@code null} if this recording is not started
      */
     public Instant getStartTime() {
         return internal.getStartTime();
     }
 
@@ -309,29 +305,25 @@
     /**
      * Replaces all settings for this recording.
      * <p>
      * The following example shows how to set event settings for a recording.
      *
-     * <pre>
-     * <code>
-     *     Map{@literal <}String, String{@literal >} settings = new HashMap{@literal <}{@literal >}();
+     * <pre>{@literal
+     *     Map<String, String> settings = new HashMap<>();
      *     settings.putAll(EventSettings.enabled("jdk.CPUSample").withPeriod(Duration.ofSeconds(2)).toMap());
      *     settings.putAll(EventSettings.enabled(MyEvent.class).withThreshold(Duration.ofSeconds(2)).withoutStackTrace().toMap());
      *     settings.put("jdk.ExecutionSample#period", "10 ms");
      *     recording.setSettings(settings);
-     * </code>
-     * </pre>
+     * }</pre>
      *
      * The following example shows how to merge settings.
      *
-     * <pre>
-     *     {@code
+     * <pre>{@literal
      *     Map<String, String> settings = recording.getSettings();
      *     settings.putAll(additionalSettings);
      *     recording.setSettings(settings);
-     * }
-     * </pre>
+     * }</pre>
      *
      * @param settings the settings to set, not {@code null}
      */
     public void setSettings(Map<String, String> settings) {
         Objects.requireNonNull(settings);
@@ -419,11 +411,11 @@
      * If neither maximum limit or the maximum age is set, the size of the
      * recording may grow indefinitely.
      *
      * @param maxSize the amount of data to retain, {@code 0} if infinite
      *
-     * @throws IllegalArgumentException if <code>maxSize</code> is negative
+     * @throws IllegalArgumentException if {@code maxSize} is negative
      *
      * @throws IllegalStateException if the recording is in {@code CLOSED} state
      */
     public void setMaxSize(long maxSize) {
         if (maxSize < 0) {
@@ -472,11 +464,11 @@
      * If neither maximum limit or the maximum age is set, the size of the
      * recording may grow indefinitely.
      *
      * @param maxAge the length of time that data is kept, or {@code null} if infinite
      *
-     * @throws IllegalArgumentException if <code>maxAge</code> is negative
+     * @throws IllegalArgumentException if {@code maxAge} is negative
      *
      * @throws IllegalStateException if the recording is in the {@code CLOSED} state
      */
     public void setMaxAge(Duration maxAge) {
         if (maxAge != null && maxAge.isNegative()) {
@@ -584,14 +576,14 @@
     /**
      * Creates a data stream for a specified interval.
      * <p>
      * The stream may contain some data outside the specified range.
      *
-     * @param the start start time for the stream, or {@code null} to get data from
+     * @param start the start time for the stream, or {@code null} to get data from
      *        start time of the recording
      *
-     * @param the end end time for the stream, or {@code null} to get data until the
+     * @param end the end time for the stream, or {@code null} to get data until the
      *        present time.
      *
      * @return an input stream, or {@code null} if no data is available in the
      *         interval.
      *
