diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/PlatformEventType.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/PlatformEventType.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/PlatformEventType.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/PlatformEventType.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -59,11 +59,11 @@
     private boolean hasPeriod = true;
     private boolean hasCutoff = false;
     private boolean isInstrumented;
     private boolean markForInstrumentation;
     private boolean registered = true;
-    private boolean commitable = enabled && registered;
+    private boolean committable = enabled && registered;
 
 
     // package private
     PlatformEventType(String name, long id, boolean isJDK, boolean dynamicSettings) {
         super(name, Type.SUPER_TYPE_EVENT, id);
@@ -159,11 +159,11 @@
         return isJDK;
     }
 
     public void setEnabled(boolean enabled) {
         this.enabled = enabled;
-        updateCommitable();
+        updateCommittable();
         if (isJVM) {
             if (isMethodSampling) {
                 long p = enabled ? period : 0;
                 JVM.getJVM().setMethodSamplingInterval(getId(), p);
             } else {
@@ -245,11 +245,11 @@
     }
 
     public boolean setRegistered(boolean registered) {
         if (this.registered != registered) {
             this.registered = registered;
-            updateCommitable();
+            updateCommittable();
             LogTag logTag = isJVM() || isJDK() ? LogTag.JFR_SYSTEM_EVENT : LogTag.JFR_EVENT;
             if (registered) {
                 Logger.log(logTag, LogLevel.INFO, "Registered " + getLogName());
             } else {
                 Logger.log(logTag, LogLevel.INFO, "Unregistered " + getLogName());
@@ -260,21 +260,21 @@
             return true;
         }
         return false;
     }
 
-    private void updateCommitable() {
-        this.commitable = enabled && registered;
+    private void updateCommittable() {
+        this.committable = enabled && registered;
     }
 
     public final boolean isRegistered() {
         return registered;
     }
 
     // Efficient check of enabled && registered
-    public boolean isCommitable() {
-        return commitable;
+    public boolean isCommittable() {
+        return committable;
     }
 
     public int getStackTraceOffset() {
         return stackTraceOffset;
     }
