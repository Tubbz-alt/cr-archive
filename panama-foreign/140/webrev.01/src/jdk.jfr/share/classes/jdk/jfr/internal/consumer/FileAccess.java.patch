diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/FileAccess.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/FileAccess.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/FileAccess.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/FileAccess.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -32,11 +32,11 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 
 // Protected by modular boundaries.
 public abstract class FileAccess {
-    public final static FileAccess UNPRIVILIGED = new UnPriviliged();
+    public final static FileAccess UNPRIVILEGED = new UnPrivileged();
 
     public abstract RandomAccessFile openRAF(File f, String mode) throws IOException;
 
     public abstract DirectoryStream<Path> newDirectoryStream(Path repository) throws IOException;
 
@@ -44,11 +44,11 @@
 
     public abstract long length(File f) throws IOException;
 
     public abstract long fileSize(Path p) throws IOException;
 
-    private static class UnPriviliged extends FileAccess {
+    private static class UnPrivileged extends FileAccess {
         @Override
         public RandomAccessFile openRAF(File f, String mode) throws IOException {
             return new RandomAccessFile(f, mode);
         }
 
