diff a/src/jdk.jfr/share/classes/jdk/jfr/consumer/RecordingStream.java b/src/jdk.jfr/share/classes/jdk/jfr/consumer/RecordingStream.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/consumer/RecordingStream.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/consumer/RecordingStream.java
@@ -49,22 +49,19 @@
  * Machine).
  * <p>
  * The following example shows how to record events using the default
  * configuration and print the Garbage Collection, CPU Load and JVM Information
  * event to standard out.
- * <pre>
- * <code>
+ * <pre>{@literal
  * Configuration c = Configuration.getConfiguration("default");
  * try (var rs = new RecordingStream(c)) {
  *     rs.onEvent("jdk.GarbageCollection", System.out::println);
  *     rs.onEvent("jdk.CPULoad", System.out::println);
  *     rs.onEvent("jdk.JVMInformation", System.out::println);
  *     rs.start();
- *   }
  * }
- * </code>
- * </pre>
+ * }</pre>
  *
  * @since 14
  */
 public final class RecordingStream implements AutoCloseable, EventStream {
 
@@ -86,11 +83,11 @@
         Utils.checkAccessFlightRecorder();
         AccessControlContext acc = AccessController.getContext();
         this.recording = new Recording();
         try {
             PlatformRecording pr = PrivateAccess.getInstance().getPlatformRecording(recording);
-            this.directoryStream = new EventDirectoryStream(acc, null, SecuritySupport.PRIVILIGED, pr);
+            this.directoryStream = new EventDirectoryStream(acc, null, SecuritySupport.PRIVILEGED, pr);
         } catch (IOException ioe) {
             this.recording.close();
             throw new IllegalStateException(ioe.getMessage());
         }
     }
@@ -99,19 +96,17 @@
      * Creates a recording stream using settings from a configuration.
      * <p>
      * The following example shows how to create a recording stream that uses a
      * predefined configuration.
      *
-     * <pre>
-     * <code>
+     * <pre>{@literal
      * var c = Configuration.getConfiguration("default");
      * try (var rs = new RecordingStream(c)) {
      *   rs.onEvent(System.out::println);
      *   rs.start();
      * }
-     * </code>
-     * </pre>
+     * }</pre>
      *
      * @param configuration configuration that contains the settings to use,
      *        not {@code null}
      *
      * @throws IllegalStateException if Flight Recorder can't be created (for
@@ -150,23 +145,21 @@
      * Replaces all settings for this recording stream.
      * <p>
      * The following example records 20 seconds using the "default" configuration
      * and then changes settings to the "profile" configuration.
      *
-     * <pre>
-     * <code>
-     *     Configuration defaultConfiguration = Configuration.getConfiguration("default");
-     *     Configuration profileConfiguration = Configuration.getConfiguration("profile");
-     *     try (var rs = new RecordingStream(defaultConfiguration) {
-     *        rs.onEvent(System.out::println);
-     *        rs.startAsync();
-     *        Thread.sleep(20_000);
-     *        rs.setSettings(profileConfiguration.getSettings());
-     *        Thread.sleep(20_000);
-     *     }
-     * </code>
-     * </pre>
+     * <pre>{@literal
+     * Configuration defaultConfiguration = Configuration.getConfiguration("default");
+     * Configuration profileConfiguration = Configuration.getConfiguration("profile");
+     * try (var rs = new RecordingStream(defaultConfiguration)) {
+     *    rs.onEvent(System.out::println);
+     *    rs.startAsync();
+     *    Thread.sleep(20_000);
+     *    rs.setSettings(profileConfiguration.getSettings());
+     *    Thread.sleep(20_000);
+     * }
+     * }</pre>
      *
      * @param settings the settings to set, not {@code null}
      *
      * @see Recording#setSettings(Map)
      */
@@ -328,34 +321,31 @@
         long startNanos = pr.start();
         directoryStream.start(startNanos);
     }
 
     /**
-     * Start asynchronous processing of actions.
+     * Starts asynchronous processing of actions.
      * <p>
      * Actions are performed in a single separate thread.
      * <p>
-     * To stop the stream, use the {@code #close()} method.
+     * To stop the stream, use the {@link #close()} method.
      * <p>
      * The following example prints the CPU usage for ten seconds. When
      * the current thread leaves the try-with-resources block the
      * stream is stopped/closed.
-     * <pre>
-     * <code>
+     * <pre>{@literal
      * try (var stream = new RecordingStream()) {
      *   stream.enable("jdk.CPULoad").withPeriod(Duration.ofSeconds(1));
      *   stream.onEvent("jdk.CPULoad", event -> {
      *     System.out.println(event);
      *   });
      *   stream.startAsync();
      *   Thread.sleep(10_000);
      * }
-     * </code>
-     * </pre>
+     * }</pre>
      *
      * @throws IllegalStateException if the stream is already started or closed
-     *
      */
     @Override
     public void startAsync() {
         PlatformRecording pr = PrivateAccess.getInstance().getPlatformRecording(recording);
         long startNanos = pr.start();
