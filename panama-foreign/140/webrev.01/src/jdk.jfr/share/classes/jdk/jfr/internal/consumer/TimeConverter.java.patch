diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/TimeConverter.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/TimeConverter.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/TimeConverter.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/TimeConverter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -29,26 +29,25 @@
 import java.time.ZoneOffset;
 
 import jdk.jfr.internal.LogLevel;
 import jdk.jfr.internal.LogTag;
 import jdk.jfr.internal.Logger;
-import jdk.jfr.internal.consumer.ChunkHeader;
 
 /**
  * Converts ticks to nanoseconds
  */
 final class TimeConverter {
     private final long startTicks;
     private final long startNanos;
     private final double divisor;
-    private final ZoneOffset zoneOffet;
+    private final ZoneOffset zoneOffset;
 
     TimeConverter(ChunkHeader chunkHeader, int rawOffset) {
         this.startTicks = chunkHeader.getStartTicks();
         this.startNanos = chunkHeader.getStartNanos();
         this.divisor = chunkHeader.getTicksPerSecond() / 1000_000_000L;
-        this.zoneOffet = zoneOfSet(rawOffset);
+        this.zoneOffset = zoneOfSet(rawOffset);
     }
 
     public long convertTimestamp(long ticks) {
         return startNanos + (long) ((ticks - startTicks) / divisor);
     }
@@ -56,11 +55,11 @@
     public long convertTimespan(long ticks) {
         return (long) (ticks / divisor);
     }
 
     public ZoneOffset getZoneOffset() {
-        return zoneOffet;
+        return zoneOffset;
     }
 
     private ZoneOffset zoneOfSet(int rawOffset) {
         try {
             return ZoneOffset.ofTotalSeconds(rawOffset / 1000);
