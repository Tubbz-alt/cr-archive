diff a/src/jdk.incubator.jpackage/windows/native/libjpackage/ResourceEditor.cpp b/src/jdk.incubator.jpackage/windows/native/libjpackage/ResourceEditor.cpp
--- a/src/jdk.incubator.jpackage/windows/native/libjpackage/ResourceEditor.cpp
+++ b/src/jdk.incubator.jpackage/windows/native/libjpackage/ResourceEditor.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -35,16 +35,23 @@
     if (NULL == h) {
         JP_THROW(SysError(tstrings::any() << "BeginUpdateResource("
                     << binaryPath << ") failed", BeginUpdateResource));
     }
 
+    ownHandle(true);
+    discard(false);
+}
+
+
+ResourceEditor::FileLock::FileLock(HANDLE h): h(h) {
+    ownHandle(false);
     discard(false);
 }
 
 
 ResourceEditor::FileLock::~FileLock() {
-    if (!EndUpdateResource(h, theDiscard)) {
+    if (theOwnHandle && !EndUpdateResource(h, theDiscard)) {
         JP_NO_THROW(JP_THROW(SysError(tstrings::any()
             << "EndUpdateResource(" << h << ") failed.", EndUpdateResource)));
     }
 }
 
@@ -83,12 +90,12 @@
         std::wostringstream printer;
         printer << L"#" << reinterpret_cast<size_t>(v);
         theId = printer.str();
     } else {
         theId = v;
-        theIdPtr = theId.c_str();
     }
+    theIdPtr = v;
     return *this;
 }
 
 
 ResourceEditor& ResourceEditor::apply(const FileLock& dstBinary,
