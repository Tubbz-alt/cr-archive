diff a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/Arguments.java b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/Arguments.java
--- a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/Arguments.java
+++ b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/Arguments.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -168,10 +168,15 @@
         ARGUMENTS ("arguments", OptionCategories.PROPERTY, () -> {
             List<String> arguments = getArgumentList(popArg());
             setOptionValue("arguments", arguments);
         }),
 
+        JLINK_OPTIONS ("jlink-options", OptionCategories.PROPERTY, () -> {
+            List<String> options = getArgumentList(popArg());
+            setOptionValue("jlink-options", options);
+        }),
+
         ICON ("icon", OptionCategories.PROPERTY),
 
         COPYRIGHT ("copyright", OptionCategories.PROPERTY),
 
         LICENSE_FILE ("license-file", OptionCategories.PROPERTY),
@@ -262,10 +267,11 @@
         ADD_MODULES ("add-modules", OptionCategories.MODULAR),
 
         MODULE_PATH ("module-path", "p", OptionCategories.MODULAR),
 
         BIND_SERVICES ("bind-services", OptionCategories.PROPERTY, () -> {
+            showDeprecation("bind-services");
             setOptionValue("bind-services", true);
         }),
 
         MAC_SIGN ("mac-sign", "s", OptionCategories.PLATFORM_MAC, () -> {
             setOptionValue("mac-sign", true);
@@ -577,11 +583,15 @@
             if (allOptions.contains(CLIOptions.BIND_SERVICES)) {
                 throw new PackagerException("ERR_MutuallyExclusiveOptions",
                         CLIOptions.PREDEFINED_RUNTIME_IMAGE.getIdWithPrefix(),
                         CLIOptions.BIND_SERVICES.getIdWithPrefix());
             }
-
+            if (allOptions.contains(CLIOptions.JLINK_OPTIONS)) {
+                throw new PackagerException("ERR_MutuallyExclusiveOptions",
+                        CLIOptions.PREDEFINED_RUNTIME_IMAGE.getIdWithPrefix(),
+                        CLIOptions.JLINK_OPTIONS.getIdWithPrefix());
+            }
         }
         if (hasMainJar && hasMainModule) {
             throw new PackagerException("ERR_BothMainJarAndModule");
         }
         if (imageOnly && !hasMainJar && !hasMainModule) {
@@ -807,6 +817,10 @@
             }
         } catch (IOException ignore) {}
         return null;
     }
 
+    private static void showDeprecation(String option) {
+        Log.error(MessageFormat.format(I18N.getString("warning.deprecation"),
+                option));
+    }
 }
