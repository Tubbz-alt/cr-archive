diff a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/ApplicationLayout.java b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/ApplicationLayout.java
--- a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/ApplicationLayout.java
+++ b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/ApplicationLayout.java
@@ -31,11 +31,11 @@
 /**
  * Application directory layout.
  */
 public final class ApplicationLayout implements PathGroup.Facade<ApplicationLayout> {
     enum PathRole {
-        RUNTIME, APP, LAUNCHERS, DESKTOP, APP_MODS, DLLS
+        RUNTIME, APP, LAUNCHERS, DESKTOP, APP_MODS, DLLS, RELEASE
     }
 
     ApplicationLayout(Map<Object, Path> paths) {
         data = new PathGroup(paths);
     }
@@ -94,40 +94,50 @@
      */
     public Path destktopIntegrationDirectory() {
         return pathGroup().getPath(PathRole.DESKTOP);
     }
 
+    /**
+     * Path to release file in the Java runtime directory.
+     */
+    public Path runtimeRelease() {
+        return pathGroup().getPath(PathRole.RELEASE);
+    }
+
     static ApplicationLayout linuxAppImage() {
         return new ApplicationLayout(Map.of(
                 PathRole.LAUNCHERS, Path.of("bin"),
                 PathRole.APP, Path.of("lib/app"),
                 PathRole.RUNTIME, Path.of("lib/runtime"),
                 PathRole.DESKTOP, Path.of("lib"),
                 PathRole.DLLS, Path.of("lib"),
-                PathRole.APP_MODS, Path.of("lib/app/mods")
+                PathRole.APP_MODS, Path.of("lib/app/mods"),
+                PathRole.RELEASE, Path.of("lib/runtime/release")
         ));
     }
 
     static ApplicationLayout windowsAppImage() {
         return new ApplicationLayout(Map.of(
                 PathRole.LAUNCHERS, Path.of(""),
                 PathRole.APP, Path.of("app"),
                 PathRole.RUNTIME, Path.of("runtime"),
                 PathRole.DESKTOP, Path.of(""),
                 PathRole.DLLS, Path.of(""),
-                PathRole.APP_MODS, Path.of("app/mods")
+                PathRole.APP_MODS, Path.of("app/mods"),
+                PathRole.RELEASE, Path.of("runtime/release")
         ));
     }
 
     static ApplicationLayout macAppImage() {
         return new ApplicationLayout(Map.of(
                 PathRole.LAUNCHERS, Path.of("Contents/MacOS"),
                 PathRole.APP, Path.of("Contents/app"),
                 PathRole.RUNTIME, Path.of("Contents/runtime"),
                 PathRole.DESKTOP, Path.of("Contents/Resources"),
                 PathRole.DLLS, Path.of("Contents/MacOS"),
-                PathRole.APP_MODS, Path.of("Contents/app/mods")
+                PathRole.APP_MODS, Path.of("Contents/app/mods"),
+                PathRole.RELEASE, Path.of("Contents/runtime/Contents/Home/release")
         ));
     }
 
     public static ApplicationLayout platformAppImage() {
         if (Platform.isWindows()) {
