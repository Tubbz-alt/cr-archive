diff a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/JLinkBundlerHelper.java b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/JLinkBundlerHelper.java
--- a/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/JLinkBundlerHelper.java
+++ b/src/jdk.incubator.jpackage/share/classes/jdk/incubator/jpackage/internal/JLinkBundlerHelper.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -143,10 +143,12 @@
                 StandardBundlerParam.MODULE_PATH.fetchFrom(params);
         Set<String> addModules =
                 StandardBundlerParam.ADD_MODULES.fetchFrom(params);
         Set<String> limitModules =
                 StandardBundlerParam.LIMIT_MODULES.fetchFrom(params);
+        List<String> options =
+                StandardBundlerParam.JLINK_OPTIONS.fetchFrom(params);
         Path outputDir = imageBuilder.getRuntimeRoot();
         File mainJar = getMainJar(params);
         ModFile.ModType mainJarType = ModFile.ModType.Unknown;
 
         if (mainJar != null) {
@@ -179,11 +181,11 @@
         if (mainModule != null) {
             modules.add(mainModule);
         }
 
         runJLink(outputDir, modulePath, modules, limitModules,
-                new HashMap<String,String>(), bindServices);
+                options, bindServices);
 
         imageBuilder.prepareApplicationFiles(params);
     }
 
 
@@ -314,11 +316,11 @@
         }
     }
 
     private static void runJLink(Path output, List<Path> modulePath,
             Set<String> modules, Set<String> limitModules,
-            HashMap<String, String> user, boolean bindServices)
+            List<String> options, boolean bindServices)
             throws PackagerException {
 
         // This is just to ensure jlink is given a non-existant directory
         // The passed in output path should be non-existant or empty directory
         try {
@@ -340,24 +342,23 @@
         }
         if (limitModules != null && !limitModules.isEmpty()) {
             args.add("--limit-modules");
             args.add(getStringList(limitModules));
         }
-        if (user != null && !user.isEmpty()) {
-            for (Map.Entry<String, String> entry : user.entrySet()) {
-                args.add(entry.getKey());
-                args.add(entry.getValue());
-            }
-        } else {
-            args.add("--strip-native-commands");
-            args.add("--strip-debug");
-            args.add("--no-man-pages");
-            args.add("--no-header-files");
-            if (bindServices) {
-                args.add("--bind-services");
+        if (options != null) {
+            for (String option : options) {
+                if (option.startsWith("--output") ||
+                        option.startsWith("--add-modules") ||
+                        option.startsWith("--module-path")) {
+                    throw new PackagerException("error.blocked.option", option);
+                }
+                args.add(option);
             }
         }
+        if (bindServices) {
+            args.add("--bind-services");
+        }
 
         StringWriter writer = new StringWriter();
         PrintWriter pw = new PrintWriter(writer);
 
         Log.verbose("jlink arguments: " + args);
