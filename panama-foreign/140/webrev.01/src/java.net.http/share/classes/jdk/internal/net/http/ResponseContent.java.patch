diff a/src/java.net.http/share/classes/jdk/internal/net/http/ResponseContent.java b/src/java.net.http/share/classes/jdk/internal/net/http/ResponseContent.java
--- a/src/java.net.http/share/classes/jdk/internal/net/http/ResponseContent.java
+++ b/src/java.net.http/share/classes/jdk/internal/net/http/ResponseContent.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -123,10 +123,11 @@
         }
     }
 
 
     static enum ChunkState {READING_LENGTH, READING_DATA, DONE}
+    static final int MAX_CHUNK_HEADER_SIZE = 2050;
     class ChunkedBodyParser implements BodyParser {
         final ByteBuffer READMORE = Utils.EMPTY_BYTEBUFFER;
         final Consumer<Throwable> onComplete;
         final Logger debug = Utils.getDebugLogger(this::dbgString, Utils.DEBUG);
         final String dbgTag = ResponseContent.this.dbgTag + "/ChunkedBodyParser";
@@ -134,10 +135,12 @@
         volatile Throwable closedExceptionally;
         volatile int partialChunklen = 0; // partially read chunk len
         volatile int chunklen = -1;  // number of bytes in chunk
         volatile int bytesremaining;  // number of bytes in chunk left to be read incl CRLF
         volatile boolean cr = false;  // tryReadChunkLength has found CR
+        volatile int chunkext = 0;    // number of bytes already read in the chunk extension
+        volatile int digits = 0;      // number of chunkLength bytes already read
         volatile int bytesToConsume;  // number of bytes that still need to be consumed before proceeding
         volatile ChunkState state = ChunkState.READING_LENGTH; // current state
         volatile AbstractSubscription sub;
         ChunkedBodyParser(Consumer<Throwable> onComplete) {
             this.onComplete = onComplete;
@@ -145,10 +148,30 @@
 
         String dbgString() {
             return dbgTag;
         }
 
+        // best effort - we're assuming UTF-8 text and breaks at character boundaries
+        // for this debug output. Not called.
+        private void debugBuffer(ByteBuffer b) {
+            if (!debug.on()) return;
+            ByteBuffer printable = b.asReadOnlyBuffer();
+            byte[] bytes = new byte[printable.limit() - printable.position()];
+            printable.get(bytes, 0, bytes.length);
+            String msg = "============== accepted ==================\n";
+            try {
+                var str = new String(bytes, "UTF-8");
+                msg += str;
+            } catch (Exception x) {
+                msg += x;
+                x.printStackTrace();
+            }
+            msg += "\n==========================================\n";
+            debug.log(msg);
+
+        }
+
         @Override
         public void onSubscribe(AbstractSubscription sub) {
             if (debug.on())
                 debug.log("onSubscribe: "  + pusher.getClass().getName());
             pusher.onSubscribe(this.sub = sub);
@@ -156,18 +179,18 @@
 
         @Override
         public String currentStateMessage() {
             return format("chunked transfer encoding, state: %s", state);
         }
-
         @Override
         public void accept(ByteBuffer b) {
             if (closedExceptionally != null) {
                 if (debug.on())
                     debug.log("already closed: " + closedExceptionally);
                 return;
             }
+            // debugBuffer(b);
             boolean completed = false;
             try {
                 List<ByteBuffer> out = new ArrayList<>();
                 do {
                     if (tryPushOneHunk(b, out))  {
@@ -219,23 +242,51 @@
         // of chunk on return. chunklen includes the CR LF at end of chunk
         // returns -1 if needs more bytes
         private int tryReadChunkLen(ByteBuffer chunkbuf) throws IOException {
             assert state == ChunkState.READING_LENGTH;
             while (chunkbuf.hasRemaining()) {
+                if (chunkext + digits >= MAX_CHUNK_HEADER_SIZE) {
+                    throw new IOException("Chunk header size too long: " + (chunkext + digits));
+                }
                 int c = chunkbuf.get();
                 if (cr) {
                     if (c == LF) {
                         return partialChunklen;
                     } else {
                         throw new IOException("invalid chunk header");
                     }
                 }
                 if (c == CR) {
                     cr = true;
+                    if (digits == 0 && debug.on()) {
+                        debug.log("tryReadChunkLen: invalid chunk header? No digits in chunkLen?");
+                    }
+                } else if (cr == false && chunkext > 0) {
+                    // we have seen a non digit character after the chunk length.
+                    // skip anything until CR is found.
+                    chunkext++;
+                    if (debug.on()) {
+                        debug.log("tryReadChunkLen: More extraneous character after chunk length: " + c);
+                    }
                 } else {
                     int digit = toDigit(c);
-                    partialChunklen = partialChunklen * 16 + digit;
+                    if (digit < 0) {
+                        if (digits > 0) {
+                            // first non-digit character after chunk length.
+                            // skip anything until CR is found.
+                            chunkext++;
+                            if (debug.on()) {
+                                debug.log("tryReadChunkLen: Extraneous character after chunk length: " + c);
+                            }
+                        } else {
+                            // there should be at list one digit in chunk length
+                            throw new IOException("Illegal character in chunk size: " + c);
+                        }
+                    } else {
+                        digits++;
+                        partialChunklen = partialChunklen * 16 + digit;
+                    }
                 }
             }
             return -1;
         }
 
@@ -284,10 +335,11 @@
             if (st == ChunkState.READING_LENGTH && chunklen == -1) {
                 if (debug.on()) debug.log(() ->  "Trying to read chunk len"
                         + " (remaining in buffer:"+chunk.remaining()+")");
                 int clen = chunklen = tryReadChunkLen(chunk);
                 if (clen == -1) return READMORE;
+                digits = chunkext = 0;
                 if (debug.on()) debug.log("Got chunk len %d", clen);
                 cr = false; partialChunklen = 0;
                 unfulfilled = bytesremaining =  clen;
                 if (clen == 0) toconsume = bytesToConsume = 2; // that was the last chunk
                 else st = state = ChunkState.READING_DATA; // read the data
@@ -352,10 +404,11 @@
                     // we're done for this chunk! reset all states and
                     // prepare to read the next chunk.
                     chunklen = -1;
                     partialChunklen = 0;
                     cr = false;
+                    digits = chunkext = 0;
                     state = ChunkState.READING_LENGTH;
                     if (debug.on()) debug.log("Ready to read next chunk");
                 }
             }
             if (returnBuffer == READMORE) {
@@ -393,11 +446,11 @@
                 return b - 0x41 + 10;
             }
             if (b >= 0x61 && b <= 0x66) {
                 return b - 0x61 + 10;
             }
-            throw new IOException("Invalid chunk header byte " + b);
+            return -1;
         }
 
     }
 
     class UnknownLengthBodyParser implements BodyParser {
