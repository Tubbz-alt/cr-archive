diff a/test/hotspot/jtreg/compiler/codecache/CheckSegmentedCodeCache.java b/test/hotspot/jtreg/compiler/codecache/CheckSegmentedCodeCache.java
--- a/test/hotspot/jtreg/compiler/codecache/CheckSegmentedCodeCache.java
+++ b/test/hotspot/jtreg/compiler/codecache/CheckSegmentedCodeCache.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -29,11 +29,10 @@
  * @modules java.base/jdk.internal.misc
  *          java.management
  *
  * @build sun.hotspot.WhiteBox
  * @run driver ClassFileInstaller sun.hotspot.WhiteBox
- *                                sun.hotspot.WhiteBox$WhiteBoxPermission
  * @run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions
  *                   -XX:+WhiteBoxAPI
  *                   compiler.codecache.CheckSegmentedCodeCache
  */
 
@@ -90,70 +89,81 @@
     public static void main(String[] args) throws Exception {
         ProcessBuilder pb;
 
         // Disabled with ReservedCodeCacheSize < 240MB
         pb = ProcessTools.createJavaProcessBuilder("-XX:ReservedCodeCacheSize=239m",
-                                                   "-XX:+PrintCodeCache", "-version");
+                                                   "-XX:+PrintCodeCache",
+                                                   "-version");
         verifySegmentedCodeCache(pb, false);
 
         // Disabled without TieredCompilation
         pb = ProcessTools.createJavaProcessBuilder("-XX:-TieredCompilation",
-                                                   "-XX:+PrintCodeCache", "-version");
+                                                   "-XX:+PrintCodeCache",
+                                                   "-version");
         verifySegmentedCodeCache(pb, false);
 
         // Enabled with TieredCompilation and ReservedCodeCacheSize >= 240MB
         pb = ProcessTools.createJavaProcessBuilder("-XX:+TieredCompilation",
                                                    "-XX:ReservedCodeCacheSize=240m",
-                                                   "-XX:+PrintCodeCache", "-version");
+                                                   "-XX:+PrintCodeCache",
+                                                   "-version");
         verifySegmentedCodeCache(pb, true);
         pb = ProcessTools.createJavaProcessBuilder("-XX:+TieredCompilation",
                                                    "-XX:ReservedCodeCacheSize=400m",
-                                                   "-XX:+PrintCodeCache", "-version");
+                                                   "-XX:+PrintCodeCache",
+                                                   "-version");
         verifySegmentedCodeCache(pb, true);
 
         // Always enabled if SegmentedCodeCache is set
         pb = ProcessTools.createJavaProcessBuilder("-XX:+SegmentedCodeCache",
                                                    "-XX:-TieredCompilation",
                                                    "-XX:ReservedCodeCacheSize=239m",
-                                                   "-XX:+PrintCodeCache", "-version");
+                                                   "-XX:+PrintCodeCache",
+                                                   "-version");
         verifySegmentedCodeCache(pb, true);
 
         // The profiled and non-profiled code heaps should not be available in
         // interpreter-only mode
         pb = ProcessTools.createJavaProcessBuilder("-XX:+SegmentedCodeCache",
                                                    "-Xint",
-                                                   "-XX:+PrintCodeCache", "-version");
+                                                   "-XX:+PrintCodeCache",
+                                                   "-version");
         verifyCodeHeapNotExists(pb, PROFILED, NON_PROFILED);
 
         // If we stop compilation at CompLevel_none or CompLevel_simple we
         // don't need a profiled code heap.
         pb = ProcessTools.createJavaProcessBuilder("-XX:+SegmentedCodeCache",
                                                    "-XX:TieredStopAtLevel=0",
-                                                   "-XX:+PrintCodeCache", "-version");
+                                                   "-XX:+PrintCodeCache",
+                                                   "-version");
         verifyCodeHeapNotExists(pb, PROFILED);
         pb = ProcessTools.createJavaProcessBuilder("-XX:+SegmentedCodeCache",
                                                    "-XX:TieredStopAtLevel=1",
-                                                   "-XX:+PrintCodeCache", "-version");
+                                                   "-XX:+PrintCodeCache",
+                                                   "-version");
         verifyCodeHeapNotExists(pb, PROFILED);
 
         // Fails with too small non-nmethod code heap size
-        pb = ProcessTools.createJavaProcessBuilder("-XX:NonNMethodCodeHeapSize=100K");
+        pb = ProcessTools.createJavaProcessBuilder("-XX:NonNMethodCodeHeapSize=100K",
+                                                   "-version");
         failsWith(pb, "Invalid NonNMethodCodeHeapSize");
 
         // Fails if code heap sizes do not add up
         pb = ProcessTools.createJavaProcessBuilder("-XX:+SegmentedCodeCache",
                                                    "-XX:ReservedCodeCacheSize=10M",
                                                    "-XX:NonNMethodCodeHeapSize=5M",
                                                    "-XX:ProfiledCodeHeapSize=5M",
-                                                   "-XX:NonProfiledCodeHeapSize=5M");
+                                                   "-XX:NonProfiledCodeHeapSize=5M",
+                                                   "-version");
         failsWith(pb, "Invalid code heap sizes");
 
         // Fails if not enough space for VM internal code
         long minUseSpace = WHITE_BOX.getUintxVMFlag("CodeCacheMinimumUseSpace");
         // minimum size: CodeCacheMinimumUseSpace DEBUG_ONLY(* 3)
         long minSize = (Platform.isDebugBuild() ? 3 : 1) * minUseSpace;
         pb = ProcessTools.createJavaProcessBuilder("-XX:+SegmentedCodeCache",
                                                    "-XX:ReservedCodeCacheSize=" + minSize,
-                                                   "-XX:InitialCodeCacheSize=100K");
+                                                   "-XX:InitialCodeCacheSize=100K",
+                                                   "-version");
         failsWith(pb, "Not enough space in non-nmethod code heap to run VM");
     }
 }
