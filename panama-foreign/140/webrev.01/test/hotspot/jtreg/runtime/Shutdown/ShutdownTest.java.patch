diff a/test/hotspot/jtreg/runtime/Shutdown/ShutdownTest.java b/test/hotspot/jtreg/runtime/Shutdown/ShutdownTest.java
--- a/test/hotspot/jtreg/runtime/Shutdown/ShutdownTest.java
+++ b/test/hotspot/jtreg/runtime/Shutdown/ShutdownTest.java
@@ -35,13 +35,10 @@
 // the threads list.  This fix is still valid.  This code requires Heap_lock be acquired
 // without a safepoint check at exit.
 
 import jdk.test.lib.process.OutputAnalyzer;
 import jdk.test.lib.process.ProcessTools;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
 
 public class ShutdownTest {
    Object[] obj;
 
    ShutdownTest() {
@@ -65,27 +62,22 @@
            st.start();
          }
        }
     }
 
-    private static void startVM(List<String> options) throws Throwable {
+    private static void startVM(String... options) throws Throwable {
         // Combine VM flags given from command-line and your additional options
-        OutputAnalyzer output = ProcessTools.executeTestJvm(options.toArray(new String[options.size()]));
+        OutputAnalyzer output = ProcessTools.executeTestJvm(options);
         output.shouldContain("- ShutdownTest -");
         output.shouldHaveExitValue(0);
 
     }
 
     public static void main(String[] args) throws Throwable {
-        List<String> options = new ArrayList<>();
-
         // To reproduce original bug you may need this option: "-Xmx2500k",
-        Collections.addAll(options,
-                "-XX:+UnlockDiagnosticVMOptions",
-                "-XX:+VerifyBeforeExit");
-        options.add(ShutdownTestThread.class.getName());
-
         for (int iteration = 0; iteration < 5; ++iteration) {
-            startVM(options);
+            startVM("-XX:+UnlockDiagnosticVMOptions",
+                    "-XX:+VerifyBeforeExit",
+                    ShutdownTestThread.class.getName());
         }
     }
 }
