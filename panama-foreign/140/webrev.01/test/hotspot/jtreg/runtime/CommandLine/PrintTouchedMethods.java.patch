diff a/test/hotspot/jtreg/runtime/CommandLine/PrintTouchedMethods.java b/test/hotspot/jtreg/runtime/CommandLine/PrintTouchedMethods.java
--- a/test/hotspot/jtreg/runtime/CommandLine/PrintTouchedMethods.java
+++ b/test/hotspot/jtreg/runtime/CommandLine/PrintTouchedMethods.java
@@ -38,20 +38,26 @@
 import jdk.test.lib.JDKToolFinder;
 
 public class PrintTouchedMethods {
 
     public static void main(String args[]) throws Exception {
-      String[] javaArgs1 = {"-XX:-UnlockDiagnosticVMOptions", "-XX:+LogTouchedMethods", "-XX:+PrintTouchedMethodsAtExit", "TestLogTouchedMethods"};
-      ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(javaArgs1);
+      ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(
+          "-XX:-UnlockDiagnosticVMOptions",
+          "-XX:+LogTouchedMethods",
+          "-XX:+PrintTouchedMethodsAtExit",
+          "TestLogTouchedMethods");
 
       // UnlockDiagnostic turned off, should fail
       OutputAnalyzer output = new OutputAnalyzer(pb.start());
       output.shouldContain("Error: VM option 'LogTouchedMethods' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.");
       output.shouldContain("Error: Could not create the Java Virtual Machine.");
 
-      String[] javaArgs2 = {"-XX:+UnlockDiagnosticVMOptions", "-XX:+LogTouchedMethods", "-XX:+PrintTouchedMethodsAtExit", "TestLogTouchedMethods"};
-      pb = ProcessTools.createJavaProcessBuilder(javaArgs2);
+      pb = ProcessTools.createJavaProcessBuilder(
+          "-XX:+UnlockDiagnosticVMOptions",
+          "-XX:+LogTouchedMethods",
+          "-XX:+PrintTouchedMethodsAtExit",
+          "TestLogTouchedMethods");
       output = new OutputAnalyzer(pb.start());
       // check order:
       // 1 "# Method::print_touched_methods version 1" is the first in first line
       // 2 should contain TestLogMethods.methodA:()V
       // 3 should not contain TestLogMethods.methodB:()V
@@ -69,12 +75,16 @@
 
       output.shouldContain("TestLogTouchedMethods.methodA:()V");
       output.shouldNotContain("TestLogTouchedMethods.methodB:()V");
       output.shouldHaveExitValue(0);
 
-      String[] javaArgs3 = {"-XX:+UnlockDiagnosticVMOptions", "-Xint", "-XX:+LogTouchedMethods", "-XX:+PrintTouchedMethodsAtExit", "TestLogTouchedMethods"};
-      pb = ProcessTools.createJavaProcessBuilder(javaArgs3);
+      pb = ProcessTools.createJavaProcessBuilder(
+          "-XX:+UnlockDiagnosticVMOptions",
+          "-Xint",
+          "-XX:+LogTouchedMethods",
+          "-XX:+PrintTouchedMethodsAtExit",
+          "TestLogTouchedMethods");
       output = new OutputAnalyzer(pb.start());
       lines = output.asLines();
 
       if (lines.size() < 1) {
         throw new Exception("Empty output");
@@ -87,12 +97,17 @@
 
       output.shouldContain("TestLogTouchedMethods.methodA:()V");
       output.shouldNotContain("TestLogTouchedMethods.methodB:()V");
       output.shouldHaveExitValue(0);
 
-      String[] javaArgs4 = {"-XX:+UnlockDiagnosticVMOptions", "-Xint", "-XX:+LogTouchedMethods", "-XX:+PrintTouchedMethodsAtExit", "-XX:-TieredCompilation", "TestLogTouchedMethods"};
-      pb = ProcessTools.createJavaProcessBuilder(javaArgs4);
+      pb = ProcessTools.createJavaProcessBuilder(
+          "-XX:+UnlockDiagnosticVMOptions",
+          "-Xint",
+          "-XX:+LogTouchedMethods",
+          "-XX:+PrintTouchedMethodsAtExit",
+          "-XX:-TieredCompilation",
+          "TestLogTouchedMethods");
       output = new OutputAnalyzer(pb.start());
       lines = output.asLines();
 
       if (lines.size() < 1) {
         throw new Exception("Empty output");
