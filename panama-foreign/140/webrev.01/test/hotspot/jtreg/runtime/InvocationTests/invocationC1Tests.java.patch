diff a/test/hotspot/jtreg/runtime/InvocationTests/invocationC1Tests.java b/test/hotspot/jtreg/runtime/InvocationTests/invocationC1Tests.java
--- a/test/hotspot/jtreg/runtime/InvocationTests/invocationC1Tests.java
+++ b/test/hotspot/jtreg/runtime/InvocationTests/invocationC1Tests.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -34,20 +34,20 @@
  *          shared/ByteArrayClassLoader.java shared/Checker.java shared/GenericClassGenerator.java
  * @compile invokespecial/Checker.java invokespecial/ClassGenerator.java invokespecial/Generator.java
  *          invokevirtual/Checker.java invokevirtual/ClassGenerator.java invokevirtual/Generator.java
  *          invokeinterface/Checker.java invokeinterface/ClassGenerator.java invokeinterface/Generator.java
  *
- * @run main/othervm/timeout=1800 invocationC1Tests
+ * @run driver/timeout=1800 invocationC1Tests
  */
 
 import jdk.test.lib.process.ProcessTools;
 import jdk.test.lib.process.OutputAnalyzer;
 import jdk.test.lib.compiler.InMemoryJavaCompiler;
 
 public class invocationC1Tests {
 
-    public static void runTest(String whichTests, String classFileVersion) throws Exception {
+    public static void runTest(String whichTests, String classFileVersion) throws Throwable {
         System.out.println("\nC1 invocation tests, Tests: " + whichTests +
                            ", class file version: " + classFileVersion);
         ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(false, "-Xmx128M",
             "-Xcomp", "-XX:TieredStopAtLevel=1",
             "--add-exports", "java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED",
@@ -64,20 +64,19 @@
                 " means that an AbstractMethodError exception was thrown but the test" +
                 " case expected method C.m to be invoked.");
             System.out.println(
                 "\nAlso note that passing --dump to invoke*.Generator will" +
                 " dump the generated classes (for debugging purposes).\n");
-            System.exit(1);
+
+            throw e;
         }
     }
 
     public static void main(String args[]) throws Throwable {
         // Get current major class file version and test with it.
         byte klassbuf[] = InMemoryJavaCompiler.compile("blah", "public class blah { }");
         int major_version = klassbuf[6] << 8 | klassbuf[7];
         runTest("invokespecial.Generator", String.valueOf(major_version));
         runTest("invokeinterface.Generator", String.valueOf(major_version));
-
-      // Uncomment this test once JDK-8226588 is fixed
-        // runTest("invokevirtual.Generator", String.valueOf(major_version));
+        runTest("invokevirtual.Generator", String.valueOf(major_version));
     }
 }
