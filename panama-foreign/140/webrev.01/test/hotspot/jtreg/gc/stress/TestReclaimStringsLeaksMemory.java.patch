diff a/test/hotspot/jtreg/gc/stress/TestReclaimStringsLeaksMemory.java b/test/hotspot/jtreg/gc/stress/TestReclaimStringsLeaksMemory.java
--- a/test/hotspot/jtreg/gc/stress/TestReclaimStringsLeaksMemory.java
+++ b/test/hotspot/jtreg/gc/stress/TestReclaimStringsLeaksMemory.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -29,14 +29,14 @@
  * @summary Ensure that during a Full GC interned string memory is reclaimed completely.
  * @requires vm.gc=="null" & !vm.graal.enabled & !vm.debug
  * @key gc
  * @library /test/lib
  * @modules java.base/jdk.internal.misc
- * @run main/othervm gc.stress.TestReclaimStringsLeaksMemory
- * @run main/othervm gc.stress.TestReclaimStringsLeaksMemory -XX:+UseSerialGC
- * @run main/othervm gc.stress.TestReclaimStringsLeaksMemory -XX:+UseParallelGC
- * @run main/othervm gc.stress.TestReclaimStringsLeaksMemory -XX:+UseG1GC
+ * @run driver gc.stress.TestReclaimStringsLeaksMemory
+ * @run driver gc.stress.TestReclaimStringsLeaksMemory -XX:+UseSerialGC
+ * @run driver gc.stress.TestReclaimStringsLeaksMemory -XX:+UseParallelGC
+ * @run driver gc.stress.TestReclaimStringsLeaksMemory -XX:+UseG1GC
  */
 
 import java.util.Arrays;
 import java.util.ArrayList;
 import java.util.regex.Pattern;
@@ -59,13 +59,12 @@
                                                                    "-XX:NativeMemoryTracking=summary",
                                                                    "-XX:+UnlockDiagnosticVMOptions",
                                                                    "-XX:+PrintNMTStatistics" ));
         baseargs.addAll(Arrays.asList(args));
         baseargs.add(GCTest.class.getName());
-        ProcessBuilder pb_default =
-            ProcessTools.createJavaProcessBuilder(baseargs.toArray(new String[] {}));
-        verifySymbolMemoryUsageNotTooHigh(new OutputAnalyzer(pb_default.start()));
+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(baseargs);
+        verifySymbolMemoryUsageNotTooHigh(new OutputAnalyzer(pb.start()));
     }
 
     private static void verifySymbolMemoryUsageNotTooHigh(OutputAnalyzer output) throws Exception {
         String stdout = output.getStdout();
         System.out.println(stdout);
