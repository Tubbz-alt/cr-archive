diff a/test/hotspot/jtreg/gc/arguments/TestSmallInitialHeapWithLargePageAndNUMA.java b/test/hotspot/jtreg/gc/arguments/TestSmallInitialHeapWithLargePageAndNUMA.java
--- a/test/hotspot/jtreg/gc/arguments/TestSmallInitialHeapWithLargePageAndNUMA.java
+++ b/test/hotspot/jtreg/gc/arguments/TestSmallInitialHeapWithLargePageAndNUMA.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -39,10 +39,11 @@
 */
 
 import jdk.test.lib.process.ProcessTools;
 import jdk.test.lib.process.OutputAnalyzer;
 import sun.hotspot.WhiteBox;
+import jtreg.SkippedException;
 
 public class TestSmallInitialHeapWithLargePageAndNUMA {
 
   private static final String MSG_EXIT_TOO_SMALL_HEAP = "Failed initializing NUMA with large pages. Too small heap size";
   private static final String MSG_GC_TRIGGERED_BEFORE_INIT = "GC triggered before VM initialization completed.";
@@ -58,25 +59,26 @@
     // this will free the memory which Linux does not support.
     // Assume the minimum NUMA node as 2.
     long initHeap = heapAlignment;
     long maxHeap = heapAlignment * 2;
 
-    String[] vmArgs = {"-XX:+UseParallelGC",
-                       "-Xms" + String.valueOf(initHeap),
-                       "-Xmx" + String.valueOf(maxHeap),
-                       "-XX:+UseNUMA",
-                       "-XX:+UseHugeTLBFS",
-                       "-XX:+PrintFlagsFinal",
-                       "-version"};
-
-    ProcessBuilder pb_enabled = GCArguments.createJavaProcessBuilder(vmArgs);
+    ProcessBuilder pb_enabled = GCArguments.createJavaProcessBuilder(
+        "-XX:+UseParallelGC",
+        "-Xms" + String.valueOf(initHeap),
+        "-Xmx" + String.valueOf(maxHeap),
+        "-XX:+UseNUMA",
+        "-XX:+UseHugeTLBFS",
+        "-XX:+PrintFlagsFinal",
+        "-version");
     OutputAnalyzer analyzer = new OutputAnalyzer(pb_enabled.start());
 
     if (largePageOrNumaEnabled(analyzer)) {
       // We reach here, if both NUMA and HugeTLB are supported.
       // However final flags will not be printed as NUMA initialization will be failed.
       checkAnalyzerValues(analyzer, 1, MSG_EXIT_TOO_SMALL_HEAP);
+    } else {
+      throw new SkippedException("either NUMA or HugeTLB is not supported");
     }
   }
 
   // If both NUMA and large pages are enabled, VM will exit during NUMA initialization
   // under the small heap configuration. So final flags will not be printed.
