diff a/test/hotspot/jtreg/gc/arguments/TestParallelGCThreads.java b/test/hotspot/jtreg/gc/arguments/TestParallelGCThreads.java
--- a/test/hotspot/jtreg/gc/arguments/TestParallelGCThreads.java
+++ b/test/hotspot/jtreg/gc/arguments/TestParallelGCThreads.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -31,11 +31,11 @@
  * @library /test/lib
  * @library /
  * @modules java.base/jdk.internal.misc
  *          java.management
  * @build sun.hotspot.WhiteBox
- * @run driver ClassFileInstaller sun.hotspot.WhiteBox sun.hotspot.WhiteBox$WhiteBoxPermission
+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox
  * @run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.arguments.TestParallelGCThreads
  */
 
 import java.util.ArrayList;
 import java.util.List;
@@ -93,36 +93,44 @@
     if (supportedGC.isEmpty()) {
       throw new SkippedException("Skipping test because none of G1/Parallel is supported.");
     }
 
     for (String gc : supportedGC) {
-
       // Make sure the VM does not allow ParallelGCThreads set to 0
-      String[] flags = new String[] {"-XX:+Use" + gc + "GC", "-XX:ParallelGCThreads=0", "-XX:+PrintFlagsFinal", "-version"};
-      ProcessBuilder pb = GCArguments.createJavaProcessBuilder(flags);
+      ProcessBuilder pb = GCArguments.createJavaProcessBuilder(
+          "-XX:+Use" + gc + "GC",
+          "-XX:ParallelGCThreads=0",
+          "-XX:+PrintFlagsFinal",
+          "-version");
       OutputAnalyzer output = new OutputAnalyzer(pb.start());
       output.shouldHaveExitValue(1);
 
       // Do some basic testing to ensure the flag updates the count
       for (long i = 1; i <= 3; i++) {
-        flags = new String[] {"-XX:+Use" + gc + "GC", "-XX:ParallelGCThreads=" + i, "-XX:+PrintFlagsFinal", "-version"};
-        long count = getParallelGCThreadCount(flags);
+        long count = getParallelGCThreadCount(
+            "-XX:+Use" + gc + "GC",
+            "-XX:ParallelGCThreads=" + i,
+            "-XX:+PrintFlagsFinal",
+            "-version");
         Asserts.assertEQ(count, i, "Specifying ParallelGCThreads=" + i + " for " + gc + "GC does not set the thread count properly!");
       }
     }
 
     // 4294967295 == (unsigned int) -1
     // So setting ParallelGCThreads=4294967295 should give back 4294967295
     // and setting ParallelGCThreads=4294967296 should give back 0. (SerialGC is ok with ParallelGCThreads=0)
     for (long i = 4294967295L; i <= 4294967296L; i++) {
-      String[] flags = new String[] {"-XX:+UseSerialGC", "-XX:ParallelGCThreads=" + i, "-XX:+PrintFlagsFinal", "-version"};
-      long count = getParallelGCThreadCount(flags);
+      long count = getParallelGCThreadCount(
+          "-XX:+UseSerialGC",
+          "-XX:ParallelGCThreads=" + i,
+          "-XX:+PrintFlagsFinal",
+          "-version");
       Asserts.assertEQ(count, i % 4294967296L, "Specifying ParallelGCThreads=" + i + " does not set the thread count properly!");
     }
   }
 
-  public static long getParallelGCThreadCount(String flags[]) throws Exception {
+  public static long getParallelGCThreadCount(String... flags) throws Exception {
     ProcessBuilder pb = GCArguments.createJavaProcessBuilder(flags);
     OutputAnalyzer output = new OutputAnalyzer(pb.start());
     output.shouldHaveExitValue(0);
     String stdout = output.getStdout();
     return FlagsValue.getFlagLongValue("ParallelGCThreads", stdout);
