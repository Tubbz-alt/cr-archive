diff a/test/hotspot/jtreg/gc/nvdimm/TestAllocateOldGenAtError.java b/test/hotspot/jtreg/gc/nvdimm/TestAllocateOldGenAtError.java
--- a/test/hotspot/jtreg/gc/nvdimm/TestAllocateOldGenAtError.java
+++ b/test/hotspot/jtreg/gc/nvdimm/TestAllocateOldGenAtError.java
@@ -28,11 +28,11 @@
  * @summary Test to check correct handling of non-existent directory passed to AllocateOldGenAt option
  * @requires vm.gc=="null" & os.family != "aix"
  * @requires test.vm.gc.nvdimm
  * @library /test/lib
  * @modules java.base/jdk.internal.misc
- * @run main gc.nvdimm.TestAllocateOldGenAtError
+ * @run driver gc.nvdimm.TestAllocateOldGenAtError
  */
 
 import java.io.File;
 import jdk.test.lib.JDKToolFinder;
 import jdk.test.lib.process.ProcessTools;
@@ -40,33 +40,27 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.UUID;
 
 public class TestAllocateOldGenAtError {
-  private static ArrayList<String> commonOpts;
+  private static String[] commonFlags;
 
   public static void main(String args[]) throws Exception {
-    commonOpts = new ArrayList<>();
-
-    String testVmOptsStr = System.getProperty("test.java.opts");
-    if (!testVmOptsStr.isEmpty()) {
-      String[] testVmOpts = testVmOptsStr.split(" ");
-      Collections.addAll(commonOpts, testVmOpts);
-    }
     String test_dir = System.getProperty("test.dir", ".");
 
     File f = null;
     do {
       f = new File(test_dir, UUID.randomUUID().toString());
     } while(f.exists());
 
-    Collections.addAll(commonOpts, new String[] {"-XX:+UnlockExperimentalVMOptions",
-                                                 "-XX:AllocateOldGenAt=" + f.getName(),
-                                                 "-Xlog:gc+heap=info",
-                                                 "-Xmx32m",
-                                                 "-Xms32m",
-                                                 "-version"});
+    commonFlags = new String[] {
+        "-XX:+UnlockExperimentalVMOptions",
+        "-XX:AllocateOldGenAt=" + f.getName(),
+        "-Xlog:gc+heap=info",
+        "-Xmx32m",
+        "-Xms32m",
+        "-version"};
 
     testG1();
     testParallelOld();
   }
 
@@ -81,27 +75,22 @@
 
   }
 
   private static void testParallelOld() throws Exception {
     System.out.println("Testing Parallel GC");
+
     OutputAnalyzer output = runTest("-XX:+UseParallelGC");
+
     output.shouldContain("Error occurred during initialization of VM");
     output.shouldNotHaveExitValue(0);
   }
 
   private static OutputAnalyzer runTest(String... extraFlags) throws Exception {
-    ArrayList<String> testOpts = new ArrayList<>();
-    Collections.addAll(testOpts, commonOpts.toArray(new String[commonOpts.size()]));
-    Collections.addAll(testOpts, extraFlags);
-
-    System.out.print("Testing:\n" + JDKToolFinder.getJDKTool("java"));
-    for (int i = 0; i < testOpts.size(); i += 1) {
-      System.out.print(" " + testOpts.get(i));
-    }
-    System.out.println();
-
-    ProcessBuilder pb =
-      ProcessTools.createJavaProcessBuilder(testOpts.toArray(new String[testOpts.size()]));
+    ArrayList<String> flags = new ArrayList<>();
+    Collections.addAll(flags, commonFlags);
+    Collections.addAll(flags, extraFlags);
+
+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, flags);
     OutputAnalyzer output = new OutputAnalyzer(pb.start());
     return output;
   }
 }
