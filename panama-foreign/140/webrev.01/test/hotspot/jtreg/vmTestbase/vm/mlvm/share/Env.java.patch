diff a/test/hotspot/jtreg/vmTestbase/vm/mlvm/share/Env.java b/test/hotspot/jtreg/vmTestbase/vm/mlvm/share/Env.java
--- a/test/hotspot/jtreg/vmTestbase/vm/mlvm/share/Env.java
+++ b/test/hotspot/jtreg/vmTestbase/vm/mlvm/share/Env.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,10 +22,11 @@
  */
 
 package vm.mlvm.share;
 
 import java.util.Random;
+import jdk.test.lib.Utils;
 
 import nsk.share.ArgumentParser;
 import nsk.share.Log;
 import nsk.share.Log.TraceLevel;
 import nsk.share.test.LazyFormatString;
@@ -67,25 +68,23 @@
 
     //
     // RNG
     //
 
-    private static long _seed = new Random().nextLong();
-
-    public static void setRNGSeed(long seed) {
-        _seed = seed;
-    }
+    private static long _seed = Utils.SEED;
 
     private static volatile boolean _wasSeedPrinted = false;
 
     // Thread local variable containing each thread's ID
     private static final ThreadLocal<Random> _threadRNG =
         new ThreadLocal<Random>() {
             @Override protected Random initialValue() {
                 if ( ! _wasSeedPrinted ) {
                     _wasSeedPrinted = true;
                     traceImportant("RNG seed = " + _seed + " (0x" + Long.toHexString(_seed) + ")");
+                    // ensure we also print out how to change seed
+                    Utils.getRandomInstance();
                 }
 
                 long seed = _seed;
                 String name = Thread.currentThread().getName();
                 for ( int n = 0; n < name.length(); n++ )
