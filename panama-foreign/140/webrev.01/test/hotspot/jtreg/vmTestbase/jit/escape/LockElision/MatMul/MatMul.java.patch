diff a/test/hotspot/jtreg/vmTestbase/jit/escape/LockElision/MatMul/MatMul.java b/test/hotspot/jtreg/vmTestbase/jit/escape/LockElision/MatMul/MatMul.java
--- a/test/hotspot/jtreg/vmTestbase/jit/escape/LockElision/MatMul/MatMul.java
+++ b/test/hotspot/jtreg/vmTestbase/jit/escape/LockElision/MatMul/MatMul.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,10 +21,11 @@
  * questions.
  */
 
 /*
  * @test
+ * @key randomness
  *
  * @summary converted from VM Testbase jit/escape/LockElision/MatMul.
  * VM Testbase keywords: [jit, quick]
  * VM Testbase readme:
  * DESCRIPTION
@@ -53,16 +54,16 @@
 import java.util.concurrent.Executors;
 
 import nsk.share.Consts;
 import nsk.share.Log;
 import nsk.share.Pair;
-
 import nsk.share.test.StressOptions;
 import vm.share.options.Option;
 import vm.share.options.OptionSupport;
 import vm.share.options.Options;
 
+import jdk.test.lib.Utils;
 
 class MatMul {
 
     @Option(name = "dim", description = "dimension of matrices")
     int dim;
@@ -601,11 +602,11 @@
                 }
             }
             return true;
         }
 
-        private static Random random = new Random();
+        private static Random random = Utils.getRandomInstance();
 
         public static Matrix randomMatrix(int dim) {
             Matrix result = new Matrix(dim);
             for (int i = 0; i < dim; i++) {
                 for (int j = 0; j < dim; j++) {
