diff a/test/hotspot/jtreg/vmTestbase/ExecDriver.java b/test/hotspot/jtreg/vmTestbase/ExecDriver.java
--- a/test/hotspot/jtreg/vmTestbase/ExecDriver.java
+++ b/test/hotspot/jtreg/vmTestbase/ExecDriver.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -19,20 +19,20 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
-import jdk.test.lib.Platform;
-import jdk.test.lib.Utils;
-
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
 
 /**
  * Starts a new process to execute a command.
  * <p>Usage: --java|--cmd|--launcher <arg>+
  * <p>If {@code --cmd} flag is specified, the arguments are treated as
@@ -46,10 +46,14 @@
  * contains {@code jvm.so} in dynamic library path, and {@code test.class.path}
  * as CLASSPATH environment variable. Exit codes are checked as in
  * {@code --java}, i.e. 0 or 95 means pass.
  */
 public class ExecDriver {
+    // copied from jdk.test.lib.Utils.TEST_CLASS_PATH
+    private static final String TEST_CLASS_PATH = System.getProperty("test.class.path", ".");
+    // copied from jdk.test.lib.Utils.TEST_CLASS_PATH
+    private static final String TEST_JDK = System.getProperty("test.jdk");
     public static void main(String[] args) throws IOException, InterruptedException {
         boolean java = false;
         boolean launcher = false;
 
         String type = args[0];
@@ -66,11 +70,11 @@
                     count = 3;
                     args = new String[args.length + 2];
                 }
                 args[0] = javaBin();
                 args[1] = "-cp";
-                args[2] = Utils.TEST_CLASS_PATH;
+                args[2] = TEST_CLASS_PATH;
                 System.arraycopy(oldArgs, 1, args, count, oldArgs.length - 1);
                 java = true;
                 break;
             case "--launcher":
                 java = true;
@@ -82,11 +86,11 @@
                 throw new Error("unknown type: " + type);
         }
         // adding 'test.vm.opts' and 'test.java.opts'
         if (java) {
             String[] oldArgs = args;
-            String[] testJavaOpts = Utils.getTestJavaOpts();
+            String[] testJavaOpts = getTestJavaOpts();
             if (testJavaOpts.length > 0) {
                 args = new String[args.length + testJavaOpts.length];
                 // bin/java goes before options
                 args[0] = oldArgs[0];
                 // then external java options
@@ -99,14 +103,15 @@
         System.out.println("exec " + command);
 
         ProcessBuilder pb = new ProcessBuilder(args);
         // adding jvm.so to library path
         if (launcher) {
-            Path dir = Paths.get(Utils.TEST_JDK);
+            Path dir = Paths.get(TEST_JDK);
             String value;
-            String name = Platform.sharedLibraryPathVariableName();
-            if (Platform.isWindows()) {
+            String name = sharedLibraryPathVariableName();
+            // if (jdk.test.lib.Platform.isWindows()) {
+            if (System.getProperty("os.name").toLowerCase().startsWith("win")) {
                 value = dir.resolve("bin")
                            .resolve(variant())
                            .toAbsolutePath()
                            .toString();
                 value += File.pathSeparator;
@@ -123,11 +128,11 @@
             System.out.println("  with " + name + " = " +
                     pb.environment()
                       .merge(name, value, (x, y) -> y + File.pathSeparator + x));
             System.out.println("  with CLASSPATH = " +
                     pb.environment()
-                      .put("CLASSPATH", Utils.TEST_CLASS_PATH));
+                      .put("CLASSPATH", TEST_CLASS_PATH));
         }
         Process p = pb.start();
         // inheritIO does not work as expected for @run driver
         new Thread(() -> copy(p.getInputStream(), System.out)).start();
         new Thread(() -> copy(p.getErrorStream(), System.out)).start();
@@ -136,23 +141,56 @@
         if (exitCode != 0 && (!java || exitCode != 95)) {
             throw new AssertionError(command + " exit code is " + exitCode);
         }
     }
 
+    // copied from jdk.test.lib.Platform::sharedLibraryPathVariableName
+    private static String sharedLibraryPathVariableName() {
+        String osName = System.getProperty("os.name").toLowerCase();
+        if (osName.startsWith("win")) {
+            return "PATH";
+        } else if (osName.startsWith("mac")) {
+            return "DYLD_LIBRARY_PATH";
+        } else if (osName.startsWith("aix")) {
+            return "LIBPATH";
+        } else {
+            return "LD_LIBRARY_PATH";
+        }
+    }
+
+    // copied from jdk.test.lib.Utils::getTestJavaOpts()
+    private static String[] getTestJavaOpts() {
+        List<String> opts = new ArrayList<String>();
+        {
+            String v = System.getProperty("test.vm.opts", "").trim();
+            if (!v.isEmpty()) {
+                Collections.addAll(opts, v.split("\\s+"));
+            }
+        }
+        {
+            String v = System.getProperty("test.java.opts", "").trim();
+            if (!v.isEmpty()) {
+                Collections.addAll(opts, v.split("\\s+"));
+            }
+        }
+        return opts.toArray(new String[0]);
+    }
+
+    // copied jdk.test.lib.Platform::variant
     private static String variant() {
-        if (Platform.isServer()) {
+        String vmName = System.getProperty("java.vm.name");
+        if (vmName.endsWith(" Server VM")) {
             return "server";
-        } else if (Platform.isClient()) {
+        } else if (vmName.endsWith(" Client VM")) {
             return "client";
-        } else if (Platform.isMinimal()) {
+        } else if (vmName.endsWith(" Minimal VM")) {
             return "minimal";
         } else {
             throw new Error("TESTBUG: unsuppported vm variant");
         }
     }
 
-
     private static void copy(InputStream is, OutputStream os) {
         byte[] buffer = new byte[1024];
         int n;
         try (InputStream close = is) {
             while ((n = is.read(buffer)) != -1) {
@@ -163,11 +201,11 @@
             e.printStackTrace();
         }
     }
 
     private static String javaBin() {
-        return Paths.get(Utils.TEST_JDK)
+        return Paths.get(TEST_JDK)
                     .resolve("bin")
                     .resolve("java")
                     .toAbsolutePath()
                     .toString();
     }
