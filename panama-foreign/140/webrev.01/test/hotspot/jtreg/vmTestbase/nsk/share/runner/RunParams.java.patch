diff a/test/hotspot/jtreg/vmTestbase/nsk/share/runner/RunParams.java b/test/hotspot/jtreg/vmTestbase/nsk/share/runner/RunParams.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/share/runner/RunParams.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/share/runner/RunParams.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -24,17 +24,17 @@
 package nsk.share.runner;
 
 import nsk.share.log.Log;
 import nsk.share.test.StressOptions;
 import java.io.PrintStream;
+import jdk.test.lib.Utils;
 
 public class RunParams {
         private StressOptions stressOptions;
         private long sleepTime = 500;
         private long iterations = 0;
         private int numberOfThreads;
-        private long seed = System.currentTimeMillis();
         private boolean runGCThread = false;
         private boolean runFinThread = false;
         private boolean runMemDiagThread = false;
         private boolean runFinDiagThread = false;
         private boolean runAllDiagThread = false;
@@ -124,15 +124,13 @@
         public final void setNumberOfThreads(int numberOfThreads) {
                 this.numberOfThreads = numberOfThreads;
         }
 
         public final long getSeed() {
-                return seed;
-        }
-
-        public final void setSeed(long seed) {
-                this.seed = seed;
+                // ensure that seed got printed out
+                Utils.getRandomInstance();
+                return Utils.SEED;
         }
 
         public final boolean isRunGCThread() {
                 return runGCThread;
         }
@@ -210,12 +208,10 @@
                                 runMemDiagThread = false;
                         else if (args[i].equals("-Df1"))
                                 runFinDiagThread = true;
                         else if (args[i].equals("-Df"))
                                 runFinDiagThread = true;
-                        else if (args[i].equals("-s"))
-                                seed = Long.parseLong(args[++i]);
                         else if (args[i].equals("-t"))
                                 numberOfThreads = Integer.parseInt(args[++i]);
                         else if (args[i].equals("-it"))
                                 interruptThreads = true;
                         else if (args[i].equals("-iterations"))
@@ -231,22 +227,20 @@
                 stressOptions.printInfo(out);
                 out.println("Max memory: " + Runtime.getRuntime().maxMemory());
                 out.println("Sleep time: " + sleepTime);
                 out.println("Iterations: " + iterations);
                 out.println("Number of threads: " + numberOfThreads);
-                out.println("Seed: " + seed);
                 out.println("Run GC thread: " + runGCThread);
                 out.println("Run mem diag thread: " + runMemDiagThread);
                 out.println("Run forever: " + runForever);
         }
 
         public void logConfig(Log log) {
                 log.debug("Max memory: " + Runtime.getRuntime().maxMemory());
                 log.debug("Sleep time: " + sleepTime);
                 log.debug("Iterations: " + iterations);
                 log.debug("Number of threads: " + numberOfThreads);
-                log.debug("Seed: " + seed);
                 log.debug("Run GC thread: " + runGCThread);
                 log.debug("Run mem diag thread: " + runMemDiagThread);
                 log.debug("Run forever: " + runForever);
         }
 
