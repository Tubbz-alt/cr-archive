diff a/test/hotspot/jtreg/serviceability/logging/TestLogRotation.java b/test/hotspot/jtreg/serviceability/logging/TestLogRotation.java
--- a/test/hotspot/jtreg/serviceability/logging/TestLogRotation.java
+++ b/test/hotspot/jtreg/serviceability/logging/TestLogRotation.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -25,11 +25,11 @@
  * @test TestLogRotation.java
  * @summary test flags for log rotation
  * @library /test/lib
  * @modules java.base/jdk.internal.misc
  *          java.management
- * @run main/othervm/timeout=600 TestLogRotation
+ * @run driver/timeout=600 TestLogRotation
  *
  */
 import jdk.test.lib.process.ProcessTools;
 import java.io.File;
 import java.io.FilenameFilter;
@@ -69,27 +69,20 @@
             }
         }
     }
 
     public static void runTest(int numberOfFiles) throws Exception {
-
-        ArrayList<String> args = new ArrayList();
-        String[] logOpts = new String[]{
-            "-cp", System.getProperty("java.class.path"),
-            "-Xlog:gc=debug:" + logFileName + "::filesize=" + logFileSizeK + "k,filecount=" + numberOfFiles,
-            "-XX:-DisableExplicitGC", // to ensure that System.gc() works
-            "-Xmx128M"};
-        // System.getProperty("test.java.opts") is '' if no options is set
-        // need to skip such empty
-        String[] externalVMopts = System.getProperty("test.java.opts").length() == 0
-                ? new String[0]
-                : System.getProperty("test.java.opts").split(" ");
-        args.addAll(Arrays.asList(externalVMopts));
-        args.addAll(Arrays.asList(logOpts));
-        args.add(GCLoggingGenerator.class.getName());
-        args.add(String.valueOf(numberOfFiles * logFileSizeK * 1024));
-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args.toArray(new String[0]));
+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(
+                true,
+                "-cp", System.getProperty("java.class.path"),
+                "-Xlog:gc=debug:" + logFileName
+                        + "::filesize=" + logFileSizeK + "k"
+                        + ",filecount=" + numberOfFiles,
+                "-XX:-DisableExplicitGC", // to ensure that System.gc() works
+                "-Xmx128M",
+                GCLoggingGenerator.class.getName(),
+                String.valueOf(numberOfFiles * logFileSizeK * 1024));
         pb.redirectErrorStream(true);
         pb.redirectOutput(new File(GCLoggingGenerator.class.getName() + ".log"));
         Process process = pb.start();
         int result = process.waitFor();
         if (result != 0) {
