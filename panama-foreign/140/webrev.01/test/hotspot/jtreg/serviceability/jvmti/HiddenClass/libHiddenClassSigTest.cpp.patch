diff a/test/hotspot/jtreg/serviceability/jvmti/HiddenClass/libHiddenClassSigTest.cpp b/test/hotspot/jtreg/serviceability/jvmti/HiddenClass/libHiddenClassSigTest.cpp
--- a/test/hotspot/jtreg/serviceability/jvmti/HiddenClass/libHiddenClassSigTest.cpp
+++ b/test/hotspot/jtreg/serviceability/jvmti/HiddenClass/libHiddenClassSigTest.cpp
@@ -24,17 +24,18 @@
 #include <string.h>
 #include "jvmti.h"
 
 extern "C" {
 
-static const char* EXP_INTERF_SIG = "LP/Q/Test;";
+static const char* EXP_INTERF_SIG = "LP/Q/HCInterf;";
 static const char* SIG_START      = "LP/Q/HiddenClassSig";
 static const size_t SIG_START_LEN = strlen(SIG_START);
 static const int    ACC_INTERFACE = 0x0200; // Interface class modifiers bit
 
 static jvmtiEnv *jvmti = NULL;
 static jint class_load_count = 0;
+static jint class_prep_count = 0;
 static bool failed = false;
 
 #define LOG0(str)             { printf(str); fflush(stdout); }
 #define LOG1(str, arg)        { printf(str, arg); fflush(stdout); }
 #define LOG2(str, arg1, arg2) { printf(str, arg1, arg2); fflush(stdout); }
@@ -84,10 +85,11 @@
   jint class_modifiers = 0;
   char* sig = NULL;
   char* gsig = NULL;
   jvmtiError err;
 
+  // get class signature
   err = jvmti->GetClassSignature(klass, &sig, &gsig);
   CHECK_JVMTI_ERROR(jni, err, "check_hidden_class: Error in JVMTI GetClassSignature");
 
   LOG1("check_class_signature: class with sig: %s\n", sig);
   LOG1("check_class_signature: class with gsig: %s\n", gsig);
@@ -158,13 +160,15 @@
 
   for (int idx = 0; idx < count; idx++) {
     char* sig = NULL;
     jclass kls = loader_classes[idx];
 
+    // GetClassLoaderClasses should not return any hidden classes
     if (!is_hidden(jni, kls)) {
       continue;
     }
+    // get class signature
     err = jvmti->GetClassSignature(kls, &sig, NULL);
     CHECK_JVMTI_ERROR(jni, err, "check_hidden_class_loader: Error in JVMTI GetClassSignature");
 
     LOG1("check_hidden_class_loader: FAIL: JVMTI GetClassLoaderClasses returned hidden class: %s\n", sig);
     failed = true;
@@ -187,15 +191,15 @@
   if (count != 1) {
     LOG1("check_hidden_class_impl_interf: FAIL: implemented interfaces count: %d, expected to be 1\n", count);
     failed = true;
     return;
   }
-
-  // check the interface signature is matching the expected
+  // get interface signature
   err = jvmti->GetClassSignature(interfaces[0], &sig, NULL);
   CHECK_JVMTI_ERROR(jni, err, "check_hidden_class_impl_interf: Error in JVMTI GetClassSignature for implemented interface");
 
+  // check the interface signature is matching the expected
   if (strcmp(sig, EXP_INTERF_SIG) != 0) {
     LOG2("check_hidden_class_impl_interf: FAIL: implemented interface signature: %s, expected to be: %s\n",
            sig, EXP_INTERF_SIG);
     failed = true;
   }
@@ -234,50 +238,67 @@
   if (failed) return;
 
   LOG0("### Native agent: check_hidden_class_array finished\n");
 }
 
-/* Enable CLASS_LOAD event notification mode. */
-static void JNICALL
-VMInit(jvmtiEnv* jvmti, JNIEnv* jni, jthread thread) {
-  jvmtiError err;
-
-  printf("VMInit event: SIG_START: %s, SIG_START_LEN: %d\n", SIG_START, (int)SIG_START_LEN);
-  fflush(stdout);
-
-  err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_CLASS_LOAD, NULL);
-  CHECK_JVMTI_ERROR(jni, err, "VMInit event: Error in enabling ClassLoad events notification");
-}
-
-/* Check CLASS_LOAD event is generated for the given hidden class. */
-static void JNICALL
-ClassLoad(jvmtiEnv* jvmti, JNIEnv* jni, jthread thread, jclass klass) {
+/* Process a CLASS_LOAD or aClassPrepare event. */
+static void process_class_event(jvmtiEnv* jvmti, JNIEnv* jni, jclass klass,
+                                jint* event_count_ptr, const char* event_name) {
   char* sig = NULL;
   char* gsig = NULL;
-  char* src_name = NULL;
   jvmtiError err;
 
+  // get class signature
   err = jvmti->GetClassSignature(klass, &sig, &gsig);
   CHECK_JVMTI_ERROR(jni, err, "ClassLoad event: Error in JVMTI GetClassSignature");
 
+  // check if this is an expected class event for hidden class
   if (strlen(sig) > strlen(SIG_START) &&
       strncmp(sig, SIG_START, SIG_START_LEN) == 0 &&
       is_hidden(jni, klass)) {
-    class_load_count++;
+    (*event_count_ptr)++;
     if (gsig == NULL) {
-      LOG0("ClassLoad event: FAIL: GetClassSignature returned NULL generic signature for hidden class\n");
+      LOG1("%s event: FAIL: GetClassSignature returned NULL generic signature for hidden class\n", event_name);
       failed = true;
     }
-    LOG1("ClassLoad event: hidden class with sig: %s\n", sig);
-    LOG1("ClassLoad event: hidden class with gsig: %s\n", gsig);
+    LOG2("%s event: hidden class with sig: %s\n", event_name, sig);
+    LOG2("%s event: hidden class with gsig: %s\n", event_name, gsig);
   }
 }
 
+/* Check CLASS_LOAD event is generated for the given hidden class. */
+static void JNICALL
+ClassLoad(jvmtiEnv* jvmti, JNIEnv* jni, jthread thread, jclass klass) {
+  process_class_event(jvmti, jni, klass, &class_load_count, "ClassLoad");
+}
+
+/* Check CLASS_PREPARE event is generated for the given hidden class. */
+static void JNICALL
+ClassPrepare(jvmtiEnv* jvmti, JNIEnv* jni, jthread thread, jclass klass) {
+  process_class_event(jvmti, jni, klass, &class_prep_count, "ClassPrepare");
+}
+
+/* Enable CLASS_LOAD event notification mode. */
+static void JNICALL
+VMInit(jvmtiEnv* jvmti, JNIEnv* jni, jthread thread) {
+  jvmtiError err;
+
+  printf("VMInit event: SIG_START: %s, SIG_START_LEN: %d\n", SIG_START, (int)SIG_START_LEN);
+  fflush(stdout);
+
+  // enable ClassLoad event notification mode
+  err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_CLASS_LOAD, NULL);
+  CHECK_JVMTI_ERROR(jni, err, "VMInit event: Error in enabling ClassLoad events notification");
+
+  // enable ClassPrepare event notification mode
+  err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_CLASS_PREPARE, NULL);
+  CHECK_JVMTI_ERROR(jni, err, "VMInit event: Error in enabling ClassPrepare events notification");
+}
+
 JNIEXPORT jint JNICALL
 Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {
   jvmtiEventCallbacks callbacks;
-  jvmtiCapabilities caps;
   jvmtiError err;
 
   LOG0("Agent_OnLoad: started\n");
   if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {
     LOG0("Agent_OnLoad: Error in GetEnv in obtaining jvmtiEnv*\n");
@@ -286,29 +307,20 @@
   }
 
   // set required event callbacks
   memset(&callbacks, 0, sizeof(callbacks));
   callbacks.ClassLoad = &ClassLoad;
+  callbacks.ClassPrepare = &ClassPrepare;
   callbacks.VMInit = &VMInit;
 
   err = jvmti->SetEventCallbacks(&callbacks, sizeof(jvmtiEventCallbacks));
   if (err != JVMTI_ERROR_NONE) {
     LOG1("Agent_OnLoad: Error in JVMTI SetEventCallbacks: %d\n", err);
     failed = true;
     return JNI_ERR;
   }
 
-  // add required capabilities
-  memset(&caps, 0, sizeof(caps));
-  caps.can_get_source_file_name = 1;
-  err = jvmti->AddCapabilities(&caps);
-  if (err != JVMTI_ERROR_NONE) {
-    LOG1("Agent_OnLoad: Error in JVMTI AddCapabilities: %d\n", err);
-    failed = true;
-    return JNI_ERR;
-  }
-
   // enable VM_INIT event notification mode
   err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_VM_INIT, NULL);
   if (err != JVMTI_ERROR_NONE) {
     LOG1("Agent_OnLoad: Error in JVMTI SetEventNotificationMode: %d\n", err);
     failed = true;
@@ -349,11 +361,17 @@
 
 /* Native method: checkFailed(). */
 JNIEXPORT jboolean JNICALL
 Java_P_Q_HiddenClassSigTest_checkFailed(JNIEnv *jni, jclass klass) {
   if (class_load_count == 0) {
-    LOG0("Native Agent: missed ClassLoad event for hidden class\n");
+    // expected ClassLoad event was not generated for hidden class
+    LOG0("Native Agent: FAIL: missed ClassLoad event for hidden class\n");
+    failed = true;
+  }
+  if (class_prep_count == 0) {
+    // expected ClassPrepare event was not generated for hidden class
+    LOG0("Native Agent: FAIL: missed ClassPrepare event for hidden class\n");
     failed = true;
   }
   return failed;
 }
 
