diff a/test/hotspot/gtest/jfr/test_threadCpuLoad.cpp b/test/hotspot/gtest/jfr/test_threadCpuLoad.cpp
--- a/test/hotspot/gtest/jfr/test_threadCpuLoad.cpp
+++ b/test/hotspot/gtest/jfr/test_threadCpuLoad.cpp
@@ -146,10 +146,16 @@
   MockOs::user_cpu_time = 100 * NANOSECS_PER_MILLISEC;
   MockOs::system_cpu_time = 100 * NANOSECS_PER_MILLISEC;
   EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, 400 * NANOSECS_PER_MILLISEC, 1));
   EXPECT_FLOAT_EQ(0.25, event.user);
   EXPECT_FLOAT_EQ(0.25, event.system);
+
+  MockOs::user_cpu_time += 50 * NANOSECS_PER_MILLISEC;
+  MockOs::system_cpu_time += 50 * NANOSECS_PER_MILLISEC;
+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (400 + 400) * NANOSECS_PER_MILLISEC, 1));
+  EXPECT_FLOAT_EQ(0.125, event.user);
+  EXPECT_FLOAT_EQ(0.125, event.system);
 }
 
 TEST_VM_F(JfrTestThreadCPULoadSingle, MultipleCpus) {
   MockOs::user_cpu_time = 100 * NANOSECS_PER_MILLISEC;
   MockOs::system_cpu_time = 100 * NANOSECS_PER_MILLISEC;
@@ -175,10 +181,47 @@
 
   // Second call will see an extra 100 millisecs user time from the remainder
   EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (200 + 400) * NANOSECS_PER_MILLISEC, 1));
   EXPECT_FLOAT_EQ(0.25, event.user);
   EXPECT_FLOAT_EQ(0, event.system);
+
+  // Third call: make sure there are no leftovers
+  MockOs::user_cpu_time += 50 * NANOSECS_PER_MILLISEC;
+  MockOs::system_cpu_time += 50 * NANOSECS_PER_MILLISEC;
+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (200 + 400 + 400) * NANOSECS_PER_MILLISEC, 1));
+  EXPECT_FLOAT_EQ(0.125, event.user);
+  EXPECT_FLOAT_EQ(0.125, event.system);
+}
+
+TEST_VM_F(JfrTestThreadCPULoadSingle, UserAboveMaximumNonZeroBase) {
+
+  // Setup a non zero base
+  // Previously there was a bug when cur_user_time would be reset to zero and test that uses zero base would fail to detect it
+  MockOs::user_cpu_time = 100 * NANOSECS_PER_MILLISEC;
+  MockOs::system_cpu_time = 100 * NANOSECS_PER_MILLISEC;
+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, 400 * NANOSECS_PER_MILLISEC, 1));
+  EXPECT_FLOAT_EQ(0.25, event.user);
+  EXPECT_FLOAT_EQ(0.25, event.system);
+
+  // First call will not report above 100%
+  MockOs::user_cpu_time += 200 * NANOSECS_PER_MILLISEC;
+  MockOs::system_cpu_time += 100 * NANOSECS_PER_MILLISEC;
+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (400 + 200) * NANOSECS_PER_MILLISEC, 1));
+  EXPECT_FLOAT_EQ(0.5, event.user);
+  EXPECT_FLOAT_EQ(0.5, event.system);
+
+  // Second call will see an extra 100 millisecs user time from the remainder
+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (400 + 200 + 400) * NANOSECS_PER_MILLISEC, 1));
+  EXPECT_FLOAT_EQ(0.25, event.user);
+  EXPECT_FLOAT_EQ(0, event.system);
+
+  // Third call: make sure there are no leftovers
+  MockOs::user_cpu_time += 50 * NANOSECS_PER_MILLISEC;
+  MockOs::system_cpu_time += 50 * NANOSECS_PER_MILLISEC;
+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (400 + 200 + 400 + 400) * NANOSECS_PER_MILLISEC, 1));
+  EXPECT_FLOAT_EQ(0.125, event.user);
+  EXPECT_FLOAT_EQ(0.125, event.system);
 }
 
 TEST_VM_F(JfrTestThreadCPULoadSingle, SystemAboveMaximum) {
 
   // First call will not report above 100%
@@ -190,10 +233,47 @@
 
   // Second call will see an extra 100 millisecs user and system time from the remainder
   EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (200 + 400) * NANOSECS_PER_MILLISEC, 1));
   EXPECT_FLOAT_EQ(0.25, event.user);
   EXPECT_FLOAT_EQ(0.25, event.system);
+
+  // Third call: make sure there are no leftovers
+  MockOs::user_cpu_time += 50 * NANOSECS_PER_MILLISEC;
+  MockOs::system_cpu_time += 50 * NANOSECS_PER_MILLISEC;
+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (200 + 400 + 400) * NANOSECS_PER_MILLISEC, 1));
+  EXPECT_FLOAT_EQ(0.125, event.user);
+  EXPECT_FLOAT_EQ(0.125, event.system);
+}
+
+TEST_VM_F(JfrTestThreadCPULoadSingle, SystemAboveMaximumNonZeroBase) {
+
+  // Setup a non zero base
+  // Previously there was a bug when cur_user_time would be reset to zero and test that uses zero base would fail to detect it
+  MockOs::user_cpu_time = 100 * NANOSECS_PER_MILLISEC;
+  MockOs::system_cpu_time = 100 * NANOSECS_PER_MILLISEC;
+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, 400 * NANOSECS_PER_MILLISEC, 1));
+  EXPECT_FLOAT_EQ(0.25, event.user);
+  EXPECT_FLOAT_EQ(0.25, event.system);
+
+  // First call will not report above 100%
+  MockOs::user_cpu_time += 100 * NANOSECS_PER_MILLISEC;
+  MockOs::system_cpu_time += 300 * NANOSECS_PER_MILLISEC;
+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (400 + 200) * NANOSECS_PER_MILLISEC, 1));
+  EXPECT_FLOAT_EQ(0, event.user);
+  EXPECT_FLOAT_EQ(1, event.system);
+
+  // Second call will see an extra 100 millisecs user and system time from the remainder
+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (400 + 200 + 400) * NANOSECS_PER_MILLISEC, 1));
+  EXPECT_FLOAT_EQ(0.25, event.user);
+  EXPECT_FLOAT_EQ(0.25, event.system);
+
+  // Third call: make sure there are no leftovers
+  MockOs::user_cpu_time += 50 * NANOSECS_PER_MILLISEC;
+  MockOs::system_cpu_time += 50 * NANOSECS_PER_MILLISEC;
+  EXPECT_TRUE(JfrThreadCPULoadEvent::update_event(event, thread, (400 + 200 + 400 + 400) * NANOSECS_PER_MILLISEC, 1));
+  EXPECT_FLOAT_EQ(0.125, event.user);
+  EXPECT_FLOAT_EQ(0.125, event.system);
 }
 
 TEST_VM_F(JfrTestThreadCPULoadSingle, SystemTimeDecreasing) {
 
   // As seen in an actual run - caused by different resolution for total and user time
