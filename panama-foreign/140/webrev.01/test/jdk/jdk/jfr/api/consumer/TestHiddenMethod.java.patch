diff a/test/jdk/jdk/jfr/api/consumer/TestHiddenMethod.java b/test/jdk/jdk/jfr/api/consumer/TestHiddenMethod.java
--- a/test/jdk/jdk/jfr/api/consumer/TestHiddenMethod.java
+++ b/test/jdk/jdk/jfr/api/consumer/TestHiddenMethod.java
@@ -26,16 +26,15 @@
 
 import static jdk.test.lib.Asserts.assertEquals;
 import static jdk.test.lib.Asserts.assertFalse;
 import static jdk.test.lib.Asserts.assertTrue;
 
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.time.Duration;
 import java.util.List;
 
-import javax.script.ScriptEngine;
-import javax.script.ScriptEngineManager;
-
 import jdk.jfr.Event;
 import jdk.jfr.Recording;
 import jdk.jfr.consumer.RecordedEvent;
 import jdk.jfr.consumer.RecordedFrame;
 import jdk.jfr.consumer.RecordedStackTrace;
@@ -46,42 +45,32 @@
  * @test
  * @key jfr
  * @requires vm.hasJFR
  *
  * @library /test/lib
- * @modules java.scripting
- *          jdk.jfr
+ * @modules jdk.jfr
  *
  * @run main/othervm jdk.jfr.api.consumer.TestHiddenMethod
  */
 public final class TestHiddenMethod {
 
     public static void main(String[] args) throws Throwable {
         try (Recording recording = new Recording()) {
             recording.enable(MyEvent.class).withThreshold(Duration.ofMillis(0));
             recording.start();
-
-            // Commit event with hidden methods
-            ScriptEngineManager manager = new ScriptEngineManager();
-            ScriptEngine engine = manager.getEngineByName("nashorn");
-            engine.eval(
-                    "function emit() {"
-                    + "  print('About to emit event from Javascript');"
-                    + "  var TestEvent = Java.type(\"jdk.jfr.api.consumer.TestHiddenMethod$MyEvent\");"
-                    + "  var event = new TestEvent;"
-                    + "  event.begin();"
-                    + "  event.end();"
-                    + "  event.commit();"
-                    + "  print('Event emitted from Javascript!');"
-                    + "}"
-                    + "emit();");
-
-            // Commit event with visible method
-            MyEvent visible = new MyEvent();
-            visible.begin();
-            visible.end();
-            visible.commit();
+            // doPrivileged calls a method that has the @Hidden
+            // annotation
+            AccessController.doPrivileged(new PrivilegedAction<Void>() {
+                @Override
+                public Void run() {
+                    MyEvent event = new MyEvent();
+                    event.commit();
+                    return null;
+                }
+            });
+            MyEvent event = new MyEvent();
+            event.commit();
             recording.stop();
 
             List<RecordedEvent> events = Events.fromRecording(recording);
             assertEquals(2, events.size(), "Expected two events");
             RecordedEvent hiddenEvent = events.get(0);
