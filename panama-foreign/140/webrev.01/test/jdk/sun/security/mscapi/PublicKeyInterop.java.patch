diff a/test/jdk/sun/security/mscapi/PublicKeyInterop.java b/test/jdk/sun/security/mscapi/PublicKeyInterop.java
--- a/test/jdk/sun/security/mscapi/PublicKeyInterop.java
+++ b/test/jdk/sun/security/mscapi/PublicKeyInterop.java
@@ -33,11 +33,11 @@
 import java.security.*;
 import java.util.*;
 import javax.crypto.*;
 
 import jdk.test.lib.SecurityTools;
-import sun.security.util.HexDumpEncoder;
+import jdk.test.lib.hexdump.HexPrinter;
 
 /*
  * Confirm interoperability of RSA public keys between SunMSCAPI and SunJCE
  * security providers.
  */
@@ -82,42 +82,42 @@
         PrivateKey myPrKey = (PrivateKey) ks.getKey("6888925", null);
         System.out.println("Private key is a " + myPrKey.getClass().getName());
         System.out.println();
 
         byte[] plain = new byte[] {0x01, 0x02, 0x03, 0x04, 0x05};
-        HexDumpEncoder hde = new HexDumpEncoder();
-        System.out.println("Plaintext:\n" + hde.encode(plain) + "\n");
+        HexPrinter hp = HexPrinter.simple();
+        System.out.println("Plaintext:\n" + hp.toString(plain) + "\n");
 
         Cipher rsa = Cipher.getInstance("RSA/ECB/PKCS1Padding");
         rsa.init(Cipher.ENCRYPT_MODE, myPuKey);
         byte[] encrypted = rsa.doFinal(plain);
         System.out.println("Encrypted plaintext using RSA Cipher from " +
             rsa.getProvider().getName() + " JCE provider\n");
-        System.out.println(hde.encode(encrypted) + "\n");
+        System.out.println(hp.toString(encrypted) + "\n");
 
         Cipher rsa2 = Cipher.getInstance("RSA/ECB/PKCS1Padding", "SunMSCAPI");
         rsa2.init(Cipher.ENCRYPT_MODE, myPuKey);
         byte[] encrypted2 = rsa2.doFinal(plain);
         System.out.println("Encrypted plaintext using RSA Cipher from " +
             rsa2.getProvider().getName() + " JCE provider\n");
-        System.out.println(hde.encode(encrypted2) + "\n");
+        System.out.println(hp.toString(encrypted2) + "\n");
 
         Cipher rsa3 = Cipher.getInstance("RSA/ECB/PKCS1Padding", "SunMSCAPI");
         rsa3.init(Cipher.DECRYPT_MODE, myPrKey);
         byte[] decrypted = rsa3.doFinal(encrypted);
         System.out.println("Decrypted first ciphertext using RSA Cipher from " +
             rsa3.getProvider().getName() + " JCE provider\n");
-        System.out.println(hde.encode(decrypted) + "\n");
+        System.out.println(hp.toString(decrypted) + "\n");
         if (! Arrays.equals(plain, decrypted)) {
             throw new Exception("First decrypted ciphertext does not match " +
                 "original plaintext");
         }
 
         decrypted = rsa3.doFinal(encrypted2);
         System.out.println("Decrypted second ciphertext using RSA Cipher from "
             + rsa3.getProvider().getName() + " JCE provider\n");
-        System.out.println(hde.encode(decrypted) + "\n");
+        System.out.println(hp.toString(decrypted) + "\n");
         if (! Arrays.equals(plain, decrypted)) {
             throw new Exception("Second decrypted ciphertext does not match " +
                 "original plaintext");
         }
     }
