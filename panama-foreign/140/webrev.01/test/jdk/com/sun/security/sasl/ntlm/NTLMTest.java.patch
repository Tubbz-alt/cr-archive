diff a/test/jdk/com/sun/security/sasl/ntlm/NTLMTest.java b/test/jdk/com/sun/security/sasl/ntlm/NTLMTest.java
--- a/test/jdk/com/sun/security/sasl/ntlm/NTLMTest.java
+++ b/test/jdk/com/sun/security/sasl/ntlm/NTLMTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,19 +22,20 @@
  */
 
 /*
  * @test
  * @bug 6911951 7150092
+ * @library /test/lib
  * @summary NTLM should be a supported Java SASL mechanism
  * @modules java.base/sun.security.util
  *          java.security.sasl
  */
 import java.io.IOException;
 import javax.security.sasl.*;
 import javax.security.auth.callback.*;
 import java.util.*;
-import sun.security.util.HexDumpEncoder;
+import jdk.test.lib.hexdump.HexPrinter;
 
 public class NTLMTest {
 
     private static final String MECH = "NTLM";
     private static final String REALM = "REALM";
@@ -310,24 +311,24 @@
         }
 
         byte[] response = (clnt.hasInitialResponse()
                 ? clnt.evaluateChallenge(EMPTY) : EMPTY);
         System.out.println("Initial:");
-        new HexDumpEncoder().encodeBuffer(response, System.out);
+        HexPrinter.simple().format(response);
         byte[] challenge;
 
         while (!clnt.isComplete() || !srv.isComplete()) {
             challenge = srv.evaluateResponse(response);
             response = null;
             if (challenge != null) {
                 System.out.println("Challenge:");
-                new HexDumpEncoder().encodeBuffer(challenge, System.out);
+                HexPrinter.simple().format(challenge);
                 response = clnt.evaluateChallenge(challenge);
             }
             if (response != null) {
                 System.out.println("Response:");
-                new HexDumpEncoder().encodeBuffer(response, System.out);
+                HexPrinter.simple().format(response);
             }
         }
 
         if (clnt.isComplete() && srv.isComplete()) {
             System.out.println("SUCCESS");
