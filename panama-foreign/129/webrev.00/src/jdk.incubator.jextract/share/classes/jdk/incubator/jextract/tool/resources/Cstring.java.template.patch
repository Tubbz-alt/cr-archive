diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
@@ -1,23 +1,20 @@
 // Generated by jextract
 
 import java.lang.invoke.VarHandle;
 import java.nio.charset.Charset;
 import jdk.incubator.foreign.NativeAllocationScope;
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import static jdk.incubator.foreign.MemoryLayouts.C_CHAR;
 
 public final class Cstring {
     // don't create!
     private Cstring() {
     }
 
-    private static final Foreign foreign = Foreign.getInstance();
-
     private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
         return MemoryLayout.ofSequence(elemLayout)
                 .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
     }
     private final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);
@@ -67,13 +64,14 @@
         return toCString(str.getBytes(charset), scope);
     }
 
     public static String toJavaString(MemoryAddress addr) {
         StringBuilder buf = new StringBuilder();
-        MemoryAddress baseAddr = addr.segment() == null ?
-                foreign.withSize(addr, Long.MAX_VALUE) :
-                addr;
+        MemoryAddress baseAddr = addr.segment() != null ?
+                addr :
+                MemorySegment.ofNativeRestricted(addr, Long.MAX_VALUE, Thread.currentThread(),
+                        null, null).baseAddress();
         byte curr = (byte) byteArrHandle.get(baseAddr, 0);
         long offset = 0;
         while (curr != 0) {
             buf.append((char) curr);
             curr = (byte) byteArrHandle.get(baseAddr, ++offset);
