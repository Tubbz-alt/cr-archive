diff a/src/jdk.incubator.foreign/share/classes/module-info.java b/src/jdk.incubator.foreign/share/classes/module-info.java
--- a/src/jdk.incubator.foreign/share/classes/module-info.java
+++ b/src/jdk.incubator.foreign/share/classes/module-info.java
@@ -33,7 +33,8 @@
 module jdk.incubator.foreign {
     exports jdk.incubator.foreign;
     exports jdk.internal.foreign.abi.aarch64 to jdk.incubator.jextract;
     exports jdk.internal.foreign.abi.x64.sysv to jdk.incubator.jextract;
     exports jdk.internal.foreign.abi.x64.windows to jdk.incubator.jextract;
+    exports jdk.internal.foreign.abi to jdk.incubator.jextract;
     exports jdk.internal.foreign to jdk.incubator.jextract;
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -29,11 +29,11 @@
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SystemABI;
-import jdk.internal.foreign.InternalForeign;
+import jdk.internal.foreign.abi.SharedUtils;
 
 import javax.tools.JavaFileObject;
 import javax.tools.SimpleJavaFileObject;
 import java.io.IOException;
 import java.io.UncheckedIOException;
@@ -122,11 +122,11 @@
         this.builder = builder;
     }
 
     private static String getCLangConstantsHolder() {
         String prefix = "jdk.incubator.foreign.MemoryLayouts.";
-        String abi = InternalForeign.getInstancePrivileged().getSystemABI().name();
+        String abi = SharedUtils.getSystemABI().name();
         switch (abi) {
             case SystemABI.ABI_SYSV:
                 return prefix + "SysV";
             case SystemABI.ABI_WINDOWS:
                 return prefix + "WinABI";
@@ -182,11 +182,11 @@
                 lines.stream().collect(Collectors.joining("\n"));
         return fileFromString(pkgName,"Cstring", contents);
     }
 
     private List<JavaFileObject> getPrimitiveTypeFiles(String pkgName) throws IOException, URISyntaxException {
-        var abi = InternalForeign.getInstancePrivileged().getSystemABI();
+        var abi = SharedUtils.getSystemABI();
         var cXJavaFile = OutputFactory.class.getResource("resources/C-X.java.template");
         var lines = Files.readAllLines(Paths.get(cXJavaFile.toURI()));
 
         List<JavaFileObject> files = new ArrayList<>();
         String pkgPrefix = pkgName.isEmpty()? "" : "package " + pkgName + ";\n";
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
@@ -1,23 +1,20 @@
 // Generated by jextract
 
 import java.lang.invoke.VarHandle;
 import java.nio.charset.Charset;
 import jdk.incubator.foreign.NativeAllocationScope;
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import static jdk.incubator.foreign.MemoryLayouts.C_CHAR;
 
 public final class Cstring {
     // don't create!
     private Cstring() {
     }
 
-    private static final Foreign foreign = Foreign.getInstance();
-
     private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
         return MemoryLayout.ofSequence(elemLayout)
                 .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
     }
     private final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);
@@ -67,13 +64,14 @@
         return toCString(str.getBytes(charset), scope);
     }
 
     public static String toJavaString(MemoryAddress addr) {
         StringBuilder buf = new StringBuilder();
-        MemoryAddress baseAddr = addr.segment() == null ?
-                foreign.withSize(addr, Long.MAX_VALUE) :
-                addr;
+        MemoryAddress baseAddr = addr.segment() != null ?
+                addr :
+                MemorySegment.ofNativeRestricted(addr, Long.MAX_VALUE, Thread.currentThread(),
+                        null, null).baseAddress();
         byte curr = (byte) byteArrHandle.get(baseAddr, 0);
         long offset = 0;
         while (curr != 0) {
             buf.append((char) curr);
             curr = (byte) byteArrHandle.get(baseAddr, ++offset);
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
@@ -1,8 +1,7 @@
 // Generated by jextract
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
@@ -17,11 +16,11 @@
 
 import static ${C_LANG}.*;
 
 public class RuntimeHelper {
 
-    private final static SystemABI ABI = Foreign.getInstance().getSystemABI();
+    private final static SystemABI ABI = SystemABI.getSystemABI();
 
     private final static ClassLoader LOADER = RuntimeHelper.class.getClassLoader();
 
     private final static MethodHandles.Lookup MH_LOOKUP = MethodHandles.lookup();
 
@@ -131,11 +130,11 @@
 
             MethodType mt = MethodType.methodType(varargs.returnType(), argTypes);
             FunctionDescriptor f = (function.returnLayout().isEmpty()) ?
                     FunctionDescriptor.ofVoid(argLayouts) :
                     FunctionDescriptor.of(function.returnLayout().get(), argLayouts);
-            MethodHandle mh = Foreign.getInstance().getSystemABI().downcallHandle(symbol, mt, f);
+            MethodHandle mh = ABI.downcallHandle(symbol, mt, f);
             // flatten argument list so that it can be passed to an asSpreader MH
             Object[] allArgs = new Object[nNamedArgs + unnamedArgs.length];
             System.arraycopy(args, 0, allArgs, 0, nNamedArgs);
             System.arraycopy(unnamedArgs, 0, allArgs, nNamedArgs, unnamedArgs.length);
 
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/LibClang.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/LibClang.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/LibClang.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/LibClang.java
@@ -29,11 +29,11 @@
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SystemABI;
 import jdk.internal.clang.libclang.Index_h;
-import jdk.internal.foreign.InternalForeign;
+import jdk.internal.foreign.abi.SharedUtils;
 import jdk.internal.jextract.impl.LayoutUtils;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodType;
 
@@ -48,11 +48,11 @@
     static {
         if (!CRASH_RECOVERY) {
             //this is an hack - needed because clang_toggleCrashRecovery only takes effect _after_ the
             //first call to createIndex.
             try {
-                SystemABI abi = InternalForeign.getInstancePrivileged().getSystemABI();
+                SystemABI abi = SharedUtils.getSystemABI();
                 String putenv = abi.name().equals(SystemABI.ABI_WINDOWS) ?
                         "_putenv" : "putenv";
                 MethodHandle PUT_ENV = abi.downcallHandle(LibraryLookup.ofDefault().lookup(putenv),
                                 MethodType.methodType(int.class, MemoryAddress.class),
                                 FunctionDescriptor.of(LayoutUtils.C_INT, LayoutUtils.C_POINTER));
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/TranslationUnit.java
@@ -24,25 +24,23 @@
  *
  */
 
 package jdk.internal.clang;
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.internal.clang.libclang.Index_h;
-import jdk.internal.foreign.InternalForeign;
+import jdk.internal.foreign.MemoryAddressImpl;
 import jdk.internal.jextract.impl.LayoutUtils;
 
 import java.io.IOException;
 import java.nio.file.Path;
 import java.util.Objects;
 import java.util.function.Consumer;
 
 public class TranslationUnit implements AutoCloseable {
-    private static final Foreign FOREIGN = InternalForeign.getInstancePrivileged();
 
     private MemoryAddress tu;
 
     TranslationUnit(MemoryAddress tu) {
         this.tu = tu;
@@ -157,11 +155,11 @@
             return size;
         }
 
         public MemorySegment getTokenSegment(int idx) {
             MemoryAddress p = ar.addOffset(idx * Index_h.CXToken$LAYOUT.byteSize());
-            return FOREIGN.withSize(p, Index_h.CXToken$LAYOUT.byteSize()).segment();
+            return MemoryAddressImpl.ofLongUnchecked(p.toRawLongValue(), Index_h.CXToken$LAYOUT.byteSize()).segment();
         }
 
         public Token getToken(int index) {
             return new Token(getTokenSegment(index));
         }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Utils.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Utils.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Utils.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/Utils.java
@@ -30,12 +30,11 @@
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
-import jdk.incubator.foreign.SystemABI;
-import jdk.internal.foreign.InternalForeign;
+import jdk.internal.foreign.abi.SharedUtils;
 import jdk.internal.jextract.impl.LayoutUtils;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
@@ -51,16 +50,16 @@
     private static final MethodHandle STRLEN;
     private static final MethodHandle STRCPY;
 
     static {
         try {
-            STRLEN = InternalForeign.getInstancePrivileged().getSystemABI().downcallHandle(
+            STRLEN = SharedUtils.getSystemABI().downcallHandle(
                     LibraryLookup.ofDefault().lookup("strlen"),
                     MethodType.methodType(int.class, MemoryAddress.class),
                     FunctionDescriptor.of(LayoutUtils.C_INT, LayoutUtils.C_POINTER));
 
-            STRCPY = InternalForeign.getInstancePrivileged().getSystemABI().downcallHandle(
+            STRCPY = SharedUtils.getSystemABI().downcallHandle(
                     LibraryLookup.ofDefault().lookup("strcpy"),
                     MethodType.methodType(MemoryAddress.class, MemoryAddress.class, MemoryAddress.class),
                     FunctionDescriptor.of(LayoutUtils.C_POINTER, LayoutUtils.C_POINTER, LayoutUtils.C_POINTER));
         } catch (Throwable ex) {
             throw new ExceptionInInitializerError(ex);
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/RuntimeHelper.java
@@ -29,11 +29,11 @@
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.SystemABI;
-import jdk.internal.foreign.InternalForeign;
+import jdk.internal.foreign.abi.SharedUtils;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.nio.file.Files;
@@ -42,11 +42,11 @@
 import java.util.Arrays;
 import java.util.Optional;
 
 public class RuntimeHelper {
 
-    private final static SystemABI ABI = InternalForeign.getInstancePrivileged().getSystemABI();
+    private final static SystemABI ABI = SharedUtils.getSystemABI();
 
     private final static ClassLoader LOADER = RuntimeHelper.class.getClassLoader();
 
     private final static MethodHandles.Lookup MH_LOOKUP = MethodHandles.lookup();
 
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/LayoutUtils.java
@@ -34,22 +34,22 @@
 import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.foreign.ValueLayout;
 import jdk.internal.clang.Cursor;
 import jdk.internal.clang.Type;
 import jdk.internal.clang.TypeKind;
-import jdk.internal.foreign.InternalForeign;
+import jdk.internal.foreign.abi.SharedUtils;
 import jdk.internal.foreign.abi.aarch64.AArch64ABI;
 import jdk.internal.foreign.abi.x64.sysv.SysVx64ABI;
 import jdk.internal.foreign.abi.x64.windows.Windowsx64ABI;
 
 import java.util.Optional;
 
 /**
  * General Layout utility functions
  */
 public final class LayoutUtils {
-    private static SystemABI abi = InternalForeign.getInstancePrivileged().getSystemABI();
+    private static SystemABI abi = SharedUtils.getSystemABI();
     private LayoutUtils() {}
 
     public static String getName(Type type) {
         Cursor c = type.getDeclarationCursor();
         if (c.isInvalid()) {
diff a/test/jdk/tools/jextract/ConstantsTest.java b/test/jdk/tools/jextract/ConstantsTest.java
--- a/test/jdk/tools/jextract/ConstantsTest.java
+++ b/test/jdk/tools/jextract/ConstantsTest.java
@@ -41,11 +41,11 @@
 /*
  * @test
  * @modules jdk.incubator.jextract
  * @library /test/lib
  * @build ConstantsTest
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit ConstantsTest
+ * @run testng/othervm -Dforeign.restricted=permit ConstantsTest
  */
 public class ConstantsTest extends JextractToolRunner {
     private Class<?> constants;
     private Path dirPath;
     private Loader loader;
diff a/test/jdk/tools/jextract/JextractToolProviderTest.java b/test/jdk/tools/jextract/JextractToolProviderTest.java
--- a/test/jdk/tools/jextract/JextractToolProviderTest.java
+++ b/test/jdk/tools/jextract/JextractToolProviderTest.java
@@ -37,11 +37,11 @@
  * @test
  * @modules jdk.incubator.jextract
  * @library /test/lib
  * @build JextractToolRunner
  * @bug 8240181
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit -Duser.language=en --add-modules jdk.incubator.jextract JextractToolProviderTest
+ * @run testng/othervm -Dforeign.restricted=permit -Duser.language=en --add-modules jdk.incubator.jextract JextractToolProviderTest
  */
 public class JextractToolProviderTest extends JextractToolRunner {
     @Test
     public void testHelp() {
         run().checkFailure(); // no options
diff a/test/jdk/tools/jextract/RepeatedDeclsTest.java b/test/jdk/tools/jextract/RepeatedDeclsTest.java
--- a/test/jdk/tools/jextract/RepeatedDeclsTest.java
+++ b/test/jdk/tools/jextract/RepeatedDeclsTest.java
@@ -38,11 +38,11 @@
  * @bug 8240300
  * @summary jextract produces non compilable code with repeated declarations
  * @modules jdk.incubator.jextract
  * @library /test/lib
  * @build JextractToolRunner
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit RepeatedDeclsTest
+ * @run testng/othervm -Dforeign.restricted=permit RepeatedDeclsTest
  */
 public class RepeatedDeclsTest extends JextractToolRunner {
     @Test
     public void repeatedDecls() {
         Path repeatedDeclsOutput = getOutputFilePath("repeatedDeclsgen");
diff a/test/jdk/tools/jextract/Test8240181.java b/test/jdk/tools/jextract/Test8240181.java
--- a/test/jdk/tools/jextract/Test8240181.java
+++ b/test/jdk/tools/jextract/Test8240181.java
@@ -28,11 +28,11 @@
  * @test
  * @modules jdk.incubator.jextract
  * @library /test/lib
  * @build JextractToolRunner
  * @bug 8240181
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit -Duser.language=en --add-modules jdk.incubator.jextract Test8240181
+ * @run testng/othervm -Dforeign.restricted=permit -Duser.language=en --add-modules jdk.incubator.jextract Test8240181
  */
 public class Test8240181 extends JextractToolRunner {
     @Test
     public void testAnonymousEnum() {
         Path anonenumOutput = getOutputFilePath("anonenumgen");
diff a/test/jdk/tools/jextract/Test8240657.java b/test/jdk/tools/jextract/Test8240657.java
--- a/test/jdk/tools/jextract/Test8240657.java
+++ b/test/jdk/tools/jextract/Test8240657.java
@@ -30,11 +30,11 @@
  * @modules jdk.incubator.jextract
  * @library /test/lib
  * @build JextractToolRunner
  * @bug 8240657
  * @summary when Java keywords are used as identifiers in C header, jextract generates non-compilable java code
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit Test8240657
+ * @run testng/othervm -Dforeign.restricted=permit Test8240657
  */
 public class Test8240657 extends JextractToolRunner {
     @Test
     public void testKeywordIdentifiers() {
         Path exportsOutput = getOutputFilePath("exportsgen");
diff a/test/jdk/tools/jextract/Test8240752.java b/test/jdk/tools/jextract/Test8240752.java
--- a/test/jdk/tools/jextract/Test8240752.java
+++ b/test/jdk/tools/jextract/Test8240752.java
@@ -34,11 +34,11 @@
  * @modules jdk.incubator.jextract
  * @library /test/lib
  * @build JextractToolRunner
  * @bug 8240752
  * @summary jextract generates non-compilable code for special floating point values
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit Test8240752
+ * @run testng/othervm -Dforeign.restricted=permit Test8240752
  */
 public class Test8240752 extends JextractToolRunner {
     private float getFloatConstant(Class<?> cls, String name) {
         Method method = findMethod(cls, name);
         assertNotNull(method);
diff a/test/jdk/tools/jextract/Test8240811.java b/test/jdk/tools/jextract/Test8240811.java
--- a/test/jdk/tools/jextract/Test8240811.java
+++ b/test/jdk/tools/jextract/Test8240811.java
@@ -34,11 +34,11 @@
  * @modules jdk.incubator.jextract
  * @library /test/lib
  * @build JextractToolRunner
  * @bug 8240811
  * @summary jextract generates non-compilable code for name collision between a struct and a global variable
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit Test8240811
+ * @run testng/othervm -Dforeign.restricted=permit Test8240811
  */
 public class Test8240811 extends JextractToolRunner {
     @Test
     public void testNameCollision() {
         Path nameCollisionOutput = getOutputFilePath("name_collision_gen");
diff a/test/jdk/tools/jextract/UniondeclTest.java b/test/jdk/tools/jextract/UniondeclTest.java
--- a/test/jdk/tools/jextract/UniondeclTest.java
+++ b/test/jdk/tools/jextract/UniondeclTest.java
@@ -32,11 +32,11 @@
 /*
  * @test
  * @modules jdk.incubator.jextract
  * @library /test/lib
  * @build JextractToolRunner
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit UniondeclTest
+ * @run testng/othervm -Dforeign.restricted=permit UniondeclTest
  */
 public class UniondeclTest extends JextractToolRunner {
     @Test
     public void unionDecl() {
         Path uniondeclOutput = getOutputFilePath("uniondecl.h");
diff a/test/jdk/tools/jextract/test8239918/LibTest8239918Test.java b/test/jdk/tools/jextract/test8239918/LibTest8239918Test.java
--- a/test/jdk/tools/jextract/test8239918/LibTest8239918Test.java
+++ b/test/jdk/tools/jextract/test8239918/LibTest8239918Test.java
@@ -30,11 +30,11 @@
  * @library ..
  * @modules jdk.incubator.jextract
  * @bug 8239918
  * @summary jextract generates uncompilable code for no argument C function
  * @run driver JtregJextract -l Test8239918 -t test.jextract.test8239918 -- test8239918.h
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit LibTest8239918Test
+ * @run testng/othervm -Dforeign.restricted=permit LibTest8239918Test
  */
 public class LibTest8239918Test {
     @Test
     public void testRand() {
         assertEquals(rand(), 1729);
diff a/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java b/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
--- a/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
+++ b/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
@@ -34,11 +34,11 @@
  * @library ..
  * @modules jdk.incubator.jextract
  * @bug 8241925
  * @summary jextract should generate simple allocation, access API for C primitive types
  * @run driver JtregJextract -l Test8241925 -t test.jextract.test8241925 -- test8241925.h
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit LibTest8241925Test
+ * @run testng/othervm -Dforeign.restricted=permit LibTest8241925Test
  */
 public class LibTest8241925Test {
     @Test
     public void test() {
         try (var scope = NativeAllocationScope.unboundedScope()) {
diff a/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java b/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java
--- a/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java
+++ b/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java
@@ -28,14 +28,13 @@
  *          jdk.incubator.foreign/jdk.internal.foreign
  *          jdk.incubator.foreign/jdk.internal.foreign.abi
  *          java.base/sun.security.action
  * @library .. /test/lib
  * @build JextractToolRunner
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit -Duser.language=en TestClassGeneration
+ * @run testng/othervm -Dforeign.restricted=permit -Duser.language=en TestClassGeneration
  */
 
-import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import org.testng.annotations.AfterClass;
 import org.testng.annotations.BeforeClass;
@@ -60,12 +59,10 @@
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
 
 public class TestClassGeneration extends JextractToolRunner {
 
-    private static final Foreign FOREIGN = Foreign.getInstance();
-
     private static final VarHandle VH_bytes = MemoryLayout.ofSequence(C_CHAR).varHandle(byte.class, sequenceElement());
 
     private Path outputDir;
     private Loader loader;
     private Class<?> cls;
@@ -180,11 +177,14 @@
     public void testGlobal(String name, Class<?> expectedType, MemoryLayout expectedLayout, Object expectedValue) throws Throwable {
         Method layout_getter = checkMethod(cls, name + "$LAYOUT", MemoryLayout.class);
         assertEquals(layout_getter.invoke(null), expectedLayout);
 
         Method addr_getter = checkMethod(cls, name + "$ADDR", MemoryAddress.class);
-        MemoryAddress addr = FOREIGN.withSize((MemoryAddress) addr_getter.invoke(null), expectedLayout.byteSize());
+        MemoryAddress addr = MemorySegment.ofNativeRestricted(
+                (MemoryAddress)addr_getter.invoke(null),
+                expectedLayout.byteSize(),
+                null, null, null).baseAddress();
 
         Method vh_getter = checkMethod(cls, name + "$VH", VarHandle.class);
         VarHandle vh = (VarHandle) vh_getter.invoke(null);
         assertEquals(vh.varType(), expectedType);
         assertEquals(vh.get(addr), expectedValue);
diff a/test/jdk/tools/jextract/testStruct/LibStructTest.java b/test/jdk/tools/jextract/testStruct/LibStructTest.java
--- a/test/jdk/tools/jextract/testStruct/LibStructTest.java
+++ b/test/jdk/tools/jextract/testStruct/LibStructTest.java
@@ -34,11 +34,11 @@
 /*
  * @test
  * @library ..
  * @modules jdk.incubator.jextract
  * @run driver JtregJextract -l Struct -t test.jextract.struct -- struct.h
- * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit LibStructTest
+ * @run testng/othervm -Dforeign.restricted=permit LibStructTest
  */
 public class LibStructTest {
     @Test
     public void testMakePoint() {
         try (var seg = makePoint(42, -39)) {
