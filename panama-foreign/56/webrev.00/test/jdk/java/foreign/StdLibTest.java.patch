diff a/test/jdk/java/foreign/StdLibTest.java b/test/jdk/java/foreign/StdLibTest.java
--- a/test/jdk/java/foreign/StdLibTest.java
+++ b/test/jdk/java/foreign/StdLibTest.java
@@ -28,12 +28,11 @@
   * @modules jdk.incubator.foreign/jdk.incubator.foreign.unsafe
  *          jdk.incubator.foreign/jdk.internal.foreign
  *          jdk.incubator.foreign/jdk.internal.foreign.abi
  *          java.base/sun.security.action
  * @build NativeTestHelper StdLibTest
- * @run testng StdLibTest
- * @run testng/othervm -Djdk.internal.foreign.NativeInvoker.FASTPATH=none -Djdk.internal.foreign.UpcallHandler.FASTPATH=none StdLibTest
+ * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit StdLibTest
  */
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
@@ -52,28 +51,29 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import java.util.stream.LongStream;
 import java.util.stream.Stream;
 
+import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
 import jdk.incubator.foreign.SystemABI;
-import jdk.incubator.foreign.unsafe.ForeignUnsafe;
 import org.testng.annotations.*;
 
 import static jdk.incubator.foreign.MemoryLayouts.*;
 import static org.testng.Assert.*;
 
 @Test
 public class StdLibTest extends NativeTestHelper {
 
-    final static SystemABI abi = SystemABI.getInstance();
+    final static Foreign FOREIGN = Foreign.getInstance();
+    final static SystemABI abi = FOREIGN.getSystemABI();
 
     final static VarHandle byteHandle = MemoryHandles.varHandle(byte.class, ByteOrder.nativeOrder());
     final static VarHandle intHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());
     final static VarHandle longHandle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());
     final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);
@@ -267,11 +267,11 @@
             private MemoryAddress base;
 
             static final long SIZE = 56;
 
             Tm(MemoryAddress base) {
-                this.base = base.rebase(ForeignUnsafe.ofNativeUnchecked(base, SIZE));
+                this.base = base.rebase(FOREIGN.ofNativeUnchecked(base, SIZE));
             }
 
             int sec() {
                 return (int)intHandle.get(base);
             }
@@ -450,12 +450,12 @@
                     }).collect(Collectors.toCollection(LinkedHashSet::new));
         }
     }
 
     static MemorySegment toCString(String value) {
-        return ForeignUnsafe.toCString(value);
+        return FOREIGN.toCString(value);
     }
 
     static String toJavaString(MemoryAddress address) {
-        return ForeignUnsafe.toJavaString(address);
+        return FOREIGN.toJavaString(address);
     }
 }
