diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
@@ -47,12 +47,15 @@
  * the root scope. There is only a single level of children. All child scopes are peers.
  * A child scope can be {@link #close() closed} at any time, but root scope can only
  * be closed after all its children have been closed, at which time any associated
  * cleanup action is executed (the associated memory segment is freed).
  * Besides thread-confined checked scopes, {@linkplain #createUnchecked(Thread, Object, Runnable)}
- * method may be used passing {@code null} as the "owner" thread to create an
- * unchecked scope that doesn't check for thread-confinement or temporal bounds.
+ * method may be used passing {@code null} as the "owner" thread to create a
+ * scope that doesn't check for thread-confinement while its temporal bounds are
+ * enforced reliably only under condition that thread that closes the scope is also
+ * the single thread performing the checked access or there is an external synchronization
+ * in place that prevents concurrent access and closing of the scope.
  */
 abstract class MemoryScope {
 
     /**
      * Creates a root MemoryScope with given ref, cleanupAction and current
@@ -182,16 +185,14 @@
      *                               method is executed outside owning thread
      *                               in checked scope
      */
     @ForceInline
     final void checkValidState() {
-        if (owner != null) {
-            if (owner != Thread.currentThread()) {
-                throw new IllegalStateException("Attempted access outside owning thread");
-            }
-            checkAliveConfined(this);
+        if (owner != null && owner != Thread.currentThread()) {
+            throw new IllegalStateException("Attempted access outside owning thread");
         }
+        checkAliveConfined(this);
     }
 
     /**
      * Checks that this scope is still alive.
      *
