diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
@@ -51,18 +51,18 @@
     private static final boolean skipZeroMemory = GetBooleanAction.privilegedGetProperty("jdk.internal.foreign.skipZeroMemory");
 
     final long min;
 
     @ForceInline
-    NativeMemorySegmentImpl(long min, long length, int mask, Thread owner, MemoryScope scope) {
-        super(length, mask, owner, scope);
+    NativeMemorySegmentImpl(long min, long length, int mask, MemoryScope scope) {
+        super(length, mask, scope);
         this.min = min;
     }
 
     @Override
-    NativeMemorySegmentImpl dup(long offset, long size, int mask, Thread owner, MemoryScope scope) {
-        return new NativeMemorySegmentImpl(min + offset, size, mask, owner, scope);
+    NativeMemorySegmentImpl dup(long offset, long size, int mask, MemoryScope scope) {
+        return new NativeMemorySegmentImpl(min + offset, size, mask, scope);
     }
 
     @Override
     ByteBuffer makeByteBuffer() {
         JavaNioAccess nioAccess = SharedSecrets.getJavaNioAccess();
@@ -92,19 +92,20 @@
         if (!skipZeroMemory) {
             unsafe.setMemory(buf, alignedSize, (byte)0);
         }
         long alignedBuf = Utils.alignUp(buf, alignmentBytes);
         MemoryScope scope = MemoryScope.create(null, () -> unsafe.freeMemory(buf));
-        MemorySegment segment = new NativeMemorySegmentImpl(buf, alignedSize, defaultAccessModes(alignedSize),
-                Thread.currentThread(), scope);
+        MemorySegment segment = new NativeMemorySegmentImpl(buf, alignedSize,
+                                                            defaultAccessModes(alignedSize),
+                                                            scope);
         if (alignedSize != bytesSize) {
             long delta = alignedBuf - buf;
             segment = segment.asSlice(delta, bytesSize);
         }
         return segment;
     }
 
     public static MemorySegment makeNativeSegmentUnchecked(MemoryAddress min, long bytesSize, Thread owner, Runnable cleanup, Object attachment) {
-        MemoryScope scope = MemoryScope.create(attachment, cleanup);
-        return new NativeMemorySegmentImpl(min.toRawLongValue(), bytesSize, defaultAccessModes(bytesSize), owner, scope);
+        MemoryScope scope = MemoryScope.createUnchecked(attachment, cleanup, owner);
+        return new NativeMemorySegmentImpl(min.toRawLongValue(), bytesSize, defaultAccessModes(bytesSize), scope);
     }
 }
