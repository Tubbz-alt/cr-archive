diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
@@ -46,11 +46,11 @@
  * When a child scope is acquired from another child scope, it is actually acquired from
  * the root scope. There is only a single level of children. All child scopes are peers.
  * A child scope can be {@link #close() closed} at any time, but root scope can only
  * be closed after all its children have been closed, at which time any associated
  * cleanup action is executed (the associated memory segment is freed).
- * Besides thread-confined checked scopes, {@linkplain #createUnchecked(Object, Runnable, Thread)}
+ * Besides thread-confined checked scopes, {@linkplain #createUnchecked(Thread, Object, Runnable)}
  * method may be used passing {@code null} as the "owner" thread to create an
  * unchecked scope that doesn't check for thread-confinement or temporal bounds.
  */
 abstract class MemoryScope {
 
@@ -79,17 +79,17 @@
      * must strictly be called in given owner thread or else IllegalStateException is thrown.
      * If given owner thread is null, the returned MemoryScope is unchecked, meaning
      * that all methods may be called in any thread and that {@link #checkValidState()}
      * does not check for temporal bounds.
      *
-     * @param ref           an optional reference to an instance that needs to be kept reachable
-     * @param cleanupAction an optional cleanup action to be executed when returned scope is closed
      * @param owner         the desired owner thread. If {@code owner == null},
      *                      the returned scope is <em>not</em> thread-confined and not checked.
+     * @param ref           an optional reference to an instance that needs to be kept reachable
+     * @param cleanupAction an optional cleanup action to be executed when returned scope is closed
      * @return a root MemoryScope
      */
-    static MemoryScope createUnchecked(Object ref, Runnable cleanupAction, Thread owner) {
+    static MemoryScope createUnchecked(Thread owner, Object ref, Runnable cleanupAction) {
         return new Root(owner, ref, cleanupAction);
     }
 
     private final Thread owner;
     boolean closed; // = false
@@ -121,11 +121,11 @@
      */
     abstract MemoryScope acquire();
 
     /**
      * Closes this scope, executing any cleanup action if this is the root scope.
-     * This method may only be called in "owner" thread of this scope unless the
+     * This method may only be called in the "owner" thread of this scope unless the
      * scope is a root scope with no owner thread - i.e. is not checked.
      *
      * @throws IllegalStateException if this scope is already closed or if this is
      *                               a root scope and there is/are still active child
      *                               scope(s) or if this method is called outside of
@@ -133,29 +133,29 @@
      */
     abstract void close();
 
     /**
      * Duplicates this scope with given new "owner" thread and {@link #close() closes} it.
-     * If this is a root scope, new root scope is returned, this root scope is closed but
-     * eventual cleanup action is not executed yet - it is inherited by duped scope.
-     * If this is a child scope, new child scope is returned.
-     * This method may only be called in "owner" thread of this scope unless the
+     * If this is a root scope, a new root scope is returned; this root scope is closed, but
+     * without executing the cleanup action, which is instead transferred to the duped scope.
+     * If this is a child scope, a new child scope is returned.
+     * This method may only be called in the "owner" thread of this scope unless the
      * scope is a root scope with no owner thread - i.e. is not checked.
      * The returned instance may be published unsafely to and used in any thread,
      * but methods that explicitly state that they may only be called in "owner" thread,
      * must strictly be called in given new "owner" thread
      * or else IllegalStateException is thrown.
      *
-     * @param owner new owner thread of the returned MemoryScope
+     * @param newOwner new owner thread of the returned MemoryScope
      * @return a duplicate of this scope
      * @throws NullPointerException  if given owner thread is null
      * @throws IllegalStateException if this scope is already closed or if this is
      *                               a root scope and there is/are still active child
      *                               scope(s) or if this method is called outside of
      *                               owner thread in checked scope
      */
-    abstract MemoryScope dup(Thread owner);
+    abstract MemoryScope dup(Thread newOwner);
 
     /**
      * Returns "owner" thread of this scope.
      *
      * @return owner thread (or null for unchecked scope)
@@ -244,23 +244,28 @@
                     lock.unlockRead(stamp);
             }
         }
 
         @Override
-        MemoryScope dup(Thread owner) {
-            Objects.requireNonNull(owner, "owner");
-            return closeOrDup(owner);
+        MemoryScope dup(Thread newOwner) {
+            Objects.requireNonNull(newOwner, "newOwner");
+            // pre-allocate duped scope so we don't get OOME later and be left with this scope closed
+            var duped = new Root(newOwner, ref, cleanupAction);
+            justClose();
+            return duped;
         }
 
         @Override
         void close() {
-            closeOrDup(null);
+            justClose();
+            if (cleanupAction != null) {
+                cleanupAction.run();
+            }
         }
 
-        private MemoryScope closeOrDup(Thread newOwner) {
-            // pre-allocate duped scope so we don't get OOME later and be left with this scope closed
-            var duped = newOwner == null ? null : new Root(newOwner, ref, cleanupAction);
+        @ForceInline
+        private void justClose() {
             // enter critical section - no acquires are possible past this point
             long stamp = lock.writeLock();
             try {
                 checkAliveConfined(); // plain read is enough here (full write lock)
                 // check for absence of active acquired children
@@ -271,20 +276,10 @@
                 closed = true; // plain write is enough here (full write lock)
             } finally {
                 // leave critical section
                 lock.unlockWrite(stamp);
             }
-
-            // do close or dup
-            if (duped == null) {
-                if (cleanupAction != null) {
-                    cleanupAction.run();
-                }
-                return null;
-            } else {
-                return duped;
-            }
         }
 
         private final class Child extends MemoryScope {
 
             private Child(Thread owner) {
