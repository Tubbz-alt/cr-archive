diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/AbstractMemorySegmentImpl.java
@@ -66,26 +66,24 @@
 
     final static JavaNioAccess nioAccess = SharedSecrets.getJavaNioAccess();
 
     final long length;
     final int mask;
-    final Thread owner;
     final MemoryScope scope;
 
     @ForceInline
-    AbstractMemorySegmentImpl(long length, int mask, Thread owner, MemoryScope scope) {
+    AbstractMemorySegmentImpl(long length, int mask, MemoryScope scope) {
         this.length = length;
         this.mask = mask;
-        this.owner = owner;
         this.scope = scope;
     }
 
     abstract long min();
 
     abstract Object base();
 
-    abstract AbstractMemorySegmentImpl dup(long offset, long size, int mask, Thread owner, MemoryScope scope);
+    abstract AbstractMemorySegmentImpl dup(long offset, long size, int mask, MemoryScope scope);
 
     abstract ByteBuffer makeByteBuffer();
 
     static int defaultAccessModes(long size) {
         return (enableSmallSegments && size < Integer.MAX_VALUE) ?
@@ -98,11 +96,11 @@
         checkBounds(offset, newSize);
         return asSliceNoCheck(offset, newSize);
     }
 
     private AbstractMemorySegmentImpl asSliceNoCheck(long offset, long newSize) {
-        return dup(offset, newSize, mask, owner, scope);
+        return dup(offset, newSize, mask, scope);
     }
 
     @SuppressWarnings("unchecked")
     public static <S extends MemorySegment> Spliterator<S> spliterator(S segment, SequenceLayout sequenceLayout) {
         ((AbstractMemorySegmentImpl)segment).checkValidState();
@@ -143,25 +141,25 @@
         return length;
     }
 
     @Override
     public final boolean isAlive() {
-        return scope.isAliveThreadSafe();
+        return scope.isAlive();
     }
 
     @Override
     public Thread ownerThread() {
-        return owner;
+        return scope.ownerThread();
     }
 
     @Override
     public AbstractMemorySegmentImpl withAccessModes(int accessModes) {
         checkAccessModes(accessModes);
         if ((~accessModes() & accessModes) != 0) {
             throw new UnsupportedOperationException("Cannot acquire more access modes");
         }
-        return dup(0, length, (mask & ~ACCESS_MASK) | accessModes, owner, scope);
+        return dup(0, length, (mask & ~ACCESS_MASK) | accessModes, scope);
     }
 
     @Override
     public boolean hasAccessModes(int accessModes) {
         checkAccessModes(accessModes);
@@ -175,19 +173,18 @@
     }
 
     @Override
     public MemorySegment withOwnerThread(Thread newOwner) {
         Objects.requireNonNull(newOwner);
-        checkValidState();
         if (!isSet(HANDOFF)) {
             throw unsupportedAccessMode(HANDOFF);
         }
-        if (owner == newOwner) {
+        if (scope.ownerThread() == newOwner) {
             throw new IllegalArgumentException("Segment already owned by thread: " + newOwner);
         } else {
             try {
-                return dup(0L, length, mask, newOwner, scope.dup());
+                return dup(0L, length, mask, scope.dup(newOwner));
             } finally {
                 //flush read/writes to segment memory before returning the new segment
                 VarHandle.fullFence();
             }
         }
@@ -196,11 +193,10 @@
     @Override
     public final void close() {
         if (!isSet(CLOSE)) {
             throw unsupportedAccessMode(CLOSE);
         }
-        checkValidState();
         closeNoCheck();
     }
 
     private final void closeNoCheck() {
         scope.close();
@@ -208,11 +204,11 @@
 
     final AbstractMemorySegmentImpl acquire() {
         if (Thread.currentThread() != ownerThread() && !isSet(ACQUIRE)) {
             throw unsupportedAccessMode(ACQUIRE);
         }
-        return dup(0, length, mask, Thread.currentThread(), scope.acquire());
+        return dup(0, length, mask, scope.acquire());
     }
 
     @Override
     public final byte[] toByteArray() {
         checkIntSize("byte[]");
@@ -225,25 +221,22 @@
     boolean isSmall() {
         return isSet(SMALL);
     }
 
     void checkRange(long offset, long length, boolean writeAccess) {
-        checkValidState();
+        scope.checkValidState();
         if (writeAccess && !isSet(WRITE)) {
             throw unsupportedAccessMode(WRITE);
         } else if (!writeAccess && !isSet(READ)) {
             throw unsupportedAccessMode(READ);
         }
         checkBounds(offset, length);
     }
 
     @Override
     public final void checkValidState() {
-        if (owner != null && owner != Thread.currentThread()) {
-            throw new IllegalStateException("Attempt to access segment outside owning thread");
-        }
-        scope.checkAliveConfined();
+        scope.checkValidState();
     }
 
     // Helper methods
 
     private boolean isSet(int mask) {
@@ -413,33 +406,32 @@
         int size = limit - pos;
 
         AbstractMemorySegmentImpl bufferSegment = (AbstractMemorySegmentImpl)nioAccess.bufferSegment(bb);
         final MemoryScope bufferScope;
         int modes;
-        final Thread owner;
         if (bufferSegment != null) {
             bufferScope = bufferSegment.scope;
             modes = bufferSegment.mask;
-            owner = bufferSegment.owner;
         } else {
             bufferScope = MemoryScope.create(bb, null);
             modes = defaultAccessModes(size);
-            owner = Thread.currentThread();
         }
         if (bb.isReadOnly()) {
             modes &= ~WRITE;
         }
         if (base != null) {
-            return new HeapMemorySegmentImpl<>(bbAddress + pos, () -> (byte[])base, size, modes, owner, bufferScope);
+            return new HeapMemorySegmentImpl<>(bbAddress + pos, () -> (byte[])base, size, modes, bufferScope);
         } else if (unmapper == null) {
-            return new NativeMemorySegmentImpl(bbAddress + pos, size, modes, owner, bufferScope);
+            return new NativeMemorySegmentImpl(bbAddress + pos, size, modes, bufferScope);
         } else {
-            return new MappedMemorySegmentImpl(bbAddress + pos, unmapper, size, modes, owner, bufferScope);
+            return new MappedMemorySegmentImpl(bbAddress + pos, unmapper, size, modes, bufferScope);
         }
     }
 
-    public static AbstractMemorySegmentImpl NOTHING = new AbstractMemorySegmentImpl(0, 0, null, MemoryScope.GLOBAL) {
+    public static AbstractMemorySegmentImpl NOTHING = new AbstractMemorySegmentImpl(
+        0, 0, MemoryScope.createUnchecked(null, null, null)
+    ) {
         @Override
         ByteBuffer makeByteBuffer() {
             throw new UnsupportedOperationException();
         }
 
@@ -452,10 +444,10 @@
         Object base() {
             return null;
         }
 
         @Override
-        AbstractMemorySegmentImpl dup(long offset, long size, int mask, Thread owner, MemoryScope scope) {
+        AbstractMemorySegmentImpl dup(long offset, long size, int mask, MemoryScope scope) {
             throw new UnsupportedOperationException();
         }
     };
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/HeapMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/HeapMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/HeapMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/HeapMemorySegmentImpl.java
@@ -50,12 +50,12 @@
 
     final long offset;
     final Supplier<H> baseProvider;
 
     @ForceInline
-    HeapMemorySegmentImpl(long offset, Supplier<H> baseProvider, long length, int mask, Thread owner, MemoryScope scope) {
-        super(length, mask, owner, scope);
+    HeapMemorySegmentImpl(long offset, Supplier<H> baseProvider, long length, int mask, MemoryScope scope) {
+        super(length, mask, scope);
         this.offset = offset;
         this.baseProvider = baseProvider;
     }
 
     @Override
@@ -67,12 +67,12 @@
     long min() {
         return offset;
     }
 
     @Override
-    HeapMemorySegmentImpl<H> dup(long offset, long size, int mask, Thread owner, MemoryScope scope) {
-        return new HeapMemorySegmentImpl<H>(this.offset + offset, baseProvider, size, mask, owner, scope);
+    HeapMemorySegmentImpl<H> dup(long offset, long size, int mask, MemoryScope scope) {
+        return new HeapMemorySegmentImpl<>(this.offset + offset, baseProvider, size, mask, scope);
     }
 
     @Override
     ByteBuffer makeByteBuffer() {
         if (!(base() instanceof byte[])) {
@@ -120,8 +120,8 @@
     }
 
     static <Z> HeapMemorySegmentImpl<Z> makeHeapSegment(Supplier<Z> obj, int length, int base, int scale) {
         int byteSize = length * scale;
         MemoryScope scope = MemoryScope.create(null, null);
-        return new HeapMemorySegmentImpl<>(base, obj, byteSize, defaultAccessModes(byteSize), Thread.currentThread(), scope);
+        return new HeapMemorySegmentImpl<>(base, obj, byteSize, defaultAccessModes(byteSize), scope);
     }
 }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MappedMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MappedMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MappedMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MappedMemorySegmentImpl.java
@@ -46,24 +46,24 @@
  */
 public class MappedMemorySegmentImpl extends NativeMemorySegmentImpl implements MappedMemorySegment {
 
     private final UnmapperProxy unmapper;
 
-    MappedMemorySegmentImpl(long min, UnmapperProxy unmapper, long length, int mask, Thread owner, MemoryScope scope) {
-        super(min, length, mask, owner, scope);
+    MappedMemorySegmentImpl(long min, UnmapperProxy unmapper, long length, int mask, MemoryScope scope) {
+        super(min, length, mask, scope);
         this.unmapper = unmapper;
     }
 
     @Override
     ByteBuffer makeByteBuffer() {
         JavaNioAccess nioAccess = SharedSecrets.getJavaNioAccess();
         return nioAccess.newMappedByteBuffer(unmapper, min, (int)length, null, this);
     }
 
     @Override
-    MappedMemorySegmentImpl dup(long offset, long size, int mask, Thread owner, MemoryScope scope) {
-        return new MappedMemorySegmentImpl(min + offset, unmapper, size, mask, owner, scope);
+    MappedMemorySegmentImpl dup(long offset, long size, int mask, MemoryScope scope) {
+        return new MappedMemorySegmentImpl(min + offset, unmapper, size, mask, scope);
     }
 
     // mapped segment methods
 
 
@@ -103,11 +103,11 @@
         if (bytesSize <= 0) throw new IllegalArgumentException("Requested bytes size must be > 0.");
         try (FileChannelImpl channelImpl = (FileChannelImpl)FileChannel.open(path, openOptions(mapMode))) {
             UnmapperProxy unmapperProxy = channelImpl.mapInternal(mapMode, 0L, bytesSize);
             MemoryScope scope = MemoryScope.create(null, unmapperProxy::unmap);
             return new MappedMemorySegmentImpl(unmapperProxy.address(), unmapperProxy, bytesSize,
-                    defaultAccessModes(bytesSize), Thread.currentThread(), scope);
+                    defaultAccessModes(bytesSize), scope);
         }
     }
 
     private static OpenOption[] openOptions(FileChannel.MapMode mapMode) {
         if (mapMode == FileChannel.MapMode.READ_ONLY) {
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
@@ -24,130 +24,205 @@
  *
  */
 
 package jdk.internal.foreign;
 
+import jdk.internal.vm.annotation.ForceInline;
+
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.VarHandle;
+import java.util.Objects;
 import java.util.concurrent.atomic.LongAdder;
 import java.util.concurrent.locks.StampedLock;
 
 /**
- * This class manages the temporal bounds associated with a memory segment. A scope has a liveness bit, which is updated
- * when the scope is closed (this operation is triggered by {@link AbstractMemorySegmentImpl#close()}). Furthermore,
- * a scope is either root scope ({@link #create(Object, Runnable) created} when memory segment is allocated) or child scope
- * ({@link #acquire() acquired} from root scope). When a child scope is acquired from another child scope, it is actually
- * acquired from the root scope. There is only a single level of children. All child scopes are peers.
- * A child scope can be {@link #close() closed} at any time, but root scope can only be closed after all its children
- * have been closed, at which time any associated cleanup action is executed (the associated memory segment is freed).
+ * This class manages the temporal bounds associated with a memory segment as well
+ * as thread confinement.
+ * A scope has a liveness bit, which is updated when the scope is closed
+ * (this operation is triggered by {@link AbstractMemorySegmentImpl#close()}).
+ * A scope may also have an associated "owner" thread that confines some operations to
+ * associated owner thread such as {@link #close()} or {@link #dup(Thread)}.
+ * Furthermore, a scope is either root scope ({@link #create(Object, Runnable) created}
+ * when memory segment is allocated) or child scope ({@link #acquire() acquired} from root scope).
+ * When a child scope is acquired from another child scope, it is actually acquired from
+ * the root scope. There is only a single level of children. All child scopes are peers.
+ * A child scope can be {@link #close() closed} at any time, but root scope can only
+ * be closed after all its children have been closed, at which time any associated
+ * cleanup action is executed (the associated memory segment is freed).
+ * Besides thread-confined checked scopes, {@linkplain #createUnchecked(Thread, Object, Runnable)}
+ * method may be used passing {@code null} as the "owner" thread to create an
+ * unchecked scope that doesn't check for thread-confinement or temporal bounds.
  */
 abstract class MemoryScope {
-    public static final MemoryScope GLOBAL = new Root(null, null);
 
     /**
-     * Creates a root MemoryScope with given ref and cleanupAction.
-     * The returned instance may be published unsafely to and used in any thread, but methods that explicitly state that
-     * they may only be called in "owner" thread, must strictly be called in single thread that has been selected to be the
-     * "owner" thread.
+     * Creates a root MemoryScope with given ref, cleanupAction and current
+     * thread as the "owner" thread.
+     * This method may be called in any thread.
+     * The returned instance may be published unsafely to and used in any thread,
+     * but methods that explicitly state that they may only be called in "owner" thread,
+     * must strictly be called in the thread that created the scope
+     * or else IllegalStateException is thrown.
      *
      * @param ref           an optional reference to an instance that needs to be kept reachable
      * @param cleanupAction an optional cleanup action to be executed when returned scope is closed
      * @return a root MemoryScope
      */
     static MemoryScope create(Object ref, Runnable cleanupAction) {
-        return new Root(ref, cleanupAction);
+        return new Root(Thread.currentThread(), ref, cleanupAction);
+    }
+
+    /**
+     * Creates a root MemoryScope with given ref, cleanupAction and "owner" thread.
+     * This method may be called in any thread.
+     * The returned instance may be published unsafely to and used in any thread,
+     * but methods that explicitly state that they may only be called in "owner" thread,
+     * must strictly be called in given owner thread or else IllegalStateException is thrown.
+     * If given owner thread is null, the returned MemoryScope is unchecked, meaning
+     * that all methods may be called in any thread and that {@link #checkValidState()}
+     * does not check for temporal bounds.
+     *
+     * @param owner         the desired owner thread. If {@code owner == null},
+     *                      the returned scope is <em>not</em> thread-confined and not checked.
+     * @param ref           an optional reference to an instance that needs to be kept reachable
+     * @param cleanupAction an optional cleanup action to be executed when returned scope is closed
+     * @return a root MemoryScope
+     */
+    static MemoryScope createUnchecked(Thread owner, Object ref, Runnable cleanupAction) {
+        return new Root(owner, ref, cleanupAction);
     }
 
-    boolean closed = false;
+    private final Thread owner;
+    boolean closed; // = false
     private static final VarHandle CLOSED;
 
     static {
         try {
             CLOSED = MethodHandles.lookup().findVarHandle(MemoryScope.class, "closed", boolean.class);
         } catch (Throwable ex) {
             throw new ExceptionInInitializerError(ex);
         }
     }
 
-    private MemoryScope() {
+    private MemoryScope(Thread owner) {
+        this.owner = owner;
     }
 
     /**
-     * Acquires a child scope (or peer scope if this is a child).
+     * Acquires a child scope (or peer scope if this is a child) with current
+     * thread as the "owner" thread.
      * This method may be called in any thread.
-     * The returned instance may be published unsafely to and used in any thread, but methods that explicitly state that
-     * they may only be called in "owner" thread, must strictly be called in single thread that has been selected to be the
-     * "owner" thread.
+     * The returned instance may be published unsafely to and used in any thread,
+     * but methods that explicitly state that they may only be called in "owner" thread,
+     * must strictly be called in the thread that acquired the scope
+     * or else IllegalStateException is thrown.
      *
      * @return a child (or peer) scope
      * @throws IllegalStateException if root scope is already closed
      */
     abstract MemoryScope acquire();
 
     /**
      * Closes this scope, executing any cleanup action if this is the root scope.
-     * This method may only be called in "owner" thread.
+     * This method may only be called in the "owner" thread of this scope unless the
+     * scope is a root scope with no owner thread - i.e. is not checked.
      *
      * @throws IllegalStateException if this scope is already closed or if this is
      *                               a root scope and there is/are still active child
-     *                               scope(s).
+     *                               scope(s) or if this method is called outside of
+     *                               owner thread in checked scope
      */
     abstract void close();
 
     /**
-     * Duplicates this scope and {@link #close() closes} it. If this is a root scope,
-     * new root scope is returned. If this is a child scope, new child scope is returned.
-     * This method may only be called in "owner" thread.
-     * The returned instance may be published unsafely to and used in any thread, but methods that explicitly state that
-     * they may only be called in "owner" thread, must strictly be called in single thread that has been selected to be the
-     * "owner" thread.
+     * Duplicates this scope with given new "owner" thread and {@link #close() closes} it.
+     * If this is a root scope, a new root scope is returned; this root scope is closed, but
+     * without executing the cleanup action, which is instead transferred to the duped scope.
+     * If this is a child scope, a new child scope is returned.
+     * This method may only be called in the "owner" thread of this scope unless the
+     * scope is a root scope with no owner thread - i.e. is not checked.
+     * The returned instance may be published unsafely to and used in any thread,
+     * but methods that explicitly state that they may only be called in "owner" thread,
+     * must strictly be called in given new "owner" thread
+     * or else IllegalStateException is thrown.
      *
+     * @param newOwner new owner thread of the returned MemoryScope
      * @return a duplicate of this scope
+     * @throws NullPointerException  if given owner thread is null
      * @throws IllegalStateException if this scope is already closed or if this is
      *                               a root scope and there is/are still active child
-     *                               scope(s).
+     *                               scope(s) or if this method is called outside of
+     *                               owner thread in checked scope
      */
-    abstract MemoryScope dup();
+    abstract MemoryScope dup(Thread newOwner);
+
+    /**
+     * Returns "owner" thread of this scope.
+     *
+     * @return owner thread (or null for unchecked scope)
+     */
+    final Thread ownerThread() {
+        return owner;
+    }
 
     /**
      * This method may be called in any thread.
      *
      * @return {@code true} if this scope is not closed yet.
      */
-    final boolean isAliveThreadSafe() {
+    final boolean isAlive() {
         return !((boolean)CLOSED.getVolatile(this));
     }
 
+    /**
+     * Checks that this scope is still alive and that this method is executed
+     * in the "owner" thread of this scope or this scope is unchecked (not associated
+     * with owner thread).
+     *
+     * @throws IllegalStateException if this scope is already closed or this
+     *                               method is executed outside owning thread
+     *                               in checked scope
+     */
+    @ForceInline
+    final void checkValidState() {
+        if (owner != null) {
+            if (owner != Thread.currentThread()) {
+                throw new IllegalStateException("Attempted access outside owning thread");
+            }
+            checkAliveConfined();
+        }
+    }
+
     /**
      * Checks that this scope is still alive.
-     * This method may only be called in "owner" thread.
+     * This method is a MemoryScope internal API and is package-private only
+     * as an implementation detail. Not for direct consumption from other classes.
      *
      * @throws IllegalStateException if this scope is already closed
      */
+    @ForceInline
     final void checkAliveConfined() {
         if (closed) {
             throw new IllegalStateException("This scope is already closed");
         }
     }
 
     private static final class Root extends MemoryScope {
+        private final StampedLock lock = new StampedLock();
         private final LongAdder acquired = new LongAdder();
         private final Object ref;
         private final Runnable cleanupAction;
 
-        private final StampedLock lock = new StampedLock();
-
-
-
-        private Root(Object ref, Runnable cleanupAction) {
+        private Root(Thread owner, Object ref, Runnable cleanupAction) {
+            super(owner);
             this.ref = ref;
             this.cleanupAction = cleanupAction;
         }
 
         @Override
         MemoryScope acquire() {
-            //try to optimistically acquire the lock
+            // try to optimistically acquire the lock
             long stamp = lock.tryOptimisticRead();
             try {
                 for (; ; stamp = lock.readLock()) {
                     if (stamp == 0L)
                         continue;
@@ -156,11 +231,11 @@
                     // increment acquires
                     acquired.increment();
                     // did a call to close() occur since we acquired the lock?
                     if (lock.validate(stamp)) {
                         // no, just return the acquired scope
-                        return new Child();
+                        return new Child(Thread.currentThread());
                     } else {
                         // yes, just back off and retry (close might have failed, after all)
                         acquired.decrement();
                     }
                 }
@@ -169,22 +244,28 @@
                     lock.unlockRead(stamp);
             }
         }
 
         @Override
-        MemoryScope dup() { // always called in owner thread
-            return closeOrDup(false);
+        MemoryScope dup(Thread newOwner) {
+            Objects.requireNonNull(newOwner, "newOwner");
+            // pre-allocate duped scope so we don't get OOME later and be left with this scope closed
+            var duped = new Root(newOwner, ref, cleanupAction);
+            justClose();
+            return duped;
         }
 
         @Override
-        void close() { // always called in owner thread
-            closeOrDup(true);
+        void close() {
+            justClose();
+            if (cleanupAction != null) {
+                cleanupAction.run();
+            }
         }
 
-        private MemoryScope closeOrDup(boolean close) {
-            // pre-allocate duped scope so we don't get OOME later and be left with this scope closed
-            var duped = close ? null : new Root(ref, cleanupAction);
+        @ForceInline
+        private void justClose() {
             // enter critical section - no acquires are possible past this point
             long stamp = lock.writeLock();
             try {
                 checkAliveConfined(); // plain read is enough here (full write lock)
                 // check for absence of active acquired children
@@ -195,44 +276,35 @@
                 closed = true; // plain write is enough here (full write lock)
             } finally {
                 // leave critical section
                 lock.unlockWrite(stamp);
             }
-
-            // do close or dup
-            if (close) {
-                if (cleanupAction != null) {
-                    cleanupAction.run();
-                }
-                return null;
-            } else {
-                return duped;
-            }
         }
 
         private final class Child extends MemoryScope {
 
-            private Child() {
+            private Child(Thread owner) {
+                super(owner);
             }
 
             @Override
             MemoryScope acquire() {
                 return Root.this.acquire();
             }
 
             @Override
-            MemoryScope dup() { // always called in owner thread
-                checkAliveConfined();
+            MemoryScope dup(Thread newOwner) {
+                checkValidState(); // child scope is always checked
                 // pre-allocate duped scope so we don't get OOME later and be left with this scope closed
-                var duped = new Child();
+                var duped = new Child(newOwner);
                 CLOSED.setVolatile(this, true);
                 return duped;
             }
 
             @Override
-            void close() { // always called in owner thread
-                checkAliveConfined();
+            void close() {
+                checkValidState(); // child scope is always checked
                 closed = true;
                 // following acts as a volatile write after plain write above so
                 // plain write gets flushed too (which is important for isAliveThreadSafe())
                 Root.this.acquired.decrement();
             }
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/NativeMemorySegmentImpl.java
@@ -51,18 +51,18 @@
     private static final boolean skipZeroMemory = GetBooleanAction.privilegedGetProperty("jdk.internal.foreign.skipZeroMemory");
 
     final long min;
 
     @ForceInline
-    NativeMemorySegmentImpl(long min, long length, int mask, Thread owner, MemoryScope scope) {
-        super(length, mask, owner, scope);
+    NativeMemorySegmentImpl(long min, long length, int mask, MemoryScope scope) {
+        super(length, mask, scope);
         this.min = min;
     }
 
     @Override
-    NativeMemorySegmentImpl dup(long offset, long size, int mask, Thread owner, MemoryScope scope) {
-        return new NativeMemorySegmentImpl(min + offset, size, mask, owner, scope);
+    NativeMemorySegmentImpl dup(long offset, long size, int mask, MemoryScope scope) {
+        return new NativeMemorySegmentImpl(min + offset, size, mask, scope);
     }
 
     @Override
     ByteBuffer makeByteBuffer() {
         JavaNioAccess nioAccess = SharedSecrets.getJavaNioAccess();
@@ -92,19 +92,20 @@
         if (!skipZeroMemory) {
             unsafe.setMemory(buf, alignedSize, (byte)0);
         }
         long alignedBuf = Utils.alignUp(buf, alignmentBytes);
         MemoryScope scope = MemoryScope.create(null, () -> unsafe.freeMemory(buf));
-        MemorySegment segment = new NativeMemorySegmentImpl(buf, alignedSize, defaultAccessModes(alignedSize),
-                Thread.currentThread(), scope);
+        MemorySegment segment = new NativeMemorySegmentImpl(buf, alignedSize,
+                                                            defaultAccessModes(alignedSize),
+                                                            scope);
         if (alignedSize != bytesSize) {
             long delta = alignedBuf - buf;
             segment = segment.asSlice(delta, bytesSize);
         }
         return segment;
     }
 
     public static MemorySegment makeNativeSegmentUnchecked(MemoryAddress min, long bytesSize, Thread owner, Runnable cleanup, Object attachment) {
-        MemoryScope scope = MemoryScope.create(attachment, cleanup);
-        return new NativeMemorySegmentImpl(min.toRawLongValue(), bytesSize, defaultAccessModes(bytesSize), owner, scope);
+        MemoryScope scope = MemoryScope.createUnchecked(owner, attachment, cleanup);
+        return new NativeMemorySegmentImpl(min.toRawLongValue(), bytesSize, defaultAccessModes(bytesSize), scope);
     }
 }
