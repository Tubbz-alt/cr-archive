diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Type.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Type.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Type.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Type.java
@@ -170,14 +170,12 @@
              * @return The primitive type (optional) layout.
              */
             public Optional<MemoryLayout> layout() {
                 return layout == null ?
                         Optional.empty() :
-                        Optional.of(layout.withAttribute(JEXTRACT_TYPE, this));
+                        Optional.of(layout);
             }
-
-            public static String JEXTRACT_TYPE = "jextract/type";
         }
 
         /**
          * The primitive type kind.
          * @return The primitive type kind.
diff a/test/jdk/tools/jextract/JextractToolRunner.java b/test/jdk/tools/jextract/JextractToolRunner.java
--- a/test/jdk/tools/jextract/JextractToolRunner.java
+++ b/test/jdk/tools/jextract/JextractToolRunner.java
@@ -36,10 +36,12 @@
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.attribute.BasicFileAttributes;
 import java.util.Arrays;
 import java.util.Objects;
 import java.util.spi.ToolProvider;
+
+import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayout.PathElement;
 import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.jextract.Type;
 import jdk.test.lib.util.FileUtils;
@@ -247,14 +249,12 @@
 
     protected MemoryLayout findLayout(Class<?> cls) {
         return findLayout(cls, "");
     }
 
-    protected static void checkFieldABIType(MemoryLayout layout, String fieldName, Type.Primitive.Kind expected) {
-        assertEquals(layout.select(PathElement.groupElement(fieldName)).attribute(Type.Primitive.Kind.JEXTRACT_TYPE)
-                                                                       .map(Type.Primitive.Kind.class::cast)
-                                                                       .orElseThrow(), expected);
+    protected static void checkField(MemoryLayout group, String fieldName, MemoryLayout expected) {
+        assertEquals(group.select(PathElement.groupElement(fieldName)), expected.withName(fieldName));
     }
 
     protected static class Loader implements AutoCloseable {
 
         private final URLClassLoader loader;
diff a/test/jdk/tools/jextract/RepeatedDeclsTest.java b/test/jdk/tools/jextract/RepeatedDeclsTest.java
--- a/test/jdk/tools/jextract/RepeatedDeclsTest.java
+++ b/test/jdk/tools/jextract/RepeatedDeclsTest.java
@@ -19,10 +19,11 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
+import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.jextract.Type;
 import org.testng.annotations.Test;
 
 import java.nio.file.Path;
 import jdk.incubator.foreign.GroupLayout;
@@ -97,18 +98,18 @@
 
     private void checkPoint(Class<?> pointCls) {
         MemoryLayout pointLayout = findLayout(pointCls);
         assertNotNull(pointLayout);
         assertTrue(((GroupLayout)pointLayout).isStruct());
-        checkFieldABIType(pointLayout, "i",  Type.Primitive.Kind.Int);
-        checkFieldABIType(pointLayout, "j",  Type.Primitive.Kind.Int);
+        checkField(pointLayout, "i", SystemABI.C_INT);
+        checkField(pointLayout, "j", SystemABI.C_INT);
     }
 
     private void checkPoint3D(Class<?> point3DCls) {
         MemoryLayout point3DLayout = findLayout(point3DCls);
         assertNotNull(point3DLayout);
         assertTrue(((GroupLayout)point3DLayout).isStruct());
-        checkFieldABIType(point3DLayout, "i",  Type.Primitive.Kind.Int);
-        checkFieldABIType(point3DLayout, "j",  Type.Primitive.Kind.Int);
-        checkFieldABIType(point3DLayout, "k",  Type.Primitive.Kind.Int);
+        checkField(point3DLayout, "i", SystemABI.C_INT);
+        checkField(point3DLayout, "j", SystemABI.C_INT);
+        checkField(point3DLayout, "k", SystemABI.C_INT);
     }
 }
diff a/test/jdk/tools/jextract/Test8240811.java b/test/jdk/tools/jextract/Test8240811.java
--- a/test/jdk/tools/jextract/Test8240811.java
+++ b/test/jdk/tools/jextract/Test8240811.java
@@ -22,10 +22,11 @@
  */
 
 import java.nio.file.Path;
 import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.jextract.Type;
 import org.testng.annotations.Test;
 import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.assertTrue;
 
@@ -51,24 +52,24 @@
             // check foo layout
             Class<?> fooCls = loader.loadClass("name_collision_h$Cfoo");
             MemoryLayout fooLayout = findLayout(fooCls);
             assertNotNull(fooLayout);
             assertTrue(((GroupLayout)fooLayout).isStruct());
-            checkFieldABIType(fooLayout, "x",  Type.Primitive.Kind.Int);
-            checkFieldABIType(fooLayout, "y",  Type.Primitive.Kind.Int);
-            checkFieldABIType(fooLayout, "z",  Type.Primitive.Kind.Int);
+            checkField(fooLayout, "x",  SystemABI.C_INT);
+            checkField(fooLayout, "y",  SystemABI.C_INT);
+            checkField(fooLayout, "z",  SystemABI.C_INT);
 
             MemoryLayout fooVarLayout = findLayout(cls, "foo");
             assertNotNull(fooVarLayout);
 
             // check foo2 layout
             Class<?> foo2Cls = loader.loadClass("name_collision_h$Cfoo2");
             MemoryLayout foo2Layout = findLayout(foo2Cls);
             assertNotNull(foo2Layout);
             assertTrue(((GroupLayout)foo2Layout).isUnion());
-            checkFieldABIType(foo2Layout, "i",  Type.Primitive.Kind.Int);
-            checkFieldABIType(foo2Layout, "l",  Type.Primitive.Kind.Long);
+            checkField(foo2Layout, "i",  SystemABI.C_INT);
+            checkField(foo2Layout, "l",  SystemABI.C_LONG);
 
             MemoryLayout foo2VarLayout = findLayout(cls, "foo2");
             assertNotNull(foo2VarLayout);
 
             MemoryLayout barVarLayout = findLayout(cls, "bar");
@@ -77,23 +78,23 @@
             // check bar layout
             Class<?> barCls = loader.loadClass("name_collision_h$Cbar");
             MemoryLayout barLayout = findLayout(barCls);
             assertNotNull(barLayout);
             assertTrue(((GroupLayout)barLayout).isStruct());
-            checkFieldABIType(barLayout, "f1",  Type.Primitive.Kind.Float);
-            checkFieldABIType(barLayout, "f2",  Type.Primitive.Kind.Float);
+            checkField(barLayout, "f1",  SystemABI.C_FLOAT);
+            checkField(barLayout, "f2",  SystemABI.C_FLOAT);
 
             MemoryLayout bar2VarLayout = findLayout(cls, "bar2");
             assertNotNull(bar2VarLayout);
 
             // check bar layout
             Class<?> bar2Cls = loader.loadClass("name_collision_h$Cbar2");
             MemoryLayout bar2Layout = findLayout(bar2Cls);
             assertNotNull(bar2Layout);
             assertTrue(((GroupLayout)bar2Layout).isUnion());
-            checkFieldABIType(bar2Layout, "f",  Type.Primitive.Kind.Float);
-            checkFieldABIType(bar2Layout, "d",  Type.Primitive.Kind.Double);
+            checkField(bar2Layout, "f",  SystemABI.C_FLOAT);
+            checkField(bar2Layout, "d",  SystemABI.C_DOUBLE);
         } finally {
             deleteDir(nameCollisionOutput);
         }
     }
 }
diff a/test/jdk/tools/jextract/UniondeclTest.java b/test/jdk/tools/jextract/UniondeclTest.java
--- a/test/jdk/tools/jextract/UniondeclTest.java
+++ b/test/jdk/tools/jextract/UniondeclTest.java
@@ -19,10 +19,11 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
+import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.jextract.Type;
 import org.testng.annotations.Test;
 import java.nio.file.Path;
 import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.MemoryAddress;
@@ -49,12 +50,12 @@
             // check IntOrFloat layout
             Class<?> intOrFloatCls = loader.loadClass("uniondecl_h$CIntOrFloat");
             GroupLayout intOrFloatLayout = (GroupLayout)findLayout(intOrFloatCls);
             assertNotNull(intOrFloatLayout);
             assertTrue(intOrFloatLayout.isUnion());
-            checkFieldABIType(intOrFloatLayout, "i",  Type.Primitive.Kind.Int);
-            checkFieldABIType(intOrFloatLayout, "f",  Type.Primitive.Kind.Float);
+            checkField(intOrFloatLayout, "i",  SystemABI.C_INT);
+            checkField(intOrFloatLayout, "f", SystemABI.C_FLOAT);
         } finally {
             deleteDir(uniondeclOutput);
         }
     }
 }
diff a/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java b/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java
--- a/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java
+++ b/test/jdk/tools/jextract/testClassGen/TestClassGeneration.java
@@ -34,11 +34,10 @@
  */
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
-import jdk.incubator.jextract.Type.Primitive;
 import org.testng.annotations.AfterClass;
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 
@@ -66,14 +65,10 @@
 
     private Path outputDir;
     private Loader loader;
     private Class<?> cls;
 
-    static MemoryLayout typed(MemoryLayout layout, Primitive.Kind kind) {
-        return layout.withAttribute(Primitive.Kind.JEXTRACT_TYPE, kind);
-    }
-
     @DataProvider
     public static Object[][] simpleConstants() {
         return new Object[][]{
             { "macro_byte",         byte.class,   (byte) 1                         },
             { "macro_short",        short.class, (short) 1                         },
@@ -115,30 +110,30 @@
     }
 
     @DataProvider
     public static Object[][] globals() {
         return new Object[][]{
-            { "global_byte",   byte.class,   typed(C_CHAR,  Primitive.Kind.Char),         (byte) 1  },
-            { "global_short",  short.class,  typed(C_SHORT,  Primitive.Kind.Short),      (short) 2  },
-            { "global_int",    int.class,    typed(C_INT,  Primitive.Kind.Int),                  3  },
-            { "global_long",   long.class,   typed(C_LONGLONG,  Primitive.Kind.LongLong),        4L },
-            { "global_float",  float.class,  typed(C_FLOAT,  Primitive.Kind.Float),              5F },
-            { "global_double", double.class, typed(C_DOUBLE,  Primitive.Kind.Double),            6D },
+            { "global_byte",   byte.class,   C_CHAR,   (byte) 1  },
+            { "global_short",  short.class,  C_SHORT, (short) 2  },
+            { "global_int",    int.class,    C_INT,           3  },
+            { "global_long",   long.class,   C_LONGLONG,      4L },
+            { "global_float",  float.class,  C_FLOAT,         5F },
+            { "global_double", double.class, C_DOUBLE,        6D },
         };
     }
 
     @DataProvider
     public static Object[][] structMembers() {
         return new Object[][] {
-            { "Foo", typed(C_CHAR.withName("c"), Primitive.Kind.Char),          byte.class,   (byte) 10  },
-            { "Foo", typed(C_SHORT.withName("s"), Primitive.Kind.Short),        short.class, (short) 10  },
-            { "Foo", typed(C_INT.withName("i"),  Primitive.Kind.Int),           int.class,           10  },
-            { "Foo", typed(C_LONGLONG.withName("ll"), Primitive.Kind.LongLong), long.class,          10L },
-            { "Foo", typed(C_FLOAT.withName("f"),  Primitive.Kind.Float),       float.class,         10F },
-            { "Foo", typed(C_DOUBLE.withName("d"),  Primitive.Kind.Double),     double.class,        10D },
-            { "Bar", typed(C_INT.withName("a"),  Primitive.Kind.Int),           int.class,           10 },
-            { "Bar", typed(C_INT.withName("b"),   Primitive.Kind.Int),          int.class,           10 },
+            { "Foo", C_CHAR.withName("c"),      byte.class,   (byte) 10  },
+            { "Foo", C_SHORT.withName("s"),     short.class, (short) 10  },
+            { "Foo", C_INT.withName("i"),       int.class,           10  },
+            { "Foo", C_LONGLONG.withName("ll"), long.class,          10L },
+            { "Foo", C_FLOAT.withName("f"),     float.class,         10F },
+            { "Foo", C_DOUBLE.withName("d"),    double.class,        10D },
+            { "Bar", C_INT.withName("a"),       int.class,           10 },
+            { "Bar", C_INT.withName("b"),       int.class,           10 },
         };
     }
 
     @DataProvider
     public static Object[][] functionalInterfaces() {
diff a/test/jdk/tools/jextract/testStruct/LibStructTest.java b/test/jdk/tools/jextract/testStruct/LibStructTest.java
--- a/test/jdk/tools/jextract/testStruct/LibStructTest.java
+++ b/test/jdk/tools/jextract/testStruct/LibStructTest.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 import jdk.incubator.foreign.GroupLayout;
+import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayout.PathElement;
 import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.jextract.Type;
 import org.testng.annotations.Test;
 
@@ -72,29 +73,27 @@
                 assertEquals(CPoint.y$get(addr, i), 65 + i);
             }
         }
     }
 
-    private static void checkFieldABIType(GroupLayout group, String fieldName, Type.Primitive.Kind expected) {
-        assertEquals(group.select(PathElement.groupElement(fieldName)).attribute(Type.Primitive.Kind.JEXTRACT_TYPE)
-                                                                      .map(Type.Primitive.Kind.class::cast)
-                                                                      .orElseThrow(), expected);
+    private static void checkField(GroupLayout group, String fieldName, MemoryLayout expected) {
+        assertEquals(group.select(PathElement.groupElement(fieldName)), expected.withName(fieldName));
     }
 
     @Test
     public void testFieldTypes() {
         GroupLayout g = (GroupLayout)CAllTypes.$LAYOUT();
-        checkFieldABIType(g, "sc", Type.Primitive.Kind.Char);
-        checkFieldABIType(g, "uc", Type.Primitive.Kind.Char);
-        checkFieldABIType(g, "s",  Type.Primitive.Kind.Short);
-        checkFieldABIType(g, "us", Type.Primitive.Kind.Short);
-        checkFieldABIType(g, "i",  Type.Primitive.Kind.Int);
-        checkFieldABIType(g, "ui", Type.Primitive.Kind.Int);
-        checkFieldABIType(g, "l",  Type.Primitive.Kind.Long);
-        checkFieldABIType(g, "ul", Type.Primitive.Kind.Long);
-        checkFieldABIType(g, "ll", Type.Primitive.Kind.LongLong);
-        checkFieldABIType(g, "ull",Type.Primitive.Kind.LongLong);
-        checkFieldABIType(g, "f",  Type.Primitive.Kind.Float);
-        checkFieldABIType(g, "d",  Type.Primitive.Kind.Double);
-        checkFieldABIType(g, "ld", Type.Primitive.Kind.LongDouble);
+        checkField(g, "sc", SystemABI.C_CHAR);
+        checkField(g, "uc", SystemABI.C_CHAR);
+        checkField(g, "s",  SystemABI.C_SHORT);
+        checkField(g, "us", SystemABI.C_SHORT);
+        checkField(g, "i",  SystemABI.C_INT);
+        checkField(g, "ui", SystemABI.C_INT);
+        checkField(g, "l",  SystemABI.C_LONG);
+        checkField(g, "ul", SystemABI.C_LONG);
+        checkField(g, "ll", SystemABI.C_LONGLONG);
+        checkField(g, "ull",SystemABI.C_LONGLONG);
+        checkField(g, "f",  SystemABI.C_FLOAT);
+        checkField(g, "d",  SystemABI.C_DOUBLE);
+        checkField(g, "ld", SystemABI.C_LONGDOUBLE);
     }
 }
