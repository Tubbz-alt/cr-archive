diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/Windowsx64ABI.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/Windowsx64ABI.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/Windowsx64ABI.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/Windowsx64ABI.java
@@ -26,20 +26,15 @@
 
 import jdk.incubator.foreign.FunctionDescriptor;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.SystemABI;
-import jdk.internal.foreign.MemoryAddressImpl;
-import jdk.internal.foreign.abi.x64.ArgumentClassImpl;
+import jdk.internal.foreign.abi.x64.sysv.ArgumentClassImpl;
 import jdk.internal.foreign.abi.*;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodType;
-import java.util.Objects;
-import java.util.Optional;
-
-import static jdk.incubator.foreign.MemoryLayouts.WinABI.*;
 
 /**
  * ABI implementation based on Windows ABI AMD64 supplement v.0.99.6
  */
 public class Windowsx64ABI implements SystemABI {
@@ -49,12 +44,10 @@
     public static final int MAX_VECTOR_ARGUMENT_REGISTERS = 4;
     public static final int MAX_VECTOR_RETURN_REGISTERS = 1;
     public static final int MAX_REGISTER_ARGUMENTS = 4;
     public static final int MAX_REGISTER_RETURNS = 1;
 
-    public static final String VARARGS_ATTRIBUTE_NAME = "abi/windows/varargs";
-
     private static Windowsx64ABI instance;
 
     public static Windowsx64ABI getInstance() {
         if (instance == null) {
             instance = new Windowsx64ABI();
@@ -72,42 +65,12 @@
         return UpcallStubs.upcallAddress(CallArranger.arrangeUpcall(target, target.type(), function));
     }
 
     @Override
     public String name() {
-        return SystemABI.ABI_WINDOWS;
-    }
-
-    @Override
-    public Optional<MemoryLayout> layoutFor(Type type) {
-        return switch (Objects.requireNonNull(type)) {
-            case BOOL -> Optional.of(C_BOOL);
-            case UNSIGNED_CHAR -> Optional.of(C_UCHAR);
-            case SIGNED_CHAR -> Optional.of(C_SCHAR);
-            case CHAR -> Optional.of(C_CHAR);
-            case SHORT -> Optional.of(C_SHORT);
-            case UNSIGNED_SHORT -> Optional.of(C_USHORT);
-            case INT -> Optional.of(C_INT);
-            case UNSIGNED_INT -> Optional.of(C_UINT);
-            case LONG -> Optional.of(C_LONG);
-            case UNSIGNED_LONG -> Optional.of(C_ULONG);
-            case LONG_LONG -> Optional.of(C_LONGLONG);
-            case UNSIGNED_LONG_LONG -> Optional.of(C_ULONGLONG);
-            case FLOAT -> Optional.of(C_FLOAT);
-            case DOUBLE -> Optional.of(C_DOUBLE);
-            case LONG_DOUBLE -> Optional.of(C_LONGDOUBLE);
-            case POINTER -> Optional.of(C_POINTER);
-            default -> Optional.empty();
-        };
+        return Win64.NAME;
     }
 
-    static ArgumentClassImpl argumentClassFor(Type type) {
-        return switch (Objects.requireNonNull(type)) {
-            case BOOL, UNSIGNED_CHAR, SIGNED_CHAR, CHAR, SHORT, UNSIGNED_SHORT,
-                INT, UNSIGNED_INT, LONG, UNSIGNED_LONG, LONG_LONG, UNSIGNED_LONG_LONG ->
-                    ArgumentClassImpl.INTEGER;
-            case FLOAT, DOUBLE -> ArgumentClassImpl.SSE;
-            case POINTER -> ArgumentClassImpl.POINTER;
-            default -> null;
-        };
+    static Win64.ArgumentClass argumentClassFor(MemoryLayout layout) {
+        return (Win64.ArgumentClass)layout.attribute(Win64.CLASS_ATTRIBUTE_NAME).get();
     }
 }
