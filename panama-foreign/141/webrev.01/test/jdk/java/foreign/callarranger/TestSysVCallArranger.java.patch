diff a/test/jdk/java/foreign/callarranger/TestSysVCallArranger.java b/test/jdk/java/foreign/callarranger/TestSysVCallArranger.java
--- a/test/jdk/java/foreign/callarranger/TestSysVCallArranger.java
+++ b/test/jdk/java/foreign/callarranger/TestSysVCallArranger.java
@@ -43,12 +43,11 @@
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 
 import java.lang.invoke.MethodType;
 
-import static jdk.incubator.foreign.MemoryLayouts.SysV.*;
-import static jdk.incubator.foreign.MemoryLayouts.WinABI.C_POINTER;
+import static jdk.incubator.foreign.SystemABI.SysV.*;
 import static jdk.internal.foreign.abi.Binding.*;
 import static jdk.internal.foreign.abi.x64.X86_64Architecture.*;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertFalse;
 import static org.testng.Assert.assertTrue;
@@ -283,29 +282,29 @@
 
 
     @DataProvider
     public static Object[][] structs() {
         return new Object[][]{
-            { MemoryLayout.ofStruct(C_ULONG), new Binding[]{
+            { MemoryLayout.ofStruct(C_LONG), new Binding[]{
                     dereference(0, long.class), move(rdi, long.class)
                 }
             },
-            { MemoryLayout.ofStruct(C_ULONG, C_ULONG), new Binding[]{
+            { MemoryLayout.ofStruct(C_LONG, C_LONG), new Binding[]{
                     dup(),
                     dereference(0, long.class), move(rdi, long.class),
                     dereference(8, long.class), move(rsi, long.class)
                 }
             },
-            { MemoryLayout.ofStruct(C_ULONG, C_ULONG, C_ULONG), new Binding[]{
+            { MemoryLayout.ofStruct(C_LONG, C_LONG, C_LONG), new Binding[]{
                     dup(),
                     dereference(0, long.class), move(stackStorage(0), long.class),
                     dup(),
                     dereference(8, long.class), move(stackStorage(1), long.class),
                     dereference(16, long.class), move(stackStorage(2), long.class)
                 }
             },
-            { MemoryLayout.ofStruct(C_ULONG, C_ULONG, C_ULONG, C_ULONG), new Binding[]{
+            { MemoryLayout.ofStruct(C_LONG, C_LONG, C_LONG, C_LONG), new Binding[]{
                     dup(),
                     dereference(0, long.class), move(stackStorage(0), long.class),
                     dup(),
                     dereference(8, long.class), move(stackStorage(1), long.class),
                     dup(),
@@ -316,11 +315,11 @@
         };
     }
 
     @Test
     public void testReturnRegisterStruct() {
-        MemoryLayout struct = MemoryLayout.ofStruct(C_ULONG, C_ULONG);
+        MemoryLayout struct = MemoryLayout.ofStruct(C_LONG, C_LONG);
 
         MethodType mt = MethodType.methodType(MemorySegment.class);
         FunctionDescriptor fd = FunctionDescriptor.of(struct);
         CallArranger.Bindings bindings = CallArranger.getBindings(mt, fd, false);
 
@@ -346,11 +345,11 @@
         assertEquals(bindings.nVectorArgs, 0);
     }
 
     @Test
     public void testIMR() {
-        MemoryLayout struct = MemoryLayout.ofStruct(C_ULONG, C_ULONG, C_ULONG);
+        MemoryLayout struct = MemoryLayout.ofStruct(C_LONG, C_LONG, C_LONG);
 
         MethodType mt = MethodType.methodType(MemorySegment.class);
         FunctionDescriptor fd = FunctionDescriptor.of(struct);
         CallArranger.Bindings bindings = CallArranger.getBindings(mt, fd, false);
 
