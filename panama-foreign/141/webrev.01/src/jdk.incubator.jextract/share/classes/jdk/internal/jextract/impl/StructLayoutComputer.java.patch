diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructLayoutComputer.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructLayoutComputer.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructLayoutComputer.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/StructLayoutComputer.java
@@ -26,10 +26,11 @@
 
 package jdk.internal.jextract.impl;
 
 import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.ValueLayout;
 import jdk.internal.clang.Cursor;
 import jdk.internal.clang.Type;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -138,11 +139,14 @@
         for (MemoryLayout l : layouts) {
             offset += l.bitSize();
             pendingFields.add(l);
             if (!pendingFields.isEmpty() && offset == storageSize) {
                 //emit new
-                newFields.add(bitfield(LayoutUtils.valueLayoutForSize(storageSize), pendingFields));
+                newFields.add(bitfield(
+                        (ValueLayout)LayoutUtils.valueLayoutForSize(storageSize)
+                                .layout().orElseThrow(() -> new IllegalStateException("Unsupported size: " + storageSize)),
+                        pendingFields));
                 pendingFields.clear();
                 offset = 0L;
             } else if (offset > storageSize) {
                 throw new IllegalStateException("Crossing storage unit boundaries");
             }
