diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/SourceLocation.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/SourceLocation.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/SourceLocation.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/SourceLocation.java
@@ -25,10 +25,11 @@
  */
 package jdk.internal.clang;
 
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.SystemABI;
 import jdk.internal.clang.libclang.Index_h;
 import jdk.internal.jextract.impl.LayoutUtils;
 
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -48,14 +49,14 @@
                  MemoryAddress line, MemoryAddress column, MemoryAddress offset);
     }
 
     @SuppressWarnings("unchecked")
     private Location getLocation(LocationFactory fn) {
-        try (MemorySegment file = MemorySegment.allocateNative(LayoutUtils.C_POINTER);
-             MemorySegment line = MemorySegment.allocateNative(LayoutUtils.C_INT);
-             MemorySegment col = MemorySegment.allocateNative(LayoutUtils.C_INT);
-             MemorySegment offset = MemorySegment.allocateNative(LayoutUtils.C_INT)) {
+        try (MemorySegment file = MemorySegment.allocateNative(SystemABI.C_POINTER);
+             MemorySegment line = MemorySegment.allocateNative(SystemABI.C_INT);
+             MemorySegment col = MemorySegment.allocateNative(SystemABI.C_INT);
+             MemorySegment offset = MemorySegment.allocateNative(SystemABI.C_INT)) {
 
             fn.get(loc, file.baseAddress(), line.baseAddress(), col.baseAddress(), offset.baseAddress());
             MemoryAddress fname = Utils.getPointer(file.baseAddress());
 
 
