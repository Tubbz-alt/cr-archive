diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/Index_h.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/Index_h.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/Index_h.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/clang/libclang/Index_h.java
@@ -32,16 +32,18 @@
 import jdk.incubator.foreign.LibraryLookup;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayout.PathElement;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.SystemABI;
+import jdk.incubator.jextract.Type;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.VarHandle;
 
-import static jdk.internal.jextract.impl.LayoutUtils.*; 
-        
+import static jdk.internal.jextract.impl.LayoutUtils.*;
+
 public final class Index_h {
 
     private static String libName() {
         if (System.getProperty("os.name").startsWith("Windows")) {
             return "libclang";
@@ -58,24 +60,24 @@
     public static final int CXError_Failure = (int)1L;
     public static final int CXError_Crashed = (int)2L;
     public static final int CXError_InvalidArguments = (int)3L;
     public static final int CXError_ASTReadError = (int)4L;
     public static final MemoryLayout CXString$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("data"),
-        C_INT.withName("private_flags"),
+        SystemABI.C_POINTER.withName("data"),
+        SystemABI.C_INT.withName("private_flags"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXString$private_flags = CXString$LAYOUT.varHandle(int.class, PathElement.groupElement("private_flags"));
     public static final int CXString$private_flags$get(MemorySegment seg) {
         return (int)CXString$private_flags.get(seg.baseAddress());
     }
     public static final void CXString$private_flags$set(MemorySegment seg, int x) {
         CXString$private_flags.set(seg.baseAddress(), x);
     }
     public static final MemoryLayout CXStringSet$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("Strings"),
-        C_INT.withName("Count"),
+        SystemABI.C_POINTER.withName("Strings"),
+        SystemABI.C_INT.withName("Count"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXStringSet$Count = CXStringSet$LAYOUT.varHandle(int.class, PathElement.groupElement("Count"));
     public static final int CXStringSet$Count$get(MemorySegment seg) {
         return (int)CXStringSet$Count.get(seg.baseAddress());
@@ -84,14 +86,14 @@
         CXStringSet$Count.set(seg.baseAddress(), x);
     }
     public static final MethodHandle clang_getCString = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCString",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
+        FunctionDescriptor.of(SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_POINTER.withName("data"),
-                C_INT.withName("private_flags"),
+                SystemABI.C_POINTER.withName("data"),
+                SystemABI.C_INT.withName("private_flags"),
                 MemoryLayout.ofPaddingBits(32)
             )
         )
     );
     public static final MemoryAddress clang_getCString (MemorySegment string) {
@@ -104,12 +106,12 @@
     public static final MethodHandle clang_disposeString = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_disposeString",
         "(Ljdk/incubator/foreign/MemorySegment;)V",
         FunctionDescriptor.ofVoid(
             MemoryLayout.ofStruct(
-                C_POINTER.withName("data"),
-                C_INT.withName("private_flags"),
+                SystemABI.C_POINTER.withName("data"),
+                SystemABI.C_INT.withName("private_flags"),
                 MemoryLayout.ofPaddingBits(32)
             )
         )
     );
     public static final void clang_disposeString (MemorySegment string) {
@@ -121,11 +123,11 @@
     }
     public static final MethodHandle clang_disposeStringSet = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_disposeStringSet",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_disposeStringSet (MemoryAddress set) {
         try {
             clang_disposeStringSet.invokeExact(set);
@@ -134,11 +136,11 @@
         }
     }
     public static final MethodHandle clang_getBuildSessionTimestamp = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getBuildSessionTimestamp",
         "()J",
-        FunctionDescriptor.of(C_LONGLONG)
+        FunctionDescriptor.of(SystemABI.C_LONGLONG)
     );
     public static final long clang_getBuildSessionTimestamp () {
         try {
             return (long)clang_getBuildSessionTimestamp.invokeExact();
         } catch (Throwable ex) {
@@ -146,12 +148,12 @@
         }
     }
     public static final MethodHandle clang_VirtualFileOverlay_create = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_VirtualFileOverlay_create",
         "(I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final MemoryAddress clang_VirtualFileOverlay_create (int options) {
         try {
             return (MemoryAddress)clang_VirtualFileOverlay_create.invokeExact(options);
@@ -160,14 +162,14 @@
         }
     }
     public static final MethodHandle clang_VirtualFileOverlay_addFileMapping = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_VirtualFileOverlay_addFileMapping",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_VirtualFileOverlay_addFileMapping (MemoryAddress x0, MemoryAddress virtualPath, MemoryAddress realPath) {
         try {
             return (int)clang_VirtualFileOverlay_addFileMapping.invokeExact(x0, virtualPath, realPath);
@@ -176,13 +178,13 @@
         }
     }
     public static final MethodHandle clang_VirtualFileOverlay_setCaseSensitivity = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_VirtualFileOverlay_setCaseSensitivity",
         "(Ljdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final int clang_VirtualFileOverlay_setCaseSensitivity (MemoryAddress x0, int caseSensitive) {
         try {
             return (int)clang_VirtualFileOverlay_setCaseSensitivity.invokeExact(x0, caseSensitive);
@@ -191,15 +193,15 @@
         }
     }
     public static final MethodHandle clang_VirtualFileOverlay_writeToBuffer = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_VirtualFileOverlay_writeToBuffer",
         "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_INT,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_VirtualFileOverlay_writeToBuffer (MemoryAddress x0, int options, MemoryAddress out_buffer_ptr, MemoryAddress out_buffer_size) {
         try {
             return (int)clang_VirtualFileOverlay_writeToBuffer.invokeExact(x0, options, out_buffer_ptr, out_buffer_size);
@@ -209,11 +211,11 @@
     }
     public static final MethodHandle clang_free = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_free",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_free (MemoryAddress buffer) {
         try {
             clang_free.invokeExact(buffer);
@@ -223,11 +225,11 @@
     }
     public static final MethodHandle clang_VirtualFileOverlay_dispose = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_VirtualFileOverlay_dispose",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_VirtualFileOverlay_dispose (MemoryAddress x0) {
         try {
             clang_VirtualFileOverlay_dispose.invokeExact(x0);
@@ -236,12 +238,12 @@
         }
     }
     public static final MethodHandle clang_ModuleMapDescriptor_create = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_ModuleMapDescriptor_create",
         "(I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final MemoryAddress clang_ModuleMapDescriptor_create (int options) {
         try {
             return (MemoryAddress)clang_ModuleMapDescriptor_create.invokeExact(options);
@@ -250,13 +252,13 @@
         }
     }
     public static final MethodHandle clang_ModuleMapDescriptor_setFrameworkModuleName = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_ModuleMapDescriptor_setFrameworkModuleName",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_ModuleMapDescriptor_setFrameworkModuleName (MemoryAddress x0, MemoryAddress name) {
         try {
             return (int)clang_ModuleMapDescriptor_setFrameworkModuleName.invokeExact(x0, name);
@@ -265,13 +267,13 @@
         }
     }
     public static final MethodHandle clang_ModuleMapDescriptor_setUmbrellaHeader = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_ModuleMapDescriptor_setUmbrellaHeader",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_ModuleMapDescriptor_setUmbrellaHeader (MemoryAddress x0, MemoryAddress name) {
         try {
             return (int)clang_ModuleMapDescriptor_setUmbrellaHeader.invokeExact(x0, name);
@@ -280,15 +282,15 @@
         }
     }
     public static final MethodHandle clang_ModuleMapDescriptor_writeToBuffer = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_ModuleMapDescriptor_writeToBuffer",
         "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_INT,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_ModuleMapDescriptor_writeToBuffer (MemoryAddress x0, int options, MemoryAddress out_buffer_ptr, MemoryAddress out_buffer_size) {
         try {
             return (int)clang_ModuleMapDescriptor_writeToBuffer.invokeExact(x0, options, out_buffer_ptr, out_buffer_size);
@@ -298,24 +300,24 @@
     }
     public static final MethodHandle clang_ModuleMapDescriptor_dispose = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_ModuleMapDescriptor_dispose",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_ModuleMapDescriptor_dispose (MemoryAddress x0) {
         try {
             clang_ModuleMapDescriptor_dispose.invokeExact(x0);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
     public static final MemoryLayout CXUnsavedFile$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("Filename"),
-        C_POINTER.withName("Contents"),
-        C_LONGLONG.withName("Length")
+        SystemABI.C_POINTER.withName("Filename"),
+        SystemABI.C_POINTER.withName("Contents"),
+        SystemABI.C_LONGLONG.withName("Length")
     ).withName("CXUnsavedFile");
     public static final VarHandle CXUnsavedFile$Length = CXUnsavedFile$LAYOUT.varHandle(long.class, PathElement.groupElement("Length"));
     public static final long CXUnsavedFile$Length$get(MemorySegment seg) {
         return (long)CXUnsavedFile$Length.get(seg.baseAddress());
     }
@@ -325,13 +327,13 @@
     public static final int CXAvailability_Available = (int)0L;
     public static final int CXAvailability_Deprecated = (int)1L;
     public static final int CXAvailability_NotAvailable = (int)2L;
     public static final int CXAvailability_NotAccessible = (int)3L;
     public static final MemoryLayout CXVersion$LAYOUT = MemoryLayout.ofStruct(
-        C_INT.withName("Major"),
-        C_INT.withName("Minor"),
-        C_INT.withName("Subminor")
+        SystemABI.C_INT.withName("Major"),
+        SystemABI.C_INT.withName("Minor"),
+        SystemABI.C_INT.withName("Subminor")
     ).withName("CXVersion");
     public static final VarHandle CXVersion$Major = CXVersion$LAYOUT.varHandle(int.class, PathElement.groupElement("Major"));
     public static final int CXVersion$Major$get(MemorySegment seg) {
         return (int)CXVersion$Major.get(seg.baseAddress());
     }
@@ -363,13 +365,13 @@
     public static final int CXCursor_ExceptionSpecificationKind_Unparsed = (int)8L;
     public static final int CXCursor_ExceptionSpecificationKind_NoThrow = (int)9L;
     public static final MethodHandle clang_createIndex = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_createIndex",
         "(II)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_INT,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final MemoryAddress clang_createIndex (int excludeDeclarationsFromPCH, int displayDiagnostics) {
         try {
             return (MemoryAddress)clang_createIndex.invokeExact(excludeDeclarationsFromPCH, displayDiagnostics);
@@ -379,11 +381,11 @@
     }
     public static final MethodHandle clang_disposeIndex = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_disposeIndex",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_disposeIndex (MemoryAddress index) {
         try {
             clang_disposeIndex.invokeExact(index);
@@ -397,12 +399,12 @@
     public static final int CXGlobalOpt_ThreadBackgroundPriorityForAll = (int)3L;
     public static final MethodHandle clang_CXIndex_setGlobalOptions = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXIndex_setGlobalOptions",
         "(Ljdk/incubator/foreign/MemoryAddress;I)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER,
-            C_INT
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final void clang_CXIndex_setGlobalOptions (MemoryAddress x0, int options) {
         try {
             clang_CXIndex_setGlobalOptions.invokeExact(x0, options);
@@ -411,12 +413,12 @@
         }
     }
     public static final MethodHandle clang_CXIndex_getGlobalOptions = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXIndex_getGlobalOptions",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_CXIndex_getGlobalOptions (MemoryAddress x0) {
         try {
             return (int)clang_CXIndex_getGlobalOptions.invokeExact(x0);
@@ -426,12 +428,12 @@
     }
     public static final MethodHandle clang_CXIndex_setInvocationEmissionPathOption = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXIndex_setInvocationEmissionPathOption",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_CXIndex_setInvocationEmissionPathOption (MemoryAddress x0, MemoryAddress Path) {
         try {
             clang_CXIndex_setInvocationEmissionPathOption.invokeExact(x0, Path);
@@ -441,15 +443,15 @@
     }
     public static final MethodHandle clang_getFileName = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getFileName",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_getFileName (MemoryAddress SFile) {
         try {
             return (MemorySegment)clang_getFileName.invokeExact(SFile);
@@ -458,30 +460,30 @@
         }
     }
     public static final MethodHandle clang_getFileTime = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getFileTime",
         "(Ljdk/incubator/foreign/MemoryAddress;)J",
-        FunctionDescriptor.of(C_LONGLONG,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_LONGLONG,
+            SystemABI.C_POINTER
         )
     );
     public static final long clang_getFileTime (MemoryAddress SFile) {
         try {
             return (long)clang_getFileTime.invokeExact(SFile);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
     public static final MemoryLayout CXFileUniqueID$LAYOUT = MemoryLayout.ofStruct(
-        MemoryLayout.ofSequence(3, C_LONGLONG).withName("data")
+        MemoryLayout.ofSequence(3, SystemABI.C_LONGLONG).withName("data")
     );
     public static final MethodHandle clang_getFileUniqueID = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getFileUniqueID",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_getFileUniqueID (MemoryAddress file, MemoryAddress outID) {
         try {
             return (int)clang_getFileUniqueID.invokeExact(file, outID);
@@ -490,13 +492,13 @@
         }
     }
     public static final MethodHandle clang_isFileMultipleIncludeGuarded = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isFileMultipleIncludeGuarded",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_isFileMultipleIncludeGuarded (MemoryAddress tu, MemoryAddress file) {
         try {
             return (int)clang_isFileMultipleIncludeGuarded.invokeExact(tu, file);
@@ -505,13 +507,13 @@
         }
     }
     public static final MethodHandle clang_getFile = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getFile",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_getFile (MemoryAddress tu, MemoryAddress file_name) {
         try {
             return (MemoryAddress)clang_getFile.invokeExact(tu, file_name);
@@ -520,14 +522,14 @@
         }
     }
     public static final MethodHandle clang_getFileContents = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getFileContents",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_getFileContents (MemoryAddress tu, MemoryAddress file, MemoryAddress size) {
         try {
             return (MemoryAddress)clang_getFileContents.invokeExact(tu, file, size);
@@ -536,13 +538,13 @@
         }
     }
     public static final MethodHandle clang_File_isEqual = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_File_isEqual",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_File_isEqual (MemoryAddress file1, MemoryAddress file2) {
         try {
             return (int)clang_File_isEqual.invokeExact(file1, file2);
@@ -552,40 +554,40 @@
     }
     public static final MethodHandle clang_File_tryGetRealPathName = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_File_tryGetRealPathName",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_File_tryGetRealPathName (MemoryAddress file) {
         try {
             return (MemorySegment)clang_File_tryGetRealPathName.invokeExact(file);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
     public static final MemoryLayout CXSourceLocation$LAYOUT = MemoryLayout.ofStruct(
-        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-        C_INT.withName("int_data"),
+        MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+        SystemABI.C_INT.withName("int_data"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXSourceLocation$int_data = CXSourceLocation$LAYOUT.varHandle(int.class, PathElement.groupElement("int_data"));
     public static final int CXSourceLocation$int_data$get(MemorySegment seg) {
         return (int)CXSourceLocation$int_data.get(seg.baseAddress());
     }
     public static final void CXSourceLocation$int_data$set(MemorySegment seg, int x) {
         CXSourceLocation$int_data.set(seg.baseAddress(), x);
     }
     public static final MemoryLayout CXSourceRange$LAYOUT = MemoryLayout.ofStruct(
-        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-        C_INT.withName("begin_int_data"),
-        C_INT.withName("end_int_data")
+        MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+        SystemABI.C_INT.withName("begin_int_data"),
+        SystemABI.C_INT.withName("end_int_data")
     );
     public static final VarHandle CXSourceRange$begin_int_data = CXSourceRange$LAYOUT.varHandle(int.class, PathElement.groupElement("begin_int_data"));
     public static final int CXSourceRange$begin_int_data$get(MemorySegment seg) {
         return (int)CXSourceRange$begin_int_data.get(seg.baseAddress());
     }
@@ -601,12 +603,12 @@
     }
     public static final MethodHandle clang_getNullLocation = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getNullLocation",
         "()Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ))
     );
     public static final MemorySegment clang_getNullLocation () {
         try {
@@ -616,19 +618,19 @@
         }
     }
     public static final MethodHandle clang_equalLocations = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_equalLocations",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             ),
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             )
         )
     );
     public static final int clang_equalLocations (MemorySegment loc1, MemorySegment loc2) {
@@ -640,18 +642,18 @@
     }
     public static final MethodHandle clang_getLocation = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getLocation",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
-            C_POINTER,
-            C_INT,
-            C_INT
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_getLocation (MemoryAddress tu, MemoryAddress file, int line, int column) {
         try {
             return (MemorySegment)clang_getLocation.invokeExact(tu, file, line, column);
@@ -661,17 +663,17 @@
     }
     public static final MethodHandle clang_getLocationForOffset = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getLocationForOffset",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
-            C_POINTER,
-            C_INT
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_getLocationForOffset (MemoryAddress tu, MemoryAddress file, int offset) {
         try {
             return (MemorySegment)clang_getLocationForOffset.invokeExact(tu, file, offset);
@@ -680,14 +682,14 @@
         }
     }
     public static final MethodHandle clang_Location_isInSystemHeader = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Location_isInSystemHeader",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             )
         )
     );
     public static final int clang_Location_isInSystemHeader (MemorySegment location) {
@@ -698,14 +700,14 @@
         }
     }
     public static final MethodHandle clang_Location_isFromMainFile = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Location_isFromMainFile",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             )
         )
     );
     public static final int clang_Location_isFromMainFile (MemorySegment location) {
@@ -717,13 +719,13 @@
     }
     public static final MethodHandle clang_getNullRange = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getNullRange",
         "()Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("begin_int_data"),
-            C_INT.withName("end_int_data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("begin_int_data"),
+            SystemABI.C_INT.withName("end_int_data")
         ))
     );
     public static final MemorySegment clang_getNullRange () {
         try {
             return (MemorySegment)clang_getNullRange.invokeExact();
@@ -733,22 +735,22 @@
     }
     public static final MethodHandle clang_getRange = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getRange",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("begin_int_data"),
-            C_INT.withName("end_int_data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("begin_int_data"),
+            SystemABI.C_INT.withName("end_int_data")
         ),
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             ),
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             )
         )
     );
     public static final MemorySegment clang_getRange (MemorySegment begin, MemorySegment end) {
@@ -759,20 +761,20 @@
         }
     }
     public static final MethodHandle clang_equalRanges = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_equalRanges",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("begin_int_data"),
-                C_INT.withName("end_int_data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("begin_int_data"),
+                SystemABI.C_INT.withName("end_int_data")
             ),
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("begin_int_data"),
-                C_INT.withName("end_int_data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("begin_int_data"),
+                SystemABI.C_INT.withName("end_int_data")
             )
         )
     );
     public static final int clang_equalRanges (MemorySegment range1, MemorySegment range2) {
         try {
@@ -782,15 +784,15 @@
         }
     }
     public static final MethodHandle clang_Range_isNull = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Range_isNull",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("begin_int_data"),
-                C_INT.withName("end_int_data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("begin_int_data"),
+                SystemABI.C_INT.withName("end_int_data")
             )
         )
     );
     public static final int clang_Range_isNull (MemorySegment range) {
         try {
@@ -802,18 +804,18 @@
     public static final MethodHandle clang_getExpansionLocation = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getExpansionLocation",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             ),
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_getExpansionLocation (MemorySegment location, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
         try {
             clang_getExpansionLocation.invokeExact(location, file, line, column, offset);
@@ -824,17 +826,17 @@
     public static final MethodHandle clang_getPresumedLocation = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getPresumedLocation",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             ),
-            C_POINTER,
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_getPresumedLocation (MemorySegment location, MemoryAddress filename, MemoryAddress line, MemoryAddress column) {
         try {
             clang_getPresumedLocation.invokeExact(location, filename, line, column);
@@ -845,18 +847,18 @@
     public static final MethodHandle clang_getInstantiationLocation = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getInstantiationLocation",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             ),
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_getInstantiationLocation (MemorySegment location, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
         try {
             clang_getInstantiationLocation.invokeExact(location, file, line, column, offset);
@@ -867,18 +869,18 @@
     public static final MethodHandle clang_getSpellingLocation = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getSpellingLocation",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             ),
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_getSpellingLocation (MemorySegment location, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
         try {
             clang_getSpellingLocation.invokeExact(location, file, line, column, offset);
@@ -889,18 +891,18 @@
     public static final MethodHandle clang_getFileLocation = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getFileLocation",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             ),
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_getFileLocation (MemorySegment location, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
         try {
             clang_getFileLocation.invokeExact(location, file, line, column, offset);
@@ -910,18 +912,18 @@
     }
     public static final MethodHandle clang_getRangeStart = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getRangeStart",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("begin_int_data"),
-                C_INT.withName("end_int_data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("begin_int_data"),
+                SystemABI.C_INT.withName("end_int_data")
             )
         )
     );
     public static final MemorySegment clang_getRangeStart (MemorySegment range) {
         try {
@@ -932,18 +934,18 @@
     }
     public static final MethodHandle clang_getRangeEnd = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getRangeEnd",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("begin_int_data"),
-                C_INT.withName("end_int_data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("begin_int_data"),
+                SystemABI.C_INT.withName("end_int_data")
             )
         )
     );
     public static final MemorySegment clang_getRangeEnd (MemorySegment range) {
         try {
@@ -951,13 +953,13 @@
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
     public static final MemoryLayout CXSourceRangeList$LAYOUT = MemoryLayout.ofStruct(
-        C_INT.withName("count"),
+        SystemABI.C_INT.withName("count"),
         MemoryLayout.ofPaddingBits(32),
-        C_POINTER.withName("ranges")
+        SystemABI.C_POINTER.withName("ranges")
     );
     public static final VarHandle CXSourceRangeList$count = CXSourceRangeList$LAYOUT.varHandle(int.class, PathElement.groupElement("count"));
     public static final int CXSourceRangeList$count$get(MemorySegment seg) {
         return (int)CXSourceRangeList$count.get(seg.baseAddress());
     }
@@ -965,13 +967,13 @@
         CXSourceRangeList$count.set(seg.baseAddress(), x);
     }
     public static final MethodHandle clang_getSkippedRanges = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getSkippedRanges",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_getSkippedRanges (MemoryAddress tu, MemoryAddress file) {
         try {
             return (MemoryAddress)clang_getSkippedRanges.invokeExact(tu, file);
@@ -980,12 +982,12 @@
         }
     }
     public static final MethodHandle clang_getAllSkippedRanges = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getAllSkippedRanges",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_getAllSkippedRanges (MemoryAddress tu) {
         try {
             return (MemoryAddress)clang_getAllSkippedRanges.invokeExact(tu);
@@ -995,11 +997,11 @@
     }
     public static final MethodHandle clang_disposeSourceRangeList = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_disposeSourceRangeList",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_disposeSourceRangeList (MemoryAddress ranges) {
         try {
             clang_disposeSourceRangeList.invokeExact(ranges);
@@ -1013,12 +1015,12 @@
     public static final int CXDiagnostic_Error = (int)3L;
     public static final int CXDiagnostic_Fatal = (int)4L;
     public static final MethodHandle clang_getNumDiagnosticsInSet = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getNumDiagnosticsInSet",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_getNumDiagnosticsInSet (MemoryAddress Diags) {
         try {
             return (int)clang_getNumDiagnosticsInSet.invokeExact(Diags);
@@ -1027,13 +1029,13 @@
         }
     }
     public static final MethodHandle clang_getDiagnosticInSet = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDiagnosticInSet",
         "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final MemoryAddress clang_getDiagnosticInSet (MemoryAddress Diags, int Index) {
         try {
             return (MemoryAddress)clang_getDiagnosticInSet.invokeExact(Diags, Index);
@@ -1046,14 +1048,14 @@
     public static final int CXLoadDiag_CannotLoad = (int)2L;
     public static final int CXLoadDiag_InvalidFile = (int)3L;
     public static final MethodHandle clang_loadDiagnostics = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_loadDiagnostics",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_loadDiagnostics (MemoryAddress file, MemoryAddress error, MemoryAddress errorString) {
         try {
             return (MemoryAddress)clang_loadDiagnostics.invokeExact(file, error, errorString);
@@ -1063,11 +1065,11 @@
     }
     public static final MethodHandle clang_disposeDiagnosticSet = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_disposeDiagnosticSet",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_disposeDiagnosticSet (MemoryAddress Diags) {
         try {
             clang_disposeDiagnosticSet.invokeExact(Diags);
@@ -1076,12 +1078,12 @@
         }
     }
     public static final MethodHandle clang_getChildDiagnostics = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getChildDiagnostics",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_getChildDiagnostics (MemoryAddress D) {
         try {
             return (MemoryAddress)clang_getChildDiagnostics.invokeExact(D);
@@ -1090,12 +1092,12 @@
         }
     }
     public static final MethodHandle clang_getNumDiagnostics = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getNumDiagnostics",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_getNumDiagnostics (MemoryAddress Unit) {
         try {
             return (int)clang_getNumDiagnostics.invokeExact(Unit);
@@ -1104,13 +1106,13 @@
         }
     }
     public static final MethodHandle clang_getDiagnostic = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDiagnostic",
         "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final MemoryAddress clang_getDiagnostic (MemoryAddress Unit, int Index) {
         try {
             return (MemoryAddress)clang_getDiagnostic.invokeExact(Unit, Index);
@@ -1119,12 +1121,12 @@
         }
     }
     public static final MethodHandle clang_getDiagnosticSetFromTU = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDiagnosticSetFromTU",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_getDiagnosticSetFromTU (MemoryAddress Unit) {
         try {
             return (MemoryAddress)clang_getDiagnosticSetFromTU.invokeExact(Unit);
@@ -1134,11 +1136,11 @@
     }
     public static final MethodHandle clang_disposeDiagnostic = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_disposeDiagnostic",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_disposeDiagnostic (MemoryAddress Diagnostic) {
         try {
             clang_disposeDiagnostic.invokeExact(Diagnostic);
@@ -1154,16 +1156,16 @@
     public static final int CXDiagnostic_DisplayCategoryName = (int)32L;
     public static final MethodHandle clang_formatDiagnostic = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_formatDiagnostic",
         "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
-            C_INT
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_formatDiagnostic (MemoryAddress Diagnostic, int Options) {
         try {
             return (MemorySegment)clang_formatDiagnostic.invokeExact(Diagnostic, Options);
@@ -1172,11 +1174,11 @@
         }
     }
     public static final MethodHandle clang_defaultDiagnosticDisplayOptions = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_defaultDiagnosticDisplayOptions",
         "()I",
-        FunctionDescriptor.of(C_INT)
+        FunctionDescriptor.of(SystemABI.C_INT)
     );
     public static final int clang_defaultDiagnosticDisplayOptions () {
         try {
             return (int)clang_defaultDiagnosticDisplayOptions.invokeExact();
         } catch (Throwable ex) {
@@ -1184,12 +1186,12 @@
         }
     }
     public static final MethodHandle clang_getDiagnosticSeverity = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDiagnosticSeverity",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_getDiagnosticSeverity (MemoryAddress x0) {
         try {
             return (int)clang_getDiagnosticSeverity.invokeExact(x0);
@@ -1199,15 +1201,15 @@
     }
     public static final MethodHandle clang_getDiagnosticLocation = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDiagnosticLocation",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_getDiagnosticLocation (MemoryAddress x0) {
         try {
             return (MemorySegment)clang_getDiagnosticLocation.invokeExact(x0);
@@ -1217,15 +1219,15 @@
     }
     public static final MethodHandle clang_getDiagnosticSpelling = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDiagnosticSpelling",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_getDiagnosticSpelling (MemoryAddress x0) {
         try {
             return (MemorySegment)clang_getDiagnosticSpelling.invokeExact(x0);
@@ -1235,16 +1237,16 @@
     }
     public static final MethodHandle clang_getDiagnosticOption = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDiagnosticOption",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_getDiagnosticOption (MemoryAddress Diag, MemoryAddress Disable) {
         try {
             return (MemorySegment)clang_getDiagnosticOption.invokeExact(Diag, Disable);
@@ -1253,12 +1255,12 @@
         }
     }
     public static final MethodHandle clang_getDiagnosticCategory = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDiagnosticCategory",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_getDiagnosticCategory (MemoryAddress x0) {
         try {
             return (int)clang_getDiagnosticCategory.invokeExact(x0);
@@ -1268,15 +1270,15 @@
     }
     public static final MethodHandle clang_getDiagnosticCategoryName = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDiagnosticCategoryName",
         "(I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_getDiagnosticCategoryName (int Category) {
         try {
             return (MemorySegment)clang_getDiagnosticCategoryName.invokeExact(Category);
@@ -1286,15 +1288,15 @@
     }
     public static final MethodHandle clang_getDiagnosticCategoryText = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDiagnosticCategoryText",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_getDiagnosticCategoryText (MemoryAddress x0) {
         try {
             return (MemorySegment)clang_getDiagnosticCategoryText.invokeExact(x0);
@@ -1303,12 +1305,12 @@
         }
     }
     public static final MethodHandle clang_getDiagnosticNumRanges = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDiagnosticNumRanges",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_getDiagnosticNumRanges (MemoryAddress x0) {
         try {
             return (int)clang_getDiagnosticNumRanges.invokeExact(x0);
@@ -1318,16 +1320,16 @@
     }
     public static final MethodHandle clang_getDiagnosticRange = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDiagnosticRange",
         "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("begin_int_data"),
-            C_INT.withName("end_int_data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("begin_int_data"),
+            SystemABI.C_INT.withName("end_int_data")
         ),
-            C_POINTER,
-            C_INT
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_getDiagnosticRange (MemoryAddress Diagnostic, int Range) {
         try {
             return (MemorySegment)clang_getDiagnosticRange.invokeExact(Diagnostic, Range);
@@ -1336,12 +1338,12 @@
         }
     }
     public static final MethodHandle clang_getDiagnosticNumFixIts = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDiagnosticNumFixIts",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_getDiagnosticNumFixIts (MemoryAddress Diagnostic) {
         try {
             return (int)clang_getDiagnosticNumFixIts.invokeExact(Diagnostic);
@@ -1351,17 +1353,17 @@
     }
     public static final MethodHandle clang_getDiagnosticFixIt = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDiagnosticFixIt",
         "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
-            C_INT,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_getDiagnosticFixIt (MemoryAddress Diagnostic, int FixIt, MemoryAddress ReplacementRange) {
         try {
             return (MemorySegment)clang_getDiagnosticFixIt.invokeExact(Diagnostic, FixIt, ReplacementRange);
@@ -1371,15 +1373,15 @@
     }
     public static final MethodHandle clang_getTranslationUnitSpelling = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getTranslationUnitSpelling",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_getTranslationUnitSpelling (MemoryAddress CTUnit) {
         try {
             return (MemorySegment)clang_getTranslationUnitSpelling.invokeExact(CTUnit);
@@ -1388,17 +1390,17 @@
         }
     }
     public static final MethodHandle clang_createTranslationUnitFromSourceFile = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_createTranslationUnitFromSourceFile",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_INT,
-            C_POINTER,
-            C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_createTranslationUnitFromSourceFile (MemoryAddress CIdx, MemoryAddress source_filename, int num_clang_command_line_args, MemoryAddress clang_command_line_args, int num_unsaved_files, MemoryAddress unsaved_files) {
         try {
             return (MemoryAddress)clang_createTranslationUnitFromSourceFile.invokeExact(CIdx, source_filename, num_clang_command_line_args, clang_command_line_args, num_unsaved_files, unsaved_files);
@@ -1407,13 +1409,13 @@
         }
     }
     public static final MethodHandle clang_createTranslationUnit = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_createTranslationUnit",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_createTranslationUnit (MemoryAddress CIdx, MemoryAddress ast_filename) {
         try {
             return (MemoryAddress)clang_createTranslationUnit.invokeExact(CIdx, ast_filename);
@@ -1422,14 +1424,14 @@
         }
     }
     public static final MethodHandle clang_createTranslationUnit2 = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_createTranslationUnit2",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_createTranslationUnit2 (MemoryAddress CIdx, MemoryAddress ast_filename, MemoryAddress out_TU) {
         try {
             return (int)clang_createTranslationUnit2.invokeExact(CIdx, ast_filename, out_TU);
@@ -1454,11 +1456,11 @@
     public static final int CXTranslationUnit_VisitImplicitAttributes = (int)8192L;
     public static final int CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = (int)16384L;
     public static final MethodHandle clang_defaultEditingTranslationUnitOptions = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_defaultEditingTranslationUnitOptions",
         "()I",
-        FunctionDescriptor.of(C_INT)
+        FunctionDescriptor.of(SystemABI.C_INT)
     );
     public static final int clang_defaultEditingTranslationUnitOptions () {
         try {
             return (int)clang_defaultEditingTranslationUnitOptions.invokeExact();
         } catch (Throwable ex) {
@@ -1466,18 +1468,18 @@
         }
     }
     public static final MethodHandle clang_parseTranslationUnit = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_parseTranslationUnit",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_INT,
-            C_POINTER,
-            C_INT,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final MemoryAddress clang_parseTranslationUnit (MemoryAddress CIdx, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, int options) {
         try {
             return (MemoryAddress)clang_parseTranslationUnit.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options);
@@ -1486,19 +1488,19 @@
         }
     }
     public static final MethodHandle clang_parseTranslationUnit2 = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_parseTranslationUnit2",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_INT,
-            C_POINTER,
-            C_INT,
-            C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_parseTranslationUnit2 (MemoryAddress CIdx, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, int options, MemoryAddress out_TU) {
         try {
             return (int)clang_parseTranslationUnit2.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU);
@@ -1507,19 +1509,19 @@
         }
     }
     public static final MethodHandle clang_parseTranslationUnit2FullArgv = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_parseTranslationUnit2FullArgv",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_INT,
-            C_POINTER,
-            C_INT,
-            C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_parseTranslationUnit2FullArgv (MemoryAddress CIdx, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, int options, MemoryAddress out_TU) {
         try {
             return (int)clang_parseTranslationUnit2FullArgv.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options, out_TU);
@@ -1529,12 +1531,12 @@
     }
     public static final int CXSaveTranslationUnit_None = (int)0L;
     public static final MethodHandle clang_defaultSaveOptions = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_defaultSaveOptions",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_defaultSaveOptions (MemoryAddress TU) {
         try {
             return (int)clang_defaultSaveOptions.invokeExact(TU);
@@ -1547,14 +1549,14 @@
     public static final int CXSaveError_TranslationErrors = (int)2L;
     public static final int CXSaveError_InvalidTU = (int)3L;
     public static final MethodHandle clang_saveTranslationUnit = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_saveTranslationUnit",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final int clang_saveTranslationUnit (MemoryAddress TU, MemoryAddress FileName, int options) {
         try {
             return (int)clang_saveTranslationUnit.invokeExact(TU, FileName, options);
@@ -1563,12 +1565,12 @@
         }
     }
     public static final MethodHandle clang_suspendTranslationUnit = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_suspendTranslationUnit",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_suspendTranslationUnit (MemoryAddress x0) {
         try {
             return (int)clang_suspendTranslationUnit.invokeExact(x0);
@@ -1578,11 +1580,11 @@
     }
     public static final MethodHandle clang_disposeTranslationUnit = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_disposeTranslationUnit",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_disposeTranslationUnit (MemoryAddress x0) {
         try {
             clang_disposeTranslationUnit.invokeExact(x0);
@@ -1592,12 +1594,12 @@
     }
     public static final int CXReparse_None = (int)0L;
     public static final MethodHandle clang_defaultReparseOptions = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_defaultReparseOptions",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_defaultReparseOptions (MemoryAddress TU) {
         try {
             return (int)clang_defaultReparseOptions.invokeExact(TU);
@@ -1606,15 +1608,15 @@
         }
     }
     public static final MethodHandle clang_reparseTranslationUnit = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_reparseTranslationUnit",
         "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_INT,
-            C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final int clang_reparseTranslationUnit (MemoryAddress TU, int num_unsaved_files, MemoryAddress unsaved_files, int options) {
         try {
             return (int)clang_reparseTranslationUnit.invokeExact(TU, num_unsaved_files, unsaved_files, options);
@@ -1641,25 +1643,25 @@
     public static final int CXTUResourceUsage_First = (int)1L;
     public static final int CXTUResourceUsage_Last = (int)14L;
     public static final MethodHandle clang_getTUResourceUsageName = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getTUResourceUsageName",
         "(I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final MemoryAddress clang_getTUResourceUsageName (int kind) {
         try {
             return (MemoryAddress)clang_getTUResourceUsageName.invokeExact(kind);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
     public static final MemoryLayout CXTUResourceUsageEntry$LAYOUT = MemoryLayout.ofStruct(
-        C_INT.withName("kind"),
+        SystemABI.C_INT.withName("kind"),
         MemoryLayout.ofPaddingBits(32),
-        C_LONGLONG.withName("amount")
+        SystemABI.C_LONGLONG.withName("amount")
     ).withName("CXTUResourceUsageEntry");
     public static final VarHandle CXTUResourceUsageEntry$kind = CXTUResourceUsageEntry$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
     public static final int CXTUResourceUsageEntry$kind$get(MemorySegment seg) {
         return (int)CXTUResourceUsageEntry$kind.get(seg.baseAddress());
     }
@@ -1672,14 +1674,14 @@
     }
     public static final void CXTUResourceUsageEntry$amount$set(MemorySegment seg, long x) {
         CXTUResourceUsageEntry$amount.set(seg.baseAddress(), x);
     }
     public static final MemoryLayout CXTUResourceUsage$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("data"),
-        C_INT.withName("numEntries"),
+        SystemABI.C_POINTER.withName("data"),
+        SystemABI.C_INT.withName("numEntries"),
         MemoryLayout.ofPaddingBits(32),
-        C_POINTER.withName("entries")
+        SystemABI.C_POINTER.withName("entries")
     ).withName("CXTUResourceUsage");
     public static final VarHandle CXTUResourceUsage$numEntries = CXTUResourceUsage$LAYOUT.varHandle(int.class, PathElement.groupElement("numEntries"));
     public static final int CXTUResourceUsage$numEntries$get(MemorySegment seg) {
         return (int)CXTUResourceUsage$numEntries.get(seg.baseAddress());
     }
@@ -1688,16 +1690,16 @@
     }
     public static final MethodHandle clang_getCXTUResourceUsage = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCXTUResourceUsage",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("numEntries"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("numEntries"),
             MemoryLayout.ofPaddingBits(32),
-            C_POINTER.withName("entries")
+            SystemABI.C_POINTER.withName("entries")
         ).withName("CXTUResourceUsage"),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_getCXTUResourceUsage (MemoryAddress TU) {
         try {
             return (MemorySegment)clang_getCXTUResourceUsage.invokeExact(TU);
@@ -1708,14 +1710,14 @@
     public static final MethodHandle clang_disposeCXTUResourceUsage = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_disposeCXTUResourceUsage",
         "(Ljdk/incubator/foreign/MemorySegment;)V",
         FunctionDescriptor.ofVoid(
             MemoryLayout.ofStruct(
-                C_POINTER.withName("data"),
-                C_INT.withName("numEntries"),
+                SystemABI.C_POINTER.withName("data"),
+                SystemABI.C_INT.withName("numEntries"),
                 MemoryLayout.ofPaddingBits(32),
-                C_POINTER.withName("entries")
+                SystemABI.C_POINTER.withName("entries")
             ).withName("CXTUResourceUsage")
         )
     );
     public static final void clang_disposeCXTUResourceUsage (MemorySegment usage) {
         try {
@@ -1725,12 +1727,12 @@
         }
     }
     public static final MethodHandle clang_getTranslationUnitTargetInfo = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getTranslationUnitTargetInfo",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_getTranslationUnitTargetInfo (MemoryAddress CTUnit) {
         try {
             return (MemoryAddress)clang_getTranslationUnitTargetInfo.invokeExact(CTUnit);
@@ -1740,11 +1742,11 @@
     }
     public static final MethodHandle clang_TargetInfo_dispose = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_TargetInfo_dispose",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_TargetInfo_dispose (MemoryAddress Info) {
         try {
             clang_TargetInfo_dispose.invokeExact(Info);
@@ -1754,15 +1756,15 @@
     }
     public static final MethodHandle clang_TargetInfo_getTriple = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_TargetInfo_getTriple",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_TargetInfo_getTriple (MemoryAddress Info) {
         try {
             return (MemorySegment)clang_TargetInfo_getTriple.invokeExact(Info);
@@ -1771,12 +1773,12 @@
         }
     }
     public static final MethodHandle clang_TargetInfo_getPointerWidth = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_TargetInfo_getPointerWidth",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_TargetInfo_getPointerWidth (MemoryAddress Info) {
         try {
             return (int)clang_TargetInfo_getPointerWidth.invokeExact(Info);
@@ -2038,13 +2040,13 @@
     public static final int CXCursor_FriendDecl = (int)603L;
     public static final int CXCursor_FirstExtraDecl = (int)600L;
     public static final int CXCursor_LastExtraDecl = (int)603L;
     public static final int CXCursor_OverloadCandidate = (int)700L;
     public static final MemoryLayout CXCursor$LAYOUT = MemoryLayout.ofStruct(
-        C_INT.withName("kind"),
-        C_INT.withName("xdata"),
-        MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+        SystemABI.C_INT.withName("kind"),
+        SystemABI.C_INT.withName("xdata"),
+        MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
     );
     public static final VarHandle CXCursor$kind = CXCursor$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
     public static final int CXCursor$kind$get(MemorySegment seg) {
         return (int)CXCursor$kind.get(seg.baseAddress());
     }
@@ -2060,13 +2062,13 @@
     }
     public static final MethodHandle clang_getNullCursor = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getNullCursor",
         "()Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ))
     );
     public static final MemorySegment clang_getNullCursor () {
         try {
             return (MemorySegment)clang_getNullCursor.invokeExact();
@@ -2076,15 +2078,15 @@
     }
     public static final MethodHandle clang_getTranslationUnitCursor = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getTranslationUnitCursor",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_getTranslationUnitCursor (MemoryAddress x0) {
         try {
             return (MemorySegment)clang_getTranslationUnitCursor.invokeExact(x0);
@@ -2093,20 +2095,20 @@
         }
     }
     public static final MethodHandle clang_equalCursors = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_equalCursors",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_equalCursors (MemorySegment x0, MemorySegment x1) {
         try {
@@ -2116,15 +2118,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_isNull = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_isNull",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_isNull (MemorySegment cursor) {
         try {
@@ -2134,15 +2136,15 @@
         }
     }
     public static final MethodHandle clang_hashCursor = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_hashCursor",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_hashCursor (MemorySegment x0) {
         try {
@@ -2152,15 +2154,15 @@
         }
     }
     public static final MethodHandle clang_getCursorKind = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorKind",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getCursorKind (MemorySegment x0) {
         try {
@@ -2170,12 +2172,12 @@
         }
     }
     public static final MethodHandle clang_isDeclaration = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isDeclaration",
         "(I)I",
-        FunctionDescriptor.of(C_INT,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final int clang_isDeclaration (int x0) {
         try {
             return (int)clang_isDeclaration.invokeExact(x0);
@@ -2184,15 +2186,15 @@
         }
     }
     public static final MethodHandle clang_isInvalidDeclaration = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isInvalidDeclaration",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_isInvalidDeclaration (MemorySegment x0) {
         try {
@@ -2202,12 +2204,12 @@
         }
     }
     public static final MethodHandle clang_isReference = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isReference",
         "(I)I",
-        FunctionDescriptor.of(C_INT,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final int clang_isReference (int x0) {
         try {
             return (int)clang_isReference.invokeExact(x0);
@@ -2216,12 +2218,12 @@
         }
     }
     public static final MethodHandle clang_isExpression = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isExpression",
         "(I)I",
-        FunctionDescriptor.of(C_INT,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final int clang_isExpression (int x0) {
         try {
             return (int)clang_isExpression.invokeExact(x0);
@@ -2230,12 +2232,12 @@
         }
     }
     public static final MethodHandle clang_isStatement = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isStatement",
         "(I)I",
-        FunctionDescriptor.of(C_INT,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final int clang_isStatement (int x0) {
         try {
             return (int)clang_isStatement.invokeExact(x0);
@@ -2244,12 +2246,12 @@
         }
     }
     public static final MethodHandle clang_isAttribute = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isAttribute",
         "(I)I",
-        FunctionDescriptor.of(C_INT,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final int clang_isAttribute (int x0) {
         try {
             return (int)clang_isAttribute.invokeExact(x0);
@@ -2258,15 +2260,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_hasAttrs = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_hasAttrs",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_hasAttrs (MemorySegment C) {
         try {
@@ -2276,12 +2278,12 @@
         }
     }
     public static final MethodHandle clang_isInvalid = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isInvalid",
         "(I)I",
-        FunctionDescriptor.of(C_INT,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final int clang_isInvalid (int x0) {
         try {
             return (int)clang_isInvalid.invokeExact(x0);
@@ -2290,12 +2292,12 @@
         }
     }
     public static final MethodHandle clang_isTranslationUnit = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isTranslationUnit",
         "(I)I",
-        FunctionDescriptor.of(C_INT,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final int clang_isTranslationUnit (int x0) {
         try {
             return (int)clang_isTranslationUnit.invokeExact(x0);
@@ -2304,12 +2306,12 @@
         }
     }
     public static final MethodHandle clang_isPreprocessing = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isPreprocessing",
         "(I)I",
-        FunctionDescriptor.of(C_INT,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final int clang_isPreprocessing (int x0) {
         try {
             return (int)clang_isPreprocessing.invokeExact(x0);
@@ -2318,12 +2320,12 @@
         }
     }
     public static final MethodHandle clang_isUnexposed = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isUnexposed",
         "(I)I",
-        FunctionDescriptor.of(C_INT,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final int clang_isUnexposed (int x0) {
         try {
             return (int)clang_isUnexposed.invokeExact(x0);
@@ -2337,15 +2339,15 @@
     public static final int CXLinkage_UniqueExternal = (int)3L;
     public static final int CXLinkage_External = (int)4L;
     public static final MethodHandle clang_getCursorLinkage = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorLinkage",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getCursorLinkage (MemorySegment cursor) {
         try {
@@ -2359,15 +2361,15 @@
     public static final int CXVisibility_Protected = (int)2L;
     public static final int CXVisibility_Default = (int)3L;
     public static final MethodHandle clang_getCursorVisibility = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorVisibility",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getCursorVisibility (MemorySegment cursor) {
         try {
@@ -2377,15 +2379,15 @@
         }
     }
     public static final MethodHandle clang_getCursorAvailability = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorAvailability",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getCursorAvailability (MemorySegment cursor) {
         try {
@@ -2394,33 +2396,33 @@
             throw new AssertionError(ex);
         }
     }
     public static final MemoryLayout CXPlatformAvailability$LAYOUT = MemoryLayout.ofStruct(
         MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ).withName("Platform"),
         MemoryLayout.ofStruct(
-            C_INT.withName("Major"),
-            C_INT.withName("Minor"),
-            C_INT.withName("Subminor")
+            SystemABI.C_INT.withName("Major"),
+            SystemABI.C_INT.withName("Minor"),
+            SystemABI.C_INT.withName("Subminor")
         ).withName("Introduced"),
         MemoryLayout.ofStruct(
-            C_INT.withName("Major"),
-            C_INT.withName("Minor"),
-            C_INT.withName("Subminor")
+            SystemABI.C_INT.withName("Major"),
+            SystemABI.C_INT.withName("Minor"),
+            SystemABI.C_INT.withName("Subminor")
         ).withName("Deprecated"),
         MemoryLayout.ofStruct(
-            C_INT.withName("Major"),
-            C_INT.withName("Minor"),
-            C_INT.withName("Subminor")
+            SystemABI.C_INT.withName("Major"),
+            SystemABI.C_INT.withName("Minor"),
+            SystemABI.C_INT.withName("Subminor")
         ).withName("Obsoleted"),
-        C_INT.withName("Unavailable"),
+        SystemABI.C_INT.withName("Unavailable"),
         MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ).withName("Message")
     ).withName("CXPlatformAvailability");
     public static final VarHandle CXPlatformAvailability$Unavailable = CXPlatformAvailability$LAYOUT.varHandle(int.class, PathElement.groupElement("Unavailable"));
     public static final int CXPlatformAvailability$Unavailable$get(MemorySegment seg) {
@@ -2430,22 +2432,22 @@
         CXPlatformAvailability$Unavailable.set(seg.baseAddress(), x);
     }
     public static final MethodHandle clang_getCursorPlatformAvailability = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorPlatformAvailability",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_INT
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final int clang_getCursorPlatformAvailability (MemorySegment cursor, MemoryAddress always_deprecated, MemoryAddress deprecated_message, MemoryAddress always_unavailable, MemoryAddress unavailable_message, MemoryAddress availability, int availability_size) {
         try {
             return (int)clang_getCursorPlatformAvailability.invokeExact(cursor, always_deprecated, deprecated_message, always_unavailable, unavailable_message, availability, availability_size);
@@ -2455,11 +2457,11 @@
     }
     public static final MethodHandle clang_disposeCXPlatformAvailability = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_disposeCXPlatformAvailability",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_disposeCXPlatformAvailability (MemoryAddress availability) {
         try {
             clang_disposeCXPlatformAvailability.invokeExact(availability);
@@ -2472,15 +2474,15 @@
     public static final int CXLanguage_ObjC = (int)2L;
     public static final int CXLanguage_CPlusPlus = (int)3L;
     public static final MethodHandle clang_getCursorLanguage = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorLanguage",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getCursorLanguage (MemorySegment cursor) {
         try {
@@ -2493,15 +2495,15 @@
     public static final int CXTLS_Dynamic = (int)1L;
     public static final int CXTLS_Static = (int)2L;
     public static final MethodHandle clang_getCursorTLSKind = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorTLSKind",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getCursorTLSKind (MemorySegment cursor) {
         try {
@@ -2511,15 +2513,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_getTranslationUnit = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getTranslationUnit",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
+        FunctionDescriptor.of(SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemoryAddress clang_Cursor_getTranslationUnit (MemorySegment x0) {
         try {
@@ -2529,11 +2531,11 @@
         }
     }
     public static final MethodHandle clang_createCXCursorSet = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_createCXCursorSet",
         "()Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER)
+        FunctionDescriptor.of(SystemABI.C_POINTER)
     );
     public static final MemoryAddress clang_createCXCursorSet () {
         try {
             return (MemoryAddress)clang_createCXCursorSet.invokeExact();
         } catch (Throwable ex) {
@@ -2542,11 +2544,11 @@
     }
     public static final MethodHandle clang_disposeCXCursorSet = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_disposeCXCursorSet",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_disposeCXCursorSet (MemoryAddress cset) {
         try {
             clang_disposeCXCursorSet.invokeExact(cset);
@@ -2555,16 +2557,16 @@
         }
     }
     public static final MethodHandle clang_CXCursorSet_contains = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXCursorSet_contains",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_CXCursorSet_contains (MemoryAddress cset, MemorySegment cursor) {
         try {
@@ -2574,16 +2576,16 @@
         }
     }
     public static final MethodHandle clang_CXCursorSet_insert = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXCursorSet_insert",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_CXCursorSet_insert (MemoryAddress cset, MemorySegment cursor) {
         try {
@@ -2594,18 +2596,18 @@
     }
     public static final MethodHandle clang_getCursorSemanticParent = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorSemanticParent",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getCursorSemanticParent (MemorySegment cursor) {
         try {
@@ -2616,18 +2618,18 @@
     }
     public static final MethodHandle clang_getCursorLexicalParent = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorLexicalParent",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getCursorLexicalParent (MemorySegment cursor) {
         try {
@@ -2639,16 +2641,16 @@
     public static final MethodHandle clang_getOverriddenCursors = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getOverriddenCursors",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_getOverriddenCursors (MemorySegment cursor, MemoryAddress overridden, MemoryAddress num_overridden) {
         try {
             clang_getOverriddenCursors.invokeExact(cursor, overridden, num_overridden);
@@ -2658,11 +2660,11 @@
     }
     public static final MethodHandle clang_disposeOverriddenCursors = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_disposeOverriddenCursors",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_disposeOverriddenCursors (MemoryAddress overridden) {
         try {
             clang_disposeOverriddenCursors.invokeExact(overridden);
@@ -2671,15 +2673,15 @@
         }
     }
     public static final MethodHandle clang_getIncludedFile = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getIncludedFile",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
+        FunctionDescriptor.of(SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemoryAddress clang_getIncludedFile (MemorySegment cursor) {
         try {
@@ -2690,18 +2692,18 @@
     }
     public static final MethodHandle clang_getCursor = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursor",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
-            C_POINTER,
+            SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             )
         )
     );
     public static final MemorySegment clang_getCursor (MemoryAddress x0, MemorySegment x1) {
@@ -2713,18 +2715,18 @@
     }
     public static final MethodHandle clang_getCursorLocation = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorLocation",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getCursorLocation (MemorySegment x0) {
         try {
@@ -2735,18 +2737,18 @@
     }
     public static final MethodHandle clang_getCursorExtent = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorExtent",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("begin_int_data"),
-            C_INT.withName("end_int_data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("begin_int_data"),
+            SystemABI.C_INT.withName("end_int_data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getCursorExtent (MemorySegment x0) {
         try {
@@ -2892,13 +2894,13 @@
     public static final int CXCallingConv_PreserveAll = (int)15L;
     public static final int CXCallingConv_AArch64VectorCall = (int)16L;
     public static final int CXCallingConv_Invalid = (int)100L;
     public static final int CXCallingConv_Unexposed = (int)200L;
     public static final MemoryLayout CXType$LAYOUT = MemoryLayout.ofStruct(
-        C_INT.withName("kind"),
+        SystemABI.C_INT.withName("kind"),
         MemoryLayout.ofPaddingBits(32),
-        MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+        MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
     );
     public static final VarHandle CXType$kind = CXType$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
     public static final int CXType$kind$get(MemorySegment seg) {
         return (int)CXType$kind.get(seg.baseAddress());
     }
@@ -2907,18 +2909,18 @@
     }
     public static final MethodHandle clang_getCursorType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getCursorType (MemorySegment C) {
         try {
@@ -2929,18 +2931,18 @@
     }
     public static final MethodHandle clang_getTypeSpelling = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getTypeSpelling",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getTypeSpelling (MemorySegment CT) {
         try {
@@ -2951,18 +2953,18 @@
     }
     public static final MethodHandle clang_getTypedefDeclUnderlyingType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getTypedefDeclUnderlyingType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getTypedefDeclUnderlyingType (MemorySegment C) {
         try {
@@ -2973,18 +2975,18 @@
     }
     public static final MethodHandle clang_getEnumDeclIntegerType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getEnumDeclIntegerType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getEnumDeclIntegerType (MemorySegment C) {
         try {
@@ -2994,15 +2996,15 @@
         }
     }
     public static final MethodHandle clang_getEnumConstantDeclValue = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getEnumConstantDeclValue",
         "(Ljdk/incubator/foreign/MemorySegment;)J",
-        FunctionDescriptor.of(C_LONGLONG,
+        FunctionDescriptor.of(SystemABI.C_LONGLONG,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final long clang_getEnumConstantDeclValue (MemorySegment C) {
         try {
@@ -3012,15 +3014,15 @@
         }
     }
     public static final MethodHandle clang_getEnumConstantDeclUnsignedValue = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getEnumConstantDeclUnsignedValue",
         "(Ljdk/incubator/foreign/MemorySegment;)J",
-        FunctionDescriptor.of(C_LONGLONG,
+        FunctionDescriptor.of(SystemABI.C_LONGLONG,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final long clang_getEnumConstantDeclUnsignedValue (MemorySegment C) {
         try {
@@ -3030,15 +3032,15 @@
         }
     }
     public static final MethodHandle clang_getFieldDeclBitWidth = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getFieldDeclBitWidth",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getFieldDeclBitWidth (MemorySegment C) {
         try {
@@ -3048,15 +3050,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_getNumArguments = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getNumArguments",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_getNumArguments (MemorySegment C) {
         try {
@@ -3067,20 +3069,20 @@
     }
     public static final MethodHandle clang_Cursor_getArgument = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getArgument",
         "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_Cursor_getArgument (MemorySegment C, int i) {
         try {
             return (MemorySegment)clang_Cursor_getArgument.invokeExact(C, i);
@@ -3099,15 +3101,15 @@
     public static final int CXTemplateArgumentKind_Pack = (int)8L;
     public static final int CXTemplateArgumentKind_Invalid = (int)9L;
     public static final MethodHandle clang_Cursor_getNumTemplateArguments = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getNumTemplateArguments",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_getNumTemplateArguments (MemorySegment C) {
         try {
@@ -3117,17 +3119,17 @@
         }
     }
     public static final MethodHandle clang_Cursor_getTemplateArgumentKind = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getTemplateArgumentKind",
         "(Ljdk/incubator/foreign/MemorySegment;I)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final int clang_Cursor_getTemplateArgumentKind (MemorySegment C, int I) {
         try {
             return (int)clang_Cursor_getTemplateArgumentKind.invokeExact(C, I);
@@ -3137,20 +3139,20 @@
     }
     public static final MethodHandle clang_Cursor_getTemplateArgumentType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getTemplateArgumentType",
         "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_Cursor_getTemplateArgumentType (MemorySegment C, int I) {
         try {
             return (MemorySegment)clang_Cursor_getTemplateArgumentType.invokeExact(C, I);
@@ -3159,17 +3161,17 @@
         }
     }
     public static final MethodHandle clang_Cursor_getTemplateArgumentValue = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getTemplateArgumentValue",
         "(Ljdk/incubator/foreign/MemorySegment;I)J",
-        FunctionDescriptor.of(C_LONGLONG,
+        FunctionDescriptor.of(SystemABI.C_LONGLONG,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final long clang_Cursor_getTemplateArgumentValue (MemorySegment C, int I) {
         try {
             return (long)clang_Cursor_getTemplateArgumentValue.invokeExact(C, I);
@@ -3178,17 +3180,17 @@
         }
     }
     public static final MethodHandle clang_Cursor_getTemplateArgumentUnsignedValue = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getTemplateArgumentUnsignedValue",
         "(Ljdk/incubator/foreign/MemorySegment;I)J",
-        FunctionDescriptor.of(C_LONGLONG,
+        FunctionDescriptor.of(SystemABI.C_LONGLONG,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final long clang_Cursor_getTemplateArgumentUnsignedValue (MemorySegment C, int I) {
         try {
             return (long)clang_Cursor_getTemplateArgumentUnsignedValue.invokeExact(C, I);
@@ -3197,20 +3199,20 @@
         }
     }
     public static final MethodHandle clang_equalTypes = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_equalTypes",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_equalTypes (MemorySegment A, MemorySegment B) {
         try {
@@ -3221,18 +3223,18 @@
     }
     public static final MethodHandle clang_getCanonicalType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCanonicalType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getCanonicalType (MemorySegment T) {
         try {
@@ -3242,15 +3244,15 @@
         }
     }
     public static final MethodHandle clang_isConstQualifiedType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isConstQualifiedType",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_isConstQualifiedType (MemorySegment T) {
         try {
@@ -3260,15 +3262,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_isMacroFunctionLike = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_isMacroFunctionLike",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_isMacroFunctionLike (MemorySegment C) {
         try {
@@ -3278,15 +3280,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_isMacroBuiltin = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_isMacroBuiltin",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_isMacroBuiltin (MemorySegment C) {
         try {
@@ -3296,15 +3298,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_isFunctionInlined = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_isFunctionInlined",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_isFunctionInlined (MemorySegment C) {
         try {
@@ -3314,15 +3316,15 @@
         }
     }
     public static final MethodHandle clang_isVolatileQualifiedType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isVolatileQualifiedType",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_isVolatileQualifiedType (MemorySegment T) {
         try {
@@ -3332,15 +3334,15 @@
         }
     }
     public static final MethodHandle clang_isRestrictQualifiedType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isRestrictQualifiedType",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_isRestrictQualifiedType (MemorySegment T) {
         try {
@@ -3350,15 +3352,15 @@
         }
     }
     public static final MethodHandle clang_getAddressSpace = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getAddressSpace",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getAddressSpace (MemorySegment T) {
         try {
@@ -3369,18 +3371,18 @@
     }
     public static final MethodHandle clang_getTypedefName = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getTypedefName",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getTypedefName (MemorySegment CT) {
         try {
@@ -3391,18 +3393,18 @@
     }
     public static final MethodHandle clang_getPointeeType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getPointeeType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getPointeeType (MemorySegment T) {
         try {
@@ -3413,18 +3415,18 @@
     }
     public static final MethodHandle clang_getTypeDeclaration = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getTypeDeclaration",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getTypeDeclaration (MemorySegment T) {
         try {
@@ -3435,18 +3437,18 @@
     }
     public static final MethodHandle clang_getDeclObjCTypeEncoding = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDeclObjCTypeEncoding",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getDeclObjCTypeEncoding (MemorySegment C) {
         try {
@@ -3457,18 +3459,18 @@
     }
     public static final MethodHandle clang_Type_getObjCEncoding = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getObjCEncoding",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_Type_getObjCEncoding (MemorySegment type) {
         try {
@@ -3479,15 +3481,15 @@
     }
     public static final MethodHandle clang_getTypeKindSpelling = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getTypeKindSpelling",
         "(I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_getTypeKindSpelling (int K) {
         try {
             return (MemorySegment)clang_getTypeKindSpelling.invokeExact(K);
@@ -3496,15 +3498,15 @@
         }
     }
     public static final MethodHandle clang_getFunctionTypeCallingConv = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getFunctionTypeCallingConv",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getFunctionTypeCallingConv (MemorySegment T) {
         try {
@@ -3515,18 +3517,18 @@
     }
     public static final MethodHandle clang_getResultType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getResultType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getResultType (MemorySegment T) {
         try {
@@ -3536,15 +3538,15 @@
         }
     }
     public static final MethodHandle clang_getExceptionSpecificationType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getExceptionSpecificationType",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getExceptionSpecificationType (MemorySegment T) {
         try {
@@ -3554,15 +3556,15 @@
         }
     }
     public static final MethodHandle clang_getNumArgTypes = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getNumArgTypes",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getNumArgTypes (MemorySegment T) {
         try {
@@ -3573,20 +3575,20 @@
     }
     public static final MethodHandle clang_getArgType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getArgType",
         "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             ),
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_getArgType (MemorySegment T, int i) {
         try {
             return (MemorySegment)clang_getArgType.invokeExact(T, i);
@@ -3596,18 +3598,18 @@
     }
     public static final MethodHandle clang_Type_getObjCObjectBaseType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getObjCObjectBaseType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_Type_getObjCObjectBaseType (MemorySegment T) {
         try {
@@ -3617,15 +3619,15 @@
         }
     }
     public static final MethodHandle clang_Type_getNumObjCProtocolRefs = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getNumObjCProtocolRefs",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Type_getNumObjCProtocolRefs (MemorySegment T) {
         try {
@@ -3636,20 +3638,20 @@
     }
     public static final MethodHandle clang_Type_getObjCProtocolDecl = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getObjCProtocolDecl",
         "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             ),
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_Type_getObjCProtocolDecl (MemorySegment T, int i) {
         try {
             return (MemorySegment)clang_Type_getObjCProtocolDecl.invokeExact(T, i);
@@ -3658,15 +3660,15 @@
         }
     }
     public static final MethodHandle clang_Type_getNumObjCTypeArgs = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getNumObjCTypeArgs",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Type_getNumObjCTypeArgs (MemorySegment T) {
         try {
@@ -3677,20 +3679,20 @@
     }
     public static final MethodHandle clang_Type_getObjCTypeArg = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getObjCTypeArg",
         "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             ),
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_Type_getObjCTypeArg (MemorySegment T, int i) {
         try {
             return (MemorySegment)clang_Type_getObjCTypeArg.invokeExact(T, i);
@@ -3699,15 +3701,15 @@
         }
     }
     public static final MethodHandle clang_isFunctionTypeVariadic = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isFunctionTypeVariadic",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_isFunctionTypeVariadic (MemorySegment T) {
         try {
@@ -3718,18 +3720,18 @@
     }
     public static final MethodHandle clang_getCursorResultType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorResultType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getCursorResultType (MemorySegment C) {
         try {
@@ -3739,15 +3741,15 @@
         }
     }
     public static final MethodHandle clang_getCursorExceptionSpecificationType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorExceptionSpecificationType",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getCursorExceptionSpecificationType (MemorySegment C) {
         try {
@@ -3757,15 +3759,15 @@
         }
     }
     public static final MethodHandle clang_isPODType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isPODType",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_isPODType (MemorySegment T) {
         try {
@@ -3776,18 +3778,18 @@
     }
     public static final MethodHandle clang_getElementType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getElementType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getElementType (MemorySegment T) {
         try {
@@ -3797,15 +3799,15 @@
         }
     }
     public static final MethodHandle clang_getNumElements = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getNumElements",
         "(Ljdk/incubator/foreign/MemorySegment;)J",
-        FunctionDescriptor.of(C_LONGLONG,
+        FunctionDescriptor.of(SystemABI.C_LONGLONG,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final long clang_getNumElements (MemorySegment T) {
         try {
@@ -3816,18 +3818,18 @@
     }
     public static final MethodHandle clang_getArrayElementType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getArrayElementType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getArrayElementType (MemorySegment T) {
         try {
@@ -3837,15 +3839,15 @@
         }
     }
     public static final MethodHandle clang_getArraySize = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getArraySize",
         "(Ljdk/incubator/foreign/MemorySegment;)J",
-        FunctionDescriptor.of(C_LONGLONG,
+        FunctionDescriptor.of(SystemABI.C_LONGLONG,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final long clang_getArraySize (MemorySegment T) {
         try {
@@ -3856,18 +3858,18 @@
     }
     public static final MethodHandle clang_Type_getNamedType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getNamedType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_Type_getNamedType (MemorySegment T) {
         try {
@@ -3877,15 +3879,15 @@
         }
     }
     public static final MethodHandle clang_Type_isTransparentTagTypedef = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_isTransparentTagTypedef",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Type_isTransparentTagTypedef (MemorySegment T) {
         try {
@@ -3899,15 +3901,15 @@
     public static final int CXTypeNullability_Unspecified = (int)2L;
     public static final int CXTypeNullability_Invalid = (int)3L;
     public static final MethodHandle clang_Type_getNullability = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getNullability",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Type_getNullability (MemorySegment T) {
         try {
@@ -3923,15 +3925,15 @@
     public static final int CXTypeLayoutError_InvalidFieldName = (int)-5L;
     public static final int CXTypeLayoutError_Undeduced = (int)-6L;
     public static final MethodHandle clang_Type_getAlignOf = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getAlignOf",
         "(Ljdk/incubator/foreign/MemorySegment;)J",
-        FunctionDescriptor.of(C_LONGLONG,
+        FunctionDescriptor.of(SystemABI.C_LONGLONG,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final long clang_Type_getAlignOf (MemorySegment T) {
         try {
@@ -3942,18 +3944,18 @@
     }
     public static final MethodHandle clang_Type_getClassType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getClassType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_Type_getClassType (MemorySegment T) {
         try {
@@ -3963,15 +3965,15 @@
         }
     }
     public static final MethodHandle clang_Type_getSizeOf = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getSizeOf",
         "(Ljdk/incubator/foreign/MemorySegment;)J",
-        FunctionDescriptor.of(C_LONGLONG,
+        FunctionDescriptor.of(SystemABI.C_LONGLONG,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final long clang_Type_getSizeOf (MemorySegment T) {
         try {
@@ -3981,17 +3983,17 @@
         }
     }
     public static final MethodHandle clang_Type_getOffsetOf = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getOffsetOf",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)J",
-        FunctionDescriptor.of(C_LONGLONG,
+        FunctionDescriptor.of(SystemABI.C_LONGLONG,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final long clang_Type_getOffsetOf (MemorySegment T, MemoryAddress S) {
         try {
             return (long)clang_Type_getOffsetOf.invokeExact(T, S);
@@ -4001,18 +4003,18 @@
     }
     public static final MethodHandle clang_Type_getModifiedType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getModifiedType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_Type_getModifiedType (MemorySegment T) {
         try {
@@ -4022,15 +4024,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_getOffsetOfField = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getOffsetOfField",
         "(Ljdk/incubator/foreign/MemorySegment;)J",
-        FunctionDescriptor.of(C_LONGLONG,
+        FunctionDescriptor.of(SystemABI.C_LONGLONG,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final long clang_Cursor_getOffsetOfField (MemorySegment C) {
         try {
@@ -4040,15 +4042,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_isAnonymous = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_isAnonymous",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_isAnonymous (MemorySegment C) {
         try {
@@ -4058,15 +4060,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_isAnonymousRecordDecl = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_isAnonymousRecordDecl",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_isAnonymousRecordDecl (MemorySegment C) {
         try {
@@ -4076,15 +4078,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_isInlineNamespace = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_isInlineNamespace",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_isInlineNamespace (MemorySegment C) {
         try {
@@ -4097,15 +4099,15 @@
     public static final int CXRefQualifier_LValue = (int)1L;
     public static final int CXRefQualifier_RValue = (int)2L;
     public static final MethodHandle clang_Type_getNumTemplateArguments = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getNumTemplateArguments",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Type_getNumTemplateArguments (MemorySegment T) {
         try {
@@ -4116,20 +4118,20 @@
     }
     public static final MethodHandle clang_Type_getTemplateArgumentAsType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getTemplateArgumentAsType",
         "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             ),
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_Type_getTemplateArgumentAsType (MemorySegment T, int i) {
         try {
             return (MemorySegment)clang_Type_getTemplateArgumentAsType.invokeExact(T, i);
@@ -4138,15 +4140,15 @@
         }
     }
     public static final MethodHandle clang_Type_getCXXRefQualifier = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_getCXXRefQualifier",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Type_getCXXRefQualifier (MemorySegment T) {
         try {
@@ -4156,15 +4158,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_isBitField = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_isBitField",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_isBitField (MemorySegment C) {
         try {
@@ -4174,15 +4176,15 @@
         }
     }
     public static final MethodHandle clang_isVirtualBase = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isVirtualBase",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_isVirtualBase (MemorySegment x0) {
         try {
@@ -4196,15 +4198,15 @@
     public static final int CX_CXXProtected = (int)2L;
     public static final int CX_CXXPrivate = (int)3L;
     public static final MethodHandle clang_getCXXAccessSpecifier = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCXXAccessSpecifier",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getCXXAccessSpecifier (MemorySegment x0) {
         try {
@@ -4222,15 +4224,15 @@
     public static final int CX_SC_Auto = (int)6L;
     public static final int CX_SC_Register = (int)7L;
     public static final MethodHandle clang_Cursor_getStorageClass = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getStorageClass",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_getStorageClass (MemorySegment x0) {
         try {
@@ -4240,15 +4242,15 @@
         }
     }
     public static final MethodHandle clang_getNumOverloadedDecls = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getNumOverloadedDecls",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getNumOverloadedDecls (MemorySegment cursor) {
         try {
@@ -4259,20 +4261,20 @@
     }
     public static final MethodHandle clang_getOverloadedDecl = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getOverloadedDecl",
         "(Ljdk/incubator/foreign/MemorySegment;I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_getOverloadedDecl (MemorySegment cursor, int index) {
         try {
             return (MemorySegment)clang_getOverloadedDecl.invokeExact(cursor, index);
@@ -4282,18 +4284,18 @@
     }
     public static final MethodHandle clang_getIBOutletCollectionType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getIBOutletCollectionType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getIBOutletCollectionType (MemorySegment x0) {
         try {
@@ -4306,39 +4308,39 @@
     public static final int CXChildVisit_Continue = (int)1L;
     public static final int CXChildVisit_Recurse = (int)2L;
     public static final MethodHandle clang_visitChildren = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_visitChildren",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_visitChildren (MemorySegment parent, MemoryAddress visitor, MemoryAddress client_data) {
         try {
             return (int)clang_visitChildren.invokeExact(parent, visitor, client_data);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    private static final FunctionDescriptor clang_visitChildren$visitor$DESC = FunctionDescriptor.of(C_INT,
+    private static final FunctionDescriptor clang_visitChildren$visitor$DESC = FunctionDescriptor.of(SystemABI.C_INT,
         MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
         MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
-        C_POINTER
+        SystemABI.C_POINTER
     );
     public interface clang_visitChildren$visitor {
         int apply(MemorySegment x0, MemorySegment x1, MemoryAddress x2);
     }
     public static final MemoryAddress clang_visitChildren$visitor$make(clang_visitChildren$visitor fi) {
@@ -4346,18 +4348,18 @@
     }
     public static final MethodHandle clang_getCursorUSR = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorUSR",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getCursorUSR (MemorySegment x0) {
         try {
@@ -4368,15 +4370,15 @@
     }
     public static final MethodHandle clang_constructUSR_ObjCClass = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_constructUSR_ObjCClass",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_constructUSR_ObjCClass (MemoryAddress class_name) {
         try {
             return (MemorySegment)clang_constructUSR_ObjCClass.invokeExact(class_name);
@@ -4386,16 +4388,16 @@
     }
     public static final MethodHandle clang_constructUSR_ObjCCategory = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_constructUSR_ObjCCategory",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_constructUSR_ObjCCategory (MemoryAddress class_name, MemoryAddress category_name) {
         try {
             return (MemorySegment)clang_constructUSR_ObjCCategory.invokeExact(class_name, category_name);
@@ -4405,15 +4407,15 @@
     }
     public static final MethodHandle clang_constructUSR_ObjCProtocol = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_constructUSR_ObjCProtocol",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_constructUSR_ObjCProtocol (MemoryAddress protocol_name) {
         try {
             return (MemorySegment)clang_constructUSR_ObjCProtocol.invokeExact(protocol_name);
@@ -4423,18 +4425,18 @@
     }
     public static final MethodHandle clang_constructUSR_ObjCIvar = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_constructUSR_ObjCIvar",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
+            SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_POINTER.withName("data"),
-                C_INT.withName("private_flags"),
+                SystemABI.C_POINTER.withName("data"),
+                SystemABI.C_INT.withName("private_flags"),
                 MemoryLayout.ofPaddingBits(32)
             )
         )
     );
     public static final MemorySegment clang_constructUSR_ObjCIvar (MemoryAddress name, MemorySegment classUSR) {
@@ -4446,19 +4448,19 @@
     }
     public static final MethodHandle clang_constructUSR_ObjCMethod = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_constructUSR_ObjCMethod",
         "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
-            C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_POINTER.withName("data"),
-                C_INT.withName("private_flags"),
+                SystemABI.C_POINTER.withName("data"),
+                SystemABI.C_INT.withName("private_flags"),
                 MemoryLayout.ofPaddingBits(32)
             )
         )
     );
     public static final MemorySegment clang_constructUSR_ObjCMethod (MemoryAddress name, int isInstanceMethod, MemorySegment classUSR) {
@@ -4470,18 +4472,18 @@
     }
     public static final MethodHandle clang_constructUSR_ObjCProperty = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_constructUSR_ObjCProperty",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
+            SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_POINTER.withName("data"),
-                C_INT.withName("private_flags"),
+                SystemABI.C_POINTER.withName("data"),
+                SystemABI.C_INT.withName("private_flags"),
                 MemoryLayout.ofPaddingBits(32)
             )
         )
     );
     public static final MemorySegment clang_constructUSR_ObjCProperty (MemoryAddress property, MemorySegment classUSR) {
@@ -4493,18 +4495,18 @@
     }
     public static final MethodHandle clang_getCursorSpelling = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorSpelling",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getCursorSpelling (MemorySegment x0) {
         try {
@@ -4515,21 +4517,21 @@
     }
     public static final MethodHandle clang_Cursor_getSpellingNameRange = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getSpellingNameRange",
         "(Ljdk/incubator/foreign/MemorySegment;II)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("begin_int_data"),
-            C_INT.withName("end_int_data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("begin_int_data"),
+            SystemABI.C_INT.withName("end_int_data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_INT,
-            C_INT
+            SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_Cursor_getSpellingNameRange (MemorySegment x0, int pieceIndex, int options) {
         try {
             return (MemorySegment)clang_Cursor_getSpellingNameRange.invokeExact(x0, pieceIndex, options);
@@ -4565,13 +4567,13 @@
     public static final int CXPrintingPolicy_FullyQualifiedName = (int)25L;
     public static final int CXPrintingPolicy_LastProperty = (int)25L;
     public static final MethodHandle clang_PrintingPolicy_getProperty = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_PrintingPolicy_getProperty",
         "(Ljdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final int clang_PrintingPolicy_getProperty (MemoryAddress Policy, int Property) {
         try {
             return (int)clang_PrintingPolicy_getProperty.invokeExact(Policy, Property);
@@ -4581,13 +4583,13 @@
     }
     public static final MethodHandle clang_PrintingPolicy_setProperty = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_PrintingPolicy_setProperty",
         "(Ljdk/incubator/foreign/MemoryAddress;II)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER,
-            C_INT,
-            C_INT
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final void clang_PrintingPolicy_setProperty (MemoryAddress Policy, int Property, int Value) {
         try {
             clang_PrintingPolicy_setProperty.invokeExact(Policy, Property, Value);
@@ -4596,15 +4598,15 @@
         }
     }
     public static final MethodHandle clang_getCursorPrintingPolicy = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorPrintingPolicy",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
+        FunctionDescriptor.of(SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemoryAddress clang_getCursorPrintingPolicy (MemorySegment x0) {
         try {
@@ -4615,11 +4617,11 @@
     }
     public static final MethodHandle clang_PrintingPolicy_dispose = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_PrintingPolicy_dispose",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_PrintingPolicy_dispose (MemoryAddress Policy) {
         try {
             clang_PrintingPolicy_dispose.invokeExact(Policy);
@@ -4629,20 +4631,20 @@
     }
     public static final MethodHandle clang_getCursorPrettyPrinted = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorPrettyPrinted",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_getCursorPrettyPrinted (MemorySegment Cursor, MemoryAddress Policy) {
         try {
             return (MemorySegment)clang_getCursorPrettyPrinted.invokeExact(Cursor, Policy);
@@ -4652,18 +4654,18 @@
     }
     public static final MethodHandle clang_getCursorDisplayName = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorDisplayName",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getCursorDisplayName (MemorySegment x0) {
         try {
@@ -4674,18 +4676,18 @@
     }
     public static final MethodHandle clang_getCursorReferenced = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorReferenced",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getCursorReferenced (MemorySegment x0) {
         try {
@@ -4696,18 +4698,18 @@
     }
     public static final MethodHandle clang_getCursorDefinition = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorDefinition",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getCursorDefinition (MemorySegment x0) {
         try {
@@ -4717,15 +4719,15 @@
         }
     }
     public static final MethodHandle clang_isCursorDefinition = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_isCursorDefinition",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_isCursorDefinition (MemorySegment x0) {
         try {
@@ -4736,18 +4738,18 @@
     }
     public static final MethodHandle clang_getCanonicalCursor = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCanonicalCursor",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getCanonicalCursor (MemorySegment x0) {
         try {
@@ -4757,15 +4759,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_getObjCSelectorIndex = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getObjCSelectorIndex",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_getObjCSelectorIndex (MemorySegment x0) {
         try {
@@ -4775,15 +4777,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_isDynamicCall = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_isDynamicCall",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_isDynamicCall (MemorySegment C) {
         try {
@@ -4794,18 +4796,18 @@
     }
     public static final MethodHandle clang_Cursor_getReceiverType = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getReceiverType",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
+            SystemABI.C_INT.withName("kind"),
             MemoryLayout.ofPaddingBits(32),
-            MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_Cursor_getReceiverType (MemorySegment C) {
         try {
@@ -4829,17 +4831,17 @@
     public static final int CXObjCPropertyAttr_unsafe_unretained = (int)2048L;
     public static final int CXObjCPropertyAttr_class = (int)4096L;
     public static final MethodHandle clang_Cursor_getObjCPropertyAttributes = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getObjCPropertyAttributes",
         "(Ljdk/incubator/foreign/MemorySegment;I)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final int clang_Cursor_getObjCPropertyAttributes (MemorySegment C, int reserved) {
         try {
             return (int)clang_Cursor_getObjCPropertyAttributes.invokeExact(C, reserved);
@@ -4849,18 +4851,18 @@
     }
     public static final MethodHandle clang_Cursor_getObjCPropertyGetterName = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getObjCPropertyGetterName",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_Cursor_getObjCPropertyGetterName (MemorySegment C) {
         try {
@@ -4871,18 +4873,18 @@
     }
     public static final MethodHandle clang_Cursor_getObjCPropertySetterName = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getObjCPropertySetterName",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_Cursor_getObjCPropertySetterName (MemorySegment C) {
         try {
@@ -4899,15 +4901,15 @@
     public static final int CXObjCDeclQualifier_Byref = (int)16L;
     public static final int CXObjCDeclQualifier_Oneway = (int)32L;
     public static final MethodHandle clang_Cursor_getObjCDeclQualifiers = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getObjCDeclQualifiers",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_getObjCDeclQualifiers (MemorySegment C) {
         try {
@@ -4917,15 +4919,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_isObjCOptional = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_isObjCOptional",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_isObjCOptional (MemorySegment C) {
         try {
@@ -4935,15 +4937,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_isVariadic = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_isVariadic",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_Cursor_isVariadic (MemorySegment C) {
         try {
@@ -4953,19 +4955,19 @@
         }
     }
     public static final MethodHandle clang_Cursor_isExternalSymbol = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_isExternalSymbol",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_POINTER,
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_Cursor_isExternalSymbol (MemorySegment C, MemoryAddress language, MemoryAddress definedIn, MemoryAddress isGenerated) {
         try {
             return (int)clang_Cursor_isExternalSymbol.invokeExact(C, language, definedIn, isGenerated);
@@ -4975,18 +4977,18 @@
     }
     public static final MethodHandle clang_Cursor_getCommentRange = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getCommentRange",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("begin_int_data"),
-            C_INT.withName("end_int_data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("begin_int_data"),
+            SystemABI.C_INT.withName("end_int_data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_Cursor_getCommentRange (MemorySegment C) {
         try {
@@ -4997,18 +4999,18 @@
     }
     public static final MethodHandle clang_Cursor_getRawCommentText = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getRawCommentText",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_Cursor_getRawCommentText (MemorySegment C) {
         try {
@@ -5019,18 +5021,18 @@
     }
     public static final MethodHandle clang_Cursor_getBriefCommentText = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getBriefCommentText",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_Cursor_getBriefCommentText (MemorySegment C) {
         try {
@@ -5041,18 +5043,18 @@
     }
     public static final MethodHandle clang_Cursor_getMangling = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getMangling",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_Cursor_getMangling (MemorySegment x0) {
         try {
@@ -5062,15 +5064,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_getCXXManglings = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getCXXManglings",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
+        FunctionDescriptor.of(SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemoryAddress clang_Cursor_getCXXManglings (MemorySegment x0) {
         try {
@@ -5080,15 +5082,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_getObjCManglings = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getObjCManglings",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
+        FunctionDescriptor.of(SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemoryAddress clang_Cursor_getObjCManglings (MemorySegment x0) {
         try {
@@ -5098,15 +5100,15 @@
         }
     }
     public static final MethodHandle clang_Cursor_getModule = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_getModule",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
+        FunctionDescriptor.of(SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemoryAddress clang_Cursor_getModule (MemorySegment C) {
         try {
@@ -5116,13 +5118,13 @@
         }
     }
     public static final MethodHandle clang_getModuleForFile = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getModuleForFile",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_getModuleForFile (MemoryAddress x0, MemoryAddress x1) {
         try {
             return (MemoryAddress)clang_getModuleForFile.invokeExact(x0, x1);
@@ -5131,12 +5133,12 @@
         }
     }
     public static final MethodHandle clang_Module_getASTFile = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Module_getASTFile",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_Module_getASTFile (MemoryAddress Module) {
         try {
             return (MemoryAddress)clang_Module_getASTFile.invokeExact(Module);
@@ -5145,12 +5147,12 @@
         }
     }
     public static final MethodHandle clang_Module_getParent = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Module_getParent",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_Module_getParent (MemoryAddress Module) {
         try {
             return (MemoryAddress)clang_Module_getParent.invokeExact(Module);
@@ -5160,15 +5162,15 @@
     }
     public static final MethodHandle clang_Module_getName = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Module_getName",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_Module_getName (MemoryAddress Module) {
         try {
             return (MemorySegment)clang_Module_getName.invokeExact(Module);
@@ -5178,15 +5180,15 @@
     }
     public static final MethodHandle clang_Module_getFullName = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Module_getFullName",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_Module_getFullName (MemoryAddress Module) {
         try {
             return (MemorySegment)clang_Module_getFullName.invokeExact(Module);
@@ -5195,12 +5197,12 @@
         }
     }
     public static final MethodHandle clang_Module_isSystem = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Module_isSystem",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_Module_isSystem (MemoryAddress Module) {
         try {
             return (int)clang_Module_isSystem.invokeExact(Module);
@@ -5209,13 +5211,13 @@
         }
     }
     public static final MethodHandle clang_Module_getNumTopLevelHeaders = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Module_getNumTopLevelHeaders",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_Module_getNumTopLevelHeaders (MemoryAddress x0, MemoryAddress Module) {
         try {
             return (int)clang_Module_getNumTopLevelHeaders.invokeExact(x0, Module);
@@ -5224,14 +5226,14 @@
         }
     }
     public static final MethodHandle clang_Module_getTopLevelHeader = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Module_getTopLevelHeader",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final MemoryAddress clang_Module_getTopLevelHeader (MemoryAddress x0, MemoryAddress Module, int Index) {
         try {
             return (MemoryAddress)clang_Module_getTopLevelHeader.invokeExact(x0, Module, Index);
@@ -5240,15 +5242,15 @@
         }
     }
     public static final MethodHandle clang_CXXConstructor_isConvertingConstructor = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXXConstructor_isConvertingConstructor",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_CXXConstructor_isConvertingConstructor (MemorySegment C) {
         try {
@@ -5258,15 +5260,15 @@
         }
     }
     public static final MethodHandle clang_CXXConstructor_isCopyConstructor = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXXConstructor_isCopyConstructor",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_CXXConstructor_isCopyConstructor (MemorySegment C) {
         try {
@@ -5276,15 +5278,15 @@
         }
     }
     public static final MethodHandle clang_CXXConstructor_isDefaultConstructor = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXXConstructor_isDefaultConstructor",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_CXXConstructor_isDefaultConstructor (MemorySegment C) {
         try {
@@ -5294,15 +5296,15 @@
         }
     }
     public static final MethodHandle clang_CXXConstructor_isMoveConstructor = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXXConstructor_isMoveConstructor",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_CXXConstructor_isMoveConstructor (MemorySegment C) {
         try {
@@ -5312,15 +5314,15 @@
         }
     }
     public static final MethodHandle clang_CXXField_isMutable = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXXField_isMutable",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_CXXField_isMutable (MemorySegment C) {
         try {
@@ -5330,15 +5332,15 @@
         }
     }
     public static final MethodHandle clang_CXXMethod_isDefaulted = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXXMethod_isDefaulted",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_CXXMethod_isDefaulted (MemorySegment C) {
         try {
@@ -5348,15 +5350,15 @@
         }
     }
     public static final MethodHandle clang_CXXMethod_isPureVirtual = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXXMethod_isPureVirtual",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_CXXMethod_isPureVirtual (MemorySegment C) {
         try {
@@ -5366,15 +5368,15 @@
         }
     }
     public static final MethodHandle clang_CXXMethod_isStatic = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXXMethod_isStatic",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_CXXMethod_isStatic (MemorySegment C) {
         try {
@@ -5384,15 +5386,15 @@
         }
     }
     public static final MethodHandle clang_CXXMethod_isVirtual = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXXMethod_isVirtual",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_CXXMethod_isVirtual (MemorySegment C) {
         try {
@@ -5402,15 +5404,15 @@
         }
     }
     public static final MethodHandle clang_CXXRecord_isAbstract = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXXRecord_isAbstract",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_CXXRecord_isAbstract (MemorySegment C) {
         try {
@@ -5420,15 +5422,15 @@
         }
     }
     public static final MethodHandle clang_EnumDecl_isScoped = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_EnumDecl_isScoped",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_EnumDecl_isScoped (MemorySegment C) {
         try {
@@ -5438,15 +5440,15 @@
         }
     }
     public static final MethodHandle clang_CXXMethod_isConst = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_CXXMethod_isConst",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_CXXMethod_isConst (MemorySegment C) {
         try {
@@ -5456,15 +5458,15 @@
         }
     }
     public static final MethodHandle clang_getTemplateCursorKind = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getTemplateCursorKind",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final int clang_getTemplateCursorKind (MemorySegment C) {
         try {
@@ -5475,18 +5477,18 @@
     }
     public static final MethodHandle clang_getSpecializedCursorTemplate = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getSpecializedCursorTemplate",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemorySegment clang_getSpecializedCursorTemplate (MemorySegment C) {
         try {
@@ -5497,21 +5499,21 @@
     }
     public static final MethodHandle clang_getCursorReferenceNameRange = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorReferenceNameRange",
         "(Ljdk/incubator/foreign/MemorySegment;II)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("begin_int_data"),
-            C_INT.withName("end_int_data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("begin_int_data"),
+            SystemABI.C_INT.withName("end_int_data")
         ),
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_INT,
-            C_INT
+            SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_getCursorReferenceNameRange (MemorySegment C, int NameFlags, int PieceIndex) {
         try {
             return (MemorySegment)clang_getCursorReferenceNameRange.invokeExact(C, NameFlags, PieceIndex);
@@ -5526,21 +5528,21 @@
     public static final int CXToken_Keyword = (int)1L;
     public static final int CXToken_Identifier = (int)2L;
     public static final int CXToken_Literal = (int)3L;
     public static final int CXToken_Comment = (int)4L;
     public static final MemoryLayout CXToken$LAYOUT = MemoryLayout.ofStruct(
-        MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
-        C_POINTER.withName("ptr_data")
+        MemoryLayout.ofSequence(4, SystemABI.C_INT).withName("int_data"),
+        SystemABI.C_POINTER.withName("ptr_data")
     );
     public static final MethodHandle clang_getToken = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getToken",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             )
         )
     );
     public static final MemoryAddress clang_getToken (MemoryAddress TU, MemorySegment Location) {
@@ -5551,14 +5553,14 @@
         }
     }
     public static final MethodHandle clang_getTokenKind = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getTokenKind",
         "(Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
-                C_POINTER.withName("ptr_data")
+                MemoryLayout.ofSequence(4, SystemABI.C_INT).withName("int_data"),
+                SystemABI.C_POINTER.withName("ptr_data")
             )
         )
     );
     public static final int clang_getTokenKind (MemorySegment x0) {
         try {
@@ -5569,18 +5571,18 @@
     }
     public static final MethodHandle clang_getTokenSpelling = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getTokenSpelling",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
+            SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
-                C_POINTER.withName("ptr_data")
+                MemoryLayout.ofSequence(4, SystemABI.C_INT).withName("int_data"),
+                SystemABI.C_POINTER.withName("ptr_data")
             )
         )
     );
     public static final MemorySegment clang_getTokenSpelling (MemoryAddress x0, MemorySegment x1) {
         try {
@@ -5591,18 +5593,18 @@
     }
     public static final MethodHandle clang_getTokenLocation = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getTokenLocation",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
+            SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
-                C_POINTER.withName("ptr_data")
+                MemoryLayout.ofSequence(4, SystemABI.C_INT).withName("int_data"),
+                SystemABI.C_POINTER.withName("ptr_data")
             )
         )
     );
     public static final MemorySegment clang_getTokenLocation (MemoryAddress x0, MemorySegment x1) {
         try {
@@ -5613,18 +5615,18 @@
     }
     public static final MethodHandle clang_getTokenExtent = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getTokenExtent",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("begin_int_data"),
-            C_INT.withName("end_int_data")
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("begin_int_data"),
+            SystemABI.C_INT.withName("end_int_data")
         ),
-            C_POINTER,
+            SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(4, C_INT).withName("int_data"),
-                C_POINTER.withName("ptr_data")
+                MemoryLayout.ofSequence(4, SystemABI.C_INT).withName("int_data"),
+                SystemABI.C_POINTER.withName("ptr_data")
             )
         )
     );
     public static final MemorySegment clang_getTokenExtent (MemoryAddress x0, MemorySegment x1) {
         try {
@@ -5635,18 +5637,18 @@
     }
     public static final MethodHandle clang_tokenize = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_tokenize",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER,
+            SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("begin_int_data"),
-                C_INT.withName("end_int_data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("begin_int_data"),
+                SystemABI.C_INT.withName("end_int_data")
             ),
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_tokenize (MemoryAddress TU, MemorySegment Range, MemoryAddress Tokens, MemoryAddress NumTokens) {
         try {
             clang_tokenize.invokeExact(TU, Range, Tokens, NumTokens);
@@ -5656,14 +5658,14 @@
     }
     public static final MethodHandle clang_annotateTokens = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_annotateTokens",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER,
-            C_POINTER,
-            C_INT,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_annotateTokens (MemoryAddress TU, MemoryAddress Tokens, int NumTokens, MemoryAddress Cursors) {
         try {
             clang_annotateTokens.invokeExact(TU, Tokens, NumTokens, Cursors);
@@ -5673,13 +5675,13 @@
     }
     public static final MethodHandle clang_disposeTokens = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_disposeTokens",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER,
-            C_POINTER,
-            C_INT
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final void clang_disposeTokens (MemoryAddress TU, MemoryAddress Tokens, int NumTokens) {
         try {
             clang_disposeTokens.invokeExact(TU, Tokens, NumTokens);
@@ -5689,15 +5691,15 @@
     }
     public static final MethodHandle clang_getCursorKindSpelling = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorKindSpelling",
         "(I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_getCursorKindSpelling (int Kind) {
         try {
             return (MemorySegment)clang_getCursorKindSpelling.invokeExact(Kind);
@@ -5708,20 +5710,20 @@
     public static final MethodHandle clang_getDefinitionSpellingAndExtent = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getDefinitionSpellingAndExtent",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_getDefinitionSpellingAndExtent (MemorySegment x0, MemoryAddress startBuf, MemoryAddress endBuf, MemoryAddress startLine, MemoryAddress startColumn, MemoryAddress endLine, MemoryAddress endColumn) {
         try {
             clang_getDefinitionSpellingAndExtent.invokeExact(x0, startBuf, endBuf, startLine, startColumn, endLine, endColumn);
@@ -5743,35 +5745,35 @@
     }
     public static final MethodHandle clang_executeOnThread = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_executeOnThread",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER,
-            C_POINTER,
-            C_INT
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final void clang_executeOnThread (MemoryAddress fn, MemoryAddress user_data, int stack_size) {
         try {
             clang_executeOnThread.invokeExact(fn, user_data, stack_size);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
     private static final FunctionDescriptor clang_executeOnThread$fn$DESC = FunctionDescriptor.ofVoid(
-        C_POINTER
+        SystemABI.C_POINTER
     );
     public interface clang_executeOnThread$fn {
         void apply(MemoryAddress x0);
     }
     public static final MemoryAddress clang_executeOnThread$fn$make(clang_executeOnThread$fn fi) {
         return RuntimeHelper.upcallStub(clang_executeOnThread$fn.class, fi, clang_executeOnThread$fn$DESC, "(Ljdk/incubator/foreign/MemoryAddress;)V");
     }
     public static final MemoryLayout CXCompletionResult$LAYOUT = MemoryLayout.ofStruct(
-        C_INT.withName("CursorKind"),
+        SystemABI.C_INT.withName("CursorKind"),
         MemoryLayout.ofPaddingBits(32),
-        C_POINTER.withName("CompletionString")
+        SystemABI.C_POINTER.withName("CompletionString")
     );
     public static final VarHandle CXCompletionResult$CursorKind = CXCompletionResult$LAYOUT.varHandle(int.class, PathElement.groupElement("CursorKind"));
     public static final int CXCompletionResult$CursorKind$get(MemorySegment seg) {
         return (int)CXCompletionResult$CursorKind.get(seg.baseAddress());
     }
@@ -5800,13 +5802,13 @@
     public static final int CXCompletionChunk_HorizontalSpace = (int)19L;
     public static final int CXCompletionChunk_VerticalSpace = (int)20L;
     public static final MethodHandle clang_getCompletionChunkKind = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCompletionChunkKind",
         "(Ljdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final int clang_getCompletionChunkKind (MemoryAddress completion_string, int chunk_number) {
         try {
             return (int)clang_getCompletionChunkKind.invokeExact(completion_string, chunk_number);
@@ -5816,16 +5818,16 @@
     }
     public static final MethodHandle clang_getCompletionChunkText = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCompletionChunkText",
         "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
-            C_INT
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_getCompletionChunkText (MemoryAddress completion_string, int chunk_number) {
         try {
             return (MemorySegment)clang_getCompletionChunkText.invokeExact(completion_string, chunk_number);
@@ -5834,13 +5836,13 @@
         }
     }
     public static final MethodHandle clang_getCompletionChunkCompletionString = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCompletionChunkCompletionString",
         "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final MemoryAddress clang_getCompletionChunkCompletionString (MemoryAddress completion_string, int chunk_number) {
         try {
             return (MemoryAddress)clang_getCompletionChunkCompletionString.invokeExact(completion_string, chunk_number);
@@ -5849,12 +5851,12 @@
         }
     }
     public static final MethodHandle clang_getNumCompletionChunks = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getNumCompletionChunks",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_getNumCompletionChunks (MemoryAddress completion_string) {
         try {
             return (int)clang_getNumCompletionChunks.invokeExact(completion_string);
@@ -5863,12 +5865,12 @@
         }
     }
     public static final MethodHandle clang_getCompletionPriority = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCompletionPriority",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_getCompletionPriority (MemoryAddress completion_string) {
         try {
             return (int)clang_getCompletionPriority.invokeExact(completion_string);
@@ -5877,12 +5879,12 @@
         }
     }
     public static final MethodHandle clang_getCompletionAvailability = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCompletionAvailability",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_getCompletionAvailability (MemoryAddress completion_string) {
         try {
             return (int)clang_getCompletionAvailability.invokeExact(completion_string);
@@ -5891,12 +5893,12 @@
         }
     }
     public static final MethodHandle clang_getCompletionNumAnnotations = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCompletionNumAnnotations",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_getCompletionNumAnnotations (MemoryAddress completion_string) {
         try {
             return (int)clang_getCompletionNumAnnotations.invokeExact(completion_string);
@@ -5906,16 +5908,16 @@
     }
     public static final MethodHandle clang_getCompletionAnnotation = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCompletionAnnotation",
         "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
-            C_INT
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final MemorySegment clang_getCompletionAnnotation (MemoryAddress completion_string, int annotation_number) {
         try {
             return (MemorySegment)clang_getCompletionAnnotation.invokeExact(completion_string, annotation_number);
@@ -5925,16 +5927,16 @@
     }
     public static final MethodHandle clang_getCompletionParent = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCompletionParent",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_getCompletionParent (MemoryAddress completion_string, MemoryAddress kind) {
         try {
             return (MemorySegment)clang_getCompletionParent.invokeExact(completion_string, kind);
@@ -5944,15 +5946,15 @@
     }
     public static final MethodHandle clang_getCompletionBriefComment = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCompletionBriefComment",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_getCompletionBriefComment (MemoryAddress completion_string) {
         try {
             return (MemorySegment)clang_getCompletionBriefComment.invokeExact(completion_string);
@@ -5961,15 +5963,15 @@
         }
     }
     public static final MethodHandle clang_getCursorCompletionString = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCursorCompletionString",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
+        FunctionDescriptor.of(SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemoryAddress clang_getCursorCompletionString (MemorySegment cursor) {
         try {
@@ -5977,12 +5979,12 @@
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
     public static final MemoryLayout CXCodeCompleteResults$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("Results"),
-        C_INT.withName("NumResults"),
+        SystemABI.C_POINTER.withName("Results"),
+        SystemABI.C_INT.withName("NumResults"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXCodeCompleteResults$NumResults = CXCodeCompleteResults$LAYOUT.varHandle(int.class, PathElement.groupElement("NumResults"));
     public static final int CXCodeCompleteResults$NumResults$get(MemorySegment seg) {
         return (int)CXCodeCompleteResults$NumResults.get(seg.baseAddress());
@@ -5991,13 +5993,13 @@
         CXCodeCompleteResults$NumResults.set(seg.baseAddress(), x);
     }
     public static final MethodHandle clang_getCompletionNumFixIts = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCompletionNumFixIts",
         "(Ljdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final int clang_getCompletionNumFixIts (MemoryAddress results, int completion_index) {
         try {
             return (int)clang_getCompletionNumFixIts.invokeExact(results, completion_index);
@@ -6007,18 +6009,18 @@
     }
     public static final MethodHandle clang_getCompletionFixIt = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getCompletionFixIt",
         "(Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER,
-            C_INT,
-            C_INT,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_getCompletionFixIt (MemoryAddress results, int completion_index, int fixit_index, MemoryAddress replacement_range) {
         try {
             return (MemorySegment)clang_getCompletionFixIt.invokeExact(results, completion_index, fixit_index, replacement_range);
@@ -6057,11 +6059,11 @@
     public static final int CXCompletionContext_IncludedFile = (int)4194304L;
     public static final int CXCompletionContext_Unknown = (int)8388607L;
     public static final MethodHandle clang_defaultCodeCompleteOptions = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_defaultCodeCompleteOptions",
         "()I",
-        FunctionDescriptor.of(C_INT)
+        FunctionDescriptor.of(SystemABI.C_INT)
     );
     public static final int clang_defaultCodeCompleteOptions () {
         try {
             return (int)clang_defaultCodeCompleteOptions.invokeExact();
         } catch (Throwable ex) {
@@ -6069,18 +6071,18 @@
         }
     }
     public static final MethodHandle clang_codeCompleteAt = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_codeCompleteAt",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_INT,
-            C_INT,
-            C_POINTER,
-            C_INT,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final MemoryAddress clang_codeCompleteAt (MemoryAddress TU, MemoryAddress complete_filename, int complete_line, int complete_column, MemoryAddress unsaved_files, int num_unsaved_files, int options) {
         try {
             return (MemoryAddress)clang_codeCompleteAt.invokeExact(TU, complete_filename, complete_line, complete_column, unsaved_files, num_unsaved_files, options);
@@ -6090,12 +6092,12 @@
     }
     public static final MethodHandle clang_sortCodeCompletionResults = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_sortCodeCompletionResults",
         "(Ljdk/incubator/foreign/MemoryAddress;I)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER,
-            C_INT
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final void clang_sortCodeCompletionResults (MemoryAddress Results, int NumResults) {
         try {
             clang_sortCodeCompletionResults.invokeExact(Results, NumResults);
@@ -6105,11 +6107,11 @@
     }
     public static final MethodHandle clang_disposeCodeCompleteResults = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_disposeCodeCompleteResults",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_disposeCodeCompleteResults (MemoryAddress Results) {
         try {
             clang_disposeCodeCompleteResults.invokeExact(Results);
@@ -6118,12 +6120,12 @@
         }
     }
     public static final MethodHandle clang_codeCompleteGetNumDiagnostics = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_codeCompleteGetNumDiagnostics",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_codeCompleteGetNumDiagnostics (MemoryAddress Results) {
         try {
             return (int)clang_codeCompleteGetNumDiagnostics.invokeExact(Results);
@@ -6132,13 +6134,13 @@
         }
     }
     public static final MethodHandle clang_codeCompleteGetDiagnostic = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_codeCompleteGetDiagnostic",
         "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final MemoryAddress clang_codeCompleteGetDiagnostic (MemoryAddress Results, int Index) {
         try {
             return (MemoryAddress)clang_codeCompleteGetDiagnostic.invokeExact(Results, Index);
@@ -6147,12 +6149,12 @@
         }
     }
     public static final MethodHandle clang_codeCompleteGetContexts = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_codeCompleteGetContexts",
         "(Ljdk/incubator/foreign/MemoryAddress;)J",
-        FunctionDescriptor.of(C_LONGLONG,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_LONGLONG,
+            SystemABI.C_POINTER
         )
     );
     public static final long clang_codeCompleteGetContexts (MemoryAddress Results) {
         try {
             return (long)clang_codeCompleteGetContexts.invokeExact(Results);
@@ -6161,13 +6163,13 @@
         }
     }
     public static final MethodHandle clang_codeCompleteGetContainerKind = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_codeCompleteGetContainerKind",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_codeCompleteGetContainerKind (MemoryAddress Results, MemoryAddress IsIncomplete) {
         try {
             return (int)clang_codeCompleteGetContainerKind.invokeExact(Results, IsIncomplete);
@@ -6177,15 +6179,15 @@
     }
     public static final MethodHandle clang_codeCompleteGetContainerUSR = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_codeCompleteGetContainerUSR",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_codeCompleteGetContainerUSR (MemoryAddress Results) {
         try {
             return (MemorySegment)clang_codeCompleteGetContainerUSR.invokeExact(Results);
@@ -6195,15 +6197,15 @@
     }
     public static final MethodHandle clang_codeCompleteGetObjCSelector = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_codeCompleteGetObjCSelector",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ),
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final MemorySegment clang_codeCompleteGetObjCSelector (MemoryAddress Results) {
         try {
             return (MemorySegment)clang_codeCompleteGetObjCSelector.invokeExact(Results);
@@ -6213,12 +6215,12 @@
     }
     public static final MethodHandle clang_getClangVersion = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getClangVersion",
         "()Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            C_POINTER.withName("data"),
-            C_INT.withName("private_flags"),
+            SystemABI.C_POINTER.withName("data"),
+            SystemABI.C_INT.withName("private_flags"),
             MemoryLayout.ofPaddingBits(32)
         ))
     );
     public static final MemorySegment clang_getClangVersion () {
         try {
@@ -6229,11 +6231,11 @@
     }
     public static final MethodHandle clang_toggleCrashRecovery = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_toggleCrashRecovery",
         "(I)V",
         FunctionDescriptor.ofVoid(
-            C_INT
+            SystemABI.C_INT
         )
     );
     public static final void clang_toggleCrashRecovery (int isEnabled) {
         try {
             clang_toggleCrashRecovery.invokeExact(isEnabled);
@@ -6243,27 +6245,27 @@
     }
     public static final MethodHandle clang_getInclusions = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getInclusions",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER,
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_getInclusions (MemoryAddress tu, MemoryAddress visitor, MemoryAddress client_data) {
         try {
             clang_getInclusions.invokeExact(tu, visitor, client_data);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
     private static final FunctionDescriptor clang_getInclusions$visitor$DESC = FunctionDescriptor.ofVoid(
-        C_POINTER,
-        C_POINTER,
-        C_INT,
-        C_POINTER
+        SystemABI.C_POINTER,
+        SystemABI.C_POINTER,
+        SystemABI.C_INT,
+        SystemABI.C_POINTER
     );
     public interface clang_getInclusions$visitor {
         void apply(MemoryAddress x0, MemoryAddress x1, int x2, MemoryAddress x3);
     }
     public static final MemoryAddress clang_getInclusions$visitor$make(clang_getInclusions$visitor fi) {
@@ -6277,15 +6279,15 @@
     public static final int CXEval_Other = (int)6L;
     public static final int CXEval_UnExposed = (int)0L;
     public static final MethodHandle clang_Cursor_Evaluate = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Cursor_Evaluate",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
+        FunctionDescriptor.of(SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             )
         )
     );
     public static final MemoryAddress clang_Cursor_Evaluate (MemorySegment C) {
         try {
@@ -6295,12 +6297,12 @@
         }
     }
     public static final MethodHandle clang_EvalResult_getKind = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_EvalResult_getKind",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_EvalResult_getKind (MemoryAddress E) {
         try {
             return (int)clang_EvalResult_getKind.invokeExact(E);
@@ -6309,12 +6311,12 @@
         }
     }
     public static final MethodHandle clang_EvalResult_getAsInt = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_EvalResult_getAsInt",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_EvalResult_getAsInt (MemoryAddress E) {
         try {
             return (int)clang_EvalResult_getAsInt.invokeExact(E);
@@ -6323,12 +6325,12 @@
         }
     }
     public static final MethodHandle clang_EvalResult_getAsLongLong = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_EvalResult_getAsLongLong",
         "(Ljdk/incubator/foreign/MemoryAddress;)J",
-        FunctionDescriptor.of(C_LONGLONG,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_LONGLONG,
+            SystemABI.C_POINTER
         )
     );
     public static final long clang_EvalResult_getAsLongLong (MemoryAddress E) {
         try {
             return (long)clang_EvalResult_getAsLongLong.invokeExact(E);
@@ -6337,12 +6339,12 @@
         }
     }
     public static final MethodHandle clang_EvalResult_isUnsignedInt = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_EvalResult_isUnsignedInt",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_EvalResult_isUnsignedInt (MemoryAddress E) {
         try {
             return (int)clang_EvalResult_isUnsignedInt.invokeExact(E);
@@ -6351,12 +6353,12 @@
         }
     }
     public static final MethodHandle clang_EvalResult_getAsUnsigned = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_EvalResult_getAsUnsigned",
         "(Ljdk/incubator/foreign/MemoryAddress;)J",
-        FunctionDescriptor.of(C_LONGLONG,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_LONGLONG,
+            SystemABI.C_POINTER
         )
     );
     public static final long clang_EvalResult_getAsUnsigned (MemoryAddress E) {
         try {
             return (long)clang_EvalResult_getAsUnsigned.invokeExact(E);
@@ -6365,12 +6367,12 @@
         }
     }
     public static final MethodHandle clang_EvalResult_getAsDouble = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_EvalResult_getAsDouble",
         "(Ljdk/incubator/foreign/MemoryAddress;)D",
-        FunctionDescriptor.of(C_DOUBLE,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_DOUBLE,
+            SystemABI.C_POINTER
         )
     );
     public static final double clang_EvalResult_getAsDouble (MemoryAddress E) {
         try {
             return (double)clang_EvalResult_getAsDouble.invokeExact(E);
@@ -6379,12 +6381,12 @@
         }
     }
     public static final MethodHandle clang_EvalResult_getAsStr = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_EvalResult_getAsStr",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_EvalResult_getAsStr (MemoryAddress E) {
         try {
             return (MemoryAddress)clang_EvalResult_getAsStr.invokeExact(E);
@@ -6394,11 +6396,11 @@
     }
     public static final MethodHandle clang_EvalResult_dispose = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_EvalResult_dispose",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_EvalResult_dispose (MemoryAddress E) {
         try {
             clang_EvalResult_dispose.invokeExact(E);
@@ -6407,12 +6409,12 @@
         }
     }
     public static final MethodHandle clang_getRemappings = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getRemappings",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_getRemappings (MemoryAddress path) {
         try {
             return (MemoryAddress)clang_getRemappings.invokeExact(path);
@@ -6421,13 +6423,13 @@
         }
     }
     public static final MethodHandle clang_getRemappingsFromFileList = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_getRemappingsFromFileList",
         "(Ljdk/incubator/foreign/MemoryAddress;I)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final MemoryAddress clang_getRemappingsFromFileList (MemoryAddress filePaths, int numFiles) {
         try {
             return (MemoryAddress)clang_getRemappingsFromFileList.invokeExact(filePaths, numFiles);
@@ -6436,12 +6438,12 @@
         }
     }
     public static final MethodHandle clang_remap_getNumFiles = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_remap_getNumFiles",
         "(Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_remap_getNumFiles (MemoryAddress x0) {
         try {
             return (int)clang_remap_getNumFiles.invokeExact(x0);
@@ -6451,14 +6453,14 @@
     }
     public static final MethodHandle clang_remap_getFilenames = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_remap_getFilenames",
         "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER,
-            C_INT,
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_remap_getFilenames (MemoryAddress x0, int index, MemoryAddress original, MemoryAddress transformed) {
         try {
             clang_remap_getFilenames.invokeExact(x0, index, original, transformed);
@@ -6468,11 +6470,11 @@
     }
     public static final MethodHandle clang_remap_dispose = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_remap_dispose",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_remap_dispose (MemoryAddress x0) {
         try {
             clang_remap_dispose.invokeExact(x0);
@@ -6481,29 +6483,29 @@
         }
     }
     public static final int CXVisit_Break = (int)0L;
     public static final int CXVisit_Continue = (int)1L;
     public static final MemoryLayout CXCursorAndRangeVisitor$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("context"),
-        C_POINTER.withName("visit")
+        SystemABI.C_POINTER.withName("context"),
+        SystemABI.C_POINTER.withName("visit")
     ).withName("CXCursorAndRangeVisitor");
     public static final int CXResult_Success = (int)0L;
     public static final int CXResult_Invalid = (int)1L;
     public static final int CXResult_VisitBreak = (int)2L;
     public static final MethodHandle clang_findReferencesInFile = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_findReferencesInFile",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
-                C_INT.withName("xdata"),
-                MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+                SystemABI.C_INT.withName("kind"),
+                SystemABI.C_INT.withName("xdata"),
+                MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
             ),
-            C_POINTER,
+            SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_POINTER.withName("context"),
-                C_POINTER.withName("visit")
+                SystemABI.C_POINTER.withName("context"),
+                SystemABI.C_POINTER.withName("visit")
             ).withName("CXCursorAndRangeVisitor")
         )
     );
     public static final int clang_findReferencesInFile (MemorySegment cursor, MemoryAddress file, MemorySegment visitor) {
         try {
@@ -6513,16 +6515,16 @@
         }
     }
     public static final MethodHandle clang_findIncludesInFile = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_findIncludesInFile",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemorySegment;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER,
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
             MemoryLayout.ofStruct(
-                C_POINTER.withName("context"),
-                C_POINTER.withName("visit")
+                SystemABI.C_POINTER.withName("context"),
+                SystemABI.C_POINTER.withName("visit")
             ).withName("CXCursorAndRangeVisitor")
         )
     );
     public static final int clang_findIncludesInFile (MemoryAddress TU, MemoryAddress file, MemorySegment visitor) {
         try {
@@ -6530,12 +6532,12 @@
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
     public static final MemoryLayout CXIdxLoc$LAYOUT = MemoryLayout.ofStruct(
-        MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-        C_INT.withName("int_data"),
+        MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+        SystemABI.C_INT.withName("int_data"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxLoc$int_data = CXIdxLoc$LAYOUT.varHandle(int.class, PathElement.groupElement("int_data"));
     public static final int CXIdxLoc$int_data$get(MemorySegment seg) {
         return (int)CXIdxLoc$int_data.get(seg.baseAddress());
@@ -6543,19 +6545,19 @@
     public static final void CXIdxLoc$int_data$set(MemorySegment seg, int x) {
         CXIdxLoc$int_data.set(seg.baseAddress(), x);
     }
     public static final MemoryLayout CXIdxIncludedFileInfo$LAYOUT = MemoryLayout.ofStruct(
         MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ).withName("hashLoc"),
-        C_POINTER.withName("filename"),
-        C_POINTER.withName("file"),
-        C_INT.withName("isImport"),
-        C_INT.withName("isAngled"),
-        C_INT.withName("isModuleImport"),
+        SystemABI.C_POINTER.withName("filename"),
+        SystemABI.C_POINTER.withName("file"),
+        SystemABI.C_INT.withName("isImport"),
+        SystemABI.C_INT.withName("isAngled"),
+        SystemABI.C_INT.withName("isModuleImport"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxIncludedFileInfo$isImport = CXIdxIncludedFileInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isImport"));
     public static final int CXIdxIncludedFileInfo$isImport$get(MemorySegment seg) {
         return (int)CXIdxIncludedFileInfo$isImport.get(seg.baseAddress());
@@ -6576,18 +6578,18 @@
     }
     public static final void CXIdxIncludedFileInfo$isModuleImport$set(MemorySegment seg, int x) {
         CXIdxIncludedFileInfo$isModuleImport.set(seg.baseAddress(), x);
     }
     public static final MemoryLayout CXIdxImportedASTFileInfo$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("file"),
-        C_POINTER.withName("module"),
+        SystemABI.C_POINTER.withName("file"),
+        SystemABI.C_POINTER.withName("module"),
         MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ).withName("loc"),
-        C_INT.withName("isImplicit"),
+        SystemABI.C_INT.withName("isImplicit"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxImportedASTFileInfo$isImplicit = CXIdxImportedASTFileInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isImplicit"));
     public static final int CXIdxImportedASTFileInfo$isImplicit$get(MemorySegment seg) {
         return (int)CXIdxImportedASTFileInfo$isImplicit.get(seg.baseAddress());
@@ -6634,20 +6636,20 @@
     public static final int CXIdxAttr_Unexposed = (int)0L;
     public static final int CXIdxAttr_IBAction = (int)1L;
     public static final int CXIdxAttr_IBOutlet = (int)2L;
     public static final int CXIdxAttr_IBOutletCollection = (int)3L;
     public static final MemoryLayout CXIdxAttrInfo$LAYOUT = MemoryLayout.ofStruct(
-        C_INT.withName("kind"),
+        SystemABI.C_INT.withName("kind"),
         MemoryLayout.ofPaddingBits(32),
         MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ).withName("cursor"),
         MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ).withName("loc")
     );
     public static final VarHandle CXIdxAttrInfo$kind = CXIdxAttrInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
     public static final int CXIdxAttrInfo$kind$get(MemorySegment seg) {
@@ -6655,23 +6657,23 @@
     }
     public static final void CXIdxAttrInfo$kind$set(MemorySegment seg, int x) {
         CXIdxAttrInfo$kind.set(seg.baseAddress(), x);
     }
     public static final MemoryLayout CXIdxEntityInfo$LAYOUT = MemoryLayout.ofStruct(
-        C_INT.withName("kind"),
-        C_INT.withName("templateKind"),
-        C_INT.withName("lang"),
+        SystemABI.C_INT.withName("kind"),
+        SystemABI.C_INT.withName("templateKind"),
+        SystemABI.C_INT.withName("lang"),
         MemoryLayout.ofPaddingBits(32),
-        C_POINTER.withName("name"),
-        C_POINTER.withName("USR"),
+        SystemABI.C_POINTER.withName("name"),
+        SystemABI.C_POINTER.withName("USR"),
         MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ).withName("cursor"),
-        C_POINTER.withName("attributes"),
-        C_INT.withName("numAttributes"),
+        SystemABI.C_POINTER.withName("attributes"),
+        SystemABI.C_INT.withName("numAttributes"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxEntityInfo$kind = CXIdxEntityInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
     public static final int CXIdxEntityInfo$kind$get(MemorySegment seg) {
         return (int)CXIdxEntityInfo$kind.get(seg.baseAddress());
@@ -6700,54 +6702,54 @@
     public static final void CXIdxEntityInfo$numAttributes$set(MemorySegment seg, int x) {
         CXIdxEntityInfo$numAttributes.set(seg.baseAddress(), x);
     }
     public static final MemoryLayout CXIdxContainerInfo$LAYOUT = MemoryLayout.ofStruct(
         MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ).withName("cursor")
     );
     public static final MemoryLayout CXIdxIBOutletCollectionAttrInfo$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("attrInfo"),
-        C_POINTER.withName("objcClass"),
+        SystemABI.C_POINTER.withName("attrInfo"),
+        SystemABI.C_POINTER.withName("objcClass"),
         MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ).withName("classCursor"),
         MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ).withName("classLoc")
     );
     public static final int CXIdxDeclFlag_Skipped = (int)1L;
     public static final MemoryLayout CXIdxDeclInfo$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("entityInfo"),
+        SystemABI.C_POINTER.withName("entityInfo"),
         MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ).withName("cursor"),
         MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ).withName("loc"),
-        C_POINTER.withName("semanticContainer"),
-        C_POINTER.withName("lexicalContainer"),
-        C_INT.withName("isRedeclaration"),
-        C_INT.withName("isDefinition"),
-        C_INT.withName("isContainer"),
+        SystemABI.C_POINTER.withName("semanticContainer"),
+        SystemABI.C_POINTER.withName("lexicalContainer"),
+        SystemABI.C_INT.withName("isRedeclaration"),
+        SystemABI.C_INT.withName("isDefinition"),
+        SystemABI.C_INT.withName("isContainer"),
         MemoryLayout.ofPaddingBits(32),
-        C_POINTER.withName("declAsContainer"),
-        C_INT.withName("isImplicit"),
+        SystemABI.C_POINTER.withName("declAsContainer"),
+        SystemABI.C_INT.withName("isImplicit"),
         MemoryLayout.ofPaddingBits(32),
-        C_POINTER.withName("attributes"),
-        C_INT.withName("numAttributes"),
-        C_INT.withName("flags")
+        SystemABI.C_POINTER.withName("attributes"),
+        SystemABI.C_INT.withName("numAttributes"),
+        SystemABI.C_INT.withName("flags")
     );
     public static final VarHandle CXIdxDeclInfo$isRedeclaration = CXIdxDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("isRedeclaration"));
     public static final int CXIdxDeclInfo$isRedeclaration$get(MemorySegment seg) {
         return (int)CXIdxDeclInfo$isRedeclaration.get(seg.baseAddress());
     }
@@ -6791,88 +6793,88 @@
     }
     public static final int CXIdxObjCContainer_ForwardRef = (int)0L;
     public static final int CXIdxObjCContainer_Interface = (int)1L;
     public static final int CXIdxObjCContainer_Implementation = (int)2L;
     public static final MemoryLayout CXIdxObjCContainerDeclInfo$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("declInfo"),
-        C_INT.withName("kind"),
+        SystemABI.C_POINTER.withName("declInfo"),
+        SystemABI.C_INT.withName("kind"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxObjCContainerDeclInfo$kind = CXIdxObjCContainerDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
     public static final int CXIdxObjCContainerDeclInfo$kind$get(MemorySegment seg) {
         return (int)CXIdxObjCContainerDeclInfo$kind.get(seg.baseAddress());
     }
     public static final void CXIdxObjCContainerDeclInfo$kind$set(MemorySegment seg, int x) {
         CXIdxObjCContainerDeclInfo$kind.set(seg.baseAddress(), x);
     }
     public static final MemoryLayout CXIdxBaseClassInfo$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("base"),
+        SystemABI.C_POINTER.withName("base"),
         MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ).withName("cursor"),
         MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ).withName("loc")
     );
     public static final MemoryLayout CXIdxObjCProtocolRefInfo$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("protocol"),
+        SystemABI.C_POINTER.withName("protocol"),
         MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ).withName("cursor"),
         MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ).withName("loc")
     );
     public static final MemoryLayout CXIdxObjCProtocolRefListInfo$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("protocols"),
-        C_INT.withName("numProtocols"),
+        SystemABI.C_POINTER.withName("protocols"),
+        SystemABI.C_INT.withName("numProtocols"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxObjCProtocolRefListInfo$numProtocols = CXIdxObjCProtocolRefListInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("numProtocols"));
     public static final int CXIdxObjCProtocolRefListInfo$numProtocols$get(MemorySegment seg) {
         return (int)CXIdxObjCProtocolRefListInfo$numProtocols.get(seg.baseAddress());
     }
     public static final void CXIdxObjCProtocolRefListInfo$numProtocols$set(MemorySegment seg, int x) {
         CXIdxObjCProtocolRefListInfo$numProtocols.set(seg.baseAddress(), x);
     }
     public static final MemoryLayout CXIdxObjCInterfaceDeclInfo$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("containerInfo"),
-        C_POINTER.withName("superInfo"),
-        C_POINTER.withName("protocols")
+        SystemABI.C_POINTER.withName("containerInfo"),
+        SystemABI.C_POINTER.withName("superInfo"),
+        SystemABI.C_POINTER.withName("protocols")
     );
     public static final MemoryLayout CXIdxObjCCategoryDeclInfo$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("containerInfo"),
-        C_POINTER.withName("objcClass"),
+        SystemABI.C_POINTER.withName("containerInfo"),
+        SystemABI.C_POINTER.withName("objcClass"),
         MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ).withName("classCursor"),
         MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ).withName("classLoc"),
-        C_POINTER.withName("protocols")
+        SystemABI.C_POINTER.withName("protocols")
     );
     public static final MemoryLayout CXIdxObjCPropertyDeclInfo$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("declInfo"),
-        C_POINTER.withName("getter"),
-        C_POINTER.withName("setter")
+        SystemABI.C_POINTER.withName("declInfo"),
+        SystemABI.C_POINTER.withName("getter"),
+        SystemABI.C_POINTER.withName("setter")
     );
     public static final MemoryLayout CXIdxCXXClassDeclInfo$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("declInfo"),
-        C_POINTER.withName("bases"),
-        C_INT.withName("numBases"),
+        SystemABI.C_POINTER.withName("declInfo"),
+        SystemABI.C_POINTER.withName("bases"),
+        SystemABI.C_INT.withName("numBases"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxCXXClassDeclInfo$numBases = CXIdxCXXClassDeclInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("numBases"));
     public static final int CXIdxCXXClassDeclInfo$numBases$get(MemorySegment seg) {
         return (int)CXIdxCXXClassDeclInfo$numBases.get(seg.baseAddress());
@@ -6891,26 +6893,26 @@
     public static final int CXSymbolRole_Call = (int)32L;
     public static final int CXSymbolRole_Dynamic = (int)64L;
     public static final int CXSymbolRole_AddressOf = (int)128L;
     public static final int CXSymbolRole_Implicit = (int)256L;
     public static final MemoryLayout CXIdxEntityRefInfo$LAYOUT = MemoryLayout.ofStruct(
-        C_INT.withName("kind"),
+        SystemABI.C_INT.withName("kind"),
         MemoryLayout.ofPaddingBits(32),
         MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ).withName("cursor"),
         MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ).withName("loc"),
-        C_POINTER.withName("referencedEntity"),
-        C_POINTER.withName("parentEntity"),
-        C_POINTER.withName("container"),
-        C_INT.withName("role"),
+        SystemABI.C_POINTER.withName("referencedEntity"),
+        SystemABI.C_POINTER.withName("parentEntity"),
+        SystemABI.C_POINTER.withName("container"),
+        SystemABI.C_INT.withName("role"),
         MemoryLayout.ofPaddingBits(32)
     );
     public static final VarHandle CXIdxEntityRefInfo$kind = CXIdxEntityRefInfo$LAYOUT.varHandle(int.class, PathElement.groupElement("kind"));
     public static final int CXIdxEntityRefInfo$kind$get(MemorySegment seg) {
         return (int)CXIdxEntityRefInfo$kind.get(seg.baseAddress());
@@ -6924,24 +6926,24 @@
     }
     public static final void CXIdxEntityRefInfo$role$set(MemorySegment seg, int x) {
         CXIdxEntityRefInfo$role.set(seg.baseAddress(), x);
     }
     public static final MemoryLayout IndexerCallbacks$LAYOUT = MemoryLayout.ofStruct(
-        C_POINTER.withName("abortQuery"),
-        C_POINTER.withName("diagnostic"),
-        C_POINTER.withName("enteredMainFile"),
-        C_POINTER.withName("ppIncludedFile"),
-        C_POINTER.withName("importedASTFile"),
-        C_POINTER.withName("startedTranslationUnit"),
-        C_POINTER.withName("indexDeclaration"),
-        C_POINTER.withName("indexEntityReference")
+        SystemABI.C_POINTER.withName("abortQuery"),
+        SystemABI.C_POINTER.withName("diagnostic"),
+        SystemABI.C_POINTER.withName("enteredMainFile"),
+        SystemABI.C_POINTER.withName("ppIncludedFile"),
+        SystemABI.C_POINTER.withName("importedASTFile"),
+        SystemABI.C_POINTER.withName("startedTranslationUnit"),
+        SystemABI.C_POINTER.withName("indexDeclaration"),
+        SystemABI.C_POINTER.withName("indexEntityReference")
     );
     public static final MethodHandle clang_index_isEntityObjCContainerKind = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_index_isEntityObjCContainerKind",
         "(I)I",
-        FunctionDescriptor.of(C_INT,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_INT
         )
     );
     public static final int clang_index_isEntityObjCContainerKind (int x0) {
         try {
             return (int)clang_index_isEntityObjCContainerKind.invokeExact(x0);
@@ -6950,12 +6952,12 @@
         }
     }
     public static final MethodHandle clang_index_getObjCContainerDeclInfo = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_index_getObjCContainerDeclInfo",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_index_getObjCContainerDeclInfo (MemoryAddress x0) {
         try {
             return (MemoryAddress)clang_index_getObjCContainerDeclInfo.invokeExact(x0);
@@ -6964,12 +6966,12 @@
         }
     }
     public static final MethodHandle clang_index_getObjCInterfaceDeclInfo = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_index_getObjCInterfaceDeclInfo",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_index_getObjCInterfaceDeclInfo (MemoryAddress x0) {
         try {
             return (MemoryAddress)clang_index_getObjCInterfaceDeclInfo.invokeExact(x0);
@@ -6978,12 +6980,12 @@
         }
     }
     public static final MethodHandle clang_index_getObjCCategoryDeclInfo = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_index_getObjCCategoryDeclInfo",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_index_getObjCCategoryDeclInfo (MemoryAddress x0) {
         try {
             return (MemoryAddress)clang_index_getObjCCategoryDeclInfo.invokeExact(x0);
@@ -6992,12 +6994,12 @@
         }
     }
     public static final MethodHandle clang_index_getObjCProtocolRefListInfo = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_index_getObjCProtocolRefListInfo",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_index_getObjCProtocolRefListInfo (MemoryAddress x0) {
         try {
             return (MemoryAddress)clang_index_getObjCProtocolRefListInfo.invokeExact(x0);
@@ -7006,12 +7008,12 @@
         }
     }
     public static final MethodHandle clang_index_getObjCPropertyDeclInfo = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_index_getObjCPropertyDeclInfo",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_index_getObjCPropertyDeclInfo (MemoryAddress x0) {
         try {
             return (MemoryAddress)clang_index_getObjCPropertyDeclInfo.invokeExact(x0);
@@ -7020,12 +7022,12 @@
         }
     }
     public static final MethodHandle clang_index_getIBOutletCollectionAttrInfo = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_index_getIBOutletCollectionAttrInfo",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_index_getIBOutletCollectionAttrInfo (MemoryAddress x0) {
         try {
             return (MemoryAddress)clang_index_getIBOutletCollectionAttrInfo.invokeExact(x0);
@@ -7034,12 +7036,12 @@
         }
     }
     public static final MethodHandle clang_index_getCXXClassDeclInfo = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_index_getCXXClassDeclInfo",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_index_getCXXClassDeclInfo (MemoryAddress x0) {
         try {
             return (MemoryAddress)clang_index_getCXXClassDeclInfo.invokeExact(x0);
@@ -7048,12 +7050,12 @@
         }
     }
     public static final MethodHandle clang_index_getClientContainer = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_index_getClientContainer",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_index_getClientContainer (MemoryAddress x0) {
         try {
             return (MemoryAddress)clang_index_getClientContainer.invokeExact(x0);
@@ -7063,12 +7065,12 @@
     }
     public static final MethodHandle clang_index_setClientContainer = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_index_setClientContainer",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_index_setClientContainer (MemoryAddress x0, MemoryAddress x1) {
         try {
             clang_index_setClientContainer.invokeExact(x0, x1);
@@ -7077,12 +7079,12 @@
         }
     }
     public static final MethodHandle clang_index_getClientEntity = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_index_getClientEntity",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_index_getClientEntity (MemoryAddress x0) {
         try {
             return (MemoryAddress)clang_index_getClientEntity.invokeExact(x0);
@@ -7092,12 +7094,12 @@
     }
     public static final MethodHandle clang_index_setClientEntity = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_index_setClientEntity",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_index_setClientEntity (MemoryAddress x0, MemoryAddress x1) {
         try {
             clang_index_setClientEntity.invokeExact(x0, x1);
@@ -7106,12 +7108,12 @@
         }
     }
     public static final MethodHandle clang_IndexAction_create = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_IndexAction_create",
         "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
-        FunctionDescriptor.of(C_POINTER,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final MemoryAddress clang_IndexAction_create (MemoryAddress CIdx) {
         try {
             return (MemoryAddress)clang_IndexAction_create.invokeExact(CIdx);
@@ -7121,11 +7123,11 @@
     }
     public static final MethodHandle clang_IndexAction_dispose = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_IndexAction_dispose",
         "(Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
-            C_POINTER
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_IndexAction_dispose (MemoryAddress x0) {
         try {
             clang_IndexAction_dispose.invokeExact(x0);
@@ -7140,23 +7142,23 @@
     public static final int CXIndexOpt_SuppressWarnings = (int)8L;
     public static final int CXIndexOpt_SkipParsedBodiesInSession = (int)16L;
     public static final MethodHandle clang_indexSourceFile = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_indexSourceFile",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_INT,
-            C_INT,
-            C_POINTER,
-            C_POINTER,
-            C_INT,
-            C_POINTER,
-            C_INT,
-            C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final int clang_indexSourceFile (MemoryAddress x0, MemoryAddress client_data, MemoryAddress index_callbacks, int index_callbacks_size, int index_options, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, MemoryAddress out_TU, int TU_options) {
         try {
             return (int)clang_indexSourceFile.invokeExact(x0, client_data, index_callbacks, index_callbacks_size, index_options, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, out_TU, TU_options);
@@ -7165,23 +7167,23 @@
         }
     }
     public static final MethodHandle clang_indexSourceFileFullArgv = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_indexSourceFileFullArgv",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;I)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_INT,
-            C_INT,
-            C_POINTER,
-            C_POINTER,
-            C_INT,
-            C_POINTER,
-            C_INT,
-            C_POINTER,
-            C_INT
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT
         )
     );
     public static final int clang_indexSourceFileFullArgv (MemoryAddress x0, MemoryAddress client_data, MemoryAddress index_callbacks, int index_callbacks_size, int index_options, MemoryAddress source_filename, MemoryAddress command_line_args, int num_command_line_args, MemoryAddress unsaved_files, int num_unsaved_files, MemoryAddress out_TU, int TU_options) {
         try {
             return (int)clang_indexSourceFileFullArgv.invokeExact(x0, client_data, index_callbacks, index_callbacks_size, index_options, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, out_TU, TU_options);
@@ -7190,17 +7192,17 @@
         }
     }
     public static final MethodHandle clang_indexTranslationUnit = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_indexTranslationUnit",
         "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IILjdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_INT,
-            C_INT,
-            C_POINTER
+        FunctionDescriptor.of(SystemABI.C_INT,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_INT,
+            SystemABI.C_INT,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_indexTranslationUnit (MemoryAddress x0, MemoryAddress client_data, MemoryAddress index_callbacks, int index_callbacks_size, int index_options, MemoryAddress x5) {
         try {
             return (int)clang_indexTranslationUnit.invokeExact(x0, client_data, index_callbacks, index_callbacks_size, index_options, x5);
@@ -7211,19 +7213,19 @@
     public static final MethodHandle clang_indexLoc_getFileLocation = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_indexLoc_getFileLocation",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)V",
         FunctionDescriptor.ofVoid(
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             ),
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final void clang_indexLoc_getFileLocation (MemorySegment loc, MemoryAddress indexFile, MemoryAddress file, MemoryAddress line, MemoryAddress column, MemoryAddress offset) {
         try {
             clang_indexLoc_getFileLocation.invokeExact(loc, indexFile, file, line, column, offset);
@@ -7233,17 +7235,17 @@
     }
     public static final MethodHandle clang_indexLoc_getCXSourceLocation = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_indexLoc_getCXSourceLocation",
         "(Ljdk/incubator/foreign/MemorySegment;)Ljdk/incubator/foreign/MemorySegment;",
         FunctionDescriptor.of(MemoryLayout.ofStruct(
-            MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-            C_INT.withName("int_data"),
+            MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+            SystemABI.C_INT.withName("int_data"),
             MemoryLayout.ofPaddingBits(32)
         ),
             MemoryLayout.ofStruct(
-                MemoryLayout.ofSequence(2, C_POINTER).withName("ptr_data"),
-                C_INT.withName("int_data"),
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("ptr_data"),
+                SystemABI.C_INT.withName("int_data"),
                 MemoryLayout.ofPaddingBits(32)
             )
         )
     );
     public static final MemorySegment clang_indexLoc_getCXSourceLocation (MemorySegment loc) {
@@ -7254,34 +7256,34 @@
         }
     }
     public static final MethodHandle clang_Type_visitFields = RuntimeHelper.downcallHandle(
         LIBRARIES, "clang_Type_visitFields",
         "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
-        FunctionDescriptor.of(C_INT,
+        FunctionDescriptor.of(SystemABI.C_INT,
             MemoryLayout.ofStruct(
-                C_INT.withName("kind"),
+                SystemABI.C_INT.withName("kind"),
                 MemoryLayout.ofPaddingBits(32),
-                MemoryLayout.ofSequence(2, C_POINTER).withName("data")
+                MemoryLayout.ofSequence(2, SystemABI.C_POINTER).withName("data")
             ),
-            C_POINTER,
-            C_POINTER
+            SystemABI.C_POINTER,
+            SystemABI.C_POINTER
         )
     );
     public static final int clang_Type_visitFields (MemorySegment T, MemoryAddress visitor, MemoryAddress client_data) {
         try {
             return (int)clang_Type_visitFields.invokeExact(T, visitor, client_data);
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
-    private static final FunctionDescriptor clang_Type_visitFields$visitor$DESC = FunctionDescriptor.of(C_INT,
+    private static final FunctionDescriptor clang_Type_visitFields$visitor$DESC = FunctionDescriptor.of(SystemABI.C_INT,
         MemoryLayout.ofStruct(
-            C_INT.withName("kind"),
-            C_INT.withName("xdata"),
-            MemoryLayout.ofSequence(3, C_POINTER).withName("data")
+            SystemABI.C_INT.withName("kind"),
+            SystemABI.C_INT.withName("xdata"),
+            MemoryLayout.ofSequence(3, SystemABI.C_POINTER).withName("data")
         ),
-        C_POINTER
+        SystemABI.C_POINTER
     );
     public interface clang_Type_visitFields$visitor {
         int apply(MemorySegment x0, MemoryAddress x1);
     }
     public static final MemoryAddress clang_Type_visitFields$visitor$make(clang_Type_visitFields$visitor fi) {
