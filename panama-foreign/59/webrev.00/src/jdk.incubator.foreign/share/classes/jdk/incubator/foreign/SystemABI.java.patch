diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/SystemABI.java
@@ -24,13 +24,10 @@
  *
  */
 package jdk.incubator.foreign;
 
 import jdk.internal.foreign.abi.UpcallStubs;
-import jdk.internal.foreign.abi.aarch64.AArch64ABI;
-import jdk.internal.foreign.abi.x64.sysv.SysVx64ABI;
-import jdk.internal.foreign.abi.x64.windows.Windowsx64ABI;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodType;
 import java.util.Optional;
 
@@ -54,22 +51,21 @@
      * The name of the AArch64 ABI
      */
     String ABI_AARCH64 = "AArch64";
 
     /**
-     * Obtain a method handle which can be used to call a given native function,
-     * given default calling covention.
+     * Obtain a method handle which can be used to call a given native function.
      *
      * @param symbol downcall symbol.
      * @param type the method type.
      * @param function the function descriptor.
      * @return the downcall method handle.
      */
     MethodHandle downcallHandle(MemoryAddress symbol, MethodType type, FunctionDescriptor function);
 
     /**
-     * Obtain the pointer to a native stub (using default calling convention) which
+     * Obtain the pointer to a native stub which
      * can be used to upcall into a given method handle.
      *
      * @param target the target method handle.
      * @param function the function descriptor.
      * @return the upcall symbol.
@@ -176,11 +172,11 @@
         COMPLEX_LONG_DOUBLE,
 
         /**
          * The {@code T*} native type.
          */
-        POINTER;
+        POINTER
     }
 
     /**
      * Returns memory layout for the given native type if supported by the platform ABI.
      * @param type the native type for which the layout is to be retrieved.
