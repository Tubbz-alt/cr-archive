diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/CallArranger.java
@@ -355,11 +355,10 @@
 
         BoxBindingCalculator(boolean forArguments) {
             super(forArguments);
         }
 
-        @SuppressWarnings("fallthrough")
         @Override
         List<Binding> getBindings(Class<?> carrier, MemoryLayout layout) {
             TypeClass argumentClass = classifyLayout(layout);
             Binding.Builder bindings = Binding.builder();
             switch (argumentClass.kind) {
@@ -435,13 +434,10 @@
             orElseThrow(()->new IllegalStateException("Unexpected value layout: could not determine ABI class"));
         if (clazz == null) {
             //padding not allowed here
             throw new IllegalStateException("Unexpected value layout: could not determine ABI class");
         }
-        if (clazz == ArgumentClassImpl.POINTER) {
-            clazz = ArgumentClassImpl.POINTER;
-        }
         classes.add(clazz);
         if (clazz == ArgumentClassImpl.INTEGER) {
             // int128
             long left = (type.byteSize()) - 8;
             while (left > 0) {
@@ -467,11 +463,11 @@
         for (long i = 0; i < nWords; i++) {
             classes.add(ArgumentClassImpl.NO_CLASS);
         }
 
         long offset = 0;
-        final long count = type.elementCount().getAsLong();
+        final long count = type.elementCount().orElseThrow();
         for (long idx = 0; idx < count; idx++) {
             MemoryLayout t = type.elementLayout();
             offset = SharedUtils.align(t, false, offset);
             List<ArgumentClassImpl> subclasses = classifyType(t);
             if (subclasses.isEmpty()) {
@@ -548,11 +544,11 @@
                 continue;
             }
             // ignore zero-length array for now
             // TODO: handle zero length arrays here
             if (t instanceof SequenceLayout) {
-                if (((SequenceLayout) t).elementCount().getAsLong() == 0) {
+                if (((SequenceLayout) t).elementCount().orElseThrow() == 0) {
                     continue;
                 }
             }
             offset = SharedUtils.align(t, false, offset);
             List<ArgumentClassImpl> subclasses = classifyType(t);
