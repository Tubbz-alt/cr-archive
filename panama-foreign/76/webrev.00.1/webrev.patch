diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
--- /dev/null
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
@@ -0,0 +1,139 @@
+/*
+ *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ *  This code is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 only, as
+ *  published by the Free Software Foundation.  Oracle designates this
+ *  particular file as subject to the "Classpath" exception as provided
+ *  by Oracle in the LICENSE file that accompanied this code.
+ *
+ *  This code is distributed in the hope that it will be useful, but WITHOUT
+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ *  version 2 for more details (a copy is included in the LICENSE file that
+ *  accompanied this code).
+ *
+ *  You should have received a copy of the GNU General Public License version
+ *  2 along with this work; if not, write to the Free Software Foundation,
+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ *  or visit www.oracle.com if you need additional information or have any
+ *  questions.
+ *
+ */
+
+package jdk.incubator.foreign;
+
+import jdk.internal.foreign.InternalForeign;
+import jdk.internal.foreign.MemorySegmentImpl;
+
+import java.nio.charset.Charset;
+
+/**
+ * A class containing various methods relating to native interop.
+ */
+public interface Foreign {
+
+    /**
+     * Get an instance of the {@linkplain Foreign} interface.
+     * <p>
+     * Access to this method must be explicitly enabled by setting the {@code jdk.incubator.foreign.Foreign} system
+     * property. The available values are {@code deny}, {@code warn}, {@code debug}, {@code permit}.
+     * <ul>
+     * <li>
+     * If set to {@code deny} an {@linkplain IllegalAccessError} will be thrown.
+     * <li>
+     * If set to {@code warn} a warning message will be written to the standard error stream.
+     * <li>
+     * If set to {@code debug} a debug message and a stack trace will be printed to the standard output stream.
+     * <li>
+     * If set to {@code permit} no special action will be taken.
+     * <li>
+     * If set to any other value an {@linkplain IllegalAccessError} will be thrown.
+     * </ul>
+     * <p>
+     * {@code deny} is the default value.
+     *
+     * @return an instance of {@linkplain Foreign}
+     * @throws IllegalAccessError if {@code jdk.incubator.foreign.Foreign} is set to {@code deny}
+     */
+    static Foreign getInstance() throws IllegalAccessError {
+        return InternalForeign.getInstance();
+    }
+
+    /**
+     * Returns the absolute address represented by the given off-heap memory address as a {@code long}.
+     * <p>
+     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
+     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
+     * restricted methods, and use safe and supported functionalities, where possible.
+     *
+     * @param address the address to turn into a {@code long}
+     * @return the address as a {@code long}
+     * @throws IllegalAccessError if the permission jkd.incubator.foreign.restrictedMethods is set to 'deny'
+     * @throws IllegalStateException if the given address is not an off-heap address
+     */
+    long asLong(MemoryAddress address) throws IllegalAccessError;
+
+    /**
+     * Returns a new native memory segment with given base address and size. The returned segment has its own temporal
+     * bounds, and can therefore be closed; closing such a segment does <em>not</em> result in any resource being
+     * deallocated.
+     * <p>
+     * This method is <em>restricted</em>. Restricted method are unsafe, and, if used incorrectly, their use might crash
+     * the JVM crash or, worse, silently result in memory corruption. Thus, clients should refrain from depending on
+     * restricted methods, and use safe and supported functionalities, where possible.
+     * <p>
+     * This method allows for making an otherwise in-accessible memory region accessible. However, there
+     * is no guarantee that this memory is safe to access, or that the given size for the new segment is not too large,
+     * potentially resulting in out-of-bounds accesses. The developer is trusted to make the judgement that the use of the
+     * returned memory segment is safe.
+     *
+     * @param base the desired base address
+     * @param byteSize the desired size.
+     * @return a new native memory segment with given base address and size.
+     * @throws IllegalArgumentException if {@code base} does not encapsulate a native memory address.
+     * @throws IllegalAccessError if the permission jkd.incubator.foreign.restrictedMethods is set to 'deny'
+     */
+    MemorySegment ofNativeUnchecked(MemoryAddress base, long byteSize) throws IllegalAccessError;
+
+    /**
+     * Returns a non-confined memory segment that has the same spatial and temporal bounds as the provided segment.
+     * Since the returned segment can be effectively accessed by multiple threads in an unconstrained fashion,
+     * this method should be used with care, as it might lead to JVM crashes - e.g. in the case where a thread {@code A}
+     * closes a segment while another thread {@code B} is accessing it.
+     * @param segment the segment from which an unconfined view is to be created.
+     * @return a non-confined memory segment that has the same spatial and temporal bounds as the provided segment.
+     */
+    MemorySegment asUnconfined(MemorySegment segment);
+
+    /**
+     * Obtain an instance of the system ABI.
+     * @return system ABI.
+     */
+    SystemABI getSystemABI();
+
+    /**
+     * Returns a new native memory segment holding contents of the given Java String
+     * @param str the Java String
+     * @return a new native memory segment
+     */
+    MemorySegment toCString(String str);
+
+    /**
+     * Returns a new native memory segment holding contents of the given Java String
+     * @param str The Java String
+     * @param charset The Charset to be used to encode the String
+     * @return a new native memory segment
+     */
+    MemorySegment toCString(String str, Charset charset);
+
+    /**
+     * Returns a Java String from the contents of the given C '\0' terminated string
+     * @param addr The address of the C string
+     * @return a Java String
+     */
+    String toJavaString(MemoryAddress addr);
+}
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
--- /dev/null
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/InternalForeign.java
@@ -0,0 +1,161 @@
+/*
+ *  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ *  This code is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 only, as
+ *  published by the Free Software Foundation.  Oracle designates this
+ *  particular file as subject to the "Classpath" exception as provided
+ *  by Oracle in the LICENSE file that accompanied this code.
+ *
+ *  This code is distributed in the hope that it will be useful, but WITHOUT
+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ *  version 2 for more details (a copy is included in the LICENSE file that
+ *  accompanied this code).
+ *
+ *  You should have received a copy of the GNU General Public License version
+ *  2 along with this work; if not, write to the Free Software Foundation,
+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ *  or visit www.oracle.com if you need additional information or have any
+ *  questions.
+ *
+ */
+package jdk.internal.foreign;
+
+import jdk.incubator.foreign.Foreign;
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.SystemABI;
+import jdk.internal.foreign.abi.aarch64.AArch64ABI;
+import jdk.internal.foreign.abi.x64.sysv.SysVx64ABI;
+import jdk.internal.foreign.abi.x64.windows.Windowsx64ABI;
+import sun.security.action.GetPropertyAction;
+
+import java.lang.invoke.VarHandle;
+import java.nio.charset.Charset;
+
+import static jdk.incubator.foreign.MemoryLayouts.C_CHAR;
+
+public class InternalForeign implements Foreign {
+
+    private static final String foreignAccess
+            = GetPropertyAction.privilegedGetProperty("jdk.incubator.foreign.Foreign", "deny");
+    private static final InternalForeign INSTANCE = new InternalForeign();
+
+    private InternalForeign() {}
+
+    public static InternalForeign getInstance() {
+        checkRestrictedAccess();
+        return getInstancePrivileged();
+    }
+
+    public static InternalForeign getInstancePrivileged() {
+        return INSTANCE;
+    }
+
+    @Override
+    public long asLong(MemoryAddress address) throws IllegalAccessError {
+        return MemoryAddressImpl.addressof(address);
+    }
+
+    @Override
+    public MemorySegment ofNativeUnchecked(MemoryAddress base, long byteSize) throws IllegalAccessError {
+        return Utils.makeNativeSegmentUnchecked(base, byteSize);
+    }
+
+    @Override
+    public MemorySegment asUnconfined(MemorySegment segment) {
+        return ((MemorySegmentImpl)segment).asUnconfined();
+    }
+
+    @Override
+    public SystemABI getSystemABI() {
+        String arch = System.getProperty("os.arch");
+        String os = System.getProperty("os.name");
+        if (arch.equals("amd64") || arch.equals("x86_64")) {
+            if (os.startsWith("Windows")) {
+                return Windowsx64ABI.getInstance();
+            } else {
+                return SysVx64ABI.getInstance();
+            }
+        } else if (arch.equals("aarch64")) {
+            return AArch64ABI.getInstance();
+        }
+        throw new UnsupportedOperationException("Unsupported os or arch: " + os + ", " + arch);
+    }
+
+    private static void checkRestrictedAccess() {
+        switch (foreignAccess) {
+            case "deny" -> throwIllegalAccessError(foreignAccess);
+            case "warn" -> System.err.println("WARNING: Accessing jdk.incubator.foreign.Foreign.");
+            case "debug" -> {
+                StringBuilder sb = new StringBuilder("DEBUG: Accessing jdk.incubator.foreign.Foreign.");
+                StackWalker.getInstance().walk(s -> {
+                     s
+                     .forEach(f -> sb.append(System.lineSeparator()).append("\tat ").append(f));
+                    return null;
+                });
+                System.out.println(sb.toString());
+            }
+            case "permit" -> {}
+            default -> throwIllegalAccessError(foreignAccess);
+        }
+    }
+
+    private static void throwIllegalAccessError(String value) {
+        throw new IllegalAccessError("Can not access jdk.incubator.foreign.Foreign." +
+                " System property 'jdk.incubator.foreign.Foreign' is set to '" + value + "'");
+    }
+
+    private static VarHandle arrayHandle(MemoryLayout elemLayout, Class<?> elemCarrier) {
+        return MemoryLayout.ofSequence(1, elemLayout)
+                .varHandle(elemCarrier, MemoryLayout.PathElement.sequenceElement());
+    }
+
+
+    @Override
+    public MemorySegment toCString(String str) {
+        return toCString(str.getBytes());
+    }
+
+    @Override
+    public MemorySegment toCString(String str, Charset charset) {
+        return toCString(str.getBytes(charset));
+    }
+
+    private MemorySegment toCString(byte[] bytes) {
+        MemoryLayout strLayout = MemoryLayout.ofSequence(bytes.length + 1, C_CHAR);
+        MemorySegment segment = MemorySegment.allocateNative(strLayout);
+        MemoryAddress addr = segment.baseAddress();
+        for (int i = 0 ; i < bytes.length; i++) {
+            Lazy.byteArrHandle.set(addr, i, bytes[i]);
+        }
+        Lazy.byteArrHandle.set(addr, (long)bytes.length, (byte)0);
+        return segment;
+    }
+
+    @Override
+    public String toJavaString(MemoryAddress addr) {
+        StringBuilder buf = new StringBuilder();
+        try (MemorySegment seg = ofNativeUnchecked(addr, Long.MAX_VALUE)) {
+            MemoryAddress baseAddr = seg.baseAddress();
+            byte curr = (byte) Lazy.byteArrHandle.get(baseAddr, 0);
+            long offset = 0;
+            while (curr != 0) {
+                buf.append((char) curr);
+                curr = (byte) Lazy.byteArrHandle.get(baseAddr, ++offset);
+            }
+        }
+        return buf.toString();
+    }
+
+    // need to lazily initialize this to prevent circular init
+    // MemoryLayouts -> Foreign -> MemoryLayouts
+    private static class Lazy {
+        final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);
+    }
+}
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemorySegmentImpl.java
@@ -68,10 +68,20 @@
     final static int SMALL = FIRST_RESERVED_FLAG;
 
     final static long NONCE = new Random().nextLong();
 
     final static int DEFAULT_MASK = READ | WRITE | CLOSE | ACQUIRE;
+    public static final MemorySegmentImpl NOTHING = new MemorySegmentImpl();
+
+    private MemorySegmentImpl() {
+        this.length = 0L;
+        this.mask = 0;
+        this.min = 0L;
+        this.base = null;
+        this.owner = null;
+        this.scope = MemoryScope.GLOBAL;
+    }
 
     public MemorySegmentImpl(long min, Object base, long length, Thread owner, MemoryScope scope) {
         this(min, base, length, DEFAULT_MASK, owner, scope);
     }
 
diff a/test/jdk/java/foreign/TestSharedAccess.java b/test/jdk/java/foreign/TestSharedAccess.java
--- a/test/jdk/java/foreign/TestSharedAccess.java
+++ b/test/jdk/java/foreign/TestSharedAccess.java
@@ -22,20 +22,19 @@
  *
  */
 
 /*
  * @test
- * @modules jdk.incubator.foreign/jdk.incubator.foreign.unsafe
- * @run testng TestSharedAccess
+ * @run testng/othervm -Djdk.incubator.foreign.Foreign=permit TestSharedAccess
  */
 
+import jdk.incubator.foreign.Foreign;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.SequenceLayout;
-import jdk.incubator.foreign.unsafe.ForeignUnsafe;
 import org.testng.annotations.*;
 
 import java.lang.invoke.VarHandle;
 import java.util.ArrayList;
 import java.util.List;
@@ -97,11 +96,11 @@
     public void testSharedUnsafe() throws Throwable {
         try (MemorySegment s = MemorySegment.allocateNative(4)) {
             setInt(s.baseAddress(), 42);
             assertEquals(getInt(s.baseAddress()), 42);
             List<Thread> threads = new ArrayList<>();
-            MemorySegment sharedSegment = ForeignUnsafe.asUnconfined(s);
+            MemorySegment sharedSegment = Foreign.getInstance().asUnconfined(s);
             for (int i = 0 ; i < 1000 ; i++) {
                 threads.add(new Thread(() -> {
                     assertEquals(getInt(sharedSegment.baseAddress()), 42);
                 }));
             }
