diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/AllocationScope.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/AllocationScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/AllocationScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/AllocationScope.java
@@ -61,11 +61,11 @@
      * @param layout the layout of the block of memory to be allocated.
      * @param value the value to be set on the newly allocated memory block.
      * @return an address which points to the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this allocation scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
-     * @throws IllegalArgumentException if {@code layout.byteSize()) does not conform to the size of a byte value.
+     * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of a byte value.
      */
     public MemoryAddress allocate(MemoryLayout layout, byte value) {
         VarHandle handle = layout.varHandle(byte.class);
         MemoryAddress addr = allocate(layout);
         handle.set(addr, value);
@@ -79,11 +79,11 @@
      * @param layout the layout of the block of memory to be allocated.
      * @param value the value to be set on the newly allocated memory block.
      * @return an address which points to the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this allocation scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
-     * @throws IllegalArgumentException if {@code layout.byteSize()) does not conform to the size of a short value.
+     * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of a short value.
      */
     public MemoryAddress allocate(MemoryLayout layout, short value) {
         VarHandle handle = layout.varHandle(short.class);
         MemoryAddress addr = allocate(layout);
         handle.set(addr, value);
@@ -97,11 +97,11 @@
      * @param layout the layout of the block of memory to be allocated.
      * @param value the value to be set on the newly allocated memory block.
      * @return an address which points to the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this allocation scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
-     * @throws IllegalArgumentException if {@code layout.byteSize()) does not conform to the size of a int value.
+     * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of a int value.
      */
     public MemoryAddress allocate(MemoryLayout layout, int value) {
         VarHandle handle = layout.varHandle(int.class);
         MemoryAddress addr = allocate(layout);
         handle.set(addr, value);
@@ -115,11 +115,11 @@
      * @param layout the layout of the block of memory to be allocated.
      * @param value the value to be set on the newly allocated memory block.
      * @return an address which points to the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this allocation scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
-     * @throws IllegalArgumentException if {@code layout.byteSize()) does not conform to the size of a float value.
+     * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of a float value.
      */
     public MemoryAddress allocate(MemoryLayout layout, float value) {
         VarHandle handle = layout.varHandle(float.class);
         MemoryAddress addr = allocate(layout);
         handle.set(addr, value);
@@ -133,11 +133,11 @@
      * @param layout the layout of the block of memory to be allocated.
      * @param value the value to be set on the newly allocated memory block.
      * @return an address which points to the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this allocation scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
-     * @throws IllegalArgumentException if {@code layout.byteSize()) does not conform to the size of a long value.
+     * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of a long value.
      */
     public MemoryAddress allocate(MemoryLayout layout, long value) {
         VarHandle handle = layout.varHandle(long.class);
         MemoryAddress addr = allocate(layout);
         handle.set(addr, value);
@@ -151,11 +151,11 @@
      * @param layout the layout of the block of memory to be allocated.
      * @param value the value to be set on the newly allocated memory block.
      * @return an address which points to the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this allocation scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
-     * @throws IllegalArgumentException if {@code layout.byteSize()) does not conform to the size of a double value.
+     * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of a double value.
      */
     public MemoryAddress allocate(MemoryLayout layout, double value) {
         VarHandle handle = layout.varHandle(double.class);
         MemoryAddress addr = allocate(layout);
         handle.set(addr, value);
@@ -165,14 +165,15 @@
     /**
      * Allocate a block of memory in this allocation scope with given layout and initialize it with given address value.
      * The address returned by this method is associated with a segment which cannot be closed. Moreover, the returned
      * address must conform to the layout alignment constraints.
      * @param layout the layout of the block of memory to be allocated.
+     * @param value the value to be set on the newly allocated memory block.
      * @return an address which points to the newly allocated memory block.
      * @throws OutOfMemoryError if there is not enough space left in this allocation scope, that is, if
      * {@code limit() - size() < layout.byteSize()}.
-     * @throws IllegalArgumentException if {@code layout.byteSize()) does not conform to the size of an address value.
+     * @throws IllegalArgumentException if {@code layout.byteSize()} does not conform to the size of an address value.
      */
     public MemoryAddress allocate(MemoryLayout layout, MemoryAddress value) {
         VarHandle handle = layout.varHandle(MemoryAddress.class);
         MemoryAddress addr = allocate(layout);
         handle.set(addr, value);
