diff a/doc/panama_jextract.html b/doc/panama_jextract.html
--- a/doc/panama_jextract.html
+++ b/doc/panama_jextract.html
@@ -144,11 +144,11 @@
 </ul></li>
 <li><a href="#using-sqlite3-library-from-java-mac-os">Using sqlite3 library from Java (Mac OS)</a>
 <ul>
 <li><a href="#jextract-sqlite3.h">jextract sqlite3.h</a></li>
 <li><a href="#java-program-that-uses-sqlite3">Java program that uses sqlite3</a></li>
-<li><a href="#compiling-and-running-the-libgit2-sample-1">Compiling and running the libgit2 sample</a></li>
+<li><a href="#compiling-and-running-the-sqlite3-sample">Compiling and running the sqlite3 sample</a></li>
 </ul></li>
 </ul></li>
 </ul>
 </nav>
 <?xml version="1.0" encoding="utf-8"?>
@@ -311,34 +311,34 @@
 <span id="cb17-2"><a href="#cb17-2"></a><span class="ex">jextract</span> -C <span class="st">&quot;-D FORCE_OPENBLAS_COMPLEX_STRUCT&quot;</span> \</span>
 <span id="cb17-3"><a href="#cb17-3"></a>  -I /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include \</span>
 <span id="cb17-4"><a href="#cb17-4"></a>  -l openblas -t blas /usr/local/opt/openblas/include/cblas.h</span></code></pre></div>
 <h3 id="java-sample-code-that-uses-cblas-library">Java sample code that uses cblas library</h3>
 <div class="sourceCode" id="cb18"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb18-1"><a href="#cb18-1"></a></span>
-<span id="cb18-2"><a href="#cb18-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.NativeAllocationScope;</span></span>
-<span id="cb18-3"><a href="#cb18-3"></a><span class="kw">import</span><span class="im"> blas.*;</span></span>
-<span id="cb18-4"><a href="#cb18-4"></a><span class="kw">import static</span><span class="im"> blas.RuntimeHelper.*;</span></span>
-<span id="cb18-5"><a href="#cb18-5"></a><span class="kw">import static</span><span class="im"> blas.cblas_h.*;</span></span>
-<span id="cb18-6"><a href="#cb18-6"></a></span>
-<span id="cb18-7"><a href="#cb18-7"></a><span class="kw">public</span> <span class="kw">class</span> TestBlas {</span>
-<span id="cb18-8"><a href="#cb18-8"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
-<span id="cb18-9"><a href="#cb18-9"></a>        <span class="dt">int</span> Layout;</span>
-<span id="cb18-10"><a href="#cb18-10"></a>        <span class="dt">int</span> transa;</span>
-<span id="cb18-11"><a href="#cb18-11"></a></span>
-<span id="cb18-12"><a href="#cb18-12"></a>        <span class="dt">double</span> alpha, beta;</span>
-<span id="cb18-13"><a href="#cb18-13"></a>        <span class="dt">int</span> m, n, lda, incx, incy, i;</span>
-<span id="cb18-14"><a href="#cb18-14"></a></span>
-<span id="cb18-15"><a href="#cb18-15"></a>        Layout = <span class="fu">CblasColMajor</span>();</span>
-<span id="cb18-16"><a href="#cb18-16"></a>        transa = <span class="fu">CblasNoTrans</span>();</span>
-<span id="cb18-17"><a href="#cb18-17"></a></span>
-<span id="cb18-18"><a href="#cb18-18"></a>        m = <span class="dv">4</span>; <span class="co">/* Size of Column ( the number of rows ) */</span></span>
-<span id="cb18-19"><a href="#cb18-19"></a>        n = <span class="dv">4</span>; <span class="co">/* Size of Row ( the number of columns ) */</span></span>
-<span id="cb18-20"><a href="#cb18-20"></a>        lda = <span class="dv">4</span>; <span class="co">/* Leading dimension of 5 * 4 matrix is 5 */</span></span>
-<span id="cb18-21"><a href="#cb18-21"></a>        incx = <span class="dv">1</span>;</span>
-<span id="cb18-22"><a href="#cb18-22"></a>        incy = <span class="dv">1</span>;</span>
-<span id="cb18-23"><a href="#cb18-23"></a>        alpha = <span class="dv">1</span>;</span>
-<span id="cb18-24"><a href="#cb18-24"></a>        beta = <span class="dv">0</span>;</span>
-<span id="cb18-25"><a href="#cb18-25"></a>        <span class="kw">try</span> (NativeAllocationScope scope = NativeAllocationScope.<span class="fu">unboundedScope</span>()) {</span>
+<span id="cb18-2"><a href="#cb18-2"></a><span class="kw">import</span><span class="im"> blas.*;</span></span>
+<span id="cb18-3"><a href="#cb18-3"></a><span class="kw">import static</span><span class="im"> blas.RuntimeHelper.*;</span></span>
+<span id="cb18-4"><a href="#cb18-4"></a><span class="kw">import static</span><span class="im"> blas.cblas_h.*;</span></span>
+<span id="cb18-5"><a href="#cb18-5"></a></span>
+<span id="cb18-6"><a href="#cb18-6"></a><span class="kw">public</span> <span class="kw">class</span> TestBlas {</span>
+<span id="cb18-7"><a href="#cb18-7"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
+<span id="cb18-8"><a href="#cb18-8"></a>        <span class="dt">int</span> Layout;</span>
+<span id="cb18-9"><a href="#cb18-9"></a>        <span class="dt">int</span> transa;</span>
+<span id="cb18-10"><a href="#cb18-10"></a></span>
+<span id="cb18-11"><a href="#cb18-11"></a>        <span class="dt">double</span> alpha, beta;</span>
+<span id="cb18-12"><a href="#cb18-12"></a>        <span class="dt">int</span> m, n, lda, incx, incy, i;</span>
+<span id="cb18-13"><a href="#cb18-13"></a></span>
+<span id="cb18-14"><a href="#cb18-14"></a>        Layout = <span class="fu">CblasColMajor</span>();</span>
+<span id="cb18-15"><a href="#cb18-15"></a>        transa = <span class="fu">CblasNoTrans</span>();</span>
+<span id="cb18-16"><a href="#cb18-16"></a></span>
+<span id="cb18-17"><a href="#cb18-17"></a>        m = <span class="dv">4</span>; <span class="co">/* Size of Column ( the number of rows ) */</span></span>
+<span id="cb18-18"><a href="#cb18-18"></a>        n = <span class="dv">4</span>; <span class="co">/* Size of Row ( the number of columns ) */</span></span>
+<span id="cb18-19"><a href="#cb18-19"></a>        lda = <span class="dv">4</span>; <span class="co">/* Leading dimension of 5 * 4 matrix is 5 */</span></span>
+<span id="cb18-20"><a href="#cb18-20"></a>        incx = <span class="dv">1</span>;</span>
+<span id="cb18-21"><a href="#cb18-21"></a>        incy = <span class="dv">1</span>;</span>
+<span id="cb18-22"><a href="#cb18-22"></a>        alpha = <span class="dv">1</span>;</span>
+<span id="cb18-23"><a href="#cb18-23"></a>        beta = <span class="dv">0</span>;</span>
+<span id="cb18-24"><a href="#cb18-24"></a></span>
+<span id="cb18-25"><a href="#cb18-25"></a>        <span class="kw">try</span> (var scope = <span class="kw">new</span> <span class="fu">CScope</span>()) {</span>
 <span id="cb18-26"><a href="#cb18-26"></a>            var a = Cdouble.<span class="fu">allocateArray</span>(m*n, scope);</span>
 <span id="cb18-27"><a href="#cb18-27"></a>            var x = Cdouble.<span class="fu">allocateArray</span>(n, scope);</span>
 <span id="cb18-28"><a href="#cb18-28"></a>            var y = Cdouble.<span class="fu">allocateArray</span>(n, scope);</span>
 <span id="cb18-29"><a href="#cb18-29"></a></span>
 <span id="cb18-30"><a href="#cb18-30"></a>            <span class="co">/* The elements of the first column */</span></span>
@@ -368,18 +368,19 @@
 <span id="cb18-54"><a href="#cb18-54"></a>            Cdouble.<span class="fu">set</span>(x, <span class="dv">3</span>, <span class="fl">1.</span><span class="dv">0</span>);</span>
 <span id="cb18-55"><a href="#cb18-55"></a>            Cdouble.<span class="fu">set</span>(y, <span class="dv">0</span>, <span class="fl">0.</span><span class="dv">0</span>);</span>
 <span id="cb18-56"><a href="#cb18-56"></a>            Cdouble.<span class="fu">set</span>(y, <span class="dv">1</span>, <span class="fl">0.</span><span class="dv">0</span>);</span>
 <span id="cb18-57"><a href="#cb18-57"></a>            Cdouble.<span class="fu">set</span>(y, <span class="dv">2</span>, <span class="fl">0.</span><span class="dv">0</span>);</span>
 <span id="cb18-58"><a href="#cb18-58"></a>            Cdouble.<span class="fu">set</span>(y, <span class="dv">3</span>, <span class="fl">0.</span><span class="dv">0</span>);</span>
-<span id="cb18-59"><a href="#cb18-59"></a>            <span class="fu">cblas_dgemv</span>(Layout, transa, m, n, alpha, a, lda, x, incx, beta, y, incy);</span>
-<span id="cb18-60"><a href="#cb18-60"></a>            <span class="co">/* Print y */</span></span>
-<span id="cb18-61"><a href="#cb18-61"></a>            <span class="kw">for</span> (i = <span class="dv">0</span>; i &lt; n; i++) {</span>
-<span id="cb18-62"><a href="#cb18-62"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">print</span>(<span class="bu">String</span><span class="fu">.format</span>(<span class="st">&quot; y</span><span class="sc">%d</span><span class="st"> = </span><span class="sc">%f\n</span><span class="st">&quot;</span>, i, Cdouble.<span class="fu">get</span>(y, (<span class="dt">long</span>)i)));</span>
-<span id="cb18-63"><a href="#cb18-63"></a>            }</span>
-<span id="cb18-64"><a href="#cb18-64"></a>        }</span>
-<span id="cb18-65"><a href="#cb18-65"></a>    }</span>
-<span id="cb18-66"><a href="#cb18-66"></a>}</span></code></pre></div>
+<span id="cb18-59"><a href="#cb18-59"></a></span>
+<span id="cb18-60"><a href="#cb18-60"></a>            <span class="fu">cblas_dgemv</span>(Layout, transa, m, n, alpha, a, lda, x, incx, beta, y, incy);</span>
+<span id="cb18-61"><a href="#cb18-61"></a>            <span class="co">/* Print y */</span></span>
+<span id="cb18-62"><a href="#cb18-62"></a>            <span class="kw">for</span> (i = <span class="dv">0</span>; i &lt; n; i++) {</span>
+<span id="cb18-63"><a href="#cb18-63"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">print</span>(<span class="bu">String</span><span class="fu">.format</span>(<span class="st">&quot; y</span><span class="sc">%d</span><span class="st"> = </span><span class="sc">%f\n</span><span class="st">&quot;</span>, i, Cdouble.<span class="fu">get</span>(y, (<span class="dt">long</span>)i)));</span>
+<span id="cb18-64"><a href="#cb18-64"></a>            }</span>
+<span id="cb18-65"><a href="#cb18-65"></a>        }</span>
+<span id="cb18-66"><a href="#cb18-66"></a>    }</span>
+<span id="cb18-67"><a href="#cb18-67"></a>}</span></code></pre></div>
 <h3 id="compiling-and-running-the-above-blas-sample">Compiling and running the above BLAS sample</h3>
 <div class="sourceCode" id="cb19"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb19-1"><a href="#cb19-1"></a></span>
 <span id="cb19-2"><a href="#cb19-2"></a><span class="ex">java</span> -Dforeign.restricted=permit --add-modules jdk.incubator.foreign \</span>
 <span id="cb19-3"><a href="#cb19-3"></a>    -Djava.library.path=/usr/local/opt/openblas/lib \</span>
 <span id="cb19-4"><a href="#cb19-4"></a>    TestBlas.java</span></code></pre></div>
@@ -392,19 +393,19 @@
 <span id="cb20-4"><a href="#cb20-4"></a>   -l lapacke -t lapack \</span>
 <span id="cb20-5"><a href="#cb20-5"></a>   --filter lapacke.h \</span>
 <span id="cb20-6"><a href="#cb20-6"></a>   /usr/local/opt/lapack/include/lapacke.h</span></code></pre></div>
 <h3 id="java-sample-code-that-uses-lapack-library">Java sample code that uses LAPACK library</h3>
 <div class="sourceCode" id="cb21"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb21-1"><a href="#cb21-1"></a></span>
-<span id="cb21-2"><a href="#cb21-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.NativeAllocationScope;</span></span>
+<span id="cb21-2"><a href="#cb21-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.MemoryAddress;</span></span>
 <span id="cb21-3"><a href="#cb21-3"></a><span class="kw">import</span><span class="im"> lapack.*;</span></span>
 <span id="cb21-4"><a href="#cb21-4"></a><span class="kw">import static</span><span class="im"> lapack.lapacke_h.*;</span></span>
 <span id="cb21-5"><a href="#cb21-5"></a></span>
 <span id="cb21-6"><a href="#cb21-6"></a><span class="kw">public</span> <span class="kw">class</span> TestLapack {</span>
 <span id="cb21-7"><a href="#cb21-7"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
 <span id="cb21-8"><a href="#cb21-8"></a></span>
 <span id="cb21-9"><a href="#cb21-9"></a>        <span class="co">/* Locals */</span></span>
-<span id="cb21-10"><a href="#cb21-10"></a>        <span class="kw">try</span> (var scope = NativeAllocationScope.<span class="fu">unboundedScope</span>()) {</span>
+<span id="cb21-10"><a href="#cb21-10"></a>        <span class="kw">try</span> (var scope = <span class="kw">new</span> <span class="fu">CScope</span>()) {</span>
 <span id="cb21-11"><a href="#cb21-11"></a>            var A = Cdouble.<span class="fu">allocateArray</span>(<span class="kw">new</span> <span class="dt">double</span>[]{</span>
 <span id="cb21-12"><a href="#cb21-12"></a>                    <span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>, <span class="dv">1</span>, <span class="dv">3</span>, <span class="dv">5</span>, <span class="dv">2</span>, <span class="dv">4</span>, <span class="dv">1</span>, <span class="dv">4</span>, <span class="dv">2</span>, <span class="dv">5</span>, <span class="dv">3</span></span>
 <span id="cb21-13"><a href="#cb21-13"></a>            }, scope);</span>
 <span id="cb21-14"><a href="#cb21-14"></a>            var b = Cdouble.<span class="fu">allocateArray</span>(<span class="kw">new</span> <span class="dt">double</span>[]{</span>
 <span id="cb21-15"><a href="#cb21-15"></a>                    -<span class="dv">10</span>, <span class="dv">12</span>, <span class="dv">14</span>, <span class="dv">16</span>, <span class="dv">18</span>, -<span class="dv">3</span>, <span class="dv">14</span>, <span class="dv">12</span>, <span class="dv">16</span>, <span class="dv">16</span></span>
@@ -443,11 +444,12 @@
 <span id="cb21-48"><a href="#cb21-48"></a>        <span class="kw">for</span>( i = <span class="dv">0</span>; i &lt; m; i++ ) {</span>
 <span id="cb21-49"><a href="#cb21-49"></a>            <span class="kw">for</span>( j = <span class="dv">0</span>; j &lt; n; j++ ) <span class="bu">System</span>.<span class="fu">out.printf</span>(<span class="st">&quot; </span><span class="sc">%6.2f</span><span class="st">&quot;</span>, Cdouble.<span class="fu">get</span>(mat, i+j*ldm));</span>
 <span id="cb21-50"><a href="#cb21-50"></a>            <span class="bu">System</span>.<span class="fu">out.printf</span>( <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span> );</span>
 <span id="cb21-51"><a href="#cb21-51"></a>        }</span>
 <span id="cb21-52"><a href="#cb21-52"></a>    }</span>
-<span id="cb21-53"><a href="#cb21-53"></a>}</span></code></pre></div>
+<span id="cb21-53"><a href="#cb21-53"></a>}</span>
+<span id="cb21-54"><a href="#cb21-54"></a></span></code></pre></div>
 <h3 id="compiling-and-running-the-above-lapack-sample">Compiling and running the above LAPACK sample</h3>
 <div class="sourceCode" id="cb22"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb22-1"><a href="#cb22-1"></a></span>
 <span id="cb22-2"><a href="#cb22-2"></a><span class="ex">java</span> -Dforeign.restricted=permit \</span>
 <span id="cb22-3"><a href="#cb22-3"></a>    --add-modules jdk.incubator.foreign \</span>
 <span id="cb22-4"><a href="#cb22-4"></a>    -Djava.library.path=/usr/local/opt/lapack/lib \</span>
@@ -459,41 +461,40 @@
 <span id="cb23-3"><a href="#cb23-3"></a>  -I /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include \</span>
 <span id="cb23-4"><a href="#cb23-4"></a>  --filter libproc.h \</span>
 <span id="cb23-5"><a href="#cb23-5"></a>  /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/libproc.h</span></code></pre></div>
 <h3 id="java-program-that-uses-libproc-to-list-processes">Java program that uses libproc to list processes</h3>
 <div class="sourceCode" id="cb24"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb24-1"><a href="#cb24-1"></a></span>
-<span id="cb24-2"><a href="#cb24-2"></a><span class="kw">import</span><span class="im"> jdk.incubator.foreign.NativeAllocationScope;</span></span>
-<span id="cb24-3"><a href="#cb24-3"></a><span class="kw">import</span><span class="im"> org.unix.*;</span></span>
-<span id="cb24-4"><a href="#cb24-4"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
-<span id="cb24-5"><a href="#cb24-5"></a><span class="kw">import static</span><span class="im"> org.unix.libproc_h.*;</span></span>
-<span id="cb24-6"><a href="#cb24-6"></a></span>
-<span id="cb24-7"><a href="#cb24-7"></a><span class="kw">public</span> <span class="kw">class</span> LibprocMain {</span>
-<span id="cb24-8"><a href="#cb24-8"></a>    <span class="kw">private</span> <span class="dt">static</span> <span class="dt">final</span> <span class="dt">int</span> NAME_BUF_MAX = <span class="dv">256</span>;</span>
-<span id="cb24-9"><a href="#cb24-9"></a></span>
-<span id="cb24-10"><a href="#cb24-10"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
-<span id="cb24-11"><a href="#cb24-11"></a>        <span class="kw">try</span> (var scope = NativeAllocationScope.<span class="fu">unboundedScope</span>()) {</span>
-<span id="cb24-12"><a href="#cb24-12"></a>            <span class="co">// get the number of processes</span></span>
-<span id="cb24-13"><a href="#cb24-13"></a>            <span class="dt">int</span> numPids = <span class="fu">proc_listallpids</span>(NULL, <span class="dv">0</span>);</span>
-<span id="cb24-14"><a href="#cb24-14"></a>            <span class="co">// allocate an array</span></span>
-<span id="cb24-15"><a href="#cb24-15"></a>            var pids = Cint.<span class="fu">allocateArray</span>(numPids, scope);</span>
-<span id="cb24-16"><a href="#cb24-16"></a>            <span class="co">// list all the pids into the native array</span></span>
-<span id="cb24-17"><a href="#cb24-17"></a>            <span class="fu">proc_listallpids</span>(pids, numPids);</span>
-<span id="cb24-18"><a href="#cb24-18"></a>            <span class="co">// convert native array to java array</span></span>
-<span id="cb24-19"><a href="#cb24-19"></a>            <span class="dt">int</span>[] jpids = Cint.<span class="fu">toJavaArray</span>(pids.<span class="fu">segment</span>());</span>
-<span id="cb24-20"><a href="#cb24-20"></a>            <span class="co">// buffer for process name</span></span>
-<span id="cb24-21"><a href="#cb24-21"></a>            var nameBuf = Cchar.<span class="fu">allocateArray</span>(NAME_BUF_MAX,scope);</span>
-<span id="cb24-22"><a href="#cb24-22"></a>            <span class="kw">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; jpids.<span class="fu">length</span>; i++) {</span>
-<span id="cb24-23"><a href="#cb24-23"></a>                <span class="dt">int</span> pid = jpids[i];</span>
-<span id="cb24-24"><a href="#cb24-24"></a>                <span class="co">// get the process name</span></span>
-<span id="cb24-25"><a href="#cb24-25"></a>                <span class="fu">proc_name</span>(pid, nameBuf, NAME_BUF_MAX);</span>
-<span id="cb24-26"><a href="#cb24-26"></a>                <span class="bu">String</span> procName = Cstring.<span class="fu">toJavaString</span>(nameBuf);</span>
-<span id="cb24-27"><a href="#cb24-27"></a>                <span class="co">// print pid and process name</span></span>
-<span id="cb24-28"><a href="#cb24-28"></a>                <span class="bu">System</span>.<span class="fu">out.printf</span>(<span class="st">&quot;</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%s\n</span><span class="st">&quot;</span>, pid, procName);</span>
-<span id="cb24-29"><a href="#cb24-29"></a>            }</span>
-<span id="cb24-30"><a href="#cb24-30"></a>        }</span>
-<span id="cb24-31"><a href="#cb24-31"></a>    }</span>
-<span id="cb24-32"><a href="#cb24-32"></a>}</span></code></pre></div>
+<span id="cb24-2"><a href="#cb24-2"></a><span class="kw">import</span><span class="im"> org.unix.*;</span></span>
+<span id="cb24-3"><a href="#cb24-3"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
+<span id="cb24-4"><a href="#cb24-4"></a><span class="kw">import static</span><span class="im"> org.unix.libproc_h.*;</span></span>
+<span id="cb24-5"><a href="#cb24-5"></a></span>
+<span id="cb24-6"><a href="#cb24-6"></a><span class="kw">public</span> <span class="kw">class</span> LibprocMain {</span>
+<span id="cb24-7"><a href="#cb24-7"></a>    <span class="kw">private</span> <span class="dt">static</span> <span class="dt">final</span> <span class="dt">int</span> NAME_BUF_MAX = <span class="dv">256</span>;</span>
+<span id="cb24-8"><a href="#cb24-8"></a></span>
+<span id="cb24-9"><a href="#cb24-9"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
+<span id="cb24-10"><a href="#cb24-10"></a>        <span class="kw">try</span> (var scope = <span class="kw">new</span> <span class="fu">CScope</span>()) {</span>
+<span id="cb24-11"><a href="#cb24-11"></a>            <span class="co">// get the number of processes</span></span>
+<span id="cb24-12"><a href="#cb24-12"></a>            <span class="dt">int</span> numPids = <span class="fu">proc_listallpids</span>(NULL, <span class="dv">0</span>);</span>
+<span id="cb24-13"><a href="#cb24-13"></a>            <span class="co">// allocate an array</span></span>
+<span id="cb24-14"><a href="#cb24-14"></a>            var pids = Cint.<span class="fu">allocateArray</span>(numPids, scope);</span>
+<span id="cb24-15"><a href="#cb24-15"></a>            <span class="co">// list all the pids into the native array</span></span>
+<span id="cb24-16"><a href="#cb24-16"></a>            <span class="fu">proc_listallpids</span>(pids, numPids);</span>
+<span id="cb24-17"><a href="#cb24-17"></a>            <span class="co">// convert native array to java array</span></span>
+<span id="cb24-18"><a href="#cb24-18"></a>            <span class="dt">int</span>[] jpids = Cint.<span class="fu">toJavaArray</span>(pids.<span class="fu">segment</span>());</span>
+<span id="cb24-19"><a href="#cb24-19"></a>            <span class="co">// buffer for process name</span></span>
+<span id="cb24-20"><a href="#cb24-20"></a>            var nameBuf = Cchar.<span class="fu">allocateArray</span>(NAME_BUF_MAX,scope);</span>
+<span id="cb24-21"><a href="#cb24-21"></a>            <span class="kw">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; jpids.<span class="fu">length</span>; i++) {</span>
+<span id="cb24-22"><a href="#cb24-22"></a>                <span class="dt">int</span> pid = jpids[i];</span>
+<span id="cb24-23"><a href="#cb24-23"></a>                <span class="co">// get the process name</span></span>
+<span id="cb24-24"><a href="#cb24-24"></a>                <span class="fu">proc_name</span>(pid, nameBuf, NAME_BUF_MAX);</span>
+<span id="cb24-25"><a href="#cb24-25"></a>                <span class="bu">String</span> procName = Cstring.<span class="fu">toJavaString</span>(nameBuf);</span>
+<span id="cb24-26"><a href="#cb24-26"></a>                <span class="co">// print pid and process name</span></span>
+<span id="cb24-27"><a href="#cb24-27"></a>                <span class="bu">System</span>.<span class="fu">out.printf</span>(<span class="st">&quot;</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%s\n</span><span class="st">&quot;</span>, pid, procName);</span>
+<span id="cb24-28"><a href="#cb24-28"></a>            }</span>
+<span id="cb24-29"><a href="#cb24-29"></a>        }</span>
+<span id="cb24-30"><a href="#cb24-30"></a>    }</span>
+<span id="cb24-31"><a href="#cb24-31"></a>}</span></code></pre></div>
 <h3 id="compiling-and-running-the-libproc-sample">Compiling and running the libproc sample</h3>
 <div class="sourceCode" id="cb25"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb25-1"><a href="#cb25-1"></a></span>
 <span id="cb25-2"><a href="#cb25-2"></a><span class="ex">java</span> -Dforeign.restricted=permit \</span>
 <span id="cb25-3"><a href="#cb25-3"></a>    --add-modules jdk.incubator.foreign \</span>
 <span id="cb25-4"><a href="#cb25-4"></a>    -Djava.library.path=/usr/lib LibprocMain.java</span></code></pre></div>
@@ -512,24 +513,24 @@
 <span id="cb26-4"><a href="#cb26-4"></a>  -I <span class="va">${LIBGIT2_HOME}</span>/include/ \</span>
 <span id="cb26-5"><a href="#cb26-5"></a>  -I <span class="va">${LIBGIT2_HOME}</span>/include/git2 \</span>
 <span id="cb26-6"><a href="#cb26-6"></a>  <span class="va">${LIBGIT2_HOME}</span>/include/git2.h</span></code></pre></div>
 <h3 id="java-program-that-uses-libgit2-to-clone-github-repo">Java program that uses libgit2 to clone github repo</h3>
 <div class="sourceCode" id="cb27"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb27-1"><a href="#cb27-1"></a></span>
-<span id="cb27-2"><a href="#cb27-2"></a><span class="kw">import static</span><span class="im"> com.github.git2_h.*;</span></span>
-<span id="cb27-3"><a href="#cb27-3"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.CSupport.*;</span></span>
-<span id="cb27-4"><a href="#cb27-4"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
-<span id="cb27-5"><a href="#cb27-5"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.NativeAllocationScope.*;</span></span>
+<span id="cb27-2"><a href="#cb27-2"></a><span class="kw">import</span><span class="im"> com.github.CScope;</span></span>
+<span id="cb27-3"><a href="#cb27-3"></a><span class="kw">import static</span><span class="im"> com.github.git2_h.*;</span></span>
+<span id="cb27-4"><a href="#cb27-4"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.CSupport.*;</span></span>
+<span id="cb27-5"><a href="#cb27-5"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
 <span id="cb27-6"><a href="#cb27-6"></a><span class="kw">import static</span><span class="im"> com.github.Cstring.*;</span></span>
 <span id="cb27-7"><a href="#cb27-7"></a></span>
 <span id="cb27-8"><a href="#cb27-8"></a><span class="kw">public</span> <span class="kw">class</span> GitClone {</span>
 <span id="cb27-9"><a href="#cb27-9"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
 <span id="cb27-10"><a href="#cb27-10"></a>          <span class="kw">if</span> (args.<span class="fu">length</span> != <span class="dv">2</span>) {</span>
 <span id="cb27-11"><a href="#cb27-11"></a>              <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;java GitClone &lt;url&gt; &lt;path&gt;&quot;</span>);</span>
 <span id="cb27-12"><a href="#cb27-12"></a>              <span class="bu">System</span>.<span class="fu">exit</span>(<span class="dv">1</span>);</span>
 <span id="cb27-13"><a href="#cb27-13"></a>          }</span>
 <span id="cb27-14"><a href="#cb27-14"></a>          <span class="fu">git_libgit2_init</span>();</span>
-<span id="cb27-15"><a href="#cb27-15"></a>          <span class="kw">try</span> (var scope = <span class="fu">unboundedScope</span>()) {</span>
+<span id="cb27-15"><a href="#cb27-15"></a>          <span class="kw">try</span> (var scope = <span class="kw">new</span> <span class="fu">CScope</span>()) {</span>
 <span id="cb27-16"><a href="#cb27-16"></a>              var repo = scope.<span class="fu">allocate</span>(C_POINTER, NULL);</span>
 <span id="cb27-17"><a href="#cb27-17"></a>              var url = <span class="fu">toCString</span>(args[<span class="dv">0</span>], scope);</span>
 <span id="cb27-18"><a href="#cb27-18"></a>              var path = <span class="fu">toCString</span>(args[<span class="dv">1</span>], scope);</span>
 <span id="cb27-19"><a href="#cb27-19"></a>              <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="fu">git_clone</span>(repo, url, path, NULL));</span>
 <span id="cb27-20"><a href="#cb27-20"></a>          }</span>
@@ -555,11 +556,11 @@
 <span id="cb30-5"><a href="#cb30-5"></a>  -t org.sqlite -lsqlite3</span></code></pre></div>
 <h3 id="java-program-that-uses-sqlite3">Java program that uses sqlite3</h3>
 <div class="sourceCode" id="cb31"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb31-1"><a href="#cb31-1"></a></span>
 <span id="cb31-2"><a href="#cb31-2"></a><span class="kw">import</span><span class="im"> org.sqlite.Cpointer;</span></span>
 <span id="cb31-3"><a href="#cb31-3"></a><span class="kw">import</span><span class="im"> org.sqlite.Cstring;</span></span>
-<span id="cb31-4"><a href="#cb31-4"></a><span class="kw">import</span><span class="im"> org.sqlite.RuntimeHelper.CScope;</span></span>
+<span id="cb31-4"><a href="#cb31-4"></a><span class="kw">import</span><span class="im"> org.sqlite.CScope;</span></span>
 <span id="cb31-5"><a href="#cb31-5"></a><span class="kw">import static</span><span class="im"> jdk.incubator.foreign.MemoryAddress.NULL;</span></span>
 <span id="cb31-6"><a href="#cb31-6"></a><span class="kw">import static</span><span class="im"> org.sqlite.sqlite3_h.*;</span></span>
 <span id="cb31-7"><a href="#cb31-7"></a></span>
 <span id="cb31-8"><a href="#cb31-8"></a><span class="kw">public</span> <span class="kw">class</span> SqliteMain {</span>
 <span id="cb31-9"><a href="#cb31-9"></a>   <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) <span class="kw">throws</span> <span class="bu">Exception</span> {</span>
@@ -626,30 +627,29 @@
 <span id="cb31-70"><a href="#cb31-70"></a>                     <span class="bu">String</span> name = Cstring.<span class="fu">toJavaString</span>(Cpointer.<span class="fu">get</span>(columnNames, i));</span>
 <span id="cb31-71"><a href="#cb31-71"></a>                     <span class="bu">String</span> value = Cstring.<span class="fu">toJavaString</span>(Cpointer.<span class="fu">get</span>(argv, i));</span>
 <span id="cb31-72"><a href="#cb31-72"></a>                     <span class="bu">System</span>.<span class="fu">out.printf</span>(<span class="st">&quot;</span><span class="sc">%s</span><span class="st"> = </span><span class="sc">%s\n</span><span class="st">&quot;</span>, name, value);</span>
 <span id="cb31-73"><a href="#cb31-73"></a>                }</span>
 <span id="cb31-74"><a href="#cb31-74"></a>                <span class="kw">return</span> <span class="dv">0</span>;</span>
-<span id="cb31-75"><a href="#cb31-75"></a>            });</span>
-<span id="cb31-76"><a href="#cb31-76"></a>            scope.<span class="fu">register</span>(callback);</span>
-<span id="cb31-77"><a href="#cb31-77"></a></span>
-<span id="cb31-78"><a href="#cb31-78"></a>            <span class="co">// select query</span></span>
-<span id="cb31-79"><a href="#cb31-79"></a>            sql = Cstring.<span class="fu">toCString</span>(<span class="st">&quot;SELECT * FROM EMPLOYEE&quot;</span>, scope);</span>
-<span id="cb31-80"><a href="#cb31-80"></a>            rc = <span class="fu">sqlite3_exec</span>(dbPtr, sql, callback.<span class="fu">baseAddress</span>(), NULL, errMsgPtrPtr);</span>
-<span id="cb31-81"><a href="#cb31-81"></a></span>
-<span id="cb31-82"><a href="#cb31-82"></a>            <span class="kw">if</span> (rc != <span class="dv">0</span>) {</span>
-<span id="cb31-83"><a href="#cb31-83"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;sqlite3_exec failed: &quot;</span> + rc);</span>
-<span id="cb31-84"><a href="#cb31-84"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;SQL error: &quot;</span> + Cstring.<span class="fu">toJavaString</span>(Cpointer.<span class="fu">get</span>(errMsgPtrPtr)));</span>
-<span id="cb31-85"><a href="#cb31-85"></a>                <span class="fu">sqlite3_free</span>(Cpointer.<span class="fu">get</span>(errMsgPtrPtr));</span>
-<span id="cb31-86"><a href="#cb31-86"></a>            } <span class="kw">else</span> {</span>
-<span id="cb31-87"><a href="#cb31-87"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;done&quot;</span>);</span>
-<span id="cb31-88"><a href="#cb31-88"></a>            }</span>
-<span id="cb31-89"><a href="#cb31-89"></a></span>
-<span id="cb31-90"><a href="#cb31-90"></a>            <span class="fu">sqlite3_close</span>(dbPtr);</span>
-<span id="cb31-91"><a href="#cb31-91"></a>        }</span>
-<span id="cb31-92"><a href="#cb31-92"></a>    }</span>
-<span id="cb31-93"><a href="#cb31-93"></a>}</span></code></pre></div>
-<h3 id="compiling-and-running-the-libgit2-sample-1">Compiling and running the libgit2 sample</h3>
+<span id="cb31-75"><a href="#cb31-75"></a>            }, scope);</span>
+<span id="cb31-76"><a href="#cb31-76"></a></span>
+<span id="cb31-77"><a href="#cb31-77"></a>            <span class="co">// select query</span></span>
+<span id="cb31-78"><a href="#cb31-78"></a>            sql = Cstring.<span class="fu">toCString</span>(<span class="st">&quot;SELECT * FROM EMPLOYEE&quot;</span>, scope);</span>
+<span id="cb31-79"><a href="#cb31-79"></a>            rc = <span class="fu">sqlite3_exec</span>(dbPtr, sql, callback, NULL, errMsgPtrPtr);</span>
+<span id="cb31-80"><a href="#cb31-80"></a></span>
+<span id="cb31-81"><a href="#cb31-81"></a>            <span class="kw">if</span> (rc != <span class="dv">0</span>) {</span>
+<span id="cb31-82"><a href="#cb31-82"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;sqlite3_exec failed: &quot;</span> + rc);</span>
+<span id="cb31-83"><a href="#cb31-83"></a>                <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;SQL error: &quot;</span> + Cstring.<span class="fu">toJavaString</span>(Cpointer.<span class="fu">get</span>(errMsgPtrPtr)));</span>
+<span id="cb31-84"><a href="#cb31-84"></a>                <span class="fu">sqlite3_free</span>(Cpointer.<span class="fu">get</span>(errMsgPtrPtr));</span>
+<span id="cb31-85"><a href="#cb31-85"></a>            } <span class="kw">else</span> {</span>
+<span id="cb31-86"><a href="#cb31-86"></a>                <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;done&quot;</span>);</span>
+<span id="cb31-87"><a href="#cb31-87"></a>            }</span>
+<span id="cb31-88"><a href="#cb31-88"></a></span>
+<span id="cb31-89"><a href="#cb31-89"></a>            <span class="fu">sqlite3_close</span>(dbPtr);</span>
+<span id="cb31-90"><a href="#cb31-90"></a>        }</span>
+<span id="cb31-91"><a href="#cb31-91"></a>    }</span>
+<span id="cb31-92"><a href="#cb31-92"></a>}</span></code></pre></div>
+<h3 id="compiling-and-running-the-sqlite3-sample">Compiling and running the sqlite3 sample</h3>
 <div class="sourceCode" id="cb32"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb32-1"><a href="#cb32-1"></a></span>
 <span id="cb32-2"><a href="#cb32-2"></a><span class="ex">java</span> -Dforeign.restricted=permit \</span>
 <span id="cb32-3"><a href="#cb32-3"></a>   --add-modules jdk.incubator.foreign \</span>
 <span id="cb32-4"><a href="#cb32-4"></a>   -Djava.library.path=/usr/lib SqliteMain.java</span></code></pre></div>
 </body>
diff a/doc/panama_jextract.md b/doc/panama_jextract.md
--- a/doc/panama_jextract.md
+++ b/doc/panama_jextract.md
@@ -261,11 +261,10 @@
 
 ### Java sample code that uses cblas library
 
 ```java
 
-import jdk.incubator.foreign.NativeAllocationScope;
 import blas.*;
 import static blas.RuntimeHelper.*;
 import static blas.cblas_h.*;
 
 public class TestBlas {
@@ -284,11 +283,12 @@
         lda = 4; /* Leading dimension of 5 * 4 matrix is 5 */
         incx = 1;
         incy = 1;
         alpha = 1;
         beta = 0;
-        try (NativeAllocationScope scope = NativeAllocationScope.unboundedScope()) {
+
+        try (var scope = new CScope()) {
             var a = Cdouble.allocateArray(m*n, scope);
             var x = Cdouble.allocateArray(n, scope);
             var y = Cdouble.allocateArray(n, scope);
 
             /* The elements of the first column */
@@ -318,19 +318,19 @@
             Cdouble.set(x, 3, 1.0);
             Cdouble.set(y, 0, 0.0);
             Cdouble.set(y, 1, 0.0);
             Cdouble.set(y, 2, 0.0);
             Cdouble.set(y, 3, 0.0);
+
             cblas_dgemv(Layout, transa, m, n, alpha, a, lda, x, incx, beta, y, incy);
             /* Print y */
             for (i = 0; i < n; i++) {
                 System.out.print(String.format(" y%d = %f\n", i, Cdouble.get(y, (long)i)));
             }
         }
     }
 }
-
 ```
 
 ### Compiling and running the above BLAS sample
 
 ```sh
@@ -359,19 +359,19 @@
 
 ### Java sample code that uses LAPACK library
 
 ```java
 
-import jdk.incubator.foreign.NativeAllocationScope;
+import jdk.incubator.foreign.MemoryAddress;
 import lapack.*;
 import static lapack.lapacke_h.*;
 
 public class TestLapack {
     public static void main(String[] args) {
 
         /* Locals */
-        try (var scope = NativeAllocationScope.unboundedScope()) {
+        try (var scope = new CScope()) {
             var A = Cdouble.allocateArray(new double[]{
                     1, 2, 3, 4, 5, 1, 3, 5, 2, 4, 1, 4, 2, 5, 3
             }, scope);
             var b = Cdouble.allocateArray(new double[]{
                     -10, 12, 14, 16, 18, -3, 14, 12, 16, 16
@@ -412,10 +412,11 @@
             System.out.printf( "\n" );
         }
     }
 }
 
+
 ```
 
 ### Compiling and running the above LAPACK sample
 
 ```sh
@@ -441,20 +442,19 @@
 
 ### Java program that uses libproc to list processes
 
 ```java
 
-import jdk.incubator.foreign.NativeAllocationScope;
 import org.unix.*;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 import static org.unix.libproc_h.*;
 
 public class LibprocMain {
     private static final int NAME_BUF_MAX = 256;
 
     public static void main(String[] args) {
-        try (var scope = NativeAllocationScope.unboundedScope()) {
+        try (var scope = new CScope()) {
             // get the number of processes
             int numPids = proc_listallpids(NULL, 0);
             // allocate an array
             var pids = Cint.allocateArray(numPids, scope);
             // list all the pids into the native array
@@ -510,33 +510,32 @@
 
 ### Java program that uses libgit2 to clone github repo
 
 ```java
 
+import com.github.CScope;
 import static com.github.git2_h.*;
 import static jdk.incubator.foreign.CSupport.*;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
-import static jdk.incubator.foreign.NativeAllocationScope.*;
 import static com.github.Cstring.*;
 
 public class GitClone {
     public static void main(String[] args) {
           if (args.length != 2) {
               System.err.println("java GitClone <url> <path>");
               System.exit(1);
           }
           git_libgit2_init();
-          try (var scope = unboundedScope()) {
+          try (var scope = new CScope()) {
               var repo = scope.allocate(C_POINTER, NULL);
               var url = toCString(args[0], scope);
               var path = toCString(args[1], scope);
               System.out.println(git_clone(repo, url, path, NULL));
           }
           git_libgit2_shutdown();
     }
 }
-
 ```
 
 ### Compiling and running the libgit2 sample
 
 ```sh
@@ -573,11 +572,11 @@
 
 ```java
 
 import org.sqlite.Cpointer;
 import org.sqlite.Cstring;
-import org.sqlite.RuntimeHelper.CScope;
+import org.sqlite.CScope;
 import static jdk.incubator.foreign.MemoryAddress.NULL;
 import static org.sqlite.sqlite3_h.*;
 
 public class SqliteMain {
    public static void main(String[] args) throws Exception {
@@ -644,16 +643,15 @@
                      String name = Cstring.toJavaString(Cpointer.get(columnNames, i));
                      String value = Cstring.toJavaString(Cpointer.get(argv, i));
                      System.out.printf("%s = %s\n", name, value);
                 }
                 return 0;
-            });
-            scope.register(callback);
+            }, scope);
 
             // select query
             sql = Cstring.toCString("SELECT * FROM EMPLOYEE", scope);
-            rc = sqlite3_exec(dbPtr, sql, callback.baseAddress(), NULL, errMsgPtrPtr);
+            rc = sqlite3_exec(dbPtr, sql, callback, NULL, errMsgPtrPtr);
 
             if (rc != 0) {
                 System.err.println("sqlite3_exec failed: " + rc);
                 System.err.println("SQL error: " + Cstring.toJavaString(Cpointer.get(errMsgPtrPtr)));
                 sqlite3_free(Cpointer.get(errMsgPtrPtr));
@@ -663,14 +661,13 @@
 
             sqlite3_close(dbPtr);
         }
     }
 }
-
 ```
 
-### Compiling and running the libgit2 sample
+### Compiling and running the sqlite3 sample
 
 ```sh
 
 java -Dforeign.restricted=permit \
    --add-modules jdk.incubator.foreign \
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/HeaderBuilder.java
@@ -154,7 +154,16 @@
         sb.append("return RuntimeHelper.upcallStub(" + className + ".class, fi, " + functionGetCallString(className, fDesc) + ", " +
                 "\"" + mtype.toMethodDescriptorString() + "\");\n");
         decrAlign();
         indent();
         sb.append("}\n");
+
+        indent();
+        sb.append(PUB_MODS + "MemoryAddress allocate(" + className + " fi, CScope scope) {\n");
+        incrAlign();
+        indent();
+        sb.append("return scope.register(allocate(fi)).baseAddress();\n");
+        decrAlign();
+        indent();
+        sb.append("}\n");
     }
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -153,10 +153,11 @@
         try {
             List<JavaFileObject> files = new ArrayList<>();
             files.add(builder.build());
             files.addAll(constantHelper.getClasses());
             files.add(fileFromString(pkgName,"RuntimeHelper", getRuntimeHelperSource()));
+            files.add(getCScopeFile(pkgName));
             files.add(getCstringFile(pkgName));
             files.add(getCpointerFile(pkgName));
             files.addAll(getPrimitiveTypeFiles(pkgName));
             return files.toArray(new JavaFileObject[0]);
         } catch (IOException ex) {
@@ -179,10 +180,14 @@
         } catch (Exception ex) {
             ex.printStackTrace();
         }
     }
 
+    private JavaFileObject getCScopeFile(String pkgName) throws IOException, URISyntaxException {
+        return getTemplateFile(pkgName, "CScope", "resources/CScope.java.template");
+    }
+
     private JavaFileObject getCstringFile(String pkgName) throws IOException, URISyntaxException {
         return getTemplateFile(pkgName, "Cstring", "resources/Cstring.java.template");
     }
 
     private JavaFileObject getCpointerFile(String pkgName) throws IOException, URISyntaxException {
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/C-X.java.template
@@ -48,22 +48,22 @@
         var seg = MemorySegment.allocateNative(LAYOUT);
         handle.set(seg.baseAddress(), value);
         return seg;
     }
 
-    public static MemoryAddress allocate(${CARRIER} value, NativeAllocationScope scope) {
+    public static MemoryAddress allocate(${CARRIER} value, CScope scope) {
         var addr = scope.allocate(LAYOUT);
         handle.set(addr, value);
         return addr;
     }
 
     public static MemorySegment allocateArray(int length) {
         var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
         return MemorySegment.allocateNative(arrLayout);
     }
 
-    public static MemoryAddress allocateArray(int length, NativeAllocationScope scope) {
+    public static MemoryAddress allocateArray(int length, CScope scope) {
         var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
         return scope.allocate(arrLayout);
     }
 
     public static MemorySegment allocateArray(${CARRIER}[] arr) {
@@ -71,11 +71,11 @@
         var seg = MemorySegment.allocateNative(arrLayout);
         seg.copyFrom(MemorySegment.ofArray(arr));
         return seg;
     }
 
-    public static MemoryAddress allocateArray(${CARRIER}[] arr, NativeAllocationScope scope) {
+    public static MemoryAddress allocateArray(${CARRIER}[] arr, CScope scope) {
         var arrLayout = MemoryLayout.ofSequence(arr.length, LAYOUT);
         var addr = scope.allocate(arrLayout);
         addr.segment().copyFrom(MemorySegment.ofArray(arr));
         return addr;
     }
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/CScope.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/CScope.java.template
--- /dev/null
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/CScope.java.template
@@ -0,0 +1,51 @@
+// Generated by jextract
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+import java.util.OptionalLong;
+import jdk.incubator.foreign.MemoryAddress;
+import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.NativeAllocationScope;
+
+public final class CScope extends NativeAllocationScope {
+    private final NativeAllocationScope impl;
+    private final List<MemorySegment> segments = new ArrayList<>();
+
+    public CScope() {
+        impl = NativeAllocationScope.unboundedScope();
+    }
+
+    public CScope(long size) {
+        impl = NativeAllocationScope.boundedScope(size);
+    }
+
+    @Override
+    public OptionalLong byteSize() {
+        return impl.byteSize();
+    }
+
+    @Override
+    public long allocatedBytes() {
+        return impl.allocatedBytes();
+    }
+
+    @Override
+    public MemoryAddress allocate(long bytesSize, long bytesAlignment) {
+        return impl.allocate(bytesSize, bytesAlignment);
+    }
+
+    @Override
+    public void close() {
+        for (var seg : segments) {
+            seg.close();
+        }
+        impl.close();
+    }
+
+    public MemorySegment register(MemorySegment seg) {
+        segments.add(Objects.requireNonNull(seg));
+        return seg;
+    }
+}
+
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cpointer.java.template
@@ -1,9 +1,8 @@
 // Generated by jextract
 
 import java.lang.invoke.VarHandle;
-import jdk.incubator.foreign.NativeAllocationScope;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import static jdk.incubator.foreign.CSupport.C_POINTER;
@@ -44,22 +43,22 @@
         var seg = MemorySegment.allocateNative(LAYOUT);
         handle.set(seg.baseAddress(), value);
         return seg;
     }
 
-    public static MemoryAddress allocate(MemoryAddress value, NativeAllocationScope scope) {
+    public static MemoryAddress allocate(MemoryAddress value, CScope scope) {
         var addr = scope.allocate(LAYOUT);
         handle.set(addr, value);
         return addr;
     }
 
     public static MemorySegment allocateArray(int length) {
         var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
         return MemorySegment.allocateNative(arrLayout);
     }
 
-    public static MemoryAddress allocateArray(int length, NativeAllocationScope scope) {
+    public static MemoryAddress allocateArray(int length, CScope scope) {
         var arrLayout = MemoryLayout.ofSequence(length, LAYOUT);
         return scope.allocate(arrLayout);
     }
 
     public static long sizeof() {
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/Cstring.java.template
@@ -1,10 +1,9 @@
 // Generated by jextract
 
 import java.lang.invoke.VarHandle;
 import java.nio.charset.Charset;
-import jdk.incubator.foreign.NativeAllocationScope;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
 import static jdk.incubator.foreign.CSupport.C_CHAR;
 
@@ -25,11 +24,11 @@
         MemoryAddress addr = segment.baseAddress();
         copy(addr, bytes);
         return segment;
     }
 
-    private static MemoryAddress toCString(byte[] bytes, NativeAllocationScope scope) {
+    private static MemoryAddress toCString(byte[] bytes, CScope scope) {
         MemoryLayout strLayout = MemoryLayout.ofSequence(bytes.length + 1, C_CHAR);
         MemoryAddress addr = scope.allocate(strLayout);
         addr.segment().copyFrom(MemorySegment.ofArray(bytes));
         return addr;
     }
@@ -57,15 +56,15 @@
 
     public static MemorySegment toCString(String str, Charset charset) {
          return toCString(str.getBytes(charset));
     }
 
-    public static MemoryAddress toCString(String str, NativeAllocationScope scope) {
+    public static MemoryAddress toCString(String str, CScope scope) {
         return toCString(str.getBytes(), scope);
     }
 
-    public static MemoryAddress toCString(String str, Charset charset, NativeAllocationScope scope) {
+    public static MemoryAddress toCString(String str, Charset charset, CScope scope) {
         return toCString(str.getBytes(charset), scope);
     }
 
     public static String toJavaString(MemoryAddress addr) {
         StringBuilder buf = new StringBuilder();
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/resources/RuntimeHelper.java.template
@@ -11,16 +11,12 @@
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.List;
-import java.util.Objects;
 import java.util.Optional;
-import java.util.OptionalLong;
 
 import static ${C_LANG}.*;
 
 public class RuntimeHelper {
 
@@ -84,51 +80,10 @@
         } catch (Throwable ex) {
             throw new AssertionError(ex);
         }
     }
 
-    public static final class CScope extends NativeAllocationScope {
-        private final NativeAllocationScope impl;
-        private final List<MemorySegment> segments = new ArrayList<>();
-
-        public CScope() {
-            impl = NativeAllocationScope.unboundedScope();
-        }
-
-        public CScope(long size) {
-            impl = NativeAllocationScope.boundedScope(size);
-        }
-
-        @Override
-        public OptionalLong byteSize() {
-            return impl.byteSize();
-        }
-
-        @Override
-        public long allocatedBytes() {
-            return impl.allocatedBytes();
-        }
-
-        @Override
-        public MemoryAddress allocate(long bytesSize, long bytesAlignment) {
-            return impl.allocate(bytesSize, bytesAlignment);
-        }
-
-        @Override
-        public void close() {
-            for (var seg : segments) {
-                seg.close();
-            }
-            impl.close();
-        }
-
-        public MemorySegment register(MemorySegment seg) {
-            segments.add(Objects.requireNonNull(seg));
-            return seg;
-        }
-    }
-
     private static class VarargsInvoker {
         private static final MethodHandle INVOKE_MH;
         private final MemoryAddress symbol;
         private final MethodType varargs;
         private final FunctionDescriptor function;
diff a/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java b/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
--- a/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
+++ b/test/jdk/tools/jextract/test8241925/LibTest8241925Test.java
@@ -21,11 +21,10 @@
  * questions.
  */
 
 import java.util.stream.DoubleStream;
 import java.util.stream.IntStream;
-import jdk.incubator.foreign.NativeAllocationScope;
 import org.testng.annotations.Test;
 import test.jextract.test8241925.*;
 import static org.testng.Assert.assertEquals;
 import static test.jextract.test8241925.test8241925_h.*;
 
@@ -39,11 +38,11 @@
  * @run testng/othervm -Dforeign.restricted=permit LibTest8241925Test
  */
 public class LibTest8241925Test {
     @Test
     public void test() {
-        try (var scope = NativeAllocationScope.unboundedScope()) {
+        try (var scope = new CScope()) {
             var addr = Cint.allocate(12, scope);
             assertEquals(Cint.get(addr), 12);
             square(addr);
             assertEquals(Cint.get(addr), 144);
 
diff a/test/jdk/tools/jextract/test8244412/LibTest8244412Test.java b/test/jdk/tools/jextract/test8244412/LibTest8244412Test.java
--- a/test/jdk/tools/jextract/test8244412/LibTest8244412Test.java
+++ b/test/jdk/tools/jextract/test8244412/LibTest8244412Test.java
@@ -21,14 +21,14 @@
  * questions.
  */
 
 
 import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.NativeAllocationScope;
 
 import org.testng.annotations.Test;
 import test.jextract.test8244412.Clong_long;
+import test.jextract.test8244412.CScope;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
 import static test.jextract.test8244412.test8244412_h.*;
 
 /*
@@ -41,11 +41,11 @@
  * @run testng/othervm -Dforeign.restricted=permit LibTest8244412Test
  */
 public class LibTest8244412Test {
     @Test
     public void test() {
-        try (var scope = NativeAllocationScope.unboundedScope()) {
+        try (var scope = new CScope()) {
             var addr = Cmysize_t.allocate(0L, scope);
             assertEquals(Cmysize_t.get(addr), 0L);
             Cmysize_t.set(addr, 13455566L);
             assertEquals(Cmysize_t.get(addr), 13455566L);
             assertTrue(Cmysize_t.sizeof() == Clong_long.sizeof());
diff a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
--- a/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
+++ b/test/jdk/tools/jextract/test8246341/LibTest8246341Test.java
@@ -20,11 +20,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.NativeAllocationScope;
 import org.testng.annotations.Test;
 import test.jextract.test8246341.*;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
 import static test.jextract.test8246341.test8246341_h.*;
@@ -56,11 +55,11 @@
         assertTrue(callbackCalled[0]);
     }
 
     @Test
     public void testPointerAllocate() {
-        try (var scope = NativeAllocationScope.boundedScope(Cpointer.sizeof())) {
+        try (var scope = new CScope(Cpointer.sizeof())) {
             var addr = Cpointer.allocate(MemoryAddress.NULL, scope);
             fillin(addr);
             assertEquals(Cstring.toJavaString(Cpointer.get(addr)), "hello world");
         }
 
diff a/test/jdk/tools/jextract/test8246400/LibTest8246400Test.java b/test/jdk/tools/jextract/test8246400/LibTest8246400Test.java
--- a/test/jdk/tools/jextract/test8246400/LibTest8246400Test.java
+++ b/test/jdk/tools/jextract/test8246400/LibTest8246400Test.java
@@ -19,10 +19,11 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
+import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import org.testng.annotations.Test;
 import test.jextract.test8246400.*;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
@@ -39,11 +40,12 @@
  * @run testng/othervm -Dforeign.restricted=permit LibTest8246400Test
  */
 public class LibTest8246400Test {
     @Test
     public void testSegmentRegister() {
-        MemorySegment sum = null, callback = null;
+        MemorySegment sum = null;
+        MemoryAddress callback = null;
         try (var scope = new CScope()) {
             var v1 = CVector.allocate(scope);
             CVector.x$set(v1, 1.0);
             CVector.y$set(v1, 0.0);
 
@@ -58,18 +60,17 @@
             assertEquals(CVector.y$get(sum.baseAddress()), 1.0, 0.1);
 
             callback = cosine_similarity$dot.allocate((a, b) -> {
                 return (CVector.x$get(a.baseAddress()) * CVector.x$get(b.baseAddress())) +
                     (CVector.y$get(a.baseAddress()) * CVector.y$get(b.baseAddress()));
-            });
-            scope.register(callback);
+            }, scope);
 
-            var value = cosine_similarity(v1.segment(), v2.segment(), callback.baseAddress());
+            var value = cosine_similarity(v1.segment(), v2.segment(), callback);
             assertEquals(value, 0.0, 0.1);
 
-            value = cosine_similarity(v1.segment(), v1.segment(), callback.baseAddress());
+            value = cosine_similarity(v1.segment(), v1.segment(), callback);
             assertEquals(value, 1.0, 0.1);
         }
         assertTrue(!sum.isAlive());
-        assertTrue(!callback.isAlive());
+        assertTrue(!callback.segment().isAlive());
     }
 }
