diff a/test/jdk/java/util/stream/test/org/openjdk/tests/java/util/stream/SegmentTestDataProvider.java b/test/jdk/java/util/stream/test/org/openjdk/tests/java/util/stream/SegmentTestDataProvider.java
--- a/test/jdk/java/util/stream/test/org/openjdk/tests/java/util/stream/SegmentTestDataProvider.java
+++ b/test/jdk/java/util/stream/test/org/openjdk/tests/java/util/stream/SegmentTestDataProvider.java
@@ -21,10 +21,11 @@
  * questions.
  */
 
 package org.openjdk.tests.java.util.stream;
 
+import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemorySegment;
 
 import java.lang.invoke.VarHandle;
@@ -37,75 +38,67 @@
 
 import org.testng.annotations.DataProvider;
 
 public class SegmentTestDataProvider {
 
-    static VarHandle BYTE_HANDLE = MemoryLayouts.JAVA_BYTE.varHandle(byte.class);
-    static VarHandle CHAR_HANDLE = MemoryLayouts.JAVA_CHAR.varHandle(char.class);
-    static VarHandle SHORT_HANDLE = MemoryLayouts.JAVA_SHORT.varHandle(short.class);
-    static VarHandle INT_HANDLE = MemoryLayouts.JAVA_INT.varHandle(int.class);
-    static VarHandle LONG_HANDLE = MemoryLayouts.JAVA_LONG.varHandle(long.class);
-    static VarHandle FLOAT_HANDLE = MemoryLayouts.JAVA_FLOAT.varHandle(float.class);
-    static VarHandle DOUBLE_HANDLE = MemoryLayouts.JAVA_DOUBLE.varHandle(double.class);
-
     static boolean compareSegmentsByte(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
-        Function<MemorySegment, Byte> mapper = segment -> (byte)BYTE_HANDLE.get(segment.address());
+        Function<MemorySegment, Byte> mapper = MemoryAccess::getByte;
         List<Byte> list1 = segments1.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         List<Byte> list2 = segments2.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         return list1.equals(list2);
     }
 
     static boolean compareSegmentsChar(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
-        Function<MemorySegment, Character> mapper = segment -> (char)CHAR_HANDLE.get(segment.address());
+        Function<MemorySegment, Character> mapper = MemoryAccess::getChar;
         List<Character> list1 = segments1.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         List<Character> list2 = segments2.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         return list1.equals(list2);
     }
 
     static boolean compareSegmentsShort(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
-        Function<MemorySegment, Short> mapper = segment -> (short)SHORT_HANDLE.get(segment.address());
+        Function<MemorySegment, Short> mapper = MemoryAccess::getShort;
         List<Short> list1 = segments1.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         List<Short> list2 = segments2.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         return list1.equals(list2);
     }
 
     static boolean compareSegmentsInt(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
-        Function<MemorySegment, Integer> mapper = segment -> (int)INT_HANDLE.get(segment.address());
+        Function<MemorySegment, Integer> mapper = MemoryAccess::getInt;
         List<Integer> list1 = segments1.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         List<Integer> list2 = segments2.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         return list1.equals(list2);
     }
 
     static boolean compareSegmentsLong(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
-        Function<MemorySegment, Long> mapper = segment -> (long)LONG_HANDLE.get(segment.address());
+        Function<MemorySegment, Long> mapper = MemoryAccess::getLong;
         List<Long> list1 = segments1.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         List<Long> list2 = segments2.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         return list1.equals(list2);
     }
 
     static boolean compareSegmentsFloat(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
-        Function<MemorySegment, Float> mapper = segment -> (float)FLOAT_HANDLE.get(segment.address());
+        Function<MemorySegment, Float> mapper = MemoryAccess::getFloat;
         List<Float> list1 = segments1.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         List<Float> list2 = segments2.stream()
                 .map(mapper)
@@ -120,11 +113,11 @@
             input.accept(dest);
         };
     }
 
     static boolean compareSegmentsDouble(Collection<MemorySegment> segments1, Collection<MemorySegment> segments2, boolean isOrdered) {
-        Function<MemorySegment, Double> mapper = segment -> (double)DOUBLE_HANDLE.get(segment.address());
+        Function<MemorySegment, Double> mapper = MemoryAccess::getDouble;
         List<Double> list1 = segments1.stream()
                 .map(mapper)
                 .collect(Collectors.toList());
         List<Double> list2 = segments2.stream()
                 .map(mapper)
@@ -132,11 +125,11 @@
         return list1.equals(list2);
     }
 
     static void initSegment(MemorySegment segment) {
         for (int i = 0 ; i < segment.byteSize() ; i++) {
-            BYTE_HANDLE.set(segment.address(), (byte)i);
+            MemoryAccess.setByte(segment, (byte)i);
         }
     }
 
     static Object[][] spliteratorTestData = {
             { "bytes", MemoryLayout.ofSequence(1024, MemoryLayouts.JAVA_BYTE), (SpliteratorTestHelper.ContentAsserter<MemorySegment>)SegmentTestDataProvider::compareSegmentsByte },
