diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/BindingInterpreter.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/BindingInterpreter.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/BindingInterpreter.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/BindingInterpreter.java
@@ -65,11 +65,11 @@
                 case COPY_BUFFER -> {
                     Binding.Copy binding = (Binding.Copy) b;
                     MemorySegment operand = (MemorySegment) stack.pop();
                     assert operand.byteSize() == binding.size() : "operand size mismatch";
                     MemorySegment copy = MemorySegment.allocateNative(binding.size(), binding.alignment());
-                    MemoryAddress.copy(operand.baseAddress(), copy.baseAddress(), binding.size());
+                    copy.copyFrom(operand.asSlice(0, binding.size()));
                     buffers.add(copy);
                     stack.push(copy);
                 }
                 case ALLOC_BUFFER ->
                     throw new UnsupportedOperationException();
@@ -104,11 +104,11 @@
                 case COPY_BUFFER -> {
                     Binding.Copy binding = (Binding.Copy) b;
                     MemoryAddress operand = (MemoryAddress) stack.pop();
                     operand = MemoryAddressImpl.ofLongUnchecked(operand.toRawLongValue(), binding.size());
                     MemorySegment copy = MemorySegment.allocateNative(binding.size(), binding.alignment());
-                    MemoryAddress.copy(operand, copy.baseAddress(), binding.size());
+                    copy.copyFrom(operand.segment().asSlice(0, binding.size()));
                     stack.push(copy); // leaked
                 }
                 case ALLOC_BUFFER -> {
                     Binding.Allocate binding = (Binding.Allocate) b;
                     stack.push(MemorySegment.allocateNative(binding.size(), binding.alignment()));
