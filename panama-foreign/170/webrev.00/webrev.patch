diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/BindingInterpreter.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/BindingInterpreter.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/BindingInterpreter.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/BindingInterpreter.java
@@ -65,11 +65,11 @@
                 case COPY_BUFFER -> {
                     Binding.Copy binding = (Binding.Copy) b;
                     MemorySegment operand = (MemorySegment) stack.pop();
                     assert operand.byteSize() == binding.size() : "operand size mismatch";
                     MemorySegment copy = MemorySegment.allocateNative(binding.size(), binding.alignment());
-                    MemoryAddress.copy(operand.baseAddress(), copy.baseAddress(), binding.size());
+                    copy.copyFrom(operand.asSlice(0, binding.size()));
                     buffers.add(copy);
                     stack.push(copy);
                 }
                 case ALLOC_BUFFER ->
                     throw new UnsupportedOperationException();
@@ -104,11 +104,11 @@
                 case COPY_BUFFER -> {
                     Binding.Copy binding = (Binding.Copy) b;
                     MemoryAddress operand = (MemoryAddress) stack.pop();
                     operand = MemoryAddressImpl.ofLongUnchecked(operand.toRawLongValue(), binding.size());
                     MemorySegment copy = MemorySegment.allocateNative(binding.size(), binding.alignment());
-                    MemoryAddress.copy(operand, copy.baseAddress(), binding.size());
+                    copy.copyFrom(operand.segment().asSlice(0, binding.size()));
                     stack.push(copy); // leaked
                 }
                 case ALLOC_BUFFER -> {
                     Binding.Allocate binding = (Binding.Allocate) b;
                     stack.push(MemorySegment.allocateNative(binding.size(), binding.alignment()));
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
@@ -178,13 +178,12 @@
 
         return target;
     }
 
     private static MemoryAddress bufferCopy(MemoryAddress dest, MemorySegment buffer) {
-        MemoryAddress.copy(buffer.baseAddress(),
-                MemoryAddressImpl.ofLongUnchecked(dest.toRawLongValue(), buffer.byteSize()),
-                buffer.byteSize());
+        MemoryAddressImpl.ofLongUnchecked(dest.toRawLongValue(), buffer.byteSize())
+                .segment().copyFrom(buffer);
         return dest;
     }
 
     private static void checkCompatibleType(Class<?> carrier, MemoryLayout layout, long addressSize) {
         if (carrier.isPrimitive()) {
diff a/test/jdk/java/foreign/Cstring.java b/test/jdk/java/foreign/Cstring.java
--- a/test/jdk/java/foreign/Cstring.java
+++ b/test/jdk/java/foreign/Cstring.java
@@ -40,11 +40,11 @@
     }
     private final static VarHandle byteArrHandle = arrayHandle(C_CHAR, byte.class);
 
     private static void copy(MemoryAddress addr, byte[] bytes) {
         var heapSegment = MemorySegment.ofArray(bytes);
-        MemoryAddress.copy(heapSegment.baseAddress(), addr, bytes.length);
+        addr.segment().copyFrom(heapSegment);
         byteArrHandle.set(addr, (long)bytes.length, (byte)0);
     }
 
     private static MemorySegment toCString(byte[] bytes) {
         MemoryLayout strLayout = MemoryLayout.ofSequence(bytes.length + 1, C_CHAR);
