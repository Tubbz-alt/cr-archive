diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
@@ -23,26 +23,24 @@
  *  questions.
  *
  */
 package jdk.internal.foreign.abi.x64.windows;
 
-import jdk.incubator.foreign.CSupport;
 import jdk.incubator.foreign.CSupport.VaList;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.NativeScope;
 import jdk.internal.foreign.abi.SharedUtils;
 import jdk.internal.foreign.abi.SharedUtils.SimpleVaArg;
 
 import java.lang.invoke.VarHandle;
 import java.util.ArrayList;
 import java.util.List;
 
 import static jdk.incubator.foreign.CSupport.Win64.C_POINTER;
-import static jdk.incubator.foreign.MemorySegment.CLOSE;
-import static jdk.incubator.foreign.MemorySegment.READ;
 
 // see vadefs.h (VC header)
 //
 // in short
 // -> va_list is just a pointer to a buffer with 64 bit entries.
@@ -106,27 +104,36 @@
     @Override
     public MemorySegment vargAsSegment(MemoryLayout layout) {
         return (MemorySegment) read(MemorySegment.class, layout);
     }
 
+    @Override
+    public MemorySegment vargAsSegment(MemoryLayout layout, NativeScope scope) {
+        return (MemorySegment) read(MemorySegment.class, layout, SharedUtils.Allocator.ofScope(scope));
+    }
+
     private Object read(Class<?> carrier, MemoryLayout layout) {
+        return read(carrier, layout, MemorySegment::allocateNative);
+    }
+
+    private Object read(Class<?> carrier, MemoryLayout layout, SharedUtils.Allocator allocator) {
         SharedUtils.checkCompatibleType(carrier, layout, Windowsx64Linker.ADDRESS_SIZE);
         Object res;
         if (carrier == MemorySegment.class) {
             TypeClass typeClass = TypeClass.typeClassFor(layout);
             res = switch (typeClass) {
                 case STRUCT_REFERENCE -> {
                     MemoryAddress structAddr = (MemoryAddress) VH_address.get(ptr);
                     try (MemorySegment struct = MemorySegment.ofNativeRestricted(structAddr, layout.byteSize(),
                                                                             segment.ownerThread(), null, null)) {
-                        MemorySegment seg = MemorySegment.allocateNative(layout.byteSize());
+                        MemorySegment seg = allocator.allocate(layout);
                         seg.copyFrom(struct);
                         yield seg;
                     }
                 }
                 case STRUCT_REGISTER -> {
-                    MemorySegment struct = MemorySegment.allocateNative(layout);
+                    MemorySegment struct = allocator.allocate(layout);
                     struct.copyFrom(segment.asSlice(ptr.segmentOffset(), layout.byteSize()));
                     yield struct;
                 }
                 default -> throw new IllegalStateException("Unexpected TypeClass: " + typeClass);
             };
@@ -145,12 +152,12 @@
 
     static WinVaList ofAddress(MemoryAddress addr) {
         return new WinVaList(MemorySegment.ofNativeRestricted(addr, Long.MAX_VALUE, Thread.currentThread(), null, null));
     }
 
-    static Builder builder() {
-        return new Builder();
+    static Builder builder(SharedUtils.Allocator allocator) {
+        return new Builder(allocator);
     }
 
     @Override
     public void close() {
         segment.close();
@@ -160,10 +167,15 @@
     @Override
     public VaList copy() {
         return WinVaList.ofAddress(ptr);
     }
 
+    @Override
+    public VaList copy(NativeScope scope) {
+        return copy();
+    }
+
     @Override
     public MemoryAddress address() {
         return ptr;
     }
 
@@ -172,12 +184,17 @@
         return segment.isAlive();
     }
 
     static class Builder implements VaList.Builder {
 
+        private final SharedUtils.Allocator allocator;
         private final List<SimpleVaArg> args = new ArrayList<>();
 
+        public Builder(SharedUtils.Allocator allocator) {
+            this.allocator = allocator;
+        }
+
         private Builder arg(Class<?> carrier, MemoryLayout layout, Object value) {
             SharedUtils.checkCompatibleType(carrier, layout, Windowsx64Linker.ADDRESS_SIZE);
             args.add(new SimpleVaArg(carrier, layout, value));
             return this;
         }
@@ -209,21 +226,21 @@
 
         public VaList build() {
             if (args.isEmpty()) {
                 return EMPTY;
             }
-            MemorySegment ms = MemorySegment.allocateNative(VA_SLOT_SIZE_BYTES * args.size());
+            MemorySegment ms = allocator.allocate(VA_SLOT_SIZE_BYTES * args.size());
             List<MemorySegment> copies = new ArrayList<>();
 
             MemoryAddress addr = ms.baseAddress();
             for (SimpleVaArg arg : args) {
                 if (arg.carrier == MemorySegment.class) {
                     MemorySegment msArg = ((MemorySegment) arg.value);
                     TypeClass typeClass = TypeClass.typeClassFor(arg.layout);
                     switch (typeClass) {
                         case STRUCT_REFERENCE -> {
-                            MemorySegment copy = MemorySegment.allocateNative(arg.layout);
+                            MemorySegment copy = allocator.allocate(arg.layout);
                             copy.copyFrom(msArg); // by-value
                             copies.add(copy);
                             VH_address.set(addr, copy.baseAddress());
                         }
                         case STRUCT_REGISTER -> {
@@ -237,9 +254,9 @@
                     writer.set(addr, arg.value);
                 }
                 addr = addr.addOffset(VA_SLOT_SIZE_BYTES);
             }
 
-            return new WinVaList(ms.withAccessModes(CLOSE | READ), copies);
+            return new WinVaList(ms, copies);
         }
     }
 }
