diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/SharedUtils.java
@@ -31,10 +31,11 @@
 import jdk.incubator.foreign.MemoryAccess;
 import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryHandles;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemorySegment;
+import jdk.incubator.foreign.NativeScope;
 import jdk.incubator.foreign.SequenceLayout;
 import jdk.incubator.foreign.ValueLayout;
 import jdk.internal.foreign.MemoryAddressImpl;
 import jdk.internal.foreign.NativeMemorySegmentImpl;
 import jdk.internal.foreign.Utils;
@@ -277,16 +278,16 @@
         }
         throw new IllegalArgumentException("String too large");
     }
 
 
-    public static VaList newVaList(Consumer<VaList.Builder> actions) {
+    public static VaList newVaList(Consumer<VaList.Builder> actions, Allocator allocator) {
         String name = CSupport.getSystemLinker().name();
         return switch(name) {
-            case Win64.NAME -> Windowsx64Linker.newVaList(actions);
-            case SysV.NAME -> SysVx64Linker.newVaList(actions);
-            case AArch64.NAME -> AArch64Linker.newVaList(actions);
+            case Win64.NAME -> Windowsx64Linker.newVaList(actions, allocator);
+            case SysV.NAME -> SysVx64Linker.newVaList(actions, allocator);
+            case AArch64.NAME -> AArch64Linker.newVaList(actions, allocator);
             default -> throw new IllegalStateException("Unknown linker name: " + name);
         };
     }
 
     public static VarHandle vhPrimitiveOrAddress(Class<?> carrier, MemoryLayout layout) {
@@ -354,10 +355,26 @@
         return cDesc.attribute(FunctionDescriptor.TRIVIAL_ATTRIBUTE_NAME)
                 .map(Boolean.class::cast)
                 .orElse(false);
     }
 
+    public interface Allocator {
+        default MemorySegment allocate(MemoryLayout layout) {
+            return allocate(layout.byteSize(), layout.byteAlignment());
+        }
+
+        default MemorySegment allocate(long size) {
+            return allocate(size, 1);
+        }
+
+        MemorySegment allocate(long size, long align);
+
+        static Allocator ofScope(NativeScope scope) {
+            return (size, align) -> scope.allocate(size, align).segment();
+        }
+    }
+
     public static class SimpleVaArg {
         public final Class<?> carrier;
         public final MemoryLayout layout;
         public final Object value;
 
@@ -409,10 +426,15 @@
         @Override
         public MemorySegment vargAsSegment(MemoryLayout layout) {
             throw uoe();
         }
 
+        @Override
+        public MemorySegment vargAsSegment(MemoryLayout layout, NativeScope scope) {
+            throw uoe();
+        }
+
         @Override
         public void skip(MemoryLayout... layouts) {
             throw uoe();
         }
 
@@ -429,10 +451,15 @@
         @Override
         public VaList copy() {
             return this;
         }
 
+        @Override
+        public VaList copy(NativeScope scope) {
+            throw uoe();
+        }
+
         @Override
         public MemoryAddress address() {
             return address;
         }
     }
