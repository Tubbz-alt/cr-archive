diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/CSupport.java
@@ -160,13 +160,12 @@
 
         /**
          * Releases the underlying C {@code va_list} modelled by this instance, and any native memory that is attached
          * to this va list that holds its elements (see {@link VaList#make(Consumer)}).
          * <p>
-         * For some {@code VaList} instances, calling this method will have no effect. For instance: on Windows, a copy
-         * of a va list does not need any native memory, so nothing has to be released. After calling {@code close()} on
-         * such an instance {@link #isAlive()} will still return {@code true}.
+         * After calling this method, {@link #isAlive()} will return {@code false} and further attempts to read values
+         * from this va list will result in an exception.
          *
          * @see #isAlive()
          */
         void close();
 
diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/windows/WinVaList.java
@@ -63,14 +63,16 @@
 
     private static final VaList EMPTY = new SharedUtils.EmptyVaList(MemoryAddress.NULL);
 
     private MemoryAddress ptr;
     private final List<MemorySegment> attachedSegments;
+    private final MemorySegment livenessCheck;
 
-    private WinVaList(MemoryAddress ptr, List<MemorySegment> attachedSegments) {
+    private WinVaList(MemoryAddress ptr, List<MemorySegment> attachedSegments, MemorySegment livenessCheck) {
         this.ptr = ptr;
         this.attachedSegments = attachedSegments;
+        this.livenessCheck = livenessCheck;
     }
 
     public static final VaList empty() {
         return EMPTY;
     }
@@ -144,39 +146,48 @@
         ptr = ptr.addOffset(layouts.length * VA_SLOT_SIZE_BYTES);
     }
 
     static WinVaList ofAddress(MemoryAddress addr) {
         MemorySegment segment = MemorySegment.ofNativeRestricted(addr, Long.MAX_VALUE, Thread.currentThread(), null, null);
-        return new WinVaList(segment.baseAddress(), List.of(segment));
+        return new WinVaList(segment.baseAddress(), List.of(segment), null);
     }
 
     static Builder builder(SharedUtils.Allocator allocator) {
         return new Builder(allocator);
     }
 
     @Override
     public void close() {
+        if (livenessCheck != null)
+            livenessCheck.close();
         attachedSegments.forEach(MemorySegment::close);
     }
 
     @Override
     public VaList copy() {
-        return new WinVaList(ptr, List.of());
+        MemorySegment liveness = MemorySegment.ofNativeRestricted(
+                MemoryAddress.NULL, 1, ptr.segment().ownerThread(), null, null);
+        return new WinVaList(ptr, List.of(), liveness);
     }
 
     @Override
     public VaList copy(NativeScope scope) {
-        return copy(); // no need to allocate when copying on Windows
+        MemorySegment liveness = MemorySegment.ofNativeRestricted(
+                MemoryAddress.NULL, 1, ptr.segment().ownerThread(), null, null);
+        liveness = scope.register(liveness);
+        return new WinVaList(ptr, List.of(), liveness);
     }
 
     @Override
     public MemoryAddress address() {
         return ptr;
     }
 
     @Override
     public boolean isAlive() {
+        if (livenessCheck != null)
+            return livenessCheck.isAlive();
         return ptr.segment().isAlive();
     }
 
     static class Builder implements VaList.Builder {
 
@@ -248,9 +259,9 @@
                     writer.set(addr, arg.value);
                 }
                 addr = addr.addOffset(VA_SLOT_SIZE_BYTES);
             }
 
-            return new WinVaList(ms.baseAddress(), attachedSegments);
+            return new WinVaList(ms.baseAddress(), attachedSegments, null);
         }
     }
 }
diff a/test/jdk/java/foreign/valist/VaListTest.java b/test/jdk/java/foreign/valist/VaListTest.java
--- a/test/jdk/java/foreign/valist/VaListTest.java
+++ b/test/jdk/java/foreign/valist/VaListTest.java
@@ -316,16 +316,19 @@
 
     @Test
     public void testScopedCopy() {
         try (VaList list = VaList.make(b -> b.vargFromInt(C_INT, 4)
                                              .vargFromInt(C_INT, 8))) {
+            VaList copy;
             try (NativeScope scope = NativeScope.unboundedScope()) {
-                VaList copy = list.copy(scope);
+                copy = list.copy(scope);
 
                 assertEquals(copy.vargAsInt(C_INT), 4);
                 assertEquals(copy.vargAsInt(C_INT), 8);
             }
+            assertFalse(copy.isAlive());
+
             assertEquals(list.vargAsInt(C_INT), 4);
             assertEquals(list.vargAsInt(C_INT), 8);
         }
     }
 
