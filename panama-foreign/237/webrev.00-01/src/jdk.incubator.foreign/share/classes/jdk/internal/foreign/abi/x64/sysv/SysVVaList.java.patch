diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/abi/x64/sysv/SysVVaList.java
@@ -120,16 +120,16 @@
     private static final Cleaner cleaner = Cleaner.create();
     private static final CSupport.VaList EMPTY = new SharedUtils.EmptyVaList(emptyListAddress());
 
     private final MemorySegment segment;
     private final MemorySegment regSaveArea;
-    private final List<MemorySegment> slices;
+    private final List<MemorySegment> attachedSegments;
 
-    private SysVVaList(MemorySegment segment, MemorySegment regSaveArea, List<MemorySegment> slices) {
+    private SysVVaList(MemorySegment segment, MemorySegment regSaveArea, List<MemorySegment> attachedSegments) {
         this.segment = segment;
         this.regSaveArea = regSaveArea;
-        this.slices = slices;
+        this.attachedSegments = attachedSegments;
     }
 
     private static SysVVaList readFromSegment(MemorySegment segment) {
         MemorySegment regSaveArea = getRegSaveArea(segment);
         return new SysVVaList(segment, regSaveArea, List.of(regSaveArea));
@@ -322,11 +322,11 @@
     }
 
     @Override
     public void close() {
         segment.close();
-        slices.forEach(MemorySegment::close);
+        attachedSegments.forEach(MemorySegment::close);
     }
 
     @Override
     public VaList copy() {
         return copy(MemorySegment::allocateNative);
@@ -338,11 +338,11 @@
     }
 
     private VaList copy(SharedUtils.Allocator allocator) {
         MemorySegment copy = allocator.allocate(LAYOUT);
         copy.copyFrom(segment);
-        return SysVVaList.readFromSegment(copy);
+        return new SysVVaList(copy, regSaveArea, List.of());
     }
 
     @Override
     public MemoryAddress address() {
         return segment.baseAddress();
@@ -450,11 +450,11 @@
             if (isEmpty()) {
                 return EMPTY;
             }
 
             MemorySegment vaListSegment = allocator.allocate(LAYOUT);
-            List<MemorySegment> slices = new ArrayList<>();
+            List<MemorySegment> attachedSegments = new ArrayList<>();
             MemoryAddress stackArgsPtr = MemoryAddress.NULL;
             if (!stackArgs.isEmpty()) {
                 long stackArgsSize = stackArgs.stream().reduce(0L, (acc, e) -> acc + e.layout.byteSize(), Long::sum);
                 MemorySegment stackArgsSegment = allocator.allocate(stackArgsSize, 16);
                 MemoryAddress maOverflowArgArea = stackArgsSegment.baseAddress();
@@ -471,18 +471,18 @@
                         writer.set(maOverflowArgArea, arg.value);
                     }
                     maOverflowArgArea = maOverflowArgArea.addOffset(arg.layout.byteSize());
                 }
                 stackArgsPtr = stackArgsSegment.baseAddress();
-                slices.add(stackArgsSegment);
+                attachedSegments.add(stackArgsSegment);
             }
 
             MemoryAddress vaListAddr = vaListSegment.baseAddress();
             VH_fp_offset.set(vaListAddr, (int) FP_OFFSET);
             VH_overflow_arg_area.set(vaListAddr, stackArgsPtr);
             VH_reg_save_area.set(vaListAddr, reg_save_area.baseAddress());
-            slices.add(reg_save_area);
+            attachedSegments.add(reg_save_area);
             assert reg_save_area.ownerThread() == vaListSegment.ownerThread();
-            return new SysVVaList(vaListSegment, reg_save_area, slices);
+            return new SysVVaList(vaListSegment, reg_save_area, attachedSegments);
         }
     }
 }
