diff a/test/jdk/java/foreign/TestMemoryAccess.java b/test/jdk/java/foreign/TestMemoryAccess.java
--- a/test/jdk/java/foreign/TestMemoryAccess.java
+++ b/test/jdk/java/foreign/TestMemoryAccess.java
@@ -34,11 +34,11 @@
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.foreign.MemoryLayout.PathElement;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
 import jdk.incubator.foreign.ValueLayout;
-import jdk.incubator.foreign.MemoryAddress;
+
 import java.lang.invoke.VarHandle;
 import java.util.function.Function;
 
 import org.testng.annotations.*;
 import static org.testng.Assert.*;
@@ -80,49 +80,47 @@
         SequenceLayout seq = MemoryLayout.ofSequence(10, MemoryLayout.ofSequence(2, elemLayout));
         testArrayAccessInternal(viewFactory, seq, seq.varHandle(carrier, PathElement.sequenceElement(), MemoryLayout.PathElement.sequenceElement(1)), checker);
     }
 
     private void testAccessInternal(Function<MemorySegment, MemorySegment> viewFactory, MemoryLayout layout, VarHandle handle, Checker checker) {
-        MemoryAddress outer_address;
+        MemorySegment outer_segment;
         try (MemorySegment segment = viewFactory.apply(MemorySegment.allocateNative(layout))) {
             boolean isRO = !segment.hasAccessModes(MemorySegment.WRITE);
-            MemoryAddress addr = segment.address();
             try {
-                checker.check(handle, addr);
+                checker.check(handle, segment);
                 if (isRO) {
                     throw new AssertionError(); //not ok, memory should be immutable
                 }
             } catch (UnsupportedOperationException ex) {
                 if (!isRO) {
                     throw new AssertionError(); //we should not have failed!
                 }
                 return;
             }
             try {
-                checker.check(handle, addr.addOffset(layout.byteSize()));
+                checker.check(handle, segment.asSlice(layout.byteSize()));
                 throw new AssertionError(); //not ok, out of bounds
             } catch (IndexOutOfBoundsException ex) {
                 //ok, should fail (out of bounds)
             }
-            outer_address = addr; //leak!
+            outer_segment = segment; //leak!
         }
         try {
-            checker.check(handle, outer_address);
+            checker.check(handle, outer_segment);
             throw new AssertionError(); //not ok, scope is closed
         } catch (IllegalStateException ex) {
             //ok, should fail (scope is closed)
         }
     }
 
     private void testArrayAccessInternal(Function<MemorySegment, MemorySegment> viewFactory, SequenceLayout seq, VarHandle handle, ArrayChecker checker) {
-        MemoryAddress outer_address;
+        MemorySegment outer_segment;
         try (MemorySegment segment = viewFactory.apply(MemorySegment.allocateNative(seq))) {
             boolean isRO = !segment.hasAccessModes(MemorySegment.WRITE);
-            MemoryAddress addr = segment.address();
             try {
                 for (int i = 0; i < seq.elementCount().getAsLong(); i++) {
-                    checker.check(handle, addr, i);
+                    checker.check(handle, segment, i);
                 }
                 if (isRO) {
                     throw new AssertionError(); //not ok, memory should be immutable
                 }
             } catch (UnsupportedOperationException ex) {
@@ -130,19 +128,19 @@
                     throw new AssertionError(); //we should not have failed!
                 }
                 return;
             }
             try {
-                checker.check(handle, addr, seq.elementCount().getAsLong());
+                checker.check(handle, segment, seq.elementCount().getAsLong());
                 throw new AssertionError(); //not ok, out of bounds
             } catch (IndexOutOfBoundsException ex) {
                 //ok, should fail (out of bounds)
             }
-            outer_address = addr; //leak!
+            outer_segment = segment; //leak!
         }
         try {
-            checker.check(handle, outer_address, 0);
+            checker.check(handle, outer_segment, 0);
             throw new AssertionError(); //not ok, scope is closed
         } catch (IllegalStateException ex) {
             //ok, should fail (scope is closed)
         }
     }
@@ -181,18 +179,17 @@
         ValueLayout l = MemoryLayouts.BITS_32_LE.withName("elem");
         l.varHandle(carrier);
     }
 
     private void testMatrixAccessInternal(Function<MemorySegment, MemorySegment> viewFactory, SequenceLayout seq, VarHandle handle, MatrixChecker checker) {
-        MemoryAddress outer_address;
+        MemorySegment outer_segment;
         try (MemorySegment segment = viewFactory.apply(MemorySegment.allocateNative(seq))) {
             boolean isRO = !segment.hasAccessModes(MemorySegment.WRITE);
-            MemoryAddress addr = segment.address();
             try {
                 for (int i = 0; i < seq.elementCount().getAsLong(); i++) {
                     for (int j = 0; j < ((SequenceLayout) seq.elementLayout()).elementCount().getAsLong(); j++) {
-                        checker.check(handle, addr, i, j);
+                        checker.check(handle, segment, i, j);
                     }
                 }
                 if (isRO) {
                     throw new AssertionError(); //not ok, memory should be immutable
                 }
@@ -201,20 +198,20 @@
                     throw new AssertionError(); //we should not have failed!
                 }
                 return;
             }
             try {
-                checker.check(handle, addr, seq.elementCount().getAsLong(),
+                checker.check(handle, segment, seq.elementCount().getAsLong(),
                         ((SequenceLayout)seq.elementLayout()).elementCount().getAsLong());
                 throw new AssertionError(); //not ok, out of bounds
             } catch (IndexOutOfBoundsException ex) {
                 //ok, should fail (out of bounds)
             }
-            outer_address = addr; //leak!
+            outer_segment = segment; //leak!
         }
         try {
-            checker.check(handle, outer_address, 0, 0);
+            checker.check(handle, outer_segment, 0, 0);
             throw new AssertionError(); //not ok, scope is closed
         } catch (IllegalStateException ex) {
             //ok, should fail (scope is closed)
         }
     }
@@ -259,45 +256,45 @@
                 { IMMUTABLE, MemoryLayouts.BITS_64_LE, double.class, Checker.DOUBLE },
         };
     }
 
     interface Checker {
-        void check(VarHandle handle, MemoryAddress addr);
+        void check(VarHandle handle, MemorySegment segment);
 
-        Checker BYTE = (handle, addr) -> {
-            handle.set(addr, (byte)42);
-            assertEquals(42, (byte)handle.get(addr));
+        Checker BYTE = (handle, segment) -> {
+            handle.set(segment, (byte)42);
+            assertEquals(42, (byte)handle.get(segment));
         };
 
-        Checker SHORT = (handle, addr) -> {
-            handle.set(addr, (short)42);
-            assertEquals(42, (short)handle.get(addr));
+        Checker SHORT = (handle, segment) -> {
+            handle.set(segment, (short)42);
+            assertEquals(42, (short)handle.get(segment));
         };
 
-        Checker CHAR = (handle, addr) -> {
-            handle.set(addr, (char)42);
-            assertEquals(42, (char)handle.get(addr));
+        Checker CHAR = (handle, segment) -> {
+            handle.set(segment, (char)42);
+            assertEquals(42, (char)handle.get(segment));
         };
 
-        Checker INT = (handle, addr) -> {
-            handle.set(addr, 42);
-            assertEquals(42, (int)handle.get(addr));
+        Checker INT = (handle, segment) -> {
+            handle.set(segment, 42);
+            assertEquals(42, (int)handle.get(segment));
         };
 
-        Checker LONG = (handle, addr) -> {
-            handle.set(addr, (long)42);
-            assertEquals(42, (long)handle.get(addr));
+        Checker LONG = (handle, segment) -> {
+            handle.set(segment, (long)42);
+            assertEquals(42, (long)handle.get(segment));
         };
 
-        Checker FLOAT = (handle, addr) -> {
-            handle.set(addr, (float)42);
-            assertEquals((float)42, (float)handle.get(addr));
+        Checker FLOAT = (handle, segment) -> {
+            handle.set(segment, (float)42);
+            assertEquals((float)42, (float)handle.get(segment));
         };
 
-        Checker DOUBLE = (handle, addr) -> {
-            handle.set(addr, (double)42);
-            assertEquals((double)42, (double)handle.get(addr));
+        Checker DOUBLE = (handle, segment) -> {
+            handle.set(segment, (double)42);
+            assertEquals((double)42, (double)handle.get(segment));
         };
     }
 
     @DataProvider(name = "arrayElements")
     public Object[][] createArrayData() {
@@ -336,45 +333,45 @@
                 { IMMUTABLE, MemoryLayouts.BITS_64_LE, double.class, ArrayChecker.DOUBLE },
         };
     }
 
     interface ArrayChecker {
-        void check(VarHandle handle, MemoryAddress addr, long index);
+        void check(VarHandle handle, MemorySegment segment, long index);
 
-        ArrayChecker BYTE = (handle, addr, i) -> {
-            handle.set(addr, i, (byte)i);
-            assertEquals(i, (byte)handle.get(addr, i));
+        ArrayChecker BYTE = (handle, segment, i) -> {
+            handle.set(segment, i, (byte)i);
+            assertEquals(i, (byte)handle.get(segment, i));
         };
 
-        ArrayChecker SHORT = (handle, addr, i) -> {
-            handle.set(addr, i, (short)i);
-            assertEquals(i, (short)handle.get(addr, i));
+        ArrayChecker SHORT = (handle, segment, i) -> {
+            handle.set(segment, i, (short)i);
+            assertEquals(i, (short)handle.get(segment, i));
         };
 
-        ArrayChecker CHAR = (handle, addr, i) -> {
-            handle.set(addr, i, (char)i);
-            assertEquals(i, (char)handle.get(addr, i));
+        ArrayChecker CHAR = (handle, segment, i) -> {
+            handle.set(segment, i, (char)i);
+            assertEquals(i, (char)handle.get(segment, i));
         };
 
-        ArrayChecker INT = (handle, addr, i) -> {
-            handle.set(addr, i, (int)i);
-            assertEquals(i, (int)handle.get(addr, i));
+        ArrayChecker INT = (handle, segment, i) -> {
+            handle.set(segment, i, (int)i);
+            assertEquals(i, (int)handle.get(segment, i));
         };
 
-        ArrayChecker LONG = (handle, addr, i) -> {
-            handle.set(addr, i, (long)i);
-            assertEquals(i, (long)handle.get(addr, i));
+        ArrayChecker LONG = (handle, segment, i) -> {
+            handle.set(segment, i, (long)i);
+            assertEquals(i, (long)handle.get(segment, i));
         };
 
-        ArrayChecker FLOAT = (handle, addr, i) -> {
-            handle.set(addr, i, (float)i);
-            assertEquals((float)i, (float)handle.get(addr, i));
+        ArrayChecker FLOAT = (handle, segment, i) -> {
+            handle.set(segment, i, (float)i);
+            assertEquals((float)i, (float)handle.get(segment, i));
         };
 
-        ArrayChecker DOUBLE = (handle, addr, i) -> {
-            handle.set(addr, i, (double)i);
-            assertEquals((double)i, (double)handle.get(addr, i));
+        ArrayChecker DOUBLE = (handle, segment, i) -> {
+            handle.set(segment, i, (double)i);
+            assertEquals((double)i, (double)handle.get(segment, i));
         };
     }
 
     @DataProvider(name = "matrixElements")
     public Object[][] createMatrixData() {
@@ -413,45 +410,45 @@
                 { IMMUTABLE, MemoryLayouts.BITS_64_LE, double.class, MatrixChecker.DOUBLE },
         };
     }
 
     interface MatrixChecker {
-        void check(VarHandle handle, MemoryAddress addr, long row, long col);
+        void check(VarHandle handle, MemorySegment segment, long row, long col);
 
-        MatrixChecker BYTE = (handle, addr, r, c) -> {
-            handle.set(addr, r, c, (byte)(r + c));
-            assertEquals(r + c, (byte)handle.get(addr, r, c));
+        MatrixChecker BYTE = (handle, segment, r, c) -> {
+            handle.set(segment, r, c, (byte)(r + c));
+            assertEquals(r + c, (byte)handle.get(segment, r, c));
         };
 
-        MatrixChecker SHORT = (handle, addr, r, c) -> {
-            handle.set(addr, r, c, (short)(r + c));
-            assertEquals(r + c, (short)handle.get(addr, r, c));
+        MatrixChecker SHORT = (handle, segment, r, c) -> {
+            handle.set(segment, r, c, (short)(r + c));
+            assertEquals(r + c, (short)handle.get(segment, r, c));
         };
 
-        MatrixChecker CHAR = (handle, addr, r, c) -> {
-            handle.set(addr, r, c, (char)(r + c));
-            assertEquals(r + c, (char)handle.get(addr, r, c));
+        MatrixChecker CHAR = (handle, segment, r, c) -> {
+            handle.set(segment, r, c, (char)(r + c));
+            assertEquals(r + c, (char)handle.get(segment, r, c));
         };
 
-        MatrixChecker INT = (handle, addr, r, c) -> {
-            handle.set(addr, r, c, (int)(r + c));
-            assertEquals(r + c, (int)handle.get(addr, r, c));
+        MatrixChecker INT = (handle, segment, r, c) -> {
+            handle.set(segment, r, c, (int)(r + c));
+            assertEquals(r + c, (int)handle.get(segment, r, c));
         };
 
-        MatrixChecker LONG = (handle, addr, r, c) -> {
-            handle.set(addr, r, c, r + c);
-            assertEquals(r + c, (long)handle.get(addr, r, c));
+        MatrixChecker LONG = (handle, segment, r, c) -> {
+            handle.set(segment, r, c, r + c);
+            assertEquals(r + c, (long)handle.get(segment, r, c));
         };
 
-        MatrixChecker FLOAT = (handle, addr, r, c) -> {
-            handle.set(addr, r, c, (float)(r + c));
-            assertEquals((float)(r + c), (float)handle.get(addr, r, c));
+        MatrixChecker FLOAT = (handle, segment, r, c) -> {
+            handle.set(segment, r, c, (float)(r + c));
+            assertEquals((float)(r + c), (float)handle.get(segment, r, c));
         };
 
-        MatrixChecker DOUBLE = (handle, addr, r, c) -> {
-            handle.set(addr, r, c, (double)(r + c));
-            assertEquals((double)(r + c), (double)handle.get(addr, r, c));
+        MatrixChecker DOUBLE = (handle, segment, r, c) -> {
+            handle.set(segment, r, c, (double)(r + c));
+            assertEquals((double)(r + c), (double)handle.get(segment, r, c));
         };
     }
 
     @DataProvider(name = "badCarriers")
     public Object[][] createBadCarriers() {
