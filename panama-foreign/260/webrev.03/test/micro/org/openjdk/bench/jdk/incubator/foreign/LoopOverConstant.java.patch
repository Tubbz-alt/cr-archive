diff a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverConstant.java b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverConstant.java
--- a/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverConstant.java
+++ b/test/micro/org/openjdk/bench/jdk/incubator/foreign/LoopOverConstant.java
@@ -70,16 +70,16 @@
         }
     }
 
     //setup native memory segment
 
-    static final MemoryAddress segment_addr = MemorySegment.allocateNative(ALLOC_SIZE).address();
+    static final MemorySegment segment = MemorySegment.allocateNative(ALLOC_SIZE);
     static final VarHandle VH_int = MemoryLayout.ofSequence(JAVA_INT).varHandle(int.class, sequenceElement());
 
     static {
         for (int i = 0; i < ELEM_SIZE; i++) {
-            VH_int.set(segment_addr, (long) i, i);
+            VH_int.set(segment, (long) i, i);
         }
     }
 
     //setup direct buffer
 
@@ -98,11 +98,11 @@
     }
 
     @Benchmark
     @OutputTimeUnit(TimeUnit.NANOSECONDS)
     public int segment_get() {
-        return (int)VH_int.get(segment_addr, 0L);
+        return (int)VH_int.get(segment, 0L);
     }
 
     @Benchmark
     @OutputTimeUnit(TimeUnit.NANOSECONDS)
     public int BB_get() {
@@ -120,11 +120,11 @@
 
     @Benchmark
     public int segment_loop() {
         int res = 0;
         for (int i = 0; i < ELEM_SIZE; i++) {
-            res += (int) VH_int.get(segment_addr, (long)i);
+            res += (int) VH_int.get(segment, (long)i);
         }
         return res;
     }
 
     @Benchmark
