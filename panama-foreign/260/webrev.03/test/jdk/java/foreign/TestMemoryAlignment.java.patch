diff a/test/jdk/java/foreign/TestMemoryAlignment.java b/test/jdk/java/foreign/TestMemoryAlignment.java
--- a/test/jdk/java/foreign/TestMemoryAlignment.java
+++ b/test/jdk/java/foreign/TestMemoryAlignment.java
@@ -29,11 +29,10 @@
 import jdk.incubator.foreign.MemoryLayouts;
 import jdk.incubator.foreign.MemoryLayout;
 
 import jdk.incubator.foreign.GroupLayout;
 import jdk.incubator.foreign.MemoryLayout.PathElement;
-import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
 import jdk.incubator.foreign.ValueLayout;
 import java.lang.invoke.VarHandle;
 import java.util.stream.LongStream;
@@ -49,13 +48,12 @@
         assertEquals(layout.bitAlignment(), 32);
         ValueLayout aligned = layout.withBitAlignment(align);
         assertEquals(aligned.bitAlignment(), align); //unreasonable alignment here, to make sure access throws
         VarHandle vh = aligned.varHandle(int.class);
         try (MemorySegment segment = MemorySegment.allocateNative(aligned)) {
-            MemoryAddress addr = segment.address();
-            vh.set(addr, -42);
-            int val = (int)vh.get(addr);
+            vh.set(segment, -42);
+            int val = (int)vh.get(segment);
             assertEquals(val, -42);
         }
     }
 
     @Test(dataProvider = "alignments")
@@ -65,12 +63,11 @@
         ValueLayout aligned = layout.withBitAlignment(align);
         MemoryLayout alignedGroup = MemoryLayout.ofStruct(MemoryLayouts.PAD_8, aligned);
         assertEquals(alignedGroup.bitAlignment(), align);
         VarHandle vh = aligned.varHandle(int.class);
         try (MemorySegment segment = MemorySegment.allocateNative(alignedGroup)) {
-            MemoryAddress addr = segment.address();
-            vh.set(addr.addOffset(1L), -42);
+            vh.set(segment.asSlice(1L), -42);
             assertEquals(align, 8); //this is the only case where access is aligned
         } catch (IllegalStateException ex) {
             assertNotEquals(align, 8); //if align != 8, access is always unaligned
         }
     }
@@ -92,13 +89,12 @@
     public void testUnalignedSequence(long align) {
         SequenceLayout layout = MemoryLayout.ofSequence(5, MemoryLayouts.BITS_32_BE.withBitAlignment(align));
         try {
             VarHandle vh = layout.varHandle(int.class, PathElement.sequenceElement());
             try (MemorySegment segment = MemorySegment.allocateNative(layout)) {
-                MemoryAddress addr = segment.address();
                 for (long i = 0 ; i < 5 ; i++) {
-                    vh.set(addr, i, -42);
+                    vh.set(segment, i, -42);
                 }
             }
         } catch (UnsupportedOperationException ex) {
             assertTrue(align > 32); //if align > 32, access is always unaligned (for some elements)
         }
@@ -116,17 +112,16 @@
         assertEquals(g.bitAlignment(), 8);
         VarHandle vh_c = g.varHandle(byte.class, PathElement.groupElement("a"));
         VarHandle vh_s = g.varHandle(short.class, PathElement.groupElement("b"));
         VarHandle vh_i = g.varHandle(int.class, PathElement.groupElement("c"));
         try (MemorySegment segment = MemorySegment.allocateNative(g)) {
-            MemoryAddress addr = segment.address();
-            vh_c.set(addr, Byte.MIN_VALUE);
-            assertEquals(vh_c.get(addr), Byte.MIN_VALUE);
-            vh_s.set(addr, Short.MIN_VALUE);
-            assertEquals(vh_s.get(addr), Short.MIN_VALUE);
-            vh_i.set(addr, Integer.MIN_VALUE);
-            assertEquals(vh_i.get(addr), Integer.MIN_VALUE);
+            vh_c.set(segment, Byte.MIN_VALUE);
+            assertEquals(vh_c.get(segment), Byte.MIN_VALUE);
+            vh_s.set(segment, Short.MIN_VALUE);
+            assertEquals(vh_s.get(segment), Short.MIN_VALUE);
+            vh_i.set(segment, Integer.MIN_VALUE);
+            assertEquals(vh_i.get(segment), Integer.MIN_VALUE);
         }
     }
 
     @DataProvider(name = "alignments")
     public Object[][] createAlignments() {
