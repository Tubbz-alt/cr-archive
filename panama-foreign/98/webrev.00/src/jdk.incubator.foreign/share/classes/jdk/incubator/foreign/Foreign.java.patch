diff a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/incubator/foreign/Foreign.java
@@ -71,12 +71,12 @@
      * restricted methods, and use safe and supported functionalities, where possible.
      *
      * @param base the desired base address
      * @param byteSize the desired size (in bytes).
      * @return a new memory address attached to a native memory segment with given base address and size.
-     * @throws IllegalArgumentException if {@code base} does not encapsulate a native memory address,
-     * or if the segment associated with {@code base} is not the <em>primordial</em> segment.
+     * @throws IllegalArgumentException if {@code base} does not encapsulate an <em>unchecked</em> native memory address,
+     * e.g. if {@code base.segment() != null}.
      * @throws IllegalAccessError if the permission jkd.incubator.foreign.restrictedMethods is set to 'deny'
      */
     MemoryAddress withSize(MemoryAddress base, long byteSize);
 
     /**
@@ -90,12 +90,12 @@
      * restricted methods, and use safe and supported functionalities, where possible.
      *
      * @param base the desired base address
      * @param byteSize the desired size.
      * @return a new native memory segment with given base address and size.
-     * @throws IllegalArgumentException if {@code base} does not encapsulate a native memory address,
-     * or if the segment associated with {@code base} is not the <em>primordial</em> segment.
+     * @throws IllegalArgumentException if {@code base} does not encapsulate an <em>unchecked</em> native memory address,
+      * e.g. if {@code base.segment() != null}.
      * @throws IllegalAccessError if the permission jkd.incubator.foreign.restrictedMethods is set to 'deny'
      */
     MemorySegment asMallocSegment(MemoryAddress base, long byteSize);
 
     /**
