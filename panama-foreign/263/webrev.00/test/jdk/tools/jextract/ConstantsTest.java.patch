diff a/test/jdk/tools/jextract/ConstantsTest.java b/test/jdk/tools/jextract/ConstantsTest.java
--- a/test/jdk/tools/jextract/ConstantsTest.java
+++ b/test/jdk/tools/jextract/ConstantsTest.java
@@ -19,10 +19,11 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
+import jdk.incubator.foreign.CSupport;
 import org.testng.annotations.AfterTest;
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 import java.nio.file.Path;
@@ -62,28 +63,22 @@
         constants = null;
         loader.close();
         deleteDir(dirPath);
     }
 
-
     @Test(dataProvider = "definedConstants")
-    public void checkConstantsSignatures(String name, Class<?> type, Object value) {
+    public void checkConstantsTypesAndValues(String name, Class<?> type, Consumer<Object> checker) throws ReflectiveOperationException {
         var f = findMethod(constants, name);
         assertNotNull(f);
         assertSame(f.getReturnType(), type);
-    }
-
-    @Test(dataProvider = "definedConstants")
-    public void checkConstantsValues(String name, Class<?> type, Consumer<Object> checker) throws ReflectiveOperationException {
-        Object actual = findMethod(constants, name).invoke(null);
+        Object actual = f.invoke(null);
         checker.accept(actual);
     }
 
     @Test(dataProvider = "missingConstants")
     public void checkMissingConstants(String name) {
-        assertTrue(Stream.of(constants.getDeclaredFields())
-                .noneMatch(m -> m.getName().equals(name)));
+        assertTrue(findMethod(constants, name) == null);
     }
 
     @DataProvider
     public static Object[][] definedConstants() {
         return new Object[][] {
@@ -98,32 +93,41 @@
                 { "FLOAT_VALUE", float.class, equalsTo(1.32f) },
                 { "DOUBLE_VALUE", double.class, (Consumer<Double>) (actual -> assertEquals(actual, 1.32, 0.1)) },
                 { "CHAR_VALUE", int.class, equalsTo(104) }, //integer char constants have type int
                 { "MULTICHAR_VALUE", int.class, equalsTo(26728) },  //integer char constants have type int
                 { "BOOL_VALUE", byte.class, equalsTo((byte)1) },
-                { "SUB", int.class, equalsTo( 7 ) }
+                { "SUB", int.class, equalsTo( 7 ) },
+                // pointer type values
+                { "STR", MemoryAddress.class, equalsToJavaStr("Hello") },
+                { "QUOTE", MemoryAddress.class, equalsToJavaStr("QUOTE") },
+                { "ZERO_PTR", MemoryAddress.class, equalsPtrContents(0) },
+                { "F_PTR", MemoryAddress.class, equalsPtrContents(0xFFFFFFFFFFFFFFFFL) },
         };
     }
 
     static Consumer<Object> equalsTo(Object expected) {
         return actual -> assertEquals(actual, expected);
     }
 
+    static Consumer<MemoryAddress> equalsToJavaStr(String expected) {
+        return actual -> assertEquals(CSupport.toJavaString(actual), expected);
+    }
+
+    static Consumer<MemoryAddress> equalsPtrContents(long expected) {
+        return actual -> assertEquals(actual.toRawLongValue(), expected);
+    }
+
     @DataProvider
     public static Object[][] missingConstants() {
         return new Object[][] {
                 { "ID" },
                 { "SUM" },
                 { "BLOCK_BEGIN" },
                 { "BLOCK_END" },
                 { "INTEGER_MAX_VALUE" },
                 { "CYCLIC_1" },
                 { "CYCLIC_2" },
-                { "UNUSED" },
-                // pointer type values
-                { "STR" },
-                { "QUOTE" },
-                { "ZERO_PTR" },
-                { "F_PTR" }
+                // array
+                { "ARRAY" }
         };
     }
 }
