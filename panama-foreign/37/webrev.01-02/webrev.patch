diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
@@ -92,10 +92,15 @@
         if (!(o instanceof Declaration)) return false;
         Declaration decl = (Declaration) o;
         return name().equals(decl.name());
     }
 
+    @Override
+    public int hashCode() {
+        return Objects.hash(name);
+    }
+
     public static final class VariableImpl extends DeclarationImpl implements Declaration.Variable {
 
         final Variable.Kind kind;
         final Type type;
         final Optional<MemoryLayout> layout;
@@ -155,11 +160,11 @@
                     type.equals(variable.type());
         }
 
         @Override
         public int hashCode() {
-            return Objects.hash(kind, type);
+            return Objects.hash(super.hashCode(), kind, type);
         }
     }
 
     public static final class FunctionImpl extends DeclarationImpl implements Declaration.Function {
 
@@ -204,17 +209,18 @@
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
             if (!(o instanceof Declaration.Function)) return false;
             if (!super.equals(o)) return false;
+
             Declaration.Function function = (Declaration.Function) o;
             return type.equals(function.type());
         }
 
         @Override
         public int hashCode() {
-            return Objects.hash(params, type);
+            return Objects.hash(super.hashCode(), type);
         }
     }
 
     public static class ScopedImpl extends DeclarationImpl implements Declaration.Scoped {
 
@@ -278,11 +284,11 @@
                     declarations.equals(scoped.members());
         }
 
         @Override
         public int hashCode() {
-            return Objects.hash(kind, declarations);
+            return Objects.hash(super.hashCode(), kind, declarations);
         }
     }
 
     public static final class ConstantImpl extends DeclarationImpl implements Declaration.Constant {
 
@@ -334,9 +340,9 @@
                     type.equals(constant.type());
         }
 
         @Override
         public int hashCode() {
-            return Objects.hash(value, type);
+            return Objects.hash(super.hashCode(), value, type);
         }
     }
 }
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
@@ -40,10 +40,17 @@
     @Override
     public boolean isErroneous() {
         return false;
     }
 
+    static boolean equals(Type t1, Type.Delegated t2) {
+        assert t1 != null;
+        assert t2 != null;
+
+        return (t2.kind() == Delegated.Kind.TYPEDEF)? t1.equals(t2.type()) : false;
+    }
+
     public static final TypeImpl ERROR = new TypeImpl() {
         @Override
         public <R, D> R accept(Visitor<R, D> visitor, D data) {
             return visitor.visitType(this, data);
         }
@@ -89,11 +96,13 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (!(o instanceof Type.Primitive)) return false;
+            if (!(o instanceof Type.Primitive)) {
+                return (o instanceof Type.Delegated)? equals(this, (Type.Delegated)o) : false;
+            }
             Type.Primitive primitive = (Type.Primitive) o;
             return kind == primitive.kind();
         }
 
         @Override
@@ -115,23 +124,25 @@
         public <R, D> R accept(Visitor<R, D> visitor, D data) {
             return visitor.visitDelegated(this, data);
         }
 
         @Override
-        public Delegated.Kind kind() {
+        public final Delegated.Kind kind() {
             return kind;
         }
 
         @Override
-        public Optional<String> name() {
+        public final Optional<String> name() {
             return name;
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (!(o instanceof Type.Delegated)) return false;
+            if (!(o instanceof Type.Delegated)) {
+                return (o instanceof Type)? equals((Type)o, this) : false;
+            }
             Type.Delegated that = (Type.Delegated) o;
             return kind == that.kind() &&
                     name.equals(that.name());
         }
 
@@ -164,18 +175,20 @@
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
             if (!(o instanceof Type.Delegated)) return false;
-            if (!super.equals(o)) return false;
+            if (!super.equals(o)) {
+                return (o instanceof Type.Delegated)? equals(this, (Type.Delegated)o) : false;
+            }
             Type.Delegated qualified = (Type.Delegated) o;
             return Objects.equals(type, qualified.type());
         }
 
         @Override
         public int hashCode() {
-            return Objects.hash(super.hashCode(), type);
+            return (kind() == Kind.TYPEDEF)? type().hashCode() : Objects.hash(super.hashCode(), type);
         }
     }
 
     public static final class PointerImpl extends DelegatedBase {
         private final Supplier<Type> pointeeFactory;
@@ -215,11 +228,13 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (!(o instanceof Type.Declared)) return false;
+            if (!(o instanceof Type.Declared)) {
+                return (o instanceof Type.Delegated)? equals(this, (Type.Delegated)o) : false;
+            }
             Type.Declared declared = (Type.Declared) o;
             return declaration.equals(declared.tree());
         }
 
         @Override
@@ -262,11 +277,13 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (!(o instanceof Type.Function)) return false;
+            if (!(o instanceof Type.Function)) {
+                return (o instanceof Type.Delegated)? equals(this, (Type.Delegated)o) : false;
+            }
             Type.Function function = (Type.Function) o;
             return varargs == function.varargs() &&
                     argtypes.equals(function.argumentTypes()) &&
                     restype.equals(function.returnType());
         }
@@ -319,11 +336,13 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (!(o instanceof Type.Array)) return false;
+            if (!(o instanceof Type.Array)) {
+                return (o instanceof Type.Delegated)? equals(this, (Type.Delegated)o) : false;
+            }
             Type.Array array = (Type.Array) o;
             return kind == array.kind() &&
                     elemType.equals(array.elementType());
         }
 
diff a/test/jdk/tools/jextract/RepeatedDeclsTest.java b/test/jdk/tools/jextract/RepeatedDeclsTest.java
--- a/test/jdk/tools/jextract/RepeatedDeclsTest.java
+++ b/test/jdk/tools/jextract/RepeatedDeclsTest.java
@@ -23,11 +23,13 @@
 
 import org.testng.annotations.Test;
 
 import java.lang.reflect.Method;
 import java.nio.file.Path;
+import jdk.incubator.foreign.MemoryAddress;
 import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SystemABI.Type;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.assertTrue;
 
@@ -51,10 +53,22 @@
             assertNotNull(findMethod(cls, "func", int.class));
 
             // check a method for "void func2(int)"
             assertNotNull(findMethod(cls, "func2", int.class));
 
+            // check a method for "void func3(int*)"
+            assertNotNull(findMethod(cls, "func3", MemoryAddress.class));
+
+            // check a method for "void func4(int*)"
+            assertNotNull(findMethod(cls, "func4", MemoryAddress.class));
+
+            // check a method for "void func5(int)"
+            assertNotNull(findMethod(cls, "func5", int.class));
+
+            // check a method for "double distance(struct Point)"
+            assertNotNull(findMethod(cls, "distance", MemorySegment.class));
+
             // check a getter method for "i"
             assertNotNull(findMethod(cls, "i$get"));
 
             // check a setter method for "i"
             assertNotNull(findMethod(cls, "i$set", int.class));
diff a/test/jdk/tools/jextract/repeatedDecls.h b/test/jdk/tools/jextract/repeatedDecls.h
--- a/test/jdk/tools/jextract/repeatedDecls.h
+++ b/test/jdk/tools/jextract/repeatedDecls.h
@@ -32,16 +32,40 @@
 void func(int xyz);
 void func2(int);
 void func2(int abc);
 void func2(int xyz);
 
+typedef int INT;
+void func(INT);
+void func(INT abc);
+void func(INT xyz);
+void func2(INT);
+void func2(INT abc);
+void func2(INT xyz);
+
+typedef int* INTPTR;
+void func3(INTPTR x);
+void func3(int* x);
+void func4(INTPTR x);
+void func4(int* x);
+
+typedef int Integer;
+void func(Integer x);
+void func5(int x);
+void func5(Integer x);
+void func5(INT x);
+
 struct Point;
 struct Point {
    int i;
    int j;
 };
 
+typedef struct Point POINT;
+double distance(struct Point p);
+double distance(POINT p);
+
 struct Point3D {
     int i;
     int j;
     int k;
 };
