diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
@@ -84,11 +84,19 @@
         return withAttributes(attrs);
     }
 
     abstract protected Declaration withAttributes(Map<String, List<Constable>> attrs);
 
-    public static class VariableImpl extends DeclarationImpl implements Declaration.Variable {
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof Declaration)) return false;
+        Declaration decl = (Declaration) o;
+        return name().equals(decl.name());
+    }
+
+    public static final class VariableImpl extends DeclarationImpl implements Declaration.Variable {
 
         final Variable.Kind kind;
         final Type type;
         final Optional<MemoryLayout> layout;
 
@@ -138,23 +146,24 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            VariableImpl variable = (VariableImpl) o;
-            return kind == variable.kind &&
-                    type.equals(variable.type);
+            if (!(o instanceof Declaration.Variable)) return false;
+            if (!super.equals(o)) return false;
+            Declaration.Variable variable = (Declaration.Variable) o;
+            return kind == variable.kind() &&
+                    type.equals(variable.type());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(kind, type);
         }
     }
 
-    public static class FunctionImpl extends DeclarationImpl implements Declaration.Function {
+    public static final class FunctionImpl extends DeclarationImpl implements Declaration.Function {
 
         final List<Variable> params;
         final Type.Function type;
 
         public FunctionImpl(Type.Function type, List<Variable> params, String name, Position pos) {
@@ -193,14 +202,14 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            FunctionImpl function = (FunctionImpl) o;
-            return params.equals(function.params) &&
-                    type.equals(function.type);
+            if (!(o instanceof Declaration.Function)) return false;
+            if (!super.equals(o)) return false;
+            Declaration.Function function = (Declaration.Function) o;
+            return type.equals(function.type());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(params, type);
@@ -260,23 +269,24 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            ScopedImpl scoped = (ScopedImpl) o;
-            return kind == scoped.kind &&
-                    declarations.equals(scoped.declarations);
+            if (!(o instanceof Declaration.Scoped)) return false;
+            if (!super.equals(o)) return false;
+            Declaration.Scoped scoped = (Declaration.Scoped) o;
+            return kind == scoped.kind() &&
+                    declarations.equals(scoped.members());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(kind, declarations);
         }
     }
 
-    public static class ConstantImpl extends DeclarationImpl implements Declaration.Constant {
+    public static final class ConstantImpl extends DeclarationImpl implements Declaration.Constant {
 
         final Object value;
         final Type type;
 
         public ConstantImpl(Type type, Object value, String name, Position pos) {
@@ -315,14 +325,15 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            ConstantImpl constant = (ConstantImpl) o;
-            return value.equals(constant.value) &&
-                    type.equals(constant.type);
+            if (!(o instanceof Declaration.Constant)) return false;
+            if (!super.equals(o)) return false;
+            Declaration.Constant constant = (Declaration.Constant) o;
+            return value.equals(constant.value()) &&
+                    type.equals(constant.type());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(value, type);
