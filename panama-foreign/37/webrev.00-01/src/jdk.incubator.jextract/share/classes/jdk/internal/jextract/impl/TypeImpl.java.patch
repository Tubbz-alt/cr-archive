diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
@@ -89,13 +89,13 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            PrimitiveImpl primitive = (PrimitiveImpl) o;
-            return kind == primitive.kind;
+            if (!(o instanceof Type.Primitive)) return false;
+            Type.Primitive primitive = (Type.Primitive) o;
+            return kind == primitive.kind();
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(kind);
@@ -127,23 +127,23 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            DelegatedBase that = (DelegatedBase) o;
-            return kind == that.kind &&
-                    name.equals(that.name);
+            if (!(o instanceof Type.Delegated)) return false;
+            Type.Delegated that = (Type.Delegated) o;
+            return kind == that.kind() &&
+                    name.equals(that.name());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(kind, name);
         }
     }
 
-    public static class QualifiedImpl extends DelegatedBase {
+    public static final class QualifiedImpl extends DelegatedBase {
         private final Type type;
 
         public QualifiedImpl(Kind kind, Type type) {
             this(kind, Optional.empty(), type);
         }
@@ -163,23 +163,23 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
+            if (!(o instanceof Type.Delegated)) return false;
             if (!super.equals(o)) return false;
-            QualifiedImpl qualified = (QualifiedImpl) o;
-            return Objects.equals(type, qualified.type);
+            Type.Delegated qualified = (Type.Delegated) o;
+            return Objects.equals(type, qualified.type());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(super.hashCode(), type);
         }
     }
 
-    public static class PointerImpl extends DelegatedBase {
+    public static final class PointerImpl extends DelegatedBase {
         private final Supplier<Type> pointeeFactory;
 
         public PointerImpl(Supplier<Type> pointeeFactory) {
             super(Kind.POINTER, Optional.empty());
             this.pointeeFactory = Objects.requireNonNull(pointeeFactory);
@@ -193,11 +193,11 @@
         public Type type() {
             return pointeeFactory.get();
         }
     }
 
-    public static class DeclaredImpl extends TypeImpl implements Type.Declared {
+    public static final class DeclaredImpl extends TypeImpl implements Type.Declared {
 
         private final Declaration.Scoped declaration;
 
         public DeclaredImpl(Declaration.Scoped declaration) {
             super();
@@ -215,22 +215,22 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            DeclaredImpl declared = (DeclaredImpl) o;
-            return declaration.equals(declared.declaration);
+            if (!(o instanceof Type.Declared)) return false;
+            Type.Declared declared = (Type.Declared) o;
+            return declaration.equals(declared.tree());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(declaration);
         }
     }
 
-    public static class FunctionImpl extends TypeImpl implements Type.Function {
+    public static final class FunctionImpl extends TypeImpl implements Type.Function {
 
         private final boolean varargs;
         private final List<Type> argtypes;
         private final Type restype;
 
@@ -262,24 +262,24 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            FunctionImpl function = (FunctionImpl) o;
-            return varargs == function.varargs &&
-                    argtypes.equals(function.argtypes) &&
-                    restype.equals(function.restype);
+            if (!(o instanceof Type.Function)) return false;
+            Type.Function function = (Type.Function) o;
+            return varargs == function.varargs() &&
+                    argtypes.equals(function.argumentTypes()) &&
+                    restype.equals(function.returnType());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(varargs, argtypes, restype);
         }
     }
 
-    public static class ArrayImpl extends TypeImpl implements Type.Array {
+    public static final class ArrayImpl extends TypeImpl implements Type.Array {
 
         private final Kind kind;
         private final OptionalLong elemCount;
         private final Type elemType;
 
@@ -319,14 +319,14 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            ArrayImpl array = (ArrayImpl) o;
-            return kind == array.kind &&
-                    elemType.equals(array.elemType);
+            if (!(o instanceof Type.Array)) return false;
+            Type.Array array = (Type.Array) o;
+            return kind == array.kind() &&
+                    elemType.equals(array.elementType());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(kind, elemType);
