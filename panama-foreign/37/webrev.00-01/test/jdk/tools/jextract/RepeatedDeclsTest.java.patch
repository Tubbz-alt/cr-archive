diff a/test/jdk/tools/jextract/RepeatedDeclsTest.java b/test/jdk/tools/jextract/RepeatedDeclsTest.java
--- a/test/jdk/tools/jextract/RepeatedDeclsTest.java
+++ b/test/jdk/tools/jextract/RepeatedDeclsTest.java
@@ -23,10 +23,12 @@
 
 import org.testng.annotations.Test;
 
 import java.lang.reflect.Method;
 import java.nio.file.Path;
+import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.SystemABI.Type;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.assertTrue;
 
 /*
@@ -46,15 +48,39 @@
         try(Loader loader = classLoader(repeatedDeclsOutput)) {
             Class<?> cls = loader.loadClass("repeatedDecls_h");
             // check a method for "void func(int)"
             assertNotNull(findMethod(cls, "func", int.class));
 
+            // check a method for "void func2(int)"
+            assertNotNull(findMethod(cls, "func2", int.class));
+
             // check a getter method for "i"
             assertNotNull(findMethod(cls, "i$get"));
 
             // check a setter method for "i"
             assertNotNull(findMethod(cls, "i$set", int.class));
+
+            // make sure that enum constants are generated fine
+            checkIntField(cls, "R", 0);
+            checkIntField(cls, "G", 1);
+            checkIntField(cls, "B", 2);
+            checkIntField(cls, "C", 0);
+            checkIntField(cls, "M", 1);
+            checkIntField(cls, "Y", 2);
+
+            // check Point layout
+            MemoryLayout pointLayout = findLayout(cls, "Point");
+            assertNotNull(pointLayout);
+            checkFieldABIType(pointLayout, "i",  Type.INT);
+            checkFieldABIType(pointLayout, "j",  Type.INT);
+
+            // check Point3D layout
+            MemoryLayout point3DLayout = findLayout(cls, "Point3D");
+            assertNotNull(point3DLayout);
+            checkFieldABIType(point3DLayout, "i",  Type.INT);
+            checkFieldABIType(point3DLayout, "j",  Type.INT);
+            checkFieldABIType(point3DLayout, "k",  Type.INT);
         } finally {
             deleteDir(repeatedDeclsOutput);
         }
     }
 }
