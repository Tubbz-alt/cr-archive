diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Declaration.java
@@ -93,10 +93,27 @@
      * @param <D> the visitor's argument type.
      * @return the result of visiting this declaration through the specified declaration visitor.
      */
     <R,D> R accept(Visitor<R, D> visitor, D data);
 
+    /**
+     * Compares the specified object with this Declaration for equality.  Returns
+     * {@code true} if and only if the specified object is also a Declaration and both
+     * the declarations are <i>equal</i>.
+     *
+     * @param o the object to be compared for equality with this Declaration
+     * @return {@code true} if the specified object is equal to this Declaration
+     */
+    boolean equals(Object o);
+
+    /**
+     * Returns the hash code value for this Declaration.
+     *
+     * @return the hash code value for this Declaration.
+     */
+    int hashCode();
+
     /**
      * A function declaration.
      */
     interface Function extends Declaration {
         /**
diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Type.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Type.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Type.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/Type.java
@@ -59,10 +59,27 @@
      * @param <D> the visitor's argument type.
      * @return the result of visiting this type through the specified type visitor.
      */
     <R,D> R accept(Visitor<R, D> visitor, D data);
 
+    /**
+     * Compares the specified object with this Type for equality.  Returns
+     * {@code true} if and only if the specified object is also a Type and both
+     * the Types are <i>equal</i>.
+     *
+     * @param o the object to be compared for equality with this Type
+     * @return {@code true} if the specified object is equal to this Type
+     */
+    boolean equals(Object o);
+
+    /**
+     * Returns the hash code value for this Type.
+     *
+     * @return the hash code value for this Type.
+     */
+    int hashCode();
+
     /**
      * A primitive type.
      */
     interface Primitive extends Type {
 
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
@@ -84,11 +84,19 @@
         return withAttributes(attrs);
     }
 
     abstract protected Declaration withAttributes(Map<String, List<Constable>> attrs);
 
-    public static class VariableImpl extends DeclarationImpl implements Declaration.Variable {
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof Declaration)) return false;
+        Declaration decl = (Declaration) o;
+        return name().equals(decl.name());
+    }
+
+    public static final class VariableImpl extends DeclarationImpl implements Declaration.Variable {
 
         final Variable.Kind kind;
         final Type type;
         final Optional<MemoryLayout> layout;
 
@@ -138,23 +146,24 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            VariableImpl variable = (VariableImpl) o;
-            return kind == variable.kind &&
-                    type.equals(variable.type);
+            if (!(o instanceof Declaration.Variable)) return false;
+            if (!super.equals(o)) return false;
+            Declaration.Variable variable = (Declaration.Variable) o;
+            return kind == variable.kind() &&
+                    type.equals(variable.type());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(kind, type);
         }
     }
 
-    public static class FunctionImpl extends DeclarationImpl implements Declaration.Function {
+    public static final class FunctionImpl extends DeclarationImpl implements Declaration.Function {
 
         final List<Variable> params;
         final Type.Function type;
 
         public FunctionImpl(Type.Function type, List<Variable> params, String name, Position pos) {
@@ -193,14 +202,14 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            FunctionImpl function = (FunctionImpl) o;
-            return params.equals(function.params) &&
-                    type.equals(function.type);
+            if (!(o instanceof Declaration.Function)) return false;
+            if (!super.equals(o)) return false;
+            Declaration.Function function = (Declaration.Function) o;
+            return type.equals(function.type());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(params, type);
@@ -260,23 +269,24 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            ScopedImpl scoped = (ScopedImpl) o;
-            return kind == scoped.kind &&
-                    declarations.equals(scoped.declarations);
+            if (!(o instanceof Declaration.Scoped)) return false;
+            if (!super.equals(o)) return false;
+            Declaration.Scoped scoped = (Declaration.Scoped) o;
+            return kind == scoped.kind() &&
+                    declarations.equals(scoped.members());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(kind, declarations);
         }
     }
 
-    public static class ConstantImpl extends DeclarationImpl implements Declaration.Constant {
+    public static final class ConstantImpl extends DeclarationImpl implements Declaration.Constant {
 
         final Object value;
         final Type type;
 
         public ConstantImpl(Type type, Object value, String name, Position pos) {
@@ -315,14 +325,15 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            ConstantImpl constant = (ConstantImpl) o;
-            return value.equals(constant.value) &&
-                    type.equals(constant.type);
+            if (!(o instanceof Declaration.Constant)) return false;
+            if (!super.equals(o)) return false;
+            Declaration.Constant constant = (Declaration.Constant) o;
+            return value.equals(constant.value()) &&
+                    type.equals(constant.type());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(value, type);
diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/TypeImpl.java
@@ -89,13 +89,13 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            PrimitiveImpl primitive = (PrimitiveImpl) o;
-            return kind == primitive.kind;
+            if (!(o instanceof Type.Primitive)) return false;
+            Type.Primitive primitive = (Type.Primitive) o;
+            return kind == primitive.kind();
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(kind);
@@ -127,23 +127,23 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            DelegatedBase that = (DelegatedBase) o;
-            return kind == that.kind &&
-                    name.equals(that.name);
+            if (!(o instanceof Type.Delegated)) return false;
+            Type.Delegated that = (Type.Delegated) o;
+            return kind == that.kind() &&
+                    name.equals(that.name());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(kind, name);
         }
     }
 
-    public static class QualifiedImpl extends DelegatedBase {
+    public static final class QualifiedImpl extends DelegatedBase {
         private final Type type;
 
         public QualifiedImpl(Kind kind, Type type) {
             this(kind, Optional.empty(), type);
         }
@@ -163,23 +163,23 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
+            if (!(o instanceof Type.Delegated)) return false;
             if (!super.equals(o)) return false;
-            QualifiedImpl qualified = (QualifiedImpl) o;
-            return Objects.equals(type, qualified.type);
+            Type.Delegated qualified = (Type.Delegated) o;
+            return Objects.equals(type, qualified.type());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(super.hashCode(), type);
         }
     }
 
-    public static class PointerImpl extends DelegatedBase {
+    public static final class PointerImpl extends DelegatedBase {
         private final Supplier<Type> pointeeFactory;
 
         public PointerImpl(Supplier<Type> pointeeFactory) {
             super(Kind.POINTER, Optional.empty());
             this.pointeeFactory = Objects.requireNonNull(pointeeFactory);
@@ -193,11 +193,11 @@
         public Type type() {
             return pointeeFactory.get();
         }
     }
 
-    public static class DeclaredImpl extends TypeImpl implements Type.Declared {
+    public static final class DeclaredImpl extends TypeImpl implements Type.Declared {
 
         private final Declaration.Scoped declaration;
 
         public DeclaredImpl(Declaration.Scoped declaration) {
             super();
@@ -215,22 +215,22 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            DeclaredImpl declared = (DeclaredImpl) o;
-            return declaration.equals(declared.declaration);
+            if (!(o instanceof Type.Declared)) return false;
+            Type.Declared declared = (Type.Declared) o;
+            return declaration.equals(declared.tree());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(declaration);
         }
     }
 
-    public static class FunctionImpl extends TypeImpl implements Type.Function {
+    public static final class FunctionImpl extends TypeImpl implements Type.Function {
 
         private final boolean varargs;
         private final List<Type> argtypes;
         private final Type restype;
 
@@ -262,24 +262,24 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            FunctionImpl function = (FunctionImpl) o;
-            return varargs == function.varargs &&
-                    argtypes.equals(function.argtypes) &&
-                    restype.equals(function.restype);
+            if (!(o instanceof Type.Function)) return false;
+            Type.Function function = (Type.Function) o;
+            return varargs == function.varargs() &&
+                    argtypes.equals(function.argumentTypes()) &&
+                    restype.equals(function.returnType());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(varargs, argtypes, restype);
         }
     }
 
-    public static class ArrayImpl extends TypeImpl implements Type.Array {
+    public static final class ArrayImpl extends TypeImpl implements Type.Array {
 
         private final Kind kind;
         private final OptionalLong elemCount;
         private final Type elemType;
 
@@ -319,14 +319,14 @@
         }
 
         @Override
         public boolean equals(Object o) {
             if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-            ArrayImpl array = (ArrayImpl) o;
-            return kind == array.kind &&
-                    elemType.equals(array.elemType);
+            if (!(o instanceof Type.Array)) return false;
+            Type.Array array = (Type.Array) o;
+            return kind == array.kind() &&
+                    elemType.equals(array.elementType());
         }
 
         @Override
         public int hashCode() {
             return Objects.hash(kind, elemType);
diff a/test/jdk/tools/jextract/JextractToolProviderTest.java b/test/jdk/tools/jextract/JextractToolProviderTest.java
--- a/test/jdk/tools/jextract/JextractToolProviderTest.java
+++ b/test/jdk/tools/jextract/JextractToolProviderTest.java
@@ -96,28 +96,6 @@
 
     @Test
     public void testTargetPackageLongOption() {
         testTargetPackage("--target-package");
     }
-
-     @Test
-    public void testAnonymousEnum() {
-        Path anonenumOutput = getOutputFilePath("anonenumgen");
-        Path anonenumH = getInputFilePath("anonenum.h");
-        run("-d", anonenumOutput.toString(), anonenumH.toString()).checkSuccess();
-        try(Loader loader = classLoader(anonenumOutput)) {
-            Class<?> cls = loader.loadClass("anonenum_h");
-            checkIntField(cls, "RED", 0xff0000);
-            checkIntField(cls, "GREEN", 0x00ff00);
-            checkIntField(cls, "BLUE", 0x0000ff);
-            checkIntField(cls, "Java", 0);
-            checkIntField(cls, "C", 1);
-            checkIntField(cls, "CPP", 2);
-            checkIntField(cls, "Python", 3);
-            checkIntField(cls, "Ruby", 4);
-            checkIntField(cls, "ONE", 1);
-            checkIntField(cls, "TWO", 2);
-        } finally {
-            deleteDir(anonenumOutput);
-        }
-    }
 }
diff a/test/jdk/tools/jextract/JextractToolRunner.java b/test/jdk/tools/jextract/JextractToolRunner.java
--- a/test/jdk/tools/jextract/JextractToolRunner.java
+++ b/test/jdk/tools/jextract/JextractToolRunner.java
@@ -34,10 +34,13 @@
 import java.nio.file.Paths;
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.attribute.BasicFileAttributes;
 import java.util.Objects;
 import java.util.spi.ToolProvider;
+import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.MemoryLayout.PathElement;
+import jdk.incubator.foreign.SystemABI.Type;
 
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotEquals;
 import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.assertTrue;
@@ -224,10 +227,27 @@
             fail("Expect method " + name);
         }
         return null;
     }
 
+    protected MemoryLayout findLayout(Class<?> cls, String name) {
+        Field field = findField(cls, name + "$LAYOUT");
+        assertNotNull(field);
+        assertEquals(field.getType(), MemoryLayout.class);
+        try {
+            return (MemoryLayout)field.get(null);
+        } catch (Exception exp) {
+            System.err.println(exp);
+            assertTrue(false, "should not reach here");
+        }
+        return null;
+    }
+
+    protected static void checkFieldABIType(MemoryLayout layout, String fieldName, Type expected) {
+        assertEquals(layout.select(PathElement.groupElement(fieldName)).abiType().orElseThrow(), expected);
+    }
+
     protected static class Loader implements AutoCloseable {
 
         private final URLClassLoader loader;
 
         public Loader(URLClassLoader loader) {
diff a/test/jdk/tools/jextract/RepeatedDeclsTest.java b/test/jdk/tools/jextract/RepeatedDeclsTest.java
--- a/test/jdk/tools/jextract/RepeatedDeclsTest.java
+++ b/test/jdk/tools/jextract/RepeatedDeclsTest.java
@@ -23,10 +23,12 @@
 
 import org.testng.annotations.Test;
 
 import java.lang.reflect.Method;
 import java.nio.file.Path;
+import jdk.incubator.foreign.MemoryLayout;
+import jdk.incubator.foreign.SystemABI.Type;
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.assertTrue;
 
 /*
@@ -46,15 +48,39 @@
         try(Loader loader = classLoader(repeatedDeclsOutput)) {
             Class<?> cls = loader.loadClass("repeatedDecls_h");
             // check a method for "void func(int)"
             assertNotNull(findMethod(cls, "func", int.class));
 
+            // check a method for "void func2(int)"
+            assertNotNull(findMethod(cls, "func2", int.class));
+
             // check a getter method for "i"
             assertNotNull(findMethod(cls, "i$get"));
 
             // check a setter method for "i"
             assertNotNull(findMethod(cls, "i$set", int.class));
+
+            // make sure that enum constants are generated fine
+            checkIntField(cls, "R", 0);
+            checkIntField(cls, "G", 1);
+            checkIntField(cls, "B", 2);
+            checkIntField(cls, "C", 0);
+            checkIntField(cls, "M", 1);
+            checkIntField(cls, "Y", 2);
+
+            // check Point layout
+            MemoryLayout pointLayout = findLayout(cls, "Point");
+            assertNotNull(pointLayout);
+            checkFieldABIType(pointLayout, "i",  Type.INT);
+            checkFieldABIType(pointLayout, "j",  Type.INT);
+
+            // check Point3D layout
+            MemoryLayout point3DLayout = findLayout(cls, "Point3D");
+            assertNotNull(point3DLayout);
+            checkFieldABIType(point3DLayout, "i",  Type.INT);
+            checkFieldABIType(point3DLayout, "j",  Type.INT);
+            checkFieldABIType(point3DLayout, "k",  Type.INT);
         } finally {
             deleteDir(repeatedDeclsOutput);
         }
     }
 }
diff a/test/jdk/tools/jextract/repeatedDecls.h b/test/jdk/tools/jextract/repeatedDecls.h
--- a/test/jdk/tools/jextract/repeatedDecls.h
+++ b/test/jdk/tools/jextract/repeatedDecls.h
@@ -26,11 +26,15 @@
 
 int i;
 int i;
 
 void func(int);
-void func(int);
+void func(int abc);
+void func(int xyz);
+void func2(int);
+void func2(int abc);
+void func2(int xyz);
 
 struct Point;
 struct Point {
    int i;
    int j;
