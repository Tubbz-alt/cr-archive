diff a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/internal/jextract/impl/DeclarationImpl.java
@@ -29,10 +29,11 @@
 import java.lang.constant.Constable;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import jdk.incubator.foreign.MemoryLayout;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Position;
@@ -83,21 +84,29 @@
         return withAttributes(attrs);
     }
 
     abstract protected Declaration withAttributes(Map<String, List<Constable>> attrs);
 
-    public static class VariableImpl extends DeclarationImpl implements Declaration.Variable {
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof Declaration)) return false;
+        Declaration decl = (Declaration) o;
+        return name().equals(decl.name());
+    }
+
+    public static final class VariableImpl extends DeclarationImpl implements Declaration.Variable {
 
         final Variable.Kind kind;
         final Type type;
         final Optional<MemoryLayout> layout;
 
         private VariableImpl(Type type, Optional<MemoryLayout> layout, Variable.Kind kind, String name, Position pos, Map<String, List<Constable>> attrs) {
             super(name, pos, attrs);
-            this.kind = kind;
-            this.type = type;
-            this.layout = layout;
+            this.kind = Objects.requireNonNull(kind);
+            this.type = Objects.requireNonNull(type);
+            this.layout = Objects.requireNonNull(layout);
         }
 
         public VariableImpl(Type type, Variable.Kind kind, String name, Position pos) {
             this(type, LayoutUtils.getLayout(type), kind, name, pos, null);
         }
@@ -133,25 +142,40 @@
 
         @Override
         public Variable stripAttributes() {
             return new VariableImpl(type, layout, kind, name(), pos(), null);
         }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (!(o instanceof Declaration.Variable)) return false;
+            if (!super.equals(o)) return false;
+            Declaration.Variable variable = (Declaration.Variable) o;
+            return kind == variable.kind() &&
+                    type.equals(variable.type());
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(kind, type);
+        }
     }
 
-    public static class FunctionImpl extends DeclarationImpl implements Declaration.Function {
+    public static final class FunctionImpl extends DeclarationImpl implements Declaration.Function {
 
         final List<Variable> params;
         final Type.Function type;
 
         public FunctionImpl(Type.Function type, List<Variable> params, String name, Position pos) {
             this(type, params, name, pos, null);
         }
 
         public FunctionImpl(Type.Function type, List<Variable> params, String name, Position pos, Map<String, List<Constable>> attrs) {
             super(name, pos, attrs);
-            this.params = params;
-            this.type = type;
+            this.params = Objects.requireNonNull(params);
+            this.type = Objects.requireNonNull(type);
         }
 
         @Override
         public <R, D> R accept(Visitor<R, D> visitor, D data) {
             return visitor.visitFunction(this, data);
@@ -174,10 +198,24 @@
 
         @Override
         public Function stripAttributes() {
             return new FunctionImpl(type, params, name(), pos(), null);
         }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (!(o instanceof Declaration.Function)) return false;
+            if (!super.equals(o)) return false;
+            Declaration.Function function = (Declaration.Function) o;
+            return type.equals(function.type());
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(params, type);
+        }
     }
 
     public static class ScopedImpl extends DeclarationImpl implements Declaration.Scoped {
 
         private final Scoped.Kind kind;
@@ -193,13 +231,13 @@
         }
 
         ScopedImpl(Kind kind, Optional<MemoryLayout> optLayout, List<Declaration> declarations,
                 String name, Position pos, Map<String, List<Constable>> attrs) {
             super(name, pos, attrs);
-            this.kind = kind;
-            this.declarations = declarations;
-            this.optLayout = optLayout;
+            this.kind = Objects.requireNonNull(kind);
+            this.declarations = Objects.requireNonNull(declarations);
+            this.optLayout = Objects.requireNonNull(optLayout);
         }
 
         @Override
         public <R, D> R accept(Visitor<R, D> visitor, D data) {
             return visitor.visitScoped(this, data);
@@ -227,25 +265,40 @@
 
         @Override
         public Scoped stripAttributes() {
             return new ScopedImpl(kind, optLayout, declarations, name(), pos(), null);
         }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (!(o instanceof Declaration.Scoped)) return false;
+            if (!super.equals(o)) return false;
+            Declaration.Scoped scoped = (Declaration.Scoped) o;
+            return kind == scoped.kind() &&
+                    declarations.equals(scoped.members());
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(kind, declarations);
+        }
     }
 
-    public static class ConstantImpl extends DeclarationImpl implements Declaration.Constant {
+    public static final class ConstantImpl extends DeclarationImpl implements Declaration.Constant {
 
         final Object value;
         final Type type;
 
         public ConstantImpl(Type type, Object value, String name, Position pos) {
             this(type, value, name, pos, null);
         }
 
         public ConstantImpl(Type type, Object value, String name, Position pos, Map<String, List<Constable>> attrs) {
             super(name, pos, attrs);
-            this.value = value;
-            this.type = type;
+            this.value = Objects.requireNonNull(value);
+            this.type = Objects.requireNonNull(type);
         }
 
         @Override
         public <R, D> R accept(Visitor<R, D> visitor, D data) {
             return visitor.visitConstant(this, data);
@@ -268,7 +321,22 @@
 
         @Override
         public Constant stripAttributes() {
             return new ConstantImpl(type, value, name(), pos(), null);
         }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (!(o instanceof Declaration.Constant)) return false;
+            if (!super.equals(o)) return false;
+            Declaration.Constant constant = (Declaration.Constant) o;
+            return value.equals(constant.value()) &&
+                    type.equals(constant.type());
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(value, type);
+        }
     }
 }
