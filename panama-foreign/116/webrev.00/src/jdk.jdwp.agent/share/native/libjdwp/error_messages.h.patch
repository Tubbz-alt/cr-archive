diff a/src/jdk.jdwp.agent/share/native/libjdwp/error_messages.h b/src/jdk.jdwp.agent/share/native/libjdwp/error_messages.h
--- a/src/jdk.jdwp.agent/share/native/libjdwp/error_messages.h
+++ b/src/jdk.jdwp.agent/share/native/libjdwp/error_messages.h
@@ -40,39 +40,34 @@
 
 const char * jvmtiErrorText(jvmtiError);
 const char * eventText(int);
 const char * jdwpErrorText(jdwpError);
 
-/* Use THIS_FILE when it is available. */
-#ifndef THIS_FILE
-    #define THIS_FILE __FILE__
-#endif
-
 #define EXIT_ERROR(error, msg) \
         { \
                 print_message(stderr, "JDWP exit error ", "\n", \
                         "%s(%d): %s [%s:%d]", \
                         jvmtiErrorText((jvmtiError)error), error, (msg==NULL?"":msg), \
-                        THIS_FILE, __LINE__); \
+                        __FILE__, __LINE__); \
                 debugInit_exit((jvmtiError)error, msg); \
         }
 
 #define JDI_ASSERT(expression) \
 do { \
     if (gdata && gdata->assertOn && !(expression)) { \
-        jdiAssertionFailed(THIS_FILE, __LINE__, #expression); \
+        jdiAssertionFailed(__FILE__, __LINE__, #expression); \
     } \
 } while (0)
 
 #define JDI_ASSERT_MSG(expression, msg) \
 do { \
     if (gdata && gdata->assertOn && !(expression)) { \
-        jdiAssertionFailed(THIS_FILE, __LINE__, msg); \
+        jdiAssertionFailed(__FILE__, __LINE__, msg); \
     } \
 } while (0)
 
 #define JDI_ASSERT_FAILED(msg) \
-   jdiAssertionFailed(THIS_FILE, __LINE__, msg)
+   jdiAssertionFailed(__FILE__, __LINE__, msg)
 
 void do_pause(void);
 
 #endif
