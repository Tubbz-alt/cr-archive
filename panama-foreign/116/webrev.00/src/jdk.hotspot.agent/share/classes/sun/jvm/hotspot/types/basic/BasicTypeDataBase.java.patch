diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/types/basic/BasicTypeDataBase.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/types/basic/BasicTypeDataBase.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/types/basic/BasicTypeDataBase.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/types/basic/BasicTypeDataBase.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -48,15 +48,15 @@
 
 public class BasicTypeDataBase implements TypeDataBase {
   private MachineDescription machDesc;
   private VtblAccess vtblAccess;
   /** Maps strings to Type objects. This does not contain the primitive types. */
-  private Map nameToTypeMap = new HashMap();
+  private Map<String, Type> nameToTypeMap = new HashMap<>();
   /** Maps strings to Integers, used for enums, etc. */
-  private Map nameToIntConstantMap = new HashMap();
+  private Map<String, Integer> nameToIntConstantMap = new HashMap<>();
   /** Maps strings to Longs, used for 32/64-bit constants, etc. */
-  private Map nameToLongConstantMap = new HashMap();
+  private Map<String, Long> nameToLongConstantMap = new HashMap<>();
   /** Primitive types. */
   private Type jbooleanType;
   private Type jbyteType;
   private Type jcharType;
   private Type jdoubleType;
@@ -154,14 +154,14 @@
 
   public long getOopSize() {
     return VM.getVM().getOopSize();
   }
 
-  HashMap typeToVtbl = new HashMap();
+  Map<Type, Address> typeToVtbl = new HashMap<>();
 
   private Address vtblForType(Type type) {
-    Address vtblAddr = (Address)typeToVtbl.get(type);
+    Address vtblAddr = typeToVtbl.get(type);
     if (vtblAddr == null) {
       vtblAddr = vtblAccess.getVtblForType(type);
       if (vtblAddr != null) {
         typeToVtbl.put(type, vtblAddr);
       }
@@ -466,11 +466,11 @@
   public void addIntConstant(String name, int value) {
     if (nameToIntConstantMap.get(name) != null) {
       throw new RuntimeException("int constant of name \"" + name + "\" already present");
     }
 
-    nameToIntConstantMap.put(name, new Integer(value));
+    nameToIntConstantMap.put(name, value);
   }
 
   /** This method should only be used by the builder of the
       TypeDataBase. Throws a RuntimeException if an integer constant
       with this name was not present. */
@@ -489,11 +489,11 @@
   public void addLongConstant(String name, long value) {
     if (nameToLongConstantMap.get(name) != null) {
       throw new RuntimeException("long constant of name \"" + name + "\" already present");
     }
 
-    nameToLongConstantMap.put(name, new Long(value));
+    nameToLongConstantMap.put(name, value);
   }
 
   /** This method should only be used by the builder of the
       TypeDataBase. Throws a RuntimeException if a long constant with
       this name was not present. */
