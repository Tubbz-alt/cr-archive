diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/JavaThreadsPanel.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/JavaThreadsPanel.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/JavaThreadsPanel.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/JavaThreadsPanel.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -43,10 +43,12 @@
 
 import sun.jvm.hotspot.ui.action.*;
 
 import com.sun.java.swing.ui.*;
 import com.sun.java.swing.action.*;
+import sun.jvm.hotspot.utilities.Observable;
+import sun.jvm.hotspot.utilities.Observer;
 
 /**
  * This panel contains a JTable which displays the list of Java
  * threads as their native thread identifiers combined with their
  * Java names. It allows selection and examination of any of the
@@ -54,11 +56,11 @@
  */
 public class JavaThreadsPanel extends SAPanel implements ActionListener {
     private JavaThreadsTableModel dataModel;
     private StatusBar statusBar;
     private JTable     threadTable;
-    private java.util.List<CachedThread> cachedThreads = new ArrayList();
+    private java.util.List<CachedThread> cachedThreads = new ArrayList<>();
     private static AddressField crashThread;
 
 
     static {
         VM.registerVMInitializedObserver(
@@ -263,13 +265,13 @@
      * Encapsulates the set of threads in a table model
      */
     private class JavaThreadsTableModel extends AbstractTableModel {
         private String[] columnNames = { "OS Thread ID", "Java Thread Name" };
 
-        private java.util.List elements;
+        private java.util.List<CachedThread> elements;
 
-        public JavaThreadsTableModel(java.util.List threads) {
+        public JavaThreadsTableModel(java.util.List<CachedThread> threads) {
             this.elements = threads;
         }
 
         public int getColumnCount() {
             return columnNames.length;
@@ -301,20 +303,20 @@
         public JavaThread getJavaThread(int index) {
             return getRow(index).getThread();
         }
 
         private CachedThread getRow(int row) {
-            return (CachedThread)elements.get(row);
+            return elements.get(row);
         }
 
         private String threadIDAt(int index) {
-            return ((CachedThread) cachedThreads.get(index)).getThreadID();
+            return cachedThreads.get(index).getThreadID();
         }
 
         private String threadNameAt(int index) {
             try {
-                return ((CachedThread) cachedThreads.get(index)).getThreadName();
+                return cachedThreads.get(index).getThreadName();
             } catch (AddressException e) {
                 return "<Error: AddressException>";
             } catch (NullPointerException e) {
                 return "<Error: NullPointerException>";
             }
