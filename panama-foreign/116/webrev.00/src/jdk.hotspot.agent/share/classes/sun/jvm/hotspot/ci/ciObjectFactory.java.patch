diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ci/ciObjectFactory.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ci/ciObjectFactory.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ci/ciObjectFactory.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ci/ciObjectFactory.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -29,10 +29,12 @@
 import sun.jvm.hotspot.debugger.*;
 import sun.jvm.hotspot.runtime.*;
 import sun.jvm.hotspot.utilities.*;
 import sun.jvm.hotspot.oops.*;
 import sun.jvm.hotspot.types.*;
+import sun.jvm.hotspot.utilities.Observable;
+import sun.jvm.hotspot.utilities.Observer;
 
 public class ciObjectFactory extends VMObject {
   static {
     VM.registerVMInitializedObserver(new Observer() {
         public void update(Observable o, Object data) {
@@ -61,17 +63,17 @@
   private static VirtualBaseConstructor<ciSymbol> ciSymbolConstructor;
 
   public static ciObject get(Address addr) {
     if (addr == null) return null;
 
-    return (ciObject)ciObjectConstructor.instantiateWrapperFor(addr);
+    return ciObjectConstructor.instantiateWrapperFor(addr);
   }
 
   public static ciMetadata getMetadata(Address addr) {
     if (addr == null) return null;
 
-    return (ciMetadata)ciMetadataConstructor.instantiateWrapperFor(addr);
+    return ciMetadataConstructor.instantiateWrapperFor(addr);
   }
 
   public GrowableArray<ciMetadata> objects() {
     return GrowableArray.create(ciMetadataField.getValue(getAddress()), ciMetadataConstructor);
   }
