diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/StreamMonitor.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/StreamMonitor.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/StreamMonitor.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/StreamMonitor.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -35,12 +35,12 @@
   private BufferedReader input;
   private boolean printStreamContents;
 
   private String  waitString;
   private boolean waitStringSeen;
-  private List    triggers = new LinkedList();
-  private List    triggersSeen = new LinkedList();
+  private List<Trigger> triggers = new LinkedList<>();
+  private List<Integer> triggersSeen = new LinkedList<>();
 
   private String  prefixString;
   private boolean printContents;
 
   private StringBuffer captureBuffer;
@@ -143,13 +143,13 @@
 
   /** Returns an List of java.lang.Integer objects indicating the
       values of the triggers seen since the last call to
       getTriggersSeen. If there were no triggers seen, returns an
       empty list; does not return null. */
-  public synchronized List getTriggersSeen() {
-    List tmpList = triggersSeen;
-    triggersSeen = new LinkedList();
+  public synchronized List<Integer> getTriggersSeen() {
+    List<Integer> tmpList = triggersSeen;
+    triggersSeen = new LinkedList<>();
     return tmpList;
   }
 
   /** Waits for the specified string to come in for the given period
       of time (measured in milliseconds). */
@@ -205,11 +205,11 @@
 
             // Check all triggers
             for (Iterator iter = triggers.iterator(); iter.hasNext(); ) {
               Trigger trigger = (Trigger) iter.next();
               if (trigger.matches(str)) {
-                triggersSeen.add(new Integer(trigger.triggerVal));
+                triggersSeen.add(trigger.triggerVal);
               }
             }
           }
         }
       } while (shouldContinue);
