diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/code/StubQueue.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/code/StubQueue.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/code/StubQueue.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/code/StubQueue.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2002, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -27,10 +27,12 @@
 import java.util.*;
 import sun.jvm.hotspot.debugger.*;
 import sun.jvm.hotspot.runtime.*;
 import sun.jvm.hotspot.types.*;
 import sun.jvm.hotspot.utilities.*;
+import sun.jvm.hotspot.utilities.Observable;
+import sun.jvm.hotspot.utilities.Observer;
 
 /** <P> A port of the VM's StubQueue. Note that the VM implicitly
     knows the type of the objects contained in each StubQueue because
     it passes in an instance of a StubInterface to the StubQueue's
     constructor; the goal in the VM was to save space in the generated
@@ -51,11 +53,11 @@
   private static CIntegerField queueEndField;
   private static CIntegerField numberOfStubsField;
 
   // The type of the contained stubs (i.e., InterpreterCodelet,
   // ICStub). Must be a subclass of type Stub.
-  private Class stubType;
+  private Class<?> stubType;
 
   static {
     VM.registerVMInitializedObserver(new Observer() {
         public void update(Observable o, Object data) {
           initialize(VM.getVM().getTypeDataBase());
