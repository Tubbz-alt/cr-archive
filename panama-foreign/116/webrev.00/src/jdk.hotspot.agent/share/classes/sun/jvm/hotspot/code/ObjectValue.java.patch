diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/code/ObjectValue.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/code/ObjectValue.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/code/ObjectValue.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/code/ObjectValue.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -31,27 +31,27 @@
 import sun.jvm.hotspot.utilities.*;
 
 /** An ObjectValue describes an object eliminated by escape analysis. */
 
 public class ObjectValue extends ScopeValue {
-  private int        id;
-  private ScopeValue klass;
-  private List       fieldsValue; // ArrayList<ScopeValue>
+  private int              id;
+  private ScopeValue       klass;
+  private List<ScopeValue> fieldsValue;
 
   // Field "boolean visited" is not implemented here since
   // it is used only a during debug info creation.
 
   public ObjectValue(int id) {
     this.id = id;
     klass   = null;
-    fieldsValue = new ArrayList();
+    fieldsValue = new ArrayList<>();
   }
 
   public boolean isObject() { return true; }
   public int id() { return id; }
   public ScopeValue getKlass() { return klass; }
-  public List getFieldsValue() { return fieldsValue; }
+  public List<ScopeValue> getFieldsValue() { return fieldsValue; }
   public ScopeValue getFieldAt(int i) { return (ScopeValue)fieldsValue.get(i); }
   public int fieldsSize() { return fieldsValue.size(); }
 
   // Field "value" is always NULL here since it is used
   // only during deoptimization of a compiled frame
