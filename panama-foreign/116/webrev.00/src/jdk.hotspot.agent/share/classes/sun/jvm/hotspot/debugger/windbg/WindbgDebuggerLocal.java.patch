diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/windbg/WindbgDebuggerLocal.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/windbg/WindbgDebuggerLocal.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/windbg/WindbgDebuggerLocal.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/windbg/WindbgDebuggerLocal.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -57,19 +57,19 @@
   private boolean   attached;
   private boolean   isCore;
 
   // Symbol lookup support
   // This is a map of library names to DLLs
-  private Map nameToDllMap;
+  private Map<String, DLL> nameToDllMap;
 
   // C/C++ debugging support
-  private List/*<LoadObject>*/ loadObjects;
+  private List<LoadObject> loadObjects;
   private CDebugger cdbg;
 
   // thread access
-  private Map threadIntegerRegisterSet;
-  private List threadList;
+  private Map<Long, long[]> threadIntegerRegisterSet;
+  private List<ThreadProxy> threadList;
 
   // windbg native interface pointers
 
   private long ptrIDebugClient;
   private long ptrIDebugControl;
@@ -135,11 +135,11 @@
   public boolean hasProcessList() throws DebuggerException {
     return false;
   }
 
   /** From the Debugger interface via JVMDebugger */
-  public List getProcessList() throws DebuggerException {
+  public List<ProcessInfo> getProcessList() throws DebuggerException {
     return null;
   }
 
 
   /** From the Debugger interface via JVMDebugger */
@@ -156,11 +156,11 @@
     attach0(executableName, coreFileName);
     attached = true;
     isCore = true;
   }
 
-  public List getLoadObjectList() {
+  public List<LoadObject> getLoadObjectList() {
     requireAttach();
     return loadObjects;
   }
 
   /** From the Debugger interface via JVMDebugger */
@@ -339,24 +339,24 @@
   // Thread context access
   //
 
   private synchronized void setThreadIntegerRegisterSet(long threadId,
                                                long[] regs) {
-    threadIntegerRegisterSet.put(new Long(threadId), regs);
+    threadIntegerRegisterSet.put(threadId, regs);
   }
 
   private synchronized void addThread(long sysId) {
     threadList.add(threadFactory.createThreadWrapper(sysId));
   }
 
   public synchronized long[] getThreadIntegerRegisterSet(long threadId)
     throws DebuggerException {
     requireAttach();
-    return (long[]) threadIntegerRegisterSet.get(new Long(threadId));
+    return (long[]) threadIntegerRegisterSet.get(threadId);
   }
 
-  public synchronized List getThreadList() throws DebuggerException {
+  public synchronized List<ThreadProxy> getThreadList() throws DebuggerException {
     requireAttach();
     return threadList;
   }
 
   private String findFullPath(String file) {
@@ -436,14 +436,14 @@
     }
   }
 
   private void attachInit() {
     checkAttached();
-    loadObjects = new ArrayList();
-    nameToDllMap = new HashMap();
-    threadIntegerRegisterSet = new HashMap();
-    threadList = new ArrayList();
+    loadObjects = new ArrayList<>();
+    nameToDllMap = new HashMap<>();
+    threadIntegerRegisterSet = new HashMap<>();
+    threadList = new ArrayList<>();
   }
 
   private void resetNativePointers() {
     ptrIDebugClient          = 0L;
     ptrIDebugControl         = 0L;
@@ -537,11 +537,11 @@
       */
 
     String dbgengPath   = null;
     String dbghelpPath  = null;
     String saprocPath = null;
-    List   searchList   = new ArrayList();
+    List<String> searchList = new ArrayList<>();
 
     boolean loadLibraryDEBUG =
         System.getProperty("sun.jvm.hotspot.loadLibrary.DEBUG") != null;
 
     {
