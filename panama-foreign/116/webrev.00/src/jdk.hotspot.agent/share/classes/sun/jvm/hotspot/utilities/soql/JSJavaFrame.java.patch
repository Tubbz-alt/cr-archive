diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaFrame.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaFrame.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaFrame.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaFrame.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -47,13 +47,13 @@
         int fieldID = getFieldID(name);
         switch (fieldID) {
         case FIELD_METHOD:
             return getMethod();
         case FIELD_BCI:
-            return new Integer(getBCI());
+            return getBCI();
         case FIELD_LINE_NUMBER:
-            return new Integer(getLineNumber());
+            return getLineNumber();
         case FIELD_LOCALS:
             return getLocals();
         case FIELD_THIS_OBJECT:
             return getThisObject();
         case FIELD_THREAD:
@@ -98,13 +98,13 @@
         buf.append(')');
         return buf.toString();
     }
 
     //-- Internals only below this point
-    private static Map fields = new HashMap();
+    private static Map<String, Integer> fields = new HashMap<>();
     private static void addField(String name, int fieldId) {
-        fields.put(name, new Integer(fieldId));
+        fields.put(name, fieldId);
     }
 
     private static int getFieldID(String name) {
         Integer res = (Integer) fields.get(name);
         return (res != null)? res.intValue() : FIELD_UNDEFINED;
@@ -137,22 +137,22 @@
         }
     }
 
     private synchronized JSMap getLocals() {
         if (localsCache == null) {
-            Map map = new HashMap();
+            Map<String, Object> map = new HashMap<>();
             localsCache = factory.newJSMap(map);
             StackValueCollection values = jvf.getLocals();
             Method method = jvf.getMethod();
             if (method.isNative() || ! method.hasLocalVariableTable() ||
                 values == null) {
                 return localsCache;
             }
 
             LocalVariableTableElement[] localVars = method.getLocalVariableTable();
             int bci = getBCI();
-            List visibleVars = new ArrayList(0);
+            List<LocalVariableTableElement> visibleVars = new ArrayList<>(0);
             for (int i = 0; i < localVars.length; i++) {
                 LocalVariableTableElement cur = localVars[i];
                 int startBCI = cur.getStartBCI();
                 if (startBCI <= bci && bci < startBCI + cur.getLength()) {
                     visibleVars.add(cur);
@@ -168,25 +168,25 @@
 
                 String signature = method.getConstants().getSymbolAt(cur.getDescriptorCPIndex()).asString();
                 BasicType variableType = BasicType.charToBasicType(signature.charAt(0));
                 Object value = null;
                 if (variableType == BasicType.T_BOOLEAN) {
-                    value = Boolean.valueOf(values.booleanAt(slot));
+                    value = values.booleanAt(slot);
                 } else if (variableType == BasicType.T_CHAR) {
-                    value = new Character(values.charAt(slot));
+                    value = values.charAt(slot);
                 } else if (variableType == BasicType.T_FLOAT) {
-                    value = new Float(values.floatAt(slot));
+                    value = values.floatAt(slot);
                 } else if (variableType == BasicType.T_DOUBLE) {
-                    value = new Double(values.doubleAt(slot));
+                    value = values.doubleAt(slot);
                 } else if (variableType == BasicType.T_BYTE) {
-                    value = new Byte(values.byteAt(slot));
+                    value = values.byteAt(slot);
                 } else if (variableType == BasicType.T_SHORT) {
-                    value = new Short(values.shortAt(slot));
+                    value = values.shortAt(slot);
                 } else if (variableType == BasicType.T_INT) {
-                    value = new Integer(values.intAt(slot));
+                    value = values.intAt(slot);
                 } else if (variableType == BasicType.T_LONG) {
-                    value = new Long(values.longAt(slot));
+                    value = values.longAt(slot);
                 } else if (variableType == BasicType.T_OBJECT ||
                        variableType == BasicType.T_ARRAY) {
                     handle = values.oopHandleAt(slot);
                     value = factory.newJSJavaObject(heap.newOop(handle));
                 } else {
