diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaThread.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaThread.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaThread.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/soql/JSJavaThread.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, 2009, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -95,11 +95,11 @@
         return OopUtilities.threadOopGetName(getOop());
     }
 
     private synchronized JSList getFrames() {
         if (framesCache == null) {
-            final List list = new ArrayList(0);
+            final List<JavaVFrame> list = new ArrayList<>(0);
             if (jthread != null) {
                 JavaVFrame jvf = jthread.getLastJavaVFrameDbg();
                 while (jvf != null) {
                     list.add(jvf);
                     jvf = jvf.javaSender();
@@ -110,13 +110,13 @@
         return framesCache;
     }
 
     private synchronized JSList getOwnedMonitors() {
         if (monitorsCache == null) {
-            final List ownedMonitors = new ArrayList(0);
+            final List<Oop> ownedMonitors = new ArrayList<>(0);
             if (jthread != null) {
-                List lockedObjects = new ArrayList(); // List<OopHandle>
+                List<OopHandle> lockedObjects = new ArrayList<>();
 
                 ObjectMonitor waitingMonitor = jthread.getCurrentWaitingMonitor();
                 OopHandle waitingObj = null;
                 if (waitingMonitor != null) {
                    // save object of current wait() call (if any) for later comparison
@@ -130,13 +130,13 @@
                     pendingObj = pendingMonitor.object();
                 }
 
                 JavaVFrame frame = jthread.getLastJavaVFrameDbg();
                 while (frame != null) {
-                    List frameMonitors = frame.getMonitors();  // List<MonitorInfo>
-                    for (Iterator miItr = frameMonitors.iterator(); miItr.hasNext(); ) {
-                        MonitorInfo mi = (MonitorInfo) miItr.next();
+                    List<MonitorInfo> frameMonitors = frame.getMonitors();
+                    for (Iterator<MonitorInfo> miItr = frameMonitors.iterator(); miItr.hasNext(); ) {
+                        MonitorInfo mi = miItr.next();
 
                         if (mi.eliminated() && frame.isCompiledFrame()) {
                           continue; // skip eliminated monitor
                         }
                         OopHandle obj = mi.owner();
