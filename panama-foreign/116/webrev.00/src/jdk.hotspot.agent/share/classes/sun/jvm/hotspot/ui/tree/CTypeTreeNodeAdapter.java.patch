diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/tree/CTypeTreeNodeAdapter.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/tree/CTypeTreeNodeAdapter.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/tree/CTypeTreeNodeAdapter.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/tree/CTypeTreeNodeAdapter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -38,11 +38,11 @@
 public class CTypeTreeNodeAdapter extends FieldTreeNodeAdapter {
   final private Address addr;
   final private Type type;
   private CTypeFieldIdentifier[] fields = null;
 
-  private void collectFields(Type type, ArrayList list, boolean statics, boolean recurse) {
+  private void collectFields(Type type, ArrayList<CTypeFieldIdentifier> list, boolean statics, boolean recurse) {
     Type supertype = type.getSuperclass();
     if (supertype != null && recurse) {
       collectFields(supertype, list, statics, recurse);
     }
     Iterator i = type.getFields();
@@ -55,13 +55,13 @@
   }
 
 
   private CTypeFieldIdentifier[] getFields() {
     if (fields == null) {
-      ArrayList f = new ArrayList();
+      ArrayList<CTypeFieldIdentifier> f = new ArrayList<>();
       collectFields(type, f, false, true);
-      fields = (CTypeFieldIdentifier[]) f.toArray(new CTypeFieldIdentifier[0]);
+      fields = f.toArray(new CTypeFieldIdentifier[0]);
     }
     return fields;
   }
 
   static class CTypeFieldIdentifier extends FieldIdentifier {
@@ -95,24 +95,24 @@
 
   public CTypeTreeNodeAdapter(Type t) {
     super(null, false);
     type = t;
     addr = null;
-    ArrayList statics = new ArrayList();
+    ArrayList<CTypeFieldIdentifier> statics = new ArrayList<>();
     collectFields(type, statics, true, false);
-    fields = (CTypeFieldIdentifier[])statics.toArray(new CTypeFieldIdentifier[0]);
+    fields = statics.toArray(new CTypeFieldIdentifier[0]);
   }
 
   public CTypeTreeNodeAdapter(Iterator types) {
     super(null, false);
     addr = null;
     type = null;
-    ArrayList statics = new ArrayList();
+    ArrayList<CTypeFieldIdentifier> statics = new ArrayList<>();
     while (types.hasNext()) {
       collectFields((Type)types.next(), statics, true, false);
     }
-    fields = (CTypeFieldIdentifier[])statics.toArray(new CTypeFieldIdentifier[0]);
+    fields = statics.toArray(new CTypeFieldIdentifier[0]);
   }
 
   public int getChildCount() {
     return getFields().length;
   }
