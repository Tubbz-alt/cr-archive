diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/bsd/BsdDebuggerLocal.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/bsd/BsdDebuggerLocal.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/bsd/BsdDebuggerLocal.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/bsd/BsdDebuggerLocal.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -33,10 +33,11 @@
 import sun.jvm.hotspot.debugger.DebuggerException;
 import sun.jvm.hotspot.debugger.DebuggerUtilities;
 import sun.jvm.hotspot.debugger.MachineDescription;
 import sun.jvm.hotspot.debugger.NotInHeapException;
 import sun.jvm.hotspot.debugger.OopHandle;
+import sun.jvm.hotspot.debugger.ProcessInfo;
 import sun.jvm.hotspot.debugger.ReadResult;
 import sun.jvm.hotspot.debugger.ThreadProxy;
 import sun.jvm.hotspot.debugger.UnalignedAddressException;
 import sun.jvm.hotspot.debugger.UnmappedAddressException;
 import sun.jvm.hotspot.debugger.cdbg.CDebugger;
@@ -73,12 +74,12 @@
 
     // CDebugger support
     private BsdCDebugger cdbg;
 
     // threadList and loadObjectList are filled by attach0 method
-    private List threadList;
-    private List loadObjectList;
+    private List<ThreadProxy> threadList;
+    private List<LoadObject> loadObjectList;
 
     // called by native method lookupByAddress0
     private ClosestSymbol createClosestSymbol(String name, long offset) {
        return new ClosestSymbol(name, offset);
     }
@@ -228,11 +229,11 @@
     public boolean hasProcessList() throws DebuggerException {
         return false;
     }
 
     /** From the Debugger interface via JVMDebugger */
-    public List getProcessList() throws DebuggerException {
+    public List<ProcessInfo> getProcessList() throws DebuggerException {
         throw new DebuggerException("getProcessList not implemented yet");
     }
 
     private void checkAttached() throws DebuggerException {
         if (attached) {
@@ -264,12 +265,12 @@
     }
 
     /** From the Debugger interface via JVMDebugger */
     public synchronized void attach(int processID) throws DebuggerException {
         checkAttached();
-        threadList = new ArrayList();
-        loadObjectList = new ArrayList();
+        threadList = new ArrayList<>();
+        loadObjectList = new ArrayList<>();
         class AttachTask implements WorkerThreadTask {
            int pid;
            public void doit(BsdDebuggerLocal debugger) {
               debugger.attach0(pid);
               debugger.attached = true;
@@ -284,12 +285,12 @@
     }
 
     /** From the Debugger interface via JVMDebugger */
     public synchronized void attach(String execName, String coreName) {
         checkAttached();
-        threadList = new ArrayList();
-        loadObjectList = new ArrayList();
+        threadList = new ArrayList<>();
+        loadObjectList = new ArrayList<>();
         attach0(execName, coreName);
         attached = true;
         isCore = true;
         findABIVersion();
     }
@@ -534,17 +535,17 @@
       if (value == 0) return null;
       return new BsdAddress(this, value);
     }
 
     /** From the BsdCDebugger interface */
-    public List/*<ThreadProxy>*/ getThreadList() {
+    public List<ThreadProxy> getThreadList() {
       requireAttach();
       return threadList;
     }
 
     /** From the BsdCDebugger interface */
-    public List/*<LoadObject>*/ getLoadObjectList() {
+    public List<LoadObject> getLoadObjectList() {
       requireAttach();
       return loadObjectList;
     }
 
     /** From the BsdCDebugger interface */
