diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/Annotation.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/Annotation.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/Annotation.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/Annotation.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -36,14 +36,12 @@
     arbitrarily complex mechanism, supporting user interaction,
     etc. */
 
 public class Annotation {
   private Interval interval;
-  // List<String>
-  private java.util.List strings;
-  // List<Integer>
-  private java.util.List heights;
+  private java.util.List<String> strings;
+  private java.util.List<Integer> heights;
   private Color baseColor;
   private int width;
   private int height;
   private int x;
   private int y;
@@ -51,12 +49,12 @@
   /** The Annotation can handle the sense of lowAddress and
       highAddress being swapped. */
   public Annotation(Address lowAddress,
                     Address highAddress,
                     String s) {
-    strings = new ArrayList();
-    heights = new ArrayList();
+    strings = new ArrayList<>();
+    heights = new ArrayList<>();
     for (StringTokenizer tok = new StringTokenizer(s, "\n"); tok.hasMoreTokens(); ) {
       strings.add(tok.nextToken());
     }
     if (AddressOps.lessThan(highAddress, lowAddress)) {
       Address temp = lowAddress;
@@ -113,11 +111,11 @@
     for (Iterator iter = strings.iterator(); iter.hasNext(); ) {
       String s = (String) iter.next();
       Rectangle2D bounds = GraphicsUtilities.getStringBounds(s, g);
       width  =  Math.max(width, (int) bounds.getWidth());
       height += (int) bounds.getHeight();
-      heights.add(new Integer((int) bounds.getHeight()));
+      heights.add((int) bounds.getHeight());
     }
   }
 
   public int getWidth() {
     return width;
