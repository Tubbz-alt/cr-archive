diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/RobustOopDeterminator.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/RobustOopDeterminator.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/RobustOopDeterminator.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/RobustOopDeterminator.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -29,10 +29,12 @@
 import sun.jvm.hotspot.memory.*;
 import sun.jvm.hotspot.oops.Metadata;
 import sun.jvm.hotspot.oops.Klass;
 import sun.jvm.hotspot.runtime.*;
 import sun.jvm.hotspot.types.*;
+import sun.jvm.hotspot.utilities.Observable;
+import sun.jvm.hotspot.utilities.Observer;
 
 /** This class determines to the best of its ability, and in a
     reasonably robust fashion, whether a given pointer is an intact
     oop or not. It does this by checking the integrity of the
     metaclass hierarchy. This is only intended for use in the
@@ -72,12 +74,13 @@
       if (VM.getVM().isCompressedKlassPointersEnabled()) {
         Metadata.instantiateWrapperFor(oop.getCompKlassAddressAt(klassField.getOffset()));
       } else {
         Metadata.instantiateWrapperFor(klassField.getValue(oop));
       }
-          return true;
-        }
-    catch (AddressException e) {
+      return true;
+    } catch (AddressException e) {
+      return false;
+    } catch (WrongTypeException e) {
       return false;
     }
   }
 }
