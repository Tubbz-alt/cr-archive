diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/BasicHashtable.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/BasicHashtable.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/BasicHashtable.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/BasicHashtable.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -26,10 +26,12 @@
 
 import java.util.*;
 import sun.jvm.hotspot.debugger.*;
 import sun.jvm.hotspot.types.*;
 import sun.jvm.hotspot.runtime.*;
+import sun.jvm.hotspot.utilities.Observable;
+import sun.jvm.hotspot.utilities.Observer;
 
 // Superclass for symbol and string tables.
 
 public class BasicHashtable extends VMObject {
   static {
@@ -61,17 +63,17 @@
     if (Assert.ASSERTS_ENABLED) {
        Assert.that(i >= 0 && i < tableSize(), "Invalid bucket id");
     }
     Address tmp = bucketsField.getValue(addr);
     tmp = tmp.addOffsetTo(i * bucketSize);
-    HashtableBucket bucket = (HashtableBucket) VMObjectFactory.newObject(
+    HashtableBucket bucket = VMObjectFactory.newObject(
                                               HashtableBucket.class, tmp);
     return bucket.getEntry(getHashtableEntryClass());
   }
 
   // derived class may return Class<? extends BasicHashtableEntry>
-  protected Class getHashtableEntryClass() {
+  protected Class<? extends BasicHashtableEntry> getHashtableEntryClass() {
     return BasicHashtableEntry.class;
   }
 
   public BasicHashtable(Address addr) {
     super(addr);
