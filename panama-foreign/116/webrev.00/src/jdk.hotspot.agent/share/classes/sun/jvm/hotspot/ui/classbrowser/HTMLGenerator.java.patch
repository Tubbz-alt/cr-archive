diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/classbrowser/HTMLGenerator.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/classbrowser/HTMLGenerator.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/classbrowser/HTMLGenerator.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/ui/classbrowser/HTMLGenerator.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -1065,25 +1065,25 @@
         if (line != -1) {
             buf.append(", line = ");
             buf.append(Integer.toString(line));
         }
 
-        List locals = sd.getLocals();
+        List<ScopeValue> locals = sd.getLocals();
         if (locals != null) {
             buf.br();
             buf.append(tabs);
             buf.append(genHTMLForLocals(sd, locals));
         }
 
-        List expressions = sd.getExpressions();
+        List<ScopeValue> expressions = sd.getExpressions();
         if (expressions != null) {
             buf.br();
             buf.append(tabs);
             buf.append(genHTMLForExpressions(sd, expressions));
         }
 
-        List monitors = sd.getMonitors();
+        List<MonitorValue> monitors = sd.getMonitors();
         if (monitors != null) {
             buf.br();
             buf.append(tabs);
             buf.append(genHTMLForMonitors(sd, monitors));
         }
@@ -1095,18 +1095,18 @@
     protected void genScObjInfo(Formatter buf, Formatter tabs, ScopeDesc sd) {
         if (sd == null) {
             return;
         }
 
-        List objects = sd.getObjects();
+        List<ObjectValue> objects = sd.getObjects();
         if (objects == null) {
             return;
         }
         int length = objects.size();
         for (int i = 0; i < length; i++) {
             buf.append(tabs);
-            ObjectValue ov = (ObjectValue)objects.get(i);
+            ObjectValue ov = objects.get(i);
             buf.append("ScObj" + i);
             ScopeValue sv = ov.getKlass();
             if (Assert.ASSERTS_ENABLED) {
                 Assert.that(sv.isConstantOop(), "scalar replaced object klass must be constant oop");
             }
@@ -1350,16 +1350,16 @@
          buf.append("unknown scope value " + sv);
       }
       return buf.toString();
    }
 
-   protected String genHTMLForScopeValues(ScopeDesc sd, boolean locals, List values) {
+   protected String genHTMLForScopeValues(ScopeDesc sd, boolean locals, List<ScopeValue> values) {
       int length = values.size();
       Formatter buf = new Formatter(genHTML);
       buf.append(locals? "locals " : "expressions ");
       for (int i = 0; i < length; i++) {
-         ScopeValue sv = (ScopeValue) values.get(i);
+         ScopeValue sv = values.get(i);
          if (sv == null) {
             continue;
          }
          buf.append('(');
          if (locals) {
@@ -1385,24 +1385,24 @@
       }
 
       return buf.toString();
    }
 
-   protected String genHTMLForLocals(ScopeDesc sd, List locals) {
+   protected String genHTMLForLocals(ScopeDesc sd, List<ScopeValue> locals) {
       return genHTMLForScopeValues(sd, true, locals);
    }
 
-   protected String genHTMLForExpressions(ScopeDesc sd, List expressions) {
+   protected String genHTMLForExpressions(ScopeDesc sd, List<ScopeValue> expressions) {
       return genHTMLForScopeValues(sd, false, expressions);
    }
 
-   protected String genHTMLForMonitors(ScopeDesc sd, List monitors) {
+   protected String genHTMLForMonitors(ScopeDesc sd, List<MonitorValue> monitors) {
       int length = monitors.size();
       Formatter buf = new Formatter(genHTML);
       buf.append("monitors ");
       for (int i = 0; i < length; i++) {
-         MonitorValue mv = (MonitorValue) monitors.get(i);
+         MonitorValue mv = monitors.get(i);
          if (mv == null) {
             continue;
          }
          buf.append("(owner = ");
          ScopeValue owner = mv.owner();
