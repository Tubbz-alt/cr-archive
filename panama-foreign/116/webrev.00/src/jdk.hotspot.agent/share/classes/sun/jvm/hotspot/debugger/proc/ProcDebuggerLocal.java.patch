diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/proc/ProcDebuggerLocal.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/proc/ProcDebuggerLocal.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/proc/ProcDebuggerLocal.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/proc/ProcDebuggerLocal.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -132,30 +132,30 @@
      * parsing of its output */
     public boolean hasProcessList() throws DebuggerException {
         return false;
     }
 
-    public List getProcessList() throws DebuggerException {
+    public List<ProcessInfo> getProcessList() throws DebuggerException {
         throw new DebuggerException("Not yet supported");
     }
 
 
     /** From the Debugger interface via JVMDebugger */
     public synchronized void attach(int processID) throws DebuggerException {
         checkAttached();
         isCore = false;
-        attach0(new Integer(processID).toString());
+        attach0(Integer.toString(processID));
         attached = true;
         suspended = true;
     }
 
     /** From the Debugger interface via JVMDebugger */
     public synchronized void attach
     (String executableName, String coreFileName) throws DebuggerException {
         checkAttached();
         isCore = true;
-        topFrameCache = new HashMap();
+        topFrameCache = new HashMap<>();
         attach0(executableName, coreFileName);
         attached = true;
         suspended = true;
     }
 
@@ -437,27 +437,27 @@
         if (value == 0) return null;
         return new ProcAddress(this, value);
     }
 
     /** From the ProcDebugger interface */
-    public synchronized List getThreadList() throws DebuggerException {
+    public synchronized List<ThreadProxy> getThreadList() throws DebuggerException {
         requireAttach();
-        List res = null;
+        List<ThreadProxy> res = null;
         if (isCore && (threadListCache != null)) {
             res = threadListCache;
         } else {
-            res = new ArrayList();
+            res = new ArrayList<>();
             fillThreadList0(res);
             if (isCore) {
                 threadListCache = res;
             }
         }
         return res;
     }
 
     /** From the ProcDebugger interface */
-    public synchronized List getLoadObjectList() throws DebuggerException {
+    public synchronized List<LoadObject> getLoadObjectList() throws DebuggerException {
         requireAttach();
         if (!suspended) {
             throw new DebuggerException("Process not suspended");
         }
 
@@ -503,20 +503,20 @@
     //------------- Internals only below this point --------------------
     //
     //
 
     private void updateLoadObjectCache() {
-        List res = new ArrayList();
-        nameToDsoMap = new HashMap();
+        List<LoadObject> res = new ArrayList<>();
+        nameToDsoMap = new HashMap<>();
         fillLoadObjectList0(res);
         loadObjectCache = sortLoadObjects(res);
     }
 
     // sort load objects by base address
-    private static List sortLoadObjects(List in) {
+    private static List<LoadObject> sortLoadObjects(List<LoadObject> in) {
         // sort the list by base address
-        Object[] arr = in.toArray();
+        LoadObject[] arr = in.toArray(new LoadObject[0]);
         Arrays.sort(arr, loadObjectComparator);
         return Arrays.asList(arr);
     }
 
     private long lookupByName(String objectName, String symbolName)
@@ -612,11 +612,11 @@
     private native int getRemoteProcessAddressSize0() throws DebuggerException;
     private native int getPageSize0() throws DebuggerException;
 
     // threads, stacks
     private native long[] getThreadIntegerRegisterSet0(long tid) throws DebuggerException;
-    private native void   fillThreadList0(List l) throws DebuggerException;
+    private native void   fillThreadList0(List<ThreadProxy> l) throws DebuggerException;
 
     // fills stack frame list given reg set of the top frame and top frame
     private native ProcCFrame fillCFrameList0(long[] regs) throws DebuggerException;
 
     // helper called by fillCFrameList0
@@ -627,11 +627,11 @@
         }
         return sender;
     }
 
     // shared objects
-    private native void fillLoadObjectList0(List l) throws DebuggerException;
+    private native void fillLoadObjectList0(List<LoadObject> l) throws DebuggerException;
 
     // helper called by fillLoadObjectList0
     private LoadObject createLoadObject(String fileName, long textsize, long base) {
         File f = new File(fileName);
         Address baseAddr = newAddress(base);
@@ -687,14 +687,14 @@
     private int pcRegIndex;
     private int fpRegIndex;
 
     // Symbol lookup support
     // This is a map of library names to DSOs
-    private Map nameToDsoMap;  // Map<String, SharedObject>
+    private Map<String, SharedObject> nameToDsoMap;
 
     // C/C++ debugging support
-    private List/*<LoadObject>*/ loadObjects;
+    private List<LoadObject> loadObjects;
     private CDebugger cdbg;
 
     // ProcessControl support
     private boolean suspended;
 
@@ -720,9 +720,9 @@
     private boolean attached = false;
     private boolean isCore;
 
     // for core files, we cache load object list, thread list, top frames etc.
     // for processes we cache load object list and sync. it during suspend.
-    private List threadListCache;
-    private List loadObjectCache;
-    private Map  topFrameCache;      // Map<ThreadProxy, CFrame>
+    private List<ThreadProxy> threadListCache;
+    private List<LoadObject> loadObjectCache;
+    private Map<ThreadProxy, CFrame> topFrameCache;
 }
