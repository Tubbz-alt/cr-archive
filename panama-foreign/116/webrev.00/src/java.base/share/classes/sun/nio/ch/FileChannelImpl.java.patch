diff a/src/java.base/share/classes/sun/nio/ch/FileChannelImpl.java b/src/java.base/share/classes/sun/nio/ch/FileChannelImpl.java
--- a/src/java.base/share/classes/sun/nio/ch/FileChannelImpl.java
+++ b/src/java.base/share/classes/sun/nio/ch/FileChannelImpl.java
@@ -43,15 +43,15 @@
 import java.nio.channels.SelectableChannel;
 import java.nio.channels.WritableByteChannel;
 import java.util.Objects;
 
 import jdk.internal.access.JavaIOFileDescriptorAccess;
-import jdk.internal.access.JavaNioAccess;
 import jdk.internal.access.SharedSecrets;
 import jdk.internal.misc.ExtendedMapMode;
 import jdk.internal.misc.Unsafe;
 import jdk.internal.misc.VM;
+import jdk.internal.misc.VM.BufferPool;
 import jdk.internal.ref.Cleaner;
 import jdk.internal.ref.CleanerFactory;
 
 import jdk.internal.access.foreign.UnmapperProxy;
 
@@ -238,12 +238,11 @@
     }
 
     public long read(ByteBuffer[] dsts, int offset, int length)
         throws IOException
     {
-        if ((offset < 0) || (length < 0) || (offset > dsts.length - length))
-            throw new IndexOutOfBoundsException();
+        Objects.checkFromIndexSize(offset, length, dsts.length);
         ensureOpen();
         if (!readable)
             throw new NonReadableChannelException();
         synchronized (positionLock) {
             if (direct)
@@ -295,12 +294,11 @@
     }
 
     public long write(ByteBuffer[] srcs, int offset, int length)
         throws IOException
     {
-        if ((offset < 0) || (length < 0) || (offset > srcs.length - length))
-            throw new IndexOutOfBoundsException();
+        Objects.checkFromIndexSize(offset, length, srcs.length);
         ensureOpen();
         if (!writable)
             throw new NonWritableChannelException();
         synchronized (positionLock) {
             if (direct)
@@ -787,15 +785,15 @@
     public int read(ByteBuffer dst, long position) throws IOException {
         if (dst == null)
             throw new NullPointerException();
         if (position < 0)
             throw new IllegalArgumentException("Negative position");
+        ensureOpen();
         if (!readable)
             throw new NonReadableChannelException();
         if (direct)
             Util.checkChannelPositionAligned(position, alignment);
-        ensureOpen();
         if (nd.needsPositionLock()) {
             synchronized (positionLock) {
                 return readInternal(dst, position);
             }
         } else {
@@ -827,15 +825,15 @@
     public int write(ByteBuffer src, long position) throws IOException {
         if (src == null)
             throw new NullPointerException();
         if (position < 0)
             throw new IllegalArgumentException("Negative position");
+        ensureOpen();
         if (!writable)
             throw new NonWritableChannelException();
         if (direct)
             Util.checkChannelPositionAligned(position, alignment);
-        ensureOpen();
         if (nd.needsPositionLock()) {
             synchronized (positionLock) {
                 return writeInternal(src, position);
             }
         } else {
@@ -1171,12 +1169,12 @@
 
     /**
      * Invoked by sun.management.ManagementFactoryHelper to create the management
      * interface for mapped buffers.
      */
-    public static JavaNioAccess.BufferPool getMappedBufferPool() {
-        return new JavaNioAccess.BufferPool() {
+    public static BufferPool getMappedBufferPool() {
+        return new BufferPool() {
             @Override
             public String getName() {
                 return "mapped";
             }
             @Override
@@ -1196,12 +1194,12 @@
 
     /**
      * Invoked by sun.management.ManagementFactoryHelper to create the management
      * interface for sync mapped buffers.
      */
-    public static JavaNioAccess.BufferPool getSyncMappedBufferPool() {
-        return new JavaNioAccess.BufferPool() {
+    public static BufferPool getSyncMappedBufferPool() {
+        return new BufferPool() {
             @Override
             public String getName() {
                 return "mapped - 'non-volatile memory'";
             }
             @Override
