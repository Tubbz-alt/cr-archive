diff a/src/java.base/share/classes/java/util/jar/JarFile.java b/src/java.base/share/classes/java/util/jar/JarFile.java
--- a/src/java.base/share/classes/java/util/jar/JarFile.java
+++ b/src/java.base/share/classes/java/util/jar/JarFile.java
@@ -429,14 +429,10 @@
             }
         }
         return man;
     }
 
-    private String[] getMetaInfEntryNames() {
-        return JUZFA.getMetaInfEntryNames((ZipFile)this);
-    }
-
     /**
      * Returns the {@code JarEntry} for the given base entry name or
      * {@code null} if not found.
      *
      * <p>If this {@code JarFile} is a multi-release jar file and is configured
@@ -502,15 +498,19 @@
      * If a subclass overrides this method, assure that the override method
      * invokes {@code super.getEntry(name)} to obtain all versioned entries.
      * </div>
      */
     public ZipEntry getEntry(String name) {
-        JarFileEntry je = getEntry0(name);
         if (isMultiRelease()) {
-            return getVersionedEntry(name, je);
+            JarEntry je = getVersionedEntry(name, null);
+            if (je == null) {
+                je = getEntry0(name);
+            }
+            return je;
+        } else {
+            return getEntry0(name);
         }
-        return je;
     }
 
     /**
      * Returns an enumeration of the jar file entries.
      *
@@ -596,25 +596,33 @@
             return name.substring(index + 1);
         }
         return name;
     }
 
-    private JarEntry getVersionedEntry(String name, JarEntry je) {
-        if (BASE_VERSION_FEATURE < versionFeature) {
-            if (!name.startsWith(META_INF)) {
+    private JarEntry getVersionedEntry(String name, JarEntry defaultEntry) {
+        if (!name.startsWith(META_INF)) {
+            int[] versions = JUZFA.getMetaInfVersions(this);
+            if (BASE_VERSION_FEATURE < versionFeature && versions.length > 0) {
                 // search for versioned entry
-                int v = versionFeature;
-                while (v > BASE_VERSION_FEATURE) {
-                    JarFileEntry vje = getEntry0(META_INF_VERSIONS + v + "/" + name);
+                for (int i = versions.length - 1; i >= 0; i--) {
+                    int version = versions[i];
+                    // skip versions above versionFeature
+                    if (version > versionFeature) {
+                        continue;
+                    }
+                    // skip versions below base version
+                    if (version < BASE_VERSION_FEATURE) {
+                        break;
+                    }
+                    JarFileEntry vje = getEntry0(META_INF_VERSIONS + version + "/" + name);
                     if (vje != null) {
                         return vje.withBasename(name);
                     }
-                    v--;
                 }
             }
         }
-        return je;
+        return defaultEntry;
     }
 
     // placeholder for now
     String getRealName(JarEntry entry) {
         return entry.getRealName();
@@ -705,11 +713,11 @@
         if (jv != null) {
             return;
         }
 
         if (verify) {
-            String[] names = getMetaInfEntryNames();
+            String[] names = JUZFA.getMetaInfEntryNames(this);
             if (names != null) {
                 for (String nameLower : names) {
                     String name = nameLower.toUpperCase(Locale.ENGLISH);
                     if (name.endsWith(".DSA") ||
                         name.endsWith(".RSA") ||
@@ -736,11 +744,11 @@
     private void initializeVerifier() {
         ManifestEntryVerifier mev = null;
 
         // Verify "META-INF/" entries...
         try {
-            String[] names = getMetaInfEntryNames();
+            String[] names = JUZFA.getMetaInfEntryNames(this);
             if (names != null) {
                 for (String name : names) {
                     String uname = name.toUpperCase(Locale.ENGLISH);
                     if (MANIFEST_NAME.equals(uname)
                             || SignatureFileVerifier.isBlockOrSF(uname)) {
@@ -930,11 +938,11 @@
             // First look up manifest entry using standard name
             JarEntry manEntry = getEntry0(MANIFEST_NAME);
             if (manEntry == null) {
                 // If not found, then iterate through all the "META-INF/"
                 // entries to find a match.
-                String[] names = getMetaInfEntryNames();
+                String[] names = JUZFA.getMetaInfEntryNames(this);
                 if (names != null) {
                     for (String name : names) {
                         if (MANIFEST_NAME.equals(name.toUpperCase(Locale.ENGLISH))) {
                             manEntry = getEntry0(name);
                             break;
@@ -1014,11 +1022,11 @@
                     if (i != -1) {
                         // Read the main attributes of the manifest
                         byte[] lbuf = new byte[512];
                         Attributes attr = new Attributes();
                         attr.read(new Manifest.FastInputStream(
-                            new ByteArrayInputStream(b)), lbuf);
+                                new ByteArrayInputStream(b)), lbuf);
                         isMultiRelease = Boolean.parseBoolean(
                             attr.getValue(Attributes.Name.MULTI_RELEASE));
                     }
                 }
             }
@@ -1066,11 +1074,11 @@
      * with the given name. It is invoked from JarVerifier's entries2
      * for {@code singers}.
      */
     JarEntry newEntry(String name) {
         if (isMultiRelease()) {
-            JarEntry vje = getVersionedEntry(name, (JarEntry)null);
+            JarEntry vje = getVersionedEntry(name, null);
             if (vje != null) {
                 return vje;
             }
         }
         return new JarFileEntry(name);
