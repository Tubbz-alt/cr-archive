diff a/src/java.base/share/classes/com/sun/crypto/provider/SealedObjectForKeyProtector.java b/src/java.base/share/classes/com/sun/crypto/provider/SealedObjectForKeyProtector.java
--- a/src/java.base/share/classes/com/sun/crypto/provider/SealedObjectForKeyProtector.java
+++ b/src/java.base/share/classes/com/sun/crypto/provider/SealedObjectForKeyProtector.java
@@ -71,19 +71,19 @@
             }
         }
         return params;
     }
 
-    final Key getKey(Cipher c)
+    final Key getKey(Cipher c, int maxLength)
             throws IOException, ClassNotFoundException, IllegalBlockSizeException,
             BadPaddingException {
 
         try (ObjectInputStream ois = SharedSecrets.getJavaxCryptoSealedObjectAccess()
                 .getExtObjectInputStream(this, c)) {
             AccessController.doPrivileged(
                     (PrivilegedAction<Void>) () -> {
-                        ois.setObjectInputFilter(DeserializationChecker.ONE_FILTER);
+                        ois.setObjectInputFilter(new DeserializationChecker(maxLength));
                         return null;
                     });
             try {
                 @SuppressWarnings("unchecked")
                 Key t = (Key) ois.readObject();
@@ -107,11 +107,11 @@
      * First, the jceks.key.serialFilter will be consulted. If the result
      * is UNDECIDED, the system level jdk.serialFilter will be consulted.
      */
     private static class DeserializationChecker implements ObjectInputFilter {
 
-        private static final ObjectInputFilter ONE_FILTER;
+        private static final ObjectInputFilter OWN_FILTER;
 
         static {
             String prop = AccessController.doPrivileged(
                     (PrivilegedAction<String>) () -> {
                         String tmp = System.getProperty(KEY_SERIAL_FILTER);
@@ -119,30 +119,36 @@
                             return tmp;
                         } else {
                             return Security.getProperty(KEY_SERIAL_FILTER);
                         }
                     });
-            ONE_FILTER = new DeserializationChecker(prop == null ? null
-                    : ObjectInputFilter.Config.createFilter(prop));
+            OWN_FILTER = prop == null
+                    ? null
+                    : ObjectInputFilter.Config.createFilter(prop);
         }
 
-        private final ObjectInputFilter base;
+        // Maximum possible length of anything inside
+        private final int maxLength;
 
-        private DeserializationChecker(ObjectInputFilter base) {
-            this.base = base;
+        private DeserializationChecker(int maxLength) {
+            this.maxLength = maxLength;
         }
 
         @Override
         public ObjectInputFilter.Status checkInput(
                 ObjectInputFilter.FilterInfo info) {
 
+            if (info.arrayLength() > maxLength) {
+                return Status.REJECTED;
+            }
+
             if (info.serialClass() == Object.class) {
                 return Status.UNDECIDED;
             }
 
-            if (base != null) {
-                Status result = base.checkInput(info);
+            if (OWN_FILTER != null) {
+                Status result = OWN_FILTER.checkInput(info);
                 if (result != Status.UNDECIDED) {
                     return result;
                 }
             }
 
