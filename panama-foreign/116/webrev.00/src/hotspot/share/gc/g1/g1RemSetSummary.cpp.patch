diff a/src/hotspot/share/gc/g1/g1RemSetSummary.cpp b/src/hotspot/share/gc/g1/g1RemSetSummary.cpp
--- a/src/hotspot/share/gc/g1/g1RemSetSummary.cpp
+++ b/src/hotspot/share/gc/g1/g1RemSetSummary.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -45,16 +45,14 @@
     CollectData(G1RemSetSummary * summary) : _summary(summary),  _counter(0) {}
     virtual void do_thread(Thread* t) {
       G1ConcurrentRefineThread* crt = static_cast<G1ConcurrentRefineThread*>(t);
       _summary->set_rs_thread_vtime(_counter, crt->vtime_accum());
       _counter++;
-      _summary->_total_concurrent_refined_cards += crt->total_refined_cards();
     }
   } collector(this);
   G1CollectedHeap* g1h = G1CollectedHeap::heap();
   g1h->concurrent_refine()->threads_do(&collector);
-  _total_mutator_refined_cards = G1BarrierSet::dirty_card_queue_set().total_mutator_refined_cards();
   _num_coarsenings = HeapRegionRemSet::n_coarsenings();
 
   set_sampling_thread_vtime(g1h->sampling_thread()->vtime_accum());
 }
 
@@ -69,12 +67,10 @@
   assert(thread < _num_vtimes, "just checking");
   return _rs_threads_vtimes[thread];
 }
 
 G1RemSetSummary::G1RemSetSummary(bool should_update) :
-  _total_mutator_refined_cards(0),
-  _total_concurrent_refined_cards(0),
   _num_coarsenings(0),
   _num_vtimes(G1ConcurrentRefine::max_num_threads()),
   _rs_threads_vtimes(NEW_C_HEAP_ARRAY(double, _num_vtimes, mtGC)),
   _sampling_thread_vtime(0.0f) {
 
@@ -91,13 +87,10 @@
 
 void G1RemSetSummary::set(G1RemSetSummary* other) {
   assert(other != NULL, "just checking");
   assert(_num_vtimes == other->_num_vtimes, "just checking");
 
-  _total_mutator_refined_cards = other->total_mutator_refined_cards();
-  _total_concurrent_refined_cards = other->total_concurrent_refined_cards();
-
   _num_coarsenings = other->num_coarsenings();
 
   memcpy(_rs_threads_vtimes, other->_rs_threads_vtimes, sizeof(double) * _num_vtimes);
 
   set_sampling_thread_vtime(other->sampling_thread_vtime());
@@ -105,13 +98,10 @@
 
 void G1RemSetSummary::subtract_from(G1RemSetSummary* other) {
   assert(other != NULL, "just checking");
   assert(_num_vtimes == other->_num_vtimes, "just checking");
 
-  _total_mutator_refined_cards = other->total_mutator_refined_cards() - _total_mutator_refined_cards;
-  _total_concurrent_refined_cards = other->total_concurrent_refined_cards() - _total_concurrent_refined_cards;
-
   _num_coarsenings = other->num_coarsenings() - _num_coarsenings;
 
   for (uint i = 0; i < _num_vtimes; i++) {
     set_rs_thread_vtime(i, other->rs_thread_vtime(i) - rs_thread_vtime(i));
   }
@@ -328,18 +318,10 @@
                   max_code_root_rem_set->strong_code_roots_list_length());
   }
 };
 
 void G1RemSetSummary::print_on(outputStream* out) {
-  out->print_cr(" Recent concurrent refinement statistics");
-  out->print_cr("  Of " SIZE_FORMAT " refined cards:", total_refined_cards());
-  out->print_cr("     " SIZE_FORMAT_W(8) " (%5.1f%%) by concurrent refinement threads.",
-                total_concurrent_refined_cards(),
-                percent_of(total_concurrent_refined_cards(), total_refined_cards()));
-  out->print_cr("     " SIZE_FORMAT_W(8) " (%5.1f%%) by mutator threads.",
-                total_mutator_refined_cards(),
-                percent_of(total_mutator_refined_cards(), total_refined_cards()));
   out->print_cr("  Did " SIZE_FORMAT " coarsenings.", num_coarsenings());
   out->print_cr("  Concurrent refinement threads times (s)");
   out->print("     ");
   for (uint i = 0; i < _num_vtimes; i++) {
     out->print("    %5.2f", rs_thread_vtime(i));
