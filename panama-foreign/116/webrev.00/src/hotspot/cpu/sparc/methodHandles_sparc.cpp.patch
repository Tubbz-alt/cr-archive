diff a/src/hotspot/cpu/sparc/methodHandles_sparc.cpp b/src/hotspot/cpu/sparc/methodHandles_sparc.cpp
--- a/src/hotspot/cpu/sparc/methodHandles_sparc.cpp
+++ b/src/hotspot/cpu/sparc/methodHandles_sparc.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -26,10 +26,11 @@
 #include "jvm.h"
 #include "asm/macroAssembler.inline.hpp"
 #include "classfile/javaClasses.inline.hpp"
 #include "interpreter/interpreter.hpp"
 #include "interpreter/interp_masm.hpp"
+#include "logging/log.hpp"
 #include "memory/allocation.inline.hpp"
 #include "memory/resourceArea.hpp"
 #include "prims/methodHandles.hpp"
 #include "runtime/flags/flagSetting.hpp"
 #include "runtime/frame.inline.hpp"
@@ -272,11 +273,11 @@
     DEBUG_ONLY(O4_param_size = noreg);
   }
 
   // O4_first_arg_addr is live!
 
-  if (TraceMethodHandles) {
+  if (log_is_enabled(Info, methodhandles)) {
     if (O0_mh != noreg)
       __ mov(O0_mh, G3_method_handle);  // make stub happy
     trace_method_handle_interpreter_entry(_masm, iid);
   }
 
@@ -574,11 +575,11 @@
     }
   }
 }
 
 void MethodHandles::trace_method_handle(MacroAssembler* _masm, const char* adaptername) {
-  if (!TraceMethodHandles)  return;
+  if (!log_is_enabled(Info, methodhandles))  return;
   BLOCK_COMMENT("trace_method_handle {");
   // save: Gargs, O5_savedSP
   __ save_frame(16); // need space for saving required FPU state
 
   __ set((intptr_t) adaptername, O0);
