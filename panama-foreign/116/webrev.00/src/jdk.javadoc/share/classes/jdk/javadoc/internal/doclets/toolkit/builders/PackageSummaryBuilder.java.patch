diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/PackageSummaryBuilder.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/PackageSummaryBuilder.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/PackageSummaryBuilder.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/PackageSummaryBuilder.java
@@ -134,144 +134,137 @@
 
         packageWriter.addPackageContent(packageContentTree);
     }
 
     /**
-     * Build the package summary.
+     * Builds the list of summaries for the different kinds of types in this package.
      *
      * @param packageContentTree the package content tree to which the summaries will
      *                           be added
      * @throws DocletException if there is a problem while building the documentation
      */
     protected void buildSummary(Content packageContentTree) throws DocletException {
-        Content summaryContentTree = packageWriter.getSummaryHeader();
+        Content summariesList = packageWriter.getSummariesList();
 
-        buildInterfaceSummary(summaryContentTree);
-        buildClassSummary(summaryContentTree);
-        buildEnumSummary(summaryContentTree);
-        buildRecordSummary(summaryContentTree);
-        buildExceptionSummary(summaryContentTree);
-        buildErrorSummary(summaryContentTree);
-        buildAnnotationTypeSummary(summaryContentTree);
+        buildInterfaceSummary(summariesList);
+        buildClassSummary(summariesList);
+        buildEnumSummary(summariesList);
+        buildRecordSummary(summariesList);
+        buildExceptionSummary(summariesList);
+        buildErrorSummary(summariesList);
+        buildAnnotationTypeSummary(summariesList);
 
-        packageContentTree.add(packageWriter.getPackageSummary(summaryContentTree));
+        packageContentTree.add(packageWriter.getPackageSummary(summariesList));
     }
 
     /**
-     * Build the summary for the interfaces in this package.
+     * Builds the summary for any interfaces in this package.
      *
-     * @param summaryContentTree the summary tree to which the interface summary
-     *                           will be added
+     * @param summariesList the list of summaries to which the summary will be added
      */
-    protected void buildInterfaceSummary(Content summaryContentTree) {
+    protected void buildInterfaceSummary(Content summariesList) {
         SortedSet<TypeElement> ilist = utils.isSpecified(packageElement)
                         ? utils.getTypeElementsAsSortedSet(utils.getInterfaces(packageElement))
                         : configuration.typeElementCatalog.interfaces(packageElement);
         SortedSet<TypeElement> interfaces = utils.filterOutPrivateClasses(ilist, options.javafx());
         if (!interfaces.isEmpty()) {
-            packageWriter.addInterfaceSummary(interfaces, summaryContentTree);
+            packageWriter.addInterfaceSummary(interfaces, summariesList);
         }
     }
 
     /**
-     * Build the summary for the classes in this package.
+     * Builds the summary for any classes in this package.
      *
-     * @param summaryContentTree the summary tree to which the class summary will
-     *                           be added
+     * @param summariesList the list of summaries to which the summary will be added
      */
-    protected void buildClassSummary(Content summaryContentTree) {
+    protected void buildClassSummary(Content summariesList) {
         SortedSet<TypeElement> clist = utils.isSpecified(packageElement)
             ? utils.getTypeElementsAsSortedSet(utils.getOrdinaryClasses(packageElement))
             : configuration.typeElementCatalog.ordinaryClasses(packageElement);
         SortedSet<TypeElement> classes = utils.filterOutPrivateClasses(clist, options.javafx());
         if (!classes.isEmpty()) {
-            packageWriter.addClassSummary(classes, summaryContentTree);
+            packageWriter.addClassSummary(classes, summariesList);
         }
     }
 
     /**
-     * Build the summary for the enums in this package.
+     * Builds the summary for the enum types in this package.
      *
-     * @param summaryContentTree the summary tree to which the enum summary will
-     *                           be added
+     * @param summariesList the list of summaries to which the summary will be added
      */
-    protected void buildEnumSummary(Content summaryContentTree) {
+    protected void buildEnumSummary(Content summariesList) {
         SortedSet<TypeElement> elist = utils.isSpecified(packageElement)
             ? utils.getTypeElementsAsSortedSet(utils.getEnums(packageElement))
             : configuration.typeElementCatalog.enums(packageElement);
         SortedSet<TypeElement> enums = utils.filterOutPrivateClasses(elist, options.javafx());
         if (!enums.isEmpty()) {
-            packageWriter.addEnumSummary(enums, summaryContentTree);
+            packageWriter.addEnumSummary(enums, summariesList);
         }
     }
 
     /**
-     * Build the summary for the records in this package.
+     * Builds the summary for any record types in this package.
      *
-     * @param summaryContentTree the summary tree to which the record summary will
-     *                           be added
+     * @param summariesList the list of summaries to which the summary will be added
      */
-    protected void buildRecordSummary(Content summaryContentTree) {
+    protected void buildRecordSummary(Content summariesList) {
         SortedSet<TypeElement> rlist = utils.isSpecified(packageElement)
                 ? utils.getTypeElementsAsSortedSet(utils.getRecords(packageElement))
                 : configuration.typeElementCatalog.records(packageElement);
         SortedSet<TypeElement> records = utils.filterOutPrivateClasses(rlist, options.javafx());
         if (!records.isEmpty()) {
-            packageWriter.addRecordSummary(records, summaryContentTree);
+            packageWriter.addRecordSummary(records, summariesList);
         }
     }
 
     /**
-     * Build the summary for the exceptions in this package.
+     * Builds the summary for any exception types in this package.
      *
-     * @param summaryContentTree the summary tree to which the exception summary will
-     *                           be added
+     * @param summariesList the list of summaries to which the summary will be added
      */
-    protected void buildExceptionSummary(Content summaryContentTree) {
+    protected void buildExceptionSummary(Content summariesList) {
         Set<TypeElement> iexceptions =
             utils.isSpecified(packageElement)
                 ? utils.getTypeElementsAsSortedSet(utils.getExceptions(packageElement))
                 : configuration.typeElementCatalog.exceptions(packageElement);
         SortedSet<TypeElement> exceptions = utils.filterOutPrivateClasses(iexceptions,
                 options.javafx());
         if (!exceptions.isEmpty()) {
-            packageWriter.addExceptionSummary(exceptions, summaryContentTree);
+            packageWriter.addExceptionSummary(exceptions, summariesList);
         }
     }
 
     /**
-     * Build the summary for the errors in this package.
+     * Builds the summary for any error types in this package.
      *
-     * @param summaryContentTree the summary tree to which the error summary will
-     *                           be added
+     * @param summariesList the list of summaries to which the summary will be added
      */
-    protected void buildErrorSummary(Content summaryContentTree) {
+    protected void buildErrorSummary(Content summariesList) {
         Set<TypeElement> ierrors =
             utils.isSpecified(packageElement)
                 ? utils.getTypeElementsAsSortedSet(utils.getErrors(packageElement))
                 : configuration.typeElementCatalog.errors(packageElement);
         SortedSet<TypeElement> errors = utils.filterOutPrivateClasses(ierrors, options.javafx());
         if (!errors.isEmpty()) {
-            packageWriter.addErrorSummary(errors, summaryContentTree);
+            packageWriter.addErrorSummary(errors, summariesList);
         }
     }
 
     /**
-     * Build the summary for the annotation type in this package.
+     * Builds the summary for any annotation types in this package.
      *
-     * @param summaryContentTree the summary tree to which the annotation type
-     *                           summary will be added
+     * @param summariesList the list of summaries to which the summary will be added
      */
-    protected void buildAnnotationTypeSummary(Content summaryContentTree) {
+    protected void buildAnnotationTypeSummary(Content summariesList) {
         SortedSet<TypeElement> iannotationTypes =
             utils.isSpecified(packageElement)
                 ? utils.getTypeElementsAsSortedSet(utils.getAnnotationTypes(packageElement))
                 : configuration.typeElementCatalog.annotationTypes(packageElement);
         SortedSet<TypeElement> annotationTypes = utils.filterOutPrivateClasses(iannotationTypes,
                 options.javafx());
         if (!annotationTypes.isEmpty()) {
-            packageWriter.addAnnotationTypeSummary(annotationTypes, summaryContentTree);
+            packageWriter.addAnnotationTypeSummary(annotationTypes, summariesList);
         }
     }
 
     /**
      * Build the description of the summary.
