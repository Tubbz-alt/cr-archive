diff a/src/java.desktop/share/classes/javax/swing/plaf/basic/BasicDirectoryModel.java b/src/java.desktop/share/classes/javax/swing/plaf/basic/BasicDirectoryModel.java
--- a/src/java.desktop/share/classes/javax/swing/plaf/basic/BasicDirectoryModel.java
+++ b/src/java.desktop/share/classes/javax/swing/plaf/basic/BasicDirectoryModel.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,38 +23,42 @@
  * questions.
  */
 
 package javax.swing.plaf.basic;
 
-import sun.awt.shell.ShellFolder;
-
-import javax.swing.*;
-import javax.swing.event.ListDataEvent;
-import javax.swing.filechooser.FileSystemView;
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
 import java.beans.PropertyChangeSupport;
 import java.io.File;
 import java.util.List;
 import java.util.Vector;
 import java.util.concurrent.Callable;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import javax.swing.AbstractListModel;
+import javax.swing.JFileChooser;
+import javax.swing.SwingUtilities;
+import javax.swing.event.ListDataEvent;
+import javax.swing.filechooser.FileSystemView;
+
+import sun.awt.shell.ShellFolder;
 
 /**
  * Basic implementation of a file list.
  *
  * @author Jeff Dinkins
  */
 @SuppressWarnings("serial") // Superclass is not serializable across versions
 public class BasicDirectoryModel extends AbstractListModel<Object> implements PropertyChangeListener {
 
-    private JFileChooser filechooser = null;
+    private final JFileChooser filechooser;
     // PENDING(jeff) pick the size more sensibly
-    private Vector<File> fileCache = new Vector<File>(50);
+    private final Vector<File> fileCache = new Vector<File>(50);
     private FilesLoader filesLoader = null;
     private Vector<File> files = null;
     private Vector<File> directories = null;
-    private int fetchID = 0;
+    private final AtomicInteger fetchID = new AtomicInteger();
 
     private PropertyChangeSupport changeSupport;
 
     private boolean busy = false;
 
@@ -155,13 +159,13 @@
         if (filesLoader != null) {
             filesLoader.loadThread.interrupt();
             filesLoader.cancelRunnables();
         }
 
-        setBusy(true, ++fetchID);
-
-        filesLoader = new FilesLoader(currentDirectory, fetchID);
+        int fid = fetchID.incrementAndGet();
+        setBusy(true, fid);
+        filesLoader = new FilesLoader(currentDirectory, fid);
     }
 
     /**
      * Renames a file in the underlying file system.
      *
@@ -258,38 +262,44 @@
             return a.getName().compareTo(b.getName()) < 0;
         }
     }
 
 
-    class FilesLoader implements Runnable {
-        File currentDirectory = null;
-        int fid;
-        Vector<DoChangeContents> runnables = new Vector<DoChangeContents>(10);
-        final Thread loadThread;
+    private final class FilesLoader implements Runnable {
+        private final FileSystemView fileSystemView;
+        private final boolean useFileHiding;
+        private final boolean fileSelectionEnabled;
+        private final int fid;
+        private final File currentDirectory;
+        private volatile DoChangeContents runnable;
+        private final Thread loadThread;
 
-        public FilesLoader(File currentDirectory, int fid) {
+        private FilesLoader(File currentDirectory, int fid) {
             this.currentDirectory = currentDirectory;
             this.fid = fid;
+            fileSystemView = filechooser.getFileSystemView();
+            useFileHiding = filechooser.isFileHidingEnabled();
+            fileSelectionEnabled = filechooser.isFileSelectionEnabled();
             String name = "Basic L&F File Loading Thread";
-            this.loadThread = new Thread(null, this, name, 0, false);
-            this.loadThread.start();
+            loadThread = new Thread(null, this, name, 0, false);
+            loadThread.start();
         }
 
         @Override
         public void run() {
             run0();
             setBusy(false, fid);
         }
 
-        public void run0() {
-            FileSystemView fileSystem = filechooser.getFileSystemView();
+        private void run0() {
+            FileSystemView fileSystem = fileSystemView;
 
             if (loadThread.isInterrupted()) {
                 return;
             }
 
-            File[] list = fileSystem.getFiles(currentDirectory, filechooser.isFileHidingEnabled());
+            File[] list = fileSystem.getFiles(currentDirectory, useFileHiding);
 
             if (loadThread.isInterrupted()) {
                 return;
             }
 
@@ -303,11 +313,11 @@
                 if (filechooser.accept(file)) {
                     boolean isTraversable = filechooser.isTraversable(file);
 
                     if (isTraversable) {
                         newFileCache.addElement(file);
-                    } else if (filechooser.isFileSelectionEnabled()) {
+                    } else if (fileSelectionEnabled) {
                         newFiles.addElement(file);
                     }
 
                     if (loadThread.isInterrupted()) {
                         return;
@@ -321,11 +331,11 @@
 
             newFileCache.addAll(newFiles);
 
             // To avoid loads of synchronizations with Invoker and improve performance we
             // execute the whole block on the COM thread
-            DoChangeContents doChangeContents = ShellFolder.invoke(new Callable<DoChangeContents>() {
+            runnable = ShellFolder.invoke(new Callable<DoChangeContents>() {
                 public DoChangeContents call() {
                     int newSize = newFileCache.size();
                     int oldSize = fileCache.size();
 
                     if (newSize > oldSize) {
@@ -370,34 +380,28 @@
                             return new DoChangeContents(null, 0, new Vector<>(fileCache.subList(start, end)), start, fid);
                         }
                     }
                     if (!fileCache.equals(newFileCache)) {
                         if (loadThread.isInterrupted()) {
-                            cancelRunnables(runnables);
+                            cancelRunnables();
                         }
                         return new DoChangeContents(newFileCache, 0, fileCache, 0, fid);
                     }
                     return null;
                 }
             });
 
-            if (doChangeContents != null) {
-                runnables.addElement(doChangeContents);
-                SwingUtilities.invokeLater(doChangeContents);
+            if (runnable != null && !loadThread.isInterrupted()) {
+                SwingUtilities.invokeLater(runnable);
             }
         }
 
-
-        public void cancelRunnables(Vector<DoChangeContents> runnables) {
-            for (DoChangeContents runnable : runnables) {
+        private void cancelRunnables() {
+            if (runnable != null) {
                 runnable.cancel();
             }
         }
-
-        public void cancelRunnables() {
-            cancelRunnables(runnables);
-        }
    }
 
 
     /**
      * Adds a PropertyChangeListener to the listener list. The listener is
@@ -484,11 +488,11 @@
      * Set the busy state for the model. The model is considered
      * busy when it is running a separate (interruptable)
      * thread in order to load the contents of a directory.
      */
     private synchronized void setBusy(final boolean busy, int fid) {
-        if (fid == fetchID) {
+        if (fid == fetchID.get()) {
             boolean oldValue = this.busy;
             this.busy = busy;
 
             if (changeSupport != null && busy != oldValue) {
                 SwingUtilities.invokeLater(new Runnable() {
@@ -499,32 +503,33 @@
             }
         }
     }
 
 
-    class DoChangeContents implements Runnable {
-        private List<File> addFiles;
-        private List<File> remFiles;
+    private final class DoChangeContents implements Runnable {
+        private final List<File> addFiles;
+        private final List<File> remFiles;
         private boolean doFire = true;
-        private int fid;
+        private final int fid;
         private int addStart = 0;
         private int remStart = 0;
 
-        public DoChangeContents(List<File> addFiles, int addStart, List<File> remFiles, int remStart, int fid) {
+        DoChangeContents(List<File> addFiles, int addStart, List<File> remFiles,
+                         int remStart, int fid) {
             this.addFiles = addFiles;
             this.addStart = addStart;
             this.remFiles = remFiles;
             this.remStart = remStart;
             this.fid = fid;
         }
 
         synchronized void cancel() {
-                doFire = false;
+            doFire = false;
         }
 
         public synchronized void run() {
-            if (fetchID == fid && doFire) {
+            if (fetchID.get() == fid && doFire) {
                 int remSize = (remFiles == null) ? 0 : remFiles.size();
                 int addSize = (addFiles == null) ? 0 : addFiles.size();
                 synchronized(fileCache) {
                     if (remSize > 0) {
                         fileCache.removeAll(remFiles);
