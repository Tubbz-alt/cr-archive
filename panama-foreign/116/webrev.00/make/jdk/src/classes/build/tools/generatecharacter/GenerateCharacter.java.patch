diff a/make/jdk/src/classes/build/tools/generatecharacter/GenerateCharacter.java b/make/jdk/src/classes/build/tools/generatecharacter/GenerateCharacter.java
--- a/make/jdk/src/classes/build/tools/generatecharacter/GenerateCharacter.java
+++ b/make/jdk/src/classes/build/tools/generatecharacter/GenerateCharacter.java
@@ -940,18 +940,19 @@
     */
     static String genTables() {
         int n = sizes.length;
         StringBuffer result = new StringBuffer();
         // liu : Add a comment showing the source of this table
-        result.append(commentStart + " The following tables and code generated using:" +
-                  commentEnd + "\n  ");
-        result.append(commentStart + ' ' + commandLineDescription + commentEnd + "\n  ");
-
-                if (plane == 0 && bLatin1 == false) {
+        if (debug) {
+            result.append(commentStart + " The following tables and code generated using:" +
+                    commentEnd + "\n  ");
+            result.append(commentStart + ' ' + commandLineDescription + commentEnd + "\n  ");
+        }
+        if (plane == 0 && bLatin1 == false) {
             genCaseMapTableDeclaration(result);
             genCaseMapTable(initializers, specialCaseMaps);
-                }
+        }
         int totalBytes = 0;
         for (int k = 0; k < n - 1; k++) {
             genTable(result, tableNames[k], tables[k], 0, bytes[k]<<3, sizes[k], preshifted[k],
                 sizes[k+1], false, false, k==0);
             int s = bytes[k];
@@ -1610,10 +1611,11 @@
     /* The command line arguments are decoded and used to set the following
      global variables.
      */
 
     static boolean verbose = false;
+    static boolean debug = false;
     static boolean nobidi = false;
     static boolean nomirror = false;
     static boolean identifiers = false;
     static boolean Csyntax = false;
     static String TemplateFileName = null;
@@ -1690,10 +1692,12 @@
             desc.append(" " + args[j]);
         }
         for (int j = 0; j < args.length; j++) {
             if (args[j].equals("-verbose") || args[j].equals("-v"))
                 verbose = true;
+            else if (args[j].equals("-d"))
+                debug = true;
             else if (args[j].equals("-nobidi"))
                 nobidi = true;
             else if (args[j].equals("-nomirror"))
                 nomirror = true;
             else if (args[j].equals("-identifiers"))
