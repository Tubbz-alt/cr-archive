diff a/test/jdk/sun/security/tools/jarsigner/Options.java b/test/jdk/sun/security/tools/jarsigner/Options.java
--- a/test/jdk/sun/security/tools/jarsigner/Options.java
+++ b/test/jdk/sun/security/tools/jarsigner/Options.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,74 +21,103 @@
  * questions.
  */
 
 /**
  * @test
- * @bug 8056174
+ * @bug 8056174 8242260
  * @summary Make sure the jarsigner tool still works after it's modified to
  *          be based on JarSigner API
  * @library /test/lib
- * @modules java.base/sun.security.tools.keytool
- *          jdk.jartool/sun.security.tools.jarsigner
- *          java.base/sun.security.pkcs
+ * @modules java.base/sun.security.pkcs
  *          java.base/sun.security.x509
- * @build jdk.test.lib.util.JarUtils
- * @run main Options
  */
 
 import com.sun.jarsigner.ContentSigner;
 import com.sun.jarsigner.ContentSignerParameters;
+import jdk.test.lib.Asserts;
+import jdk.test.lib.SecurityTools;
 import jdk.test.lib.util.JarUtils;
 import sun.security.pkcs.PKCS7;
 
 import java.io.ByteArrayInputStream;
-import java.io.IOException;
 import java.io.InputStream;
 import java.nio.file.Files;
-import java.nio.file.Paths;
-import java.security.NoSuchAlgorithmException;
-import java.security.cert.CertificateException;
+import java.nio.file.Path;
 import java.util.*;
 import java.util.jar.Attributes;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 import java.util.jar.Manifest;
 
 public class Options {
 
     public static void main(String[] args) throws Exception {
 
+        // Help
+        boolean lastLineHasAltSigner = false;
+        for (String line : SecurityTools.jarsigner("--help").asLines()) {
+            if (line.contains("-altsigner")) {
+                lastLineHasAltSigner = true;
+            } else {
+                if (lastLineHasAltSigner) {
+                    Asserts.assertTrue(line.contains("deprecated and will be removed"));
+                }
+                lastLineHasAltSigner = false;
+            }
+        }
+
         // Prepares raw file
-        Files.write(Paths.get("a"), List.of("a"));
+        Files.write(Path.of("a"), List.of("a"));
 
         // Pack
-        JarUtils.createJar("a.jar", "a");
+        JarUtils.createJarFile(Path.of("a.jar"), Path.of("."), Path.of("a"));
 
         // Prepare a keystore
-        sun.security.tools.keytool.Main.main(
-                ("-keystore jks -storepass changeit -keypass changeit -dname" +
-                        " CN=A -alias a -genkeypair -keyalg rsa").split(" "));
+        SecurityTools.keytool(
+                "-keystore jks -storepass changeit -keypass changeit -dname" +
+                        " CN=A -alias a -genkeypair -keyalg rsa")
+                .shouldHaveExitValue(0);
 
         // -altsign
-        sun.security.tools.jarsigner.Main.main(
-                ("-debug -signedjar altsign.jar -keystore jks -storepass changeit" +
-                        " -altsigner Options$X a.jar a").split(" "));
+        SecurityTools.jarsigner(
+                "-debug -signedjar altsign.jar -keystore jks -storepass changeit" +
+                        " -altsigner Options$X" +
+                        " -altsignerpath " + System.getProperty("test.classes") +
+                        " a.jar a")
+                .shouldContain("removed in a future release: -altsigner")
+                .shouldContain("removed in a future release: -altsignerpath")
+                .shouldContain("PKCS7.parse");  // signature not parseable
+                                                // but signing succeeds
 
         try (JarFile jf = new JarFile("altsign.jar")) {
             JarEntry je = jf.getJarEntry("META-INF/A.RSA");
             try (InputStream is = jf.getInputStream(je)) {
                 if (!Arrays.equals(is.readAllBytes(), "1234".getBytes())) {
                     throw new Exception("altsign go wrong");
                 }
             }
         }
 
+        // -altsign with no -altsignerpath
+        Files.copy(Path.of(System.getProperty("test.classes"), "Options$X.class"),
+                Path.of("Options$X.class"));
+        SecurityTools.jarsigner(
+                "-debug -signedjar altsign.jar -keystore jks -storepass changeit" +
+                        " -altsigner Options$X" +
+                        " a.jar a")
+                .shouldContain("removed in a future release: -altsigner")
+                .shouldNotContain("removed in a future release: -altsignerpath")
+                .shouldContain("PKCS7.parse");  // signature not parseable
+                                                // but signing succeeds
+
         // -sigfile, -digestalg, -sigalg, -internalsf, -sectionsonly
-        sun.security.tools.jarsigner.Main.main(
-                ("-debug -signedjar new.jar -keystore jks -storepass changeit" +
+        SecurityTools.jarsigner(
+                "-debug -signedjar new.jar -keystore jks -storepass changeit" +
                 " -sigfile olala -digestalg SHA1 -sigalg SHA224withRSA" +
-                " -internalsf -sectionsonly a.jar a").split(" "));
+                " -internalsf -sectionsonly a.jar a")
+                .shouldHaveExitValue(0)
+                .shouldNotContain("Exception");     // a real success
 
         try (JarFile jf = new JarFile("new.jar")) {
             JarEntry je = jf.getJarEntry("META-INF/OLALA.SF");
             Objects.requireNonNull(je);     // check -sigfile
             byte[] sf = null;               // content of .SF
@@ -128,12 +157,10 @@
     }
 
     public static class X extends ContentSigner {
         @Override
         public byte[] generateSignedData(ContentSignerParameters parameters,
-                boolean omitContent, boolean applyTimestamp)
-                throws NoSuchAlgorithmException, CertificateException,
-                        IOException {
+                boolean omitContent, boolean applyTimestamp) {
             return "1234".getBytes();
         }
     }
 }
