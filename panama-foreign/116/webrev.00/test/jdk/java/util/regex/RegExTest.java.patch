diff a/test/jdk/java/util/regex/RegExTest.java b/test/jdk/java/util/regex/RegExTest.java
--- a/test/jdk/java/util/regex/RegExTest.java
+++ b/test/jdk/java/util/regex/RegExTest.java
@@ -34,11 +34,11 @@
  * 7067045 7014640 7189363 8007395 8013252 8013254 8012646 8023647 6559590
  * 8027645 8035076 8039124 8035975 8074678 6854417 8143854 8147531 7071819
  * 8151481 4867170 7080302 6728861 6995635 6736245 4916384 6328855 6192895
  * 6345469 6988218 6693451 7006761 8140212 8143282 8158482 8176029 8184706
  * 8194667 8197462 8184692 8221431 8224789 8228352 8230829 8236034 8235812
- * 8216332 8214245 8237599
+ * 8216332 8214245 8237599 8241055
  *
  * @library /test/lib
  * @library /lib/testlibrary/java/lang
  * @build jdk.test.lib.RandomFactory
  * @run main RegExTest
@@ -4795,52 +4795,103 @@
         }
         report("Embedded flags");
     }
 
     private static void grapheme() throws Exception {
+        final int[] lineNumber = new int[1];
         Stream.concat(Files.lines(UCDFiles.GRAPHEME_BREAK_TEST),
                 Files.lines(Paths.get(System.getProperty("test.src", "."), "GraphemeTestCases.txt")))
-            .filter( ln -> ln.length() != 0 && !ln.startsWith("#") )
             .forEach( ln -> {
-                ln = ln.replaceAll("\\s+|\\([a-zA-Z]+\\)|\\[[a-zA-Z]]+\\]|#.*", "");
-                // System.out.println(str);
-                String[] strs = ln.split("\u00f7|\u00d7");
-                StringBuilder src = new StringBuilder();
-                ArrayList<String> graphemes = new ArrayList<>();
-                StringBuilder buf = new StringBuilder();
-                int offBk = 0;
-                for (String str : strs) {
-                    if (str.length() == 0)  // first empty str
-                        continue;
-                    int cp = Integer.parseInt(str, 16);
-                    src.appendCodePoint(cp);
-                    buf.appendCodePoint(cp);
-                    offBk += (str.length() + 1);
-                    if (ln.charAt(offBk) == '\u00f7') {    // DIV
-                        graphemes.add(buf.toString());
-                        buf = new StringBuilder();
+                    lineNumber[0]++;
+                    if (ln.length() == 0 || ln.startsWith("#")) {
+                        return;
                     }
-                }
-                Pattern p = Pattern.compile("\\X");
-                Matcher m = p.matcher(src.toString());
-                Scanner s = new Scanner(src.toString()).useDelimiter("\\b{g}");
-                for (String g : graphemes) {
-                    // System.out.printf("     grapheme:=[%s]%n", g);
-                    // (1) test \\X directly
-                    if (!m.find() || !m.group().equals(g)) {
-                        System.out.println("Failed \\X [" + ln + "] : " + g);
+                    ln = ln.replaceAll("\\s+|\\([a-zA-Z]+\\)|\\[[a-zA-Z]]+\\]|#.*", "");
+                    // System.out.println(str);
+                    String[] strs = ln.split("\u00f7|\u00d7");
+                    StringBuilder src = new StringBuilder();
+                    ArrayList<String> graphemes = new ArrayList<>();
+                    StringBuilder buf = new StringBuilder();
+                    int offBk = 0;
+                    for (String str : strs) {
+                        if (str.length() == 0)  // first empty str
+                            continue;
+                        int cp = Integer.parseInt(str, 16);
+                        src.appendCodePoint(cp);
+                        buf.appendCodePoint(cp);
+                        offBk += (str.length() + 1);
+                        if (ln.charAt(offBk) == '\u00f7') {    // DIV
+                            graphemes.add(buf.toString());
+                            buf = new StringBuilder();
+                        }
+                    }
+                    Pattern p = Pattern.compile("\\X");
+                    // (1) test \X directly
+                    Matcher m = p.matcher(src.toString());
+                    for (String g : graphemes) {
+                        // System.out.printf("     grapheme:=[%s]%n", g);
+                        String group = null;
+                        if (!m.find() || !(group = m.group()).equals(g)) {
+                            System.out.println("Failed pattern \\X [" + ln + "] : "
+                                    + "expected: " + g + " - actual: " + group
+                                    + "(line " + lineNumber[0] + ")");
+                            failCount++;
+                        }
+                    }
+                    if (m.find()) {
+                        failCount++;
+                    }
+                    // test \b{g} without \X via Pattern
+                    Pattern pbg = Pattern.compile("\\b{g}");
+                    m = pbg.matcher(src.toString());
+                    m.find();
+                    int prev = m.end();
+                    for (String g : graphemes) {
+                        String group = null;
+                        if (!m.find() || !(group = src.substring(prev, m.end())).equals(g)) {
+                            System.out.println("Failed pattern \\b{g} [" + ln + "] : "
+                                    + "expected: " + g + " - actual: " + group
+                                    + "(line " + lineNumber[0] + ")");
+                            failCount++;
+                        }
+                        if (!"".equals(m.group())) {
+                            failCount++;
+                        }
+                        prev = m.end();
+                    }
+                    if (m.find()) {
                         failCount++;
                     }
-                    // (2) test \\b{g} + \\X  via Scanner
-                    boolean hasNext = s.hasNext(p);
-                    // if (!s.hasNext() || !s.next().equals(next)) {
-                    if (!s.hasNext(p) || !s.next(p).equals(g)) {
-                        System.out.println("Failed b{g} [" + ln + "] : " + g);
+                    // (2) test \b{g} + \X  via Scanner
+                    Scanner s = new Scanner(src.toString()).useDelimiter("\\b{g}");
+                    for (String g : graphemes) {
+                        String next = null;
+                        if (!s.hasNext(p) || !(next = s.next(p)).equals(g)) {
+                            System.out.println("Failed \\b{g} [" + ln + "] : "
+                                    + "expected: " + g + " - actual: " + next
+                                    + " (line " + lineNumber[0] + ")");
+                            failCount++;
+                        }
+                    }
+                    if (s.hasNext(p)) {
                         failCount++;
                     }
-                }
-            });
+                    // test \b{g} without \X via Scanner
+                    s = new Scanner(src.toString()).useDelimiter("\\b{g}");
+                    for (String g : graphemes) {
+                        String next = null;
+                        if (!s.hasNext() || !(next = s.next()).equals(g)) {
+                            System.out.println("Failed \\b{g} [" + ln + "] : "
+                                    + "expected: " + g + " - actual: " + next
+                                    + " (line " + lineNumber[0] + ")");
+                            failCount++;
+                        }
+                    }
+                    if (s.hasNext()) {
+                        failCount++;
+                    }
+                });
         // some sanity checks
         if (!Pattern.compile("\\X{10}").matcher("abcdefghij").matches() ||
             !Pattern.compile("\\b{g}(?:\\X\\b{g}){5}\\b{g}").matcher("abcde").matches() ||
             !Pattern.compile("(?:\\X\\b{g}){2}").matcher("\ud800\udc00\ud801\udc02").matches())
             failCount++;
