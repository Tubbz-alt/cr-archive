diff a/test/lib/jdk/test/lib/process/ProcessTools.java b/test/lib/jdk/test/lib/process/ProcessTools.java
--- a/test/lib/jdk/test/lib/process/ProcessTools.java
+++ b/test/lib/jdk/test/lib/process/ProcessTools.java
@@ -27,10 +27,12 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.PrintStream;
 import java.nio.charset.Charset;
+import java.nio.file.Files;
+import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.concurrent.CountDownLatch;
@@ -390,10 +392,22 @@
             }
 
             output = new OutputAnalyzer(p, cs);
             p.waitFor();
 
+            {   // Dumping the process output to a separate file
+                var fileName = String.format("pid-%d-output.log", p.pid());
+                var processOutput = getProcessLog(pb, output);
+                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {
+                    Files.writeString(Path.of(fileName), processOutput);
+                    return null;
+                });
+                System.out.printf(
+                        "Output and diagnostic info for process %d " +
+                                "was saved into '%s'%n", p.pid(), fileName);
+            }
+
             return output;
         } catch (Throwable t) {
             if (p != null) {
                 p.destroyForcibly().waitFor();
             }
@@ -524,12 +538,16 @@
         String jvmLibDir = Platform.jvmLibDir().toString();
         String libPathVar = Platform.sharedLibraryPathVariableName();
         String currentLibPath = pb.environment().get(libPathVar);
 
         String newLibPath = jvmLibDir;
+        if (Platform.isWindows()) {
+            String libDir = Platform.libDir().toString();
+            newLibPath = newLibPath + File.pathSeparator + libDir;
+        }
         if ( (currentLibPath != null) && !currentLibPath.isEmpty() ) {
-            newLibPath = currentLibPath + File.pathSeparator + jvmLibDir;
+            newLibPath = newLibPath + File.pathSeparator + currentLibPath;
         }
 
         pb.environment().put(libPathVar, newLibPath);
 
         return pb;
