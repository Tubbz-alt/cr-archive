diff a/test/langtools/jdk/javadoc/doclet/testSearchScript/TestSearchScript.java b/test/langtools/jdk/javadoc/doclet/testSearchScript/TestSearchScript.java
--- a/test/langtools/jdk/javadoc/doclet/testSearchScript/TestSearchScript.java
+++ b/test/langtools/jdk/javadoc/doclet/testSearchScript/TestSearchScript.java
@@ -21,43 +21,54 @@
  * questions.
  */
 
 /*
  * @test
- * @bug 8178982 8220497 8210683
+ * @bug 8178982 8220497 8210683 8241982
  * @summary Test the search feature of javadoc.
  * @library ../../lib
  * @modules jdk.javadoc/jdk.javadoc.internal.tool
  * @build javadoc.tester.*
  * @run main TestSearchScript
  */
 
 import javadoc.tester.JavadocTester;
 
+import javax.script.Bindings;
 import javax.script.Invocable;
+import javax.script.ScriptContext;
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
 import javax.script.ScriptException;
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
 import java.util.List;
 
 /*
- * Tests for the search feature using Nashorn JavaScript engine.
+ * Tests for the search feature using any available javax.script JavaScript engine.
+ * The test is skipped if no JavaScript engine is available.
  */
 public class TestSearchScript extends JavadocTester {
 
     public static void main(String... args) throws Exception {
         TestSearchScript tester = new TestSearchScript();
         tester.runTests();
     }
 
     private Invocable getEngine() throws ScriptException, IOException, NoSuchMethodException {
         ScriptEngineManager engineManager = new ScriptEngineManager();
-        ScriptEngine engine = engineManager.getEngineByName("nashorn");
+        // Use "js" engine name to use any available JavaScript engine.
+        ScriptEngine engine = engineManager.getEngineByName("js");
+        if (engine == null) {
+            return null;
+        }
+        // For GraalJS set Nashorn compatibility mode via Bindings,
+        // see https://github.com/graalvm/graaljs/blob/master/docs/user/ScriptEngine.md
+        Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);
+        bindings.put("polyglot.js.nashorn-compat", true);
         engine.eval(new BufferedReader(new FileReader(new File(testSrc, "javadoc-search.js"))));
         Invocable inv = (Invocable) engine;
         inv.invokeFunction("loadIndexFiles", outputDir.getAbsolutePath());
         return inv;
     }
@@ -72,10 +83,15 @@
                 "mappkg", "mappkg.impl");
         checkExit(Exit.OK);
 
         Invocable inv = getEngine();
 
+        if (inv == null) {
+            out.println("No JavaScript engine available. Test skipped.");
+            return;
+        }
+
         // exact match, case sensitivity
         checkSearch(inv, "mapmodule", List.of("mapmodule"));
         checkSearch(inv, "mappkg", List.of("mapmodule/mappkg", "mapmodule/mappkg.impl", "mappkg.system.property"));
         checkSearch(inv, "Mapmodule", List.of());
         checkSearch(inv, "Mappkg", List.of());
@@ -168,10 +184,15 @@
                 "listpkg");
         checkExit(Exit.OK);
 
         Invocable inv = getEngine();
 
+        if (inv == null) {
+            out.println("No JavaScript engine available. Test skipped.");
+            return;
+        }
+
         // exact match, case sensitvity, left boundaries
         checkSearch(inv, "list", List.of("listpkg", "listpkg.List", "listpkg.ListProvider", "listpkg.MyList",
                                          "listpkg.MyListFactory", "listpkg.ListProvider.ListProvider()",
                                          "listpkg.MyListFactory.createList(ListProvider, MyListFactory)",
                                          "listpkg.ListProvider.makeNewList()",
