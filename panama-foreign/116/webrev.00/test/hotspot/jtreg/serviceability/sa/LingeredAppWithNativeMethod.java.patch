diff a/test/hotspot/jtreg/serviceability/sa/LingeredAppWithNativeMethod.java b/test/hotspot/jtreg/serviceability/sa/LingeredAppWithNativeMethod.java
--- a/test/hotspot/jtreg/serviceability/sa/LingeredAppWithNativeMethod.java
+++ b/test/hotspot/jtreg/serviceability/sa/LingeredAppWithNativeMethod.java
@@ -1,8 +1,8 @@
 
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -20,17 +20,20 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
+import java.util.Random;
 import jdk.test.lib.apps.LingeredApp;
+import jdk.test.lib.Utils;
 
 public class LingeredAppWithNativeMethod extends LingeredApp {
 
     public static final String THREAD_NAME = "NoFramePointerJNIFib";
     private static final int UPPER_BOUND = 55;
     private static final int LOWER_BOUND = 40;
+    private static final Random RNG = Utils.getRandomInstance();
 
     static {
         // JNI library compiled with no frame pointer info
         System.loadLibrary("NoFramePointer");
     }
@@ -41,13 +44,13 @@
         // That is to ensure that the native bits run when
         // jstack --mixed info is to be gathered.
         // Results of fibonacci calculation from JNI are
         // reported via callback(). That's where the process
         // of calculating fibonacci restarts.
-        int num = (int) (Math.random() * UPPER_BOUND);
+        int num = (int) (RNG.nextDouble() * UPPER_BOUND);
         while (num < LOWER_BOUND) {
-            num = (int) (Math.random() * UPPER_BOUND);
+            num = (int) (RNG.nextDouble() * UPPER_BOUND);
         }
         System.out.print("fib(" + num + ") = ");
         callJNI(this, num);
     }
 
