diff a/test/hotspot/jtreg/runtime/exceptionMsgs/NullPointerException/NullPointerExceptionTest.java b/test/hotspot/jtreg/runtime/exceptionMsgs/NullPointerException/NullPointerExceptionTest.java
--- a/test/hotspot/jtreg/runtime/exceptionMsgs/NullPointerException/NullPointerExceptionTest.java
+++ b/test/hotspot/jtreg/runtime/exceptionMsgs/NullPointerException/NullPointerExceptionTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2019 SAP SE. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
@@ -22,10 +22,11 @@
  * questions.
  */
 
 /**
  * @test
+ * @key randomness
  * @summary Test extended NullPointerException message for
  *   classfiles generated with debug information. In this case the name
  *   of the variable containing the array is printed.
  * @bug 8218628
  * @modules java.base/java.lang:open
@@ -34,10 +35,11 @@
  * @compile -g NullPointerExceptionTest.java
  * @run main/othervm -XX:MaxJavaStackTraceDepth=1 -XX:+ShowCodeDetailsInExceptionMessages NullPointerExceptionTest hasDebugInfo
  */
 /**
  * @test
+ * @key randomness
  * @summary Test extended NullPointerException message for class
  *   files generated without debugging information. The message lists
  *   detailed information about the entity that is null.
  * @bug 8218628
  * @modules java.base/java.lang:open
@@ -51,15 +53,17 @@
 import java.io.ByteArrayOutputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.lang.invoke.MethodHandles.Lookup;
 import java.util.ArrayList;
+import java.util.Random;
 
 import jdk.internal.org.objectweb.asm.ClassWriter;
 import jdk.internal.org.objectweb.asm.Label;
 import jdk.internal.org.objectweb.asm.MethodVisitor;
 import jdk.test.lib.Asserts;
+import jdk.test.lib.Utils;
 
 import static java.lang.invoke.MethodHandles.lookup;
 import static jdk.internal.org.objectweb.asm.Opcodes.ACC_PUBLIC;
 import static jdk.internal.org.objectweb.asm.Opcodes.ACC_SUPER;
 import static jdk.internal.org.objectweb.asm.Opcodes.ACONST_NULL;
@@ -87,10 +91,11 @@
     static long[][] staticLongArray = new long[1000][];
     DoubleArrayGen dag;
     ArrayList<String> names = new ArrayList<>();
     ArrayList<String> curr;
     static boolean hasDebugInfo = false;
+    static final Random rng = Utils.getRandomInstance();
 
     static {
         staticArray       = new int[1][][][];
         staticArray[0]    = new int[1][][];
         staticArray[0][0] = new int[1][];
@@ -1419,13 +1424,13 @@
         try {
             // If we can get the value from more than one bci, we cannot know which one
             // is null. Make sure we don't print the wrong value.
             String s = null;
             @SuppressWarnings("unused")
-            byte[] val = (Math.random() < 0.5 ? s : (new String[1])[0]).getBytes();
+            byte[] val = (rng.nextDouble() < 0.5 ? s : (new String[1])[0]).getBytes();
         } catch (NullPointerException e) {
-            checkMessage(e, "byte[] val = (Math.random() < 0.5 ? s : (new String[1])[0]).getBytes();", e.getMessage(),
+            checkMessage(e, "byte[] val = (rng.nextDouble() < 0.5 ? s : (new String[1])[0]).getBytes();", e.getMessage(),
                          "Cannot invoke \"String.getBytes()\"");
         }
 
         try {
             // If we can get the value from more than one bci, we cannot know which one
@@ -1433,35 +1438,35 @@
             // we don't print the failed action we don't print a string at all.
             int[][] a = new int[1][];
             int[][] b = new int[2][];
             long index = 0;
             @SuppressWarnings("unused")
-            int val = (Math.random() < 0.5 ? a[(int)index] : b[(int)index])[13];
+            int val = (rng.nextDouble() < 0.5 ? a[(int)index] : b[(int)index])[13];
         } catch (NullPointerException e) {
-            checkMessage(e, "int val = (Math.random() < 0.5 ? a[(int)index] : b[(int)index])[13]", e.getMessage(),
+            checkMessage(e, "int val = (rng.nextDouble() < 0.5 ? a[(int)index] : b[(int)index])[13]", e.getMessage(),
                          "Cannot load from int array");
         }
 
         try {
             // If we can get the value from more than one bci, we cannot know which one
             // is null. Make sure we don't print the wrong value.  Also make sure if
             // we don't print the failed action we don't print a string at all.
             int[][] a = new int[1][];
             int[][] b = new int[2][];
             long index = 0;
-            int val = (Math.random() < 0.5 ? a : b)[(int)index][13];
+            int val = (rng.nextDouble() < 0.5 ? a : b)[(int)index][13];
         } catch (NullPointerException e) {
-            checkMessage(e, "int val = (Math.random() < 0.5 ? a : b)[(int)index][13]", e.getMessage(),
+            checkMessage(e, "int val = (rng.nextDouble() < 0.5 ? a : b)[(int)index][13]", e.getMessage(),
                          "Cannot load from int array because \"<array>[...]\" is null");
         }
 
         try {
             C c1 = new C();
             C c2 = new C();
-            (Math.random() < 0.5 ? c1 : c2).to_d.num = 77;
+            (rng.nextDouble() < 0.5 ? c1 : c2).to_d.num = 77;
         } catch (NullPointerException e) {
-            checkMessage(e, "(Math.random() < 0.5 ? c1 : c2).to_d.num = 77;", e.getMessage(),
+            checkMessage(e, "(rng.nextDouble() < 0.5 ? c1 : c2).to_d.num = 77;", e.getMessage(),
                          "Cannot assign field \"num\" because \"to_d\" is null");
         }
 
         // Static variable as array index.
         try {
