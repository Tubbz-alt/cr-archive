diff a/test/hotspot/jtreg/vmTestbase/nsk/jdi/Argument/value/value004.java b/test/hotspot/jtreg/vmTestbase/nsk/jdi/Argument/value/value004.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/jdi/Argument/value/value004.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jdi/Argument/value/value004.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -31,10 +31,12 @@
 import com.sun.jdi.connect.*;
 import java.io.*;
 import javax.naming.directory.Attribute;
 import java.util.*;
 
+import jtreg.SkippedException;
+
 /**
  * Test for the control of
  *
  *      Interface:      com.sun.jdi.connect.Connector.Argument
  *      Method:         public java.lang.String value()
@@ -47,14 +49,10 @@
  *                      "command" argument.
  *                      The test sets up the new "command" argument
  *                      value and then checks that new value remains previously
  *                      after connection establishing with debugee VM and
  *                      after debugee VM finishing.
- *
- *      Warning:        Temporarily the test is prepared only for
- *                      Sparc.Solaris.dt_socket-transport of RawCommandLineLaunch
- *                      connector
  */
 
 public class value004 {
     private static Log log;
 
@@ -76,32 +74,19 @@
         } else {
             log.complain("FAILURE: no JDI launching connectors found!");
             return 2;
         }
 
+        boolean skipped = true;
         Iterator lci = lcl.iterator();
-        for (int i = 1; lci.hasNext(); i++) {
+        while (lci.hasNext()) {
             Connector c = (Connector) lci.next();
-            if (c.name().compareTo("com.sun.jdi.RawCommandLineLaunch") != 0) {
+            if (!"com.sun.jdi.RawCommandLineLaunch".equals(c.name())) {
+                log.display("skipping " + c);
                 continue;
             }
             log.display("Connector's transport is: " + c.transport().name());
-            if (c.transport().name().compareTo("dt_socket") != 0) {
-                log.display("WARNING: Temporarily the test is prepared only "
-                          + "for dt_socket-transport of "
-                          + "RawCommandLineLaunch connector!");
-                return 0;
-            }
-            if (System.getProperties().getProperty("os.arch")
-                .compareTo("sparc") != 0 ||
-                System.getProperties().getProperty("os.name")
-                .compareTo("SunOS") != 0) {
-                log.display("WARNING: Temporarily the test is prepared "
-                          + "only for Sparc.Solaris-transport of "
-                          + "RawCommandLineLaunch connector!");
-                return 0;
-            }
             Map<java.lang.String,? extends com.sun.jdi.connect.Connector.Argument> cdfltArgmnts = c.defaultArguments();
             int ksz = cdfltArgmnts.size();
             String av[] = new String[ksz + 1];
             Set ks = cdfltArgmnts.keySet();
             if (ks.isEmpty()) {
@@ -136,11 +121,11 @@
                     continue;
                 }
                 flg = true;
                 ovl = argHandler.getLaunchExecPath() + " "
                      + "-Xdebug -Xnoagent -Djava.compiler=NONE "
-                     + "-Xrunjdwp:transport=dt_socket,suspend=y,"
+                     + "-Xrunjdwp:transport=" + c.transport().name() + ",suspend=y,"
                      + "address=" + address + " nsk.jdi.Argument.value.value004a";
                 if (argval.isValid(ovl)) {
                     argval.setValue(ovl);
                 } else {
                     log.complain("FAILURE: Can't set up new value for "
@@ -211,10 +196,14 @@
                                    + "with " + extcd + " exit code.");
                         return 2;
                     }
                 }
             }
-        };
+            skipped = false;
+        }
+        if (skipped) {
+            throw new SkippedException("no suitable connectors");
+        }
         log.display("Test PASSED!");
         return 0;
     }
 }
