diff a/make/CompileJavaModules.gmk b/make/CompileJavaModules.gmk
--- a/make/CompileJavaModules.gmk
+++ b/make/CompileJavaModules.gmk
@@ -417,10 +417,14 @@
 ################################################################################
 
 jdk.internal.jvmstat_COPY += aliasmap
 
 ################################################################################
+
+jdk.incubator.jextract_COPY += .properties .template
+
+################################################################################
 
 # -parameters provides method's parameters information in class file,
 # JVMCI compilers make use of that information for various sanity checks.
 # Don't use Indy strings concatenation to have good JVMCI startup performance.
 # The exports are needed since JVMCI is dynamically exported (see
diff a/make/autoconf/spec.gmk.in b/make/autoconf/spec.gmk.in
--- a/make/autoconf/spec.gmk.in
+++ b/make/autoconf/spec.gmk.in
@@ -120,10 +120,19 @@
 RELEASE_FILE_OS_ARCH:=@RELEASE_FILE_OS_ARCH@
 
 LIBM:=@LIBM@
 LIBDL:=@LIBDL@
 
+ENABLE_LIBCLANG:=@ENABLE_LIBCLANG@
+CLANG_LIB_PATH:=@CLANG_LIB_PATH@
+CLANG_INCLUDE_PATH:=@CLANG_INCLUDE_PATH@
+CLANG_INCLUDE_AUX_PATH:=@CLANG_INCLUDE_AUX_PATH@
+CLANG_LIBNAME:=@CLANG_LIBNAME@
+LIBCLANG_CPPFLAGS:=@LIBCLANG_CPPFLAGS@
+LIBCLANG_LDFLAGS:=@LIBCLANG_LDFLAGS@
+LIBCLANG_LIBS:=@LIBCLANG_LIBS@
+
 # colon or semicolon
 PATH_SEP:=@PATH_SEP@
 
 # Save the original path before replacing it with the Visual Studio tools
 ORIGINAL_PATH:=@ORIGINAL_PATH@
@@ -598,10 +607,11 @@
 SHARED_LIBRARY_FLAGS=@SHARED_LIBRARY_FLAGS@
 
 # Set origin using the linker, ie use the relative path to the dependent library to find the dependees.
 # (Note absence of := assignment, because we do not want to evaluate the macro body here)
 SET_SHARED_LIBRARY_ORIGIN=@SET_SHARED_LIBRARY_ORIGIN@
+SET_JCLANG_LIBRARY_ORIGIN=@SET_JCLANG_LIBRARY_ORIGIN@
 SET_EXECUTABLE_ORIGIN=@SET_EXECUTABLE_ORIGIN@
 
 # Different OS:es have different ways of naming shared libraries.
 # The SHARED_LIBRARY macro takes "verify" as and argument and returns:
 #    "libverify.so" or "libverify.dylib" or "verify.dll" depending on platform.
diff a/make/common/Modules.gmk b/make/common/Modules.gmk
--- a/make/common/Modules.gmk
+++ b/make/common/Modules.gmk
@@ -160,10 +160,11 @@
     jdk.jlink \
     jdk.jsobject \
     jdk.jshell \
     jdk.jstatd \
     jdk.incubator.foreign \
+    jdk.incubator.jextract \
     jdk.localedata \
     jdk.management \
     jdk.management.agent \
     jdk.management.jfr \
     jdk.naming.dns \
@@ -185,10 +186,11 @@
     java.compiler \
     jdk.compiler \
     jdk.javadoc \
     jdk.jdeps \
     jdk.jshell \
+    jdk.incubator.jextract \
     #
 
 HOTSPOT_MODULES := \
     jdk.aot \
     jdk.hotspot.agent \
diff a/src/java.base/share/classes/module-info.java b/src/java.base/share/classes/module-info.java
--- a/src/java.base/share/classes/module-info.java
+++ b/src/java.base/share/classes/module-info.java
@@ -171,11 +171,13 @@
     exports jdk.internal.logger to
         java.logging;
     exports jdk.internal.org.objectweb.asm to
         jdk.jartool,
         jdk.jfr,
-        jdk.jlink;
+        jdk.jlink,
+        jdk.scripting.nashorn,
+        jdk.incubator.jextract;
     exports jdk.internal.org.objectweb.asm.tree to
         jdk.jfr,
         jdk.jlink;
     exports jdk.internal.org.objectweb.asm.util to
         jdk.jfr;
