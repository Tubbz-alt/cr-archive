diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/OutputFactory.java
@@ -22,17 +22,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package jdk.incubator.jextract.tool;
 
+import jdk.incubator.foreign.*;
 import jdk.incubator.jextract.Declaration;
 import jdk.incubator.jextract.Type;
-import jdk.incubator.foreign.FunctionDescriptor;
-import jdk.incubator.foreign.MemoryAddress;
-import jdk.incubator.foreign.MemoryLayout;
-import jdk.incubator.foreign.MemorySegment;
-import jdk.incubator.foreign.SystemABI;
 import jdk.incubator.jextract.Type.Primitive;
 import jdk.internal.foreign.abi.SharedUtils;
 
 import javax.tools.JavaFileObject;
 import javax.tools.SimpleJavaFileObject;
@@ -351,42 +347,46 @@
 
         String fieldName = tree.name();
         String symbol = tree.name();
         assert !symbol.isEmpty();
         assert !fieldName.isEmpty();
-
-        // FIXME: we need tree transformer. The mangling should be a separate tree transform phase
-        if (parent == null) {
-            fieldName = tree.name();
-        }
         fieldName = Utils.javaSafeIdentifier(fieldName);
 
         Type type = tree.type();
         MemoryLayout layout = tree.layout().orElse(Type.layoutFor(type).orElse(null));
         if (layout == null) {
             //no layout - abort
             return null;
         }
         Class<?> clazz = typeTranslator.getJavaType(type);
         if (tree.kind() == Declaration.Variable.Kind.BITFIELD || clazz == MemoryAddress.class ||
-                clazz == MemorySegment.class || layout.byteSize() > 8) {
+                (layout instanceof ValueLayout && layout.byteSize() > 8)) {
             //skip
             return null;
         }
 
+        boolean isSegment = clazz == MemorySegment.class;
         MemoryLayout treeLayout = tree.layout().orElseThrow();
         if (parent != null) { //struct field
             MemoryLayout parentLayout = parentLayout(parent);
-            structBuilder.addVarHandleGetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
-            structBuilder.addGetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
-            structBuilder.addSetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
+            if (isSegment) {
+                structBuilder.addAddressOf(fieldName, tree.name(), treeLayout, clazz, parentLayout);
+            } else {
+                structBuilder.addVarHandleGetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
+                structBuilder.addGetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
+                structBuilder.addSetter(fieldName, tree.name(), treeLayout, clazz, parentLayout);
+            }
         } else {
-            builder.addLayoutGetter(fieldName, layout);
-            builder.addVarHandleGetter(fieldName, tree.name(), treeLayout, clazz, null);
-            builder.addAddressGetter(fieldName, tree.name());
-            builder.addGetter(fieldName, tree.name(), treeLayout, clazz, null);
-            builder.addSetter(fieldName, tree.name(), treeLayout, clazz, null);
+            if (isSegment) {
+                builder.addAddressOf(fieldName, tree.name(), treeLayout, clazz, null);
+            } else {
+                builder.addLayoutGetter(fieldName, layout);
+                builder.addVarHandleGetter(fieldName, tree.name(), treeLayout, clazz,null);
+                builder.addAddressGetter(fieldName, tree.name(), treeLayout);
+                builder.addGetter(fieldName, tree.name(), treeLayout, clazz, null);
+                builder.addSetter(fieldName, tree.name(), treeLayout, clazz, null);
+            }
         }
 
         return null;
     }
 
