diff a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/ConstantHelper.java b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/ConstantHelper.java
--- a/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/ConstantHelper.java
+++ b/src/jdk.incubator.jextract/share/classes/jdk/incubator/jextract/tool/ConstantHelper.java
@@ -144,11 +144,12 @@
                 runtimeHelper,
                 "lookupGlobalVariable",
                 methodType(
                         MemoryAddress.class,
                         LibraryLookup[].class,
-                        String.class)
+                        String.class,
+                        MemoryLayout.class)
         );
         this.MH_makeCString = findRuntimeHelperBootstrap(
                 cString,
                 "toCString",
                 methodType(
@@ -186,12 +187,12 @@
 
     public DirectMethodHandleDesc addMethodHandle(String javaName, String nativeName, MethodType mtype, FunctionDescriptor desc, boolean varargs) {
         return emitCondyGetter(javaName + "$MH", MethodHandle.class, methodHandleDesc(nativeName, mtype, desc, varargs));
     }
 
-    public DirectMethodHandleDesc addAddress(String javaName, String nativeName) {
-        return emitCondyGetter(javaName + "$ADDR", MemoryAddress.class, globalVarAddressDesc(nativeName));
+    public DirectMethodHandleDesc addAddress(String javaName, String nativeName, MemoryLayout layout) {
+        return emitCondyGetter(javaName + "$ADDR", MemoryAddress.class, globalVarAddressDesc(nativeName, layout));
     }
 
     public DirectMethodHandleDesc addFunctionDesc(String javaName, FunctionDescriptor fDesc) {
         return emitCondyGetter(javaName + "$DESC", FunctionDescriptor.class, desc(fDesc));
     }
@@ -417,12 +418,12 @@
         } else {
             return varHandleDesc(javaName, desc(layout), desc(type));
         }
     }
 
-    private ConstantDesc globalVarAddressDesc(String name) {
-        return DynamicConstantDesc.ofNamed(BSM_INVOKE, "ADDR_" + name, CD_MemoryAddress, MH_lookupGlobalVariable, LIBRARIES, name);
+    private ConstantDesc globalVarAddressDesc(String name, MemoryLayout layout) {
+        return DynamicConstantDesc.ofNamed(BSM_INVOKE, "ADDR_" + name, CD_MemoryAddress, MH_lookupGlobalVariable, LIBRARIES, name, desc(layout));
     }
 
     private ConstantDesc addressDesc(long value) {
         return DynamicConstantDesc.ofNamed(BSM_INVOKE, "MA_" + value, CD_MemoryAddress, MH_MemoryAddress_ofLong, value);
     }
