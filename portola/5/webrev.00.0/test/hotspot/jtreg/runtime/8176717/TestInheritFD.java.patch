diff a/test/hotspot/jtreg/runtime/8176717/TestInheritFD.java b/test/hotspot/jtreg/runtime/8176717/TestInheritFD.java
--- a/test/hotspot/jtreg/runtime/8176717/TestInheritFD.java
+++ b/test/hotspot/jtreg/runtime/8176717/TestInheritFD.java
@@ -67,11 +67,11 @@
  * (windows can not rename opened files easily)
  *
  * The third VM communicates the success to rename the file by printing "CLOSED
  * FD". The first VM checks that the string was printed by the third VM.
  *
- * On unix like systems "lsof" or "pfiles" is used.
+ * On unix like systems "lsof" is used.
  */
 
 public class TestInheritFD {
 
     public static final String LEAKS_FD = "VM RESULT => LEAKS FD";
@@ -171,16 +171,15 @@
             throw new RuntimeException(e);
         }
     }
 
     static Optional<Command> lsofCommandCache = stream(new Command[]{
-            new Command("/usr/bin/lsof", "-p", true),
-            new Command("/usr/sbin/lsof", "-p", true),
-            new Command("/bin/lsof", "-p", true),
-            new Command("/sbin/lsof", "-p", true),
-            new Command("/usr/local/bin/lsof", "-p", true),
-            new Command("/usr/bin/pfiles", "-F", false), // Solaris
+            new Command("/usr/bin/lsof", "-p"),
+            new Command("/usr/sbin/lsof", "-p"),
+            new Command("/bin/lsof", "-p"),
+            new Command("/sbin/lsof", "-p"),
+            new Command("/usr/local/bin/lsof", "-p"),
         })
         .filter(command -> command.exists())
         .findFirst();
 
     static Optional<Command> lsofCommand() {
@@ -194,11 +193,11 @@
     static Collection<String> outputContainingFilenames() {
         String pid = getPid();
         Command command = lsofCmd();
         System.out.printf("using command: %s%n", command);
         return run(command.name, command.option, pid)
-                .filter(line -> !command.checkPid || line.contains(pid))
+                .filter(line -> line.contains(pid))
                 .collect(toList());
     }
 
     static boolean findOpenLogFile(Collection<String> fileNames) {
         return fileNames.stream()
@@ -219,24 +218,22 @@
     }
 
     private static class Command {
         private final String name;
         private final String option;
-        private final boolean checkPid;
 
-        public Command(String name, String option, boolean checkPid) {
+        public Command(String name, String option) {
             this.name = name;
             this.option = option;
-            this.checkPid = checkPid;
         }
 
         private boolean exists() {
             return new File(name).exists();
         }
 
         public String toString() {
-            return String.format("[name: %s, option: %s, check pid: %b]",
-                    name, option, checkPid);
+            return String.format("[name: %s, option: %s]",
+                    name, option);
         }
     }
 }
 
