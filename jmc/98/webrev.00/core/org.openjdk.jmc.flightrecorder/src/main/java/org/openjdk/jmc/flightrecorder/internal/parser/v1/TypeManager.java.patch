diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/TypeManager.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/TypeManager.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/TypeManager.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/TypeManager.java
@@ -113,13 +113,10 @@
 			}
 			subSink.addEvent(reusableStruct);
 		}
 	}
 
-	// NOTE: Using constant pool id as identifier.
-	private final Map<Long, StructContentType<Object[]>> STRUCT_TYPES = new HashMap<>();
-
 	private class TypeEntry {
 		private static final String STRUCT_TYPE_CLASS = "java.lang.Class"; //$NON-NLS-1$
 		private static final String STRUCT_TYPE_THREAD = "java.lang.Thread"; //$NON-NLS-1$
 		private static final String STRUCT_TYPE_STACK_TRACE = "com.oracle.jfr.types.StackTrace"; //$NON-NLS-1$
 		private static final String STRUCT_TYPE_STACK_TRACE_2 = "jdk.types.StackTrace"; //$NON-NLS-1$
@@ -220,19 +217,25 @@
 			case STRUCT_TYPE_MODULE_2:
 				return new ReflectiveReader(JfrJavaModule.class, fieldCount, UnitLookup.MODULE);
 			case STRUCT_TYPE_PACKAGE_2:
 				return new ReflectiveReader(JfrJavaPackage.class, fieldCount, UnitLookup.PACKAGE);
 			default:
-				synchronized (STRUCT_TYPES) {
-					StructContentType<Object[]> structType = STRUCT_TYPES.get(element.classId);
-					if (structType == null) {
-						structType = new StructContentType<>(element.typeIdentifier, element.label,
-								element.description);
-						STRUCT_TYPES.put(element.classId, structType);
-					}
-					return new StructReader(structType, fieldCount);
+				return createDefaultStructReader(fieldCount);
+			}
+		}
+
+		private AbstractStructReader createDefaultStructReader(int fieldCount) {
+			synchronized (structTypes) {
+				StructContentType<Object[]> structType = structTypes.get(element.classId);
+				if (structType == null) {
+					// Note that these struct types won't have localized names - so unless there really is a label
+					// set, we don't really care and set label to identifier.
+					structType = new StructContentType<>(element.typeIdentifier,
+							element.label != null ? element.label : element.typeIdentifier, element.description);
+					structTypes.put(element.classId, structType);
 				}
+				return new StructReader(structType, fieldCount);
 			}
 		}
 
 		private AbstractStructReader createStructReaderV1(
 			String identifier, String name, String description, int fieldCount) {
@@ -262,19 +265,11 @@
 			case STRUCT_TYPE_MODULE:
 				return new ReflectiveReader(JfrJavaModule.class, fieldCount, UnitLookup.MODULE);
 			case STRUCT_TYPE_PACKAGE:
 				return new ReflectiveReader(JfrJavaPackage.class, fieldCount, UnitLookup.PACKAGE);
 			default:
-				synchronized (STRUCT_TYPES) {
-					StructContentType<Object[]> structType = STRUCT_TYPES.get(element.classId);
-					if (structType == null) {
-						structType = new StructContentType<>(element.typeIdentifier, element.label,
-								element.description);
-						STRUCT_TYPES.put(element.classId, structType);
-					}
-					return new StructReader(structType, fieldCount);
-				}
+				return createDefaultStructReader(fieldCount);
 			}
 		}
 
 		void resolveConstants() throws InvalidJfrFileException {
 			IValueReader r = reader;
@@ -370,10 +365,12 @@
 				}
 			}
 		}
 	}
 
+	// NOTE: Using constant pool id as identifier.
+	private final Map<Long, StructContentType<Object[]>> structTypes = new HashMap<>();
 	private final FastAccessNumberMap<TypeEntry> otherTypes = new FastAccessNumberMap<>();
 	private final FastAccessNumberMap<EventTypeEntry> eventTypes = new FastAccessNumberMap<>();
 	private final ChunkStructure header;
 
 	TypeManager(List<ClassElement> classList, LoaderContext context, ChunkStructure header)
