diff a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java
--- a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java
+++ b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/io/IOToolkit.java
@@ -56,10 +56,12 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.ZipInputStream;
 
+import org.openjdk.jmc.common.messages.internal.Messages;
+
 /**
  * Common functionality you might want when you're working with I/O.
  */
 public final class IOToolkit {
 	/**
@@ -70,10 +72,15 @@
 	/**
 	 * Magic bytes for recognizing GZip.
 	 */
 	private static final int MAGIC_GZ[] = new int[] {31, 139};
 
+	/**
+	 * Magic bytes for recognizing LZ4.
+	 */
+	private static final int MAGIC_LZ4[] = new int[] {4, 34, 77, 24};
+
 	private IOToolkit() {
 		throw new Error("Don't"); //$NON-NLS-1$
 	}
 
 	/**
@@ -111,10 +118,13 @@
 				return new GZIPInputStream(in);
 			} else if (hasMagic(file, MAGIC_ZIP)) {
 				ZipInputStream zin = new ZipInputStream(in);
 				zin.getNextEntry();
 				return zin;
+			} else if (hasMagic(file, MAGIC_LZ4)) {
+				throw new UnsupportedFormatException(
+						Messages.getString(Messages.UnsupportedFormatException_LZ4_NOT_SUPPORTED)); //$NON-NLS-1$
 			}
 			return in;
 		} catch (RuntimeException e) {
 			closeSilently(fin);
 			throw e;
@@ -153,10 +163,14 @@
 			in.reset();
 			ZipInputStream zin = new ZipInputStream(in);
 			zin.getNextEntry();
 			return zin;
 		}
+		if (hasMagic(in, MAGIC_LZ4)) {
+			throw new UnsupportedFormatException(
+					Messages.getString(Messages.UnsupportedFormatException_LZ4_NOT_SUPPORTED)); //$NON-NLS-1$
+		}
 		in.reset();
 		return in;
 	}
 
 	/**
