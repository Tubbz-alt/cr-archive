diff a/agent/src/main/java/org/openjdk/jmc/agent/Agent.java b/agent/src/main/java/org/openjdk/jmc/agent/Agent.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/Agent.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/Agent.java
@@ -56,11 +56,10 @@
 public class Agent {
 	/**
 	 * This should be generated as part of the build later.
 	 */
 	public final static String VERSION = "0.0.2"; //$NON-NLS-1$
-	private final static String DEFAULT_CONFIG = "jfrprobes.xml"; //$NON-NLS-1$
 	private static boolean loadedDynamically = false;
 
 	/**
 	 * This method is run when the agent is started from the command line.
 	 *
@@ -100,11 +99,12 @@
 	 * @throws XMLStreamException
 	 *             if the configuration could not be read.
 	 */
 	public static void initializeAgent(InputStream configuration, Instrumentation instrumentation)
 			throws XMLStreamException {
-		TransformRegistry registry = DefaultTransformRegistry.from(configuration);
+		TransformRegistry registry =
+				configuration != null ? DefaultTransformRegistry.from(configuration) : DefaultTransformRegistry.empty();
 		instrumentation.addTransformer(new Transformer(registry), true);
 		AgentManagementFactory.createAndRegisterAgentControllerMBean(instrumentation, registry);
 		if (loadedDynamically) {
 			retransformClasses(registry.getClassNames(), instrumentation);
 		}
@@ -126,12 +126,18 @@
 	 * @param instrumentation
 	 *            the {@link Instrumentation} instance.
 	 */
 	private static void initializeAgent(String agentArguments, Instrumentation instrumentation) {
 		if (agentArguments == null || agentArguments.trim().length() == 0) {
-			agentArguments = DEFAULT_CONFIG;
+			try {
+				initializeAgent((InputStream) null, instrumentation);
+			} catch (XMLStreamException e) {
+				// noop
+			}
+			return;
 		}
+
 		File file = new File(agentArguments);
 		try (InputStream stream = new FileInputStream(file)) {
 			initializeAgent(stream, instrumentation);
 		} catch (XMLStreamException | IOException e) {
 			getLogger().log(Level.SEVERE, "Failed to read jfr probe definitions from " + file.getPath(), e); //$NON-NLS-1$
diff a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
@@ -86,10 +86,14 @@
 			return false;
 		}
 		return true;
 	}
 
+	public static TransformRegistry empty() {
+		return new DefaultTransformRegistry();
+	}
+
 	public static TransformRegistry from(InputStream in) throws XMLStreamException {
 		HashMap<String, String> globalDefaults = new HashMap<>();
 		DefaultTransformRegistry registry = new DefaultTransformRegistry();
 		XMLInputFactory inputFactory = XMLInputFactory.newInstance();
 		XMLStreamReader streamReader = inputFactory.createXMLStreamReader(in);
diff a/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefaultTransformRegistry.java b/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefaultTransformRegistry.java
--- a/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefaultTransformRegistry.java
+++ b/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefaultTransformRegistry.java
@@ -74,10 +74,16 @@
 				.from(TestToolkit.getProbesXMLFromTemplate(getTemplate(), "HasPendingTransforms")); //$NON-NLS-1$
 		assertNotNull(registry);
 		assertTrue(registry.hasPendingTransforms(Type.getInternalName(InstrumentMe.class)));
 	}
 
+	@Test
+	public void testEmpty() {
+		TransformRegistry registry = DefaultTransformRegistry.empty();
+		assertNotNull(registry);
+	}
+
 	@Test
 	public void testFrom() throws XMLStreamException, IOException {
 		TransformRegistry registry = DefaultTransformRegistry
 				.from(TestToolkit.getProbesXMLFromTemplate(getTemplate(), "From")); //$NON-NLS-1$
 		assertNotNull(registry);
