diff a/agent/src/main/java/org/openjdk/jmc/agent/jfr/JFRTransformDescriptor.java b/agent/src/main/java/org/openjdk/jmc/agent/jfr/JFRTransformDescriptor.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/jfr/JFRTransformDescriptor.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/jfr/JFRTransformDescriptor.java
@@ -30,15 +30,20 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent.jfr;
 
+import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import javax.management.openmbean.CompositeData;
+import javax.management.openmbean.TabularData;
+
 import org.objectweb.asm.Type;
 import org.openjdk.jmc.agent.Field;
 import org.openjdk.jmc.agent.Method;
 import org.openjdk.jmc.agent.Parameter;
 import org.openjdk.jmc.agent.ReturnValue;
@@ -80,10 +85,37 @@
 		this.parameters = parameters;
 		this.fields = fields;
 		this.returnValue = returnValue;
 	}
 
+	public static JFRTransformDescriptor from(CompositeData cd) {
+		List<Parameter> params = new ArrayList<>();
+		CompositeData[] cdParams = (CompositeData[]) cd.get("parameters");
+		for (CompositeData cdParam : cdParams) {
+			params.add(Parameter.from(cdParam));
+		}
+
+		List<Field> fields = new ArrayList<>();
+		CompositeData[] cdFields = (CompositeData[]) cd.get("fields");
+		for (CompositeData cdField : cdFields) {
+			fields.add(Field.from(cdField));
+		}
+
+		Map<String, String> attr = new HashMap<>();
+		TabularData td = (TabularData) cd.get("transformationAttributes");
+		Object[]  values =  td.values().toArray();
+		for (int i = 0; i < values.length; i++){
+			CompositeData cdValue = (CompositeData) values[i];
+			String value = (String) cdValue.get("value");
+			String key = (String) cdValue.get("key");
+			attr.put(key, value);
+		}
+
+		return new JFRTransformDescriptor((String) cd.get("id"), (String) cd.get("className"), Method.from((CompositeData) cd.get("method")),
+				attr, params, ReturnValue.from((CompositeData) cd.get("returnValue")), fields);
+	}
+
 	public String getEventClassName() {
 		return eventClassName;
 	}
 
 	public String getEventName() {
