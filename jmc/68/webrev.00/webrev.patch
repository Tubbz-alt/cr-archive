diff a/agent/pom.xml b/agent/pom.xml
--- a/agent/pom.xml
+++ b/agent/pom.xml
@@ -100,10 +100,11 @@
 					<argLine> --add-opens java.base/jdk.internal.misc=ALL-UNNAMED
 						-XX:+FlightRecorder</argLine>
 					<excludes>
 						<exclude>TestDefineEventProbes.java</exclude>
 						<exclude>TestPermissionChecks.java</exclude>
+						<exclude>TestRetrieveCurrentTransforms.java</exclude>
 					</excludes>
 				</configuration>
 			</plugin>
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
@@ -134,10 +135,23 @@
 								-XX:+FlightRecorder -javaagent:target/org.openjdk.jmc.agent-1.0.0-SNAPSHOT.jar=target/test-classes/org/openjdk/jmc/agent/test/jfrprobes_template.xml
 								 -cp target/org.openjdk.jmc.agent-1.0.0-SNAPSHOT.jar:target/test-classes/ </argLine>
 							<includes>TestDefineEventProbes.java</includes>
 						</configuration>
 					</execution>
+					<execution>
+						<id>test-retrieve-transforms</id>
+						<goals>
+							<goal>integration-test</goal>
+							<goal>verify</goal>
+						</goals>
+						<configuration>
+							<argLine> --add-opens java.base/jdk.internal.misc=ALL-UNNAMED
+								-XX:+FlightRecorder -javaagent:target/org.openjdk.jmc.agent-1.0.0-SNAPSHOT.jar=target/test-classes/org/openjdk/jmc/agent/test/jfrprobes_simple.xml
+								 -cp target/org.openjdk.jmc.agent-1.0.0-SNAPSHOT.jar:target/test-classes/ </argLine>
+							<includes>TestRetrieveCurrentTransforms.java</includes>
+						</configuration>
+					</execution>
         		</executions>
 			</plugin>
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-resources-plugin</artifactId>
diff a/agent/src/main/java/org/openjdk/jmc/agent/Field.java b/agent/src/main/java/org/openjdk/jmc/agent/Field.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/Field.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/Field.java
@@ -33,10 +33,13 @@
 package org.openjdk.jmc.agent;
 
 import org.openjdk.jmc.agent.util.expression.ExpressionResolver;
 import org.openjdk.jmc.agent.util.expression.IllegalSyntaxException;
 import org.openjdk.jmc.agent.util.expression.ReferenceChain;
+
+import javax.management.openmbean.CompositeData;
+
 import org.openjdk.jmc.agent.util.TypeUtils;
 
 public class Field implements Attribute {
 
 	private final String name;
@@ -59,10 +62,15 @@
 		this.relationKey = relationKey;
 		this.converterClassName = converterClassName;
 		this.fieldName = "field" + TypeUtils.deriveIdentifierPart(name);
 	}
 
+	public static Field from(CompositeData cd) {
+		return new Field((String) cd.get("name"), (String) cd.get("expression"), (String) cd.get("description"),
+				(String) cd.get("contentType"), (String) cd.get("relationKey"), (String) cd.get("converterClassName"));
+	}
+
 	@Override
 	public String getName() {
 		return this.name;
 	}
 
diff a/agent/src/main/java/org/openjdk/jmc/agent/Method.java b/agent/src/main/java/org/openjdk/jmc/agent/Method.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/Method.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/Method.java
@@ -30,10 +30,12 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent;
 
+import javax.management.openmbean.CompositeData;
+
 /**
  * Definition of a method to be logged by the agent.
  */
 public class Method {
 	private String name;
@@ -42,10 +44,14 @@
 	public Method(String name, String signature) {
 		this.name = name;
 		this.signature = signature;
 	}
 
+	public static Method from(CompositeData cd) {
+		return new Method((String) cd.get("name"), (String) cd.get("signature"));
+	}
+
 	public String getName() {
 		return name;
 	}
 
 	public String getSignature() {
diff a/agent/src/main/java/org/openjdk/jmc/agent/Parameter.java b/agent/src/main/java/org/openjdk/jmc/agent/Parameter.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/Parameter.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/Parameter.java
@@ -30,10 +30,12 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent;
 
+import javax.management.openmbean.CompositeData;
+
 import org.openjdk.jmc.agent.util.TypeUtils;
 
 /**
  * Metadata for a parameter to be logged by the agent.
  */
@@ -57,10 +59,15 @@
 		this.relationKey = relationKey;
 		this.converterClassName = converterClassName;
 		this.fieldName = "field" + TypeUtils.deriveIdentifierPart(name); //$NON-NLS-1$
 	}
 
+	public static Parameter from(CompositeData cd) {
+		return new Parameter((int) cd.get("index"), (String) cd.get("name"), (String) cd.get("description"),
+				(String) cd.get("contentType"), (String) cd.get("relationKey"), (String) cd.get("converterClassName"));
+	}
+
 	public int getIndex() {
 		return index;
 	}
 
 	public String getName() {
diff a/agent/src/main/java/org/openjdk/jmc/agent/ReturnValue.java b/agent/src/main/java/org/openjdk/jmc/agent/ReturnValue.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/ReturnValue.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/ReturnValue.java
@@ -30,10 +30,12 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent;
 
+import javax.management.openmbean.CompositeData;
+
 import org.openjdk.jmc.agent.util.TypeUtils;
 
 /**
  * Metadata for a return value to be logged by the agent.
  */
@@ -52,10 +54,18 @@
 		this.relationKey = relationKey;
 		this.converterClassName = converterClassName;
 		this.fieldName = "field" + TypeUtils.deriveIdentifierPart(this.name); //$NON-NLS-1$
 	}
 
+	public static ReturnValue from(CompositeData cd) {
+		if (cd == null) {
+			return null;
+		}
+		return new ReturnValue((String) cd.get("name"), (String) cd.get("description"), (String) cd.get("contentType"),
+				(String) cd.get("relationKey"), (String) cd.get("converterClassName"));
+	}
+
 	public String getName() {
 		return name;
 	}
 
 	public String getDescription() {
diff a/agent/src/main/java/org/openjdk/jmc/agent/jfr/JFRTransformDescriptor.java b/agent/src/main/java/org/openjdk/jmc/agent/jfr/JFRTransformDescriptor.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/jfr/JFRTransformDescriptor.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/jfr/JFRTransformDescriptor.java
@@ -30,15 +30,20 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent.jfr;
 
+import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import javax.management.openmbean.CompositeData;
+import javax.management.openmbean.TabularData;
+
 import org.objectweb.asm.Type;
 import org.openjdk.jmc.agent.Field;
 import org.openjdk.jmc.agent.Method;
 import org.openjdk.jmc.agent.Parameter;
 import org.openjdk.jmc.agent.ReturnValue;
@@ -80,10 +85,37 @@
 		this.parameters = parameters;
 		this.fields = fields;
 		this.returnValue = returnValue;
 	}
 
+	public static JFRTransformDescriptor from(CompositeData cd) {
+		List<Parameter> params = new ArrayList<>();
+		CompositeData[] cdParams = (CompositeData[]) cd.get("parameters");
+		for (CompositeData cdParam : cdParams) {
+			params.add(Parameter.from(cdParam));
+		}
+
+		List<Field> fields = new ArrayList<>();
+		CompositeData[] cdFields = (CompositeData[]) cd.get("fields");
+		for (CompositeData cdField : cdFields) {
+			fields.add(Field.from(cdField));
+		}
+
+		Map<String, String> attr = new HashMap<>();
+		TabularData td = (TabularData) cd.get("transformationAttributes");
+		Object[]  values =  td.values().toArray();
+		for (int i = 0; i < values.length; i++){
+			CompositeData cdValue = (CompositeData) values[i];
+			String value = (String) cdValue.get("value");
+			String key = (String) cdValue.get("key");
+			attr.put(key, value);
+		}
+
+		return new JFRTransformDescriptor((String) cd.get("id"), (String) cd.get("className"), Method.from((CompositeData) cd.get("method")),
+				attr, params, ReturnValue.from((CompositeData) cd.get("returnValue")), fields);
+	}
+
 	public String getEventClassName() {
 		return eventClassName;
 	}
 
 	public String getEventName() {
diff a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
@@ -32,19 +32,22 @@
  */
 package org.openjdk.jmc.agent.jmx;
 
 import java.lang.instrument.Instrumentation;
 import java.lang.management.ManagementPermission;
+import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import org.openjdk.jmc.agent.TransformDescriptor;
 import org.openjdk.jmc.agent.TransformRegistry;
+import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;
 
-public class AgentController implements AgentControllerMBean {
+public class AgentController implements AgentControllerMXBean {
 	
 	private static final Logger logger = Logger.getLogger(AgentController.class.getName());
 	
 	private final Instrumentation instrumentation;
 	private final TransformRegistry registry;
@@ -90,10 +93,25 @@
 		registry.setRevertInstrumentation(true);
 		instrumentation.retransformClasses(classesToRetransformArray);
 		registry.setRevertInstrumentation(false);
 	}
 
+	public JFRTransformDescriptor[] retrieveCurrentTransforms() {
+		checkSecurity();
+		Set<String> classNames = registry.getClassNames();
+		List<TransformDescriptor> tds  = new ArrayList<>();
+		for (String className : classNames) {
+			tds.addAll(registry.getTransformData(className));
+		}
+
+		List<JFRTransformDescriptor> jfrTds = new ArrayList<>();
+		for (TransformDescriptor td :tds) {
+			jfrTds.add((JFRTransformDescriptor) td);
+		}
+		return (jfrTds.toArray(new JFRTransformDescriptor[0]));
+	}
+
 	private void checkSecurity() {
 		  SecurityManager secMan = System.getSecurityManager();
 		  if (secMan != null) {
 		    secMan.checkPermission(new ManagementPermission("control"));
 		  }
diff a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentControllerMBean.java b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentControllerMBean.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentControllerMBean.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
- * 
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- * 
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- * 
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- * 
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- * 
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.agent.jmx;
-
-public interface AgentControllerMBean {
-	public void defineEventProbes(String xmlDescription) throws Exception;
-}
diff a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentControllerMXBean.java b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentControllerMXBean.java
--- /dev/null
+++ b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentControllerMXBean.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * 
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ * 
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ * 
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ * 
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ * 
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.agent.jmx;
+
+import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;
+
+public interface AgentControllerMXBean {
+
+	public void defineEventProbes(String xmlDescription) throws Exception;
+
+	public JFRTransformDescriptor[] retrieveCurrentTransforms();
+}
diff a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentManagementFactory.java b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentManagementFactory.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentManagementFactory.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentManagementFactory.java
@@ -48,11 +48,11 @@
 public final class AgentManagementFactory {
 	private static final String AGENT_OBJECT_NAME = "org.openjdk.jmc.jfr.agent:type=AgentController"; //$NON-NLS-1$
 
 	private static AgentController agentControllerMBean;
 
-	public static AgentControllerMBean getAgentControllerBean() {
+	public static AgentControllerMXBean getAgentControllerBean() {
 		return agentControllerMBean;
 	}
 
 	public static void createAndRegisterAgentControllerMBean(
 		Instrumentation instrumentation, TransformRegistry registry) {
diff a/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefineEventProbes.java b/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefineEventProbes.java
--- a/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefineEventProbes.java
+++ b/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefineEventProbes.java
@@ -55,11 +55,11 @@
 import org.openjdk.jmc.agent.Method;
 import org.openjdk.jmc.agent.Parameter;
 import org.openjdk.jmc.agent.ReturnValue;
 import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;
 import org.openjdk.jmc.agent.jfrnext.impl.JFRNextEventClassGenerator;
-import org.openjdk.jmc.agent.jmx.AgentControllerMBean;
+import org.openjdk.jmc.agent.jmx.AgentControllerMXBean;
 import org.openjdk.jmc.agent.util.TypeUtils;
 
 public class TestDefineEventProbes {
 
 	private static final String AGENT_OBJECT_NAME = "org.openjdk.jmc.jfr.agent:type=AgentController"; //$NON-NLS-1$
@@ -160,12 +160,12 @@
 		TypeUtils.defineClass(eventTd.getEventClassName(), modifiedEvent, 0, modifiedEvent.length,
 				ClassLoader.getSystemClassLoader(), null);
 	}
 
 	private void doDefineEventProbes(String xmlDescription) throws Exception  {
-		AgentControllerMBean mbean = JMX.newMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),
-				new ObjectName(AGENT_OBJECT_NAME), AgentControllerMBean.class, false);
+		AgentControllerMXBean mbean = JMX.newMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),
+				new ObjectName(AGENT_OBJECT_NAME), AgentControllerMXBean.class, false);
 		mbean.defineEventProbes(xmlDescription);
 	}
 
 	public void test() {
 		//Dummy method for instrumentation
diff a/agent/src/test/java/org/openjdk/jmc/agent/test/TestPermissionChecks.java b/agent/src/test/java/org/openjdk/jmc/agent/test/TestPermissionChecks.java
--- a/agent/src/test/java/org/openjdk/jmc/agent/test/TestPermissionChecks.java
+++ b/agent/src/test/java/org/openjdk/jmc/agent/test/TestPermissionChecks.java
@@ -38,11 +38,11 @@
 
 import javax.management.JMX;
 import javax.management.ObjectName;
 
 import org.junit.Test;
-import org.openjdk.jmc.agent.jmx.AgentControllerMBean;
+import org.openjdk.jmc.agent.jmx.AgentControllerMXBean;
 
 public class TestPermissionChecks {
 
 	private static final String AGENT_OBJECT_NAME = "org.openjdk.jmc.jfr.agent:type=AgentController"; //$NON-NLS-1$
 
@@ -56,12 +56,12 @@
 		}
 		assertTrue(exceptionThrown);
 	}
 
 	private void doDefineEventProbes(String xmlDescription) throws Exception  {
-		AgentControllerMBean mbean = JMX.newMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),
-				new ObjectName(AGENT_OBJECT_NAME), AgentControllerMBean.class, false);
+		AgentControllerMXBean mbean = JMX.newMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),
+				new ObjectName(AGENT_OBJECT_NAME), AgentControllerMXBean.class, false);
 		mbean.defineEventProbes(xmlDescription);
 	}
 
 	public void test() {
 		//Dummy method for instrumentation
diff a/agent/src/test/java/org/openjdk/jmc/agent/test/TestRetrieveCurrentTransforms.java b/agent/src/test/java/org/openjdk/jmc/agent/test/TestRetrieveCurrentTransforms.java
--- /dev/null
+++ b/agent/src/test/java/org/openjdk/jmc/agent/test/TestRetrieveCurrentTransforms.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Red Hat Inc. All rights reserved.
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.agent.test;
+
+import java.lang.management.ManagementFactory;
+
+import javax.management.JMX;
+import javax.management.ObjectName;
+
+import org.junit.Assert;
+import org.junit.Test;
+import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;
+import org.openjdk.jmc.agent.jmx.AgentControllerMXBean;
+
+public class TestRetrieveCurrentTransforms {
+
+	private static final String AGENT_OBJECT_NAME = "org.openjdk.jmc.jfr.agent:type=AgentController"; //$NON-NLS-1$
+	private static final String EVENT_ID = "demo.jfr.test1"; //$NON-NLS-1$
+	private static final String METHOD_NAME = "printHelloWorldJFR1"; //$NON-NLS-1$
+	private static final String FIELD_NAME = "'InstrumentMe.STATIC_STRING_FIELD'"; //$NON-NLS-1$
+
+	@Test
+	public void testRetreiveCurrentTransforms() throws Exception {
+		JFRTransformDescriptor[] jfrTds = doRetrieveCurrentTransforms();
+		Assert.assertTrue(jfrTds.length == 1);
+		for (JFRTransformDescriptor jfrTd : jfrTds) {
+			Assert.assertEquals(EVENT_ID, jfrTd.getId());
+			Assert.assertEquals(METHOD_NAME, jfrTd.getMethod().getName());
+			Assert.assertEquals(FIELD_NAME, jfrTd.getFields().get(0).getName());
+		}
+	}
+
+	private JFRTransformDescriptor[] doRetrieveCurrentTransforms() throws Exception {
+		AgentControllerMXBean mbean = JMX.newMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),
+				new ObjectName(AGENT_OBJECT_NAME), AgentControllerMXBean.class, false);
+		return mbean.retrieveCurrentTransforms();
+	}
+
+	public void test() {
+		//Dummy method for instrumentation
+	}
+}
diff a/agent/src/test/resources/org/openjdk/jmc/agent/test/jfrprobes_simple.xml b/agent/src/test/resources/org/openjdk/jmc/agent/test/jfrprobes_simple.xml
--- /dev/null
+++ b/agent/src/test/resources/org/openjdk/jmc/agent/test/jfrprobes_simple.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+   Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+
+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+
+   The contents of this file are subject to the terms of either the Universal Permissive License
+   v 1.0 as shown at http://oss.oracle.com/licenses/upl
+
+   or the following license:
+
+   Redistribution and use in source and binary forms, with or without modification, are permitted
+   provided that the following conditions are met:
+
+   1. Redistributions of source code must retain the above copyright notice, this list of conditions
+   and the following disclaimer.
+
+   2. Redistributions in binary form must reproduce the above copyright notice, this list of
+   conditions and the following disclaimer in the documentation and/or other materials provided with
+   the distribution.
+
+   3. Neither the name of the copyright holder nor the names of its contributors may be used to
+   endorse or promote products derived from this software without specific prior written permission.
+
+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+<jfragent>
+	<events>
+		<event id="demo.jfr.test1">
+			<name>JFR Hello World Event 1 %TEST_NAME%</name>
+			<description>Defined in the xml file and added by the agent.</description>
+			<path>demo/jfrhelloworldevent1</path>
+			<stacktrace>true</stacktrace>
+			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
+			<method>
+				<name>printHelloWorldJFR1</name>
+				<descriptor>()V</descriptor>
+			</method>
+			<!-- location {ENTRY, EXIT, WRAP}-->
+			<location>WRAP</location>
+			<field>
+				<name>'InstrumentMe.STATIC_STRING_FIELD'</name>
+				<description>Capturing outer class field with class name prefixed field name</description>
+				<expression>InstrumentMe.STATIC_STRING_FIELD</expression>
+			</field>
+		</event>
+	</events>
+</jfragent>
