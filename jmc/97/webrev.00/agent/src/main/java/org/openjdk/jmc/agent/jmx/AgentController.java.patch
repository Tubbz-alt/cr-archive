diff a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
@@ -60,54 +60,40 @@
 	public void defineEventProbes(String xmlDescription) throws Exception{
 		checkSecurity();
 		Class<?>[] classesToRetransformArray;
 		boolean revertAll = xmlDescription == null ? true : xmlDescription.isEmpty();
 		if (revertAll) {
-			classesToRetransformArray = revertAllTransforms();
+			classesToRetransformArray = retransformClasses(registry.clearAllTransformData());
 		} else {
-			List<TransformDescriptor> descriptors = registry.modify(xmlDescription);
-			if (descriptors == null) {
+			Set<String> initialClasses = new HashSet<>(registry.getClassNames());
+			Set<String> modifiedClasses = registry.modify(xmlDescription);
+			if (modifiedClasses == null) {
 				logger.log(Level.SEVERE, "Failed to identify transformations: " + xmlDescription);
 				return;
-			} else if (descriptors.isEmpty()) {
-				classesToRetransformArray = revertAllTransforms();
 			} else {
-				classesToRetransformArray = defineSpecificTransforms(descriptors);
+				modifiedClasses.addAll(initialClasses);
+				classesToRetransformArray = retransformClasses(modifiedClasses);
 			}
 		}
 		registry.setRevertInstrumentation(true);
 		instrumentation.retransformClasses(classesToRetransformArray);
 		registry.setRevertInstrumentation(false);
 	}
 
-	private Class<?>[] revertAllTransforms() {
+	private Class<?>[] retransformClasses(Set<String> classNames) {
 		Set<Class<?>> classesToRetransform = new HashSet<>();
-		List<String> classNames = registry.clearAllTransformData();
-		for (String className : classNames ) {
+		for (String className : classNames) {
 			try {
 				Class<?> classToRetransform = Class.forName(className.replace('/', '.'));
 				classesToRetransform.add(classToRetransform);
 			} catch (ClassNotFoundException cnfe) {
 				logger.log(Level.SEVERE, "Unable to find class: " + className, cnfe);
 			}
 		}
 		return classesToRetransform.toArray(new Class<?>[0]);
 	}
 
-	private Class<?>[] defineSpecificTransforms(List<TransformDescriptor> descriptors) {
-		Set<Class<?>> classesToRetransform = new HashSet<>();
-		for (TransformDescriptor descriptor : descriptors) {
-			try {
-				Class<?> classToRetransform = Class.forName(descriptor.getClassName().replace('/', '.'));
-				classesToRetransform.add(classToRetransform);
-			} catch (ClassNotFoundException cnfe) {
-				logger.log(Level.SEVERE, "Unable to find class: " + descriptor.getClassName(), cnfe);
-			}
-		}
-		return classesToRetransform.toArray(new Class<?>[0]);
-	}
-
 	public JFRTransformDescriptor[] retrieveCurrentTransforms() {
 		checkSecurity();
 		Set<String> classNames = registry.getClassNames();
 		List<TransformDescriptor> tds  = new ArrayList<>();
 		for (String className : classNames) {
