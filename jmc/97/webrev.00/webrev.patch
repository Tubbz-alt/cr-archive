diff a/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java b/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
@@ -65,20 +65,20 @@
 	 * Modifies class information in the registry according to the xml description.
 	 *
 	 * @param xmlDescription
 	 *           an XML snippet describing the wanted modifications.
 	 *
-	 * @return a list of {@link TransformDescriptor}s corresponding to the wanted transformations.
+	 * @return a set of class names associated with modified {@link TransformDescriptor}s.
 	 */
-	List<TransformDescriptor> modify(String xmlDescription);
+	Set<String> modify(String xmlDescription);
 
 	/**
 	 * Clears all classes and their corresponding transforms in the registry.
 	 *
 	 * @return the set of class names that were cleared.
 	 */
-	List<String> clearAllTransformData();
+	Set<String> clearAllTransformData();
 
 	/**
 	 * Signify classes are or are not being reverted to their pre instrumentation versions.
 	 * @param shouldRevert
 	 *           true if class instrumentation should be reverted, false otherwise.
diff a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
@@ -37,10 +37,11 @@
 import java.io.InputStream;
 import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
@@ -466,50 +467,57 @@
 			}
 		}
 		return builder.toString();
 	}
 
-	public List<TransformDescriptor> modify(String xmlDescription) {
+	public Set<String> modify(String xmlDescription) {
 		try  {
 			validateProbeDefinition(xmlDescription);
 
-			List<TransformDescriptor> tds = new ArrayList<TransformDescriptor>();
 			StringReader reader = new StringReader(xmlDescription);
 			XMLInputFactory inputFactory = XMLInputFactory.newInstance();
 			XMLStreamReader streamReader = inputFactory.createXMLStreamReader(reader);
 			HashMap<String, String> globalDefaults = new HashMap<String, String>();
-			List<String> removedOldClasses = new ArrayList<String>();
+			Set<String> modifiedClasses = new HashSet<>();
 			logger.info(xmlDescription);
 			while (streamReader.hasNext()) {
 				if (streamReader.isStartElement()) {
 					QName element = streamReader.getName();
 					if (XML_ELEMENT_NAME_EVENT.equals(element.getLocalPart())) {
 						TransformDescriptor td = parseTransformData(streamReader, globalDefaults);
-						if(!removedOldClasses.contains(td.getClassName())) {
+						if(modifiedClasses.add(td.getClassName())) {
 							transformData.remove(td.getClassName());
-							removedOldClasses.add(td.getClassName());
 						}
 						if (validate(this,td)) {
 							add(this, td);
-							tds.add(td);
 						}
 						continue;
 					} else if (XML_ELEMENT_CONFIGURATION.equals(element.getLocalPart())) {
 						readGlobalConfig(streamReader, globalDefaults);
 					}
 				}
 				streamReader.next();
 			}
-			return tds;
+			clearAllOtherTransformData(modifiedClasses);
+			return modifiedClasses;
 		} catch (XMLStreamException xse) {
 			logger.log(Level.SEVERE, "Failed to create XML Stream Reader", xse);
 			return null;
 		}
 	}
 
-	public List<String> clearAllTransformData() {
-		List<String> classNames = new ArrayList<>(transformData.keySet());
+	private void clearAllOtherTransformData(Set<String> classesToKeep) {
+		Set<String> classNames = new HashSet<>(getClassNames());
+		for (String className : classNames) {
+			if (!classesToKeep.contains(className)) {
+				transformData.remove(className);
+			}
+		}
+	}
+
+	public Set<String> clearAllTransformData() {
+		Set<String> classNames = new HashSet<>(getClassNames());
 		transformData.clear();
 		return classNames;
 	}
 
 	public Set<String> getClassNames() {
diff a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/jmx/AgentController.java
@@ -60,54 +60,40 @@
 	public void defineEventProbes(String xmlDescription) throws Exception{
 		checkSecurity();
 		Class<?>[] classesToRetransformArray;
 		boolean revertAll = xmlDescription == null ? true : xmlDescription.isEmpty();
 		if (revertAll) {
-			classesToRetransformArray = revertAllTransforms();
+			classesToRetransformArray = retransformClasses(registry.clearAllTransformData());
 		} else {
-			List<TransformDescriptor> descriptors = registry.modify(xmlDescription);
-			if (descriptors == null) {
+			Set<String> initialClasses = new HashSet<>(registry.getClassNames());
+			Set<String> modifiedClasses = registry.modify(xmlDescription);
+			if (modifiedClasses == null) {
 				logger.log(Level.SEVERE, "Failed to identify transformations: " + xmlDescription);
 				return;
-			} else if (descriptors.isEmpty()) {
-				classesToRetransformArray = revertAllTransforms();
 			} else {
-				classesToRetransformArray = defineSpecificTransforms(descriptors);
+				modifiedClasses.addAll(initialClasses);
+				classesToRetransformArray = retransformClasses(modifiedClasses);
 			}
 		}
 		registry.setRevertInstrumentation(true);
 		instrumentation.retransformClasses(classesToRetransformArray);
 		registry.setRevertInstrumentation(false);
 	}
 
-	private Class<?>[] revertAllTransforms() {
+	private Class<?>[] retransformClasses(Set<String> classNames) {
 		Set<Class<?>> classesToRetransform = new HashSet<>();
-		List<String> classNames = registry.clearAllTransformData();
-		for (String className : classNames ) {
+		for (String className : classNames) {
 			try {
 				Class<?> classToRetransform = Class.forName(className.replace('/', '.'));
 				classesToRetransform.add(classToRetransform);
 			} catch (ClassNotFoundException cnfe) {
 				logger.log(Level.SEVERE, "Unable to find class: " + className, cnfe);
 			}
 		}
 		return classesToRetransform.toArray(new Class<?>[0]);
 	}
 
-	private Class<?>[] defineSpecificTransforms(List<TransformDescriptor> descriptors) {
-		Set<Class<?>> classesToRetransform = new HashSet<>();
-		for (TransformDescriptor descriptor : descriptors) {
-			try {
-				Class<?> classToRetransform = Class.forName(descriptor.getClassName().replace('/', '.'));
-				classesToRetransform.add(classToRetransform);
-			} catch (ClassNotFoundException cnfe) {
-				logger.log(Level.SEVERE, "Unable to find class: " + descriptor.getClassName(), cnfe);
-			}
-		}
-		return classesToRetransform.toArray(new Class<?>[0]);
-	}
-
 	public JFRTransformDescriptor[] retrieveCurrentTransforms() {
 		checkSecurity();
 		Set<String> classNames = registry.getClassNames();
 		List<TransformDescriptor> tds  = new ArrayList<>();
 		for (String className : classNames) {
diff a/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefaultTransformRegistry.java b/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefaultTransformRegistry.java
--- a/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefaultTransformRegistry.java
+++ b/agent/src/test/java/org/openjdk/jmc/agent/test/TestDefaultTransformRegistry.java
@@ -37,10 +37,11 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
 import java.io.IOException;
 import java.util.List;
+import java.util.Set;
 
 import javax.xml.stream.XMLStreamException;
 
 import org.junit.Test;
 import org.objectweb.asm.Type;
@@ -50,11 +51,11 @@
 import org.openjdk.jmc.agent.test.util.TestToolkit;
 
 public class TestDefaultTransformRegistry {
 
 	private static final String XML_EVENT_DESCRIPTION = "<event id=\"demo.jfr.test1\">"
-			+ "<name>JFR Hello World Event 1 Modify </name>"
+			+ "<name>JFR Hello World Event 1 %TEST_NAME% </name>"
 			+ "<description>Defined in the xml file and added by the agent.</description>"
 			+ "<path>demo/jfrhelloworldevent1</path>"
 			+ "<stacktrace>true</stacktrace>"
 			+ "<class>org.openjdk.jmc.agent.test.InstrumentMe</class>"
 			+ "<method>"
@@ -102,36 +103,36 @@
 	@Test
 	public void testModify() throws XMLStreamException, IOException {
 		TransformRegistry registry = DefaultTransformRegistry
 				.from(TestToolkit.getProbesXMLFromTemplate(getTemplate(), "Modify")); //$NON-NLS-1$
 		assertNotNull(registry);
-		List<TransformDescriptor> descriptors = registry.modify(getXMLDescription(XML_EVENT_DESCRIPTION));
-		assertNotNull(descriptors);
-		assertTrue(descriptors.size() == 1);
-		assertEquals(descriptors.get(0).getClassName(), "org/openjdk/jmc/agent/test/InstrumentMe");
-		assertEquals(descriptors.get(0).getMethod().toString(), "printHelloWorldJFR1()V");
-		assertTrue(registry.hasPendingTransforms("org/openjdk/jmc/agent/test/InstrumentMe"));
+		Set<String> modifiedClassNames = registry.modify(getXMLDescription(XML_EVENT_DESCRIPTION));
+		assertNotNull(modifiedClassNames);
+		assertTrue(modifiedClassNames.size() == 1);
+		assertEquals(modifiedClassNames.iterator().next(), Type.getInternalName(InstrumentMe.class));
+		assertTrue(registry.hasPendingTransforms(Type.getInternalName(InstrumentMe.class)));
 	}
 
 	@Test
 	public void testModifyNameCollision() throws XMLStreamException, IOException {
 		TransformRegistry registry = DefaultTransformRegistry
 				.from(TestToolkit.getProbesXMLFromTemplate(getTemplate(), "Modify")); //$NON-NLS-1$
 		assertNotNull(registry);
-		final String collisionDescirption = getXMLDescription(XML_EVENT_DESCRIPTION.concat(XML_EVENT_DESCRIPTION));
-		List<TransformDescriptor> descriptors = registry.modify(collisionDescirption);
-		assertNotNull(descriptors);
-		assertTrue(descriptors.size() == 1);
+		final String collisionDescription = getXMLDescription(XML_EVENT_DESCRIPTION.concat(XML_EVENT_DESCRIPTION));
+		Set<String> modifiedClassNames = registry.modify(collisionDescription);
+		assertNotNull(modifiedClassNames);
+		assertTrue(modifiedClassNames.size() == 1);
 	}
 
 	@Test
 	public void testClearAllTransformData() throws XMLStreamException, IOException {
 		TransformRegistry registry = DefaultTransformRegistry
-				.from(TestToolkit.getProbesXMLFromTemplate(getTemplate(), "clearAllTransformData")); //$NON-NLS-1$
+				.from(TestToolkit.getProbesXMLFromTemplate(getXMLDescription(XML_EVENT_DESCRIPTION), "clearAllTransformData")); //$NON-NLS-1$
 		assertNotNull(registry);
-		List<String> classesCleared = registry.clearAllTransformData();
-		assertEquals(classesCleared.get(0),Type.getInternalName(InstrumentMe.class));
+		Set<String> classesCleared = registry.clearAllTransformData();
+		assertTrue(classesCleared.size() == 1);
+		assertEquals(classesCleared.iterator().next(),Type.getInternalName(InstrumentMe.class));
 		assertNull(registry.getTransformData(Type.getInternalName(InstrumentMe.class)));
 	}
 
 	private String getXMLDescription(String eventsDescription) {
 		return "<jfragent><events>".concat(eventsDescription).concat("</events></jfragent>");
