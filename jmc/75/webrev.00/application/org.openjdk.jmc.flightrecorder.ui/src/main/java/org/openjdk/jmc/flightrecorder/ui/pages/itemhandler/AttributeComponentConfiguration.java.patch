diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/AttributeComponentConfiguration.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/AttributeComponentConfiguration.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/AttributeComponentConfiguration.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/AttributeComponentConfiguration.java
@@ -75,10 +75,11 @@
 		lineChartableAttributes = new HashMap<>();
 		forEachType(items);
 		populateAttributeMaps(isSuitableForLineCharts(items, allTypes));
 	}
 
+	@SuppressWarnings("deprecation")
 	private void forEachType(IItemCollection items) {
 		if (items != null) {
 			ItemCollectionToolkit.stream(items).map(IItemIterable::getType).forEach(type -> {
 				allTypes.put(type.getIdentifier(), type);
 				for (IAttribute<?> a : type.getAttributes()) {
@@ -88,10 +89,11 @@
 				}
 			});
 		}
 	}
 
+	@SuppressWarnings("deprecation")
 	private void populateAttributeMaps(boolean allowLineCharts) {
 		for (Entry<String, IAttribute<?>> a : allAttributes.entrySet()) {
 			if (!commonAttributes.containsKey(a.getKey()) && !uncommonAttributes.containsKey(a.getKey())
 					&& allTypes.values().stream().allMatch(t -> {
 						return t.getAttributes().contains(a.getValue());
