diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LabeledPageFactory.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LabeledPageFactory.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LabeledPageFactory.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LabeledPageFactory.java
@@ -74,11 +74,12 @@
 	public ImageDescriptor getImageDescriptor(IState state) {
 		String iconStr = state.getAttribute(ATTRIBUTE_ICON);
 		if (iconStr != null) {
 			byte[] pngData = Base64.getDecoder().decode(iconStr);
 			try {
-				return ImageDescriptor.createFromImageData(new ImageData(new ByteArrayInputStream(pngData)));
+				return ImageDescriptor
+						.createFromImageDataProvider((zoom) -> new ImageData(new ByteArrayInputStream(pngData)));
 			} catch (Exception e) {
 				FlightRecorderUI.getDefault().getLogger().log(Level.WARNING,
 						"Could not load icon for page: " + getName(state), e); //$NON-NLS-1$
 			}
 		}
@@ -94,11 +95,11 @@
 		to.putString(ATTRIBUTE_DESCRIPTION, description);
 		if (image != null) {
 			try {
 				ImageLoader loader = new ImageLoader();
 				ByteArrayOutputStream out = new ByteArrayOutputStream();
-				loader.data = new ImageData[] {image.getImageData()};
+				loader.data = new ImageData[] {image.getImageData(100)};
 				loader.save(out, SWT.IMAGE_PNG);
 				String iconStr = Base64.getEncoder().encodeToString(out.toByteArray());
 				to.putString(LabeledPageFactory.ATTRIBUTE_ICON, iconStr);
 			} catch (Exception e) {
 				FlightRecorderUI.getDefault().getLogger().log(Level.WARNING, "Could not persist icon", e); //$NON-NLS-1$
