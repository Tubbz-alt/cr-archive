diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DataPageToolkit.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DataPageToolkit.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DataPageToolkit.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DataPageToolkit.java
@@ -653,10 +653,11 @@
 		createChartTooltip(chart, new HashSet<>(Arrays.asList(excludedAttributes)));
 	}
 
 	public static void createChartTooltip(ChartCanvas chart, Set<IAttribute<?>> excludedAttributes) {
 		createChartTooltip(chart, () -> new ChartToolTipProvider() {
+			@SuppressWarnings("deprecation")
 			@Override
 			protected Stream<IAttribute<?>> getAttributeStream(IType<IItem> type) {
 				return type.getAttributes().stream().filter(a -> !excludedAttributes.contains(a));
 			}
 		});
@@ -878,10 +879,11 @@
 		});
 		return editor;
 	}
 
 	// FIXME: Move to some AttributeToolkit?
+	@SuppressWarnings("deprecation")
 	private static Stream<IAttribute<?>> getAttributes(IItemCollection items) {
 		return ItemCollectionToolkit.stream(items).filter(IItemIterable::hasItems)
 				.flatMap(is -> is.getType().getAttributes().stream());
 	}
 
@@ -1068,11 +1070,11 @@
 						e.printStackTrace();
 					}
 				}
 
 				private ImageData resizeImage(ImageData imageData, int width, int height) {
-					Image original = ImageDescriptor.createFromImageData(imageData).createImage();
+					Image original = ImageDescriptor.createFromImageDataProvider((zoom) -> imageData).createImage();
 					Image scaled = new Image(Display.getDefault(), width, height);
 					GC gc = new GC(scaled);
 					gc.setAntialias(SWT.ON);
 					gc.setInterpolation(SWT.HIGH);
 					gc.drawImage(original, 0, 0, imageData.width, imageData.height, 0, 0, width, height);
