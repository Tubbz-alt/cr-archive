diff a/application/org.openjdk.jmc.alert/src/main/java/org/openjdk/jmc/alert/AlertPlugin.java b/application/org.openjdk.jmc.alert/src/main/java/org/openjdk/jmc/alert/AlertPlugin.java
--- a/application/org.openjdk.jmc.alert/src/main/java/org/openjdk/jmc/alert/AlertPlugin.java
+++ b/application/org.openjdk.jmc.alert/src/main/java/org/openjdk/jmc/alert/AlertPlugin.java
@@ -41,10 +41,11 @@
 import org.eclipse.osgi.util.NLS;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.swt.widgets.Shell;
+import org.eclipse.ui.PlatformUI;
 import org.openjdk.jmc.rjmx.IConnectionHandle;
 import org.openjdk.jmc.rjmx.triggers.TriggerEvent;
 import org.openjdk.jmc.rjmx.triggers.TriggerRule;
 import org.openjdk.jmc.ui.MCAbstractUIPlugin;
 import org.openjdk.jmc.ui.UIPlugin;
@@ -118,11 +119,11 @@
 		if (UIPlugin.getDefault().getTrayManager() != null) {
 			final String message = createTrayMessage(ao);
 			final String title = Messages.AlertPlugin_TRIGGER_ALERT_TEXT;
 			final int style = SWT.BALLOON | SWT.ICON_WARNING;
 
-			DisplayToolkit.safeAsyncExec(getDefault().getWorkbench().getDisplay(), new Runnable() {
+			DisplayToolkit.safeAsyncExec(PlatformUI.getWorkbench().getDisplay(), new Runnable() {
 				@Override
 				public void run() {
 					UIPlugin.getDefault().getTrayManager().showTooltip(title, message, style);
 				}
 			});
@@ -177,14 +178,14 @@
 		return getPreferenceStore().getBoolean(PREF_KEY_POPUP);
 	}
 
 	public void showDialog(boolean alwaysShow) {
 		if (getPopup() || alwaysShow || hasDialog()) {
-			DisplayToolkit.safeAsyncExec(getDefault().getWorkbench().getDisplay(), new Runnable() {
+			DisplayToolkit.safeAsyncExec(PlatformUI.getWorkbench().getDisplay(), new Runnable() {
 				@Override
 				public void run() {
-					Display display = getDefault().getWorkbench().getDisplay();
+					Display display = PlatformUI.getWorkbench().getDisplay();
 					Shell shell = display.getActiveShell();
 					if (shell != null && !shell.isDisposed()) {
 						if (!hasDialog()) {
 							dialog = createDialog(shell);
 						}
@@ -210,11 +211,11 @@
 		}
 		return true;
 	}
 
 	public static AlertDialog createDialog(Shell shell) {
-		Display display = getDefault().getWorkbench().getDisplay();
+		Display display = PlatformUI.getWorkbench().getDisplay();
 		if (display != null && !display.isDisposed() && display.getActiveShell() != null
 				&& !display.getActiveShell().isDisposed()) {
 			return new AlertDialog(display.getActiveShell());
 		} else {
 			return null;
diff a/application/org.openjdk.jmc.browser/build.properties b/application/org.openjdk.jmc.browser/build.properties
--- a/application/org.openjdk.jmc.browser/build.properties
+++ b/application/org.openjdk.jmc.browser/build.properties
@@ -39,5 +39,6 @@
                plugin.xml,\
                plugin.properties,\
                contexts.xml,\
                appicons/
 pde.match.rule.bundle=compatible
+javacDefaultEncoding.. = UTF-8
diff a/application/org.openjdk.jmc.console.jconsole/src/main/java/org/openjdk/jmc/console/jconsole/Activator.java b/application/org.openjdk.jmc.console.jconsole/src/main/java/org/openjdk/jmc/console/jconsole/Activator.java
--- a/application/org.openjdk.jmc.console.jconsole/src/main/java/org/openjdk/jmc/console/jconsole/Activator.java
+++ b/application/org.openjdk.jmc.console.jconsole/src/main/java/org/openjdk/jmc/console/jconsole/Activator.java
@@ -34,15 +34,13 @@
 
 import java.io.File;
 import java.util.logging.Logger;
 
 import org.eclipse.jface.preference.IPreferenceStore;
-import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.ui.plugin.AbstractUIPlugin;
-import org.osgi.framework.BundleContext;
-
 import org.openjdk.jmc.console.jconsole.preferences.PreferenceConstants;
+import org.osgi.framework.BundleContext;
 
 /**
  * The activator class controls the plug-in life cycle
  */
 public class Activator extends AbstractUIPlugin {
@@ -78,21 +76,10 @@
 	 */
 	public static Activator getDefault() {
 		return plugin;
 	}
 
-	/**
-	 * Returns an image descriptor for the image file at the given plug-in relative path
-	 *
-	 * @param path
-	 *            the path
-	 * @return the image descriptor
-	 */
-	public static ImageDescriptor getImageDescriptor(String path) {
-		return imageDescriptorFromPlugin(PLUGIN_ID, path);
-	}
-
 	/**
 	 * @return the logger used by this plug-in.
 	 */
 	public static Logger getLogger() {
 		return LOGGER;
diff a/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/TriggerActionStartTimeBoundRecording.java b/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/TriggerActionStartTimeBoundRecording.java
--- a/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/TriggerActionStartTimeBoundRecording.java
+++ b/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/TriggerActionStartTimeBoundRecording.java
@@ -39,15 +39,13 @@
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.osgi.util.NLS;
-
 import org.openjdk.jmc.alert.AlertObject;
 import org.openjdk.jmc.alert.AlertPlugin;
 import org.openjdk.jmc.alert.NotificationUIToolkit;
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.QuantityConversionException;
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.console.ui.notification.NotificationPlugin;
 import org.openjdk.jmc.flightrecorder.configuration.recording.RecordingOptionsBuilder;
diff a/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/WriteAndOpenRecordingJob.java b/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/WriteAndOpenRecordingJob.java
--- a/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/WriteAndOpenRecordingJob.java
+++ b/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/action/WriteAndOpenRecordingJob.java
@@ -40,15 +40,13 @@
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.osgi.util.NLS;
-
 import org.openjdk.jmc.alert.AlertObject;
 import org.openjdk.jmc.alert.AlertPlugin;
 import org.openjdk.jmc.alert.NotificationUIToolkit;
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.console.ui.notification.NotificationPlugin;
 import org.openjdk.jmc.rjmx.RJMXPlugin;
 import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;
 import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderToolkit;
diff a/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/tab/TriggerToolkit.java b/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/tab/TriggerToolkit.java
--- a/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/tab/TriggerToolkit.java
+++ b/application/org.openjdk.jmc.console.ui.notification/src/main/java/org/openjdk/jmc/console/ui/notification/tab/TriggerToolkit.java
@@ -41,23 +41,21 @@
 
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Platform;
 import org.eclipse.jface.viewers.TreeViewer;
 import org.eclipse.osgi.util.NLS;
-import org.osgi.framework.Bundle;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
-
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.common.util.XmlToolkit;
 import org.openjdk.jmc.console.ui.notification.NotificationPlugin;
 import org.openjdk.jmc.rjmx.RJMXPlugin;
 import org.openjdk.jmc.rjmx.triggers.TriggerRule;
 import org.openjdk.jmc.rjmx.triggers.internal.NotificationRegistry;
 import org.openjdk.jmc.ui.common.util.StatusFactory;
+import org.osgi.framework.Bundle;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
 
 /**
  * Toolkit for triggers
  */
 public class TriggerToolkit {
diff a/application/org.openjdk.jmc.console.ui/src/main/java/org/openjdk/jmc/console/ui/editor/internal/ConsoleFormPage.java b/application/org.openjdk.jmc.console.ui/src/main/java/org/openjdk/jmc/console/ui/editor/internal/ConsoleFormPage.java
--- a/application/org.openjdk.jmc.console.ui/src/main/java/org/openjdk/jmc/console/ui/editor/internal/ConsoleFormPage.java
+++ b/application/org.openjdk.jmc.console.ui/src/main/java/org/openjdk/jmc/console/ui/editor/internal/ConsoleFormPage.java
@@ -40,29 +40,28 @@
 import org.eclipse.jface.action.GroupMarker;
 import org.eclipse.jface.action.IToolBarManager;
 import org.eclipse.jface.dialogs.IMessageProvider;
 import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.jface.resource.JFaceResources;
+import org.eclipse.jface.resource.ResourceLocator;
 import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.ui.IMemento;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.XMLMemento;
 import org.eclipse.ui.forms.IManagedForm;
 import org.eclipse.ui.forms.IMessageManager;
 import org.eclipse.ui.forms.editor.FormPage;
 import org.eclipse.ui.forms.widgets.Form;
-import org.eclipse.ui.plugin.AbstractUIPlugin;
-import org.osgi.service.prefs.Preferences;
-
 import org.openjdk.jmc.console.ui.editor.IConsolePageContainer;
 import org.openjdk.jmc.console.ui.editor.IConsolePageStateHandler;
 import org.openjdk.jmc.rjmx.IConnectionHandle;
 import org.openjdk.jmc.rjmx.RJMXPlugin;
 import org.openjdk.jmc.ui.common.util.Environment;
 import org.openjdk.jmc.ui.misc.MementoToolkit;
+import org.osgi.service.prefs.Preferences;
 
 /**
  * Extension point class that console tabs can subclass. The ConsoleTab uses the FormPage .
  */
 public class ConsoleFormPage extends FormPage implements IConsolePageContainer {
@@ -172,11 +171,11 @@
 			MementoToolkit.copy(ce[0], defaultConfig);
 		}
 		String iconName = config.getAttribute(ATTRIBUTE_ICON);
 		if (iconName != null) {
 			String pluginId = config.getDeclaringExtension().getContributor().getName();
-			ImageDescriptor iconDesc = AbstractUIPlugin.imageDescriptorFromPlugin(pluginId, iconName);
+			ImageDescriptor iconDesc = ResourceLocator.imageDescriptorFromBundle(pluginId, iconName).orElse(null);
 			icon = (Image) JFaceResources.getResources().get(iconDesc);
 		}
 	}
 
 	@Override
diff a/application/org.openjdk.jmc.console.ui/src/main/java/org/openjdk/jmc/console/ui/misc/StartConsole.java b/application/org.openjdk.jmc.console.ui/src/main/java/org/openjdk/jmc/console/ui/misc/StartConsole.java
--- a/application/org.openjdk.jmc.console.ui/src/main/java/org/openjdk/jmc/console/ui/misc/StartConsole.java
+++ b/application/org.openjdk.jmc.console.ui/src/main/java/org/openjdk/jmc/console/ui/misc/StartConsole.java
@@ -35,23 +35,22 @@
 import java.io.PrintStream;
 
 import org.eclipse.ui.IEditorInput;
 import org.eclipse.ui.IWorkbenchWindow;
 import org.eclipse.ui.PartInitException;
-
+import org.eclipse.ui.PlatformUI;
 import org.openjdk.jmc.commands.Statement;
 import org.openjdk.jmc.console.ui.editor.internal.ConsoleEditorInput;
 import org.openjdk.jmc.rjmx.util.internal.RJMXStartCommand;
-import org.openjdk.jmc.ui.UIPlugin;
 
 /**
  * Command for starting up the JMX Console on a RJMX-descriptor.
  */
 public class StartConsole extends RJMXStartCommand {
 	@Override
 	public boolean execute(Statement statement, PrintStream out) {
-		IWorkbenchWindow window = UIPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow();
+		IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
 		if (window != null) {
 			IEditorInput input = new ConsoleEditorInput(createConnectionDescriptor(statement, out));
 			try {
 				window.getActivePage().openEditor(input, ConsoleEditorInput.EDITOR_ID);
 			} catch (PartInitException e) {
diff a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/DumpAnyRecordingAction.java b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/DumpAnyRecordingAction.java
--- a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/DumpAnyRecordingAction.java
+++ b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/DumpAnyRecordingAction.java
@@ -32,12 +32,10 @@
  */
 package org.openjdk.jmc.flightrecorder.controlpanel.ui.actions;
 
 import org.eclipse.jface.wizard.IWizard;
 import org.eclipse.osgi.util.NLS;
-
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.ControlPanel;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.FlightRecorderProvider;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.ImageConstants;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.RecordingProvider;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.messages.internal.Messages;
diff a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/StartRecordingAction.java b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/StartRecordingAction.java
--- a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/StartRecordingAction.java
+++ b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/actions/StartRecordingAction.java
@@ -31,12 +31,10 @@
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.flightrecorder.controlpanel.ui.actions;
 
 import org.eclipse.jface.wizard.IWizard;
-
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.ControlPanel;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.FlightRecorderProvider;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.ImageConstants;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.messages.internal.Messages;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.wizards.RecordingWizardModel;
diff a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/jobs/UpdateRecordingJob.java b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/jobs/UpdateRecordingJob.java
--- a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/jobs/UpdateRecordingJob.java
+++ b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/jobs/UpdateRecordingJob.java
@@ -36,11 +36,10 @@
 
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.osgi.util.NLS;
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.common.unit.IConstrainedMap;
 import org.openjdk.jmc.flightrecorder.configuration.events.EventOptionID;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.ControlPanel;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.messages.internal.Messages;
 import org.openjdk.jmc.rjmx.IConnectionHandle;
diff a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/PrivateStorageDelegate.java b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/PrivateStorageDelegate.java
--- a/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/PrivateStorageDelegate.java
+++ b/application/org.openjdk.jmc.flightrecorder.controlpanel.ui/src/main/java/org/openjdk/jmc/flightrecorder/controlpanel/ui/model/PrivateStorageDelegate.java
@@ -41,11 +41,10 @@
 import java.io.OutputStreamWriter;
 import java.io.Writer;
 import java.nio.charset.Charset;
 import java.nio.charset.IllegalCharsetNameException;
 
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.flightrecorder.configuration.events.IEventConfiguration;
 import org.openjdk.jmc.flightrecorder.configuration.spi.IConfigurationStorageDelegate;
 import org.openjdk.jmc.flightrecorder.controlpanel.ui.messages.internal.Messages;
 
 /**
diff a/application/org.openjdk.jmc.flightrecorder.ext.jfx/src/main/java/org/openjdk/jmc/flightrecorder/ext/jfx/JfxPage.java b/application/org.openjdk.jmc.flightrecorder.ext.jfx/src/main/java/org/openjdk/jmc/flightrecorder/ext/jfx/JfxPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ext.jfx/src/main/java/org/openjdk/jmc/flightrecorder/ext/jfx/JfxPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ext.jfx/src/main/java/org/openjdk/jmc/flightrecorder/ext/jfx/JfxPage.java
@@ -36,19 +36,18 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.stream.Stream;
 
 import org.eclipse.jface.resource.ImageDescriptor;
+import org.eclipse.jface.resource.ResourceLocator;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.SashForm;
 import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.ui.forms.widgets.Form;
 import org.eclipse.ui.forms.widgets.FormToolkit;
 import org.eclipse.ui.forms.widgets.Section;
-import org.eclipse.ui.plugin.AbstractUIPlugin;
-
 import org.openjdk.jmc.common.IState;
 import org.openjdk.jmc.common.IWritableState;
 import org.openjdk.jmc.common.item.Aggregators;
 import org.openjdk.jmc.common.item.IAggregator;
 import org.openjdk.jmc.common.item.IItemCollection;
@@ -97,12 +96,12 @@
 			return Messages.JfxPage_JAVA_FX;
 		}
 
 		@Override
 		public ImageDescriptor getImageDescriptor(IState state) {
-			return AbstractUIPlugin.imageDescriptorFromPlugin("org.openjdk.jmc.flightrecorder.ext.jfx", //$NON-NLS-1$
-					"icons/pulse.png"); //$NON-NLS-1$
+			return ResourceLocator.imageDescriptorFromBundle("org.openjdk.jmc.flightrecorder.ext.jfx", //$NON-NLS-1$
+					"icons/pulse.png").orElse(null); //$NON-NLS-1$
 		}
 
 		@Override
 		public String[] getTopics(IState state) {
 			return new String[] {JfxConstants.JFX_RULE_PATH};
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -31,26 +31,26 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.flightrecorder.flameview.views;
 
-import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;
-import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME_DESC;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_FLAME_GRAPH;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_ICICLE_GRAPH;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_JPEG_IMAGE;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_PNG_IMAGE;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_PRINT;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SAVE_AS;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SAVE_FLAME_GRAPH_AS;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TABLE_COUNT;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TABLE_EVENT_TYPE;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TOOLTIP_DESCRIPTION;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TOOLTIP_PACKAGE;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES;
-import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TOOLTIP_DESCRIPTION;
 import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getFlameviewMessage;
 import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getStacktraceMessage;
+import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;
+import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME_DESC;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -69,10 +69,11 @@
 import org.eclipse.jface.action.IAction;
 import org.eclipse.jface.action.IMenuManager;
 import org.eclipse.jface.action.IToolBarManager;
 import org.eclipse.jface.action.Separator;
 import org.eclipse.jface.resource.ImageDescriptor;
+import org.eclipse.jface.resource.ResourceLocator;
 import org.eclipse.jface.viewers.ISelection;
 import org.eclipse.jface.viewers.IStructuredSelection;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.browser.Browser;
 import org.eclipse.swt.browser.BrowserFunction;
@@ -80,31 +81,30 @@
 import org.eclipse.swt.browser.ProgressEvent;
 import org.eclipse.swt.custom.SashForm;
 import org.eclipse.swt.events.MenuDetectEvent;
 import org.eclipse.swt.events.MenuDetectListener;
 import org.eclipse.swt.graphics.Image;
-import org.eclipse.swt.graphics.ImageLoader;
 import org.eclipse.swt.graphics.ImageData;
+import org.eclipse.swt.graphics.ImageLoader;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.FileDialog;
 import org.eclipse.ui.IMemento;
 import org.eclipse.ui.ISelectionListener;
 import org.eclipse.ui.ISharedImages;
 import org.eclipse.ui.IViewSite;
 import org.eclipse.ui.IWorkbenchPart;
 import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.part.ViewPart;
-import org.eclipse.ui.plugin.AbstractUIPlugin;
 import org.openjdk.jmc.common.item.IItemCollection;
 import org.openjdk.jmc.common.util.StringToolkit;
 import org.openjdk.jmc.flightrecorder.flameview.FlameviewImages;
 import org.openjdk.jmc.flightrecorder.flameview.tree.TraceNode;
 import org.openjdk.jmc.flightrecorder.flameview.tree.TraceTreeUtils;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;
-import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel;
 import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;
 import org.openjdk.jmc.flightrecorder.ui.common.ImageConstants;
 import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;
 import org.openjdk.jmc.ui.CoreImages;
 import org.openjdk.jmc.ui.common.util.AdapterUtil;
@@ -527,11 +527,11 @@
 			return "";
 		}
 	}
 
 	private static ImageDescriptor flameviewImageDescriptor(String iconName) {
-		return AbstractUIPlugin.imageDescriptorFromPlugin(PLUGIN_ID, DIR_ICONS + iconName); //$NON-NLS-1$
+		return ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); //$NON-NLS-1$
 	}
 
 	private static String getIconBase64(String iconName) {
 		Image image = FlightRecorderUI.getDefault().getImage(iconName);
 		if (image == null) {
diff a/application/org.openjdk.jmc.flightrecorder.metadata/src/main/java/org/openjdk/jmc/flightrecorder/metadata/MetadataPage.java b/application/org.openjdk.jmc.flightrecorder.metadata/src/main/java/org/openjdk/jmc/flightrecorder/metadata/MetadataPage.java
--- a/application/org.openjdk.jmc.flightrecorder.metadata/src/main/java/org/openjdk/jmc/flightrecorder/metadata/MetadataPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.metadata/src/main/java/org/openjdk/jmc/flightrecorder/metadata/MetadataPage.java
@@ -37,10 +37,11 @@
 import java.util.stream.Stream;
 
 import org.eclipse.jface.layout.GridDataFactory;
 import org.eclipse.jface.layout.GridLayoutFactory;
 import org.eclipse.jface.resource.ImageDescriptor;
+import org.eclipse.jface.resource.ResourceLocator;
 import org.eclipse.jface.viewers.ColumnViewerToolTipSupport;
 import org.eclipse.jface.viewers.ISelection;
 import org.eclipse.jface.viewers.TreePath;
 import org.eclipse.jface.viewers.TreeViewer;
 import org.eclipse.swt.SWT;
@@ -48,12 +49,10 @@
 import org.eclipse.swt.layout.FillLayout;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Text;
 import org.eclipse.ui.forms.widgets.Form;
 import org.eclipse.ui.forms.widgets.FormToolkit;
-import org.eclipse.ui.plugin.AbstractUIPlugin;
-
 import org.openjdk.jmc.common.IState;
 import org.openjdk.jmc.common.IWritableState;
 import org.openjdk.jmc.common.item.IItemIterable;
 import org.openjdk.jmc.common.item.IType;
 import org.openjdk.jmc.flightrecorder.ui.IDisplayablePage;
@@ -232,11 +231,11 @@
 			return Messages.MetadataPage_METADATA_PAGENAME;
 		}
 
 		@Override
 		public ImageDescriptor getImageDescriptor(IState state) {
-			return AbstractUIPlugin.imageDescriptorFromPlugin(PLUGIN_ID, ICON);
+			return ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, ICON).orElse(null);
 		}
 
 		@Override
 		public IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {
 			return new MetadataPage(dpd, items, editor);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/FlightRecorderUI.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/FlightRecorderUI.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/FlightRecorderUI.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/FlightRecorderUI.java
@@ -40,20 +40,20 @@
 import org.eclipse.ui.IEditorPart;
 import org.eclipse.ui.IEditorReference;
 import org.eclipse.ui.IWorkbench;
 import org.eclipse.ui.IWorkbenchPage;
 import org.eclipse.ui.IWorkbenchWindow;
-import org.osgi.framework.BundleContext;
-
+import org.eclipse.ui.PlatformUI;
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.QuantityConversionException;
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.flightrecorder.ui.common.ImageConstants;
 import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;
 import org.openjdk.jmc.flightrecorder.ui.preferences.PreferenceKeys;
 import org.openjdk.jmc.ui.MCAbstractUIPlugin;
 import org.openjdk.jmc.ui.misc.DisplayToolkit;
+import org.osgi.framework.BundleContext;
 
 /**
  * The activator class controls the life cycle for the Flight Recording plug-in.
  */
 public final class FlightRecorderUI extends MCAbstractUIPlugin {
@@ -200,11 +200,11 @@
 		return dir;
 	}
 
 	public PageManager getPageManager() {
 		if (pageManager == null) {
-			IWorkbench workbench = getWorkbench();
+			IWorkbench workbench = PlatformUI.getWorkbench();
 			Runnable callback = () -> DisplayToolkit.safeAsyncExec(() -> refreshJfrEditors(workbench));
 			pageManager = new PageManager(getPreferences().get(PAGE_MANAGER_ID, null), callback);
 		}
 		return pageManager;
 	}
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/JfrPropertySheet.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/JfrPropertySheet.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/JfrPropertySheet.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/JfrPropertySheet.java
@@ -548,10 +548,11 @@
 		// FIXME: List of attributes for the item collection should be provided from elsewhere
 		if (!iterables.hasNext()) {
 			return Stream.empty();
 		} else {
 			IItemIterable single = iterables.next();
+			@SuppressWarnings("deprecation")
 			List<IAttribute<?>> attributes = single.getType().getAttributes();
 			if (iterables.hasNext()) {
 				attributes = new ArrayList<>(attributes); // modifiable copy
 				while (iterables.hasNext()) {
 					IType<?> otherType = iterables.next().getType();
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ChartToolTipProvider.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ChartToolTipProvider.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ChartToolTipProvider.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ChartToolTipProvider.java
@@ -88,10 +88,11 @@
 
 	public Map<String, Image> getImages() {
 		return imageMap;
 	}
 
+	@SuppressWarnings("deprecation")
 	protected Stream<IAttribute<?>> getAttributeStream(IType<IItem> type) {
 		return type.getAttributes().stream();
 	}
 
 	@Override
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DataPageToolkit.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DataPageToolkit.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DataPageToolkit.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/DataPageToolkit.java
@@ -653,10 +653,11 @@
 		createChartTooltip(chart, new HashSet<>(Arrays.asList(excludedAttributes)));
 	}
 
 	public static void createChartTooltip(ChartCanvas chart, Set<IAttribute<?>> excludedAttributes) {
 		createChartTooltip(chart, () -> new ChartToolTipProvider() {
+			@SuppressWarnings("deprecation")
 			@Override
 			protected Stream<IAttribute<?>> getAttributeStream(IType<IItem> type) {
 				return type.getAttributes().stream().filter(a -> !excludedAttributes.contains(a));
 			}
 		});
@@ -878,10 +879,11 @@
 		});
 		return editor;
 	}
 
 	// FIXME: Move to some AttributeToolkit?
+	@SuppressWarnings("deprecation")
 	private static Stream<IAttribute<?>> getAttributes(IItemCollection items) {
 		return ItemCollectionToolkit.stream(items).filter(IItemIterable::hasItems)
 				.flatMap(is -> is.getType().getAttributes().stream());
 	}
 
@@ -1068,11 +1070,11 @@
 						e.printStackTrace();
 					}
 				}
 
 				private ImageData resizeImage(ImageData imageData, int width, int height) {
-					Image original = ImageDescriptor.createFromImageData(imageData).createImage();
+					Image original = ImageDescriptor.createFromImageDataProvider((zoom) -> imageData).createImage();
 					Image scaled = new Image(Display.getDefault(), width, height);
 					GC gc = new GC(scaled);
 					gc.setAntialias(SWT.ON);
 					gc.setInterpolation(SWT.HIGH);
 					gc.drawImage(original, 0, 0, imageData.width, imageData.height, 0, 0, width, height);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemList.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemList.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemList.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/ItemList.java
@@ -63,21 +63,22 @@
 import org.openjdk.jmc.ui.UIPlugin;
 import org.openjdk.jmc.ui.accessibility.FocusTracker;
 import org.openjdk.jmc.ui.column.ColumnBuilder;
 import org.openjdk.jmc.ui.column.ColumnManager;
 import org.openjdk.jmc.ui.column.ColumnManager.ColumnComparator;
-import org.openjdk.jmc.ui.handlers.MCContextMenuManager;
 import org.openjdk.jmc.ui.column.IColumn;
 import org.openjdk.jmc.ui.column.TableSettings;
+import org.openjdk.jmc.ui.handlers.MCContextMenuManager;
 
 public class ItemList {
 
 	public static class ItemListBuilder {
 
 		private final List<IColumn> columns = new ArrayList<>();
 
 		public void addColumn(IAttribute<?> a) {
+			@SuppressWarnings("deprecation")
 			IMemberAccessor<?, IItem> accessor = ItemToolkit.accessor(a);
 			// FIXME: Calculate column id, e.g. using getColumnId.
 			// Otherwise there will be problem if adding multiple attributes with the same id.
 			// Requires update of all column id references, e.g. in the pages xml.
 			addColumn(a.getIdentifier(), a.getName(), a.getDescription(),
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LabeledPageFactory.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LabeledPageFactory.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LabeledPageFactory.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/common/LabeledPageFactory.java
@@ -74,11 +74,12 @@
 	public ImageDescriptor getImageDescriptor(IState state) {
 		String iconStr = state.getAttribute(ATTRIBUTE_ICON);
 		if (iconStr != null) {
 			byte[] pngData = Base64.getDecoder().decode(iconStr);
 			try {
-				return ImageDescriptor.createFromImageData(new ImageData(new ByteArrayInputStream(pngData)));
+				return ImageDescriptor
+						.createFromImageDataProvider((zoom) -> new ImageData(new ByteArrayInputStream(pngData)));
 			} catch (Exception e) {
 				FlightRecorderUI.getDefault().getLogger().log(Level.WARNING,
 						"Could not load icon for page: " + getName(state), e); //$NON-NLS-1$
 			}
 		}
@@ -94,11 +95,11 @@
 		to.putString(ATTRIBUTE_DESCRIPTION, description);
 		if (image != null) {
 			try {
 				ImageLoader loader = new ImageLoader();
 				ByteArrayOutputStream out = new ByteArrayOutputStream();
-				loader.data = new ImageData[] {image.getImageData()};
+				loader.data = new ImageData[] {image.getImageData(100)};
 				loader.save(out, SWT.IMAGE_PNG);
 				String iconStr = Base64.getEncoder().encodeToString(out.toByteArray());
 				to.putString(LabeledPageFactory.ATTRIBUTE_ICON, iconStr);
 			} catch (Exception e) {
 				FlightRecorderUI.getDefault().getLogger().log(Level.WARNING, "Could not persist icon", e); //$NON-NLS-1$
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/overview/ResultReportUi.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/overview/ResultReportUi.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/overview/ResultReportUi.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/overview/ResultReportUi.java
@@ -223,11 +223,11 @@
 			if (image == null) {
 				return null;
 			}
 			ImageLoader loader = new ImageLoader();
 			ByteArrayOutputStream out = new ByteArrayOutputStream();
-			loader.data = new ImageData[] {image.getImageData()};
+			loader.data = new ImageData[] {image.getImageData(100)};
 			loader.save(out, SWT.IMAGE_PNG);
 			return Base64.getEncoder().encodeToString(out.toByteArray());
 		}
 
 		public DataPageDescriptor getDescriptor() {
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/EventBrowserPage.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/EventBrowserPage.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/EventBrowserPage.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/EventBrowserPage.java
@@ -282,10 +282,11 @@
 				container.showSelection(getFilteredItems());
 				rebuildItemList();
 			}
 		}
 
+		@SuppressWarnings("deprecation")
 		private void rebuildItemList() {
 			mergeListSettings();
 
 			Iterator<? extends IType<?>> types = selectedTypes.iterator();
 			IItemCollection filteredItems = getFilteredItems();
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/AttributeComponentConfiguration.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/AttributeComponentConfiguration.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/AttributeComponentConfiguration.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/AttributeComponentConfiguration.java
@@ -75,10 +75,11 @@
 		lineChartableAttributes = new HashMap<>();
 		forEachType(items);
 		populateAttributeMaps(isSuitableForLineCharts(items, allTypes));
 	}
 
+	@SuppressWarnings("deprecation")
 	private void forEachType(IItemCollection items) {
 		if (items != null) {
 			ItemCollectionToolkit.stream(items).map(IItemIterable::getType).forEach(type -> {
 				allTypes.put(type.getIdentifier(), type);
 				for (IAttribute<?> a : type.getAttributes()) {
@@ -88,10 +89,11 @@
 				}
 			});
 		}
 	}
 
+	@SuppressWarnings("deprecation")
 	private void populateAttributeMaps(boolean allowLineCharts) {
 		for (Entry<String, IAttribute<?>> a : allAttributes.entrySet()) {
 			if (!commonAttributes.containsKey(a.getKey()) && !uncommonAttributes.containsKey(a.getKey())
 					&& allTypes.values().stream().allMatch(t -> {
 						return t.getAttributes().contains(a.getValue());
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/ItemListAndChart.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/ItemListAndChart.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/ItemListAndChart.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/pages/itemhandler/ItemListAndChart.java
@@ -144,10 +144,11 @@
 
 		acc.getAllAttributes().entrySet().forEach(entry -> {
 			String combinedId = entry.getKey();
 			IAttribute<?> a = entry.getValue();
 			ContentType<?> contentType = a.getContentType();
+			@SuppressWarnings("deprecation")
 			IMemberAccessor<?, IItem> accessor = ItemToolkit.accessor(a);
 			itemListBuilder.addColumn(combinedId, a.getName(), a.getDescription(),
 					contentType instanceof LinearKindOfQuantity, accessor);
 
 		});
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/views/stacktrace/StacktraceView.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/views/stacktrace/StacktraceView.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/views/stacktrace/StacktraceView.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/views/stacktrace/StacktraceView.java
@@ -281,10 +281,12 @@
 					}
 				});
 			}
 		}
 
+		// See JMC-6787
+		@SuppressWarnings("deprecation")
 		@Override
 		public void run() {
 			StacktraceFrame frame = (StacktraceFrame) getStructuredSelection().getFirstElement();
 			// FIXME: Would like to move the table cursor after changing sibling state, not just the selection.
 			if (isInOpenFork(frame)) {
@@ -332,10 +334,12 @@
 		}
 
 		@Override
 		public void run() {
 			Branch branch = ((StacktraceFrame) getStructuredSelection().getFirstElement()).getBranch();
+			// See JMC-6787
+			@SuppressWarnings("deprecation")
 			Branch selectedSibling = branch.selectSibling(offset);
 			provider.refresh();
 			provider.setSelection(new StructuredSelection(selectedSibling.getFirstFrame()));
 		}
 
@@ -434,10 +438,12 @@
 		if (viewer instanceof TreeViewer) {
 			viewer.setContentProvider(createTreeContentProvider());
 		}
 	}
 
+	// See JMC-6787
+	@SuppressWarnings("deprecation")
 	private void rebuildViewer() {
 		boolean hasFocus = viewer.getControl().isFocusControl();
 		ISelection oldSelection = viewer.getSelection();
 		Fork oldInput = (Fork) viewer.getInput();
 		Composite parent = viewer.getControl().getParent();
@@ -821,10 +827,12 @@
 
 	private static boolean isNavigationFrame(StacktraceFrame frame) {
 		return isFirstInBranchWithSiblings(frame) && !isInOpenFork(frame);
 	}
 
+	// See JMC-6787
+	@SuppressWarnings("deprecation")
 	private static boolean isInOpenFork(StacktraceFrame frame) {
 		return frame.getBranch().getParentFork().getSelectedBranch() == null;
 	}
 
 	private static boolean isFirstInBranchWithSiblings(StacktraceFrame frame) {
@@ -839,10 +847,12 @@
 	 * FIXME: 'backwards' argument was used for displaying trace groups built from thread roots with
 	 * the thread roots at the bottom. If we don't want to support that scenario then we can remove
 	 * this argument.
 	 */
 	private static void addSelectedBranches(Fork fork, SimpleArray<StacktraceFrame> input, boolean backwards) {
+		// See JMC-6787
+		@SuppressWarnings("deprecation")
 		Branch selectedBranch = fork.getSelectedBranch();
 		if (selectedBranch == null) {
 			Stream.of(fork.getFirstFrames()).forEach(input::add);
 		} else if (backwards) {
 			addSelectedBranches(selectedBranch.getEndFork(), input, backwards);
@@ -856,10 +866,12 @@
 			input.addAll(selectedBranch.getTailFrames());
 			addSelectedBranches(selectedBranch.getEndFork(), input, backwards);
 		}
 	}
 
+	// See JMC-6787
+	@SuppressWarnings("deprecation")
 	private static Branch getLastSelectedBranch(Fork fromFork) {
 		Branch lastSelectedBranch = null;
 		Branch branch = fromFork.getSelectedBranch();
 		while (branch != null) {
 			lastSelectedBranch = branch;
diff a/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/JfrLaunchDelegateHelper.java b/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/JfrLaunchDelegateHelper.java
--- a/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/JfrLaunchDelegateHelper.java
+++ b/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/JfrLaunchDelegateHelper.java
@@ -46,12 +46,10 @@
 import org.eclipse.debug.core.DebugPlugin;
 import org.eclipse.debug.core.IDebugEventSetListener;
 import org.eclipse.debug.core.ILaunchConfiguration;
 import org.eclipse.osgi.util.NLS;
 import org.eclipse.swt.widgets.Display;
-
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.QuantityConversionException;
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.ide.launch.model.JfrArgsBuilder;
 import org.openjdk.jmc.ide.launch.model.JfrLaunchModel;
diff a/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/LaunchPlugin.java b/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/LaunchPlugin.java
--- a/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/LaunchPlugin.java
+++ b/application/org.openjdk.jmc.ide.launch/src/main/java/org/openjdk/jmc/ide/launch/LaunchPlugin.java
@@ -33,10 +33,11 @@
 package org.openjdk.jmc.ide.launch;
 
 import org.eclipse.jface.resource.ImageRegistry;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.IWorkbenchWindow;
+import org.eclipse.ui.PlatformUI;
 import org.osgi.framework.BundleContext;
 
 import org.openjdk.jmc.ui.MCAbstractUIPlugin;
 
 /**
@@ -84,11 +85,11 @@
 	protected void initializeImageRegistry(ImageRegistry registry) {
 		registerImage(registry, JFR_ICON, JFR_ICON);
 	}
 
 	static Shell getActiveWorkbenchShell() {
-		IWorkbenchWindow window = LaunchPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow();
+		IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
 
 		if (window != null) {
 			return window.getShell();
 		}
 		return null;
diff a/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/util/FileUtils.java b/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/util/FileUtils.java
--- a/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/util/FileUtils.java
+++ b/application/org.openjdk.jmc.joverflow/src/main/java/org/openjdk/jmc/joverflow/util/FileUtils.java
@@ -42,12 +42,10 @@
 import java.io.IOException;
 import java.io.PrintStream;
 import java.util.ArrayList;
 import java.util.List;
 
-import org.openjdk.jmc.common.io.IOToolkit;
-
 /**
  * Simple file-related utilities.
  */
 public class FileUtils {
 
diff a/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/Application.java b/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/Application.java
--- a/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/Application.java
+++ b/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/Application.java
@@ -72,8 +72,8 @@
 		}
 	}
 
 	@Override
 	public void stop() {
-		ApplicationPlugin.getDefault().getWorkbench().close();
+		PlatformUI.getWorkbench().close();
 	}
 }
diff a/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/ApplicationPlugin.java b/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/ApplicationPlugin.java
--- a/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/ApplicationPlugin.java
+++ b/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/ApplicationPlugin.java
@@ -37,10 +37,11 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.jface.resource.ImageRegistry;
+import org.eclipse.jface.resource.ResourceLocator;
 import org.eclipse.ui.plugin.AbstractUIPlugin;
 import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.rcp.application.p2.AddRepositoriesJob;
 import org.openjdk.jmc.rcp.logging.LoggingToolkit;
 import org.osgi.framework.BundleContext;
@@ -141,8 +142,8 @@
 	 * @param path
 	 *            the path
 	 * @return the image descriptor
 	 */
 	public static ImageDescriptor getImageDescriptor(String path) {
-		return imageDescriptorFromPlugin(PLUGIN_ID, path);
+		return ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, path).orElse(null);
 	}
 }
diff a/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/commands/CloseEditor.java b/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/commands/CloseEditor.java
--- a/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/commands/CloseEditor.java
+++ b/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/commands/CloseEditor.java
@@ -35,23 +35,22 @@
 import java.io.PrintStream;
 
 import org.eclipse.ui.IEditorPart;
 import org.eclipse.ui.IWorkbenchPage;
 import org.eclipse.ui.IWorkbenchWindow;
-
+import org.eclipse.ui.PlatformUI;
 import org.openjdk.jmc.commands.IExecute;
 import org.openjdk.jmc.commands.Statement;
-import org.openjdk.jmc.ui.UIPlugin;
 
 /**
  * This class should move to core
  */
 public final class CloseEditor implements IExecute {
 
 	@Override
 	public boolean execute(Statement statement, PrintStream out) {
-		IWorkbenchWindow ww = UIPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow();
+		IWorkbenchWindow ww = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
 		if (ww != null) {
 			IWorkbenchPage wp = ww.getActivePage();
 			if (wp != null) {
 				IEditorPart ep = wp.getActiveEditor();
 				wp.closeEditor(ep, false);
diff a/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/scripting/ShellViewCoommand.java b/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/scripting/ShellViewCoommand.java
--- a/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/scripting/ShellViewCoommand.java
+++ b/application/org.openjdk.jmc.rcp.application/src/main/java/org/openjdk/jmc/rcp/application/scripting/ShellViewCoommand.java
@@ -37,11 +37,11 @@
 import org.eclipse.jface.action.Action;
 import org.eclipse.ui.IViewPart;
 import org.eclipse.ui.IWorkbenchPage;
 import org.eclipse.ui.IWorkbenchWindow;
 import org.eclipse.ui.PartInitException;
-
+import org.eclipse.ui.PlatformUI;
 import org.openjdk.jmc.ui.ActivitiesToolkit;
 import org.openjdk.jmc.ui.UIPlugin;
 
 public class ShellViewCoommand extends Action {
 	private static final String SHELL_ACTIVITY = "org.openjdk.jmc.activity.shell"; //$NON-NLS-1$
@@ -52,11 +52,11 @@
 		setActionDefinitionId("org.openjdk.jmc.rcp.application.commands.shellview"); //$NON-NLS-1$
 	}
 
 	@Override
 	public void run() {
-		IWorkbenchWindow w = UIPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow();
+		IWorkbenchWindow w = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
 		if (w != null) {
 			IWorkbenchPage page = w.getActivePage();
 			if (page != null) {
 				toggleCommandView(page);
 			}
diff a/application/org.openjdk.jmc.rjmx.ui/src/main/java/org/openjdk/jmc/rjmx/ui/internal/RemoveAction.java b/application/org.openjdk.jmc.rjmx.ui/src/main/java/org/openjdk/jmc/rjmx/ui/internal/RemoveAction.java
--- a/application/org.openjdk.jmc.rjmx.ui/src/main/java/org/openjdk/jmc/rjmx/ui/internal/RemoveAction.java
+++ b/application/org.openjdk.jmc.rjmx.ui/src/main/java/org/openjdk/jmc/rjmx/ui/internal/RemoveAction.java
@@ -32,21 +32,20 @@
  */
 package org.openjdk.jmc.rjmx.ui.internal;
 
 import org.eclipse.jface.action.Action;
 import org.eclipse.jface.resource.ImageDescriptor;
+import org.eclipse.jface.resource.ResourceLocator;
 import org.eclipse.ui.forms.SectionPart;
-import org.eclipse.ui.plugin.AbstractUIPlugin;
-
 import org.openjdk.jmc.ui.misc.MCSectionPart;
 
 /**
  * Action for removing a {@link SectionPart} in a {@link SectionPartManager}
  */
 public class RemoveAction extends Action {
-	private final static ImageDescriptor ICON = AbstractUIPlugin.imageDescriptorFromPlugin("org.eclipse.ui", //$NON-NLS-1$
-			"icons/full/elcl16/close_view.gif"); //$NON-NLS-1$
+	private final static ImageDescriptor ICON = ResourceLocator.imageDescriptorFromBundle("org.eclipse.ui", //$NON-NLS-1$
+			"icons/full/elcl16/close_view.gif").orElse(null); //$NON-NLS-1$
 	final private SectionPartManager m_sectionPartmanager;
 	final private MCSectionPart m_part;
 
 	public RemoveAction(SectionPartManager manager, MCSectionPart part) {
 		setImageDescriptor(ICON);
diff a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/persistence/internal/PersistenceFile.java b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/persistence/internal/PersistenceFile.java
--- a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/persistence/internal/PersistenceFile.java
+++ b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/persistence/internal/PersistenceFile.java
@@ -39,11 +39,10 @@
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.util.Comparator;
 import java.util.Locale;
 
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.rjmx.subscription.MRI;
 import org.openjdk.jmc.ui.common.xydata.DefaultTimestampedData;
 import org.openjdk.jmc.ui.common.xydata.ITimestampedData;
 
 class PersistenceFile {
diff a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/subscription/internal/FileMRIMetadata.java b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/subscription/internal/FileMRIMetadata.java
--- a/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/subscription/internal/FileMRIMetadata.java
+++ b/application/org.openjdk.jmc.rjmx/src/main/java/org/openjdk/jmc/rjmx/subscription/internal/FileMRIMetadata.java
@@ -37,20 +37,18 @@
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.NodeList;
-
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.common.util.XmlToolkit;
 import org.openjdk.jmc.rjmx.subscription.IMRIMetadataProvider;
 import org.openjdk.jmc.rjmx.subscription.MRI;
 import org.openjdk.jmc.rjmx.subscription.MRI.Type;
 import org.openjdk.jmc.rjmx.subscription.MRIMetadataToolkit;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
 
 /**
  * This class is used to read the default metadata from the mrimetadata.xml file.
  */
 class FileMRIMetadata {
diff a/application/org.openjdk.jmc.ui.common/src/main/java/org/openjdk/jmc/ui/common/util/MCVersion.java b/application/org.openjdk.jmc.ui.common/src/main/java/org/openjdk/jmc/ui/common/util/MCVersion.java
--- a/application/org.openjdk.jmc.ui.common/src/main/java/org/openjdk/jmc/ui/common/util/MCVersion.java
+++ b/application/org.openjdk.jmc.ui.common/src/main/java/org/openjdk/jmc/ui/common/util/MCVersion.java
@@ -36,12 +36,10 @@
 import java.io.InputStream;
 import java.util.Properties;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.openjdk.jmc.common.io.IOToolkit;
-
 /**
  * Provides Mission Control version information.
  */
 public class MCVersion {
 
diff a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/ActivitiesToolkit.java b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/ActivitiesToolkit.java
--- a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/ActivitiesToolkit.java
+++ b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/ActivitiesToolkit.java
@@ -33,10 +33,11 @@
 package org.openjdk.jmc.ui;
 
 import java.util.HashSet;
 import java.util.Set;
 
+import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.activities.IWorkbenchActivitySupport;
 
 /**
  * Class responsible for activating activities that can be specified on the command line. Currently
  * only the -designer role is supported.
@@ -47,11 +48,11 @@
 	static void updateActivities() {
 		getActivitySupport().setEnabledActivityIds(ACTIVITIES);
 	}
 
 	public static IWorkbenchActivitySupport getActivitySupport() {
-		return UIPlugin.getDefault().getWorkbench().getActivitySupport();
+		return PlatformUI.getWorkbench().getActivitySupport();
 	}
 
 	public static boolean enableActivity(String id) {
 		boolean success = ACTIVITIES.add(id);
 		updateActivities();
diff a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/CoreImages.java b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/CoreImages.java
--- a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/CoreImages.java
+++ b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/CoreImages.java
@@ -33,11 +33,11 @@
 package org.openjdk.jmc.ui;
 
 import java.util.MissingResourceException;
 
 import org.eclipse.jface.resource.ImageDescriptor;
-import org.eclipse.ui.plugin.AbstractUIPlugin;
+import org.eclipse.jface.resource.ResourceLocator;
 
 /**
  * Storage for common ImageDescriptors.
  */
 public class CoreImages {
@@ -175,11 +175,11 @@
 	private static ImageDescriptor icon(String filename) {
 		return createDescriptor("$nl$/icons/" + filename); //$NON-NLS-1$
 	}
 
 	private static ImageDescriptor createDescriptor(String relPath) {
-		ImageDescriptor desc = AbstractUIPlugin.imageDescriptorFromPlugin(UIPlugin.PLUGIN_ID, relPath);
+		ImageDescriptor desc = ResourceLocator.imageDescriptorFromBundle(UIPlugin.PLUGIN_ID, relPath).orElse(null);
 		if (desc == null) {
 			// FIXME: Throwing an exception has the development time advantage of being very intrusive. For release time, logging might be better.
 			throw new MissingResourceException("Missing image '" + relPath + '\'', ImageDescriptor.class.getName(), //$NON-NLS-1$
 					UIPlugin.PLUGIN_ID + '/' + relPath);
 		}
diff a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/formpage/commands/internal/ContextLookup.java b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/formpage/commands/internal/ContextLookup.java
--- a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/formpage/commands/internal/ContextLookup.java
+++ b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/formpage/commands/internal/ContextLookup.java
@@ -36,26 +36,25 @@
 
 import org.eclipse.ui.IEditorPart;
 import org.eclipse.ui.IWorkbenchPage;
 import org.eclipse.ui.IWorkbenchPart;
 import org.eclipse.ui.IWorkbenchWindow;
+import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.forms.editor.FormEditor;
 import org.eclipse.ui.forms.editor.IFormPage;
 
-import org.openjdk.jmc.ui.UIPlugin;
-
 public class ContextLookup {
 	public static Object getContext(PrintStream out) {
 		IWorkbenchPart p = getActiveEditor();
 		if (p instanceof IFormPage) {
 			return ((IFormPage) p).getPartControl();
 		}
 		return null;
 	}
 
 	final static IEditorPart getActiveMainEditor() {
-		IWorkbenchWindow ww = UIPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow();
+		IWorkbenchWindow ww = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
 		if (ww != null) {
 			IWorkbenchPage wp = ww.getActivePage();
 			if (wp == null) {
 				return null;
 			}
diff a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ImageDescriptorAdapterFactory.java b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ImageDescriptorAdapterFactory.java
--- a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ImageDescriptorAdapterFactory.java
+++ b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/ImageDescriptorAdapterFactory.java
@@ -32,12 +32,11 @@
  */
 package org.openjdk.jmc.ui.misc;
 
 import org.eclipse.core.runtime.IAdapterFactory;
 import org.eclipse.jface.resource.ImageDescriptor;
-import org.eclipse.ui.plugin.AbstractUIPlugin;
-
+import org.eclipse.jface.resource.ResourceLocator;
 import org.openjdk.jmc.ui.common.resource.IImageResource;
 import org.openjdk.jmc.ui.common.resource.Resource;
 import org.openjdk.jmc.ui.common.util.AdapterUtil;
 
 public class ImageDescriptorAdapterFactory implements IAdapterFactory {
@@ -48,12 +47,12 @@
 		if (ImageDescriptor.class == adapterType) {
 			IImageResource imageResource = AdapterUtil.getAdapter(adaptableObject, IImageResource.class);
 			if (imageResource != null) {
 				Resource r = imageResource.getImageResource();
 				if (r != null) {
-					return adapterType
-							.cast(AbstractUIPlugin.imageDescriptorFromPlugin(r.getPluginId(), r.getResourcePath()));
+					return adapterType.cast(ResourceLocator
+							.imageDescriptorFromBundle(r.getPluginId(), r.getResourcePath()).orElse(null));
 				}
 			}
 			IGraphical g = AdapterUtil.getAdapter(adaptableObject, IGraphical.class);
 			return adapterType.cast(g == null ? null : g.getImageDescriptor());
 		}
diff a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/OverlayImageDescriptor.java b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/OverlayImageDescriptor.java
--- a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/OverlayImageDescriptor.java
+++ b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/OverlayImageDescriptor.java
@@ -52,30 +52,31 @@
 		this.reduceAlpha = reduceAlpha;
 	}
 
 	@Override
 	protected void drawCompositeImage(int width, int height) {
-		ImageData id = base.getImageData();
+		ImageData id = base.getImageData(100);
 		if (reduceAlpha) {
 			// Just using global alpha messes up normal alpha
 			for (int x = 0; x < id.width; x++) {
 				for (int y = 0; y < id.height; y++) {
 					id.setAlpha(x, y, id.getAlpha(x, y) / ALPHA_REDUCTION);
 				}
 			}
 		}
-		drawImage(id, 0, 0);
+		// Trick to get the auto scaling to work
+		drawImage(zoom -> zoom == 100 ? id : null, 0, 0);
 		for (ImageDescriptor overlay : overlays) {
 			if (overlay != null) {
-				drawImage(overlay.getImageData(), 0, 0);
+				drawImage((zoom) -> overlay.getImageData(zoom), 0, 0);
 			}
 		}
 	}
 
 	@Override
 	protected Point getSize() {
-		ImageData baseData = base.getImageData();
+		ImageData baseData = base.getImageData(100);
 		return new Point(baseData.width, baseData.height);
 	}
 
 	@Override
 	public int hashCode() {
diff a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/SWTColorToolkit.java b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/SWTColorToolkit.java
--- a/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/SWTColorToolkit.java
+++ b/application/org.openjdk.jmc.ui/src/main/java/org/openjdk/jmc/ui/misc/SWTColorToolkit.java
@@ -122,11 +122,11 @@
 		gc.setBackground(getColor(end));
 		gc.fillGradientRectangle(1, 1, size - 3, size - 3, vertical);
 		gc.setForeground(getColor(BORDER_COLOR));
 		gc.drawRectangle(1, 1, size - 3, size - 3);
 		gc.dispose();
-		ImageDescriptor id = ImageDescriptor.createFromImageData(i.getImageData());
+		ImageDescriptor id = ImageDescriptor.createFromImageDataProvider((zoom) -> i.getImageData(zoom));
 		i.dispose();
 		return id;
 	}
 
 	public static Color getColor(RGB rgb) {
diff a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/PackageExampleTest.java b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/PackageExampleTest.java
--- a/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/PackageExampleTest.java
+++ b/application/tests/org.openjdk.jmc.rjmx.test/src/test/java/org/openjdk/jmc/rjmx/test/PackageExampleTest.java
@@ -33,11 +33,10 @@
 package org.openjdk.jmc.rjmx.test;
 
 import static org.junit.Assert.assertTrue;
 
 import org.junit.Test;
-import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;
 import org.openjdk.jmc.rjmx.ConnectionException;
 import org.openjdk.jmc.rjmx.IConnectionDescriptor;
 import org.openjdk.jmc.rjmx.IConnectionHandle;
 import org.openjdk.jmc.rjmx.IServerDescriptor;
diff a/application/tests/org.openjdk.jmc.ui.common.test/src/test/java/org/openjdk/jmc/ui/common/jvm/JVMCommandLineToolkitTest.java b/application/tests/org.openjdk.jmc.ui.common.test/src/test/java/org/openjdk/jmc/ui/common/jvm/JVMCommandLineToolkitTest.java
--- a/application/tests/org.openjdk.jmc.ui.common.test/src/test/java/org/openjdk/jmc/ui/common/jvm/JVMCommandLineToolkitTest.java
+++ b/application/tests/org.openjdk.jmc.ui.common.test/src/test/java/org/openjdk/jmc/ui/common/jvm/JVMCommandLineToolkitTest.java
@@ -34,12 +34,10 @@
 
 import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 
-import org.openjdk.jmc.ui.common.jvm.JVMCommandLineToolkit;
-
 public class JVMCommandLineToolkitTest {
 
 	// Tests for getMainClassOrJar
 
 	@Test
diff a/application/tests/org.openjdk.jmc.ui.common.test/src/test/java/org/openjdk/jmc/ui/common/labelingrules/NameConverterTest.java b/application/tests/org.openjdk.jmc.ui.common.test/src/test/java/org/openjdk/jmc/ui/common/labelingrules/NameConverterTest.java
--- a/application/tests/org.openjdk.jmc.ui.common.test/src/test/java/org/openjdk/jmc/ui/common/labelingrules/NameConverterTest.java
+++ b/application/tests/org.openjdk.jmc.ui.common.test/src/test/java/org/openjdk/jmc/ui/common/labelingrules/NameConverterTest.java
@@ -37,13 +37,10 @@
 import static org.junit.Assert.assertTrue;
 
 import java.text.MessageFormat;
 
 import org.junit.Test;
-
-import org.openjdk.jmc.ui.common.labelingrules.NameConverter;
-import org.openjdk.jmc.ui.common.labelingrules.NamingRule;
 import org.openjdk.jmc.ui.common.util.Environment;
 
 @SuppressWarnings("nls")
 public class NameConverterTest {
 	private final static Object[] EXAMPLE_VALUES1 = new Object[] {"1.5", "[Unknown]",
diff a/application/tests/org.openjdk.jmc.ui.common.test/src/test/java/org/openjdk/jmc/ui/common/security/SecureStoreTest.java b/application/tests/org.openjdk.jmc.ui.common.test/src/test/java/org/openjdk/jmc/ui/common/security/SecureStoreTest.java
--- a/application/tests/org.openjdk.jmc.ui.common.test/src/test/java/org/openjdk/jmc/ui/common/security/SecureStoreTest.java
+++ b/application/tests/org.openjdk.jmc.ui.common.test/src/test/java/org/openjdk/jmc/ui/common/security/SecureStoreTest.java
@@ -43,15 +43,12 @@
 import java.util.HashSet;
 
 import org.junit.Assume;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.osgi.service.prefs.Preferences;
-
-import org.openjdk.jmc.ui.common.security.SecureStore;
-import org.openjdk.jmc.ui.common.security.SecurityException;
 import org.openjdk.jmc.ui.common.util.Environment;
+import org.osgi.service.prefs.Preferences;
 
 @SuppressWarnings("nls")
 public class SecureStoreTest {
 
 	private final String pwd = "test";
diff a/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/SlidingWindowToolkit.java b/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/SlidingWindowToolkit.java
--- a/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/SlidingWindowToolkit.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules/src/main/java/org/openjdk/jmc/flightrecorder/rules/util/SlidingWindowToolkit.java
@@ -47,11 +47,10 @@
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.IRange;
 import org.openjdk.jmc.common.unit.QuantityRange;
 import org.openjdk.jmc.common.util.Pair;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
-import org.openjdk.jmc.flightrecorder.jdk.JdkAggregators;
 import org.openjdk.jmc.flightrecorder.rules.Result;
 
 /**
  * Utility functions and interfaces for doing sliding window calculations.
  */
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/EventAppearance.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/EventAppearance.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/EventAppearance.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/EventAppearance.java
@@ -40,12 +40,10 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Properties;
 import java.util.regex.Pattern;
 
-import org.openjdk.jmc.common.io.IOToolkit;
-
 /**
  * Contain algorithmic conversion and overrides for the display name of event path segments. Also,
  * algorithmic generation and overrides for the color of event types. For these purposes, a case
  * insensitive matching of the path is made. (That is, it is converted to the canonical lower case
  * representation.)
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/LoaderContext.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/LoaderContext.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/LoaderContext.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/LoaderContext.java
@@ -92,10 +92,11 @@
 
 	public IEventSinkFactory getSinkFactory() {
 		return sinkFactory;
 	}
 
+	@SuppressWarnings("deprecation")
 	public EventArray[] buildEventArrays() throws CouldNotLoadRecordingException {
 		sinkFactory.flush();
 		Iterator<EventTypeEntry> eventTypes = repositoryBuilder.getEventTypes();
 		ArrayList<EventArray> eventArrays = new ArrayList<>();
 		while (eventTypes.hasNext()) {
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/StacktraceModel.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/StacktraceModel.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/StacktraceModel.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/StacktraceModel.java
@@ -88,11 +88,11 @@
  * Examining the contents of a branch can be done by using {@link Branch#getFirstFrame()} and
  * {@link Branch#getTailFrames()}. These methods return {@link StacktraceFrame} entries that can be
  * queried for more information.
  */
 public class StacktraceModel {
-
+	@SuppressWarnings("deprecation")
 	private final IMemberAccessor<IMCStackTrace, IItem> accessor = ItemToolkit.accessor(JfrAttributes.EVENT_STACKTRACE);
 	private final boolean threadRootAtTop;
 	private final FrameSeparator frameSeparator;
 	private final IItemCollection items;
 	private Fork rootFork;
@@ -140,10 +140,11 @@
 	 * you use the methods on the {@link Fork} and {@link Branch} classes to navigate the model.
 	 * <p>
 	 * The first call may take some time due to calculations, so it may be useful to call this in a
 	 * background thread if used in a UI.
 	 */
+	@SuppressWarnings("deprecation")
 	public Fork getRootFork() {
 		if (rootFork == null) {
 			rootFork = new Fork(ItemToolkit.asIterable(items));
 		}
 		return rootFork;
diff a/core/org.openjdk.jmc.jdp/.classpath b/core/org.openjdk.jmc.jdp/.classpath
--- a/core/org.openjdk.jmc.jdp/.classpath
+++ b/core/org.openjdk.jmc.jdp/.classpath
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" output="target/classes" path="src/main/java"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="src" output="target/classes" path="src/main/java"/>
 	<classpathentry kind="output" path="target/classes"/>
 </classpath>
diff a/core/tests/pom.xml b/core/tests/pom.xml
--- a/core/tests/pom.xml
+++ b/core/tests/pom.xml
@@ -37,11 +37,10 @@
 		<groupId>org.openjdk.jmc</groupId>
 		<artifactId>missioncontrol.core</artifactId>
 		<version>8.0.0-SNAPSHOT</version>
 	</parent>
 	<artifactId>missioncontrol.core.tests</artifactId>
-	<version>8.0.0-SNAPSHOT</version>
 	<packaging>pom</packaging>
 	<modules>
 		<module>org.openjdk.jmc.common.test</module>
 		<module>org.openjdk.jmc.flightrecorder.test</module>
 		<module>org.openjdk.jmc.flightrecorder.rules.test</module>
