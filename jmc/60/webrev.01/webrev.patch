diff a/agent/src/main/java/org/openjdk/jmc/agent/Agent.java b/agent/src/main/java/org/openjdk/jmc/agent/Agent.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/Agent.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/Agent.java
@@ -32,14 +32,17 @@
  */
 package org.openjdk.jmc.agent;
 
 import java.io.File;
 import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.instrument.Instrumentation;
+import java.lang.instrument.UnmodifiableClassException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import javax.xml.stream.XMLStreamException;
 
@@ -54,10 +57,11 @@
 	/**
 	 * This should be generated as part of the build later.
 	 */
 	public final static String VERSION = "0.0.2"; //$NON-NLS-1$
 	private final static String DEFAULT_CONFIG = "jfrprobes.xml"; //$NON-NLS-1$
+	private static boolean loadedDynamically = false;
 
 	/**
 	 * This method is run when the agent is started from the command line.
 	 *
 	 * @param agentArguments
@@ -80,10 +84,11 @@
 	 *            the {@link Instrumentation} instance, provided to us by the kind JVM.
 	 */
 	public static void agentmain(String agentArguments, Instrumentation instrumentation) {
 		printVersion();
 		getLogger().fine("Starting from agentmain"); //$NON-NLS-1$
+		loadedDynamically = true;
 		initializeAgent(agentArguments, instrumentation);
 	}
 
 	/**
 	 * This method can be used to initialize the BCI agent when using it as a stand alone library.
@@ -98,10 +103,13 @@
 	public static void initializeAgent(InputStream configuration, Instrumentation instrumentation)
 			throws XMLStreamException {
 		TransformRegistry registry = DefaultTransformRegistry.from(configuration);
 		instrumentation.addTransformer(new Transformer(registry), true);
 		AgentManagementFactory.createAndRegisterAgentControllerMBean(instrumentation, registry);
+		if (loadedDynamically) {
+			retransformClasses(registry.getClassNames(), instrumentation);
+		}
 	}
 
 	/**
 	 * @return the Logger to use for agent related status information.
 	 */
@@ -128,9 +136,34 @@
 		} catch (XMLStreamException | IOException e) {
 			getLogger().log(Level.SEVERE, "Failed to read jfr probe definitions from " + file.getPath(), e); //$NON-NLS-1$
 		}
 	}
 
+	/**
+	 * Retransforms the required classes when the agent is loaded dynamically.
+	 *
+	 * @param clazzes
+	 *            list of names of classes to retransform
+	 * @param instrumentation
+	 *            the {@link Instrumentation} instance.
+	 */
+	private static void retransformClasses(Set<String> clazzes, Instrumentation instrumentation) {
+		List<Class<?>> classesToRetransform = new ArrayList<Class<?>>();
+		for (String clazz : clazzes) {
+			try {
+				Class<?> classToRetransform = Class.forName(clazz.replace('/', '.'));
+				classesToRetransform.add(classToRetransform);
+			} catch (ClassNotFoundException cnfe) {
+				getLogger().log(Level.SEVERE, "Unable to find class: " + clazz, cnfe);
+			}
+		}
+		try {
+			instrumentation.retransformClasses(classesToRetransform.toArray(new Class<?>[0]));
+		} catch (UnmodifiableClassException e) {
+			getLogger().log(Level.SEVERE, "Unable to retransform classes", e);
+		}
+	}
+
 	private static void printVersion() {
 		getLogger().info(String.format("JMC BCI agent v%s", VERSION)); //$NON-NLS-1$
 	}
 }
diff a/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java b/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
@@ -31,10 +31,11 @@
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent;
 
 import java.util.List;
+import java.util.Set;
 
 public interface TransformRegistry {
 	/**
 	 * The named class has transforms that have not been executed yet.
 	 *
@@ -42,19 +43,26 @@
 	 *            the name of the class to be transformed.
 	 * @return true if the class has transforms scheduled. false if not.
 	 */
 	boolean hasPendingTransforms(String className);
 
-	/**O
+	/**
 	 * Returns the list of {@link TransformDescriptor}s for the named class.
 	 *
 	 * @param className
 	 *            the class for which to retrieve the transformation metadata.
 	 * @return the list of transformation metadata for the named class.
 	 */
 	List<TransformDescriptor> getTransformData(String className);
 
+	/**
+	 * Returns the names of all classes stored in the registry.
+	 *
+	 * @return the unmodifiable set of class names.
+	 */
+	Set<String> getClassNames();
+
 	/**
 	 * Modifies class information in the registry according to the xml description.
 	 *
 	 * @param xmlDescription
 	 *           an XML snippet describing the wanted modifications.
diff a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
@@ -33,15 +33,17 @@
 package org.openjdk.jmc.agent.impl;
 
 import java.io.InputStream;
 import java.io.StringReader;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLInputFactory;
@@ -454,10 +456,14 @@
 		List<String> classNames = new ArrayList<>(transformData.keySet());
 		transformData.clear();
 		return classNames;
 	}
 
+	public Set<String> getClassNames() {
+		return Collections.unmodifiableSet(transformData.keySet());
+	}
+
 	public void setRevertInstrumentation(boolean shouldRevert) {
 		this.revertInstrumentation = shouldRevert;
 	}
 
 	public boolean isRevertIntrumentation() {
