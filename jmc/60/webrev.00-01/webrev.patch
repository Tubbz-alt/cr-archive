diff a/agent/src/main/java/org/openjdk/jmc/agent/Agent.java b/agent/src/main/java/org/openjdk/jmc/agent/Agent.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/Agent.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/Agent.java
@@ -36,11 +36,13 @@
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.instrument.Instrumentation;
 import java.lang.instrument.UnmodifiableClassException;
+import java.util.ArrayList;
 import java.util.List;
+import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import javax.xml.stream.XMLStreamException;
 
@@ -142,22 +144,22 @@
 	 * @param clazzes
 	 *            list of names of classes to retransform
 	 * @param instrumentation
 	 *            the {@link Instrumentation} instance.
 	 */
-	private static void retransformClasses(List<String> clazzes, Instrumentation instrumentation) {
-		Class<?>[] classesToRetransform = new Class<?>[clazzes.size()];
-		for (int i = 0; i < clazzes.size(); i++) {
+	private static void retransformClasses(Set<String> clazzes, Instrumentation instrumentation) {
+		List<Class<?>> classesToRetransform = new ArrayList<Class<?>>();
+		for (String clazz : clazzes) {
 			try {
-				Class<?> classToRetransform = Class.forName(clazzes.get(i).replace('/', '.'));
-				classesToRetransform[i] = classToRetransform;
+				Class<?> classToRetransform = Class.forName(clazz.replace('/', '.'));
+				classesToRetransform.add(classToRetransform);
 			} catch (ClassNotFoundException cnfe) {
-				getLogger().log(Level.SEVERE, "Unable to find class: " + clazzes.get(i), cnfe);
+				getLogger().log(Level.SEVERE, "Unable to find class: " + clazz, cnfe);
 			}
 		}
 		try {
-			instrumentation.retransformClasses(classesToRetransform);
+			instrumentation.retransformClasses(classesToRetransform.toArray(new Class<?>[0]));
 		} catch (UnmodifiableClassException e) {
 			getLogger().log(Level.SEVERE, "Unable to retransform classes", e);
 		}
 	}
 
diff a/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java b/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/TransformRegistry.java
@@ -31,10 +31,11 @@
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent;
 
 import java.util.List;
+import java.util.Set;
 
 public interface TransformRegistry {
 	/**
 	 * The named class has transforms that have not been executed yet.
 	 *
@@ -54,13 +55,13 @@
 	List<TransformDescriptor> getTransformData(String className);
 
 	/**
 	 * Returns the names of all classes stored in the registry.
 	 *
-	 * @return the list of class names.
+	 * @return the unmodifiable set of class names.
 	 */
-	List<String> getClassNames();
+	Set<String> getClassNames();
 
 	/**
 	 * Modifies class information in the registry according to the xml description.
 	 *
 	 * @param xmlDescription
diff a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
@@ -33,15 +33,17 @@
 package org.openjdk.jmc.agent.impl;
 
 import java.io.InputStream;
 import java.io.StringReader;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLInputFactory;
@@ -454,12 +456,12 @@
 		List<String> classNames = new ArrayList<>(transformData.keySet());
 		transformData.clear();
 		return classNames;
 	}
 
-	public List<String> getClassNames() {
-		return new ArrayList<>(transformData.keySet());
+	public Set<String> getClassNames() {
+		return Collections.unmodifiableSet(transformData.keySet());
 	}
 
 	public void setRevertInstrumentation(boolean shouldRevert) {
 		this.revertInstrumentation = shouldRevert;
 	}
