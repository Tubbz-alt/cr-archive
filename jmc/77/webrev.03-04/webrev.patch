diff a/application/org.openjdk.jmc.joverflow.ext.treemap/META-INF/MANIFEST.MF b/application/org.openjdk.jmc.joverflow.ext.treemap/META-INF/MANIFEST.MF
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/META-INF/MANIFEST.MF
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/META-INF/MANIFEST.MF
@@ -8,7 +8,8 @@
 Require-Bundle: org.openjdk.jmc.ui,
  org.openjdk.jmc.joverflow,
  org.openjdk.jmc.joverflow.ui
 Eclipse-BuddyPolicy: app
 Bundle-ActivationPolicy: lazy
+Bundle-Activator: org.openjdk.jmc.joverflow.ext.treemap.JOverflowTreemapPlugin
 Automatic-Module-Name: org.openjdk.jmc.joverflow.ext.treemap
 Import-Package: org.openjdk.jmc.flightrecorder.ui
diff a/application/org.openjdk.jmc.joverflow.ui/icons/undo_edit.gif b/application/org.openjdk.jmc.joverflow.ext.treemap/icons/reset.gif
--- a/application/org.openjdk.jmc.joverflow.ui/icons/undo_edit.gif
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/icons/reset.gif
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/JOverflowTreemapPlugin.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/JOverflowTreemapPlugin.java
--- /dev/null
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/JOverflowTreemapPlugin.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.joverflow.ext.treemap;
+
+import org.openjdk.jmc.ui.MCAbstractUIPlugin;
+import org.osgi.framework.BundleContext;
+
+/**
+ * The activator class controls the plug-in life cycle.
+ */
+public class JOverflowTreemapPlugin extends MCAbstractUIPlugin {
+
+	// The plug-in ID
+	private static final String PLUGIN_ID = "org.openjdk.jmc.joverflow.ext.treemap"; //$NON-NLS-1$
+
+	static final String ICON_RESET = "reset.gif"; //$NON-NLS-1$
+
+	// The shared instance
+	private static JOverflowTreemapPlugin m_plugin;
+
+	/**
+	 * The constructor
+	 */
+	public JOverflowTreemapPlugin() {
+		super(PLUGIN_ID);
+	}
+
+	@Override
+	public void start(BundleContext context) throws Exception {
+		super.start(context);
+		m_plugin = this;
+	}
+
+	@Override
+	public void stop(BundleContext context) throws Exception {
+		m_plugin = null;
+		super.stop(context);
+	}
+
+	/**
+	 * Returns the shared instance
+	 *
+	 * @return the shared instance
+	 */
+	public static JOverflowTreemapPlugin getDefault() {
+		return m_plugin;
+	}
+}
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/Messages.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/Messages.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/Messages.java
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/Messages.java
@@ -38,11 +38,11 @@
 public class Messages extends NLS {
 	private static final String BUNDLE_NAME = "org.openjdk.jmc.joverflow.ext.treemap.messages"; //$NON-NLS-1$
 
 	public static String TreemapAction_ZOOM_IN_DESCRIPTION;
 	public static String TreemapAction_ZOOM_OUT_DESCRIPTION;
-	public static String TreemapAction_ZOOM_OFF_DESCRIPTION;
+	public static String TreemapAction_ZOOM_RESET_DESCRIPTION;
 	public static String TreemapPageBookView_NO_JOVERFLOW_EDITOR_SELECTED;
 	public static String TreemapPage_NO_INSTANCES_SELECTED;
 
 	static {
 		// initialize resource bundle
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapAction.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapAction.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapAction.java
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapAction.java
@@ -37,10 +37,12 @@
 import org.eclipse.jface.action.IAction;
 import org.eclipse.jface.resource.ImageDescriptor;
 import org.openjdk.jmc.ui.CoreImages;
 
 /* package-private */ class TreemapAction extends Action {
+	private static final String ICON_RESET = "reset.gif"; //$NON-NLS-1$
+
 	private final TreemapActionType actionType;
 	private Runnable runnable = () -> {
 	};
 
 	TreemapAction(TreemapActionType actionType) {
@@ -64,11 +66,11 @@
 	}
 
 	enum TreemapActionType {
 		ZOOM_IN(Messages.TreemapAction_ZOOM_IN_DESCRIPTION, IAction.AS_PUSH_BUTTON, CoreImages.ZOOM_IN), // 
 		ZOOM_OUT(Messages.TreemapAction_ZOOM_OUT_DESCRIPTION, IAction.AS_PUSH_BUTTON, CoreImages.ZOOM_OUT), // 
-		ZOOM_OFF(Messages.TreemapAction_ZOOM_OFF_DESCRIPTION, IAction.AS_PUSH_BUTTON, CoreImages.ZOOM_OFF);
+		ZOOM_RESET(Messages.TreemapAction_ZOOM_RESET_DESCRIPTION, IAction.AS_PUSH_BUTTON, JOverflowTreemapPlugin.getDefault().getMCImageDescriptor(JOverflowTreemapPlugin.ICON_RESET));
 
 		private final String message;
 		private final int action;
 		private final ImageDescriptor imageDescriptor;
 
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPage.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPage.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPage.java
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPage.java
@@ -240,11 +240,11 @@
 				break;
 			case ZOOM_OUT:
 				action.setEnabled(top.getParentItem() != null);
 				action.setRunnable(() -> treemap.setTopItem(top.getParentItem()));
 				break;
-			case ZOOM_OFF:
+			case ZOOM_RESET:
 				action.setEnabled(top != root);
 				action.setRunnable(() -> treemap.setTopItem(root));
 			}
 		});
 	}
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPageBookView.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPageBookView.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPageBookView.java
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPageBookView.java
@@ -109,11 +109,11 @@
 	public void init(IViewSite site) throws PartInitException {
 		super.init(site);
 
 		treemapActions = new TreemapAction[] {new TreemapAction(TreemapAction.TreemapActionType.ZOOM_IN), //
 				new TreemapAction(TreemapAction.TreemapActionType.ZOOM_OUT), //
-				new TreemapAction(TreemapAction.TreemapActionType.ZOOM_OFF) //
+				new TreemapAction(TreemapAction.TreemapActionType.ZOOM_RESET) //
 		};
 		Stream.of(treemapActions).forEach((action) -> action.setEnabled(false));
 
 		IToolBarManager toolBar = site.getActionBars().getToolBarManager();
 		Stream.of(treemapActions).forEach(toolBar::add);
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/resources/org/openjdk/jmc/joverflow/ext/treemap/messages.properties b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/resources/org/openjdk/jmc/joverflow/ext/treemap/messages.properties
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/resources/org/openjdk/jmc/joverflow/ext/treemap/messages.properties
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/resources/org/openjdk/jmc/joverflow/ext/treemap/messages.properties
@@ -31,8 +31,8 @@
 #  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 #  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #
 TreemapAction_ZOOM_IN_DESCRIPTION=Zoom-in to the selected node
 TreemapAction_ZOOM_OUT_DESCRIPTION=Zoom-out to the parent node
-TreemapAction_ZOOM_OFF_DESCRIPTION=Display the root node
+TreemapAction_ZOOM_RESET_DESCRIPTION=Reset the zooming level and display the root node
 TreemapPageBookView_NO_JOVERFLOW_EDITOR_SELECTED=No JOverflow editor selected
 TreemapPage_NO_INSTANCES_SELECTED=No instances selected
