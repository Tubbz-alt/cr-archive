diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapAction.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapAction.java
--- a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapAction.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapAction.java
@@ -36,11 +36,11 @@
 import org.eclipse.jface.action.Action;
 import org.eclipse.jface.action.IAction;
 import org.eclipse.jface.resource.ImageDescriptor;
 import org.openjdk.jmc.ui.CoreImages;
 
-/* package-private */ class TreemapAction extends Action {
+class TreemapAction extends Action {
 	private static final String ICON_RESET = "reset.gif"; //$NON-NLS-1$
 
 	private final TreemapActionType actionType;
 	private Runnable runnable = () -> {
 	};
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapPage.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapPage.java
--- a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapPage.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapPage.java
@@ -63,11 +63,11 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.stream.Stream;
 
-/* package-private */ class TreemapPage extends Page implements ModelListener {
+class TreemapPage extends Page implements ModelListener {
 	private static final Color[] COLORS = { //
 			new Color(Display.getCurrent(), 250, 206, 210), // red
 			new Color(Display.getCurrent(), 185, 214, 255), // blue
 			new Color(Display.getCurrent(), 229, 229, 229), // grey
 			new Color(Display.getCurrent(), 255, 231, 199), // orange
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/Breadcrumb.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/Breadcrumb.java
--- a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/Breadcrumb.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/Breadcrumb.java
@@ -100,19 +100,19 @@
 			}
 		});
 		addMouseMoveListener(this::onMouseMove);
 	}
 
-	/* package-private */ static Composite checkNull(Composite control) {
+	static Composite checkNull(Composite control) {
 		if (control == null) {
 			SWT.error(SWT.ERROR_NULL_ARGUMENT);
 		}
 
 		return control;
 	}
 
-	/* package-private */ void createItem(BreadcrumbItem item) {
+	void createItem(BreadcrumbItem item) {
 		items.push(item);
 
 		redraw();
 	}
 
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/BreadcrumbItem.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/BreadcrumbItem.java
--- a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/BreadcrumbItem.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/BreadcrumbItem.java
@@ -76,11 +76,11 @@
 
 		this.parent = parent;
 		parent.createItem(this);
 	}
 
-	/* package-private */ void paintItem(GC gc, Rectangle bounds) {
+	void paintItem(GC gc, Rectangle bounds) {
 		Color bg = gc.getBackground();
 		Color fg = gc.getForeground();
 		Font font = gc.getFont();
 
 		gc.setFont(getFont());
@@ -129,11 +129,11 @@
 		gc.setBackground(bg);
 		gc.setForeground(fg);
 		gc.setFont(font);
 	}
 
-	/* package-private */ Point getDimension(GC gc) {
+	Point getDimension(GC gc) {
 		Font font = gc.getFont();
 		gc.setFont(getFont());
 
 		Point extend = gc.textExtent(getText());
 		extend.x += 2 * PADDING + 2 * ARROW_WIDTH;
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/SquarifiedTreemap.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/SquarifiedTreemap.java
--- a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/SquarifiedTreemap.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/SquarifiedTreemap.java
@@ -47,11 +47,11 @@
  * associate a rectangle to a {@link TreemapItem} element and its children.
  * <p>
  * 
  * @see TreemapItem
  */
-/* package-private */ class SquarifiedTreemap {
+class SquarifiedTreemap {
 
 	/*
 	 * The algorithm this implements is described in detail here:
 	 *
 	 * https://bitbucket.org/Ammirate/thermostat-treemap/src/tip/Treemap%20documentation.pdf
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/Treemap.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/Treemap.java
--- a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/Treemap.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/Treemap.java
@@ -111,19 +111,19 @@
 			}
 		});
 		addMouseMoveListener(this::onMouseMove);
 	}
 
-	/* package-private */ static Composite checkNull(Composite control) {
+	static Composite checkNull(Composite control) {
 		if (control == null) {
 			SWT.error(SWT.ERROR_NULL_ARGUMENT);
 		}
 
 		return control;
 	}
 
-	/* package-private */ static Treemap checkNull(Treemap treemap) {
+	static Treemap checkNull(Treemap treemap) {
 		if (treemap == null) {
 			SWT.error(SWT.ERROR_NULL_ARGUMENT);
 		}
 
 		return treemap;
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/TreemapItem.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/TreemapItem.java
--- a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/TreemapItem.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/TreemapItem.java
@@ -120,11 +120,11 @@
 			// adding a 0 weighted node to the end of decreasingly sorted list preserves the sorted structure
 			parentItem.children.add(this);
 		}
 	}
 
-	/* package-private */ static TreemapItem checkNull(TreemapItem item) {
+	static TreemapItem checkNull(TreemapItem item) {
 		if (item == null) {
 			SWT.error(SWT.ERROR_NULL_ARGUMENT);
 		}
 
 		return item;
@@ -169,11 +169,11 @@
 
 		sum += realWeight;
 		apparentWeight = sum;
 	}
 
-	/* package-private */ void paintItem(GC gc, Rectangle bounds, boolean all) {
+	void paintItem(GC gc, Rectangle bounds, boolean all) {
 		this.bounds = bounds;
 
 		Color bg = gc.getBackground();
 		Color fg = gc.getForeground();
 		Font font = gc.getFont();
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/TreemapToolTip.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/TreemapToolTip.java
--- a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/TreemapToolTip.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/TreemapToolTip.java
@@ -39,11 +39,11 @@
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
 
-/*package-private*/ class TreemapToolTip extends ToolTip {
+class TreemapToolTip extends ToolTip {
 	private static final int PADDING = 5;
 
 	private TreemapItem item = null;
 
 	public TreemapToolTip(Control parent) {
