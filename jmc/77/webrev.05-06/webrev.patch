diff a/application/org.openjdk.jmc.feature.joverflow.ext.treemap/.project b/application/org.openjdk.jmc.feature.joverflow.ext.treemap/.project
--- a/application/org.openjdk.jmc.feature.joverflow.ext.treemap/.project
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>org.openjdk.jmc.feature.joverflow.ext.treemap</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.pde.FeatureBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.m2e.core.maven2Builder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.m2e.core.maven2Nature</nature>
-		<nature>org.eclipse.pde.FeatureNature</nature>
-	</natures>
-</projectDescription>
diff a/application/org.openjdk.jmc.feature.joverflow.ext.treemap/build.properties b/application/org.openjdk.jmc.feature.joverflow.ext.treemap/build.properties
--- a/application/org.openjdk.jmc.feature.joverflow.ext.treemap/build.properties
+++ /dev/null
@@ -1,34 +0,0 @@
-#
-#  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
-#  Copyright (c) 2020, Red Hat Inc. All rights reserved.
-#
-#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-#
-#  The contents of this file are subject to the terms of either the Universal Permissive License 
-#  v 1.0 as shown at http://oss.oracle.com/licenses/upl
-#   
-#  or the following license:
-#   
-#  Redistribution and use in source and binary forms, with or without modification, are permitted
-#  provided that the following conditions are met:
-#   
-#  1. Redistributions of source code must retain the above copyright notice, this list of conditions
-#  and the following disclaimer.
-#   
-#  2. Redistributions in binary form must reproduce the above copyright notice, this list of
-#  conditions and the following disclaimer in the documentation and/or other materials provided with
-#  the distribution.
-#   
-#  3. Neither the name of the copyright holder nor the names of its contributors may be used to
-#  endorse or promote products derived from this software without specific prior written permission.
-#
-#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
-#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
-#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
-#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-#
-bin.includes = feature.xml
diff a/application/org.openjdk.jmc.feature.joverflow.ext.treemap/feature.properties b/application/org.openjdk.jmc.feature.joverflow.ext.treemap/feature.properties
--- a/application/org.openjdk.jmc.feature.joverflow.ext.treemap/feature.properties
+++ /dev/null
@@ -1,38 +0,0 @@
-#
-#  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
-#  Copyright (c) 2020, Red Hat Inc. All rights reserved.
-#
-#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-#
-#  The contents of this file are subject to the terms of either the Universal Permissive License 
-#  v 1.0 as shown at http://oss.oracle.com/licenses/upl
-#   
-#  or the following license:
-#   
-#  Redistribution and use in source and binary forms, with or without modification, are permitted
-#  provided that the following conditions are met:
-#   
-#  1. Redistributions of source code must retain the above copyright notice, this list of conditions
-#  and the following disclaimer.
-#   
-#  2. Redistributions in binary form must reproduce the above copyright notice, this list of
-#  conditions and the following disclaimer in the documentation and/or other materials provided with
-#  the distribution.
-#   
-#  3. Neither the name of the copyright holder nor the names of its contributors may be used to
-#  endorse or promote products derived from this software without specific prior written permission.
-#
-#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
-#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
-#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
-#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-#
-name=JOverflow Treemap View
-provider=Oracle Corporation
-copyright=Copyright \u00A9 2020, Oracle and/or its affiliates. All rights reserved.
-description=This feature adds a treemap view to JOverflow for visualizing memory usage by packages/classes.
-descriptionUrl=http://www.oracle.com/missioncontrol
diff a/application/org.openjdk.jmc.feature.joverflow.ext.treemap/feature.xml b/application/org.openjdk.jmc.feature.joverflow.ext.treemap/feature.xml
--- a/application/org.openjdk.jmc.feature.joverflow.ext.treemap/feature.xml
+++ /dev/null
@@ -1,63 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--   
-   Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.
-   Copyright (c) 2020, Red Hat Inc. All rights reserved.
-   
-   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-   
-   The contents of this file are subject to the terms of either the Universal Permissive License 
-   v 1.0 as shown at http://oss.oracle.com/licenses/upl
-   
-   or the following license:
-   
-   Redistribution and use in source and binary forms, with or without modification, are permitted
-   provided that the following conditions are met:
-   
-   1. Redistributions of source code must retain the above copyright notice, this list of conditions
-   and the following disclaimer.
-   
-   2. Redistributions in binary form must reproduce the above copyright notice, this list of
-   conditions and the following disclaimer in the documentation and/or other materials provided with
-   the distribution.
-   
-   3. Neither the name of the copyright holder nor the names of its contributors may be used to
-   endorse or promote products derived from this software without specific prior written permission.
-   
-   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
-   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
-   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
-   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--->
-<feature
-      id="org.openjdk.jmc.feature.joverflow.ext.treemap"
-      label="%name"
-      version="1.0.0.qualifier"
-      provider-name="%provider"
-      license-feature="org.openjdk.jmc.feature.license"
-      license-feature-version="8.0.0.qualifier">
-
-   <description url="%descriptionUrl">
-      %description
-   </description>
-
-   <copyright>
-      %copyright
-   </copyright>
-
-   <requires>
-      <import plugin="org.openjdk.jmc.common" match="equivalent"/>
-      <import plugin="org.eclipse.ui"/>
-   </requires>
-
-   <plugin
-         id="org.openjdk.jmc.joverflow.ext.treemap"
-         download-size="0"
-         install-size="0"
-         version="0.0.0"
-         unpack="false"/>
-
-</feature>
diff a/application/org.openjdk.jmc.feature.joverflow.ext.treemap/pom.xml b/application/org.openjdk.jmc.feature.joverflow.ext.treemap/pom.xml
--- a/application/org.openjdk.jmc.feature.joverflow.ext.treemap/pom.xml
+++ /dev/null
@@ -1,49 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--   
-   Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
-   Copyright (c) 2020, Red Hat Inc. All rights reserved.
-   
-   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-   
-   The contents of this file are subject to the terms of either the Universal Permissive License 
-   v 1.0 as shown at http://oss.oracle.com/licenses/upl
-   
-   or the following license:
-   
-   Redistribution and use in source and binary forms, with or without modification, are permitted
-   provided that the following conditions are met:
-   
-   1. Redistributions of source code must retain the above copyright notice, this list of conditions
-   and the following disclaimer.
-   
-   2. Redistributions in binary form must reproduce the above copyright notice, this list of
-   conditions and the following disclaimer in the documentation and/or other materials provided with
-   the distribution.
-   
-   3. Neither the name of the copyright holder nor the names of its contributors may be used to
-   endorse or promote products derived from this software without specific prior written permission.
-   
-   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
-   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
-   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
-   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-	<parent>
-		<groupId>org.openjdk.jmc</groupId>
-		<artifactId>missioncontrol.application</artifactId>
-		<version>8.0.0-SNAPSHOT</version>
-	</parent>
-	<artifactId>org.openjdk.jmc.feature.joverflow.ext.treemap</artifactId>
-	<version>1.0.0-SNAPSHOT</version>
-	<packaging>eclipse-feature</packaging>
-
-	<properties>
-		<spotless.config.path>${basedir}/../../configuration/ide/eclipse/formatting/formatting.xml</spotless.config.path>
-	</properties>
-</project>
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/.classpath b/application/org.openjdk.jmc.joverflow.ext.treemap/.classpath
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/.classpath
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"/>
-	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="src" path="src/main/java"/>
-	<classpathentry kind="src" path="src/main/resources"/>
-	<classpathentry kind="output" path="target/classes"/>
-</classpath>
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/.project b/application/org.openjdk.jmc.joverflow.ext.treemap/.project
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/.project
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>org.openjdk.jmc.joverflow.ext.treemap</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.pde.ManifestBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.pde.SchemaBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.m2e.core.maven2Builder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.m2e.core.maven2Nature</nature>
-		<nature>org.eclipse.pde.PluginNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/META-INF/MANIFEST.MF b/application/org.openjdk.jmc.joverflow.ext.treemap/META-INF/MANIFEST.MF
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/META-INF/MANIFEST.MF
+++ /dev/null
@@ -1,15 +0,0 @@
-Manifest-Version: 1.0
-Bundle-ManifestVersion: 2
-Bundle-RequiredExecutionEnvironment: JavaSE-1.8
-Bundle-Name: Joverflow Treemap View
-Bundle-SymbolicName: org.openjdk.jmc.joverflow.ext.treemap;singleton:=true
-Bundle-Version: 1.0.0.qualifier
-Bundle-Vendor: Oracle Corporation
-Require-Bundle: org.openjdk.jmc.ui,
- org.openjdk.jmc.joverflow,
- org.openjdk.jmc.joverflow.ui
-Eclipse-BuddyPolicy: app
-Bundle-ActivationPolicy: lazy
-Bundle-Activator: org.openjdk.jmc.joverflow.ext.treemap.JOverflowTreemapPlugin
-Automatic-Module-Name: org.openjdk.jmc.joverflow.ext.treemap
-Import-Package: org.openjdk.jmc.flightrecorder.ui
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/build.properties b/application/org.openjdk.jmc.joverflow.ext.treemap/build.properties
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/build.properties
+++ /dev/null
@@ -1,39 +0,0 @@
-#
-#  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
-#  Copyright (c) 2020, Red Hat Inc. All rights reserved.
-#
-#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-#
-#  The contents of this file are subject to the terms of either the Universal Permissive License 
-#  v 1.0 as shown at http://oss.oracle.com/licenses/upl
-#   
-#  or the following license:
-#   
-#  Redistribution and use in source and binary forms, with or without modification, are permitted
-#  provided that the following conditions are met:
-#   
-#  1. Redistributions of source code must retain the above copyright notice, this list of conditions
-#  and the following disclaimer.
-#   
-#  2. Redistributions in binary form must reproduce the above copyright notice, this list of
-#  conditions and the following disclaimer in the documentation and/or other materials provided with
-#  the distribution.
-#   
-#  3. Neither the name of the copyright holder nor the names of its contributors may be used to
-#  endorse or promote products derived from this software without specific prior written permission.
-#
-#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
-#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
-#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
-#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-#
-source.. = src/main/java/
-output.. = target/classes/
-bin.includes = META-INF/,\
-               .,\
-               icons/,\
-               plugin.xml
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/icons/reset.gif b/application/org.openjdk.jmc.joverflow.ext.treemap/icons/reset.gif
Binary files application/org.openjdk.jmc.joverflow.ext.treemap/icons/reset.gif and /dev/null differ
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/plugin.xml b/application/org.openjdk.jmc.joverflow.ext.treemap/plugin.xml
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/plugin.xml
+++ /dev/null
@@ -1,50 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--   
-   Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
-   Copyright (c) 2020, Red Hat Inc. All rights reserved.
-   
-   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-   
-   The contents of this file are subject to the terms of either the Universal Permissive License 
-   v 1.0 as shown at http://oss.oracle.com/licenses/upl
-   
-   or the following license:
-   
-   Redistribution and use in source and binary forms, with or without modification, are permitted
-   provided that the following conditions are met:
-   
-   1. Redistributions of source code must retain the above copyright notice, this list of conditions
-   and the following disclaimer.
-   
-   2. Redistributions in binary form must reproduce the above copyright notice, this list of
-   conditions and the following disclaimer in the documentation and/or other materials provided with
-   the distribution.
-   
-   3. Neither the name of the copyright holder nor the names of its contributors may be used to
-   endorse or promote products derived from this software without specific prior written permission.
-   
-   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
-   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
-   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
-   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--->
-<?eclipse version="3.4"?>
-<plugin>
-
-    <extension point="org.eclipse.ui.views">
-        <category name="JOverflow" id="JOverflow"/>
-        <view
-              allowMultiple="false"
-              category="JOverflow"
-              class="org.openjdk.jmc.joverflow.ext.treemap.TreemapPageBookView"
-              id="org.openjdk.jmc.joverflow.ext.treemap.TreemapPageBookView"
-              icon="icons/treemap.png"
-              name="JOverflow Treemap"
-              restorable="true">
-        </view>
-    </extension>
-</plugin>
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/pom.xml b/application/org.openjdk.jmc.joverflow.ext.treemap/pom.xml
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/pom.xml
+++ /dev/null
@@ -1,49 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--   
-   Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
-   Copyright (c) 2020, Red Hat Inc. All rights reserved.
-   
-   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-   
-   The contents of this file are subject to the terms of either the Universal Permissive License 
-   v 1.0 as shown at http://oss.oracle.com/licenses/upl
-   
-   or the following license:
-   
-   Redistribution and use in source and binary forms, with or without modification, are permitted
-   provided that the following conditions are met:
-   
-   1. Redistributions of source code must retain the above copyright notice, this list of conditions
-   and the following disclaimer.
-   
-   2. Redistributions in binary form must reproduce the above copyright notice, this list of
-   conditions and the following disclaimer in the documentation and/or other materials provided with
-   the distribution.
-   
-   3. Neither the name of the copyright holder nor the names of its contributors may be used to
-   endorse or promote products derived from this software without specific prior written permission.
-   
-   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
-   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
-   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
-   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
-   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-	<parent>
-		<groupId>org.openjdk.jmc</groupId>
-		<artifactId>missioncontrol.application</artifactId>
-		<version>8.0.0-SNAPSHOT</version>
-	</parent>
-	<artifactId>org.openjdk.jmc.joverflow.ext.treemap</artifactId>
-	<version>1.0.0-SNAPSHOT</version>
-	<packaging>eclipse-plugin</packaging>
-
-	<properties>
-		<spotless.config.path>${basedir}/../../configuration/ide/eclipse/formatting/formatting.xml</spotless.config.path>
-	</properties>
-</project>
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/JOverflowTreemapPlugin.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/JOverflowTreemapPlugin.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/JOverflowTreemapPlugin.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2020, Red Hat Inc. All rights reserved.
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.joverflow.ext.treemap;
-
-import org.openjdk.jmc.ui.MCAbstractUIPlugin;
-import org.osgi.framework.BundleContext;
-
-/**
- * The activator class controls the plug-in life cycle.
- */
-public class JOverflowTreemapPlugin extends MCAbstractUIPlugin {
-
-	// The plug-in ID
-	private static final String PLUGIN_ID = "org.openjdk.jmc.joverflow.ext.treemap"; //$NON-NLS-1$
-
-	static final String ICON_RESET = "reset.gif"; //$NON-NLS-1$
-
-	// The shared instance
-	private static JOverflowTreemapPlugin m_plugin;
-
-	/**
-	 * The constructor
-	 */
-	public JOverflowTreemapPlugin() {
-		super(PLUGIN_ID);
-	}
-
-	@Override
-	public void start(BundleContext context) throws Exception {
-		super.start(context);
-		m_plugin = this;
-	}
-
-	@Override
-	public void stop(BundleContext context) throws Exception {
-		m_plugin = null;
-		super.stop(context);
-	}
-
-	/**
-	 * Returns the shared instance
-	 *
-	 * @return the shared instance
-	 */
-	public static JOverflowTreemapPlugin getDefault() {
-		return m_plugin;
-	}
-}
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/Messages.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/Messages.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/Messages.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2020, Red Hat Inc. All rights reserved.
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.joverflow.ext.treemap;
-
-import org.eclipse.osgi.util.NLS;
-
-public class Messages extends NLS {
-	private static final String BUNDLE_NAME = "org.openjdk.jmc.joverflow.ext.treemap.messages"; //$NON-NLS-1$
-
-	public static String TreemapAction_ZOOM_IN_DESCRIPTION;
-	public static String TreemapAction_ZOOM_OUT_DESCRIPTION;
-	public static String TreemapAction_ZOOM_RESET_DESCRIPTION;
-	public static String TreemapPageBookView_NO_JOVERFLOW_EDITOR_SELECTED;
-	public static String TreemapPage_NO_INSTANCES_SELECTED;
-
-	static {
-		// initialize resource bundle
-		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
-	}
-
-	private Messages() {
-	}
-}
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapAction.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapAction.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapAction.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2020, Red Hat Inc. All rights reserved.
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.joverflow.ext.treemap;
-
-import org.eclipse.jface.action.Action;
-import org.eclipse.jface.action.IAction;
-import org.eclipse.jface.resource.ImageDescriptor;
-import org.openjdk.jmc.ui.CoreImages;
-
-/* package-private */ class TreemapAction extends Action {
-	private static final String ICON_RESET = "reset.gif"; //$NON-NLS-1$
-
-	private final TreemapActionType actionType;
-	private Runnable runnable = () -> {
-	};
-
-	TreemapAction(TreemapActionType actionType) {
-		super(actionType.message, actionType.action);
-		this.actionType = actionType;
-		setToolTipText(actionType.message);
-		setImageDescriptor(actionType.imageDescriptor);
-	}
-
-	@Override
-	public void run() {
-		runnable.run();
-	}
-
-	public void setRunnable(Runnable callback) {
-		runnable = callback;
-	}
-
-	public TreemapActionType getType() {
-		return actionType;
-	}
-
-	enum TreemapActionType {
-		ZOOM_IN(Messages.TreemapAction_ZOOM_IN_DESCRIPTION, IAction.AS_PUSH_BUTTON, CoreImages.ZOOM_IN), // 
-		ZOOM_OUT(Messages.TreemapAction_ZOOM_OUT_DESCRIPTION, IAction.AS_PUSH_BUTTON, CoreImages.ZOOM_OUT), // 
-		ZOOM_RESET(Messages.TreemapAction_ZOOM_RESET_DESCRIPTION, IAction.AS_PUSH_BUTTON, JOverflowTreemapPlugin
-				.getDefault().getMCImageDescriptor(JOverflowTreemapPlugin.ICON_RESET));
-
-		private final String message;
-		private final int action;
-		private final ImageDescriptor imageDescriptor;
-
-		TreemapActionType(String message, int action, ImageDescriptor imageDescriptor) {
-			this.message = message;
-			this.action = action;
-			this.imageDescriptor = imageDescriptor;
-		}
-	}
-}
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPage.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPage.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPage.java
+++ /dev/null
@@ -1,349 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2020, Red Hat Inc. All rights reserved.
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.joverflow.ext.treemap;
-
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.custom.StackLayout;
-import org.eclipse.swt.events.SelectionListener;
-import org.eclipse.swt.graphics.Color;
-import org.eclipse.swt.layout.FillLayout;
-import org.eclipse.swt.layout.FormAttachment;
-import org.eclipse.swt.layout.FormData;
-import org.eclipse.swt.layout.FormLayout;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Control;
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.ui.part.Page;
-import org.openjdk.jmc.joverflow.ext.treemap.swt.Breadcrumb;
-import org.openjdk.jmc.joverflow.ext.treemap.swt.BreadcrumbItem;
-import org.openjdk.jmc.joverflow.ext.treemap.swt.Treemap;
-import org.openjdk.jmc.joverflow.ext.treemap.swt.TreemapItem;
-import org.openjdk.jmc.joverflow.ext.treemap.swt.events.TreemapListener;
-import org.openjdk.jmc.joverflow.heap.model.JavaClass;
-import org.openjdk.jmc.joverflow.heap.model.JavaHeapObject;
-import org.openjdk.jmc.joverflow.support.RefChainElement;
-import org.openjdk.jmc.joverflow.ui.JOverflowEditor;
-import org.openjdk.jmc.joverflow.ui.model.ModelListener;
-import org.openjdk.jmc.joverflow.ui.model.ObjectCluster;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.stream.Stream;
-
-/* package-private */ class TreemapPage extends Page implements ModelListener {
-	private static final Color[] COLORS = { //
-			new Color(Display.getCurrent(), 250, 206, 210), // red
-			new Color(Display.getCurrent(), 185, 214, 255), // blue
-			new Color(Display.getCurrent(), 229, 229, 229), // grey
-			new Color(Display.getCurrent(), 255, 231, 199), // orange
-			new Color(Display.getCurrent(), 171, 235, 238), // aqua
-			new Color(Display.getCurrent(), 228, 209, 252), // purple
-			new Color(Display.getCurrent(), 255, 255, 255), // white
-			new Color(Display.getCurrent(), 205, 249, 212), // green
-	};
-	private static final String LABEL_ROOT = "[ROOT]"; //$NON-NLS-1$
-
-	private final JOverflowEditor editor;
-	private final TreemapAction[] treemapActions;
-
-	private Composite container;
-	private StackLayout containerLayout;
-	private Composite messageContainer;
-	private Composite treemapContainer;
-
-	private Label message;
-	private Treemap treemap;
-	private Breadcrumb breadcrumb;
-
-	private HashMap<String, Double> classes = new HashMap<>();
-
-	TreemapPage(JOverflowEditor editor, TreemapAction[] treemapActions) {
-		this.editor = Objects.requireNonNull(editor);
-		this.treemapActions = Objects.requireNonNull(treemapActions);
-	}
-
-	@Override
-	public void createControl(Composite parent) {
-		container = new Composite(parent, SWT.PUSH);
-		containerLayout = new StackLayout();
-		container.setLayout(containerLayout);
-
-		messageContainer = new Composite(container, SWT.NONE);
-		FillLayout layout = new FillLayout();
-		layout.marginHeight = 5;
-		layout.marginWidth = 5;
-		messageContainer.setLayout(layout);
-
-		message = new Label(messageContainer, SWT.NONE);
-		message.setText(Messages.TreemapPage_NO_INSTANCES_SELECTED);
-
-		treemapContainer = new Composite(container, SWT.NONE);
-		treemapContainer.setLayout(new FormLayout());
-
-		breadcrumb = new Breadcrumb(treemapContainer, SWT.NONE);
-		{
-			FormData bcLayoutData = new FormData();
-			bcLayoutData.top = new FormAttachment(0, 0);
-			bcLayoutData.left = new FormAttachment(0, 0);
-			bcLayoutData.right = new FormAttachment(100, 0);
-			breadcrumb.setLayoutData(bcLayoutData);
-		}
-
-		treemap = new Treemap(treemapContainer, SWT.NONE);
-		{
-			FormData tmLayoutData = new FormData();
-			tmLayoutData.bottom = new FormAttachment(100);
-			tmLayoutData.top = new FormAttachment(breadcrumb);
-			tmLayoutData.left = new FormAttachment(0);
-			tmLayoutData.right = new FormAttachment(100, 0);
-			treemap.setLayoutData(tmLayoutData);
-		}
-		treemap.setText(LABEL_ROOT);
-
-		// set "[ROOT]" item
-		{
-			TreemapItem rootItem = treemap.getRootItem();
-			BreadcrumbItem breadcrumbItem = new BreadcrumbItem(breadcrumb, SWT.NONE);
-			breadcrumbItem.setData(rootItem);
-			breadcrumbItem.setText(rootItem.getText());
-		}
-
-		// links treemap and breadcrumb events
-		{
-			breadcrumb.addSelectionListener(SelectionListener.widgetSelectedAdapter(selectionEvent -> {
-				if (!(selectionEvent.data instanceof TreemapItem)) {
-					return;
-				}
-
-				TreemapItem item = (TreemapItem) selectionEvent.data;
-				treemap.setTopItem(item);
-			}));
-
-			treemap.addTreemapListener(TreemapListener.treemapTopChangedAdapter(treemapEvent -> {
-				TreemapItem item = (TreemapItem) treemapEvent.item;
-				breadcrumb.removeAll();
-
-				List<TreemapItem> path = new ArrayList<>();
-				do {
-					path.add(item);
-					item = item.getParentItem();
-				} while (item != null);
-
-				Collections.reverse(path);
-				for (TreemapItem i : path) {
-					BreadcrumbItem breadcrumbItem = new BreadcrumbItem(breadcrumb, SWT.NONE);
-					breadcrumbItem.setData(i);
-					breadcrumbItem.setText(i.getText());
-				}
-			}));
-		}
-
-		// rebind action buttons
-		{
-			treemap.addSelectionListener(
-					SelectionListener.widgetSelectedAdapter(selectionEvent -> bindTreemapActions()));
-			treemap.addTreemapListener(TreemapListener.treemapTopChangedAdapter(treemapEvent -> bindTreemapActions()));
-		}
-
-		containerLayout.topControl = messageContainer;
-		updateInput();
-	}
-
-	@Override
-	public Control getControl() {
-		return container;
-	}
-
-	@Override
-	public void setFocus() {
-		getControl().setFocus();
-	}
-
-	@Override
-	public void include(ObjectCluster cluster, RefChainElement referenceChain) {
-		if (cluster.getObjectCount() == 0) {
-			return;
-		}
-
-		JavaClass clazz = getObjectAtPosition(cluster.getGlobalObjectIndex(0)).getClazz();
-		String className = clazz.getName();
-		if (className.charAt(0) == '[') {
-			className = cluster.getClassName();
-		}
-
-		classes.putIfAbsent(className, 0.0);
-		double size = classes.get(className);
-		size += cluster.getMemory();
-		classes.put(className, size);
-	}
-
-	@Override
-	public void allIncluded() {
-		updateInput();
-		classes.clear();
-
-		bindTreemapActions();
-	}
-
-	public void bindTreemapActions() {
-		if (containerLayout == null || containerLayout.topControl != treemapContainer) {
-			Stream.of(treemapActions).forEach((action) -> action.setEnabled(false));
-			return;
-		}
-
-		TreemapItem selected = treemap.getSelection();
-		TreemapItem root = treemap.getRootItem();
-		TreemapItem top = treemap.getTopItem();
-
-		Stream.of(treemapActions).forEach((action) -> {
-			switch (action.getType()) {
-			case ZOOM_IN:
-				action.setEnabled(selected != null && selected != top
-						&& !(selected.getItemCount() == 0 && selected.getParentItem() == top));
-				action.setRunnable(() -> treemap.setTopItem(selected));
-				break;
-			case ZOOM_OUT:
-				action.setEnabled(top.getParentItem() != null);
-				action.setRunnable(() -> treemap.setTopItem(top.getParentItem()));
-				break;
-			case ZOOM_RESET:
-				action.setEnabled(top != root);
-				action.setRunnable(() -> treemap.setTopItem(root));
-			}
-		});
-	}
-
-	private void updateInput() {
-		if (classes.size() == 0) {
-			containerLayout.topControl = messageContainer;
-			container.layout();
-			return;
-		}
-
-		if (treemap == null) {
-			return;
-		}
-
-		treemap.removeAll();
-		HashMap<String, TreemapItem> items = new HashMap<>();
-		for (Map.Entry<String, Double> entry : classes.entrySet()) {
-			addTreemapItem(treemap, items, entry.getKey(), entry.getValue());
-		}
-
-		TreemapItem rootItem = treemap.getRootItem();
-		rootItem.setToolTipText(LABEL_ROOT);
-		setColorAndToolTip(rootItem, 0);
-		treemap.setTopItem(rootItem);
-		treemap.setSelection(null);
-
-		containerLayout.topControl = treemapContainer;
-		container.layout();
-	}
-
-	private void addTreemapItem(Treemap parent, Map<String, TreemapItem> items, String fullName, double size) {
-		if (items.containsKey(fullName) && size != 0) {
-			TreemapItem item = items.get(fullName);
-			double bytes = item.getWeight() + size;
-			item.setWeight(bytes);
-			item.setToolTipText(fullName);
-			return;
-		}
-
-		if (fullName.indexOf('.') == -1) {
-			TreemapItem item = new TreemapItem(parent, SWT.NONE);
-			item.setText(fullName);
-			if (size != 0) {
-				item.setWeight(size);
-			}
-			item.setToolTipText(fullName);
-			items.put(fullName, item);
-			return;
-		}
-
-		String parentName = fullName.substring(0, fullName.lastIndexOf('.'));
-		if (!items.containsKey(parentName)) {
-			addTreemapItem(parent, items, parentName, 0);
-		}
-
-		TreemapItem parentItem = items.get(parentName);
-		TreemapItem item = new TreemapItem(parentItem, SWT.NONE);
-		item.setText(fullName.substring(parentName.length() + 1));
-		item.setToolTipText(fullName);
-		if (size != 0) {
-			item.setWeight(size);
-		}
-		items.put(fullName, item);
-	}
-
-	private void setColorAndToolTip(TreemapItem item, int depth) {
-		item.setToolTipText(item.getToolTipText() + "\n" + getHumanReadableSize(item.getWeight())); //$NON-NLS-1$
-		item.setBackground(COLORS[depth % COLORS.length]);
-
-		for (TreemapItem child : item.getItems()) {
-			setColorAndToolTip(child, depth + 1);
-		}
-	}
-
-	private String getHumanReadableSize(double bytes) {
-		String unit = "B"; //$NON-NLS-1$
-		double quantity = bytes;
-		if (quantity > 1024) {
-			quantity /= 1024;
-			unit = "KiB"; //$NON-NLS-1$
-		}
-		if (quantity > 1024) {
-			quantity /= 1024;
-			unit = "MiB"; //$NON-NLS-1$
-		}
-		if (quantity > 1024) {
-			quantity /= 1024;
-			unit = "GiB"; //$NON-NLS-1$
-		}
-		if (quantity > 1024) {
-			quantity /= 1024;
-			unit = "TiB"; //$NON-NLS-1$
-		}
-
-		return String.format("%.2f %s", quantity, unit); //$NON-NLS-1$
-	}
-
-	private JavaHeapObject getObjectAtPosition(int globalObjectPos) {
-		return editor.getSnapshot().getObjectAtGlobalIndex(globalObjectPos);
-	}
-}
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPageBookView.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPageBookView.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPageBookView.java
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2020, Red Hat Inc. All rights reserved.
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.joverflow.ext.treemap;
-
-import org.eclipse.jface.action.IToolBarManager;
-import org.eclipse.ui.IViewSite;
-import org.eclipse.ui.IWorkbenchPage;
-import org.eclipse.ui.IWorkbenchPart;
-import org.eclipse.ui.PartInitException;
-import org.eclipse.ui.part.IPage;
-import org.eclipse.ui.part.MessagePage;
-import org.eclipse.ui.part.PageBook;
-import org.eclipse.ui.part.PageBookView;
-import org.openjdk.jmc.joverflow.ui.JOverflowEditor;
-import org.openjdk.jmc.joverflow.ui.JOverflowUi;
-
-import java.util.stream.Stream;
-
-public class TreemapPageBookView extends PageBookView {
-
-	private TreemapAction[] treemapActions;
-
-	@Override
-	protected IPage createDefaultPage(PageBook book) {
-		MessagePage page = new MessagePage();
-		initPage(page);
-		page.createControl(book);
-		page.setMessage(Messages.TreemapPageBookView_NO_JOVERFLOW_EDITOR_SELECTED);
-		return page;
-	}
-
-	@Override
-	protected PageRec doCreatePage(IWorkbenchPart part) {
-		if (!(part instanceof JOverflowEditor)) {
-			return null;
-		}
-
-		final JOverflowEditor editor = ((JOverflowEditor) part);
-		TreemapPage page = new TreemapPage(editor, treemapActions);
-
-		editor.addUiLoadedListener((ui) -> ui.addModelListener(page));
-
-		initPage(page);
-		page.createControl(getPageBook());
-		return new PageRec(part, page);
-	}
-
-	@Override
-	protected void doDestroyPage(IWorkbenchPart part, PageRec pageRecord) {
-		if (part instanceof JOverflowEditor) {
-			final JOverflowUi ui = ((JOverflowEditor) part).getJOverflowUi();
-			if (ui != null) {
-				ui.removeModelListener((TreemapPage) pageRecord.page);
-			}
-		}
-
-		pageRecord.page.dispose();
-		pageRecord.dispose();
-
-	}
-
-	@Override
-	protected IWorkbenchPart getBootstrapPart() {
-		IWorkbenchPage page = getSite().getPage();
-		if (page != null) {
-			return page.getActiveEditor();
-		}
-		return null;
-	}
-
-	@Override
-	protected boolean isImportant(IWorkbenchPart part) {
-		// We only care about JOverflowEditor
-		return (part instanceof JOverflowEditor);
-	}
-
-	@Override
-	public void init(IViewSite site) throws PartInitException {
-		super.init(site);
-
-		treemapActions = new TreemapAction[] {new TreemapAction(TreemapAction.TreemapActionType.ZOOM_IN), //
-				new TreemapAction(TreemapAction.TreemapActionType.ZOOM_OUT), //
-				new TreemapAction(TreemapAction.TreemapActionType.ZOOM_RESET) //
-		};
-		Stream.of(treemapActions).forEach((action) -> action.setEnabled(false));
-
-		IToolBarManager toolBar = site.getActionBars().getToolBarManager();
-		Stream.of(treemapActions).forEach(toolBar::add);
-	}
-
-	@Override
-	protected void showPageRec(PageRec pageRec) {
-		super.showPageRec(pageRec);
-
-		if (pageRec.page instanceof TreemapPage) {
-			((TreemapPage) pageRec.page).bindTreemapActions();
-		} else {
-			Stream.of(treemapActions).forEach((action) -> action.setEnabled(false));
-		}
-	}
-}
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/TreemapToolTip.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/TreemapToolTip.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/TreemapToolTip.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2020, Red Hat Inc. All rights reserved.
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.joverflow.ext.treemap.swt;
-
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.layout.RowLayout;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Control;
-import org.eclipse.swt.widgets.Event;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.jface.window.ToolTip;
-
-/*package-private*/ class TreemapToolTip extends ToolTip {
-	private static final int PADDING = 5;
-
-	private TreemapItem item = null;
-
-	public TreemapToolTip(Control parent) {
-		super(parent);
-	}
-
-	@Override
-	protected Composite createToolTipContentArea(Event event, Composite parent) {
-		Composite container = new Composite(parent, SWT.NONE);
-
-		RowLayout rowLayout = new RowLayout();
-		rowLayout.marginLeft = PADDING;
-		rowLayout.marginTop = PADDING;
-		rowLayout.marginRight = PADDING;
-		rowLayout.marginBottom = PADDING;
-
-		container.setLayout(rowLayout);
-		container.setBackground(parent.getBackground());
-
-		Label label = new Label(container, SWT.NONE);
-		label.setText(item != null ? item.getToolTipText() : ""); //$NON-NLS-1$
-		label.setForeground(parent.getForeground());
-
-		return container;
-	}
-
-	public void setItem(TreemapItem item) {
-		this.item = item;
-
-		if (item.getToolTipText().isEmpty()) {
-			deactivate();
-		} else {
-			activate();
-		}
-	}
-}
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/events/TreemapEvent.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/events/TreemapEvent.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/events/TreemapEvent.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2020, Red Hat Inc. All rights reserved.
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.joverflow.ext.treemap.swt.events;
-
-import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.widgets.Event;
-
-/**
- * Instances of this class are sent as a result of new item being set as the top.
- */
-public final class TreemapEvent extends SelectionEvent {
-
-	static final long serialVersionUID = 1L;
-
-	/**
-	 * Constructs a new instance of this class based on the information in the given untyped event.
-	 * 
-	 * @param e
-	 *            the untyped event containing the information
-	 */
-	public TreemapEvent(Event e) {
-		super(e);
-	}
-}
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/events/TreemapListener.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/events/TreemapListener.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/events/TreemapListener.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2020, Red Hat Inc. All rights reserved.
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * The contents of this file are subject to the terms of either the Universal Permissive License
- * v 1.0 as shown at http://oss.oracle.com/licenses/upl
- *
- * or the following license:
- *
- * Redistribution and use in source and binary forms, with or without modification, are permitted
- * provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- * and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- * conditions and the following disclaimer in the documentation and/or other materials provided with
- * the distribution.
- *
- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- * endorse or promote products derived from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package org.openjdk.jmc.joverflow.ext.treemap.swt.events;
-
-import org.eclipse.swt.internal.SWTEventListener;
-import org.openjdk.jmc.joverflow.ext.treemap.swt.Treemap;
-
-import java.util.function.Consumer;
-
-/**
- * Classes which implement this interface provide methods that deal with setting new item as top for
- * a treemap.
- */
-public interface TreemapListener extends SWTEventListener {
-
-	/**
-	 * Sent when a treemap becomes the new top.
-	 *
-	 * @param event
-	 *            an event containing information about the treemap operation
-	 * @see Treemap#getTopItem()
-	 */
-	void treemapTopChanged(TreemapEvent event);
-
-	static TreemapListener treemapTopChangedAdapter(final Consumer<TreemapEvent> c) {
-		return c::accept;
-	}
-}
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/icons/treemap.png b/application/org.openjdk.jmc.joverflow.ui/icons/treemap.png
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/icons/treemap.png
+++ b/application/org.openjdk.jmc.joverflow.ui/icons/treemap.png
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/icons/treemap@2x.png b/application/org.openjdk.jmc.joverflow.ui/icons/treemap@2x.png
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/icons/treemap@2x.png
+++ b/application/org.openjdk.jmc.joverflow.ui/icons/treemap@2x.png
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/icons/treemap@original.png b/application/org.openjdk.jmc.joverflow.ui/icons/treemap@original.png
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/icons/treemap@original.png
+++ b/application/org.openjdk.jmc.joverflow.ui/icons/treemap@original.png
diff a/application/org.openjdk.jmc.joverflow.ui/plugin.xml b/application/org.openjdk.jmc.joverflow.ui/plugin.xml
--- a/application/org.openjdk.jmc.joverflow.ui/plugin.xml
+++ b/application/org.openjdk.jmc.joverflow.ui/plugin.xml
@@ -53,10 +53,22 @@
             icon="icons/array_16.png"
             name="JOverflow Instances"
             restorable="true">
       </view>
    </extension>
+ <extension point="org.eclipse.ui.views">
+     <category name="JOverflow" id="JOverflow"/>
+      <view
+                allowMultiple="false"
+                category="JOverflow"
+                class="org.openjdk.jmc.joverflow.ui.TreemapPageBookView"
+                id="org.openjdk.jmc.joverflow.ui.TreemapPageBookView"
+                icon="icons/treemap.png"
+                name="JOverflow Treemap"
+                restorable="true">
+      </view>
+   </extension>
  
  <extension point="org.eclipse.ui.editors">
       <editor
             class="org.openjdk.jmc.joverflow.ui.JOverflowEditor"
             extensions="hprof"
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/JOverflowPlugin.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/JOverflowPlugin.java
--- a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/JOverflowPlugin.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/JOverflowPlugin.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  *
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/Messages.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/Messages.java
--- /dev/null
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/Messages.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.joverflow.ui;
+
+import org.eclipse.osgi.util.NLS;
+
+public class Messages extends NLS {
+	private static final String BUNDLE_NAME = "org.openjdk.jmc.joverflow.ui.messages"; //$NON-NLS-1$
+
+	public static String TreemapAction_ZOOM_IN_DESCRIPTION;
+	public static String TreemapAction_ZOOM_OUT_DESCRIPTION;
+	public static String TreemapAction_ZOOM_RESET_DESCRIPTION;
+	public static String TreemapPageBookView_NO_JOVERFLOW_EDITOR_SELECTED;
+	public static String TreemapPage_NO_INSTANCES_SELECTED;
+
+	static {
+		// initialize resource bundle
+		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
+	}
+
+	private Messages() {
+	}
+}
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapAction.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapAction.java
--- /dev/null
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapAction.java
@@ -0,0 +1,84 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.joverflow.ui;
+
+import org.eclipse.jface.action.Action;
+import org.eclipse.jface.action.IAction;
+import org.eclipse.jface.resource.ImageDescriptor;
+import org.openjdk.jmc.ui.CoreImages;
+
+/* package-private */ class TreemapAction extends Action {
+	private static final String ICON_RESET = "reset.gif"; //$NON-NLS-1$
+
+	private final TreemapActionType actionType;
+	private Runnable runnable = () -> {
+	};
+
+	TreemapAction(TreemapActionType actionType) {
+		super(actionType.message, actionType.action);
+		this.actionType = actionType;
+		setToolTipText(actionType.message);
+		setImageDescriptor(actionType.imageDescriptor);
+	}
+
+	@Override
+	public void run() {
+		runnable.run();
+	}
+
+	public void setRunnable(Runnable callback) {
+		runnable = callback;
+	}
+
+	public TreemapActionType getType() {
+		return actionType;
+	}
+
+	enum TreemapActionType {
+		ZOOM_IN(Messages.TreemapAction_ZOOM_IN_DESCRIPTION, IAction.AS_PUSH_BUTTON, CoreImages.ZOOM_IN), // 
+		ZOOM_OUT(Messages.TreemapAction_ZOOM_OUT_DESCRIPTION, IAction.AS_PUSH_BUTTON, CoreImages.ZOOM_OUT), // 
+		ZOOM_RESET(Messages.TreemapAction_ZOOM_RESET_DESCRIPTION, IAction.AS_PUSH_BUTTON, JOverflowPlugin
+				.getDefault().getMCImageDescriptor(JOverflowPlugin.ICON_UNDO_EDIT));
+
+		private final String message;
+		private final int action;
+		private final ImageDescriptor imageDescriptor;
+
+		TreemapActionType(String message, int action, ImageDescriptor imageDescriptor) {
+			this.message = message;
+			this.action = action;
+			this.imageDescriptor = imageDescriptor;
+		}
+	}
+}
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapPage.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapPage.java
--- /dev/null
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapPage.java
@@ -0,0 +1,348 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.joverflow.ui;
+
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.StackLayout;
+import org.eclipse.swt.events.SelectionListener;
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.FormLayout;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.ui.part.Page;
+import org.openjdk.jmc.joverflow.ui.swt.Breadcrumb;
+import org.openjdk.jmc.joverflow.ui.swt.BreadcrumbItem;
+import org.openjdk.jmc.joverflow.ui.swt.Treemap;
+import org.openjdk.jmc.joverflow.ui.swt.TreemapItem;
+import org.openjdk.jmc.joverflow.ui.swt.events.TreemapListener;
+import org.openjdk.jmc.joverflow.heap.model.JavaClass;
+import org.openjdk.jmc.joverflow.heap.model.JavaHeapObject;
+import org.openjdk.jmc.joverflow.support.RefChainElement;
+import org.openjdk.jmc.joverflow.ui.model.ModelListener;
+import org.openjdk.jmc.joverflow.ui.model.ObjectCluster;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.stream.Stream;
+
+/* package-private */ class TreemapPage extends Page implements ModelListener {
+	private static final Color[] COLORS = { //
+			new Color(Display.getCurrent(), 250, 206, 210), // red
+			new Color(Display.getCurrent(), 185, 214, 255), // blue
+			new Color(Display.getCurrent(), 229, 229, 229), // grey
+			new Color(Display.getCurrent(), 255, 231, 199), // orange
+			new Color(Display.getCurrent(), 171, 235, 238), // aqua
+			new Color(Display.getCurrent(), 228, 209, 252), // purple
+			new Color(Display.getCurrent(), 255, 255, 255), // white
+			new Color(Display.getCurrent(), 205, 249, 212), // green
+	};
+	private static final String LABEL_ROOT = "[ROOT]"; //$NON-NLS-1$
+
+	private final JOverflowEditor editor;
+	private final TreemapAction[] treemapActions;
+
+	private Composite container;
+	private StackLayout containerLayout;
+	private Composite messageContainer;
+	private Composite treemapContainer;
+
+	private Label message;
+	private Treemap treemap;
+	private Breadcrumb breadcrumb;
+
+	private HashMap<String, Double> classes = new HashMap<>();
+
+	TreemapPage(JOverflowEditor editor, TreemapAction[] treemapActions) {
+		this.editor = Objects.requireNonNull(editor);
+		this.treemapActions = Objects.requireNonNull(treemapActions);
+	}
+
+	@Override
+	public void createControl(Composite parent) {
+		container = new Composite(parent, SWT.PUSH);
+		containerLayout = new StackLayout();
+		container.setLayout(containerLayout);
+
+		messageContainer = new Composite(container, SWT.NONE);
+		FillLayout layout = new FillLayout();
+		layout.marginHeight = 5;
+		layout.marginWidth = 5;
+		messageContainer.setLayout(layout);
+
+		message = new Label(messageContainer, SWT.NONE);
+		message.setText(Messages.TreemapPage_NO_INSTANCES_SELECTED);
+
+		treemapContainer = new Composite(container, SWT.NONE);
+		treemapContainer.setLayout(new FormLayout());
+
+		breadcrumb = new Breadcrumb(treemapContainer, SWT.NONE);
+		{
+			FormData bcLayoutData = new FormData();
+			bcLayoutData.top = new FormAttachment(0, 0);
+			bcLayoutData.left = new FormAttachment(0, 0);
+			bcLayoutData.right = new FormAttachment(100, 0);
+			breadcrumb.setLayoutData(bcLayoutData);
+		}
+
+		treemap = new Treemap(treemapContainer, SWT.NONE);
+		{
+			FormData tmLayoutData = new FormData();
+			tmLayoutData.bottom = new FormAttachment(100);
+			tmLayoutData.top = new FormAttachment(breadcrumb);
+			tmLayoutData.left = new FormAttachment(0);
+			tmLayoutData.right = new FormAttachment(100, 0);
+			treemap.setLayoutData(tmLayoutData);
+		}
+		treemap.setText(LABEL_ROOT);
+
+		// set "[ROOT]" item
+		{
+			TreemapItem rootItem = treemap.getRootItem();
+			BreadcrumbItem breadcrumbItem = new BreadcrumbItem(breadcrumb, SWT.NONE);
+			breadcrumbItem.setData(rootItem);
+			breadcrumbItem.setText(rootItem.getText());
+		}
+
+		// links treemap and breadcrumb events
+		{
+			breadcrumb.addSelectionListener(SelectionListener.widgetSelectedAdapter(selectionEvent -> {
+				if (!(selectionEvent.data instanceof TreemapItem)) {
+					return;
+				}
+
+				TreemapItem item = (TreemapItem) selectionEvent.data;
+				treemap.setTopItem(item);
+			}));
+
+			treemap.addTreemapListener(TreemapListener.treemapTopChangedAdapter(treemapEvent -> {
+				TreemapItem item = (TreemapItem) treemapEvent.item;
+				breadcrumb.removeAll();
+
+				List<TreemapItem> path = new ArrayList<>();
+				do {
+					path.add(item);
+					item = item.getParentItem();
+				} while (item != null);
+
+				Collections.reverse(path);
+				for (TreemapItem i : path) {
+					BreadcrumbItem breadcrumbItem = new BreadcrumbItem(breadcrumb, SWT.NONE);
+					breadcrumbItem.setData(i);
+					breadcrumbItem.setText(i.getText());
+				}
+			}));
+		}
+
+		// rebind action buttons
+		{
+			treemap.addSelectionListener(
+					SelectionListener.widgetSelectedAdapter(selectionEvent -> bindTreemapActions()));
+			treemap.addTreemapListener(TreemapListener.treemapTopChangedAdapter(treemapEvent -> bindTreemapActions()));
+		}
+
+		containerLayout.topControl = messageContainer;
+		updateInput();
+	}
+
+	@Override
+	public Control getControl() {
+		return container;
+	}
+
+	@Override
+	public void setFocus() {
+		getControl().setFocus();
+	}
+
+	@Override
+	public void include(ObjectCluster cluster, RefChainElement referenceChain) {
+		if (cluster.getObjectCount() == 0) {
+			return;
+		}
+
+		JavaClass clazz = getObjectAtPosition(cluster.getGlobalObjectIndex(0)).getClazz();
+		String className = clazz.getName();
+		if (className.charAt(0) == '[') {
+			className = cluster.getClassName();
+		}
+
+		classes.putIfAbsent(className, 0.0);
+		double size = classes.get(className);
+		size += cluster.getMemory();
+		classes.put(className, size);
+	}
+
+	@Override
+	public void allIncluded() {
+		updateInput();
+		classes.clear();
+
+		bindTreemapActions();
+	}
+
+	public void bindTreemapActions() {
+		if (containerLayout == null || containerLayout.topControl != treemapContainer) {
+			Stream.of(treemapActions).forEach((action) -> action.setEnabled(false));
+			return;
+		}
+
+		TreemapItem selected = treemap.getSelection();
+		TreemapItem root = treemap.getRootItem();
+		TreemapItem top = treemap.getTopItem();
+
+		Stream.of(treemapActions).forEach((action) -> {
+			switch (action.getType()) {
+			case ZOOM_IN:
+				action.setEnabled(selected != null && selected != top
+						&& !(selected.getItemCount() == 0 && selected.getParentItem() == top));
+				action.setRunnable(() -> treemap.setTopItem(selected));
+				break;
+			case ZOOM_OUT:
+				action.setEnabled(top.getParentItem() != null);
+				action.setRunnable(() -> treemap.setTopItem(top.getParentItem()));
+				break;
+			case ZOOM_RESET:
+				action.setEnabled(top != root);
+				action.setRunnable(() -> treemap.setTopItem(root));
+			}
+		});
+	}
+
+	private void updateInput() {
+		if (classes.size() == 0) {
+			containerLayout.topControl = messageContainer;
+			container.layout();
+			return;
+		}
+
+		if (treemap == null) {
+			return;
+		}
+
+		treemap.removeAll();
+		HashMap<String, TreemapItem> items = new HashMap<>();
+		for (Map.Entry<String, Double> entry : classes.entrySet()) {
+			addTreemapItem(treemap, items, entry.getKey(), entry.getValue());
+		}
+
+		TreemapItem rootItem = treemap.getRootItem();
+		rootItem.setToolTipText(LABEL_ROOT);
+		setColorAndToolTip(rootItem, 0);
+		treemap.setTopItem(rootItem);
+		treemap.setSelection(null);
+
+		containerLayout.topControl = treemapContainer;
+		container.layout();
+	}
+
+	private void addTreemapItem(Treemap parent, Map<String, TreemapItem> items, String fullName, double size) {
+		if (items.containsKey(fullName) && size != 0) {
+			TreemapItem item = items.get(fullName);
+			double bytes = item.getWeight() + size;
+			item.setWeight(bytes);
+			item.setToolTipText(fullName);
+			return;
+		}
+
+		if (fullName.indexOf('.') == -1) {
+			TreemapItem item = new TreemapItem(parent, SWT.NONE);
+			item.setText(fullName);
+			if (size != 0) {
+				item.setWeight(size);
+			}
+			item.setToolTipText(fullName);
+			items.put(fullName, item);
+			return;
+		}
+
+		String parentName = fullName.substring(0, fullName.lastIndexOf('.'));
+		if (!items.containsKey(parentName)) {
+			addTreemapItem(parent, items, parentName, 0);
+		}
+
+		TreemapItem parentItem = items.get(parentName);
+		TreemapItem item = new TreemapItem(parentItem, SWT.NONE);
+		item.setText(fullName.substring(parentName.length() + 1));
+		item.setToolTipText(fullName);
+		if (size != 0) {
+			item.setWeight(size);
+		}
+		items.put(fullName, item);
+	}
+
+	private void setColorAndToolTip(TreemapItem item, int depth) {
+		item.setToolTipText(item.getToolTipText() + "\n" + getHumanReadableSize(item.getWeight())); //$NON-NLS-1$
+		item.setBackground(COLORS[depth % COLORS.length]);
+
+		for (TreemapItem child : item.getItems()) {
+			setColorAndToolTip(child, depth + 1);
+		}
+	}
+
+	private String getHumanReadableSize(double bytes) {
+		String unit = "B"; //$NON-NLS-1$
+		double quantity = bytes;
+		if (quantity > 1024) {
+			quantity /= 1024;
+			unit = "KiB"; //$NON-NLS-1$
+		}
+		if (quantity > 1024) {
+			quantity /= 1024;
+			unit = "MiB"; //$NON-NLS-1$
+		}
+		if (quantity > 1024) {
+			quantity /= 1024;
+			unit = "GiB"; //$NON-NLS-1$
+		}
+		if (quantity > 1024) {
+			quantity /= 1024;
+			unit = "TiB"; //$NON-NLS-1$
+		}
+
+		return String.format("%.2f %s", quantity, unit); //$NON-NLS-1$
+	}
+
+	private JavaHeapObject getObjectAtPosition(int globalObjectPos) {
+		return editor.getSnapshot().getObjectAtGlobalIndex(globalObjectPos);
+	}
+}
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapPageBookView.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapPageBookView.java
--- /dev/null
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/TreemapPageBookView.java
@@ -0,0 +1,130 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.joverflow.ui;
+
+import org.eclipse.jface.action.IToolBarManager;
+import org.eclipse.ui.IViewSite;
+import org.eclipse.ui.IWorkbenchPage;
+import org.eclipse.ui.IWorkbenchPart;
+import org.eclipse.ui.PartInitException;
+import org.eclipse.ui.part.IPage;
+import org.eclipse.ui.part.MessagePage;
+import org.eclipse.ui.part.PageBook;
+import org.eclipse.ui.part.PageBookView;
+
+import java.util.stream.Stream;
+
+public class TreemapPageBookView extends PageBookView {
+
+	private TreemapAction[] treemapActions;
+
+	@Override
+	protected IPage createDefaultPage(PageBook book) {
+		MessagePage page = new MessagePage();
+		initPage(page);
+		page.createControl(book);
+		page.setMessage(Messages.TreemapPageBookView_NO_JOVERFLOW_EDITOR_SELECTED);
+		return page;
+	}
+
+	@Override
+	protected PageRec doCreatePage(IWorkbenchPart part) {
+		if (!(part instanceof JOverflowEditor)) {
+			return null;
+		}
+
+		final JOverflowEditor editor = ((JOverflowEditor) part);
+		TreemapPage page = new TreemapPage(editor, treemapActions);
+
+		editor.addUiLoadedListener((ui) -> ui.addModelListener(page));
+
+		initPage(page);
+		page.createControl(getPageBook());
+		return new PageRec(part, page);
+	}
+
+	@Override
+	protected void doDestroyPage(IWorkbenchPart part, PageRec pageRecord) {
+		if (part instanceof JOverflowEditor) {
+			final JOverflowUi ui = ((JOverflowEditor) part).getJOverflowUi();
+			if (ui != null) {
+				ui.removeModelListener((TreemapPage) pageRecord.page);
+			}
+		}
+
+		pageRecord.page.dispose();
+		pageRecord.dispose();
+
+	}
+
+	@Override
+	protected IWorkbenchPart getBootstrapPart() {
+		IWorkbenchPage page = getSite().getPage();
+		if (page != null) {
+			return page.getActiveEditor();
+		}
+		return null;
+	}
+
+	@Override
+	protected boolean isImportant(IWorkbenchPart part) {
+		// We only care about JOverflowEditor
+		return (part instanceof JOverflowEditor);
+	}
+
+	@Override
+	public void init(IViewSite site) throws PartInitException {
+		super.init(site);
+
+		treemapActions = new TreemapAction[] {new TreemapAction(TreemapAction.TreemapActionType.ZOOM_IN), //
+				new TreemapAction(TreemapAction.TreemapActionType.ZOOM_OUT), //
+				new TreemapAction(TreemapAction.TreemapActionType.ZOOM_RESET) //
+		};
+		Stream.of(treemapActions).forEach((action) -> action.setEnabled(false));
+
+		IToolBarManager toolBar = site.getActionBars().getToolBarManager();
+		Stream.of(treemapActions).forEach(toolBar::add);
+	}
+
+	@Override
+	protected void showPageRec(PageRec pageRec) {
+		super.showPageRec(pageRec);
+
+		if (pageRec.page instanceof TreemapPage) {
+			((TreemapPage) pageRec.page).bindTreemapActions();
+		} else {
+			Stream.of(treemapActions).forEach((action) -> action.setEnabled(false));
+		}
+	}
+}
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/Breadcrumb.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/Breadcrumb.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/Breadcrumb.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/Breadcrumb.java
@@ -29,11 +29,11 @@
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.openjdk.jmc.joverflow.ext.treemap.swt;
+package org.openjdk.jmc.joverflow.ui.swt;
 
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.MouseEvent;
 import org.eclipse.swt.events.MouseListener;
 import org.eclipse.swt.events.PaintEvent;
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/BreadcrumbItem.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/BreadcrumbItem.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/BreadcrumbItem.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/BreadcrumbItem.java
@@ -29,11 +29,11 @@
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.openjdk.jmc.joverflow.ext.treemap.swt;
+package org.openjdk.jmc.joverflow.ui.swt;
 
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.graphics.GC;
 import org.eclipse.swt.graphics.Point;
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/SquarifiedTreemap.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/SquarifiedTreemap.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/SquarifiedTreemap.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/SquarifiedTreemap.java
@@ -29,11 +29,11 @@
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.openjdk.jmc.joverflow.ext.treemap.swt;
+package org.openjdk.jmc.joverflow.ui.swt;
 
 import java.awt.geom.Rectangle2D;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/Treemap.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/Treemap.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/Treemap.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/Treemap.java
@@ -29,11 +29,11 @@
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.openjdk.jmc.joverflow.ext.treemap.swt;
+package org.openjdk.jmc.joverflow.ui.swt;
 
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.MouseEvent;
 import org.eclipse.swt.events.MouseListener;
 import org.eclipse.swt.events.PaintEvent;
@@ -44,12 +44,12 @@
 import org.eclipse.swt.widgets.Canvas;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.TypedListener;
-import org.openjdk.jmc.joverflow.ext.treemap.swt.events.TreemapEvent;
-import org.openjdk.jmc.joverflow.ext.treemap.swt.events.TreemapListener;
+import org.openjdk.jmc.joverflow.ui.swt.events.TreemapEvent;
+import org.openjdk.jmc.joverflow.ui.swt.events.TreemapListener;
 
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/TreemapItem.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/TreemapItem.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/TreemapItem.java
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/TreemapItem.java
@@ -29,11 +29,11 @@
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-package org.openjdk.jmc.joverflow.ext.treemap.swt;
+package org.openjdk.jmc.joverflow.ui.swt;
 
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.graphics.GC;
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/TreemapToolTip.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/TreemapToolTip.java
--- /dev/null
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/TreemapToolTip.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.joverflow.ui.swt;
+
+import org.eclipse.jface.window.ToolTip;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.RowLayout;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.swt.widgets.Event;
+import org.eclipse.swt.widgets.Label;
+
+/*package-private*/ class TreemapToolTip extends ToolTip {
+	private static final int PADDING = 5;
+
+	private TreemapItem item = null;
+
+	public TreemapToolTip(Control parent) {
+		super(parent);
+	}
+
+	@Override
+	protected Composite createToolTipContentArea(Event event, Composite parent) {
+		Composite container = new Composite(parent, SWT.NONE);
+
+		RowLayout rowLayout = new RowLayout();
+		rowLayout.marginLeft = PADDING;
+		rowLayout.marginTop = PADDING;
+		rowLayout.marginRight = PADDING;
+		rowLayout.marginBottom = PADDING;
+
+		container.setLayout(rowLayout);
+		container.setBackground(parent.getBackground());
+
+		Label label = new Label(container, SWT.NONE);
+		label.setText(item != null ? item.getToolTipText() : ""); //$NON-NLS-1$
+		label.setForeground(parent.getForeground());
+
+		return container;
+	}
+
+	public void setItem(TreemapItem item) {
+		this.item = item;
+
+		if (item.getToolTipText().isEmpty()) {
+			deactivate();
+		} else {
+			activate();
+		}
+	}
+}
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/events/TreemapEvent.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/events/TreemapEvent.java
--- /dev/null
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/events/TreemapEvent.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.joverflow.ui.swt.events;
+
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.widgets.Event;
+
+/**
+ * Instances of this class are sent as a result of new item being set as the top.
+ */
+public final class TreemapEvent extends SelectionEvent {
+
+	static final long serialVersionUID = 1L;
+
+	/**
+	 * Constructs a new instance of this class based on the information in the given untyped event.
+	 * 
+	 * @param e
+	 *            the untyped event containing the information
+	 */
+	public TreemapEvent(Event e) {
+		super(e);
+	}
+}
diff a/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/events/TreemapListener.java b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/events/TreemapListener.java
--- /dev/null
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/java/org/openjdk/jmc/joverflow/ui/swt/events/TreemapListener.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.joverflow.ui.swt.events;
+
+import org.eclipse.swt.internal.SWTEventListener;
+import org.openjdk.jmc.joverflow.ui.swt.Treemap;
+
+import java.util.function.Consumer;
+
+/**
+ * Classes which implement this interface provide methods that deal with setting new item as top for
+ * a treemap.
+ */
+public interface TreemapListener extends SWTEventListener {
+
+	/**
+	 * Sent when a treemap becomes the new top.
+	 *
+	 * @param event
+	 *            an event containing information about the treemap operation
+	 * @see Treemap#getTopItem()
+	 */
+	void treemapTopChanged(TreemapEvent event);
+
+	static TreemapListener treemapTopChangedAdapter(final Consumer<TreemapEvent> c) {
+		return c::accept;
+	}
+}
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/resources/org/openjdk/jmc/joverflow/ext/treemap/messages.properties b/application/org.openjdk.jmc.joverflow.ui/src/main/resources/org/openjdk/jmc/joverflow/ui/messages.properties
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/resources/org/openjdk/jmc/joverflow/ext/treemap/messages.properties
+++ b/application/org.openjdk.jmc.joverflow.ui/src/main/resources/org/openjdk/jmc/joverflow/ui/messages.properties
