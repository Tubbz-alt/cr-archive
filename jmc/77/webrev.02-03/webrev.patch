diff a/application/org.openjdk.jmc.feature.joverflow.ext.treemap/feature.properties b/application/org.openjdk.jmc.feature.joverflow.ext.treemap/feature.properties
--- a/application/org.openjdk.jmc.feature.joverflow.ext.treemap/feature.properties
+++ b/application/org.openjdk.jmc.feature.joverflow.ext.treemap/feature.properties
@@ -32,7 +32,7 @@
 #  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #
 name=JOverflow Treemap View
 provider=Oracle Corporation
 copyright=Copyright \u00A9 2020, Oracle and/or its affiliates. All rights reserved.
-description=This feature adds a treemap view to JOverflow visualizing memory usage by packages/classes.
+description=This feature adds a treemap view to JOverflow for visualizing memory usage by packages/classes.
 descriptionUrl=http://www.oracle.com/missioncontrol
diff a/application/org.openjdk.jmc.feature.joverflow.ext.treemap/feature.xml b/application/org.openjdk.jmc.feature.joverflow.ext.treemap/feature.xml
--- a/application/org.openjdk.jmc.feature.joverflow.ext.treemap/feature.xml
+++ b/application/org.openjdk.jmc.feature.joverflow.ext.treemap/feature.xml
@@ -51,11 +51,11 @@
    <requires>
       <import plugin="org.openjdk.jmc.common" match="equivalent"/>
       <import plugin="org.eclipse.ui"/>
    </requires>
 
-	<plugin
+   <plugin
          id="org.openjdk.jmc.joverflow.ext.treemap"
          download-size="0"
          install-size="0"
          version="0.0.0"
          unpack="false"/>
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/plugin.xml b/application/org.openjdk.jmc.joverflow.ext.treemap/plugin.xml
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/plugin.xml
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/plugin.xml
@@ -33,18 +33,18 @@
    WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 -->
 <?eclipse version="3.4"?>
 <plugin>
 
- 	<extension point="org.eclipse.ui.views">
-		<category name="JOverflow" id="JOverflow"/>
-		<view
-            allowMultiple="false"
-            category="JOverflow"
-            class="org.openjdk.jmc.joverflow.ext.treemap.TreemapPageBookView"
-            id="org.openjdk.jmc.joverflow.ext.treemap.TreemapPageBookView"
-            icon="icons/treemap.png"
-            name="JOverflow Treemap"
-            restorable="true">
-		</view>
-	</extension>
+    <extension point="org.eclipse.ui.views">
+        <category name="JOverflow" id="JOverflow"/>
+        <view
+              allowMultiple="false"
+              category="JOverflow"
+              class="org.openjdk.jmc.joverflow.ext.treemap.TreemapPageBookView"
+              id="org.openjdk.jmc.joverflow.ext.treemap.TreemapPageBookView"
+              icon="icons/treemap.png"
+              name="JOverflow Treemap"
+              restorable="true">
+        </view>
+    </extension>
 </plugin>
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPage.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPage.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPage.java
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPage.java
@@ -65,11 +65,12 @@
 import java.util.Map;
 import java.util.Objects;
 import java.util.stream.Stream;
 
 /* package-private */ class TreemapPage extends Page implements ModelListener {
-	private static final Color[] COLORS = {new Color(Display.getCurrent(), 250, 206, 210), // red
+	private static final Color[] COLORS = { //
+			new Color(Display.getCurrent(), 250, 206, 210), // red
 			new Color(Display.getCurrent(), 185, 214, 255), // blue
 			new Color(Display.getCurrent(), 229, 229, 229), // grey
 			new Color(Display.getCurrent(), 255, 231, 199), // orange
 			new Color(Display.getCurrent(), 171, 235, 238), // aqua
 			new Color(Display.getCurrent(), 228, 209, 252), // purple
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPageBookView.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPageBookView.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPageBookView.java
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/TreemapPageBookView.java
@@ -109,11 +109,11 @@
 	public void init(IViewSite site) throws PartInitException {
 		super.init(site);
 
 		treemapActions = new TreemapAction[] {new TreemapAction(TreemapAction.TreemapActionType.ZOOM_IN), //
 				new TreemapAction(TreemapAction.TreemapActionType.ZOOM_OUT), //
-				new TreemapAction(TreemapAction.TreemapActionType.ZOOM_OFF), //
+				new TreemapAction(TreemapAction.TreemapActionType.ZOOM_OFF) //
 		};
 		Stream.of(treemapActions).forEach((action) -> action.setEnabled(false));
 
 		IToolBarManager toolBar = site.getActionBars().getToolBarManager();
 		Stream.of(treemapActions).forEach(toolBar::add);
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/Breadcrumb.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/Breadcrumb.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/Breadcrumb.java
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/Breadcrumb.java
@@ -100,12 +100,11 @@
 			}
 		});
 		addMouseMoveListener(this::onMouseMove);
 	}
 
-	/* package-private */
-	static Composite checkNull(Composite control) {
+	/* package-private */ static Composite checkNull(Composite control) {
 		if (control == null) {
 			SWT.error(SWT.ERROR_NULL_ARGUMENT);
 		}
 
 		return control;
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/Treemap.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/Treemap.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/Treemap.java
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/Treemap.java
@@ -111,21 +111,19 @@
 			}
 		});
 		addMouseMoveListener(this::onMouseMove);
 	}
 
-	/* package-private */
-	static Composite checkNull(Composite control) {
+	/* package-private */ static Composite checkNull(Composite control) {
 		if (control == null) {
 			SWT.error(SWT.ERROR_NULL_ARGUMENT);
 		}
 
 		return control;
 	}
 
-	/* package-private */
-	static Treemap checkNull(Treemap treemap) {
+	/* package-private */ static Treemap checkNull(Treemap treemap) {
 		if (treemap == null) {
 			SWT.error(SWT.ERROR_NULL_ARGUMENT);
 		}
 
 		return treemap;
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/TreemapItem.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/TreemapItem.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/TreemapItem.java
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/TreemapItem.java
@@ -120,12 +120,11 @@
 			// adding a 0 weighted node to the end of decreasingly sorted list preserves the sorted structure
 			parentItem.children.add(this);
 		}
 	}
 
-	/* package-private */
-	static TreemapItem checkNull(TreemapItem item) {
+	/* package-private */ static TreemapItem checkNull(TreemapItem item) {
 		if (item == null) {
 			SWT.error(SWT.ERROR_NULL_ARGUMENT);
 		}
 
 		return item;
diff a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/TreemapToolTip.java b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/TreemapToolTip.java
--- a/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/TreemapToolTip.java
+++ b/application/org.openjdk.jmc.joverflow.ext.treemap/src/main/java/org/openjdk/jmc/joverflow/ext/treemap/swt/TreemapToolTip.java
@@ -50,26 +50,26 @@
 		super(parent);
 	}
 
 	@Override
 	protected Composite createToolTipContentArea(Event event, Composite parent) {
-		Composite ret = new Composite(parent, SWT.NONE);
+		Composite container = new Composite(parent, SWT.NONE);
 
 		RowLayout rowLayout = new RowLayout();
 		rowLayout.marginLeft = PADDING;
 		rowLayout.marginTop = PADDING;
 		rowLayout.marginRight = PADDING;
 		rowLayout.marginBottom = PADDING;
 
-		ret.setLayout(rowLayout);
-		ret.setBackground(parent.getBackground());
+		container.setLayout(rowLayout);
+		container.setBackground(parent.getBackground());
 
-		Label label = new Label(ret, SWT.NONE);
+		Label label = new Label(container, SWT.NONE);
 		label.setText(item != null ? item.getToolTipText() : ""); //$NON-NLS-1$
 		label.setForeground(parent.getForeground());
 
-		return ret;
+		return container;
 	}
 
 	public void setItem(TreemapItem item) {
 		this.item = item;
 
