diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/resources/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/messages.properties b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/resources/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/messages.properties
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/resources/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/messages.properties
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/resources/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/messages.properties
@@ -410,10 +410,21 @@
 # {0} is a percentage
 LowOnPhysicalMemoryFactory_TEXT_INFO=The maximum amount of used memory was {0} of the physical memory available.
 # {0} is a size in bytes, {1} is a percentage, {2} is a size in bytes
 LowOnPhysicalMemoryFactory_TEXT_INFO_LONG=The maximum amount of memory used was {0}. This is {1} of the {2} of physical memory available. Having little free memory may lead to swapping, which is very expensive. To avoid this, either decrease the memory usage or increase the amount of available memory.
 LowOnPhysicalMemoryFactory_TEXT_OK=The system did not run low on physical memory during this recording.
+LuceneVersionRule_LONG_DESCRIPTION_LUCENE=Older versions of Apache Lucene unnecessarily create new LookaheadSuccess error instances for each query parser. This causes additional work to unroll the stack and slows down application performance. The issue was fixed in Lucene 7.1.0.
+LuceneVersionRule_LONG_DESCRIPTION_ES=Older versions of ElasticSearch used an older version of Apache Lucene which unnecessarily create new LookaheadSuccess error instances for each query parser. This causes additional work to unroll the stack and slows down application performance. The issue was fixed in ElasticSearch 6.2.0.
+LuceneVersionRule_LONG_DESCRIPTION_SOLR=Older versions of Apache Solr used an older version of Apache Lucene which unnecessarily create new LookaheadSuccess error instances for each query parser. This causes additional work to unroll the stack and slows down application performance. The issue was fixed in Apache Solr 7.1.0.
+LuceneVersionRule_SHORT_DESCRIPTION_LUCENE=Consider upgrading Apache Lucene to version 7.1.0 or higher to reduce overhead.
+LuceneVersionRule_SHORT_DESCRIPTION_ES=Consider upgrading ElasticSearch to version 6.2.0 or higher to reduce overhead.
+LuceneVersionRule_SHORT_DESCRIPTION_SOLR=Consider upgrading Apache Solr to version 7.1.0 or higher to reduce overhead.
+LuceneVersionRule_OK_TEXT_LUCENE=No problems detected with Apache Lucene.
+LuceneVersionRule_OK_TEXT_ES=No problems detected with ElasticSearch.
+LuceneVersionRule_OK_TEXT_SOLR=No problems detected with Apache Solr.
+LuceneVersionRule_NA_TEXT=Could not detect usage of Apache Lucene.
+LuceneVersionRule_RULE_NAME=Lucene Version
 ManagementAgentRule_TEXT_INFO=Management agent settings (port, authentication and/or SSL) were changed during runtime.
 ManagementAgentRule_TEXT_INFO_LONG=Management agent settings (port, authentication and/or SSL) were changed during runtime, this is not likely to have had any effect, but could be useful to investigate.
 ManagmentAgentRuleFactory_RULE_NAME=Discouraged Management Agent Settings
 ManagmentAgentRuleFactory_TEXT_INFO_SSL_DISABLED=Insecure management agent settings: SSL disabled.
 ManagmentAgentRuleFactory_TEXT_INFO_SSL_DISABLED_LONG=The runtime management agent settings were insecure. SSL/TLS was disabled. This is discouraged in production systems, since the traffic will not be secure.
