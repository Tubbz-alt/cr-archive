diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/LuceneVersionRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/LuceneVersionRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/LuceneVersionRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/exceptions/LuceneVersionRule.java
@@ -26,17 +26,15 @@
 import org.openjdk.jmc.flightrecorder.rules.jdk.messages.internal.Messages;
 import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 
 public class LuceneVersionRule implements IRule {
-	
+
 	private static final String RESULT_ID = "LuceneVersion"; //$NON-NLS-1$
 
 	private enum LuceneConsumer {
-		LUCENE,
-		SOLR,
-		ELASTIC_SEARCH;
+		LUCENE, SOLR, ELASTIC_SEARCH;
 	}
 
 	@Override
 	public RunnableFuture<Result> evaluate(final IItemCollection items, IPreferenceValueProvider valueProvider) {
 		return new FutureTask<>(new Callable<Result>() {
@@ -57,15 +55,18 @@
 		// Lucene post 7.1.0 still creates a LookaheadSuccess error, but only on class load
 		if (lookaheadSuccessErrors.longValue() > 1) {
 			double score = RulesToolkit.mapExp100(lookaheadSuccessErrors.longValue(), 2, 20);
 			switch (consumerType) {
 			case ELASTIC_SEARCH:
-				return new Result(this, score, Messages.getString(Messages.LuceneVersionRule_SHORT_DESCRIPTION_ES), Messages.getString(Messages.LuceneVersionRule_LONG_DESCRIPTION_ES));
+				return new Result(this, score, Messages.getString(Messages.LuceneVersionRule_SHORT_DESCRIPTION_ES),
+						Messages.getString(Messages.LuceneVersionRule_LONG_DESCRIPTION_ES));
 			case SOLR:
-				return new Result(this, score, Messages.getString(Messages.LuceneVersionRule_SHORT_DESCRIPTION_SOLR), Messages.getString(Messages.LuceneVersionRule_LONG_DESCRIPTION_SOLR));
+				return new Result(this, score, Messages.getString(Messages.LuceneVersionRule_SHORT_DESCRIPTION_SOLR),
+						Messages.getString(Messages.LuceneVersionRule_LONG_DESCRIPTION_SOLR));
 			default:
-				return new Result(this, score, Messages.getString(Messages.LuceneVersionRule_SHORT_DESCRIPTION_LUCENE), Messages.getString(Messages.LuceneVersionRule_LONG_DESCRIPTION_LUCENE));
+				return new Result(this, score, Messages.getString(Messages.LuceneVersionRule_SHORT_DESCRIPTION_LUCENE),
+						Messages.getString(Messages.LuceneVersionRule_LONG_DESCRIPTION_LUCENE));
 			}
 		} else if (lookaheadSuccessErrors.longValue() == 1) {
 			switch (consumerType) {
 			case ELASTIC_SEARCH:
 				return new Result(this, 0, Messages.getString(Messages.LuceneVersionRule_OK_TEXT_ES));
@@ -78,11 +79,12 @@
 		return RulesToolkit.getNotApplicableResult(this, Messages.getString(Messages.LuceneVersionRule_NA_TEXT));
 	}
 
 	private LuceneConsumer isElasticSearch(IItemCollection items) {
 		for (IItemIterable itemIterable : items) {
-			IMemberAccessor<IMCStackTrace, IItem> stacktraceAccessor = JfrAttributes.EVENT_STACKTRACE.getAccessor(itemIterable.getType());
+			IMemberAccessor<IMCStackTrace, IItem> stacktraceAccessor = JfrAttributes.EVENT_STACKTRACE
+					.getAccessor(itemIterable.getType());
 			for (IItem item : itemIterable) {
 				IMCStackTrace member = stacktraceAccessor.getMember(item);
 				for (IMCFrame frame : member.getFrames()) {
 					IMCPackage aPackage = frame.getMethod().getType().getPackage();
 					if (aPackage != null) {
