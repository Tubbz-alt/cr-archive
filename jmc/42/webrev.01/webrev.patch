diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
@@ -31,22 +31,25 @@
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.flightrecorder.rules.jdk.latency;
 
 import java.text.MessageFormat;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
 import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.FutureTask;
 import java.util.concurrent.RunnableFuture;
 
 import org.openjdk.jmc.common.IDisplayable;
 import org.openjdk.jmc.common.IMCThread;
-import org.openjdk.jmc.common.item.Aggregators;
 import org.openjdk.jmc.common.item.IItem;
 import org.openjdk.jmc.common.item.IItemCollection;
+import org.openjdk.jmc.common.item.IItemIterable;
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.common.util.IPreferenceValueProvider;
 import org.openjdk.jmc.common.util.TypedPreference;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
@@ -59,15 +62,17 @@
 import org.openjdk.jmc.flightrecorder.rules.Severity;
 import org.openjdk.jmc.flightrecorder.rules.jdk.messages.internal.Messages;
 import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;
-import org.owasp.encoder.Encode;
 
 public class VMOperationRule implements IRule {
 
 	private static final String RESULT_ID = "VMOperations"; //$NON-NLS-1$
+	private static final double MAX_SECONDS_BETWEEN_EVENTS = 0.01;
+	private IQuantity longestDuration;
+	private IItem startingEvent;
 
 	public static final TypedPreference<IQuantity> WARNING_LIMIT = new TypedPreference<>("vm.vmoperation.warning.limit", //$NON-NLS-1$
 			Messages.getString(Messages.VMOperationRule_CONFIG_WARNING_LIMIT),
 			Messages.getString(Messages.VMOperationRule_CONFIG_WARNING_LIMIT_LONG), UnitLookup.TIMESPAN,
 			UnitLookup.MILLISECOND.quantity(2000));
@@ -90,40 +95,116 @@
 		if (eventAvailability == EventAvailability.UNKNOWN || eventAvailability == EventAvailability.DISABLED) {
 			return RulesToolkit.getEventAvailabilityResult(this, items, eventAvailability, JdkTypeIDs.VM_OPERATIONS);
 		}
 
 		IQuantity infoLimit = warningLimit.multiply(0.5);
-		// Get the longest blocking VM operation
-		IItem longestEvent = items.apply(JdkFilters.VM_OPERATIONS_BLOCKING_OR_SAFEPOINT)
-				.getAggregate(Aggregators.itemWithMax(JfrAttributes.DURATION));
 
-		if (longestEvent == null) {
+		findLongestEventInfo(items.apply(JdkFilters.VM_OPERATIONS_BLOCKING_OR_SAFEPOINT));
+		if (startingEvent == null) {
 			String zeroDuration = UnitLookup.SECOND.quantity(0).displayUsing(IDisplayable.AUTO);
 			return new Result(this, 0,
 					MessageFormat.format(Messages.getString(Messages.VMOperationRuleFactory_TEXT_OK), zeroDuration),
 					null, JdkQueries.VM_OPERATIONS);
 		}
-		IQuantity longestDuration = RulesToolkit.getValue(longestEvent, JfrAttributes.DURATION);
-		String timeStr = RulesToolkit.getValue(longestEvent, JfrAttributes.START_TIME).displayUsing(IDisplayable.AUTO);
+		String timeStr = getStartTime(startingEvent).displayUsing(IDisplayable.AUTO);
 		String peakDuration = longestDuration.displayUsing(IDisplayable.AUTO);
+		String operation = getOperation(startingEvent);
+		IMCThread caller = getCaller(startingEvent);
 		double score = RulesToolkit.mapExp100(longestDuration.doubleValueIn(UnitLookup.SECOND),
 				infoLimit.doubleValueIn(UnitLookup.SECOND), warningLimit.doubleValueIn(UnitLookup.SECOND));
 
+		boolean isCombinedDuration = getDuration(startingEvent).compareTo(longestDuration) != 0;
+		longestDuration = null;
+		startingEvent = null;
 		if (Severity.get(score) == Severity.WARNING || Severity.get(score) == Severity.INFO) {
-			String operation = RulesToolkit.getValue(longestEvent, JdkAttributes.OPERATION);
-			IMCThread caller = RulesToolkit.getValue(longestEvent, JdkAttributes.CALLER);
-			return new Result(this, score,
-					MessageFormat.format(Messages.getString(Messages.VMOperationRuleFactory_TEXT_WARN), peakDuration),
-					MessageFormat.format(Messages.getString(Messages.VMOperationRuleFactory_TEXT_WARN_LONG),
-							peakDuration, Encode.forHtml(operation), Encode.forHtml(caller.getThreadName()), timeStr),
+			String longMessage = isCombinedDuration ? Messages.VMOperationRuleFactory_TEXT_WARN_LONG_COMBINED_DURATION
+					: Messages.VMOperationRuleFactory_TEXT_WARN_LONG;
+			String shortMessage = isCombinedDuration ? Messages.VMOperationRuleFactory_TEXT_WARN_COMBINED_DURATION
+					: Messages.VMOperationRuleFactory_TEXT_WARN;
+			return new Result(this, score, MessageFormat.format(Messages.getString(shortMessage), peakDuration),
+					MessageFormat.format(Messages.getString(longMessage), peakDuration, operation, caller, timeStr),
 					JdkQueries.VM_OPERATIONS_BLOCKING);
 		}
-		return new Result(this, score,
-				MessageFormat.format(Messages.getString(Messages.VMOperationRuleFactory_TEXT_OK), peakDuration), null,
+		String shortMessage = isCombinedDuration ? Messages.VMOperationRuleFactory_TEXT_OK_COMBINED_DURATION
+				: Messages.VMOperationRuleFactory_TEXT_OK;
+		return new Result(this, score, MessageFormat.format(Messages.getString(shortMessage), peakDuration), null,
 				JdkQueries.FILE_READ);
 	}
 
+	private void findLongestEventInfo(IItemCollection items) {
+		IItem startingEvent = null;
+		IQuantity longestDuration = null;
+		IItem curStartingEvent = null;
+		IQuantity prevEndTime = null;
+		IQuantity curCombinedDur = null;
+
+		List<IItem> sortedEvents = sortEventsByStartTime(items);
+		for (IItem event : sortedEvents) {
+			if (curStartingEvent == null) {
+				curStartingEvent = event;
+				curCombinedDur = getDuration(event);
+				longestDuration = curCombinedDur;
+			} else {
+				IQuantity startTime = getStartTime(event);
+				IQuantity duration = getDuration(event);
+				double timeBetweenEvents = startTime.subtract(prevEndTime).doubleValueIn(UnitLookup.SECOND);
+				if (getOperation(curStartingEvent).equals(getOperation(event))
+						&& getCaller(curStartingEvent).equals(getCaller(event))
+						&& timeBetweenEvents <= MAX_SECONDS_BETWEEN_EVENTS) {
+					curCombinedDur = curCombinedDur.add(duration);
+				} else {
+					curCombinedDur = duration;
+					curStartingEvent = event;
+				}
+			}
+
+			if (longestDuration.compareTo(curCombinedDur) < 0) {
+				longestDuration = curCombinedDur;
+				startingEvent = curStartingEvent;
+			}
+			prevEndTime = getEndTime(event);
+		}
+		this.longestDuration = longestDuration;
+		this.startingEvent = startingEvent;
+	}
+
+	private List<IItem> sortEventsByStartTime(IItemCollection items) {
+		List<IItem> sortedEvents = new ArrayList<>();
+		for (IItemIterable iter : items) {
+			for (IItem event : iter) {
+				sortedEvents.add(event);
+			}
+		}
+		Collections.sort(sortedEvents, new Comparator<IItem>() {
+			@Override
+			public int compare(IItem e1, IItem e2) {
+				return getStartTime(e1).compareTo(getStartTime(e2));
+			}
+		});
+		return sortedEvents;
+	}
+
+	private IQuantity getStartTime(IItem event) {
+		return RulesToolkit.getValue(event, JfrAttributes.START_TIME);
+	}
+
+	private IQuantity getEndTime(IItem event) {
+		return RulesToolkit.getValue(event, JfrAttributes.END_TIME);
+	}
+
+	private IQuantity getDuration(IItem event) {
+		return RulesToolkit.getValue(event, JfrAttributes.DURATION);
+	}
+
+	private IMCThread getCaller(IItem event) {
+		return RulesToolkit.getValue(event, JdkAttributes.CALLER);
+	}
+
+	private String getOperation(IItem event) {
+		return RulesToolkit.getValue(event, JdkAttributes.OPERATION);
+	}
+
 	@Override
 	public Collection<TypedPreference<?>> getConfigurationAttributes() {
 		return CONFIG_ATTRIBUTES;
 	}
 
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/Messages.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/Messages.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/Messages.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/Messages.java
@@ -527,12 +527,15 @@
 	public static final String TlabAllocationRatioRuleFactory_TEXT_OK_NO_OUTSIDE = "TlabAllocationRatioRuleFactory_TEXT_OK_NO_OUTSIDE"; //$NON-NLS-1$
 	public static final String TlabAllocationRatioRuleFactory_TEXT_RECOMMEND_LESS_ALLOCATION = "TlabAllocationRatioRuleFactory_TEXT_RECOMMEND_LESS_ALLOCATION"; //$NON-NLS-1$
 	public static final String UnlockExperimentalVMOptionsRuleFactory_TEXT_INFO = "UnlockExperimentalVMOptionsRuleFactory_TEXT_INFO"; //$NON-NLS-1$
 	public static final String UnlockExperimentalVMOptionsRuleFactory_TEXT_INFO_LONG = "UnlockExperimentalVMOptionsRuleFactory_TEXT_INFO_LONG"; //$NON-NLS-1$
 	public static final String VMOperationRuleFactory_TEXT_OK = "VMOperationRuleFactory_TEXT_OK"; //$NON-NLS-1$
+	public static final String VMOperationRuleFactory_TEXT_OK_COMBINED_DURATION = "VMOperationRuleFactory_TEXT_OK_COMBINED_DURATION"; //$NON-NLS-1$
 	public static final String VMOperationRuleFactory_TEXT_WARN = "VMOperationRuleFactory_TEXT_WARN"; //$NON-NLS-1$
+	public static final String VMOperationRuleFactory_TEXT_WARN_COMBINED_DURATION = "VMOperationRuleFactory_TEXT_WARN_COMBINED_DURATION"; //$NON-NLS-1$
 	public static final String VMOperationRuleFactory_TEXT_WARN_LONG = "VMOperationRuleFactory_TEXT_WARN_LONG"; //$NON-NLS-1$
+	public static final String VMOperationRuleFactory_TEXT_WARN_LONG_COMBINED_DURATION = "VMOperationRuleFactory_TEXT_WARN_LONG_COMBINED_DURATION"; //$NON-NLS-1$
 	public static final String VMOperationRule_CONFIG_WARNING_LIMIT = "VMOperationRule_CONFIG_WARNING_LIMIT"; //$NON-NLS-1$
 	public static final String VMOperationRule_CONFIG_WARNING_LIMIT_LONG = "VMOperationRule_CONFIG_WARNING_LIMIT_LONG"; //$NON-NLS-1$
 	public static final String VMOperations_RULE_NAME = "VMOperations_RULE_NAME"; //$NON-NLS-1$
 	public static final String VerifyNoneRule_RULE_NAME = "VerifyNoneRule_RULE_NAME"; //$NON-NLS-1$
 	public static final String VerifyNoneRule_TEXT_INFO = "VerifyNoneRule_TEXT_INFO"; //$NON-NLS-1$
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/resources/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/messages.properties b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/resources/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/messages.properties
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/resources/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/messages.properties
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/resources/org/openjdk/jmc/flightrecorder/rules/jdk/messages/internal/messages.properties
@@ -615,9 +615,12 @@
 VMOperations_RULE_NAME=VMOperation Peak Duration
 VMOperationRule_CONFIG_WARNING_LIMIT=Blocking VM operation duration warning limit
 VMOperationRule_CONFIG_WARNING_LIMIT_LONG=The minimum duration for a blocking VM operation needed to trigger a warning
 # {0} is a time period
 VMOperationRuleFactory_TEXT_OK=No excessively long VM operations were found in this recording (the longest was {0}).
+VMOperationRuleFactory_TEXT_OK_COMBINED_DURATION=No excessively long VM operations were found in this recording. The longest was created from multiple close consecutive operations that lasted for {0} in total.
 # {0} is a time period
 VMOperationRuleFactory_TEXT_WARN=There are long lasting blocking VM operations in this recording (the longest is {0}).
+VMOperationRuleFactory_TEXT_WARN_COMBINED_DURATION=There are long lasting blocking VM operations in this recording. The longest was created from multiple close consecutive operations that lasted for {0} in total.
 # {0} is a time period, {1} is a time stamp, {2} is a thread name, {3} is a time stamp
 VMOperationRuleFactory_TEXT_WARN_LONG=There are long lasting blocking VM operations in this recording. The longest was of type {1} and lasted for {0}. It was initiated from thread ''{2}'' and happened at {3}. <p>VM operations are JVM internal operations. Some VM operations are executed synchronously (i.e. will block the calling thread), and some need to be executed at so called safe points. Safe point polling is a cooperative suspension mechanism that halts byte code execution in the JVM. A VM operation occurring at a safe point will effectively be "stopping the world", meaning that no Java code will be executing in any thread while executing VM operations at that safe point. Long lasting VM operations executing at safe points can decrease the responsiveness of an application. <p>If you do find such VM operations, then the type of operation and its caller thread provide vital information to understand why the VM operation happened. To find more details, check if there is an event in the caller thread intersecting this event time wise. Looking at the stack trace for such an event can help determining what caused it.</p><p>See <a href="http://openjdk.java.net/groups/hotspot/docs/RuntimeOverview.html">Runtime Overview</a> for further information.</p>
+VMOperationRuleFactory_TEXT_WARN_LONG_COMBINED_DURATION=There are long lasting blocking VM operations in this recording. The longest was created from multiple close consecutive operations that were of type {1} and lasted for {0} in total. They were initiated from thread ''{2}'' and started at {3}. <p>VM operations are JVM internal operations. Some VM operations are executed synchronously (i.e. will block the calling thread), and some need to be executed at so called safe points. Safe point polling is a cooperative suspension mechanism that halts byte code execution in the JVM. A VM operation occurring at a safe point will effectively be "stopping the world", meaning that no Java code will be executing in any thread while executing VM operations at that safe point. Long lasting VM operations executing at safe points can decrease the responsiveness of an application. <p>If you do find such VM operations, then the type of operation and its caller thread provide vital information to understand why the VM operation happened. To find more details, check if there is an event in the caller thread intersecting this event time wise. Looking at the stack trace for such an event can help determining what caused it.</p><p>See <a href="http://openjdk.java.net/groups/hotspot/docs/RuntimeOverview.html">Runtime Overview</a> for further information.</p>
