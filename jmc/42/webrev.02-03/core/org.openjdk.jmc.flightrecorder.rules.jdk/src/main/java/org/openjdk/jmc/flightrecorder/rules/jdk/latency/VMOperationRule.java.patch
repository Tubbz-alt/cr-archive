diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
@@ -37,10 +37,11 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
+import java.util.Objects;
 import java.util.concurrent.Callable;
 import java.util.concurrent.FutureTask;
 import java.util.concurrent.RunnableFuture;
 
 import org.openjdk.jmc.common.IDisplayable;
@@ -145,11 +146,11 @@
 			} else {
 				IQuantity startTime = getStartTime(event);
 				IQuantity duration = getDuration(event);
 				double timeBetweenEvents = startTime.subtract(prevEndTime).doubleValueIn(UnitLookup.SECOND);
 				if (getOperation(curStartingEvent).equals(getOperation(event))
-						&& getCaller(curStartingEvent).equals(getCaller(event))
+						&& Objects.equals(getCaller(curStartingEvent), getCaller(event))
 						&& timeBetweenEvents <= MAX_SECONDS_BETWEEN_EVENTS) {
 					curCombinedDur = curCombinedDur.add(duration);
 				} else {
 					curCombinedDur = duration;
 					curStartingEvent = event;
