diff a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/FormatToolkit.java b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/FormatToolkit.java
--- a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/FormatToolkit.java
+++ b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/FormatToolkit.java
@@ -37,10 +37,11 @@
 import org.openjdk.jmc.common.IMCMethod;
 import org.openjdk.jmc.common.IMCPackage;
 import org.openjdk.jmc.common.IMCStackTrace;
 import org.openjdk.jmc.common.IMCType;
 import org.openjdk.jmc.common.messages.internal.Messages;
+import org.owasp.encoder.Encode;
 
 /**
  * Methods for formatting IMC* instances.
  */
 // FIXME: Avoid exposing if possible. Could be moved to another package together with IMCMethod etc.
@@ -309,12 +310,12 @@
 		if (trace.getFrames() != null && trace.getFrames().size() > 0) {
 			int rowIndex = 0;
 			int count = trace.getFrames().size();
 			for (IMCFrame frame : trace.getFrames()) {
 				IMCMethod method = frame.getMethod();
-				String methodText = getHumanReadable(method, showReturnValue, showReturnValuePackage, showClassName,
-						showClassPackageName, showArguments, showArgumentsPackage);
+				String methodText = Encode.forHtml(getHumanReadable(method, showReturnValue, showReturnValuePackage,
+						showClassName, showClassPackageName, showArguments, showArgumentsPackage));
 
 				sb.append(indent).append(linePrefix).append(methodText).append(lineSeparator);
 
 				if (rowIndex == maximumVisibleStackTraceElements && rowIndex != count - 1) {
 					sb.append(indent).append("..." + lineSeparator); //$NON-NLS-1$
