diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java
@@ -55,10 +55,11 @@
 import org.openjdk.jmc.flightrecorder.rules.Result;
 import org.openjdk.jmc.flightrecorder.rules.jdk.messages.internal.Messages;
 import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;
+import org.owasp.encoder.Encode;
 
 public class FlightRecordingSupportRule implements IRule {
 
 	private static final String RESULT_ID = "FlightRecordingSupport"; //$NON-NLS-1$
 
@@ -128,17 +129,17 @@
 		if (!usedVersion.isGreaterOrEqualThan(JDK_7_U_40)) {
 			return new Result(this, 100,
 					Messages.getString(Messages.FlightRecordingSupportRule_UNSUPPORTED_TEXT_WARN_SHORT),
 					MessageFormat.format(
 							Messages.getString(Messages.FlightRecordingSupportRule_UNSUPPORTED_TEXT_WARN_LONG),
-							versionString));
+							Encode.forHtml(versionString)));
 		}
 
 		if (usedVersion.isEarlyAccess()) {
 			return new Result(this, 80, Messages.getString(Messages.FlightRecordingSupportRule_EA_TEXT_WARN_SHORT),
 					MessageFormat.format(Messages.getString(Messages.FlightRecordingSupportRule_EA_TEXT_WARN_LONG),
-							versionString));
+							Encode.forHtml(versionString)));
 		}
 
 		return new Result(this, 0, Messages.getString(Messages.FlightRecordingSupportRule_TEXT_OK));
 	}
 
