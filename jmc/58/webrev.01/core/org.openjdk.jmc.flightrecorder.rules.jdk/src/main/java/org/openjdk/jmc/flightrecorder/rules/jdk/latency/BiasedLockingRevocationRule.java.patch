diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationRule.java
@@ -76,10 +76,11 @@
 import org.openjdk.jmc.flightrecorder.rules.jdk.util.ItemResultSetException;
 import org.openjdk.jmc.flightrecorder.rules.jdk.util.ItemResultSetFactory;
 import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;
+import org.owasp.encoder.Encode;
 
 /**
  * This rule is making use of the new dedicated biased locking revocation events available in JDK
  * 10/18.3. It will fire whenever a class is excluded from biased lockings, or whenever there have
  * been more than 15 revocations (can be configured) for a particular class.
@@ -139,11 +140,11 @@
 			longMessage
 					.append(Messages.getString(Messages.BiasedLockingRevocationRule_TEXT_REVOKED_CLASSES_FOUND_LONG));
 			longMessage.append("<p><ul>"); //$NON-NLS-1$
 			for (IMCType offender : revokedTypes) {
 				longMessage.append("<li>"); //$NON-NLS-1$
-				longMessage.append(offender.toString());
+				longMessage.append(Encode.forHtml(offender.toString()));
 				longMessage.append("</li>"); //$NON-NLS-1$
 			}
 			longMessage.append("</ul></p>"); //$NON-NLS-1$
 		}
 		int warningLimit = (int) valueProvider.getPreferenceValue(WARNING_LIMIT).longValue();
@@ -174,21 +175,21 @@
 				ClassEntry classEntry = revocationClasses.get(i);
 				if (classEntry.getCount() < warningLimit) {
 					break;
 				}
 				longMessage.append("<li>"); //$NON-NLS-1$
-				longMessage.append(classEntry);
+				longMessage.append(Encode.forHtml(classEntry.toString()));
 				longMessage.append("</li>"); //$NON-NLS-1$
 			}
 			longMessage.append("</ul></p>"); //$NON-NLS-1$
 		}
 		if (totalScore == 0) {
 			return new Result(this, 0, Messages.getString(Messages.BiasedLockingRevocationRule_TEXT_OK));
 		} else {
 			longMessage
 					.append(MessageFormat.format(Messages.getString(Messages.BiasedLockingRevocationRule_TEXT_EPILOGUE),
-							String.valueOf(filteredTypes)));
+							Encode.forHtml(String.valueOf(filteredTypes))));
 		}
 		return new Result(this, totalScore, shortMessage.toString(), longMessage.toString());
 	}
 
 	private int calculateRevocationCountScore(List<ClassEntry> offendingClasses) {
