diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java
@@ -59,10 +59,11 @@
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFormatToolkit;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFrame;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Branch;
+import org.owasp.encoder.Encode;
 
 /**
  * Rule that checks how much of the total allocation is caused by possible primitive to object
  * conversion. Looks at top frames and searches for java.lang.BoxType.valueOf.
  */
@@ -179,11 +180,11 @@
 
 		// Compute information about top autoboxing type
 		String mostAllocatedTypeInfo = ""; //$NON-NLS-1$
 		String mostAllocatedTypeInfoLong = ""; //$NON-NLS-1$
 		if (largestAllocatedType != null) {
-			String fullName = largestAllocatedType.getFullName();
+			String fullName = Encode.forHtml(largestAllocatedType.getFullName());
 			mostAllocatedTypeInfo = " " + MessageFormat //$NON-NLS-1$
 					.format(Messages.getString(Messages.AutoboxingRule_RESULT_MOST_AUTOBOXED_TYPE), fullName);
 			mostAllocatedTypeInfoLong = "<p>" //$NON-NLS-1$
 					+ MessageFormat.format(Messages.getString(Messages.AutoboxingRule_RESULT_MOST_AUTOBOXED_TYPE_LONG),
 							fullName, largestAllocatedByType.displayUsing(IDisplayable.AUTO),
