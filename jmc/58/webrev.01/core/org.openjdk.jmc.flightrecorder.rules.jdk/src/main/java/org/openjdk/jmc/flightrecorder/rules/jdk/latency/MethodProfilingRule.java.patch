diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/MethodProfilingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/MethodProfilingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/MethodProfilingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/MethodProfilingRule.java
@@ -88,10 +88,11 @@
 import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;
 import org.openjdk.jmc.flightrecorder.rules.util.SlidingWindowToolkit;
 import org.openjdk.jmc.flightrecorder.rules.util.SlidingWindowToolkit.IUnorderedWindowVisitor;
+import org.owasp.encoder.Encode;
 
 /**
  * Rule that calculates the top method balance in a sliding window throughout the recording with a
  * relevance calculated by the ratio of samples to maximum samples for that period.
  */
@@ -283,11 +284,11 @@
 	private String buildResultList(Map<IMCStackTrace, MethodProfilingWindowResult> percentByMethod) {
 		StringBuilder longList = new StringBuilder();
 		longList.append("<ul>"); //$NON-NLS-1$
 		for (Entry<IMCStackTrace, MethodProfilingWindowResult> entry : percentByMethod.entrySet()) {
 			longList.append("<li>"); //$NON-NLS-1$
-			longList.append(entry.getValue());
+			longList.append(Encode.forHtml(entry.getValue().toString()));
 			longList.append("</li>"); //$NON-NLS-1$
 		}
 		longList.append("</ul>"); //$NON-NLS-1$
 		return longList.toString();
 	}
