diff a/core/org.openjdk.jmc.common/META-INF/MANIFEST.MF b/core/org.openjdk.jmc.common/META-INF/MANIFEST.MF
--- a/core/org.openjdk.jmc.common/META-INF/MANIFEST.MF
+++ b/core/org.openjdk.jmc.common/META-INF/MANIFEST.MF
@@ -11,5 +11,6 @@
  org.openjdk.jmc.common.item,
  org.openjdk.jmc.common.unit,
  org.openjdk.jmc.common.util,
  org.openjdk.jmc.common.version
 Automatic-Module-Name: org.openjdk.jmc.common
+Require-Bundle: org.owasp.encoder
diff a/core/org.openjdk.jmc.common/pom.xml b/core/org.openjdk.jmc.common/pom.xml
--- a/core/org.openjdk.jmc.common/pom.xml
+++ b/core/org.openjdk.jmc.common/pom.xml
@@ -37,9 +37,16 @@
 		<groupId>org.openjdk.jmc</groupId>
 		<artifactId>missioncontrol.core</artifactId>
 		<version>8.0.0-SNAPSHOT</version>
 	</parent>
 	<artifactId>common</artifactId>
+   <dependencies>
+		<dependency>
+			<groupId>org.owasp.encoder</groupId>
+			<artifactId>encoder</artifactId>
+			<version>1.2.2</version>
+		</dependency>
+	</dependencies>
 	<properties>
 		<spotless.config.path>${basedir}/../../configuration/ide/eclipse/formatting/formatting.xml</spotless.config.path>
 	</properties>
 </project>
diff a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/FormatToolkit.java b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/FormatToolkit.java
--- a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/FormatToolkit.java
+++ b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/util/FormatToolkit.java
@@ -37,10 +37,11 @@
 import org.openjdk.jmc.common.IMCMethod;
 import org.openjdk.jmc.common.IMCPackage;
 import org.openjdk.jmc.common.IMCStackTrace;
 import org.openjdk.jmc.common.IMCType;
 import org.openjdk.jmc.common.messages.internal.Messages;
+import org.owasp.encoder.Encode;
 
 /**
  * Methods for formatting IMC* instances.
  */
 // FIXME: Avoid exposing if possible. Could be moved to another package together with IMCMethod etc.
@@ -309,12 +310,12 @@
 		if (trace.getFrames() != null && trace.getFrames().size() > 0) {
 			int rowIndex = 0;
 			int count = trace.getFrames().size();
 			for (IMCFrame frame : trace.getFrames()) {
 				IMCMethod method = frame.getMethod();
-				String methodText = getHumanReadable(method, showReturnValue, showReturnValuePackage, showClassName,
-						showClassPackageName, showArguments, showArgumentsPackage);
+				String methodText = Encode.forHtml(getHumanReadable(method, showReturnValue, showReturnValuePackage,
+						showClassName, showClassPackageName, showArguments, showArgumentsPackage));
 
 				sb.append(indent).append(linePrefix).append(methodText).append(lineSeparator);
 
 				if (rowIndex == maximumVisibleStackTraceElements && rowIndex != count - 1) {
 					sb.append(indent).append("..." + lineSeparator); //$NON-NLS-1$
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLeakingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLeakingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLeakingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLeakingRule.java
@@ -73,10 +73,11 @@
 import org.openjdk.jmc.flightrecorder.rules.jdk.util.ItemResultSetException;
 import org.openjdk.jmc.flightrecorder.rules.jdk.util.ItemResultSetFactory;
 import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;
+import org.owasp.encoder.Encode;
 
 /**
  * This rule looks at the loaded classes to try to figure out if multiple classes with the same name
  * has been loaded. Note that this rule can get fairly expensive if you have load events with many
  * (thousands) of unique classes.
@@ -143,11 +144,11 @@
 			longText.append("</ul></p>"); //$NON-NLS-1$
 			double maxScore = RulesToolkit.mapExp100(maxCount, warningLimit) * 0.75;
 			ClassEntry worst = entries.get(0);
 			return new Result(this, maxScore,
 					MessageFormat.format(Messages.getString(Messages.ClassLeakingRule_TEXT_WARN),
-							worst.getType().getFullName(), worst.getCount()),
+							Encode.forHtml(worst.getType().getFullName()), worst.getCount()),
 					longText.toString());
 		}
 		return new Result(this, 0, Messages.getString(Messages.ClassLeakingRule_TEXT_OK));
 	}
 
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DumpReasonRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DumpReasonRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DumpReasonRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DumpReasonRule.java
@@ -57,10 +57,11 @@
 import org.openjdk.jmc.flightrecorder.rules.Result;
 import org.openjdk.jmc.flightrecorder.rules.jdk.messages.internal.Messages;
 import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;
+import org.owasp.encoder.Encode;
 
 public class DumpReasonRule implements IRule {
 	private static final String DUMP_REASON_RESULT_ID = "DumpReason"; //$NON-NLS-1$
 
 	public static final TypedPreference<IQuantity> CRASH_SCORE = new TypedPreference<>("crash.score", //$NON-NLS-1$
@@ -107,11 +108,11 @@
 			} else {
 				// FIXME: When all recordings have DumpReasons, we will be more sure of if an unknown reason is good or bad.
 				score = 10;
 				shortDescription = Messages.getString(Messages.DumpReasonRule_TEXT_INFO_UNKNOWN);
 				longDescription = MessageFormat.format(Messages.getString(Messages.DumpReasonRule_TEXT_LONG_UNKNOWN),
-						reasons);
+						Encode.forHtml(reasons));
 			}
 			return new Result(this, score, shortDescription, longDescription,
 					ItemQueryBuilder.fromWhere(itemFilter).build());
 		}
 		if (eventAvailability == EventAvailability.DISABLED) {
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/FlightRecordingSupportRule.java
@@ -55,10 +55,11 @@
 import org.openjdk.jmc.flightrecorder.rules.Result;
 import org.openjdk.jmc.flightrecorder.rules.jdk.messages.internal.Messages;
 import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;
+import org.owasp.encoder.Encode;
 
 public class FlightRecordingSupportRule implements IRule {
 
 	private static final String RESULT_ID = "FlightRecordingSupport"; //$NON-NLS-1$
 
@@ -128,17 +129,17 @@
 		if (!usedVersion.isGreaterOrEqualThan(JDK_7_U_40)) {
 			return new Result(this, 100,
 					Messages.getString(Messages.FlightRecordingSupportRule_UNSUPPORTED_TEXT_WARN_SHORT),
 					MessageFormat.format(
 							Messages.getString(Messages.FlightRecordingSupportRule_UNSUPPORTED_TEXT_WARN_LONG),
-							versionString));
+							Encode.forHtml(versionString)));
 		}
 
 		if (usedVersion.isEarlyAccess()) {
 			return new Result(this, 80, Messages.getString(Messages.FlightRecordingSupportRule_EA_TEXT_WARN_SHORT),
 					MessageFormat.format(Messages.getString(Messages.FlightRecordingSupportRule_EA_TEXT_WARN_LONG),
-							versionString));
+							Encode.forHtml(versionString)));
 		}
 
 		return new Result(this, 0, Messages.getString(Messages.FlightRecordingSupportRule_TEXT_OK));
 	}
 
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/BiasedLockingRevocationRule.java
@@ -76,10 +76,11 @@
 import org.openjdk.jmc.flightrecorder.rules.jdk.util.ItemResultSetException;
 import org.openjdk.jmc.flightrecorder.rules.jdk.util.ItemResultSetFactory;
 import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;
+import org.owasp.encoder.Encode;
 
 /**
  * This rule is making use of the new dedicated biased locking revocation events available in JDK
  * 10/18.3. It will fire whenever a class is excluded from biased lockings, or whenever there have
  * been more than 15 revocations (can be configured) for a particular class.
@@ -139,11 +140,11 @@
 			longMessage
 					.append(Messages.getString(Messages.BiasedLockingRevocationRule_TEXT_REVOKED_CLASSES_FOUND_LONG));
 			longMessage.append("<p><ul>"); //$NON-NLS-1$
 			for (IMCType offender : revokedTypes) {
 				longMessage.append("<li>"); //$NON-NLS-1$
-				longMessage.append(offender.toString());
+				longMessage.append(Encode.forHtml(offender.toString()));
 				longMessage.append("</li>"); //$NON-NLS-1$
 			}
 			longMessage.append("</ul></p>"); //$NON-NLS-1$
 		}
 		int warningLimit = (int) valueProvider.getPreferenceValue(WARNING_LIMIT).longValue();
@@ -174,21 +175,21 @@
 				ClassEntry classEntry = revocationClasses.get(i);
 				if (classEntry.getCount() < warningLimit) {
 					break;
 				}
 				longMessage.append("<li>"); //$NON-NLS-1$
-				longMessage.append(classEntry);
+				longMessage.append(Encode.forHtml(classEntry.toString()));
 				longMessage.append("</li>"); //$NON-NLS-1$
 			}
 			longMessage.append("</ul></p>"); //$NON-NLS-1$
 		}
 		if (totalScore == 0) {
 			return new Result(this, 0, Messages.getString(Messages.BiasedLockingRevocationRule_TEXT_OK));
 		} else {
 			longMessage
 					.append(MessageFormat.format(Messages.getString(Messages.BiasedLockingRevocationRule_TEXT_EPILOGUE),
-							String.valueOf(filteredTypes)));
+							Encode.forHtml(String.valueOf(filteredTypes))));
 		}
 		return new Result(this, totalScore, shortMessage.toString(), longMessage.toString());
 	}
 
 	private int calculateRevocationCountScore(List<ClassEntry> offendingClasses) {
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
@@ -113,11 +113,12 @@
 		String excludeText = ""; //$NON-NLS-1$
 		double balanceScore = 1;
 
 		if (!threadExcludeRegexp.isEmpty()) {
 			excludeText = "<p>" + MessageFormat.format( //$NON-NLS-1$
-					Messages.getString(Messages.JavaBlockingRule_TEXT_EXCLUDED_THREADS), threadExcludeRegexp);
+					Messages.getString(Messages.JavaBlockingRule_TEXT_EXCLUDED_THREADS),
+					Encode.forHtml(threadExcludeRegexp));
 		}
 
 		double weightedValue = RulesToolkit.mapExp100(waitRatio.doubleValue() * balanceScore, 1);
 		if (weightedValue < 25) {
 			String shortMessage = Messages.getString(Messages.JavaBlockingRule_TEXT_MESSAGE);
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/MethodProfilingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/MethodProfilingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/MethodProfilingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/MethodProfilingRule.java
@@ -88,10 +88,11 @@
 import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;
 import org.openjdk.jmc.flightrecorder.rules.util.SlidingWindowToolkit;
 import org.openjdk.jmc.flightrecorder.rules.util.SlidingWindowToolkit.IUnorderedWindowVisitor;
+import org.owasp.encoder.Encode;
 
 /**
  * Rule that calculates the top method balance in a sliding window throughout the recording with a
  * relevance calculated by the ratio of samples to maximum samples for that period.
  */
@@ -283,11 +284,11 @@
 	private String buildResultList(Map<IMCStackTrace, MethodProfilingWindowResult> percentByMethod) {
 		StringBuilder longList = new StringBuilder();
 		longList.append("<ul>"); //$NON-NLS-1$
 		for (Entry<IMCStackTrace, MethodProfilingWindowResult> entry : percentByMethod.entrySet()) {
 			longList.append("<li>"); //$NON-NLS-1$
-			longList.append(entry.getValue());
+			longList.append(Encode.forHtml(entry.getValue().toString()));
 			longList.append("</li>"); //$NON-NLS-1$
 		}
 		longList.append("</ul>"); //$NON-NLS-1$
 		return longList.toString();
 	}
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
@@ -112,11 +112,11 @@
 			String operation = RulesToolkit.getValue(longestEvent, JdkAttributes.OPERATION);
 			IMCThread caller = RulesToolkit.getValue(longestEvent, JdkAttributes.CALLER);
 			return new Result(this, score,
 					MessageFormat.format(Messages.getString(Messages.VMOperationRuleFactory_TEXT_WARN), peakDuration),
 					MessageFormat.format(Messages.getString(Messages.VMOperationRuleFactory_TEXT_WARN_LONG),
-							peakDuration, operation, Encode.forHtml(caller.getThreadName()), timeStr),
+							peakDuration, Encode.forHtml(operation), Encode.forHtml(caller.getThreadName()), timeStr),
 					JdkQueries.VM_OPERATIONS_BLOCKING);
 		}
 		return new Result(this, score,
 				MessageFormat.format(Messages.getString(Messages.VMOperationRuleFactory_TEXT_OK), peakDuration), null,
 				JdkQueries.FILE_READ);
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/memory/AutoBoxingRule.java
@@ -59,10 +59,11 @@
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFormatToolkit;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFrame;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Branch;
+import org.owasp.encoder.Encode;
 
 /**
  * Rule that checks how much of the total allocation is caused by possible primitive to object
  * conversion. Looks at top frames and searches for java.lang.BoxType.valueOf.
  */
@@ -179,11 +180,11 @@
 
 		// Compute information about top autoboxing type
 		String mostAllocatedTypeInfo = ""; //$NON-NLS-1$
 		String mostAllocatedTypeInfoLong = ""; //$NON-NLS-1$
 		if (largestAllocatedType != null) {
-			String fullName = largestAllocatedType.getFullName();
+			String fullName = Encode.forHtml(largestAllocatedType.getFullName());
 			mostAllocatedTypeInfo = " " + MessageFormat //$NON-NLS-1$
 					.format(Messages.getString(Messages.AutoboxingRule_RESULT_MOST_AUTOBOXED_TYPE), fullName);
 			mostAllocatedTypeInfoLong = "<p>" //$NON-NLS-1$
 					+ MessageFormat.format(Messages.getString(Messages.AutoboxingRule_RESULT_MOST_AUTOBOXED_TYPE_LONG),
 							fullName, largestAllocatedByType.displayUsing(IDisplayable.AUTO),
diff a/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/resources/baseline/JfrRuleBaseline.xml b/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/resources/baseline/JfrRuleBaseline.xml
--- a/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/resources/baseline/JfrRuleBaseline.xml
+++ b/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/resources/baseline/JfrRuleBaseline.xml
@@ -2571,11 +2571,11 @@
         <rule>
             <id>FlightRecordingSupport</id>
             <severity>Warning</severity>
             <score>80.0</score>
             <shortDescription>The recording is from an early access build.</shortDescription>
-            <longDescription>This recording is from an early access build of the JRE (Java HotSpot(TM) Client VM (25.20-b08) for linux-x86 JRE (1.8.0_20-ea-b08), built on Apr  1 2014 19:40:24 by "java_re" with gcc 4.3.0 20080428 (Red Hat 4.3.0-8)). The automated analysis is not supported, and you may see errors when attempting to analyze the recording.</longDescription>
+            <longDescription>This recording is from an early access build of the JRE (Java HotSpot(TM) Client VM (25.20-b08) for linux-x86 JRE (1.8.0_20-ea-b08), built on Apr  1 2014 19:40:24 by &amp;#34;java_re&amp;#34; with gcc 4.3.0 20080428 (Red Hat 4.3.0-8)). The automated analysis is not supported, and you may see errors when attempting to analyze the recording.</longDescription>
         </rule>
         <rule>
             <id>FullGc</id>
             <severity>Not Applicable</severity>
             <score>-1.0</score>
@@ -2973,11 +2973,11 @@
         <rule>
             <id>FlightRecordingSupport</id>
             <severity>Warning</severity>
             <score>80.0</score>
             <shortDescription>The recording is from an early access build.</shortDescription>
-            <longDescription>This recording is from an early access build of the JRE (Java HotSpot(TM) Client VM (25.20-b08) for linux-x86 JRE (1.8.0_20-ea-b08), built on Apr  1 2014 19:40:24 by "java_re" with gcc 4.3.0 20080428 (Red Hat 4.3.0-8)). The automated analysis is not supported, and you may see errors when attempting to analyze the recording.</longDescription>
+            <longDescription>This recording is from an early access build of the JRE (Java HotSpot(TM) Client VM (25.20-b08) for linux-x86 JRE (1.8.0_20-ea-b08), built on Apr  1 2014 19:40:24 by &amp;#34;java_re&amp;#34; with gcc 4.3.0 20080428 (Red Hat 4.3.0-8)). The automated analysis is not supported, and you may see errors when attempting to analyze the recording.</longDescription>
         </rule>
         <rule>
             <id>FullGc</id>
             <severity>Not Applicable</severity>
             <score>-1.0</score>
@@ -4181,11 +4181,11 @@
         <rule>
             <id>FlightRecordingSupport</id>
             <severity>Warning</severity>
             <score>80.0</score>
             <shortDescription>The recording is from an early access build.</shortDescription>
-            <longDescription>This recording is from an early access build of the JRE (Java HotSpot(TM) 64-Bit Server VM (9-ea+148) for windows-amd64 JRE (9-ea+148), built on Dec  7 2016 18:47:38 by "javare" with MS VC++ 12.0 (VS2013)). The automated analysis is not supported, and you may see errors when attempting to analyze the recording.</longDescription>
+            <longDescription>This recording is from an early access build of the JRE (Java HotSpot(TM) 64-Bit Server VM (9-ea+148) for windows-amd64 JRE (9-ea+148), built on Dec  7 2016 18:47:38 by &amp;#34;javare&amp;#34; with MS VC++ 12.0 (VS2013)). The automated analysis is not supported, and you may see errors when attempting to analyze the recording.</longDescription>
         </rule>
         <rule>
             <id>FullGc</id>
             <severity>Not Applicable</severity>
             <score>-1.0</score>
