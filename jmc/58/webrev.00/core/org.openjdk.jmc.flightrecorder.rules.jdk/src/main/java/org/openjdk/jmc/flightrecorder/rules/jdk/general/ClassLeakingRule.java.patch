diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLeakingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLeakingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLeakingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/ClassLeakingRule.java
@@ -73,10 +73,11 @@
 import org.openjdk.jmc.flightrecorder.rules.jdk.util.ItemResultSetException;
 import org.openjdk.jmc.flightrecorder.rules.jdk.util.ItemResultSetFactory;
 import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;
+import org.owasp.encoder.Encode;
 
 /**
  * This rule looks at the loaded classes to try to figure out if multiple classes with the same name
  * has been loaded. Note that this rule can get fairly expensive if you have load events with many
  * (thousands) of unique classes.
@@ -143,11 +144,11 @@
 			longText.append("</ul></p>"); //$NON-NLS-1$
 			double maxScore = RulesToolkit.mapExp100(maxCount, warningLimit) * 0.75;
 			ClassEntry worst = entries.get(0);
 			return new Result(this, maxScore,
 					MessageFormat.format(Messages.getString(Messages.ClassLeakingRule_TEXT_WARN),
-							worst.getType().getFullName(), worst.getCount()),
+							Encode.forHtml(worst.getType().getFullName()), worst.getCount()),
 					longText.toString());
 		}
 		return new Result(this, 0, Messages.getString(Messages.ClassLeakingRule_TEXT_OK));
 	}
 
