diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DumpReasonRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DumpReasonRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DumpReasonRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/general/DumpReasonRule.java
@@ -57,10 +57,11 @@
 import org.openjdk.jmc.flightrecorder.rules.Result;
 import org.openjdk.jmc.flightrecorder.rules.jdk.messages.internal.Messages;
 import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;
+import org.owasp.encoder.Encode;
 
 public class DumpReasonRule implements IRule {
 	private static final String DUMP_REASON_RESULT_ID = "DumpReason"; //$NON-NLS-1$
 
 	public static final TypedPreference<IQuantity> CRASH_SCORE = new TypedPreference<>("crash.score", //$NON-NLS-1$
@@ -107,11 +108,11 @@
 			} else {
 				// FIXME: When all recordings have DumpReasons, we will be more sure of if an unknown reason is good or bad.
 				score = 10;
 				shortDescription = Messages.getString(Messages.DumpReasonRule_TEXT_INFO_UNKNOWN);
 				longDescription = MessageFormat.format(Messages.getString(Messages.DumpReasonRule_TEXT_LONG_UNKNOWN),
-						reasons);
+						Encode.forHtml(reasons));
 			}
 			return new Result(this, score, shortDescription, longDescription,
 					ItemQueryBuilder.fromWhere(itemFilter).build());
 		}
 		if (eventAvailability == EventAvailability.DISABLED) {
