diff a/agent/src/main/java/org/openjdk/jmc/agent/Transformer.java b/agent/src/main/java/org/openjdk/jmc/agent/Transformer.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/Transformer.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/Transformer.java
@@ -106,11 +106,11 @@
 					new JFRNextClassVisitor(classWriter, td, definingClassLoader, classBeingRedefined, protectionDomain,
 							inspectionClassLoader) :
 					new JFRClassVisitor(classWriter, td, definingClassLoader, classBeingRedefined, protectionDomain,
 							inspectionClassLoader); 
 			ClassReader reader = new ClassReader(classfileBuffer);
-			reader.accept(visitor, 0);
+			reader.accept(visitor, ClassReader.EXPAND_FRAMES);
 			return classWriter.toByteArray();
 		} catch (Throwable t) {
 			Logger.getLogger(getClass().getName()).log(Level.SEVERE,
 					"Failed to instrument " + td.getMethod().toString(), t); //$NON-NLS-1$
 			return classfileBuffer;
diff a/agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java b/agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/jfr/impl/JFRMethodAdvisor.java
@@ -260,12 +260,6 @@
 		mv.visitVarInsn(ALOAD, eventLocal);
 		mv.visitInsn(DUP);
 		mv.visitMethodInsn(INVOKEVIRTUAL, transformDescriptor.getEventClassName(), "end", "()V", false); //$NON-NLS-1$ //$NON-NLS-2$
 		mv.visitMethodInsn(INVOKEVIRTUAL, transformDescriptor.getEventClassName(), "commit", "()V", false); //$NON-NLS-1$ //$NON-NLS-2$
 	}
-
-    @Override
-    public void visitFrame(int type, int numLocal, Object[] local, int numStack, Object[] stack) {
-        // force to always use expanded frames
-        super.visitFrame(Opcodes.F_NEW, numLocal, local, numStack, stack);
-    }
 }
diff a/agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextMethodAdvisor.java b/agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextMethodAdvisor.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextMethodAdvisor.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/jfrnext/impl/JFRNextMethodAdvisor.java
@@ -258,12 +258,6 @@
 
 	private void commitEvent() {
 		mv.visitVarInsn(ALOAD, eventLocal);
 		mv.visitMethodInsn(INVOKEVIRTUAL, transformDescriptor.getEventClassName(), "commit", "()V", false); //$NON-NLS-1$ //$NON-NLS-2$
 	}
-
-	@Override
-	public void visitFrame(int type, int numLocal, Object[] local, int numStack, Object[] stack) {
-		// force to always use expanded frames
-		super.visitFrame(Opcodes.F_NEW, numLocal, local, numStack, stack);
-	}
 }
diff a/agent/src/test/java/org/openjdk/jmc/agent/test/AllTests.java b/agent/src/test/java/org/openjdk/jmc/agent/test/AllTests.java
--- a/agent/src/test/java/org/openjdk/jmc/agent/test/AllTests.java
+++ b/agent/src/test/java/org/openjdk/jmc/agent/test/AllTests.java
@@ -36,9 +36,9 @@
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
 import org.openjdk.jmc.agent.converters.test.TestConverterTransforms;
 
 @RunWith(Suite.class)
-@SuiteClasses({TestDefaultTransformRegistry.class, TestUtils.class, TestJFRTransformer.class, TestConverterTransforms.class, TestProbeDefinitionValidation.class})
+@SuiteClasses({TestDefaultTransformRegistry.class, TestUtils.class, TestJFRTransformer.class, TestConverterTransforms.class, TestProbeDefinitionValidation.class, TestCompressedFrameTransformation.class})
 
 public class AllTests {
 }
diff a/agent/src/test/java/org/openjdk/jmc/agent/test/TestCompressedFrameTransformation.java b/agent/src/test/java/org/openjdk/jmc/agent/test/TestCompressedFrameTransformation.java
--- /dev/null
+++ b/agent/src/test/java/org/openjdk/jmc/agent/test/TestCompressedFrameTransformation.java
@@ -0,0 +1,158 @@
+package org.openjdk.jmc.agent.test;
+
+import org.junit.Test;
+import org.objectweb.asm.ClassWriter;
+import org.objectweb.asm.Label;
+import org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.Opcodes;
+import org.openjdk.jmc.agent.TransformRegistry;
+import org.openjdk.jmc.agent.Transformer;
+import org.openjdk.jmc.agent.impl.DefaultTransformRegistry;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class TestCompressedFrameTransformation implements Opcodes {
+
+	private static final String XML_EVENT_DESCRIPTION = "<jfragent>" //
+			+ "<events>" // 
+			+ "<event id=\"test.compressed.frame.transformation\">" // 
+			+ "<name>Test Compressed Frame Transformation</name>" //
+			+ "<description>agent instrumentation should be compatible with compressed frame types</description>" //
+			+ "<path>test/frames</path>" //
+			+ "<class>Target</class>" //
+			+ "<method>" //
+			+ "<name>echo</name>" //
+			+ "<descriptor>(I)I</descriptor>" // 
+			+ "</method>" //
+			+ "</event>" //
+			+ "</events>" //
+			+ "</jfragent>";
+
+	// Class generator using asm lib. This makes sure we get the original bytecode that really consists a compressed frame.
+	public static byte[] generateClassBuffer(int frameType) {
+		ClassWriter classWriter = new ClassWriter(0);
+		MethodVisitor methodVisitor;
+
+		// class Target {
+		classWriter.visit(V11, ACC_PUBLIC | ACC_SUPER, "Target", null, "java/lang/Object", null);
+
+		{
+			// public Target() {
+			methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
+			methodVisitor.visitCode();
+			Label label0 = new Label();
+			methodVisitor.visitLabel(label0);
+			methodVisitor.visitVarInsn(ALOAD, 0);
+			methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false); // super()
+			methodVisitor.visitInsn(RETURN);
+			Label label1 = new Label();
+			methodVisitor.visitLabel(label1);
+			methodVisitor.visitLocalVariable("this", "LTarget;", null, label0, label1, 0);
+			methodVisitor.visitMaxs(1, 1);
+			methodVisitor.visitEnd(); // }
+		}
+		{
+			// public int echo(int arg)
+			methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "echo", "(I)I", null, null);
+			methodVisitor.visitCode();
+			Label label0 = new Label();
+			methodVisitor.visitLabel(label0);
+			methodVisitor.visitVarInsn(ILOAD, 1);
+			methodVisitor.visitIntInsn(BIPUSH, 42);
+			Label label1 = new Label();
+			methodVisitor.visitJumpInsn(IF_ICMPLE, label1); // if (arg > 42) {
+			Label label2 = new Label();
+			methodVisitor.visitLabel(label2);
+			methodVisitor.visitIntInsn(BIPUSH, 42); // return 42
+			methodVisitor.visitInsn(IRETURN); // }
+			methodVisitor.visitLabel(label1);
+			methodVisitor.visitFrame(frameType, 0, null, 0, null);
+			methodVisitor.visitVarInsn(ILOAD, 1); // return arg
+			methodVisitor.visitInsn(IRETURN); // }
+			Label label3 = new Label();
+			methodVisitor.visitLabel(label3);
+			methodVisitor.visitLocalVariable("this", "LTarget;", null, label0, label3, 0);
+			methodVisitor.visitLocalVariable("arg", "I", null, label0, label3, 1);
+			methodVisitor.visitMaxs(2, 2);
+			methodVisitor.visitEnd();
+		}
+		classWriter.visitEnd(); // }
+
+		return classWriter.toByteArray();
+	}
+
+	private void testCompressedFrameNoVerificationError(int frameType) throws Exception {
+		TestClassLoader tcl = new TestClassLoader(TestCompressedFrameTransformation.class.getClassLoader());
+		byte[] classBuffer = generateClassBuffer(frameType);
+
+		TransformRegistry registry = DefaultTransformRegistry.empty();
+		Transformer transformer = new Transformer(registry);
+
+		registry.modify(XML_EVENT_DESCRIPTION);
+		classBuffer = transformer.transform(tcl, "Target", null, null, classBuffer);
+
+		tcl.putClassBuffer("Target", classBuffer);
+		tcl.loadClass("Target");
+
+		// No need to run the actual code as we're just making sure there is no verification errors
+	}
+
+	@Test
+	public void testSameFrameNoVerificationError() throws Exception {
+		testCompressedFrameNoVerificationError(F_SAME);
+	}
+
+	@Test
+	public void testChopFrameNoVerificationError() throws Exception {
+		testCompressedFrameNoVerificationError(F_CHOP);
+	}
+
+	@Test
+	public void testAppendFrameNoVerificationError() throws Exception {
+		testCompressedFrameNoVerificationError(F_APPEND);
+	}
+
+	static class TestClassLoader extends ClassLoader {
+
+		private Map<String, byte[]> classBuffers = new HashMap<>();
+
+		public TestClassLoader(ClassLoader parent) {
+			super(parent);
+		}
+
+		public void putClassBuffer(String name, byte[] bytes) {
+			classBuffers.put(name, bytes);
+		}
+
+		@Override
+		public Class<?> loadClass(String name) throws ClassNotFoundException {
+			if (classBuffers.containsKey(name)) {
+				return loadClass(name, false);
+			}
+
+			return getParent().loadClass(name);
+		}
+
+		@Override
+		protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
+			Class<?> clazz = findClass(name);
+
+			if (resolve) {
+				resolveClass(clazz);
+			}
+
+			return clazz;
+		}
+
+		@Override
+		protected Class<?> findClass(String name) throws ClassNotFoundException {
+			byte[] bytes = classBuffers.get(name);
+			return defineClass(name, bytes, 0, bytes.length);
+		}
+	}
+
+	public void test() {
+		//Dummy method for instrumentation
+	}
+}
