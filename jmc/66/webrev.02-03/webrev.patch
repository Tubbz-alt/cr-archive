diff a/agent/.classpath b/agent/.classpath
--- a/agent/.classpath
+++ b/agent/.classpath
@@ -1,34 +1,35 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" output="target/classes" path="src/main/java">
-		<attributes>
-			<attribute name="optional" value="true"/>
-			<attribute name="maven.pomderived" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="src" output="target/test-classes" path="src/test/java">
-		<attributes>
-			<attribute name="optional" value="true"/>
-			<attribute name="maven.pomderived" value="true"/>
-			<attribute name="test" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry excluding="**" kind="src" output="target/test-classes" path="src/test/resources">
-		<attributes>
-			<attribute name="optional" value="true"/>
-			<attribute name="maven.pomderived" value="true"/>
-			<attribute name="test" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
-		<attributes>
-			<attribute name="maven.pomderived" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7">
-		<attributes>
-			<attribute name="maven.pomderived" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="output" path="target/classes"/>
-</classpath>
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" output="target/classes" path="src/main/java">
+		<attributes>
+			<attribute name="optional" value="true"/>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="src" path="src/main/resources"/>
+	<classpathentry kind="src" output="target/test-classes" path="src/test/java">
+		<attributes>
+			<attribute name="test" value="true"/>
+			<attribute name="optional" value="true"/>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry excluding="**" kind="src" output="target/test-classes" path="src/test/resources">
+		<attributes>
+			<attribute name="test" value="true"/>
+			<attribute name="optional" value="true"/>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
+		<attributes>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7">
+		<attributes>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="output" path="target/classes"/>
+</classpath>
diff a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
@@ -112,20 +112,20 @@
 
 	public static TransformRegistry empty() {
 		return new DefaultTransformRegistry();
 	}
 
-	private static void validateProbeDefinition(InputStream in) throws XMLStreamException {
+	public static void validateProbeDefinition(InputStream in) throws XMLStreamException {
 		try {
 			Validator validator = PROBE_SCHEMA.newValidator();
 			validator.validate(new StreamSource(in));
 		} catch (IOException | SAXException e) {
 			throw new XMLStreamException(e);
 		}
 	}
 
-	private static void validateProbeDefinition(String configuration) throws XMLStreamException {
+	public static void validateProbeDefinition(String configuration) throws XMLStreamException {
 		validateProbeDefinition(new ByteArrayInputStream(configuration.getBytes()));
 	}
 
 	public static TransformRegistry from(InputStream in) throws XMLStreamException {
 		byte[] buf;
diff a/agent/src/main/resources/org/openjdk/jmc/agent/impl/jfrprobes_schema.xsd b/agent/src/main/resources/org/openjdk/jmc/agent/impl/jfrprobes_schema.xsd
--- a/agent/src/main/resources/org/openjdk/jmc/agent/impl/jfrprobes_schema.xsd
+++ b/agent/src/main/resources/org/openjdk/jmc/agent/impl/jfrprobes_schema.xsd
@@ -1,17 +1,17 @@
-<?xml version="1.0" encoding="utf-8"?>
+<?xml version="1.0" encoding="utf-8" ?>
 <xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
-	<xs:element type="jfrAgentType" name="jfragent"/>
+	<xs:element type="jfrAgentType" name="jfragent" />
 
 	<xs:complexType name="jfrAgentType">
 		<xs:all>
 			<xs:element type="configType" name="config" minOccurs="0">
 				<xs:annotation>
 					<xs:documentation>Global configuration options</xs:documentation>
 				</xs:annotation>
 			</xs:element>
-			<xs:element type="eventsType" name="events" minOccurs="0"/>
+			<xs:element type="eventsType" name="events" minOccurs="0" />
 		</xs:all>
 	</xs:complexType>
 
 	<xs:complexType name="configType">
 		<xs:all>
@@ -20,11 +20,11 @@
 					<xs:documentation>This is the prefix to use when generating event class names</xs:documentation>
 				</xs:annotation>
 			</xs:element>
 			<xs:element type="xs:boolean" name="allowtostring" minOccurs="0">
 				<xs:annotation>
-					<xs:documentation>
+					<xs:documentation> 
 						Will allow the recording of arrays and object parameters as Strings. This will cause toString to
 						be called for array elements and objects other than strings, which in turn can cause trouble if
 						the toString method is badly implemented. Use with care.
 					</xs:documentation>
 				</xs:annotation>
@@ -39,180 +39,179 @@
 		</xs:all>
 	</xs:complexType>
 
 	<xs:complexType name="eventsType">
 		<xs:sequence>
-			<xs:element type="eventType" name="event" maxOccurs="unbounded" minOccurs="0"/>
+			<xs:element type="eventType" name="event" maxOccurs="unbounded" minOccurs="0" />
 		</xs:sequence>
 	</xs:complexType>
 
 	<xs:complexType name="eventType">
 		<xs:all>
-			<xs:element type="xs:string" name="name"/>
-			<xs:element type="classType" name="class"/>
-			<xs:element type="methodType" name="method"/>
-			<xs:element type="xs:string" name="description" minOccurs="0"/>
-			<xs:element type="pathType" name="path" minOccurs="0"/>
-			<xs:element type="xs:boolean" name="stacktrace" minOccurs="0"/>
-			<xs:element type="xs:boolean" name="rethrow" minOccurs="0"/>
-			<xs:element type="locationType" name="location" minOccurs="0"/>
-			<xs:element type="fieldsType" name="fields" minOccurs="0"/>
+			<xs:element type="xs:string" name="name" />
+			<xs:element type="classType" name="class" />
+			<xs:element type="methodType" name="method" />
+			<xs:element type="xs:string" name="description" minOccurs="0" />
+			<xs:element type="pathType" name="path" minOccurs="0" />
+			<xs:element type="xs:boolean" name="stacktrace" minOccurs="0" />
+			<xs:element type="xs:boolean" name="rethrow" minOccurs="0" />
+			<xs:element type="locationType" name="location" minOccurs="0" />
+			<xs:element type="fieldsType" name="fields" minOccurs="0" />
 		</xs:all>
-		<xs:attribute type="xs:string" name="id" use="required"/>
+		<xs:attribute type="xs:string" name="id" use="required" />
 	</xs:complexType>
 
 	<xs:simpleType name="classType">
 		<xs:annotation>
 			<xs:documentation>the fully qualified class name (FQCN) of the class to be transformed</xs:documentation>
 		</xs:annotation>
 		<xs:restriction base="xs:normalizedString">
-			<xs:pattern value="([a-zA-Z_$][a-zA-Z0-9_$]*\.)*([a-zA-Z_$][a-zA-Z0-9_$]*)"/>
-			<xs:whiteSpace value="collapse"/>
+			<xs:pattern value="([a-zA-Z_$][a-zA-Z0-9_$]*\.)*([a-zA-Z_$][a-zA-Z0-9_$]*)" />
+			<xs:whiteSpace value="collapse" />
 		</xs:restriction>
 	</xs:simpleType>
 
 	<xs:complexType name="methodType">
 		<xs:all>
-			<xs:element type="methodNameType" name="name"/>
-			<xs:element type="descriptorType" name="descriptor"/>
-			<xs:element type="parametersType" name="parameters" minOccurs="0"/>
-			<xs:element type="returnValueType" name="returnvalue" minOccurs="0"/>
+			<xs:element type="methodNameType" name="name" />
+			<xs:element type="descriptorType" name="descriptor" />
+			<xs:element type="parametersType" name="parameters" minOccurs="0" />
+			<xs:element type="returnValueType" name="returnvalue" minOccurs="0" />
 		</xs:all>
 	</xs:complexType>
 
 	<xs:simpleType name="methodNameType">
 		<xs:restriction base="xs:normalizedString">
-			<xs:pattern value="[a-zA-Z_$][a-zA-Z0-9_$]*"/>
-			<xs:whiteSpace value="collapse"/>
+			<xs:pattern value="[a-zA-Z_$][a-zA-Z0-9_$]*" />
+			<xs:whiteSpace value="collapse" />
 		</xs:restriction>
 	</xs:simpleType>
 
 	<xs:simpleType name="descriptorType">
 		<xs:annotation>
 			<xs:documentation>see ยง4.3.3 in Java Virtual Machine Specification</xs:documentation>
 		</xs:annotation>
 		<xs:restriction base="xs:normalizedString">
-			<xs:pattern
-					value="\((\[*([BCDFIJSZ]|L([a-zA-Z_$][a-zA-Z0-9_$]*/)*[a-zA-Z_$][a-zA-Z0-9_$]*;))*\)(V|\[*([BCDFIJSZ]|L([a-zA-Z_$][a-zA-Z0-9_$]*/)*[a-zA-Z_$][a-zA-Z0-9_$]*;))"/>
-			<xs:whiteSpace value="collapse"/>
+			<xs:pattern value="\((\[*([BCDFIJSZ]|L([a-zA-Z_$][a-zA-Z0-9_$]*/)*[a-zA-Z_$][a-zA-Z0-9_$]*;))*\)(V|\[*([BCDFIJSZ]|L([a-zA-Z_$][a-zA-Z0-9_$]*/)*[a-zA-Z_$][a-zA-Z0-9_$]*;))" />
+			<xs:whiteSpace value="collapse" />
 		</xs:restriction>
 	</xs:simpleType>
 
 	<xs:complexType name="parametersType">
 		<xs:annotation>
 			<xs:documentation>only if we allow toString</xs:documentation>
 		</xs:annotation>
 		<xs:sequence>
-			<xs:element type="parameterType" name="parameter" maxOccurs="unbounded" minOccurs="0"/>
+			<xs:element type="parameterType" name="parameter" maxOccurs="unbounded" minOccurs="0" />
 		</xs:sequence>
 	</xs:complexType>
 
 	<xs:complexType name="parameterType">
 		<xs:all>
-			<xs:element type="xs:string" name="name"/>
-			<xs:element type="xs:string" name="description" minOccurs="0"/>
-			<xs:element type="contentTypeType" name="contenttype" minOccurs="0"/>
-			<xs:element type="relationKeyType" name="relationkey" minOccurs="0"/>
-			<xs:element type="converterType" name="converter" minOccurs="0"/>
+			<xs:element type="xs:string" name="name" />
+			<xs:element type="xs:string" name="description" minOccurs="0" />
+			<xs:element type="contentTypeType" name="contenttype" minOccurs="0" />
+			<xs:element type="relationKeyType" name="relationkey" minOccurs="0" />
+			<xs:element type="converterType" name="converter" minOccurs="0" />
 		</xs:all>
-		<xs:attribute type="xs:nonNegativeInteger" name="index" use="required"/>
+		<xs:attribute type="xs:nonNegativeInteger" name="index" use="required" />
 	</xs:complexType>
 
 	<xs:simpleType name="contentTypeType">
 		<xs:annotation>
 			<xs:documentation>see com.oracle.jrockit.jfr.ContentType</xs:documentation>
 		</xs:annotation>
 		<xs:restriction base="xs:normalizedString">
-			<xs:enumeration value="None"/>
-			<xs:enumeration value="Bytes"/>
-			<xs:enumeration value="Timestamp"/>
-			<xs:enumeration value="Millis"/>
-			<xs:enumeration value="Nanos"/>
-			<xs:enumeration value="Ticks"/>
-			<xs:enumeration value="Address"/>
-			<xs:enumeration value="OSThread"/>
-			<xs:enumeration value="JavaThread"/>
-			<xs:enumeration value="StackTrace"/>
-			<xs:enumeration value="Class"/>
-			<xs:enumeration value="Percentage"/>
-			<xs:whiteSpace value="collapse"/>
+			<xs:enumeration value="None" />
+			<xs:enumeration value="Bytes" />
+			<xs:enumeration value="Timestamp" />
+			<xs:enumeration value="Millis" />
+			<xs:enumeration value="Nanos" />
+			<xs:enumeration value="Ticks" />
+			<xs:enumeration value="Address" />
+			<xs:enumeration value="OSThread" />
+			<xs:enumeration value="JavaThread" />
+			<xs:enumeration value="StackTrace" />
+			<xs:enumeration value="Class" />
+			<xs:enumeration value="Percentage" />
+			<xs:whiteSpace value="collapse" />
 		</xs:restriction>
 	</xs:simpleType>
 
 	<xs:simpleType name="relationKeyType">
 		<xs:annotation>
 			<xs:documentation>
 				a unique URI signifying a relationship between different events based on the values of specific
 				fields
 			</xs:documentation>
 		</xs:annotation>
-		<xs:restriction base="xs:anyURI"/>
+		<xs:restriction base="xs:anyURI" />
 	</xs:simpleType>
 
 	<xs:simpleType name="converterType">
 		<xs:annotation>
 			<xs:documentation>the fully qualified class name (FQCN) of the converter used</xs:documentation>
 		</xs:annotation>
-		<xs:restriction base="classType"/>
+		<xs:restriction base="classType" />
 	</xs:simpleType>
 
 	<xs:complexType name="returnValueType">
 		<xs:annotation>
 			<xs:documentation>This will only work if we allow toString</xs:documentation>
 		</xs:annotation>
 		<xs:all>
-			<xs:element type="xs:string" name="description" minOccurs="0"/>
-			<xs:element type="contentTypeType" name="contenttype" minOccurs="0"/>
-			<xs:element type="relationKeyType" name="relationkey" minOccurs="0"/>
-			<xs:element type="converterType" name="converter" minOccurs="0"/>
+			<xs:element type="xs:string" name="description" minOccurs="0" />
+			<xs:element type="contentTypeType" name="contenttype" minOccurs="0" />
+			<xs:element type="relationKeyType" name="relationkey" minOccurs="0" />
+			<xs:element type="converterType" name="converter" minOccurs="0" />
 		</xs:all>
 	</xs:complexType>
 
 	<xs:simpleType name="pathType">
 		<xs:restriction base="xs:normalizedString">
-			<xs:pattern value="([^/]+/)*([^/]*)"/>
-			<xs:whiteSpace value="collapse"/>
+			<xs:pattern value="([^/]+/)*([^/]*)" />
+			<xs:whiteSpace value="collapse" />
 		</xs:restriction>
 	</xs:simpleType>
 
 	<xs:simpleType name="locationType">
 		<xs:annotation>
 			<xs:documentation>location {ENTRY, EXIT, WRAP}</xs:documentation>
 		</xs:annotation>
 		<xs:restriction base="xs:normalizedString">
-			<xs:enumeration value="ENTRY"/>
-			<xs:enumeration value="EXIT"/>
-			<xs:enumeration value="WRAP"/>
-			<xs:whiteSpace value="collapse"/>
+			<xs:enumeration value="ENTRY" />
+			<xs:enumeration value="EXIT" />
+			<xs:enumeration value="WRAP" />
+			<xs:whiteSpace value="collapse" />
 		</xs:restriction>
 	</xs:simpleType>
 
 	<xs:complexType name="fieldsType">
 		<xs:sequence>
-			<xs:element type="fieldType" name="field" maxOccurs="unbounded" minOccurs="0"/>
+			<xs:element type="fieldType" name="field" maxOccurs="unbounded" minOccurs="0" />
 		</xs:sequence>
 	</xs:complexType>
 
 	<xs:complexType name="fieldType">
-		<xs:sequence>
-			<xs:element type="xs:string" name="name"/>
-			<xs:element type="xs:string" name="description"/>
-			<xs:element type="expressionType" name="expression"/>
-			<xs:element type="contentTypeType" name="contenttype" minOccurs="0"/>
-			<xs:element type="relationKeyType" name="relationkey" minOccurs="0"/>
-			<xs:element type="converterType" name="converter" minOccurs="0"/>
-		</xs:sequence>
+		<xs:all>
+			<xs:element type="xs:string" name="name" />
+			<xs:element type="expressionType" name="expression" />
+			<xs:element type="xs:string" name="description" minOccurs="0" />
+			<xs:element type="contentTypeType" name="contenttype" minOccurs="0" />
+			<xs:element type="relationKeyType" name="relationkey" minOccurs="0" />
+			<xs:element type="converterType" name="converter" minOccurs="0" />
+		</xs:all>
 	</xs:complexType>
 
 	<xs:simpleType name="expressionType">
 		<xs:annotation>
 			<xs:documentation>
 				an expression in a subset of primary expressions (see ยง15.8 in Java Language Specification) to be
 				evaluated
 			</xs:documentation>
 		</xs:annotation>
 		<xs:restriction base="xs:normalizedString">
-			<xs:pattern value="([a-zA-Z_$][a-zA-Z0-9_$]*\.)*([a-zA-Z_$][a-zA-Z0-9_$]*)(\.[a-zA-Z_$][a-zA-Z_$]*)*"/>
-			<xs:whiteSpace value="collapse"/>
+			<xs:pattern value="([a-zA-Z_$][a-zA-Z0-9_$]*\.)*([a-zA-Z_$][a-zA-Z0-9_$]*)(\.[a-zA-Z_$][a-zA-Z_$]*)*" />
+			<xs:whiteSpace value="collapse" />
 		</xs:restriction>
 	</xs:simpleType>
 </xs:schema>
diff a/agent/src/test/java/org/openjdk/jmc/agent/test/AllTests.java b/agent/src/test/java/org/openjdk/jmc/agent/test/AllTests.java
--- a/agent/src/test/java/org/openjdk/jmc/agent/test/AllTests.java
+++ b/agent/src/test/java/org/openjdk/jmc/agent/test/AllTests.java
@@ -36,9 +36,9 @@
 import org.junit.runners.Suite;
 import org.junit.runners.Suite.SuiteClasses;
 import org.openjdk.jmc.agent.converters.test.TestConverterTransforms;
 
 @RunWith(Suite.class)
-@SuiteClasses({TestDefaultTransformRegistry.class, TestUtils.class, TestJFRTransformer.class, TestConverterTransforms.class})
+@SuiteClasses({TestDefaultTransformRegistry.class, TestUtils.class, TestJFRTransformer.class, TestConverterTransforms.class, TestProbeDefinitionValidation.class})
 
 public class AllTests {
 }
diff a/agent/src/test/java/org/openjdk/jmc/agent/test/TestProbeDefinitionValidation.java b/agent/src/test/java/org/openjdk/jmc/agent/test/TestProbeDefinitionValidation.java
--- /dev/null
+++ b/agent/src/test/java/org/openjdk/jmc/agent/test/TestProbeDefinitionValidation.java
@@ -0,0 +1,184 @@
+package org.openjdk.jmc.agent.test;
+
+import org.junit.Test;
+import org.openjdk.jmc.agent.impl.DefaultTransformRegistry;
+
+import javax.xml.stream.XMLStreamException;
+import java.text.MessageFormat;
+import java.util.Arrays;
+
+public class TestProbeDefinitionValidation {
+	private final String GLOBAL_PREFIX = "<jfragent><events>";
+	private final String GLOBAL_POSTFIX = "</events></jfragent>";
+
+	@Test
+	public void testValidatingProbeDefinition() throws XMLStreamException {
+		// a partially defined event with all optional elements unset
+		String probe = "<event id=\"demo.event2\">\n" // 
+				+ "    <name>Event 2</name>\n" //
+				+ "    <class>org.company.project.MyDemoClass</class>\n" // 
+				+ "    <method>\n" // 
+				+ "        <name>targetFunction</name>\n" //
+				+ "        <descriptor>(Ljava/lang/String;)V</descriptor>\n" // 
+				+ "    </method>\n" //
+				+ "</event>";
+
+		DefaultTransformRegistry.validateProbeDefinition(GLOBAL_PREFIX + probe + GLOBAL_POSTFIX);
+	}
+
+	@Test
+	public void testValidatingFullyDefinedProbe() throws XMLStreamException {
+		// a fully defined event with all optional elements set
+		String probe = "<event id=\"demo.event1\">\n" + "            <name>Event 1</name>\n"
+				+ "            <class>com.company.project.MyDemoClass</class>\n"
+				+ "            <description>demo event #1</description>\n" + "            <path>demo</path>\n"
+				+ "            <stacktrace>true</stacktrace>\n" + "            <method>\n"
+				+ "                <name>targetFunction</name>\n"
+				+ "                <descriptor>(Ljava/lang/String;)I</descriptor>\n" + "                <parameters>\n"
+				+ "                    <parameter index=\"0\">\n" + "                        <name>param 0</name>\n"
+				+ "                        <description>the first parameter</description>\n"
+				+ "                        <contenttype>None</contenttype>\n"
+				+ "                        <relationkey>http://project.company.com/relation_id/parameter#0</relationkey>\n"
+				+ "                        <converter>com.company.project.MyConverter</converter>\n"
+				+ "                    </parameter>\n" + "                </parameters>\n"
+				+ "                <returnvalue>\n"
+				+ "                    <description>the return value</description>\n"
+				+ "                    <contenttype>None</contenttype>\n"
+				+ "                    <relationkey>http://project.company.com/relation_id/parameter#0</relationkey>\n"
+				+ "                    <converter>com.company.project.MyConverter</converter>\n"
+				+ "                </returnvalue>\n" + "            </method>\n"
+				+ "            <location>WRAP</location>\n" + "            <fields>\n" + "                <field>\n"
+				+ "                    <name>count</name>\n"
+				+ "                    <description>current value of 'count' member variable</description>\n"
+				+ "                    <expression>com.company.product.MyClass.this</expression>\n"
+				+ "                    <contenttype>None</contenttype>\n"
+				+ "                    <relationkey>http://project.company.com/relation_id/field#0</relationkey>\n"
+				+ "                    <converter>com.company.project.MyConverter</converter>\n"
+				+ "                </field>\n" + "            </fields>\n" + "        </event>";
+
+		DefaultTransformRegistry.validateProbeDefinition(GLOBAL_PREFIX + probe + GLOBAL_POSTFIX);
+	}
+
+	@Test(expected = XMLStreamException.class)
+	public void testValidatingEmptyString() throws XMLStreamException {
+		DefaultTransformRegistry.validateProbeDefinition("");
+	}
+
+	@Test(expected = XMLStreamException.class)
+	public void testValidatingNonXmlInput() throws XMLStreamException {
+		DefaultTransformRegistry.validateProbeDefinition("This is not an XML string");
+	}
+
+	@Test
+	public void testValidatingCorrectClassNames() throws XMLStreamException {
+		String probe = "<event id=\"demo.event2\">\n" // 
+				+ "    <name>Event 2</name>\n" //
+				+ "    <class>{0}</class>\n" // 
+				+ "    <method>\n" // 
+				+ "        <name>targetFunction</name>\n" //
+				+ "        <descriptor>(Ljava/lang/String;)V</descriptor>\n" // 
+				+ "    </method>\n" //
+				+ "</event>";
+
+		for (String clazz : Arrays
+				.asList("MyClass", "pkg_name.MyClass", "com.company.project.MyClass", "MyClass$MyInnerClass")) {
+			DefaultTransformRegistry.validateProbeDefinition(GLOBAL_PREFIX + MessageFormat.format(probe, clazz) + GLOBAL_POSTFIX);
+		}
+	}
+
+	@Test(expected = XMLStreamException.class)
+	public void testValidatingEmptyClassName() throws XMLStreamException {
+		String probe = "<event id=\"demo.event2\">\n" // 
+				+ "    <name>Event 2</name>\n" //
+				+ "    <method>\n" // 
+				+ "        <name>targetFunction</name>\n" //
+				+ "        <descriptor>(Ljava/lang/String;)V</descriptor>\n" // 
+				+ "    </method>\n" //
+				+ "</event>";
+
+		DefaultTransformRegistry.validateProbeDefinition(GLOBAL_PREFIX + probe + GLOBAL_POSTFIX);
+	}
+
+	@Test(expected = XMLStreamException.class)
+	public void testValidatingIncorrectClassPattern() throws XMLStreamException {
+		String probe = "<event id=\"demo.event2\">\n" // 
+				+ "    <name>Event 2</name>\n" //
+				+ "    <class>not a validate full-qualified-class-name</class>\n" //
+				+ "    <method>\n" // 
+				+ "        <name>targetFunction</name>\n" //
+				+ "        <descriptor>(Ljava/lang/String;)V</descriptor>\n" // 
+				+ "    </method>\n" //
+				+ "</event>";
+
+		DefaultTransformRegistry.validateProbeDefinition(GLOBAL_PREFIX + probe + GLOBAL_POSTFIX);
+	}
+
+	@Test
+	public void testValidatingMethodDescriptor() throws XMLStreamException {
+		String probe = "<event id=\"demo.event2\">\n" // 
+				+ "    <name>Event 2</name>\n" //
+				+ "    <class>org.company.project.MyDemoClass</class>\n" // 
+				+ "    <method>\n" // 
+				+ "        <name>targetFunction</name>\n" //
+				+ "        <descriptor>{0}</descriptor>\n" // 
+				+ "    </method>\n" //
+				+ "</event>";
+
+		for (String descriptor : Arrays.asList("()D", "()V", // 
+				"(Ljava/lang/String;)V", "(Ljava/lang/String;J)I", //
+				"([Lcom/company/project/MyClass;)V", "([[Lcom/company/project/MyClass;)V", //
+				"()[D", "()[[D")) {
+			DefaultTransformRegistry.validateProbeDefinition(GLOBAL_PREFIX + MessageFormat.format(probe, descriptor) + GLOBAL_POSTFIX);
+		}
+	}
+
+	@Test(expected = XMLStreamException.class)
+	public void testValidatingEmptyDescriptor() throws XMLStreamException {
+		String probe = "<event id=\"demo.event2\">\n" // 
+				+ "    <name>Event 2</name>\n" //
+				+ "    <class>org.company.project.MyDemoClass</class>" //
+				+ "    <method>\n" // 
+				+ "        <name>targetFunction</name>\n" //
+				+ "    </method>\n" //
+				+ "</event>";
+
+		DefaultTransformRegistry.validateProbeDefinition(GLOBAL_PREFIX + probe + GLOBAL_POSTFIX);
+	}
+
+	@Test(expected = XMLStreamException.class)
+	public void testValidatingIncorrectDescriptor() throws XMLStreamException {
+		String probe = "<event id=\"demo.event2\">\n" // 
+				+ "    <name>Event 2</name>\n" //
+				+ "    <class>org.company.project.MyDemoClass</class>" //
+				+ "    <method>\n" // 
+				+ "        <name>targetFunction</name>\n" //
+				+ "        <descriptor>not a valid descriptor</descriptor>\n" // 
+				+ "    </method>\n" //
+				+ "</event>";
+
+		DefaultTransformRegistry.validateProbeDefinition(GLOBAL_PREFIX + probe + GLOBAL_POSTFIX);
+	}
+
+	@Test
+	public void testValidatingExpressions() throws XMLStreamException {
+		String probe = "<event id=\"demo.event2\">\n" // 
+				+ "    <name>Event 2</name>\n" //
+				+ "    <class>org.company.project.MyDemoClass</class>\n" // 
+				+ "    <method>\n" // 
+				+ "        <name>targetFunction</name>\n" //
+				+ "        <descriptor>(Ljava/lang/String;)V</descriptor>\n" // 
+				+ "    </method>\n" //
+				+ "    <fields>" //
+				+ "        <field>" //
+				+ "            <name>a variable</name>" //
+				+ "            <expression>${0}</expression>" //
+				+ "        </field>" //
+				+ "    </fields>" //
+				+ "</event>";
+
+		for (String expression : Arrays
+				.asList("this", "this.field", "MyClass.this.field", "field", "super.field", "STATIC_FIELD")) {
+			DefaultTransformRegistry.validateProbeDefinition(GLOBAL_PREFIX + MessageFormat.format(probe, expression) + GLOBAL_POSTFIX);
+		}
+	}
+}
diff a/agent/src/test/resources/org/openjdk/jmc/agent/test/jfrprobes_template.xml b/agent/src/test/resources/org/openjdk/jmc/agent/test/jfrprobes_template.xml
--- a/agent/src/test/resources/org/openjdk/jmc/agent/test/jfrprobes_template.xml
+++ b/agent/src/test/resources/org/openjdk/jmc/agent/test/jfrprobes_template.xml
@@ -34,46 +34,51 @@
 <jfragent>
 	<!-- Global configuration options -->
 	<config>
 		<!-- This is the prefix to use when generating event class names -->
 		<classprefix>__JFREvent</classprefix>
-		<!-- Will allow the recording of arrays and object parameters as Strings. This will cause toString to be called
-		     for array elements and objects other than strings, which in turn can cause trouble if the toString 
-		     method is badly implemented. Use with care. -->
+		<!-- Will allow the recording of arrays and object parameters as Strings. 
+			This will cause toString to be called for array elements and objects other 
+			than strings, which in turn can cause trouble if the toString method is badly 
+			implemented. Use with care. -->
 		<allowtostring>true</allowtostring>
-		<!-- Allows converters to be used. If a converter is badly implemented, you are on your own. -->
+		<!-- Allows converters to be used. If a converter is badly implemented, 
+			you are on your own. -->
 		<allowconverter>true</allowconverter>
 	</config>
 	<events>
 		<event id="demo.jfr.test1">
 			<name>JFR Hello World Event 1 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent.</description>
+			<description>Defined in the xml file and added by the agent.
+			</description>
 			<path>demo/jfrhelloworldevent1</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printHelloWorldJFR1</name>
 				<descriptor>()V</descriptor>
 			</method>
-			<!-- location {ENTRY, EXIT, WRAP}-->
+			<!-- location {ENTRY, EXIT, WRAP} -->
 			<location>WRAP</location>
 		</event>
 		<event id="demo.jfr.test2">
 			<name>JFR Hello World Event 2 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the parameters.</description>
+			<description>Defined in the xml file and added by the agent. Should
+				record the parameters.
+			</description>
 			<path>demo/jfrhelloworldevent2</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printHelloWorldJFR2</name>
 				<descriptor>(Ljava/lang/String;J)I</descriptor>
 				<parameters>
 					<parameter index="0">
 						<name>String Attribute</name>
 						<description>The first parameter</description>
-						<!-- See com.oracle.jrockit.jfr.ContentType
-							 {None, Bytes, Timestamp, Millis, Nanos, Ticks, Address, OSThread, JavaThread, StackTrace, Class, Percentage} -->
+						<!-- See com.oracle.jrockit.jfr.ContentType {None, Bytes, Timestamp, 
+							Millis, Nanos, Ticks, Address, OSThread, JavaThread, StackTrace, Class, Percentage} -->
 						<contenttype>None</contenttype>
 					</parameter>
 					<parameter index="1">
 						<name>Long Attribute</name>
 						<description>The second parameter</description>
@@ -83,16 +88,17 @@
 				<returnvalue>
 					<description>The return value</description>
 					<contenttype>None</contenttype>
 				</returnvalue>
 			</method>
-			<!-- location {ENTRY, EXIT, WRAP}-->
+			<!-- location {ENTRY, EXIT, WRAP} -->
 			<location>WRAP</location>
 		</event>
 		<event id="demo.jfr.test11">
 			<name>JFR Hello World Event 11 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the value of static reference
+			<description>Defined in the xml file and added by the agent. Should
+				record the value of static reference
 				'STATIC_STRING_FIELD'
 			</description>
 			<path>demo/jfrhelloworldevent11</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
@@ -101,29 +107,38 @@
 				<descriptor>()V</descriptor>
 			</method>
 			<fields>
 				<field>
 					<name>'STATIC_STRING_FIELD'</name>
-					<description>Capturing static field with simple field name</description>
+					<description>Capturing static field with simple field name
+					</description>
 					<expression>STATIC_STRING_FIELD</expression>
 				</field>
 				<field>
 					<name>'InstrumentMe.STATIC_STRING_FIELD'</name>
-					<description>Capturing static field with class name prefixed field name</description>
+					<description>Capturing static field with class name prefixed field
+						name
+					</description>
 					<expression>InstrumentMe.STATIC_STRING_FIELD</expression>
 				</field>
 				<field>
-					<name>'org.openjdk.jmc.agent.test.InstrumentMe.STATIC_STRING_FIELD'</name>
-					<description>Capturing static field with full qualified class prefixed name</description>
-					<expression>org.openjdk.jmc.agent.test.InstrumentMe.STATIC_STRING_FIELD</expression>
+					<name>'org.openjdk.jmc.agent.test.InstrumentMe.STATIC_STRING_FIELD'
+					</name>
+					<description>Capturing static field with full qualified class
+						prefixed name
+					</description>
+					<expression>org.openjdk.jmc.agent.test.InstrumentMe.STATIC_STRING_FIELD
+					</expression>
 				</field>
 			</fields>
 		</event>
 		<event id="demo.jfr.test12">
 			<name>JFR Hello World Event 12 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the values of
-				'STATIC_OBJECT_FIELD.STATIC_STRING_FIELD' and 'STATIC_OBJECT_FIELD.instanceStringField'
+			<description>Defined in the xml file and added by the agent. Should
+				record the values of
+				'STATIC_OBJECT_FIELD.STATIC_STRING_FIELD' and
+				'STATIC_OBJECT_FIELD.instanceStringField'
 			</description>
 			<path>demo/jfrhelloworldevent12</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
@@ -131,24 +146,28 @@
 				<descriptor>()V</descriptor>
 			</method>
 			<fields>
 				<field>
 					<name>'STATIC_OBJECT_FIELD.STATIC_STRING_FIELD'</name>
-					<description>Capturing static field on a object reference</description>
+					<description>Capturing static field on a object reference
+					</description>
 					<expression>STATIC_OBJECT_FIELD.STATIC_STRING_FIELD</expression>
 				</field>
 				<field>
 					<name>'STATIC_OBJECT_FIELD.instanceStringField'</name>
-					<description>Capturing non-static field on a object reference</description>
+					<description>Capturing non-static field on a object reference
+					</description>
 					<expression>STATIC_OBJECT_FIELD.instanceStringField</expression>
 				</field>
 			</fields>
 		</event>
 		<event id="demo.jfr.test13">
 			<name>JFR Hello World Event 13 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the values of static
-				'STATIC_NULL_FIELD.STATIC_STRING_FIELD' and 'STATIC_NULL_FIELD.instanceStringField'
+			<description>Defined in the xml file and added by the agent. Should
+				record the values of static
+				'STATIC_NULL_FIELD.STATIC_STRING_FIELD'
+				and 'STATIC_NULL_FIELD.instanceStringField'
 			</description>
 			<path>demo/jfrhelloworldevent13</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
@@ -156,36 +175,41 @@
 				<descriptor>()V</descriptor>
 			</method>
 			<fields>
 				<field>
 					<name>'STATIC_NULL_FIELD.STATIC_STRING_FIELD'</name>
-					<description>Capturing static field on a null object reference</description>
+					<description>Capturing static field on a null object reference
+					</description>
 					<expression>STATIC_NULL_FIELD.STATIC_STRING_FIELD</expression>
 				</field>
 				<field>
 					<name>'STATIC_NULL_FIELD.instanceStringField'</name>
-					<description>Capturing non-static field on a null object reference</description>
+					<description>Capturing non-static field on a null object reference
+					</description>
 					<expression>STATIC_NULL_FIELD.instanceStringField</expression>
 				</field>
 			</fields>
 		</event>
 		<event id="demo.jfr.testI1">
 			<name>JFR Hello World Instance Event 1 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent.</description>
+			<description>Defined in the xml file and added by the agent.
+			</description>
 			<path>demo/jfrhelloworldeventI1</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printInstanceHelloWorldJFR1</name>
 				<descriptor>()V</descriptor>
 			</method>
-			<!-- location {ENTRY, EXIT, WRAP}-->
+			<!-- location {ENTRY, EXIT, WRAP} -->
 			<location>WRAP</location>
 		</event>
 		<event id="demo.jfr.testI2">
 			<name>JFR Hello World Instance Event 2 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the parameters.</description>
+			<description>Defined in the xml file and added by the agent. Should
+				record the parameters.
+			</description>
 			<path>demo/jfrhelloworldeventI2</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printInstanceHelloWorldJFR2</name>
@@ -208,11 +232,13 @@
 				</returnvalue>
 			</method>
 		</event>
 		<event id="demo.jfr.testI3">
 			<name>JFR Hello World Instance Event 3 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the parameters.</description>
+			<description>Defined in the xml file and added by the agent. Should
+				record the parameters.
+			</description>
 			<path>demo/jfrhelloworldeventI3</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printInstanceHelloWorldJFR3</name>
@@ -227,11 +253,13 @@
 				</parameters>
 			</method>
 		</event>
 		<event id="demo.jfr.testI4">
 			<name>JFR Hello World Instance Event 4 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the parameters.</description>
+			<description>Defined in the xml file and added by the agent. Should
+				record the parameters.
+			</description>
 			<path>demo/jfrhelloworldeventI4</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printInstanceHelloWorldJFR4</name>
@@ -246,11 +274,13 @@
 				</parameters>
 			</method>
 		</event>
 		<event id="demo.jfr.testI5">
 			<name>JFR Hello World Instance Event 5 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the parameters.</description>
+			<description>Defined in the xml file and added by the agent. Should
+				record the parameters.
+			</description>
 			<path>demo/jfrhelloworldeventI5</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printInstanceHelloWorldJFR5</name>
@@ -265,11 +295,13 @@
 				</parameters>
 			</method>
 		</event>
 		<event id="demo.jfr.testI6">
 			<name>JFR Hello World Instance Event 6 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the return value.</description>
+			<description>Defined in the xml file and added by the agent. Should
+				record the return value.
+			</description>
 			<path>demo/jfrhelloworldeventI6</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printInstanceHelloWorldJFR6</name>
@@ -281,11 +313,12 @@
 				</returnvalue>
 			</method>
 		</event>
 		<event id="demo.jfr.testI7">
 			<name>JFR Hello World Instance Event 7 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. The original method contains a try-catch
+			<description>Defined in the xml file and added by the agent. The
+				original method contains a try-catch
 				clause.
 			</description>
 			<path>demo/jfrhelloworldeventI7</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
@@ -294,11 +327,12 @@
 				<descriptor>()V</descriptor>
 			</method>
 		</event>
 		<event id="demo.jfr.testI8">
 			<name>JFR Hello World Instance Event 8 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record even if an exception is raised.
+			<description>Defined in the xml file and added by the agent. Should
+				record even if an exception is raised.
 			</description>
 			<path>demo/jfrhelloworldeventI8</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
@@ -307,11 +341,12 @@
 			</method>
 			<rethrow>true</rethrow>
 		</event>
 		<event id="demo.jfr.testI9">
 			<name>JFR Hello World Instance Event 9 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should not record if an exception is raised.
+			<description>Defined in the xml file and added by the agent. Should
+				not record if an exception is raised.
 			</description>
 			<path>demo/jfrhelloworldeventI9</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
@@ -319,12 +354,14 @@
 				<descriptor>()V</descriptor>
 			</method>
 		</event>
 		<event id="demo.jfr.testI10">
 			<name>JFR Hello World Instance Event 10 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record even if an exception is raised,
-				but should not overwrite the existing try-catch clause.
+			<description>Defined in the xml file and added by the agent. Should
+				record even if an exception is raised,
+				but should not overwrite the
+				existing try-catch clause.
 			</description>
 			<path>demo/jfrhelloworldeventI10</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
@@ -333,11 +370,12 @@
 			</method>
 			<rethrow>true</rethrow>
 		</event>
 		<event id="demo.jfr.testI11">
 			<name>JFR Hello World Instance Event 11 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the value of instance reference
+			<description>Defined in the xml file and added by the agent. Should
+				record the value of instance reference
 				'instanceStringField'
 			</description>
 			<path>demo/jfrhelloworldeventI11</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
@@ -346,28 +384,34 @@
 				<descriptor>()V</descriptor>
 			</method>
 			<fields>
 				<field>
 					<name>'instanceStringField'</name>
-					<description>Capturing instance field with simple field name</description>
+					<description>Capturing instance field with simple field name
+					</description>
 					<expression>instanceStringField</expression>
 				</field>
 				<field>
 					<name>'this.instanceStringField'</name>
-					<description>Capturing instance field with "this" prefixed field name</description>
+					<description>Capturing instance field with "this" prefixed field
+						name
+					</description>
 					<expression>this.instanceStringField</expression>
 				</field>
 				<field>
 					<name>'InstrumentMe.this.instanceStringField'</name>
-					<description>Capturing instance field with qualified "this" prefixed field name</description>
+					<description>Capturing instance field with qualified "this"
+						prefixed field name
+					</description>
 					<expression>InstrumentMe.this.instanceStringField</expression>
 				</field>
 			</fields>
 		</event>
 		<event id="demo.jfr.testI12">
 			<name>JFR Hello World Instance Event 12 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the values of various
+			<description>Defined in the xml file and added by the agent. Should
+				record the values of various
 				references
 			</description>
 			<path>demo/jfrhelloworldeventI12</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe$MyInnerClass</class>
@@ -376,43 +420,54 @@
 				<descriptor>()V</descriptor>
 			</method>
 			<fields>
 				<field>
 					<name>'innerClassField'</name>
-					<description>Capturing inner class field with simple field name</description>
+					<description>Capturing inner class field with simple field name
+					</description>
 					<expression>innerClassField</expression>
 				</field>
 				<field>
 					<name>'this.innerClassField'</name>
-					<description>Capturing inner class field with "this" prefixed field name</description>
+					<description>Capturing inner class field with "this" prefixed field
+						name
+					</description>
 					<expression>this.innerClassField</expression>
 				</field>
 
 				<field>
 					<name>'instanceStringField'</name>
-					<description>Capturing outer class field with simple field name</description>
+					<description>Capturing outer class field with simple field name
+					</description>
 					<expression>instanceStringField</expression>
 				</field>
 				<field>
 					<name>'InstrumentMe.this.instanceStringField'</name>
-					<description>Capturing outer class field with qualified "this" prefixed field name</description>
+					<description>Capturing outer class field with qualified "this"
+						prefixed field name
+					</description>
 					<expression>InstrumentMe.this.instanceStringField</expression>
 				</field>
 				<field>
 					<name>'super.instanceStringField'</name>
-					<description>Capturing super class field with "super" prefixed field name</description>
+					<description>Capturing super class field with "super" prefixed
+						field name
+					</description>
 					<expression>super.instanceStringField</expression>
 				</field>
 
 				<field>
 					<name>'STATIC_STRING_FIELD'</name>
-					<description>Capturing outer class field with simple field name</description>
+					<description>Capturing outer class field with simple field name
+					</description>
 					<expression>STATIC_STRING_FIELD</expression>
 				</field>
 				<field>
 					<name>'InstrumentMe.STATIC_STRING_FIELD'</name>
-					<description>Capturing outer class field with class name prefixed field name</description>
+					<description>Capturing outer class field with class name prefixed
+						field name
+					</description>
 					<expression>InstrumentMe.STATIC_STRING_FIELD</expression>
 				</field>
 			</fields>
 		</event>
 	</events>
