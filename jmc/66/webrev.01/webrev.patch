diff a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
@@ -30,10 +30,12 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent.impl;
 
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
 import java.io.InputStream;
 import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -43,23 +45,30 @@
 import java.util.Map.Entry;
 import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import javax.xml.XMLConstants;
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLInputFactory;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
+import javax.xml.transform.stream.StreamSource;
+import javax.xml.validation.Schema;
+import javax.xml.validation.SchemaFactory;
+import javax.xml.validation.Validator;
 
 import org.openjdk.jmc.agent.Method;
 import org.openjdk.jmc.agent.Parameter;
 import org.openjdk.jmc.agent.ReturnValue;
 import org.openjdk.jmc.agent.TransformDescriptor;
 import org.openjdk.jmc.agent.TransformRegistry;
 import org.openjdk.jmc.agent.Field;
 import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;
+import org.openjdk.jmc.agent.util.IOToolkit;
 import org.openjdk.jmc.agent.util.TypeUtils;
+import org.xml.sax.SAXException;
 
 public class DefaultTransformRegistry implements TransformRegistry {
 	private static final String XML_ATTRIBUTE_NAME_ID = "id"; //$NON-NLS-1$
 	private static final String XML_ELEMENT_NAME_EVENT = "event"; //$NON-NLS-1$
 	private static final String XML_ELEMENT_METHOD_NAME = "method"; //$NON-NLS-1$
@@ -77,10 +86,23 @@
 	// First step in update should be to check if we even have transformations for the given class
 	private final HashMap<String, List<TransformDescriptor>> transformData = new HashMap<>();
 
 	private volatile boolean revertInstrumentation = false;
 
+	private static final String PROBE_SCHEMA_XSD = "jfrprobes_schema.xsd"; //$NON-NLS-1$
+	private static final Schema PROBE_SCHEMA;
+
+	static {
+		try {
+			SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
+			PROBE_SCHEMA = factory
+					.newSchema(new StreamSource(DefaultTransformRegistry.class.getResourceAsStream(PROBE_SCHEMA_XSD)));
+		} catch (SAXException e) {
+			throw new ExceptionInInitializerError(e);
+		}
+	}
+
 	@Override
 	public boolean hasPendingTransforms(String className) {
 		List<TransformDescriptor> transforms = transformData.get(className);
 		if (transforms == null || !isPendingTransforms(transforms)) {
 			return false;
@@ -90,15 +112,40 @@
 
 	public static TransformRegistry empty() {
 		return new DefaultTransformRegistry();
 	}
 
+	private static void validateProbeDefinition(InputStream in) throws XMLStreamException {
+		try {
+			Validator validator = PROBE_SCHEMA.newValidator();
+			validator.validate(new StreamSource(in));
+		} catch (IOException | SAXException e) {
+			throw new XMLStreamException(e);
+		}
+	}
+
+	private static void validateProbeDefinition(String configuration) throws XMLStreamException {
+		validateProbeDefinition(new ByteArrayInputStream(configuration.getBytes()));
+	}
+
 	public static TransformRegistry from(InputStream in) throws XMLStreamException {
+		byte[] buf;
+		InputStream configuration;
+		try {
+			buf = IOToolkit.readFully(in, -1, true);
+			configuration = new ByteArrayInputStream(buf);
+			configuration.mark(0);
+			validateProbeDefinition(configuration);
+			configuration.reset();
+		} catch (IOException e) {
+			throw new XMLStreamException(e);
+		}
+
 		HashMap<String, String> globalDefaults = new HashMap<>();
 		DefaultTransformRegistry registry = new DefaultTransformRegistry();
 		XMLInputFactory inputFactory = XMLInputFactory.newInstance();
-		XMLStreamReader streamReader = inputFactory.createXMLStreamReader(in);
+		XMLStreamReader streamReader = inputFactory.createXMLStreamReader(configuration);
 		while (streamReader.hasNext()) {
 			if (streamReader.isStartElement()) {
 				QName element = streamReader.getName();
 				if (XML_ELEMENT_NAME_EVENT.equals(element.getLocalPart())) {
 					TransformDescriptor td = parseTransformData(streamReader, globalDefaults);
@@ -420,10 +467,12 @@
 		return builder.toString();
 	}
 
 	public List<TransformDescriptor> modify(String xmlDescription) {
 		try  {
+			validateProbeDefinition(xmlDescription);
+
 			List<TransformDescriptor> tds = new ArrayList<TransformDescriptor>();
 			StringReader reader = new StringReader(xmlDescription);
 			XMLInputFactory inputFactory = XMLInputFactory.newInstance();
 			XMLStreamReader streamReader = inputFactory.createXMLStreamReader(reader);
 			HashMap<String, String> globalDefaults = new HashMap<String, String>();
diff a/agent/src/main/java/org/openjdk/jmc/agent/util/IOToolkit.java b/agent/src/main/java/org/openjdk/jmc/agent/util/IOToolkit.java
--- /dev/null
+++ b/agent/src/main/java/org/openjdk/jmc/agent/util/IOToolkit.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.agent.util;
+
+import java.io.EOFException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Arrays;
+
+/**
+ * Helper methods for IO related operations.
+ */
+public final class IOToolkit {
+	public static byte[] readFully(InputStream is, int length, boolean readAll) throws IOException {
+		byte[] output = {};
+		if (length == -1) {
+			length = Integer.MAX_VALUE;
+		}
+		int pos = 0;
+		while (pos < length) {
+			int bytesToRead;
+			if (pos >= output.length) { // Only expand when there's no room
+				bytesToRead = Math.min(length - pos, output.length + 1024);
+				if (output.length < pos + bytesToRead) {
+					output = Arrays.copyOf(output, pos + bytesToRead);
+				}
+			} else {
+				bytesToRead = output.length - pos;
+			}
+			int cc = is.read(output, pos, bytesToRead);
+			if (cc < 0) {
+				if (readAll && length != Integer.MAX_VALUE) {
+					throw new EOFException("Detect premature EOF"); //$NON-NLS-1$
+				} else {
+					if (output.length != pos) {
+						output = Arrays.copyOf(output, pos);
+					}
+					break;
+				}
+			}
+			pos += cc;
+		}
+		return output;
+	}
+}
diff a/agent/src/main/resources/org/openjdk/jmc/agent/impl/jfrprobes_schema.xsd b/agent/src/main/resources/org/openjdk/jmc/agent/impl/jfrprobes_schema.xsd
--- /dev/null
+++ b/agent/src/main/resources/org/openjdk/jmc/agent/impl/jfrprobes_schema.xsd
@@ -0,0 +1,218 @@
+<?xml version="1.0" encoding="utf-8"?>
+<xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
+	<xs:element type="jfrAgentType" name="jfragent"/>
+
+	<xs:complexType name="jfrAgentType">
+		<xs:all>
+			<xs:element type="configType" name="config" minOccurs="0">
+				<xs:annotation>
+					<xs:documentation>Global configuration options</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element type="eventsType" name="events" minOccurs="0"/>
+		</xs:all>
+	</xs:complexType>
+
+	<xs:complexType name="configType">
+		<xs:all>
+			<xs:element type="xs:string" name="classprefix" minOccurs="0">
+				<xs:annotation>
+					<xs:documentation>This is the prefix to use when generating event class names</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element type="xs:boolean" name="allowtostring" minOccurs="0">
+				<xs:annotation>
+					<xs:documentation>
+						Will allow the recording of arrays and object parameters as Strings. This will cause toString to
+						be called for array elements and objects other than strings, which in turn can cause trouble if
+						the toString method is badly implemented. Use with care.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+			<xs:element type="xs:boolean" name="allowconverter" minOccurs="0">
+				<xs:annotation>
+					<xs:documentation>
+						Allows converters to be used. If a converter is badly implemented, you are on your own.
+					</xs:documentation>
+				</xs:annotation>
+			</xs:element>
+		</xs:all>
+	</xs:complexType>
+
+	<xs:complexType name="eventsType">
+		<xs:sequence>
+			<xs:element type="eventType" name="event" maxOccurs="unbounded" minOccurs="0"/>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="eventType">
+		<xs:all>
+			<xs:element type="xs:string" name="name"/>
+			<xs:element type="classType" name="class"/>
+			<xs:element type="methodType" name="method"/>
+			<xs:element type="xs:string" name="description" minOccurs="0"/>
+			<xs:element type="pathType" name="path" minOccurs="0"/>
+			<xs:element type="xs:boolean" name="stacktrace" minOccurs="0"/>
+			<xs:element type="xs:boolean" name="rethrow" minOccurs="0"/>
+			<xs:element type="locationType" name="location" minOccurs="0"/>
+			<xs:element type="fieldsType" name="fields" minOccurs="0"/>
+		</xs:all>
+		<xs:attribute type="xs:string" name="id" use="required"/>
+	</xs:complexType>
+
+	<xs:simpleType name="classType">
+		<xs:annotation>
+			<xs:documentation>the fully qualified class name (FQCN) of the class to be transformed</xs:documentation>
+		</xs:annotation>
+		<xs:restriction base="xs:normalizedString">
+			<xs:pattern value="([a-zA-Z_$][a-zA-Z0-9_$]*\.)*([a-zA-Z_$][a-zA-Z0-9_$]*)"/>
+			<xs:whiteSpace value="collapse"/>
+		</xs:restriction>
+	</xs:simpleType>
+
+	<xs:complexType name="methodType">
+		<xs:all>
+			<xs:element type="methodNameType" name="name"/>
+			<xs:element type="descriptorType" name="descriptor"/>
+			<xs:element type="parametersType" name="parameters" minOccurs="0"/>
+			<xs:element type="returnValueType" name="returnvalue" minOccurs="0"/>
+		</xs:all>
+	</xs:complexType>
+
+	<xs:simpleType name="methodNameType">
+		<xs:restriction base="xs:normalizedString">
+			<xs:pattern value="[a-zA-Z_$][a-zA-Z0-9_$]*"/>
+			<xs:whiteSpace value="collapse"/>
+		</xs:restriction>
+	</xs:simpleType>
+
+	<xs:simpleType name="descriptorType">
+		<xs:annotation>
+			<xs:documentation>see §4.3.3 in Java Virtual Machine Specification</xs:documentation>
+		</xs:annotation>
+		<xs:restriction base="xs:normalizedString">
+			<xs:pattern
+					value="\((\[*([BCDFIJSZ]|L([a-zA-Z_$][a-zA-Z0-9_$]*/)*[a-zA-Z_$][a-zA-Z0-9_$]*;))*\)(V|\[*([BCDFIJSZ]|L([a-zA-Z_$][a-zA-Z0-9_$]*/)*[a-zA-Z_$][a-zA-Z0-9_$]*;))"/>
+			<xs:whiteSpace value="collapse"/>
+		</xs:restriction>
+	</xs:simpleType>
+
+	<xs:complexType name="parametersType">
+		<xs:annotation>
+			<xs:documentation>only if we allow toString</xs:documentation>
+		</xs:annotation>
+		<xs:sequence>
+			<xs:element type="parameterType" name="parameter" maxOccurs="unbounded" minOccurs="0"/>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="parameterType">
+		<xs:all>
+			<xs:element type="xs:string" name="name"/>
+			<xs:element type="xs:string" name="description" minOccurs="0"/>
+			<xs:element type="contentTypeType" name="contenttype" minOccurs="0"/>
+			<xs:element type="relationKeyType" name="relationkey" minOccurs="0"/>
+			<xs:element type="converterType" name="converter" minOccurs="0"/>
+		</xs:all>
+		<xs:attribute type="xs:nonNegativeInteger" name="index" use="required"/>
+	</xs:complexType>
+
+	<xs:simpleType name="contentTypeType">
+		<xs:annotation>
+			<xs:documentation>see com.oracle.jrockit.jfr.ContentType</xs:documentation>
+		</xs:annotation>
+		<xs:restriction base="xs:normalizedString">
+			<xs:enumeration value="None"/>
+			<xs:enumeration value="Bytes"/>
+			<xs:enumeration value="Timestamp"/>
+			<xs:enumeration value="Millis"/>
+			<xs:enumeration value="Nanos"/>
+			<xs:enumeration value="Ticks"/>
+			<xs:enumeration value="Address"/>
+			<xs:enumeration value="OSThread"/>
+			<xs:enumeration value="JavaThread"/>
+			<xs:enumeration value="StackTrace"/>
+			<xs:enumeration value="Class"/>
+			<xs:enumeration value="Percentage"/>
+			<xs:whiteSpace value="collapse"/>
+		</xs:restriction>
+	</xs:simpleType>
+
+	<xs:simpleType name="relationKeyType">
+		<xs:annotation>
+			<xs:documentation>
+				a unique URI signifying a relationship between different events based on the values of specific
+				fields
+			</xs:documentation>
+		</xs:annotation>
+		<xs:restriction base="xs:anyURI"/>
+	</xs:simpleType>
+
+	<xs:simpleType name="converterType">
+		<xs:annotation>
+			<xs:documentation>the fully qualified class name (FQCN) of the converter used</xs:documentation>
+		</xs:annotation>
+		<xs:restriction base="classType"/>
+	</xs:simpleType>
+
+	<xs:complexType name="returnValueType">
+		<xs:annotation>
+			<xs:documentation>This will only work if we allow toString</xs:documentation>
+		</xs:annotation>
+		<xs:all>
+			<xs:element type="xs:string" name="description" minOccurs="0"/>
+			<xs:element type="contentTypeType" name="contenttype" minOccurs="0"/>
+			<xs:element type="relationKeyType" name="relationkey" minOccurs="0"/>
+			<xs:element type="converterType" name="converter" minOccurs="0"/>
+		</xs:all>
+	</xs:complexType>
+
+	<xs:simpleType name="pathType">
+		<xs:restriction base="xs:normalizedString">
+			<xs:pattern value="([^/]+/)*([^/]*)"/>
+			<xs:whiteSpace value="collapse"/>
+		</xs:restriction>
+	</xs:simpleType>
+
+	<xs:simpleType name="locationType">
+		<xs:annotation>
+			<xs:documentation>location {ENTRY, EXIT, WRAP}</xs:documentation>
+		</xs:annotation>
+		<xs:restriction base="xs:normalizedString">
+			<xs:enumeration value="ENTRY"/>
+			<xs:enumeration value="EXIT"/>
+			<xs:enumeration value="WRAP"/>
+			<xs:whiteSpace value="collapse"/>
+		</xs:restriction>
+	</xs:simpleType>
+
+	<xs:complexType name="fieldsType">
+		<xs:sequence>
+			<xs:element type="fieldType" name="field" maxOccurs="unbounded" minOccurs="0"/>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:complexType name="fieldType">
+		<xs:sequence>
+			<xs:element type="xs:string" name="name"/>
+			<xs:element type="xs:string" name="description"/>
+			<xs:element type="expressionType" name="expression"/>
+			<xs:element type="contentTypeType" name="contenttype" minOccurs="0"/>
+			<xs:element type="relationKeyType" name="relationkey" minOccurs="0"/>
+			<xs:element type="converterType" name="converter" minOccurs="0"/>
+		</xs:sequence>
+	</xs:complexType>
+
+	<xs:simpleType name="expressionType">
+		<xs:annotation>
+			<xs:documentation>
+				an expression in a subset of primary expressions (see §15.8 in Java Language Specification) to be
+				evaluated
+			</xs:documentation>
+		</xs:annotation>
+		<xs:restriction base="xs:normalizedString">
+			<xs:pattern value="([a-zA-Z_$][a-zA-Z0-9_$]*\.)*([a-zA-Z_$][a-zA-Z0-9_$]*)(\.[a-zA-Z_$][a-zA-Z_$]*)*"/>
+			<xs:whiteSpace value="collapse"/>
+		</xs:restriction>
+	</xs:simpleType>
+</xs:schema>
diff a/agent/src/test/java/org/openjdk/jmc/agent/test/util/TestToolkit.java b/agent/src/test/java/org/openjdk/jmc/agent/test/util/TestToolkit.java
--- a/agent/src/test/java/org/openjdk/jmc/agent/test/util/TestToolkit.java
+++ b/agent/src/test/java/org/openjdk/jmc/agent/test/util/TestToolkit.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -30,18 +30,18 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent.test.util;
 
+import org.openjdk.jmc.agent.util.IOToolkit;
+
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
 import java.io.Closeable;
-import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.util.Arrays;
 import java.util.Random;
 
 public final class TestToolkit {
 	public static String DEFAULT_TEMPLATE_NAME = "jfrprobes_template.xml";
 	
@@ -51,44 +51,12 @@
 		throw new UnsupportedOperationException("Not to be instantiated."); //$NON-NLS-1$
 	}
 
 	public static byte[] getByteCode(Class<?> c) throws IOException {
 		try (InputStream is = c.getClassLoader().getResourceAsStream(c.getName().replace('.', '/') + ".class")) { //$NON-NLS-1$
-			return readFully(is, -1, true);
-		}
-	}
-
-	public static byte[] readFully(InputStream is, int length, boolean readAll) throws IOException {
-		byte[] output = {};
-		if (length == -1) {
-			length = Integer.MAX_VALUE;
-		}
-		int pos = 0;
-		while (pos < length) {
-			int bytesToRead;
-			if (pos >= output.length) { // Only expand when there's no room
-				bytesToRead = Math.min(length - pos, output.length + 1024);
-				if (output.length < pos + bytesToRead) {
-					output = Arrays.copyOf(output, pos + bytesToRead);
-				}
-			} else {
-				bytesToRead = output.length - pos;
-			}
-			int cc = is.read(output, pos, bytesToRead);
-			if (cc < 0) {
-				if (readAll && length != Integer.MAX_VALUE) {
-					throw new EOFException("Detect premature EOF"); //$NON-NLS-1$
-				} else {
-					if (output.length != pos) {
-						output = Arrays.copyOf(output, pos);
-					}
-					break;
-				}
-			}
-			pos += cc;
+			return IOToolkit.readFully(is, -1, true);
 		}
-		return output;
 	}
 
 	public static long randomLong() {
 		return RND.nextLong();
 	}
diff a/agent/src/test/resources/org/openjdk/jmc/agent/converters/test/jfrprobes_template.xml b/agent/src/test/resources/org/openjdk/jmc/agent/converters/test/jfrprobes_template.xml
--- a/agent/src/test/resources/org/openjdk/jmc/agent/converters/test/jfrprobes_template.xml
+++ b/agent/src/test/resources/org/openjdk/jmc/agent/converters/test/jfrprobes_template.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <!--   
-   Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+   Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
    
    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
    
    The contents of this file are subject to the terms of either the Universal Permissive License 
    v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -46,96 +46,114 @@
 		<allowconverter>true</allowconverter>
 	</config>
 	<events>
 		<event id="demo.jfr.convertertest.String">
 			<name>ConverterEventString-%TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to String.</description>
+			<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to
+				String.
+			</description>
 			<path>demo/converterevents/</path>
-			<kind>DURATION</kind>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter
 			</class>
 			<method>
 				<name>printGurkaToString</name>
 				<descriptor>(Lorg/openjdk/jmc/bciagent/test/Gurka;)V</descriptor>
-				<parameter index="0">
-					<name>Gurka Attribute</name>
-					<description>The one and only converted Gurk-parameter</description>
-					<contenttype>None</contenttype>
-					<converter>org.openjdk.jmc.agent.converters.test.GurkConverterString</converter>
-				</parameter>
+				<parameters>
+					<parameter index="0">
+						<name>Gurka Attribute</name>
+						<description>The one and only converted Gurk-parameter</description>
+						<contenttype>None</contenttype>
+						<converter>org.openjdk.jmc.agent.converters.test.GurkConverterString</converter>
+					</parameter>
+				</parameters>
 			</method>
 		</event>
 		<event id="demo.jfr.convertertest.Int">
 			<name>ConverterEventInt-%TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to an int.</description>
+			<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to an
+				int.
+			</description>
 			<path>demo/converterevents</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter</class>
 			<method>
 				<name>printGurkaToInt</name>
 				<descriptor>(Lorg/openjdk/jmc/bciagent/test/Gurka;)V</descriptor>
-				<parameter index="0">
-					<name>Gurka Attribute</name>
-					<description>The one and only converted Gurk-parameter</description>
-					<contenttype>None</contenttype>
-					<converter>org.openjdk.jmc.agent.converters.test.GurkConverterInt</converter>
-				</parameter>
+				<parameters>
+					<parameter index="0">
+						<name>Gurka Attribute</name>
+						<description>The one and only converted Gurk-parameter</description>
+						<contenttype>None</contenttype>
+						<converter>org.openjdk.jmc.agent.converters.test.GurkConverterInt</converter>
+					</parameter>
+				</parameters>
 			</method>
 			<location>WRAP</location>
 		</event>
 		<event id="demo.jfr.convertertest.Long">
 			<name>ConverterEventLong-%TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to a long.</description>
+			<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to a
+				long.
+			</description>
 			<path>demo/converterevents</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter</class>
 			<method>
 				<name>printGurkaToLong</name>
 				<descriptor>(Lorg/openjdk/jmc/bciagent/test/Gurka;)V</descriptor>
-				<parameter index="0">
-					<name>Gurka Attribute</name>
-					<description>The one and only converted Gurk-parameter</description>
-					<contenttype>None</contenttype>
-					<converter>org.openjdk.jmc.agent.converters.test.GurkConverterLong</converter>
-				</parameter>
+				<parameters>
+					<parameter index="0">
+						<name>Gurka Attribute</name>
+						<description>The one and only converted Gurk-parameter</description>
+						<contenttype>None</contenttype>
+						<converter>org.openjdk.jmc.agent.converters.test.GurkConverterLong</converter>
+					</parameter>
+				</parameters>
 			</method>
 			<location>WRAP</location>
 		</event>
 		<event id="demo.jfr.convertertest.Float">
 			<name>ConverterEventFloat-%TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to a float.</description>
+			<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to a
+				float.
+			</description>
 			<path>demo/converterevents</path>
-			<thread>true</thread>
 			<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter</class>
 			<method>
 				<name>printGurkaToFloat</name>
 				<descriptor>(Lorg/openjdk/jmc/bciagent/test/Gurka;)V</descriptor>
-				<parameter index="0">
-					<name>Gurka Attribute</name>
-					<description>The one and only converted Gurk-parameter</description>
-					<contenttype>None</contenttype>
-					<converter>org.openjdk.jmc.agent.converters.test.GurkConverterFloat</converter>
-				</parameter>
+				<parameters>
+					<parameter index="0">
+						<name>Gurka Attribute</name>
+						<description>The one and only converted Gurk-parameter</description>
+						<contenttype>None</contenttype>
+						<converter>org.openjdk.jmc.agent.converters.test.GurkConverterFloat</converter>
+					</parameter>
+				</parameters>
 			</method>
 			<location>WRAP</location>
 		</event>
 		<event id="demo.jfr.convertertest.Double">
 			<name>ConverterEventDouble-%TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to a float.</description>
+			<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to a
+				float.
+			</description>
 			<path>demo/converterevents</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter</class>
 			<method>
 				<name>printGurkaToFloat</name>
 				<descriptor>(Lorg/openjdk/jmc/bciagent/test/Gurka;)V</descriptor>
-				<parameter index="0">
-					<name>Gurka Attribute</name>
-					<description>The one and only converted Gurk-parameter</description>
-					<contenttype>None</contenttype>
-					<converter>org.openjdk.jmc.agent.converters.test.GurkConverterFloat</converter>
-				</parameter>
+				<parameters>
+					<parameter index="0">
+						<name>Gurka Attribute</name>
+						<description>The one and only converted Gurk-parameter</description>
+						<contenttype>None</contenttype>
+						<converter>org.openjdk.jmc.agent.converters.test.GurkConverterFloat</converter>
+					</parameter>
+				</parameters>
 			</method>
 			<location>WRAP</location>
 		</event>
 	</events>
 </jfragent>
diff a/agent/src/test/resources/org/openjdk/jmc/agent/test/jfrprobes_template.xml b/agent/src/test/resources/org/openjdk/jmc/agent/test/jfrprobes_template.xml
--- a/agent/src/test/resources/org/openjdk/jmc/agent/test/jfrprobes_template.xml
+++ b/agent/src/test/resources/org/openjdk/jmc/agent/test/jfrprobes_template.xml
@@ -39,21 +39,21 @@
 		<!-- Will allow the recording of arrays and object parameters as Strings. This will cause toString to be called
 		     for array elements and objects other than strings, which in turn can cause trouble if the toString 
 		     method is badly implemented. Use with care. -->
 		<allowtostring>true</allowtostring>
 		<!-- Allows converters to be used. If a converter is badly implemented, you are on your own. -->
-		<allowconverter>true</allowconverter>		
+		<allowconverter>true</allowconverter>
 	</config>
 	<events>
 		<event id="demo.jfr.test1">
 			<name>JFR Hello World Event 1 %TEST_NAME%</name>
 			<description>Defined in the xml file and added by the agent.</description>
 			<path>demo/jfrhelloworldevent1</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
-				<name>printHelloWorldJFR1</name>						
+				<name>printHelloWorldJFR1</name>
 				<descriptor>()V</descriptor>
 			</method>
 			<!-- location {ENTRY, EXIT, WRAP}-->
 			<location>WRAP</location>
 		</event>
@@ -62,108 +62,122 @@
 			<description>Defined in the xml file and added by the agent. Should record the parameters.</description>
 			<path>demo/jfrhelloworldevent2</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
-				<name>printHelloWorldJFR2</name>						
+				<name>printHelloWorldJFR2</name>
 				<descriptor>(Ljava/lang/String;J)I</descriptor>
-				<parameter index="0">
-					<name>String Attribute</name>
-					<description>The first parameter</description>
-					<!-- See com.oracle.jrockit.jfr.ContentType
-					     {None, Bytes, Timestamp, Millis, Nanos, Ticks, Address, OSThread, JavaThread, StackTrace, Class, Percentage} -->
-					<contenttype>None</contenttype>	
-				</parameter>
-				<parameter index="1">
-					<name>Long Attribute</name>
-					<description>The second parameter</description>
-					<contenttype>Bytes</contenttype>	
-				</parameter>
+				<parameters>
+					<parameter index="0">
+						<name>String Attribute</name>
+						<description>The first parameter</description>
+						<!-- See com.oracle.jrockit.jfr.ContentType
+							 {None, Bytes, Timestamp, Millis, Nanos, Ticks, Address, OSThread, JavaThread, StackTrace, Class, Percentage} -->
+						<contenttype>None</contenttype>
+					</parameter>
+					<parameter index="1">
+						<name>Long Attribute</name>
+						<description>The second parameter</description>
+						<contenttype>Bytes</contenttype>
+					</parameter>
+				</parameters>
 				<returnvalue>
 					<description>The return value</description>
-					<contenttype>None</contenttype>	
+					<contenttype>None</contenttype>
 				</returnvalue>
 			</method>
 			<!-- location {ENTRY, EXIT, WRAP}-->
 			<location>WRAP</location>
 		</event>
 		<event id="demo.jfr.test11">
 			<name>JFR Hello World Event 11 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the value of static reference 'STATIC_STRING_FIELD'</description>
+			<description>Defined in the xml file and added by the agent. Should record the value of static reference
+				'STATIC_STRING_FIELD'
+			</description>
 			<path>demo/jfrhelloworldevent11</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printHelloWorldJFR11</name>
 				<descriptor>()V</descriptor>
 			</method>
-			<field>
-				<name>'STATIC_STRING_FIELD'</name>
-				<description>Capturing static field with simple field name</description>
-				<expression>STATIC_STRING_FIELD</expression>
-			</field>
-			<field>
-				<name>'InstrumentMe.STATIC_STRING_FIELD'</name>
-				<description>Capturing static field with class name prefixed field name</description>
-				<expression>InstrumentMe.STATIC_STRING_FIELD</expression>
-			</field>
-			<field>
-				<name>'org.openjdk.jmc.agent.test.InstrumentMe.STATIC_STRING_FIELD'</name>
-				<description>Capturing static field with full qualified class prefixed name</description>
-				<expression>org.openjdk.jmc.agent.test.InstrumentMe.STATIC_STRING_FIELD</expression>
-			</field>
+			<fields>
+				<field>
+					<name>'STATIC_STRING_FIELD'</name>
+					<description>Capturing static field with simple field name</description>
+					<expression>STATIC_STRING_FIELD</expression>
+				</field>
+				<field>
+					<name>'InstrumentMe.STATIC_STRING_FIELD'</name>
+					<description>Capturing static field with class name prefixed field name</description>
+					<expression>InstrumentMe.STATIC_STRING_FIELD</expression>
+				</field>
+				<field>
+					<name>'org.openjdk.jmc.agent.test.InstrumentMe.STATIC_STRING_FIELD'</name>
+					<description>Capturing static field with full qualified class prefixed name</description>
+					<expression>org.openjdk.jmc.agent.test.InstrumentMe.STATIC_STRING_FIELD</expression>
+				</field>
+			</fields>
 		</event>
 		<event id="demo.jfr.test12">
 			<name>JFR Hello World Event 12 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the values of 'STATIC_OBJECT_FIELD.STATIC_STRING_FIELD' and 'STATIC_OBJECT_FIELD.instanceStringField'</description>
+			<description>Defined in the xml file and added by the agent. Should record the values of
+				'STATIC_OBJECT_FIELD.STATIC_STRING_FIELD' and 'STATIC_OBJECT_FIELD.instanceStringField'
+			</description>
 			<path>demo/jfrhelloworldevent12</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printHelloWorldJFR12</name>
 				<descriptor>()V</descriptor>
 			</method>
-			<field>
-				<name>'STATIC_OBJECT_FIELD.STATIC_STRING_FIELD'</name>
-				<description>Capturing static field on a object reference</description>
-				<expression>STATIC_OBJECT_FIELD.STATIC_STRING_FIELD</expression>
-			</field>
-			<field>
-				<name>'STATIC_OBJECT_FIELD.instanceStringField'</name>
-				<description>Capturing non-static field on a object reference</description>
-				<expression>STATIC_OBJECT_FIELD.instanceStringField</expression>
-			</field>
+			<fields>
+				<field>
+					<name>'STATIC_OBJECT_FIELD.STATIC_STRING_FIELD'</name>
+					<description>Capturing static field on a object reference</description>
+					<expression>STATIC_OBJECT_FIELD.STATIC_STRING_FIELD</expression>
+				</field>
+				<field>
+					<name>'STATIC_OBJECT_FIELD.instanceStringField'</name>
+					<description>Capturing non-static field on a object reference</description>
+					<expression>STATIC_OBJECT_FIELD.instanceStringField</expression>
+				</field>
+			</fields>
 		</event>
 		<event id="demo.jfr.test13">
 			<name>JFR Hello World Event 13 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the values of static 'STATIC_NULL_FIELD.STATIC_STRING_FIELD' and 'STATIC_NULL_FIELD.instanceStringField'</description>
+			<description>Defined in the xml file and added by the agent. Should record the values of static
+				'STATIC_NULL_FIELD.STATIC_STRING_FIELD' and 'STATIC_NULL_FIELD.instanceStringField'
+			</description>
 			<path>demo/jfrhelloworldevent13</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printHelloWorldJFR11</name>
 				<descriptor>()V</descriptor>
 			</method>
-			<field>
-				<name>'STATIC_NULL_FIELD.STATIC_STRING_FIELD'</name>
-				<description>Capturing static field on a null object reference</description>
-				<expression>STATIC_NULL_FIELD.STATIC_STRING_FIELD</expression>
-			</field>
-			<field>
-				<name>'STATIC_NULL_FIELD.instanceStringField'</name>
-				<description>Capturing non-static field on a null object reference</description>
-				<expression>STATIC_NULL_FIELD.instanceStringField</expression>
-			</field>
+			<fields>
+				<field>
+					<name>'STATIC_NULL_FIELD.STATIC_STRING_FIELD'</name>
+					<description>Capturing static field on a null object reference</description>
+					<expression>STATIC_NULL_FIELD.STATIC_STRING_FIELD</expression>
+				</field>
+				<field>
+					<name>'STATIC_NULL_FIELD.instanceStringField'</name>
+					<description>Capturing non-static field on a null object reference</description>
+					<expression>STATIC_NULL_FIELD.instanceStringField</expression>
+				</field>
+			</fields>
 		</event>
 		<event id="demo.jfr.testI1">
 			<name>JFR Hello World Instance Event 1 %TEST_NAME%</name>
 			<description>Defined in the xml file and added by the agent.</description>
 			<path>demo/jfrhelloworldeventI1</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
-				<name>printInstanceHelloWorldJFR1</name>						
+				<name>printInstanceHelloWorldJFR1</name>
 				<descriptor>()V</descriptor>
 			</method>
 			<!-- location {ENTRY, EXIT, WRAP}-->
 			<location>WRAP</location>
 		</event>
@@ -172,109 +186,120 @@
 			<description>Defined in the xml file and added by the agent. Should record the parameters.</description>
 			<path>demo/jfrhelloworldeventI2</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
-				<name>printInstanceHelloWorldJFR2</name>						
+				<name>printInstanceHelloWorldJFR2</name>
 				<descriptor>(Ljava/lang/String;J)I</descriptor>
-				<parameter index="0">
-					<name>String Attribute</name>
-					<description>The first parameter</description>
-					<contenttype>None</contenttype>	
-				</parameter>
-				<parameter index="1">
-					<name>Long Attribute</name>
-					<description>The second parameter</description>
-					<contenttype>Bytes</contenttype>	
-				</parameter>
+				<parameters>
+					<parameter index="0">
+						<name>String Attribute</name>
+						<description>The first parameter</description>
+						<contenttype>None</contenttype>
+					</parameter>
+					<parameter index="1">
+						<name>Long Attribute</name>
+						<description>The second parameter</description>
+						<contenttype>Bytes</contenttype>
+					</parameter>
+				</parameters>
 				<returnvalue>
 					<description>The return value</description>
-					<contenttype>None</contenttype>	
+					<contenttype>None</contenttype>
 				</returnvalue>
 			</method>
 		</event>
 		<event id="demo.jfr.testI3">
 			<name>JFR Hello World Instance Event 3 %TEST_NAME%</name>
 			<description>Defined in the xml file and added by the agent. Should record the parameters.</description>
 			<path>demo/jfrhelloworldeventI3</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
-				<name>printInstanceHelloWorldJFR3</name>						
+				<name>printInstanceHelloWorldJFR3</name>
 				<descriptor>(Lorg/openjdk/jmc/bciagent/test/Gurka;)V</descriptor>
 				<!-- Note that this will only work if we allow toString -->
-				<parameter index="0">
-					<name>Gurka Attribute</name>
-					<description>The one and only Gurk-parameter</description>
-					<contenttype>None</contenttype>	
-				</parameter>
+				<parameters>
+					<parameter index="0">
+						<name>Gurka Attribute</name>
+						<description>The one and only Gurk-parameter</description>
+						<contenttype>None</contenttype>
+					</parameter>
+				</parameters>
 			</method>
 		</event>
 		<event id="demo.jfr.testI4">
 			<name>JFR Hello World Instance Event 4 %TEST_NAME%</name>
 			<description>Defined in the xml file and added by the agent. Should record the parameters.</description>
 			<path>demo/jfrhelloworldeventI4</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
-				<name>printInstanceHelloWorldJFR4</name>						
+				<name>printInstanceHelloWorldJFR4</name>
 				<descriptor>([Lorg/openjdk/jmc/bciagent/test/Gurka;)V</descriptor>
 				<!-- Note that this will only work if we allow toString -->
-				<parameter index="0">
-					<name>Gurka Array Attribute</name>
-					<description>The one and only Gurk-array-parameter</description>
-					<contenttype>None</contenttype>	
-				</parameter>
+				<parameters>
+					<parameter index="0">
+						<name>Gurka Array Attribute</name>
+						<description>The one and only Gurk-array-parameter</description>
+						<contenttype>None</contenttype>
+					</parameter>
+				</parameters>
 			</method>
 		</event>
 		<event id="demo.jfr.testI5">
 			<name>JFR Hello World Instance Event 5 %TEST_NAME%</name>
 			<description>Defined in the xml file and added by the agent. Should record the parameters.</description>
 			<path>demo/jfrhelloworldeventI5</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
-				<name>printInstanceHelloWorldJFR5</name>						
+				<name>printInstanceHelloWorldJFR5</name>
 				<descriptor>(Ljava/util/Collection;)V</descriptor>
 				<!-- Note that this will only work if we allow toString -->
-				<parameter index="0">
-					<name>Gurka Collection Attribute</name>
-					<description>The one and only Gurk-collection</description>
-					<contenttype>None</contenttype>	
-				</parameter>
+				<parameters>
+					<parameter index="0">
+						<name>Gurka Collection Attribute</name>
+						<description>The one and only Gurk-collection</description>
+						<contenttype>None</contenttype>
+					</parameter>
+				</parameters>
 			</method>
 		</event>
 		<event id="demo.jfr.testI6">
 			<name>JFR Hello World Instance Event 6 %TEST_NAME%</name>
 			<description>Defined in the xml file and added by the agent. Should record the return value.</description>
 			<path>demo/jfrhelloworldeventI6</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
-				<name>printInstanceHelloWorldJFR6</name>						
+				<name>printInstanceHelloWorldJFR6</name>
 				<descriptor>()D</descriptor>
 				<!-- Note that this will only work if we allow toString -->
 				<returnvalue>
 					<description>A value between 0 and 100 (double)</description>
-					<contenttype>Percentage</contenttype>	
+					<contenttype>Percentage</contenttype>
 				</returnvalue>
 			</method>
 		</event>
 		<event id="demo.jfr.testI7">
 			<name>JFR Hello World Instance Event 7 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. The original method contains a try-catch clause.</description>
+			<description>Defined in the xml file and added by the agent. The original method contains a try-catch
+				clause.
+			</description>
 			<path>demo/jfrhelloworldeventI7</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printInstanceHelloWorldJFR7</name>
 				<descriptor>()V</descriptor>
 			</method>
 		</event>
 		<event id="demo.jfr.testI8">
 			<name>JFR Hello World Instance Event 8 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record even if an exception is raised.</description>
+			<description>Defined in the xml file and added by the agent. Should record even if an exception is raised.
+			</description>
 			<path>demo/jfrhelloworldeventI8</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printInstanceHelloWorldJFR8</name>
@@ -282,22 +307,25 @@
 			</method>
 			<rethrow>true</rethrow>
 		</event>
 		<event id="demo.jfr.testI9">
 			<name>JFR Hello World Instance Event 9 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should not record if an exception is raised.</description>
+			<description>Defined in the xml file and added by the agent. Should not record if an exception is raised.
+			</description>
 			<path>demo/jfrhelloworldeventI9</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printInstanceHelloWorldJFR9</name>
 				<descriptor>()V</descriptor>
 			</method>
 		</event>
 		<event id="demo.jfr.testI10">
 			<name>JFR Hello World Instance Event 10 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record even if an exception is raised, but should not overwrite the existing try-catch clause.</description>
+			<description>Defined in the xml file and added by the agent. Should record even if an exception is raised,
+				but should not overwrite the existing try-catch clause.
+			</description>
 			<path>demo/jfrhelloworldeventI10</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printInstanceHelloWorldJFR10</name>
@@ -305,79 +333,87 @@
 			</method>
 			<rethrow>true</rethrow>
 		</event>
 		<event id="demo.jfr.testI11">
 			<name>JFR Hello World Instance Event 11 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the value of instance reference 'instanceStringField'</description>
+			<description>Defined in the xml file and added by the agent. Should record the value of instance reference
+				'instanceStringField'
+			</description>
 			<path>demo/jfrhelloworldeventI11</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe</class>
 			<method>
 				<name>printInstanceHelloWorldJFR11</name>
 				<descriptor>()V</descriptor>
 			</method>
-			<field>
-				<name>'instanceStringField'</name>
-				<description>Capturing instance field with simple field name</description>
-				<expression>instanceStringField</expression>
-			</field>
-			<field>
-				<name>'this.instanceStringField'</name>
-				<description>Capturing instance field with "this" prefixed field name</description>
-				<expression>this.instanceStringField</expression>
-			</field>
-			<field>
-				<name>'InstrumentMe.this.instanceStringField'</name>
-				<description>Capturing instance field with qualified "this" prefixed field name</description>
-				<expression>InstrumentMe.this.instanceStringField</expression>
-			</field>
+			<fields>
+				<field>
+					<name>'instanceStringField'</name>
+					<description>Capturing instance field with simple field name</description>
+					<expression>instanceStringField</expression>
+				</field>
+				<field>
+					<name>'this.instanceStringField'</name>
+					<description>Capturing instance field with "this" prefixed field name</description>
+					<expression>this.instanceStringField</expression>
+				</field>
+				<field>
+					<name>'InstrumentMe.this.instanceStringField'</name>
+					<description>Capturing instance field with qualified "this" prefixed field name</description>
+					<expression>InstrumentMe.this.instanceStringField</expression>
+				</field>
+			</fields>
 		</event>
 		<event id="demo.jfr.testI12">
 			<name>JFR Hello World Instance Event 12 %TEST_NAME%</name>
-			<description>Defined in the xml file and added by the agent. Should record the values of various references</description>
+			<description>Defined in the xml file and added by the agent. Should record the values of various
+				references
+			</description>
 			<path>demo/jfrhelloworldeventI12</path>
 			<stacktrace>true</stacktrace>
 			<class>org.openjdk.jmc.agent.test.InstrumentMe$MyInnerClass</class>
 			<method>
 				<name>instrumentationPoint</name>
 				<descriptor>()V</descriptor>
 			</method>
-			<field>
-				<name>'innerClassField'</name>
-				<description>Capturing inner class field with simple field name</description>
-				<expression>innerClassField</expression>
-			</field>
-			<field>
-				<name>'this.innerClassField'</name>
-				<description>Capturing inner class field with "this" prefixed field name</description>
-				<expression>this.innerClassField</expression>
-			</field>
+			<fields>
+				<field>
+					<name>'innerClassField'</name>
+					<description>Capturing inner class field with simple field name</description>
+					<expression>innerClassField</expression>
+				</field>
+				<field>
+					<name>'this.innerClassField'</name>
+					<description>Capturing inner class field with "this" prefixed field name</description>
+					<expression>this.innerClassField</expression>
+				</field>
 
-			<field>
-				<name>'instanceStringField'</name>
-				<description>Capturing outer class field with simple field name</description>
-				<expression>instanceStringField</expression>
-			</field>
-			<field>
-				<name>'InstrumentMe.this.instanceStringField'</name>
-				<description>Capturing outer class field with qualified "this" prefixed field name</description>
-				<expression>InstrumentMe.this.instanceStringField</expression>
-			</field>
-			<field>
-				<name>'super.instanceStringField'</name>
-				<description>Capturing super class field with "super" prefixed field name</description>
-				<expression>super.instanceStringField</expression>
-			</field>
+				<field>
+					<name>'instanceStringField'</name>
+					<description>Capturing outer class field with simple field name</description>
+					<expression>instanceStringField</expression>
+				</field>
+				<field>
+					<name>'InstrumentMe.this.instanceStringField'</name>
+					<description>Capturing outer class field with qualified "this" prefixed field name</description>
+					<expression>InstrumentMe.this.instanceStringField</expression>
+				</field>
+				<field>
+					<name>'super.instanceStringField'</name>
+					<description>Capturing super class field with "super" prefixed field name</description>
+					<expression>super.instanceStringField</expression>
+				</field>
 
-			<field>
-				<name>'STATIC_STRING_FIELD'</name>
-				<description>Capturing outer class field with simple field name</description>
-				<expression>STATIC_STRING_FIELD</expression>
-			</field>
-			<field>
-				<name>'InstrumentMe.STATIC_STRING_FIELD'</name>
-				<description>Capturing outer class field with class name prefixed field name</description>
-				<expression>InstrumentMe.STATIC_STRING_FIELD</expression>
-			</field>
+				<field>
+					<name>'STATIC_STRING_FIELD'</name>
+					<description>Capturing outer class field with simple field name</description>
+					<expression>STATIC_STRING_FIELD</expression>
+				</field>
+				<field>
+					<name>'InstrumentMe.STATIC_STRING_FIELD'</name>
+					<description>Capturing outer class field with class name prefixed field name</description>
+					<expression>InstrumentMe.STATIC_STRING_FIELD</expression>
+				</field>
+			</fields>
 		</event>
 	</events>
 </jfragent>
