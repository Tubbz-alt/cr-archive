diff a/agent/src/test/java/org/openjdk/jmc/agent/test/util/TestToolkit.java b/agent/src/test/java/org/openjdk/jmc/agent/test/util/TestToolkit.java
--- a/agent/src/test/java/org/openjdk/jmc/agent/test/util/TestToolkit.java
+++ b/agent/src/test/java/org/openjdk/jmc/agent/test/util/TestToolkit.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * 
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * The contents of this file are subject to the terms of either the Universal Permissive License
  * v 1.0 as shown at http://oss.oracle.com/licenses/upl
@@ -30,18 +30,18 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent.test.util;
 
+import org.openjdk.jmc.agent.util.IOToolkit;
+
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
 import java.io.Closeable;
-import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.util.Arrays;
 import java.util.Random;
 
 public final class TestToolkit {
 	public static String DEFAULT_TEMPLATE_NAME = "jfrprobes_template.xml";
 	
@@ -51,44 +51,12 @@
 		throw new UnsupportedOperationException("Not to be instantiated."); //$NON-NLS-1$
 	}
 
 	public static byte[] getByteCode(Class<?> c) throws IOException {
 		try (InputStream is = c.getClassLoader().getResourceAsStream(c.getName().replace('.', '/') + ".class")) { //$NON-NLS-1$
-			return readFully(is, -1, true);
-		}
-	}
-
-	public static byte[] readFully(InputStream is, int length, boolean readAll) throws IOException {
-		byte[] output = {};
-		if (length == -1) {
-			length = Integer.MAX_VALUE;
-		}
-		int pos = 0;
-		while (pos < length) {
-			int bytesToRead;
-			if (pos >= output.length) { // Only expand when there's no room
-				bytesToRead = Math.min(length - pos, output.length + 1024);
-				if (output.length < pos + bytesToRead) {
-					output = Arrays.copyOf(output, pos + bytesToRead);
-				}
-			} else {
-				bytesToRead = output.length - pos;
-			}
-			int cc = is.read(output, pos, bytesToRead);
-			if (cc < 0) {
-				if (readAll && length != Integer.MAX_VALUE) {
-					throw new EOFException("Detect premature EOF"); //$NON-NLS-1$
-				} else {
-					if (output.length != pos) {
-						output = Arrays.copyOf(output, pos);
-					}
-					break;
-				}
-			}
-			pos += cc;
+			return IOToolkit.readFully(is, -1, true);
 		}
-		return output;
 	}
 
 	public static long randomLong() {
 		return RND.nextLong();
 	}
