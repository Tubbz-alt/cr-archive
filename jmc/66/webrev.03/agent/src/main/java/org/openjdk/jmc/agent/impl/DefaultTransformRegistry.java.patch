diff a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
--- a/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
+++ b/agent/src/main/java/org/openjdk/jmc/agent/impl/DefaultTransformRegistry.java
@@ -30,10 +30,12 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.agent.impl;
 
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
 import java.io.InputStream;
 import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -43,23 +45,30 @@
 import java.util.Map.Entry;
 import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import javax.xml.XMLConstants;
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLInputFactory;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
+import javax.xml.transform.stream.StreamSource;
+import javax.xml.validation.Schema;
+import javax.xml.validation.SchemaFactory;
+import javax.xml.validation.Validator;
 
 import org.openjdk.jmc.agent.Method;
 import org.openjdk.jmc.agent.Parameter;
 import org.openjdk.jmc.agent.ReturnValue;
 import org.openjdk.jmc.agent.TransformDescriptor;
 import org.openjdk.jmc.agent.TransformRegistry;
 import org.openjdk.jmc.agent.Field;
 import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;
+import org.openjdk.jmc.agent.util.IOToolkit;
 import org.openjdk.jmc.agent.util.TypeUtils;
+import org.xml.sax.SAXException;
 
 public class DefaultTransformRegistry implements TransformRegistry {
 	private static final String XML_ATTRIBUTE_NAME_ID = "id"; //$NON-NLS-1$
 	private static final String XML_ELEMENT_NAME_EVENT = "event"; //$NON-NLS-1$
 	private static final String XML_ELEMENT_METHOD_NAME = "method"; //$NON-NLS-1$
@@ -77,10 +86,23 @@
 	// First step in update should be to check if we even have transformations for the given class
 	private final HashMap<String, List<TransformDescriptor>> transformData = new HashMap<>();
 
 	private volatile boolean revertInstrumentation = false;
 
+	private static final String PROBE_SCHEMA_XSD = "jfrprobes_schema.xsd"; //$NON-NLS-1$
+	private static final Schema PROBE_SCHEMA;
+
+	static {
+		try {
+			SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
+			PROBE_SCHEMA = factory
+					.newSchema(new StreamSource(DefaultTransformRegistry.class.getResourceAsStream(PROBE_SCHEMA_XSD)));
+		} catch (SAXException e) {
+			throw new ExceptionInInitializerError(e);
+		}
+	}
+
 	@Override
 	public boolean hasPendingTransforms(String className) {
 		List<TransformDescriptor> transforms = transformData.get(className);
 		if (transforms == null || !isPendingTransforms(transforms)) {
 			return false;
@@ -90,15 +112,40 @@
 
 	public static TransformRegistry empty() {
 		return new DefaultTransformRegistry();
 	}
 
+	public static void validateProbeDefinition(InputStream in) throws XMLStreamException {
+		try {
+			Validator validator = PROBE_SCHEMA.newValidator();
+			validator.validate(new StreamSource(in));
+		} catch (IOException | SAXException e) {
+			throw new XMLStreamException(e);
+		}
+	}
+
+	public static void validateProbeDefinition(String configuration) throws XMLStreamException {
+		validateProbeDefinition(new ByteArrayInputStream(configuration.getBytes()));
+	}
+
 	public static TransformRegistry from(InputStream in) throws XMLStreamException {
+		byte[] buf;
+		InputStream configuration;
+		try {
+			buf = IOToolkit.readFully(in, -1, true);
+			configuration = new ByteArrayInputStream(buf);
+			configuration.mark(0);
+			validateProbeDefinition(configuration);
+			configuration.reset();
+		} catch (IOException e) {
+			throw new XMLStreamException(e);
+		}
+
 		HashMap<String, String> globalDefaults = new HashMap<>();
 		DefaultTransformRegistry registry = new DefaultTransformRegistry();
 		XMLInputFactory inputFactory = XMLInputFactory.newInstance();
-		XMLStreamReader streamReader = inputFactory.createXMLStreamReader(in);
+		XMLStreamReader streamReader = inputFactory.createXMLStreamReader(configuration);
 		while (streamReader.hasNext()) {
 			if (streamReader.isStartElement()) {
 				QName element = streamReader.getName();
 				if (XML_ELEMENT_NAME_EVENT.equals(element.getLocalPart())) {
 					TransformDescriptor td = parseTransformData(streamReader, globalDefaults);
@@ -420,10 +467,12 @@
 		return builder.toString();
 	}
 
 	public List<TransformDescriptor> modify(String xmlDescription) {
 		try  {
+			validateProbeDefinition(xmlDescription);
+
 			List<TransformDescriptor> tds = new ArrayList<TransformDescriptor>();
 			StringReader reader = new StringReader(xmlDescription);
 			XMLInputFactory inputFactory = XMLInputFactory.newInstance();
 			XMLStreamReader streamReader = inputFactory.createXMLStreamReader(reader);
 			HashMap<String, String> globalDefaults = new HashMap<String, String>();
