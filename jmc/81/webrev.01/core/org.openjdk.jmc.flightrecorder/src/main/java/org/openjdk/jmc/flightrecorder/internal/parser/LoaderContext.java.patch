diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/LoaderContext.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/LoaderContext.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/LoaderContext.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/LoaderContext.java
@@ -32,19 +32,24 @@
  */
 package org.openjdk.jmc.flightrecorder.internal.parser;
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
 import org.openjdk.jmc.common.item.IAttribute;
 import org.openjdk.jmc.common.item.IItem;
+import org.openjdk.jmc.common.unit.IQuantity;
+import org.openjdk.jmc.common.unit.IRange;
 import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
 import org.openjdk.jmc.flightrecorder.internal.EventArray;
+import org.openjdk.jmc.flightrecorder.internal.EventArrays;
 import org.openjdk.jmc.flightrecorder.internal.parser.RepositoryBuilder.EventTypeEntry;
 import org.openjdk.jmc.flightrecorder.internal.util.CanonicalConstantMap;
 import org.openjdk.jmc.flightrecorder.parser.IEventSinkFactory;
 import org.openjdk.jmc.flightrecorder.parser.IParserExtension;
 
@@ -56,20 +61,22 @@
 	private final RepositoryBuilder repositoryBuilder = new RepositoryBuilder();
 	private final IEventSinkFactory sinkFactory;
 	private final ConcurrentHashMap<Object, CanonicalConstantMap<Object>> constantsByType = new ConcurrentHashMap<>();
 	private final boolean hideExperimentals;
 	private final List<? extends IParserExtension> extensions;
+	private final Set<IRange<IQuantity>> chunkRanges;
 
 	public LoaderContext(List<? extends IParserExtension> extensions, boolean hideExperimentals) {
 		this.extensions = extensions;
 		this.hideExperimentals = hideExperimentals;
 		IEventSinkFactory sinkFactory = repositoryBuilder;
 		// Traverse the list in reverse order so that the first element will create outermost sink factory
 		for (int i = extensions.size() - 1; i >= 0; i--) {
 			sinkFactory = extensions.get(i).getEventSinkFactory(sinkFactory);
 		}
 		this.sinkFactory = sinkFactory;
+		this.chunkRanges = new HashSet<>();
 	}
 
 	public CanonicalConstantMap<Object> getConstantPool(Object poolKey) {
 		CanonicalConstantMap<Object> newMap = new CanonicalConstantMap<>();
 		CanonicalConstantMap<Object> existing = constantsByType.putIfAbsent(poolKey, newMap);
@@ -92,12 +99,16 @@
 
 	public IEventSinkFactory getSinkFactory() {
 		return sinkFactory;
 	}
 
+	public void addChunkRange(IRange<IQuantity> chunkRange) {
+		this.chunkRanges.add(chunkRange);
+	}
+
 	@SuppressWarnings("deprecation")
-	public EventArray[] buildEventArrays() throws CouldNotLoadRecordingException {
+	public EventArrays buildEventArrays() throws CouldNotLoadRecordingException {
 		sinkFactory.flush();
 		Iterator<EventTypeEntry> eventTypes = repositoryBuilder.getEventTypes();
 		ArrayList<EventArray> eventArrays = new ArrayList<>();
 		while (eventTypes.hasNext()) {
 			EventTypeEntry ete = eventTypes.next();
@@ -121,9 +132,9 @@
 					eventArrays.add(new EventArray(ea, ete.eventType, ete.category));
 				}
 			}
 
 		}
-		return eventArrays.toArray(new EventArray[eventArrays.size()]);
+		return new EventArrays(eventArrays.toArray(new EventArray[eventArrays.size()]), chunkRanges);
 	}
 
 }
