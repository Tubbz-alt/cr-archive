diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/SingleEntryItemCollection.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/SingleEntryItemCollection.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/SingleEntryItemCollection.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/SingleEntryItemCollection.java
@@ -34,19 +34,22 @@
 
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.NoSuchElementException;
+import java.util.Set;
 
 import org.openjdk.jmc.common.IPredicate;
 import org.openjdk.jmc.common.item.IAggregator;
 import org.openjdk.jmc.common.item.IItem;
 import org.openjdk.jmc.common.item.IItemCollection;
 import org.openjdk.jmc.common.item.IItemConsumer;
 import org.openjdk.jmc.common.item.IItemFilter;
 import org.openjdk.jmc.common.item.IItemIterable;
 import org.openjdk.jmc.common.item.IType;
+import org.openjdk.jmc.common.unit.IQuantity;
+import org.openjdk.jmc.common.unit.IRange;
 
 /**
  * Implementation helper class for handling a singular {@link IItem} as an {@link IItemCollection}.
  */
 final class SingleEntryItemCollection implements IItemCollection {
@@ -68,10 +71,15 @@
 
 		@Override
 		public IItemCollection apply(IItemFilter filter) {
 			return this;
 		}
+
+		@Override
+		public Set<IRange<IQuantity>> getChunkRanges() {
+			return null;
+		}
 	};
 
 	private static final IItemIterable NULLITERABLE = new IItemIterable() {
 		@Override
 		public Iterator<IItem> iterator() {
@@ -166,13 +174,15 @@
 			return NULLITERABLE;
 		}
 	}
 
 	private final IItem item;
+	private final Set<IRange<IQuantity>> chunkRanges;
 
-	SingleEntryItemCollection(IItem item) {
+	SingleEntryItemCollection(IItem item, Set<IRange<IQuantity>> chunkRanges) {
 		this.item = item;
+		this.chunkRanges = chunkRanges;
 	}
 
 	@Override
 	public Iterator<IItemIterable> iterator() {
 		return new SingleEntryIteratorOfIterable(item);
@@ -215,6 +225,11 @@
 
 	@Override
 	public boolean hasItems() {
 		return true;
 	}
+
+	@Override
+	public Set<IRange<IQuantity>> getChunkRanges() {
+		return chunkRanges;
+	}
 }
