diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/FlightRecordingLoader.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/FlightRecordingLoader.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/FlightRecordingLoader.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/FlightRecordingLoader.java
@@ -70,11 +70,11 @@
 	private static final short VERSION_0 = 0; // JDK7 & JDK8
 	private static final short VERSION_1 = 1; // JDK9 & JDK10
 	private static final short VERSION_2 = 2; // JDK11
 	private static final byte[] FLIGHT_RECORDER_MAGIC = {'F', 'L', 'R', '\0'};
 
-	public static EventArray[] loadStream(InputStream stream, boolean hideExperimentals, boolean ignoreTruncatedChunk)
+	public static EventArrays loadStream(InputStream stream, boolean hideExperimentals, boolean ignoreTruncatedChunk)
 			throws CouldNotLoadRecordingException, IOException {
 		return loadStream(stream, ParserExtensionRegistry.getParserExtensions(), hideExperimentals,
 				ignoreTruncatedChunk);
 	}
 
@@ -88,11 +88,11 @@
 	 * @param hideExperimentals
 	 *            if {@code true}, then events of types marked as experimental will be ignored when
 	 *            reading the data
 	 * @return an array of EventArrays (one event type per EventArray)
 	 */
-	public static EventArray[] loadStream(
+	public static EventArrays loadStream(
 		InputStream stream, List<? extends IParserExtension> extensions, boolean hideExperimentals,
 		boolean ignoreTruncatedChunk) throws CouldNotLoadRecordingException, IOException {
 		return readChunks(null, extensions, createChunkSupplier(stream), hideExperimentals, ignoreTruncatedChunk);
 	}
 
@@ -183,18 +183,18 @@
 		default:
 			throw new VersionNotSupportedException();
 		}
 	}
 
-	public static EventArray[] readChunks(
+	public static EventArrays readChunks(
 		Runnable monitor, IChunkSupplier chunkSupplier, boolean hideExperimentals, boolean ignoreTruncatedChunk)
 			throws CouldNotLoadRecordingException, IOException {
 		return readChunks(monitor, ParserExtensionRegistry.getParserExtensions(), chunkSupplier, hideExperimentals,
 				ignoreTruncatedChunk);
 	}
 
-	public static EventArray[] readChunks(
+	public static EventArrays readChunks(
 		Runnable monitor, List<? extends IParserExtension> extensions, IChunkSupplier chunkSupplier,
 		boolean hideExperimentals, boolean ignoreTruncatedChunk) throws CouldNotLoadRecordingException, IOException {
 		LoaderContext context = new LoaderContext(extensions, hideExperimentals);
 		Runtime rt = Runtime.getRuntime();
 		long availableMemory = rt.maxMemory() - rt.totalMemory() + rt.freeMemory();
