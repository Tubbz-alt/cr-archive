diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/ItemCollectionToolkit.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/ItemCollectionToolkit.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/ItemCollectionToolkit.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/ItemCollectionToolkit.java
@@ -32,15 +32,17 @@
  */
 package org.openjdk.jmc.flightrecorder.ui;
 
 import java.text.MessageFormat;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Optional;
+import java.util.Set;
 import java.util.Spliterator;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
@@ -54,23 +56,27 @@
 import org.openjdk.jmc.common.item.IItemIterable;
 import org.openjdk.jmc.common.item.IMemberAccessor;
 import org.openjdk.jmc.common.item.IType;
 import org.openjdk.jmc.common.item.ItemFilters;
 import org.openjdk.jmc.common.item.ItemToolkit;
+import org.openjdk.jmc.common.unit.IQuantity;
+import org.openjdk.jmc.common.unit.IRange;
 import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;
 
 /**
  * Toolkit class for working with IItemCollection instances
  */
 public class ItemCollectionToolkit {
 
 	private static class StreamBackedItemCollection implements IItemCollection {
 
 		private final Supplier<Stream<IItemIterable>> items;
+		private final Set<IRange<IQuantity>> chunkRanges;
 
-		StreamBackedItemCollection(Supplier<Stream<IItemIterable>> items) {
+		StreamBackedItemCollection(Supplier<Stream<IItemIterable>> items, Set<IRange<IQuantity>> chunkRanges) {
 			this.items = items;
+			this.chunkRanges = chunkRanges;
 		}
 
 		@Override
 		public Iterator<IItemIterable> iterator() {
 			return items.get().iterator();
@@ -81,11 +87,11 @@
 			return items.get().spliterator();
 		}
 
 		@Override
 		public StreamBackedItemCollection apply(IItemFilter filter) {
-			return new StreamBackedItemCollection(() -> ItemIterableToolkit.filter(items.get(), filter));
+			return new StreamBackedItemCollection(() -> ItemIterableToolkit.filter(items.get(), filter), chunkRanges);
 		}
 
 		@Override
 		public <V, C extends IItemConsumer<C>> V getAggregate(IAggregator<V, C> aggregator) {
 			return ItemIterableToolkit.aggregate(aggregator, items.get());
@@ -94,27 +100,43 @@
 		@Override
 		public boolean hasItems() {
 			return items.get().anyMatch(IItemIterable::hasItems);
 		}
 
+		@Override
+		public Set<IRange<IQuantity>> getChunkRanges() {
+			return chunkRanges;
+		}
+
 	}
 
-	public static final IItemCollection EMPTY = new StreamBackedItemCollection(() -> Stream.empty());
+	public static final IItemCollection EMPTY = new StreamBackedItemCollection(() -> Stream.empty(),
+			Collections.emptySet());
 
-	public static IItemCollection build(Stream<? extends IItem> items) {
+	public static IItemCollection build(Stream<? extends IItem> items, Set<IRange<IQuantity>> chunkRanges) {
 		Map<IType<IItem>, List<IItem>> byTypeMap = items.collect(Collectors.groupingBy(ItemToolkit::getItemType));
 		List<Entry<IType<IItem>, List<IItem>>> entryList = new ArrayList<>(byTypeMap.entrySet());
 		return ItemCollectionToolkit
 				.build(() -> entryList.stream().map(e -> ItemIterableToolkit.build(e.getValue()::stream, e.getKey())));
 	}
 
+	public static IItemCollection build(Stream<? extends IItem> items) {
+		return build(items, Collections.emptySet());
+	}
+
+	public static IItemCollection build(Supplier<Stream<IItemIterable>> items, Set<IRange<IQuantity>> chunkRanges) {
+		return new StreamBackedItemCollection(items, Collections.emptySet());
+	}
+
 	public static IItemCollection build(Supplier<Stream<IItemIterable>> items) {
-		return new StreamBackedItemCollection(items);
+		return build(items, Collections.emptySet());
 	}
 
 	public static IItemCollection merge(Supplier<Stream<IItemCollection>> items) {
-		return ItemCollectionToolkit.build(() -> items.get().flatMap(ItemCollectionToolkit::stream));
+		Set<IRange<IQuantity>> chunkRanges = items.get().flatMap(i -> i.getChunkRanges().stream())
+				.collect(Collectors.toSet());
+		return ItemCollectionToolkit.build(() -> items.get().flatMap(ItemCollectionToolkit::stream), chunkRanges);
 	}
 
 	public static <V> Optional<IItemIterable> join(IItemCollection items, String withTypeId) {
 		IItemCollection itemsWithType = items.apply(ItemFilters.type(withTypeId));
 		return ItemCollectionToolkit.stream(itemsWithType).findAny()
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/JfrEditor.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/JfrEditor.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/JfrEditor.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/JfrEditor.java
@@ -76,10 +76,11 @@
 import org.openjdk.jmc.common.item.IItemCollection;
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.IRange;
 import org.openjdk.jmc.common.util.ExceptionToolkit;
 import org.openjdk.jmc.flightrecorder.internal.EventArray;
+import org.openjdk.jmc.flightrecorder.internal.EventArrays;
 import org.openjdk.jmc.flightrecorder.ui.common.ImageConstants;
 import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;
 import org.openjdk.jmc.flightrecorder.ui.preferences.PreferenceKeys;
 import org.openjdk.jmc.flightrecorder.ui.selection.IFlavoredSelection;
 import org.openjdk.jmc.flightrecorder.ui.selection.SelectionStore;
@@ -371,11 +372,11 @@
 	public void setInput(IEditorInput ei) {
 		super.setInput(ei);
 		setPartName(ei.getName());
 	}
 
-	void repositoryLoaded(EventArray[] repo, IRange<IQuantity> fullRange) {
+	void repositoryLoaded(EventArrays repo, IRange<IQuantity> fullRange) {
 		if (!resultContainer.isDisposed()) {
 			items = new StreamModel(repo);
 			this.fullRange = fullRange;
 			try {
 				getSite().getPage().showView(CONTENT_OUTLINE_VIEW_ID, null, IWorkbenchPage.VIEW_VISIBLE);
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/RecordingLoader.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/RecordingLoader.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/RecordingLoader.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/RecordingLoader.java
@@ -62,10 +62,11 @@
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
 import org.openjdk.jmc.flightrecorder.internal.ChunkInfo;
 import org.openjdk.jmc.flightrecorder.internal.EventArray;
+import org.openjdk.jmc.flightrecorder.internal.EventArrays;
 import org.openjdk.jmc.flightrecorder.internal.FlightRecordingLoader;
 import org.openjdk.jmc.flightrecorder.internal.NotEnoughMemoryException;
 import org.openjdk.jmc.flightrecorder.internal.VersionNotSupportedException;
 import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;
 import org.openjdk.jmc.ui.MCPathEditorInput;
@@ -91,11 +92,11 @@
 	protected IStatus run(IProgressMonitor monitor) {
 		IEditorInput ei = editor.getEditorInput();
 		boolean closeEditor = true;
 		try {
 			File file = MCPathEditorInput.getFile(ei);
-			EventArray[] events = doCreateRecording(file, new ProgressMonitor(monitor, ui));
+			EventArrays events = doCreateRecording(file, new ProgressMonitor(monitor, ui));
 			checkForJRockitRecording(events);
 			onRecordingLoaded(events);
 			closeEditor = false;
 			return Status.OK_STATUS;
 		} catch (VersionNotSupportedException e) {
@@ -112,14 +113,14 @@
 				WorkbenchToolkit.asyncCloseEditor(editor);
 			}
 		}
 	}
 
-	private void onRecordingLoaded(EventArray[] events) {
+	private void onRecordingLoaded(EventArrays events) {
 		IQuantity startTime = null;
 		IQuantity endTime = null;
-		for (EventArray typeEntry : events) {
+		for (EventArray typeEntry : events.getArrays()) {
 			IItem[] ea = typeEntry.getEvents();
 			IMemberAccessor<IQuantity, IItem> stAccessor = JfrAttributes.START_TIME.getAccessor(typeEntry.getType());
 			IMemberAccessor<IQuantity, IItem> etAccessor = JfrAttributes.END_TIME.getAccessor(typeEntry.getType());
 			if (ea.length > 0 && stAccessor != null && etAccessor != null) {
 				IQuantity arrayStart = stAccessor.getMember(ea[0]);
@@ -157,11 +158,11 @@
 				editor.repositoryLoaded(events, fullRange);
 			}
 		});
 	}
 
-	private EventArray[] doCreateRecording(File file, ProgressMonitor lm)
+	private EventArrays doCreateRecording(File file, ProgressMonitor lm)
 			throws CouldNotLoadRecordingException, IOException {
 		// FIXME: Can we calculate available memory without resorting to System.gc?
 		System.gc();
 		Runtime runtime = Runtime.getRuntime();
 		long availableMemory = runtime.maxMemory() - runtime.totalMemory() + runtime.freeMemory();
@@ -179,12 +180,12 @@
 			file = unzipFile(file);
 		}
 		return loadFromUnzippedFile(file, fileName, lm, availableMemory);
 	}
 
-	private static void checkForJRockitRecording(EventArray[] events) {
-		for (EventArray ea : events) {
+	private static void checkForJRockitRecording(EventArrays events) {
+		for (EventArray ea : events.getArrays()) {
 			if (ea.getType().getIdentifier().startsWith("http://www.oracle.com/jrockit/")) { //$NON-NLS-1$
 				DisplayToolkit.safeSyncExec(new Runnable() {
 					@Override
 					public void run() {
 						DialogToolkit.showError(Display.getCurrent().getActiveShell(),
@@ -194,11 +195,11 @@
 				throw new OperationCanceledException();
 			}
 		}
 	}
 
-	private EventArray[] loadFromUnzippedFile(
+	private EventArrays loadFromUnzippedFile(
 		File unzippedFile, String recordingFileName, ProgressMonitor lm, long availableMemory)
 			throws IOException, CouldNotLoadRecordingException {
 		boolean hideExperimentals = !FlightRecorderUI.getDefault().includeExperimentalEventsAndFields();
 		boolean ignoreTruncatedChunk = FlightRecorderUI.getDefault().allowIncompleteRecordingFile();
 		try (RandomAccessFile raf = new RandomAccessFile(unzippedFile, "r")) { //$NON-NLS-1$
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/StreamModel.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/StreamModel.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/StreamModel.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/StreamModel.java
@@ -33,10 +33,11 @@
 package org.openjdk.jmc.flightrecorder.ui;
 
 import java.util.Arrays;
 import java.util.Map;
 import java.util.Objects;
+import java.util.Set;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
@@ -51,18 +52,21 @@
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.IRange;
 import org.openjdk.jmc.common.util.PredicateToolkit;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
 import org.openjdk.jmc.flightrecorder.internal.EventArray;
+import org.openjdk.jmc.flightrecorder.internal.EventArrays;
 import org.openjdk.jmc.flightrecorder.ui.EventTypeFolderNode.TypeWithCategory;
 
 public class StreamModel {
 
 	private final EventArray[] eventsByType;
+	private final Set<IRange<IQuantity>> chunkRanges;
 
-	StreamModel(EventArray[] eventsByType) {
-		this.eventsByType = eventsByType;
+	StreamModel(EventArrays eventsByType) {
+		this.eventsByType = eventsByType.getArrays();
+		this.chunkRanges = eventsByType.getChunkTimeranges();
 	}
 
 	public IItemCollection getItems(IRange<IQuantity> range, IItemFilter filter) {
 		IItemIterable[] rangedStreams = Stream.of(eventsByType).map(ea -> {
 			IType<IItem> eventType = ea.getType();
@@ -74,21 +78,26 @@
 			} else {
 				return ItemIterableToolkit.build(itemSupplier(ea.getEvents(), eventType, range, predicate::evaluate),
 						eventType);
 			}
 		}).filter(Objects::nonNull).toArray(IItemIterable[]::new);
-		return ItemCollectionToolkit.build(() -> Arrays.stream(rangedStreams));
+		return ItemCollectionToolkit.build(() -> Arrays.stream(rangedStreams), chunkRanges);
 	}
 
 	public IItemCollection getItems(IRange<IQuantity> range) {
-		return ItemCollectionToolkit.build(() -> Arrays.stream(eventsByType).map(ea -> ItemIterableToolkit
-				.build(() -> itemSupplier(ea.getEvents(), ea.getType(), range).get(), ea.getType())));
+		return ItemCollectionToolkit.build(
+				() -> Arrays.stream(eventsByType)
+						.map(ea -> ItemIterableToolkit
+								.build(() -> itemSupplier(ea.getEvents(), ea.getType(), range).get(), ea.getType())),
+				chunkRanges);
 	}
 
 	public IItemCollection getItems() {
-		return ItemCollectionToolkit.build(() -> Arrays.stream(eventsByType)
-				.map(ea -> ItemIterableToolkit.build(() -> Arrays.stream(ea.getEvents()), ea.getType())));
+		return ItemCollectionToolkit.build(
+				() -> Arrays.stream(eventsByType)
+						.map(ea -> ItemIterableToolkit.build(() -> Arrays.stream(ea.getEvents()), ea.getType())),
+				chunkRanges);
 	}
 
 	private static Supplier<Stream<IItem>> itemSupplier(IItem[] events, IType<IItem> ofType, IRange<IQuantity> range) {
 		int start = findStart(events, ofType, range.getStart());
 		int end = findEnd(events, ofType, range.getEnd());
diff a/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrMetadataToolkit.java b/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrMetadataToolkit.java
--- a/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrMetadataToolkit.java
+++ b/application/uitests/org.openjdk.jmc.flightrecorder.uitest/src/test/java/org/openjdk/jmc/flightrecorder/uitest/JfrMetadataToolkit.java
@@ -39,20 +39,21 @@
 import java.util.TreeMap;
 
 import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.common.item.IAccessorKey;
 import org.openjdk.jmc.flightrecorder.internal.EventArray;
+import org.openjdk.jmc.flightrecorder.internal.EventArrays;
 import org.openjdk.jmc.flightrecorder.internal.FlightRecordingLoader;
 
 @SuppressWarnings("restriction")
 public class JfrMetadataToolkit {
 
 	protected static SortedMap<String, SortedMap<String, String>> parseRecordingFile(File recordingFile) {
 		SortedMap<String, SortedMap<String, String>> eventTypeMap = new TreeMap<>();
 		try (InputStream stream = IOToolkit.openUncompressedStream(recordingFile)) {
-			EventArray[] eventArrays = FlightRecordingLoader.loadStream(stream, false, false);
-			for (EventArray entry : eventArrays) {
+			EventArrays eventArrays = FlightRecordingLoader.loadStream(stream, false, false);
+			for (EventArray entry : eventArrays.getArrays()) {
 				SortedMap<String, String> attrs = new TreeMap<>();
 				for (IAccessorKey<?> a : entry.getType().getAccessorKeys().keySet()) {
 					attrs.put(a.getIdentifier(), a.getContentType().getIdentifier());
 				}
 				String eventTypeId = entry.getType().getIdentifier();
diff a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/item/IItemCollection.java b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/item/IItemCollection.java
--- a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/item/IItemCollection.java
+++ b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/item/IItemCollection.java
@@ -30,10 +30,15 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.common.item;
 
+import java.util.Set;
+
+import org.openjdk.jmc.common.unit.IQuantity;
+import org.openjdk.jmc.common.unit.IRange;
+
 /**
  * An immutable collection of items.
  */
 public interface IItemCollection extends Iterable<IItemIterable> {
 
@@ -61,6 +66,16 @@
 
 	/**
 	 * @return {@code true} if the collections contains items, {@code false} otherwise
 	 */
 	boolean hasItems();
+
+	/**
+	 * Returns a set of IRange representations of the time ranges of all chunks represented by this
+	 * item collection. This set is not affected by any filtering operations on the item collection
+	 * since its use is to show the time ranges in which events could possibly have been emitted.
+	 * 
+	 * @return a set of IRange objects representing the time ranges of the chunks represented by
+	 *         this IItemCollection
+	 */
+	Set<IRange<IQuantity>> getChunkRanges();
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/DefaultIItemResultSet.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/DefaultIItemResultSet.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/DefaultIItemResultSet.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/DefaultIItemResultSet.java
@@ -84,11 +84,12 @@
 					int column = 0;
 					for (; column < attributes.size(); column++) {
 						row[column] = accessors[column].getMember(item);
 					}
 					for (int j = 0; j < aggregators.size(); j++) {
-						row[column + j] = new SingleEntryItemCollection(item).getAggregate(aggregators.get(j));
+						row[column + j] = new SingleEntryItemCollection(item, input.getChunkRanges())
+								.getAggregate(aggregators.get(j));
 					}
 					data.add(row);
 				}
 			}
 		} else {
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/SingleEntryItemCollection.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/SingleEntryItemCollection.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/SingleEntryItemCollection.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/SingleEntryItemCollection.java
@@ -34,19 +34,22 @@
 
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.NoSuchElementException;
+import java.util.Set;
 
 import org.openjdk.jmc.common.IPredicate;
 import org.openjdk.jmc.common.item.IAggregator;
 import org.openjdk.jmc.common.item.IItem;
 import org.openjdk.jmc.common.item.IItemCollection;
 import org.openjdk.jmc.common.item.IItemConsumer;
 import org.openjdk.jmc.common.item.IItemFilter;
 import org.openjdk.jmc.common.item.IItemIterable;
 import org.openjdk.jmc.common.item.IType;
+import org.openjdk.jmc.common.unit.IQuantity;
+import org.openjdk.jmc.common.unit.IRange;
 
 /**
  * Implementation helper class for handling a singular {@link IItem} as an {@link IItemCollection}.
  */
 final class SingleEntryItemCollection implements IItemCollection {
@@ -68,10 +71,15 @@
 
 		@Override
 		public IItemCollection apply(IItemFilter filter) {
 			return this;
 		}
+
+		@Override
+		public Set<IRange<IQuantity>> getChunkRanges() {
+			return null;
+		}
 	};
 
 	private static final IItemIterable NULLITERABLE = new IItemIterable() {
 		@Override
 		public Iterator<IItem> iterator() {
@@ -166,13 +174,15 @@
 			return NULLITERABLE;
 		}
 	}
 
 	private final IItem item;
+	private final Set<IRange<IQuantity>> chunkRanges;
 
-	SingleEntryItemCollection(IItem item) {
+	SingleEntryItemCollection(IItem item, Set<IRange<IQuantity>> chunkRanges) {
 		this.item = item;
+		this.chunkRanges = chunkRanges;
 	}
 
 	@Override
 	public Iterator<IItemIterable> iterator() {
 		return new SingleEntryIteratorOfIterable(item);
@@ -215,6 +225,11 @@
 
 	@Override
 	public boolean hasItems() {
 		return true;
 	}
+
+	@Override
+	public Set<IRange<IQuantity>> getChunkRanges() {
+		return chunkRanges;
+	}
 }
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/EventCollection.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/EventCollection.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/EventCollection.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/EventCollection.java
@@ -46,12 +46,15 @@
 import org.openjdk.jmc.common.item.IItemCollection;
 import org.openjdk.jmc.common.item.IItemConsumer;
 import org.openjdk.jmc.common.item.IItemFilter;
 import org.openjdk.jmc.common.item.IItemIterable;
 import org.openjdk.jmc.common.item.IType;
+import org.openjdk.jmc.common.unit.IQuantity;
+import org.openjdk.jmc.common.unit.IRange;
 import org.openjdk.jmc.common.util.PredicateToolkit;
 import org.openjdk.jmc.flightrecorder.internal.EventArray;
+import org.openjdk.jmc.flightrecorder.internal.EventArrays;
 
 /**
  * Java 1.7 based implementation of {@link IItemCollection} using {@link IItemIterable} iterators.
  * This class is only intended to be used as an IItemCollection outside of the usage in
  * {@link JfrLoaderToolkit}.
@@ -110,22 +113,24 @@
 
 	}
 
 	private final Set<IType<IItem>> types = new HashSet<>();
 	private final ArrayList<EventTypeEntry> items;
+	private final Set<IRange<IQuantity>> chunkRanges;
 
-	static IItemCollection build(EventArray[] events) {
-		ArrayList<EventTypeEntry> items = new ArrayList<>(events.length);
-		for (EventArray ea : events) {
+	static IItemCollection build(EventArrays events) {
+		ArrayList<EventTypeEntry> items = new ArrayList<>(events.getArrays().length);
+		for (EventArray ea : events.getArrays()) {
 			EventTypeEntry entry = new EventTypeEntry(ea);
 			items.add(entry);
 		}
-		return new EventCollection(items);
+		return new EventCollection(items, events.getChunkTimeranges());
 	}
 
-	private EventCollection(ArrayList<EventTypeEntry> items) {
+	private EventCollection(ArrayList<EventTypeEntry> items, Set<IRange<IQuantity>> chunkRanges) {
 		this.items = items;
+		this.chunkRanges = chunkRanges;
 		for (EventTypeEntry e : items) {
 			types.add(e.events.getType());
 		}
 	}
 
@@ -138,11 +143,11 @@
 				newEntries.add(e);
 			} else if (!PredicateToolkit.isFalseGuaranteed(newEntry.predicate)) {
 				newEntries.add(newEntry);
 			}
 		}
-		return new EventCollection(newEntries);
+		return new EventCollection(newEntries, chunkRanges);
 	}
 
 	private static Iterator<IItem> buildIterator(IItem[] array, IPredicate<? super IItem> filter) {
 		if (isFiltered(filter)) {
 			return IteratorToolkit.filter(IteratorToolkit.of(array), filter);
@@ -212,6 +217,11 @@
 			public void remove() {
 				throw new UnsupportedOperationException();
 			}
 		});
 	}
+
+	@Override
+	public Set<IRange<IQuantity>> getChunkRanges() {
+		return chunkRanges;
+	}
 }
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/JfrLoaderToolkit.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/JfrLoaderToolkit.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/JfrLoaderToolkit.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/JfrLoaderToolkit.java
@@ -41,10 +41,11 @@
 import java.util.List;
 
 import org.openjdk.jmc.common.io.IOToolkit;
 import org.openjdk.jmc.common.item.IItemCollection;
 import org.openjdk.jmc.flightrecorder.internal.EventArray;
+import org.openjdk.jmc.flightrecorder.internal.EventArrays;
 import org.openjdk.jmc.flightrecorder.internal.FlightRecordingLoader;
 import org.openjdk.jmc.flightrecorder.parser.IParserExtension;
 import org.openjdk.jmc.flightrecorder.parser.ParserExtensionRegistry;
 
 /**
@@ -56,13 +57,13 @@
 	/**
 	 * @param files
 	 *            the files to read the recording from
 	 * @param extensions
 	 *            the extensions to use when parsing the file
-	 * @return an array of EventArrays (one event type per EventArray)
+	 * @return an object holding an array of EventArrays (one event type per EventArray)
 	 */
-	private static EventArray[] loadFile(List<File> files, List<? extends IParserExtension> extensions)
+	private static EventArrays loadFile(List<File> files, List<? extends IParserExtension> extensions)
 			throws IOException, CouldNotLoadRecordingException {
 		List<InputStream> streams = new ArrayList<>(files.size());
 		for (File file : files) {
 			streams.add(IOToolkit.openUncompressedStream(file));
 		}
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/EventArrays.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/EventArrays.java
--- /dev/null
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/EventArrays.java
@@ -0,0 +1,26 @@
+package org.openjdk.jmc.flightrecorder.internal;
+
+import java.util.Set;
+
+import org.openjdk.jmc.common.unit.IQuantity;
+import org.openjdk.jmc.common.unit.IRange;
+
+public class EventArrays {
+
+	private final EventArray[] arrays;
+	private final Set<IRange<IQuantity>> chunkTimeranges;
+
+	public EventArrays(EventArray[] arrays, Set<IRange<IQuantity>> ranges) {
+		this.arrays = arrays;
+		this.chunkTimeranges = ranges;
+	}
+
+	public EventArray[] getArrays() {
+		return arrays;
+	}
+
+	public Set<IRange<IQuantity>> getChunkTimeranges() {
+		return chunkTimeranges;
+	}
+
+}
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/FlightRecordingLoader.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/FlightRecordingLoader.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/FlightRecordingLoader.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/FlightRecordingLoader.java
@@ -70,11 +70,11 @@
 	private static final short VERSION_0 = 0; // JDK7 & JDK8
 	private static final short VERSION_1 = 1; // JDK9 & JDK10
 	private static final short VERSION_2 = 2; // JDK11
 	private static final byte[] FLIGHT_RECORDER_MAGIC = {'F', 'L', 'R', '\0'};
 
-	public static EventArray[] loadStream(InputStream stream, boolean hideExperimentals, boolean ignoreTruncatedChunk)
+	public static EventArrays loadStream(InputStream stream, boolean hideExperimentals, boolean ignoreTruncatedChunk)
 			throws CouldNotLoadRecordingException, IOException {
 		return loadStream(stream, ParserExtensionRegistry.getParserExtensions(), hideExperimentals,
 				ignoreTruncatedChunk);
 	}
 
@@ -88,11 +88,11 @@
 	 * @param hideExperimentals
 	 *            if {@code true}, then events of types marked as experimental will be ignored when
 	 *            reading the data
 	 * @return an array of EventArrays (one event type per EventArray)
 	 */
-	public static EventArray[] loadStream(
+	public static EventArrays loadStream(
 		InputStream stream, List<? extends IParserExtension> extensions, boolean hideExperimentals,
 		boolean ignoreTruncatedChunk) throws CouldNotLoadRecordingException, IOException {
 		return readChunks(null, extensions, createChunkSupplier(stream), hideExperimentals, ignoreTruncatedChunk);
 	}
 
@@ -183,18 +183,18 @@
 		default:
 			throw new VersionNotSupportedException();
 		}
 	}
 
-	public static EventArray[] readChunks(
+	public static EventArrays readChunks(
 		Runnable monitor, IChunkSupplier chunkSupplier, boolean hideExperimentals, boolean ignoreTruncatedChunk)
 			throws CouldNotLoadRecordingException, IOException {
 		return readChunks(monitor, ParserExtensionRegistry.getParserExtensions(), chunkSupplier, hideExperimentals,
 				ignoreTruncatedChunk);
 	}
 
-	public static EventArray[] readChunks(
+	public static EventArrays readChunks(
 		Runnable monitor, List<? extends IParserExtension> extensions, IChunkSupplier chunkSupplier,
 		boolean hideExperimentals, boolean ignoreTruncatedChunk) throws CouldNotLoadRecordingException, IOException {
 		LoaderContext context = new LoaderContext(extensions, hideExperimentals);
 		Runtime rt = Runtime.getRuntime();
 		long availableMemory = rt.maxMemory() - rt.totalMemory() + rt.freeMemory();
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/LoaderContext.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/LoaderContext.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/LoaderContext.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/LoaderContext.java
@@ -32,19 +32,24 @@
  */
 package org.openjdk.jmc.flightrecorder.internal.parser;
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
 import org.openjdk.jmc.common.item.IAttribute;
 import org.openjdk.jmc.common.item.IItem;
+import org.openjdk.jmc.common.unit.IQuantity;
+import org.openjdk.jmc.common.unit.IRange;
 import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
 import org.openjdk.jmc.flightrecorder.internal.EventArray;
+import org.openjdk.jmc.flightrecorder.internal.EventArrays;
 import org.openjdk.jmc.flightrecorder.internal.parser.RepositoryBuilder.EventTypeEntry;
 import org.openjdk.jmc.flightrecorder.internal.util.CanonicalConstantMap;
 import org.openjdk.jmc.flightrecorder.parser.IEventSinkFactory;
 import org.openjdk.jmc.flightrecorder.parser.IParserExtension;
 
@@ -56,20 +61,22 @@
 	private final RepositoryBuilder repositoryBuilder = new RepositoryBuilder();
 	private final IEventSinkFactory sinkFactory;
 	private final ConcurrentHashMap<Object, CanonicalConstantMap<Object>> constantsByType = new ConcurrentHashMap<>();
 	private final boolean hideExperimentals;
 	private final List<? extends IParserExtension> extensions;
+	private final Set<IRange<IQuantity>> chunkRanges;
 
 	public LoaderContext(List<? extends IParserExtension> extensions, boolean hideExperimentals) {
 		this.extensions = extensions;
 		this.hideExperimentals = hideExperimentals;
 		IEventSinkFactory sinkFactory = repositoryBuilder;
 		// Traverse the list in reverse order so that the first element will create outermost sink factory
 		for (int i = extensions.size() - 1; i >= 0; i--) {
 			sinkFactory = extensions.get(i).getEventSinkFactory(sinkFactory);
 		}
 		this.sinkFactory = sinkFactory;
+		this.chunkRanges = new HashSet<>();
 	}
 
 	public CanonicalConstantMap<Object> getConstantPool(Object poolKey) {
 		CanonicalConstantMap<Object> newMap = new CanonicalConstantMap<>();
 		CanonicalConstantMap<Object> existing = constantsByType.putIfAbsent(poolKey, newMap);
@@ -92,12 +99,16 @@
 
 	public IEventSinkFactory getSinkFactory() {
 		return sinkFactory;
 	}
 
+	public void addChunkRange(IRange<IQuantity> chunkRange) {
+		this.chunkRanges.add(chunkRange);
+	}
+
 	@SuppressWarnings("deprecation")
-	public EventArray[] buildEventArrays() throws CouldNotLoadRecordingException {
+	public EventArrays buildEventArrays() throws CouldNotLoadRecordingException {
 		sinkFactory.flush();
 		Iterator<EventTypeEntry> eventTypes = repositoryBuilder.getEventTypes();
 		ArrayList<EventArray> eventArrays = new ArrayList<>();
 		while (eventTypes.hasNext()) {
 			EventTypeEntry ete = eventTypes.next();
@@ -121,9 +132,9 @@
 					eventArrays.add(new EventArray(ea, ete.eventType, ete.category));
 				}
 			}
 
 		}
-		return eventArrays.toArray(new EventArray[eventArrays.size()]);
+		return new EventArrays(eventArrays.toArray(new EventArray[eventArrays.size()]), chunkRanges);
 	}
 
 }
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ChunkLoaderV0.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ChunkLoaderV0.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ChunkLoaderV0.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ChunkLoaderV0.java
@@ -52,10 +52,11 @@
 		this.structure = structure;
 		this.data = data;
 		this.context = context;
 		// Read metadata
 		metadata = new ChunkMetadata(data, structure.getMetadataOffset());
+		context.addChunkRange(QuantityRange.createWithEnd(metadata.getStartTime(), metadata.getEndTime()));
 	}
 
 	@Override
 	public byte[] call() throws Exception {
 		// Read constants
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/ChunkLoaderV1.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/ChunkLoaderV1.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/ChunkLoaderV1.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/ChunkLoaderV1.java
@@ -54,10 +54,11 @@
 
 	public ChunkLoaderV1(ChunkStructure header, byte[] data, LoaderContext context) {
 		this.header = header;
 		this.data = data;
 		this.context = context;
+		context.addChunkRange(header.getChunkRange());
 	}
 
 	@Override
 	public byte[] call() throws Exception {
 		SeekableInputStream input = SeekableInputStream.build(data, header.isIntegersCompressed());
diff a/core/tests/org.openjdk.jmc.common.test/src/test/java/org/openjdk/jmc/common/test/mock/item/MockItemCollection.java b/core/tests/org.openjdk.jmc.common.test/src/test/java/org/openjdk/jmc/common/test/mock/item/MockItemCollection.java
--- a/core/tests/org.openjdk.jmc.common.test/src/test/java/org/openjdk/jmc/common/test/mock/item/MockItemCollection.java
+++ b/core/tests/org.openjdk.jmc.common.test/src/test/java/org/openjdk/jmc/common/test/mock/item/MockItemCollection.java
@@ -31,21 +31,25 @@
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.common.test.mock.item;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 
 import org.openjdk.jmc.common.collection.IteratorToolkit;
 import org.openjdk.jmc.common.item.IAggregator;
 import org.openjdk.jmc.common.item.IItem;
 import org.openjdk.jmc.common.item.IItemCollection;
 import org.openjdk.jmc.common.item.IItemConsumer;
 import org.openjdk.jmc.common.item.IItemFilter;
 import org.openjdk.jmc.common.item.IItemIterable;
 import org.openjdk.jmc.common.item.IType;
+import org.openjdk.jmc.common.unit.IQuantity;
+import org.openjdk.jmc.common.unit.IRange;
 
 public class MockItemCollection<T, CT extends IType<?>> implements IItemCollection {
 	private List<IItem> items = new ArrayList<>();
 	private IType<?> type;
 
@@ -119,6 +123,11 @@
 			public void remove() {
 				throw new UnsupportedOperationException();
 			}
 		});
 	}
+
+	@Override
+	public Set<IRange<IQuantity>> getChunkRanges() {
+		return Collections.emptySet();
+	}
 }
