diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/RecordingLoader.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/RecordingLoader.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/RecordingLoader.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/RecordingLoader.java
@@ -62,10 +62,11 @@
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
 import org.openjdk.jmc.flightrecorder.internal.ChunkInfo;
 import org.openjdk.jmc.flightrecorder.internal.EventArray;
+import org.openjdk.jmc.flightrecorder.internal.EventArrays;
 import org.openjdk.jmc.flightrecorder.internal.FlightRecordingLoader;
 import org.openjdk.jmc.flightrecorder.internal.NotEnoughMemoryException;
 import org.openjdk.jmc.flightrecorder.internal.VersionNotSupportedException;
 import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;
 import org.openjdk.jmc.ui.MCPathEditorInput;
@@ -91,11 +92,11 @@
 	protected IStatus run(IProgressMonitor monitor) {
 		IEditorInput ei = editor.getEditorInput();
 		boolean closeEditor = true;
 		try {
 			File file = MCPathEditorInput.getFile(ei);
-			EventArray[] events = doCreateRecording(file, new ProgressMonitor(monitor, ui));
+			EventArrays events = doCreateRecording(file, new ProgressMonitor(monitor, ui));
 			checkForJRockitRecording(events);
 			onRecordingLoaded(events);
 			closeEditor = false;
 			return Status.OK_STATUS;
 		} catch (VersionNotSupportedException e) {
@@ -112,14 +113,14 @@
 				WorkbenchToolkit.asyncCloseEditor(editor);
 			}
 		}
 	}
 
-	private void onRecordingLoaded(EventArray[] events) {
+	private void onRecordingLoaded(EventArrays events) {
 		IQuantity startTime = null;
 		IQuantity endTime = null;
-		for (EventArray typeEntry : events) {
+		for (EventArray typeEntry : events.getArrays()) {
 			IItem[] ea = typeEntry.getEvents();
 			IMemberAccessor<IQuantity, IItem> stAccessor = JfrAttributes.START_TIME.getAccessor(typeEntry.getType());
 			IMemberAccessor<IQuantity, IItem> etAccessor = JfrAttributes.END_TIME.getAccessor(typeEntry.getType());
 			if (ea.length > 0 && stAccessor != null && etAccessor != null) {
 				IQuantity arrayStart = stAccessor.getMember(ea[0]);
@@ -157,11 +158,11 @@
 				editor.repositoryLoaded(events, fullRange);
 			}
 		});
 	}
 
-	private EventArray[] doCreateRecording(File file, ProgressMonitor lm)
+	private EventArrays doCreateRecording(File file, ProgressMonitor lm)
 			throws CouldNotLoadRecordingException, IOException {
 		// FIXME: Can we calculate available memory without resorting to System.gc?
 		System.gc();
 		Runtime runtime = Runtime.getRuntime();
 		long availableMemory = runtime.maxMemory() - runtime.totalMemory() + runtime.freeMemory();
@@ -179,12 +180,12 @@
 			file = unzipFile(file);
 		}
 		return loadFromUnzippedFile(file, fileName, lm, availableMemory);
 	}
 
-	private static void checkForJRockitRecording(EventArray[] events) {
-		for (EventArray ea : events) {
+	private static void checkForJRockitRecording(EventArrays events) {
+		for (EventArray ea : events.getArrays()) {
 			if (ea.getType().getIdentifier().startsWith("http://www.oracle.com/jrockit/")) { //$NON-NLS-1$
 				DisplayToolkit.safeSyncExec(new Runnable() {
 					@Override
 					public void run() {
 						DialogToolkit.showError(Display.getCurrent().getActiveShell(),
@@ -194,11 +195,11 @@
 				throw new OperationCanceledException();
 			}
 		}
 	}
 
-	private EventArray[] loadFromUnzippedFile(
+	private EventArrays loadFromUnzippedFile(
 		File unzippedFile, String recordingFileName, ProgressMonitor lm, long availableMemory)
 			throws IOException, CouldNotLoadRecordingException {
 		boolean hideExperimentals = !FlightRecorderUI.getDefault().includeExperimentalEventsAndFields();
 		boolean ignoreTruncatedChunk = FlightRecorderUI.getDefault().allowIncompleteRecordingFile();
 		try (RandomAccessFile raf = new RandomAccessFile(unzippedFile, "r")) { //$NON-NLS-1$
