diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/ItemCollectionToolkit.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/ItemCollectionToolkit.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/ItemCollectionToolkit.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/ItemCollectionToolkit.java
@@ -101,11 +101,11 @@
 		public boolean hasItems() {
 			return items.get().anyMatch(IItemIterable::hasItems);
 		}
 
 		@Override
-		public Set<IRange<IQuantity>> getChunkRanges() {
+		public Set<IRange<IQuantity>> getTimeRanges() {
 			return chunkRanges;
 		}
 
 	}
 
@@ -130,11 +130,11 @@
 	public static IItemCollection build(Supplier<Stream<IItemIterable>> items) {
 		return build(items, Collections.emptySet());
 	}
 
 	public static IItemCollection merge(Supplier<Stream<IItemCollection>> items) {
-		Set<IRange<IQuantity>> chunkRanges = items.get().flatMap(i -> i.getChunkRanges().stream())
+		Set<IRange<IQuantity>> chunkRanges = items.get().flatMap(i -> i.getTimeRanges().stream())
 				.collect(Collectors.toSet());
 		return ItemCollectionToolkit.build(() -> items.get().flatMap(ItemCollectionToolkit::stream), chunkRanges);
 	}
 
 	public static <V> Optional<IItemIterable> join(IItemCollection items, String withTypeId) {
diff a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/item/IItemCollection.java b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/item/IItemCollection.java
--- a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/item/IItemCollection.java
+++ b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/item/IItemCollection.java
@@ -68,14 +68,14 @@
 	 * @return {@code true} if the collections contains items, {@code false} otherwise
 	 */
 	boolean hasItems();
 
 	/**
-	 * Returns a set of IRange representations of the time ranges of all chunks represented by this
-	 * item collection. This set is not affected by any filtering operations on the item collection
-	 * since its use is to show the time ranges in which events could possibly have been emitted.
+	 * Returns a set of IRange representations of the time ranges represented by this item
+	 * collection. This set is not affected by any filtering operations on the item collection since
+	 * its use is to show the time ranges in which events could possibly have been occurred.
 	 * 
-	 * @return a set of IRange objects representing the time ranges of the chunks represented by
-	 *         this IItemCollection
+	 * @return a set of IRange objects representing the time ranges of represented by this
+	 *         IItemCollection
 	 */
-	Set<IRange<IQuantity>> getChunkRanges();
+	Set<IRange<IQuantity>> getTimeRanges();
 }
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/DefaultIItemResultSet.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/DefaultIItemResultSet.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/DefaultIItemResultSet.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/DefaultIItemResultSet.java
@@ -84,11 +84,11 @@
 					int column = 0;
 					for (; column < attributes.size(); column++) {
 						row[column] = accessors[column].getMember(item);
 					}
 					for (int j = 0; j < aggregators.size(); j++) {
-						row[column + j] = new SingleEntryItemCollection(item, input.getChunkRanges())
+						row[column + j] = new SingleEntryItemCollection(item, input.getTimeRanges())
 								.getAggregate(aggregators.get(j));
 					}
 					data.add(row);
 				}
 			}
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/SingleEntryItemCollection.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/SingleEntryItemCollection.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/SingleEntryItemCollection.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/util/SingleEntryItemCollection.java
@@ -73,11 +73,11 @@
 		public IItemCollection apply(IItemFilter filter) {
 			return this;
 		}
 
 		@Override
-		public Set<IRange<IQuantity>> getChunkRanges() {
+		public Set<IRange<IQuantity>> getTimeRanges() {
 			return null;
 		}
 	};
 
 	private static final IItemIterable NULLITERABLE = new IItemIterable() {
@@ -227,9 +227,9 @@
 	public boolean hasItems() {
 		return true;
 	}
 
 	@Override
-	public Set<IRange<IQuantity>> getChunkRanges() {
+	public Set<IRange<IQuantity>> getTimeRanges() {
 		return chunkRanges;
 	}
 }
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/EventCollection.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/EventCollection.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/EventCollection.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/EventCollection.java
@@ -219,9 +219,9 @@
 			}
 		});
 	}
 
 	@Override
-	public Set<IRange<IQuantity>> getChunkRanges() {
+	public Set<IRange<IQuantity>> getTimeRanges() {
 		return chunkRanges;
 	}
 }
diff a/core/tests/org.openjdk.jmc.common.test/src/test/java/org/openjdk/jmc/common/test/mock/item/MockItemCollection.java b/core/tests/org.openjdk.jmc.common.test/src/test/java/org/openjdk/jmc/common/test/mock/item/MockItemCollection.java
--- a/core/tests/org.openjdk.jmc.common.test/src/test/java/org/openjdk/jmc/common/test/mock/item/MockItemCollection.java
+++ b/core/tests/org.openjdk.jmc.common.test/src/test/java/org/openjdk/jmc/common/test/mock/item/MockItemCollection.java
@@ -125,9 +125,9 @@
 			}
 		});
 	}
 
 	@Override
-	public Set<IRange<IQuantity>> getChunkRanges() {
+	public Set<IRange<IQuantity>> getTimeRanges() {
 		return Collections.emptySet();
 	}
 }
