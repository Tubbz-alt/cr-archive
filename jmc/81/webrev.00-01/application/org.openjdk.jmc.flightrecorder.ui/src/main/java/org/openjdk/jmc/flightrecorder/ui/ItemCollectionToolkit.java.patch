diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/ItemCollectionToolkit.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/ItemCollectionToolkit.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/ItemCollectionToolkit.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/ItemCollectionToolkit.java
@@ -101,11 +101,11 @@
 		public boolean hasItems() {
 			return items.get().anyMatch(IItemIterable::hasItems);
 		}
 
 		@Override
-		public Set<IRange<IQuantity>> getChunkRanges() {
+		public Set<IRange<IQuantity>> getTimeRanges() {
 			return chunkRanges;
 		}
 
 	}
 
@@ -130,11 +130,11 @@
 	public static IItemCollection build(Supplier<Stream<IItemIterable>> items) {
 		return build(items, Collections.emptySet());
 	}
 
 	public static IItemCollection merge(Supplier<Stream<IItemCollection>> items) {
-		Set<IRange<IQuantity>> chunkRanges = items.get().flatMap(i -> i.getChunkRanges().stream())
+		Set<IRange<IQuantity>> chunkRanges = items.get().flatMap(i -> i.getTimeRanges().stream())
 				.collect(Collectors.toSet());
 		return ItemCollectionToolkit.build(() -> items.get().flatMap(ItemCollectionToolkit::stream), chunkRanges);
 	}
 
 	public static <V> Optional<IItemIterable> join(IItemCollection items, String withTypeId) {
