diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
@@ -40,10 +40,11 @@
 	public static final TraceNode EMPTY = new TraceNode(null, 0, null);
 	private final int value;
 	private final String name;
 	private final String packageName;
 	private final List<TraceNode> children = new ArrayList<>();
+	private boolean canceled = false;
 
 	public TraceNode(String name, int value, String packageName) {
 		this.name = name;
 		this.value = value;
 		this.packageName = packageName;
@@ -67,17 +68,26 @@
 
 	public void addChild(TraceNode child) {
 		children.add(child);
 	}
 
+	public boolean isCanceled() {
+		return canceled;
+	}
+
+	public void setCanceled() {
+		this.canceled = true;
+	}
+
 	@Override
 	public int hashCode() {
 		final int prime = 31;
 		int result = 1;
 		result = prime * result + ((children == null) ? 0 : children.hashCode());
 		result = prime * result + ((name == null) ? 0 : name.hashCode());
 		result = prime * result + ((packageName == null) ? 0 : packageName.hashCode());
+		result = prime * result + (canceled ? 1231 : 1237);
 		result = prime * result + value;
 		return result;
 	}
 
 	@Override
@@ -98,20 +108,21 @@
 			if (other.name != null)
 				return false;
 		} else if (!name.equals(other.name))
 			return false;
 		if (packageName == null) {
-			if (other.packageName != null) {
+			if (other.packageName != null)
 				return false;
-			}
 		} else if (!packageName.equals(other.packageName))
 			return false;
+		if (canceled != other.canceled)
+			return false;
 		if (value != other.value)
 			return false;
 		return true;
 	}
 
 	public String toString() {
-		return "TraceNode [name: " + name + ", value: " + value + ", packageName: " + packageName + ", children: "
-				+ children.size() + "]";
+		return "TraceNode [name: " + name + ", value: " + value + ", canceled:" + canceled + ", packageName: "
+				+ packageName + ", children: " + children.size() + "]";
 	}
 }
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
@@ -48,10 +48,11 @@
 import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getStacktraceMessage;
 import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.openjdk.jmc.common.IMCFrame;
 import org.openjdk.jmc.common.IMCMethod;
 import org.openjdk.jmc.common.item.Aggregators;
@@ -83,21 +84,32 @@
 	public final static FrameSeparator DEFAULT_FRAME_SEPARATOR = new FrameSeparator(FrameCategorization.METHOD, false);
 
 	/**
 	 * Traces a TraceTree from a {@link StacktraceModel}.
 	 * 
+	 * @param active
+	 *            is calculation still active
 	 * @param root
 	 *            the root with description
 	 * @param model
 	 *            the model to trace the tree from
 	 * @return the root
 	 */
-	public static TraceNode createTree(TraceNode root, StacktraceModel model) {
+	public static TraceNode createTree(final AtomicBoolean active, TraceNode root, StacktraceModel model) {
 		Fork rootFork = model.getRootFork();
-		for (Branch branch : rootFork.getBranches()) {
-			addBranch(root, branch);
+
+		final Branch[] branches = rootFork.getBranches();
+		int i = 0;
+		while (active.get() && i < branches.length) {
+			addBranch(root, branches[i]);
+			i++;
+		}
+
+		if (i < branches.length) {
+			root.setCanceled();
 		}
+
 		return root;
 	}
 
 	/**
 	 * Root of Traces from the selection {@link IItemCollection}
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -305,41 +305,38 @@
 			return root != null && model != null;
 		}
 	}
 
 	/**
-	 * JsonModel hold the calculated json string and has state that can not be finished due to the
-	 * usage inside the {@link CompletableFuture} future, can be only set to ready
+	 * JSonModelBuilder holds the calculated json string, can be canceled
 	 */
 	private static class JSonModelBuilder {
-		private static final JSonModelBuilder EMPTY = new JSonModelBuilder("\"\"", true);
+		private static final JSonModelBuilder EMPTY = new JSonModelBuilder("\"\"");
 		private final StringBuilder builder = new StringBuilder();
-		private boolean ready;
+		private boolean canceled = false;
 
 		private JSonModelBuilder() {
-			this.ready = false;
 		}
 
-		private JSonModelBuilder(String json, boolean ready) {
+		private JSonModelBuilder(String json) {
 			this.builder.append(json);
-			this.ready = ready;
 		}
 
 		private void append(String s) {
 			this.builder.append(s);
 		}
 
 		private String build() {
 			return builder.toString();
 		}
 
-		private boolean isReady() {
-			return ready;
+		private boolean isCanceled() {
+			return canceled;
 		}
 
-		private void setReady() {
-			this.ready = true;
+		private void setCanceled() {
+			this.canceled = true;
 		}
 	}
 
 	@Override
 	public void init(IViewSite site, IMemento memento) throws PartInitException {
@@ -427,36 +424,34 @@
 		return new StacktraceModel(threadRootAtTop, frameSeparator, currentItems);
 	}
 
 	private CompletableFuture<ModelsContainer> getModelPreparer(
 		final StacktraceModel model, final boolean materializeSelectedBranches) {
+		modelCalculationActive.set(true);
 		return CompletableFuture.supplyAsync(() -> {
-			modelCalculationActive.set(true);
 			Fork rootFork = model.getRootFork();
 			if (materializeSelectedBranches) {
 				Branch selectedBranch = getLastSelectedBranch(rootFork);
 				if (selectedBranch != null) {
 					selectedBranch.getEndFork();
 				}
 			}
 
 			if (modelCalculationActive.get()) {
 				TraceNode root = TraceTreeUtils.createRootWithDescription(currentItems, rootFork.getBranchCount());
-				return new ModelsContainer(TraceTreeUtils.createTree(root, model), model);
+				TraceNode traceNode = TraceTreeUtils.createTree(modelCalculationActive, root, model);
+				return traceNode.isCanceled() ? ModelsContainer.EMPTY : new ModelsContainer(traceNode, model);
 			} else {
-				System.out.println("FLAME, getModelPreparer CANCEL");
 				return ModelsContainer.EMPTY;
 			}
 		}, MODEL_EXECUTOR);
 	}
 
 	private void setModel(ModelsContainer container) {
 		// Check that the models are prepared and up to date 
 		if (container.isReady() && container.isEqualStacktraceModel(createStacktraceModel()) && !browser.isDisposed()) {
 			setViewerInput(container.root());
-		} else {
-			System.out.println("FLAME, setModel CANCEL");
 		}
 	}
 
 	private void setViewerInput(TraceNode root) {
 		Stream.of(exportActions).forEach((action) -> action.setEnabled(false));
@@ -467,19 +462,19 @@
 
 		browser.addProgressListener(new ProgressAdapter() {
 			@Override
 			public void completed(ProgressEvent event) {
 				browser.removeProgressListener(this);
-				browser.execute(String.format("configureTooltipText('%s', '%s', '%s', '%s', '%s');", TABLE_COLUMN_COUNT,
-						TABLE_COLUMN_EVENT_TYPE, TOOLTIP_PACKAGE, TOOLTIP_SAMPLES, TOOLTIP_DESCRIPTION));
-				JSonModelBuilder jsonModel = toJSonModel(root);
-				if (jsonModel.isReady()) {
-					browser.execute(String.format("processGraph(%s, %s);", jsonModel.build(), icicleViewActive));
+				JSonModelBuilder jsonModelBuilder = toJSonModel(root);
+				if (!jsonModelBuilder.isCanceled()) {
+					browser.execute(
+							String.format("configureTooltipText('%s', '%s', '%s', '%s', '%s');", TABLE_COLUMN_COUNT,
+									TABLE_COLUMN_EVENT_TYPE, TOOLTIP_PACKAGE, TOOLTIP_SAMPLES, TOOLTIP_DESCRIPTION));
+					browser.execute(String.format("processGraph(%s, %s);", jsonModelBuilder.build(), icicleViewActive));
 					Stream.of(exportActions).forEach((action) -> action.setEnabled(true));
-				} else {
-					System.out.println("FLAME, setViewerInput CANCEL");
 				}
+
 			}
 		});
 
 	}
 
@@ -565,13 +560,10 @@
 		String rootNodeStart = createJsonRootTraceNode(root);
 		builder.append(rootNodeStart);
 		AtomicBoolean renderActive = new AtomicBoolean(true);
 		renderChildren(renderActive, builder, root);
 		builder.append("]}");
-		if (renderActive.get()) {
-			builder.setReady();
-		}
 		return builder;
 	}
 
 	private void render(AtomicBoolean renderActive, JSonModelBuilder builder, TraceNode node) {
 		String start = UNCLASSIFIABLE_FRAME.equals(node.getName()) ? createJsonDescTraceNode(node)
@@ -582,28 +574,22 @@
 	}
 
 	private void renderChildren(AtomicBoolean renderActive, JSonModelBuilder builder, TraceNode node) {
 
 		int i = 0;
-		while (i < node.getChildren().size()) {
-			if (modelCalculationActive.get()) {
-				render(renderActive, builder, node.getChildren().get(i));
-				if (i < node.getChildren().size() - 1) {
-					builder.append(",");
-				}
-			} else {
-				modelCalculationActive.set(false);
+		while (renderActive.get() && i < node.getChildren().size()) {
+			if (!modelCalculationActive.get()) {
+				renderActive.set(false);
+				builder.setCanceled();
+			}
+
+			render(renderActive, builder, node.getChildren().get(i));
+			if (i < node.getChildren().size() - 1) {
+				builder.append(",");
 			}
 			i++;
 		}
-
-//		for (int i = 0; i < node.getChildren().size(); i++) {
-//			render(builder, node.getChildren().get(i));
-//			if (i < node.getChildren().size() - 1) {
-//				builder.append(",");
-//			}
-//		}
 	}
 
 	private static String createJsonRootTraceNode(TraceNode rootNode) {
 		return String.format("{%s,%s,%s, \"c\": [ ", toJSonKeyValue("n", rootNode.getName()), toJSonKeyValue("p", ""),
 				toJSonKeyValue("d", rootNode.getPackageName()));
