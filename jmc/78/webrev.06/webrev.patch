diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceNode.java
@@ -35,14 +35,16 @@
 
 import java.util.ArrayList;
 import java.util.List;
 
 public class TraceNode {
+	public static final TraceNode EMPTY = new TraceNode(null, 0, null);
 	private final int value;
 	private final String name;
 	private final String packageName;
 	private final List<TraceNode> children = new ArrayList<>();
+	private boolean canceled = false;
 
 	public TraceNode(String name, int value, String packageName) {
 		this.name = name;
 		this.value = value;
 		this.packageName = packageName;
@@ -66,17 +68,26 @@
 
 	public void addChild(TraceNode child) {
 		children.add(child);
 	}
 
+	public boolean isCanceled() {
+		return canceled;
+	}
+
+	public void setCanceled() {
+		this.canceled = true;
+	}
+
 	@Override
 	public int hashCode() {
 		final int prime = 31;
 		int result = 1;
 		result = prime * result + ((children == null) ? 0 : children.hashCode());
 		result = prime * result + ((name == null) ? 0 : name.hashCode());
 		result = prime * result + ((packageName == null) ? 0 : packageName.hashCode());
+		result = prime * result + (canceled ? 1231 : 1237);
 		result = prime * result + value;
 		return result;
 	}
 
 	@Override
@@ -97,20 +108,21 @@
 			if (other.name != null)
 				return false;
 		} else if (!name.equals(other.name))
 			return false;
 		if (packageName == null) {
-			if (other.packageName != null) {
+			if (other.packageName != null)
 				return false;
-			}
 		} else if (!packageName.equals(other.packageName))
 			return false;
+		if (canceled != other.canceled)
+			return false;
 		if (value != other.value)
 			return false;
 		return true;
 	}
 
 	public String toString() {
-		return "TraceNode [name: " + name + ", value: " + value + ", packageName: " + packageName + ", children: "
-				+ children.size() + "]";
+		return "TraceNode [name: " + name + ", value: " + value + ", canceled:" + canceled + ", packageName: "
+				+ packageName + ", children: " + children.size() + "]";
 	}
 }
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
@@ -48,10 +48,11 @@
 import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getStacktraceMessage;
 import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.openjdk.jmc.common.IMCFrame;
 import org.openjdk.jmc.common.IMCMethod;
 import org.openjdk.jmc.common.item.Aggregators;
@@ -83,21 +84,32 @@
 	public final static FrameSeparator DEFAULT_FRAME_SEPARATOR = new FrameSeparator(FrameCategorization.METHOD, false);
 
 	/**
 	 * Traces a TraceTree from a {@link StacktraceModel}.
 	 * 
+	 * @param active
+	 *            is calculation still active
 	 * @param root
 	 *            the root with description
 	 * @param model
 	 *            the model to trace the tree from
 	 * @return the root
 	 */
-	public static TraceNode createTree(TraceNode root, StacktraceModel model) {
+	public static TraceNode createTree(final AtomicBoolean active, TraceNode root, StacktraceModel model) {
 		Fork rootFork = model.getRootFork();
-		for (Branch branch : rootFork.getBranches()) {
-			addBranch(root, branch);
+
+		final Branch[] branches = rootFork.getBranches();
+		int i = 0;
+		while (active.get() && i < branches.length) {
+			addBranch(root, branches[i]);
+			i++;
+		}
+
+		if (i < branches.length) {
+			root.setCanceled();
 		}
+
 		return root;
 	}
 
 	/**
 	 * Root of Traces from the selection {@link IItemCollection}
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -47,10 +47,11 @@
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES;
 import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getFlameviewMessage;
 import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getStacktraceMessage;
 import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;
 import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME_DESC;
+import static org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.getLastSelectedBranch;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -59,10 +60,11 @@
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.logging.Level;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 import org.eclipse.jface.action.Action;
@@ -101,11 +103,14 @@
 import org.openjdk.jmc.flightrecorder.flameview.tree.TraceNode;
 import org.openjdk.jmc.flightrecorder.flameview.tree.TraceTreeUtils;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel;
+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Branch;
+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Fork;
 import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;
+import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;
 import org.openjdk.jmc.flightrecorder.ui.common.ImageConstants;
 import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;
 import org.openjdk.jmc.ui.CoreImages;
 import org.openjdk.jmc.ui.common.util.AdapterUtil;
 import org.openjdk.jmc.ui.handlers.MCContextMenuManager;
@@ -121,49 +126,51 @@
 	private static final String TOOLTIP_PACKAGE = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TOOLTIP_PACKAGE);
 	private static final String TOOLTIP_SAMPLES = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES);
 	private static final String TOOLTIP_DESCRIPTION = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TOOLTIP_DESCRIPTION);
 	private static final String HTML_PAGE;
 	static {
-		// from: https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.css
+		// from:
+		// https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.css
 		String cssD3Flamegraph = "jslibs/d3-flamegraph.css";
 		// from: https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js
 		String jsHtml5shiv = "jslibs/html5shiv.min.js";
 		// from: https://oss.maxcdn.com/respond/1.4.2/respond.min.js
 		String jsRespond = "jslibs/respond.min.js";
 		// from: https://d3js.org/d3.v4.min.js
 		String jsD3V4 = "jslibs/d3.v4.min.js";
 		// from: https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.9.1/d3-tip.min.js
 		String jsD3Tip = "jslibs/d3-tip.min.js";
-		// from: https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.min.js
+		// from:
+		// https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.min.js
 		String jsD3FlameGraph = "jslibs/d3-flamegraph.min.js";
-		// jmc flameview coloring, tooltip and other  functions
+		// jmc flameview coloring, tooltip and other functions
 		String jsFlameviewName = "flameview.js";
 		String cssFlameview = "flameview.css";
 
 		String jsIeLibraries = loadLibraries(jsHtml5shiv, jsRespond);
 		String jsD3Libraries = loadLibraries(jsD3V4, jsD3Tip, jsD3FlameGraph);
 		String styleheets = loadLibraries(cssD3Flamegraph, cssFlameview);
 		String jsFlameviewColoring = fileContent(jsFlameviewName);
 
 		String magnifierIcon = getIconBase64(ImageConstants.ICON_MAGNIFIER);
 
-		// formatter arguments for the template: %1 - CSSs stylesheets, %2 - IE9 specific scripts,
+		// formatter arguments for the template: %1 - CSSs stylesheets, %2 - IE9
+		// specific scripts,
 		// %3 - Search Icon Base64, %4 - 3rd party scripts, %5 - Flameview Coloring,
 		HTML_PAGE = String.format(fileContent("page.template"), styleheets, jsIeLibraries, magnifierIcon, jsD3Libraries,
 				jsFlameviewColoring);
 	}
 
 	private static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(1);
 	private FrameSeparator frameSeparator;
 
 	private Browser browser;
 	private SashForm container;
-	private TraceNode currentRoot;
-	private CompletableFuture<TraceNode> currentModelCalculator;
 	private boolean threadRootAtTop = true;
 	private boolean icicleViewActive = true;
-	private IItemCollection currentItems;
+	private IItemCollection currentItems = ItemCollectionToolkit.build(Stream.empty());
+	private volatile AtomicBoolean modelCalculationActive = new AtomicBoolean();
 	private GroupByAction[] groupByActions;
 	private GroupByFlameviewAction[] groupByFlameviewActions;
 	private ExportAction[] exportActions;
 
 	private enum GroupActionType {
@@ -200,11 +207,11 @@
 		@Override
 		public void run() {
 			boolean newValue = isChecked() == GroupActionType.THREAD_ROOT.equals(actionType);
 			if (newValue != threadRootAtTop) {
 				threadRootAtTop = newValue;
-				rebuildModel(currentItems);
+				rebuildModel();
 			}
 		}
 	}
 
 	private class GroupByFlameviewAction extends Action {
@@ -270,10 +277,69 @@
 				break;
 			}
 		}
 	}
 
+	/**
+	 * Container for created {@link TraceNode} and {@link StacktraceModel}
+	 */
+	private static final class ModelsContainer {
+		private static final ModelsContainer EMPTY = new ModelsContainer(null, null);
+		private final TraceNode root;
+		private final StacktraceModel model;
+
+		private ModelsContainer(TraceNode root, StacktraceModel model) {
+			super();
+			this.root = root;
+			this.model = model;
+		}
+
+		private TraceNode root() {
+			return root;
+		}
+
+		private boolean isEqualStacktraceModel(StacktraceModel m) {
+			return model.equals(m);
+		}
+
+		private boolean isReady() {
+			return root != null && model != null;
+		}
+	}
+
+	/**
+	 * JSonModelBuilder holds the calculated json string, can be canceled
+	 */
+	private static class JSonModelBuilder {
+		private static final JSonModelBuilder EMPTY = new JSonModelBuilder("\"\"");
+		private final StringBuilder builder = new StringBuilder();
+		private boolean canceled = false;
+
+		private JSonModelBuilder() {
+		}
+
+		private JSonModelBuilder(String json) {
+			this.builder.append(json);
+		}
+
+		private void append(String s) {
+			this.builder.append(s);
+		}
+
+		private String build() {
+			return builder.toString();
+		}
+
+		private boolean isCanceled() {
+			return canceled;
+		}
+
+		private void setCanceled() {
+			this.canceled = true;
+		}
+	}
+
 	@Override
 	public void init(IViewSite site, IMemento memento) throws PartInitException {
 		super.init(site, memento);
 		frameSeparator = new FrameSeparator(FrameCategorization.METHOD, false);
 		groupByActions = new GroupByAction[] {new GroupByAction(GroupActionType.LAST_FRAME),
@@ -329,45 +395,67 @@
 
 	@Override
 	public void selectionChanged(IWorkbenchPart part, ISelection selection) {
 		if (selection instanceof IStructuredSelection) {
 			Object first = ((IStructuredSelection) selection).getFirstElement();
-			setItems(AdapterUtil.getAdapter(first, IItemCollection.class));
+			IItemCollection items = AdapterUtil.getAdapter(first, IItemCollection.class);
+			if (items == null) {
+				setItems(ItemCollectionToolkit.build(Stream.empty()));
+			} else if (!items.equals(currentItems)) {
+				setItems(items);
+			}
 		}
 	}
 
 	private void setItems(IItemCollection items) {
-		if (items != null) {
-			currentItems = items;
-			rebuildModel(items);
-		}
+		currentItems = items;
+		rebuildModel();
+
 	}
 
-	private void rebuildModel(IItemCollection items) {
-		// Release old model before building the new
-		if (currentModelCalculator != null) {
-			currentModelCalculator.cancel(true);
+	private void rebuildModel() {
+		if (modelCalculationActive.get()) {
+			modelCalculationActive.set(false);
 		}
-		currentModelCalculator = getModelPreparer(items, frameSeparator, true);
+
+		final CompletableFuture<ModelsContainer> currentModelCalculator = getModelPreparer(createStacktraceModel(),
+				true);
 		currentModelCalculator.thenAcceptAsync(this::setModel, DisplayToolkit.inDisplayThread())
 				.exceptionally(FlameGraphView::handleModelBuildException);
 	}
 
-	private CompletableFuture<TraceNode> getModelPreparer(
-		final IItemCollection items, final FrameSeparator separator, final boolean materializeSelectedBranches) {
+	private StacktraceModel createStacktraceModel() {
+		return new StacktraceModel(threadRootAtTop, frameSeparator, currentItems);
+	}
+
+	private CompletableFuture<ModelsContainer> getModelPreparer(
+		final StacktraceModel model, final boolean materializeSelectedBranches) {
+		modelCalculationActive.set(true);
 		return CompletableFuture.supplyAsync(() -> {
-			StacktraceModel model = new StacktraceModel(threadRootAtTop, frameSeparator, items);
-			TraceNode root = TraceTreeUtils.createRootWithDescription(items, model.getRootFork().getBranchCount());
-			return TraceTreeUtils.createTree(root, model);
+			Fork rootFork = model.getRootFork();
+			if (materializeSelectedBranches) {
+				Branch selectedBranch = getLastSelectedBranch(rootFork);
+				if (selectedBranch != null) {
+					selectedBranch.getEndFork();
+				}
+			}
+
+			if (modelCalculationActive.get()) {
+				TraceNode root = TraceTreeUtils.createRootWithDescription(currentItems, rootFork.getBranchCount());
+				TraceNode traceNode = TraceTreeUtils.createTree(modelCalculationActive, root, model);
+				return traceNode.isCanceled() ? ModelsContainer.EMPTY : new ModelsContainer(traceNode, model);
+			} else {
+				return ModelsContainer.EMPTY;
+			}
 		}, MODEL_EXECUTOR);
 	}
 
-	private void setModel(TraceNode root) {
-		if (!browser.isDisposed() && !root.equals(currentRoot)) {
-			currentRoot = root;
-			setViewerInput(root);
-		}
+	private void setModel(ModelsContainer container) {
+		// Check that the models are prepared and up to date 
+		if (container.isReady() && !browser.isDisposed() && container.isEqualStacktraceModel(createStacktraceModel())) {
+			setViewerInput(container.root());
+		} 
 	}
 
 	private void setViewerInput(TraceNode root) {
 		Stream.of(exportActions).forEach((action) -> action.setEnabled(false));
 		browser.setText(HTML_PAGE);
@@ -377,17 +465,22 @@
 
 		browser.addProgressListener(new ProgressAdapter() {
 			@Override
 			public void completed(ProgressEvent event) {
 				browser.removeProgressListener(this);
-				browser.execute(String.format("configureTooltipText('%s', '%s', '%s', '%s', '%s');", TABLE_COLUMN_COUNT,
-						TABLE_COLUMN_EVENT_TYPE, TOOLTIP_PACKAGE, TOOLTIP_SAMPLES, TOOLTIP_DESCRIPTION));
+				JSonModelBuilder jsonModelBuilder = toJSonModel(root);
+				if (!jsonModelBuilder.isCanceled()) {
+					browser.execute(
+							String.format("configureTooltipText('%s', '%s', '%s', '%s', '%s');", TABLE_COLUMN_COUNT,
+									TABLE_COLUMN_EVENT_TYPE, TOOLTIP_PACKAGE, TOOLTIP_SAMPLES, TOOLTIP_DESCRIPTION));
+					browser.execute(String.format("processGraph(%s, %s);", jsonModelBuilder.build(), icicleViewActive));
+					Stream.of(exportActions).forEach((action) -> action.setEnabled(true));
+				}
 
-				browser.execute(String.format("processGraph(%s, %s);", toJSon(root), icicleViewActive));
-				Stream.of(exportActions).forEach((action) -> action.setEnabled(true));
 			}
 		});
+
 	}
 
 	private void saveFlameGraph() {
 		CompletableFuture<String> future = new CompletableFuture<>();
 		String[] destination = new String[2];
@@ -405,11 +498,12 @@
 				return;
 			}
 
 			String type;
 			String fileName = fd.getFileName().toLowerCase();
-			// FIXME: FileDialog filterIndex returns -1 (https://bugs.eclipse.org/bugs/show_bug.cgi?id=546256)
+			// FIXME: FileDialog filterIndex returns -1
+			// (https://bugs.eclipse.org/bugs/show_bug.cgi?id=546256)
 			if (fileName.endsWith(".jpg") || fileName.endsWith(".jpeg")) { //$NON-NLS-1$ //$NON-NLS-2$
 				type = "image/jpeg"; //$NON-NLS-1$
 			} else if (fileName.endsWith(".png")) { //$NON-NLS-1$
 				type = "image/png"; //$NON-NLS-1$
 			} else {
@@ -455,40 +549,49 @@
 			FlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, "Failed to build stacktrace view model", ex); //$NON-NLS-1$
 		}
 		return null;
 	}
 
-	private static String toJSon(TraceNode root) {
+	private JSonModelBuilder toJSonModel(TraceNode root) {
 		if (root == null) {
-			return "\"\"";
+			return JSonModelBuilder.EMPTY;
 		}
 		return render(root);
 	}
 
-	private static String render(TraceNode root) {
-		StringBuilder builder = new StringBuilder();
+	private JSonModelBuilder render(TraceNode root) {
+		JSonModelBuilder builder = new JSonModelBuilder();
 		String rootNodeStart = createJsonRootTraceNode(root);
 		builder.append(rootNodeStart);
-		renderChildren(builder, root);
+		AtomicBoolean renderActive = new AtomicBoolean(true);
+		renderChildren(renderActive, builder, root);
 		builder.append("]}");
-		return builder.toString();
+		return builder;
 	}
 
-	private static void render(StringBuilder builder, TraceNode node) {
+	private void render(AtomicBoolean renderActive, JSonModelBuilder builder, TraceNode node) {
 		String start = UNCLASSIFIABLE_FRAME.equals(node.getName()) ? createJsonDescTraceNode(node)
 				: createJsonTraceNode(node);
 		builder.append(start);
-		renderChildren(builder, node);
+		renderChildren(renderActive, builder, node);
 		builder.append("]}");
 	}
 
-	private static void renderChildren(StringBuilder builder, TraceNode node) {
-		for (int i = 0; i < node.getChildren().size(); i++) {
-			render(builder, node.getChildren().get(i));
+	private void renderChildren(AtomicBoolean renderActive, JSonModelBuilder builder, TraceNode node) {
+
+		int i = 0;
+		while (renderActive.get() && i < node.getChildren().size()) {
+			if (!modelCalculationActive.get()) {
+				renderActive.set(false);
+				builder.setCanceled();
+			}
+
+			render(renderActive, builder, node.getChildren().get(i));
 			if (i < node.getChildren().size() - 1) {
 				builder.append(",");
 			}
+			i++;
 		}
 	}
 
 	private static String createJsonRootTraceNode(TraceNode rootNode) {
 		return String.format("{%s,%s,%s, \"c\": [ ", toJSonKeyValue("n", rootNode.getName()), toJSonKeyValue("p", ""),
@@ -527,11 +630,11 @@
 			return "";
 		}
 	}
 
 	private static ImageDescriptor flameviewImageDescriptor(String iconName) {
-		return ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); //$NON-NLS-1$
+		return ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); // $NON-NLS-1$
 	}
 
 	private static String getIconBase64(String iconName) {
 		Image image = FlightRecorderUI.getDefault().getImage(iconName);
 		if (image == null) {
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/views/stacktrace/StacktraceView.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/views/stacktrace/StacktraceView.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/views/stacktrace/StacktraceView.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/views/stacktrace/StacktraceView.java
@@ -30,14 +30,18 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.flightrecorder.ui.views.stacktrace;
 
+import static org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.getLastSelectedBranch;
+
 import java.util.Arrays;
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import java.util.logging.Level;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 
@@ -86,11 +90,10 @@
 import org.eclipse.ui.IWorkbenchPart;
 import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.forms.widgets.FormText;
 import org.eclipse.ui.part.ViewPart;
-
 import org.openjdk.jmc.common.IDisplayable;
 import org.openjdk.jmc.common.IMCFrame;
 import org.openjdk.jmc.common.IState;
 import org.openjdk.jmc.common.collection.SimpleArray;
 import org.openjdk.jmc.common.item.IItemCollection;
@@ -172,10 +175,11 @@
 				rebuildModel();
 			}
 		}
 	}
 
+	private static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(1);
 	private static final String HELP_CONTEXT_ID = FlightRecorderUI.PLUGIN_ID + ".StacktraceView"; //$NON-NLS-1$
 	// FIXME: Define dynamic color (editable in preferences, to handle dark themes etc.)
 	private static final Color ALTERNATE_COLOR = SWTColorToolkit.getColor(new RGB(255, 255, 240));
 	private static final String COUNT_IMG_KEY = "countColor"; //$NON-NLS-1$
 	private static final Color COUNT_COLOR = SWTColorToolkit.getColor(new RGB(100, 200, 100));
@@ -683,11 +687,11 @@
 				if (selectedBranch != null) {
 					selectedBranch.getEndFork();
 				}
 			}
 			return model;
-		});
+		}, MODEL_EXECUTOR);
 	}
 
 	private static Void handleModelBuildException(Throwable ex) {
 		FlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, "Failed to build stacktrace view model", ex); //$NON-NLS-1$
 		return null;
@@ -866,22 +870,10 @@
 			input.addAll(selectedBranch.getTailFrames());
 			addSelectedBranches(selectedBranch.getEndFork(), input, backwards);
 		}
 	}
 
-	// See JMC-6787
-	@SuppressWarnings("deprecation")
-	private static Branch getLastSelectedBranch(Fork fromFork) {
-		Branch lastSelectedBranch = null;
-		Branch branch = fromFork.getSelectedBranch();
-		while (branch != null) {
-			lastSelectedBranch = branch;
-			branch = branch.getEndFork().getSelectedBranch();
-		}
-		return lastSelectedBranch;
-	}
-
 	private static Fork getRootFork(Fork fork) {
 		while (fork.getParentBranch() != null) {
 			fork = fork.getParentBranch().getParentFork();
 		}
 		return fork;
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/StacktraceModel.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/StacktraceModel.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/StacktraceModel.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/StacktraceModel.java
@@ -162,10 +162,22 @@
 			}
 		}
 		return null;
 	}
 
+	// See JMC-6787
+	@SuppressWarnings("deprecation")
+	public static Branch getLastSelectedBranch(Fork fromFork) {
+		Branch lastSelectedBranch = null;
+		Branch branch = fromFork.getSelectedBranch();
+		while (branch != null) {
+			lastSelectedBranch = branch;
+			branch = branch.getEndFork().getSelectedBranch();
+		}
+		return lastSelectedBranch;
+	}
+
 	/**
 	 * A special marker object that indicates a frame that cannot be determined.
 	 * <p>
 	 * A typical case is when a stacktrace is truncated due to to Flight Recorder settings. We know
 	 * that there is a frame because of a truncation flag, but there is no information about it.
