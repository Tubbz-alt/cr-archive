diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -173,14 +173,14 @@
 	private ExportAction[] exportActions;
 
 	private enum GroupActionType {
 		THREAD_ROOT(Messages.STACKTRACE_VIEW_THREAD_ROOT, IAction.AS_RADIO_BUTTON, CoreImages.THREAD),
 		LAST_FRAME(Messages.STACKTRACE_VIEW_LAST_FRAME, IAction.AS_RADIO_BUTTON, CoreImages.METHOD_NON_OPTIMIZED),
-		ICICLE_GRAPH(getFlameviewMessage(FLAMEVIEW_ICICLE_GRAPH), IAction.AS_RADIO_BUTTON,
-				flameviewImageDescriptor(FlameviewImages.ICON_ICICLE_FLIP)),
-		FLAME_GRAPH(getFlameviewMessage(FLAMEVIEW_FLAME_GRAPH), IAction.AS_RADIO_BUTTON,
-				flameviewImageDescriptor(FlameviewImages.ICON_FLAME_FLIP));
+		ICICLE_GRAPH(getFlameviewMessage(FLAMEVIEW_ICICLE_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(
+				FlameviewImages.ICON_ICICLE_FLIP)),
+		FLAME_GRAPH(getFlameviewMessage(FLAMEVIEW_FLAME_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(
+				FlameviewImages.ICON_FLAME_FLIP));
 
 		private final String message;
 		private final int action;
 		private final ImageDescriptor imageDescriptor;
 
@@ -230,17 +230,15 @@
 			browser.execute(String.format("icicleView(%s);", icicleViewActive));
 		}
 	}
 
 	private enum ExportActionType {
-		SAVE_AS(getFlameviewMessage(FLAMEVIEW_SAVE_AS), IAction.AS_PUSH_BUTTON,
-				PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT),
-				PlatformUI.getWorkbench().getSharedImages()
-						.getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT_DISABLED)),
-		PRINT(getFlameviewMessage(FLAMEVIEW_PRINT), IAction.AS_PUSH_BUTTON,
-				PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT),
-				PlatformUI.getWorkbench().getSharedImages()
+		SAVE_AS(getFlameviewMessage(FLAMEVIEW_SAVE_AS), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench()
+				.getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT), PlatformUI.getWorkbench()
+						.getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT_DISABLED)),
+		PRINT(getFlameviewMessage(FLAMEVIEW_PRINT), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench().getSharedImages()
+				.getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT), PlatformUI.getWorkbench().getSharedImages()
 						.getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT_DISABLED));
 
 		private final String message;
 		private final int action;
 		private final ImageDescriptor imageDescriptor;
@@ -277,15 +275,13 @@
 				browser.execute("window.print()"); //$NON-NLS-1$
 				break;
 			}
 		}
 	}
-	
+
 	/**
-	 * 
 	 * Container for created {@link TraceNode} and {@link StacktraceModel}
-	 *
 	 */
 	private static final class ModelsContainer {
 		private final TraceNode root;
 		private final StacktraceModel model;
 
@@ -296,11 +292,11 @@
 		}
 
 		private TraceNode root() {
 			return root;
 		}
-		
+
 		private boolean isEqualStacktraceModel(StacktraceModel m) {
 			return model.equals(m);
 		}
 
 		private boolean isReady() {
@@ -310,17 +306,16 @@
 
 	@Override
 	public void init(IViewSite site, IMemento memento) throws PartInitException {
 		super.init(site, memento);
 		frameSeparator = new FrameSeparator(FrameCategorization.METHOD, false);
-		groupByActions = new GroupByAction[] { new GroupByAction(GroupActionType.LAST_FRAME),
-				new GroupByAction(GroupActionType.THREAD_ROOT) };
-		groupByFlameviewActions = new GroupByFlameviewAction[] {
-				new GroupByFlameviewAction(GroupActionType.FLAME_GRAPH),
-				new GroupByFlameviewAction(GroupActionType.ICICLE_GRAPH) };
-		exportActions = new ExportAction[] { new ExportAction(ExportActionType.SAVE_AS),
-				new ExportAction(ExportActionType.PRINT) };
+		groupByActions = new GroupByAction[] {new GroupByAction(GroupActionType.LAST_FRAME),
+				new GroupByAction(GroupActionType.THREAD_ROOT)};
+		groupByFlameviewActions = new GroupByFlameviewAction[] {new GroupByFlameviewAction(GroupActionType.FLAME_GRAPH),
+				new GroupByFlameviewAction(GroupActionType.ICICLE_GRAPH)};
+		exportActions = new ExportAction[] {new ExportAction(ExportActionType.SAVE_AS),
+				new ExportAction(ExportActionType.PRINT)};
 		Stream.of(exportActions).forEach((action) -> action.setEnabled(false));
 
 		// methodFormatter = new MethodFormatter(null, () -> viewer.refresh());
 		IMenuManager siteMenu = site.getActionBars().getMenuManager();
 		siteMenu.add(new Separator(MCContextMenuManager.GROUP_TOP));
@@ -393,33 +388,33 @@
 
 	private StacktraceModel createStacktraceModel() {
 		return new StacktraceModel(threadRootAtTop, frameSeparator, currentItems);
 	}
 
-	private CompletableFuture<ModelsContainer> getModelPreparer(final FrameSeparator separator,
-			final boolean materializeSelectedBranches) {
+	private CompletableFuture<ModelsContainer> getModelPreparer(
+		final FrameSeparator separator, final boolean materializeSelectedBranches) {
 		return CompletableFuture.supplyAsync(() -> {
 			StacktraceModel model = createStacktraceModel();
 			Fork rootFork = model.getRootFork();
 			if (materializeSelectedBranches) {
 				Branch selectedBranch = getLastSelectedBranch(rootFork);
 				if (selectedBranch != null) {
 					selectedBranch.getEndFork();
 				}
 			}
-			
+
 			TraceNode root = TraceTreeUtils.createRootWithDescription(currentItems, rootFork.getBranchCount());
 			return new ModelsContainer(TraceTreeUtils.createTree(root, model), model);
 
 		}, MODEL_EXECUTOR);
 	}
 
 	private void setModel(ModelsContainer container) {
 		// Check that the models are prepared and up to date 
 		if (container.isReady() && container.isEqualStacktraceModel(createStacktraceModel()) && !browser.isDisposed()) {
 			setViewerInput(container.root());
-		} 
+		}
 	}
 
 	private void setViewerInput(TraceNode root) {
 		Stream.of(exportActions).forEach((action) -> action.setEnabled(false));
 		browser.setText(HTML_PAGE);
@@ -446,13 +441,13 @@
 		String[] destination = new String[2];
 
 		DisplayToolkit.inDisplayThread().execute(() -> {
 			FileDialog fd = new FileDialog(browser.getShell(), SWT.SAVE);
 			fd.setText(getFlameviewMessage(FLAMEVIEW_SAVE_FLAME_GRAPH_AS));
-			fd.setFilterNames(new String[] { getFlameviewMessage(FLAMEVIEW_JPEG_IMAGE),
-					getFlameviewMessage(FLAMEVIEW_PNG_IMAGE) });
-			fd.setFilterExtensions(new String[] { "*.jpg", "*.png" }); //$NON-NLS-1$ //$NON-NLS-2$
+			fd.setFilterNames(
+					new String[] {getFlameviewMessage(FLAMEVIEW_JPEG_IMAGE), getFlameviewMessage(FLAMEVIEW_PNG_IMAGE)});
+			fd.setFilterExtensions(new String[] {"*.jpg", "*.png"}); //$NON-NLS-1$ //$NON-NLS-2$
 			fd.setFileName("flame_graph"); //$NON-NLS-1$
 			fd.setOverwrite(true);
 			if (fd.open() == null) {
 				future.cancel(true);
 				return;
@@ -562,11 +557,11 @@
 
 	private static String toJSonKeyValue(String key, String value) {
 		return "\"" + key + "\": " + "\"" + value + "\"";
 	}
 
-	private static String loadLibraries(String... libs) {
+	private static String loadLibraries(String ... libs) {
 		if (libs == null || libs.length == 0) {
 			return "";
 		} else {
 			return Stream.of(libs).map(FlameGraphView::fileContent).collect(Collectors.joining("\n"));
 		}
@@ -591,11 +586,11 @@
 		if (image == null) {
 			return "";
 		} else {
 			ByteArrayOutputStream baos = new ByteArrayOutputStream();
 			ImageLoader loader = new ImageLoader();
-			loader.data = new ImageData[] { image.getImageData() };
+			loader.data = new ImageData[] {image.getImageData()};
 			loader.save(baos, SWT.IMAGE_PNG);
 			return Base64.getEncoder().encodeToString(baos.toByteArray());
 		}
 	}
 }
