diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -47,10 +47,11 @@
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES;
 import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getFlameviewMessage;
 import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getStacktraceMessage;
 import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;
 import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME_DESC;
+import static org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModelUtils.getLastSelectedBranch;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -101,11 +102,14 @@
 import org.openjdk.jmc.flightrecorder.flameview.tree.TraceNode;
 import org.openjdk.jmc.flightrecorder.flameview.tree.TraceTreeUtils;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel;
+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Branch;
+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Fork;
 import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;
+import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;
 import org.openjdk.jmc.flightrecorder.ui.common.ImageConstants;
 import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;
 import org.openjdk.jmc.ui.CoreImages;
 import org.openjdk.jmc.ui.common.util.AdapterUtil;
 import org.openjdk.jmc.ui.handlers.MCContextMenuManager;
@@ -121,60 +125,62 @@
 	private static final String TOOLTIP_PACKAGE = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TOOLTIP_PACKAGE);
 	private static final String TOOLTIP_SAMPLES = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES);
 	private static final String TOOLTIP_DESCRIPTION = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TOOLTIP_DESCRIPTION);
 	private static final String HTML_PAGE;
 	static {
-		// from: https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.css
+		// from:
+		// https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.css
 		String cssD3Flamegraph = "jslibs/d3-flamegraph.css";
 		// from: https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js
 		String jsHtml5shiv = "jslibs/html5shiv.min.js";
 		// from: https://oss.maxcdn.com/respond/1.4.2/respond.min.js
 		String jsRespond = "jslibs/respond.min.js";
 		// from: https://d3js.org/d3.v4.min.js
 		String jsD3V4 = "jslibs/d3.v4.min.js";
 		// from: https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.9.1/d3-tip.min.js
 		String jsD3Tip = "jslibs/d3-tip.min.js";
-		// from: https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.min.js
+		// from:
+		// https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.min.js
 		String jsD3FlameGraph = "jslibs/d3-flamegraph.min.js";
-		// jmc flameview coloring, tooltip and other  functions
+		// jmc flameview coloring, tooltip and other functions
 		String jsFlameviewName = "flameview.js";
 		String cssFlameview = "flameview.css";
 
 		String jsIeLibraries = loadLibraries(jsHtml5shiv, jsRespond);
 		String jsD3Libraries = loadLibraries(jsD3V4, jsD3Tip, jsD3FlameGraph);
 		String styleheets = loadLibraries(cssD3Flamegraph, cssFlameview);
 		String jsFlameviewColoring = fileContent(jsFlameviewName);
 
 		String magnifierIcon = getIconBase64(ImageConstants.ICON_MAGNIFIER);
 
-		// formatter arguments for the template: %1 - CSSs stylesheets, %2 - IE9 specific scripts,
+		// formatter arguments for the template: %1 - CSSs stylesheets, %2 - IE9
+		// specific scripts,
 		// %3 - Search Icon Base64, %4 - 3rd party scripts, %5 - Flameview Coloring,
 		HTML_PAGE = String.format(fileContent("page.template"), styleheets, jsIeLibraries, magnifierIcon, jsD3Libraries,
 				jsFlameviewColoring);
 	}
 
 	private static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(1);
 	private FrameSeparator frameSeparator;
 
 	private Browser browser;
 	private SashForm container;
-	private TraceNode currentRoot;
-	private CompletableFuture<TraceNode> currentModelCalculator;
+	private volatile CompletableFuture<ModelsContainer> currentModelCalculator;
 	private boolean threadRootAtTop = true;
 	private boolean icicleViewActive = true;
-	private IItemCollection currentItems;
+	private IItemCollection currentItems = ItemCollectionToolkit.build(Stream.empty());
 	private GroupByAction[] groupByActions;
 	private GroupByFlameviewAction[] groupByFlameviewActions;
 	private ExportAction[] exportActions;
 
 	private enum GroupActionType {
 		THREAD_ROOT(Messages.STACKTRACE_VIEW_THREAD_ROOT, IAction.AS_RADIO_BUTTON, CoreImages.THREAD),
 		LAST_FRAME(Messages.STACKTRACE_VIEW_LAST_FRAME, IAction.AS_RADIO_BUTTON, CoreImages.METHOD_NON_OPTIMIZED),
-		ICICLE_GRAPH(getFlameviewMessage(FLAMEVIEW_ICICLE_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(
-				FlameviewImages.ICON_ICICLE_FLIP)),
-		FLAME_GRAPH(getFlameviewMessage(FLAMEVIEW_FLAME_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(
-				FlameviewImages.ICON_FLAME_FLIP));
+		ICICLE_GRAPH(getFlameviewMessage(FLAMEVIEW_ICICLE_GRAPH), IAction.AS_RADIO_BUTTON,
+				flameviewImageDescriptor(FlameviewImages.ICON_ICICLE_FLIP)),
+		FLAME_GRAPH(getFlameviewMessage(FLAMEVIEW_FLAME_GRAPH), IAction.AS_RADIO_BUTTON,
+				flameviewImageDescriptor(FlameviewImages.ICON_FLAME_FLIP));
 
 		private final String message;
 		private final int action;
 		private final ImageDescriptor imageDescriptor;
 
@@ -200,11 +206,11 @@
 		@Override
 		public void run() {
 			boolean newValue = isChecked() == GroupActionType.THREAD_ROOT.equals(actionType);
 			if (newValue != threadRootAtTop) {
 				threadRootAtTop = newValue;
-				rebuildModel(currentItems);
+				rebuildModel();
 			}
 		}
 	}
 
 	private class GroupByFlameviewAction extends Action {
@@ -224,15 +230,17 @@
 			browser.execute(String.format("icicleView(%s);", icicleViewActive));
 		}
 	}
 
 	private enum ExportActionType {
-		SAVE_AS(getFlameviewMessage(FLAMEVIEW_SAVE_AS), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench()
-				.getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT), PlatformUI.getWorkbench()
-						.getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT_DISABLED)),
-		PRINT(getFlameviewMessage(FLAMEVIEW_PRINT), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench().getSharedImages()
-				.getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT), PlatformUI.getWorkbench().getSharedImages()
+		SAVE_AS(getFlameviewMessage(FLAMEVIEW_SAVE_AS), IAction.AS_PUSH_BUTTON,
+				PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT),
+				PlatformUI.getWorkbench().getSharedImages()
+						.getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT_DISABLED)),
+		PRINT(getFlameviewMessage(FLAMEVIEW_PRINT), IAction.AS_PUSH_BUTTON,
+				PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT),
+				PlatformUI.getWorkbench().getSharedImages()
 						.getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT_DISABLED));
 
 		private final String message;
 		private final int action;
 		private final ImageDescriptor imageDescriptor;
@@ -269,21 +277,50 @@
 				browser.execute("window.print()"); //$NON-NLS-1$
 				break;
 			}
 		}
 	}
+	
+	/**
+	 * 
+	 * Container for created {@link TraceNode} and {@link StacktraceModel}
+	 *
+	 */
+	private static final class ModelsContainer {
+		private final TraceNode root;
+		private final StacktraceModel model;
+
+		public ModelsContainer(TraceNode root, StacktraceModel model) {
+			super();
+			this.root = root;
+			this.model = model;
+		}
+
+		private TraceNode root() {
+			return root;
+		}
+		
+		private boolean isEqualStacktraceModel(StacktraceModel m) {
+			return model.equals(m);
+		}
+
+		private boolean isReady() {
+			return root != null && model != null;
+		}
+	}
 
 	@Override
 	public void init(IViewSite site, IMemento memento) throws PartInitException {
 		super.init(site, memento);
 		frameSeparator = new FrameSeparator(FrameCategorization.METHOD, false);
-		groupByActions = new GroupByAction[] {new GroupByAction(GroupActionType.LAST_FRAME),
-				new GroupByAction(GroupActionType.THREAD_ROOT)};
-		groupByFlameviewActions = new GroupByFlameviewAction[] {new GroupByFlameviewAction(GroupActionType.FLAME_GRAPH),
-				new GroupByFlameviewAction(GroupActionType.ICICLE_GRAPH)};
-		exportActions = new ExportAction[] {new ExportAction(ExportActionType.SAVE_AS),
-				new ExportAction(ExportActionType.PRINT)};
+		groupByActions = new GroupByAction[] { new GroupByAction(GroupActionType.LAST_FRAME),
+				new GroupByAction(GroupActionType.THREAD_ROOT) };
+		groupByFlameviewActions = new GroupByFlameviewAction[] {
+				new GroupByFlameviewAction(GroupActionType.FLAME_GRAPH),
+				new GroupByFlameviewAction(GroupActionType.ICICLE_GRAPH) };
+		exportActions = new ExportAction[] { new ExportAction(ExportActionType.SAVE_AS),
+				new ExportAction(ExportActionType.PRINT) };
 		Stream.of(exportActions).forEach((action) -> action.setEnabled(false));
 
 		// methodFormatter = new MethodFormatter(null, () -> viewer.refresh());
 		IMenuManager siteMenu = site.getActionBars().getMenuManager();
 		siteMenu.add(new Separator(MCContextMenuManager.GROUP_TOP));
@@ -329,45 +366,60 @@
 
 	@Override
 	public void selectionChanged(IWorkbenchPart part, ISelection selection) {
 		if (selection instanceof IStructuredSelection) {
 			Object first = ((IStructuredSelection) selection).getFirstElement();
-			setItems(AdapterUtil.getAdapter(first, IItemCollection.class));
+			IItemCollection items = AdapterUtil.getAdapter(first, IItemCollection.class);
+			if (items != null && !items.equals(currentItems)) {
+				setItems(items);
+			}
 		}
 	}
 
 	private void setItems(IItemCollection items) {
-		if (items != null) {
-			currentItems = items;
-			rebuildModel(items);
-		}
+		currentItems = items;
+		rebuildModel();
 	}
 
-	private void rebuildModel(IItemCollection items) {
-		// Release old model before building the new
+	private void rebuildModel() {
+		// try to cancel downstream calculation
 		if (currentModelCalculator != null) {
 			currentModelCalculator.cancel(true);
 		}
-		currentModelCalculator = getModelPreparer(items, frameSeparator, true);
+
+		currentModelCalculator = getModelPreparer(frameSeparator, true);
 		currentModelCalculator.thenAcceptAsync(this::setModel, DisplayToolkit.inDisplayThread())
 				.exceptionally(FlameGraphView::handleModelBuildException);
 	}
 
-	private CompletableFuture<TraceNode> getModelPreparer(
-		final IItemCollection items, final FrameSeparator separator, final boolean materializeSelectedBranches) {
+	private StacktraceModel createStacktraceModel() {
+		return new StacktraceModel(threadRootAtTop, frameSeparator, currentItems);
+	}
+
+	private CompletableFuture<ModelsContainer> getModelPreparer(final FrameSeparator separator,
+			final boolean materializeSelectedBranches) {
 		return CompletableFuture.supplyAsync(() -> {
-			StacktraceModel model = new StacktraceModel(threadRootAtTop, frameSeparator, items);
-			TraceNode root = TraceTreeUtils.createRootWithDescription(items, model.getRootFork().getBranchCount());
-			return TraceTreeUtils.createTree(root, model);
+			StacktraceModel model = createStacktraceModel();
+			Fork rootFork = model.getRootFork();
+			if (materializeSelectedBranches) {
+				Branch selectedBranch = getLastSelectedBranch(rootFork);
+				if (selectedBranch != null) {
+					selectedBranch.getEndFork();
+				}
+			}
+			
+			TraceNode root = TraceTreeUtils.createRootWithDescription(currentItems, rootFork.getBranchCount());
+			return new ModelsContainer(TraceTreeUtils.createTree(root, model), model);
+
 		}, MODEL_EXECUTOR);
 	}
 
-	private void setModel(TraceNode root) {
-		if (!browser.isDisposed() && !root.equals(currentRoot)) {
-			currentRoot = root;
-			setViewerInput(root);
-		}
+	private void setModel(ModelsContainer container) {
+		// Check that the models are prepared and up to date 
+		if (container.isReady() && container.isEqualStacktraceModel(createStacktraceModel()) && !browser.isDisposed()) {
+			setViewerInput(container.root());
+		} 
 	}
 
 	private void setViewerInput(TraceNode root) {
 		Stream.of(exportActions).forEach((action) -> action.setEnabled(false));
 		browser.setText(HTML_PAGE);
@@ -384,32 +436,34 @@
 
 				browser.execute(String.format("processGraph(%s, %s);", toJSon(root), icicleViewActive));
 				Stream.of(exportActions).forEach((action) -> action.setEnabled(true));
 			}
 		});
+
 	}
 
 	private void saveFlameGraph() {
 		CompletableFuture<String> future = new CompletableFuture<>();
 		String[] destination = new String[2];
 
 		DisplayToolkit.inDisplayThread().execute(() -> {
 			FileDialog fd = new FileDialog(browser.getShell(), SWT.SAVE);
 			fd.setText(getFlameviewMessage(FLAMEVIEW_SAVE_FLAME_GRAPH_AS));
-			fd.setFilterNames(
-					new String[] {getFlameviewMessage(FLAMEVIEW_JPEG_IMAGE), getFlameviewMessage(FLAMEVIEW_PNG_IMAGE)});
-			fd.setFilterExtensions(new String[] {"*.jpg", "*.png"}); //$NON-NLS-1$ //$NON-NLS-2$
+			fd.setFilterNames(new String[] { getFlameviewMessage(FLAMEVIEW_JPEG_IMAGE),
+					getFlameviewMessage(FLAMEVIEW_PNG_IMAGE) });
+			fd.setFilterExtensions(new String[] { "*.jpg", "*.png" }); //$NON-NLS-1$ //$NON-NLS-2$
 			fd.setFileName("flame_graph"); //$NON-NLS-1$
 			fd.setOverwrite(true);
 			if (fd.open() == null) {
 				future.cancel(true);
 				return;
 			}
 
 			String type;
 			String fileName = fd.getFileName().toLowerCase();
-			// FIXME: FileDialog filterIndex returns -1 (https://bugs.eclipse.org/bugs/show_bug.cgi?id=546256)
+			// FIXME: FileDialog filterIndex returns -1
+			// (https://bugs.eclipse.org/bugs/show_bug.cgi?id=546256)
 			if (fileName.endsWith(".jpg") || fileName.endsWith(".jpeg")) { //$NON-NLS-1$ //$NON-NLS-2$
 				type = "image/jpeg"; //$NON-NLS-1$
 			} else if (fileName.endsWith(".png")) { //$NON-NLS-1$
 				type = "image/png"; //$NON-NLS-1$
 			} else {
@@ -508,11 +562,11 @@
 
 	private static String toJSonKeyValue(String key, String value) {
 		return "\"" + key + "\": " + "\"" + value + "\"";
 	}
 
-	private static String loadLibraries(String ... libs) {
+	private static String loadLibraries(String... libs) {
 		if (libs == null || libs.length == 0) {
 			return "";
 		} else {
 			return Stream.of(libs).map(FlameGraphView::fileContent).collect(Collectors.joining("\n"));
 		}
@@ -527,21 +581,21 @@
 			return "";
 		}
 	}
 
 	private static ImageDescriptor flameviewImageDescriptor(String iconName) {
-		return ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); //$NON-NLS-1$
+		return ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); // $NON-NLS-1$
 	}
 
 	private static String getIconBase64(String iconName) {
 		Image image = FlightRecorderUI.getDefault().getImage(iconName);
 		if (image == null) {
 			return "";
 		} else {
 			ByteArrayOutputStream baos = new ByteArrayOutputStream();
 			ImageLoader loader = new ImageLoader();
-			loader.data = new ImageData[] {image.getImageData()};
+			loader.data = new ImageData[] { image.getImageData() };
 			loader.save(baos, SWT.IMAGE_PNG);
 			return Base64.getEncoder().encodeToString(baos.toByteArray());
 		}
 	}
 }
diff a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/views/stacktrace/StacktraceView.java b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/views/stacktrace/StacktraceView.java
--- a/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/views/stacktrace/StacktraceView.java
+++ b/application/org.openjdk.jmc.flightrecorder.ui/src/main/java/org/openjdk/jmc/flightrecorder/ui/views/stacktrace/StacktraceView.java
@@ -30,10 +30,12 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.flightrecorder.ui.views.stacktrace;
 
+import static org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModelUtils.getLastSelectedBranch;
+
 import java.util.Arrays;
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.logging.Level;
@@ -86,11 +88,10 @@
 import org.eclipse.ui.IWorkbenchPart;
 import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.forms.widgets.FormText;
 import org.eclipse.ui.part.ViewPart;
-
 import org.openjdk.jmc.common.IDisplayable;
 import org.openjdk.jmc.common.IMCFrame;
 import org.openjdk.jmc.common.IState;
 import org.openjdk.jmc.common.collection.SimpleArray;
 import org.openjdk.jmc.common.item.IItemCollection;
@@ -866,22 +867,10 @@
 			input.addAll(selectedBranch.getTailFrames());
 			addSelectedBranches(selectedBranch.getEndFork(), input, backwards);
 		}
 	}
 
-	// See JMC-6787
-	@SuppressWarnings("deprecation")
-	private static Branch getLastSelectedBranch(Fork fromFork) {
-		Branch lastSelectedBranch = null;
-		Branch branch = fromFork.getSelectedBranch();
-		while (branch != null) {
-			lastSelectedBranch = branch;
-			branch = branch.getEndFork().getSelectedBranch();
-		}
-		return lastSelectedBranch;
-	}
-
 	private static Fork getRootFork(Fork fork) {
 		while (fork.getParentBranch() != null) {
 			fork = fork.getParentBranch().getParentFork();
 		}
 		return fork;
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/StacktraceModelUtils.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/StacktraceModelUtils.java
--- /dev/null
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/stacktrace/StacktraceModelUtils.java
@@ -0,0 +1,25 @@
+package org.openjdk.jmc.flightrecorder.stacktrace;
+
+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Branch;
+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Fork;
+
+/**
+ * 
+ * StacktraceUtils useful shared functionality on {@link StacktraceModel} 
+ *
+ */
+public final class StacktraceModelUtils {
+
+	// See JMC-6787
+	@SuppressWarnings("deprecation")
+	public static Branch getLastSelectedBranch(Fork fromFork) {
+		Branch lastSelectedBranch = null;
+		Branch branch = fromFork.getSelectedBranch();
+		while (branch != null) {
+			lastSelectedBranch = branch;
+			branch = branch.getEndFork().getSelectedBranch();
+		}
+		return lastSelectedBranch;
+	}
+
+}
