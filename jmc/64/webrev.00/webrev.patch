diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/VMOperationRule.java
@@ -50,10 +50,11 @@
 import org.openjdk.jmc.common.item.IItemCollection;
 import org.openjdk.jmc.common.item.IItemIterable;
 import org.openjdk.jmc.common.unit.IQuantity;
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.common.util.IPreferenceValueProvider;
+import org.openjdk.jmc.common.util.Pair;
 import org.openjdk.jmc.common.util.TypedPreference;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
 import org.openjdk.jmc.flightrecorder.jdk.JdkAttributes;
 import org.openjdk.jmc.flightrecorder.jdk.JdkFilters;
 import org.openjdk.jmc.flightrecorder.jdk.JdkQueries;
@@ -68,12 +69,10 @@
 
 public class VMOperationRule implements IRule {
 
 	private static final String RESULT_ID = "VMOperations"; //$NON-NLS-1$
 	private static final double MAX_SECONDS_BETWEEN_EVENTS = 0.01;
-	private IQuantity longestDuration;
-	private IItem startingEvent;
 
 	public static final TypedPreference<IQuantity> WARNING_LIMIT = new TypedPreference<>("vm.vmoperation.warning.limit", //$NON-NLS-1$
 			Messages.getString(Messages.VMOperationRule_CONFIG_WARNING_LIMIT),
 			Messages.getString(Messages.VMOperationRule_CONFIG_WARNING_LIMIT_LONG), UnitLookup.TIMESPAN,
 			UnitLookup.MILLISECOND.quantity(2000));
@@ -97,18 +96,21 @@
 			return RulesToolkit.getEventAvailabilityResult(this, items, eventAvailability, JdkTypeIDs.VM_OPERATIONS);
 		}
 
 		IQuantity infoLimit = warningLimit.multiply(0.5);
 
-		findLongestEventInfo(items.apply(JdkFilters.VM_OPERATIONS_BLOCKING_OR_SAFEPOINT));
+		Pair<IItem, IQuantity> longestEventInfo = findLongestEventInfo(
+				items.apply(JdkFilters.VM_OPERATIONS_BLOCKING_OR_SAFEPOINT));
+		IItem startingEvent = longestEventInfo.left;
 		if (startingEvent == null) {
 			String zeroDuration = UnitLookup.SECOND.quantity(0).displayUsing(IDisplayable.AUTO);
 			return new Result(this, 0,
 					MessageFormat.format(Messages.getString(Messages.VMOperationRuleFactory_TEXT_OK), zeroDuration),
 					null, JdkQueries.VM_OPERATIONS);
 		}
 		String timeStr = getStartTime(startingEvent).displayUsing(IDisplayable.AUTO);
+		IQuantity longestDuration = longestEventInfo.right;
 		String peakDuration = longestDuration.displayUsing(IDisplayable.AUTO);
 		String operation = getOperation(startingEvent);
 		IMCThread caller = getCaller(startingEvent);
 		double score = RulesToolkit.mapExp100(longestDuration.doubleValueIn(UnitLookup.SECOND),
 				infoLimit.doubleValueIn(UnitLookup.SECOND), warningLimit.doubleValueIn(UnitLookup.SECOND));
@@ -129,11 +131,11 @@
 				: Messages.VMOperationRuleFactory_TEXT_OK;
 		return new Result(this, score, MessageFormat.format(Messages.getString(shortMessage), peakDuration), null,
 				JdkQueries.FILE_READ);
 	}
 
-	private void findLongestEventInfo(IItemCollection items) {
+	private Pair<IItem, IQuantity> findLongestEventInfo(IItemCollection items) {
 		IItem startingEvent = null;
 		IQuantity longestDuration = null;
 		IItem curStartingEvent = null;
 		IQuantity prevEndTime = null;
 		IQuantity curCombinedDur = null;
@@ -161,12 +163,11 @@
 				longestDuration = curCombinedDur;
 				startingEvent = curStartingEvent;
 			}
 			prevEndTime = getEndTime(event);
 		}
-		this.longestDuration = longestDuration;
-		this.startingEvent = startingEvent;
+		return new Pair<IItem, IQuantity>(startingEvent, longestDuration);
 	}
 
 	private List<IItem> sortEventsByStartTime(IItemCollection items) {
 		List<IItem> sortedEvents = new ArrayList<>();
 		for (IItemIterable iter : items) {
