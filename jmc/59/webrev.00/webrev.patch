diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ArrayReader.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ArrayReader.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ArrayReader.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ArrayReader.java
@@ -42,19 +42,24 @@
  * Reads an array with element of a certain type from a byte array.
  */
 final class ArrayReader implements IValueReader {
 
 	private final IValueReader reader;
+	private final ChunkStructure header;
 
-	ArrayReader(IValueReader reader) {
+	ArrayReader(IValueReader reader, ChunkStructure header) {
 		this.reader = reader;
+		this.header = header;
 	}
 
 	@Override
 	public Object readValue(byte[] bytes, Offset offset, long timestamp) throws InvalidJfrFileException {
 		int arraySize = readArraySize(bytes, offset.get());
 		offset.increase(DataType.INTEGER.getSize());
+		if (arraySize > header.getChunkSize()) {
+			throw new InvalidJfrFileException("Found array larger than chunk size"); //$NON-NLS-1$
+		}
 		Object[] array = new Object[arraySize];
 		for (int n = 0; n < arraySize; n++) {
 			array[n] = reader.readValue(bytes, offset, timestamp);
 		}
 		return array;
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ChunkLoaderV0.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ChunkLoaderV0.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ChunkLoaderV0.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ChunkLoaderV0.java
@@ -57,11 +57,11 @@
 	}
 
 	@Override
 	public byte[] call() throws Exception {
 		// Read constants
-		ReaderFactory readerFactory = new ReaderFactory(metadata, data, context);
+		ReaderFactory readerFactory = new ReaderFactory(metadata, data, context, structure);
 
 		// Read events
 		EventParserManager eventParser = new EventParserManager(readerFactory, context, metadata.getProducers());
 		int nextEventIndex = structure.getBodyStartOffset();
 		while (nextEventIndex < structure.getMetadataOffset()) {
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ReaderFactory.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ReaderFactory.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ReaderFactory.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v0/ReaderFactory.java
@@ -53,13 +53,15 @@
 class ReaderFactory {
 
 	private final FastAccessNumberMap<ConstantMap> constants = new FastAccessNumberMap<>(100, 5);
 	private final ChunkMetadata metadata;
 	private final FastAccessNumberMap<LabeledIdentifier> types = new FastAccessNumberMap<>();
+	private final ChunkStructure header;
 
-	ReaderFactory(ChunkMetadata metadata, byte[] chunkData, LoaderContext context) throws InvalidJfrFileException {
+	ReaderFactory(ChunkMetadata metadata, byte[] chunkData, LoaderContext context, ChunkStructure header) throws InvalidJfrFileException {
 		this.metadata = metadata;
+		this.header = header;
 		for (ProducerDescriptor pd : metadata.getProducers()) {
 			for (ContentTypeDescriptor ct : pd.getContentTypes()) {
 				IValueReader reader = createReader(ct.getDataStructure());
 				IPoolFactory<?> factory = GlobalObjectPool.getFactory(ct, context);
 				getConstantMap(ct.getContentTypeId()).init(reader, ct.getDataType(), factory);
@@ -121,13 +123,13 @@
 
 	IValueReader createReader(ValueDescriptor vd, String valueType) throws InvalidJfrFileException {
 		if (vd.getDataType().isPrimitive()) {
 			return createPrimitiveReader(vd.getDataType(), vd.getContentType(), valueType);
 		} else if (vd.getDataType() == DataType.ARRAY) {
-			return new ArrayReader(createPrimitiveReader(vd.getInnerDataType(), vd.getContentType(), valueType));
+			return new ArrayReader(createPrimitiveReader(vd.getInnerDataType(), vd.getContentType(), valueType), header);
 		} else if (vd.getDataType() == DataType.STRUCTARRAY) {
-			return new ArrayReader(createReader(vd.getChildren()));
+			return new ArrayReader(createReader(vd.getChildren()), header);
 		} else if (vd.getDataType() == DataType.STRUCT) {
 			return createReader(vd.getChildren());
 		} else {
 			throw new InvalidJfrFileException();
 		}
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/ChunkLoaderV1.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/ChunkLoaderV1.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/ChunkLoaderV1.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/ChunkLoaderV1.java
@@ -83,11 +83,11 @@
 		while (index < header.getChunkSize()) {
 			input.seek(index);
 			int size = input.readInt();
 			long type = input.readLong();
 			if (size == 0) {
-				throw new CouldNotLoadRecordingException("Found event with invalid size (0)");
+				throw new CouldNotLoadRecordingException("Found event with invalid size (0)"); //$NON-NLS-1$
 			}
 			if (type != CONSTANT_POOL_EVENT_TYPE && type != ChunkMetadata.METADATA_EVENT_TYPE) {
 				manager.readEvent(type, input);
 			}
 			index += size;
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/TypeManager.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/TypeManager.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/TypeManager.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/TypeManager.java
@@ -467,11 +467,11 @@
 			if (isNumeric) {
 				throw new InvalidJfrFileException("Numerics should not be put in constant pools"); //$NON-NLS-1$
 			}
 			reader = new PoolReader(fieldType.constants, reader.getContentType());
 		}
-		return f.isArray() ? new ArrayReader(reader) : reader;
+		return f.isArray() ? new ArrayReader(reader, header) : reader;
 	}
 
 	private static String buildLabel(String id, AnnotatedElement element) {
 		String labelOrId = element.label == null ? id : element.label;
 		return element.experimental
diff a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/ValueReaders.java b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/ValueReaders.java
--- a/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/ValueReaders.java
+++ b/core/org.openjdk.jmc.flightrecorder/src/main/java/org/openjdk/jmc/flightrecorder/internal/parser/v1/ValueReaders.java
@@ -114,19 +114,24 @@
 		}
 	}
 
 	static class ArrayReader implements IValueReader {
 		private final IValueReader elementReader;
+		private final ChunkStructure header;
 
-		ArrayReader(IValueReader elementReader) {
+		ArrayReader(IValueReader elementReader, ChunkStructure header) {
 			this.elementReader = elementReader;
+			this.header = header;
 		}
 
 		@Override
 		public Object read(IDataInput in, boolean allowUnresolvedReference)
 				throws IOException, InvalidJfrFileException {
 			int size = in.readInt();
+			if (size > header.getChunkSize()) {
+				throw new InvalidJfrFileException("Found array larger than chunk size"); //$NON-NLS-1$
+			}
 			Object[] values = new Object[size];
 			for (int i = 0; i < values.length; i++) {
 				values[i] = elementReader.read(in, allowUnresolvedReference);
 			}
 			return values;
