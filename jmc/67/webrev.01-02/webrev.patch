diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/MessagesUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/MessagesUtils.java
--- /dev/null
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/MessagesUtils.java
@@ -0,0 +1,72 @@
+/*
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Datadog, Inc. All rights reserved.
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.flightrecorder.flameview;
+
+import java.text.MessageFormat;
+
+public final class MessagesUtils {
+
+	/**
+	 * Localized Stack Trace message
+	 * 
+	 * @param key
+	 *            stack trace message
+	 * @return message
+	 */
+	public static String getStacktraceMessage(String key) {
+		return org.openjdk.jmc.flightrecorder.stacktrace.Messages.getString(key);
+	}
+
+	/**
+	 * Localized Flameview Message
+	 * 
+	 * @param key
+	 *            flameview message
+	 * @param values
+	 *            message values
+	 * @return message
+	 */
+	public static String getFlameviewMessage(String key, Object ... values) {
+		if (values == null || values.length == 0) {
+			return getFlameviewMessage(key);
+		} else {
+			return MessageFormat.format(getFlameviewMessage(key), values);
+		}
+	}
+
+	private static String getFlameviewMessage(String key) {
+		return org.openjdk.jmc.flightrecorder.flameview.Messages.getString(key);
+	}
+
+}
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
@@ -38,10 +38,13 @@
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_MORE;
+import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;
+import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getFlameviewMessage;
+import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getStacktraceMessage;
 
 import java.text.MessageFormat;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -59,23 +62,22 @@
 import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.common.util.FormatToolkit;
 import org.openjdk.jmc.flightrecorder.JfrAttributes;
 import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;
-import org.openjdk.jmc.flightrecorder.stacktrace.Messages;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Branch;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Fork;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFrame;
 
-public class TraceTreeUtils {
+public final class TraceTreeUtils {
 
 	public final static String EMPTY_STRING = ""; //$NON-NLS-1$
 	public final static int DEFAULT_ROOT_TITLE_MAX_EVENTS = 2;
 	public final static int DEFAULT_ROOT_EVENT_MAX = 10;
-	public final static String SELECT_EVENT_DELIMITER = createFlameviewMessage(
+	public final static String SELECT_EVENT_DELIMITER = getFlameviewMessage(
 			FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER);
 	public final static FrameSeparator DEFAULT_FRAME_SEPARATOR = new FrameSeparator(FrameCategorization.METHOD, false);
 
 	/**
 	 * Traces a TraceTree from a {@link StacktraceModel}.
@@ -108,15 +110,15 @@
 		StringBuilder titleSb = new StringBuilder();
 		StringBuilder descSb = new StringBuilder();
 		AtomicInteger totalItemsSum = new AtomicInteger(0);
 
 		if (branchCount == 0) {
-			titleSb.append(createFlameviewMessage(FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE));
+			titleSb.append(getFlameviewMessage(FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE));
 		} else {
 			Map<String, Integer> orderedEventTypeNameWithCount = eventTypeNameWithCountSorted(items, totalItemsSum);
-			String selectionText = createFlameviewMessage(FLAMEVIEW_SELECT_ROOT_NODE, totalItemsSum.get(),
-					orderedEventTypeNameWithCount.size());
+			String selectionText = getFlameviewMessage(FLAMEVIEW_SELECT_ROOT_NODE, String.valueOf(totalItemsSum.get()),
+					String.valueOf(orderedEventTypeNameWithCount.size()));
 			titleSb.append(selectionText);
 			createNodeTitleAndDescription(titleSb, descSb, orderedEventTypeNameWithCount);
 		}
 
 		return new TraceNode(titleSb.toString(), 0, descSb.toString());
@@ -135,22 +137,10 @@
 		builder.append(System.lineSeparator());
 		printTree(builder, 0, node);
 		return builder.toString();
 	}
 
-	private static String createFlameviewMessage(String key, Object ... values) {
-		if (values == null) {
-			return getFlameviewMessage(key);
-		} else {
-			return MessageFormat.format(getFlameviewMessage(key), values);
-		}
-	}
-
-	private static String getFlameviewMessage(String key) {
-		return org.openjdk.jmc.flightrecorder.flameview.Messages.getString(key);
-	}
-
 	private static void addBranch(TraceNode root, Branch branch) {
 		StacktraceFrame firstFrame = branch.getFirstFrame();
 		TraceNode currentNode = getTraceNodeByStacktraceFrame(firstFrame);
 		root.addChild(currentNode);
 		for (StacktraceFrame frame : branch.getTailFrames()) {
@@ -217,21 +207,21 @@
 		int maxEventsInTile = orderedItemCountByType.size() > DEFAULT_ROOT_TITLE_MAX_EVENTS
 				? DEFAULT_ROOT_TITLE_MAX_EVENTS : orderedItemCountByType.size() - 1;
 
 		for (Map.Entry<String, Integer> e : orderedItemCountByType.entrySet()) {
 			if (writeTitle) {
-				String eventType = createFlameviewMessage(FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN, e.getKey(),
+				String eventType = getFlameviewMessage(FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN, e.getKey(),
 						String.valueOf(e.getValue()));
 				titleSb.append(eventType);
 				if (i < maxEventsInTile) {
 					titleSb.append(SELECT_EVENT_DELIMITER);
 				} else {
 					writeTitle = false;
 				}
 			}
 			if (i < DEFAULT_ROOT_EVENT_MAX) {
-				String tableEvent = createFlameviewMessage(FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN,
+				String tableEvent = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN,
 						String.valueOf(e.getValue()), e.getKey());
 				descSb.append(tableEvent);
 			} else {
 				restEventCount = Long.sum(restEventCount, e.getValue());
 			}
@@ -239,28 +229,29 @@
 		}
 
 		if (restEventCount > 0) {
 			String restEventCountText = String.valueOf(restEventCount);
 			String restItemCountText = String.valueOf(orderedItemCountByType.size() - DEFAULT_ROOT_EVENT_MAX);
-			String tableEventRest = createFlameviewMessage(FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN,
+			String tableEventRest = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN,
 					restEventCountText, restItemCountText);
 			descSb.append(tableEventRest);
 		}
 
 		if (maxEventsInTile < orderedItemCountByType.size() - 1) {
-			titleSb.append(createFlameviewMessage(FLAMEVIEW_SELECT_HTML_MORE)); //$NON-NLS-1$
+			titleSb.append(getFlameviewMessage(FLAMEVIEW_SELECT_HTML_MORE)); //$NON-NLS-1$
 		}
 	}
 
 	private static TraceNode getTraceNodeByStacktraceFrame(StacktraceFrame sFrame) {
 		IMCFrame frame = sFrame.getFrame();
 		IMCMethod method = frame.getMethod();
 		String packageName = FormatToolkit.getPackage(method.getType().getPackage());
 		if (frame == StacktraceModel.UNKNOWN_FRAME) {
-			return new TraceNode(Messages.getString(Messages.STACKTRACE_UNCLASSIFIABLE_FRAME), sFrame.getItemCount(),
+			return new TraceNode(getStacktraceMessage(STACKTRACE_UNCLASSIFIABLE_FRAME), sFrame.getItemCount(),
 					packageName);
 		} else {
 			String name = FormatToolkit.getHumanReadable(method, false, false, true, false, true, false);
 			return new TraceNode(name, sFrame.getItemCount(), packageName);
 		}
 	}
+
 }
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -40,10 +40,12 @@
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_JPEG_IMAGE;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_PNG_IMAGE;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_PRINT;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SAVE_AS;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SAVE_FLAME_GRAPH_AS;
+import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getFlameviewMessage;
+import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getStacktraceMessage;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -128,18 +130,18 @@
 		String cssFlameview = "flameview.css";
 
 		String jsIeLibraries = loadLibraries(jsHtml5shiv, jsRespond);
 		String jsD3Libraries = loadLibraries(jsD3V4, jsD3Tip, jsD3FlameGraph);
 		String styleheets = loadLibraries(cssD3Flamegraph, cssFlameview);
-		String jsFlameview = fileContent(jsFlameviewName);
+		String jsFlameviewColoring = fileContent(jsFlameviewName);
 
 		String magnifierIcon = getIconBase64(ImageConstants.ICON_MAGNIFIER);
 
 		// formatter arguments for the template: %1 - CSSs stylesheets, %2 - IE9 specific scripts,
 		// %3 - Search Icon Base64, %4 - 3rd party scripts, %5 - Flameview Coloring,
 		HTML_PAGE = String.format(fileContent("page.template"), styleheets, jsIeLibraries, magnifierIcon, jsD3Libraries,
-				jsFlameview);
+				jsFlameviewColoring);
 	}
 
 	private static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(1);
 	private FrameSeparator frameSeparator;
 
@@ -155,13 +157,13 @@
 	private ExportAction[] exportActions;
 
 	private enum GroupActionType {
 		THREAD_ROOT(Messages.STACKTRACE_VIEW_THREAD_ROOT, IAction.AS_RADIO_BUTTON, CoreImages.THREAD),
 		LAST_FRAME(Messages.STACKTRACE_VIEW_LAST_FRAME, IAction.AS_RADIO_BUTTON, CoreImages.METHOD_NON_OPTIMIZED),
-		ICICLE_GRAPH(flameviewMessage(FLAMEVIEW_ICICLE_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(
+		ICICLE_GRAPH(getFlameviewMessage(FLAMEVIEW_ICICLE_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(
 				FlameviewImages.ICON_ICICLE_FLIP)),
-		FLAME_GRAPH(flameviewMessage(FLAMEVIEW_FLAME_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(
+		FLAME_GRAPH(getFlameviewMessage(FLAMEVIEW_FLAME_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(
 				FlameviewImages.ICON_FLAME_FLIP));
 
 		private final String message;
 		private final int action;
 		private final ImageDescriptor imageDescriptor;
@@ -212,14 +214,14 @@
 			browser.execute(String.format("icicleView(%s);", icicleViewActive));
 		}
 	}
 
 	private enum ExportActionType {
-		SAVE_AS(flameviewMessage(FLAMEVIEW_SAVE_AS), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench().getSharedImages()
-				.getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT), PlatformUI.getWorkbench().getSharedImages()
-						.getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT_DISABLED)),
-		PRINT(flameviewMessage(FLAMEVIEW_PRINT), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench().getSharedImages()
+		SAVE_AS(getFlameviewMessage(FLAMEVIEW_SAVE_AS), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench()
+				.getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT), PlatformUI.getWorkbench()
+						.getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT_DISABLED)),
+		PRINT(getFlameviewMessage(FLAMEVIEW_PRINT), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench().getSharedImages()
 				.getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT), PlatformUI.getWorkbench().getSharedImages()
 						.getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT_DISABLED));
 
 		private final String message;
 		private final int action;
@@ -377,13 +379,13 @@
 		CompletableFuture<String> future = new CompletableFuture<>();
 		String[] destination = new String[2];
 
 		DisplayToolkit.inDisplayThread().execute(() -> {
 			FileDialog fd = new FileDialog(browser.getShell(), SWT.SAVE);
-			fd.setText(flameviewMessage(FLAMEVIEW_SAVE_FLAME_GRAPH_AS));
+			fd.setText(getFlameviewMessage(FLAMEVIEW_SAVE_FLAME_GRAPH_AS));
 			fd.setFilterNames(
-					new String[] {flameviewMessage(FLAMEVIEW_JPEG_IMAGE), flameviewMessage(FLAMEVIEW_PNG_IMAGE)});
+					new String[] {getFlameviewMessage(FLAMEVIEW_JPEG_IMAGE), getFlameviewMessage(FLAMEVIEW_PNG_IMAGE)});
 			fd.setFilterExtensions(new String[] {"*.jpg", "*.png"}); //$NON-NLS-1$ //$NON-NLS-2$
 			fd.setFileName("flame_graph"); //$NON-NLS-1$
 			fd.setOverwrite(true);
 			if (fd.open() == null) {
 				future.cancel(true);
@@ -511,18 +513,10 @@
 					MessageFormat.format("Could not load script \"{0}\",\"{1}\"", fileName, e.getMessage())); //$NON-NLS-1$
 			return "";
 		}
 	}
 
-	private static String getStacktraceMessage(String key) {
-		return org.openjdk.jmc.flightrecorder.stacktrace.Messages.getString(key);
-	}
-
-	private static String flameviewMessage(String key) {
-		return org.openjdk.jmc.flightrecorder.flameview.Messages.getString(key);
-	}
-
 	private static ImageDescriptor flameviewImageDescriptor(String iconName) {
 		return AbstractUIPlugin.imageDescriptorFromPlugin(PLUGIN_ID, DIR_ICONS + iconName); //$NON-NLS-1$
 	}
 
 	private static String getIconBase64(String iconName) {
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css
@@ -18,11 +18,14 @@
 }
 
 
 th, td {
 	text-align: left;
-	padding: 2px;
+	padding-left: 4px;
+	padding-right: 4px;
+	padding-top: 2px;
+	padding-bottom: 2px;
 }
 
 .tdCount {
 	width: 60px;
 	color: white;
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.js b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.js
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.js
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.js
@@ -139,40 +139,32 @@
 		} else {
 			return element;
 		}}).join('');
 };
 
+
 const adjustTip = function(d) {
-	var tipMessage = d.data.n + htmlTagBr;
+	var tipMessage = "".concat(d.data.n, htmlTagBr);
 	if (d.data.v === undefined) {
-		tipMessage += createTable(d.data.d);
-	} else if (d.data.d === undefined) {
-		tipMessage +=  "package: " + d.data.p + htmlTagBr;
+		tipMessage += createRootTable(d.data.d);
 	} else {
-		tipMessage += "description: " + d.data.d + htmlTagBr;
+		tipMessage += createNodeTipTable(d.data);
 	}
-	if (d.data.v !== undefined) {
-		tipMessage += "samples: " + d.data.v;
-	} 
 	return tipMessage;
-};
+}
 
-const tagOpen = function(tag, cssClass) {
-	var result = "\u003C" + tag;
-	if (cssClass === undefined) {
-		result +="\u003E";
+const createNodeTipTable = function(data) {
+	var table = "".concat(tagOpen("table class='d3-flame-graph-tip'"), tagOpen("tbody"))
+	if (data.d === undefined) {
+		table = table.concat(addTableRow(tootlipPackage, data.p), addTableRow(tootlipSamples, data.v));
 	} else {
-		var cssExtended = " class='" + cssClass + "' \u003E";
-		result += cssExtended;
+		table += addTableRow(tootlipDescription, data.d);
 	}
-	return result;
-}
-const tagClose = function(tag) {
-	return "\u003C\u002F "+ tag + "\u003E";
+	return table.concat(tagClose("tbody"), tagClose("table"));
 }
 
-const createTable = function(input) {
+const createRootTable = function(input) {
 	var table = "";
 	var tableRows = input.split("|");
 	if(tableRows.length > 1) {
 		table = table.concat(tagOpen("table class='d3-flame-graph-tip'"), createTableHeader(), tagOpen("tbody"));
 		var prevCount = 0;
@@ -183,16 +175,30 @@
 		table = table.concat(tagClose("tbody"), tagClose("table"));
 	}
 	return table;
 }
 
+const tagOpen = function(tag, cssClass) {
+	var result = "\u003C" + tag;
+	if (cssClass === undefined) {
+		result +="\u003E";
+	} else {
+		var cssExtended = " class='" + cssClass + "' \u003E";
+		result += cssExtended;
+	}
+	return result;
+}
+const tagClose = function(tag) {
+	return "\u003C\u002F "+ tag + "\u003E";
+}
+
 const addTableRow = function(eventCount, eventName) {
 	return tableTr(tableTd(eventCount, "tdCount"), tableTd(eventName));
 }
 
 const createTableHeader = function() { 
-	return tagOpen("thead").concat(tableTr(tableTh("Count", "tdCount"), tableTh("Event Type")),tagClose("thead"));
+	return tagOpen("thead").concat(tableTr(tableTh(tooltipTableThCount, "tdCount"), tableTh(tooltipTableThCount)),tagClose("thead"));
 }
 
 const tableTh = function(value, css) {
 	return tagOpen("th", css).concat(value, tagClose("th"));
 }
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages.properties b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages.properties
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages.properties
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages.properties
@@ -43,5 +43,10 @@
 FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER=,\u0020
 FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN={0}[{1}]
 FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN={0}:{1}|
 FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN={0}:Others... ({1} types)|
 FLAMEVIEW_SELECT_HTML_MORE=...
+FLAMEVIEW_SELECT_HTML_TABLE_COUNT=Count
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_TYPE=Event Type
+FLAMEVIEW_SELECT_HTML_TOOLTIP_PACKAGE=Package
+FLAMEVIEW_SELECT_HTML_TOOLTIP_DESCRIPTION=Description
+FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES=Samples
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_ja.properties b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_ja.properties
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_ja.properties
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_ja.properties
@@ -43,5 +43,10 @@
 FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER=,\u0020
 FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN={0}[{1}]
 FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN={0}:{1}|
 FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN={0}:Others... ({1} types)|
 FLAMEVIEW_SELECT_HTML_MORE=...
+FLAMEVIEW_SELECT_HTML_TABLE_COUNT=Count
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_TYPE=Event Type
+FLAMEVIEW_SELECT_HTML_TOOLTIP_PACKAGE=Package
+FLAMEVIEW_SELECT_HTML_TOOLTIP_DESCRIPTION=Description
+FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES=Samples
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_zh_CN.properties b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_zh_CN.properties
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_zh_CN.properties
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_zh_CN.properties
@@ -43,5 +43,10 @@
 FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER=,\u0020
 FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN={0}[{1}]
 FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN={0}:{1}|
 FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN={0}:Others... ({1} types)|
 FLAMEVIEW_SELECT_HTML_MORE=...
+FLAMEVIEW_SELECT_HTML_TABLE_COUNT=Count
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_TYPE=Event Type
+FLAMEVIEW_SELECT_HTML_TOOLTIP_PACKAGE=Package
+FLAMEVIEW_SELECT_HTML_TOOLTIP_DESCRIPTION=Description
+FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES=Samples
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template
@@ -28,10 +28,15 @@
 	<script type="text/javascript">%4$s</script>
 	<script type="text/javascript">%5$s</script>
 	<script type="text/javascript">
 		
 		const minSearchTextSize = 3;
+		var tooltipTableThCount = "Count";
+		var tooltipTableThEventType = "Event Type";
+		var tootlipPackage = "Package"
+		var tootlipDescription = "Description";
+		var tootlipSamples = "Samples";
 		var textToSearch = "";
 		var flameGraph;
 		var currentJson;
 		
 		const packageInputField = document.getElementById("searchInput");
