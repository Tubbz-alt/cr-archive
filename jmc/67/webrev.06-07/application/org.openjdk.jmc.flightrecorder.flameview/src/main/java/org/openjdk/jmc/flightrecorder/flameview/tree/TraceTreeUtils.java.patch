diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
@@ -83,12 +83,14 @@
 	public final static FrameSeparator DEFAULT_FRAME_SEPARATOR = new FrameSeparator(FrameCategorization.METHOD, false);
 
 	/**
 	 * Traces a TraceTree from a {@link StacktraceModel}.
 	 * 
-	 * @param root  the root with description
-	 * @param model the model to trace the tree from
+	 * @param root
+	 *            the root with description
+	 * @param model
+	 *            the model to trace the tree from
 	 * @return the root
 	 */
 	public static TraceNode createTree(TraceNode root, StacktraceModel model) {
 		Fork rootFork = model.getRootFork();
 		for (Branch branch : rootFork.getBranches()) {
@@ -98,12 +100,14 @@
 	}
 
 	/**
 	 * Root of Traces from the selection {@link IItemCollection}
 	 * 
-	 * @param items       the items from the selection
-	 * @param branchCount branch count from {@link StacktraceModel} model
+	 * @param items
+	 *            the items from the selection
+	 * @param branchCount
+	 *            branch count from {@link StacktraceModel} model
 	 * @return root
 	 */
 	public static TraceNode createRootWithDescription(IItemCollection items, int branchCount) {
 
 		StringBuilder titleSb = new StringBuilder();
@@ -123,11 +127,12 @@
 	}
 
 	/**
 	 * Print the tree by the trace node
 	 * 
-	 * @param node trace node
+	 * @param node
+	 *            trace node
 	 * @return tree
 	 */
 	public static String printTree(TraceNode node) {
 		StringBuilder builder = new StringBuilder();
 		builder.append("=== Tree Printout ===");
@@ -176,12 +181,12 @@
 			builder.append("   ");
 		}
 		return builder.toString();
 	}
 
-	private static Map<String, Integer> eventTypeNameWithCountSorted(IItemCollection items,
-			AtomicInteger totalEventTypeSum) {
+	private static Map<String, Integer> eventTypeNameWithCountSorted(
+		IItemCollection items, AtomicInteger totalEventTypeSum) {
 		final HashMap<String, Integer> map = new HashMap<>();
 		IAggregator<IQuantity, ?> build = GroupingAggregator.build(EMPTY_STRING, EMPTY_STRING, JfrAttributes.EVENT_TYPE,
 				Aggregators.count(), new GroupingAggregator.IGroupsFinisher<IQuantity, IType<?>, CountConsumer>() {
 
 					@Override
@@ -202,19 +207,18 @@
 				});
 		items.getAggregate(build);
 		return RulesToolkit.sortMap(map, false);
 	}
 
-	private static void createNodeTitleAndDescription(StringBuilder titleSb, StringBuilder descSb,
-			Map<String, Integer> orderedItemCountByType) {
+	private static void createNodeTitleAndDescription(
+		StringBuilder titleSb, StringBuilder descSb, Map<String, Integer> orderedItemCountByType) {
 
 		int i = 0;
 		long restEventCount = 0;
 		boolean writeTitle = true;
 		int maxEventsInTile = orderedItemCountByType.size() > DEFAULT_ROOT_TITLE_MAX_EVENTS
-				? DEFAULT_ROOT_TITLE_MAX_EVENTS
-				: orderedItemCountByType.size() - 1;
+				? DEFAULT_ROOT_TITLE_MAX_EVENTS : orderedItemCountByType.size() - 1;
 
 		for (Map.Entry<String, Integer> e : orderedItemCountByType.entrySet()) {
 			if (writeTitle) {
 				String eventType = getFlameviewMessage(FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN, e.getKey(),
 						String.valueOf(e.getValue()));
