diff a/application/org.openjdk.jmc.flightrecorder.flameview/META-INF/MANIFEST.MF b/application/org.openjdk.jmc.flightrecorder.flameview/META-INF/MANIFEST.MF
--- a/application/org.openjdk.jmc.flightrecorder.flameview/META-INF/MANIFEST.MF
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/META-INF/MANIFEST.MF
@@ -2,9 +2,12 @@
 Bundle-ManifestVersion: 2
 Bundle-Localization: plugin
 Bundle-Name: FlameView
 Bundle-SymbolicName: org.openjdk.jmc.flightrecorder.flameview;singleton:=true
 Bundle-Version: 8.0.0.qualifier
-Require-Bundle: org.openjdk.jmc.flightrecorder, org.openjdk.jmc.flightrecorder.ui
+Require-Bundle: org.openjdk.jmc.flightrecorder,
+ org.openjdk.jmc.flightrecorder.ui,
+ org.openjdk.jmc.flightrecorder.rules,
+ org.openjdk.jmc.common
 Bundle-RequiredExecutionEnvironment: JavaSE-1.8
 Bundle-Vendor: Oracle Corporation
 Automatic-Module-Name: org.openjdk.jmc.flightrecorder.ext.flameview
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/Messages.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/Messages.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/Messages.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/Messages.java
@@ -46,10 +46,17 @@
 	public static final String FLAMEVIEW_SAVE_AS = "FLAMEVIEW_SAVE_AS"; //$NON-NLS-1$
 	public static final String FLAMEVIEW_PRINT = "FLAMEVIEW_PRINT"; //$NON-NLS-1$
 	public static final String FLAMEVIEW_SAVE_FLAME_GRAPH_AS = "FLAMEVIEW_SAVE_FLAME_GRAPH_AS"; //$NON-NLS-1$
 	public static final String FLAMEVIEW_JPEG_IMAGE = "FLAMEVIEW_JPEG_IMAGE"; //$NON-NLS-1$
 	public static final String FLAMEVIEW_PNG_IMAGE = "FLAMEVIEW_PNG_IMAGE"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE = "FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_ROOT_NODE = "FLAMEVIEW_SELECT_ROOT_NODE"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER = "FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN = "FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN = "FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN = "FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_HTML_MORE = "FLAMEVIEW_SELECT_HTML_MORE"; //$NON-NLS-1$
 
 	private Messages() {
 	}
 
 	public static String getString(String key) {
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
@@ -31,53 +31,124 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.flightrecorder.flameview.tree;
 
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_ROOT_NODE;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_MORE;
+
+import java.text.MessageFormat;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicInteger;
+
 import org.openjdk.jmc.common.IMCFrame;
 import org.openjdk.jmc.common.IMCMethod;
+import org.openjdk.jmc.common.item.Aggregators;
+import org.openjdk.jmc.common.item.GroupingAggregator;
+import org.openjdk.jmc.common.item.IAggregator;
 import org.openjdk.jmc.common.item.IItemCollection;
+import org.openjdk.jmc.common.item.IType;
+import org.openjdk.jmc.common.item.Aggregators.CountConsumer;
+import org.openjdk.jmc.common.item.GroupingAggregator.GroupEntry;
+import org.openjdk.jmc.common.unit.IQuantity;
+import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.common.util.FormatToolkit;
+import org.openjdk.jmc.flightrecorder.JfrAttributes;
+import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;
 import org.openjdk.jmc.flightrecorder.stacktrace.Messages;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Branch;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Fork;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFrame;
 
 public class TraceTreeUtils {
-	public final static String DEFAULT_ROOT_NAME = "__root";
-	public final static String DEFAULT_ROOT_PACKAGE_NAME = "";
+
+	public final static String EMPTY_STRING = ""; //$NON-NLS-1$
+	public final static int DEFAULT_ROOT_TITLE_MAX_EVENTS = 2;
+	public final static int DEFAULT_ROOT_EVENT_MAX = 10;
+	public final static String SELECT_EVENT_DELIMITER = createFlameviewMessage(
+			FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER);
 	public final static FrameSeparator DEFAULT_FRAME_SEPARATOR = new FrameSeparator(FrameCategorization.METHOD, false);
 
 	/**
 	 * Traces a TraceTree from a {@link StacktraceModel}.
-	 *
+	 * 
+	 * @param root
+	 *            the root with description
 	 * @param model
-	 *            the model to trace the tree from.
-	 * @return the root.
+	 *            the model to trace the tree from
+	 * @return the root
 	 */
-	public static TraceNode createTree(StacktraceModel model, String rootName) {
+	public static TraceNode createTree(TraceNode root, StacktraceModel model) {
 		Fork rootFork = model.getRootFork();
-		TraceNode root = getRootTraceNode(rootName, rootFork);
 		for (Branch branch : rootFork.getBranches()) {
 			addBranch(root, branch);
 		}
 		return root;
 	}
 
 	/**
-	 * Traces a tree of stack frames from an {@link IItemCollection}.
-	 *
+	 * Root of Traces from the selection {@link IItemCollection}
+	 * 
 	 * @param items
-	 *            the events to aggregate the traces from.
-	 * @return the root of the resulting tree.
+	 *            the items from the selection
+	 * @param branchCount
+	 *            branch count from {@link StacktraceModel} model
+	 * @return root
+	 */
+	public static TraceNode createRootWithDescription(IItemCollection items, int branchCount) {
+
+		StringBuilder titleSb = new StringBuilder();
+		StringBuilder descSb = new StringBuilder();
+		AtomicInteger totalItemsSum = new AtomicInteger(0);
+
+		if (branchCount == 0) {
+			titleSb.append(createFlameviewMessage(FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE));
+		} else {
+			Map<String, Integer> orderedEventTypeNameWithCount = eventTypeNameWithCountSorted(items, totalItemsSum);
+			String selectionText = createFlameviewMessage(FLAMEVIEW_SELECT_ROOT_NODE, totalItemsSum.get(),
+					orderedEventTypeNameWithCount.size());
+			titleSb.append(selectionText);
+			createNodeTitleAndDescription(titleSb, descSb, orderedEventTypeNameWithCount);
+		}
+
+		return new TraceNode(titleSb.toString(), 0, descSb.toString());
+	}
+
+	/**
+	 * Print the tree by the trace node
+	 * 
+	 * @param node
+	 *            trace node
+	 * @return tree
 	 */
-	public static TraceNode createTree(
-		IItemCollection items, FrameSeparator frameSeparator, boolean threadRootAtTop, String rootName) {
-		return createTree(new StacktraceModel(threadRootAtTop, frameSeparator, items), rootName);
+	public static String printTree(TraceNode node) {
+		StringBuilder builder = new StringBuilder();
+		builder.append("=== Tree Printout ===");
+		builder.append(System.lineSeparator());
+		printTree(builder, 0, node);
+		return builder.toString();
+	}
+
+	private static String createFlameviewMessage(String key, Object ... values) {
+		if (values == null) {
+			return getFlameviewMessage(key);
+		} else {
+			return MessageFormat.format(getFlameviewMessage(key), values);
+		}
+	}
+
+	private static String getFlameviewMessage(String key) {
+		return org.openjdk.jmc.flightrecorder.flameview.Messages.getString(key);
 	}
 
 	private static void addBranch(TraceNode root, Branch branch) {
 		StacktraceFrame firstFrame = branch.getFirstFrame();
 		TraceNode currentNode = getTraceNodeByStacktraceFrame(firstFrame);
@@ -94,18 +165,10 @@
 		for (Branch branch : fork.getBranches()) {
 			addBranch(node, branch);
 		}
 	}
 
-	public static String printTree(TraceNode node) {
-		StringBuilder builder = new StringBuilder();
-		builder.append("=== Tree Printout ===");
-		builder.append(System.lineSeparator());
-		printTree(builder, 0, node);
-		return builder.toString();
-	}
-
 	private static void printTree(StringBuilder builder, int indentation, TraceNode node) {
 		builder.append(String.format("%s%s - %d%n", indent(indentation), node.getName(), node.getValue()));
 		for (TraceNode child : node.getChildren()) {
 			printTree(builder, indentation + 1, child);
 		}
@@ -117,13 +180,77 @@
 			builder.append("   ");
 		}
 		return builder.toString();
 	}
 
-	private static TraceNode getRootTraceNode(String rootName, Fork rootFork) {
-		return new TraceNode(rootName == null ? DEFAULT_ROOT_NAME : rootName, rootFork.getItemsInFork(),
-				DEFAULT_ROOT_PACKAGE_NAME);
+	private static Map<String, Integer> eventTypeNameWithCountSorted(
+		IItemCollection items, AtomicInteger totalEventTypeSum) {
+		final HashMap<String, Integer> map = new HashMap<>();
+		IAggregator<IQuantity, ?> build = GroupingAggregator.build(EMPTY_STRING, EMPTY_STRING, JfrAttributes.EVENT_TYPE,
+				Aggregators.count(), new GroupingAggregator.IGroupsFinisher<IQuantity, IType<?>, CountConsumer>() {
+
+					@Override
+					public IType<IQuantity> getValueType() {
+						return UnitLookup.NUMBER;
+					}
+
+					@Override
+					public IQuantity getValue(Iterable<? extends GroupEntry<IType<?>, CountConsumer>> groups) {
+						for (GroupEntry<IType<?>, CountConsumer> groupEntry : groups) {
+							CountConsumer consumer = groupEntry.getConsumer();
+							IType<?> key = groupEntry.getKey();
+							totalEventTypeSum.addAndGet(consumer.getCount());
+							map.put(key.getName(), consumer.getCount());
+						}
+						return null;
+					}
+				});
+		items.getAggregate(build);
+		return RulesToolkit.sortMap(map, false);
+	}
+
+	private static void createNodeTitleAndDescription(
+		StringBuilder titleSb, StringBuilder descSb, Map<String, Integer> orderedItemCountByType) {
+
+		int i = 0;
+		long restEventCount = 0;
+		boolean writeTitle = true;
+		int maxEventsInTile = orderedItemCountByType.size() > DEFAULT_ROOT_TITLE_MAX_EVENTS
+				? DEFAULT_ROOT_TITLE_MAX_EVENTS : orderedItemCountByType.size() - 1;
+
+		for (Map.Entry<String, Integer> e : orderedItemCountByType.entrySet()) {
+			if (writeTitle) {
+				String eventType = createFlameviewMessage(FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN, e.getKey(),
+						String.valueOf(e.getValue()));
+				titleSb.append(eventType);
+				if (i < maxEventsInTile) {
+					titleSb.append(SELECT_EVENT_DELIMITER);
+				} else {
+					writeTitle = false;
+				}
+			}
+			if (i < DEFAULT_ROOT_EVENT_MAX) {
+				String tableEvent = createFlameviewMessage(FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN,
+						String.valueOf(e.getValue()), e.getKey());
+				descSb.append(tableEvent);
+			} else {
+				restEventCount = Long.sum(restEventCount, e.getValue());
+			}
+			i++;
+		}
+
+		if (restEventCount > 0) {
+			String restEventCountText = String.valueOf(restEventCount);
+			String restItemCountText = String.valueOf(orderedItemCountByType.size() - DEFAULT_ROOT_EVENT_MAX);
+			String tableEventRest = createFlameviewMessage(FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN,
+					restEventCountText, restItemCountText);
+			descSb.append(tableEventRest);
+		}
+
+		if (maxEventsInTile < orderedItemCountByType.size() - 1) {
+			titleSb.append(createFlameviewMessage(FLAMEVIEW_SELECT_HTML_MORE)); //$NON-NLS-1$
+		}
 	}
 
 	private static TraceNode getTraceNodeByStacktraceFrame(StacktraceFrame sFrame) {
 		IMCFrame frame = sFrame.getFrame();
 		IMCMethod method = frame.getMethod();
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -92,10 +92,11 @@
 import org.openjdk.jmc.common.util.StringToolkit;
 import org.openjdk.jmc.flightrecorder.flameview.FlameviewImages;
 import org.openjdk.jmc.flightrecorder.flameview.tree.TraceNode;
 import org.openjdk.jmc.flightrecorder.flameview.tree.TraceTreeUtils;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;
+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
 import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;
 import org.openjdk.jmc.flightrecorder.ui.common.ImageConstants;
 import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;
 import org.openjdk.jmc.ui.CoreImages;
@@ -340,11 +341,13 @@
 	}
 
 	private CompletableFuture<TraceNode> getModelPreparer(
 		final IItemCollection items, final FrameSeparator separator, final boolean materializeSelectedBranches) {
 		return CompletableFuture.supplyAsync(() -> {
-			return TraceTreeUtils.createTree(items, separator, threadRootAtTop, "-- <Root> --");
+			StacktraceModel model = new StacktraceModel(threadRootAtTop, frameSeparator, items);
+			TraceNode root = TraceTreeUtils.createRootWithDescription(items, model.getRootFork().getBranchCount());
+			return TraceTreeUtils.createTree(root, model);
 		}, MODEL_EXECUTOR);
 	}
 
 	private void setModel(TraceNode root) {
 		if (!browser.isDisposed() && !root.equals(currentRoot)) {
@@ -446,25 +449,37 @@
 		return render(root);
 	}
 
 	private static String render(TraceNode root) {
 		StringBuilder builder = new StringBuilder();
-		render(builder, root);
+		String rootNodeStart = createJsonRootTraceNode(root);
+		builder.append(rootNodeStart);
+		renderChildren(builder, root);
+		builder.append("]}");
 		return builder.toString();
 	}
 
 	private static void render(StringBuilder builder, TraceNode node) {
 		String start = UNCLASSIFIABLE_FRAME.equals(node.getName()) ? createJsonDescTraceNode(node)
 				: createJsonTraceNode(node);
 		builder.append(start);
+		renderChildren(builder, node);
+		builder.append("]}");
+	}
+
+	private static void renderChildren(StringBuilder builder, TraceNode node) {
 		for (int i = 0; i < node.getChildren().size(); i++) {
 			render(builder, node.getChildren().get(i));
 			if (i < node.getChildren().size() - 1) {
 				builder.append(",");
 			}
 		}
-		builder.append("]}");
+	}
+
+	private static String createJsonRootTraceNode(TraceNode rootNode) {
+		return String.format("{%s,%s,%s, \"c\": [ ", toJSonKeyValue("n", rootNode.getName()), toJSonKeyValue("p", ""),
+				toJSonKeyValue("d", rootNode.getPackageName()));
 	}
 
 	private static String createJsonTraceNode(TraceNode node) {
 		return String.format("{%s,%s,%s, \"c\": [ ", toJSonKeyValue("n", node.getName()),
 				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("v", String.valueOf(node.getValue())));
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css
@@ -2,13 +2,29 @@
 	font-family: Helvetica, Arial, Verdana, sans-serif;
 	font-size: 12px;
 	margin-right: 2px;	
 }
 
-svg {
+svg, table {
 	width: 100%;
 }
 
-#icicleIcon {
-	cursor: pointer;
-			
+table {
+	margin-top: 4px;	
+}
+
+table, th, td {
+	border-collapse: collapse;
+	border: 1px solid grey;
+}
+
+
+th, td {
+	text-align: left;
+	padding: 2px;
+}
+
+.tdCount {
+	width: 60px;
+	color: white;
+	text-align: right;	
 }
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js
@@ -113,11 +113,11 @@
 const adjustHslPropertyByHash = function (hash, min, max) {
 	const proposedValue = hash % (max - min) + min;
 	return Math.min(proposedValue, max);
 };
 
-const createHslColorString = function(h,s,l){
+const createHslColorString = function(h,s,l) {
 	return "hsl\u0028" + h + "\u002c " + s + "\u0025\u002c " + l + "\u0025\u0029";
 };
 
 const colorCell = function(d) {
 	if (textToSearch !== "" && (evaluateSearchElement(d.data.p) || evaluateSearchElement(d.data.n))) {
@@ -141,13 +141,67 @@
 		}}).join('');
 };
 
 const adjustTip = function(d) {
 	var tipMessage = d.data.n + htmlTagBr;
-	if (d.data.d === undefined) {
+	if (d.data.v == undefined) {
+		tipMessage += createTable(d.data.d);
+	} else if (d.data.d === undefined) {
 		tipMessage +=  "package: " + d.data.p + htmlTagBr;
 	} else {
 		tipMessage += "description: " + d.data.d + htmlTagBr;
 	}
-	tipMessage += "samples: " + d.data.v;
+	if (d.data.v !== undefined) {
+		tipMessage += "samples: " + d.data.v;
+	} 
 	return tipMessage;
-};
+};
+
+const tagOpen = function(tag, cssClass) {
+	var result = "\u003C" + tag;
+	if (cssClass === undefined) {
+		result +="\u003E";
+	} else {
+		var cssExtended = " class='" + cssClass + "' \u003E";
+		result += cssExtended;
+	}
+	return result;
+}
+const tagClose = function(tag) {
+	return "\u003C\u002F "+ tag + "\u003E";
+}
+
+const createTable = function(input) {
+	var table = "";
+	var tableRows = input.split("|");
+	if(tableRows.length > 1) {
+		table = table.concat(tagOpen("table class='d3-flame-graph-tip'"), createTableHeader(), tagOpen("tbody"));
+		var prevCount = 0;
+		for(var i=0; i < tableRows.length - 1; i++) {
+			const rowValue = tableRows[i].split(":");
+			table += addTableRow(parseInt(rowValue[0]), rowValue[1]);
+		}
+		table = table.concat(tagClose("tbody"), tagClose("table"));
+	}
+	return table;
+}
+
+const addTableRow = function(eventCount, eventName) {
+	return tableTr(tableTd(eventCount, "tdCount"), tableTd(eventName));
+}
+
+const createTableHeader = function() { 
+	return tagOpen("thead").concat(tableTr(tableTh("Count", "tdCount"), tableTh("Event Type")),tagClose("thead"));
+}
+
+const tableTh = function(value, css) {
+	return tagOpen("th", css).concat(value, tagClose("th"));
+}
+
+const tableTd = function(value, css) {
+	return tagOpen("td", css).concat(value, tagClose("td"));
+}
+
+const tableTr = function(...elements) {
+	return tagOpen("tr").concat(elements.join(""), tagClose("tr"));
+}
+
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages.properties b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages.properties
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages.properties
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages.properties
@@ -35,6 +35,13 @@
 FLAMEVIEW_ICICLE_GRAPH=Icicle Graph
 FLAMEVIEW_SAVE_AS=Save as...
 FLAMEVIEW_PRINT=Print
 FLAMEVIEW_SAVE_FLAME_GRAPH_AS=Save flame graph as...
 FLAMEVIEW_JPEG_IMAGE=JPEG image
-FLAMEVIEW_PNG_IMAGE=PNG image
+FLAMEVIEW_PNG_IMAGE=PNG image
+FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE=Stack Trace not available
+FLAMEVIEW_SELECT_ROOT_NODE=Selection: {0} event of {1} types:\u0020
+FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER=,\u0020
+FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN={0}[{1}]
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN={0}:{1}|
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN={0}:others... ({1} types)|
+FLAMEVIEW_SELECT_HTML_MORE=...
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_ja.properties b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_ja.properties
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_ja.properties
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_ja.properties
@@ -35,6 +35,13 @@
 FLAMEVIEW_ICICLE_GRAPH=Icicle Graph
 FLAMEVIEW_SAVE_AS=Save as...
 FLAMEVIEW_PRINT=Print
 FLAMEVIEW_SAVE_FLAME_GRAPH_AS=Save flame graph as...
 FLAMEVIEW_JPEG_IMAGE=JPEG image
-FLAMEVIEW_PNG_IMAGE=PNG image
+FLAMEVIEW_PNG_IMAGE=PNG image
+FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE=Stack Trace not available
+FLAMEVIEW_SELECT_ROOT_NODE=Selection: {0} event of {1} types:\u0020
+FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER=,\u0020
+FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN={0}[{1}]
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN={0}:{1}|
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN={0}:other ({1} types)|
+FLAMEVIEW_SELECT_HTML_MORE=...
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_zh_CN.properties b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_zh_CN.properties
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_zh_CN.properties
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_zh_CN.properties
@@ -36,5 +36,12 @@
 FLAMEVIEW_SAVE_AS=Save as...
 FLAMEVIEW_PRINT=Print
 FLAMEVIEW_SAVE_FLAME_GRAPH_AS=Save flame graph as...
 FLAMEVIEW_JPEG_IMAGE=JPEG image
 FLAMEVIEW_PNG_IMAGE=PNG image
+FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE=Stack Trace not available
+FLAMEVIEW_SELECT_ROOT_NODE=Selection: {0} event of {1} types:\u0020
+FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER=,\u0020
+FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN={0}[{1}]
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN={0}:{1}|
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN={0}:other ({1} types)|
+FLAMEVIEW_SELECT_HTML_MORE=...
