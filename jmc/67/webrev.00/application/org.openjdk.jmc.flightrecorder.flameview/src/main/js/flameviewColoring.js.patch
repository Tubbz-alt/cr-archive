diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js
@@ -113,11 +113,11 @@
 const adjustHslPropertyByHash = function (hash, min, max) {
 	const proposedValue = hash % (max - min) + min;
 	return Math.min(proposedValue, max);
 };
 
-const createHslColorString = function(h,s,l){
+const createHslColorString = function(h,s,l) {
 	return "hsl\u0028" + h + "\u002c " + s + "\u0025\u002c " + l + "\u0025\u0029";
 };
 
 const colorCell = function(d) {
 	if (textToSearch !== "" && (evaluateSearchElement(d.data.p) || evaluateSearchElement(d.data.n))) {
@@ -141,13 +141,67 @@
 		}}).join('');
 };
 
 const adjustTip = function(d) {
 	var tipMessage = d.data.n + htmlTagBr;
-	if (d.data.d === undefined) {
+	if (d.data.v == undefined) {
+		tipMessage += createTable(d.data.d);
+	} else if (d.data.d === undefined) {
 		tipMessage +=  "package: " + d.data.p + htmlTagBr;
 	} else {
 		tipMessage += "description: " + d.data.d + htmlTagBr;
 	}
-	tipMessage += "samples: " + d.data.v;
+	if (d.data.v !== undefined) {
+		tipMessage += "samples: " + d.data.v;
+	} 
 	return tipMessage;
-};
+};
+
+const tagOpen = function(tag, cssClass) {
+	var result = "\u003C" + tag;
+	if (cssClass === undefined) {
+		result +="\u003E";
+	} else {
+		var cssExtended = " class='" + cssClass + "' \u003E";
+		result += cssExtended;
+	}
+	return result;
+}
+const tagClose = function(tag) {
+	return "\u003C\u002F "+ tag + "\u003E";
+}
+
+const createTable = function(input) {
+	var table = "";
+	var tableRows = input.split("|");
+	if(tableRows.length > 1) {
+		table = table.concat(tagOpen("table class='d3-flame-graph-tip'"), createTableHeader(), tagOpen("tbody"));
+		var prevCount = 0;
+		for(var i=0; i < tableRows.length - 1; i++) {
+			const rowValue = tableRows[i].split(":");
+			table += addTableRow(parseInt(rowValue[0]), rowValue[1]);
+		}
+		table = table.concat(tagClose("tbody"), tagClose("table"));
+	}
+	return table;
+}
+
+const addTableRow = function(eventCount, eventName) {
+	return tableTr(tableTd(eventCount, "tdCount"), tableTd(eventName));
+}
+
+const createTableHeader = function() { 
+	return tagOpen("thead").concat(tableTr(tableTh("Count", "tdCount"), tableTh("Event Type")),tagClose("thead"));
+}
+
+const tableTh = function(value, css) {
+	return tagOpen("th", css).concat(value, tagClose("th"));
+}
+
+const tableTd = function(value, css) {
+	return tagOpen("td", css).concat(value, tagClose("td"));
+}
+
+const tableTr = function(...elements) {
+	return tagOpen("tr").concat(elements.join(""), tagClose("tr"));
+}
+
