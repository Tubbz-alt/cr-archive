diff a/application/org.openjdk.jmc.flightrecorder.flameview/META-INF/MANIFEST.MF b/application/org.openjdk.jmc.flightrecorder.flameview/META-INF/MANIFEST.MF
--- a/application/org.openjdk.jmc.flightrecorder.flameview/META-INF/MANIFEST.MF
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/META-INF/MANIFEST.MF
@@ -2,9 +2,12 @@
 Bundle-ManifestVersion: 2
 Bundle-Localization: plugin
 Bundle-Name: FlameView
 Bundle-SymbolicName: org.openjdk.jmc.flightrecorder.flameview;singleton:=true
 Bundle-Version: 8.0.0.qualifier
-Require-Bundle: org.openjdk.jmc.flightrecorder, org.openjdk.jmc.flightrecorder.ui
+Require-Bundle: org.openjdk.jmc.flightrecorder,
+ org.openjdk.jmc.flightrecorder.ui,
+ org.openjdk.jmc.flightrecorder.rules,
+ org.openjdk.jmc.common
 Bundle-RequiredExecutionEnvironment: JavaSE-1.8
 Bundle-Vendor: Oracle Corporation
 Automatic-Module-Name: org.openjdk.jmc.flightrecorder.ext.flameview
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/Messages.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/Messages.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/Messages.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/Messages.java
@@ -46,10 +46,26 @@
 	public static final String FLAMEVIEW_SAVE_AS = "FLAMEVIEW_SAVE_AS"; //$NON-NLS-1$
 	public static final String FLAMEVIEW_PRINT = "FLAMEVIEW_PRINT"; //$NON-NLS-1$
 	public static final String FLAMEVIEW_SAVE_FLAME_GRAPH_AS = "FLAMEVIEW_SAVE_FLAME_GRAPH_AS"; //$NON-NLS-1$
 	public static final String FLAMEVIEW_JPEG_IMAGE = "FLAMEVIEW_JPEG_IMAGE"; //$NON-NLS-1$
 	public static final String FLAMEVIEW_PNG_IMAGE = "FLAMEVIEW_PNG_IMAGE"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE = "FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE"; //$NON-NLS-1$		
+	public static final String FLAMEVIEW_SELECT_ROOT_NODE_EVENT = "FLAMEVIEW_SELECT_ROOT_NODE_EVENT"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_ROOT_NODE_EVENTS = "FLAMEVIEW_SELECT_ROOT_NODE_EVENTS"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_ROOT_NODE_TYPE = "FLAMEVIEW_SELECT_ROOT_NODE_TYPE"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_ROOT_NODE_TYPES = "FLAMEVIEW_SELECT_ROOT_NODE_TYPES"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_ROOT_NODE = "FLAMEVIEW_SELECT_ROOT_NODE"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER = "FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN = "FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN = "FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN = "FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_HTML_MORE = "FLAMEVIEW_SELECT_HTML_MORE"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_HTML_TABLE_COUNT = "FLAMEVIEW_SELECT_HTML_TABLE_COUNT"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_HTML_TABLE_EVENT_TYPE = "FLAMEVIEW_SELECT_HTML_TABLE_EVENT_TYPE"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_HTML_TOOLTIP_PACKAGE = "FLAMEVIEW_SELECT_HTML_TOOLTIP_PACKAGE"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES = "FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES"; //$NON-NLS-1$
+	public static final String FLAMEVIEW_SELECT_HTML_TOOLTIP_DESCRIPTION = "FLAMEVIEW_SELECT_HTML_TOOLTIP_DESCRIPTION"; //$NON-NLS-1$
 
 	private Messages() {
 	}
 
 	public static String getString(String key) {
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/MessagesUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/MessagesUtils.java
--- /dev/null
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/MessagesUtils.java
@@ -0,0 +1,72 @@
+/*
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Datadog, Inc. All rights reserved.
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * The contents of this file are subject to the terms of either the Universal Permissive License
+ * v 1.0 as shown at http://oss.oracle.com/licenses/upl
+ *
+ * or the following license:
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are permitted
+ * provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ * and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ * conditions and the following disclaimer in the documentation and/or other materials provided with
+ * the distribution.
+ *
+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ * endorse or promote products derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package org.openjdk.jmc.flightrecorder.flameview;
+
+import java.text.MessageFormat;
+
+public final class MessagesUtils {
+
+	/**
+	 * Localized Stack Trace message
+	 * 
+	 * @param key
+	 *            stack trace message
+	 * @return message
+	 */
+	public static String getStacktraceMessage(String key) {
+		return org.openjdk.jmc.flightrecorder.stacktrace.Messages.getString(key);
+	}
+
+	/**
+	 * Localized Flameview Message
+	 * 
+	 * @param key
+	 *            flameview message
+	 * @param values
+	 *            message values
+	 * @return message
+	 */
+	public static String getFlameviewMessage(String key, Object ... values) {
+		if (values == null || values.length == 0) {
+			return getFlameviewMessage(key);
+		} else {
+			return MessageFormat.format(getFlameviewMessage(key), values);
+		}
+	}
+
+	private static String getFlameviewMessage(String key) {
+		return org.openjdk.jmc.flightrecorder.flameview.Messages.getString(key);
+	}
+
+}
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/tree/TraceTreeUtils.java
@@ -31,53 +31,125 @@
  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 package org.openjdk.jmc.flightrecorder.flameview.tree;
 
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_MORE;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_ROOT_NODE;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_ROOT_NODE_EVENT;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_ROOT_NODE_EVENTS;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_ROOT_NODE_TYPE;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_ROOT_NODE_TYPES;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN;
+import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getFlameviewMessage;
+import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getStacktraceMessage;
+import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicInteger;
+
 import org.openjdk.jmc.common.IMCFrame;
 import org.openjdk.jmc.common.IMCMethod;
+import org.openjdk.jmc.common.item.Aggregators;
+import org.openjdk.jmc.common.item.Aggregators.CountConsumer;
+import org.openjdk.jmc.common.item.GroupingAggregator;
+import org.openjdk.jmc.common.item.GroupingAggregator.GroupEntry;
+import org.openjdk.jmc.common.item.IAggregator;
 import org.openjdk.jmc.common.item.IItemCollection;
+import org.openjdk.jmc.common.item.IType;
+import org.openjdk.jmc.common.unit.IQuantity;
+import org.openjdk.jmc.common.unit.UnitLookup;
 import org.openjdk.jmc.common.util.FormatToolkit;
+import org.openjdk.jmc.flightrecorder.JfrAttributes;
+import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;
-import org.openjdk.jmc.flightrecorder.stacktrace.Messages;
+import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFrame;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Branch;
 import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Fork;
-import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
-import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFrame;
 
-public class TraceTreeUtils {
-	public final static String DEFAULT_ROOT_NAME = "__root";
-	public final static String DEFAULT_ROOT_PACKAGE_NAME = "";
+public final class TraceTreeUtils {
+
+	public final static String EMPTY_STRING = ""; //$NON-NLS-1$
+	public final static int DEFAULT_ROOT_TITLE_MAX_EVENTS = 2;
+	public final static int DEFAULT_ROOT_EVENT_MAX = 10;
+	public final static String SELECT_EVENT_DELIMITER = getFlameviewMessage(
+			FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER);
 	public final static FrameSeparator DEFAULT_FRAME_SEPARATOR = new FrameSeparator(FrameCategorization.METHOD, false);
 
 	/**
 	 * Traces a TraceTree from a {@link StacktraceModel}.
-	 *
+	 * 
+	 * @param root
+	 *            the root with description
 	 * @param model
-	 *            the model to trace the tree from.
-	 * @return the root.
+	 *            the model to trace the tree from
+	 * @return the root
 	 */
-	public static TraceNode createTree(StacktraceModel model, String rootName) {
+	public static TraceNode createTree(TraceNode root, StacktraceModel model) {
 		Fork rootFork = model.getRootFork();
-		TraceNode root = getRootTraceNode(rootName, rootFork);
 		for (Branch branch : rootFork.getBranches()) {
 			addBranch(root, branch);
 		}
 		return root;
 	}
 
 	/**
-	 * Traces a tree of stack frames from an {@link IItemCollection}.
-	 *
+	 * Root of Traces from the selection {@link IItemCollection}
+	 * 
 	 * @param items
-	 *            the events to aggregate the traces from.
-	 * @return the root of the resulting tree.
+	 *            the items from the selection
+	 * @param branchCount
+	 *            branch count from {@link StacktraceModel} model
+	 * @return root
+	 */
+	public static TraceNode createRootWithDescription(IItemCollection items, int branchCount) {
+
+		StringBuilder titleSb = new StringBuilder();
+		StringBuilder descSb = new StringBuilder();
+		AtomicInteger totalItemsSum = new AtomicInteger(0);
+
+		if (branchCount == 0) {
+			titleSb.append(getFlameviewMessage(FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE));
+		} else {
+			Map<String, Integer> orderedEventTypeNameWithCount = eventTypeNameWithCountSorted(items, totalItemsSum);
+			String selectionText = createSelectionText(totalItemsSum.get(), orderedEventTypeNameWithCount.size());
+			titleSb.append(selectionText);
+			createNodeTitleAndDescription(titleSb, descSb, orderedEventTypeNameWithCount);
+		}
+
+		return new TraceNode(titleSb.toString(), 0, descSb.toString());
+	}
+
+	/**
+	 * Print the tree by the trace node
+	 * 
+	 * @param node
+	 *            trace node
+	 * @return tree
 	 */
-	public static TraceNode createTree(
-		IItemCollection items, FrameSeparator frameSeparator, boolean threadRootAtTop, String rootName) {
-		return createTree(new StacktraceModel(threadRootAtTop, frameSeparator, items), rootName);
+	public static String printTree(TraceNode node) {
+		StringBuilder builder = new StringBuilder();
+		builder.append("=== Tree Printout ===");
+		builder.append(System.lineSeparator());
+		printTree(builder, 0, node);
+		return builder.toString();
+	}
+
+	private static String createSelectionText(int events, int types) {
+		String eventText = events > 1 ? getFlameviewMessage(FLAMEVIEW_SELECT_ROOT_NODE_EVENTS)
+				: getFlameviewMessage(FLAMEVIEW_SELECT_ROOT_NODE_EVENT);
+		String typeText = types > 1 ? getFlameviewMessage(FLAMEVIEW_SELECT_ROOT_NODE_TYPES)
+				: getFlameviewMessage(FLAMEVIEW_SELECT_ROOT_NODE_TYPE);
+		return getFlameviewMessage(FLAMEVIEW_SELECT_ROOT_NODE, String.valueOf(events), eventText, String.valueOf(types),
+				typeText);
 	}
 
 	private static void addBranch(TraceNode root, Branch branch) {
 		StacktraceFrame firstFrame = branch.getFirstFrame();
 		TraceNode currentNode = getTraceNodeByStacktraceFrame(firstFrame);
@@ -94,18 +166,10 @@
 		for (Branch branch : fork.getBranches()) {
 			addBranch(node, branch);
 		}
 	}
 
-	public static String printTree(TraceNode node) {
-		StringBuilder builder = new StringBuilder();
-		builder.append("=== Tree Printout ===");
-		builder.append(System.lineSeparator());
-		printTree(builder, 0, node);
-		return builder.toString();
-	}
-
 	private static void printTree(StringBuilder builder, int indentation, TraceNode node) {
 		builder.append(String.format("%s%s - %d%n", indent(indentation), node.getName(), node.getValue()));
 		for (TraceNode child : node.getChildren()) {
 			printTree(builder, indentation + 1, child);
 		}
@@ -117,23 +181,88 @@
 			builder.append("   ");
 		}
 		return builder.toString();
 	}
 
-	private static TraceNode getRootTraceNode(String rootName, Fork rootFork) {
-		return new TraceNode(rootName == null ? DEFAULT_ROOT_NAME : rootName, rootFork.getItemsInFork(),
-				DEFAULT_ROOT_PACKAGE_NAME);
+	private static Map<String, Integer> eventTypeNameWithCountSorted(
+		IItemCollection items, AtomicInteger totalEventTypeSum) {
+		final HashMap<String, Integer> map = new HashMap<>();
+		IAggregator<IQuantity, ?> build = GroupingAggregator.build(EMPTY_STRING, EMPTY_STRING, JfrAttributes.EVENT_TYPE,
+				Aggregators.count(), new GroupingAggregator.IGroupsFinisher<IQuantity, IType<?>, CountConsumer>() {
+
+					@Override
+					public IType<IQuantity> getValueType() {
+						return UnitLookup.NUMBER;
+					}
+
+					@Override
+					public IQuantity getValue(Iterable<? extends GroupEntry<IType<?>, CountConsumer>> groups) {
+						for (GroupEntry<IType<?>, CountConsumer> groupEntry : groups) {
+							CountConsumer consumer = groupEntry.getConsumer();
+							IType<?> key = groupEntry.getKey();
+							totalEventTypeSum.addAndGet(consumer.getCount());
+							map.put(key.getName(), consumer.getCount());
+						}
+						return null;
+					}
+				});
+		items.getAggregate(build);
+		return RulesToolkit.sortMap(map, false);
+	}
+
+	private static void createNodeTitleAndDescription(
+		StringBuilder titleSb, StringBuilder descSb, Map<String, Integer> orderedItemCountByType) {
+
+		int i = 0;
+		long restEventCount = 0;
+		boolean writeTitle = true;
+		int maxEventsInTile = orderedItemCountByType.size() > DEFAULT_ROOT_TITLE_MAX_EVENTS
+				? DEFAULT_ROOT_TITLE_MAX_EVENTS : orderedItemCountByType.size() - 1;
+
+		for (Map.Entry<String, Integer> e : orderedItemCountByType.entrySet()) {
+			if (writeTitle) {
+				String eventType = getFlameviewMessage(FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN, e.getKey(),
+						String.valueOf(e.getValue()));
+				titleSb.append(eventType);
+				if (i < maxEventsInTile) {
+					titleSb.append(SELECT_EVENT_DELIMITER);
+				} else {
+					writeTitle = false;
+				}
+			}
+			if (i < DEFAULT_ROOT_EVENT_MAX) {
+				String tableEvent = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN,
+						String.valueOf(e.getValue()), e.getKey());
+				descSb.append(tableEvent);
+			} else {
+				restEventCount = Long.sum(restEventCount, e.getValue());
+			}
+			i++;
+		}
+
+		if (restEventCount > 0) {
+			String restEventCountText = String.valueOf(restEventCount);
+			String restItemCountText = String.valueOf(orderedItemCountByType.size() - DEFAULT_ROOT_EVENT_MAX);
+			String tableEventRest = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN,
+					restEventCountText, restItemCountText);
+			descSb.append(tableEventRest);
+		}
+
+		if (maxEventsInTile < orderedItemCountByType.size() - 1) {
+			titleSb.append(getFlameviewMessage(FLAMEVIEW_SELECT_HTML_MORE)); // $NON-NLS-1$
+		}
 	}
 
 	private static TraceNode getTraceNodeByStacktraceFrame(StacktraceFrame sFrame) {
 		IMCFrame frame = sFrame.getFrame();
 		IMCMethod method = frame.getMethod();
 		String packageName = FormatToolkit.getPackage(method.getType().getPackage());
 		if (frame == StacktraceModel.UNKNOWN_FRAME) {
-			return new TraceNode(Messages.getString(Messages.STACKTRACE_UNCLASSIFIABLE_FRAME), sFrame.getItemCount(),
+			return new TraceNode(getStacktraceMessage(STACKTRACE_UNCLASSIFIABLE_FRAME), sFrame.getItemCount(),
 					packageName);
 		} else {
 			String name = FormatToolkit.getHumanReadable(method, false, false, true, false, true, false);
 			return new TraceNode(name, sFrame.getItemCount(), packageName);
 		}
 	}
+
 }
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/java/org/openjdk/jmc/flightrecorder/flameview/views/FlameGraphView.java
@@ -40,10 +40,17 @@
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_JPEG_IMAGE;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_PNG_IMAGE;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_PRINT;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SAVE_AS;
 import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SAVE_FLAME_GRAPH_AS;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TABLE_COUNT;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TABLE_EVENT_TYPE;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TOOLTIP_PACKAGE;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES;
+import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TOOLTIP_DESCRIPTION;
+import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getFlameviewMessage;
+import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getStacktraceMessage;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -92,10 +99,11 @@
 import org.openjdk.jmc.common.util.StringToolkit;
 import org.openjdk.jmc.flightrecorder.flameview.FlameviewImages;
 import org.openjdk.jmc.flightrecorder.flameview.tree.TraceNode;
 import org.openjdk.jmc.flightrecorder.flameview.tree.TraceTreeUtils;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;
+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel;
 import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;
 import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;
 import org.openjdk.jmc.flightrecorder.ui.common.ImageConstants;
 import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;
 import org.openjdk.jmc.ui.CoreImages;
@@ -106,10 +114,15 @@
 public class FlameGraphView extends ViewPart implements ISelectionListener {
 	private static final String DIR_ICONS = "icons/"; //$NON-NLS-1$
 	private static final String PLUGIN_ID = "org.openjdk.jmc.flightrecorder.flameview"; //$NON-NLS-1$
 	private static final String UNCLASSIFIABLE_FRAME = getStacktraceMessage(STACKTRACE_UNCLASSIFIABLE_FRAME);
 	private static final String UNCLASSIFIABLE_FRAME_DESC = getStacktraceMessage(STACKTRACE_UNCLASSIFIABLE_FRAME_DESC);
+	private static final String TABLE_COLUMN_COUNT = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TABLE_COUNT);
+	private static final String TABLE_COLUMN_EVENT_TYPE = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TABLE_EVENT_TYPE);
+	private static final String TOOLTIP_PACKAGE = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TOOLTIP_PACKAGE);
+	private static final String TOOLTIP_SAMPLES = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES);
+	private static final String TOOLTIP_DESCRIPTION = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TOOLTIP_DESCRIPTION);
 	private static final String HTML_PAGE;
 	static {
 		// from: https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.css
 		String cssD3Flamegraph = "jslibs/d3-flamegraph.css";
 		// from: https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js
@@ -120,18 +133,18 @@
 		String jsD3V4 = "jslibs/d3.v4.min.js";
 		// from: https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.9.1/d3-tip.min.js
 		String jsD3Tip = "jslibs/d3-tip.min.js";
 		// from: https://cdn.jsdelivr.net/gh/spiermar/d3-flame-graph@2.0.3/dist/d3-flamegraph.min.js
 		String jsD3FlameGraph = "jslibs/d3-flamegraph.min.js";
-		// jmc flameview coloring functions
-		String jsFlameviewColoringName = "flameviewColoring.js";
+		// jmc flameview coloring, tooltip and other  functions
+		String jsFlameviewName = "flameview.js";
 		String cssFlameview = "flameview.css";
 
 		String jsIeLibraries = loadLibraries(jsHtml5shiv, jsRespond);
 		String jsD3Libraries = loadLibraries(jsD3V4, jsD3Tip, jsD3FlameGraph);
 		String styleheets = loadLibraries(cssD3Flamegraph, cssFlameview);
-		String jsFlameviewColoring = fileContent(jsFlameviewColoringName);
+		String jsFlameviewColoring = fileContent(jsFlameviewName);
 
 		String magnifierIcon = getIconBase64(ImageConstants.ICON_MAGNIFIER);
 
 		// formatter arguments for the template: %1 - CSSs stylesheets, %2 - IE9 specific scripts,
 		// %3 - Search Icon Base64, %4 - 3rd party scripts, %5 - Flameview Coloring,
@@ -154,13 +167,13 @@
 	private ExportAction[] exportActions;
 
 	private enum GroupActionType {
 		THREAD_ROOT(Messages.STACKTRACE_VIEW_THREAD_ROOT, IAction.AS_RADIO_BUTTON, CoreImages.THREAD),
 		LAST_FRAME(Messages.STACKTRACE_VIEW_LAST_FRAME, IAction.AS_RADIO_BUTTON, CoreImages.METHOD_NON_OPTIMIZED),
-		ICICLE_GRAPH(flameviewMessage(FLAMEVIEW_ICICLE_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(
+		ICICLE_GRAPH(getFlameviewMessage(FLAMEVIEW_ICICLE_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(
 				FlameviewImages.ICON_ICICLE_FLIP)),
-		FLAME_GRAPH(flameviewMessage(FLAMEVIEW_FLAME_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(
+		FLAME_GRAPH(getFlameviewMessage(FLAMEVIEW_FLAME_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(
 				FlameviewImages.ICON_FLAME_FLIP));
 
 		private final String message;
 		private final int action;
 		private final ImageDescriptor imageDescriptor;
@@ -211,14 +224,14 @@
 			browser.execute(String.format("icicleView(%s);", icicleViewActive));
 		}
 	}
 
 	private enum ExportActionType {
-		SAVE_AS(flameviewMessage(FLAMEVIEW_SAVE_AS), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench().getSharedImages()
-				.getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT), PlatformUI.getWorkbench().getSharedImages()
-						.getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT_DISABLED)),
-		PRINT(flameviewMessage(FLAMEVIEW_PRINT), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench().getSharedImages()
+		SAVE_AS(getFlameviewMessage(FLAMEVIEW_SAVE_AS), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench()
+				.getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT), PlatformUI.getWorkbench()
+						.getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT_DISABLED)),
+		PRINT(getFlameviewMessage(FLAMEVIEW_PRINT), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench().getSharedImages()
 				.getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT), PlatformUI.getWorkbench().getSharedImages()
 						.getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT_DISABLED));
 
 		private final String message;
 		private final int action;
@@ -340,11 +353,13 @@
 	}
 
 	private CompletableFuture<TraceNode> getModelPreparer(
 		final IItemCollection items, final FrameSeparator separator, final boolean materializeSelectedBranches) {
 		return CompletableFuture.supplyAsync(() -> {
-			return TraceTreeUtils.createTree(items, separator, threadRootAtTop, "-- <Root> --");
+			StacktraceModel model = new StacktraceModel(threadRootAtTop, frameSeparator, items);
+			TraceNode root = TraceTreeUtils.createRootWithDescription(items, model.getRootFork().getBranchCount());
+			return TraceTreeUtils.createTree(root, model);
 		}, MODEL_EXECUTOR);
 	}
 
 	private void setModel(TraceNode root) {
 		if (!browser.isDisposed() && !root.equals(currentRoot)) {
@@ -362,10 +377,13 @@
 
 		browser.addProgressListener(new ProgressAdapter() {
 			@Override
 			public void completed(ProgressEvent event) {
 				browser.removeProgressListener(this);
+				browser.execute(String.format("configureTooltipText('%s', '%s', '%s', '%s', '%s');", TABLE_COLUMN_COUNT,
+						TABLE_COLUMN_EVENT_TYPE, TOOLTIP_PACKAGE, TOOLTIP_SAMPLES, TOOLTIP_DESCRIPTION));
+
 				browser.execute(String.format("processGraph(%s, %s);", toJSon(root), icicleViewActive));
 				Stream.of(exportActions).forEach((action) -> action.setEnabled(true));
 			}
 		});
 	}
@@ -374,13 +392,13 @@
 		CompletableFuture<String> future = new CompletableFuture<>();
 		String[] destination = new String[2];
 
 		DisplayToolkit.inDisplayThread().execute(() -> {
 			FileDialog fd = new FileDialog(browser.getShell(), SWT.SAVE);
-			fd.setText(flameviewMessage(FLAMEVIEW_SAVE_FLAME_GRAPH_AS));
+			fd.setText(getFlameviewMessage(FLAMEVIEW_SAVE_FLAME_GRAPH_AS));
 			fd.setFilterNames(
-					new String[] {flameviewMessage(FLAMEVIEW_JPEG_IMAGE), flameviewMessage(FLAMEVIEW_PNG_IMAGE)});
+					new String[] {getFlameviewMessage(FLAMEVIEW_JPEG_IMAGE), getFlameviewMessage(FLAMEVIEW_PNG_IMAGE)});
 			fd.setFilterExtensions(new String[] {"*.jpg", "*.png"}); //$NON-NLS-1$ //$NON-NLS-2$
 			fd.setFileName("flame_graph"); //$NON-NLS-1$
 			fd.setOverwrite(true);
 			if (fd.open() == null) {
 				future.cancel(true);
@@ -446,25 +464,37 @@
 		return render(root);
 	}
 
 	private static String render(TraceNode root) {
 		StringBuilder builder = new StringBuilder();
-		render(builder, root);
+		String rootNodeStart = createJsonRootTraceNode(root);
+		builder.append(rootNodeStart);
+		renderChildren(builder, root);
+		builder.append("]}");
 		return builder.toString();
 	}
 
 	private static void render(StringBuilder builder, TraceNode node) {
 		String start = UNCLASSIFIABLE_FRAME.equals(node.getName()) ? createJsonDescTraceNode(node)
 				: createJsonTraceNode(node);
 		builder.append(start);
+		renderChildren(builder, node);
+		builder.append("]}");
+	}
+
+	private static void renderChildren(StringBuilder builder, TraceNode node) {
 		for (int i = 0; i < node.getChildren().size(); i++) {
 			render(builder, node.getChildren().get(i));
 			if (i < node.getChildren().size() - 1) {
 				builder.append(",");
 			}
 		}
-		builder.append("]}");
+	}
+
+	private static String createJsonRootTraceNode(TraceNode rootNode) {
+		return String.format("{%s,%s,%s, \"c\": [ ", toJSonKeyValue("n", rootNode.getName()), toJSonKeyValue("p", ""),
+				toJSonKeyValue("d", rootNode.getPackageName()));
 	}
 
 	private static String createJsonTraceNode(TraceNode node) {
 		return String.format("{%s,%s,%s, \"c\": [ ", toJSonKeyValue("n", node.getName()),
 				toJSonKeyValue("p", node.getPackageName()), toJSonKeyValue("v", String.valueOf(node.getValue())));
@@ -496,18 +526,10 @@
 					MessageFormat.format("Could not load script \"{0}\",\"{1}\"", fileName, e.getMessage())); //$NON-NLS-1$
 			return "";
 		}
 	}
 
-	private static String getStacktraceMessage(String key) {
-		return org.openjdk.jmc.flightrecorder.stacktrace.Messages.getString(key);
-	}
-
-	private static String flameviewMessage(String key) {
-		return org.openjdk.jmc.flightrecorder.flameview.Messages.getString(key);
-	}
-
 	private static ImageDescriptor flameviewImageDescriptor(String iconName) {
 		return AbstractUIPlugin.imageDescriptorFromPlugin(PLUGIN_ID, DIR_ICONS + iconName); //$NON-NLS-1$
 	}
 
 	private static String getIconBase64(String iconName) {
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.css
@@ -2,13 +2,38 @@
 	font-family: Helvetica, Arial, Verdana, sans-serif;
 	font-size: 12px;
 	margin-right: 2px;	
 }
 
-svg {
+svg, table {
 	width: 100%;
 }
 
-#icicleIcon {
-	cursor: pointer;
-			
+table {
+	margin-top: 4px;	
+}
+
+table, th, td {
+	border-collapse: collapse;
+	border: 1px solid grey;
+}
+
+
+th, td {
+	text-align: left;
+	padding-left: 4px;
+	padding-right: 4px;
+	padding-top: 2px;
+	padding-bottom: 2px;
+}
+
+.tdLabel {
+	width: 60px;
+	color: white;
+	text-align: left;	
+}
+
+.tdCount {
+	width: 60px;
+	color: white;
+	text-align: right;	
 }
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.js b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.js
--- /dev/null
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameview.js
@@ -0,0 +1,220 @@
+/*
+ Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ Copyright (c) 2020, Datadog, Inc. All rights reserved.
+
+ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+
+ The contents of this file are subject to the terms of either the Universal Permissive License
+ v 1.0 as shown at http://oss.oracle.com/licenses/upl
+
+ or the following license:
+
+ Redistribution and use in source and binary forms, with or without modification, are permitted
+ provided that the following conditions are met:
+
+ 1. Redistributions of source code must retain the above copyright notice, this list of conditions
+ and the following disclaimer.
+
+ 2. Redistributions in binary form must reproduce the above copyright notice, this list of
+ conditions and the following disclaimer in the documentation and/or other materials provided with
+ the distribution.
+
+ 3. Neither the name of the copyright holder nor the names of its contributors may be used to
+ endorse or promote products derived from this software without specific prior written permission.
+
+ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
+ IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
+ WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+String.prototype.hashCode = function() {
+	var hash = 0;
+	if (this.length === 0) return hash;
+	for (var i = 0; i < this.length; i++) {
+		var char = this.charCodeAt(i);
+		hash = ((hash << 5) - hash) + char;
+		hash = hash & hash;
+	}
+	return hash;
+};
+
+const htmlTagBr = "\u003Cbr\u002F\u003E";
+const rootPackageColor = "darkred";
+const invalidPackageColor = "snow";
+const packageJavaColorLightGray = "lightgray";
+const packageComSunAndJdkColorDarkGray = "darkgray";
+const packageSunDarkColorGray = "gray";
+const packageRestValueHMax = 360;
+const packageRestValueH = 0;
+const packageRestSLValues = [42, 53];
+const packageConsideredDepth = 3;
+const packageMarkerJava = "java";
+const packageMarkerSun = "sun";
+const packageMarkerComSunAndJdk = "comSunAndJdk";
+const packageMarkerRest = "rest";
+const packagesIdentifierMap = new Map().set("java.", packageMarkerJava).set("sun.", packageMarkerSun).set("com.sun.", 
+		packageMarkerComSunAndJdk).set("jdk.", packageMarkerComSunAndJdk);
+const packageColorMap = new Map().set("", rootPackageColor);
+const specialCharactersMap = new Map().set('#', '\x23').set('$', '\x24').set('(', '\x28').set(')', '\x29')
+		.set(',', '\x2c').set('-', '\x2d').set('.', '\x2e').set('<', '\x3c').set('>', '\x3e').set('[', '\x5b')
+		.set(']', '\x5d').set('_', '\x5f').set('{', '\x7b').set('|', '\x7c').set('}', '\x7d').set('~', '\x7e');
+
+const colorByPackage = function(p) {
+	if (p === undefined) {
+		return invalidPackageColor;
+	} else {
+		const packageNameStrip = stripPackageName(p);
+		const packageSelectedColor = packageColorMap.get(packageNameStrip);
+		if (packageSelectedColor === undefined) {
+			const packageMarkerSelected = getPackageMarker(packageNameStrip);
+			const packageNameStripHash = packageNameStrip.hashCode();
+			switch (packageMarkerSelected) {
+			case packageMarkerJava:
+				packageColorMap.set(packageNameStrip, packageJavaColorLightGray);
+				break;
+			case packageMarkerComSunAndJdk:
+				packageColorMap.set(packageNameStrip, packageComSunAndJdkColorDarkGray);
+				break;
+			case packageMarkerSun:
+				packageColorMap.set(packageNameStrip, packageSunDarkColorGray);
+				break;
+			case packageMarkerRest:
+				const packageRestSelectedColor = createHslColorString(adjustHslPropertyByHash(packageNameStripHash, packageRestValueH, packageRestValueHMax), packageRestSLValues[0], packageRestSLValues[1]);
+				packageColorMap.set(packageNameStrip, packageRestSelectedColor);
+				break;
+			}
+			return packageColorMap.get(packageNameStrip);
+		} else {
+			return packageSelectedColor;
+		}
+	}
+};
+
+const getPackageMarker = function(p) {
+	for(let k of packagesIdentifierMap.keys()){
+		if(p.startsWith(k)){
+			return packagesIdentifierMap.get(k);
+		}
+	}
+	return packageMarkerRest;
+};
+
+const stripPackageName = function(p) {
+	const splitString = p.split("\u002E");
+	const number = Math.min(splitString.length, packageConsideredDepth);
+	return splitString.slice(0, number).join("\u002E");
+};
+
+const adjustHslPropertyByHash = function (hash, min, max) {
+	const proposedValue = hash % (max - min) + min;
+	return Math.min(proposedValue, max);
+};
+
+const createHslColorString = function(h,s,l) {
+	return "hsl\u0028" + h + "\u002c " + s + "\u0025\u002c " + l + "\u0025\u0029";
+};
+
+const colorCell = function(d) {
+	if (textToSearch !== "" && (evaluateSearchElement(d.data.p) || evaluateSearchElement(d.data.n))) {
+		return "magenta";
+	} else {
+		return colorByPackage(d.data.p);
+	}
+};
+
+const evaluateSearchElement = function(text) {
+	var adjustTextToSearch = removeSpecialCharacters(textToSearch);
+	return text !== undefined && removeSpecialCharacters(text).includes(adjustTextToSearch);
+};
+
+const removeSpecialCharacters = function(text) {
+	return Array.prototype.map.call(text.trim().toLowerCase(), element => {
+		if (specialCharactersMap.has(element)) {
+			return specialCharactersMap.get(element);
+		} else {
+			return element;
+		}}).join('');
+};
+
+
+const adjustTip = function(d) {
+	var tipMessage = "".concat(d.data.n, htmlTagBr);
+	
+	if (nodeContainsChildren(d.data)) {
+		if (d.data.v === undefined) {
+			tipMessage += createRootTable(d.data.d);
+		} else {
+			tipMessage += createNodeTipTable(d.data);
+		}
+	}
+	
+	return tipMessage;
+}
+
+const nodeContainsChildren = function(data) {
+	return Array.isArray(data.c) && data.c.length;
+}
+
+const createNodeTipTable = function(data) {
+	var table = "".concat(tagOpen("table class='d3-flame-graph-tip'"), tagOpen("tbody"))
+	if (data.d === undefined) {
+		table = table.concat(addTableRow(tootlipPackage, data.p, "tdLabel"), 
+				addTableRow(tootlipSamples, data.v, "tdLabel"));
+	} else {
+		table += addTableRow(tootlipDescription, data.d, "tdCount");
+	}
+	return table.concat(tagClose("tbody"), tagClose("table"));
+}
+
+const createRootTable = function(input) {
+	var table = "";
+	var tableRows = input.split("|");
+	table = table.concat(tagOpen("table class='d3-flame-graph-tip'"), createTableHeader(), tagOpen("tbody"));
+	var prevCount = 0;
+	for(var i=0; i < tableRows.length - 1; i++) {
+		const rowValue = tableRows[i].split(":");
+		table += addTableRow(parseInt(rowValue[0]), rowValue[1], "tdCount");
+	}
+	table = table.concat(tagClose("tbody"), tagClose("table"));
+	return table;
+}
+
+const tagOpen = function(tag, cssClass) {
+	var result = "\u003C" + tag;
+	if (cssClass === undefined) {
+		result +="\u003E";
+	} else {
+		var cssExtended = " class='" + cssClass + "' \u003E";
+		result += cssExtended;
+	}
+	return result;
+}
+const tagClose = function(tag) {
+	return "\u003C\u002F "+ tag + "\u003E";
+}
+
+const addTableRow = function(eventCount, eventName, cssStartTd) {
+	return tableTr(tableTd(eventCount, cssStartTd), tableTd(eventName));
+}
+
+const createTableHeader = function() { 
+	return tagOpen("thead").concat(tableTr(tableTh(tooltipTableThCount, "tdLabel"), tableTh(tooltipTableThEventType)),tagClose("thead"));
+}
+
+const tableTh = function(value, css) {
+	return tagOpen("th", css).concat(value, tagClose("th"));
+}
+
+const tableTd = function(value, css) {
+	return tagOpen("td", css).concat(value, tagClose("td"));
+}
+
+const tableTr = function(...elements) {
+	return tagOpen("tr").concat(elements.join(""), tagClose("tr"));
+}
+
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/js/flameviewColoring.js
+++ /dev/null
@@ -1,153 +0,0 @@
-/*
- Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- Copyright (c) 2020, Datadog, Inc. All rights reserved.
-
- DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
-
- The contents of this file are subject to the terms of either the Universal Permissive License
- v 1.0 as shown at http://oss.oracle.com/licenses/upl
-
- or the following license:
-
- Redistribution and use in source and binary forms, with or without modification, are permitted
- provided that the following conditions are met:
-
- 1. Redistributions of source code must retain the above copyright notice, this list of conditions
- and the following disclaimer.
-
- 2. Redistributions in binary form must reproduce the above copyright notice, this list of
- conditions and the following disclaimer in the documentation and/or other materials provided with
- the distribution.
-
- 3. Neither the name of the copyright holder nor the names of its contributors may be used to
- endorse or promote products derived from this software without specific prior written permission.
-
- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
- IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
- WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
- WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-String.prototype.hashCode = function() {
-	var hash = 0;
-	if (this.length === 0) return hash;
-	for (var i = 0; i < this.length; i++) {
-		var char = this.charCodeAt(i);
-		hash = ((hash << 5) - hash) + char;
-		hash = hash & hash;
-	}
-	return hash;
-};
-
-const htmlTagBr = "\u003Cbr\u002F\u003E";
-const rootPackageColor = "darkred";
-const invalidPackageColor = "snow";
-const packageJavaColorLightGray = "lightgray";
-const packageComSunAndJdkColorDarkGray = "darkgray";
-const packageSunDarkColorGray = "gray";
-const packageRestValueHMax = 360;
-const packageRestValueH = 0;
-const packageRestSLValues = [42, 53];
-const packageConsideredDepth = 3;
-const packageMarkerJava = "java";
-const packageMarkerSun = "sun";
-const packageMarkerComSunAndJdk = "comSunAndJdk";
-const packageMarkerRest = "rest";
-const packagesIdentifierMap = new Map().set("java.", packageMarkerJava).set("sun.", packageMarkerSun).set("com.sun.", 
-		packageMarkerComSunAndJdk).set("jdk.", packageMarkerComSunAndJdk);
-const packageColorMap = new Map().set("", rootPackageColor);
-const specialCharactersMap = new Map().set('#', '\x23').set('$', '\x24').set('(', '\x28').set(')', '\x29')
-		.set(',', '\x2c').set('-', '\x2d').set('.', '\x2e').set('<', '\x3c').set('>', '\x3e').set('[', '\x5b')
-		.set(']', '\x5d').set('_', '\x5f').set('{', '\x7b').set('|', '\x7c').set('}', '\x7d').set('~', '\x7e');
-
-const colorByPackage = function(p) {
-	if (p === undefined) {
-		return invalidPackageColor;
-	} else {
-		const packageNameStrip = stripPackageName(p);
-		const packageSelectedColor = packageColorMap.get(packageNameStrip);
-		if (packageSelectedColor === undefined) {
-			const packageMarkerSelected = getPackageMarker(packageNameStrip);
-			const packageNameStripHash = packageNameStrip.hashCode();
-			switch (packageMarkerSelected) {
-			case packageMarkerJava:
-				packageColorMap.set(packageNameStrip, packageJavaColorLightGray);
-				break;
-			case packageMarkerComSunAndJdk:
-				packageColorMap.set(packageNameStrip, packageComSunAndJdkColorDarkGray);
-				break;
-			case packageMarkerSun:
-				packageColorMap.set(packageNameStrip, packageSunDarkColorGray);
-				break;
-			case packageMarkerRest:
-				const packageRestSelectedColor = createHslColorString(adjustHslPropertyByHash(packageNameStripHash, packageRestValueH, packageRestValueHMax), packageRestSLValues[0], packageRestSLValues[1]);
-				packageColorMap.set(packageNameStrip, packageRestSelectedColor);
-				break;
-			}
-			return packageColorMap.get(packageNameStrip);
-		} else {
-			return packageSelectedColor;
-		}
-	}
-};
-
-const getPackageMarker = function(p) {
-	for(let k of packagesIdentifierMap.keys()){
-		if(p.startsWith(k)){
-			return packagesIdentifierMap.get(k);
-		}
-	}
-	return packageMarkerRest;
-};
-
-const stripPackageName = function(p) {
-	const splitString = p.split("\u002E");
-	const number = Math.min(splitString.length, packageConsideredDepth);
-	return splitString.slice(0, number).join("\u002E");
-};
-
-const adjustHslPropertyByHash = function (hash, min, max) {
-	const proposedValue = hash % (max - min) + min;
-	return Math.min(proposedValue, max);
-};
-
-const createHslColorString = function(h,s,l){
-	return "hsl\u0028" + h + "\u002c " + s + "\u0025\u002c " + l + "\u0025\u0029";
-};
-
-const colorCell = function(d) {
-	if (textToSearch !== "" && (evaluateSearchElement(d.data.p) || evaluateSearchElement(d.data.n))) {
-		return "magenta";
-	} else {
-		return colorByPackage(d.data.p);
-	}
-};
-
-const evaluateSearchElement = function(text) {
-	var adjustTextToSearch = removeSpecialCharacters(textToSearch);
-	return text !== undefined && removeSpecialCharacters(text).includes(adjustTextToSearch);
-};
-
-const removeSpecialCharacters = function(text) {
-	return Array.prototype.map.call(text.trim().toLowerCase(), element => {
-		if (specialCharactersMap.has(element)) {
-			return specialCharactersMap.get(element);
-		} else {
-			return element;
-		}}).join('');
-};
-
-const adjustTip = function(d) {
-	var tipMessage = d.data.n + htmlTagBr;
-	if (d.data.d === undefined) {
-		tipMessage +=  "package: " + d.data.p + htmlTagBr;
-	} else {
-		tipMessage += "description: " + d.data.d + htmlTagBr;
-	}
-	tipMessage += "samples: " + d.data.v;
-	return tipMessage;
-};
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages.properties b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages.properties
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages.properties
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages.properties
@@ -35,6 +35,22 @@
 FLAMEVIEW_ICICLE_GRAPH=Icicle Graph
 FLAMEVIEW_SAVE_AS=Save as...
 FLAMEVIEW_PRINT=Print
 FLAMEVIEW_SAVE_FLAME_GRAPH_AS=Save flame graph as...
 FLAMEVIEW_JPEG_IMAGE=JPEG image
-FLAMEVIEW_PNG_IMAGE=PNG image
+FLAMEVIEW_PNG_IMAGE=PNG image
+FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE=Stack Trace not available
+FLAMEVIEW_SELECT_ROOT_NODE_EVENT=event
+FLAMEVIEW_SELECT_ROOT_NODE_EVENTS=events
+FLAMEVIEW_SELECT_ROOT_NODE_TYPE=type
+FLAMEVIEW_SELECT_ROOT_NODE_TYPES=types
+FLAMEVIEW_SELECT_ROOT_NODE=Selection: {0} {1} of {2} {3}:\u0020
+FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER=,\u0020
+FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN={0}[{1}]
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN={0}:{1}|
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN={0}:Others... ({1} types)|
+FLAMEVIEW_SELECT_HTML_MORE=...
+FLAMEVIEW_SELECT_HTML_TABLE_COUNT=Count
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_TYPE=Event Type
+FLAMEVIEW_SELECT_HTML_TOOLTIP_PACKAGE=Package
+FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES=Samples
+FLAMEVIEW_SELECT_HTML_TOOLTIP_DESCRIPTION=Description
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_ja.properties b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_ja.properties
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_ja.properties
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_ja.properties
@@ -35,6 +35,22 @@
 FLAMEVIEW_ICICLE_GRAPH=Icicle Graph
 FLAMEVIEW_SAVE_AS=Save as...
 FLAMEVIEW_PRINT=Print
 FLAMEVIEW_SAVE_FLAME_GRAPH_AS=Save flame graph as...
 FLAMEVIEW_JPEG_IMAGE=JPEG image
-FLAMEVIEW_PNG_IMAGE=PNG image
+FLAMEVIEW_PNG_IMAGE=PNG image
+FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE=Stack Trace not available
+FLAMEVIEW_SELECT_ROOT_NODE_EVENT=event
+FLAMEVIEW_SELECT_ROOT_NODE_EVENTS=events
+FLAMEVIEW_SELECT_ROOT_NODE_TYPE=type
+FLAMEVIEW_SELECT_ROOT_NODE_TYPES=types
+FLAMEVIEW_SELECT_ROOT_NODE=Selection: {0} {1} of {2} {3}:\u0020
+FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER=,\u0020
+FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN={0}[{1}]
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN={0}:{1}|
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN={0}:Others... ({1} types)|
+FLAMEVIEW_SELECT_HTML_MORE=...
+FLAMEVIEW_SELECT_HTML_TABLE_COUNT=Count
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_TYPE=Event Type
+FLAMEVIEW_SELECT_HTML_TOOLTIP_PACKAGE=Package
+FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES=Samples
+FLAMEVIEW_SELECT_HTML_TOOLTIP_DESCRIPTION=Description
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_zh_CN.properties b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_zh_CN.properties
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_zh_CN.properties
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/org/openjdk/jmc/flightrecorder/flameview/messages_zh_CN.properties
@@ -36,5 +36,21 @@
 FLAMEVIEW_SAVE_AS=Save as...
 FLAMEVIEW_PRINT=Print
 FLAMEVIEW_SAVE_FLAME_GRAPH_AS=Save flame graph as...
 FLAMEVIEW_JPEG_IMAGE=JPEG image
 FLAMEVIEW_PNG_IMAGE=PNG image
+FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE=Stack Trace not available
+FLAMEVIEW_SELECT_ROOT_NODE_EVENT=event
+FLAMEVIEW_SELECT_ROOT_NODE_EVENTS=events
+FLAMEVIEW_SELECT_ROOT_NODE_TYPE=type
+FLAMEVIEW_SELECT_ROOT_NODE_TYPES=types
+FLAMEVIEW_SELECT_ROOT_NODE=Selection: {0} {1} of {2} {3}:\u0020
+FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER=,\u0020
+FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN={0}[{1}]
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN={0}:{1}|
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN={0}:Others... ({1} types)|
+FLAMEVIEW_SELECT_HTML_MORE=...
+FLAMEVIEW_SELECT_HTML_TABLE_COUNT=Count
+FLAMEVIEW_SELECT_HTML_TABLE_EVENT_TYPE=Event Type
+FLAMEVIEW_SELECT_HTML_TOOLTIP_PACKAGE=Package
+FLAMEVIEW_SELECT_HTML_TOOLTIP_SAMPLES=Samples
+FLAMEVIEW_SELECT_HTML_TOOLTIP_DESCRIPTION=Description
diff a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template
--- a/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template
+++ b/application/org.openjdk.jmc.flightrecorder.flameview/src/main/resources/page.template
@@ -28,10 +28,15 @@
 	<script type="text/javascript">%4$s</script>
 	<script type="text/javascript">%5$s</script>
 	<script type="text/javascript">
 		
 		const minSearchTextSize = 3;
+		var tooltipTableThCount;
+		var tooltipTableThEventType;
+		var tootlipPackage;
+		var tootlipDescription;
+		var tootlipSamples;
 		var textToSearch = "";
 		var flameGraph;
 		var currentJson;
 		
 		const packageInputField = document.getElementById("searchInput");
@@ -44,10 +49,18 @@
 					executeSearch();
 				}
 			}
 		);
 		
+		function configureTooltipText(ct, et, pt, st, dt) {
+			tooltipTableThCount = ct;
+			tooltipTableThEventType = et;
+			tootlipPackage = pt;
+			tootlipSamples = st;
+			tootlipDescription = dt;
+		};
+		
 		const tip = d3.tip()
         	.direction("s")
         	.offset([8, 0])
         	.attr('class', 'd3-flame-graph-tip')
         	.html(adjustTip);
