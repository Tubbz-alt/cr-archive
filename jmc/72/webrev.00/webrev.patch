diff a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/item/ItemFilters.java b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/item/ItemFilters.java
--- a/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/item/ItemFilters.java
+++ b/core/org.openjdk.jmc.common/src/main/java/org/openjdk/jmc/common/item/ItemFilters.java
@@ -429,10 +429,13 @@
 			super(Kind.MATCHES, attribute, regexp);
 		}
 
 		@Override
 		protected IPredicate<IItem> getPredicate(IMemberAccessor<? extends String, IItem> accessor, String regexp) {
+			if (regexp.isEmpty()) {
+				return PredicateToolkit.truePredicate();
+			}
 			return PredicateToolkit.matches(accessor, regexp);
 		}
 	}
 
 	public static class NotMatches extends AttributeValue<String> {
@@ -440,10 +443,13 @@
 			super(Kind.NOT_MATCHES, attribute, regexp);
 		}
 
 		@Override
 		protected IPredicate<IItem> getPredicate(IMemberAccessor<? extends String, IItem> accessor, String regexp) {
+			if (regexp.isEmpty()) {
+				return PredicateToolkit.truePredicate();
+			}
 			return PredicateToolkit.not(PredicateToolkit.matches(accessor, regexp));
 		}
 	}
 
 	public static class Contains extends AttributeValue<String> {
diff a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
--- a/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
+++ b/core/org.openjdk.jmc.flightrecorder.rules.jdk/src/main/java/org/openjdk/jmc/flightrecorder/rules/jdk/latency/JavaBlockingRule.java
@@ -87,18 +87,18 @@
 			JdkAggregators.TOTAL_BLOCKED_TIME, MethodProfilingDataProvider.topFrameBalanceFunction);
 
 	private static final String RESULT_ID = "JavaBlocking"; //$NON-NLS-1$
 
 	private Result getResult(IItemCollection items, IPreferenceValueProvider valueProvider) {
-		String threadExcludeRegexp = valueProvider.getPreferenceValue(EXCLUDED_THREADS_REGEXP);
-		items = items.apply(ItemFilters.not(ItemFilters.matches(JdkAttributes.EVENT_THREAD_NAME, threadExcludeRegexp)));
-
 		EventAvailability eventAvailability = RulesToolkit.getEventAvailability(items, JdkTypeIDs.MONITOR_ENTER);
 		if (eventAvailability != EventAvailability.AVAILABLE) {
 			return RulesToolkit.getEventAvailabilityResult(this, items, eventAvailability, JdkTypeIDs.MONITOR_ENTER);
 		}
 
+		String threadExcludeRegexp = valueProvider.getPreferenceValue(EXCLUDED_THREADS_REGEXP);
+		items = items.apply(ItemFilters.notMatches(JdkAttributes.EVENT_THREAD_NAME, threadExcludeRegexp));
+
 		IQuantity startTime = RulesToolkit.getEarliestStartTime(items);
 		IQuantity endTime = RulesToolkit.getLatestEndTime(items);
 		IQuantity recordingTime = endTime.subtract(startTime);
 
 		IQuantity byInstance = items.getAggregate(MONITOR_BALANCE_BY_INSTANCE);
diff a/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/resources/baseline/JfrRuleBaseline.xml b/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/resources/baseline/JfrRuleBaseline.xml
--- a/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/resources/baseline/JfrRuleBaseline.xml
+++ b/core/tests/org.openjdk.jmc.flightrecorder.rules.jdk.test/src/test/resources/baseline/JfrRuleBaseline.xml
@@ -3866,11 +3866,11 @@
             <longDescription>The class data seems to increase constantly in the metaspace during the recording. This behavior may indicate a memory leak in the metaspace, this could be due to the application not unloading classes as needed.</longDescription>
         </rule>
         <rule>
             <id>JavaBlocking</id>
             <severity>Information</severity>
-            <score>62.05152332723372</score>
+            <score>62.051706560483375</score>
             <shortDescription>Threads in the application were blocked on locks for a total of 1 min 26 s.</shortDescription>
             <longDescription>Threads in the application were blocked on locks for a total of 1 min 26 s. The most blocking monitor class was 'Logger', which was blocked 1,612 times for a total of 1 min 23 s.&lt;p&gt;The following regular expression was used to exclude threads from this rule: '(.*weblogic\.socket\.Muxer.*)'</longDescription>
         </rule>
         <rule>
             <id>LongGcPause</id>
