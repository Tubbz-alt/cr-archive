diff a/src/classes/com/sun/tdk/jcov/runtime/Collect.java b/src/classes/com/sun/tdk/jcov/runtime/Collect.java
--- a/src/classes/com/sun/tdk/jcov/runtime/Collect.java
+++ b/src/classes/com/sun/tdk/jcov/runtime/Collect.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -22,12 +22,14 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package com.sun.tdk.jcov.runtime;
 
+import java.util.Objects;
+
 /**
- * <p> Strores all runtime coverage information. Coverage information is stored
+ * <p> Stores all runtime coverage information. Coverage information is stored
  * in array of longs (counts[MAX_SLOTS]). </p> <p> Here should be no imports!
  * Collect should be usable in the earliest VM lifecycle - eg in String class
  * loading. </p> <p> slots count can be optimized at instrumentation time
  * by generation Collect class exactly for instrumented data. For agent it's
  * possible to use increasing array (see newSlot()). </p>
@@ -40,26 +42,26 @@
     // coverage data
     public static final int MAX_SLOTS = 2000000;
     public static int SLOTS = MAX_SLOTS;
     private static final int MAX_SAVERS = 10;
     private static int nextSlot = 0;
-    private static long counts[];
-    private static long counts_[];
+    private static long[] counts;
+    private static long[] counts_;
     // -- coverage data
     // savers
     private static JCovSaver[] savers = new JCovSaver[MAX_SAVERS];
     private static int nextSaver = 0;
-    private static Class extension = null;
+    private static Class<SaverDecorator> extension = null;
     // This constant is replaced in ANT build script (see files se.replace.properties, me.replace.properties and so on)
     private final static String saverClassnameString = "/*@BUILD_MODIFIED_SAVER_STRING@*/";
     // -- savers
     // saving state
     public static boolean enabled = false;
-    public static boolean saveEnabled = true;
-    public static boolean saveAtShutdownEnabled = true;
-    public static boolean isInitialized = false;
-    public static boolean isInternal = false;
+    static boolean saveEnabled = true;
+    static boolean saveAtShutdownEnabled = true;
+    static boolean isInitialized = false;
+    static boolean isInternal = false;
     // -- saving state
 
     /**
      * <p> Reserves a new slot for coverage item. </p>
      *
@@ -229,19 +231,20 @@
                     break;
                 }
             }
             for (int j = 0; j < i; j++) {
                 try {
-                    instantiateSaver(saver[j]).saveResults();
+                    Objects.requireNonNull(instantiateSaver(saver[j])).saveResults();
                 } catch (Throwable t) {
                     t.printStackTrace();
                 }
             }
         } else {
             for (int i = 0; i < nextSaver; i++) {
                 try {
-                    savers[i].saveResults();
+                    if (savers[i] != null)
+                        savers[i].saveResults();
                 } catch (Throwable t) {
                     t.printStackTrace();
                 }
             }
         }
@@ -250,22 +253,22 @@
     }
 
     /**
      * <p> Loads satellite class if it's not loaded. </p>
      */
-    public static void loadSaverExtension() {
+    private static void loadSaverExtension() {
         if (extension != null) {
             return;
         }
 
         String m = PropertyFinder.findValue("extension", null);
         if (m != null) {
             if (m.equals("javatest") || m.equals("jt") || m.equals("jtreg")) {
                 m = "com.sun.tdk.jcov.runtime.NetworkSatelliteDecorator";
             }
             try {
-                extension = Class.forName(m);
+                extension = (Class<SaverDecorator>) Class.forName(m);
             } catch (Throwable t) {
                 t.printStackTrace();
             }
         }
     }
@@ -275,23 +278,23 @@
      * instance if any. </p>
      *
      * @param name Saver to create
      * @return Created Saver
      */
-    public static JCovSaver instantiateSaver(String name) {
+    private static JCovSaver instantiateSaver(String name) {
         try {
-            return decorateSaver((JCovSaver) Class.forName(name).newInstance());
+            return decorateSaver((JCovSaver) Class.forName(name).getDeclaredConstructor().newInstance());
         } catch (Throwable t) {
             t.printStackTrace();
         }
         return null;
     }
 
     public static JCovSaver decorateSaver(JCovSaver saver) {
         if (extension != null) {
             try {
-                SaverDecorator s = (SaverDecorator) extension.newInstance();
+                SaverDecorator s = extension.getDeclaredConstructor().newInstance();
                 s.init(saver);
                 return s;
             } catch (Throwable t) {
                 t.printStackTrace();
             }
@@ -310,19 +313,17 @@
             if (PropertyFinder.isVMReady()) {
                 loadSaverExtension();
                 if (!saverClassnameString.startsWith("/*@")) {
                     addSaver(instantiateSaver(saverClassnameString));
                     PropertyFinder.addAutoShutdownSave();
-                    isInitialized = true;
-                } else {
-                    isInitialized = true;
                 }
+                isInitialized = true;
             }
             isInternal = false;
         }
     }
 
     static {
-        enableCounts();
-        init();
+        Collect.enableCounts();
+        Collect.init();
     }
 }
