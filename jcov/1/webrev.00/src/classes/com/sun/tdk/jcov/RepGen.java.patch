diff a/src/classes/com/sun/tdk/jcov/RepGen.java b/src/classes/com/sun/tdk/jcov/RepGen.java
--- a/src/classes/com/sun/tdk/jcov/RepGen.java
+++ b/src/classes/com/sun/tdk/jcov/RepGen.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020 Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -238,11 +238,11 @@
             ancfiltersClasses = new AncFilter[ancfilters.length];
             for (int i = 0; i < ancfilters.length; i++) {
                 try {
                     String ancfilter = ancfilters[i];
                     Class ancFilteClass = Class.forName(ancfilter);
-                    ancfiltersClasses[i] = (AncFilter) ancFilteClass.newInstance();
+                    ancfiltersClasses[i] = (AncFilter) ancFilteClass.getDeclaredConstructor().newInstance();
                 } catch (Exception e) {
                     throw new Error("Cannot create an instance of "
                             + "AncFilter: ", e);
                 }
             }
@@ -324,22 +324,16 @@
         options.setInstrMode(file_image.getParams().getMode());
         options.setAnonymOn(anonym);
 
         try {
             ProductCoverage coverage = new ProductCoverage(file_image, options.getSrcRootPaths(), options.getJavapClasses(), isPublicAPI, noAbstract, anonym, ancfiltersClasses);
-
-            logger.log(Level.INFO, "- Starting ReportGenerator {0}", rg.getClass().getName());
+            logger.log(Level.INFO, "-- Starting ReportGenerator {0}", rg.getClass().getName());
             rg.generateReport(coverage, options);
-        } catch (Throwable ex) {
-            if (ex.getMessage() != null) {
-                throw new Exception("ReportGenerator produced exception " + ex.getMessage(), ex);
-            } else {
-                throw new Exception("ReportGenerator produced exception " + ex, ex);
-            }
+        } catch (Throwable e) {
+            throw e;
         }
-
-        logger.log(Level.INFO, "- Report generation done");
+        logger.log(Level.INFO, "-- Report generation done");
         return;
     }
 
     /**
      * Get default (html) report generator
@@ -362,13 +356,12 @@
         }
         return new DefaultReportGeneratorSPI().getReportGenerator(name); // can be null
     }
 
     protected DataRoot readDataRootFile(String filename, boolean readScales, String[] include, String[] exclude, String[] modif) throws FileFormatException {
-        DataRoot file_image = null;
         ClassSignatureFilter acceptor = new ClassSignatureFilter(include, exclude, m_include, m_exclude, modif);
-        file_image = Reader.readXML(filename, readScales, acceptor);
+        DataRoot file_image = Reader.readXML(filename, readScales, acceptor);
         return file_image;
     }
 
     /**
      * Legacy CMD line entry poiny (use 'java -jar jcov.jar Merger' from cmd
@@ -655,26 +648,26 @@
                     } else {
                         throw new Exception("ReportGenerator produced exception " + ex, ex);
                     }
                 }
 
-                return 0;
+                return SUCCESS_EXIT_CODE;
             }
         } catch (IOException ex) {
             logger.log(Level.SEVERE, "Error while reading testlist", ex);
-            return 1;
+            return ERROR_CMDLINE_EXIT_CODE;
         }
 
         if (classesPath != null) {
             try {
                 logger.log(Level.INFO, "-- Creating javap report");
                 setDataProcessorsSPIs(null);
                 new JavapRepGen(this).run(filenames[0], classesPath, outputDir);
-                return 0;
+                return SUCCESS_EXIT_CODE;
             } catch (Exception ex) {
                 logger.log(Level.SEVERE, "Error while creating javap report", ex);
-                return 1;
+                return ERROR_CMDLINE_EXIT_CODE;
             }
         }
 
         try {
             generateReport(name, outputDir, r, srcRootPath);
@@ -683,13 +676,11 @@
                 Utils.deleteDirectory(new File(srcRootPath));
             }
 
             return 0;
         } catch (FileFormatException e) {
-//            logger.log(Level.SEVERE, "malformed jcov file \"{0}", filename);
             logger.log(Level.SEVERE, e.getMessage(), Arrays.toString(filenames));
-        } catch (ProcessingException ex) {
         } catch (Exception ex) {
             logger.log(Level.SEVERE, ex.getMessage(), ex);
         }
         return SUCCESS_EXIT_CODE;
     }
