diff a/src/classes/com/sun/tdk/jcov/RepGen.java b/src/classes/com/sun/tdk/jcov/RepGen.java
--- a/src/classes/com/sun/tdk/jcov/RepGen.java
+++ b/src/classes/com/sun/tdk/jcov/RepGen.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2018 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020 Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -238,11 +238,11 @@
             ancfiltersClasses = new AncFilter[ancfilters.length];
             for (int i = 0; i < ancfilters.length; i++) {
                 try {
                     String ancfilter = ancfilters[i];
                     Class ancFilteClass = Class.forName(ancfilter);
-                    ancfiltersClasses[i] = (AncFilter) ancFilteClass.newInstance();
+                    ancfiltersClasses[i] = (AncFilter) ancFilteClass.getDeclaredConstructor().newInstance();
                 } catch (Exception e) {
                     throw new Error("Cannot create an instance of "
                             + "AncFilter: ", e);
                 }
             }
@@ -324,22 +324,16 @@
         options.setInstrMode(file_image.getParams().getMode());
         options.setAnonymOn(anonym);
 
         try {
             ProductCoverage coverage = new ProductCoverage(file_image, options.getSrcRootPaths(), options.getJavapClasses(), isPublicAPI, noAbstract, anonym, ancfiltersClasses);
-
-            logger.log(Level.INFO, "- Starting ReportGenerator {0}", rg.getClass().getName());
+            logger.log(Level.INFO, "-- Starting ReportGenerator {0}", rg.getClass().getName());
             rg.generateReport(coverage, options);
-        } catch (Throwable ex) {
-            if (ex.getMessage() != null) {
-                throw new Exception("ReportGenerator produced exception " + ex.getMessage(), ex);
-            } else {
-                throw new Exception("ReportGenerator produced exception " + ex, ex);
-            }
+        } catch (Throwable e) {
+            throw e;
         }
-
-        logger.log(Level.INFO, "- Report generation done");
+        logger.log(Level.INFO, "-- Report generation done");
         return;
     }
 
     /**
      * Get default (html) report generator
@@ -362,13 +356,12 @@
         }
         return new DefaultReportGeneratorSPI().getReportGenerator(name); // can be null
     }
 
     protected DataRoot readDataRootFile(String filename, boolean readScales, String[] include, String[] exclude, String[] modif) throws FileFormatException {
-        DataRoot file_image = null;
         ClassSignatureFilter acceptor = new ClassSignatureFilter(include, exclude, m_include, m_exclude, modif);
-        file_image = Reader.readXML(filename, readScales, acceptor);
+        DataRoot file_image = Reader.readXML(filename, readScales, acceptor);
         return file_image;
     }
 
     /**
      * Legacy CMD line entry poiny (use 'java -jar jcov.jar Merger' from cmd
@@ -655,26 +648,26 @@
                     } else {
                         throw new Exception("ReportGenerator produced exception " + ex, ex);
                     }
                 }
 
-                return 0;
+                return SUCCESS_EXIT_CODE;
             }
         } catch (IOException ex) {
             logger.log(Level.SEVERE, "Error while reading testlist", ex);
-            return 1;
+            return ERROR_CMDLINE_EXIT_CODE;
         }
 
         if (classesPath != null) {
             try {
                 logger.log(Level.INFO, "-- Creating javap report");
                 setDataProcessorsSPIs(null);
                 new JavapRepGen(this).run(filenames[0], classesPath, outputDir);
-                return 0;
+                return SUCCESS_EXIT_CODE;
             } catch (Exception ex) {
                 logger.log(Level.SEVERE, "Error while creating javap report", ex);
-                return 1;
+                return ERROR_CMDLINE_EXIT_CODE;
             }
         }
 
         try {
             generateReport(name, outputDir, r, srcRootPath);
@@ -683,13 +676,11 @@
                 Utils.deleteDirectory(new File(srcRootPath));
             }
 
             return 0;
         } catch (FileFormatException e) {
-//            logger.log(Level.SEVERE, "malformed jcov file \"{0}", filename);
             logger.log(Level.SEVERE, e.getMessage(), Arrays.toString(filenames));
-        } catch (ProcessingException ex) {
         } catch (Exception ex) {
             logger.log(Level.SEVERE, ex.getMessage(), ex);
         }
         return SUCCESS_EXIT_CODE;
     }
diff a/src/classes/com/sun/tdk/jcov/runtime/Collect.java b/src/classes/com/sun/tdk/jcov/runtime/Collect.java
--- a/src/classes/com/sun/tdk/jcov/runtime/Collect.java
+++ b/src/classes/com/sun/tdk/jcov/runtime/Collect.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -22,12 +22,14 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package com.sun.tdk.jcov.runtime;
 
+import java.util.Objects;
+
 /**
- * <p> Strores all runtime coverage information. Coverage information is stored
+ * <p> Stores all runtime coverage information. Coverage information is stored
  * in array of longs (counts[MAX_SLOTS]). </p> <p> Here should be no imports!
  * Collect should be usable in the earliest VM lifecycle - eg in String class
  * loading. </p> <p> slots count can be optimized at instrumentation time
  * by generation Collect class exactly for instrumented data. For agent it's
  * possible to use increasing array (see newSlot()). </p>
@@ -40,26 +42,26 @@
     // coverage data
     public static final int MAX_SLOTS = 2000000;
     public static int SLOTS = MAX_SLOTS;
     private static final int MAX_SAVERS = 10;
     private static int nextSlot = 0;
-    private static long counts[];
-    private static long counts_[];
+    private static long[] counts;
+    private static long[] counts_;
     // -- coverage data
     // savers
     private static JCovSaver[] savers = new JCovSaver[MAX_SAVERS];
     private static int nextSaver = 0;
-    private static Class extension = null;
+    private static Class<SaverDecorator> extension = null;
     // This constant is replaced in ANT build script (see files se.replace.properties, me.replace.properties and so on)
     private final static String saverClassnameString = "/*@BUILD_MODIFIED_SAVER_STRING@*/";
     // -- savers
     // saving state
     public static boolean enabled = false;
-    public static boolean saveEnabled = true;
-    public static boolean saveAtShutdownEnabled = true;
-    public static boolean isInitialized = false;
-    public static boolean isInternal = false;
+    static boolean saveEnabled = true;
+    static boolean saveAtShutdownEnabled = true;
+    static boolean isInitialized = false;
+    static boolean isInternal = false;
     // -- saving state
 
     /**
      * <p> Reserves a new slot for coverage item. </p>
      *
@@ -229,19 +231,20 @@
                     break;
                 }
             }
             for (int j = 0; j < i; j++) {
                 try {
-                    instantiateSaver(saver[j]).saveResults();
+                    Objects.requireNonNull(instantiateSaver(saver[j])).saveResults();
                 } catch (Throwable t) {
                     t.printStackTrace();
                 }
             }
         } else {
             for (int i = 0; i < nextSaver; i++) {
                 try {
-                    savers[i].saveResults();
+                    if (savers[i] != null)
+                        savers[i].saveResults();
                 } catch (Throwable t) {
                     t.printStackTrace();
                 }
             }
         }
@@ -250,22 +253,22 @@
     }
 
     /**
      * <p> Loads satellite class if it's not loaded. </p>
      */
-    public static void loadSaverExtension() {
+    private static void loadSaverExtension() {
         if (extension != null) {
             return;
         }
 
         String m = PropertyFinder.findValue("extension", null);
         if (m != null) {
             if (m.equals("javatest") || m.equals("jt") || m.equals("jtreg")) {
                 m = "com.sun.tdk.jcov.runtime.NetworkSatelliteDecorator";
             }
             try {
-                extension = Class.forName(m);
+                extension = (Class<SaverDecorator>) Class.forName(m);
             } catch (Throwable t) {
                 t.printStackTrace();
             }
         }
     }
@@ -275,23 +278,23 @@
      * instance if any. </p>
      *
      * @param name Saver to create
      * @return Created Saver
      */
-    public static JCovSaver instantiateSaver(String name) {
+    private static JCovSaver instantiateSaver(String name) {
         try {
-            return decorateSaver((JCovSaver) Class.forName(name).newInstance());
+            return decorateSaver((JCovSaver) Class.forName(name).getDeclaredConstructor().newInstance());
         } catch (Throwable t) {
             t.printStackTrace();
         }
         return null;
     }
 
     public static JCovSaver decorateSaver(JCovSaver saver) {
         if (extension != null) {
             try {
-                SaverDecorator s = (SaverDecorator) extension.newInstance();
+                SaverDecorator s = extension.getDeclaredConstructor().newInstance();
                 s.init(saver);
                 return s;
             } catch (Throwable t) {
                 t.printStackTrace();
             }
@@ -310,19 +313,17 @@
             if (PropertyFinder.isVMReady()) {
                 loadSaverExtension();
                 if (!saverClassnameString.startsWith("/*@")) {
                     addSaver(instantiateSaver(saverClassnameString));
                     PropertyFinder.addAutoShutdownSave();
-                    isInitialized = true;
-                } else {
-                    isInitialized = true;
                 }
+                isInitialized = true;
             }
             isInternal = false;
         }
     }
 
     static {
-        enableCounts();
-        init();
+        Collect.enableCounts();
+        Collect.init();
     }
 }
diff a/src/classes/com/sun/tdk/jcov/runtime/CollectDetect.java b/src/classes/com/sun/tdk/jcov/runtime/CollectDetect.java
--- a/src/classes/com/sun/tdk/jcov/runtime/CollectDetect.java
+++ b/src/classes/com/sun/tdk/jcov/runtime/CollectDetect.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -40,11 +40,11 @@
      * can continue to collect hits. Also used to concurrent control of
      * CallerInclude/CallerExclude
      */
     private static class ThreadInfo {
 
-        public static int MAX_STACK = 1000; // not used
+        private static int INFO_LENGTH = 100;
         long id; // thread id
         int instLevel; // not-zero instLevel means that this thread entered into instrumentation (agent) or saving code when it shouldn't collect hits
         int expected = 0; // used for CallerInclude/CallerExclude - caller() method is instrumented with setExpected() method
         int clinitValue = 0;
         /*
@@ -74,36 +74,48 @@
     static ThreadInfo prevInfo;
     static ThreadInfo underConstruction;
     static volatile boolean lock = false;
 
     static {
+        CollectDetect.init();
+        CollectDetect.enableInvokeCounts();
+    }
+
+    public static void init() {
         if (info == null) {
             // do initialization
             underConstruction = new ThreadInfo(0L);
             underConstruction.instLevel++;
             if (Thread.currentThread() != null) {
-                info = new ThreadInfo[100];
+                info = new ThreadInfo[ThreadInfo.INFO_LENGTH];
                 long id = Thread.currentThread().getId();
                 prevInfo = infoForThread(id);
             }
         }
     }
 
+    public static void enableInvokeCounts() {
+        invokeCounts = new long[MAX_SLOTS];
+    }
+
     public static void enableDetectInternal() {
         if (info == null) {
             // do initialization
             underConstruction = new ThreadInfo(0L);
             underConstruction.instLevel++;
-            info = new ThreadInfo[100];
+            info = new ThreadInfo[ThreadInfo.INFO_LENGTH];
             long id = Thread.currentThread().getId();
             prevInfo = infoForThread(id);
         }
     }
 
     private static ThreadInfo infoForThread(long id) {
         ThreadInfo ti;
-        int hash = (int) (id % info.length);
+        if( info == null ) {
+            info = new ThreadInfo[ThreadInfo.INFO_LENGTH];
+        }
+        int hash = (int) (id % ThreadInfo.INFO_LENGTH);
         for (ti = info[hash]; ti != null; ti = ti.next) {
             if (ti.id == id) {
                 prevInfo = ti;
                 return ti;
             }
@@ -122,37 +134,43 @@
         }
         return ti;
     }
 
     public static void hit(int slot) {
-        //lock = true;
-        long id = Thread.currentThread().getId();
-        ThreadInfo ti = prevInfo;
+        Thread t = Thread.currentThread();
+        if ( t != null ) {
+            long id = Thread.currentThread().getId();
+            ThreadInfo ti = prevInfo;
 
-        if (ti.id != id) {
-            ti = infoForThread(id);
-        }
-        if (ti.enabled()) {
-            Collect.hit(slot);
+            if (ti.id != id) {
+                ti = infoForThread(id);
+            }
+
+            if (ti.enabled()) {
+                Collect.hit(slot);
+            }
         }
     }
 
     public static void hit(int slot, int hash, int fullHash) {
+        Thread t = Thread.currentThread();
+        if( t != null ) {
+            long id = t.getId();
+            ThreadInfo ti = prevInfo;
 
-        long id = Thread.currentThread().getId();
-        ThreadInfo ti = prevInfo;
+            if (ti == null || ti.id != id) {
+                ti = infoForThread(id);
+            }
 
-        if (ti.id != id) {
-            ti = infoForThread(id);
-        }
-        if (ti.enabled(hash)) {
-            ti.expected = 0;
-            Collect.hit(slot);
-        }
-        if (ti.enabledFull(fullHash)) {
-            ti.expectedFull = 0;
-            Collect.hit(slot);
+            if (ti.enabled(hash)) {
+                ti.expected = 0;
+                Collect.hit(slot);
+            }
+            if (ti.enabledFull(fullHash)) {
+                ti.expectedFull = 0;
+                Collect.hit(slot);
+            }
         }
     }
 
     public static void enterInstrumentationCode() {
         if (prevInfo != null) {
@@ -225,13 +243,10 @@
             ti.instLevel--;
         }
     }
     private static long[] invokeCounts;
 
-    public static void enableInvokeCounts() {
-        invokeCounts = new long[MAX_SLOTS];
-    }
 
     public static void invokeHit(int id) {
         invokeCounts[id]++;
     }
 
@@ -244,10 +259,6 @@
     }
 
     public static void setInvokeCountFor(int id, long count) {
         invokeCounts[id] = count;
     }
-
-    static {
-        enableInvokeCounts();
-    }
 }
diff a/src/classes/com/sun/tdk/jcov/runtime/JCovSESocketSaver.java b/src/classes/com/sun/tdk/jcov/runtime/JCovSESocketSaver.java
--- a/src/classes/com/sun/tdk/jcov/runtime/JCovSESocketSaver.java
+++ b/src/classes/com/sun/tdk/jcov/runtime/JCovSESocketSaver.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -41,14 +41,20 @@
     public static final String NETWORK_DEF_PROPERTIES_FILENAME = "jcov_network_default.properties";
     public static final String PORT_PROPERTIES_NAME = "port";
     public static final String HOST_PROPERTIES_NAME = "host";
 
     static {
-
+        URL url = null;
         File file = null;
         String urlString = "";
-        URL url = ClassLoader.getSystemClassLoader().getResource(JCovSESocketSaver.class.getCanonicalName().replaceAll("\\.", "/") + ".class");
+        try {
+            url = ClassLoader.getSystemClassLoader().getResource(
+                    JCovSESocketSaver.class.
+                            getCanonicalName().
+                            replace('.', '/') + ".class");
+        } catch( Exception ignore ) {
+        }
         if (url != null) {
             urlString = url.toString();
             if (urlString.contains("file:") && urlString.contains("!")) {
                 urlString = urlString.substring(urlString.indexOf("file:"), urlString.indexOf('!'));
             }
@@ -59,17 +65,24 @@
             } catch (Exception e) {
                 System.err.println("Error while finding " + urlString + " file: " + e);
             }
         }
 
-        if (file == null){
-            file = new File(System.getProperty("java.home")+File.separator + NETWORK_DEF_PROPERTIES_FILENAME);
+        if (file == null) {
+            try {
+                file = new File(System.getProperty("java.home") +
+                        File.separator +
+                        NETWORK_DEF_PROPERTIES_FILENAME);
+            } catch( Exception ignore ) {
+            }
         }
 
         if (file != null && file.exists()) {
 
-            File defProperties = new File(file.getParent() + File.separator + NETWORK_DEF_PROPERTIES_FILENAME);
+            File defProperties = new File(file.getParent() +
+                    File.separator +
+                    NETWORK_DEF_PROPERTIES_FILENAME);
 
             if (defProperties.exists()) {
 
                 Properties prop = new Properties();
 
diff a/src/classes/com/sun/tdk/jcov/runtime/JCovServerSocketSaver.java b/src/classes/com/sun/tdk/jcov/runtime/JCovServerSocketSaver.java
--- a/src/classes/com/sun/tdk/jcov/runtime/JCovServerSocketSaver.java
+++ b/src/classes/com/sun/tdk/jcov/runtime/JCovServerSocketSaver.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014,z Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
diff a/src/classes/com/sun/tdk/jcov/runtime/PropertyFinder.java b/src/classes/com/sun/tdk/jcov/runtime/PropertyFinder.java
--- a/src/classes/com/sun/tdk/jcov/runtime/PropertyFinder.java
+++ b/src/classes/com/sun/tdk/jcov/runtime/PropertyFinder.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -24,16 +24,14 @@
  */
 package com.sun.tdk.jcov.runtime;
 
 import java.io.File;
 import java.io.FileInputStream;
-import java.io.IOException;
 import java.io.InputStream;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.Calendar;
-import java.util.Iterator;
 import java.util.Properties;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 /**
@@ -66,11 +64,11 @@
      */
     public static String processMacroString(String str, char shortcarts[], String datas[]) {
         if (str == null) {
             return str;
         }
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         int start = 0, pos = 0;
         while (true) {
             pos = str.indexOf('%', start);
             if (pos < 0) {
                 buf.append(str.substring(start));
@@ -99,15 +97,22 @@
                     }
                     if (!found) {
                         switch (ch) {
                             case 'd': // M-D-Y
                                 Calendar c = Calendar.getInstance();
-                                buf.append(c.get(Calendar.HOUR_OF_DAY)).append(':').append(c.get(Calendar.MINUTE)).append(':').append(c.get(Calendar.SECOND)).append('_').append(c.get(Calendar.MONTH) + 1).append('-').append(c.get(Calendar.DAY_OF_MONTH)).append('-').append(c.get(Calendar.YEAR));
+                                buf.append(c.get(Calendar.HOUR_OF_DAY)).append(':').
+                                        append(c.get(Calendar.MINUTE)).append(':').
+                                        append(c.get(Calendar.SECOND)).append('_').
+                                        append(c.get(Calendar.MONTH) + 1).append('-').
+                                        append(c.get(Calendar.DAY_OF_MONTH)).append('-').
+                                        append(c.get(Calendar.YEAR));
                                 break;
                             case 't': // h:m:s
                                 c = Calendar.getInstance();
-                                buf.append(c.get(Calendar.HOUR_OF_DAY)).append(':').append(c.get(Calendar.MINUTE)).append(':').append(c.get(Calendar.SECOND));
+                                buf.append(c.get(Calendar.HOUR_OF_DAY)).append(':').
+                                        append(c.get(Calendar.MINUTE)).append(':').
+                                        append(c.get(Calendar.SECOND));
                                 break;
                             case 'D': // VM workdir
                                 buf.append(System.getProperty("user.dir"));
                                 break;
                             case 'R': // random int
@@ -178,26 +183,18 @@
                         }
                     } catch (Exception e) {
                         --end; // including last % to next search
                         buf.append(patt);
                     }
-                } else if (ch == 'E') { // environment variable
+                } else if (ch == 'E' || ch == 'P') { // environment variable or Java property
                     String prop = System.getenv(patt.substring(2));
                     if (prop != null) {
                         buf.append(prop);
                     } else {
                         --end; // including last % to next search
                         buf.append(patt);
                     }
-                } else if (ch == 'P') { // Java property
-                    String prop = System.getProperty(patt.substring(2));
-                    if (prop != null) {
-                        buf.append(prop);
-                    } else {
-                        --end; // including last % to next search
-                        buf.append(patt);
-                    }
                 } else { // Java property
                     String prop = System.getProperty(patt.substring(1));
                     if (prop != null) {
                         buf.append(prop);
                     } else {
@@ -212,11 +209,11 @@
     }
     private static Properties p;
     private static boolean propsRead = false;
     private static String propsFile;
     public static final String PROPERTY_FILE_PREFIX = "jcov.";
-    public static final String JVM_PROPERTY_PREFIX = "jcov.";
+    public static final String JVM_PROPERTY_PREFIX = PROPERTY_FILE_PREFIX;
     public static final String ENV_PROPERTY_PREFIX = "JCOV_";
 
     /**
      * <p> Returns value specified by user. If sys prop defined the value is
      * taken from system property, if not the looks for env variable setting and
@@ -227,20 +224,19 @@
      * @param defaultValue - default value
      * @return
      */
     public static String getStaticValue(String name, String defaultValue) {
         try {
-            String res = System.getProperty("jcov." + name);
+            String res = System.getProperty(PROPERTY_FILE_PREFIX + name);
             if (res != null) {
                 return res;
             }
-
-            res = System.getenv("JCOV_" + name.replaceAll("\\.", "_").toUpperCase());
+            res = System.getenv(ENV_PROPERTY_PREFIX + name.replace('.', '_').toUpperCase());
             if (res != null) {
                 return res;
             }
-        } catch (RuntimeException e) {
+        } catch (Exception ignored) {
         }
         return defaultValue;
     }
 
     /**
@@ -300,142 +296,84 @@
                     propsFile = "/com/sun/tdk/jcov/jcov.properties";
                     return p;
                 }
             }
 
-            p = readProperties(System.getProperty("user.home") + File.separator + ".jcov" + File.separator + "jcov.properties");
-            if (p != null) {
-                propsFile = System.getProperty("user.home") + File.separator + ".jcov" + File.separator + "jcov.properties";
+            try {
+                p = readProperties(System.getProperty("user.home") + File.separator + ".jcov" + File.separator + "jcov.properties");
+                if (p != null) {
+                    propsFile = System.getProperty("user.home") + File.separator + ".jcov" + File.separator + "jcov.properties";
+                }
+            } catch (Exception ignore) {
             }
         }
 
         return p;
     }
 
+    private static Properties loadPropertiesFile(String path, Properties properties) {
+        try(InputStream in = new FileInputStream(path)) {
+            Properties p = ( properties == null) ?  new Properties() : properties;
+            p.load(in);
+            resolveProps(p);
+            properties = p;
+        } catch (Exception ignore) {
+            // warning message
+        }
+        return properties;
+    }
+
+    private static Properties loadPropertiesStream(String path, Properties properties) {
+        try(InputStream in = JCovSaver.class.getResourceAsStream(path)) {
+            Properties p = ( properties == null) ?  new Properties() : properties;
+            p.load(in);
+            resolveProps(p);
+            properties = p;
+        } catch (Exception ignore) {
+            // warning message
+        }
+        return properties;
+    }
+
     /**
-     * <p> Reads jcov property file from specified path </p> <p> Path is firstly
-     * checked as a file and is read only if such file exists and can be read.
-     * If it's not a file, can't be read, doesn't exist or is not a property
-     * file then classpath resource is checked. <p>
+     * <p> Reads jcov property file from specified path </p> <p>
+     * If it can't be read then classpath resource is checked. <p>
      *
      * @param path Path to look for a property file.
      * @return Read properties or null if file was not found neither in file
      * system neither in classpath
      */
     public static Properties readProperties(String path) {
-        File f = new File(path);
-        if (f.exists() && f.isFile() && f.canRead()) {
-            InputStream in = null;
-            try {
-                in = new FileInputStream(f);
-                Properties p = new Properties();
-                p.load(in);
-                resolveProps(p);
-                return p;
-            } catch (IOException ex) {
-                // warning message
-            } finally {
-                if (in != null) {
-                    try {
-                        in.close();
-                    } catch (Exception e) {
-                    }
-                }
-            }
-        }
-
-        InputStream in = null;
-        try {
-            in = JCovSaver.class.getResourceAsStream(path);
-        }
-        catch (Exception e){
-            //in will be null
-        }
-        if (in != null) {
-            try {
-                Properties p = new Properties();
-                p.load(in);
-                resolveProps(p);
-                return p;
-            } catch (IOException e) {
-                // warning message
-            } finally {
-                try {
-                    in.close();
-                } catch (Exception e) {
-                }
-            }
-        }
-
-        return null;
+        Properties p = loadPropertiesFile(path, null);
+        return  p == null ? loadPropertiesStream(path, null) : p;
     }
 
     /**
-     * <p> Reads jcov property file from specified path </p> <p> Path is firstly
-     * checked as a file and is read only if such file exists and can be read.
-     * If it's not a file, can't be read, doesn't exist or is not a property
-     * file then classpath resource is checked. </p>
+     * <p> Reads jcov property file from specified path </p> <p>
+     * If it can't be read then classpath resource is checked. <p>
      *
      * @param path Path to look for a property file.
      * @return Read properties or null if file was not found neither in file
      * system neither in classpath
      */
-    public static Properties readProperties(String path, Properties p) {
-        if (p == null) {
-            p = new Properties();
-        }
-
-        File f = new File(path);
-        if (f.exists() && f.isFile() && f.canRead()) {
-            InputStream in = null;
-            try {
-                in = new FileInputStream(f);
-                p.load(in);
-                resolveProps(p);
-                return p;
-            } catch (IOException ex) {
-                // warning message
-            } finally {
-                if (in != null) {
-                    try {
-                        in.close();
-                    } catch (Exception e) {
-                    }
-                }
-            }
+    public static Properties readProperties(String path, Properties properties) {
+        if (properties == null) {
+            properties = new Properties();
         }
-
-        InputStream in = JCovSaver.class.getResourceAsStream(path);
-        if (in != null) {
-            try {
-                p.load(in);
-                resolveProps(p);
-                return p;
-            } catch (IOException e) {
-                // warning message
-            } finally {
-                try {
-                    in.close();
-                } catch (Exception e) {
-                }
-            }
-        }
-
-        return p;
+        Properties p = loadPropertiesFile(path, properties);
+        return  properties.equals(p) ? loadPropertiesStream(path, properties) : p;
     }
 
     /**
      * <p> Resolves all links of ${key} form on other keys in property values.
      * </p>
      *
      * @param props Properties to resolve.
      */
     private static void resolveProps(Properties props) {
         Pattern p = Pattern.compile(".*(\\$\\{(.*)\\})");
-        Iterator it = props.keySet().iterator();
-        while (it.hasNext()) {
-            Object o = it.next();
+        for (Object o : props.keySet()) {
             String name = (String) o;
             String val = props.getProperty(name);
             Matcher m = p.matcher(val);
             while (m.find()) {
                 String link = m.group(2);
@@ -454,11 +392,11 @@
      * @param name name of value to read
      * @return value of "name" in fileName property file or null if such
      * property file doesn't exist
      */
     public static String readPropFrom(String fileName, String name) {
-        Properties props = readProperties(fileName, null);
+        Properties props = readProperties(fileName);
         if (props != null) {
             return props.getProperty(PROPERTY_FILE_PREFIX + name);
         } else {
             return null;
         }
@@ -473,11 +411,11 @@
      *
      * @param name Property name to check source
      * @return String describing property source.
      */
     public static String findSource(String name) {
-        if (name == null || "".equals(name)) {
+        if (name == null || name.isEmpty()) {
             return "";
         }
 
         if (System.getProperty(JVM_PROPERTY_PREFIX + name) != null) {
             return "JavaVM property '" + JVM_PROPERTY_PREFIX + name + "'";
@@ -519,24 +457,26 @@
     /**
      * <p> Installs shutdown hook. ME/Card version can't install shutdown hook.
      * </p>
      */
     public static void addAutoShutdownSave() {
-        Runtime.getRuntime().addShutdownHook(new Thread() {
-            public void run() {
-//                System.out.println("JCovRT: autosave fired");
-                if (Collect.saveAtShutdownEnabled && "true".equals(findValue("autosave", "true"))) {
-                    Collect.disable();
-                    Collect.saveResults();
-                    Collect.enable();
-                    Collect.saveAtShutdownEnabled = false;
-                    Collect.saveEnabled = false;
-                }
+        if (Collect.saveAtShutdownEnabled && "true".equals(findValue("autosave", "true"))) {
+            try {
+                Runtime.getRuntime().addShutdownHook(new Thread() {
+                    @Override
+                    public void run() {
+                        Collect.disable();
+                        Collect.saveResults();
+                        Collect.enable();
+                        Collect.saveAtShutdownEnabled = false;
+                        Collect.saveEnabled = false;
+                    }
+                });
+            } catch (Exception ignore) {
+                System.err.println("Can't set shutdown hook.");
             }
-        });
-//        System.out.println("JCovRT: autosave added in: ");
-//        new Exception().printStackTrace();
+        }
     }
 
     /**
      * <p> Checks whether VM is ready to initialize JCov RT (saver). Most savers
      * use shutdown hook to save data in time. Shutdown hook needs Thread to be
@@ -546,9 +486,9 @@
      *
      * @return true if VM is ready to install shutdown hook and to read
      * properties
      */
     public static boolean isVMReady() {
-
         return System.out != null && Runtime.getRuntime() != null;//&& sun.misc.VM.isBooted();
     }
-}
+
+}
