diff a/.gitignore b/.gitignore
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,23 @@
+# Compiled class file
+*.class
+
+# Log file
+*.log
+
+# Package Files
+*.jar
+*.zip
+*.tar.gz
+*.tar
+
+# virtual machine crash logs
+hs_err_pid*
+
+# Misc: Intellij Idea,Mac OS
+/.idea/
+*.iml
+.DS_Store
+
+# build
+JCOV_BUILD/
+
diff a/build/build.properties b/build/build.properties
--- a/build/build.properties
+++ b/build/build.properties
@@ -1,6 +1,6 @@
-# Copyright (c) 2014, 2018, Oracle and/or its affiliates. All rights reserved.
+# Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
 # DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 #
 # This code is free software; you can redistribute it and/or modify it
 # under the terms of the GNU General Public License version 2 only, as
 # published by the Free Software Foundation.  Oracle designates this
@@ -20,18 +20,18 @@
 # Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 # or visit www.oracle.com if you need additional information or have any
 # questions.
 
 # sha1 checksum for asm libraries
-asm.checksum = d74d4ba0dee443f68fb2dcb7fcdb945a2cd89912
-asm.tree.checksum = 29bc62dcb85573af6e62e5b2d735ef65966c4180
-asm.util.checksum = 18d4d07010c24405129a6dbb0e92057f8779fb9d
+asm.checksum = 3f5199523fb95304b44563f5d56d9f5a07270669
+asm.tree.checksum = dfcad5abbcff36f8bdad5647fe6f4972e958ad59
+asm.util.checksum = a8f978fbad00c565210bebedb28e5d6f73327134
 
 # path to asm libraries
-asm.jar = asm-7.0.jar
-asm.tree.jar = asm-tree-7.0.jar
-asm.util.jar = asm-util-7.0.jar
+asm.jar = asm-8.0.1.jar
+asm.tree.jar = asm-tree-8.0.1.jar
+asm.util.jar = asm-util-8.0.1.jar
 
 # path to javatest library (empty value allowed if you do not need jtobserver.jar)
 javatestjar = javatest.jar
 
 # path to TestNG library
diff a/build/build.xml b/build/build.xml
--- a/build/build.xml
+++ b/build/build.xml
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
 <!--
-  Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+  Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 
   This code is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License version 2 only, as
   published by the Free Software Foundation.  Oracle designates this
@@ -118,11 +118,11 @@
             <format property="date" pattern="dd MMMM yyyy" locale="en"/>
         </tstamp>
         <mkdir dir="${jcov.src.update}/com/sun/tdk/jcov/tools"/>
         <echo file="${jcov.src.update}/com/sun/tdk/jcov/tools/JcovVersion.java">
             /*
-            * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+            * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
             * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
             *
             * This code is free software; you can redistribute it and/or modify it
             * under the terms of the GNU General Public License version 2 only, as
             * published by the Free Software Foundation.  Oracle designates this
@@ -150,27 +150,27 @@
             public static final String jcovVersion = "${build.version}";
             public static final String jcovMilestone = "${build.milestone}";
             public static final String jcovBuildNumber = "${build.number}";
             public static final String jcovBuildDate = "${date}";
             public static String getJcovVersion() {
-                return String.format("%s%s-%s built: %s", jcovVersion, jcovMilestone, jcovBuildNumber, jcovBuildDate);
+                return String.format(" %s_%s (%s) %s", jcovVersion, jcovBuildNumber, jcovMilestone, jcovBuildDate);
               }
             }
         </echo>
 
     </target>
 
     <target name="compile"  depends="prepare, build-date"
             description="compile main tools">
 
-        <javac includeantruntime="false" encoding="iso-8859-1" debug="true" target="1.7" source="1.7"
+        <javac includeantruntime="false" encoding="iso-8859-1" debug="true" target="8" source="8"
                srcdir="${jcov.src.update}"
                destdir="${jcov.classes}"
                classpath="${jcov.classpath}">
         </javac>
 
-        <javac includeantruntime="true" encoding="iso-8859-1" debug="true" target="1.7" source="1.7"
+        <javac includeantruntime="true" encoding="iso-8859-1" debug="true" target="8" source="8"
                srcdir="${src.dir}"
                destdir="${jcov.classes}"
                classpath="${jcov.classpath}">
             <patternset refid="jcov.files"/>
         </javac>
@@ -232,11 +232,11 @@
                 <filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
                     <param type="propertiesfile" value="filesaver.replace.properties"/>
                 </filterreader>
             </filterchain>
         </copy>
-        <javac includeantruntime="true" encoding="iso-8859-1" debug="true" target="1.7" source="1.7"
+        <javac includeantruntime="true" encoding="iso-8859-1" debug="true" target="8" source="8"
                srcdir="${jcov.filesaver.src}"
                sourcepath=""
                classpath="${jcov.filesaver.classes}"
                destdir="${jcov.filesaver.classes}">
         </javac>
@@ -266,11 +266,11 @@
                 <filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
                     <param type="propertiesfile" value="networksaver.replace.properties"/>
                 </filterreader>
             </filterchain>
         </copy>
-        <javac includeantruntime="true" encoding="iso-8859-1" debug="true" target="1.7" source="1.7"
+        <javac includeantruntime="true" encoding="iso-8859-1" debug="true" target="8" source="8"
                srcdir="${jcov.networksaver.src}"
                sourcepath=""
                classpath="${jcov.networksaver.classes}"
                destdir="${jcov.networksaver.classes}">
         </javac>
@@ -283,11 +283,11 @@
         </jar>
     </target>
 
     <target name="build-jt.observer" depends="prepare" if ="javatest.present" description="build jtobserver jar">
         <mkdir dir="${jcov.jtobserver.classes}"/>
-        <javac includeantruntime="false" encoding="iso-8859-1" debug="true" target="1.7" source="1.7"
+        <javac includeantruntime="false" encoding="iso-8859-1" debug="true" target="8" source="8"
                srcdir="${src.dir}"
                sourcepath=""
                destdir="${jcov.jtobserver.classes}" classpath="${javatestjar}">
             <include name="jcov/*"/>
         </javac>
@@ -299,11 +299,11 @@
             description="Creates the build-distribution.">
     </target>
 
     <target name="test" depends="build-jcov">
         <mkdir dir="${result.dir}/test/classes" />
-        <javac includeantruntime="false" encoding="iso-8859-1" debug="true" target="1.8" source="1.8"
+        <javac includeantruntime="false" encoding="iso-8859-1" debug="true" target="8" source="8"
                srcdir="${test.src.dir}"
                sourcepath="${test.src.dir}"
                classpath="${testngjar}:${build.dir}/jcov.jar"
                destdir="${result.dir}/test/classes">
         </javac>
diff a/build/release.properties b/build/release.properties
--- a/build/release.properties
+++ b/build/release.properties
@@ -1,6 +1,6 @@
-# Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+# Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
 # DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 #
 # This code is free software; you can redistribute it and/or modify it
 # under the terms of the GNU General Public License version 2 only, as
 # published by the Free Software Foundation.  Oracle designates this
@@ -20,7 +20,8 @@
 # Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 # or visit www.oracle.com if you need additional information or have any
 # questions.
 
 build.version = 3.0
-build.milestone = os.beta
-build.number = 2
+build.milestone = os.ea
+build.number = 3
+
diff a/src/classes/com/sun/tdk/jcov/instrument/StaticInvokeMethodAdapter.java b/src/classes/com/sun/tdk/jcov/instrument/StaticInvokeMethodAdapter.java
--- a/src/classes/com/sun/tdk/jcov/instrument/StaticInvokeMethodAdapter.java
+++ b/src/classes/com/sun/tdk/jcov/instrument/StaticInvokeMethodAdapter.java
@@ -103,25 +103,29 @@
                 il.add(new MethodInsnNode(INVOKESTATIC,
                         "com/sun/tdk/jcov/runtime/Collect", "hit", "(I)V", false));
                 il.accept(this);
             }
         }
+
         if (params.isCallerFilterOn()
                 && params.isCallerFilterAccept(className)) {
-
             int id = (name + desc).hashCode();
             super.visitLdcInsn(id);
-            super.visitMethodInsn(INVOKESTATIC, "com/sun/tdk/jcov/runtime/CollectDetect", "setExpected", "(I)V", false);
-
+            super.visitMethodInsn(INVOKESTATIC,
+                    "com/sun/tdk/jcov/runtime/CollectDetect",
+                    "setExpected",
+                    "(I)V", false);
         }
 
         if (params.isInnerInvacationsOff() && Utils.isAdvanceStaticInstrAllowed(className, name)) {
-            if (!owner.equals("java/lang/Object") && params.isInnerInstrumentationIncludes(className)) {
-                int id = -1;
+            if (!owner.equals("java/lang/Object")) {
+                int id = params.isInnerInstrumentationIncludes(className) ? 0 : -1;
                 super.visitLdcInsn(id);
-                super.visitMethodInsn(INVOKESTATIC, "com/sun/tdk/jcov/runtime/CollectDetect", "setExpected", "(I)V", false);
-
+                super.visitMethodInsn(INVOKESTATIC,
+                        "com/sun/tdk/jcov/runtime/CollectDetect",
+                        "setExpected",
+                        "(I)V", false);
             }
         }
 
         super.visitMethodInsn(opcode, owner, name, desc, itf);
 
diff a/src/classes/com/sun/tdk/jcov/runtime/AgentSocketSaver.java b/src/classes/com/sun/tdk/jcov/runtime/AgentSocketSaver.java
--- a/src/classes/com/sun/tdk/jcov/runtime/AgentSocketSaver.java
+++ b/src/classes/com/sun/tdk/jcov/runtime/AgentSocketSaver.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -28,12 +28,10 @@
 import java.io.BufferedOutputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.net.Socket;
 import java.net.UnknownHostException;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 /**
  *
  * @author Andrey Titov
  */
@@ -79,11 +77,11 @@
                 try {
                     s = new Socket(host, port);
                     break;
                 } catch (UnknownHostException e) {
                     System.err.println("JCovRT: Can't resolve hostname " + host
-                            + " - unknown host. Exiting. ");
+                            + " - unknown host. Exiting.");
                     return;
                 } catch (IOException e) {
                     System.err.println("JCovRT: Attempt to connect to " + host + ":"
                             + port + " failed: ");
                     System.err.println(e.getMessage());
@@ -102,11 +100,11 @@
             out.writeUTF(PropertyFinder.findValue("product", ""));  // productname  - 1+?bytes
             out.writeBoolean(root.getParams().isDynamicCollect());  // dynamic      - 1byte
             root.writeObject(out);
             out.close();
             s.close();
-        } catch (InterruptedException ex) {
+        } catch (InterruptedException ignored) {
         } catch (IOException ex) {
-            Logger.getLogger(FileSaver.class.getName()).log(Level.SEVERE, null, ex);
+            System.err.println("JCovRT: " + ex);
         }
     }
 }
diff a/src/classes/com/sun/tdk/jcov/runtime/NetworkSatelliteDecorator.java b/src/classes/com/sun/tdk/jcov/runtime/NetworkSatelliteDecorator.java
--- a/src/classes/com/sun/tdk/jcov/runtime/NetworkSatelliteDecorator.java
+++ b/src/classes/com/sun/tdk/jcov/runtime/NetworkSatelliteDecorator.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -26,12 +26,10 @@
 
 import java.io.*;
 import java.net.Socket;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 /**
  *
  * @author Andrey Titov
  */
@@ -99,18 +97,17 @@
                             }
                         }
                     }
 
                 } catch (Exception e) {
-                    Logger.getLogger(NetworkSatelliteDecorator.class.getName()).log(Level.SEVERE, "SocketClient: ", e);
+                    System.err.println("JCovRT SocketClient: " + e);
                 }
             }
 
         });
         socketClientThread.setDaemon(true);
         socketClientThread.start();
-
     }
 
     public void saveResults() {
 
         while (name == null){
