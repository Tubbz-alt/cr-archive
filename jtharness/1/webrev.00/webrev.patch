diff a/src/com/sun/javatest/TestResult.java b/src/com/sun/javatest/TestResult.java
--- a/src/com/sun/javatest/TestResult.java
+++ b/src/com/sun/javatest/TestResult.java
@@ -2812,14 +2812,16 @@
             tsr.numBackslashes = 0;
             tsr.numNonASCII = 0;
             tsr.needsFinalNewline = false;
 
             // scan for newlines and characters requiring escapes
+            int lastCharPos = text.length() - 1;
             for (int i = 0; i < text.length(); i++) {
                 char c = text.charAt(i);
-                if (c < 32) {
-                    if (c == '\n') {
+                char nextChar = (i == lastCharPos) ? 0 : text.charAt(i + 1);
+                if (c < 32) {   // if it's "\r\n" sep we skip the \r and would count only the \n on the next step
+                    if ((c == '\n') || (c == '\r' && nextChar != '\n')) {
                         tsr.numLines++;
                     } else if (c != '\t' && c != '\r') {
                         tsr.numNonASCII++;
                     }
                 } else if (c < 127) {
@@ -2835,11 +2837,11 @@
 
             // Check the text ends with a final newline ('\n', not line.separator)
             // Note this must match the check when reading the text back in,
             // when we also check for just '\n' and not line.separator, because
             // line.separator now, and line.separator then, might be different.
-            if (!text.isEmpty() && !text.endsWith("\n")) {
+            if (!text.isEmpty() && !text.endsWith("\n") && !text.endsWith("\r") && !text.endsWith("\r\n")) {
                 tsr.needsFinalNewline = true;
                 tsr.numLines++;
             }
             return tsr;
         }
diff a/unit-tests/com/sun/javatest/TestResult_TextScanResult.java b/unit-tests/com/sun/javatest/TestResult_TextScanResult.java
--- a/unit-tests/com/sun/javatest/TestResult_TextScanResult.java
+++ b/unit-tests/com/sun/javatest/TestResult_TextScanResult.java
@@ -67,11 +67,11 @@
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("\r");
         assertEquals(0, scan.numBackslashes);
         assertEquals(1, scan.numLines);
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
-        assertTrue(scan.needsFinalNewline);
+        assertFalse(scan.needsFinalNewline);
     }
 
     @Test
     public void space_n()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan(" \n");
@@ -87,11 +87,11 @@
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan(" \r");
         assertEquals(0, scan.numBackslashes);
         assertEquals(1, scan.numLines);
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
-        assertTrue(scan.needsFinalNewline);
+        assertFalse(scan.needsFinalNewline);
     }
 
     @Test
     public void space_rn()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan(" \r\n");
@@ -100,18 +100,28 @@
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
         assertFalse(scan.needsFinalNewline);
     }
 
+    @Test
+    public void space_nr()  {
+        TestResult.TextScanResult scan = TestResult.TextScanResult.scan(" \n\r");
+        assertEquals(0, scan.numBackslashes);
+        assertEquals(2, scan.numLines);
+        assertEquals(0, scan.numNonASCII);
+        assertFalse(scan.needsEscape);
+        assertFalse(scan.needsFinalNewline);
+    }
+
     @Test
     public void rr()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("\r\r");
         assertEquals(0, scan.numBackslashes);
-        assertEquals(1, scan.numLines);
+        assertEquals(2, scan.numLines);
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
-        assertTrue(scan.needsFinalNewline);
+        assertFalse(scan.needsFinalNewline);
     }
 
     @Test
     public void rn()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("\r\n");
@@ -120,20 +130,53 @@
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
         assertFalse(scan.needsFinalNewline);
     }
 
+    @Test
+    public void nr()  {
+        TestResult.TextScanResult scan = TestResult.TextScanResult.scan("\n\r");
+        assertEquals(0, scan.numBackslashes);
+        assertEquals(2, scan.numLines);
+        assertEquals(0, scan.numNonASCII);
+        assertFalse(scan.needsEscape);
+        assertFalse(scan.needsFinalNewline);
+    }
+
     @Test
     public void rnrn()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("\r\n\r\n");
         assertEquals(0, scan.numBackslashes);
         assertEquals(2, scan.numLines);
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
         assertFalse(scan.needsFinalNewline);
     }
 
+    /**
+     * n, rn, r
+     */
+    @Test
+    public void nrnr()  {
+        TestResult.TextScanResult scan = TestResult.TextScanResult.scan("\n\r\n\r");
+        assertEquals(0, scan.numBackslashes);
+        assertEquals(3, scan.numLines);
+        assertEquals(0, scan.numNonASCII);
+        assertFalse(scan.needsEscape);
+        assertFalse(scan.needsFinalNewline);
+    }
+
+    @Test
+    public void nnnn()  {
+        TestResult.TextScanResult scan = TestResult.TextScanResult.scan("\n\n\n\n");
+        assertEquals(0, scan.numBackslashes);
+        assertEquals(4, scan.numLines);
+        assertEquals(0, scan.numNonASCII);
+        assertFalse(scan.needsEscape);
+        assertFalse(scan.needsFinalNewline);
+    }
+
     @Test
     public void nn()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("\n\n");
         assertEquals(0, scan.numBackslashes);
         assertEquals(2, scan.numLines);
@@ -194,11 +237,11 @@
 
     @Test
     public void twoLines_r()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\rsecond");
         assertEquals(0, scan.numBackslashes);
-        assertEquals(1, scan.numLines);
+        assertEquals(2, scan.numLines);
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
         assertTrue(scan.needsFinalNewline);
     }
 
@@ -220,28 +263,38 @@
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
         assertFalse(scan.needsFinalNewline);
     }
 
+    @Test
+    public void twoLines_n_endsWith_rn()  {
+        TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\nsecond\r\n");
+        assertEquals(0, scan.numBackslashes);
+        assertEquals(2, scan.numLines);
+        assertEquals(0, scan.numNonASCII);
+        assertFalse(scan.needsEscape);
+        assertFalse(scan.needsFinalNewline);
+    }
+
     @Test
     public void twoLines_n_endsWith_r()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\nsecond\r");
         assertEquals(0, scan.numBackslashes);
         assertEquals(2, scan.numLines);
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
-        assertTrue(scan.needsFinalNewline);
+        assertFalse(scan.needsFinalNewline);
     }
 
     @Test
     public void twoLines_r_endsWith_r()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\rsecond\r");
         assertEquals(0, scan.numBackslashes);
-        assertEquals(1, scan.numLines);
+        assertEquals(2, scan.numLines);
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
-        assertTrue(scan.needsFinalNewline);
+        assertFalse(scan.needsFinalNewline);
     }
 
     @Test
     public void twoLines_rn_endsWith_n()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\r\nsecond\n");
@@ -271,65 +324,85 @@
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
         assertTrue(scan.needsFinalNewline);
     }
 
+    @Test
+    public void threeLines_n_endsWith_n()  {
+        TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\nsecond\nthird\n");
+        assertEquals(0, scan.numBackslashes);
+        assertEquals(3, scan.numLines);
+        assertEquals(0, scan.numNonASCII);
+        assertFalse(scan.needsEscape);
+        assertFalse(scan.needsFinalNewline);
+    }
+
     @Test
     public void threeLines_n_r()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\nsecond\rthird");
         assertEquals(0, scan.numBackslashes);
-        assertEquals(2, scan.numLines);
+        assertEquals(3, scan.numLines);
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
         assertTrue(scan.needsFinalNewline);
     }
 
     @Test
     public void threeLines_r_n()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\rsecond\nthird");
         assertEquals(0, scan.numBackslashes);
-        assertEquals(2, scan.numLines);
+        assertEquals(3, scan.numLines);
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
         assertTrue(scan.needsFinalNewline);
     }
 
     @Test
     public void threeLines_r_n_endsWith_r()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\rsecond\nthird\r");
         assertEquals(0, scan.numBackslashes);
-        assertEquals(2, scan.numLines);
+        assertEquals(3, scan.numLines);
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
-        assertTrue(scan.needsFinalNewline);
+        assertFalse(scan.needsFinalNewline);
     }
 
     @Test
     public void threeLines_r_n_endsWith_n()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\rsecond\nthird\n");
         assertEquals(0, scan.numBackslashes);
-        assertEquals(2, scan.numLines);
+        assertEquals(3, scan.numLines);
+        assertEquals(0, scan.numNonASCII);
+        assertFalse(scan.needsEscape);
+        assertFalse(scan.needsFinalNewline);
+    }
+
+    @Test
+    public void threeLines_n_n_endsWith_n()  {
+        TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\rsecond\nthird\n");
+        assertEquals(0, scan.numBackslashes);
+        assertEquals(3, scan.numLines);
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
         assertFalse(scan.needsFinalNewline);
     }
 
     @Test
     public void threeLines_r_n_endsWith_rn()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\rsecond\nthird\r\n");
         assertEquals(0, scan.numBackslashes);
-        assertEquals(2, scan.numLines);
+        assertEquals(3, scan.numLines);
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
         assertFalse(scan.needsFinalNewline);
     }
 
     @Test
     public void threeLines_r_r()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\rsecond\rthird");
         assertEquals(0, scan.numBackslashes);
-        assertEquals(1, scan.numLines);
+        assertEquals(3, scan.numLines);
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
         assertTrue(scan.needsFinalNewline);
     }
 
@@ -355,11 +428,21 @@
 
     @Test
     public void threeLines_rn_r()  {
         TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\r\nsecond\rthird");
         assertEquals(0, scan.numBackslashes);
-        assertEquals(2, scan.numLines);
+        assertEquals(3, scan.numLines);
+        assertEquals(0, scan.numNonASCII);
+        assertFalse(scan.needsEscape);
+        assertTrue(scan.needsFinalNewline);
+    }
+
+    @Test
+    public void fourLines_nr_r()  {
+        TestResult.TextScanResult scan = TestResult.TextScanResult.scan("first\n\rsecond\rthird");
+        assertEquals(0, scan.numBackslashes);
+        assertEquals(4, scan.numLines);
         assertEquals(0, scan.numNonASCII);
         assertFalse(scan.needsEscape);
         assertTrue(scan.needsFinalNewline);
     }
 
