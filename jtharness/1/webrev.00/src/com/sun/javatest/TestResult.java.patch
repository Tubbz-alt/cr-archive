diff a/src/com/sun/javatest/TestResult.java b/src/com/sun/javatest/TestResult.java
--- a/src/com/sun/javatest/TestResult.java
+++ b/src/com/sun/javatest/TestResult.java
@@ -2812,14 +2812,16 @@
             tsr.numBackslashes = 0;
             tsr.numNonASCII = 0;
             tsr.needsFinalNewline = false;
 
             // scan for newlines and characters requiring escapes
+            int lastCharPos = text.length() - 1;
             for (int i = 0; i < text.length(); i++) {
                 char c = text.charAt(i);
-                if (c < 32) {
-                    if (c == '\n') {
+                char nextChar = (i == lastCharPos) ? 0 : text.charAt(i + 1);
+                if (c < 32) {   // if it's "\r\n" sep we skip the \r and would count only the \n on the next step
+                    if ((c == '\n') || (c == '\r' && nextChar != '\n')) {
                         tsr.numLines++;
                     } else if (c != '\t' && c != '\r') {
                         tsr.numNonASCII++;
                     }
                 } else if (c < 127) {
@@ -2835,11 +2837,11 @@
 
             // Check the text ends with a final newline ('\n', not line.separator)
             // Note this must match the check when reading the text back in,
             // when we also check for just '\n' and not line.separator, because
             // line.separator now, and line.separator then, might be different.
-            if (!text.isEmpty() && !text.endsWith("\n")) {
+            if (!text.isEmpty() && !text.endsWith("\n") && !text.endsWith("\r") && !text.endsWith("\r\n")) {
                 tsr.needsFinalNewline = true;
                 tsr.numLines++;
             }
             return tsr;
         }
