diff a/src/com/sun/javatest/exec/BasicSession.java b/src/com/sun/javatest/exec/BasicSession.java
--- a/src/com/sun/javatest/exec/BasicSession.java
+++ b/src/com/sun/javatest/exec/BasicSession.java
@@ -36,10 +36,12 @@
 import com.sun.javatest.util.I18NResourceBundle;
 
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Logger;
 
 /**
@@ -222,19 +224,19 @@
             return (int) (order1 - order2); // long is used to avoid overflow
         });
         isSorted = true;
     }
 
-    public TestFilter getTestFilter(String name) {
+    public List<TestFilter> getTestFilter(String name) {
         if (config == null) {
             throw new IllegalStateException(i18n.getString("bc.configNotReady.err"));
         }
-        TestFilter tf;
+        List<TestFilter> filters;
         if (filterNames.contains(name)) {
-            tf = findFilter(name);
-            if (tf != null) {
-                return tf;
+            filters = findFilter(name);
+            if (!filters.isEmpty()) {
+                return filters;
             }
         }
         throw new IllegalArgumentException(i18n.getString("bc.unknownFilter.err", name));
     }
 
@@ -242,21 +244,21 @@
      * Supposed to be overridden when extra filters added
      *
      * @param name
      * @return found filter or null, if not found.
      */
-    protected TestFilter findFilter(String name) {
+    protected List<TestFilter> findFilter(String name) {
         if (EL_FILTER.equals(name)) {
-            return config.getExcludeListFilter();
+            return Arrays.asList(config.getExcludeListFilter());
         } else if (KWD_FILTER.equals(name)) {
-            return config.getKeywordsFilter();
+            return Arrays.asList(config.getKeywordsFilter());
         } else if (PRIOR_FILTER.equals(name)) {
-            return config.getPriorStatusFilter();
+            return Arrays.asList(config.getPriorStatusFilter());
         } else if (RELEVANT_FILTER.equals(name)) {
-            return config.getRelevantTestFilter();
+            return config.getAllRelevantFiltersInTheSuite();
         }
-        return null;
+        return Collections.emptyList();
     }
 
     public List<String> getTestFilterNames() {
         return filterNames;
     }
