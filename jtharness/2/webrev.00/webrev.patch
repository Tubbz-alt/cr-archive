diff a/src/com/sun/javatest/BasicParameters.java b/src/com/sun/javatest/BasicParameters.java
--- a/src/com/sun/javatest/BasicParameters.java
+++ b/src/com/sun/javatest/BasicParameters.java
@@ -837,14 +837,11 @@
         TestFilter statusFilter = getPriorStatusFilter();
         if (statusFilter != null) {
             v.add(statusFilter);
         }
 
-        TestFilter testSuiteFilter = getRelevantTestFilter();
-        if (testSuiteFilter != null) {
-            v.add(testSuiteFilter);
-        }
+        v.addAll(getAllRelevantFiltersInTheSuite());
 
         if (v.isEmpty()) {
             return null;
         } else if (equal(v, cachedTestFilters)) {
             return cachedTestFilters;
diff a/src/com/sun/javatest/InterviewParameters.java b/src/com/sun/javatest/InterviewParameters.java
--- a/src/com/sun/javatest/InterviewParameters.java
+++ b/src/com/sun/javatest/InterviewParameters.java
@@ -1022,19 +1022,11 @@
         TestFilter statusFilter = getPriorStatusFilter();
         if (statusFilter != null) {
             v.add(statusFilter);
         }
 
-        TestFilter testSuiteFilter = null;
-        try {
-            testSuiteFilter = getRelevantTestFilter();
-        } catch (Exception e) {
-            testSuiteFilter = null;
-        }
-        if (testSuiteFilter != null) {
-            v.add(testSuiteFilter);
-        }
+        v.addAll(getAllRelevantFiltersInTheSuite());
 
         if (v.isEmpty()) {
             return null;
         } else if (equal(v, cachedTestFilters)) {
             return cachedTestFilters;
diff a/src/com/sun/javatest/Parameters.java b/src/com/sun/javatest/Parameters.java
--- a/src/com/sun/javatest/Parameters.java
+++ b/src/com/sun/javatest/Parameters.java
@@ -25,10 +25,12 @@
  * questions.
  */
 package com.sun.javatest;
 
 import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
 
 
 /**
  * Configuration parameters for a test run. Methods are provided
  * to access the parameters, and to access objects which contain
@@ -244,33 +246,54 @@
      * @see #getPriorStatusValues
      */
     TestFilter getPriorStatusFilter();
 
     /**
-     * Get a test-suite specific filter which will filter tests according
-     * to test-suite-specific criteria, as perhaps determined by
+     * Get test-suite specific filters which will filter tests according
+     * to test-suite-specific criterias, as perhaps determined by
      * a configuration interview. For example, if the platform being tested
      * does not support some optional feature, the tests for that feature
      * could be automatically filtered out. If no such filter is required,
-     * null can be returned.
+     * empty collection can be returned.
      *
-     * @return a test-suite-specific filter, or null if no such filter is
+     * @return test-suite-specific filters, or empty collection if no such filter is
      * required.
      */
     TestFilter getRelevantTestFilter();
 
+    /**
+     * Get test-suite specific filters which will filter tests according
+     * to test-suite-specific criterias, as perhaps determined by
+     * a configuration interview. For example, if the platform being tested
+     * does not support some optional feature, the tests for that feature
+     * could be automatically filtered out. If no such filter is required,
+     * empty collection can be returned.
+     *
+     * @return test-suite-specific filters, or empty collection if no such filter is
+     * required.
+     */
+    default List<TestFilter> getAllRelevantFiltersInTheSuite() {
+        List<TestFilter> result = new ArrayList<>();
+        TestFilter relevantTestFilter = getRelevantTestFilter();
+        if (relevantTestFilter != null) {
+            result.add(relevantTestFilter);
+        }
+        result.addAll(getTestSuite().createTestFilters(getEnv()));
+        return result;
+    }
+
     /**
      * Get an array of the non-null filters returned from
      * getExcludeListFilter, getKeywordsFilter, getPriorStatusFilter,
      * and getRelevantTestFilter.
      *
      * @return an array of the non-null filters returned by the
      * various getXXXFilter methods.
      * @see #getExcludeListFilter
      * @see #getKeywordsFilter
      * @see #getPriorStatusFilter
-     * @see #getRelevantTestFilter
+     * @see #getRelevantTestFilters
      */
     TestFilter[] getFilters();
 
     /**
      * Determine whether all the configuration values are valid.
diff a/src/com/sun/javatest/TestSuite.java b/src/com/sun/javatest/TestSuite.java
--- a/src/com/sun/javatest/TestSuite.java
+++ b/src/com/sun/javatest/TestSuite.java
@@ -52,12 +52,15 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
+import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.Vector;
 import java.util.logging.Handler;
 import java.util.logging.Level;
 import java.util.logging.LogRecord;
@@ -552,15 +555,33 @@
      * The default is to return null.
      *
      * @param filterEnv Configuration data that may be used by the filter.
      * @return a test suite filter, or null if no test suite specific filter is
      * required for this test suite.
+     * @deprecated this method is deprecated, it is temporarily kept for easier migration
+     * of client subclasses that provide their implementaitons of this method.
+     * To do the migration please override {@code createAdditionalTestFilters} to return a collection of filters (even having one element).
+     * Both this method and {@code createAdditionalTestFilters} are called by the framework and taken into account.
      */
+    @java.lang.Deprecated
     public TestFilter createTestFilter(TestEnvironment filterEnv) {
         return null;
     }
 
+    /**
+     * Create test suite specific filters to be used to filter the tests for a test run.
+     * The method should return empty collection if no test suite specific filtering is required.
+     * Default implementation of this method returns an empty collection.
+     * Both this method and {@code createTestFilter} are called by the framework and taken into account.
+     *
+     * @param filterEnv Configuration data that may be used by the filters.
+     * @return collection of test suite filters (if there are any)
+     */
+    public List<TestFilter> createTestFilters(TestEnvironment filterEnv) {
+        return Collections.emptyList();
+    }
+
     /**
      * Get a shared test finder to read the tests in this test suite.
      *
      * @return a test finder to read the tests in this test suite
      * @see #createTestFinder
diff a/src/com/sun/javatest/exec/BasicSession.java b/src/com/sun/javatest/exec/BasicSession.java
--- a/src/com/sun/javatest/exec/BasicSession.java
+++ b/src/com/sun/javatest/exec/BasicSession.java
@@ -36,10 +36,12 @@
 import com.sun.javatest.util.I18NResourceBundle;
 
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Logger;
 
 /**
@@ -222,19 +224,19 @@
             return (int) (order1 - order2); // long is used to avoid overflow
         });
         isSorted = true;
     }
 
-    public TestFilter getTestFilter(String name) {
+    public List<TestFilter> getTestFilter(String name) {
         if (config == null) {
             throw new IllegalStateException(i18n.getString("bc.configNotReady.err"));
         }
-        TestFilter tf;
+        List<TestFilter> filters;
         if (filterNames.contains(name)) {
-            tf = findFilter(name);
-            if (tf != null) {
-                return tf;
+            filters = findFilter(name);
+            if (!filters.isEmpty()) {
+                return filters;
             }
         }
         throw new IllegalArgumentException(i18n.getString("bc.unknownFilter.err", name));
     }
 
@@ -242,21 +244,21 @@
      * Supposed to be overridden when extra filters added
      *
      * @param name
      * @return found filter or null, if not found.
      */
-    protected TestFilter findFilter(String name) {
+    protected List<TestFilter> findFilter(String name) {
         if (EL_FILTER.equals(name)) {
-            return config.getExcludeListFilter();
+            return Arrays.asList(config.getExcludeListFilter());
         } else if (KWD_FILTER.equals(name)) {
-            return config.getKeywordsFilter();
+            return Arrays.asList(config.getKeywordsFilter());
         } else if (PRIOR_FILTER.equals(name)) {
-            return config.getPriorStatusFilter();
+            return Arrays.asList(config.getPriorStatusFilter());
         } else if (RELEVANT_FILTER.equals(name)) {
-            return config.getRelevantTestFilter();
+            return config.getAllRelevantFiltersInTheSuite();
         }
-        return null;
+        return Collections.emptyList();
     }
 
     public List<String> getTestFilterNames() {
         return filterNames;
     }
diff a/src/com/sun/javatest/exec/ET_FilterHandler.java b/src/com/sun/javatest/exec/ET_FilterHandler.java
--- a/src/com/sun/javatest/exec/ET_FilterHandler.java
+++ b/src/com/sun/javatest/exec/ET_FilterHandler.java
@@ -49,10 +49,11 @@
 import javax.swing.JOptionPane;
 import javax.swing.JPanel;
 import javax.swing.JTextArea;
 import java.awt.BorderLayout;
 import java.awt.EventQueue;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.Vector;
@@ -77,11 +78,11 @@
     // filters
     private LastRunFilter ltrFilter;        // last test run
     private ParameterFilter paramFilter;    // current param filter
     private BasicCustomTestFilter bctf;     // "custom" filter
     private AllTestsFilter allFilter;
-    private TestFilter certFilter;          // "certification" filter
+    private Collection<TestFilter> certFilters;          // "certification" filters
     // custom filter info
     private TestSuite lastTs;
 
     ET_FilterHandler(JComponent parent, ExecModel model, Harness h, UIFactory uif,
                      Map<String, String> map) {
@@ -217,43 +218,46 @@
             return;
         }
 
         paramFilter.update(ips);
 
-        TestFilter newCertFilter = ips.getRelevantTestFilter();
+        List<TestFilter> newCertFilters = ips.getAllRelevantFiltersInTheSuite();
+
         // check for filter behavior equality
-        if (newCertFilter == null) {
-            if (certFilter != null) {
+        if (newCertFilters.isEmpty()) {
+            if (certFilters != null) {
                 // we had a certification filter earlier, now it is gone
-                if (fHandler.getActiveFilter() == certFilter) {
+                if (certFilters.contains(fHandler.getActiveFilter())) {
                     // switch to another filter before removing
                     // XXX may want to notify user!
                     fHandler.setFilter(paramFilter);
                 }
 
-                fConfig.remove(certFilter);
+                certFilters.forEach(fConfig::remove);
             } else {
                 // FilterConfig is clean
             }
         }   // outer if
-        else if (!newCertFilter.equals(certFilter)) {
+        else if (!newCertFilters.equals(certFilters)) {
             // check for reference equality
-            if (newCertFilter == certFilter) {
+            if (newCertFilters == certFilters) {
                 // this is ignored by fConfig if it is not relevant
-                fConfig.notifyUpdated(certFilter);
+                certFilters.forEach(fConfig::notifyUpdated);
             } else {
                 // rm old one, put in new one
-                fConfig.add(newCertFilter);
+                newCertFilters.forEach(fConfig::add);
 
-                if (fHandler.getActiveFilter() == certFilter) {
+                if (certFilters.contains(fHandler.getActiveFilter())) {
                     // switch to another filter before removing
                     // XXX may want to notify user!
-                    fHandler.setFilter(newCertFilter);
+                    if ( !newCertFilters.isEmpty()) {
+                        fHandler.setFilter(newCertFilters.get(0));
+                    }
                 }
 
-                fConfig.remove(certFilter);
-                certFilter = newCertFilter;
+                certFilters.forEach(fConfig::remove);
+                certFilters = newCertFilters;
             }
         } else {
             // filter is the same
         }
     }
