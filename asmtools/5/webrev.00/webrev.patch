diff a/build/build.xml b/build/build.xml
--- a/build/build.xml
+++ b/build/build.xml
@@ -254,11 +254,14 @@
             target="1.8"
             source="1.8"
             srcdir="${build.src.classes.dir}"
             destdir="${build.classes.dir}"
             debug="${javac.debug}"
-            verbose="${javac.verbose}" deprecation="${javac.deprecation}"
+            verbose="${javac.verbose}"
+            deprecation="${javac.deprecation}"
+            encoding="UTF8"
+            includeantruntime="false"
             classpathref="compileClassPath">
         </javac>
         <copy todir="${build.classes.dir}">
             <fileset dir="${build.src.classes.dir}" excludes="**/*.java" />
         </copy>
@@ -296,10 +299,11 @@
         <javadoc
                 sourcepath="${build.src.classes.dir}"
                 destdir="${build.javadoc.dir}"
                 author="false"
                 version="false"
+                Encoding="UTF8"
                 additionalparam="-breakiterator -Xdoclint:none"
         >
             <classpath>
                 <path path="${javac.classpath}"/>
             </classpath>
diff a/src/org/openjdk/asmtools/jasm/Environment.java b/src/org/openjdk/asmtools/jasm/Environment.java
--- a/src/org/openjdk/asmtools/jasm/Environment.java
+++ b/src/org/openjdk/asmtools/jasm/Environment.java
@@ -25,10 +25,11 @@
 import static org.openjdk.asmtools.jasm.Constants.EOF;
 import static org.openjdk.asmtools.jasm.Constants.OFFSETBITS;
 import org.openjdk.asmtools.util.I18NResourceBundle;
 
 import java.io.*;
+import java.nio.file.Paths;
 import java.text.MessageFormat;
 
 /**
  * An input stream for java programs. The stream treats either "\n", "\r" or "\r\n" as the
  * end of a line, it always returns \n. It also parses UNICODE characters expressed as
@@ -92,13 +93,11 @@
         return inputFileName;
     }
 
     public String getSimpleInputFileName() {
         if( simpleInputFileName == null ) {
-            char separatorChar = (inputFileName.matches("^[A-Za-z]+:.*")) ? '/' : File.separatorChar;
-            int index = inputFileName.lastIndexOf(separatorChar);
-            simpleInputFileName = (index < 0) ? inputFileName.substring(0) : inputFileName.substring(index + 1);
+            simpleInputFileName = Paths.get(inputFileName).getFileName().toString();
         }
         return simpleInputFileName;
     }
 
     int lookForward() {
diff a/src/org/openjdk/asmtools/jasm/Parser.java b/src/org/openjdk/asmtools/jasm/Parser.java
--- a/src/org/openjdk/asmtools/jasm/Parser.java
+++ b/src/org/openjdk/asmtools/jasm/Parser.java
@@ -365,22 +365,22 @@
     ConstCell parseMethodHandle(SubTag subtag) throws Scanner.SyntaxError, IOException {
         ConstCell refCell;
         switch (subtag) {
             // If the value of the reference_kind item is
             // 1 (REF_getField), 2 (REF_getStatic), 3 (REF_putField)  or 4 (REF_putStatic),
-            // then the constant_pool entry at that index must be a CONSTANT_Fieldref_info structure (ยง4.4.2)
+            // then the constant_pool entry at that index must be a CONSTANT_Fieldref_info structure (4.4.2)
             // representing a field for which a method handle is to be created. jvms-4.4.8-200-C-A
             case REF_GETFIELD:
             case REF_GETSTATIC:
             case REF_PUTFIELD:
             case REF_PUTSTATIC:
                 refCell = pool.FindCell(cpParser.parseConstValue(ConstType.CONSTANT_FIELD));
                 break;
             //  If the value of the reference_kind item is
             //  5 (REF_invokeVirtual) or 8 (REF_newInvokeSpecial),
-            //  then the constant_pool entry at that index must be a CONSTANT_Methodref_info structure (ยง4.4.2)
-            //  representing a class's method or constructor (ยง2.9.1) for which a method handle is to be created.
+            //  then the constant_pool entry at that index must be a CONSTANT_Methodref_info structure (4.4.2)
+            //  representing a class's method or constructor (2.9.1) for which a method handle is to be created.
             //  jvms-4.4.8-200-C-B
             case REF_INVOKEVIRTUAL:
             case REF_NEWINVOKESPECIAL:
                 refCell = pool.FindCell(cpParser.parseConstValue(ConstType.CONSTANT_METHOD));
                 break;
@@ -393,11 +393,11 @@
                 // The constant_pool entry at that index must be as follows:
                 // If the value of the reference_kind item is 6 (REF_invokeStatic) or 7 (REF_invokeSpecial),
                 // then if the class file version number is less than 52.0, the constant_pool entry at that index must be
                 // a CONSTANT_Methodref_info structure representing a class's method for which a method handle is to be created;
                 // if the class file version number is 52.0 or above, the constant_pool entry at that index must be
-                // either a CONSTANT_Methodref_info structure or a CONSTANT_InterfaceMethodref_info structure (ยง4.4.2)
+                // either a CONSTANT_Methodref_info structure or a CONSTANT_InterfaceMethodref_info structure (4.4.2)
                 // representing a class's or interface's method for which a method handle is to be created.
                 ConstType ctype01 = ConstType.CONSTANT_METHOD;
                 ConstType ctype02 = ConstType.CONSTANT_INTERFACEMETHOD;
                 if (this.cd.cfv.major_version() >= 52 && Modifiers.isInterface(this.cd.access)) {
                     ctype01 = ConstType.CONSTANT_INTERFACEMETHOD;
