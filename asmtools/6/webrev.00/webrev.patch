diff a/build/build.xml b/build/build.xml
--- a/build/build.xml
+++ b/build/build.xml
@@ -254,11 +254,14 @@
             target="1.8"
             source="1.8"
             srcdir="${build.src.classes.dir}"
             destdir="${build.classes.dir}"
             debug="${javac.debug}"
-            verbose="${javac.verbose}" deprecation="${javac.deprecation}"
+            verbose="${javac.verbose}"
+            deprecation="${javac.deprecation}"
+            encoding="UTF8"
+            includeantruntime="false"
             classpathref="compileClassPath">
         </javac>
         <copy todir="${build.classes.dir}">
             <fileset dir="${build.src.classes.dir}" excludes="**/*.java" />
         </copy>
@@ -296,10 +299,11 @@
         <javadoc
                 sourcepath="${build.src.classes.dir}"
                 destdir="${build.javadoc.dir}"
                 author="false"
                 version="false"
+                Encoding="UTF8"
                 additionalparam="-breakiterator -Xdoclint:none"
         >
             <classpath>
                 <path path="${javac.classpath}"/>
             </classpath>
diff a/build/productinfo.properties b/build/productinfo.properties
--- a/build/productinfo.properties
+++ b/build/productinfo.properties
@@ -24,8 +24,8 @@
 # Path to JDK will be used to compile sources
 # Product info
 PRODUCT_NAME        = asmtools
 PRODUCT_JAR_NAME    = asmtools.jar
 PRODUCT_VERSION     = 7.0
-PRODUCT_MILESTONE   = beta
-PRODUCT_BUILDNUMBER = b02
+PRODUCT_MILESTONE   = ea
+PRODUCT_BUILDNUMBER = b09
 PRODUCT_NAME_LONG   = Java Assembler Tools
diff a/src/org/openjdk/asmtools/jasm/ClassArrayAttr.java b/src/org/openjdk/asmtools/jasm/ClassArrayAttr.java
--- a/src/org/openjdk/asmtools/jasm/ClassArrayAttr.java
+++ b/src/org/openjdk/asmtools/jasm/ClassArrayAttr.java
@@ -35,15 +35,15 @@
  * u2 number_of_classes;
  * u2 classes[number_of_classes];
  * }
  * <p>
  * JEP 360 (Sealed types): class file 59.65535
- * PermittedSubtypes_attribute {
+ * PermittedSubclasses_attribute {
  * u2 attribute_name_index;
  * u4 attribute_length;
- * u2 permitted_subtypes_count;
- * u2 classes[permitted_subtypes_count];
+ * u2 number_of_classes;
+ * u2 classes[number_of_classes];
  * }
  */
 public class ClassArrayAttr extends AttrData {
 
     List<ConstantPool.ConstCell> classes;
diff a/src/org/openjdk/asmtools/jasm/ClassData.java b/src/org/openjdk/asmtools/jasm/ClassData.java
--- a/src/org/openjdk/asmtools/jasm/ClassData.java
+++ b/src/org/openjdk/asmtools/jasm/ClassData.java
@@ -53,12 +53,12 @@
     NestMembersAttr nestMembersAttr;
 
     // JEP 359 - Record attribute since class file 58.65535
     private RecordData recordData;
 
-    // JEP 360 - PermittedSubtypes attribute since class file 59.65535
-    private PermittedTypesAttr permittedTypesAttr;
+    // JEP 360 - PermittedSubclasses attribute since class file 59.65535
+    private PermittedSubclassesAttr permittedSubclassesAttr;
 
     ModuleAttr moduleAttribute = null;
     Environment env;
     protected ConstantPool pool;
 
@@ -309,13 +309,13 @@
     public void addNestMembers(List<ConstantPool.ConstCell> classes) {
         env.traceln("addNestMembers");
         nestMembersAttr = new NestMembersAttr(this, classes);
     }
 
-    public void addPermittedSubtypes(List<ConstantPool.ConstCell> classes) {
-        env.traceln("addPermittedSubtypes");
-        permittedTypesAttr = new PermittedTypesAttr(this, classes);
+    public void addPermittedSubclasses(List<ConstantPool.ConstCell> classes) {
+        env.traceln("addPermittedSubclasses");
+        permittedSubclassesAttr = new PermittedSubclassesAttr(this, classes);
     }
 
 
     public void endClass() {
         sourceFileNameAttr = new CPXAttr(this,
@@ -457,12 +457,12 @@
             if(nestHostAttributeExists())
                 attrs.add(nestHostAttr);
             if(nestMembersAttributesExist())
                 attrs.add(nestMembersAttr);
             // since class version 59.65535 (JEP 360)
-            if ( permittedSubtypesAttributesExist() )
-                attrs.add(permittedTypesAttr);
+            if ( permittedSubclassesAttributesExist() )
+                attrs.add(permittedSubclassesAttr);
         }
         return attrs;
     }
 
     static char fileSeparator; //=System.getProperty("file.separator");
@@ -513,11 +513,11 @@
         return nestHostAttr != null;
     }
 
     public boolean nestMembersAttributesExist() { return nestMembersAttr != null;  }
 
-    public boolean permittedSubtypesAttributesExist() { return permittedTypesAttr != null;  }
+    public boolean permittedSubclassesAttributesExist() { return permittedSubclassesAttr != null;  }
 
     public boolean recordAttributeExists() { return recordData != null;  }
 
     /**
      * This is a wrapper for DataOutputStream, used for debugging purposes. it allows
diff a/src/org/openjdk/asmtools/jasm/Environment.java b/src/org/openjdk/asmtools/jasm/Environment.java
--- a/src/org/openjdk/asmtools/jasm/Environment.java
+++ b/src/org/openjdk/asmtools/jasm/Environment.java
@@ -25,10 +25,11 @@
 import static org.openjdk.asmtools.jasm.Constants.EOF;
 import static org.openjdk.asmtools.jasm.Constants.OFFSETBITS;
 import org.openjdk.asmtools.util.I18NResourceBundle;
 
 import java.io.*;
+import java.nio.file.Paths;
 import java.text.MessageFormat;
 
 /**
  * An input stream for java programs. The stream treats either "\n", "\r" or "\r\n" as the
  * end of a line, it always returns \n. It also parses UNICODE characters expressed as
@@ -92,13 +93,11 @@
         return inputFileName;
     }
 
     public String getSimpleInputFileName() {
         if( simpleInputFileName == null ) {
-            char separatorChar = (inputFileName.matches("^[A-Za-z]+:.*")) ? '/' : File.separatorChar;
-            int index = inputFileName.lastIndexOf(separatorChar);
-            simpleInputFileName = (index < 0) ? inputFileName.substring(0) : inputFileName.substring(index + 1);
+            simpleInputFileName = Paths.get(inputFileName).getFileName().toString();
         }
         return simpleInputFileName;
     }
 
     int lookForward() {
diff a/src/org/openjdk/asmtools/jasm/JasmTokens.java b/src/org/openjdk/asmtools/jasm/JasmTokens.java
--- a/src/org/openjdk/asmtools/jasm/JasmTokens.java
+++ b/src/org/openjdk/asmtools/jasm/JasmTokens.java
@@ -378,11 +378,11 @@
         NESTMEMBERS         (174, "NESTMEMBERS",    "NestMembers",      EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.MODULE_NAME ), KeywordType.KEYWORD),
         //
         RECORD              (175, "RECORD",    "Record",                EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.MODULE_NAME ), KeywordType.KEYWORD),
         COMPONENT           (176, "COMPONENT", "Component",             EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.MODULE_NAME ), KeywordType.KEYWORD),
         //
-        PERMITTEDSUBTYPES   (177, "PERMITTEDSUBTYPES", "PermittedSubtypes", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.MODULE_NAME ), KeywordType.KEYWORD),
+        PERMITTEDSUBCLASSES (177, "PERMITTEDSUBCLASSES", "PermittedSubclasses", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.MODULE_NAME ), KeywordType.KEYWORD),
 
         //Module statements
         REQUIRES            (180, "REQUIRES", "requires", EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.MODULE_NAME ), KeywordType.KEYWORD),
         EXPORTS             (182, "EXPORTS",  "exports",  EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.MODULE_NAME ), KeywordType.KEYWORD),
         TO                  (183, "TO",       "to",       EnumSet.of(TokenType.DECLARATION, TokenType.JASM_IDENT, TokenType.MODULE_NAME ), KeywordType.KEYWORD),
diff a/src/org/openjdk/asmtools/jasm/Parser.java b/src/org/openjdk/asmtools/jasm/Parser.java
--- a/src/org/openjdk/asmtools/jasm/Parser.java
+++ b/src/org/openjdk/asmtools/jasm/Parser.java
@@ -330,11 +330,11 @@
 
             case ARRAY_TYPEPATH:
             case INNER_TYPE_TYPEPATH:
             case WILDCARD_TYPEPATH:
             case TYPE_ARGUMENT_TYPEPATH:
-            case PERMITTEDSUBTYPES:
+            case PERMITTEDSUBCLASSES:
             case INF:
             case NAN:
             case COMPONENT:
 
             case SYNTHETIC:
@@ -365,22 +365,22 @@
     ConstCell parseMethodHandle(SubTag subtag) throws Scanner.SyntaxError, IOException {
         ConstCell refCell;
         switch (subtag) {
             // If the value of the reference_kind item is
             // 1 (REF_getField), 2 (REF_getStatic), 3 (REF_putField)  or 4 (REF_putStatic),
-            // then the constant_pool entry at that index must be a CONSTANT_Fieldref_info structure (ยง4.4.2)
+            // then the constant_pool entry at that index must be a CONSTANT_Fieldref_info structure (4.4.2)
             // representing a field for which a method handle is to be created. jvms-4.4.8-200-C-A
             case REF_GETFIELD:
             case REF_GETSTATIC:
             case REF_PUTFIELD:
             case REF_PUTSTATIC:
                 refCell = pool.FindCell(cpParser.parseConstValue(ConstType.CONSTANT_FIELD));
                 break;
             //  If the value of the reference_kind item is
             //  5 (REF_invokeVirtual) or 8 (REF_newInvokeSpecial),
-            //  then the constant_pool entry at that index must be a CONSTANT_Methodref_info structure (ยง4.4.2)
-            //  representing a class's method or constructor (ยง2.9.1) for which a method handle is to be created.
+            //  then the constant_pool entry at that index must be a CONSTANT_Methodref_info structure (4.4.2)
+            //  representing a class's method or constructor (2.9.1) for which a method handle is to be created.
             //  jvms-4.4.8-200-C-B
             case REF_INVOKEVIRTUAL:
             case REF_NEWINVOKESPECIAL:
                 refCell = pool.FindCell(cpParser.parseConstValue(ConstType.CONSTANT_METHOD));
                 break;
@@ -393,11 +393,11 @@
                 // The constant_pool entry at that index must be as follows:
                 // If the value of the reference_kind item is 6 (REF_invokeStatic) or 7 (REF_invokeSpecial),
                 // then if the class file version number is less than 52.0, the constant_pool entry at that index must be
                 // a CONSTANT_Methodref_info structure representing a class's method for which a method handle is to be created;
                 // if the class file version number is 52.0 or above, the constant_pool entry at that index must be
-                // either a CONSTANT_Methodref_info structure or a CONSTANT_InterfaceMethodref_info structure (ยง4.4.2)
+                // either a CONSTANT_Methodref_info structure or a CONSTANT_InterfaceMethodref_info structure (4.4.2)
                 // representing a class's or interface's method for which a method handle is to be created.
                 ConstType ctype01 = ConstType.CONSTANT_METHOD;
                 ConstType ctype02 = ConstType.CONSTANT_INTERFACEMETHOD;
                 if (this.cd.cfv.major_version() >= 52 && Modifiers.isInterface(this.cd.access)) {
                     ctype01 = ConstType.CONSTANT_INTERFACEMETHOD;
@@ -464,11 +464,11 @@
 
             case ARRAY_TYPEPATH:
             case INNER_TYPE_TYPEPATH:
             case WILDCARD_TYPEPATH:
             case TYPE_ARGUMENT_TYPEPATH:
-            case PERMITTEDSUBTYPES:
+            case PERMITTEDSUBCLASSES:
             case INF:
             case NAN:
             case COMPONENT:
 
             case SYNTHETIC:
@@ -963,17 +963,17 @@
         scanner.expect(SEMICOLON);
         cd.addNestHost(hostClass);
     }
 
     /**
-     * Parse a list of classes belonging to the [NestMembers | PermittedSubtypes]  entry
+     * Parse a list of classes belonging to the [NestMembers | PermittedSubclasses]  entry
      */
     private void parseClasses(Consumer<ArrayList<ConstCell>> classesConsumer)
             throws Scanner.SyntaxError, IOException {
         ArrayList<ConstCell> classes = new ArrayList<>();
         // Parses in the form:
-        // (NESTMEMBERS|PERMITTEDSUBTYPES)? IDENT(, IDENT)*;
+        // (NESTMEMBERS|PERMITTEDSUBCLASSES)? IDENT(, IDENT)*;
         debugStr("  [Parser.parseClasses]: <<<Begin>>>");
         while (true) {
             String className = prependPackage(parseIdent(), true);
             classes.add(pool.FindCellClassByName(className));
             debugScan("  [Parser.parseClasses]: class " + className);
@@ -1755,17 +1755,17 @@
                         throw new Scanner.SyntaxError();
                     }
                     scanner.scan();
                     parseClasses(list -> cd.addNestMembers(list));
                     break;
-                case PERMITTEDSUBTYPES:         // JEP 360
+                case PERMITTEDSUBCLASSES:         // JEP 360
                     if (cd.nestMembersAttributesExist()) {
-                        env.error(scanner.pos, "extra.permittedsubtypes.attribute");
+                        env.error(scanner.pos, "extra.permittedsubclasses.attribute");
                         throw new Scanner.SyntaxError();
                     }
                     scanner.scan();
-                    parseClasses(list -> cd.addPermittedSubtypes(list));
+                    parseClasses(list -> cd.addPermittedSubclasses(list));
                     break;
                 case RECORD:                    // JEP 359
                     if (cd.recordAttributeExists()) {
                         env.error(scanner.pos, "extra.record.attribute");
                         throw new Scanner.SyntaxError();
diff a/src/org/openjdk/asmtools/jasm/PermittedSubclassesAttr.java b/src/org/openjdk/asmtools/jasm/PermittedSubclassesAttr.java
--- /dev/null
+++ b/src/org/openjdk/asmtools/jasm/PermittedSubclassesAttr.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.asmtools.jasm;
+
+import java.util.List;
+
+/**
+ * The "classes[]" data of attributes
+ * JEP 360 (Sealed types): class file 59.65535
+ * PermittedSubclasses_attribute {
+ * u2 attribute_name_index;
+ * u4 attribute_length;
+ * u2 number_of_classes;
+ * u2 classes[number_of_classes];
+ * }
+ */
+public class PermittedSubclassesAttr extends ClassArrayAttr {
+    public PermittedSubclassesAttr(ClassData cdata, List<ConstantPool.ConstCell> classes) {
+        super(Tables.AttrTag.ATT_PermittedSubclasses.parsekey(), cdata, classes);
+    }
+}
diff a/src/org/openjdk/asmtools/jasm/PermittedTypesAttr.java b/src/org/openjdk/asmtools/jasm/PermittedTypesAttr.java
--- a/src/org/openjdk/asmtools/jasm/PermittedTypesAttr.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.asmtools.jasm;
-
-import java.util.List;
-
-/**
- * The "classes[]" data of attributes
- * JEP 360 (Sealed types): class file 59.65535
- * PermittedSubtypes_attribute {
- * u2 attribute_name_index;
- * u4 attribute_length;
- * u2 permitted_subtypes_count;
- * u2 classes[permitted_subtypes_count];
- * }
- */
-public class PermittedTypesAttr extends ClassArrayAttr {
-    public PermittedTypesAttr(ClassData cdata, List<ConstantPool.ConstCell> classes) {
-        super(Tables.AttrTag.ATT_PermittedSubtypes.parsekey(), cdata, classes);
-    }
-}
diff a/src/org/openjdk/asmtools/jasm/Tables.java b/src/org/openjdk/asmtools/jasm/Tables.java
--- a/src/org/openjdk/asmtools/jasm/Tables.java
+++ b/src/org/openjdk/asmtools/jasm/Tables.java
@@ -227,17 +227,17 @@
         //    u2 components_count;
         //    component_info components[components_count];
         // }
         ATT_Record                                  (34, "ATT_Record", "Record"),
         // JEP 360 (Sealed types): class file 59.65535
-        // PermittedSubtypes_attribute {
+        // PermittedSubclasses_attribute {
         //    u2 attribute_name_index;
         //    u4 attribute_length;
-        //    u2 permitted_subtypes_count;
-        //    u2 classes[permitted_subtypes_count];
+        //    u2 number_of_classes;
+        //    u2 classes[number_of_classes];
         // }
-        ATT_PermittedSubtypes                       (35, "ATT_PermittedSubtypes", "PermittedSubtypes");
+        ATT_PermittedSubclasses                       (35, "ATT_PermittedSubclasses", "PermittedSubclasses");
 
         private final Integer value;
         private final String printval;
         private final String parsekey;
 
diff a/src/org/openjdk/asmtools/jasm/i18n.properties b/src/org/openjdk/asmtools/jasm/i18n.properties
--- a/src/org/openjdk/asmtools/jasm/i18n.properties
+++ b/src/org/openjdk/asmtools/jasm/i18n.properties
@@ -77,11 +77,11 @@
 err.field.expected=Field, Method, NestMembers, NestHost or Record declaration expected.
 err.token.expected={0} expected.
 err.identifier.expected=Identifier expected.
 err.extra.nesthost.attribute=There may be at most one NestHost attribute.
 err.extra.nestmembers.attribute=There may be at most one NestMembers attribute.
-err.extra.permittedsubtypes.attribute=There may be at most one PermittedSubtypes attribute.
+err.extra.permittedsubclasses.attribute=There may be at most one PermittedSubclasses attribute.
 err.extra.record.attribute=There may be at most one Record attribute.
 err.grouped.component.expected=Either an annotation or a record component expected.
 warn.no.components.in.record.attribute=Record should have at least one component.
 err.one.of.two.token.expected=Either #{0} or #{1} token expected.
 
diff a/src/org/openjdk/asmtools/jdec/ClassData.java b/src/org/openjdk/asmtools/jdec/ClassData.java
--- a/src/org/openjdk/asmtools/jdec/ClassData.java
+++ b/src/org/openjdk/asmtools/jdec/ClassData.java
@@ -1006,17 +1006,17 @@
                     //    u2 number_of_classes;
                     //    u2 classes[number_of_classes];
                     //  }
                 case ATT_NestMembers:
                     //  JEP 360 (Sealed types): class file 59.65535
-                    //  PermittedSubtypes_attribute {
+                    //  PermittedSubclasses_attribute {
                     //    u2 attribute_name_index;
                     //    u4 attribute_length;
-                    //    u2 permitted_subtypes_count;
-                    //    u2 classes[permitted_subtypes_count];
+                    //    u2 number_of_classes;
+                    //    u2 classes[number_of_classes];
                     //  }
-                case ATT_PermittedSubtypes:
+                case ATT_PermittedSubclasses:
                     int nsubtypes = in.readUnsignedShort();
                     startArrayCmt(nsubtypes, "classes");
                     try {
                         decodeTypes(in, out, nsubtypes);
                     } finally {
diff a/src/org/openjdk/asmtools/jdis/ClassArrayData.java b/src/org/openjdk/asmtools/jdis/ClassArrayData.java
--- a/src/org/openjdk/asmtools/jdis/ClassArrayData.java
+++ b/src/org/openjdk/asmtools/jdis/ClassArrayData.java
@@ -35,19 +35,19 @@
  * u2 number_of_classes;
  * u2 classes[number_of_classes];
  * }
  * <p>
  * JEP 360 (Sealed types): class file 59.65535
- * PermittedSubtypes_attribute {
+ * PermittedSubclasses_attribute {
  * u2 attribute_name_index;
  * u4 attribute_length;
- * u2 permitted_subtypes_count;
- * u2 classes[permitted_subtypes_count];
+ * u2 number_of_classes;
+ * u2 classes[number_of_classes];
  * }
  * </p>
  */
-public class ClassArrayData {
+public class ClassArrayData extends Indenter {
     String name;
     ClassData cls;
     int[] classes;
     private Options options = Options.OptionObject();
 
@@ -70,11 +70,11 @@
 
     public void print() {
         String indexes = "";
         String names = "";
         boolean pr_cpx = options.contains(Options.PR.CPX);
-        cls.out.print(name + " ");
+        cls.out.print(getIndentString() + name + " ");
         for (int i = 0; i < classes.length; i++) {
             if (pr_cpx) {
                 indexes += (indexes.isEmpty() ? "" : ", ") + "#" + classes[i];
             }
             names += (names.isEmpty() ? "" : ", ") + cls.pool.StringValue(classes[i]);
diff a/src/org/openjdk/asmtools/jdis/ClassData.java b/src/org/openjdk/asmtools/jdis/ClassData.java
--- a/src/org/openjdk/asmtools/jdis/ClassData.java
+++ b/src/org/openjdk/asmtools/jdis/ClassData.java
@@ -94,12 +94,12 @@
     protected NestHostData nestHost;
 
     // The NestMembers of this class (since class file: 55.0)
     protected NestMembersData nestMembers;
 
-    // The PermittedSubtypes of this class (JEP 360 (Sealed types): class file 59.65535)
-    protected PermittedSubtypesData permittedSubtypes;
+    // The PermittedSubclasses of this class (JEP 360 (Sealed types): class file 59.65535)
+    protected PermittedSubclassesData permittedSubclassesData;
 
     // other parsing fields
     protected PrintWriter out;
     protected String pkgPrefix = "";
     // source file data
@@ -226,13 +226,13 @@
                 nestMembers = new NestMembersData(this).read(in, attrlen);
                 break;
             case ATT_Record:
                 record = new RecordData(this).read(in);
                 break;
-            case ATT_PermittedSubtypes:
-                // Read PermittedSubtypes Attribute (JEP 360 (Sealed types): class file 59.65535)
-                permittedSubtypes = new PermittedSubtypesData(this).read(in, attrlen);
+            case ATT_PermittedSubclasses:
+                // Read PermittedSubclasses Attribute (JEP 360 (Sealed types): class file 59.65535)
+                permittedSubclassesData = new PermittedSubclassesData(this).read(in, attrlen);
                 break;
             default:
                 handled = false;
                 break;
         }
@@ -446,13 +446,13 @@
             // Print the Record (since class file 58.65535 JEP 359)
             if( record != null ) {
                 record.print();
             }
 
-            // Print PermittedSubtypes Attribute (JEP 360 (Sealed types): class file 59.65535)
-            if( permittedSubtypes  != null) {
-                permittedSubtypes.print();
+            // Print PermittedSubclasses Attribute (JEP 360 (Sealed types): class file 59.65535)
+            if( permittedSubclassesData != null) {
+                permittedSubclassesData.print();
             }
             // Print the NestHost (since class file: 55.0)
             if(nestHost != null) {
                 nestHost.print();
             }
diff a/src/org/openjdk/asmtools/jdis/PermittedSubclassesData.java b/src/org/openjdk/asmtools/jdis/PermittedSubclassesData.java
--- /dev/null
+++ b/src/org/openjdk/asmtools/jdis/PermittedSubclassesData.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.asmtools.jdis;
+
+import org.openjdk.asmtools.jasm.JasmTokens;
+
+import java.io.DataInputStream;
+import java.io.IOException;
+
+/**
+ * The PermittedSubclasses attribute data
+ * <p>
+ * JEP 360 (Sealed types): class file 59.65535
+ * PermittedSubclasses_attribute {
+ * u2 attribute_name_index;
+ * u4 attribute_length;
+ * u2 number_of_classes;
+ * u2 classes[number_of_classes];
+ * }
+ */
+public class PermittedSubclassesData extends ClassArrayData {
+    public PermittedSubclassesData(ClassData cls) {
+        super(cls, JasmTokens.Token.PERMITTEDSUBCLASSES.parseKey());
+    }
+
+    public PermittedSubclassesData read(DataInputStream in, int attribute_length) throws IOException, ClassFormatError {
+        return (PermittedSubclassesData) super.read(in, attribute_length);
+    }
+}
diff a/src/org/openjdk/asmtools/jdis/PermittedSubtypesData.java b/src/org/openjdk/asmtools/jdis/PermittedSubtypesData.java
--- a/src/org/openjdk/asmtools/jdis/PermittedSubtypesData.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.asmtools.jdis;
-
-import org.openjdk.asmtools.jasm.JasmTokens;
-
-import java.io.DataInputStream;
-import java.io.IOException;
-
-/**
- * The NestMembers attribute data
- * <p>
- * JEP 360 (Sealed types): class file 59.65535
- * PermittedSubtypes_attribute {
- * u2 attribute_name_index;
- * u4 attribute_length;
- * u2 permitted_subtypes_count;
- * u2 classes[permitted_subtypes_count];
- * }
- */
-public class PermittedSubtypesData extends ClassArrayData {
-    public PermittedSubtypesData(ClassData cls) {
-        super(cls, JasmTokens.Token.PERMITTEDSUBTYPES.parseKey());
-    }
-
-    public PermittedSubtypesData read(DataInputStream in, int attribute_length) throws IOException, ClassFormatError {
-        return (PermittedSubtypesData) super.read(in, attribute_length);
-    }
-}
