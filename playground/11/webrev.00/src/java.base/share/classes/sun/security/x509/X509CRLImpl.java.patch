diff a/src/java.base/share/classes/sun/security/x509/X509CRLImpl.java b/src/java.base/share/classes/sun/security/x509/X509CRLImpl.java
--- a/src/java.base/share/classes/sun/security/x509/X509CRLImpl.java
+++ b/src/java.base/share/classes/sun/security/x509/X509CRLImpl.java
@@ -1124,12 +1124,11 @@
         DerValue       tmp;
         byte           nextByte;
 
         // version (optional if v1)
         version = 0;   // by default, version = v1 == 0
-        nextByte = (byte)derStrm.peekByte();
-        if (nextByte == DerValue.tag_Integer) {
+        if (derStrm.seeOptional(DerValue.tag_Integer)) {
             version = derStrm.getInteger();
             if (version != 1)  // i.e. v2
                 throw new CRLException("Invalid version");
         }
         tmp = derStrm.getDerValue();
@@ -1149,38 +1148,18 @@
         }
 
         // thisUpdate
         // check if UTCTime encoded or GeneralizedTime
 
-        nextByte = (byte)derStrm.peekByte();
-        if (nextByte == DerValue.tag_UtcTime) {
-            thisUpdate = derStrm.getUTCTime();
-        } else if (nextByte == DerValue.tag_GeneralizedTime) {
-            thisUpdate = derStrm.getGeneralizedTime();
-        } else {
-            throw new CRLException("Invalid encoding for thisUpdate"
-                                   + " (tag=" + nextByte + ")");
-        }
-
-        if (derStrm.available() == 0)
-           return;     // done parsing no more optional fields present
-
-        // nextUpdate (optional)
-        nextByte = (byte)derStrm.peekByte();
-        if (nextByte == DerValue.tag_UtcTime) {
-            nextUpdate = derStrm.getUTCTime();
-        } else if (nextByte == DerValue.tag_GeneralizedTime) {
-            nextUpdate = derStrm.getGeneralizedTime();
-        } // else it is not present
+        thisUpdate = derStrm.getTime();
 
-        if (derStrm.available() == 0)
-            return;     // done parsing no more optional fields present
+        if (derStrm.seeOptional(t ->
+                t == DerValue.tag_UtcTime || t == DerValue.tag_GeneralizedTime)) {
+            nextUpdate = derStrm.getTime();
+        }
 
-        // revokedCertificates (optional)
-        nextByte = (byte)derStrm.peekByte();
-        if ((nextByte == DerValue.tag_SequenceOf)
-            && (! ((nextByte & 0x0c0) == 0x080))) {
+        if (derStrm.seeOptional(DerValue.tag_SequenceOf)) {
             DerValue[] badCerts = derStrm.getSequence(4);
 
             X500Principal crlIssuer = getIssuerX500Principal();
             X500Principal badCertIssuer = crlIssuer;
             for (int i = 0; i < badCerts.length; i++) {
@@ -1192,17 +1171,12 @@
                 revokedMap.put(issuerSerial, entry);
                 revokedList.add(entry);
             }
         }
 
-        if (derStrm.available() == 0)
-            return;     // done parsing no extensions
-
-        // crlExtensions (optional)
-        tmp = derStrm.getDerValue();
-        if (tmp.isConstructed() && tmp.isContextSpecific((byte)0)) {
-            extensions = new CRLExtensions(tmp.data);
+        if (derStrm.seeOptionalContextSpecific(0)) {
+            extensions = new CRLExtensions(derStrm.getDerValue().data);
         }
         readOnly = true;
     }
 
     /**
@@ -1218,16 +1192,14 @@
             DerValue tbsCert = derIn.getSequence(3)[0];
             DerInputStream tbsIn = tbsCert.data;
 
             DerValue tmp;
             // skip version number if present
-            byte nextByte = (byte)tbsIn.peekByte();
-            if (nextByte == DerValue.tag_Integer) {
-                tmp = tbsIn.getDerValue();
+            if (tbsIn.seeOptional(DerValue.tag_Integer)) {
+                tbsIn.skipDerValue();
             }
-
-            tmp = tbsIn.getDerValue();  // skip signature
+            tbsIn.skipDerValue();
             tmp = tbsIn.getDerValue();  // issuer
             byte[] principalBytes = tmp.toByteArray();
             return new X500Principal(principalBytes);
         } catch (Exception e) {
             throw new RuntimeException("Could not parse issuer", e);
