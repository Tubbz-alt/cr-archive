diff a/src/java.base/share/classes/sun/security/timestamp/TSResponse.java b/src/java.base/share/classes/sun/security/timestamp/TSResponse.java
--- a/src/java.base/share/classes/sun/security/timestamp/TSResponse.java
+++ b/src/java.base/share/classes/sun/security/timestamp/TSResponse.java
@@ -38,11 +38,11 @@
  * The TimeStampResp ASN.1 type has the following definition:
  * <pre>
  *
  *     TimeStampResp ::= SEQUENCE {
  *         status            PKIStatusInfo,
- *         timeStampToken    TimeStampToken OPTIONAL ]
+ *         timeStampToken    TimeStampToken OPTIONAL }
  *
  *     PKIStatusInfo ::= SEQUENCE {
  *         status        PKIStatus,
  *         statusString  PKIFreeText OPTIONAL,
  *         failInfo      PKIFailureInfo OPTIONAL }
@@ -330,21 +330,18 @@
         this.status = statusInfo.data.getInteger();
         if (debug != null) {
             debug.println("timestamp response: status=" + this.status);
         }
         // Parse statusString, if present
-        if (statusInfo.data.available() > 0) {
-            byte tag = (byte)statusInfo.data.peekByte();
-            if (tag == DerValue.tag_SequenceOf) {
-                DerValue[] strings = statusInfo.data.getSequence(1);
-                statusString = new String[strings.length];
-                for (int i = 0; i < strings.length; i++) {
-                    statusString[i] = strings[i].getUTF8String();
-                    if (debug != null) {
-                        debug.println("timestamp response: statusString=" +
-                                      statusString[i]);
-                    }
+        if (statusInfo.data.seeOptional(DerValue.tag_SequenceOf)) {
+            DerValue[] strings = statusInfo.data.getSequence(1);
+            statusString = new String[strings.length];
+            for (int i = 0; i < strings.length; i++) {
+                statusString[i] = strings[i].getUTF8String();
+                if (debug != null) {
+                    debug.println("timestamp response: statusString=" +
+                            statusString[i]);
                 }
             }
         }
         // Parse failInfo, if present
         if (statusInfo.data.available() > 0) {
