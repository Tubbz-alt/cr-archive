diff a/src/java.base/share/classes/sun/security/util/ObjectIdentifier.java b/src/java.base/share/classes/sun/security/util/ObjectIdentifier.java
--- a/src/java.base/share/classes/sun/security/util/ObjectIdentifier.java
+++ b/src/java.base/share/classes/sun/security/util/ObjectIdentifier.java
@@ -215,10 +215,20 @@
             throw new IOException("ObjectIdentifier() -- Invalid format: "
                     + e.toString(), e);
         }
     }
 
+    public ObjectIdentifier(byte[] data, int start, int end) throws IOException {
+        encoding = Arrays.copyOfRange(data, start, end);
+        check(encoding);
+    }
+
+    ObjectIdentifier(ByteArrayInputStream in) throws IOException {
+        encoding = in.readAllBytes();
+        check(encoding);
+    }
+
     /**
      * Constructor, from an ASN.1 encoded input stream.
      * Validity check NOT included.
      * The encoding of the ID in the stream uses "DER", a BER/1 subset.
      * In this case, that means a triple { typeId, length, data }.
@@ -228,50 +238,11 @@
      *
      * @param in DER-encoded data holding an object ID
      * @exception IOException indicates a decoding error
      */
     public ObjectIdentifier(DerInputStream in) throws IOException {
-        byte    type_id;
-        int     bufferEnd;
-
-        /*
-         * Object IDs are a "universal" type, and their tag needs only
-         * one byte of encoding.  Verify that the tag of this datum
-         * is that of an object ID.
-         *
-         * Then get and check the length of the ID's encoding.  We set
-         * up so that we can use in.available() to check for the end of
-         * this value in the data stream.
-         */
-        type_id = (byte)in.getByte();
-        if (type_id != DerValue.tag_ObjectId)
-            throw new IOException (
-                "ObjectIdentifier() -- data isn't an object ID"
-                + " (tag = " +  type_id + ")"
-                );
-
-        int len = in.getDefiniteLength();
-        if (len > in.available()) {
-            throw new IOException("ObjectIdentifier() -- length exceeds" +
-                    "data available.  Length: " + len + ", Available: " +
-                    in.available());
-        }
-        encoding = new byte[len];
-        in.getBytes(encoding);
-        check(encoding);
-    }
-
-    /*
-     * Constructor, from the rest of a DER input buffer;
-     * the tag and length have been removed/verified
-     * Validity check NOT included.
-     */
-    ObjectIdentifier(DerInputBuffer buf) throws IOException {
-        DerInputStream in = new DerInputStream(buf);
-        encoding = new byte[in.available()];
-        in.getBytes(encoding);
-        check(encoding);
+        encoding = in.getDerValue().getOID().encoding;
     }
 
     private void init(int[] components, int length) {
         int pos = 0;
         byte[] tmp = new byte[length*5+1];  // +1 for empty input
