diff a/src/java.base/share/classes/javax/security/auth/Subject.java b/src/java.base/share/classes/javax/security/auth/Subject.java
--- a/src/java.base/share/classes/javax/security/auth/Subject.java
+++ b/src/java.base/share/classes/javax/security/auth/Subject.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -203,20 +203,23 @@
      *          Sets.
      */
     public Subject(boolean readOnly, Set<? extends Principal> principals,
                    Set<?> pubCredentials, Set<?> privCredentials)
     {
-        collectionNullClean(principals);
-        collectionNullClean(pubCredentials);
-        collectionNullClean(privCredentials);
+        LinkedList<Principal> princList
+                = collectionNullClean(principals);
+        LinkedList<Object> pubCredsList
+                = collectionNullClean(pubCredentials);
+        LinkedList<Object> privCredsList
+                = collectionNullClean(privCredentials);
 
         this.principals = Collections.synchronizedSet(new SecureSet<>
-                                (this, PRINCIPAL_SET, principals));
+                                (this, PRINCIPAL_SET, princList));
         this.pubCredentials = Collections.synchronizedSet(new SecureSet<>
-                                (this, PUB_CREDENTIAL_SET, pubCredentials));
+                                (this, PUB_CREDENTIAL_SET, pubCredsList));
         this.privCredentials = Collections.synchronizedSet(new SecureSet<>
-                                (this, PRIV_CREDENTIAL_SET, privCredentials));
+                                (this, PRIV_CREDENTIAL_SET, privCredsList));
         this.readOnly = readOnly;
     }
 
     /**
      * Set this {@code Subject} to be read-only.
@@ -973,12 +976,13 @@
         Objects.requireNonNull(inputPrincs,
                 ResourcesMgr.getString("invalid.null.input.s."));
 
         // Rewrap the principals into a SecureSet
         try {
+            LinkedList<Principal> princList = collectionNullClean(inputPrincs);
             principals = Collections.synchronizedSet(new SecureSet<>
-                                (this, PRINCIPAL_SET, inputPrincs));
+                                (this, PRINCIPAL_SET, princList));
         } catch (NullPointerException npe) {
             // Sometimes people deserialize the principals set only.
             // Subject is not accessible, so just don't fail.
             principals = Collections.synchronizedSet
                         (new SecureSet<>(this, PRINCIPAL_SET));
@@ -999,30 +1003,22 @@
      * @param coll A {@code Collection} to be tested for null references
      *
      * @throws NullPointerException if the specified collection is either
      *            {@code null} or contains a {@code null} element
      */
-    private static void collectionNullClean(Collection<?> coll) {
-        boolean hasNullElements = false;
+    private static <E> LinkedList<E> collectionNullClean(
+            Collection<? extends E> coll) {
 
         Objects.requireNonNull(coll,
                 ResourcesMgr.getString("invalid.null.input.s."));
 
-        try {
-            hasNullElements = coll.contains(null);
-        } catch (NullPointerException npe) {
-            // A null-hostile collection may choose to throw
-            // NullPointerException if contains(null) is called on it
-            // rather than returning false.
-            // If this happens we know the collection is null-clean.
-            hasNullElements = false;
-        } finally {
-            if (hasNullElements) {
-                throw new NullPointerException
-                    (ResourcesMgr.getString("invalid.null.input.s."));
-            }
+        LinkedList<E> output = new LinkedList<>();
+        for (E e : coll) {
+            output.add(Objects.requireNonNull(e,
+                    ResourcesMgr.getString("invalid.null.input.s.")));
         }
+        return output;
     }
 
     /**
      * Prevent modifications unless caller has permission.
      *
@@ -1064,14 +1060,14 @@
             this.subject = subject;
             this.which = which;
             this.elements = new LinkedList<E>();
         }
 
-        SecureSet(Subject subject, int which, Set<? extends E> set) {
+        SecureSet(Subject subject, int which, LinkedList<E> list) {
             this.subject = subject;
             this.which = which;
-            this.elements = new LinkedList<E>(set);
+            this.elements = list;
         }
 
         public int size() {
             return elements.size();
         }
@@ -1240,21 +1236,21 @@
         }
 
         public boolean addAll(Collection<? extends E> c) {
             boolean result = false;
 
-            collectionNullClean(c);
+            c = collectionNullClean(c);
 
             for (E item : c) {
                 result |= this.add(item);
             }
 
             return result;
         }
 
         public boolean removeAll(Collection<?> c) {
-            collectionNullClean(c);
+            c = collectionNullClean(c);
 
             boolean modified = false;
             final Iterator<E> e = iterator();
             while (e.hasNext()) {
                 E next;
@@ -1280,11 +1276,11 @@
             }
             return modified;
         }
 
         public boolean containsAll(Collection<?> c) {
-            collectionNullClean(c);
+            c = collectionNullClean(c);
 
             for (Object item : c) {
                 if (this.contains(item) == false) {
                     return false;
                 }
@@ -1292,11 +1288,11 @@
 
             return true;
         }
 
         public boolean retainAll(Collection<?> c) {
-            collectionNullClean(c);
+            c = collectionNullClean(c);
 
             boolean modified = false;
             final Iterator<E> e = iterator();
             while (e.hasNext()) {
                 E next;
@@ -1312,12 +1308,12 @@
                 }
 
                 if (c.contains(next) == false) {
                     e.remove();
                     modified = true;
-                    }
                 }
+            }
 
             return modified;
         }
 
         public void clear() {
@@ -1441,17 +1437,11 @@
             subject = (Subject) fields.get("this$0", null);
             which = fields.get("which", 0);
 
             LinkedList<E> tmp = (LinkedList<E>) fields.get("elements", null);
 
-            Subject.collectionNullClean(tmp);
-
-            if (tmp.getClass() != LinkedList.class) {
-                elements = new LinkedList<E>(tmp);
-            } else {
-                elements = tmp;
-            }
+            elements = Subject.collectionNullClean(tmp);
         }
 
     }
 
     /**
