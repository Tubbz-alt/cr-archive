diff a/src/java.security.jgss/share/classes/sun/security/jgss/spnego/NegTokenInit.java b/src/java.security.jgss/share/classes/sun/security/jgss/spnego/NegTokenInit.java
--- a/src/java.security.jgss/share/classes/sun/security/jgss/spnego/NegTokenInit.java
+++ b/src/java.security.jgss/share/classes/sun/security/jgss/spnego/NegTokenInit.java
@@ -86,58 +86,52 @@
         super(NEG_TOKEN_INIT_ID);
         parseToken(in);
     }
 
     final byte[] encode() throws GSSException {
-        try {
-            // create negInitToken
-            DerOutputStream initToken = new DerOutputStream();
+        // create negInitToken
+        DerOutputStream initToken = new DerOutputStream();
 
-            // DER-encoded mechTypes with CONTEXT 00
-            if (mechTypes != null) {
-                initToken.write(DerValue.createTag(DerValue.TAG_CONTEXT,
-                                                true, (byte) 0x00), mechTypes);
-            }
+        // DER-encoded mechTypes with CONTEXT 00
+        if (mechTypes != null) {
+            initToken.write(DerValue.createTag(DerValue.TAG_CONTEXT,
+                    true, (byte) 0x00), mechTypes);
+        }
 
-            // write context flags with CONTEXT 01
-            if (reqFlags != null) {
-                DerOutputStream flags = new DerOutputStream();
-                flags.putUnalignedBitString(reqFlags);
-                initToken.write(DerValue.createTag(DerValue.TAG_CONTEXT,
-                                                true, (byte) 0x01), flags);
-            }
+        // write context flags with CONTEXT 01
+        if (reqFlags != null) {
+            DerOutputStream flags = new DerOutputStream();
+            flags.putUnalignedBitString(reqFlags);
+            initToken.write(DerValue.createTag(DerValue.TAG_CONTEXT,
+                    true, (byte) 0x01), flags);
+        }
 
-            // mechToken with CONTEXT 02
-            if (mechToken != null) {
-                DerOutputStream dataValue = new DerOutputStream();
-                dataValue.putOctetString(mechToken);
-                initToken.write(DerValue.createTag(DerValue.TAG_CONTEXT,
-                                                true, (byte) 0x02), dataValue);
-            }
+        // mechToken with CONTEXT 02
+        if (mechToken != null) {
+            DerOutputStream dataValue = new DerOutputStream();
+            dataValue.putOctetString(mechToken);
+            initToken.write(DerValue.createTag(DerValue.TAG_CONTEXT,
+                    true, (byte) 0x02), dataValue);
+        }
 
-            // mechListMIC with CONTEXT 03
-            if (mechListMIC != null) {
-                if (DEBUG) {
-                    System.out.println("SpNegoToken NegTokenInit: " +
-                                        "sending MechListMIC");
-                }
-                DerOutputStream mic = new DerOutputStream();
-                mic.putOctetString(mechListMIC);
-                initToken.write(DerValue.createTag(DerValue.TAG_CONTEXT,
-                                                true, (byte) 0x03), mic);
+        // mechListMIC with CONTEXT 03
+        if (mechListMIC != null) {
+            if (DEBUG) {
+                System.out.println("SpNegoToken NegTokenInit: " +
+                        "sending MechListMIC");
             }
+            DerOutputStream mic = new DerOutputStream();
+            mic.putOctetString(mechListMIC);
+            initToken.write(DerValue.createTag(DerValue.TAG_CONTEXT,
+                    true, (byte) 0x03), mic);
+        }
 
-            // insert in a SEQUENCE
-            DerOutputStream out = new DerOutputStream();
-            out.write(DerValue.tag_Sequence, initToken);
-
-            return out.toByteArray();
+        // insert in a SEQUENCE
+        DerOutputStream out = new DerOutputStream();
+        out.write(DerValue.tag_Sequence, initToken);
 
-        } catch (IOException e) {
-            throw new GSSException(GSSException.DEFECTIVE_TOKEN, -1,
-                "Invalid SPNEGO NegTokenInit token : " + e.getMessage());
-        }
+        return out.toByteArray();
     }
 
     private void parseToken(byte[] in) throws GSSException {
         try {
             DerValue der = new DerValue(in);
