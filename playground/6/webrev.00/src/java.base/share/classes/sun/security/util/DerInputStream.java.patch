diff a/src/java.base/share/classes/sun/security/util/DerInputStream.java b/src/java.base/share/classes/sun/security/util/DerInputStream.java
--- a/src/java.base/share/classes/sun/security/util/DerInputStream.java
+++ b/src/java.base/share/classes/sun/security/util/DerInputStream.java
@@ -28,11 +28,10 @@
 import java.io.InputStream;
 import java.io.IOException;
 import java.math.BigInteger;
 import java.nio.charset.Charset;
 import java.util.Date;
-import java.util.Vector;
 
 import static java.nio.charset.StandardCharsets.*;
 
 /**
  * A DER input stream, used for parsing ASN.1 DER-encoded data such as
@@ -94,11 +93,11 @@
      *          starting at "offset"
      * @param allowBER whether to allow constructed indefinite-length
      *          encoding as well as tolerate leading 0s
      */
     public DerInputStream(byte[] data, int offset, int len,
-        boolean allowBER) throws IOException {
+            boolean allowBER) throws IOException {
         init(data, offset, len, allowBER);
     }
 
     /**
      * Create a DER input stream from part of a data buffer.
@@ -116,11 +115,12 @@
     }
 
     /*
      * private helper routine
      */
-    private void init(byte[] data, int offset, int len, boolean allowBER) throws IOException {
+    private void init(byte[] data, int offset, int len, boolean allowBER)
+            throws IOException {
         if ((offset+2 > data.length) || (offset+len > data.length)) {
             throw new IOException("Encoding bytes too short");
         }
         // check for indefinite length encoding
         if (DerIndefLenConverter.isIndefinite(data[offset+1])) {
@@ -128,12 +128,11 @@
                 throw new IOException("Indefinite length BER encoding found");
             } else {
                 byte[] inData = new byte[len];
                 System.arraycopy(data, offset, inData, 0, len);
 
-                DerIndefLenConverter derIn = new DerIndefLenConverter();
-                byte[] result = derIn.convertBytes(inData);
+                byte[] result = DerIndefLenConverter.convertBytes(inData);
                 if (result == null) {
                     throw new IOException("not all indef len BER resolved");
                 } else {
                     buffer = new DerInputBuffer(result, allowBER);
                 }
@@ -158,11 +157,11 @@
      *          be skipped.  If this value is false, the next data read
      *          on this stream and the newly created stream will be the
      *          same.
      */
     public DerInputStream subStream(int len, boolean do_skip)
-    throws IOException {
+            throws IOException {
         DerInputBuffer newbuf = buffer.dup();
 
         newbuf.truncate(len);
         if (do_skip) {
             buffer.skip(len);
@@ -370,11 +369,11 @@
      *          (used to initialize an auto-growing data structure)
      * @param implicit if true tag is assumed implicit.
      * @return array of the values in the sequence
      */
     public DerValue[] getSet(int startLen, boolean implicit)
-        throws IOException {
+            throws IOException {
         tag = (byte)buffer.read();
         if (!implicit) {
             if (tag != DerValue.tag_Set) {
                 throw new IOException("Set tag error");
             }
@@ -397,54 +396,49 @@
            // indefinite length encoding found
            buffer = new DerInputBuffer(
                    DerIndefLenConverter.convertStream(buffer, lenByte, tag),
                    buffer.allowBER);
 
-           if (tag != buffer.read())
-                throw new IOException("Indefinite length encoding" +
-                        " not supported");
+           if (tag != buffer.read()) {
+               throw new IOException("Indefinite length encoding" +
+                       " not supported");
+           }
            len = DerInputStream.getDefiniteLength(buffer);
         }
 
-        if (len == 0)
+        if (len == 0) {
             // return empty array instead of null, which should be
             // used only for missing optionals
             return new DerValue[0];
+        }
 
         /*
          * Create a temporary stream from which to read the data,
          * unless it's not really needed.
          */
-        if (buffer.available() == len)
+        if (buffer.available() == len) {
             newstr = this;
-        else
+        } else {
             newstr = subStream(len, true);
+        }
 
         /*
          * Pull values out of the stream.
          */
-        Vector<DerValue> vec = new Vector<>(startLen);
+        List<DerValue> vec = new ArrayList<>(startLen);
         DerValue value;
 
         do {
             value = new DerValue(newstr.buffer, buffer.allowBER);
-            vec.addElement(value);
+            vec.add(value);
         } while (newstr.available() > 0);
 
-        if (newstr.available() != 0)
+        if (newstr.available() != 0) {
             throw new IOException("Extra data at end of vector");
+        }
 
-        /*
-         * Now stick them into the array we're returning.
-         */
-        int             i, max = vec.size();
-        DerValue[]      retval = new DerValue[max];
-
-        for (i = 0; i < max; i++)
-            retval[i] = vec.elementAt(i);
-
-        return retval;
+        return vec.toArray(new DerValue[vec.size()]);
     }
 
     /**
      * Get a single DER-encoded value from the input stream.
      * It can often be useful to pull a value from the stream
@@ -506,52 +500,56 @@
     /**
      * Private helper routine to read an encoded string from the input
      * stream.
      * @param stringTag the tag for the type of string to read
      * @param stringName a name to display in error messages
-     * @param enc the encoder to use to interpret the data. Should
+     * @param charset the encoder to use to interpret the data. Should
      * correspond to the stringTag above.
      */
     private String readString(byte stringTag, String stringName,
                               Charset charset) throws IOException {
 
-        if (buffer.read() != stringTag)
+        if (buffer.read() != stringTag) {
             throw new IOException("DER input not a " +
-                                  stringName + " string");
+                    stringName + " string");
+        }
 
         int length = getDefiniteLength(buffer);
         byte[] retval = new byte[length];
-        if ((length != 0) && (buffer.read(retval) != length))
+        if ((length != 0) && (buffer.read(retval) != length)) {
             throw new IOException("Short read of DER " +
-                                  stringName + " string");
+                    stringName + " string");
+        }
 
         return new String(retval, charset);
     }
 
     /**
      * Get a UTC encoded time value from the input stream.
      */
     public Date getUTCTime() throws IOException {
-        if (buffer.read() != DerValue.tag_UtcTime)
+        if (buffer.read() != DerValue.tag_UtcTime) {
             throw new IOException("DER input, UTCtime tag invalid ");
+        }
         return buffer.getUTCTime(getDefiniteLength(buffer));
     }
 
     /**
      * Get a Generalized encoded time value from the input stream.
      */
     public Date getGeneralizedTime() throws IOException {
-        if (buffer.read() != DerValue.tag_GeneralizedTime)
+        if (buffer.read() != DerValue.tag_GeneralizedTime) {
             throw new IOException("DER input, GeneralizedTime tag invalid ");
+        }
         return buffer.getGeneralizedTime(getDefiniteLength(buffer));
     }
 
     /*
      * Get a byte from the input stream.
      */
     // package private
-    int getByte() throws IOException {
+    int getByte() {
         return (0x00ff & buffer.read());
     }
 
     public int peekByte() throws IOException {
         return buffer.peek();
@@ -595,15 +593,16 @@
 
             /*
              * NOTE:  tmp == 0 indicates indefinite length encoded data.
              * tmp > 4 indicates more than 4Gb of data.
              */
-            if (tmp == 0)
+            if (tmp == 0) {
                 return -1;
-            if (tmp < 0 || tmp > 4)
-                throw new IOException(mdName + "lengthTag=" + tmp + ", "
-                    + ((tmp < 0) ? "incorrect DER encoding." : "too big."));
+            }
+            if (tmp > 4) {
+                throw new IOException(mdName + "lengthTag=" + tmp + ", too big.");
+            }
 
             value = 0x0ff & in.read();
             tmp--;
             if (value == 0) {
                 // DER requires length value be encoded in minimum number of bytes
