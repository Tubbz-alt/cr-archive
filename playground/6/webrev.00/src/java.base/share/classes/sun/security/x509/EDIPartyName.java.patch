diff a/src/java.base/share/classes/sun/security/x509/EDIPartyName.java b/src/java.base/share/classes/sun/security/x509/EDIPartyName.java
--- a/src/java.base/share/classes/sun/security/x509/EDIPartyName.java
+++ b/src/java.base/share/classes/sun/security/x509/EDIPartyName.java
@@ -24,10 +24,12 @@
  */
 
 package sun.security.x509;
 
 import java.io.IOException;
+import java.util.Objects;
+
 import sun.security.util.*;
 
 /**
  * This class defines the EDIPartyName of the GeneralName choice.
  * The ASN.1 syntax for this is:
@@ -46,12 +48,12 @@
 
     // Private data members
     private static final byte TAG_ASSIGNER = 0;
     private static final byte TAG_PARTYNAME = 1;
 
-    private String assigner = null;
-    private String party = null;
+    private final String assigner;
+    private final String party;
 
     private int myhash = -1;
 
     /**
      * Create the EDIPartyName object from the specified names.
@@ -59,20 +61,20 @@
      * @param assignerName the name of the assigner
      * @param partyName the name of the EDI party.
      */
     public EDIPartyName(String assignerName, String partyName) {
         this.assigner = assignerName;
-        this.party = partyName;
+        this.party = Objects.requireNonNull(partyName);
     }
 
     /**
      * Create the EDIPartyName object from the specified name.
      *
      * @param partyName the name of the EDI party.
      */
     public EDIPartyName(String partyName) {
-        this.party = partyName;
+        this(null, partyName);
     }
 
     /**
      * Create the EDIPartyName object from the passed encoded Der value.
      *
@@ -85,29 +87,37 @@
 
         int len = seq.length;
         if (len < 1 || len > 2)
             throw new IOException("Invalid encoding of EDIPartyName");
 
+        String tmpAssigner = null;
+        String tmpParty = null;
         for (int i = 0; i < len; i++) {
             DerValue opt = seq[i];
             if (opt.isContextSpecific(TAG_ASSIGNER) &&
                 !opt.isConstructed()) {
-                if (assigner != null)
+                if (tmpAssigner != null)
                     throw new IOException("Duplicate nameAssigner found in"
                                           + " EDIPartyName");
                 opt = opt.data.getDerValue();
-                assigner = opt.getAsString();
+                tmpAssigner = opt.getAsString();
             }
             if (opt.isContextSpecific(TAG_PARTYNAME) &&
                 !opt.isConstructed()) {
-                if (party != null)
+                if (tmpParty != null)
                     throw new IOException("Duplicate partyName found in"
                                           + " EDIPartyName");
                 opt = opt.data.getDerValue();
-                party = opt.getAsString();
+                tmpParty = opt.getAsString();
             }
         }
+        if (tmpParty == null) {
+            throw new IOException("partyName unfound in"
+                    + " EDIPartyName");
+        }
+        assigner = tmpAssigner;
+        party = tmpParty;
     }
 
     /**
      * Return the type of the GeneralName.
      */
@@ -119,23 +129,22 @@
      * Encode the EDI party name into the DerOutputStream.
      *
      * @param out the DER stream to encode the EDIPartyName to.
      * @exception IOException on encoding errors.
      */
-    public void encode(DerOutputStream out) throws IOException {
+    @Override
+    public void derEncode(DerOutputStream out) {
         DerOutputStream tagged = new DerOutputStream();
         DerOutputStream tmp = new DerOutputStream();
 
         if (assigner != null) {
             DerOutputStream tmp2 = new DerOutputStream();
             // XXX - shd check is chars fit into PrintableString
             tmp2.putPrintableString(assigner);
             tagged.write(DerValue.createTag(DerValue.TAG_CONTEXT,
                                  false, TAG_ASSIGNER), tmp2);
         }
-        if (party == null)
-            throw  new IOException("Cannot have null partyName");
 
         // XXX - shd check is chars fit into PrintableString
         tmp.putPrintableString(party);
         tagged.write(DerValue.createTag(DerValue.TAG_CONTEXT,
                                  false, TAG_PARTYNAME), tmp);
@@ -178,28 +187,23 @@
         } else {
             if (!(this.assigner.equals(otherAssigner)))
                 return false;
         }
         String otherParty = ((EDIPartyName)other).party;
-        if (this.party == null) {
-            if (otherParty != null)
-                return false;
-        } else {
-            if (!(this.party.equals(otherParty)))
-                return false;
-        }
+        if (!(this.party.equals(otherParty)))
+            return false;
         return true;
     }
 
     /**
      * Returns the hash code value for this EDIPartyName.
      *
      * @return a hash code value.
      */
     public int hashCode() {
         if (myhash == -1) {
-            myhash = 37 + (party == null ? 1 : party.hashCode());
+            myhash = 37 + party.hashCode();
             if (assigner != null) {
                 myhash = 37 * myhash + assigner.hashCode();
             }
         }
         return myhash;
