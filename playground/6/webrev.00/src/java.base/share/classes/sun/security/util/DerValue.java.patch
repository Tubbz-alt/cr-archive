diff a/src/java.base/share/classes/sun/security/util/DerValue.java b/src/java.base/share/classes/sun/security/util/DerValue.java
--- a/src/java.base/share/classes/sun/security/util/DerValue.java
+++ b/src/java.base/share/classes/sun/security/util/DerValue.java
@@ -60,20 +60,17 @@
     public static final byte TAG_UNIVERSAL = (byte)0x000;
     public static final byte TAG_APPLICATION = (byte)0x040;
     public static final byte TAG_CONTEXT = (byte)0x080;
     public static final byte TAG_PRIVATE = (byte)0x0c0;
 
-    /** The DER tag of the value; one of the tag_ constants. */
+    // tag of the value
     public byte                 tag;
-
+    // A ByteArrayOutputStream of content
     protected DerInputBuffer    buffer;
-
-    /**
-     * The DER-encoded data of the value, never null
-     */
+    // Always new DerInputStream(buffer)
     public final DerInputStream data;
-
+    // The length of the value. Always the same as buffer.count.
     private int                 length;
 
     /*
      * The type starts at the first byte of the encoding, and
      * is one of these tag_* values.  That may be all the type
@@ -213,12 +210,12 @@
             if (!isPrintableStringChar(value.charAt(i))) {
                 isPrintableString = false;
                 break;
             }
         }
-
-        data = init(isPrintableString ? tag_PrintableString : tag_UTF8String, value);
+        data = init(isPrintableString
+                ? tag_PrintableString : tag_UTF8String, value);
     }
 
     /**
      * Creates a string type DER value from a String object
      * @param stringTag the tag for the DER value to create
@@ -273,11 +270,10 @@
             // indefinite form is encoded by sending a length field with a
             // length of 0. - i.e. [1000|0000].
             // the object is ended by sending two zero bytes.
             in.skip(length + 2);
         } else {
-
             buffer = in.dup();
             buffer.truncate(length);
             data = new DerInputStream(buffer);
 
             in.skip(length);
@@ -302,11 +298,11 @@
     }
 
     // Get an ASN.1/DER encoded datum from part of a buffer w/ additional
     // arg to control whether DER checks are enforced.
     DerValue(byte[] buf, int offset, int len, boolean allowBER)
-        throws IOException {
+            throws IOException {
         data = init(true, new ByteArrayInputStream(buf, offset, len), allowBER);
     }
 
     /**
      * Get an ASN.1/DER encoded datum from part of a buffer.
@@ -376,48 +372,53 @@
 
     /*
      * helper routine
      */
     private DerInputStream init(boolean fullyBuffered, InputStream in,
-        boolean allowBER) throws IOException {
+            boolean allowBER) throws IOException {
 
         tag = (byte)in.read();
         byte lenByte = (byte)in.read();
         length = DerInputStream.getLength(lenByte, in);
         if (length == -1) { // indefinite length encoding found
             in = new ByteArrayInputStream(
                     DerIndefLenConverter.convertStream(in, lenByte, tag));
-            if (tag != in.read())
+            if (tag != in.read()) {
                 throw new IOException
                         ("Indefinite length encoding not supported");
+            }
             length = DerInputStream.getDefiniteLength(in);
         }
 
-        if (fullyBuffered && in.available() != length)
+        if (fullyBuffered && in.available() != length) {
             throw new IOException("extra data given to DerValue constructor");
+        }
 
         byte[] bytes = IOUtils.readExactlyNBytes(in, length);
 
         buffer = new DerInputBuffer(bytes, allowBER);
         return new DerInputStream(buffer);
     }
 
     /**
      * Encode an ASN1/DER encoded datum onto a DER output stream.
      */
-    public void encode(DerOutputStream out)
-    throws IOException {
+    public void encode(DerOutputStream out) {
         out.write(tag);
         out.putLength(length);
-        // XXX yeech, excess copies ... DerInputBuffer.write(OutStream)
         if (length > 0) {
             byte[] value = new byte[length];
             // always synchronized on data
             synchronized (data) {
                 buffer.reset();
-                if (buffer.read(value) != length) {
-                    throw new IOException("short DER value read (encode)");
+                try {
+                    if (buffer.read(value) != length) {
+                        throw new IOException("short DER value read (encode)");
+                    }
+                } catch (IOException e) {
+                    // buffer should always have length bytes
+                    throw new AssertionError("Should not happen");
                 }
                 out.write(value);
             }
         }
     }
@@ -453,18 +454,20 @@
      * Returns an ASN.1 OBJECT IDENTIFIER.
      *
      * @return the OID held in this DER value
      */
     public ObjectIdentifier getOID() throws IOException {
-        if (tag != tag_ObjectId)
+        if (tag != tag_ObjectId) {
             throw new IOException("DerValue.getOID, not an OID " + tag);
+        }
         return new ObjectIdentifier(buffer);
     }
 
     private byte[] append(byte[] a, byte[] b) {
-        if (a == null)
+        if (a == null) {
             return b;
+        }
 
         byte[] ret = new byte[a.length + b.length];
         System.arraycopy(a, 0, ret, 0, a.length);
         System.arraycopy(b, 0, ret, a.length, b.length);
 
@@ -478,11 +481,11 @@
      */
     public byte[] getOctetString() throws IOException {
 
         if (tag != tag_OctetString && !isConstructed(tag_OctetString)) {
             throw new IOException(
-                "DerValue.getOctetString, not an Octet String: " + tag);
+                    "DerValue.getOctetString, not an Octet String: " + tag);
         }
         // Note: do not attempt to call buffer.read(bytes) at all. There's a
         // known bug that it returns -1 instead of 0.
         if (length == 0) {
             return new byte[0];
@@ -525,12 +528,13 @@
      * Returns an ASN.1 INTEGER value as a BigInteger.
      *
      * @return the integer held in this DER value as a BigInteger.
      */
     public BigInteger getBigInteger() throws IOException {
-        if (tag != tag_Integer)
+        if (tag != tag_Integer) {
             throw new IOException("DerValue.getBigInteger, not an int " + tag);
+        }
         return buffer.getBigInteger(data.available(), false);
     }
 
     /**
      * Returns an ASN.1 INTEGER value as a positive BigInteger.
@@ -538,12 +542,13 @@
      * some values as negative.
      *
      * @return the integer held in this DER value as a BigInteger.
      */
     public BigInteger getPositiveBigInteger() throws IOException {
-        if (tag != tag_Integer)
+        if (tag != tag_Integer) {
             throw new IOException("DerValue.getBigInteger, not an int " + tag);
+        }
         return buffer.getBigInteger(data.available(), true);
     }
 
     /**
      * Returns an ASN.1 ENUMERATED value.
@@ -562,54 +567,55 @@
      * Returns an ASN.1 BIT STRING value.  The bit string must be byte-aligned.
      *
      * @return the bit string held in this value
      */
     public byte[] getBitString() throws IOException {
-        if (tag != tag_BitString)
+        if (tag != tag_BitString) {
             throw new IOException(
-                "DerValue.getBitString, not a bit string " + tag);
-
+                    "DerValue.getBitString, not a bit string " + tag);
+        }
         return buffer.getBitString();
     }
 
     /**
      * Returns an ASN.1 BIT STRING value that need not be byte-aligned.
      *
      * @return a BitArray representing the bit string held in this value
      */
     public BitArray getUnalignedBitString() throws IOException {
-        if (tag != tag_BitString)
+        if (tag != tag_BitString) {
             throw new IOException(
-                "DerValue.getBitString, not a bit string " + tag);
-
+                    "DerValue.getBitString, not a bit string " + tag);
+        }
         return buffer.getUnalignedBitString();
     }
 
     /**
      * Returns the name component as a Java string, regardless of its
      * encoding restrictions (ASCII, T61, Printable, IA5, BMP, UTF8).
      */
     // TBD: Need encoder for UniversalString before it can be handled.
     public String getAsString() throws IOException {
-        if (tag == tag_UTF8String)
+        if (tag == tag_UTF8String) {
             return getUTF8String();
-        else if (tag == tag_PrintableString)
+        } else if (tag == tag_PrintableString) {
             return getPrintableString();
-        else if (tag == tag_T61String)
+        } else if (tag == tag_T61String) {
             return getT61String();
-        else if (tag == tag_IA5String)
+        } else if (tag == tag_IA5String) {
             return getIA5String();
         /*
-          else if (tag == tag_UniversalString)
+          } else if (tag == tag_UniversalString) {
           return getUniversalString();
         */
-        else if (tag == tag_BMPString)
+        } else if (tag == tag_BMPString) {
             return getBMPString();
-        else if (tag == tag_GeneralString)
+        } else if (tag == tag_GeneralString) {
             return getGeneralString();
-        else
+        } else {
             return null;
+        }
     }
 
     /**
      * Returns an ASN.1 BIT STRING value, with the tag assumed implicit
      * based on the parameter.  The bit string must be byte-aligned.
@@ -617,14 +623,15 @@
      * @param tagImplicit if true, the tag is assumed implicit.
      * @return the bit string held in this value
      */
     public byte[] getBitString(boolean tagImplicit) throws IOException {
         if (!tagImplicit) {
-            if (tag != tag_BitString)
+            if (tag != tag_BitString) {
                 throw new IOException("DerValue.getBitString, not a bit string "
-                                       + tag);
+                        + tag);
             }
+        }
         return buffer.getBitString();
     }
 
     /**
      * Returns an ASN.1 BIT STRING value, with the tag assumed implicit
@@ -632,16 +639,17 @@
      *
      * @param tagImplicit if true, the tag is assumed implicit.
      * @return the bit string held in this value
      */
     public BitArray getUnalignedBitString(boolean tagImplicit)
-    throws IOException {
+            throws IOException {
         if (!tagImplicit) {
-            if (tag != tag_BitString)
+            if (tag != tag_BitString) {
                 throw new IOException("DerValue.getBitString, not a bit string "
-                                       + tag);
+                        + tag);
             }
+        }
         return buffer.getUnalignedBitString();
     }
 
     /**
      * Helper routine to return all the bytes contained in the
@@ -659,86 +667,80 @@
     /**
      * Returns an ASN.1 STRING value
      *
      * @return the printable string held in this value
      */
-    public String getPrintableString()
-    throws IOException {
-        if (tag != tag_PrintableString)
+    public String getPrintableString() throws IOException {
+        if (tag != tag_PrintableString) {
             throw new IOException(
-                "DerValue.getPrintableString, not a string " + tag);
-
+                    "DerValue.getPrintableString, not a string " + tag);
+        }
         return new String(getDataBytes(), US_ASCII);
     }
 
     /**
      * Returns an ASN.1 T61 (Teletype) STRING value
      *
      * @return the teletype string held in this value
      */
     public String getT61String() throws IOException {
-        if (tag != tag_T61String)
-            throw new IOException(
-                "DerValue.getT61String, not T61 " + tag);
-
+        if (tag != tag_T61String) {
+            throw new IOException("DerValue.getT61String, not T61 " + tag);
+        }
         return new String(getDataBytes(), ISO_8859_1);
     }
 
     /**
      * Returns an ASN.1 IA5 (ASCII) STRING value
      *
      * @return the ASCII string held in this value
      */
     public String getIA5String() throws IOException {
-        if (tag != tag_IA5String)
-            throw new IOException(
-                "DerValue.getIA5String, not IA5 " + tag);
-
+        if (tag != tag_IA5String) {
+            throw new IOException("DerValue.getIA5String, not IA5 " + tag);
+        }
         return new String(getDataBytes(), US_ASCII);
     }
 
     /**
      * Returns the ASN.1 BMP (Unicode) STRING value as a Java string.
      *
      * @return a string corresponding to the encoded BMPString held in
      * this value
      */
     public String getBMPString() throws IOException {
-        if (tag != tag_BMPString)
-            throw new IOException(
-                "DerValue.getBMPString, not BMP " + tag);
-
-        // BMPString is the same as Unicode in big endian, unmarked
-        // format.
+        if (tag != tag_BMPString) {
+            throw new IOException("DerValue.getBMPString, not BMP " + tag);
+        }
+        // BMPString is the same as Unicode in big endian, unmarked format.
         return new String(getDataBytes(), UTF_16BE);
     }
 
     /**
      * Returns the ASN.1 UTF-8 STRING value as a Java String.
      *
      * @return a string corresponding to the encoded UTF8String held in
      * this value
      */
     public String getUTF8String() throws IOException {
-        if (tag != tag_UTF8String)
-            throw new IOException(
-                "DerValue.getUTF8String, not UTF-8 " + tag);
-
+        if (tag != tag_UTF8String) {
+            throw new IOException("DerValue.getUTF8String, not UTF-8 " + tag);
+        }
         return new String(getDataBytes(), UTF_8);
     }
 
     /**
      * Returns the ASN.1 GENERAL STRING value as a Java String.
      *
      * @return a string corresponding to the encoded GeneralString held in
      * this value
      */
     public String getGeneralString() throws IOException {
-        if (tag != tag_GeneralString)
+        if (tag != tag_GeneralString) {
             throw new IOException(
-                "DerValue.getGeneralString, not GeneralString " + tag);
-
+                    "DerValue.getGeneralString, not GeneralString " + tag);
+        }
         return new String(getDataBytes(), US_ASCII);
     }
 
     /**
      * Returns a Date if the DerValue is UtcTime.
@@ -816,21 +818,22 @@
     @Override
     public String toString() {
         try {
 
             String str = getAsString();
-            if (str != null)
+            if (str != null) {
                 return "\"" + str + "\"";
-            if (tag == tag_Null)
+            }
+            if (tag == tag_Null) {
                 return "[DerValue, null]";
-            if (tag == tag_ObjectId)
+            } else if (tag == tag_ObjectId) {
                 return "OID." + getOID();
-
-            // integers
-            else
+            } else {
+                // integers
                 return "[DerValue, tag = " + tag
                         + ", length = " + length + "]";
+            }
         } catch (IOException e) {
             throw new IllegalArgumentException("misformatted DER value");
         }
     }
 
@@ -853,12 +856,13 @@
      * to return a DER stream of the members of the set or sequence.
      * This operation is not supported for primitive types such as
      * integers or bit strings.
      */
     public DerInputStream toDerInputStream() throws IOException {
-        if (tag == tag_Sequence || tag == tag_Set)
+        if (tag == tag_Sequence || tag == tag_Set) {
             return new DerInputStream(buffer);
+        }
         throw new IOException("toDerInputStream rejects tag type " + tag);
     }
 
     /**
      * Get the length of the encoded value.
@@ -884,11 +888,11 @@
      *
      * This list is based on X.680 (the ASN.1 spec).
      */
     public static boolean isPrintableStringChar(char ch) {
         if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||
-            (ch >= '0' && ch <= '9')) {
+                (ch >= '0' && ch <= '9')) {
             return true;
         } else {
             switch (ch) {
                 case ' ':       /* space */
                 case '\'':      /* apostrophe */
