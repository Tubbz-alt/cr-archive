diff a/src/java.base/share/classes/sun/security/x509/X509CertImpl.java b/src/java.base/share/classes/sun/security/x509/X509CertImpl.java
--- a/src/java.base/share/classes/sun/security/x509/X509CertImpl.java
+++ b/src/java.base/share/classes/sun/security/x509/X509CertImpl.java
@@ -326,13 +326,15 @@
      *
      * @param out the output stream on which to write the DER encoding.
      *
      * @exception IOException on encoding error.
      */
-    public void derEncode(OutputStream out) throws IOException {
-        if (signedCert == null)
-            throw new IOException("Null certificate to encode");
+    @Override
+    public void derEncode(DerOutputStream out) {
+        if (signedCert == null) {
+            throw new IllegalStateException("Null certificate to encode");
+        }
         out.write(signedCert.clone());
     }
 
     /**
      * Returns the encoded form of this certificate. It is
@@ -576,54 +578,49 @@
     public void sign(PrivateKey key, AlgorithmParameterSpec signingParams,
             String algorithm, String provider)
             throws CertificateException, NoSuchAlgorithmException,
             InvalidKeyException, InvalidAlgorithmParameterException,
             NoSuchProviderException, SignatureException {
-        try {
-            if (readOnly) {
-                throw new CertificateEncodingException(
-                        "cannot over-write existing certificate");
-            }
-            Signature sigEngine = null;
-            if (provider == null || provider.isEmpty()) {
-                sigEngine = Signature.getInstance(algorithm);
-            } else {
-                sigEngine = Signature.getInstance(algorithm, provider);
-            }
-
-            SignatureUtil.initSignWithParam(sigEngine, key, signingParams,
-                    null);
+        if (readOnly) {
+            throw new CertificateEncodingException(
+                    "cannot over-write existing certificate");
+        }
+        Signature sigEngine = null;
+        if (provider == null || provider.isEmpty()) {
+            sigEngine = Signature.getInstance(algorithm);
+        } else {
+            sigEngine = Signature.getInstance(algorithm, provider);
+        }
 
-            if (signingParams != null) {
-                algId = AlgorithmId.get(sigEngine.getParameters());
-            } else {
-                // in case the name is reset
-                algId = AlgorithmId.get(sigEngine.getAlgorithm());
-            }
-            DerOutputStream out = new DerOutputStream();
-            DerOutputStream tmp = new DerOutputStream();
+        SignatureUtil.initSignWithParam(sigEngine, key, signingParams,
+                null);
 
-            // encode certificate info
-            info.encode(tmp);
-            byte[] rawCert = tmp.toByteArray();
+        if (signingParams != null) {
+            algId = AlgorithmId.get(sigEngine.getParameters());
+        } else {
+            // in case the name is reset
+            algId = AlgorithmId.get(sigEngine.getAlgorithm());
+        }
+        DerOutputStream out = new DerOutputStream();
+        DerOutputStream tmp = new DerOutputStream();
 
-            // encode algorithm identifier
-            algId.encode(tmp);
+        // encode certificate info
+        info.encode(tmp);
+        byte[] rawCert = tmp.toByteArray();
 
-            // Create and encode the signature itself.
-            sigEngine.update(rawCert, 0, rawCert.length);
-            signature = sigEngine.sign();
-            tmp.putBitString(signature);
+        // encode algorithm identifier
+        algId.derEncode(tmp);
 
-            // Wrap the signed data in a SEQUENCE { data, algorithm, sig }
-            out.write(DerValue.tag_Sequence, tmp);
-            signedCert = out.toByteArray();
-            readOnly = true;
+        // Create and encode the signature itself.
+        sigEngine.update(rawCert, 0, rawCert.length);
+        signature = sigEngine.sign();
+        tmp.putBitString(signature);
 
-        } catch (IOException e) {
-            throw new CertificateEncodingException(e.toString());
-      }
+        // Wrap the signed data in a SEQUENCE { data, algorithm, sig }
+        out.write(DerValue.tag_Sequence, tmp);
+        signedCert = out.toByteArray();
+        readOnly = true;
     }
 
     /**
      * Checks that the certificate is currently valid, i.e. the current
      * time is within the specified validity period.
@@ -1603,17 +1600,11 @@
                 nameEntry.add(((OIDName) name).getOID().toString());
                 break;
             default:
                 // add DER encoded form
                 DerOutputStream derOut = new DerOutputStream();
-                try {
-                    name.encode(derOut);
-                } catch (IOException ioe) {
-                    // should not occur since name has already been decoded
-                    // from cert (this would indicate a bug in our code)
-                    throw new RuntimeException("name cannot be encoded", ioe);
-                }
+                name.derEncode(derOut);
                 nameEntry.add(derOut.toByteArray());
                 break;
             }
             newNames.add(Collections.unmodifiableList(nameEntry));
         }
