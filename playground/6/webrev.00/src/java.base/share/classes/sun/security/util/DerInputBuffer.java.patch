diff a/src/java.base/share/classes/sun/security/util/DerInputBuffer.java b/src/java.base/share/classes/sun/security/util/DerInputBuffer.java
--- a/src/java.base/share/classes/sun/security/util/DerInputBuffer.java
+++ b/src/java.base/share/classes/sun/security/util/DerInputBuffer.java
@@ -39,11 +39,12 @@
  * anyone who could violate the "typed value stream" DER model and hence
  * corrupt the input stream of DER values.
  *
  * @author David Brownell
  */
-class DerInputBuffer extends ByteArrayInputStream implements Cloneable {
+class DerInputBuffer extends ByteArrayInputStream
+        implements Cloneable, DerEncoder {
 
     boolean allowBER = true;
 
     // used by sun/security/util/DerInputBuffer/DerInputBufferEqualsHashCode.java
     DerInputBuffer(byte[] buf) {
@@ -70,43 +71,48 @@
         }
     }
 
     byte[] toByteArray() {
         int     len = available();
-        if (len <= 0)
+        if (len <= 0) {
             return null;
+        }
         byte[]  retval = new byte[len];
 
         System.arraycopy(buf, pos, retval, 0, len);
         return retval;
     }
 
     int peek() throws IOException {
-        if (pos >= count)
+        if (pos >= count) {
             throw new IOException("out of data");
-        else
+        } else {
             return buf[pos];
+        }
     }
 
     /**
      * Compares this DerInputBuffer for equality with the specified
      * object.
      */
     public boolean equals(Object other) {
-        if (other instanceof DerInputBuffer)
-            return equals((DerInputBuffer)other);
-        else
+        if (other instanceof DerInputBuffer) {
+            return equals((DerInputBuffer) other);
+        } else {
             return false;
+        }
     }
 
     boolean equals(DerInputBuffer other) {
-        if (this == other)
+        if (this == other) {
             return true;
+        }
 
         int max = this.available();
-        if (other.available() != max)
+        if (other.available() != max) {
             return false;
+        }
         for (int i = 0; i < max; i++) {
             if (this.buf[this.pos + i] != other.buf[other.pos + i]) {
                 return false;
             }
         }
@@ -122,18 +128,20 @@
         int retval = 0;
 
         int len = available();
         int p = pos;
 
-        for (int i = 0; i < len; i++)
+        for (int i = 0; i < len; i++) {
             retval += buf[p + i] * i;
+        }
         return retval;
     }
 
     void truncate(int len) throws IOException {
-        if (len > available())
+        if (len > available()) {
             throw new IOException("insufficient data");
+        }
         count = pos + len;
     }
 
     /**
      * Returns the integer which takes up the specified number
@@ -142,13 +150,13 @@
      * @param makePositive whether to always return a positive value,
      *   irrespective of actual encoding
      * @return the integer as a BigInteger.
      */
     BigInteger getBigInteger(int len, boolean makePositive) throws IOException {
-        if (len > available())
+        if (len > available()) {
             throw new IOException("short read of integer");
-
+        }
         if (len == 0) {
             throw new IOException("Invalid encoding: zero length Int value");
         }
 
         byte[] bytes = new byte[len];
@@ -192,13 +200,13 @@
     /**
      * Returns the bit string which takes up the specified
      * number of bytes in this buffer.
      */
     public byte[] getBitString(int len) throws IOException {
-        if (len > available())
+        if (len > available()) {
             throw new IOException("short read of bit string");
-
+        }
         if (len == 0) {
             throw new IOException("Invalid encoding: zero length bit string");
         }
 
         int numOfPadBits = buf[pos];
@@ -226,12 +234,13 @@
     /**
      * Returns the bit string which takes up the rest of this buffer.
      * The bit string need not be byte-aligned.
      */
     BitArray getUnalignedBitString() throws IOException {
-        if (pos >= count)
+        if (pos >= count) {
             return null;
+        }
         /*
          * Just copy the data into an aligned, padded octet buffer,
          * and consume the rest of the buffer.
          */
         int len = available();
@@ -254,31 +263,31 @@
      * Returns the UTC Time value that takes up the specified number
      * of bytes in this buffer.
      * @param len the number of bytes to use
      */
     public Date getUTCTime(int len) throws IOException {
-        if (len > available())
+        if (len > available()) {
             throw new IOException("short read of DER UTC Time");
-
-        if (len < 11 || len > 17)
+        }
+        if (len < 11 || len > 17) {
             throw new IOException("DER UTC Time length error");
-
+        }
         return getTime(len, false);
     }
 
     /**
      * Returns the Generalized Time value that takes up the specified
      * number of bytes in this buffer.
      * @param len the number of bytes to use
      */
     public Date getGeneralizedTime(int len) throws IOException {
-        if (len > available())
+        if (len > available()) {
             throw new IOException("short read of DER Generalized Time");
-
-        if (len < 13)
+        }
+        if (len < 13) {
             throw new IOException("DER Generalized Time length error");
-
+        }
         return getTime(len, true);
 
     }
 
     /**
@@ -320,14 +329,15 @@
         } else {
             type = "UTC";
             year = 10 * Character.digit((char)buf[pos++], 10);
             year += Character.digit((char)buf[pos++], 10);
 
-            if (year < 50)              // origin 2000
+            if (year < 50) {             // origin 2000
                 year += 2000;
-            else
+            } else {
                 year += 1900;   // origin 1900
+            }
         }
 
         month = 10 * Character.digit((char)buf[pos++], 10);
         month += Character.digit((char)buf[pos++], 10);
 
@@ -386,12 +396,12 @@
             }
         } else
             second = 0;
 
         if (month == 0 || day == 0
-            || month > 12 || day > 31
-            || hour >= 24 || minute >= 60 || second >= 60)
+                || month > 12 || day > 31
+                || hour >= 24 || minute >= 60 || second >= 60)
             throw new IOException("Parse " + type + " time, invalid format");
 
         /*
          * Generalized time can theoretically allow any precision,
          * but we're not supporting that.
@@ -403,37 +413,38 @@
         long time = gcal.getTime(date);
 
         /*
          * Finally, "Z" or "+hhmm" or "-hhmm" ... offsets change hhmm
          */
-        if (! (len == 1 || len == 5))
+        if (! (len == 1 || len == 5)) {
             throw new IOException("Parse " + type + " time, invalid offset");
+        }
 
         int hr, min;
 
         switch (buf[pos++]) {
         case '+':
             hr = 10 * Character.digit((char)buf[pos++], 10);
             hr += Character.digit((char)buf[pos++], 10);
             min = 10 * Character.digit((char)buf[pos++], 10);
             min += Character.digit((char)buf[pos++], 10);
 
-            if (hr >= 24 || min >= 60)
+            if (hr >= 24 || min >= 60) {
                 throw new IOException("Parse " + type + " time, +hhmm");
-
+            }
             time -= ((hr * 60) + min) * 60 * 1000;
             break;
 
         case '-':
             hr = 10 * Character.digit((char)buf[pos++], 10);
             hr += Character.digit((char)buf[pos++], 10);
             min = 10 * Character.digit((char)buf[pos++], 10);
             min += Character.digit((char)buf[pos++], 10);
 
-            if (hr >= 24 || min >= 60)
+            if (hr >= 24 || min >= 60) {
                 throw new IOException("Parse " + type + " time, -hhmm");
-
+            }
             time += ((hr * 60) + min) * 60 * 1000;
             break;
 
         case 'Z':
             break;
@@ -441,6 +452,11 @@
         default:
             throw new IOException("Parse " + type + " time, garbage offset");
         }
         return new Date(time);
     }
+
+    @Override
+    public void derEncode(DerOutputStream out) {
+        out.write(buf, pos, count);
+    }
 }
