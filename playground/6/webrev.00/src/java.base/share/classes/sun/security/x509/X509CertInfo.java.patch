diff a/src/java.base/share/classes/sun/security/x509/X509CertInfo.java b/src/java.base/share/classes/sun/security/x509/X509CertInfo.java
--- a/src/java.base/share/classes/sun/security/x509/X509CertInfo.java
+++ b/src/java.base/share/classes/sun/security/x509/X509CertInfo.java
@@ -177,12 +177,12 @@
      *
      * @param out an output stream to which the certificate is appended.
      * @exception CertificateException on encoding errors.
      * @exception IOException on other errors.
      */
-    public void encode(OutputStream out)
-    throws CertificateException, IOException {
+    @Override
+    public void encode(DerOutputStream out) throws CertificateException {
         if (rawCertInfo == null) {
             DerOutputStream tmp = new DerOutputStream();
             emit(tmp);
             rawCertInfo = tmp.toByteArray();
         }
@@ -227,12 +227,10 @@
                 DerOutputStream tmp = new DerOutputStream();
                 emit(tmp);
                 rawCertInfo = tmp.toByteArray();
             }
             return rawCertInfo.clone();
-        } catch (IOException e) {
-            throw new CertificateEncodingException(e.toString());
         } catch (CertificateException e) {
             throw new CertificateEncodingException(e.toString());
         }
     }
 
@@ -756,12 +754,11 @@
     }
 
     /*
      * Marshal the contents of a "raw" certificate into a DER sequence.
      */
-    private void emit(DerOutputStream out)
-    throws CertificateException, IOException {
+    private void emit(DerOutputStream out) throws CertificateException {
         DerOutputStream tmp = new DerOutputStream();
 
         // version number, iff not V1
         version.encode(tmp);
 
@@ -773,19 +770,19 @@
         if ((version.compare(CertificateVersion.V1) == 0) &&
             (issuer.toString() == null))
             throw new CertificateParsingException(
                       "Null issuer DN not allowed in v1 certificate");
 
-        issuer.encode(tmp);
+        issuer.derEncode(tmp);
         interval.encode(tmp);
 
         // Encode subject (principal) and associated key
         if ((version.compare(CertificateVersion.V1) == 0) &&
             (subject.toString() == null))
             throw new CertificateParsingException(
                       "Null subject DN not allowed in v1 certificate");
-        subject.encode(tmp);
+        subject.derEncode(tmp);
         pubKey.encode(tmp);
 
         // Encode issuerUniqueId & subjectUniqueId.
         if (issuerUniqueId != null) {
             issuerUniqueId.encode(tmp, DerValue.createTag(DerValue.TAG_CONTEXT,
