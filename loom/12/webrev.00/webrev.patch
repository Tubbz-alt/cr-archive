diff a/src/hotspot/share/prims/jvmtiEnv.cpp b/src/hotspot/share/prims/jvmtiEnv.cpp
--- a/src/hotspot/share/prims/jvmtiEnv.cpp
+++ b/src/hotspot/share/prims/jvmtiEnv.cpp
@@ -1247,15 +1247,23 @@
     if (!get_capabilities()->can_support_virtual_threads) {
       return JVMTI_ERROR_MUST_POSSESS_CAPABILITY;
     }
     priority = (ThreadPriority)JVMTI_THREAD_NORM_PRIORITY;
     is_daemon = true;
-    thread_group = Handle(current_thread, java_lang_Thread_VirtualThreads::get_THREAD_GROUP());
+    if (java_lang_VirtualThread::state(thread_obj()) == java_lang_VirtualThread::TERMINATED) {
+      thread_group = Handle(current_thread, NULL);
+    } else {
+      thread_group = Handle(current_thread, java_lang_Thread_VirtualThreads::get_THREAD_GROUP());
+    }
   } else {
     priority = java_lang_Thread::priority(thread_obj());
     is_daemon = java_lang_Thread::is_daemon(thread_obj());
-    thread_group = Handle(current_thread, java_lang_Thread::threadGroup(thread_obj()));
+    if (java_lang_Thread::get_thread_status(thread_obj()) == java_lang_Thread::TERMINATED) {
+      thread_group = Handle(current_thread, NULL);
+    } else {
+      thread_group = Handle(current_thread, java_lang_Thread::threadGroup(thread_obj()));
+    }
   }
 
   oop loader = java_lang_Thread::context_class_loader(thread_obj());
   context_class_loader = Handle(current_thread, loader);
 
@@ -2319,11 +2327,11 @@
     }
     VM_VirtualThreadGetReceiver op(this, Handle(current_thread, thread_obj),
                                  current_thread, depth);
     VMThread::execute(&op);
     err = op.result();
-    if (err == JVMTI_ERROR_NONE) { 
+    if (err == JVMTI_ERROR_NONE) {
       *value_ptr = op.value().l;
     }
   } else {
     // Support for ordinary threads
     ThreadsListHandle tlh(current_thread);
@@ -2332,11 +2340,11 @@
       return err;
     }
     VM_GetReceiver op(java_thread, current_thread, depth);
     VMThread::execute(&op);
     err = op.result();
-    if (err == JVMTI_ERROR_NONE) { 
+    if (err == JVMTI_ERROR_NONE) {
       *value_ptr = op.value().l;
     }
   }
   return err;
 } /* end GetLocalInstance */
diff a/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetThreadInfo/thrinfo001.java b/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetThreadInfo/thrinfo001.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetThreadInfo/thrinfo001.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetThreadInfo/thrinfo001.java
@@ -72,10 +72,19 @@
         t_b.start();
         try {
             t_b.join();
         } catch (InterruptedException e) {}
         checkInfo(t_b, t_b.getThreadGroup(), 2);
+
+        Thread t_c = Thread.builder().task(new thrinfo001c()).name("vthread").virtual().build();
+        checkInfo(t_c, t_c.getThreadGroup(), 3);
+        t_c.start();
+        try {
+            t_c.join();
+        } catch (InterruptedException e) {}
+        checkInfo(t_c, t_c.getThreadGroup(), 3);
+
         return getRes();
     }
 }
 
 class thrinfo001a extends Thread {
@@ -93,5 +102,12 @@
     public void run() {
         Thread currThr = Thread.currentThread();
         thrinfo001.checkInfo(currThr, currThr.getThreadGroup(), 2);
     }
 }
+
+class thrinfo001c implements Runnable {
+    public void run() {
+        Thread currThr = Thread.currentThread();
+        thrinfo001.checkInfo(currThr, currThr.getThreadGroup(), 3);
+    }
+}
diff a/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetThreadInfo/thrinfo001/thrinfo001.cpp b/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetThreadInfo/thrinfo001/thrinfo001.cpp
--- a/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetThreadInfo/thrinfo001/thrinfo001.cpp
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetThreadInfo/thrinfo001/thrinfo001.cpp
@@ -43,11 +43,12 @@
 static jint result = PASSED;
 static jvmtiThreadInfo inf;
 static info threads[] = {
     { "main", JVMTI_THREAD_NORM_PRIORITY, 0 },
     { "thread1", JVMTI_THREAD_MIN_PRIORITY + 2, 1 },
-    { "Thread-", JVMTI_THREAD_MIN_PRIORITY, 1 }
+    { "Thread-", JVMTI_THREAD_MIN_PRIORITY, 1 },
+    { "vthread", JVMTI_THREAD_NORM_PRIORITY, 1 }
 };
 
 #ifdef STATIC_BUILD
 JNIEXPORT jint JNICALL Agent_OnLoad_thrinfo001(JavaVM *jvm, char *options, void *reserved) {
     return Agent_Initialize(jvm, options, reserved);
@@ -59,17 +60,25 @@
     return JNI_VERSION_1_8;
 }
 #endif
 jint  Agent_Initialize(JavaVM *jvm, char *options, void *reserved) {
     jint res;
+    jvmtiCapabilities caps;
 
     res = jvm->GetEnv((void **) &jvmti, JVMTI_VERSION_1_1);
     if (res != JNI_OK || jvmti == NULL) {
         printf("Wrong result of a valid call to GetEnv !\n");
         return JNI_ERR;
     }
 
+    memset(&caps, 0, sizeof(caps));
+    caps.can_support_virtual_threads = 1;
+    res = jvmti->AddCapabilities(&caps);
+    if (res != JVMTI_ERROR_NONE) {
+      printf("error in JVMTI AddCapabilities: %d\n", res);
+      return JNI_ERR;
+    }
     return JNI_OK;
 }
 
 JNIEXPORT void JNICALL Java_nsk_jvmti_GetThreadInfo_thrinfo001_checkInfo(JNIEnv *env, jclass cls,
         jthread thr, jthreadGroup group, jint ind) {
