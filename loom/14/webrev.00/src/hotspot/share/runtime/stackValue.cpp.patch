diff a/src/hotspot/share/runtime/stackValue.cpp b/src/hotspot/share/runtime/stackValue.cpp
--- a/src/hotspot/share/runtime/stackValue.cpp
+++ b/src/hotspot/share/runtime/stackValue.cpp
@@ -96,32 +96,26 @@
         value.noop = *(narrowOop*) value_addr;
       }
       // Decode narrowoop
       oop val = CompressedOops::decode(value.noop);
       // Deoptimization must make sure all oops have passed load barriers
-#if INCLUDE_SHENANDOAHGC
-      if (UseShenandoahGC) {
-        val = ShenandoahBarrierSet::barrier_set()->load_reference_barrier(val);
-      }
-#endif
+      // TODO: Erik: remove after integration with concurrent stack scanning
+      val = NativeAccess<>::oop_load(&val);
       Handle h(Thread::current(), val); // Wrap a handle around the oop
       return new StackValue(h);
     }
 #endif
     case Location::oop: {
       if (in_cont && UseCompressedOops) {
         narrowOop noop = *(narrowOop*) value_addr;
         oop val = CompressedOops::decode(noop);
-#if INCLUDE_SHENANDOAHGC
-        if (UseShenandoahGC) {
-          val = ShenandoahBarrierSet::barrier_set()->load_reference_barrier(val);
-        }
-#endif
+        // TODO: Erik: remove after integration with concurrent stack scanning
+        val = NativeAccess<>::oop_load(&val);
         Handle h(Thread::current(), val);
         return new StackValue(h);
-      } 
-      
+      }
+
       oop val = *(oop *)value_addr;
 #ifdef _LP64
       if (CompressedOops::is_base(val)) {
          // Compiled code may produce decoded oop = narrow_oop_base
          // when a narrow oop implicit null check is used.
@@ -129,15 +123,12 @@
          // of the page below heap. Use NULL value for both cases.
          val = (oop)NULL;
       }
 #endif
       // Deoptimization must make sure all oops have passed load barriers
-#if INCLUDE_SHENANDOAHGC
-      if (UseShenandoahGC) {
-        val = ShenandoahBarrierSet::barrier_set()->load_reference_barrier(val);
-      }
-#endif
+      // TODO: Erik: remove after integration with concurrent stack scanning
+      val = NativeAccess<>::oop_load(&val);
       assert(oopDesc::is_oop_or_null(val, false), "bad oop found");
       Handle h(Thread::current(), val); // Wrap a handle around the oop
       return new StackValue(h);
     }
     case Location::addr: {
