diff a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/ThreadController.java b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/ThreadController.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/ThreadController.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/ThreadController.java
@@ -602,10 +602,11 @@
 
         expectedLength += 4;
 
         expectedMethods.add(ThreadsGroupLocks.PlainCountDownLatch.class.getName() + ".await");
         expectedMethods.add(Object.class.getName() + ".wait");
+        expectedMethods.add(Object.class.getName() + ".wait0");
 
         switch (controller.invocationType) {
             case ThreadController.JAVA_TYPE:
                 expectedMethods.add(WaitingThread.class.getName() + ".bringState");
                 break;
@@ -650,13 +651,23 @@
     public SleepingThread(ThreadController controller, String name, Log log, ThreadsGroupLocks threadsGroupLocks) {
         super(controller, name, log, threadsGroupLocks);
 
         this.threadsGroupLocks = threadsGroupLocks;
 
-        expectedLength += 3;
+        expectedLength += 4;
 
         expectedMethods.add(Thread.class.getName() + ".sleep");
+        expectedMethods.add(Thread.class.getName() + ".sleep0");
+        expectedMethods.add(Thread.class.getName() + ".getVirtualThread");
+        expectedMethods.add(Thread.class.getName() + ".currentCarrierThread");
+        expectedMethods.add(Thread.class.getName() + ".currentThread");
+        expectedMethods.add(Thread.class.getName() + ".currentThread0");
+        expectedMethods.add(Thread.class.getName() + ".sleepMillis");
+        // jdk.internal.event.ThreadSleepEvent not accessible
+        expectedMethods.add("jdk.internal.event.ThreadSleepEvent.<clinit>");
+        expectedMethods.add("jdk.internal.event.ThreadSleepEvent.isEnabled");
+        expectedMethods.add("jdk.internal.event.ThreadSleepEvent.isTurnedOn");
         expectedMethods.add(SleepingThread.class.getName() + ".run");
 
         switch (controller.invocationType) {
             case ThreadController.JAVA_TYPE:
                 expectedMethods.add(SleepingThread.class.getName() + ".bringState");
@@ -717,13 +728,18 @@
 
     public RunningThread(ThreadController controller, String name, Log log, ThreadsGroupLocks threadsGroupLocks) {
         super(controller, name, log, threadsGroupLocks);
         this.threadsGroupLocks = threadsGroupLocks;
 
-        expectedLength += 2;
+        expectedLength += 3;
 
         expectedMethods.add(Thread.class.getName() + ".yield");
+        expectedMethods.add(Thread.class.getName() + ".getVirtualThread");
+        expectedMethods.add(Thread.class.getName() + ".currentCarrierThread");
+        expectedMethods.add(Thread.class.getName() + ".currentThread");
+        expectedMethods.add(Thread.class.getName() + ".currentThread0");
+        expectedMethods.add(Thread.class.getName() + ".yield0");
 
         switch (controller.invocationType) {
             case ThreadController.JAVA_TYPE:
                 expectedMethods.add(RunningThread.class.getName() + ".bringState");
                 break;
diff a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/LockingThreads.java b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/LockingThreads.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/LockingThreads.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/LockingThreads.java
@@ -38,14 +38,16 @@
                 "nsk.monitoring.share.thread.LockingThreads$Thread1.A",
                 "nsk.monitoring.share.thread.LockingThreads$Thread1.B",
                 "nsk.monitoring.share.thread.LockingThreads$Thread1.C",
                 "nsk.monitoring.share.thread.LockingThreads$Thread1.D",
                 "java.lang.Object.wait",
+                "java.lang.Object.wait0"
         };
         private static final String[] expectedMethodsThread2 = {
                 "nsk.monitoring.share.thread.LockingThreads$Thread2.runInside",
                 "java.lang.Object.wait",
+                "java.lang.Object.wait0"
         };
         private CustomLock lock1 = new CustomLock("lock1");
         private CustomLock lock2 = new CustomLock("lock2");
         private CustomLock lock3 = new CustomLock("lock3");
         private CustomLock lock4 = new CustomLock("lock4");
diff a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/RunningThread.java b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/RunningThread.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/RunningThread.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/RunningThread.java
@@ -34,11 +34,12 @@
         private volatile boolean running = false;
         private volatile boolean ready = false;
         private Object readyLock = new Object();
         private static final String[] expectedMethods = {
                 "nsk.monitoring.share.thread.RunningThread.runInside",
-                "java.lang.Thread.yield"
+                "java.lang.Thread.yield",
+                "java.lang.Thread.yield0"
         };
 
         public RunningThread(Log log, RunType recursionType, int maxDepth) {
                 super(log, recursionType, maxDepth);
         }
diff a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/SleepingThread.java b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/SleepingThread.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/SleepingThread.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/SleepingThread.java
@@ -34,10 +34,15 @@
         private String lock = new String("a lock");
         private volatile boolean sleeping = false;
         private Object readyLock = new Object();
         private static final String[] expectedMethods = {
                 "java.lang.Thread.sleep",
+                "java.lang.Thread.sleep0",
+                "java.lang.Thread.sleepMillis",
+                "jdk.internal.event.ThreadSleepEvent.<clinit>",
+                "jdk.internal.event.ThreadSleepEvent.isTurnedOn",
+                "jdk.internal.event.ThreadSleepEvent.isEnabled",
                 "nsk.monitoring.share.thread.SleepingThread.runInside"
         };
 
         public SleepingThread(Log log, RunType recursionType, int maxDepth) {
                 super(log, recursionType, maxDepth);
diff a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/SynchronizerLockingThreads.java b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/SynchronizerLockingThreads.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/SynchronizerLockingThreads.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/SynchronizerLockingThreads.java
@@ -40,11 +40,12 @@
                 "nsk.monitoring.share.thread.SynchronizerLockingThreads$Thread1.runInside",
                 "nsk.monitoring.share.thread.SynchronizerLockingThreads$Thread1.A",
                 "nsk.monitoring.share.thread.SynchronizerLockingThreads$Thread1.B",
                 "nsk.monitoring.share.thread.SynchronizerLockingThreads$Thread1.C",
                 "nsk.monitoring.share.thread.SynchronizerLockingThreads$Thread1.D",
-                "java.lang.Object.wait"
+                "java.lang.Object.wait",
+                "java.lang.Object.wait0"
         };
         private static final String[] expectedMethodsThread2 = {
                 "nsk.monitoring.share.thread.SynchronizerLockingThreads$Thread2.runInside"
         };
         private ReentrantLock lock1 = new ReentrantLock();
diff a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/ThreadMonitoringScenarioBase.java b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/ThreadMonitoringScenarioBase.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/ThreadMonitoringScenarioBase.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/ThreadMonitoringScenarioBase.java
@@ -92,11 +92,11 @@
          * Check that stack trace element is expected.
          */
         protected boolean checkStackTraceElement(StackTraceElement element, String[] expectedMethods) {
                 String name = element.getClassName() + "." + element.getMethodName();
                 for (String method : expectedMethods)
-                        if (method.equals(name))
+                        if (name.startsWith(method))
                                 return true;
                 return false;
         }
 
         /**
diff a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/TimedWaitingThread.java b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/TimedWaitingThread.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/TimedWaitingThread.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/TimedWaitingThread.java
@@ -38,10 +38,11 @@
         private Object readyLock = new Object();
         private int count = LocalRandom.nextInt(100) + 1;
         private volatile int n = 0;
         private static final String[] expectedMethods = {
                 "java.lang.Object.wait",
+                "java.lang.Object.wait0",
                 "nsk.monitoring.share.thread.TimedWaitingThread.runInside"
         };
 
         public TimedWaitingThread(Log log, RunType recursionType, int maxDepth) {
                 super(log, recursionType, maxDepth);
diff a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/WaitingThread.java b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/WaitingThread.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/WaitingThread.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/thread/WaitingThread.java
@@ -34,11 +34,12 @@
         private String lock = new String("a lock");
         private volatile boolean ready = false;
         private Object readyLock = new Object();
         private static final String[] expectedMethods = {
                 "nsk.monitoring.share.thread.WaitingThread.runInside",
-                "java.lang.Object.wait"
+                "java.lang.Object.wait",
+                "java.lang.Object.wait0"
         };
 
         public WaitingThread(Log log, RunType recursionType, int maxDepth) {
                 super(log, recursionType, maxDepth);
         }
diff a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/stress/thread/strace001.java b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/stress/thread/strace001.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/stress/thread/strace001.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/stress/thread/strace001.java
@@ -40,10 +40,11 @@
     public static Integer activeThreads;
     private static Log log;
     private static int depth;
     private static int threadCount;
     private static String[] expectedTrace;
+    private static String[] expectedSystemTrace;
     private static ThreadMonitor monitor;
     private static ThreadController controller;
 
     public static void main(String[] argv) {
         System.exit(run(argv, System.out) + Consts.JCK_STATUS_BASE);
@@ -134,39 +135,48 @@
     }
 
     // Fill expectedTrace array according to the invocation type that is set in
     // test options
     private static boolean fillTrace() {
+        expectedSystemTrace = new String[]{
+                "java.lang.Thread.sleep",
+                "java.lang.Thread.sleep0",
+                "java.lang.Thread.getVirtualThread",
+                "java.lang.Thread.sleepMillis",
+                "java.lang.Thread.yield",
+                "java.lang.Thread.yield0",
+                "java.lang.Thread.currentCarrierThread",
+                "java.lang.Thread.currentThread",
+                "java.lang.Thread.currentThread0",
+                "jdk.internal.event.ThreadSleepEvent.<clinit>",
+                "jdk.internal.event.ThreadSleepEvent.isTurnedOn",
+                "jdk.internal.event.ThreadSleepEvent.isEnabled"
+        };
+
         switch (controller.getInvocationType()) {
             case ThreadController.JAVA_TYPE:
-                expectedTrace = new String[] {
-                    "java.lang.Thread.sleep"
-                    , "java.lang.Thread.yield"
-                    , THREAD_NAME + ".waitForSign"
-                    , THREAD_NAME + ".recursionJava"
-                    , THREAD_NAME + ".run"
+                expectedTrace = new String[]{
+                        THREAD_NAME + ".waitForSign",
+                        THREAD_NAME + ".recursionJava",
+                        THREAD_NAME + ".run"
                 };
                 break;
 
             case ThreadController.NATIVE_TYPE:
-                expectedTrace = new String[] {
-                    "java.lang.Thread.sleep"
-                    , "java.lang.Thread.yield"
-                    , THREAD_NAME + ".waitForSign"
-                    , THREAD_NAME + ".recursionNative"
-                    , THREAD_NAME + ".run"
+                expectedTrace = new String[]{
+                        THREAD_NAME + ".waitForSign",
+                        THREAD_NAME + ".recursionNative",
+                        THREAD_NAME + ".run"
                 };
                 break;
 
             case ThreadController.MIXED_TYPE:
-                expectedTrace = new String[] {
-                    "java.lang.Thread.sleep"
-                    , "java.lang.Thread.yield"
-                    , THREAD_NAME + ".waitForSign"
-                    , THREAD_NAME + ".recursionNative"
-                    , THREAD_NAME + ".recursionJava"
-                    , THREAD_NAME + ".run"
+                expectedTrace = new String[]{
+                        THREAD_NAME + ".waitForSign",
+                        THREAD_NAME + ".recursionNative",
+                        THREAD_NAME + ".recursionJava",
+                        THREAD_NAME + ".run"
                 };
                 break;
 
             default:
                 return false;
@@ -191,11 +201,11 @@
     }
 
     // The method performs checks of the stack trace
     private static boolean checkTrace(StackTraceElement[] elements) {
         int length = elements.length;
-        int expectedLength = depth +3;
+        int expectedLength = depth + 5;
         boolean result = true;
 
         // Check the length of the trace. It must not be greater than
         // expectedLength. Number of recursionJava() or recursionNative()
         // methods must not ne greater than depth, also one Object.wait() or
@@ -233,10 +243,16 @@
         for (int i = 0; i < expectedTrace.length - 1; i++) {
             if (expectedTrace[i].equals(name))
                 return true;
         }
 
+        // Implementation of sleep/wait/yield
+        for (int i = 0; i < expectedSystemTrace.length; i++) {
+            if (expectedSystemTrace[i].equals(name))
+                return true;
+        }
+
         log.complain("Unexpected " + n + " element of the stack trace:\n\t"
                    + name);
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace001.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace001.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace001.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace001.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -68,12 +68,18 @@
     static final int THRD_COUNT = 100;
     static final int REPEAT_COUNT = 10;
     static final String[] EXPECTED_METHODS = {
             "java.lang.System.arraycopy",
             "java.lang.Object.wait",
+            "java.lang.Object.wait0",
             "java.lang.Thread.exit",
             "java.lang.Thread.yield",
+            "java.lang.Thread.yield0",
+            "java.lang.Thread.getVirtualThread",
+            "java.lang.Thread.currentCarrierThread",
+            "java.lang.Thread.currentThread",
+            "java.lang.Thread.currentThread0",
             "java.lang.ThreadGroup.remove",
             "java.lang.ThreadGroup.threadTerminated",
             "nsk.stress.strace.strace001Thread.run",
             "nsk.stress.strace.strace001Thread.recursiveMethod"
     };
@@ -220,11 +226,11 @@
     }
 
     boolean checkElement(StackTraceElement element) {
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace002.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace002.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace002.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace002.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -74,12 +74,18 @@
     static final int THRD_COUNT = 100;
     static final int REPEAT_COUNT = 10;
     static final String[] EXPECTED_METHODS = {
             "java.lang.System.arraycopy",
             "java.lang.Object.wait",
+            "java.lang.Object.wait0",
             "java.lang.Thread.exit",
             "java.lang.Thread.yield",
+            "java.lang.Thread.yield0",
+            "java.lang.Thread.currentCarrierThread",
+            "java.lang.Thread.currentThread",
+            "java.lang.Thread.currentThread0",
+            "java.lang.Thread.getVirtualThread",
             "java.lang.ThreadGroup.remove",
             "java.lang.ThreadGroup.threadTerminated",
             "nsk.stress.strace.strace002Thread.run",
             "nsk.stress.strace.strace002Thread.recursiveMethod"
     };
@@ -227,11 +233,11 @@
     }
 
     boolean checkElement(StackTraceElement element) {
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace003.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace003.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace003.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace003.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -114,12 +114,18 @@
     static final int THRD_COUNT = 100;
     static final int REPEAT_COUNT = 10;
     static final String[] EXPECTED_METHODS = {
             "java.lang.System.arraycopy",
             "java.lang.Object.wait",
+            "java.lang.Object.wait0",
             "java.lang.Thread.exit",
             "java.lang.Thread.yield",
+            "java.lang.Thread.yield0",
+            "java.lang.Thread.getVirtualThread",
+            "java.lang.Thread.currentCarrierThread",
+            "java.lang.Thread.currentThread",
+            "java.lang.Thread.currentThread0",
             "java.lang.ThreadGroup.remove",
             "java.lang.ThreadGroup.threadTerminated",
             "nsk.stress.strace.strace003Thread.run",
             "nsk.stress.strace.strace003Thread.recursiveMethod"
     };
@@ -265,11 +271,11 @@
     }
 
     boolean checkElement(StackTraceElement element) {
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace004.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace004.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace004.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace004.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -107,12 +107,18 @@
     static final int THRD_COUNT = 100;
     static final int REPEAT_COUNT = 10;
     static final String[] EXPECTED_METHODS = {
             "java.lang.System.arraycopy",
             "java.lang.Object.wait",
+            "java.lang.Object.wait0",
             "java.lang.Thread.exit",
             "java.lang.Thread.yield",
+            "java.lang.Thread.yield0",
+            "java.lang.Thread.currentCarrierThread",
+            "java.lang.Thread.currentThread",
+            "java.lang.Thread.currentThread0",
+            "java.lang.Thread.getVirtualThread",
             "java.lang.ThreadGroup.remove",
             "java.lang.ThreadGroup.threadTerminated",
             "nsk.stress.strace.strace004Thread.run",
             "nsk.stress.strace.strace004Thread.recursiveMethod"
     };
@@ -259,11 +265,11 @@
     }
 
     boolean checkElement(StackTraceElement element) {
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace005.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace005.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace005.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace005.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -133,12 +133,18 @@
     static final int THRD_COUNT = 100;
     static final int REPEAT_COUNT = 10;
     static final String[] EXPECTED_METHODS = {
             "java.lang.System.arraycopy",
             "java.lang.Object.wait",
+            "java.lang.Object.wait0",
             "java.lang.Thread.exit",
             "java.lang.Thread.yield",
+            "java.lang.Thread.yield0",
+            "java.lang.Thread.getVirtualThread",
+            "java.lang.Thread.currentCarrierThread",
+            "java.lang.Thread.currentThread",
+            "java.lang.Thread.currentThread0",
             "java.lang.ThreadGroup.remove",
             "java.lang.ThreadGroup.threadTerminated",
             "nsk.stress.strace.strace005Thread.run",
             "nsk.stress.strace.strace005Thread.recursiveMethod1",
             "nsk.stress.strace.strace005Thread.recursiveMethod2"
@@ -296,11 +302,11 @@
     }
 
     boolean checkElement(StackTraceElement element) {
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace006.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace006.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace006.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace006.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -73,12 +73,18 @@
     static final int THRD_COUNT = 100;
     static final int REPEAT_COUNT = 10;
     static final String[] EXPECTED_METHODS = {
             "java.lang.System.arraycopy",
             "java.lang.Object.wait",
+            "java.lang.Object.wait0",
             "java.lang.Thread.exit",
             "java.lang.Thread.yield",
+            "java.lang.Thread.yield0",
+            "java.lang.Thread.getVirtualThread",
+            "java.lang.Thread.currentCarrierThread",
+            "java.lang.Thread.currentThread",
+            "java.lang.Thread.currentThread0",
             "java.lang.ThreadGroup.remove",
             "java.lang.ThreadGroup.threadTerminated",
             "nsk.stress.strace.strace006Thread.run",
             "nsk.stress.strace.strace006Thread.recursiveMethod1",
             "nsk.stress.strace.strace006Thread.recursiveMethod2"
@@ -240,11 +246,11 @@
     boolean checkElement(StackTraceElement element) {
         if (element.getClassName().equals("java.lang.ClassLoader"))
             return true;
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace007.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace007.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace007.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace007.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -71,10 +71,19 @@
     static final int DEPTH = 500;
     static final int THRD_COUNT = 100;
     static final int SLEEP_TIME = 50;
     static final String[] EXPECTED_METHODS = {
             "java.lang.Thread.sleep",
+            "java.lang.Thread.sleep0",
+            "java.lang.Thread.getVirtualThread",
+            "jdk.internal.event.ThreadSleepEvent.<clinit>",
+            "jdk.internal.event.ThreadSleepEvent.isTurnedOn",
+            "jdk.internal.event.ThreadSleepEvent.isEnabled",
+            "java.lang.Thread.sleepMillis",
+            "java.lang.Thread.currentCarrierThread",
+            "java.lang.Thread.currentThread",
+            "java.lang.Thread.currentThread0",
             "nsk.stress.strace.strace007Thread.run",
             "nsk.stress.strace.strace007Thread.recursiveMethod"
     };
 
 
@@ -203,11 +212,11 @@
     }
 
     static boolean checkElement(StackTraceElement element) {
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace008.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace008.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace008.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace008.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -75,10 +75,19 @@
     static final int THRD_COUNT = 50;
     static final int SLEEP_TIME = 50;
     static final String NATIVE_LIB = "strace008";
     static final String[] EXPECTED_METHODS = {
             "java.lang.Thread.sleep",
+            "java.lang.Thread.sleep0",
+            "java.lang.Thread.getVirtualThread",
+            "jdk.internal.event.ThreadSleepEvent.<clinit>",
+            "jdk.internal.event.ThreadSleepEvent.isTurnedOn",
+            "jdk.internal.event.ThreadSleepEvent.isEnabled",
+            "java.lang.Thread.sleepMillis",
+            "java.lang.Thread.currentCarrierThread",
+            "java.lang.Thread.currentThread",
+            "java.lang.Thread.currentThread0",
             "nsk.stress.strace.strace008Thread.run",
             "nsk.stress.strace.strace008Thread.recursiveMethod"
     };
 
 
@@ -159,11 +168,11 @@
         display("checking lengths of stack traces...");
         StackTraceElement[] all;
         for (int i = 1; i < THRD_COUNT; i++) {
             all = (StackTraceElement[]) traces.get(threads[i]);
             int k = all.length;
-            if (count - k > 2) {
+            if (count - k > 4) {
                 complain("wrong lengths of stack traces:\n\t"
                         + threads[0].getName() + ": " + count
                         + "\t"
                         + threads[i].getName() + ": " + k);
                 return false;
@@ -207,11 +216,11 @@
     }
 
     static boolean checkElement(StackTraceElement element) {
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace009.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace009.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace009.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace009.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -74,10 +74,19 @@
     static final int THRD_COUNT = 100;
     static final String NATIVE_LIB = "strace009";
     static final int SLEEP_TIME = 50;
     static final String[] EXPECTED_METHODS = {
             "java.lang.Thread.sleep",
+            "java.lang.Thread.sleep0",
+            "java.lang.Thread.getVirtualThread",
+            "jdk.internal.event.ThreadSleepEvent.<clinit>",
+            "jdk.internal.event.ThreadSleepEvent.isTurnedOn",
+            "jdk.internal.event.ThreadSleepEvent.isEnabled",
+            "java.lang.Thread.sleepMillis",
+            "java.lang.Thread.currentCarrierThread",
+            "java.lang.Thread.currentThread",
+            "java.lang.Thread.currentThread0",
             "nsk.stress.strace.strace009Thread.run",
             "nsk.stress.strace.strace009Thread.recursiveMethod1",
             "nsk.stress.strace.strace009Thread.recursiveMethod2"
     };
 
@@ -207,11 +216,11 @@
     }
 
     static boolean checkElement(StackTraceElement element) {
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace010.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace010.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace010.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace010.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -70,10 +70,19 @@
 
     static final int DEPTH = 500;
     static final int THRD_COUNT = 100;
     static final String[] EXPECTED_METHODS = {
             "java.lang.Thread.sleep",
+            "java.lang.Thread.sleep0",
+            "java.lang.Thread.getVirtualThread",
+            "jdk.internal.event.ThreadSleepEvent.<clinit>",
+            "jdk.internal.event.ThreadSleepEvent.isTurnedOn",
+            "jdk.internal.event.ThreadSleepEvent.isEnabled",
+            "java.lang.Thread.sleepMillis",
+            "java.lang.Thread.currentCarrierThread",
+            "java.lang.Thread.currentThread",
+            "java.lang.Thread.currentThread0",
             "nsk.stress.strace.strace010Thread.run",
             "nsk.stress.strace.strace010Thread.recursiveMethod"
     };
 
 
@@ -225,11 +234,11 @@
     }
 
     boolean checkElement(StackTraceElement element) {
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace011.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace011.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace011.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace011.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -71,10 +71,19 @@
 
     static final int DEPTH = 100;
     static final int THRD_COUNT = 50;
     static final String[] EXPECTED_METHODS = {
             "java.lang.Thread.sleep",
+            "java.lang.Thread.sleep0",
+            "java.lang.Thread.getVirtualThread",
+            "jdk.internal.event.ThreadSleepEvent.<clinit>",
+            "jdk.internal.event.ThreadSleepEvent.isTurnedOn",
+            "jdk.internal.event.ThreadSleepEvent.isEnabled",
+            "java.lang.Thread.sleepMillis",
+            "java.lang.Thread.currentCarrierThread",
+            "java.lang.Thread.currentThread",
+            "java.lang.Thread.currentThread0",
             "nsk.stress.strace.strace011Thread.run",
             "nsk.stress.strace.strace011Thread.recursiveMethod"
     };
 
 
@@ -226,11 +235,11 @@
     }
 
     boolean checkElement(StackTraceElement element) {
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace012.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace012.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace012.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace012.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -74,10 +74,19 @@
 
     static final int DEPTH = 100;
     static final int THRD_COUNT = 100;
     static final String[] EXPECTED_METHODS = {
             "java.lang.Thread.sleep",
+            "java.lang.Thread.sleep0",
+            "java.lang.Thread.getVirtualThread",
+            "jdk.internal.event.ThreadSleepEvent.<clinit>",
+            "jdk.internal.event.ThreadSleepEvent.isTurnedOn",
+            "jdk.internal.event.ThreadSleepEvent.isEnabled",
+            "java.lang.Thread.sleepMillis",
+            "java.lang.Thread.currentCarrierThread",
+            "java.lang.Thread.currentThread",
+            "java.lang.Thread.currentThread0",
             "nsk.stress.strace.strace012Thread.run",
             "nsk.stress.strace.strace012Thread.recursiveMethod1",
             "nsk.stress.strace.strace012Thread.recursiveMethod2"
     };
 
@@ -230,11 +239,11 @@
     }
 
     boolean checkElement(StackTraceElement element) {
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace013.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace013.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace013.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace013.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -70,10 +70,11 @@
 
     static final int DEPTH = 200;
     static final int THRD_COUNT = 100;
     static final String[] EXPECTED_METHODS = {
             "java.lang.Object.wait",
+            "java.lang.Object.wait0",
             "nsk.stress.strace.strace013Thread.run",
             "nsk.stress.strace.strace013Thread.recursiveMethod"
     };
 
 
@@ -218,11 +219,11 @@
     }
 
     boolean checkElement(StackTraceElement element) {
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace014.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace014.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace014.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace014.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -71,10 +71,11 @@
 
     static final int DEPTH = 100;
     static final int THRD_COUNT = 100;
     static final String[] EXPECTED_METHODS = {
             "java.lang.Object.wait",
+            "java.lang.Object.wait0",
             "nsk.stress.strace.strace014Thread.run",
             "nsk.stress.strace.strace014Thread.recursiveMethod"
     };
 
     static PrintStream out;
@@ -173,11 +174,11 @@
         display("checking lengths of stack traces...");
         StackTraceElement[] all;
         for (int i = 1; i < THRD_COUNT; i++) {
             all = (StackTraceElement[]) traces.get(threads[i]);
             int k = all.length;
-            if (count - k > 2) {
+            if (count - k > 4) {
                 complain("wrong lengths of stack traces:\n\t"
                         + threads[0].getName() + ": " + count
                         + "\t"
                         + threads[i].getName() + ": " + k);
                 return false;
@@ -221,11 +222,11 @@
     }
 
     boolean checkElement(StackTraceElement element) {
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
diff a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace015.java b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace015.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace015.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/stress/strace/strace015.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -73,10 +73,11 @@
 
     static final int DEPTH = 100;
     static final int THRD_COUNT = 100;
     static final String[] EXPECTED_METHODS = {
             "java.lang.Object.wait",
+            "java.lang.Object.wait0",
             "nsk.stress.strace.strace015Thread.run",
             "nsk.stress.strace.strace015Thread.recursiveMethod1",
             "nsk.stress.strace.strace015Thread.recursiveMethod2"
     };
 
@@ -222,11 +223,11 @@
     }
 
     boolean checkElement(StackTraceElement element) {
         String name = element.getClassName() + "." + element.getMethodName();
         for (int i = 0; i < EXPECTED_METHODS.length; i++) {
-            if (EXPECTED_METHODS[i].compareTo(name) == 0)
+            if (name.startsWith(EXPECTED_METHODS[i]))
                 return true;
         }
         return false;
     }
 
