diff a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/stress/thread/strace001.java b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/stress/thread/strace001.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/stress/thread/strace001.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/stress/thread/strace001.java
@@ -40,10 +40,11 @@
     public static Integer activeThreads;
     private static Log log;
     private static int depth;
     private static int threadCount;
     private static String[] expectedTrace;
+    private static String[] expectedSystemTrace;
     private static ThreadMonitor monitor;
     private static ThreadController controller;
 
     public static void main(String[] argv) {
         System.exit(run(argv, System.out) + Consts.JCK_STATUS_BASE);
@@ -134,39 +135,48 @@
     }
 
     // Fill expectedTrace array according to the invocation type that is set in
     // test options
     private static boolean fillTrace() {
+        expectedSystemTrace = new String[]{
+                "java.lang.Thread.sleep",
+                "java.lang.Thread.sleep0",
+                "java.lang.Thread.getVirtualThread",
+                "java.lang.Thread.sleepMillis",
+                "java.lang.Thread.yield",
+                "java.lang.Thread.yield0",
+                "java.lang.Thread.currentCarrierThread",
+                "java.lang.Thread.currentThread",
+                "java.lang.Thread.currentThread0",
+                "jdk.internal.event.ThreadSleepEvent.<clinit>",
+                "jdk.internal.event.ThreadSleepEvent.isTurnedOn",
+                "jdk.internal.event.ThreadSleepEvent.isEnabled"
+        };
+
         switch (controller.getInvocationType()) {
             case ThreadController.JAVA_TYPE:
-                expectedTrace = new String[] {
-                    "java.lang.Thread.sleep"
-                    , "java.lang.Thread.yield"
-                    , THREAD_NAME + ".waitForSign"
-                    , THREAD_NAME + ".recursionJava"
-                    , THREAD_NAME + ".run"
+                expectedTrace = new String[]{
+                        THREAD_NAME + ".waitForSign",
+                        THREAD_NAME + ".recursionJava",
+                        THREAD_NAME + ".run"
                 };
                 break;
 
             case ThreadController.NATIVE_TYPE:
-                expectedTrace = new String[] {
-                    "java.lang.Thread.sleep"
-                    , "java.lang.Thread.yield"
-                    , THREAD_NAME + ".waitForSign"
-                    , THREAD_NAME + ".recursionNative"
-                    , THREAD_NAME + ".run"
+                expectedTrace = new String[]{
+                        THREAD_NAME + ".waitForSign",
+                        THREAD_NAME + ".recursionNative",
+                        THREAD_NAME + ".run"
                 };
                 break;
 
             case ThreadController.MIXED_TYPE:
-                expectedTrace = new String[] {
-                    "java.lang.Thread.sleep"
-                    , "java.lang.Thread.yield"
-                    , THREAD_NAME + ".waitForSign"
-                    , THREAD_NAME + ".recursionNative"
-                    , THREAD_NAME + ".recursionJava"
-                    , THREAD_NAME + ".run"
+                expectedTrace = new String[]{
+                        THREAD_NAME + ".waitForSign",
+                        THREAD_NAME + ".recursionNative",
+                        THREAD_NAME + ".recursionJava",
+                        THREAD_NAME + ".run"
                 };
                 break;
 
             default:
                 return false;
@@ -191,11 +201,11 @@
     }
 
     // The method performs checks of the stack trace
     private static boolean checkTrace(StackTraceElement[] elements) {
         int length = elements.length;
-        int expectedLength = depth +3;
+        int expectedLength = depth + 5;
         boolean result = true;
 
         // Check the length of the trace. It must not be greater than
         // expectedLength. Number of recursionJava() or recursionNative()
         // methods must not ne greater than depth, also one Object.wait() or
@@ -233,10 +243,16 @@
         for (int i = 0; i < expectedTrace.length - 1; i++) {
             if (expectedTrace[i].equals(name))
                 return true;
         }
 
+        // Implementation of sleep/wait/yield
+        for (int i = 0; i < expectedSystemTrace.length; i++) {
+            if (expectedSystemTrace[i].equals(name))
+                return true;
+        }
+
         log.complain("Unexpected " + n + " element of the stack trace:\n\t"
                    + name);
         return false;
     }
 
