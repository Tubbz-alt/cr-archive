diff a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/ThreadController.java b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/ThreadController.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/ThreadController.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/share/ThreadController.java
@@ -602,10 +602,11 @@
 
         expectedLength += 4;
 
         expectedMethods.add(ThreadsGroupLocks.PlainCountDownLatch.class.getName() + ".await");
         expectedMethods.add(Object.class.getName() + ".wait");
+        expectedMethods.add(Object.class.getName() + ".wait0");
 
         switch (controller.invocationType) {
             case ThreadController.JAVA_TYPE:
                 expectedMethods.add(WaitingThread.class.getName() + ".bringState");
                 break;
@@ -650,13 +651,23 @@
     public SleepingThread(ThreadController controller, String name, Log log, ThreadsGroupLocks threadsGroupLocks) {
         super(controller, name, log, threadsGroupLocks);
 
         this.threadsGroupLocks = threadsGroupLocks;
 
-        expectedLength += 3;
+        expectedLength += 4;
 
         expectedMethods.add(Thread.class.getName() + ".sleep");
+        expectedMethods.add(Thread.class.getName() + ".sleep0");
+        expectedMethods.add(Thread.class.getName() + ".getVirtualThread");
+        expectedMethods.add(Thread.class.getName() + ".currentCarrierThread");
+        expectedMethods.add(Thread.class.getName() + ".currentThread");
+        expectedMethods.add(Thread.class.getName() + ".currentThread0");
+        expectedMethods.add(Thread.class.getName() + ".sleepMillis");
+        // jdk.internal.event.ThreadSleepEvent not accessible
+        expectedMethods.add("jdk.internal.event.ThreadSleepEvent.<clinit>");
+        expectedMethods.add("jdk.internal.event.ThreadSleepEvent.isEnabled");
+        expectedMethods.add("jdk.internal.event.ThreadSleepEvent.isTurnedOn");
         expectedMethods.add(SleepingThread.class.getName() + ".run");
 
         switch (controller.invocationType) {
             case ThreadController.JAVA_TYPE:
                 expectedMethods.add(SleepingThread.class.getName() + ".bringState");
@@ -717,13 +728,18 @@
 
     public RunningThread(ThreadController controller, String name, Log log, ThreadsGroupLocks threadsGroupLocks) {
         super(controller, name, log, threadsGroupLocks);
         this.threadsGroupLocks = threadsGroupLocks;
 
-        expectedLength += 2;
+        expectedLength += 3;
 
         expectedMethods.add(Thread.class.getName() + ".yield");
+        expectedMethods.add(Thread.class.getName() + ".getVirtualThread");
+        expectedMethods.add(Thread.class.getName() + ".currentCarrierThread");
+        expectedMethods.add(Thread.class.getName() + ".currentThread");
+        expectedMethods.add(Thread.class.getName() + ".currentThread0");
+        expectedMethods.add(Thread.class.getName() + ".yield0");
 
         switch (controller.invocationType) {
             case ThreadController.JAVA_TYPE:
                 expectedMethods.add(RunningThread.class.getName() + ".bringState");
                 break;
