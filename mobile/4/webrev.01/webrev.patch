diff a/make/CompileJavaModules.gmk b/make/CompileJavaModules.gmk
--- a/make/CompileJavaModules.gmk
+++ b/make/CompileJavaModules.gmk
@@ -122,12 +122,12 @@
     sun/awt/X11/java-icon32.png \
     sun/awt/X11/java-icon48.png \
     .template \
     #
 
-ifeq ($(call isTargetOs, macosx), true)
-  # exclude all X11 on Mac.
+ifeq ($(call isTargetOs, macosx ios), true)
+  # exclude all X11 on Mac and iOS.
   java.desktop_EXCLUDES += \
       sun/awt/X11 \
       sun/java2d/x11 \
       sun/java2d/jules \
       sun/java2d/xr \
diff a/make/autoconf/build-aux/config.sub b/make/autoconf/build-aux/config.sub
--- a/make/autoconf/build-aux/config.sub
+++ b/make/autoconf/build-aux/config.sub
@@ -34,21 +34,30 @@
     echo $*
     exit
 fi
 
 # Filter out everything that doesn't begin with "aarch64-"
-if ! echo $* | grep '^aarch64-' >/dev/null ; then
+# or that ends with "-ios" or "-android"
+if ! echo $* | egrep "^aarch64-|-ios|-android" >/dev/null ; then
     . $DIR/autoconf-config.sub "$@"
     # autoconf-config.sub exits, so we never reach here, but just in
     # case we do:
     exit
 fi
 
 while test $# -gt 0 ; do
     case $1 in 
         -- )   # Stop option processing
             shift; break ;;
+        *-ios* )
+            echo $1
+            exit
+            ;;
+        *-android* )
+            echo $1
+            exit
+            ;;
         aarch64-* )
             config=`echo $1 | sed 's/^aarch64-/arm-/'`
             sub_args="$sub_args $config"
             shift; ;;
         - )    # Use stdin as input.
diff a/make/autoconf/flags-cflags.m4 b/make/autoconf/flags-cflags.m4
--- a/make/autoconf/flags-cflags.m4
+++ b/make/autoconf/flags-cflags.m4
@@ -435,10 +435,14 @@
     CFLAGS_OS_DEF_JVM="-DSOLARIS"
     CFLAGS_OS_DEF_JDK="-D__solaris__"
   elif test "x$OPENJDK_TARGET_OS" = xmacosx; then
     CFLAGS_OS_DEF_JVM="-D_ALLBSD_SOURCE -D_DARWIN_C_SOURCE -D_XOPEN_SOURCE"
     CFLAGS_OS_DEF_JDK="-D_ALLBSD_SOURCE -D_DARWIN_UNLIMITED_SELECT"
+  elif test "x$OPENJDK_TARGET_OS" = xios; then
+    CFLAGS_OS_DEF_JDK="-DMACOSX -D_ALLBSD_SOURCE -DTARGET_IOS -D_DARWIN_UNLIMITED_SELECT"
+  elif test "x$OPENJDK_TARGET_OS" = xandroid; then
+    CFLAGS_OS_DEF_JDK="-target aarch64-linux-android -D__USE_BSD"
   elif test "x$OPENJDK_TARGET_OS" = xaix; then
     CFLAGS_OS_DEF_JVM="-DAIX"
   elif test "x$OPENJDK_TARGET_OS" = xbsd; then
     CFLAGS_OS_DEF_JDK="-D_ALLBSD_SOURCE"
   elif test "x$OPENJDK_TARGET_OS" = xwindows; then
@@ -461,10 +465,13 @@
       -I${TOPDIR}/src/java.base/share/native/libjava \
       -I${TOPDIR}/src/java.base/$OPENJDK_TARGET_OS_TYPE/native/libjava \
       -I${TOPDIR}/src/hotspot/share/include \
       -I${TOPDIR}/src/hotspot/os/${HOTSPOT_TARGET_OS_TYPE}/include"
 
+  if test "x$OPENJDK_TARGET_OS" = xios; then
+    ALWAYS_CFLAGS_JDK="$ALWAYS_CFLAGS_JDK -I${TOPDIR}/src/java.base/macosx/native/libjava"
+  fi
   ###############################################################################
 
   # Adjust flags according to debug level.
   # Setup debug/release defines
   if test "x$DEBUG_LEVEL" = xrelease; then
diff a/make/autoconf/flags.m4 b/make/autoconf/flags.m4
--- a/make/autoconf/flags.m4
+++ b/make/autoconf/flags.m4
@@ -276,11 +276,15 @@
   # get a working compilation.
   GLOBAL_CFLAGS="$MACHINE_FLAG $SYSROOT_CFLAGS $USER_CFLAGS"
   GLOBAL_CXXFLAGS="$MACHINE_FLAG $SYSROOT_CFLAGS $USER_CXXFLAGS"
   GLOBAL_LDFLAGS="$MACHINE_FLAG $SYSROOT_LDFLAGS $USER_LDFLAGS"
   # FIXME: Don't really know how to do with this, but this was the old behavior
-  GLOBAL_CPPFLAGS="$SYSROOT_CFLAGS"
+  if test "x$OPENJDK_TARGET_OS" = xios; then
+    GLOBAL_CPPFLAGS="$MACHINE_FLAG $USER_CFLAGS $SYSROOT_CFLAGS"
+  else
+    GLOBAL_CPPFLAGS="$SYSROOT_CFLAGS"
+  fi
   AC_SUBST(GLOBAL_CFLAGS)
   AC_SUBST(GLOBAL_CXXFLAGS)
   AC_SUBST(GLOBAL_LDFLAGS)
   AC_SUBST(GLOBAL_CPPFLAGS)
 
diff a/make/autoconf/lib-freetype.m4 b/make/autoconf/lib-freetype.m4
--- a/make/autoconf/lib-freetype.m4
+++ b/make/autoconf/lib-freetype.m4
@@ -108,11 +108,13 @@
   fi
 
   FREETYPE_TO_USE=bundled
   if test "x$OPENJDK_TARGET_OS" != "xwindows" && \
       test "x$OPENJDK_TARGET_OS" != "xmacosx" && \
-      test "x$OPENJDK_TARGET_OS" != "xaix"; then
+      test "x$OPENJDK_TARGET_OS" != "xaix" && \
+      test "x$OPENJDK_TARGET_OS" != "xandroid" && \
+      test "x$OPENJDK_TARGET_OS" != "xios"; then
     FREETYPE_TO_USE=system
   fi
   if test "x$with_freetype" != "x" ; then
     if test "x$with_freetype" = "xsystem" ; then
       FREETYPE_TO_USE=system
diff a/make/autoconf/libraries.m4 b/make/autoconf/libraries.m4
--- a/make/autoconf/libraries.m4
+++ b/make/autoconf/libraries.m4
@@ -38,22 +38,22 @@
 # Determine which libraries are needed for this configuration
 ################################################################################
 AC_DEFUN_ONCE([LIB_DETERMINE_DEPENDENCIES],
 [
   # Check if X11 is needed
-  if test "x$OPENJDK_TARGET_OS" = xwindows || test "x$OPENJDK_TARGET_OS" = xmacosx; then
-    # No X11 support on windows or macosx
+  if test "x$OPENJDK_TARGET_OS" = xwindows || test "x$OPENJDK_TARGET_OS" = xmacosx || test "x$OPENJDK_TARGET_OS" = xios || test "x$OPENJDK_TARGET_OS" = xandroid; then
+    # No X11 support on windows, macosx, ios or android
     NEEDS_LIB_X11=false
   else
     # All other instances need X11, even if building headless only, libawt still
     # needs X11 headers.
     NEEDS_LIB_X11=true
   fi
 
   # Check if fontconfig is needed
-  if test "x$OPENJDK_TARGET_OS" = xwindows || test "x$OPENJDK_TARGET_OS" = xmacosx; then
-    # No fontconfig support on windows or macosx
+  if test "x$OPENJDK_TARGET_OS" = xwindows || test "x$OPENJDK_TARGET_OS" = xmacosx || test "x$OPENJDK_TARGET_OS" = xios || test "x$OPENJDK_TARGET_OS" = xandroid; then
+    # No fontconfig support on windows, macosx, ios or android
     NEEDS_LIB_FONTCONFIG=false
   else
     # All other instances need fontconfig, even if building headless only,
     # libawt still needs fontconfig headers.
     NEEDS_LIB_FONTCONFIG=true
diff a/make/autoconf/platform.m4 b/make/autoconf/platform.m4
--- a/make/autoconf/platform.m4
+++ b/make/autoconf/platform.m4
@@ -176,18 +176,26 @@
   case "$1" in
     *linux*)
       VAR_OS=linux
       VAR_OS_TYPE=unix
       ;;
+    *android*)
+      VAR_OS=android
+      VAR_OS_TYPE=unix
+      ;;
     *solaris*)
       VAR_OS=solaris
       VAR_OS_TYPE=unix
       ;;
     *darwin*)
       VAR_OS=macosx
       VAR_OS_TYPE=unix
       ;;
+    *ios*)
+      VAR_OS=ios
+      VAR_OS_TYPE=unix
+      ;;
     *bsd*)
       VAR_OS=bsd
       VAR_OS_TYPE=unix
       ;;
     *cygwin*)
diff a/make/autoconf/toolchain.m4 b/make/autoconf/toolchain.m4
--- a/make/autoconf/toolchain.m4
+++ b/make/autoconf/toolchain.m4
@@ -187,11 +187,11 @@
     SHARED_LIBRARY_SUFFIX='.so'
     STATIC_LIBRARY_SUFFIX='.a'
     SHARED_LIBRARY='lib[$]1.so'
     STATIC_LIBRARY='lib[$]1.a'
     OBJ_SUFFIX='.o'
-    if test "x$OPENJDK_TARGET_OS" = xmacosx; then
+    if test "x$OPENJDK_TARGET_OS" = "xmacosx" || test "x$OPENJDK_TARGET_OS" = "xios" ; then
       # For full static builds, we're overloading the SHARED_LIBRARY
       # variables in order to limit the amount of changes required.
       # It would be better to remove SHARED and just use LIBRARY and
       # LIBRARY_SUFFIX for libraries that can be built either
       # shared or static and use STATIC_* for libraries that are
@@ -223,11 +223,11 @@
 
   # Use indirect variable referencing
   toolchain_var_name=VALID_TOOLCHAINS_$OPENJDK_BUILD_OS
   VALID_TOOLCHAINS=${!toolchain_var_name}
 
-  if test "x$OPENJDK_TARGET_OS" = xmacosx; then
+  if test "x$OPENJDK_TARGET_OS" = "xmacosx" || test "x$OPENJDK_TARGET_OS" = "xios" ; then
     if test -n "$XCODEBUILD"; then
       # On Mac OS X, default toolchain to clang after Xcode 5
       XCODE_VERSION_OUTPUT=`"$XCODEBUILD" -version 2>&1 | $HEAD -n 1`
       $ECHO "$XCODE_VERSION_OUTPUT" | $GREP "Xcode " > /dev/null
       if test $? -ne 0; then
@@ -996,15 +996,17 @@
     BUILD_LD="$BUILD_CC"
     BUILD_LDCXX="$BUILD_CXX"
 
     PATH="$OLDPATH"
 
-    TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CC, [BuildC])
-    TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CXX, [BuildC++])
-    TOOLCHAIN_PREPARE_FOR_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_], [build ])
-    TOOLCHAIN_EXTRACT_LD_VERSION(BUILD_LD, [build linker])
-    TOOLCHAIN_PREPARE_FOR_LD_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_])
+    if test "x$OPENJDK_TARGET_OS" != "xandroid"; then
+      TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CC, [BuildC])
+      TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CXX, [BuildC++])
+      TOOLCHAIN_PREPARE_FOR_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_], [build ])
+      TOOLCHAIN_EXTRACT_LD_VERSION(BUILD_LD, [build linker])
+      TOOLCHAIN_PREPARE_FOR_LD_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_])
+    fi
   else
     # If we are not cross compiling, use the normal target compilers for
     # building the build platform executables.
     BUILD_CC="$CC"
     BUILD_CXX="$CXX"
diff a/make/common/JdkNativeCompilation.gmk b/make/common/JdkNativeCompilation.gmk
--- a/make/common/JdkNativeCompilation.gmk
+++ b/make/common/JdkNativeCompilation.gmk
@@ -33,10 +33,28 @@
 include NativeCompilation.gmk
 
 # Hook to include the corresponding custom file, if present.
 $(eval $(call IncludeCustomExtension, common/JdkNativeCompilation.gmk))
 
+ifeq ($(OPENJDK_TARGET_OS), ios)
+  FindSrcDirsForLib = \
+    $(call uniq, $(wildcard \
+        $(TOPDIR)/src/$(strip $1)/$(OPENJDK_TARGET_OS)/native/lib$(strip $2) \
+        $(TOPDIR)/src/$(strip $1)/$(OPENJDK_TARGET_OS_TYPE)/native/lib$(strip $2) \
+        $(TOPDIR)/src/$(strip $1)/macosx/native/lib$(strip $2) \
+        $(TOPDIR)/src/$(strip $1)/share/native/lib$(strip $2)))
+endif
+
+ifeq ($(OPENJDK_TARGET_OS), android)
+  FindSrcDirsForLib = \
+    $(call uniq, $(wildcard \
+        $(TOPDIR)/src/$(strip $1)/$(OPENJDK_TARGET_OS)/native/lib$(strip $2) \
+        $(TOPDIR)/src/$(strip $1)/$(OPENJDK_TARGET_OS_TYPE)/native/lib$(strip $2) \
+        $(TOPDIR)/src/$(strip $1)/linux/native/lib$(strip $2) \
+        $(TOPDIR)/src/$(strip $1)/share/native/lib$(strip $2)))
+endif
+
 FindSrcDirsForLib += \
   $(call uniq, $(wildcard \
       $(TOPDIR)/src/$(strip $1)/$(OPENJDK_TARGET_OS)/native/lib$(strip $2) \
       $(TOPDIR)/src/$(strip $1)/$(OPENJDK_TARGET_OS_TYPE)/native/lib$(strip $2) \
       $(TOPDIR)/src/$(strip $1)/share/native/lib$(strip $2)))
@@ -45,10 +63,12 @@
   $(call uniq, $(wildcard \
       $(TOPDIR)/src/$(strip $1)/$(OPENJDK_TARGET_OS)/native/$(strip $2) \
       $(TOPDIR)/src/$(strip $1)/$(OPENJDK_TARGET_OS_TYPE)/native/$(strip $2) \
       $(TOPDIR)/src/$(strip $1)/share/native/$(strip $2)))
 
+
+
 # Find a library. Used for declaring dependencies on libraries in different
 # modules.
 # Param 1 - module name
 # Param 2 - library name
 # Param 3 - optional subdir for library
diff a/make/common/Modules.gmk b/make/common/Modules.gmk
--- a/make/common/Modules.gmk
+++ b/make/common/Modules.gmk
@@ -258,10 +258,18 @@
     #
 
 TOP_SRC_DIRS += \
     $(TOPDIR)/src \
     #
+ifeq ($(OPENJDK_TARGET_OS), ios)
+  SRC_SUBDIRS += macosx/classes
+endif
+
+ifeq ($(OPENJDK_TARGET_OS), android)
+  SRC_SUBDIRS += linux/classes
+endif
+
 
 SRC_SUBDIRS += $(OPENJDK_TARGET_OS)/classes
 ifneq ($(OPENJDK_TARGET_OS), $(OPENJDK_TARGET_OS_TYPE))
   SRC_SUBDIRS += $(OPENJDK_TARGET_OS_TYPE)/classes
 endif
diff a/make/common/modules/LauncherCommon.gmk b/make/common/modules/LauncherCommon.gmk
--- a/make/common/modules/LauncherCommon.gmk
+++ b/make/common/modules/LauncherCommon.gmk
@@ -48,10 +48,15 @@
 LAUNCHER_CFLAGS += -I$(TOPDIR)/src/java.base/share/native/launcher \
     -I$(TOPDIR)/src/java.base/share/native/libjli \
     -I$(TOPDIR)/src/java.base/$(OPENJDK_TARGET_OS_TYPE)/native/libjli \
     -I$(TOPDIR)/src/java.base/$(OPENJDK_TARGET_OS)/native/libjli \
     #
+
+ifeq ($(call isTargetOs, ios), true)
+  LAUNCHER_CFLAGS += -I$(TOPDIR)/src/java.base/macosx/native/libjli
+fi
+
 GLOBAL_VERSION_INFO_RESOURCE := $(TOPDIR)/src/java.base/windows/native/common/version.rc
 MACOSX_PLIST_DIR := $(TOPDIR)/src/java.base/macosx/native/launcher
 JAVA_MANIFEST := $(TOPDIR)/src/java.base/windows/native/launcher/java.manifest
 
 ################################################################################
diff a/make/modules/java.base/lib/CoreLibraries.gmk b/make/modules/java.base/lib/CoreLibraries.gmk
--- a/make/modules/java.base/lib/CoreLibraries.gmk
+++ b/make/modules/java.base/lib/CoreLibraries.gmk
@@ -82,11 +82,11 @@
 
 ##########################################################################################
 
 LIBJAVA_CFLAGS := -DARCHPROPNAME='"$(OPENJDK_TARGET_CPU_OSARCH)"'
 
-ifeq ($(call isTargetOs, macosx), true)
+ifeq ($(call isTargetOs, macosx ios), true)
   BUILD_LIBJAVA_java_props_md.c_CFLAGS := -x objective-c
   BUILD_LIBJAVA_java_props_macosx.c_CFLAGS := -x objective-c
 endif
 
 $(eval $(call SetupJdkLibrary, BUILD_LIBJAVA, \
@@ -171,11 +171,11 @@
 
 TARGETS += $(BUILD_LIBJIMAGE)
 
 ##########################################################################################
 
-ifeq ($(call isTargetOs, macosx), true)
+ifeq ($(call isTargetOs, macosx ios), true)
   LIBJLI_EXCLUDE_FILES += java_md_solinux.c
 endif
 
 ifeq ($(call isTargetOs, windows), true)
   # Supply the name of the C runtime lib.
@@ -207,10 +207,11 @@
     OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \
     EXCLUDE_FILES := $(LIBJLI_EXCLUDE_FILES), \
     EXTRA_FILES := $(LIBJLI_EXTRA_FILES), \
     OPTIMIZATION := HIGH, \
     CFLAGS := $(CFLAGS_JDKLIB) $(LIBJLI_CFLAGS), \
+    CFLAGS_ios := -I$(TOPDIR)/src/java.base/macosx/native/libjli, \
     DISABLED_WARNINGS_gcc := unused-function implicit-fallthrough, \
     DISABLED_WARNINGS_clang := sometimes-uninitialized format-nonliteral, \
     LDFLAGS := $(LDFLAGS_JDKLIB) \
         $(call SET_SHARED_LIBRARY_ORIGIN), \
     LIBS_unix := $(LIBZ_LIBS), \
diff a/make/modules/jdk.net/Lib.gmk b/make/modules/jdk.net/Lib.gmk
--- a/make/modules/jdk.net/Lib.gmk
+++ b/make/modules/jdk.net/Lib.gmk
@@ -25,11 +25,11 @@
 
 include LibCommon.gmk
 
 ################################################################################
 
-ifeq ($(call isTargetOs, solaris linux macosx), true)
+ifeq ($(call isTargetOs, solaris linux macosx ios android), true)
 
   $(eval $(call SetupJdkLibrary, BUILD_LIBEXTNET, \
       NAME := extnet, \
       OPTIMIZATION := LOW, \
       CFLAGS := $(CFLAGS_JDKLIB), \
diff a/src/java.base/macosx/native/libjava/java_props_macosx.c b/src/java.base/macosx/native/libjava/java_props_macosx.c
--- a/src/java.base/macosx/native/libjava/java_props_macosx.c
+++ b/src/java.base/macosx/native/libjava/java_props_macosx.c
@@ -21,21 +21,36 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
+#ifndef TARGET_IOS
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <objc/objc-runtime.h>
 
 #include <CoreFoundation/CoreFoundation.h>
 #include <SystemConfiguration/SystemConfiguration.h>
 #include <Foundation/Foundation.h>
 
+#else
+#include <stdlib.h>
+#include <string.h>
+#include <sys/param.h>
+#include <objc/runtime.h>
+#include <objc/objc.h>
+#include <objc/message.h>
+#include <CoreFoundation/CoreFoundation.h>
+#include <CoreFoundation/CFlocale.h>
+
+#endif
+
 #include "java_props_macosx.h"
 
+#ifndef TARGET_IOS
+
 char *getPosixLocale(int cat) {
     char *lc = setlocale(cat, NULL);
     if ((lc == NULL) || (strcmp(lc, "C") == 0)) {
         lc = getenv("LANG");
     }
@@ -471,5 +486,33 @@
 
 #undef CHECK_PROXY
 
     CFRelease(dict);
 }
+#else
+#define LOCALEIDLENGTH  128
+char *getPosixLocale(int cat) {
+    char *lc = setlocale(cat, NULL);
+    if ((lc == NULL) || (strcmp(lc, "C") == 0)) {
+        lc = getenv("LANG");
+    }
+    if (lc == NULL) return NULL;
+    return strdup(lc);
+  }
+
+char *getMacOSXLocale(int cat) {
+    char localeString[LOCALEIDLENGTH];
+    // Get current user locale.
+    CFLocaleRef loc = CFLocaleCopyCurrent();
+    char *localstr;
+    if (CFStringGetCString(CFLocaleGetIdentifier(loc),
+                           localeString, LOCALEIDLENGTH,
+                           kCFStringEncodingUTF8))
+      localstr = strdup(localeString);
+    else
+      localstr =  NULL;
+
+    CFRelease(loc);
+    return (localstr);
+}
+
+#endif
diff a/src/java.base/macosx/native/libjli/java_md_macosx.m b/src/java.base/macosx/native/libjli/java_md_macosx.m
--- a/src/java.base/macosx/native/libjli/java_md_macosx.m
+++ b/src/java.base/macosx/native/libjli/java_md_macosx.m
@@ -37,14 +37,16 @@
 #include <sys/types.h>
 #include <sys/time.h>
 
 #include "manifest_info.h"
 
+#ifndef TARGET_IOS
 /* Support Cocoa event loop on the main thread */
 #include <Cocoa/Cocoa.h>
 #include <objc/objc-runtime.h>
 #include <objc/objc-auto.h>
+#endif
 
 #include <errno.h>
 #include <spawn.h>
 
 struct NSAppArgs {
@@ -208,10 +210,12 @@
     if (preferredJVM == NULL) {
 #if defined(__i386__)
         preferredJVM = "client";
 #elif defined(__x86_64__)
         preferredJVM = "server";
+#elif defined(__arm64__)
+        preferredJVM = "zero";
 #else
 #error "Unknown architecture - needs definition"
 #endif
     }
 
@@ -268,19 +272,27 @@
 
     if (prefJVM == NULL) return;
     sPreferredJVMType = strdup(prefJVM);
 }
 
+#ifdef TARGET_IOS
+static jboolean awtLoaded = 0;
+#else
 static BOOL awtLoaded = NO;
+#endif
 static pthread_mutex_t awtLoaded_mutex = PTHREAD_MUTEX_INITIALIZER;
 static pthread_cond_t  awtLoaded_cv = PTHREAD_COND_INITIALIZER;
 
 JNIEXPORT void JNICALL
 JLI_NotifyAWTLoaded()
 {
     pthread_mutex_lock(&awtLoaded_mutex);
+#ifdef TARGET_IOS
+    awtLoaded = 1;
+#else
     awtLoaded = YES;
+#endif
     pthread_cond_signal(&awtLoaded_cv);
     pthread_mutex_unlock(&awtLoaded_mutex);
 }
 
 static int (*main_fptr)(int argc, char **argv) = NULL;
@@ -305,10 +317,11 @@
 
     struct NSAppArgs *args = (struct NSAppArgs *) arg;
     exit(main_fptr(args->argc, args->argv));
 }
 
+#ifndef TARGET_IOS
 static void dummyTimer(CFRunLoopTimerRef timer, void *info) {}
 
 static void ParkEventLoop() {
     // RunLoop needs at least one source, and 1e20 is pretty far into the future
     CFRunLoopTimerRef t = CFRunLoopTimerCreate(kCFAllocatorDefault, 1.0e20, 0.0, 0, 0, dummyTimer, NULL);
@@ -319,10 +332,11 @@
     int32_t result;
     do {
         result = CFRunLoopRunInMode(kCFRunLoopDefaultMode, 1.0e20, false);
     } while (result != kCFRunLoopRunFinished);
 }
+#endif
 
 /*
  * Mac OS X mandates that the GUI event loop run on very first thread of
  * an application. This requires that we re-call Java's main() on a new
  * thread, reserving the 'main' thread for Cocoa.
@@ -349,11 +363,13 @@
     if (pthread_detach(main_thr)) {
         JLI_ReportErrorMessageSys("pthread_detach() failed: %s\n", strerror(errno));
         exit(1);
     }
 
+#ifndef TARGET_IOS
     ParkEventLoop();
+#endif
 }
 
 void
 CreateExecutionEnvironment(int *pargc, char ***pargv,
                            char jrepath[], jint so_jrepath,
@@ -895,10 +911,11 @@
 // MacOSX we may continue in the same thread
 int
 JVMInit(InvocationFunctions* ifn, jlong threadStackSize,
                  int argc, char **argv,
                  int mode, char *what, int ret) {
+#ifndef TARGET_IOS
     if (sameThread) {
         JLI_TraceLauncher("In same thread\n");
         // need to block this thread against the main thread
         // so signals get caught correctly
         __block int rslt = 0;
@@ -925,10 +942,13 @@
         [pool drain];
         return rslt;
     } else {
         return ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);
     }
+#else
+    return ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);
+#endif
 }
 
 /*
  * Note the jvmInstance must be initialized first before entering into
  * ShowSplashScreen, as there is a callback into the JLI_GetJavaVMInstance.
diff a/src/java.base/unix/native/libnet/NetworkInterface.c b/src/java.base/unix/native/libnet/NetworkInterface.c
--- a/src/java.base/unix/native/libnet/NetworkInterface.c
+++ b/src/java.base/unix/native/libnet/NetworkInterface.c
@@ -23,11 +23,13 @@
  * questions.
  */
 #include <arpa/inet.h>
 #include <errno.h>
 #include <net/if.h>
+#ifndef TARGET_IOS
 #include <net/if_arp.h>
+#endif
 #include <stdlib.h>
 #include <string.h>
 #include <sys/ioctl.h>
 
 #if defined(_AIX)
diff a/src/java.base/unix/native/libnet/net_util_md.h b/src/java.base/unix/native/libnet/net_util_md.h
--- a/src/java.base/unix/native/libnet/net_util_md.h
+++ b/src/java.base/unix/native/libnet/net_util_md.h
@@ -24,10 +24,13 @@
  */
 
 #ifndef NET_UTILS_MD_H
 #define NET_UTILS_MD_H
 
+#ifdef ANDROID
+#include <netinet/in.h>
+#endif
 #include <netdb.h>
 #include <poll.h>
 #include <sys/socket.h>
 
 /************************************************************************
