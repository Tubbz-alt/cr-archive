diff a/src/java.base/macosx/native/libjli/java_md_macosx.m b/src/java.base/macosx/native/libjli/java_md_macosx.m
--- a/src/java.base/macosx/native/libjli/java_md_macosx.m
+++ b/src/java.base/macosx/native/libjli/java_md_macosx.m
@@ -37,14 +37,16 @@
 #include <sys/types.h>
 #include <sys/time.h>
 
 #include "manifest_info.h"
 
+#ifndef TARGET_IOS
 /* Support Cocoa event loop on the main thread */
 #include <Cocoa/Cocoa.h>
 #include <objc/objc-runtime.h>
 #include <objc/objc-auto.h>
+#endif
 
 #include <errno.h>
 #include <spawn.h>
 
 struct NSAppArgs {
@@ -208,10 +210,12 @@
     if (preferredJVM == NULL) {
 #if defined(__i386__)
         preferredJVM = "client";
 #elif defined(__x86_64__)
         preferredJVM = "server";
+#elif defined(__arm64__)
+        preferredJVM = "zero";
 #else
 #error "Unknown architecture - needs definition"
 #endif
     }
 
@@ -268,19 +272,27 @@
 
     if (prefJVM == NULL) return;
     sPreferredJVMType = strdup(prefJVM);
 }
 
+#ifdef TARGET_IOS
+static jboolean awtLoaded = 0;
+#else
 static BOOL awtLoaded = NO;
+#endif
 static pthread_mutex_t awtLoaded_mutex = PTHREAD_MUTEX_INITIALIZER;
 static pthread_cond_t  awtLoaded_cv = PTHREAD_COND_INITIALIZER;
 
 JNIEXPORT void JNICALL
 JLI_NotifyAWTLoaded()
 {
     pthread_mutex_lock(&awtLoaded_mutex);
+#ifdef TARGET_IOS
+    awtLoaded = 1;
+#else
     awtLoaded = YES;
+#endif
     pthread_cond_signal(&awtLoaded_cv);
     pthread_mutex_unlock(&awtLoaded_mutex);
 }
 
 static int (*main_fptr)(int argc, char **argv) = NULL;
@@ -305,10 +317,11 @@
 
     struct NSAppArgs *args = (struct NSAppArgs *) arg;
     exit(main_fptr(args->argc, args->argv));
 }
 
+#ifndef TARGET_IOS
 static void dummyTimer(CFRunLoopTimerRef timer, void *info) {}
 
 static void ParkEventLoop() {
     // RunLoop needs at least one source, and 1e20 is pretty far into the future
     CFRunLoopTimerRef t = CFRunLoopTimerCreate(kCFAllocatorDefault, 1.0e20, 0.0, 0, 0, dummyTimer, NULL);
@@ -319,10 +332,11 @@
     int32_t result;
     do {
         result = CFRunLoopRunInMode(kCFRunLoopDefaultMode, 1.0e20, false);
     } while (result != kCFRunLoopRunFinished);
 }
+#endif
 
 /*
  * Mac OS X mandates that the GUI event loop run on very first thread of
  * an application. This requires that we re-call Java's main() on a new
  * thread, reserving the 'main' thread for Cocoa.
@@ -349,11 +363,13 @@
     if (pthread_detach(main_thr)) {
         JLI_ReportErrorMessageSys("pthread_detach() failed: %s\n", strerror(errno));
         exit(1);
     }
 
+#ifndef TARGET_IOS
     ParkEventLoop();
+#endif
 }
 
 void
 CreateExecutionEnvironment(int *pargc, char ***pargv,
                            char jrepath[], jint so_jrepath,
@@ -895,10 +911,11 @@
 // MacOSX we may continue in the same thread
 int
 JVMInit(InvocationFunctions* ifn, jlong threadStackSize,
                  int argc, char **argv,
                  int mode, char *what, int ret) {
+#ifndef TARGET_IOS
     if (sameThread) {
         JLI_TraceLauncher("In same thread\n");
         // need to block this thread against the main thread
         // so signals get caught correctly
         __block int rslt = 0;
@@ -925,10 +942,13 @@
         [pool drain];
         return rslt;
     } else {
         return ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);
     }
+#else
+    return ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);
+#endif
 }
 
 /*
  * Note the jvmInstance must be initialized first before entering into
  * ShowSplashScreen, as there is a callback into the JLI_GetJavaVMInstance.
