diff a/test/jdk/java/lang/ProcessBuilder/Basic.java b/test/jdk/java/lang/ProcessBuilder/Basic.java
--- a/test/jdk/java/lang/ProcessBuilder/Basic.java
+++ b/test/jdk/java/lang/ProcessBuilder/Basic.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -2138,34 +2138,11 @@
 
                 thread.start();
                 latch.await();
                 Thread.sleep(10);
 
-                String os = System.getProperty("os.name");
-                if (os.equalsIgnoreCase("Solaris") ||
-                    os.equalsIgnoreCase("SunOS"))
-                {
-                    final Object deferred;
-                    Class<?> c = s.getClass();
-                    if (c.getName().equals(
-                        "java.lang.ProcessImpl$DeferredCloseInputStream"))
-                    {
-                        deferred = s;
-                    } else {
-                        Field deferredField = p.getClass().
-                            getDeclaredField("stdout_inner_stream");
-                        deferredField.setAccessible(true);
-                        deferred = deferredField.get(p);
-                    }
-                    Field useCountField = deferred.getClass().
-                        getDeclaredField("useCount");
-                    useCountField.setAccessible(true);
-
-                    while (useCountField.getInt(deferred) <= 0) {
-                        Thread.yield();
-                    }
-                } else if (s instanceof BufferedInputStream) {
+                if (s instanceof BufferedInputStream) {
                     // Wait until after the s.read occurs in "thread" by
                     // checking when the input stream monitor is acquired
                     // (BufferedInputStream.read is synchronized)
                     while (!isLocked(s, 10)) {
                         Thread.sleep(100);
