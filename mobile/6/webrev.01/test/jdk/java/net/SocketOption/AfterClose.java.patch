diff a/test/jdk/java/net/SocketOption/AfterClose.java b/test/jdk/java/net/SocketOption/AfterClose.java
--- a/test/jdk/java/net/SocketOption/AfterClose.java
+++ b/test/jdk/java/net/SocketOption/AfterClose.java
@@ -57,10 +57,11 @@
 import static org.testng.Assert.expectThrows;
 
 public class AfterClose {
 
     static final Class<IOException> IOE = IOException.class;
+    static final String RO = "READ_ONLY";
 
     static Map<SocketOption<?>,List<Object>> OPTION_VALUES_MAP = optionValueMap();
 
     static boolean supportsMulticast(NetworkInterface ni) {
         try {
@@ -104,10 +105,12 @@
             map.put((SocketOption<?>)field.get(null), listOf(10, 100));
             field = c.getField("TCP_KEEPINTERVAL");
             map.put((SocketOption<?>)field.get(null), listOf(10, 100));
             field = c.getField("TCP_KEEPCOUNT");
             map.put((SocketOption<?>)field.get(null), listOf(10, 100));
+            field = c.getField("SO_INCOMING_NAPI_ID");
+            map.put((SocketOption<?>)field.get(null), listOf(RO));
         } catch (ClassNotFoundException e) {
             // ignore, jdk.net module not present
         } catch (ReflectiveOperationException e) {
             throw new AssertionError(e);
         }
@@ -156,11 +159,11 @@
         throws IOException
     {
         Socket socket = createClosedSocketFromAdapter();
         for (int i=0; i<3; i++); {
             for (T value : values) {
-                expectThrows(IOE, () -> socket.setOption(option, value));
+                if (!RO.equals(value)) expectThrows(IOE, () -> socket.setOption(option, value));
                 expectThrows(IOE, () -> socket.getOption(option));
             }
         }
     }
 
@@ -209,11 +212,11 @@
             return;  // SSC does not support IP_TOS
 
         ServerSocket serverSocket = createClosedServerSocketFromAdapter();
         for (int i=0; i<3; i++); {
             for (T value : values) {
-                expectThrows(IOE, () -> serverSocket.setOption(option, value));
+                if (!RO.equals(value)) expectThrows(IOE, () -> serverSocket.setOption(option, value));
                 expectThrows(IOE, () -> serverSocket.getOption(option));
             }
         }
     }
 
