diff a/test/jdk/java/security/KeyRep/Serial.java b/test/jdk/java/security/KeyRep/Serial.java
--- a/test/jdk/java/security/KeyRep/Serial.java
+++ b/test/jdk/java/security/KeyRep/Serial.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2004, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -86,33 +86,30 @@
         if (!rsaKp2.getPublic().equals(rsaKp.getPublic()) ||
             !rsaKp2.getPrivate().equals(rsaKp.getPrivate())) {
             throw new SecurityException("RSA test failed");
         }
 
-        // exclude test is ECF provider is installed, see 4923290
-        if (Security.getProvider("SunPKCS11-Solaris") == null) {
-            // generate DH key pair
-            kpg = KeyPairGenerator.getInstance("DiffieHellman", JCE);
-            kpg.initialize(new DHParameterSpec(skip1024Modulus, skip1024Base));
-            KeyPair dhKp = kpg.genKeyPair();
-
-            // serialize DH key pair
-            baos.reset();
-            oos = new ObjectOutputStream(baos);
-            oos.writeObject(dhKp);
-            oos.close();
-
-            // deserialize DH key pair
-            ois = new ObjectInputStream
-                            (new ByteArrayInputStream(baos.toByteArray()));
-            KeyPair dhKp2 = (KeyPair)ois.readObject();
-            ois.close();
-
-            if (!dhKp2.getPublic().equals(dhKp.getPublic()) ||
-                !dhKp2.getPrivate().equals(dhKp.getPrivate())) {
-                throw new SecurityException("DH test failed");
-            }
+        // generate DH key pair
+        kpg = KeyPairGenerator.getInstance("DiffieHellman", JCE);
+        kpg.initialize(new DHParameterSpec(skip1024Modulus, skip1024Base));
+        KeyPair dhKp = kpg.genKeyPair();
+
+        // serialize DH key pair
+        baos.reset();
+        oos = new ObjectOutputStream(baos);
+        oos.writeObject(dhKp);
+        oos.close();
+
+        // deserialize DH key pair
+        ois = new ObjectInputStream
+                        (new ByteArrayInputStream(baos.toByteArray()));
+        KeyPair dhKp2 = (KeyPair)ois.readObject();
+        ois.close();
+
+        if (!dhKp2.getPublic().equals(dhKp.getPublic()) ||
+            !dhKp2.getPrivate().equals(dhKp.getPrivate())) {
+            throw new SecurityException("DH test failed");
         }
 
         // generate RC5 key
         SecretKeySpec rc5Key = new SecretKeySpec(new byte[128], "RC5");
 
