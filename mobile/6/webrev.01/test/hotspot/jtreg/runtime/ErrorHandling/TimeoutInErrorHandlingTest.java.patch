diff a/test/hotspot/jtreg/runtime/ErrorHandling/TimeoutInErrorHandlingTest.java b/test/hotspot/jtreg/runtime/ErrorHandling/TimeoutInErrorHandlingTest.java
--- a/test/hotspot/jtreg/runtime/ErrorHandling/TimeoutInErrorHandlingTest.java
+++ b/test/hotspot/jtreg/runtime/ErrorHandling/TimeoutInErrorHandlingTest.java
@@ -47,17 +47,10 @@
     public static final boolean verbose = System.getProperty("verbose") != null;
     // 16 seconds for hs_err generation timeout = 4 seconds per step timeout
     public static final int ERROR_LOG_TIMEOUT = 16;
 
     public static void main(String[] args) throws Exception {
-
-        int error_log_timeout = ERROR_LOG_TIMEOUT;
-        if ("SunOS".equals(System.getProperty("os.name"))) {
-            // Give Solaris machines 3X as much time:
-            error_log_timeout *= 3;
-        }
-
         /* Start the VM and let it crash. Specify TestUnresponsiveErrorHandler which will
          * let five subsequent error reporting steps hang. The Timeout handling triggered
          * by the WatcherThread should kick in and interrupt those steps. In theory, the
          * text "timeout occurred during error reporting in step .." (the little timeouts)
          * should occur in the error log up to four times, followed by the final big timeout
@@ -80,11 +73,11 @@
         ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(
             "-XX:+UnlockDiagnosticVMOptions",
             "-Xmx100M",
             "-XX:ErrorHandlerTest=14",
             "-XX:+TestUnresponsiveErrorHandler",
-            "-XX:ErrorLogTimeout=" + error_log_timeout,
+            "-XX:ErrorLogTimeout=" + ERROR_LOG_TIMEOUT,
             "-XX:-CreateCoredumpOnCrash",
             "-version");
 
         OutputAnalyzer output_detail = new OutputAnalyzer(pb.start());
 
