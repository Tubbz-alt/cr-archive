diff a/test/hotspot/jtreg/compiler/cpuflags/TestAESIntrinsicsOnSupportedConfig.java b/test/hotspot/jtreg/compiler/cpuflags/TestAESIntrinsicsOnSupportedConfig.java
--- a/test/hotspot/jtreg/compiler/cpuflags/TestAESIntrinsicsOnSupportedConfig.java
+++ b/test/hotspot/jtreg/compiler/cpuflags/TestAESIntrinsicsOnSupportedConfig.java
@@ -46,14 +46,12 @@
 public class TestAESIntrinsicsOnSupportedConfig extends AESIntrinsicsBase {
 
     protected void runTestCases() throws Throwable {
         testUseAES();
         testUseAESUseSSE2();
-        testUseAESUseVIS2();
         testNoUseAES();
         testNoUseAESUseSSE2();
-        testNoUseAESUseVIS2();
         testNoUseAESIntrinsic();
     }
 
     /**
      * Check if value of TieredStopAtLevel flag is greater than specified level.
@@ -149,69 +147,10 @@
             verifyOptionValue(AESIntrinsicsBase.USE_SSE, "2", errorMessage,
                     outputAnalyzer);
         }
     }
 
-    /**
-     * Test checks following situation: <br/>
-     * UseAES flag is set to true, UseVIS flag is set to 2,
-     * Platform should support UseVIS (sparc) <br/>
-     * TestAESMain is executed <br/>
-     * Expected result: UseAESIntrinsics flag is set to false <br/>
-     * Output shouldn't contain intrinsics usage <br/>
-     *
-     * @throws Throwable
-     */
-    private void testUseAESUseVIS2() throws Throwable {
-        if (Platform.isSparc()) {
-            OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJvm(
-                    prepareArguments(prepareBooleanFlag(AESIntrinsicsBase
-                                    .USE_AES_INTRINSICS, true),
-                            prepareNumericFlag(AESIntrinsicsBase.USE_VIS, 2)));
-            final String errorMessage = "Case testUseAESUseVIS2 failed";
-            verifyOutput(null, new String[]{AESIntrinsicsBase.CIPHER_INTRINSIC,
-                            AESIntrinsicsBase.AES_INTRINSIC},
-                    errorMessage, outputAnalyzer);
-            verifyOptionValue(AESIntrinsicsBase.USE_AES, "true", errorMessage,
-                    outputAnalyzer);
-            verifyOptionValue(AESIntrinsicsBase.USE_AES_INTRINSICS, "false",
-                    errorMessage, outputAnalyzer);
-            verifyOptionValue(AESIntrinsicsBase.USE_VIS, "2", errorMessage,
-                    outputAnalyzer);
-        }
-    }
-
-
-    /**
-     * Test checks following situation: <br/>
-     * UseAES flag is set to false, UseVIS flag is set to 2,
-     * Platform should support UseVIS (sparc) <br/>
-     * TestAESMain is executed <br/>
-     * Expected result: UseAESIntrinsics flag is set to false <br/>
-     * Output shouldn't contain intrinsics usage <br/>
-     *
-     * @throws Throwable
-     */
-    private void testNoUseAESUseVIS2() throws Throwable {
-        if (Platform.isSparc()) {
-            OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJvm(
-                    prepareArguments(prepareBooleanFlag(AESIntrinsicsBase
-                                    .USE_AES, false),
-                            prepareNumericFlag(AESIntrinsicsBase.USE_VIS, 2)));
-            final String errorMessage = "Case testNoUseAESUseVIS2 failed";
-            verifyOutput(null, new String[]{AESIntrinsicsBase.CIPHER_INTRINSIC,
-                            AESIntrinsicsBase.AES_INTRINSIC},
-                    errorMessage, outputAnalyzer);
-            verifyOptionValue(AESIntrinsicsBase.USE_AES, "false", errorMessage,
-                    outputAnalyzer);
-            verifyOptionValue(AESIntrinsicsBase.USE_AES_INTRINSICS, "false",
-                    errorMessage, outputAnalyzer);
-            verifyOptionValue(AESIntrinsicsBase.USE_VIS, "2", errorMessage,
-                    outputAnalyzer);
-        }
-    }
-
     /**
      * Test checks following situation: <br/>
      * UseAES flag is set to false, TestAESMain is executed <br/>
      * Expected result: UseAESIntrinsics flag is set to false <br/>
      * Output shouldn't contain intrinsics usage <br/>
