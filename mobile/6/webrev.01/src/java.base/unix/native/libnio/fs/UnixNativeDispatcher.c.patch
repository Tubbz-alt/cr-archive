diff a/src/java.base/unix/native/libnio/fs/UnixNativeDispatcher.c b/src/java.base/unix/native/libnio/fs/UnixNativeDispatcher.c
--- a/src/java.base/unix/native/libnio/fs/UnixNativeDispatcher.c
+++ b/src/java.base/unix/native/libnio/fs/UnixNativeDispatcher.c
@@ -39,21 +39,14 @@
 #else
 #include <sys/statvfs.h>
 #endif
 #include <sys/time.h>
 
-/* For POSIX-compliant getpwuid_r, getgrgid_r on Solaris */
-#if defined(__solaris__)
-#define _POSIX_PTHREAD_SEMANTICS
-#endif
+/* For POSIX-compliant getpwuid_r */
 #include <pwd.h>
 #include <grp.h>
 
-#ifdef __solaris__
-#include <strings.h>
-#endif
-
 #ifdef __linux__
 #include <sys/syscall.h>
 #endif
 
 #if defined(__linux__) || defined(_AIX)
@@ -261,12 +254,11 @@
     entry_dev = (*env)->GetFieldID(env, clazz, "dev", "J");
     CHECK_NULL_RETURN(entry_dev, 0);
 
     /* system calls that might not be available at run time */
 
-#if (defined(__solaris__) && defined(_LP64)) || defined(_ALLBSD_SOURCE)
-    /* Solaris 64-bit does not have openat64/fstatat64 */
+#if defined(_ALLBSD_SOURCE)
     my_openat64_func = (openat64_func*)dlsym(RTLD_DEFAULT, "openat");
     my_fstatat64_func = (fstatat64_func*)dlsym(RTLD_DEFAULT, "fstatat");
 #else
     my_openat64_func = (openat64_func*) dlsym(RTLD_DEFAULT, "openat64");
     my_fstatat64_func = (fstatat64_func*) dlsym(RTLD_DEFAULT, "fstatat64");
