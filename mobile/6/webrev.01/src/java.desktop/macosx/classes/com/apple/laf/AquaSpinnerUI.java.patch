diff a/src/java.desktop/macosx/classes/com/apple/laf/AquaSpinnerUI.java b/src/java.desktop/macosx/classes/com/apple/laf/AquaSpinnerUI.java
--- a/src/java.desktop/macosx/classes/com/apple/laf/AquaSpinnerUI.java
+++ b/src/java.desktop/macosx/classes/com/apple/laf/AquaSpinnerUI.java
@@ -138,10 +138,18 @@
         c.removeAll();
     }
 
     protected void installListeners() {
         spinner.addPropertyChangeListener(getPropertyChangeListener());
+        JComponent editor = spinner.getEditor();
+        if (editor != null && editor instanceof JSpinner.DefaultEditor) {
+            JTextField tf = ((JSpinner.DefaultEditor)editor).getTextField();
+            if (tf != null) {
+                tf.addFocusListener(getNextButtonHandler());
+                tf.addFocusListener(getPreviousButtonHandler());
+            }
+        }
     }
 
     protected void uninstallListeners() {
         spinner.removePropertyChangeListener(getPropertyChangeListener());
     }
@@ -324,18 +332,20 @@
         map.put("decrement", getPreviousButtonHandler());
         return map;
     }
 
     @SuppressWarnings("serial") // Superclass is not serializable across versions
-    private static class ArrowButtonHandler extends AbstractAction implements MouseListener {
+    private static class ArrowButtonHandler extends AbstractAction implements FocusListener, MouseListener {
 
         final javax.swing.Timer autoRepeatTimer;
         final boolean isNext;
         JSpinner spinner = null;
+        JButton arrowButton = null;
 
         ArrowButtonHandler(final String name, final boolean isNext) {
             super(name);
+
             this.isNext = isNext;
             autoRepeatTimer = new javax.swing.Timer(60, this);
             autoRepeatTimer.setInitialDelay(300);
         }
 
@@ -350,39 +360,51 @@
         @Override
         public void actionPerformed(final ActionEvent e) {
             if (!(e.getSource() instanceof javax.swing.Timer)) {
                 // Most likely resulting from being in ActionMap.
                 spinner = eventToSpinner(e);
+                if (e.getSource() instanceof JButton) {
+                    arrowButton = (JButton)e.getSource();
+                }
+            } else {
+                if (arrowButton != null && !arrowButton.getModel().isPressed()
+                    && autoRepeatTimer.isRunning()) {
+                    autoRepeatTimer.stop();
+                    spinner = null;
+                    arrowButton = null;
+                }
             }
 
-            if (spinner == null) {
-                return;
-            }
-
-            try {
-                final int calendarField = getCalendarField(spinner);
-                spinner.commitEdit();
-                if (calendarField != -1) {
-                    ((SpinnerDateModel) spinner.getModel()).setCalendarField(calendarField);
+            if (spinner != null) {
+
+                try {
+                    final int calendarField = getCalendarField(spinner);
+                    spinner.commitEdit();
+                    if (calendarField != -1) {
+                        ((SpinnerDateModel) spinner.getModel()).setCalendarField(calendarField);
+                    }
+                    final Object value = (isNext) ? spinner.getNextValue() : spinner.getPreviousValue();
+                    if (value != null) {
+                        spinner.setValue(value);
+                        select(spinner);
+                    }
+                } catch (final IllegalArgumentException iae) {
+                    UIManager.getLookAndFeel().provideErrorFeedback(spinner);
+                } catch (final ParseException pe) {
+                    UIManager.getLookAndFeel().provideErrorFeedback(spinner);
                 }
-                final Object value = (isNext) ? spinner.getNextValue() : spinner.getPreviousValue();
-                if (value != null) {
-                    spinner.setValue(value);
-                    select(spinner);
-                }
-            } catch (final IllegalArgumentException iae) {
-                UIManager.getLookAndFeel().provideErrorFeedback(spinner);
-            } catch (final ParseException pe) {
-                UIManager.getLookAndFeel().provideErrorFeedback(spinner);
             }
         }
 
         /**
          * If the spinner's editor is a DateEditor, this selects the field
          * associated with the value that is being incremented.
          */
         private void select(final JSpinner spinnerComponent) {
+            if (spinnerComponent == null) {
+                return;
+            }
             final JComponent editor = spinnerComponent.getEditor();
             if (!(editor instanceof JSpinner.DateEditor)) {
                 return;
             }
 
@@ -485,10 +507,11 @@
         }
 
         @Override
         public void mouseReleased(final MouseEvent e) {
             autoRepeatTimer.stop();
+            arrowButton = null;
             spinner = null;
         }
 
         @Override
         public void mouseClicked(final MouseEvent e) {
@@ -531,10 +554,27 @@
 
             if (child != null && SwingUtilities.isDescendingFrom(child, spinner)) {
                 child.requestFocus();
             }
         }
+
+        public void focusGained(FocusEvent e) {
+        }
+
+        public void focusLost(FocusEvent e) {
+            if (spinner == eventToSpinner(e)) {
+                if (autoRepeatTimer.isRunning()) {
+                    autoRepeatTimer.stop();
+                }
+                spinner = null;
+                if (arrowButton != null) {
+                    ButtonModel model = arrowButton.getModel();
+                    model.setPressed(false);
+                    arrowButton = null;
+                }
+            }
+        }
     }
 
     @SuppressWarnings("serial") // Superclass is not serializable across versions
     class SpinPainter extends JComponent {
 
@@ -724,10 +764,28 @@
                 if ("editor".equals(propertyName)) {
                     final JComponent oldEditor = (JComponent) e.getOldValue();
                     final JComponent newEditor = (JComponent) e.getNewValue();
                     ui.replaceEditor(oldEditor, newEditor);
                     ui.updateEnabledState();
+                    if (oldEditor instanceof JSpinner.DefaultEditor) {
+                        JTextField tf = ((JSpinner.DefaultEditor)oldEditor).getTextField();
+                        if (tf != null) {
+                            tf.removeFocusListener(getNextButtonHandler());
+                            tf.removeFocusListener(getPreviousButtonHandler());
+                        }
+                    }
+                    if (newEditor instanceof JSpinner.DefaultEditor) {
+                        JTextField tf = ((JSpinner.DefaultEditor)newEditor).getTextField();
+                        if (tf != null) {
+                            if (tf.getFont() instanceof UIResource) {
+                                Font font = spinner.getFont();
+                                tf.setFont(font == null ? null : new FontUIResource(font));
+                            }
+                            tf.addFocusListener(getNextButtonHandler());
+                            tf.addFocusListener(getPreviousButtonHandler());
+                        }
+                    }
                 } else if ("componentOrientation".equals(propertyName)) {
                     ComponentOrientation o
                             = (ComponentOrientation) e.getNewValue();
                     if (o != e.getOldValue()) {
                         JComponent editor = spinner.getEditor();
