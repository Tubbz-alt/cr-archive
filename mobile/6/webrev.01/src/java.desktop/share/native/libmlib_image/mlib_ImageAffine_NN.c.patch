diff a/src/java.desktop/share/native/libmlib_image/mlib_ImageAffine_NN.c b/src/java.desktop/share/native/libmlib_image/mlib_ImageAffine_NN.c
--- a/src/java.desktop/share/native/libmlib_image/mlib_ImageAffine_NN.c
+++ b/src/java.desktop/share/native/libmlib_image/mlib_ImageAffine_NN.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -54,13 +54,10 @@
 
   for (j = yStart; j <= yFinish; j++) {
     CLIP(1);
     dstLineEnd = (DTYPE *) dstData + xRight;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (; dp <= dstLineEnd; dp++) {
       sp = S_PTR(Y) + (X >> MLIB_SHIFT);
       dp[0] = sp[0];
 
       X += dX;
@@ -91,13 +88,10 @@
       X += dX;
       Y += dY;
       size--;
     }
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (i = 0; i <= (size - 2); i += 2) {
       mlib_f32 *sp0, *sp1;
 
       sp0 = (mlib_f32 *) S_PTR(Y);
       sp1 = (mlib_f32 *) S_PTR(Y + dY);
@@ -132,13 +126,10 @@
 
   for (j = yStart; j <= yFinish; j++) {
     CLIP(2);
     dstLineEnd = (DTYPE *) dstData + 2 * xRight;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (; dp <= dstLineEnd; dp += 2) {
       sp = S_PTR(Y) + 2 * (X >> MLIB_SHIFT);
       dp[0] = sp[0];
       dp[1] = sp[1];
 
@@ -159,13 +150,10 @@
 
   for (j = yStart; j <= yFinish; j++) {
     CLIP(3);
     dstLineEnd = (DTYPE *) dstData + 3 * xRight;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (; dp <= dstLineEnd; dp += 3) {
       sp = S_PTR(Y) + 3 * (X >> MLIB_SHIFT);
       dp[0] = sp[0];
       dp[1] = sp[1];
       dp[2] = sp[2];
@@ -187,13 +175,10 @@
 
   for (j = yStart; j <= yFinish; j++) {
     CLIP(4);
     dstLineEnd = (DTYPE *) dstData + 4 * xRight;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (; dp <= dstLineEnd; dp += 4) {
       sp = S_PTR(Y) + 4 * (X >> MLIB_SHIFT);
       dp[0] = sp[0];
       dp[1] = sp[1];
       dp[2] = sp[2];
@@ -219,13 +204,10 @@
 
   for (j = yStart; j <= yFinish; j++) {
     CLIP(1);
     dstLineEnd = (DTYPE *) dstData + xRight;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (; dp <= dstLineEnd; dp++) {
       sp = S_PTR(Y);
       dp[0] = sp[X >> MLIB_SHIFT];
 
       X += dX;
@@ -245,13 +227,10 @@
 
   for (j = yStart; j <= yFinish; j++) {
     CLIP(2);
     dstLineEnd = (DTYPE *) dstData + 2 * xRight;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (; dp <= dstLineEnd; dp += 2) {
       sp = S_PTR(Y) + 2 * (X >> MLIB_SHIFT);
       dp[0] = sp[0];
       dp[1] = sp[1];
 
@@ -272,13 +251,10 @@
 
   for (j = yStart; j <= yFinish; j++) {
     CLIP(3);
     dstLineEnd = (DTYPE *) dstData + 3 * xRight;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (; dp <= dstLineEnd; dp += 3) {
       sp = S_PTR(Y) + 3 * (X >> MLIB_SHIFT);
       dp[0] = sp[0];
       dp[1] = sp[1];
       dp[2] = sp[2];
@@ -300,13 +276,10 @@
 
   for (j = yStart; j <= yFinish; j++) {
     CLIP(4);
     dstLineEnd = (DTYPE *) dstData + 4 * xRight;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (; dp <= dstLineEnd; dp += 4) {
       sp = S_PTR(Y) + 4 * (X >> MLIB_SHIFT);
       dp[0] = sp[0];
       dp[1] = sp[1];
       dp[2] = sp[2];
