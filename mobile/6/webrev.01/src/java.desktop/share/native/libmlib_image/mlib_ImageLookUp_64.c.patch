diff a/src/java.desktop/share/native/libmlib_image/mlib_ImageLookUp_64.c b/src/java.desktop/share/native/libmlib_image/mlib_ImageLookUp_64.c
--- a/src/java.desktop/share/native/libmlib_image/mlib_ImageLookUp_64.c
+++ b/src/java.desktop/share/native/libmlib_image/mlib_ImageLookUp_64.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -223,13 +223,10 @@
       sa = (mlib_u32 *) sp;
 
       s0 = sa[0];
       sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, dp += 4, sa++) {
         READ_U8_D64(tab, tab, tab, tab);
         s0 = sa[0];
         dp[0] = t0;
         dp[1] = t1;
@@ -284,13 +281,10 @@
       sa = (mlib_u32 *) sp;
 
       s0 = sa[0];
       sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, dp += 4, sa++) {
         READ_U8_D64(tab0, tab1, tab0, tab1);
         s0 = sa[0];
         dp[0] = t0;
         dp[1] = t1;
@@ -364,13 +358,10 @@
       sa = (mlib_u32 *) sp;
 
       s0 = sa[0];
       sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, dp += 4, sa++) {
         READ_U8_D64(tab0, tab1, tab2, tab0);
         tab = tab0;
         tab0 = tab1;
         tab1 = tab2;
@@ -465,13 +456,10 @@
       sa = (mlib_u32 *) sp;
 
       s0 = sa[0];
       sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, dp += 4, sa++) {
         READ_U8_D64(tab0, tab1, tab2, tab3);
         s0 = sa[0];
         dp[0] = t0;
         dp[1] = t1;
@@ -607,13 +595,10 @@
       sa = (mlib_u32 *) sp;
 
       s0 = sa[0];
       sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, dp += 8, sa++) {
 #ifdef _LITTLE_ENDIAN
         t0 = *(mlib_d64 *) ((mlib_u8 *) tab0 + ((s0 << 3) & 0x7F8));
         t1 = *(mlib_d64 *) ((mlib_u8 *) tab1 + ((s0 << 3) & 0x7F8));
         t2 = *(mlib_d64 *) ((mlib_u8 *) tab0 + ((s0 >> 5) & 0x7F8));
@@ -713,13 +698,10 @@
       sa = (mlib_u32 *) sp;
 
       s0 = sa[0];
       sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, dp += 12, sa++) {
 #ifdef _LITTLE_ENDIAN
         t0 = *(mlib_d64 *) ((mlib_u8 *) tab0 + ((s0 << 3) & 0x7F8));
         t1 = *(mlib_d64 *) ((mlib_u8 *) tab1 + ((s0 << 3) & 0x7F8));
         t2 = *(mlib_d64 *) ((mlib_u8 *) tab2 + ((s0 << 3) & 0x7F8));
@@ -846,13 +828,10 @@
       sa = (mlib_u32 *) sp;
 
       s0 = sa[0];
       sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, dp += 16, sa++) {
 #ifdef _LITTLE_ENDIAN
         t0 = *(mlib_d64 *) ((mlib_u8 *) tab0 + ((s0 << 3) & 0x7F8));
         t1 = *(mlib_d64 *) ((mlib_u8 *) tab1 + ((s0 << 3) & 0x7F8));
         t2 = *(mlib_d64 *) ((mlib_u8 *) tab2 + ((s0 << 3) & 0x7F8));
