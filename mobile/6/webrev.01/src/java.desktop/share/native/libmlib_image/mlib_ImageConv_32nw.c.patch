diff a/src/java.desktop/share/native/libmlib_image/mlib_ImageConv_32nw.c b/src/java.desktop/share/native/libmlib_image/mlib_ImageConv_32nw.c
--- a/src/java.desktop/share/native/libmlib_image/mlib_ImageConv_32nw.c
+++ b/src/java.desktop/share/native/libmlib_image/mlib_ImageConv_32nw.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -125,13 +125,10 @@
     if (!(cmask & (1 << (chan1 - 1 - c)))) continue;
 
       sl = sl_c + c;
       dl = dl_c + c;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (j = 0; j < hsize; j++) pbuff[j] = 0.0;
 
       for (i = 0; i < wid; i++) {
         sl0 = sl;
 
@@ -141,13 +138,10 @@
 
           k0 = pk[0]; k1 = pk[1]; k2 = pk[2]; k3 = pk[3];
           p2 = sp[0]; p3 = sp[sll]; p4 = sp[2*sll];
           sp += 3*sll;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
           for (j = 0; j < hsize; j += 2) {
             p0 = p2; p1 = p3; p2 = p4;
             p3 = sp[0];
             p4 = sp[sll];
 
@@ -170,13 +164,10 @@
         kh = n - off;
 
         if (kh == 4) {
           sp += 3*sll;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
           for (j = 0; j <= (hsize - 2); j += 2) {
             p0 = p2; p1 = p3; p2 = p4;
             p3 = sp[0];
             p4 = sp[sll];
 
@@ -203,13 +194,10 @@
           }
 
         } else if (kh == 3) {
           sp += 2*sll;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
           for (j = 0; j <= (hsize - 2); j += 2) {
             p0 = p2; p1 = p3;
             p2 = sp[0];
             p3 = sp[sll];
 
@@ -236,13 +224,10 @@
           }
 
         } else if (kh == 2) {
           sp += sll;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
           for (j = 0; j <= (hsize - 2); j += 2) {
             p0 = p2;
             p1 = sp[0];
             p2 = sp[sll];
 
@@ -267,13 +252,10 @@
 
             pbuff[j] = 0;
           }
 
         } else /* if (kh == 1) */ {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
           for (j = 0; j < hsize; j++) {
             p0 = sp[0];
 
             d0 = p0*k0 + pbuff[j];
             CLAMP_S32(dp[0], d0);
@@ -380,25 +362,19 @@
     dl = adr_dst + c;
 
     for (l = 0; l < n; l++) {
       mlib_d64 *buff = buffs[l];
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < wid + (m - 1); i++) {
         buff[i] = (mlib_d64)sl[i*chan1];
       }
 
       sl += sll;
     }
 
     buff_ind = 0;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (i = 0; i < wid; i++) buffd[i] = 0.0;
 
     for (j = 0; j < hgt; j++) {
       mlib_d64 **buffc = buffs + buff_ind;
       mlib_d64 *buffn = buffc[n];
@@ -427,26 +403,20 @@
           pk += kw;
 
           if (kw == 7) {
 
             if (l < (n - 1) || off < m) {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4; p3 = p5; p4 = p6; p5 = p7;
 
                 p6 = buff[i + 6]; p7 = buff[i + 7];
 
                 buffd[i    ] += p0*k0 + p1*k1 + p2*k2 + p3*k3 + p4*k4 + p5*k5 + p6*k6;
                 buffd[i + 1] += p1*k0 + p2*k1 + p3*k2 + p4*k3 + p5*k4 + p6*k5 + p7*k6;
               }
 
             } else {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4; p3 = p5; p4 = p6; p5 = p7;
 
                 p6 = buff[i + 6]; p7 = buff[i + 7];
 
@@ -468,26 +438,20 @@
             }
 
           } else if (kw == 6) {
 
             if (l < (n - 1) || off < m) {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4; p3 = p5; p4 = p6;
 
                 p5 = buff[i + 5]; p6 = buff[i + 6];
 
                 buffd[i    ] += p0*k0 + p1*k1 + p2*k2 + p3*k3 + p4*k4 + p5*k5;
                 buffd[i + 1] += p1*k0 + p2*k1 + p3*k2 + p4*k3 + p5*k4 + p6*k5;
               }
 
             } else {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4; p3 = p5; p4 = p6;
 
                 p5 = buff[i + 5]; p6 = buff[i + 6];
 
@@ -509,26 +473,20 @@
             }
 
           } else if (kw == 5) {
 
             if (l < (n - 1) || off < m) {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4; p3 = p5;
 
                 p4 = buff[i + 4]; p5 = buff[i + 5];
 
                 buffd[i    ] += p0*k0 + p1*k1 + p2*k2 + p3*k3 + p4*k4;
                 buffd[i + 1] += p1*k0 + p2*k1 + p3*k2 + p4*k3 + p5*k4;
               }
 
             } else {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4; p3 = p5;
 
                 p4 = buff[i + 4]; p5 = buff[i + 5];
 
@@ -550,26 +508,20 @@
             }
 
           } else if (kw == 4) {
 
             if (l < (n - 1) || off < m) {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4;
 
                 p3 = buff[i + 3]; p4 = buff[i + 4];
 
                 buffd[i    ] += p0*k0 + p1*k1 + p2*k2 + p3*k3;
                 buffd[i + 1] += p1*k0 + p2*k1 + p3*k2 + p4*k3;
               }
 
             } else {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4;
 
                 p3 = buff[i + 3]; p4 = buff[i + 4];
 
@@ -591,26 +543,20 @@
             }
 
           } else if (kw == 3) {
 
             if (l < (n - 1) || off < m) {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3;
 
                 p2 = buff[i + 2]; p3 = buff[i + 3];
 
                 buffd[i    ] += p0*k0 + p1*k1 + p2*k2;
                 buffd[i + 1] += p1*k0 + p2*k1 + p3*k2;
               }
 
             } else {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3;
 
                 p2 = buff[i + 2]; p3 = buff[i + 3];
 
@@ -632,26 +578,20 @@
             }
 
           } else { /* kw == 2 */
 
             if (l < (n - 1) || off < m) {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2;
 
                 p1 = buff[i + 1]; p2 = buff[i + 2];
 
                 buffd[i    ] += p0*k0 + p1*k1;
                 buffd[i + 1] += p1*k0 + p2*k1;
               }
 
             } else {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2;
 
                 p1 = buff[i + 1]; p2 = buff[i + 2];
 
