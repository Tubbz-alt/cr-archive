diff a/src/java.desktop/share/native/libmlib_image/mlib_c_ImageLookUp_f.c b/src/java.desktop/share/native/libmlib_image/mlib_c_ImageLookUp_f.c
--- a/src/java.desktop/share/native/libmlib_image/mlib_c_ImageLookUp_f.c
+++ b/src/java.desktop/share/native/libmlib_image/mlib_c_ImageLookUp_f.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -248,13 +248,10 @@
 
         s0 = sa[0];
         s1 = sa[1];
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 7; i += 4, da++, sa += 2) {
           READ_U8_U8_ALIGN(tab, tab, tab, tab);
           t = (t0 << 24) + (t1 << 16) + (t2 << 8) + t3;
           s0 = sa[0];
           s1 = sa[1];
@@ -278,13 +275,10 @@
         s0 = sa[0];
         s1 = sa[1];
         s2 = sa[2];
         sa += 3;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 8; i += 4, da++, sa += 2) {
           READ_U8_U8_NOTALIGN(tab, tab, tab, tab);
           t = (t0 << 24) + (t1 << 16) + (t2 << 8) + t3;
           s0 = s2;
           s1 = sa[0];
@@ -348,13 +342,10 @@
 
         s0 = sa[0];
         s1 = sa[1];
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 7; i += 4, da++, sa += 2) {
           READ_U8_U8_ALIGN(tab0, tab1, tab0, tab1);
           t = (t0 << 24) + (t1 << 16) + (t2 << 8) + t3;
           s0 = sa[0];
           s1 = sa[1];
@@ -384,13 +375,10 @@
         s0 = sa[0];
         s1 = sa[1];
         s2 = sa[2];
         sa += 3;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 8; i += 4, da++, sa += 2) {
           READ_U8_U8_NOTALIGN(tab0, tab1, tab0, tab1);
           t = (t0 << 24) + (t1 << 16) + (t2 << 8) + t3;
           s0 = s2;
           s1 = sa[0];
@@ -473,13 +461,10 @@
 
         s0 = sa[0];
         s1 = sa[1];
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 7; i += 4, da++, sa += 2) {
           READ_U8_U8_ALIGN(tab0, tab1, tab2, tab0);
           t = (t0 << 24) + (t1 << 16) + (t2 << 8) + t3;
           tab = tab0;
           tab0 = tab1;
@@ -521,13 +506,10 @@
         s0 = sa[0];
         s1 = sa[1];
         s2 = sa[2];
         sa += 3;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 8; i += 4, da++, sa += 2) {
           READ_U8_U8_NOTALIGN(tab0, tab1, tab2, tab0);
           t = (t0 << 24) + (t1 << 16) + (t2 << 8) + t3;
           tab = tab0;
           tab0 = tab1;
@@ -631,13 +613,10 @@
 
         s0 = sa[0];
         s1 = sa[1];
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 7; i += 4, da++, sa += 2) {
           READ_U8_U8_ALIGN(tab0, tab1, tab2, tab3);
           t = (t0 << 24) + (t1 << 16) + (t2 << 8) + t3;
           s0 = sa[0];
           s1 = sa[1];
@@ -675,13 +654,10 @@
         s0 = sa[0];
         s1 = sa[1];
         s2 = sa[2];
         sa += 3;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 8; i += 4, da++, sa += 2) {
           READ_U8_U8_NOTALIGN(tab0, tab1, tab2, tab3);
           t = (t0 << 24) + (t1 << 16) + (t2 << 8) + t3;
           s0 = s2;
           s1 = sa[0];
@@ -823,13 +799,10 @@
         da = (mlib_u32 *) dp;
 
         s0 = sa[0];
         sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 7; i += 4, da += 2, sa++) {
           READ_U8_S16_ALIGN(tab, tab, tab, tab);
           res1 = (t0 << 16) + t1;
           res2 = (t2 << 16) + t3;
           s0 = sa[0];
@@ -858,13 +831,10 @@
 
         s0 = sa[0];
         s1 = sa[1];
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 10; i += 4, da += 2, sa++) {
           READ_U8_S16_NOTALIGN(tab, tab, tab, tab);
           s0 = s1;
           res1 = (t0 << 16) + t1;
           res2 = (t2 << 16) + t3;
@@ -931,13 +901,10 @@
         da = (mlib_u32 *) dp;
 
         s0 = sa[0];
         sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 7; i += 4, da += 2, sa++) {
           READ_U8_S16_ALIGN(tab0, tab1, tab0, tab1);
           res1 = (t0 << 16) + t1;
           res2 = (t2 << 16) + t3;
           s0 = sa[0];
@@ -972,13 +939,10 @@
 
         s0 = sa[0];
         s1 = sa[1];
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 10; i += 4, da += 2, sa++) {
           READ_U8_S16_NOTALIGN(tab1, tab0, tab1, tab0);
           s0 = s1;
           res1 = (t0 << 16) + t1;
           res2 = (t2 << 16) + t3;
@@ -1064,13 +1028,10 @@
         da = (mlib_u32 *) dp;
 
         s0 = sa[0];
         sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 7; i += 4, da += 2, sa++) {
           READ_U8_S16_ALIGN(tab0, tab1, tab2, tab0);
           res1 = (t0 << 16) + t1;
           res2 = (t2 << 16) + t3;
           tab = tab0;
@@ -1117,13 +1078,10 @@
 
         s0 = sa[0];
         s1 = sa[1];
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 10; i += 4, da += 2, sa++) {
           READ_U8_S16_NOTALIGN(tab1, tab2, tab0, tab1);
           s0 = s1;
           res1 = (t0 << 16) + t1;
           res2 = (t2 << 16) + t3;
@@ -1230,13 +1188,10 @@
         da = (mlib_u32 *) dp;
 
         s0 = sa[0];
         sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 7; i += 4, da += 2, sa++) {
           READ_U8_S16_ALIGN(tab0, tab1, tab2, tab3);
           res1 = (t0 << 16) + t1;
           res2 = (t2 << 16) + t3;
           s0 = sa[0];
@@ -1279,13 +1234,10 @@
 
         s0 = sa[0];
         s1 = sa[1];
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 10; i += 4, da += 2, sa++) {
           READ_U8_S16_NOTALIGN(tab1, tab2, tab3, tab0);
           s0 = s1;
           res1 = (t0 << 16) + t1;
           res2 = (t2 << 16) + t3;
@@ -1484,13 +1436,10 @@
       sa = (mlib_u32 *) sp;
 
       s0 = sa[0];
       sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, dp += 4, sa++) {
         READ_U8_S32(tab, tab, tab, tab);
         s0 = sa[0];
         dp[0] = t0;
         dp[1] = t1;
@@ -1545,13 +1494,10 @@
       sa = (mlib_u32 *) sp;
 
       s0 = sa[0];
       sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, dp += 4, sa++) {
         READ_U8_S32(tab0, tab1, tab0, tab1);
         s0 = sa[0];
         dp[0] = t0;
         dp[1] = t1;
@@ -1625,13 +1571,10 @@
       sa = (mlib_u32 *) sp;
 
       s0 = sa[0];
       sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, dp += 4, sa++) {
         READ_U8_S32(tab0, tab1, tab2, tab0);
         tab = tab0;
         tab0 = tab1;
         tab1 = tab2;
@@ -1726,13 +1669,10 @@
       sa = (mlib_u32 *) sp;
 
       s0 = sa[0];
       sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, dp += 4, sa++) {
         READ_U8_S32(tab0, tab1, tab2, tab3);
         s0 = sa[0];
         dp[0] = t0;
         dp[1] = t1;
@@ -1889,13 +1829,10 @@
 
         s0 = sa[0];
         s1 = sa[1];
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 3; i += 2, da++, sa += 2) {
           t0 = tab[s0];
           t1 = tab[s1];
 #ifdef _LITTLE_ENDIAN
           t = (t1 << 16) + t0;
@@ -1951,13 +1888,10 @@
 
         s0 = sa[0];
         s1 = sa[1];
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 4; i += 2, da++, sa += 2) {
           t1 = tab[s0];
           t2 = tab[s1];
 #ifdef _LITTLE_ENDIAN
           t = (t0 >> 8) + (t1 << 8) + (t2 << 24);
@@ -2038,13 +1972,10 @@
       mlib_u32 res1, res2;
       mlib_s32 size = xsize, off;
 
       off = (mlib_s32) ((mlib_addr) dp & 3);
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < off; i++) {
         ptr = (mlib_u8 *) (tab + sa[0]);
         dp[0] = ptr[1];
         dp[1] = ptr[2];
         dp[2] = ptr[3];
@@ -2056,13 +1987,10 @@
       da = (mlib_u32 *) dp;
       s0 = sa[0];
       s1 = sa[1];
       sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, da += 3, sa += 4) {
         t0 = tab[s0];
         t1 = tab[s1];
 #ifdef _LITTLE_ENDIAN
         da[0] = (t0 >> 8) + (t1 << 16);
@@ -2113,13 +2041,10 @@
       da += 3;
       sa += 2;
       dp = (mlib_u8 *) da;
       i += 4;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (; i < size; i++) {
         ptr = (mlib_u8 *) (tab + sa[0]);
         dp[0] = ptr[1];
         dp[1] = ptr[2];
         dp[2] = ptr[3];
@@ -2176,13 +2101,10 @@
 
         s0 = sa[0];
         s1 = sa[1];
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 3; i += 2, da += 2, sa += 2) {
           t0 = tab[s0];
           t1 = tab[s1];
           s0 = sa[0];
           s1 = sa[1];
@@ -2217,13 +2139,10 @@
 
         s0 = sa[0];
         s1 = sa[1];
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 4; i += 2, da += 2, sa += 2) {
           t1 = tab[s0];
           t2 = tab[s1];
 #ifdef _LITTLE_ENDIAN
           res1 = (t0 >> shift) + (t1 << shift1);
@@ -2319,13 +2238,10 @@
       mlib_u32 res1, res2;
       mlib_s32 size = xsize, off;
 
       off = (mlib_s32) ((mlib_addr) dp & 3);
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < off; i++) {
         s0 = *sa++;
         dp[0] = tab0[s0];
         dp[1] = tab1[s0];
         dp[2] = tab2[s0];
@@ -2336,13 +2252,10 @@
       da = (mlib_u32 *) dp;
       s0 = sa[0];
       s1 = sa[1];
       sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, da += 3, sa += 4) {
         t0 = tab0[s0];
         t1 = tab1[s0];
         t2 = tab2[s0];
         t3 = tab0[s1];
@@ -2409,13 +2322,10 @@
       da += 3;
       sa += 2;
       dp = (mlib_u8 *) da;
       i += 4;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (; i < size; i++) {
         s0 = *sa++;
         dp[0] = tab0[s0];
         dp[1] = tab1[s0];
         dp[2] = tab2[s0];
@@ -2445,13 +2355,10 @@
         da = (mlib_u32 *) dp;
 
         s0 = sa[0];
         sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 1; i++, da++, sa++) {
           t0 = tab0[s0];
           t1 = tab1[s0];
           t2 = tab2[s0];
           t3 = tab3[s0];
@@ -2503,13 +2410,10 @@
 #endif /* _LITTLE_ENDIAN */
 
         s0 = sa[0];
         sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 2; i++, da++, sa++) {
           t0 = tab0[s0];
           t1 = tab1[s0];
           t2 = tab2[s0];
           t3 = tab3[s0];
@@ -2588,13 +2492,10 @@
       mlib_u32 res1, res2;
       mlib_s32 size = xsize, off;
 
       off = (mlib_s32) ((mlib_addr) dp & 3);
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < off; i++) {
         s0 = *sa++;
         dp[0] = tab0[s0];
         dp[1] = tab1[s0];
         dp[2] = tab2[s0];
@@ -2605,13 +2506,10 @@
       da = (mlib_u32 *) dp;
       s0 = sa[0];
       s1 = sa[1];
       sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, da += 3, sa += 4) {
         t0 = tab0[s0];
         t1 = tab1[s0];
         t2 = tab2[s0];
         t3 = tab0[s1];
@@ -2678,13 +2576,10 @@
       da += 3;
       sa += 2;
       dp = (mlib_u8 *) da;
       i += 4;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (; i < size; i++) {
         s0 = *sa++;
         dp[0] = tab0[s0];
         dp[1] = tab1[s0];
         dp[2] = tab2[s0];
@@ -2714,13 +2609,10 @@
         da = (mlib_u32 *) dp;
 
         s0 = sa[0];
         sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 1; i++, da++, sa++) {
           t0 = tab0[s0];
           t1 = tab1[s0];
           t2 = tab2[s0];
           t3 = tab3[s0];
@@ -2772,13 +2664,10 @@
 #endif /* _LITTLE_ENDIAN */
 
         s0 = sa[0];
         sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 2; i++, da++, sa++) {
           t0 = tab0[s0];
           t1 = tab1[s0];
           t2 = tab2[s0];
           t3 = tab3[s0];
@@ -2893,13 +2782,10 @@
         da = (mlib_u32 *) dp;
         s0 = sa[0];
         s1 = sa[1];
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 3; i += 2, da += 2, sa += 2) {
           t0 = tab[s0];
           t1 = tab[s1];
           s0 = sa[0];
           s1 = sa[1];
@@ -2927,13 +2813,10 @@
         da = (mlib_u32 *) dp;
         s0 = sa[0];
         s1 = sa[1];
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 4; i += 2, da += 2, sa += 2) {
           t1 = tab[s0];
           t2 = tab[s1];
 #ifdef _LITTLE_ENDIAN
           res1 = (t0 >> 16) + (t1 << 16);
@@ -3040,13 +2923,10 @@
       da = (mlib_u32 *) dp;
       s0 = sa[0] << 3;
       s1 = sa[1] << 3;
       sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 3; i += 2, da += 3, sa += 2) {
         t0 = *(mlib_u32 *) ((mlib_u8 *) tab + s0);
         t1 = *(mlib_u32 *) ((mlib_u8 *) tab + s0 + 4);
         t2 = *(mlib_u32 *) ((mlib_u8 *) tab + s1);
         t3 = *(mlib_u32 *) ((mlib_u8 *) tab + s1 + 4);
@@ -3144,13 +3024,10 @@
 
         s0 = sa[0] << 3;
         s1 = sa[1] << 3;
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 3; i += 2, da += 4, sa += 2) {
           t0 = *(mlib_u32 *) ((mlib_u8 *) tab + s0);
           t1 = *(mlib_u32 *) ((mlib_u8 *) tab + s0 + 4);
           t2 = *(mlib_u32 *) ((mlib_u8 *) tab + s1);
           t3 = *(mlib_u32 *) ((mlib_u8 *) tab + s1 + 4);
@@ -3195,13 +3072,10 @@
 #endif /* _LITTLE_ENDIAN */
         s0 = sa[0] << 3;
         s1 = sa[1] << 3;
         sa += 2;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
         for (i = 0; i < size - 4; i += 2, da += 4, sa += 2) {
           t0 = *(mlib_u32 *) ((mlib_u8 *) tab + s0);
           t1 = *(mlib_u32 *) ((mlib_u8 *) tab + s0 + 4);
           t2 = *(mlib_u32 *) ((mlib_u8 *) tab + s1);
           t3 = *(mlib_u32 *) ((mlib_u8 *) tab + s1 + 4);
@@ -3433,13 +3307,10 @@
       sa = (mlib_u32 *) sp;
 
       s0 = sa[0];
       sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, dp += 8, sa++) {
 #ifdef _LITTLE_ENDIAN
         t0 = *(mlib_u32 *) ((mlib_u8 *) tab0 + ((s0 << 2) & 0x3FC));
         t1 = *(mlib_u32 *) ((mlib_u8 *) tab1 + ((s0 << 2) & 0x3FC));
         t2 = *(mlib_u32 *) ((mlib_u8 *) tab0 + ((s0 >> 6) & 0x3FC));
@@ -3539,13 +3410,10 @@
       sa = (mlib_u32 *) sp;
 
       s0 = sa[0];
       sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, dp += 12, sa++) {
 #ifdef _LITTLE_ENDIAN
         t0 = *(mlib_u32 *) ((mlib_u8 *) tab0 + ((s0 << 2) & 0x3FC));
         t1 = *(mlib_u32 *) ((mlib_u8 *) tab1 + ((s0 << 2) & 0x3FC));
         t2 = *(mlib_u32 *) ((mlib_u8 *) tab2 + ((s0 << 2) & 0x3FC));
@@ -3672,13 +3540,10 @@
       sa = (mlib_u32 *) sp;
 
       s0 = sa[0];
       sa++;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (i = 0; i < size - 7; i += 4, dp += 16, sa++) {
 #ifdef _LITTLE_ENDIAN
         t0 = *(mlib_u32 *) ((mlib_u8 *) tab0 + ((s0 << 2) & 0x3FC));
         t1 = *(mlib_u32 *) ((mlib_u8 *) tab1 + ((s0 << 2) & 0x3FC));
         t2 = *(mlib_u32 *) ((mlib_u8 *) tab2 + ((s0 << 2) & 0x3FC));
