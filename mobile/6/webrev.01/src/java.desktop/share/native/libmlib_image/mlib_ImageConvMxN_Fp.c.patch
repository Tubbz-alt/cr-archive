diff a/src/java.desktop/share/native/libmlib_image/mlib_ImageConvMxN_Fp.c b/src/java.desktop/share/native/libmlib_image/mlib_ImageConvMxN_Fp.c
--- a/src/java.desktop/share/native/libmlib_image/mlib_ImageConvMxN_Fp.c
+++ b/src/java.desktop/share/native/libmlib_image/mlib_ImageConvMxN_Fp.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -172,13 +172,10 @@
     mlib_f32 hval2 = (mlib_f32) kernel[2];
     mlib_f32 val0 = src[0];
     mlib_f32 val1 = src[nch];
     mlib_f32 hdvl = dst[0];
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (i = 0; i < n; i++) {
       mlib_f32 hdvl0 = val0 * hval0 + hdvl;
       mlib_f32 val2 = src2[i * nch];
 
       hdvl = hdst1[i * dnch];
@@ -196,13 +193,10 @@
     mlib_f32 hval0 = (mlib_f32) kernel[0];
     mlib_f32 hval1 = (mlib_f32) kernel[1];
     mlib_f32 val0 = src[0];
     mlib_f32 val1 = src[nch];
     mlib_f32 hdvl = dst[0];
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (i = 0; i < n; i++) {
       mlib_f32 hdvl0 = val0 * hval0 + hdvl;
       mlib_f32 val2 = src2[i * nch];
 
       hdvl = hdst1[i * dnch];
@@ -219,13 +213,10 @@
     mlib_f32 hval0 = (mlib_f32) kernel[0];
     mlib_f32 val0 = src[0];
     mlib_f32 val1 = src[nch];
     mlib_f32 hdvl = dst[0];
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (i = 0; i < n; i++) {
       mlib_f32 hdvl0 = val0 * hval0 + hdvl;
       mlib_f32 val2 = src2[i * nch];
 
       hdvl = hdst1[i * dnch];
@@ -248,13 +239,10 @@
   mlib_s32 i;
   mlib_f32 val = src[0];
 
   for (i = 0; i < dx_l; i++)
     dst[i] = val;
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
   for (; i < n - dx_r; i++)
     dst[i] = src[nch * (i - dx_l)];
   val = dst[n - dx_r - 1];
   for (; i < n; i++)
     dst[i] = val;
@@ -347,13 +335,10 @@
     mlib_f32 val0 = src[0];
     mlib_f32 val1 = src[nch];
     mlib_f32 hdvl = hdst[0];
     mlib_f32 vdvl = vdst[0];
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (i = 0; i < n; i++) {
       mlib_f32 hdvl0 = val0 * hval0 + hdvl;
       mlib_f32 vdvl0 = val0 * vval0 + vdvl;
       mlib_f32 val2 = src2[i * nch];
 
@@ -380,13 +365,10 @@
     mlib_f32 val0 = src[0];
     mlib_f32 val1 = src[nch];
     mlib_f32 hdvl = hdst[0];
     mlib_f32 vdvl = vdst[0];
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (i = 0; i < n; i++) {
       mlib_f32 hdvl0 = val0 * hval0 + hdvl;
       mlib_f32 vdvl0 = val0 * vval0 + vdvl;
       mlib_f32 val2 = src2[i * nch];
 
@@ -409,13 +391,10 @@
     mlib_f32 val0 = src[0];
     mlib_f32 val1 = src[nch];
     mlib_f32 hdvl = hdst[0];
     mlib_f32 vdvl = vdst[0];
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (i = 0; i < n; i++) {
       mlib_f32 hdvl0 = val0 * hval0 + hdvl;
       mlib_f32 vdvl0 = val0 * vval0 + vdvl;
       mlib_f32 val2 = src2[i * nch];
 
@@ -455,13 +434,10 @@
     mlib_d64 val0 = src[0];
     mlib_d64 val1 = src[nch];
     mlib_d64 hdvl = hdst[0];
     mlib_d64 vdvl = vdst[0];
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (i = 0; i < n; i++) {
       mlib_d64 hdvl0 = val0 * hval0 + hdvl;
       mlib_d64 vdvl0 = val0 * vval0 + vdvl;
       mlib_d64 val2 = src2[i * nch];
 
@@ -488,13 +464,10 @@
     mlib_d64 val0 = src[0];
     mlib_d64 val1 = src[nch];
     mlib_d64 hdvl = hdst[0];
     mlib_d64 vdvl = vdst[0];
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (i = 0; i < n; i++) {
       mlib_d64 hdvl0 = val0 * hval0 + hdvl;
       mlib_d64 vdvl0 = val0 * vval0 + vdvl;
       mlib_d64 val2 = src2[i * nch];
 
@@ -517,13 +490,10 @@
     mlib_d64 val0 = src[0];
     mlib_d64 val1 = src[nch];
     mlib_d64 hdvl = hdst[0];
     mlib_d64 vdvl = vdst[0];
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (i = 0; i < n; i++) {
       mlib_d64 hdvl0 = val0 * hval0 + hdvl;
       mlib_d64 vdvl0 = val0 * vval0 + vdvl;
       mlib_d64 val2 = src2[i * nch];
 
@@ -559,13 +529,10 @@
     mlib_d64 hval2 = kernel[2];
     mlib_d64 val0 = src[0];
     mlib_d64 val1 = src[nch];
     mlib_d64 hdvl = dst[0];
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (i = 0; i < n; i++) {
       mlib_d64 hdvl0 = val0 * hval0 + hdvl;
       mlib_d64 val2 = src2[i * nch];
 
       hdvl = hdst1[i * dnch];
@@ -584,13 +551,10 @@
     mlib_d64 hval1 = kernel[1];
     mlib_d64 val0 = src[0];
     mlib_d64 val1 = src[nch];
     mlib_d64 hdvl = dst[0];
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (i = 0; i < n; i++) {
       mlib_d64 hdvl0 = val0 * hval0 + hdvl;
       mlib_d64 val2 = src2[i * nch];
 
       hdvl = hdst1[i * dnch];
@@ -607,13 +571,10 @@
     mlib_d64 hval0 = kernel[0];
     mlib_d64 val0 = src[0];
     mlib_d64 val1 = src[nch];
     mlib_d64 hdvl = dst[0];
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
     for (i = 0; i < n; i++) {
       mlib_d64 hdvl0 = val0 * hval0 + hdvl;
       mlib_d64 val2 = src2[i * nch];
 
       hdvl = hdst1[i * dnch];
@@ -636,13 +597,10 @@
   mlib_s32 i;
   mlib_d64 val = src[0];
 
   for (i = 0; i < dx_l; i++)
     dst[i] = val;
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
   for (; i < n - dx_r; i++)
     dst[i] = src[nch * (i - dx_l)];
   val = dst[n - dx_r - 1];
   for (; i < n; i++)
     dst[i] = val;
