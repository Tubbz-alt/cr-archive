diff a/src/java.desktop/share/native/libmlib_image/mlib_ImageConvMxN.c b/src/java.desktop/share/native/libmlib_image/mlib_ImageConvMxN.c
--- a/src/java.desktop/share/native/libmlib_image/mlib_ImageConvMxN.c
+++ b/src/java.desktop/share/native/libmlib_image/mlib_ImageConvMxN.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -180,30 +180,20 @@
       switch (type) {
         case MLIB_BYTE:
           ret = mlib_convMxNnw_u8(dst_i, src_i, kernel, m, n, dm, dn, scale, cmask);
           break;
         case MLIB_SHORT:
-#ifdef __sparc
-          ret = mlib_convMxNnw_s16(dst_i, src_i, kernel, m, n, dm, dn, scale, cmask);
-#else
-
           if (mlib_ImageConvVersion(m, n, scale, type) == 0)
             ret = mlib_convMxNnw_s16(dst_i, src_i, kernel, m, n, dm, dn, scale, cmask);
           else
             ret = mlib_i_convMxNnw_s16(dst_i, src_i, kernel, m, n, dm, dn, scale, cmask);
-#endif /* __sparc */
           break;
         case MLIB_USHORT:
-#ifdef __sparc
-          ret = mlib_convMxNnw_u16(dst_i, src_i, kernel, m, n, dm, dn, scale, cmask);
-#else
-
           if (mlib_ImageConvVersion(m, n, scale, type) == 0)
             ret = mlib_convMxNnw_u16(dst_i, src_i, kernel, m, n, dm, dn, scale, cmask);
           else
             ret = mlib_i_convMxNnw_u16(dst_i, src_i, kernel, m, n, dm, dn, scale, cmask);
-#endif /* __sparc */
           break;
         case MLIB_INT:
           ret = mlib_convMxNnw_s32(dst_i, src_i, kernel, m, n, dm, dn, scale, cmask);
           break;
         case MLIB_FLOAT:
@@ -246,42 +236,28 @@
         ret =
           mlib_convMxNext_u8(dst_e, src_e, kernel, m, n, dx_l, dx_r, dy_t, dy_b, scale,
                              cmask);
         break;
       case MLIB_SHORT:
-#ifdef __sparc
-        ret =
-          mlib_convMxNext_s16(dst_e, src_e, kernel, m, n, dx_l, dx_r, dy_t, dy_b, scale,
-                              cmask);
-#else
-
         if (mlib_ImageConvVersion(m, n, scale, type) == 0)
           ret =
             mlib_convMxNext_s16(dst_e, src_e, kernel, m, n, dx_l, dx_r, dy_t, dy_b, scale,
                                 cmask);
         else
           ret =
             mlib_i_convMxNext_s16(dst_e, src_e, kernel, m, n, dx_l, dx_r, dy_t, dy_b,
                                   scale, cmask);
-#endif /* __sparc */
         break;
       case MLIB_USHORT:
-#ifdef __sparc
-        ret =
-          mlib_convMxNext_u16(dst_e, src_e, kernel, m, n, dx_l, dx_r, dy_t, dy_b, scale,
-                              cmask);
-#else
-
         if (mlib_ImageConvVersion(m, n, scale, type) == 0)
           ret =
             mlib_convMxNext_u16(dst_e, src_e, kernel, m, n, dx_l, dx_r, dy_t, dy_b, scale,
                                 cmask);
         else
           ret =
             mlib_i_convMxNext_u16(dst_e, src_e, kernel, m, n, dx_l, dx_r, dy_t, dy_b,
                                   scale, cmask);
-#endif /* __sparc */
         break;
       case MLIB_INT:
         ret =
           mlib_convMxNext_s32(dst_e, src_e, kernel, m, n, dx_l, dx_r, dy_t, dy_b, scale,
                               cmask);
