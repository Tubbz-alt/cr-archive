diff a/src/java.desktop/share/native/libmlib_image/mlib_ImageConv_F32nw.c b/src/java.desktop/share/native/libmlib_image/mlib_ImageConv_F32nw.c
--- a/src/java.desktop/share/native/libmlib_image/mlib_ImageConv_F32nw.c
+++ b/src/java.desktop/share/native/libmlib_image/mlib_ImageConv_F32nw.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -118,13 +118,10 @@
       if (!(cmask & (1 << (chan1 - 1 - c)))) continue;
 
       sl = sl_c + c;
       dl = dl_c + c;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
       for (j = 0; j < hsize; j++) pbuff[j] = 0.0;
 
       for (i = 0; i < wid; i++) {
         sl0 = sl;
 
@@ -134,13 +131,10 @@
 
           k0 = pk[0]; k1 = pk[1]; k2 = pk[2]; k3 = pk[3];
           p2 = sp[0]; p3 = sp[sll]; p4 = sp[2*sll];
           sp += 3*sll;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
           for (j = 0; j < hsize; j += 2) {
             p0 = p2; p1 = p3; p2 = p4;
             p3 = sp[0];
             p4 = sp[sll];
 
@@ -163,13 +157,10 @@
         kh = n - off;
 
         if (kh == 4) {
           sp += 3*sll;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
           for (j = 0; j <= (hsize - 2); j += 2) {
             p0 = p2; p1 = p3; p2 = p4;
             p3 = sp[0];
             p4 = sp[sll];
 
@@ -193,13 +184,10 @@
           }
 
         } else if (kh == 3) {
           sp += 2*sll;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
           for (j = 0; j <= (hsize - 2); j += 2) {
             p0 = p2; p1 = p3;
             p2 = sp[0];
             p3 = sp[sll];
 
@@ -223,13 +211,10 @@
           }
 
         } else if (kh == 2) {
           sp += sll;
 
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
           for (j = 0; j <= (hsize - 2); j += 2) {
             p0 = p2;
             p1 = sp[0];
             p2 = sp[sll];
 
@@ -251,13 +236,10 @@
 
             pbuff[j] = 0;
           }
 
         } else /* if (kh == 1) */ {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
           for (j = 0; j < hsize; j++) {
             p0 = sp[0];
 
             dp[0] = p0*k0 + pbuff[j];
 
@@ -351,13 +333,10 @@
 
           if (kw == 7) {
             sp = sp0 += chan3;
 
             if (pk == k) {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4; p3 = p5; p4 = p6;
 
                 p5 = sp[- chan1]; p6 = sp[0]; p7 = sp[chan1];
 
@@ -367,13 +346,10 @@
                 sp += chan2;
                 dp += chan2;
               }
 
             } else {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4; p3 = p5; p4 = p6;
 
                 p5 = sp[- chan1]; p6 = sp[0]; p7 = sp[chan1];
 
@@ -387,13 +363,10 @@
 
           } else if (kw == 6) {
             sp = sp0 += chan2;
 
             if (pk == k) {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4; p3 = p5; p4 = p6;
 
                 p5 = sp[0]; p6 = sp[chan1];
 
@@ -403,13 +376,10 @@
                 sp += chan2;
                 dp += chan2;
               }
 
             } else {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4; p3 = p5; p4 = p6;
 
                 p5 = sp[0]; p6 = sp[chan1];
 
@@ -423,13 +393,10 @@
 
           } else if (kw == 5) {
             sp = sp0 += chan1;
 
             if (pk == k) {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4; p3 = p5;
 
                 p4 = sp[0]; p5 = sp[chan1];
 
@@ -439,13 +406,10 @@
                 sp += chan2;
                 dp += chan2;
               }
 
             } else {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4; p3 = p5;
 
                 p4 = sp[0]; p5 = sp[chan1];
 
@@ -460,13 +424,10 @@
           } else if (kw == 4) {
 
             sp = sp0;
 
             if (pk == k) {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4;
 
                 p3 = sp[0]; p4 = sp[chan1];
 
@@ -476,13 +437,10 @@
                 sp += chan2;
                 dp += chan2;
               }
 
             } else {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3; p2 = p4;
 
                 p3 = sp[0]; p4 = sp[chan1];
 
@@ -496,13 +454,10 @@
 
           } else if (kw == 3) {
             sp = sp0 -= chan1;
 
             if (pk == k) {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3;
 
                 p2 = sp[0]; p3 = sp[chan1];
 
@@ -512,13 +467,10 @@
                 sp += chan2;
                 dp += chan2;
               }
 
             } else {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2; p1 = p3;
 
                 p2 = sp[0]; p3 = sp[chan1];
 
@@ -532,13 +484,10 @@
 
           } else { /* kw == 2 */
             sp = sp0 -= chan2;
 
             if (pk == k) {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2;
 
                 p1 = sp[0]; p2 = sp[chan1];
 
@@ -548,13 +497,10 @@
                 sp += chan2;
                 dp += chan2;
               }
 
             } else {
-#ifdef __SUNPRO_C
-#pragma pipeloop(0)
-#endif /* __SUNPRO_C */
               for (i = 0; i <= (wid - 2); i += 2) {
                 p0 = p2;
 
                 p1 = sp[0]; p2 = sp[chan1];
 
