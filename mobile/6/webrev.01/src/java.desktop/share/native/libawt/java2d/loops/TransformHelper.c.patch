diff a/src/java.desktop/share/native/libawt/java2d/loops/TransformHelper.c b/src/java.desktop/share/native/libawt/java2d/loops/TransformHelper.c
--- a/src/java.desktop/share/native/libawt/java2d/loops/TransformHelper.c
+++ b/src/java.desktop/share/native/libawt/java2d/loops/TransformHelper.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -691,24 +691,19 @@
         val -= max;           /* only overflows are now positive */ \
         val &= (val >> 31);   /* positives become 0 */ \
         val += max;           /* range is now [0 -> max] */ \
     } while (0)
 
-#ifdef __sparc
-/* For sparc, floating point multiplies are faster than integer */
-#define BICUBIC_USE_DBL_LUT
-#else
 /* For x86, integer multiplies are faster than floating point */
 /* Note that on x86 Linux the choice of best algorithm varies
  * depending on the compiler optimization and the processor type.
  * Currently, the sun/awt x86 Linux builds are not optimized so
  * all the variations produce mediocre performance.
  * For now we will use the choice that works best for the Windows
  * build until the (lack of) optimization issues on Linux are resolved.
  */
 #define BICUBIC_USE_INT_MATH
-#endif
 
 #ifdef BICUBIC_USE_DBL_CAST
 
 #define BC_DblToCoeff(v)        (v)
 #define BC_COEFF_ONE            1.0
