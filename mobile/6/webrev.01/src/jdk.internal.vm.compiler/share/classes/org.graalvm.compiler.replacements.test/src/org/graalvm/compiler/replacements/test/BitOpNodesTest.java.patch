diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements.test/src/org/graalvm/compiler/replacements/test/BitOpNodesTest.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements.test/src/org/graalvm/compiler/replacements/test/BitOpNodesTest.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements.test/src/org/graalvm/compiler/replacements/test/BitOpNodesTest.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements.test/src/org/graalvm/compiler/replacements/test/BitOpNodesTest.java
@@ -40,11 +40,10 @@
 
 import jdk.vm.ci.aarch64.AArch64;
 import jdk.vm.ci.amd64.AMD64;
 import jdk.vm.ci.code.Architecture;
 import jdk.vm.ci.meta.JavaKind;
-import jdk.vm.ci.sparc.SPARC;
 
 public class BitOpNodesTest extends GraalCompilerTest {
 
     private static final int INT_CONSTANT_1 = 0x80100010;
     private static final int INT_CONSTANT_2 = 0x00011110;
@@ -69,11 +68,11 @@
             AMD64 amd64 = (AMD64) arch;
             return amd64.getFeatures().contains(AMD64.CPUFeature.POPCNT);
         } else {
             // Even though there are AArch64 intrinsics for bitCount, they do
             // not use BitCountNode.
-            return arch instanceof SPARC;
+            return false;
         }
     }
 
     /**
      * Determines if the current VM context supports intrinsics for the {@code numberOfLeadingZeros}
@@ -82,11 +81,11 @@
     public static boolean isNumberLeadingZerosIntrinsicSupported(Architecture arch) {
         if (arch instanceof AMD64) {
             AMD64 amd64 = (AMD64) arch;
             return amd64.getFeatures().contains(AMD64.CPUFeature.LZCNT) && amd64.getFlags().contains(AMD64.Flag.UseCountLeadingZerosInstruction);
         } else {
-            return arch instanceof SPARC || arch instanceof AArch64;
+            return arch instanceof AArch64;
         }
     }
 
     /**
      * Determines if the current VM context supports intrinsics for the
@@ -95,11 +94,11 @@
     public static boolean isNumberTrailingZerosIntrinsicSupported(Architecture arch) {
         if (arch instanceof AMD64) {
             AMD64 amd64 = (AMD64) arch;
             return amd64.getFeatures().contains(AMD64.CPUFeature.BMI1) && amd64.getFlags().contains(AMD64.Flag.UseCountTrailingZerosInstruction);
         } else {
-            return arch instanceof SPARC || arch instanceof AArch64;
+            return arch instanceof AArch64;
         }
     }
 
     public static int bitCountIntConstantSnippet() {
         return Integer.bitCount(INT_CONSTANT_1) + Integer.bitCount(INT_CONSTANT_2) + Integer.bitCount(INT_CONSTANT_3);
