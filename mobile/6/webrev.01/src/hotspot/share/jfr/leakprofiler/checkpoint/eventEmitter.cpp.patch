diff a/src/hotspot/share/jfr/leakprofiler/checkpoint/eventEmitter.cpp b/src/hotspot/share/jfr/leakprofiler/checkpoint/eventEmitter.cpp
--- a/src/hotspot/share/jfr/leakprofiler/checkpoint/eventEmitter.cpp
+++ b/src/hotspot/share/jfr/leakprofiler/checkpoint/eventEmitter.cpp
@@ -50,11 +50,11 @@
   // restore / reset thread local stack trace and thread id
   _jfr_thread_local->set_thread_id(_thread_id);
   _jfr_thread_local->clear_cached_stack_trace();
 }
 
-void EventEmitter::emit(ObjectSampler* sampler, int64_t cutoff_ticks, bool emit_all) {
+void EventEmitter::emit(ObjectSampler* sampler, int64_t cutoff_ticks, bool emit_all, bool skip_bfs) {
   assert(sampler != NULL, "invariant");
   ResourceMark rm;
   EdgeStore edge_store;
   if (cutoff_ticks <= 0) {
     // no reference chains
@@ -66,11 +66,11 @@
     EventEmitter emitter(time_stamp, time_stamp);
     emitter.write_events(sampler, &edge_store, emit_all);
     return;
   }
   // events emitted with reference chains require a safepoint operation
-  PathToGcRootsOperation op(sampler, &edge_store, cutoff_ticks, emit_all);
+  PathToGcRootsOperation op(sampler, &edge_store, cutoff_ticks, emit_all, skip_bfs);
   VMThread::execute(&op);
 }
 
 size_t EventEmitter::write_events(ObjectSampler* object_sampler, EdgeStore* edge_store, bool emit_all) {
   assert_locked_or_safepoint(JfrStream_lock);
