diff a/src/hotspot/.mx.jvmci/mx_jvmci.py b/src/hotspot/.mx.jvmci/mx_jvmci.py
--- a/src/hotspot/.mx.jvmci/mx_jvmci.py
+++ b/src/hotspot/.mx.jvmci/mx_jvmci.py
@@ -385,11 +385,11 @@
     # Build the other VM flavors
     with Task('BuildHotSpotJVMCIOthers: fastdebug', tasks) as t:
         if t: _runmultimake(['--jdk-jvm-variants', 'server', '--jdk-debug-levels', 'fastdebug'])
 
     with Task('CleanAndBuildIdealGraphVisualizer', tasks, disableJacoco=True) as t:
-        if t and platform.processor() != 'sparc':
+        if t:
             buildxml = mx._cygpathU2W(join(_suite.dir, 'src', 'share', 'tools', 'IdealGraphVisualizer', 'build.xml'))
             mx.run(['ant', '-f', buildxml, '-q', 'clean', 'build'], env=_igvBuildEnv())
 
 mx_gate.add_gate_runner(_suite, _jvmci_gate_runner)
 mx_gate.add_gate_argument('-g', '--only-build-jvmci', action='store_false', dest='buildNonJVMCI', help='only build the JVMCI VM')
@@ -484,22 +484,19 @@
     This is needed to support HotSpot's assembly dumping features.
     By default it downloads the Intel syntax version, use the 'att' argument to install AT&T syntax."""
     flavor = 'intel'
     if 'att' in args:
         flavor = 'att'
-    if mx.get_arch() == "sparcv9":
-        flavor = "sparcv9"
     lib = mx.add_lib_suffix('hsdis-' + mx.get_arch())
     path = join(_suite.dir, 'lib', lib)
 
     sha1s = {
         'att/hsdis-amd64.dll' : 'bcbd535a9568b5075ab41e96205e26a2bac64f72',
         'att/hsdis-amd64.so' : '58919ba085d4ef7a513f25bae75e7e54ee73c049',
         'intel/hsdis-amd64.dll' : '6a388372cdd5fe905c1a26ced614334e405d1f30',
         'intel/hsdis-amd64.so' : '844ed9ffed64fe9599638f29a8450c50140e3192',
         'intel/hsdis-amd64.dylib' : 'fdb13ef0d7d23d93dacaae9c98837bea0d4fc5a2',
-        'sparcv9/hsdis-sparcv9.so': '970640a9af0bd63641f9063c11275b371a59ee60',
     }
 
     flavoredLib = flavor + "/" + lib
     if flavoredLib not in sha1s:
         mx.logv("hsdis not supported on this plattform or architecture")
@@ -577,22 +574,18 @@
     os = mx.get_os()
     if 'darwin' in os:
         os = 'macosx'
     elif 'linux' in os:
         os = 'linux'
-    elif 'solaris' in os:
-        os = 'solaris'
     elif 'cygwin' in os or 'mingw' in os:
         os = 'windows'
     return os
 
 def _get_openjdk_cpu():
     cpu = mx.get_arch()
     if cpu == 'amd64':
         cpu = 'x86_64'
-    elif cpu == 'sparcv9':
-        cpu = 'sparcv9'
     return cpu
 
 def _get_openjdk_os_cpu():
     return _get_openjdk_os() + '-' + _get_openjdk_cpu()
 
