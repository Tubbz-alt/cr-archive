diff a/src/jdk.net/share/classes/jdk/net/Sockets.java b/src/jdk.net/share/classes/jdk/net/Sockets.java
--- a/src/jdk.net/share/classes/jdk/net/Sockets.java
+++ b/src/jdk.net/share/classes/jdk/net/Sockets.java
@@ -261,10 +261,12 @@
 
     @SuppressWarnings("removal")
     private static Map<Class<?>,Set<SocketOption<?>>> optionSets() {
         Map<Class<?>,Set<SocketOption<?>>> options = new HashMap<>();
         boolean flowsupported = PlatformSocketOptions.get().flowSupported();
+        boolean incomingNapiIdsupported = PlatformSocketOptions.get().incomingNapiIdSupported();
+
         boolean reuseportsupported = isReusePortAvailable();
         // Socket
 
         Set<SocketOption<?>> set = new HashSet<>();
         set.add(StandardSocketOptions.SO_KEEPALIVE);
@@ -286,10 +288,13 @@
         if (KeepAliveOptions.AVAILABLE) {
             set.addAll(Set.of(ExtendedSocketOptions.TCP_KEEPCOUNT,
                     ExtendedSocketOptions.TCP_KEEPIDLE,
                     ExtendedSocketOptions.TCP_KEEPINTERVAL));
         }
+        if (incomingNapiIdsupported) {
+            set.add(ExtendedSocketOptions.SO_INCOMING_NAPI_ID);
+        }
         set = Collections.unmodifiableSet(set);
         options.put(Socket.class, set);
 
         // ServerSocket
 
@@ -306,10 +311,13 @@
             set.addAll(Set.of(ExtendedSocketOptions.TCP_KEEPCOUNT,
                     ExtendedSocketOptions.TCP_KEEPIDLE,
                     ExtendedSocketOptions.TCP_KEEPINTERVAL));
         }
         set.add(StandardSocketOptions.IP_TOS);
+        if (incomingNapiIdsupported) {
+            set.add(ExtendedSocketOptions.SO_INCOMING_NAPI_ID);
+        }
         set = Collections.unmodifiableSet(set);
         options.put(ServerSocket.class, set);
 
         // DatagramSocket
 
@@ -322,10 +330,13 @@
         }
         set.add(StandardSocketOptions.IP_TOS);
         if (flowsupported) {
             set.add(ExtendedSocketOptions.SO_FLOW_SLA);
         }
+        if (incomingNapiIdsupported) {
+            set.add(ExtendedSocketOptions.SO_INCOMING_NAPI_ID);
+        }
         set = Collections.unmodifiableSet(set);
         options.put(DatagramSocket.class, set);
 
         // MulticastSocket
 
