diff a/src/jdk.net/linux/classes/jdk/net/LinuxSocketOptions.java b/src/jdk.net/linux/classes/jdk/net/LinuxSocketOptions.java
--- a/src/jdk.net/linux/classes/jdk/net/LinuxSocketOptions.java
+++ b/src/jdk.net/linux/classes/jdk/net/LinuxSocketOptions.java
@@ -82,20 +82,32 @@
     @Override
     int getTcpKeepAliveIntvl(int fd) throws SocketException {
         return getTcpKeepAliveIntvl0(fd);
     }
 
+    @Override
+    boolean incomingNapiIdSupported() {
+        return incomingNapiIdSupported0();
+    }
+
+    @Override
+    int getIncomingNapiId(int fd) throws SocketException {
+        return getIncomingNapiId0(fd);
+    }
+
     private static native void setTcpkeepAliveProbes0(int fd, int value) throws SocketException;
     private static native void setTcpKeepAliveTime0(int fd, int value) throws SocketException;
     private static native void setTcpKeepAliveIntvl0(int fd, int value) throws SocketException;
     private static native int getTcpkeepAliveProbes0(int fd) throws SocketException;
     private static native int getTcpKeepAliveTime0(int fd) throws SocketException;
     private static native int getTcpKeepAliveIntvl0(int fd) throws SocketException;
     private static native void setQuickAck0(int fd, boolean on) throws SocketException;
     private static native boolean getQuickAck0(int fd) throws SocketException;
     private static native boolean keepAliveOptionsSupported0();
     private static native boolean quickAckSupported0();
+    private static native boolean incomingNapiIdSupported0();
+    private static native int getIncomingNapiId0(int fd) throws SocketException;
     static {
         if (System.getSecurityManager() == null) {
             System.loadLibrary("extnet");
         } else {
             AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
