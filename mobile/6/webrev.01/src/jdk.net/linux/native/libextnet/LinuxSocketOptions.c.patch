diff a/src/jdk.net/linux/native/libextnet/LinuxSocketOptions.c b/src/jdk.net/linux/native/libextnet/LinuxSocketOptions.c
--- a/src/jdk.net/linux/native/libextnet/LinuxSocketOptions.c
+++ b/src/jdk.net/linux/native/libextnet/LinuxSocketOptions.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -31,10 +31,43 @@
 #include <netinet/tcp.h>
 #include <netinet/in.h>
 #include "jni_util.h"
 #include "jdk_net_LinuxSocketOptions.h"
 
+#ifndef SO_INCOMING_NAPI_ID
+#define SO_INCOMING_NAPI_ID    56
+#endif
+
+static void handleError(JNIEnv *env, jint rv, const char *errmsg) {
+    if (rv < 0) {
+        if (errno == ENOPROTOOPT) {
+            JNU_ThrowByName(env, "java/lang/UnsupportedOperationException",
+                    "unsupported socket option");
+        } else {
+            JNU_ThrowByNameWithLastError(env, "java/net/SocketException", errmsg);
+        }
+    }
+}
+
+static jint socketOptionSupported(jint level, jint optname) {
+    jint one = 1;
+    jint rv, s;
+    socklen_t sz = sizeof (one);
+    s = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
+    if (s < 0) {
+        return 0;
+    }
+    rv = getsockopt(s, level, optname, (void *) &one, &sz);
+    if (rv != 0 && errno == ENOPROTOOPT) {
+        rv = 0;
+    } else {
+        rv = 1;
+    }
+    close(s);
+    return rv;
+}
+
 /*
  * Declare library specific JNI_Onload entry if static build
  */
 DEF_STATIC_JNI_OnLoad
 
@@ -47,19 +80,11 @@
 (JNIEnv *env, jobject unused, jint fd, jboolean on) {
     int optval;
     int rv;
     optval = (on ? 1 : 0);
     rv = setsockopt(fd, SOL_SOCKET, TCP_QUICKACK, &optval, sizeof (optval));
-    if (rv < 0) {
-        if (errno == ENOPROTOOPT) {
-            JNU_ThrowByName(env, "java/lang/UnsupportedOperationException",
-                            "unsupported socket option");
-        } else {
-            JNU_ThrowByNameWithLastError(env, "java/net/SocketException",
-                                        "set option TCP_QUICKACK failed");
-        }
-    }
+    handleError(env, rv, "set option TCP_QUICKACK failed");
 }
 
 /*
  * Class:     jdk_net_LinuxSocketOptions
  * Method:    getQuickAck
@@ -68,82 +93,33 @@
 JNIEXPORT jboolean JNICALL Java_jdk_net_LinuxSocketOptions_getQuickAck0
 (JNIEnv *env, jobject unused, jint fd) {
     int on;
     socklen_t sz = sizeof (on);
     int rv = getsockopt(fd, SOL_SOCKET, TCP_QUICKACK, &on, &sz);
-    if (rv < 0) {
-        if (errno == ENOPROTOOPT) {
-            JNU_ThrowByName(env, "java/lang/UnsupportedOperationException",
-                            "unsupported socket option");
-        } else {
-            JNU_ThrowByNameWithLastError(env, "java/net/SocketException",
-                                        "get option TCP_QUICKACK failed");
-        }
-    }
+    handleError(env, rv, "get option TCP_QUICKACK failed");
     return on != 0;
 }
 
 /*
  * Class:     jdk_net_LinuxSocketOptions
  * Method:    quickAckSupported
  * Signature: ()Z
  */
 JNIEXPORT jboolean JNICALL Java_jdk_net_LinuxSocketOptions_quickAckSupported0
 (JNIEnv *env, jobject unused) {
-    int one = 1;
-    int rv, s;
-    s = socket(PF_INET, SOCK_STREAM, 0);
-    if (s < 0) {
-        return JNI_FALSE;
-    }
-    rv = setsockopt(s, SOL_SOCKET, TCP_QUICKACK, (void *) &one, sizeof (one));
-    if (rv != 0 && errno == ENOPROTOOPT) {
-        rv = JNI_FALSE;
-    } else {
-        rv = JNI_TRUE;
-    }
-    close(s);
-    return rv;
-}
-
-static jint socketOptionSupported(jint sockopt) {
-    jint one = 1;
-    jint rv, s;
-    s = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
-    if (s < 0) {
-        return 0;
-    }
-    rv = setsockopt(s, SOL_TCP, sockopt, (void *) &one, sizeof (one));
-    if (rv != 0 && errno == ENOPROTOOPT) {
-        rv = 0;
-    } else {
-        rv = 1;
-    }
-    close(s);
-    return rv;
-}
-
-static void handleError(JNIEnv *env, jint rv, const char *errmsg) {
-    if (rv < 0) {
-        if (errno == ENOPROTOOPT) {
-            JNU_ThrowByName(env, "java/lang/UnsupportedOperationException",
-                    "unsupported socket option");
-        } else {
-            JNU_ThrowByNameWithLastError(env, "java/net/SocketException", errmsg);
-        }
-    }
+    return socketOptionSupported(SOL_SOCKET, TCP_QUICKACK);
 }
 
 /*
  * Class:     jdk_net_LinuxSocketOptions
  * Method:    keepAliveOptionsSupported0
  * Signature: ()Z
  */
 JNIEXPORT jboolean JNICALL Java_jdk_net_LinuxSocketOptions_keepAliveOptionsSupported0
 (JNIEnv *env, jobject unused) {
-    return socketOptionSupported(TCP_KEEPIDLE) && socketOptionSupported(TCP_KEEPCNT)
-            && socketOptionSupported(TCP_KEEPINTVL);
+    return socketOptionSupported(SOL_TCP, TCP_KEEPIDLE) && socketOptionSupported(SOL_TCP, TCP_KEEPCNT)
+            && socketOptionSupported(SOL_TCP, TCP_KEEPINTVL);
 }
 
 /*
  * Class:     jdk_net_LinuxSocketOptions
  * Method:    setTcpkeepAliveProbes0
@@ -216,5 +192,29 @@
     socklen_t sz = sizeof (optval);
     rv = getsockopt(fd, SOL_TCP, TCP_KEEPINTVL, &optval, &sz);
     handleError(env, rv, "get option TCP_KEEPINTVL failed");
     return optval;
 }
+
+/*
+ * Class:     jdk_net_LinuxSocketOptions
+ * Method:    incomingNapiIdSupported0
+ * Signature: ()Z;
+ */
+JNIEXPORT jboolean JNICALL Java_jdk_net_LinuxSocketOptions_incomingNapiIdSupported0
+(JNIEnv *env, jobject unused) {
+    return socketOptionSupported(SOL_SOCKET, SO_INCOMING_NAPI_ID);
+}
+
+/*
+ * Class:     jdk_net_LinuxSocketOptions
+ * Method:    getIncomingNapiId0
+ * Signature: (I)I;
+ */
+JNIEXPORT jint JNICALL Java_jdk_net_LinuxSocketOptions_getIncomingNapiId0
+(JNIEnv *env, jobject unused, jint fd) {
+    jint optval, rv;
+    socklen_t sz = sizeof (optval);
+    rv = getsockopt(fd, SOL_SOCKET, SO_INCOMING_NAPI_ID, &optval, &sz);
+    handleError(env, rv, "get option SO_INCOMING_NAPI_ID failed");
+    return optval;
+}
