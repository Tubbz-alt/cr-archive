diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/OldObjectSample.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/OldObjectSample.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/OldObjectSample.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/OldObjectSample.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -52,14 +52,15 @@
     // Emit if old object is enabled in recording with cutoff for that recording
     public static void emit(PlatformRecording recording) {
         if (isEnabled(recording)) {
             long nanos = CutoffSetting.parseValueSafe(recording.getSettings().get(OLD_OBJECT_CUTOFF));
             long ticks = Utils.nanosToTicks(nanos);
-            JVM.getJVM().emitOldObjectSamples(ticks, WhiteBox.getWriteAllObjectSamples());
+            emit(ticks);
         }
     }
 
+
     // Emit if old object is enabled for at least one recording, and use the largest
     // cutoff for an enabled recording
     public static void emit(List<PlatformRecording> recordings, Boolean pathToGcRoots) {
         boolean enabled = false;
         long cutoffNanos = Boolean.TRUE.equals(pathToGcRoots) ? Long.MAX_VALUE : 0L;
@@ -72,14 +73,20 @@
                 }
             }
         }
         if (enabled) {
             long ticks = Utils.nanosToTicks(cutoffNanos);
-            JVM.getJVM().emitOldObjectSamples(ticks, WhiteBox.getWriteAllObjectSamples());
+            emit(ticks);
         }
     }
 
+    private static void emit(long ticks) {
+        boolean emitAll = WhiteBox.getWriteAllObjectSamples();
+        boolean skipBFS = WhiteBox.getSkipBFS();
+        JVM.getJVM().emitOldObjectSamples(ticks, emitAll, skipBFS);
+    }
+
     public static void updateSettingPathToGcRoots(Map<String, String> s, Boolean pathToGcRoots) {
         if (pathToGcRoots != null) {
             s.put(OLD_OBJECT_CUTOFF, pathToGcRoots ? "infinity" : "0 ns");
         }
     }
