diff a/src/hotspot/cpu/aarch64/nativeInst_aarch64.hpp b/src/hotspot/cpu/aarch64/nativeInst_aarch64.hpp
--- a/src/hotspot/cpu/aarch64/nativeInst_aarch64.hpp
+++ b/src/hotspot/cpu/aarch64/nativeInst_aarch64.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2014, 2108, Red Hat Inc. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
@@ -100,13 +100,10 @@
 
   void wrote(int offset);
 
  public:
 
-  // unit test stuff
-  static void test() {}                 // override for testing
-
   inline friend NativeInstruction* nativeInstruction_at(address address);
 
   static bool is_adrp_at(address instr);
 
   static bool is_ldr_literal_at(address instr);
@@ -319,13 +316,10 @@
   }
 
   void  verify();
   void  print();
 
-  // unit test stuff
-  static void test() {}
-
   // Creation
   inline friend NativeMovConstReg* nativeMovConstReg_at(address address);
   inline friend NativeMovConstReg* nativeMovConstReg_before(address address);
 };
 
@@ -395,13 +389,10 @@
   void  add_offset_in_bytes(int add_offset)     { set_offset ( ( offset() + add_offset ) ); }
 
   void verify();
   void print ();
 
-  // unit test stuff
-  static void test() {}
-
  private:
   inline friend NativeMovRegMem* nativeMovRegMem_at (address address);
 };
 
 inline NativeMovRegMem* nativeMovRegMem_at (address address) {
@@ -430,12 +421,10 @@
 
  public:
   void verify();
   void print ();
 
-  // unit test stuff
-  static void test() {}
 };
 
 //   adrp    x16, #page
 //   add     x16, x16, #offset
 //   ldr     x16, [x16]
@@ -486,13 +475,10 @@
   // Creation
   inline friend NativeJump* nativeJump_at(address address);
 
   void verify();
 
-  // Unit testing stuff
-  static void test() {}
-
   // Insertion of native jump instruction
   static void insert(address code_pos, address entry);
   // MT-safe insertion of native jump at verified method entry
   static void check_verified_entry_alignment(address entry, address verified_entry);
   static void patch_verified_entry(address entry, address verified_entry, address dest);
