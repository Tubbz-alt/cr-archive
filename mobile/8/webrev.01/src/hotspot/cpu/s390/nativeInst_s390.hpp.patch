diff a/src/hotspot/cpu/s390/nativeInst_s390.hpp b/src/hotspot/cpu/s390/nativeInst_s390.hpp
--- a/src/hotspot/cpu/s390/nativeInst_s390.hpp
+++ b/src/hotspot/cpu/s390/nativeInst_s390.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2016 SAP SE. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
@@ -135,13 +135,10 @@
 
  public:
 
   void verify();
 
-  // unit test stuff
-  static void test() {}                        // Override for testing.
-
   friend NativeInstruction* nativeInstruction_at(address address) {
     NativeInstruction* inst = (NativeInstruction*)address;
     #ifdef ASSERT
       inst->verify();
     #endif
@@ -272,13 +269,10 @@
   void set_destination_mt_safe(address dest);
 
   void verify_alignment() {} // Yet another real do nothing guy :)
   void verify();
 
-  // unit test stuff
-  static void test();
-
   // Creation.
   friend NativeCall* nativeCall_at(address instr) {
     NativeCall* call;
 
     // Make sure not to return garbage.
@@ -441,13 +435,10 @@
     return MacroAssembler::is_call_far_patchable_pcrelative_at(iaddr);
   }
 
   void verify();
 
-  // Unit tests
-  static void test();
-
   // Instantiates a NativeFarCall object starting at the given instruction
   // address and returns the NativeFarCall object.
   inline friend NativeFarCall* nativeFarCall_at(address instr) {
     NativeFarCall* call = (NativeFarCall*)instr;
 #ifdef ASSERT
@@ -498,13 +489,10 @@
   void set_pcrel_addr(intptr_t addr, CompiledMethod *nm = NULL);
   void set_pcrel_data(intptr_t data, CompiledMethod *nm = NULL);
 
   void verify();
 
-  // unit test stuff
-  static void test();
-
   // Creation.
   friend NativeMovConstReg* nativeMovConstReg_at(address address) {
     NativeMovConstReg* test = (NativeMovConstReg*)address;
     #ifdef ASSERT
       test->verify();
@@ -616,13 +604,10 @@
     return b;
   }
 
   void verify();
 
-  // Unit testing stuff
-  static void test();
-
   // Insertion of native jump instruction.
   static void insert(address code_pos, address entry);
 
   // MT-safe insertion of native jump at verified method entry.
   static void check_verified_entry_alignment(address entry, address verified_entry) { }
