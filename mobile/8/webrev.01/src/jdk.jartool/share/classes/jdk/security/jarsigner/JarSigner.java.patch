diff a/src/jdk.jartool/share/classes/jdk/security/jarsigner/JarSigner.java b/src/jdk.jartool/share/classes/jdk/security/jarsigner/JarSigner.java
--- a/src/jdk.jartool/share/classes/jdk/security/jarsigner/JarSigner.java
+++ b/src/jdk.jartool/share/classes/jdk/security/jarsigner/JarSigner.java
@@ -25,12 +25,15 @@
 
 package jdk.security.jarsigner;
 
 import com.sun.jarsigner.ContentSigner;
 import com.sun.jarsigner.ContentSignerParameters;
+import jdk.internal.access.JavaUtilZipFileAccess;
+import jdk.internal.access.SharedSecrets;
 import sun.security.tools.PathList;
 import sun.security.tools.jarsigner.TimestampedSigner;
+import sun.security.util.Event;
 import sun.security.util.ManifestDigester;
 import sun.security.util.SignatureFileVerifier;
 import sun.security.x509.AlgorithmId;
 
 import java.io.*;
@@ -80,10 +83,12 @@
  *
  * @since 9
  */
 public final class JarSigner {
 
+    static final JavaUtilZipFileAccess JUZFA = SharedSecrets.getJavaUtilZipFileAccess();
+
     /**
      * A mutable builder class that can create an immutable {@code JarSigner}
      * from various signing-related parameters.
      *
      * @since 9
@@ -498,10 +503,11 @@
     private final String tSADigestAlg;
     private final boolean signManifest; // "sign" the whole manifest
     private final boolean externalSF; // leave the .SF out of the PKCS7 block
     private final String altSignerPath;
     private final String altSigner;
+    private boolean posixPermsDetected;
 
     private JarSigner(JarSigner.Builder builder) {
 
         this.privateKey = builder.privateKey;
         this.certChain = builder.certChain;
@@ -941,10 +947,16 @@
         ZipEntry ze2 = new ZipEntry(ze.getName());
         ze2.setMethod(ze.getMethod());
         ze2.setTime(ze.getTime());
         ze2.setComment(ze.getComment());
         ze2.setExtra(ze.getExtra());
+        int perms = JUZFA.getPosixPerms(ze);
+        if (!posixPermsDetected && perms != -1) {
+            posixPermsDetected = true;
+            Event.report(Event.ReporterCategory.POSIXPERMS, "detected");
+        }
+        JUZFA.setPosixPerms(ze2, perms);
         if (ze.getMethod() == ZipEntry.STORED) {
             ze2.setSize(ze.getSize());
             ze2.setCrc(ze.getCrc());
         }
         os.putNextEntry(ze2);
