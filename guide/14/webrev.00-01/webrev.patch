diff a/src/codeConventions.md b/src/codeConventions.md
--- a/src/codeConventions.md
+++ b/src/codeConventions.md
@@ -2,28 +2,26 @@
 
 ::: {.NavBit}
 [« Previous](mailinglists.html) • [TOC](index.html) • [Next »](changePlanning.html)
 :::
 
-This is a set of code conventions for for JDK Release Projects in the OpenJDK Community. Other OpenJDK Projects, and projects outside of OpenJDK, are welcome to adopt these guidelines as they see fit.
+This is a set of code conventions for JDK Release Projects in the OpenJDK Community. Other OpenJDK Projects, and projects outside of OpenJDK, are welcome to adopt these guidelines as they see fit.
 
 ## Motivation
 Code that looks familiar is easier to understand and therefore also easier to review, debug and maintain. To ensure that code looks familiar to all developers on the project it’s important to agree on a common set of conventions.
 
-This document provides guidelines for low level coding practices such as how to indent code and how to name types and variables. Many of the stylistic choices are subjective and different developers may have different opinions about them. Keep in mind however, that having a consistent style is more important than to satisfy each individual developers preference.
+This section provides guidelines for low level coding practices such as how to indent code and how to name types and variables. Many of the stylistic choices are subjective and different developers may have different opinions about them. Keep in mind however, that having a consistent style is more important than to satisfy each individual developers preference.
 
 ## Guiding Principles
-The guidelines in this document strive to maximize,
-
-<ol class="spread">
-    <li>Correctness</li>
-    <li>Readability</li>
-    <li>Maintainability</li>
-    <li>Debuggability</li>
-    <li>Consistency</li>
-    <li>Aesthetics</li>
-</ol>
+The guidelines in this section strive to maximize,
+
+#. Correctness
+#. Readability
+#. Maintainability
+#. Debuggability
+#. Consistency
+#. Aesthetics
 
 ## Language Style Guides
 
 - [Java Style Guide](javaStyleGuide.html)  
 
diff a/src/hgHelp.md b/src/hgHelp.md
--- a/src/hgHelp.md
+++ b/src/hgHelp.md
@@ -4,13 +4,13 @@
 [« Previous](repositories.html#verify) • [TOC](index.html) • [Next »](repositories.html#cloneSandbox)
 :::
 
 >     $ hg help
 >     Mercurial Distributed SCM
-
+>
 >     list of commands:
-
+>
 >      add           add the specified files on the next commit
 >      addremove     add all new files, delete all missing files
 >      annotate      show changeset information by line for each file
 >      archive       create an unversioned archive of a repository revision
 >      backout       reverse effect of earlier changeset
@@ -58,18 +58,18 @@
 >      tags          list repository tags
 >      unbundle      apply one or more changegroup files
 >      update        update working directory (or switch revisions)
 >      verify        verify the integrity of the repository
 >      version       output version and copyright information
-
+>
 >     enabled extensions:
-
+>
 >      jcheck        (no help text available)
 >      trees         manage loosely-coupled nested repositories
-
+>
 >     additional help topics:
-
+>
 >      config        Configuration Files
 >      dates         Date Formats
 >      diffs         Diff Formats
 >      environment   Environment Variables
 >      extensions    Using Additional Features
@@ -84,11 +84,11 @@
 >      revisions     Specifying Single Revisions
 >      revsets       Specifying Revision Sets
 >      subrepos      Subrepositories
 >      templating    Template Usage
 >      urls          URL Paths
-
+>
 >     use "hg -v help" to show builtin aliases and global options
 
 ::: {.NavBit}
 [« Previous](repositories.html#verify) • [TOC](index.html) • [Next »](repositories.html#cloneSandbox)
 :::
diff a/src/javaStyleGuide.md b/src/javaStyleGuide.md
--- a/src/javaStyleGuide.md
+++ b/src/javaStyleGuide.md
@@ -2,13 +2,13 @@
 
 ::: {.NavBit}
 [« Previous](mailinglists.html) • [TOC](index.html) • [Next »](changePlanning.html)
 :::
 
-While this document covers a lot of ground, it should be noted that no style guide can answer all questions for us, and developers will always need to use good judgment towards the end of producing code that is correct, readable, maintainable, debuggable, consistently formatted, and aesthetically pleasing.
+While this section covers a lot of ground, it should be noted that no style guide can answer all questions for us, and developers will always need to use good judgment towards the end of producing code that is correct, readable, maintainable, debuggable, consistently formatted, and aesthetically pleasing.
 
-Examples in this document are non-normative; While they intend to illustrate correct way of formatting the code, there may be other ways to correctly format the code. This is a general principle: There may be several ways to format the code, all adhering to the guidelines in this document.
+Examples in this section are non-normative; While they intend to illustrate correct way of formatting the code, there may be other ways to correctly format the code. This is a general principle: There may be several ways to format the code, all adhering to the guidelines in this section.
 
 Tool support is nice, but ultimately each IDE and style checking tool can handle different sets of rules, and support for rules that can’t be handled today might be added in future versions. So, whether a rule plays well with tools or not can be a factor, but it’s secondary to the above principles.
 
 ## Overview
 
@@ -91,19 +91,22 @@
 ::: conventions
 - All source files should have an appropriate copyright notice at the top of the file.
 
 - For files under Oracle copyright, the copyright notice must follow the standard wording and format. In particular the first two lines should be
 
-  ```java
+  ~~~java
   /*
    * Copyright (c) 2011, Oracle and/or its affiliates. All rights reserved.
-  ```
+  ~~~
+
   or
-  ```java
+
+  ~~~java
   /*
    * Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.
-  ```
+  ~~~
+
   where the first year is the year the file was created and the second year is the year the file was last edited.
 :::
 
 For questions regarding Oracle copyright or license notices, please contact [iris.clark@oracle.com](mailto:iris.clark@oracle.com).
 
@@ -160,11 +163,12 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 public HashSet() {
     this(DEFAULT_INITIAL_CAPACITY);
 }
 
 public HashSet(int capacity) {
@@ -172,18 +176,20 @@
 }
 
 public HashSet(int capacity, double loadFactor) {
     …
 }
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 // Overloaded methods should not be split apart
 void logValue(int i) {
     log("Int: %d", i);
 }
 
@@ -196,11 +202,12 @@
 }
 
 void setValue(double d) {
     val = d;
 }
-```
+~~~
+
 :::
 :::
 
 ::: box
 [Motivation]{.boxheader}
@@ -246,65 +253,74 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 void method() {
     …
 }
-```
-```java
+~~~
+
+~~~java
 try {
     something();
 } catch (AnException e) {
     …
 }
-```
-```java
+~~~
+
+~~~java
 for (int[] row : matrix) {
     for (int val : row) {
         sum += val;
     }
 }
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 // Wrong placement of opening brace
 void method()
 {
     …
 }
-```
-```java
+~~~
+
+~~~java
 // Newline in front of catch should be avoided
 try {
     something();
 }
 catch (AnException e) {
     …
 }
-```
-```java
+~~~
+
+~~~java
 // Braces should be used
 if (flag)
     // Restore x
     x = 1;
-```
-```java
+~~~
+
+~~~java
 // Use braces if block comes last in enclosing block
 // to avoid accidentally indenting the closing brace.
 for (int[] row : matrix) {
     for (int val : row)
         sum += val;
 }
-```
+~~~
+
 :::
 :::
 
 ::: box
 [Motivation]{.boxheader}
@@ -320,28 +336,34 @@
 
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 enum Response { YES, NO, MAYBE }
-```
-```java
+~~~
+
+~~~java
 public boolean isReference() { return true; }
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 public boolean getResult() { int value = getValue(); return value < 0 ? 0 : value; }
-```
-```java
+~~~
+
+~~~java
 for (int i = 0; i < size; i++) { sum += data[i]; }
-```
+~~~
+
 :::
 :::
 
 
 ### Indentation
@@ -354,40 +376,44 @@
 Refer to Section&nbsp;[Wrapping Lines](#wrapping-lines)&nbsp;for guidelines on how to indent continuation lines.
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 switch (var) {
     case TWO:
         setChoice("two");
         break;
     case THREE:
         setChoice("three");
         break;
     default:
         throw new IllegalArgumentException();
 }
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 switch (var) {
 case TWO:
     setChoice("two");
     break;
 case THREE:
     setChoice("three");
     break;
 default:
     throw new IllegalArgumentException();
 }
-```
+~~~
+
 :::
 :::
 
 
 ::: box
@@ -409,41 +435,47 @@
   ::: leftcol
   ::: box
   ::: {.boxheader .dos}
   Dos
   :::
-  ```java
+  
+  ~~~java
   // Ok even though it might exceed the character limit when indented.
   Error e = isTypeParam
           ? Errors.InvalidRepeatableAnnotationNotApplicable(targetContainerType, on)
           : Errors.InvalidRepeatableAnnotationNotApplicableInContext(targetContainerType));
-  ```
-  ```java
+  ~~~
+  
+  ~~~java
   String pretty = Stream.of(args)
                         .map(Argument::prettyPrint)
                         .collectors(joining(", "));
-  ```
+  ~~~
+
   :::
   :::
 
   ::: rightcol
   ::: box
   ::: {.boxheader .donts}
   Don’ts
   :::
-  ```java
+
+  ~~~java
   // Too strict interpretation of the character limit. Readability suffers.
   Error e = isTypeParam
         ? Errors.InvalidRepeatableAnnotationNotApplicable(
                 targetContainerType, on)
         : Errors.InvalidRepeatableAnnotationNotApplicableInContext(
                 targetContainerType);
-  ```
-  ```java
+  ~~~
+
+  ~~~java
   // Should be wrapped even though it fits within the character limit
   String pretty = Stream.of(args).map(Argument::prettyPrint).collectors(joining(", "));
-  ```
+  ~~~
+
   :::
   :::
 
   ::: clear-floats
   :::
@@ -454,26 +486,30 @@
   ::: leftcol
   ::: box
   ::: {.boxheader .dos}
   Dos
   :::
-  ```java
+
+  ~~~java
   aMethodCall(withMany(arguments, that, needs),
           to(be, (wrapped - to) * avoid / veryLong - lines));
-  ```
+  ~~~
+
   :::
   :::
 
   ::: rightcol
   ::: box
   ::: {.boxheader .donts}
   Don’ts
   :::
-  ```java
+
+  ~~~java
   aMethodCall(withMany(arguments, that, needs), to(be, (wrapped
           - to) * avoid / veryLong - lines));
-  ```
+  ~~~
+
   :::
   :::
 
   ::: clear-floats
   :::
@@ -483,33 +519,39 @@
   ::: leftcol
   ::: box
   ::: {.boxheader .dos}
   Dos
   :::
-  ```java
+
+  ~~~java
   i += j;
   j += k;
-  ```
-  ```java
+  ~~~
+
+  ~~~java
   if (condition) {
       return expression;
   }
-  ```
+  ~~~
+
   :::
   :::
 
   ::: rightcol
   ::: box
   ::: {.boxheader .donts}
   Don’ts
   :::
-  ```java
+
+  ~~~java
   i += j; j += k;
-  ```
-  ```java
+  ~~~
+
+  ~~~java
   if (condition) { return expression; }
-  ```
+  ~~~
+
   :::
   :::
 
   ::: clear-floats
   :::
@@ -523,57 +565,65 @@
   ::: leftcol
   ::: box
   ::: {.boxheader .dos}
   Dos
   :::
-  ```java
+
+  ~~~java
   // Variant 1
   int anInteger = aMethod(that, takes,
           a, lengthy, list, of, arguments);
-  ```
-  ```java
+  ~~~
+
+  ~~~java
   // Variant 2
   int anInteger = that * (is + computed) / using
                           + a * complex - expression;
-  ```
-  ```java
+  ~~~
+
+  ~~~java
   // Variant 3
   int anInteger = aMethod(thatTakes,
                           aLongList,
                           ofArguments);
-  ```
-  ```java
+  ~~~
+
+  ~~~java
   // Variant 4
   int anInteger = IntStream.of(numbers)
                            .map(Math::sqrt)
                            .sum();
-  ```
+  ~~~
+
   :::
   :::
 
   ::: rightcol
   ::: box
   ::: {.boxheader .donts}
   Don’ts
   :::
-  ```java
+
+  ~~~java
   // Mixing of wrapping variants (unless there
   // is a logical grouping of arguments)
   int anInteger = aMethod(that,
                           takes,
                           a, lengthy, list,
                           of, arguments);
-  ```
-  ```java
+  ~~~
+
+  ~~~java
   // Don't align with sibling expression if the
   // continuation line can be confused with a block
   // indentation
   if (somePredicate() ||
       someOtherPredicate()) {
       System.out.println("Avoid");
   }
-  ```
+  ~~~
+
   :::
   :::
 
   ::: clear-floats
   :::
@@ -587,43 +637,49 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 public class MyGenericClass<T, S>
         extends HashMap<T, S>
         implements Comparable<T> {
     …
 }
-```
-```java
+~~~
+
+~~~java
 public class AnotherClass<K, R> implements Collector<T extends K,
                                                      Set<? extends R>,
                                                      List<R>> {
     …
 }
-```
-```java
+~~~
+
+~~~java
 public class AnotherClass<K, R> implements Collector<T extends K,
                                                      Set<? extends R>,
                                                      List<R>> {
     …
 }
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 public class MyGenericClass<T> implements Comparable<T>,
         Predicate<T> {
     …
 }
-```
+~~~
+
 :::
 :::
 
 
 #### Wrapping Method Declarations
@@ -633,76 +689,85 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 int someMethod(String aString,
                List<Integer> aList,
                Map<String, String> aMap,
                int anInt,
                long aLong,
                Set<Number> aSet,
                double aDouble) {
     …
 }
-```
-```java
+~~~
+
+~~~java
 int someMethod(String aString, List<Integer> aList,
         Map<String, String> aMap, int anInt, long aLong,
         double aDouble, long aLong) {
     …
 }
-```
-```java
+~~~
+
+~~~java
 int someMethod(String aString,
                List<Map<Integer, StringBuffer>> aListOfMaps,
                Map<String, String> aMap)
         throws IllegalArgumentException {
     …
 }
-```
-```java
+~~~
+
+~~~java
 int someMethod(String aString, List<Integer> aList,
         Map<String, String> aMap, int anInt)
                 throws IllegalArgumentException {
     …
 }
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 // If aligning the parameters vertically, don't put two
 // parameters on one line
 int someMethod(String aString,
                List<Integer> aList,
                Map<String, String> aMap,
                int anInt, long aLong,
                Set<Number> aSet,
                double aDouble) {
     …
 }
-```
-```java
+~~~
+
+~~~java
 int someMethod(String aString,
                List<Map<Integer, StringBuffer>> aListOfMaps,
                Map<String, String> aMap) throws InterruptedException {
     …
 }
-```
-```java
+~~~
+
+~~~java
 int someMethod(String aString,
                List<Integer> aList,
                Map<String, String> aMap)
                throws IllegalArgumentException {
     …
 }
-```
+~~~
+
 :::
 :::
 
 
 #### Wrapping Expressions
@@ -713,48 +778,56 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 methodCall(a * simple - formula,
            some + complex - formula * spanning
                         + multiple - lines * may
                         + look - as * follows);
-```
-```java
+~~~
+
+~~~java
 popupMsg("Inbox notification: You have "
         + newMsgs + " new messages");
-```
-```java
+~~~
+
+~~~java
 people.stream()
       .map(Person::getName)
       .forEach(System.out::println);
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 // Arity unclear
 methodCall(a * simple - formula,
            some + complex - formula * spanning +
            multiple - lines * should + not *
            look - as * follows);
-```
-```java
+~~~
+
+~~~java
 // Looks like two arguments
 popupMsg("Inbox notification: You have " +
          newMsgs + " new messages");
-```
-```java
+~~~
+
+~~~java
 people.stream().
        map(Person::getName).
        forEach(System.out::println);
-```
+~~~
+
 :::
 :::
 
     
 ### Whitespace
@@ -789,54 +862,64 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 int someInt;
 String myString;
 char aChar;
 long sixtyfourFlags;
-```
-```java
+~~~
+
+~~~java
 if (isFlagSet(GO)) {
     …
 }
-```
-```java
+~~~
+
+~~~java
 IntUnaryOperator inc = x -> x + 1;
-```
-```java
+~~~
+
+~~~java
 init: {
     …
 }
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 int    someInt;
 String myString;
 char   aChar;
 long   sixtyfourFlags;
-```
-```java
+~~~
+
+~~~java
 if( isFlagSet( GO ) ) {
     …
 }
-```
-```java
+~~~
+
+~~~java
 IntUnaryOperator inc = x->x + 1;
-```
-```java
+~~~
+
+~~~java
 init : {
     …
 }
-```
+~~~
+
 :::
 :::
 
 
 ::: box
@@ -859,24 +942,27 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 @Deprecated
 @Override
 public void foo() {
     …
 }
-```
-```java
+~~~
+
+~~~java
 @Deprecated @Override
 public void foo() {
     …
 }
-```
-```java
+~~~
+
+~~~java
 addListener(new Listener() {
  
     // Ignored events
     @Override public void event1() { }
     @Override public void event2() { }
@@ -886,29 +972,33 @@
     @Override
     public void event4() {
         …
     }
 });
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 @Override @Deprecated public void foo() {
     …
 }
-```
-```java
+~~~
+
+~~~java
 @Override @Deprecated
 @SafeVarargs
 public void foo() {
     …
 }
-```
+~~~
+
 :::
 :::
 
 
 ### Lambda Expressions
@@ -921,30 +1011,36 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 Runnable r = () -> System.out.println("Hello World");
-```
-```java
+~~~
+
+~~~java
 Supplier<String> c = () -> "Hello World";
-```
-```java
+~~~
+
+~~~java
 // Collection::contains is a simple unary method and its behavior is
 // clear from the context. A method reference is preferred here.
 appendFilter(goodStrings::contains);
-```
-```java
+~~~
+
+~~~java
 // A lambda expression is more readable in this case
 // (cf. corresponding example in Don'ts section)
 trackTemperature((time, temp) -> tempMap.put(time, temp));
-```
-```java
+~~~
+
+~~~java
 Function<Person, String> nameFunc = p -> p.getFirstName() + " " + p.getLastName();
-```
-```java
+~~~
+
+~~~java
 class Util {
     private static String getCapitalizedFirstName(Person p) {
         String first = p.getFirstName();
         char initial = Character.toUpperCase(first.charAt(0));
         return initial + first.substring(1);
@@ -954,37 +1050,44 @@
         people.stream()
               .map(Util::getCapitalizedFirstName)
               .forEach(System.out::println);
     }
 }
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 Runnable r = () -> { System.out.println("Hello World"); };
-```
-```java
+~~~
+
+~~~java
 Supplier<String> s = () -> { return "Hello World"; };
-```
-```java
+~~~
+
+~~~java
 // A lambda expression is not needed here
 appendFilter(s -> goodStrings.contains(s));
-```
-```java
+~~~
+
+~~~java
 // Map::put is a binary function, and it’s not clear from context what type
 // of argument trackTemperature accepts. A lambda expression is better here.
 trackTemperature(tempMap::put);
-```
-```java
+~~~
+
+~~~java
 // Unnecessary parameter type
 Function<Person, String> nameFunc = (Person p) -> p.getFirstName() + " " + p.getLastName();
-```
-```java
+~~~
+
+~~~java
 class Util {
     static void printAllPeople(List<Person> people) {
         people.stream()
               .map(p -> {
                   String first = p.getFirstName();
@@ -992,11 +1095,12 @@
                   return initial + first.substring(1);
               })
               .forEach(System.out::println);
     }
 }
-```
+~~~
+
 :::
 :::
 
 
 ### Redundant Parentheses
@@ -1007,25 +1111,30 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 return flag ? "yes" : "no";
-```
-```java
+~~~
+
+~~~java
 String cmp = (flag1 != flag2) ? "not equal" : "equal";
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 return (flag ? "yes" : "no");
-```
+~~~
+
 :::
 :::
 
 
 ### Literals
@@ -1036,90 +1145,47 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 long l = 5432L;
 int i = 0x123 + 0xABC;
 byte b = 0b1010;
 float f1 = 1 / 5432f;
 float f2 = 0.123e4f;
 double d1 = 1 / 5432d;  // or 1 / 5432.0
 double d2 = 0x1.3p2;
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 long l = 5432l;
 int i = 0X123 + 0xabc;
 byte b = 0B1010;
 float f1 = 1 / 5432F;
 float f2 = 0.123E4f;
 double d1 = 1 / 5432D;
 double d2 = 0x1.3P2;
-```
+~~~
+
 :::
 :::
 
 
 ::: box
 [Motivation]{.boxheader}
 Lower case L resembles a 1 in many monospace fonts which means that the literal `5432l` can be confused with `54321`. Using upper case `L` suffix avoids this. The lowercase `0x`, `0b`, `e`, `p`, `f`, and `d` characters are easier to spot in a long sequence of digits, and they avoid confusion with the hexadecimal digits `A`-`F`.
 :::
 
-### Javadoc
-This section only covers basic Javadoc formatting. For a complete reference refer to &nbsp;[How to Write Doc Comments for the Javadoc Tool](http://www.oracle.com/technetwork/articles/java/index-137868.html).
-
-::: conventions
-- Start longer comments with a short summarizing sentence since Javadoc includes this in the method summary table.
-- Prefer inline tags (such as `{@code …}` and `{@link …}` etc) over corresponding HTML tags (`<code>…</code>`, `<a href="…">…</a>` etc).
-- Use `<p>` to separate paragraphs (closing `</p>` tags are not needed and should not be used)
-:::
-
-::: leftcol
-::: box
-[Dos]{.boxheader .dos}
-```java
-/** A short javadoc comment */
-```
-```java
-/**
- * …
- *
- * <blockquote>{@code
- *     List<String> names;
- * }</blockquote>
- */
-```
-:::
-:::
-
-::: rightcol
-::: box
-[Don’ts]{.boxheader .donts}
-```java
-/** put on single line instead
- */
-```
-```java
-/**
- * The <String> below may interfere with the HTML!
- *
- * <blockquote><pre>
- *     List<String> names;
- * </pre></blockquote>
- */
-```
-:::
-:::
-
-
 ## Naming
 ::: conventions
 - Avoid hiding/shadowing methods, variables and type variables in outer scopes.
 - Let the verbosity of the name correlate to the size of the scope. (For instance, use descriptive names for fields of large classes and brief names for local short-lived variables.)
 - When naming public static members, let the identifier be self descriptive if you believe they will be statically imported.
@@ -1141,57 +1207,67 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 class EmptyCell {
     …
 }
-```
-```java
+~~~
+
+~~~java
 class RunningMode {
     …
 }
-```
-```java
+~~~
+
+~~~java
 interface Expandable {
     …
 }
-```
-```java
+~~~
+
+~~~java
 class XmlParser {
     …
 }
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 class Empty {
     …
 }
-```
-```java
+~~~
+
+~~~java
 class Running {
     …
 }
-```
-```java
+~~~
+
+~~~java
 class Expandable {
     …
 }
-```
-```java
+~~~
+
+~~~java
 // Abbreviation should be formatted as 'Xml'
 class XMLParser {
     …
 }
-```
+~~~
+
 :::
 :::
 
         
 ### Method Names
@@ -1201,46 +1277,54 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 public void expand() {
     …
 }
-```
-```java
+~~~
+
+~~~java
 public boolean isExpanding() {
     …
 }
-```
-```java
+~~~
+
+~~~java
 public State getState() {
     …
 }
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 public boolean expanding() {
     …
 }
-```
-```java
+~~~
+
+~~~java
 public State GetState() {
     …
 }
-```
-```java
+~~~
+
+~~~java
 public int get_index() {
     …
 }
-```
+~~~
+
 :::
 :::
 
 
 
@@ -1250,24 +1334,28 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 int currentIndex;
 boolean dataAvailable;
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 int current_index;
 boolean DataAvailable;
-```
+~~~
+
 :::
 :::
 
 
 ### Type Variables
@@ -1278,36 +1366,42 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 interface SpecialMap<K, V> extends Map<K, V> {
     …
 }
-```
-```java
+~~~
+
+~~~java
 class GraphMapper<SRC_VERTEX, SRC_EDGE, DST_VERTEX, DST_EDGE> {
     …
 }
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 interface SpecialMap<Key, Value> extends Map<Key, Value> {
     …
 }
-```
-```java
+~~~
+
+~~~java
 class GraphMapper<S, T, U, V> {
     …
 }
-```
+~~~
+
 :::
 :::
 
 
 ### Constants
@@ -1316,34 +1410,40 @@
 :::
 
 ::: leftcol
 ::: box
 [Dos]{.boxheader .dos}
-```java
+
+~~~java
 public static final int BUFFER_SIZE = 1024;
-```
-```java
+~~~
+
+~~~java
 enum ApplicationMode { RUNNING, PAUSED, TERMINATED }
-```
+~~~
+
 :::
 :::
 
 ::: rightcol
 ::: box
 [Don’ts]{.boxheader .donts}
-```java
+
+~~~java
 public final List<String> CURRENT_WORDS = new ArrayList<>();
-```
-```java
+~~~
+
+~~~java
 enum ApplicationMode { Running, Paused, Terminated }
-```
+~~~
+
 :::
 :::
 
 
 ## Programming Practices
-The focus of the guidelines in this document is on style. General guidelines on best programming practices, use of design patterns, how to structure programs etc is thus out of scope.&nbsp;A few “low level” practices that are easy to pin down is however good to agree upon.
+The focus of the guidelines in this section is on style. General guidelines on best programming practices, use of design patterns, how to structure programs etc is thus out of scope.&nbsp;A few “low level” practices that are easy to pin down is however good to agree upon.
 
 ::: conventions
 - Always use `@Override` where it is possible to do so.
 - Document any non-obvious pre and post conditions (also for private methods). In particular, all parameters / return values are assumed to be non-null unless explicitly stated otherwise.
 - Avoid checking in “`TODO`” comments. If the missing code doesn’t affect correctness or performance, skip the comment, otherwise file an issue for it.
@@ -1362,12 +1462,60 @@
 - Avoid comments that run the risk of getting out of sync as the code evolves. (If a comment runs the risk of getting out of sync, it’s often a sign that it comments how the code works rather than what the code achieves.)
 - Small well documented methods are preferred over longer methods with comments in the body of the method.
 - Don’t check in code that’s commented out.
 - IDE/tool-specific comments should be avoided wherever possible, especially when there are reasonable alternatives, such as external settings files, etc.
 - Comments should be grammatically correct and follow general recommendations of technical writing.
+- Start longer Javadoc comments with a short summarizing sentence since Javadoc includes this in the method summary table.
+- Prefer inline tags (such as `{@code …}` and `{@link …}` etc) over corresponding HTML tags (`<code>…</code>`, `<a href="…">…</a>` etc).
+- Use `<p>` to separate paragraphs (closing `</p>` tags are not needed and should not be used)
 :::
-    
+
+::: leftcol
+::: box
+[Dos]{.boxheader .dos}
+
+~~~java
+/** A short javadoc comment */
+~~~
+
+~~~java
+/**
+ * …
+ *
+ * <blockquote>{@code
+ *     List<String> names;
+ * }</blockquote>
+ */
+~~~
+
+:::
+:::
+
+::: rightcol
+::: box
+[Don’ts]{.boxheader .donts}
+
+~~~java
+/** put on single line instead
+ */
+~~~
+
+~~~java
+/**
+ * The <String> below may interfere with the HTML!
+ *
+ * <blockquote><pre>
+ *     List<String> names;
+ * </pre></blockquote>
+ */
+~~~
+
+:::
+:::
+
+For a complete Javadoc reference refer to &nbsp;[How to Write Doc Comments for the Javadoc Tool](http://www.oracle.com/technetwork/articles/java/index-137868.html).
+
 ## When to reformat code
 ::: conventions
 - Do not reformat code in files unrelated to the current changeset, even if the code doesn’t adhere to the guidelines.
 - Minor cleanups in files that are already touched for other reasons are fine. Put the cleanups in a separate patch if you think it will simplify the review process. Large cleanups should always go in a separate changeset.
 :::
diff a/src/tClone.md b/src/tClone.md
--- a/src/tClone.md
+++ b/src/tClone.md
@@ -13,71 +13,71 @@
 >     adding file changes
 >     added 997 changesets with 1477 changes to 138 files
 >     updating to branch default
 >     82 files updated, 0 files merged, 0 files removed, 0 files unresolved
 >     created /home/iris/9dev
-
+>
 >     cloning http://hg.openjdk.java.net/jdk9/dev/corba
 >     requesting all changes
 >     adding changesets
 >     adding manifests
 >     adding file changes
 >     added 567 changesets with 3577 changes to 1398 files
 >     updating to branch default
 >     1195 files updated, 0 files merged, 0 files removed, 0 files unresolved
 >     created /home/iris/9dev/corba
-
+>
 >     cloning http://hg.openjdk.java.net/jdk9/dev/hotspot
 >     requesting all changes
 >     adding changesets
 >     adding manifests
 >     adding file changes
 >     added 6126 changesets with 36489 changes to 5247 files
 >     updating to branch default
 >     4357 files updated, 0 files merged, 0 files removed, 0 files unresolved
 >     created /home/iris/9dev/hotspot
-
+>
 >     cloning http://hg.openjdk.java.net/jdk9/dev/jaxp
 >     requesting all changes
 >     adding changesets
 >     adding manifests
 >     adding file changes
 >     added 570 changesets with 6285 changes to 4230 files
 >     updating to branch default
 >     2078 files updated, 0 files merged, 0 files removed, 0 files unresolved
 >     created /home/iris/9dev/jaxp
-
+>
 >     cloning http://hg.openjdk.java.net/jdk9/dev/jaxws
 >     requesting all changes
 >     adding changesets
 >     adding manifests
 >     adding file changes
 >     added 471 changesets with 15683 changes to 6727 files
 >     updating to branch default
 >     3710 files updated, 0 files merged, 0 files removed, 0 files unresolved
 >     created /home/iris/9dev/jaxws
-
+>
 >     cloning http://hg.openjdk.java.net/jdk9/dev/jdk
 >     requesting all changes
 >     adding changesets
 >     adding manifests
 >     adding file changes
 >     added 9507 changesets with 91840 changes to 26823 files
 >     updating to branch default
 >     22251 files updated, 0 files merged, 0 files removed, 0 files unresolved
 >     created /home/iris/9dev/jdk
-
+>
 >     cloning http://hg.openjdk.java.net/jdk9/dev/langtools
 >     requesting all changes
 >     adding changesets
 >     adding manifests
 >     adding file changes
 >     added 2326 changesets with 21344 changes to 7022 files
 >     updating to branch default
 >     6196 files updated, 0 files merged, 0 files removed, 0 files unresolved
 >     created /home/iris/9dev/langtools
-
+>
 >     cloning http://hg.openjdk.java.net/jdk9/dev/nashorn
 >     requesting all changes
 >     adding changesets
 >     adding manifests
 >     adding file changes
