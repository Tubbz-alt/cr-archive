diff a/src/javaStyleGuide.md b/src/javaStyleGuide.md
--- a/src/javaStyleGuide.md
+++ b/src/javaStyleGuide.md
@@ -70,14 +70,14 @@
 :::
 
 ## Formatting
 ::: conventions
 - A Java source file should be structured as follows:
-  1. The copyright notice
-  1. Package declaration
-  1. Import statements
-  1. Class declaration
+  #. The copyright notice
+  #. Package declaration
+  #. Import statements
+  #. Class declaration
 - There may be only one top level class declaration per file.
 :::
 
 ### Copyright notice
 ::: conventions
@@ -138,14 +138,14 @@
 :::
 
 ### Class Structure
 ::: conventions
 - The recommended order of class members is the following:
-  1. Fields
-  1. Constructors
-  1. Factory methods
-  1. Other Methods
+  #. Fields
+  #. Constructors
+  #. Factory methods
+  #. Other Methods
 - Related fields should be grouped together. Ordering fields primarily according to access modifiers or identifier is not required. The same applies to methods.
 - Nested types should be grouped at the top of the class, or else defined before first use.
 :::
 
 #### Order of Constructors and Overloaded Methods
@@ -207,20 +207,20 @@
 :::
 
 ### Modifiers
 ::: conventions
 - Modifiers should go in the following order
-  1. Access modifier (`public` / `private` / `protected`)
-  1. `abstract`
-  1. `static`
-  1. `final`
-  1. `transient`
-  1. `volatile`
-  1. `default`
-  1. `synchronized`
-  1. `native`
-  1. `strictfp`
+  #. Access modifier (`public` / `private` / `protected`)
+  #. `abstract`
+  #. `static`
+  #. `final`
+  #. `transient`
+  #. `volatile`
+  #. `default`
+  #. `synchronized`
+  #. `native`
+  #. `strictfp`
 - Modifiers should not be written out when they are implicit. For example, interface methods should neither be declared public nor abstract, and nested enums and interfaces should not be declared static.
 - Method parameters and local variables should not be declared final unless it improves readability or documents an actual design decision.
 - Fields should be declared final unless there is a compelling reason to make them mutable.
 :::
 
@@ -1513,10 +1513,11 @@
 :::
 
 ::: box
 [Motivation]{.boxheader}
 Cleaning up code that’s unrelated to the patch may…
+
 - Complicate the review of the patch in which case correctness may suffer
 - Run the risk of breaking existing code
 - Have a downstream impact, e.g. affect ports to other versions.
 - Trigger an unnecessary debate (perhaps the original formatting was intentional).
 :::
