diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
@@ -27,11 +27,10 @@
 import org.openjdk.skara.storage.StorageBuilder;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.OpenJDKTag;
 
 import java.io.*;
-import java.net.URI;
 import java.nio.file.*;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
@@ -39,24 +38,24 @@
 public class RepositoryWorkItem implements WorkItem {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
     private final HostedRepository repository;
     private final Path storagePath;
     private final Pattern branches;
-    private final StorageBuilder<Tag> tagStorageBuilder;
-    private final StorageBuilder<ResolvedBranch> branchStorageBuilder;
+    private final StorageBuilder<UpdatedTag> tagStorageBuilder;
+    private final StorageBuilder<UpdatedBranch> branchStorageBuilder;
     private final List<RepositoryUpdateConsumer> updaters;
 
-    RepositoryWorkItem(HostedRepository repository, Path storagePath, Pattern branches, StorageBuilder<Tag> tagStorageBuilder, StorageBuilder<ResolvedBranch> branchStorageBuilder, List<RepositoryUpdateConsumer> updaters) {
+    RepositoryWorkItem(HostedRepository repository, Path storagePath, Pattern branches, StorageBuilder<UpdatedTag> tagStorageBuilder, StorageBuilder<UpdatedBranch> branchStorageBuilder, List<RepositoryUpdateConsumer> updaters) {
         this.repository = repository;
         this.storagePath = storagePath;
         this.branches = branches;
         this.tagStorageBuilder = tagStorageBuilder;
         this.branchStorageBuilder = branchStorageBuilder;
         this.updaters = updaters;
     }
 
-    private void handleNewRef(Repository localRepo, Reference ref, Collection<Reference> allRefs, RepositoryUpdateConsumer updater) {
+    private void handleNewRef(Repository localRepo, Reference ref, Collection<Reference> allRefs, RepositoryUpdateConsumer updater) throws NonRetriableException {
         // Figure out the best parent ref
         var candidates = new HashSet<>(allRefs);
         candidates.remove(ref);
         if (candidates.size() == 0) {
             log.warning("No parent candidates found for branch '" + ref.name() + "' - ignoring");
@@ -86,31 +85,29 @@
         var branch = new Branch(ref.name());
         var parent = new Branch(bestParent.getKey().name());
         updater.handleNewBranch(repository, localRepo, bestParentCommits, parent, branch);
     }
 
-    private void handleUpdatedRef(Repository localRepo, Reference ref, List<Commit> commits, RepositoryUpdateConsumer updater) {
+    private void handleUpdatedRef(Repository localRepo, Reference ref, List<Commit> commits, RepositoryUpdateConsumer updater) throws NonRetriableException {
         var branch = new Branch(ref.name());
         updater.handleCommits(repository, localRepo, commits, branch);
     }
 
-    private List<RuntimeException> handleRef(Repository localRepo, UpdateHistory history, Reference ref, Collection<Reference> allRefs) throws IOException {
-        var errors = new ArrayList<RuntimeException>();
+    private List<Throwable> handleRef(Repository localRepo, UpdateHistory history, Reference ref, Collection<Reference> allRefs) throws IOException {
+        var errors = new ArrayList<Throwable>();
         var branch = new Branch(ref.name());
         for (var updater : updaters) {
             var lastHash = history.branchHash(branch, updater.name());
             if (lastHash.isEmpty()) {
                 log.warning("No previous history found for branch '" + branch + "' and updater '" + updater.name() + " - resetting mark");
-                if (!updater.isIdempotent()) {
-                    history.setBranchHash(branch, updater.name(), ref.hash());
-                }
+                history.setBranchHash(branch, updater.name(), ref.hash());
                 try {
                     handleNewRef(localRepo, ref, allRefs, updater);
-                    if (updater.isIdempotent()) {
-                        history.setBranchHash(branch, updater.name(), ref.hash());
-                    }
+                } catch (NonRetriableException e) {
+                    errors.add(e.cause());
                 } catch (RuntimeException e) {
+                    // FIXME: Attempt rollback?
                     errors.add(e);
                 }
             } else {
                 var commitMetadata = localRepo.commitMetadata(lastHash.get() + ".." + ref.hash());
                 if (commitMetadata.size() == 0) {
@@ -123,19 +120,18 @@
                                                        updater.name() + "' - skipping notifications"));
                     continue;
                 }
 
                 var commits = localRepo.commits(lastHash.get() + ".." + ref.hash(), true).asList();
-                if (!updater.isIdempotent()) {
-                    history.setBranchHash(branch, updater.name(), ref.hash());
-                }
+                history.setBranchHash(branch, updater.name(), ref.hash());
                 try {
                     handleUpdatedRef(localRepo, ref, commits, updater);
-                    if (updater.isIdempotent()) {
-                        history.setBranchHash(branch, updater.name(), ref.hash());
-                    }
+                } catch (NonRetriableException e) {
+                    errors.add(e.cause());
                 } catch (RuntimeException e) {
+                    // Attempt to roll back
+                    history.setBranchHash(branch, updater.name(), lastHash.get());
                     errors.add(e);
                 }
             }
         }
         return errors;
@@ -153,28 +149,30 @@
             }
             return Optional.of(tag);
         }
     }
 
-    private void handleTags(Repository localRepo, UpdateHistory history) throws IOException {
+    private List<Throwable> handleTags(Repository localRepo, UpdateHistory history, RepositoryUpdateConsumer updater) throws IOException {
+        var errors = new ArrayList<Throwable>();
         var tags = localRepo.tags();
         var newTags = tags.stream()
-                          .filter(tag -> !history.hasTag(tag))
+                          .filter(tag -> !history.hasTag(tag, updater.name()))
                           .collect(Collectors.toList());
 
         if (tags.size() == newTags.size()) {
             if (tags.size() > 0) {
                 log.warning("No previous tag history found - ignoring all current tags");
-                history.addTags(tags);
+                history.addTags(tags, updater.name());
             }
-            return;
+            return errors;
         }
 
         if (newTags.size() > 10) {
-            history.addTags(newTags);
-            throw new RuntimeException("Excessive amount of new tags detected (" + newTags.size() +
-                                               ") - skipping notifications");
+            history.addTags(newTags, updater.name());
+            errors.add(new RuntimeException("Excessive amount of new tags detected (" + newTags.size() +
+                                               ") - skipping notifications"));
+            return errors;
         }
 
         var allJdkTags = tags.stream()
                              .map(OpenJDKTag::create)
                              .filter(Optional::isPresent)
@@ -206,22 +204,19 @@
             }
 
             Collections.reverse(commits);
             var annotation = localRepo.annotate(tag.tag());
 
-            // Run all notifiers that can be safely re-run
-            updaters.stream()
-                    .filter(RepositoryUpdateConsumer::isIdempotent)
-                    .forEach(updater -> updater.handleOpenJDKTagCommits(repository, localRepo, commits, tag, annotation.orElse(null)));
-
-            // Now update the history
-            history.addTags(List.of(tag.tag()));
-
-            // Finally run all one-shot notifiers
-            updaters.stream()
-                    .filter(updater -> !updater.isIdempotent())
-                    .forEach(updater -> updater.handleOpenJDKTagCommits(repository, localRepo, commits, tag, annotation.orElse(null)));
+            history.addTags(List.of(tag.tag()), updater.name());
+            try {
+                updater.handleOpenJDKTagCommits(repository, localRepo, commits, tag, annotation.orElse(null));
+            } catch (NonRetriableException e) {
+                errors.add(e.cause());
+            } catch (RuntimeException e) {
+                errors.add(e);
+                history.retryTagUpdate(tag.tag(), updater.name());
+            }
         }
 
         var newNonJdkTags = newTags.stream()
                                    .filter(tag -> OpenJDKTag.create(tag).isEmpty())
                                    .collect(Collectors.toList());
@@ -231,38 +226,24 @@
                 throw new RuntimeException("Failed to lookup tag '" + tag.toString() + "'");
             }
 
             var annotation = localRepo.annotate(tag);
 
-            // Run all notifiers that can be safely re-run
-            updaters.stream()
-                    .filter(RepositoryUpdateConsumer::isIdempotent)
-                    .forEach(updater -> updater.handleTagCommit(repository, localRepo, commit.get(), tag, annotation.orElse(null)));
-
-            // Now update the history
-            history.addTags(List.of(tag));
-
-            // Finally run all one-shot notifiers
-            updaters.stream()
-                    .filter(updater -> !updater.isIdempotent())
-                    .forEach(updater -> updater.handleTagCommit(repository, localRepo, commit.get(), tag, annotation.orElse(null)));
+            history.addTags(List.of(tag), updater.name());
+            try {
+                updater.handleTagCommit(repository, localRepo, commit.get(), tag, annotation.orElse(null));
+            } catch (NonRetriableException e) {
+                errors.add(e.cause());
+            } catch (RuntimeException e) {
+                errors.add(e);
+                history.retryTagUpdate(tag, updater.name());
+            }
         }
-    }
 
-    private Repository fetchAll(Path dir, URI remote) throws IOException {
-        Repository repo = null;
-        if (!Files.exists(dir)) {
-            Files.createDirectories(dir);
-            repo = Repository.clone(remote, dir);
-        } else {
-            repo = Repository.get(dir).orElseThrow(() -> new RuntimeException("Repository in " + dir + " has vanished"));
-        }
-        repo.fetchAll();
-        return repo;
+        return errors;
     }
 
-
     @Override
     public boolean concurrentWith(WorkItem other) {
         if (!(other instanceof RepositoryWorkItem)) {
             return true;
         }
@@ -285,14 +266,17 @@
                                      .filter(ref -> branches.matcher(ref.name()).matches())
                                      .collect(Collectors.toList());
             localRepo.fetchAll();
 
             var history = UpdateHistory.create(tagStorageBuilder, historyPath.resolve("tags"), branchStorageBuilder, historyPath.resolve("branches"));
-            handleTags(localRepo, history);
+            var errors = new ArrayList<Throwable>();
+
+            for (var updater : updaters) {
+                errors.addAll(handleTags(localRepo, history, updater));
+            }
 
             boolean hasBranchHistory = !history.isEmpty();
-            var errors = new ArrayList<RuntimeException>();
             for (var ref : knownRefs) {
                 if (!hasBranchHistory) {
                     log.warning("No previous history found for any branch - resetting mark for '" + ref.name());
                     for (var updater : updaters) {
                         log.info("Resetting mark for branch '" + ref.name() + "' for updater '" + updater.name() + "'");
@@ -302,11 +286,11 @@
                     errors.addAll(handleRef(localRepo, history, ref, knownRefs));
                 }
             }
             if (!errors.isEmpty()) {
                 errors.forEach(error -> log.throwing("RepositoryWorkItem", "run", error));
-                throw new RuntimeException("Errors detected during ref updating");
+                throw new RuntimeException("Errors detected when processing repository notifications");
             }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
