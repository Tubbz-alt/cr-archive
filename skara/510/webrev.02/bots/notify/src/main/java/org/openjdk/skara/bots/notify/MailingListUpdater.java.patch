diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -163,11 +163,11 @@
             ret.append("] ");
         }
         return ret.toString();
     }
 
-    private List<Commit> filterAndSendPrCommits(HostedRepository repository, List<Commit> commits, Branch branch) {
+    private List<Commit> filterAndSendPrCommits(HostedRepository repository, List<Commit> commits, Branch branch) throws NonRetriableException {
         var ret = new ArrayList<Commit>();
 
         var rfrsConvos = list.conversations(Duration.ofDays(365)).stream()
                        .filter(conv -> conv.first().subject().contains("RFR: "))
                        .collect(Collectors.toList());
@@ -208,17 +208,22 @@
                              .sender(sender)
                              .author(commitToAuthor(commit))
                              .recipient(recipient)
                              .headers(headers)
                              .build();
-            list.post(email);
+
+            try {
+                list.post(email);
+            } catch (RuntimeException e) {
+                throw new NonRetriableException(e);
+            }
         }
 
         return ret;
     }
 
-    private void sendCombinedCommits(HostedRepository repository, List<Commit> commits, Branch branch) {
+    private void sendCombinedCommits(HostedRepository repository, List<Commit> commits, Branch branch) throws NonRetriableException {
         if (commits.size() == 0) {
             return;
         }
 
         var writer = new StringWriter();
@@ -236,15 +241,19 @@
                          .author(commitAddress)
                          .recipient(recipient)
                          .headers(headers)
                          .build();
 
-        list.post(email);
+        try {
+            list.post(email);
+        } catch (RuntimeException e) {
+            throw new NonRetriableException(e);
+        }
     }
 
     @Override
-    public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) {
+    public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
         switch (mode) {
             case PR_ONLY:
                 filterAndSendPrCommits(repository, commits, branch);
                 break;
             case PR:
@@ -255,11 +264,11 @@
                 break;
         }
     }
 
     @Override
-    public void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) {
+    public void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) throws NonRetriableException {
         if ((mode == Mode.PR_ONLY) || (!reportNewTags)) {
             return;
         }
         if (!reportNewBuilds) {
             handleTagCommit(repository, localRepository, commits.get(commits.size() - 1), tag.tag(), annotation);
@@ -294,15 +303,19 @@
             email.author(annotationToAuthor(annotation));
         } else {
             email.author(commitToAuthor(taggedCommit));
         }
 
-        list.post(email.build());
+        try {
+            list.post(email.build());
+        } catch (RuntimeException e) {
+            throw new NonRetriableException(e);
+        }
     }
 
     @Override
-    public void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) {
+    public void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) throws NonRetriableException {
         if ((mode == Mode.PR_ONLY) || (!reportNewTags)) {
             return;
         }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
@@ -322,11 +335,15 @@
             email.author(annotationToAuthor(annotation));
         } else {
             email.author(commitToAuthor(commit));
         }
 
-        list.post(email.build());
+        try {
+            list.post(email.build());
+        } catch (RuntimeException e) {
+            throw new NonRetriableException(e);
+        }
     }
 
     private String newBranchSubject(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) {
         var subject = new StringBuilder();
         subject.append(repository.repositoryType().shortName());
@@ -345,11 +362,11 @@
 
         return subject.toString();
     }
 
     @Override
-    public void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) {
+    public void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) throws NonRetriableException {
         if ((mode == Mode.PR_ONLY) || (!reportNewBranches)) {
             return;
         }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
@@ -375,16 +392,15 @@
                          .sender(sender)
                          .author(finalAuthor)
                          .recipient(recipient)
                          .headers(headers)
                          .build();
-        list.post(email);
-    }
-
-    @Override
-    public boolean isIdempotent() {
-        return false;
+        try {
+            list.post(email);
+        } catch (RuntimeException e) {
+            throw new NonRetriableException(e);
+        }
     }
 
     @Override
     public String name() {
         return "ml";
