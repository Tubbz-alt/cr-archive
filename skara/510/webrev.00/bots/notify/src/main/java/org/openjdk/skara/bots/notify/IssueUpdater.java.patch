diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
@@ -161,23 +161,27 @@
             Set.of("customfield_10008", "customfield_10000", "customfield_10005");
 
     /**
      * Create a backport of issue.
      */
-    private Issue createBackportIssue(Issue primary) {
+    private Issue createBackportIssue(Issue primary) throws NonRetriableException {
         var filteredProperties = primary.properties().entrySet().stream()
                 .filter(entry -> !entry.getKey().startsWith("customfield_") || propagatedCustomProperties.contains(entry.getKey()))
                 .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
 
         var finalProperties = new HashMap<>(filteredProperties);
         finalProperties.put("issuetype", JSON.of("Backport"));
 
-        var backport = primary.project().createIssue(primary.title(), primary.body().lines().collect(Collectors.toList()), finalProperties);
+        try {
+            var backport = primary.project().createIssue(primary.title(), primary.body().lines().collect(Collectors.toList()), finalProperties);
 
-        var backportLink = Link.create(backport, "backported by").build();
-        primary.addLink(backportLink);;
-        return backport;
+            var backportLink = Link.create(backport, "backported by").build();
+            primary.addLink(backportLink);
+            return backport;
+        } catch (RuntimeException e) {
+            throw new NonRetriableException(e);
+        }
     }
 
     /**
      * Return issue or one of its backports that applies to fixVersion.
      *
@@ -190,11 +194,11 @@
      *
      * Otherwise, create a new Backport.
      *
      * A "scratch" fixVersion is empty, "tbd.*", or "unknown".
      */
-    private Issue findIssue(Issue primary, String fixVersion) {
+    private Issue findIssue(Issue primary, String fixVersion) throws NonRetriableException {
         log.info("Searching for properly versioned issue for primary issue " + primary.id());
         var candidates = Stream.concat(Stream.of(primary), findBackports(primary).stream()).collect(Collectors.toList());
         candidates.forEach(c -> log.fine("Candidate: " + c.id() + " with versions: " + String.join(",", fixVersions(c))));
         var matchingVersionIssue = candidates.stream()
                 .filter(i -> matchVersion(i, fixVersion))
@@ -237,11 +241,11 @@
         }
         return Optional.of(committerEmail.localPart());
     }
 
     @Override
-    public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) {
+    public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
         for (var commit : commits) {
             var commitNotification = CommitFormatters.toTextBrief(repository, commit);
             var commitMessage = CommitMessageParsers.v1.parse(commit);
             for (var commitIssue : commitMessage.issues()) {
                 var optionalIssue = issueProject.issue(commitIssue.id());
@@ -349,15 +353,10 @@
     @Override
     public void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) {
 
     }
 
-    @Override
-    public boolean isIdempotent() {
-        return true;
-    }
-
     @Override
     public String name() {
         return "issue";
     }
 
