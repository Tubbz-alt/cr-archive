diff a/cli/src/main/java/org/openjdk/skara/cli/GitTrees.java b/cli/src/main/java/org/openjdk/skara/cli/GitTrees.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitTrees.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitTrees.java
@@ -30,10 +30,15 @@
 import java.nio.charset.StandardCharsets;
 import java.util.*;
 import java.util.stream.Collectors;
 
 public class GitTrees {
+    private static boolean isRepository(Path root, boolean isMercurial) {
+        var hidden = isMercurial ? root.resolve(".hg") : root.resolve(".git");
+        return Files.exists(hidden) && Files.isDirectory(hidden);
+    }
+
     private static Path root(boolean isMercurial) throws IOException, InterruptedException {
         var pb = isMercurial ?
             new ProcessBuilder("hg", "root") :
             new ProcessBuilder("git", "rev-parse", "--show-toplevel");
         pb.redirectOutput(ProcessBuilder.Redirect.PIPE);
@@ -65,10 +70,29 @@
 
     private static List<Path> tconfig(Path root, boolean isMercurial) throws IOException {
         var subrepos = subrepos(root, isMercurial);
         var treesFile = treesFile(root, isMercurial);
         Files.write(treesFile, subrepos.stream().map(Path::toString).collect(Collectors.toList()));
+
+        for (var subrepo : subrepos) {
+            var subSubRepos = new ArrayList<Path>();
+            for (var repo : subrepos) {
+                if (!repo.equals(subrepo) && repo.startsWith(subrepo)) {
+                    subSubRepos.add(repo);
+                }
+            }
+            if (!subSubRepos.isEmpty()) {
+                var subSubTreesFile = treesFile(root.resolve(subrepo), isMercurial);
+                Files.write(subSubTreesFile,
+                            subSubRepos.stream()
+                                       .map(subrepo::relativize)
+                                       .map(Path::toString)
+                                       .sorted()
+                                       .collect(Collectors.toList()));
+            }
+        }
+
         return subrepos;
     }
 
     private static List<Path> trees(Path root, boolean isMercurial) throws IOException {
         var file = treesFile(root, isMercurial);
@@ -78,10 +102,22 @@
         }
 
         return null;
     }
 
+    private static void treconfigure(Path root, boolean isMercurial) throws IOException {
+        var existing = trees(root, isMercurial);
+        if (existing != null) {
+            for (var subrepo : existing) {
+                var subRoot = root.resolve(subrepo);
+                var file = treesFile(subRoot, isMercurial);
+                Files.deleteIfExists(file);
+            }
+        }
+        tconfig(root, isMercurial);
+    }
+
     public static void main(String[] args) throws IOException, InterruptedException {
         if (args.length == 1 && args[0].equals("--version")) {
             System.out.println("git-trees version: " + Version.fromManifest().orElse("unknown"));
             System.exit(0);
         }
@@ -92,33 +128,44 @@
         }
 
         HttpProxy.setup();
 
         var isMercurial = args.length > 0 && (args[0].equals("--mercurial") || args[0].equals("-m"));
+        var isReconfigure = isMercurial ?
+            args.length > 1 && args[1].equals("treconfigure") :
+            args.length > 0 && args[0].equals("treconfigure");
+
         var root = root(isMercurial);
+        if (isReconfigure) {
+            treconfigure(root, isMercurial);
+            return;
+        }
+
         var trees = trees(root, isMercurial);
         if (trees == null) {
             trees = tconfig(root, isMercurial);
         }
 
         var command = new ArrayList<String>();
         command.add(isMercurial ? "hg" : "git");
         for (var i = isMercurial ? 1 : 0; i < args.length; i++) {
             command.add(args[i]);
         }
-        System.out.println("executing: " + String.join(" ", command));
         var pb = new ProcessBuilder(command);
         pb.inheritIO();
 
         System.out.println("[" + root.toString() + "]");
         pb.directory(root.toFile());
         var ret = pb.start().waitFor();
 
         for (var path : trees) {
-            System.out.println("[" + root.resolve(path).toString() + "]");
-            pb.directory(root.resolve(path).toFile());
-            ret += pb.start().waitFor();
+            var subroot = root.resolve(path);
+            if (isRepository(subroot, isMercurial)) {
+                System.out.println("[" + root.resolve(path).toString() + "]");
+                pb.directory(subroot.toFile());
+                ret += pb.start().waitFor();
+            }
         }
 
         System.exit(ret);
     }
 }
diff a/skara.gitconfig b/skara.gitconfig
--- a/skara.gitconfig
+++ b/skara.gitconfig
@@ -46,10 +46,11 @@
         tpush = trees push
         tcheckout = trees checkout
         tstatus = trees status
         ttag = trees tag
 
+        treconfigure = trees treconfigure
         tdefpath = trees defpath
         tsync = trees sync
         tinfo = trees info
         tpublish = trees publish
         tskara = trees skara
diff a/skara.py b/skara.py
--- a/skara.py
+++ b/skara.py
@@ -168,10 +168,17 @@
         ui.status(b'cloning %s\n' % tsource)
         ui.status(b'destination directory: %s\n' % tdest)
         if mercurial.commands.clone(ui, tsource, tdest, **opts):
             return True
 
+@command(b'treconfigure', [], b'hg treconfigure')
+def treconfigure(ui, repo, **opts):
+    """
+    Reconfigures the trees files for all sub-repositories
+    """
+    _trees(ui, 'treconfigure')
+
 def extsetup(ui):
     this = sys.modules[__name__]
     for cmd in [b'commit', b'config', b'diff', b'heads', b'incoming',
                 b'outgoing', b'log', b'merge', b'parents', b'paths',
                 b'pull', b'push', b'status', b'summary', b'update',
