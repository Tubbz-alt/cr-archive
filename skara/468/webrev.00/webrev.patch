diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
@@ -215,11 +215,11 @@
     }
 
     @Override
     public Optional<HostUser> user(String username) {
         var details = request.get("users/" + URLEncoder.encode(username, StandardCharsets.UTF_8))
-                             .onError(r -> JSON.of())
+                             .onError(r -> Optional.of(JSON.of()))
                              .execute();
         if (details.isNull()) {
             return Optional.empty();
         }
 
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -467,11 +467,11 @@
         labels = null;
         request.delete("issues/" + json.get("number").toString() + "/labels/" + label)
                .onError(r -> {
                    // The GitHub API explicitly states that 404 is the response for deleting labels currently not set
                    if (r.statusCode() == 404) {
-                       return JSONValue.fromNull();
+                       return Optional.of(JSONValue.fromNull());
                    }
                    throw new RuntimeException("Invalid response");
                })
                .execute();
     }
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
@@ -87,18 +87,16 @@
 
     JSONObject getProjectInfo(String name) {
         var encodedName = URLEncoder.encode(name, StandardCharsets.US_ASCII);
 
         var project = request.get("projects/" + encodedName)
-                                     .onError(r -> r.statusCode() == 404 ? JSON.object().put("retry", true) : null)
-                                     .execute();
+                             .onError(r -> r.statusCode() == 404 ? Optional.of(JSON.object().put("retry", true)) : Optional.empty())
+                             .execute();
         if (project.contains("retry")) {
             // Depending on web server configuration, GitLab may need double escaping of project names
             encodedName = URLEncoder.encode(encodedName, StandardCharsets.US_ASCII);
-            project = request.get("projects/" + encodedName)
-                                     .onError(r -> r.statusCode() == 404 ? JSON.object().put("retry", true) : null)
-                                     .execute();
+            project = request.get("projects/" + encodedName).execute();
         }
         return project.asObject();
     }
 
     @Override
@@ -120,11 +118,11 @@
 
     @Override
     public Optional<HostUser> user(String username) {
         var details = request.get("users")
                              .param("username", username)
-                             .onError(r -> JSON.of())
+                             .onError(r -> Optional.of(JSON.of()))
                              .execute();
 
         if (details.isNull()) {
             return Optional.empty();
         }
@@ -173,10 +171,10 @@
             gid = Long.parseLong(groupId);
         } catch (NumberFormatException e) {
             throw new IllegalArgumentException("Group id is not a number: " + groupId);
         }
         var details = request.get("groups/" + gid + "/members/" + user.id())
-                             .onError(r -> JSON.of())
+                             .onError(r -> Optional.of(JSON.of()))
                              .execute();
         return !details.isNull();
     }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
@@ -177,12 +177,12 @@
         var conf = request.get("repository/files/" + confName)
                           .param("ref", ref)
                           .onError(response -> {
                               // Retry once with additional escaping of the path fragment
                               var escapedConfName = URLEncoder.encode(confName, StandardCharsets.UTF_8);
-                              return request.get("repository/files/" + escapedConfName)
-                                            .param("ref", ref).execute();
+                              return Optional.of(request.get("repository/files/" + escapedConfName)
+                                            .param("ref", ref).execute());
                           })
                           .execute();
         var content = Base64.getDecoder().decode(conf.get("content").asString());
         return new String(content, StandardCharsets.UTF_8);
     }
@@ -232,11 +232,11 @@
     @Override
     public HostedRepository fork() {
         var namespace = gitLabHost.currentUser().userName();
         request.post("fork")
                .body("namespace", namespace)
-               .onError(r -> r.statusCode() == 409 ? JSON.object().put("exists", true) : null)
+               .onError(r -> r.statusCode() == 409 ? Optional.of(JSON.object().put("exists", true)) : Optional.empty())
                .execute();
         var nameOnlyStart = projectName.lastIndexOf('/');
         var nameOnly = nameOnlyStart >= 0 ? projectName.substring(nameOnlyStart + 1) : projectName;
         var forkedRepoName = namespace + "/" + nameOnly;
         while (!gitLabHost.isProjectForkComplete(forkedRepoName)) {
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
@@ -80,11 +80,11 @@
     }
 
     @Override
     public boolean isValid() {
         var version = request.get("serverInfo")
-                             .onError(r -> JSON.object().put("invalid", true))
+                             .onError(r -> Optional.of(JSON.object().put("invalid", true)))
                              .execute();
         return !version.contains("invalid");
     }
 
     @Override
@@ -94,11 +94,11 @@
 
     @Override
     public Optional<HostUser> user(String username) {
         var data = request.get("user")
                           .param("username", username)
-                          .onError(r -> JSON.of())
+                          .onError(r -> Optional.of(JSON.of()))
                           .execute();
         if (data.isNull()) {
             return Optional.empty();
         }
 
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
@@ -278,15 +278,12 @@
         if (id.indexOf('-') < 0) {
             id = projectName.toUpperCase() + "-" + id;
         }
         var issueRequest = request.restrict("issue/" + id);
         var issue = issueRequest.get("")
-                           .onError(r -> r.statusCode() < 500 ? JSON.object().put("NOT_FOUND", true) : null)
-                           .execute();
-        if (issue == null) {
-            throw new RuntimeException("Server error when trying to fetch issue " + id);
-        }
+                                .onError(r -> r.statusCode() < 500 ? Optional.of(JSON.object().put("NOT_FOUND", true)) : Optional.empty())
+                                .execute();
         if (!issue.contains("NOT_FOUND")) {
             return Optional.of(new JiraIssue(this, issueRequest, issue));
         } else {
             return Optional.empty();
         }
diff a/network/src/main/java/org/openjdk/skara/network/RestRequest.java b/network/src/main/java/org/openjdk/skara/network/RestRequest.java
--- a/network/src/main/java/org/openjdk/skara/network/RestRequest.java
+++ b/network/src/main/java/org/openjdk/skara/network/RestRequest.java
@@ -47,11 +47,11 @@
         List<String> getAuthHeaders();
     }
 
     @FunctionalInterface
     public interface ErrorTransform {
-        JSONValue onError(HttpResponse<String> response);
+        Optional<JSONValue> onError(HttpResponse<String> response);
     }
 
     public class QueryBuilder {
         private class Param {
             String key;
@@ -259,17 +259,19 @@
         return JSON.parse(response.body());
     }
 
     private Optional<JSONValue> transformBadResponse(HttpResponse<String> response, QueryBuilder queryBuilder) {
         if (response.statusCode() >= 400) {
-            if (queryBuilder.onError == null) {
-                log.warning(queryBuilder.toString());
-                log.warning(response.body());
-                throw new RuntimeException("Request returned bad status: " + response.statusCode());
-            } else {
-                return Optional.of(queryBuilder.onError.onError(response));
+            if (queryBuilder.onError != null) {
+                var transformed = queryBuilder.onError.onError(response);
+                if (transformed.isPresent()) {
+                    return transformed;
+                }
             }
+            log.warning(queryBuilder.toString());
+            log.warning(response.body());
+            throw new RuntimeException("Request returned bad status: " + response.statusCode());
         } else {
             return Optional.empty();
         }
     }
 
diff a/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java b/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java
--- a/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java
+++ b/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java
@@ -22,11 +22,10 @@
  */
 package org.openjdk.skara.network;
 
 import com.sun.net.httpserver.*;
 import org.openjdk.skara.json.*;
-import org.openjdk.skara.network.*;
 
 import org.junit.jupiter.api.Test;
 
 import java.io.*;
 import java.net.*;
@@ -130,11 +129,11 @@
     @Test
     void transformError() throws IOException {
         try (var receiver = new RestReceiver("{}", 400)) {
             var request = new RestRequest(receiver.getEndpoint());
             var response = request.post("/test")
-                   .onError(r -> JSON.object().put("transformed", true))
+                   .onError(r -> Optional.of(JSON.object().put("transformed", true)))
                    .execute();
             assertTrue(response.contains("transformed"));
         }
     }
 
