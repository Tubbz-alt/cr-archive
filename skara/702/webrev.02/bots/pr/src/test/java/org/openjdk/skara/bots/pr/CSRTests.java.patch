diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CSRTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CSRTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CSRTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CSRTests.java
@@ -84,10 +84,20 @@
 
             // The bot should reply with a message that a CSR is no longer needed
             assertLastCommentContains(pr, "determined that a [CSR](https://wiki.openjdk.java.net/display/csr/Main) request " +
                                           "is no longer needed for this pull request.");
             assertFalse(pr.labels().contains("csr"));
+
+            // Require CSR again with long form
+            prAsReviewer.addComment("/csr needed");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with a message that a CSR is needed
+            assertLastCommentContains(pr, "has indicated that a " +
+                                          "[compatibility and specification](https://wiki.openjdk.java.net/display/csr/Main) (CSR) request " +
+                                          "is needed for this pull request.");
+            assertTrue(pr.labels().contains("csr"));
         }
     }
 
     @Test
     void alreadyApprovedCSR(TestInfo testInfo) throws IOException {
@@ -237,11 +247,11 @@
             var prAsReviewer = reviewer.pullRequest(pr.id());
             prAsReviewer.addComment("/csr foobar");
             TestBotRunner.runPeriodicItems(prBot);
 
             // Show help
-            assertLastCommentContains(pr, "usage: `/csr [unneeded]`, requires that the issue the pull request links " +
+            assertLastCommentContains(pr, "usage: `/csr [needed|unneeded]`, requires that the issue the pull request refers to links " +
                                           "to an approved [CSR](https://wiki.openjdk.java.net/display/csr/Main) request.");
             assertFalse(pr.labels().contains("csr"));
         }
     }
 
