diff a/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrCreate.java b/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrCreate.java
--- a/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrCreate.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrCreate.java
@@ -272,11 +272,11 @@
         var project = jbsProjectFromJcheckConf(repo, targetBranch);
         var issue = getIssue(currentBranch, project);
         var file = Files.createTempFile("PULL_REQUEST_", ".md");
         if (issue.isPresent()) {
             Files.writeString(file, format(issue.get()) + "\n\n");
-        } else if (commits.size() == 1) {
+        } else {
             var commit = commits.get(0);
             issue = getIssue(commit, project);
             if (issue.isPresent()) {
                 Files.writeString(file, format(issue.get()) + "\n\n");
             } else {
@@ -287,18 +287,17 @@
                 }
                 if (!message.additional().isEmpty()) {
                     Files.write(file, message.additional(), StandardOpenOption.APPEND);
                 }
             }
-        } else {
-            Files.write(file, List.of(""));
         }
 
         appendPaddedHTMLComment(file, "Please enter the pull request message for your changes.");
-        appendPaddedHTMLComment(file, "The first line will be considered the subject, use a blank line to");
-        appendPaddedHTMLComment(file, "separate the subject from the body. These HTML comment lines will");
-        appendPaddedHTMLComment(file, "be removed automatically. An empty message aborts the pull request.");
+        appendPaddedHTMLComment(file, "The first line will be considered the title, use a blank line to");
+        appendPaddedHTMLComment(file, "separate the title from the body. Pull requests are required to have");
+        appendPaddedHTMLComment(file, "a title and a body. An empty message aborts the pull request.");
+        appendPaddedHTMLComment(file, "These HTML comment lines will be removed automatically.");
         appendPaddedHTMLComment(file, "");
         appendPaddedHTMLComment(file, "Commits to be included from branch '" + currentBranch.name() + "':");
         for (var commit : commits) {
             var desc = commit.hash().abbreviate() + ": " + commit.message().get(0);
             appendPaddedHTMLComment(file, "- " + desc);
@@ -350,11 +349,12 @@
             body = lines.subList(1, lines.size())
                         .stream()
                         .dropWhile(String::isEmpty)
                         .collect(Collectors.toList());
         } else {
-            body = List.of();
+            System.err.println("error: cannot create pull request with empty body, aborting");
+            System.exit(1);
         }
 
         var isDraft = getSwitch("draft", "create", arguments);
         if (upstream.isEmpty() && shouldPublish) {
             GitPublish.main(new String[] { "--quiet", remote });
