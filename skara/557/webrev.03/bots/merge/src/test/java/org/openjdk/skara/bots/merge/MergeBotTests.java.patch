diff a/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java b/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
--- a/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
+++ b/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
@@ -42,11 +42,11 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 class MergeBotTests {
     @Test
     void mergeMasterBranch(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory(false)) {
+        try (var temp = new TemporaryDirectory()) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
@@ -117,11 +117,11 @@
         }
     }
 
     @Test
     void failingMergeTest(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory(false)) {
+        try (var temp = new TemporaryDirectory()) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
@@ -181,18 +181,18 @@
             assertTrue(toHashes.contains(toHashB));
 
             var pullRequests = toHostedRepo.pullRequests();
             assertEquals(1, pullRequests.size());
             var pr = pullRequests.get(0);
-            assertEquals("Cannot automatically merge test:master to master", pr.title());
+            assertEquals("Merge test:master", pr.title());
             assertTrue(pr.labels().contains("failed-auto-merge"));
         }
     }
 
     @Test
     void failingMergeShouldResultInOnlyOnePR(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory(false)) {
+        try (var temp = new TemporaryDirectory()) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
@@ -253,17 +253,17 @@
             assertTrue(toHashes.contains(toHashB));
 
             var pullRequests = toHostedRepo.pullRequests();
             assertEquals(1, pullRequests.size());
             var pr = pullRequests.get(0);
-            assertEquals("Cannot automatically merge test:master to master", pr.title());
+            assertEquals("Merge test:master", pr.title());
         }
     }
 
     @Test
-    void resolvedMergeConflictShouldResultInClosedPR(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory(false)) {
+    void resolvedMergeConflictShouldResultInIntegrateCommand(TestInfo testInfo) throws IOException {
+        try (var temp = new TemporaryDirectory()) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
@@ -324,119 +324,35 @@
             assertTrue(toHashes.contains(toHashB));
 
             var pullRequests = toHostedRepo.pullRequests();
             assertEquals(1, pullRequests.size());
             var pr = pullRequests.get(0);
-            assertEquals("Cannot automatically merge test:master to master", pr.title());
-
-            var fetchHead = toLocalRepo.fetch(fromHostedRepo.webUrl(), "master");
-            toLocalRepo.merge(fetchHead, "ours");
-            toLocalRepo.commit("Merge", "duke", "duke@openjdk.org", now);
-
-            toCommits = toLocalRepo.commits().asList();
-            assertEquals(4, toCommits.size());
+            assertEquals("Merge test:master", pr.title());
+            assertTrue(pr.labels().contains("failed-auto-merge"));
+            assertTrue(forkLocalRepo.branches().contains(new Branch("master")));
+            assertTrue(forkLocalRepo.branches().contains(new Branch("1")));
 
+            // Bot should do nothing as long as PR is presnt
             TestBotRunner.runPeriodicItems(bot);
             pullRequests = toHostedRepo.pullRequests();
-            assertEquals(0, pullRequests.size());
-        }
-    }
-
-    @Test
-    void resolvedMergeConflictAndThenNewConflict(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory(false)) {
-            var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
-
-            var fromDir = temp.path().resolve("from.git");
-            var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
-            var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
-
-            var toDir = temp.path().resolve("to.git");
-            var toLocalRepo = Repository.init(toDir, VCS.GIT);
-            var toGitConfig = toDir.resolve(".git").resolve("config");
-            Files.write(toGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
-                        StandardOpenOption.APPEND);
-            var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
-
-            var forkDir = temp.path().resolve("fork.git");
-            var forkLocalRepo = Repository.init(forkDir, VCS.GIT);
-            var forkGitConfig = forkDir.resolve(".git").resolve("config");
-            Files.write(forkGitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
-                        StandardOpenOption.APPEND);
-            var toFork = new TestHostedRepository(host, "test-mirror-fork", forkLocalRepo);
-
-            var now = ZonedDateTime.now();
-            var fromFileA = fromDir.resolve("a.txt");
-            Files.writeString(fromFileA, "Hello A\n");
-            fromLocalRepo.add(fromFileA);
-            var fromHashA = fromLocalRepo.commit("Adding a.txt", "duke", "duke@openjdk.org", now);
-            var fromCommits = fromLocalRepo.commits().asList();
-            assertEquals(1, fromCommits.size());
-            assertEquals(fromHashA, fromCommits.get(0).hash());
-
-            var toFileA = toDir.resolve("a.txt");
-            Files.writeString(toFileA, "Hello A\n");
-            toLocalRepo.add(toFileA);
-            var toHashA = toLocalRepo.commit("Adding a.txt", "duke", "duke@openjdk.org", now);
-            var toCommits = toLocalRepo.commits().asList();
-            assertEquals(1, toCommits.size());
-            assertEquals(toHashA, toCommits.get(0).hash());
-            assertEquals(fromHashA, toHashA);
-
-            var fromFileB = fromDir.resolve("b.txt");
-            Files.writeString(fromFileB, "Hello B1\n");
-            fromLocalRepo.add(fromFileB);
-            var fromHashB = fromLocalRepo.commit("Adding b1.txt", "duke", "duke@openjdk.org", now);
-
-            var toFileB = toDir.resolve("b.txt");
-            Files.writeString(toFileB, "Hello B2\n");
-            toLocalRepo.add(toFileB);
-            var toHashB = toLocalRepo.commit("Adding b2.txt", "duke", "duke@openjdk.org", now);
-
-            var storage = temp.path().resolve("storage");
-            var master = new Branch("master");
-            var specs = List.of(new MergeBot.Spec(fromHostedRepo, master, master));
-            var bot = new MergeBot(storage, toHostedRepo, toFork, specs);
-            TestBotRunner.runPeriodicItems(bot);
-            TestBotRunner.runPeriodicItems(bot);
-
-            toCommits = toLocalRepo.commits().asList();
-            assertEquals(2, toCommits.size());
-            var toHashes = toCommits.stream().map(Commit::hash).collect(Collectors.toSet());
-            assertTrue(toHashes.contains(toHashA));
-            assertTrue(toHashes.contains(toHashB));
-
-            var pullRequests = toHostedRepo.pullRequests();
             assertEquals(1, pullRequests.size());
-            var pr = pullRequests.get(0);
-            assertEquals("Cannot automatically merge test:master to master", pr.title());
-
-            var fetchHead = toLocalRepo.fetch(fromHostedRepo.webUrl(), "master");
-            toLocalRepo.merge(fetchHead, "ours");
-            toLocalRepo.commit("Merge", "duke", "duke@openjdk.org", now);
-
-            toCommits = toLocalRepo.commits().asList();
-            assertEquals(4, toCommits.size());
+            pr = pullRequests.get(0);
 
+            // Simulate that the merge-conflict has been resolved by adding the "ready" label
+            pr.addLabel("ready");
             TestBotRunner.runPeriodicItems(bot);
             pullRequests = toHostedRepo.pullRequests();
-            assertEquals(0, pullRequests.size());
-
-            var fromFileC = fromDir.resolve("c.txt");
-            Files.writeString(fromFileC, "Hello C1\n");
-            fromLocalRepo.add(fromFileC);
-            fromLocalRepo.commit("Adding c1", "duke", "duke@openjdk.org", now);
+            assertEquals(1, pullRequests.size());
 
-            var toFileC = toDir.resolve("c.txt");
-            Files.writeString(toFileC, "Hello C2\n");
-            toLocalRepo.add(toFileC);
-            toLocalRepo.commit("Adding c2", "duke", "duke@openjdk.org", now);
+            pr = pullRequests.get(0);
+            var numComments = pr.comments().size();
+            var lastComment = pr.comments().get(pr.comments().size() - 1);
+            assertEquals("/integrate", lastComment.body());
 
+            // Running the bot again should not result in another comment
             TestBotRunner.runPeriodicItems(bot);
-            pullRequests = toHostedRepo.pullRequests();
-            assertEquals(1, pullRequests.size());
-            assertEquals("Cannot automatically merge test:master to master", pr.title());
+            assertEquals(numComments, toHostedRepo.pullRequests().size());
         }
     }
 
     final static class TestClock implements Clock {
         ZonedDateTime now;
@@ -455,11 +371,11 @@
         }
     }
 
     @Test
     void testMergeHourly(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory(false)) {
+        try (var temp = new TemporaryDirectory()) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
@@ -570,11 +486,11 @@
         }
     }
 
     @Test
     void testMergeDaily(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory(false)) {
+        try (var temp = new TemporaryDirectory()) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
@@ -691,11 +607,11 @@
         }
     }
 
     @Test
     void testMergeWeekly(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory(false)) {
+        try (var temp = new TemporaryDirectory()) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
@@ -812,11 +728,11 @@
         }
     }
 
     @Test
     void testMergeMonthly(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory(false)) {
+        try (var temp = new TemporaryDirectory()) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
@@ -933,11 +849,11 @@
         }
     }
 
     @Test
     void testMergeYearly(TestInfo testInfo) throws IOException {
-        try (var temp = new TemporaryDirectory(false)) {
+        try (var temp = new TemporaryDirectory()) {
             var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
 
             var fromDir = temp.path().resolve("from.git");
             var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
             var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
