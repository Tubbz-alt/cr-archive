diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -20,23 +20,22 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.census.Contributor;
+import org.openjdk.skara.email.EmailAddress;
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.HostUser;
-import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.issuetracker.Comment;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.Issue;
-import org.openjdk.skara.email.EmailAddress;
 
 import java.io.*;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.logging.Logger;
-import java.util.regex.*;
+import java.util.regex.Matcher;
 import java.util.stream.*;
 
 class CheckRun {
     private final CheckWorkItem workItem;
     private final PullRequest pr;
@@ -249,15 +248,11 @@
                                .collect(Collectors.joining("\n"));
 
         // Check for manually added reviewers
         if (!ignoreStaleReviews) {
             var namespace = censusInstance.namespace();
-            var allReviewers = reviews.stream()
-                                      .map(review -> namespace.get(review.reviewer().id()))
-                                      .filter(Objects::nonNull)
-                                      .map(Contributor::username)
-                                      .collect(Collectors.toSet());
+            var allReviewers = PullRequestUtils.reviewerNames(reviews, namespace);
             var additionalEntries = new ArrayList<String>();
             for (var additional : Reviewers.reviewers(pr.repository().forge().currentUser(), comments)) {
                 if (!allReviewers.contains(additional)) {
                     additionalEntries.add(" * " + additional + " - " + getRole(additional) + " ⚠️ Added manually");
                 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java
@@ -43,28 +43,20 @@
         this.localRepo = localRepo;
         this.ignoreStaleReviews = ignoreStaleReviews;
     }
 
     private String commitMessage(List<Review> activeReviews, Namespace namespace) throws IOException {
-        var reviewers = activeReviews.stream()
-                                     .filter(review -> !ignoreStaleReviews || review.hash().equals(pr.headHash()))
-                                     .filter(review -> review.verdict() == Review.Verdict.APPROVED)
-                                     .map(review -> review.reviewer().id())
-                                     .map(namespace::get)
-                                     .filter(Objects::nonNull)
-                                     .map(Contributor::username)
-                                     .collect(Collectors.toList());
-
+        var eligibleReviews = activeReviews.stream()
+                                           .filter(review -> !ignoreStaleReviews || review.hash().equals(pr.headHash()))
+                                           .filter(review -> review.verdict() == Review.Verdict.APPROVED)
+                                           .collect(Collectors.toList());
+        var reviewers = PullRequestUtils.reviewerNames(eligibleReviews, namespace);
         var comments = pr.comments();
         var currentUser = pr.repository().forge().currentUser();
 
         if (!ignoreStaleReviews) {
-            var allReviewers = activeReviews.stream()
-                                            .map(review -> namespace.get(review.reviewer().id()))
-                                            .filter(Objects::nonNull)
-                                            .map(Contributor::username)
-                                            .collect(Collectors.toSet());
+            var allReviewers = PullRequestUtils.reviewerNames(activeReviews, namespace);
             var additionalReviewers = Reviewers.reviewers(currentUser, comments);
             for (var additionalReviewer : additionalReviewers) {
                 if (!allReviewers.contains(additionalReviewer)) {
                     reviewers.add(additionalReviewer);
                 }
@@ -82,11 +74,11 @@
         var commitMessageBuilder = issue.map(CommitMessage::title).orElseGet(() -> CommitMessage.title(pr.title()));
         if (issue.isPresent()) {
             commitMessageBuilder.issues(additionalIssues);
         }
         commitMessageBuilder.contributors(additionalContributors)
-                            .reviewers(reviewers);
+                            .reviewers(new ArrayList<>(reviewers));
         summary.ifPresent(commitMessageBuilder::summary);
 
         return String.join("\n", commitMessageBuilder.format(CommitMessageFormatters.v1));
     }
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewerCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewerCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewerCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ReviewerCommand.java
@@ -21,18 +21,17 @@
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.census.Contributor;
-import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.issuetracker.Comment;
 
 import java.io.PrintWriter;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.regex.Pattern;
-import java.util.stream.Collectors;
 
 public class ReviewerCommand implements CommandHandler {
     private static final Pattern commandPattern = Pattern.compile("^(add|remove)\\s+(.+)$");
 
     private void showHelp(PullRequest pr, PrintWriter reply) {
@@ -89,16 +88,11 @@
             showHelp(pr, reply);;
             return;
         }
 
         var namespace = censusInstance.namespace();
-        var authenticatedReviewers = pr.reviews().stream()
-                                       .map(review -> namespace.get(review.reviewer().id()))
-                                       .map(Contributor::username)
-                                       .filter(Objects::nonNull)
-                                       .collect(Collectors.toSet());
-
+        var authenticatedReviewers = PullRequestUtils.reviewerNames(pr.reviews(), namespace);
         switch (matcher.group(1)) {
             case "add": {
                 if (!authenticatedReviewers.contains(reviewer.get().username())) {
                     reply.println(Reviewers.addReviewerMarker(reviewer.get()));
                     reply.println("Reviewer `" + reviewer.get().username() + "` successfully added.");
diff a/forge/src/main/java/org/openjdk/skara/forge/PullRequestUtils.java b/forge/src/main/java/org/openjdk/skara/forge/PullRequestUtils.java
--- a/forge/src/main/java/org/openjdk/skara/forge/PullRequestUtils.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/PullRequestUtils.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.forge;
 
+import org.openjdk.skara.census.*;
 import org.openjdk.skara.vcs.*;
 
 import java.io.IOException;
 import java.net.URI;
 import java.nio.file.Path;
@@ -170,6 +171,14 @@
             patch.target().path().ifPresent(ret::add);
             patch.source().path().ifPresent(ret::add);
         }
         return ret;
     }
+
+    public static Set<String> reviewerNames(List<Review> reviews, Namespace namespace) {
+        return reviews.stream()
+                      .map(review -> namespace.get(review.reviewer().id()))
+                      .filter(Objects::nonNull)
+                      .map(Contributor::username)
+                      .collect(Collectors.toCollection(LinkedHashSet::new));
+    }
 }
