diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
+import org.openjdk.skara.census.Contributor;
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.Issue;
@@ -244,10 +245,31 @@
                                        }
                                    }
                                    return entry;
                                })
                                .collect(Collectors.joining("\n"));
+
+        // Check for manually added reviewers
+        if (!ignoreStaleReviews) {
+            var namespace = censusInstance.namespace();
+            var allReviewers = reviews.stream()
+                                      .map(review -> namespace.get(review.reviewer().id()))
+                                      .filter(Objects::nonNull)
+                                      .map(Contributor::username)
+                                      .collect(Collectors.toSet());
+            var additionalEntries = new ArrayList<String>();
+            for (var additional : Reviewers.reviewers(pr.repository().forge().currentUser(), comments)) {
+                if (!allReviewers.contains(additional)) {
+                    additionalEntries.add(" * " + additional + " - " + getRole(additional) + " ⚠️ Added manually");
+                }
+            }
+            if (!reviewers.isBlank()) {
+                reviewers += "\n";
+            }
+            reviewers += String.join("\n", additionalEntries);
+        }
+
         if (reviewers.length() > 0) {
             return Optional.of(reviewers);
         } else {
             return Optional.empty();
         }
