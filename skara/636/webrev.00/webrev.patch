diff a/json/src/main/java/org/openjdk/skara/json/JSONArray.java b/json/src/main/java/org/openjdk/skara/json/JSONArray.java
--- a/json/src/main/java/org/openjdk/skara/json/JSONArray.java
+++ b/json/src/main/java/org/openjdk/skara/json/JSONArray.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -37,10 +37,28 @@
         for (var v : array) {
             values.add(v);
         }
     }
 
+    private void append(JSONValue value) {
+        if (value instanceof JSONArray) {
+            for (var v : value.asArray()) {
+                append(v);
+            }
+        } else {
+            this.values.add(value);
+        }
+    }
+
+    public JSONArray(JSONValue value, JSONValue... values) {
+        this.values = new ArrayList<JSONValue>(values.length + 1);
+        append(value);
+        for (var v : values) {
+            append(v);
+        }
+    }
+
     public JSONArray(List<JSONValue> values) {
         this.values = new ArrayList<JSONValue>(values);
     }
 
     @Override
diff a/json/src/main/java/org/openjdk/skara/json/JSONBoolean.java b/json/src/main/java/org/openjdk/skara/json/JSONBoolean.java
--- a/json/src/main/java/org/openjdk/skara/json/JSONBoolean.java
+++ b/json/src/main/java/org/openjdk/skara/json/JSONBoolean.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.json;
 
 public class JSONBoolean implements JSONValue {
-    boolean value;
+    private boolean value;
 
     public JSONBoolean(boolean value) {
         this.value = value;
     }
 
diff a/json/src/main/java/org/openjdk/skara/json/JSONDecimal.java b/json/src/main/java/org/openjdk/skara/json/JSONDecimal.java
--- a/json/src/main/java/org/openjdk/skara/json/JSONDecimal.java
+++ b/json/src/main/java/org/openjdk/skara/json/JSONDecimal.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.json;
 
 public class JSONDecimal implements JSONValue {
-    double value;
+    private double value;
 
     public JSONDecimal(double value) {
         this.value = value;
     }
 
diff a/json/src/main/java/org/openjdk/skara/json/JSONNumber.java b/json/src/main/java/org/openjdk/skara/json/JSONNumber.java
--- a/json/src/main/java/org/openjdk/skara/json/JSONNumber.java
+++ b/json/src/main/java/org/openjdk/skara/json/JSONNumber.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -20,15 +20,15 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.json;
 
-class JSONNumber implements JSONValue {
-    long value;
+public class JSONNumber implements JSONValue {
+    private long value;
 
     public JSONNumber(int value) {
-        this.value = (long) value;
+        this.value = value;
     }
 
     public JSONNumber(long value) {
         this.value = value;
     }
diff a/json/src/main/java/org/openjdk/skara/json/JSONObject.java b/json/src/main/java/org/openjdk/skara/json/JSONObject.java
--- a/json/src/main/java/org/openjdk/skara/json/JSONObject.java
+++ b/json/src/main/java/org/openjdk/skara/json/JSONObject.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -107,10 +107,14 @@
     public JSONObject putNull(String k) {
         value.put(k, JSON.of());
         return this;
     }
 
+    public JSONValue remove(String k) {
+        return value.remove(k);
+    }
+
     public JSONValue get(String k) {
         return value.get(k);
     }
 
     public JSONValue getOrDefault(String k, JSONValue fallback) {
@@ -126,10 +130,14 @@
 
     public boolean contains(String field) {
         return value.containsKey(field);
     }
 
+    public Set<String> keys() {
+        return value.keySet();
+    }
+
     @Override
     public String toString() {
         var builder = new StringBuilder();
         builder.append("{");
         for (var key : value.keySet()) {
diff a/json/src/main/java/org/openjdk/skara/json/JSONString.java b/json/src/main/java/org/openjdk/skara/json/JSONString.java
--- a/json/src/main/java/org/openjdk/skara/json/JSONString.java
+++ b/json/src/main/java/org/openjdk/skara/json/JSONString.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -20,12 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.json;
 
-class JSONString implements JSONValue {
-    String value;
+public class JSONString implements JSONValue {
+    private String value;
 
     public JSONString(String value) {
         this.value = value;
     }
 
diff a/json/src/main/java/org/openjdk/skara/json/JSONValue.java b/json/src/main/java/org/openjdk/skara/json/JSONValue.java
--- a/json/src/main/java/org/openjdk/skara/json/JSONValue.java
+++ b/json/src/main/java/org/openjdk/skara/json/JSONValue.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -88,16 +88,16 @@
 
     default List<JSONObject.Field> fields() {
         return asObject().fields();
     }
 
-    default boolean contains(String field) {
-        return asObject().contains(field);
+    default boolean contains(String key) {
+        return asObject().contains(key);
     }
 
-    default JSONValue get(String field) {
-        return asObject().get(field);
+    default JSONValue get(String key) {
+        return asObject().get(key);
     }
 
     default JSONValue getOrDefault(String field, JSONValue fallback) {
         return asObject().getOrDefault(field, fallback);
     }
