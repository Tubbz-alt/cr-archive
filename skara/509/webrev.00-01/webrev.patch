diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
@@ -52,11 +52,11 @@
         this.tagStorageBuilder = tagStorageBuilder;
         this.branchStorageBuilder = branchStorageBuilder;
         this.updaters = updaters;
     }
 
-    private void handleNewRef(Repository localRepo, Reference ref, Collection<Reference> allRefs, boolean runOnlyIdempotent) {
+    private void handleNewRef(Repository localRepo, Reference ref, Collection<Reference> allRefs, RepositoryUpdateConsumer updater) {
         // Figure out the best parent ref
         var candidates = new HashSet<>(allRefs);
         candidates.remove(ref);
         if (candidates.size() == 0) {
             log.warning("No parent candidates found for branch '" + ref.name() + "' - ignoring");
@@ -75,23 +75,19 @@
                                    .orElseThrow();
         if (bestParent.getValue().size() > 1000) {
             throw new RuntimeException("Excessive amount of unique commits on new branch " + ref.name() +
                                                " detected (" + bestParent.getValue().size() + ") - skipping notifications");
         }
+        List<Commit> bestParentCommits;
         try {
-            var bestParentCommits = localRepo.commits(bestParent.getKey().hash().hex() + ".." + ref.hash(), true);
-            for (var updater : updaters) {
-                if (updater.isIdempotent() != runOnlyIdempotent) {
-                    continue;
-                }
-                var branch = new Branch(ref.name());
-                var parent = new Branch(bestParent.getKey().name());
-                updater.handleNewBranch(repository, localRepo, bestParentCommits.asList(), parent, branch);
-            }
+            bestParentCommits = localRepo.commits(bestParent.getKey().hash().hex() + ".." + ref.hash(), true).asList();
         } catch (IOException e) {
-            e.printStackTrace();
+            throw new UncheckedIOException(e);
         }
+        var branch = new Branch(ref.name());
+        var parent = new Branch(bestParent.getKey().name());
+        updater.handleNewBranch(repository, localRepo, bestParentCommits, parent, branch);
     }
 
     private void handleUpdatedRef(Repository localRepo, Reference ref, List<Commit> commits, RepositoryUpdateConsumer updater) {
         var branch = new Branch(ref.name());
         updater.handleCommits(repository, localRepo, commits, branch);
@@ -106,11 +102,11 @@
                 log.warning("No previous history found for branch '" + branch + "' and updater '" + updater.name() + " - resetting mark");
                 if (!updater.isIdempotent()) {
                     history.setBranchHash(branch, updater.name(), ref.hash());
                 }
                 try {
-                    handleNewRef(localRepo, ref, allRefs, true);
+                    handleNewRef(localRepo, ref, allRefs, updater);
                     if (updater.isIdempotent()) {
                         history.setBranchHash(branch, updater.name(), ref.hash());
                     }
                 } catch (RuntimeException e) {
                     errors.add(e);
@@ -295,12 +291,13 @@
 
             boolean hasBranchHistory = !history.isEmpty();
             var errors = new ArrayList<RuntimeException>();
             for (var ref : knownRefs) {
                 if (!hasBranchHistory) {
-                    log.warning("No previous history found for any branch - resetting mark for '" + ref.name() + "'");
+                    log.warning("No previous history found for any branch - resetting mark for '" + ref.name());
                     for (var updater : updaters) {
+                        log.info("Resetting mark for branch '" + ref.name() + "' for updater '" + updater.name() + "'");
                         history.setBranchHash(new Branch(ref.name()), updater.name(), ref.hash());
                     }
                 } else {
                     errors.addAll(handleRef(localRepo, history, ref, knownRefs));
                 }
