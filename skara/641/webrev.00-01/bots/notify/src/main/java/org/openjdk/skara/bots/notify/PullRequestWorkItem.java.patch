diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
@@ -39,22 +39,24 @@
 public class PullRequestWorkItem implements WorkItem {
     private final PullRequest pr;
     private final StorageBuilder<PullRequestState> prStateStorageBuilder;
     private final List<PullRequestUpdateConsumer> pullRequestUpdateConsumers;
     private final Consumer<RuntimeException> errorHandler;
+    private final String integratorId;
 
-    PullRequestWorkItem(PullRequest pr, StorageBuilder<PullRequestState> prStateStorageBuilder, List<PullRequestUpdateConsumer> pullRequestUpdateConsumers, Consumer<RuntimeException> errorHandler) {
+    PullRequestWorkItem(PullRequest pr, StorageBuilder<PullRequestState> prStateStorageBuilder, List<PullRequestUpdateConsumer> pullRequestUpdateConsumers, Consumer<RuntimeException> errorHandler, String integratorId) {
         this.pr = pr;
         this.prStateStorageBuilder = prStateStorageBuilder;
         this.pullRequestUpdateConsumers = pullRequestUpdateConsumers;
         this.errorHandler = errorHandler;
+        this.integratorId = integratorId;
     }
 
-    private static Hash resultingCommitHashFor(PullRequest pr, HostUser bot) {
+    private Hash resultingCommitHashFor(PullRequest pr) {
        if (pr.labels().contains("integrated")) {
            for (var comment : pr.comments()) {
-               if (comment.author().equals(bot)) {
+               if (comment.author().id().equals(integratorId)) {
                    for (var line : comment.body().split("\n")) {
                        if (line.startsWith("Pushed as commit")) {
                            var parts = line.split(" ");
                            var hash = parts[parts.length - 1].replace(".", "");
                            return new Hash(hash);
@@ -81,11 +83,11 @@
 
                        // Storage might be missing commit information
                        if (!obj.contains("commit")) {
                            var prId = id.split(":")[1];
                            var currentPR = pr.repository().pullRequest(prId);
-                           var hash = resultingCommitHashFor(currentPR, pr.repository().forge().currentUser());
+                           var hash = resultingCommitHashFor(currentPR);
                            if (hash == null) {
                                obj.putNull("commit");
                            } else {
                                obj.put("commit", hash.hex());
                            }
@@ -174,11 +176,11 @@
                 .serializer(this::serializePrState)
                 .deserializer(this::deserializePrState)
                 .materialize(historyPath);
 
         var issues = parseIssues();
-        var commit = resultingCommitHashFor(pr, pr.repository().forge().currentUser());
+        var commit = resultingCommitHashFor(pr);
         var state = new PullRequestState(pr, issues, commit);
         var stored = storage.current();
         if (stored.contains(state)) {
             // Already up to date
             return;
