diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
@@ -42,15 +42,16 @@
     private final List<RepositoryUpdateConsumer> updaters;
     private final List<PullRequestUpdateConsumer> prUpdaters;
     private final PullRequestUpdateCache updateCache;
     private final Set<String> readyLabels;
     private final Map<String, Pattern> readyComments;
+    private final String integratorId;
 
     NotifyBot(HostedRepository repository, Path storagePath, Pattern branches, StorageBuilder<UpdatedTag> tagStorageBuilder,
               StorageBuilder<UpdatedBranch> branchStorageBuilder, StorageBuilder<PullRequestState> prStateStorageBuilder,
               List<RepositoryUpdateConsumer> updaters, List<PullRequestUpdateConsumer> prUpdaters,
-              Set<String> readyLabels, Map<String, Pattern> readyComments) {
+              Set<String> readyLabels, Map<String, Pattern> readyComments, String integratorId) {
         this.repository = repository;
         this.storagePath = storagePath;
         this.branches = branches;
         this.tagStorageBuilder = tagStorageBuilder;
         this.branchStorageBuilder = branchStorageBuilder;
@@ -58,10 +59,11 @@
         this.updaters = updaters;
         this.prUpdaters = prUpdaters;
         this.updateCache = new PullRequestUpdateCache();
         this.readyLabels = readyLabels;
         this.readyComments = readyComments;
+        this.integratorId = integratorId;
     }
 
     public static NotifyBotBuilder newBuilder() {
         return new NotifyBotBuilder();
     }
@@ -110,11 +112,15 @@
         for (var pr : prs) {
             if (updateCache.needsUpdate(pr)) {
                 if (!isReady(pr)) {
                     continue;
                 }
-                ret.add(new PullRequestWorkItem(pr, prStateStorageBuilder, prUpdaters, e -> updateCache.invalidate(pr)));
+                ret.add(new PullRequestWorkItem(pr,
+                                                prStateStorageBuilder,
+                                                prUpdaters,
+                                                e -> updateCache.invalidate(pr),
+                                                integratorId));
             }
         }
 
         // Repository events
         ret.add(new RepositoryWorkItem(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, updaters));
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java
@@ -38,10 +38,11 @@
     private StorageBuilder<PullRequestState> prStateStorageBuilder;
     private List<RepositoryUpdateConsumer> updaters = List.of();
     private List<PullRequestUpdateConsumer> prUpdaters = List.of();
     private Set<String> readyLabels = Set.of();
     private Map<String, Pattern> readyComments = Map.of();
+    private String integratorId;
 
     public NotifyBotBuilder repository(HostedRepository repository) {
         this.repository = repository;
         return this;
     }
@@ -89,9 +90,14 @@
     public NotifyBotBuilder readyComments(Map<String, Pattern> readyComments) {
         this.readyComments = readyComments;
         return this;
     }
 
+    public NotifyBotBuilder integratorId(String integratorId) {
+        this.integratorId = integratorId;
+        return this;
+    }
+
     public NotifyBot build() {
-        return new NotifyBot(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, prStateStorageBuilder, updaters, prUpdaters, readyLabels, readyComments);
+        return new NotifyBot(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, prStateStorageBuilder, updaters, prUpdaters, readyLabels, readyComments, integratorId);
     }
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
@@ -68,10 +68,11 @@
                                   .collect(Collectors.toSet());
         var readyComments = specific.get("ready").get("comments").stream()
                                     .map(JSONValue::asObject)
                                     .collect(Collectors.toMap(obj -> obj.get("user").asString(),
                                                               obj -> Pattern.compile(obj.get("pattern").asString())));
+        var integratorId = specific.get("integrator").asString();
 
         // Collect configuration applicable to all instances of a specific notifier
         var notifierFactories = NotifierFactory.getNotifierFactories();
         notifierFactories.forEach(notifierFactory -> log.info("Available notifier: " + notifierFactory.name()));
         var notifierConfiguration = new HashMap<String, JSONObject>();
@@ -133,10 +134,11 @@
                                .prStateStorageBuilder(prStateStorageBuilder)
                                .updaters(updaters)
                                .prUpdaters(prUpdaters)
                                .readyLabels(readyLabels)
                                .readyComments(readyComments)
+                               .integratorId(integratorId)
                                .build();
             ret.add(bot);
         }
 
         return ret;
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
@@ -39,22 +39,24 @@
 public class PullRequestWorkItem implements WorkItem {
     private final PullRequest pr;
     private final StorageBuilder<PullRequestState> prStateStorageBuilder;
     private final List<PullRequestUpdateConsumer> pullRequestUpdateConsumers;
     private final Consumer<RuntimeException> errorHandler;
+    private final String integratorId;
 
-    PullRequestWorkItem(PullRequest pr, StorageBuilder<PullRequestState> prStateStorageBuilder, List<PullRequestUpdateConsumer> pullRequestUpdateConsumers, Consumer<RuntimeException> errorHandler) {
+    PullRequestWorkItem(PullRequest pr, StorageBuilder<PullRequestState> prStateStorageBuilder, List<PullRequestUpdateConsumer> pullRequestUpdateConsumers, Consumer<RuntimeException> errorHandler, String integratorId) {
         this.pr = pr;
         this.prStateStorageBuilder = prStateStorageBuilder;
         this.pullRequestUpdateConsumers = pullRequestUpdateConsumers;
         this.errorHandler = errorHandler;
+        this.integratorId = integratorId;
     }
 
-    private static Hash resultingCommitHashFor(PullRequest pr, HostUser bot) {
+    private Hash resultingCommitHashFor(PullRequest pr) {
        if (pr.labels().contains("integrated")) {
            for (var comment : pr.comments()) {
-               if (comment.author().equals(bot)) {
+               if (comment.author().id().equals(integratorId)) {
                    for (var line : comment.body().split("\n")) {
                        if (line.startsWith("Pushed as commit")) {
                            var parts = line.split(" ");
                            var hash = parts[parts.length - 1].replace(".", "");
                            return new Hash(hash);
@@ -81,11 +83,11 @@
 
                        // Storage might be missing commit information
                        if (!obj.contains("commit")) {
                            var prId = id.split(":")[1];
                            var currentPR = pr.repository().pullRequest(prId);
-                           var hash = resultingCommitHashFor(currentPR, pr.repository().forge().currentUser());
+                           var hash = resultingCommitHashFor(currentPR);
                            if (hash == null) {
                                obj.putNull("commit");
                            } else {
                                obj.put("commit", hash.hex());
                            }
@@ -174,11 +176,11 @@
                 .serializer(this::serializePrState)
                 .deserializer(this::deserializePrState)
                 .materialize(historyPath);
 
         var issues = parseIssues();
-        var commit = resultingCommitHashFor(pr, pr.repository().forge().currentUser());
+        var commit = resultingCommitHashFor(pr);
         var state = new PullRequestState(pr, issues, commit);
         var stored = storage.current();
         if (stored.contains(state)) {
             // Already up to date
             return;
