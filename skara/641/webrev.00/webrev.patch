diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestState.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestState.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestState.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestState.java
@@ -21,40 +21,49 @@
  * questions.
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.vcs.Hash;
 
 import java.util.*;
 
 class PullRequestState {
     private final String prId;
     private final Set<String> issueIds;
+    private final Hash commitId;
 
-    PullRequestState(PullRequest pr, Set<String> issueIds) {
+    PullRequestState(PullRequest pr, Set<String> issueIds, Hash commitId) {
         this.prId = pr.repository().id() + ":" + pr.id();
         this.issueIds = issueIds;
+        this.commitId = commitId;
     }
 
-    PullRequestState(String prId, Set<String> issueIds) {
+    PullRequestState(String prId, Set<String> issueIds, Hash commitId) {
         this.prId = prId;
         this.issueIds = issueIds;
+        this.commitId = commitId;
     }
 
     public String prId() {
         return prId;
     }
 
     public Set<String> issueIds() {
         return issueIds;
     }
 
+    public Optional<Hash> commitId() {
+        return Optional.ofNullable(commitId);
+    }
+
     @Override
     public String toString() {
         return "PullRequestState{" +
                 "prId='" + prId + '\'' +
                 ", issueIds=" + issueIds +
+                ", commitId=" + commitId +
                 '}';
     }
 
     @Override
     public boolean equals(Object o) {
@@ -64,13 +73,14 @@
         if (o == null || getClass() != o.getClass()) {
             return false;
         }
         var that = (PullRequestState) o;
         return prId.equals(that.prId) &&
-                issueIds.equals(that.issueIds);
+                issueIds.equals(that.issueIds) &&
+                Objects.equals(commitId, that.commitId);
     }
 
     @Override
     public int hashCode() {
-        return Objects.hash(prId, issueIds);
+        return Objects.hash(prId, issueIds, commitId);
     }
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
@@ -22,12 +22,14 @@
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.bot.WorkItem;
 import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.storage.StorageBuilder;
+import org.openjdk.skara.vcs.Hash;
 import org.openjdk.skara.vcs.openjdk.Issue;
 
 import java.nio.file.Path;
 import java.util.*;
 import java.util.function.*;
@@ -45,20 +47,57 @@
         this.prStateStorageBuilder = prStateStorageBuilder;
         this.pullRequestUpdateConsumers = pullRequestUpdateConsumers;
         this.errorHandler = errorHandler;
     }
 
+    private static Hash resultingCommitHashFor(PullRequest pr, HostUser bot) {
+       if (pr.labels().contains("integrated")) {
+           for (var comment : pr.comments()) {
+               if (comment.author().equals(bot)) {
+                   for (var line : comment.body().split("\n")) {
+                       if (line.startsWith("Pushed as commit")) {
+                           var parts = line.split(" ");
+                           var hash = parts[parts.length - 1].replace(".", "");
+                           return new Hash(hash);
+                       }
+                   }
+               }
+           }
+       }
+       return null;
+    }
+
     private Set<PullRequestState> deserializePrState(String current) {
         if (current.isBlank()) {
             return Set.of();
         }
         var data = JSON.parse(current);
         return data.stream()
                    .map(JSONValue::asObject)
-                   .map(obj -> new PullRequestState(obj.get("pr").asString(), obj.get("issues").stream()
-                                                                                 .map(JSONValue::asString)
-                                                                                 .collect(Collectors.toSet())))
+                   .map(obj -> {
+                       var id = obj.get("pr").asString();
+                       var issues = obj.get("issues").stream()
+                                                     .map(JSONValue::asString)
+                                                     .collect(Collectors.toSet());
+
+                       // Storage might be missing commit information
+                       if (!obj.contains("commit")) {
+                           var prId = id.split(":")[1];
+                           var currentPR = pr.repository().pullRequest(prId);
+                           var hash = resultingCommitHashFor(currentPR, pr.repository().forge().currentUser());
+                           if (hash == null) {
+                               obj.putNull("commit");
+                           } else {
+                               obj.put("commit", hash.hex());
+                           }
+                       }
+
+                       var commit = obj.get("commit").isNull() ?
+                           null : new Hash(obj.get("commit").asString());
+
+                       return new PullRequestState(id, issues, commit);
+                   })
                    .collect(Collectors.toSet());
     }
 
     private String serializePrState(Collection<PullRequestState> added, Set<PullRequestState> existing) {
         var addedPrs = added.stream()
@@ -69,14 +108,21 @@
                                   .collect(Collectors.toSet());
 
         var entries = Stream.concat(nonReplaced.stream(),
                                     added.stream())
                             .sorted(Comparator.comparing(PullRequestState::prId))
-                            .map(pr -> JSON.object().put("pr", pr.prId()).put("issues", new JSONArray(
-                                    pr.issueIds().stream()
-                                      .map(JSON::of)
-                                      .collect(Collectors.toList()))))
+                            .map(pr -> {
+                                var issues = new JSONArray(pr.issueIds()
+                                                             .stream()
+                                                             .map(JSON::of)
+                                                             .collect(Collectors.toList()));
+                                var commit = pr.commitId().isPresent()?
+                                    JSON.of(pr.commitId().get().hex()) : JSON.of();
+                                return JSON.object().put("pr", pr.prId())
+                                                    .put("issues",issues)
+                                                    .put("commit", commit);
+                            })
                             .map(JSONObject::toString)
                             .collect(Collectors.toList());
         return "[\n" + String.join(",\n", entries) + "\n]";
     }
 
@@ -128,35 +174,36 @@
                 .serializer(this::serializePrState)
                 .deserializer(this::deserializePrState)
                 .materialize(historyPath);
 
         var issues = parseIssues();
-        var prIssues = new PullRequestState(pr, issues);
-        var current = storage.current();
-        if (current.contains(prIssues)) {
+        var commit = resultingCommitHashFor(pr, pr.repository().forge().currentUser());
+        var state = new PullRequestState(pr, issues, commit);
+        var stored = storage.current();
+        if (stored.contains(state)) {
             // Already up to date
             return;
         }
 
         // Search for an existing
-        var oldPrIssues = current.stream()
-                .filter(p -> p.prId().equals(prIssues.prId()))
+        var storedState = stored.stream()
+                .filter(ss -> ss.prId().equals(state.prId()))
                 .findAny();
-        if (oldPrIssues.isPresent()) {
-            var oldIssues = oldPrIssues.get().issueIds();
-            oldIssues.stream()
-                     .filter(issue -> !issues.contains(issue))
-                     .forEach(this::notifyListenersRemoved);
+        if (storedState.isPresent()) {
+            var storedIssues = storedState.get().issueIds();
+            storedIssues.stream()
+                        .filter(issue -> !issues.contains(issue))
+                        .forEach(this::notifyListenersRemoved);
             issues.stream()
-                  .filter(issue -> !oldIssues.contains(issue))
+                  .filter(issue -> !storedIssues.contains(issue))
                   .forEach(this::notifyListenersAdded);
         } else {
             notifyNewPr(pr);
             issues.forEach(this::notifyListenersAdded);
         }
 
-        storage.put(prIssues);
+        storage.put(state);
     }
 
     @Override
     public String toString() {
         return "Notify.PR@" + pr.repository().name() + "#" + pr.id();
