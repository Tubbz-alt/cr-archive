diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
@@ -271,10 +271,15 @@
     @Override
     public IssueProject project() {
         return null;
     }
 
+    @Override
+    public void makeNotDraft() {
+
+    }
+
     @Override
     public URI diffUrl() {
         return null;
     }
 }
diff a/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrCreate.java b/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrCreate.java
--- a/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrCreate.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrCreate.java
@@ -71,10 +71,14 @@
                   .optional(),
             Switch.shortcut("")
                   .fullname("jcheck")
                   .helptext("Run jcheck before creating the pull request")
                   .optional(),
+            Switch.shortcut("")
+                  .fullname("draft")
+                  .helptext("Create a pull request in draft state")
+                  .optional(),
             Switch.shortcut("")
                   .fullname("verbose")
                   .helptext("Turn on verbose output")
                   .optional(),
             Switch.shortcut("")
@@ -338,11 +342,12 @@
                         .collect(Collectors.toList());
         } else {
             body = List.of();
         }
 
-        var pr = remoteRepo.createPullRequest(parentRepo, targetBranch, currentBranch.name(), title, body);
+        var isDraft = getSwitch("draft", "create", arguments);
+        var pr = remoteRepo.createPullRequest(parentRepo, targetBranch, currentBranch.name(), title, body, isDraft);
         var assigneesOption = getOption("assignees", "create", arguments);
         if (assigneesOption != null) {
             var usernames = Arrays.asList(assigneesOption.split(","));
             var assignees = usernames.stream()
                                      .map(u -> host.user(u))
diff a/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrSet.java b/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrSet.java
--- a/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrSet.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrSet.java
@@ -62,10 +62,14 @@
             Option.shortcut("")
                   .fullname("assignees")
                   .describe("LIST")
                   .helptext("Comma separated list of assignees")
                   .optional(),
+            Switch.shortcut("")
+                  .fullname("no-draft")
+                  .helptext("Mark the pull request as not draft")
+                  .optional(),
             Switch.shortcut("")
                   .fullname("verbose")
                   .helptext("Turn on verbose output")
                   .optional(),
             Switch.shortcut("")
@@ -101,7 +105,12 @@
                 .filter(Optional::isPresent)
                 .map(Optional::get)
                 .collect(Collectors.toList());
             pr.setAssignees(assignees);
         }
+
+        var setNoDraft = getSwitch("no-draft", "set", arguments);
+        if (setNoDraft) {
+            pr.makeNotDraft();
+        }
     }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java
@@ -138,6 +138,7 @@
     /**
      * Returns true if the request is in draft mode.
      * @return
      */
     boolean isDraft();
+    void makeNotDraft();
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
@@ -39,10 +39,11 @@
     private final Pattern webUriPattern;
     private final String webUriReplacement;
     private final GitHubApplication application;
     private final Credential pat;
     private final RestRequest request;
+    private final RestRequest graphQL;
     private HostUser currentUser;
     private final Logger log = Logger.getLogger("org.openjdk.skara.forge.github");
 
     public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement) {
         this.uri = uri;
@@ -58,10 +59,29 @@
 
         request = new RestRequest(baseApi, () -> Arrays.asList(
                 "Authorization", "token " + getInstallationToken().orElseThrow(),
                 "Accept", "application/vnd.github.machine-man-preview+json",
                 "Accept", "application/vnd.github.antiope-preview+json"));
+
+        var graphQLAPI = URIBuilder.base(uri)
+                .appendSubDomain("api")
+                .setPath("/graphql")
+                .build();
+        graphQL = new RestRequest(graphQLAPI, () -> Arrays.asList(
+                "Authorization", "bearer " + getInstallationToken().orElseThrow(),
+                "Accept", "application/vnd.github.machine-man-preview+json",
+                "Accept", "application/vnd.github.antiope-preview+json",
+                "Accept", "application/vnd.github.shadow-cat-preview+json",
+                "Accept", "application/vnd.github.comfort-fade-preview+json"
+        ));
+    }
+
+    RestRequest graphQL() {
+        if (graphQL == null) {
+            throw new IllegalStateException("Cannot use GraphQL API without authorization");
+        }
+        return graphQL;
     }
 
     public GitHubHost(URI uri, Credential pat, Pattern webUriPattern, String webUriReplacement) {
         this.uri = uri;
         this.webUriPattern = webUriPattern;
@@ -74,10 +94,22 @@
                                 .setPath("/")
                                 .build();
 
         request = new RestRequest(baseApi, () -> Arrays.asList(
                 "Authorization", "token " + getInstallationToken().orElseThrow()));
+
+        var graphQLAPI = URIBuilder.base(uri)
+                .appendSubDomain("api")
+                .setPath("/graphql")
+                .build();
+        graphQL = new RestRequest(graphQLAPI, () -> Arrays.asList(
+                "Authorization", "bearer " + getInstallationToken().orElseThrow(),
+                "Accept", "application/vnd.github.machine-man-preview+json",
+                "Accept", "application/vnd.github.antiope-preview+json",
+                "Accept", "application/vnd.github.shadow-cat-preview+json",
+                "Accept", "application/vnd.github.comfort-fade-preview+json"
+        ));
     }
 
     GitHubHost(URI uri, Pattern webUriPattern, String webUriReplacement) {
         this.uri = uri;
         this.webUriPattern = webUriPattern;
@@ -89,10 +121,11 @@
                                 .appendSubDomain("api")
                                 .setPath("/")
                                 .build();
 
         request = new RestRequest(baseApi);
+        graphQL = null;
     }
 
     public URI getURI() {
         return uri;
     }
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -546,10 +546,57 @@
     @Override
     public void removeProperty(String name) {
         throw new RuntimeException("not implemented yet");
     }
 
+    @Override
+    public void makeNotDraft() {
+        if (!isDraft()) {
+            return;
+        }
+
+        var parts = repository.name().split("/");
+        var owner = parts[0];
+        var name = parts[1];
+        var number = id();
+
+        var query = String.join("\n", List.of(
+            "query {",
+            "    repository(owner: \"" + owner + "\", name: \"" + name + "\") {",
+            "        pullRequest(number: " + number + ") {",
+            "            id",
+            "        }",
+            "    }",
+            "}"
+        ));
+        var data = host.graphQL()
+                       .post()
+                       .body(JSON.object().put("query", query))
+                       .execute()
+                       .get("data");
+        var prId = data.get("repository")
+                            .get("pullRequest")
+                            .get("id").asString();
+
+        var input = "{pullRequestId:\"" + prId + "\"}";
+        // Do not care about the returned PR id, but the markPullRequestReadyForReview
+        // mutation requires non-nullable selection.
+        var mutation = String.join("\n", List.of(
+            "mutation {",
+            "    markPullRequestReadyForReview(input: " + input + ") {",
+            "        pullRequest {",
+            "            id",
+            "        }",
+            "    }",
+            "}"
+        ));
+        host.graphQL()
+            .post()
+            .body(JSON.object().put("query", mutation))
+            .execute();
+    }
+
     @Override
     public URI diffUrl() {
         return URI.create(webUrl() + ".diff");
     }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
@@ -673,10 +673,19 @@
     @Override
     public void removeProperty(String name) {
         throw new RuntimeException("not implemented yet");
     }
 
+    @Override
+    public void makeNotDraft() {
+        var title = title();
+        var draftPrefix = "WIP:";
+        if (title.startsWith(draftPrefix)) {
+            setTitle(title.substring(draftPrefix.length()).stripLeading());
+        }
+    }
+
     @Override
     public URI diffUrl() {
         return URI.create(webUrl() + ".diff");
     }
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
--- a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
@@ -211,10 +211,15 @@
         } catch (URISyntaxException e) {
             throw new RuntimeException(e);
         }
     }
 
+    @Override
+    public void makeNotDraft() {
+        data.draft = false;
+    }
+
     @Override
     public URI diffUrl() {
         return URI.create(webUrl().toString() + ".diff");
     }
 }
