diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesCommand.java
@@ -26,71 +26,189 @@
 import org.openjdk.skara.issuetracker.Comment;
 import org.openjdk.skara.vcs.openjdk.Issue;
 
 import java.io.PrintWriter;
 import java.nio.file.Path;
-import java.util.List;
+import java.util.*;
+import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
+class InvalidIssue extends Exception {
+    private String identifier;
+    private String reason;
+
+    InvalidIssue(String identifier, String reason) {
+        this.identifier = identifier;
+        this.reason = reason;
+    }
+
+    String identifier() {
+        return identifier;
+    }
+
+    String reason() {
+        return reason;
+    }
+}
+
 public class SolvesCommand implements CommandHandler {
     private void showHelp(PrintWriter reply) {
-        reply.println("To add an additional issue to the list of issues that this PR solves: `/solves <id>: <description>`." +
-                              "To remove a previously added additional issue: `/solves <id>`.");
+        reply.println("Command syntax: `/solves [remove] <id>[,<id>,...]` or `/solves <id>: <description>`. For example:");
+        reply.println();
+        reply.println(" * `/solves JDK-1234567,4567890`");
+        reply.println(" * `/solves remove JDK-4567890`");
+        reply.println(" * `/solves 1234567: Use this exact title`");
+        reply.println();
+        reply.print("If issues are specified only by their ID, the title will be automatically retrieved from JBS. ");
+        reply.print("The project prefix (`JDK-` in the above examples) is optional. ");
+        reply.println("Separate multiple issue IDs using either spaces or commas.");
+    }
+
+    private static final Pattern shortIssuePattern = Pattern.compile("((?:[A-Za-z]+-)?[0-9]+)(?:,| |$)");
+
+    private List<Issue> parseIssueList(String allowedPrefix, String issueList) throws InvalidIssue {
+        List<Issue> ret;
+        // Is this a single fully described issue?
+        var singleIssue = Issue.fromString(issueList);
+        if (singleIssue.isPresent()) {
+            ret = List.of(singleIssue.get());
+        } else {
+            var shortIssueMatcher = shortIssuePattern.matcher(issueList);
+            ret = shortIssueMatcher.results()
+                                   .map(matchResult -> matchResult.group(1))
+                                   .map(identifier -> new Issue(identifier, null))
+                                   .collect(Collectors.toList());
+        }
+        for (var issue : ret) {
+            if (issue.id().contains("-") && !issue.id().startsWith(allowedPrefix)) {
+                throw new InvalidIssue(issue.id(), "This PR can only solve issues in the " + allowedPrefix + " project");
+            }
+        }
+
+        // Drop the validated project prefixes
+        return ret.stream()
+                  .map(issue -> issue.id().contains("-") ? new Issue(issue.id().split("-", 2)[1], issue.description()) : issue)
+                  .collect(Collectors.toList());
     }
 
     @Override
     public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
         if (!comment.author().equals(pr.author())) {
             reply.println("Only the author (@" + pr.author().userName() + ") is allowed to issue the `solves` command.");
             return;
         }
-
         if (args.isBlank()) {
             showHelp(reply);
             return;
         }
 
         var currentSolved = SolvesTracker.currentSolved(pr.repository().forge().currentUser(), allComments)
                                          .stream()
                                          .map(Issue::id)
                                          .collect(Collectors.toSet());
+        try {
+            if (args.startsWith("remove") || args.startsWith("delete")) {
+                var issueListStart = args.indexOf(' ');
+                if (issueListStart == -1) {
+                    showHelp(reply);
+                    return;
+                }
+                if (currentSolved.isEmpty()) {
+                    reply.println("This PR does not contain any additional solved issues that can be removed. To remove the primary solved issue, simply edit the title of this PR.");
+                    return;
+                }
+                var issuesToRemove = parseIssueList(bot.issueProject() == null ? "" : bot.issueProject().name(), args.substring(issueListStart));
+                for (var issue : issuesToRemove) {
+                    if (currentSolved.contains(issue.id())) {
+                        reply.println(SolvesTracker.removeSolvesMarker(issue));
+                        reply.println("Removing additional issue from solves list: `" + issue.id() + "`.");
+                    } else {
+                        reply.print("The issue `" + issue.id() + "` was not found in the list of additional solved issues. The list currently contains these issues: ");
+                        var currentList = currentSolved.stream()
+                                                       .map(id -> "`" + id + "`")
+                                                       .collect(Collectors.joining(", "));
+                        reply.println(currentList);
+                    }
+                }
+            } else {
+                var issues = parseIssueList(bot.issueProject() == null ? "" : bot.issueProject().name(), args);
+                if (issues.size() == 0) {
+                    showHelp(reply);
+                    return;
+                }
+                var validatedIssues = new ArrayList<Issue>();
+                for (var issue : issues) {
+                    try {
+                        if (bot.issueProject() == null) {
+                            if (issue.description() == null) {
+                                reply.print("This repository does not have an issue project configured - you will need to input the issue title manually ");
+                                reply.println("using the syntax `/solves " + issue.id() + ": title of the issue`.");
+                                return;
+                            } else {
+                                validatedIssues.add(issue);
+                                continue;
+                            }
+                        }
+                        var validatedIssue = bot.issueProject().issue(issue.id());
+                        if (validatedIssue.isEmpty()) {
+                            reply.println("The issue `" + issue.id() + "` was not found in the `" + bot.issueProject().name() + "` project - make sure you have entered it correctly.");
+                            continue;
+                        }
+                        if (validatedIssue.get().state() != org.openjdk.skara.issuetracker.Issue.State.OPEN) {
+                            reply.println("The issue [" + validatedIssue.get().id() + "](" + validatedIssue.get().webUrl() + ") isn't open - make sure you have selected the correct issue.");
+                            continue;
+                        }
+                        if (issue.description() == null) {
+                            validatedIssues.add(new Issue(validatedIssue.get().id(), validatedIssue.get().title()));
+                        } else {
+                            validatedIssues.add(new Issue(validatedIssue.get().id(), issue.description()));
+                        }
 
-        var issue = Issue.fromString(args);
-        if (issue.isEmpty()) {
-            issue = Issue.fromString(args + ": deleteme");
-            if (issue.isEmpty()) {
-                reply.println("Invalid command syntax.");
-                showHelp(reply);
-                return;
-            }
+                    } catch (RuntimeException e) {
+                        if (issue.description() == null) {
+                            reply.print("Temporary failure when trying to look up issue `" + issue.id() + "` - you will need to input the issue title manually ");
+                            reply.println("using the syntax `/solves " + issue.id() + ": title of the issue`.");
+                            return;
+                        } else {
+                            validatedIssues.add(issue);
+                        }
+                    }
+                }
+                if (validatedIssues.size() != issues.size()) {
+                    reply.println("As there were validation problems, no additional issues will be added to the list of solved issues.");
+                    return;
+                }
 
-            if (currentSolved.contains(issue.get().id())) {
-                reply.println(SolvesTracker.removeSolvesMarker(issue.get()));;
-                reply.println("Removing additional issue from solves list: `" + issue.get().id() + "`.");
-            } else {
-                reply.println("Could not find issue `" + issue.get().id() + "` in the list of additional solved issues.");
+                // Drop the validated project prefixes
+                var strippedValidatedIssues = validatedIssues.stream()
+                                                             .map(issue -> issue.id().contains("-") ? new Issue(issue.id().split("-", 2)[1], issue.description()) : issue)
+                                                             .collect(Collectors.toList());
+                var titleIssue = Issue.fromString(pr.title());
+                for (var issue : strippedValidatedIssues) {
+                    if (titleIssue.isEmpty()) {
+                        reply.print("The primary solved issue for a PR is set through the PR title. Since the current title does ");
+                        reply.println("not contain an issue reference, it will now be updated.");
+                        pr.setTitle(issue.toString());
+                        titleIssue = Optional.of(issue);
+                        continue;
+                    }
+                    if (titleIssue.get().id().equals(issue.id())) {
+                        reply.println("This issue is referenced in the PR title - it will now be updated.");
+                        pr.setTitle(issue.toString());
+                        continue;
+                    }
+                    reply.println(SolvesTracker.setSolvesMarker(issue));
+                    if (currentSolved.contains(issue.id())) {
+                        reply.println("Updating description of additional solved issue: `" + issue.toString() + "`.");
+                    } else {
+                        reply.println("Adding additional issue to solves list: `" + issue.toString() + "`.");
+                    }
+                }
             }
-            return;
-        }
 
-        var titleIssue = Issue.fromString(pr.title());
-        if (titleIssue.isEmpty()) {
-            reply.print("The primary solved issue for a PR is set through the PR title. Since the current title does ");
-            reply.println("not contain an issue reference, it will now be updated.");
-            pr.setTitle(issue.get().toString());
-            return;
-        }
-        if (titleIssue.get().id().equals(issue.get().id())) {
-            reply.println("This issue is referenced in the PR title - it will now be updated.");
-            pr.setTitle(issue.get().toString());
-            return;
-        }
-        reply.println(SolvesTracker.setSolvesMarker(issue.get()));
-        if (currentSolved.contains(issue.get().id())) {
-            reply.println("Updating description of additional solved issue: `" + issue.get().toString() + "`.");
-        } else {
-            reply.println("Adding additional issue to solves list: `" + issue.get().toString() + "`.");
+        } catch (InvalidIssue invalidIssue) {
+            reply.println("The issue identifier `" + invalidIssue.identifier() + "` is invalid: " + invalidIssue.reason() + ".");
         }
     }
 
     @Override
     public String description() {
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesTracker.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesTracker.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesTracker.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesTracker.java
@@ -44,14 +44,15 @@
         return String.format(solvesMarker, issue.id(), "");
     }
 
     static List<Issue> currentSolved(HostUser botUser, List<Comment> comments) {
         var solvesActions = comments.stream()
-                                     .filter(comment -> comment.author().equals(botUser))
-                                     .map(comment -> markerPattern.matcher(comment.body()))
-                                     .filter(Matcher::find)
-                                     .collect(Collectors.toList());
+                                    .filter(comment -> comment.author().equals(botUser))
+                                    .flatMap(comment -> comment.body().lines())
+                                    .map(markerPattern::matcher)
+                                    .filter(Matcher::find)
+                                    .collect(Collectors.toList());
         var current = new LinkedHashMap<String, Issue>();
         for (var action : solvesActions) {
             var key = action.group(1);
             if (action.group(2).equals("")) {
                 current.remove(key);
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/SolvesTests.java
@@ -63,35 +63,35 @@
             // No arguments
             pr.addComment("/solves");
             TestBotRunner.runPeriodicItems(prBot);
 
             // The bot should reply with a help message
-            assertLastCommentContains(pr,"To add an additional");
+            assertLastCommentContains(pr,"Command syntax");
 
             // Invalid syntax
             pr.addComment("/solves something I guess");
             TestBotRunner.runPeriodicItems(prBot);
 
             // The bot should reply with a failure message
-            assertLastCommentContains(pr,"Invalid");
+            assertLastCommentContains(pr,"Command syntax");
 
             // Add an issue
             pr.addComment("/solves 1234: An issue");
             TestBotRunner.runPeriodicItems(prBot);
 
             // The bot should reply with a success message
             assertLastCommentContains(pr,"Adding additional");
 
             // Try to remove a not-previously-added issue
-            pr.addComment("/solves 1235");
+            pr.addComment("/solves remove 1235");
             TestBotRunner.runPeriodicItems(prBot);
 
             // The bot should reply with a failure message
-            assertLastCommentContains(pr,"Could not find");
+            assertLastCommentContains(pr,"was not found");
 
             // Now remove the added one
-            pr.addComment("/solves 1234");
+            pr.addComment("/solves remove 1234");
             TestBotRunner.runPeriodicItems(prBot);
 
             // The bot should reply with a success message
             assertLastCommentContains(pr,"Removing additional");
 
@@ -148,10 +148,98 @@
                                  "",
                                  "Reviewed-by: integrationreviewer1"), headCommit.message());
         }
     }
 
+    @Test
+    void multiple(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+            var issues = credentials.getIssueProject();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addReviewer(integrator.forge().currentUser().id())
+                                           .addCommitter(author.forge().currentUser().id());
+            var prBot = PullRequestBot.newBuilder()
+                                      .repo(integrator)
+                                      .censusRepo(censusBuilder.build())
+                                      .issueProject(issues)
+                                      .build();
+
+            // Populate the projects repository
+            var localRepoFolder = tempFolder.path().resolve("localrepo");
+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.url(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "123: This is a pull request");
+
+            var issue1 = credentials.createIssue(issues, "First");
+            var issue1Number = Integer.parseInt(issue1.id().split("-")[1]);
+            var issue2 = credentials.createIssue(issues, "Second");
+            var issue2Number = Integer.parseInt(issue2.id().split("-")[1]);
+
+            // Add two issues with the shorthand syntax
+            pr.addComment("/solves " + issue1.id() + "," + issue2Number);
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should add both
+            assertLastCommentContains(pr, "Adding additional issue to solves list");
+            assertLastCommentContains(pr, ": First");
+            assertLastCommentContains(pr, ": Second");
+
+            // Remove one
+            pr.addComment("/solves remove " + issue1.id());
+            TestBotRunner.runPeriodicItems(prBot);
+
+            assertLastCommentContains(pr, "Removing additional issue from solves list: `" + issue1Number + "`");
+
+            // Approve it as another user
+            var approvalPr = integrator.pullRequest(pr.id());
+            approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
+            TestBotRunner.runPeriodicItems(prBot);
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The commit message preview should contain the additional issues
+            var preview = pr.comments().stream()
+                            .filter(comment -> comment.body().contains("the commit message will be"))
+                            .map(Comment::body)
+                            .findFirst()
+                            .orElseThrow();
+            assertTrue(preview.contains("123: This is a pull request"));
+            assertTrue(preview.contains(issue2Number + ": Second"));
+            assertFalse(preview.contains("First"));
+
+            // Integrate
+            pr.addComment("/integrate");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply with an ok message
+            assertLastCommentContains(pr,"Pushed as commit");
+
+            // The change should now be present on the master branch
+            var pushedFolder = tempFolder.path().resolve("pushed");
+            var pushedRepo = Repository.materialize(pushedFolder, author.url(), "master");
+            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));
+
+            var headHash = pushedRepo.resolve("HEAD").orElseThrow();
+            var headCommit = pushedRepo.commits(headHash.hex() + "^.." + headHash.hex()).asList().get(0);
+
+            // The additional issues should be present in the commit message
+            assertEquals(List.of("123: This is a pull request",
+                                 "2: Second",
+                                 "",
+                                 "Reviewed-by: integrationreviewer1"), headCommit.message());
+        }
+    }
+
     @Test
     void invalidCommandAuthor(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/IssueProject.java
@@ -31,6 +31,7 @@
     IssueTracker issueTracker();
     URI webUrl();
     Issue createIssue(String title, List<String> body, Map<String, JSONValue> properties);
     Optional<Issue> issue(String id);
     List<Issue> issues();
+    String name();
 }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
@@ -301,6 +301,11 @@
         for (var issue : issues.get("issues").asArray()) {
             ret.add(new JiraIssue(this, request, issue));
         }
         return ret;
     }
+
+    @Override
+    public String name() {
+        return projectName.toUpperCase();
+    }
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java b/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
--- a/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestIssueProject.java
@@ -68,6 +68,11 @@
 
     @Override
     public List<Issue> issues() {
         return new ArrayList<>(host.getIssues(this));
     }
+
+    @Override
+    public String name() {
+        return projectName.toUpperCase();
+    }
 }
