diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
@@ -103,11 +103,11 @@
     }
 
     @Override
     public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
         if (!comment.author().equals(pr.author())) {
-            reply.println("Only the author (@" + pr.author().userName() + ") is allowed to issue the `solves` command.");
+            reply.println("Only the author (@" + pr.author().userName() + ") is allowed to issue the `/" + name + "` command.");
             return;
         }
         if (args.isBlank()) {
             showHelp(reply);
             return;
@@ -135,11 +135,11 @@
                 }
                 var issuesToRemove = parseIssueList(bot.issueProject() == null ? "" : bot.issueProject().name(), args.substring(issueListStart));
                 for (var issue : issuesToRemove) {
                     if (currentSolved.contains(issue.id())) {
                         reply.println(SolvesTracker.removeSolvesMarker(issue));
-                        reply.println("Removing additional issue from solves list: `" + issue.id() + "`.");
+                        reply.println("Removing additional issue from " + name + " list: `" + issue.id() + "`.");
                     } else {
                         reply.print("The issue `" + issue.id() + "` was not found in the list of additional solved issues. The list currently contains these issues: ");
                         var currentList = currentSolved.stream()
                                                        .map(id -> "`" + id + "`")
                                                        .collect(Collectors.joining(", "));
@@ -164,11 +164,11 @@
                 for (var issue : issues) {
                     try {
                         if (bot.issueProject() == null) {
                             if (issue.description() == null) {
                                 reply.print("This repository does not have an issue project configured - you will need to input the issue title manually ");
-                                reply.println("using the syntax `/solves " + issue.id() + ": title of the issue`.");
+                                reply.println("using the syntax `/" + name + " " + issue.id() + ": title of the issue`.");
                                 return;
                             } else {
                                 validatedIssues.add(issue);
                                 continue;
                             }
@@ -189,11 +189,11 @@
                         }
 
                     } catch (RuntimeException e) {
                         if (issue.description() == null) {
                             reply.print("Temporary failure when trying to look up issue `" + issue.id() + "` - you will need to input the issue title manually ");
-                            reply.println("using the syntax `/solves " + issue.id() + ": title of the issue`.");
+                            reply.println("using the syntax `/" + name + " " + issue.id() + ": title of the issue`.");
                             return;
                         } else {
                             validatedIssues.add(issue);
                         }
                     }
@@ -223,11 +223,11 @@
                     }
                     reply.println(SolvesTracker.setSolvesMarker(issue));
                     if (currentSolved.contains(issue.id())) {
                         reply.println("Updating description of additional solved issue: `" + issue.toString() + "`.");
                     } else {
-                        reply.println("Adding additional issue to solves list: `" + issue.toString() + "`.");
+                        reply.println("Adding additional issue to " + name + " list: `" + issue.toString() + "`.");
                     }
                 }
             }
 
         } catch (InvalidIssue invalidIssue) {
