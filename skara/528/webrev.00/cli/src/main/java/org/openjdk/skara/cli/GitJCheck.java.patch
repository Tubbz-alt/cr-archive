diff a/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java b/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
@@ -161,12 +161,13 @@
             Logging.setup(level, "jcheck");
         }
 
         HttpProxy.setup();
 
+        var isMercurial = getSwitch("mercurial", arguments);
         var setupPrePushHooksOption = getOption("setup-pre-push-hooks", arguments);
-        if (setupPrePushHooksOption != null) {
+        if (!isMercurial && setupPrePushHooksOption != null) {
             var hookFile = repo.root().resolve(".git").resolve("hooks").resolve("pre-push");
             Files.createDirectories(hookFile.getParent());
             var lines = List.of(
                 "#!/usr/bin/sh",
                 "git jcheck --pre-push --push-url=\"$2\""
@@ -191,15 +192,14 @@
                 }
             }
             return 0;
         }
 
-        var isMercurial = getSwitch("mercurial", arguments);
         var isPrePush = getSwitch("pre-push", arguments);
         var ranges = new ArrayList<String>();
         var targetBranches = new HashSet<String>();
-        if (isPrePush) {
+        if (!isMercurial && isPrePush) {
             var reader = new BufferedReader(new InputStreamReader(System.in));
             var lines = reader.lines().collect(Collectors.toList());
             for (var line : lines) {
                 var parts = line.split(" ");
                 var localHash = new Hash(parts[1]);
@@ -279,11 +279,11 @@
             }
         }
 
         var lines = repo.config("jcheck.pre-push.branches");
         var shouldCheckRemoteBranches = lines.size() == 1 && lines.get(0).toLowerCase().equals("true");
-        if (isPrePush && shouldCheckRemoteBranches &&
+        if (!isMercurial && isPrePush && shouldCheckRemoteBranches &&
             !Files.exists(repo.root().resolve(".git").resolve("GIT_SYNC_RUNNING"))) {
             var url = arguments.get("push-url").asString();
             if (url == null) {
                 System.err.println("error: url for push not provided via --url option");
                 return 1;
@@ -320,16 +320,17 @@
             if (displayedError) {
                 return 1;
             }
         }
 
-        var visitor = new JCheckCLIVisitor(ignore);
+        var visitor = new JCheckCLIVisitor(ignore, isMercurial);
         lines = repo.config("jcheck.pre-push.commits");
         var shouldCheckCommits = lines.size() == 1 && lines.get(0).toLowerCase().equals("true");
+        var commitMessageParser = isMercurial ? CommitMessageParsers.v0 : CommitMessageParsers.v1;
         if (!isPrePush || shouldCheckCommits) {
             for (var range : ranges) {
-                try (var errors = JCheck.check(repo, census, CommitMessageParsers.v1, range, whitelist, blacklist)) {
+                try (var errors = JCheck.check(repo, census, commitMessageParser, range, whitelist, blacklist)) {
                     for (var error : errors) {
                         error.accept(visitor);
                     }
                 }
             }
