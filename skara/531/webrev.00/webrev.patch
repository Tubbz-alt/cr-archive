diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -607,20 +607,20 @@
 
             var commit = prInstance.localRepo().lookup(localHash).orElseThrow();
             var commitMessage = String.join("\n", commit.message());
             var readyForIntegration = visitor.getMessages().isEmpty() && additionalErrors.isEmpty();
             updateMergeReadyComment(readyForIntegration, commitMessage, comments, activeReviews, rebasePossible);
-            if (readyForIntegration) {
+            if (readyForIntegration && rebasePossible) {
                 newLabels.add("ready");
             } else {
                 newLabels.remove("ready");
             }
             if (!rebasePossible) {
                 addOutdatedComment(comments);
-                newLabels.add("outdated");
+                newLabels.add("merge-conflict");
             } else {
-                newLabels.remove("outdated");
+                newLabels.remove("merge-conflict");
             }
 
             // Ensure that the ready for sponsor label is up to date
             newLabels.remove("sponsor");
             var readyHash = ReadyForSponsorTracker.latestReadyForSponsor(pr.repository().forge().currentUser(), comments);
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -562,10 +562,11 @@
             var approvalPr = integrator.pullRequest(pr.id());
             approvalPr.addReview(Review.Verdict.APPROVED, "Approved");
 
             // Get all messages up to date
             TestBotRunner.runPeriodicItems(mergeBot);
+            assertTrue(pr.labels().contains("ready"));
 
             // Push something conflicting to master
             localRepo.checkout(masterHash, true);
             var conflictingHash = CheckableRepository.appendAndCommit(localRepo, "This looks like a conflict");
             localRepo.push(conflictingHash, author.url(), "master");
@@ -579,11 +580,12 @@
                             .filter(comment -> comment.body().contains("cannot be rebased automatically"))
                             .count();
             assertEquals(1, updated);
 
             // The PR should be flagged as outdated
-            assertTrue(pr.labels().contains("outdated"));
+            assertTrue(pr.labels().contains("merge-conflict"));
+            assertFalse(pr.labels().contains("ready"));
 
             // An instructional message should have been bosted
             var help = pr.comments().stream()
                          .filter(comment -> comment.body().contains("To resolve these merge conflicts"))
                          .count();
@@ -606,11 +608,12 @@
                         .filter(comment -> comment.body().contains("change now passes all automated"))
                         .count();
             assertEquals(1, updated);
 
             // The PR should not be flagged as outdated
-            assertFalse(pr.labels().contains("outdated"));
+            assertFalse(pr.labels().contains("merge-conflict"));
+            assertTrue(pr.labels().contains("ready"));
         }
     }
 
     @Test
     void blockingLabel(TestInfo testInfo) throws IOException {
diff a/cli/src/main/java/org/openjdk/skara/cli/pr/Utils.java b/cli/src/main/java/org/openjdk/skara/cli/pr/Utils.java
--- a/cli/src/main/java/org/openjdk/skara/cli/pr/Utils.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/pr/Utils.java
@@ -158,12 +158,12 @@
             return "INTEGRATED";
         } else if (labels.contains("ready")) {
             return "READY";
         } else if (labels.contains("rfr")) {
             return "RFR";
-        } else if (labels.contains("outdated")) {
-            return "OUTDATED";
+        } else if (labels.contains("merge-conflict")) {
+            return "CONFLICT";
         } else if (labels.contains("oca")) {
             return "OCA";
         } else {
             var checks = pr.checks(pr.headHash());
             var jcheck = Optional.ofNullable(checks.get("jcheck"));
