diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
@@ -8,10 +8,11 @@
 import java.io.IOException;
 import java.net.URI;
 import java.time.ZonedDateTime;
 import java.util.*;
 import java.util.function.Supplier;
+import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 class ArchiveItem {
     private final String id;
     private final ZonedDateTime created;
@@ -104,20 +105,43 @@
                                () -> ArchiveMessages.composeReplyHeader(parent.createdAt(), hostUserToEmailAuthor.author(parent.author())),
                                () -> ArchiveMessages.composeReviewComment(pr, reviewComment) ,
                                () -> ArchiveMessages.composeReplyFooter(pr));
     }
 
+    private static Pattern mentionPattern = Pattern.compile("^@([\\w-]+).*");
+
+    private static Optional<ArchiveItem> findLastMention(String commentText, List<ArchiveItem> eligibleParents) {
+        var mentionMatcher = mentionPattern.matcher(commentText);
+        if (mentionMatcher.matches()) {
+            var username = mentionMatcher.group(1);
+            for (int i = eligibleParents.size() - 1; i != 0; --i) {
+                if (eligibleParents.get(i).author.userName().equals(username)) {
+                    return Optional.of(eligibleParents.get(i));
+                }
+            }
+        }
+        return Optional.empty();
+    }
+
     static ArchiveItem findParent(List<ArchiveItem> generated, Comment comment) {
         ArchiveItem lastCommentOrReview = generated.get(0);
+        var eligible = new ArrayList<ArchiveItem>();
+        eligible.add(lastCommentOrReview);
         for (var item : generated) {
             if (item.id().startsWith("pc") || item.id().startsWith("rv")) {
                 if (item.createdAt().isBefore(comment.createdAt()) && item.createdAt().isAfter(lastCommentOrReview.createdAt())) {
                     lastCommentOrReview = item;
+                    eligible.add(lastCommentOrReview);
                 }
             }
         }
 
+        var lastMention = findLastMention(comment.body(), eligible);
+        if (lastMention.isPresent()) {
+            return lastMention.get();
+        }
+
         return lastCommentOrReview;
     }
 
     static ArchiveItem findRevisionItem(List<ArchiveItem> generated, Hash hash) {
         // Parent is revision update mail with the hash
@@ -152,21 +176,28 @@
         var threadId = reviewComment.threadId();
         var reviewThread = reviewComments.stream()
                                          .filter(comment -> comment.threadId().equals(threadId))
                                          .collect(Collectors.toList());
         ReviewComment previousComment = null;
+        var eligible = new ArrayList<ArchiveItem>();
         for (var threadComment : reviewThread) {
             if (threadComment.equals(reviewComment)) {
                 break;
             }
             previousComment = threadComment;
+            eligible.add(findReviewCommentItem(generated, previousComment));
         }
 
         if (previousComment == null) {
             return findRevisionItem(generated, reviewComment.hash());
         } else {
-            return findReviewCommentItem(generated, previousComment);
+            var mentionedParent = findLastMention(reviewComment.body(), eligible);
+            if (mentionedParent.isPresent()) {
+                return mentionedParent.get();
+            } else {
+                return eligible.get(eligible.size() - 1);
+            }
         }
     }
 
     String id() {
         return id;
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -648,10 +648,139 @@
             Repository.materialize(archiveFolder.path(), archive.url(), "master");
             assertEquals(2, archiveContainsCount(archiveFolder.path(), "^On.*wrote:"));
         }
     }
 
+    @Test
+    void commentWithMention(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory();
+             var archiveFolder = new TemporaryDirectory();
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
+            var author = credentials.getHostedRepository();
+            var reviewer = credentials.getHostedRepository();
+            var archive = credentials.getHostedRepository();
+            var listAddress = EmailAddress.parse(listServer.createList("test"));
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addReviewer(reviewer.forge().currentUser().id())
+                                           .addAuthor(author.forge().currentUser().id());
+            var from = EmailAddress.from("test", "test@test.mail");
+            var mlBot = MailingListBridgeBot.newBuilder()
+                                            .from(from)
+                                            .repo(author)
+                                            .archive(archive)
+                                            .censusRepo(censusBuilder.build())
+                                            .list(listAddress)
+                                            .listArchive(listServer.getArchive())
+                                            .smtpServer(listServer.getSMTP())
+                                            .webrevStorageRepository(archive)
+                                            .webrevStorageRef("webrev")
+                                            .webrevStorageBase(Path.of("test"))
+                                            .webrevStorageBaseUri(webrevServer.uri())
+                                            .issueTracker(URIBuilder.base("http://issues.test/browse/").build())
+                                            .build();
+
+            // Populate the projects repository
+            var reviewFile = Path.of("reviewfile.txt");
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), reviewFile);
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            localRepo.push(masterHash, author.url(), "master", true);
+            localRepo.push(masterHash, archive.url(), "webrev", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
+            pr.setBody("This is now ready");
+            TestBotRunner.runPeriodicItems(mlBot);
+            listServer.processIncoming();
+
+            // Make two comments from different authors
+            var reviewPr = reviewer.pullRequest(pr.id());
+            reviewPr.addComment("First comment");
+            pr.addComment("Second comment");
+
+            TestBotRunner.runPeriodicItems(mlBot);
+            listServer.processIncoming();
+
+            pr.addComment("@" + reviewer.forge().currentUser().userName() + " reply to first");
+            TestBotRunner.runPeriodicItems(mlBot);
+            listServer.processIncoming();
+
+            // The first comment should be quoted more often than the second
+            Repository.materialize(archiveFolder.path(), archive.url(), "master");
+            assertEquals(3, archiveContainsCount(archiveFolder.path(), "First comment"));
+            assertEquals(1, archiveContainsCount(archiveFolder.path(), "Second comment"));
+        }
+    }
+
+    @Test
+    void reviewCommentWithMention(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory();
+             var archiveFolder = new TemporaryDirectory();
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
+            var author = credentials.getHostedRepository();
+            var reviewer = credentials.getHostedRepository();
+            var archive = credentials.getHostedRepository();
+            var listAddress = EmailAddress.parse(listServer.createList("test"));
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addReviewer(reviewer.forge().currentUser().id())
+                                           .addAuthor(author.forge().currentUser().id());
+            var from = EmailAddress.from("test", "test@test.mail");
+            var mlBot = MailingListBridgeBot.newBuilder()
+                                            .from(from)
+                                            .repo(author)
+                                            .archive(archive)
+                                            .censusRepo(censusBuilder.build())
+                                            .list(listAddress)
+                                            .listArchive(listServer.getArchive())
+                                            .smtpServer(listServer.getSMTP())
+                                            .webrevStorageRepository(archive)
+                                            .webrevStorageRef("webrev")
+                                            .webrevStorageBase(Path.of("test"))
+                                            .webrevStorageBaseUri(webrevServer.uri())
+                                            .issueTracker(URIBuilder.base("http://issues.test/browse/").build())
+                                            .build();
+
+            // Populate the projects repository
+            var reviewFile = Path.of("reviewfile.txt");
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), reviewFile);
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            localRepo.push(masterHash, author.url(), "master", true);
+            localRepo.push(masterHash, archive.url(), "webrev", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(archive, "master", "edit", "This is a pull request");
+            pr.setBody("This is now ready");
+            TestBotRunner.runPeriodicItems(mlBot);
+            listServer.processIncoming();
+
+            // Make two review comments from different authors
+            var reviewPr = reviewer.pullRequest(pr.id());
+            var comment = reviewPr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, "Review comment");
+            reviewPr.addReviewCommentReply(comment, "First review comment");
+            pr.addReviewCommentReply(comment, "Second review comment");
+
+            TestBotRunner.runPeriodicItems(mlBot);
+            listServer.processIncoming();
+
+            pr.addReviewCommentReply(comment, "@" + reviewer.forge().currentUser().userName() + " reply to first");
+            TestBotRunner.runPeriodicItems(mlBot);
+            listServer.processIncoming();
+
+            // The first comment should be quoted more often than the second
+            Repository.materialize(archiveFolder.path(), archive.url(), "master");
+            assertEquals(3, archiveContainsCount(archiveFolder.path(), "First review comment"));
+            assertEquals(1, archiveContainsCount(archiveFolder.path(), "Second review comment"));
+        }
+    }
+
     @Test
     void reviewContext(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
