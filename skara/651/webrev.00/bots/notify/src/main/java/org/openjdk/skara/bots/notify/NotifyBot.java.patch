diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
@@ -29,37 +29,34 @@
 import java.nio.file.Path;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
-public class NotifyBot implements Bot {
+public class NotifyBot implements Bot, Emitter {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
     private final HostedRepository repository;
     private final Path storagePath;
     private final Pattern branches;
     private final StorageBuilder<UpdatedTag> tagStorageBuilder;
     private final StorageBuilder<UpdatedBranch> branchStorageBuilder;
     private final StorageBuilder<PullRequestState> prStateStorageBuilder;
-    private final List<RepositoryUpdateConsumer> updaters;
-    private final List<PullRequestUpdateConsumer> prUpdaters;
+    private final List<RepositoryListener> repoListeners = new ArrayList<>();
+    private final List<PullRequestListener> prListeners = new ArrayList<>();
     private final PullRequestUpdateCache updateCache;
     private final Set<String> readyLabels;
     private final Map<String, Pattern> readyComments;
     private final String integratorId;
 
     NotifyBot(HostedRepository repository, Path storagePath, Pattern branches, StorageBuilder<UpdatedTag> tagStorageBuilder,
               StorageBuilder<UpdatedBranch> branchStorageBuilder, StorageBuilder<PullRequestState> prStateStorageBuilder,
-              List<RepositoryUpdateConsumer> updaters, List<PullRequestUpdateConsumer> prUpdaters,
               Set<String> readyLabels, Map<String, Pattern> readyComments, String integratorId) {
         this.repository = repository;
         this.storagePath = storagePath;
         this.branches = branches;
         this.tagStorageBuilder = tagStorageBuilder;
         this.branchStorageBuilder = branchStorageBuilder;
         this.prStateStorageBuilder = prStateStorageBuilder;
-        this.updaters = updaters;
-        this.prUpdaters = prUpdaters;
         this.updateCache = new PullRequestUpdateCache();
         this.readyLabels = readyLabels;
         this.readyComments = readyComments;
         this.integratorId = integratorId;
     }
@@ -96,10 +93,20 @@
             }
         }
         return true;
     }
 
+    @Override
+    public void registerPullRequestListener(PullRequestListener listener) {
+        prListeners.add(listener);
+    }
+
+    @Override
+    public void registerRepositoryListener(RepositoryListener listener) {
+        repoListeners.add(listener);
+    }
+
     @Override
     public String toString() {
         return "JNotifyBot@" + repository.name();
     }
 
@@ -114,17 +121,17 @@
                 if (!isReady(pr)) {
                     continue;
                 }
                 ret.add(new PullRequestWorkItem(pr,
                                                 prStateStorageBuilder,
-                                                prUpdaters,
+                                                prListeners,
                                                 e -> updateCache.invalidate(pr),
                                                 integratorId));
             }
         }
 
         // Repository events
-        ret.add(new RepositoryWorkItem(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, updaters));
+        ret.add(new RepositoryWorkItem(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, repoListeners));
 
         return ret;
     }
 }
