diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -50,17 +50,17 @@
     public static StorageBuilder<PullRequestState> createPullRequestStateStorage(HostedRepository repository) {
         return new StorageBuilder<PullRequestState>("prissues.txt")
                 .remoteRepository(repository, "history", "Duke", "duke@openjdk.java.net", "Updated prissues");
     }
 
-    private static class TestRepositoryUpdateConsumer implements RepositoryUpdateConsumer {
+    private static class TestRepositoryListener implements Notifier, RepositoryListener {
         private final String name;
         private final boolean idempotent;
         private int updateCount = 0;
         private boolean shouldFail = false;
 
-        TestRepositoryUpdateConsumer(String name, boolean idempotent) {
+        TestRepositoryListener(String name, boolean idempotent) {
             this.name = name;
             this.idempotent = idempotent;
         }
 
         @Override
@@ -96,10 +96,15 @@
 
         @Override
         public String name() {
             return name;
         }
+
+        @Override
+        public void attachTo(Emitter e) {
+            e.registerRepositoryListener(this);
+        }
     }
 
     @Test
     void testIdempotenceMix(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
@@ -113,22 +118,25 @@
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
-            var idempotent = new TestRepositoryUpdateConsumer("i", true);
-            var nonIdempotent = new TestRepositoryUpdateConsumer("ni", false);
             var notifyBot = NotifyBot.newBuilder()
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(idempotent, nonIdempotent))
                                      .build();
 
+            var idempotent = new TestRepositoryListener("i", true);
+            idempotent.attachTo(notifyBot);
+
+            var nonIdempotent = new TestRepositoryListener("ni", false);
+            nonIdempotent.attachTo(notifyBot);
+
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix stuff");
