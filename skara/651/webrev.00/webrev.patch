diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/Emitter.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/Emitter.java
--- /dev/null
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/Emitter.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package org.openjdk.skara.bots.notify;
+
+public interface Emitter {
+    void registerPullRequestListener(PullRequestListener listener);
+    void registerRepositoryListener(RepositoryListener listener);
+}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/Notifier.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/Notifier.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/Notifier.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/Notifier.java
@@ -24,17 +24,17 @@
 
 import org.openjdk.skara.bot.BotConfiguration;
 import org.openjdk.skara.json.JSONObject;
 
 public interface Notifier {
-    String name();
-
     static Notifier create(String name, BotConfiguration botConfiguration, JSONObject notifierConfiguration) {
         var factory = NotifierFactory.getNotifierFactories().stream()
                 .filter(f -> f.name().equals(name))
                 .findFirst();
         if (factory.isEmpty()) {
             throw new RuntimeException("No notifier factory named '" + name + "' found - check module path");
         }
         return factory.get().create(botConfiguration, notifierConfiguration);
     }
+
+    void attachTo(Emitter e);
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
@@ -29,37 +29,34 @@
 import java.nio.file.Path;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
-public class NotifyBot implements Bot {
+public class NotifyBot implements Bot, Emitter {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
     private final HostedRepository repository;
     private final Path storagePath;
     private final Pattern branches;
     private final StorageBuilder<UpdatedTag> tagStorageBuilder;
     private final StorageBuilder<UpdatedBranch> branchStorageBuilder;
     private final StorageBuilder<PullRequestState> prStateStorageBuilder;
-    private final List<RepositoryUpdateConsumer> updaters;
-    private final List<PullRequestUpdateConsumer> prUpdaters;
+    private final List<RepositoryListener> repoListeners = new ArrayList<>();
+    private final List<PullRequestListener> prListeners = new ArrayList<>();
     private final PullRequestUpdateCache updateCache;
     private final Set<String> readyLabels;
     private final Map<String, Pattern> readyComments;
     private final String integratorId;
 
     NotifyBot(HostedRepository repository, Path storagePath, Pattern branches, StorageBuilder<UpdatedTag> tagStorageBuilder,
               StorageBuilder<UpdatedBranch> branchStorageBuilder, StorageBuilder<PullRequestState> prStateStorageBuilder,
-              List<RepositoryUpdateConsumer> updaters, List<PullRequestUpdateConsumer> prUpdaters,
               Set<String> readyLabels, Map<String, Pattern> readyComments, String integratorId) {
         this.repository = repository;
         this.storagePath = storagePath;
         this.branches = branches;
         this.tagStorageBuilder = tagStorageBuilder;
         this.branchStorageBuilder = branchStorageBuilder;
         this.prStateStorageBuilder = prStateStorageBuilder;
-        this.updaters = updaters;
-        this.prUpdaters = prUpdaters;
         this.updateCache = new PullRequestUpdateCache();
         this.readyLabels = readyLabels;
         this.readyComments = readyComments;
         this.integratorId = integratorId;
     }
@@ -96,10 +93,20 @@
             }
         }
         return true;
     }
 
+    @Override
+    public void registerPullRequestListener(PullRequestListener listener) {
+        prListeners.add(listener);
+    }
+
+    @Override
+    public void registerRepositoryListener(RepositoryListener listener) {
+        repoListeners.add(listener);
+    }
+
     @Override
     public String toString() {
         return "JNotifyBot@" + repository.name();
     }
 
@@ -114,17 +121,17 @@
                 if (!isReady(pr)) {
                     continue;
                 }
                 ret.add(new PullRequestWorkItem(pr,
                                                 prStateStorageBuilder,
-                                                prUpdaters,
+                                                prListeners,
                                                 e -> updateCache.invalidate(pr),
                                                 integratorId));
             }
         }
 
         // Repository events
-        ret.add(new RepositoryWorkItem(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, updaters));
+        ret.add(new RepositoryWorkItem(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, repoListeners));
 
         return ret;
     }
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java
@@ -34,12 +34,10 @@
     private Path storagePath;
     private Pattern branches;
     private StorageBuilder<UpdatedTag> tagStorageBuilder;
     private StorageBuilder<UpdatedBranch> branchStorageBuilder;
     private StorageBuilder<PullRequestState> prStateStorageBuilder;
-    private List<RepositoryUpdateConsumer> updaters = List.of();
-    private List<PullRequestUpdateConsumer> prUpdaters = List.of();
     private Set<String> readyLabels = Set.of();
     private Map<String, Pattern> readyComments = Map.of();
     private String integratorId;
 
     public NotifyBotBuilder repository(HostedRepository repository) {
@@ -70,20 +68,10 @@
     public NotifyBotBuilder prStateStorageBuilder(StorageBuilder<PullRequestState> prStateStorageBuilder) {
         this.prStateStorageBuilder = prStateStorageBuilder;
         return this;
     }
 
-    public NotifyBotBuilder updaters(List<RepositoryUpdateConsumer> updaters) {
-        this.updaters = updaters;
-        return this;
-    }
-
-    public NotifyBotBuilder prUpdaters(List<PullRequestUpdateConsumer> prUpdaters) {
-        this.prUpdaters = prUpdaters;
-        return this;
-    }
-
     public NotifyBotBuilder readyLabels(Set<String> readyLabels) {
         this.readyLabels = readyLabels;
         return this;
     }
 
@@ -96,8 +84,8 @@
         this.integratorId = integratorId;
         return this;
     }
 
     public NotifyBot build() {
-        return new NotifyBot(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, prStateStorageBuilder, updaters, prUpdaters, readyLabels, readyComments, integratorId);
+        return new NotifyBot(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, prStateStorageBuilder, readyLabels, readyComments, integratorId);
     }
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
@@ -87,38 +87,10 @@
             var branchPattern = Pattern.compile("^master$");
             if (repo.value().contains("branches")) {
                 branchPattern = Pattern.compile(repo.value().get("branches").asString());
             }
 
-            var updaters = new ArrayList<RepositoryUpdateConsumer>();
-            var prUpdaters = new ArrayList<PullRequestUpdateConsumer>();
-
-            for (var notifierFactory : notifierFactories) {
-                if (repo.value().contains(notifierFactory.name())) {
-                    var confArray = repo.value().get(notifierFactory.name());
-                    if (!confArray.isArray()) {
-                        confArray = JSON.array().add(confArray);
-                    }
-                    for (var conf : confArray.asArray()) {
-                        var finalConfiguration = combineConfiguration(notifierConfiguration.get(notifierFactory.name()), conf.asObject());
-                        var notifier = Notifier.create(notifierFactory.name(), configuration, finalConfiguration);
-                        log.info("Configuring notifier " + notifierFactory.name() + " for repository " + repoName);
-                        if (notifier instanceof PullRequestUpdateConsumer) {
-                            prUpdaters.add((PullRequestUpdateConsumer)notifier);
-                        }
-                        if (notifier instanceof RepositoryUpdateConsumer) {
-                            updaters.add((RepositoryUpdateConsumer)notifier);
-                        }
-                    }
-                }
-            }
-
-            if (updaters.isEmpty() && prUpdaters.isEmpty()) {
-                log.warning("No notifiers configured for notify bot repository: " + repoName);
-                continue;
-            }
-
             var baseName = repo.value().contains("basename") ? repo.value().get("basename").asString() : configuration.repositoryName(repoName);
 
             var tagStorageBuilder = new StorageBuilder<UpdatedTag>(baseName + ".tags.txt")
                     .remoteRepository(databaseRepo, databaseRef, databaseName, databaseEmail, "Added tag for " + repoName);
             var branchStorageBuilder = new StorageBuilder<UpdatedBranch>(baseName + ".branches.txt")
@@ -130,16 +102,37 @@
                                .storagePath(configuration.storageFolder())
                                .branches(branchPattern)
                                .tagStorageBuilder(tagStorageBuilder)
                                .branchStorageBuilder(branchStorageBuilder)
                                .prStateStorageBuilder(prStateStorageBuilder)
-                               .updaters(updaters)
-                               .prUpdaters(prUpdaters)
                                .readyLabels(readyLabels)
                                .readyComments(readyComments)
                                .integratorId(integratorId)
                                .build();
+
+            var hasAttachedNotifier = false;
+            for (var notifierFactory : notifierFactories) {
+                if (repo.value().contains(notifierFactory.name())) {
+                    var confArray = repo.value().get(notifierFactory.name());
+                    if (!confArray.isArray()) {
+                        confArray = JSON.array().add(confArray);
+                    }
+                    for (var conf : confArray.asArray()) {
+                        var finalConfiguration = combineConfiguration(notifierConfiguration.get(notifierFactory.name()), conf.asObject());
+                        var notifier = Notifier.create(notifierFactory.name(), configuration, finalConfiguration);
+                        log.info("Configuring notifier " + notifierFactory.name() + " for repository " + repoName);
+                        notifier.attachTo(bot);
+                        hasAttachedNotifier = true;
+                    }
+                }
+            }
+
+            if (!hasAttachedNotifier) {
+                log.warning("No notifiers configured for notify bot repository: " + repoName);
+                continue;
+            }
+
             ret.add(bot);
         }
 
         return ret;
     }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestListener.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestListener.java
--- /dev/null
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestListener.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.notify;
+
+import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.vcs.Hash;
+import org.openjdk.skara.vcs.openjdk.Issue;
+
+public interface PullRequestListener {
+    default void handleNewIssue(PullRequest pr, Issue issue) {
+    }
+    default void handleRemovedIssue(PullRequest pr, Issue issue) {
+    }
+    default void handleNewPullRequest(PullRequest pr) {
+    }
+    default void handleIntegratedPullRequest(PullRequest pr, Hash hash) {
+    }
+}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.bots.notify;
-
-import org.openjdk.skara.forge.PullRequest;
-import org.openjdk.skara.vcs.Hash;
-import org.openjdk.skara.vcs.openjdk.Issue;
-
-public interface PullRequestUpdateConsumer extends Notifier {
-    default void handleNewIssue(PullRequest pr, Issue issue) {
-    }
-    default void handleRemovedIssue(PullRequest pr, Issue issue) {
-    }
-    default void handleNewPullRequest(PullRequest pr) {
-    }
-    default void handleIntegratedPullRequest(PullRequest pr, Hash hash) {
-    }
-}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
@@ -36,18 +36,18 @@
 import java.util.stream.*;
 
 public class PullRequestWorkItem implements WorkItem {
     private final PullRequest pr;
     private final StorageBuilder<PullRequestState> prStateStorageBuilder;
-    private final List<PullRequestUpdateConsumer> pullRequestUpdateConsumers;
+    private final List<PullRequestListener> listeners;
     private final Consumer<RuntimeException> errorHandler;
     private final String integratorId;
 
-    PullRequestWorkItem(PullRequest pr, StorageBuilder<PullRequestState> prStateStorageBuilder, List<PullRequestUpdateConsumer> pullRequestUpdateConsumers, Consumer<RuntimeException> errorHandler, String integratorId) {
+    PullRequestWorkItem(PullRequest pr, StorageBuilder<PullRequestState> prStateStorageBuilder, List<PullRequestListener> listeners, Consumer<RuntimeException> errorHandler, String integratorId) {
         this.pr = pr;
         this.prStateStorageBuilder = prStateStorageBuilder;
-        this.pullRequestUpdateConsumers = pullRequestUpdateConsumers;
+        this.listeners = listeners;
         this.errorHandler = errorHandler;
         this.integratorId = integratorId;
     }
 
     private Hash resultingCommitHashFor(PullRequest pr) {
@@ -154,24 +154,24 @@
             return true;
         }
         return false;
     }
 
-    private void notifyListenersAdded(String issueId) {
-        pullRequestUpdateConsumers.forEach(c -> c.handleNewIssue(pr, new Issue(issueId, "")));
+    private void notifyNewIssue(String issueId) {
+        listeners.forEach(c -> c.handleNewIssue(pr, new Issue(issueId, "")));
     }
 
-    private void notifyListenersRemoved(String issueId) {
-        pullRequestUpdateConsumers.forEach(c -> c.handleRemovedIssue(pr, new Issue(issueId, "")));
+    private void notifyRemovedIssue(String issueId) {
+        listeners.forEach(c -> c.handleRemovedIssue(pr, new Issue(issueId, "")));
     }
 
     private void notifyNewPr(PullRequest pr) {
-        pullRequestUpdateConsumers.forEach(c -> c.handleNewPullRequest(pr));
+        listeners.forEach(c -> c.handleNewPullRequest(pr));
     }
 
     private void notifyIntegratedPr(PullRequest pr, Hash hash) {
-        pullRequestUpdateConsumers.forEach(c -> c.handleIntegratedPullRequest(pr, hash));
+        listeners.forEach(c -> c.handleIntegratedPullRequest(pr, hash));
     }
 
     @Override
     public Collection<WorkItem> run(Path scratchPath) {
         var historyPath = scratchPath.resolve("notify").resolve("history");
@@ -195,22 +195,22 @@
                 .findAny();
         if (storedState.isPresent()) {
             var storedIssues = storedState.get().issueIds();
             storedIssues.stream()
                         .filter(issue -> !issues.contains(issue))
-                        .forEach(this::notifyListenersRemoved);
+                        .forEach(this::notifyRemovedIssue);
             issues.stream()
                   .filter(issue -> !storedIssues.contains(issue))
-                  .forEach(this::notifyListenersAdded);
+                  .forEach(this::notifyNewIssue);
 
             var storedCommit = storedState.get().commitId();
             if (!storedCommit.isPresent() && state.commitId().isPresent()) {
                 notifyIntegratedPr(pr, state.commitId().get());
             }
         } else {
             notifyNewPr(pr);
-            issues.forEach(this::notifyListenersAdded);
+            issues.forEach(this::notifyNewIssue);
             if (state.commitId().isPresent()) {
                 notifyIntegratedPr(pr, state.commitId().get());
             }
         }
 
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryListener.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryListener.java
--- /dev/null
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryListener.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.notify;
+
+import org.openjdk.skara.forge.HostedRepository;
+import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.vcs.openjdk.OpenJDKTag;
+
+import java.util.List;
+
+public interface RepositoryListener {
+    default void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
+    }
+    default void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) throws NonRetriableException {
+    }
+    default void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) throws NonRetriableException {
+    }
+    default void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) throws NonRetriableException {
+    }
+    String name();
+}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.bots.notify;
-
-import org.openjdk.skara.forge.HostedRepository;
-import org.openjdk.skara.vcs.*;
-import org.openjdk.skara.vcs.openjdk.OpenJDKTag;
-
-import java.util.List;
-
-public interface RepositoryUpdateConsumer extends Notifier {
-    default void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
-    }
-    default void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) throws NonRetriableException {
-    }
-    default void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) throws NonRetriableException {
-    }
-    default void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) throws NonRetriableException {
-    }
-    String name();
-}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
@@ -40,22 +40,22 @@
     private final HostedRepository repository;
     private final Path storagePath;
     private final Pattern branches;
     private final StorageBuilder<UpdatedTag> tagStorageBuilder;
     private final StorageBuilder<UpdatedBranch> branchStorageBuilder;
-    private final List<RepositoryUpdateConsumer> updaters;
+    private final List<RepositoryListener> listeners;
 
-    RepositoryWorkItem(HostedRepository repository, Path storagePath, Pattern branches, StorageBuilder<UpdatedTag> tagStorageBuilder, StorageBuilder<UpdatedBranch> branchStorageBuilder, List<RepositoryUpdateConsumer> updaters) {
+    RepositoryWorkItem(HostedRepository repository, Path storagePath, Pattern branches, StorageBuilder<UpdatedTag> tagStorageBuilder, StorageBuilder<UpdatedBranch> branchStorageBuilder, List<RepositoryListener> listeners) {
         this.repository = repository;
         this.storagePath = storagePath;
         this.branches = branches;
         this.tagStorageBuilder = tagStorageBuilder;
         this.branchStorageBuilder = branchStorageBuilder;
-        this.updaters = updaters;
+        this.listeners = listeners;
     }
 
-    private void handleNewRef(Repository localRepo, Reference ref, Collection<Reference> allRefs, RepositoryUpdateConsumer updater) throws NonRetriableException {
+    private void handleNewRef(Repository localRepo, Reference ref, Collection<Reference> allRefs, RepositoryListener listener) throws NonRetriableException {
         // Figure out the best parent ref
         var candidates = new HashSet<>(allRefs);
         candidates.remove(ref);
         if (candidates.size() == 0) {
             log.warning("No parent candidates found for branch '" + ref.name() + "' - ignoring");
@@ -82,28 +82,28 @@
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
         var branch = new Branch(ref.name());
         var parent = new Branch(bestParent.getKey().name());
-        updater.handleNewBranch(repository, localRepo, bestParentCommits, parent, branch);
+        listener.handleNewBranch(repository, localRepo, bestParentCommits, parent, branch);
     }
 
-    private void handleUpdatedRef(Repository localRepo, Reference ref, List<Commit> commits, RepositoryUpdateConsumer updater) throws NonRetriableException {
+    private void handleUpdatedRef(Repository localRepo, Reference ref, List<Commit> commits, RepositoryListener listener) throws NonRetriableException {
         var branch = new Branch(ref.name());
-        updater.handleCommits(repository, localRepo, commits, branch);
+        listener.handleCommits(repository, localRepo, commits, branch);
     }
 
     private List<Throwable> handleRef(Repository localRepo, UpdateHistory history, Reference ref, Collection<Reference> allRefs) throws IOException {
         var errors = new ArrayList<Throwable>();
         var branch = new Branch(ref.name());
-        for (var updater : updaters) {
-            var lastHash = history.branchHash(branch, updater.name());
+        for (var listener : listeners) {
+            var lastHash = history.branchHash(branch, listener.name());
             if (lastHash.isEmpty()) {
-                log.warning("No previous history found for branch '" + branch + "' and updater '" + updater.name() + " - resetting mark");
-                history.setBranchHash(branch, updater.name(), ref.hash());
+                log.warning("No previous history found for branch '" + branch + "' and listener '" + listener.name() + " - resetting mark");
+                history.setBranchHash(branch, listener.name(), ref.hash());
                 try {
-                    handleNewRef(localRepo, ref, allRefs, updater);
+                    handleNewRef(localRepo, ref, allRefs, listener);
                 } catch (NonRetriableException e) {
                     errors.add(e.cause());
                 } catch (RuntimeException e) {
                     // FIXME: Attempt rollback?
                     errors.add(e);
@@ -112,26 +112,26 @@
                 var commitMetadata = localRepo.commitMetadata(lastHash.get() + ".." + ref.hash());
                 if (commitMetadata.size() == 0) {
                     continue;
                 }
                 if (commitMetadata.size() > 1000) {
-                    history.setBranchHash(branch, updater.name(), ref.hash());
+                    history.setBranchHash(branch, listener.name(), ref.hash());
                     errors.add(new RuntimeException("Excessive amount of new commits on branch " + branch.name() +
-                                                       " detected (" + commitMetadata.size() + ") for updater '" +
-                                                       updater.name() + "' - skipping notifications"));
+                                                       " detected (" + commitMetadata.size() + ") for listener '" +
+                                                       listener.name() + "' - skipping notifications"));
                     continue;
                 }
 
                 var commits = localRepo.commits(lastHash.get() + ".." + ref.hash(), true).asList();
-                history.setBranchHash(branch, updater.name(), ref.hash());
+                history.setBranchHash(branch, listener.name(), ref.hash());
                 try {
-                    handleUpdatedRef(localRepo, ref, commits, updater);
+                    handleUpdatedRef(localRepo, ref, commits, listener);
                 } catch (NonRetriableException e) {
                     errors.add(e.cause());
                 } catch (RuntimeException e) {
                     // Attempt to roll back
-                    history.setBranchHash(branch, updater.name(), lastHash.get());
+                    history.setBranchHash(branch, listener.name(), lastHash.get());
                     errors.add(e);
                 }
             }
         }
         return errors;
@@ -149,27 +149,27 @@
             }
             return Optional.of(tag);
         }
     }
 
-    private List<Throwable> handleTags(Repository localRepo, UpdateHistory history, RepositoryUpdateConsumer updater) throws IOException {
+    private List<Throwable> handleTags(Repository localRepo, UpdateHistory history, RepositoryListener listener) throws IOException {
         var errors = new ArrayList<Throwable>();
         var tags = localRepo.tags();
         var newTags = tags.stream()
-                          .filter(tag -> !history.hasTag(tag, updater.name()))
+                          .filter(tag -> !history.hasTag(tag, listener.name()))
                           .collect(Collectors.toList());
 
         if (tags.size() == newTags.size()) {
             if (tags.size() > 0) {
                 log.warning("No previous tag history found - ignoring all current tags");
-                history.addTags(tags, updater.name());
+                history.addTags(tags, listener.name());
             }
             return errors;
         }
 
         if (newTags.size() > 10) {
-            history.addTags(newTags, updater.name());
+            history.addTags(newTags, listener.name());
             errors.add(new RuntimeException("Excessive amount of new tags detected (" + newTags.size() +
                                                ") - skipping notifications"));
             return errors;
         }
 
@@ -204,18 +204,18 @@
             }
 
             Collections.reverse(commits);
             var annotation = localRepo.annotate(tag.tag());
 
-            history.addTags(List.of(tag.tag()), updater.name());
+            history.addTags(List.of(tag.tag()), listener.name());
             try {
-                updater.handleOpenJDKTagCommits(repository, localRepo, commits, tag, annotation.orElse(null));
+                listener.handleOpenJDKTagCommits(repository, localRepo, commits, tag, annotation.orElse(null));
             } catch (NonRetriableException e) {
                 errors.add(e.cause());
             } catch (RuntimeException e) {
                 errors.add(e);
-                history.retryTagUpdate(tag.tag(), updater.name());
+                history.retryTagUpdate(tag.tag(), listener.name());
             }
         }
 
         var newNonJdkTags = newTags.stream()
                                    .filter(tag -> OpenJDKTag.create(tag).isEmpty())
@@ -226,18 +226,18 @@
                 throw new RuntimeException("Failed to lookup tag '" + tag.toString() + "'");
             }
 
             var annotation = localRepo.annotate(tag);
 
-            history.addTags(List.of(tag), updater.name());
+            history.addTags(List.of(tag), listener.name());
             try {
-                updater.handleTagCommit(repository, localRepo, commit.get(), tag, annotation.orElse(null));
+                listener.handleTagCommit(repository, localRepo, commit.get(), tag, annotation.orElse(null));
             } catch (NonRetriableException e) {
                 errors.add(e.cause());
             } catch (RuntimeException e) {
                 errors.add(e);
-                history.retryTagUpdate(tag, updater.name());
+                history.retryTagUpdate(tag, listener.name());
             }
         }
 
         return errors;
     }
@@ -268,21 +268,21 @@
             localRepo.fetchAll(false);
 
             var history = UpdateHistory.create(tagStorageBuilder, historyPath.resolve("tags"), branchStorageBuilder, historyPath.resolve("branches"));
             var errors = new ArrayList<Throwable>();
 
-            for (var updater : updaters) {
-                errors.addAll(handleTags(localRepo, history, updater));
+            for (var listener : listeners) {
+                errors.addAll(handleTags(localRepo, history, listener));
             }
 
             boolean hasBranchHistory = !history.isEmpty();
             for (var ref : knownRefs) {
                 if (!hasBranchHistory) {
                     log.warning("No previous history found for any branch - resetting mark for '" + ref.name());
-                    for (var updater : updaters) {
-                        log.info("Resetting mark for branch '" + ref.name() + "' for updater '" + updater.name() + "'");
-                        history.setBranchHash(new Branch(ref.name()), updater.name(), ref.hash());
+                    for (var listener : listeners) {
+                        log.info("Resetting mark for branch '" + ref.name() + "' for listener '" + listener.name() + "'");
+                        history.setBranchHash(new Branch(ref.name()), listener.name(), ref.hash());
                     }
                 } else {
                     errors.addAll(handleRef(localRepo, history, ref, knownRefs));
                 }
             }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java
@@ -31,11 +31,11 @@
 
 import java.net.URI;
 import java.util.*;
 import java.util.logging.Logger;
 
-class IssueNotifier implements PullRequestUpdateConsumer {
+class IssueNotifier implements Notifier, PullRequestListener {
     private final IssueProject issueProject;
     private final boolean reviewLink;
     private final URI reviewIcon;
     private final boolean commitLink;
     private final URI commitIcon;
@@ -51,15 +51,10 @@
 
     static IssueNotifierBuilder newBuilder() {
         return new IssueNotifierBuilder();
     }
 
-    @Override
-    public String name() {
-        return "issue";
-    }
-
     private Optional<String> findIssueUsername(CommitMetadata commit) {
         var authorEmail = EmailAddress.from(commit.author().email());
         if (authorEmail.domain().equals("openjdk.org")) {
             return Optional.of(authorEmail.localPart());
         }
@@ -70,10 +65,15 @@
             return Optional.empty();
         }
         return Optional.of(committerEmail.localPart());
     }
 
+    @Override
+    public void attachTo(Emitter e) {
+        e.registerPullRequestListener(this);
+    }
+
     @Override
     public void handleIntegratedPullRequest(PullRequest pr, Hash hash)  {
         var repository = pr.repository();
         var commit = repository.commitMetadata(hash).orElseThrow(() ->
                 new IllegalStateException("Integrated commit " + hash +
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java
@@ -30,11 +30,11 @@
 
 import java.nio.file.Path;
 import java.time.format.DateTimeFormatter;
 import java.util.*;
 
-class JsonNotifier implements RepositoryUpdateConsumer {
+class JsonNotifier implements Notifier, RepositoryListener {
     private final Path path;
     private final String version;
     private final String defaultBuild;
 
     JsonNotifier(Path path, String version, String defaultBuild) {
@@ -74,10 +74,15 @@
         ret.put("issue", issueIds);
 
         return ret;
     }
 
+    @Override
+    public void attachTo(Emitter e) {
+        e.registerRepositoryListener(this);
+    }
+
     @Override
     public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
         try (var writer = new JsonWriter(path, repository.name())) {
             for (var commit : commits) {
                 var json = commitToChanges(repository, localRepository, commit, defaultBuild);
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/mailinglist/MailingListNotifier.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/mailinglist/MailingListNotifier.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/mailinglist/MailingListNotifier.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/mailinglist/MailingListNotifier.java
@@ -33,11 +33,11 @@
 import java.time.format.DateTimeFormatter;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
-class MailingListNotifier implements RepositoryUpdateConsumer {
+class MailingListNotifier implements Notifier, RepositoryListener {
     private final MailingList list;
     private final EmailAddress recipient;
     private final EmailAddress sender;
     private final EmailAddress author;
     private final boolean includeBranch;
@@ -211,10 +211,15 @@
             ret.put("X-Git-Changeset", commits.get(0).hash().hex());
         }
         return ret;
     }
 
+    @Override
+    public void attachTo(Emitter e) {
+        e.registerRepositoryListener(this);
+    }
+
     @Override
     public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
         if (mode == Mode.PR) {
             commits = filterPrCommits(repository, localRepository, commits, branch);
         }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/slack/SlackNotifier.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/slack/SlackNotifier.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/slack/SlackNotifier.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/slack/SlackNotifier.java
@@ -33,21 +33,27 @@
 import java.io.UncheckedIOException;
 import java.net.URI;
 import java.util.List;
 import java.time.format.DateTimeFormatter;
 
-class SlackNotifier implements RepositoryUpdateConsumer, PullRequestUpdateConsumer {
+class SlackNotifier implements Notifier, RepositoryListener, PullRequestListener {
     private final RestRequest prWebhook;
     private final RestRequest commitWebhook;
     private final String username;
 
     SlackNotifier(URI prWebhook, URI commitWebhook, String username) {
         this.prWebhook = prWebhook != null ? new RestRequest(prWebhook) : null;
         this.commitWebhook = commitWebhook != null ? new RestRequest(commitWebhook) : null;
         this.username = username;
     }
 
+    @Override
+    public void attachTo(Emitter e) {
+        e.registerPullRequestListener(this);
+        e.registerRepositoryListener(this);
+    }
+
     @Override
     public void handleNewPullRequest(PullRequest pr) {
         if (prWebhook == null) {
             return;
         }
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -50,17 +50,17 @@
     public static StorageBuilder<PullRequestState> createPullRequestStateStorage(HostedRepository repository) {
         return new StorageBuilder<PullRequestState>("prissues.txt")
                 .remoteRepository(repository, "history", "Duke", "duke@openjdk.java.net", "Updated prissues");
     }
 
-    private static class TestRepositoryUpdateConsumer implements RepositoryUpdateConsumer {
+    private static class TestRepositoryListener implements Notifier, RepositoryListener {
         private final String name;
         private final boolean idempotent;
         private int updateCount = 0;
         private boolean shouldFail = false;
 
-        TestRepositoryUpdateConsumer(String name, boolean idempotent) {
+        TestRepositoryListener(String name, boolean idempotent) {
             this.name = name;
             this.idempotent = idempotent;
         }
 
         @Override
@@ -96,10 +96,15 @@
 
         @Override
         public String name() {
             return name;
         }
+
+        @Override
+        public void attachTo(Emitter e) {
+            e.registerRepositoryListener(this);
+        }
     }
 
     @Test
     void testIdempotenceMix(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
@@ -113,22 +118,25 @@
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
-            var idempotent = new TestRepositoryUpdateConsumer("i", true);
-            var nonIdempotent = new TestRepositoryUpdateConsumer("ni", false);
             var notifyBot = NotifyBot.newBuilder()
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(idempotent, nonIdempotent))
                                      .build();
 
+            var idempotent = new TestRepositoryListener("i", true);
+            idempotent.attachTo(notifyBot);
+
+            var nonIdempotent = new TestRepositoryListener("ni", false);
+            nonIdempotent.attachTo(notifyBot);
+
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and commit a fix
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix stuff");
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java
@@ -51,25 +51,25 @@
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var commitIcon = URI.create("http://www.example.com/commit.png");
-            var updater = IssueNotifier.newBuilder()
-                                      .issueProject(issueProject)
-                                      .reviewLink(false)
-                                      .commitIcon(commitIcon)
-                                      .build();
             var notifyBot = NotifyBot.newBuilder()
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .prUpdaters(List.of(updater))
                                      .integratorId(repo.forge().currentUser().id())
                                      .build();
+            var updater = IssueNotifier.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewLink(false)
+                                      .commitIcon(commitIcon)
+                                      .build();
+            updater.attachTo(notifyBot);
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Save the state
@@ -121,26 +121,26 @@
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var reviewIcon = URI.create("http://www.example.com/review.png");
-            var updater = IssueNotifier.newBuilder()
-                                      .issueProject(issueProject)
-                                      .reviewIcon(reviewIcon)
-                                      .commitLink(false)
-                                      .build();
             var notifyBot = NotifyBot.newBuilder()
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .prUpdaters(List.of(updater))
                                      .readyLabels(Set.of("rfr"))
                                      .readyComments(Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")))
                                      .build();
+            var updater = IssueNotifier.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewIcon(reviewIcon)
+                                      .commitLink(false)
+                                      .build();
+            updater.attachTo(notifyBot);
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and a pull request to fix it
@@ -222,26 +222,28 @@
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var reviewIcon = URI.create("http://www.example.com/review.png");
-            var updater = IssueNotifier.newBuilder()
-                                      .issueProject(issueProject)
-                                      .reviewLink(false)
-                                      .reviewIcon(reviewIcon)
-                                      .commitLink(false)
-                                      .build();
             var notifyBot = NotifyBot.newBuilder()
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .prUpdaters(List.of(updater)).readyLabels(Set.of("rfr"))
+                                     .readyLabels(Set.of("rfr"))
                                      .readyComments(Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")))
                                      .build();
+            var updater = IssueNotifier.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewLink(false)
+                                      .reviewIcon(reviewIcon)
+                                      .commitLink(false)
+                                      .build();
+            updater.attachTo(notifyBot);
+
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // Create an issue and a pull request to fix it
             var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
@@ -281,26 +283,26 @@
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var reviewIcon = URI.create("http://www.example.com/review.png");
-            var updater = IssueNotifier.newBuilder()
-                                      .issueProject(issueProject)
-                                      .reviewIcon(reviewIcon)
-                                      .commitLink(true)
-                                      .commitIcon(reviewIcon)
-                                      .build();
             var notifyBot = NotifyBot.newBuilder()
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile(".*"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .prUpdaters(List.of(updater))
                                      .integratorId(repo.forge().currentUser().id())
                                      .build();
+            var updater = IssueNotifier.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewIcon(reviewIcon)
+                                      .commitLink(true)
+                                      .commitIcon(reviewIcon)
+                                      .build();
+            updater.attachTo(notifyBot);
 
             // Initialize history
             localRepo.push(localRepo.resolve("master").orElseThrow(), repo.url(), "other");
             TestBotRunner.runPeriodicItems(notifyBot);
 
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/json/JsonNotifierTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/json/JsonNotifierTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/json/JsonNotifierTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/json/JsonNotifierTests.java
@@ -60,21 +60,22 @@
             var prStateStorage = createPullRequestStateStorage(repo);
             var jsonFolder = tempFolder.path().resolve("json");
             Files.createDirectory(jsonFolder);
             var storageFolder = tempFolder.path().resolve("storage");
 
-            var updater = new JsonNotifier(jsonFolder, "12", "team");
             var notifyBot = NotifyBot.newBuilder()
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
                                      .build();
 
+            var updater = new JsonNotifier(jsonFolder, "12", "team");
+            updater.attachTo(notifyBot);
+
             TestBotRunner.runPeriodicItems(notifyBot);
             assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "One more line", "12345678: Fixes");
             localRepo.push(editHash, repo.url(), "master");
@@ -108,21 +109,22 @@
             var prStateStorage = createPullRequestStateStorage(repo);
             var jsonFolder = tempFolder.path().resolve("json");
             Files.createDirectory(jsonFolder);
             var storageFolder =tempFolder.path().resolve("storage");
 
-            var updater = new JsonNotifier(jsonFolder, "12", "team");
             var notifyBot = NotifyBot.newBuilder()
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
                                      .build();
 
+            var updater = new JsonNotifier(jsonFolder, "12", "team");
+            updater.attachTo(notifyBot);
+
             TestBotRunner.runPeriodicItems(notifyBot);
             assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
 
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
             localRepo.fetch(repo.url(), "history:history");
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/mailinglist/MailingListNotifierTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/mailinglist/MailingListNotifierTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/mailinglist/MailingListNotifierTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/mailinglist/MailingListNotifierTests.java
@@ -56,29 +56,29 @@
             var branchStorage = createBranchStorage(repo);
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prStateStorageBuilder(prStateStorage)
+                                     .build();
             var updater = MailingListNotifier.newBuilder()
                                              .list(mailmanList)
                                              .recipient(listAddress)
                                              .sender(sender)
                                              .reportNewTags(false)
                                              .reportNewBranches(false)
                                              .reportNewBuilds(false)
                                              .headers(Map.of("extra1", "value1", "extra2", "value2"))
                                              .allowedAuthorDomains(Pattern.compile("none"))
                                              .build();
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile("master"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
-                                     .build();
+            updater.attachTo(notifyBot);
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -128,27 +128,27 @@
             var branchStorage = createBranchStorage(repo);
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var updater = MailingListNotifier.newBuilder()
-                                             .list(mailmanList)
-                                             .recipient(listAddress)
-                                             .sender(sender)
-                                             .reportNewTags(false)
-                                             .reportNewBranches(false)
-                                             .reportNewBuilds(false)
-                                             .build();
             var notifyBot = NotifyBot.newBuilder()
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
                                      .build();
+            var updater = MailingListNotifier.newBuilder()
+                                             .list(mailmanList)
+                                             .recipient(listAddress)
+                                             .sender(sender)
+                                             .reportNewTags(false)
+                                             .reportNewBranches(false)
+                                             .reportNewBuilds(false)
+                                             .build();
+            updater.attachTo(notifyBot);
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -200,27 +200,27 @@
             var branchStorage = createBranchStorage(repo);
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var updater = MailingListNotifier.newBuilder()
-                                             .list(mailmanList)
-                                             .recipient(listAddress)
-                                             .sender(sender)
-                                             .reportNewTags(false)
-                                             .reportNewBranches(false)
-                                             .reportNewBuilds(false)
-                                             .build();
             var notifyBot = NotifyBot.newBuilder()
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
                                      .build();
+            var updater = MailingListNotifier.newBuilder()
+                                             .list(mailmanList)
+                                             .recipient(listAddress)
+                                             .sender(sender)
+                                             .reportNewTags(false)
+                                             .reportNewBranches(false)
+                                             .reportNewBuilds(false)
+                                             .build();
+            updater.attachTo(notifyBot);
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -265,29 +265,29 @@
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var author = EmailAddress.from("author", "author@duke.duke");
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master|another"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prStateStorageBuilder(prStateStorage)
+                                     .build();
             var updater = MailingListNotifier.newBuilder()
                                              .list(mailmanList)
                                              .recipient(listAddress)
                                              .sender(sender)
                                              .author(author)
                                              .includeBranch(true)
                                              .reportNewTags(false)
                                              .reportNewBranches(false)
                                              .reportNewBuilds(false)
                                              .build();
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile("master|another"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
-                                     .build();
+            updater.attachTo(notifyBot);
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -363,10 +363,18 @@
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var author = EmailAddress.from("author", "author@duke.duke");
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master|other"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prStateStorageBuilder(prStateStorage)
+                                     .build();
             var updater = MailingListNotifier.newBuilder()
                                              .list(mailmanList)
                                              .recipient(listAddress)
                                              .sender(sender)
                                              .author(author)
@@ -374,19 +382,11 @@
                                              .reportNewBranches(false)
                                              .reportNewBuilds(false)
                                              .includeBranch(true)
                                              .mode(MailingListNotifier.Mode.PR)
                                              .build();
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile("master|other"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
-                                     .build();
+            updater.attachTo(notifyBot);
 
             // Populate our known branches
             localRepo.push(masterHash, repo.url(), "master", true);
             localRepo.push(masterHash, repo.url(), "other", true);
 
@@ -448,28 +448,28 @@
             var branchStorage = createBranchStorage(repo);
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prStateStorageBuilder(prStateStorage)
+                                     .build();
             var updater = MailingListNotifier.newBuilder()
                                              .list(mailmanList)
                                              .recipient(listAddress)
                                              .sender(sender)
                                              .reportNewTags(false)
                                              .reportNewBranches(false)
                                              .reportNewBuilds(false)
                                              .mode(MailingListNotifier.Mode.PR)
                                              .build();
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile("master"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
-                                     .build();
+            updater.attachTo(notifyBot);
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -540,29 +540,29 @@
             var branchStorage = createBranchStorage(repo);
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master|other"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prStateStorageBuilder(prStateStorage)
+                                     .build();
             var updater = MailingListNotifier.newBuilder()
                                              .list(mailmanList)
                                              .recipient(listAddress)
                                              .sender(sender)
                                              .author(null)
                                              .reportNewTags(false)
                                              .reportNewBranches(false)
                                              .reportNewBuilds(false)
                                              .mode(MailingListNotifier.Mode.PR)
                                              .build();
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile("master|other"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
-                                     .build();
+            updater.attachTo(notifyBot);
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -635,34 +635,36 @@
             var branchStorage = createBranchStorage(repo);
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prStateStorageBuilder(prStateStorage)
+                                     .build();
             var updater = MailingListNotifier.newBuilder()
                                              .list(mailmanList)
                                              .recipient(listAddress)
                                              .sender(sender)
                                              .reportNewBranches(false)
                                              .headers(Map.of("extra1", "value1", "extra2", "value2"))
                                              .build();
+            updater.attachTo(notifyBot);
+
             var noTagsUpdater = MailingListNotifier.newBuilder()
                                                    .list(mailmanList)
                                                    .recipient(listAddress)
                                                    .sender(sender)
                                                    .reportNewTags(false)
                                                    .reportNewBranches(false)
                                                    .reportNewBuilds(false)
                                                    .build();
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile("master"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater, noTagsUpdater))
-                                     .build();
+            noTagsUpdater.attachTo(notifyBot);
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -752,35 +754,36 @@
             var branchStorage = createBranchStorage(repo);
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prStateStorageBuilder(prStateStorage)
+                                     .build();
             var updater = MailingListNotifier.newBuilder()
                                              .list(mailmanList)
                                              .recipient(listAddress)
                                              .sender(sender)
                                              .reportNewBranches(false)
                                              .reportNewBuilds(false)
                                              .headers(Map.of("extra1", "value1", "extra2", "value2"))
                                              .build();
+            updater.attachTo(notifyBot);
             var noTagsUpdater = MailingListNotifier.newBuilder()
                                                    .list(mailmanList)
                                                    .recipient(listAddress)
                                                    .sender(sender)
                                                    .reportNewTags(false)
                                                    .reportNewBranches(false)
                                                    .reportNewBuilds(false)
                                                    .build();
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile("master"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater, noTagsUpdater))
-                                     .build();
+            noTagsUpdater.attachTo(notifyBot);
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -845,27 +848,27 @@
             var branchStorage = createBranchStorage(repo);
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
-            var updater = MailingListNotifier.newBuilder()
-                                             .list(mailmanList)
-                                             .recipient(listAddress)
-                                             .sender(sender)
-                                             .reportNewTags(false)
-                                             .reportNewBuilds(false)
-                                             .headers(Map.of("extra1", "value1", "extra2", "value2"))
-                                             .build();
             var notifyBot = NotifyBot.newBuilder()
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master|newbranch."))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
                                      .build();
+            var updater = MailingListNotifier.newBuilder()
+                                             .list(mailmanList)
+                                             .recipient(listAddress)
+                                             .sender(sender)
+                                             .reportNewTags(false)
+                                             .reportNewBuilds(false)
+                                             .headers(Map.of("extra1", "value1", "extra2", "value2"))
+                                             .build();
+            updater.attachTo(notifyBot);
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
@@ -925,29 +928,29 @@
             var branchStorage = createBranchStorage(repo);
             var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prStateStorageBuilder(prStateStorage)
+                                     .build();
             var updater = MailingListNotifier.newBuilder()
                                              .list(mailmanList)
                                              .recipient(listAddress)
                                              .sender(sender)
                                              .reportNewTags(false)
                                              .reportNewBranches(false)
                                              .reportNewBuilds(false)
                                              .headers(Map.of("extra1", "value1", "extra2", "value2"))
                                              .allowedAuthorDomains(Pattern.compile("none"))
                                              .build();
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile("master"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
-                                     .build();
+            updater.attachTo(notifyBot);
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));
 
