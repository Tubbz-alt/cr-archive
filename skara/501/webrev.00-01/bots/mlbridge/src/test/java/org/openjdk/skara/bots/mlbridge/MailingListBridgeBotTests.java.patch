diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -1395,32 +1395,49 @@
             localRepo.push(masterHash, author.url(), "master", true);
             localRepo.push(masterHash, archive.url(), "archive", true);
             localRepo.push(masterHash, archive.url(), "webrev", true);
 
             // Create a merge
+            var editOnlyFile = Path.of("editonly.txt");
+            Files.writeString(localRepo.root().resolve(editOnlyFile), "Only added in the edit");
+            localRepo.add(editOnlyFile);
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Edited");
             localRepo.checkout(masterHash, true);
+            var masterOnlyFile = Path.of("masteronly.txt");
+            Files.writeString(localRepo.root().resolve(masterOnlyFile), "Only added in master");
+            localRepo.add(masterOnlyFile);
             var updatedMasterHash = CheckableRepository.appendAndCommit(localRepo, "Master change");
             localRepo.push(updatedMasterHash, author.url(), "master");
             localRepo.merge(editHash, "ours");
             var mergeCommit = localRepo.commit("Merged edit", "duke", "duke@openjdk.java.net");
-            localRepo.push(mergeCommit, author.url(), "edit", true);
+            var mergeOnlyFile = Path.of("mergeonly.txt");
+            Files.writeString(localRepo.root().resolve(mergeOnlyFile), "Only added in the merge");
+            localRepo.add(mergeOnlyFile);
+            Files.writeString(localRepo.root().resolve(reviewFile), "Overwriting the conflict resolution");
+            localRepo.add(reviewFile);
+            var appendedCommit = localRepo.amend("Updated merge commit", "duke", "duke@openjdk.java.net");
+            localRepo.push(appendedCommit, author.url(), "edit", true);
 
             // Make a merge PR
-            var pr = credentials.createPullRequest(archive, "master", "edit", "Merge");
+            var pr = credentials.createPullRequest(archive, "master", "edit", "Merge edit");
             pr.setBody("This is now ready");
 
             // Run an archive pass
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
 
             // The archive should contain a merge style webrev
             Repository.materialize(archiveFolder.path(), archive.url(), "archive");
-            assertTrue(archiveContains(archiveFolder.path(), "webrev only contains"));
-            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/webrev.00"));
-            assertTrue(archiveContains(archiveFolder.path(), "Stats: 1 line in 1 file changed: 0 ins; 0 del; 1 mod"));
-            assertTrue(archiveContains(archiveFolder.path(), "Full: 0 lines in 0 files changed: 0 ins; 0 del; 0 mod"));
+            assertTrue(archiveContains(archiveFolder.path(), "webrevs contain only the adjustments"));
+            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/webrev.00.0"));
+            assertTrue(archiveContains(archiveFolder.path(), "3 lines in 2 files changed: 1 ins; 1 del; 1 mod"));
+
+            // The PR should contain a webrev comment
+            assertEquals(1, pr.comments().size());
+            var webrevComment = pr.comments().get(0);
+            assertTrue(webrevComment.body().contains("Merge target"));
+            assertTrue(webrevComment.body().contains("Merge source"));
         }
     }
 
     @Test
     void skipAddingExistingWebrev(TestInfo testInfo) throws IOException {
