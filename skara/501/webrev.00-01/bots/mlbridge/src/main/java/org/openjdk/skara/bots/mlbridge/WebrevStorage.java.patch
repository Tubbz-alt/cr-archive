diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
@@ -21,20 +21,18 @@
  * questions.
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.email.EmailAddress;
-import org.openjdk.skara.forge.HostedRepository;
-import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.issuetracker.IssueTracker;
+import org.openjdk.skara.jcheck.JCheckConfiguration;
 import org.openjdk.skara.network.URIBuilder;
-import org.openjdk.skara.vcs.Repository;
-import org.openjdk.skara.vcs.Hash;
-import org.openjdk.skara.webrev.Webrev;
-import org.openjdk.skara.version.Version;
+import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.Issue;
-import org.openjdk.skara.jcheck.JCheckConfiguration;
-import org.openjdk.skara.issuetracker.IssueTracker;
+import org.openjdk.skara.version.Version;
+import org.openjdk.skara.webrev.Webrev;
 
 import java.io.*;
 import java.net.URI;
 import java.net.http.*;
 import java.nio.file.*;
@@ -58,11 +56,11 @@
         this.storage = storage;
         storageRef = ref;
         this.author = author;
     }
 
-    private void generate(PullRequest pr, Repository localRepository, Path folder, Hash base, Hash head) throws IOException {
+    private void generate(PullRequest pr, Repository localRepository, Path folder, Diff diff, Hash base, Hash head) throws IOException {
         Files.createDirectories(folder);
         var fullName = pr.author().fullName();
         var builder = Webrev.repository(localRepository)
                             .output(folder)
                             .version(Version.fromManifest().orElse("unknown"))
@@ -83,11 +81,15 @@
                     builder = builder.issue(hostedIssue.get().webUrl().toString());
                 }
             }
         }
 
-        builder.generate(base, head);
+        if (diff != null) {
+            builder.generate(diff);
+        } else {
+            builder.generate(base, head);
+        }
     }
 
     private String generatePlaceholder(PullRequest pr, Hash base, Hash head) {
         return "This file was too large to be included in the published webrev, and has been replaced with " +
                 "this placeholder message. It is possible to generate the original content locally by " +
@@ -207,21 +209,21 @@
         }
 
         throw new RuntimeException("No success response from " + uri + " within " + timeout);
     }
 
-    private URI createAndArchive(PullRequest pr, Repository localRepository, Path scratchPath, Hash base, Hash head, String identifier) {
+    private URI createAndArchive(PullRequest pr, Repository localRepository, Path scratchPath, Diff diff, Hash base, Hash head, String identifier) {
         try {
             var localStorage = Repository.materialize(scratchPath, storage.url(),
                                                       "+" + storageRef + ":mlbridge_webrevs");
             var relativeFolder = baseFolder.resolve(String.format("%s/webrev.%s", pr.id(), identifier));
             var outputFolder = scratchPath.resolve(relativeFolder);
             // If a previous operation was interrupted there may be content here already - overwrite if so
             if (Files.exists(outputFolder)) {
                 clearDirectory(outputFolder);
             }
-            generate(pr, localRepository, outputFolder, base, head);
+            generate(pr, localRepository, outputFolder, diff, base, head);
             var placeholder = generatePlaceholder(pr, base, head);
             if (!localStorage.isClean()) {
                 push(localStorage, outputFolder, baseFolder.resolve(pr.id()).toString(), placeholder);
             }
             var uri = URIBuilder.base(baseUri).appendPath(relativeFolder.toString().replace('\\', '/')).build();
@@ -230,14 +232,26 @@
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
-    @FunctionalInterface
     interface WebrevGenerator {
-        URI generate(Hash base, Hash head, String identifier);
+        WebrevDescription generate(Hash base, Hash head, String identifier, WebrevDescription.Type type);
+        WebrevDescription generate(Diff diff, String identifier, WebrevDescription.Type type, String description);
     }
 
     WebrevGenerator generator(PullRequest pr, Repository localRepository, Path scratchPath) {
-        return (base, head, identifier) -> createAndArchive(pr, localRepository, scratchPath, base, head, identifier);
+        return new WebrevGenerator() {
+            @Override
+            public WebrevDescription generate(Hash base, Hash head, String identifier, WebrevDescription.Type type) {
+                var uri = createAndArchive(pr, localRepository, scratchPath, null, base, head, identifier);
+                return new WebrevDescription(uri, type);
+            }
+
+            @Override
+            public WebrevDescription generate(Diff diff, String identifier, WebrevDescription.Type type, String description) {
+                var uri = createAndArchive(pr, localRepository, scratchPath, diff, diff.from(), diff.to(), identifier);
+                return new WebrevDescription(uri, type, description);
+            }
+        };
     }
 }
