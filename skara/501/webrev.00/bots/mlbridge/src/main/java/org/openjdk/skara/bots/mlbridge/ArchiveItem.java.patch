diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
@@ -36,22 +36,52 @@
         this.header = header;
         this.body = body;
         this.footer = footer;
     }
 
+    // If the head commit is a merge commit with base as one parent, return the other one (the new content)
+    private static Optional<Hash> mergeParent(Repository localRepo, Hash base, Hash head) {
+        try {
+            var mergeCommit = localRepo.lookup(head);
+            if (mergeCommit.isEmpty()) {
+                return Optional.empty();
+            }
+            if (!mergeCommit.get().isMerge()) {
+                return Optional.empty();
+            }
+            for (var parent : mergeCommit.get().parents()) {
+                if (parent.equals(base) || localRepo.isAncestor(parent, base)) {
+                    continue;
+                }
+                return Optional.of(parent);
+            }
+            return Optional.empty();
+        } catch (IOException e) {
+            return Optional.empty();
+        }
+    }
+
     static ArchiveItem from(PullRequest pr, Repository localRepo, HostUserToEmailAuthor hostUserToEmailAuthor,
                             URI issueTracker, String issuePrefix, WebrevStorage.WebrevGenerator webrevGenerator,
                             WebrevNotification webrevNotification, ZonedDateTime created, ZonedDateTime updated,
                             Hash base, Hash head, String subjectPrefix) {
         return new ArchiveItem(null, "fc", created, updated, pr.author(), Map.of("PR-Head-Hash", head.hex(), "PR-Base-Hash", base.hex()),
                                () -> subjectPrefix + "RFR: " + pr.title(),
                                () -> "",
                                () -> ArchiveMessages.composeConversation(pr, localRepo, base, head),
                                () -> {
-                                    var fullWebrev = webrevGenerator.generate(base, head, "00");
-                                    webrevNotification.notify(0, fullWebrev, null);
-                                    return ArchiveMessages.composeConversationFooter(pr, issueTracker, issuePrefix, localRepo, fullWebrev, base, head);
+                                   if (pr.title().startsWith("Merge")) {
+                                       var mergeCommitParent = mergeParent(localRepo, base, head);
+                                        if (mergeCommitParent.isPresent()) {
+                                            var mergeWebrev = webrevGenerator.generate(mergeCommitParent.get(), head, "00");
+                                            webrevNotification.notify(0, mergeWebrev, null);
+                                            return ArchiveMessages.composeMergeConversationFooter(pr, localRepo, mergeWebrev, base, mergeCommitParent.get(), head);
+                                        }
+                                   }
+                                   var fullWebrev = webrevGenerator.generate(base, head, "00");
+                                   webrevNotification.notify(0, fullWebrev, null);
+                                   return ArchiveMessages.composeConversationFooter(pr, issueTracker, issuePrefix, localRepo, fullWebrev, base, head);
                                });
     }
 
     private static Optional<Hash> rebasedLastHead(Repository localRepo, Hash newBase, Hash lastHead) {
         try {
