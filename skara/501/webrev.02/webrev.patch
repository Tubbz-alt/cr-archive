diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
@@ -36,22 +36,54 @@
         this.header = header;
         this.body = body;
         this.footer = footer;
     }
 
+    private static Optional<Commit> mergeCommit(Repository localRepo, Hash head) {
+        try {
+            return localRepo.lookup(head).filter(Commit::isMerge);
+        } catch (IOException e) {
+            return Optional.empty();
+        }
+    }
+
     static ArchiveItem from(PullRequest pr, Repository localRepo, HostUserToEmailAuthor hostUserToEmailAuthor,
                             URI issueTracker, String issuePrefix, WebrevStorage.WebrevGenerator webrevGenerator,
                             WebrevNotification webrevNotification, ZonedDateTime created, ZonedDateTime updated,
                             Hash base, Hash head, String subjectPrefix) {
         return new ArchiveItem(null, "fc", created, updated, pr.author(), Map.of("PR-Head-Hash", head.hex(), "PR-Base-Hash", base.hex()),
                                () -> subjectPrefix + "RFR: " + pr.title(),
                                () -> "",
                                () -> ArchiveMessages.composeConversation(pr, localRepo, base, head),
                                () -> {
-                                    var fullWebrev = webrevGenerator.generate(base, head, "00");
-                                    webrevNotification.notify(0, fullWebrev, null);
-                                    return ArchiveMessages.composeConversationFooter(pr, issueTracker, issuePrefix, localRepo, fullWebrev, base, head);
+                                   var fullWebrev = webrevGenerator.generate(base, head, "00", WebrevDescription.Type.FULL);
+                                   if (pr.title().startsWith("Merge")) {
+                                       var mergeCommit = mergeCommit(localRepo, head);
+                                        if (mergeCommit.isPresent()) {
+                                            var mergeWebrevs = new ArrayList<WebrevDescription>();
+                                            mergeWebrevs.add(fullWebrev);
+                                            for (int i = 0; i < mergeCommit.get().parentDiffs().size(); ++i) {
+                                                var diff = mergeCommit.get().parentDiffs().get(i);
+                                                switch (i) {
+                                                    case 0:
+                                                        mergeWebrevs.add(webrevGenerator.generate(diff, String.format("00.%d", i), WebrevDescription.Type.MERGE_TARGET, pr.targetRef()));
+                                                        break;
+                                                    case 1:
+                                                        var mergeSource = pr.title().length() > 6 ? pr.title().substring(6) : null;
+                                                        mergeWebrevs.add(webrevGenerator.generate(diff, String.format("00.%d", i), WebrevDescription.Type.MERGE_SOURCE, mergeSource));
+                                                        break;
+                                                    default:
+                                                        mergeWebrevs.add(webrevGenerator.generate(diff, String.format("00.%d", i), WebrevDescription.Type.MERGE_SOURCE, null));
+                                                        break;
+                                                }
+                                            }
+                                            webrevNotification.notify(0, mergeWebrevs);
+                                            return ArchiveMessages.composeMergeConversationFooter(pr, localRepo, mergeWebrevs, base, head);
+                                        }
+                                   }
+                                   webrevNotification.notify(0, List.of(fullWebrev));
+                                   return ArchiveMessages.composeConversationFooter(pr, issueTracker, issuePrefix, localRepo, fullWebrev, base, head);
                                });
     }
 
     private static Optional<Hash> rebasedLastHead(Repository localRepo, Hash newBase, Hash lastHead) {
         try {
@@ -91,23 +123,23 @@
                                            return ArchiveMessages.composeFullRevision(localRepo, hostUserToCommitterName(hostUserToEmailAuthor, pr.author()), base, head);
                                        }
                                    }
                                },
                                () -> {
-                                   var fullWebrev = webrevGenerator.generate(base, head, String.format("%02d", index));
+                                   var fullWebrev = webrevGenerator.generate(base, head, String.format("%02d", index), WebrevDescription.Type.FULL);
                                    if (lastBase.equals(base)) {
-                                       var incrementalWebrev = webrevGenerator.generate(lastHead, head, String.format("%02d-%02d", index - 1, index));
-                                       webrevNotification.notify(index, fullWebrev, incrementalWebrev);
+                                       var incrementalWebrev = webrevGenerator.generate(lastHead, head, String.format("%02d-%02d", index - 1, index), WebrevDescription.Type.INCREMENTAL);
+                                       webrevNotification.notify(index, List.of(fullWebrev, incrementalWebrev));
                                        return ArchiveMessages.composeIncrementalFooter(pr, localRepo, fullWebrev, incrementalWebrev, head, lastHead);
                                    } else {
                                        var rebasedLastHead = rebasedLastHead(localRepo, base, lastHead);
                                        if (rebasedLastHead.isPresent()) {
-                                           var incrementalWebrev = webrevGenerator.generate(rebasedLastHead.get(), head, String.format("%02d-%02d", index - 1, index));
-                                           webrevNotification.notify(index, fullWebrev, incrementalWebrev);
+                                           var incrementalWebrev = webrevGenerator.generate(rebasedLastHead.get(), head, String.format("%02d-%02d", index - 1, index), WebrevDescription.Type.INCREMENTAL);
+                                           webrevNotification.notify(index, List.of(fullWebrev, incrementalWebrev));
                                            return ArchiveMessages.composeIncrementalFooter(pr, localRepo, fullWebrev, incrementalWebrev, head, lastHead);
                                        } else {
-                                           webrevNotification.notify(index, fullWebrev, null);
+                                           webrevNotification.notify(index, List.of(fullWebrev));
                                            return ArchiveMessages.composeRebasedFooter(pr, localRepo, fullWebrev, base, head);
                                        }
                                    }
                                });
     }
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -236,40 +236,64 @@
     static String composeReplyFooter(PullRequest pr) {
         return "PR: " + pr.webUrl();
     }
 
     // When changing this, ensure that the PR pattern in the notifier still matches
-    static String composeConversationFooter(PullRequest pr, URI issueProject, String projectPrefix, Repository localRepo, URI webrev, Hash base, Hash head) {
+    static String composeConversationFooter(PullRequest pr, URI issueProject, String projectPrefix, Repository localRepo, WebrevDescription webrev, Hash base, Hash head) {
         var commits = commits(localRepo, base, head);
         var issueString = issueUrl(pr, issueProject, projectPrefix).map(url -> "  Issue: " + url + "\n").orElse("");
         return "Commit messages:\n" +
                 formatCommitMessagesBrief(commits).orElse("") + "\n\n" +
                 "Changes: " + pr.changeUrl() + "\n" +
-                " Webrev: " + webrev + "\n" +
+                " Webrev: " + webrev.uri().toString() + "\n" +
                 issueString +
                 "  Stats: " + stats(localRepo, base, head) + "\n" +
                 "  Patch: " + pr.diffUrl().toString() + "\n" +
                 "  Fetch: " + fetchCommand(pr) + "\n\n" +
                 composeReplyFooter(pr);
     }
 
-    static String composeRebasedFooter(PullRequest pr, Repository localRepo, URI fullWebrev, Hash base, Hash head) {
+    static String composeMergeConversationFooter(PullRequest pr, Repository localRepo, List<WebrevDescription> webrevs, Hash base, Hash head) {
+        var commits = commits(localRepo, base, head);
+        var webrevLinks = "";
+        if (webrevs.size() > 1) {
+            webrevLinks = " Webrev: " + webrevs.get(0).uri() + "\n\n" +
+                    "The following webrevs contain only the adjustments done while merging with regards to each parent branch:\n" +
+                    webrevs.stream()
+                           .skip(1)
+                           .map(d -> String.format(" - %s: %s", d.shortLabel(), d.uri()))
+                           .collect(Collectors.joining("\n")) + "\n\n";
+        } else {
+            webrevLinks = " Webrev: " + webrevs.get(0).uri() + "\n\n" +
+                    "The merge commit only contains trivial merges, so no merge-specific webrevs have been generated.\n\n";
+        }
+        return "Commit messages:\n" +
+                formatCommitMessagesBrief(commits).orElse("") + "\n\n" +
+                "Changes: " + pr.changeUrl() + "\n" +
+                webrevLinks +
+                "  Stats: " + stats(localRepo, base, head) + "\n" +
+                "  Patch: " + pr.diffUrl().toString() + "\n" +
+                "  Fetch: " + fetchCommand(pr) + "\n\n" +
+                composeReplyFooter(pr);
+    }
+
+    static String composeRebasedFooter(PullRequest pr, Repository localRepo, WebrevDescription fullWebrev, Hash base, Hash head) {
         return "Changes: " + pr.changeUrl() + "\n" +
-                " Webrev: " + fullWebrev.toString() + "\n" +
+                " Webrev: " + fullWebrev.uri().toString() + "\n" +
                 "  Stats: " + stats(localRepo, base, head) + "\n" +
                 "  Patch: " + pr.diffUrl().toString() + "\n" +
                 "  Fetch: " + fetchCommand(pr) + "\n\n" +
                 composeReplyFooter(pr);
     }
 
-    static String composeIncrementalFooter(PullRequest pr, Repository localRepo, URI fullWebrev, URI incrementalWebrev, Hash head, Hash lastHead) {
+    static String composeIncrementalFooter(PullRequest pr, Repository localRepo, WebrevDescription fullWebrev, WebrevDescription incrementalWebrev, Hash head, Hash lastHead) {
         return "Changes:\n" +
                 "  - all: " + pr.changeUrl() + "\n" +
                 "  - new: " + pr.changeUrl(lastHead) + "\n\n" +
                 "Webrevs:\n" +
-                " - full: " + fullWebrev.toString() + "\n" +
-                " - incr: " + incrementalWebrev.toString() + "\n\n" +
+                " - full: " + fullWebrev.uri().toString() + "\n" +
+                " - incr: " + incrementalWebrev.uri().toString() + "\n\n" +
                 "  Stats: " + stats(localRepo, lastHead, head) + "\n" +
                 "  Patch: " + pr.diffUrl().toString() + "\n" +
                 "  Fetch: " + fetchCommand(pr) + "\n\n" +
                 composeReplyFooter(pr);
     }
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -29,18 +29,17 @@
 import org.openjdk.skara.issuetracker.Comment;
 import org.openjdk.skara.mailinglist.*;
 import org.openjdk.skara.vcs.Repository;
 
 import java.io.*;
-import java.net.URI;
 import java.nio.file.Path;
 import java.time.*;
 import java.util.*;
 import java.util.function.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
-import java.util.stream.*;
+import java.util.stream.Collectors;
 
 class ArchiveWorkItem implements WorkItem {
     private final PullRequest pr;
     private final MailingListBridgeBot bot;
     private final Consumer<RuntimeException> exceptionConsumer;
@@ -129,28 +128,28 @@
 
     private static final String webrevCommentMarker = "<!-- mlbridge webrev comment -->";
     private static final String webrevHeaderMarker = "<!-- mlbridge webrev header -->";
     private static final String webrevListMarker = "<!-- mlbridge webrev list -->";
 
-    private void updateWebrevComment(List<Comment> comments, int index, URI fullWebrev, URI incWebrev) {
+    private void updateWebrevComment(List<Comment> comments, int index, List<WebrevDescription> webrevs) {
         var existing = comments.stream()
                                .filter(comment -> comment.author().equals(pr.repository().forge().currentUser()))
                                .filter(comment -> comment.body().contains(webrevCommentMarker))
                                .findAny();
+        var webrevDescriptions = webrevs.stream()
+                                        .map(d -> String.format("[%s](%s)", d.label(), d.uri()))
+                                        .collect(Collectors.joining(" - "));
         var comment = webrevCommentMarker + "\n";
         comment += webrevHeaderMarker + "\n";
         comment += "### Webrevs" + "\n";
         comment += webrevListMarker + "\n";
-        comment += " * " + String.format("%02d", index) + ": [Full](" + fullWebrev.toString() + ")";
-        if (incWebrev != null) {
-            comment += " - [Incremental](" + incWebrev.toString() + ")";
-        }
+        comment += " * " + String.format("%02d", index) + ": " + webrevDescriptions;
         comment += " (" + pr.headHash() + ")\n";
 
         if (existing.isPresent()) {
-            if (existing.get().body().contains(fullWebrev.toString())) {
-                log.fine("Webrev link already posted - skipping update");
+            if (existing.get().body().contains(webrevDescriptions)) {
+                log.fine("Webrev links already posted - skipping update");
                 return;
             }
             var previousListStart = existing.get().body().indexOf(webrevListMarker) + webrevListMarker.length() + 1;
             var previousList = existing.get().body().substring(previousListStart);
             comment += previousList;
@@ -326,11 +325,11 @@
                 archiver.addReviewComment(reviewComment);
             }
 
             var webrevGenerator = bot.webrevStorage().generator(pr, localRepo, webrevPath);
             var newMails = archiver.generateNewEmails(sentMails, bot.cooldown(), localRepo, bot.issueTracker(), jbs.toUpperCase(), webrevGenerator,
-                                                      (index, full, inc) -> updateWebrevComment(comments, index, full, inc),
+                                                      (index, webrevs) -> updateWebrevComment(comments, index, webrevs),
                                                       user -> getAuthorAddress(census, user),
                                                       user -> getAuthorUserName(census, user),
                                                       user -> getAuthorRole(census, user),
                                                       subjectPrefix(),
                                                       retryConsumer
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevDescription.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevDescription.java
--- /dev/null
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevDescription.java
@@ -0,0 +1,84 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.mlbridge;
+
+import java.net.URI;
+
+public class WebrevDescription {
+    public enum Type {
+        FULL,
+        INCREMENTAL,
+        MERGE_TARGET,
+        MERGE_SOURCE
+    }
+
+    private final URI uri;
+    private final Type type;
+    private final String description;
+
+    public WebrevDescription(URI uri, Type type, String description) {
+        this.uri = uri;
+        this.type = type;
+        this.description = description;
+    }
+
+    public WebrevDescription(URI uri, Type type) {
+        this.uri = uri;
+        this.type = type;
+        this.description = null;
+    }
+
+    public URI uri() {
+        return uri;
+    }
+
+    public String label() {
+        switch (type) {
+            case FULL:
+                return "Full";
+            case INCREMENTAL:
+                return "Incremental";
+            case MERGE_TARGET:
+                return "Merge target" + (description != null ? " (" + description + ")" : "");
+            case MERGE_SOURCE:
+                return "Merge source" + (description != null ? " (" + description + ")" : "");
+
+        }
+        throw new RuntimeException("Unknown type");
+    }
+
+    public String shortLabel() {
+        switch (type) {
+            case FULL:
+                return "full";
+            case INCREMENTAL:
+                return "incr";
+            case MERGE_TARGET:
+                return description != null ? description : "merge target";
+            case MERGE_SOURCE:
+                return description != null ? description : "merge source";
+
+        }
+        throw new RuntimeException("Unknown type");
+    }
+}
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevNotification.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevNotification.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevNotification.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevNotification.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.mlbridge;
 
-import java.net.URI;
+import java.util.List;
 
 @FunctionalInterface
 interface WebrevNotification {
-    void notify(int index, URI full, URI incremental);
+    void notify(int index, List<WebrevDescription> webrevDescriptions);
 }
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
@@ -21,20 +21,18 @@
  * questions.
  */
 package org.openjdk.skara.bots.mlbridge;
 
 import org.openjdk.skara.email.EmailAddress;
-import org.openjdk.skara.forge.HostedRepository;
-import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.issuetracker.IssueTracker;
+import org.openjdk.skara.jcheck.JCheckConfiguration;
 import org.openjdk.skara.network.URIBuilder;
-import org.openjdk.skara.vcs.Repository;
-import org.openjdk.skara.vcs.Hash;
-import org.openjdk.skara.webrev.Webrev;
-import org.openjdk.skara.version.Version;
+import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.vcs.openjdk.Issue;
-import org.openjdk.skara.jcheck.JCheckConfiguration;
-import org.openjdk.skara.issuetracker.IssueTracker;
+import org.openjdk.skara.version.Version;
+import org.openjdk.skara.webrev.Webrev;
 
 import java.io.*;
 import java.net.URI;
 import java.net.http.*;
 import java.nio.file.*;
@@ -58,11 +56,11 @@
         this.storage = storage;
         storageRef = ref;
         this.author = author;
     }
 
-    private void generate(PullRequest pr, Repository localRepository, Path folder, Hash base, Hash head) throws IOException {
+    private void generate(PullRequest pr, Repository localRepository, Path folder, Diff diff, Hash base, Hash head) throws IOException {
         Files.createDirectories(folder);
         var fullName = pr.author().fullName();
         var builder = Webrev.repository(localRepository)
                             .output(folder)
                             .version(Version.fromManifest().orElse("unknown"))
@@ -83,11 +81,15 @@
                     builder = builder.issue(hostedIssue.get().webUrl().toString());
                 }
             }
         }
 
-        builder.generate(base, head);
+        if (diff != null) {
+            builder.generate(diff);
+        } else {
+            builder.generate(base, head);
+        }
     }
 
     private String generatePlaceholder(PullRequest pr, Hash base, Hash head) {
         return "This file was too large to be included in the published webrev, and has been replaced with " +
                 "this placeholder message. It is possible to generate the original content locally by " +
@@ -207,21 +209,21 @@
         }
 
         throw new RuntimeException("No success response from " + uri + " within " + timeout);
     }
 
-    private URI createAndArchive(PullRequest pr, Repository localRepository, Path scratchPath, Hash base, Hash head, String identifier) {
+    private URI createAndArchive(PullRequest pr, Repository localRepository, Path scratchPath, Diff diff, Hash base, Hash head, String identifier) {
         try {
             var localStorage = Repository.materialize(scratchPath, storage.url(),
                                                       "+" + storageRef + ":mlbridge_webrevs");
             var relativeFolder = baseFolder.resolve(String.format("%s/webrev.%s", pr.id(), identifier));
             var outputFolder = scratchPath.resolve(relativeFolder);
             // If a previous operation was interrupted there may be content here already - overwrite if so
             if (Files.exists(outputFolder)) {
                 clearDirectory(outputFolder);
             }
-            generate(pr, localRepository, outputFolder, base, head);
+            generate(pr, localRepository, outputFolder, diff, base, head);
             var placeholder = generatePlaceholder(pr, base, head);
             if (!localStorage.isClean()) {
                 push(localStorage, outputFolder, baseFolder.resolve(pr.id()).toString(), placeholder);
             }
             var uri = URIBuilder.base(baseUri).appendPath(relativeFolder.toString().replace('\\', '/')).build();
@@ -230,14 +232,26 @@
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
-    @FunctionalInterface
     interface WebrevGenerator {
-        URI generate(Hash base, Hash head, String identifier);
+        WebrevDescription generate(Hash base, Hash head, String identifier, WebrevDescription.Type type);
+        WebrevDescription generate(Diff diff, String identifier, WebrevDescription.Type type, String description);
     }
 
     WebrevGenerator generator(PullRequest pr, Repository localRepository, Path scratchPath) {
-        return (base, head, identifier) -> createAndArchive(pr, localRepository, scratchPath, base, head, identifier);
+        return new WebrevGenerator() {
+            @Override
+            public WebrevDescription generate(Hash base, Hash head, String identifier, WebrevDescription.Type type) {
+                var uri = createAndArchive(pr, localRepository, scratchPath, null, base, head, identifier);
+                return new WebrevDescription(uri, type);
+            }
+
+            @Override
+            public WebrevDescription generate(Diff diff, String identifier, WebrevDescription.Type type, String description) {
+                var uri = createAndArchive(pr, localRepository, scratchPath, diff, diff.from(), diff.to(), identifier);
+                return new WebrevDescription(uri, type, description);
+            }
+        };
     }
 }
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -1356,10 +1356,91 @@
             assertTrue(archiveContains(archiveFolder.path(), "Original msg"));
             assertTrue(archiveContains(archiveFolder.path(), "More updates"));
         }
     }
 
+    @Test
+    void mergeWebrev(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory();
+             var archiveFolder = new TemporaryDirectory();
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
+            var author = credentials.getHostedRepository();
+            var archive = credentials.getHostedRepository();
+            var commenter = credentials.getHostedRepository();
+            var listAddress = EmailAddress.parse(listServer.createList("test"));
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.forge().currentUser().id());
+            var from = EmailAddress.from("test", "test@test.mail");
+            var mlBot = MailingListBridgeBot.newBuilder()
+                                            .from(from)
+                                            .repo(author)
+                                            .archive(archive)
+                                            .archiveRef("archive")
+                                            .censusRepo(censusBuilder.build())
+                                            .list(listAddress)
+                                            .listArchive(listServer.getArchive())
+                                            .smtpServer(listServer.getSMTP())
+                                            .webrevStorageRepository(archive)
+                                            .webrevStorageRef("webrev")
+                                            .webrevStorageBase(Path.of("test"))
+                                            .webrevStorageBaseUri(webrevServer.uri())
+                                            .issueTracker(URIBuilder.base("http://issues.test/browse/").build())
+                                            .build();
+
+            // Populate the projects repository
+            var reviewFile = Path.of("reviewfile.txt");
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), reviewFile);
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            localRepo.push(masterHash, author.url(), "master", true);
+            localRepo.push(masterHash, archive.url(), "archive", true);
+            localRepo.push(masterHash, archive.url(), "webrev", true);
+
+            // Create a merge
+            var editOnlyFile = Path.of("editonly.txt");
+            Files.writeString(localRepo.root().resolve(editOnlyFile), "Only added in the edit");
+            localRepo.add(editOnlyFile);
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Edited");
+            localRepo.checkout(masterHash, true);
+            var masterOnlyFile = Path.of("masteronly.txt");
+            Files.writeString(localRepo.root().resolve(masterOnlyFile), "Only added in master");
+            localRepo.add(masterOnlyFile);
+            var updatedMasterHash = CheckableRepository.appendAndCommit(localRepo, "Master change");
+            localRepo.push(updatedMasterHash, author.url(), "master");
+            localRepo.merge(editHash, "ours");
+            var mergeCommit = localRepo.commit("Merged edit", "duke", "duke@openjdk.java.net");
+            var mergeOnlyFile = Path.of("mergeonly.txt");
+            Files.writeString(localRepo.root().resolve(mergeOnlyFile), "Only added in the merge");
+            localRepo.add(mergeOnlyFile);
+            Files.writeString(localRepo.root().resolve(reviewFile), "Overwriting the conflict resolution");
+            localRepo.add(reviewFile);
+            var appendedCommit = localRepo.amend("Updated merge commit", "duke", "duke@openjdk.java.net");
+            localRepo.push(appendedCommit, author.url(), "edit", true);
+
+            // Make a merge PR
+            var pr = credentials.createPullRequest(archive, "master", "edit", "Merge edit");
+            pr.setBody("This is now ready");
+
+            // Run an archive pass
+            TestBotRunner.runPeriodicItems(mlBot);
+            listServer.processIncoming();
+
+            // The archive should contain a merge style webrev
+            Repository.materialize(archiveFolder.path(), archive.url(), "archive");
+            assertTrue(archiveContains(archiveFolder.path(), "webrevs contain only the adjustments"));
+            assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/webrev.00.0"));
+            assertTrue(archiveContains(archiveFolder.path(), "3 lines in 2 files changed: 1 ins; 1 del; 1 mod"));
+
+            // The PR should contain a webrev comment
+            assertEquals(1, pr.comments().size());
+            var webrevComment = pr.comments().get(0);
+            assertTrue(webrevComment.body().contains("Merge target"));
+            assertTrue(webrevComment.body().contains("Merge source"));
+        }
+    }
+
     @Test
     void skipAddingExistingWebrev(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory();
              var archiveFolder = new TemporaryDirectory();
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/WebrevStorageTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/WebrevStorageTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/WebrevStorageTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/WebrevStorageTests.java
@@ -66,22 +66,22 @@
 
             var prFolder = tempFolder.path().resolve("pr");
             var prRepo = Repository.materialize(prFolder, pr.repository().url(), "edit");
             var scratchFolder = tempFolder.path().resolve("scratch");
             var generator = storage.generator(pr, prRepo, scratchFolder);
-            generator.generate(masterHash, editHash, "00");
+            generator.generate(masterHash, editHash, "00", WebrevDescription.Type.FULL);
 
             // Check that the web link has been verified now and followed the redirect
             assertTrue(webrevServer.isChecked());
             assertTrue(webrevServer.isRedirectFollowed());
 
             // Update the local repository and check that the webrev has been generated
             Repository.materialize(repoFolder, archive.url(), "webrev");
             assertTrue(Files.exists(repoFolder.resolve("test/" + pr.id() + "/webrev.00/index.html")));
 
             // Create it again - it will overwrite the previous one
-            generator.generate(masterHash, editHash, "00");
+            generator.generate(masterHash, editHash, "00", WebrevDescription.Type.FULL);
             Repository.materialize(repoFolder, archive.url(), "webrev");
             assertTrue(Files.exists(repoFolder.resolve("test/" + pr.id() + "/webrev.00/index.html")));
         }
     }
 
@@ -119,11 +119,11 @@
 
             var prFolder = tempFolder.path().resolve("pr");
             var prRepo = Repository.materialize(prFolder, pr.repository().url(), "edit");
             var scratchFolder = tempFolder.path().resolve("scratch");
             var generator = storage.generator(pr, prRepo, scratchFolder);
-            generator.generate(masterHash, editHash, "00");
+            generator.generate(masterHash, editHash, "00", WebrevDescription.Type.FULL);
 
             // Update the local repository and check that the webrev has been generated
             Repository.materialize(repoFolder, archive.url(), "webrev");
             assertTrue(Files.exists(repoFolder.resolve("test/" + pr.id() + "/webrev.00/index.html")));
             assertTrue(Files.size(repoFolder.resolve("test/" + pr.id() + "/webrev.00/large.txt")) > 0);
diff a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
@@ -124,23 +124,30 @@
         public void generate(Hash tailEnd) throws IOException {
             generate(tailEnd, null);
         }
 
         public void generate(Hash tailEnd, Hash head) throws IOException {
+            var diff = head == null ?
+                    repository.diff(tailEnd, files) :
+                    repository.diff(tailEnd, head, files);
+            generate(diff, tailEnd, head);
+        }
+
+        public void generate(Diff diff) throws IOException {
+            generate(diff, diff.from(), diff.to());
+        }
+
+        private void generate(Diff diff, Hash tailEnd, Hash head) throws IOException {
             Files.createDirectories(output);
 
             copyResource(ANCNAV_HTML);
             copyResource(ANCNAV_JS);
             copyResource(CSS);
             copyResource(ICON);
 
-            var diff = head == null ?
-                repository.diff(tailEnd, files) :
-                repository.diff(tailEnd, head, files);
-            var patchFile = output.resolve(Path.of(title).getFileName().toString() + ".patch");
-
             var patches = diff.patches();
+            var patchFile = output.resolve(Path.of(title).getFileName().toString() + ".patch");
             if (files != null && !files.isEmpty()) {
                 // Sort the patches according to how they are listed in the `files` list.
                 var byTargetPath = new HashMap<Path, Patch>();
                 var bySourcePath = new HashMap<Path, Patch>();
                 for (var patch : patches) {
