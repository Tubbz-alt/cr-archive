diff a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
--- a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
+++ b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
@@ -187,20 +187,40 @@
 
         private final HostedRepository fromRepo;
         private final Branch fromBranch;
         private final Branch toBranch;
         private final Frequency frequency;
+        private final String name;
+        private final List<String> dependencies;
 
         Spec(HostedRepository fromRepo, Branch fromBranch, Branch toBranch) {
-            this(fromRepo, fromBranch, toBranch, null);
+            this(fromRepo, fromBranch, toBranch, null, null, List.of());
+        }
+
+        Spec(HostedRepository fromRepo, Branch fromBranch, Branch toBranch, String name) {
+            this(fromRepo, fromBranch, toBranch, null, name, List.of());
+        }
+
+        Spec(HostedRepository fromRepo, Branch fromBranch, Branch toBranch, String name, List<String> dependencies) {
+            this(fromRepo, fromBranch, toBranch, null, name, dependencies);
         }
 
         Spec(HostedRepository fromRepo, Branch fromBranch, Branch toBranch, Frequency frequency) {
+            this(fromRepo, fromBranch, toBranch, frequency, null, List.of());
+        }
+
+        Spec(HostedRepository fromRepo, Branch fromBranch, Branch toBranch, Frequency frequency, String name) {
+            this(fromRepo, fromBranch, toBranch, frequency, name, List.of());
+        }
+
+        Spec(HostedRepository fromRepo, Branch fromBranch, Branch toBranch, Frequency frequency, String name, List<String> dependencies) {
             this.fromRepo = fromRepo;
             this.fromBranch = fromBranch;
             this.toBranch = toBranch;
             this.frequency = frequency;
+            this.name = name;
+            this.dependencies = dependencies;
         }
 
         HostedRepository fromRepo() {
             return fromRepo;
         }
@@ -214,10 +234,18 @@
         }
 
         Optional<Frequency> frequency() {
             return Optional.ofNullable(frequency);
         }
+
+        Optional<String> name() {
+            return Optional.ofNullable(name);
+        }
+
+        List<String> dependencies() {
+            return dependencies;
+        }
     }
 
     private static void deleteDirectory(Path dir) throws IOException {
         Files.walk(dir)
              .map(Path::toFile)
@@ -263,10 +291,11 @@
                     new IllegalStateException("Can't get well-known repository " + target.name())
             );
             var prs = prTarget.pullRequests();
             var currentUser = prTarget.forge().currentUser();
 
+            var unmerged = new HashSet<String>();
             for (var spec : specs) {
                 var toBranch = spec.toBranch();
                 var fromRepo = spec.fromRepo();
                 var fromBranch = spec.fromBranch();
 
@@ -395,12 +424,25 @@
                             shouldMerge = false;
                         }
                     }
                 }
 
+                if (spec.dependencies().stream().anyMatch(unmerged::contains)) {
+                    var failed = spec.dependencies()
+                                     .stream()
+                                     .filter(unmerged::contains)
+                                     .collect(Collectors.toList());
+                    log.info("Will not merge because the following dependencies did not merge successfully: " +
+                             String.join(", ", failed));
+                    shouldMerge = false;
+                }
+
                 if (!shouldMerge) {
                     log.info("Will not merge " + fromRepo.name() + ":" + fromBranch.name() + " to " + toBranch.name());
+                    if (spec.name().isPresent()) {
+                        unmerged.add(spec.name().get());
+                    }
                     continue;
                 }
 
                 // Checkout the branch to merge into
                 repo.checkout(toBranch, false);
@@ -445,10 +487,13 @@
                         // the next run.
                         deleteDirectory(dir);
                         repo = cloneAndSyncFork(dir);
                     }
                 } else {
+                    if (spec.name().isPresent()) {
+                        unmerged.add(spec.name().get());
+                    }
                     log.info("Got error: " + error.getMessage());
                     log.info("Aborting unsuccesful merge");
                     var status = repo.status();
                     repo.abortMerge();
 
@@ -475,20 +520,20 @@
                     message.add("this is an _automatically_ generated pull request to notify you that there " +
                                 are + " " + numCommits + " commit" + s + " from the branch `" + fromDesc + "`" +
                                 "that can **not** be merged into the branch `" + toBranch.name() + "`:");
 
                     message.add("");
-                    var unmerged = status.stream().filter(entry -> entry.status().isUnmerged()).collect(Collectors.toList());
-                    if (unmerged.size() <= 10) {
-                        var files = unmerged.size() > 1 ? "files" : "file";
+                    var unmergedFiles = status.stream().filter(entry -> entry.status().isUnmerged()).collect(Collectors.toList());
+                    if (unmergedFiles.size() <= 10) {
+                        var files = unmergedFiles.size() > 1 ? "files" : "file";
                         message.add("The following " + files + " contains merge conflicts:");
                         message.add("");
-                        for (var fileStatus : unmerged) {
+                        for (var fileStatus : unmergedFiles) {
                             message.add("- " + fileStatus.source().path().orElseThrow());
                         }
                     } else {
-                        message.add("Over " + unmerged.size() + " files contains merge conflicts.");
+                        message.add("Over " + unmergedFiles.size() + " files contains merge conflicts.");
                     }
                     message.add("");
 
                     var project = JCheckConfiguration.from(repo, head).map(conf -> conf.general().project());
                     if (project.isPresent()) {
diff a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBotFactory.java b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBotFactory.java
--- a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBotFactory.java
+++ b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBotFactory.java
@@ -28,10 +28,11 @@
 import java.io.*;
 import java.nio.file.Files;
 import java.time.DayOfWeek;
 import java.time.Month;
 import java.util.*;
+import java.util.stream.Collectors;
 import java.util.logging.Logger;
 
 public class MergeBotFactory implements BotFactory {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
 
@@ -178,11 +179,17 @@
                     } else {
                         throw new IllegalStateException("Unexpected interval: " + interval);
                     }
                 }
 
-                specs.add(new MergeBot.Spec(fromRepo, fromBranch, toBranch, frequency));
+                var name = spec.get("name").asString();
+                var dependencies = spec.get("dependencies")
+                                       .stream()
+                                       .map(e -> e.asString())
+                                       .collect(Collectors.toList());
+
+                specs.add(new MergeBot.Spec(fromRepo, fromBranch, toBranch, frequency, name, dependencies));
             }
 
             bots.add(new MergeBot(storage, targetRepo, forkRepo, specs));
         }
         return bots;
