diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/MergeMessageCheck.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/MergeMessageCheck.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/MergeMessageCheck.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/MergeMessageCheck.java
@@ -25,24 +25,25 @@
 import org.openjdk.skara.vcs.Commit;
 import org.openjdk.skara.vcs.openjdk.CommitMessage;
 
 import java.util.Iterator;
 import java.util.logging.Logger;
+import java.util.regex.Pattern;
 
 public class MergeMessageCheck extends CommitCheck {
     private final Logger log = Logger.getLogger("org.openjdk.skara.jcheck.merge");
     @Override
     Iterator<Issue> check(Commit commit, CommitMessage message, JCheckConfiguration conf) {
         if (!commit.isMerge()) {
             return iterator();
         }
 
-        var expected = conf.checks().merge().message();
-        if (commit.message().size() != 1 || !commit.message().get(0).equals(expected)) {
+        var pattern = Pattern.compile(conf.checks().merge().message());
+        if (commit.message().size() != 1 || !pattern.matcher(commit.message().get(0)).matches()) {
             var metadata = CommitIssue.metadata(commit, message, conf, this);
             log.finer("issue: wrong merge message");
-            return iterator(new MergeMessageIssue(expected, metadata));
+            return iterator(new MergeMessageIssue(pattern.toString(), metadata));
         }
 
         return iterator();
     }
 
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/MergeMessageCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/MergeMessageCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/MergeMessageCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/MergeMessageCheckTests.java
@@ -101,6 +101,18 @@
         var issues = toList(check.check(commit, message, conf()));
 
         assertEquals(1, issues.size());
         assertTrue(issues.get(0) instanceof MergeMessageIssue);
     }
+
+    @Test
+    void usingRegexShouldWork() throws IOException {
+        var commit = commit(List.of("Merge 'feature' into 'master'"));
+        var message = message(commit);
+        var check = new MergeMessageCheck();
+        var conf = new ArrayList<>(CONFIGURATION);
+        conf.set(conf.size() - 1, "message = Merge \\'[a-z]+\\' into \\'[a-z]+\\'");
+        var issues = toList(check.check(commit, message, JCheckConfiguration.parse(conf)));
+
+        assertEquals(List.of(), issues);
+    }
 }
