diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
@@ -57,19 +57,19 @@
 
     private void showHelp(PrintWriter reply) {
         reply.println("Command syntax:");
         reply.println(" * `/" + name + " [add|remove] <id>[,<id>,...]`");
         reply.println(" * `/" + name + " [add] <id>: <description>`");
-        reply.println(" * `/" + name + " create [pX] [type] <component> [subcomponent]");
+        reply.println(" * `/" + name + " create [pX] <component> [subcomponent]");
         reply.println();
         reply.println("Some examples:");
         reply.println();
         reply.println(" * `/" + name + " add JDK-1234567,4567890`");
         reply.println(" * `/" + name + " remove JDK-4567890`");
         reply.println(" * `/" + name + " 1234567: Use this exact title`");
         reply.println(" * `/" + name + " create hotspot jfr");
-        reply.println(" * `/" + name + " create P4 enhancement core-libs java.nio");
+        reply.println(" * `/" + name + " create P4 core-libs java.nio");
         reply.println();
         reply.print("If issues are specified only by their ID, the title will be automatically retrieved from JBS. ");
         reply.print("The project prefix (`JDK-` in the above examples) is optional. ");
         reply.println("Separate multiple issue IDs using either spaces or commas.");
     }
@@ -210,12 +210,10 @@
                 reply.println(currentList);
             }
         }
     }
 
-    private static final Set<String> allowedTypes = Set.of("bug", "new", "enhancement");
-
     private void createIssue(PullRequestBot bot, PullRequest pr, String args, CensusInstance censusInstance, HostUser author, PrintWriter reply) {
         if (!censusInstance.isAuthor(author)) {
             reply.println("Only [Authors](https://openjdk.java.net/bylaws#author) are allowed to create issues.");
             return;
         }
@@ -224,41 +222,23 @@
         if (currentTitleIssue.isPresent()) {
             reply.println("The PR title already references an issue (`" + currentTitleIssue.get().shortId() + "`) - will not create a new one.");
             return;
         }
 
-        var argSplit = new LinkedList<>(Arrays.asList(args.split("\\s+")));
+        var argSplit = new LinkedList<>(Arrays.asList(args.split("(?:\\s+|/)")));
         argSplit.pollFirst();
 
         String priority = null;
-        String type = null;
         String subComponent = null;
 
         // First argument can be a priority
         var next = argSplit.pollFirst();
         if (next != null && next.matches("^[pP]\\d$")) {
             priority = next.substring(1);
             next = argSplit.pollFirst();
         }
 
-        // Second (and third) can be a known issue type
-        if (next != null && allowedTypes.contains(next.toLowerCase())) {
-            if (next.equals("new")) {
-                next = argSplit.pollFirst();
-                if (next != null && next.toLowerCase().equals("feature")) {
-                    type = "new feature";
-                } else {
-                    // Undo the halfway mismatch
-                    argSplit.offerFirst(next);
-                    argSplit.offerFirst("new");
-                }
-            } else {
-                type = next.toLowerCase();
-            }
-            next = argSplit.pollFirst();
-        }
-
         // Next argument is the mandatory component name
         if (next == null) {
             showHelp(reply);
             return;
         }
@@ -276,13 +256,11 @@
             properties.put("customfield_10008", JSON.of(subComponent));
         }
         if (priority != null) {
             properties.put("priority", JSON.of(priority));
         }
-        if (type != null) {
-            properties.put("issuetype", JSON.of(type));
-        }
+        properties.put("issuetype", JSON.of("enhancement"));
 
         var bodyText = PullRequestBody.parse(pr).bodyText();
         try {
             var issue = bot.issueProject().createIssue(pr.title(), bodyText.lines().collect(Collectors.toList()), properties);
             reply.println("The issue `" + issue.id() + "` was successfully created - the title of this PR will be updated to reference it. ");
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IssueTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IssueTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IssueTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/IssueTests.java
@@ -470,11 +470,11 @@
 
             // Reset and try some more
             pr.setTitle("This is another pull request");
 
             // Create an issue
-            pr.addComment("/issue create P4 enhancement hotspot");
+            pr.addComment("/issue create P4 hotspot");
             TestBotRunner.runPeriodicItems(prBot);
 
             // Verify it
             issue = issueFromLastComment(pr, issues);
             assertEquals("This is another pull request", issue.title());
@@ -484,18 +484,18 @@
 
             // Reset and try some more
             pr.setTitle("This is yet another pull request");
 
             // Create an issue
-            pr.addComment("/issue create new feature core-libs java.io");
+            pr.addComment("/issue create core-libs/java.io");
             TestBotRunner.runPeriodicItems(prBot);
 
             // Verify it
             issue = issueFromLastComment(pr, issues);
             assertEquals("This is yet another pull request", issue.title());
             assertEquals("core-libs", issue.properties().get("components").asArray().get(0).asString());
-            assertEquals("new feature", issue.properties().get("issuetype").asString().toLowerCase());
+            assertEquals("enhancement", issue.properties().get("issuetype").asString().toLowerCase());
             assertEquals("java.io", issue.properties().get("customfield_10008").asString());
         }
     }
 
     @Test
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
@@ -243,11 +243,10 @@
                                .get("issuetypes").stream()
                                .filter(i -> i.get("id").asString().equals(allProperties.get("issuetype").get("id").asString()))
                                .findAny().orElseThrow()
                                .get("fields")
                                .asObject();
-        System.out.println("Allowed fields " + fields);
 
         var field = fields.get(name);
         var componentIds = allProperties.get("components").stream()
                                         .map(c -> c.get("id").asString())
                                         .map(Integer::parseInt)
