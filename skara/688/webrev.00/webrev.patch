diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java
@@ -44,23 +44,25 @@
     private final boolean commitLink;
     private final URI commitIcon;
     private final boolean setFixVersion;
     private final Map<String, String> fixVersions;
     private final JbsBackport jbsBackport;
+    private final boolean prOnly;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.notify");
 
     IssueNotifier(IssueProject issueProject, boolean reviewLink, URI reviewIcon, boolean commitLink, URI commitIcon,
-            boolean setFixVersion, Map<String, String> fixVersions, JbsBackport jbsBackport) {
+            boolean setFixVersion, Map<String, String> fixVersions, JbsBackport jbsBackport, boolean prOnly) {
         this.issueProject = issueProject;
         this.reviewLink = reviewLink;
         this.reviewIcon = reviewIcon;
         this.commitLink = commitLink;
         this.commitIcon = commitIcon;
         this.setFixVersion = setFixVersion;
         this.fixVersions = fixVersions;
         this.jbsBackport = jbsBackport;
+        this.prOnly = prOnly;
     }
 
     static IssueNotifierBuilder newBuilder() {
         return new IssueNotifierBuilder();
     }
@@ -86,11 +88,13 @@
     }
 
     @Override
     public void attachTo(Emitter e) {
         e.registerPullRequestListener(this);
-        e.registerRepositoryListener(this);
+        if (!prOnly) {
+            e.registerRepositoryListener(this);
+        }
     }
 
     @Override
     public void onIntegratedPullRequest(PullRequest pr, Hash hash)  {
         var repository = pr.repository();
@@ -115,10 +119,24 @@
                     linkBuilder.iconTitle("Commit");
                     linkBuilder.iconUrl(commitIcon);
                 }
                 issue.addLink(linkBuilder.build());
             }
+
+            // If prOnly is false, this is instead done when processing commits
+            if (prOnly) {
+                if (issue.state() == Issue.State.OPEN) {
+                    issue.setState(Issue.State.RESOLVED);
+                    if (issue.assignees().isEmpty()) {
+                        var username = findIssueUsername(commit);
+                        if (username.isPresent()) {
+                            var assignee = issueProject.issueTracker().user(username.get());
+                            assignee.ifPresent(hostUser -> issue.setAssignees(List.of(hostUser)));
+                        }
+                    }
+                }
+            }
         }
     }
 
     @Override
     public void onNewIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifierBuilder.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifierBuilder.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifierBuilder.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifierBuilder.java
@@ -35,10 +35,11 @@
     private URI commitIcon = null;
     private boolean setFixVersion = false;
     private Map<String, String> fixVersions = null;
     private JbsVault vault = null;
     private String securityLevel = null;
+    private boolean prOnly = true;
 
     IssueNotifierBuilder issueProject(IssueProject issueProject) {
         this.issueProject = issueProject;
         return this;
     }
@@ -62,10 +63,11 @@
         this.commitIcon = commitIcon;
         return this;
     }
 
     public IssueNotifierBuilder setFixVersion(boolean setFixVersion) {
+        prOnly = false;
         this.setFixVersion = setFixVersion;
         return this;
     }
 
     public IssueNotifierBuilder fixVersions(Map<String, String> fixVersions) {
@@ -81,11 +83,16 @@
     public IssueNotifierBuilder securityLevel(String securityLevel) {
         this.securityLevel = securityLevel;
         return this;
     }
 
+    public IssueNotifierBuilder prOnly(boolean prOnly) {
+        this.prOnly = prOnly;
+        return this;
+    }
+
     IssueNotifier build() {
         var jbsBackport = new JbsBackport(issueProject.webUrl(), vault, securityLevel);
         return new IssueNotifier(issueProject, reviewLink, reviewIcon, commitLink, commitIcon,
-                                 setFixVersion, fixVersions, jbsBackport);
+                                 setFixVersion, fixVersions, jbsBackport, prOnly);
     }
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifierFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifierFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifierFactory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifierFactory.java
@@ -61,8 +61,12 @@
 
         if (notifierConfiguration.contains("security")) {
             builder.securityLevel(notifierConfiguration.get("security").asString());
         }
 
+        if (notifierConfiguration.contains("pronly")) {
+            builder.prOnly(notifierConfiguration.get("pronly").asBoolean());
+        }
+
         return builder.build();
     }
 }
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java
@@ -312,33 +312,15 @@
             var repoFolder = tempFolder.path().resolve("repo");
             var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());
             credentials.commitLock(localRepo);
             localRepo.pushAll(repo.url());
 
-            var tagStorage = createTagStorage(repo);
-            var branchStorage = createBranchStorage(repo);
-            var prStateStorage = createPullRequestStateStorage(repo);
-            var storageFolder = tempFolder.path().resolve("storage");
-
             var issueProject = credentials.getIssueProject();
+            var storageFolder = tempFolder.path().resolve("storage");
             var reviewIcon = URI.create("http://www.example.com/review.png");
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile(".*"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .integratorId(repo.forge().currentUser().id())
-                                     .build();
-            var updater = IssueNotifier.newBuilder()
-                                      .issueProject(issueProject)
-                                      .reviewIcon(reviewIcon)
-                                      .commitLink(true)
-                                      .commitIcon(reviewIcon)
-                                      .build();
-            updater.attachTo(notifyBot);
+            var jbsNotifierConfig = JSON.object().put("reviews", JSON.object().put("icon", reviewIcon.toString()));
+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create("notify", JSON.object());
 
             // Initialize history
             localRepo.push(localRepo.resolve("master").orElseThrow(), repo.url(), "other");
             TestBotRunner.runPeriodicItems(notifyBot);
 
@@ -375,10 +357,13 @@
 
             // No additional link should have been created
             updatedIssue = issueProject.issue(issue.id()).orElseThrow();
             links = updatedIssue.links();
             assertEquals(2, links.size());
+
+            // And no comments should have been made
+            assertEquals(0, issue.comments().size());
         }
     }
 
     @Test
     void testIssue(TestInfo testInfo) throws IOException {
