diff a/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java b/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
@@ -32,17 +32,53 @@
 import org.openjdk.skara.version.Version;
 
 import java.io.IOException;
 import java.net.*;
 import java.nio.file.*;
+import java.nio.charset.StandardCharsets;
 import java.util.*;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 import java.util.logging.Level;
 
 public class GitJCheck {
-    private static final Pattern urlPattern = Pattern.compile("^https?://.*", Pattern.CASE_INSENSITIVE);
+    static String gitConfig(String key) {
+        try {
+            var pb = new ProcessBuilder("git", "config", key);
+            pb.redirectOutput(ProcessBuilder.Redirect.PIPE);
+            pb.redirectError(ProcessBuilder.Redirect.DISCARD);
+            var p = pb.start();
+
+            var output = new String(p.getInputStream().readAllBytes(), StandardCharsets.UTF_8);
+            var res = p.waitFor();
+            if (res != 0) {
+                return null;
+            }
+
+            return output == null ? null : output.replace("\n", "");
+        } catch (InterruptedException e) {
+            return null;
+        } catch (IOException e) {
+            return null;
+        }
+    }
+
+    static String getOption(String name, Arguments arguments) {
+        if (arguments.contains(name)) {
+            return arguments.get(name).asString();
+        }
+
+        return gitConfig("jcheck." + name);
+    }
+
+    static boolean getSwitch(String name, Arguments arguments) {
+        if (arguments.contains(name)) {
+            return true;
+        }
+        var value = gitConfig("jcheck." + name);
+        return value != null && value.toLowerCase().equals("true");
+    }
 
     public static int run(String[] args) throws IOException {
         var flags = List.of(
             Option.shortcut("r")
                   .fullname("rev")
@@ -62,22 +98,19 @@
             Option.shortcut("")
                   .fullname("census")
                   .describe("FILE")
                   .helptext("Use the specified census (default: https://openjdk.java.net/census.xml)")
                   .optional(),
+            Option.shortcut("")
+                  .fullname("ignore")
+                  .describe("CHECKS")
+                  .helptext("Ignore errors from checks with the given name")
+                  .optional(),
             Switch.shortcut("m")
                   .fullname("mercurial")
                   .helptext("Deprecated: force use of mercurial")
                   .optional(),
-            Switch.shortcut("")
-                  .fullname("local")
-                  .helptext("Run jcheck in \"local\" mode")
-                  .optional(),
-            Switch.shortcut("")
-                  .fullname("pull-request")
-                  .helptext("Run jcheck in \"pull request\" mode")
-                  .optional(),
             Switch.shortcut("v")
                   .fullname("verbose")
                   .helptext("Turn on verbose output")
                   .optional(),
             Switch.shortcut("")
@@ -119,11 +152,11 @@
         var repo = repository.get();
         if (repo.isEmpty()) {
             return 1;
         }
 
-        var isMercurial = arguments.contains("mercurial");
+        var isMercurial = getSwitch("mercurial", arguments);
         var defaultRange = isMercurial ? "tip" : "HEAD^..HEAD";
         var range = arguments.get("rev").orString(defaultRange);
         if (!repo.isValidRevisionRange(range)) {
             System.err.println(String.format("error: %s is not a valid range of revisions,", range));
             if (isMercurial) {
@@ -132,60 +165,56 @@
                 System.err.println("       see 'man 7 gitrevisions' for how to specify revisions");
             }
             return 1;
         }
 
-        var whitelistFile = arguments.get("whitelist").or(".jcheck/whitelist.json").via(Path::of);
+        var whitelistOption = getOption("whitelist", arguments);
+        if (whitelistOption == null) {
+            whitelistOption = ".jcheck/whitelist.json";
+        }
+        var whitelistFile = Path.of(whitelistOption);
         var whitelist = new HashMap<String, Set<Hash>>();
         if (Files.exists(whitelistFile)) {
             var json = JSON.parse(Files.readString(whitelistFile));
             for (var field : json.fields()) {
                 var check = field.name();
                 var hashes = field.value().stream().map(JSONValue::asString).map(Hash::new).collect(Collectors.toSet());
                 whitelist.put(check, hashes);
             }
         }
 
-        var blacklistFile = arguments.get("blacklist").or(".jcheck/blacklist.json").via(Path::of);
+        var blacklistOption = getOption("blacklist", arguments);
+        if (blacklistOption == null) {
+            blacklistOption = ".jcheck/blacklist.json";
+        }
+        var blacklistFile = Path.of(blacklistOption);
         var blacklist = new HashSet<Hash>();
         if (Files.exists(blacklistFile)) {
             var json = JSON.parse(Files.readString(blacklistFile));
             json.get("commits").stream()
                                .map(JSONValue::asString)
                                .map(Hash::new)
                                .forEach(blacklist::add);
         }
 
-        var endpoint = arguments.get("census").orString(() -> {
-            var fallback = "https://openjdk.java.net/census.xml";
-            try {
-                var config = repo.config("jcheck.census");
-                return config.isEmpty() ? fallback : config.get(0);
-            } catch (IOException e) {
-                return fallback;
-            }
-        });
-        var census = !isURL(endpoint)
-                ? Census.parse(Path.of(endpoint))
-                : Census.from(URI.create(endpoint));
-        var isLocal = arguments.contains("local");
-        if (!isLocal) {
-            var lines = repo.config("jcheck.local");
-            if (lines.size() == 1) {
-                var value = lines.get(0).toUpperCase();
-                isLocal = value.equals("TRUE") || value.equals("1") || value.equals("ON");
-            }
+        var endpoint = getOption("census", arguments);
+        if (endpoint == null) {
+            endpoint = "https://openjdk.java.net/census.xml";
         }
-        var isPullRequest = arguments.contains("pull-request");
-        if (!isPullRequest) {
-            var lines = repo.config("jcheck.pull-request");
-            if (lines.size() == 1) {
-                var value = lines.get(0).toUpperCase();
-                isLocal = value.equals("TRUE") || value.equals("1") || value.equals("ON");
+        var census = endpoint.startsWith("http://") || endpoint.startsWith("https://") ?
+            Census.from(URI.create(endpoint)) :
+            Census.parse(Path.of(endpoint));
+
+        var ignore = new HashSet<String>();
+        var ignoreOption = getOption("ignore", arguments);
+        if (ignoreOption != null) {
+            for (var check : ignoreOption.split(",")) {
+                ignore.add(check.trim());
             }
         }
-        var visitor = new JCheckCLIVisitor(isLocal, isPullRequest);
+
+        var visitor = new JCheckCLIVisitor(ignore);
         try (var errors = JCheck.check(repo, census, CommitMessageParsers.v1, range, whitelist, blacklist)) {
             for (var error : errors) {
                 error.accept(visitor);
             }
         }
@@ -193,10 +222,6 @@
     }
 
     public static void main(String[] args) throws IOException {
         System.exit(run(args));
     }
-
-    private static boolean isURL(String s) {
-        return urlPattern.matcher(s).matches();
-    }
 }
diff a/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java b/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
--- a/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
@@ -25,124 +25,130 @@
 import org.openjdk.skara.jcheck.*;
 import org.openjdk.skara.vcs.Hash;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Set;
 import java.util.stream.Collectors;
 
 class JCheckCLIVisitor implements IssueVisitor {
-    private final boolean isLocal;
-    private final boolean isPullRequest;
+    private final Set<String> ignore;
     private boolean hasDisplayedErrors;
 
     public JCheckCLIVisitor() {
-        this(false, false);
+        this(Set.of());
     }
 
-    public JCheckCLIVisitor(boolean isLocal, boolean isPullRequest) {
-        this.isLocal = isLocal;
-        this.isPullRequest = isPullRequest;
+    public JCheckCLIVisitor(Set<String> ignore) {
+        this.ignore = ignore;
         this.hasDisplayedErrors = false;
     }
 
-    private void println(Issue i, String message) {
-        System.out.print("[");
-        System.out.print(i.check().name());
-        System.out.print("] ");
-        System.out.print(i.severity());
-        System.out.print(": ");
+    private String println(Issue i, String message) {
+        var prefix = "[" + i.check().name() + "] " + i.severity() + ": ";
+        System.out.print(prefix);
         System.out.println(message);
+        return prefix;
     }
 
-    private void println(CommitIssue i, String message) {
-        System.out.print("[");
-        System.out.print(i.check().name());
-        System.out.print("] ");
-        System.out.print(i.severity());
-        System.out.print(": ");
-        System.out.print(i.commit().hash().abbreviate());
-        System.out.print(": ");
+    private String println(CommitIssue i, String message) {
+        var prefix = "[" + i.check().name() + "] " + i.severity() + ": " +
+                     i.commit().hash().abbreviate() + ": ";
+        System.out.print(prefix);
         System.out.println(message);
+        return prefix;
     }
 
     public void visit(DuplicateIssuesIssue i) {
-        var id = i.issue().id();
-        var hash = i.commit().hash().abbreviate();
-        var other = i.hashes()
-                     .stream()
-                     .map(Hash::abbreviate)
-                     .map(s -> "         - " + s)
-                     .collect(Collectors.toList());
-        println(i, "issue id '" + id + "' in commit " + hash + " is already used in commits:");
-        other.forEach(System.out::println);
-        hasDisplayedErrors = true;
+        if (!ignore.contains(i.check().name())) {
+            var id = i.issue().id();
+            var hash = i.commit().hash().abbreviate();
+            var other = i.hashes()
+                         .stream()
+                         .map(Hash::abbreviate)
+                         .map(s -> "         - " + s)
+                         .collect(Collectors.toList());
+            println(i, "issue id '" + id + "' in commit " + hash + " is already used in commits:");
+            other.forEach(System.out::println);
+            hasDisplayedErrors = true;
+        }
     }
 
     public void visit(TagIssue i) {
-        println(i, "illegal tag name: " + i.tag().name());
-        hasDisplayedErrors = true;
+        if (!ignore.contains(i.check().name())) {
+            println(i, "illegal tag name: " + i.tag().name());
+            hasDisplayedErrors = true;
+        }
     }
 
     public void visit(BranchIssue i) {
-        if (!isLocal && !isPullRequest) {
+        if (!ignore.contains(i.check().name())) {
             println(i, "illegal branch name: " + i.branch().name());
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(SelfReviewIssue i) {
-        println(i, "self-reviews are not allowed");
-        hasDisplayedErrors = true;
+        if (!ignore.contains(i.check().name())) {
+            println(i, "self-reviews are not allowed");
+            hasDisplayedErrors = true;
+        }
     }
 
     public void visit(TooFewReviewersIssue i) {
-        if (!isLocal && !isPullRequest) {
+        if (!ignore.contains(i.check().name())) {
             var required = i.numRequired();
             var actual = i.numActual();
             var reviewers = required == 1 ? " reviewer" : " reviewers";
             println(i, required + reviewers + " required, found " + actual);
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(InvalidReviewersIssue i) {
-        if (!isLocal && !isPullRequest) {
+        if (!ignore.contains(i.check().name())) {
             var invalid = String.join(", ", i.invalid());
             var wording = i.invalid().size() == 1 ? " is" : " are";
             println(i, invalid + wording + " not part of OpenJDK");
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(MergeMessageIssue i) {
-        println(i, "merge commits should only use the commit message '" + i.expected() + "'");
-        hasDisplayedErrors = true;
+        if (!ignore.contains(i.check().name())) {
+            println(i, "merge commits should only use the commit message '" + i.expected() + "'");
+            hasDisplayedErrors = true;
+        }
     }
 
     public void visit(HgTagCommitIssue i) {
-        hasDisplayedErrors = true;
-        switch (i.error()) {
-            case TOO_MANY_LINES:
-                println(i, "message should only be one line");
-                return;
-            case BAD_FORMAT:
-                println(i, "message should be of format 'Added tag <tag> for changeset <hash>'");
-                return;
-            case TOO_MANY_CHANGES:
-                println(i, "should only add one line to .hgtags");
-                return;
-            case TAG_DIFFERS:
-                println(i, "tag differs in commit message and .hgtags");
-                return;
+        if (!ignore.contains(i.check().name())) {
+            hasDisplayedErrors = true;
+            switch (i.error()) {
+                case TOO_MANY_LINES:
+                    println(i, "message should only be one line");
+                    return;
+                case BAD_FORMAT:
+                    println(i, "message should be of format 'Added tag <tag> for changeset <hash>'");
+                    return;
+                case TOO_MANY_CHANGES:
+                    println(i, "should only add one line to .hgtags");
+                    return;
+                case TAG_DIFFERS:
+                    println(i, "tag differs in commit message and .hgtags");
+                    return;
+            }
         }
     }
 
     public void visit(CommitterIssue i) {
-        var committer = i.commit().committer().name();
-        var project = i.project().name();
-        println(i, committer + " is not committer in project " + project);
-        hasDisplayedErrors = true;
+        if (!ignore.contains(i.check().name())) {
+            var committer = i.commit().committer().name();
+            var project = i.project().name();
+            println(i, committer + " is not committer in project " + project);
+            hasDisplayedErrors = true;
+        }
     }
 
     private static class WhitespaceRange {
         private final WhitespaceIssue.Whitespace kind;
         private final int start;
@@ -189,77 +195,88 @@
 
         return merged;
     }
 
     public void visit(WhitespaceIssue i) {
-        var hex = i.commit().hash().abbreviate();
-        var prefix = i.severity() + ": " + hex + ": ";
-        var indent = prefix.replaceAll(".", " ");
-        var pos = i.path() + ":" + i.row();
-
-        System.out.println(prefix + i.describe() + " in " + pos);
-        System.out.println(indent + i.escapeLine());
-        System.out.println(indent + i.hints());
-        hasDisplayedErrors = true;
+        if (!ignore.contains(i.check().name())) {
+            var pos = i.path() + ":" + i.row();
+            var prefix = println(i, i.describe() + " in " + pos);
+            var indent = prefix.replaceAll(".", " ");
+            System.out.println(indent + i.escapeLine());
+            System.out.println(indent + i.hints());
+            hasDisplayedErrors = true;
+        }
     }
 
     public void visit(MessageIssue i) {
-        if (!isPullRequest) {
+        if (!ignore.contains(i.check().name())) {
             println(i, "contains additional lines in commit message");
             for (var line : i.message().additional()) {
                 System.out.println("> " + line);
             }
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(IssuesIssue i) {
-        if (!isPullRequest) {
+        if (!ignore.contains(i.check().name())) {
             println(i, "missing reference to JBS issue in commit message");
             for (var line : i.commit().message()) {
                 System.out.println("> " + line);
             }
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(ExecutableIssue i) {
-        println(i, "file " + i.path() + " is executable");
-        hasDisplayedErrors = true;
+        if (!ignore.contains(i.check().name())) {
+            println(i, "file " + i.path() + " is executable");
+            hasDisplayedErrors = true;
+        }
     }
 
     public void visit(AuthorNameIssue i) {
-        println(i, "missing author name");
-        hasDisplayedErrors = true;
+        if (!ignore.contains(i.check().name())) {
+            println(i, "missing author name");
+            hasDisplayedErrors = true;
+        }
     }
 
     public void visit(AuthorEmailIssue i) {
-        println(i, "missing author email");
-        hasDisplayedErrors = true;
+        if (!ignore.contains(i.check().name())) {
+            println(i, "missing author email");
+            hasDisplayedErrors = true;
+        }
     }
 
     public void visit(CommitterNameIssue i) {
-        println(i, "missing committer name");
-        hasDisplayedErrors = true;
+        if (!ignore.contains(i.check().name())) {
+            println(i, "missing committer name");
+            hasDisplayedErrors = true;
+        }
     }
 
     public void visit(CommitterEmailIssue i) {
-        if (!isLocal && !isPullRequest) {
+        if (!ignore.contains(i.check().name())) {
             var domain = i.expectedDomain();
             println(i, "missing committer email from domain " + domain);
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(BlacklistIssue i) {
-        println(i, "commit is blacklisted");
-        hasDisplayedErrors = true;
+        if (!ignore.contains(i.check().name())) {
+            println(i, "commit is blacklisted");
+            hasDisplayedErrors = true;
+        }
     }
 
     public void visit(BinaryIssue i) {
-        println(i, "adds binary file: " + i.path().toString());
-        hasDisplayedErrors = true;
+        if (!ignore.contains(i.check().name())) {
+            println(i, "adds binary file: " + i.path().toString());
+            hasDisplayedErrors = true;
+        }
     }
 
     public boolean hasDisplayedErrors() {
         return hasDisplayedErrors;
     }
diff a/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrCreate.java b/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrCreate.java
--- a/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrCreate.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrCreate.java
@@ -260,11 +260,11 @@
             System.exit(1);
         }
 
         var shouldRunJCheck = getSwitch("jcheck", "create", arguments);
         if (shouldRunJCheck) {
-            var jcheckArgs = new String[]{ "--pull-request", "--rev", targetBranch + ".." + headRef };
+            var jcheckArgs = new String[]{ "--ignore=branches,committer,reviewers,issues", "--rev", targetBranch + ".." + headRef };
             var err = GitJCheck.run(jcheckArgs);
             if (err != 0) {
                 System.exit(err);
             }
         }
