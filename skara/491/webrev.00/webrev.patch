diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -222,12 +222,12 @@
         var checks = JCheck.checks(localRepo(), censusInstance.census(), localHash);
         return new PullRequestCheckIssueVisitor(checks);
     }
 
     void executeChecks(Hash localHash, CensusInstance censusInstance, PullRequestCheckIssueVisitor visitor, List<String> additionalConfiguration) throws Exception {
-        try (var issues = JCheck.check(localRepo(), censusInstance.census(), CommitMessageParsers.v1, "HEAD^!",
-                                       localHash, new HashMap<>(), new HashSet<>(), additionalConfiguration)) {
+        try (var issues = JCheck.check(localRepo(), censusInstance.census(), CommitMessageParsers.v1, localHash,
+                                       targetHash, additionalConfiguration)) {
             for (var issue : issues) {
                 issue.accept(visitor);
             }
         }
     }
diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
@@ -42,10 +42,11 @@
     private final String revisionRange;
     private final Map<String, Set<Hash>> whitelist;
     private final List<CommitCheck> commitChecks;
     private final List<RepositoryCheck> repositoryChecks;
     private final List<String> additionalConfiguration;
+    private final JCheckConfiguration overridingConfiguration;
     private final Logger log = Logger.getLogger("org.openjdk.skara.jcheck");
 
     private JCheckConfiguration cachedConfiguration = null;
 
     JCheck(ReadOnlyRepository repository,
@@ -54,17 +55,19 @@
            String revisionRange,
            Pattern allowedBranches,
            Pattern allowedTags,
            Map<String, Set<Hash>> whitelist,
            Set<Hash> blacklist,
-           List<String> additionalConfiguration) throws IOException {
+           List<String> additionalConfiguration,
+           JCheckConfiguration overridingConfiguration) throws IOException {
         this.repository = repository;
         this.census = census;
         this.parser = parser;
         this.revisionRange = revisionRange;
         this.whitelist = whitelist;
         this.additionalConfiguration = additionalConfiguration;
+        this.overridingConfiguration = overridingConfiguration;
 
         var utils = new Utilities();
         commitChecks = List.of(
             new AuthorCheck(),
             new CommitterCheck(census),
@@ -96,10 +99,13 @@
             throw new UncheckedIOException(e);
         }
     }
 
     private Optional<JCheckConfiguration> getConfigurationFor(Commit c) {
+        if (overridingConfiguration != null) {
+            return Optional.of(overridingConfiguration);
+        }
         var confPath = Paths.get(".jcheck/conf");
         var changesConfiguration = c.parentDiffs()
                                     .stream()
                                     .map(Diff::patches)
                                     .flatMap(List::stream)
@@ -221,73 +227,62 @@
                                 String branchRegex,
                                 String tagRegex,
                                 String revisionRange,
                                 Map<String, Set<Hash>> whitelist,
                                 Set<Hash> blacklist,
-                                List<String> additionalConfiguration) throws IOException {
+                                List<String> additionalConfiguration,
+                                JCheckConfiguration configuration) throws IOException {
 
         var defaultBranchRegex = "|" + repository.defaultBranch().name();
         var allowedBranches = Pattern.compile("^(?:" + branchRegex + defaultBranchRegex + ")$");
 
         var defaultTag = repository.defaultTag();
         var defaultTagRegex = defaultTag.isPresent() ? "|" + defaultTag.get().name() : "";
         var allowedTags = Pattern.compile("^(?:" + tagRegex + defaultTagRegex + ")$");
 
-        var jcheck = new JCheck(repository, census, parser, revisionRange, allowedBranches, allowedTags, whitelist, blacklist, additionalConfiguration);
+        var jcheck = new JCheck(repository, census, parser, revisionRange, allowedBranches, allowedTags, whitelist, blacklist, additionalConfiguration, configuration);
         return jcheck.issues();
     }
 
     public static Issues check(ReadOnlyRepository repository,
                                Census census,
                                CommitMessageParser parser,
-                               String revisionRange,
+                               Hash toCheck,
                                Hash configuration,
-                               Map<String, Set<Hash>> whitelist,
-                               Set<Hash> blacklist,
                                List<String> additionalConfiguration) throws IOException {
         if (repository.isEmpty()) {
             return new Issues(new ArrayList<Issue>().iterator(), null);
         }
 
-        var conf = parseConfiguration(repository, configuration, additionalConfiguration);
+        var conf = parseConfiguration(repository, configuration, additionalConfiguration).orElseThrow(() ->
+            new IllegalArgumentException("No .jcheck/conf present at hash " + configuration.hex())
+        );
 
-        var branchRegex = conf.isPresent() ?  conf.get().repository().branches() : ".*";
-        var tagRegex =  conf.isPresent() ?  conf.get().repository().tags() : ".*";
+        var branchRegex = conf.repository().branches();
+        var tagRegex = conf.repository().tags();
 
-        return check(repository, census, parser, branchRegex, tagRegex, revisionRange, whitelist, blacklist, additionalConfiguration);
+        return check(repository, census, parser, branchRegex, tagRegex, repository.range(toCheck), Map.of(), Set.of(), List.of(), conf);
     }
 
     public static Issues check(ReadOnlyRepository repository,
                                Census census,
                                CommitMessageParser parser,
                                String revisionRange,
-                               Hash configuration,
                                Map<String, Set<Hash>> whitelist,
                                Set<Hash> blacklist) throws IOException {
-        return check(repository, census, parser, revisionRange, configuration, whitelist, blacklist, List.of());
-    }
+        if (repository.isEmpty()) {
+            return new Issues(new ArrayList<Issue>().iterator(), null);
+        }
 
-    public static Issues check(ReadOnlyRepository repository,
-                               Census census,
-                               CommitMessageParser parser,
-                               String revisionRange) throws IOException {
         var master = repository.resolve(repository.defaultBranch().name())
                                .orElseThrow(() -> new IllegalStateException("Default branch not found"));
-        var whitelist = new HashMap<String, Set<Hash>>();
-        var blacklist = new HashSet<Hash>();
-        return check(repository, census, parser, revisionRange, master, whitelist, blacklist);
-    }
 
-    public static Issues check(ReadOnlyRepository repository,
-                               Census census,
-                               CommitMessageParser parser,
-                               String revisionRange,
-                               Map<String, Set<Hash>> whitelist,
-                               Set<Hash> blacklist) throws IOException {
-        var master = repository.resolve(repository.defaultBranch().name())
-                               .orElseThrow(() -> new IllegalStateException("Default branch not found"));
-        return check(repository, census, parser, revisionRange, master, whitelist, blacklist);
+        var conf = parseConfiguration(repository, master, List.of());
+        var branchRegex = conf.isPresent() ? conf.get().repository().branches() : ".*";
+        var tagRegex = conf.isPresent() ? conf.get().repository().tags() : ".*";
+
+        return check(repository, census, parser, branchRegex, tagRegex, revisionRange, whitelist, blacklist, List.of(), null);
     }
 
     public static Set<Check> checks(ReadOnlyRepository repository, Census census, Hash hash) throws IOException {
         var jcheck = new JCheck(repository,
                                 census,
@@ -295,9 +290,10 @@
                                 hash.hex() + "^.." + hash.hex(),
                                 Pattern.compile(".*"),
                                 Pattern.compile(".*"),
                                 new HashMap<String, Set<Hash>>(),
                                 new HashSet<Hash>(),
-                                List.of());
+                                List.of(),
+                                null);
         return jcheck.checksForCommits();
     }
 }
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/JCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/JCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/JCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/JCheckTests.java
@@ -33,11 +33,11 @@
 import java.nio.file.*;
 import java.time.Instant;
 import java.util.*;
 import java.util.stream.Collectors;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.*;
 
 class JCheckTests {
     static class CheckableRepository {
         public static Repository create(Path path, VCS vcs) throws IOException {
             var repo = Repository.init(path, vcs);
@@ -61,11 +61,11 @@
                 output.append("[checks \"reviewers\"]\n");
                 output.append("minimum=1\n");
             }
             repo.add(checkConf);
 
-            repo.commit("Initial commit", "duke", "duke@openjdk.java.net");
+            repo.commit("Initial commit\n\nReviewed-by: user2", "user3", "user3@openjdk.java.net");
 
             return repo;
         }
     }
 
@@ -73,14 +73,14 @@
         static void populateCensusDirectory(Path censusDir) throws IOException {
             var contributorsFile = censusDir.resolve("contributors.xml");
             var contributorsContent = List.of(
                     "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>",
                     "<contributors>",
-                    "    <contributor username=\"user_1\" full-name=\"User Number 1\" />",
-                    "    <contributor username=\"user_2\" full-name=\"User Number 2\" />",
-                    "    <contributor username=\"user_3\" full-name=\"User Number 3\" />",
-                    "    <contributor username=\"user_4\" full-name=\"User Number 4\" />",
+                    "    <contributor username=\"user1\" full-name=\"User Number 1\" />",
+                    "    <contributor username=\"user2\" full-name=\"User Number 2\" />",
+                    "    <contributor username=\"user3\" full-name=\"User Number 3\" />",
+                    "    <contributor username=\"user4\" full-name=\"User Number 4\" />",
                     "</contributors>");
             Files.write(contributorsFile, contributorsContent);
 
             var groupsDir = censusDir.resolve("groups");
             Files.createDirectories(groupsDir);
@@ -88,38 +88,38 @@
             var testGroupFile = groupsDir.resolve("test.xml");
             var testGroupContent = List.of(
                     "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>",
                     "<group name=\"test\" full-name=\"TEST\">",
                     "    <lead username=\"user_4\" />",
-                    "    <member username=\"user_1\" since=\"1\" />",
-                    "    <member username=\"user_2\" since=\"1\" />",
+                    "    <member username=\"user1\" since=\"0\" />",
+                    "    <member username=\"user2\" since=\"0\" />",
                     "</group>");
             Files.write(testGroupFile, testGroupContent);
 
             var projectDir = censusDir.resolve("projects");
             Files.createDirectories(projectDir);
 
             var testProjectFile = projectDir.resolve("test.xml");
             var testProjectContent = List.of(
                     "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>",
                     "<project name=\"test\" full-name=\"TEST\" sponsor=\"test\">",
-                    "    <lead username=\"user_1\" since=\"1\" />",
-                    "    <reviewer username=\"user_2\" since=\"1\" />",
-                    "    <committer username=\"user_3\" since=\"1\" />",
-                    "    <author username=\"user_4\" since=\"1\" />",
+                    "    <lead username=\"user1\" since=\"0\" />",
+                    "    <reviewer username=\"user2\" since=\"0\" />",
+                    "    <committer username=\"user3\" since=\"0\" />",
+                    "    <author username=\"user4\" since=\"0\" />",
                     "</project>");
             Files.write(testProjectFile, testProjectContent);
 
             var namespacesDir = censusDir.resolve("namespaces");
             Files.createDirectories(namespacesDir);
 
             var namespaceFile = namespacesDir.resolve("github.xml");
             var namespaceContent = List.of(
                     "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>",
                     "<namespace name=\"github.com\">",
-                    "    <user id=\"1234567\" census=\"user_1\" />",
-                    "    <user id=\"2345678\" census=\"user_2\" />",
+                    "    <user id=\"1234567\" census=\"user1\" />",
+                    "    <user id=\"2345678\" census=\"user2\" />",
                     "</namespace>");
             Files.write(namespaceFile, namespaceContent);
 
             var versionFile = censusDir.resolve("version.xml");
             var versionContent = List.of(
@@ -283,11 +283,53 @@
             Files.createDirectories(censusPath);
             CensusCreator.populateCensusDirectory(censusPath);
             var census = Census.parse(censusPath);
 
             var visitor = new TestVisitor();
-            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, first.hex() + ".." + second.hex())) {
+            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, first.hex() + ".." + second.hex(), Map.of(), Set.of())) {
+                for (var issue : issues) {
+                    issue.accept(visitor);
+                }
+            }
+            assertEquals(Set.of("org.openjdk.skara.jcheck.TooFewReviewersIssue"), visitor.issueNames());
+        }
+    }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void checkOverridingConfiguration(VCS vcs) throws Exception {
+        try (var dir = new TemporaryDirectory()) {
+            var repoPath = dir.path().resolve("repo");
+            var repo = CheckableRepository.create(repoPath, vcs);
+
+            var initialCommit = repo.commits().asList().get(0);
+
+            var jcheckConf = repoPath.resolve(".jcheck").resolve("conf");
+            assertTrue(Files.exists(jcheckConf));
+            Files.writeString(jcheckConf, "[checks \"reviewers\"]\nminimum = 0\n",
+                              StandardOpenOption.WRITE, StandardOpenOption.APPEND);
+            repo.add(jcheckConf);
+            var secondCommit = repo.commit("Do not require reviews", "user3", "user3@openjdk.java.net");
+
+            var censusPath = dir.path().resolve("census");
+            Files.createDirectories(censusPath);
+            CensusCreator.populateCensusDirectory(censusPath);
+            var census = Census.parse(censusPath);
+
+            // Check the last commit without reviewers, should pass since .jcheck/conf was updated
+            var range = initialCommit.hash().hex() + ".." + secondCommit.hex();
+            var visitor = new TestVisitor();
+            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, range, Map.of(), Set.of())) {
+                for (var issue : issues) {
+                    issue.accept(visitor);
+                }
+            }
+            assertEquals(Set.of(), visitor.issues());
+
+            // Check the last commit without reviewers with the initial .jcheck/conf. Should fail
+            // due to missing reviewers.
+            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, secondCommit, initialCommit.hash(), List.of())) {
                 for (var issue : issues) {
                     issue.accept(visitor);
                 }
             }
             assertEquals(Set.of("org.openjdk.skara.jcheck.TooFewReviewersIssue"), visitor.issueNames());
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/TestRepository.java
@@ -302,6 +302,18 @@
     }
 
     public Optional<Tag.Annotated> annotate(Tag tag) throws IOException {
         return null;
     }
+
+    public String range(Hash h) {
+        return null;
+    }
+
+    public String rangeInclusive(Hash from, Hash to) {
+        return null;
+    }
+
+    public String rangeExclusive(Hash from, Hash to) {
+        return null;
+    }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
@@ -58,10 +58,13 @@
     List<CommitMetadata> commitMetadata(List<Path> paths, boolean reverse) throws IOException;
     List<CommitMetadata> commitMetadata(String range, List<Path> paths) throws IOException;
     List<CommitMetadata> commitMetadata(Hash from, Hash to, List<Path> paths) throws IOException;
     List<CommitMetadata> commitMetadata(String range, List<Path> paths, boolean reverse) throws IOException;
     List<CommitMetadata> commitMetadata(Hash from, Hash to, List<Path> paths, boolean reverse) throws IOException;
+    String range(Hash h);
+    String rangeInclusive(Hash from, Hash to);
+    String rangeExclusive(Hash from, Hash to);
     Path root() throws IOException;
     boolean exists() throws IOException;
     boolean isHealthy() throws IOException;
     boolean isEmpty() throws IOException;
     boolean isClean() throws IOException;
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -1316,6 +1316,21 @@
         cmd.add(value);
         try (var p = capture(cmd)) {
             await(p);
         }
     }
+
+    @Override
+    public String range(Hash h) {
+        return h.hex() + "^!";
+    }
+
+    @Override
+    public String rangeInclusive(Hash from, Hash to) {
+        return from.hex() + "^.." + to.hex();
+    }
+
+    @Override
+    public String rangeExclusive(Hash from, Hash to) {
+        return from.hex() + ".." + to.hex();
+    }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -1329,6 +1329,21 @@
         if (!Files.exists(hgrc)) {
             Files.createFile(hgrc);
         }
         Files.write(hgrc, lines, StandardOpenOption.WRITE, StandardOpenOption.APPEND);
     }
+
+    @Override
+    public String range(Hash h) {
+        return h.hex();
+    }
+
+    @Override
+    public String rangeInclusive(Hash from, Hash to) {
+        return from.hex() + ":" + to.hex();
+    }
+
+    @Override
+    public String rangeExclusive(Hash from, Hash to) {
+        return from.hex() + ":" + to.hex() + "-" + from.hex();
+    }
 }
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -2174,6 +2174,54 @@
             assertEquals(Path.of("README"), statusEntry.source().path().get());
             assertEquals(Optional.empty(), statusEntry.source().type());
             assertEquals(Hash.zero(), statusEntry.source().hash());
         }
     }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testRangeSingle(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var repo = Repository.init(dir.path(), vcs);
+            var range = repo.range(new Hash("0123456789"));
+            if (vcs == VCS.GIT) {
+                assertEquals("0123456789^!", range);
+            } else if (vcs == VCS.HG) {
+                assertEquals("0123456789", range);
+            } else {
+                fail("Unexpected vcs: " + vcs);
+            }
+        }
+    }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testRangeInclusive(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var repo = Repository.init(dir.path(), vcs);
+            var range = repo.rangeInclusive(new Hash("01234"), new Hash("56789"));
+            if (vcs == VCS.GIT) {
+                assertEquals("01234^..56789", range);
+            } else if (vcs == VCS.HG) {
+                assertEquals("01234:56789", range);
+            } else {
+                fail("Unexpected vcs: " + vcs);
+            }
+        }
+    }
+
+    @ParameterizedTest
+    @EnumSource(VCS.class)
+    void testRangeExclusive(VCS vcs) throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var repo = Repository.init(dir.path(), vcs);
+            var range = repo.rangeExclusive(new Hash("01234"), new Hash("56789"));
+            if (vcs == VCS.GIT) {
+                assertEquals("01234..56789", range);
+            } else if (vcs == VCS.HG) {
+                assertEquals("01234:56789-01234", range);
+            } else {
+                fail("Unexpected vcs: " + vcs);
+            }
+        }
+    }
 }
