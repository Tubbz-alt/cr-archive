diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
@@ -42,10 +42,11 @@
     private final String revisionRange;
     private final Map<String, Set<Hash>> whitelist;
     private final List<CommitCheck> commitChecks;
     private final List<RepositoryCheck> repositoryChecks;
     private final List<String> additionalConfiguration;
+    private final JCheckConfiguration overridingConfiguration;
     private final Logger log = Logger.getLogger("org.openjdk.skara.jcheck");
 
     private JCheckConfiguration cachedConfiguration = null;
 
     JCheck(ReadOnlyRepository repository,
@@ -54,17 +55,19 @@
            String revisionRange,
            Pattern allowedBranches,
            Pattern allowedTags,
            Map<String, Set<Hash>> whitelist,
            Set<Hash> blacklist,
-           List<String> additionalConfiguration) throws IOException {
+           List<String> additionalConfiguration,
+           JCheckConfiguration overridingConfiguration) throws IOException {
         this.repository = repository;
         this.census = census;
         this.parser = parser;
         this.revisionRange = revisionRange;
         this.whitelist = whitelist;
         this.additionalConfiguration = additionalConfiguration;
+        this.overridingConfiguration = overridingConfiguration;
 
         var utils = new Utilities();
         commitChecks = List.of(
             new AuthorCheck(),
             new CommitterCheck(census),
@@ -96,10 +99,13 @@
             throw new UncheckedIOException(e);
         }
     }
 
     private Optional<JCheckConfiguration> getConfigurationFor(Commit c) {
+        if (overridingConfiguration != null) {
+            return Optional.of(overridingConfiguration);
+        }
         var confPath = Paths.get(".jcheck/conf");
         var changesConfiguration = c.parentDiffs()
                                     .stream()
                                     .map(Diff::patches)
                                     .flatMap(List::stream)
@@ -221,73 +227,62 @@
                                 String branchRegex,
                                 String tagRegex,
                                 String revisionRange,
                                 Map<String, Set<Hash>> whitelist,
                                 Set<Hash> blacklist,
-                                List<String> additionalConfiguration) throws IOException {
+                                List<String> additionalConfiguration,
+                                JCheckConfiguration configuration) throws IOException {
 
         var defaultBranchRegex = "|" + repository.defaultBranch().name();
         var allowedBranches = Pattern.compile("^(?:" + branchRegex + defaultBranchRegex + ")$");
 
         var defaultTag = repository.defaultTag();
         var defaultTagRegex = defaultTag.isPresent() ? "|" + defaultTag.get().name() : "";
         var allowedTags = Pattern.compile("^(?:" + tagRegex + defaultTagRegex + ")$");
 
-        var jcheck = new JCheck(repository, census, parser, revisionRange, allowedBranches, allowedTags, whitelist, blacklist, additionalConfiguration);
+        var jcheck = new JCheck(repository, census, parser, revisionRange, allowedBranches, allowedTags, whitelist, blacklist, additionalConfiguration, configuration);
         return jcheck.issues();
     }
 
     public static Issues check(ReadOnlyRepository repository,
                                Census census,
                                CommitMessageParser parser,
-                               String revisionRange,
+                               Hash toCheck,
                                Hash configuration,
-                               Map<String, Set<Hash>> whitelist,
-                               Set<Hash> blacklist,
                                List<String> additionalConfiguration) throws IOException {
         if (repository.isEmpty()) {
             return new Issues(new ArrayList<Issue>().iterator(), null);
         }
 
-        var conf = parseConfiguration(repository, configuration, additionalConfiguration);
+        var conf = parseConfiguration(repository, configuration, additionalConfiguration).orElseThrow(() ->
+            new IllegalArgumentException("No .jcheck/conf present at hash " + configuration.hex())
+        );
 
-        var branchRegex = conf.isPresent() ?  conf.get().repository().branches() : ".*";
-        var tagRegex =  conf.isPresent() ?  conf.get().repository().tags() : ".*";
+        var branchRegex = conf.repository().branches();
+        var tagRegex = conf.repository().tags();
 
-        return check(repository, census, parser, branchRegex, tagRegex, revisionRange, whitelist, blacklist, additionalConfiguration);
+        return check(repository, census, parser, branchRegex, tagRegex, repository.range(toCheck), Map.of(), Set.of(), List.of(), conf);
     }
 
     public static Issues check(ReadOnlyRepository repository,
                                Census census,
                                CommitMessageParser parser,
                                String revisionRange,
-                               Hash configuration,
                                Map<String, Set<Hash>> whitelist,
                                Set<Hash> blacklist) throws IOException {
-        return check(repository, census, parser, revisionRange, configuration, whitelist, blacklist, List.of());
-    }
+        if (repository.isEmpty()) {
+            return new Issues(new ArrayList<Issue>().iterator(), null);
+        }
 
-    public static Issues check(ReadOnlyRepository repository,
-                               Census census,
-                               CommitMessageParser parser,
-                               String revisionRange) throws IOException {
         var master = repository.resolve(repository.defaultBranch().name())
                                .orElseThrow(() -> new IllegalStateException("Default branch not found"));
-        var whitelist = new HashMap<String, Set<Hash>>();
-        var blacklist = new HashSet<Hash>();
-        return check(repository, census, parser, revisionRange, master, whitelist, blacklist);
-    }
 
-    public static Issues check(ReadOnlyRepository repository,
-                               Census census,
-                               CommitMessageParser parser,
-                               String revisionRange,
-                               Map<String, Set<Hash>> whitelist,
-                               Set<Hash> blacklist) throws IOException {
-        var master = repository.resolve(repository.defaultBranch().name())
-                               .orElseThrow(() -> new IllegalStateException("Default branch not found"));
-        return check(repository, census, parser, revisionRange, master, whitelist, blacklist);
+        var conf = parseConfiguration(repository, master, List.of());
+        var branchRegex = conf.isPresent() ? conf.get().repository().branches() : ".*";
+        var tagRegex = conf.isPresent() ? conf.get().repository().tags() : ".*";
+
+        return check(repository, census, parser, branchRegex, tagRegex, revisionRange, whitelist, blacklist, List.of(), null);
     }
 
     public static Set<Check> checks(ReadOnlyRepository repository, Census census, Hash hash) throws IOException {
         var jcheck = new JCheck(repository,
                                 census,
@@ -295,9 +290,10 @@
                                 hash.hex() + "^.." + hash.hex(),
                                 Pattern.compile(".*"),
                                 Pattern.compile(".*"),
                                 new HashMap<String, Set<Hash>>(),
                                 new HashSet<Hash>(),
-                                List.of());
+                                List.of(),
+                                null);
         return jcheck.checksForCommits();
     }
 }
