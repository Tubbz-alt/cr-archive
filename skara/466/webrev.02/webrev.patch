diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
@@ -35,52 +35,81 @@
         this.header = header;
         this.body = body;
         this.footer = footer;
     }
 
-    static ArchiveItem from(PullRequest pr, Repository localRepo, URI issueTracker, String issuePrefix,
-                            WebrevStorage.WebrevGenerator webrevGenerator, WebrevNotification webrevNotification,
-                            ZonedDateTime created, ZonedDateTime updated, Hash base, Hash head, String subjectPrefix) {
+    static ArchiveItem from(PullRequest pr, Repository localRepo, HostUserToEmailAuthor hostUserToEmailAuthor,
+                            URI issueTracker, String issuePrefix, WebrevStorage.WebrevGenerator webrevGenerator,
+                            WebrevNotification webrevNotification, ZonedDateTime created, ZonedDateTime updated,
+                            Hash base, Hash head, String subjectPrefix) {
         return new ArchiveItem(null, "fc", created, updated, pr.author(), Map.of("PR-Head-Hash", head.hex(), "PR-Base-Hash", base.hex()),
                                () -> subjectPrefix + "RFR: " + pr.title(),
                                () -> "",
-                               () -> ArchiveMessages.composeConversation(pr, base, head),
+                               () -> ArchiveMessages.composeConversation(pr, localRepo, base, head),
                                () -> {
                                     var fullWebrev = webrevGenerator.generate(base, head, "00");
                                     webrevNotification.notify(0, fullWebrev, null);
                                     return ArchiveMessages.composeConversationFooter(pr, issueTracker, issuePrefix, localRepo, fullWebrev, base, head);
                                });
     }
 
-    static ArchiveItem from(PullRequest pr, Repository localRepo, WebrevStorage.WebrevGenerator webrevGenerator,
-                            WebrevNotification webrevNotification, ZonedDateTime created, ZonedDateTime updated,
-                            Hash lastBase, Hash lastHead, Hash base, Hash head, int index, ArchiveItem parent, String subjectPrefix) {
+    private static Optional<Hash> rebasedLastHead(Repository localRepo, Hash newBase, Hash lastHead) {
+        try {
+            localRepo.checkout(lastHead, true);
+            localRepo.rebase(newBase, "duke", "duke@openjdk.org");
+            var rebasedLastHead = localRepo.head();
+            return Optional.of(rebasedLastHead);
+        } catch (IOException e) {
+            return Optional.empty();
+        }
+    }
+
+    private static String hostUserToCommitterName(HostUserToEmailAuthor hostUserToEmailAuthor, HostUser hostUser) {
+        var email = hostUserToEmailAuthor.author(hostUser);
+        if (email.fullName().isPresent()) {
+            return email.fullName().get();
+        } else {
+            return hostUser.fullName();
+        }
+    }
+
+    static ArchiveItem from(PullRequest pr, Repository localRepo, HostUserToEmailAuthor hostUserToEmailAuthor,
+                            WebrevStorage.WebrevGenerator webrevGenerator, WebrevNotification webrevNotification,
+                            ZonedDateTime created, ZonedDateTime updated, Hash lastBase, Hash lastHead, Hash base,
+                            Hash head, int index, ArchiveItem parent, String subjectPrefix) {
         return new ArchiveItem(parent,"ha" + head.hex(), created, updated, pr.author(), Map.of("PR-Head-Hash", head.hex(), "PR-Base-Hash", base.hex()),
                                () -> String.format("Re: %s[Rev %02d] RFR: %s", subjectPrefix, index, pr.title()),
                                () -> "",
-                               () -> ArchiveMessages.composeRevision(pr, localRepo, base, head, lastBase, lastHead),
                                () -> {
-                                    var fullWebrev = webrevGenerator.generate(base, head, String.format("%02d", index));
-                                    if (lastBase.equals(base)) {
-                                        var incrementalWebrev = webrevGenerator.generate(lastHead, head, String.format("%02d-%02d", index - 1, index));
-                                        webrevNotification.notify(index, fullWebrev, incrementalWebrev);
-                                        return ArchiveMessages.composeIncrementalFooter(pr, localRepo, fullWebrev, incrementalWebrev, head, lastHead);
-                                    } else {
-                                        // It may be possible to auto-rebase the last head onto the new base to get an incremental webrev
-                                        try {
-                                            localRepo.checkout(lastHead, true);
-                                            localRepo.rebase(base, "duke", "duke@openjdk.org");
-                                            var rebasedLastHead = localRepo.head();
-                                            var incrementalWebrev = webrevGenerator.generate(rebasedLastHead, head, String.format("%02d-%02d", index - 1, index));
-                                            webrevNotification.notify(index, fullWebrev, incrementalWebrev);
-                                            return ArchiveMessages.composeIncrementalFooter(pr, localRepo, fullWebrev, incrementalWebrev, head, lastHead);
-                                        } catch (IOException e) {
-                                            // If it doesn't work out we just post a full webrev
-                                            webrevNotification.notify(index, fullWebrev, null);
-                                            return ArchiveMessages.composeRebaseFooter(pr, localRepo, fullWebrev, base, head);
-                                        }
-                                    }
+                                   if (lastBase.equals(base)) {
+                                       return ArchiveMessages.composeIncrementalRevision(localRepo, hostUserToCommitterName(hostUserToEmailAuthor, pr.author()), head, lastHead);
+                                   } else {
+                                       var rebasedLastHead = rebasedLastHead(localRepo, base, lastHead);
+                                       if (rebasedLastHead.isPresent()) {
+                                           return ArchiveMessages.composeRebasedIncrementalRevision(localRepo, hostUserToCommitterName(hostUserToEmailAuthor, pr.author()), head, rebasedLastHead.get());
+                                       } else {
+                                           return ArchiveMessages.composeFullRevision(localRepo, hostUserToCommitterName(hostUserToEmailAuthor, pr.author()), base, head);
+                                       }
+                                   }
+                               },
+                               () -> {
+                                   var fullWebrev = webrevGenerator.generate(base, head, String.format("%02d", index));
+                                   if (lastBase.equals(base)) {
+                                       var incrementalWebrev = webrevGenerator.generate(lastHead, head, String.format("%02d-%02d", index - 1, index));
+                                       webrevNotification.notify(index, fullWebrev, incrementalWebrev);
+                                       return ArchiveMessages.composeIncrementalFooter(pr, localRepo, fullWebrev, incrementalWebrev, head, lastHead);
+                                   } else {
+                                       var rebasedLastHead = rebasedLastHead(localRepo, base, lastHead);
+                                       if (rebasedLastHead.isPresent()) {
+                                           var incrementalWebrev = webrevGenerator.generate(rebasedLastHead.get(), head, String.format("%02d-%02d", index - 1, index));
+                                           webrevNotification.notify(index, fullWebrev, incrementalWebrev);
+                                           return ArchiveMessages.composeIncrementalFooter(pr, localRepo, fullWebrev, incrementalWebrev, head, lastHead);
+                                       } else {
+                                           webrevNotification.notify(index, fullWebrev, null);
+                                           return ArchiveMessages.composeRebasedFooter(pr, localRepo, fullWebrev, base, head);
+                                       }
+                                   }
                                });
     }
 
     static ArchiveItem from(PullRequest pr, Comment comment, HostUserToEmailAuthor hostUserToEmailAuthor, ArchiveItem parent) {
         return new ArchiveItem(parent, "pc" + comment.id(), comment.createdAt(), comment.updatedAt(), comment.author(), Map.of(),
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -9,27 +9,15 @@
 
 import java.io.*;
 import java.net.URI;
 import java.time.ZonedDateTime;
 import java.time.format.DateTimeFormatter;
-import java.util.Optional;
+import java.util.*;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 class ArchiveMessages {
-    private static String formatCommit(Commit commit) {
-        var ret = new StringBuilder();
-        var message = commit.message();
-        if (message.size() == 0) {
-            ret.append("<no commit message found>");
-        } else {
-            var abbrev = commit.hash().abbreviate();
-            ret.append(" - ").append(abbrev).append(": ").append(message.get(0).strip());
-        }
-        return ret.toString();
-    }
-
     private static final Pattern commentPattern = Pattern.compile("<!--.*?-->",
                                                                   Pattern.DOTALL | Pattern.MULTILINE);
     private static final Pattern cutoffPattern = Pattern.compile("(.*?)<!-- Anything below this marker will be .*? -->",
                                                                  Pattern.DOTALL | Pattern.MULTILINE);
     private static String filterComments(String body) {
@@ -43,22 +31,94 @@
 
         body = MarkdownToText.removeFormatting(body);
         return body.strip();
     }
 
-    @FunctionalInterface
-    interface CommitFormatter {
-        String format(Commit commit);
+    private static String formatCommitBrief(CommitMetadata commit) {
+        var ret = new StringBuilder();
+        var message = commit.message();
+        var abbrev = commit.hash().abbreviate();
+        if (message.size() == 0) {
+            ret.append(" - ").append(abbrev).append(": <no commit message found>");
+        } else {
+            ret.append(" - ").append(message.get(0));
+        }
+        return ret.toString();
     }
 
-    private static String formatCommitMessages(Repository localRepo, Hash first, Hash last, CommitFormatter formatter) {
-        try (var commits = localRepo.commits(first.hex() + ".." + last.hex())) {
-            return commits.stream()
-                          .map(formatter::format)
-                          .collect(Collectors.joining("\n"));
+    private static String formatSingleCommit(CommitMetadata commit) {
+        var ret = new StringBuilder();
+        var message = commit.message();
+        if (message.size() == 0) {
+            var abbrev = commit.hash().abbreviate();
+            ret.append("  ").append(abbrev).append(": <no commit message found>");
+        } else {
+            ret.append("  ").append(String.join("\n  ", message));
+        }
+        return ret.toString();
+    }
+
+    private static String formatCommitInList(CommitMetadata commit) {
+        var ret = new StringBuilder();
+        var message = commit.message();
+        if (message.size() == 0) {
+            var abbrev = commit.hash().abbreviate();
+            ret.append(" - ").append(abbrev).append(": <no commit message found>");
+        } else {
+            ret.append(" - ").append(String.join("\n   ", message));
+        }
+        return ret.toString();
+    }
+
+    private static List<CommitMetadata> commits(Repository localRepo, Hash first, Hash last) {
+        try {
+            return localRepo.commitMetadata(first, last);
         } catch (IOException e) {
-            throw new UncheckedIOException(e);
+            return List.of();
+        }
+    }
+
+    private static String formatNumber(int number) {
+        switch (number) {
+            case 0: return "no";
+            case 1: return "one";
+            case 2: return "two";
+            case 3: return "three";
+            case 4: return "four";
+            case 5: return "five";
+            case 6: return "six";
+            case 7: return "seven";
+            case 8: return "eight";
+            case 9: return "ten";
+            default: return Integer.toString(number);
+        }
+    }
+
+    private static String describeCommits(List<CommitMetadata> commits, String adjective) {
+        return formatNumber(commits.size()) + (adjective.isBlank() ? "" : " " + adjective) +
+                " commit" + (commits.size() != 1 ? "s" : "");
+    }
+
+    private static Optional<String> formatCommitMessagesFull(List<CommitMetadata> commits) {
+        if (commits.size() == 0) {
+            return Optional.empty();
+        } else if (commits.size() == 1) {
+            return Optional.of(formatSingleCommit(commits.get(0)));
+        } else {
+            return Optional.of(commits.stream()
+                                      .map(ArchiveMessages::formatCommitInList)
+                                      .collect(Collectors.joining("\n")));
+        }
+    }
+
+    private static Optional<String> formatCommitMessagesBrief(List<CommitMetadata> commits) {
+        if (commits.size() == 0) {
+            return Optional.empty();
+        } else {
+            return Optional.of(commits.stream()
+                                      .map(ArchiveMessages::formatCommitBrief)
+                                      .collect(Collectors.joining("\n")));
         }
     }
 
     private static Optional<String> issueUrl(PullRequest pr, URI issueTracker, String projectPrefix) {
         var issue = Issue.fromString(pr.title());
@@ -89,42 +149,82 @@
     private static String fetchCommand(PullRequest pr) {
         var repoUrl = pr.repository().webUrl();
         return "git fetch " + repoUrl + " " + pr.fetchRef() + ":pull/" + pr.id();
     }
 
-    static String composeConversation(PullRequest pr, Hash base, Hash head) {
+    static String composeConversation(PullRequest pr, Repository localRepo, Hash base, Hash head) {
         var filteredBody = filterComments(pr.body());
         if (filteredBody.isEmpty()) {
             filteredBody = pr.title().strip();
         }
+
         return filteredBody;
     }
 
-    static String composeRevision(PullRequest pr, Repository localRepository, Hash base, Hash head, Hash lastBase, Hash lastHead) {
+    static String composeIncrementalRevision(Repository localRepository, String author, Hash head, Hash lastHead) {
+        var ret = new StringBuilder();
+
+        var incrementalUpdate = false;
         try {
-            if (base.equals(lastBase)) {
-                if (localRepository.isAncestor(lastHead, head)) {
-                    var updateCount = localRepository.commitMetadata(lastHead.hex() + ".." + head.hex()).size();
-                    return "The pull request has been updated with " + updateCount + " additional commit" + (updateCount != 1 ? "s" : "") + ".";
-                } else {
-                    return "Previous commits in this pull request have been removed, probably due to a force push. " +
-                            "The incremental views will show differences compared to the previous content of the PR.";
-                }
-            } else {
-                try {
-                    localRepository.checkout(lastHead, true);
-                    localRepository.rebase(base, "duke", "duke@openjdk.org");
-                    var rebasedLastHead = localRepository.head();
-                    return "The pull request has been updated with a new target base due to a merge or a rebase. " +
-                            "The incremental webrev excludes the unrelated changes brought in by the merge/rebase.";
-                } catch (IOException e) {
-                    return "The pull request has been updated with a new target base due to a merge or a rebase.";
-                }
-            }
-        } catch (IOException e) {
-            throw new UncheckedIOException(e);
+            incrementalUpdate = localRepository.isAncestor(lastHead, head);
+        } catch (IOException ignored) {
+        }
+        var commits = commits(localRepository, lastHead, head);
+        var newCommitMessages = formatCommitMessagesFull(commits);
+        if (incrementalUpdate) {
+            ret.append(author);
+            ret.append(" has updated the pull request incrementally");
+            var commitsDescription = describeCommits(commits, "additional");
+            newCommitMessages.ifPresentOrElse(m -> ret.append(" with ")
+                                                      .append(commitsDescription)
+                                                      .append(" since the last revision:\n\n")
+                                                      .append(m),
+                                              () -> ret.append("."));
+        } else {
+            ret.append(author);
+            ret.append(" has refreshed the contents of this pull request, and previous commits have been removed. ");
+            ret.append("The incremental views will show differences compared to the previous content of the PR.");
+            var commitsDescription = describeCommits(commits, "new");
+            newCommitMessages.ifPresent(m -> ret.append(" The pull request contains ")
+                                                .append(commitsDescription)
+                                                .append(" since the last revision:\n\n")
+                                                .append(m));
         }
+        return ret.toString();
+    }
+
+    static String composeRebasedIncrementalRevision(Repository localRepository, String author, Hash head, Hash lastHead) {
+        var ret = new StringBuilder();
+
+        ret.append(author);
+        ret.append(" has updated the pull request with a new target base due to a merge or a rebase. ");
+        ret.append("The incremental webrev excludes the unrelated changes brought in by the merge/rebase.");
+
+        var commits = commits(localRepository, lastHead, head);
+        var newCommitMessages = formatCommitMessagesFull(commits);
+        var commitsDescription = describeCommits(commits, "additional");
+        newCommitMessages.ifPresent(m -> ret.append(" The pull request contains ")
+                                            .append(commitsDescription)
+                                            .append(" since the last revision:\n\n")
+                                            .append(m));
+        return ret.toString();
+    }
+
+    static String composeFullRevision(Repository localRepository, String author, Hash base, Hash head) {
+        var ret = new StringBuilder();
+
+        ret.append(author);
+        ret.append(" has updated the pull request with a new target base due to a merge or a rebase.");
+
+        var commits = commits(localRepository, base, head);
+        var newCommitMessages = formatCommitMessagesFull(commits);
+        var commitsDescription = describeCommits(commits, "");
+        newCommitMessages.ifPresent(m -> ret.append(" The pull request now contains ")
+                                            .append(commitsDescription)
+                                            .append(":\n\n")
+                                            .append(m));
+        return ret.toString();
     }
 
     static String composeReplySubject(String parentSubject) {
         if (parentSubject.startsWith("Re: ")) {
             return parentSubject;
@@ -137,40 +237,34 @@
         return "PR: " + pr.webUrl();
     }
 
     // When changing this, ensure that the PR pattern in the notifier still matches
     static String composeConversationFooter(PullRequest pr, URI issueProject, String projectPrefix, Repository localRepo, URI webrev, Hash base, Hash head) {
-        var commitMessages = formatCommitMessages(localRepo, base, head, ArchiveMessages::formatCommit);
+        var commits = commits(localRepo, base, head);
         var issueString = issueUrl(pr, issueProject, projectPrefix).map(url -> "  Issue: " + url + "\n").orElse("");
-        return "Commits:\n" +
-                commitMessages + "\n\n" +
+        return "Commit messages:\n" +
+                formatCommitMessagesBrief(commits).orElse("") + "\n\n" +
                 "Changes: " + pr.changeUrl() + "\n" +
                 " Webrev: " + webrev + "\n" +
                 issueString +
                 "  Stats: " + stats(localRepo, base, head) + "\n" +
                 "  Patch: " + pr.diffUrl().toString() + "\n" +
                 "  Fetch: " + fetchCommand(pr) + "\n\n" +
                 composeReplyFooter(pr);
     }
 
-    static String composeRebaseFooter(PullRequest pr, Repository localRepo, URI fullWebrev, Hash base, Hash head) {
-        var commitMessages = formatCommitMessages(localRepo, base, head, ArchiveMessages::formatCommit);
-        return "Commits:\n" +
-                commitMessages + "\n\n" +
-                "Changes: " + pr.changeUrl() + "\n" +
+    static String composeRebasedFooter(PullRequest pr, Repository localRepo, URI fullWebrev, Hash base, Hash head) {
+        return "Changes: " + pr.changeUrl() + "\n" +
                 " Webrev: " + fullWebrev.toString() + "\n" +
                 "  Stats: " + stats(localRepo, base, head) + "\n" +
                 "  Patch: " + pr.diffUrl().toString() + "\n" +
                 "  Fetch: " + fetchCommand(pr) + "\n\n" +
                 composeReplyFooter(pr);
     }
 
     static String composeIncrementalFooter(PullRequest pr, Repository localRepo, URI fullWebrev, URI incrementalWebrev, Hash head, Hash lastHead) {
-        var newCommitMessages = formatCommitMessages(localRepo, lastHead, head, ArchiveMessages::formatCommit);
-        return "Added commits:\n" +
-                newCommitMessages + "\n\n" +
-                "Changes:\n" +
+        return "Changes:\n" +
                 "  - all: " + pr.changeUrl() + "\n" +
                 "  - new: " + pr.changeUrl(lastHead) + "\n\n" +
                 "Webrevs:\n" +
                 " - full: " + fullWebrev.toString() + "\n" +
                 " - incr: " + incrementalWebrev.toString() + "\n\n" +
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -67,14 +67,14 @@
                 var curBase = new Hash(email.headerValue("PR-Base-Hash"));
                 var curHead = new Hash(email.headerValue("PR-Head-Hash"));
                 var created = email.date();
 
                 if (generated.isEmpty()) {
-                    var first = ArchiveItem.from(pr, localRepo, issueTracker, issuePrefix, webrevGenerator, webrevNotification, pr.createdAt(), pr.updatedAt(), curBase, curHead, subjectPrefix);
+                    var first = ArchiveItem.from(pr, localRepo, hostUserToEmailAuthor, issueTracker, issuePrefix, webrevGenerator, webrevNotification, pr.createdAt(), pr.updatedAt(), curBase, curHead, subjectPrefix);
                     generated.add(first);
                 } else {
-                    var revision = ArchiveItem.from(pr, localRepo, webrevGenerator, webrevNotification, created, created, lastBase, lastHead, curBase, curHead, ++revisionIndex, generated.get(0), subjectPrefix);
+                    var revision = ArchiveItem.from(pr, localRepo, hostUserToEmailAuthor, webrevGenerator, webrevNotification, created, created, lastBase, lastHead, curBase, curHead, ++revisionIndex, generated.get(0), subjectPrefix);
                     generated.add(revision);
                 }
 
                 lastBase = curBase;
                 lastHead = curHead;
@@ -82,14 +82,14 @@
         }
 
         // Check if we're at a revision not previously reported
         if (!base.equals(lastBase) || !head.equals(lastHead)) {
             if (generated.isEmpty()) {
-                var first = ArchiveItem.from(pr, localRepo, issueTracker, issuePrefix, webrevGenerator, webrevNotification, pr.createdAt(), pr.updatedAt(), base, head, subjectPrefix);
+                var first = ArchiveItem.from(pr, localRepo, hostUserToEmailAuthor, issueTracker, issuePrefix, webrevGenerator, webrevNotification, pr.createdAt(), pr.updatedAt(), base, head, subjectPrefix);
                 generated.add(first);
             } else {
-                var revision = ArchiveItem.from(pr, localRepo, webrevGenerator, webrevNotification, pr.updatedAt(), pr.updatedAt(), lastBase, lastHead, base, head, ++revisionIndex, generated.get(0), subjectPrefix);
+                var revision = ArchiveItem.from(pr, localRepo, hostUserToEmailAuthor, webrevGenerator, webrevNotification, pr.updatedAt(), pr.updatedAt(), lastBase, lastHead, base, head, ++revisionIndex, generated.get(0), subjectPrefix);
                 generated.add(revision);
             }
         }
 
         // A review always have a revision mail as parent, so start with these
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -195,11 +195,11 @@
             assertTrue(archiveContains(archiveFolder.path(), webrevServer.uri().toString()));
             assertTrue(archiveContains(archiveFolder.path(), "webrev.00"));
             assertTrue(archiveContains(archiveFolder.path(), "Issue:"));
             assertTrue(archiveContains(archiveFolder.path(), "http://issues.test/browse/TSTPRJ-1234"));
             assertTrue(archiveContains(archiveFolder.path(), "Fetch:"));
-            assertTrue(archiveContains(archiveFolder.path(), "^ - " + editHash.abbreviate() + ": Change msg"));
+            assertTrue(archiveContains(archiveFolder.path(), "^ - Change msg"));
             assertFalse(archiveContains(archiveFolder.path(), "With several lines"));
 
             // The mailing list as well
             listServer.processIncoming();
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
@@ -913,11 +913,11 @@
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
 
             // The archive should reference the updated push
             Repository.materialize(archiveFolder.path(), archive.url(), "master");
-            assertTrue(archiveContains(archiveFolder.path(), "1 additional commit"));
+            assertTrue(archiveContains(archiveFolder.path(), "has updated the pull request incrementally"));
             assertTrue(archiveContains(archiveFolder.path(), "full.*/" + pr.id() + "/webrev.01"));
             assertTrue(archiveContains(archiveFolder.path(), "inc.*/" + pr.id() + "/webrev.00-01"));
             assertTrue(archiveContains(archiveFolder.path(), "Patch"));
             assertTrue(archiveContains(archiveFolder.path(), "Fetch"));
             assertTrue(archiveContains(archiveFolder.path(), "Fixing"));
@@ -1042,11 +1042,11 @@
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
 
             // The archive should reference the rebased push
             Repository.materialize(archiveFolder.path(), archive.url(), "master");
-            assertTrue(archiveContains(archiveFolder.path(), "updated with a new target base"));
+            assertTrue(archiveContains(archiveFolder.path(), "has updated the pull request with a new target base"));
             assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/webrev.01"));
             assertFalse(archiveContains(archiveFolder.path(), "Incremental"));
             assertTrue(archiveContains(archiveFolder.path(), "Patch"));
             assertTrue(archiveContains(archiveFolder.path(), "Fetch"));
             assertTrue(archiveContains(archiveFolder.path(), "Original msg"));
@@ -1153,11 +1153,11 @@
             TestBotRunner.runPeriodicItems(mlBot);
             listServer.processIncoming();
 
             // The archive should reference the rebased push
             Repository.materialize(archiveFolder.path(), archive.url(), "archive");
-            assertTrue(archiveContains(archiveFolder.path(), "updated with a new target base"));
+            assertTrue(archiveContains(archiveFolder.path(), "has updated the pull request with a new target base"));
             assertTrue(archiveContains(archiveFolder.path(), "excludes"));
             assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/webrev.01"));
             assertTrue(archiveContains(archiveFolder.path(), pr.id() + "/webrev.00-01"));
             assertTrue(archiveContains(archiveFolder.path(), "Original msg"));
             assertTrue(archiveContains(archiveFolder.path(), "More updates"));
