diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -14,22 +14,10 @@
 import java.util.Optional;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 class ArchiveMessages {
-    private static String formatCommit(Commit commit) {
-        var ret = new StringBuilder();
-        var message = commit.message();
-        if (message.size() == 0) {
-            ret.append("<no commit message found>");
-        } else {
-            var abbrev = commit.hash().abbreviate();
-            ret.append(" - ").append(abbrev).append(": ").append(message.get(0).strip());
-        }
-        return ret.toString();
-    }
-
     private static final Pattern commentPattern = Pattern.compile("<!--.*?-->",
                                                                   Pattern.DOTALL | Pattern.MULTILINE);
     private static final Pattern cutoffPattern = Pattern.compile("(.*?)<!-- Anything below this marker will be .*? -->",
                                                                  Pattern.DOTALL | Pattern.MULTILINE);
     private static String filterComments(String body) {
@@ -43,22 +31,75 @@
 
         body = MarkdownToText.removeFormatting(body);
         return body.strip();
     }
 
-    @FunctionalInterface
-    interface CommitFormatter {
-        String format(Commit commit);
+    private static String formatCommitBrief(CommitMetadata commit) {
+        var ret = new StringBuilder();
+        var message = commit.message();
+        var abbrev = commit.hash().abbreviate();
+        if (message.size() == 0) {
+            ret.append(" - ").append(abbrev).append(": <no commit message found>");
+        } else {
+            ret.append(" - ").append(message.get(0));
+        }
+        return ret.toString();
+    }
+
+    private static String formatSingleCommit(CommitMetadata commit) {
+        var ret = new StringBuilder();
+        var message = commit.message();
+        if (message.size() == 0) {
+            var abbrev = commit.hash().abbreviate();
+            ret.append("  ").append(abbrev).append(": <no commit message found>");
+        } else {
+            ret.append("  ").append(String.join("\n  ", message));
+        }
+        return ret.toString();
+    }
+
+    private static String formatCommitInList(CommitMetadata commit) {
+        var ret = new StringBuilder();
+        var message = commit.message();
+        if (message.size() == 0) {
+            var abbrev = commit.hash().abbreviate();
+            ret.append(" - ").append(abbrev).append(": <no commit message found>");
+        } else {
+            ret.append(" - ").append(String.join("\n   ", message));
+        }
+        return ret.toString();
     }
 
-    private static String formatCommitMessages(Repository localRepo, Hash first, Hash last, CommitFormatter formatter) {
-        try (var commits = localRepo.commits(first.hex() + ".." + last.hex())) {
-            return commits.stream()
-                          .map(formatter::format)
-                          .collect(Collectors.joining("\n"));
+    private static Optional<String> formatCommitMessagesFull(Repository localRepo, Hash first, Hash last) {
+        try  {
+            var commits = localRepo.commitMetadata(first, last);
+            if (commits.size() == 0) {
+                return Optional.empty();
+            } else if (commits.size() == 1) {
+                return Optional.of(formatSingleCommit(commits.get(0)));
+            } else {
+                return Optional.of(commits.stream()
+                                          .map(ArchiveMessages::formatCommitInList)
+                                          .collect(Collectors.joining("\n")));
+            }
         } catch (IOException e) {
-            throw new UncheckedIOException(e);
+            return Optional.empty();
+        }
+    }
+
+    private static Optional<String> formatCommitMessagesBrief(Repository localRepo, Hash first, Hash last) {
+        try  {
+            var commits = localRepo.commitMetadata(first, last);
+            if (commits.size() == 0) {
+                return Optional.empty();
+            } else {
+                return Optional.of(commits.stream()
+                                          .map(ArchiveMessages::formatCommitBrief)
+                                          .collect(Collectors.joining("\n")));
+            }
+        } catch (IOException e) {
+            return Optional.empty();
         }
     }
 
     private static Optional<String> issueUrl(PullRequest pr, URI issueTracker, String projectPrefix) {
         var issue = Issue.fromString(pr.title());
@@ -89,42 +130,61 @@
     private static String fetchCommand(PullRequest pr) {
         var repoUrl = pr.repository().webUrl();
         return "git fetch " + repoUrl + " " + pr.fetchRef() + ":pull/" + pr.id();
     }
 
-    static String composeConversation(PullRequest pr, Hash base, Hash head) {
+    static String composeConversation(PullRequest pr, Repository localRepo, Hash base, Hash head) {
         var filteredBody = filterComments(pr.body());
         if (filteredBody.isEmpty()) {
             filteredBody = pr.title().strip();
         }
+
         return filteredBody;
     }
 
-    static String composeRevision(PullRequest pr, Repository localRepository, Hash base, Hash head, Hash lastBase, Hash lastHead) {
+    static String composeIncrementalRevision(Repository localRepository, Hash head, Hash lastHead) {
+        var ret = new StringBuilder();
+
+        var incrementalUpdate = false;
         try {
-            if (base.equals(lastBase)) {
-                if (localRepository.isAncestor(lastHead, head)) {
-                    var updateCount = localRepository.commitMetadata(lastHead.hex() + ".." + head.hex()).size();
-                    return "The pull request has been updated with " + updateCount + " additional commit" + (updateCount != 1 ? "s" : "") + ".";
-                } else {
-                    return "Previous commits in this pull request have been removed, probably due to a force push. " +
-                            "The incremental views will show differences compared to the previous content of the PR.";
-                }
-            } else {
-                try {
-                    localRepository.checkout(lastHead, true);
-                    localRepository.rebase(base, "duke", "duke@openjdk.org");
-                    var rebasedLastHead = localRepository.head();
-                    return "The pull request has been updated with a new target base due to a merge or a rebase. " +
-                            "The incremental webrev excludes the unrelated changes brought in by the merge/rebase.";
-                } catch (IOException e) {
-                    return "The pull request has been updated with a new target base due to a merge or a rebase.";
-                }
-            }
-        } catch (IOException e) {
-            throw new UncheckedIOException(e);
+            incrementalUpdate = localRepository.isAncestor(lastHead, head);
+        } catch (IOException ignored) {
         }
+        var newCommitMessages = formatCommitMessagesFull(localRepository, lastHead, head);
+        if (incrementalUpdate) {
+            ret.append("The pull request has been incrementally updated.");
+            newCommitMessages.ifPresent(m -> ret.append(" The following content has been added to the pull request since the last revision:\n\n")
+                                                .append(m));
+        } else {
+            ret.append("Previous commits in this pull request have been removed, probably due to a force push. ");
+            ret.append("The incremental views will show differences compared to the previous content of the PR.");
+            newCommitMessages.ifPresent(m -> ret.append(" The following content has been updated in the pull request since the last revision:\n\n")
+                                                .append(m));
+        }
+        return ret.toString();
+    }
+
+    static String composeRebasedIncrementalRevision(Repository localRepository, Hash head, Hash lastHead) {
+        var ret = new StringBuilder();
+
+        ret.append("The pull request has been updated with a new target base due to a merge or a rebase. ");
+        ret.append("The incremental webrev excludes the unrelated changes brought in by the merge/rebase.");
+
+        var newCommitMessages = formatCommitMessagesFull(localRepository, lastHead, head);
+        newCommitMessages.ifPresent(m -> ret.append(" The following content has been added to the pull request since the last revision:\n\n")
+                                            .append(m));
+        return ret.toString();
+    }
+
+    static String composeFullRevision(Repository localRepository, Hash base, Hash head) {
+        var ret = new StringBuilder();
+
+        ret.append("The pull request has been updated with a new target base due to a merge or a rebase.");
+
+        var newCommitMessages = formatCommitMessagesFull(localRepository, base, head);
+        newCommitMessages.ifPresent(m -> ret.append(" The current content of this pull request:\n\n").append(m));
+        return ret.toString();
     }
 
     static String composeReplySubject(String parentSubject) {
         if (parentSubject.startsWith("Re: ")) {
             return parentSubject;
@@ -137,40 +197,33 @@
         return "PR: " + pr.webUrl();
     }
 
     // When changing this, ensure that the PR pattern in the notifier still matches
     static String composeConversationFooter(PullRequest pr, URI issueProject, String projectPrefix, Repository localRepo, URI webrev, Hash base, Hash head) {
-        var commitMessages = formatCommitMessages(localRepo, base, head, ArchiveMessages::formatCommit);
         var issueString = issueUrl(pr, issueProject, projectPrefix).map(url -> "  Issue: " + url + "\n").orElse("");
-        return "Commits:\n" +
-                commitMessages + "\n\n" +
+        return "Commit messages:\n" +
+                formatCommitMessagesBrief(localRepo, base, head).orElse("") + "\n\n" +
                 "Changes: " + pr.changeUrl() + "\n" +
                 " Webrev: " + webrev + "\n" +
                 issueString +
                 "  Stats: " + stats(localRepo, base, head) + "\n" +
                 "  Patch: " + pr.diffUrl().toString() + "\n" +
                 "  Fetch: " + fetchCommand(pr) + "\n\n" +
                 composeReplyFooter(pr);
     }
 
-    static String composeRebaseFooter(PullRequest pr, Repository localRepo, URI fullWebrev, Hash base, Hash head) {
-        var commitMessages = formatCommitMessages(localRepo, base, head, ArchiveMessages::formatCommit);
-        return "Commits:\n" +
-                commitMessages + "\n\n" +
-                "Changes: " + pr.changeUrl() + "\n" +
+    static String composeRebasedFooter(PullRequest pr, Repository localRepo, URI fullWebrev, Hash base, Hash head) {
+        return "Changes: " + pr.changeUrl() + "\n" +
                 " Webrev: " + fullWebrev.toString() + "\n" +
                 "  Stats: " + stats(localRepo, base, head) + "\n" +
                 "  Patch: " + pr.diffUrl().toString() + "\n" +
                 "  Fetch: " + fetchCommand(pr) + "\n\n" +
                 composeReplyFooter(pr);
     }
 
     static String composeIncrementalFooter(PullRequest pr, Repository localRepo, URI fullWebrev, URI incrementalWebrev, Hash head, Hash lastHead) {
-        var newCommitMessages = formatCommitMessages(localRepo, lastHead, head, ArchiveMessages::formatCommit);
-        return "Added commits:\n" +
-                newCommitMessages + "\n\n" +
-                "Changes:\n" +
+        return "Changes:\n" +
                 "  - all: " + pr.changeUrl() + "\n" +
                 "  - new: " + pr.changeUrl(lastHead) + "\n\n" +
                 "Webrevs:\n" +
                 " - full: " + fullWebrev.toString() + "\n" +
                 " - incr: " + incrementalWebrev.toString() + "\n\n" +
