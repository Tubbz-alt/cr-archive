diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
@@ -47,10 +47,13 @@
     private final String storageRef;
     private final Path baseFolder;
     private final URI baseUri;
     private final EmailAddress author;
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.mlbridge");
+    private static final HttpClient client = HttpClient.newBuilder()
+                                                       .connectTimeout(Duration.ofSeconds(10))
+                                                       .build();
 
     WebrevStorage(HostedRepository storage, String ref, Path baseFolder, URI baseUri, EmailAddress author) {
         this.baseFolder = baseFolder;
         this.baseUri = baseUri;
         this.storage = storage;
@@ -176,13 +179,11 @@
     }
 
     private void awaitPublication(URI uri, Duration timeout) throws IOException {
         var end = Instant.now().plus(timeout);
         var uriBuilder = URIBuilder.base(uri);
-        var client = HttpClient.newBuilder()
-                               .connectTimeout(Duration.ofSeconds(30))
-                               .build();
+
         while (Instant.now().isBefore(end)) {
             var uncachedUri = uriBuilder.setQuery(Map.of("nocache", UUID.randomUUID().toString())).build();
             log.fine("Validating webrev URL: " + uncachedUri);
             var request = HttpRequest.newBuilder(uncachedUri)
                                      .timeout(Duration.ofSeconds(30))
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubApplication.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubApplication.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubApplication.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubApplication.java
@@ -94,10 +94,13 @@
     private final PrivateKey key;
     private final Token jwt;
     private final Token installationToken;
 
     private final Logger log;
+    private static final HttpClient client = HttpClient.newBuilder()
+                                                       .connectTimeout(Duration.ofSeconds(10))
+                                                       .build();
 
     static class GitHubConfigurationError extends RuntimeException {
         public GitHubConfigurationError(String message) {
             super(message);
         }
@@ -172,13 +175,10 @@
         }
     }
 
     private String generateInstallationToken() throws Token.GeneratorError {
         var tokens = URIBuilder.base(apiBase).setPath("/installations/" + id + "/access_tokens").build();
-        var client = HttpClient.newBuilder()
-                               .connectTimeout(Duration.ofSeconds(10))
-                               .build();
 
         try {
             var response = client.send(
                     HttpRequest.newBuilder()
                                .uri(tokens)
@@ -206,13 +206,10 @@
         return installationToken.toString();
     }
 
     JSONObject getAppDetails() {
         var details = URIBuilder.base(apiBase).setPath("/app").build();
-        var client = HttpClient.newBuilder()
-                               .connectTimeout(Duration.ofSeconds(10))
-                               .build();
 
         try {
             var response = client.send(
                     HttpRequest.newBuilder()
                                .uri(details)
diff a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java
--- a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java
+++ b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java
@@ -38,10 +38,13 @@
     private final MailmanServer server;
     private final EmailAddress listAddress;
     private final Logger log = Logger.getLogger("org.openjdk.skara.mailinglist");
     private final ConcurrentMap<URI, HttpResponse<String>> pageCache = new ConcurrentHashMap<>();
     private List<Conversation> cachedConversations = new ArrayList<>();
+    private static final HttpClient client = HttpClient.newBuilder()
+                                                       .connectTimeout(Duration.ofSeconds(10))
+                                                       .build();
 
     MailmanList(MailmanServer server, EmailAddress name) {
         this.server = server;
         this.listAddress = name;
     }
@@ -104,12 +107,10 @@
         }
     }
 
     @Override
     public List<Conversation> conversations(Duration maxAge) {
-        var client = HttpClient.newHttpClient();
-
         // Order pages by most recent first
         var potentialPages = getMonthRange(maxAge).stream()
                                                   .sorted(Comparator.reverseOrder())
                                                   .collect(Collectors.toList());
 
