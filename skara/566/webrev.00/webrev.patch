diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -296,10 +296,17 @@
         return visitor.getChecks().entrySet().stream()
                       .map(entry -> "- [" + (entry.getValue() ? "x" : " ") + "] " + entry.getKey())
                       .collect(Collectors.joining("\n"));
     }
 
+    private String getAdditionalErrorsList(List<String> additionalErrors) {
+        return additionalErrors.stream()
+                               .sorted()
+                               .map(err -> " * " + err)
+                               .collect(Collectors.joining("\n"));
+    }
+
     private Optional<String> getReviewersList(List<Review> reviews) {
         var reviewers = reviews.stream()
                                .filter(review -> review.verdict() == Review.Verdict.APPROVED)
                                .map(review -> {
                                    var entry = " * " + formatReviewer(review.reviewer());
@@ -335,16 +342,21 @@
         } else {
             return Optional.empty();
         }
     }
 
-    private String getStatusMessage(List<Comment> comments, List<Review> reviews, PullRequestCheckIssueVisitor visitor) {
+    private String getStatusMessage(List<Comment> comments, List<Review> reviews, PullRequestCheckIssueVisitor visitor, List<String> additionalErrors) {
         var progressBody = new StringBuilder();
         progressBody.append("---------\n");
         progressBody.append("### Progress\n");
         progressBody.append(getChecksList(visitor));
 
+        if (!additionalErrors.isEmpty()) {
+            progressBody.append("\n\n### Problems\n");
+            progressBody.append(getAdditionalErrorsList(additionalErrors));
+        }
+
         var issue = Issue.fromString(pr.title());
         var issueProject = workItem.bot.issueProject();
         if (issueProject != null && issue.isPresent()) {
             var allIssues = new ArrayList<Issue>();
             allIssues.add(issue.get());
@@ -669,11 +681,11 @@
             }
             updateCheckBuilder(checkBuilder, visitor, additionalErrors);
             updateReadyForReview(visitor, additionalErrors);
 
             // Calculate and update the status message if needed
-            var statusMessage = getStatusMessage(comments, activeReviews, visitor);
+            var statusMessage = getStatusMessage(comments, activeReviews, visitor, additionalErrors);
             var updatedBody = updateStatusMessage(statusMessage);
 
             // Post / update approval messages (only needed if the review itself can't contain a body)
             if (!pr.repository().forge().supportsReviewBody()) {
                 updateReviewedMessages(comments, allReviews);
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -697,10 +697,15 @@
             assertEquals(1, checks.size());
             var check = checks.get("jcheck");
             assertEquals(CheckStatus.FAILURE, check.status());
             assertTrue(check.summary().orElseThrow().contains("The pull request body must not be empty."));
 
+            // Additional errors should be displayed in the body
+            var updatedPr = author.pullRequest(pr.id());
+            assertTrue(updatedPr.body().contains("## Problems"));
+            assertTrue(updatedPr.body().contains("The pull request body must not be empty."));
+
             // The PR should not yet be ready for review
             assertFalse(pr.labels().contains("rfr"));
             assertFalse(pr.labels().contains("ready"));
 
             // Check the status again
@@ -708,10 +713,15 @@
             TestBotRunner.runPeriodicItems(checkBot);
 
             // The PR should now be ready for review
             assertTrue(pr.labels().contains("rfr"));
             assertFalse(pr.labels().contains("ready"));
+
+            // The additional errors should be gone
+            updatedPr = author.pullRequest(pr.id());
+            assertFalse(updatedPr.body().contains("## Problems"));
+            assertFalse(updatedPr.body().contains("The pull request body must not be empty."));
         }
     }
 
     @Test
     void missingReadyLabel(TestInfo testInfo) throws IOException {
