diff a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitWebrev.java
@@ -34,10 +34,11 @@
 import java.net.http.HttpClient;
 import java.net.http.HttpRequest;
 import java.net.http.HttpResponse;
 import java.nio.file.*;
 import java.util.*;
+import java.util.logging.Level;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 public class GitWebrev {
     private static final List<String> KNOWN_JBS_PROJECTS =
@@ -140,10 +141,18 @@
                   .optional(),
             Switch.shortcut("N")
                   .fullname("no-outgoing")
                   .helptext("Do not compare against remote, use only 'status'")
                   .optional(),
+            Switch.shortcut("")
+                  .fullname("verbose")
+                  .helptext("Turn on verbose output")
+                  .optional(),
+            Switch.shortcut("")
+                  .fullname("debug")
+                  .helptext("Turn on debugging output")
+                  .optional(),
             Switch.shortcut("v")
                   .fullname("version")
                   .helptext("Print the version of this tool")
                   .optional());
 
@@ -160,12 +169,17 @@
         if (arguments.contains("version")) {
             System.out.println("git-webrev version: " + version);
             System.exit(0);
         }
 
+        if (arguments.contains("verbose") || arguments.contains("debug")) {
+            var level = arguments.contains("debug") ? Level.FINER : Level.FINE;
+            Logging.setup(level);
+        }
+
         var cwd = Paths.get("").toAbsolutePath();
-        var repository = Repository.get(cwd);
+        var repository = ReadOnlyRepository.get(cwd);
         if (!repository.isPresent()) {
             System.err.println(String.format("error: %s is not a repository", cwd.toString()));
             System.exit(1);
         }
         var repo = repository.get();
@@ -249,14 +263,13 @@
                         }
 
                         var head = repo.head();
                         var shortestDistance = -1;
                         var pullPath = repo.pullPath(remote);
-                        var remoteBranches = repo.remoteBranches(remote);
-                        for (var remoteBranch : remoteBranches) {
-                            var fetchHead = repo.fetch(URI.create(pullPath), remoteBranch.name());
-                            var mergeBase = repo.mergeBase(fetchHead, head);
+                        for (var branch : repo.branches(remote)) {
+                            var branchHead = repo.resolve(branch).orElseThrow();
+                            var mergeBase = repo.mergeBase(branchHead, head);
                             var distance = repo.commitMetadata(mergeBase, head).size();
                             if (shortestDistance == -1 || distance < shortestDistance) {
                                 rev = mergeBase;
                                 shortestDistance = distance;
                             }
