diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -440,11 +440,19 @@
                 message.append(divergingCommits.size());
                 message.append(" commits ");
             }
             message.append("pushed to the `");
             message.append(pr.targetRef());
-            message.append("` branch. ");
+            message.append("` branch:\n\n");
+            divergingCommits.stream()
+                            .limit(10)
+                            .forEach(c -> message.append(" * ").append(c.hash().hex()).append(": ").append(c.message().get(0)).append("\n"));
+            if (divergingCommits.size() > 10) {
+                message.append(" * ... full list: ").append(pr.repository().webUrl(baseHash.hex(), pr.targetRef())).append("\n");
+            }
+
+            message.append("\n");
             message.append("As there are no conflicts, your changes will automatically be rebased on top of ");
             message.append("these commits when integrating. If you prefer to avoid automatic rebasing, please merge `");
             message.append(pr.targetRef());
             message.append("` into your branch, and then specify the current head hash when integrating, like this: ");
             message.append("`/integrate ");
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -526,10 +526,11 @@
             TestBotRunner.runPeriodicItems(mergeBot);
 
             // The bot should reply with an ok message
             var updated = pr.comments().stream()
                             .filter(comment -> comment.body().contains("there has been 1 commit"))
+                            .filter(comment -> comment.body().contains(" * " + unrelatedHash.abbreviate()))
                             .filter(comment -> comment.body().contains("please merge"))
                             .count();
             assertEquals(1, updated);
         }
     }
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java
@@ -99,10 +99,15 @@
     @Override
     public URI webUrl(Hash hash) {
         return null;
     }
 
+    @Override
+    public URI webUrl(String baseRef, String headRef) {
+        return null;
+    }
+
     @Override
     public VCS repositoryType() {
         return null;
     }
 
diff a/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java b/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java
@@ -56,10 +56,11 @@
     Optional<HostedRepository> parent();
     URI url();
     URI webUrl();
     URI nonTransformedWebUrl();
     URI webUrl(Hash hash);
+    URI webUrl(String baseRef, String headRef);
     VCS repositoryType();
     String fileContents(String filename, String ref);
     String namespace();
     Optional<WebHook> parseWebHook(JSONValue body);
     HostedRepository fork();
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
@@ -198,10 +198,16 @@
     public URI webUrl(Hash hash) {
         var endpoint = "/" + repository + "/commit/" + hash.abbreviate();
         return gitHubHost.getWebURI(endpoint);
     }
 
+    @Override
+    public URI webUrl(String baseRef, String headRef) {
+        var endpoint = "/" + repository + "/compare/" + baseRef + "..." + headRef;
+        return gitHubHost.getWebURI(endpoint);
+    }
+
     @Override
     public VCS repositoryType() {
         return VCS.GIT;
     }
 
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
@@ -177,10 +177,17 @@
         return URIBuilder.base(gitLabHost.getUri())
                          .setPath("/" + projectName + "/commit/" + hash.abbreviate())
                          .build();
     }
 
+    @Override
+    public URI webUrl(String baseRef, String headRef) {
+        return URIBuilder.base(gitLabHost.getUri())
+                         .setPath("/" + projectName + "/compare/" + baseRef + "..." + headRef)
+                         .build();
+    }
+
     @Override
     public VCS repositoryType() {
         return VCS.GIT;
     }
 
diff a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
@@ -131,15 +131,16 @@
         return url();
     }
 
     @Override
     public URI webUrl(Hash hash) {
-        try {
-            return new URI(url().toString() + "/" + hash.hex());
-        } catch (URISyntaxException e) {
-            throw new RuntimeException(e);
-        }
+        return URI.create(url().toString() + "/" + hash.hex());
+    }
+
+    @Override
+    public URI webUrl(String baseRef, String headRef) {
+        return URI.create(url().toString() + "/" + baseRef + "..." + headRef);
     }
 
     @Override
     public VCS repositoryType() {
         return VCS.GIT;
