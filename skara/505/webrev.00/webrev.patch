diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -191,11 +191,11 @@
                             "Merge `project`:`branch` to allow verification of the merge contents.");
                 }
             }
         }
 
-        for (var blocker : workItem.bot.blockingLabels().entrySet()) {
+        for (var blocker : workItem.bot.blockingCheckLabels().entrySet()) {
             if (labels.contains(blocker.getKey())) {
                 ret.add(blocker.getValue());
             }
         }
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
@@ -66,13 +66,16 @@
             reply.print("Your merge request cannot be fulfilled at this time, as ");
             reply.println(problem.get());
             return;
         }
 
-        if (pr.labels().contains("rejected")) {
-            reply.println("The change is currently blocked from integration by a rejection.");
-            return;
+        var labels = new HashSet<>(pr.labels());
+        for (var blocker : bot.blockingIntegrationLabels().entrySet()) {
+            if (labels.contains(blocker.getKey())) {
+                reply.println(blocker.getValue());
+                return;
+            }
         }
 
         // Run a final jcheck to ensure the change has been properly reviewed
         try {
             var sanitizedUrl = URLEncoder.encode(pr.repository().webUrl().toString(), StandardCharsets.UTF_8);
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
@@ -38,11 +38,11 @@
     private final HostedRepository remoteRepo;
     private final HostedRepository censusRepo;
     private final String censusRef;
     private final Map<String, List<Pattern>> labelPatterns;
     private final Map<String, String> externalCommands;
-    private final Map<String, String> blockingLabels;
+    private final Map<String, String> blockingCheckLabels;
     private final Set<String> readyLabels;
     private final Map<String, Pattern> readyComments;
     private final IssueProject issueProject;
     private final boolean ignoreStaleReviews;
     private final Pattern allowedTargetBranches;
@@ -51,19 +51,19 @@
     private final PullRequestUpdateCache updateCache;
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
     PullRequestBot(HostedRepository repo, HostedRepository censusRepo, String censusRef,
                    Map<String, List<Pattern>> labelPatterns, Map<String, String> externalCommands,
-                   Map<String, String> blockingLabels, Set<String> readyLabels,
+                   Map<String, String> blockingCheckLabels, Set<String> readyLabels,
                    Map<String, Pattern> readyComments, IssueProject issueProject, boolean ignoreStaleReviews,
                    Pattern allowedTargetBranches, Path seedStorage) {
         remoteRepo = repo;
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
         this.labelPatterns = labelPatterns;
         this.externalCommands = externalCommands;
-        this.blockingLabels = blockingLabels;
+        this.blockingCheckLabels = blockingCheckLabels;
         this.readyLabels = readyLabels;
         this.issueProject = issueProject;
         this.readyComments = readyComments;
         this.ignoreStaleReviews = ignoreStaleReviews;
         this.allowedTargetBranches = allowedTargetBranches;
@@ -155,12 +155,17 @@
 
     Map<String, String> externalCommands() {
         return externalCommands;
     }
 
-    Map<String, String> blockingLabels() {
-        return blockingLabels;
+    Map<String, String> blockingCheckLabels() {
+        return blockingCheckLabels;
+    }
+
+    Map<String, String> blockingIntegrationLabels() {
+        return Map.of("rejected", "The change is currently blocked from integration by a rejection.",
+                      "csr", "The change is currently blocked from integration by a pending CSR.");
     }
 
     Set<String> readyLabels() {
         return readyLabels;
     }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotBuilder.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotBuilder.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotBuilder.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotBuilder.java
@@ -33,11 +33,11 @@
     private HostedRepository repo;
     private HostedRepository censusRepo;
     private String censusRef = "master";
     private Map<String, List<Pattern>> labelPatterns = Map.of();
     private Map<String, String> externalCommands = Map.of();
-    private Map<String, String> blockingLabels = Map.of();
+    private Map<String, String> blockingCheckLabels = Map.of();
     private Set<String> readyLabels = Set.of();
     private Map<String, Pattern> readyComments = Map.of();
     private IssueProject issueProject = null;
     private boolean ignoreStaleReviews = false;
     private Pattern allowedTargetBranches = Pattern.compile(".*");
@@ -69,12 +69,12 @@
     public PullRequestBotBuilder externalCommands(Map<String, String> externalCommands) {
         this.externalCommands = externalCommands;
         return this;
     }
 
-    public PullRequestBotBuilder blockingLabels(Map<String, String> blockingLabels) {
-        this.blockingLabels = blockingLabels;
+    public PullRequestBotBuilder blockingCheckLabels(Map<String, String> blockingCheckLabels) {
+        this.blockingCheckLabels = blockingCheckLabels;
         return this;
     }
 
     public PullRequestBotBuilder readyLabels(Set<String> readyLabels) {
         this.readyLabels = readyLabels;
@@ -105,10 +105,10 @@
         this.seedStorage = seedStorage;
         return this;
     }
 
     public PullRequestBot build() {
-        return new PullRequestBot(repo, censusRepo, censusRef, labelPatterns, externalCommands, blockingLabels,
+        return new PullRequestBot(repo, censusRepo, censusRef, labelPatterns, externalCommands, blockingCheckLabels,
                                   readyLabels, readyComments, issueProject, ignoreStaleReviews, allowedTargetBranches,
                                   seedStorage);
     }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBotFactory.java
@@ -68,11 +68,11 @@
 
             var botBuilder = PullRequestBot.newBuilder()
                                            .repo(configuration.repository(repo.name()))
                                            .censusRepo(censusRepo)
                                            .censusRef(censusRef)
-                                           .blockingLabels(blockers)
+                                           .blockingCheckLabels(blockers)
                                            .readyLabels(readyLabels)
                                            .readyComments(readyComments)
                                            .externalCommands(external)
                                            .seedStorage(configuration.storageFolder().resolve("seeds"));
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SponsorCommand.java
@@ -28,11 +28,11 @@
 
 import java.io.*;
 import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
-import java.util.List;
+import java.util.*;
 import java.util.logging.Logger;
 
 public class SponsorCommand implements CommandHandler {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
@@ -58,13 +58,16 @@
             reply.print("The PR has been updated since the change author (@" + pr.author().userName() + ") ");
             reply.println("issued the `integrate` command - the author must perform this command again.");
             return;
         }
 
-        if (pr.labels().contains("rejected")) {
-            reply.println("The change is currently blocked from integration by a rejection.");
-            return;
+        var labels = new HashSet<>(pr.labels());
+        for (var blocker : bot.blockingIntegrationLabels().entrySet()) {
+            if (labels.contains(blocker.getKey())) {
+                reply.println(blocker.getValue());
+                return;
+            }
         }
 
         // Notify the author as well
         reply.print("@" + pr.author().userName() + " ");
 
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -614,11 +614,11 @@
             var reviewer = credentials.getHostedRepository();
 
             var censusBuilder = credentials.getCensusBuilder()
                                            .addAuthor(author.forge().currentUser().id())
                                            .addReviewer(reviewer.forge().currentUser().id());
-            var checkBot = PullRequestBot.newBuilder().repo(author).censusRepo(censusBuilder.build()).blockingLabels(Map.of("block", "Test Blocker")).build();
+            var checkBot = PullRequestBot.newBuilder().repo(author).censusRepo(censusBuilder.build()).blockingCheckLabels(Map.of("block", "Test Blocker")).build();
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.url(), "master", true);
