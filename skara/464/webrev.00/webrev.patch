diff a/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java b/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
--- a/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
@@ -49,11 +49,10 @@
         System.out.print(i.check().name());
         System.out.print("] ");
         System.out.print(i.severity());
         System.out.print(": ");
         System.out.println(message);
-        hasDisplayedErrors = true;
     }
 
     private void println(CommitIssue i, String message) {
         System.out.print("[");
         System.out.print(i.check().name());
@@ -61,11 +60,10 @@
         System.out.print(i.severity());
         System.out.print(": ");
         System.out.print(i.commit().hash().abbreviate());
         System.out.print(": ");
         System.out.println(message);
-        hasDisplayedErrors = true;
     }
 
     public void visit(DuplicateIssuesIssue i) {
         var id = i.issue().id();
         var hash = i.commit().hash().abbreviate();
@@ -74,48 +72,56 @@
                      .map(Hash::abbreviate)
                      .map(s -> "         - " + s)
                      .collect(Collectors.toList());
         println(i, "issue id '" + id + "' in commit " + hash + " is already used in commits:");
         other.forEach(System.out::println);
+        hasDisplayedErrors = true;
     }
 
     public void visit(TagIssue i) {
         println(i, "illegal tag name: " + i.tag().name());
+        hasDisplayedErrors = true;
     }
 
     public void visit(BranchIssue i) {
         if (!isLocal && !isPullRequest) {
             println(i, "illegal branch name: " + i.branch().name());
+            hasDisplayedErrors = true;
         }
     }
 
     public void visit(SelfReviewIssue i) {
         println(i, "self-reviews are not allowed");
+        hasDisplayedErrors = true;
     }
 
     public void visit(TooFewReviewersIssue i) {
         if (!isLocal && !isPullRequest) {
             var required = i.numRequired();
             var actual = i.numActual();
             var reviewers = required == 1 ? " reviewer" : " reviewers";
             println(i, required + reviewers + " required, found " + actual);
+            hasDisplayedErrors = true;
         }
     }
 
     public void visit(InvalidReviewersIssue i) {
         if (!isLocal && !isPullRequest) {
             var invalid = String.join(", ", i.invalid());
             var wording = i.invalid().size() == 1 ? " is" : " are";
             println(i, invalid + wording + " not part of OpenJDK");
+            hasDisplayedErrors = true;
         }
     }
 
     public void visit(MergeMessageIssue i) {
         println(i, "merge commits should only use the commit message '" + i.expected() + "'");
+        hasDisplayedErrors = true;
     }
 
     public void visit(HgTagCommitIssue i) {
+        hasDisplayedErrors = true;
         switch (i.error()) {
             case TOO_MANY_LINES:
                 println(i, "message should only be one line");
                 return;
             case BAD_FORMAT:
@@ -132,10 +138,11 @@
 
     public void visit(CommitterIssue i) {
         var committer = i.commit().committer().name();
         var project = i.project().name();
         println(i, committer + " is not committer in project " + project);
+        hasDisplayedErrors = true;
     }
 
     private static class WhitespaceRange {
         private final WhitespaceIssue.Whitespace kind;
         private final int start;
@@ -190,59 +197,69 @@
         var pos = i.path() + ":" + i.row();
 
         System.out.println(prefix + i.describe() + " in " + pos);
         System.out.println(indent + i.escapeLine());
         System.out.println(indent + i.hints());
+        hasDisplayedErrors = true;
     }
 
     public void visit(MessageIssue i) {
         if (!isPullRequest) {
             println(i, "contains additional lines in commit message");
             for (var line : i.message().additional()) {
                 System.out.println("> " + line);
             }
+            hasDisplayedErrors = true;
         }
     }
 
     public void visit(IssuesIssue i) {
         if (!isPullRequest) {
             println(i, "missing reference to JBS issue in commit message");
             for (var line : i.commit().message()) {
                 System.out.println("> " + line);
             }
+            hasDisplayedErrors = true;
         }
     }
 
     public void visit(ExecutableIssue i) {
         println(i, "file " + i.path() + " is executable");
+        hasDisplayedErrors = true;
     }
 
     public void visit(AuthorNameIssue i) {
         println(i, "missing author name");
+        hasDisplayedErrors = true;
     }
 
     public void visit(AuthorEmailIssue i) {
         println(i, "missing author email");
+        hasDisplayedErrors = true;
     }
 
     public void visit(CommitterNameIssue i) {
         println(i, "missing committer name");
+        hasDisplayedErrors = true;
     }
 
     public void visit(CommitterEmailIssue i) {
         if (!isLocal && !isPullRequest) {
             var domain = i.expectedDomain();
             println(i, "missing committer email from domain " + domain);
+            hasDisplayedErrors = true;
         }
     }
 
     public void visit(BlacklistIssue i) {
         println(i, "commit is blacklisted");
+        hasDisplayedErrors = true;
     }
 
     public void visit(BinaryIssue i) {
         println(i, "adds binary file: " + i.path().toString());
+        hasDisplayedErrors = true;
     }
 
     public boolean hasDisplayedErrors() {
         return hasDisplayedErrors;
     }
