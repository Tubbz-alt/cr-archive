diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
@@ -31,11 +31,11 @@
 import java.io.*;
 import java.nio.file.*;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
-import java.util.stream.Collectors;
+import java.util.stream.*;
 
 public class RepositoryWorkItem implements WorkItem {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
     private final HostedRepository repository;
     private final Path storagePath;
@@ -286,11 +286,11 @@
                     errors.addAll(handleRef(localRepo, history, ref, knownRefs));
                 }
             }
             if (!errors.isEmpty()) {
                 errors.forEach(error -> log.throwing("RepositoryWorkItem", "run", error));
-                throw new RuntimeException("Errors detected when processing repository notifications");
+                throw new RuntimeException("Errors detected when processing repository notifications", errors.get(0));
             }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
@@ -218,26 +218,25 @@
 
     @Override
     public Issue createIssue(String title, List<String> body, Map<String, JSONValue> properties) {
         var query = JSON.object();
 
-        var finalProperties = new HashMap<String, JSONValue>(properties);
-
-        // Always override certain fields
-        finalProperties.put("project", JSON.object().put("id", projectId()));
-        finalProperties.put("summary", JSON.of(title));
-        finalProperties.put("description", JSON.of(String.join("\n", body)));
-
         // Encode optional properties as fields
+        var finalProperties = new HashMap<String, JSONValue>();
         for (var property : properties.entrySet()) {
             var encoded = encodeProperty(property.getKey(), property.getValue());
             if (encoded.isEmpty()) {
                 continue;
             }
             finalProperties.put(property.getKey(), encoded.get());
         }
 
+        // Always override certain fields
+        finalProperties.put("project", JSON.object().put("id", projectId()));
+        finalProperties.put("summary", JSON.of(title));
+        finalProperties.put("description", JSON.of(String.join("\n", body)));
+
         // Provide default values for required fields if not present
         finalProperties.putIfAbsent("components", JSON.array().add(JSON.object().put("id", defaultComponent())));
 
         // Filter out the fields that can be set at creation time
         var fields = JSON.object();
