diff a/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java b/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
@@ -279,11 +279,12 @@
             }
         }
 
         var lines = repo.config("jcheck.pre-push.branches");
         var shouldCheckRemoteBranches = lines.size() == 1 && lines.get(0).toLowerCase().equals("true");
-        if (isPrePush && shouldCheckRemoteBranches) {
+        if (isPrePush && shouldCheckRemoteBranches &&
+            !Files.exists(repo.root().resolve(".git").resolve("GIT_SYNC_RUNNING"))) {
             var url = arguments.get("push-url").asString();
             if (url == null) {
                 System.err.println("error: url for push not provided via --url option");
                 return 1;
             }
diff a/cli/src/main/java/org/openjdk/skara/cli/GitSync.java b/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
@@ -197,10 +197,11 @@
                     branches.add(branch.trim());
                 }
             }
         }
 
+        var marker = repo.root().resolve(".git").resolve("GIT_SYNC_RUNNING");
         var remoteBranches = repo.remoteBranches(from);
         for (var branch : remoteBranches) {
             var name = branch.name();
             if (!branches.isEmpty() && !branches.contains(name)) {
                 if (arguments.contains("verbose") || arguments.contains("debug")) {
@@ -209,11 +210,18 @@
                 continue;
             }
             System.out.print("Syncing " + from + "/" + name + " to " + to + "/" + name + "... ");
             System.out.flush();
             var fetchHead = repo.fetch(fromPullPath, branch.name());
-            repo.push(fetchHead, toPushPath, name);
+
+            Files.createFile(marker);
+            try {
+                repo.push(fetchHead, toPushPath, name);
+            } finally {
+                Files.delete(marker);
+            }
+
             System.out.println("done");
         }
 
         var shouldPull = arguments.contains("pull");
         if (!shouldPull) {
