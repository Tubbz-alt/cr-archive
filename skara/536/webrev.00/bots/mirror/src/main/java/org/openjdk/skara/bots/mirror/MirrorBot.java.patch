diff a/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java b/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
--- a/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
+++ b/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
@@ -31,22 +31,31 @@
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.nio.file.Files;
 import java.net.URLEncoder;
 import java.util.List;
+import java.util.stream.Collectors;
 import java.util.logging.Logger;
 
 class MirrorBot implements Bot, WorkItem {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
     private final Path storage;
     private final HostedRepository from;
     private final HostedRepository to;
+    private final List<Branch> branches;
+    private final boolean shouldMirrorEverything;
 
     MirrorBot(Path storage, HostedRepository from, HostedRepository to) {
+        this(storage, from, to, List.of());
+    }
+
+    MirrorBot(Path storage, HostedRepository from, HostedRepository to, List<Branch> branches) {
         this.storage = storage;
         this.from = from;
         this.to = to;
+        this.branches = branches;
+        this.shouldMirrorEverything = branches.isEmpty();
     }
 
     @Override
     public boolean concurrentWith(WorkItem other) {
         if (!(other instanceof MirrorBot)) {
@@ -61,33 +70,52 @@
         try {
             var sanitizedUrl =
                 URLEncoder.encode(from.webUrl().toString(), StandardCharsets.UTF_8);
             var dir = storage.resolve(sanitizedUrl);
             Repository repo = null;
+
+
             if (!Files.exists(dir)) {
                 log.info("Cloning " + from.name());
                 Files.createDirectories(dir);
-                repo = Repository.mirror(from.url(), dir);
+                if (shouldMirrorEverything) {
+                    repo = Repository.mirror(from.url(), dir);
+                } else {
+                    repo = Repository.clone(to.url(), dir);
+                }
             } else {
                 log.info("Found existing scratch directory for " + from.name());
                 repo = Repository.get(dir).orElseThrow(() -> {
                         return new RuntimeException("Repository in " + dir + " has vanished");
                 });
             }
 
-            log.info("Pulling " + from.name());
-            repo.fetchAll();
-            log.info("Pushing to " + to.name());
-            repo.pushAll(to.url());
+            if (shouldMirrorEverything) {
+                log.info("Pulling " + from.name());
+                repo.fetchAll();
+                log.info("Pushing to " + to.name());
+                repo.pushAll(to.url());
+            } else {
+                for (var branch : branches) {
+                    var fetchHead = repo.fetch(from.url(), branch.name());
+                    repo.push(fetchHead, to.url(), branch.name());
+                }
+            }
+
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
     @Override
     public String toString() {
-        return "MirrorBot@" + from.name() + "->" + to.name();
+        var name = "MirrorBot@" + from.name() + "->" + to.name();
+        if (!branches.isEmpty()) {
+            var branchNames = branches.stream().map(Branch::name).collect(Collectors.toList());
+            name += " (" + String.join(",", branchNames) + ")";
+        }
+        return name;
     }
 
     @Override
     public List<WorkItem> getPeriodicItems() {
         return List.of(this);
