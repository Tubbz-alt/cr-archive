diff a/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java b/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
--- a/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
+++ b/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
@@ -31,22 +31,31 @@
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.nio.file.Files;
 import java.net.URLEncoder;
 import java.util.List;
+import java.util.stream.Collectors;
 import java.util.logging.Logger;
 
 class MirrorBot implements Bot, WorkItem {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
     private final Path storage;
     private final HostedRepository from;
     private final HostedRepository to;
+    private final List<Branch> branches;
+    private final boolean shouldMirrorEverything;
 
     MirrorBot(Path storage, HostedRepository from, HostedRepository to) {
+        this(storage, from, to, List.of());
+    }
+
+    MirrorBot(Path storage, HostedRepository from, HostedRepository to, List<Branch> branches) {
         this.storage = storage;
         this.from = from;
         this.to = to;
+        this.branches = branches;
+        this.shouldMirrorEverything = branches.isEmpty();
     }
 
     @Override
     public boolean concurrentWith(WorkItem other) {
         if (!(other instanceof MirrorBot)) {
@@ -61,33 +70,52 @@
         try {
             var sanitizedUrl =
                 URLEncoder.encode(from.webUrl().toString(), StandardCharsets.UTF_8);
             var dir = storage.resolve(sanitizedUrl);
             Repository repo = null;
+
+
             if (!Files.exists(dir)) {
                 log.info("Cloning " + from.name());
                 Files.createDirectories(dir);
-                repo = Repository.mirror(from.url(), dir);
+                if (shouldMirrorEverything) {
+                    repo = Repository.mirror(from.url(), dir);
+                } else {
+                    repo = Repository.clone(to.url(), dir);
+                }
             } else {
                 log.info("Found existing scratch directory for " + from.name());
                 repo = Repository.get(dir).orElseThrow(() -> {
                         return new RuntimeException("Repository in " + dir + " has vanished");
                 });
             }
 
-            log.info("Pulling " + from.name());
-            repo.fetchAll();
-            log.info("Pushing to " + to.name());
-            repo.pushAll(to.url());
+            if (shouldMirrorEverything) {
+                log.info("Pulling " + from.name());
+                repo.fetchAll();
+                log.info("Pushing to " + to.name());
+                repo.pushAll(to.url());
+            } else {
+                for (var branch : branches) {
+                    var fetchHead = repo.fetch(from.url(), branch.name());
+                    repo.push(fetchHead, to.url(), branch.name());
+                }
+            }
+
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
     @Override
     public String toString() {
-        return "MirrorBot@" + from.name() + "->" + to.name();
+        var name = "MirrorBot@" + from.name() + "->" + to.name();
+        if (!branches.isEmpty()) {
+            var branchNames = branches.stream().map(Branch::name).collect(Collectors.toList());
+            name += " (" + String.join(",", branchNames) + ")";
+        }
+        return name;
     }
 
     @Override
     public List<WorkItem> getPeriodicItems() {
         return List.of(this);
diff a/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBotFactory.java b/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBotFactory.java
--- a/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBotFactory.java
+++ b/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBotFactory.java
@@ -21,14 +21,16 @@
  * questions.
  */
 package org.openjdk.skara.bots.mirror;
 
 import org.openjdk.skara.bot.*;
+import org.openjdk.skara.vcs.Branch;
 
 import java.io.*;
 import java.nio.file.Files;
 import java.util.*;
+import java.util.stream.Collectors;
 import java.util.logging.Logger;
 
 public class MirrorBotFactory implements BotFactory {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
 
@@ -53,11 +55,18 @@
             var fromRepo = configuration.repository(fromName);
 
             var toName = repo.get("to").asString();
             var toRepo = configuration.repository(toName);
 
+            var branchNames = repo.contains("branches")?
+                repo.get("branches").asString().split(",") : new String[0];
+            var branches = Arrays.stream(branchNames)
+                                 .map(Branch::new)
+                                 .collect(Collectors.toList());
+
+
             log.info("Setting up mirroring from " + fromRepo.name() + "to " + toRepo.name());
-            bots.add(new MirrorBot(storage, fromRepo, toRepo));
+            bots.add(new MirrorBot(storage, fromRepo, toRepo, branches));
         }
         return bots;
     }
 }
diff a/bots/mirror/src/test/java/org/openjdk/skara/bots/mirror/MirrorBotTests.java b/bots/mirror/src/test/java/org/openjdk/skara/bots/mirror/MirrorBotTests.java
--- a/bots/mirror/src/test/java/org/openjdk/skara/bots/mirror/MirrorBotTests.java
+++ b/bots/mirror/src/test/java/org/openjdk/skara/bots/mirror/MirrorBotTests.java
@@ -217,6 +217,54 @@
             assertEquals(2, toBranches.size());
             assertTrue(toBranches.contains(new Branch("master")));
             assertTrue(toBranches.contains(new Branch("third")));
         }
     }
+
+    @Test
+    void mirrorSelectedBranches(TestInfo testInfo) throws IOException {
+        try (var temp = new TemporaryDirectory()) {
+            var host = TestHost.createNew(List.of(new HostUser(0, "duke", "J. Duke")));
+
+            var fromDir = temp.path().resolve("from.git");
+            var fromLocalRepo = Repository.init(fromDir, VCS.GIT);
+            var fromHostedRepo = new TestHostedRepository(host, "test", fromLocalRepo);
+
+            var toDir = temp.path().resolve("to.git");
+            var toLocalRepo = Repository.init(toDir, VCS.GIT);
+            var gitConfig = toDir.resolve(".git").resolve("config");
+            Files.write(gitConfig, List.of("[receive]", "denyCurrentBranch = ignore"),
+                        StandardOpenOption.APPEND);
+            var toHostedRepo = new TestHostedRepository(host, "test-mirror", toLocalRepo);
+
+            var newFile = fromDir.resolve("this-file-cannot-exist.txt");
+            Files.writeString(newFile, "Hello world\n");
+            fromLocalRepo.add(newFile);
+            var first = fromLocalRepo.commit("An additional commit", "duke", "duke@openjdk.org");
+            var featureBranch = fromLocalRepo.branch(first, "feature");
+            fromLocalRepo.checkout(featureBranch, false);
+            assertEquals(Optional.of(featureBranch), fromLocalRepo.currentBranch());
+
+            Files.writeString(newFile, "Hello again\n", StandardOpenOption.APPEND);
+            fromLocalRepo.add(newFile);
+            var second = fromLocalRepo.commit("An additional commit", "duke", "duke@openjdk.org");
+
+            assertEquals(Optional.of(first), fromLocalRepo.resolve("master"));
+            assertEquals(Optional.of(second), fromLocalRepo.resolve("feature"));
+
+            var fromCommits = fromLocalRepo.commits().asList();
+            assertEquals(2, fromCommits.size());
+
+            var toCommits = toLocalRepo.commits().asList();
+            assertEquals(0, toCommits.size());
+
+            var storage = temp.path().resolve("storage");
+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(new Branch("master")));
+            TestBotRunner.runPeriodicItems(bot);
+
+            toCommits = toLocalRepo.commits().asList();
+            assertEquals(1, toCommits.size());
+            assertEquals(first, toCommits.get(0).hash());
+            assertEquals(List.of(new Branch("master")), toLocalRepo.branches());
+        }
+    }
 }
