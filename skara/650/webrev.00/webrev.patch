diff a/bots/notify/build.gradle b/bots/notify/build.gradle
--- a/bots/notify/build.gradle
+++ b/bots/notify/build.gradle
@@ -27,10 +27,11 @@
         requires 'org.junit.jupiter.api'
         requires 'org.openjdk.skara.test'
         opens 'org.openjdk.skara.bots.notify' to 'org.junit.platform.commons'
         opens 'org.openjdk.skara.bots.notify.mailinglist' to 'org.junit.platform.commons'
         opens 'org.openjdk.skara.bots.notify.json' to 'org.junit.platform.commons'
+        opens 'org.openjdk.skara.bots.notify.issue' to 'org.junit.platform.commons'
     }
 }
 
 dependencies {
     implementation project(':ci')
diff a/bots/notify/src/main/java/module-info.java b/bots/notify/src/main/java/module-info.java
--- a/bots/notify/src/main/java/module-info.java
+++ b/bots/notify/src/main/java/module-info.java
@@ -34,10 +34,10 @@
 
     provides org.openjdk.skara.bot.BotFactory with org.openjdk.skara.bots.notify.NotifyBotFactory;
 
     uses org.openjdk.skara.bots.notify.NotifierFactory;
     provides org.openjdk.skara.bots.notify.NotifierFactory with
-            org.openjdk.skara.bots.notify.issue.IssueUpdaterFactory,
+            org.openjdk.skara.bots.notify.issue.IssueNotifierFactory,
             org.openjdk.skara.bots.notify.json.JsonNotifierFactory,
             org.openjdk.skara.bots.notify.mailinglist.MailingListNotifierFactory,
             org.openjdk.skara.bots.notify.slack.SlackNotifierFactory;
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java
--- /dev/null
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java
@@ -0,0 +1,148 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.notify.issue;
+
+import org.openjdk.skara.bots.notify.*;
+import org.openjdk.skara.email.EmailAddress;
+import org.openjdk.skara.forge.*;
+import org.openjdk.skara.issuetracker.*;
+import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;
+
+import java.net.URI;
+import java.util.*;
+import java.util.logging.Logger;
+
+class IssueNotifier implements PullRequestUpdateConsumer {
+    private final IssueProject issueProject;
+    private final boolean reviewLink;
+    private final URI reviewIcon;
+    private final boolean commitLink;
+    private final URI commitIcon;
+    private final Logger log = Logger.getLogger("org.openjdk.skara.bots.notify");
+
+    IssueNotifier(IssueProject issueProject, boolean reviewLink, URI reviewIcon, boolean commitLink, URI commitIcon) {
+        this.issueProject = issueProject;
+        this.reviewLink = reviewLink;
+        this.reviewIcon = reviewIcon;
+        this.commitLink = commitLink;
+        this.commitIcon = commitIcon;
+    }
+
+    static IssueNotifierBuilder newBuilder() {
+        return new IssueNotifierBuilder();
+    }
+
+    @Override
+    public String name() {
+        return "issue";
+    }
+
+    private Optional<String> findIssueUsername(CommitMetadata commit) {
+        var authorEmail = EmailAddress.from(commit.author().email());
+        if (authorEmail.domain().equals("openjdk.org")) {
+            return Optional.of(authorEmail.localPart());
+        }
+
+        var committerEmail = EmailAddress.from(commit.committer().email());
+        if (!committerEmail.domain().equals("openjdk.org")) {
+            log.severe("Cannot determine issue tracker user name from committer email: " + committerEmail);
+            return Optional.empty();
+        }
+        return Optional.of(committerEmail.localPart());
+    }
+
+    @Override
+    public void handleIntegratedPullRequest(PullRequest pr, Hash hash)  {
+        var repository = pr.repository();
+        var commit = repository.commitMetadata(hash).orElseThrow(() ->
+                new IllegalStateException("Integrated commit " + hash +
+                                          " not present in repository " + repository.webUrl())
+        );
+        var commitMessage = CommitMessageParsers.v1.parse(commit);
+        for (var commitIssue : commitMessage.issues()) {
+            var optionalIssue = issueProject.issue(commitIssue.shortId());
+            if (optionalIssue.isEmpty()) {
+                log.severe("Cannot update issue " + commitIssue.id() + " with commit " + commit.hash().abbreviate()
+                        + " - issue not found in issue project");
+                continue;
+            }
+            var issue = optionalIssue.get();
+
+            if (commitLink) {
+                var linkBuilder = Link.create(repository.webUrl(hash), "Commit")
+                                      .summary(repository.name() + "/" + hash.abbreviate());
+                if (commitIcon != null) {
+                    linkBuilder.iconTitle("Commit");
+                    linkBuilder.iconUrl(commitIcon);
+                }
+                issue.addLink(linkBuilder.build());
+            }
+
+            if (issue.state() == Issue.State.OPEN) {
+                issue.setState(Issue.State.RESOLVED);
+                if (issue.assignees().isEmpty()) {
+                    var username = findIssueUsername(commit);
+                    if (username.isPresent()) {
+                        var assignee = issueProject.issueTracker().user(username.get());
+                        if (assignee.isPresent()) {
+                            issue.setAssignees(List.of(assignee.get()));
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    @Override
+    public void handleNewIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
+        var realIssue = issueProject.issue(issue.shortId());
+        if (realIssue.isEmpty()) {
+            log.warning("Pull request " + pr + " added unknown issue: " + issue.id());
+            return;
+        }
+
+        if (reviewLink) {
+            var linkBuilder = Link.create(pr.webUrl(), "Review")
+                                  .summary(pr.repository().name() + "/" + pr.id());
+            if (reviewIcon != null) {
+                linkBuilder.iconTitle("Review");
+                linkBuilder.iconUrl(reviewIcon);
+            }
+
+            realIssue.get().addLink(linkBuilder.build());
+        }
+    }
+
+    @Override
+    public void handleRemovedIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
+        var realIssue = issueProject.issue(issue.shortId());
+        if (realIssue.isEmpty()) {
+            log.warning("Pull request " + pr + " removed unknown issue: " + issue.id());
+            return;
+        }
+
+        var link = Link.create(pr.webUrl(), "").build();
+        realIssue.get().removeLink(link);
+    }
+}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifierBuilder.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifierBuilder.java
--- /dev/null
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifierBuilder.java
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.notify.issue;
+
+import org.openjdk.skara.issuetracker.IssueProject;
+
+import java.net.URI;
+import java.util.Map;
+
+class IssueNotifierBuilder {
+    private IssueProject issueProject;
+    private boolean reviewLink = true;
+    private URI reviewIcon = null;
+    private boolean commitLink = true;
+    private URI commitIcon = null;
+
+    IssueNotifierBuilder issueProject(IssueProject issueProject) {
+        this.issueProject = issueProject;
+        return this;
+    }
+
+    IssueNotifierBuilder reviewLink(boolean reviewLink) {
+        this.reviewLink = reviewLink;
+        return this;
+    }
+
+    IssueNotifierBuilder reviewIcon(URI reviewIcon) {
+        this.reviewIcon = reviewIcon;
+        return this;
+    }
+
+    IssueNotifierBuilder commitLink(boolean commitLink) {
+        this.commitLink = commitLink;
+        return this;
+    }
+
+    IssueNotifierBuilder commitIcon(URI commitIcon) {
+        this.commitIcon = commitIcon;
+        return this;
+    }
+
+    IssueNotifier build() {
+        return new IssueNotifier(issueProject, reviewLink, reviewIcon, commitLink, commitIcon);
+    }
+}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifierFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifierFactory.java
--- /dev/null
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifierFactory.java
@@ -0,0 +1,41 @@
+package org.openjdk.skara.bots.notify.issue;
+
+import org.openjdk.skara.bot.BotConfiguration;
+import org.openjdk.skara.bots.notify.*;
+import org.openjdk.skara.json.JSONObject;
+
+import java.net.URI;
+
+public class IssueNotifierFactory implements NotifierFactory {
+    @Override
+    public String name() {
+        return "issue";
+    }
+
+    @Override
+    public Notifier create(BotConfiguration botConfiguration, JSONObject notifierConfiguration) {
+        var issueProject = botConfiguration.issueProject(notifierConfiguration.get("project").asString());
+        var builder = IssueNotifier.newBuilder()
+                                   .issueProject(issueProject);
+
+        if (notifierConfiguration.contains("reviews")) {
+            if (notifierConfiguration.get("reviews").contains("icon")) {
+                builder.reviewIcon(URI.create(notifierConfiguration.get("reviews").get("icon").asString()));
+            }
+        }
+        if (notifierConfiguration.contains("commits")) {
+            if (notifierConfiguration.get("commits").contains("icon")) {
+                builder.commitIcon(URI.create(notifierConfiguration.get("commits").get("icon").asString()));
+            }
+        }
+
+        if (notifierConfiguration.contains("reviewlink")) {
+            builder.reviewLink(notifierConfiguration.get("reviewlink").asBoolean());
+        }
+        if (notifierConfiguration.contains("commitlink")) {
+            builder.commitLink(notifierConfiguration.get("commitlink").asBoolean());
+        }
+
+        return builder.build();
+    }
+}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueUpdater.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.bots.notify.issue;
-
-import org.openjdk.skara.bots.notify.*;
-import org.openjdk.skara.email.EmailAddress;
-import org.openjdk.skara.forge.*;
-import org.openjdk.skara.issuetracker.*;
-import org.openjdk.skara.vcs.*;
-import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;
-
-import java.net.URI;
-import java.util.*;
-import java.util.logging.Logger;
-
-public class IssueUpdater implements PullRequestUpdateConsumer {
-    private final IssueProject issueProject;
-    private final boolean reviewLink;
-    private final URI reviewIcon;
-    private final boolean commitLink;
-    private final URI commitIcon;
-    private final Logger log = Logger.getLogger("org.openjdk.skara.bots.notify");
-
-    IssueUpdater(IssueProject issueProject, boolean reviewLink, URI reviewIcon, boolean commitLink, URI commitIcon) {
-        this.issueProject = issueProject;
-        this.reviewLink = reviewLink;
-        this.reviewIcon = reviewIcon;
-        this.commitLink = commitLink;
-        this.commitIcon = commitIcon;
-    }
-
-    public static IssueUpdaterBuilder newBuilder() {
-        return new IssueUpdaterBuilder();
-    }
-
-    @Override
-    public String name() {
-        return "issue";
-    }
-
-    private Optional<String> findIssueUsername(CommitMetadata commit) {
-        var authorEmail = EmailAddress.from(commit.author().email());
-        if (authorEmail.domain().equals("openjdk.org")) {
-            return Optional.of(authorEmail.localPart());
-        }
-
-        var committerEmail = EmailAddress.from(commit.committer().email());
-        if (!committerEmail.domain().equals("openjdk.org")) {
-            log.severe("Cannot determine issue tracker user name from committer email: " + committerEmail);
-            return Optional.empty();
-        }
-        return Optional.of(committerEmail.localPart());
-    }
-
-    @Override
-    public void handleIntegratedPullRequest(PullRequest pr, Hash hash)  {
-        var repository = pr.repository();
-        var commit = repository.commitMetadata(hash).orElseThrow(() ->
-                new IllegalStateException("Integrated commit " + hash +
-                                          " not present in repository " + repository.webUrl())
-        );
-        var commitMessage = CommitMessageParsers.v1.parse(commit);
-        for (var commitIssue : commitMessage.issues()) {
-            var optionalIssue = issueProject.issue(commitIssue.shortId());
-            if (optionalIssue.isEmpty()) {
-                log.severe("Cannot update issue " + commitIssue.id() + " with commit " + commit.hash().abbreviate()
-                        + " - issue not found in issue project");
-                continue;
-            }
-            var issue = optionalIssue.get();
-
-            if (commitLink) {
-                var linkBuilder = Link.create(repository.webUrl(hash), "Commit")
-                                      .summary(repository.name() + "/" + hash.abbreviate());
-                if (commitIcon != null) {
-                    linkBuilder.iconTitle("Commit");
-                    linkBuilder.iconUrl(commitIcon);
-                }
-                issue.addLink(linkBuilder.build());
-            }
-
-            if (issue.state() == Issue.State.OPEN) {
-                issue.setState(Issue.State.RESOLVED);
-                if (issue.assignees().isEmpty()) {
-                    var username = findIssueUsername(commit);
-                    if (username.isPresent()) {
-                        var assignee = issueProject.issueTracker().user(username.get());
-                        if (assignee.isPresent()) {
-                            issue.setAssignees(List.of(assignee.get()));
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    @Override
-    public void handleNewIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
-        var realIssue = issueProject.issue(issue.shortId());
-        if (realIssue.isEmpty()) {
-            log.warning("Pull request " + pr + " added unknown issue: " + issue.id());
-            return;
-        }
-
-        if (reviewLink) {
-            var linkBuilder = Link.create(pr.webUrl(), "Review")
-                                  .summary(pr.repository().name() + "/" + pr.id());
-            if (reviewIcon != null) {
-                linkBuilder.iconTitle("Review");
-                linkBuilder.iconUrl(reviewIcon);
-            }
-
-            realIssue.get().addLink(linkBuilder.build());
-        }
-    }
-
-    @Override
-    public void handleRemovedIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
-        var realIssue = issueProject.issue(issue.shortId());
-        if (realIssue.isEmpty()) {
-            log.warning("Pull request " + pr + " removed unknown issue: " + issue.id());
-            return;
-        }
-
-        var link = Link.create(pr.webUrl(), "").build();
-        realIssue.get().removeLink(link);
-    }
-}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueUpdaterBuilder.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueUpdaterBuilder.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueUpdaterBuilder.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.bots.notify.issue;
-
-import org.openjdk.skara.issuetracker.IssueProject;
-
-import java.net.URI;
-import java.util.Map;
-
-public class IssueUpdaterBuilder {
-    private IssueProject issueProject;
-    private boolean reviewLink = true;
-    private URI reviewIcon = null;
-    private boolean commitLink = true;
-    private URI commitIcon = null;
-
-    public IssueUpdaterBuilder issueProject(IssueProject issueProject) {
-        this.issueProject = issueProject;
-        return this;
-    }
-
-    public IssueUpdaterBuilder reviewLink(boolean reviewLink) {
-        this.reviewLink = reviewLink;
-        return this;
-    }
-
-    public IssueUpdaterBuilder reviewIcon(URI reviewIcon) {
-        this.reviewIcon = reviewIcon;
-        return this;
-    }
-
-    public IssueUpdaterBuilder commitLink(boolean commitLink) {
-        this.commitLink = commitLink;
-        return this;
-    }
-
-    public IssueUpdaterBuilder commitIcon(URI commitIcon) {
-        this.commitIcon = commitIcon;
-        return this;
-    }
-
-    public IssueUpdater build() {
-        return new IssueUpdater(issueProject, reviewLink, reviewIcon, commitLink, commitIcon);
-    }
-}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueUpdaterFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueUpdaterFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueUpdaterFactory.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package org.openjdk.skara.bots.notify.issue;
-
-import org.openjdk.skara.bot.BotConfiguration;
-import org.openjdk.skara.bots.notify.*;
-import org.openjdk.skara.json.JSONObject;
-
-import java.net.URI;
-
-public class IssueUpdaterFactory implements NotifierFactory {
-    @Override
-    public String name() {
-        return "issue";
-    }
-
-    @Override
-    public Notifier create(BotConfiguration botConfiguration, JSONObject notifierConfiguration) {
-        var issueProject = botConfiguration.issueProject(notifierConfiguration.get("project").asString());
-        var issueUpdaterBuilder = IssueUpdater.newBuilder()
-                .issueProject(issueProject);
-
-        if (notifierConfiguration.contains("reviews")) {
-            if (notifierConfiguration.get("reviews").contains("icon")) {
-                issueUpdaterBuilder.reviewIcon(URI.create(notifierConfiguration.get("reviews").get("icon").asString()));
-            }
-        }
-        if (notifierConfiguration.contains("commits")) {
-            if (notifierConfiguration.get("commits").contains("icon")) {
-                issueUpdaterBuilder.commitIcon(URI.create(notifierConfiguration.get("commits").get("icon").asString()));
-            }
-        }
-
-        if (notifierConfiguration.contains("reviewlink")) {
-            issueUpdaterBuilder.reviewLink(notifierConfiguration.get("reviewlink").asBoolean());
-        }
-        if (notifierConfiguration.contains("commitlink")) {
-            issueUpdaterBuilder.commitLink(notifierConfiguration.get("commitlink").asBoolean());
-        }
-
-        return issueUpdaterBuilder.build();
-    }
-}
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/IssueUpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/IssueUpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/IssueUpdaterTests.java
+++ /dev/null
@@ -1,342 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.bots.notify;
-
-import org.junit.jupiter.api.*;
-import org.openjdk.skara.bots.notify.issue.IssueUpdater;
-import org.openjdk.skara.json.JSON;
-import org.openjdk.skara.test.*;
-
-import java.io.IOException;
-import java.net.URI;
-import java.util.*;
-import java.util.regex.Pattern;
-
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.openjdk.skara.bots.notify.UpdaterTests.*;
-
-public class IssueUpdaterTests {
-    @Test
-    void testIssueIdempotence(TestInfo testInfo) throws IOException {
-        try (var credentials = new HostCredentials(testInfo);
-             var tempFolder = new TemporaryDirectory()) {
-            var repo = credentials.getHostedRepository();
-            var repoFolder = tempFolder.path().resolve("repo");
-            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());
-            credentials.commitLock(localRepo);
-            localRepo.pushAll(repo.url());
-
-            var tagStorage = createTagStorage(repo);
-            var branchStorage = createBranchStorage(repo);
-            var prStateStorage = createPullRequestStateStorage(repo);
-            var storageFolder = tempFolder.path().resolve("storage");
-
-            var issueProject = credentials.getIssueProject();
-            var commitIcon = URI.create("http://www.example.com/commit.png");
-            var updater = IssueUpdater.newBuilder()
-                                      .issueProject(issueProject)
-                                      .reviewLink(false)
-                                      .commitIcon(commitIcon)
-                                      .build();
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile("master"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .prUpdaters(List.of(updater))
-                                     .integratorId(repo.forge().currentUser().id())
-                                     .build();
-
-            // Initialize history
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // Save the state
-            var historyState = localRepo.fetch(repo.url(), "history");
-
-            // Create an issue and commit a fix
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
-            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
-            localRepo.push(editHash, repo.url(), "master");
-            var pr = credentials.createPullRequest(repo, "master", "master", issue.id() + ": Fix that issue");
-            pr.setBody("\n\n### Issue\n * [" + issue.id() + "](http://www.test.test/): The issue");
-            pr.addLabel("integrated");
-            pr.addComment("Pushed as commit " + editHash.hex() + ".");
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // The changeset should be reflected in a link
-            var links = issue.links();
-            assertEquals(1, links.size());
-            var link = links.get(0);
-            assertEquals(commitIcon, link.iconUrl().orElseThrow());
-            assertEquals("Commit", link.title().orElseThrow());
-            assertEquals(repo.webUrl(editHash), link.uri().orElseThrow());
-
-            // Wipe the history
-            localRepo.push(historyState, repo.url(), "history", true);
-
-            // Run it again
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // There should be no new links
-            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
-            assertEquals(1, updatedIssue.links().size());
-        }
-    }
-
-    @Test
-    void testPullRequest(TestInfo testInfo) throws IOException {
-        try (var credentials = new HostCredentials(testInfo);
-             var tempFolder = new TemporaryDirectory()) {
-            var repo = credentials.getHostedRepository();
-            var reviewer = credentials.getHostedRepository();
-            var repoFolder = tempFolder.path().resolve("repo");
-            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());
-            credentials.commitLock(localRepo);
-            localRepo.pushAll(repo.url());
-
-            var tagStorage = createTagStorage(repo);
-            var branchStorage = createBranchStorage(repo);
-            var prStateStorage = createPullRequestStateStorage(repo);
-            var storageFolder = tempFolder.path().resolve("storage");
-
-            var issueProject = credentials.getIssueProject();
-            var reviewIcon = URI.create("http://www.example.com/review.png");
-            var updater = IssueUpdater.newBuilder()
-                                      .issueProject(issueProject)
-                                      .reviewIcon(reviewIcon)
-                                      .commitLink(false)
-                                      .build();
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile("master"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .prUpdaters(List.of(updater))
-                                     .readyLabels(Set.of("rfr"))
-                                     .readyComments(Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")))
-                                     .build();
-
-            // Initialize history
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // Create an issue and a pull request to fix it
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
-            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix that issue");
-            localRepo.push(editHash, repo.url(), "edit", true);
-            var pr = credentials.createPullRequest(repo, "edit", "master", issue.id() + ": Fix that issue");
-            pr.setBody("\n\n### Issue\n * [" + issue.id() + "](http://www.test.test/): The issue");
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // The issue should not yet contain a link to the PR
-            var links = issue.links();
-            assertEquals(0, links.size());
-
-            // Just a label isn't enough
-            pr.addLabel("rfr");
-            TestBotRunner.runPeriodicItems(notifyBot);
-            links = issue.links();
-            assertEquals(0, links.size());
-
-            // Neither is just a comment
-            pr.removeLabel("rfr");
-            var reviewPr = reviewer.pullRequest(pr.id());
-            reviewPr.addComment("This is now ready");
-            TestBotRunner.runPeriodicItems(notifyBot);
-            links = issue.links();
-            assertEquals(0, links.size());
-
-            // Both are needed
-            pr.addLabel("rfr");
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // The issue should now contain a link to the PR
-            links = issue.links();
-            assertEquals(1, links.size());
-            assertEquals(pr.webUrl(), links.get(0).uri().orElseThrow());
-            assertEquals(reviewIcon, links.get(0).iconUrl().orElseThrow());
-
-            // Add another issue
-            var issue2 = issueProject.createIssue("This is another issue", List.of("Yes indeed"), Map.of("issuetype", JSON.of("Enhancement")));
-            pr.setBody("\n\n### Issues\n * [" + issue.id() + "](http://www.test.test/): The issue\n * [" + issue2.id() +
-                    "](http://www.test2.test/): The second issue");
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // Both issues should contain a link to the PR
-            var links1 = issue.links();
-            assertEquals(1, links1.size());
-            assertEquals(pr.webUrl(), links1.get(0).uri().orElseThrow());
-            var links2 = issue2.links();
-            assertEquals(1, links2.size());
-            assertEquals(pr.webUrl(), links2.get(0).uri().orElseThrow());
-
-            // Drop the first one
-            pr.setBody("\n\n### Issues\n * [" + issue2.id() + "](http://www.test2.test/): That other issue");
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // Only the second issue should now contain a link to the PR
-            links1 = issue.links();
-            assertEquals(0, links1.size());
-            links2 = issue2.links();
-            assertEquals(1, links2.size());
-            assertEquals(pr.webUrl(), links2.get(0).uri().orElseThrow());
-        }
-    }
-
-    @Test
-    void testPullRequestNoReview(TestInfo testInfo) throws IOException {
-        try (var credentials = new HostCredentials(testInfo);
-             var tempFolder = new TemporaryDirectory()) {
-            var repo = credentials.getHostedRepository();
-            var reviewer = credentials.getHostedRepository();
-            var repoFolder = tempFolder.path().resolve("repo");
-            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());
-            credentials.commitLock(localRepo);
-            localRepo.pushAll(repo.url());
-
-            var tagStorage = createTagStorage(repo);
-            var branchStorage = createBranchStorage(repo);
-            var prStateStorage = createPullRequestStateStorage(repo);
-            var storageFolder = tempFolder.path().resolve("storage");
-
-            var issueProject = credentials.getIssueProject();
-            var reviewIcon = URI.create("http://www.example.com/review.png");
-            var updater = IssueUpdater.newBuilder()
-                                      .issueProject(issueProject)
-                                      .reviewLink(false)
-                                      .reviewIcon(reviewIcon)
-                                      .commitLink(false)
-                                      .build();
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile("master"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .prUpdaters(List.of(updater)).readyLabels(Set.of("rfr"))
-                                     .readyComments(Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")))
-                                     .build();
-            // Initialize history
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // Create an issue and a pull request to fix it
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
-            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix that issue");
-            localRepo.push(editHash, repo.url(), "edit", true);
-            var pr = credentials.createPullRequest(repo, "edit", "master", issue.id() + ": Fix that issue");
-            pr.setBody("\n\n### Issue\n * [" + issue.id() + "](http://www.test.test/): The issue");
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // Add required label
-            pr.addLabel("rfr");
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // And the required comment
-            var reviewPr = reviewer.pullRequest(pr.id());
-            reviewPr.addComment("This is now ready");
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // The issue should still not contain a link to the PR
-            var links = issue.links();
-            assertEquals(0, links.size());
-        }
-    }
-
-    @Test
-    void testPullRequestPROnly(TestInfo testInfo) throws IOException {
-        try (var credentials = new HostCredentials(testInfo);
-             var tempFolder = new TemporaryDirectory()) {
-            var repo = credentials.getHostedRepository();
-            var repoFolder = tempFolder.path().resolve("repo");
-            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());
-            credentials.commitLock(localRepo);
-            localRepo.pushAll(repo.url());
-
-            var tagStorage = createTagStorage(repo);
-            var branchStorage = createBranchStorage(repo);
-            var prStateStorage = createPullRequestStateStorage(repo);
-            var storageFolder = tempFolder.path().resolve("storage");
-
-            var issueProject = credentials.getIssueProject();
-            var reviewIcon = URI.create("http://www.example.com/review.png");
-            var updater = IssueUpdater.newBuilder()
-                                      .issueProject(issueProject)
-                                      .reviewIcon(reviewIcon)
-                                      .commitLink(true)
-                                      .commitIcon(reviewIcon)
-                                      .build();
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile(".*"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .prUpdaters(List.of(updater))
-                                     .integratorId(repo.forge().currentUser().id())
-                                     .build();
-
-            // Initialize history
-            localRepo.push(localRepo.resolve("master").orElseThrow(), repo.url(), "other");
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // Create an issue and a pull request to fix it
-            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
-            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
-            localRepo.push(editHash, repo.url(), "edit", true);
-            var pr = credentials.createPullRequest(repo, "other", "edit", issue.id() + ": Fix that issue");
-            pr.setBody("\n\n### Issue\n * [" + issue.id() + "](http://www.test.test/): The issue");
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // The issue should now contain a link to the PR
-            var links = issue.links();
-            assertEquals(1, links.size());
-            assertEquals(pr.webUrl(), links.get(0).uri().orElseThrow());
-            assertEquals(reviewIcon, links.get(0).iconUrl().orElseThrow());
-
-            // Simulate integration
-            pr.addComment("Pushed as commit " + editHash.hex() + ".");
-            pr.addLabel("integrated");
-            localRepo.push(editHash, repo.url(), "other");
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // The changeset should be reflected in another link
-            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
-            links = updatedIssue.links();
-            assertEquals(2, links.size());
-
-            // Now simulate a merge to another branch
-            localRepo.push(editHash, repo.url(), "master");
-            TestBotRunner.runPeriodicItems(notifyBot);
-
-            // No additional link should have been created
-            updatedIssue = issueProject.issue(issue.id()).orElseThrow();
-            links = updatedIssue.links();
-            assertEquals(2, links.size());
-        }
-    }
-}
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java
--- /dev/null
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java
@@ -0,0 +1,342 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.notify.issue;
+
+import org.junit.jupiter.api.*;
+import org.openjdk.skara.bots.notify.*;
+import org.openjdk.skara.json.JSON;
+import org.openjdk.skara.test.*;
+
+import java.io.IOException;
+import java.net.URI;
+import java.util.*;
+import java.util.regex.Pattern;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.openjdk.skara.bots.notify.UpdaterTests.*;
+
+public class IssueNotifierTests {
+    @Test
+    void testIssueIdempotence(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var commitIcon = URI.create("http://www.example.com/commit.png");
+            var updater = IssueNotifier.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewLink(false)
+                                      .commitIcon(commitIcon)
+                                      .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prStateStorageBuilder(prStateStorage)
+                                     .prUpdaters(List.of(updater))
+                                     .integratorId(repo.forge().currentUser().id())
+                                     .build();
+
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Save the state
+            var historyState = localRepo.fetch(repo.url(), "history");
+
+            // Create an issue and commit a fix
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
+            localRepo.push(editHash, repo.url(), "master");
+            var pr = credentials.createPullRequest(repo, "master", "master", issue.id() + ": Fix that issue");
+            pr.setBody("\n\n### Issue\n * [" + issue.id() + "](http://www.test.test/): The issue");
+            pr.addLabel("integrated");
+            pr.addComment("Pushed as commit " + editHash.hex() + ".");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The changeset should be reflected in a link
+            var links = issue.links();
+            assertEquals(1, links.size());
+            var link = links.get(0);
+            assertEquals(commitIcon, link.iconUrl().orElseThrow());
+            assertEquals("Commit", link.title().orElseThrow());
+            assertEquals(repo.webUrl(editHash), link.uri().orElseThrow());
+
+            // Wipe the history
+            localRepo.push(historyState, repo.url(), "history", true);
+
+            // Run it again
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // There should be no new links
+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
+            assertEquals(1, updatedIssue.links().size());
+        }
+    }
+
+    @Test
+    void testPullRequest(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var reviewer = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var reviewIcon = URI.create("http://www.example.com/review.png");
+            var updater = IssueNotifier.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewIcon(reviewIcon)
+                                      .commitLink(false)
+                                      .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prStateStorageBuilder(prStateStorage)
+                                     .prUpdaters(List.of(updater))
+                                     .readyLabels(Set.of("rfr"))
+                                     .readyComments(Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")))
+                                     .build();
+
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Create an issue and a pull request to fix it
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix that issue");
+            localRepo.push(editHash, repo.url(), "edit", true);
+            var pr = credentials.createPullRequest(repo, "edit", "master", issue.id() + ": Fix that issue");
+            pr.setBody("\n\n### Issue\n * [" + issue.id() + "](http://www.test.test/): The issue");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The issue should not yet contain a link to the PR
+            var links = issue.links();
+            assertEquals(0, links.size());
+
+            // Just a label isn't enough
+            pr.addLabel("rfr");
+            TestBotRunner.runPeriodicItems(notifyBot);
+            links = issue.links();
+            assertEquals(0, links.size());
+
+            // Neither is just a comment
+            pr.removeLabel("rfr");
+            var reviewPr = reviewer.pullRequest(pr.id());
+            reviewPr.addComment("This is now ready");
+            TestBotRunner.runPeriodicItems(notifyBot);
+            links = issue.links();
+            assertEquals(0, links.size());
+
+            // Both are needed
+            pr.addLabel("rfr");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The issue should now contain a link to the PR
+            links = issue.links();
+            assertEquals(1, links.size());
+            assertEquals(pr.webUrl(), links.get(0).uri().orElseThrow());
+            assertEquals(reviewIcon, links.get(0).iconUrl().orElseThrow());
+
+            // Add another issue
+            var issue2 = issueProject.createIssue("This is another issue", List.of("Yes indeed"), Map.of("issuetype", JSON.of("Enhancement")));
+            pr.setBody("\n\n### Issues\n * [" + issue.id() + "](http://www.test.test/): The issue\n * [" + issue2.id() +
+                    "](http://www.test2.test/): The second issue");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Both issues should contain a link to the PR
+            var links1 = issue.links();
+            assertEquals(1, links1.size());
+            assertEquals(pr.webUrl(), links1.get(0).uri().orElseThrow());
+            var links2 = issue2.links();
+            assertEquals(1, links2.size());
+            assertEquals(pr.webUrl(), links2.get(0).uri().orElseThrow());
+
+            // Drop the first one
+            pr.setBody("\n\n### Issues\n * [" + issue2.id() + "](http://www.test2.test/): That other issue");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Only the second issue should now contain a link to the PR
+            links1 = issue.links();
+            assertEquals(0, links1.size());
+            links2 = issue2.links();
+            assertEquals(1, links2.size());
+            assertEquals(pr.webUrl(), links2.get(0).uri().orElseThrow());
+        }
+    }
+
+    @Test
+    void testPullRequestNoReview(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var reviewer = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var reviewIcon = URI.create("http://www.example.com/review.png");
+            var updater = IssueNotifier.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewLink(false)
+                                      .reviewIcon(reviewIcon)
+                                      .commitLink(false)
+                                      .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prStateStorageBuilder(prStateStorage)
+                                     .prUpdaters(List.of(updater)).readyLabels(Set.of("rfr"))
+                                     .readyComments(Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")))
+                                     .build();
+            // Initialize history
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Create an issue and a pull request to fix it
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "Fix that issue");
+            localRepo.push(editHash, repo.url(), "edit", true);
+            var pr = credentials.createPullRequest(repo, "edit", "master", issue.id() + ": Fix that issue");
+            pr.setBody("\n\n### Issue\n * [" + issue.id() + "](http://www.test.test/): The issue");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Add required label
+            pr.addLabel("rfr");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // And the required comment
+            var reviewPr = reviewer.pullRequest(pr.id());
+            reviewPr.addComment("This is now ready");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The issue should still not contain a link to the PR
+            var links = issue.links();
+            assertEquals(0, links.size());
+        }
+    }
+
+    @Test
+    void testPullRequestPROnly(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var repoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var issueProject = credentials.getIssueProject();
+            var reviewIcon = URI.create("http://www.example.com/review.png");
+            var updater = IssueNotifier.newBuilder()
+                                      .issueProject(issueProject)
+                                      .reviewIcon(reviewIcon)
+                                      .commitLink(true)
+                                      .commitIcon(reviewIcon)
+                                      .build();
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile(".*"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prStateStorageBuilder(prStateStorage)
+                                     .prUpdaters(List.of(updater))
+                                     .integratorId(repo.forge().currentUser().id())
+                                     .build();
+
+            // Initialize history
+            localRepo.push(localRepo.resolve("master").orElseThrow(), repo.url(), "other");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // Create an issue and a pull request to fix it
+            var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
+            localRepo.push(editHash, repo.url(), "edit", true);
+            var pr = credentials.createPullRequest(repo, "other", "edit", issue.id() + ": Fix that issue");
+            pr.setBody("\n\n### Issue\n * [" + issue.id() + "](http://www.test.test/): The issue");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The issue should now contain a link to the PR
+            var links = issue.links();
+            assertEquals(1, links.size());
+            assertEquals(pr.webUrl(), links.get(0).uri().orElseThrow());
+            assertEquals(reviewIcon, links.get(0).iconUrl().orElseThrow());
+
+            // Simulate integration
+            pr.addComment("Pushed as commit " + editHash.hex() + ".");
+            pr.addLabel("integrated");
+            localRepo.push(editHash, repo.url(), "other");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // The changeset should be reflected in another link
+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
+            links = updatedIssue.links();
+            assertEquals(2, links.size());
+
+            // Now simulate a merge to another branch
+            localRepo.push(editHash, repo.url(), "master");
+            TestBotRunner.runPeriodicItems(notifyBot);
+
+            // No additional link should have been created
+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();
+            links = updatedIssue.links();
+            assertEquals(2, links.size());
+        }
+    }
+}
