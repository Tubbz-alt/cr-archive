diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SummaryCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SummaryCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SummaryCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SummaryCommand.java
@@ -25,36 +25,49 @@
 import org.openjdk.skara.forge.PullRequest;
 import org.openjdk.skara.issuetracker.Comment;
 
 import java.io.PrintWriter;
 import java.nio.file.Path;
+import java.util.Arrays;
 import java.util.List;
 
 public class SummaryCommand implements CommandHandler {
     @Override
     public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
         if (!comment.author().equals(pr.author())) {
-            reply.println("Only the author (@" + pr.author().userName() + ") is allowed to issue the `summary` command.");
+            reply.println("Only the author (@" + pr.author().userName() + ") is allowed to issue the `/summary` command.");
             return;
         }
 
         var currentSummary = Summary.summary(pr.repository().forge().currentUser(), allComments);
 
         if (args.isBlank()) {
-            if (currentSummary.isPresent()) {
-                reply.println("Removing existing summary");
-                reply.println(Summary.setSummaryMarker(""));
+            var lines = Arrays.asList(comment.body().split("\n"));
+            if (lines.size() == 1) {
+                if (currentSummary.isPresent()) {
+                    reply.println("Removing existing summary");
+                    reply.println(Summary.setSummaryMarker(""));
+                } else {
+                    reply.println("To set a summary, use the syntax `/summary <summary text>`");
+                }
             } else {
-                reply.println("To set a summary, use the syntax `/summary <summary text>`");
+                // A multi-line summary
+                var summary = String.join("\n", lines.subList(1, lines.size()));
+                var action = currentSummary.isPresent() ? "Updating existing" : "Setting";
+                reply.println(action + " summary to:\n" +
+                              "\n" +
+                              "```\n" +
+                              summary +
+                              "\n```");
+                reply.println(Summary.setSummaryMarker(summary));
             }
         } else {
-            if (currentSummary.isPresent()) {
-                reply.println("Updating existing summary to `" + args.strip() + "`");
-            } else {
-                reply.println("Setting summary to `" + args.strip() + "`");
-            }
-            reply.println(Summary.setSummaryMarker(args.strip()));
+            // A single-line summary
+            var summary = args.strip();
+            var action = currentSummary.isPresent() ? "Updating existing" : "Setting";
+            reply.println(action + " summary to `" + summary + "`");
+            reply.println(Summary.setSummaryMarker(summary));
         }
     }
 
     @Override
     public String description() {
