diff a/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java b/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.cli;
 
 import org.openjdk.skara.args.Main;
 import org.openjdk.skara.vcs.Repository;
+import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;
 import org.openjdk.skara.version.Version;
 
 import java.io.IOException;
 import java.nio.file.Path;
 import java.nio.file.Files;
@@ -132,19 +133,24 @@
             System.err.println("error: could not find skara repository");
             System.exit(1);
         }
 
         var head = repo.get().head();
-        System.out.print("Checking for updates ...");
+        System.out.println("Checking for updates ...");
         repo.get().pull();
         for (var s : repo.get().submodules()) {
             repo.get().updateSubmodule(s);
         }
         var newHead = repo.get().head();
 
         if (!head.equals(newHead)) {
-            System.out.println("updates downloaded");
+            System.out.println("Found the following updates:");
+            var commits = repo.get().commitMetadata(head, newHead);
+            for (var commit : commits) {
+                var message = CommitMessageParsers.v1.parse(commit);
+                System.out.println("- " + message.title());
+            }
             System.out.println("Rebuilding ...");
             var cmd = new ArrayList<String>();
             if (System.getProperty("os.name").toLowerCase().startsWith("win")) {
                 cmd.add("gradlew.bat");
             } else {
@@ -159,11 +165,11 @@
             if (res != 0) {
                 System.err.println("error: could not build Skara tooling");
                 System.exit(1);
             }
         } else {
-            System.out.println("no updates found");
+            System.out.println("No updates found");
         }
     }
 
     public static void main(String[] args) throws Exception {
         commands.put("jcheck", GitJCheck::main);
