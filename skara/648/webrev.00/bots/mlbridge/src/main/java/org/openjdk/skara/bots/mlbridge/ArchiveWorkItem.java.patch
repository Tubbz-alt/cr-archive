diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -230,11 +230,11 @@
         }
         return ret.toString();
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         var path = scratchPath.resolve("mlbridge");
         var archiveRepo = materializeArchive(path);
         var mboxBasePath = path.resolve(bot.codeRepo().name());
         var mbox = MailingListServerFactory.createMboxFileServer(mboxBasePath);
         var reviewArchiveList = mbox.getList(pr.id());
@@ -246,17 +246,17 @@
 
             if (pr.state() == Issue.State.OPEN) {
                 for (var readyLabel : bot.readyLabels()) {
                     if (!labels.contains(readyLabel)) {
                         log.fine("PR is not yet ready - missing label '" + readyLabel + "'");
-                        return;
+                        return List.of();
                     }
                 }
             } else {
                 if (!labels.contains("integrated")) {
                     log.fine("Closed PR was not integrated - will not initiate an RFR thread");
-                    return;
+                    return List.of();
                 }
             }
         }
 
         // Also inspect comments before making the first post
@@ -274,11 +274,11 @@
                     }
                 }
                 if (!commentFound) {
                     log.fine("PR is not yet ready - missing ready comment from '" + readyComment.getKey() +
                                      "containing '" + readyComment.getValue().pattern() + "'");
-                    return;
+                    return List.of();
                 }
             }
         }
 
         var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve("census"), pr);
@@ -336,11 +336,11 @@
                                                       user -> getAuthorRole(census, user),
                                                       subjectPrefix(),
                                                       retryConsumer
                                                       );
             if (newMails.isEmpty()) {
-                return;
+                return List.of();
             }
 
             // Push all new mails to the archive repository
             newMails.forEach(reviewArchiveList::post);
             pushMbox(archiveRepo, "Adding comments for PR " + bot.codeRepo().name() + "/" + pr.id());
@@ -358,10 +358,11 @@
                 list.post(filteredEmail);
             }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
+        return List.of();
     }
 
     @Override
     public void handleRuntimeException(RuntimeException e) {
         exceptionConsumer.accept(e);
