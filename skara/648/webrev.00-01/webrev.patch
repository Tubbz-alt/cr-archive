diff a/bot/src/main/java/org/openjdk/skara/bot/WorkItem.java b/bot/src/main/java/org/openjdk/skara/bot/WorkItem.java
--- a/bot/src/main/java/org/openjdk/skara/bot/WorkItem.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/WorkItem.java
@@ -32,12 +32,14 @@
      * @return
      */
     boolean concurrentWith(WorkItem other);
 
     /**
-     * Execute the appropriate tasks with the provided scratch folder.
+     * Execute the appropriate tasks with the provided scratch folder. Optionally return follow-up work items
+     * that will be scheduled for execution.
      * @param scratchPath
+     * @return A collection of follow-up work items, allowed to be empty (or null) if none are needed.
      */
     Collection<WorkItem> run(Path scratchPath);
 
     /**
      * The BotRunner will catch <code>RuntimeException</code>s, implementing this method allows a WorkItem to
diff a/test/src/main/java/org/openjdk/skara/test/TestBotRunner.java b/test/src/main/java/org/openjdk/skara/test/TestBotRunner.java
--- a/test/src/main/java/org/openjdk/skara/test/TestBotRunner.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestBotRunner.java
@@ -23,26 +23,32 @@
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.bot.*;
 
 import java.io.IOException;
+import java.util.*;
 import java.util.function.Predicate;
 
 public class TestBotRunner {
     public static void runPeriodicItems(Bot bot) throws IOException {
         runPeriodicItems(bot, wi -> false);
     }
 
     public static void runPeriodicItems(Bot bot, Predicate<WorkItem> ignored) throws IOException {
-        for (var item : bot.getPeriodicItems()) {
+        var items = new LinkedList<>(bot.getPeriodicItems());
+        for (var item = items.pollFirst(); item != null; item = items.pollFirst()) {
             if (!ignored.test(item)) {
+                Collection<WorkItem> followUpItems = null;
                 try (var scratchFolder = new TemporaryDirectory()) {
-                    item.run(scratchFolder.path());
+                    followUpItems = item.run(scratchFolder.path());
                 } catch (RuntimeException e) {
                     item.handleRuntimeException(e);
                     // Allow tests to assert on these as well
                     throw e;
                 }
+                if (followUpItems != null) {
+                    items.addAll(followUpItems);
+                }
             }
         }
     }
 }
