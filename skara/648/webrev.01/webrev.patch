diff a/bot/src/main/java/org/openjdk/skara/bot/BotRunner.java b/bot/src/main/java/org/openjdk/skara/bot/BotRunner.java
--- a/bot/src/main/java/org/openjdk/skara/bot/BotRunner.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/BotRunner.java
@@ -72,19 +72,23 @@
                 }
                 scratchPath = scratchPaths.removeFirst();
             }
 
             log.log(Level.FINE, "Executing item " + item + " on repository " + scratchPath, TaskPhases.BEGIN);
+            Collection<WorkItem> followUpItems = null;
             try {
-                item.run(scratchPath);
+                followUpItems = item.run(scratchPath);
             } catch (RuntimeException e) {
                 log.severe("Exception during item execution (" + item + "): " + e.getMessage());
                 item.handleRuntimeException(e);
                 log.throwing(item.toString(), "run", e);
             } finally {
                 log.log(Level.FINE, "Item " + item + " is now done", TaskPhases.END);
             }
+            if (followUpItems != null) {
+                followUpItems.forEach(BotRunner.this::submitOrSchedule);
+            }
 
             synchronized (executor) {
                 scratchPaths.addLast(scratchPath);
                 active.remove(item);
 
diff a/bot/src/main/java/org/openjdk/skara/bot/WorkItem.java b/bot/src/main/java/org/openjdk/skara/bot/WorkItem.java
--- a/bot/src/main/java/org/openjdk/skara/bot/WorkItem.java
+++ b/bot/src/main/java/org/openjdk/skara/bot/WorkItem.java
@@ -21,25 +21,27 @@
  * questions.
  */
 package org.openjdk.skara.bot;
 
 import java.nio.file.Path;
+import java.util.*;
 
 public interface WorkItem {
-
     /**
      * Return true if this item can run concurrently with <code>other</code>, otherwise false.
      * @param other
      * @return
      */
     boolean concurrentWith(WorkItem other);
 
     /**
-     * Execute the appropriate tasks with the provided scratch folder.
+     * Execute the appropriate tasks with the provided scratch folder. Optionally return follow-up work items
+     * that will be scheduled for execution.
      * @param scratchPath
+     * @return A collection of follow-up work items, allowed to be empty (or null) if none are needed.
      */
-    void run(Path scratchPath);
+    Collection<WorkItem> run(Path scratchPath);
 
     /**
      * The BotRunner will catch <code>RuntimeException</code>s, implementing this method allows a WorkItem to
      * perform additional cleanup if necessary (avoiding the need for catching and rethrowing the exception).
      * @param e
diff a/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java b/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java
--- a/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java
+++ b/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java
@@ -20,24 +20,21 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bot;
 
-import org.junit.jupiter.api.condition.DisabledOnOs;
-import org.junit.jupiter.api.condition.OS;
-import org.openjdk.skara.json.JSON;
-
 import org.junit.jupiter.api.*;
+import org.openjdk.skara.json.JSON;
 
 import java.nio.file.Path;
 import java.time.Duration;
 import java.util.*;
 import java.util.concurrent.*;
 import java.util.function.Supplier;
 import java.util.logging.*;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 class TestWorkItem implements WorkItem {
     private final ConcurrencyCheck concurrencyCheck;
     private final String description;
     boolean hasRun = false;
@@ -55,13 +52,14 @@
         this.concurrencyCheck = concurrencyCheck;
         this.description = description;
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         hasRun = true;
         System.out.println("Item " + this.toString() + " now running");
+        return List.of();
     }
 
     @Override
     public boolean concurrentWith(WorkItem other) {
         return concurrencyCheck.concurrentWith(other);
@@ -77,10 +75,27 @@
     TestWorkItemChild(ConcurrencyCheck concurrencyCheck, String description) {
         super(concurrencyCheck, description);
     }
 }
 
+class TestWorkItemWithFollowup extends TestWorkItem {
+    private List<WorkItem> followUpItems;
+
+    TestWorkItemWithFollowup(ConcurrencyCheck concurrencyCheck, String description, List<WorkItem> followUpItems) {
+        super(concurrencyCheck, description);
+
+        this.followUpItems = followUpItems;
+    }
+
+    @Override
+    public Collection<WorkItem> run(Path scratchPath) {
+        hasRun = true;
+        System.out.println("Item with followups " + this.toString() + " now running");
+        return followUpItems;
+    }
+}
+
 class TestBlockedWorkItem implements WorkItem {
     private final CountDownLatch countDownLatch;
 
     TestBlockedWorkItem(CountDownLatch countDownLatch) {
         this.countDownLatch = countDownLatch;
@@ -90,23 +105,23 @@
     public boolean concurrentWith(WorkItem other) {
         return false;
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         System.out.println("Starting to wait...");;
         try {
             countDownLatch.await();
         } catch (InterruptedException e) {
             throw new RuntimeException(e);
         }
         System.out.println("Done waiting");
+        return List.of();
     }
 }
 
 class TestBot implements Bot {
-
     private final List<WorkItem> items;
     private final Supplier<List<WorkItem>> itemSupplier;
 
     TestBot(WorkItem... items) {
         this.items = Arrays.asList(items);
@@ -127,11 +142,10 @@
         }
     }
 }
 
 class BotRunnerTests {
-
     @BeforeAll
     static void setUp() {
         Logger log = Logger.getGlobal();
         log.setLevel(Level.FINER);
         log = Logger.getLogger("org.openjdk.bots.cli");
@@ -304,6 +318,22 @@
         runner.run(Duration.ofMillis(100));
         assertTrue(errors.size() > 0);
         assertTrue(errors.size() <= 100);
         countdownLatch.countDown();
     }
+
+    @Test
+    void dependentItems() throws TimeoutException {
+        var item2 = new TestWorkItem(i -> true, "Item 2");
+        var item3 = new TestWorkItem(i -> true, "Item 3");
+
+        var item1 = new TestWorkItemWithFollowup(i -> true, "Item 1", List.of(item2, item3));
+        var bot = new TestBot(item1);
+        var runner = new BotRunner(config(), List.of(bot));
+
+        runner.runOnce(Duration.ofSeconds(10));
+
+        assertTrue(item1.hasRun);
+        assertTrue(item2.hasRun);
+        assertTrue(item3.hasRun);
+    }
 }
diff a/bots/bridgekeeper/src/main/java/org/openjdk/skara/bots/bridgekeeper/PullRequestCloserBot.java b/bots/bridgekeeper/src/main/java/org/openjdk/skara/bots/bridgekeeper/PullRequestCloserBot.java
--- a/bots/bridgekeeper/src/main/java/org/openjdk/skara/bots/bridgekeeper/PullRequestCloserBot.java
+++ b/bots/bridgekeeper/src/main/java/org/openjdk/skara/bots/bridgekeeper/PullRequestCloserBot.java
@@ -81,12 +81,13 @@
         }
         return false;
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         checkWelcomeMessage();
+        return List.of();
     }
 
     @Override
     public void handleRuntimeException(RuntimeException e) {
         errorHandler.accept(e);
diff a/bots/bridgekeeper/src/main/java/org/openjdk/skara/bots/bridgekeeper/PullRequestPrunerBot.java b/bots/bridgekeeper/src/main/java/org/openjdk/skara/bots/bridgekeeper/PullRequestPrunerBot.java
--- a/bots/bridgekeeper/src/main/java/org/openjdk/skara/bots/bridgekeeper/PullRequestPrunerBot.java
+++ b/bots/bridgekeeper/src/main/java/org/openjdk/skara/bots/bridgekeeper/PullRequestPrunerBot.java
@@ -74,32 +74,33 @@
     }
 
     private final String noticeMarker = "<!-- PullrequestCloserBot auto close notification -->";
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         var comments = pr.comments();
         if (comments.size() > 0) {
             var lastComment = comments.get(comments.size() - 1);
             if (lastComment.author().equals(pr.repository().forge().currentUser()) && lastComment.body().contains(noticeMarker)) {
                 var message = "@" + pr.author().userName() + " This pull request has been inactive for more than " +
                         formatDuration(maxAge.multipliedBy(2)) + " and will now be automatically closed. If you would " +
                         "like to continue working on this pull request in the future, feel free to reopen it!";
                 log.fine("Posting prune message");
                 pr.addComment(message);
                 pr.setState(PullRequest.State.CLOSED);
-                return;
+                return List.of();
             }
         }
 
         var message = "@" + pr.author().userName() + " This pull request has been inactive for more than " +
                 formatDuration(maxAge) + " and will be automatically closed if another " + formatDuration(maxAge) +
                 " passes without any activity. To avoid this, simply add a new comment to the pull request. Feel free " +
                 "to ask for assistance if you need help with progressing this pull request towards integration!";
 
         log.fine("Posting prune notification message");
         pr.addComment(noticeMarker + "\n\n" + message);
+        return List.of();
     }
 
     @Override
     public String toString() {
         return "PullRequestPrunerBotWorkItem@" + pr.repository().name() + "#" + pr.id();
diff a/bots/cli/src/test/java/org/openjdk/skara/bots/cli/LoggingBot.java b/bots/cli/src/test/java/org/openjdk/skara/bots/cli/LoggingBot.java
--- a/bots/cli/src/test/java/org/openjdk/skara/bots/cli/LoggingBot.java
+++ b/bots/cli/src/test/java/org/openjdk/skara/bots/cli/LoggingBot.java
@@ -25,11 +25,11 @@
 import org.openjdk.skara.bot.*;
 import org.openjdk.skara.json.JSON;
 
 import java.nio.file.Path;
 import java.time.Duration;
-import java.util.List;
+import java.util.*;
 import java.util.concurrent.TimeoutException;
 import java.util.function.Consumer;
 import java.util.logging.*;
 
 public class LoggingBot implements Bot, WorkItem {
@@ -74,9 +74,10 @@
     public boolean concurrentWith(WorkItem other) {
         return false;
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         runnable.accept(logger);
+        return List.of();
     }
 }
diff a/bots/csr/src/main/java/org/openjdk/skara/bots/csr/CSRBot.java b/bots/csr/src/main/java/org/openjdk/skara/bots/csr/CSRBot.java
--- a/bots/csr/src/main/java/org/openjdk/skara/bots/csr/CSRBot.java
+++ b/bots/csr/src/main/java/org/openjdk/skara/bots/csr/CSRBot.java
@@ -28,13 +28,11 @@
 import org.openjdk.skara.forge.PullRequestUpdateCache;
 import org.openjdk.skara.issuetracker.IssueProject;
 import org.openjdk.skara.issuetracker.Issue;
 
 import java.nio.file.Path;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
 import java.util.logging.Logger;
 
 class CSRBot implements Bot, WorkItem {
     private final static String CSR_LABEL = "csr";
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
@@ -61,11 +59,11 @@
     private String describe(PullRequest pr) {
         return repo.name() + "#" + pr.id();
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         var prs = repo.pullRequests();
         for (var pr : prs) {
             if (!cache.needsUpdate(pr)) {
                 continue;
             }
@@ -130,10 +128,11 @@
                     pr.removeLabel(CSR_LABEL);
                     hasCSRLabel.remove(pr.id());
                 }
             }
         }
+        return List.of();
     }
 
     @Override
     public String toString() {
         return "CSRBot@" + repo.name();
diff a/bots/forward/src/main/java/org/openjdk/skara/bots/forward/ForwardBot.java b/bots/forward/src/main/java/org/openjdk/skara/bots/forward/ForwardBot.java
--- a/bots/forward/src/main/java/org/openjdk/skara/bots/forward/ForwardBot.java
+++ b/bots/forward/src/main/java/org/openjdk/skara/bots/forward/ForwardBot.java
@@ -24,17 +24,15 @@
 
 import org.openjdk.skara.bot.*;
 import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.vcs.*;
 
-import java.io.IOException;
-import java.io.UncheckedIOException;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.Path;
-import java.nio.file.Files;
+import java.io.*;
 import java.net.URLEncoder;
-import java.util.List;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.*;
+import java.util.*;
 import java.util.logging.Logger;
 
 class ForwardBot implements Bot, WorkItem {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
 
@@ -63,11 +61,11 @@
         var otherBot = (ForwardBot) other;
         return !toHostedRepo.name().equals(otherBot.toHostedRepo.name());
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         try {
             var sanitizedUrl =
                 URLEncoder.encode(toHostedRepo.webUrl().toString(), StandardCharsets.UTF_8);
             var toDir = storage.resolve(sanitizedUrl);
             Repository toLocalRepo = null;
@@ -90,10 +88,11 @@
             log.info("Pushing " + toBranch.name() + " to " + toHostedRepo.name());
             toLocalRepo.push(fetchHead, toHostedRepo.url(), toBranch.name(), false);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
+        return List.of();
     }
 
     @Override
     public String toString() {
         return "FowardBot@(" + fromHostedRepo.name() + ":" + fromBranch.name() +
diff a/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/JBridgeBot.java b/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/JBridgeBot.java
--- a/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/JBridgeBot.java
+++ b/bots/hgbridge/src/main/java/org/openjdk/skara/bots/hgbridge/JBridgeBot.java
@@ -27,11 +27,11 @@
 
 import java.io.*;
 import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
-import java.util.List;
+import java.util.*;
 import java.util.logging.Logger;
 
 public class JBridgeBot implements Bot, WorkItem {
     private final ExporterConfig exporterConfig;
     private final Path storage;
@@ -90,11 +90,11 @@
         var hash = marksRepo.commit("Updated marks", exporterConfig.marksAuthorName(), exporterConfig.marksAuthorEmail());
         marksRepo.push(hash, exporterConfig.marksRepo().url(), exporterConfig.marksRef());
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         log.fine("Running export for " + exporterConfig.source().toString());
 
         try {
             var converter = exporterConfig.resolve(scratchPath.resolve("converter"));
             var marksFile = scratchPath.resolve("marks.txt");
@@ -140,7 +140,8 @@
                 throw new UncheckedIOException(lastException);
             }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
+        return List.of();
     }
 }
diff a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
--- a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
+++ b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
@@ -282,11 +282,11 @@
         var otherBot = (MergeBot) other;
         return !target.name().equals(otherBot.target.name());
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         try {
             var sanitizedUrl =
                 URLEncoder.encode(fork.webUrl().toString(), StandardCharsets.UTF_8);
             var dir = storage.resolve(sanitizedUrl);
 
@@ -628,10 +628,11 @@
                 }
             }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
+        return List.of();
     }
 
     @Override
     public String toString() {
         return "MergeBot@(" + target.name() + ")";
diff a/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java b/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
--- a/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
+++ b/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
@@ -24,19 +24,17 @@
 
 import org.openjdk.skara.bot.*;
 import org.openjdk.skara.forge.HostedRepository;
 import org.openjdk.skara.vcs.*;
 
-import java.io.IOException;
-import java.io.UncheckedIOException;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.Path;
-import java.nio.file.Files;
+import java.io.*;
 import java.net.URLEncoder;
-import java.util.List;
-import java.util.stream.Collectors;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.*;
+import java.util.*;
 import java.util.logging.Logger;
+import java.util.stream.Collectors;
 
 class MirrorBot implements Bot, WorkItem {
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
     private final Path storage;
     private final HostedRepository from;
@@ -64,11 +62,11 @@
         var otherBot = (MirrorBot) other;
         return !to.name().equals(otherBot.to.name());
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         try {
             var sanitizedUrl =
                 URLEncoder.encode(to.webUrl().toString(), StandardCharsets.UTF_8);
             var dir = storage.resolve(sanitizedUrl);
             Repository repo = null;
@@ -102,10 +100,11 @@
             }
 
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
+        return List.of();
     }
 
     @Override
     public String toString() {
         var name = "MirrorBot@" + from.name() + "->" + to.name();
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveReaderWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveReaderWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveReaderWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveReaderWorkItem.java
@@ -25,10 +25,11 @@
 import org.openjdk.skara.bot.WorkItem;
 import org.openjdk.skara.mailinglist.MailingList;
 
 import java.nio.file.Path;
 import java.time.Duration;
+import java.util.*;
 
 public class ArchiveReaderWorkItem implements WorkItem {
     private final MailingListArchiveReaderBot bot;
     private final MailingList list;
 
@@ -53,13 +54,14 @@
         }
         return false;
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         // Give the bot a chance to act on all found messages
         var conversations = list.conversations(Duration.ofDays(365));
         for (var conversation : conversations) {
             bot.inspect(conversation);
         }
+        return List.of();
     }
 }
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -230,11 +230,11 @@
         }
         return ret.toString();
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         var path = scratchPath.resolve("mlbridge");
         var archiveRepo = materializeArchive(path);
         var mboxBasePath = path.resolve(bot.codeRepo().name());
         var mbox = MailingListServerFactory.createMboxFileServer(mboxBasePath);
         var reviewArchiveList = mbox.getList(pr.id());
@@ -246,17 +246,17 @@
 
             if (pr.state() == Issue.State.OPEN) {
                 for (var readyLabel : bot.readyLabels()) {
                     if (!labels.contains(readyLabel)) {
                         log.fine("PR is not yet ready - missing label '" + readyLabel + "'");
-                        return;
+                        return List.of();
                     }
                 }
             } else {
                 if (!labels.contains("integrated")) {
                     log.fine("Closed PR was not integrated - will not initiate an RFR thread");
-                    return;
+                    return List.of();
                 }
             }
         }
 
         // Also inspect comments before making the first post
@@ -274,11 +274,11 @@
                     }
                 }
                 if (!commentFound) {
                     log.fine("PR is not yet ready - missing ready comment from '" + readyComment.getKey() +
                                      "containing '" + readyComment.getValue().pattern() + "'");
-                    return;
+                    return List.of();
                 }
             }
         }
 
         var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve("census"), pr);
@@ -336,11 +336,11 @@
                                                       user -> getAuthorRole(census, user),
                                                       subjectPrefix(),
                                                       retryConsumer
                                                       );
             if (newMails.isEmpty()) {
-                return;
+                return List.of();
             }
 
             // Push all new mails to the archive repository
             newMails.forEach(reviewArchiveList::post);
             pushMbox(archiveRepo, "Adding comments for PR " + bot.codeRepo().name() + "/" + pr.id());
@@ -358,10 +358,11 @@
                 list.post(filteredEmail);
             }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
+        return List.of();
     }
 
     @Override
     public void handleRuntimeException(RuntimeException e) {
         exceptionConsumer.accept(e);
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CommentPosterWorkItem.java
@@ -90,11 +90,11 @@
         }
         pr.addComment(body);
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         var comments = pr.comments();
 
         var alreadyBridged = new HashSet<EmailAddress>();
         for (var comment : comments) {
             if (!comment.author().equals(pr.repository().forge().currentUser())) {
@@ -115,10 +115,11 @@
             }
 
             log.info("Bridging new message from " + message.author() + " to " + pr);
             postNewMessage(message);
         }
+        return List.of();
     }
 
     @Override
     public void handleRuntimeException(RuntimeException e) {
         errorHandler.accept(e);
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
@@ -22,19 +22,18 @@
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.bot.WorkItem;
 import org.openjdk.skara.forge.PullRequest;
-import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.json.*;
 import org.openjdk.skara.storage.StorageBuilder;
 import org.openjdk.skara.vcs.Hash;
 import org.openjdk.skara.vcs.openjdk.Issue;
 
 import java.nio.file.Path;
 import java.util.*;
-import java.util.function.*;
+import java.util.function.Consumer;
 import java.util.regex.Pattern;
 import java.util.stream.*;
 
 public class PullRequestWorkItem implements WorkItem {
     private final PullRequest pr;
@@ -172,11 +171,11 @@
     private void notifyIntegratedPr(PullRequest pr, Hash hash) {
         pullRequestUpdateConsumers.forEach(c -> c.handleIntegratedPullRequest(pr, hash));
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         var historyPath = scratchPath.resolve("notify").resolve("history");
         var storage = prStateStorageBuilder
                 .serializer(this::serializePrState)
                 .deserializer(this::deserializePrState)
                 .materialize(historyPath);
@@ -185,11 +184,11 @@
         var commit = resultingCommitHashFor(pr);
         var state = new PullRequestState(pr, issues, commit);
         var stored = storage.current();
         if (stored.contains(state)) {
             // Already up to date
-            return;
+            return List.of();
         }
 
         // Search for an existing
         var storedState = stored.stream()
                 .filter(ss -> ss.prId().equals(state.prId()))
@@ -214,10 +213,11 @@
                 notifyIntegratedPr(pr, state.commitId().get());
             }
         }
 
         storage.put(state);
+        return List.of();
     }
 
     @Override
     public String toString() {
         return "Notify.PR@" + pr.repository().name() + "#" + pr.id();
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
@@ -253,11 +253,11 @@
         }
         return false;
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         var historyPath = scratchPath.resolve("notify").resolve("history");
         var repositoryPool = new HostedRepositoryPool(storagePath.resolve("seeds"));
 
         try {
             var localRepo = repositoryPool.materialize(repository, scratchPath.resolve("notify").resolve("repowi").resolve(repository.name()));
@@ -291,10 +291,11 @@
                 throw new RuntimeException("Errors detected when processing repository notifications", errors.get(0));
             }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
+        return List.of();
     }
 
     @Override
     public String toString() {
         return "RepositoryWorkItem@" + repository.name();
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckWorkItem.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
+import org.openjdk.skara.bot.WorkItem;
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.host.*;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.vcs.Hash;
 
@@ -130,11 +131,11 @@
     public String toString() {
         return "CheckWorkItem@" + pr.repository().name() + "#" + pr.id();
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         // First determine if the current state of the PR has already been checked
         var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve("census"), pr);
         var comments = pr.comments();
         var allReviews = pr.reviews();
         var labels = new HashSet<>(pr.labels());
@@ -142,11 +143,11 @@
         // Filter out the active reviews
         var activeReviews = CheckablePullRequest.filterActiveReviews(allReviews);
         if (!currentCheckValid(census, comments, activeReviews, labels)) {
             if (labels.contains("integrated")) {
                 log.info("Skipping check of integrated PR");
-                return;
+                return List.of();
             }
 
             try {
                 var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
                 var hostedRepositoryPool = new HostedRepositoryPool(seedPath);
@@ -156,7 +157,8 @@
                 CheckRun.execute(this, pr, localRepo, comments, allReviews, activeReviews, labels, census, bot.ignoreStaleReviews());
             } catch (IOException e) {
                 throw new UncheckedIOException(e);
             }
         }
+        return List.of();
     }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
@@ -20,11 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.forge.*;
+import org.openjdk.skara.bot.WorkItem;
+import org.openjdk.skara.forge.PullRequest;
 import org.openjdk.skara.issuetracker.Comment;
 
 import java.io.*;
 import java.nio.file.Path;
 import java.util.*;
@@ -128,33 +129,36 @@
 
         pr.addComment(writer.toString());
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         log.info("Looking for merge commands");
 
         if (pr.labels().contains("integrated")) {
             log.info("Skip checking for commands in integrated PR");
-            return;
+            return List.of();
         }
 
         var comments = pr.comments();
         var unprocessedCommands = findCommandComments(comments);
         if (unprocessedCommands.isEmpty()) {
             log.fine("No new merge commands found, stopping further processing");
-            return;
+            return List.of();
         }
 
         if (HelpCommand.external == null) {
             HelpCommand.external = bot.externalCommands();
         }
 
         var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve("census"), pr);
         for (var entry : unprocessedCommands) {
             processCommand(pr, census, scratchPath.resolve("pr").resolve("command"), entry.getKey(), entry.getValue(), comments);
         }
+
+        // Run another check to reflect potential changes from commands
+        return List.of(new CheckWorkItem(bot, pr, errorHandler));
     }
 
     @Override
     public String toString() {
         return "CommandWorkItem@" + pr.repository().name() + "#" + pr.id();
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
@@ -20,10 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
+import org.openjdk.skara.bot.WorkItem;
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.vcs.Repository;
 
 import java.io.*;
 import java.nio.file.Path;
@@ -45,13 +46,13 @@
         var files = PullRequestUtils.changedFiles(pr, localRepo);
         return bot.labelConfiguration().fromChanges(files);
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         if (bot.currentLabels().containsKey(pr.headHash())) {
-            return;
+            return List.of();
         }
         try {
             var path = scratchPath.resolve("pr").resolve("labeler").resolve(pr.repository().name());
             var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
             var hostedRepositoryPool = new HostedRepositoryPool(seedPath);
@@ -73,7 +74,8 @@
 
             bot.currentLabels().put(pr.headHash(), Boolean.TRUE);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
+        return List.of();
     }
 }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestBot.java
@@ -116,11 +116,10 @@
                     continue;
                 }
 
                 ret.add(new CheckWorkItem(this, pr, e -> updateCache.invalidate(pr)));
                 ret.add(new CommandWorkItem(this, pr, e -> updateCache.invalidate(pr)));
-                ret.add(new CheckWorkItem(this, pr, e -> updateCache.invalidate(pr)));
                 ret.add(new LabelerWorkItem(this, pr, e -> updateCache.invalidate(pr)));
             }
         }
 
         return ret;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestWorkItem.java
@@ -26,11 +26,11 @@
 import org.openjdk.skara.forge.PullRequest;
 
 import java.util.function.Consumer;
 
 abstract class PullRequestWorkItem implements WorkItem {
-    private final Consumer<RuntimeException> errorHandler;
+    final Consumer<RuntimeException> errorHandler;
     final PullRequestBot bot;
     final PullRequest pr;
 
     PullRequestWorkItem(PullRequestBot bot, PullRequest pr, Consumer<RuntimeException> errorHandler) {
         this.bot = bot;
diff a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java
--- a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java
+++ b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java
@@ -26,11 +26,12 @@
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.vcs.Repository;
 
 import java.io.*;
 import java.nio.file.Path;
-import java.time.*;
+import java.time.ZonedDateTime;
+import java.util.*;
 import java.util.logging.Logger;
 
 public class SubmitBotWorkItem implements WorkItem {
     private final SubmitBot bot;
     private final SubmitExecutor executor;
@@ -65,20 +66,20 @@
         }
         return false;
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         // Is the check already up to date?
         var checks = pr.checks(pr.headHash());
         if (checks.containsKey(executor.checkName())) {
             var check = checks.get(executor.checkName());
             if (check.startedAt().isBefore(ZonedDateTime.now().minus(executor.timeout())) && check.status() == CheckStatus.IN_PROGRESS) {
                 log.info("Check for hash " + pr.headHash() + " is too old - running again");
             } else {
                 log.fine("Hash " + pr.headHash() + " already has a check - skipping");
-                return;
+                return List.of();
             }
         }
 
         var prFolder = scratchPath.resolve("submit").resolve(pr.repository().name());
 
@@ -95,7 +96,9 @@
             executor.run(prFolder, checkBuilder, checkUpdater);
             pr.updateCheck(checkBuilder.build());
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
+
+        return List.of();
     }
 }
diff a/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestWorkItem.java b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestWorkItem.java
--- a/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestWorkItem.java
+++ b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestWorkItem.java
@@ -20,20 +20,19 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.tester;
 
-import org.openjdk.skara.bot.*;
+import org.openjdk.skara.bot.WorkItem;
 import org.openjdk.skara.ci.*;
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.net.*;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.*;
-import java.time.ZonedDateTime;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.stream.*;
 
 public class TestWorkItem implements WorkItem {
@@ -246,16 +245,16 @@
         }
         return sb.toString();
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         var state = State.from(pr, approversGroupId);
         var stage = state.stage();
         if (stage == Stage.NA || stage == Stage.ERROR || stage == Stage.PENDING || stage == Stage.FINISHED) {
             // nothing to do
-            return;
+            return List.of();
         }
 
         if (stage == Stage.STARTED) {
             if (state.started() != null) {
                 var lines = state.started().body().split("\n");
@@ -372,11 +371,11 @@
                     var lines = List.of(
                        "<!-- TEST ERROR -->",
                        "@" + state.requested().author().userName() + " the test " + wording + String.join(",", nonExistingJobs) + " does not exist"
                     );
                     pr.addComment(String.join("\n", lines));
-                    return;
+                    return List.of();
                 }
 
                 jobs = trimmedJobs;
             }
             var jobId = jobId(state);
@@ -432,10 +431,11 @@
             );
             pr.addComment(String.join("\n", lines));
         } else {
             throw new RuntimeException("Unexpected state " + state);
         }
+        return List.of();
     }
 
     @Override
     public String toString() {
         return "TestWorkItem@" + pr.repository().name() + "#" + pr.id();
diff a/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
--- a/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
+++ b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
@@ -30,12 +30,11 @@
 import java.io.UncheckedIOException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.nio.file.Files;
 import java.net.URLEncoder;
-import java.util.ArrayList;
-import java.util.List;
+import java.util.*;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 /**
@@ -63,11 +62,11 @@
         var otherBot = (TopologicalBot) other;
         return !hostedRepo.name().equals(otherBot.hostedRepo.name());
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         log.info("Starting topobot run");
         try {
             var sanitizedUrl = URLEncoder.encode(hostedRepo.webUrl().toString(), StandardCharsets.UTF_8);
             var dir = storage.resolve(sanitizedUrl);
             Repository repo;
@@ -119,10 +118,11 @@
             }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
         log.info("Ending topobot run");
+        return List.of();
     }
 
     private static Stream<Branch> dependencies(Repository repo, Hash hash, Path depsFile) throws IOException {
         return repo.lines(depsFile, hash).map(l -> {
             var lines = l.stream().filter(s -> !s.isEmpty()).collect(Collectors.toList());
diff a/test/src/main/java/org/openjdk/skara/test/TestBotRunner.java b/test/src/main/java/org/openjdk/skara/test/TestBotRunner.java
--- a/test/src/main/java/org/openjdk/skara/test/TestBotRunner.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestBotRunner.java
@@ -23,26 +23,32 @@
 package org.openjdk.skara.test;
 
 import org.openjdk.skara.bot.*;
 
 import java.io.IOException;
+import java.util.*;
 import java.util.function.Predicate;
 
 public class TestBotRunner {
     public static void runPeriodicItems(Bot bot) throws IOException {
         runPeriodicItems(bot, wi -> false);
     }
 
     public static void runPeriodicItems(Bot bot, Predicate<WorkItem> ignored) throws IOException {
-        for (var item : bot.getPeriodicItems()) {
+        var items = new LinkedList<>(bot.getPeriodicItems());
+        for (var item = items.pollFirst(); item != null; item = items.pollFirst()) {
             if (!ignored.test(item)) {
+                Collection<WorkItem> followUpItems = null;
                 try (var scratchFolder = new TemporaryDirectory()) {
-                    item.run(scratchFolder.path());
+                    followUpItems = item.run(scratchFolder.path());
                 } catch (RuntimeException e) {
                     item.handleRuntimeException(e);
                     // Allow tests to assert on these as well
                     throw e;
                 }
+                if (followUpItems != null) {
+                    items.addAll(followUpItems);
+                }
             }
         }
     }
 }
