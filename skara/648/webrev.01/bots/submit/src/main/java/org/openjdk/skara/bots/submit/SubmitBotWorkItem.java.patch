diff a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java
--- a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java
+++ b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java
@@ -26,11 +26,12 @@
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.vcs.Repository;
 
 import java.io.*;
 import java.nio.file.Path;
-import java.time.*;
+import java.time.ZonedDateTime;
+import java.util.*;
 import java.util.logging.Logger;
 
 public class SubmitBotWorkItem implements WorkItem {
     private final SubmitBot bot;
     private final SubmitExecutor executor;
@@ -65,20 +66,20 @@
         }
         return false;
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         // Is the check already up to date?
         var checks = pr.checks(pr.headHash());
         if (checks.containsKey(executor.checkName())) {
             var check = checks.get(executor.checkName());
             if (check.startedAt().isBefore(ZonedDateTime.now().minus(executor.timeout())) && check.status() == CheckStatus.IN_PROGRESS) {
                 log.info("Check for hash " + pr.headHash() + " is too old - running again");
             } else {
                 log.fine("Hash " + pr.headHash() + " already has a check - skipping");
-                return;
+                return List.of();
             }
         }
 
         var prFolder = scratchPath.resolve("submit").resolve(pr.repository().name());
 
@@ -95,7 +96,9 @@
             executor.run(prFolder, checkBuilder, checkUpdater);
             pr.updateCheck(checkBuilder.build());
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
+
+        return List.of();
     }
 }
