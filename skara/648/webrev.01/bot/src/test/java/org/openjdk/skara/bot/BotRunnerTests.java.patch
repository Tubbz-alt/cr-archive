diff a/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java b/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java
--- a/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java
+++ b/bot/src/test/java/org/openjdk/skara/bot/BotRunnerTests.java
@@ -20,24 +20,21 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bot;
 
-import org.junit.jupiter.api.condition.DisabledOnOs;
-import org.junit.jupiter.api.condition.OS;
-import org.openjdk.skara.json.JSON;
-
 import org.junit.jupiter.api.*;
+import org.openjdk.skara.json.JSON;
 
 import java.nio.file.Path;
 import java.time.Duration;
 import java.util.*;
 import java.util.concurrent.*;
 import java.util.function.Supplier;
 import java.util.logging.*;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 class TestWorkItem implements WorkItem {
     private final ConcurrencyCheck concurrencyCheck;
     private final String description;
     boolean hasRun = false;
@@ -55,13 +52,14 @@
         this.concurrencyCheck = concurrencyCheck;
         this.description = description;
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         hasRun = true;
         System.out.println("Item " + this.toString() + " now running");
+        return List.of();
     }
 
     @Override
     public boolean concurrentWith(WorkItem other) {
         return concurrencyCheck.concurrentWith(other);
@@ -77,10 +75,27 @@
     TestWorkItemChild(ConcurrencyCheck concurrencyCheck, String description) {
         super(concurrencyCheck, description);
     }
 }
 
+class TestWorkItemWithFollowup extends TestWorkItem {
+    private List<WorkItem> followUpItems;
+
+    TestWorkItemWithFollowup(ConcurrencyCheck concurrencyCheck, String description, List<WorkItem> followUpItems) {
+        super(concurrencyCheck, description);
+
+        this.followUpItems = followUpItems;
+    }
+
+    @Override
+    public Collection<WorkItem> run(Path scratchPath) {
+        hasRun = true;
+        System.out.println("Item with followups " + this.toString() + " now running");
+        return followUpItems;
+    }
+}
+
 class TestBlockedWorkItem implements WorkItem {
     private final CountDownLatch countDownLatch;
 
     TestBlockedWorkItem(CountDownLatch countDownLatch) {
         this.countDownLatch = countDownLatch;
@@ -90,23 +105,23 @@
     public boolean concurrentWith(WorkItem other) {
         return false;
     }
 
     @Override
-    public void run(Path scratchPath) {
+    public Collection<WorkItem> run(Path scratchPath) {
         System.out.println("Starting to wait...");;
         try {
             countDownLatch.await();
         } catch (InterruptedException e) {
             throw new RuntimeException(e);
         }
         System.out.println("Done waiting");
+        return List.of();
     }
 }
 
 class TestBot implements Bot {
-
     private final List<WorkItem> items;
     private final Supplier<List<WorkItem>> itemSupplier;
 
     TestBot(WorkItem... items) {
         this.items = Arrays.asList(items);
@@ -127,11 +142,10 @@
         }
     }
 }
 
 class BotRunnerTests {
-
     @BeforeAll
     static void setUp() {
         Logger log = Logger.getGlobal();
         log.setLevel(Level.FINER);
         log = Logger.getLogger("org.openjdk.bots.cli");
@@ -304,6 +318,22 @@
         runner.run(Duration.ofMillis(100));
         assertTrue(errors.size() > 0);
         assertTrue(errors.size() <= 100);
         countdownLatch.countDown();
     }
+
+    @Test
+    void dependentItems() throws TimeoutException {
+        var item2 = new TestWorkItem(i -> true, "Item 2");
+        var item3 = new TestWorkItem(i -> true, "Item 3");
+
+        var item1 = new TestWorkItemWithFollowup(i -> true, "Item 1", List.of(item2, item3));
+        var bot = new TestBot(item1);
+        var runner = new BotRunner(config(), List.of(bot));
+
+        runner.runOnce(Duration.ofSeconds(10));
+
+        assertTrue(item1.hasRun);
+        assertTrue(item2.hasRun);
+        assertTrue(item3.hasRun);
+    }
 }
