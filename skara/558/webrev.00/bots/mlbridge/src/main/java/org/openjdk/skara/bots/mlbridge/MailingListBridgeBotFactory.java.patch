diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
@@ -64,11 +64,11 @@
 
         var archiveRepo = configuration.repository(specific.get("archive").asString());
         var archiveRef = configuration.repositoryRef(specific.get("archive").asString());
         var issueTracker = URIBuilder.base(specific.get("issues").asString()).build();
 
-        var allListNames = new HashSet<EmailAddress>();
+        var listNamesForReading = new HashSet<EmailAddress>();
         var allRepositories = new HashSet<HostedRepository>();
 
         var readyLabels = specific.get("ready").get("labels").stream()
                 .map(JSONValue::asString)
                 .collect(Collectors.toSet());
@@ -119,20 +119,22 @@
             if (repoConfig.contains("branchname")) {
                 botBuilder.branchInSubject(Pattern.compile(repoConfig.get("branchname").asString()));
             }
             ret.add(botBuilder.build());
 
-            allListNames.add(list);
+            if (!repoConfig.contains("bidirectional") || !repoConfig.get("bidirectional").asBoolean()) {
+                listNamesForReading.add(list);
+            }
             allRepositories.add(configuration.repository(repo));
         }
 
         var mailmanServer = MailingListServerFactory.createMailmanServer(listArchive, listSmtp, Duration.ZERO);
-        var allLists = allListNames.stream()
+        var listsForReading = listNamesForReading.stream()
                                    .map(name -> mailmanServer.getList(name.toString()))
                                    .collect(Collectors.toSet());
 
-        var bot = new MailingListArchiveReaderBot(from, allLists, allRepositories);
+        var bot = new MailingListArchiveReaderBot(from, listsForReading, allRepositories);
         ret.add(bot);
 
         return ret;
     }
 }
