diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBot.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBot.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBot.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBot.java
@@ -35,11 +35,12 @@
 
 public class MailingListArchiveReaderBot implements Bot {
     private final EmailAddress archivePoster;
     private final Set<MailingList> lists;
     private final Set<HostedRepository> repositories;
-    private final Map<EmailAddress, PullRequest> parsedConversations = new HashMap<>();
+    private final Map<EmailAddress, String> parsedConversations = new HashMap<>();
+    private final Map<EmailAddress, PullRequest> resolvedPullRequests = new HashMap<>();
     private final Set<EmailAddress> parsedEmailIds = new HashSet<>();
     private final Queue<CommentPosterWorkItem> commentQueue = new ConcurrentLinkedQueue<>();
     private final Pattern pullRequestLinkPattern = Pattern.compile("^(?:PR: |Pull request:\\R)(.*?)$", Pattern.MULTILINE);
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.mlbridge");
 
@@ -53,44 +54,33 @@
         messages.forEach(m -> parsedEmailIds.remove(m.id()));
     }
 
     synchronized void inspect(Conversation conversation) {
         // Is this a new conversation?
-        if (!parsedConversations.containsKey(conversation.first().id())) {
-            var first = conversation.first();
-
+        var first = conversation.first();
+        if (!parsedConversations.containsKey(first.id())) {
             // This conversation has already been parsed without finding any matching PR
             if (parsedEmailIds.contains(first.id())) {
                 return;
             }
 
             parsedEmailIds.add(first.id());
 
             // Not an RFR - cannot match a PR
-            if (!conversation.first().subject().contains("RFR: ")) {
+            if (!first.subject().contains("RFR: ")) {
                 return;
             }
 
             // Look for a pull request link
             var matcher = pullRequestLinkPattern.matcher(first.body());
             if (!matcher.find()) {
                 log.fine("RFR email without valid pull request link: " + first.date() + " - " + first.subject());
                 return;
             }
 
-            var pr = repositories.stream()
-                    .map(repository -> repository.parsePullRequestUrl(matcher.group(1)))
-                    .filter(Optional::isPresent)
-                    .map(Optional::get)
-                    .findAny();
-            if (pr.isEmpty()) {
-                log.info("PR link that can't be matched to an actual PR: " + matcher.group(1));
-                return;
-            }
-
-            // Matching pull request found!
-            parsedConversations.put(conversation.first().id(), pr.get());
+            // Valid looking pull request link found!
+            parsedConversations.put(first.id(), matcher.group(1));
             parsedEmailIds.remove(first.id());
         }
 
         // Are there any new messages?
         var newMessages = conversation.allMessages().stream()
@@ -102,17 +92,34 @@
 
         for (var newMessage : newMessages) {
             parsedEmailIds.add(newMessage.id());
         }
 
-        var pr = parsedConversations.get(conversation.first().id());
+        var pr = resolvedPullRequests.get(first.id());
+        if (pr == null) {
+            var prLink = parsedConversations.get(first.id());
+            if (prLink.equals("invalid")) {
+                return;
+            }
+            var foundPr = repositories.stream()
+                                      .map(repository -> repository.parsePullRequestUrl(prLink))
+                                      .filter(Optional::isPresent)
+                                      .map(Optional::get).findAny();
+            if (foundPr.isEmpty()) {
+                log.info("PR link that can't be matched to an actual PR: " + prLink);
+                parsedConversations.put(first.id(), "invalid");
+                return;
+            }
+            pr = foundPr.get();
+            resolvedPullRequests.put(first.id(), pr);
+        }
         var bridgeIdPattern = Pattern.compile("^[^.]+\\.[^.]+@" + pr.repository().url().getHost() + "$");
 
         // Filter out already bridged comments
         var bridgeCandidates = newMessages.stream()
-                .filter(email -> !bridgeIdPattern.matcher(email.id().address()).matches())
-                .collect(Collectors.toList());
+                                          .filter(email -> !bridgeIdPattern.matcher(email.id().address()).matches())
+                                          .collect(Collectors.toList());
         if (bridgeCandidates.isEmpty()) {
             return;
         }
 
         var workItem = new CommentPosterWorkItem(pr, bridgeCandidates, e -> invalidate(bridgeCandidates));
