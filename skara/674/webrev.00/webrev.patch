diff a/webrev/src/main/java/module-info.java b/webrev/src/main/java/module-info.java
--- a/webrev/src/main/java/module-info.java
+++ b/webrev/src/main/java/module-info.java
@@ -21,8 +21,9 @@
  * questions.
  */
 module org.openjdk.skara.webrev {
     requires org.openjdk.skara.vcs;
     requires java.net.http;
+    requires java.logging;
 
     exports org.openjdk.skara.webrev;
 }
diff a/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java b/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
@@ -48,24 +48,29 @@
         this.navigation = navigation;
         this.commits = commits;
         this.formatter = formatter;
         if (patch.isTextual()) {
             binaryContent = null;
-            oldContent = repo.lines(patch.source().path().get(), base).orElseThrow(() -> {
-                throw new IllegalArgumentException("Could not get content for file " +
-                                                   patch.source().path().get() +
-                                                   " at revision " + base);
-            });
+            var sourcePath = patch.source().path().orElseThrow(() ->
+                new IllegalArgumentException("Could not get source path for file with hash " +
+                                                   patch.source().hash() + " with target path" +
+                                                   patch.target().path().get())
+            );
+
+            oldContent = repo.lines(sourcePath, base).orElseThrow(() ->
+                new IllegalArgumentException("Could not get content for file " +
+                                                   sourcePath + " at revision " + base)
+            );
             if (head == null) {
                 var path = repo.root().resolve(patch.target().path().get());
                 if (patch.target().type().get().isVCSLink()) {
                     var tip = repo.head();
-                    var content = repo.lines(patch.target().path().get(), tip).orElseThrow(() -> {
-                        throw new IllegalArgumentException("Could not get content for file " +
+                    var content = repo.lines(patch.target().path().get(), tip).orElseThrow(() ->
+                        new IllegalArgumentException("Could not get content for file " +
                                                            patch.target().path().get() +
-                                                           " at revision " + tip);
-                    });
+                                                           " at revision " + tip)
+                    );
                     newContent = List.of(content.get(0) + "-dirty");
                 } else {
                     List<String> lines = null;
                     for (var charset : List.of(StandardCharsets.UTF_8, StandardCharsets.ISO_8859_1)) {
                         try {
@@ -79,28 +84,28 @@
                         throw new IllegalStateException("Could not read " + path + " as UTF-8 nor as ISO-8859-1");
                     }
                     newContent = lines;
                 }
             } else {
-                newContent = repo.lines(patch.target().path().get(), head).orElseThrow(() -> {
-                    throw new IllegalArgumentException("Could not get content for file " +
+                newContent = repo.lines(patch.target().path().get(), head).orElseThrow(() ->
+                    new IllegalArgumentException("Could not get content for file " +
                                                        patch.target().path().get() +
-                                                       " at revision " + head);
-                });
+                                                       " at revision " + head)
+                );
             }
             stats = new WebrevStats(patch.asTextualPatch().stats(), newContent.size());
         } else {
             oldContent = null;
             newContent = null;
             if (head == null) {
                 binaryContent = Files.readAllBytes(repo.root().resolve(patch.target().path().get()));
             } else {
-                binaryContent = repo.show(patch.target().path().get(), head).orElseThrow(() -> {
-                    throw new IllegalArgumentException("Could not get content for file " +
+                binaryContent = repo.show(patch.target().path().get(), head).orElseThrow(() ->
+                    new IllegalArgumentException("Could not get content for file " +
                                                        patch.target().path().get() +
-                                                       " at revision " + head);
-                });
+                                                       " at revision " + head)
+                );
             }
             stats = WebrevStats.empty();
         }
     }
 
diff a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
@@ -27,10 +27,12 @@
 import java.io.*;
 import java.net.URISyntaxException;
 import java.nio.channels.FileChannel;
 import java.nio.file.*;
 import java.util.*;
+import java.util.logging.Logger;
+import java.util.stream.Collectors;
 import java.util.function.Function;
 
 import static java.nio.file.StandardOpenOption.*;
 
 public class Webrev {
@@ -40,10 +42,12 @@
     private static final String ICON = "nanoduke.ico";
     private static final String CSS = "style.css";
 
     private static final String INDEX = "index.html";
 
+    private static final Logger log = Logger.getLogger("org.openjdk.skara.webrev");
+
     public static final Set<String> STATIC_FILES =
         Set.of(ANCNAV_HTML, ANCNAV_JS, ICON, CSS, INDEX);
 
     public static class RequiredBuilder {
         private final ReadOnlyRepository repository;
@@ -196,10 +200,15 @@
                 }
                 navigations.addLast(new Navigation(prev, next));
             }
 
             var headHash = head == null ? repository.head() : head;
+            var filesDesc = files.isEmpty() ? "" :
+                            " for files " +
+                            String.join(", ", files.stream().map(Path::toString).collect(Collectors.toList()));
+            log.fine("Generating webrev from " + tailEnd + " to " + headHash + filesDesc);
+
             var fileViews = new ArrayList<FileView>();
             var formatter = new MetadataFormatter(issueLinker);
             for (var patch : patches) {
                 var status = patch.status();
                 var path = status.isDeleted() ?
