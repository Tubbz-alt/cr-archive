diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -70,11 +70,11 @@
                               .findAny();
     }
 
     private boolean hasLegacyIntegrationNotice(Repository localRepo, Commit commit) {
         // Commits before this date are assumed to have been serviced by the old PR notifier
-        return commit.date().isBefore(ZonedDateTime.of(2020, 4, 28, 14, 0, 0, 0, ZoneId.of("UTC")));
+        return commit.authored().isBefore(ZonedDateTime.of(2020, 4, 28, 14, 0, 0, 0, ZoneId.of("UTC")));
     }
 
     private List<ArchiveItem> generateArchiveItems(List<Email> sentEmails, Repository localRepo, URI issueTracker, String issuePrefix, HostUserToEmailAuthor hostUserToEmailAuthor, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole, WebrevStorage.WebrevGenerator webrevGenerator, WebrevNotification webrevNotification, String subjectPrefix) throws IOException {
         var generated = new ArrayList<ArchiveItem>();
         Hash lastBase = null;
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/CommitFormatters.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/CommitFormatters.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/CommitFormatters.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/CommitFormatters.java
@@ -36,11 +36,11 @@
         printer.println("Changeset: " + commit.hash().abbreviate());
         printer.println("Author:    " + commit.author().name() + " <" + commit.author().email() + ">");
         if (!commit.author().equals(commit.committer())) {
             printer.println("Committer: " + commit.committer().name() + " <" + commit.committer().email() + ">");
         }
-        printer.println("Date:      " + commit.date().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss +0000")));
+        printer.println("Date:      " + commit.authored().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss +0000")));
         printer.println("URL:       " + repository.webUrl(commit.hash()));
 
         return writer.toString();
     }
 
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java
@@ -54,11 +54,11 @@
         for (var issue : parsedMessage.issues()) {
             issueIds.add(JSON.of(issue.shortId()));
         }
         ret.put("issue", issueIds);
         ret.put("user", commit.author().name());
-        ret.put("date", commit.date().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss +0000")));
+        ret.put("date", commit.authored().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss +0000")));
 
         return ret;
     }
 
     private JSONObject issuesToChanges(HostedRepository repository, Repository localRepository, List<Issue> issues, String build) {
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/slack/SlackNotifier.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/slack/SlackNotifier.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/slack/SlackNotifier.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/slack/SlackNotifier.java
@@ -87,11 +87,11 @@
                 }
                 var title = commit.message().get(0);
                 query.put("text", branch.name() + ": " + commit.hash().abbreviate() + ": " + title + "\n" +
                                   "Author: " + commit.author().name() + "\n" +
                                   "Committer: " + commit.author().name() + "\n" +
-                                  "Date: " + commit.date().format(DateTimeFormatter.RFC_1123_DATE_TIME) + "\n");
+                                  "Date: " + commit.authored().format(DateTimeFormatter.RFC_1123_DATE_TIME) + "\n");
 
                 var attachment = JSON.object();
                 attachment.put("fallback", "Link to commit");
                 attachment.put("color", "#cc0e31");
                 attachment.put("title", "View on " + repository.forge().name());
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
@@ -302,12 +302,13 @@
                                       .map(p -> new Hash(p.get("sha").asString()))
                                       .collect(Collectors.toList());
         var commit = o.get("commit").asObject();
         var author = new Author(commit.get("author").get("name").asString(),
                                 commit.get("author").get("email").asString());
+        var authored = ZonedDateTime.parse(commit.get("author").get("date").asString());
         var committer = new Author(commit.get("committer").get("name").asString(),
                                    commit.get("committer").get("email").asString());
-        var date = ZonedDateTime.parse(commit.get("author").get("date").asString());
+        var committed = ZonedDateTime.parse(commit.get("committer").get("date").asString());
         var message = Arrays.asList(commit.get("message").asString().split("\n"));
-        return Optional.of(new CommitMetadata(hash, parents, author, committer, date, message));
+        return Optional.of(new CommitMetadata(hash, parents, author, authored, committer, committed, message));
     }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
@@ -335,12 +335,13 @@
                                       .map(JSONValue::asString)
                                       .map(Hash::new)
                                       .collect(Collectors.toList());
         var author = new Author(c.get("author_name").asString(),
                                 c.get("author_email").asString());
+        var authored = ZonedDateTime.parse(c.get("authored_date").asString());
         var committer = new Author(c.get("committer_name").asString(),
                                    c.get("committer_email").asString());
-        var date = ZonedDateTime.parse(c.get("authored_date").asString());
+        var committed = ZonedDateTime.parse(c.get("comitted_date").asString());
         var message = Arrays.asList(c.get("message").asString().split("\n"));
-        return Optional.of(new CommitMetadata(hash, parents, author, committer, date, message));
+        return Optional.of(new CommitMetadata(hash, parents, author, authored, committer, committed, message));
     }
 }
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/AuthorCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/AuthorCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/AuthorCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/AuthorCheckTests.java
@@ -41,15 +41,16 @@
         "error = author"
     ));
 
     private static Commit commit(Author author) {
         var committer = new Author("Foo", "foo@bar.org");
+        var committed = ZonedDateTime.now();
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"));
-        var date = ZonedDateTime.now();
+        var authored = ZonedDateTime.now();
         var message = List.of("Initial commit");
-        var metadata = new CommitMetadata(hash, parents, author, committer, date, message);
+        var metadata = new CommitMetadata(hash, parents, author, authored, committer, committed, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/BinaryCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/BinaryCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/BinaryCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/BinaryCheckTests.java
@@ -57,12 +57,12 @@
     private static Commit commit(List<Diff> parentDiffs) {
         var author = new Author("foo", "foo@host.org");
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(hash, hash);
         var message = List.of("A commit");
-        var date = ZonedDateTime.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
+        var authored = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, message);
         return new Commit(metadata, parentDiffs);
     }
 
     private List<Issue> toList(Iterator<Issue> i) {
         var list = new ArrayList<Issue>();
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/BlacklistCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/BlacklistCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/BlacklistCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/BlacklistCheckTests.java
@@ -40,15 +40,14 @@
         "error = blacklist"
     ));
 
     private static Commit commit(Hash hash) {
         var author = new Author("Foo", "foo@bar.org");
-        var committer = author;
         var parents = List.of(new Hash("12345789012345789012345678901234567890"));
-        var date = ZonedDateTime.now();
+        var authored = ZonedDateTime.now();
         var message = List.of("Initial commit");
-        var metadata = new CommitMetadata(hash, parents, author, committer, date, message);
+        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/CommitterCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/CommitterCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/CommitterCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/CommitterCheckTests.java
@@ -78,20 +78,20 @@
     private static Commit mergeCommit(Author author, Author committer) {
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(hash, hash);
         var date = ZonedDateTime.now();
         var message = List.of("Merge");
-        var metadata = new CommitMetadata(hash, parents, author, committer, date, message);
+        var metadata = new CommitMetadata(hash, parents, author, date, committer, date, message);
         return new Commit(metadata, List.of());
     }
 
     private static Commit commit(Author author, Author committer) {
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"));
         var date = ZonedDateTime.now();
         var message = List.of("Initial commit");
-        var metadata = new CommitMetadata(hash, parents, author, committer, date, message);
+        var metadata = new CommitMetadata(hash, parents, author, date, committer, date, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/ExecutableCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/ExecutableCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/ExecutableCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/ExecutableCheckTests.java
@@ -58,12 +58,12 @@
     private static Commit commit(List<Diff> parentDiffs) {
         var author = new Author("foo", "foo@host.org");
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(hash, hash);
         var message = List.of("A commit");
-        var date = ZonedDateTime.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
+        var authored = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, message);
         return new Commit(metadata, parentDiffs);
     }
 
     private List<Issue> toList(Iterator<Issue> i) {
         var list = new ArrayList<Issue>();
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java
@@ -58,22 +58,22 @@
     ));
 
     private static Commit commit(Hash hash, List<String> message, List<Diff> parentDiffs) {
         var author = new Author("Foo Bar", "foo@bar.org");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"));
-        var date = ZonedDateTime.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
+        var authored = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, message);
         return new Commit(metadata, parentDiffs);
     }
 
     private static Commit mergeCommit() {
         var author = new Author("Foo Bar", "foo@bar.org");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"),
                               new Hash("12345789012345789012345678901234567890"));
         var message = List.of("Merge");
-        var date = ZonedDateTime.now();
-        var metadata = new CommitMetadata(Hash.zero(), parents, author, author, date, message);
+        var authored = ZonedDateTime.now();
+        var metadata = new CommitMetadata(Hash.zero(), parents, author, authored, author, authored, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/IssuesCheckTests.java
@@ -79,12 +79,12 @@
     }
     private static Commit commit(List<String> message) {
         var author = new Author("foo", "foo@host.org");
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(hash);
-        var date = ZonedDateTime.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
+        var authored = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/MergeMessageCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/MergeMessageCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/MergeMessageCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/MergeMessageCheckTests.java
@@ -54,12 +54,12 @@
 
     private static Commit commit(List<String> message) {
         var author = new Author("foo", "foo@host.org");
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(hash, hash);
-        var date = ZonedDateTime.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
+        var authored = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, message);
         return new Commit(metadata, List.of());
     }
 
     private List<Issue> toList(Iterator<Issue> i) {
         var list = new ArrayList<Issue>();
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/MessageCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/MessageCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/MessageCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/MessageCheckTests.java
@@ -54,12 +54,12 @@
 
     private static Commit commit(List<String> message) {
         var author = new Author("foo", "foo@host.org");
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(hash);
-        var date = ZonedDateTime.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
+        var authored = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/ProblemListsCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/ProblemListsCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/ProblemListsCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/ProblemListsCheckTests.java
@@ -150,12 +150,12 @@
 
     private static Commit commit(int id, String... message) {
         var author = new Author("foo", "foo@host.org");
         var hash = new Hash(("" + id).repeat(40));
         var parents = List.of(Hash.zero());
-        var date = ZonedDateTime.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, date, List.of(message));
+        var authored = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, List.of(message));
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
@@ -394,6 +394,6 @@
         assertEquals(Set.of(Path.of("test1/ProjProblemList.txt"),
                 Path.of("test2/ProjProblemList.txt")), issue.files());
 
     }
 
-}
+}
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/ReviewersCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/ReviewersCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/ReviewersCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/ReviewersCheckTests.java
@@ -99,17 +99,17 @@
     }
 
     private static Commit commit(Author author, List<String> reviewers) {
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"));
-        var date = ZonedDateTime.now();
+        var authored = ZonedDateTime.now();
         var message = new ArrayList<String>();
         message.addAll(List.of("Initial commit"));
         if (!reviewers.isEmpty()) {
             message.addAll(List.of("", "Reviewed-by: " + String.join(", ", reviewers)));
         }
-        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
+        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/SymlinkCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/SymlinkCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/SymlinkCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/SymlinkCheckTests.java
@@ -69,12 +69,12 @@
 
     private static Commit commit(List<Diff> diffs) {
         var author = new Author("foo", "foo@localhost");
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(hash);
-        var date = ZonedDateTime.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, date, List.of("Added symlink"));
+        var authored = ZonedDateTime.now();
+        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, List.of("Added symlink"));
         return new Commit(metadata, diffs);
     }
 
     private static Commit commitWithSymlink(String filename) {
         return commit(symlinkDiff(filename));
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/WhitespaceCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/WhitespaceCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/WhitespaceCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/WhitespaceCheckTests.java
@@ -64,13 +64,13 @@
 
     private static Commit commit(List<Diff> parentDiffs) {
         var author = new Author("Foo Bar", "foo@bar.org");
         var hash = new Hash("0123456789012345678901234567890123456789");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"));
-        var date = ZonedDateTime.now();
+        var authored = ZonedDateTime.now();
         var message = List.of("Initial commit", "", "Reviewed-by: baz");
-        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
+        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, message);
         return new Commit(metadata, parentDiffs);
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Commit.java b/vcs/src/main/java/org/openjdk/skara/vcs/Commit.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Commit.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Commit.java
@@ -61,12 +61,16 @@
 
     public boolean isInitialCommit() {
         return metadata.isInitialCommit();
     }
 
-    public ZonedDateTime date() {
-        return metadata.date();
+    public ZonedDateTime authored() {
+        return metadata.authored();
+    }
+
+    public ZonedDateTime committed() {
+        return metadata.committed();
     }
 
     public boolean isMerge() {
         return metadata.isMerge();
     }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/CommitMetadata.java b/vcs/src/main/java/org/openjdk/skara/vcs/CommitMetadata.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/CommitMetadata.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/CommitMetadata.java
@@ -28,22 +28,25 @@
 
 public class CommitMetadata {
     private final Hash hash;
     private final List<Hash> parents;
     private final Author author;
+    private final ZonedDateTime authored;
     private final Author committer;
-    private final ZonedDateTime date;
+    private final ZonedDateTime committed;
     private final List<String> message;
 
     public CommitMetadata(Hash hash, List<Hash> parents,
-                          Author author, Author committer,
-                          ZonedDateTime date, List<String> message) {
+                          Author author, ZonedDateTime authored,
+                          Author committer, ZonedDateTime committed,
+                          List<String> message) {
         this.hash = hash;
         this.parents = parents;
         this.author = author;
+        this.authored = authored;
         this.committer = committer;
-        this.date = date;
+        this.committed = committed;
         this.message = message;
     }
 
     public Hash hash() {
         return hash;
@@ -63,12 +66,16 @@
 
     public List<Hash> parents() {
         return parents;
     }
 
-    public ZonedDateTime date() {
-        return date;
+    public ZonedDateTime authored() {
+        return authored;
+    }
+
+    public ZonedDateTime committed() {
+        return committed;
     }
 
     public boolean isInitialCommit() {
         return numParents() == 1 && parents.get(0).equals(Hash.zero());
     }
@@ -82,18 +89,18 @@
     }
 
     @Override
     public String toString() {
         final var formatter = DateTimeFormatter.RFC_1123_DATE_TIME;
-        final var displayDate = date.format(formatter);
+        final var displayDate = authored.format(formatter);
         return String.format("%s  %-12s  %s  %s",
                              hash().toString(), author(), displayDate, message.get(0));
     }
 
     @Override
     public int hashCode() {
-        return Objects.hash(hash, parents, author, committer, date, message);
+        return Objects.hash(hash, parents, author, authored, committer, committed, message);
     }
 
     @Override
     public boolean equals(Object o) {
         if (!(o instanceof CommitMetadata)) {
@@ -102,10 +109,11 @@
 
         var other = (CommitMetadata) o;
         return Objects.equals(hash, other.hash) &&
                Objects.equals(parents, other.parents) &&
                Objects.equals(author, other.author) &&
+               Objects.equals(authored, other.authored) &&
                Objects.equals(committer, other.committer) &&
-               Objects.equals(date, other.date) &&
+               Objects.equals(committed, other.committed) &&
                Objects.equals(message, other.message);
     }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitMetadata.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitMetadata.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitMetadata.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitMetadata.java
@@ -37,25 +37,27 @@
 
     private static final String hashFormat = "%H";
     private static final String parentsFormat = "%P";
     private static final String authorNameFormat = "%an";
     private static final String authorEmailFormat = "%ae";
+    private static final String authorDateFormat = "%aI";
     private static final String committerNameFormat = "%cn";
     private static final String committerEmailFormat = "%ce";
-    private static final String timestampFormat = "%aI";
+    private static final String committerDateFormat = "%cI";
 
     private static final String messageDelimiter = "=@=@=@=@=@";
     private static final String messageFormat = "%B" + messageDelimiter;
 
     public static final String FORMAT = String.join("%n",
                                                     hashFormat,
                                                     parentsFormat,
                                                     authorNameFormat,
                                                     authorEmailFormat,
+                                                    authorDateFormat,
                                                     committerNameFormat,
                                                     committerEmailFormat,
-                                                    timestampFormat,
+                                                    committerDateFormat,
                                                     messageFormat);
 
     public static CommitMetadata read(UnixStreamReader reader) throws IOException {
         var hash = new Hash(reader.readLine());
         log.fine("Parsing: " + hash.hex());
@@ -67,24 +69,28 @@
         var parents = new ArrayList<Hash>();
         for (var parentHash : parentHashes.split(" ")) {
             parents.add(new Hash(parentHash));
         }
 
+        var dateFormatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME;
+
         var authorName = reader.readLine();
         log.finer("authorName: " + authorName);
         var authorEmail = reader.readLine();
         log.finer("authorEmail: " + authorEmail);
         var author = new Author(authorName, authorEmail);
+        var authored = ZonedDateTime.parse(reader.readLine(), dateFormatter);
+        log.finer("authorDate: " + authored);
 
         var committerName = reader.readLine();
         log.finer("committerName: " + committerName);
         var committerEmail = reader.readLine();
         log.finer("committerEmail " + committerName);
         var committer = new Author(committerName, committerEmail);
+        var committed = ZonedDateTime.parse(reader.readLine(), dateFormatter);
+        log.finer("committerDate: " + committed);
 
-        var formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME;
-        var date = ZonedDateTime.parse(reader.readLine(), formatter);
 
         var message = new ArrayList<String>();
         var line = reader.readLine();
         while (!line.endsWith(messageDelimiter)) {
             message.add(line);
@@ -94,8 +100,8 @@
         if (!line.equals(messageDelimiter)) {
             var prefix = line.substring(0, line.length() - messageDelimiter.length());
             message.add(prefix);
         }
 
-        return new CommitMetadata(hash, parents, author, committer, date, message);
+        return new CommitMetadata(hash, parents, author, authored, committer, committed, message);
     }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgCommitMetadata.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgCommitMetadata.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgCommitMetadata.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgCommitMetadata.java
@@ -45,11 +45,11 @@
         reader.readLine(); // skip revision numbers for parents
 
         var author = Author.fromString(reader.readLine());
 
         var formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd H:m:sZ");
-        var date = ZonedDateTime.parse(reader.readLine(), formatter);
+        var authored = ZonedDateTime.parse(reader.readLine(), formatter);
 
         var messageSize = Integer.parseInt(reader.readLine());
         var messageBuffer = reader.read(messageSize);
         var message = new ArrayList<String>();
         var last = -1;
@@ -62,8 +62,8 @@
                 // the last character wasn't newline, add the rest
                 message.add(new String(messageBuffer, offset, messageSize - offset, StandardCharsets.UTF_8));
             }
         }
 
-        return new CommitMetadata(hash, parents, author, author, date, message);
+        return new CommitMetadata(hash, parents, author, authored, author, authored, message);
     }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -1324,11 +1324,11 @@
                     var target = new Hash(parts[1]);
                     var rev = parts[0].substring(0, parts[0].length() - 1).trim(); // skip last ':' and ev. whitespace
                     var hash = resolve(rev).orElseThrow(IOException::new);
                     var commit = lookup(hash).orElseThrow(IOException::new);
                     var message = String.join("\n", commit.message()) + "\n";
-                    return Optional.of(new Tag.Annotated(tagName, target, commit.author(), commit.date(), message));
+                    return Optional.of(new Tag.Annotated(tagName, target, commit.author(), commit.authored(), message));
                 }
             }
         }
         return Optional.empty();
     }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java
@@ -219,18 +219,18 @@
 
             Hash hgHash = null;
             if (parents.size() == 1 && patches0.isEmpty()) {
                 var tmp = Files.createFile(hgRoot.resolve("THIS_IS_A_REALLY_UNIQUE_FILE_NAME_THAT_CANT_POSSIBLY_BE_USED"));
                 hgRepo.add(tmp);
-                hgRepo.commit(hgMessage, hgAuthor, null, commit.date());
+                hgRepo.commit(hgMessage, hgAuthor, null, commit.authored());
                 hgRepo.remove(tmp);
                 hgHash = hgRepo.amend(hgMessage, hgAuthor, null);
             } else {
                 hgHash = hgRepo.commit(hgMessage,
                                        hgAuthor,
                                        null,
-                                       commit.date());
+                                       commit.authored());
             }
             log.fine("Converted hg hash: " + hgHash.hex());
             gitToHg.put(commit.hash(), hgHash);
             hgToGit.put(hgHash, commit.hash());
             hgHashes.add(hgHash);
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/HgToGitConverter.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/HgToGitConverter.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/HgToGitConverter.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/HgToGitConverter.java
@@ -506,12 +506,12 @@
                 var author = convertAuthor(commit.author());
                 pipe.print(author.name());
                 pipe.print(" <");
                 pipe.print(author.email());
                 pipe.print("> ");
-                var epoch = commit.date().toEpochSecond();
-                var offset = commit.date().format(DateTimeFormatter.ofPattern("xx"));
+                var epoch = commit.authored().toEpochSecond();
+                var offset = commit.authored().format(DateTimeFormatter.ofPattern("xx"));
                 pipe.print(epoch);
                 pipe.print(" ");
                 pipe.println(offset);
 
                 pipe.print("data ");
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -2297,6 +2297,30 @@
             var gitHash = gitRepo.commit("Added git-file.txt", "duke", "duke@openjdk.java.net");
 
             assertThrows(IOException.class, () -> Repository.get(dir.path()));
         }
     }
+
+    @Test
+    void testCommitterDate() throws IOException {
+        try (var dir = new TemporaryDirectory()) {
+            var repo = Repository.init(dir.path(), VCS.GIT);
+            var readme = dir.path().resolve("README");
+            Files.write(readme, List.of("Hello, readme!"));
+
+            repo.add(readme);
+            var authored = ZonedDateTime.parse("2020-06-15T14:27:13+02:00");
+            var committed = authored.plusMinutes(10);
+            var head = repo.commit("Add README",
+                                   "author", "author@openjdk.java.net", authored,
+                                   "committer", "committer@openjdk.java.net", committed);
+            var commit = repo.lookup(head).orElseThrow();
+            assertEquals("author", commit.author().name());
+            assertEquals("author@openjdk.java.net", commit.author().email());
+            assertEquals(authored, commit.authored());
+
+            assertEquals("committer", commit.committer().name());
+            assertEquals("committer@openjdk.java.net", commit.committer().email());
+            assertEquals(committed, commit.committed());
+        }
+    }
 }
diff a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/GitToHgConverterTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/GitToHgConverterTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/GitToHgConverterTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/GitToHgConverterTests.java
@@ -35,11 +35,11 @@
 
 import static org.junit.jupiter.api.Assertions.*;
 
 class GitToHgConverterTests {
     void assertCommitEquals(Commit gitCommit, Commit hgCommit) {
-        assertEquals(gitCommit.date(), hgCommit.date());
+        assertEquals(gitCommit.authored(), hgCommit.authored());
         assertEquals(gitCommit.isInitialCommit(), hgCommit.isInitialCommit());
         assertEquals(gitCommit.isMerge(), hgCommit.isMerge());
         assertEquals(gitCommit.numParents(), hgCommit.numParents());
 
         var hgDiffs = hgCommit.parentDiffs();
diff a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/HgToGitConverterTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/HgToGitConverterTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/HgToGitConverterTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/openjdk/converter/HgToGitConverterTests.java
@@ -62,11 +62,11 @@
             var hgCommit = hgCommits.get(0);
 
             assertEquals(gitCommit.author(), new Author("Foo Bar", "foo@openjdk.java.net"));
             assertEquals(gitCommit.committer(), new Author("Foo Bar", "foo@openjdk.java.net"));
             assertEquals(hgCommit.message(), gitCommit.message());
-            assertEquals(hgCommit.date(), gitCommit.date());
+            assertEquals(hgCommit.authored(), gitCommit.authored());
             assertEquals(hgCommit.isInitialCommit(), gitCommit.isInitialCommit());
             assertEquals(hgCommit.isMerge(), gitCommit.isMerge());
             assertEquals(hgCommit.numParents(), gitCommit.numParents());
 
             var hgDiffs = hgCommit.parentDiffs();
