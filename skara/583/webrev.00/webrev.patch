diff a/bots/forward/src/main/java/org/openjdk/skara/bots/forward/ForwardBot.java b/bots/forward/src/main/java/org/openjdk/skara/bots/forward/ForwardBot.java
--- a/bots/forward/src/main/java/org/openjdk/skara/bots/forward/ForwardBot.java
+++ b/bots/forward/src/main/java/org/openjdk/skara/bots/forward/ForwardBot.java
@@ -83,11 +83,12 @@
             }
 
             log.info("Fetching " + fromHostedRepo.name() + ":" + fromBranch.name() +
                      " to " + toBranch.name());
             var fetchHead = toLocalRepo.fetch(fromHostedRepo.url(),
-                                              fromBranch.name() + ":" + toBranch.name());
+                                              fromBranch.name() + ":" + toBranch.name(),
+                                              false);
             log.info("Pushing " + toBranch.name() + " to " + toHostedRepo.name());
             toLocalRepo.push(fetchHead, toHostedRepo.url(), toBranch.name(), false);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
diff a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
--- a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
+++ b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
@@ -229,16 +229,16 @@
         var repo = pool.materialize(fork, to);
 
         // Sync personal fork
         var remoteBranches = repo.remoteBranches(target.url().toString());
         for (var branch : remoteBranches) {
-            var fetchHead = repo.fetch(target.url(), branch.hash().hex());
+            var fetchHead = repo.fetch(target.url(), branch.hash().hex(), false);
             repo.push(fetchHead, fork.url(), branch.name());
         }
 
         // Must fetch once to update refs/heads
-        repo.fetchAll();
+        repo.fetchAll(false);
 
         return repo;
     }
 
     @Override
@@ -409,11 +409,11 @@
                 ));
                 repo.merge(remoteBranch); // should always be a fast-forward merge
 
                 log.info("Trying to merge " + fromRepo.name() + ":" + fromBranch.name() + " to " + toBranch.name());
                 log.info("Fetching " + fromRepo.name() + ":" + fromBranch.name());
-                var fetchHead = repo.fetch(fromRepo.url(), fromBranch.name());
+                var fetchHead = repo.fetch(fromRepo.url(), fromBranch.name(), false);
                 var head = repo.resolve(toBranch.name()).orElseThrow(() ->
                         new IOException("Could not resolve branch " + toBranch.name())
                 );
                 if (repo.contains(toBranch, fetchHead)) {
                     log.info("Nothing to merge");
diff a/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java b/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
--- a/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
+++ b/bots/mirror/src/main/java/org/openjdk/skara/bots/mirror/MirrorBot.java
@@ -89,16 +89,16 @@
                 });
             }
 
             if (shouldMirrorEverything) {
                 log.info("Pulling " + from.name());
-                repo.fetchAll();
+                repo.fetchAll(false);
                 log.info("Pushing to " + to.name());
                 repo.pushAll(to.url());
             } else {
                 for (var branch : branches) {
-                    var fetchHead = repo.fetch(from.url(), branch.name());
+                    var fetchHead = repo.fetch(from.url(), branch.name(), false);
                     repo.push(fetchHead, to.url(), branch.name());
                 }
             }
 
         } catch (IOException e) {
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -78,11 +78,11 @@
         for (int counter = 0; counter < 3; ++counter) {
             try {
                 var localHead = localRepo.head();
                 localRepo.add(localRepo.root().resolve("."));
                 var hash = localRepo.commit(message, bot.emailAddress().fullName().orElseThrow(), bot.emailAddress().address());
-                var remoteHead = localRepo.fetch(bot.archiveRepo().url(), bot.archiveRef());
+                var remoteHead = localRepo.fetch(bot.archiveRepo().url(), bot.archiveRef(), false);
                 if (!localHead.equals(remoteHead)) {
                     log.info("Remote head has changed - attempting a rebase");
                     localRepo.rebase(remoteHead, bot.emailAddress().fullName().orElseThrow(), bot.emailAddress().address());
                     hash = localRepo.head();
                 }
@@ -293,11 +293,11 @@
             var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
             var hostedRepositoryPool = new HostedRepositoryPool(seedPath);
             var repository = pr.repository();
             var localRepoPath = scratchPath.resolve("mlbridge-mergebase");
             var localRepo = hostedRepositoryPool.checkout(pr, localRepoPath.resolve(repository.name()));
-            localRepo.fetch(repository.url(), "+" + pr.targetRef() + ":mlbridge_prinstance");
+            localRepo.fetch(repository.url(), "+" + pr.targetRef() + ":mlbridge_prinstance", false);
 
             var targetHash = pr.targetHash();
             var headHash = pr.headHash();
             var baseHash = localRepo.mergeBase(targetHash, headHash);
 
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CensusInstance.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CensusInstance.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CensusInstance.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/CensusInstance.java
@@ -85,11 +85,11 @@
         var repoFolder = folder.resolve(URLEncoder.encode(repoName, StandardCharsets.UTF_8));
         try {
             var localRepo = Repository.get(repoFolder)
                                       .or(() -> Optional.of(initialize(censusRepo, censusRef, repoFolder)))
                                       .orElseThrow();
-            var hash = localRepo.fetch(censusRepo.url(), censusRef);
+            var hash = localRepo.fetch(censusRepo.url(), censusRef, false);
             localRepo.checkout(hash, true);
         } catch (IOException e) {
             initialize(censusRepo, censusRef, repoFolder);
         }
 
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
@@ -263,11 +263,11 @@
             var localRepo = repositoryPool.materialize(repository, scratchPath.resolve("notify").resolve("repowi").resolve(repository.name()));
             var knownRefs = localRepo.remoteBranches(repository.url().toString())
                                      .stream()
                                      .filter(ref -> branches.matcher(ref.name()).matches())
                                      .collect(Collectors.toList());
-            localRepo.fetchAll();
+            localRepo.fetchAll(false);
 
             var history = UpdateHistory.create(tagStorageBuilder, historyPath.resolve("tags"), branchStorageBuilder, historyPath.resolve("branches"));
             var errors = new ArrayList<Throwable>();
 
             for (var updater : updaters) {
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CensusInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CensusInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CensusInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CensusInstance.java
@@ -85,11 +85,11 @@
         var repoFolder = folder.resolve(URLEncoder.encode(repoName, StandardCharsets.UTF_8));
         try {
             var localRepo = Repository.get(repoFolder)
                                       .or(() -> Optional.of(initialize(censusRepo, censusRef, repoFolder)))
                                       .orElseThrow();
-            var hash = localRepo.fetch(censusRepo.url(), censusRef);
+            var hash = localRepo.fetch(censusRepo.url(), censusRef, false);
             localRepo.checkout(hash, true);
         } catch (IOException e) {
             initialize(censusRepo, censusRef, repoFolder);
         }
 
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -194,11 +194,11 @@
                     try {
                         var mergeSourceRepo = pr.repository().forge().repository(source.get().repositoryName).orElseThrow(() ->
                                 new RuntimeException("Could not find repository " + source.get().repositoryName)
                         );
                         try {
-                            var sourceHash = prInstance.localRepo().fetch(mergeSourceRepo.url(), source.get().branchName);
+                            var sourceHash = prInstance.localRepo().fetch(mergeSourceRepo.url(), source.get().branchName, false);
                             var mergeCommit = commits.get(mergeCommitIndex);
                             for (int i = 1; i < mergeCommit.parents().size(); ++i) {
                                 if (!prInstance.localRepo().isAncestor(mergeCommit.parents().get(i), sourceHash)) {
                                     ret.add("The merge contains commits that are not ancestors of the source.");
                                     break;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -54,11 +54,11 @@
         this.ignoreStaleReviews = ignoreStaleReviews;
 
         // Materialize the PR's source and target ref
         var repository = pr.repository();
         localRepo = hostedRepositoryPool.checkout(pr, localRepoPath.resolve(repository.name()));
-        localRepo.fetch(repository.url(), "+" + pr.targetRef() + ":pr_prinstance");
+        localRepo.fetch(repository.url(), "+" + pr.targetRef() + ":pr_prinstance", false);
 
         targetHash = pr.targetHash();
         headHash = pr.headHash();
         baseHash = localRepo.mergeBase(targetHash, headHash);
     }
diff a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java
--- a/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java
+++ b/bots/submit/src/main/java/org/openjdk/skara/bots/submit/SubmitBotWorkItem.java
@@ -84,11 +84,11 @@
 
         // Materialize the PR's target ref
         try {
             var localRepo = Repository.materialize(prFolder, pr.repository().url(),
                                                    "+" + pr.targetRef() + ":submit_" + pr.repository().name());
-            var headHash = localRepo.fetch(pr.repository().url(), pr.headHash().hex());
+            var headHash = localRepo.fetch(pr.repository().url(), pr.headHash().hex(), false);
 
             var checkBuilder = CheckBuilder.create(executor.checkName(), headHash);
             pr.createCheck(checkBuilder.build());
 
             var checkUpdater = new CheckUpdater(pr, checkBuilder);
diff a/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestWorkItem.java b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestWorkItem.java
--- a/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestWorkItem.java
+++ b/bots/tester/src/main/java/org/openjdk/skara/bots/tester/TestWorkItem.java
@@ -402,11 +402,11 @@
                     log.info("Found existing scratch directory for " + repository.name());
                     localRepo = Repository.get(localRepoDir).orElseThrow(() -> {
                             return new RuntimeException("Repository in " + localRepoDir + " has vanished");
                     });
                 }
-                fetchHead = localRepo.fetch(repository.url(), pr.headHash().hex());
+                fetchHead = localRepo.fetch(repository.url(), pr.headHash().hex(), false);
                 localRepo.checkout(fetchHead, true);
                 job = ci.submit(localRepoDir, jobs, jobId);
             } catch (IOException e) {
                 var lines = List.of(
                         "<!-- TEST ERROR -->",
diff a/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
--- a/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
+++ b/bots/topological/src/main/java/org/openjdk/skara/bots/topological/TopologicalBot.java
@@ -79,11 +79,11 @@
                 log.info("Found existing scratch directory for " + hostedRepo.name());
                 repo = Repository.get(dir)
                         .orElseThrow(() -> new RuntimeException("Repository in " + dir + " has vanished"));
             }
 
-            repo.fetchAll();
+            repo.fetchAll(false);
             var depsFile = repo.root().resolve(depsFileName);
 
             var orderedBranches = orderedBranches(repo, depsFile);
             log.info("Merge order " + orderedBranches);
             for (var branch : orderedBranches) {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -39,12 +39,18 @@
     }
     void checkout(Branch b, boolean force) throws IOException;
     default void checkout(Branch b) throws IOException {
         checkout(b, false);
     }
-    Hash fetch(URI uri, String refspec) throws IOException;
-    void fetchAll() throws IOException;
+    default Hash fetch(URI uri, String refspec) throws IOException {
+        return fetch(uri, refspec, true);
+    }
+    Hash fetch(URI uri, String refspec, boolean includeTags) throws IOException;
+    default void fetchAll() throws IOException {
+        fetchAll(false);
+    }
+    void fetchAll(boolean includeTags) throws IOException;
     void fetchRemote(String remote) throws IOException;
     void pushAll(URI uri) throws IOException;
     void push(Hash hash, URI uri, String ref, boolean force) throws IOException;
     void push(Branch branch, String remote, boolean setUpstream) throws IOException;
     void clean() throws IOException;
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -395,20 +395,39 @@
 
         return init();
     }
 
     @Override
-    public Hash fetch(URI uri, String refspec) throws IOException {
-        try (var p = capture("git", "fetch", "--recurse-submodules=on-demand", "--tags", uri.toString(), refspec)) {
+    public Hash fetch(URI uri, String refspec, boolean includeTags) throws IOException {
+        var cmd = new ArrayList<String>();
+        cmd.addAll(List.of("git", "fetch", "--recurse-submodules=on-demand"));
+        if (includeTags) {
+            cmd.add("--tags");
+        } else {
+            cmd.add("--no-tags");
+        }
+        cmd.add(uri.toString());
+        cmd.add(refspec);
+        try (var p = capture(cmd)) {
             await(p);
             return resolve("FETCH_HEAD").get();
         }
     }
 
     @Override
-    public void fetchAll() throws IOException {
-        try (var p = capture("git", "fetch", "--recurse-submodules=on-demand", "--tags", "--prune", "--prune-tags", "--all")) {
+    public void fetchAll(boolean includeTags) throws IOException {
+        var cmd = new ArrayList<String>();
+        cmd.addAll(List.of("git", "fetch", "--recurse-submodules=on-demand"));
+        cmd.add("--prune");
+        if (includeTags) {
+            cmd.add("--tags");
+            cmd.add("--prune-tags");
+        } else {
+            cmd.add("--no-tags");
+        }
+        cmd.add("--all");
+        try (var p = capture(cmd)) {
             await(p);
         }
     }
 
     @Override
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -401,11 +401,12 @@
 
         return init();
     }
 
     @Override
-    public Hash fetch(URI uri, String refspec) throws IOException {
+    public Hash fetch(URI uri, String refspec, boolean includeTags) throws IOException {
+        // Ignore includeTags, Mercurial always fetches tags
         return fetch(uri != null ? uri.toString() : null, refspec);
     }
 
     private Hash fetch(String from, String refspec) throws IOException {
         var oldHeads = new HashSet<Hash>(heads());
@@ -435,11 +436,12 @@
         }
         return newHeads.iterator().next();
     }
 
     @Override
-    public void fetchAll() throws IOException {
+    public void fetchAll(boolean includeTags) throws IOException {
+        // Ignore includeTags, Mercurial always fetches tags
         var pullPaths = new ArrayList<URI>();
         try (var p = capture("hg", "paths")) {
             var res = await(p);
             for (var line : res.stdout()) {
                 var parts = line.split("=");
