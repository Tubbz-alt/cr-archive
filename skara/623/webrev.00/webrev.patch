diff a/bots/csr/src/main/java/org/openjdk/skara/bots/csr/CSRBot.java b/bots/csr/src/main/java/org/openjdk/skara/bots/csr/CSRBot.java
--- a/bots/csr/src/main/java/org/openjdk/skara/bots/csr/CSRBot.java
+++ b/bots/csr/src/main/java/org/openjdk/skara/bots/csr/CSRBot.java
@@ -81,16 +81,16 @@
         for (var pr : prs) {
             if (!hasCSRLabel.contains(pr.id())) {
                 continue;
             }
 
-            var issue = org.openjdk.skara.vcs.openjdk.Issue.fromString(pr.title());
+            var issue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());
             if (issue.isEmpty()) {
                 log.info("No issue found in title for " + describe(pr));
                 continue;
             }
-            var jbsIssue = project.issue(issue.get().id());
+            var jbsIssue = project.issue(issue.get().shortId());
             if (jbsIssue.isEmpty()) {
                 log.info("No issue found in JBS for " + describe(pr));
                 continue;
             }
 
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -135,12 +135,12 @@
             return Optional.of(commitSummary);
         }
     }
 
     private static Optional<String> issueUrl(PullRequest pr, URI issueTracker, String projectPrefix) {
-        var issue = Issue.fromString(pr.title());
-        return issue.map(value -> URIBuilder.base(issueTracker).appendPath(projectPrefix + "-" + value.id()).build().toString());
+        var issue = Issue.fromStringRelaxed(pr.title());
+        return issue.map(value -> URIBuilder.base(issueTracker).appendPath(projectPrefix + "-" + value.shortId()).build().toString());
     }
 
     private static String stats(Repository localRepo, Hash base, Hash head) {
         try {
             var diff = localRepo.diff(base, head);
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
@@ -69,16 +69,16 @@
                             .version(Version.fromManifest().orElse("unknown"))
                             .upstream(pr.repository().webUrl().toString())
                             .pullRequest(pr.webUrl().toString())
                             .username(fullName);
 
-        var issue = Issue.fromString(pr.title());
+        var issue = Issue.fromStringRelaxed(pr.title());
         if (issue.isPresent()) {
             var conf = JCheckConfiguration.from(localRepository, head);
             if (!conf.isEmpty()) {
                 var project = conf.get().general().jbs() != null ? conf.get().general().jbs() : conf.get().general().project();
-                var id = issue.get().id();
+                var id = issue.get().shortId();
                 IssueTracker issueTracker = null;
                 try {
                     issueTracker = IssueTracker.from("jira", URI.create("https://bugs.openjdk.java.net"));
                 } catch (RuntimeException e) {
                     log.warning("Failed to create Jira issue tracker");
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
@@ -246,11 +246,11 @@
     public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
         for (var commit : commits) {
             var commitNotification = CommitFormatters.toTextBrief(repository, commit);
             var commitMessage = CommitMessageParsers.v1.parse(commit);
             for (var commitIssue : commitMessage.issues()) {
-                var optionalIssue = issueProject.issue(commitIssue.id());
+                var optionalIssue = issueProject.issue(commitIssue.shortId());
                 if (optionalIssue.isEmpty()) {
                     log.severe("Cannot update issue " + commitIssue.id() + " with commit " + commit.hash().abbreviate()
                                        + " - issue not found in issue project");
                     continue;
                 }
@@ -345,11 +345,11 @@
         return "issue";
     }
 
     @Override
     public void handleNewIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
-        var realIssue = issueProject.issue(issue.id());
+        var realIssue = issueProject.issue(issue.shortId());
         if (realIssue.isEmpty()) {
             log.warning("Pull request " + pr + " added unknown issue: " + issue.id());
             return;
         }
 
@@ -365,11 +365,11 @@
         }
     }
 
     @Override
     public void handleRemovedIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
-        var realIssue = issueProject.issue(issue.id());
+        var realIssue = issueProject.issue(issue.shortId());
         if (realIssue.isEmpty()) {
             log.warning("Pull request " + pr + " removed unknown issue: " + issue.id());
             return;
         }
 
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/JsonUpdater.java
@@ -49,11 +49,11 @@
         ret.put("build", build);
 
         var parsedMessage = CommitMessageParsers.v1.parse(commit);
         var issueIds = JSON.array();
         for (var issue : parsedMessage.issues()) {
-            issueIds.add(JSON.of(issue.id()));
+            issueIds.add(JSON.of(issue.shortId()));
         }
         ret.put("issue", issueIds);
         ret.put("user", commit.author().name());
         ret.put("date", commit.date().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss +0000")));
 
@@ -65,11 +65,11 @@
         ret.put("version", version);
         ret.put("build", build);
 
         var issueIds = JSON.array();
         for (var issue : issues) {
-            issueIds.add(JSON.of(issue.id()));
+            issueIds.add(JSON.of(issue.shortId()));
         }
 
         ret.put("issue", issueIds);
 
         return ret;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CSRCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CSRCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CSRCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CSRCommand.java
@@ -20,11 +20,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
-import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.forge.*;
 import org.openjdk.skara.issuetracker.*;
 import org.openjdk.skara.json.JSON;
 
 import java.io.PrintWriter;
 import java.nio.file.Path;
@@ -81,19 +81,19 @@
                           "is already required for this pull request.");
             return;
         }
 
         var issueProject = bot.issueProject();
-        var issue = org.openjdk.skara.vcs.openjdk.Issue.fromString(pr.title());
+        var issue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());
         if (issue.isEmpty()) {
             csrReply(reply);
             jbsReply(pr, reply);
             pr.addLabel(CSR_LABEL);
             return;
         }
 
-        var jbsIssue = issueProject.issue(issue.get().id());
+        var jbsIssue = issueProject.issue(issue.get().shortId());
         if (jbsIssue.isEmpty()) {
             csrReply(reply);
             jbsReply(pr, reply);
             pr.addLabel(CSR_LABEL);
             return;
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -268,10 +268,18 @@
         } else {
             return Optional.empty();
         }
     }
 
+    private boolean relaxedEquals(String s1, String s2) {
+        return s1.trim()
+                 .replaceAll("\\s+", " ")
+                 .equalsIgnoreCase(s2.trim()
+                                     .replaceAll("\\s+", " "));
+    }
+
+
     private String getStatusMessage(List<Comment> comments, List<Review> reviews, PullRequestCheckIssueVisitor visitor, List<String> additionalErrors) {
         var progressBody = new StringBuilder();
         progressBody.append("---------\n");
         progressBody.append("### Progress\n");
         progressBody.append(getChecksList(visitor));
@@ -286,11 +294,11 @@
             }
             progressBody.append("\n");
             progressBody.append(getAdditionalErrorsList(allAdditionalErrors));
         }
 
-        var issue = Issue.fromString(pr.title());
+        var issue = Issue.fromStringRelaxed(pr.title());
         var issueProject = workItem.bot.issueProject();
         if (issueProject != null && issue.isPresent()) {
             var allIssues = new ArrayList<Issue>();
             allIssues.add(issue.get());
             allIssues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), comments));
@@ -299,29 +307,40 @@
                 progressBody.append("s");
             }
             progressBody.append("\n");
             for (var currentIssue : allIssues) {
                 progressBody.append(" * ");
-                try {
-                    var iss = issueProject.issue(currentIssue.id());
-                    if (iss.isPresent()) {
-                        progressBody.append("[");
-                        progressBody.append(iss.get().id());
-                        progressBody.append("](");
-                        progressBody.append(iss.get().webUrl());
-                        progressBody.append("): ");
-                        progressBody.append(iss.get().title());
-                        progressBody.append("\n");
-                    } else {
-                        progressBody.append("⚠️ Failed to retrieve information on issue `");
+                if (currentIssue.project().isPresent() && !currentIssue.project().get().equals(issueProject.name())) {
+                    progressBody.append("⚠️ Issue `");
+                    progressBody.append(currentIssue.id());
+                    progressBody.append("` does not belong to the `");
+                    progressBody.append(issueProject.name());
+                    progressBody.append("` project.");
+                } else {
+                    try {
+                        var iss = issueProject.issue(currentIssue.shortId());
+                        if (iss.isPresent()) {
+                            progressBody.append("[");
+                            progressBody.append(iss.get().id());
+                            progressBody.append("](");
+                            progressBody.append(iss.get().webUrl());
+                            progressBody.append("): ");
+                            progressBody.append(iss.get().title());
+                            if (!relaxedEquals(iss.get().title(), currentIssue.description())) {
+                                progressBody.append(" ⚠️ Title mismatch between PR and JBS.");
+                            }
+                            progressBody.append("\n");
+                        } else {
+                            progressBody.append("⚠️ Failed to retrieve information on issue `");
+                            progressBody.append(currentIssue.id());
+                            progressBody.append("`.\n");
+                        }
+                    } catch (RuntimeException e) {
+                        progressBody.append("⚠️ Temporary failure when trying to retrieve information on issue `");
                         progressBody.append(currentIssue.id());
                         progressBody.append("`.\n");
                     }
-                } catch (RuntimeException e) {
-                    progressBody.append("⚠️ Temporary failure when trying to retrieve information on issue `");
-                    progressBody.append(currentIssue.id());
-                    progressBody.append("`.\n");
                 }
             }
         }
 
         getReviewersList(reviews).ifPresent(reviewers -> {
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java
@@ -61,11 +61,11 @@
                                                  .map(email -> Author.fromString(email.toString()))
                                                  .collect(Collectors.toList());
 
         var additionalIssues = SolvesTracker.currentSolved(currentUser, comments);
         var summary = Summary.summary(currentUser, comments);
-        var issue = Issue.fromString(pr.title());
+        var issue = Issue.fromStringRelaxed(pr.title());
         var commitMessageBuilder = issue.map(CommitMessage::title).orElseGet(() -> CommitMessage.title(pr.title()));
         if (issue.isPresent()) {
             commitMessageBuilder.issues(additionalIssues);
         }
         commitMessageBuilder.contributors(additionalContributors)
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
@@ -80,19 +80,16 @@
                                    .map(matchResult -> matchResult.group(1))
                                    .map(identifier -> new Issue(identifier, null))
                                    .collect(Collectors.toList());
         }
         for (var issue : ret) {
-            if (issue.id().contains("-") && !issue.id().startsWith(allowedPrefix)) {
+            if (issue.project().isPresent() && !issue.project().get().equals(allowedPrefix)) {
                 throw new InvalidIssue(issue.id(), "This PR can only solve issues in the " + allowedPrefix + " project");
             }
         }
 
-        // Drop the validated project prefixes
-        return ret.stream()
-                  .map(issue -> issue.id().contains("-") ? new Issue(issue.id().split("-", 2)[1], issue.description()) : issue)
-                  .collect(Collectors.toList());
+        return ret;
     }
 
     IssueCommand(String name) {
         this.name = name;
     }
@@ -117,11 +114,11 @@
             return;
         }
 
         var currentSolved = SolvesTracker.currentSolved(pr.repository().forge().currentUser(), allComments)
                                          .stream()
-                                         .map(Issue::id)
+                                         .map(Issue::shortId)
                                          .collect(Collectors.toSet());
         try {
             if (args.startsWith("remove") || args.startsWith("delete")) {
                 var issueListStart = args.indexOf(' ');
                 if (issueListStart == -1) {
@@ -132,15 +129,15 @@
                     reply.println("This PR does not contain any additional solved issues that can be removed. To remove the primary solved issue, simply edit the title of this PR.");
                     return;
                 }
                 var issuesToRemove = parseIssueList(bot.issueProject() == null ? "" : bot.issueProject().name(), args.substring(issueListStart));
                 for (var issue : issuesToRemove) {
-                    if (currentSolved.contains(issue.id())) {
+                    if (currentSolved.contains(issue.shortId())) {
                         reply.println(SolvesTracker.removeSolvesMarker(issue));
-                        reply.println("Removing additional issue from " + name + " list: `" + issue.id() + "`.");
+                        reply.println("Removing additional issue from " + name + " list: `" + issue.shortId() + "`.");
                     } else {
-                        reply.print("The issue `" + issue.id() + "` was not found in the list of additional solved issues. The list currently contains these issues: ");
+                        reply.print("The issue `" + issue.shortId() + "` was not found in the list of additional solved issues. The list currently contains these issues: ");
                         var currentList = currentSolved.stream()
                                                        .map(id -> "`" + id + "`")
                                                        .collect(Collectors.joining(", "));
                         reply.println(currentList);
                     }
@@ -163,20 +160,20 @@
                 for (var issue : issues) {
                     try {
                         if (bot.issueProject() == null) {
                             if (issue.description() == null) {
                                 reply.print("This repository does not have an issue project configured - you will need to input the issue title manually ");
-                                reply.println("using the syntax `/" + name + " " + issue.id() + ": title of the issue`.");
+                                reply.println("using the syntax `/" + name + " " + issue.shortId() + ": title of the issue`.");
                                 return;
                             } else {
                                 validatedIssues.add(issue);
                                 continue;
                             }
                         }
-                        var validatedIssue = bot.issueProject().issue(issue.id());
+                        var validatedIssue = bot.issueProject().issue(issue.shortId());
                         if (validatedIssue.isEmpty()) {
-                            reply.println("The issue `" + issue.id() + "` was not found in the `" + bot.issueProject().name() + "` project - make sure you have entered it correctly.");
+                            reply.println("The issue `" + issue.shortId() + "` was not found in the `" + bot.issueProject().name() + "` project - make sure you have entered it correctly.");
                             continue;
                         }
                         if (validatedIssue.get().state() != org.openjdk.skara.issuetracker.Issue.State.OPEN) {
                             reply.println("The issue [" + validatedIssue.get().id() + "](" + validatedIssue.get().webUrl() + ") isn't open - make sure you have selected the correct issue.");
                             continue;
@@ -187,12 +184,12 @@
                             validatedIssues.add(new Issue(validatedIssue.get().id(), issue.description()));
                         }
 
                     } catch (RuntimeException e) {
                         if (issue.description() == null) {
-                            reply.print("Temporary failure when trying to look up issue `" + issue.id() + "` - you will need to input the issue title manually ");
-                            reply.println("using the syntax `/" + name + " " + issue.id() + ": title of the issue`.");
+                            reply.print("Temporary failure when trying to look up issue `" + issue.shortId() + "` - you will need to input the issue title manually ");
+                            reply.println("using the syntax `/" + name + " " + issue.shortId() + ": title of the issue`.");
                             return;
                         } else {
                             validatedIssues.add(issue);
                         }
                     }
@@ -200,33 +197,29 @@
                 if (validatedIssues.size() != issues.size()) {
                     reply.println("As there were validation problems, no additional issues will be added to the list of solved issues.");
                     return;
                 }
 
-                // Drop the validated project prefixes
-                var strippedValidatedIssues = validatedIssues.stream()
-                                                             .map(issue -> issue.id().contains("-") ? new Issue(issue.id().split("-", 2)[1], issue.description()) : issue)
-                                                             .collect(Collectors.toList());
-                var titleIssue = Issue.fromString(pr.title());
-                for (var issue : strippedValidatedIssues) {
+                var titleIssue = Issue.fromStringRelaxed(pr.title());
+                for (var issue : validatedIssues) {
                     if (titleIssue.isEmpty()) {
                         reply.print("The primary solved issue for a PR is set through the PR title. Since the current title does ");
                         reply.println("not contain an issue reference, it will now be updated.");
-                        pr.setTitle(issue.toString());
+                        pr.setTitle(issue.toShortString());
                         titleIssue = Optional.of(issue);
                         continue;
                     }
-                    if (titleIssue.get().id().equals(issue.id())) {
+                    if (titleIssue.get().shortId().equals(issue.shortId())) {
                         reply.println("This issue is referenced in the PR title - it will now be updated.");
-                        pr.setTitle(issue.toString());
+                        pr.setTitle(issue.toShortString());
                         continue;
                     }
                     reply.println(SolvesTracker.setSolvesMarker(issue));
-                    if (currentSolved.contains(issue.id())) {
-                        reply.println("Updating description of additional solved issue: `" + issue.toString() + "`.");
+                    if (currentSolved.contains(issue.shortId())) {
+                        reply.println("Updating description of additional solved issue: `" + issue.toShortString() + "`.");
                     } else {
-                        reply.println("Adding additional issue to " + name + " list: `" + issue.toString() + "`.");
+                        reply.println("Adding additional issue to " + name + " list: `" + issue.toShortString() + "`.");
                     }
                 }
             }
 
         } catch (InvalidIssue invalidIssue) {
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesTracker.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesTracker.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesTracker.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/SolvesTracker.java
@@ -35,15 +35,15 @@
     private final static String solvesMarker = "<!-- solves: '%s' '%s' -->";
     private final static Pattern markerPattern = Pattern.compile("<!-- solves: '(.*?)' '(.*?)' -->");
 
     static String setSolvesMarker(Issue issue) {
         var encodedDescription = Base64.getEncoder().encodeToString(issue.description().getBytes(StandardCharsets.UTF_8));
-        return String.format(solvesMarker, issue.id(), encodedDescription);
+        return String.format(solvesMarker, issue.shortId(), encodedDescription);
     }
 
     static String removeSolvesMarker(Issue issue) {
-        return String.format(solvesMarker, issue.id(), "");
+        return String.format(solvesMarker, issue.shortId(), "");
     }
 
     static List<Issue> currentSolved(HostUser botUser, List<Comment> comments) {
         var solvesActions = comments.stream()
                                     .filter(comment -> comment.author().equals(botUser))
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -972,19 +972,29 @@
 
             // The body should contain the updated issue title
             assertFalse(pr.body().contains("My first issue"));
             assertTrue(pr.body().contains("My second issue"));
 
+            // The PR title does not match the issue title
+            assertTrue(pr.body().contains("Title mismatch"));
+
+            // Correct it
+            pr.setTitle(issue2.id() + " - " + issue2.title());
+
+            // Check the status again - it should now match
+            TestBotRunner.runPeriodicItems(checkBot);
+            assertFalse(pr.body().contains("Title mismatch"));
+
             // Use an invalid issue key
             var issueKey = issue1.id().replace("TEST", "BADPROJECT");
             pr.setTitle(issueKey + ": This is a pull request");
 
             // Check the status again
             TestBotRunner.runPeriodicItems(checkBot);
             assertFalse(pr.body().contains("My first issue"));
             assertFalse(pr.body().contains("My second issue"));
-            assertTrue(pr.body().contains("Failed to retrieve"));
+            assertTrue(pr.body().contains("does not belong to the `TEST` project"));
 
             // Now drop the issue key
             issueKey = issue1.id().replace("TEST-", "");
             pr.setTitle(issueKey + ": This is a pull request");
 
diff a/cli/src/main/java/org/openjdk/skara/cli/GitInfo.java b/cli/src/main/java/org/openjdk/skara/cli/GitInfo.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitInfo.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitInfo.java
@@ -228,11 +228,11 @@
 
         if (showReview) {
             var decoration = useDecoration? "Review: " : "";
             var project = jbsProject(repo, hash);
             if (message.issues().size() == 1) {
-                var issueId = message.issues().get(0).id();
+                var issueId = message.issues().get(0).shortId();
                 var issueTracker = IssueTracker.from("jira", JBS);
                 var issue = issueTracker.project(project).issue(issueId);
                 if (issue.isPresent()) {
                     for (var link : issue.get().links()) {
                         if (link.title().isPresent() && link.uri().isPresent()) {
@@ -252,14 +252,14 @@
                 if (useDecoration) {
                     System.out.println("Issues:");
                 }
                 var decoration = useDecoration ? "- " : "";
                 for (var issue : issues) {
-                    System.out.println(decoration + uri + issue.id());
+                    System.out.println(decoration + uri + issue.shortId());
                 }
             } else if (issues.size() == 1) {
                 var decoration = useDecoration ? "Issue: " : "";
-                System.out.println(decoration + uri + issues.get(0).id());
+                System.out.println(decoration + uri + issues.get(0).shortId());
             }
         }
     }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageFormatters.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageFormatters.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageFormatters.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageFormatters.java
@@ -20,15 +20,15 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.vcs.openjdk;
 
+import org.openjdk.skara.vcs.Author;
+
 import java.util.*;
 import java.util.stream.Collectors;
 
-import org.openjdk.skara.vcs.Author;
-
 public class CommitMessageFormatters {
     public static class V0 implements CommitMessageFormatter {
         public List<String> format(CommitMessage message) {
             if (message.title() != null) {
                 throw new IllegalArgumentException("Can't format title, must use issues as title");
@@ -38,11 +38,11 @@
             }
 
             var lines = new ArrayList<String>();
 
             for (var issue : message.issues()) {
-                lines.add(issue.toString());
+                lines.add(issue.toShortString());
             }
             for (var summary : message.summaries()) {
                 lines.add("Summary: " + summary);
             }
             if (message.reviewers().size() > 0) {
@@ -69,11 +69,11 @@
 
             if (message.title() != null) {
                 lines.add(message.title());
             } else {
                 for (var issue : message.issues()) {
-                    lines.add(issue.toString());
+                    lines.add(issue.toShortString());
                 }
             }
 
             if (message.summaries().size() > 0) {
                 lines.add("");
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageParsers.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageParsers.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageParsers.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageParsers.java
@@ -20,17 +20,15 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.vcs.openjdk;
 
+import org.openjdk.skara.vcs.Author;
+
 import java.util.*;
+import java.util.regex.*;
 import java.util.stream.Collectors;
-import java.time.*;
-import java.util.regex.Pattern;
-import java.util.regex.Matcher;
-
-import org.openjdk.skara.vcs.*;
 
 import static org.openjdk.skara.vcs.openjdk.CommitMessageSyntax.*;
 
 public class CommitMessageParsers {
     private static Matcher matcher(Pattern p, List<String> lines, int index) {
@@ -105,11 +103,11 @@
             if (issues.size() == 0 && i < lines.size()) {
                 // the first line wasn't an issue, treat is a generic title
                 title = lines.get(0);
                 i++;
             } else {
-                title = issues.stream().map(Issue::toString).collect(Collectors.joining("\n"));
+                title = issues.stream().map(Issue::toShortString).collect(Collectors.joining("\n"));
             }
 
             var firstDelimiter = true;
             var summaries = new ArrayList<String>();
             var coAuthors = new ArrayList<Author>();
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/Issue.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/Issue.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/Issue.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/Issue.java
@@ -22,22 +22,40 @@
  */
 package org.openjdk.skara.vcs.openjdk;
 
 import java.util.*;
 import java.util.regex.Pattern;
-import java.util.stream.Collectors;
 
 public class Issue {
+    private final String project;
     private final String id;
     private final String description;
 
+    private final static Pattern relaxedIssueParsePattern = Pattern.compile("^((?:[A-Z][A-Z0-9]+-)?[0-9]+)[^\\p{Alnum}]+(\\S.*)$");
+
     public Issue(String id, String description) {
-        this.id = id;
+        if (id.contains("-")) {
+            var idSplit = id.split("-", 2);
+            project = idSplit[0];
+            this.id = idSplit[1];
+        } else {
+            project = null;
+            this.id = id;
+        }
+
         this.description = description;
     }
 
+    public Optional<String> project() {
+        return Optional.ofNullable(project);
+    }
+
     public String id() {
+        return (project != null ? project + "-" : "") + id;
+    }
+
+    public String shortId() {
         return id;
     }
 
     public String description() {
         return description;
@@ -51,26 +69,38 @@
             return Optional.of(new Issue(id, desc));
         }
         return Optional.empty();
     }
 
+    public static Optional<Issue> fromStringRelaxed(String s) {
+        var relaxedIssueParseMatcher = relaxedIssueParsePattern.matcher(s.trim());
+        if (relaxedIssueParseMatcher.matches()) {
+            return Optional.of(new Issue(relaxedIssueParseMatcher.group(1), relaxedIssueParseMatcher.group(2)));
+        }
+
+        return Optional.empty();
+    }
+
     @Override
     public String toString() {
-        return id + ": " + description;
+        return id() + ": " + description;
     }
 
-    @Override
-    public int hashCode() {
-        return Objects.hash(id, description);
+    public String toShortString() {
+        return id + ": " + description;
     }
 
     @Override
     public boolean equals(Object o) {
-        if (!(o instanceof Issue)) {
-            return false;
-        }
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        Issue issue = (Issue) o;
+        return Objects.equals(project, issue.project) &&
+                id.equals(issue.id) &&
+                description.equals(issue.description);
+    }
 
-        var other = (Issue) o;
-        return Objects.equals(id, other.id) &&
-               Objects.equals(description, other.description);
+    @Override
+    public int hashCode() {
+        return Objects.hash(project, id, description);
     }
 }
