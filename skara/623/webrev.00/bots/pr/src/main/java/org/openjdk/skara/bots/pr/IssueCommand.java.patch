diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
@@ -80,19 +80,16 @@
                                    .map(matchResult -> matchResult.group(1))
                                    .map(identifier -> new Issue(identifier, null))
                                    .collect(Collectors.toList());
         }
         for (var issue : ret) {
-            if (issue.id().contains("-") && !issue.id().startsWith(allowedPrefix)) {
+            if (issue.project().isPresent() && !issue.project().get().equals(allowedPrefix)) {
                 throw new InvalidIssue(issue.id(), "This PR can only solve issues in the " + allowedPrefix + " project");
             }
         }
 
-        // Drop the validated project prefixes
-        return ret.stream()
-                  .map(issue -> issue.id().contains("-") ? new Issue(issue.id().split("-", 2)[1], issue.description()) : issue)
-                  .collect(Collectors.toList());
+        return ret;
     }
 
     IssueCommand(String name) {
         this.name = name;
     }
@@ -117,11 +114,11 @@
             return;
         }
 
         var currentSolved = SolvesTracker.currentSolved(pr.repository().forge().currentUser(), allComments)
                                          .stream()
-                                         .map(Issue::id)
+                                         .map(Issue::shortId)
                                          .collect(Collectors.toSet());
         try {
             if (args.startsWith("remove") || args.startsWith("delete")) {
                 var issueListStart = args.indexOf(' ');
                 if (issueListStart == -1) {
@@ -132,15 +129,15 @@
                     reply.println("This PR does not contain any additional solved issues that can be removed. To remove the primary solved issue, simply edit the title of this PR.");
                     return;
                 }
                 var issuesToRemove = parseIssueList(bot.issueProject() == null ? "" : bot.issueProject().name(), args.substring(issueListStart));
                 for (var issue : issuesToRemove) {
-                    if (currentSolved.contains(issue.id())) {
+                    if (currentSolved.contains(issue.shortId())) {
                         reply.println(SolvesTracker.removeSolvesMarker(issue));
-                        reply.println("Removing additional issue from " + name + " list: `" + issue.id() + "`.");
+                        reply.println("Removing additional issue from " + name + " list: `" + issue.shortId() + "`.");
                     } else {
-                        reply.print("The issue `" + issue.id() + "` was not found in the list of additional solved issues. The list currently contains these issues: ");
+                        reply.print("The issue `" + issue.shortId() + "` was not found in the list of additional solved issues. The list currently contains these issues: ");
                         var currentList = currentSolved.stream()
                                                        .map(id -> "`" + id + "`")
                                                        .collect(Collectors.joining(", "));
                         reply.println(currentList);
                     }
@@ -163,20 +160,20 @@
                 for (var issue : issues) {
                     try {
                         if (bot.issueProject() == null) {
                             if (issue.description() == null) {
                                 reply.print("This repository does not have an issue project configured - you will need to input the issue title manually ");
-                                reply.println("using the syntax `/" + name + " " + issue.id() + ": title of the issue`.");
+                                reply.println("using the syntax `/" + name + " " + issue.shortId() + ": title of the issue`.");
                                 return;
                             } else {
                                 validatedIssues.add(issue);
                                 continue;
                             }
                         }
-                        var validatedIssue = bot.issueProject().issue(issue.id());
+                        var validatedIssue = bot.issueProject().issue(issue.shortId());
                         if (validatedIssue.isEmpty()) {
-                            reply.println("The issue `" + issue.id() + "` was not found in the `" + bot.issueProject().name() + "` project - make sure you have entered it correctly.");
+                            reply.println("The issue `" + issue.shortId() + "` was not found in the `" + bot.issueProject().name() + "` project - make sure you have entered it correctly.");
                             continue;
                         }
                         if (validatedIssue.get().state() != org.openjdk.skara.issuetracker.Issue.State.OPEN) {
                             reply.println("The issue [" + validatedIssue.get().id() + "](" + validatedIssue.get().webUrl() + ") isn't open - make sure you have selected the correct issue.");
                             continue;
@@ -187,12 +184,12 @@
                             validatedIssues.add(new Issue(validatedIssue.get().id(), issue.description()));
                         }
 
                     } catch (RuntimeException e) {
                         if (issue.description() == null) {
-                            reply.print("Temporary failure when trying to look up issue `" + issue.id() + "` - you will need to input the issue title manually ");
-                            reply.println("using the syntax `/" + name + " " + issue.id() + ": title of the issue`.");
+                            reply.print("Temporary failure when trying to look up issue `" + issue.shortId() + "` - you will need to input the issue title manually ");
+                            reply.println("using the syntax `/" + name + " " + issue.shortId() + ": title of the issue`.");
                             return;
                         } else {
                             validatedIssues.add(issue);
                         }
                     }
@@ -200,33 +197,29 @@
                 if (validatedIssues.size() != issues.size()) {
                     reply.println("As there were validation problems, no additional issues will be added to the list of solved issues.");
                     return;
                 }
 
-                // Drop the validated project prefixes
-                var strippedValidatedIssues = validatedIssues.stream()
-                                                             .map(issue -> issue.id().contains("-") ? new Issue(issue.id().split("-", 2)[1], issue.description()) : issue)
-                                                             .collect(Collectors.toList());
-                var titleIssue = Issue.fromString(pr.title());
-                for (var issue : strippedValidatedIssues) {
+                var titleIssue = Issue.fromStringRelaxed(pr.title());
+                for (var issue : validatedIssues) {
                     if (titleIssue.isEmpty()) {
                         reply.print("The primary solved issue for a PR is set through the PR title. Since the current title does ");
                         reply.println("not contain an issue reference, it will now be updated.");
-                        pr.setTitle(issue.toString());
+                        pr.setTitle(issue.toShortString());
                         titleIssue = Optional.of(issue);
                         continue;
                     }
-                    if (titleIssue.get().id().equals(issue.id())) {
+                    if (titleIssue.get().shortId().equals(issue.shortId())) {
                         reply.println("This issue is referenced in the PR title - it will now be updated.");
-                        pr.setTitle(issue.toString());
+                        pr.setTitle(issue.toShortString());
                         continue;
                     }
                     reply.println(SolvesTracker.setSolvesMarker(issue));
-                    if (currentSolved.contains(issue.id())) {
-                        reply.println("Updating description of additional solved issue: `" + issue.toString() + "`.");
+                    if (currentSolved.contains(issue.shortId())) {
+                        reply.println("Updating description of additional solved issue: `" + issue.toShortString() + "`.");
                     } else {
-                        reply.println("Adding additional issue to " + name + " list: `" + issue.toString() + "`.");
+                        reply.println("Adding additional issue to " + name + " list: `" + issue.toShortString() + "`.");
                     }
                 }
             }
 
         } catch (InvalidIssue invalidIssue) {
