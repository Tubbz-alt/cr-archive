diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubApplication.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubApplication.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubApplication.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubApplication.java
@@ -230,6 +230,10 @@
             throw new UncheckedIOException(e);
         } catch (InterruptedException e) {
             throw new RuntimeException(e);
         }
     }
+
+    String authId() {
+        return id;
+    }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
@@ -55,20 +55,20 @@
         var baseApi = URIBuilder.base(uri)
                 .appendSubDomain("api")
                 .setPath("/")
                 .build();
 
-        request = new RestRequest(baseApi, () -> Arrays.asList(
+        request = new RestRequest(baseApi, application.authId(), () -> Arrays.asList(
                 "Authorization", "token " + getInstallationToken().orElseThrow(),
                 "Accept", "application/vnd.github.machine-man-preview+json",
                 "Accept", "application/vnd.github.antiope-preview+json"));
 
         var graphQLAPI = URIBuilder.base(uri)
                 .appendSubDomain("api")
                 .setPath("/graphql")
                 .build();
-        graphQL = new RestRequest(graphQLAPI, () -> Arrays.asList(
+        graphQL = new RestRequest(graphQLAPI, application.authId(), () -> Arrays.asList(
                 "Authorization", "bearer " + getInstallationToken().orElseThrow(),
                 "Accept", "application/vnd.github.machine-man-preview+json",
                 "Accept", "application/vnd.github.antiope-preview+json",
                 "Accept", "application/vnd.github.shadow-cat-preview+json",
                 "Accept", "application/vnd.github.comfort-fade-preview+json"
@@ -92,18 +92,18 @@
         var baseApi = URIBuilder.base(uri)
                                 .appendSubDomain("api")
                                 .setPath("/")
                                 .build();
 
-        request = new RestRequest(baseApi, () -> Arrays.asList(
+        request = new RestRequest(baseApi, pat.username(), () -> Arrays.asList(
                 "Authorization", "token " + getInstallationToken().orElseThrow()));
 
         var graphQLAPI = URIBuilder.base(uri)
                 .appendSubDomain("api")
                 .setPath("/graphql")
                 .build();
-        graphQL = new RestRequest(graphQLAPI, () -> Arrays.asList(
+        graphQL = new RestRequest(graphQLAPI, pat.username(), () -> Arrays.asList(
                 "Authorization", "bearer " + getInstallationToken().orElseThrow(),
                 "Accept", "application/vnd.github.machine-man-preview+json",
                 "Accept", "application/vnd.github.antiope-preview+json",
                 "Accept", "application/vnd.github.shadow-cat-preview+json",
                 "Accept", "application/vnd.github.comfort-fade-preview+json"
@@ -157,10 +157,22 @@
         }
 
         return Optional.empty();
     }
 
+    Optional<String> authId() {
+        if (application != null) {
+            return Optional.of(application.authId());
+        }
+
+        if (pat != null) {
+            return Optional.of(pat.username());
+        }
+
+        return Optional.empty();
+    }
+
     private String getFullName(String userName) {
         var details = user(userName);
         return details.get().fullName();
     }
 
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
@@ -49,11 +49,11 @@
         var apiBase = URIBuilder
                 .base(gitHubHost.getURI())
                 .appendSubDomain("api")
                 .setPath("/repos/" + repository + "/")
                 .build();
-        request = new RestRequest(apiBase, () -> {
+        request = new RestRequest(apiBase, gitHubHost.authId().orElse(null), () -> {
             var headers = new ArrayList<>(List.of(
                 "Accept", "application/vnd.github.machine-man-preview+json",
                 "Accept", "application/vnd.github.antiope-preview+json",
                 "Accept", "application/vnd.github.shadow-cat-preview+json",
                 "Accept", "application/vnd.github.comfort-fade-preview+json"));
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
@@ -44,11 +44,11 @@
         this.pat = pat;
 
         var baseApi = URIBuilder.base(uri)
                                 .setPath("/api/v4/")
                                 .build();
-        request = new RestRequest(baseApi, () -> Arrays.asList("Private-Token", pat.password()));
+        request = new RestRequest(baseApi, pat.username(), () -> Arrays.asList("Private-Token", pat.password()));
     }
 
     GitLabHost(URI uri) {
         this.uri = uri;
         this.pat = null;
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
@@ -51,11 +51,11 @@
         var baseApi = URIBuilder.base(gitLabHost.getUri())
                 .setPath("/api/v4/projects/" + id + "/")
                 .build();
 
         request = gitLabHost.getPat()
-                            .map(pat -> new RestRequest(baseApi, () -> Arrays.asList("Private-Token", pat.password())))
+                            .map(pat -> new RestRequest(baseApi, pat.username(), () -> Arrays.asList("Private-Token", pat.password())))
                             .orElseGet(() -> new RestRequest(baseApi));
 
         var urlPattern = URIBuilder.base(gitLabHost.getUri())
                                    .setPath("/" + projectName + "/merge_requests/").build();
         mergeRequestPattern = Pattern.compile(urlPattern.toString() + "(\\d+)");
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraHost.java
@@ -52,21 +52,21 @@
         this.visibilityRole = null;
         this.securityLevel = null;
         var baseApi = URIBuilder.base(uri)
                                 .setPath("/rest/api/2/")
                                 .build();
-        request = new RestRequest(baseApi, () -> Arrays.asList("Cookie", jiraVault.getCookie()));
+        request = new RestRequest(baseApi, jiraVault.authId(), () -> Arrays.asList("Cookie", jiraVault.getCookie()));
     }
 
     JiraHost(URI uri, JiraVault jiraVault, String visibilityRole, String securityLevel) {
         this.uri = uri;
         this.visibilityRole = visibilityRole;
         this.securityLevel = securityLevel;
         var baseApi = URIBuilder.base(uri)
                                 .setPath("/rest/api/2/")
                                 .build();
-        request = new RestRequest(baseApi, () -> Arrays.asList("Cookie", jiraVault.getCookie()));
+        request = new RestRequest(baseApi, jiraVault.authId(), () -> Arrays.asList("Cookie", jiraVault.getCookie()));
     }
 
     URI getUri() {
         return uri;
     }
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraVault.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraVault.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraVault.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraVault.java
@@ -23,23 +23,37 @@
 package org.openjdk.skara.issuetracker.jira;
 
 import org.openjdk.skara.network.RestRequest;
 
 import java.net.URI;
+import java.nio.charset.StandardCharsets;
+import java.security.*;
 import java.time.*;
-import java.util.Arrays;
+import java.util.*;
 import java.util.logging.Logger;
 
 class JiraVault {
     private final RestRequest request;
+    private final String authId;
     private final Logger log = Logger.getLogger("org.openjdk.skara.issuetracker.jira");
 
     private String cookie;
     private Instant expires;
 
+    private String checksum(String body) {
+        try {
+            var digest = MessageDigest.getInstance("SHA-256");
+            digest.update(body.getBytes(StandardCharsets.UTF_8));
+            return Base64.getUrlEncoder().encodeToString(digest.digest());
+        } catch (NoSuchAlgorithmException e) {
+            throw new RuntimeException("Cannot find SHA-256");
+        }
+    }
+
     JiraVault(URI vaultUri, String vaultToken) {
-        request = new RestRequest(vaultUri, () -> Arrays.asList(
+        authId = checksum(vaultToken);
+        request = new RestRequest(vaultUri, authId, () -> Arrays.asList(
                 "X-Vault-Token", vaultToken
         ));
     }
 
     String getCookie() {
@@ -49,6 +63,10 @@
             expires = Instant.now().plus(Duration.ofSeconds(result.get("lease_duration").asInt()).dividedBy(2));
             log.info("Renewed Jira token (" + cookie + ") - expires " + expires);
         }
         return cookie;
     }
+
+    String authId() {
+        return authId;
+    }
 }
diff a/network/src/main/java/org/openjdk/skara/network/RestRequest.java b/network/src/main/java/org/openjdk/skara/network/RestRequest.java
--- a/network/src/main/java/org/openjdk/skara/network/RestRequest.java
+++ b/network/src/main/java/org/openjdk/skara/network/RestRequest.java
@@ -32,10 +32,12 @@
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 public class RestRequest {
+    private RestRequestCache cache = RestRequestCache.INSTANCE;
+
     private enum RequestType {
         GET,
         POST,
         PUT,
         PATCH,
@@ -161,30 +163,33 @@
             return RestRequest.this.executeUnparsed(this);
         }
     }
 
     private final URI apiBase;
+    private final String authId;
     private final AuthenticationGenerator authGen;
     private final Logger log = Logger.getLogger("org.openjdk.skara.host.network");
 
-    public RestRequest(URI apiBase, AuthenticationGenerator authGen) {
+    public RestRequest(URI apiBase, String authId, AuthenticationGenerator authGen) {
         this.apiBase = apiBase;
+        this.authId = authId;
         this.authGen = authGen;
     }
 
     public RestRequest(URI apiBase) {
         this.apiBase = apiBase;
+        this.authId = null;
         this.authGen = null;
     }
 
     /**
      * Creates a new request restricted to the given endpoint.
      * @param endpoint
      * @return
      */
     public RestRequest restrict(String endpoint) {
-        return new RestRequest(URIBuilder.base(apiBase).appendPath(endpoint).build(), authGen);
+        return new RestRequest(URIBuilder.base(apiBase).appendPath(endpoint).build(), authId, authGen);
     }
 
     private URIBuilder getEndpointURI(String endpoint) {
         return URIBuilder.base(apiBase)
                          .appendPath(endpoint);
@@ -218,20 +223,20 @@
 
     void setRetryBackoffStep(Duration duration) {
         retryBackoffStep = duration;
     }
 
-    private HttpResponse<String> sendRequest(HttpRequest request) throws IOException {
+    private HttpResponse<String> sendRequest(HttpRequest.Builder request) throws IOException {
         HttpResponse<String> response;
 
         var retryCount = 0;
         while (true) {
             try {
-                var client = HttpClient.newBuilder()
-                                       .connectTimeout(Duration.ofSeconds(10))
-                                       .build();
-                response = client.send(request, HttpResponse.BodyHandlers.ofString());
+                if (authGen != null) {
+                    request.headers(authGen.getAuthHeaders().toArray(new String[0]));
+                }
+                response = cache.send(authId, request);
                 break;
             } catch (InterruptedException | IOException e) {
                 if (retryCount < 5) {
                     try {
                         Thread.sleep(retryCount * retryBackoffStep.toMillis());
@@ -273,11 +278,11 @@
         } else {
             return Optional.empty();
         }
     }
 
-    private HttpRequest createRequest(RequestType requestType, String endpoint, JSONValue body,
+    private HttpRequest.Builder createRequest(RequestType requestType, String endpoint, JSONValue body,
                                       List<QueryBuilder.Param> params, Map<String, String> headers) {
         var uriBuilder = URIBuilder.base(apiBase);
         if (endpoint != null && !endpoint.isEmpty()) {
             uriBuilder = uriBuilder.appendPath(endpoint);
         }
@@ -288,18 +293,16 @@
 
         var requestBuilder = HttpRequest.newBuilder()
                                         .uri(uri)
                                         .timeout(Duration.ofSeconds(30))
                                         .header("Content-type", "application/json");
-        if (authGen != null) {
-            requestBuilder.headers(authGen.getAuthHeaders().toArray(new String[0]));
-        }
+
         if (body != null) {
             requestBuilder.method(requestType.name(), HttpRequest.BodyPublishers.ofString(body.toString()));
         }
         headers.forEach(requestBuilder::header);
-        return requestBuilder.build();
+        return requestBuilder;
     }
 
     private final Pattern linkPattern = Pattern.compile("<(.*?)>; rel=\"(.*?)\"");
 
     private Map<String, String> parseLink(String link) {
@@ -327,11 +330,11 @@
         ret.add(parsedResponse);
 
         var links = parseLink(link.get());
         while (links.containsKey("next") && ret.size() < queryBuilder.maxPages) {
             var uri = URI.create(links.get("next"));
-            request = getHttpRequestBuilder(uri).GET().build();
+            request = getHttpRequestBuilder(uri).GET();
             response = sendRequest(request);
 
             // If an error occurs during paginated parsing, we have to discard all previous data
             errorTransform = transformBadResponse(response, queryBuilder);
             if (errorTransform.isPresent()) {
diff a/network/src/main/java/org/openjdk/skara/network/RestRequestCache.java b/network/src/main/java/org/openjdk/skara/network/RestRequestCache.java
--- /dev/null
+++ b/network/src/main/java/org/openjdk/skara/network/RestRequestCache.java
@@ -0,0 +1,91 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.network;
+
+import java.io.IOException;
+import java.net.http.*;
+import java.time.Duration;
+import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.logging.Logger;
+
+enum RestRequestCache {
+    INSTANCE;
+
+    private static class RequestContext {
+        private final String authId;
+        private final HttpRequest unauthenticatedRequest;
+
+        private RequestContext(String authId, HttpRequest unauthenticatedRequest) {
+            this.authId = authId;
+            this.unauthenticatedRequest = unauthenticatedRequest;
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) {
+                return true;
+            }
+            if (o == null || getClass() != o.getClass()) {
+                return false;
+            }
+            RequestContext that = (RequestContext) o;
+            return Objects.equals(authId, that.authId) && unauthenticatedRequest.equals(that.unauthenticatedRequest);
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(authId, unauthenticatedRequest);
+        }
+    }
+
+    private final Map<RequestContext, HttpResponse<String>> cachedResponses = new ConcurrentHashMap<>();
+    private final HttpClient client = HttpClient.newBuilder().connectTimeout(Duration.ofSeconds(10)).build();
+    private final Logger log = Logger.getLogger("org.openjdk.skara.network");
+
+    HttpResponse<String> send(String authId, HttpRequest.Builder requestBuilder) throws IOException, InterruptedException {
+        var unauthenticatedRequest = requestBuilder.build();
+        var requestContext = new RequestContext(authId, unauthenticatedRequest);
+        if (unauthenticatedRequest.method().equals("GET")) {
+            var cached = cachedResponses.get(requestContext);
+            if (cached != null) {
+                var tag = cached.headers().firstValue("ETag");
+                tag.ifPresent(value -> requestBuilder.header("If-None-Match", value));
+            }
+            var finalRequest = requestBuilder.build();
+            var response = client.send(finalRequest, HttpResponse.BodyHandlers.ofString());
+            if (response.statusCode() == 304) {
+                log.finer("Using cached response for " + finalRequest + " (" + authId + ")");
+                return cached;
+            } else {
+                cachedResponses.put(requestContext, response);
+                log.finer("Updating response cache for " + finalRequest + " (" + authId + ")");
+                return response;
+            }
+        } else {
+            var finalRequest = requestBuilder.build();
+            log.finer("Not using response cache for " + finalRequest + " (" + authId + ")");
+            return client.send(finalRequest, HttpResponse.BodyHandlers.ofString());
+        }
+    }
+}
diff a/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java b/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java
--- a/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java
+++ b/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java
@@ -28,10 +28,11 @@
 import org.junit.jupiter.api.Test;
 
 import java.io.*;
 import java.net.*;
 import java.nio.charset.StandardCharsets;
+import java.security.*;
 import java.time.Duration;
 import java.util.*;
 
 import static org.junit.jupiter.api.Assertions.*;
 
@@ -40,18 +41,43 @@
     private final List<JSONObject> requests;
     private final String response;
     private int responseCode;
 
     private int truncatedResponseCount = 0;
+    private boolean usedCache = false;
 
     class Handler implements HttpHandler {
+        private String checksum(String body) {
+            try {
+                var digest = MessageDigest.getInstance("SHA-256");
+                digest.update(body.getBytes(StandardCharsets.UTF_8));
+                return Base64.getUrlEncoder().encodeToString(digest.digest());
+            } catch (NoSuchAlgorithmException e) {
+                throw new RuntimeException("Cannot find SHA-256");
+            }
+        }
 
         @Override
         public void handle(HttpExchange exchange) throws IOException {
             var input = new String(exchange.getRequestBody().readAllBytes(), StandardCharsets.UTF_8);
             requests.add(JSON.parse(input).asObject());
 
+            usedCache = false;
+            if (truncatedResponseCount == 0) {
+                var responseHeaders = exchange.getResponseHeaders();
+                var etag = checksum(response);
+                if (exchange.getRequestHeaders().containsKey("If-None-Match")) {
+                    var requestedEtag = exchange.getRequestHeaders().getFirst("If-None-Match");
+                    if (requestedEtag.equals(etag)) {
+                        exchange.sendResponseHeaders(304, -1);
+                        usedCache = true;
+                        return;
+                    }
+                }
+                responseHeaders.add("ETag", etag);
+            }
+
             exchange.sendResponseHeaders(responseCode, response.length());
             OutputStream outputStream = exchange.getResponseBody();
             if (truncatedResponseCount > 0) {
                 truncatedResponseCount--;
             } else {
@@ -87,10 +113,14 @@
 
     void setTruncatedResponseCount(int count) {
         truncatedResponseCount = count;
     }
 
+    boolean usedCached() {
+        return usedCache;
+    }
+
     @Override
     public void close() {
         server.stop(0);
     }
 }
@@ -151,6 +181,42 @@
             var request = new RestRequest(receiver.getEndpoint());
             var response = request.post("/test").executeUnparsed();
             assertEquals("{{bad", response);
         }
     }
+
+    @Test
+    void cached() throws IOException {
+        try (var receiver = new RestReceiver()) {
+            var request = new RestRequest(receiver.getEndpoint());
+            request.get("/test").execute();
+            assertFalse(receiver.usedCached());
+            request.get("/test").execute();
+            assertTrue(receiver.usedCached());
+            var anotherRequest = new RestRequest(receiver.getEndpoint());
+            anotherRequest.get("/test").execute();
+            assertTrue(receiver.usedCached());
+        }
+    }
+
+    @Test
+    void cachedSeparateAuth() throws IOException {
+        try (var receiver = new RestReceiver()) {
+            var plainRequest = new RestRequest(receiver.getEndpoint());
+            var authRequest1 = new RestRequest(receiver.getEndpoint(), "id1", () -> List.of("user", "1"));
+            var authRequest2 = new RestRequest(receiver.getEndpoint(), "id2", () -> List.of("user", "2"));
+
+            plainRequest.get("/test").execute();
+            assertFalse(receiver.usedCached());
+            authRequest1.get("/test").execute();
+            assertFalse(receiver.usedCached());
+
+            plainRequest.get("/test").execute();
+            assertTrue(receiver.usedCached());
+
+            authRequest2.get("/test").execute();
+            assertFalse(receiver.usedCached());
+            authRequest2.get("/test").execute();
+            assertTrue(receiver.usedCached());
+        }
+    }
 }
