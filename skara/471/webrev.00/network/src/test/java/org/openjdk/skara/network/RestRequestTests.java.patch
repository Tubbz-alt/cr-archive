diff a/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java b/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java
--- a/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java
+++ b/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java
@@ -28,10 +28,11 @@
 import org.junit.jupiter.api.Test;
 
 import java.io.*;
 import java.net.*;
 import java.nio.charset.StandardCharsets;
+import java.security.*;
 import java.time.Duration;
 import java.util.*;
 
 import static org.junit.jupiter.api.Assertions.*;
 
@@ -40,18 +41,43 @@
     private final List<JSONObject> requests;
     private final String response;
     private int responseCode;
 
     private int truncatedResponseCount = 0;
+    private boolean usedCache = false;
 
     class Handler implements HttpHandler {
+        private String checksum(String body) {
+            try {
+                var digest = MessageDigest.getInstance("SHA-256");
+                digest.update(body.getBytes(StandardCharsets.UTF_8));
+                return Base64.getUrlEncoder().encodeToString(digest.digest());
+            } catch (NoSuchAlgorithmException e) {
+                throw new RuntimeException("Cannot find SHA-256");
+            }
+        }
 
         @Override
         public void handle(HttpExchange exchange) throws IOException {
             var input = new String(exchange.getRequestBody().readAllBytes(), StandardCharsets.UTF_8);
             requests.add(JSON.parse(input).asObject());
 
+            usedCache = false;
+            if (truncatedResponseCount == 0) {
+                var responseHeaders = exchange.getResponseHeaders();
+                var etag = checksum(response);
+                if (exchange.getRequestHeaders().containsKey("If-None-Match")) {
+                    var requestedEtag = exchange.getRequestHeaders().getFirst("If-None-Match");
+                    if (requestedEtag.equals(etag)) {
+                        exchange.sendResponseHeaders(304, -1);
+                        usedCache = true;
+                        return;
+                    }
+                }
+                responseHeaders.add("ETag", etag);
+            }
+
             exchange.sendResponseHeaders(responseCode, response.length());
             OutputStream outputStream = exchange.getResponseBody();
             if (truncatedResponseCount > 0) {
                 truncatedResponseCount--;
             } else {
@@ -87,10 +113,14 @@
 
     void setTruncatedResponseCount(int count) {
         truncatedResponseCount = count;
     }
 
+    boolean usedCached() {
+        return usedCache;
+    }
+
     @Override
     public void close() {
         server.stop(0);
     }
 }
@@ -151,6 +181,42 @@
             var request = new RestRequest(receiver.getEndpoint());
             var response = request.post("/test").executeUnparsed();
             assertEquals("{{bad", response);
         }
     }
+
+    @Test
+    void cached() throws IOException {
+        try (var receiver = new RestReceiver()) {
+            var request = new RestRequest(receiver.getEndpoint());
+            request.get("/test").execute();
+            assertFalse(receiver.usedCached());
+            request.get("/test").execute();
+            assertTrue(receiver.usedCached());
+            var anotherRequest = new RestRequest(receiver.getEndpoint());
+            anotherRequest.get("/test").execute();
+            assertTrue(receiver.usedCached());
+        }
+    }
+
+    @Test
+    void cachedSeparateAuth() throws IOException {
+        try (var receiver = new RestReceiver()) {
+            var plainRequest = new RestRequest(receiver.getEndpoint());
+            var authRequest1 = new RestRequest(receiver.getEndpoint(), "id1", () -> List.of("user", "1"));
+            var authRequest2 = new RestRequest(receiver.getEndpoint(), "id2", () -> List.of("user", "2"));
+
+            plainRequest.get("/test").execute();
+            assertFalse(receiver.usedCached());
+            authRequest1.get("/test").execute();
+            assertFalse(receiver.usedCached());
+
+            plainRequest.get("/test").execute();
+            assertTrue(receiver.usedCached());
+
+            authRequest2.get("/test").execute();
+            assertFalse(receiver.usedCached());
+            authRequest2.get("/test").execute();
+            assertTrue(receiver.usedCached());
+        }
+    }
 }
