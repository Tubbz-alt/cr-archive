diff a/network/src/main/java/org/openjdk/skara/network/RestRequest.java b/network/src/main/java/org/openjdk/skara/network/RestRequest.java
--- a/network/src/main/java/org/openjdk/skara/network/RestRequest.java
+++ b/network/src/main/java/org/openjdk/skara/network/RestRequest.java
@@ -32,10 +32,12 @@
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
 public class RestRequest {
+    private RestRequestCache cache = RestRequestCache.INSTANCE;
+
     private enum RequestType {
         GET,
         POST,
         PUT,
         PATCH,
@@ -161,30 +163,33 @@
             return RestRequest.this.executeUnparsed(this);
         }
     }
 
     private final URI apiBase;
+    private final String authId;
     private final AuthenticationGenerator authGen;
     private final Logger log = Logger.getLogger("org.openjdk.skara.host.network");
 
-    public RestRequest(URI apiBase, AuthenticationGenerator authGen) {
+    public RestRequest(URI apiBase, String authId, AuthenticationGenerator authGen) {
         this.apiBase = apiBase;
+        this.authId = authId;
         this.authGen = authGen;
     }
 
     public RestRequest(URI apiBase) {
         this.apiBase = apiBase;
+        this.authId = null;
         this.authGen = null;
     }
 
     /**
      * Creates a new request restricted to the given endpoint.
      * @param endpoint
      * @return
      */
     public RestRequest restrict(String endpoint) {
-        return new RestRequest(URIBuilder.base(apiBase).appendPath(endpoint).build(), authGen);
+        return new RestRequest(URIBuilder.base(apiBase).appendPath(endpoint).build(), authId, authGen);
     }
 
     private URIBuilder getEndpointURI(String endpoint) {
         return URIBuilder.base(apiBase)
                          .appendPath(endpoint);
@@ -218,20 +223,20 @@
 
     void setRetryBackoffStep(Duration duration) {
         retryBackoffStep = duration;
     }
 
-    private HttpResponse<String> sendRequest(HttpRequest request) throws IOException {
+    private HttpResponse<String> sendRequest(HttpRequest.Builder request) throws IOException {
         HttpResponse<String> response;
 
         var retryCount = 0;
         while (true) {
             try {
-                var client = HttpClient.newBuilder()
-                                       .connectTimeout(Duration.ofSeconds(10))
-                                       .build();
-                response = client.send(request, HttpResponse.BodyHandlers.ofString());
+                if (authGen != null) {
+                    request.headers(authGen.getAuthHeaders().toArray(new String[0]));
+                }
+                response = cache.send(authId, request);
                 break;
             } catch (InterruptedException | IOException e) {
                 if (retryCount < 5) {
                     try {
                         Thread.sleep(retryCount * retryBackoffStep.toMillis());
@@ -273,11 +278,11 @@
         } else {
             return Optional.empty();
         }
     }
 
-    private HttpRequest createRequest(RequestType requestType, String endpoint, JSONValue body,
+    private HttpRequest.Builder createRequest(RequestType requestType, String endpoint, JSONValue body,
                                       List<QueryBuilder.Param> params, Map<String, String> headers) {
         var uriBuilder = URIBuilder.base(apiBase);
         if (endpoint != null && !endpoint.isEmpty()) {
             uriBuilder = uriBuilder.appendPath(endpoint);
         }
@@ -288,18 +293,16 @@
 
         var requestBuilder = HttpRequest.newBuilder()
                                         .uri(uri)
                                         .timeout(Duration.ofSeconds(30))
                                         .header("Content-type", "application/json");
-        if (authGen != null) {
-            requestBuilder.headers(authGen.getAuthHeaders().toArray(new String[0]));
-        }
+
         if (body != null) {
             requestBuilder.method(requestType.name(), HttpRequest.BodyPublishers.ofString(body.toString()));
         }
         headers.forEach(requestBuilder::header);
-        return requestBuilder.build();
+        return requestBuilder;
     }
 
     private final Pattern linkPattern = Pattern.compile("<(.*?)>; rel=\"(.*?)\"");
 
     private Map<String, String> parseLink(String link) {
@@ -327,11 +330,11 @@
         ret.add(parsedResponse);
 
         var links = parseLink(link.get());
         while (links.containsKey("next") && ret.size() < queryBuilder.maxPages) {
             var uri = URI.create(links.get("next"));
-            request = getHttpRequestBuilder(uri).GET().build();
+            request = getHttpRequestBuilder(uri).GET();
             response = sendRequest(request);
 
             // If an error occurs during paginated parsing, we have to discard all previous data
             errorTransform = transformBadResponse(response, queryBuilder);
             if (errorTransform.isPresent()) {
