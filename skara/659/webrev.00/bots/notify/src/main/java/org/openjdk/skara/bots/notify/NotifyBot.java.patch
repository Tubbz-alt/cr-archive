diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
@@ -25,10 +25,11 @@
 import org.openjdk.skara.bot.*;
 import org.openjdk.skara.forge.*;
 import org.openjdk.skara.storage.StorageBuilder;
 
 import java.nio.file.Path;
+import java.time.*;
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class NotifyBot implements Bot, Emitter {
@@ -44,10 +45,12 @@
     private final PullRequestUpdateCache updateCache;
     private final Set<String> readyLabels;
     private final Map<String, Pattern> readyComments;
     private final String integratorId;
 
+    private ZonedDateTime lastFullUpdate;
+
     NotifyBot(HostedRepository repository, Path storagePath, Pattern branches, StorageBuilder<UpdatedTag> tagStorageBuilder,
               StorageBuilder<UpdatedBranch> branchStorageBuilder, StorageBuilder<PullRequestState> prStateStorageBuilder,
               Set<String> readyLabels, Map<String, Pattern> readyComments, String integratorId) {
         this.repository = repository;
         this.storagePath = storagePath;
@@ -111,13 +114,23 @@
     }
 
     @Override
     public List<WorkItem> getPeriodicItems() {
         var ret = new LinkedList<WorkItem>();
+        List<PullRequest> prs;
+
+        // Fetch all open pull requests periodically, and just the recently updated ones in between
+        if (lastFullUpdate == null || lastFullUpdate.isBefore(ZonedDateTime.now().minus(Duration.ofMinutes(10)))) {
+            lastFullUpdate = ZonedDateTime.now();
+            log.info("Fetching all open pull requests");
+            prs = repository.pullRequests();
+        } else {
+            log.info("Fetching recently updated pull requests (open and closed)");
+            prs = repository.pullRequests(ZonedDateTime.now().minus(Duration.ofDays(14)));
+        }
 
         // Pull request events
-        var prs = repository.pullRequests();
         for (var pr : prs) {
             if (updateCache.needsUpdate(pr)) {
                 if (!isReady(pr)) {
                     continue;
                 }
