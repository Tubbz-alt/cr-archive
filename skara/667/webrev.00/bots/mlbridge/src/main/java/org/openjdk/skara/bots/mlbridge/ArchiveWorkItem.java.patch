diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -237,15 +237,14 @@
         var archiveRepo = materializeArchive(path);
         var mboxBasePath = path.resolve(bot.codeRepo().name());
         var mbox = MailingListServerFactory.createMboxFileServer(mboxBasePath);
         var reviewArchiveList = mbox.getList(pr.id());
         var sentMails = parseArchive(reviewArchiveList);
+        var labels = new HashSet<>(pr.labels());
 
         // First determine if this PR should be inspected further or not
         if (sentMails.isEmpty()) {
-            var labels = new HashSet<>(pr.labels());
-
             if (pr.state() == Issue.State.OPEN) {
                 for (var readyLabel : bot.readyLabels()) {
                     if (!labels.contains(readyLabel)) {
                         log.fine("PR is not yet ready - missing label '" + readyLabel + "'");
                         return List.of();
@@ -279,10 +278,29 @@
                     return List.of();
                 }
             }
         }
 
+        // Determine recipient list(s)
+        var recipients = new ArrayList<EmailAddress>();
+        for (var candidateList : bot.lists()) {
+            if (candidateList.labels().isEmpty()) {
+                recipients.add(candidateList.list());
+                continue;
+            }
+            for (var label : labels) {
+                if (candidateList.labels().contains(label)) {
+                    recipients.add(candidateList.list());
+                    break;
+                }
+            }
+        }
+        if (recipients.isEmpty()) {
+            log.severe("PR does not match any recipient list: " + pr.repository().name() + "#" + pr.id());
+            return List.of();
+        }
+
         var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve("census"), pr);
         var jbs = census.configuration().general().jbs();
         if (jbs == null) {
             jbs = census.configuration().general().project();
         }
@@ -295,11 +313,11 @@
             var localRepoPath = scratchPath.resolve("mlbridge-mergebase").resolve(pr.repository().name());
             var localRepo = PullRequestUtils.materialize(hostedRepositoryPool, pr, localRepoPath);
 
             var webrevPath = scratchPath.resolve("mlbridge-webrevs");
             var listServer = MailingListServerFactory.createMailmanServer(bot.listArchive(), bot.smtpServer(), bot.sendInterval());
-            var list = listServer.getList(bot.listAddress().address());
+            var list = listServer.getList(recipients.get(0).toString());
 
             var archiver = new ReviewArchive(pr, bot.emailAddress());
 
             // Regular comments
             for (var comment : comments) {
@@ -352,10 +370,11 @@
                                              .collect(Collectors.toMap(Function.identity(),
                                                                        newMail::headerValue));
                 var filteredEmail = Email.from(newMail)
                                          .replaceHeaders(filteredHeaders)
                                          .headers(bot.headers())
+                                         .recipients(recipients)
                                          .build();
                 list.post(filteredEmail);
             }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
