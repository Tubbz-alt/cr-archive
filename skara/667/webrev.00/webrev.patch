diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveWorkItem.java
@@ -237,15 +237,14 @@
         var archiveRepo = materializeArchive(path);
         var mboxBasePath = path.resolve(bot.codeRepo().name());
         var mbox = MailingListServerFactory.createMboxFileServer(mboxBasePath);
         var reviewArchiveList = mbox.getList(pr.id());
         var sentMails = parseArchive(reviewArchiveList);
+        var labels = new HashSet<>(pr.labels());
 
         // First determine if this PR should be inspected further or not
         if (sentMails.isEmpty()) {
-            var labels = new HashSet<>(pr.labels());
-
             if (pr.state() == Issue.State.OPEN) {
                 for (var readyLabel : bot.readyLabels()) {
                     if (!labels.contains(readyLabel)) {
                         log.fine("PR is not yet ready - missing label '" + readyLabel + "'");
                         return List.of();
@@ -279,10 +278,29 @@
                     return List.of();
                 }
             }
         }
 
+        // Determine recipient list(s)
+        var recipients = new ArrayList<EmailAddress>();
+        for (var candidateList : bot.lists()) {
+            if (candidateList.labels().isEmpty()) {
+                recipients.add(candidateList.list());
+                continue;
+            }
+            for (var label : labels) {
+                if (candidateList.labels().contains(label)) {
+                    recipients.add(candidateList.list());
+                    break;
+                }
+            }
+        }
+        if (recipients.isEmpty()) {
+            log.severe("PR does not match any recipient list: " + pr.repository().name() + "#" + pr.id());
+            return List.of();
+        }
+
         var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve("census"), pr);
         var jbs = census.configuration().general().jbs();
         if (jbs == null) {
             jbs = census.configuration().general().project();
         }
@@ -295,11 +313,11 @@
             var localRepoPath = scratchPath.resolve("mlbridge-mergebase").resolve(pr.repository().name());
             var localRepo = PullRequestUtils.materialize(hostedRepositoryPool, pr, localRepoPath);
 
             var webrevPath = scratchPath.resolve("mlbridge-webrevs");
             var listServer = MailingListServerFactory.createMailmanServer(bot.listArchive(), bot.smtpServer(), bot.sendInterval());
-            var list = listServer.getList(bot.listAddress().address());
+            var list = listServer.getList(recipients.get(0).toString());
 
             var archiver = new ReviewArchive(pr, bot.emailAddress());
 
             // Regular comments
             for (var comment : comments) {
@@ -352,10 +370,11 @@
                                              .collect(Collectors.toMap(Function.identity(),
                                                                        newMail::headerValue));
                 var filteredEmail = Email.from(newMail)
                                          .replaceHeaders(filteredHeaders)
                                          .headers(bot.headers())
+                                         .recipients(recipients)
                                          .build();
                 list.post(filteredEmail);
             }
         } catch (IOException e) {
             throw new UncheckedIOException(e);
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBot.java
@@ -38,11 +38,11 @@
     private final HostedRepository codeRepo;
     private final HostedRepository archiveRepo;
     private final String archiveRef;
     private final HostedRepository censusRepo;
     private final String censusRef;
-    private final EmailAddress listAddress;
+    private final List<MailingListConfiguration> lists;
     private final Set<String> ignoredUsers;
     private final Set<Pattern> ignoredComments;
     private final URI listArchive;
     private final String smtpServer;
     private final WebrevStorage webrevStorage;
@@ -62,11 +62,11 @@
 
     private ZonedDateTime lastPartialUpdate;
     private ZonedDateTime lastFullUpdate;
 
     MailingListBridgeBot(EmailAddress from, HostedRepository repo, HostedRepository archive, String archiveRef,
-                         HostedRepository censusRepo, String censusRef, EmailAddress list,
+                         HostedRepository censusRepo, String censusRef, List<MailingListConfiguration> lists,
                          Set<String> ignoredUsers, Set<Pattern> ignoredComments, URI listArchive, String smtpServer,
                          HostedRepository webrevStorageRepository, String webrevStorageRef,
                          Path webrevStorageBase, URI webrevStorageBaseUri, Set<String> readyLabels,
                          Map<String, Pattern> readyComments, URI issueTracker, Map<String, String> headers,
                          Duration sendInterval, Duration cooldown, boolean repoInSubject, Pattern branchInSubject,
@@ -75,11 +75,11 @@
         codeRepo = repo;
         archiveRepo = archive;
         this.archiveRef = archiveRef;
         this.censusRepo = censusRepo;
         this.censusRef = censusRef;
-        listAddress = list;
+        this.lists = lists;
         this.ignoredUsers = ignoredUsers;
         this.ignoredComments = ignoredComments;
         this.listArchive = listArchive;
         this.smtpServer = smtpServer;
         this.readyLabels = readyLabels;
@@ -124,12 +124,12 @@
 
     EmailAddress emailAddress() {
         return emailAddress;
     }
 
-    EmailAddress listAddress() {
-        return listAddress;
+    List<MailingListConfiguration> lists() {
+        return lists;
     }
 
     Duration sendInterval() {
         return sendInterval;
     }
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotBuilder.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotBuilder.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotBuilder.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotBuilder.java
@@ -36,11 +36,11 @@
     private HostedRepository repo;
     private HostedRepository archive;
     private String archiveRef = "master";
     private HostedRepository censusRepo;
     private String censusRef = "master";
-    private EmailAddress list;
+    private List<MailingListConfiguration> lists;
     private Set<String> ignoredUsers = Set.of();
     private Set<Pattern> ignoredComments = Set.of();
     private URI listArchive;
     private String smtpServer;
     private HostedRepository webrevStorageRepository;
@@ -88,12 +88,12 @@
     public MailingListBridgeBotBuilder censusRef(String censusRef) {
         this.censusRef = censusRef;
         return this;
     }
 
-    public MailingListBridgeBotBuilder list(EmailAddress list) {
-        this.list = list;
+    public MailingListBridgeBotBuilder lists(List<MailingListConfiguration> lists) {
+        this.lists = lists;
         return this;
     }
 
     public MailingListBridgeBotBuilder ignoredUsers(Set<String> ignoredUsers) {
         this.ignoredUsers = ignoredUsers;
@@ -179,11 +179,11 @@
         this.seedStorage = seedStorage;
         return this;
     }
 
     public MailingListBridgeBot build() {
-        return new MailingListBridgeBot(from, repo, archive, archiveRef, censusRepo, censusRef, list,
+        return new MailingListBridgeBot(from, repo, archive, archiveRef, censusRepo, censusRef, lists,
                                         ignoredUsers, ignoredComments, listArchive, smtpServer,
                                         webrevStorageRepository, webrevStorageRef, webrevStorageBase, webrevStorageBaseUri,
                                         readyLabels, readyComments, issueTracker, headers, sendInterval, cooldown,
                                         repoInSubject, branchInSubject, seedStorage);
     }
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotFactory.java
@@ -39,10 +39,31 @@
     @Override
     public String name() {
         return "mlbridge";
     }
 
+    private MailingListConfiguration parseList(JSONObject configuration) {
+        var listAddress = EmailAddress.parse(configuration.get("email").asString());
+        Set<String> labels = configuration.contains("labels") ?
+                configuration.get("labels").stream()
+                             .map(JSONValue::asString)
+                             .collect(Collectors.toSet()) :
+                Set.of();
+        return new MailingListConfiguration(listAddress, labels);
+    }
+
+    private List<MailingListConfiguration> parseLists(JSONValue configuration) {
+        if (configuration.isArray()) {
+            return configuration.stream()
+                                .map(JSONValue::asObject)
+                                .map(this::parseList)
+                                .collect(Collectors.toList());
+        } else {
+            return List.of(parseList(configuration.asObject()));
+        }
+    }
+
     @Override
     public List<Bot> create(BotConfiguration configuration) {
         var ret = new ArrayList<Bot>();
         var specific = configuration.specific();
 
@@ -85,20 +106,19 @@
 
             Map<String, String> headers = repoConfig.contains("headers") ?
                     repoConfig.get("headers").fields().stream()
                               .collect(Collectors.toMap(JSONObject.Field::name, field -> field.value().asString())) :
                     Map.of();
-
-            var list = EmailAddress.parse(repoConfig.get("list").asString());
+            var lists = parseLists(repoConfig.get("lists"));
             var folder = repoConfig.contains("folder") ? repoConfig.get("folder").asString() : configuration.repositoryName(repo);
             var botBuilder = MailingListBridgeBot.newBuilder().from(from)
                                                  .repo(configuration.repository(repo))
                                                  .archive(archiveRepo)
                                                  .archiveRef(archiveRef)
                                                  .censusRepo(censusRepo)
                                                  .censusRef(censusRef)
-                                                 .list(list)
+                                                 .lists(lists)
                                                  .ignoredUsers(ignoredUsers)
                                                  .ignoredComments(ignoredComments)
                                                  .listArchive(listArchive)
                                                  .smtpServer(listSmtp)
                                                  .webrevStorageRepository(webrevRepo)
@@ -120,11 +140,13 @@
                 botBuilder.branchInSubject(Pattern.compile(repoConfig.get("branchname").asString()));
             }
             ret.add(botBuilder.build());
 
             if (!repoConfig.contains("bidirectional") || repoConfig.get("bidirectional").asBoolean()) {
-                listNamesForReading.add(list);
+                for (var list : lists) {
+                    listNamesForReading.add(list.list());
+                }
             }
             allRepositories.add(configuration.repository(repo));
         }
 
         var mailmanServer = MailingListServerFactory.createMailmanServer(listArchive, listSmtp, Duration.ZERO);
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListConfiguration.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListConfiguration.java
--- /dev/null
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/MailingListConfiguration.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.mlbridge;
+
+import org.openjdk.skara.email.EmailAddress;
+
+import java.util.*;
+
+class MailingListConfiguration {
+    private EmailAddress list;
+    private Set<String> labels;
+
+    MailingListConfiguration(EmailAddress list, Set<String> labels) {
+        this.list = list;
+        this.labels = labels;
+    }
+
+    EmailAddress list() {
+        return list;
+    }
+
+    Set<String> labels() {
+        return labels;
+    }
+}
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListArchiveReaderBotTests.java
@@ -36,24 +36,24 @@
 import java.util.*;
 
 import static org.junit.jupiter.api.Assertions.*;
 
 class MailingListArchiveReaderBotTests {
-    private void addReply(Conversation conversation, MailingList mailingList, PullRequest pr, String reply) {
+    private void addReply(Conversation conversation, EmailAddress recipient, MailingList mailingList, PullRequest pr, String reply) {
         var first = conversation.first();
         var references = first.id().toString();
         var email = Email.create(EmailAddress.from("Commenter", "c@test.test"), "Re: RFR: " + pr.title(), reply)
-                         .recipient(first.author())
+                         .recipient(recipient)
                          .id(EmailAddress.from(UUID.randomUUID() + "@id.id"))
                          .header("In-Reply-To", first.id().toString())
                          .header("References", references)
                          .build();
         mailingList.post(email);
     }
 
-    private void addReply(Conversation conversation, MailingList mailingList, PullRequest pr) {
-        addReply(conversation, mailingList, pr, "Looks good");
+    private void addReply(Conversation conversation, EmailAddress recipient, MailingList mailingList, PullRequest pr) {
+        addReply(conversation, recipient, mailingList, pr, "Looks good");
     }
 
     @Test
     void simpleArchive(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
@@ -70,11 +70,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .ignoredUsers(Set.of(ignored.forge().currentUser().userName()))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
@@ -111,11 +111,11 @@
             TestBotRunner.runPeriodicItems(readerBot);
 
             // Post a reply directly to the list
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
-            addReply(conversations.get(0), mailmanList, pr);
+            addReply(conversations.get(0), listAddress, mailmanList, pr);
             listServer.processIncoming();
 
             // Another archive reader pass - has to be done twice
             TestBotRunner.runPeriodicItems(readerBot);
             TestBotRunner.runPeriodicItems(readerBot);
@@ -145,11 +145,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .ignoredUsers(Set.of(ignored.forge().currentUser().userName()))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
@@ -183,11 +183,11 @@
             listServer.processIncoming();
 
             // Post a reply directly to the list
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
-            addReply(conversations.get(0), mailmanList, pr);
+            addReply(conversations.get(0), listAddress, mailmanList, pr);
             listServer.processIncoming();
 
             // Another archive reader pass - has to be done twice
             TestBotRunner.runPeriodicItems(readerBot);
             TestBotRunner.runPeriodicItems(readerBot);
@@ -222,11 +222,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .ignoredUsers(Set.of(ignored.forge().currentUser().userName()))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
@@ -265,11 +265,11 @@
             // Post a large reply directly to the list
             var conversations = mailmanList.conversations(Duration.ofDays(1));
             assertEquals(1, conversations.size());
 
             var replyBody = "This line is about 30 bytes long\n".repeat(1000 * 10);
-            addReply(conversations.get(0), mailmanList, pr, replyBody);
+            addReply(conversations.get(0), listAddress, mailmanList, pr, replyBody);
             listServer.processIncoming();
 
             // Another archive reader pass - has to be done twice
             TestBotRunner.runPeriodicItems(readerBot);
             TestBotRunner.runPeriodicItems(readerBot);
diff a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
--- a/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
+++ b/bots/mlbridge/src/test/java/org/openjdk/skara/bots/mlbridge/MailingListBridgeBotTests.java
@@ -120,11 +120,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .ignoredUsers(Set.of(ignored.forge().currentUser().userName()))
                                             .ignoredComments(Set.of())
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
@@ -288,11 +288,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .ignoredUsers(Set.of(ignored.forge().currentUser().userName()))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
@@ -354,24 +354,24 @@
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var censusBuilder = credentials.getCensusBuilder()
                     .addAuthor(author.forge().currentUser().id());
             var from = EmailAddress.from("test", "test@test.mail");
             var mlBot = MailingListBridgeBot.newBuilder()
-                    .from(from)
-                    .repo(author)
-                    .archive(archive)
-                    .censusRepo(censusBuilder.build())
-                    .list(listAddress)
-                    .ignoredUsers(Set.of(ignored.forge().currentUser().userName()))
-                    .listArchive(listServer.getArchive())
-                    .smtpServer(listServer.getSMTP())
-                    .webrevStorageRepository(archive)
-                    .webrevStorageRef("webrev")
-                    .webrevStorageBase(Path.of("test"))
-                    .webrevStorageBaseUri(webrevServer.uri())
-                    .issueTracker(URIBuilder.base("http://issues.test/browse/").build())
-                    .build();
+                                            .from(from)
+                                            .repo(author)
+                                            .archive(archive)
+                                            .censusRepo(censusBuilder.build())
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
+                                            .ignoredUsers(Set.of(ignored.forge().currentUser().userName()))
+                                            .listArchive(listServer.getArchive())
+                                            .smtpServer(listServer.getSMTP())
+                                            .webrevStorageRepository(archive)
+                                            .webrevStorageRef("webrev")
+                                            .webrevStorageBase(Path.of("test"))
+                                            .webrevStorageBaseUri(webrevServer.uri())
+                                            .issueTracker(URIBuilder.base("http://issues.test/browse/").build())
+                                            .build();
 
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.url(), "master", true);
@@ -432,11 +432,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .ignoredUsers(Set.of(ignored.forge().currentUser().userName()))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
@@ -511,11 +511,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .ignoredUsers(Set.of(ignored.forge().currentUser().userName()))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
@@ -588,11 +588,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .ignoredUsers(Set.of(ignored.forge().currentUser().userName()))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
@@ -671,11 +671,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .ignoredUsers(Set.of(ignored.forge().currentUser().userName()))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
@@ -725,11 +725,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .ignoredUsers(Set.of(ignored.forge().currentUser().userName()))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
@@ -820,11 +820,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -915,11 +915,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -1044,11 +1044,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -1107,11 +1107,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -1171,11 +1171,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -1236,11 +1236,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -1299,11 +1299,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -1356,11 +1356,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -1432,11 +1432,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -1498,11 +1498,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -1628,11 +1628,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(sender)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -1725,11 +1725,11 @@
                                             .from(sender)
                                             .repo(author)
                                             .archive(archive)
                                             .archiveRef("archive")
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -1815,11 +1815,11 @@
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .archiveRef("archive")
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -1901,11 +1901,11 @@
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .archiveRef("archive")
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -1973,11 +1973,11 @@
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .archiveRef("archive")
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -2043,11 +2043,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .ignoredUsers(Set.of(ignored.forge().currentUser().userName()))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
@@ -2124,11 +2124,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -2213,11 +2213,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .ignoredUsers(Set.of(ignored.forge().currentUser().userName()))
                                             .ignoredComments(Set.of(Pattern.compile("ignore this comment", Pattern.MULTILINE | Pattern.DOTALL)))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
@@ -2280,11 +2280,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -2341,11 +2341,11 @@
                                                    .from(from)
                                                    .repo(bot)
                                                    .ignoredUsers(Set.of(bot.forge().currentUser().userName()))
                                                    .archive(archive)
                                                    .censusRepo(censusBuilder.build())
-                                                   .list(listAddress)
+                                                   .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                                    .listArchive(listServer.getArchive())
                                                    .smtpServer(listServer.getSMTP())
                                                    .webrevStorageRepository(archive)
                                                    .webrevStorageRef("webrev")
                                                    .webrevStorageBase(Path.of("test"))
@@ -2406,11 +2406,11 @@
                                                    .from(from)
                                                    .repo(bot)
                                                    .ignoredUsers(Set.of(bot.forge().currentUser().userName()))
                                                    .archive(archive)
                                                    .censusRepo(censusBuilder.build())
-                                                   .list(listAddress)
+                                                   .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                                    .listArchive(listServer.getArchive())
                                                    .smtpServer(listServer.getSMTP())
                                                    .webrevStorageRepository(archive)
                                                    .webrevStorageRef("webrev")
                                                    .webrevStorageBase(Path.of("test"))
@@ -2473,11 +2473,11 @@
                                                    .from(from)
                                                    .repo(bot)
                                                    .ignoredUsers(Set.of(bot.forge().currentUser().userName()))
                                                    .archive(archive)
                                                    .censusRepo(censusBuilder.build())
-                                                   .list(listAddress)
+                                                   .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                                    .listArchive(listServer.getArchive())
                                                    .smtpServer(listServer.getSMTP())
                                                    .webrevStorageRepository(archive)
                                                    .webrevStorageRef("webrev")
                                                    .webrevStorageBase(Path.of("test"))
@@ -2562,11 +2562,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -2619,11 +2619,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -2676,11 +2676,11 @@
             var mlBot = MailingListBridgeBot.newBuilder()
                                             .from(from)
                                             .repo(author)
                                             .archive(archive)
                                             .censusRepo(censusBuilder.build())
-                                            .list(listAddress)
+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                             .listArchive(listServer.getArchive())
                                             .smtpServer(listServer.getSMTP())
                                             .webrevStorageRepository(archive)
                                             .webrevStorageRef("webrev")
                                             .webrevStorageBase(Path.of("test"))
@@ -2737,11 +2737,11 @@
                                                    .from(from)
                                                    .repo(bot)
                                                    .ignoredUsers(Set.of(bot.forge().currentUser().userName()))
                                                    .archive(archive)
                                                    .censusRepo(censusBuilder.build())
-                                                   .list(listAddress)
+                                                   .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))
                                                    .listArchive(listServer.getArchive())
                                                    .smtpServer(listServer.getSMTP())
                                                    .webrevStorageRepository(archive)
                                                    .webrevStorageRef("webrev")
                                                    .webrevStorageBase(Path.of("test"))
@@ -2808,6 +2808,84 @@
             // Check the archive
             Repository.materialize(archiveFolder.path(), archive.url(), "master");
             assertTrue(archiveContains(archiveFolder.path(), "Update number - " + counter + " -"));
         }
     }
+
+    @Test
+    void multipleRecipients(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory();
+             var archiveFolder = new TemporaryDirectory();
+             var listServer = new TestMailmanServer();
+             var webrevServer = new TestWebrevServer()) {
+            var author = credentials.getHostedRepository();
+            var archive = credentials.getHostedRepository();
+            var listAddress1 = EmailAddress.parse(listServer.createList("test1"));
+            var listAddress2 = EmailAddress.parse(listServer.createList("test2"));
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.forge().currentUser().id());
+            var from = EmailAddress.from("test", "test@test.mail");
+            var mlBot = MailingListBridgeBot.newBuilder()
+                                            .from(from)
+                                            .repo(author)
+                                            .archive(archive)
+                                            .censusRepo(censusBuilder.build())
+                                            .lists(List.of(new MailingListConfiguration(listAddress1, Set.of("list1")),
+                                                           new MailingListConfiguration(listAddress2, Set.of("list2"))))
+                                            .listArchive(listServer.getArchive())
+                                            .smtpServer(listServer.getSMTP())
+                                            .webrevStorageRepository(archive)
+                                            .webrevStorageRef("webrev")
+                                            .webrevStorageBase(Path.of("test"))
+                                            .webrevStorageBaseUri(webrevServer.uri())
+                                            .issueTracker(URIBuilder.base("http://issues.test/browse/").build())
+                                            .build();
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            localRepo.push(masterHash, author.url(), "master", true);
+            localRepo.push(masterHash, archive.url(), "webrev", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "A simple change",
+                                                               "Change msg\n\nWith several lines");
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(archive, "master", "edit", "1234: This is a pull request");
+            pr.setBody("This is a PR");
+            pr.addLabel("list1");
+
+            // Run an archive pass
+            TestBotRunner.runPeriodicItems(mlBot);
+            listServer.processIncoming();
+
+            // The mail should have been sent to list1
+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
+            var mailmanList = mailmanServer.getList(listAddress1.address());
+            var conversations = mailmanList.conversations(Duration.ofDays(1));
+            assertEquals(1, conversations.size());
+            var mail = conversations.get(0).first();
+            assertEquals("RFR: 1234: This is a pull request", mail.subject());
+            assertEquals(pr.author().fullName(), mail.author().fullName().orElseThrow());
+            assertEquals(noreplyAddress(archive), mail.author().address());
+            assertEquals(listAddress1, mail.sender());
+            assertEquals(List.of(listAddress1), mail.recipients());
+
+            // Add another label and comment
+            pr.addLabel("list2");
+            pr.addComment("Looks good!");
+            TestBotRunner.runPeriodicItems(mlBot);
+            listServer.processIncoming();
+
+            // This one should have been sent to list1 and list2
+            conversations = mailmanList.conversations(Duration.ofDays(1));
+            assertEquals(1, conversations.size());
+            var reply = conversations.get(0).replies(conversations.get(0).first()).get(0);
+            assertEquals("RFR: 1234: This is a pull request", reply.subject());
+            assertEquals(pr.author().fullName(), reply.author().fullName().orElseThrow());
+            assertEquals(noreplyAddress(archive), reply.author().address());
+            assertEquals(listAddress1, reply.sender());
+            assertEquals(List.of(listAddress1, listAddress2), reply.recipients());
+        }
+    }
 }
diff a/email/src/main/java/org/openjdk/skara/email/Email.java b/email/src/main/java/org/openjdk/skara/email/Email.java
--- a/email/src/main/java/org/openjdk/skara/email/Email.java
+++ b/email/src/main/java/org/openjdk/skara/email/Email.java
@@ -95,10 +95,11 @@
         }
         List<EmailAddress> recipients;
         if (message.headers.containsKey("To")) {
             recipients = Arrays.stream(message.headers.get("To").split(","))
                                .map(MimeText::decode)
+                               .map(String::strip)
                                .map(EmailAddress::parse)
                                .collect(Collectors.toList());
         } else {
             recipients = List.of();
         }
diff a/email/src/main/java/org/openjdk/skara/email/SMTP.java b/email/src/main/java/org/openjdk/skara/email/SMTP.java
--- a/email/src/main/java/org/openjdk/skara/email/SMTP.java
+++ b/email/src/main/java/org/openjdk/skara/email/SMTP.java
@@ -40,37 +40,46 @@
     private static Pattern mailReply = Pattern.compile("^250 .*");
     private static Pattern rcptReply = Pattern.compile("^250 .*");
     private static Pattern dataReply = Pattern.compile("^354 .*");
     private static Pattern doneReply = Pattern.compile("^250 .*");
 
-    public static void send(String server, EmailAddress recipient, Email email) throws IOException {
-        send(server, recipient, email, Duration.ofMinutes(30));
+    public static void send(String server, Email email) throws IOException {
+        send(server, email, Duration.ofMinutes(30));
     }
 
-    public static void send(String server, EmailAddress recipient, Email email, Duration timeout) throws IOException {
+    public static void send(String server, Email email, Duration timeout) throws IOException {
+        if (email.recipients().isEmpty()) {
+            throw new IllegalArgumentException("Attempting to send an email without recipients");
+        }
         var port = 25;
         if (server.contains(":")) {
             var parts = server.split(":", 2);
             server = parts[0];
             port = Integer.parseInt(parts[1]);
         }
+        var recipientList = email.recipients().stream()
+                                 .map(EmailAddress::toString)
+                                 .map(MimeText::encode)
+                                 .collect(Collectors.joining(", "));
         try (var socket = new Socket(server, port);
              var out = new OutputStreamWriter(socket.getOutputStream(), StandardCharsets.UTF_8);
              var in = new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8)) {
 
             var session = new SMTPSession(in, out, timeout);
 
             session.waitForPattern(initReply);
             session.sendCommand("EHLO " + email.sender().domain(), ehloReply);
             session.sendCommand("MAIL FROM:" + email.sender().address(), mailReply);
-            session.sendCommand("RCPT TO:<" + recipient.address() + ">", rcptReply);
+            for (var recipient : email.recipients()) {
+                session.sendCommand("RCPT TO:<" + recipient.address() + ">", rcptReply);
+            }
             session.sendCommand("DATA", dataReply);
             session.sendCommand("From: " + MimeText.encode(email.author().toString()));
             session.sendCommand("Message-Id: " + email.id());
             session.sendCommand("Date: " + email.date().format(DateTimeFormatter.RFC_1123_DATE_TIME));
             session.sendCommand("Sender: " + MimeText.encode(email.sender().toString()));
-            session.sendCommand("To: " + MimeText.encode(recipient.toString()));
+            session.sendCommand("To: " + recipientList);
             for (var header : email.headers()) {
                 session.sendCommand(header + ": " + MimeText.encode(email.headerValue(header)));
             }
             session.sendCommand("Subject: " + MimeText.encode(email.subject()));
             session.sendCommand("Content-type: text/plain; charset=utf-8");
diff a/email/src/test/java/org/openjdk/skara/email/SMTPTests.java b/email/src/test/java/org/openjdk/skara/email/SMTPTests.java
--- a/email/src/test/java/org/openjdk/skara/email/SMTPTests.java
+++ b/email/src/test/java/org/openjdk/skara/email/SMTPTests.java
@@ -20,17 +20,17 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.email;
 
-import org.openjdk.skara.test.SMTPServer;
-
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.*;
+import org.openjdk.skara.test.SMTPServer;
 
 import java.io.IOException;
 import java.time.Duration;
+import java.util.List;
 
 import static org.junit.jupiter.api.Assertions.*;
 
 class SMTPTests {
     @Test
@@ -38,11 +38,11 @@
         try (var server = new SMTPServer()) {
             var sender = EmailAddress.from("Test", "test@test.email");
             var recipient = EmailAddress.from("Dest", "dest@dest.email");
             var sentMail = Email.create(sender, "Subject", "Body").recipient(recipient).build();
 
-            SMTP.send(server.address(), recipient, sentMail);
+            SMTP.send(server.address(), sentMail);
             var email = server.receive(Duration.ofSeconds(10));
             assertEquals(sentMail, email);
         }
     }
 
@@ -56,11 +56,11 @@
                                 .sender(sender)
                                 .recipient(recipient)
                                 .header("Something", "Other")
                                 .build();
 
-            SMTP.send(server.address(), recipient, sentMail);
+            SMTP.send(server.address(), sentMail);
             var email = server.receive(Duration.ofSeconds(10));
             assertEquals(sentMail, email);
         }
     }
 
@@ -73,11 +73,11 @@
             var sentMail = Email.create(sender, "Sübject", "Bödÿ")
                                 .recipient(recipient)
                                 .header("Something", "Öthè®")
                                 .build();
 
-            SMTP.send(server.address(), recipient, sentMail);
+            SMTP.send(server.address(), sentMail);
             var email = server.receive(Duration.ofSeconds(10));
             assertEquals(sentMail, email);
         }
     }
 
@@ -86,22 +86,38 @@
         try (var server = new SMTPServer()) {
             var sender = EmailAddress.from("Test", "test@test.email");
             var recipient = EmailAddress.from("Dest", "dest@dest.email");
             var sentMail = Email.create(sender, "Subject", "Body").recipient(recipient).build();
 
-            assertThrows(RuntimeException.class, () -> SMTP.send(server.address(), recipient, sentMail, Duration.ZERO));
+            assertThrows(RuntimeException.class, () -> SMTP.send(server.address(), sentMail, Duration.ZERO));
         }
     }
 
     @Test
     void withDot() throws IOException {
         try (var server = new SMTPServer()) {
             var sender = EmailAddress.from("Test", "test@test.email");
             var recipient = EmailAddress.from("Dest", "dest@dest.email");
             var sentMail = Email.create(sender, "Subject", "Body\n.\nMore text").recipient(recipient).build();
 
-            SMTP.send(server.address(), recipient, sentMail);
+            SMTP.send(server.address(), sentMail);
+            var email = server.receive(Duration.ofSeconds(10));
+            assertEquals(sentMail, email);
+        }
+    }
+
+    @Test
+    void multipleRecipients() throws IOException {
+        try (var server = new SMTPServer()) {
+            var sender = EmailAddress.from("Test", "test@test.email");
+            var recipient1 = EmailAddress.from("Dest1", "dest1@dest.email");
+            var recipient2 = EmailAddress.from("Dest2", "dest2@dest.email");
+            var sentMail = Email.create(sender, "Subject", "Body")
+                                .recipients(List.of(recipient1, recipient2))
+                                .build();
+
+            SMTP.send(server.address(), sentMail);
             var email = server.receive(Duration.ofSeconds(10));
             assertEquals(sentMail, email);
         }
     }
 }
diff a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java
--- a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java
+++ b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanList.java
@@ -54,11 +54,11 @@
         return "MailmanList:" + listAddress;
     }
 
     @Override
     public void post(Email email) {
-        server.sendMessage(listAddress, email);
+        server.sendMessage(email);
     }
 
     private List<ZonedDateTime> getMonthRange(Duration maxAge) {
         var now = ZonedDateTime.now();
         var start = now.minus(maxAge);
diff a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanServer.java b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanServer.java
--- a/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanServer.java
+++ b/mailinglist/src/main/java/org/openjdk/skara/mailinglist/mailman/MailmanServer.java
@@ -48,20 +48,20 @@
     URI getMbox(String listName, ZonedDateTime month) {
         var dateStr = DateTimeFormatter.ofPattern("YYYY-MMMM", Locale.US).format(month);
         return URIBuilder.base(archive).appendPath(listName + "/" + dateStr + ".txt").build();
     }
 
-    void sendMessage(EmailAddress recipientList, Email message) {
+    void sendMessage(Email message) {
         while (lastSend.plus(sendInterval).isAfter(Instant.now())) {
             try {
                 Thread.sleep(sendInterval.dividedBy(10).toMillis());
             } catch (InterruptedException ignored) {
             }
         }
         lastSend = Instant.now();
         try {
-            SMTP.send(smtpServer, recipientList, message);
+            SMTP.send(smtpServer, message);
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
     }
 
diff a/test/src/main/java/org/openjdk/skara/test/SMTPServer.java b/test/src/main/java/org/openjdk/skara/test/SMTPServer.java
--- a/test/src/main/java/org/openjdk/skara/test/SMTPServer.java
+++ b/test/src/main/java/org/openjdk/skara/test/SMTPServer.java
@@ -25,37 +25,80 @@
 import org.openjdk.skara.email.*;
 
 import java.io.*;
 import java.net.*;
 import java.time.*;
+import java.util.ArrayList;
 import java.util.concurrent.ConcurrentLinkedDeque;
+import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 public class SMTPServer implements AutoCloseable {
     private final ServerSocket serverSocket;
-    private final Thread acceptThread;
     private final ConcurrentLinkedDeque<Email> emails = new ConcurrentLinkedDeque<>();
 
-    private static Pattern ehloPattern = Pattern.compile("^EHLO .*$");
-    private static Pattern mailFromPattern = Pattern.compile("^MAIL FROM:.*$");
-    private static Pattern rcptToPattern = Pattern.compile("^RCPT TO:<.*$");
-    private static Pattern dataPattern = Pattern.compile("^DATA$");
-    private static Pattern messageEndPattern = Pattern.compile("^\\.$");
-    private static Pattern quitPattern = Pattern.compile("^QUIT$");
-
+    private final static Logger log = Logger.getLogger("org.openjdk.skara.test");;
+    private final static Pattern commandPattern = Pattern.compile("^([A-Z]+) ?(.*)$");
     private final static Pattern encodeQuotedPrintablePattern = Pattern.compile("([^\\x00-\\x7f]+)");
     private final static Pattern headerPattern = Pattern.compile("[^A-Za-z0-9-]+: .+");
 
     private class AcceptThread implements Runnable {
-        private void handleSession(SMTPSession session) throws IOException {
-            session.sendCommand("220 localhost SMTP", ehloPattern);
-            session.sendCommand("250 HELP", mailFromPattern);
-            session.sendCommand("250 FROM OK", rcptToPattern);
-            session.sendCommand("250 RCPT OK", dataPattern);
-            session.sendCommand("354 Enter message now, end with .");
-            var message = session.readLinesUntil(messageEndPattern);
-            session.sendCommand("250 MESSAGE OK", quitPattern);
+        private void sendLine(String line, BufferedWriter out) throws IOException {
+            log.fine("> " + line);
+            out.write(line + "\n");
+            out.flush();
+        }
+
+        private String readLine(BufferedReader in) throws IOException {
+            while (!in.ready()) {
+                try {
+                    Thread.sleep(10);
+                } catch (InterruptedException ignored) {
+                }
+            }
+            var line = in.readLine();
+            log.fine("< " + line);
+            return line;
+        }
+
+        private void handleSession(BufferedReader in, BufferedWriter out) throws IOException {
+            sendLine("220 localhost SMTP", out);
+            var message = new ArrayList<String>();
+            var done = false;
+            while (!done) {
+                var line = readLine(in);
+                var commandMatcher = commandPattern.matcher(line);
+                if (!commandMatcher.matches()) {
+                    throw new RuntimeException("Illegal input: " + line);
+                }
+                switch (commandMatcher.group(1)) {
+                    case "EHLO":
+                        sendLine("250 HELP", out);
+                        break;
+                    case "MAIL":
+                        sendLine("250 FROM OK", out);
+                        break;
+                    case "RCPT":
+                        sendLine("250 RCPT OK", out);
+                        break;
+                    case "DATA":
+                        sendLine("354 Enter message now, end with .", out);
+                        while (true) {
+                            var messageLine = readLine(in);
+                            if (messageLine.equals(".")) {
+                                sendLine("250 MESSAGE OK", out);
+                                break;
+                            }
+                            message.add(messageLine);
+                        }
+                        break;
+                    case "QUIT":
+                        sendLine("BYE", out);
+                        done = true;
+                        break;
+                }
+            }
 
             // Email headers are only 7-bit safe, ensure that we break any high ascii passing through
             var inHeader = true;
             var mailBody = new StringBuilder();
             for (var line : message) {
@@ -87,12 +130,11 @@
             while (!serverSocket.isClosed()) {
                 try {
                     try (var socket = serverSocket.accept();
                          var input = new InputStreamReader(socket.getInputStream());
                          var output = new OutputStreamWriter(socket.getOutputStream())) {
-                        var session = new SMTPSession(input, output, Duration.ofMinutes(10));
-                        handleSession(session);
+                        handleSession(new BufferedReader(input), new BufferedWriter(output));
                     }
                 } catch (SocketException e) {
                     // Socket closed
                 } catch (IOException e) {
                     throw new UncheckedIOException(e);
@@ -101,16 +143,15 @@
         }
     }
 
     public SMTPServer() throws IOException {
         serverSocket = new ServerSocket(0);
-        acceptThread = new Thread(new AcceptThread());
+        var acceptThread = new Thread(new AcceptThread());
         acceptThread.start();
     }
 
     public String address() {
-        var host = serverSocket.getInetAddress();
         return InetAddress.getLoopbackAddress().getHostAddress() + ":" + serverSocket.getLocalPort();
     }
 
     public Email receive(Duration timeout) {
         var start = Instant.now();
