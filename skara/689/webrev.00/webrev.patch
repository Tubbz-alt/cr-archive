diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -31,10 +31,11 @@
 
 import java.net.URI;
 import java.time.*;
 import java.time.format.DateTimeFormatter;
 import java.util.*;
+import java.util.function.Function;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 
 public class GitHubPullRequest implements PullRequest {
     private final JSONValue json;
@@ -76,10 +77,19 @@
     @Override
     public HostUser author() {
         return host.parseUserField(json);
     }
 
+    private Optional<ZonedDateTime> lastBaseRefChange() {
+        return request.get("issues/" + json.get("number").toString() + "/timeline").execute().stream()
+                      .map(JSONValue::asObject)
+                      .filter(obj -> obj.contains("event"))
+                      .filter(obj -> obj.get("event").asString().equals("base_ref_changed"))
+                      .map(o -> ZonedDateTime.parse(o.get("created_at").asString()))
+                      .max(Comparator.comparing(Function.identity()));
+    }
+
     @Override
     public List<Review> reviews() {
         var reviews = request.get("pulls/" + json.get("number").toString() + "/reviews").execute().stream()
                              .map(JSONValue::asObject)
                              .filter(obj -> !(obj.get("state").asString().equals("COMMENTED") && obj.get("body").asString().isEmpty()))
@@ -102,10 +112,19 @@
                                  var body = obj.get("body").asString();
                                  var createdAt = ZonedDateTime.parse(obj.get("submitted_at").asString());
                                  return new Review(createdAt, reviewer, verdict, hash, id, body);
                              })
                              .collect(Collectors.toList());
+
+        // In the unlikely event that the base ref has changed after a review, we treat those as invalid
+        var lastBaseRefChange = lastBaseRefChange();
+        if (lastBaseRefChange.isPresent()) {
+            reviews = reviews.stream()
+                             .filter(r -> r.createdAt().isAfter(lastBaseRefChange.get()))
+                             .collect(Collectors.toList());;
+        }
+
         return reviews;
     }
 
     @Override
     public void addReview(Review.Verdict verdict, String body) {
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
@@ -55,11 +55,12 @@
         request = new RestRequest(apiBase, gitHubHost.authId().orElse(null), () -> {
             var headers = new ArrayList<>(List.of(
                 "Accept", "application/vnd.github.machine-man-preview+json",
                 "Accept", "application/vnd.github.antiope-preview+json",
                 "Accept", "application/vnd.github.shadow-cat-preview+json",
-                "Accept", "application/vnd.github.comfort-fade-preview+json"));
+                "Accept", "application/vnd.github.comfort-fade-preview+json",
+                "Accept", "application/vnd.github.mockingbird-preview+json"));
             var token = gitHubHost.getInstallationToken();
             if (token.isPresent()) {
                 headers.add("Authorization");
                 headers.add("token " + token.get());
             }
