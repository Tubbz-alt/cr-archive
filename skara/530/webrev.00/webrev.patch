diff a/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java b/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitJCheck.java
@@ -320,11 +320,12 @@
             if (displayedError) {
                 return 1;
             }
         }
 
-        var visitor = new JCheckCLIVisitor(ignore, isMercurial);
+        var isLax = getSwitch("lax", arguments);
+        var visitor = new JCheckCLIVisitor(ignore, isMercurial, isLax);
         lines = repo.config("jcheck.pre-push.commits");
         var shouldCheckCommits = lines.size() == 1 && lines.get(0).toLowerCase().equals("true");
         var commitMessageParser = isMercurial ? CommitMessageParsers.v0 : CommitMessageParsers.v1;
         if (!isPrePush || shouldCheckCommits) {
             for (var range : ranges) {
diff a/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java b/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
--- a/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
@@ -31,19 +31,21 @@
 import java.util.stream.Collectors;
 
 class JCheckCLIVisitor implements IssueVisitor {
     private final Set<String> ignore;
     private final boolean isMercurial;
+    private final boolean isLax;
     private boolean hasDisplayedErrors;
 
     public JCheckCLIVisitor() {
-        this(Set.of(), false);
+        this(Set.of(), false, false);
     }
 
-    public JCheckCLIVisitor(Set<String> ignore, boolean isMercurial) {
+    public JCheckCLIVisitor(Set<String> ignore, boolean isMercurial, boolean isLax) {
         this.ignore = ignore;
         this.isMercurial = isMercurial;
+        this.isLax = isLax;
         this.hasDisplayedErrors = false;
     }
 
     private String println(Issue i, String message) {
         var prefix = "[" + i.check().name() + "] " + i.severity() + ": ";
@@ -74,11 +76,11 @@
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(TagIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             println(i, "illegal tag name: " + i.tag().name());
             hasDisplayedErrors = true;
         }
     }
 
@@ -88,18 +90,18 @@
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(SelfReviewIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             println(i, "self-reviews are not allowed");
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(TooFewReviewersIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             var required = i.numRequired();
             var actual = i.numActual();
             var reviewers = required == 1 ? " reviewer" : " reviewers";
             println(i, required + reviewers + " required, found " + actual);
             hasDisplayedErrors = true;
@@ -114,18 +116,18 @@
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(MergeMessageIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             println(i, "merge commits should only use the commit message '" + i.expected() + "'");
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(HgTagCommitIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             hasDisplayedErrors = true;
             switch (i.error()) {
                 case TOO_MANY_LINES:
                     println(i, "message should only be one line");
                     return;
@@ -197,32 +199,32 @@
 
         return merged;
     }
 
     public void visit(WhitespaceIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             var pos = i.path() + ":" + i.row();
             var prefix = println(i, i.describe() + " in " + pos);
             var indent = prefix.replaceAll(".", " ");
             System.out.println(indent + i.escapeLine());
             System.out.println(indent + i.hints());
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(MessageIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             println(i, "contains additional lines in commit message");
             for (var line : i.message().additional()) {
                 System.out.println("> " + line);
             }
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(MessageWhitespaceIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             String desc = null;
             if (i.kind().isTab()) {
                 desc = "tab";
             } else if (i.kind().isCR()) {
                 desc = "carriage-return";
@@ -234,11 +236,11 @@
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(IssuesIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             println(i, "missing reference to JBS issue in commit message");
             for (var line : i.commit().message()) {
                 System.out.println("> " + line);
             }
             hasDisplayedErrors = true;
diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesCheck.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesCheck.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesCheck.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesCheck.java
@@ -42,11 +42,12 @@
         if (commit.isMerge() || utils.addsHgTag(commit)) {
             return iterator();
         }
 
         var metadata = CommitIssue.metadata(commit, message, conf, this);
-        if (commit.message().isEmpty() || message.issues().isEmpty()) {
+        if (conf.checks().issues().required() &&
+            (commit.message().isEmpty() || message.issues().isEmpty())) {
             log.finer("issue: no reference to a JBS issue");
             return iterator(new IssuesIssue(metadata));
         }
 
         var pattern = Pattern.compile(conf.checks().issues().pattern());
diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesConfiguration.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesConfiguration.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesConfiguration.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/IssuesConfiguration.java
@@ -28,30 +28,37 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
 public class IssuesConfiguration {
     static final IssuesConfiguration DEFAULT =
-        new IssuesConfiguration("^(([A-Z][A-Z0-9]+-)?[0-9]+): (\\S.*)$");
+        new IssuesConfiguration("^(([A-Z][A-Z0-9]+-)?[0-9]+): (\\S.*)$", true);
 
     private final String pattern;
+    private final boolean required;
 
-    IssuesConfiguration(String pattern) {
+    IssuesConfiguration(String pattern, boolean required) {
         this.pattern = pattern;
+        this.required = required;
     }
 
     public String pattern() {
         return pattern;
     }
 
+    public boolean required() {
+        return required;
+    }
+
     static String name() {
         return "issues";
     }
 
     static IssuesConfiguration parse(Section s) {
         if (s == null) {
             return DEFAULT;
         }
 
         var pattern = s.get("pattern", DEFAULT.pattern());
-        return new IssuesConfiguration(pattern);
+        var required = s.get("required", DEFAULT.required());
+        return new IssuesConfiguration(pattern, required);
     }
 }
diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheckConfiguration.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheckConfiguration.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheckConfiguration.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheckConfiguration.java
@@ -71,17 +71,23 @@
         config.add("[general]");
         config.add("project=" + project);
         config.add("jbs=JDK");
 
         config.add("[checks]");
-        var error = "error=blacklist,author,committer,reviewers,merge,hg-tag,message,issues,executable,symlink";
+        var error = "error=blacklist,author,committer,reviewers,merge,issues,executable,symlink";
         var shouldCheckWhitespace = false;
         var checkWhitespace = old.get("whitespace");
         if (checkWhitespace == null || !checkWhitespace.asString().equals("lax")) {
             error += ",whitespace";
             shouldCheckWhitespace = true;
         }
+        var shouldCheckMessage = false;
+        var checkMessage = old.get("comments");
+        if (checkMessage == null || !checkMessage.asString().equals("lax")) {
+            error += ",message,hg-tag";
+            shouldCheckMessage = true;
+        }
         config.add(error);
 
         if (project.startsWith("jdk")) {
             config.add("[repository]");
 
@@ -116,18 +122,25 @@
 
         config.add("[checks \"merge\"]");
         config.add("message=Merge");
 
         config.add("[checks \"reviewers\"]");
-        config.add("contributors=1");
+        if (shouldCheckMessage) {
+            config.add("contributors=1");
+        } else {
+            config.add("contributors=0");
+        }
         config.add("ignore=duke");
 
         config.add("[checks \"committer\"]");
         config.add("role=contributor");
 
         config.add("[checks \"issues\"]");
         config.add("pattern=^([124-8][0-9]{6}): (\\S.*)$");
+        if (!shouldCheckMessage) {
+            config.add("required = false");
+        }
 
         return INI.parse(config);
     }
 
     public static JCheckConfiguration parse(List<String> lines) {
