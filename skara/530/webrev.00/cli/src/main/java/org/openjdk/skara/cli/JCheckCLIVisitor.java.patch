diff a/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java b/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
--- a/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/JCheckCLIVisitor.java
@@ -31,19 +31,21 @@
 import java.util.stream.Collectors;
 
 class JCheckCLIVisitor implements IssueVisitor {
     private final Set<String> ignore;
     private final boolean isMercurial;
+    private final boolean isLax;
     private boolean hasDisplayedErrors;
 
     public JCheckCLIVisitor() {
-        this(Set.of(), false);
+        this(Set.of(), false, false);
     }
 
-    public JCheckCLIVisitor(Set<String> ignore, boolean isMercurial) {
+    public JCheckCLIVisitor(Set<String> ignore, boolean isMercurial, boolean isLax) {
         this.ignore = ignore;
         this.isMercurial = isMercurial;
+        this.isLax = isLax;
         this.hasDisplayedErrors = false;
     }
 
     private String println(Issue i, String message) {
         var prefix = "[" + i.check().name() + "] " + i.severity() + ": ";
@@ -74,11 +76,11 @@
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(TagIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             println(i, "illegal tag name: " + i.tag().name());
             hasDisplayedErrors = true;
         }
     }
 
@@ -88,18 +90,18 @@
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(SelfReviewIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             println(i, "self-reviews are not allowed");
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(TooFewReviewersIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             var required = i.numRequired();
             var actual = i.numActual();
             var reviewers = required == 1 ? " reviewer" : " reviewers";
             println(i, required + reviewers + " required, found " + actual);
             hasDisplayedErrors = true;
@@ -114,18 +116,18 @@
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(MergeMessageIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             println(i, "merge commits should only use the commit message '" + i.expected() + "'");
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(HgTagCommitIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             hasDisplayedErrors = true;
             switch (i.error()) {
                 case TOO_MANY_LINES:
                     println(i, "message should only be one line");
                     return;
@@ -197,32 +199,32 @@
 
         return merged;
     }
 
     public void visit(WhitespaceIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             var pos = i.path() + ":" + i.row();
             var prefix = println(i, i.describe() + " in " + pos);
             var indent = prefix.replaceAll(".", " ");
             System.out.println(indent + i.escapeLine());
             System.out.println(indent + i.hints());
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(MessageIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             println(i, "contains additional lines in commit message");
             for (var line : i.message().additional()) {
                 System.out.println("> " + line);
             }
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(MessageWhitespaceIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             String desc = null;
             if (i.kind().isTab()) {
                 desc = "tab";
             } else if (i.kind().isCR()) {
                 desc = "carriage-return";
@@ -234,11 +236,11 @@
             hasDisplayedErrors = true;
         }
     }
 
     public void visit(IssuesIssue i) {
-        if (!ignore.contains(i.check().name())) {
+        if (!ignore.contains(i.check().name()) && !isLax) {
             println(i, "missing reference to JBS issue in commit message");
             for (var line : i.commit().message()) {
                 System.out.println("> " + line);
             }
             hasDisplayedErrors = true;
