diff a/.gitignore b/.gitignore
--- a/.gitignore
+++ b/.gitignore
@@ -22,11 +22,16 @@
 #
 .gradle
 .jdk
 .jib
 .classpath
-.idea
+.idea/workspace.xml
+.idea/modules.xml
+.idea/libraries
+.idea/shelf/
+.idea/tasks.xml
+.idea/usage.statistics.xml
 .project
 .settings
 *.iml
 build/
 out/
diff a/.idea/compiler.xml b/.idea/compiler.xml
--- /dev/null
+++ b/.idea/compiler.xml
@@ -0,0 +1,91 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="13">
+      <module name="skara.args.main" target="13" />
+      <module name="skara.args.test" target="13" />
+      <module name="skara.bot.main" target="13" />
+      <module name="skara.bot.test" target="13" />
+      <module name="skara.bots.bridgekeeper.main" target="13" />
+      <module name="skara.bots.bridgekeeper.test" target="13" />
+      <module name="skara.bots.cli.main" target="13" />
+      <module name="skara.bots.cli.test" target="13" />
+      <module name="skara.bots.csr.main" target="13" />
+      <module name="skara.bots.csr.test" target="13" />
+      <module name="skara.bots.forward.main" target="13" />
+      <module name="skara.bots.forward.test" target="13" />
+      <module name="skara.bots.hgbridge.main" target="13" />
+      <module name="skara.bots.hgbridge.test" target="13" />
+      <module name="skara.bots.merge.main" target="13" />
+      <module name="skara.bots.merge.test" target="13" />
+      <module name="skara.bots.mirror.main" target="13" />
+      <module name="skara.bots.mirror.test" target="13" />
+      <module name="skara.bots.mlbridge.main" target="13" />
+      <module name="skara.bots.mlbridge.test" target="13" />
+      <module name="skara.bots.notify.main" target="13" />
+      <module name="skara.bots.notify.test" target="13" />
+      <module name="skara.bots.pr.main" target="13" />
+      <module name="skara.bots.pr.test" target="13" />
+      <module name="skara.bots.submit.main" target="13" />
+      <module name="skara.bots.submit.test" target="13" />
+      <module name="skara.bots.tester.main" target="13" />
+      <module name="skara.bots.tester.test" target="13" />
+      <module name="skara.bots.topological.main" target="13" />
+      <module name="skara.bots.topological.test" target="13" />
+      <module name="skara.buildSrc.images.main" target="11" />
+      <module name="skara.buildSrc.images.test" target="11" />
+      <module name="skara.buildSrc.main" target="11" />
+      <module name="skara.buildSrc.module.main" target="11" />
+      <module name="skara.buildSrc.module.test" target="11" />
+      <module name="skara.buildSrc.proxy.main" target="11" />
+      <module name="skara.buildSrc.proxy.test" target="11" />
+      <module name="skara.buildSrc.reproduce.main" target="11" />
+      <module name="skara.buildSrc.reproduce.test" target="11" />
+      <module name="skara.buildSrc.test" target="11" />
+      <module name="skara.buildSrc.version.main" target="11" />
+      <module name="skara.buildSrc.version.test" target="11" />
+      <module name="skara.census.main" target="13" />
+      <module name="skara.census.test" target="13" />
+      <module name="skara.ci.main" target="13" />
+      <module name="skara.ci.test" target="13" />
+      <module name="skara.cli.main" target="13" />
+      <module name="skara.cli.test" target="13" />
+      <module name="skara.email.main" target="13" />
+      <module name="skara.email.test" target="13" />
+      <module name="skara.encoding.main" target="13" />
+      <module name="skara.encoding.test" target="13" />
+      <module name="skara.forge.main" target="13" />
+      <module name="skara.forge.test" target="13" />
+      <module name="skara.host.main" target="13" />
+      <module name="skara.host.test" target="13" />
+      <module name="skara.ini.main" target="13" />
+      <module name="skara.ini.test" target="13" />
+      <module name="skara.issuetracker.main" target="13" />
+      <module name="skara.issuetracker.test" target="13" />
+      <module name="skara.jcheck.main" target="13" />
+      <module name="skara.jcheck.test" target="13" />
+      <module name="skara.json.main" target="13" />
+      <module name="skara.json.test" target="13" />
+      <module name="skara.mailinglist.main" target="13" />
+      <module name="skara.mailinglist.test" target="13" />
+      <module name="skara.network.main" target="13" />
+      <module name="skara.network.test" target="13" />
+      <module name="skara.process.main" target="13" />
+      <module name="skara.process.test" target="13" />
+      <module name="skara.proxy.main" target="13" />
+      <module name="skara.proxy.test" target="13" />
+      <module name="skara.ssh.main" target="13" />
+      <module name="skara.ssh.test" target="13" />
+      <module name="skara.storage.main" target="13" />
+      <module name="skara.storage.test" target="13" />
+      <module name="skara.test.main" target="13" />
+      <module name="skara.test.test" target="13" />
+      <module name="skara.vcs.main" target="13" />
+      <module name="skara.vcs.test" target="13" />
+      <module name="skara.version.main" target="13" />
+      <module name="skara.version.test" target="13" />
+      <module name="skara.webrev.main" target="13" />
+      <module name="skara.webrev.test" target="13" />
+    </bytecodeTargetLevel>
+  </component>
+</project>
diff a/.idea/gradle.xml b/.idea/gradle.xml
--- /dev/null
+++ b/.idea/gradle.xml
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="delegatedBuild" value="true" />
+        <option name="testRunner" value="GRADLE" />
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleJvm" value="#JAVA_INTERNAL" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/args" />
+            <option value="$PROJECT_DIR$/bot" />
+            <option value="$PROJECT_DIR$/bots" />
+            <option value="$PROJECT_DIR$/bots/bridgekeeper" />
+            <option value="$PROJECT_DIR$/bots/cli" />
+            <option value="$PROJECT_DIR$/bots/csr" />
+            <option value="$PROJECT_DIR$/bots/forward" />
+            <option value="$PROJECT_DIR$/bots/hgbridge" />
+            <option value="$PROJECT_DIR$/bots/merge" />
+            <option value="$PROJECT_DIR$/bots/mirror" />
+            <option value="$PROJECT_DIR$/bots/mlbridge" />
+            <option value="$PROJECT_DIR$/bots/notify" />
+            <option value="$PROJECT_DIR$/bots/pr" />
+            <option value="$PROJECT_DIR$/bots/submit" />
+            <option value="$PROJECT_DIR$/bots/tester" />
+            <option value="$PROJECT_DIR$/bots/topological" />
+            <option value="$PROJECT_DIR$/buildSrc" />
+            <option value="$PROJECT_DIR$/buildSrc/images" />
+            <option value="$PROJECT_DIR$/buildSrc/module" />
+            <option value="$PROJECT_DIR$/buildSrc/proxy" />
+            <option value="$PROJECT_DIR$/buildSrc/reproduce" />
+            <option value="$PROJECT_DIR$/buildSrc/version" />
+            <option value="$PROJECT_DIR$/census" />
+            <option value="$PROJECT_DIR$/ci" />
+            <option value="$PROJECT_DIR$/cli" />
+            <option value="$PROJECT_DIR$/email" />
+            <option value="$PROJECT_DIR$/encoding" />
+            <option value="$PROJECT_DIR$/forge" />
+            <option value="$PROJECT_DIR$/host" />
+            <option value="$PROJECT_DIR$/ini" />
+            <option value="$PROJECT_DIR$/issuetracker" />
+            <option value="$PROJECT_DIR$/jcheck" />
+            <option value="$PROJECT_DIR$/json" />
+            <option value="$PROJECT_DIR$/mailinglist" />
+            <option value="$PROJECT_DIR$/network" />
+            <option value="$PROJECT_DIR$/process" />
+            <option value="$PROJECT_DIR$/proxy" />
+            <option value="$PROJECT_DIR$/ssh" />
+            <option value="$PROJECT_DIR$/storage" />
+            <option value="$PROJECT_DIR$/test" />
+            <option value="$PROJECT_DIR$/vcs" />
+            <option value="$PROJECT_DIR$/version" />
+            <option value="$PROJECT_DIR$/webrev" />
+          </set>
+        </option>
+        <option name="useAutoImport" value="true" />
+        <option name="useQualifiedModuleNames" value="true" />
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
diff a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
--- /dev/null
+++ b/.idea/jarRepositories.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="MavenLocal" />
+      <option name="name" value="MavenLocal" />
+      <option name="url" value="file:$MAVEN_REPOSITORY$/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="maven" />
+      <option name="name" value="maven" />
+      <option name="url" value="https://repo.maven.apache.org/maven2/" />
+    </remote-repository>
+  </component>
+</project>
diff a/.idea/misc.xml b/.idea/misc.xml
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="13" project-jdk-type="JavaSDK" />
+</project>
diff a/.idea/runConfigurations/Clean.xml b/.idea/runConfigurations/Clean.xml
--- /dev/null
+++ b/.idea/runConfigurations/Clean.xml
@@ -0,0 +1,21 @@
+<component name="ProjectRunConfigurationManager">
+  <configuration default="false" name="Clean" type="GradleRunConfiguration" factoryName="Gradle">
+    <ExternalSystemSettings>
+      <option name="executionName" />
+      <option name="externalProjectPath" value="$PROJECT_DIR$" />
+      <option name="externalSystemIdString" value="GRADLE" />
+      <option name="scriptParameters" value="" />
+      <option name="taskDescriptions">
+        <list />
+      </option>
+      <option name="taskNames">
+        <list>
+          <option value="clean" />
+        </list>
+      </option>
+      <option name="vmOptions" value="" />
+    </ExternalSystemSettings>
+    <GradleScriptDebugEnabled>true</GradleScriptDebugEnabled>
+    <method v="2" />
+  </configuration>
+</component>
diff a/.idea/runConfigurations/Images.xml b/.idea/runConfigurations/Images.xml
--- /dev/null
+++ b/.idea/runConfigurations/Images.xml
@@ -0,0 +1,21 @@
+<component name="ProjectRunConfigurationManager">
+  <configuration default="false" name="Images" type="GradleRunConfiguration" factoryName="Gradle">
+    <ExternalSystemSettings>
+      <option name="executionName" />
+      <option name="externalProjectPath" value="$PROJECT_DIR$" />
+      <option name="externalSystemIdString" value="GRADLE" />
+      <option name="scriptParameters" value="" />
+      <option name="taskDescriptions">
+        <list />
+      </option>
+      <option name="taskNames">
+        <list>
+          <option value="images" />
+        </list>
+      </option>
+      <option name="vmOptions" value="" />
+    </ExternalSystemSettings>
+    <GradleScriptDebugEnabled>true</GradleScriptDebugEnabled>
+    <method v="2" />
+  </configuration>
+</component>
diff a/.idea/runConfigurations/Test.xml b/.idea/runConfigurations/Test.xml
--- /dev/null
+++ b/.idea/runConfigurations/Test.xml
@@ -0,0 +1,21 @@
+<component name="ProjectRunConfigurationManager">
+  <configuration default="false" name="Test" type="GradleRunConfiguration" factoryName="Gradle">
+    <ExternalSystemSettings>
+      <option name="executionName" />
+      <option name="externalProjectPath" value="$PROJECT_DIR$" />
+      <option name="externalSystemIdString" value="GRADLE" />
+      <option name="scriptParameters" value="" />
+      <option name="taskDescriptions">
+        <list />
+      </option>
+      <option name="taskNames">
+        <list>
+          <option value="test" />
+        </list>
+      </option>
+      <option name="vmOptions" value="" />
+    </ExternalSystemSettings>
+    <GradleScriptDebugEnabled>true</GradleScriptDebugEnabled>
+    <method v="2" />
+  </configuration>
+</component>
diff a/.idea/vcs.xml b/.idea/vcs.xml
--- /dev/null
+++ b/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
diff a/README.md b/README.md
--- a/README.md
+++ b/README.md
@@ -140,10 +140,38 @@
 
 ```bash
 $ sh gradlew reproduce
 ```
 
+## Developing
+
+There are no additional dependencies required for developing Skara if you
+already have managed to build and test it. The following sections describes how
+you can set up various text editors and/or IDEs for working on Skara.
+
+### IntelliJ IDEA
+
+Skara has support for [IntellJ IDEA](https://www.jetbrains.com/idea/) out of the
+box, both the "Community" edition and the "Ultimate" edition. To work on Skara
+with IntelliJ IDEA you only have to "Open" the Skara directory.
+
+If you do not have a JDK 13 SDK set up in IntelliJ IDEA, then you need to set
+one up. IntelliJ IDEA will prompt you to set up a "Project SDK" when you open
+any Skara Java source code file. Press the "Setup SDK" button in the blue bar at
+the top of the Java source code file, then press "Configure" in the new dialog,
+then press the little "+" button in top-left corner in the next dialog and
+select a path containing a [JDK 13](https://jdk.java.net/13) home directory.
+
+There are currently three run configurations provided:
+
+- `Images` - create all jlinked images
+- `Test` - run all tests
+- `Clean` - remove all build and test artifacts
+
+To run any of the above configurations, click the "Run" top-level menu and then
+the "Run..." action (by default bound to the Alt+Shift+F10 key combination).
+
 ## Wiki
 
 Project Skara's wiki is available at <https://wiki.openjdk.java.net/display/skara>.
 
 ## Issues
diff a/build.gradle b/build.gradle
--- a/build.gradle
+++ b/build.gradle
@@ -25,17 +25,25 @@
     id 'org.openjdk.skara.gradle.proxy'
     id 'org.openjdk.skara.gradle.version'
     id 'org.openjdk.skara.gradle.reproduce'
 }
 
+def JAVA_HOMES = [
+    "LinuxX64": ".jdk/openjdk-13.0.1_linux-x64_bin/jdk-13.0.1",
+    "MacOSX64": ".jdk/openjdk-13.0.1_osx-x64_bin/jdk-13.0.1.jdk/Contents/Home/",
+    "WindowsX64": ".jdk/openjdk-13.0.1_windows-x64_bin/jdk-13.0.1/"
+]
+
 configure(subprojects.findAll() { it.name != 'bots' }) {
     apply plugin: 'java-library'
     apply plugin: 'maven-publish'
     apply plugin: 'org.openjdk.skara.gradle.module'
     apply plugin: 'org.openjdk.skara.gradle.version'
 
     group = 'org.openjdk.skara'
+    sourceCompatibility = 13
+    targetCompatibility = 13
 
     repositories {
         mavenLocal()
         maven {
             url System.getProperty('maven.url', 'https://repo.maven.apache.org/maven2/')
@@ -49,12 +57,34 @@
         // Force Gradle to load the JUnit Platform Launcher from the module-path, as
         // configured in buildSrc/.../ModulePlugin.java -- see SKARA-69 for details.
         testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.5.2'
     }
 
-    compileJava.options.encoding = 'UTF-8'
-    compileTestJava.options.encoding = 'UTF-8'
+    compileJava {
+        gradle.taskGraph.whenReady { graph ->
+            if (!graph.hasTask(":offline")) {
+                dependsOn project(":").getTasksByName("download" + getOSAndCPU() + "JDK", false)
+                options.forkOptions.javaHome = file(project.rootDir.toString() + "/" + JAVA_HOMES[getOSAndCPU()])
+                options.compilerArgs += ['--release', '13']
+                options.fork = true
+                options.sourcepath = files(sourceSets.main.java.srcDirs)
+            }
+        }
+        options.encoding = 'UTF-8'
+    }
+
+    compileTestJava {
+        gradle.taskGraph.whenReady { graph ->
+            if (!graph.hasTask(":offline")) {
+                dependsOn project(":").getTasksByName("download" + getOSAndCPU() + "JDK", false)
+                options.forkOptions.javaHome = file(project.rootDir.toString() + "/" + JAVA_HOMES[getOSAndCPU()])
+                options.compilerArgs += ['--release', '13']
+                options.fork = true
+            }
+        }
+        options.encoding = 'UTF-8'
+    }
 
     test {
         useJUnitPlatform()
 
         if (findProperty('credentials')) {
@@ -63,10 +93,17 @@
 
         testLogging {
             events "passed", "skipped", "failed"
             exceptionFormat "full"
         }
+
+        gradle.taskGraph.whenReady { graph ->
+            if (!graph.hasTask(":offline")) {
+                dependsOn project(":").getTasksByName("download" + getOSAndCPU() + "JDK", false)
+                executable = file(project.rootDir.toString() + "/" + JAVA_HOMES[getOSAndCPU()] + "/bin/java" + (getOS() == "windows" ? ".exe" : ""))
+            }
+        }
     }
 
     publishing {
         repositories {
             maven {
@@ -142,22 +179,29 @@
         return 'aarch64';
     }
     throw new GradleException("Unexpected CPU: " + cpu)
 }
 
+def getOSAndCPU() {
+    return combineOSAndCPU(getOS(), getCPU())
+}
+
+def combineOSAndCPU(os, cpu) {
+    return os.substring(0, 1).toUpperCase() + os.substring(1) +
+           cpu.substring(0, 1).toUpperCase() + cpu.substring(1)
+}
+
 task local(type: Copy) {
     doFirst {
         delete project.buildDir
     }
 
     def os = getOS()
     def cpu = getCPU()
 
     if (os in ['linux', 'macos', 'windows'] && cpu == 'x64') {
-        def target = os.substring(0, 1).toUpperCase() + os.substring(1) +
-                     cpu.substring(0, 1).toUpperCase() + cpu.substring(1)
-        dependsOn ':cli:image' + target
+        dependsOn ':cli:image' + combineOSAndCPU(os, cpu)
     } else {
         dependsOn ':cli:imageLocal'
     }
 
     from zipTree(file(project.rootDir.toString() +
diff a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
--- a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
+++ b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
@@ -28,11 +28,13 @@
 import org.gradle.api.tasks.bundling.*;
 import org.gradle.api.artifacts.UnknownConfigurationException;
 
 import java.util.ArrayList;
 import java.util.HashSet;
+import java.util.Map;
 import java.io.File;
+import java.nio.file.Path;
 
 public class ImagesPlugin implements Plugin<Project> {
     private static String getOS() {
         var p = System.getProperty("os.name").toLowerCase();
         if (p.startsWith("win")) {
@@ -86,10 +88,11 @@
         project.getExtensions().add("images", imageEnvironmentContainer);
 
         var projectPath = project.getPath();
         var taskNames = new ArrayList<String>();
         var rootDir = project.getRootDir().toPath().toAbsolutePath();
+        var rootProject = project.getRootProject();
         var buildDir = project.getBuildDir().toPath().toAbsolutePath();
 
         imageEnvironmentContainer.all(new Action<ImageEnvironment>() {
             public void execute(ImageEnvironment env) {
                 var parts = env.getName().split("_");;
@@ -100,12 +103,12 @@
                     os.substring(0, 1).toUpperCase() + os.substring(1) +
                     cpu.substring(0, 1).toUpperCase() + cpu.substring(1);
                 var subName = isLocal ? "Local" : osAndCpuPascalCased;
 
                 var downloadTaskName = "download" + subName + "JDK";
-                if (!isLocal) {
-                    project.getTasks().register(downloadTaskName, DownloadJDKTask.class, (task) -> {
+                if (!isLocal && rootProject.getTasksByName(downloadTaskName, false).isEmpty()) {
+                    project.getRootProject().getTasks().register(downloadTaskName, DownloadJDKTask.class, (task) -> {
                         task.getUrl().set(env.getUrl());
                         task.getSha256().set(env.getSha256());
                         task.getToDir().set(rootDir.resolve(".jdk"));
                     });
                 }
@@ -125,20 +128,37 @@
                     } catch (UnknownConfigurationException e) {
                         // ignored
                     }
 
                     if (!isLocal) {
-                        task.dependsOn(projectPath + ":" + downloadTaskName);
+                        task.dependsOn(project.getRootProject().getTasksByName(downloadTaskName, false));
                         task.getUrl().set(env.getUrl());
                     } else {
                         task.getUrl().set("local");
                     }
                     task.getToDir().set(buildDir.resolve("images"));
                     task.getOS().set(os);
                     task.getCPU().set(cpu);
                     task.getLaunchers().set(env.getLaunchers());
                     task.getModules().set(env.getModules());
+                    if (isLocal) {
+                        task.getJLink().set(Path.of(System.getProperty("java.home"), "bin", "jlink").toAbsolutePath().toString());
+                    } else {
+                        var javaHomes = Map.of(
+                            "linux_x64", ".jdk/openjdk-13.0.1_linux-x64_bin/jdk-13.0.1",
+                            "macos_x64", ".jdk/openjdk-13.0.1_osx-x64_bin/jdk-13.0.1.jdk/Contents/Home/",
+                            "windows_x64", ".jdk/openjdk-13.0.1_windows-x64_bin/jdk-13.0.1/"
+                        );
+                        var currentOS = getOS();
+                        var currentCPU = getCPU();
+                        var javaHome = javaHomes.get(currentOS + "_" + currentCPU);
+                        if (javaHome == null) {
+                            throw new RuntimeException("No JDK found for " + currentOS + " " + currentCPU);
+                        }
+                        task.getJLink().set(rootDir.toString() + "/" + javaHome + "/bin/jlink" +
+                                            (currentOS.equals("windows") ? ".exe." : ""));
+                    }
                 });
 
                 var launchersTaskName = "launchers" + subName;
                 project.getTasks().register(launchersTaskName, LaunchersTask.class, (task) -> {
                     task.getLaunchers().set(env.getLaunchers());
@@ -212,11 +232,13 @@
                             task.dependsOn(projectPath + ":" + gzipTaskName);
                         }
                     }
                 });
 
-                taskNames.add(imageTaskName);
+                if (!isLocal) {
+                    taskNames.add(imageTaskName);
+                }
             }
         });
 
         project.getTasks().register("images", DefaultTask.class, (task) -> {
             for (var name : taskNames) {
diff a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/LinkTask.java b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/LinkTask.java
--- a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/LinkTask.java
+++ b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/LinkTask.java
@@ -41,10 +41,11 @@
 
 public class LinkTask extends DefaultTask {
     private final Property<String> os;
     private final Property<String> cpu;
     private final Property<String> url;
+    private final Property<String> jlink;
     private final Property<Path> toDir;
     private final MapProperty<String, String> launchers;
     private final ListProperty<String> modules;
     private final SetProperty<RegularFile> modulePath;
     private final SetProperty<FileSystemLocation> runtimeModules;
@@ -52,10 +53,11 @@
     @Inject
     public LinkTask(ObjectFactory factory) {
         os = factory.property(String.class);
         cpu = factory.property(String.class);
         url = factory.property(String.class);
+        jlink = factory.property(String.class);
         toDir = factory.property(Path.class);
         launchers = factory.mapProperty(String.class, String.class);
         modules = factory.listProperty(String.class);
         modulePath = factory.setProperty(RegularFile.class);
         runtimeModules = factory.setProperty(FileSystemLocation.class);
@@ -79,10 +81,15 @@
     @Input
     Property<String> getUrl() {
         return url;
     }
 
+    @Input
+    Property<String> getJLink() {
+        return jlink;
+    }
+
     @Input
     MapProperty<String, String> getLaunchers() {
         return launchers;
     }
 
@@ -161,13 +168,12 @@
         }
 
         Collections.sort(modulePath);
         Collections.sort(allModules);
 
-        var jlink = Path.of(System.getProperty("java.home"), "bin", "jlink").toAbsolutePath().toString();
         project.exec((spec) -> {
-            spec.setCommandLine(jlink, "--module-path", String.join(File.pathSeparator, modulePath),
+            spec.setCommandLine(jlink.get(), "--module-path", String.join(File.pathSeparator, modulePath),
                                        "--add-modules", String.join(",", allModules),
                                        "--no-man-pages",
                                        "--no-header-files",
                                        "--compress", "2",
                                        "--vm", "server",
diff a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -17,7 +17,11 @@
 #
 # Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 # or visit www.oracle.com if you need additional information or have any
 # questions.
 
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.0-bin.zip
-distributionSha256Sum=5a3578b9f0bb162f5e08cf119f447dfb8fa950cedebb4d2a977e912a11a74b91
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.0-all.zip
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionSha256Sum=a1eb4439c0a85bc7e64a22658d862e43b7d0ddfbf69a7abf6256e0b7514295df
+zipStorePath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
