diff a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
--- a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
+++ b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
@@ -28,11 +28,13 @@
 import org.gradle.api.tasks.bundling.*;
 import org.gradle.api.artifacts.UnknownConfigurationException;
 
 import java.util.ArrayList;
 import java.util.HashSet;
+import java.util.Map;
 import java.io.File;
+import java.nio.file.Path;
 
 public class ImagesPlugin implements Plugin<Project> {
     private static String getOS() {
         var p = System.getProperty("os.name").toLowerCase();
         if (p.startsWith("win")) {
@@ -86,10 +88,11 @@
         project.getExtensions().add("images", imageEnvironmentContainer);
 
         var projectPath = project.getPath();
         var taskNames = new ArrayList<String>();
         var rootDir = project.getRootDir().toPath().toAbsolutePath();
+        var rootProject = project.getRootProject();
         var buildDir = project.getBuildDir().toPath().toAbsolutePath();
 
         imageEnvironmentContainer.all(new Action<ImageEnvironment>() {
             public void execute(ImageEnvironment env) {
                 var parts = env.getName().split("_");;
@@ -100,12 +103,12 @@
                     os.substring(0, 1).toUpperCase() + os.substring(1) +
                     cpu.substring(0, 1).toUpperCase() + cpu.substring(1);
                 var subName = isLocal ? "Local" : osAndCpuPascalCased;
 
                 var downloadTaskName = "download" + subName + "JDK";
-                if (!isLocal) {
-                    project.getTasks().register(downloadTaskName, DownloadJDKTask.class, (task) -> {
+                if (!isLocal && rootProject.getTasksByName(downloadTaskName, false).isEmpty()) {
+                    project.getRootProject().getTasks().register(downloadTaskName, DownloadJDKTask.class, (task) -> {
                         task.getUrl().set(env.getUrl());
                         task.getSha256().set(env.getSha256());
                         task.getToDir().set(rootDir.resolve(".jdk"));
                     });
                 }
@@ -125,20 +128,37 @@
                     } catch (UnknownConfigurationException e) {
                         // ignored
                     }
 
                     if (!isLocal) {
-                        task.dependsOn(projectPath + ":" + downloadTaskName);
+                        task.dependsOn(project.getRootProject().getTasksByName(downloadTaskName, false));
                         task.getUrl().set(env.getUrl());
                     } else {
                         task.getUrl().set("local");
                     }
                     task.getToDir().set(buildDir.resolve("images"));
                     task.getOS().set(os);
                     task.getCPU().set(cpu);
                     task.getLaunchers().set(env.getLaunchers());
                     task.getModules().set(env.getModules());
+                    if (isLocal) {
+                        task.getJLink().set(Path.of(System.getProperty("java.home"), "bin", "jlink").toAbsolutePath().toString());
+                    } else {
+                        var javaHomes = Map.of(
+                            "linux_x64", ".jdk/openjdk-13.0.1_linux-x64_bin/jdk-13.0.1",
+                            "macos_x64", ".jdk/openjdk-13.0.1_osx-x64_bin/jdk-13.0.1.jdk/Contents/Home/",
+                            "windows_x64", ".jdk/openjdk-13.0.1_windows-x64_bin/jdk-13.0.1/"
+                        );
+                        var currentOS = getOS();
+                        var currentCPU = getCPU();
+                        var javaHome = javaHomes.get(currentOS + "_" + currentCPU);
+                        if (javaHome == null) {
+                            throw new RuntimeException("No JDK found for " + currentOS + " " + currentCPU);
+                        }
+                        task.getJLink().set(rootDir.toString() + "/" + javaHome + "/bin/jlink" +
+                                            (currentOS.equals("windows") ? ".exe." : ""));
+                    }
                 });
 
                 var launchersTaskName = "launchers" + subName;
                 project.getTasks().register(launchersTaskName, LaunchersTask.class, (task) -> {
                     task.getLaunchers().set(env.getLaunchers());
@@ -212,11 +232,13 @@
                             task.dependsOn(projectPath + ":" + gzipTaskName);
                         }
                     }
                 });
 
-                taskNames.add(imageTaskName);
+                if (!isLocal) {
+                    taskNames.add(imageTaskName);
+                }
             }
         });
 
         project.getTasks().register("images", DefaultTask.class, (task) -> {
             for (var name : taskNames) {
