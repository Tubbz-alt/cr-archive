diff a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
--- a/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
+++ b/buildSrc/images/src/main/java/org/openjdk/skara/gradle/images/ImagesPlugin.java
@@ -143,21 +143,24 @@
                     if (isLocal) {
                         task.getJLink().set(Path.of(System.getProperty("java.home"), "bin", "jlink").toAbsolutePath().toString());
                     } else {
                         var javaHomes = Map.of(
                             "linux_x64", ".jdk/openjdk-13.0.1_linux-x64_bin/jdk-13.0.1",
-                            "macos_x64", ".jdk/openjdk-13.0.1_osx-x64_bin/jdk-13.0.1.jdk/Contents/Home/",
-                            "windows_x64", ".jdk/openjdk-13.0.1_windows-x64_bin/jdk-13.0.1/"
+                            "macos_x64", ".jdk/openjdk-13.0.1_osx-x64_bin/jdk-13.0.1.jdk/Contents/Home",
+                            "windows_x64", ".jdk\\openjdk-13.0.1_windows-x64_bin"
                         );
                         var currentOS = getOS();
                         var currentCPU = getCPU();
                         var javaHome = javaHomes.get(currentOS + "_" + currentCPU);
                         if (javaHome == null) {
                             throw new RuntimeException("No JDK found for " + currentOS + " " + currentCPU);
                         }
-                        task.getJLink().set(rootDir.toString() + "/" + javaHome + "/bin/jlink" +
-                                            (currentOS.equals("windows") ? ".exe." : ""));
+                        if (currentOS.equals("windows")) {
+                            task.getJLink().set(rootDir.toString() + "\\" + javaHome + "\\bin\\jlink.exe");
+                        } else {
+                            task.getJLink().set(rootDir.toString() + "/" + javaHome + "/bin/jlink");
+                        }
                     }
                 });
 
                 var launchersTaskName = "launchers" + subName;
                 project.getTasks().register(launchersTaskName, LaunchersTask.class, (task) -> {
