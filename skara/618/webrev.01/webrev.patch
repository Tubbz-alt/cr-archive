diff a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
--- a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
+++ b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
@@ -41,10 +41,11 @@
 import java.util.*;
 import java.util.stream.Collectors;
 import java.util.logging.Logger;
 
 class MergeBot implements Bot, WorkItem {
+    private final String integrationCommand = "/integrate\n<!-- Valid self-command -->";
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots");;
     private final Path storage;
 
     private final HostedRepositoryPool pool;
     private final HostedRepository target;
@@ -324,14 +325,14 @@
                         if (pr.labels().contains("ready") && !pr.labels().contains("sponsor")) {
                             var comments = pr.comments();
                             var integrateComments =
                                 comments.stream()
                                         .filter(c -> c.author().equals(currentUser))
-                                        .filter(c -> c.body().equals("/integrate"))
+                                        .filter(c -> c.body().equals(integrationCommand))
                                         .collect(Collectors.toList());
                             if (integrateComments.isEmpty()) {
-                                pr.addComment("/integrate");
+                                pr.addComment(integrationCommand);
                             } else {
                                 var lastIntegrateComment = integrateComments.get(integrateComments.size() - 1);
                                 var id = lastIntegrateComment.id();
                                 var botUserId = "43336822";
                                 var replyMarker = "<!-- Jmerge command reply message (" + id + ") -->";
@@ -347,11 +348,11 @@
                                     var lastReply = replies.get(replies.size() - 1);
                                     var lines = lastReply.body().split("\n");
                                     var errorPrefix = "@openjdk-bot Your merge request cannot be fulfilled at this time";
                                     if (lines.length > 1 && lines[1].startsWith(errorPrefix)) {
                                         // Try again
-                                        pr.addComment("/integrate");
+                                        pr.addComment(integrationCommand);
                                     }
                                     // Other reply, potentially due to rebase issue, just
                                     // wait for the labeler to add appropriate labels.
                                 }
                             }
diff a/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java b/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
--- a/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
+++ b/bots/merge/src/test/java/org/openjdk/skara/bots/merge/MergeBotTests.java
@@ -658,11 +658,11 @@
             assertEquals(1, pullRequests.size());
 
             pr = pullRequests.get(0);
             var numComments = pr.comments().size();
             var lastComment = pr.comments().get(pr.comments().size() - 1);
-            assertEquals("/integrate", lastComment.body());
+            assertEquals("/integrate\n<!-- Valid self-command -->", lastComment.body());
 
             // Running the bot again should not result in another comment
             TestBotRunner.runPeriodicItems(bot);
             assertEquals(numComments, toHostedRepo.pullRequests().size());
         }
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
@@ -32,14 +32,16 @@
 import java.util.logging.Logger;
 import java.util.regex.*;
 import java.util.stream.*;
 
 public class CommandWorkItem extends PullRequestWorkItem {
-    private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
+    private static final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
-    private final String commandReplyMarker = "<!-- Jmerge command reply message (%s) -->";
-    private final Pattern commandReplyPattern = Pattern.compile("<!-- Jmerge command reply message \\((\\S+)\\) -->");
+    private static final Pattern commandPattern = Pattern.compile("^/(.*)");
+    private static final String commandReplyMarker = "<!-- Jmerge command reply message (%s) -->";
+    private static final Pattern commandReplyPattern = Pattern.compile("<!-- Jmerge command reply message \\((\\S+)\\) -->");
+    private static final String selfCommandMarker = "<!-- Valid self-command -->";
 
     private final static Map<String, CommandHandler> commandHandlers = Map.of(
             "help", new HelpCommand(),
             "integrate", new IntegrateCommand(),
             "sponsor", new SponsorCommand(),
@@ -82,14 +84,12 @@
                               .map(comment -> commandReplyPattern.matcher(comment.body()))
                               .filter(Matcher::find)
                               .map(matcher -> matcher.group(1))
                               .collect(Collectors.toSet());
 
-        var commandPattern = Pattern.compile("^/(.*)");
-
         return comments.stream()
-                       .filter(comment -> !comment.author().equals(self))
+                       .filter(comment -> !comment.author().equals(self) || comment.body().endsWith(selfCommandMarker))
                        .map(comment -> new AbstractMap.SimpleEntry<>(comment, commandPattern.matcher(comment.body())))
                        .filter(entry -> entry.getValue().find())
                        .filter(entry -> !handled.contains(entry.getKey().id()))
                        .map(entry -> new AbstractMap.SimpleEntry<>(entry.getValue().group(1), entry.getKey()))
                        .collect(Collectors.toList());
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CommandTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CommandTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CommandTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CommandTests.java
@@ -101,6 +101,52 @@
                           .filter(comment -> comment.body().contains("sponsor"))
                           .count();
             assertEquals(1, error);
         }
     }
+
+    @Test
+    void selfCommand(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addAuthor(author.forge().currentUser().id());
+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();
+
+            // Populate the projects repository
+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.url(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.url(), "refs/heads/edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+
+            // Issue an command using the bot account
+            var botPr = integrator.pullRequest(pr.id());
+            botPr.addComment("/help");
+
+            // The bot should not reply
+            assertEquals(1, pr.comments().size());
+            TestBotRunner.runPeriodicItems(mergeBot);
+            assertEquals(1, pr.comments().size());
+
+            // But if we add an overriding marker, it should
+            botPr.addComment("/help\n<!-- Valid self-command -->");
+
+            assertEquals(2, pr.comments().size());
+            TestBotRunner.runPeriodicItems(mergeBot);
+            assertEquals(3, pr.comments().size());
+
+            var help = pr.comments().stream()
+                         .filter(comment -> comment.body().contains("Available commands"))
+                         .filter(comment -> comment.body().contains("help"))
+                         .count();
+            assertEquals(1, help);
+        }
+    }
 }
