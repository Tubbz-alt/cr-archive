diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
@@ -32,16 +32,16 @@
 import java.util.logging.Logger;
 import java.util.regex.*;
 import java.util.stream.*;
 
 public class CommandWorkItem extends PullRequestWorkItem {
-    private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
+    private static final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
-    private final Pattern commandPattern = Pattern.compile("^/(.*)");
-    private final String commandReplyMarker = "<!-- Jmerge command reply message (%s) -->";
-    private final Pattern commandReplyPattern = Pattern.compile("<!-- Jmerge command reply message \\((\\S+)\\) -->");
-    private final String selfCommandMarker = "<!-- Valid self-command -->";
+    private static final Pattern commandPattern = Pattern.compile("^/(.*)");
+    private static final String commandReplyMarker = "<!-- Jmerge command reply message (%s) -->";
+    private static final Pattern commandReplyPattern = Pattern.compile("<!-- Jmerge command reply message \\((\\S+)\\) -->");
+    private static final String selfCommandMarker = "<!-- Valid self-command -->";
 
     private final static Map<String, CommandHandler> commandHandlers = Map.of(
             "help", new HelpCommand(),
             "integrate", new IntegrateCommand(),
             "sponsor", new SponsorCommand(),
@@ -85,12 +85,12 @@
                               .filter(Matcher::find)
                               .map(matcher -> matcher.group(1))
                               .collect(Collectors.toSet());
 
         return comments.stream()
+                       .filter(comment -> !comment.author().equals(self) || comment.body().endsWith(selfCommandMarker))
                        .map(comment -> new AbstractMap.SimpleEntry<>(comment, commandPattern.matcher(comment.body())))
-                       .filter(entry -> !entry.getKey().author().equals(self) || entry.getKey().body().endsWith(selfCommandMarker))
                        .filter(entry -> entry.getValue().find())
                        .filter(entry -> !handled.contains(entry.getKey().id()))
                        .map(entry -> new AbstractMap.SimpleEntry<>(entry.getValue().group(1), entry.getKey()))
                        .collect(Collectors.toList());
     }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CommandTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CommandTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CommandTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CommandTests.java
@@ -127,11 +127,10 @@
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Issue an command using the bot account
             var botPr = integrator.pullRequest(pr.id());
             botPr.addComment("/help");
-            TestBotRunner.runPeriodicItems(mergeBot);
 
             // The bot should not reply
             assertEquals(1, pr.comments().size());
             TestBotRunner.runPeriodicItems(mergeBot);
             assertEquals(1, pr.comments().size());
@@ -144,10 +143,10 @@
             assertEquals(3, pr.comments().size());
 
             var help = pr.comments().stream()
                          .filter(comment -> comment.body().contains("Available commands"))
                          .filter(comment -> comment.body().contains("help"))
-                          .count();
+                         .count();
             assertEquals(1, help);
         }
     }
 }
