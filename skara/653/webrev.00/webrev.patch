diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestListener.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestListener.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestListener.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestListener.java
@@ -25,14 +25,14 @@
 import org.openjdk.skara.forge.PullRequest;
 import org.openjdk.skara.vcs.Hash;
 import org.openjdk.skara.vcs.openjdk.Issue;
 
 public interface PullRequestListener {
-    default void handleNewIssue(PullRequest pr, Issue issue) {
+    default void onNewIssue(PullRequest pr, Issue issue) {
     }
-    default void handleRemovedIssue(PullRequest pr, Issue issue) {
+    default void onRemovedIssue(PullRequest pr, Issue issue) {
     }
-    default void handleNewPullRequest(PullRequest pr) {
+    default void onNewPullRequest(PullRequest pr) {
     }
-    default void handleIntegratedPullRequest(PullRequest pr, Hash hash) {
+    default void onIntegratedPullRequest(PullRequest pr, Hash hash) {
     }
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
@@ -155,23 +155,23 @@
         }
         return false;
     }
 
     private void notifyNewIssue(String issueId) {
-        listeners.forEach(c -> c.handleNewIssue(pr, new Issue(issueId, "")));
+        listeners.forEach(c -> c.onNewIssue(pr, new Issue(issueId, "")));
     }
 
     private void notifyRemovedIssue(String issueId) {
-        listeners.forEach(c -> c.handleRemovedIssue(pr, new Issue(issueId, "")));
+        listeners.forEach(c -> c.onRemovedIssue(pr, new Issue(issueId, "")));
     }
 
     private void notifyNewPr(PullRequest pr) {
-        listeners.forEach(c -> c.handleNewPullRequest(pr));
+        listeners.forEach(c -> c.onNewPullRequest(pr));
     }
 
     private void notifyIntegratedPr(PullRequest pr, Hash hash) {
-        listeners.forEach(c -> c.handleIntegratedPullRequest(pr, hash));
+        listeners.forEach(c -> c.onIntegratedPullRequest(pr, hash));
     }
 
     @Override
     public Collection<WorkItem> run(Path scratchPath) {
         var historyPath = scratchPath.resolve("notify").resolve("history");
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryListener.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryListener.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryListener.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryListener.java
@@ -27,15 +27,15 @@
 import org.openjdk.skara.vcs.openjdk.OpenJDKTag;
 
 import java.util.List;
 
 public interface RepositoryListener {
-    default void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
+    default void onNewCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
     }
-    default void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) throws NonRetriableException {
+    default void onNewOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) throws NonRetriableException {
     }
-    default void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) throws NonRetriableException {
+    default void onNewTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) throws NonRetriableException {
     }
-    default void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) throws NonRetriableException {
+    default void onNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) throws NonRetriableException {
     }
     String name();
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryWorkItem.java
@@ -82,16 +82,16 @@
         } catch (IOException e) {
             throw new UncheckedIOException(e);
         }
         var branch = new Branch(ref.name());
         var parent = new Branch(bestParent.getKey().name());
-        listener.handleNewBranch(repository, localRepo, bestParentCommits, parent, branch);
+        listener.onNewBranch(repository, localRepo, bestParentCommits, parent, branch);
     }
 
     private void handleUpdatedRef(Repository localRepo, Reference ref, List<Commit> commits, RepositoryListener listener) throws NonRetriableException {
         var branch = new Branch(ref.name());
-        listener.handleCommits(repository, localRepo, commits, branch);
+        listener.onNewCommits(repository, localRepo, commits, branch);
     }
 
     private List<Throwable> handleRef(Repository localRepo, UpdateHistory history, Reference ref, Collection<Reference> allRefs) throws IOException {
         var errors = new ArrayList<Throwable>();
         var branch = new Branch(ref.name());
@@ -206,11 +206,11 @@
             Collections.reverse(commits);
             var annotation = localRepo.annotate(tag.tag());
 
             history.addTags(List.of(tag.tag()), listener.name());
             try {
-                listener.handleOpenJDKTagCommits(repository, localRepo, commits, tag, annotation.orElse(null));
+                listener.onNewOpenJDKTagCommits(repository, localRepo, commits, tag, annotation.orElse(null));
             } catch (NonRetriableException e) {
                 errors.add(e.cause());
             } catch (RuntimeException e) {
                 errors.add(e);
                 history.retryTagUpdate(tag.tag(), listener.name());
@@ -228,11 +228,11 @@
 
             var annotation = localRepo.annotate(tag);
 
             history.addTags(List.of(tag), listener.name());
             try {
-                listener.handleTagCommit(repository, localRepo, commit.get(), tag, annotation.orElse(null));
+                listener.onNewTagCommit(repository, localRepo, commit.get(), tag, annotation.orElse(null));
             } catch (NonRetriableException e) {
                 errors.add(e.cause());
             } catch (RuntimeException e) {
                 errors.add(e);
                 history.retryTagUpdate(tag, listener.name());
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueNotifier.java
@@ -71,11 +71,11 @@
     public void attachTo(Emitter e) {
         e.registerPullRequestListener(this);
     }
 
     @Override
-    public void handleIntegratedPullRequest(PullRequest pr, Hash hash)  {
+    public void onIntegratedPullRequest(PullRequest pr, Hash hash)  {
         var repository = pr.repository();
         var commit = repository.commitMetadata(hash).orElseThrow(() ->
                 new IllegalStateException("Integrated commit " + hash +
                                           " not present in repository " + repository.webUrl())
         );
@@ -113,11 +113,11 @@
             }
         }
     }
 
     @Override
-    public void handleNewIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
+    public void onNewIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
         var realIssue = issueProject.issue(issue.shortId());
         if (realIssue.isEmpty()) {
             log.warning("Pull request " + pr + " added unknown issue: " + issue.id());
             return;
         }
@@ -133,11 +133,11 @@
             realIssue.get().addLink(linkBuilder.build());
         }
     }
 
     @Override
-    public void handleRemovedIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
+    public void onRemovedIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {
         var realIssue = issueProject.issue(issue.shortId());
         if (realIssue.isEmpty()) {
             log.warning("Pull request " + pr + " removed unknown issue: " + issue.id());
             return;
         }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java
@@ -80,11 +80,11 @@
     public void attachTo(Emitter e) {
         e.registerRepositoryListener(this);
     }
 
     @Override
-    public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
+    public void onNewCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
         try (var writer = new JsonWriter(path, repository.name())) {
             for (var commit : commits) {
                 var json = commitToChanges(repository, localRepository, commit, defaultBuild);
                 writer.write(json);
             }
@@ -92,11 +92,11 @@
             throw new NonRetriableException(e);
         }
     }
 
     @Override
-    public void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) throws NonRetriableException {
+    public void onNewOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) throws NonRetriableException {
         var build = String.format("b%02d", tag.buildNum());
         try (var writer = new JsonWriter(path, repository.name())) {
             var issues = new ArrayList<Issue>();
             for (var commit : commits) {
                 var parsedMessage = CommitMessageParsers.v1.parse(commit);
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/mailinglist/MailingListNotifier.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/mailinglist/MailingListNotifier.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/mailinglist/MailingListNotifier.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/mailinglist/MailingListNotifier.java
@@ -217,24 +217,24 @@
     public void attachTo(Emitter e) {
         e.registerRepositoryListener(this);
     }
 
     @Override
-    public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
+    public void onNewCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
         if (mode == Mode.PR) {
             commits = filterPrCommits(repository, localRepository, commits, branch);
         }
         sendCombinedCommits(repository, commits, branch);
     }
 
     @Override
-    public void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) throws NonRetriableException {
+    public void onNewOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) throws NonRetriableException {
         if (!reportNewTags) {
             return;
         }
         if (!reportNewBuilds) {
-            handleTagCommit(repository, localRepository, commits.get(commits.size() - 1), tag.tag(), annotation);
+            onNewTagCommit(repository, localRepository, commits.get(commits.size() - 1), tag.tag(), annotation);
             return;
         }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
@@ -273,11 +273,11 @@
             throw new NonRetriableException(e);
         }
     }
 
     @Override
-    public void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) throws NonRetriableException {
+    public void onNewTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) throws NonRetriableException {
         if (!reportNewTags) {
             return;
         }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
@@ -325,11 +325,11 @@
 
         return subject.toString();
     }
 
     @Override
-    public void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) throws NonRetriableException {
+    public void onNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) throws NonRetriableException {
         if (!reportNewBranches) {
             return;
         }
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/slack/SlackNotifier.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/slack/SlackNotifier.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/slack/SlackNotifier.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/slack/SlackNotifier.java
@@ -51,11 +51,11 @@
         e.registerPullRequestListener(this);
         e.registerRepositoryListener(this);
     }
 
     @Override
-    public void handleNewPullRequest(PullRequest pr) {
+    public void onNewPullRequest(PullRequest pr) {
         if (prWebhook == null) {
             return;
         }
 
         try {
@@ -69,14 +69,14 @@
             throw new UncheckedIOException(e);
         }
     }
 
     @Override
-    public void handleCommits(HostedRepository repository,
-                              Repository localRepository,
-                              List<Commit> commits,
-                              Branch branch) throws NonRetriableException {
+    public void onNewCommits(HostedRepository repository,
+                             Repository localRepository,
+                             List<Commit> commits,
+                             Branch branch) throws NonRetriableException {
         if (commitWebhook == null) {
             return;
         }
 
         try {
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -48,11 +48,11 @@
             this.name = name;
             this.idempotent = idempotent;
         }
 
         @Override
-        public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits,
+        public void onNewCommits(HostedRepository repository, Repository localRepository, List<Commit> commits,
                                   Branch branch) throws NonRetriableException {
             updateCount++;
             if (shouldFail) {
                 if (idempotent) {
                     throw new RuntimeException("induced failure");
@@ -61,23 +61,23 @@
                 }
             }
         }
 
         @Override
-        public void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository,
+        public void onNewOpenJDKTagCommits(HostedRepository repository, Repository localRepository,
          List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) {
             throw new RuntimeException("unexpected");
         }
 
         @Override
-        public void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag,
+        public void onNewTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag,
          Tag.Annotated annotation) {
             throw new RuntimeException("unexpected");
         }
 
         @Override
-        public void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits,
+        public void onNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits,
          Branch parent, Branch branch) {
             throw new RuntimeException("unexpected");
         }
 
         @Override
