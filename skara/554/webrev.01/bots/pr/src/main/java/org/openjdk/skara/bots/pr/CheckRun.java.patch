diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -91,11 +91,11 @@
                                        .collect(Collectors.toList());
         return remoteBranches;
     }
 
     // For unknown contributors, check that all commits have the same name and email
-    private boolean checkCommitAuthor(List<Commit> commits) throws IOException {
+    private boolean checkCommitAuthor(List<CommitMetadata> commits) throws IOException {
         var author = censusInstance.namespace().get(pr.author().id());
         if (author != null) {
             return true;
         }
 
@@ -125,10 +125,21 @@
         if (!repoMatcher.matches()) {
             var branchMatcher = mergeSourceBranchOnlyPattern.matcher(pr.title());
             if (!branchMatcher.matches()) {
                 return Optional.empty();
             }
+
+            // Verify that the branch exists
+            var isValidBranch = prInstance.remoteBranches().stream()
+                                          .map(Reference::name)
+                                          .anyMatch(branch -> branch.equals(branchMatcher.group(1)));
+            if (!isValidBranch) {
+                // Assume the name refers to a sibling repository
+                var repoName = Path.of(pr.repository().name()).resolveSibling(branchMatcher.group(1)).toString();
+                return Optional.of(new MergeSource(repoName, "master"));
+            }
+
             return Optional.of(new MergeSource(pr.repository().name(), branchMatcher.group(1)));
         }
 
         return Optional.of(new MergeSource(repoMatcher.group(1), repoMatcher.group(2)));
     }
@@ -150,11 +161,11 @@
             ret.add(error);
         }
 
         var baseHash = prInstance.baseHash();
         var headHash = pr.headHash();
-        var commits = prInstance.localRepo().commits(baseHash + ".." + headHash).asList();
+        var commits = prInstance.localRepo().commitMetadata(baseHash, headHash);
 
         if (!checkCommitAuthor(commits)) {
             var error = "For contributors who are not existing OpenJDK Authors, commit attribution will be taken from " +
                     "the commits in the PR. However, the commits in this PR have inconsistent user names and/or " +
                     "email addresses. Please amend the commits.";
@@ -182,12 +193,16 @@
                         var mergeSourceRepo = pr.repository().forge().repository(source.get().repositoryName).orElseThrow(() ->
                                 new RuntimeException("Could not find repository " + source.get().repositoryName)
                         );
                         try {
                             var sourceHash = prInstance.localRepo().fetch(mergeSourceRepo.url(), source.get().branchName);
-                            if (!prInstance.localRepo().isAncestor(commits.get(mergeCommitIndex + 1).hash(), sourceHash)) {
-                                ret.add("The merge contains commits that are not ancestors of the source.");
+                            var mergeCommit = commits.get(mergeCommitIndex);
+                            for (int i = 1; i < mergeCommit.parents().size(); ++i) {
+                                if (!prInstance.localRepo().isAncestor(mergeCommit.parents().get(i), sourceHash)) {
+                                    ret.add("The merge contains commits that are not ancestors of the source.");
+                                    break;
+                                }
                             }
                         } catch (IOException e) {
                             ret.add("Could not fetch branch `" + source.get().branchName + "` from project `" +
                                             source.get().repositoryName + "` - check that they are correct.");
                         }
