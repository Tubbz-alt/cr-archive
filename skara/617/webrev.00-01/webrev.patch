diff a/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java b/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java
--- a/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java
+++ b/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java
@@ -36,13 +36,13 @@
     private final String authorName;
     private final String authorEmail;
     private final String message;
     private final StorageSerializer<T> serializer;
     private final StorageDeserializer<T> deserializer;
+    private final Repository localRepository;
 
     private RepositoryStorage<T> repositoryStorage;
-    private Repository localRepository;
     private Set<T> current;
 
     HostedRepositoryStorage(HostedRepository repository, Path localStorage, String ref, String fileName, String authorName, String authorEmail, String message, StorageSerializer<T> serializer, StorageDeserializer<T> deserializer) {
         this.hostedRepository = repository;
         this.ref = ref;
@@ -51,32 +51,34 @@
         this.authorName = authorName;
         this.message = message;
         this.serializer = serializer;
         this.deserializer = deserializer;
 
+        localRepository = tryMaterialize(repository, localStorage, ref, fileName, authorName, authorEmail, message);
+        repositoryStorage = new RepositoryStorage<>(localRepository, fileName, authorName, authorEmail, message, serializer, deserializer);
+        current = current();
+    }
+
+    private static Repository tryMaterialize(HostedRepository repository, Path localStorage, String ref, String fileName, String authorName, String authorEmail, String message) {
         int retryCount = 0;
         IOException lastException = null;
 
         while (retryCount < 10) {
             try {
-                Repository localRepository;
                 try {
-                    localRepository = Repository.materialize(localStorage, repository.url(), "+" + ref + ":storage");
-                } catch (IOException e) {
+                    return Repository.materialize(localStorage, repository.url(), "+" + ref + ":storage");
+                } catch (IOException ignored) {
                     // The remote ref may not yet exist
-                    localRepository = Repository.init(localStorage, repository.repositoryType());
+                    Repository localRepository = Repository.init(localStorage, repository.repositoryType());
                     var storage = Files.writeString(localStorage.resolve(fileName), "");
                     localRepository.add(storage);
                     var firstCommit = localRepository.commit(message, authorName, authorEmail);
 
                     // If the materialization failed for any other reason than the remote ref not existing, this will fail
                     localRepository.push(firstCommit, repository.url(), ref);
+                    return localRepository;
                 }
-                this.localRepository = localRepository;
-                repositoryStorage = new RepositoryStorage<>(localRepository, fileName, authorName, authorEmail, message, serializer, deserializer);
-                current = current();
-                return;
             } catch (IOException e) {
                 lastException = e;
             }
             retryCount++;
         }
