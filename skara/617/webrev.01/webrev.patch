diff a/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java b/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java
--- a/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java
+++ b/storage/src/main/java/org/openjdk/skara/storage/HostedRepositoryStorage.java
@@ -34,15 +34,14 @@
     private final String ref;
     private final String fileName;
     private final String authorName;
     private final String authorEmail;
     private final String message;
-    private final Repository localRepository;
     private final StorageSerializer<T> serializer;
     private final StorageDeserializer<T> deserializer;
+    private final Repository localRepository;
 
-    private Hash hash;
     private RepositoryStorage<T> repositoryStorage;
     private Set<T> current;
 
     HostedRepositoryStorage(HostedRepository repository, Path localStorage, String ref, String fileName, String authorName, String authorEmail, String message, StorageSerializer<T> serializer, StorageDeserializer<T> deserializer) {
         this.hostedRepository = repository;
@@ -52,31 +51,40 @@
         this.authorName = authorName;
         this.message = message;
         this.serializer = serializer;
         this.deserializer = deserializer;
 
-        try {
-            Repository localRepository;
+        localRepository = tryMaterialize(repository, localStorage, ref, fileName, authorName, authorEmail, message);
+        repositoryStorage = new RepositoryStorage<>(localRepository, fileName, authorName, authorEmail, message, serializer, deserializer);
+        current = current();
+    }
+
+    private static Repository tryMaterialize(HostedRepository repository, Path localStorage, String ref, String fileName, String authorName, String authorEmail, String message) {
+        int retryCount = 0;
+        IOException lastException = null;
+
+        while (retryCount < 10) {
             try {
-                localRepository = Repository.materialize(localStorage, repository.url(), "+" + ref + ":storage");
-            } catch (IOException e) {
-                // The remote ref may not yet exist
-                localRepository = Repository.init(localStorage, repository.repositoryType());
-                var storage = Files.writeString(localStorage.resolve(fileName), "");
-                localRepository.add(storage);
-                var firstCommit = localRepository.commit(message, authorName, authorEmail);
+                try {
+                    return Repository.materialize(localStorage, repository.url(), "+" + ref + ":storage");
+                } catch (IOException ignored) {
+                    // The remote ref may not yet exist
+                    Repository localRepository = Repository.init(localStorage, repository.repositoryType());
+                    var storage = Files.writeString(localStorage.resolve(fileName), "");
+                    localRepository.add(storage);
+                    var firstCommit = localRepository.commit(message, authorName, authorEmail);
 
-                // If the materialization failed for any other reason than the remote ref not existing, this will fail
-                localRepository.push(firstCommit, repository.url(), ref);
+                    // If the materialization failed for any other reason than the remote ref not existing, this will fail
+                    localRepository.push(firstCommit, repository.url(), ref);
+                    return localRepository;
+                }
+            } catch (IOException e) {
+                lastException = e;
             }
-            this.localRepository = localRepository;
-            hash = localRepository.head();
-            repositoryStorage = new RepositoryStorage<>(localRepository, fileName, authorName, authorEmail, message, serializer, deserializer);
-            current = current();
-        } catch (IOException e) {
-            throw new UncheckedIOException(e);
+            retryCount++;
         }
+        throw new UncheckedIOException("Retry count exceeded", lastException);
     }
 
     @Override
     public Set<T> current() {
         return repositoryStorage.current();
@@ -98,11 +106,10 @@
 
             // The local storage has changed, try to push it to the remote
             try {
                 var updatedHash = localRepository.head();
                 localRepository.push(updatedHash, hostedRepository.url(), ref);
-                hash = updatedHash;
                 current = updated;
                 return;
             } catch (IOException e) {
                 lastException = e;
 
