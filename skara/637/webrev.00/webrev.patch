diff a/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java b/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/AddedFileView.java
@@ -24,10 +24,12 @@
 
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.nio.file.*;
+import java.nio.charset.StandardCharsets;
+import java.nio.charset.MalformedInputException;
 import java.util.List;
 import java.util.stream.Collectors;
 
 class AddedFileView implements FileView {
     private final Patch patch;
@@ -41,24 +43,38 @@
     public AddedFileView(ReadOnlyRepository repo, Hash base, Hash head, List<CommitMetadata> commits, MetadataFormatter formatter, Patch patch, Path out) throws IOException {
         this.patch = patch;
         this.out = out;
         this.commits = commits;
         this.formatter = formatter;
+        var path = patch.target().path().get();
+        var pathInRepo = repo.root().resolve(path);
         if (patch.isTextual()) {
             binaryContent = null;
             if (head == null) {
-                newContent = Files.readAllLines(repo.root().resolve(patch.target().path().get()));
+                List<String> lines = null;
+                for (var charset : List.of(StandardCharsets.UTF_8, StandardCharsets.ISO_8859_1)) {
+                    try {
+                        lines = Files.readAllLines(pathInRepo, charset);
+                        break;
+                    } catch (MalformedInputException e) {
+                        continue;
+                    }
+                }
+                if (lines == null) {
+                    throw new IllegalStateException("Could not read " + pathInRepo + " as UTF-8 nor as ISO-8859-1");
+                }
+                newContent = lines;
             } else {
-                newContent = repo.lines(patch.target().path().get(), head).orElseThrow(IllegalArgumentException::new);
+                newContent = repo.lines(path, head).orElseThrow(IllegalArgumentException::new);
             }
             stats = new WebrevStats(patch.asTextualPatch().stats(), newContent.size());
         } else {
             newContent = null;
             if (head == null) {
-                binaryContent = Files.readAllBytes(repo.root().resolve(patch.target().path().get()));
+                binaryContent = Files.readAllBytes(pathInRepo);
             } else {
-                binaryContent = repo.show(patch.target().path().get(), head).orElseThrow(IllegalArgumentException::new);
+                binaryContent = repo.show(path, head).orElseThrow(IllegalArgumentException::new);
             }
             stats = WebrevStats.empty();
         }
     }
 
diff a/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java b/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/ModifiedFileView.java
@@ -24,10 +24,12 @@
 
 import org.openjdk.skara.vcs.*;
 
 import java.io.*;
 import java.nio.file.*;
+import java.nio.charset.StandardCharsets;
+import java.nio.charset.MalformedInputException;
 import java.util.List;
 import java.util.stream.Collectors;
 
 class ModifiedFileView implements FileView {
     private final Patch patch;
@@ -62,11 +64,23 @@
                                                            patch.target().path().get() +
                                                            " at revision " + tip);
                     });
                     newContent = List.of(content.get(0) + "-dirty");
                 } else {
-                    newContent = Files.readAllLines(path);
+                    List<String> lines = null;
+                    for (var charset : List.of(StandardCharsets.UTF_8, StandardCharsets.ISO_8859_1)) {
+                        try {
+                            lines = Files.readAllLines(repo.root().resolve(path), charset);
+                            break;
+                        } catch (MalformedInputException e) {
+                            continue;
+                        }
+                    }
+                    if (lines == null) {
+                        throw new IllegalStateException("Could not read " + path + " as UTF-8 nor as ISO-8859-1");
+                    }
+                    newContent = lines;
                 }
             } else {
                 newContent = repo.lines(patch.target().path().get(), head).orElseThrow(() -> {
                     throw new IllegalArgumentException("Could not get content for file " +
                                                        patch.target().path().get() +
diff a/webrev/src/main/java/org/openjdk/skara/webrev/RawView.java b/webrev/src/main/java/org/openjdk/skara/webrev/RawView.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/RawView.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/RawView.java
@@ -47,17 +47,15 @@
         this.binary = binary;
         this.text = null;
     }
 
     public void render(Writer w) throws IOException {
-        var rawFile = out.resolve(file.toString());
-        if (Files.exists(rawFile)) {
-            // If the raw file collides with a file generated by the webrev (such as index.html), rename it
-            rawFile = out.resolve("_" + file.toString());
-        } else {
-            Files.createDirectories(rawFile.getParent());
-        }
+        // If the raw file collides with a file generated by the webrev (such as index.html), rename it
+        var rawFile = Webrev.STATIC_FILES.contains(file.toString()) ?
+            out.resolve("_" + file.toString()) :
+            out.resolve(file.toString());
+        Files.createDirectories(rawFile.getParent());
 
         if (binary != null) {
             Files.write(rawFile, binary);
         } else {
             Files.write(rawFile, text);
diff a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
--- a/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
+++ b/webrev/src/main/java/org/openjdk/skara/webrev/Webrev.java
@@ -38,10 +38,15 @@
     private static final String ANCNAV_JS = "navigation.js";
 
     private static final String ICON = "nanoduke.ico";
     private static final String CSS = "style.css";
 
+    private static final String INDEX = "index.html";
+
+    public static final Set<String> STATIC_FILES =
+        Set.of(ANCNAV_HTML, ANCNAV_JS, ICON, CSS, INDEX);
+
     public static class RequiredBuilder {
         private final ReadOnlyRepository repository;
 
         RequiredBuilder(ReadOnlyRepository repository) {
             this.repository = repository;
@@ -214,11 +219,11 @@
             var total = fileViews.stream().map(FileView::stats).mapToInt(WebrevStats::total).sum();
             var stats = new WebrevStats(diff.added(), diff.removed(), diff.modified(), total);
 
             var issueForWebrev = issue != null && issueLinker != null ? issueLinker.apply(issue) : null;
             var tailEndURL = commitLinker != null ? commitLinker.apply(tailEnd.hex()) : null;
-            try (var w = Files.newBufferedWriter(output.resolve("index.html"))) {
+            try (var w = Files.newBufferedWriter(output.resolve(INDEX))) {
                 var index = new IndexView(fileViews,
                                           title,
                                           username,
                                           upstream,
                                           branch,
@@ -277,11 +282,11 @@
     static String relativeToCSS(Path out, Path file) {
         return relativeTo(file, out.resolve(CSS));
     }
 
     static String relativeToIndex(Path out, Path file) {
-        return relativeTo(out.resolve("index.html"), file);
+        return relativeTo(out.resolve(INDEX), file);
     }
 
     static String relativeToAncnavHTML(Path out, Path file) {
         return relativeTo(file, out.resolve(ANCNAV_HTML));
     }
