diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -176,15 +176,16 @@
 
         if (pr.title().startsWith("Merge")) {
             if (commits.size() < 2) {
                 ret.add("A Merge PR must contain at least two commits that are not already present in the target.");
             } else {
-                // Find the last merge commit - the very last commit is not eligible (as the merge needs a parent)
+                // Find the first merge commit - the very last commit is not eligible (as the merge needs a parent)
                 int mergeCommitIndex = commits.size();
                 for (int i = 0; i < commits.size() - 1; ++i) {
                     if (commits.get(i).isMerge()) {
                         mergeCommitIndex = i;
+                        break;
                     }
                 }
                 if (mergeCommitIndex >= commits.size() - 1) {
                     ret.add("A Merge PR must contain a merge commit as well as at least one other commit from the merge source.");
                 }
@@ -196,14 +197,16 @@
                                 new RuntimeException("Could not find repository " + source.get().repositoryName)
                         );
                         try {
                             var sourceHash = prInstance.localRepo().fetch(mergeSourceRepo.url(), source.get().branchName);
                             var mergeCommit = commits.get(mergeCommitIndex);
-                            for (int i = 1; i < mergeCommit.parents().size(); ++i) {
+                            for (int i = 0; i < mergeCommit.parents().size(); ++i) {
                                 if (!prInstance.localRepo().isAncestor(mergeCommit.parents().get(i), sourceHash)) {
-                                    ret.add("The merge contains commits that are not ancestors of the source.");
-                                    break;
+                                    if (!mergeCommit.parents().get(i).equals(prInstance.targetHash())) {
+                                        ret.add("The merge contains commits that are neither ancestors of the source nor the target.");
+                                        break;
+                                    }
                                 }
                             }
                         } catch (IOException e) {
                             ret.add("Could not fetch branch `" + source.get().branchName + "` from project `" +
                                             source.get().repositoryName + "` - check that they are correct.");
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -137,11 +137,11 @@
         var commitMessage = commitMessage(activeReviews, namespace);
         return localRepo.commit(commitMessage, author.name(), author.email(), committer.name(), committer.email());
     }
 
     private Hash commitMerge(List<Review> activeReviews, Namespace namespace, String censusDomain, String sponsorId) throws IOException, CommitFailure {
-        // Find the single merge commit with an incoming parent outside of the merge target
+        // Find the first merge commit with an incoming parent outside of the merge target
         // The very last commit is not eligible (as the merge needs a parent)
         var commits = localRepo.commitMetadata(baseHash, headHash);
         int mergeCommitIndex = commits.size();
         for (int i = 0; i < commits.size() - 1; ++i) {
             if (commits.get(i).isMerge()) {
@@ -150,15 +150,12 @@
                     if (!localRepo.isAncestor(baseHash, commits.get(i).parents().get(j))) {
                         isSourceMerge = true;
                     }
                 }
                 if (isSourceMerge) {
-                    if (mergeCommitIndex != commits.size()) {
-                        // TODO: We could allow this
-                        throw new CommitFailure("A merge PR is only allowed to contain a single merge commit with incoming changes. Please amend!");
-                    }
                     mergeCommitIndex = i;
+                    break;
                 } else {
                     // TODO: We can solve this with retroactive rerere
                     throw new CommitFailure("A merge PR is only allowed to contain a single merge commit. You will need to amend your commits.");
                 }
             }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
@@ -683,10 +683,11 @@
             var other2Hash = CheckableRepository.appendAndCommit(localRepo, "Change in other2",
                                                                 "Unrelated\n\nReviewed-by: integrationreviewer2");
             localRepo.push(other2Hash, author.url(), "other2", true);
 
             // Make a change with a corresponding PR
+            localRepo.checkout(masterHash, true);
             var unrelated = Files.writeString(localRepo.root().resolve("unrelated.txt"), "Unrelated", StandardCharsets.UTF_8);
             localRepo.add(unrelated);
             var updatedMaster = localRepo.commit("Unrelated", "some", "some@one");
             localRepo.push(updatedMaster, author.url(), "master");
 
@@ -711,11 +712,11 @@
                           .filter(comment -> comment.body().contains("did not complete successfully"))
                           .count();
             assertEquals(1, error, () -> pr.comments().stream().map(Comment::body).collect(Collectors.joining("\n\n")));
 
             var check = pr.checks(mergeHash).get("jcheck");
-            assertEquals("- The merge contains commits that are not ancestors of the source.", check.summary().orElseThrow());
+            assertEquals("- The merge contains commits that are neither ancestors of the source nor the target.", check.summary().orElseThrow());
         }
     }
 
     @Test
     void invalidAuthor(TestInfo testInfo) throws IOException {
@@ -836,15 +837,18 @@
 
             // Push it
             pr.addComment("/integrate");
             TestBotRunner.runPeriodicItems(mergeBot);
 
-            // The bot should reply with an ok message as we currently allow this
-            var pushed = pr.comments().stream()
-                           .filter(comment -> comment.body().contains("Pushed as commit"))
-                           .count();
-            assertEquals(1, pushed);
+            // The bot should reply with a failure message
+            var error = pr.comments().stream()
+                    .filter(comment -> comment.body().contains("did not complete successfully"))
+                    .count();
+            assertEquals(1, error, () -> pr.comments().stream().map(Comment::body).collect(Collectors.joining("\n\n")));
+
+            var check = pr.checks(mergeHash).get("jcheck");
+            assertEquals("- The merge contains commits that are neither ancestors of the source nor the target.", check.summary().orElseThrow());
         }
     }
 
     @Test
     void invalidSyntax(TestInfo testInfo) throws IOException {
