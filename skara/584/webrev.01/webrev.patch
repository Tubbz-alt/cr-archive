diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -176,15 +176,16 @@
 
         if (pr.title().startsWith("Merge")) {
             if (commits.size() < 2) {
                 ret.add("A Merge PR must contain at least two commits that are not already present in the target.");
             } else {
-                // Find the last merge commit - the very last commit is not eligible (as the merge needs a parent)
+                // Find the first merge commit - the very last commit is not eligible (as the merge needs a parent)
                 int mergeCommitIndex = commits.size();
                 for (int i = 0; i < commits.size() - 1; ++i) {
                     if (commits.get(i).isMerge()) {
                         mergeCommitIndex = i;
+                        break;
                     }
                 }
                 if (mergeCommitIndex >= commits.size() - 1) {
                     ret.add("A Merge PR must contain a merge commit as well as at least one other commit from the merge source.");
                 }
@@ -196,14 +197,16 @@
                                 new RuntimeException("Could not find repository " + source.get().repositoryName)
                         );
                         try {
                             var sourceHash = prInstance.localRepo().fetch(mergeSourceRepo.url(), source.get().branchName);
                             var mergeCommit = commits.get(mergeCommitIndex);
-                            for (int i = 1; i < mergeCommit.parents().size(); ++i) {
+                            for (int i = 0; i < mergeCommit.parents().size(); ++i) {
                                 if (!prInstance.localRepo().isAncestor(mergeCommit.parents().get(i), sourceHash)) {
-                                    ret.add("The merge contains commits that are not ancestors of the source.");
-                                    break;
+                                    if (!mergeCommit.parents().get(i).equals(prInstance.targetHash())) {
+                                        ret.add("The merge contains commits that are neither ancestors of the source nor the target.");
+                                        break;
+                                    }
                                 }
                             }
                         } catch (IOException e) {
                             ret.add("Could not fetch branch `" + source.get().branchName + "` from project `" +
                                             source.get().repositoryName + "` - check that they are correct.");
diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -144,24 +144,27 @@
         var commits = localRepo.commitMetadata(baseHash, headHash);
         int mergeCommitIndex = commits.size();
         for (int i = 0; i < commits.size() - 1; ++i) {
             if (commits.get(i).isMerge()) {
                 boolean isSourceMerge = false;
-                for (int j = 1; j < commits.get(i).parents().size(); ++j) {
+                for (int j = 0; j < commits.get(i).parents().size(); ++j) {
                     if (!localRepo.isAncestor(baseHash, commits.get(i).parents().get(j))) {
                         isSourceMerge = true;
                     }
                 }
                 if (isSourceMerge) {
                     mergeCommitIndex = i;
                     break;
+                } else {
+                    // TODO: We can solve this with retroactive rerere
+                    throw new CommitFailure("A merge PR is only allowed to contain a single merge commit. You will need to amend your commits.");
                 }
             }
         }
 
         if (mergeCommitIndex == commits.size()) {
-            throw new CommitFailure("No merge commit containing commits from another branch than the target was found");
+            throw new CommitFailure("No merge commit containing incoming commits from another branch than the target was found");
         }
 
         var contributor = namespace.get(pr.author().id());
         if (contributor == null) {
             throw new CommitFailure("Merges can only be performed by Committers");
@@ -181,13 +184,17 @@
         localRepo.squash(headHash);
 
         return localRepo.amend(commitMessage, author.name(), author.email(), committer.name(), committer.email());
     }
 
+    private boolean isMergeCommit() {
+        return pr.title().startsWith("Merge");
+    }
+
     Hash commit(Namespace namespace, String censusDomain, String sponsorId) throws IOException, CommitFailure {
         var activeReviews = filterActiveReviews(pr.reviews());
-        if (!pr.title().startsWith("Merge")) {
+        if (!isMergeCommit()) {
             return commitSquashed(activeReviews, namespace, censusDomain, sponsorId);
         } else {
             return commitMerge(activeReviews, namespace, censusDomain, sponsorId);
         }
     }
@@ -213,10 +220,16 @@
             reply.println(" since your change was applied:");
             divergingCommits.forEach(c -> reply.println(" * " + c.hash().hex() + ": " + c.message().get(0)));
 
             try {
                 var commit = localRepo.lookup(commitHash).orElseThrow();
+                if (isMergeCommit()) {
+                    // TODO: We can solve this with retroactive rerere
+                    reply.println("Merge PRs cannot currently be automatically rebased. You will need to rebase it manually.");
+                    return Optional.empty();
+                }
+
                 localRepo.rebase(targetHash, commit.committer().name(), commit.committer().email());
                 reply.println();
                 reply.println("Your commit was automatically rebased without conflicts.");
                 var hash = localRepo.head();
                 return Optional.of(hash);
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
@@ -207,10 +207,11 @@
             assertEquals("integrationcommitter1@openjdk.java.net", headCommit.committer().email());
         }
     }
 
     @Test
+    @Disabled
     void branchMergeRebase(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
@@ -301,10 +302,11 @@
             assertEquals("integrationcommitter1@openjdk.java.net", headCommit.committer().email());
         }
     }
 
     @Test
+    @Disabled
     void branchMergeAdditionalCommits(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
 
             var author = credentials.getHostedRepository();
@@ -464,11 +466,11 @@
                           .filter(comment -> comment.body().contains("did not complete successfully"))
                           .count();
             assertEquals(1, error, () -> pr.comments().stream().map(Comment::body).collect(Collectors.joining("\n\n")));
 
             var check = pr.checks(mergeHash).get("jcheck");
-            assertEquals("- It was not possible to create a commit for the changes in this PR: No merge commit containing commits from another branch than the target was found", check.summary().orElseThrow());
+            assertEquals("- It was not possible to create a commit for the changes in this PR: A merge PR is only allowed to contain a single merge commit. You will need to amend your commits.", check.summary().orElseThrow());
         }
     }
 
     @Test
     void invalidSourceRepo(TestInfo testInfo) throws IOException {
@@ -681,10 +683,11 @@
             var other2Hash = CheckableRepository.appendAndCommit(localRepo, "Change in other2",
                                                                 "Unrelated\n\nReviewed-by: integrationreviewer2");
             localRepo.push(other2Hash, author.url(), "other2", true);
 
             // Make a change with a corresponding PR
+            localRepo.checkout(masterHash, true);
             var unrelated = Files.writeString(localRepo.root().resolve("unrelated.txt"), "Unrelated", StandardCharsets.UTF_8);
             localRepo.add(unrelated);
             var updatedMaster = localRepo.commit("Unrelated", "some", "some@one");
             localRepo.push(updatedMaster, author.url(), "master");
 
@@ -709,11 +712,11 @@
                           .filter(comment -> comment.body().contains("did not complete successfully"))
                           .count();
             assertEquals(1, error, () -> pr.comments().stream().map(Comment::body).collect(Collectors.joining("\n\n")));
 
             var check = pr.checks(mergeHash).get("jcheck");
-            assertEquals("- The merge contains commits that are not ancestors of the source.", check.summary().orElseThrow());
+            assertEquals("- The merge contains commits that are neither ancestors of the source nor the target.", check.summary().orElseThrow());
         }
     }
 
     @Test
     void invalidAuthor(TestInfo testInfo) throws IOException {
@@ -834,15 +837,18 @@
 
             // Push it
             pr.addComment("/integrate");
             TestBotRunner.runPeriodicItems(mergeBot);
 
-            // The bot should reply with an ok message as we currently allow this
-            var pushed = pr.comments().stream()
-                           .filter(comment -> comment.body().contains("Pushed as commit"))
-                           .count();
-            assertEquals(1, pushed);
+            // The bot should reply with a failure message
+            var error = pr.comments().stream()
+                    .filter(comment -> comment.body().contains("did not complete successfully"))
+                    .count();
+            assertEquals(1, error, () -> pr.comments().stream().map(Comment::body).collect(Collectors.joining("\n\n")));
+
+            var check = pr.checks(mergeHash).get("jcheck");
+            assertEquals("- The merge contains commits that are neither ancestors of the source nor the target.", check.summary().orElseThrow());
         }
     }
 
     @Test
     void invalidSyntax(TestInfo testInfo) throws IOException {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -725,11 +725,11 @@
         }
     }
 
     @Override
     public void rebase(Hash hash, String committerName, String committerEmail) throws IOException {
-        try (var p = Process.capture("git", "rebase", "--onto", hash.hex(), "--root", "--rebase-merges")
+        try (var p = Process.capture("git", "rebase", "--onto", hash.hex(), "--root")
                             .environ("GIT_COMMITTER_NAME", committerName)
                             .environ("GIT_COMMITTER_EMAIL", committerEmail)
                             .workdir(dir)
                             .execute()) {
             await(p);
