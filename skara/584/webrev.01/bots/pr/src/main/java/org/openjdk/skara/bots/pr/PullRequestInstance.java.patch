diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -144,24 +144,27 @@
         var commits = localRepo.commitMetadata(baseHash, headHash);
         int mergeCommitIndex = commits.size();
         for (int i = 0; i < commits.size() - 1; ++i) {
             if (commits.get(i).isMerge()) {
                 boolean isSourceMerge = false;
-                for (int j = 1; j < commits.get(i).parents().size(); ++j) {
+                for (int j = 0; j < commits.get(i).parents().size(); ++j) {
                     if (!localRepo.isAncestor(baseHash, commits.get(i).parents().get(j))) {
                         isSourceMerge = true;
                     }
                 }
                 if (isSourceMerge) {
                     mergeCommitIndex = i;
                     break;
+                } else {
+                    // TODO: We can solve this with retroactive rerere
+                    throw new CommitFailure("A merge PR is only allowed to contain a single merge commit. You will need to amend your commits.");
                 }
             }
         }
 
         if (mergeCommitIndex == commits.size()) {
-            throw new CommitFailure("No merge commit containing commits from another branch than the target was found");
+            throw new CommitFailure("No merge commit containing incoming commits from another branch than the target was found");
         }
 
         var contributor = namespace.get(pr.author().id());
         if (contributor == null) {
             throw new CommitFailure("Merges can only be performed by Committers");
@@ -181,13 +184,17 @@
         localRepo.squash(headHash);
 
         return localRepo.amend(commitMessage, author.name(), author.email(), committer.name(), committer.email());
     }
 
+    private boolean isMergeCommit() {
+        return pr.title().startsWith("Merge");
+    }
+
     Hash commit(Namespace namespace, String censusDomain, String sponsorId) throws IOException, CommitFailure {
         var activeReviews = filterActiveReviews(pr.reviews());
-        if (!pr.title().startsWith("Merge")) {
+        if (!isMergeCommit()) {
             return commitSquashed(activeReviews, namespace, censusDomain, sponsorId);
         } else {
             return commitMerge(activeReviews, namespace, censusDomain, sponsorId);
         }
     }
@@ -213,10 +220,16 @@
             reply.println(" since your change was applied:");
             divergingCommits.forEach(c -> reply.println(" * " + c.hash().hex() + ": " + c.message().get(0)));
 
             try {
                 var commit = localRepo.lookup(commitHash).orElseThrow();
+                if (isMergeCommit()) {
+                    // TODO: We can solve this with retroactive rerere
+                    reply.println("Merge PRs cannot currently be automatically rebased. You will need to rebase it manually.");
+                    return Optional.empty();
+                }
+
                 localRepo.rebase(targetHash, commit.committer().name(), commit.committer().email());
                 reply.println();
                 reply.println("Your commit was automatically rebased without conflicts.");
                 var hash = localRepo.head();
                 return Optional.of(hash);
