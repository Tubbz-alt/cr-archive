diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/IssueUpdater.java
@@ -338,25 +338,10 @@
                 }
             }
         }
     }
 
-    @Override
-    public void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) {
-
-    }
-
-    @Override
-    public void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) {
-
-    }
-
-    @Override
-    public void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) {
-
-    }
-
     @Override
     public String name() {
         return "issue";
     }
 
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
@@ -90,10 +90,27 @@
                 var folder = repo.value().get("folder").asString();
                 var build = repo.value().get("build").asString();
                 var version = repo.value().get("version").asString();
                 updaters.add(new JsonUpdater(Path.of(folder), version, build));
             }
+
+            if (repo.value().contains("slack")) {
+                var slackConf = repo.value().get("slack");
+                URI prWebhook = null;
+                if (slackConf.contains("pr")) {
+                    prWebhook = URIBuilder.base(slackConf.get("pr").asString()).build();
+                }
+                URI commitWebhook = null;
+                if (slackConf.contains("commit")) {
+                    commitWebhook = URIBuilder.base(slackConf.get("commit").asString()).build();
+                }
+                var username = slackConf.get("username").asString();
+                var updater = new SlackUpdater(prWebhook, commitWebhook, username);
+                updaters.add(updater);
+                prUpdaters.add(updater);
+            }
+
             if (repo.value().contains("mailinglists")) {
                 var email = specific.get("email").asObject();
                 var smtp = email.get("smtp").asString();
                 var sender = EmailAddress.parse(email.get("sender").asString());
                 var archive = URIBuilder.base(email.get("archive").asString()).build();
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java
@@ -24,8 +24,12 @@
 
 import org.openjdk.skara.forge.PullRequest;
 import org.openjdk.skara.vcs.openjdk.Issue;
 
 public interface PullRequestUpdateConsumer {
-    void handleNewIssue(PullRequest pr, Issue issue);
-    void handleRemovedIssue(PullRequest pr, Issue issue);
+    default void handleNewIssue(PullRequest pr, Issue issue) {
+    }
+    default void handleRemovedIssue(PullRequest pr, Issue issue) {
+    }
+    default void handleNewPullRequest(PullRequest pr) {
+    }
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
@@ -115,10 +115,14 @@
 
     private void notifyListenersRemoved(String issueId) {
         pullRequestUpdateConsumers.forEach(c -> c.handleRemovedIssue(pr, new Issue(issueId, "")));
     }
 
+    private void notifyNewPr(PullRequest pr) {
+        pullRequestUpdateConsumers.forEach(c -> c.handleNewPullRequest(pr));
+    }
+
     @Override
     public void run(Path scratchPath) {
         var historyPath = scratchPath.resolve("notify").resolve("history");
         var storage = prIssuesStorageBuilder
                 .serializer(this::serializePrIssues)
@@ -144,10 +148,11 @@
                      .forEach(this::notifyListenersRemoved);
             issues.stream()
                   .filter(issue -> !oldIssues.contains(issue))
                   .forEach(this::notifyListenersAdded);
         } else {
+            notifyNewPr(pr);
             issues.forEach(this::notifyListenersAdded);
         }
 
         storage.put(prIssues);
     }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/RepositoryUpdateConsumer.java
@@ -27,11 +27,15 @@
 import org.openjdk.skara.vcs.openjdk.OpenJDKTag;
 
 import java.util.List;
 
 public interface RepositoryUpdateConsumer {
-    void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException;
-    void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) throws NonRetriableException;
-    void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) throws NonRetriableException;
-    void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) throws NonRetriableException;
+    default void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
+    }
+    default void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) throws NonRetriableException {
+    }
+    default void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) throws NonRetriableException {
+    }
+    default void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) throws NonRetriableException {
+    }
     String name();
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/SlackUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/SlackUpdater.java
--- /dev/null
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/SlackUpdater.java
@@ -0,0 +1,106 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.notify;
+
+import org.openjdk.skara.forge.HostedRepository;
+import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.json.*;
+import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.network.*;
+
+import java.io.IOException;
+import java.io.UncheckedIOException;
+import java.net.URI;
+import java.util.List;
+import java.time.format.DateTimeFormatter;
+
+public class SlackUpdater implements RepositoryUpdateConsumer, PullRequestUpdateConsumer {
+    private final RestRequest prWebhook;
+    private final RestRequest commitWebhook;
+    private final String username;
+
+    public SlackUpdater(URI prWebhook, URI commitWebhook, String username) {
+        this.prWebhook = prWebhook != null ? new RestRequest(prWebhook) : null;
+        this.commitWebhook = commitWebhook != null ? new RestRequest(commitWebhook) : null;
+        this.username = username;
+    }
+
+    @Override
+    public void handleNewPullRequest(PullRequest pr) {
+        if (prWebhook == null) {
+            return;
+        }
+
+        try {
+            var query = JSON.object();
+            query.put("text", pr.nonTransformedWebUrl().toString());
+            if (username != null && !username.isEmpty()) {
+                query.put("username", username);
+            }
+            prWebhook.post("").body(query).executeUnparsed();
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
+    }
+
+    @Override
+    public void handleCommits(HostedRepository repository,
+                              Repository localRepository,
+                              List<Commit> commits,
+                              Branch branch) throws NonRetriableException {
+        if (commitWebhook == null) {
+            return;
+        }
+
+        try {
+            for (var commit : commits) {
+                var query = JSON.object();
+                if (username != null && !username.isEmpty()) {
+                    query.put("username", username);
+                }
+                var title = commit.message().get(0);
+                query.put("text", branch.name() + ": " + commit.hash().abbreviate() + ": " + title + "\n" +
+                                  "Author: " + commit.author().name() + "\n" +
+                                  "Committer: " + commit.author().name() + "\n" +
+                                  "Date: " + commit.date().format(DateTimeFormatter.RFC_1123_DATE_TIME) + "\n");
+
+                var attachment = JSON.object();
+                attachment.put("fallback", "Link to commit");
+                attachment.put("color", "#cc0e31");
+                attachment.put("title", "View on " + repository.forge().name());
+                attachment.put("title_link", repository.webUrl(commit.hash()).toString());
+                var attachments = JSON.array();
+                attachments.add(attachment);
+                query.put("attachments", attachments);
+                commitWebhook.post("").body(query).executeUnparsed();
+            }
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
+    }
+
+    @Override
+    public String name() {
+        return "slack";
+    }
+}
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHost.java
@@ -34,10 +34,15 @@
     @Override
     public boolean isValid() {
         return false;
     }
 
+    @Override
+    public String name() {
+        return "InMemory";
+    }
+
     @Override
     public Optional<HostedRepository> repository(String name) {
         return Optional.empty();
     }
 
diff a/forge/src/main/java/org/openjdk/skara/forge/Forge.java b/forge/src/main/java/org/openjdk/skara/forge/Forge.java
--- a/forge/src/main/java/org/openjdk/skara/forge/Forge.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/Forge.java
@@ -28,10 +28,11 @@
 import java.net.URI;
 import java.util.*;
 import java.util.stream.Collectors;
 
 public interface Forge extends Host {
+    String name();
     Optional<HostedRepository> repository(String name);
     boolean supportsReviewBody();
 
     static Forge from(String name, URI uri, Credential credential, JSONObject configuration) {
         var factory = ForgeFactory.getForgeFactories().stream()
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubHost.java
@@ -134,10 +134,15 @@
 
     public URI getURI() {
         return uri;
     }
 
+    @Override
+    public String name() {
+        return "GitHub";
+    }
+
     URI getWebURI(String endpoint) {
         return getWebURI(endpoint, true);
     }
 
     URI getWebURI(String endpoint, boolean transform) {
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -486,15 +486,24 @@
                             .collect(Collectors.toList());
         }
         return labels;
     }
 
-    @Override
-    public URI webUrl() {
+    private URI getWebUrl(boolean transform) {
         var host = (GitHubHost)repository.forge();
         var endpoint = "/" + repository.name() + "/pull/" + id();
-        return host.getWebURI(endpoint);
+        return host.getWebURI(endpoint, transform);
+    }
+
+    @Override
+    public URI webUrl() {
+        return getWebUrl(true);
+    }
+
+    @Override
+    public URI nonTransformedWebUrl() {
+        return getWebUrl(false);
     }
 
     @Override
     public String toString() {
         return "GitHubPullRequest #" + id() + " by " + author();
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabForgeFactory.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabForgeFactory.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabForgeFactory.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabForgeFactory.java
@@ -18,12 +18,16 @@
         return Set.of("gitlab.com");
     }
 
     @Override
     public Forge create(URI uri, Credential credential, JSONObject configuration) {
+        var name = "GitLab";
+        if (configuration.contains("name")) {
+            name = configuration.get("name").asString();
+        }
         if (credential != null) {
-            return new GitLabHost(uri, credential);
+            return new GitLabHost(name, uri, credential);
         } else {
-            return new GitLabHost(uri);
+            return new GitLabHost(name, uri);
         }
     }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabHost.java
@@ -32,26 +32,29 @@
 import java.nio.charset.StandardCharsets;
 import java.util.*;
 import java.util.logging.Logger;
 
 public class GitLabHost implements Forge {
+    private final String name;
     private final URI uri;
     private final Credential pat;
     private final RestRequest request;
     private final Logger log = Logger.getLogger("org.openjdk.skara.forge.gitlab");
 
-    GitLabHost(URI uri, Credential pat) {
+    GitLabHost(String name, URI uri, Credential pat) {
+        this.name = name;
         this.uri = uri;
         this.pat = pat;
 
         var baseApi = URIBuilder.base(uri)
                                 .setPath("/api/v4/")
                                 .build();
         request = new RestRequest(baseApi, pat.username(), () -> Arrays.asList("Private-Token", pat.password()));
     }
 
-    GitLabHost(URI uri) {
+    GitLabHost(String name, URI uri) {
+        this.name = name;
         this.uri = uri;
         this.pat = null;
 
         var baseApi = URIBuilder.base(uri)
                                 .setPath("/api/v4/")
@@ -65,10 +68,15 @@
 
     Optional<Credential> getPat() {
         return Optional.ofNullable(pat);
     }
 
+    @Override
+    public String name() {
+        return name;
+    }
+
     @Override
     public boolean isValid() {
         try {
             var version = request.get("version")
                                   .executeUnparsed();
diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/Issue.java
@@ -142,10 +142,17 @@
     /**
      * Returns a link that will lead to the issue.
      */
     URI webUrl();
 
+    /**
+     * Returns a non-transformed link to the issue
+     */
+    default URI nonTransformedWebUrl() {
+        return webUrl();
+    }
+
     /**
      * Returns all usernames assigned to the issue.
      */
     List<HostUser> assignees();
 
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -83,10 +83,15 @@
     @Override
     public boolean isValid() {
         return true;
     }
 
+    @Override
+    public String name() {
+        return "Test";
+    }
+
     @Override
     public Optional<HostedRepository> repository(String name) {
         Repository localRepository;
         if (data.repositories.containsKey(name)) {
             localRepository = data.repositories.get(name);
