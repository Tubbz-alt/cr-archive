diff a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
--- a/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
+++ b/issuetracker/src/main/java/org/openjdk/skara/issuetracker/jira/JiraProject.java
@@ -118,20 +118,24 @@
     JiraHost jiraHost() {
         return jiraHost;
     }
 
     private static final Set<String> knownProperties = Set.of("issuetype", "fixVersions", "versions", "priority", "components");
+    private static final Set<String> readOnlyProperties = Set.of("resolution");
 
-    boolean isAllowedProperty(String name) {
+    boolean isAllowedProperty(String name, boolean forWrite) {
         if (knownProperties.contains(name)) {
             return true;
         }
+        if (!forWrite && readOnlyProperties.contains(name)) {
+            return true;
+        }
         return name.startsWith("customfield_");
     }
 
     Optional<JSONValue> decodeProperty(String name, JSONValue value) {
-        if (!isAllowedProperty(name)) {
+        if (!isAllowedProperty(name, false)) {
             return Optional.empty();
         }
         if (value.isNull()) {
             return Optional.empty();
         }
@@ -152,11 +156,11 @@
                 return Optional.of(value);
         }
     }
 
     Optional<JSONValue> encodeProperty(String name, JSONValue value) {
-        if (!isAllowedProperty(name)) {
+        if (!isAllowedProperty(name, true)) {
             return Optional.empty();
         }
 
         switch (name) {
             case "fixVersions": // fall-through
