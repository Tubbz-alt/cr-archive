diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -162,24 +162,31 @@
 
         if (pr.title().startsWith("Merge")) {
             if (commits.size() < 2) {
                 ret.add("A Merge PR must contain at least two commits that are not already present in the target.");
             } else {
-                if (!commits.get(0).isMerge()) {
-                    ret.add("The top commit must be a merge commit.");
+                // Find the last merge commit - the very last commit is not eligible (as the merge needs a parent)
+                int mergeCommitIndex = commits.size();
+                for (int i = 0; i < commits.size() - 1; ++i) {
+                    if (commits.get(i).isMerge()) {
+                        mergeCommitIndex = i;
+                    }
+                }
+                if (mergeCommitIndex >= commits.size() - 1) {
+                    ret.add("A Merge PR must contain a merge commit as well as at least one other commit from the merge source.");
                 }
 
                 var source = mergeSource();
                 if (source.isPresent()) {
                     try {
                         var mergeSourceRepo = pr.repository().forge().repository(source.get().repositoryName).orElseThrow(() ->
                                 new RuntimeException("Could not find repository " + source.get().repositoryName)
                         );
                         try {
                             var sourceHash = prInstance.localRepo().fetch(mergeSourceRepo.url(), source.get().branchName);
-                            if (!prInstance.localRepo().isAncestor(commits.get(1).hash(), sourceHash)) {
-                                ret.add("The merge contains commits that are not ancestors of the source");
+                            if (!prInstance.localRepo().isAncestor(commits.get(mergeCommitIndex + 1).hash(), sourceHash)) {
+                                ret.add("The merge contains commits that are not ancestors of the source.");
                             }
                         } catch (IOException e) {
                             ret.add("Could not fetch branch `" + source.get().branchName + "` from project `" +
                                             source.get().repositoryName + "` - check that they are correct.");
                         }
