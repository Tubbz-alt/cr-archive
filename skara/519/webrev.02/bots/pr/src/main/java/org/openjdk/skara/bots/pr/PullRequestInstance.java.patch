diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -131,20 +131,30 @@
         var commitMessage = commitMessage(activeReviews, namespace, false);
         return localRepo.commit(commitMessage, author.name(), author.email(), committer.name(), committer.email());
     }
 
     private Hash commitMerge(List<Review> activeReviews, Namespace namespace, String censusDomain) throws IOException {
-        localRepo.checkout(headHash, true);
+        // Find the last merge commit - the very last commit is not eligible (as the merge needs a parent)
+        var commits = localRepo.commits(baseHash + ".." + headHash).asList();
+        int mergeCommitIndex = commits.size();
+        for (int i = 0; i < commits.size() - 1; ++i) {
+            if (commits.get(i).isMerge()) {
+                mergeCommitIndex = i;
+            }
+        }
 
         var contributor = namespace.get(pr.author().id());
         if (contributor == null) {
             throw new RuntimeException("Merges can only be performed by Committers");
         }
 
         var author = new Author(contributor.fullName().orElseThrow(), contributor.username() + "@" + censusDomain);
-
         var commitMessage = commitMessage(activeReviews, namespace, true);
+
+        localRepo.checkout(commits.get(mergeCommitIndex).hash(), true);
+        localRepo.squash(headHash);
+
         return localRepo.amend(commitMessage, author.name(), author.email(), author.name(), author.email());
     }
 
     Hash commit(Namespace namespace, String censusDomain, String sponsorId) throws IOException {
         var activeReviews = filterActiveReviews(pr.reviews());
