diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestUpdateConsumer.java
@@ -21,15 +21,18 @@
  * questions.
  */
 package org.openjdk.skara.bots.notify;
 
 import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.vcs.Hash;
 import org.openjdk.skara.vcs.openjdk.Issue;
 
 public interface PullRequestUpdateConsumer extends Notifier {
     default void handleNewIssue(PullRequest pr, Issue issue) {
     }
     default void handleRemovedIssue(PullRequest pr, Issue issue) {
     }
     default void handleNewPullRequest(PullRequest pr) {
     }
+    default void handleIntegratedPullRequest(PullRequest pr, Hash hash) {
+    }
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
@@ -167,10 +167,14 @@
 
     private void notifyNewPr(PullRequest pr) {
         pullRequestUpdateConsumers.forEach(c -> c.handleNewPullRequest(pr));
     }
 
+    private void notifyIntegratedPr(PullRequest pr, Hash hash) {
+        pullRequestUpdateConsumers.forEach(c -> c.handleIntegratedPullRequest(pr, hash));
+    }
+
     @Override
     public void run(Path scratchPath) {
         var historyPath = scratchPath.resolve("notify").resolve("history");
         var storage = prStateStorageBuilder
                 .serializer(this::serializePrState)
@@ -196,13 +200,21 @@
                         .filter(issue -> !issues.contains(issue))
                         .forEach(this::notifyListenersRemoved);
             issues.stream()
                   .filter(issue -> !storedIssues.contains(issue))
                   .forEach(this::notifyListenersAdded);
+
+            var storedCommit = storedState.get().commitId();
+            if (!storedCommit.isPresent() && state.commitId().isPresent()) {
+                notifyIntegratedPr(pr, state.commitId().get());
+            }
         } else {
             notifyNewPr(pr);
             issues.forEach(this::notifyListenersAdded);
+            if (state.commitId().isPresent()) {
+                notifyIntegratedPr(pr, state.commitId().get());
+            }
         }
 
         storage.put(state);
     }
 
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/issue/IssueUpdater.java
@@ -31,11 +31,11 @@
 
 import java.net.URI;
 import java.util.*;
 import java.util.logging.Logger;
 
-public class IssueUpdater implements RepositoryUpdateConsumer, PullRequestUpdateConsumer {
+public class IssueUpdater implements PullRequestUpdateConsumer {
     private final IssueProject issueProject;
     private final boolean reviewLink;
     private final URI reviewIcon;
     private final boolean commitLink;
     private final URI commitIcon;
@@ -56,11 +56,11 @@
     @Override
     public String name() {
         return "issue";
     }
 
-    private Optional<String> findIssueUsername(Commit commit) {
+    private Optional<String> findIssueUsername(CommitMetadata commit) {
         var authorEmail = EmailAddress.from(commit.author().email());
         if (authorEmail.domain().equals("openjdk.org")) {
             return Optional.of(authorEmail.localPart());
         }
 
@@ -71,54 +71,44 @@
         }
         return Optional.of(committerEmail.localPart());
     }
 
     @Override
-    public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch)  {
-        for (var commit : commits) {
-            var commitMessage = CommitMessageParsers.v1.parse(commit);
-            for (var commitIssue : commitMessage.issues()) {
-                var optionalIssue = issueProject.issue(commitIssue.shortId());
-                if (optionalIssue.isEmpty()) {
-                    log.severe("Cannot update issue " + commitIssue.id() + " with commit " + commit.hash().abbreviate()
-                            + " - issue not found in issue project");
-                    continue;
-                }
-                var issue = optionalIssue.get();
-
-                var candidates = repository.findPullRequestsWithComment(null, "Pushed as commit " + commit.hash() + ".");
-                if (candidates.size() != 1) {
-                    log.info("IssueUpdater@" + issue.id() + ": Skipping commit " + commit.hash().abbreviate() + " for repository " + repository.name() +
-                            " on branch " + branch.name() + " - " + candidates.size() + " matching PRs found (needed 1)");
-                    continue;
-                }
-                var candidate = candidates.get(0);
-                var prLink = candidate.webUrl();
-                if (!candidate.targetRef().equals(branch.name())) {
-                    log.info("IssueUpdater@" + issue.id() + ": Pull request " + prLink + " targets " + candidate.targetRef() + " - commit is on " + branch.toString() + " - skipping");
-                    continue;
-                }
+    public void handleIntegratedPullRequest(PullRequest pr, Hash hash)  {
+        var repository = pr.repository();
+        var commit = repository.commitMetadata(hash).orElseThrow(() ->
+                new IllegalStateException("Integrated commit " + hash +
+                                          " not present in repository " + repository.webUrl())
+        );
+        var commitMessage = CommitMessageParsers.v1.parse(commit);
+        for (var commitIssue : commitMessage.issues()) {
+            var optionalIssue = issueProject.issue(commitIssue.shortId());
+            if (optionalIssue.isEmpty()) {
+                log.severe("Cannot update issue " + commitIssue.id() + " with commit " + commit.hash().abbreviate()
+                        + " - issue not found in issue project");
+                continue;
+            }
+            var issue = optionalIssue.get();
 
-                if (commitLink) {
-                    var linkBuilder = Link.create(repository.webUrl(commit.hash()), "Commit")
-                                          .summary(repository.name() + "/" + commit.hash().abbreviate());
-                    if (commitIcon != null) {
-                        linkBuilder.iconTitle("Commit");
-                        linkBuilder.iconUrl(commitIcon);
-                    }
-                    issue.addLink(linkBuilder.build());
+            if (commitLink) {
+                var linkBuilder = Link.create(repository.webUrl(hash), "Commit")
+                                      .summary(repository.name() + "/" + hash.abbreviate());
+                if (commitIcon != null) {
+                    linkBuilder.iconTitle("Commit");
+                    linkBuilder.iconUrl(commitIcon);
                 }
+                issue.addLink(linkBuilder.build());
+            }
 
-                if (issue.state() == Issue.State.OPEN) {
-                    issue.setState(Issue.State.RESOLVED);
-                    if (issue.assignees().isEmpty()) {
-                        var username = findIssueUsername(commit);
-                        if (username.isPresent()) {
-                            var assignee = issueProject.issueTracker().user(username.get());
-                            if (assignee.isPresent()) {
-                                issue.setAssignees(List.of(assignee.get()));
-                            }
+            if (issue.state() == Issue.State.OPEN) {
+                issue.setState(Issue.State.RESOLVED);
+                if (issue.assignees().isEmpty()) {
+                    var username = findIssueUsername(commit);
+                    if (username.isPresent()) {
+                        var assignee = issueProject.issueTracker().user(username.get());
+                        if (assignee.isPresent()) {
+                            issue.setAssignees(List.of(assignee.get()));
                         }
                     }
                 }
             }
         }
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/IssueUpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/IssueUpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/IssueUpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/IssueUpdaterTests.java
@@ -63,11 +63,12 @@
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
+                                     .prUpdaters(List.of(updater))
+                                     .integratorId(repo.forge().currentUser().id())
                                      .build();
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
 
@@ -78,10 +79,11 @@
             var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "master");
             var pr = credentials.createPullRequest(repo, "master", "master", issue.id() + ": Fix that issue");
             pr.setBody("\n\n### Issue\n * [" + issue.id() + "](http://www.test.test/): The issue");
+            pr.addLabel("integrated");
             pr.addComment("Pushed as commit " + editHash.hex() + ".");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in a link
             var links = issue.links();
@@ -292,12 +294,12 @@
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile(".*"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
                                      .prUpdaters(List.of(updater))
+                                     .integratorId(repo.forge().currentUser().id())
                                      .build();
 
             // Initialize history
             localRepo.push(localRepo.resolve("master").orElseThrow(), repo.url(), "other");
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -316,10 +318,11 @@
             assertEquals(pr.webUrl(), links.get(0).uri().orElseThrow());
             assertEquals(reviewIcon, links.get(0).iconUrl().orElseThrow());
 
             // Simulate integration
             pr.addComment("Pushed as commit " + editHash.hex() + ".");
+            pr.addLabel("integrated");
             localRepo.push(editHash, repo.url(), "other");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The changeset should be reflected in another link
             var updatedIssue = issueProject.issue(issue.id()).orElseThrow();
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageParser.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageParser.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageParser.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/CommitMessageParser.java
@@ -21,15 +21,19 @@
  * questions.
  */
 package org.openjdk.skara.vcs.openjdk;
 
 import org.openjdk.skara.vcs.Commit;
+import org.openjdk.skara.vcs.CommitMetadata;
 
 import java.util.List;
 
 @FunctionalInterface
 public interface CommitMessageParser {
     CommitMessage parse(List<String> lines);
     default CommitMessage parse(Commit c) {
         return parse(c.message());
     }
+    default CommitMessage parse(CommitMetadata metadata) {
+        return parse(metadata.message());
+    }
 }
