diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestInstance.java
@@ -217,11 +217,11 @@
         }
         return ret;
     }
 
     PullRequestCheckIssueVisitor createVisitor(Hash localHash, CensusInstance censusInstance) throws IOException {
-        var checks = JCheck.checks(localRepo(), censusInstance.census(), localHash);
+        var checks = JCheck.checksFor(localRepo(), censusInstance.census(), targetHash);
         return new PullRequestCheckIssueVisitor(checks);
     }
 
     void executeChecks(Hash localHash, CensusInstance censusInstance, PullRequestCheckIssueVisitor visitor, List<String> additionalConfiguration) throws Exception {
         try (var issues = JCheck.check(localRepo(), censusInstance.census(), CommitMessageParsers.v1, localHash,
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -1088,11 +1088,11 @@
             assertEquals(CheckStatus.FAILURE, check.status());
         }
     }
 
     @Test
-    void retryOnException(TestInfo testInfo) throws IOException {
+    void useJCheckConfFromTargetBranch(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var reviewer = credentials.getHostedRepository();
 
@@ -1104,42 +1104,30 @@
             // Populate the projects repository
             var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());
             var masterHash = localRepo.resolve("master").orElseThrow();
             localRepo.push(masterHash, author.url(), "master", true);
 
-            // Break the jcheck configuration
+            // Break the jcheck configuration on the "edit" branch
             var confPath = tempFolder.path().resolve(".jcheck/conf");
             var oldConf = Files.readString(confPath, StandardCharsets.UTF_8);
             Files.writeString(confPath, "Hello there!", StandardCharsets.UTF_8);
             localRepo.add(confPath);
             var editHash = CheckableRepository.appendAndCommit(localRepo, "A change");
             localRepo.push(editHash, author.url(), "edit", true);
             var pr = credentials.createPullRequest(author, "master", "edit",
                                                    "This is a pull request", true);
 
-            // Check the status - should throw every time
-            assertThrows(RuntimeException.class, () -> TestBotRunner.runPeriodicItems(checkBot));
-            assertThrows(RuntimeException.class, () -> TestBotRunner.runPeriodicItems(checkBot));
-            assertThrows(RuntimeException.class, () -> TestBotRunner.runPeriodicItems(checkBot));
+            // Check the status - should *not* throw because valid .jcheck/conf from
+            // "master" branch should be used
+            TestBotRunner.runPeriodicItems(checkBot);
+            TestBotRunner.runPeriodicItems(checkBot);
+            TestBotRunner.runPeriodicItems(checkBot);
 
-            // Verify that the check failed
+            // Verify that the check succeeded
             var checks = pr.checks(editHash);
             assertEquals(1, checks.size());
             var check = checks.get("jcheck");
-            assertEquals(CheckStatus.FAILURE, check.status());
-
-            Files.writeString(confPath, oldConf, StandardCharsets.UTF_8);
-            localRepo.add(confPath);
-            editHash = CheckableRepository.appendAndCommit(localRepo, "Another change");
-            localRepo.push(editHash, author.url(), "edit");
-
-            TestBotRunner.runPeriodicItems(checkBot);
-
-            // Verify that the check now passes
-            checks = pr.checks(editHash);
-            assertEquals(1, checks.size());
-            check = checks.get("jcheck");
             assertEquals(CheckStatus.SUCCESS, check.status());
         }
     }
 
     @Test
diff a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
--- a/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
+++ b/jcheck/src/main/java/org/openjdk/skara/jcheck/JCheck.java
@@ -136,15 +136,15 @@
 
         var conf = configuration.get();
         return new HashSet<>(conf.checks().enabled(commitChecks));
     }
 
-    private Set<Check> checksForCommits() throws IOException {
+    private Set<Check> checksForRange() throws IOException {
         try (var commits = repository.commits(revisionRange)) {
             return commits.stream()
-                    .flatMap(commit -> checksForCommit(commit).stream())
-                    .collect(Collectors.toSet());
+                          .flatMap(commit -> checksForCommit(commit).stream())
+                          .collect(Collectors.toSet());
         }
     }
 
     public static class Issues implements Iterable<Issue>, AutoCloseable {
         private final Iterator<Issue> iterator;
@@ -264,19 +264,19 @@
         var tagRegex = conf.isPresent() ? conf.get().repository().tags() : ".*";
 
         return check(repository, census, parser, branchRegex, tagRegex, revisionRange, whitelist, blacklist, List.of(), null);
     }
 
-    public static Set<Check> checks(ReadOnlyRepository repository, Census census, Hash hash) throws IOException {
+    public static Set<Check> checksFor(ReadOnlyRepository repository, Census census, Hash hash) throws IOException {
         var jcheck = new JCheck(repository,
                                 census,
                                 CommitMessageParsers.v1,
-                                hash.hex() + "^.." + hash.hex(),
+                                repository.range(hash),
                                 Pattern.compile(".*"),
                                 Pattern.compile(".*"),
                                 new HashMap<String, Set<Hash>>(),
                                 new HashSet<Hash>(),
                                 List.of(),
                                 null);
-        return jcheck.checksForCommits();
+        return jcheck.checksForRange();
     }
 }
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/JCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/JCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/JCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/JCheckTests.java
@@ -253,11 +253,11 @@
             var censusPath = dir.path().resolve("census");
             Files.createDirectories(censusPath);
             CensusCreator.populateCensusDirectory(censusPath);
             var census = Census.parse(censusPath);
 
-            var checks = JCheck.checks(repo, census, first);
+            var checks = JCheck.checksFor(repo, census, first);
             var checkNames = checks.stream()
                                    .map(Check::name)
                                    .collect(Collectors.toSet());
             assertEquals(Set.of("whitespace", "reviewers"), checkNames);
         }
