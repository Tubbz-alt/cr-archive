diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -666,10 +666,52 @@
             await(p);
             return head();
         }
     }
 
+    @Override
+    public Hash commit(String message, String authorName, String authorEmail, ZonedDateTime authorDate, String committerName, String committerEmail, ZonedDateTime committerDate, List<Hash> parents, Tree tree) throws IOException {
+        // Ensure we don't create identical commits
+        if (parents.size() == 1) {
+            var parentTree = tree(parents.get(0));
+            if (parentTree.equals(tree)) {
+                return parents.get(0);
+            }
+        }
+
+        var cmdLine = new ArrayList<>(List.of("git", "commit-tree", tree.hash().hex(), "-m", message));
+        for (var parent : parents) {
+            cmdLine.add("-p");
+            cmdLine.add(parent.hex());
+        }
+        var cmd = Process.capture(cmdLine.toArray(new String[0]))
+                .workdir(dir)
+                .environ("GIT_AUTHOR_NAME", authorName)
+                .environ("GIT_AUTHOR_EMAIL", authorEmail)
+                .environ("GIT_COMMITTER_NAME", committerName)
+                .environ("GIT_COMMITTER_EMAIL", committerEmail);
+        if (authorDate != null) {
+            cmd = cmd.environ("GIT_AUTHOR_DATE",
+                    authorDate.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME));
+        }
+        if (committerDate != null) {
+            cmd = cmd.environ("GIT_COMMITTER_DATE",
+                    committerDate.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME));
+        }
+        try (var p = cmd.execute()) {
+            var res = await(p);
+            if (res.stdout().size() != 1) {
+                throw new IOException("Unexpected output: " + res.stdout());
+            }
+            var commitHash = res.stdout().get(0).trim();
+            if (commitHash.length() != 40) {
+                throw new IOException("Unexpected output: " + commitHash);
+            }
+            return new Hash(commitHash);
+        }
+    }
+
     @Override
     public Hash amend(String message, String authorName, String authorEmail) throws IOException {
         return amend(message, authorName, authorEmail, null, null);
     }
 
@@ -1311,10 +1353,32 @@
         }
 
         return modules;
     }
 
+    @Override
+    public Tree tree(Hash h) throws IOException {
+        String treeHash;
+        try (var p = capture("git", "cat-file", "-p", h.hex())) {
+            var res = p.await();
+            if (res.stdout().size() > 0) {
+                var line = res.stdout().get(0);
+                if (line.startsWith("tree ")) {
+                    treeHash = line.substring(5).trim();
+                    if (treeHash.length() != 40) {
+                        throw new IOException("Unexpected output: " + treeHash);
+                    }
+                } else {
+                    throw new IOException("Unexpected output: " + line);
+                }
+            } else {
+                throw new IOException("Unexpected output: " + res.stderr());
+            }
+        }
+        return new Tree(new Hash(treeHash));
+    }
+
     @Override
     public Optional<Tag.Annotated> annotate(Tag tag) throws IOException {
         var ref = "refs/tags/" + tag.name();
         var format = "%(refname:short)%0a%(*objectname)%0a%(taggername) %(taggeremail)%0a%(taggerdate:iso-strict)%0a%(contents)";
         try (var p = capture("git", "for-each-ref", "--format", format, ref)) {
