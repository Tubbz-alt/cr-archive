diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IntegrateCommand.java
@@ -94,12 +94,10 @@
             var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
             var prInstance = new PullRequestInstance(path,
                                                      new HostedRepositoryPool(seedPath),
                                                      pr,
                                                      bot.ignoreStaleReviews());
-            var localHash = prInstance.commit(censusInstance.namespace(), censusInstance.configuration().census().domain(), null);
-
             // Validate the target hash if requested
             var rebaseMessage = new StringWriter();
             if (!args.isBlank()) {
                 var wantedHash = new Hash(args);
                 if (!prInstance.targetHash().equals(wantedHash)) {
@@ -107,22 +105,20 @@
                     reply.println(" - it has moved to " + prInstance.targetHash() + ". Aborting integration.");
                     return;
                 }
             };
 
-            // Now rebase onto the target hash
+            // Now merge the latest changes from the target
             var rebaseWriter = new PrintWriter(rebaseMessage);
-            var rebasedHash = prInstance.rebase(localHash, rebaseWriter);
+            var rebasedHash = prInstance.mergeTarget(rebaseWriter);
             if (rebasedHash.isEmpty()) {
                 reply.println(rebaseMessage.toString());
                 return;
-            } else {
-                if (!rebasedHash.get().equals(localHash)) {
-                    localHash = rebasedHash.get();
-                }
             }
 
+            var localHash = prInstance.commit(rebasedHash.get(), censusInstance.namespace(), censusInstance.configuration().census().domain(), null);
+
             var issues = prInstance.createVisitor(localHash, censusInstance);
             var additionalConfiguration = AdditionalConfiguration.get(prInstance.localRepo(), localHash, pr.repository().forge().currentUser(), allComments);
             prInstance.executeChecks(localHash, censusInstance, issues, additionalConfiguration);
             if (!issues.getMessages().isEmpty()) {
                 reply.print("Your merge request cannot be fulfilled at this time, as ");
@@ -157,12 +153,11 @@
                 reply.print("Warning! Your commit did not result in any changes! ");
                 reply.println("No push attempt will be made.");
             }
         } catch (Exception e) {
             log.throwing("IntegrateCommand", "handle", e);
-            reply.println("An error occurred during final integration jcheck");
-            throw new RuntimeException(e);
+            reply.println("An error occurred during final integration jcheck. No push attempt will be made.");
         }
     }
 
     @Override
     public String description() {
