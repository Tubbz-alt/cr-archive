diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -12,17 +12,19 @@
 import java.security.*;
 import java.time.*;
 import java.util.*;
 import java.util.function.Consumer;
 import java.util.logging.Logger;
+import java.util.regex.*;
 import java.util.stream.*;
 
 class ReviewArchive {
     private final PullRequest pr;
     private final EmailAddress sender;
 
     private final List<Comment> comments = new ArrayList<>();
+    private final List<Comment> ignoredComments = new ArrayList<>();
     private final List<Review> reviews = new ArrayList<>();
     private final List<ReviewComment> reviewComments = new ArrayList<>();
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.mlbridge");
 
@@ -33,10 +35,14 @@
 
     void addComment(Comment comment) {
         comments.add(comment);
     }
 
+    void addIgnored(Comment comment) {
+        ignoredComments.add(comment);
+    }
+
     void addReview(Review review) {
         reviews.add(review);
     }
 
     void addReviewComment(ReviewComment reviewComment) {
@@ -50,10 +56,22 @@
                         .filter(item -> item.parent().isPresent())
                         .filter(item -> item.parent().get().equals(parent))
                         .findAny();
     }
 
+    private final static Pattern pushedPattern = Pattern.compile("Pushed as commit ([a-f0-9]{40})\\.");
+
+    private Optional<Hash> findIntegratedHash() {
+        return ignoredComments.stream()
+                              .map(Comment::body)
+                              .map(pushedPattern::matcher)
+                              .filter(Matcher::find)
+                              .map(m -> m.group(1))
+                              .map(Hash::new)
+                              .findAny();
+    }
+
     private List<ArchiveItem> generateArchiveItems(List<Email> sentEmails, Repository localRepo, URI issueTracker, String issuePrefix, HostUserToEmailAuthor hostUserToEmailAuthor, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole, WebrevStorage.WebrevGenerator webrevGenerator, WebrevNotification webrevNotification, String subjectPrefix) throws IOException {
         var generated = new ArrayList<ArchiveItem>();
         Hash lastBase = null;
         Hash lastHead = null;
         int revisionIndex = 0;
@@ -120,14 +138,29 @@
             var reply = ArchiveItem.from(pr, reviewComment, hostUserToEmailAuthor, parent);
             generated.add(reply);
         }
 
         // Post a closed notice for regular RFR threads that weren't integrated
-        if ((pr.state() != Issue.State.OPEN) && threadPrefix.equals("RFR") && !pr.labels().contains("integrated")) {
+        if (pr.state() != Issue.State.OPEN) {
             var parent = generated.get(0);
-            var reply = ArchiveItem.closedNotice(pr, hostUserToEmailAuthor, parent, subjectPrefix, threadPrefix);
-            generated.add(reply);
+            if (pr.labels().contains("integrated")) {
+                var hash = findIntegratedHash();
+                if (hash.isPresent()) {
+                    var commit = localRepo.lookup(hash.get());
+                    var reply = ArchiveItem.integratedNotice(pr, localRepo, commit.orElseThrow(), hostUserToEmailAuthor, parent, subjectPrefix, threadPrefix);
+                    generated.add(reply);
+                } else {
+                    throw new RuntimeException("PR " + pr.webUrl() + " has integrated label but no integration comment");
+                }
+            } else if (localRepo.isAncestor(pr.headHash(), pr.targetHash())) {
+                var commit = localRepo.lookup(pr.headHash());
+                var reply = ArchiveItem.integratedNotice(pr, localRepo, commit.orElseThrow(), hostUserToEmailAuthor, parent, subjectPrefix, threadPrefix);
+                generated.add(reply);
+            } else if (threadPrefix.equals("RFR")) {
+                var reply = ArchiveItem.closedNotice(pr, hostUserToEmailAuthor, parent, subjectPrefix, threadPrefix);
+                generated.add(reply);
+            }
         }
 
         return generated;
     }
 
