diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
@@ -41,42 +41,38 @@
     private final StorageBuilder<UpdatedBranch> branchStorageBuilder;
     private final StorageBuilder<PullRequestState> prStateStorageBuilder;
     private final List<RepositoryListener> repoListeners = new ArrayList<>();
     private final List<PullRequestListener> prListeners = new ArrayList<>();
     private final PullRequestUpdateCache updateCache;
-    private final Set<String> readyLabels;
     private final Map<String, Pattern> readyComments;
     private final String integratorId;
 
     private ZonedDateTime lastFullUpdate;
 
     NotifyBot(HostedRepository repository, Path storagePath, Pattern branches, StorageBuilder<UpdatedTag> tagStorageBuilder,
               StorageBuilder<UpdatedBranch> branchStorageBuilder, StorageBuilder<PullRequestState> prStateStorageBuilder,
-              Set<String> readyLabels, Map<String, Pattern> readyComments, String integratorId) {
+              Map<String, Pattern> readyComments, String integratorId) {
         this.repository = repository;
         this.storagePath = storagePath;
         this.branches = branches;
         this.tagStorageBuilder = tagStorageBuilder;
         this.branchStorageBuilder = branchStorageBuilder;
         this.prStateStorageBuilder = prStateStorageBuilder;
         this.updateCache = new PullRequestUpdateCache();
-        this.readyLabels = readyLabels;
         this.readyComments = readyComments;
         this.integratorId = integratorId;
     }
 
     public static NotifyBotBuilder newBuilder() {
         return new NotifyBotBuilder();
     }
 
-    private boolean isReady(PullRequest pr) {
+    private boolean isOfInterest(PullRequest pr) {
         var labels = new HashSet<>(pr.labels());
-        for (var readyLabel : readyLabels) {
-            if (!labels.contains(readyLabel)) {
-                log.fine("PR is not yet ready - missing label '" + readyLabel + "'");
-                return false;
-            }
+        if (!(labels.contains("rfr") || labels.contains("integrated"))) {
+            log.fine("PR is not yet ready - needs either 'rfr' or 'integrated' label");
+            return false;
         }
 
         var comments = pr.comments();
         for (var readyComment : readyComments.entrySet()) {
             var commentFound = false;
@@ -129,11 +125,11 @@
         }
 
         // Pull request events
         for (var pr : prs) {
             if (updateCache.needsUpdate(pr)) {
-                if (!isReady(pr)) {
+                if (!isOfInterest(pr)) {
                     continue;
                 }
                 ret.add(new PullRequestWorkItem(pr,
                                                 prStateStorageBuilder,
                                                 prListeners,
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java
@@ -34,11 +34,10 @@
     private Path storagePath;
     private Pattern branches;
     private StorageBuilder<UpdatedTag> tagStorageBuilder;
     private StorageBuilder<UpdatedBranch> branchStorageBuilder;
     private StorageBuilder<PullRequestState> prStateStorageBuilder;
-    private Set<String> readyLabels = Set.of();
     private Map<String, Pattern> readyComments = Map.of();
     private String integratorId;
 
     public NotifyBotBuilder repository(HostedRepository repository) {
         this.repository = repository;
@@ -68,15 +67,10 @@
     public NotifyBotBuilder prStateStorageBuilder(StorageBuilder<PullRequestState> prStateStorageBuilder) {
         this.prStateStorageBuilder = prStateStorageBuilder;
         return this;
     }
 
-    public NotifyBotBuilder readyLabels(Set<String> readyLabels) {
-        this.readyLabels = readyLabels;
-        return this;
-    }
-
     public NotifyBotBuilder readyComments(Map<String, Pattern> readyComments) {
         this.readyComments = readyComments;
         return this;
     }
 
@@ -84,8 +78,8 @@
         this.integratorId = integratorId;
         return this;
     }
 
     public NotifyBot build() {
-        return new NotifyBot(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, prStateStorageBuilder, readyLabels, readyComments, integratorId);
+        return new NotifyBot(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, prStateStorageBuilder, readyComments, integratorId);
     }
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
@@ -61,13 +61,10 @@
         var databaseRepo = configuration.repository(database.get("repository").asString());
         var databaseRef = configuration.repositoryRef(database.get("repository").asString());
         var databaseName = database.get("name").asString();
         var databaseEmail = database.get("email").asString();
 
-        var readyLabels = specific.get("ready").get("labels").stream()
-                                  .map(JSONValue::asString)
-                                  .collect(Collectors.toSet());
         var readyComments = specific.get("ready").get("comments").stream()
                                     .map(JSONValue::asObject)
                                     .collect(Collectors.toMap(obj -> obj.get("user").asString(),
                                                               obj -> Pattern.compile(obj.get("pattern").asString())));
         var integratorId = specific.get("integrator").asString();
@@ -102,11 +99,10 @@
                                .storagePath(configuration.storageFolder())
                                .branches(branchPattern)
                                .tagStorageBuilder(tagStorageBuilder)
                                .branchStorageBuilder(branchStorageBuilder)
                                .prStateStorageBuilder(prStateStorageBuilder)
-                               .readyLabels(readyLabels)
                                .readyComments(readyComments)
                                .integratorId(integratorId)
                                .build();
 
             var hasAttachedNotifier = false;
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/issue/IssueNotifierTests.java
@@ -129,11 +129,10 @@
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .readyLabels(Set.of("rfr"))
                                      .readyComments(Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")))
                                      .build();
             var updater = IssueNotifier.newBuilder()
                                       .issueProject(issueProject)
                                       .reviewIcon(reviewIcon)
@@ -230,11 +229,10 @@
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
                                      .prStateStorageBuilder(prStateStorage)
-                                     .readyLabels(Set.of("rfr"))
                                      .readyComments(Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")))
                                      .build();
             var updater = IssueNotifier.newBuilder()
                                       .issueProject(issueProject)
                                       .reviewLink(false)
@@ -311,10 +309,11 @@
             var issue = issueProject.createIssue("This is an issue", List.of("Indeed"), Map.of("issuetype", JSON.of("Enhancement")));
             var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", issue.id() + ": Fix that issue");
             localRepo.push(editHash, repo.url(), "edit", true);
             var pr = credentials.createPullRequest(repo, "other", "edit", issue.id() + ": Fix that issue");
             pr.setBody("\n\n### Issue\n * [" + issue.id() + "](http://www.test.test/): The issue");
+            pr.addLabel("rfr");
             TestBotRunner.runPeriodicItems(notifyBot);
 
             // The issue should now contain a link to the PR
             var links = issue.links();
             assertEquals(1, links.size());
