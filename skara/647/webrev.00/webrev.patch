diff a/bots/notify/build.gradle b/bots/notify/build.gradle
--- a/bots/notify/build.gradle
+++ b/bots/notify/build.gradle
@@ -26,10 +26,11 @@
     test {
         requires 'org.junit.jupiter.api'
         requires 'org.openjdk.skara.test'
         opens 'org.openjdk.skara.bots.notify' to 'org.junit.platform.commons'
         opens 'org.openjdk.skara.bots.notify.mailinglist' to 'org.junit.platform.commons'
+        opens 'org.openjdk.skara.bots.notify.json' to 'org.junit.platform.commons'
     }
 }
 
 dependencies {
     implementation project(':ci')
diff a/bots/notify/src/main/java/module-info.java b/bots/notify/src/main/java/module-info.java
--- a/bots/notify/src/main/java/module-info.java
+++ b/bots/notify/src/main/java/module-info.java
@@ -35,9 +35,9 @@
     provides org.openjdk.skara.bot.BotFactory with org.openjdk.skara.bots.notify.NotifyBotFactory;
 
     uses org.openjdk.skara.bots.notify.NotifierFactory;
     provides org.openjdk.skara.bots.notify.NotifierFactory with
             org.openjdk.skara.bots.notify.issue.IssueUpdaterFactory,
-            org.openjdk.skara.bots.notify.json.JsonUpdaterFactory,
+            org.openjdk.skara.bots.notify.json.JsonNotifierFactory,
             org.openjdk.skara.bots.notify.mailinglist.MailingListNotifierFactory,
             org.openjdk.skara.bots.notify.slack.SlackUpdaterFactory;
 }
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java
--- /dev/null
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifier.java
@@ -0,0 +1,111 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.notify.json;
+
+import org.openjdk.skara.bots.notify.*;
+import org.openjdk.skara.forge.HostedRepository;
+import org.openjdk.skara.json.*;
+import org.openjdk.skara.vcs.*;
+import org.openjdk.skara.vcs.openjdk.*;
+
+import java.nio.file.Path;
+import java.time.format.DateTimeFormatter;
+import java.util.*;
+
+class JsonNotifier implements RepositoryUpdateConsumer {
+    private final Path path;
+    private final String version;
+    private final String defaultBuild;
+
+    JsonNotifier(Path path, String version, String defaultBuild) {
+        this.path = path;
+        this.version = version;
+        this.defaultBuild = defaultBuild;
+    }
+
+    private JSONObject commitToChanges(HostedRepository repository, Repository localRepository, Commit commit, String build) {
+        var ret = JSON.object();
+        ret.put("url",  repository.webUrl(commit.hash()).toString()); //FIXME
+        ret.put("version", version);
+        ret.put("build", build);
+
+        var parsedMessage = CommitMessageParsers.v1.parse(commit);
+        var issueIds = JSON.array();
+        for (var issue : parsedMessage.issues()) {
+            issueIds.add(JSON.of(issue.shortId()));
+        }
+        ret.put("issue", issueIds);
+        ret.put("user", commit.author().name());
+        ret.put("date", commit.date().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss +0000")));
+
+        return ret;
+    }
+
+    private JSONObject issuesToChanges(HostedRepository repository, Repository localRepository, List<Issue> issues, String build) {
+        var ret = JSON.object();
+        ret.put("version", version);
+        ret.put("build", build);
+
+        var issueIds = JSON.array();
+        for (var issue : issues) {
+            issueIds.add(JSON.of(issue.shortId()));
+        }
+
+        ret.put("issue", issueIds);
+
+        return ret;
+    }
+
+    @Override
+    public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
+        try (var writer = new JsonWriter(path, repository.name())) {
+            for (var commit : commits) {
+                var json = commitToChanges(repository, localRepository, commit, defaultBuild);
+                writer.write(json);
+            }
+        } catch (RuntimeException e) {
+            throw new NonRetriableException(e);
+        }
+    }
+
+    @Override
+    public void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) throws NonRetriableException {
+        var build = String.format("b%02d", tag.buildNum());
+        try (var writer = new JsonWriter(path, repository.name())) {
+            var issues = new ArrayList<Issue>();
+            for (var commit : commits) {
+                var parsedMessage = CommitMessageParsers.v1.parse(commit);
+                issues.addAll(parsedMessage.issues());
+            }
+            var json = issuesToChanges(repository, localRepository, issues, build);
+            writer.write(json);
+        } catch (RuntimeException e) {
+            throw new NonRetriableException(e);
+        }
+    }
+
+    @Override
+    public String name() {
+        return "json";
+    }
+}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifierFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifierFactory.java
--- /dev/null
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonNotifierFactory.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.notify.json;
+
+import org.openjdk.skara.bot.BotConfiguration;
+import org.openjdk.skara.bots.notify.*;
+import org.openjdk.skara.json.JSONObject;
+
+import java.nio.file.Path;
+
+public class JsonNotifierFactory implements NotifierFactory {
+    @Override
+    public String name() {
+        return "json";
+    }
+
+    @Override
+    public Notifier create(BotConfiguration botConfiguration, JSONObject notifierConfiguration) {
+        var folder = notifierConfiguration.get("folder").asString();
+        var build = notifierConfiguration.get("build").asString();
+        var version = notifierConfiguration.get("version").asString();
+
+        return new JsonNotifier(Path.of(folder), version, build);
+    }
+}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonUpdateWriter.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonUpdateWriter.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonUpdateWriter.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.bots.notify.json;
-
-import org.openjdk.skara.json.*;
-
-import java.io.*;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.*;
-import java.util.UUID;
-
-public class JsonUpdateWriter implements AutoCloseable {
-
-    private int sequence = 0;
-    private final String baseName;
-    private final Path path;
-    private JSONArray current;
-
-    private void flush() {
-        var tempName = path.resolve(String.format("%s.%03d.temp", baseName, sequence));
-        var finalName = path.resolve(String.format("%s.%03d.json", baseName, sequence));
-
-        try {
-            Files.write(tempName, current.toString().getBytes(StandardCharsets.UTF_8));
-            Files.move(tempName, finalName);
-        } catch (IOException e) {
-            throw new UncheckedIOException(e);
-        }
-
-        sequence++;
-        current = JSON.array();
-    }
-
-    JsonUpdateWriter(Path path, String projectName) {
-        this.path = path;
-
-        var uuid = UUID.randomUUID();
-        baseName = "jbs." + projectName.replace("/", ".") + "." + uuid.toString().replace("-", "");
-        current = JSON.array();
-    }
-
-    public void write(JSONObject obj) {
-        current.add(obj);
-        if (current.size() > 100) {
-            flush();
-        }
-    }
-
-    @Override
-    public void close() {
-        if (current.size() > 0) {
-            flush();
-        }
-    }
-}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonUpdater.java
+++ /dev/null
@@ -1,119 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.bots.notify.json;
-
-import org.openjdk.skara.bots.notify.*;
-import org.openjdk.skara.forge.HostedRepository;
-import org.openjdk.skara.json.*;
-import org.openjdk.skara.vcs.*;
-import org.openjdk.skara.vcs.openjdk.*;
-
-import java.nio.file.Path;
-import java.time.format.DateTimeFormatter;
-import java.util.*;
-
-public class JsonUpdater implements RepositoryUpdateConsumer {
-    private final Path path;
-    private final String version;
-    private final String defaultBuild;
-
-    public JsonUpdater(Path path, String version, String defaultBuild) {
-        this.path = path;
-        this.version = version;
-        this.defaultBuild = defaultBuild;
-    }
-
-    private JSONObject commitToChanges(HostedRepository repository, Repository localRepository, Commit commit, String build) {
-        var ret = JSON.object();
-        ret.put("url",  repository.webUrl(commit.hash()).toString()); //FIXME
-        ret.put("version", version);
-        ret.put("build", build);
-
-        var parsedMessage = CommitMessageParsers.v1.parse(commit);
-        var issueIds = JSON.array();
-        for (var issue : parsedMessage.issues()) {
-            issueIds.add(JSON.of(issue.shortId()));
-        }
-        ret.put("issue", issueIds);
-        ret.put("user", commit.author().name());
-        ret.put("date", commit.date().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss +0000")));
-
-        return ret;
-    }
-
-    private JSONObject issuesToChanges(HostedRepository repository, Repository localRepository, List<Issue> issues, String build) {
-        var ret = JSON.object();
-        ret.put("version", version);
-        ret.put("build", build);
-
-        var issueIds = JSON.array();
-        for (var issue : issues) {
-            issueIds.add(JSON.of(issue.shortId()));
-        }
-
-        ret.put("issue", issueIds);
-
-        return ret;
-    }
-
-    @Override
-    public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
-        try (var writer = new JsonUpdateWriter(path, repository.name())) {
-            for (var commit : commits) {
-                var json = commitToChanges(repository, localRepository, commit, defaultBuild);
-                writer.write(json);
-            }
-        } catch (RuntimeException e) {
-            throw new NonRetriableException(e);
-        }
-    }
-
-    @Override
-    public void handleOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) throws NonRetriableException {
-        var build = String.format("b%02d", tag.buildNum());
-        try (var writer = new JsonUpdateWriter(path, repository.name())) {
-            var issues = new ArrayList<Issue>();
-            for (var commit : commits) {
-                var parsedMessage = CommitMessageParsers.v1.parse(commit);
-                issues.addAll(parsedMessage.issues());
-            }
-            var json = issuesToChanges(repository, localRepository, issues, build);
-            writer.write(json);
-        } catch (RuntimeException e) {
-            throw new NonRetriableException(e);
-        }
-    }
-
-    @Override
-    public void handleTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) {
-    }
-
-    @Override
-    public void handleNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) {
-    }
-
-    @Override
-    public String name() {
-        return "json";
-    }
-}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonUpdaterFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonUpdaterFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonUpdaterFactory.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.bots.notify.json;
-
-import org.openjdk.skara.bot.BotConfiguration;
-import org.openjdk.skara.bots.notify.*;
-import org.openjdk.skara.json.JSONObject;
-
-import java.nio.file.Path;
-
-public class JsonUpdaterFactory implements NotifierFactory {
-    @Override
-    public String name() {
-        return "json";
-    }
-
-    @Override
-    public Notifier create(BotConfiguration botConfiguration, JSONObject notifierConfiguration) {
-        var folder = notifierConfiguration.get("folder").asString();
-        var build = notifierConfiguration.get("build").asString();
-        var version = notifierConfiguration.get("version").asString();
-
-        return new JsonUpdater(Path.of(folder), version, build);
-    }
-}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonWriter.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonWriter.java
--- /dev/null
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/json/JsonWriter.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.notify.json;
+
+import org.openjdk.skara.json.*;
+
+import java.io.*;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.*;
+import java.util.UUID;
+
+class JsonWriter implements AutoCloseable {
+
+    private int sequence = 0;
+    private final String baseName;
+    private final Path path;
+    private JSONArray current;
+
+    private void flush() {
+        var tempName = path.resolve(String.format("%s.%03d.temp", baseName, sequence));
+        var finalName = path.resolve(String.format("%s.%03d.json", baseName, sequence));
+
+        try {
+            Files.write(tempName, current.toString().getBytes(StandardCharsets.UTF_8));
+            Files.move(tempName, finalName);
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
+
+        sequence++;
+        current = JSON.array();
+    }
+
+    JsonWriter(Path path, String projectName) {
+        this.path = path;
+
+        var uuid = UUID.randomUUID();
+        baseName = "jbs." + projectName.replace("/", ".") + "." + uuid.toString().replace("-", "");
+        current = JSON.array();
+    }
+
+    public void write(JSONObject obj) {
+        current.add(obj);
+        if (current.size() > 100) {
+            flush();
+        }
+    }
+
+    @Override
+    public void close() {
+        if (current.size() > 0) {
+            flush();
+        }
+    }
+}
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/JsonUpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/JsonUpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/JsonUpdaterTests.java
+++ /dev/null
@@ -1,169 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.bots.notify;
-
-import org.junit.jupiter.api.*;
-import org.openjdk.skara.bots.notify.json.JsonUpdater;
-import org.openjdk.skara.json.*;
-import org.openjdk.skara.test.*;
-
-import java.io.IOException;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.*;
-import java.util.List;
-import java.util.regex.Pattern;
-import java.util.stream.Collectors;
-
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.openjdk.skara.bots.notify.UpdaterTests.*;
-
-public class JsonUpdaterTests {
-    private List<Path> findJsonFiles(Path folder, String partialName) throws IOException {
-        return Files.walk(folder)
-                    .filter(path -> path.toString().endsWith(".json"))
-                    .filter(path -> path.toString().contains(partialName))
-                    .collect(Collectors.toList());
-    }
-
-    @Test
-    void testJsonUpdaterBranch(TestInfo testInfo) throws IOException {
-        try (var credentials = new HostCredentials(testInfo);
-             var tempFolder = new TemporaryDirectory()) {
-            var repo = credentials.getHostedRepository();
-            var localRepoFolder = tempFolder.path().resolve("repo");
-            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());
-            credentials.commitLock(localRepo);
-            localRepo.pushAll(repo.url());
-
-            var tagStorage = createTagStorage(repo);
-            var branchStorage = createBranchStorage(repo);
-            var prStateStorage = createPullRequestStateStorage(repo);
-            var jsonFolder = tempFolder.path().resolve("json");
-            Files.createDirectory(jsonFolder);
-            var storageFolder = tempFolder.path().resolve("storage");
-
-            var updater = new JsonUpdater(jsonFolder, "12", "team");
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile("master"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
-                                     .build();
-
-            TestBotRunner.runPeriodicItems(notifyBot);
-            assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
-
-            var editHash = CheckableRepository.appendAndCommit(localRepo, "One more line", "12345678: Fixes");
-            localRepo.push(editHash, repo.url(), "master");
-            TestBotRunner.runPeriodicItems(notifyBot);
-            var jsonFiles = findJsonFiles(jsonFolder, "");
-            assertEquals(1, jsonFiles.size());
-            var jsonData = Files.readString(jsonFiles.get(0), StandardCharsets.UTF_8);
-            var json = JSON.parse(jsonData);
-            assertEquals(1, json.asArray().size());
-            assertEquals(repo.webUrl(editHash).toString(), json.asArray().get(0).get("url").asString());
-            assertEquals(List.of("12345678"), json.asArray().get(0).get("issue").asArray().stream()
-                                                  .map(JSONValue::asString)
-                                                  .collect(Collectors.toList()));
-        }
-    }
-
-    @Test
-    void testJsonUpdaterTag(TestInfo testInfo) throws IOException {
-        try (var credentials = new HostCredentials(testInfo);
-             var tempFolder = new TemporaryDirectory()) {
-            var repo = credentials.getHostedRepository();
-            var localRepoFolder = tempFolder.path().resolve("repo");
-            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());
-            credentials.commitLock(localRepo);
-            var masterHash = localRepo.resolve("master").orElseThrow();
-            localRepo.tag(masterHash, "jdk-12+1", "Added tag 1", "Duke", "duke@openjdk.java.net");
-            localRepo.pushAll(repo.url());
-
-            var tagStorage = UpdaterTests.createTagStorage(repo);
-            var branchStorage = createBranchStorage(repo);
-            var prStateStorage = createPullRequestStateStorage(repo);
-            var jsonFolder = tempFolder.path().resolve("json");
-            Files.createDirectory(jsonFolder);
-            var storageFolder =tempFolder.path().resolve("storage");
-
-            var updater = new JsonUpdater(jsonFolder, "12", "team");
-            var notifyBot = NotifyBot.newBuilder()
-                                     .repository(repo)
-                                     .storagePath(storageFolder)
-                                     .branches(Pattern.compile("master"))
-                                     .tagStorageBuilder(tagStorage)
-                                     .branchStorageBuilder(branchStorage)
-                                     .prStateStorageBuilder(prStateStorage)
-                                     .updaters(List.of(updater))
-                                     .build();
-
-            TestBotRunner.runPeriodicItems(notifyBot);
-            assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
-
-            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
-            localRepo.fetch(repo.url(), "history:history");
-            localRepo.tag(editHash, "jdk-12+2", "Added tag 2", "Duke", "duke@openjdk.java.net");
-            var editHash2 = CheckableRepository.appendAndCommit(localRepo, "Another line", "34567890: Even more fixes");
-            localRepo.tag(editHash2, "jdk-12+4", "Added tag 3", "Duke", "duke@openjdk.java.net");
-            localRepo.pushAll(repo.url());
-
-            TestBotRunner.runPeriodicItems(notifyBot);
-            var jsonFiles = findJsonFiles(jsonFolder, "");
-            assertEquals(3, jsonFiles.size());
-
-            for (var file : jsonFiles) {
-                var jsonData = Files.readString(file, StandardCharsets.UTF_8);
-                var json = JSON.parse(jsonData);
-
-                if (json.asArray().get(0).contains("date")) {
-                    assertEquals(2, json.asArray().size());
-                    assertEquals(List.of("23456789"), json.asArray().get(0).get("issue").asArray().stream()
-                                                          .map(JSONValue::asString)
-                                                          .collect(Collectors.toList()));
-                    assertEquals(repo.webUrl(editHash).toString(), json.asArray().get(0).get("url").asString());
-                    assertEquals("team", json.asArray().get(0).get("build").asString());
-                    assertEquals(List.of("34567890"), json.asArray().get(1).get("issue").asArray().stream()
-                                                          .map(JSONValue::asString)
-                                                          .collect(Collectors.toList()));
-                    assertEquals(repo.webUrl(editHash2).toString(), json.asArray().get(1).get("url").asString());
-                    assertEquals("team", json.asArray().get(1).get("build").asString());
-                } else {
-                    assertEquals(1, json.asArray().size());
-                    if (json.asArray().get(0).get("build").asString().equals("b02")) {
-                        assertEquals(List.of("23456789"), json.asArray().get(0).get("issue").asArray().stream()
-                                                              .map(JSONValue::asString)
-                                                              .collect(Collectors.toList()));
-                    } else {
-                        assertEquals("b04", json.asArray().get(0).get("build").asString());
-                        assertEquals(List.of("34567890"), json.asArray().get(0).get("issue").asArray().stream()
-                                                              .map(JSONValue::asString)
-                                                              .collect(Collectors.toList()));
-                    }
-                }
-            }
-        }
-    }}
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/json/JsonNotifierTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/json/JsonNotifierTests.java
--- /dev/null
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/json/JsonNotifierTests.java
@@ -0,0 +1,169 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.notify.json;
+
+import org.junit.jupiter.api.*;
+import org.openjdk.skara.bots.notify.*;
+import org.openjdk.skara.json.*;
+import org.openjdk.skara.test.*;
+
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.*;
+import java.util.List;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.openjdk.skara.bots.notify.UpdaterTests.*;
+
+public class JsonNotifierTests {
+    private List<Path> findJsonFiles(Path folder, String partialName) throws IOException {
+        return Files.walk(folder)
+                    .filter(path -> path.toString().endsWith(".json"))
+                    .filter(path -> path.toString().contains(partialName))
+                    .collect(Collectors.toList());
+    }
+
+    @Test
+    void testJsonNotifierBranch(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var localRepoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());
+            credentials.commitLock(localRepo);
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
+            var jsonFolder = tempFolder.path().resolve("json");
+            Files.createDirectory(jsonFolder);
+            var storageFolder = tempFolder.path().resolve("storage");
+
+            var updater = new JsonNotifier(jsonFolder, "12", "team");
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prStateStorageBuilder(prStateStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
+
+            TestBotRunner.runPeriodicItems(notifyBot);
+            assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
+
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "One more line", "12345678: Fixes");
+            localRepo.push(editHash, repo.url(), "master");
+            TestBotRunner.runPeriodicItems(notifyBot);
+            var jsonFiles = findJsonFiles(jsonFolder, "");
+            assertEquals(1, jsonFiles.size());
+            var jsonData = Files.readString(jsonFiles.get(0), StandardCharsets.UTF_8);
+            var json = JSON.parse(jsonData);
+            assertEquals(1, json.asArray().size());
+            assertEquals(repo.webUrl(editHash).toString(), json.asArray().get(0).get("url").asString());
+            assertEquals(List.of("12345678"), json.asArray().get(0).get("issue").asArray().stream()
+                                                  .map(JSONValue::asString)
+                                                  .collect(Collectors.toList()));
+        }
+    }
+
+    @Test
+    void testJsonNotifierTag(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var repo = credentials.getHostedRepository();
+            var localRepoFolder = tempFolder.path().resolve("repo");
+            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());
+            credentials.commitLock(localRepo);
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            localRepo.tag(masterHash, "jdk-12+1", "Added tag 1", "Duke", "duke@openjdk.java.net");
+            localRepo.pushAll(repo.url());
+
+            var tagStorage = UpdaterTests.createTagStorage(repo);
+            var branchStorage = createBranchStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
+            var jsonFolder = tempFolder.path().resolve("json");
+            Files.createDirectory(jsonFolder);
+            var storageFolder =tempFolder.path().resolve("storage");
+
+            var updater = new JsonNotifier(jsonFolder, "12", "team");
+            var notifyBot = NotifyBot.newBuilder()
+                                     .repository(repo)
+                                     .storagePath(storageFolder)
+                                     .branches(Pattern.compile("master"))
+                                     .tagStorageBuilder(tagStorage)
+                                     .branchStorageBuilder(branchStorage)
+                                     .prStateStorageBuilder(prStateStorage)
+                                     .updaters(List.of(updater))
+                                     .build();
+
+            TestBotRunner.runPeriodicItems(notifyBot);
+            assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
+
+            var editHash = CheckableRepository.appendAndCommit(localRepo, "Another line", "23456789: More fixes");
+            localRepo.fetch(repo.url(), "history:history");
+            localRepo.tag(editHash, "jdk-12+2", "Added tag 2", "Duke", "duke@openjdk.java.net");
+            var editHash2 = CheckableRepository.appendAndCommit(localRepo, "Another line", "34567890: Even more fixes");
+            localRepo.tag(editHash2, "jdk-12+4", "Added tag 3", "Duke", "duke@openjdk.java.net");
+            localRepo.pushAll(repo.url());
+
+            TestBotRunner.runPeriodicItems(notifyBot);
+            var jsonFiles = findJsonFiles(jsonFolder, "");
+            assertEquals(3, jsonFiles.size());
+
+            for (var file : jsonFiles) {
+                var jsonData = Files.readString(file, StandardCharsets.UTF_8);
+                var json = JSON.parse(jsonData);
+
+                if (json.asArray().get(0).contains("date")) {
+                    assertEquals(2, json.asArray().size());
+                    assertEquals(List.of("23456789"), json.asArray().get(0).get("issue").asArray().stream()
+                                                          .map(JSONValue::asString)
+                                                          .collect(Collectors.toList()));
+                    assertEquals(repo.webUrl(editHash).toString(), json.asArray().get(0).get("url").asString());
+                    assertEquals("team", json.asArray().get(0).get("build").asString());
+                    assertEquals(List.of("34567890"), json.asArray().get(1).get("issue").asArray().stream()
+                                                          .map(JSONValue::asString)
+                                                          .collect(Collectors.toList()));
+                    assertEquals(repo.webUrl(editHash2).toString(), json.asArray().get(1).get("url").asString());
+                    assertEquals("team", json.asArray().get(1).get("build").asString());
+                } else {
+                    assertEquals(1, json.asArray().size());
+                    if (json.asArray().get(0).get("build").asString().equals("b02")) {
+                        assertEquals(List.of("23456789"), json.asArray().get(0).get("issue").asArray().stream()
+                                                              .map(JSONValue::asString)
+                                                              .collect(Collectors.toList()));
+                    } else {
+                        assertEquals("b04", json.asArray().get(0).get("build").asString());
+                        assertEquals(List.of("34567890"), json.asArray().get(0).get("issue").asArray().stream()
+                                                              .map(JSONValue::asString)
+                                                              .collect(Collectors.toList()));
+                    }
+                }
+            }
+        }
+    }}
