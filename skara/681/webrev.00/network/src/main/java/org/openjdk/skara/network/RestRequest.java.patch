diff a/network/src/main/java/org/openjdk/skara/network/RestRequest.java b/network/src/main/java/org/openjdk/skara/network/RestRequest.java
--- a/network/src/main/java/org/openjdk/skara/network/RestRequest.java
+++ b/network/src/main/java/org/openjdk/skara/network/RestRequest.java
@@ -316,10 +316,43 @@
     private Map<String, String> parseLink(String link) {
         return linkPattern.matcher(link).results()
                           .collect(Collectors.toMap(m -> m.group(2), m -> m.group(1)));
     }
 
+    private JSONValue combinePages(List<JSONValue> pages) {
+        if (pages.get(0).isArray()) {
+            return new JSONArray(pages.stream()
+                                      .map(JSONValue::asArray)
+                                      .flatMap(JSONArray::stream)
+                                      .toArray(JSONValue[]::new));
+        } else {
+            // Find the largest array - that should be the paginated one
+            JSONValue paginated = null;
+            for (var field : pages.get(0).fields()) {
+                if (field.value().isArray()) {
+                    if ((paginated == null) || field.value().asArray().size() > paginated.asArray().size()) {
+                        paginated = field.value();
+                    }
+                }
+            }
+
+            var ret = JSON.object();
+            for (var field : pages.get(0).fields()) {
+                if (field.value() == paginated) {
+                    var combined = new JSONArray(pages.stream()
+                                                      .map(page -> page.get(field.name()).asArray())
+                                                      .flatMap(JSONArray::stream)
+                                                      .toArray(JSONValue[]::new));
+                    ret.put(field.name(), combined);
+                } else {
+                    ret.put(field.name(), field.value());
+                }
+            }
+            return ret;
+        }
+    }
+
     private JSONValue execute(QueryBuilder queryBuilder) throws IOException {
         var request = createRequest(queryBuilder.queryType, queryBuilder.endpoint, queryBuilder.composedBody(),
                                     queryBuilder.params, queryBuilder.headers);
         var response = sendRequest(request);
         var errorTransform = transformBadResponse(response, queryBuilder);
@@ -330,13 +363,13 @@
         var link = response.headers().firstValue("Link");
         if (link.isEmpty() || queryBuilder.maxPages < 2) {
             return parseResponse(response);
         }
 
-        // If a pagination header is present, it means that the returned data type must be an array
-        var ret = new LinkedList<JSONArray>();
-        var parsedResponse = parseResponse(response).asArray();
+        // If a pagination header is present, we have to collect all responses
+        var ret = new LinkedList<JSONValue>();
+        var parsedResponse = parseResponse(response);
         ret.add(parsedResponse);
 
         var links = parseLink(link.get());
         while (links.containsKey("next") && ret.size() < queryBuilder.maxPages) {
             var uri = URI.create(links.get("next"));
@@ -351,15 +384,14 @@
 
             link = response.headers().firstValue("Link");
             links = parseLink(link.orElseThrow(
                     () -> new RuntimeException("Initial paginated response no longer paginated")));
 
-            parsedResponse = parseResponse(response).asArray();
+            parsedResponse = parseResponse(response);
             ret.add(parsedResponse);
         }
-
-        return new JSONArray(ret.stream().flatMap(JSONArray::stream).toArray(JSONValue[]::new));
+        return combinePages(ret);
     }
 
     private String executeUnparsed(QueryBuilder queryBuilder) throws IOException {
         var request = createRequest(queryBuilder.queryType, queryBuilder.endpoint, queryBuilder.composedBody(),
                                     queryBuilder.params, queryBuilder.headers);
