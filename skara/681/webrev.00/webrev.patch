diff a/network/src/main/java/org/openjdk/skara/network/RestRequest.java b/network/src/main/java/org/openjdk/skara/network/RestRequest.java
--- a/network/src/main/java/org/openjdk/skara/network/RestRequest.java
+++ b/network/src/main/java/org/openjdk/skara/network/RestRequest.java
@@ -316,10 +316,43 @@
     private Map<String, String> parseLink(String link) {
         return linkPattern.matcher(link).results()
                           .collect(Collectors.toMap(m -> m.group(2), m -> m.group(1)));
     }
 
+    private JSONValue combinePages(List<JSONValue> pages) {
+        if (pages.get(0).isArray()) {
+            return new JSONArray(pages.stream()
+                                      .map(JSONValue::asArray)
+                                      .flatMap(JSONArray::stream)
+                                      .toArray(JSONValue[]::new));
+        } else {
+            // Find the largest array - that should be the paginated one
+            JSONValue paginated = null;
+            for (var field : pages.get(0).fields()) {
+                if (field.value().isArray()) {
+                    if ((paginated == null) || field.value().asArray().size() > paginated.asArray().size()) {
+                        paginated = field.value();
+                    }
+                }
+            }
+
+            var ret = JSON.object();
+            for (var field : pages.get(0).fields()) {
+                if (field.value() == paginated) {
+                    var combined = new JSONArray(pages.stream()
+                                                      .map(page -> page.get(field.name()).asArray())
+                                                      .flatMap(JSONArray::stream)
+                                                      .toArray(JSONValue[]::new));
+                    ret.put(field.name(), combined);
+                } else {
+                    ret.put(field.name(), field.value());
+                }
+            }
+            return ret;
+        }
+    }
+
     private JSONValue execute(QueryBuilder queryBuilder) throws IOException {
         var request = createRequest(queryBuilder.queryType, queryBuilder.endpoint, queryBuilder.composedBody(),
                                     queryBuilder.params, queryBuilder.headers);
         var response = sendRequest(request);
         var errorTransform = transformBadResponse(response, queryBuilder);
@@ -330,13 +363,13 @@
         var link = response.headers().firstValue("Link");
         if (link.isEmpty() || queryBuilder.maxPages < 2) {
             return parseResponse(response);
         }
 
-        // If a pagination header is present, it means that the returned data type must be an array
-        var ret = new LinkedList<JSONArray>();
-        var parsedResponse = parseResponse(response).asArray();
+        // If a pagination header is present, we have to collect all responses
+        var ret = new LinkedList<JSONValue>();
+        var parsedResponse = parseResponse(response);
         ret.add(parsedResponse);
 
         var links = parseLink(link.get());
         while (links.containsKey("next") && ret.size() < queryBuilder.maxPages) {
             var uri = URI.create(links.get("next"));
@@ -351,15 +384,14 @@
 
             link = response.headers().firstValue("Link");
             links = parseLink(link.orElseThrow(
                     () -> new RuntimeException("Initial paginated response no longer paginated")));
 
-            parsedResponse = parseResponse(response).asArray();
+            parsedResponse = parseResponse(response);
             ret.add(parsedResponse);
         }
-
-        return new JSONArray(ret.stream().flatMap(JSONArray::stream).toArray(JSONValue[]::new));
+        return combinePages(ret);
     }
 
     private String executeUnparsed(QueryBuilder queryBuilder) throws IOException {
         var request = createRequest(queryBuilder.queryType, queryBuilder.endpoint, queryBuilder.composedBody(),
                                     queryBuilder.params, queryBuilder.headers);
diff a/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java b/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java
--- a/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java
+++ b/network/src/test/java/org/openjdk/skara/network/RestRequestTests.java
@@ -36,12 +36,12 @@
 
 import static org.junit.jupiter.api.Assertions.*;
 
 class RestReceiver implements AutoCloseable {
     private final HttpServer server;
-    private final List<JSONObject> requests;
-    private final String response;
+    private final List<JSONObject> requests = new ArrayList<>();
+    private final List<String> responses;
     private int responseCode;
 
     private int truncatedResponseCount = 0;
     private boolean usedCache = false;
 
@@ -57,11 +57,29 @@
         }
 
         @Override
         public void handle(HttpExchange exchange) throws IOException {
             var input = new String(exchange.getRequestBody().readAllBytes(), StandardCharsets.UTF_8);
-            requests.add(JSON.parse(input).asObject());
+            if (input.isBlank()) {
+                requests.add(JSON.object());
+            } else {
+                requests.add(JSON.parse(input).asObject());
+            }
+
+            var pageQuery = exchange.getRequestURI().getQuery();
+            var requestedPage = pageQuery == null ? 1 : Integer.parseInt(pageQuery);
+            var response = responses.get(requestedPage - 1);
+
+            if (responses.size() > 1) {
+                var responseHeaders = exchange.getResponseHeaders();
+                if (requestedPage < responses.size()) {
+                    responseHeaders.add("Link", "<" + getEndpoint() + "?" + (requestedPage + 1) + ">; rel=\"next\"");
+                }
+                if (requestedPage > 1) {
+                    responseHeaders.add("Link", "<" + getEndpoint() + "?" + (requestedPage - 1) + ">; rel=\"prev\"");
+                }
+            }
 
             usedCache = false;
             if (truncatedResponseCount == 0) {
                 var responseHeaders = exchange.getResponseHeaders();
                 var etag = checksum(response);
@@ -85,24 +103,34 @@
             }
             outputStream.close();
         }
     }
 
+    private HttpServer createServer() throws IOException {
+        InetSocketAddress address = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);
+        var server = HttpServer.create(address, 0);
+        server.createContext("/test", new Handler());
+        server.setExecutor(null);
+        server.start();
+        return server;
+    }
+
     RestReceiver() throws IOException {
         this("{}", 200);
     }
 
     RestReceiver(String response, int responseCode) throws IOException
     {
-        this.response = response;
+        this.responses = List.of(response);
         this.responseCode = responseCode;
-        requests = new ArrayList<>();
-        InetSocketAddress address = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);
-        server = HttpServer.create(address, 0);
-        server.createContext("/test", new Handler());
-        server.setExecutor(null);
-        server.start();
+        this.server = createServer();
+    }
+
+    RestReceiver(List<String> responsePages) throws IOException {
+        this.responses = Collections.unmodifiableList(responsePages);
+        this.responseCode = 200;
+        this.server = createServer();
     }
 
     URI getEndpoint() {
         return URIBuilder.base("http://" + server.getAddress().getHostString() + ":" +  server.getAddress().getPort() + "/test").build();
     }
@@ -132,10 +160,37 @@
             var request = new RestRequest(receiver.getEndpoint());
             request.post("/test").execute();
         }
     }
 
+    @Test
+    void pagination() throws IOException {
+        var page1 = "[ { \"a\": 1 } ]";
+        var page2 = "[ { \"b\": 2 } ]";
+        try (var receiver = new RestReceiver(List.of(page1, page2))) {
+            var request = new RestRequest(receiver.getEndpoint());
+            var result = request.post("/test").execute();
+            assertEquals(2, result.asArray().size());
+            assertEquals(1, result.asArray().get(0).get("a").asInt());
+        }
+    }
+
+    @Test
+    void fieldPagination() throws IOException {
+        var page1 = "{ \"a\": 1, \"b\": [ 1, 2, 3 ] }";
+        var page2 = "{ \"a\": 1, \"b\": [ 4, 5, 6 ] }";
+        try (var receiver = new RestReceiver(List.of(page1, page2))) {
+            var request = new RestRequest(receiver.getEndpoint());
+            var result = request.post("/test").execute();
+            assertEquals(1, result.get("a").asInt());
+            assertEquals(6, result.get("b").asArray().size());
+            assertEquals(1, result.get("b").asArray().get(0).asInt());
+            assertEquals(4, result.get("b").asArray().get(3).asInt());
+            assertEquals(6, result.get("b").asArray().get(5).asInt());
+        }
+    }
+
     @Test
     void retryOnTransientErrors() throws IOException {
         try (var receiver = new RestReceiver()) {
             receiver.setTruncatedResponseCount(1);
 
