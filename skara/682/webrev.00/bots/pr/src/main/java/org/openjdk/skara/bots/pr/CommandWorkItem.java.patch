diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CommandWorkItem.java
@@ -22,10 +22,11 @@
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.bot.WorkItem;
 import org.openjdk.skara.forge.PullRequest;
+import org.openjdk.skara.host.HostUser;
 import org.openjdk.skara.issuetracker.Comment;
 
 import java.io.*;
 import java.nio.file.Path;
 import java.util.*;
@@ -35,11 +36,11 @@
 import java.util.stream.*;
 
 public class CommandWorkItem extends PullRequestWorkItem {
     private static final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
-    private static final Pattern commandPattern = Pattern.compile("^/(.*)");
+    private static final Pattern commandPattern = Pattern.compile("^\\s*/([A-Za-z]+)(?:\\s+(.*))?");
     private static final String commandReplyMarker = "<!-- Jmerge command reply message (%s) -->";
     private static final Pattern commandReplyPattern = Pattern.compile("<!-- Jmerge command reply message \\((\\S+)\\) -->");
     private static final String selfCommandMarker = "<!-- Valid self-command -->";
 
     private static final Map<String, CommandHandler> commandHandlers = Map.ofEntries(
@@ -59,18 +60,18 @@
 
     static class HelpCommand implements CommandHandler {
         static private Map<String, String> external = null;
 
         @Override
-        public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
+        public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {
             reply.println("Available commands:");
             Stream.concat(
                     commandHandlers.entrySet().stream()
                                    .map(entry -> entry.getKey() + " - " + entry.getValue().description()),
                     external.entrySet().stream()
                             .map(entry -> entry.getKey() + " - " + entry.getValue())
-            ).sorted().forEachOrdered(command -> reply.println(" * " + command));
+            ).sorted().forEachOrdered(c -> reply.println(" * " + c));
         }
 
         @Override
         public String description() {
             return "shows this text";
@@ -97,31 +98,106 @@
                        .filter(entry -> !handled.contains(entry.getKey().id()))
                        .map(entry -> new AbstractMap.SimpleEntry<>(entry.getValue().group(1), entry.getKey()))
                        .collect(Collectors.toList());
     }
 
-    private void processCommand(PullRequest pr, CensusInstance censusInstance, Path scratchPath, String command, Comment comment, List<Comment> allComments) {
+    private String formatId(String baseId, int subId) {
+        if (subId > 0) {
+            return String.format("%s:%d", baseId, subId);
+        } else {
+            return baseId;
+        }
+    }
+
+    private static class InvalidBodyCommandHandler implements CommandHandler {
+        @Override
+        public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {
+            reply.println("The command `" + command.name() + "` cannot be used in the pull request body. Please use it in a new comment.");
+        }
+
+        @Override
+        public String description() {
+            return "";
+        }
+    }
+
+    private List<CommandInvocation> extractCommands(String text, String baseId, HostUser user) {
+        var ret = new ArrayList<CommandInvocation>();
+        CommandHandler multiLineHandler = null;
+        List<String> multiLineBuffer = null;
+        String multiLineCommand = null;
+        int subId = 0;
+        for (var line : text.split("\\R")) {
+            var commandMatcher = commandPattern.matcher(line);
+            if (commandMatcher.matches()) {
+                if (multiLineHandler != null) {
+                    ret.add(new CommandInvocation(formatId(baseId, subId++), user, multiLineHandler, multiLineCommand, String.join("\n", multiLineBuffer)));
+                    multiLineHandler = null;
+                }
+                var command = commandMatcher.group(1).toLowerCase();
+                var handler = commandHandlers.get(command);
+                if (handler != null && baseId.equals("body") && !handler.allowedInBody()) {
+                    handler = new InvalidBodyCommandHandler();
+                }
+                if (handler != null && handler.multiLine()) {
+                    multiLineHandler = handler;
+                    multiLineBuffer = new ArrayList<>();
+                    if (commandMatcher.group(2) != null) {
+                        multiLineBuffer.add(commandMatcher.group(2));
+                    }
+                    multiLineCommand = command;
+                } else {
+                    ret.add(new CommandInvocation(formatId(baseId, subId++), user, handler, command, commandMatcher.group(2)));
+                }
+            } else {
+                if (multiLineHandler != null) {
+                    multiLineBuffer.add(line);
+                }
+            }
+        }
+        if (multiLineHandler != null) {
+            ret.add(new CommandInvocation(formatId(baseId, subId), user, multiLineHandler, multiLineCommand, String.join("\n", multiLineBuffer)));
+        }
+        return ret;
+    }
+
+    private Optional<CommandInvocation> nextCommand(PullRequest pr, List<Comment> comments) {
+        var self = pr.repository().forge().currentUser();
+        var allCommands = Stream.concat(extractCommands(pr.body(), "body", pr.author()).stream(),
+                                        comments.stream()
+                                                .filter(comment -> !comment.author().equals(self) || comment.body().endsWith(selfCommandMarker))
+                                                .flatMap(c -> extractCommands(c.body(), c.id(), c.author()).stream()))
+                                .collect(Collectors.toList());
+
+        var handled = comments.stream()
+                              .filter(comment -> comment.author().equals(self))
+                              .map(comment -> commandReplyPattern.matcher(comment.body()))
+                              .filter(Matcher::find)
+                              .map(matcher -> matcher.group(1))
+                              .collect(Collectors.toSet());
+
+        return allCommands.stream()
+                          .filter(ci -> !handled.contains(ci.id()))
+                          .findFirst();
+    }
+
+    private void processCommand(PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments) {
         var writer = new StringWriter();
         var printer = new PrintWriter(writer);
 
-        printer.println(String.format(commandReplyMarker, comment.id()));
+        printer.println(String.format(commandReplyMarker, command.id()));
         printer.print("@");
-        printer.print(comment.author().userName());
+        printer.print(command.user().userName());
         printer.print(" ");
 
-        command = command.strip();
-        var argSplit = command.indexOf(' ');
-        var commandWord = argSplit > 0 ? command.substring(0, argSplit) : command;
-        var commandArgs = argSplit > 0 ? command.substring(argSplit + 1) : "";
-
-        var handler = commandHandlers.get(commandWord);
-        if (handler != null) {
-            handler.handle(bot, pr, censusInstance, scratchPath, commandArgs, comment, allComments, printer);
+        var handler = command.handler();
+        if (handler.isPresent()) {
+            handler.get().handle(bot, pr, censusInstance, scratchPath, command, allComments, printer);
         } else {
-            if (!bot.externalCommands().containsKey(commandWord)) {
+            if (!bot.externalCommands().containsKey(command.name())) {
                 printer.print("Unknown command `");
-                printer.print(command);
+                printer.print(command.name());
                 printer.println("` - for a list of valid commands use `/help`.");
             } else {
                 // Do not reply to external commands
                 return;
             }
@@ -130,32 +206,30 @@
         pr.addComment(writer.toString());
     }
 
     @Override
     public Collection<WorkItem> run(Path scratchPath) {
-        log.info("Looking for merge commands");
+        log.info("Looking for PR commands");
 
         if (pr.labels().contains("integrated")) {
             log.info("Skip checking for commands in integrated PR");
             return List.of();
         }
 
         var comments = pr.comments();
-        var unprocessedCommands = findCommandComments(comments);
-        if (unprocessedCommands.isEmpty()) {
-            log.fine("No new merge commands found, stopping further processing");
+        var nextCommand = nextCommand(pr, comments);
+        if (nextCommand.isEmpty()) {
+            log.fine("No new PR commands found, stopping further processing");
             return List.of();
         }
 
         if (HelpCommand.external == null) {
             HelpCommand.external = bot.externalCommands();
         }
 
         var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve("census"), pr);
-        for (var entry : unprocessedCommands) {
-            processCommand(pr, census, scratchPath.resolve("pr").resolve("command"), entry.getKey(), entry.getValue(), comments);
-        }
+        processCommand(pr, census, scratchPath.resolve("pr").resolve("command"), nextCommand.get(), comments);
 
         // Run another check to reflect potential changes from commands
         return List.of(new CheckWorkItem(bot, pr, errorHandler));
     }
 
