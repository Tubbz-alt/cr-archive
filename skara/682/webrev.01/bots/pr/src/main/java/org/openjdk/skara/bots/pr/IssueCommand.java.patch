diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/IssueCommand.java
@@ -270,15 +270,16 @@
             reply.println("An error occurred when attempting to create an issue: " + e.getMessage());
         }
     }
 
     @Override
-    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
-        if (!comment.author().equals(pr.author())) {
+    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {
+        if (!command.user().equals(pr.author())) {
             reply.println("Only the author (@" + pr.author().userName() + ") is allowed to issue the `/" + name + "` command.");
             return;
         }
+        var args = command.args();
         if (args.isBlank()) {
             showHelp(reply);
             return;
         }
         var subCommandMatcher = subCommandPattern.matcher(args);
@@ -293,11 +294,11 @@
                                          .collect(Collectors.toSet());
         try {
             if (args.startsWith("remove") || args.startsWith("delete")) {
                 removeIssue(bot, args, currentSolved, reply);
             } else if (args.startsWith("create")) {
-                createIssue(bot, pr, args, censusInstance, comment.author(), reply);
+                createIssue(bot, pr, args, censusInstance, command.user(), reply);
             } else {
                 addIssue(bot, pr, args, currentSolved, reply);
             }
         } catch (InvalidIssue invalidIssue) {
             reply.println("The issue identifier `" + invalidIssue.identifier() + "` is invalid: " + invalidIssue.reason() + ".");
@@ -306,6 +307,11 @@
 
     @Override
     public String description() {
         return "edit the list of issues that this PR solves";
     }
+
+    @Override
+    public boolean allowedInBody() {
+        return true;
+    }
 }
