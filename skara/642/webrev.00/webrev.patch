diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java
@@ -157,6 +157,11 @@
     }
 
     @Override
     public void addCommitComment(Hash commit, String body) {
     }
+
+    @Override
+    public Optional<CommitMetadata> commitMetadata(Hash commit) {
+        return Optional.empty();
+    }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java b/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java
@@ -67,10 +67,11 @@
     long id();
     Hash branchHash(String ref);
     List<HostedBranch> branches();
     List<CommitComment> commitComments(Hash hash);
     void addCommitComment(Hash hash, String body);
+    Optional<CommitMetadata> commitMetadata(Hash hash);
 
     default PullRequest createPullRequest(HostedRepository target,
                                           String targetRef,
                                           String sourceRef,
                                           String title,
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
@@ -287,6 +287,26 @@
         var query = JSON.object().put("body", body);
         request.post("commits/" + hash.hex() + "/comments")
                .body(query)
                .execute();
     }
+
+    @Override
+    public Optional<CommitMetadata> commitMetadata(Hash hash) {
+        var c = request.get("commits/" + hash.hex())
+                       .onError(r -> Optional.of(JSON.of()))
+                       .execute();
+        if (c.isNull()) {
+            return Optional.empty();
+        }
+        var parents = c.get("parents").stream()
+                                      .map(p -> new Hash(p.get("sha").asString()))
+                                      .collect(Collectors.toList());
+        var author = new Author(c.get("author").get("name").asString(),
+                                c.get("author").get("email").asString());
+        var committer = new Author(c.get("committer").get("name").asString(),
+                                   c.get("committer").get("email").asString());
+        var date = ZonedDateTime.parse(c.get("author").get("date").asString());
+        var message = Arrays.asList(c.get("message").asString().split("\n"));
+        return Optional.of(new CommitMetadata(hash, parents, author, committer, date, message));
+    }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
@@ -320,6 +320,27 @@
         var query = JSON.object().put("note", body);
         request.post("commits/" + hash.hex() + "/comments")
                .body(query)
                .execute();
     }
+
+    @Override
+    public Optional<CommitMetadata> commitMetadata(Hash hash) {
+        var c = request.get("commits/" + hash.hex())
+                       .onError(r -> Optional.of(JSON.of()))
+                       .execute();
+        if (c.isNull()) {
+            return Optional.empty();
+        }
+        var parents = c.get("parent_ids").stream()
+                                      .map(JSONValue::asString)
+                                      .map(Hash::new)
+                                      .collect(Collectors.toList());
+        var author = new Author(c.get("author_name").asString(),
+                                c.get("author_email").asString());
+        var committer = new Author(c.get("committer_name").asString(),
+                                   c.get("committer_email").asString());
+        var date = ZonedDateTime.parse(c.get("authored_date").asString());
+        var message = Arrays.asList(c.get("message").asString().split("\n"));
+        return Optional.of(new CommitMetadata(hash, parents, author, committer, date, message));
+    }
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
@@ -219,9 +219,18 @@
 
         var comments = commitComments.putIfAbsent(hash, new ArrayList<CommitComment>());
         comments.add(new CommitComment(hash, null, -1, Integer.toString(id), body, host.currentUser(), createdAt, createdAt));
     }
 
+    @Override
+    public Optional<CommitMetadata> commitMetadata(Hash hash) {
+        try {
+            return localRepository.commitMetadata(hash);
+        } catch (IOException e) {
+            throw new UncheckedIOException(e);
+        }
+    }
+
     Repository localRepository() {
         return localRepository;
     }
 }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/ReadOnlyRepository.java
@@ -47,10 +47,20 @@
     Commits commits(String range, int n, boolean reverse) throws IOException;
     Optional<Commit> lookup(Hash h) throws IOException;
     Optional<Commit> lookup(Branch b) throws IOException;
     Optional<Commit> lookup(Tag t) throws IOException;
     List<CommitMetadata> commitMetadata() throws IOException;
+    default Optional<CommitMetadata> commitMetadata(Hash hash) throws IOException {
+        var l = commitMetadata(range(hash));
+        if (l.size() > 1) {
+            throw new IllegalStateException("More than one commit for hash: " + hash.hex());
+        }
+        if (l.size() == 0) {
+            return Optional.empty();
+        }
+        return Optional.of(l.get(0));
+    }
     List<CommitMetadata> commitMetadata(boolean reverse) throws IOException;
     List<CommitMetadata> commitMetadata(String range) throws IOException;
     List<CommitMetadata> commitMetadata(Hash from, Hash to) throws IOException;
     List<CommitMetadata> commitMetadata(String range, boolean reverse) throws IOException;
     List<CommitMetadata> commitMetadata(Hash from, Hash to, boolean reverse) throws IOException;
