diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/WebrevStorage.java
@@ -76,14 +76,21 @@
             var files = localRepository.files(head, List.of(Path.of(".jcheck", "conf")));
             if (!files.isEmpty()) {
                 var conf = JCheckConfiguration.from(localRepository, head);
                 var project = conf.general().jbs() != null ? conf.general().jbs() : conf.general().project();
                 var id = issue.get().id();
-                var issueTracker = IssueTracker.from("jira", URI.create("https://bugs.openjdk.java.net"));
-                var hostedIssue = issueTracker.project(project).issue(id);
-                if (hostedIssue.isPresent()) {
-                    builder = builder.issue(hostedIssue.get().webUrl().toString());
+                IssueTracker issueTracker = null;
+                try {
+                    issueTracker = IssueTracker.from("jira", URI.create("https://bugs.openjdk.java.net"));
+                } catch (RuntimeException e) {
+                    log.warning("Failed to create Jira issue tracker");
+                }
+                if (issueTracker != null) {
+                    var hostedIssue = issueTracker.project(project).issue(id);
+                    if (hostedIssue.isPresent()) {
+                        builder = builder.issue(hostedIssue.get().webUrl().toString());
+                    }
                 }
             }
         }
 
         if (diff != null) {
