diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/ContributorCommand.java
@@ -20,64 +20,102 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
+import org.openjdk.skara.census.Contributor;
 import org.openjdk.skara.email.EmailAddress;
 import org.openjdk.skara.forge.PullRequest;
 import org.openjdk.skara.issuetracker.Comment;
-import org.openjdk.skara.vcs.openjdk.CommitMessageSyntax;
 
 import java.io.PrintWriter;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.regex.Pattern;
 
 public class ContributorCommand implements CommandHandler {
-    private static final Pattern commandPattern = Pattern.compile("^(add|remove)\\s+(.*?\\s+<\\S+>)$");
-    private static final Pattern fullNamePattern = Pattern.compile(CommitMessageSyntax.REAL_NAME_REGEX);
-    private static final Pattern emailPattern = Pattern.compile(CommitMessageSyntax.EMAIL_ADDR_REGEX);
+    private static final Pattern commandPattern = Pattern.compile("^(add|remove)\\s+(.+)$");
+
+    private void showHelp(PullRequest pr, PrintWriter reply) {
+        reply.println("Syntax: `/contributor (add|remove) [@user | openjdk-user | Full Name <email@address>]`. For example:");
+        reply.println();
+        reply.println(" * `/contributor add @" + pr.repository().forge().name() + "-User`");
+        reply.println(" * `/contributor add duke`");
+        reply.println(" * `/contributor add J. Duke <duke@openjdk.org>`");
+    }
+
+    private Optional<EmailAddress> parseUser(String user, PullRequest pr, CensusInstance censusInstance) {
+        user = user.strip();
+        if (user.isEmpty()) {
+            return Optional.empty();
+        }
+        Contributor contributor;
+        if (user.charAt(0) == '@') {
+            var platformUser = pr.repository().forge().user(user.substring(1));
+            if (platformUser.isEmpty()) {
+                return Optional.empty();
+            }
+            contributor = censusInstance.namespace().get(platformUser.get().id());
+            if (contributor == null) {
+                return Optional.empty();
+            }
+        } else if (!user.contains("@")) {
+            contributor = censusInstance.census().contributor(user);
+            if (contributor == null) {
+                return Optional.empty();
+            }
+        } else {
+            try {
+                return Optional.of(EmailAddress.parse(user));
+            } catch (RuntimeException e) {
+                return Optional.empty();
+            }
+        }
+
+        if (contributor.fullName().isPresent()) {
+            return Optional.of(EmailAddress.from(contributor.fullName().get(), contributor.username() + "@openjdk.org"));
+        } else {
+            return Optional.of(EmailAddress.from(contributor.username() + "@openjdk.org"));
+        }
+    }
 
     @Override
     public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, String args, Comment comment, List<Comment> allComments, PrintWriter reply) {
         if (!comment.author().equals(pr.author())) {
             reply.println("Only the author (@" + pr.author().userName() + ") is allowed to issue the `contributor` command.");
             return;
         }
 
         var matcher = commandPattern.matcher(args);
         if (!matcher.matches()) {
-            reply.println("Syntax: `/contributor (add|remove) Full Name <email@address>`");
+            showHelp(pr, reply);
+            return;
+        }
+
+        var contributor = parseUser(matcher.group(2), pr, censusInstance);
+        if (contributor.isEmpty()) {
+            reply.println("Could not parse `" + matcher.group(2) + "` as a valid contributor.");
+            showHelp(pr, reply);;
             return;
         }
 
-        var contributor = EmailAddress.parse(matcher.group(2));
         switch (matcher.group(1)) {
             case "add": {
-                var fullName = contributor.fullName().orElseThrow(IllegalStateException::new);
-                if (!fullNamePattern.matcher(fullName).matches()) {
-                    reply.println("The full name is *not* of the format `" + CommitMessageSyntax.REAL_NAME_REGEX + "`");
-                    break;
-                }
-                if (!emailPattern.matcher(contributor.address()).matches()) {
-                    reply.println("The email is *not* of the format `" + CommitMessageSyntax.EMAIL_ADDR_REGEX + "`");
-                    break;
-                }
-                reply.println(Contributors.addContributorMarker(contributor));
-                reply.println("Contributor `" + contributor.toString() + "` successfully added.");
+                reply.println(Contributors.addContributorMarker(contributor.get()));
+                reply.println("Contributor `" + contributor.get().toString() + "` successfully added.");
                 break;
             }
             case "remove": {
                 var existing = new HashSet<>(Contributors.contributors(pr.repository().forge().currentUser(), allComments));
-                if (existing.contains(contributor)) {
-                    reply.println(Contributors.removeContributorMarker(contributor));
-                    reply.println("Contributor `" + contributor.toString() + "` successfully removed.");
+                if (existing.contains(contributor.get())) {
+                    reply.println(Contributors.removeContributorMarker(contributor.get()));
+                    reply.println("Contributor `" + contributor.get().toString() + "` successfully removed.");
                 } else {
                     if (existing.isEmpty()) {
                         reply.println("There are no additional contributors associated with this pull request.");
                     } else {
-                        reply.println("Contributor `" + contributor.toString() + "` was not found.");
+                        reply.println("Contributor `" + contributor.get().toString() + "` was not found.");
                         reply.println("Current additional contributors are:");
                         for (var e : existing) {
                             reply.println("- `" + e.toString() + "`");
                         }
                     }
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/ContributorTests.java
@@ -183,11 +183,11 @@
             assertEquals(1, error);
         }
     }
 
     @Test
-    void invalidFullName(TestInfo testInfo) throws IOException {
+    void invalidContributor(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
 
@@ -207,20 +207,33 @@
             var editHash = CheckableRepository.appendAndCommit(localRepo);
             localRepo.push(editHash, author.url(), "edit", true);
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
             // Use an invalid full name
-            pr.addComment("/contributor add Foo! Bar <foo.bar@host.com>");
+            pr.addComment("/contributor add Moo <Foo.Bar (at) host.com>");
             TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(pr, "Could not parse `Moo <Foo.Bar (at) host.com>` as a valid contributor");
 
-            // The bot should reply with an error message
-            assertLastCommentContains(pr, "The full name is *not* of the format");
+            // Empty platform id
+            pr.addComment("/contributor add @");
+            TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(pr, "Could not parse `@` as a valid contributor");
+
+            // Unknown platform id
+            pr.addComment("/contributor add @someone");
+            TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(pr, "Could not parse `@someone` as a valid contributor");
+
+            // Unknown openjdk user
+            pr.addComment("/contributor add someone");
+            TestBotRunner.runPeriodicItems(prBot);
+            assertLastCommentContains(pr, "Could not parse `someone` as a valid contributor");
         }
     }
 
     @Test
-    void invalidEmail(TestInfo testInfo) throws IOException {
+    void platformUser(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
              var tempFolder = new TemporaryDirectory()) {
             var author = credentials.getHostedRepository();
             var integrator = credentials.getHostedRepository();
 
@@ -239,16 +252,49 @@
             // Make a change with a corresponding PR
             var editHash = CheckableRepository.appendAndCommit(localRepo);
             localRepo.push(editHash, author.url(), "edit", true);
             var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
 
-            // Use an invalid full name
-            pr.addComment("/contributor add Foo Bar <Foo.Bar@host.com>");
+            // Use a platform name
+            pr.addComment("/contributor add @" + author.forge().currentUser().userName());
             TestBotRunner.runPeriodicItems(prBot);
 
-            // The bot should reply with an error message
-            assertLastCommentContains(pr, "The email is *not* of the format");
+            // The bot should reply
+            assertLastCommentContains(pr, "Contributor `Generated Committer 2 <integrationcommitter2@openjdk.org>` successfully added");
+        }
+    }
+
+    @Test
+    void openJdkUser(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addReviewer(integrator.forge().currentUser().id())
+                                           .addCommitter(author.forge().currentUser().id());
+            var prBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();
+
+            // Populate the projects repository
+            var localRepoFolder = tempFolder.path().resolve("localrepo");
+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.url(), "master", true);
+
+            // Make a change with a corresponding PR
+            var editHash = CheckableRepository.appendAndCommit(localRepo);
+            localRepo.push(editHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "This is a pull request");
+
+            // Use a platform name
+            pr.addComment("/contributor add integrationreviewer1");
+            TestBotRunner.runPeriodicItems(prBot);
+
+            // The bot should reply
+            assertLastCommentContains(pr, "Contributor `Generated Reviewer 1 <integrationreviewer1@openjdk.org>` successfully added");
         }
     }
 
     @Test
     void removeContributor(TestInfo testInfo) throws IOException {
diff a/test/src/main/java/org/openjdk/skara/test/TestHost.java b/test/src/main/java/org/openjdk/skara/test/TestHost.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHost.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHost.java
@@ -119,16 +119,13 @@
         }
     }
 
     @Override
     public Optional<HostUser> user(String username) {
-        return data.users
-                   .stream()
-                   .filter(user -> user.userName().equals(username))
-                   .map(user -> Optional.of(user))
-                   .findAny()
-                   .orElseThrow();
+        return data.users.stream()
+                         .filter(user -> user.userName().equals(username))
+                         .findAny();
     }
 
     @Override
     public HostUser currentUser() {
         return data.users.get(currentUser);
