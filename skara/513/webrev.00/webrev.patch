diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -47,10 +47,11 @@
     private final boolean ignoreStaleReviews;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
     private final String progressMarker = "<!-- Anything below this marker will be automatically updated, please do not edit manually! -->";
     private final String mergeReadyMarker = "<!-- PullRequestBot merge is ready comment -->";
+    private final String outdatedHelpMarker = "<!-- PullRequestBot outdated help comment -->";
     private final Pattern mergeSourceFullPattern = Pattern.compile("^Merge ([-/\\w]+):([-\\w]+)$");
     private final Pattern mergeSourceBranchOnlyPattern = Pattern.compile("^Merge ([-\\w]+)$");
     private final Set<String> newLabels;
 
     private CheckRun(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
@@ -531,10 +532,31 @@
         } else {
             existing.ifPresent(comment -> pr.updateComment(comment.id(), getMergeNoLongerReadyComment()));
         }
     }
 
+    private void addOutdatedComment(List<Comment> comments) {
+        var existing = findComment(comments, outdatedHelpMarker);
+        if (existing.isPresent()) {
+            // Only add the comment once per PR
+            return;
+        }
+        var message = "@" + pr.author().userName() + " this pull request can no longer be integrated into " +
+                "`" + pr.targetRef() + "` due to one or more merge conflicts. To resolve these merge conflicts " +
+                "and update this pull request you can run the following commands:\n" +
+                "```bash\n" +
+                "git checkout " + pr.sourceRef() + "\n" +
+                "git fetch " + pr.repository().webUrl() + " " + pr.targetRef() + "\n" +
+                "git merge FETCH_HEAD\n" +
+                "# resolve conflicts and follow the instructions given by git merge\n" +
+                "git commit -m \"Merge " + pr.targetRef() + "\"\n" +
+                "git push\n" +
+                "```\n" +
+                outdatedHelpMarker;
+        pr.addComment(message);
+    }
+
     private void checkStatus() {
         var checkBuilder = CheckBuilder.create("jcheck", pr.headHash());
         var censusDomain = censusInstance.configuration().census().domain();
         Exception checkException = null;
 
@@ -584,10 +606,11 @@
                 newLabels.add("ready");
             } else {
                 newLabels.remove("ready");
             }
             if (!rebasePossible) {
+                addOutdatedComment(comments);
                 newLabels.add("outdated");
             } else {
                 newLabels.remove("outdated");
             }
 
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/CheckTests.java
@@ -581,10 +581,16 @@
             assertEquals(1, updated);
 
             // The PR should be flagged as outdated
             assertTrue(pr.labels().contains("outdated"));
 
+            // An instructional message should have been bosted
+            var help = pr.comments().stream()
+                         .filter(comment -> comment.body().contains("To resolve these merge conflicts"))
+                         .count();
+            assertEquals(1, help);
+
             // But it should still pass jcheck
             var checks = pr.checks(editHash);
             assertEquals(1, checks.size());
             var check = checks.get("jcheck");
             assertEquals(CheckStatus.SUCCESS, check.status());
