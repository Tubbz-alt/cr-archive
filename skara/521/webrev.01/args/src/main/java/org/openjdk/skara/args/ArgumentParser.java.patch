diff a/args/src/main/java/org/openjdk/skara/args/ArgumentParser.java b/args/src/main/java/org/openjdk/skara/args/ArgumentParser.java
--- a/args/src/main/java/org/openjdk/skara/args/ArgumentParser.java
+++ b/args/src/main/java/org/openjdk/skara/args/ArgumentParser.java
@@ -29,25 +29,31 @@
 public class ArgumentParser {
     private final String programName;
     private final List<Flag> flags;
     private final List<Input> inputs;
     private final Map<String, Flag> names = new HashMap<String, Flag>();
+    private final boolean shouldShowHelp;
 
     public ArgumentParser(String programName, List<Flag> flags) {
         this(programName, flags, List.of());
     }
 
     public ArgumentParser(String programName, List<Flag> flags, List<Input> inputs) {
         this.programName = programName;
         this.flags = new ArrayList<Flag>(flags);
         this.inputs = inputs;
 
-        var help = Switch.shortcut("h")
-                         .fullname("help")
-                         .helptext("Show this help text")
-                         .optional();
-        this.flags.add(help);
+        if (!flags.stream().anyMatch(f -> f.shortcut().equals("h") && f.fullname().equals("help"))) {
+            var help = Switch.shortcut("h")
+                             .fullname("help")
+                             .helptext("Show this help text")
+                             .optional();
+            this.flags.add(help);
+            shouldShowHelp = true;
+        } else {
+            shouldShowHelp = false;
+        }
 
         for (var flag : this.flags) {
             if (!flag.fullname().equals("")) {
                 names.put(flag.fullname(), flag);
             }
@@ -75,30 +81,53 @@
 
     private Flag lookupShortcut(String name) {
         return lookupFlag(name, true);
     }
 
-    private int longest(Function<Flag, String> getName) {
+    private static int longest(List<Flag> flags, Function<Flag, String> getName) {
         return flags.stream()
                     .map(getName)
                     .filter(Objects::nonNull)
                     .mapToInt(String::length)
                     .reduce(0, Integer::max);
     }
 
-    private int longestShortcut() {
-        return longest(Flag::shortcut);
+    private static int longestShortcut(List<Flag> flags) {
+        return longest(flags, Flag::shortcut);
     }
 
-    private int longestFullname() {
-        return longest(f -> f.fullname() + " " + f.description());
+    private static int longestFullname(List<Flag> flags) {
+        return longest(flags, f -> f.fullname() + " " + f.description());
     }
 
     public void showUsage() {
         showUsage(System.out);
     }
 
+    public static void showFlags(PrintStream ps, List<Flag> flags, String prefix) {
+        var shortcutPad = longestShortcut(flags) + 1 + 2; // +1 for '-' and +2 for ', '
+        var fullnamePad = longestFullname(flags) + 2 + 2; // +2 for '--' and +2 for '  '
+
+        for (var flag : flags) {
+            ps.print(prefix);
+            var fmt = "%-" + shortcutPad + "s";
+            var s = flag.shortcut().equals("") ? " " : "-" + flag.shortcut() + ", ";
+            ps.print(String.format(fmt, s));
+
+            fmt = "%-" + fullnamePad + "s";
+            var desc = flag.description().equals("") ? "" : " " + flag.description();
+            s = flag.fullname().equals("") ? " " : "--" + flag.fullname() + desc + "  ";
+            ps.print(String.format(fmt, s));
+
+            if (!flag.helptext().equals("")) {
+                ps.print(flag.helptext());
+            }
+
+            ps.println("");
+        }
+    }
+
     public void showUsage(PrintStream ps) {
         ps.print("usage: ");
         ps.print(programName);
         ps.print(" [options]");
         for (var flag : flags) {
@@ -124,30 +153,11 @@
             ps.print(" ");
             ps.print(input.toString());
         }
         ps.println("");
 
-        var shortcutPad = longestShortcut() + 1 + 2; // +1 for '-' and +2 for ', '
-        var fullnamePad = longestFullname() + 2 + 2; // +2 for '--' and +2 for '  '
-
-        for (var flag : flags) {
-            ps.print("\t");
-            var fmt = "%-" + shortcutPad + "s";
-            var s = flag.shortcut().equals("") ? " " : "-" + flag.shortcut() + ", ";
-            ps.print(String.format(fmt, s));
-
-            fmt = "%-" + fullnamePad + "s";
-            var desc = flag.description().equals("") ? "" : " " + flag.description();
-            s = flag.fullname().equals("") ? " " : "--" + flag.fullname() + desc + "  ";
-            ps.print(String.format(fmt, s));
-
-            if (!flag.helptext().equals("")) {
-                ps.print(flag.helptext());
-            }
-
-            ps.println("");
-        }
+        showFlags(ps, flags, "\t");
     }
 
     public Arguments parse(String[] args) {
         var seen = new HashSet<Flag>();
         var values = new ArrayList<FlagValue>();
@@ -218,11 +228,11 @@
             }
             i++;
         }
 
         var arguments = new Arguments(values, positional);
-        if (arguments.contains("help")) {
+        if (arguments.contains("help") && shouldShowHelp) {
             showUsage();
             System.exit(0);
         }
 
         var errors = new ArrayList<String>();
