diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBot.java
@@ -36,27 +36,27 @@
     private final HostedRepository repository;
     private final Path storagePath;
     private final Pattern branches;
     private final StorageBuilder<UpdatedTag> tagStorageBuilder;
     private final StorageBuilder<UpdatedBranch> branchStorageBuilder;
-    private final StorageBuilder<PullRequestIssues> prIssuesStorageBuilder;
+    private final StorageBuilder<PullRequestState> prStateStorageBuilder;
     private final List<RepositoryUpdateConsumer> updaters;
     private final List<PullRequestUpdateConsumer> prUpdaters;
     private final PullRequestUpdateCache updateCache;
     private final Set<String> readyLabels;
     private final Map<String, Pattern> readyComments;
 
     NotifyBot(HostedRepository repository, Path storagePath, Pattern branches, StorageBuilder<UpdatedTag> tagStorageBuilder,
-              StorageBuilder<UpdatedBranch> branchStorageBuilder, StorageBuilder<PullRequestIssues> prIssuesStorageBuilder,
+              StorageBuilder<UpdatedBranch> branchStorageBuilder, StorageBuilder<PullRequestState> prStateStorageBuilder,
               List<RepositoryUpdateConsumer> updaters, List<PullRequestUpdateConsumer> prUpdaters,
               Set<String> readyLabels, Map<String, Pattern> readyComments) {
         this.repository = repository;
         this.storagePath = storagePath;
         this.branches = branches;
         this.tagStorageBuilder = tagStorageBuilder;
         this.branchStorageBuilder = branchStorageBuilder;
-        this.prIssuesStorageBuilder = prIssuesStorageBuilder;
+        this.prStateStorageBuilder = prStateStorageBuilder;
         this.updaters = updaters;
         this.prUpdaters = prUpdaters;
         this.updateCache = new PullRequestUpdateCache();
         this.readyLabels = readyLabels;
         this.readyComments = readyComments;
@@ -110,11 +110,11 @@
         for (var pr : prs) {
             if (updateCache.needsUpdate(pr)) {
                 if (!isReady(pr)) {
                     continue;
                 }
-                ret.add(new PullRequestWorkItem(pr, prIssuesStorageBuilder, prUpdaters, e -> updateCache.invalidate(pr)));
+                ret.add(new PullRequestWorkItem(pr, prStateStorageBuilder, prUpdaters, e -> updateCache.invalidate(pr)));
             }
         }
 
         // Repository events
         ret.add(new RepositoryWorkItem(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, updaters));
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotBuilder.java
@@ -33,11 +33,11 @@
     private HostedRepository repository;
     private Path storagePath;
     private Pattern branches;
     private StorageBuilder<UpdatedTag> tagStorageBuilder;
     private StorageBuilder<UpdatedBranch> branchStorageBuilder;
-    private StorageBuilder<PullRequestIssues> prIssuesStorageBuilder;
+    private StorageBuilder<PullRequestState> prStateStorageBuilder;
     private List<RepositoryUpdateConsumer> updaters = List.of();
     private List<PullRequestUpdateConsumer> prUpdaters = List.of();
     private Set<String> readyLabels = Set.of();
     private Map<String, Pattern> readyComments = Map.of();
 
@@ -64,12 +64,12 @@
     public NotifyBotBuilder branchStorageBuilder(StorageBuilder<UpdatedBranch> branchStorageBuilder) {
         this.branchStorageBuilder = branchStorageBuilder;
         return this;
     }
 
-    public NotifyBotBuilder prIssuesStorageBuilder(StorageBuilder<PullRequestIssues> prIssuesStorageBuilder) {
-        this.prIssuesStorageBuilder = prIssuesStorageBuilder;
+    public NotifyBotBuilder prStateStorageBuilder(StorageBuilder<PullRequestState> prStateStorageBuilder) {
+        this.prStateStorageBuilder = prStateStorageBuilder;
         return this;
     }
 
     public NotifyBotBuilder updaters(List<RepositoryUpdateConsumer> updaters) {
         this.updaters = updaters;
@@ -90,8 +90,8 @@
         this.readyComments = readyComments;
         return this;
     }
 
     public NotifyBot build() {
-        return new NotifyBot(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, prIssuesStorageBuilder, updaters, prUpdaters, readyLabels, readyComments);
+        return new NotifyBot(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, prStateStorageBuilder, updaters, prUpdaters, readyLabels, readyComments);
     }
-}
+}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/NotifyBotFactory.java
@@ -120,19 +120,19 @@
 
             var tagStorageBuilder = new StorageBuilder<UpdatedTag>(baseName + ".tags.txt")
                     .remoteRepository(databaseRepo, databaseRef, databaseName, databaseEmail, "Added tag for " + repoName);
             var branchStorageBuilder = new StorageBuilder<UpdatedBranch>(baseName + ".branches.txt")
                     .remoteRepository(databaseRepo, databaseRef, databaseName, databaseEmail, "Added branch hash for " + repoName);
-            var issueStorageBuilder = new StorageBuilder<PullRequestIssues>(baseName + ".prissues.txt")
+            var prStateStorageBuilder = new StorageBuilder<PullRequestState>(baseName + ".prissues.txt")
                     .remoteRepository(databaseRepo, databaseRef, databaseName, databaseEmail, "Added pull request issue info for " + repoName);
             var bot = NotifyBot.newBuilder()
                                .repository(configuration.repository(repoName))
                                .storagePath(configuration.storageFolder())
                                .branches(branchPattern)
                                .tagStorageBuilder(tagStorageBuilder)
                                .branchStorageBuilder(branchStorageBuilder)
-                               .prIssuesStorageBuilder(issueStorageBuilder)
+                               .prStateStorageBuilder(prStateStorageBuilder)
                                .updaters(updaters)
                                .prUpdaters(prUpdaters)
                                .readyLabels(readyLabels)
                                .readyComments(readyComments)
                                .build();
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestIssues.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestIssues.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestIssues.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-package org.openjdk.skara.bots.notify;
-
-import org.openjdk.skara.forge.PullRequest;
-
-import java.util.*;
-
-public class PullRequestIssues {
-    private final String prId;
-    private final Set<String> issueIds;
-
-    PullRequestIssues(PullRequest pr, Set<String> issueIds) {
-        this.prId = pr.repository().id() + ":" + pr.id();
-        this.issueIds = issueIds;
-    }
-
-    PullRequestIssues(String prId, Set<String> issueIds) {
-        this.prId = prId;
-        this.issueIds = issueIds;
-    }
-
-    public String prId() {
-        return prId;
-    }
-
-    public Set<String> issueIds() {
-        return issueIds;
-    }
-
-    @Override
-    public String toString() {
-        return "PullRequestIssues{" +
-                "prId='" + prId + '\'' +
-                ", issueIds=" + issueIds +
-                '}';
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) {
-            return true;
-        }
-        if (o == null || getClass() != o.getClass()) {
-            return false;
-        }
-        PullRequestIssues that = (PullRequestIssues) o;
-        return prId.equals(that.prId) &&
-                issueIds.equals(that.issueIds);
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(prId, issueIds);
-    }
-}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestState.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestState.java
--- /dev/null
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestState.java
@@ -0,0 +1,76 @@
+/*
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.bots.notify;
+
+import org.openjdk.skara.forge.PullRequest;
+
+import java.util.*;
+
+class PullRequestState {
+    private final String prId;
+    private final Set<String> issueIds;
+
+    PullRequestState(PullRequest pr, Set<String> issueIds) {
+        this.prId = pr.repository().id() + ":" + pr.id();
+        this.issueIds = issueIds;
+    }
+
+    PullRequestState(String prId, Set<String> issueIds) {
+        this.prId = prId;
+        this.issueIds = issueIds;
+    }
+
+    public String prId() {
+        return prId;
+    }
+
+    public Set<String> issueIds() {
+        return issueIds;
+    }
+
+    @Override
+    public String toString() {
+        return "PullRequestState{" +
+                "prId='" + prId + '\'' +
+                ", issueIds=" + issueIds +
+                '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        var that = (PullRequestState) o;
+        return prId.equals(that.prId) &&
+                issueIds.equals(that.issueIds);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(prId, issueIds);
+    }
+}
diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/PullRequestWorkItem.java
@@ -34,45 +34,45 @@
 import java.util.regex.Pattern;
 import java.util.stream.*;
 
 public class PullRequestWorkItem implements WorkItem {
     private final PullRequest pr;
-    private final StorageBuilder<PullRequestIssues> prIssuesStorageBuilder;
+    private final StorageBuilder<PullRequestState> prStateStorageBuilder;
     private final List<PullRequestUpdateConsumer> pullRequestUpdateConsumers;
     private final Consumer<RuntimeException> errorHandler;
 
-    PullRequestWorkItem(PullRequest pr, StorageBuilder<PullRequestIssues> prIssuesStorageBuilder, List<PullRequestUpdateConsumer> pullRequestUpdateConsumers, Consumer<RuntimeException> errorHandler) {
+    PullRequestWorkItem(PullRequest pr, StorageBuilder<PullRequestState> prStateStorageBuilder, List<PullRequestUpdateConsumer> pullRequestUpdateConsumers, Consumer<RuntimeException> errorHandler) {
         this.pr = pr;
-        this.prIssuesStorageBuilder = prIssuesStorageBuilder;
+        this.prStateStorageBuilder = prStateStorageBuilder;
         this.pullRequestUpdateConsumers = pullRequestUpdateConsumers;
         this.errorHandler = errorHandler;
     }
 
-    private Set<PullRequestIssues> loadPrIssues(String current) {
+    private Set<PullRequestState> deserializePrState(String current) {
         if (current.isBlank()) {
             return Set.of();
         }
         var data = JSON.parse(current);
         return data.stream()
                    .map(JSONValue::asObject)
-                   .map(obj -> new PullRequestIssues(obj.get("pr").asString(), obj.get("issues").stream()
-                                                                                  .map(JSONValue::asString)
-                                                                                  .collect(Collectors.toSet())))
+                   .map(obj -> new PullRequestState(obj.get("pr").asString(), obj.get("issues").stream()
+                                                                                 .map(JSONValue::asString)
+                                                                                 .collect(Collectors.toSet())))
                    .collect(Collectors.toSet());
     }
 
-    private String serializePrIssues(Collection<PullRequestIssues> added, Set<PullRequestIssues> existing) {
+    private String serializePrState(Collection<PullRequestState> added, Set<PullRequestState> existing) {
         var addedPrs = added.stream()
-                            .map(PullRequestIssues::prId)
+                            .map(PullRequestState::prId)
                             .collect(Collectors.toSet());
         var nonReplaced = existing.stream()
                                   .filter(item -> !addedPrs.contains(item.prId()))
                                   .collect(Collectors.toSet());
 
         var entries = Stream.concat(nonReplaced.stream(),
                                     added.stream())
-                            .sorted(Comparator.comparing(PullRequestIssues::prId))
+                            .sorted(Comparator.comparing(PullRequestState::prId))
                             .map(pr -> JSON.object().put("pr", pr.prId()).put("issues", new JSONArray(
                                     pr.issueIds().stream()
                                       .map(JSON::of)
                                       .collect(Collectors.toList()))))
                             .map(JSONObject::toString)
@@ -122,17 +122,17 @@
     }
 
     @Override
     public void run(Path scratchPath) {
         var historyPath = scratchPath.resolve("notify").resolve("history");
-        var storage = prIssuesStorageBuilder
-                .serializer(this::serializePrIssues)
-                .deserializer(this::loadPrIssues)
+        var storage = prStateStorageBuilder
+                .serializer(this::serializePrState)
+                .deserializer(this::deserializePrState)
                 .materialize(historyPath);
 
         var issues = parseIssues();
-        var prIssues = new PullRequestIssues(pr, issues);
+        var prIssues = new PullRequestState(pr, issues);
         var current = storage.current();
         if (current.contains(prIssues)) {
             // Already up to date
             return;
         }
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/IssueUpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/IssueUpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/IssueUpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/IssueUpdaterTests.java
@@ -46,11 +46,11 @@
             credentials.commitLock(localRepo);
             localRepo.pushAll(repo.url());
 
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var commitIcon = URI.create("http://www.example.com/commit.png");
             var updater = IssueUpdater.newBuilder()
@@ -62,11 +62,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater))
                                      .build();
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -114,11 +114,11 @@
             credentials.commitLock(localRepo);
             localRepo.pushAll(repo.url());
 
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var reviewIcon = URI.create("http://www.example.com/review.png");
             var updater = IssueUpdater.newBuilder()
@@ -130,11 +130,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .prUpdaters(List.of(updater))
                                      .readyLabels(Set.of("rfr"))
                                      .readyComments(Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")))
                                      .build();
 
@@ -215,11 +215,11 @@
             credentials.commitLock(localRepo);
             localRepo.pushAll(repo.url());
 
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var reviewIcon = URI.create("http://www.example.com/review.png");
             var updater = IssueUpdater.newBuilder()
@@ -232,11 +232,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .prUpdaters(List.of(updater)).readyLabels(Set.of("rfr"))
                                      .readyComments(Map.of(reviewer.forge().currentUser().userName(), Pattern.compile("This is now ready")))
                                      .build();
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -274,11 +274,11 @@
             credentials.commitLock(localRepo);
             localRepo.pushAll(repo.url());
 
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var issueProject = credentials.getIssueProject();
             var reviewIcon = URI.create("http://www.example.com/review.png");
             var updater = IssueUpdater.newBuilder()
@@ -291,11 +291,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile(".*"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater))
                                      .prUpdaters(List.of(updater))
                                      .build();
 
             // Initialize history
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/JsonUpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/JsonUpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/JsonUpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/JsonUpdaterTests.java
@@ -55,11 +55,11 @@
             credentials.commitLock(localRepo);
             localRepo.pushAll(repo.url());
 
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var jsonFolder = tempFolder.path().resolve("json");
             Files.createDirectory(jsonFolder);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var updater = new JsonUpdater(jsonFolder, "12", "team");
@@ -67,11 +67,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater))
                                      .build();
 
             TestBotRunner.runPeriodicItems(notifyBot);
             assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
@@ -103,11 +103,11 @@
             localRepo.tag(masterHash, "jdk-12+1", "Added tag 1", "Duke", "duke@openjdk.java.net");
             localRepo.pushAll(repo.url());
 
             var tagStorage = UpdaterTests.createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var jsonFolder = tempFolder.path().resolve("json");
             Files.createDirectory(jsonFolder);
             var storageFolder =tempFolder.path().resolve("storage");
 
             var updater = new JsonUpdater(jsonFolder, "12", "team");
@@ -115,11 +115,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater))
                                      .build();
 
             TestBotRunner.runPeriodicItems(notifyBot);
             assertEquals(List.of(), findJsonFiles(jsonFolder, ""));
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/MailingListUpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/MailingListUpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/MailingListUpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/MailingListUpdaterTests.java
@@ -52,11 +52,11 @@
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
             var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var updater = MailingListUpdater.newBuilder()
                                             .list(mailmanList)
@@ -72,11 +72,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater))
                                      .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -124,11 +124,11 @@
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
             var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var updater = MailingListUpdater.newBuilder()
                                             .list(mailmanList)
@@ -142,11 +142,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater))
                                      .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -196,11 +196,11 @@
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
             var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var updater = MailingListUpdater.newBuilder()
                                             .list(mailmanList)
@@ -214,11 +214,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater))
                                      .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -260,11 +260,11 @@
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
             var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var author = EmailAddress.from("author", "author@duke.duke");
             var updater = MailingListUpdater.newBuilder()
@@ -281,11 +281,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master|another"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater))
                                      .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -358,11 +358,11 @@
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
             var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var author = EmailAddress.from("author", "author@duke.duke");
             var updater = MailingListUpdater.newBuilder()
@@ -380,11 +380,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master|other"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater))
                                      .build();
 
             // Populate our known branches
             localRepo.push(masterHash, repo.url(), "master", true);
@@ -444,11 +444,11 @@
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
             var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var updater = MailingListUpdater.newBuilder()
                                             .list(mailmanList)
@@ -463,11 +463,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater))
                                      .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -536,11 +536,11 @@
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
             var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var updater = MailingListUpdater.newBuilder()
                                             .list(mailmanList)
@@ -556,11 +556,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master|other"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater))
                                      .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -631,11 +631,11 @@
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
             var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var updater = MailingListUpdater.newBuilder()
                                             .list(mailmanList)
@@ -656,11 +656,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater, noTagsUpdater))
                                      .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -748,11 +748,11 @@
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
             var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var updater = MailingListUpdater.newBuilder()
                                             .list(mailmanList)
@@ -774,11 +774,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater, noTagsUpdater))
                                      .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -841,11 +841,11 @@
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
             var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var updater = MailingListUpdater.newBuilder()
                                             .list(mailmanList)
@@ -859,11 +859,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master|newbranch."))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater))
                                      .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
@@ -921,11 +921,11 @@
             var listAddress = EmailAddress.parse(listServer.createList("test"));
             var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);
             var mailmanList = mailmanServer.getList(listAddress.address());
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var sender = EmailAddress.from("duke", "duke@duke.duke");
             var updater = MailingListUpdater.newBuilder()
                                             .list(mailmanList)
@@ -941,11 +941,11 @@
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(updater))
                                      .build();
 
             // No mail should be sent on the first run as there is no history
             TestBotRunner.runPeriodicItems(notifyBot);
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -45,12 +45,12 @@
     public static StorageBuilder<UpdatedBranch> createBranchStorage(HostedRepository repository) {
         return new StorageBuilder<UpdatedBranch>("branches.txt")
                 .remoteRepository(repository, "history", "Duke", "duke@openjdk.java.net", "Updated branches");
     }
 
-    public static StorageBuilder<PullRequestIssues> createPullRequestIssuesStorage(HostedRepository repository) {
-        return new StorageBuilder<PullRequestIssues>("prissues.txt")
+    public static StorageBuilder<PullRequestState> createPullRequestStateStorage(HostedRepository repository) {
+        return new StorageBuilder<PullRequestState>("prissues.txt")
                 .remoteRepository(repository, "history", "Duke", "duke@openjdk.java.net", "Updated prissues");
     }
 
     private static class TestRepositoryUpdateConsumer implements RepositoryUpdateConsumer {
         private final String name;
@@ -110,22 +110,22 @@
             credentials.commitLock(localRepo);
             localRepo.pushAll(repo.url());
 
             var tagStorage = createTagStorage(repo);
             var branchStorage = createBranchStorage(repo);
-            var prIssuesStorage = createPullRequestIssuesStorage(repo);
+            var prStateStorage = createPullRequestStateStorage(repo);
             var storageFolder = tempFolder.path().resolve("storage");
 
             var idempotent = new TestRepositoryUpdateConsumer("i", true);
             var nonIdempotent = new TestRepositoryUpdateConsumer("ni", false);
             var notifyBot = NotifyBot.newBuilder()
                                      .repository(repo)
                                      .storagePath(storageFolder)
                                      .branches(Pattern.compile("master"))
                                      .tagStorageBuilder(tagStorage)
                                      .branchStorageBuilder(branchStorage)
-                                     .prIssuesStorageBuilder(prIssuesStorage)
+                                     .prStateStorageBuilder(prStateStorage)
                                      .updaters(List.of(idempotent, nonIdempotent))
                                      .build();
 
             // Initialize history
             TestBotRunner.runPeriodicItems(notifyBot);
