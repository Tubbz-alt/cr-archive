diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -55,10 +55,11 @@
     private static final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
     private static final String progressMarker = "<!-- Anything below this marker will be automatically updated, please do not edit manually! -->";
     private static final String mergeReadyMarker = "<!-- PullRequestBot merge is ready comment -->";
     private static final String outdatedHelpMarker = "<!-- PullRequestBot outdated help comment -->";
     private static final String sourceBranchWarningMarker = "<!-- PullRequestBot source branch warning comment -->";
+    private static final String mergeCommitWarningMarker = "<!-- PullRequestBot merge commit warning comment -->";
     private static final String emptyPrBodyMarker = "<!--\nReplace this text with a description of your pull request (also remove the surrounding HTML comment markers).\n" +
             "If in doubt, feel free to delete everything in this edit box first, the bot will restore the progress section as needed.\n-->";
     private final Set<String> newLabels;
     static final Pattern ISSUE_ID_PATTERN = Pattern.compile("^(?:[A-Za-z][A-Za-z0-9]+-)?([0-9]+)$");
 
@@ -692,10 +693,26 @@
                 "```\n" +
                 outdatedHelpMarker;
         pr.addComment(message);
     }
 
+    private void addMergeCommitWarningComment(List<Comment> comments) {
+        var existing = findComment(comments, mergeCommitWarningMarker);
+        if (existing.isPresent()) {
+            // Only add the comment once per PR
+            return;
+        }
+
+        var message = "@" + pr.author().userName() + " This pull request looks like it contains a merge commit that " +
+                "brings in commits from outside of this repository. If you want these commits to be preserved " +
+                "when you integrate, you will need to make a 'merge-style' pull request. To do this, change the " +
+                "title of this pull request to `Merge <project>:<branch>`, where `<project>` is the name of another " +
+                "project in the OpenJDK organization. For example: `Merge jdk:master`." +
+                "\n" + mergeCommitWarningMarker;
+        pr.addComment(message);
+    }
+
     private void checkStatus() {
         var checkBuilder = CheckBuilder.create("jcheck", pr.headHash());
         var censusDomain = censusInstance.configuration().census().domain();
         Exception checkException = null;
 
@@ -767,10 +784,14 @@
             var branchNames = pr.repository().branches().stream().map(HostedBranch::name).collect(Collectors.toSet());
             if (!pr.repository().url().equals(pr.sourceRepository().url()) && branchNames.contains(pr.sourceRef())) {
                 addSourceBranchWarningComment(comments);
             }
 
+            if (!PullRequestUtils.isMerge(pr) && PullRequestUtils.containsForeignMerge(pr, localRepo)) {
+                addMergeCommitWarningComment(comments);
+            }
+
             // Ensure that the ready for sponsor label is up to date
             newLabels.remove("sponsor");
             var readyHash = ReadyForSponsorTracker.latestReadyForSponsor(pr.repository().forge().currentUser(), comments);
             if (readyHash.isPresent() && readyForIntegration) {
                 var acceptedHash = readyHash.get();
