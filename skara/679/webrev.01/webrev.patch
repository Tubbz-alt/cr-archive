diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -55,10 +55,11 @@
     private static final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
     private static final String progressMarker = "<!-- Anything below this marker will be automatically updated, please do not edit manually! -->";
     private static final String mergeReadyMarker = "<!-- PullRequestBot merge is ready comment -->";
     private static final String outdatedHelpMarker = "<!-- PullRequestBot outdated help comment -->";
     private static final String sourceBranchWarningMarker = "<!-- PullRequestBot source branch warning comment -->";
+    private static final String mergeCommitWarningMarker = "<!-- PullRequestBot merge commit warning comment -->";
     private static final String emptyPrBodyMarker = "<!--\nReplace this text with a description of your pull request (also remove the surrounding HTML comment markers).\n" +
             "If in doubt, feel free to delete everything in this edit box first, the bot will restore the progress section as needed.\n-->";
     private final Set<String> newLabels;
     static final Pattern ISSUE_ID_PATTERN = Pattern.compile("^(?:[A-Za-z][A-Za-z0-9]+-)?([0-9]+)$");
 
@@ -692,10 +693,26 @@
                 "```\n" +
                 outdatedHelpMarker;
         pr.addComment(message);
     }
 
+    private void addMergeCommitWarningComment(List<Comment> comments) {
+        var existing = findComment(comments, mergeCommitWarningMarker);
+        if (existing.isPresent()) {
+            // Only add the comment once per PR
+            return;
+        }
+
+        var message = "@" + pr.author().userName() + " This pull request looks like it contains a merge commit that " +
+                "brings in commits from outside of this repository. If you want these commits to be preserved " +
+                "when you integrate, you will need to make a 'merge-style' pull request. To do this, change the " +
+                "title of this pull request to `Merge <project>:<branch>`, where `<project>` is the name of another " +
+                "project in the OpenJDK organization. For example: `Merge jdk:master`." +
+                "\n" + mergeCommitWarningMarker;
+        pr.addComment(message);
+    }
+
     private void checkStatus() {
         var checkBuilder = CheckBuilder.create("jcheck", pr.headHash());
         var censusDomain = censusInstance.configuration().census().domain();
         Exception checkException = null;
 
@@ -767,10 +784,14 @@
             var branchNames = pr.repository().branches().stream().map(HostedBranch::name).collect(Collectors.toSet());
             if (!pr.repository().url().equals(pr.sourceRepository().url()) && branchNames.contains(pr.sourceRef())) {
                 addSourceBranchWarningComment(comments);
             }
 
+            if (!PullRequestUtils.isMerge(pr) && PullRequestUtils.containsForeignMerge(pr, localRepo)) {
+                addMergeCommitWarningComment(comments);
+            }
+
             // Ensure that the ready for sponsor label is up to date
             newLabels.remove("sponsor");
             var readyHash = ReadyForSponsorTracker.latestReadyForSponsor(pr.repository().forge().currentUser(), comments);
             if (readyHash.isPresent() && readyForIntegration) {
                 var acceptedHash = readyHash.get();
diff a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
--- a/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
+++ b/bots/pr/src/test/java/org/openjdk/skara/bots/pr/MergeTests.java
@@ -36,10 +36,11 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
 import static org.junit.jupiter.api.Assertions.*;
 import static org.junit.jupiter.api.Assumptions.assumeTrue;
+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertLastCommentContains;
 
 class MergeTests {
     @Test
     void branchMerge(TestInfo testInfo) throws IOException {
         try (var credentials = new HostCredentials(testInfo);
@@ -998,6 +999,72 @@
 
             var check = pr.checks(mergeHash).get("jcheck");
             assertEquals("- Could not determine the source for this merge. A Merge PR title must be specified on the format: Merge `project`:`branch` to allow verification of the merge contents.", check.summary().orElseThrow());
         }
     }
+
+    @Test
+    void foreignCommitWarning(TestInfo testInfo) throws IOException {
+        try (var credentials = new HostCredentials(testInfo);
+             var tempFolder = new TemporaryDirectory()) {
+
+            var author = credentials.getHostedRepository();
+            var integrator = credentials.getHostedRepository();
+            var censusBuilder = credentials.getCensusBuilder()
+                                           .addCommitter(author.forge().currentUser().id())
+                                           .addReviewer(integrator.forge().currentUser().id());
+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();
+
+            // Populate the projects repository
+            var localRepoFolder = tempFolder.path().resolve("localrepo");
+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());
+            var masterHash = localRepo.resolve("master").orElseThrow();
+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));
+            localRepo.push(masterHash, author.url(), "master", true);
+
+            // Make more changes in another branch
+            var otherHash1 = CheckableRepository.appendAndCommit(localRepo, "First change in other",
+                                                                 "First other\n\nReviewed-by: integrationreviewer2");
+            localRepo.push(otherHash1, author.url(), "other", true);
+            var otherHash2 = CheckableRepository.appendAndCommit(localRepo, "Second change in other",
+                                                                 "Second other\n\nReviewed-by: integrationreviewer2");
+            localRepo.push(otherHash2, author.url(), "other");
+
+            // Go back to the original master
+            localRepo.checkout(masterHash, true);
+
+            // Make a change with a corresponding PR
+            var unrelated = Files.writeString(localRepo.root().resolve("unrelated.txt"), "Unrelated", StandardCharsets.UTF_8);
+            localRepo.add(unrelated);
+            var updatedMaster = localRepo.commit( "Unrelated", "some", "some@one");
+            localRepo.push(updatedMaster, author.url(), "master");
+
+            // Go back to the original master again
+            localRepo.checkout(masterHash, true);
+            var editChange = Files.writeString(localRepo.root().resolve("edit.txt"), "Edit", StandardCharsets.UTF_8);
+            localRepo.add(editChange);
+            var editHash = localRepo.commit( "Edit", "some", "some@one");
+
+            // Merge the latest commit from master
+            localRepo.merge(updatedMaster);
+            var masterMergeHash = localRepo.commit("Master merge commit", "some", "some@one");
+            localRepo.push(masterMergeHash, author.url(), "edit", true);
+            var pr = credentials.createPullRequest(author, "master", "edit", "1234: A change");
+
+            // Let the bot check the status
+            TestBotRunner.runPeriodicItems(mergeBot);
+
+            // Merging latest master should not trigger a warning
+            assertEquals(0, pr.comments().size());
+
+            localRepo.merge(otherHash2);
+            var mergeHash = localRepo.commit("Merge commit", "some", "some@one");
+            localRepo.push(mergeHash, author.url(), "edit", true);
+
+            // Let the bot check the status
+            TestBotRunner.runPeriodicItems(mergeBot);
+
+            // There should be a warning
+            assertLastCommentContains(pr, "This pull request looks like it contains a merge commit");
+        }
+    }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/PullRequestUtils.java b/forge/src/main/java/org/openjdk/skara/forge/PullRequestUtils.java
--- a/forge/src/main/java/org/openjdk/skara/forge/PullRequestUtils.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/PullRequestUtils.java
@@ -179,6 +179,21 @@
                       .map(review -> namespace.get(review.reviewer().id()))
                       .filter(Objects::nonNull)
                       .map(Contributor::username)
                       .collect(Collectors.toCollection(LinkedHashSet::new));
     }
+
+    public static boolean containsForeignMerge(PullRequest pr, Repository localRepo) throws IOException {
+        var baseHash = baseHash(pr, localRepo);
+        var commits = localRepo.commitMetadata(baseHash, pr.headHash());
+        var mergeParents = commits.stream()
+                                  .filter(CommitMetadata::isMerge)
+                                  .flatMap(commit -> commit.parents().stream().skip(1))
+                                  .collect(Collectors.toList());
+        for (var mergeParent : mergeParents) {
+            if (!localRepo.mergeBase(pr.targetHash(), mergeParent).equals(mergeParent)) {
+                return true;
+            }
+        }
+        return false;
+    }
 }
