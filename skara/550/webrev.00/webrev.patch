diff a/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java b/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitSkara.java
@@ -130,10 +130,13 @@
         }
 
         var head = repo.get().head();
         System.out.print("Checking for updates ...");
         repo.get().pull();
+        for (var s : repo.get().submodules()) {
+            repo.get().updateSubmodule(s);
+        }
         var newHead = repo.get().head();
 
         if (!head.equals(newHead)) {
             System.out.println("updates downloaded");
             System.out.println("Rebuilding ...");
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Repository.java
@@ -112,10 +112,14 @@
     void move(Path from, Path to) throws IOException;
     default void setPaths(String remote, String pullPath) throws IOException {
         setPaths(remote, pullPath, null);
     }
     void addSubmodule(String pullPath, Path path) throws IOException;
+    void updateSubmodule(Path path) throws IOException;
+    default void updateSubmodule(Submodule s) throws IOException {
+        updateSubmodule(s.path());
+    }
 
     default void push(Hash hash, URI uri, String ref) throws IOException {
         push(hash, uri, ref, false);
     }
 
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitRepository.java
@@ -1226,10 +1226,17 @@
             }
         }
         return remotes;
     }
 
+    @Override
+    public void updateSubmodule(Path path) throws IOException {
+        try (var p = capture("git", "submodule", "update", path.toString())) {
+            await(p);
+        }
+    }
+
     @Override
     public void addSubmodule(String pullPath, Path path) throws IOException {
         try (var p = capture("git", "submodule", "add", pullPath, path.toString())) {
             await(p);
         }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -1255,10 +1255,15 @@
         Files.writeString(hgSub, path.toString() + " = " + pullPath + "\n",
                           StandardOpenOption.WRITE, StandardOpenOption.APPEND, StandardOpenOption.CREATE);
         add(List.of(hgSub));
     }
 
+    @Override
+    public void updateSubmodule(Path path) throws IOException {
+        checkout(".", false);
+    }
+
     @Override
     public List<Submodule> submodules() throws IOException {
         var hgSub = root().resolve(".hgsub");
         var hgSubState = root().resolve(".hgsubstate");
         if (!(Files.exists(hgSub) && Files.exists(hgSubState))) {
