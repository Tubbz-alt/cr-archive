diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveItem.java
@@ -158,17 +158,17 @@
         return new ArchiveItem(parent,"ha" + head.hex(), created, updated, pr.author(), Map.of("PR-Head-Hash", head.hex(), "PR-Base-Hash", base.hex()),
                                () -> String.format("Re: %s[Rev %02d] %s%s", subjectPrefix, index, threadPrefix + (threadPrefix.isEmpty() ? "" : ": "), pr.title()),
                                () -> "",
                                () -> {
                                    if (lastBase.equals(base)) {
-                                       return ArchiveMessages.composeIncrementalRevision(localRepo, hostUserToCommitterName(hostUserToEmailAuthor, pr.author()), head, lastHead);
+                                       return ArchiveMessages.composeIncrementalRevision(pr, localRepo, hostUserToCommitterName(hostUserToEmailAuthor, pr.author()), head, lastHead);
                                    } else {
                                        var rebasedLastHead = rebasedLastHead(localRepo, base, lastHead);
                                        if (rebasedLastHead.isPresent()) {
-                                           return ArchiveMessages.composeRebasedIncrementalRevision(localRepo, hostUserToCommitterName(hostUserToEmailAuthor, pr.author()), head, rebasedLastHead.get());
+                                           return ArchiveMessages.composeRebasedIncrementalRevision(pr, localRepo, hostUserToCommitterName(hostUserToEmailAuthor, pr.author()), head, rebasedLastHead.get());
                                        } else {
-                                           return ArchiveMessages.composeFullRevision(localRepo, hostUserToCommitterName(hostUserToEmailAuthor, pr.author()), base, head);
+                                           return ArchiveMessages.composeFullRevision(pr, localRepo, hostUserToCommitterName(hostUserToEmailAuthor, pr.author()), base, head);
                                        }
                                    }
                                },
                                () -> {
                                    var fullWebrev = webrevGenerator.generate(base, head, String.format("%02d", index), WebrevDescription.Type.FULL);
diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ArchiveMessages.java
@@ -75,10 +75,14 @@
         } catch (IOException e) {
             return List.of();
         }
     }
 
+    private static URI commitsLink(PullRequest pr, Hash first, Hash last) {
+        return pr.repository().webUrl(first.abbreviate(), last.abbreviate());
+    }
+
     private static String formatNumber(int number) {
         switch (number) {
             case 0: return "no";
             case 1: return "one";
             case 2: return "two";
@@ -96,36 +100,39 @@
     private static String describeCommits(List<CommitMetadata> commits, String adjective) {
         return formatNumber(commits.size()) + (adjective.isBlank() ? "" : " " + adjective) +
                 " commit" + (commits.size() != 1 ? "s" : "");
     }
 
-    private static Optional<String> formatCommitMessagesFull(List<CommitMetadata> commits) {
+    private static Optional<String> formatCommitMessagesFull(List<CommitMetadata> commits, URI commitsLink) {
         if (commits.size() == 0) {
             return Optional.empty();
         } else if (commits.size() == 1) {
             return Optional.of(formatSingleCommit(commits.get(0)));
         } else {
-            return Optional.of(commits.stream()
+            var commitSummary = commits.stream()
+                                      .limit(10)
                                       .map(ArchiveMessages::formatCommitInList)
-                                      .collect(Collectors.joining("\n")));
+                                      .collect(Collectors.joining("\n"));
+            if (commits.size() > 10) {
+                commitSummary += "\n - ... and " + (commits.size() - 10) + " more: ";
+                commitSummary += commitsLink.toString();
+            }
+            return Optional.of(commitSummary);
         }
     }
 
-    private static Optional<String> formatCommitMessagesBrief(List<CommitMetadata> commits) {
-        return formatCommitMessagesBrief(commits, 100);
-    }
-
-    private static Optional<String> formatCommitMessagesBrief(List<CommitMetadata> commits, int maxEntries) {
+    private static Optional<String> formatCommitMessagesBrief(List<CommitMetadata> commits, URI commitsLink) {
         if (commits.size() == 0) {
             return Optional.empty();
         } else {
             var commitSummary = commits.stream()
-                                       .limit(maxEntries)
+                                       .limit(10)
                                        .map(ArchiveMessages::formatCommitBrief)
                                        .collect(Collectors.joining("\n"));
-            if (commits.size() > maxEntries) {
-                commitSummary += "\n - ...omitting " + (commits.size() - maxEntries) + " further commits.";
+            if (commits.size() > 10) {
+                commitSummary += "\n - ... and " + (commits.size() - 10) + " more: ";
+                commitSummary += commitsLink.toString();
             }
             return Optional.of(commitSummary);
         }
     }
 
@@ -167,20 +174,21 @@
         }
 
         return filteredBody;
     }
 
-    static String composeIncrementalRevision(Repository localRepository, String author, Hash head, Hash lastHead) {
+    static String composeIncrementalRevision(PullRequest pr, Repository localRepository, String author, Hash head, Hash lastHead) {
         var ret = new StringBuilder();
 
         var incrementalUpdate = false;
         try {
             incrementalUpdate = localRepository.isAncestor(lastHead, head);
         } catch (IOException ignored) {
         }
         var commits = commits(localRepository, lastHead, head);
-        var newCommitMessages = formatCommitMessagesFull(commits);
+        var commitsLink = commitsLink(pr, lastHead, head);
+        var newCommitMessages = formatCommitMessagesFull(commits, commitsLink);
         if (incrementalUpdate) {
             ret.append(author);
             ret.append(" has updated the pull request incrementally");
             var commitsDescription = describeCommits(commits, "additional");
             newCommitMessages.ifPresentOrElse(m -> ret.append(" with ")
@@ -199,35 +207,37 @@
                                                 .append(m));
         }
         return ret.toString();
     }
 
-    static String composeRebasedIncrementalRevision(Repository localRepository, String author, Hash head, Hash lastHead) {
+    static String composeRebasedIncrementalRevision(PullRequest pr, Repository localRepository, String author, Hash head, Hash lastHead) {
         var ret = new StringBuilder();
 
         ret.append(author);
         ret.append(" has updated the pull request with a new target base due to a merge or a rebase. ");
         ret.append("The incremental webrev excludes the unrelated changes brought in by the merge/rebase.");
 
         var commits = commits(localRepository, lastHead, head);
-        var newCommitMessages = formatCommitMessagesFull(commits);
+        var commitsLink = commitsLink(pr, lastHead, head);
+        var newCommitMessages = formatCommitMessagesFull(commits, commitsLink);
         var commitsDescription = describeCommits(commits, "additional");
         newCommitMessages.ifPresent(m -> ret.append(" The pull request contains ")
                                             .append(commitsDescription)
                                             .append(" since the last revision:\n\n")
                                             .append(m));
         return ret.toString();
     }
 
-    static String composeFullRevision(Repository localRepository, String author, Hash base, Hash head) {
+    static String composeFullRevision(PullRequest pr, Repository localRepository, String author, Hash base, Hash head) {
         var ret = new StringBuilder();
 
         ret.append(author);
         ret.append(" has updated the pull request with a new target base due to a merge or a rebase.");
 
         var commits = commits(localRepository, base, head);
-        var newCommitMessages = formatCommitMessagesFull(commits);
+        var commitsLink = commitsLink(pr, base, head);
+        var newCommitMessages = formatCommitMessagesFull(commits, commitsLink);
         var commitsDescription = describeCommits(commits, "");
         newCommitMessages.ifPresent(m -> ret.append(" The pull request now contains ")
                                             .append(commitsDescription)
                                             .append(":\n\n")
                                             .append(m));
@@ -247,13 +257,14 @@
     }
 
     // When changing this, ensure that the PR pattern in the notifier still matches
     static String composeConversationFooter(PullRequest pr, URI issueProject, String projectPrefix, Repository localRepo, WebrevDescription webrev, Hash base, Hash head) {
         var commits = commits(localRepo, base, head);
+        var commitsLink = commitsLink(pr, base, head);
         var issueString = issueUrl(pr, issueProject, projectPrefix).map(url -> "  Issue: " + url + "\n").orElse("");
         return "Commit messages:\n" +
-                formatCommitMessagesBrief(commits).orElse("") + "\n\n" +
+                formatCommitMessagesBrief(commits, commitsLink).orElse("") + "\n\n" +
                 "Changes: " + pr.changeUrl() + "\n" +
                 " Webrev: " + webrev.uri().toString() + "\n" +
                 issueString +
                 "  Stats: " + stats(localRepo, base, head) + "\n" +
                 "  Patch: " + pr.diffUrl().toString() + "\n" +
@@ -261,10 +272,11 @@
                 composeReplyFooter(pr);
     }
 
     static String composeMergeConversationFooter(PullRequest pr, Repository localRepo, List<WebrevDescription> webrevs, Hash base, Hash head) {
         var commits = commits(localRepo, base, head);
+        var commitsLink = commitsLink(pr, base, head);
         String webrevLinks;
         if (webrevs.size() > 0) {
             var containsConflicts = webrevs.stream().anyMatch(w -> w.type().equals(WebrevDescription.Type.MERGE_CONFLICT));
             var containsMergeDiffs = webrevs.stream().anyMatch(w -> w.type().equals(WebrevDescription.Type.MERGE_TARGET) ||
                     w.type().equals(WebrevDescription.Type.MERGE_SOURCE));
@@ -279,11 +291,11 @@
                            .collect(Collectors.joining("\n")) + "\n\n";
         } else {
             webrevLinks = "The merge commit only contains trivial merges, so no merge-specific webrevs have been generated.\n\n";
         }
         return "Commit messages:\n" +
-                formatCommitMessagesBrief(commits, 10).orElse("") + "\n\n" +
+                formatCommitMessagesBrief(commits, commitsLink).orElse("") + "\n\n" +
                 webrevLinks +
                 "Changes: " + pr.changeUrl() + "\n" +
                 "  Stats: " + stats(localRepo, base, head) + "\n" +
                 "  Patch: " + pr.diffUrl().toString() + "\n" +
                 "  Fetch: " + fetchCommand(pr) + "\n\n" +
