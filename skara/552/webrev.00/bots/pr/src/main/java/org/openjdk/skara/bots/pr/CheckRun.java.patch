diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -575,14 +575,20 @@
 
         try {
             // Post check in-progress
             log.info("Starting to run jcheck on PR head");
             pr.createCheck(checkBuilder.build());
-            var localHash = prInstance.commit(censusInstance.namespace(), censusDomain, null);
+            List<String> additionalErrors = List.of();
+            Hash localHash;
+            try {
+                localHash = prInstance.commit(censusInstance.namespace(), censusDomain, null);
+            } catch (CommitFailure e) {
+                additionalErrors = List.of("It was not possible to create a commit for the changes in this PR: " + e.getMessage());
+                localHash = prInstance.baseHash();
+            }
             boolean rebasePossible = true;
             PullRequestCheckIssueVisitor visitor = prInstance.createVisitor(localHash, censusInstance);
-            List<String> additionalErrors;
             if (!localHash.equals(prInstance.baseHash())) {
                 // Try to rebase
                 var ignored = new PrintWriter(new StringWriter());
                 var rebasedHash = prInstance.rebase(localHash, ignored);
                 if (rebasedHash.isEmpty()) {
@@ -593,13 +599,14 @@
 
                 // Determine current status
                 var additionalConfiguration = AdditionalConfiguration.get(prInstance.localRepo(), localHash, pr.repository().forge().currentUser(), comments);
                 prInstance.executeChecks(localHash, censusInstance, visitor, additionalConfiguration);
                 additionalErrors = botSpecificChecks();
-            }
-            else {
-                additionalErrors = List.of("This PR contains no changes");
+            } else {
+                if (additionalErrors.isEmpty()) {
+                    additionalErrors = List.of("This PR contains no changes");
+                }
             }
             updateCheckBuilder(checkBuilder, visitor, additionalErrors);
             updateReadyForReview(visitor, additionalErrors);
 
             // Calculate and update the status message if needed
