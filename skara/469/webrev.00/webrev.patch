diff a/forge/src/test/java/org/openjdk/skara/forge/CheckBuilderTests.java b/forge/src/test/java/org/openjdk/skara/forge/CheckBuilderTests.java
--- a/forge/src/test/java/org/openjdk/skara/forge/CheckBuilderTests.java
+++ b/forge/src/test/java/org/openjdk/skara/forge/CheckBuilderTests.java
@@ -32,22 +32,21 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 class CheckBuilderTests {
     @Test
     void testFrom() {
-        var hash = new Hash("0".repeat(40));
         var name = "test";
         var title = "title";
         var summary = "summary";
         var metadata = "metadata";
         var annotation = CheckAnnotationBuilder.create("README", 0, 1, CheckAnnotationLevel.NOTICE, "Message")
                                                .build();
         var startedAt = ZonedDateTime.now();
         var completedAt = ZonedDateTime.now();
         var success = true;
 
-        var existing = CheckBuilder.create(name, hash)
+        var existing = CheckBuilder.create(name, Hash.zero())
                                    .title(title)
                                    .summary(summary)
                                    .metadata(metadata)
                                    .annotation(annotation)
                                    .startedAt(startedAt)
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/BinaryCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/BinaryCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/BinaryCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/BinaryCheckTests.java
@@ -35,25 +35,24 @@
 import java.util.ArrayList;
 import java.time.ZonedDateTime;
 import java.io.IOException;
 
 class BinaryCheckTests {
-    private static final Hash NULL_HASH = new Hash("0".repeat(40));
     private static final JCheckConfiguration conf = JCheckConfiguration.parse(List.of(
         "[general]",
         "project = test",
         "[checks]",
         "error = binary"
     ));
 
     private static List<Diff> textualParentDiffs(String filename, String mode) {
         var hunk = new Hunk(new Range(1, 0), List.of(),
                             new Range(1, 1), List.of("An additional line"));
-        var patch = new TextualPatch(Path.of(filename), FileType.fromOctal("100644"), NULL_HASH,
-                                     Path.of(filename), FileType.fromOctal(mode), NULL_HASH,
+        var patch = new TextualPatch(Path.of(filename), FileType.fromOctal("100644"), Hash.zero(),
+                                     Path.of(filename), FileType.fromOctal(mode), Hash.zero(),
                                      Status.from('M'), List.of(hunk));
-        var diff = new Diff(NULL_HASH, NULL_HASH, List.of(patch));
+        var diff = new Diff(Hash.zero(), Hash.zero(), List.of(patch));
         return List.of(diff);
     }
 
     private static Commit commit(List<Diff> parentDiffs) {
         var author = new Author("foo", "foo@host.org");
@@ -88,13 +87,13 @@
 
     @Test
     void binaryFileShouldFail() throws IOException {
         var hunk = BinaryHunk.ofLiteral(8, List.of("asdfasdf8"));
         var patch = new BinaryPatch(null, null, null,
-                                    Path.of("file.bin"), FileType.fromOctal("100644"), NULL_HASH,
+                                    Path.of("file.bin"), FileType.fromOctal("100644"), Hash.zero(),
                                     Status.from('A'), List.of(hunk));
-        var diff = new Diff(NULL_HASH, NULL_HASH, List.of(patch));
+        var diff = new Diff(Hash.zero(), Hash.zero(), List.of(patch));
         var commit = commit(List.of(diff));
         var message = message(commit);
         var check = new BinaryCheck();
         var issues = toList(check.check(commit, message, conf));
         assertEquals(1, issues.size());
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/ExecutableCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/ExecutableCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/ExecutableCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/ExecutableCheckTests.java
@@ -35,25 +35,24 @@
 import java.util.ArrayList;
 import java.time.ZonedDateTime;
 import java.io.IOException;
 
 class ExecutableCheckTests {
-    private static final Hash NULL_HASH = new Hash("0".repeat(40));
     private static final JCheckConfiguration conf = JCheckConfiguration.parse(List.of(
         "[general]",
         "project = test",
         "[checks]",
         "error = executable"
     ));
 
     private static List<Diff> parentDiffs(String filename, String mode) {
         var hunk = new Hunk(new Range(1, 0), List.of(),
                             new Range(1, 1), List.of("An additional line"));
-        var patch = new TextualPatch(Path.of(filename), FileType.fromOctal("100644"), NULL_HASH,
-                                     Path.of(filename), FileType.fromOctal(mode), NULL_HASH,
+        var patch = new TextualPatch(Path.of(filename), FileType.fromOctal("100644"), Hash.zero(),
+                                     Path.of(filename), FileType.fromOctal(mode), Hash.zero(),
                                      Status.from('M'), List.of(hunk));
-        var diff = new Diff(NULL_HASH, NULL_HASH, List.of(patch));
+        var diff = new Diff(Hash.zero(), Hash.zero(), List.of(patch));
         return List.of(diff);
     }
 
 
     private static Commit commit(List<Diff> parentDiffs) {
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/HgTagCommitCheckTests.java
@@ -36,18 +36,17 @@
 import java.util.ArrayList;
 import java.time.ZonedDateTime;
 import java.io.IOException;
 
 class HgTagCommitCheckTests {
-    private static final Hash NULL_HASH = new Hash("0".repeat(40));
     private static List<Diff> parentDiffs(String line) {
         var hunk = new Hunk(new Range(1, 0), List.of(),
                             new Range(1, 1), List.of(line));
-        var patch = new TextualPatch(Path.of(".hgtags"), FileType.fromOctal("100644"), NULL_HASH,
-                                     Path.of(".hgtags"), FileType.fromOctal("100644"), NULL_HASH,
+        var patch = new TextualPatch(Path.of(".hgtags"), FileType.fromOctal("100644"), Hash.zero(),
+                                     Path.of(".hgtags"), FileType.fromOctal("100644"), Hash.zero(),
                                      Status.from('M'), List.of(hunk));
-        var diff = new Diff(NULL_HASH, NULL_HASH, List.of(patch));
+        var diff = new Diff(Hash.zero(), Hash.zero(), List.of(patch));
         return List.of(diff);
     }
 
     private static final JCheckConfiguration conf = JCheckConfiguration.parse(List.of(
         "[general]",
@@ -65,17 +64,16 @@
         var metadata = new CommitMetadata(hash, parents, author, author, date, message);
         return new Commit(metadata, parentDiffs);
     }
 
     private static Commit mergeCommit() {
-        var hash = new Hash("0".repeat(40));
         var author = new Author("Foo Bar", "foo@bar.org");
         var parents = List.of(new Hash("12345789012345789012345678901234567890"),
                               new Hash("12345789012345789012345678901234567890"));
         var message = List.of("Merge");
         var date = ZonedDateTime.now();
-        var metadata = new CommitMetadata(hash, parents, author, author, date, message);
+        var metadata = new CommitMetadata(Hash.zero(), parents, author, author, date, message);
         return new Commit(metadata, List.of());
     }
 
     private static CommitMessage message(Commit c) {
         return CommitMessageParsers.v1.parse(c);
@@ -102,11 +100,11 @@
         assertEquals(0, issues.size());
     }
 
     @Test
     void commitThatDoesNotAddTagShouldPass() {
-        var commit = commit(new Hash("0".repeat(40)), List.of(), List.of());
+        var commit = commit(Hash.zero(), List.of(), List.of());
         var check = new HgTagCommitCheck(new Utilities());
         var issues = toList(check.check(commit, message(commit), conf));
         assertEquals(0, issues.size());
     }
 
@@ -163,19 +161,19 @@
         var targetHash = "12345789012345789012345678901234567890";
         var tag = "skara-11+22";
 
         var hunk1 = new Hunk(new Range(1, 0), List.of(),
                             new Range(1, 1), List.of(targetHash + " " + tag));
-        var patch1 = new TextualPatch(Path.of(".hgtags"), FileType.fromOctal("100644"), NULL_HASH,
-                               Path.of(".hgtags"), FileType.fromOctal("100644"), NULL_HASH,
+        var patch1 = new TextualPatch(Path.of(".hgtags"), FileType.fromOctal("100644"), Hash.zero(),
+                               Path.of(".hgtags"), FileType.fromOctal("100644"), Hash.zero(),
                                Status.from('M'), List.of(hunk1));
         var hunk2 = new Hunk(new Range(1, 0), List.of(),
                             new Range(1, 1), List.of("An additional line"));
-        var patch2 = new TextualPatch(Path.of("README"), FileType.fromOctal("100644"), NULL_HASH,
-                                      Path.of("README"), FileType.fromOctal("100644"), NULL_HASH,
+        var patch2 = new TextualPatch(Path.of("README"), FileType.fromOctal("100644"), Hash.zero(),
+                                      Path.of("README"), FileType.fromOctal("100644"), Hash.zero(),
                                       Status.from('M'), List.of(hunk2));
-        var diff = new Diff(NULL_HASH, NULL_HASH, List.of(patch1, patch2));
+        var diff = new Diff(Hash.zero(), Hash.zero(), List.of(patch1, patch2));
         var diffs = List.of(diff);
 
         var commitHash = "1111222233334444555566667777888899990000";
         var lines = List.of("Added tag " + tag + " for changeset " + targetHash);
         var commit = commit(new Hash(commitHash), lines, diffs);
@@ -199,14 +197,14 @@
 
         var hunk1 = new Hunk(new Range(1, 0), List.of(),
                             new Range(1, 1), List.of(targetHash + " " + tag));
         var hunk2 = new Hunk(new Range(1, 0), List.of(),
                             new Range(2, 1), List.of(targetHash + " " + "skara-11+23"));
-        var patch = new TextualPatch(Path.of(".hgtags"), FileType.fromOctal("100644"), NULL_HASH,
-                                     Path.of(".hgtags"), FileType.fromOctal("100644"), NULL_HASH,
+        var patch = new TextualPatch(Path.of(".hgtags"), FileType.fromOctal("100644"), Hash.zero(),
+                                     Path.of(".hgtags"), FileType.fromOctal("100644"), Hash.zero(),
                                      Status.from('M'), List.of(hunk1, hunk2));
-        var diff = new Diff(NULL_HASH, NULL_HASH, List.of(patch));
+        var diff = new Diff(Hash.zero(), Hash.zero(), List.of(patch));
         var diffs = List.of(diff);
 
         var commitHash = "1111222233334444555566667777888899990000";
         var lines = List.of("Added tag " + tag + " for changeset " + targetHash);
         var commit = commit(new Hash(commitHash), lines, diffs);
diff a/jcheck/src/test/java/org/openjdk/skara/jcheck/WhitespaceCheckTests.java b/jcheck/src/test/java/org/openjdk/skara/jcheck/WhitespaceCheckTests.java
--- a/jcheck/src/test/java/org/openjdk/skara/jcheck/WhitespaceCheckTests.java
+++ b/jcheck/src/test/java/org/openjdk/skara/jcheck/WhitespaceCheckTests.java
@@ -36,18 +36,17 @@
 import java.util.ArrayList;
 import java.time.ZonedDateTime;
 import java.io.IOException;
 
 class WhitespaceCheckTests {
-    private static final Hash NULL_HASH = new Hash("0".repeat(40));
     private static List<Diff> parentDiffs(String filename, String line) {
         var hunk = new Hunk(new Range(1, 0), List.of(),
                             new Range(1, 1), List.of(line));
-        var patch = new TextualPatch(Path.of(filename), FileType.fromOctal("100644"), NULL_HASH,
-                                     Path.of(filename), FileType.fromOctal("100644"), NULL_HASH,
+        var patch = new TextualPatch(Path.of(filename), FileType.fromOctal("100644"), Hash.zero(),
+                                     Path.of(filename), FileType.fromOctal("100644"), Hash.zero(),
                                      Status.from('M'), List.of(hunk));
-        var diff = new Diff(NULL_HASH, NULL_HASH, List.of(patch));
+        var diff = new Diff(Hash.zero(), Hash.zero(), List.of(patch));
         return List.of(diff);
     }
 
     private static final List<String> CONFIGURATION = List.of(
         "[general]",
diff a/vcs/src/main/java/org/openjdk/skara/vcs/CommitMetadata.java b/vcs/src/main/java/org/openjdk/skara/vcs/CommitMetadata.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/CommitMetadata.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/CommitMetadata.java
@@ -25,12 +25,10 @@
 import java.util.*;
 import java.time.*;
 import java.time.format.*;
 
 public class CommitMetadata {
-    private static final Hash NULL_HASH = new Hash("0".repeat(40));
-
     private final Hash hash;
     private final List<Hash> parents;
     private final Author author;
     private final Author committer;
     private final ZonedDateTime date;
@@ -70,11 +68,11 @@
     public ZonedDateTime date() {
         return date;
     }
 
     public boolean isInitialCommit() {
-        return numParents() == 1 && parents.get(0).equals(NULL_HASH);
+        return numParents() == 1 && parents.get(0).equals(Hash.zero());
     }
 
     public boolean isMerge() {
         return parents().size() > 1;
     }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Hash.java b/vcs/src/main/java/org/openjdk/skara/vcs/Hash.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Hash.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Hash.java
@@ -21,16 +21,21 @@
  * questions.
  */
 package org.openjdk.skara.vcs;
 
 public class Hash {
+    private static final Hash ZERO = new Hash("0".repeat(40));
     private final String hex;
 
     public Hash(String hex) {
         this.hex = hex;
     }
 
+    public static Hash zero() {
+        return ZERO;
+    }
+
     @Override
     public int hashCode() {
         return hex.hashCode();
     }
 
diff a/vcs/src/main/java/org/openjdk/skara/vcs/Patch.java b/vcs/src/main/java/org/openjdk/skara/vcs/Patch.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/Patch.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/Patch.java
@@ -137,11 +137,11 @@
             w.append("new file mode ");
             w.append(target.type().get().toOctal());
             w.write("\n");
 
             w.append("index ");
-            w.append("0".repeat(40));
+            w.append(Hash.zero().hex());
             w.append("..");
             w.append(target.hash().hex());
             w.write("\n");
         } else if (status.isDeleted()) {
             w.append("deleted file mode ");
@@ -149,11 +149,11 @@
             w.write("\n");
 
             w.append("index ");
             w.append(source.hash().hex());
             w.append("..");
-            w.append("0".repeat(40));
+            w.append(Hash.zero().hex());
             w.write("\n");
         } else if (status.isCopied()) {
             w.append("similarity index ");
             w.append(Integer.toString(status.score()));
             w.append("%");
diff a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitMetadata.java b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitMetadata.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitMetadata.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/git/GitCommitMetadata.java
@@ -60,11 +60,11 @@
         var hash = new Hash(reader.readLine());
         log.fine("Parsing: " + hash.hex());
 
         var parentHashes = reader.readLine();
         if (parentHashes.equals("")) {
-            parentHashes = "0".repeat(40);
+            parentHashes = Hash.zero().hex();
         }
         var parents = new ArrayList<Hash>();
         for (var parentHash : parentHashes.split(" ")) {
             parents.add(new Hash(parentHash));
         }
diff a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/hg/HgRepository.java
@@ -346,11 +346,11 @@
         if (numBranches > 0 || numTags > 1) {
             return false;
         }
 
         var tip = resolve("tip");
-        return tip.isEmpty() || tip.get().hex().equals("0".repeat(40));
+        return tip.isEmpty() || tip.get().equals(Hash.zero());
     }
 
     @Override
     public boolean isHealthy() throws IOException {
         var root = root().toString();
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/GitToHgConverter.java
@@ -77,11 +77,11 @@
         var lines = new String(content, StandardCharsets.UTF_8).split("\n");
         var result = new StringBuilder();
         for (var line : lines) {
             var parts = line.split(" ");
             var hash = parts[0];
-            if (hash.equals("0".repeat(40))) {
+            if (hash.equals(Hash.zero().hex())) {
                 result.append(line);
             } else {
                 var tag = parts[1];
                 var gitHash = gitRepo.resolve(tag);
                 if (gitHash.isPresent()) {
diff a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/HgToGitConverter.java b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/HgToGitConverter.java
--- a/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/HgToGitConverter.java
+++ b/vcs/src/main/java/org/openjdk/skara/vcs/openjdk/convert/HgToGitConverter.java
@@ -350,11 +350,11 @@
             log.finer("Parents: " + parents);
             var parentHashes = Arrays.asList(parents.split(" "))
                                      .stream()
                                      .map(Hash::new)
                                      .collect(Collectors.toList());
-            if (parentHashes.size() == 1 && parentHashes.get(0).equals(new Hash("0".repeat(40)))) {
+            if (parentHashes.size() == 1 && parentHashes.get(0).equals(Hash.zero())) {
                 parentHashes = new ArrayList<Hash>();
             }
             pipe.readln(); // skip parent revisions
 
             var author = Author.fromString(pipe.readln());
@@ -479,11 +479,11 @@
                                 continue;
                             }
                             var parts = line.split(" ");
                             var hash = parts[0];
                             var tag = parts[1];
-                            if (hash.equals("0".repeat(40))) {
+                            if (hash.equals(Hash.zero().hex())) {
                                 tags.remove(tag);
                             } else {
                                 tags.put(tag, commit);
                             }
                         }
diff a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
--- a/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
+++ b/vcs/src/test/java/org/openjdk/skara/vcs/RepositoryTests.java
@@ -274,23 +274,22 @@
             assertEquals(List.of("Add README"), commit.message());
 
             assertEquals(1, commit.numParents());
             assertEquals(1, commit.parents().size());
 
-            var nullHash = "0".repeat(40);
             var parent = commit.parents().get(0);
-            assertEquals(nullHash, parent.hex());
+            assertEquals(Hash.zero(), parent);
 
             assertTrue(commit.isInitialCommit());
             assertFalse(commit.isMerge());
             assertEquals(hash, commit.hash());
 
             var diffs = commit.parentDiffs();
             assertEquals(1, diffs.size());
 
             var diff = diffs.get(0);
-            assertEquals(nullHash, diff.from().hex());
+            assertEquals(Hash.zero(), diff.from());
             assertEquals(hash, diff.to());
 
             assertEquals(0, diff.removed());
             assertEquals(0, diff.modified());
             assertEquals(1, diff.added());
@@ -2172,9 +2171,9 @@
             assertEquals(2, status.size());
             var statusEntry = status.get(0);
             assertTrue(statusEntry.status().isUnmerged());
             assertEquals(Path.of("README"), statusEntry.source().path().get());
             assertEquals(Optional.empty(), statusEntry.source().type());
-            assertEquals("0".repeat(40), statusEntry.source().hash().hex());
+            assertEquals(Hash.zero(), statusEntry.source().hash());
         }
     }
 }
