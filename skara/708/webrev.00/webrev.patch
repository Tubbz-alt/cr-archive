diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -652,11 +652,11 @@
         var branch = pr.sourceRef();
         var message = ":warning: @" + pr.author().userName() + " " +
             "a branch with the same name as the source branch for this pull request (`" + branch + "`) " +
             "is present in the [target repository](" + pr.repository().nonTransformedWebUrl() + "). " +
             "If you eventually integrate this pull request then the branch `" + branch + "` " +
-            "in your [personal fork](" + pr.sourceRepository().nonTransformedWebUrl() + ") will diverge once you sync " +
+            "in your [personal fork](" + pr.sourceRepository().get().nonTransformedWebUrl() + ") will diverge once you sync " +
             "your personal fork with the upstream repository.\n" +
             "\n" +
             "To avoid this situation, create a new branch for your changes and reset the `" + branch + "` branch. " +
             "You can do this by running the following commands in a local repository for your personal fork. " +
             "_Note_: you do *not* have to name the new branch `NEW-BRANCH-NAME`." +
@@ -780,13 +780,15 @@
                 newLabels.add("merge-conflict");
             } else {
                 newLabels.remove("merge-conflict");
             }
 
-            var branchNames = pr.repository().branches().stream().map(HostedBranch::name).collect(Collectors.toSet());
-            if (!pr.repository().url().equals(pr.sourceRepository().url()) && branchNames.contains(pr.sourceRef())) {
-                addSourceBranchWarningComment(comments);
+            if (pr.sourceRepository().isPresent()) {
+                var branchNames = pr.repository().branches().stream().map(HostedBranch::name).collect(Collectors.toSet());
+                if (!pr.repository().url().equals(pr.sourceRepository().get().url()) && branchNames.contains(pr.sourceRef())) {
+                    addSourceBranchWarningComment(comments);
+                }
             }
 
             if (!PullRequestUtils.isMerge(pr) && PullRequestUtils.containsForeignMerge(pr, localRepo)) {
                 addMergeCommitWarningComment(comments);
             }
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryPullRequest.java
@@ -94,12 +94,12 @@
     public String sourceRef() {
         return null;
     }
 
     @Override
-    public HostedRepository sourceRepository() {
-        return null;
+    public Optional<HostedRepository> sourceRepository() {
+        return Optional.empty();
     }
 
     @Override
     public String targetRef() {
         return null;
diff a/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrList.java b/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrList.java
--- a/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrList.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/pr/GitPrList.java
@@ -206,11 +206,11 @@
             assignees.add(String.join(",", prAssignees));
             labels.add(String.join(",", prLabels));
             issues.add(String.join(",", prIssues));
             urls.add(pr.webUrl().toString());
 
-            if (pr.sourceRepository().webUrl().equals(uri)) {
+            if (pr.sourceRepository().isPresent() && pr.sourceRepository().get().webUrl().equals(uri)) {
                 branches.add(pr.sourceRef());
             } else {
                 branches.add("");
             }
 
diff a/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/PullRequest.java
@@ -86,11 +86,11 @@
 
     /**
      * Returns the repository the request is created from.
      * @return
      */
-    HostedRepository sourceRepository();
+    Optional<HostedRepository> sourceRepository();
 
     /**
      * Returns the name of the ref the request is intended to be merged into.
      * @return
      */
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubPullRequest.java
@@ -245,12 +245,16 @@
     public String sourceRef() {
         return json.get("head").get("ref").asString();
     }
 
     @Override
-    public HostedRepository sourceRepository() {
-        return new GitHubRepository(host, json.get("head").get("repo").get("full_name").asString());
+    public Optional<HostedRepository> sourceRepository() {
+        if (json.get("head").get("repo").isNull()) {
+            return Optional.empty();
+        } else {
+            return Optional.of(new GitHubRepository(host, json.get("head").get("repo").get("full_name").asString()));
+        }
     }
 
     @Override
     public String targetRef() {
         return json.get("base").get("ref").asString();
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabMergeRequest.java
@@ -265,13 +265,17 @@
     public String sourceRef() {
         return json.get("source_branch").asString();
     }
 
     @Override
-    public HostedRepository sourceRepository() {
-        return new GitLabRepository((GitLabHost) repository.forge(),
-                                    json.get("source_project_id").asInt());
+    public Optional<HostedRepository> sourceRepository() {
+        if (json.get("source_project_id").isNull()) {
+            return Optional.empty();
+        } else {
+            return Optional.of(new GitLabRepository((GitLabHost) repository.forge(),
+                                                    json.get("source_project_id").asInt()));
+        }
     }
 
     @Override
     public String targetRef() {
         return json.get("target_branch").asString();
diff a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
--- a/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestPullRequest.java
@@ -144,12 +144,12 @@
     public String sourceRef() {
         return sourceRef;
     }
 
     @Override
-    public HostedRepository sourceRepository() {
-        return sourceRepository;
+    public Optional<HostedRepository> sourceRepository() {
+        return Optional.of(sourceRepository);
     }
 
     @Override
     public String targetRef() {
         return targetRef;
