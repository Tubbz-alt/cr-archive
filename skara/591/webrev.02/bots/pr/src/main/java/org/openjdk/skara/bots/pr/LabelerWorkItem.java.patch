diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/LabelerWorkItem.java
@@ -21,10 +21,11 @@
  * questions.
  */
 package org.openjdk.skara.bots.pr;
 
 import org.openjdk.skara.forge.*;
+import org.openjdk.skara.vcs.Repository;
 
 import java.io.*;
 import java.nio.file.Path;
 import java.util.*;
 import java.util.function.Consumer;
@@ -38,13 +39,14 @@
     @Override
     public String toString() {
         return "LabelerWorkItem@" + pr.repository().name() + "#" + pr.id();
     }
 
-    private Set<String> getLabels(PullRequestInstance prInstance) throws IOException {
+    private Set<String> getLabels(Repository localRepo) throws IOException {
         var labels = new HashSet<String>();
-        var files = prInstance.changedFiles();
+        var prUtils = new PullRequestUtils(pr);
+        var files = prUtils.changedFiles(localRepo);
         for (var file : files) {
             for (var label : bot.labelPatterns().entrySet()) {
                 for (var pattern : label.getValue()) {
                     var matcher = pattern.matcher(file.toString());
                     if (matcher.find()) {
@@ -61,16 +63,16 @@
     public void run(Path scratchPath) {
         if (bot.currentLabels().containsKey(pr.headHash())) {
             return;
         }
         try {
+            var path = scratchPath.resolve("pr").resolve("labeler").resolve(pr.repository().name());
             var seedPath = bot.seedStorage().orElse(scratchPath.resolve("seeds"));
-            var prInstance = new PullRequestInstance(scratchPath.resolve("pr").resolve("labeler"),
-                                                     new HostedRepositoryPool(seedPath),
-                                                     pr,
-                                                     bot.ignoreStaleReviews());
-            var newLabels = getLabels(prInstance);
+            var hostedRepositoryPool = new HostedRepositoryPool(seedPath);
+            var localRepo = hostedRepositoryPool.checkout(pr, path);
+            localRepo.fetch(pr.repository().url(), "+" + pr.targetRef() + ":labelerworkitem", false);
+            var newLabels = getLabels(localRepo);
             var currentLabels = pr.labels().stream()
                                   .filter(key -> bot.labelPatterns().containsKey(key))
                                   .collect(Collectors.toSet());
 
             // Add all labels not already set
