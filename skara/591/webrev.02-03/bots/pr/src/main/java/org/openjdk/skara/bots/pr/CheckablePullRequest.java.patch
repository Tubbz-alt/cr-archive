diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java
@@ -92,14 +92,12 @@
     Hash commit(Hash finalHead, Namespace namespace, String censusDomain, String sponsorId) throws IOException, CommitFailure {
         Author committer;
         Author author;
         var contributor = namespace.get(pr.author().id());
 
-        var prUtils = new PullRequestUtils(pr);
-
         if (contributor == null) {
-            if (prUtils.isMerge()) {
+            if (PullRequestUtils.isMerge(pr)) {
                 throw new CommitFailure("Merges can only be performed by Committers.");
             }
 
             // Use the information contained in the head commit - jcheck has verified that it contains sane values
             var headCommit = localRepo.commitMetadata(pr.headHash().hex() + "^.." + pr.headHash().hex()).get(0);
@@ -115,11 +113,11 @@
             committer = author;
         }
 
         var activeReviews = filterActiveReviews(pr.reviews());
         var commitMessage = commitMessage(activeReviews, namespace);
-        return prUtils.createCommit(localRepo, finalHead, author, committer, commitMessage);
+        return PullRequestUtils.createCommit(pr, localRepo, finalHead, author, committer, commitMessage);
     }
 
     PullRequestCheckIssueVisitor createVisitor(Hash localHash, CensusInstance censusInstance) throws IOException {
         var checks = JCheck.checksFor(localRepo, censusInstance.census(), pr.targetHash());
         return new PullRequestCheckIssueVisitor(checks);
