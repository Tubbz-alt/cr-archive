diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckablePullRequest.java
@@ -32,39 +32,41 @@
 import java.io.*;
 import java.util.*;
 import java.util.stream.Collectors;
 
 public class CheckablePullRequest {
-    private final PullRequestInstance prInstance;
+    private final PullRequest pr;
+    private final Repository localRepo;
     private final boolean ignoreStaleReviews;
 
-    CheckablePullRequest(PullRequestInstance prInstance, boolean ignoreStaleReviews) {
-        this.prInstance = prInstance;
+    CheckablePullRequest(PullRequest pr, Repository localRepo, boolean ignoreStaleReviews) {
+        this.pr = pr;
+        this.localRepo = localRepo;
         this.ignoreStaleReviews = ignoreStaleReviews;
     }
 
     private String commitMessage(List<Review> activeReviews, Namespace namespace) throws IOException {
         var reviewers = activeReviews.stream()
-                                     .filter(review -> !ignoreStaleReviews || review.hash().equals(prInstance.headHash()))
+                                     .filter(review -> !ignoreStaleReviews || review.hash().equals(pr.headHash()))
                                      .filter(review -> review.verdict() == Review.Verdict.APPROVED)
                                      .map(review -> review.reviewer().id())
                                      .map(namespace::get)
                                      .filter(Objects::nonNull)
                                      .map(Contributor::username)
                                      .collect(Collectors.toList());
 
-        var comments = prInstance.pr().comments();
-        var currentUser = prInstance.pr().repository().forge().currentUser();
+        var comments = pr.comments();
+        var currentUser = pr.repository().forge().currentUser();
         var additionalContributors = Contributors.contributors(currentUser,
                                                                comments).stream()
                                                  .map(email -> Author.fromString(email.toString()))
                                                  .collect(Collectors.toList());
 
         var additionalIssues = SolvesTracker.currentSolved(currentUser, comments);
         var summary = Summary.summary(currentUser, comments);
-        var issue = Issue.fromString(prInstance.pr().title());
-        var commitMessageBuilder = issue.map(CommitMessage::title).orElseGet(() -> CommitMessage.title(prInstance.pr().title()));
+        var issue = Issue.fromString(pr.title());
+        var commitMessageBuilder = issue.map(CommitMessage::title).orElseGet(() -> CommitMessage.title(pr.title()));
         if (issue.isPresent()) {
             commitMessageBuilder.issues(additionalIssues);
         }
         commitMessageBuilder.contributors(additionalContributors)
                             .reviewers(reviewers);
@@ -88,19 +90,21 @@
     }
 
     Hash commit(Hash finalHead, Namespace namespace, String censusDomain, String sponsorId) throws IOException, CommitFailure {
         Author committer;
         Author author;
-        var contributor = namespace.get(prInstance.pr().author().id());
+        var contributor = namespace.get(pr.author().id());
+
+        var prUtils = new PullRequestUtils(pr);
 
         if (contributor == null) {
-            if (prInstance.isMerge()) {
+            if (prUtils.isMerge()) {
                 throw new CommitFailure("Merges can only be performed by Committers.");
             }
 
             // Use the information contained in the head commit - jcheck has verified that it contains sane values
-            var headCommit = prInstance.localRepo().commitMetadata(prInstance.headHash().hex() + "^.." + prInstance.headHash().hex()).get(0);
+            var headCommit = localRepo.commitMetadata(pr.headHash().hex() + "^.." + pr.headHash().hex()).get(0);
             author = headCommit.author();
         } else {
             author = new Author(contributor.fullName().orElseThrow(), contributor.username() + "@" + censusDomain);
         }
 
@@ -109,66 +113,66 @@
             committer = new Author(sponsorContributor.fullName().orElseThrow(), sponsorContributor.username() + "@" + censusDomain);
         } else {
             committer = author;
         }
 
-        var activeReviews = filterActiveReviews(prInstance.pr().reviews());
+        var activeReviews = filterActiveReviews(pr.reviews());
         var commitMessage = commitMessage(activeReviews, namespace);
-        return prInstance.commit(finalHead, author, committer, commitMessage);
+        return prUtils.createCommit(localRepo, finalHead, author, committer, commitMessage);
     }
 
     PullRequestCheckIssueVisitor createVisitor(Hash localHash, CensusInstance censusInstance) throws IOException {
-        var checks = JCheck.checksFor(prInstance.localRepo(), censusInstance.census(), prInstance.targetHash());
+        var checks = JCheck.checksFor(localRepo, censusInstance.census(), pr.targetHash());
         return new PullRequestCheckIssueVisitor(checks);
     }
 
     void executeChecks(Hash localHash, CensusInstance censusInstance, PullRequestCheckIssueVisitor visitor, List<String> additionalConfiguration) throws Exception {
-        try (var issues = JCheck.check(prInstance.localRepo(), censusInstance.census(), CommitMessageParsers.v1, localHash,
-                                       prInstance.targetHash(), additionalConfiguration)) {
+        try (var issues = JCheck.check(localRepo, censusInstance.census(), CommitMessageParsers.v1, localHash,
+                                       pr.targetHash(), additionalConfiguration)) {
             for (var issue : issues) {
                 issue.accept(visitor);
             }
         }
     }
 
     List<CommitMetadata> divergingCommits() {
-        return divergingCommits(prInstance.headHash());
+        return divergingCommits(pr.headHash());
     }
 
     private List<CommitMetadata> divergingCommits(Hash commitHash) {
         try {
-            var updatedBase = prInstance.localRepo().mergeBase(prInstance.targetHash(), commitHash);
-            return prInstance.localRepo().commitMetadata(updatedBase, prInstance.targetHash());
+            var updatedBase = localRepo.mergeBase(pr.targetHash(), commitHash);
+            return localRepo.commitMetadata(updatedBase, pr.targetHash());
         } catch (IOException e) {
             throw new RuntimeException(e);
         }
     }
 
     Optional<Hash> mergeTarget(PrintWriter reply) {
-        var divergingCommits = divergingCommits(prInstance.headHash());
+        var divergingCommits = divergingCommits(pr.headHash());
         if (divergingCommits.size() > 0) {
             reply.print("The following commits have been pushed to ");
-            reply.print(prInstance.pr().targetRef());
+            reply.print(pr.targetRef());
             reply.println(" since your change was applied:");
             divergingCommits.forEach(c -> reply.println(" * " + c.hash().hex() + ": " + c.message().get(0)));
 
             try {
-                prInstance.localRepo().checkout(prInstance.headHash(), true);
-                prInstance.localRepo().merge(prInstance.targetHash());
-                var hash = prInstance.localRepo().commit("Automatic merge with latest target", "duke", "duke@openjdk.org");
+                localRepo.checkout(pr.headHash(), true);
+                localRepo.merge(pr.targetHash());
+                var hash = localRepo.commit("Automatic merge with latest target", "duke", "duke@openjdk.org");
                 reply.println();
                 reply.println("Your commit was automatically rebased without conflicts.");
                 return Optional.of(hash);
             } catch (IOException e) {
                 reply.println();
                 reply.print("It was not possible to rebase your changes automatically. Please merge `");
-                reply.print(prInstance.pr().targetRef());
+                reply.print(pr.targetRef());
                 reply.println("` into your branch and try again.");
                 return Optional.empty();
             }
         } else {
             // No merge needed
-            return Optional.of(prInstance.headHash());
+            return Optional.of(pr.headHash());
         }
     }
 
 }
