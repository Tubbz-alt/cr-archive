diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -37,46 +37,51 @@
 import java.util.stream.*;
 
 class CheckRun {
     private final CheckWorkItem workItem;
     private final PullRequest pr;
-    private final PullRequestInstance prInstance;
-    private final CheckablePullRequest checkablePullRequest;
+    private final Repository localRepo;
     private final List<Comment> comments;
     private final List<Review> allReviews;
     private final List<Review> activeReviews;
     private final Set<String> labels;
     private final CensusInstance censusInstance;
     private final boolean ignoreStaleReviews;
 
+    private final Hash baseHash;
+    private final CheckablePullRequest checkablePullRequest;
+
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
     private final String progressMarker = "<!-- Anything below this marker will be automatically updated, please do not edit manually! -->";
     private final String mergeReadyMarker = "<!-- PullRequestBot merge is ready comment -->";
     private final String outdatedHelpMarker = "<!-- PullRequestBot outdated help comment -->";
     private final String sourceBranchWarningMarker = "<!-- PullRequestBot source branch warning comment -->";
     private final Set<String> newLabels;
 
-    private CheckRun(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
+    private CheckRun(CheckWorkItem workItem, PullRequest pr, Repository localRepo, List<Comment> comments,
                      List<Review> allReviews, List<Review> activeReviews, Set<String> labels,
-                     CensusInstance censusInstance, boolean ignoreStaleReviews) {
+                     CensusInstance censusInstance, boolean ignoreStaleReviews) throws IOException {
         this.workItem = workItem;
         this.pr = pr;
-        this.prInstance = prInstance;
-        this.checkablePullRequest = new CheckablePullRequest(prInstance, ignoreStaleReviews);
+        this.localRepo = localRepo;
         this.comments = comments;
         this.allReviews = allReviews;
         this.activeReviews = activeReviews;
         this.labels = new HashSet<>(labels);
         this.newLabels = new HashSet<>(labels);
         this.censusInstance = censusInstance;
         this.ignoreStaleReviews = ignoreStaleReviews;
+
+        var prUtils = new PullRequestUtils(pr);
+        baseHash = prUtils.baseHash(localRepo);
+        checkablePullRequest = new CheckablePullRequest(pr, localRepo, ignoreStaleReviews);
     }
 
-    static void execute(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
+    static void execute(CheckWorkItem workItem, PullRequest pr, Repository localRepo, List<Comment> comments,
                         List<Review> allReviews, List<Review> activeReviews, Set<String> labels, CensusInstance censusInstance,
-                        boolean ignoreStaleReviews) {
-        var run = new CheckRun(workItem, pr, prInstance, comments, allReviews, activeReviews, labels, censusInstance, ignoreStaleReviews);
+                        boolean ignoreStaleReviews) throws IOException {
+        var run = new CheckRun(workItem, pr, localRepo, comments, allReviews, activeReviews, labels, censusInstance, ignoreStaleReviews);
         run.checkStatus();
     }
 
     private boolean isTargetBranchAllowed() {
         var matcher = workItem.bot.allowedTargetBranches().matcher(pr.targetRef());
@@ -127,13 +132,12 @@
                     .map(name -> "   - " + name)
                     .collect(Collectors.joining("\n"));
             ret.add(error);
         }
 
-        var baseHash = prInstance.baseHash();
         var headHash = pr.headHash();
-        var originalCommits = prInstance.localRepo().commitMetadata(baseHash, headHash);
+        var originalCommits = localRepo.commitMetadata(baseHash, headHash);
 
         if (!checkCommitAuthor(originalCommits)) {
             var error = "For contributors who are not existing OpenJDK Authors, commit attribution will be taken from " +
                     "the commits in the PR. However, the commits in this PR have inconsistent user names and/or " +
                     "email addresses. Please amend the commits.";
@@ -401,11 +405,11 @@
         message.append(pr.author().userName());
         message.append(" This change now passes all automated pre-integration checks");
 
         try {
             var hasContributingFile =
-                !prInstance.localRepo().files(prInstance.targetHash(), Path.of("CONTRIBUTING.md")).isEmpty();
+                !localRepo.files(pr.targetHash(), Path.of("CONTRIBUTING.md")).isEmpty();
             if (hasContributingFile) {
                 message.append(". When the change also fulfills all ");
                 message.append("[project specific requirements](https://github.com/");
                 message.append(pr.repository().name());
                 message.append("/blob/");
@@ -444,11 +448,11 @@
                 message.append("As there are no conflicts, your changes will automatically be rebased on top of ");
                 message.append("these commits when integrating. If you prefer to avoid automatic rebasing, please merge `");
                 message.append(pr.targetRef());
                 message.append("` into your branch, and then specify the current head hash when integrating, like this: ");
                 message.append("`/integrate ");
-                message.append(prInstance.targetHash());
+                message.append(pr.targetHash());
                 message.append("`.\n");
             } else {
                 message.append("Your changes cannot be rebased automatically without conflicts, so you will need to ");
                 message.append("merge `");
                 message.append(pr.targetRef());
@@ -460,11 +464,11 @@
             message.append(pr.targetRef());
             message.append("` branch since the last update of the source branch of this PR. If another commit should be pushed before ");
             message.append("you perform the `/integrate` command, your PR will be automatically rebased. If you would like to avoid ");
             message.append("potential automatic rebasing, specify the current head hash when integrating, like this: ");
             message.append("`/integrate ");
-            message.append(prInstance.targetHash());
+            message.append(pr.targetHash());
             message.append("`.\n");
         }
 
         if (!ProjectPermissions.mayCommit(censusInstance, pr.author())) {
             message.append("\n");
@@ -522,11 +526,11 @@
         } else {
             existing.ifPresent(comment -> pr.updateComment(comment.id(), getMergeNoLongerReadyComment()));
         }
     }
 
-    private void addSourceBranchWarningComment(List<Comment> comments) {
+    private void addSourceBranchWarningComment(List<Comment> comments) throws IOException {
         var existing = findComment(comments, sourceBranchWarningMarker);
         if (existing.isPresent()) {
             // Only add the comment once per PR
             return;
         }
@@ -543,11 +547,11 @@
             "_Note_: you do *not* have to name the new branch `NEW-BRANCH-NAME`." +
             "\n" +
             "```" +
             "$ git checkout " + branch + "\n" +
             "$ git checkout -b NEW-BRANCH-NAME\n" +
-            "$ git branch -f " + branch + " " + prInstance.baseHash().hex() + "\n" +
+            "$ git branch -f " + branch + " " + baseHash.hex() + "\n" +
             "$ git push -f origin " + branch + "\n" +
             "```\n" +
             "\n" +
             "Then proceed to create a new pull request with `NEW-BRANCH-NAME` as the source branch and " +
             "close this one.\n" +
@@ -600,16 +604,16 @@
             Hash localHash;
             try {
                 localHash = checkablePullRequest.commit(commitHash, censusInstance.namespace(), censusDomain, null);
             } catch (CommitFailure e) {
                 additionalErrors = List.of(e.getMessage());
-                localHash = prInstance.baseHash();
+                localHash = baseHash;
             }
             PullRequestCheckIssueVisitor visitor = checkablePullRequest.createVisitor(localHash, censusInstance);
-            if (!localHash.equals(prInstance.baseHash())) {
+            if (!localHash.equals(baseHash)) {
                 // Determine current status
-                var additionalConfiguration = AdditionalConfiguration.get(prInstance.localRepo(), localHash, pr.repository().forge().currentUser(), comments);
+                var additionalConfiguration = AdditionalConfiguration.get(localRepo, localHash, pr.repository().forge().currentUser(), comments);
                 checkablePullRequest.executeChecks(localHash, censusInstance, visitor, additionalConfiguration);
                 additionalErrors = botSpecificChecks(localHash);
             } else {
                 if (additionalErrors.isEmpty()) {
                     additionalErrors = List.of("This PR contains no changes");
@@ -625,11 +629,11 @@
             // Post / update approval messages (only needed if the review itself can't contain a body)
             if (!pr.repository().forge().supportsReviewBody()) {
                 updateReviewedMessages(comments, allReviews);
             }
 
-            var commit = prInstance.localRepo().lookup(localHash).orElseThrow();
+            var commit = localRepo.lookup(localHash).orElseThrow();
             var commitMessage = String.join("\n", commit.message());
             var readyForIntegration = visitor.getMessages().isEmpty() && additionalErrors.isEmpty();
             updateMergeReadyComment(readyForIntegration, commitMessage, comments, activeReviews, rebasePossible);
             if (readyForIntegration && rebasePossible) {
                 newLabels.add("ready");
