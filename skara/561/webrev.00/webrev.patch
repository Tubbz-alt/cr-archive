diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -212,10 +212,11 @@
                     "[Integrated] " + rfrConv.first().subject(), body)
                              .sender(sender)
                              .author(commitToAuthor(commit))
                              .recipient(recipient)
                              .headers(headers)
+                             .headers(commitHeaders(repository, commits))
                              .build();
 
             try {
                 list.post(email);
             } catch (RuntimeException e) {
@@ -244,19 +245,29 @@
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
                          .author(commitAddress)
                          .recipient(recipient)
                          .headers(headers)
+                         .headers(commitHeaders(repository, commits))
                          .build();
 
         try {
             list.post(email);
         } catch (RuntimeException e) {
             throw new NonRetriableException(e);
         }
     }
 
+    private Map<String, String> commitHeaders(HostedRepository repository, List<Commit> commits) {
+        var ret = new HashMap<String, String>();
+        ret.put("X-Git-URL", repository.webUrl().toString());
+        if (!commits.isEmpty()) {
+            ret.put("X-Git-Changeset", commits.get(0).hash().hex());
+        }
+        return ret;
+    }
+
     @Override
     public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
         switch (mode) {
             case PR_ONLY:
                 filterAndSendPrCommits(repository, commits, branch);
@@ -300,11 +311,12 @@
 
         var subject = tagToSubject(repository, taggedCommit.hash(), tag.tag());
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
                          .recipient(recipient)
-                         .headers(headers);
+                         .headers(headers)
+                         .headers(commitHeaders(repository, commits));
 
         if (annotation != null) {
             email.author(annotationToAuthor(annotation));
         } else {
             email.author(commitToAuthor(taggedCommit));
@@ -332,11 +344,12 @@
 
         var subject = tagToSubject(repository, commit.hash(), tag);
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
                          .recipient(recipient)
-                         .headers(headers);
+                         .headers(headers)
+                         .headers(commitHeaders(repository, List.of(commit)));
 
         if (annotation != null) {
             email.author(annotationToAuthor(annotation));
         } else {
             email.author(commitToAuthor(commit));
@@ -396,10 +409,11 @@
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
                          .author(finalAuthor)
                          .recipient(recipient)
                          .headers(headers)
+                         .headers(commitHeaders(repository, commits))
                          .build();
         try {
             list.post(email);
         } catch (RuntimeException e) {
             throw new NonRetriableException(e);
diff a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
--- a/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
+++ b/bots/notify/src/test/java/org/openjdk/skara/bots/notify/UpdaterTests.java
@@ -265,10 +265,14 @@
             assertFalse(email.body().contains(masterHash.abbreviate()));
             assertTrue(email.hasHeader("extra1"));
             assertEquals("value1", email.headerValue("extra1"));
             assertTrue(email.hasHeader("extra2"));
             assertEquals("value2", email.headerValue("extra2"));
+            assertTrue(email.hasHeader("X-Git-URL"));
+            assertEquals(repo.webUrl().toString(), email.headerValue("X-Git-URL"));
+            assertTrue(email.hasHeader("X-Git-Changeset"));
+            assertEquals(editHash.hex(), email.headerValue("X-Git-Changeset"));
         }
     }
 
     @Test
     void testMailingListMultiple(TestInfo testInfo) throws IOException {
@@ -333,10 +337,14 @@
             assertTrue(email.body().contains("Changeset: " + editHash1.abbreviate()));
             assertTrue(email.body().contains("23456789: More fixes"));
             assertTrue(email.body().contains("Changeset: " + editHash2.abbreviate()));
             assertTrue(email.body().contains("3456789A: Even more fixes"));
             assertFalse(email.body().contains(masterHash.abbreviate()));
+            assertTrue(email.hasHeader("X-Git-URL"));
+            assertEquals(repo.webUrl().toString(), email.headerValue("X-Git-URL"));
+            assertTrue(email.hasHeader("X-Git-Changeset"));
+            assertEquals(editHash1.hex(), email.headerValue("X-Git-Changeset"));
         }
     }
 
     @Test
     void testMailingListSponsored(TestInfo testInfo) throws IOException {
@@ -467,10 +475,14 @@
             assertTrue(email.body().contains("23456789: More fixes"));
             assertTrue(email.body().contains("Changeset: " + editHash2.abbreviate()));
             assertTrue(email.body().contains("3456789A: Even more fixes"));
             assertFalse(email.body().contains(masterHash.abbreviate()));
             assertFalse(email.body().contains("456789AB: Yet more fixes"));
+            assertTrue(email.hasHeader("X-Git-URL"));
+            assertEquals(repo.webUrl().toString(), email.headerValue("X-Git-URL"));
+            assertTrue(email.hasHeader("X-Git-Changeset"));
+            assertEquals(editHash1.hex(), email.headerValue("X-Git-Changeset"));
 
             localRepo.checkout(branch, true);
             var editHash3 = CheckableRepository.appendAndCommit(localRepo, "Another branch", "456789AB: Yet more fixes");
             localRepo.push(editHash3, repo.url(), "another");
 
@@ -487,10 +499,14 @@
             assertFalse(email.subject().contains("master"));
             assertTrue(email.body().contains("Changeset: " + editHash3.abbreviate()));
             assertTrue(email.body().contains("456789AB: Yet more fixes"));
             assertFalse(email.body().contains("Changeset: " + editHash2.abbreviate()));
             assertFalse(email.body().contains("3456789A: Even more fixes"));
+            assertTrue(email.hasHeader("X-Git-URL"));
+            assertEquals(repo.webUrl().toString(), email.headerValue("X-Git-URL"));
+            assertTrue(email.hasHeader("X-Git-Changeset"));
+            assertEquals(editHash3.hex(), email.headerValue("X-Git-Changeset"));
         }
     }
 
     @Test
     void testMailingListPROnly(TestInfo testInfo) throws IOException {
@@ -578,10 +594,14 @@
             assertTrue(email.body().contains("23456789: More fixes"));
             assertFalse(email.body().contains("Committer"));
             assertFalse(email.body().contains(masterHash.abbreviate()));
             assertTrue(email.hasHeader("extra1"));
             assertEquals("value1", email.headerValue("extra1"));
+            assertTrue(email.hasHeader("X-Git-URL"));
+            assertEquals(repo.webUrl().toString(), email.headerValue("X-Git-URL"));
+            assertTrue(email.hasHeader("X-Git-Changeset"));
+            assertEquals(editHash.hex(), email.headerValue("X-Git-Changeset"));
 
             // Now push the other one without a matching PR - PR_ONLY will not generate a mail
             localRepo.push(otherHash, repo.url(), "master");
             TestBotRunner.runPeriodicItems(notifyBot);
             assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofSeconds(1)));
