diff a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
--- a/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
+++ b/bots/notify/src/main/java/org/openjdk/skara/bots/notify/MailingListUpdater.java
@@ -212,10 +212,11 @@
                     "[Integrated] " + rfrConv.first().subject(), body)
                              .sender(sender)
                              .author(commitToAuthor(commit))
                              .recipient(recipient)
                              .headers(headers)
+                             .headers(commitHeaders(repository, commits))
                              .build();
 
             try {
                 list.post(email);
             } catch (RuntimeException e) {
@@ -244,19 +245,29 @@
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
                          .author(commitAddress)
                          .recipient(recipient)
                          .headers(headers)
+                         .headers(commitHeaders(repository, commits))
                          .build();
 
         try {
             list.post(email);
         } catch (RuntimeException e) {
             throw new NonRetriableException(e);
         }
     }
 
+    private Map<String, String> commitHeaders(HostedRepository repository, List<Commit> commits) {
+        var ret = new HashMap<String, String>();
+        ret.put("X-Git-URL", repository.webUrl().toString());
+        if (!commits.isEmpty()) {
+            ret.put("X-Git-Changeset", commits.get(0).hash().hex());
+        }
+        return ret;
+    }
+
     @Override
     public void handleCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {
         switch (mode) {
             case PR_ONLY:
                 filterAndSendPrCommits(repository, commits, branch);
@@ -300,11 +311,12 @@
 
         var subject = tagToSubject(repository, taggedCommit.hash(), tag.tag());
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
                          .recipient(recipient)
-                         .headers(headers);
+                         .headers(headers)
+                         .headers(commitHeaders(repository, commits));
 
         if (annotation != null) {
             email.author(annotationToAuthor(annotation));
         } else {
             email.author(commitToAuthor(taggedCommit));
@@ -332,11 +344,12 @@
 
         var subject = tagToSubject(repository, commit.hash(), tag);
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
                          .recipient(recipient)
-                         .headers(headers);
+                         .headers(headers)
+                         .headers(commitHeaders(repository, List.of(commit)));
 
         if (annotation != null) {
             email.author(annotationToAuthor(annotation));
         } else {
             email.author(commitToAuthor(commit));
@@ -396,10 +409,11 @@
         var email = Email.create(subject, writer.toString())
                          .sender(sender)
                          .author(finalAuthor)
                          .recipient(recipient)
                          .headers(headers)
+                         .headers(commitHeaders(repository, commits))
                          .build();
         try {
             list.post(email);
         } catch (RuntimeException e) {
             throw new NonRetriableException(e);
