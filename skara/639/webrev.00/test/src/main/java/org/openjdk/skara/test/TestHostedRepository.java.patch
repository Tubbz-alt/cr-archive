diff a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
@@ -38,17 +38,21 @@
 public class TestHostedRepository extends TestIssueProject implements HostedRepository {
     private final TestHost host;
     private final String projectName;
     private final Repository localRepository;
     private final Pattern pullRequestPattern;
+    private final Map<Hash, List<CommitComment>> commitComments;
+    private int nextCommitCommentId;
 
     public TestHostedRepository(TestHost host, String projectName, Repository localRepository) {
         super(host, projectName);
         this.host = host;
         this.projectName = projectName;
         this.localRepository = localRepository;
         pullRequestPattern = Pattern.compile(url().toString() + "/pr/" + "(\\d+)");
+        commitComments = new HashMap<Hash, List<CommitComment>>();
+        nextCommitCommentId = 0;
     }
 
     @Override
     public Forge forge() {
         return host;
@@ -197,9 +201,27 @@
         } catch (IOException e) {
             throw new RuntimeException(e);
         }
     }
 
+    @Override
+    public List<CommitComment> commitComments(Hash hash) {
+        if (!commitComments.containsKey(hash)) {
+            return List.of();
+        }
+        return commitComments.get(hash);
+    }
+
+    @Override
+    public void addCommitComment(Hash hash, String body) {
+        var id = nextCommitCommentId;
+        nextCommitCommentId += 1;
+        var createdAt = ZonedDateTime.now();
+
+        var comments = commitComments.putIfAbsent(hash, new ArrayList<CommitComment>());
+        comments.add(new CommitComment(hash, null, -1, -1, Integer.toString(id), body, host.currentUser(), createdAt, createdAt));
+    }
+
     Repository localRepository() {
         return localRepository;
     }
 }
