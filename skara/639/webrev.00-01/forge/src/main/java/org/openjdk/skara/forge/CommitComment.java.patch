diff a/forge/src/main/java/org/openjdk/skara/forge/CommitComment.java b/forge/src/main/java/org/openjdk/skara/forge/CommitComment.java
--- a/forge/src/main/java/org/openjdk/skara/forge/CommitComment.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/CommitComment.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -31,19 +31,17 @@
 import java.util.*;
 
 public class CommitComment extends Comment {
     private final Hash commit;
     private final Path path;
-    private final int position;
     private final int line;
 
-    public CommitComment(Hash commit, Path path, int position, int line, String id, String body, HostUser author, ZonedDateTime createdAt, ZonedDateTime updatedAt) {
+    public CommitComment(Hash commit, Path path, int line, String id, String body, HostUser author, ZonedDateTime createdAt, ZonedDateTime updatedAt) {
         super(id, body, author, createdAt, updatedAt);
 
         this.commit = commit;
         this.path = path;
-        this.position = position;
         this.line = line;
     }
 
     /**
      * Returns the hash of the commit.
@@ -57,17 +55,10 @@
      */
     public Optional<Path> path() {
         return Optional.ofNullable(path);
     }
 
-    /**
-     * Returns the line index in the diff.
-     */
-    public Optional<Integer> position() {
-        return position == -1 ? Optional.empty() : Optional.of(position);
-    }
-
     /**
      * Returns the line number in the file.
      */
     public Optional<Integer> line() {
         return line == -1 ? Optional.empty() : Optional.of(line);
@@ -90,14 +81,13 @@
             return false;
         }
         var other = (CommitComment) o;
         return Objects.equals(commit, other.commit) &&
                Objects.equals(path, other.path) &&
-               position == other.position &&
                line == other.line;
     }
 
     @Override
     public int hashCode() {
-        return Objects.hash(super.hashCode(), commit, path, position, line);
+        return Objects.hash(super.hashCode(), commit, path, line);
     }
 }
