diff a/forge/src/main/java/org/openjdk/skara/forge/CommitComment.java b/forge/src/main/java/org/openjdk/skara/forge/CommitComment.java
--- a/forge/src/main/java/org/openjdk/skara/forge/CommitComment.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/CommitComment.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -31,19 +31,17 @@
 import java.util.*;
 
 public class CommitComment extends Comment {
     private final Hash commit;
     private final Path path;
-    private final int position;
     private final int line;
 
-    public CommitComment(Hash commit, Path path, int position, int line, String id, String body, HostUser author, ZonedDateTime createdAt, ZonedDateTime updatedAt) {
+    public CommitComment(Hash commit, Path path, int line, String id, String body, HostUser author, ZonedDateTime createdAt, ZonedDateTime updatedAt) {
         super(id, body, author, createdAt, updatedAt);
 
         this.commit = commit;
         this.path = path;
-        this.position = position;
         this.line = line;
     }
 
     /**
      * Returns the hash of the commit.
@@ -57,17 +55,10 @@
      */
     public Optional<Path> path() {
         return Optional.ofNullable(path);
     }
 
-    /**
-     * Returns the line index in the diff.
-     */
-    public Optional<Integer> position() {
-        return position == -1 ? Optional.empty() : Optional.of(position);
-    }
-
     /**
      * Returns the line number in the file.
      */
     public Optional<Integer> line() {
         return line == -1 ? Optional.empty() : Optional.of(line);
@@ -90,14 +81,13 @@
             return false;
         }
         var other = (CommitComment) o;
         return Objects.equals(commit, other.commit) &&
                Objects.equals(path, other.path) &&
-               position == other.position &&
                line == other.line;
     }
 
     @Override
     public int hashCode() {
-        return Objects.hash(super.hashCode(), commit, path, position, line);
+        return Objects.hash(super.hashCode(), commit, path, line);
     }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
@@ -265,15 +265,13 @@
                       .execute()
                       .stream()
                       .map(JSONValue::asObject)
                       .map(o -> {
                            var line = o.get("line").isNull()? -1 : o.get("line").asInt();
-                           var position = o.get("position").isNull()? -1 : o.get("position").asInt();
                            var path = o.get("path").isNull()? null : Path.of(o.get("path").asString());
                            return new CommitComment(hash,
                                                     path,
-                                                    position,
                                                     line,
                                                     o.get("id").toString(),
                                                     o.get("body").asString(),
                                                     gitHubHost.parseUserField(o),
                                                     ZonedDateTime.parse(o.get("created_at").asString()),
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
@@ -297,19 +297,16 @@
                       .stream()
                       .map(JSONValue::asObject)
                       .map(o -> {
                            var line = o.get("line").isNull()? -1 : o.get("line").asInt();
                            var path = o.get("path").isNull()? null : Path.of(o.get("path").asString());
-                           // GitLab does not support line number in diff
-                           var position = -1;
                            // GitLab does not offer updated_at for commit comments
                            var createdAt = ZonedDateTime.parse(o.get("created_at").asString());
                            // GitLab does not offer an id for commit comments
                            var id = "";
                            return new CommitComment(hash,
                                                     path,
-                                                    position,
                                                     line,
                                                     id,
                                                     o.get("note").asString(),
                                                     gitLabHost.parseAuthorField(o),
                                                     createdAt,
diff a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
@@ -216,11 +216,11 @@
         var id = nextCommitCommentId;
         nextCommitCommentId += 1;
         var createdAt = ZonedDateTime.now();
 
         var comments = commitComments.putIfAbsent(hash, new ArrayList<CommitComment>());
-        comments.add(new CommitComment(hash, null, -1, -1, Integer.toString(id), body, host.currentUser(), createdAt, createdAt));
+        comments.add(new CommitComment(hash, null, -1, Integer.toString(id), body, host.currentUser(), createdAt, createdAt));
     }
 
     Repository localRepository() {
         return localRepository;
     }
