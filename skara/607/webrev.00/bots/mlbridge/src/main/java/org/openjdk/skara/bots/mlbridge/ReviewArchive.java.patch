diff a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
--- a/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
+++ b/bots/mlbridge/src/main/java/org/openjdk/skara/bots/mlbridge/ReviewArchive.java
@@ -68,10 +68,18 @@
                               .map(m -> m.group(1))
                               .map(Hash::new)
                               .findAny();
     }
 
+    private boolean hasLegacyIntegrationNotice(Hash hash) {
+        var legacyIntegrationPattern = Pattern.compile("Changeset: " + hash.abbreviate());
+        return ignoredComments.stream()
+                              .map(Comment::body)
+                              .map(legacyIntegrationPattern::matcher)
+                              .anyMatch(Matcher::find);
+    }
+
     private List<ArchiveItem> generateArchiveItems(List<Email> sentEmails, Repository localRepo, URI issueTracker, String issuePrefix, HostUserToEmailAuthor hostUserToEmailAuthor, HostUserToUserName hostUserToUserName, HostUserToRole hostUserToRole, WebrevStorage.WebrevGenerator webrevGenerator, WebrevNotification webrevNotification, String subjectPrefix) throws IOException {
         var generated = new ArrayList<ArchiveItem>();
         Hash lastBase = null;
         Hash lastHead = null;
         int revisionIndex = 0;
@@ -143,13 +151,15 @@
         if (pr.state() != Issue.State.OPEN) {
             var parent = generated.get(0);
             if (pr.labels().contains("integrated")) {
                 var hash = findIntegratedHash();
                 if (hash.isPresent()) {
-                    var commit = localRepo.lookup(hash.get());
-                    var reply = ArchiveItem.integratedNotice(pr, localRepo, commit.orElseThrow(), hostUserToEmailAuthor, parent, subjectPrefix, threadPrefix);
-                    generated.add(reply);
+                    if (!hasLegacyIntegrationNotice(hash.get())) {
+                        var commit = localRepo.lookup(hash.get());
+                        var reply = ArchiveItem.integratedNotice(pr, localRepo, commit.orElseThrow(), hostUserToEmailAuthor, parent, subjectPrefix, threadPrefix);
+                        generated.add(reply);
+                    }
                 } else {
                     throw new RuntimeException("PR " + pr.webUrl() + " has integrated label but no integration comment");
                 }
             } else if (localRepo.isAncestor(pr.headHash(), pr.targetHash())) {
                 var commit = localRepo.lookup(pr.headHash());
