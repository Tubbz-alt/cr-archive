diff a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
--- a/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
+++ b/bots/merge/src/main/java/org/openjdk/skara/bots/merge/MergeBot.java
@@ -189,38 +189,38 @@
         private final Branch fromBranch;
         private final Branch toBranch;
         private final Frequency frequency;
         private final String name;
         private final List<String> dependencies;
+        private final List<HostedRepository> prerequisites;
 
         Spec(HostedRepository fromRepo, Branch fromBranch, Branch toBranch) {
-            this(fromRepo, fromBranch, toBranch, null, null, List.of());
+            this(fromRepo, fromBranch, toBranch, null, null, List.of(), List.of());
         }
 
         Spec(HostedRepository fromRepo, Branch fromBranch, Branch toBranch, String name) {
-            this(fromRepo, fromBranch, toBranch, null, name, List.of());
-        }
-
-        Spec(HostedRepository fromRepo, Branch fromBranch, Branch toBranch, String name, List<String> dependencies) {
-            this(fromRepo, fromBranch, toBranch, null, name, dependencies);
+            this(fromRepo, fromBranch, toBranch, null, name, List.of(), List.of());
         }
 
         Spec(HostedRepository fromRepo, Branch fromBranch, Branch toBranch, Frequency frequency) {
-            this(fromRepo, fromBranch, toBranch, frequency, null, List.of());
-        }
-
-        Spec(HostedRepository fromRepo, Branch fromBranch, Branch toBranch, Frequency frequency, String name) {
-            this(fromRepo, fromBranch, toBranch, frequency, name, List.of());
+            this(fromRepo, fromBranch, toBranch, frequency, null, List.of(), List.of());
         }
 
-        Spec(HostedRepository fromRepo, Branch fromBranch, Branch toBranch, Frequency frequency, String name, List<String> dependencies) {
+        Spec(HostedRepository fromRepo,
+             Branch fromBranch,
+             Branch toBranch,
+             Frequency frequency,
+             String name,
+             List<String> dependencies,
+             List<HostedRepository> prerequisites) {
             this.fromRepo = fromRepo;
             this.fromBranch = fromBranch;
             this.toBranch = toBranch;
             this.frequency = frequency;
             this.name = name;
             this.dependencies = dependencies;
+            this.prerequisites = prerequisites;
         }
 
         HostedRepository fromRepo() {
             return fromRepo;
         }
@@ -242,10 +242,14 @@
         }
 
         List<String> dependencies() {
             return dependencies;
         }
+
+        List<HostedRepository> prerequisites() {
+            return prerequisites;
+        }
     }
 
     private static void deleteDirectory(Path dir) throws IOException {
         Files.walk(dir)
              .map(Path::toFile)
@@ -301,12 +305,13 @@
 
                 var targetName = Path.of(target.name()).getFileName();
                 var fromName = Path.of(fromRepo.name()).getFileName();
                 var fromDesc = targetName.equals(fromName) ? fromBranch.name() : fromName + ":" + fromBranch.name();
 
-                // Check if merge conflict pull request is present
                 var shouldMerge = true;
+
+                // Check if merge conflict pull request is present
                 var title = "Merge " + fromDesc;
                 var marker = "<!-- AUTOMATIC MERGE PR -->";
                 for (var pr : prs) {
                     if (pr.title().equals(title) &&
                         pr.targetRef().equals(toBranch.name()) &&
@@ -352,10 +357,11 @@
                             }
                         }
                     }
                 }
 
+                // Check if merge should happen at this time
                 if (spec.frequency().isPresent()) {
                     var now = clock.now();
                     var desc = toBranch.name() + "->" + fromRepo.name() + ":" + fromBranch.name();
                     var freq = spec.frequency().get();
                     if (freq.isHourly()) {
@@ -424,18 +430,39 @@
                             shouldMerge = false;
                         }
                     }
                 }
 
-                if (spec.dependencies().stream().anyMatch(unmerged::contains)) {
-                    var failed = spec.dependencies()
-                                     .stream()
-                                     .filter(unmerged::contains)
-                                     .collect(Collectors.toList());
-                    log.info("Will not merge because the following dependencies did not merge successfully: " +
-                             String.join(", ", failed));
-                    shouldMerge = false;
+                // Check if any prerequisite repository has a conflict pull request open
+                if (shouldMerge) {
+                    for (var prereq : spec.prerequisites()) {
+                        var openMergeConflictPRs = prereq.pullRequests()
+                                                         .stream()
+                                                         .filter(pr -> pr.title().startsWith("Merge "))
+                                                         .filter(pr -> pr.body().startsWith(marker))
+                                                         .map(PullRequest::id)
+                                                         .collect(Collectors.toList());
+                        if (!openMergeConflictPRs.isEmpty()) {
+                            log.info("Will not merge because the prerequisite " + prereq.name() +
+                                     " has open merge conflicts PRs: " +
+                                     String.join(", ", openMergeConflictPRs));
+                            shouldMerge = false;
+                        }
+                    }
+                }
+
+                // Check if any dependencies failed
+                if (shouldMerge) {
+                    if (spec.dependencies().stream().anyMatch(unmerged::contains)) {
+                        var failed = spec.dependencies()
+                                         .stream()
+                                         .filter(unmerged::contains)
+                                         .collect(Collectors.toList());
+                        log.info("Will not merge because the following dependencies did not merge successfully: " +
+                                 String.join(", ", failed));
+                        shouldMerge = false;
+                    }
                 }
 
                 if (!shouldMerge) {
                     log.info("Will not merge " + fromRepo.name() + ":" + fromBranch.name() + " to " + toBranch.name());
                     if (spec.name().isPresent()) {
