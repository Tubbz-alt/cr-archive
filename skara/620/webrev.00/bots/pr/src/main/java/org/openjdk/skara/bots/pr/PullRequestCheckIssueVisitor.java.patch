diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/PullRequestCheckIssueVisitor.java
@@ -30,14 +30,13 @@
 import java.util.*;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 
 class PullRequestCheckIssueVisitor implements IssueVisitor {
-    private final Set<String> messages = new HashSet<>();
     private final List<CheckAnnotation> annotations = new LinkedList<>();
     private final Set<Check> enabledChecks;
-    private final Set<Class<? extends Check>> failedChecks = new HashSet<>();
+    private final Map<Class<? extends Check>, String> failedChecks = new HashMap<>();
 
     private boolean readyForReview;
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
 
@@ -51,21 +50,34 @@
     PullRequestCheckIssueVisitor(Set<Check> enabledChecks) {
         this.enabledChecks = enabledChecks;
         readyForReview = true;
     }
 
-    List<String> getMessages() {
-        return new ArrayList<>(messages);
+    private void addFailureMessage(Check check, String message) {
+        failedChecks.put(check.getClass(), message);
+    }
+
+    List<String> messages() {
+        return new ArrayList<>(failedChecks.values());
+    }
+
+    List<String> hiddenMessages() {
+        return failedChecks.entrySet().stream()
+                           .filter(entry -> !displayedChecks.contains(entry.getKey()))
+                           .map(Map.Entry::getValue)
+                           .sorted()
+                           .collect(Collectors.toList());
     }
 
     Map<String, Boolean> getChecks() {
         return enabledChecks.stream()
                             .filter(check -> displayedChecks.contains(check.getClass()))
                             .collect(Collectors.toMap(Check::description,
-                                                      check -> !failedChecks.contains(check.getClass())));
+                                                      check -> !failedChecks.containsKey(check.getClass())));
     }
 
+
     List<CheckAnnotation> getAnnotations() { return annotations; }
 
     boolean isReadyForReview() {
         return readyForReview;
     }
@@ -79,12 +91,11 @@
                      .collect(Collectors.toList());
 
         var output = new StringBuilder();
         output.append("Issue id ").append(id).append(" is already used in these commits:\n");
         other.forEach(h -> output.append(" * ").append(h).append("\n"));
-        messages.add(output.toString());
-        failedChecks.add(e.check().getClass());
+        addFailureMessage(e.check(), output.toString());
         readyForReview = false;
     }
 
     @Override
     public void visit(TagIssue e) {
@@ -97,19 +108,17 @@
     }
 
     @Override
     public void visit(SelfReviewIssue e)
     {
-        messages.add("Self-reviews are not allowed");
-        failedChecks.add(e.check().getClass());
+        addFailureMessage(e.check(), "Self-reviews are not allowed");
         readyForReview = false;
     }
 
     @Override
     public void visit(TooFewReviewersIssue e) {
-        messages.add(String.format("Too few reviewers with at least role %s found (have %d, need at least %d)", e.role(), e.numActual(), e.numRequired()));
-        failedChecks.add(e.check().getClass());
+        addFailureMessage(e.check(), String.format("Too few reviewers with at least role %s found (have %d, need at least %d)", e.role(), e.numActual(), e.numRequired()));
     }
 
     @Override
     public void visit(InvalidReviewersIssue e) {
         var invalid = String.join(", ", e.invalid());
@@ -117,12 +126,11 @@
     }
 
     @Override
     public void visit(MergeMessageIssue e) {
         var message = String.join("\n", e.commit().message());
-        messages.add("Merge commit message is not " + e.expected() + ", but: " + message);
-        failedChecks.add(e.check().getClass());
+        addFailureMessage(e.check(), "Merge commit message is not " + e.expected() + ", but: " + message);
     }
 
     @Override
     public void visit(HgTagCommitIssue e) {
         throw new IllegalStateException("Hg tag commit issue - should not happen");
@@ -179,12 +187,11 @@
         }
 
         var annotation = annotationBuilder.title("Whitespace error").build();
         annotations.add(annotation);
 
-        messages.add("Whitespace errors");
-        failedChecks.add(e.check().getClass());
+        addFailureMessage(e.check(), "Whitespace errors");
         readyForReview = false;
     }
 
     @Override
     public void visit(MessageIssue issue) {
@@ -198,27 +205,24 @@
         throw new IllegalStateException("Commit message contains bad whitespace: " + message);
     }
 
     @Override
     public void visit(IssuesIssue issue) {
-        messages.add("The commit message does not reference any issue. To add an issue reference to this PR, " +
+        addFailureMessage(issue.check(), "The commit message does not reference any issue. To add an issue reference to this PR, " +
                 "edit the title to be of the format `issue number`: `message`.");
-        failedChecks.add(issue.check().getClass());
         readyForReview = false;
     }
 
     @Override
     public void visit(ExecutableIssue issue) {
-        messages.add(String.format("Executable files are not allowed (file: %s)", issue.path()));
-        failedChecks.add(issue.check().getClass());
+        addFailureMessage(issue.check(), String.format("Executable files are not allowed (file: %s)", issue.path()));
         readyForReview = false;
     }
 
     @Override
     public void visit(SymlinkIssue issue) {
-        messages.add(String.format("Symbolic links are not allowed (file: %s)", issue.path()));
-        failedChecks.add(issue.check().getClass());
+        addFailureMessage(issue.check(), String.format("Symbolic links are not allowed (file: %s)", issue.path()));
         readyForReview = false;
     }
 
     @Override
     public void visit(BlacklistIssue issue) {
@@ -230,10 +234,9 @@
         log.fine("ignored: binary file");
     }
 
     @Override
     public void visit(ProblemListsIssue issue) {
-        failedChecks.add(issue.check().getClass());
-        messages.add(issue.issue() + " is used in problem lists: " + issue.files());
+        addFailureMessage(issue.check(), issue.issue() + " is used in problem lists: " + issue.files());
         readyForReview = false;
     }
 }
