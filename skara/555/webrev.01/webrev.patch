diff a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
--- a/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
+++ b/bots/pr/src/main/java/org/openjdk/skara/bots/pr/CheckRun.java
@@ -49,10 +49,11 @@
 
     private final Logger log = Logger.getLogger("org.openjdk.skara.bots.pr");
     private final String progressMarker = "<!-- Anything below this marker will be automatically updated, please do not edit manually! -->";
     private final String mergeReadyMarker = "<!-- PullRequestBot merge is ready comment -->";
     private final String outdatedHelpMarker = "<!-- PullRequestBot outdated help comment -->";
+    private final String sourceBranchWarningMarker = "<!-- PullRequestBot source branch warning comment -->";
     private final Pattern mergeSourceFullPattern = Pattern.compile("^Merge ([-/\\w]+):([-\\w]+)$");
     private final Pattern mergeSourceBranchOnlyPattern = Pattern.compile("^Merge ([-\\w]+)$");
     private final Set<String> newLabels;
 
     private CheckRun(CheckWorkItem workItem, PullRequest pr, PullRequestInstance prInstance, List<Comment> comments,
@@ -81,17 +82,18 @@
         var matcher = workItem.bot.allowedTargetBranches().matcher(pr.targetRef());
         return matcher.matches();
     }
 
     private List<String> allowedTargetBranches() {
-        var remoteBranches = prInstance.remoteBranches().stream()
-                                       .map(Reference::name)
-                                       .map(name -> workItem.bot.allowedTargetBranches().matcher(name))
-                                       .filter(Matcher::matches)
-                                       .map(Matcher::group)
-                                       .collect(Collectors.toList());
-        return remoteBranches;
+        return pr.repository()
+                 .branches()
+                 .stream()
+                 .map(HostedBranch::name)
+                 .map(name -> workItem.bot.allowedTargetBranches().matcher(name))
+                 .filter(Matcher::matches)
+                 .map(Matcher::group)
+                 .collect(Collectors.toList());
     }
 
     // For unknown contributors, check that all commits have the same name and email
     private boolean checkCommitAuthor(List<Commit> commits) throws IOException {
         var author = censusInstance.namespace().get(pr.author().id());
@@ -558,10 +560,41 @@
         } else {
             existing.ifPresent(comment -> pr.updateComment(comment.id(), getMergeNoLongerReadyComment()));
         }
     }
 
+    private void addSourceBranchWarningComment(List<Comment> comments) {
+        var existing = findComment(comments, sourceBranchWarningMarker);
+        if (existing.isPresent()) {
+            // Only add the comment once per PR
+            return;
+        }
+        var branch = pr.sourceRef();
+        var message = ":warning: @" + pr.author().userName() + " " +
+            "a branch with the same name as the source branch for this pull request (`" + branch + "`) " +
+            "is present in the [target repository](" + pr.repository().nonTransformedWebUrl() + "). " +
+            "If you eventually integrate this pull request then the branch `" + branch + "` " +
+            "in your [personal fork](" + pr.sourceRepository().nonTransformedWebUrl() + ") will diverge once you sync " +
+            "your personal fork with the upstream repository.\n" +
+            "\n" +
+            "To avoid this situation, create a new branch for your changes and reset the `" + branch + "` branch. " +
+            "You can do this by running the following commands in a local repository for your personal fork. " +
+            "_Note_: you do *not* have to name the new branch `NEW-BRANCH-NAME`." +
+            "\n" +
+            "```" +
+            "$ git checkout " + branch + "\n" +
+            "$ git checkout -b NEW-BRANCH-NAME\n" +
+            "$ git branch -f " + branch + " " + prInstance.baseHash().hex() + "\n" +
+            "$ git push -f origin " + branch + "\n" +
+            "```\n" +
+            "\n" +
+            "Then proceed to create a new pull request with `NEW-BRANCH-NAME` as the source branch and " +
+            "close this one.\n" +
+            sourceBranchWarningMarker;
+        pr.addComment(message);
+    }
+
     private void addOutdatedComment(List<Comment> comments) {
         var existing = findComment(comments, outdatedHelpMarker);
         if (existing.isPresent()) {
             // Only add the comment once per PR
             return;
@@ -645,10 +678,15 @@
                 newLabels.add("merge-conflict");
             } else {
                 newLabels.remove("merge-conflict");
             }
 
+            var branchNames = pr.repository().branches().stream().map(HostedBranch::name).collect(Collectors.toSet());
+            if (!pr.repository().url().equals(pr.sourceRepository().url()) && branchNames.contains(pr.sourceRef())) {
+                addSourceBranchWarningComment(comments);
+            }
+
             // Ensure that the ready for sponsor label is up to date
             newLabels.remove("sponsor");
             var readyHash = ReadyForSponsorTracker.latestReadyForSponsor(pr.repository().forge().currentUser(), comments);
             if (readyHash.isPresent() && readyForIntegration) {
                 var acceptedHash = readyHash.get();
diff a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java
--- a/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java
+++ b/bots/tester/src/test/java/org/openjdk/skara/bots/tester/InMemoryHostedRepository.java
@@ -138,6 +138,11 @@
 
     @Override
     public List<PullRequest> findPullRequestsWithComment(String author, String body) {
         return null;
     }
+
+    @Override
+    public List<HostedBranch> branches() {
+        return List.of();
+    }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/HostedBranch.java b/forge/src/main/java/org/openjdk/skara/forge/HostedBranch.java
--- /dev/null
+++ b/forge/src/main/java/org/openjdk/skara/forge/HostedBranch.java
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package org.openjdk.skara.forge;
+
+import org.openjdk.skara.vcs.Hash;
+
+import java.util.Objects;
+
+public class HostedBranch {
+    private final String name;
+    private final Hash hash;
+
+    public HostedBranch(String name, Hash hash) {
+        this.name = name;
+        this.hash = hash;
+    }
+
+    public String name() {
+        return name;
+    }
+
+    public Hash hash() {
+        return hash;
+    }
+
+    @Override
+    public String toString() {
+        return name + "@" + hash.hex();
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(name, hash);
+    }
+
+    @Override
+    public boolean equals(Object other) {
+        if (!(other instanceof HostedBranch)) {
+            return false;
+        }
+
+        var o = (HostedBranch) other;
+        return Objects.equals(name, o.name) && Objects.equals(hash, o.hash);
+    }
+}
diff a/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java b/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/HostedRepository.java
@@ -63,10 +63,11 @@
     String namespace();
     Optional<WebHook> parseWebHook(JSONValue body);
     HostedRepository fork();
     long id();
     Hash branchHash(String ref);
+    List<HostedBranch> branches();
 
     default PullRequest createPullRequest(HostedRepository target,
                                           String targetRef,
                                           String sourceRef,
                                           String title,
diff a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/github/GitHubRepository.java
@@ -240,6 +240,15 @@
     @Override
     public Hash branchHash(String ref) {
         var branch = request.get("branches/" + ref).execute();
         return new Hash(branch.get("commit").get("sha").asString());
     }
+
+    @Override
+    public List<HostedBranch> branches() {
+        var branches = request.get("branches").execute();
+        return branches.stream()
+                       .map(b -> new HostedBranch(b.get("name").asString(),
+                                                  new Hash(b.get("commit").get("sha").asString())))
+                       .collect(Collectors.toList());
+    }
 }
diff a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
--- a/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
+++ b/forge/src/main/java/org/openjdk/skara/forge/gitlab/GitLabRepository.java
@@ -262,6 +262,15 @@
     @Override
     public Hash branchHash(String ref) {
         var branch = request.get("repository/branches/" + ref).execute();
         return new Hash(branch.get("commit").get("id").asString());
     }
+
+    @Override
+    public List<HostedBranch> branches() {
+        var branches = request.get("branches").execute();
+        return branches.stream()
+                       .map(b -> new HostedBranch(b.get("name").asString(),
+                                                  new Hash(b.get("commit").get("id").asString())))
+                       .collect(Collectors.toList());
+    }
 }
diff a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
--- a/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
+++ b/test/src/main/java/org/openjdk/skara/test/TestHostedRepository.java
@@ -183,9 +183,22 @@
         } catch (IOException e) {
             throw new RuntimeException(e);
         }
     }
 
+    @Override
+    public List<HostedBranch> branches() {
+        try {
+            var result = new ArrayList<HostedBranch>();
+            for (var b : localRepository.branches()) {
+                result.add(new HostedBranch(b.name(), localRepository.resolve(b).orElseThrow()));
+            }
+            return result;
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
     Repository localRepository() {
         return localRepository;
     }
 }
