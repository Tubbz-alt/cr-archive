diff a/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java b/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java
@@ -26,10 +26,11 @@
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.version.Version;
 
 import java.io.*;
 import java.nio.file.*;
+import java.net.URI;
 import java.util.*;
 import java.util.function.Supplier;
 import java.util.logging.Level;
 
 public class GitPublish {
@@ -63,10 +64,20 @@
             System.out.flush();
         }
         return err;
     }
 
+    private static String getOption(String name, Arguments arguments, ReadOnlyRepository repo) throws IOException {
+        if (arguments.contains(name)) {
+            return arguments.get(name).asString();
+        }
+
+        var lines = repo.config("sync." + name);
+        return lines.size() == 1 ? lines.get(0) : null;
+    }
+
+
     public static void main(String[] args) throws IOException, InterruptedException {
         var flags = List.of(
             Switch.shortcut("q")
                   .fullname("quiet")
                   .helptext("Silence all output")
@@ -106,10 +117,31 @@
 
         var cwd = Path.of("").toAbsolutePath();
         var repo = Repository.get(cwd).or(die("error: no repository found at " + cwd.toString())).get();
         var remote = arguments.at(0).orString("origin");
 
+        var pushPath = repo.pushPath(remote);
+        if (pushPath.startsWith("http://") || pushPath.startsWith("https://")) {
+            var uri = URI.create(pushPath);
+            var token = System.getenv("GIT_TOKEN");
+            var username = getOption("username", arguments, repo);
+            var credentials = GitCredentials.fill(uri.getHost(),
+                                                  uri.getPath(),
+                                                  username,
+                                                  token,
+                                                  uri.getScheme());
+            if (credentials.password() == null) {
+                die("error: no personal access token found, use git-credentials or the environment variable GIT_TOKEN");
+            }
+            if (credentials.username() == null) {
+                die("error: no username for " + uri.getHost() + " found, use git-credentials or the flag --username");
+            }
+            if (token != null) {
+                GitCredentials.approve(credentials);
+            }
+        }
+
         var currentBranch = repo.currentBranch();
         if (currentBranch.isEmpty()) {
             System.err.println("error: the repository is in a detached HEAD state");
             System.exit(1);
         }
diff a/cli/src/main/java/org/openjdk/skara/cli/GitSync.java b/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitSync.java
@@ -60,10 +60,19 @@
         pb.directory(repo.root().toFile());
         pb.inheritIO();
         return pb.start().waitFor();
     }
 
+    private static String getOption(String name, Arguments arguments, ReadOnlyRepository repo) throws IOException {
+        if (arguments.contains(name)) {
+            return arguments.get(name).asString();
+        }
+
+        var lines = repo.config("sync." + name);
+        return lines.size() == 1 ? lines.get(0) : null;
+    }
+
     static void sync(Repository repo, String[] args) throws IOException, InterruptedException {
         var flags = List.of(
             Option.shortcut("")
                   .fullname("from")
                   .describe("REMOTE")
@@ -77,22 +86,23 @@
             Option.shortcut("")
                   .fullname("branches")
                   .describe("BRANCHES")
                   .helptext("Comma separated list of branches to sync")
                   .optional(),
+            Option.shortcut("u")
+                  .fullname("username")
+                  .describe("NAME")
+                  .helptext("Username on forge")
+                  .optional(),
             Switch.shortcut("")
                   .fullname("pull")
                   .helptext("Pull current branch from origin after successful sync")
                   .optional(),
             Switch.shortcut("ff")
                   .fullname("fast-forward")
                   .helptext("Fast forward all local branches where possible")
                   .optional(),
-            Switch.shortcut("m")
-                  .fullname("mercurial")
-                  .helptext("Force use of mercurial")
-                  .optional(),
             Switch.shortcut("")
                   .fullname("verbose")
                   .helptext("Turn on verbose output")
                   .optional(),
             Switch.shortcut("")
@@ -181,10 +191,33 @@
         }
 
         var toPushPath = remotes.contains(to) ?
             Remote.toURI(repo.pullPath(to)) : URI.create(to);
 
+        var toScheme = toPushPath.getScheme();
+        if (toScheme.equals("https") || toScheme.equals("http")) {
+            var token = System.getenv("GIT_TOKEN");
+            var username = getOption("username", arguments, repo);
+            var credentials = GitCredentials.fill(toPushPath.getHost(),
+                                                  toPushPath.getPath(),
+                                                  username,
+                                                  token,
+                                                  toScheme);
+            if (credentials.password() == null) {
+                die("error: no personal access token found, use git-credentials or the environment variable GIT_TOKEN");
+            }
+            if (credentials.username() == null) {
+                die("error: no username for " + toPushPath.getHost() + " found, use git-credentials or the flag --username");
+            }
+            if (token != null) {
+                toPushPath = URI.create(toScheme + "://" + credentials.username() + ":" + credentials.password() + "@" +
+                                        toPushPath.getHost() + toPushPath.getPath());
+            } else {
+                GitCredentials.approve(credentials);
+            }
+        }
+
         var branches = new HashSet<String>();
         if (arguments.contains("branches")) {
             var requested = arguments.get("branches").asString().split(",");
             for (var branch : requested) {
                 branches.add(branch.trim());
diff a/cli/src/main/java/org/openjdk/skara/cli/pr/Utils.java b/cli/src/main/java/org/openjdk/skara/cli/pr/Utils.java
--- a/cli/src/main/java/org/openjdk/skara/cli/pr/Utils.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/pr/Utils.java
@@ -462,8 +462,11 @@
                     System.err.println("");
                 }
             }
             exit("error: failed to connect to host: " + forgeURI);
         }
+        if (credentials != null) {
+            GitCredentials.approve(credentials);
+        }
         return forge.get();
     }
 }
