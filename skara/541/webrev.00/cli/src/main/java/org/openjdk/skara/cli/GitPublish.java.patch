diff a/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java b/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java
--- a/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java
+++ b/cli/src/main/java/org/openjdk/skara/cli/GitPublish.java
@@ -26,10 +26,11 @@
 import org.openjdk.skara.vcs.*;
 import org.openjdk.skara.version.Version;
 
 import java.io.*;
 import java.nio.file.*;
+import java.net.URI;
 import java.util.*;
 import java.util.function.Supplier;
 import java.util.logging.Level;
 
 public class GitPublish {
@@ -63,10 +64,20 @@
             System.out.flush();
         }
         return err;
     }
 
+    private static String getOption(String name, Arguments arguments, ReadOnlyRepository repo) throws IOException {
+        if (arguments.contains(name)) {
+            return arguments.get(name).asString();
+        }
+
+        var lines = repo.config("sync." + name);
+        return lines.size() == 1 ? lines.get(0) : null;
+    }
+
+
     public static void main(String[] args) throws IOException, InterruptedException {
         var flags = List.of(
             Switch.shortcut("q")
                   .fullname("quiet")
                   .helptext("Silence all output")
@@ -106,10 +117,31 @@
 
         var cwd = Path.of("").toAbsolutePath();
         var repo = Repository.get(cwd).or(die("error: no repository found at " + cwd.toString())).get();
         var remote = arguments.at(0).orString("origin");
 
+        var pushPath = repo.pushPath(remote);
+        if (pushPath.startsWith("http://") || pushPath.startsWith("https://")) {
+            var uri = URI.create(pushPath);
+            var token = System.getenv("GIT_TOKEN");
+            var username = getOption("username", arguments, repo);
+            var credentials = GitCredentials.fill(uri.getHost(),
+                                                  uri.getPath(),
+                                                  username,
+                                                  token,
+                                                  uri.getScheme());
+            if (credentials.password() == null) {
+                die("error: no personal access token found, use git-credentials or the environment variable GIT_TOKEN");
+            }
+            if (credentials.username() == null) {
+                die("error: no username for " + uri.getHost() + " found, use git-credentials or the flag --username");
+            }
+            if (token != null) {
+                GitCredentials.approve(credentials);
+            }
+        }
+
         var currentBranch = repo.currentBranch();
         if (currentBranch.isEmpty()) {
             System.err.println("error: the repository is in a detached HEAD state");
             System.exit(1);
         }
