diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
@@ -326,20 +326,31 @@
         return;
     }
 
     if (mtlc != NULL) {
         [mtlc.encoderManager endEncoder];
+
+        if (op == MTL_OP_RESET_PAINT || op == MTL_OP_SYNC) {
+            MTLCommandBufferWrapper *cbwrapper = [mtlc pullCommandBufferWrapper];
+            id <MTLCommandBuffer> commandbuf = [cbwrapper getCommandBuffer];
+            [commandbuf addCompletedHandler:^(id <MTLCommandBuffer> commandbuf) {
+                [cbwrapper release];
+            }];
+            [commandbuf commit];
+            if (op == MTL_OP_SYNC) {
+                [commandbuf waitUntilCompleted];
+            }
+        }
     }
     mtlPreviousOp = op;
 }
 
 JNIEXPORT void JNICALL
 Java_sun_java2d_metal_MTLRenderQueue_flushBuffer
     (JNIEnv *env, jobject mtlrq,
      jlong buf, jint limit)
 {
-    jboolean sync = JNI_FALSE;
     unsigned char *b, *end;
 
     J2dTraceLn1(J2D_TRACE_INFO,
                 "MTLRenderQueue_flushBuffer: limit=%d", limit);
 
@@ -801,16 +812,11 @@
             //    dstOps = NULL;
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SYNC:
             {
-                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
-                sync = JNI_TRUE;
-
-                // TODO
-                J2dTraceLn(J2D_TRACE_ERROR, "MTLRenderQueue_SYNC -- :TODO");
-
+                CHECK_PREVIOUS_OP(MTL_OP_SYNC);
             }
             break;
 
         // multibuffering ops
         case sun_java2d_pipe_BufferedOpCodes_SWAP_BUFFERS:
@@ -826,11 +832,11 @@
             break;
 
         // paint-related ops
         case sun_java2d_pipe_BufferedOpCodes_RESET_PAINT:
             {
-              CHECK_PREVIOUS_OP(MTL_OP_OTHER);
+              CHECK_PREVIOUS_OP(MTL_OP_RESET_PAINT);
               [mtlc resetPaint];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_COLOR:
             {
@@ -1013,13 +1019,10 @@
         id<MTLCommandBuffer> commandbuf = [cbwrapper getCommandBuffer];
         [commandbuf addCompletedHandler:^(id <MTLCommandBuffer> commandbuf) {
             [cbwrapper release];
         }];
         [commandbuf commit];
-        if (sync) {
-            [commandbuf waitUntilCompleted];
-        }
         BMTLSDOps *dstOps = MTLRenderQueue_GetCurrentDestination();
         if (dstOps != NULL) {
             MTLSDOps *dstMTLOps = (MTLSDOps *)dstOps->privOps;
             MTLLayer *layer = (MTLLayer*)dstMTLOps->layer;
             if (layer != NULL) {
