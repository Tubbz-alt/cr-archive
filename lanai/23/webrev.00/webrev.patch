diff a/src/java.desktop/macosx/native/libawt_lwawt/awt/common.h b/src/java.desktop/macosx/native/libawt_lwawt/awt/common.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/awt/common.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/awt/common.h
@@ -68,10 +68,11 @@
 struct TxtFrameUniforms {
     vector_float4 color;
     int mode;
     int isSrcOpaque;
     int isDstOpaque;
+    float extraAlpha;
 };
 
 struct AnchorData
 {
     vector_float3 xParams;
diff a/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal b/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
--- a/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
+++ b/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
@@ -142,11 +142,14 @@
     // TODO: consider to make shaders without IF-conditions
     if (uniforms.mode) {
         float4 c = mix(pixelColor, uniforms.color, srcA);
         return half4(c.r, c.g, c.b , c.a);
     }
-    return half4(pixelColor.r, pixelColor.g, pixelColor.b, srcA);
+
+    return half4(pixelColor.r,
+                 pixelColor.g,
+                 pixelColor.b, srcA*uniforms.extraAlpha);
 }
 
 fragment half4 frag_txt_tp(TxtShaderInOut vert [[stage_in]],
                        texture2d<float, access::sample> renderTexture [[texture(0)]],
                        texture2d<float, access::sample> paintTexture [[texture(1)]])
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m
@@ -212,18 +212,18 @@
                 J2dTraceLn1(J2D_TRACE_ERROR, "replaceTextureRegion: can't alloc buffer for raster conversion, size=%d", bufferSize);
                 bufferSize = 0;
                 return nil;
             }
             vImage_Buffer srcBuf;
-            srcBuf.height = dw;
-            srcBuf.width = dh;
+            srcBuf.height = dh;
+            srcBuf.width = dw;
             srcBuf.rowBytes = srcInfo->scanStride;
             srcBuf.data = srcInfo->rasBase;
 
             vImage_Buffer destBuf;
-            destBuf.height = dw;
-            destBuf.width = dh;
+            destBuf.height = dh;
+            destBuf.width = dw;
             destBuf.rowBytes = dw*4;
             destBuf.data = buffer;
 
             vImagePermuteChannels_ARGB8888(&srcBuf, &destBuf, rfi->permuteMap, kvImageNoFlags);
             raster = buffer;
@@ -635,12 +635,168 @@
 MTLBlitLoops_SurfaceToSwBlit(JNIEnv *env, MTLContext *mtlc,
                              jlong pSrcOps, jlong pDstOps, jint dsttype,
                              jint srcx, jint srcy, jint dstx, jint dsty,
                              jint width, jint height)
 {
-    //TODO
-    J2dTraceLn(J2D_TRACE_ERROR, "MTLBlitLoops_SurfaceToSwBlit -- :TODO");
+    J2dTraceLn6(J2D_TRACE_VERBOSE, "MTLBlitLoops_SurfaceToSwBlit: sx=%d sy=%d w=%d h=%d dx=%d dy=%d", srcx, srcy, width, height, dstx, dsty);
+
+    BMTLSDOps *srcOps = (BMTLSDOps *)jlong_to_ptr(pSrcOps);
+    SurfaceDataOps *dstOps = (SurfaceDataOps *)jlong_to_ptr(pDstOps);
+    SurfaceDataRasInfo srcInfo, dstInfo;
+
+    if (dsttype < 0 || dsttype >= sizeof(RasterFormatInfos)/ sizeof(MTLRasterFormatInfo)) {
+        J2dTraceLn1(J2D_TRACE_ERROR, "MTLBlitLoops_SurfaceToSwBlit: destination pixel format %d isn't supported", dsttype);
+        return;
+    }
+
+    if (width <= 0 || height <= 0) {
+        J2dTraceLn(J2D_TRACE_ERROR, "MTLBlitLoops_SurfaceToSwBlit: dimensions are non-positive");
+        return;
+    }
+
+    RETURN_IF_NULL(srcOps);
+    RETURN_IF_NULL(dstOps);
+    RETURN_IF_NULL(mtlc);
+
+    srcInfo.bounds.x1 = srcx;
+    srcInfo.bounds.y1 = srcy;
+    srcInfo.bounds.x2 = srcx + width;
+    srcInfo.bounds.y2 = srcy + height;
+    dstInfo.bounds.x1 = dstx;
+    dstInfo.bounds.y1 = dsty;
+    dstInfo.bounds.x2 = dstx + width;
+    dstInfo.bounds.y2 = dsty + height;
+
+    if (dstOps->Lock(env, dstOps, &dstInfo, SD_LOCK_WRITE) != SD_SUCCESS) {
+        J2dTraceLn(J2D_TRACE_WARNING,"MTLBlitLoops_SurfaceToSwBlit: could not acquire dst lock");
+        return;
+    }
+
+    SurfaceData_IntersectBoundsXYXY(&srcInfo.bounds,
+                                    0, 0, srcOps->width, srcOps->height);
+    SurfaceData_IntersectBlitBounds(&dstInfo.bounds, &srcInfo.bounds,
+                                    srcx - dstx, srcy - dsty);
+
+    if (srcInfo.bounds.x2 > srcInfo.bounds.x1 &&
+        srcInfo.bounds.y2 > srcInfo.bounds.y1)
+    {
+        dstOps->GetRasInfo(env, dstOps, &dstInfo);
+        if (dstInfo.rasBase) {
+            void *pDst = dstInfo.rasBase;
+
+            srcx = srcInfo.bounds.x1;
+            srcy = srcInfo.bounds.y1;
+            dstx = dstInfo.bounds.x1;
+            dsty = dstInfo.bounds.y1;
+            width = srcInfo.bounds.x2 - srcInfo.bounds.x1;
+            height = srcInfo.bounds.y2 - srcInfo.bounds.y1;
+
+            pDst = PtrAddBytes(pDst, dstx * dstInfo.pixelStride);
+            pDst = PtrPixelsRow(pDst, dsty, dstInfo.scanStride);
+
+            // this accounts for lower-left origin of the source region
+            srcx = srcOps->xOffset + srcx;
+            srcy = srcOps->yOffset + srcOps->height - srcy - height;
+            const int srcLength = width * height * 4; // NOTE: assume that src format is MTLPixelFormatBGRA8Unorm
+
+#ifdef DEBUG
+            void *pDstEnd = dstInfo.rasBase + (height - 1)*dstInfo.scanStride + width*dstInfo.pixelStride;
+            if (pDst + srcLength > pDstEnd) {
+                J2dTraceLn6(J2D_TRACE_ERROR, "MTLBlitLoops_SurfaceToSwBlit: length mismatch: dstx=%d, dsty=%d, w=%d, h=%d, pixStride=%d, scanStride=%d",
+                        dstx, dsty, width, height, dstInfo.pixelStride, dstInfo.scanStride);
+                return;
+            }
+#endif //DEBUG
+
+            // Create MTLBuffer (or use static)
+            MTLRasterFormatInfo rfi = RasterFormatInfos[dsttype];
+            const jboolean directCopy = dsttype == 0;
+
+            id<MTLBuffer> mtlbuf;
+#ifdef USE_STATIC_BUFFER
+            if (directCopy) {
+                // NOTE: theoretically we can use newBufferWithBytesNoCopy, but pDst must be allocated with special API
+                // mtlbuf = [mtlc.device
+                //          newBufferWithBytesNoCopy:pDst
+                //                            length:(NSUInteger) srcLength
+                //                           options:MTLResourceCPUCacheModeDefaultCache
+                //                       deallocator:nil];
+                //
+                // see https://developer.apple.com/documentation/metal/mtldevice/1433382-newbufferwithbytesnocopy?language=objc
+                //
+                // The storage allocation of the returned new MTLBuffer object is the same as the pointer input value.
+                // The existing memory allocation must be covered by a single VM region, typically allocated with vm_allocate or mmap.
+                // Memory allocated by malloc is specifically disallowed.
+            }
+
+            static id<MTLBuffer> mtlIntermediateBuffer = nil; // need to reimplement with MTLBufferManager
+            if (mtlIntermediateBuffer == nil || mtlIntermediateBuffer.length < srcLength) {
+                if (mtlIntermediateBuffer != nil) {
+                    [mtlIntermediateBuffer release];
+                }
+                mtlIntermediateBuffer = [mtlc.device newBufferWithLength:srcLength options:MTLResourceCPUCacheModeDefaultCache];
+            }
+            mtlbuf = mtlIntermediateBuffer;
+#else // USE_STATIC_BUFFER
+            mtlbuf = [mtlc.device newBufferWithLength:width*height*4 options:MTLResourceStorageModeShared];
+#endif // USE_STATIC_BUFFER
+
+            // Read from surface into MTLBuffer
+            // NOTE: using of separate blitCommandBuffer can produce errors (draw into surface (with general cmd-buf)
+            // can be unfinished when reading raster from blit cmd-buf).
+            // Consider to use [mtlc.encoderManager createBlitEncoder] and [mtlc commitCommandBuffer:JNI_TRUE];
+            J2dTraceLn1(J2D_TRACE_VERBOSE, "MTLBlitLoops_SurfaceToSwBlit: source texture %p", srcOps->pTexture);
+
+            id<MTLCommandBuffer> cb = [mtlc createBlitCommandBuffer];
+            id<MTLBlitCommandEncoder> blitEncoder = [cb blitCommandEncoder];
+            [blitEncoder synchronizeTexture:srcOps->pTexture slice:0 level:0];
+            [blitEncoder copyFromTexture:srcOps->pTexture
+                            sourceSlice:0
+                            sourceLevel:0
+                           sourceOrigin:MTLOriginMake(srcx, srcy, 0)
+                             sourceSize:MTLSizeMake(width, height, 1)
+                               toBuffer:mtlbuf
+                      destinationOffset:0 /*offset already taken in: pDst = PtrAddBytes(pDst, dstx * dstInfo.pixelStride)*/
+                 destinationBytesPerRow:width*4
+               destinationBytesPerImage:width * height*4];
+            [blitEncoder endEncoding];
+
+            // Commit and wait for reading complete
+            [cb commit];
+            [cb waitUntilCompleted];
+
+            // Perform conversion if necessary
+            if (directCopy) {
+                memcpy(pDst, mtlbuf.contents, srcLength);
+            } else {
+                J2dTraceLn6(J2D_TRACE_VERBOSE,"MTLBlitLoops_SurfaceToSwBlit: dsttype=%d, raster conversion will be performed, dest rfi: %d, %d, %d, %d, hasA=%d",
+                            dsttype, rfi.permuteMap[0], rfi.permuteMap[1], rfi.permuteMap[2], rfi.permuteMap[3], rfi.hasAlpha);
+
+                // perform raster conversion: mtlIntermediateBuffer(8888) -> pDst(rfi)
+                // invoked only from rq-thread, so use static buffers
+                // but it's better to use thread-local buffers (or special buffer manager)
+                vImage_Buffer srcBuf;
+                srcBuf.height = height;
+                srcBuf.width = width;
+                srcBuf.rowBytes = 4*width;
+                srcBuf.data = mtlbuf.contents;
+
+                vImage_Buffer destBuf;
+                destBuf.height = height;
+                destBuf.width = width;
+                destBuf.rowBytes = dstInfo.scanStride;
+                destBuf.data = pDst;
+
+                vImagePermuteChannels_ARGB8888(&srcBuf, &destBuf, rfi.permuteMap, kvImageNoFlags);
+            }
+#ifndef USE_STATIC_BUFFER
+            [mtlbuf release];
+#endif // USE_STATIC_BUFFER
+        }
+        SurfaceData_InvokeRelease(env, dstOps, &dstInfo);
+    }
+    SurfaceData_InvokeUnlock(env, dstOps, &dstInfo);
 }
 
 void
 MTLBlitLoops_CopyArea(JNIEnv *env,
                       MTLContext *mtlc, BMTLSDOps *dstOps,
@@ -655,8 +811,12 @@
     [blitEncoder
             copyFromTexture:dstOps->pTexture
             sourceSlice:0 sourceLevel:0 sourceOrigin:MTLOriginMake(x, y, 0) sourceSize:MTLSizeMake(width, height, 1)
             toTexture:dstOps->pTexture destinationSlice:0 destinationLevel:0 destinationOrigin:MTLOriginMake(x + dx, y + dy, 0)];
     [blitEncoder endEncoding];
+
+    // TODO:
+    //  1. check rect bounds
+    //  2. support CopyArea with extra-alpha (and with custom Composite if necessary)
 }
 
 #endif /* !HEADLESS */
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.h
@@ -3,10 +3,14 @@
 
 #import <Metal/Metal.h>
 
 #include <jni.h>
 
+#define FLT_ACCURACY (0.99f)
+#define FLT_LT(x,y) ((x) < (y) - FLT_ACCURACY)
+#define FLT_GE(x,y) ((x) >= (y) - FLT_ACCURACY)
+
 /**
  * The MTLComposite class represents composite mode
  * */
 
 @interface MTLComposite : NSObject
@@ -23,10 +27,11 @@
 
 
 - (jint)getCompositeState;
 - (jint)getRule;
 - (jint)getXorColor;
+- (jfloat)getExtraAlpha;
 
 - (jboolean)isBlendingDisabled:(jboolean) isSrcOpaque;
 - (NSString *)getDescription; // creates autorelease string
 @end
 
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.m
@@ -170,6 +170,10 @@
 
 -(jint)getXorColor {
     return _xorPixel;
 }
 
+- (jfloat)getExtraAlpha {
+    return _extraAlpha;
+}
+
 @end
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
@@ -31,10 +31,11 @@
 
 #include "common.h"
 
 #include "sun_java2d_SunGraphics2D.h"
 #include "sun_java2d_pipe_BufferedPaints.h"
+#import "MTLComposite.h"
 
 #define RGBA_TO_V4(c)              \
 {                                  \
     (((c) >> 16) & (0xFF))/255.0f, \
     (((c) >> 8) & 0xFF)/255.0f,    \
@@ -312,11 +313,11 @@
                                                  stencilNeeded:stencil];
         [encoder setVertexBytes:&_anchor length:sizeof(_anchor) atIndex:FrameUniformBuffer];
         [encoder setFragmentTexture:_paintTexture atIndex: 1];
 
         struct TxtFrameUniforms uf = {RGBA_TO_V4(0), 0, srcFlags->isOpaque,
-                                      dstFlags->isOpaque};
+                                      dstFlags->isOpaque, [composite getExtraAlpha]};
         [encoder setFragmentBytes:&uf length:sizeof(uf)
                           atIndex:FrameUniformBuffer];
 
       } else if (_paintState == sun_java2d_SunGraphics2D_PAINT_GRADIENT) {
         pipelineState = [pipelineStateStorage getPipelineState:templateTexturePipelineDesc
@@ -349,21 +350,24 @@
           pipelineState =
               [pipelineStateStorage getPipelineState:templateTexturePipelineDesc
                                       vertexShaderId:@"vert_txt"
                                     fragmentShaderId:@"frag_txt"
                                        compositeRule:[composite getRule]
+                                           composite:composite
                                                 isAA:JNI_FALSE
                                             srcFlags:srcFlags
                                             dstFlags:dstFlags
                                        stencilNeeded:stencil];
         }
 
         if (_paintState == sun_java2d_SunGraphics2D_PAINT_ALPHACOLOR) {
-          struct TxtFrameUniforms uf = {RGBA_TO_V4(_color), 1, srcFlags->isOpaque, dstFlags->isOpaque };
+          struct TxtFrameUniforms uf = {RGBA_TO_V4(_color), 1,
+                  srcFlags->isOpaque, dstFlags->isOpaque, [composite getExtraAlpha]};
           [encoder setFragmentBytes:&uf length:sizeof(uf) atIndex:FrameUniformBuffer];
         } else {
-          struct TxtFrameUniforms uf = {RGBA_TO_V4(0), 0, srcFlags->isOpaque, dstFlags->isOpaque };
+          struct TxtFrameUniforms uf = {RGBA_TO_V4(0), 0,
+                  srcFlags->isOpaque, dstFlags->isOpaque, [composite getExtraAlpha]};
           [encoder setFragmentBytes:&uf length:sizeof(uf) atIndex:FrameUniformBuffer];
         }
       }
     } else {
         if (_paintState == sun_java2d_SunGraphics2D_PAINT_ALPHACOLOR) {
@@ -435,14 +439,16 @@
                                                 srcFlags:srcFlags
                                                 dstFlags:dstFlags
                                            stencilNeeded:stencil];
 
         if (_paintState == sun_java2d_SunGraphics2D_PAINT_ALPHACOLOR) {
-            struct TxtFrameUniforms uf = {RGBA_TO_V4(_color ^ xorColor), 1, srcFlags->isOpaque, dstFlags->isOpaque };
+            struct TxtFrameUniforms uf = {RGBA_TO_V4(_color ^ xorColor), 1,
+                    srcFlags->isOpaque, dstFlags->isOpaque, [composite getExtraAlpha]};
             [encoder setFragmentBytes:&uf length:sizeof(uf) atIndex:FrameUniformBuffer];
         } else {
-            struct TxtFrameUniforms uf = {RGBA_TO_V4(0 ^ xorColor), 0, srcFlags->isOpaque, dstFlags->isOpaque };
+            struct TxtFrameUniforms uf = {RGBA_TO_V4(0 ^ xorColor), 0,
+                    srcFlags->isOpaque, dstFlags->isOpaque, [composite getExtraAlpha]};
             [encoder setFragmentBytes:&uf length:sizeof(uf) atIndex:FrameUniformBuffer];
         }
         [encoder setFragmentBytes:&xorColor length:sizeof(xorColor) atIndex: 0];
     } else {
         if (_paintState == sun_java2d_SunGraphics2D_PAINT_ALPHACOLOR) {
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.h
@@ -2,10 +2,12 @@
 #define MTLPipelineStatesStorage_h_Included
 
 #import "MTLUtils.h"
 #include "MTLSurfaceDataBase.h"
 
+@class MTLComposite;
+
 /**
  * The MTLPipelineStatesStorage class used to obtain MTLRenderPipelineState
  * */
 
 
@@ -52,10 +54,20 @@
                                            isAA:(jboolean)isAA
                                        srcFlags:(const SurfaceRasterFlags *)srcFlags
                                        dstFlags:(const SurfaceRasterFlags *)dstFlags
                                   stencilNeeded:(bool)stencilNeeded;
 
+- (id<MTLRenderPipelineState>) getPipelineState:(MTLRenderPipelineDescriptor *) pipelineDescriptor
+                                 vertexShaderId:(NSString *)vertexShaderId
+                               fragmentShaderId:(NSString *)fragmentShaderId
+                                  compositeRule:(jint)compositeRule
+                                      composite:(MTLComposite*)composite
+                                           isAA:(jboolean)isAA
+                                       srcFlags:(const SurfaceRasterFlags *)srcFlags
+                                       dstFlags:(const SurfaceRasterFlags *)dstFlags
+                                  stencilNeeded:(bool)stencilNeeded;
+
 - (id<MTLRenderPipelineState>) getXorModePipelineState:(MTLRenderPipelineDescriptor *) pipelineDescriptor
                                  vertexShaderId:(NSString *)vertexShaderId
                                fragmentShaderId:(NSString *)fragmentShaderId
                                        srcFlags:(const SurfaceRasterFlags * )srcFlags
                                        dstFlags:(const SurfaceRasterFlags * )dstFlags
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
@@ -1,17 +1,19 @@
 #import "MTLPipelineStatesStorage.h"
 
 #include "GraphicsPrimitiveMgr.h"
+#import "MTLComposite.h"
 
 // A special value for xor composite
 const int XOR_COMPOSITE_RULE = 20;
 
 extern const SurfaceRasterFlags defaultRasterFlags;
 
 static void setBlendingFactors(
         MTLRenderPipelineColorAttachmentDescriptor * cad,
         int compositeRule,
+        MTLComposite* composite,
         const SurfaceRasterFlags * srcFlags, const SurfaceRasterFlags * dstFlags);
 
 @implementation MTLPipelineStatesStorage
 
 @synthesize device;
@@ -98,17 +100,37 @@
                          srcFlags:srcFlags
                          dstFlags:dstFlags
             stencilNeeded:stencilNeeded];
 }
 
+- (id<MTLRenderPipelineState>) getPipelineState:(MTLRenderPipelineDescriptor *) pipelineDescriptor
+                                 vertexShaderId:(NSString *)vertexShaderId
+                               fragmentShaderId:(NSString *)fragmentShaderId
+                                  compositeRule:(jint)compositeRule
+                                           isAA:(jboolean)isAA
+                                       srcFlags:(const SurfaceRasterFlags *)srcFlags
+                                       dstFlags:(const SurfaceRasterFlags *)dstFlags
+                                  stencilNeeded:(bool)stencilNeeded;
+{
+    return [self getPipelineState:pipelineDescriptor
+                   vertexShaderId:vertexShaderId
+                 fragmentShaderId:fragmentShaderId
+                    compositeRule:compositeRule
+                        composite:nil
+                             isAA:isAA
+                         srcFlags:srcFlags
+                         dstFlags:dstFlags
+                    stencilNeeded:stencilNeeded];
+}
 
 // Base method to obtain MTLRenderPipelineState.
 // NOTE: parameters compositeRule, srcFlags, dstFlags are used to set MTLRenderPipelineColorAttachmentDescriptor multipliers
 - (id<MTLRenderPipelineState>) getPipelineState:(MTLRenderPipelineDescriptor *) pipelineDescriptor
                                  vertexShaderId:(NSString *)vertexShaderId
                                fragmentShaderId:(NSString *)fragmentShaderId
                                   compositeRule:(jint)compositeRule
+                                      composite:(MTLComposite*) composite
                                            isAA:(jboolean)isAA
                                        srcFlags:(const SurfaceRasterFlags *)srcFlags
                                        dstFlags:(const SurfaceRasterFlags *)dstFlags
                                   stencilNeeded:(bool)stencilNeeded;
 {
@@ -142,10 +164,14 @@
     }
 
     if (isAA) {
         subIndex |= 1 << 5;
     }
+
+    if ((composite != nil && FLT_LT([composite getExtraAlpha], 1.0f))) {
+        subIndex |= 1 << 6;
+    }
     int index = compositeRule*64 + subIndex;
 
     NSPointerArray * subStates = [self getSubStates:vertexShaderId fragmentShader:fragmentShaderId];
     while (index >= [subStates count]) {
         [subStates addPointer:NULL]; // obj-c collections haven't resize methods, so do that
@@ -165,14 +191,18 @@
  
                 pipelineDesc.colorAttachments[0].rgbBlendOperation = MTLBlendOperationAdd;
                 pipelineDesc.colorAttachments[0].sourceRGBBlendFactor = MTLBlendFactorOneMinusDestinationColor;
                 pipelineDesc.colorAttachments[0].destinationRGBBlendFactor =  MTLBlendFactorOneMinusSourceColor;
 
-            } else if (useComposite) {
+            } else if (useComposite ||
+                       (composite != nil  &&
+                        FLT_GE([composite getExtraAlpha], 1.0f)))
+            {
                 setBlendingFactors(
                         pipelineDesc.colorAttachments[0],
                         compositeRule,
+                        composite,
                         srcFlags, dstFlags
                 );
             }
             if (stencilNeeded) {
                 pipelineDesc.stencilAttachmentPixelFormat = MTLPixelFormatStencil8;
@@ -229,10 +259,11 @@
 @end
 
 static void setBlendingFactors(
         MTLRenderPipelineColorAttachmentDescriptor * cad,
         int compositeRule,
+        MTLComposite* composite,
         const SurfaceRasterFlags * srcFlags,
         const SurfaceRasterFlags * dstFlags
 ) {
     if (compositeRule == RULE_Src) {
         J2dTraceLn(J2D_TRACE_VERBOSE, "set RULE_Src");
@@ -256,11 +287,14 @@
 
     switch (compositeRule) {
         case RULE_SrcOver: {
             // Ar = As + Ad*(1-As)
             // Cr = Cs + Cd*(1-As)
-            if (srcFlags->isOpaque) {
+            if (srcFlags->isOpaque &&
+                (composite == nil ||
+                 FLT_GE([composite getExtraAlpha], 1.0f)))
+            {
                 J2dTraceLn(J2D_TRACE_VERBOSE, "rule=RULE_Src, but blending is disabled because src is opaque");
                 cad.blendingEnabled = NO;
                 return;
             }
             if (dstFlags->isOpaque) {
@@ -272,11 +306,15 @@
                 cad.destinationAlphaBlendFactor = MTLBlendFactorOneMinusSourceAlpha;
             }
             if (!srcFlags->isPremultiplied) {
                 cad.sourceRGBBlendFactor = MTLBlendFactorSourceAlpha;
             }
+            if (composite != nil && FLT_LT([composite getExtraAlpha], 1.0f)) {
+                cad.sourceRGBBlendFactor = MTLBlendFactorSourceAlpha;
+            }
             cad.destinationRGBBlendFactor = MTLBlendFactorOneMinusSourceAlpha;
+
             J2dTraceLn(J2D_TRACE_VERBOSE, "set RULE_SrcOver");
             break;
         }
         case RULE_DstOver: {
             // Ar = As*(1-Ad) + Ad
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h
@@ -45,10 +45,12 @@
 // Operations for CheckPreviousOp
 enum {
   MTL_OP_INIT,
   MTL_OP_AA,
   MTL_OP_SET_COLOR,
+  MTL_OP_RESET_PAINT,
+  MTL_OP_SYNC,
   MTL_OP_OTHER
 };
 
 /*
  * These macros now simply delegate to the CheckPreviousOp() method.
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
@@ -326,20 +326,31 @@
         return;
     }
 
     if (mtlc != NULL) {
         [mtlc.encoderManager endEncoder];
+
+        if (op == MTL_OP_RESET_PAINT || op == MTL_OP_SYNC) {
+            MTLCommandBufferWrapper *cbwrapper = [mtlc pullCommandBufferWrapper];
+            id <MTLCommandBuffer> commandbuf = [cbwrapper getCommandBuffer];
+            [commandbuf addCompletedHandler:^(id <MTLCommandBuffer> commandbuf) {
+                [cbwrapper release];
+            }];
+            [commandbuf commit];
+            if (op == MTL_OP_SYNC) {
+                [commandbuf waitUntilCompleted];
+            }
+        }
     }
     mtlPreviousOp = op;
 }
 
 JNIEXPORT void JNICALL
 Java_sun_java2d_metal_MTLRenderQueue_flushBuffer
     (JNIEnv *env, jobject mtlrq,
      jlong buf, jint limit)
 {
-    jboolean sync = JNI_FALSE;
     unsigned char *b, *end;
 
     J2dTraceLn1(J2D_TRACE_INFO,
                 "MTLRenderQueue_flushBuffer: limit=%d", limit);
 
@@ -801,16 +812,11 @@
             //    dstOps = NULL;
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SYNC:
             {
-                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
-                sync = JNI_TRUE;
-
-                // TODO
-                J2dTraceLn(J2D_TRACE_ERROR, "MTLRenderQueue_SYNC -- :TODO");
-
+                CHECK_PREVIOUS_OP(MTL_OP_SYNC);
             }
             break;
 
         // multibuffering ops
         case sun_java2d_pipe_BufferedOpCodes_SWAP_BUFFERS:
@@ -826,11 +832,11 @@
             break;
 
         // paint-related ops
         case sun_java2d_pipe_BufferedOpCodes_RESET_PAINT:
             {
-              CHECK_PREVIOUS_OP(MTL_OP_OTHER);
+              CHECK_PREVIOUS_OP(MTL_OP_RESET_PAINT);
               [mtlc resetPaint];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_COLOR:
             {
@@ -1013,13 +1019,10 @@
         id<MTLCommandBuffer> commandbuf = [cbwrapper getCommandBuffer];
         [commandbuf addCompletedHandler:^(id <MTLCommandBuffer> commandbuf) {
             [cbwrapper release];
         }];
         [commandbuf commit];
-        if (sync) {
-            [commandbuf waitUntilCompleted];
-        }
         BMTLSDOps *dstOps = MTLRenderQueue_GetCurrentDestination();
         if (dstOps != NULL) {
             MTLSDOps *dstMTLOps = (MTLSDOps *)dstOps->privOps;
             MTLLayer *layer = (MTLLayer*)dstMTLOps->layer;
             if (layer != NULL) {
