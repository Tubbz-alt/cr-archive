diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
@@ -165,10 +165,11 @@
  */
 static SurfaceDataBounds previousGlyphBounds;
 
 static struct TxtVertex txtVertices[6];
 static jint vertexCacheIndex = 0;
+static id<MTLRenderCommandEncoder> lcdCacheEncoder = nil;
 
 #define LCD_ADD_VERTEX(TX, TY, DX, DY, DZ) \
     do { \
         struct TxtVertex *v = &txtVertices[vertexCacheIndex++]; \
         v->txtpos[0] = TX; \
@@ -409,10 +410,78 @@
     [encoder setFragmentBytes:&uf length:sizeof(uf) atIndex:FrameUniformBuffer];
 
     return JNI_TRUE;
 }
 
+static jboolean
+MTLTR_SetLCDCachePipelineState(MTLContext *mtlc)
+{
+    if (templateLCDPipelineDesc == nil) {
+
+        MTLVertexDescriptor *vertDesc = [[MTLVertexDescriptor new] autorelease];
+        vertDesc.attributes[VertexAttributePosition].format = MTLVertexFormatFloat2;
+        vertDesc.attributes[VertexAttributePosition].offset = 0;
+        vertDesc.attributes[VertexAttributePosition].bufferIndex = MeshVertexBuffer;
+        vertDesc.layouts[MeshVertexBuffer].stride = sizeof(struct Vertex);
+        vertDesc.layouts[MeshVertexBuffer].stepRate = 1;
+        vertDesc.layouts[MeshVertexBuffer].stepFunction = MTLVertexStepFunctionPerVertex;
+
+        templateLCDPipelineDesc = [[MTLRenderPipelineDescriptor new] autorelease];
+        templateLCDPipelineDesc.sampleCount = 1;
+        templateLCDPipelineDesc.vertexDescriptor = vertDesc;
+        templateLCDPipelineDesc.colorAttachments[0].pixelFormat = MTLPixelFormatBGRA8Unorm;
+        templateLCDPipelineDesc.vertexDescriptor.attributes[VertexAttributeTexPos].format = MTLVertexFormatFloat2;
+        templateLCDPipelineDesc.vertexDescriptor.attributes[VertexAttributeTexPos].offset = 2*sizeof(float);
+        templateLCDPipelineDesc.vertexDescriptor.attributes[VertexAttributeTexPos].bufferIndex = MeshVertexBuffer;
+        templateLCDPipelineDesc.vertexDescriptor.layouts[MeshVertexBuffer].stride = sizeof(struct TxtVertex);
+        templateLCDPipelineDesc.vertexDescriptor.layouts[MeshVertexBuffer].stepRate = 1;
+        templateLCDPipelineDesc.vertexDescriptor.layouts[MeshVertexBuffer].stepFunction = MTLVertexStepFunctionPerVertex;
+        templateLCDPipelineDesc.label = @"template_lcd";
+    }
+
+    id<MTLRenderPipelineState> pipelineState =
+                [mtlc.pipelineStateStorage
+                    getPipelineState:templateLCDPipelineDesc
+                    vertexShaderId:@"vert_txt"
+                    fragmentShaderId:@"lcd_color"
+                   ];
+
+    [lcdCacheEncoder setRenderPipelineState:pipelineState];
+    return JNI_TRUE;
+}
+
+static jboolean
+MTLTR_SetLCDContrast(MTLContext *mtlc,
+                     jint contrast)
+{
+    // update the current color settings
+    double gamma = ((double)contrast) / 100.0;
+    double invgamma = 1.0/gamma;
+    jfloat radj, gadj, badj;
+    jfloat clr[4];
+    jint col = [mtlc.paint getColor];
+
+    J2dTraceLn2(J2D_TRACE_INFO, "primary color %x, contrast %d", col, contrast);
+    J2dTraceLn2(J2D_TRACE_INFO, "gamma %f, invgamma %f", gamma, invgamma);
+
+    clr[0] = ((col >> 16) & 0xFF)/255.0f;
+    clr[1] = ((col >> 8) & 0xFF)/255.0f;
+    clr[2] = ((col) & 0xFF)/255.0f;
+
+    // gamma adjust the primary color
+    radj = (float)pow(clr[0], gamma);
+    gadj = (float)pow(clr[1], gamma);
+    badj = (float)pow(clr[2], gamma);
+
+    struct LCDFrameUniforms uf = {
+            {radj, gadj, badj},
+            {gamma, gamma, gamma},
+            {invgamma, invgamma, invgamma}};
+    [lcdCacheEncoder setFragmentBytes:&uf length:sizeof(uf) atIndex:FrameUniformBuffer];
+    return JNI_TRUE;
+}
+
 void
 MTLTR_EnableGlyphVertexCache(MTLContext *mtlc, BMTLSDOps *dstOps)
 {
 J2dTraceLn(J2D_TRACE_INFO, "MTLTR_EnableGlyphVertexCache");
 
@@ -472,10 +541,13 @@
     jfloat x1, y1, x2, y2;
 
     if (glyphMode != MODE_USE_CACHE_GRAY) {
         if (glyphMode == MODE_NO_CACHE_GRAY) {
             MTLVertexCache_DisableMaskCache(mtlc);
+        } else if (glyphMode == MODE_USE_CACHE_LCD) {
+            [mtlc.encoderManager endEncoder];
+            lcdCacheEncoder = nil;
         }
         MTLTR_EnableGlyphVertexCache(mtlc, dstOps);
         glyphMode = MODE_USE_CACHE_GRAY;
     }
 
@@ -546,12 +618,10 @@
     CacheCellInfo *cell;
     jfloat tx1, ty1, tx2, ty2;
     jint w = ginfo->width;
     jint h = ginfo->height;
 
-    id<MTLRenderCommandEncoder> encoder = nil;
-
     if (glyphMode != MODE_USE_CACHE_LCD) {
         if (glyphMode == MODE_NO_CACHE_GRAY) {
             MTLVertexCache_DisableMaskCache(mtlc);
         } else if (glyphMode == MODE_USE_CACHE_GRAY) {
             MTLTR_DisableGlyphVertexCache(mtlc);
@@ -560,11 +630,14 @@
         if (glyphCacheLCD == NULL) {
             if (!MTLTR_InitGlyphCache(mtlc, JNI_TRUE)) {
                 return JNI_FALSE;
             }
         }
-
+        if (lcdCacheEncoder == nil) {
+            lcdCacheEncoder = [mtlc.encoderManager getTextureEncoder:dstOps->pTexture isSrcOpaque:YES isDstOpaque:YES];
+            MTLTR_SetLCDCachePipelineState(mtlc);
+        }
         if (rgbOrder != lastRGBOrder) {
             // need to invalidate the cache in this case; see comments
             // for lastRGBOrder above
             MTLGlyphCache_Invalidate(glyphCacheLCD);
             lastRGBOrder = rgbOrder;
@@ -583,34 +656,29 @@
             return JNI_TRUE;
         }
     }
     cell = (CacheCellInfo *) (ginfo->cellInfo);
     cell->timesRendered++;
-    encoder = [mtlc.encoderManager getTextureEncoder:dstOps->pTexture isSrcOpaque:YES isDstOpaque:YES];
-    if (!MTLTR_EnableLCDGlyphModeState(encoder, mtlc, dstOps,contrast))
-    {
-        return JNI_FALSE;
-    }
 
+    MTLTR_SetLCDContrast(mtlc, contrast);
     tx1 = cell->tx1;
     ty1 = cell->ty1;
     tx2 = cell->tx2;
     ty2 = cell->ty2;
 
     J2dTraceLn4(J2D_TRACE_INFO, "tx1 %f, ty1 %f, tx2 %f, ty2 %f", tx1, ty1, tx2, ty2);
     J2dTraceLn2(J2D_TRACE_INFO, "textureWidth %d textureHeight %d", dstOps->textureWidth, dstOps->textureHeight);
 
     LCD_ADD_TRIANGLES(tx1, ty1, tx2, ty2, x, y, x+w, y+h);
 
-    [encoder setVertexBytes:txtVertices length:sizeof(txtVertices) atIndex:MeshVertexBuffer];
-    [encoder setFragmentTexture:glyphCacheLCD->texture atIndex:0];
-    [encoder setFragmentTexture:dstOps->pTexture atIndex:1];
+    [lcdCacheEncoder setVertexBytes:txtVertices length:sizeof(txtVertices) atIndex:MeshVertexBuffer];
+    [lcdCacheEncoder setFragmentTexture:glyphCacheLCD->texture atIndex:0];
+    [lcdCacheEncoder setFragmentTexture:dstOps->pTexture atIndex:1];
 
-    [encoder drawPrimitives:MTLPrimitiveTypeTriangle vertexStart:0 vertexCount:6];
+    [lcdCacheEncoder drawPrimitives:MTLPrimitiveTypeTriangle vertexStart:0 vertexCount:6];
 
     vertexCacheIndex = 0;
-    [mtlc.encoderManager endEncoder];
 
     return JNI_TRUE;
 }
 
 static jboolean
@@ -625,10 +693,13 @@
 
     J2dTraceLn(J2D_TRACE_INFO, "MTLTR_DrawGrayscaleGlyphNoCache");
     if (glyphMode != MODE_NO_CACHE_GRAY) {
         if (glyphMode == MODE_USE_CACHE_GRAY) {
             MTLTR_DisableGlyphVertexCache(mtlc);
+        } else if (glyphMode == MODE_USE_CACHE_LCD) {
+            [mtlc.encoderManager endEncoder];
+            lcdCacheEncoder = nil;
         }
         MTLVertexCache_EnableMaskCache(mtlc, dstOps);
         glyphMode = MODE_NO_CACHE_GRAY;
     }
 
@@ -690,10 +761,13 @@
     if (glyphMode != MODE_NO_CACHE_LCD) {
         if (glyphMode == MODE_NO_CACHE_GRAY) {
             MTLVertexCache_DisableMaskCache(mtlc);
         } else if (glyphMode == MODE_USE_CACHE_GRAY) {
             MTLTR_DisableGlyphVertexCache(mtlc);
+        } else if (glyphMode == MODE_USE_CACHE_LCD) {
+            [mtlc.encoderManager endEncoder];
+            lcdCacheEncoder = nil;
         }
 
         if (blitTexture == nil) {
             J2dTraceLn(J2D_TRACE_ERROR, "can't obtain temporary texture object from pool");
             return JNI_FALSE;
@@ -903,10 +977,13 @@
      */
     if (glyphMode == MODE_NO_CACHE_GRAY) {
         MTLVertexCache_DisableMaskCache(mtlc);
     } else if (glyphMode == MODE_USE_CACHE_GRAY) {
         MTLTR_DisableGlyphVertexCache(mtlc);
+    } else if (glyphMode == MODE_USE_CACHE_LCD) {
+        [mtlc.encoderManager endEncoder];
+        lcdCacheEncoder = nil;
     }
 }
 
 JNIEXPORT void JNICALL
 Java_sun_java2d_metal_MTLTextRenderer_drawGlyphList
