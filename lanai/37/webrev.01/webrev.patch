diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.h
@@ -3,10 +3,24 @@
 
 #import <Metal/Metal.h>
 
 #include <jni.h>
 
+/* FIXME: the FLT_LT and FLT_GE macros don't do what the names imply.
+ * Correct macros would be more like this:
+ *
+ * #define FLT_EPSILON (0.001f)
+ * #define FLT_LT(x,y) ((x) < (y) - FLT_EPSILON)
+ * #define FLT_GE(x,y) ((x) >= (y) - FLT_EPSILON)
+ *
+ * and maybe for completeness, if needed:
+ *
+ * #define FLT_LE(x,y) ((x) <= (y) + FLT_EPSILON)
+ * #define FLT_GT(x,y) ((x) > (y) + FLT_EPSILON)
+ *
+ * When these macros are fixed all usages should be double-checked.
+ */
 #define FLT_ACCURACY (0.99f)
 #define FLT_LT(x,y) ((x) < (y) - FLT_ACCURACY)
 #define FLT_GE(x,y) ((x) >= (y) - FLT_ACCURACY)
 
 /**
@@ -33,6 +47,6 @@
 
 - (jboolean)isBlendingDisabled:(jboolean) isSrcOpaque;
 - (NSString *)getDescription; // creates autorelease string
 @end
 
-#endif // MTLComposite_h_Included
+#endif // MTLComposite_h_Included
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLComposite.m
@@ -139,14 +139,25 @@
     }
     return [NSString stringWithFormat:@"%s", result];
 }
 
 - (jboolean)isBlendingDisabled:(jboolean)isSrcOpaque {
-    if (_compositeRule == java_awt_AlphaComposite_SRC ||
-        _compositeRule == java_awt_AlphaComposite_SRC_OVER)
-    {
-        return FLT_LT(_extraAlpha, 1.0f);
+
+    // FIXME: This function needs to be re-examined.
+    // Depending on the composite mode, I think it needs to either look
+    // at both or neither of the extra alpha value and isSrcOpaque.
+    // For example, I don't think SRC or CLEAR mode needs blending at all
+    // (but maybe that is handled elsewhere).
+
+    // FIXME: Use FLT_GE macro or similar once fixed
+    const jfloat epsilon = 0.001f;
+    BOOL extraAlphaIsOne = fabs(_extraAlpha - 1.0f) < epsilon;
+    if (_compositeRule == java_awt_AlphaComposite_SRC) {
+        return extraAlphaIsOne;
+    }
+    else if (_compositeRule == java_awt_AlphaComposite_SRC_OVER) {
+        return extraAlphaIsOne && isSrcOpaque;
     }
     return isSrcOpaque;
 }
 
 - (void)setAlphaComposite:(jint)rule {
@@ -171,6 +182,6 @@
 
 - (jfloat)getExtraAlpha {
     return _extraAlpha;
 }
 
-@end
+@end
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
@@ -165,10 +165,12 @@
 
     if (isAA) {
         subIndex |= 1 << 5;
     }
 
+    // FIXME: the FLT_LT macro doesn't do what the name implies.
+    // When the macro is fixed this usage should be double-checked (although it might be OK)
     if ((composite != nil && FLT_LT([composite getExtraAlpha], 1.0f))) {
         subIndex |= 1 << 6;
     }
     int index = compositeRule*64 + subIndex;
 
@@ -193,10 +195,13 @@
                 pipelineDesc.colorAttachments[0].sourceRGBBlendFactor = MTLBlendFactorOneMinusDestinationColor;
                 pipelineDesc.colorAttachments[0].destinationRGBBlendFactor =  MTLBlendFactorOneMinusSourceColor;
 
             } else if (useComposite ||
                        (composite != nil  &&
+                        // FIXME: the FLT_GE macro doesn't do what the name implies.
+                        // When the macro is fixed this usage should be double-checked, since
+                        // it looks backwards to me.
                         FLT_GE([composite getExtraAlpha], 1.0f)))
             {
                 setBlendingFactors(
                         pipelineDesc.colorAttachments[0],
                         compositeRule,
@@ -263,10 +268,12 @@
         int compositeRule,
         MTLComposite* composite,
         const SurfaceRasterFlags * srcFlags,
         const SurfaceRasterFlags * dstFlags
 ) {
+    // FIXME: the FLT_GE macro doesn't do what the name implies.
+    // When the macro is fixed this usage should be double-checked (although it might be OK)
     if (compositeRule == RULE_Src &&
         (composite == nil || FLT_GE([composite getExtraAlpha], 1.0f))) {
         J2dTraceLn(J2D_TRACE_VERBOSE, "set RULE_Src but blending is disabled because src is opaque");
         return;
     }
@@ -288,10 +295,12 @@
 
     switch (compositeRule) {
         case RULE_SrcOver: {
             // Ar = As + Ad*(1-As)
             // Cr = Cs + Cd*(1-As)
+            // FIXME: the FLT_GE macro doesn't do what the name implies.
+            // When the macro is fixed this usage should be double-checked (although it might be OK)
             if (srcFlags->isOpaque &&
                 (composite == nil ||
                  FLT_GE([composite getExtraAlpha], 1.0f)))
             {
                 J2dTraceLn(J2D_TRACE_VERBOSE, "rule=RULE_SrcOver, but blending is disabled because src is opaque");
@@ -307,10 +316,12 @@
                 cad.destinationAlphaBlendFactor = MTLBlendFactorOneMinusSourceAlpha;
             }
             if (!srcFlags->isPremultiplied) {
                 cad.sourceRGBBlendFactor = MTLBlendFactorSourceAlpha;
             }
+            // FIXME: the FLT_LT macro doesn't do what the name implies.
+            // When the macro is fixed this usage should be double-checked (although it might be OK)
             if (composite != nil && FLT_LT([composite getExtraAlpha], 1.0f)) {
                 cad.sourceRGBBlendFactor = MTLBlendFactorSourceAlpha;
             }
             cad.destinationRGBBlendFactor = MTLBlendFactorOneMinusSourceAlpha;
 
