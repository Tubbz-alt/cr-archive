diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h
@@ -44,18 +44,19 @@
 
 // Operations for CheckPreviousOp
 enum {
   MTL_OP_INIT,
   MTL_OP_AA,
+  MTL_OP_SET_COLOR,
   MTL_OP_OTHER
 };
 
 /*
  * These macros now simply delegate to the CheckPreviousOp() method.
  */
 #define CHECK_PREVIOUS_OP(op) MTLRenderQueue_CheckPreviousOp(op)
-#define RESET_PREVIOUS_OP() CHECK_PREVIOUS_OP(MTL_OP_INIT)
+#define RESET_PREVIOUS_OP() {mtlPreviousOp = MTL_OP_INIT;}
 
 /*
  * Increments a pointer (buf) by the given number of bytes.
  */
 #define SKIP_BYTES(buf, numbytes) buf += (numbytes)
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
@@ -315,10 +315,14 @@
     }
 
     J2dTraceLn1(J2D_TRACE_VERBOSE,
                 "MTLRenderQueue_CheckPreviousOp: new op=%d", op);
 
+    if (op == MTL_OP_SET_COLOR) {
+        return; // SET_COLOR should not cause endEncoder
+    }
+
     if (mtlPreviousOp == MTL_OP_INIT) {
         mtlPreviousOp = op;
         return;
     }
 
@@ -828,11 +832,11 @@
               [mtlc resetPaint];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_COLOR:
             {
-                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
+                CHECK_PREVIOUS_OP(MTL_OP_SET_COLOR);
                 jint pixel = NEXT_INT(b);
                 [mtlc setColorPaint:pixel];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_GRADIENT_PAINT:
@@ -1001,11 +1005,10 @@
                 "MTLRenderQueue_flushBuffer: invalid opcode=%d", opcode);
             return;
         }
     }
 
-    CHECK_PREVIOUS_OP(MTL_OP_INIT);
     if (mtlc != NULL) {
         [mtlc.encoderManager endEncoder];
         MTLCommandBufferWrapper * cbwrapper = [mtlc pullCommandBufferWrapper];
         id<MTLCommandBuffer> commandbuf = [cbwrapper getCommandBuffer];
         [commandbuf addCompletedHandler:^(id <MTLCommandBuffer> commandbuf) {
@@ -1025,10 +1028,11 @@
                     [layer setNeedsDisplay];
                 }];
             }
         }
     }
+    RESET_PREVIOUS_OP();
 }
 
 /**
  * Returns a pointer to the "current" context, as set by the last SET_SURFACES
  * or SET_SCRATCH_SURFACE operation.
