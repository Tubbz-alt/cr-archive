diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m
@@ -754,11 +754,11 @@
             // NOTE: using of separate blitCommandBuffer can produce errors (draw into surface (with general cmd-buf)
             // can be unfinished when reading raster from blit cmd-buf).
             // Consider to use [mtlc.encoderManager createBlitEncoder] and [mtlc commitCommandBuffer:JNI_TRUE];
             J2dTraceLn1(J2D_TRACE_VERBOSE, "MTLBlitLoops_SurfaceToSwBlit: source texture %p", srcOps->pTexture);
 
-            id<MTLCommandBuffer> cb = [mtlc createBlitCommandBuffer];
+            id<MTLCommandBuffer> cb = [mtlc createCommandBuffer];
             id<MTLBlitCommandEncoder> blitEncoder = [cb blitCommandEncoder];
             [blitEncoder synchronizeTexture:srcOps->pTexture slice:0 level:0];
             [blitEncoder copyFromTexture:srcOps->pTexture
                             sourceSlice:0
                             sourceLevel:0
@@ -817,11 +817,11 @@
     J2dTraceImpl(J2D_TRACE_VERBOSE, JNI_TRUE, "MTLBlitLoops_CopyArea: bdst=%p [tex=%p] %dx%d | src (%d, %d), %dx%d -> dst (%d, %d)",
             dstOps, dstOps->pTexture, ((id<MTLTexture>)dstOps->pTexture).width, ((id<MTLTexture>)dstOps->pTexture).height, x, y, width, height, dx, dy);
 #endif //DEBUG
 
     @autoreleasepool {
-    id<MTLCommandBuffer> cb = [mtlc createBlitCommandBuffer];
+    id<MTLCommandBuffer> cb = [mtlc createCommandBuffer];
     id<MTLBlitCommandEncoder> blitEncoder = [cb blitCommandEncoder];
 
     // Create an intrermediate buffer
     int totalBuffsize = width * height * 4;
     id <MTLBuffer> buff = [mtlc.device newBufferWithLength:totalBuffsize options:MTLResourceStorageModePrivate];
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLClip.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLClip.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLClip.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLClip.m
@@ -151,11 +151,11 @@
 
         NSUInteger width = (NSUInteger)dstOps->width;
         NSUInteger height = (NSUInteger)dstOps->height;
         NSUInteger size = width*height;
         id <MTLBuffer> buff = [mtlc.device newBufferWithLength:size*4 options:MTLResourceStorageModePrivate];
-        id<MTLCommandBuffer> commandBuf = [mtlc createBlitCommandBuffer];
+        id<MTLCommandBuffer> commandBuf = [mtlc createCommandBuffer];
         id<MTLBlitCommandEncoder> blitEncoder = [commandBuf blitCommandEncoder];
         [blitEncoder fillBuffer:buff range:NSMakeRange(0, size*4) value:0];
 
         MTLOrigin origin = MTLOriginMake(0, 0, 0);
         MTLSize sourceSize = MTLSizeMake(width, height, 1);
@@ -202,11 +202,11 @@
             NSUInteger width = (NSUInteger)dstOps->width;
             NSUInteger height = (NSUInteger)dstOps->height;
             NSUInteger size = width*height;
             NSUInteger sizeX4 = size*4;
 
-            id<MTLCommandBuffer> cb = [mtlc createBlitCommandBuffer];
+            id<MTLCommandBuffer> cb = [mtlc createCommandBuffer];
             id<MTLBlitCommandEncoder> blitEncoder = [cb blitCommandEncoder];
             MTLSize sourceSize = MTLSizeMake(width, height, 1);
             MTLOrigin origin = MTLOriginMake(0, 0, 0);
             [blitEncoder copyFromTexture:dstOps->pStencilData
                              sourceSlice:0
@@ -298,11 +298,11 @@
 
     id <MTLTexture> _stencilTextureRef = _dstOps->pStencilTexture;
 
     if (!_clipReady) {
         @autoreleasepool {
-            id <MTLCommandBuffer> cb = [_mtlc createBlitCommandBuffer];
+            id <MTLCommandBuffer> cb = [_mtlc createCommandBuffer];
             id <MTLBlitCommandEncoder> blitEncoder = [cb blitCommandEncoder];
             id <MTLBuffer> _stencilDataBufRef = _dstOps->pStencilDataBuf;
 
             NSUInteger width = _stencilTextureRef.width;
             NSUInteger height = _stencilTextureRef.height;
@@ -332,11 +332,11 @@
 
     if (!_aaClipReady) {
 
         @autoreleasepool {
 
-            id <MTLCommandBuffer> cb = [_mtlc createBlitCommandBuffer];
+            id <MTLCommandBuffer> cb = [_mtlc createCommandBuffer];
             id <MTLComputeCommandEncoder> computeEncoder = [cb computeCommandEncoder];
             id<MTLComputePipelineState> computePipelineState = [_mtlc.pipelineStateStorage getComputePipelineState:@"stencil2tex"];
             id <MTLBuffer> _stencilDataBufRef = _dstOps->pStencilDataBuf;
             id <MTLBuffer> _stencilAADataBufRef = _dstOps->pAAStencilDataBuf;
             NSUInteger width = _stencilAADataRef.width;
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.h
@@ -68,10 +68,11 @@
 @property jboolean      aaEnabled;
 
 @property (readonly, strong)   id<MTLDevice>   device;
 @property (strong) id<MTLLibrary>              library;
 @property (strong) id<MTLCommandQueue>         commandQueue;
+@property (strong) id<MTLCommandQueue>         blitCommandQueue;
 @property (strong) id<MTLBuffer>               vertexBuffer;
 
 @property (readonly) EncoderManager * encoderManager;
 
 @property (strong)MTLPipelineStatesStorage*   pipelineStateStorage;
@@ -251,10 +252,11 @@
 // simple and clear)
 -(void)setBufImgOp:(NSObject*)bufImgOp;
 
 -(NSObject*)getBufImgOp;
 
+- (id<MTLCommandBuffer>)createCommandBuffer;
 - (id<MTLCommandBuffer>)createBlitCommandBuffer;
 @end
 
 /**
  * See BufferedContext.java for more on these flags...
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m
@@ -95,11 +95,11 @@
     EncoderManager * _encoderManager;
 }
 
 @synthesize textureFunction,
             vertexCacheEnabled, aaEnabled, device, library, pipelineStateStorage,
-            commandQueue, vertexBuffer,
+            commandQueue, blitCommandQueue, vertexBuffer,
             texturePool;
 
 extern void initSamplers(id<MTLDevice> device);
 
 - (id)initWithDevice:(id<MTLDevice>)d shadersLib:(NSString*)shadersLib {
@@ -133,10 +133,11 @@
 
         _commandBufferWrapper = nil;
 
         // Create command queue
         commandQueue = [device newCommandQueue];
+        blitCommandQueue = [device newCommandQueue];
 
         initSamplers(device);
     }
     return self;
 }
@@ -146,10 +147,11 @@
 
     self.texturePool = nil;
     self.library = nil;
     self.vertexBuffer = nil;
     self.commandQueue = nil;
+    self.blitCommandQueue = nil;
     self.pipelineStateStorage = nil;
     [_encoderManager release];
     [_composite release];
     [_paint release];
     [_transform release];
@@ -410,14 +412,22 @@
                    yp0:yp0
                    yp1:yp1
                    yp3:yp3];
 }
 
-- (id<MTLCommandBuffer>)createBlitCommandBuffer {
+- (id<MTLCommandBuffer>)createCommandBuffer {
     return [self.commandQueue commandBuffer];
 }
 
+/*
+ * This should be exclusively used only for final blit
+ * and present of CAMetalDrawable in MTLLayer
+ */
+- (id<MTLCommandBuffer>)createBlitCommandBuffer {
+    return [self.blitCommandQueue commandBuffer];
+}
+
 -(void)setBufImgOp:(NSObject*)bufImgOp {
     if (_bufImgOp != nil) {
         [_bufImgOp release]; // context owns bufImgOp object
     }
     _bufImgOp = bufImgOp;
