diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m
@@ -95,11 +95,11 @@
     EncoderManager * _encoderManager;
 }
 
 @synthesize textureFunction,
             vertexCacheEnabled, aaEnabled, device, library, pipelineStateStorage,
-            commandQueue, vertexBuffer,
+            commandQueue, blitCommandQueue, vertexBuffer,
             texturePool;
 
 extern void initSamplers(id<MTLDevice> device);
 
 - (id)initWithDevice:(id<MTLDevice>)d shadersLib:(NSString*)shadersLib {
@@ -133,10 +133,11 @@
 
         _commandBufferWrapper = nil;
 
         // Create command queue
         commandQueue = [device newCommandQueue];
+        blitCommandQueue = [device newCommandQueue];
 
         initSamplers(device);
     }
     return self;
 }
@@ -146,10 +147,11 @@
 
     self.texturePool = nil;
     self.library = nil;
     self.vertexBuffer = nil;
     self.commandQueue = nil;
+    self.blitCommandQueue = nil;
     self.pipelineStateStorage = nil;
     [_encoderManager release];
     [_composite release];
     [_paint release];
     [_transform release];
@@ -410,14 +412,22 @@
                    yp0:yp0
                    yp1:yp1
                    yp3:yp3];
 }
 
-- (id<MTLCommandBuffer>)createBlitCommandBuffer {
+- (id<MTLCommandBuffer>)createCommandBuffer {
     return [self.commandQueue commandBuffer];
 }
 
+/*
+ * This should be exclusively used only for final blit
+ * and present of CAMetalDrawable in MTLLayer
+ */
+- (id<MTLCommandBuffer>)createBlitCommandBuffer {
+    return [self.blitCommandQueue commandBuffer];
+}
+
 -(void)setBufImgOp:(NSObject*)bufImgOp {
     if (_bufImgOp != nil) {
         [_bufImgOp release]; // context owns bufImgOp object
     }
     _bufImgOp = bufImgOp;
