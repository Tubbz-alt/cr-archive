diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
@@ -250,46 +250,72 @@
 MTLTR_AddToGlyphCache(GlyphInfo *glyph, MTLContext *mtlc,
                       MTLPixelFormat pixelFormat)
 {
     MTLCacheCellInfo *ccinfo;
     MTLGlyphCacheInfo *gcinfo;
+    jboolean isLCD = JNI_FALSE;
+    jint w = glyph->width;
+    jint h = glyph->height;
 
     J2dTraceLn(J2D_TRACE_INFO, "MTLTR_AddToGlyphCache");
     if (pixelFormat == MTLPixelFormatA8Unorm) {
         gcinfo = glyphCacheAA;
     } else {
         gcinfo = glyphCacheLCD;
+        isLCD = JNI_TRUE;
     }
 
     if ((gcinfo == NULL) || (glyph->image == NULL)) {
         return;
     }
 
     bool isCacheFull = MTLGlyphCache_IsCacheFull(gcinfo, glyph);
     if (isCacheFull) {
         MTLGlyphCache_Free(gcinfo);
-        if (pixelFormat == MTLPixelFormatA8Unorm) {
+        if (!isLCD) {
             MTLTR_InitGlyphCache(mtlc, JNI_FALSE);
+            gcinfo = glyphCacheAA;
         } else {
             MTLTR_InitGlyphCache(mtlc, JNI_TRUE);
+            gcinfo = glyphCacheLCD;
         }
-        gcinfo = glyphCacheAA;
     }
     MTLGlyphCache_AddGlyph(gcinfo, glyph);
     ccinfo = (MTLCacheCellInfo *) glyph->cellInfo;
 
     if (ccinfo != NULL) {
         // store glyph image in texture cell
         MTLRegion region = {
                 {ccinfo->x,  ccinfo->y,   0},
-                {glyph->width, glyph->height, 1}
+                {w, h, 1}
         };
-        NSUInteger bytesPerRow = 1 * glyph->width;
-        [gcinfo->texture replaceRegion:region
-                         mipmapLevel:0
-                         withBytes:glyph->image
-                         bytesPerRow:bytesPerRow];
+        if (!isLCD) {
+            NSUInteger bytesPerRow = 1 * w;
+            [gcinfo->texture replaceRegion:region
+                             mipmapLevel:0
+                             withBytes:glyph->image
+                             bytesPerRow:bytesPerRow];
+        } else {
+            unsigned int imageBytes = w * h * 4;
+            unsigned char imageData[imageBytes];
+            memset(&imageData, 0, sizeof(imageData));
+
+            for (int i = 0; i < h; i++) {
+                for (int j = 0; j < w; j++) {
+                    imageData[(i * w * 4) + j * 4] = glyph->image[(i * w * 3) + j * 3];
+                    imageData[(i * w * 4) + j * 4 + 1] = glyph->image[(i * w * 3) + j * 3 + 1];
+                    imageData[(i * w * 4) + j * 4 + 2] = glyph->image[(i * w * 3) + j * 3 + 2];
+                    imageData[(i * w * 4) + j * 4 + 3] = 0xFF;
+                }
+            }
+
+            NSUInteger bytesPerRow = 4 * w;
+            [gcinfo->texture replaceRegion:region
+                             mipmapLevel:0
+                             withBytes:imageData
+                             bytesPerRow:bytesPerRow];
+        }
     }
 }
 
 static MTLRenderPipelineDescriptor * templateRenderPipelineDesc = nil;
 static MTLRenderPipelineDescriptor * templateLCDPipelineDesc = nil;
@@ -800,18 +826,10 @@
     [commandbuf waitUntilCompleted];
 
     return JNI_TRUE;
 }
 
-static jboolean
-MTLTR_DrawColorGlyphNoCache(MTLContext *mtlc, GlyphInfo *ginfo, jint x, jint y)
-{
-    //TODO
-    return JNI_TRUE;
-}
-
-
 // see DrawGlyphList.c for more on this macro...
 #define FLOOR_ASSIGN(l, r) \
     if ((r)<0) (l) = ((int)floor(r)); else (l) = ((int)(r))
 
 void
