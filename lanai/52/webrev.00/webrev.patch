diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLBlitLoops.m
@@ -173,10 +173,12 @@
 id<MTLTexture> replaceTextureRegion(id<MTLTexture> dest, const SurfaceDataRasInfo * srcInfo, const MTLRasterFormatInfo * rfi, int dx1, int dy1, int dx2, int dy2) {
     const int dw = dx2 - dx1;
     const int dh = dy2 - dy1;
 
     const void * raster = srcInfo->rasBase;
+    raster += srcInfo->bounds.y1*srcInfo->scanStride + srcInfo->bounds.x1*srcInfo->pixelStride;
+
     id<MTLTexture> result = nil;
     if (rfi->permuteMap != NULL) {
 #if defined(__MAC_10_15) && __MAC_OS_X_VERSION_MAX_ALLOWED >= __MAC_10_15
         if (@available(macOS 10.15, *)) {
             @autoreleasepool {
@@ -219,11 +221,11 @@
             }
             vImage_Buffer srcBuf;
             srcBuf.height = dh;
             srcBuf.width = dw;
             srcBuf.rowBytes = srcInfo->scanStride;
-            srcBuf.data = srcInfo->rasBase;
+            srcBuf.data = raster;
 
             vImage_Buffer destBuf;
             destBuf.height = dh;
             destBuf.width = dw;
             destBuf.rowBytes = dw*4;
@@ -352,26 +354,26 @@
         J2dTraceLn4(J2D_TRACE_INFO, "\tdx2=%1.4f <= dcx1=%1.4f || *dx1=%1.4f >= dcx2=%1.4f", *dx2, dcx1, *dx1, dcx2);
         J2dTraceLn4(J2D_TRACE_INFO, "\t*dy2=%1.4f <= dcy1=%1.4f || *dy1=%1.4f >= dcy2=%1.4f", *dy2, dcy1, *dy1, dcy2);
         return JNI_FALSE;
     }
     if (*dx1 < dcx1) {
-        J2dTraceLn2(J2D_TRACE_VERBOSE, "\t\tdx1=%1.2f, will be clipped to %1.2f", *dx1, dcx1);
+        J2dTraceLn3(J2D_TRACE_VERBOSE, "\t\tdx1=%1.2f, will be clipped to %1.2f | sx1+=%d", *dx1, dcx1, (jint)((dcx1 - *dx1) * (sw/dw)));
         *sx1 += (jint)((dcx1 - *dx1) * (sw/dw));
         *dx1 = dcx1;
     }
     if (*dx2 > dcx2) {
-        J2dTraceLn2(J2D_TRACE_VERBOSE, "\t\tdx2=%1.2f, will be clipped to %1.2f", *dx2, dcx2);
+        J2dTraceLn3(J2D_TRACE_VERBOSE, "\t\tdx2=%1.2f, will be clipped to %1.2f | sx2-=%d", *dx2, dcx2, (jint)((*dx2 - dcx2) * (sw/dw)));
         *sx2 -= (jint)((*dx2 - dcx2) * (sw/dw));
         *dx2 = dcx2;
     }
     if (*dy1 < dcy1) {
-        J2dTraceLn2(J2D_TRACE_VERBOSE, "\t\tdy1=%1.2f, will be clipped to %1.2f", *dy1, dcy1);
+        J2dTraceLn3(J2D_TRACE_VERBOSE, "\t\tdy1=%1.2f, will be clipped to %1.2f | sy1+=%d", *dy1, dcy1, (jint)((dcy1 - *dy1) * (sh/dh)));
         *sy1 += (jint)((dcy1 - *dy1) * (sh/dh));
         *dy1 = dcy1;
     }
     if (*dy2 > dcy2) {
-        J2dTraceLn2(J2D_TRACE_VERBOSE, "\t\tdy2=%1.2f, will be clipped to %1.2f", *dy2, dcy2);
+        J2dTraceLn3(J2D_TRACE_VERBOSE, "\t\tdy2=%1.2f, will be clipped to %1.2f | sy2-=%d", *dy2, dcy2, (jint)((*dy2 - dcy2) * (sh/dh)));
         *sy2 -= (jint)((*dy2 - dcy2) * (sh/dh));
         *dy2 = dcy2;
     }
     return JNI_TRUE;
 }
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLUtils.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLUtils.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLUtils.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLUtils.m
@@ -1,9 +1,11 @@
 #include "MTLUtils.h"
 
 #include <jni.h>
 #include <simd/simd.h>
+#import <ThreadUtilities.h>
+#import <PropertiesUtilities.h>
 #include "common.h"
 #include "Trace.h"
 
 extern void J2dTraceImpl(int level, jboolean cr, const char *string, ...);
 void J2dTraceTraceVector(simd_float4 pt) {
@@ -43,5 +45,15 @@
 
 void tracePoints(jint nPoints, jint *xPoints, jint *yPoints) {
     for (int i = 0; i < nPoints; i++)
         J2dTraceImpl(J2D_TRACE_INFO, JNI_TRUE, "\t(%d, %d)", *(xPoints++), *(yPoints++));
 }
+
+
+jboolean isOptionEnabled(const char * option) {
+    JNIEnv *env = [ThreadUtilities getJNIEnvUncached];
+
+    NSString * optionProp = [PropertiesUtilities
+            javaSystemPropertyForKey:[NSString stringWithUTF8String:option] withEnv:env];
+    NSString * lowerCaseProp = [optionProp localizedLowercaseString];
+    return [@"true" isEqual:lowerCaseProp];
+}
