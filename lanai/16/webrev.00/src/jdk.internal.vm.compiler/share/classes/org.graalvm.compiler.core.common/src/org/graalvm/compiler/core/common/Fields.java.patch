diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/Fields.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/Fields.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/Fields.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/Fields.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -25,11 +25,13 @@
 package org.graalvm.compiler.core.common;
 
 import static org.graalvm.compiler.serviceprovider.GraalUnsafeAccess.getUnsafe;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
+import java.util.List;
 
 import org.graalvm.compiler.debug.GraalError;
 
 import sun.misc.Unsafe;
 
@@ -37,10 +39,11 @@
  * Describes fields in a class, primarily for access via {@link Unsafe}.
  */
 public class Fields {
 
     private static final Unsafe UNSAFE = getUnsafe();
+    private static final Fields EMPTY_FIELDS = new Fields(Collections.emptyList());
 
     /**
      * Offsets used with {@link Unsafe} to access the fields.
      */
     protected final long[] offsets;
@@ -58,14 +61,14 @@
     private final Class<?>[] declaringClasses;
 
     public static Fields forClass(Class<?> clazz, Class<?> endClazz, boolean includeTransient, FieldsScanner.CalcOffset calcOffset) {
         FieldsScanner scanner = new FieldsScanner(calcOffset == null ? new FieldsScanner.DefaultCalcOffset() : calcOffset);
         scanner.scan(clazz, endClazz, includeTransient);
-        return new Fields(scanner.data);
+        return create(scanner.data);
     }
 
-    public Fields(ArrayList<? extends FieldsScanner.FieldInfo> fields) {
+    protected Fields(List<? extends FieldsScanner.FieldInfo> fields) {
         Collections.sort(fields);
         this.offsets = new long[fields.size()];
         this.names = new String[offsets.length];
         this.types = new Class<?>[offsets.length];
         this.declaringClasses = new Class<?>[offsets.length];
@@ -77,10 +80,17 @@
             declaringClasses[index] = f.declaringClass;
             index++;
         }
     }
 
+    public static Fields create(ArrayList<? extends FieldsScanner.FieldInfo> fields) {
+        if (fields.size() == 0) {
+            return EMPTY_FIELDS;
+        }
+        return new Fields(fields);
+    }
+
     /**
      * Gets the number of fields represented by this object.
      */
     public int getCount() {
         return offsets.length;
@@ -144,15 +154,46 @@
                 } else {
                     assert false : "unhandled property type: " + type;
                 }
             } else {
                 Object obj = UNSAFE.getObject(from, offset);
+                if (obj != null && type.isArray()) {
+                    if (type.getComponentType().isPrimitive()) {
+                        obj = copyObjectAsArray(obj);
+                    } else {
+                        obj = ((Object[]) obj).clone();
+                    }
+                }
                 UNSAFE.putObject(to, offset, trans == null ? obj : trans.apply(index, obj));
             }
         }
     }
 
+    private static Object copyObjectAsArray(Object obj) {
+        Object objCopy;
+        if (obj instanceof int[]) {
+            objCopy = Arrays.copyOf((int[]) obj, ((int[]) obj).length);
+        } else if (obj instanceof short[]) {
+            objCopy = Arrays.copyOf((short[]) obj, ((short[]) obj).length);
+        } else if (obj instanceof long[]) {
+            objCopy = Arrays.copyOf((long[]) obj, ((long[]) obj).length);
+        } else if (obj instanceof float[]) {
+            objCopy = Arrays.copyOf((float[]) obj, ((float[]) obj).length);
+        } else if (obj instanceof double[]) {
+            objCopy = Arrays.copyOf((double[]) obj, ((double[]) obj).length);
+        } else if (obj instanceof boolean[]) {
+            objCopy = Arrays.copyOf((boolean[]) obj, ((boolean[]) obj).length);
+        } else if (obj instanceof byte[]) {
+            objCopy = Arrays.copyOf((byte[]) obj, ((byte[]) obj).length);
+        } else if (obj instanceof char[]) {
+            objCopy = Arrays.copyOf((char[]) obj, ((char[]) obj).length);
+        } else {
+            throw GraalError.shouldNotReachHere();
+        }
+        return objCopy;
+    }
+
     /**
      * Gets the value of a field for a given object.
      *
      * @param object the object whose field is to be read
      * @param index the index of the field (between 0 and {@link #getCount()})
