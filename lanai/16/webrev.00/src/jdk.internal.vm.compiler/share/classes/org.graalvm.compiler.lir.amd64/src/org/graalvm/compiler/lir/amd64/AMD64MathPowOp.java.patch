diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64MathPowOp.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64MathPowOp.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64MathPowOp.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64MathPowOp.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2016, Intel Corporation. All rights reserved.
  * Intel Math Library (LIBM) Source Code
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -46,10 +46,11 @@
 import static org.graalvm.compiler.lir.amd64.AMD64HotSpotHelper.recordExternalAddress;
 
 import org.graalvm.compiler.asm.Label;
 import org.graalvm.compiler.asm.amd64.AMD64Address;
 import org.graalvm.compiler.asm.amd64.AMD64Assembler;
+import org.graalvm.compiler.asm.amd64.AMD64Assembler.ConditionFlag;
 import org.graalvm.compiler.asm.amd64.AMD64MacroAssembler;
 import org.graalvm.compiler.lir.LIRInstructionClass;
 import org.graalvm.compiler.lir.asm.ArrayDataPointerConstant;
 import org.graalvm.compiler.lir.asm.CompilationResultBuilder;
 
@@ -905,10 +906,11 @@
         masm.movsd(new AMD64Address(rsp, 8), xmm0);
         masm.movsd(new AMD64Address(rsp, 16), xmm1);
 
         // Special case: pow(x, 2.0) => x * x
         masm.movdq(tmp1, xmm1);
+        // TODO (yz) adjust recorded address before jcc mitigation
         masm.cmpq(tmp1, recordExternalAddress(crb, double2));
         masm.jccb(AMD64Assembler.ConditionFlag.NotEqual, block57);
         masm.mulsd(xmm0, xmm0);
         masm.jmp(block56);
 
@@ -943,12 +945,11 @@
         masm.psllq(xmm3, 12);
         masm.movl(tmp4, 8192);
         masm.movdq(xmm4, tmp4);
         masm.psrlq(xmm3, 12);
         masm.subl(rax, 16);
-        masm.cmpl(rax, 32736);
-        masm.jcc(AMD64Assembler.ConditionFlag.AboveEqual, block0);
+        masm.cmplAndJcc(rax, 32736, ConditionFlag.AboveEqual, block0, false);
         masm.movl(tmp1, 0);
 
         masm.bind(block1);
         masm.mulss(xmm0, xmm7);
         masm.movl(rdx, -1);
@@ -956,12 +957,11 @@
         masm.shll(rdx);
         masm.shlq(rdx, 32);
         masm.movdq(xmm5, rdx);
         masm.por(xmm3, xmm1);
         masm.subl(rax, 16351);
-        masm.cmpl(rax, 1);
-        masm.jcc(AMD64Assembler.ConditionFlag.BelowEqual, block2);
+        masm.cmplAndJcc(rax, 1, ConditionFlag.BelowEqual, block2, false);
         masm.paddd(xmm0, xmm4);
         masm.pand(xmm5, xmm3);
         masm.movdl(rdx, xmm0);
         masm.psllq(xmm0, 29);
 
@@ -1016,12 +1016,11 @@
         masm.shll(rax, 4);
         masm.subl(rax, 15872);
         masm.andl(rcx, 32752);
         masm.addl(rax, rcx);
         masm.mulpd(xmm3, xmm6);
-        masm.cmpl(rax, 624);
-        masm.jcc(AMD64Assembler.ConditionFlag.AboveEqual, block5);
+        masm.cmplAndJcc(rax, 624, ConditionFlag.AboveEqual, block5, false);
         masm.xorpd(xmm6, xmm6);
         masm.movl(rdx, 17080);
         masm.pinsrw(xmm6, rdx, 3);
         masm.movdqu(xmm2, xmm1);
         masm.pand(xmm4, xmm1);
@@ -1078,24 +1077,21 @@
 
         masm.bind(block0);
         masm.addl(rax, 16);
         masm.movl(rdx, 32752);
         masm.andl(rdx, rax);
-        masm.cmpl(rdx, 32752);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block6);
-        masm.testl(rax, 32768);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block7);
+        masm.cmplAndJcc(rdx, 32752, ConditionFlag.Equal, block6, false);
+        masm.testlAndJcc(rax, 32768, ConditionFlag.NotEqual, block7, false);
 
         masm.bind(block8);
         masm.movq(xmm0, new AMD64Address(rsp, 8));
         masm.movq(xmm3, new AMD64Address(rsp, 8));
         masm.movdl(rdx, xmm3);
         masm.psrlq(xmm3, 32);
         masm.movdl(rcx, xmm3);
         masm.orl(rdx, rcx);
-        masm.cmpl(rdx, 0);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block9);
+        masm.cmplAndJcc(rdx, 0, ConditionFlag.Equal, block9, false);
         masm.xorpd(xmm3, xmm3);
         masm.movl(rax, 18416);
         masm.pinsrw(xmm3, rax, 3);
         masm.mulsd(xmm0, xmm3);
         masm.xorpd(xmm2, xmm2);
@@ -1138,12 +1134,11 @@
         masm.movq(xmm3, new AMD64Address(rsp, 8));
         masm.movdl(rdx, xmm3);
         masm.psrlq(xmm3, 32);
         masm.movdl(rcx, xmm3);
         masm.orl(rdx, rcx);
-        masm.cmpl(rdx, 0);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block9);
+        masm.cmplAndJcc(rdx, 0, ConditionFlag.Equal, block9, false);
         masm.xorpd(xmm3, xmm3);
         masm.movl(rax, 18416);
         masm.pinsrw(xmm3, rax, 3);
         masm.mulsd(xmm0, xmm3);
         masm.xorpd(xmm2, xmm2);
@@ -1180,14 +1175,12 @@
         masm.cvtsi2sdl(xmm7, rax);
         masm.mulpd(xmm5, xmm0);
         masm.jmp(block4);
 
         masm.bind(block5);
-        masm.cmpl(rax, 0);
-        masm.jcc(AMD64Assembler.ConditionFlag.Less, block11);
-        masm.cmpl(rax, 752);
-        masm.jcc(AMD64Assembler.ConditionFlag.AboveEqual, block12);
+        masm.cmplAndJcc(rax, 0, ConditionFlag.Less, block11, false);
+        masm.cmplAndJcc(rax, 752, ConditionFlag.AboveEqual, block12, false);
         masm.addsd(xmm0, xmm7);
         masm.movq(xmm2, recordExternalAddress(crb, halfmask));         // 0xf8000000, 0xffffffff,
                                                                        // 0xf8000000, 0xffffffff
         masm.addpd(xmm3, xmm0);
         masm.xorpd(xmm6, xmm6);
@@ -1235,12 +1228,11 @@
         masm.xorl(rcx, tmp1);
         masm.movdl(xmm6, rcx);
         masm.movq(xmm1, recordExternalAddress(crb, eCoeff32));         // 0xfefa39ef, 0x3fe62e42,
                                                                        // 0x00000000, 0x00000000
         masm.andl(rdx, 32767);
-        masm.cmpl(rdx, 16529);
-        masm.jcc(AMD64Assembler.ConditionFlag.Above, block12);
+        masm.cmplAndJcc(rdx, 16529, ConditionFlag.Above, block12, false);
         masm.pshufd(xmm0, xmm2, 68);
         masm.pshufd(xmm4, xmm2, 68);
         masm.mulpd(xmm0, xmm0);
         masm.mulpd(xmm7, xmm4);
         masm.pshufd(xmm6, xmm6, 17);
@@ -1263,32 +1255,30 @@
         masm.addsd(xmm0, xmm3);
         masm.movdqu(xmm1, xmm0);
         masm.addsd(xmm0, xmm5);
         masm.mulsd(xmm0, xmm4);
         masm.pextrw(rax, xmm0, 3);
-        masm.andl(rax, 32752);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block13);
-        masm.cmpl(rax, 32752);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block14);
+        masm.andlAndJcc(rax, 32752, ConditionFlag.Equal, block13, false);
+        masm.cmplAndJcc(rax, 32752, ConditionFlag.Equal, block14, false);
         masm.jmp(block56);
 
         masm.bind(block6);
         masm.movq(xmm1, new AMD64Address(rsp, 16));
         masm.movq(xmm0, new AMD64Address(rsp, 8));
         masm.movdqu(xmm2, xmm0);
         masm.movdl(rax, xmm2);
         masm.psrlq(xmm2, 20);
         masm.movdl(rdx, xmm2);
         masm.orl(rax, rdx);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block15);
+        masm.jcc(ConditionFlag.Equal, block15);
         masm.movdl(rax, xmm1);
         masm.psrlq(xmm1, 32);
         masm.movdl(rdx, xmm1);
         masm.movl(rcx, rdx);
         masm.addl(rdx, rdx);
         masm.orl(rax, rdx);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block16);
+        masm.jcc(ConditionFlag.Equal, block16);
         masm.addsd(xmm0, xmm0);
         masm.jmp(block56);
 
         masm.bind(block16);
         masm.xorpd(xmm0, xmm0);
@@ -1308,68 +1298,57 @@
         masm.psrlq(xmm1, 32);
         masm.movdl(rdx, xmm1);
         masm.movl(rcx, rdx);
         masm.addl(rdx, rdx);
         masm.orl(rax, rdx);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block19);
+        masm.jcc(ConditionFlag.Equal, block19);
         masm.pextrw(rax, xmm2, 3);
         masm.andl(rax, 32752);
-        masm.cmpl(rax, 32752);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block20);
+        masm.cmplAndJcc(rax, 32752, ConditionFlag.NotEqual, block20, false);
         masm.movdl(rax, xmm2);
         masm.psrlq(xmm2, 20);
         masm.movdl(rdx, xmm2);
         masm.orl(rax, rdx);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block18);
+        masm.jcc(ConditionFlag.NotEqual, block18);
 
         masm.bind(block20);
         masm.pextrw(rax, xmm0, 3);
-        masm.testl(rax, 32768);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block21);
-        masm.testl(rcx, Integer.MIN_VALUE);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block22);
+        masm.testlAndJcc(rax, 32768, ConditionFlag.NotEqual, block21, false);
+        masm.testlAndJcc(rcx, Integer.MIN_VALUE, ConditionFlag.NotEqual, block22, false);
         masm.jmp(block56);
 
         masm.bind(block23);
         masm.movq(xmm1, new AMD64Address(rsp, 16));
         masm.movdl(rax, xmm1);
-        masm.testl(rax, 1);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block24);
-        masm.testl(rax, 2);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block25);
+        masm.testlAndJcc(rax, 1, ConditionFlag.NotEqual, block24, false);
+        masm.testlAndJcc(rax, 2, ConditionFlag.NotEqual, block25, false);
         masm.jmp(block24);
 
         masm.bind(block21);
         masm.shrl(rcx, 20);
         masm.andl(rcx, 2047);
-        masm.cmpl(rcx, 1075);
-        masm.jcc(AMD64Assembler.ConditionFlag.Above, block24);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block26);
-        masm.cmpl(rcx, 1074);
-        masm.jcc(AMD64Assembler.ConditionFlag.Above, block23);
-        masm.cmpl(rcx, 1023);
-        masm.jcc(AMD64Assembler.ConditionFlag.Below, block24);
+        masm.cmplAndJcc(rcx, 1075, ConditionFlag.Above, block24, false);
+        masm.jcc(ConditionFlag.Equal, block26);
+        masm.cmplAndJcc(rcx, 1074, ConditionFlag.Above, block23, false);
+        masm.cmplAndJcc(rcx, 1023, ConditionFlag.Below, block24, false);
         masm.movq(xmm1, new AMD64Address(rsp, 16));
         masm.movl(rax, 17208);
         masm.xorpd(xmm3, xmm3);
         masm.pinsrw(xmm3, rax, 3);
         masm.movdqu(xmm4, xmm3);
         masm.addsd(xmm3, xmm1);
         masm.subsd(xmm4, xmm3);
         masm.addsd(xmm1, xmm4);
         masm.pextrw(rax, xmm1, 3);
-        masm.andl(rax, 32752);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block24);
+        masm.andlAndJcc(rax, 32752, ConditionFlag.NotEqual, block24, false);
         masm.movdl(rax, xmm3);
-        masm.andl(rax, 1);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block24);
+        masm.andlAndJcc(rax, 1, ConditionFlag.Equal, block24, false);
 
         masm.bind(block25);
         masm.movq(xmm1, new AMD64Address(rsp, 16));
         masm.pextrw(rax, xmm1, 3);
-        masm.andl(rax, 32768);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block27);
+        masm.andlAndJcc(rax, 32768, ConditionFlag.NotEqual, block27, false);
         masm.jmp(block56);
 
         masm.bind(block27);
         masm.xorpd(xmm0, xmm0);
         masm.movl(rax, 32768);
@@ -1377,44 +1356,41 @@
         masm.jmp(block56);
 
         masm.bind(block24);
         masm.movq(xmm1, new AMD64Address(rsp, 16));
         masm.pextrw(rax, xmm1, 3);
-        masm.andl(rax, 32768);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block22);
+        masm.andlAndJcc(rax, 32768, ConditionFlag.NotEqual, block22, false);
         masm.xorpd(xmm0, xmm0);
         masm.movl(rax, 32752);
         masm.pinsrw(xmm0, rax, 3);
         masm.jmp(block56);
 
         masm.bind(block26);
         masm.movq(xmm1, new AMD64Address(rsp, 16));
         masm.movdl(rax, xmm1);
-        masm.andl(rax, 1);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block24);
+        masm.andlAndJcc(rax, 1, ConditionFlag.Equal, block24, false);
         masm.jmp(block25);
 
         masm.bind(block28);
         masm.movdl(rax, xmm1);
         masm.psrlq(xmm1, 20);
         masm.movdl(rdx, xmm1);
         masm.orl(rax, rdx);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block29);
+        masm.jcc(ConditionFlag.Equal, block29);
         masm.movq(xmm0, new AMD64Address(rsp, 16));
         masm.addsd(xmm0, xmm0);
         masm.jmp(block56);
 
         masm.bind(block29);
         masm.movq(xmm0, new AMD64Address(rsp, 8));
         masm.pextrw(rax, xmm0, 3);
-        masm.cmpl(rax, 49136);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block30);
+        masm.cmplAndJcc(rax, 49136, ConditionFlag.NotEqual, block30, false);
         masm.movdl(rcx, xmm0);
         masm.psrlq(xmm0, 20);
         masm.movdl(rdx, xmm0);
         masm.orl(rcx, rdx);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block30);
+        masm.jcc(ConditionFlag.NotEqual, block30);
         masm.xorpd(xmm0, xmm0);
         masm.movl(rax, 32760);
         masm.pinsrw(xmm0, rax, 3);
         masm.jmp(block56);
 
@@ -1423,72 +1399,61 @@
         masm.andl(rax, 32752);
         masm.subl(rax, 16368);
         masm.pextrw(rdx, xmm1, 3);
         masm.xorpd(xmm0, xmm0);
         masm.xorl(rax, rdx);
-        masm.andl(rax, 32768);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block31);
+        masm.andlAndJcc(rax, 32768, ConditionFlag.Equal, block31, false);
         masm.jmp(block56);
 
         masm.bind(block31);
         masm.movl(rcx, 32752);
         masm.pinsrw(xmm0, rcx, 3);
         masm.jmp(block56);
 
         masm.bind(block32);
         masm.movdl(rax, xmm1);
-        masm.cmpl(rdx, 17184);
-        masm.jcc(AMD64Assembler.ConditionFlag.Above, block33);
-        masm.testl(rax, 1);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block34);
-        masm.testl(rax, 2);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block35);
+        masm.cmplAndJcc(rdx, 17184, ConditionFlag.Above, block33, false);
+        masm.testlAndJcc(rax, 1, ConditionFlag.NotEqual, block34, false);
+        masm.testlAndJcc(rax, 2, ConditionFlag.Equal, block35, false);
         masm.jmp(block36);
 
         masm.bind(block33);
-        masm.testl(rax, 1);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block35);
+        masm.testlAndJcc(rax, 1, ConditionFlag.Equal, block35, false);
         masm.jmp(block36);
 
         masm.bind(block7);
         masm.movq(xmm2, new AMD64Address(rsp, 8));
         masm.movdl(rax, xmm2);
         masm.psrlq(xmm2, 31);
         masm.movdl(rcx, xmm2);
         masm.orl(rax, rcx);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block9);
+        masm.jcc(ConditionFlag.Equal, block9);
         masm.movq(xmm1, new AMD64Address(rsp, 16));
         masm.pextrw(rdx, xmm1, 3);
         masm.movdl(rax, xmm1);
         masm.movdqu(xmm2, xmm1);
         masm.psrlq(xmm2, 32);
         masm.movdl(rcx, xmm2);
         masm.addl(rcx, rcx);
         masm.orl(rcx, rax);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block37);
+        masm.jcc(ConditionFlag.Equal, block37);
         masm.andl(rdx, 32752);
-        masm.cmpl(rdx, 32752);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block28);
-        masm.cmpl(rdx, 17200);
-        masm.jcc(AMD64Assembler.ConditionFlag.Above, block35);
-        masm.cmpl(rdx, 17184);
-        masm.jcc(AMD64Assembler.ConditionFlag.AboveEqual, block32);
-        masm.cmpl(rdx, 16368);
-        masm.jcc(AMD64Assembler.ConditionFlag.Below, block34);
+        masm.cmplAndJcc(rdx, 32752, ConditionFlag.Equal, block28, false);
+        masm.cmplAndJcc(rdx, 17200, ConditionFlag.Above, block35, false);
+        masm.cmplAndJcc(rdx, 17184, ConditionFlag.AboveEqual, block32, false);
+        masm.cmplAndJcc(rdx, 16368, ConditionFlag.Below, block34, false);
         masm.movl(rax, 17208);
         masm.xorpd(xmm2, xmm2);
         masm.pinsrw(xmm2, rax, 3);
         masm.movdqu(xmm4, xmm2);
         masm.addsd(xmm2, xmm1);
         masm.subsd(xmm4, xmm2);
         masm.addsd(xmm1, xmm4);
         masm.pextrw(rax, xmm1, 3);
-        masm.andl(rax, 32767);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block34);
+        masm.andlAndJcc(rax, 32767, ConditionFlag.NotEqual, block34, false);
         masm.movdl(rax, xmm2);
-        masm.andl(rax, 1);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block35);
+        masm.andlAndJcc(rax, 1, ConditionFlag.Equal, block35, false);
 
         masm.bind(block36);
         masm.xorpd(xmm1, xmm1);
         masm.movl(rdx, 30704);
         masm.pinsrw(xmm1, rdx, 3);
@@ -1497,12 +1462,11 @@
         masm.movq(xmm4, new AMD64Address(rsp, 8));
         masm.pextrw(rax, xmm4, 3);
         masm.movl(rdx, 8192);
         masm.movdl(xmm4, rdx);
         masm.andl(rax, 32767);
-        masm.subl(rax, 16);
-        masm.jcc(AMD64Assembler.ConditionFlag.Less, block10);
+        masm.sublAndJcc(rax, 16, ConditionFlag.Less, block10, false);
         masm.movl(rdx, rax);
         masm.andl(rdx, 32752);
         masm.subl(rdx, 16368);
         masm.movl(rcx, rdx);
         masm.sarl(rdx, 31);
@@ -1531,12 +1495,11 @@
         masm.movq(xmm4, new AMD64Address(rsp, 8));
         masm.pextrw(rax, xmm4, 3);
         masm.movl(rdx, 8192);
         masm.movdl(xmm4, rdx);
         masm.andl(rax, 32767);
-        masm.subl(rax, 16);
-        masm.jcc(AMD64Assembler.ConditionFlag.Less, block8);
+        masm.sublAndJcc(rax, 16, ConditionFlag.Less, block8, false);
         masm.movl(rdx, rax);
         masm.andl(rdx, 32752);
         masm.subl(rdx, 16368);
         masm.movl(rcx, rdx);
         masm.sarl(rdx, 31);
@@ -1557,12 +1520,11 @@
         masm.xorpd(xmm0, xmm0);
         masm.jmp(block56);
 
         masm.bind(block11);
         masm.addl(rax, 384);
-        masm.cmpl(rax, 0);
-        masm.jcc(AMD64Assembler.ConditionFlag.Less, block38);
+        masm.cmplAndJcc(rax, 0, ConditionFlag.Less, block38, false);
         masm.mulsd(xmm5, xmm1);
         masm.addsd(xmm0, xmm7);
         masm.shrl(tmp1, 31);
         masm.addpd(xmm3, xmm0);
         masm.pshufd(xmm0, xmm3, 238);
@@ -1599,62 +1561,54 @@
         masm.bind(block9);
         masm.movq(xmm1, new AMD64Address(rsp, 16));
         masm.movdqu(xmm2, xmm1);
         masm.pextrw(rax, xmm1, 3);
         masm.andl(rax, 32752);
-        masm.cmpl(rax, 32752);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block40);
+        masm.cmplAndJcc(rax, 32752, ConditionFlag.NotEqual, block40, false);
         masm.movdl(rax, xmm2);
         masm.psrlq(xmm2, 20);
         masm.movdl(rdx, xmm2);
         masm.orl(rax, rdx);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block18);
+        masm.jcc(ConditionFlag.NotEqual, block18);
 
         masm.bind(block40);
         masm.movdl(rax, xmm1);
         masm.psrlq(xmm1, 32);
         masm.movdl(rdx, xmm1);
         masm.movl(rcx, rdx);
         masm.addl(rdx, rdx);
         masm.orl(rax, rdx);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block39);
+        masm.jcc(ConditionFlag.Equal, block39);
         masm.shrl(rdx, 21);
-        masm.cmpl(rdx, 1075);
-        masm.jcc(AMD64Assembler.ConditionFlag.Above, block41);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block42);
-        masm.cmpl(rdx, 1023);
-        masm.jcc(AMD64Assembler.ConditionFlag.Below, block41);
+        masm.cmplAndJcc(rdx, 1075, ConditionFlag.Above, block41, false);
+        masm.jcc(ConditionFlag.Equal, block42);
+        masm.cmplAndJcc(rdx, 1023, ConditionFlag.Below, block41, false);
         masm.movq(xmm1, new AMD64Address(rsp, 16));
         masm.movl(rax, 17208);
         masm.xorpd(xmm3, xmm3);
         masm.pinsrw(xmm3, rax, 3);
         masm.movdqu(xmm4, xmm3);
         masm.addsd(xmm3, xmm1);
         masm.subsd(xmm4, xmm3);
         masm.addsd(xmm1, xmm4);
         masm.pextrw(rax, xmm1, 3);
-        masm.andl(rax, 32752);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block41);
+        masm.andlAndJcc(rax, 32752, ConditionFlag.NotEqual, block41, false);
         masm.movdl(rax, xmm3);
-        masm.andl(rax, 1);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block41);
+        masm.andlAndJcc(rax, 1, ConditionFlag.Equal, block41, false);
 
         masm.bind(block43);
         masm.movq(xmm0, new AMD64Address(rsp, 8));
-        masm.testl(rcx, Integer.MIN_VALUE);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block44);
+        masm.testlAndJcc(rcx, Integer.MIN_VALUE, ConditionFlag.NotEqual, block44, false);
         masm.jmp(block56);
 
         masm.bind(block42);
         masm.movq(xmm1, new AMD64Address(rsp, 16));
         masm.movdl(rax, xmm1);
-        masm.testl(rax, 1);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block43);
+        masm.testlAndJcc(rax, 1, ConditionFlag.NotEqual, block43, false);
 
         masm.bind(block41);
-        masm.testl(rcx, Integer.MIN_VALUE);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block22);
+        masm.testlAndJcc(rcx, Integer.MIN_VALUE, ConditionFlag.Equal, block22, false);
         masm.xorpd(xmm0, xmm0);
 
         masm.bind(block44);
         masm.movl(rax, 16368);
         masm.xorpd(xmm1, xmm1);
@@ -1669,17 +1623,15 @@
         masm.movq(xmm6, new AMD64Address(rsp, 16));
         masm.pextrw(rax, xmm2, 3);
         masm.pextrw(rdx, xmm6, 3);
         masm.movl(rcx, 32752);
         masm.andl(rcx, rdx);
-        masm.cmpl(rcx, 32752);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block45);
+        masm.cmplAndJcc(rcx, 32752, ConditionFlag.Equal, block45, false);
         masm.andl(rax, 32752);
         masm.subl(rax, 16368);
         masm.xorl(rdx, rax);
-        masm.testl(rdx, 32768);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block46);
+        masm.testlAndJcc(rdx, 32768, ConditionFlag.NotEqual, block46, false);
 
         masm.bind(block47);
         masm.movl(rax, 32736);
         masm.pinsrw(xmm0, rax, 3);
         masm.shrl(tmp1, 16);
@@ -1693,12 +1645,11 @@
 
         masm.bind(block46);
         masm.movl(rax, 16);
         masm.pinsrw(xmm0, rax, 3);
         masm.mulsd(xmm0, xmm0);
-        masm.testl(tmp1, Integer.MIN_VALUE);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block48);
+        masm.testlAndJcc(tmp1, Integer.MIN_VALUE, ConditionFlag.Equal, block48, false);
         masm.movq(tmp2, 0x8000000000000000L);
         masm.movdq(xmm2, tmp2);
         masm.xorpd(xmm0, xmm2);
 
         masm.bind(block48);
@@ -1713,14 +1664,12 @@
         masm.subl(rcx, 16368);
         masm.andl(rdx, 32752);
         masm.addl(rdx, rcx);
         masm.movl(rcx, -31);
         masm.sarl(rdx, 4);
-        masm.subl(rcx, rdx);
-        masm.jcc(AMD64Assembler.ConditionFlag.LessEqual, block49);
-        masm.cmpl(rcx, 20);
-        masm.jcc(AMD64Assembler.ConditionFlag.Above, block50);
+        masm.sublAndJcc(rcx, rdx, ConditionFlag.LessEqual, block49, false);
+        masm.cmplAndJcc(rcx, 20, ConditionFlag.Above, block50, false);
         masm.shll(rax);
 
         masm.bind(block49);
         masm.movdl(xmm0, rax);
         masm.psllq(xmm0, 32);
@@ -1743,12 +1692,11 @@
         masm.movdl(rdx, xmm0);
         masm.psllq(xmm0, 29);
         masm.paddq(xmm1, xmm3);
         masm.pand(xmm5, xmm1);
         masm.andl(rcx, 32752);
-        masm.cmpl(rcx, 16560);
-        masm.jcc(AMD64Assembler.ConditionFlag.Less, block3);
+        masm.cmplAndJcc(rcx, 16560, ConditionFlag.Less, block3, false);
         masm.pand(xmm0, xmm6);
         masm.subsd(xmm3, xmm5);
         masm.addl(rax, 16351);
         masm.shrl(rax, 4);
         masm.subl(rax, 1022);
@@ -1836,15 +1784,13 @@
         masm.subsd(xmm7, xmm2);
         masm.addpd(xmm5, xmm0);
         masm.andl(rax, 32752);
         masm.subl(rax, 16368);
         masm.andl(rcx, 32752);
-        masm.cmpl(rcx, 32752);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block45);
+        masm.cmplAndJcc(rcx, 32752, ConditionFlag.Equal, block45, false);
         masm.addl(rcx, rax);
-        masm.cmpl(rcx, 16576);
-        masm.jcc(AMD64Assembler.ConditionFlag.AboveEqual, block51);
+        masm.cmplAndJcc(rcx, 16576, ConditionFlag.AboveEqual, block51, false);
         masm.pshufd(xmm0, xmm5, 238);
         masm.pand(xmm4, xmm1);
         masm.movdqu(xmm3, xmm1);
         masm.addsd(xmm5, xmm0);
         masm.subsd(xmm1, xmm4);
@@ -1885,12 +1831,11 @@
         masm.mulpd(xmm0, xmm0);
         masm.mulpd(xmm7, xmm1);
         masm.pshufd(xmm6, xmm6, 17);
         masm.mulsd(xmm2, xmm4);
         masm.andl(rdx, 32767);
-        masm.cmpl(rdx, 16529);
-        masm.jcc(AMD64Assembler.ConditionFlag.Above, block12);
+        masm.cmplAndJcc(rdx, 16529, ConditionFlag.Above, block12, false);
         masm.mulsd(xmm0, xmm0);
         masm.paddd(xmm5, xmm6);
         masm.addpd(xmm3, xmm7);
         masm.mulsd(xmm2, xmm5);
         masm.pshufd(xmm6, xmm5, 238);
@@ -1908,14 +1853,12 @@
         masm.addsd(xmm0, xmm3);
         masm.movdqu(xmm1, xmm0);
         masm.addsd(xmm0, xmm5);
         masm.mulsd(xmm0, xmm4);
         masm.pextrw(rax, xmm0, 3);
-        masm.andl(rax, 32752);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block13);
-        masm.cmpl(rax, 32752);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block14);
+        masm.andlAndJcc(rax, 32752, ConditionFlag.Equal, block13, false);
+        masm.cmplAndJcc(rax, 32752, ConditionFlag.Equal, block14, false);
 
         masm.bind(block52);
         masm.jmp(block56);
 
         masm.bind(block45);
@@ -1923,12 +1866,11 @@
         masm.xorpd(xmm2, xmm2);
         masm.movl(rax, 49136);
         masm.pinsrw(xmm2, rax, 3);
         masm.addsd(xmm2, xmm0);
         masm.pextrw(rax, xmm2, 3);
-        masm.cmpl(rax, 0);
-        masm.jcc(AMD64Assembler.ConditionFlag.NotEqual, block53);
+        masm.cmplAndJcc(rax, 0, ConditionFlag.NotEqual, block53, false);
         masm.xorpd(xmm0, xmm0);
         masm.movl(rax, 32760);
         masm.pinsrw(xmm0, rax, 3);
         masm.jmp(block56);
 
@@ -1937,32 +1879,30 @@
         masm.movdl(rdx, xmm1);
         masm.movdqu(xmm3, xmm1);
         masm.psrlq(xmm3, 20);
         masm.movdl(rcx, xmm3);
         masm.orl(rcx, rdx);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block54);
+        masm.jcc(ConditionFlag.Equal, block54);
         masm.addsd(xmm1, xmm1);
         masm.movdqu(xmm0, xmm1);
         masm.jmp(block56);
 
         masm.bind(block51);
         masm.pextrw(rax, xmm1, 3);
         masm.pextrw(rcx, xmm2, 3);
         masm.xorl(rax, rcx);
-        masm.testl(rax, 32768);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block47);
+        masm.testlAndJcc(rax, 32768, ConditionFlag.Equal, block47, false);
         masm.jmp(block46);
 
         masm.bind(block54);
         masm.pextrw(rax, xmm0, 3);
         masm.andl(rax, 32752);
         masm.pextrw(rdx, xmm1, 3);
         masm.xorpd(xmm0, xmm0);
         masm.subl(rax, 16368);
         masm.xorl(rax, rdx);
-        masm.testl(rax, 32768);
-        masm.jcc(AMD64Assembler.ConditionFlag.Equal, block55);
+        masm.testlAndJcc(rax, 32768, ConditionFlag.Equal, block55, false);
         masm.jmp(block56);
 
         masm.bind(block55);
         masm.movl(rdx, 32752);
         masm.pinsrw(xmm0, rdx, 3);
