diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -41,10 +41,11 @@
 import static org.graalvm.compiler.asm.aarch64.AArch64MacroAssembler.AddressGenerationPlan.WorkPlan.ADD_TO_INDEX;
 import static org.graalvm.compiler.asm.aarch64.AArch64MacroAssembler.AddressGenerationPlan.WorkPlan.NO_WORK;
 
 import org.graalvm.compiler.asm.BranchTargetOutOfBoundsException;
 import org.graalvm.compiler.asm.Label;
+import org.graalvm.compiler.asm.aarch64.AArch64MacroAssembler.MovSequenceAnnotation.MovAction;
 import org.graalvm.compiler.core.common.NumUtil;
 import org.graalvm.compiler.debug.GraalError;
 
 import jdk.vm.ci.aarch64.AArch64;
 import jdk.vm.ci.code.Register;
@@ -500,41 +501,200 @@
         } else {
             or(size, dst, zr, src);
         }
     }
 
+    /**
+     * Generates a 32-bit immediate move code sequence.
+     *
+     * @param dst general purpose register. May not be null, stackpointer or zero-register.
+     * @param imm the value to move into the register.
+     * @param needsImmAnnotation Flag denoting if annotation should be added.
+     */
+    private void mov32(Register dst, int imm, boolean needsImmAnnotation) {
+        MovAction[] includeSet = {MovAction.SKIPPED, MovAction.SKIPPED};
+        int pos = position();
+
+        // Split 32-bit imm into low16 and high16 parts.
+        int low16 = imm & 0xFFFF;
+        int high16 = (imm >>> 16) & 0xFFFF;
+
+        // Generate code sequence with a combination of MOVZ or MOVN with MOVK.
+        if (high16 == 0) {
+            movz(32, dst, low16, 0);
+            includeSet[0] = MovAction.USED;
+        } else if (high16 == 0xFFFF) {
+            movn(32, dst, low16 ^ 0xFFFF, 0);
+            includeSet[0] = MovAction.NEGATED;
+        } else if (low16 == 0) {
+            movz(32, dst, high16, 16);
+            includeSet[1] = MovAction.USED;
+        } else if (low16 == 0xFFFF) {
+            movn(32, dst, high16 ^ 0xFFFF, 16);
+            includeSet[1] = MovAction.NEGATED;
+        } else {
+            // Neither of the 2 parts is all-0s or all-1s. Generate 2 instructions.
+            movz(32, dst, low16, 0);
+            movk(32, dst, high16, 16);
+            includeSet[0] = MovAction.USED;
+            includeSet[1] = MovAction.USED;
+        }
+        if (needsImmAnnotation) {
+            annotateImmediateMovSequence(pos, includeSet);
+        }
+    }
+
     /**
      * Generates a 64-bit immediate move code sequence.
      *
      * @param dst general purpose register. May not be null, stackpointer or zero-register.
      * @param imm the value to move into the register
-     * @param annotateImm Flag denoting if annotation should be added.
+     * @param needsImmAnnotation Flag denoting if annotation should be added.
      */
-    private void mov64(Register dst, long imm, boolean annotateImm) {
-        // We have to move all non zero parts of the immediate in 16-bit chunks
-        int numMovs = 0;
+    private void mov64(Register dst, long imm, boolean needsImmAnnotation) {
+        MovAction[] includeSet = {MovAction.SKIPPED, MovAction.SKIPPED, MovAction.SKIPPED, MovAction.SKIPPED};
         int pos = position();
-        boolean firstMove = true;
-        for (int offset = 0; offset < 64; offset += 16) {
-            int chunk = (int) (imm >> offset) & NumUtil.getNbitNumberInt(16);
+        int[] chunks = new int[4];
+        int zeroCount = 0;
+        int negCount = 0;
+
+        // Split 64-bit imm into 4 chunks and count the numbers of all-0 and all-1 chunks.
+        for (int i = 0; i < 4; i++) {
+            int chunk = (int) ((imm >>> (i * 16)) & 0xFFFFL);
             if (chunk == 0) {
-                continue;
+                zeroCount++;
+            } else if (chunk == 0xFFFF) {
+                negCount++;
             }
-            if (firstMove) {
-                movz(64, dst, chunk, offset);
-                firstMove = false;
-            } else {
-                movk(64, dst, chunk, offset);
+            chunks[i] = chunk;
+        }
+
+        // Generate code sequence with a combination of MOVZ or MOVN with MOVK.
+        if (zeroCount == 4) {
+            // Generate only one MOVZ.
+            movz(64, dst, 0, 0);
+            includeSet[0] = MovAction.USED;
+        } else if (negCount == 4) {
+            // Generate only one MOVN.
+            movn(64, dst, 0, 0);
+            includeSet[0] = MovAction.NEGATED;
+        } else if (zeroCount == 3) {
+            // Generate only one MOVZ.
+            for (int i = 0; i < 4; i++) {
+                if (chunks[i] != 0) {
+                    movz(64, dst, chunks[i], i * 16);
+                    includeSet[i] = MovAction.USED;
+                    break;
+                }
+            }
+        } else if (negCount == 3) {
+            // Generate only one MOVN.
+            for (int i = 0; i < 4; i++) {
+                if (chunks[i] != 0xFFFF) {
+                    movn(64, dst, chunks[i] ^ 0xFFFF, i * 16);
+                    includeSet[i] = MovAction.NEGATED;
+                    break;
+                }
+            }
+        } else if (zeroCount == 2) {
+            // Generate one MOVZ and one MOVK.
+            int i;
+            for (i = 0; i < 4; i++) {
+                if (chunks[i] != 0) {
+                    movz(64, dst, chunks[i], i * 16);
+                    includeSet[i] = MovAction.USED;
+                    break;
+                }
+            }
+            for (int k = i + 1; k < 4; k++) {
+                if (chunks[k] != 0) {
+                    movk(64, dst, chunks[k], k * 16);
+                    includeSet[k] = MovAction.USED;
+                    break;
+                }
+            }
+        } else if (negCount == 2) {
+            // Generate one MOVN and one MOVK.
+            int i;
+            for (i = 0; i < 4; i++) {
+                if (chunks[i] != 0xFFFF) {
+                    movn(64, dst, chunks[i] ^ 0xFFFF, i * 16);
+                    includeSet[i] = MovAction.NEGATED;
+                    break;
+                }
+            }
+            for (int k = i + 1; k < 4; k++) {
+                if (chunks[k] != 0xFFFF) {
+                    movk(64, dst, chunks[k], k * 16);
+                    includeSet[k] = MovAction.USED;
+                    break;
+                }
+            }
+        } else if (zeroCount == 1) {
+            // Generate one MOVZ and two MOVKs.
+            int i;
+            for (i = 0; i < 4; i++) {
+                if (chunks[i] != 0) {
+                    movz(64, dst, chunks[i], i * 16);
+                    includeSet[i] = MovAction.USED;
+                    break;
+                }
             }
-            ++numMovs;
+            int numMovks = 0;
+            for (int k = i + 1; k < 4; k++) {
+                if (chunks[k] != 0) {
+                    movk(64, dst, chunks[k], k * 16);
+                    includeSet[k] = MovAction.USED;
+                    numMovks++;
+                }
+            }
+            assert numMovks == 2;
+        } else if (negCount == 1) {
+            // Generate one MOVN and two MOVKs.
+            int i;
+            for (i = 0; i < 4; i++) {
+                if (chunks[i] != 0xFFFF) {
+                    movn(64, dst, chunks[i] ^ 0xFFFF, i * 16);
+                    includeSet[i] = MovAction.NEGATED;
+                    break;
+                }
+            }
+            int numMovks = 0;
+            for (int k = i + 1; k < 4; k++) {
+                if (chunks[k] != 0xFFFF) {
+                    movk(64, dst, chunks[k], k * 16);
+                    includeSet[k] = MovAction.USED;
+                    numMovks++;
+                }
+            }
+            assert numMovks == 2;
+        } else {
+            // Generate one MOVZ and three MOVKs
+            movz(64, dst, chunks[0], 0);
+            movk(64, dst, chunks[1], 16);
+            movk(64, dst, chunks[2], 32);
+            movk(64, dst, chunks[3], 48);
+            includeSet[0] = MovAction.USED;
+            includeSet[1] = MovAction.USED;
+            includeSet[2] = MovAction.USED;
+            includeSet[3] = MovAction.USED;
         }
-        assert !firstMove;
-        if (annotateImm) {
-            annotateImmediateMovSequence(pos, numMovs);
+        if (needsImmAnnotation) {
+            annotateImmediateMovSequence(pos, includeSet);
         }
     }
 
+    /**
+     * Loads immediate into register.
+     *
+     * @param dst general purpose register. May not be null, zero-register or stackpointer.
+     * @param imm immediate loaded into register.
+     */
+    public void mov(Register dst, int imm) {
+        mov(dst, imm, false);
+    }
+
     /**
      * Loads immediate into register.
      *
      * @param dst general purpose register. May not be null, zero-register or stackpointer.
      * @param imm immediate loaded into register.
@@ -546,40 +706,47 @@
     /**
      * Loads immediate into register.
      *
      * @param dst general purpose register. May not be null, zero-register or stackpointer.
      * @param imm immediate loaded into register.
-     * @param annotateImm Flag to signal of the immediate value should be annotated.
+     * @param needsImmAnnotation Flag to signal of the immediate value should be annotated.
      */
-    public void mov(Register dst, long imm, boolean annotateImm) {
+    public void mov(Register dst, int imm, boolean needsImmAnnotation) {
+        if (imm == 0) {
+            mov(32, dst, zr);
+        } else if (isLogicalImmediate(imm)) {
+            or(32, dst, zr, imm);
+        } else {
+            mov32(dst, imm, needsImmAnnotation);
+        }
+    }
+
+    /**
+     * Loads immediate into register.
+     *
+     * @param dst general purpose register. May not be null, zero-register or stackpointer.
+     * @param imm immediate loaded into register.
+     * @param needsImmAnnotation Flag to signal of the immediate value should be annotated.
+     */
+    public void mov(Register dst, long imm, boolean needsImmAnnotation) {
         assert dst.getRegisterCategory().equals(CPU);
         if (imm == 0L) {
             movx(dst, zr);
-        } else if (LogicalImmediateTable.isRepresentable(true, imm) != LogicalImmediateTable.Representable.NO) {
+        } else if (isLogicalImmediate(imm)) {
             or(64, dst, zr, imm);
         } else if (imm >> 32 == -1L && (int) imm < 0 && LogicalImmediateTable.isRepresentable((int) imm) != LogicalImmediateTable.Representable.NO) {
             // If the higher 32-bit are 1s and the sign bit of the lower 32-bits is set *and* we can
             // represent the lower 32 bits as a logical immediate we can create the lower 32-bit and
             // then sign extend
             // them. This allows us to cover immediates like ~1L with 2 instructions.
             mov(dst, (int) imm);
             sxt(64, 32, dst, dst);
         } else {
-            mov64(dst, imm, annotateImm);
+            mov64(dst, imm, needsImmAnnotation);
         }
     }
 
-    /**
-     * Loads immediate into register.
-     *
-     * @param dst general purpose register. May not be null, zero-register or stackpointer.
-     * @param imm immediate loaded into register.
-     */
-    public void mov(Register dst, int imm) {
-        mov(dst, imm & 0xFFFF_FFFFL);
-    }
-
     /**
      * Generates a 48-bit immediate move code sequence. The immediate may later be updated by
      * HotSpot.
      *
      * In AArch64 mode the virtual address space is 48-bits in size, so we only need three
@@ -599,13 +766,13 @@
      * In AArch64 mode the virtual address space is 48-bits in size, so we only need three
      * instructions to create a patchable instruction sequence that can reach anywhere.
      *
      * @param dst general purpose register. May not be null, stackpointer or zero-register.
      * @param imm The immediate address
-     * @param annotateImm Flag to signal of the immediate value should be annotated.
+     * @param needsImmAnnotation Flag to signal of the immediate value should be annotated.
      */
-    public void movNativeAddress(Register dst, long imm, boolean annotateImm) {
+    public void movNativeAddress(Register dst, long imm, boolean needsImmAnnotation) {
         assert (imm & 0xFFFF_0000_0000_0000L) == 0;
         // We have to move all non zero parts of the immediate in 16-bit chunks
         boolean firstMove = true;
         int pos = position();
         for (int offset = 0; offset < 48; offset += 16) {
@@ -615,12 +782,13 @@
                 firstMove = false;
             } else {
                 movk(64, dst, chunk, offset);
             }
         }
-        if (annotateImm) {
-            annotateImmediateMovSequence(pos, 3);
+        if (needsImmAnnotation) {
+            MovAction[] includeSet = {MovAction.USED, MovAction.USED, MovAction.USED};
+            annotateImmediateMovSequence(pos, includeSet);
         }
         assert !firstMove;
     }
 
     /**
@@ -1257,10 +1425,38 @@
      */
     public void ashr(int size, Register dst, Register src, Register shift) {
         super.asr(size, dst, src, shift);
     }
 
+    /**
+     * Rotate right (register). dst = rotateRight(src1, (src2 & (size - 1))).
+     *
+     * @param size register size. Has to be 32 or 64.
+     * @param dst general purpose register. May not be null or stackpointer.
+     * @param src1 general purpose register. May not be null or stackpointer.
+     * @param src2 general purpose register. It holds a shift amount from 0 to (size - 1) in its
+     *            bottom 5 bits. May not be null or stackpointer.
+     */
+    @Override
+    public void rorv(int size, Register dst, Register src1, Register src2) {
+        super.rorv(size, dst, src1, src2);
+    }
+
+    /**
+     * Rotate right (immediate). dst = rotateRight(src1, shift).
+     *
+     * @param size register size. Has to be 32 or 64.
+     * @param dst general purpose register. May not be null or stackpointer.
+     * @param src general purpose register. May not be null or stackpointer.
+     * @param shift amount by which src is rotated. The value depends on the instruction variant, it
+     *            can be 0 to (size - 1).
+     */
+    public void ror(int size, Register dst, Register src, int shift) {
+        assert (0 <= shift && shift <= (size - 1));
+        super.extr(size, dst, src, src, shift);
+    }
+
     /**
      * Clamps shiftAmt into range 0 <= shiftamt < size according to JLS.
      *
      * @param size size of operation.
      * @param shiftAmt arbitrary shift amount.
@@ -1318,10 +1514,46 @@
      */
     public void or(int size, Register dst, Register src, long bimm) {
         super.orr(size, dst, src, bimm);
     }
 
+    /**
+     * dst = src1 & (~src2).
+     *
+     * @param size register size. Has to be 32 or 64.
+     * @param dst general purpose register. May not be null or stackpointer.
+     * @param src1 general purpose register. May not be null or stackpointer.
+     * @param src2 general purpose register. May not be null or stackpointer.
+     */
+    public void bic(int size, Register dst, Register src1, Register src2) {
+        super.bic(size, dst, src1, src2, ShiftType.LSL, 0);
+    }
+
+    /**
+     * dst = src1 ^ (~src2).
+     *
+     * @param size register size. Has to be 32 or 64.
+     * @param dst general purpose register. May not be null or stackpointer.
+     * @param src1 general purpose register. May not be null or stackpointer.
+     * @param src2 general purpose register. May not be null or stackpointer.
+     */
+    public void eon(int size, Register dst, Register src1, Register src2) {
+        super.eon(size, dst, src1, src2, ShiftType.LSL, 0);
+    }
+
+    /**
+     * dst = src1 | (~src2).
+     *
+     * @param size register size. Has to be 32 or 64.
+     * @param dst general purpose register. May not be null or stackpointer.
+     * @param src1 general purpose register. May not be null or stackpointer.
+     * @param src2 general purpose register. May not be null or stackpointer.
+     */
+    public void orn(int size, Register dst, Register src1, Register src2) {
+        super.orn(size, dst, src1, src2, ShiftType.LSL, 0);
+    }
+
     /**
      * dst = ~src.
      *
      * @param size register size. Has to be 32 or 64.
      * @param dst general purpose register. May not be null or stackpointer.
@@ -2057,42 +2289,80 @@
         cnt(fixedSize, vreg, vreg);
         addv(fixedSize, SIMDElementSize.Byte, vreg, vreg);
         umov(fixedSize, dst, 0, vreg);
     }
 
-    public interface MacroInstruction {
-        void patch(int codePos, int relative, byte[] code);
-    }
-
     /**
      * Emits elf patchable adrp ldr sequence.
      */
     public void adrpLdr(int srcSize, Register result, AArch64Address a) {
         if (codePatchingAnnotationConsumer != null) {
-            codePatchingAnnotationConsumer.accept(new AdrpLdrMacroInstruction(position()));
+            codePatchingAnnotationConsumer.accept(new AdrpLdrMacroInstruction(position(), srcSize));
         }
         super.adrp(a.getBase());
         this.ldr(srcSize, result, a);
     }
 
-    public static class AdrpLdrMacroInstruction extends CodeAnnotation implements MacroInstruction {
-        public AdrpLdrMacroInstruction(int position) {
+    public static class AdrpLdrMacroInstruction extends AArch64Assembler.PatchableCodeAnnotation {
+        public final int srcSize;
+
+        public AdrpLdrMacroInstruction(int position, int srcSize) {
             super(position);
+            this.srcSize = srcSize;
         }
 
         @Override
         public String toString() {
             return "ADRP_LDR";
         }
 
         @Override
         public void patch(int codePos, int relative, byte[] code) {
-            throw GraalError.unimplemented();
+            int shiftSize = 0;
+            switch (srcSize) {
+                case 64:
+                    shiftSize = 3;
+                    break;
+                case 32:
+                    shiftSize = 2;
+                    break;
+                case 16:
+                    shiftSize = 1;
+                    break;
+                case 8:
+                    shiftSize = 0;
+                    break;
+                default:
+                    assert false : "srcSize must be either 8, 16, 32, or 64";
+            }
+
+            int pos = instructionPosition;
+
+            int targetAddress = pos + relative;
+            assert shiftSize == 0 || (targetAddress & ((1 << shiftSize) - 1)) == 0 : "shift bits must be zero";
+
+            int relativePageDifference = PatcherUtil.computeRelativePageDifference(targetAddress, pos, 1 << 12);
+
+            // adrp imm_hi bits
+            int curValue = (relativePageDifference >> 2) & 0x7FFFF;
+            int[] adrHiBits = {3, 8, 8};
+            int[] adrHiOffsets = {5, 0, 0};
+            PatcherUtil.writeBitSequence(code, pos, curValue, adrHiBits, adrHiOffsets);
+            // adrp imm_lo bits
+            curValue = relativePageDifference & 0x3;
+            int[] adrLoBits = {2};
+            int[] adrLoOffsets = {5};
+            PatcherUtil.writeBitSequence(code, pos + 3, curValue, adrLoBits, adrLoOffsets);
+            // ldr bits
+            curValue = (targetAddress >> shiftSize) & 0x1FF;
+            int[] ldrBits = {6, 6};
+            int[] ldrOffsets = {2, 0};
+            PatcherUtil.writeBitSequence(code, pos + 5, curValue, ldrBits, ldrOffsets);
         }
     }
 
-    public static class AdrpAddMacroInstruction extends CodeAnnotation implements MacroInstruction {
+    public static class AdrpAddMacroInstruction extends AArch64Assembler.PatchableCodeAnnotation {
         public AdrpAddMacroInstruction(int position) {
             super(position);
         }
 
         @Override
@@ -2100,9 +2370,96 @@
             return "ADRP_ADD";
         }
 
         @Override
         public void patch(int codePos, int relative, byte[] code) {
-            throw GraalError.unimplemented();
+            int pos = instructionPosition;
+            int targetAddress = pos + relative;
+            int relativePageDifference = PatcherUtil.computeRelativePageDifference(targetAddress, pos, 1 << 12);
+            // adrp imm_hi bits
+            int curValue = (relativePageDifference >> 2) & 0x7FFFF;
+            int[] adrHiBits = {3, 8, 8};
+            int[] adrHiOffsets = {5, 0, 0};
+            PatcherUtil.writeBitSequence(code, pos, curValue, adrHiBits, adrHiOffsets);
+            // adrp imm_lo bits
+            curValue = relativePageDifference & 0x3;
+            int[] adrLoBits = {2};
+            int[] adrLoOffsets = {5};
+            PatcherUtil.writeBitSequence(code, pos + 3, curValue, adrLoBits, adrLoOffsets);
+            // add bits
+            curValue = targetAddress & 0xFFF;
+            int[] addBits = {6, 6};
+            int[] addOffsets = {2, 0};
+            PatcherUtil.writeBitSequence(code, pos + 5, curValue, addBits, addOffsets);
+        }
+    }
+
+    private void annotateImmediateMovSequence(int pos, MovSequenceAnnotation.MovAction[] includeSet) {
+        if (codePatchingAnnotationConsumer != null) {
+            codePatchingAnnotationConsumer.accept(new MovSequenceAnnotation(pos, includeSet));
+        }
+    }
+
+    public static class MovSequenceAnnotation extends AArch64Assembler.PatchableCodeAnnotation {
+
+        /**
+         * An enum to indicate how each 16-bit immediate chunk is represented within a sequence of
+         * mov instructions.
+         */
+        public enum MovAction {
+            USED, // mov instruction is in place for this chunk.
+            SKIPPED, // no mov instruction is in place for this chunk.
+            NEGATED; // movn instruction is in place for this chunk.
+        }
+
+        /**
+         * The size of the operand, in bytes.
+         */
+        public final MovAction[] includeSet;
+
+        MovSequenceAnnotation(int instructionPosition, MovAction[] includeSet) {
+            super(instructionPosition);
+            this.includeSet = includeSet;
+        }
+
+        @Override
+        public String toString() {
+            return "MOV_SEQ";
+        }
+
+        @Override
+        public void patch(int codePos, int relative, byte[] code) {
+            /*
+             * Each move has a 16 bit immediate operand. We use a series of shifted moves to
+             * represent immediate values larger than 16 bits.
+             */
+            int curValue = relative;
+            int[] bitsUsed = {3, 8, 5};
+            int[] offsets = {5, 0, 0};
+            int siteOffset = 0;
+            boolean containsNegatedMov = false;
+            for (MovAction include : includeSet) {
+                if (include == MovAction.NEGATED) {
+                    containsNegatedMov = true;
+                    break;
+                }
+            }
+            for (int i = 0; i < includeSet.length; i++) {
+                int value = curValue & 0xFFFF;
+                curValue = curValue >> 16;
+                switch (includeSet[i]) {
+                    case USED:
+                        break;
+                    case SKIPPED:
+                        assert value == (containsNegatedMov ? 0xFFFF : 0) : "Unable to patch this value.";
+                        continue;
+                    case NEGATED:
+                        value = value ^ 0xFFFF;
+                        break;
+                }
+                int bytePosition = instructionPosition + siteOffset;
+                PatcherUtil.writeBitSequence(code, bytePosition, value, bitsUsed, offsets);
+                siteOffset += 4;
+            }
         }
     }
 }
