diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionKey.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionKey.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionKey.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.options/src/org/graalvm/compiler/options/OptionKey.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -25,10 +25,11 @@
 package org.graalvm.compiler.options;
 
 import java.util.Formatter;
 
 import jdk.internal.vm.compiler.collections.EconomicMap;
+import jdk.internal.vm.compiler.collections.UnmodifiableEconomicMap;
 
 /**
  * A key for an option. The value for an option is obtained from an {@link OptionValues} object.
  */
 public class OptionKey<T> {
@@ -143,11 +144,11 @@
     /**
      * Gets the value of this option in {@code values} if it is present, otherwise
      * {@link #getDefaultValue()}.
      */
     @SuppressWarnings("unchecked")
-    public T getValueOrDefault(EconomicMap<OptionKey<?>, Object> values) {
+    public T getValueOrDefault(UnmodifiableEconomicMap<OptionKey<?>, Object> values) {
         if (!values.containsKey(this)) {
             return defaultValue;
         }
         return (T) values.get(this);
     }
@@ -155,11 +156,11 @@
     /**
      * Sets the value of this option in a given map. The
      * {@link #onValueUpdate(EconomicMap, Object, Object)} method is called once the value is set.
      *
      * @param values map of option values
-     * @param v the value to set for this key in {@code map}
+     * @param v the value to set for this key in {@code values}
      */
     @SuppressWarnings("unchecked")
     public void update(EconomicMap<OptionKey<?>, Object> values, Object v) {
         T oldValue = (T) values.put(this, v);
         onValueUpdate(values, oldValue, (T) v);
@@ -168,11 +169,11 @@
     /**
      * Sets the value of this option in a given map if it doesn't already have a value. The
      * {@link #onValueUpdate(EconomicMap, Object, Object)} method is called once the value is set.
      *
      * @param values map of option values
-     * @param v the value to set for this key in {@code map}
+     * @param v the value to set for this key in {@code values}
      */
     @SuppressWarnings("unchecked")
     public void putIfAbsent(EconomicMap<OptionKey<?>, Object> values, Object v) {
         if (!values.containsKey(this)) {
             T oldValue = (T) values.put(this, v);
