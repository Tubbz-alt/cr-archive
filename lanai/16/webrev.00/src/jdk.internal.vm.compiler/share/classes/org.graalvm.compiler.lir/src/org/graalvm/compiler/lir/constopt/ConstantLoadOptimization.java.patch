diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/constopt/ConstantLoadOptimization.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/constopt/ConstantLoadOptimization.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/constopt/ConstantLoadOptimization.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/constopt/ConstantLoadOptimization.java
@@ -33,10 +33,11 @@
 import java.util.Collections;
 import java.util.Deque;
 import java.util.EnumSet;
 import java.util.List;
 
+import org.graalvm.compiler.core.common.LIRKind;
 import org.graalvm.compiler.core.common.cfg.AbstractBlockBase;
 import org.graalvm.compiler.core.common.cfg.BlockMap;
 import org.graalvm.compiler.debug.CounterKey;
 import org.graalvm.compiler.debug.DebugContext;
 import org.graalvm.compiler.debug.Indent;
@@ -57,10 +58,11 @@
 import org.graalvm.compiler.options.NestedBooleanOptionKey;
 import org.graalvm.compiler.options.Option;
 import org.graalvm.compiler.options.OptionType;
 
 import jdk.vm.ci.code.TargetDescription;
+import jdk.vm.ci.meta.AllocatableValue;
 import jdk.vm.ci.meta.Constant;
 import jdk.vm.ci.meta.Value;
 import jdk.vm.ci.meta.ValueKind;
 
 /**
@@ -85,10 +87,11 @@
 
     private static final CounterKey constantsTotal = DebugContext.counter("ConstantLoadOptimization[total]");
     private static final CounterKey phiConstantsSkipped = DebugContext.counter("ConstantLoadOptimization[PhisSkipped]");
     private static final CounterKey singleUsageConstantsSkipped = DebugContext.counter("ConstantLoadOptimization[SingleUsageSkipped]");
     private static final CounterKey usageAtDefinitionSkipped = DebugContext.counter("ConstantLoadOptimization[UsageAtDefinitionSkipped]");
+    private static final CounterKey basePointerUsagesSkipped = DebugContext.counter("ConstantLoadOptimization[BasePointerUsagesSkipped]");
     private static final CounterKey materializeAtDefinitionSkipped = DebugContext.counter("ConstantLoadOptimization[MaterializeAtDefinitionSkipped]");
     private static final CounterKey constantsOptimized = DebugContext.counter("ConstantLoadOptimization[optimized]");
 
     private static final class Optimization {
         private final LIR lir;
@@ -197,11 +200,21 @@
             try (Indent indent = debug.logAndIndent("Block: %s", block)) {
 
                 InstructionValueConsumer loadConsumer = (instruction, value, mode, flags) -> {
                     if (isVariable(value)) {
                         Variable var = (Variable) value;
-
+                        AllocatableValue base = getBasePointer(var);
+                        if (base != null && base instanceof Variable) {
+                            if (map.remove((Variable) base) != null) {
+                                // We do not want optimize constants which are used as base
+                                // pointer. The reason is that it would require to update all
+                                // the derived Variables (LIRKind and so on)
+                                map.remove(var);
+                                basePointerUsagesSkipped.increment(debug);
+                                debug.log("skip optimizing %s because it is used as base pointer", base);
+                            }
+                        }
                         if (!phiConstants.get(var.index)) {
                             if (!defined.get(var.index)) {
                                 defined.set(var.index);
                                 if (isConstantLoad(instruction)) {
                                     debug.log("constant load: %s", instruction);
@@ -247,10 +260,19 @@
 
                 }
             }
         }
 
+        private static AllocatableValue getBasePointer(Value value) {
+            ValueKind<?> kind = value.getValueKind();
+            if (kind instanceof LIRKind) {
+                return ((LIRKind) kind).getDerivedReferenceBase();
+            } else {
+                return null;
+            }
+        }
+
         /**
          * Creates the dominator tree and searches for an solution.
          */
         @SuppressWarnings("try")
         private void createConstantTree(DefUseTree tree) {
