diff a/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacPkgBundler.java b/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacPkgBundler.java
--- a/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacPkgBundler.java
+++ b/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacPkgBundler.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -360,10 +360,11 @@
     private String getRoot(Map<String, ? super Object> params,
             File appLocation) throws IOException {
         String root = appLocation.getParent() == null ?
                 "." : appLocation.getParent();
         File rootDir = new File(root);
+
         File[] list = rootDir.listFiles();
         if (list != null) { // Should not happend
             // We should only have app image and/or .DS_Store
             if (list.length == 1) {
                 return root;
@@ -376,15 +377,29 @@
             }
         }
 
         // Copy to new root
         Path newRoot = Files.createTempDirectory(
-                TEMP_ROOT.fetchFrom(params).toPath(),
-                "root-");
-
-        IOUtils.copyRecursive(appLocation.toPath(),
-                newRoot.resolve(appLocation.getName()));
+                TEMP_ROOT.fetchFrom(params).toPath(), "root-");
+
+        Path source, dest;
+
+        if (StandardBundlerParam.isRuntimeInstaller(params)) {
+            // firs, is this already a runtime with
+            // <runtime>/Contents/Home - if so we need the Home dir
+            Path original = appLocation.toPath();
+            Path home = original.resolve("Contents/Home");
+            source = (Files.exists(home)) ? home : original;
+
+            // Then we need to put back the <NAME>/Content/Home
+            dest = newRoot.resolve(
+                MAC_CF_BUNDLE_IDENTIFIER.fetchFrom(params) + "/Contents/Home");
+        } else {
+            source = appLocation.toPath();
+            dest = newRoot.resolve(appLocation.getName());
+        }
+        IOUtils.copyRecursive(source, dest);
 
         return newRoot.toString();
     }
 
     private File createPKG(Map<String, ? super Object> params,
@@ -420,10 +435,12 @@
                     MAC_INSTALL_DIR.fetchFrom(params),
                     "--component-plist",
                     cpl.getAbsolutePath(),
                     "--scripts",
                     SCRIPTS_DIR.fetchFrom(params).getAbsolutePath(),
+                    "--identifier",
+                     MAC_CF_BUNDLE_IDENTIFIER.fetchFrom(params),
                     appPKG.getAbsolutePath());
             IOUtils.exec(pb);
 
             // build final package
             File finalPKG = new File(outdir, INSTALLER_NAME.fetchFrom(params)
@@ -491,26 +508,47 @@
     @Override
     public String getID() {
         return "pkg";
     }
 
+    private static boolean isValidBundleIdentifier(String id) {
+        for (int i = 0; i < id.length(); i++) {
+            char a = id.charAt(i);
+            // We check for ASCII codes first which we accept. If check fails,
+            // check if it is acceptable extended ASCII or unicode character.
+            if ((a >= 'A' && a <= 'Z') || (a >= 'a' && a <= 'z')
+                    || (a >= '0' && a <= '9') || (a == '-' || a == '.')) {
+                continue;
+            }
+            return false;
+        }
+        return true;
+    }
+
     @Override
     public boolean validate(Map<String, ? super Object> params)
             throws ConfigException {
         try {
             Objects.requireNonNull(params);
 
             // run basic validation to ensure requirements are met
             // we are not interested in return code, only possible exception
             validateAppImageAndBundeler(params);
 
-            if (MAC_CF_BUNDLE_IDENTIFIER.fetchFrom(params) == null) {
+            String identifier = MAC_CF_BUNDLE_IDENTIFIER.fetchFrom(params);
+            if (identifier == null) {
                 throw new ConfigException(
                         I18N.getString("message.app-image-requires-identifier"),
                         I18N.getString(
                             "message.app-image-requires-identifier.advice"));
             }
+            if (!isValidBundleIdentifier(identifier)) {
+                throw new ConfigException(
+                        MessageFormat.format(I18N.getString(
+                        "message.invalid-identifier"), identifier),
+                        I18N.getString("message.invalid-identifier.advice"));
+            }
 
             // reject explicitly set sign to true and no valid signature key
             if (Optional.ofNullable(MacAppImageBuilder.
                     SIGN_BUNDLE.fetchFrom(params)).orElse(Boolean.FALSE)) {
                 String signingIdentity =
