diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SingleIndexWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SingleIndexWriter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SingleIndexWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SingleIndexWriter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -26,15 +26,16 @@
 package jdk.javadoc.internal.doclets.formats.html;
 
 import java.util.Set;
 import java.util.TreeSet;
 
+import jdk.javadoc.internal.doclets.formats.html.SearchIndexItem.Category;
 import jdk.javadoc.internal.doclets.formats.html.markup.BodyContents;
 import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;
 import jdk.javadoc.internal.doclets.formats.html.markup.Entity;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;
-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTag;
+import jdk.javadoc.internal.doclets.formats.html.markup.TagName;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;
 import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;
 import jdk.javadoc.internal.doclets.toolkit.Content;
 import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;
 import jdk.javadoc.internal.doclets.toolkit.util.DocPath;
@@ -62,30 +63,30 @@
      * Construct the SingleIndexWriter with filename "index-all.html" and the
      * {@link IndexBuilder}
      *
      * @param configuration the configuration for this doclet
      * @param filename     Name of the index file to be generated.
-     * @param indexbuilder Unicode based Index from {@link IndexBuilder}
+     * @param indexBuilder Unicode based Index from {@link IndexBuilder}
      */
     public SingleIndexWriter(HtmlConfiguration configuration,
                              DocPath filename,
-                             IndexBuilder indexbuilder) {
-        super(configuration, filename, indexbuilder);
+                             IndexBuilder indexBuilder) {
+        super(configuration, filename, indexBuilder);
     }
 
     /**
      * Generate single index file, for all Unicode characters.
      *
      * @param configuration the configuration for this doclet
-     * @param indexbuilder IndexBuilder built by {@link IndexBuilder}
+     * @param indexBuilder IndexBuilder built by {@link IndexBuilder}
      * @throws DocFileIOException if there is a problem generating the index
      */
     public static void generate(HtmlConfiguration configuration,
-                                IndexBuilder indexbuilder) throws DocFileIOException {
+                                IndexBuilder indexBuilder) throws DocFileIOException {
         DocPath filename = DocPaths.INDEX_ALL;
         SingleIndexWriter indexgen = new SingleIndexWriter(configuration,
-                                         filename, indexbuilder);
+                                         filename, indexBuilder);
         indexgen.generateIndexFile();
     }
 
     /**
      * Generate the contents of each index file, with Header, Footer,
@@ -96,65 +97,63 @@
         String title = resources.getText("doclet.Window_Single_Index");
         HtmlTree body = getBody(getWindowTitle(title));
         Content headerContent = new ContentBuilder();
         addTop(headerContent);
         navBar.setUserHeader(getUserHeaderFooter(true));
-        headerContent.add(navBar.getContent(true));
-        HtmlTree divTree = new HtmlTree(HtmlTag.DIV);
-        divTree.setStyle(HtmlStyle.contentContainer);
-        elements = new TreeSet<>(indexbuilder.getIndexMap().keySet());
-        elements.addAll(configuration.tagSearchIndexKeys);
-        addLinksForIndexes(divTree);
+        headerContent.add(navBar.getContent(Navigation.Position.TOP));
+        Content mainContent = new ContentBuilder();
+        elements = new TreeSet<>(indexBuilder.asMap().keySet());
+        elements.addAll(tagSearchIndexMap.keySet());
+        addLinksForIndexes(mainContent);
         for (Character unicode : elements) {
-            if (configuration.tagSearchIndexMap.get(unicode) == null) {
-                addContents(unicode, indexbuilder.getMemberList(unicode), divTree);
-            } else if (indexbuilder.getMemberList(unicode) == null) {
-                addSearchContents(unicode, configuration.tagSearchIndexMap.get(unicode), divTree);
+            if (tagSearchIndexMap.get(unicode) == null) {
+                addContents(unicode, indexBuilder.getMemberList(unicode), mainContent);
+            } else if (indexBuilder.getMemberList(unicode) == null) {
+                addSearchContents(unicode, tagSearchIndexMap.get(unicode), mainContent);
             } else {
-                addContents(unicode, indexbuilder.getMemberList(unicode),
-                        configuration.tagSearchIndexMap.get(unicode), divTree);
+                addContents(unicode, indexBuilder.getMemberList(unicode),
+                            tagSearchIndexMap.get(unicode), mainContent);
             }
         }
-        addLinksForIndexes(divTree);
+        addLinksForIndexes(mainContent);
         HtmlTree footer = HtmlTree.FOOTER();
         navBar.setUserFooter(getUserHeaderFooter(false));
-        footer.add(navBar.getContent(false));
+        footer.add(navBar.getContent(Navigation.Position.BOTTOM));
         addBottom(footer);
         body.add(new BodyContents()
                 .setHeader(headerContent)
                 .addMainContent(HtmlTree.DIV(HtmlStyle.header,
                         HtmlTree.HEADING(Headings.PAGE_TITLE_HEADING,
                                 contents.getContent("doclet.Index"))))
-                .addMainContent(divTree)
-                .setFooter(footer)
-                .toContent());
+                .addMainContent(mainContent)
+                .setFooter(footer));
         createSearchIndexFiles();
         printHtmlDocument(null, "index", body);
     }
 
     /**
      * Add links for all the Index Files per unicode character.
      *
      * @param contentTree the content tree to which the links for indexes will be added
      */
     protected void addLinksForIndexes(Content contentTree) {
-        for (Object ch : elements) {
+        for (Character ch : elements) {
             String unicode = ch.toString();
             contentTree.add(
                     links.createLink(getNameForIndex(unicode),
-                            new StringContent(unicode)));
+                                     new StringContent(unicode)));
             contentTree.add(Entity.NO_BREAK_SPACE);
         }
-        contentTree.add(new HtmlTree(HtmlTag.BR));
+        contentTree.add(new HtmlTree(TagName.BR));
         contentTree.add(links.createLink(DocPaths.ALLCLASSES_INDEX,
-                contents.allClassesLabel));
+                                         contents.allClassesLabel));
         if (!configuration.packages.isEmpty()) {
             contentTree.add(getVerticalSeparator());
             contentTree.add(links.createLink(DocPaths.ALLPACKAGES_INDEX,
-                    contents.allPackagesLabel));
+                                             contents.allPackagesLabel));
         }
-        if (!configuration.tagSearchIndex.isEmpty()) {
+        if (searchItems.containsAnyOfCategories(Category.SYSTEM_PROPERTY)) {
             contentTree.add(getVerticalSeparator());
             contentTree.add(links.createLink(DocPaths.SYSTEM_PROPERTIES, contents.systemPropertiesLabel));
         }
     }
 }
