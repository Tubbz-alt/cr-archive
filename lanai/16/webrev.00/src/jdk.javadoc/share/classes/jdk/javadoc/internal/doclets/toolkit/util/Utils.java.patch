diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Utils.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Utils.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Utils.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Utils.java
@@ -93,12 +93,15 @@
 import javax.tools.StandardLocation;
 
 import com.sun.source.doctree.DocCommentTree;
 import com.sun.source.doctree.DocTree;
 import com.sun.source.doctree.DocTree.Kind;
+import com.sun.source.doctree.EndElementTree;
 import com.sun.source.doctree.ParamTree;
 import com.sun.source.doctree.SerialFieldTree;
+import com.sun.source.doctree.StartElementTree;
+import com.sun.source.doctree.TextTree;
 import com.sun.source.doctree.UnknownBlockTagTree;
 import com.sun.source.tree.CompilationUnitTree;
 import com.sun.source.tree.LineMap;
 import com.sun.source.util.DocSourcePositions;
 import com.sun.source.util.DocTrees;
@@ -212,15 +215,14 @@
      * @param  members    Array of members to choose from.
      * @return List       List of eligible members for whom
      *                    documentation is getting generated.
      */
     public List<Element> excludeDeprecatedMembers(List<? extends Element> members) {
-        List<Element> excludeList = members.stream()
-                .filter((member) -> (!isDeprecated(member)))
-                .sorted(makeGeneralPurposeComparator())
-                .collect(Collectors.<Element, List<Element>>toCollection(ArrayList::new));
-        return excludeList;
+        return members.stream()
+                      .filter(member -> !isDeprecated(member))
+                      .sorted(makeGeneralPurposeComparator())
+                      .collect(Collectors.toCollection(ArrayList::new));
     }
 
     /**
      * Search for the given method in the given class.
      *
@@ -228,12 +230,12 @@
      * @param  method    Method to be searched.
      * @return ExecutableElement Method found, null otherwise.
      */
     public ExecutableElement findMethod(TypeElement te, ExecutableElement method) {
         for (Element m : getMethods(te)) {
-            if (executableMembersEqual(method, (ExecutableElement)m)) {
-                return (ExecutableElement)m;
+            if (executableMembersEqual(method, (ExecutableElement) m)) {
+                return (ExecutableElement) m;
             }
         }
         return null;
     }
 
@@ -251,11 +253,10 @@
     /**
      * @param e1 the first method to compare.
      * @param e2 the second method to compare.
      * @return true if member1 overrides/hides or is overridden/hidden by member2.
      */
-
     public boolean executableMembersEqual(ExecutableElement e1, ExecutableElement e2) {
         // TODO: investigate if Elements.hides(..) will work here.
         if (isStatic(e1) && isStatic(e2)) {
             List<? extends VariableElement> parameters1 = e1.getParameters();
             List<? extends VariableElement> parameters2 = e2.getParameters();
@@ -271,11 +272,11 @@
                             isTypeVariable(v1.asType()) || isTypeVariable(v2.asType()))) {
                         break;
                     }
                 }
                 if (j == parameters1.size()) {
-                return true;
+                    return true;
                 }
             }
             return false;
         } else {
             return elementUtils.overrides(e1, e2, getEnclosingTypeElement(e1)) ||
@@ -506,11 +507,11 @@
                     append("static");
                 }
             }
 
             void addModifiers(Set<Modifier> modifiers) {
-                modifiers.stream().map(Modifier::toString).forEach(this::append);
+                modifiers.stream().map(Modifier::toString).forEachOrdered(this::append);
             }
 
             void append(String s) {
                 if (sb.length() > 0) {
                     sb.append(" ");
@@ -520,11 +521,11 @@
 
             String finalString(String s) {
                 append(s);
                 if (trailingSpace) {
                     sb.append(" ");
-                    }
+                }
                 return sb.toString();
             }
 
             @Override
             public String visitTypeAsInterface(TypeElement e, SortedSet<Modifier> mods) {
@@ -663,11 +664,11 @@
     }
 
     /**
      * Get the signature. It is the parameter list, type is qualified.
      * For instance, for a method {@code mymethod(String x, int y)},
-     * it will return {@code(java.lang.String,int)}.
+     * it will return {@code (java.lang.String,int)}.
      *
      * @param e
      * @return String
      */
     public String signature(ExecutableElement e) {
@@ -927,13 +928,11 @@
         return null;
     }
 
     public SortedSet<TypeElement> getTypeElementsAsSortedSet(Iterable<TypeElement> typeElements) {
         SortedSet<TypeElement> set = new TreeSet<>(makeGeneralPurposeComparator());
-        for (TypeElement te : typeElements) {
-            set.add(te);
-        }
+        typeElements.forEach(set::add);
         return set;
     }
 
     public List<? extends DocTree> getSerialDataTrees(ExecutableElement member) {
         return getBlockTags(member, SERIAL_DATA);
@@ -1245,11 +1244,11 @@
      *
      * @return the type's dimension information as a string.
      */
     public String getDimension(TypeMirror t) {
         return new SimpleTypeVisitor9<String, Void>() {
-            StringBuilder dimension = new StringBuilder("");
+            StringBuilder dimension = new StringBuilder();
             @Override
             public String visitArray(ArrayType t, Void p) {
                 dimension.append("[]");
                 return visit(t.getComponentType());
             }
@@ -1332,11 +1331,10 @@
      * @param te the TypeElement to check.
      * @param lowerCaseOnly true if you want the name returned in lower case.
      *                      If false, the first letter of the name is capitalized.
      * @return
      */
-
     public String getTypeElementName(TypeElement te, boolean lowerCaseOnly) {
         String typeName = "";
         if (isInterface(te)) {
             typeName = "doclet.Interface";
         } else if (isException(te)) {
@@ -1657,10 +1655,44 @@
             secondaryCollator = new DocCollator(configuration.locale, Collator.SECONDARY);
         }
         return secondaryCollator.compare(s1, s2);
     }
 
+    public String getHTMLTitle(Element element) {
+        List<? extends DocTree> preamble = getPreamble(element);
+        StringBuilder sb = new StringBuilder();
+        boolean titleFound = false;
+        loop:
+        for (DocTree dt : preamble) {
+            switch (dt.getKind()) {
+                case START_ELEMENT:
+                    StartElementTree nodeStart = (StartElementTree)dt;
+                    if (Utils.toLowerCase(nodeStart.getName().toString()).equals("title")) {
+                        titleFound = true;
+                    }
+                    break;
+
+                case END_ELEMENT:
+                    EndElementTree nodeEnd = (EndElementTree)dt;
+                    if (Utils.toLowerCase(nodeEnd.getName().toString()).equals("title")) {
+                        break loop;
+                    }
+                    break;
+
+                case TEXT:
+                    TextTree nodeText = (TextTree)dt;
+                    if (titleFound)
+                        sb.append(nodeText.getBody());
+                    break;
+
+                default:
+                    // do nothing
+            }
+        }
+        return sb.toString().trim();
+    }
+
     private static class DocCollator {
         private final Map<String, CollationKey> keys;
         private final Collator instance;
         private final int MAX_SIZE = 1000;
         private DocCollator(Locale locale, int strength) {
@@ -1800,10 +1832,11 @@
     public Comparator<Element> makeGeneralPurposeComparator() {
         return makeClassUseComparator();
     }
 
     private Comparator<Element> overrideUseComparator = null;
+
     /**
      * Returns a Comparator for overrides and implements,
      * used primarily on methods, compares the name first,
      * then compares the simple names of the enclosing
      * TypeElement and the fully qualified name of the enclosing TypeElement.
@@ -2009,10 +2042,11 @@
             }
         }.visit(e);
     }
 
     private Comparator<Element> classUseComparator = null;
+
     /**
      * Comparator for ClassUse presentations, and sorts as follows:
      * 1. member names
      * 2. then fully qualified member names
      * 3. then parameter types if applicable
@@ -2340,11 +2374,11 @@
     private Map<ModuleElement, Set<PackageElement>> modulePackageMap = null;
     public Map<ModuleElement, Set<PackageElement>> getModulePackageMap() {
         if (modulePackageMap == null) {
             modulePackageMap = new HashMap<>();
             Set<PackageElement> pkgs = configuration.getIncludedPackageElements();
-            pkgs.forEach((pkg) -> {
+            pkgs.forEach(pkg -> {
                 ModuleElement mod = elementUtils.getModuleOf(pkg);
                 modulePackageMap.computeIfAbsent(mod, m -> new HashSet<>()).add(pkg);
             });
         }
         return modulePackageMap;
@@ -2381,11 +2415,11 @@
         return result;
     }
 
     public String getModifiers(RequiresDirective rd) {
         StringBuilder modifiers = new StringBuilder();
-        String sep="";
+        String sep = "";
         if (rd.isTransitive()) {
             modifiers.append("transitive");
             sep = " ";
         }
         if (rd.isStatic()) {
@@ -3270,15 +3304,11 @@
         }
         return out;
     }
 
     public  List<? extends DocTree> getReturnTrees(Element element) {
-        List<DocTree> out = new ArrayList<>();
-        for (DocTree dt : getBlockTags(element, RETURN)) {
-            out.add(dt);
-        }
-        return out;
+        return new ArrayList<>(getBlockTags(element, RETURN));
     }
 
     public List<? extends DocTree> getUsesTrees(Element element) {
         return getBlockTags(element, USES);
     }
@@ -3286,15 +3316,11 @@
     public List<? extends DocTree> getFirstSentenceTrees(Element element) {
         DocCommentTree dcTree = getDocCommentTree(element);
         if (dcTree == null) {
             return Collections.emptyList();
         }
-        List<DocTree> out = new ArrayList<>();
-        for (DocTree dt : dcTree.getFirstSentence()) {
-            out.add(dt);
-        }
-        return out;
+        return new ArrayList<>(dcTree.getFirstSentence());
     }
 
     public ModuleElement containingModule(Element e) {
         return elementUtils.getModuleOf(e);
     }
@@ -3359,13 +3385,14 @@
             return newValue;
         }
     }
 
     /**
-     * A simple pair container.
-     * @param <K> first a value
-     * @param <L> second another value
+     * A container holding a pair of values (tuple).
+     *
+     * @param <K> the type of the first value
+     * @param <L> the type of the second value
      */
     public static class Pair<K, L> {
         public final K first;
         public final L second;
 
@@ -3374,11 +3401,9 @@
             this.second = second;
         }
 
         @Override
         public String toString() {
-            StringBuffer out = new StringBuffer();
-            out.append(first + ":" + second);
-            return out.toString();
+            return first + ":" + second;
         }
     }
 }
