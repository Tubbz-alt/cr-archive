diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/ElementsTable.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/ElementsTable.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/ElementsTable.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/ElementsTable.java
@@ -171,11 +171,11 @@
     private final Map<String, Entry> entries = new LinkedHashMap<>();
 
     // specified elements
     private Set<ModuleElement> specifiedModuleElements = new LinkedHashSet<>();
     private Set<PackageElement> specifiedPackageElements = new LinkedHashSet<>();
-    private Set<TypeElement> specifiedTypeElements =new LinkedHashSet<>();
+    private Set<TypeElement> specifiedTypeElements = new LinkedHashSet<>();
 
     // included elements
     private Set<ModuleElement> includedModuleElements = null;
     private Set<PackageElement> includedPackageElements = null;
     private Set<TypeElement> includedTypeElements = null;
@@ -419,24 +419,22 @@
             if (moduleLocations.contains(StandardLocation.SOURCE_PATH)) {
                 sanityCheckSourcePathModules(modules);
             }
             mlist.add(m);
             ModuleSymbol msym = syms.enterModule(names.fromString(m));
-            specifiedModuleElements.add((ModuleElement) msym);
+            specifiedModuleElements.add(msym);
         }
 
         // scan for modules with qualified packages
         cmdLinePackages.stream()
-                .filter((mpkg) -> (mpkg.hasModule()))
-                .forEachOrdered((mpkg) -> {
-                    mlist.add(mpkg.moduleName);
-        });
+                .filter(ModulePackage::hasModule)
+                .forEachOrdered(mpkg -> mlist.add(mpkg.moduleName));
 
         // scan for modules with qualified subpackages
         options.subpackages().stream()
             .map(ModulePackage::new)
-            .forEachOrdered((mpkg) -> {
+            .forEachOrdered(mpkg -> {
                 subPackages.add(mpkg);
                 if (mpkg.hasModule()) {
                     mlist.add(mpkg.moduleName);
                 }
             });
@@ -479,11 +477,11 @@
      * names
      */
     ElementsTable packages(Collection<String> packageNames) {
         packageNames.stream()
             .map(ModulePackage::new)
-            .forEachOrdered((mpkg) -> cmdLinePackages.add(mpkg));
+            .forEachOrdered(mpkg -> cmdLinePackages.add(mpkg));
         return this;
     }
 
     /**
      * Returns the aggregate set of included packages and specified
@@ -500,15 +498,13 @@
     }
 
     private void computeSubpackages() throws ToolException {
         options.excludes().stream()
                 .map(ModulePackage::new)
-                .forEachOrdered((mpkg) -> excludePackages.add(mpkg));
+                .forEachOrdered(mpkg -> excludePackages.add(mpkg));
 
-        excludePackages.forEach((p) -> {
-            getEntry(p).excluded = true;
-        });
+        excludePackages.forEach(p -> getEntry(p).excluded = true);
 
         for (ModulePackage modpkg : subPackages) {
             List<Location> locs = getLocation(modpkg);
             for (Location loc : locs) {
                 addPackagesFromLocations(loc, modpkg);
@@ -719,15 +715,13 @@
         });
 
         // process types
         Set<TypeElement> iclasses = new LinkedHashSet<>();
         // add all types enclosed in expanded modules and packages
-        ipackages.forEach((pkg) -> {
-            addAllClasses(iclasses, pkg);
-        });
+        ipackages.forEach(pkg -> addAllClasses(iclasses, pkg));
         // add all types and its nested types
-        specifiedTypeElements.forEach((klass) -> {
+        specifiedTypeElements.forEach(klass -> {
             ModuleElement mdle = toolEnv.elements.getModuleOf(klass);
             if (mdle != null && !mdle.isUnnamed())
                 imodules.add(mdle);
             PackageElement pkg = toolEnv.elements.getPackageOf(klass);
             ipackages.add(pkg);
@@ -746,11 +740,11 @@
     private void computeSpecifiedPackages() throws ToolException {
 
         computeSubpackages();
 
         Set<PackageElement> packlist = new LinkedHashSet<>();
-        cmdLinePackages.forEach((modpkg) -> {
+        cmdLinePackages.forEach(modpkg -> {
             PackageElement pkg;
             if (modpkg.hasModule()) {
                 ModuleElement mdle = toolEnv.elements.getModuleElement(modpkg.moduleName);
                 pkg = toolEnv.elements.getPackageElement(mdle, modpkg.packageName);
             } else {
@@ -770,12 +764,12 @@
      * Adds all classes as well as inner classes, to the specified
      * list.
      */
     private void computeSpecifiedTypes() throws ToolException {
         Set<TypeElement> classes = new LinkedHashSet<>();
-          classDecList.forEach((def) -> {
-            TypeElement te = (TypeElement) def.sym;
+          classDecList.forEach(def -> {
+            TypeElement te = def.sym;
             if (te != null) {
                 addAllClasses(classes, te, true);
             }
         });
         for (String className : classArgList) {
