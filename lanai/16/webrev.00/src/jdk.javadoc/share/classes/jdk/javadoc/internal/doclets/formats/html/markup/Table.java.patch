diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,10 +23,12 @@
  * questions.
  */
 
 package jdk.javadoc.internal.doclets.formats.html.markup;
 
+import java.io.IOException;
+import java.io.Writer;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -36,16 +38,14 @@
 import java.util.function.IntFunction;
 import java.util.function.Predicate;
 
 import javax.lang.model.element.Element;
 
-import jdk.javadoc.internal.doclets.formats.html.Contents;
 import jdk.javadoc.internal.doclets.toolkit.Content;
 
 /**
- * A builder for HTML tables, such as the summary tables for various
- * types of element.
+ * An HTML table, such as the summary tables for various kinds of element.
  *
  * <p>The table should be used in three phases:
  * <ol>
  * <li>Configuration: the overall characteristics of the table should be specified
  * <li>Population: the content for the cells in each row should be added
@@ -57,11 +57,11 @@
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
  */
-public class Table {
+public class Table extends Content {
     private final HtmlStyle tableStyle;
     private Content caption;
     private Map<String, Predicate<Element>> tabMap;
     private String defaultTab;
     private Set<String> tabs;
@@ -104,11 +104,11 @@
      * @param captionContent the caption
      * @return this object
      */
     public Table setCaption(Content captionContent) {
         if (captionContent instanceof HtmlTree
-                && ((HtmlTree) captionContent).htmlTag == HtmlTag.CAPTION) {
+                && ((HtmlTree) captionContent).tagName == TagName.CAPTION) {
             caption = captionContent;
         } else {
             caption = getCaption(captionContent);
         }
         return this;
@@ -206,11 +206,11 @@
      * Sets the styles used for {@code <tr>} tags, to give a "striped" appearance.
      * The defaults are currently {@code rowColor} and {@code altColor}.
      *
      * @param evenRowStyle  the style to use for even-numbered rows
      * @param oddRowStyle   the style to use for odd-numbered rows
-     * @return
+     * @return this object
      */
     public Table setStripedStyles(HtmlStyle evenRowStyle, HtmlStyle oddRowStyle) {
         stripedStyles = Arrays.asList(evenRowStyle, oddRowStyle);
         return this;
     }
@@ -287,11 +287,11 @@
         this.id = id;
         return this;
     }
 
     /**
-     * Add a row of data to the table.
+     * Adds a row of data to the table.
      * Each item of content should be suitable for use as the content of a
      * {@code <th>} or {@code <td>} cell.
      * This method should not be used when the table has tabs: use a method
      * that takes an {@code Element} parameter instead.
      *
@@ -300,11 +300,11 @@
     public void addRow(Content... contents) {
         addRow(null, Arrays.asList(contents));
     }
 
     /**
-     * Add a row of data to the table.
+     * Adds a row of data to the table.
      * Each item of content should be suitable for use as the content of a
      * {@code <th>} or {@code <td> cell}.
      * This method should not be used when the table has tabs: use a method
      * that takes an {@code element} parameter instead.
      *
@@ -313,18 +313,18 @@
     public void addRow(List<Content> contents) {
         addRow(null, contents);
     }
 
     /**
-     * Add a row of data to the table.
+     * Adds a row of data to the table.
      * Each item of content should be suitable for use as the content of a
      * {@code <th>} or {@code <td>} cell.
      *
      * If tabs have been added to the table, the specified element will be used
      * to determine whether the row should be displayed when any particular tab
      * is selected, using the predicate specified when the tab was
-     * {@link #add(String,Predicate) added}.
+     * {@link #addTab(String,Predicate) added}.
      *
      * @param element the element
      * @param contents the contents for the row
      * @throws NullPointerException if tabs have previously been added to the table
      *      and {@code element} is null
@@ -332,18 +332,18 @@
     public void addRow(Element element, Content... contents) {
         addRow(element, Arrays.asList(contents));
     }
 
     /**
-     * Add a row of data to the table.
+     * Adds a row of data to the table.
      * Each item of content should be suitable for use as the content of a
      * {@code <th>} or {@code <td>} cell.
      *
      * If tabs have been added to the table, the specified element will be used
      * to determine whether the row should be displayed when any particular tab
      * is selected, using the predicate specified when the tab was
-     * {@link #add(String,Predicate) added}.
+     * {@link #addTab(String,Predicate) added}.
      *
      * @param element the element
      * @param contents the contents for the row
      * @throws NullPointerException if tabs have previously been added to the table
      *      and {@code element} is null
@@ -351,15 +351,15 @@
     public void addRow(Element element, List<Content> contents) {
         if (tabMap != null && element == null) {
             throw new NullPointerException();
         }
 
-        HtmlTree row = new HtmlTree(HtmlTag.TR);
+        HtmlTree row = new HtmlTree(TagName.TR);
 
         if (stripedStyles != null) {
             int rowIndex = bodyRows.size();
-            row.put(HtmlAttr.CLASS, stripedStyles.get(rowIndex % 2).name());
+            row.setStyle(stripedStyles.get(rowIndex % 2));
         }
         int colIndex = 0;
         for (Content c : contents) {
             HtmlStyle cellStyle = (columnStyles == null || colIndex > columnStyles.size())
                     ? null
@@ -398,33 +398,38 @@
      */
     public boolean isEmpty() {
         return bodyRows.isEmpty();
     }
 
+    @Override
+    public boolean write(Writer out, boolean atNewline) throws IOException {
+        return toContent().write(out, atNewline);
+    }
+
     /**
      * Returns the HTML for the table.
      *
      * @return the HTML
      */
-    public Content toContent() {
-        HtmlTree mainDiv = new HtmlTree(HtmlTag.DIV);
+    private Content toContent() {
+        HtmlTree mainDiv = new HtmlTree(TagName.DIV);
         mainDiv.setStyle(tableStyle);
         if (id != null) {
             mainDiv.setId(id);
         }
-        HtmlTree table = new HtmlTree(HtmlTag.TABLE);
+        HtmlTree table = new HtmlTree(TagName.TABLE);
         if (tabMap == null || tabs.size() == 1) {
             if (tabMap == null) {
                 table.add(caption);
             } else if (tabs.size() == 1) {
                 String tabName = tabs.iterator().next();
                 table.add(getCaption(new StringContent(tabName)));
             }
             table.add(getTableBody());
             mainDiv.add(table);
         } else {
-            HtmlTree tablist = new HtmlTree(HtmlTag.DIV)
+            HtmlTree tablist = new HtmlTree(TagName.DIV)
                     .put(HtmlAttr.ROLE, "tablist")
                     .put(HtmlAttr.ARIA_ORIENTATION, "horizontal");
 
             int tabIndex = 0;
             tablist.add(createTab(tabId.apply(tabIndex), activeTabStyle, true, defaultTab));
@@ -436,41 +441,41 @@
                     HtmlTree tab = createTab(tabId.apply(tabIndex), tabStyle, false, tabName);
                     tab.put(HtmlAttr.ONCLICK, script);
                     tablist.add(tab);
                 }
             }
-            HtmlTree tabpanel = new HtmlTree(HtmlTag.DIV)
-                    .put(HtmlAttr.ID, tableStyle + "_tabpanel")
+            HtmlTree tabpanel = new HtmlTree(TagName.DIV)
+                    .put(HtmlAttr.ID, tableStyle.cssName() + "_tabpanel")
                     .put(HtmlAttr.ROLE, "tabpanel");
             table.add(getTableBody());
             tabpanel.add(table);
             mainDiv.add(tablist);
             mainDiv.add(tabpanel);
         }
         return mainDiv;
     }
 
     private HtmlTree createTab(String tabId, HtmlStyle style, boolean defaultTab, String tabName) {
-        HtmlTree tab = new HtmlTree(HtmlTag.BUTTON)
+        HtmlTree tab = new HtmlTree(TagName.BUTTON)
                 .put(HtmlAttr.ROLE, "tab")
                 .put(HtmlAttr.ARIA_SELECTED, defaultTab ? "true" : "false")
-                .put(HtmlAttr.ARIA_CONTROLS, tableStyle + "_tabpanel")
+                .put(HtmlAttr.ARIA_CONTROLS, tableStyle.cssName() + "_tabpanel")
                 .put(HtmlAttr.TABINDEX, defaultTab ? "0" : "-1")
                 .put(HtmlAttr.ONKEYDOWN, "switchTab(event)")
                 .put(HtmlAttr.ID, tabId)
                 .setStyle(style);
         tab.add(tabName);
         return tab;
     }
 
     private Content getTableBody() {
         ContentBuilder tableContent = new ContentBuilder();
-        Content thead = new HtmlTree(HtmlTag.THEAD);
-        thead.add(header.toContent());
+        Content thead = new HtmlTree(TagName.THEAD);
+        thead.add(header);
         tableContent.add(thead);
-        Content tbody = new HtmlTree(HtmlTag.TBODY);
-        bodyRows.forEach(row -> tbody.add(row));
+        Content tbody = new HtmlTree(TagName.TBODY);
+        bodyRows.forEach(tbody::add);
         tableContent.add(tbody);
         return tableContent;
     }
 
     /**
@@ -536,16 +541,16 @@
                 .append("]");
     }
 
     private void appendStyleInfo(StringBuilder sb, HtmlStyle... styles) {
         for (HtmlStyle style : styles) {
-            sb.append("var ").append(style).append(" = \"").append(style).append("\";\n");
+            sb.append("var ").append(style.name()).append(" = \"").append(style.cssName()).append("\";\n");
         }
 
     }
 
     private HtmlTree getCaption(Content title) {
-        return new HtmlTree(HtmlTag.CAPTION,
-                HtmlTree.SPAN(title),
-                HtmlTree.SPAN(tabEnd, Entity.NO_BREAK_SPACE));
+        return new HtmlTree(TagName.CAPTION)
+                .add(HtmlTree.SPAN(title))
+                .add(HtmlTree.SPAN(tabEnd, Entity.NO_BREAK_SPACE));
     }
 }
