diff a/src/java.base/share/classes/java/lang/invoke/MethodType.java b/src/java.base/share/classes/java/lang/invoke/MethodType.java
--- a/src/java.base/share/classes/java/lang/invoke/MethodType.java
+++ b/src/java.base/share/classes/java/lang/invoke/MethodType.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -89,12 +89,13 @@
  * Like classes and strings, method types can also be represented directly
  * in a class file's constant pool as constants.
  * A method type may be loaded by an {@code ldc} instruction which refers
  * to a suitable {@code CONSTANT_MethodType} constant pool entry.
  * The entry refers to a {@code CONSTANT_Utf8} spelling for the descriptor string.
- * (For full details on method type constants,
- * see sections 4.4.8 and 5.4.3.5 of the Java Virtual Machine Specification.)
+ * (For full details on method type constants, see sections {@jvms
+ * 4.4.8} and {@jvms 5.4.3.5} of the Java Virtual Machine
+ * Specification.)
  * <p>
  * When the JVM materializes a {@code MethodType} from a descriptor string,
  * all classes named in the descriptor must be accessible, and will be loaded.
  * (But the classes need not be initialized, as is the case with a {@code CONSTANT_Class}.)
  * This loading may occur at any time before the {@code MethodType} object is first derived.
@@ -1376,16 +1377,16 @@
                 hashcode = key.hashCode();
             }
 
             /**
              * This implementation returns {@code true} if {@code obj} is another
-             * {@code WeakEntry} whose referent is equals to this referent, or
-             * if {@code obj} is equals to the referent of this. This allows
+             * {@code WeakEntry} whose referent is equal to this referent, or
+             * if {@code obj} is equal to the referent of this. This allows
              * lookups to be made without wrapping in a {@code WeakEntry}.
              *
              * @param obj the object to compare
-             * @return true if {@code obj} is equals to this or the referent of this
+             * @return true if {@code obj} is equal to this or the referent of this
              * @see MethodType#equals(Object)
              * @see Object#equals(Object)
              */
             @Override
             public boolean equals(Object obj) {
