diff a/src/jdk.jfr/share/classes/jdk/jfr/consumer/EventStream.java b/src/jdk.jfr/share/classes/jdk/jfr/consumer/EventStream.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/consumer/EventStream.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/consumer/EventStream.java
@@ -240,10 +240,14 @@
     void onClose(Runnable action);
 
     /**
      * Releases all resources associated with this stream.
      * <p>
+     * If a stream is started, asynchronously or synchronously, it is stopped
+     * immediately or after the next flush. This method does <em>NOT</em>
+     * guarantee that all registered actions are completed before return.
+     * <p>
      * Closing a previously closed stream has no effect.
      */
     void close();
 
     /**
@@ -318,19 +322,23 @@
 
     /**
      * Start processing of actions.
      * <p>
      * Actions are performed in the current thread.
+     * <p>
+     * To stop the stream, use the {@code #close()} method.
      *
      * @throws IllegalStateException if the stream is already started or closed
      */
     void start();
 
     /**
      * Start asynchronous processing of actions.
      * <p>
      * Actions are performed in a single separate thread.
+     * <p>
+     * To stop the stream, use the {@code #close()} method.
      *
      * @throws IllegalStateException if the stream is already started or closed
      */
     void startAsync();
 
