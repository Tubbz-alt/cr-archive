diff a/src/java.smartcardio/share/classes/sun/security/smartcardio/ChannelImpl.java b/src/java.smartcardio/share/classes/sun/security/smartcardio/ChannelImpl.java
--- a/src/java.smartcardio/share/classes/sun/security/smartcardio/ChannelImpl.java
+++ b/src/java.smartcardio/share/classes/sun/security/smartcardio/ChannelImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -148,10 +148,11 @@
         System.arraycopy(b1, 0, res, 0, n1);
         System.arraycopy(b2, 0, res, n1, n2);
         return res;
     }
 
+    private final static int RESPONSE_ITERATIONS = 256;
     private final static byte[] B0 = new byte[0];
 
     private byte[] doTransmit(byte[] command) throws CardException {
         // note that we modify the 'command' array in some cases, so it must
         // be a copy of the application provided data.
@@ -180,12 +181,13 @@
             }
             boolean getresponse = (t0 && t0GetResponse) || (t1 && t1GetResponse);
             int k = 0;
             byte[] result = B0;
             while (true) {
-                if (++k >= 32) {
-                    throw new CardException("Could not obtain response");
+                if (++k > RESPONSE_ITERATIONS) {
+                    throw new CardException("Number of response iterations" +
+                            " exceeded maximum " + RESPONSE_ITERATIONS);
                 }
                 byte[] response = SCardTransmit
                     (card.cardId, card.protocol, command, 0, n);
                 int rn = response.length;
                 if (getresponse && (rn >= 2) && (n >= 1)) {
