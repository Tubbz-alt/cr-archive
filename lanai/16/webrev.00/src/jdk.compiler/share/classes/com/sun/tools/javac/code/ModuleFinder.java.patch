diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/ModuleFinder.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/ModuleFinder.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/ModuleFinder.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/ModuleFinder.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -246,27 +246,30 @@
                 name = names.error;
                 break;
         }
 
         ModuleSymbol msym = syms.enterModule(name);
-        msym.module_info.classfile = fo;
-        if (fileManager.hasLocation(StandardLocation.PATCH_MODULE_PATH) && name != names.error) {
-            msym.patchLocation = fileManager.getLocationForModule(StandardLocation.PATCH_MODULE_PATH, name.toString());
 
-            if (msym.patchLocation != null) {
-                JavaFileObject patchFO = getModuleInfoFromLocation(StandardLocation.CLASS_OUTPUT, Kind.CLASS);
-                patchFO = preferredFileObject(getModuleInfoFromLocation(msym.patchLocation, Kind.CLASS), patchFO);
-                patchFO = preferredFileObject(getModuleInfoFromLocation(msym.patchLocation, Kind.SOURCE), patchFO);
+        if (msym.module_info.classfile == null) {
+            msym.module_info.classfile = fo;
+            if (fileManager.hasLocation(StandardLocation.PATCH_MODULE_PATH) && name != names.error) {
+                msym.patchLocation = fileManager.getLocationForModule(StandardLocation.PATCH_MODULE_PATH, name.toString());
 
-                if (patchFO != null) {
-                    msym.module_info.classfile = patchFO;
+                if (msym.patchLocation != null) {
+                    JavaFileObject patchFO = getModuleInfoFromLocation(StandardLocation.CLASS_OUTPUT, Kind.CLASS);
+                    patchFO = preferredFileObject(getModuleInfoFromLocation(msym.patchLocation, Kind.CLASS), patchFO);
+                    patchFO = preferredFileObject(getModuleInfoFromLocation(msym.patchLocation, Kind.SOURCE), patchFO);
+
+                    if (patchFO != null) {
+                        msym.module_info.classfile = patchFO;
+                    }
                 }
             }
-        }
 
-        msym.completer = Completer.NULL_COMPLETER;
-        classFinder.fillIn(msym.module_info);
+            msym.completer = Completer.NULL_COMPLETER;
+            classFinder.fillIn(msym.module_info);
+        }
 
         return msym;
     }
 
     private String readModuleName(JavaFileObject jfo) throws IOException, ModuleNameReader.BadClassFile {
