diff a/src/hotspot/share/runtime/frame.cpp b/src/hotspot/share/runtime/frame.cpp
--- a/src/hotspot/share/runtime/frame.cpp
+++ b/src/hotspot/share/runtime/frame.cpp
@@ -229,12 +229,11 @@
 }
 
 bool frame::is_entry_frame_valid(JavaThread* thread) const {
   // Validate the JavaCallWrapper an entry frame must have
   address jcw = (address)entry_frame_call_wrapper();
-  bool jcw_safe = (jcw < thread->stack_base()) && (jcw > (address)fp()); // less than stack base
-  if (!jcw_safe) {
+  if (!thread->is_in_stack_range_excl(jcw, (address)fp())) {
     return false;
   }
 
   // Validate sp saved in the java frame anchor
   JavaFrameAnchor* jfa = entry_frame_call_wrapper()->anchor();
@@ -1282,21 +1281,21 @@
   int max_index = _values.length() - 1;
   intptr_t* v0 = _values.at(min_index).location;
   intptr_t* v1 = _values.at(max_index).location;
 
   if (thread == Thread::current()) {
-    while (!thread->is_in_stack((address)v0)) {
+    while (!thread->is_in_live_stack((address)v0)) {
       v0 = _values.at(++min_index).location;
     }
-    while (!thread->is_in_stack((address)v1)) {
+    while (!thread->is_in_live_stack((address)v1)) {
       v1 = _values.at(--max_index).location;
     }
   } else {
-    while (!thread->on_local_stack((address)v0)) {
+    while (!thread->is_in_full_stack((address)v0)) {
       v0 = _values.at(++min_index).location;
     }
-    while (!thread->on_local_stack((address)v1)) {
+    while (!thread->is_in_full_stack((address)v1)) {
       v1 = _values.at(--max_index).location;
     }
   }
   intptr_t* min = MIN2(v0, v1);
   intptr_t* max = MAX2(v0, v1);
