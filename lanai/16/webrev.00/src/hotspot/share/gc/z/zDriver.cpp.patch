diff a/src/hotspot/share/gc/z/zDriver.cpp b/src/hotspot/share/gc/z/zDriver.cpp
--- a/src/hotspot/share/gc/z/zDriver.cpp
+++ b/src/hotspot/share/gc/z/zDriver.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -23,10 +23,11 @@
 
 #include "precompiled.hpp"
 #include "gc/shared/gcId.hpp"
 #include "gc/shared/gcLocker.hpp"
 #include "gc/shared/isGCActiveMark.hpp"
+#include "gc/z/zBreakpoint.hpp"
 #include "gc/z/zCollectedHeap.hpp"
 #include "gc/z/zDriver.hpp"
 #include "gc/z/zHeap.inline.hpp"
 #include "gc/z/zMessagePort.inline.hpp"
 #include "gc/z/zServiceability.hpp"
@@ -258,10 +259,15 @@
   case GCCause::_gc_locker:
     // Restart VM operation previously blocked by the GC locker
     _gc_locker_port.signal();
     break;
 
+  case GCCause::_wb_breakpoint:
+    ZBreakpoint::start_gc();
+    _gc_cycle_port.send_async(cause);
+    break;
+
   default:
     // Other causes not supported
     fatal("Unsupported GC cause (%s)", GCCause::to_string(cause));
     break;
   }
@@ -290,11 +296,13 @@
   pause<VM_ZMarkStart>();
 }
 
 void ZDriver::concurrent_mark() {
   ZStatTimer timer(ZPhaseConcurrentMark);
+  ZBreakpoint::at_after_marking_started();
   ZHeap::heap()->mark(true /* initial */);
+  ZBreakpoint::at_before_marking_completed();
 }
 
 bool ZDriver::pause_mark_end() {
   return pause<VM_ZMarkEnd>();
 }
@@ -415,18 +423,22 @@
     const GCCause::Cause cause = _gc_cycle_port.receive();
     if (cause == GCCause::_no_gc) {
       continue;
     }
 
+    ZBreakpoint::at_before_gc();
+
     // Run GC
     gc(cause);
 
     // Notify GC completed
     _gc_cycle_port.ack();
 
     // Check for out of memory condition
     check_out_of_memory();
+
+    ZBreakpoint::at_after_gc();
   }
 }
 
 void ZDriver::stop_service() {
   _gc_cycle_port.send_async(GCCause::_no_gc);
