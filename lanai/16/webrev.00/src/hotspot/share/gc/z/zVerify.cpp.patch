diff a/src/hotspot/share/gc/z/zVerify.cpp b/src/hotspot/share/gc/z/zVerify.cpp
--- a/src/hotspot/share/gc/z/zVerify.cpp
+++ b/src/hotspot/share/gc/z/zVerify.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -34,20 +34,20 @@
 #include "memory/iterator.inline.hpp"
 #include "oops/oop.hpp"
 
 #define BAD_OOP_ARG(o, p)   "Bad oop " PTR_FORMAT " found at " PTR_FORMAT, p2i(o), p2i(p)
 
-static void verify_oop(oop* p) {
+static void z_verify_oop(oop* p) {
   const oop o = RawAccess<>::oop_load(p);
   if (o != NULL) {
     const uintptr_t addr = ZOop::to_address(o);
     guarantee(ZAddress::is_good(addr), BAD_OOP_ARG(o, p));
     guarantee(oopDesc::is_oop(ZOop::from_address(addr)), BAD_OOP_ARG(o, p));
   }
 }
 
-static void verify_possibly_weak_oop(oop* p) {
+static void z_verify_possibly_weak_oop(oop* p) {
   const oop o = RawAccess<>::oop_load(p);
   if (o != NULL) {
     const uintptr_t addr = ZOop::to_address(o);
     guarantee(ZAddress::is_good(addr) || ZAddress::is_finalizable_good(addr), BAD_OOP_ARG(o, p));
     guarantee(oopDesc::is_oop(ZOop::from_address(ZAddress::good(addr))), BAD_OOP_ARG(o, p));
@@ -55,11 +55,11 @@
 }
 
 class ZVerifyRootClosure : public ZRootsIteratorClosure {
 public:
   virtual void do_oop(oop* p) {
-    verify_oop(p);
+    z_verify_oop(p);
   }
 
   virtual void do_oop(narrowOop*) {
     ShouldNotReachHere();
   }
@@ -74,15 +74,15 @@
       ClaimMetadataVisitingOopIterateClosure(ClassLoaderData::_claim_other),
       _verify_weaks(verify_weaks) {}
 
   virtual void do_oop(oop* p) {
     if (_verify_weaks) {
-      verify_possibly_weak_oop(p);
+      z_verify_possibly_weak_oop(p);
     } else {
       // We should never encounter finalizable oops through strong
       // paths. This assumes we have only visited strong roots.
-      verify_oop(p);
+      z_verify_oop(p);
     }
   }
 
   virtual void do_oop(narrowOop* p) {
     ShouldNotReachHere();
