diff a/src/hotspot/share/gc/shenandoah/shenandoahHeuristics.hpp b/src/hotspot/share/gc/shenandoah/shenandoahHeuristics.hpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahHeuristics.hpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahHeuristics.hpp
@@ -65,24 +65,21 @@
 
 class ShenandoahCollectionSet;
 class ShenandoahHeapRegion;
 
 class ShenandoahHeuristics : public CHeapObj<mtGC> {
-  static const intx Concurrent_Adjust   =  1; // recover from penalties
+  static const intx Concurrent_Adjust   = -1; // recover from penalties
   static const intx Degenerated_Penalty = 10; // how much to penalize average GC duration history on Degenerated GC
   static const intx Full_Penalty        = 20; // how much to penalize average GC duration history on Full GC
 
 protected:
   typedef struct {
     ShenandoahHeapRegion* _region;
     size_t _garbage;
     uint64_t _seqnum_last_alloc;
   } RegionData;
 
-  bool _update_refs_early;
-  bool _update_refs_adaptive;
-
   RegionData* _region_data;
   size_t _region_data_size;
 
   uint _degenerated_cycles_in_a_row;
   uint _successful_cycles_in_a_row;
@@ -91,11 +88,11 @@
 
   double _cycle_start;
   double _last_cycle_end;
 
   size_t _gc_times_learned;
-  size_t _gc_time_penalties;
+  intx _gc_time_penalties;
   TruncatedSeq* _gc_time_history;
 
   // There may be many threads that contend to set this flag
   ShenandoahSharedFlag _metaspace_oom;
 
@@ -108,10 +105,12 @@
 
   virtual void choose_collection_set_from_regiondata(ShenandoahCollectionSet* set,
                                                      RegionData* data, size_t data_size,
                                                      size_t free) = 0;
 
+  void adjust_penalty(intx step);
+
 public:
   ShenandoahHeuristics();
   virtual ~ShenandoahHeuristics();
 
   void record_gc_start();
@@ -124,16 +123,12 @@
 
   virtual void record_cycle_start();
 
   virtual void record_cycle_end();
 
-  virtual void record_phase_time(ShenandoahPhaseTimings::Phase phase, double secs);
-
   virtual bool should_start_gc() const;
 
-  virtual bool should_start_update_refs();
-
   virtual bool should_degenerate_cycle();
 
   virtual void record_success_concurrent();
 
   virtual void record_success_degenerated();
