diff a/src/hotspot/share/compiler/oopMap.hpp b/src/hotspot/share/compiler/oopMap.hpp
--- a/src/hotspot/share/compiler/oopMap.hpp
+++ b/src/hotspot/share/compiler/oopMap.hpp
@@ -27,10 +27,11 @@
 
 #include "code/compressedStream.hpp"
 #include "code/vmreg.hpp"
 #include "memory/allocation.hpp"
 #include "oops/oopsHierarchy.hpp"
+#include "utilities/growableArray.hpp"
 
 // Interface for generating the frame map for compiled code.  A frame map
 // describes for a specific pc whether each register and frame stack slot is:
 //   Oop         - A GC root for current frame
 //   Dead        - Dead; can be Zapped for debugging
@@ -127,17 +128,13 @@
     return (p->value()  == (p->value() & register_mask));
   }
 
   VMReg content_reg() const       { return VMRegImpl::as_VMReg(_content_reg, true); }
 
-  // Physical location queries
-  bool is_register_loc()      { return reg()->is_reg(); }
-  bool is_stack_loc()         { return reg()->is_stack(); }
-
   // Returns offset from sp.
   int stack_offset() {
-    assert(is_stack_loc(), "must be stack location");
+    assert(reg()->is_stack(), "must be stack location");
     return reg()->reg2stack();
   }
 
   void print_on(outputStream* st) const;
   void print() const;
@@ -175,13 +172,10 @@
   void set_offset(int o) { _pc_offset = o; }
   int count() const { return _omv_count; }
   int data_size() const  { return write_stream()->position(); }
   address data() const { return write_stream()->buffer(); }
 
-  // Check to avoid double insertion
-  debug_only(OopMapValue::oop_types locs_used( int indx ) { return _locs_used[indx]; })
-
   // Construction
   // frame_size units are stack-slots (4 bytes) NOT intptr_t; we can name odd
   // slots to hold 4-byte values like ints and floats in the LP64 build.
   void set_oop  ( VMReg local);
   void set_narrowoop(VMReg local);
@@ -204,44 +198,25 @@
 
 
 class OopMapSet : public ResourceObj {
   friend class VMStructs;
  private:
-  int _om_count;
-  int _om_size;
-  OopMap** _om_data;
-
-  int om_count() const              { return _om_count; }
-  void set_om_count(int value)      { _om_count = value; }
-  void increment_count()            { _om_count++; }
-  int om_size() const               { return _om_size; }
-  void set_om_size(int value)       { _om_size = value; }
-  OopMap** om_data() const          { return _om_data; }
-  void set_om_data(OopMap** value)  { _om_data = value; }
-  void grow_om_data();
-  void set(int index,OopMap* value) { assert((index == 0) || ((index > 0) && (index < om_size())),"bad index"); _om_data[index] = value; }
+  GrowableArray<OopMap*> _list;
+
+  void add(OopMap* value) { _list.append(value); }
 
  public:
   OopMapSet();
 
   // returns the number of OopMaps in this OopMapSet
-  int size() const            { return _om_count; }
+  int size() const            { return _list.length(); }
   // returns the OopMap at a given index
-  OopMap* at(int index) const { assert((index >= 0) && (index <= om_count()),"bad index"); return _om_data[index]; }
+  OopMap* at(int index) const { return _list.at(index); }
 
   // Collect OopMaps.
   void add_gc_map(int pc, OopMap* map);
 
-  // Returns the only oop map. Used for reconstructing
-  // Adapter frames during deoptimization
-  OopMap* singular_oop_map();
-
-  // returns OopMap in that is anchored to the pc
-  OopMap* find_map_at_offset(int pc_offset) const;
-
-  int heap_size() const;
-
   // Methods oops_do() and all_do() filter out NULL oops and
   // oop == CompressedOops::base() before passing oops
   // to closures.
 
   // Iterates through frame for a compiled method
