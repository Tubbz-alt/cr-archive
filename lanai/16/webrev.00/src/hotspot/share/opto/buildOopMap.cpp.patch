diff a/src/hotspot/share/opto/buildOopMap.cpp b/src/hotspot/share/opto/buildOopMap.cpp
--- a/src/hotspot/share/opto/buildOopMap.cpp
+++ b/src/hotspot/share/opto/buildOopMap.cpp
@@ -29,10 +29,11 @@
 #include "opto/addnode.hpp"
 #include "opto/callnode.hpp"
 #include "opto/compile.hpp"
 #include "opto/machnode.hpp"
 #include "opto/matcher.hpp"
+#include "opto/output.hpp"
 #include "opto/phase.hpp"
 #include "opto/regalloc.hpp"
 #include "opto/rootnode.hpp"
 #include "utilities/align.hpp"
 
@@ -561,44 +562,44 @@
     }
   }
 }
 
 // Collect GC mask info - where are all the OOPs?
-void Compile::BuildOopMaps() {
-  TracePhase tp("bldOopMaps", &timers[_t_buildOopMaps]);
+void PhaseOutput::BuildOopMaps() {
+  Compile::TracePhase tp("bldOopMaps", &timers[_t_buildOopMaps]);
   // Can't resource-mark because I need to leave all those OopMaps around,
   // or else I need to resource-mark some arena other than the default.
   // ResourceMark rm;              // Reclaim all OopFlows when done
-  int max_reg = _regalloc->_max_reg; // Current array extent
+  int max_reg = C->regalloc()->_max_reg; // Current array extent
 
   Arena *A = Thread::current()->resource_area();
   Block_List worklist;          // Worklist of pending blocks
 
   int max_reg_ints = align_up(max_reg, BitsPerInt)>>LogBitsPerInt;
   Dict *safehash = NULL;        // Used for assert only
   // Compute a backwards liveness per register.  Needs a bitarray of
   // #blocks x (#registers, rounded up to ints)
   safehash = new Dict(cmpkey,hashkey,A);
-  do_liveness( _regalloc, _cfg, &worklist, max_reg_ints, A, safehash );
+  do_liveness( C->regalloc(), C->cfg(), &worklist, max_reg_ints, A, safehash );
   OopFlow *free_list = NULL;    // Free, unused
 
   // Array mapping blocks to completed oopflows
-  OopFlow **flows = NEW_ARENA_ARRAY(A, OopFlow*, _cfg->number_of_blocks());
-  memset( flows, 0, _cfg->number_of_blocks() * sizeof(OopFlow*) );
+  OopFlow **flows = NEW_ARENA_ARRAY(A, OopFlow*, C->cfg()->number_of_blocks());
+  memset( flows, 0, C->cfg()->number_of_blocks() * sizeof(OopFlow*) );
 
 
   // Do the first block 'by hand' to prime the worklist
-  Block *entry = _cfg->get_block(1);
-  OopFlow *rootflow = OopFlow::make(A,max_reg,this);
+  Block *entry = C->cfg()->get_block(1);
+  OopFlow *rootflow = OopFlow::make(A,max_reg,C);
   // Initialize to 'bottom' (not 'top')
   memset( rootflow->_callees, OptoReg::Bad, max_reg*sizeof(short) );
   memset( rootflow->_defs   ,            0, max_reg*sizeof(Node*) );
   flows[entry->_pre_order] = rootflow;
 
   // Do the first block 'by hand' to prime the worklist
   rootflow->_b = entry;
-  rootflow->compute_reach( _regalloc, max_reg, safehash );
+  rootflow->compute_reach( C->regalloc(), max_reg, safehash );
   for( uint i=0; i<entry->_num_succs; i++ )
     worklist.push(entry->_succs[i]);
 
   // Now worklist contains blocks which have some, but perhaps not all,
   // predecessors visited.
@@ -611,11 +612,11 @@
     // SAME reaching def for the block, so any reaching def is OK.
     uint i;
 
     Block *b = worklist.pop();
     // Ignore root block
-    if (b == _cfg->get_root_block()) {
+    if (b == C->cfg()->get_root_block()) {
       continue;
     }
     // Block is already done?  Happens if block has several predecessors,
     // he can get on the worklist more than once.
     if( flows[b->_pre_order] ) continue;
@@ -625,11 +626,11 @@
     // pred to this block.  Otherwise we have to grab a new OopFlow.
     OopFlow *flow = NULL;       // Flag for finding optimized flow
     Block *pred = (Block*)((intptr_t)0xdeadbeef);
     // Scan this block's preds to find a done predecessor
     for (uint j = 1; j < b->num_preds(); j++) {
-      Block* p = _cfg->get_block_for_node(b->pred(j));
+      Block* p = C->cfg()->get_block_for_node(b->pred(j));
       OopFlow *p_flow = flows[p->_pre_order];
       if( p_flow ) {            // Predecessor is done
         assert( p_flow->_b == p, "cross check" );
         pred = p;               // Record some predecessor
         // If all successors of p are done except for 'b', then we can carry
@@ -672,11 +673,11 @@
     flow->_b = NULL;
 
     // Now push flow forward
     flows[b->_pre_order] = flow;// Mark flow for this block
     flow->_b = b;
-    flow->compute_reach( _regalloc, max_reg, safehash );
+    flow->compute_reach( C->regalloc(), max_reg, safehash );
 
     // Now push children onto worklist
     for( i=0; i<b->_num_succs; i++ )
       worklist.push(b->_succs[i]);
 
