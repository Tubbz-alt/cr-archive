diff a/src/hotspot/share/opto/macro.cpp b/src/hotspot/share/opto/macro.cpp
--- a/src/hotspot/share/opto/macro.cpp
+++ b/src/hotspot/share/opto/macro.cpp
@@ -33,10 +33,11 @@
 #include "opto/castnode.hpp"
 #include "opto/cfgnode.hpp"
 #include "opto/compile.hpp"
 #include "opto/convertnode.hpp"
 #include "opto/graphKit.hpp"
+#include "opto/intrinsicnode.hpp"
 #include "opto/locknode.hpp"
 #include "opto/loopnode.hpp"
 #include "opto/macro.hpp"
 #include "opto/memnode.hpp"
 #include "opto/narrowptrnode.hpp"
@@ -44,13 +45,15 @@
 #include "opto/opaquenode.hpp"
 #include "opto/phaseX.hpp"
 #include "opto/rootnode.hpp"
 #include "opto/runtime.hpp"
 #include "opto/subnode.hpp"
+#include "opto/subtypenode.hpp"
 #include "opto/type.hpp"
 #include "runtime/sharedRuntime.hpp"
 #include "utilities/macros.hpp"
+#include "utilities/powerOfTwo.hpp"
 #if INCLUDE_G1GC
 #include "gc/g1/g1ThreadLocalData.hpp"
 #endif // INCLUDE_G1GC
 #if INCLUDE_SHENANDOAHGC
 #include "gc/shenandoah/c2/shenandoahBarrierSetC2.hpp"
@@ -1329,18 +1332,27 @@
 
   bool allocation_has_use = (alloc->result_cast() != NULL);
   if (!allocation_has_use) {
     InitializeNode* init = alloc->initialization();
     if (init != NULL) {
-      yank_initalize_node(init);
-      assert(init->outcnt() == 0, "all uses must be deleted");
-      _igvn.remove_dead_node(init);
+      init->remove(&_igvn);
     }
     if (expand_fast_path && (initial_slow_test == NULL)) {
       // Remove allocation node and return.
       // Size is a non-negative constant -> no initial check needed -> directly to fast path.
       // Also, no usages -> empty fast path -> no fall out to slow path -> nothing left.
+#ifndef PRODUCT
+      if (PrintEliminateAllocations) {
+        tty->print("NotUsed ");
+        Node* res = alloc->proj_out_or_null(TypeFunc::Parms);
+        if (res != NULL) {
+          res->dump();
+        } else {
+          alloc->dump();
+        }
+      }
+#endif
       yank_alloc_node(alloc);
       return;
     }
   }
 
@@ -1574,10 +1586,20 @@
   Node* ctrl = alloc->in(TypeFunc::Control);
   Node* mem  = alloc->in(TypeFunc::Memory);
   Node* i_o  = alloc->in(TypeFunc::I_O);
 
   extract_call_projections(alloc);
+  if (_resproj != NULL) {
+    for (DUIterator_Fast imax, i = _resproj->fast_outs(imax); i < imax; i++) {
+      Node* use = _resproj->fast_out(i);
+      use->isa_MemBar()->remove(&_igvn);
+      --imax;
+      --i; // back up iterator
+    }
+    assert(_resproj->outcnt() == 0, "all uses must be deleted");
+    _igvn.remove_dead_node(_resproj);
+  }
   if (_fallthroughcatchproj != NULL) {
     migrate_outs(_fallthroughcatchproj, ctrl);
     _igvn.remove_dead_node(_fallthroughcatchproj);
   }
   if (_catchallcatchproj != NULL) {
@@ -1603,10 +1625,19 @@
   }
   if (_ioproj_catchall != NULL) {
     _igvn.rehash_node_delayed(_ioproj_catchall);
     _ioproj_catchall->set_req(0, top());
   }
+#ifndef PRODUCT
+  if (PrintEliminateAllocations) {
+    if (alloc->is_AllocateArray()) {
+      tty->print_cr("++++ Eliminated: %d AllocateArray", alloc->_idx);
+    } else {
+      tty->print_cr("++++ Eliminated: %d Allocate", alloc->_idx);
+    }
+  }
+#endif
   _igvn.remove_dead_node(alloc);
 }
 
 void PhaseMacroExpand::expand_initialize_membar(AllocateNode* alloc, InitializeNode* init,
                                                 Node*& fast_oop_ctrl, Node*& fast_oop_rawmem) {
@@ -1707,30 +1738,10 @@
     rawmem = new ProjNode(call, TypeFunc::Memory);
     transform_later(rawmem);
   }
 }
 
-// Remove InitializeNode without use
-void PhaseMacroExpand::yank_initalize_node(InitializeNode* initnode) {
-  assert(initnode->proj_out_or_null(TypeFunc::Parms) == NULL, "No uses allowed");
-
-  Node* ctrl_out  = initnode->proj_out_or_null(TypeFunc::Control);
-  Node* mem_out   = initnode->proj_out_or_null(TypeFunc::Memory);
-
-  // Move all uses of each to
-  if (ctrl_out != NULL ) {
-    migrate_outs(ctrl_out, initnode->in(TypeFunc::Control));
-    _igvn.remove_dead_node(ctrl_out);
-  }
-
-  // Move all uses of each to
-  if (mem_out != NULL ) {
-    migrate_outs(mem_out, initnode->in(TypeFunc::Memory));
-    _igvn.remove_dead_node(mem_out);
-  }
-}
-
 // Helper for PhaseMacroExpand::expand_allocate_common.
 // Initializes the newly-allocated storage.
 Node*
 PhaseMacroExpand::initialize_object(AllocateNode* alloc,
                                     Node* control, Node* rawmem, Node* object,
@@ -2530,10 +2541,47 @@
   mem_phi->init_req(2, mem);
   transform_later(mem_phi);
   _igvn.replace_node(_memproj_fallthrough, mem_phi);
 }
 
+void PhaseMacroExpand::expand_subtypecheck_node(SubTypeCheckNode *check) {
+  assert(check->in(SubTypeCheckNode::Control) == NULL, "should be pinned");
+  Node* bol = check->unique_out();
+  Node* obj_or_subklass = check->in(SubTypeCheckNode::ObjOrSubKlass);
+  Node* superklass = check->in(SubTypeCheckNode::SuperKlass);
+  assert(bol->is_Bool() && bol->as_Bool()->_test._test == BoolTest::ne, "unexpected bool node");
+
+  for (DUIterator_Last imin, i = bol->last_outs(imin); i >= imin; --i) {
+    Node* iff = bol->last_out(i);
+    assert(iff->is_If(), "where's the if?");
+
+    if (iff->in(0)->is_top()) {
+      _igvn.replace_input_of(iff, 1, C->top());
+      continue;
+    }
+
+    Node* iftrue = iff->as_If()->proj_out(1);
+    Node* iffalse = iff->as_If()->proj_out(0);
+    Node* ctrl = iff->in(0);
+
+    Node* subklass = NULL;
+    if (_igvn.type(obj_or_subklass)->isa_klassptr()) {
+      subklass = obj_or_subklass;
+    } else {
+      Node* k_adr = basic_plus_adr(obj_or_subklass, oopDesc::klass_offset_in_bytes());
+      subklass = _igvn.transform(LoadKlassNode::make(_igvn, NULL, C->immutable_memory(), k_adr, TypeInstPtr::KLASS));
+    }
+
+    Node* not_subtype_ctrl = Phase::gen_subtype_check(subklass, superklass, &ctrl, NULL, _igvn);
+
+    _igvn.replace_input_of(iff, 0, C->top());
+    _igvn.replace_node(iftrue, not_subtype_ctrl);
+    _igvn.replace_node(iffalse, ctrl);
+  }
+  _igvn.replace_node(check, C->top());
+}
+
 //---------------------------eliminate_macro_nodes----------------------
 // Eliminate scalar replaced allocations and associated locks.
 void PhaseMacroExpand::eliminate_macro_nodes() {
   if (C->macro_count() == 0)
     return;
@@ -2586,10 +2634,12 @@
         break;
       case Node::Class_ArrayCopy:
         break;
       case Node::Class_OuterStripMinedLoop:
         break;
+      case Node::Class_SubTypeCheck:
+        break;
       default:
         assert(n->Opcode() == Op_LoopLimit ||
                n->Opcode() == Op_Opaque1   ||
                n->Opcode() == Op_Opaque2   ||
                n->Opcode() == Op_Opaque3   ||
@@ -2692,10 +2742,14 @@
       break;
     case Node::Class_ArrayCopy:
       expand_arraycopy_node(n->as_ArrayCopy());
       assert(C->macro_count() == (old_macro_count - 1), "expansion must have deleted one node from macro list");
       break;
+    case Node::Class_SubTypeCheck:
+      expand_subtypecheck_node(n->as_SubTypeCheck());
+      assert(C->macro_count() == (old_macro_count - 1), "expansion must have deleted one node from macro list");
+      break;
     }
     if (C->failing())  return true;
   }
 
   // All nodes except Allocate nodes are expanded now. There could be
