diff a/src/hotspot/cpu/ppc/ppc.ad b/src/hotspot/cpu/ppc/ppc.ad
--- a/src/hotspot/cpu/ppc/ppc.ad
+++ b/src/hotspot/cpu/ppc/ppc.ad
@@ -1295,11 +1295,11 @@
 }
 
 //=============================================================================
 
 const RegMask& MachConstantBaseNode::_out_RegMask = BITS64_CONSTANT_TABLE_BASE_mask();
-int Compile::ConstantTable::calculate_table_base_offset() const {
+int ConstantTable::calculate_table_base_offset() const {
   return 0;  // absolute addressing, no offset
 }
 
 bool MachConstantBaseNode::requires_postalloc_expand() const { return true; }
 void MachConstantBaseNode::postalloc_expand(GrowableArray <Node *> *nodes, PhaseRegAlloc *ra_) {
@@ -1336,14 +1336,14 @@
 //=============================================================================
 
 #ifndef PRODUCT
 void MachPrologNode::format(PhaseRegAlloc *ra_, outputStream *st) const {
   Compile* C = ra_->C;
-  const long framesize = C->frame_slots() << LogBytesPerInt;
+  const long framesize = C->output()->frame_slots() << LogBytesPerInt;
 
   st->print("PROLOG\n\t");
-  if (C->need_stack_bang(framesize)) {
+  if (C->output()->need_stack_bang(framesize)) {
     st->print("stack_overflow_check\n\t");
   }
 
   if (!false /* TODO: PPC port C->is_frameless_method()*/) {
     st->print("save return pc\n\t");
@@ -1379,11 +1379,11 @@
 
 void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
   Compile* C = ra_->C;
   MacroAssembler _masm(&cbuf);
 
-  const long framesize = C->frame_size_in_bytes();
+  const long framesize = C->output()->frame_size_in_bytes();
   assert(framesize % (2 * wordSize) == 0, "must preserve 2*wordSize alignment");
 
   const bool method_is_frameless      = false /* TODO: PPC port C->is_frameless_method()*/;
 
   const Register return_pc            = R20; // Must match return_addr() in frame section.
@@ -1424,13 +1424,13 @@
   // We require that their callers must bang for them. But be
   // careful, because some VM calls (such as call site linkage) can
   // use several kilobytes of stack. But the stack safety zone should
   // account for that. See bugs 4446381, 4468289, 4497237.
 
-  int bangsize = C->bang_size_in_bytes();
+  int bangsize = C->output()->bang_size_in_bytes();
   assert(bangsize >= framesize || bangsize <= 0, "stack bang size incorrect");
-  if (C->need_stack_bang(bangsize) && UseStackBanging) {
+  if (C->output()->need_stack_bang(bangsize) && UseStackBanging) {
     // Unfortunately we cannot use the function provided in
     // assembler.cpp as we have to emulate the pipes. So I had to
     // insert the code of generate_stack_overflow_check(), see
     // assembler.cpp for some illuminative comments.
     const int page_size = os::vm_page_size();
@@ -1480,11 +1480,11 @@
       }
 
       bang_offset += page_size;
     }
     // R11 trashed
-  } // C->need_stack_bang(framesize) && UseStackBanging
+  } // C->output()->need_stack_bang(framesize) && UseStackBanging
 
   unsigned int bytes = (unsigned int)framesize;
   long offset = Assembler::align_addr(bytes, frame::alignment_in_bytes);
   ciMethod *currMethod = C->method();
 
@@ -1535,11 +1535,11 @@
   if (!method_is_frameless) {
     // Save return pc.
     ___(std) std(return_pc, _abi(lr), callers_sp);
   }
 
-  C->set_frame_complete(cbuf.insts_size());
+  C->output()->set_frame_complete(cbuf.insts_size());
 }
 #undef ___
 #undef ___stop
 #undef ___advance
 
@@ -1571,11 +1571,11 @@
 
 void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {
   Compile* C = ra_->C;
   MacroAssembler _masm(&cbuf);
 
-  const long framesize = ((long)C->frame_slots()) << LogBytesPerInt;
+  const long framesize = ((long)C->output()->frame_slots()) << LogBytesPerInt;
   assert(framesize >= 0, "negative frame-size?");
 
   const bool method_needs_polling = do_polling() && C->is_method_compilation();
   const bool method_is_frameless  = false /* TODO: PPC port C->is_frameless_method()*/;
   const Register return_pc        = R31;  // Must survive C-call to enable_stack_reserved_zone().
@@ -2499,12 +2499,11 @@
 
 void Matcher::pd_implicit_null_fixup(MachNode *node, uint idx) {
  Unimplemented();
 }
 
-// Advertise here if the CPU requires explicit rounding operations
-// to implement the UseStrictFP mode.
+// Advertise here if the CPU requires explicit rounding operations to implement strictfp mode.
 const bool Matcher::strict_fp_requires_explicit_rounding = false;
 
 // Do floats take an entire double register or just half?
 //
 // A float occupies a ppc64 double register. For the allocator, a
@@ -2785,11 +2784,11 @@
   enc_class enc_load_long_constL_hi(iRegLdst dst, iRegLdst toc, immL src) %{
     // TODO: PPC port $archOpcode(ppc64Opcode_addis);
 
     MacroAssembler _masm(&cbuf);
 
-    if (!ra_->C->in_scratch_emit_size()) {
+    if (!ra_->C->output()->in_scratch_emit_size()) {
       address const_toc_addr;
       // Create a non-oop constant, no relocation needed.
       // If it is an IC, it has a virtual_call_Relocation.
       const_toc_addr = __ long_constant((jlong)$src$$constant);
       if (const_toc_addr == NULL) {
@@ -3052,11 +3051,11 @@
 
   enc_class enc_load_long_constP_hi(iRegLdst dst, immP src, iRegLdst toc) %{
     // TODO: PPC port $archOpcode(ppc64Opcode_addis);
 
     MacroAssembler _masm(&cbuf);
-    if (!ra_->C->in_scratch_emit_size()) {
+    if (!ra_->C->output()->in_scratch_emit_size()) {
       intptr_t val = $src$$constant;
       relocInfo::relocType constant_reloc = $src->constant_reloc();  // src
       address const_toc_addr;
       if (constant_reloc == relocInfo::oop_type) {
         // Create an oop constant and a corresponding relocation.
@@ -3790,11 +3789,11 @@
   enc_class enc_java_dynamic_call_sched(method meth) %{
     // TODO: PPC port $archOpcode(ppc64Opcode_bl);
 
     MacroAssembler _masm(&cbuf);
 
-    if (!ra_->C->in_scratch_emit_size()) {
+    if (!ra_->C->output()->in_scratch_emit_size()) {
       // Create a call trampoline stub for the given method.
       const address entry_point = !($meth$$method) ? 0 : (address)$meth$$method;
       const address entry_point_const = __ address_constant(entry_point, RelocationHolder::none);
       if (entry_point_const == NULL) {
         ciEnv::current()->record_out_of_memory_failure();
@@ -4349,27 +4348,27 @@
   format %{ %}
   interface(CONST_INTER);
 %}
 
 operand immInegpow2() %{
-  predicate(is_power_of_2_long((jlong) (julong) (juint) (-(n->get_int()))));
+  predicate(is_power_of_2((jlong) (julong) (juint) (-(n->get_int()))));
   match(ConI);
   op_cost(0);
   format %{ %}
   interface(CONST_INTER);
 %}
 
 operand immIpow2minus1() %{
-  predicate(is_power_of_2_long((((jlong) (n->get_int()))+1)));
+  predicate(is_power_of_2((((jlong) (n->get_int()))+1)));
   match(ConI);
   op_cost(0);
   format %{ %}
   interface(CONST_INTER);
 %}
 
 operand immIpowerOf2() %{
-  predicate(is_power_of_2_long((((jlong) (julong) (juint) (n->get_int())))));
+  predicate(is_power_of_2((((jlong) (julong) (juint) (n->get_int())))));
   match(ConI);
   op_cost(0);
   format %{ %}
   interface(CONST_INTER);
 %}
@@ -4599,19 +4598,19 @@
   format %{ %}
   interface(CONST_INTER);
 %}
 
 operand immLnegpow2() %{
-  predicate(is_power_of_2_long((jlong)-(n->get_long())));
+  predicate(is_power_of_2((jlong)-(n->get_long())));
   match(ConL);
   op_cost(0);
   format %{ %}
   interface(CONST_INTER);
 %}
 
 operand immLpow2minus1() %{
-  predicate(is_power_of_2_long((((jlong) (n->get_long()))+1)) &&
+  predicate(is_power_of_2((((jlong) (n->get_long()))+1)) &&
             (n->get_long() != (jlong)0xffffffffffffffffL));
   match(ConL);
   op_cost(0);
   format %{ %}
   interface(CONST_INTER);
@@ -6284,11 +6283,11 @@
 
   format %{ "LD      $dst, offset, $base \t// load long $src from TOC (lo)" %}
   size(4);
   ins_encode %{
     // TODO: PPC port $archOpcode(ppc64Opcode_ld);
-    int offset = ra_->C->in_scratch_emit_size() ? 0 : _const_toc_offset_hi_node->_const_toc_offset;
+    int offset = ra_->C->output()->in_scratch_emit_size() ? 0 : _const_toc_offset_hi_node->_const_toc_offset;
     __ ld($dst$$Register, MacroAssembler::largeoffset_si16_si16_lo(offset), $base$$Register);
   %}
   ins_pipe(pipe_class_memory);
 %}
 
@@ -6569,11 +6568,11 @@
 
   format %{ "LD      $dst, offset, $base \t// load ptr $src from TOC (lo)" %}
   size(4);
   ins_encode %{
     // TODO: PPC port $archOpcode(ppc64Opcode_ld);
-    int offset = ra_->C->in_scratch_emit_size() ? 0 : _const_toc_offset_hi_node->_const_toc_offset;
+    int offset = ra_->C->output()->in_scratch_emit_size() ? 0 : _const_toc_offset_hi_node->_const_toc_offset;
     __ ld($dst$$Register, MacroAssembler::largeoffset_si16_si16_lo(offset), $base$$Register);
   %}
   ins_pipe(pipe_class_memory);
 %}
 
