diff a/src/hotspot/cpu/s390/s390.ad b/src/hotspot/cpu/s390/s390.ad
--- a/src/hotspot/cpu/s390/s390.ad
+++ b/src/hotspot/cpu/s390/s390.ad
@@ -793,11 +793,11 @@
 }
 
 //=============================================================================
 
 const RegMask& MachConstantBaseNode::_out_RegMask = _Z_PTR_REG_mask;
-int Compile::ConstantTable::calculate_table_base_offset() const {
+int ConstantTable::calculate_table_base_offset() const {
   return 0;  // absolute addressing, no offset
 }
 
 bool MachConstantBaseNode::requires_postalloc_expand() const { return false; }
 void MachConstantBaseNode::postalloc_expand(GrowableArray <Node *> *nodes, PhaseRegAlloc *ra_) {
@@ -838,19 +838,19 @@
   if (VerifyThread) {
     st->print_cr("Verify_Thread");
     st->print("\t");
   }
 
-  long framesize = C->frame_size_in_bytes();
-  int bangsize   = C->bang_size_in_bytes();
+  long framesize = C->output()->frame_size_in_bytes();
+  int bangsize   = C->output()->bang_size_in_bytes();
 
   // Calls to C2R adapters often do not accept exceptional returns.
   // We require that their callers must bang for them. But be
   // careful, because some VM calls (such as call site linkage) can
   // use several kilobytes of stack. But the stack safety zone should
   // account for that. See bugs 4446381, 4468289, 4497237.
-  if (C->need_stack_bang(bangsize) && UseStackBanging) {
+  if (C->output()->need_stack_bang(bangsize) && UseStackBanging) {
     st->print_cr("# stack bang"); st->print("\t");
   }
   st->print_cr("push_frame %d", (int)-framesize);
   st->print("\t");
 }
@@ -860,12 +860,12 @@
   Compile* C = ra_->C;
   MacroAssembler _masm(&cbuf);
 
   __ verify_thread();
 
-  size_t framesize = C->frame_size_in_bytes();
-  size_t bangsize  = C->bang_size_in_bytes();
+  size_t framesize = C->output()->frame_size_in_bytes();
+  size_t bangsize  = C->output()->bang_size_in_bytes();
 
   assert(framesize % wordSize == 0, "must preserve wordSize alignment");
 
   if (C->clinit_barrier_on_entry()) {
     assert(!C->method()->holder()->is_not_initialized(), "initialization should have been started");
@@ -887,11 +887,11 @@
   // Calls to C2R adapters often do not accept exceptional returns.
   // We require that their callers must bang for them. But be
   // careful, because some VM calls (such as call site linkage) can
   // use several kilobytes of stack. But the stack safety zone should
   // account for that. See bugs 4446381, 4468289, 4497237.
-  if (C->need_stack_bang(bangsize) && UseStackBanging) {
+  if (C->output()->need_stack_bang(bangsize) && UseStackBanging) {
     __ generate_stack_overflow_check(bangsize);
   }
 
   assert(Immediate::is_uimm32((long)framesize), "to do: choose suitable types!");
   __ save_return_pc();
@@ -901,11 +901,11 @@
   __ push_frame((unsigned int)framesize/*includes JIT ABI*/);
 
   if (C->has_mach_constant_base_node()) {
     // NOTE: We set the table base offset here because users might be
     // emitted before MachConstantBaseNode.
-    Compile::ConstantTable& constant_table = C->constant_table();
+    ConstantTable& constant_table = C->output()->constant_table();
     constant_table.set_table_base_offset(constant_table.calculate_table_base_offset());
   }
 }
 
 uint MachPrologNode::size(PhaseRegAlloc *ra_) const {
@@ -938,11 +938,11 @@
 
   // If this does safepoint polling, then do it here.
   bool need_polling = do_polling() && C->is_method_compilation();
 
   // Pop frame, restore return_pc, and all stuff needed by interpreter.
-  int frame_size_in_bytes = Assembler::align((C->frame_slots() << LogBytesPerInt), frame::alignment_in_bytes);
+  int frame_size_in_bytes = Assembler::align((C->output()->frame_slots() << LogBytesPerInt), frame::alignment_in_bytes);
   __ pop_frame_restore_retPC(frame_size_in_bytes);
 
   if (StackReservedPages > 0 && C->has_reserved_stack_access()) {
     __ reserved_stack_check(Z_R14);
   }
@@ -1255,22 +1255,22 @@
 
 void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc * ra_) const {
   MacroAssembler _masm(&cbuf);
 
   int rem_space = 0;
-  if (!(ra_->C->in_scratch_emit_size())) {
+  if (!(ra_->C->output()->in_scratch_emit_size())) {
     rem_space = cbuf.insts()->remaining();
     if (rem_space <= _count*2 + 8) {
       tty->print("NopNode: _count = %3.3d, remaining space before = %d", _count, rem_space);
     }
   }
 
   for (int i = 0; i < _count; i++) {
     __ z_nop();
   }
 
-  if (!(ra_->C->in_scratch_emit_size())) {
+  if (!(ra_->C->output()->in_scratch_emit_size())) {
     if (rem_space <= _count*2 + 8) {
       int rem_space2 = cbuf.insts()->remaining();
       tty->print_cr(", after = %d", rem_space2);
     }
   }
@@ -1708,12 +1708,11 @@
 // needed. Else we split the double into 2 integer pieces and move it
 // piece-by-piece. Only happens when passing doubles into C code as the
 // Java calling convention forces doubles to be aligned.
 const bool Matcher::misaligned_doubles_ok = true;
 
-// Advertise here if the CPU requires explicit rounding operations
-// to implement the UseStrictFP mode.
+// Advertise here if the CPU requires explicit rounding operations to implement strictfp mode.
 const bool Matcher::strict_fp_requires_explicit_rounding = false;
 
 // Do floats take an entire double register or just half?
 //
 // A float in resides in a zarch double register. When storing it by
