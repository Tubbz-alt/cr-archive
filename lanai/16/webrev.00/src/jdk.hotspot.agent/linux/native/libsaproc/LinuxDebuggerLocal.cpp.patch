diff a/src/jdk.hotspot.agent/linux/native/libsaproc/LinuxDebuggerLocal.cpp b/src/jdk.hotspot.agent/linux/native/libsaproc/LinuxDebuggerLocal.cpp
--- a/src/jdk.hotspot.agent/linux/native/libsaproc/LinuxDebuggerLocal.cpp
+++ b/src/jdk.hotspot.agent/linux/native/libsaproc/LinuxDebuggerLocal.cpp
@@ -1,8 +1,8 @@
 /*
- * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2019, NTT DATA.
+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, NTT DATA.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -62,10 +62,32 @@
 
 #ifdef aarch64
 #include "sun_jvm_hotspot_debugger_aarch64_AARCH64ThreadContext.h"
 #endif
 
+class AutoJavaString {
+  JNIEnv* m_env;
+  jstring m_str;
+  const char* m_buf;
+
+public:
+  // check env->ExceptionOccurred() after ctor
+  AutoJavaString(JNIEnv* env, jstring str)
+    : m_env(env), m_str(str), m_buf(env->GetStringUTFChars(str, NULL)) {
+  }
+
+  ~AutoJavaString() {
+    if (m_buf) {
+      m_env->ReleaseStringUTFChars(m_str, m_buf);
+    }
+  }
+
+  operator const char* () const {
+    return m_buf;
+  }
+};
+
 static jfieldID p_ps_prochandle_ID = 0;
 static jfieldID threadList_ID = 0;
 static jfieldID loadObjectList_ID = 0;
 
 static jmethodID createClosestSymbol_ID = 0;
@@ -232,11 +254,12 @@
 JNIEXPORT void JNICALL Java_sun_jvm_hotspot_debugger_linux_LinuxDebuggerLocal_setSAAltRoot0
   (JNIEnv *env, jobject this_obj, jstring altroot) {
   if (saaltroot != NULL) {
     free(saaltroot);
   }
-  const char *path = env->GetStringUTFChars(altroot, JNI_FALSE);
+  const char *path = env->GetStringUTFChars(altroot, NULL);
+  if (path == NULL) { return; }
   /*
    * `saaltroot` is used for putenv().
    * So we need to keep this memory.
    */
   static const char *PREFIX = "SA_ALTROOT=";
@@ -279,31 +302,23 @@
  * Signature: (Ljava/lang/String;Ljava/lang/String;)V
  */
 extern "C"
 JNIEXPORT void JNICALL Java_sun_jvm_hotspot_debugger_linux_LinuxDebuggerLocal_attach0__Ljava_lang_String_2Ljava_lang_String_2
   (JNIEnv *env, jobject this_obj, jstring execName, jstring coreName) {
-  const char *execName_cstr;
-  const char *coreName_cstr;
-  jboolean isCopy;
   struct ps_prochandle* ph;
-
-  execName_cstr = env->GetStringUTFChars(execName, &isCopy);
+  AutoJavaString execName_cstr(env, execName);
   CHECK_EXCEPTION;
-  coreName_cstr = env->GetStringUTFChars(coreName, &isCopy);
+  AutoJavaString coreName_cstr(env, coreName);
   CHECK_EXCEPTION;
 
   verifyBitness(env, execName_cstr);
   CHECK_EXCEPTION;
 
   if ( (ph = Pgrab_core(execName_cstr, coreName_cstr)) == NULL) {
-    env->ReleaseStringUTFChars(execName, execName_cstr);
-    env->ReleaseStringUTFChars(coreName, coreName_cstr);
     THROW_NEW_DEBUGGER_EXCEPTION("Can't attach to the core file");
   }
   env->SetLongField(this_obj, p_ps_prochandle_ID, (jlong)(intptr_t)ph);
-  env->ReleaseStringUTFChars(execName, execName_cstr);
-  env->ReleaseStringUTFChars(coreName, coreName_cstr);
   fillThreadsAndLoadObjects(env, this_obj, ph);
 }
 
 /*
  * Class:     sun_jvm_hotspot_debugger_linux_LinuxDebuggerLocal
@@ -329,29 +344,19 @@
  * Signature: (Ljava/lang/String;Ljava/lang/String;)J
  */
 extern "C"
 JNIEXPORT jlong JNICALL Java_sun_jvm_hotspot_debugger_linux_LinuxDebuggerLocal_lookupByName0
   (JNIEnv *env, jobject this_obj, jstring objectName, jstring symbolName) {
-  const char *objectName_cstr, *symbolName_cstr;
   jlong addr;
   jboolean isCopy;
   struct ps_prochandle* ph = get_proc_handle(env, this_obj);
-
-  objectName_cstr = NULL;
-  if (objectName != NULL) {
-    objectName_cstr = env->GetStringUTFChars(objectName, &isCopy);
-    CHECK_EXCEPTION_(0);
-  }
-  symbolName_cstr = env->GetStringUTFChars(symbolName, &isCopy);
+  AutoJavaString objectName_cstr(env, objectName);
+  CHECK_EXCEPTION_(0);
+  AutoJavaString symbolName_cstr(env, symbolName);
   CHECK_EXCEPTION_(0);
 
   addr = (jlong) lookup_symbol(ph, objectName_cstr, symbolName_cstr);
-
-  if (objectName_cstr != NULL) {
-    env->ReleaseStringUTFChars(objectName, objectName_cstr);
-  }
-  env->ReleaseStringUTFChars(symbolName, symbolName_cstr);
   return addr;
 }
 
 /*
  * Class:     sun_jvm_hotspot_debugger_linux_LinuxDebuggerLocal
@@ -592,11 +597,14 @@
 JNIEXPORT jstring JNICALL Java_sun_jvm_hotspot_debugger_linux_LinuxDebuggerLocal_demangle
   (JNIEnv *env, jobject this_obj, jstring jsym) {
   int status;
   jstring result = NULL;
 
-  const char *sym = env->GetStringUTFChars(jsym, JNI_FALSE);
+  const char *sym = env->GetStringUTFChars(jsym, NULL);
+  if (sym == NULL) {
+    THROW_NEW_DEBUGGER_EXCEPTION_("Error getting symbol string", NULL);
+  }
   char *demangled = abi::__cxa_demangle(sym, NULL, 0, &status);
   env->ReleaseStringUTFChars(jsym, sym);
   if ((demangled != NULL) && (status == 0)) {
     result = env->NewStringUTF(demangled);
     free(demangled);
@@ -606,5 +614,17 @@
     THROW_NEW_DEBUGGER_EXCEPTION_("Could not demangle", NULL);
   }
 
   return result;
 }
+
+/*
+ * Class:     sun_jvm_hotspot_debugger_linux_LinuxDebuggerLocal
+ * Method:    findLibPtrByAddress0
+ * Signature: (J)J
+ */
+extern "C"
+JNIEXPORT jlong JNICALL Java_sun_jvm_hotspot_debugger_linux_LinuxDebuggerLocal_findLibPtrByAddress0
+  (JNIEnv *env, jobject this_obj, jlong pc) {
+  struct ps_prochandle* ph = get_proc_handle(env, this_obj);
+  return reinterpret_cast<jlong>(find_lib_by_address(ph, pc));
+}
