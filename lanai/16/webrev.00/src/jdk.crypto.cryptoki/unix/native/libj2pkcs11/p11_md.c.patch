diff a/src/jdk.crypto.cryptoki/unix/native/libj2pkcs11/p11_md.c b/src/jdk.crypto.cryptoki/unix/native/libj2pkcs11/p11_md.c
--- a/src/jdk.crypto.cryptoki/unix/native/libj2pkcs11/p11_md.c
+++ b/src/jdk.crypto.cryptoki/unix/native/libj2pkcs11/p11_md.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  */
 
 /* Copyright  (c) 2002 Graz University of Technology. All rights reserved.
  *
  * Redistribution and use in  source and binary forms, with or without
@@ -91,11 +91,10 @@
     if (libraryNameStr == NULL) {
         return;
     }
     TRACE1("DEBUG: connect to PKCS#11 module: %s ... ", libraryNameStr);
 
-
     /*
      * Load the PKCS #11 DLL
      */
     dlerror(); /* clear any old error message not fetched */
 #ifdef DEBUG
@@ -117,10 +116,11 @@
         throwIOException(env, exceptionMessage);
         (*env)->ReleaseStringUTFChars(env, jPkcs11ModulePath, libraryNameStr);
         free(exceptionMessage);
         return;
     }
+    (*env)->ReleaseStringUTFChars(env, jPkcs11ModulePath, libraryNameStr);
 
     /*
      * Get function pointer to C_GetFunctionList
      */
     dlerror(); /* clear any old error message not fetched */
@@ -154,11 +154,10 @@
     moduleData->applicationMutexHandler = NULL;
     rv = (C_GetFunctionList)(&(moduleData->ckFunctionListPtr));
     globalPKCS11ImplementationReference = (*env)->NewGlobalRef(env, obj);
     putModuleEntry(env, globalPKCS11ImplementationReference, moduleData);
 
-    (*env)->ReleaseStringUTFChars(env, jPkcs11ModulePath, libraryNameStr);
     TRACE0("FINISHED\n");
 
     if(ckAssertReturnValueOK(env, rv) != CK_ASSERT_OK) { return; }
 }
 
