diff a/test/langtools/tools/javac/modules/RequiresStaticTest.java b/test/langtools/tools/javac/modules/RequiresStaticTest.java
--- a/test/langtools/tools/javac/modules/RequiresStaticTest.java
+++ b/test/langtools/tools/javac/modules/RequiresStaticTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -35,10 +35,13 @@
 
 import java.io.File;
 import java.nio.file.Files;
 import java.nio.file.Path;
 
+import java.util.List;
+import java.util.stream.Collectors;
+
 import toolbox.JavaTask;
 import toolbox.JavacTask;
 import toolbox.Task;
 import toolbox.Task.OutputKind;
 
@@ -255,22 +258,19 @@
                 .files(findJavaFiles(m3))
                 .outdir(m3Classes)
                 .run()
                 .writeAll();
 
-        String log = new JavaTask(tb)
+        List<String> log = new JavaTask(tb)
                 .vmOptions("--module-path", m3Classes.toString(), "--add-modules", "m3x")
                 .className("m3x.Test")
                 .run()
                 .writeAll()
-                .getOutput(OutputKind.STDERR);
-
-        String expected = "ok" + System.getProperty("line.separator");
+                .getOutputLines(OutputKind.STDERR);
+        log = log.stream().filter(s->!s.matches("^Picked up .*JAVA.*OPTIONS:.*")).collect(Collectors.toList());
 
-        if (!expected.equals(log)) {
-            throw new AssertionError("Unexpected output: " + log);
-        }
+        tb.checkEqual(log, List.of("ok"));
     }
 
     @Test
     public void testRequiresTransitiveStatic(Path base) throws Exception {
         Path src = base.resolve("src");
@@ -330,23 +330,20 @@
                 .files(findJavaFiles(m3))
                 .outdir(m3Classes)
                 .run()
                 .writeAll();
 
-        String log = new JavaTask(tb)
+        List<String> log = new JavaTask(tb)
                 .vmOptions("--module-path", m2Classes.toString() + File.pathSeparator + m3Classes.toString(),
                            "--add-modules", "m3x")
                 .className("m3x.Test")
                 .run()
                 .writeAll()
-                .getOutput(OutputKind.STDERR);
+                .getOutputLines(OutputKind.STDERR);
+        log = log.stream().filter(s->!s.matches("^Picked up .*JAVA.*OPTIONS:.*")).collect(Collectors.toList());
 
-        String expected = "ok" + System.getProperty("line.separator");
-
-        if (!expected.equals(log)) {
-            throw new AssertionError("Unexpected output: " + log);
-        }
+        tb.checkEqual(log, List.of("ok"));
     }
 
     @Test
     public void testRequiresStaticTransitive(Path base) throws Exception {
         Path src = base.resolve("src");
