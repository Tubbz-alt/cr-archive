diff a/test/langtools/tools/javac/records/RecordCompilationTests.java b/test/langtools/tools/javac/records/RecordCompilationTests.java
--- a/test/langtools/tools/javac/records/RecordCompilationTests.java
+++ b/test/langtools/tools/javac/records/RecordCompilationTests.java
@@ -28,10 +28,11 @@
  *
  * @test
  * @summary Negative compilation tests, and positive compilation (smoke) tests for records
  * @library /lib/combo /tools/lib /tools/javac/lib
  * @modules
+ *      jdk.compiler/com.sun.tools.javac.api
  *      jdk.compiler/com.sun.tools.javac.code
  *      jdk.compiler/com.sun.tools.javac.util
  *      jdk.jdeps/com.sun.tools.classfile
  * @build JavacTestingAbstractProcessor
  * @compile --enable-preview -source ${jdk.version} RecordCompilationTests.java
@@ -84,13 +85,15 @@
 import com.sun.tools.classfile.RuntimeVisibleAnnotations_attribute;
 import com.sun.tools.classfile.RuntimeVisibleParameterAnnotations_attribute;
 import com.sun.tools.classfile.RuntimeVisibleTypeAnnotations_attribute;
 import com.sun.tools.classfile.TypeAnnotation;
 
+import com.sun.tools.javac.api.ClientCodeWrapper.DiagnosticSourceUnwrapper;
 import com.sun.tools.javac.code.Attribute.TypeCompound;
 import com.sun.tools.javac.code.Symbol;
 import com.sun.tools.javac.code.Symbol.VarSymbol;
+import com.sun.tools.javac.util.JCDiagnostic;
 
 import org.testng.annotations.Test;
 import tools.javac.combo.CompilationTestCase;
 
 import static java.lang.annotation.ElementType.*;
@@ -167,11 +170,19 @@
                 "@interface record { }",
                 "class record { }",
                 "record record(int x) { }",
                 "enum record { A, B }",
                 "class R<record> { }")) {
-            assertFail("compiler.err.restricted.type.not.allowed", s);
+            assertFail(
+                    "compiler.err.restricted.type.not.allowed",
+                    diagWrapper -> {
+                        JCDiagnostic diagnostic = ((DiagnosticSourceUnwrapper)diagWrapper).d;
+                        Object[] args = diagnostic.getArgs();
+                        Assert.check(args.length == 2);
+                        Assert.check(args[1].toString().equals("JDK14"));
+                    },
+                    s);
         }
     }
 
     public void testValidMembers() {
         for (String s : List.of("record X(int j) { }",
@@ -307,20 +318,30 @@
         assertFail("compiler.err.invalid.canonical.constructor.in.record",
                 "import java.util.*;\n" +
                         "record R(List<String> list) { # }",
                 "R(List list) { this.list = list; }");
 
-        // ctor should not add checked exceptions
+        // canonical ctor should not throw checked exceptions
         assertFail("compiler.err.invalid.canonical.constructor.in.record",
                    "record R() { # }",
                    "public R() throws Exception { }");
 
-        // not even checked exceptions
+        // same for compact
+        assertFail("compiler.err.invalid.canonical.constructor.in.record",
+                "record R() { # }",
+                "public R throws Exception { }");
+
+        // not even unchecked exceptions
         assertFail("compiler.err.invalid.canonical.constructor.in.record",
                 "record R() { # }",
                  "public R() throws IllegalArgumentException { }");
 
+        // ditto
+        assertFail("compiler.err.invalid.canonical.constructor.in.record",
+                "record R() { # }",
+                "public R throws IllegalArgumentException { }");
+
         // If types match, names must match
         assertFail("compiler.err.invalid.canonical.constructor.in.record",
                    "record R(int x, int y) { public R(int y, int x) { this.x = this.y = 0; }}");
 
         // first invocation should be one to the canonical
