diff a/test/jdk/java/net/HttpURLConnection/HttpURLConWithProxy.java b/test/jdk/java/net/HttpURLConnection/HttpURLConWithProxy.java
--- a/test/jdk/java/net/HttpURLConnection/HttpURLConWithProxy.java
+++ b/test/jdk/java/net/HttpURLConnection/HttpURLConWithProxy.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 
  /*
  * @test
- * @bug 8161016
+ * @bug 8161016 8183369
  * @library /test/lib
  * @summary When proxy is set HttpURLConnection should not use DIRECT connection.
  * @run main/othervm HttpURLConWithProxy
  */
 import java.io.IOException;
@@ -35,27 +35,36 @@
 import java.net.ProxySelector;
 import java.net.ServerSocket;
 import java.net.SocketAddress;
 import java.net.URI;
 import java.net.URL;
-import java.net.URLConnection;
+import java.net.HttpURLConnection;
 import java.util.ArrayList;
 import java.util.List;
 import jdk.test.lib.net.URIBuilder;
+import java.util.logging.Handler;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import java.util.logging.LogRecord;
 
 public class HttpURLConWithProxy {
 
     public static void main(String... arg) throws Exception {
         // Remove the default nonProxyHosts to use localhost for testing
         System.setProperty("http.nonProxyHosts", "");
 
         System.setProperty("http.proxyHost", "1.1.1.1");
         System.setProperty("http.proxyPort", "1111");
+        String HTTPLOG = "sun.net.www.protocol.http.HttpURLConnection";
+        Logger.getLogger(HTTPLOG).setLevel(Level.ALL);
+        Handler h = new ProxyHandler();
+        h.setLevel(Level.ALL);
+        Logger.getLogger(HTTPLOG).addHandler(h);
 
         ServerSocket ss;
         URL url;
-        URLConnection con;
+        HttpURLConnection con;
         InetAddress loopback = InetAddress.getLoopbackAddress();
         InetSocketAddress address = new InetSocketAddress(loopback, 0);
 
         // Test1: using Proxy set by System Property:
         try {
@@ -64,36 +73,51 @@
             url = URIBuilder.newBuilder()
                 .scheme("http")
                 .loopback()
                 .port(ss.getLocalPort())
                 .toURL();
-            con = url.openConnection();
+            con = (HttpURLConnection) url.openConnection();
             con.setConnectTimeout(10 * 1000);
             con.connect();
-            throw new RuntimeException("Shouldn't use DIRECT connection "
-                    + "when proxy is invalid/down");
+            if(con.usingProxy()){
+                System.out.println("Test1 Passed with: Connection succeeded with proxy");
+            } else {
+                throw new RuntimeException("Shouldn't use DIRECT connection "
+                        + "when proxy is invalid/down");
+            }
         } catch (IOException ie) {
+            if(!ProxyHandler.proxyRetried) {
+                throw new RuntimeException("Connection not retried with proxy");
+            }
             System.out.println("Test1 Passed with: " + ie.getMessage());
         }
 
         // Test2: using custom ProxySelector implementation
+        ProxyHandler.proxyRetried = false;
         MyProxySelector myProxySel = new MyProxySelector();
         ProxySelector.setDefault(myProxySel);
         try {
             ss = new ServerSocket();
             ss.bind(address);
             url = URIBuilder.newBuilder()
                 .scheme("http")
                 .loopback()
                 .port(ss.getLocalPort())
                 .toURL();
-            con = url.openConnection();
+            con = (HttpURLConnection) url.openConnection();
             con.setConnectTimeout(10 * 1000);
             con.connect();
-            throw new RuntimeException("Shouldn't use DIRECT connection "
-                    + "when proxy is invalid/down");
+            if(con.usingProxy()){
+                System.out.println("Test2 Passed with: Connection succeeded with proxy");
+            } else {
+                throw new RuntimeException("Shouldn't use DIRECT connection "
+                        + "when proxy is invalid/down");
+            }
         } catch (IOException ie) {
+            if(!ProxyHandler.proxyRetried) {
+                throw new RuntimeException("Connection not retried with proxy");
+            }
             System.out.println("Test2 Passed with: " + ie.getMessage());
         }
     }
 }
 
@@ -117,5 +141,24 @@
     @Override
     public void connectFailed(URI uri, SocketAddress sa, IOException ioe) {
         // System.out.println("MyProxySelector.connectFailed(): "+sa);
     }
 }
+
+class ProxyHandler extends Handler {
+    public static boolean proxyRetried = false;
+
+    @Override
+    public void publish(LogRecord record) {
+        if (record.getMessage().contains("Retrying with proxy")) {
+            proxyRetried = true;
+        }
+    }
+
+    @Override
+    public void flush() {
+    }
+
+    @Override
+    public void close() throws SecurityException {
+    }
+}
