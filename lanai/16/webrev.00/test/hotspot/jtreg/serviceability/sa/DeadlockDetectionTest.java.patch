diff a/test/hotspot/jtreg/serviceability/sa/DeadlockDetectionTest.java b/test/hotspot/jtreg/serviceability/sa/DeadlockDetectionTest.java
--- a/test/hotspot/jtreg/serviceability/sa/DeadlockDetectionTest.java
+++ b/test/hotspot/jtreg/serviceability/sa/DeadlockDetectionTest.java
@@ -22,12 +22,11 @@
  */
 
 /**
  * @test
  * @summary Test deadlock detection
- * @requires vm.hasSAandCanAttach
- * @requires os.family != "mac"
+ * @requires vm.hasSA
  * @library /test/lib
  * @modules java.base/jdk.internal.misc
  * @modules java.management
  * @run main DeadlockDetectionTest
  */
@@ -36,41 +35,41 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
 import jdk.test.lib.apps.LingeredApp;
 import jdk.test.lib.apps.LingeredAppWithDeadlock;
-
-import jdk.test.lib.Utils;
 import jdk.test.lib.JDKToolLauncher;
 import jdk.test.lib.process.OutputAnalyzer;
 import jdk.test.lib.process.ProcessTools;
+import jdk.test.lib.SA.SATestUtils;
+import jdk.test.lib.Utils;
 
 import jtreg.SkippedException;
 
 public class DeadlockDetectionTest {
 
     private static LingeredAppWithDeadlock theApp = null;
-    private static ProcessBuilder processBuilder = new ProcessBuilder();
 
     private static OutputAnalyzer jstack(String... toolArgs) throws Exception {
         JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK("jhsdb");
         launcher.addToolArg("jstack");
         if (toolArgs != null) {
             for (String toolArg : toolArgs) {
                 launcher.addToolArg(toolArg);
             }
         }
 
-        processBuilder.command(launcher.getCommand());
+        ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);
         System.out.println(processBuilder.command().stream().collect(Collectors.joining(" ")));
         OutputAnalyzer output = ProcessTools.executeProcess(processBuilder);
         System.out.println(output.getOutput());
 
         return output;
     }
 
     public static void main(String[] args) throws Exception {
+        SATestUtils.skipIfCannotAttach(); // throws SkippedException if attach not expected to work.
         System.out.println("Starting DeadlockDetectionTest");
 
         if (!LingeredApp.isLastModifiedWorking()) {
             // Exact behaviour of the test depends on operating system and the test nature,
             // so just print the warning and continue
@@ -89,11 +88,10 @@
                 throw new SkippedException("Test can't run for some reason");
             } else {
                 output.shouldHaveExitValue(0);
                 output.shouldContain("Found a total of 1 deadlock.");
             }
-
         } finally {
             LingeredApp.stopApp(theApp);
         }
     }
 }
