diff a/test/hotspot/jtreg/runtime/TLS/exestack-tls.c b/test/hotspot/jtreg/runtime/TLS/exestack-tls.c
--- a/test/hotspot/jtreg/runtime/TLS/exestack-tls.c
+++ b/test/hotspot/jtreg/runtime/TLS/exestack-tls.c
@@ -1,8 +1,8 @@
 /*
  * Copyright (c) 2019, Google Inc. All rights reserved.
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -24,10 +24,11 @@
 
 #include <jni.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <gnu/libc-version.h>
 
 // Declare the thread local variable(s) in the main executable. This can be
 // used to demonstrate the issues associated with the on-stack static TLS blocks
 // that may cause insufficient stack space. The dynamic TLS blocks for shared
 // objects (such as a JNI library) loaded via dlopen are not allocated on stack.
@@ -51,18 +52,35 @@
     rv = JNI_CreateJavaVM(jvm, (void**)&env, &args);
     if (rv < 0) return NULL;
     return env;
 }
 
+// glibc 2.15 introduced __pthread_get_minstack
+int glibc_has_pthread_get_minstack() {
+  const char* glibc_vers = gnu_get_libc_version();
+  const int glibc_vers_major = atoi(glibc_vers);
+  const int glibc_vers_minor = atoi(strchr(glibc_vers, '.') + 1);;
+  printf("GNU libc version: %s\n", glibc_vers);
+  if ((glibc_vers_major > 2) || ((glibc_vers_major == 2) && (glibc_vers_minor >= 15))) {
+    return 1;
+  }
+  printf("This version does not provide __pthread_get_minstack\n");
+  return 0;
+}
+
 int run(jboolean addTLS) {
     JavaVM *jvm;
     jclass testClass;
     jmethodID runMethod;
     char* argTLS;
     int res = -1;
 
     if (addTLS) {
+      if (!glibc_has_pthread_get_minstack()) {
+        printf("Skipping the test.\n");
+        return 0;
+      }
       argTLS = "-XX:+AdjustStackSizeForTLS";
     } else {
       argTLS = "-XX:-AdjustStackSizeForTLS"; // default
     }
     printf("Running test with %s ...\n", argTLS);
