diff a/src/java.desktop/macosx/classes/sun/lwawt/macosx/CPlatformEmbeddedFrame.java b/src/java.desktop/macosx/classes/sun/lwawt/macosx/CPlatformEmbeddedFrame.java
--- a/src/java.desktop/macosx/classes/sun/lwawt/macosx/CPlatformEmbeddedFrame.java
+++ b/src/java.desktop/macosx/classes/sun/lwawt/macosx/CPlatformEmbeddedFrame.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -27,50 +27,66 @@
 
 import java.awt.*;
 import java.awt.event.FocusEvent;
 
 import sun.java2d.SurfaceData;
+import sun.java2d.macos.MacOSFlags;
+import sun.java2d.metal.MTLLayer;
 import sun.java2d.opengl.CGLLayer;
 import sun.lwawt.LWWindowPeer;
 import sun.lwawt.PlatformWindow;
+import sun.lwawt.macosx.CFRetainedResource;
 import sun.util.logging.PlatformLogger;
 
+
 /*
  * Provides a lightweight implementation of the EmbeddedFrame.
  */
 public class CPlatformEmbeddedFrame implements PlatformWindow {
 
     private static final PlatformLogger focusLogger = PlatformLogger.getLogger(
             "sun.lwawt.macosx.focus.CPlatformEmbeddedFrame");
 
-    private CGLLayer windowLayer;
+    private CFRetainedResource windowLayer;
     private LWWindowPeer peer;
     private CEmbeddedFrame target;
 
     private volatile int screenX = 0;
     private volatile int screenY = 0;
 
     @Override // PlatformWindow
     public void initialize(Window target, final LWWindowPeer peer, PlatformWindow owner) {
         this.peer = peer;
-        this.windowLayer = new CGLLayer(peer);
+        if (MacOSFlags.isMetalEnabled()) {
+            this.windowLayer = new MTLLayer(peer);
+        } else {
+            this.windowLayer = new CGLLayer(peer);
+        }
         this.target = (CEmbeddedFrame)target;
     }
 
     @Override
     public LWWindowPeer getPeer() {
         return peer;
     }
 
     @Override
     public long getLayerPtr() {
-        return windowLayer.getPointer();
+        if (MacOSFlags.isMetalEnabled()) {
+            return ((MTLLayer)windowLayer).getPointer();
+        } else {
+            return ((CGLLayer)windowLayer).getPointer();
+        }
     }
 
     @Override
     public void dispose() {
-        windowLayer.dispose();
+        if (MacOSFlags.isMetalEnabled()) {
+            ((MTLLayer)windowLayer).dispose();
+        } else {
+            ((CGLLayer)windowLayer).dispose();
+        }
     }
 
     @Override
     public void setBounds(int x, int y, int w, int h) {
         // This is a lightweight implementation of the EmbeddedFrame
@@ -97,16 +113,24 @@
         throw new RuntimeException("Not implemented");
     }
 
     @Override
     public SurfaceData getScreenSurface() {
-        return windowLayer.getSurfaceData();
+        if (MacOSFlags.isMetalEnabled()) {
+            return ((MTLLayer)windowLayer).getSurfaceData();
+        } else {
+            return ((CGLLayer)windowLayer).getSurfaceData();
+        }
     }
 
     @Override
     public SurfaceData replaceSurfaceData() {
-        return windowLayer.replaceSurfaceData();
+        if (MacOSFlags.isMetalEnabled()) {
+            return ((MTLLayer)windowLayer).replaceSurfaceData();
+        } else {
+            return ((CGLLayer)windowLayer).replaceSurfaceData();
+        }
     }
 
     @Override
     public void setVisible(boolean visible) {}
 
