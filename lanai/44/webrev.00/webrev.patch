diff a/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal b/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
--- a/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
+++ b/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
@@ -185,14 +185,21 @@
 }
 
 fragment half4 aa_frag_txt(
         TxtShaderInOut vert [[stage_in]],
         texture2d<float, access::sample> renderTexture [[texture(0)]],
+        texture2d<float, access::sample> stencilTexture [[texture(1)]],
         constant TxtFrameUniforms& uniforms [[buffer(1)]],
         sampler textureSampler [[sampler(0)]]
 ) {
     float4 pixelColor = renderTexture.sample(textureSampler, vert.texCoords);
+    if (!is_null_texture(stencilTexture)) {
+        float4 stencil = stencilTexture.sample(textureSampler, vert.texCoords);
+        if (stencil.r ==  0.0) {
+            discard_fragment();
+        }
+    }
     return half4(pixelColor.r, pixelColor.g, pixelColor.b, pixelColor.a);
 }
 
 fragment half4 frag_grad(GradShaderInOut in [[stage_in]],
                          constant GradFrameUniforms& uniforms [[buffer(0)]]) {
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/EncoderManager.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/EncoderManager.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/EncoderManager.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/EncoderManager.m
@@ -409,16 +409,16 @@
       ca.texture = dest;
       ca.loadAction = MTLLoadActionLoad;
       ca.storeAction = MTLStoreActionStore;
     }
 
-    if (_useStencil) {
-      // If you enable stencil testing or stencil writing, the
-      // MTLRenderPassDescriptor must include a stencil attachment.
-      rpd.stencilAttachment.texture = _mtlc.clip.stencilTextureRef;
-      rpd.stencilAttachment.loadAction = MTLLoadActionLoad;
-      rpd.stencilAttachment.storeAction = MTLStoreActionDontCare;
+    if (_useStencil && !isAA) {
+        // If you enable stencil testing or stencil writing, the
+        // MTLRenderPassDescriptor must include a stencil attachment.
+        rpd.stencilAttachment.loadAction = MTLLoadActionLoad;
+        rpd.stencilAttachment.storeAction = MTLStoreActionStore;
+        rpd.stencilAttachment.texture = _mtlc.clip.stencilTextureRef;
     }
 
     // J2dTraceLn1(J2D_TRACE_VERBOSE, "created render encoder to draw on
     // tex=%p", dest);
     _encoder = [[cbw getCommandBuffer] renderCommandEncoderWithDescriptor:rpd];
@@ -465,10 +465,11 @@
           _encoder = [self getTextureEncoder:_destination
                                  isSrcOpaque:JNI_FALSE
                                  isDstOpaque:JNI_TRUE
                                interpolation:INTERPOLATION_NEAREST_NEIGHBOR
                                         isAA:JNI_TRUE];
+          [_encoder setFragmentTexture:_mtlc.clip.stencilAADataRef atIndex: 1];
 
           struct TxtVertex quadTxVerticesBuffer[] = {
               {{0, 0}, {0, 0}},
               {{0,_h}, {0, 1}},
               {{_w, 0},{1, 0}},
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLClip.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLClip.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLClip.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLClip.h
@@ -20,10 +20,11 @@
 /**
  * The MTLClip class represents clip mode (rect or stencil)
  * */
 
 @interface MTLClip : NSObject
+@property (readonly) id<MTLTexture> stencilAADataRef;
 @property (readonly) id<MTLTexture> stencilTextureRef;
 @property (readonly) jboolean stencilMaskGenerationInProgress;
 
 - (id)init;
 - (BOOL)isEqual:(MTLClip *)other; // used to compare requested with cached
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLClip.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLClip.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLClip.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLClip.m
@@ -1,7 +1,6 @@
 #include "MTLClip.h"
-#import <iso646.h>
 
 #include "MTLContext.h"
 #include "common.h"
 
 static MTLRenderPipelineDescriptor * templateStencilPipelineDesc = nil;
@@ -51,10 +50,11 @@
     jint _clipType;
     MTLScissorRect  _clipRect;
 
     jboolean _stencilMaskGenerationInProgress;
     id<MTLTexture> _stencilTextureRef;
+    id<MTLTexture> _stencilAADataRef;
 }
 
 - (id)init {
     self = [super init];
     if (self) {
@@ -97,24 +97,27 @@
 
 - (void)copyFrom:(MTLClip *)other {
     _clipType = other->_clipType;
     _stencilMaskGenerationInProgress = other->_stencilMaskGenerationInProgress;
     _stencilTextureRef = other->_stencilTextureRef;
+    _stencilAADataRef = other->_stencilAADataRef;
     if (other->_clipType == RECT_CLIP) {
         _clipRect = other->_clipRect;
     }
 }
 
 - (void)reset {
     _clipType = NO_CLIP;
     _stencilTextureRef = nil;
+    _stencilAADataRef = nil;
     _stencilMaskGenerationInProgress = JNI_FALSE;
 }
 
 - (void)setClipRectX1:(jint)x1 Y1:(jint)y1 X2:(jint)x2 Y2:(jint)y2 {
     if (_clipType == SHAPE_CLIP) {
         _stencilTextureRef = nil;
+        _stencilAADataRef = nil;
     }
 
     if (x1 >= x2 || y1 >= y2) {
         J2dTraceLn4(J2D_TRACE_ERROR, "MTLClip.setClipRect: invalid rect: x1=%d y1=%d x2=%d y2=%d", x1, y1, x2, y2);
         _clipType = NO_CLIP;
@@ -146,35 +149,48 @@
           return;
         }
 
         NSUInteger width = (NSUInteger)dstOps->width;
         NSUInteger height = (NSUInteger)dstOps->height;
-        id <MTLBuffer> buff = [mtlc.device newBufferWithLength:width * height options:MTLResourceStorageModeShared];
-        memset(buff.contents, 0, width * height);
-
+        NSUInteger size = width*height;
+        id <MTLBuffer> buff = [mtlc.device newBufferWithLength:size*4 options:MTLResourceStorageModePrivate];
         id<MTLCommandBuffer> commandBuf = [mtlc createBlitCommandBuffer];
         id<MTLBlitCommandEncoder> blitEncoder = [commandBuf blitCommandEncoder];
+        [blitEncoder fillBuffer:buff range:NSMakeRange(0, size*4) value:0];
 
+        MTLOrigin origin = MTLOriginMake(0, 0, 0);
+        MTLSize sourceSize = MTLSizeMake(width, height, 1);
         [blitEncoder copyFromBuffer:buff
                        sourceOffset:0
                   sourceBytesPerRow:width
-                sourceBytesPerImage:width * height
-                         sourceSize:MTLSizeMake(width, height, 1)
+                sourceBytesPerImage:size
+                         sourceSize:sourceSize
                           toTexture:dstOps->pStencilData
                    destinationSlice:0
                    destinationLevel:0
-                  destinationOrigin:MTLOriginMake(0, 0, 0)];
+                  destinationOrigin:origin];
+
+        [blitEncoder copyFromBuffer:buff
+                       sourceOffset:0
+                  sourceBytesPerRow:width*4
+                sourceBytesPerImage:size*4
+                         sourceSize:sourceSize
+                          toTexture:dstOps->pAAStencilData
+                   destinationSlice:0
+                   destinationLevel:0
+                  destinationOrigin:origin];
 
         [blitEncoder copyFromBuffer:buff
                        sourceOffset:0
                   sourceBytesPerRow:width
-                sourceBytesPerImage:width * height
-                         sourceSize:MTLSizeMake(width, height, 1)
+                sourceBytesPerImage:size
+                         sourceSize:sourceSize
                           toTexture:dstOps->pStencilTexture
                    destinationSlice:0
                    destinationLevel:0
-                  destinationOrigin:MTLOriginMake(0, 0, 0)];
+                  destinationOrigin:origin];
+
         [blitEncoder endEncoding];
 
         [commandBuf commit];
         [commandBuf waitUntilCompleted];
 
@@ -203,50 +219,80 @@
     [commandBuffer waitUntilCompleted];
 
     // Now the stencil data is ready, this needs to be used while rendering further
     @autoreleasepool {
         if (dstOps->width > 0 && dstOps->height > 0) {
-          NSUInteger width = (NSUInteger)dstOps->width;
-          NSUInteger height = (NSUInteger)dstOps->height;
-
-          id<MTLBuffer> buff =
-              [mtlc.device newBufferWithLength:width * height
-                                       options:MTLResourceStorageModeShared];
-
-          id<MTLCommandBuffer> cb = [mtlc createBlitCommandBuffer];
-          id<MTLBlitCommandEncoder> blitEncoder = [cb blitCommandEncoder];
-          [blitEncoder copyFromTexture:dstOps->pStencilData
-                           sourceSlice:0
-                           sourceLevel:0
-                          sourceOrigin:MTLOriginMake(0, 0, 0)
-                            sourceSize:MTLSizeMake(width, height, 1)
-                              toBuffer:buff
-                     destinationOffset:0
-                destinationBytesPerRow:width
-              destinationBytesPerImage:width * height];
-
-          [blitEncoder copyFromBuffer:buff
-                         sourceOffset:0
-                    sourceBytesPerRow:width
-                  sourceBytesPerImage:width * height
-                           sourceSize:MTLSizeMake(width, height, 1)
-                            toTexture:dstOps->pStencilTexture
-                     destinationSlice:0
-                     destinationLevel:0
-                    destinationOrigin:MTLOriginMake(0, 0, 0)];
-
-          [blitEncoder endEncoding];
-
-          [cb commit];
-          [cb waitUntilCompleted];
-
-          [buff release];
+            NSUInteger width = (NSUInteger)dstOps->width;
+            NSUInteger height = (NSUInteger)dstOps->height;
+            NSUInteger size = width*height;
+            NSUInteger sizeX4 = size*4;
+
+            id<MTLBuffer> buff = 
+                [mtlc.device newBufferWithLength:size 
+                                         options:MTLResourceStorageModeShared];
+            id<MTLBuffer> aaBuff = 
+                [mtlc.device newBufferWithLength:sizeX4
+                                         options:MTLResourceStorageModeShared];
+
+            id<MTLCommandBuffer> cb = [mtlc createBlitCommandBuffer];
+            id<MTLBlitCommandEncoder> blitEncoder = [cb blitCommandEncoder];
+            MTLSize sourceSize = MTLSizeMake(width, height, 1);
+            MTLOrigin origin = MTLOriginMake(0, 0, 0);
+            [blitEncoder copyFromTexture:dstOps->pStencilData
+                             sourceSlice:0
+                             sourceLevel:0
+                            sourceOrigin:origin
+                              sourceSize:sourceSize
+                                toBuffer:buff
+                       destinationOffset:0
+                  destinationBytesPerRow:width
+                destinationBytesPerImage:size];
+
+            [blitEncoder copyFromBuffer:buff
+                           sourceOffset:0
+                      sourceBytesPerRow:width
+                    sourceBytesPerImage:size
+                             sourceSize:sourceSize
+                              toTexture:dstOps->pStencilTexture
+                       destinationSlice:0
+                       destinationLevel:0
+                      destinationOrigin:origin];
+
+            [blitEncoder endEncoding];
+            [cb commit];
+            [cb waitUntilCompleted];
+// TODO: Implement via compute shader
+            for (int i = 0; i < width*height; i++) {
+                unsigned char c =  ((unsigned char*)(buff.contents))[i];
+                ((jint*)(aaBuff.contents))[i] = c + (c << 8) + (c << 16) + (c << 24);
+            }
+
+            cb = [mtlc createBlitCommandBuffer];
+            blitEncoder = [cb blitCommandEncoder];
+
+            [blitEncoder copyFromBuffer:aaBuff
+                           sourceOffset:0
+                      sourceBytesPerRow:width*4
+                    sourceBytesPerImage:sizeX4
+                             sourceSize:sourceSize
+                              toTexture:dstOps->pAAStencilData
+                       destinationSlice:0
+                       destinationLevel:0
+                      destinationOrigin:origin];
+            [blitEncoder endEncoding];
+
+            [cb commit];
+            [cb waitUntilCompleted];
+
+            [buff release];
+            [aaBuff release];
         }
     }
 
     _stencilMaskGenerationInProgress = JNI_FALSE;
     _stencilTextureRef = dstOps->pStencilTexture;
+    _stencilAADataRef = dstOps->pAAStencilData;
     _clipType = SHAPE_CLIP;
 }
 
 - (void)setMaskGenerationPipelineState:(id<MTLRenderCommandEncoder>)encoder
                   destWidth:(NSUInteger)dw
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderer.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderer.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderer.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderer.m
@@ -281,11 +281,12 @@
     // NOTE : Due to nature of *spans data - it is not possible to use triangle strip.
     // We use triangle list to draw spans
 
     // Destination texture to which render commands are encoded
     id<MTLTexture> dest = dstOps->pTexture;
-    bool isDestOpaque = dstOps->isOpaque;
+    id<MTLTexture> destAA = nil;
+    BOOL isDestOpaque = dstOps->isOpaque;
     if (mtlc.clip.stencilMaskGenerationInProgress == JNI_TRUE) {
         dest = dstOps->pStencilData;
         isDestOpaque = NO;
     }
     id<MTLRenderCommandEncoder> mtlEncoder = [mtlc.encoderManager getRenderEncoder:dest isDstOpaque:isDestOpaque];
@@ -297,11 +298,11 @@
     // This is the max no of vertices (of struct Vertex - 8 bytes) we can accomodate in 4KB
     const int TOTAL_VERTICES_IN_BLOCK = 510;
     struct Vertex vertexList[TOTAL_VERTICES_IN_BLOCK]; // a total of 170 triangles ==> 85 spans
 
     int counter = 0;
-
+    jint *aaspans = spans;
     for (int i = 0; i < spanCount; i++) {
         jfloat x1 = *(spans++);
         jfloat y1 = *(spans++);
         jfloat x2 = *(spans++);
         jfloat y2 = *(spans++);
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceData.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceData.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceData.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceData.m
@@ -75,10 +75,12 @@
         MTLTextureDescriptor *stencilDataDescriptor =
             [MTLTextureDescriptor texture2DDescriptorWithPixelFormat:MTLPixelFormatR8Uint width:width height:height mipmapped:NO];
         stencilDataDescriptor.usage = MTLTextureUsageRenderTarget | MTLTextureUsageShaderRead;
         stencilDataDescriptor.storageMode = MTLStorageModePrivate;
         bmtlsdo->pStencilData = [ctx.device newTextureWithDescriptor:stencilDataDescriptor];
+        bmtlsdo->pAAStencilData = [ctx.device newTextureWithDescriptor:textureDescriptor];
+
 
         MTLTextureDescriptor *stencilTextureDescriptor =
             [MTLTextureDescriptor texture2DDescriptorWithPixelFormat:MTLPixelFormatStencil8 width:width height:height mipmapped:NO];
         stencilTextureDescriptor.usage = MTLTextureUsageRenderTarget | MTLTextureUsageShaderRead | MTLTextureUsageShaderWrite;
         stencilTextureDescriptor.storageMode = MTLStorageModePrivate;
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceDataBase.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceDataBase.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceDataBase.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceDataBase.h
@@ -171,11 +171,12 @@
     jint                         yOffset;
     jint                         width;
     jint                         height;
     void*                        pTexture;
     void*                        pStencilData; // stencil data to be rendered to this buffer
-    void*                        pStencilTexture; // byte buffer stencil mask used in main rendering
+    void*                        pStencilTexture; // stencil texture byte buffer stencil mask used in main rendering
+    void*                        pAAStencilData; // stencil data for AA rendering
     void*                        textureLCD;
     jint                         textureWidth;
     jint                         textureHeight;
    /* GLenum */ jint                      textureTarget;
    /* GLint  */ jint                      textureFilter;
