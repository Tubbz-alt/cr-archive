diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderer.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderer.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderer.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderer.m
@@ -281,11 +281,12 @@
     // NOTE : Due to nature of *spans data - it is not possible to use triangle strip.
     // We use triangle list to draw spans
 
     // Destination texture to which render commands are encoded
     id<MTLTexture> dest = dstOps->pTexture;
-    bool isDestOpaque = dstOps->isOpaque;
+    id<MTLTexture> destAA = nil;
+    BOOL isDestOpaque = dstOps->isOpaque;
     if (mtlc.clip.stencilMaskGenerationInProgress == JNI_TRUE) {
         dest = dstOps->pStencilData;
         isDestOpaque = NO;
     }
     id<MTLRenderCommandEncoder> mtlEncoder = [mtlc.encoderManager getRenderEncoder:dest isDstOpaque:isDestOpaque];
@@ -297,11 +298,11 @@
     // This is the max no of vertices (of struct Vertex - 8 bytes) we can accomodate in 4KB
     const int TOTAL_VERTICES_IN_BLOCK = 510;
     struct Vertex vertexList[TOTAL_VERTICES_IN_BLOCK]; // a total of 170 triangles ==> 85 spans
 
     int counter = 0;
-
+    jint *aaspans = spans;
     for (int i = 0; i < spanCount; i++) {
         jfloat x1 = *(spans++);
         jfloat y1 = *(spans++);
         jfloat x2 = *(spans++);
         jfloat y2 = *(spans++);
