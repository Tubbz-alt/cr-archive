diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
@@ -263,12 +263,13 @@
         int compositeRule,
         MTLComposite* composite,
         const SurfaceRasterFlags * srcFlags,
         const SurfaceRasterFlags * dstFlags
 ) {
-    if (compositeRule == RULE_Src) {
-        J2dTraceLn(J2D_TRACE_VERBOSE, "set RULE_Src");
+    if (compositeRule == RULE_Src &&
+        (composite == nil || FLT_GE([composite getExtraAlpha], 1.0f))) {
+        J2dTraceLn(J2D_TRACE_VERBOSE, "set RULE_Src but blending is disabled because src is opaque");
         return;
     }
 
     cad.blendingEnabled = YES;
 
@@ -291,11 +292,11 @@
             // Cr = Cs + Cd*(1-As)
             if (srcFlags->isOpaque &&
                 (composite == nil ||
                  FLT_GE([composite getExtraAlpha], 1.0f)))
             {
-                J2dTraceLn(J2D_TRACE_VERBOSE, "rule=RULE_Src, but blending is disabled because src is opaque");
+                J2dTraceLn(J2D_TRACE_VERBOSE, "rule=RULE_SrcOver, but blending is disabled because src is opaque");
                 cad.blendingEnabled = NO;
                 return;
             }
             if (dstFlags->isOpaque) {
                 // Ar = 1, can be ignored, so
