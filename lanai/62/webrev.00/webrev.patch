diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTextRenderer.m
@@ -247,34 +247,32 @@
  * Adds the given glyph to the glyph cache (texture and data structure)
  * associated with the given MTLContext.
  */
 static void
 MTLTR_AddToGlyphCache(GlyphInfo *glyph, MTLContext *mtlc,
-                      MTLPixelFormat pixelFormat)
+                      jboolean lcdCache)
 {
     MTLCacheCellInfo *ccinfo;
     MTLGlyphCacheInfo *gcinfo;
-    jboolean isLCD = JNI_FALSE;
     jint w = glyph->width;
     jint h = glyph->height;
 
     J2dTraceLn(J2D_TRACE_INFO, "MTLTR_AddToGlyphCache");
-    if (pixelFormat == MTLPixelFormatA8Unorm) {
+    if (!lcdCache) {
         gcinfo = glyphCacheAA;
     } else {
         gcinfo = glyphCacheLCD;
-        isLCD = JNI_TRUE;
     }
 
     if ((gcinfo == NULL) || (glyph->image == NULL)) {
         return;
     }
 
     bool isCacheFull = MTLGlyphCache_IsCacheFull(gcinfo, glyph);
     if (isCacheFull) {
         MTLGlyphCache_Free(gcinfo);
-        if (!isLCD) {
+        if (!lcdCache) {
             MTLTR_InitGlyphCache(mtlc, JNI_FALSE);
             gcinfo = glyphCacheAA;
         } else {
             MTLTR_InitGlyphCache(mtlc, JNI_TRUE);
             gcinfo = glyphCacheLCD;
@@ -287,11 +285,11 @@
         // store glyph image in texture cell
         MTLRegion region = {
                 {ccinfo->x,  ccinfo->y,   0},
                 {w, h, 1}
         };
-        if (!isLCD) {
+        if (!lcdCache) {
             // Opengl uses GL_INTENSITY as internal pixel format to set number of
             // color components in the texture for grayscale texture.
             // It is mentioned that for GL_INTENSITY format,
             // the GL assembles it into an RGBA element by replicating the
             // intensity value three times for red, green, blue, and alpha.
@@ -551,11 +549,11 @@
         glyphMode = MODE_USE_CACHE_GRAY;
     }
 
     if (ginfo->cellInfo == NULL) {
         // attempt to add glyph to accelerated glyph cache
-        MTLTR_AddToGlyphCache(ginfo, mtlc, MTLPixelFormatA8Unorm);
+        MTLTR_AddToGlyphCache(ginfo, mtlc, JNI_FALSE);
 
         if (ginfo->cellInfo == NULL) {
             // we'll just no-op in the rare case that the cell is NULL
             return JNI_TRUE;
         }
@@ -647,11 +645,11 @@
     }
 
     if (ginfo->cellInfo == NULL) {
         // attempt to add glyph to accelerated glyph cache
         // TODO : Handle RGB order
-        MTLTR_AddToGlyphCache(ginfo, mtlc, MTLPixelFormatRGBA8Unorm);
+        MTLTR_AddToGlyphCache(ginfo, mtlc, JNI_TRUE);
 
         if (ginfo->cellInfo == NULL) {
             // we'll just no-op in the rare case that the cell is NULL
             return JNI_TRUE;
         }
