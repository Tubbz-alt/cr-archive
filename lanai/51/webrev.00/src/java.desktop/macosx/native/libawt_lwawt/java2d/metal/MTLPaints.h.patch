diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.h
@@ -25,15 +25,15 @@
 
 #ifndef MTLPaints_h_Included
 #define MTLPaints_h_Included
 
 #import <Metal/Metal.h>
-
-#include "MTLSurfaceDataBase.h"
+#include "RenderOptions.h"
 
 #define sun_java2d_SunGraphics2D_PAINT_UNDEFINED -1
 
+@class MTLContext;
 @class MTLComposite;
 @class MTLClip;
 @class MTLPipelineStatesStorage;
 
 /**
@@ -92,25 +92,17 @@
                yp3:(jdouble)yp3;
 
 // For the current paint mode and passed composite (and flags):
 // 1. Selects vertex+fragment shader (and corresponding pipelineDesc) and set pipelineState
 // 2. Prepares corresponding buffers of vertex and fragment shaders
-- (void)setPipelineState:(id<MTLRenderCommandEncoder>)encoder
-               composite:(MTLComposite *)composite
-           isStencilUsed:(jboolean)isStencilUsed
-               isTexture:(jboolean)isTexture
-           interpolation:(int)interpolation
-                srcFlags:(const SurfaceRasterFlags *)srcFlags
-                dstFlags:(const SurfaceRasterFlags *)dstFlags
+- (void)setPipelineState:(id <MTLRenderCommandEncoder>)encoder
+                 context:(MTLContext *)mtlc
+           renderOptions:(const RenderOptions *)renderOptions
     pipelineStateStorage:(MTLPipelineStatesStorage *)pipelineStateStorage;
 
-- (void)setXorModePipelineState:(id<MTLRenderCommandEncoder>)encoder
-               composite:(MTLComposite *)composite
-           isStencilUsed:(jboolean)isStencilUsed
-               isTexture:(jboolean)isTexture
-           interpolation:(int)interpolation
-                srcFlags:(const SurfaceRasterFlags *)srcFlags
-                dstFlags:(const SurfaceRasterFlags *)dstFlags
-    pipelineStateStorage:(MTLPipelineStatesStorage *)pipelineStateStorage;
+- (void)setXorModePipelineState:(id <MTLRenderCommandEncoder>)encoder
+                        context:(MTLContext *)mtlc
+                  renderOptions:(const RenderOptions *)renderOptions
+           pipelineStateStorage:(MTLPipelineStatesStorage *)pipelineStateStorage;
 @end
 
 #endif /* MTLPaints_h_Included */
