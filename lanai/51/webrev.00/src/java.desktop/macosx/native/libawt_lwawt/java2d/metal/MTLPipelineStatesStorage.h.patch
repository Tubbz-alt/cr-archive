diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.h
@@ -1,10 +1,10 @@
 #ifndef MTLPipelineStatesStorage_h_Included
 #define MTLPipelineStatesStorage_h_Included
 
 #import "MTLUtils.h"
-#include "MTLSurfaceDataBase.h"
+#include "RenderOptions.h"
 
 @class MTLComposite;
 
 /**
  * The MTLPipelineStatesStorage class used to obtain MTLRenderPipelineState
@@ -24,56 +24,21 @@
 @property (readwrite, retain) NSMutableDictionary<NSString*, id<MTLFunction>> * shaders;
 @property (readwrite, retain) NSMutableDictionary<NSString*, NSMutableDictionary *> * states;
 
 - (id) initWithDevice:(id<MTLDevice>)device shaderLibPath:(NSString *)shadersLib;
 
-// returns pipelineState with disabled blending and stencil
 - (id<MTLRenderPipelineState>) getPipelineState:(MTLRenderPipelineDescriptor *) pipelineDescriptor
                                  vertexShaderId:(NSString *)vertexShaderId
                                fragmentShaderId:(NSString *)fragmentShaderId;
 
-// returns pipelineState with composite for default SurfaceRasterFlags
 - (id<MTLRenderPipelineState>) getPipelineState:(MTLRenderPipelineDescriptor *) pipelineDescriptor
                                  vertexShaderId:(NSString *)vertexShaderId
                                fragmentShaderId:(NSString *)fragmentShaderId
-                                  compositeRule:(jint)compositeRule
-                                  stencilNeeded:(bool)stencilNeeded;
-
-// base method to obtain MTLRenderPipelineState
-- (id<MTLRenderPipelineState>) getPipelineState:(MTLRenderPipelineDescriptor *) pipelineDescriptor
-                                 vertexShaderId:(NSString *)vertexShaderId
-                               fragmentShaderId:(NSString *)fragmentShaderId
-                                  compositeRule:(jint)compositeRule
-                                       srcFlags:(const SurfaceRasterFlags * )srcFlags
-                                       dstFlags:(const SurfaceRasterFlags * )dstFlags
-                                  stencilNeeded:(bool)stencilNeeded;
-
-- (id<MTLRenderPipelineState>) getPipelineState:(MTLRenderPipelineDescriptor *) pipelineDescriptor
-                                 vertexShaderId:(NSString *)vertexShaderId
-                               fragmentShaderId:(NSString *)fragmentShaderId
-                                  compositeRule:(jint)compositeRule
-                                           isAA:(jboolean)isAA
-                                       srcFlags:(const SurfaceRasterFlags *)srcFlags
-                                       dstFlags:(const SurfaceRasterFlags *)dstFlags
-                                  stencilNeeded:(bool)stencilNeeded;
-
-- (id<MTLRenderPipelineState>) getPipelineState:(MTLRenderPipelineDescriptor *) pipelineDescriptor
-                                 vertexShaderId:(NSString *)vertexShaderId
-                               fragmentShaderId:(NSString *)fragmentShaderId
-                                  compositeRule:(jint)compositeRule
                                       composite:(MTLComposite*)composite
-                                           isAA:(jboolean)isAA
-                                       srcFlags:(const SurfaceRasterFlags *)srcFlags
-                                       dstFlags:(const SurfaceRasterFlags *)dstFlags
+                                  renderOptions:(const RenderOptions *)renderOptions
                                   stencilNeeded:(bool)stencilNeeded;
 
-- (id<MTLRenderPipelineState>) getXorModePipelineState:(MTLRenderPipelineDescriptor *) pipelineDescriptor
-                                 vertexShaderId:(NSString *)vertexShaderId
-                               fragmentShaderId:(NSString *)fragmentShaderId
-                                       srcFlags:(const SurfaceRasterFlags * )srcFlags
-                                       dstFlags:(const SurfaceRasterFlags * )dstFlags
-                                  stencilNeeded:(bool)stencilNeeded;
 - (id<MTLFunction>) getShader:(NSString *)name;
 @end
 
 
 #endif // MTLPipelineStatesStorage_h_Included
