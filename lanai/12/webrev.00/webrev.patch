diff a/src/demo/share/java2d/RenderPerfTest/src/renderperf/RenderPerfTest.java b/src/demo/share/java2d/RenderPerfTest/src/renderperf/RenderPerfTest.java
--- a/src/demo/share/java2d/RenderPerfTest/src/renderperf/RenderPerfTest.java
+++ b/src/demo/share/java2d/RenderPerfTest/src/renderperf/RenderPerfTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -235,10 +235,30 @@
         void setPaint(Graphics2D g2d, int id) {
             g2d.setColor(colors[id % colors.length]);
         }
     }
 
+    static class LargeTextParticleRenderer extends TextParticleRenderer {
+
+        LargeTextParticleRenderer(int n, float r) {
+            super(n, r);
+        }
+
+        @Override
+        public void render(Graphics2D g2d, int id, float[] x, float[] y, float[] vx, float[] vy) {
+            setPaint(g2d, id);
+            Font font = new Font("LucidaGrande", Font.PLAIN, 32);
+            g2d.setFont(font);
+            g2d.drawString("The quick brown fox jumps over the lazy dog",
+                    (int)(x[id] - r), (int)(y[id] - r));
+            g2d.drawString("The quick brown fox jumps over the lazy dog",
+                    (int)(x[id] - r), (int)y[id]);
+            g2d.drawString("The quick brown fox jumps over the lazy dog",
+                    (int)(x[id] - r), (int)(y[id] + r));
+        }
+    }
+
     static class FlatOvalRotParticleRenderer extends FlatParticleRenderer {
 
 
         FlatOvalRotParticleRenderer(int n, float r) {
             super(n, r);
@@ -566,10 +586,11 @@
     private static final ParticleRenderer segRenderer = new SegParticleRenderer(N, R);
     private static final ParticleRenderer flatQuadRenderer = new FlatQuadParticleRenderer(N, R);
     private static final ParticleRenderer wiredQuadRenderer = new WiredQuadParticleRenderer(N, R);
     private static final ParticleRenderer imgRenderer = new ImgParticleRenderer(N, R);
     private static final ParticleRenderer textRenderer = new TextParticleRenderer(N, R);
+    private static final ParticleRenderer largeTextRenderer = new LargeTextParticleRenderer(N, R);
     private static final ParticleRenderer whiteTextRenderer = new WhiteTextParticleRenderer(R);
 
     private static final Configurable AA = (Graphics2D g2d) ->
         g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
             RenderingHints.VALUE_ANTIALIAS_ON);
@@ -680,10 +701,21 @@
 
     public void testTextBubblesGray() throws Exception {
         (new PerfMeter("TextGray")).exec(createPR(textRenderer).configure(TextAA)).report();
     }
 
+    public void testLargeTextBubblesNoAA() throws Exception {
+        (new PerfMeter("LargeTextNoAA")).exec(createPR(largeTextRenderer)).report();
+    }
+
+    public void testLargeTextBubblesLCD() throws Exception {
+        (new PerfMeter("LargeTextLCD")).exec(createPR(largeTextRenderer).configure(TextLCD)).report();
+    }
+
+    public void testLargeTextBubblesGray() throws Exception {
+        (new PerfMeter("LargeTextGray")).exec(createPR(largeTextRenderer).configure(TextAA)).report();
+    }
     public void testWhiteTextBubblesNoAA() throws Exception {
         (new PerfMeter("WhiteTextNoAA")).exec(createPR(whiteTextRenderer)).report();
     }
 
     public void testWhiteTextBubblesLCD() throws Exception {
