diff a/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal b/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
--- a/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
+++ b/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
@@ -57,10 +57,24 @@
 struct GradShaderInOut {
     float4 position [[position]];
     float2 texCoords;
 };
 
+
+struct ColShaderInOut_XOR {
+    float4 position [[position]];
+    float2 orig_pos;
+    half4  color;
+};
+
+struct TxtShaderInOut_XOR {
+    float4 position [[position]];
+    float2 orig_pos;
+    float2 texCoords;
+    float2 tpCoords;
+};
+
 vertex ColShaderInOut vert_col(VertexInput in [[stage_in]],
        constant FrameUniforms& uniforms [[buffer(FrameUniformBuffer)]],
        constant TransformMatrix& transform [[buffer(MatrixBuffer)]]) {
     ColShaderInOut out;
     float4 pos4 = float4(in.position, 0.0, 1.0);
@@ -360,31 +374,11 @@
 
     // This implementation defaults alpha to 1.0 as if source is opaque
     //TODO : implement alpha component value if source is transparent
 }
 
-fragment half4 frag_tp_xorMode(
-        TxtShaderInOut vert [[stage_in]],
-        texture2d<float, access::sample> renderTexture [[texture(0)]],
-        constant int& xorColor[[buffer(0)]])
-{
-    constexpr sampler textureSampler (address::repeat,
-                                      mag_filter::nearest,
-                                      min_filter::nearest);
 
-    float4 pixelColor = renderTexture.sample(textureSampler, vert.texCoords);
-
-    pixelColor.r = float( (unsigned char)(pixelColor.r * 255.0) ^ ((xorColor >> 16) & 0xFF) ) / 255.0f;
-    pixelColor.g = float( (unsigned char)(pixelColor.g * 255.0) ^ ((xorColor >> 8) & 0xFF)) / 255.0f;
-    pixelColor.b = float( (unsigned char)(pixelColor.b * 255.0) ^ (xorColor & 0xFF)) / 255.0f;
-    pixelColor.a = 1.0;
-
-    return half4(pixelColor.r, pixelColor.g, pixelColor.b, 1.0);
-
-    // This implementation defaults alpha to 1.0 as if source is opaque
-    //TODO : implement alpha component value if source is transparent
-}
 
 /* The variables involved in the equation can be expressed as follows:
  *
  *   Cs = Color component of the source (foreground color) [0.0, 1.0]
  *   Cd = Color component of the destination (background color) [0.0, 1.0]
@@ -438,6 +432,145 @@
     device uchar4 *outputBuffer [[buffer(1)]],
     uint gid [[thread_position_in_grid]])
 {
     uchar p = imageBuffer[gid];
     outputBuffer[gid] = uchar4(p, p, p, p);
-}
+}
+
+// ----------------------------------------------------------------------------
+// Shaders for rendering in XOR Mode
+// ----------------------------------------------------------------------------
+vertex ColShaderInOut_XOR vert_col_xorMode(VertexInput in [[stage_in]],
+       constant FrameUniforms& uniforms [[buffer(FrameUniformBuffer)]],
+       constant TransformMatrix& transform [[buffer(MatrixBuffer)]])
+{
+    ColShaderInOut_XOR out;
+    float4 pos4 = float4(in.position, 0.0, 1.0);
+    out.position = transform.transformMatrix*pos4;
+    out.orig_pos = in.position;
+    out.color = half4(uniforms.color.r, uniforms.color.g, uniforms.color.b, uniforms.color.a);
+    return out;
+}
+
+fragment half4 frag_col_xorMode(ColShaderInOut_XOR in [[stage_in]],
+        texture2d<float, access::read> renderTexture [[texture(0)]])
+{
+    uint2 texCoord = {(unsigned int)(in.orig_pos.x), (unsigned int)(in.orig_pos.y)};
+
+    float4 pixelColor = renderTexture.read(texCoord);
+    half4 color = in.color;
+
+    half4 c;
+    c.r = float( (unsigned char)(pixelColor.r * 255.0) ^ (unsigned char)(color.r * 255.0)) / 255.0f;
+    c.g = float( (unsigned char)(pixelColor.g * 255.0) ^ (unsigned char)(color.g * 255.0)) / 255.0f;
+    c.b = float( (unsigned char)(pixelColor.b * 255.0) ^ (unsigned char)(color.b * 255.0)) / 255.0f;
+    c.a = 1.0;
+
+    return c;
+}
+
+
+vertex TxtShaderInOut_XOR vert_txt_xorMode(
+        TxtVertexInput in [[stage_in]],
+        constant TransformMatrix& transform [[buffer(MatrixBuffer)]])
+{
+    TxtShaderInOut_XOR out;
+    float4 pos4 = float4(in.position, 0.0, 1.0);
+    out.position = transform.transformMatrix*pos4;
+    out.orig_pos = in.position;
+    out.texCoords = in.texCoords;
+    return out;
+}
+
+fragment half4 frag_txt_xorMode(
+        TxtShaderInOut_XOR vert [[stage_in]],
+        texture2d<float, access::sample> renderTexture [[texture(0)]],
+        texture2d<float, access::read> backgroundTexture [[texture(1)]],
+        constant TxtFrameUniforms& uniforms [[buffer(1)]],
+        sampler textureSampler [[sampler(0)]])
+{
+    uint2 texCoord = {(unsigned int)(vert.orig_pos.x), (unsigned int)(vert.orig_pos.y)};
+    float4 bgColor = backgroundTexture.read(texCoord);
+
+    float4 pixelColor = renderTexture.sample(textureSampler, vert.texCoords);
+    float srcA = uniforms.isSrcOpaque ? 1 : pixelColor.a;
+
+    float4 c;
+    if (uniforms.mode) {
+        c = mix(pixelColor, uniforms.color, srcA);
+    } else {
+        c = float4(pixelColor.r,
+                 pixelColor.g,
+                 pixelColor.b, srcA*uniforms.extraAlpha);
+    }
+
+    half4 ret;
+    ret.r = half( (unsigned char)(c.r * 255.0) ^ (unsigned char)(bgColor.r * 255.0)) / 255.0f;
+    ret.g = half( (unsigned char)(c.g * 255.0) ^ (unsigned char)(bgColor.g * 255.0)) / 255.0f;
+    ret.b = half( (unsigned char)(c.b * 255.0) ^ (unsigned char)(bgColor.b * 255.0)) / 255.0f;
+    ret.a = c.a;
+
+    return ret;
+}
+
+
+/*
+    // --------------------------------------------------------------------------------------
+    Currently, gradient paint and texture paint XOR mode rendering has been implemented
+    through tile based rendering (similar to OGL) that uses MTLBlitLoops_SurfaceToSwBlit method for
+    getting framebuffer tiles and render using a different render pipe (not MTLRenderer)
+
+    In metal, we can avoid tile based rendering and use below shaders.
+    NOTE: These two shaders are incomplete and need some tweak.
+    // --------------------------------------------------------------------------------------
+
+fragment half4 frag_grad_xorMode(GradShaderInOut_XOR in [[stage_in]],
+                         texture2d<float, access::read> renderTexture [[texture(0)]],
+                         constant GradFrameUniforms& uniforms [[buffer(0)]]) {
+    uint2 texCoord = {(unsigned int)(in.orig_pos.x), (unsigned int)(in.orig_pos.y)};
+    float4 pixelColor = renderTexture.read(texCoord);
+
+    float3 v = float3(in.position.x, in.position.y, 1);
+    float  a = (dot(v,uniforms.params)-0.25)*2.0;
+    float4 c = mix(uniforms.color1, uniforms.color2, a);
+
+    half4 ret;
+    ret.r = float( (unsigned char)(pixelColor.r * 255.0) ^ (unsigned char)(c.r * 255.0)) / 255.0f;
+    ret.g = float( (unsigned char)(pixelColor.g * 255.0) ^ (unsigned char)(c.g * 255.0)) / 255.0f;
+    ret.b = float( (unsigned char)(pixelColor.b * 255.0) ^ (unsigned char)(c.b * 255.0)) / 255.0f;
+
+    return half4(ret);
+}
+
+
+fragment half4 frag_tp_xorMode(
+        TxtShaderInOut vert [[stage_in]],
+        texture2d<float, access::sample> renderTexture [[texture(0)]],
+        texture2d<float, access::read> backgroundTexture [[texture(1)]],
+        constant int& xorColor[[buffer(0)]])
+{
+    uint2 texCoord = {(unsigned int)(vert.orig_pos.x), (unsigned int)(vert.orig_pos.y)};
+    float4 bgColor = backgroundTexture.read(texCoord);
+
+    constexpr sampler textureSampler (address::repeat,
+                                      mag_filter::nearest,
+                                      min_filter::nearest);
+
+    float4 pixelColor = renderTexture.sample(textureSampler, vert.texCoords);
+
+    pixelColor.r = float( (unsigned char)(pixelColor.r * 255.0) ^ ((xorColor >> 16) & 0xFF) ) / 255.0f;
+    pixelColor.g = float( (unsigned char)(pixelColor.g * 255.0) ^ ((xorColor >> 8) & 0xFF)) / 255.0f;
+    pixelColor.b = float( (unsigned char)(pixelColor.b * 255.0) ^ (xorColor & 0xFF)) / 255.0f;
+    pixelColor.a = 1.0;
+
+    half4 ret;
+    ret.r = half( (unsigned char)(pixelColor.r * 255.0) ^ (unsigned char)(bgColor.r * 255.0)) / 255.0f;
+    ret.g = half( (unsigned char)(pixelColor.g * 255.0) ^ (unsigned char)(bgColor.g * 255.0)) / 255.0f;
+    ret.b = half( (unsigned char)(pixelColor.b * 255.0) ^ (unsigned char)(bgColor.b * 255.0)) / 255.0f;
+    ret.a = 1.0;
+
+    return ret;
+
+    // This implementation defaults alpha to 1.0 as if source is opaque
+    //TODO : implement alpha component value if source is transparent
+}
+*/
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.h
@@ -161,10 +161,11 @@
  * before enabling logic op mode.  The XOR pixel value will be applied
  * later in the MTLContext_SetColor() method.
  */
 - (void)setXorComposite:(jint)xorPixel;
 - (jboolean)isBlendingDisabled:(jboolean) isSrcOpaque;
+- (jboolean)useXORComposite;
 
 /**
  * Resets the OpenGL transform state back to the identity matrix.
  */
 - (void)resetTransform;
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m
@@ -273,10 +273,13 @@
 
 - (jboolean)isBlendingDisabled:(jboolean) isSrcOpaque {
     return [_composite isBlendingDisabled:isSrcOpaque];
 }
 
+- (jboolean) useXORComposite {
+    return ([_composite getCompositeState] == sun_java2d_SunGraphics2D_COMP_XOR);
+}
 
 - (void)resetTransform {
     J2dTraceLn(J2D_TRACE_INFO, "MTLContext_ResetTransform");
     [_transform resetTransform];
 }
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
@@ -33,10 +33,11 @@
 
 #include "sun_java2d_SunGraphics2D.h"
 #include "sun_java2d_pipe_BufferedPaints.h"
 #import "MTLComposite.h"
 #import "MTLBufImgOps.h"
+#include "MTLRenderQueue.h"
 
 #define RGBA_TO_V4(c)              \
 {                                  \
     (((c) >> 16) & (0xFF))/255.0f, \
     (((c) >> 8) & 0xFF)/255.0f,    \
@@ -456,10 +457,11 @@
             vertShader = @"vert_tp";
             fragShader = @"frag_tp";
 
             [encoder setVertexBytes:&_anchor length:sizeof(_anchor) atIndex:FrameUniformBuffer];
             [encoder setFragmentTexture:_paintTexture atIndex:0];
+
         }
     }
 
     id <MTLRenderPipelineState> pipelineState = [pipelineStateStorage getPipelineState:rpDesc
                                                                         vertexShaderId:vertShader
@@ -481,50 +483,73 @@
 {
     initTemplatePipelineDescriptors();
 
     jint xorColor = (jint) [mtlc.composite getXorColor];
 
-    NSString * vertShader = @"vert_txt";
-    NSString * fragShader = @"frag_txt";
+    NSString * vertShader = @"vert_txt_xorMode";
+    NSString * fragShader = @"frag_txt_xorMode";
     MTLRenderPipelineDescriptor * rpDesc = templateTexturePipelineDesc;
 
     if (renderOptions->isTexture) {
         const int col = _paintState == sun_java2d_SunGraphics2D_PAINT_ALPHACOLOR ? _color ^ xorColor : 0 ^ xorColor;
-        setTxtUniforms(encoder, col, _paintState == sun_java2d_SunGraphics2D_PAINT_ALPHACOLOR ? 1 : 0, renderOptions->interpolation, NO, [mtlc.composite getExtraAlpha], &renderOptions->srcFlags, &renderOptions->dstFlags);
+        setTxtUniforms(encoder, col, _paintState == sun_java2d_SunGraphics2D_PAINT_ALPHACOLOR ? 1 : 0,
+                       renderOptions->interpolation, NO, [mtlc.composite getExtraAlpha],
+                       &renderOptions->srcFlags, &renderOptions->dstFlags);
         [encoder setFragmentBytes:&xorColor length:sizeof(xorColor) atIndex: 0];
+
+        BMTLSDOps *dstOps = MTLRenderQueue_GetCurrentDestination();
+        [encoder setFragmentTexture:dstOps->pTexture atIndex:1];
+
+        J2dTraceLn(J2D_TRACE_INFO, "MTLPaints - setXorModePipelineState -- TEXTURE DRAW");
     } else {
         if (_paintState == sun_java2d_SunGraphics2D_PAINT_ALPHACOLOR) {
-            vertShader = @"vert_col";
-            fragShader = @"frag_col";
+            vertShader = @"vert_col_xorMode";
+            fragShader = @"frag_col_xorMode";
             rpDesc = templateRenderPipelineDesc;
 
             // Calculate _color ^ xorColor for RGB components
             // This color gets XORed with destination framebuffer pixel color
             struct FrameUniforms uf = {RGBA_TO_V4(_color ^ xorColor)};
             [encoder setVertexBytes:&uf length:sizeof(uf) atIndex:FrameUniformBuffer];
 
+            BMTLSDOps *dstOps = MTLRenderQueue_GetCurrentDestination();
+            [encoder setFragmentTexture:dstOps->pTexture atIndex:0];
+
+            J2dTraceLn(J2D_TRACE_INFO ,"MTLPaints - setXorModePipelineState -- PAINT_ALPHACOLOR");
         } else if (_paintState == sun_java2d_SunGraphics2D_PAINT_GRADIENT) {
-            vertShader = @"vert_grad";
-            fragShader = @"frag_grad";
+            // This block is not reached in current implementation.
+            // Gradient paint XOR mode rendering uses a tile based rendering using a SW pipe (similar to OGL)
+            vertShader = @"vert_grad_xorMode";
+            fragShader = @"frag_grad_xorMode";
             rpDesc = templateRenderPipelineDesc;
 
-                struct GradFrameUniforms uf = {
+            struct GradFrameUniforms uf = {
                         {_p0, _p1, _p3},
                         RGBA_TO_V4(_pixel1 ^ xorColor),
                         RGBA_TO_V4(_pixel2 ^ xorColor)};
-                [encoder setFragmentBytes: &uf length:sizeof(uf) atIndex:0];
-            } else if (_paintState == sun_java2d_SunGraphics2D_PAINT_TEXTURE) {
-            vertShader = @"vert_tp";
+
+            [encoder setFragmentBytes: &uf length:sizeof(uf) atIndex:0];
+            BMTLSDOps *dstOps = MTLRenderQueue_GetCurrentDestination();
+            [encoder setFragmentTexture:dstOps->pTexture atIndex:0];
+
+            J2dTraceLn(J2D_TRACE_INFO, "MTLPaints - setXorModePipelineState -- PAINT_GRADIENT");
+        } else if (_paintState == sun_java2d_SunGraphics2D_PAINT_TEXTURE) {
+            // This block is not reached in current implementation.
+            // Texture paint XOR mode rendering uses a tile based rendering using a SW pipe (similar to OGL)
+            vertShader = @"vert_tp_xorMode";
             fragShader = @"frag_tp_xorMode";
             rpDesc = templateRenderPipelineDesc;
 
+            [encoder setVertexBytes:&_anchor length:sizeof(_anchor) atIndex:FrameUniformBuffer];
+            [encoder setFragmentTexture:_paintTexture atIndex: 0];
+            BMTLSDOps *dstOps = MTLRenderQueue_GetCurrentDestination();
+            [encoder setFragmentTexture:dstOps->pTexture atIndex:1];
+            [encoder setFragmentBytes:&xorColor length:sizeof(xorColor) atIndex: 0];
 
-                [encoder setVertexBytes:&_anchor length:sizeof(_anchor) atIndex:FrameUniformBuffer];
-                [encoder setFragmentTexture:_paintTexture atIndex: 0];
-                [encoder setFragmentBytes:&xorColor length:sizeof(xorColor) atIndex: 0];
-            }
+            J2dTraceLn(J2D_TRACE_INFO, "MTLPaints - setXorModePipelineState -- PAINT_TEXTURE");
         }
+    }
 
     id <MTLRenderPipelineState> pipelineState = [pipelineStateStorage getPipelineState:rpDesc
                                                                         vertexShaderId:vertShader
                                                                       fragmentShaderId:fragShader
                                                                              composite:mtlc.composite
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
@@ -128,16 +128,24 @@
             MTLRenderPipelineDescriptor *pipelineDesc = [[pipelineDescriptor copy] autorelease];
             pipelineDesc.vertexFunction = vertexShader;
             pipelineDesc.fragmentFunction = fragmentShader;
 
             if (useXorComposite) {
+                /* The below configuration is the best performant implementation of XOR mode rendering.
+                   It was found that it works ONLY for basic Colors and not for all RGB combinations.
+                   Hence, a slow performant XOR mode rendering has been implemented by
+                   disabling blending & committing after each draw call.
+                   In XOR mode rendering, subsequent draw calls are rendered
+                   by shader using already rendered framebuffer pixel value XORed
+                   with current draw color and XOR color.
                 pipelineDesc.colorAttachments[0].blendingEnabled = YES;
- 
                 pipelineDesc.colorAttachments[0].rgbBlendOperation = MTLBlendOperationAdd;
                 pipelineDesc.colorAttachments[0].sourceRGBBlendFactor = MTLBlendFactorOneMinusDestinationColor;
                 pipelineDesc.colorAttachments[0].destinationRGBBlendFactor =  MTLBlendFactorOneMinusSourceColor;
+                */
 
+                pipelineDesc.colorAttachments[0].blendingEnabled = NO;
             } else if (useComposite ||
                        (composite != nil  &&
                         FLT_LT([composite getExtraAlpha], 1.0f)))
             {
                 setBlendingFactors(
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h
@@ -87,9 +87,10 @@
 #define RETURN_IF_NULL(value)   ACT_IF_NULL(return, value)
 #define CONTINUE_IF_NULL(value) ACT_IF_NULL(continue, value)
 
 MTLContext *MTLRenderQueue_GetCurrentContext();
 BMTLSDOps *MTLRenderQueue_GetCurrentDestination();
+void commitEncodedCommands();
 
 extern jint mtlPreviousOp;
 
 #endif /* MTLRenderQueue_h_Included */
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
@@ -45,10 +45,11 @@
  */
 static MTLContext *mtlc = NULL;
 static BMTLSDOps *dstOps = NULL;
 jint mtlPreviousOp = MTL_OP_INIT;
 
+
 /**
  * The following methods are implemented in the windowing system (i.e. GLX
  * and WGL) source files.
  */
 extern void MTLGC_DestroyMTLGraphicsConfig(jlong pConfigInfo);
@@ -381,31 +382,46 @@
 
         // draw ops
         case sun_java2d_pipe_BufferedOpCodes_DRAW_LINE:
             {
                 CHECK_PREVIOUS_OP(MTL_OP_OTHER);
-                J2dTraceLn(J2D_TRACE_VERBOSE, "sun_java2d_pipe_BufferedOpCodes_DRAW_LINE");
+
+                if ([mtlc useXORComposite]) {
+                    commitEncodedCommands();
+                    J2dTraceLn(J2D_TRACE_VERBOSE, "DRAW_LINE in XOR mode - Force commit earlier draw calls before DRAW_LINE.");
+                }
                 jint x1 = NEXT_INT(b);
                 jint y1 = NEXT_INT(b);
                 jint x2 = NEXT_INT(b);
                 jint y2 = NEXT_INT(b);
                 MTLRenderer_DrawLine(mtlc, dstOps, x1, y1, x2, y2);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DRAW_RECT:
             {
                 CHECK_PREVIOUS_OP(MTL_OP_OTHER);
+
+                if ([mtlc useXORComposite]) {
+                    commitEncodedCommands();
+                    J2dTraceLn(J2D_TRACE_VERBOSE, "DRAW_RECT in XOR mode - Force commit earlier draw calls before DRAW_RECT.");
+                }
                 jint x = NEXT_INT(b);
                 jint y = NEXT_INT(b);
                 jint w = NEXT_INT(b);
                 jint h = NEXT_INT(b);
                 MTLRenderer_DrawRect(mtlc, dstOps, x, y, w, h);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DRAW_POLY:
             {
                 CHECK_PREVIOUS_OP(MTL_OP_OTHER);
+
+                if ([mtlc useXORComposite]) {
+                    commitEncodedCommands();
+                    J2dTraceLn(J2D_TRACE_VERBOSE, "DRAW_POLY in XOR mode - Force commit earlier draw calls before DRAW_POLY.");
+                }
+
                 jint nPoints      = NEXT_INT(b);
                 jboolean isClosed = NEXT_BOOLEAN(b);
                 jint transX       = NEXT_INT(b);
                 jint transY       = NEXT_INT(b);
                 jint *xPoints = (jint *)b;
@@ -415,28 +431,46 @@
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DRAW_PIXEL:
             {
                 CHECK_PREVIOUS_OP(MTL_OP_OTHER);
+
+                if ([mtlc useXORComposite]) {
+                    commitEncodedCommands();
+                    J2dTraceLn(J2D_TRACE_VERBOSE, "DRAW_PIXEL in XOR mode - Force commit earlier draw calls before DRAW_PIXEL.");
+                }
+
                 jint x = NEXT_INT(b);
                 jint y = NEXT_INT(b);
                 CONTINUE_IF_NULL(mtlc);
                 MTLRenderer_DrawPixel(mtlc, dstOps, x, y);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DRAW_SCANLINES:
             {
                 CHECK_PREVIOUS_OP(MTL_OP_OTHER);
+
+                if ([mtlc useXORComposite]) {
+                    commitEncodedCommands();
+                    J2dTraceLn(J2D_TRACE_VERBOSE, "DRAW_SCANLINES in XOR mode - Force commit earlier draw calls before DRAW_SCANLINES.");
+                }
+
                 jint count = NEXT_INT(b);
                 MTLRenderer_DrawScanlines(mtlc, dstOps, count, (jint *)b);
 
                 SKIP_BYTES(b, count * BYTES_PER_SCANLINE);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DRAW_PARALLELOGRAM:
             {
                 CHECK_PREVIOUS_OP(MTL_OP_OTHER);
+
+                if ([mtlc useXORComposite]) {
+                    commitEncodedCommands();
+                    J2dTraceLn(J2D_TRACE_VERBOSE, "DRAW_PARALLELOGRAM in XOR mode - Force commit earlier draw calls before DRAW_PARALLELOGRAM.");
+                }
+
                 jfloat x11 = NEXT_FLOAT(b);
                 jfloat y11 = NEXT_FLOAT(b);
                 jfloat dx21 = NEXT_FLOAT(b);
                 jfloat dy21 = NEXT_FLOAT(b);
                 jfloat dx12 = NEXT_FLOAT(b);
@@ -473,28 +507,46 @@
 
         // fill ops
         case sun_java2d_pipe_BufferedOpCodes_FILL_RECT:
             {
                 CHECK_PREVIOUS_OP(MTL_OP_OTHER);
+
+                if ([mtlc useXORComposite]) {
+                    commitEncodedCommands();
+                    J2dTraceLn(J2D_TRACE_VERBOSE, "FILL_RECT in XOR mode - Force commit earlier draw calls before FILL_RECT.");
+                }
+
                 jint x = NEXT_INT(b);
                 jint y = NEXT_INT(b);
                 jint w = NEXT_INT(b);
                 jint h = NEXT_INT(b);
                 MTLRenderer_FillRect(mtlc, dstOps, x, y, w, h);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_FILL_SPANS:
             {
                 CHECK_PREVIOUS_OP(MTL_OP_OTHER);
+
+                if ([mtlc useXORComposite]) {
+                    commitEncodedCommands();
+                    J2dTraceLn(J2D_TRACE_VERBOSE, "FILL_SPANS in XOR mode - Force commit earlier draw calls before FILL_SPANS.");
+                }
+
                 jint count = NEXT_INT(b);
                 MTLRenderer_FillSpans(mtlc, dstOps, count, (jint *)b);
                 SKIP_BYTES(b, count * BYTES_PER_SPAN);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_FILL_PARALLELOGRAM:
             {
                 CHECK_PREVIOUS_OP(MTL_OP_OTHER);
+
+                if ([mtlc useXORComposite]) {
+                    commitEncodedCommands();
+                    J2dTraceLn(J2D_TRACE_VERBOSE, "FILL_PARALLELOGRAM in XOR mode - Force commit earlier draw calls before FILL_PARALLELOGRAM.");
+                }
+
                 jfloat x11 = NEXT_FLOAT(b);
                 jfloat y11 = NEXT_FLOAT(b);
                 jfloat dx21 = NEXT_FLOAT(b);
                 jfloat dy21 = NEXT_FLOAT(b);
                 jfloat dx12 = NEXT_FLOAT(b);
@@ -523,10 +575,16 @@
 
         // text-related ops
         case sun_java2d_pipe_BufferedOpCodes_DRAW_GLYPH_LIST:
             {
                 CHECK_PREVIOUS_OP(MTL_OP_OTHER);
+
+                if ([mtlc useXORComposite]) {
+                    commitEncodedCommands();
+                    J2dTraceLn(J2D_TRACE_VERBOSE, "DRAW_GLYPH_LIST in XOR mode - Force commit earlier draw calls before DRAW_GLYPH_LIST.");
+                }
+
                 jint numGlyphs        = NEXT_INT(b);
                 jint packedParams     = NEXT_INT(b);
                 jfloat glyphListOrigX = NEXT_FLOAT(b);
                 jfloat glyphListOrigY = NEXT_FLOAT(b);
                 jboolean usePositions = EXTRACT_BOOLEAN(packedParams,
@@ -707,10 +765,17 @@
                 [mtlc setXorComposite:xorPixel];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_RESET_COMPOSITE:
             {
+                /* TODO: check whether something needs to be done here if we are moving out of XOR composite
+                commitEncodedCommands();
+                MTLCommandBufferWrapper * cbwrapper = [mtlc pullCommandBufferWrapper];
+                [cbwrapper onComplete];
+
+                J2dTraceLn(J2D_TRACE_VERBOSE, "RESET_COMPOSITE - Force commit earlier draw calls before RESET_COMPOSITE.");*/
+
                 CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 [mtlc resetComposite];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_TRANSFORM:
@@ -1068,6 +1133,22 @@
 MTLRenderQueue_GetCurrentDestination()
 {
     return dstOps;
 }
 
+/**
+ * commit earlier encoded commmands
+ * these would be rendered to the back-buffer - which is read in shader while rendering in XOR mode
+ */
+void commitEncodedCommands() {
+    [mtlc.encoderManager endEncoder];
+
+    MTLCommandBufferWrapper *cbwrapper = [mtlc pullCommandBufferWrapper];
+    id <MTLCommandBuffer> commandbuf = [cbwrapper getCommandBuffer];
+    [commandbuf addCompletedHandler:^(id <MTLCommandBuffer> commandbuf) {
+        [cbwrapper release];
+    }];
+    [commandbuf commit];
+    [commandbuf waitUntilCompleted];
+}
+
 #endif /* !HEADLESS */
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderer.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderer.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderer.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderer.m
@@ -68,11 +68,11 @@
     if (mtlc == NULL || dstOps == NULL || dstOps->pTexture == NULL) {
         J2dTraceLn(J2D_TRACE_ERROR, "MTLRenderer_DrawLine: dest is null");
         return;
     }
 
-    J2dTraceLn5(J2D_TRACE_INFO, "MTLRenderer_DrawLine (x1=%1.2f y1=%1.2f x2=%1.2f y2=%1.2f), dst tex=%p", x1, y1, x2, y2, dstOps->pTexture);
+    J2dTraceLn5(J2D_TRACE_INFO, "MTLRenderer_DrawLine (x1=%d y1=%d x2=%d y2=%d), dst tex=%p", x1, y1, x2, y2, dstOps->pTexture);
 
     id<MTLRenderCommandEncoder> mtlEncoder = [mtlc.encoderManager getRenderEncoder:dstOps];
     if (mtlEncoder == nil)
         return;
 
@@ -233,22 +233,26 @@
     const jint firstY = prevY;
     while (nPoints > 0) {
         const bool isLastChunk = nPoints <= POLYLINE_BUF_SIZE;
         __block int chunkSize = isLastChunk ? nPoints : POLYLINE_BUF_SIZE;
 
-        fillVertex(pointsChunk.verts, prevX + transX, prevY + transY);
+        fillVertex(pointsChunk.verts, prevX + transX + 0.5f, prevY + transY + 0.5f);
+        J2dTraceLn2(J2D_TRACE_INFO, "MTLRenderer_DrawPoly: Point - (%1.2f, %1.2f)", prevX + transX + 0.5f, prevY + transY + 0.5f);
 
         for (int i = 1; i < chunkSize; i++) {
             prevX = *(xPoints++);
             prevY = *(yPoints++);
-            fillVertex(pointsChunk.verts + i, prevX + transX, prevY + transY);
+            fillVertex(pointsChunk.verts + i, prevX + transX + 0.5f, prevY + transY + 0.5f);
+            J2dTraceLn2(J2D_TRACE_INFO, "MTLRenderer_DrawPoly: Point - (%1.2f, %1.2f)", prevX + transX + 0.5f,prevY + transY + 0.5f);
         }
 
         bool drawCloseSegment = false;
         if (isClosed && isLastChunk) {
             if (chunkSize + 2 <= POLYLINE_BUF_SIZE) {
-                fillVertex(pointsChunk.verts + chunkSize, firstX + transX, firstY + transY);
+                fillVertex(pointsChunk.verts + chunkSize, firstX + transX + 0.5f, firstY + transY + 0.5f);
+                J2dTraceLn2(J2D_TRACE_INFO, "MTLRenderer_DrawPoly: Point - (%1.2f, %1.2f)",firstX + transX + 0.5f, firstY + transY + 0.5f);
+
                 ++chunkSize;
             } else
                 drawCloseSegment = true;
         }
 
@@ -260,14 +264,17 @@
         [mtlEncoder setVertexBytes:pointsChunk.verts length:sizeof(pointsChunk.verts) atIndex:MeshVertexBuffer];
         [mtlEncoder drawPrimitives:MTLPrimitiveTypeLineStrip vertexStart:0 vertexCount:chunkSize];
 
         if (drawCloseSegment) {
             struct Vertex vertices[2] = {
-                    {{prevX + transX, prevY + transY}},
-                    {{firstX + transX, firstY + transY}},
+                    {{prevX + transX + 0.5f, prevY + transY + 0.5f}},
+                    {{firstX + transX + 0.5f, firstY + transY + 0.5f}}
             };
 
+            J2dTraceLn2(J2D_TRACE_INFO, "MTLRenderer_DrawPoly: last segment Point1 - (%1.2f, %1.2f)",prevX + transX + 0.5f, prevY + transY + 0.5f);
+            J2dTraceLn2(J2D_TRACE_INFO, "MTLRenderer_DrawPoly: last segment Point2 - (%1.2f, %1.2f)",firstX + transX + 0.5f, firstY + transY + 0.5f);
+
             [mtlEncoder setVertexBytes:vertices length:sizeof(vertices) atIndex:MeshVertexBuffer];
             [mtlEncoder drawPrimitives:MTLPrimitiveTypeLine vertexStart:0 vertexCount:2];
         }
     }
 }
