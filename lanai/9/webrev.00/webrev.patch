diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/EncoderManager.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/EncoderManager.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/EncoderManager.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/EncoderManager.m
@@ -14,11 +14,10 @@
 
 - (id)init;
 - (void)dealloc;
 
 - (void)reset:(id<MTLTexture>)destination
-                aaDest:(id<MTLTexture>)aaDestination
            isDstOpaque:(jboolean)isDstOpaque
     isDstPremultiplied:(jboolean)isDstPremultiplied
                   isAA:(jboolean)isAA;
 
 - (void)updateEncoder:(id<MTLRenderCommandEncoder>)encoder
@@ -37,11 +36,10 @@
     MTLPipelineStatesStorage * _pipelineStateStorage;
     id<MTLDevice> _device;
 
     // Persistent encoder properties
     id<MTLTexture> _destination;
-    id<MTLTexture> _aaDestination;
     SurfaceRasterFlags _dstFlags;
 
     //
     // Cached 'mutable' states of encoder
     //
@@ -67,11 +65,10 @@
 
 - (id)init {
     self = [super init];
     if (self) {
         _destination = nil;
-        _aaDestination = nil;
         _composite = [[MTLComposite alloc] init];
         _paint = [[MTLPaint alloc] init];
         _transform = [[MTLTransform alloc] init];
         _clip = [[MTLClip alloc] init];
     }
@@ -89,17 +86,14 @@
     self->_pipelineStateStorage = mtlc.pipelineStateStorage;
     self->_device = mtlc.device;
 }
 
 - (void)reset:(id<MTLTexture>)destination
-                aaDest:(id<MTLTexture>)aaDestination
            isDstOpaque:(jboolean)isDstOpaque
     isDstPremultiplied:(jboolean)isDstPremultiplied
-                  isAA:(jboolean)isAA
-{
+                  isAA:(jboolean)isAA {
     _destination = destination;
-    _aaDestination = aaDestination;
     _dstFlags.isOpaque = isDstOpaque;
     _dstFlags.isPremultiplied = isDstPremultiplied;
     _isAA = isAA;
     // NOTE: probably it's better to invalidate/reset all cached states now
 }
@@ -202,21 +196,14 @@
 
     if (!forceUpdate && [_clip isEqual:clip])
         return;
 
     [_clip copyFrom:clip];
-    if (_aaDestination != nil) {
-      [_clip setScissorOrStencil:encoder
-                       destWidth:_aaDestination.width
-                      destHeight:_aaDestination.height
-                          device:_device];
-    } else {
-      [_clip setScissorOrStencil:encoder
-                       destWidth:_destination.width
-                      destHeight:_destination.height
-                          device:_device];
-    }
+    [_clip setScissorOrStencil:encoder
+                     destWidth:_destination.width
+                    destHeight:_destination.height
+                        device:_device];
 }
 
 - (void)updateTransform:(id <MTLRenderCommandEncoder>)encoder
               transform:(MTLTransform *)transform
             forceUpdate:(jboolean)forceUpdate
@@ -224,20 +211,13 @@
     if (!forceUpdate
         && [_transform isEqual:transform])
         return;
 
     [_transform copyFrom:transform];
-    if (_aaDestination != nil) {
-      [_transform setVertexMatrix:encoder
-                        destWidth:_aaDestination.width
-                       destHeight:_aaDestination.height];
-    } else {
-      [_transform setVertexMatrix:encoder
+    [_transform setVertexMatrix:encoder
                         destWidth:_destination.width
                        destHeight:_destination.height];
-
-    }
 }
 
 @end
 
 @implementation EncoderManager {
@@ -415,11 +395,10 @@
     // tex=%p", dest);
     _encoder = [[cbw getCommandBuffer] renderCommandEncoderWithDescriptor:rpd];
     [rpd release];
 
     [_encoderStates reset:dest
-               aaDest:_aaDestination
                isDstOpaque:isOpaque
         isDstPremultiplied:YES
                       isAA:isAA];
   }
 
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.h
@@ -40,10 +40,23 @@
 #define NEXT_FLOAT(buf)     NEXT_VAL(buf, jfloat)
 #define NEXT_BOOLEAN(buf)   (jboolean)NEXT_INT(buf)
 #define NEXT_LONG(buf)      NEXT_VAL(buf, jlong)
 #define NEXT_DOUBLE(buf)    NEXT_VAL(buf, jdouble)
 
+// Operations for CheckPreviousOp
+enum {
+  MTL_OP_INIT,
+  MTL_OP_AA,
+  MTL_OP_OTHER
+};
+
+/*
+ * These macros now simply delegate to the CheckPreviousOp() method.
+ */
+#define CHECK_PREVIOUS_OP(op) MTLRenderQueue_CheckPreviousOp(op)
+#define RESET_PREVIOUS_OP() CHECK_PREVIOUS_OP(MTL_OP_INIT)
+
 /*
  * Increments a pointer (buf) by the given number of bytes.
  */
 #define SKIP_BYTES(buf, numbytes) buf += (numbytes)
 
@@ -72,6 +85,8 @@
 #define CONTINUE_IF_NULL(value) ACT_IF_NULL(continue, value)
 
 MTLContext *MTLRenderQueue_GetCurrentContext();
 BMTLSDOps *MTLRenderQueue_GetCurrentDestination();
 
+extern jint mtlPreviousOp;
+
 #endif /* MTLRenderQueue_h_Included */
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLRenderQueue.m
@@ -43,10 +43,11 @@
 /**
  * References to the "current" context and destination surface.
  */
 static MTLContext *mtlc = NULL;
 static BMTLSDOps *dstOps = NULL;
+jint mtlPreviousOp = MTL_OP_INIT;
 
 /**
  * The following methods are implemented in the windowing system (i.e. GLX
  * and WGL) source files.
  */
@@ -304,10 +305,31 @@
             break;
         }
     return opName;
 }
 
+void MTLRenderQueue_CheckPreviousOp(jint op) {
+
+    if (mtlPreviousOp == op) {
+        // The op is the same as last time, so we can return immediately.
+        return;
+    }
+
+    J2dTraceLn1(J2D_TRACE_VERBOSE,
+                "MTLRenderQueue_CheckPreviousOp: new op=%d", op);
+
+    if (mtlPreviousOp == MTL_OP_INIT) {
+        mtlPreviousOp = op;
+        return;
+    }
+
+    if (mtlc != NULL) {
+        [mtlc.encoderManager endEncoder];
+    }
+    mtlPreviousOp = op;
+}
+
 JNIEXPORT void JNICALL
 Java_sun_java2d_metal_MTLRenderQueue_flushBuffer
     (JNIEnv *env, jobject mtlrq,
      jlong buf, jint limit)
 {
@@ -343,29 +365,32 @@
         switch (opcode) {
 
         // draw ops
         case sun_java2d_pipe_BufferedOpCodes_DRAW_LINE:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 J2dTraceLn(J2D_TRACE_VERBOSE, "sun_java2d_pipe_BufferedOpCodes_DRAW_LINE");
                 jint x1 = NEXT_INT(b);
                 jint y1 = NEXT_INT(b);
                 jint x2 = NEXT_INT(b);
                 jint y2 = NEXT_INT(b);
                 MTLRenderer_DrawLine(mtlc, dstOps, x1, y1, x2, y2);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DRAW_RECT:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint x = NEXT_INT(b);
                 jint y = NEXT_INT(b);
                 jint w = NEXT_INT(b);
                 jint h = NEXT_INT(b);
                 MTLRenderer_DrawRect(mtlc, dstOps, x, y, w, h);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DRAW_POLY:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint nPoints      = NEXT_INT(b);
                 jboolean isClosed = NEXT_BOOLEAN(b);
                 jint transX       = NEXT_INT(b);
                 jint transY       = NEXT_INT(b);
                 jint *xPoints = (jint *)b;
@@ -374,27 +399,30 @@
                 SKIP_BYTES(b, nPoints * BYTES_PER_POLY_POINT);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DRAW_PIXEL:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint x = NEXT_INT(b);
                 jint y = NEXT_INT(b);
                 CONTINUE_IF_NULL(mtlc);
                 //TODO
                 J2dTraceLn(J2D_TRACE_ERROR, "MTLRenderQueue_DRAW_PIXEL -- :TODO");
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DRAW_SCANLINES:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint count = NEXT_INT(b);
                 MTLRenderer_DrawScanlines(mtlc, dstOps, count, (jint *)b);
 
                 SKIP_BYTES(b, count * BYTES_PER_SCANLINE);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DRAW_PARALLELOGRAM:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jfloat x11 = NEXT_FLOAT(b);
                 jfloat y11 = NEXT_FLOAT(b);
                 jfloat dx21 = NEXT_FLOAT(b);
                 jfloat dy21 = NEXT_FLOAT(b);
                 jfloat dx12 = NEXT_FLOAT(b);
@@ -409,10 +437,11 @@
                                               lwr21, lwr12);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DRAW_AAPARALLELOGRAM:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jfloat x11 = NEXT_FLOAT(b);
                 jfloat y11 = NEXT_FLOAT(b);
                 jfloat dx21 = NEXT_FLOAT(b);
                 jfloat dy21 = NEXT_FLOAT(b);
                 jfloat dx12 = NEXT_FLOAT(b);
@@ -429,26 +458,29 @@
             break;
 
         // fill ops
         case sun_java2d_pipe_BufferedOpCodes_FILL_RECT:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint x = NEXT_INT(b);
                 jint y = NEXT_INT(b);
                 jint w = NEXT_INT(b);
                 jint h = NEXT_INT(b);
                 MTLRenderer_FillRect(mtlc, dstOps, x, y, w, h);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_FILL_SPANS:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint count = NEXT_INT(b);
                 MTLRenderer_FillSpans(mtlc, dstOps, count, (jint *)b);
                 SKIP_BYTES(b, count * BYTES_PER_SPAN);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_FILL_PARALLELOGRAM:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jfloat x11 = NEXT_FLOAT(b);
                 jfloat y11 = NEXT_FLOAT(b);
                 jfloat dx21 = NEXT_FLOAT(b);
                 jfloat dy21 = NEXT_FLOAT(b);
                 jfloat dx12 = NEXT_FLOAT(b);
@@ -459,10 +491,11 @@
                                               dx12, dy12);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_FILL_AAPARALLELOGRAM:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_AA);
                 jfloat x11 = NEXT_FLOAT(b);
                 jfloat y11 = NEXT_FLOAT(b);
                 jfloat dx21 = NEXT_FLOAT(b);
                 jfloat dy21 = NEXT_FLOAT(b);
                 jfloat dx12 = NEXT_FLOAT(b);
@@ -475,10 +508,11 @@
             break;
 
         // text-related ops
         case sun_java2d_pipe_BufferedOpCodes_DRAW_GLYPH_LIST:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint numGlyphs        = NEXT_INT(b);
                 jint packedParams     = NEXT_INT(b);
                 jfloat glyphListOrigX = NEXT_FLOAT(b);
                 jfloat glyphListOrigY = NEXT_FLOAT(b);
                 jboolean usePositions = EXTRACT_BOOLEAN(packedParams,
@@ -509,10 +543,11 @@
             break;
 
         // copy-related ops
         case sun_java2d_pipe_BufferedOpCodes_COPY_AREA:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint x  = NEXT_INT(b);
                 jint y  = NEXT_INT(b);
                 jint w  = NEXT_INT(b);
                 jint h  = NEXT_INT(b);
                 jint dx = NEXT_INT(b);
@@ -521,10 +556,11 @@
                                       x, y, w, h, dx, dy);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_BLIT:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint packedParams = NEXT_INT(b);
                 jint sx1          = NEXT_INT(b);
                 jint sy1          = NEXT_INT(b);
                 jint sx2          = NEXT_INT(b);
                 jint sy2          = NEXT_INT(b);
@@ -555,11 +591,11 @@
                 }
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SURFACE_TO_SW_BLIT:
             {
-
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint sx      = NEXT_INT(b);
                 jint sy      = NEXT_INT(b);
                 jint dx      = NEXT_INT(b);
                 jint dy      = NEXT_INT(b);
                 jint w       = NEXT_INT(b);
@@ -572,11 +608,11 @@
                                              sx, sy, dx, dy, w, h);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_MASK_FILL:
             {
-
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint x        = NEXT_INT(b);
                 jint y        = NEXT_INT(b);
                 jint w        = NEXT_INT(b);
                 jint h        = NEXT_INT(b);
                 jint maskoff  = NEXT_INT(b);
@@ -588,11 +624,11 @@
                 SKIP_BYTES(b, masklen);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_MASK_BLIT:
             {
-
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint dstx     = NEXT_INT(b);
                 jint dsty     = NEXT_INT(b);
                 jint width    = NEXT_INT(b);
                 jint height   = NEXT_INT(b);
                 jint masklen  = width * height * sizeof(jint);
@@ -603,62 +639,71 @@
             break;
 
         // state-related ops
         case sun_java2d_pipe_BufferedOpCodes_SET_RECT_CLIP:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint x1 = NEXT_INT(b);
                 jint y1 = NEXT_INT(b);
                 jint x2 = NEXT_INT(b);
                 jint y2 = NEXT_INT(b);
                 [mtlc setClipRectX1:x1 Y1:y1 X2:x2 Y2:y2];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_BEGIN_SHAPE_CLIP:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 [mtlc beginShapeClip:dstOps];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_SHAPE_CLIP_SPANS:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 // This results in creation of new render encoder with
                 // stencil buffer set as render target
                 jint count = NEXT_INT(b);
                 MTLRenderer_FillSpans(mtlc, dstOps, count, (jint *)b);
                 SKIP_BYTES(b, count * BYTES_PER_SPAN);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_END_SHAPE_CLIP:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 [mtlc endShapeClip:dstOps];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_RESET_CLIP:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 [mtlc resetClip];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_ALPHA_COMPOSITE:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint rule         = NEXT_INT(b);
                 jfloat extraAlpha = NEXT_FLOAT(b);
                 jint flags        = NEXT_INT(b);
                 [mtlc setAlphaCompositeRule:rule extraAlpha:extraAlpha flags:flags];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_XOR_COMPOSITE:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint xorPixel = NEXT_INT(b);
                 [mtlc setXorComposite:xorPixel];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_RESET_COMPOSITE:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 [mtlc resetComposite];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_TRANSFORM:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jdouble m00 = NEXT_DOUBLE(b);
                 jdouble m10 = NEXT_DOUBLE(b);
                 jdouble m01 = NEXT_DOUBLE(b);
                 jdouble m11 = NEXT_DOUBLE(b);
                 jdouble m02 = NEXT_DOUBLE(b);
@@ -666,27 +711,29 @@
                 [mtlc setTransformM00:m00 M10:m10 M01:m01 M11:m11 M02:m02 M12:m12];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_RESET_TRANSFORM:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 [mtlc resetTransform];
             }
             break;
 
         // context-related ops
         case sun_java2d_pipe_BufferedOpCodes_SET_SURFACES:
             {
-
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jlong pSrc = NEXT_LONG(b);
                 jlong pDst = NEXT_LONG(b);
 
                 dstOps = (BMTLSDOps *)jlong_to_ptr(pDst);
                 mtlc = [MTLContext setSurfacesEnv:env src:pSrc dst:pDst];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_SCRATCH_SURFACE:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jlong pConfigInfo = NEXT_LONG(b);
                 MTLGraphicsConfigInfo *mtlInfo =
                         (MTLGraphicsConfigInfo *)jlong_to_ptr(pConfigInfo);
 
                 if (mtlInfo == NULL) {
@@ -702,20 +749,22 @@
                 }
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_FLUSH_SURFACE:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jlong pData = NEXT_LONG(b);
                 BMTLSDOps *mtlsdo = (BMTLSDOps *)jlong_to_ptr(pData);
                 if (mtlsdo != NULL) {
                     CONTINUE_IF_NULL(mtlc);
                     MTLSD_Delete(env, mtlsdo);
                 }
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DISPOSE_SURFACE:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jlong pData = NEXT_LONG(b);
                 BMTLSDOps *mtlsdo = (BMTLSDOps *)jlong_to_ptr(pData);
                 if (mtlsdo != NULL) {
                     CONTINUE_IF_NULL(mtlc);
                     MTLSD_Delete(env, mtlsdo);
@@ -725,10 +774,11 @@
                 }
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DISPOSE_CONFIG:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jlong pConfigInfo = NEXT_LONG(b);
                 CONTINUE_IF_NULL(mtlc);
                 MTLGC_DestroyMTLGraphicsConfig(pConfigInfo);
 
                 // the previous method will call glX/wglMakeCurrent(None),
@@ -738,18 +788,20 @@
              //   dstOps = NULL;
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_INVALIDATE_CONTEXT:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 // invalidate the references to the current context and
                 // destination surface that are maintained at the native level
                 mtlc = NULL;
             //    dstOps = NULL;
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SYNC:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 sync = JNI_TRUE;
 
                 // TODO
                 J2dTraceLn(J2D_TRACE_ERROR, "MTLRenderQueue_SYNC -- :TODO");
 
@@ -757,10 +809,11 @@
             break;
 
         // multibuffering ops
         case sun_java2d_pipe_BufferedOpCodes_SWAP_BUFFERS:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jlong window = NEXT_LONG(b);
                 MTLSD_SwapBuffers(env, window);
             }
             break;
 
@@ -769,21 +822,24 @@
             break;
 
         // paint-related ops
         case sun_java2d_pipe_BufferedOpCodes_RESET_PAINT:
             {
-                [mtlc resetPaint];
+              CHECK_PREVIOUS_OP(MTL_OP_OTHER);
+              [mtlc resetPaint];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_COLOR:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jint pixel = NEXT_INT(b);
                 [mtlc setColorPaint:pixel];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_GRADIENT_PAINT:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jboolean useMask= NEXT_BOOLEAN(b);
                 jboolean cyclic = NEXT_BOOLEAN(b);
                 jdouble p0      = NEXT_DOUBLE(b);
                 jdouble p1      = NEXT_DOUBLE(b);
                 jdouble p3      = NEXT_DOUBLE(b);
@@ -798,10 +854,11 @@
                                     pixel2:pixel2];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_LINEAR_GRADIENT_PAINT:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jboolean useMask = NEXT_BOOLEAN(b);
                 jboolean linear  = NEXT_BOOLEAN(b);
                 jint cycleMethod = NEXT_INT(b);
                 jint numStops    = NEXT_INT(b);
                 jfloat p0        = NEXT_FLOAT(b);
@@ -821,10 +878,11 @@
                                       pixels:pixels];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_RADIAL_GRADIENT_PAINT:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jboolean useMask = NEXT_BOOLEAN(b);
                 jboolean linear  = NEXT_BOOLEAN(b);
                 jint numStops    = NEXT_INT(b);
                 jint cycleMethod = NEXT_INT(b);
                 jfloat m00       = NEXT_FLOAT(b);
@@ -852,10 +910,11 @@
                                       pixels:pixels];
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_SET_TEXTURE_PAINT:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jboolean useMask= NEXT_BOOLEAN(b);
                 jboolean filter = NEXT_BOOLEAN(b);
                 jlong pSrc      = NEXT_LONG(b);
                 jdouble xp0     = NEXT_DOUBLE(b);
                 jdouble xp1     = NEXT_DOUBLE(b);
@@ -876,10 +935,11 @@
             break;
 
         // BufferedImageOp-related ops
         case sun_java2d_pipe_BufferedOpCodes_ENABLE_CONVOLVE_OP:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jlong pSrc        = NEXT_LONG(b);
                 jboolean edgeZero = NEXT_BOOLEAN(b);
                 jint kernelWidth  = NEXT_INT(b);
                 jint kernelHeight = NEXT_INT(b);
                 MTLBufImgOps_EnableConvolveOp(mtlc, pSrc, edgeZero,
@@ -887,15 +947,17 @@
                 SKIP_BYTES(b, kernelWidth * kernelHeight * sizeof(jfloat));
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DISABLE_CONVOLVE_OP:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 MTLBufImgOps_DisableConvolveOp(mtlc);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_ENABLE_RESCALE_OP:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jlong pSrc          = NEXT_LONG(b);
                 jboolean nonPremult = NEXT_BOOLEAN(b);
                 jint numFactors     = 4;
                 unsigned char *scaleFactors = b;
                 unsigned char *offsets = (b + numFactors * sizeof(jfloat));
@@ -904,15 +966,17 @@
                 SKIP_BYTES(b, numFactors * sizeof(jfloat) * 2);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DISABLE_RESCALE_OP:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 MTLBufImgOps_DisableRescaleOp(mtlc);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_ENABLE_LOOKUP_OP:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 jlong pSrc          = NEXT_LONG(b);
                 jboolean nonPremult = NEXT_BOOLEAN(b);
                 jboolean shortData  = NEXT_BOOLEAN(b);
                 jint numBands       = NEXT_INT(b);
                 jint bandLength     = NEXT_INT(b);
@@ -925,10 +989,11 @@
                 SKIP_BYTES(b, numBands * bandLength * bytesPerElem);
             }
             break;
         case sun_java2d_pipe_BufferedOpCodes_DISABLE_LOOKUP_OP:
             {
+                CHECK_PREVIOUS_OP(MTL_OP_OTHER);
                 MTLBufImgOps_DisableLookupOp(mtlc);
             }
             break;
 
         default:
@@ -936,10 +1001,11 @@
                 "MTLRenderQueue_flushBuffer: invalid opcode=%d", opcode);
             return;
         }
     }
 
+    CHECK_PREVIOUS_OP(MTL_OP_INIT);
     if (mtlc != NULL) {
         [mtlc.encoderManager endEncoder];
         MTLCommandBufferWrapper * cbwrapper = [mtlc pullCommandBufferWrapper];
         id<MTLCommandBuffer> commandbuf = [cbwrapper getCommandBuffer];
         [commandbuf addCompletedHandler:^(id <MTLCommandBuffer> commandbuf) {
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTransform.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTransform.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTransform.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTransform.h
@@ -13,9 +13,11 @@
 - (void)setTransformM00:(jdouble) m00 M10:(jdouble) m10
                     M01:(jdouble) m01 M11:(jdouble) m11
                     M02:(jdouble) m02 M12:(jdouble) m12;
 - (void)resetTransform;
 
-- (void)setVertexMatrix:(id<MTLRenderCommandEncoder>)encoder destWidth:(jint)dw destHeight:(jint)dh;
+- (void)setVertexMatrix:(id<MTLRenderCommandEncoder>)encoder
+              destWidth:(NSUInteger)dw
+             destHeight:(NSUInteger)dh;
 @end
 
 #endif // MTLTransform_h_Included
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTransform.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTransform.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTransform.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLTransform.m
@@ -54,11 +54,13 @@
 
 - (void)resetTransform {
     _useTransform = JNI_FALSE;
 }
 
-- (void)setVertexMatrix:(id <MTLRenderCommandEncoder>)encoder destWidth:(jint)dw destHeight:(jint)dh {
+- (void)setVertexMatrix:(id<MTLRenderCommandEncoder>)encoder
+              destWidth:(NSUInteger)dw
+             destHeight:(NSUInteger)dh {
     // update matrix for vertex shader
     _normalize4x4.columns[0][0] = 2/(double)dw;
     _normalize4x4.columns[1][1] = -2/(double)dh;
 
     if (_useTransform) {
