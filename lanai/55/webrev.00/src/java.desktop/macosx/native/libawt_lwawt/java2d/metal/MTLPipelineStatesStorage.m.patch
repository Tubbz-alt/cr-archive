diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPipelineStatesStorage.m
@@ -31,10 +31,11 @@
         NSLog(@"Failed to load library. error %@", error);
         exit(0);
     }
     self.shaders = [NSMutableDictionary dictionaryWithCapacity:10];
     self.states = [NSMutableDictionary dictionaryWithCapacity:10];
+    computeStates = [[NSMutableDictionary dictionaryWithCapacity:10] retain] ;
     return self;
 }
 
 - (NSPointerArray * ) getSubStates:(NSString *)vertexShaderId fragmentShader:(NSString *)fragmentShaderId {
     NSMutableDictionary * vSubStates = states[vertexShaderId];
@@ -172,18 +173,40 @@
     }
 
     return result;
 }
 
+- (id<MTLComputePipelineState>) getComputePipelineState:(NSString *)computeShaderId {
+    id<MTLComputePipelineState> result = computeStates[computeShaderId];
+    if (result == nil) {
+        id <MTLFunction> computeShader = [self getShader:computeShaderId];
+        @autoreleasepool {
+            NSError *error = nil;
+            result = (id <MTLComputePipelineState>) [[self.device newComputePipelineStateWithFunction:computeShader error:&error] autorelease];
+            if (result == nil) {
+                NSLog(@"Failed to create pipeline state, error %@", error);
+                exit(0);
+            }
+            computeStates[computeShaderId] = result;
+        }
+    }
+    return result;
+}
+
 - (id<MTLFunction>) getShader:(NSString *)name {
     id<MTLFunction> result = [self.shaders valueForKey:name];
     if (result == nil) {
         result = [[self.library newFunctionWithName:name] autorelease];
         [self.shaders setValue:result forKey:name];
     }
     return result;
 }
+
+- (void) dealloc {
+    [super dealloc];
+    [computeStates release];
+}
 @end
 
 static void setBlendingFactors(
         MTLRenderPipelineColorAttachmentDescriptor * cad,
         MTLComposite* composite,
