diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLGraphicsConfig.h b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLGraphicsConfig.h
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLGraphicsConfig.h
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLGraphicsConfig.h
@@ -75,6 +75,12 @@
     jint                screen;
     NSOpenGLPixelFormat *pixfmt;
     MTLContext          *context;
 } MTLGraphicsConfigInfo;
 
+// From "Metal Feature Set Tables"
+// There are 2 GPU families for mac - MTLGPUFamilyMac1 and MTLGPUFamilyMac2
+// Both of them support "Maximum 2D texture width and height" of 16384 pixels
+// Note : there is no API to get this value, hence hardcoding by reading from the table
+#define MaxTextureSize 16384
+
 #endif /* MTLGraphicsConfig_h_Included */
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLGraphicsConfig.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLGraphicsConfig.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLGraphicsConfig.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLGraphicsConfig.m
@@ -216,13 +216,7 @@
 Java_sun_java2d_metal_MTLGraphicsConfig_nativeGetMaxTextureSize
     (JNIEnv *env, jclass mtlgc)
 {
     J2dTraceLn(J2D_TRACE_INFO, "MTLGraphicsConfig_nativeGetMaxTextureSize");
 
-    // From "Metal Feature Set Tables"
-    // There are 2 GPU families for mac - MTLGPUFamilyMac1 and MTLGPUFamilyMac2
-    // Both of them support "Maximum 2D texture width and height" of 16384 pixels
-    // Note : there is no API to get this value, hence hardcoding by reading from the table
-    __block int max = 16384;
-
-    return (jint)max;
+    return (jint)MaxTextureSize;
 }
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceData.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceData.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceData.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceData.m
@@ -66,10 +66,13 @@
             return JNI_FALSE;
         }
 
         MTLContext* ctx = mtlsdo->configInfo->context;
 
+        if (width > MaxTextureSize) {
+            width = MaxTextureSize;
+        }
         MTLTextureDescriptor *textureDescriptor = [MTLTextureDescriptor texture2DDescriptorWithPixelFormat: MTLPixelFormatBGRA8Unorm width: width height: height mipmapped: NO];
         textureDescriptor.usage = MTLTextureUsageUnknown;
         bmtlsdo->pTexture = [ctx.device newTextureWithDescriptor: textureDescriptor];
 
         MTLTextureDescriptor *stencilDataDescriptor =
