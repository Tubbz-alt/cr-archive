diff a/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal b/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
--- a/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
+++ b/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
@@ -54,10 +54,11 @@
     float2 tpCoords;
 };
 
 struct GradShaderInOut {
     float4 position [[position]];
+    float2 texCoords;
 };
 
 vertex ColShaderInOut vert_col(VertexInput in [[stage_in]],
        constant FrameUniforms& uniforms [[buffer(FrameUniformBuffer)]],
        constant TransformMatrix& transform [[buffer(MatrixBuffer)]]) {
@@ -109,10 +110,19 @@
     out.texCoords = in.texCoords;
 
     return out;
 }
 
+vertex GradShaderInOut vert_txt_grad(TxtVertexInput in [[stage_in]],
+                                     constant TransformMatrix& transform [[buffer(MatrixBuffer)]]) {
+    GradShaderInOut out;
+    float4 pos4 = float4(in.position, 0.0, 1.0);
+    out.position = transform.transformMatrix*pos4;
+    out.texCoords = in.texCoords;
+    return out;
+}
+
 fragment half4 frag_col(ColShaderInOut in [[stage_in]]) {
     return in.color;
 }
 
 fragment unsigned int frag_stencil(StencilShaderInOut in [[stage_in]]) {
@@ -151,10 +161,28 @@
                  paintColor.g*renderColor.a,
                  paintColor.b*renderColor.a,
                  renderColor.a);
 }
 
+fragment half4 frag_txt_grad(GradShaderInOut in [[stage_in]],
+                         constant GradFrameUniforms& uniforms [[buffer(0)]],
+                         texture2d<float, access::sample> renderTexture [[texture(0)]])
+{
+    constexpr sampler textureSampler (address::repeat, mag_filter::nearest,
+                                      min_filter::nearest);
+
+    float4 renderColor = renderTexture.sample(textureSampler, in.texCoords);
+
+    float3 v = float3(in.position.x, in.position.y, 1);
+    float  a = (dot(v,uniforms.params)-0.25)*2.0;
+    float4 c = mix(uniforms.color1, uniforms.color2, a);
+    return half4(c.r*renderColor.a,
+                 c.g*renderColor.a,
+                 c.b*renderColor.a,
+                 renderColor.a);
+}
+
 fragment half4 aa_frag_txt(
         TxtShaderInOut vert [[stage_in]],
         texture2d<float, access::sample> renderTexture [[texture(0)]],
         constant TxtFrameUniforms& uniforms [[buffer(1)]]
 )
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
@@ -316,10 +316,25 @@
         struct TxtFrameUniforms uf = {RGBA_TO_V4(0), 0, srcFlags->isOpaque,
                                       dstFlags->isOpaque};
         [encoder setFragmentBytes:&uf length:sizeof(uf)
                           atIndex:FrameUniformBuffer];
 
+      } else if (_paintState == sun_java2d_SunGraphics2D_PAINT_GRADIENT) {
+        pipelineState = [pipelineStateStorage getPipelineState:templateTexturePipelineDesc
+                                                vertexShaderId:@"vert_txt_grad"
+                                              fragmentShaderId:@"frag_txt_grad"
+                                                 compositeRule:[composite getRule]
+                                                          isAA:JNI_FALSE
+                                                      srcFlags:srcFlags
+                                                      dstFlags:dstFlags
+                                                 stencilNeeded:stencil];
+        struct GradFrameUniforms uf = {
+            {_p0, _p1, _p3},
+            RGBA_TO_V4(_pixel1),
+            RGBA_TO_V4(_pixel2)};
+        [encoder setFragmentBytes: &uf length:sizeof(uf) atIndex:0];
+
       } else {
         if (isAA) {
           pipelineState = [pipelineStateStorage
               getPipelineState:templateAATexturePipelineDesc
                 vertexShaderId:@"vert_txt"
