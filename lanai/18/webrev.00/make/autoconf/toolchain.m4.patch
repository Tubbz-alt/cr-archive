diff a/make/autoconf/toolchain.m4 b/make/autoconf/toolchain.m4
--- a/make/autoconf/toolchain.m4
+++ b/make/autoconf/toolchain.m4
@@ -30,10 +30,11 @@
 #
 # The binaries used is determined by the toolchain type, which is the family of
 # compilers and related tools that are used.
 ########################################################################
 
+m4_include([toolchain_windows.m4])
 
 # All valid toolchains, regardless of platform (used by help.m4)
 VALID_TOOLCHAINS_all="gcc clang solstudio xlc microsoft"
 
 # These toolchains are valid on different platforms
@@ -90,11 +91,11 @@
 # Arguments:
 #   VERSION:   The version string to check against the found version
 #   IF_AT_LEAST:   block to run if the compiler is at least this version (>=)
 #   IF_OLDER_THAN:   block to run if the compiler is older than this version (<)
 #   PREFIX:   Optional variable prefix for compiler to compare version for (OPENJDK_BUILD_)
-BASIC_DEFUN_NAMED([TOOLCHAIN_CHECK_COMPILER_VERSION],
+UTIL_DEFUN_NAMED([TOOLCHAIN_CHECK_COMPILER_VERSION],
     [*VERSION PREFIX IF_AT_LEAST IF_OLDER_THAN], [$@],
 [
   # Need to assign to a variable since m4 is blocked from modifying parts in [].
   REFERENCE_VERSION=ARG_VERSION
 
@@ -141,11 +142,11 @@
 # Arguments:
 #   VERSION:   The version string to check against the found version
 #   IF_AT_LEAST:   block to run if the compiler is at least this version (>=)
 #   IF_OLDER_THAN:   block to run if the compiler is older than this version (<)
 #   PREFIX:   Optional variable prefix for compiler to compare version for (OPENJDK_BUILD_)
-BASIC_DEFUN_NAMED([TOOLCHAIN_CHECK_LINKER_VERSION],
+UTIL_DEFUN_NAMED([TOOLCHAIN_CHECK_LINKER_VERSION],
     [*VERSION PREFIX IF_AT_LEAST IF_OLDER_THAN], [$@],
 [
   # Need to assign to a variable since m4 is blocked from modifying parts in [].
   REFERENCE_VERSION=ARG_VERSION
 
@@ -347,12 +348,12 @@
       && test "x$TOOLCHAIN_TYPE" = "xmicrosoft"; then
     TOOLCHAIN_SETUP_VISUAL_STUDIO_ENV
     if test "x$OPENJDK_BUILD_OS_ENV" = "xwindows.wsl"; then
       # Append VS_PATH. In WSL, VS_PATH will not contain the WSL env path needed
       # for using basic Unix tools, so need to keep the original PATH.
-      BASIC_APPEND_TO_PATH(PATH, $VS_PATH)
-      BASIC_APPEND_TO_PATH(WSLENV, "PATH/l:LIB:INCLUDE")
+      UTIL_APPEND_TO_PATH(PATH, $VS_PATH)
+      UTIL_APPEND_TO_PATH(WSLENV, "PATH/l:LIB:INCLUDE")
       export WSLENV
     else
       # Reset path to VS_PATH. It will include everything that was on PATH at the time we
       # ran TOOLCHAIN_SETUP_VISUAL_STUDIO_ENV.
       PATH="$VS_PATH"
@@ -578,16 +579,16 @@
       AC_MSG_ERROR([Could not find a $COMPILER_NAME compiler. $HELP_MSG])
     fi
   fi
 
   # Now we have a compiler binary in $1. Make sure it's okay.
-  BASIC_FIXUP_EXECUTABLE($1)
+  UTIL_FIXUP_EXECUTABLE($1)
   TEST_COMPILER="[$]$1"
 
   AC_MSG_CHECKING([resolved symbolic links for $1])
   SYMLINK_ORIGINAL="$TEST_COMPILER"
-  BASIC_REMOVE_SYMBOLIC_LINKS(SYMLINK_ORIGINAL)
+  UTIL_REMOVE_SYMBOLIC_LINKS(SYMLINK_ORIGINAL)
   if test "x$TEST_COMPILER" = "x$SYMLINK_ORIGINAL"; then
     AC_MSG_RESULT([no symlink])
   else
     AC_MSG_RESULT([$SYMLINK_ORIGINAL])
 
@@ -714,23 +715,23 @@
 
   #
   # Setup the preprocessor (CPP and CXXCPP)
   #
   AC_PROG_CPP
-  BASIC_FIXUP_EXECUTABLE(CPP)
+  UTIL_FIXUP_EXECUTABLE(CPP)
   AC_PROG_CXXCPP
-  BASIC_FIXUP_EXECUTABLE(CXXCPP)
+  UTIL_FIXUP_EXECUTABLE(CXXCPP)
 
   #
   # Setup the linker (LD)
   #
   if test "x$TOOLCHAIN_TYPE" = xmicrosoft; then
     # In the Microsoft toolchain we have a separate LD command "link".
     # Make sure we reject /usr/bin/link (as determined in CYGWIN_LINK), which is
     # a cygwin program for something completely different.
     AC_CHECK_PROG([LD], [link$EXE_SUFFIX],[link$EXE_SUFFIX],,, [$CYGWIN_LINK])
-    BASIC_FIXUP_EXECUTABLE(LD)
+    UTIL_FIXUP_EXECUTABLE(LD)
     # Verify that we indeed succeeded with this trick.
     AC_MSG_CHECKING([if the found link.exe is actually the Visual Studio linker])
     "$LD" --version > /dev/null
     if test $? -eq 0 ; then
       AC_MSG_RESULT([no])
@@ -744,12 +745,12 @@
   else
     # All other toolchains use the compiler to link.
     LD="$CC"
     LDCXX="$CXX"
     # jaotc expects 'ld' as the linker rather than the compiler.
-    BASIC_CHECK_TOOLS([LD_JAOTC], ld)
-    BASIC_FIXUP_EXECUTABLE(LD_JAOTC)
+    UTIL_CHECK_TOOLS([LD_JAOTC], ld)
+    UTIL_FIXUP_EXECUTABLE(LD_JAOTC)
   fi
   AC_SUBST(LD)
   AC_SUBST(LD_JAOTC)
   # FIXME: it should be CXXLD, according to standard (cf CXXCPP)
   AC_SUBST(LDCXX)
@@ -767,12 +768,12 @@
 
   #
   # Setup the assembler (AS)
   #
   if test "x$OPENJDK_TARGET_OS" = xsolaris; then
-    BASIC_PATH_PROGS(AS, as)
-    BASIC_FIXUP_EXECUTABLE(AS)
+    UTIL_PATH_PROGS(AS, as)
+    UTIL_FIXUP_EXECUTABLE(AS)
     if test "x$AS" = x; then
       AC_MSG_ERROR([Solaris assembler (as) is required. Please install via "pkg install pkg:/developer/assembler".])
     fi
   else
     # FIXME: is this correct for microsoft?
@@ -785,31 +786,31 @@
   #
   if test "x$TOOLCHAIN_TYPE" = xmicrosoft; then
     # The corresponding ar tool is lib.exe (used to create static libraries)
     AC_CHECK_PROG([AR], [lib$EXE_SUFFIX],[lib$EXE_SUFFIX],,,)
   elif test "x$TOOLCHAIN_TYPE" = xgcc; then
-    BASIC_CHECK_TOOLS(AR, ar gcc-ar)
+    UTIL_CHECK_TOOLS(AR, ar gcc-ar)
   else
-    BASIC_CHECK_TOOLS(AR, ar)
+    UTIL_CHECK_TOOLS(AR, ar)
   fi
-  BASIC_FIXUP_EXECUTABLE(AR)
+  UTIL_FIXUP_EXECUTABLE(AR)
 ])
 
 # Setup additional tools that is considered a part of the toolchain, but not the
 # core part. Many of these are highly platform-specific and do not exist,
 # and/or are not needed on all platforms.
 AC_DEFUN_ONCE([TOOLCHAIN_DETECT_TOOLCHAIN_EXTRA],
 [
   if test "x$OPENJDK_TARGET_OS" = "xmacosx"; then
-    BASIC_PATH_PROGS(LIPO, lipo)
-    BASIC_FIXUP_EXECUTABLE(LIPO)
-    BASIC_REQUIRE_PROGS(OTOOL, otool)
-    BASIC_FIXUP_EXECUTABLE(OTOOL)
-    BASIC_REQUIRE_PROGS(INSTALL_NAME_TOOL, install_name_tool)
-    BASIC_FIXUP_EXECUTABLE(INSTALL_NAME_TOOL)
-
-    BASIC_PATH_PROGS(METAL, metal)
+    UTIL_PATH_PROGS(LIPO, lipo)
+    UTIL_FIXUP_EXECUTABLE(LIPO)
+    UTIL_REQUIRE_PROGS(OTOOL, otool)
+    UTIL_FIXUP_EXECUTABLE(OTOOL)
+    UTIL_REQUIRE_PROGS(INSTALL_NAME_TOOL, install_name_tool)
+    UTIL_FIXUP_EXECUTABLE(INSTALL_NAME_TOOL)
+
+    UTIL_PATH_PROGS(METAL, metal)
     if test "x$METAL" = x; then
       AC_MSG_CHECKING([if metal can be run using xcrun])
       METAL="xcrun -sdk macosx metal"
       test_metal=`$METAL --version 2>&1`
       if test $? -ne 0; then
@@ -818,11 +819,11 @@
       else
         AC_MSG_RESULT([yes, will be using '$METAL'])
       fi
     fi
 
-    BASIC_PATH_PROGS(METALLIB, metallib)
+    UTIL_PATH_PROGS(METALLIB, metallib)
     if test "x$METALLIB" = x; then
       AC_MSG_CHECKING([if metallib can be run using xcrun])
       METALLIB="xcrun -sdk macosx metallib"
       test_metallib=`$METALLIB --version 2>&1`
       if test $? -ne 0; then
@@ -834,16 +835,16 @@
     fi
   fi
 
   if test "x$TOOLCHAIN_TYPE" = xmicrosoft; then
     AC_CHECK_PROG([MT], [mt$EXE_SUFFIX], [mt$EXE_SUFFIX],,, [/usr/bin/mt])
-    BASIC_FIXUP_EXECUTABLE(MT)
+    UTIL_FIXUP_EXECUTABLE(MT)
     # Setup the resource compiler (RC)
     AC_CHECK_PROG([RC], [rc$EXE_SUFFIX], [rc$EXE_SUFFIX],,, [/usr/bin/rc])
-    BASIC_FIXUP_EXECUTABLE(RC)
+    UTIL_FIXUP_EXECUTABLE(RC)
     AC_CHECK_PROG([DUMPBIN], [dumpbin$EXE_SUFFIX], [dumpbin$EXE_SUFFIX],,,)
-    BASIC_FIXUP_EXECUTABLE(DUMPBIN)
+    UTIL_FIXUP_EXECUTABLE(DUMPBIN)
     # We need to check for 'msbuild.exe' because at the place where we expect to
     # find 'msbuild.exe' there's also a directory called 'msbuild' and configure
     # won't find the 'msbuild.exe' executable in that case (and the
     # 'ac_executable_extensions' is unusable due to performance reasons).
     # Notice that we intentionally don't fix up the path to MSBUILD because we
@@ -851,37 +852,37 @@
     # 'LIB_SETUP_FREETYPE' in "libraries.m4"
     AC_CHECK_PROG([MSBUILD], [msbuild$EXE_SUFFIX], [msbuild$EXE_SUFFIX],,,)
   fi
 
   if test "x$OPENJDK_TARGET_OS" = xsolaris; then
-    BASIC_PATH_PROGS(STRIP, strip)
-    BASIC_FIXUP_EXECUTABLE(STRIP)
-    BASIC_PATH_PROGS(NM, nm)
-    BASIC_FIXUP_EXECUTABLE(NM)
-    BASIC_PATH_PROGS(GNM, gnm)
-    BASIC_FIXUP_EXECUTABLE(GNM)
+    UTIL_PATH_PROGS(STRIP, strip)
+    UTIL_FIXUP_EXECUTABLE(STRIP)
+    UTIL_PATH_PROGS(NM, nm)
+    UTIL_FIXUP_EXECUTABLE(NM)
+    UTIL_PATH_PROGS(GNM, gnm)
+    UTIL_FIXUP_EXECUTABLE(GNM)
   elif test "x$OPENJDK_TARGET_OS" != xwindows; then
     # FIXME: we should unify this with the solaris case above.
-    BASIC_CHECK_TOOLS(STRIP, strip)
-    BASIC_FIXUP_EXECUTABLE(STRIP)
+    UTIL_CHECK_TOOLS(STRIP, strip)
+    UTIL_FIXUP_EXECUTABLE(STRIP)
     if test "x$TOOLCHAIN_TYPE" = xgcc; then
-      BASIC_CHECK_TOOLS(NM, nm gcc-nm)
+      UTIL_CHECK_TOOLS(NM, nm gcc-nm)
     else
-      BASIC_CHECK_TOOLS(NM, nm)
+      UTIL_CHECK_TOOLS(NM, nm)
     fi
-    BASIC_FIXUP_EXECUTABLE(NM)
+    UTIL_FIXUP_EXECUTABLE(NM)
     GNM="$NM"
     AC_SUBST(GNM)
   fi
 
   # objcopy is used for moving debug symbols to separate files when
   # full debug symbols are enabled.
   if test "x$OPENJDK_TARGET_OS" = xsolaris || test "x$OPENJDK_TARGET_OS" = xlinux; then
-    BASIC_CHECK_TOOLS(OBJCOPY, [gobjcopy objcopy])
+    UTIL_CHECK_TOOLS(OBJCOPY, [gobjcopy objcopy])
     # Only call fixup if objcopy was found.
     if test -n "$OBJCOPY"; then
-      BASIC_FIXUP_EXECUTABLE(OBJCOPY)
+      UTIL_FIXUP_EXECUTABLE(OBJCOPY)
       if test "x$OPENJDK_BUILD_OS" = xsolaris; then
         # objcopy prior to 2.21.1 on solaris is broken and is not usable.
         # Rewrite objcopy version output to VALID_VERSION or BAD_VERSION.
         # - version number is last blank separate word on first line
         # - version number formats that have been seen:
@@ -918,22 +919,22 @@
         fi
       fi
     fi
   fi
 
-  BASIC_CHECK_TOOLS(OBJDUMP, [gobjdump objdump])
+  UTIL_CHECK_TOOLS(OBJDUMP, [gobjdump objdump])
   if test "x$OBJDUMP" != x; then
-    # Only used for compare.sh; we can live without it. BASIC_FIXUP_EXECUTABLE
+    # Only used for compare.sh; we can live without it. UTIL_FIXUP_EXECUTABLE
     # bails if argument is missing.
-    BASIC_FIXUP_EXECUTABLE(OBJDUMP)
+    UTIL_FIXUP_EXECUTABLE(OBJDUMP)
   fi
 
   case $TOOLCHAIN_TYPE in
     gcc|clang|solstudio)
-      BASIC_CHECK_TOOLS(CXXFILT, [c++filt])
-      BASIC_CHECK_NONEMPTY(CXXFILT)
-      BASIC_FIXUP_EXECUTABLE(CXXFILT)
+      UTIL_CHECK_TOOLS(CXXFILT, [c++filt])
+      UTIL_CHECK_NONEMPTY(CXXFILT)
+      UTIL_FIXUP_EXECUTABLE(CXXFILT)
       ;;
   esac
 ])
 
 # Setup the build tools (i.e, the compiler and linker used to build programs
@@ -957,11 +958,11 @@
       AC_MSG_ERROR([--with-build-devkit must have a value])
     elif test -n "$with_build_devkit"; then
       if test ! -d "$with_build_devkit"; then
         AC_MSG_ERROR([--with-build-devkit points to non existing dir: $with_build_devkit])
       else
-        BASIC_FIXUP_PATH([with_build_devkit])
+        UTIL_FIXUP_PATH([with_build_devkit])
         BUILD_DEVKIT_ROOT="$with_build_devkit"
         # Check for a meta data info file in the root of the devkit
         if test -f "$BUILD_DEVKIT_ROOT/devkit.info"; then
           # Process devkit.info so that existing devkit variables are not
           # modified by this
@@ -1001,22 +1002,22 @@
     fi
 
     # FIXME: we should list the discovered compilers as an exclude pattern!
     # If we do that, we can do this detection before POST_DETECTION, and still
     # find the build compilers in the tools dir, if needed.
-    BASIC_REQUIRE_PROGS(BUILD_CC, [cl cc gcc])
-    BASIC_FIXUP_EXECUTABLE(BUILD_CC)
-    BASIC_REQUIRE_PROGS(BUILD_CXX, [cl CC g++])
-    BASIC_FIXUP_EXECUTABLE(BUILD_CXX)
-    BASIC_PATH_PROGS(BUILD_NM, nm gcc-nm)
-    BASIC_FIXUP_EXECUTABLE(BUILD_NM)
-    BASIC_PATH_PROGS(BUILD_AR, ar gcc-ar)
-    BASIC_FIXUP_EXECUTABLE(BUILD_AR)
-    BASIC_PATH_PROGS(BUILD_OBJCOPY, objcopy)
-    BASIC_FIXUP_EXECUTABLE(BUILD_OBJCOPY)
-    BASIC_PATH_PROGS(BUILD_STRIP, strip)
-    BASIC_FIXUP_EXECUTABLE(BUILD_STRIP)
+    UTIL_REQUIRE_PROGS(BUILD_CC, [cl cc gcc])
+    UTIL_FIXUP_EXECUTABLE(BUILD_CC)
+    UTIL_REQUIRE_PROGS(BUILD_CXX, [cl CC g++])
+    UTIL_FIXUP_EXECUTABLE(BUILD_CXX)
+    UTIL_PATH_PROGS(BUILD_NM, nm gcc-nm)
+    UTIL_FIXUP_EXECUTABLE(BUILD_NM)
+    UTIL_PATH_PROGS(BUILD_AR, ar gcc-ar)
+    UTIL_FIXUP_EXECUTABLE(BUILD_AR)
+    UTIL_PATH_PROGS(BUILD_OBJCOPY, objcopy)
+    UTIL_FIXUP_EXECUTABLE(BUILD_OBJCOPY)
+    UTIL_PATH_PROGS(BUILD_STRIP, strip)
+    UTIL_FIXUP_EXECUTABLE(BUILD_STRIP)
     # Assume the C compiler is the assembler
     BUILD_AS="$BUILD_CC -c"
     # Just like for the target compiler, use the compiler as linker
     BUILD_LD="$BUILD_CC"
     BUILD_LDCXX="$BUILD_CXX"
@@ -1106,11 +1107,11 @@
     AC_MSG_CHECKING([for jtreg test harness])
     AC_MSG_RESULT([no, disabled])
   elif test "x$with_jtreg" != xyes && test "x$with_jtreg" != x; then
     # An explicit path is specified, use it.
     JT_HOME="$with_jtreg"
-    BASIC_FIXUP_PATH([JT_HOME])
+    UTIL_FIXUP_PATH([JT_HOME])
     if test ! -d "$JT_HOME"; then
       AC_MSG_ERROR([jtreg home directory from --with-jtreg=$with_jtreg does not exist])
     fi
 
     if test ! -e "$JT_HOME/lib/jtreg.jar"; then
@@ -1146,11 +1147,11 @@
     fi
 
     if test "x$JT_HOME" = x; then
       # JT_HOME is not set in environment, or was deemed invalid.
       # Try to find jtreg on path
-      BASIC_PATH_PROGS(JTREGEXE, jtreg)
+      UTIL_PATH_PROGS(JTREGEXE, jtreg)
       if test "x$JTREGEXE" != x; then
         # That's good, now try to derive JT_HOME
         JT_HOME=`(cd $($DIRNAME $JTREGEXE)/.. && pwd)`
         if test ! -e "$JT_HOME/lib/jtreg.jar"; then
           AC_MSG_WARN([Ignoring jtreg from path since a valid jtreg home cannot be found])
@@ -1172,12 +1173,12 @@
         AC_MSG_ERROR([--with-jtreg was specified, but no jtreg found.])
       fi
     fi
   fi
 
-  BASIC_FIXUP_EXECUTABLE(JTREGEXE)
-  BASIC_FIXUP_PATH(JT_HOME)
+  UTIL_FIXUP_EXECUTABLE(JTREGEXE)
+  UTIL_FIXUP_PATH(JT_HOME)
   AC_SUBST(JT_HOME)
   AC_SUBST(JTREGEXE)
 ])
 
 # Setup the JIB dependency resolver
