diff a/make/autoconf/toolchain_windows.m4 b/make/autoconf/toolchain_windows.m4
--- a/make/autoconf/toolchain_windows.m4
+++ b/make/autoconf/toolchain_windows.m4
@@ -110,11 +110,11 @@
   if test "x$VS_ENV_CMD" = x; then
     VS_VERSION="$1"
     VS_BASE="$2"
     METHOD="$3"
 
-    BASIC_WINDOWS_REWRITE_AS_UNIX_PATH(VS_BASE)
+    UTIL_REWRITE_AS_UNIX_PATH(VS_BASE)
     # In VS 2017 and VS 2019, the default installation is in a subdir named after the edition.
     # Find the first one present and use that.
     if test "x$VS_EDITIONS" != x; then
       for edition in $VS_EDITIONS; do
         if test -d "$VS_BASE/$edition"; then
@@ -158,11 +158,11 @@
 [
   if test "x$VS_ENV_CMD" = x; then
     VS_VERSION="$1"
     WIN_SDK_BASE="$2"
     METHOD="$3"
-    BASIC_WINDOWS_REWRITE_AS_UNIX_PATH(WIN_SDK_BASE)
+    UTIL_REWRITE_AS_UNIX_PATH(WIN_SDK_BASE)
     if test -d "$WIN_SDK_BASE"; then
       # There have been cases of partial or broken SDK installations. A missing
       # lib dir is not going to work.
       if test ! -d "$WIN_SDK_BASE/lib"; then
         AC_MSG_NOTICE([Found Windows SDK installation at $WIN_SDK_BASE using $METHOD])
@@ -311,11 +311,11 @@
       OLDIFS="$IFS"
       IFS=":"
       VS_PATH_WINDOWS=""
       for i in $TOOLCHAIN_PATH; do
         path=$i
-        BASIC_WINDOWS_REWRITE_AS_WINDOWS_MIXED_PATH([path])
+        UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([path])
         VS_PATH_WINDOWS="$VS_PATH_WINDOWS;$path"
       done
       IFS="$OLDIFS"
       # Append the current path from Windows env
       WINDOWS_PATH="`$CMD /c echo %PATH%`"
@@ -329,18 +329,18 @@
     # SYSROOT_CFLAGS
     OLDIFS="$IFS"
     IFS=";"
     for i in $DEVKIT_VS_INCLUDE; do
       ipath=$i
-      BASIC_WINDOWS_REWRITE_AS_WINDOWS_MIXED_PATH([ipath])
+      UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([ipath])
       VS_INCLUDE="$VS_INCLUDE;$ipath"
     done
     # Convert DEVKIT_VS_LIB into VS_LIB so that it can still be exported
     # as LIB for compiler invocations without SYSROOT_LDFLAGS
     for i in $DEVKIT_VS_LIB; do
       libpath=$i
-      BASIC_WINDOWS_REWRITE_AS_WINDOWS_MIXED_PATH([libpath])
+      UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([libpath])
       VS_LIB="$VS_LIB;$libpath"
     done
     IFS="$OLDIFS"
 
     AC_MSG_NOTICE([Found devkit $VS_DESCRIPTION])
@@ -406,11 +406,11 @@
 
   # If we have a devkit, skip all of the below.
   if test "x$DEVKIT_VS_VERSION" = x; then
     if test "x$VS_ENV_CMD" != x; then
       # We have found a Visual Studio environment on disk, let's extract variables from the vsvars bat file.
-      BASIC_FIXUP_EXECUTABLE(VS_ENV_CMD)
+      UTIL_FIXUP_EXECUTABLE(VS_ENV_CMD)
 
       # Lets extract the variables that are set by vcvarsall.bat/vsvars32.bat/vsvars64.bat
       AC_MSG_NOTICE([Trying to extract Visual Studio environment variables])
 
       # We need to create a couple of temporary files.
@@ -418,17 +418,17 @@
       $MKDIR -p $VS_ENV_TMP_DIR
 
       # Cannot use the VS10 setup script directly (since it only updates the DOS subshell environment).
       # Instead create a shell script which will set the relevant variables when run.
       WINPATH_VS_ENV_CMD="$VS_ENV_CMD"
-      BASIC_WINDOWS_REWRITE_AS_WINDOWS_MIXED_PATH([WINPATH_VS_ENV_CMD])
+      UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([WINPATH_VS_ENV_CMD])
 
       if test "x$OPENJDK_BUILD_OS_ENV" = "xwindows.wsl"; then
         WINPATH_BASH="bash"
       else
         WINPATH_BASH="$BASH"
-        BASIC_WINDOWS_REWRITE_AS_WINDOWS_MIXED_PATH([WINPATH_BASH])
+        UTIL_REWRITE_AS_WINDOWS_MIXED_PATH([WINPATH_BASH])
       fi
 
       # Generate a DOS batch file which runs $VS_ENV_CMD, and then creates a shell
       # script (executable by bash) that will setup the important variables.
       EXTRACT_VC_ENV_BAT_FILE="$VS_ENV_TMP_DIR/extract-vs-env.bat"
@@ -519,14 +519,14 @@
           # Only process non-empty elements
           if test "x$path" != x; then
             IFS="$OLDIFS"
             # Check that directory exists before calling fixup_path
             testpath=$path
-            BASIC_WINDOWS_REWRITE_AS_UNIX_PATH([testpath])
+            UTIL_REWRITE_AS_UNIX_PATH([testpath])
             if test -d "$testpath"; then
-              BASIC_FIXUP_PATH([path])
-              BASIC_APPEND_TO_PATH(VS_PATH, $path)
+              UTIL_FIXUP_PATH([path])
+              UTIL_APPEND_TO_PATH(VS_PATH, $path)
             fi
             IFS=";"
           fi
         done
         IFS="$OLDIFS"
@@ -574,13 +574,13 @@
         # Only process non-empty elements
         if test "x$ipath" != x; then
           IFS="$OLDIFS"
           # Check that directory exists before calling fixup_path
           testpath=$ipath
-          BASIC_WINDOWS_REWRITE_AS_UNIX_PATH([testpath])
+          UTIL_REWRITE_AS_UNIX_PATH([testpath])
           if test -d "$testpath"; then
-            BASIC_FIXUP_PATH([ipath])
+            UTIL_FIXUP_PATH([ipath])
             SYSROOT_CFLAGS="$SYSROOT_CFLAGS -I$ipath"
           fi
           IFS=";"
         fi
       done
@@ -590,13 +590,13 @@
         # Only process non-empty elements
         if test "x$libpath" != x; then
           IFS="$OLDIFS"
           # Check that directory exists before calling fixup_path
           testpath=$libpath
-          BASIC_WINDOWS_REWRITE_AS_UNIX_PATH([testpath])
+          UTIL_REWRITE_AS_UNIX_PATH([testpath])
           if test -d "$testpath"; then
-            BASIC_FIXUP_PATH([libpath])
+            UTIL_FIXUP_PATH([libpath])
             SYSROOT_LDFLAGS="$SYSROOT_LDFLAGS -libpath:$libpath"
           fi
           IFS=";"
         fi
       done
@@ -663,21 +663,21 @@
   MSVC_DLL=
 
   if test "x$MSVC_DLL" = x; then
     if test "x$VCINSTALLDIR" != x; then
       CYGWIN_VC_INSTALL_DIR="$VCINSTALLDIR"
-      BASIC_FIXUP_PATH(CYGWIN_VC_INSTALL_DIR)
+      UTIL_FIXUP_PATH(CYGWIN_VC_INSTALL_DIR)
       if test "$VS_VERSION" -lt 2017; then
         # Probe: Using well-known location from Visual Studio 12.0 and older
         if test "x$OPENJDK_TARGET_CPU_BITS" = x64; then
           POSSIBLE_MSVC_DLL="$CYGWIN_VC_INSTALL_DIR/redist/x64/Microsoft.VC${VS_VERSION_INTERNAL}.CRT/$DLL_NAME"
         else
           POSSIBLE_MSVC_DLL="$CYGWIN_VC_INSTALL_DIR/redist/x86/Microsoft.VC${VS_VERSION_INTERNAL}.CRT/$DLL_NAME"
         fi
       else
         CYGWIN_VC_TOOLS_REDIST_DIR="$VCToolsRedistDir"
-        BASIC_FIXUP_PATH(CYGWIN_VC_TOOLS_REDIST_DIR)
+        UTIL_FIXUP_PATH(CYGWIN_VC_TOOLS_REDIST_DIR)
         # Probe: Using well-known location from VS 2017 and VS 2019
         if test "x$OPENJDK_TARGET_CPU_BITS" = x64; then
           POSSIBLE_MSVC_DLL="`ls $CYGWIN_VC_TOOLS_REDIST_DIR/x64/Microsoft.VC${VS_VERSION_INTERNAL}.CRT/$DLL_NAME`"
         else
           POSSIBLE_MSVC_DLL="`ls $CYGWIN_VC_TOOLS_REDIST_DIR/x86/Microsoft.VC${VS_VERSION_INTERNAL}.CRT/$DLL_NAME`"
@@ -700,21 +700,21 @@
   fi
 
   if test "x$MSVC_DLL" = x; then
     # Probe: Look in the Windows system32 directory
     CYGWIN_SYSTEMROOT="$SYSTEMROOT"
-    BASIC_WINDOWS_REWRITE_AS_UNIX_PATH(CYGWIN_SYSTEMROOT)
+    UTIL_REWRITE_AS_UNIX_PATH(CYGWIN_SYSTEMROOT)
     POSSIBLE_MSVC_DLL="$CYGWIN_SYSTEMROOT/system32/$DLL_NAME"
     TOOLCHAIN_CHECK_POSSIBLE_MSVC_DLL([$DLL_NAME], [$POSSIBLE_MSVC_DLL],
         [well-known location in SYSTEMROOT])
   fi
 
   if test "x$MSVC_DLL" = x; then
     # Probe: If Visual Studio Express is installed, there is usually one with the debugger
     if test "x$VS100COMNTOOLS" != x; then
       CYGWIN_VS_TOOLS_DIR="$VS100COMNTOOLS/.."
-      BASIC_WINDOWS_REWRITE_AS_UNIX_PATH(CYGWIN_VS_TOOLS_DIR)
+      UTIL_REWRITE_AS_UNIX_PATH(CYGWIN_VS_TOOLS_DIR)
       if test "x$OPENJDK_TARGET_CPU_BITS" = x64; then
         POSSIBLE_MSVC_DLL=`$FIND "$CYGWIN_VS_TOOLS_DIR" -name $DLL_NAME \
         | $GREP -i /x64/ | $HEAD --lines 1`
       else
         POSSIBLE_MSVC_DLL=`$FIND "$CYGWIN_VS_TOOLS_DIR" -name $DLL_NAME \
@@ -812,18 +812,18 @@
         AC_MSG_RESULT([no])
         AC_MSG_ERROR([Could not find any dlls in $with_ucrt_dll_dir])
       else
         AC_MSG_RESULT([$with_ucrt_dll_dir])
         UCRT_DLL_DIR="$with_ucrt_dll_dir"
-        BASIC_FIXUP_PATH([UCRT_DLL_DIR])
+        UTIL_FIXUP_PATH([UCRT_DLL_DIR])
       fi
     elif test "x$DEVKIT_UCRT_DLL_DIR" != "x"; then
       UCRT_DLL_DIR="$DEVKIT_UCRT_DLL_DIR"
       AC_MSG_RESULT($UCRT_DLL_DIR)
     else
       CYGWIN_WINDOWSSDKDIR="${WINDOWSSDKDIR}"
-      BASIC_FIXUP_PATH([CYGWIN_WINDOWSSDKDIR])
+      UTIL_FIXUP_PATH([CYGWIN_WINDOWSSDKDIR])
       dll_subdir=$OPENJDK_TARGET_CPU
       if test "x$dll_subdir" = "xx86_64"; then
         dll_subdir="x64"
       fi
       UCRT_DLL_DIR="$CYGWIN_WINDOWSSDKDIR/Redist/ucrt/DLLs/$dll_subdir"
