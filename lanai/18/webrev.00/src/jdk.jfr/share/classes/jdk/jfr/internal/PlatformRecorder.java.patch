diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/PlatformRecorder.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/PlatformRecorder.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/PlatformRecorder.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/PlatformRecorder.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -62,16 +62,16 @@
 
 
     private final List<PlatformRecording> recordings = new ArrayList<>();
     private final static List<SecureRecorderListener> changeListeners = new ArrayList<>();
     private final Repository repository;
-    private final Timer timer;
     private final static JVM jvm = JVM.getJVM();
     private final EventType activeRecordingEvent;
     private final EventType activeSettingEvent;
     private final Thread shutdownHook;
 
+    private Timer timer;
     private long recordingCounter = 0;
     private RepositoryChunk currentChunk;
     private boolean inShutdown;
 
     public PlatformRecorder() throws Exception {
@@ -84,14 +84,14 @@
         Logger.log(JFR_SYSTEM, INFO, "Registered JDK events");
         JDKEvents.addInstrumentation();
         startDiskMonitor();
         activeRecordingEvent = EventType.getEventType(ActiveRecordingEvent.class);
         activeSettingEvent = EventType.getEventType(ActiveSettingEvent.class);
-        shutdownHook = SecuritySupport.createThreadWitNoPermissions("JFR: Shutdown Hook", new ShutdownHook(this));
+        shutdownHook = SecuritySupport.createThreadWitNoPermissions("JFR Shutdown Hook", new ShutdownHook(this));
         SecuritySupport.setUncaughtExceptionHandler(shutdownHook, new ShutdownHook.ExceptionHandler());
         SecuritySupport.registerShutdownHook(shutdownHook);
-        timer = createTimer();
+
     }
 
 
     private static Timer createTimer() {
         try {
@@ -166,11 +166,14 @@
 
     static synchronized List<FlightRecorderListener> getListeners() {
         return new ArrayList<>(changeListeners);
     }
 
-    Timer getTimer() {
+    synchronized Timer getTimer() {
+        if (timer == null) {
+            timer = createTimer();
+        }
         return timer;
     }
 
     public static void notifyRecorderInitialized(FlightRecorder recorder) {
         Logger.log(JFR_SYSTEM, TRACE, "Notifying listeners that Flight Recorder is initialized");
@@ -184,11 +187,13 @@
     }
 
     // called by shutdown hook
     synchronized void destroy() {
         try {
-            timer.cancel();
+            if (timer != null) {
+                timer.cancel();
+            }
         } catch (Exception ex) {
             Logger.log(JFR_SYSTEM, WARN, "Shutdown hook could not cancel timer");
         }
 
         for (PlatformRecording p : getRecordings()) {
