diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/PrettyWriter.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/PrettyWriter.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/PrettyWriter.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/PrettyWriter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -35,10 +35,11 @@
 
 import jdk.jfr.AnnotationElement;
 import jdk.jfr.DataAmount;
 import jdk.jfr.Frequency;
 import jdk.jfr.MemoryAddress;
+import jdk.jfr.Name;
 import jdk.jfr.Percentage;
 import jdk.jfr.ValueDescriptor;
 import jdk.jfr.consumer.RecordedClass;
 import jdk.jfr.consumer.RecordedClassLoader;
 import jdk.jfr.consumer.RecordedEvent;
@@ -141,19 +142,21 @@
         }
     }
 
     private void printAnnotations(int commentIndex, List<AnnotationElement> annotations) {
         for (AnnotationElement a : annotations) {
-            printIndent();
-            print("@");
-            print(makeSimpleType(a.getTypeName()));
-            List<ValueDescriptor> vs = a.getValueDescriptors();
-            if (!vs.isEmpty()) {
-                printAnnotation(a);
-                printCommentRef(commentIndex, a.getTypeId());
-            } else {
-                println();
+            if (!Name.class.getName().equals(a.getTypeName())) {
+                printIndent();
+                print("@");
+                print(makeSimpleType(a.getTypeName()));
+                List<ValueDescriptor> vs = a.getValueDescriptors();
+                if (!vs.isEmpty()) {
+                    printAnnotation(a);
+                    printCommentRef(commentIndex, a.getTypeId());
+                } else {
+                    println();
+                }
             }
         }
     }
 
     private void printAnnotation(AnnotationElement a) {
@@ -233,18 +236,20 @@
     private void printStackTrace(RecordedStackTrace stackTrace) {
         println("[");
         List<RecordedFrame> frames = stackTrace.getFrames();
         indent();
         int i = 0;
-        while (i < frames.size() && i < getStackDepth()) {
+        int depth = 0;
+        while (i < frames.size() && depth < getStackDepth()) {
             RecordedFrame frame = frames.get(i);
-            if (frame.isJavaFrame()) {
+            if (frame.isJavaFrame() && !frame.getMethod().isHidden()) {
                 printIndent();
                 printValue(frame, null, "");
                 println();
-                i++;
+                depth++;
             }
+            i++;
         }
         if (stackTrace.isTruncated() || i == getStackDepth()) {
             printIndent();
             println("...");
         }
