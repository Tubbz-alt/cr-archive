diff a/src/hotspot/share/code/relocInfo.hpp b/src/hotspot/share/code/relocInfo.hpp
--- a/src/hotspot/share/code/relocInfo.hpp
+++ b/src/hotspot/share/code/relocInfo.hpp
@@ -513,13 +513,14 @@
 //      ...
 //     }
 //   }
 
 class RelocIterator : public StackObj {
+  friend class section_word_Relocation; // for section verification
   enum { SECT_LIMIT = 3 };  // must be equal to CodeBuffer::SECT_LIMIT, checked in ctor
   friend class Relocation;
-  friend class relocInfo;       // for change_reloc_info_for_address only
+  friend class relocInfo;   // for change_reloc_info_for_address only
   typedef relocInfo::relocType relocType;
 
  private:
   address         _limit;   // stop producing relocations after this _addr
   relocInfo*      _current; // the current relocation information
@@ -635,17 +636,17 @@
 class Relocation {
   friend class RelocationHolder;
   friend class RelocIterator;
 
  private:
-  static void guarantee_size();
-
   // When a relocation has been created by a RelocIterator,
   // this field is non-null.  It allows the relocation to know
   // its context, such as the address to which it applies.
   RelocIterator* _binding;
 
+  relocInfo::relocType _rtype;
+
  protected:
   RelocIterator* binding() const {
     assert(_binding != NULL, "must be bound");
     return _binding;
   }
@@ -653,21 +654,19 @@
     assert(_binding == NULL, "must be unbound");
     _binding = b;
     assert(_binding != NULL, "must now be bound");
   }
 
-  Relocation() {
-    _binding = NULL;
-  }
+  Relocation(relocInfo::relocType rtype) : _binding(NULL), _rtype(rtype) { }
 
   static RelocationHolder newHolder() {
     return RelocationHolder();
   }
 
  public:
   void* operator new(size_t size, const RelocationHolder& holder) throw() {
-    if (size > sizeof(holder._relocbuf)) guarantee_size();
+    assert(size <= sizeof(holder._relocbuf), "Make _relocbuf bigger!");
     assert((void* const *)holder.reloc() == &holder._relocbuf[0], "ptrs must agree");
     return holder.reloc();
   }
 
   // make a generic relocation for a given type (if possible)
@@ -790,11 +789,11 @@
   short*   data()         const { return binding()->data(); }
   int      datalen()      const { return binding()->datalen(); }
   int      format()       const { return binding()->format(); }
 
  public:
-  virtual relocInfo::relocType type()            { return relocInfo::none; }
+  relocInfo::relocType type()              const { return _rtype; }
 
   // is it a call instruction?
   virtual bool is_call()                         { return false; }
 
   // is it a data movement instruction?
@@ -817,32 +816,33 @@
 
 // certain inlines must be deferred until class Relocation is defined:
 
 inline RelocationHolder::RelocationHolder() {
   // initialize the vtbl, just to keep things type-safe
-  new(*this) Relocation();
+  new(*this) Relocation(relocInfo::none);
 }
 
 
 inline RelocationHolder::RelocationHolder(Relocation* r) {
   // wordwise copy from r (ok if it copies garbage after r)
   for (int i = 0; i < _relocbuf_size; i++) {
     _relocbuf[i] = ((void**)r)[i];
   }
 }
 
-
 relocInfo::relocType RelocationHolder::type() const {
   return reloc()->type();
 }
 
 // A DataRelocation always points at a memory or load-constant instruction..
 // It is absolute on most machines, and the constant is split on RISCs.
 // The specific subtypes are oop, external_word, and internal_word.
 // By convention, the "value" does not include a separately reckoned "offset".
 class DataRelocation : public Relocation {
  public:
+  DataRelocation(relocInfo::relocType type) : Relocation(type) {}
+
   bool          is_data()                      { return true; }
 
   // both target and offset must be computed somehow from relocation data
   virtual int    offset()                      { return 0; }
   address         value()                      = 0;
@@ -875,10 +875,12 @@
 
 // A CallRelocation always points at a call instruction.
 // It is PC-relative on most machines.
 class CallRelocation : public Relocation {
  public:
+  CallRelocation(relocInfo::relocType type) : Relocation(type) { }
+
   bool is_call() { return true; }
 
   address  destination()                    { return pd_call_destination(); }
   void     set_destination(address x); // pd_set_call_destination
 
@@ -886,12 +888,10 @@
   address  value()                          { return destination();  }
   void     set_value(address x)             { set_destination(x); }
 };
 
 class oop_Relocation : public DataRelocation {
-  relocInfo::relocType type() { return relocInfo::oop_type; }
-
  public:
   // encode in one of these formats:  [] [n] [n l] [Nn l] [Nn Ll]
   // an oop in the CodeBlob's oop pool
   static RelocationHolder spec(int oop_index, int offset = 0) {
     assert(oop_index > 0, "must be a pool-resident oop");
@@ -914,16 +914,15 @@
 
  private:
   jint _oop_index;                  // if > 0, index into CodeBlob::oop_at
   jint _offset;                     // byte offset to apply to the oop itself
 
-  oop_Relocation(int oop_index, int offset) {
-    _oop_index = oop_index; _offset = offset;
-  }
+  oop_Relocation(int oop_index, int offset)
+    : DataRelocation(relocInfo::oop_type), _oop_index(oop_index), _offset(offset) { }
 
   friend class RelocIterator;
-  oop_Relocation() { }
+  oop_Relocation() : DataRelocation(relocInfo::oop_type) {}
 
  public:
   int oop_index() { return _oop_index; }
   int offset()    { return _offset; }
 
@@ -945,11 +944,10 @@
 };
 
 
 // copy of oop_Relocation for now but may delete stuff in both/either
 class metadata_Relocation : public DataRelocation {
-  relocInfo::relocType type() { return relocInfo::metadata_type; }
 
  public:
   // encode in one of these formats:  [] [n] [n l] [Nn l] [Nn Ll]
   // an metadata in the CodeBlob's metadata pool
   static RelocationHolder spec(int metadata_index, int offset = 0) {
@@ -969,16 +967,15 @@
 
  private:
   jint _metadata_index;            // if > 0, index into nmethod::metadata_at
   jint _offset;                     // byte offset to apply to the metadata itself
 
-  metadata_Relocation(int metadata_index, int offset) {
-    _metadata_index = metadata_index; _offset = offset;
-  }
+  metadata_Relocation(int metadata_index, int offset)
+    : DataRelocation(relocInfo::metadata_type), _metadata_index(metadata_index), _offset(offset) { }
 
   friend class RelocIterator;
-  metadata_Relocation() { }
+  metadata_Relocation() : DataRelocation(relocInfo::metadata_type) { }
 
   // Fixes a Metadata pointer in the code. Most platforms embeds the
   // Metadata pointer in the code at compile time so this is empty
   // for them.
   void pd_fix_value(address x);
@@ -1002,11 +999,10 @@
   // Note:  metadata_value transparently converts Universe::non_metadata_word to NULL.
 };
 
 
 class virtual_call_Relocation : public CallRelocation {
-  relocInfo::relocType type() { return relocInfo::virtual_call_type; }
 
  public:
   // "cached_value" points to the first associated set-oop.
   // The oop_limit helps find the last associated set-oop.
   // (See comments at the top of this file.)
@@ -1018,18 +1014,19 @@
 
  private:
   address _cached_value; // location of set-value instruction
   jint    _method_index; // resolved method for a Java call
 
-  virtual_call_Relocation(address cached_value, int method_index) {
-    _cached_value = cached_value;
-    _method_index = method_index;
+  virtual_call_Relocation(address cached_value, int method_index)
+    : CallRelocation(relocInfo::virtual_call_type),
+      _cached_value(cached_value),
+      _method_index(method_index) {
     assert(cached_value != NULL, "first oop address must be specified");
   }
 
   friend class RelocIterator;
-  virtual_call_Relocation() { }
+  virtual_call_Relocation() : CallRelocation(relocInfo::virtual_call_type) { }
 
  public:
   address cached_value();
 
   int     method_index() { return _method_index; }
@@ -1045,28 +1042,26 @@
   bool clear_inline_cache();
 };
 
 
 class opt_virtual_call_Relocation : public CallRelocation {
-  relocInfo::relocType type() { return relocInfo::opt_virtual_call_type; }
-
  public:
   static RelocationHolder spec(int method_index = 0) {
     RelocationHolder rh = newHolder();
     new(rh) opt_virtual_call_Relocation(method_index);
     return rh;
   }
 
  private:
   jint _method_index; // resolved method for a Java call
 
-  opt_virtual_call_Relocation(int method_index) {
-    _method_index = method_index;
-  }
+  opt_virtual_call_Relocation(int method_index)
+    : CallRelocation(relocInfo::opt_virtual_call_type),
+      _method_index(method_index) { }
 
   friend class RelocIterator;
-  opt_virtual_call_Relocation() {}
+  opt_virtual_call_Relocation() : CallRelocation(relocInfo::opt_virtual_call_type) {}
 
  public:
   int     method_index() { return _method_index; }
   Method* method_value();
 
@@ -1079,28 +1074,26 @@
   address static_stub(bool is_aot);
 };
 
 
 class static_call_Relocation : public CallRelocation {
-  relocInfo::relocType type() { return relocInfo::static_call_type; }
-
  public:
   static RelocationHolder spec(int method_index = 0) {
     RelocationHolder rh = newHolder();
     new(rh) static_call_Relocation(method_index);
     return rh;
   }
 
  private:
   jint _method_index; // resolved method for a Java call
 
-  static_call_Relocation(int method_index) {
-    _method_index = method_index;
-  }
+  static_call_Relocation(int method_index)
+    : CallRelocation(relocInfo::static_call_type),
+    _method_index(method_index) { }
 
   friend class RelocIterator;
-  static_call_Relocation() {}
+  static_call_Relocation() : CallRelocation(relocInfo::static_call_type) {}
 
  public:
   int     method_index() { return _method_index; }
   Method* method_value();
 
@@ -1112,12 +1105,10 @@
   // find the matching static_stub
   address static_stub(bool is_aot);
 };
 
 class static_stub_Relocation : public Relocation {
-  relocInfo::relocType type() { return relocInfo::static_stub_type; }
-
  public:
   static RelocationHolder spec(address static_call, bool is_aot = false) {
     RelocationHolder rh = newHolder();
     new(rh) static_stub_Relocation(static_call, is_aot);
     return rh;
@@ -1125,17 +1116,16 @@
 
  private:
   address _static_call;  // location of corresponding static_call
   bool _is_aot;          // trampoline to aot code
 
-  static_stub_Relocation(address static_call, bool is_aot) {
-    _static_call = static_call;
-    _is_aot = is_aot;
-  }
+  static_stub_Relocation(address static_call, bool is_aot)
+    : Relocation(relocInfo::static_stub_type),
+      _static_call(static_call), _is_aot(is_aot) { }
 
   friend class RelocIterator;
-  static_stub_Relocation() { }
+  static_stub_Relocation() : Relocation(relocInfo::static_stub_type) { }
 
  public:
   bool clear_inline_cache();
 
   address static_call() { return _static_call; }
@@ -1145,40 +1135,40 @@
   void pack_data_to(CodeSection* dest);
   void unpack_data();
 };
 
 class runtime_call_Relocation : public CallRelocation {
-  relocInfo::relocType type() { return relocInfo::runtime_call_type; }
 
  public:
   static RelocationHolder spec() {
     RelocationHolder rh = newHolder();
     new(rh) runtime_call_Relocation();
     return rh;
   }
 
  private:
   friend class RelocIterator;
-  runtime_call_Relocation() { }
+  runtime_call_Relocation() : CallRelocation(relocInfo::runtime_call_type) { }
 
  public:
 };
 
 
 class runtime_call_w_cp_Relocation : public CallRelocation {
-  relocInfo::relocType type() { return relocInfo::runtime_call_w_cp_type; }
-
  public:
   static RelocationHolder spec() {
     RelocationHolder rh = newHolder();
     new(rh) runtime_call_w_cp_Relocation();
     return rh;
   }
 
  private:
   friend class RelocIterator;
-  runtime_call_w_cp_Relocation() { _offset = -4; /* <0 = invalid */ }
+  runtime_call_w_cp_Relocation()
+    : CallRelocation(relocInfo::runtime_call_w_cp_type),
+      _offset(-4) /* <0 = invalid */ { }
+
   // On z/Architecture, runtime calls are either a sequence
   // of two instructions (load destination of call from constant pool + do call)
   // or a pc-relative call. The pc-relative call is faster, but it can only
   // be used if the destination of the call is not too far away.
   // In order to be able to patch a pc-relative call back into one using
@@ -1198,27 +1188,25 @@
 // is the chance that this branch can not reach all possible code locations.
 // If the relocation finds that a branch is too far for the instruction
 // in the code, it can patch it to jump to the trampoline where is
 // sufficient space for a far branch. Needed on PPC.
 class trampoline_stub_Relocation : public Relocation {
-  relocInfo::relocType type() { return relocInfo::trampoline_stub_type; }
-
  public:
   static RelocationHolder spec(address static_call) {
     RelocationHolder rh = newHolder();
     return (new (rh) trampoline_stub_Relocation(static_call));
   }
 
  private:
   address _owner;    // Address of the NativeCall that owns the trampoline.
 
-  trampoline_stub_Relocation(address owner) {
-    _owner = owner;
-  }
+  trampoline_stub_Relocation(address owner)
+    : Relocation(relocInfo::trampoline_stub_type),
+      _owner(owner) { }
 
   friend class RelocIterator;
-  trampoline_stub_Relocation() { }
+  trampoline_stub_Relocation() : Relocation(relocInfo::trampoline_stub_type) { }
 
  public:
 
   // Return the address of the NativeCall that owns the trampoline.
   address owner() { return _owner; }
@@ -1229,12 +1217,10 @@
   // Find the trampoline stub for a call.
   static address get_trampoline_for(address call, nmethod* code);
 };
 
 class external_word_Relocation : public DataRelocation {
-  relocInfo::relocType type() { return relocInfo::external_word_type; }
-
  public:
   static RelocationHolder spec(address target) {
     assert(target != NULL, "must not be null");
     RelocationHolder rh = newHolder();
     new(rh) external_word_Relocation(target);
@@ -1257,16 +1243,15 @@
   }
 
  private:
   address _target;                  // address in runtime
 
-  external_word_Relocation(address target) {
-    _target = target;
-  }
+  external_word_Relocation(address target)
+    : DataRelocation(relocInfo::external_word_type), _target(target) { }
 
   friend class RelocIterator;
-  external_word_Relocation() { }
+  external_word_Relocation() : DataRelocation(relocInfo::external_word_type) { }
 
  public:
   // data is packed as a well-known address in "1_int" format:  [a] or [Aa]
   // The function runtime_address_to_index is used to turn full addresses
   // to short indexes, if they are pre-registered by the stub mechanism.
@@ -1279,11 +1264,10 @@
   address  target();        // if _target==NULL, fetch addr from code stream
   address  value()          { return target(); }
 };
 
 class internal_word_Relocation : public DataRelocation {
-  relocInfo::relocType type() { return relocInfo::internal_word_type; }
 
  public:
   static RelocationHolder spec(address target) {
     assert(target != NULL, "must not be null");
     RelocationHolder rh = newHolder();
@@ -1296,21 +1280,22 @@
     RelocationHolder rh = newHolder();
     new(rh) internal_word_Relocation(NULL);
     return rh;
   }
 
-  internal_word_Relocation(address target) {
-    _target  = target;
-    _section = -1;  // self-relative
-  }
+  // default section -1 means self-relative
+  internal_word_Relocation(address target, int section = -1,
+    relocInfo::relocType type = relocInfo::internal_word_type)
+    : DataRelocation(type), _target(target), _section(section) { }
 
  protected:
   address _target;                  // address in CodeBlob
   int     _section;                 // section providing base address, if any
 
   friend class RelocIterator;
-  internal_word_Relocation() { }
+  internal_word_Relocation(relocInfo::relocType type = relocInfo::internal_word_type)
+    : DataRelocation(type) { }
 
   // bit-width of LSB field in packed offset, if section >= 0
   enum { section_width = 2 }; // must equal CodeBuffer::sect_bits
 
  public:
@@ -1326,43 +1311,42 @@
   int      section()        { return _section;   }
   address  value()          { return target();   }
 };
 
 class section_word_Relocation : public internal_word_Relocation {
-  relocInfo::relocType type() { return relocInfo::section_word_type; }
-
  public:
   static RelocationHolder spec(address target, int section) {
     RelocationHolder rh = newHolder();
     new(rh) section_word_Relocation(target, section);
     return rh;
   }
 
-  section_word_Relocation(address target, int section) {
+  section_word_Relocation(address target, int section)
+    : internal_word_Relocation(target, section, relocInfo::section_word_type) {
     assert(target != NULL, "must not be null");
-    assert(section >= 0, "must be a valid section");
-    _target  = target;
-    _section = section;
+    assert(section >= 0 && section < RelocIterator::SECT_LIMIT, "must be a valid section");
   }
 
   //void pack_data_to -- inherited
   void unpack_data();
 
  private:
   friend class RelocIterator;
-  section_word_Relocation() { }
+  section_word_Relocation() : internal_word_Relocation(relocInfo::section_word_type) { }
 };
 
 
 class poll_Relocation : public Relocation {
   bool          is_data()                      { return true; }
-  relocInfo::relocType type() { return relocInfo::poll_type; }
   void     fix_relocation_after_move(const CodeBuffer* src, CodeBuffer* dest);
+ public:
+  poll_Relocation(relocInfo::relocType type = relocInfo::poll_type) : Relocation(type) { }
 };
 
 class poll_return_Relocation : public poll_Relocation {
-  relocInfo::relocType type() { return relocInfo::poll_return_type; }
+ public:
+  poll_return_Relocation() : poll_Relocation(relocInfo::relocInfo::poll_return_type) { }
 };
 
 // We know all the xxx_Relocation classes, so now we can define these:
 #define EACH_CASE(name)                                         \
 inline name##_Relocation* RelocIterator::name##_reloc() {       \
