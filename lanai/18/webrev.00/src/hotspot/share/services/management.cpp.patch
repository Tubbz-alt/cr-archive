diff a/src/hotspot/share/services/management.cpp b/src/hotspot/share/services/management.cpp
--- a/src/hotspot/share/services/management.cpp
+++ b/src/hotspot/share/services/management.cpp
@@ -1354,11 +1354,11 @@
       jobject o = obj.l;
       if (o == NULL) {
         THROW_(vmSymbols::java_lang_NullPointerException(), JNI_FALSE);
       }
 
-      GCMemoryManager* mgr = get_gc_memory_manager_from_jobject(o, CHECK_0);
+      GCMemoryManager* mgr = get_gc_memory_manager_from_jobject(o, CHECK_false);
       if (mgr != NULL) {
         mgr->reset_gc_stat();
         return true;
       }
       break;
@@ -1400,30 +1400,30 @@
 JVM_ENTRY(jobjectArray, jmm_GetVMGlobalNames(JNIEnv *env))
   // last flag entry is always NULL, so subtract 1
   int nFlags = (int) JVMFlag::numFlags - 1;
   // allocate a temp array
   objArrayOop r = oopFactory::new_objArray(SystemDictionary::String_klass(),
-                                           nFlags, CHECK_0);
+                                           nFlags, CHECK_NULL);
   objArrayHandle flags_ah(THREAD, r);
   int num_entries = 0;
   for (int i = 0; i < nFlags; i++) {
     JVMFlag* flag = &JVMFlag::flags[i];
     // Exclude notproduct and develop flags in product builds.
     if (flag->is_constant_in_binary()) {
       continue;
     }
     // Exclude the locked (experimental, diagnostic) flags
     if (flag->is_unlocked() || flag->is_unlocker()) {
-      Handle s = java_lang_String::create_from_str(flag->_name, CHECK_0);
+      Handle s = java_lang_String::create_from_str(flag->_name, CHECK_NULL);
       flags_ah->obj_at_put(num_entries, s());
       num_entries++;
     }
   }
 
   if (num_entries < nFlags) {
     // Return array of right length
-    objArrayOop res = oopFactory::new_objArray(SystemDictionary::String_klass(), num_entries, CHECK_0);
+    objArrayOop res = oopFactory::new_objArray(SystemDictionary::String_klass(), num_entries, CHECK_NULL);
     for(int i = 0; i < num_entries; i++) {
       res->obj_at_put(i, flags_ah->obj_at(i));
     }
     return (jobjectArray)JNIHandles::make_local(env, res);
   }
@@ -1752,19 +1752,19 @@
 //
 // Input parameter:
 //    object_monitors_only - if true, only check object monitors
 //
 JVM_ENTRY(jobjectArray, jmm_FindDeadlockedThreads(JNIEnv *env, jboolean object_monitors_only))
-  Handle result = find_deadlocks(object_monitors_only != 0, CHECK_0);
+  Handle result = find_deadlocks(object_monitors_only != 0, CHECK_NULL);
   return (jobjectArray) JNIHandles::make_local(env, result());
 JVM_END
 
 // Finds cycles of threads that are deadlocked on monitor locks
 // Returns an array of Thread objects which are in deadlock, if any.
 // Otherwise, returns NULL.
 JVM_ENTRY(jobjectArray, jmm_FindMonitorDeadlockedThreads(JNIEnv *env))
-  Handle result = find_deadlocks(true, CHECK_0);
+  Handle result = find_deadlocks(true, CHECK_NULL);
   return (jobjectArray) JNIHandles::make_local(env, result());
 JVM_END
 
 // Gets the information about GC extension attributes including
 // the name of the attribute, its type, and a short description.
@@ -1808,11 +1808,11 @@
     THROW_MSG_(vmSymbols::java_lang_IllegalArgumentException(),
                "The length of the given MemoryUsage array does not match the number of memory pools.", 0);
   }
 
   // check if the element of array is of type MemoryUsage class
-  Klass* usage_klass = Management::java_lang_management_MemoryUsage_klass(CHECK_0);
+  Klass* usage_klass = Management::java_lang_management_MemoryUsage_klass(CHECK_NULL);
   Klass* element_klass = ObjArrayKlass::cast(array_h->klass())->element_klass();
   if (element_klass != usage_klass) {
     THROW_MSG_(vmSymbols::java_lang_IllegalArgumentException(),
                "The element type is not MemoryUsage class", 0);
   }
