diff a/src/hotspot/share/runtime/signature.cpp b/src/hotspot/share/runtime/signature.cpp
--- a/src/hotspot/share/runtime/signature.cpp
+++ b/src/hotspot/share/runtime/signature.cpp
@@ -170,123 +170,109 @@
   }
 }
 
 // Implementation of SignatureStream
 
-static inline int decode_signature_char(int ch) {
+static inline BasicType decode_signature_char(int ch) {
   switch (ch) {
 #define EACH_SIG(ch, bt, ignore) \
     case ch: return bt;
     SIGNATURE_TYPES_DO(EACH_SIG, ignore)
 #undef EACH_SIG
   }
-  return 0;
+  return (BasicType)0;
 }
 
 SignatureStream::SignatureStream(const Symbol* signature,
                                  bool is_method) {
   assert(!is_method || signature->starts_with(JVM_SIGNATURE_FUNC),
          "method signature required");
   _signature = signature;
   _limit = signature->utf8_length();
-  int oz = (is_method ? 1 : 0);
+  int oz = (is_method ? _s_method : _s_field);
   _state = oz;
-  assert(_state == (int)(is_method ? _s_method : _s_field), "signature state incorrectly set");
   _begin = _end = oz; // skip first '(' in method signatures
   _array_prefix = 0;  // just for definiteness
-  _previous_name = NULL;
+
+  // assigning java/lang/Object to _previous_name means we can
+  // avoid a number of NULL checks in the parser
+  _previous_name = vmSymbols::java_lang_Object();
   _names = NULL;
   next();
 }
 
 SignatureStream::~SignatureStream() {
   // decrement refcount for names created during signature parsing
+  _previous_name->decrement_refcount();
   if (_names != NULL) {
     for (int i = 0; i < _names->length(); i++) {
       _names->at(i)->decrement_refcount();
     }
-  } else if (_previous_name != NULL && !_previous_name->is_permanent()) {
-    _previous_name->decrement_refcount();
   }
 }
 
-inline int SignatureStream::scan_non_primitive(BasicType type) {
+inline int SignatureStream::scan_type(BasicType type) {
   const u1* base = _signature->bytes();
   int end = _end;
   int limit = _limit;
   const u1* tem;
   switch (type) {
   case T_OBJECT:
     tem = (const u1*) memchr(&base[end], JVM_SIGNATURE_ENDCLASS, limit - end);
-    end = (tem == NULL ? limit : tem+1 - base);
-    break;
+    return (tem == NULL ? limit : tem + 1 - base);
 
   case T_ARRAY:
     while ((end < limit) && ((char)base[end] == JVM_SIGNATURE_ARRAY)) { end++; }
     _array_prefix = end - _end;  // number of '[' chars just skipped
-    if (Signature::has_envelope(base[end++])) {
-      tem = (const u1*) memchr(&base[end], JVM_SIGNATURE_ENDCLASS, limit - end);
-      end = (tem == NULL ? limit : tem+1 - base);
-      break;
+    if (Signature::has_envelope(base[end])) {
+      tem = (const u1 *) memchr(&base[end], JVM_SIGNATURE_ENDCLASS, limit - end);
+      return (tem == NULL ? limit : tem + 1 - base);
     }
-    break;
-
-  default : ShouldNotReachHere();
+    // Skipping over a single character for a primitive type.
+    assert(is_java_primitive(decode_signature_char(base[end])), "only primitives expected");
+    return end + 1;
+
+  default:
+    // Skipping over a single character for a primitive type (or void).
+    assert(!is_reference_type(type), "only primitives or void expected");
+    return end + 1;
   }
-  return end;
 }
 
 void SignatureStream::next() {
   const Symbol* sig = _signature;
   int len = _limit;
   if (_end >= len) { set_done(); return; }
   _begin = _end;
   int ch = sig->char_at(_begin);
-  int btcode = decode_signature_char(ch);
-  if (btcode == 0) {
-    guarantee(ch == JVM_SIGNATURE_ENDFUNC, "bad signature char %c/%d", ch, ch);
+  if (ch == JVM_SIGNATURE_ENDFUNC) {
     assert(_state == _s_method, "must be in method");
     _state = _s_method_return;
     _begin = ++_end;
     if (_end >= len) { set_done(); return; }
     ch = sig->char_at(_begin);
-    btcode = decode_signature_char(ch);
   }
-  BasicType bt = (BasicType) btcode;
+  BasicType bt = decode_signature_char(ch);
   assert(ch == type2char(bt), "bad signature char %c/%d", ch, ch);
   _type = bt;
-  if (!is_reference_type(bt)) {
-    // Skip over a single character for a primitive type (or void).
-    _end++;
-    return;
-  }
-  _end = scan_non_primitive(bt);
+  _end = scan_type(bt);
 }
 
-int SignatureStream::skip_array_prefix(int max_skip_length) {
-  if (_type != T_ARRAY) {
-    return 0;
-  }
-  if (_array_prefix > max_skip_length) {
-    // strip some but not all levels of T_ARRAY
-    _array_prefix -= max_skip_length;
-    _begin += max_skip_length;
-    return max_skip_length;
-  }
+int SignatureStream::skip_whole_array_prefix() {
+  assert(_type == T_ARRAY, "must be");
+
   // we are stripping all levels of T_ARRAY,
   // so we must decode the next character
   int whole_array_prefix = _array_prefix;
   int new_begin = _begin + whole_array_prefix;
   _begin = new_begin;
   int ch = _signature->char_at(new_begin);
-  int btcode = decode_signature_char(ch);
-  BasicType bt = (BasicType) btcode;
+  BasicType bt = decode_signature_char(ch);
   assert(ch == type2char(bt), "bad signature char %c/%d", ch, ch);
   _type = bt;
   assert(bt != T_VOID && bt != T_ARRAY, "bad signature type");
-  // Don't bother to call scan_non_primitive, since it won't
-  // change the value of _end.
+  // Don't bother to re-scan, since it won't change the value of _end.
   return whole_array_prefix;
 }
 
 bool Signature::is_valid_array_signature(const Symbol* sig) {
   assert(sig->utf8_length() > 1, "this should already have been checked");
@@ -315,13 +301,13 @@
   }
   return false;
 }
 
 BasicType Signature::basic_type(int ch) {
-  int btcode = decode_signature_char(ch);
+  BasicType btcode = decode_signature_char(ch);
   if (btcode == 0)  return T_ILLEGAL;
-  return (BasicType) btcode;
+  return btcode;
 }
 
 static const int jl_len = 10, object_len = 6, jl_object_len = jl_len + object_len;
 static const char jl_str[] = "java/lang/";
 
@@ -363,40 +349,35 @@
       return vmSymbols::java_lang_Object();
     }
   }
 
   Symbol* name = _previous_name;
-  if (name != NULL && name->equals(symbol_chars, len)) {
+  if (name->equals(symbol_chars, len)) {
     return name;
   }
 
   // Save names for cleaning up reference count at the end of
   // SignatureStream scope.
   name = SymbolTable::new_symbol(symbol_chars, len);
 
   // Only allocate the GrowableArray for the _names buffer if more than
   // one name is being processed in the signature.
-  if (_previous_name != NULL &&
-      !_previous_name->is_permanent() &&
-      !name->is_permanent() &&
-      _names == NULL) {
-    _names =  new GrowableArray<Symbol*>(10);
-    _names->push(_previous_name);
-  }
-  if (!name->is_permanent() && _previous_name != NULL) {
+  if (!_previous_name->is_permanent()) {
     if (_names == NULL) {
       _names = new GrowableArray<Symbol*>(10);
     }
-    _names->push(name);  // save new symbol for decrementing later
+    _names->push(_previous_name);
   }
   _previous_name = name;
   return name;
 }
 
 Klass* SignatureStream::as_klass(Handle class_loader, Handle protection_domain,
                                  FailureMode failure_mode, TRAPS) {
-  if (!is_reference())  return NULL;
+  if (!is_reference()) {
+    return NULL;
+  }
   Symbol* name = as_symbol();
   Klass* k = NULL;
   if (failure_mode == ReturnNull) {
     // Note:  SD::resolve_or_null returns NULL for most failure modes,
     // but not all.  Circularity errors, invalid PDs, etc., throw.
@@ -420,23 +401,72 @@
   return k;
 }
 
 oop SignatureStream::as_java_mirror(Handle class_loader, Handle protection_domain,
                                     FailureMode failure_mode, TRAPS) {
-  if (!is_reference())
+  if (!is_reference()) {
     return Universe::java_mirror(type());
+  }
   Klass* klass = as_klass(class_loader, protection_domain, failure_mode, CHECK_NULL);
-  if (klass == NULL)  return NULL;
+  if (klass == NULL) {
+    return NULL;
+  }
   return klass->java_mirror();
 }
 
 void SignatureStream::skip_to_return_type() {
   while (!at_return_type()) {
     next();
   }
 }
 
+ResolvingSignatureStream::ResolvingSignatureStream(Symbol* signature,
+                                                   Handle class_loader,
+                                                   Handle protection_domain,
+                                                   bool is_method)
+  : SignatureStream(signature, is_method),
+    _class_loader(class_loader), _protection_domain(protection_domain)
+{
+  initialize_load_origin(NULL);
+}
+
+ResolvingSignatureStream::ResolvingSignatureStream(Symbol* signature, Klass* load_origin, bool is_method)
+  : SignatureStream(signature, is_method)
+{
+  assert(load_origin != NULL, "");
+  initialize_load_origin(load_origin);
+}
+
+ResolvingSignatureStream::ResolvingSignatureStream(const Method* method)
+  : SignatureStream(method->signature(), true)
+{
+  initialize_load_origin(method->method_holder());
+}
+
+ResolvingSignatureStream::ResolvingSignatureStream(fieldDescriptor& field)
+  : SignatureStream(field.signature(), false)
+{
+  initialize_load_origin(field.field_holder());
+}
+
+void ResolvingSignatureStream::cache_handles(TRAPS) {
+  assert(_load_origin != NULL, "");
+  _class_loader = Handle(THREAD, _load_origin->class_loader());
+  _protection_domain = Handle(THREAD, _load_origin->protection_domain());
+}
+
+Klass* ResolvingSignatureStream::as_klass_if_loaded(TRAPS) {
+  Klass* klass = as_klass(CachedOrNull, THREAD);
+  // SD::find does not trigger loading, so there should be no throws
+  // Still, bad things can happen, so we CHECK_NULL and ask callers
+  // to do likewise.
+  if (HAS_PENDING_EXCEPTION) {
+    CLEAR_PENDING_EXCEPTION;
+  }
+  return klass;
+}
+
 #ifdef ASSERT
 
 extern bool signature_constants_sane(); // called from basic_types_init()
 
 bool signature_constants_sane() {
