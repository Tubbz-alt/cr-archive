diff a/src/hotspot/share/gc/shenandoah/shenandoahHeuristics.cpp b/src/hotspot/share/gc/shenandoah/shenandoahHeuristics.cpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahHeuristics.cpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahHeuristics.cpp
@@ -61,12 +61,10 @@
 int ShenandoahHeuristics::compare_by_alloc_seq_descending(RegionData a, RegionData b) {
   return -compare_by_alloc_seq_ascending(a, b);
 }
 
 ShenandoahHeuristics::ShenandoahHeuristics() :
-  _update_refs_early(false),
-  _update_refs_adaptive(false),
   _region_data(NULL),
   _region_data_size(0),
   _degenerated_cycles_in_a_row(0),
   _successful_cycles_in_a_row(0),
   _bytes_in_cset(0),
@@ -75,23 +73,10 @@
   _gc_times_learned(0),
   _gc_time_penalties(0),
   _gc_time_history(new TruncatedSeq(5)),
   _metaspace_oom()
 {
-  if (strcmp(ShenandoahUpdateRefsEarly, "on") == 0 ||
-      strcmp(ShenandoahUpdateRefsEarly, "true") == 0 ) {
-    _update_refs_early = true;
-  } else if (strcmp(ShenandoahUpdateRefsEarly, "off") == 0 ||
-             strcmp(ShenandoahUpdateRefsEarly, "false") == 0 ) {
-    _update_refs_early = false;
-  } else if (strcmp(ShenandoahUpdateRefsEarly, "adaptive") == 0) {
-    _update_refs_adaptive = true;
-    _update_refs_early = true;
-  } else {
-    vm_exit_during_initialization("Unknown -XX:ShenandoahUpdateRefsEarly option: %s", ShenandoahUpdateRefsEarly);
-  }
-
   // No unloading during concurrent mark? Communicate that to heuristics
   if (!ClassUnloadingWithConcurrentMark) {
     FLAG_SET_DEFAULT(ShenandoahUnloadClassesFrequency, 0);
   }
 }
@@ -227,18 +212,10 @@
 
 void ShenandoahHeuristics::record_cycle_end() {
   _last_cycle_end = os::elapsedTime();
 }
 
-void ShenandoahHeuristics::record_phase_time(ShenandoahPhaseTimings::Phase phase, double secs) {
-  // Do nothing
-}
-
-bool ShenandoahHeuristics::should_start_update_refs() {
-  return _update_refs_early;
-}
-
 bool ShenandoahHeuristics::should_start_gc() const {
   // Perform GC to cleanup metaspace
   if (has_metaspace_oom()) {
     // Some of vmTestbase/metaspace tests depend on following line to count GC cycles
     log_info(gc)("Trigger: %s", GCCause::to_string(GCCause::_metadata_GC_threshold));
@@ -259,29 +236,49 @@
 
 bool ShenandoahHeuristics::should_degenerate_cycle() {
   return _degenerated_cycles_in_a_row <= ShenandoahFullGCThreshold;
 }
 
+void ShenandoahHeuristics::adjust_penalty(intx step) {
+  assert(0 <= _gc_time_penalties && _gc_time_penalties <= 100,
+          "In range before adjustment: " INTX_FORMAT, _gc_time_penalties);
+
+  intx new_val = _gc_time_penalties + step;
+  if (new_val < 0) {
+    new_val = 0;
+  }
+  if (new_val > 100) {
+    new_val = 100;
+  }
+  _gc_time_penalties = new_val;
+
+  assert(0 <= _gc_time_penalties && _gc_time_penalties <= 100,
+          "In range after adjustment: " INTX_FORMAT, _gc_time_penalties);
+}
+
 void ShenandoahHeuristics::record_success_concurrent() {
   _degenerated_cycles_in_a_row = 0;
   _successful_cycles_in_a_row++;
 
   _gc_time_history->add(time_since_last_gc());
   _gc_times_learned++;
-  _gc_time_penalties -= MIN2<size_t>(_gc_time_penalties, Concurrent_Adjust);
+
+  adjust_penalty(Concurrent_Adjust);
 }
 
 void ShenandoahHeuristics::record_success_degenerated() {
   _degenerated_cycles_in_a_row++;
   _successful_cycles_in_a_row = 0;
-  _gc_time_penalties += Degenerated_Penalty;
+
+  adjust_penalty(Degenerated_Penalty);
 }
 
 void ShenandoahHeuristics::record_success_full() {
   _degenerated_cycles_in_a_row = 0;
   _successful_cycles_in_a_row++;
-  _gc_time_penalties += Full_Penalty;
+
+  adjust_penalty(Full_Penalty);
 }
 
 void ShenandoahHeuristics::record_allocation_failure_gc() {
   _bytes_in_cset = 0;
 }
