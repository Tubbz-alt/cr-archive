diff a/src/hotspot/share/adlc/output_c.cpp b/src/hotspot/share/adlc/output_c.cpp
--- a/src/hotspot/share/adlc/output_c.cpp
+++ b/src/hotspot/share/adlc/output_c.cpp
@@ -2603,11 +2603,11 @@
   // Save current instruction's starting address (helps with relocation).
   fprintf(fp, "  cbuf.set_insts_mark();\n");
 
   // For MachConstantNodes which are ideal jump nodes, fill the jump table.
   if (inst.is_mach_constant() && inst.is_ideal_jump()) {
-    fprintf(fp, "  ra_->C->constant_table().fill_jump_table(cbuf, (MachConstantNode*) this, _index2label);\n");
+    fprintf(fp, "  ra_->C->output()->constant_table().fill_jump_table(cbuf, (MachConstantNode*) this, _index2label);\n");
   }
 
   // Output each operand's offset into the array of registers.
   inst.index_temps(fp, _globalNames);
 
@@ -2677,11 +2677,11 @@
   // Output instruction's emit prototype
   fprintf(fp, "void %sNode::eval_constant(Compile* C) {\n", inst._ident);
 
   // For ideal jump nodes, add a jump-table entry.
   if (inst.is_ideal_jump()) {
-    fprintf(fp, "  _constant = C->constant_table().add_jump_table(this);\n");
+    fprintf(fp, "  _constant = C->output()->constant_table().add_jump_table(this);\n");
   }
 
   // If user did not define an encode section,
   // provide stub that does not generate any machine code.
   if ((_encode == NULL) || (encode == NULL)) {
