diff a/src/hotspot/share/opto/divnode.cpp b/src/hotspot/share/opto/divnode.cpp
--- a/src/hotspot/share/opto/divnode.cpp
+++ b/src/hotspot/share/opto/divnode.cpp
@@ -32,10 +32,11 @@
 #include "opto/movenode.hpp"
 #include "opto/matcher.hpp"
 #include "opto/mulnode.hpp"
 #include "opto/phaseX.hpp"
 #include "opto/subnode.hpp"
+#include "utilities/powerOfTwo.hpp"
 
 // Portions of code courtesy of Clifford Click
 
 // Optimization - Graph Style
 
@@ -357,11 +358,11 @@
     // division by +/- 1
     if (!d_pos) {
       // Just negate the value
       q = new SubLNode(phase->longcon(0), dividend);
     }
-  } else if ( is_power_of_2_long(d) ) {
+  } else if ( is_power_of_2(d) ) {
 
     // division by +/- a power of 2
 
     // See if we can simply do a shift without rounding
     bool needs_rounding = true;
@@ -375,11 +376,11 @@
       // An AND mask of sufficient size clears the low bits and
       // I can avoid rounding.
       const TypeLong *andconl_t = phase->type( dividend->in(2) )->isa_long();
       if( andconl_t && andconl_t->is_con() ) {
         jlong andconl = andconl_t->get_con();
-        if( andconl < 0 && is_power_of_2_long(-andconl) && (-andconl) >= d ) {
+        if( andconl < 0 && is_power_of_2(-andconl) && (-andconl) >= d ) {
           if( (-andconl) == d ) // Remove AND if it clears bits which will be shifted
             dividend = dividend->in(1);
           needs_rounding = false;
         }
       }
@@ -1042,11 +1043,11 @@
   jlong con = tl->get_con();
 
   Node *hook = new Node(1);
 
   // Expand mod
-  if( con >= 0 && con < max_jlong && is_power_of_2_long(con+1) ) {
+  if( con >= 0 && con < max_jlong && is_power_of_2(con+1) ) {
     uint k = exact_log2_long(con+1);  // Extract k
 
     // Basic algorithm by David Detlefs.  See fastmod_long.java for gory details.
     // Used to help a popular random number generator which does a long-mod
     // of 2^31-1 and shows up in SpecJBB and SciMark.
@@ -1106,11 +1107,11 @@
   if( pos_con == 1 ) return new ConLNode(TypeLong::ZERO);
 
   int log2_con = -1;
 
   // If this is a power of two, then maybe we can mask it
-  if( is_power_of_2_long(pos_con) ) {
+  if( is_power_of_2(pos_con) ) {
     log2_con = exact_log2_long(pos_con);
 
     const Type *dt = phase->type(in(1));
     const TypeLong *dtl = dt->isa_long();
 
