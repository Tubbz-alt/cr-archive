diff a/src/hotspot/share/compiler/compileBroker.cpp b/src/hotspot/share/compiler/compileBroker.cpp
--- a/src/hotspot/share/compiler/compileBroker.cpp
+++ b/src/hotspot/share/compiler/compileBroker.cpp
@@ -1326,10 +1326,11 @@
   }
 
   // do the compilation
   if (method->is_native()) {
     if (!PreferInterpreterNativeStubs || method->is_method_handle_intrinsic()) {
+#if defined(X86) && !defined(ZERO)
       // The following native methods:
       //
       // java.lang.Float.intBitsToFloat
       // java.lang.Float.floatToRawIntBits
       // java.lang.Double.longBitsToDouble
@@ -1347,10 +1348,11 @@
           (UseSSE >= 2 &&
            (method->intrinsic_id() == vmIntrinsics::_longBitsToDouble ||
             method->intrinsic_id() == vmIntrinsics::_doubleToRawLongBits))) {
         return NULL;
       }
+#endif // X86 && !ZERO
 
       // To properly handle the appendix argument for out-of-line calls we are using a small trampoline that
       // pops off the appendix argument and jumps to the target (see gen_special_dispatch in SharedRuntime).
       //
       // Since normal compiled-to-compiled calls are not able to handle such a thing we MUST generate an adapter
