diff a/src/hotspot/share/compiler/tieredThresholdPolicy.cpp b/src/hotspot/share/compiler/tieredThresholdPolicy.cpp
--- a/src/hotspot/share/compiler/tieredThresholdPolicy.cpp
+++ b/src/hotspot/share/compiler/tieredThresholdPolicy.cpp
@@ -377,27 +377,21 @@
 
 CompLevel TieredThresholdPolicy::initial_compile_level(const methodHandle& method) {
   return limit_level(initial_compile_level_helper(method));
 }
 
-void TieredThresholdPolicy::set_carry_if_necessary(InvocationCounter *counter) {
-  if (!counter->carry() && counter->count() > InvocationCounter::count_limit / 2) {
-    counter->set_carry_flag();
-  }
-}
-
 // Set carry flags on the counters if necessary
 void TieredThresholdPolicy::handle_counter_overflow(Method* method) {
   MethodCounters *mcs = method->method_counters();
   if (mcs != NULL) {
-    set_carry_if_necessary(mcs->invocation_counter());
-    set_carry_if_necessary(mcs->backedge_counter());
+    mcs->invocation_counter()->set_carry_on_overflow();
+    mcs->backedge_counter()->set_carry_on_overflow();
   }
   MethodData* mdo = method->method_data();
   if (mdo != NULL) {
-    set_carry_if_necessary(mdo->invocation_counter());
-    set_carry_if_necessary(mdo->backedge_counter());
+    mdo->invocation_counter()->set_carry_on_overflow();
+    mdo->backedge_counter()->set_carry_on_overflow();
   }
 }
 
 // Called with the queue locked and with at least one element
 CompileTask* TieredThresholdPolicy::select_task(CompileQueue* compile_queue) {
