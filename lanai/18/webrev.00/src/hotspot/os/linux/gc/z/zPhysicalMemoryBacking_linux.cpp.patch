diff a/src/hotspot/os/linux/gc/z/zPhysicalMemoryBacking_linux.cpp b/src/hotspot/os/linux/gc/z/zPhysicalMemoryBacking_linux.cpp
--- a/src/hotspot/os/linux/gc/z/zPhysicalMemoryBacking_linux.cpp
+++ b/src/hotspot/os/linux/gc/z/zPhysicalMemoryBacking_linux.cpp
@@ -135,20 +135,16 @@
 
   _filesystem = buf.f_type;
   _block_size = buf.f_bsize;
   _available = buf.f_bavail * _block_size;
 
-  // Make sure we're on a supported filesystem
-  if (!is_tmpfs() && !is_hugetlbfs()) {
-    log_error(gc)("Backing file must be located on a %s or a %s filesystem",
-                  ZFILESYSTEM_TMPFS, ZFILESYSTEM_HUGETLBFS);
-    return;
-  }
+  log_info(gc, init)("Heap Backing Filesystem: %s (0x" UINT64_FORMAT_X ")",
+                     is_tmpfs() ? ZFILESYSTEM_TMPFS : is_hugetlbfs() ? ZFILESYSTEM_HUGETLBFS : "other", _filesystem);
 
   // Make sure the filesystem type matches requested large page type
   if (ZLargePages::is_transparent() && !is_tmpfs()) {
-    log_error(gc)("-XX:+UseTransparentHugePages can only be enable when using a %s filesystem",
+    log_error(gc)("-XX:+UseTransparentHugePages can only be enabled when using a %s filesystem",
                   ZFILESYSTEM_TMPFS);
     return;
   }
 
   if (ZLargePages::is_transparent() && !tmpfs_supports_transparent_huge_pages()) {
@@ -167,14 +163,26 @@
     log_error(gc)("-XX:+UseLargePages must be enabled when using a %s filesystem",
                   ZFILESYSTEM_HUGETLBFS);
     return;
   }
 
-  const size_t expected_block_size = is_tmpfs() ? os::vm_page_size() : os::large_page_size();
-  if (expected_block_size != _block_size) {
+  if (ZLargePages::is_explicit() && os::large_page_size() != ZGranuleSize) {
+    log_error(gc)("Incompatible large page size configured " SIZE_FORMAT " (expected " SIZE_FORMAT ")",
+                  os::large_page_size(), ZGranuleSize);
+    return;
+  }
+
+  // Make sure the filesystem block size is compatible
+  if (ZGranuleSize % _block_size != 0) {
+    log_error(gc)("Filesystem backing the heap has incompatible block size (" SIZE_FORMAT ")",
+                  _block_size);
+    return;
+  }
+
+  if (is_hugetlbfs() && _block_size != ZGranuleSize) {
     log_error(gc)("%s filesystem has unexpected block size " SIZE_FORMAT " (expected " SIZE_FORMAT ")",
-                  is_tmpfs() ? ZFILESYSTEM_TMPFS : ZFILESYSTEM_HUGETLBFS, _block_size, expected_block_size);
+                  ZFILESYSTEM_HUGETLBFS, _block_size, ZGranuleSize);
     return;
   }
 
   // Successfully initialized
   _initialized = true;
@@ -193,11 +201,11 @@
     log_debug(gc, init)("Failed to create memfd file (%s)",
                         ((ZLargePages::is_explicit() && err == EINVAL) ? "Hugepages not supported" : err.to_string()));
     return -1;
   }
 
-  log_info(gc, init)("Heap backed by file: /memfd:%s", filename);
+  log_info(gc, init)("Heap Backing File: /memfd:%s", filename);
 
   return fd;
 }
 
 int ZPhysicalMemoryBacking::create_file_fd(const char* name) const {
@@ -229,11 +237,11 @@
       ZErrno err;
       log_error(gc)("Failed to determine inode number for anonymous file (%s)", err.to_string());
       return -1;
     }
 
-    log_info(gc, init)("Heap backed by file: %s/#" UINT64_FORMAT, mountpoint.get(), (uint64_t)stat_buf.st_ino);
+    log_info(gc, init)("Heap Backing File: %s/#" UINT64_FORMAT, mountpoint.get(), (uint64_t)stat_buf.st_ino);
 
     return fd_anon;
   }
 
   log_debug(gc, init)("Falling back to open/unlink");
@@ -255,11 +263,11 @@
     ZErrno err;
     log_error(gc)("Failed to unlink file %s (%s)", filename, err.to_string());
     return -1;
   }
 
-  log_info(gc, init)("Heap backed by file: %s", filename);
+  log_info(gc, init)("Heap Backing File: %s", filename);
 
   return fd;
 }
 
 int ZPhysicalMemoryBacking::create_fd(const char* name) const {
