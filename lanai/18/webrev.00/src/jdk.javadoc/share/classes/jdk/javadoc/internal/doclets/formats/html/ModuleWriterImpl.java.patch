diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ModuleWriterImpl.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ModuleWriterImpl.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ModuleWriterImpl.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ModuleWriterImpl.java
@@ -44,14 +44,13 @@
 import jdk.javadoc.doclet.DocletEnvironment.ModuleMode;
 import jdk.javadoc.internal.doclets.formats.html.markup.BodyContents;
 import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;
 import jdk.javadoc.internal.doclets.formats.html.markup.Entity;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;
-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTag;
+import jdk.javadoc.internal.doclets.formats.html.markup.TagName;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;
-import jdk.javadoc.internal.doclets.formats.html.markup.Navigation;
-import jdk.javadoc.internal.doclets.formats.html.markup.Navigation.PageMode;
+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;
 import jdk.javadoc.internal.doclets.formats.html.markup.RawHtml;
 import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;
 import jdk.javadoc.internal.doclets.formats.html.markup.Table;
 import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;
 import jdk.javadoc.internal.doclets.toolkit.Content;
@@ -192,19 +191,19 @@
         navBar.setDisplaySummaryModulesLink(display(requires) || display(indirectModules));
         navBar.setDisplaySummaryPackagesLink(display(packages) || display(indirectPackages)
                 || display(indirectOpenPackages));
         navBar.setDisplaySummaryServicesLink(displayServices(uses, usesTrees) || displayServices(provides.keySet(), providesTrees));
         navBar.setUserHeader(getUserHeaderFooter(true));
-        headerContent.add(navBar.getContent(true));
-        HtmlTree div = new HtmlTree(HtmlTag.DIV);
+        headerContent.add(navBar.getContent(Navigation.Position.TOP));
+        HtmlTree div = new HtmlTree(TagName.DIV);
         div.setStyle(HtmlStyle.header);
-        Content annotationContent = new HtmlTree(HtmlTag.P);
+        Content annotationContent = new HtmlTree(TagName.P);
         addAnnotationInfo(mdle, annotationContent);
         div.add(annotationContent);
         Content label = mdle.isOpen() && (configuration.docEnv.getModuleMode() == ModuleMode.ALL)
                 ? contents.openModuleLabel : contents.moduleLabel;
-        Content tHeading = HtmlTree.HEADING(Headings.PAGE_TITLE_HEADING, true,
+        Content tHeading = HtmlTree.HEADING_TITLE(Headings.PAGE_TITLE_HEADING,
                 HtmlStyle.title, label);
         tHeading.add(Entity.NO_BREAK_SPACE);
         Content moduleHead = new RawHtml(heading);
         tHeading.add(moduleHead);
         div.add(tHeading);
@@ -216,21 +215,19 @@
     /**
      * Get the content header.
      */
     @Override
     public Content getContentHeader() {
-        HtmlTree div = new HtmlTree(HtmlTag.DIV);
-        div.setStyle(HtmlStyle.contentContainer);
-        return div;
+        return new ContentBuilder();
     }
 
     /**
      * Get the summary section header.
      */
     @Override
     public Content getSummaryHeader() {
-        HtmlTree ul = new HtmlTree(HtmlTag.UL);
+        HtmlTree ul = new HtmlTree(TagName.UL);
         ul.setStyle(HtmlStyle.blockList);
         return ul;
     }
 
     /**
@@ -256,22 +253,22 @@
         dependentModules.forEach((module, mod) -> {
             if (shouldDocument(module)) {
                 indirectModules.put(module, new StringContent(mod));
             }
         });
-        (ElementFilter.requiresIn(mdle.getDirectives())).forEach((directive) -> {
+        ElementFilter.requiresIn(mdle.getDirectives()).forEach(directive -> {
             ModuleElement m = directive.getDependency();
             if (shouldDocument(m)) {
                 if (moduleMode == ModuleMode.ALL || directive.isTransitive()) {
                     requires.put(m, new StringContent(utils.getModifiers(directive)));
-            } else {
+                } else {
                     // For api mode, just keep the public requires in dependentModules for display of
                     // indirect packages in the "Packages" section.
                     dependentModules.remove(m);
                 }
                 indirectModules.remove(m);
-        }
+            }
         });
 
         // Get all packages if module is open or if displaying concealed modules
         for (PackageElement pkg : utils.getModulePackageMap().getOrDefault(mdle, Collections.emptySet())) {
             if (shouldDocument(pkg) && (mdle.isOpen() || moduleMode == ModuleMode.ALL)) {
@@ -319,71 +316,71 @@
         }
 
         // Get all the exported and opened packages, for the transitive closure of the module, to be displayed in
         // the indirect packages tables.
         dependentModules.forEach((module, mod) -> {
-            SortedSet<PackageElement> exportPkgList = new TreeSet<>(utils.makePackageComparator());
-            (ElementFilter.exportsIn(module.getDirectives())).forEach((directive) -> {
+            SortedSet<PackageElement> exportedPackages = new TreeSet<>(utils.makePackageComparator());
+            ElementFilter.exportsIn(module.getDirectives()).forEach(directive -> {
                 PackageElement pkg = directive.getPackage();
                 if (shouldDocument(pkg)) {
                     // Qualified exports are not displayed in API mode
                     if (moduleMode == ModuleMode.ALL || directive.getTargetModules() == null) {
-                        exportPkgList.add(pkg);
+                        exportedPackages.add(pkg);
                     }
                 }
             });
             // If none of the indirect modules have exported packages to be displayed, we should not be
             // displaying the table and so it should not be added to the map.
-            if (!exportPkgList.isEmpty()) {
-                indirectPackages.put(module, exportPkgList);
+            if (!exportedPackages.isEmpty()) {
+                indirectPackages.put(module, exportedPackages);
             }
-            SortedSet<PackageElement> openPkgList = new TreeSet<>(utils.makePackageComparator());
+            SortedSet<PackageElement> openPackages = new TreeSet<>(utils.makePackageComparator());
             if (module.isOpen()) {
-                openPkgList.addAll(utils.getModulePackageMap().getOrDefault(module, Collections.emptySet()));
+                openPackages.addAll(utils.getModulePackageMap().getOrDefault(module, Collections.emptySet()));
             } else {
-                (ElementFilter.opensIn(module.getDirectives())).forEach((directive) -> {
+                ElementFilter.opensIn(module.getDirectives()).forEach(directive -> {
                     PackageElement pkg = directive.getPackage();
                     if (shouldDocument(pkg)) {
                         // Qualified opens are not displayed in API mode
                         if (moduleMode == ModuleMode.ALL || directive.getTargetModules() == null) {
-                            openPkgList.add(pkg);
+                            openPackages.add(pkg);
                         }
                     }
                 });
             }
             // If none of the indirect modules have opened packages to be displayed, we should not be
             // displaying the table and so it should not be added to the map.
-            if (!openPkgList.isEmpty()) {
-                indirectOpenPackages.put(module, openPkgList);
+            if (!openPackages.isEmpty()) {
+                indirectOpenPackages.put(module, openPackages);
             }
         });
         // Get all the services listed as uses directive.
-        (ElementFilter.usesIn(mdle.getDirectives())).forEach((directive) -> {
+        ElementFilter.usesIn(mdle.getDirectives()).forEach(directive -> {
             TypeElement u = directive.getService();
             if (shouldDocument(u)) {
                 uses.add(u);
             }
         });
         // Get all the services and implementations listed as provides directive.
-        (ElementFilter.providesIn(mdle.getDirectives())).forEach((directive) -> {
+        ElementFilter.providesIn(mdle.getDirectives()).forEach(directive -> {
             TypeElement u = directive.getService();
             if (shouldDocument(u)) {
                 List<? extends TypeElement> implList = directive.getImplementations();
                 SortedSet<TypeElement> implSet = new TreeSet<>(utils.makeAllClassesComparator());
                 implSet.addAll(implList);
                 provides.put(u, implSet);
             }
         });
         // Generate the map of all services listed using @provides, and the description.
-        (utils.getBlockTags(mdle, DocTree.Kind.PROVIDES)).forEach((tree) -> {
+        utils.getBlockTags(mdle, DocTree.Kind.PROVIDES).forEach(tree -> {
             TypeElement t = ch.getServiceType(tree);
             if (t != null) {
                 providesTrees.put(t, commentTagsToContent(tree, mdle, ch.getDescription(tree), false, true));
             }
         });
         // Generate the map of all services listed using @uses, and the description.
-        (utils.getBlockTags(mdle, DocTree.Kind.USES)).forEach((tree) -> {
+        utils.getBlockTags(mdle, DocTree.Kind.USES).forEach(tree -> {
             TypeElement t = ch.getServiceType(tree);
             if (t != null) {
                 usesTrees.put(t, commentTagsToContent(tree, mdle, ch.getDescription(tree), false, true));
             }
         });
@@ -424,11 +421,11 @@
      * the typeElements set is referenced by a javadoc tag in tagsMap.
      */
     private boolean displayServices(Set<TypeElement> typeElements,
                                     Map<TypeElement, Content> tagsMap) {
         return typeElements != null &&
-                typeElements.stream().anyMatch((v) -> displayServiceDirective(v, tagsMap));
+                typeElements.stream().anyMatch(v -> displayServiceDirective(v, tagsMap));
     }
 
     /*
      * Returns true, in API mode, if the type element is referenced
      * from a javadoc tag in tagsMap.
@@ -501,11 +498,11 @@
                         resources.getText("doclet.modules"));
                 Content caption = getTableCaption(new StringContent(text));
                 Table table = getTable3(caption, tableSummary, HtmlStyle.requiresSummary,
                             requiresTableHeader);
                 addModulesList(requires, table);
-                section.add(table.toContent());
+                section.add(table);
             }
             // Display indirect modules table in both "api" and "all" mode.
             if (display(indirectModules)) {
                 String amrText = resources.getText("doclet.Indirect_Requires_Summary");
                 String amrTableSummary = resources.getText("doclet.Member_Table_Summary",
@@ -513,11 +510,11 @@
                         resources.getText("doclet.modules"));
                 Content amrCaption = getTableCaption(new StringContent(amrText));
                 Table amrTable = getTable3(amrCaption, amrTableSummary, HtmlStyle.requiresSummary,
                             requiresTableHeader);
                 addModulesList(indirectModules, amrTable);
-                section.add(amrTable.toContent());
+                section.add(amrTable);
             }
             summaryContentTree.add(HtmlTree.LI(HtmlStyle.blockList, section));
         }
     }
 
@@ -552,18 +549,18 @@
             if (display(indirectPackages)) {
                 String aepText = resources.getText("doclet.Indirect_Exports_Summary");
                 Table aepTable = getTable2(new StringContent(aepText),
                         HtmlStyle.packagesSummary, indirectPackagesHeader);
                 addIndirectPackages(aepTable, indirectPackages);
-                section.add(aepTable.toContent());
+                section.add(aepTable);
             }
             if (display(indirectOpenPackages)) {
                 String aopText = resources.getText("doclet.Indirect_Opens_Summary");
                 Table aopTable = getTable2(new StringContent(aopText), HtmlStyle.packagesSummary,
                         indirectPackagesHeader);
                 addIndirectPackages(aopTable, indirectOpenPackages);
-                section.add(aopTable.toContent());
+                section.add(aopTable);
             }
             summaryContentTree.add(HtmlTree.LI(HtmlStyle.blockList, section));
         }
     }
 
@@ -646,11 +643,11 @@
             row.add(summary);
 
             table.addRow(pkg, row);
         }
 
-        li.add(table.toContent());
+        li.add(table);
         if (table.needsScript()) {
             mainBodyScript.append(table.getScript());
         }
     }
 
@@ -724,20 +721,20 @@
                 String label = resources.getText("doclet.Provides_Summary");
                 Table table = getTable2(new StringContent(label), HtmlStyle.providesSummary,
                         usesProvidesTableHeader);
                 addProvidesList(table);
                 if (!table.isEmpty()) {
-                    section.add(table.toContent());
+                    section.add(table);
                 }
             }
             if (haveUses){
                 String label = resources.getText("doclet.Uses_Summary");
                 Table table = getTable2(new StringContent(label), HtmlStyle.usesSummary,
                         usesProvidesTableHeader);
                 addUsesList(table);
                 if (!table.isEmpty()) {
-                    section.add(table.toContent());
+                    section.add(table);
                 }
             }
             summaryContentTree.add(HtmlTree.LI(HtmlStyle.blockList, section));
         }
     }
@@ -794,11 +791,11 @@
             } else {
                 desc.add(Entity.NO_BREAK_SPACE);
                 }
             // Only display the implementation details in the "all" mode.
             if (moduleMode == ModuleMode.ALL && !implSet.isEmpty()) {
-                desc.add(new HtmlTree(HtmlTag.BR));
+                desc.add(new HtmlTree(TagName.BR));
                 desc.add("(");
                 HtmlTree implSpan = HtmlTree.SPAN(HtmlStyle.implementationLabel, contents.implementation);
                 desc.add(implSpan);
                 desc.add(Entity.NO_BREAK_SPACE);
                 String sep = "";
@@ -820,11 +817,11 @@
      */
     public void addDeprecationInfo(Content div) {
         List<? extends DocTree> deprs = utils.getBlockTags(mdle, DocTree.Kind.DEPRECATED);
         if (utils.isDeprecated(mdle)) {
             CommentHelper ch = utils.getCommentHelper(mdle);
-            HtmlTree deprDiv = new HtmlTree(HtmlTag.DIV);
+            HtmlTree deprDiv = new HtmlTree(TagName.DIV);
             deprDiv.setStyle(HtmlStyle.deprecationBlock);
             Content deprPhrase = HtmlTree.SPAN(HtmlStyle.deprecatedLabel, getDeprecatedPhrase(mdle));
             deprDiv.add(deprPhrase);
             if (!deprs.isEmpty()) {
                 List<? extends DocTree> commentTags = ch.getDescription(deprs.get(0));
@@ -862,18 +859,18 @@
 
     @Override
     public void addModuleFooter() {
         Content htmlTree = HtmlTree.FOOTER();
         navBar.setUserFooter(getUserHeaderFooter(false));
-        htmlTree.add(navBar.getContent(false));
+        htmlTree.add(navBar.getContent(Navigation.Position.BOTTOM));
         addBottom(htmlTree);
         bodyContents.setFooter(htmlTree);
     }
 
     @Override
     public void printDocument(Content contentTree) throws DocFileIOException {
-        contentTree.add(bodyContents.toContent());
+        contentTree.add(bodyContents);
         printHtmlDocument(configuration.metakeywords.getMetaKeywordsForModule(mdle),
                 getDescription("declaration", mdle), getLocalStylesheets(mdle), contentTree);
     }
 
     /**
@@ -884,11 +881,11 @@
      */
     public void addPackageDeprecationInfo(Content li, PackageElement pkg) {
         List<? extends DocTree> deprs;
         if (utils.isDeprecated(pkg)) {
             deprs = utils.getDeprecatedTrees(pkg);
-            HtmlTree deprDiv = new HtmlTree(HtmlTag.DIV);
+            HtmlTree deprDiv = new HtmlTree(TagName.DIV);
             deprDiv.setStyle(HtmlStyle.deprecationBlock);
             Content deprPhrase = HtmlTree.SPAN(HtmlStyle.deprecatedLabel, getDeprecatedPhrase(pkg));
             deprDiv.add(deprPhrase);
             if (!deprs.isEmpty()) {
                 CommentHelper ch = utils.getCommentHelper(pkg);
