diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/IndexBuilder.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/IndexBuilder.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/IndexBuilder.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/IndexBuilder.java
@@ -24,84 +24,78 @@
  */
 
 package jdk.javadoc.internal.doclets.toolkit.util;
 
 import java.util.*;
+import java.util.stream.Collectors;
 
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ModuleElement;
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
 
-import jdk.javadoc.doclet.DocletEnvironment;
 import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;
 import jdk.javadoc.internal.doclets.toolkit.Messages;
 
 import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.*;
 
 /**
- * Build the mapping of each Unicode character with it's member lists
- * containing members names starting with it. Also build a list for all the
- * Unicode characters which start a member name. Member name is
- * classkind or field or method or constructor name.
+ *  An alphabetical index of {@link Element elements}.
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
- *
- * @see java.lang.Character
  */
 public class IndexBuilder {
 
     /**
-     * Mapping of each Unicode Character with the member list containing
-     * members with names starting with it.
+     * Sets of elements keyed by the first character of the names of the
+     * elements in those sets.
      */
-    private final Map<Character, SortedSet<Element>> indexmap;
+    private final Map<Character, SortedSet<Element>> indexMap;
 
     /**
      * Don't generate deprecated information if true.
      */
-    private boolean noDeprecated;
+    private final boolean noDeprecated;
 
     /**
-     * Build this Index only for classes?
+     * Build this index only for classes?
      */
-    private boolean classesOnly;
-
-    /**
-     * Indicates javafx mode.
-     */
-    private boolean javafx;
+    private final boolean classesOnly;
 
     private final BaseConfiguration configuration;
     private final Utils utils;
     private final Comparator<Element> comparator;
 
     /**
-     * Constructor. Build the index map.
+     * Creates a new {@code IndexBuilder}.
      *
-     * @param configuration the current configuration of the doclet.
+     * @param configuration the current configuration of the doclet
      * @param noDeprecated  true if -nodeprecated option is used,
-     *                      false otherwise.
+     *                      false otherwise
      */
-    public IndexBuilder(BaseConfiguration configuration, boolean noDeprecated) {
+    public IndexBuilder(BaseConfiguration configuration,
+                        boolean noDeprecated)
+    {
         this(configuration, noDeprecated, false);
     }
 
     /**
-     * Constructor. Build the index map.
+     * Creates a new {@code IndexBuilder}.
      *
-     * @param configuration the current configuration of the doclet.
+     * @param configuration the current configuration of the doclet
      * @param noDeprecated  true if -nodeprecated option is used,
-     *                      false otherwise.
-     * @param classesOnly   Include only classes in index.
+     *                      false otherwise
+     * @param classesOnly   include only classes in index
      */
-    public IndexBuilder(BaseConfiguration configuration, boolean noDeprecated,
-                        boolean classesOnly) {
-        this.configuration  = configuration;
+    public IndexBuilder(BaseConfiguration configuration,
+                        boolean noDeprecated,
+                        boolean classesOnly)
+    {
+        this.configuration = configuration;
         this.utils = configuration.utils;
 
         Messages messages = configuration.getMessages();
         if (classesOnly) {
             messages.notice("doclet.Building_Index_For_All_Classes");
@@ -109,158 +103,140 @@
             messages.notice("doclet.Building_Index");
         }
 
         this.noDeprecated = noDeprecated;
         this.classesOnly = classesOnly;
-        this.javafx = configuration.getOptions().javafx();
-        this.indexmap = new TreeMap<>();
+        this.indexMap = new TreeMap<>();
         comparator = classesOnly
                 ? utils.makeAllClassesComparator()
                 : utils.makeIndexUseComparator();
-        buildIndexMap(configuration.docEnv);
+        buildIndex();
     }
 
     /**
-     * Get all the members in all the Packages and all the Classes
-     * given on the command line. Form separate list of those members depending
-     * upon their names.
-     *
-     * @param docEnv the doclet environment
+     * Indexes all the members in all the packages and all the classes.
      */
-    protected void buildIndexMap(DocletEnvironment docEnv)  {
-        Set<PackageElement> packages = configuration.getSpecifiedPackageElements();
+    private void buildIndex()  {
         Set<TypeElement> classes = configuration.getIncludedTypeElements();
-        if (!classesOnly) {
-            if (packages.isEmpty()) {
-                Set<PackageElement> set = new HashSet<>();
-                for (TypeElement aClass : classes) {
-                    PackageElement pkg = utils.containingPackage(aClass);
-                    if (pkg != null && !pkg.isUnnamed()) {
-                        set.add(pkg);
-                    }
-                }
-                adjustIndexMap(set);
-            } else {
-                adjustIndexMap(packages);
-            }
+        indexElements(classes);
+        if (classesOnly) {
+            return;
         }
-        adjustIndexMap(classes);
-        if (!classesOnly) {
-            for (TypeElement aClass : classes) {
-                if (shouldAddToIndexMap(aClass)) {
-                    putMembersInIndexMap(aClass);
-                }
-            }
-            if (configuration.showModules) {
-                addModulesToIndexMap();
-            }
+        Set<PackageElement> packages = configuration.getSpecifiedPackageElements();
+        if (packages.isEmpty()) {
+            packages = classes
+                    .stream()
+                    .map(utils::containingPackage)
+                    .filter(_package -> _package != null && !_package.isUnnamed())
+                    .collect(Collectors.toSet());
+        }
+        indexElements(packages);
+        classes.stream()
+               .filter(this::shouldIndex)
+               .forEach(this::indexMembers);
+
+        if (configuration.showModules) {
+            indexModules();
         }
     }
 
     /**
-     * Put all the members(fields, methods and constructors) in the te
-     * to the indexmap.
+     * Indexes all the members (fields, methods, constructors, etc.) of the
+     * provided type element.
      *
-     * @param te TypeElement whose members will be added to the indexmap.
+     * @param te TypeElement whose members are to be indexed
      */
-    protected void putMembersInIndexMap(TypeElement te) {
+    private void indexMembers(TypeElement te) {
         VisibleMemberTable vmt = configuration.getVisibleMemberTable(te);
-        adjustIndexMap(vmt.getMembers(ANNOTATION_TYPE_FIELDS));
-        adjustIndexMap(vmt.getMembers(FIELDS));
-        adjustIndexMap(vmt.getMembers(METHODS));
-        adjustIndexMap(vmt.getMembers(CONSTRUCTORS));
-        adjustIndexMap(vmt.getMembers(ENUM_CONSTANTS));
+        indexElements(vmt.getMembers(ANNOTATION_TYPE_FIELDS));
+        indexElements(vmt.getMembers(FIELDS));
+        indexElements(vmt.getMembers(METHODS));
+        indexElements(vmt.getMembers(CONSTRUCTORS));
+        indexElements(vmt.getMembers(ENUM_CONSTANTS));
     }
 
-
     /**
-     * Adjust list of members according to their names. Check the first
-     * character in a member name, and then add the member to a list of members
-     * for that particular unicode character.
+     * Indexes the provided elements.
      *
-     * @param elements Array of members.
+     * @param elements a collection of elements
      */
-    protected void adjustIndexMap(Iterable<? extends Element> elements) {
+    private void indexElements(Iterable<? extends Element> elements) {
         for (Element element : elements) {
-            if (shouldAddToIndexMap(element)) {
+            if (shouldIndex(element)) {
                 String name = utils.isPackage(element)
-                        ? utils.getPackageName((PackageElement)element)
+                        ? utils.getPackageName((PackageElement) element)
                         : utils.getSimpleName(element);
-                char ch = (name.length() == 0) ?
-                          '*' :
-                          Character.toUpperCase(name.charAt(0));
-                Character unicode = ch;
-                SortedSet<Element> list = indexmap.computeIfAbsent(unicode,
-                        c -> new TreeSet<>(comparator));
-                list.add(element);
+                Character ch = keyCharacter(name);
+                SortedSet<Element> set = indexMap.computeIfAbsent(ch, c -> new TreeSet<>(comparator));
+                set.add(element);
             }
         }
     }
 
+    private static Character keyCharacter(String s) {
+        return s.isEmpty() ? '*' : Character.toUpperCase(s.charAt(0));
+    }
+
     /**
-     * Add all the modules to index map.
+     * Indexes all the modules.
      */
-    protected void addModulesToIndexMap() {
-        for (ModuleElement mdle : configuration.modules) {
-            String mdleName = mdle.getQualifiedName().toString();
-            char ch = (mdleName.length() == 0)
-                    ? '*'
-                    : Character.toUpperCase(mdleName.charAt(0));
-            Character unicode = ch;
-            SortedSet<Element> list = indexmap.computeIfAbsent(unicode,
-                    c -> new TreeSet<>(comparator));
-            list.add(mdle);
+    private void indexModules() {
+        for (ModuleElement m : configuration.modules) {
+            Character ch = keyCharacter(m.getQualifiedName().toString());
+            SortedSet<Element> set = indexMap.computeIfAbsent(ch, c -> new TreeSet<>(comparator));
+            set.add(m);
         }
     }
 
     /**
-     * Should this element be added to the index map?
+     * Should this element be added to the index?
      */
-    protected boolean shouldAddToIndexMap(Element element) {
+    private boolean shouldIndex(Element element) {
         if (utils.hasHiddenTag(element)) {
             return false;
         }
 
-        if (utils.isPackage(element))
+        if (utils.isPackage(element)) {
             // Do not add to index map if -nodeprecated option is set and the
             // package is marked as deprecated.
             return !(noDeprecated && configuration.utils.isDeprecated(element));
-        else
+        } else {
             // Do not add to index map if -nodeprecated option is set and if the
             // element is marked as deprecated or the containing package is marked as
             // deprecated.
             return !(noDeprecated &&
                     (configuration.utils.isDeprecated(element) ||
                     configuration.utils.isDeprecated(utils.containingPackage(element))));
+        }
     }
 
     /**
-     * Return a map of all the individual member lists with Unicode character.
+     * Returns a map representation of this index.
      *
-     * @return Map index map.
+     * @return map
      */
-    public Map<Character, SortedSet<Element>> getIndexMap() {
-        return indexmap;
+    public Map<Character, SortedSet<Element>> asMap() {
+        return indexMap;
     }
 
     /**
-     * Return the sorted list of members, for passed Unicode Character.
+     * Returns a sorted list of elements whose names start with the
+     * provided character.
      *
-     * @param index index Unicode character.
-     * @return List member list for specific Unicode character.
+     * @param key index key
+     * @return list of elements keyed by the provided character
      */
-    public List<? extends Element> getMemberList(Character index) {
-        SortedSet<Element> set = indexmap.get(index);
-        if (set == null)
+    public List<? extends Element> getMemberList(Character key) {
+        SortedSet<Element> set = indexMap.get(key);
+        if (set == null) {
             return null;
-        List<Element> out = new ArrayList<>();
-        out.addAll(set);
-        return out;
+        }
+        return new ArrayList<>(set);
     }
 
     /**
-     * Array of IndexMap keys, Unicode characters.
+     * Returns a list of index keys.
      */
-    public List<Character> index() {
-        return new ArrayList<>(indexmap.keySet());
+    public List<Character> keys() {
+        return new ArrayList<>(indexMap.keySet());
     }
 }
