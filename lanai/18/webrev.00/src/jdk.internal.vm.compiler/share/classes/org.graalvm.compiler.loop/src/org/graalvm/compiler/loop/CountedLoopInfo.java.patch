diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.loop/src/org/graalvm/compiler/loop/CountedLoopInfo.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.loop/src/org/graalvm/compiler/loop/CountedLoopInfo.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.loop/src/org/graalvm/compiler/loop/CountedLoopInfo.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.loop/src/org/graalvm/compiler/loop/CountedLoopInfo.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -43,11 +43,10 @@
 import org.graalvm.compiler.nodes.StructuredGraph;
 import org.graalvm.compiler.nodes.ValueNode;
 import org.graalvm.compiler.nodes.calc.ConditionalNode;
 import org.graalvm.compiler.nodes.calc.NegateNode;
 import org.graalvm.compiler.nodes.extended.GuardingNode;
-import org.graalvm.compiler.nodes.util.GraphUtil;
 import org.graalvm.compiler.nodes.util.IntegerHelper;
 import org.graalvm.compiler.nodes.util.SignedIntegerHelper;
 import org.graalvm.compiler.nodes.util.UnsignedIntegerHelper;
 
 import jdk.vm.ci.meta.DeoptimizationAction;
@@ -148,10 +147,11 @@
      *
      * @return false if the loop can definitely not be entered, true otherwise
      */
     public boolean loopMightBeEntered() {
         Stamp stamp = iv.valueNode().stamp(NodeView.DEFAULT);
+        StructuredGraph graph = iv.valueNode().graph();
 
         ValueNode max;
         ValueNode min;
         if (iv.direction() == Direction.Up) {
             max = end;
@@ -160,11 +160,11 @@
             assert iv.direction() == Direction.Down;
             max = iv.initNode();
             min = end;
         }
         if (oneOff) {
-            max = add(max, ConstantNode.forIntegerStamp(stamp, 1));
+            max = add(graph, max, ConstantNode.forIntegerStamp(stamp, 1), NodeView.DEFAULT);
         }
 
         LogicNode entryCheck = getCounterIntegerHelper().createCompareNode(min, max, NodeView.DEFAULT);
         if (entryCheck.isContradiction()) {
             // We can definitely not enter this loop.
@@ -303,11 +303,10 @@
             return true;
         }
         IntegerStamp endStamp = (IntegerStamp) end.stamp(NodeView.DEFAULT);
         ValueNode strideNode = iv.strideNode();
         IntegerStamp strideStamp = (IntegerStamp) strideNode.stamp(NodeView.DEFAULT);
-        GraphUtil.tryKillUnused(strideNode);
         IntegerHelper integerHelper = getCounterIntegerHelper();
         if (getDirection() == Direction.Up) {
             long max = integerHelper.maxValue();
             return integerHelper.compare(endStamp.upperBound(), max - (strideStamp.upperBound() - 1) - (oneOff ? 1 : 0)) <= 0;
         } else if (getDirection() == Direction.Down) {
