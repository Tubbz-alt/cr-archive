diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.aarch64/src/org/graalvm/compiler/lir/aarch64/AArch64ArithmeticOp.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.aarch64/src/org/graalvm/compiler/lir/aarch64/AArch64ArithmeticOp.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.aarch64/src/org/graalvm/compiler/lir/aarch64/AArch64ArithmeticOp.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.aarch64/src/org/graalvm/compiler/lir/aarch64/AArch64ArithmeticOp.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -70,15 +70,19 @@
     UREM,
     AND(LOGICAL),
     ANDS(LOGICAL),
     OR(LOGICAL),
     XOR(LOGICAL),
+    BIC,
+    ORN,
+    EON,
     SHL(SHIFT),
     LSHR(SHIFT),
     ASHR(SHIFT),
+    ROR(SHIFT),
+    RORV(SHIFT),
     ABS,
-
     FADD,
     FSUB,
     FMUL,
     FDIV,
     FREM,
@@ -231,10 +235,13 @@
                     masm.lshr(size, dst, src, b.asLong());
                     break;
                 case ASHR:
                     masm.ashr(size, dst, src, b.asLong());
                     break;
+                case ROR:
+                    masm.ror(size, dst, src, (int) b.asLong());
+                    break;
                 default:
                     throw GraalError.shouldNotReachHere("op=" + op.name());
             }
         }
     }
@@ -308,19 +315,31 @@
                     masm.or(size, dst, src1, src2);
                     break;
                 case XOR:
                     masm.eor(size, dst, src1, src2);
                     break;
+                case BIC:
+                    masm.bic(size, dst, src1, src2);
+                    break;
+                case ORN:
+                    masm.orn(size, dst, src1, src2);
+                    break;
+                case EON:
+                    masm.eon(size, dst, src1, src2);
+                    break;
                 case SHL:
                     masm.shl(size, dst, src1, src2);
                     break;
                 case LSHR:
                     masm.lshr(size, dst, src1, src2);
                     break;
                 case ASHR:
                     masm.ashr(size, dst, src1, src2);
                     break;
+                case RORV:
+                    masm.rorv(size, dst, src1, src2);
+                    break;
                 case FADD:
                     masm.fadd(size, dst, src1, src2);
                     break;
                 case FSUB:
                     masm.fsub(size, dst, src1, src2);
@@ -391,28 +410,23 @@
         @Def(REG) protected AllocatableValue result;
         @Use(REG) protected AllocatableValue src1;
         @Use(REG) protected AllocatableValue src2;
         private final AArch64MacroAssembler.ShiftType shiftType;
         private final int shiftAmt;
-        private final boolean isShiftNot;
 
         /**
-         * If shiftNot: Computes <code>result = src1 <op> ~(src2 <shiftType> <shiftAmt>)</code>
-         * (Only for logic ops). else: Computes
          * <code>result = src1 <op> src2 <shiftType> <shiftAmt></code>.
          */
         public BinaryShiftOp(AArch64ArithmeticOp op, AllocatableValue result, AllocatableValue src1, AllocatableValue src2,
-                        AArch64MacroAssembler.ShiftType shiftType, int shiftAmt, boolean isShiftNot) {
+                        AArch64MacroAssembler.ShiftType shiftType, int shiftAmt) {
             super(TYPE);
-            assert op == ADD || op == SUB || op == AND || op == OR || op == XOR;
             this.op = op;
             this.result = result;
             this.src1 = src1;
             this.src2 = src2;
             this.shiftType = shiftType;
             this.shiftAmt = shiftAmt;
-            this.isShiftNot = isShiftNot;
         }
 
         @Override
         public void emitCode(CompilationResultBuilder crb, AArch64MacroAssembler masm) {
             int size = result.getPlatformKind().getSizeInBytes() * Byte.SIZE;
@@ -422,32 +436,29 @@
                     break;
                 case SUB:
                     masm.sub(size, asRegister(result), asRegister(src1), asRegister(src2), shiftType, shiftAmt);
                     break;
                 case AND:
-                    if (!isShiftNot) {
-                        masm.and(size, asRegister(result), asRegister(src1), asRegister(src2), shiftType, shiftAmt);
-                    } else {
-                        masm.bic(size, asRegister(result), asRegister(src1), asRegister(src2), shiftType, shiftAmt);
-                    }
+                    masm.and(size, asRegister(result), asRegister(src1), asRegister(src2), shiftType, shiftAmt);
                     break;
                 case OR:
-                    if (!isShiftNot) {
-                        masm.or(size, asRegister(result), asRegister(src1), asRegister(src2), shiftType, shiftAmt);
-                    } else {
-                        masm.orn(size, asRegister(result), asRegister(src1), asRegister(src2), shiftType, shiftAmt);
-                    }
+                    masm.or(size, asRegister(result), asRegister(src1), asRegister(src2), shiftType, shiftAmt);
                     break;
                 case XOR:
-                    if (!isShiftNot) {
-                        masm.eor(size, asRegister(result), asRegister(src1), asRegister(src2), shiftType, shiftAmt);
-                    } else {
-                        masm.eon(size, asRegister(result), asRegister(src1), asRegister(src2), shiftType, shiftAmt);
-                    }
+                    masm.eor(size, asRegister(result), asRegister(src1), asRegister(src2), shiftType, shiftAmt);
+                    break;
+                case BIC:
+                    masm.bic(size, asRegister(result), asRegister(src1), asRegister(src2), shiftType, shiftAmt);
+                    break;
+                case ORN:
+                    masm.orn(size, asRegister(result), asRegister(src1), asRegister(src2), shiftType, shiftAmt);
+                    break;
+                case EON:
+                    masm.eon(size, asRegister(result), asRegister(src1), asRegister(src2), shiftType, shiftAmt);
                     break;
                 default:
-                    throw GraalError.shouldNotReachHere();
+                    throw GraalError.shouldNotReachHere("op=" + op.name());
             }
         }
     }
 
     public static class ExtendedAddShiftOp extends AArch64LIRInstruction {
