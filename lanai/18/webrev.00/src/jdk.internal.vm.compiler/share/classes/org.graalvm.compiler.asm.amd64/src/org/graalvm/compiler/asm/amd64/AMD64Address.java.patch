diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.amd64/src/org/graalvm/compiler/asm/amd64/AMD64Address.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.amd64/src/org/graalvm/compiler/asm/amd64/AMD64Address.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.amd64/src/org/graalvm/compiler/asm/amd64/AMD64Address.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.amd64/src/org/graalvm/compiler/asm/amd64/AMD64Address.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,13 +22,15 @@
  */
 
 
 package org.graalvm.compiler.asm.amd64;
 
-import jdk.vm.ci.code.Register;
-
 import org.graalvm.compiler.asm.AbstractAddress;
+import org.graalvm.compiler.debug.GraalError;
+
+import jdk.vm.ci.code.CodeUtil;
+import jdk.vm.ci.code.Register;
 
 /**
  * Represents an address in target machine memory, specified via some combination of a base
  * register, an index register, a displacement and a scale. Note that the base and index registers
  * may be a variable that will get a register assigned later by the register allocator.
@@ -124,10 +126,15 @@
         /**
          * The {@linkplain #value value} of this scale log 2.
          */
         public final int log2;
 
+        /**
+         * Creates a {@link Scale} for the scaling factor in {@code scale}.
+         *
+         * @throws IllegalArgumentException if {@code scale} is an unsupported scaling factor
+         */
         public static Scale fromInt(int scale) {
             switch (scale) {
                 case 1:
                     return Times1;
                 case 2:
@@ -135,14 +142,19 @@
                 case 4:
                     return Times4;
                 case 8:
                     return Times8;
                 default:
-                    return null;
+                    throw new IllegalArgumentException("Unsupported SIB addressing mode scaling factor: " + scale);
             }
         }
 
+        /**
+         * Creates a {@link Scale} for the log2 scaling factor {@code shift}.
+         *
+         * @throws IllegalArgumentException if {@code shift} is an unsupported scaling factor
+         */
         public static Scale fromShift(int shift) {
             switch (shift) {
                 case 0:
                     return Times1;
                 case 1:
@@ -150,13 +162,27 @@
                 case 2:
                     return Times4;
                 case 3:
                     return Times8;
                 default:
-                    return null;
+                    throw GraalError.shouldNotReachHere("Unsupported SIB addressing mode scaling factor: " + (1 << shift));
             }
         }
+
+        /**
+         * Determines if the scaling factor {@code scale} is supported.
+         */
+        public static boolean isScaleSupported(int scale) {
+            return CodeUtil.isPowerOf2(scale) && scale <= 8;
+        }
+
+        /**
+         * Determines if the log2 scaling factor {@code shift} is supported.
+         */
+        public static boolean isScaleShiftSupported(int shift) {
+            return shift >= 0 && shift <= 3;
+        }
     }
 
     @Override
     public String toString() {
         StringBuilder s = new StringBuilder();
