diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/SymbolicSnippetEncoder.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/SymbolicSnippetEncoder.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/SymbolicSnippetEncoder.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/SymbolicSnippetEncoder.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -33,18 +33,19 @@
 import static org.graalvm.compiler.nodes.graphbuilderconf.IntrinsicContext.CompilationContext.ROOT_COMPILATION_ENCODING;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
-import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
 
+import jdk.internal.vm.compiler.collections.EconomicMap;
+import jdk.internal.vm.compiler.collections.EconomicSet;
+import jdk.internal.vm.compiler.collections.MapCursor;
+import jdk.internal.vm.compiler.collections.UnmodifiableEconomicMap;
 import org.graalvm.compiler.api.replacements.Fold;
 import org.graalvm.compiler.api.replacements.MethodSubstitution;
 import org.graalvm.compiler.api.replacements.Snippet;
 import org.graalvm.compiler.api.replacements.SnippetReflectionProvider;
 import org.graalvm.compiler.api.runtime.GraalJVMCICompiler;
@@ -140,11 +141,11 @@
 
     /**
      * A mapping from the method substitution method to the original method name. The string key and
      * values are produced using {@link #methodKey(ResolvedJavaMethod)}.
      */
-    private final Map<String, String> originalMethods = new ConcurrentHashMap<>();
+    private final EconomicMap<String, String> originalMethods = EconomicMap.create();
 
     private final HotSpotReplacementsImpl originalReplacements;
 
     /**
      * The current count of graphs encoded. Used to detect when new graphs have been enqueued for
@@ -153,15 +154,15 @@
     private int encodedGraphs = 0;
 
     /**
      * All the graphs parsed so far.
      */
-    private Map<String, StructuredGraph> preparedSnippetGraphs = new HashMap<>();
+    private EconomicMap<String, StructuredGraph> preparedSnippetGraphs = EconomicMap.create();
 
-    private Set<MethodSubstitutionPlugin> knownPlugins = new HashSet<>();
+    private EconomicSet<MethodSubstitutionPlugin> knownPlugins = EconomicSet.create();
 
-    private Set<InvocationPlugin> conditionalPlugins = new HashSet<>();
+    private EconomicSet<InvocationPlugin> conditionalPlugins = EconomicSet.create();
 
     private int preparedPlugins = 0;
 
     /**
      * The invocation plugins which were delayed during graph preparation.
@@ -287,25 +288,42 @@
         snippetMethods.add(method);
         originalMethods.put(methodKey(method), originalMethodString);
         preparedSnippetGraphs.put(plugin.toString() + context, subst);
     }
 
-    static class EncodedSnippets {
-        private byte[] snippetEncoding;
-        private Object[] snippetObjects;
-        private NodeClass<?>[] snippetNodeClasses;
-        private Map<String, Integer> snippetStartOffsets;
-        private Map<String, String> originalMethods;
+    public static class EncodedSnippets {
+        private final byte[] snippetEncoding;
+        private final Object[] snippetObjects;
+        private final NodeClass<?>[] snippetNodeClasses;
+        private final UnmodifiableEconomicMap<String, Integer> snippetStartOffsets;
+        private final UnmodifiableEconomicMap<String, String> originalMethods;
 
-        EncodedSnippets(byte[] snippetEncoding, Object[] snippetObjects, NodeClass<?>[] snippetNodeClasses, Map<String, Integer> snippetStartOffsets, Map<String, String> originalMethods) {
+        EncodedSnippets(byte[] snippetEncoding, Object[] snippetObjects, NodeClass<?>[] snippetNodeClasses, UnmodifiableEconomicMap<String, Integer> snippetStartOffsets,
+                        UnmodifiableEconomicMap<String, String> originalMethods) {
             this.snippetEncoding = snippetEncoding;
             this.snippetObjects = snippetObjects;
             this.snippetNodeClasses = snippetNodeClasses;
             this.snippetStartOffsets = snippetStartOffsets;
             this.originalMethods = originalMethods;
         }
 
+        public byte[] getSnippetEncoding() {
+            return snippetEncoding;
+        }
+
+        public NodeClass<?>[] getSnippetNodeClasses() {
+            return snippetNodeClasses;
+        }
+
+        public UnmodifiableEconomicMap<String, Integer> getSnippetStartOffsets() {
+            return snippetStartOffsets;
+        }
+
+        public UnmodifiableEconomicMap<String, String> getOriginalMethods() {
+            return originalMethods;
+        }
+
         StructuredGraph getMethodSubstitutionGraph(MethodSubstitutionPlugin plugin, ResolvedJavaMethod original, ReplacementsImpl replacements, IntrinsicContext.CompilationContext context,
                         StructuredGraph.AllowAssumptions allowAssumptions, Cancellable cancellable, OptionValues options) {
             IntrinsicContext.CompilationContext contextToUse = context;
             if (context == IntrinsicContext.CompilationContext.ROOT_COMPILATION) {
                 contextToUse = IntrinsicContext.CompilationContext.ROOT_COMPILATION_ENCODING;
@@ -473,11 +491,12 @@
         SnippetReflectionProvider snippetReflection = originalProvider.getSnippetReflection();
         SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider constantReflection = new SymbolicSnippetEncoder.HotSpotSubstrateConstantReflectionProvider(
                         originalProvider.getConstantReflection());
         HotSpotProviders newProviders = new HotSpotProviders(originalProvider.getMetaAccess(), originalProvider.getCodeCache(), constantReflection,
                         originalProvider.getConstantFieldProvider(), originalProvider.getForeignCalls(), originalProvider.getLowerer(), null, originalProvider.getSuites(),
-                        originalProvider.getRegisters(), snippetReflection, originalProvider.getWordTypes(), originalProvider.getGraphBuilderPlugins(), originalProvider.getGC());
+                        originalProvider.getRegisters(), snippetReflection, originalProvider.getWordTypes(), originalProvider.getGraphBuilderPlugins(),
+                        originalProvider.getPlatformConfigurationProvider());
         HotSpotSnippetReplacementsImpl filteringReplacements = new HotSpotSnippetReplacementsImpl(newProviders, snippetReflection,
                         originalProvider.getReplacements().getDefaultReplacementBytecodeProvider(), originalProvider.getCodeCache().getTarget());
         filteringReplacements.setGraphBuilderPlugins(originalProvider.getReplacements().getGraphBuilderPlugins());
         try (DebugContext.Scope scaope = debug.scope("VerifySnippetEncodeDecode", graph)) {
             for (int i = 0; i < encodedGraph.getNumObjects(); i++) {
@@ -509,35 +528,36 @@
     /**
      * If there are new graphs waiting to be encoded, reencode all the graphs and return the result.
      */
     @SuppressWarnings("try")
     private synchronized EncodedSnippets maybeEncodeSnippets(OptionValues options) {
-        Set<MethodSubstitutionPlugin> plugins = this.knownPlugins;
+        EconomicSet<MethodSubstitutionPlugin> plugins = this.knownPlugins;
         if (preparedPlugins != plugins.size()) {
             for (MethodSubstitutionPlugin plugin : plugins) {
                 ResolvedJavaMethod original = plugin.getOriginalMethod(originalReplacements.getProviders().getMetaAccess());
                 registerMethodSubstitution(plugin, original, INLINE_AFTER_PARSING, options);
                 if (!original.isNative()) {
                     registerMethodSubstitution(plugin, original, ROOT_COMPILATION_ENCODING, options);
                 }
             }
             preparedPlugins = plugins.size();
         }
-        Map<String, StructuredGraph> graphs = this.preparedSnippetGraphs;
+        EconomicMap<String, StructuredGraph> graphs = this.preparedSnippetGraphs;
         if (encodedGraphs != graphs.size()) {
             DebugContext debug = openDebugContext("SnippetEncoder", null, options);
             try (DebugContext.Scope scope = debug.scope("SnippetSupportEncode")) {
                 encodedGraphs = graphs.size();
-                for (StructuredGraph graph : graphs.values()) {
+                for (StructuredGraph graph : graphs.getValues()) {
                     for (Node node : graph.getNodes()) {
                         node.setNodeSourcePosition(null);
                     }
                 }
                 return encodeSnippets(debug);
             }
         }
         return null;
+
     }
 
     synchronized void registerSnippet(ResolvedJavaMethod method, ResolvedJavaMethod original, Object receiver, boolean trackNodeSourcePosition, OptionValues options) {
         if (IS_BUILDING_NATIVE_IMAGE || UseEncodedGraphs.getValue(options)) {
             assert method.getAnnotation(Snippet.class) != null : "Snippet must be annotated with @" + Snippet.class.getSimpleName();
@@ -554,23 +574,24 @@
 
     }
 
     private synchronized EncodedSnippets encodeSnippets(DebugContext debug) {
         GraphEncoder encoder = new GraphEncoder(HotSpotJVMCIRuntime.runtime().getHostJVMCIBackend().getTarget().arch, debug);
-        for (StructuredGraph graph : preparedSnippetGraphs.values()) {
+        for (StructuredGraph graph : preparedSnippetGraphs.getValues()) {
             encoder.prepare(graph);
         }
         encoder.finishPrepare();
 
         byte[] snippetEncoding;
         Object[] snippetObjects;
         NodeClass<?>[] snippetNodeClasses;
-        Map<String, Integer> snippetStartOffsets;
+        EconomicMap<String, Integer> snippetStartOffsets;
 
-        snippetStartOffsets = new HashMap<>();
-        for (Map.Entry<String, StructuredGraph> entry : preparedSnippetGraphs.entrySet()) {
-            snippetStartOffsets.put(entry.getKey(), encoder.encode(entry.getValue()));
+        snippetStartOffsets = EconomicMap.create();
+        MapCursor<String, StructuredGraph> cursor = preparedSnippetGraphs.getEntries();
+        while (cursor.advance()) {
+            snippetStartOffsets.put(cursor.getKey(), encoder.encode(cursor.getValue()));
         }
         snippetEncoding = encoder.getEncoding();
         snippetObjects = encoder.getObjects();
         snippetNodeClasses = encoder.getNodeClasses();
         for (int i = 0; i < snippetObjects.length; i++) {
@@ -1112,11 +1133,11 @@
             if (targetMethod.getAnnotation(Fold.class) != null) {
                 // Always defer Fold until decode time but NodeIntrinsics may fold if they are able.
                 return false;
             }
             InvocationPlugin plugin = graphBuilderConfig.getPlugins().getInvocationPlugins().lookupInvocation(targetMethod);
-            if (conditionalPlugins.contains(plugin)) {
+            if (plugin != null && conditionalPlugins.contains(plugin)) {
                 // Because supporting arbitrary plugins in the context of encoded graphs is complex
                 // we disallow it. This limitation can be worked around through the use of method
                 // substitutions.
                 throw new GraalError("conditional plugins are unsupported in snippets and method substitutions: " + targetMethod + " " + plugin);
             }
