diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot.test/src/org/graalvm/compiler/hotspot/test/MethodSubstitutionEffectTest.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot.test/src/org/graalvm/compiler/hotspot/test/MethodSubstitutionEffectTest.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot.test/src/org/graalvm/compiler/hotspot/test/MethodSubstitutionEffectTest.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot.test/src/org/graalvm/compiler/hotspot/test/MethodSubstitutionEffectTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -32,10 +32,12 @@
 import org.graalvm.compiler.api.directives.GraalDirectives;
 import org.graalvm.compiler.api.replacements.ClassSubstitution;
 import org.graalvm.compiler.api.replacements.MethodSubstitution;
 import org.graalvm.compiler.api.test.Graal;
 import org.graalvm.compiler.core.test.GraalCompilerTest;
+import org.graalvm.compiler.debug.DebugCloseable;
+import org.graalvm.compiler.debug.DebugContext;
 import org.graalvm.compiler.debug.GraalError;
 import org.graalvm.compiler.debug.TTY;
 import org.graalvm.compiler.java.BytecodeParserOptions;
 import org.graalvm.compiler.nodes.StructuredGraph;
 import org.graalvm.compiler.nodes.StructuredGraph.AllowAssumptions;
@@ -270,34 +272,46 @@
 
     static void snippet08() {
         Substitutee.multiSplitEffectNoMerge(ValueFountain);
     }
 
-    StructuredGraph getGraph(String snippet) {
-        OptionValues options = new OptionValues(getInitialOptions(), DumpOnError, false);
+    private DebugContext getDebugContext(ResolvedJavaMethod method) {
         /*
          * We do not want to inline partial intrinsic exits in this test to test the state of the
          * self recursive call.
          */
-        options = new OptionValues(getInitialOptions(), BytecodeParserOptions.InlinePartialIntrinsicExitDuringParsing, false);
-        StructuredGraph g = parseEager(getResolvedJavaMethod(snippet), AllowAssumptions.NO, options);
+        OptionValues options = new OptionValues(getInitialOptions(), DumpOnError, false,
+                        BytecodeParserOptions.InlinePartialIntrinsicExitDuringParsing, false);
+        return getDebugContext(options, null, method);
+    }
+
+    StructuredGraph getGraph(ResolvedJavaMethod method, DebugContext debug) {
+        StructuredGraph g = parseEager(method, AllowAssumptions.NO, debug);
         Suites s = Graal.getRequiredCapability(RuntimeProvider.class).getHostBackend().getSuites().getDefaultSuites(getInitialOptions());
         s.getHighTier().apply(g, getDefaultHighTierContext());
         s.getMidTier().apply(g, getDefaultMidTierContext());
         return g;
     }
 
+    StructuredGraph getGraph(String snippet) {
+        ResolvedJavaMethod method = getResolvedJavaMethod(snippet);
+        return getGraph(method, getDebugContext(method));
+    }
+
     @Test
     public void test1() {
         getGraph("snippet01");
     }
 
     @Test
     @SuppressWarnings("try")
     public void test2() {
-        try (AutoCloseable c = new TTY.Filter()) {
-            getGraph("snippet02");
+        ResolvedJavaMethod method = getResolvedJavaMethod("snippet02");
+        try (AutoCloseable c = new TTY.Filter();
+                        DebugContext debug = getDebugContext(method);
+                        DebugCloseable s = debug.disableIntercept()) {
+            getGraph(method, debug);
             Assert.fail("Compilation should not reach this point, must throw an exception before");
         } catch (Throwable t) {
             if (t.getCause() instanceof GraalError && t.getMessage().contains("unexpected node between return StateSplit and last instruction")) {
                 return;
             }
@@ -306,12 +320,15 @@
     }
 
     @Test
     @SuppressWarnings("try")
     public void test3() {
-        try (AutoCloseable c = new TTY.Filter()) {
-            getGraph("snippet03");
+        ResolvedJavaMethod method = getResolvedJavaMethod("snippet03");
+        try (AutoCloseable c = new TTY.Filter();
+                        DebugContext debug = getDebugContext(method);
+                        DebugCloseable s = debug.disableIntercept()) {
+            getGraph(method, debug);
             Assert.fail("Compilation should not reach this point, must throw an exception before");
         } catch (Throwable t) {
             if (t.getCause() instanceof GraalError && t.getMessage().contains(" produced invalid framestate")) {
                 return;
             }
@@ -330,12 +347,15 @@
     }
 
     @Test
     @SuppressWarnings("try")
     public void test6() {
-        try (AutoCloseable c = new TTY.Filter()) {
-            getGraph("snippet06");
+        ResolvedJavaMethod method = getResolvedJavaMethod("snippet06");
+        try (AutoCloseable c = new TTY.Filter();
+                        DebugContext debug = getDebugContext(method);
+                        DebugCloseable s = debug.disableIntercept()) {
+            getGraph(method, debug);
             Assert.fail("Compilation should not reach this point, must throw an exception before");
         } catch (Throwable t) {
             if (t.getCause() instanceof GraalError && t.getMessage().contains(" produced invalid framestate")) {
                 return;
             }
@@ -369,16 +389,18 @@
         intrinisicsErrors.add(getResolvedJavaMethod(Substitutee.class, "sequentialEffectInvalidVoid"));
         intrinisicsErrors.add(getResolvedJavaMethod(Substitutee.class, "splitEffectWrong"));
         intrinisicsErrors.add(getResolvedJavaMethod(Substitutee.class, "multiSplitEffectNoMergeInvalid"));
 
         for (ResolvedJavaMethod method : intrinisicsWithoutErrors) {
-            StructuredGraph graph = getProviders().getReplacements().getIntrinsicGraph(method, INVALID_COMPILATION_ID, getDebugContext(), null);
+            StructuredGraph graph = getProviders().getReplacements().getIntrinsicGraph(method, INVALID_COMPILATION_ID, getDebugContext(method), null);
             getCode(method, graph);
         }
         for (ResolvedJavaMethod method : intrinisicsErrors) {
-            try (AutoCloseable c = new TTY.Filter()) {
-                StructuredGraph graph = getProviders().getReplacements().getIntrinsicGraph(method, INVALID_COMPILATION_ID, getDebugContext(), null);
+            try (AutoCloseable c = new TTY.Filter();
+                            DebugContext debug = getDebugContext(method);
+                            DebugCloseable s = debug.disableIntercept()) {
+                StructuredGraph graph = getProviders().getReplacements().getIntrinsicGraph(method, INVALID_COMPILATION_ID, debug, null);
                 getCode(method, graph);
                 Assert.fail("Compilation should not reach this point, must throw an exception before");
             } catch (Throwable t) {
                 if ((t.getCause() instanceof GraalError || t instanceof GraalError) && t.getMessage().contains("invalid state")) {
                     continue;
