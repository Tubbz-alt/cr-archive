diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.match.processor/src/org/graalvm/compiler/core/match/processor/MatchProcessor.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.match.processor/src/org/graalvm/compiler/core/match/processor/MatchProcessor.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.match.processor/src/org/graalvm/compiler/core/match/processor/MatchProcessor.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.match.processor/src/org/graalvm/compiler/core/match/processor/MatchProcessor.java
@@ -517,10 +517,13 @@
             out.println("import java.util.*;");
             out.println("import org.graalvm.compiler.core.match.*;");
             out.println("import org.graalvm.compiler.core.gen.NodeMatchRules;");
             out.println("import org.graalvm.compiler.graph.Position;");
             for (String p : info.requiredPackages) {
+                if (p.equals(pkg)) {
+                    continue;
+                }
                 out.println("import " + p + ".*;");
             }
             out.println("");
 
             out.println("public class " + matchStatementClassName + " implements MatchStatementSet {");
@@ -772,11 +775,11 @@
                 List<AnnotationMirror> matchableNodeAnnotations;
                 AnnotationMirror mirror = getAnnotation(element, getType(MATCHABLE_NODES_CLASS_NAME));
                 if (mirror != null) {
                     matchableNodeAnnotations = getAnnotationValueList(mirror, "value", AnnotationMirror.class);
                 } else {
-                    mirror = getAnnotation(element, getType(MATCHABLE_NODES_CLASS_NAME));
+                    mirror = getAnnotation(element, getType(MATCHABLE_NODE_CLASS_NAME));
                     if (mirror != null) {
                         matchableNodeAnnotations = Collections.singletonList(mirror);
                     } else {
                         return;
                     }
