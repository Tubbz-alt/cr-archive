diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64Assembler.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64Assembler.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64Assembler.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64Assembler.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2018, Red Hat Inc. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
@@ -80,10 +80,11 @@
 import static org.graalvm.compiler.asm.aarch64.AArch64Assembler.Instruction.FRINTZ;
 import static org.graalvm.compiler.asm.aarch64.AArch64Assembler.Instruction.FSQRT;
 import static org.graalvm.compiler.asm.aarch64.AArch64Assembler.Instruction.FSUB;
 import static org.graalvm.compiler.asm.aarch64.AArch64Assembler.Instruction.HINT;
 import static org.graalvm.compiler.asm.aarch64.AArch64Assembler.Instruction.HLT;
+import static org.graalvm.compiler.asm.aarch64.AArch64Assembler.Instruction.ISB;
 import static org.graalvm.compiler.asm.aarch64.AArch64Assembler.Instruction.LDADD;
 import static org.graalvm.compiler.asm.aarch64.AArch64Assembler.Instruction.LDAR;
 import static org.graalvm.compiler.asm.aarch64.AArch64Assembler.Instruction.LDAXR;
 import static org.graalvm.compiler.asm.aarch64.AArch64Assembler.Instruction.LDP;
 import static org.graalvm.compiler.asm.aarch64.AArch64Assembler.Instruction.LDR;
@@ -674,10 +675,11 @@
         DMB(0x000000A0),
 
         MRS(0xD5300000),
         MSR(0xD5100000),
         DC(0xD5087000),
+        ISB(0x000000C0),
 
         BLR_NATIVE(0xc0000000),
 
         ADDV(0x0e31b800);
 
@@ -2176,18 +2178,18 @@
     protected void lsr(int size, Register dst, Register src1, Register src2) {
         dataProcessing2SourceOp(LSRV, dst, src1, src2, generalFromSize(size));
     }
 
     /**
-     * dst = rotateRight(src1, (src2 & log2(size))).
+     * dst = rotateRight(src1, (src2 & (size - 1))).
      *
      * @param size register size. Has to be 32 or 64.
      * @param dst general purpose register. May not be null or stackpointer.
      * @param src1 general purpose register. May not be null or stackpointer.
      * @param src2 general purpose register. May not be null or stackpointer.
      */
-    protected void ror(int size, Register dst, Register src1, Register src2) {
+    protected void rorv(int size, Register dst, Register src1, Register src2) {
         dataProcessing2SourceOp(RORV, dst, src1, src2, generalFromSize(size));
     }
 
     /* Bit Operations (5.5.5) */
 
@@ -2987,11 +2989,12 @@
      */
     public enum BarrierKind {
         LOAD_LOAD(0x9, "ISHLD"),
         LOAD_STORE(0x9, "ISHLD"),
         STORE_STORE(0xA, "ISHST"),
-        ANY_ANY(0xB, "ISH");
+        ANY_ANY(0xB, "ISH"),
+        SYSTEM(0xF, "SYS");
 
         public final int encoding;
         public final String optionName;
 
         BarrierKind(int encoding, String optionName) {
@@ -3007,10 +3010,17 @@
      */
     public void dmb(BarrierKind barrierKind) {
         emitInt(DMB.encoding | BarrierOp | barrierKind.encoding << BarrierKindOffset);
     }
 
+    /**
+     * Instruction Synchronization Barrier.
+     */
+    public void isb() {
+        emitInt(ISB.encoding | BarrierOp | BarrierKind.SYSTEM.encoding << BarrierKindOffset);
+    }
+
     public void mrs(Register dst, SystemRegister systemRegister) {
         emitInt(MRS.encoding | systemRegister.encoding() | rt(dst));
     }
 
     public void msr(SystemRegister systemRegister, Register src) {
@@ -3025,17 +3035,60 @@
         if (codePatchingAnnotationConsumer != null) {
             codePatchingAnnotationConsumer.accept(new SingleInstructionAnnotation(pos, instruction, operandSizeBits, offsetBits, shift));
         }
     }
 
-    void annotateImmediateMovSequence(int pos, int numInstrs) {
-        if (codePatchingAnnotationConsumer != null) {
-            codePatchingAnnotationConsumer.accept(new MovSequenceAnnotation(pos, numInstrs));
+    public abstract static class PatchableCodeAnnotation extends CodeAnnotation {
+
+        PatchableCodeAnnotation(int instructionStartPosition) {
+            super(instructionStartPosition);
         }
+
+        abstract void patch(int codePos, int relative, byte[] code);
     }
 
-    public static class SingleInstructionAnnotation extends CodeAnnotation {
+    /**
+     * Contains methods used for patching instruction(s) within AArch64.
+     */
+    public static class PatcherUtil {
+        /**
+         * Method to patch a series a bytes within a byte address with a given value.
+         *
+         * @param code the array of bytes in which patch is to be performed
+         * @param codePos where in the array the patch should be performed
+         * @param value the value to be added to the series of bytes
+         * @param bitsUsed the number of bits to patch within each byte
+         * @param offsets where with the bytes the value should be added
+         */
+        public static void writeBitSequence(byte[] code, int codePos, int value, int[] bitsUsed, int[] offsets) {
+            assert bitsUsed.length == offsets.length : "bitsUsed and offsets parameter arrays do not match";
+            int curValue = value;
+            for (int i = 0; i < bitsUsed.length; i++) {
+                int usedBits = bitsUsed[i];
+                if (usedBits == 0) {
+                    continue;
+                }
+
+                int offset = offsets[i];
+                int mask = (1 << usedBits) - 1;
+
+                byte patchTarget = code[codePos + i];
+                byte patch = (byte) (((curValue & mask) << offset) & 0xFF);
+                byte retainedPatchTarget = (byte) (patchTarget & ((~(mask << offset)) & 0xFF));
+                patchTarget = (byte) (retainedPatchTarget | patch);
+                code[codePos + i] = patchTarget;
+                curValue = curValue >> usedBits;
+            }
+        }
+
+        public static int computeRelativePageDifference(int target, int curPos, int pageSize) {
+            int relative = target / pageSize - curPos / pageSize;
+            return relative;
+        }
+    }
+
+    public static class SingleInstructionAnnotation extends PatchableCodeAnnotation {
 
         /**
          * The size of the operand, in bytes.
          */
         public final int operandSizeBits;
@@ -3048,22 +3101,48 @@
             this.operandSizeBits = operandSizeBits;
             this.offsetBits = offsetBits;
             this.shift = shift;
             this.instruction = instruction;
         }
-    }
 
-    public static class MovSequenceAnnotation extends CodeAnnotation {
+        @Override
+        public String toString() {
+            return "SINGLE_INSTRUCTION";
+        }
 
-        /**
-         * The size of the operand, in bytes.
-         */
-        public final int numInstrs;
+        @Override
+        public void patch(int codePos, int relative, byte[] code) {
+            int curValue = relative;
+            assert (curValue & ((1 << shift) - 1)) == 0 : "relative offset has incorrect alignment";
+            curValue = curValue >> shift;
 
-        MovSequenceAnnotation(int instructionPosition, int numInstrs) {
-            super(instructionPosition);
-            this.numInstrs = numInstrs;
+            // right this is only BL instructions are being patched here
+            assert instruction == AArch64Assembler.Instruction.BL : "trying to patch an unexpected instruction";
+            GraalError.guarantee(NumUtil.isSignedNbit(operandSizeBits, curValue), "value too large to fit into space");
+
+            // fill in immediate operand of operandSizeBits starting at offsetBits within
+            // instruction
+            int bitsRemaining = operandSizeBits;
+            int offsetRemaining = offsetBits;
+
+            int[] bitsUsed = new int[4];
+            int[] offsets = new int[4];
+
+            for (int i = 0; i < 4; ++i) {
+                if (offsetRemaining >= 8) {
+                    offsetRemaining -= 8;
+                    continue;
+                }
+                offsets[i] = offsetRemaining;
+                // number of bits to be filled within this byte
+                int bits = Math.min(8 - offsetRemaining, bitsRemaining);
+                bitsUsed[i] = bits;
+                bitsRemaining -= bits;
+
+                offsetRemaining = 0;
+            }
+            PatcherUtil.writeBitSequence(code, instructionPosition, curValue, bitsUsed, offsets);
         }
     }
 
     /**
      * dst[0...n] = countBitCountOfEachByte(src[0...n]), n = size/8.
