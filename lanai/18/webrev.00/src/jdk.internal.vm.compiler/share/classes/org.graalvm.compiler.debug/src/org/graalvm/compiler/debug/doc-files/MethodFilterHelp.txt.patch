diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.debug/src/org/graalvm/compiler/debug/doc-files/MethodFilterHelp.txt b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.debug/src/org/graalvm/compiler/debug/doc-files/MethodFilterHelp.txt
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.debug/src/org/graalvm/compiler/debug/doc-files/MethodFilterHelp.txt
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.debug/src/org/graalvm/compiler/debug/doc-files/MethodFilterHelp.txt
@@ -1,40 +1,62 @@
-Pattern for filtering debug scope output based on method context.
-The syntax for a pattern is:
+Pattern for matching methods. The syntax for a pattern is:
 
   SourcePatterns = SourcePattern ["," SourcePatterns] .
-  SourcePattern = [ Class "." ] method [ "(" [ Parameter { ";" Parameter } ] ")" ] .
+  SourcePattern = [ "~" ] [ Class "." ] method [ "(" [ Parameter { ";" Parameter } ] ")" ] .
   Parameter = Class | "int" | "long" | "float" | "double" | "short" | "char" | "boolean" .
   Class = { package "." } class .
- 
+
 Glob pattern matching (*, ?) is allowed in all parts of the source pattern.
+The "~" prefix negates the pattern.
+
+Positive patterns are joined by an "or" operator: "A,B" matches anything
+matched by "A" or "B". Negative patterns are joined by "and not": "~A,~B"
+matches anything not matched by "A" and not matched by "B". "A,~B,~C,D"
+matches anything matched by "A" or "D" and not matched by "B" and not
+matched by "C".
+
+A set of patterns containing negative patterns but no positive ones contains
+an implicit positive "*" pattern: "~A,~B" is equivalent to "*,~A,~B".
 
 Examples of method filters:
---------- 
-  visit(Argument;BlockScope)  
-  
-  Matches all methods named "visit", with the first parameter of
-  type "Argument", and the second parameter of type "BlockScope".
+---------
+  *
+
+  Matches all methods in all classes.
+---------
+  canonical(CanonicalizerTool;LogicNode;LogicNode)
+
+  Matches all methods named "canonical", with the first parameter of type
+  "CanonicalizerTool", and the second and third parameters of type
+  "LogicNode".
   The packages of the parameter types are irrelevant.
 ---------
   arraycopy(Object;;;;)
- 
+
   Matches all methods named "arraycopy", with the first parameter
   of type "Object", and four more parameters of any type. The
   packages of the parameter types are irrelevant.
----------    
-  org.graalvm.compiler.core.graph.PostOrderNodeIterator.*
- 
-  Matches all methods in the class "org.graalvm.compiler.core.graph.PostOrderNodeIterator".
----------    
-  *
- 
-  Matches all methods in all classes
 ---------
-  org.graalvm.compiler.core.graph.*.visit
- 
-  Matches all methods named "visit" in classes in the package
-  "org.graalvm.compiler.core.graph".
+  org.graalvm.compiler.nodes.PhiNode.*
+
+  Matches all methods in the class "org.graalvm.compiler.nodes.PhiNode".
+---------
+  org.graalvm.compiler.nodes.*.canonical
+
+  Matches all methods named "canonical" in classes in the package
+  "org.graalvm.compiler.nodes".
 ---------
   arraycopy,toString
- 
-  Matches all methods named "arraycopy" or "toString", meaning that ',' acts as an or operator.
+
+  Matches all methods named "arraycopy" or "toString", meaning that ',' acts
+  as an "or" operator.
+---------
+  java.util.*.*.,~java.util.*Array*.*
+  java.util.*.*.,~*Array*.*
+
+  These patterns are equivalent and match all methods in the package
+  "java.util" except for classes that have "Array" in their name.
+---------
+  ~java.util.*.*
+
+  Matches all methods in all classes in all packages except for anything in
+  the "java.util" package.
