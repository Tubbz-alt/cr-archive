diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.virtual/src/org/graalvm/compiler/virtual/phases/ea/ReadEliminationClosure.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.virtual/src/org/graalvm/compiler/virtual/phases/ea/ReadEliminationClosure.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.virtual/src/org/graalvm/compiler/virtual/phases/ea/ReadEliminationClosure.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.virtual/src/org/graalvm/compiler/virtual/phases/ea/ReadEliminationClosure.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -54,12 +54,13 @@
 import org.graalvm.compiler.nodes.extended.RawStoreNode;
 import org.graalvm.compiler.nodes.extended.UnsafeAccessNode;
 import org.graalvm.compiler.nodes.java.AccessFieldNode;
 import org.graalvm.compiler.nodes.java.LoadFieldNode;
 import org.graalvm.compiler.nodes.java.StoreFieldNode;
-import org.graalvm.compiler.nodes.memory.MemoryCheckpoint;
+import org.graalvm.compiler.nodes.memory.MultiMemoryKill;
 import org.graalvm.compiler.nodes.memory.ReadNode;
+import org.graalvm.compiler.nodes.memory.SingleMemoryKill;
 import org.graalvm.compiler.nodes.memory.WriteNode;
 import org.graalvm.compiler.nodes.type.StampTool;
 import org.graalvm.compiler.nodes.util.GraphUtil;
 import org.graalvm.compiler.options.OptionValues;
 import org.graalvm.compiler.virtual.phases.ea.ReadEliminationBlockState.CacheEntry;
@@ -73,12 +74,12 @@
 /**
  * This closure initially handled a set of nodes that is disjunct from
  * {@link PEReadEliminationClosure}, but over time both have evolved so that there's a significant
  * overlap.
  */
-public final class ReadEliminationClosure extends EffectsClosure<ReadEliminationBlockState> {
-    private final boolean considerGuards;
+public class ReadEliminationClosure extends EffectsClosure<ReadEliminationBlockState> {
+    protected final boolean considerGuards;
 
     public ReadEliminationClosure(ControlFlowGraph cfg, boolean considerGuards) {
         super(null, cfg);
         this.considerGuards = considerGuards;
     }
@@ -92,11 +93,11 @@
     protected boolean processNode(Node node, ReadEliminationBlockState state, GraphEffectList effects, FixedWithNextNode lastFixedNode) {
         boolean deleted = false;
         if (node instanceof AccessFieldNode) {
             AccessFieldNode access = (AccessFieldNode) node;
             if (access.isVolatile()) {
-                processIdentity(state, any());
+                killReadCacheByIdentity(state, any());
             } else {
                 ValueNode object = GraphUtil.unproxify(access.object());
                 LoadCacheEntry identifier = new LoadCacheEntry(object, new FieldLocationIdentity(access.field()));
                 ValueNode cachedValue = state.getCacheEntry(identifier);
                 if (node instanceof LoadFieldNode) {
@@ -113,11 +114,12 @@
                     ValueNode value = getScalarAlias(store.value());
                     if (GraphUtil.unproxify(value) == GraphUtil.unproxify(cachedValue)) {
                         effects.deleteNode(store);
                         deleted = true;
                     }
-                    state.killReadCache(identifier.identity);
+                    // will be a field location identity not killing array accesses
+                    killReadCacheByIdentity(state, identifier.identity);
                     state.addCacheEntry(identifier, value);
                 }
             }
         } else if (node instanceof ReadNode) {
             ReadNode read = (ReadNode) node;
@@ -143,58 +145,69 @@
                 ValueNode value = getScalarAlias(write.value());
                 if (GraphUtil.unproxify(value) == GraphUtil.unproxify(cachedValue)) {
                     effects.deleteNode(write);
                     deleted = true;
                 }
-                processIdentity(state, write.getKilledLocationIdentity());
+                killReadCacheByIdentity(state, write.getKilledLocationIdentity());
                 state.addCacheEntry(identifier, value);
             } else {
-                processIdentity(state, write.getKilledLocationIdentity());
+                killReadCacheByIdentity(state, write.getKilledLocationIdentity());
             }
         } else if (node instanceof UnsafeAccessNode) {
             ResolvedJavaType type = StampTool.typeOrNull(((UnsafeAccessNode) node).object());
-            if (type != null && !type.isArray()) {
-                if (node instanceof RawLoadNode) {
-                    RawLoadNode load = (RawLoadNode) node;
-                    if (load.getLocationIdentity().isSingle()) {
-                        ValueNode object = GraphUtil.unproxify(load.object());
-                        UnsafeLoadCacheEntry identifier = new UnsafeLoadCacheEntry(object, load.offset(), load.getLocationIdentity());
-                        ValueNode cachedValue = state.getCacheEntry(identifier);
-                        if (cachedValue != null && areValuesReplaceable(load, cachedValue, considerGuards)) {
-                            effects.replaceAtUsages(load, cachedValue, load);
-                            addScalarAlias(load, cachedValue);
-                            deleted = true;
-                        } else {
-                            state.addCacheEntry(identifier, load);
-                        }
+            if (type != null) {
+                if (type.isArray()) {
+                    UnsafeAccessNode ua = (UnsafeAccessNode) node;
+                    if (node instanceof RawStoreNode) {
+                        killReadCacheByIdentity(state, ua.getLocationIdentity());
+                    } else {
+                        assert ua instanceof RawLoadNode : "Unknown UnsafeAccessNode " + ua;
                     }
                 } else {
-                    assert node instanceof RawStoreNode;
-                    RawStoreNode write = (RawStoreNode) node;
-                    if (write.getKilledLocationIdentity().isSingle()) {
-                        ValueNode object = GraphUtil.unproxify(write.object());
-                        UnsafeLoadCacheEntry identifier = new UnsafeLoadCacheEntry(object, write.offset(), write.getKilledLocationIdentity());
-                        ValueNode cachedValue = state.getCacheEntry(identifier);
-
-                        ValueNode value = getScalarAlias(write.value());
-                        if (GraphUtil.unproxify(value) == GraphUtil.unproxify(cachedValue)) {
-                            effects.deleteNode(write);
-                            deleted = true;
+                    /*
+                     * We do not know if we are writing an array or a normal object
+                     */
+                    if (node instanceof RawLoadNode) {
+                        RawLoadNode load = (RawLoadNode) node;
+                        if (load.getLocationIdentity().isSingle()) {
+                            ValueNode object = GraphUtil.unproxify(load.object());
+                            UnsafeLoadCacheEntry identifier = new UnsafeLoadCacheEntry(object, load.offset(), load.getLocationIdentity());
+                            ValueNode cachedValue = state.getCacheEntry(identifier);
+                            if (cachedValue != null && areValuesReplaceable(load, cachedValue, considerGuards)) {
+                                effects.replaceAtUsages(load, cachedValue, load);
+                                addScalarAlias(load, cachedValue);
+                                deleted = true;
+                            } else {
+                                state.addCacheEntry(identifier, load);
+                            }
                         }
-                        processIdentity(state, write.getKilledLocationIdentity());
-                        state.addCacheEntry(identifier, value);
                     } else {
-                        processIdentity(state, write.getKilledLocationIdentity());
+                        assert node instanceof RawStoreNode;
+                        RawStoreNode write = (RawStoreNode) node;
+                        if (write.getKilledLocationIdentity().isSingle()) {
+                            ValueNode object = GraphUtil.unproxify(write.object());
+                            UnsafeLoadCacheEntry identifier = new UnsafeLoadCacheEntry(object, write.offset(), write.getKilledLocationIdentity());
+                            ValueNode cachedValue = state.getCacheEntry(identifier);
+                            ValueNode value = getScalarAlias(write.value());
+                            if (GraphUtil.unproxify(value) == GraphUtil.unproxify(cachedValue)) {
+                                effects.deleteNode(write);
+                                deleted = true;
+                            }
+                            killReadCacheByIdentity(state, write.getKilledLocationIdentity());
+                            state.addCacheEntry(identifier, value);
+                        } else {
+                            killReadCacheByIdentity(state, write.getKilledLocationIdentity());
+                        }
                     }
                 }
             }
-        } else if (node instanceof MemoryCheckpoint.Single) {
-            LocationIdentity identity = ((MemoryCheckpoint.Single) node).getKilledLocationIdentity();
-            processIdentity(state, identity);
-        } else if (node instanceof MemoryCheckpoint.Multi) {
-            for (LocationIdentity identity : ((MemoryCheckpoint.Multi) node).getKilledLocationIdentities()) {
-                processIdentity(state, identity);
+        } else if (node instanceof SingleMemoryKill) {
+            LocationIdentity identity = ((SingleMemoryKill) node).getKilledLocationIdentity();
+            killReadCacheByIdentity(state, identity);
+        } else if (node instanceof MultiMemoryKill) {
+            for (LocationIdentity identity : ((MultiMemoryKill) node).getKilledLocationIdentities()) {
+                killReadCacheByIdentity(state, identity);
             }
         }
         return deleted;
     }
 
@@ -209,16 +222,12 @@
             return guardedNode.getGuard();
         }
         return null;
     }
 
-    private static void processIdentity(ReadEliminationBlockState state, LocationIdentity identity) {
-        if (identity.isAny()) {
-            state.killReadCache();
-            return;
-        }
-        state.killReadCache(identity);
+    private static void killReadCacheByIdentity(ReadEliminationBlockState state, LocationIdentity identity) {
+        state.killReadCache(identity, null, null);
     }
 
     @Override
     protected void processLoopExit(LoopExitNode exitNode, ReadEliminationBlockState initialState, ReadEliminationBlockState exitState, GraphEffectList effects) {
         if (exitNode.graph().hasValueProxies()) {
