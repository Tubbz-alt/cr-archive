diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/LIRIntrospection.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/LIRIntrospection.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/LIRIntrospection.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/LIRIntrospection.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -31,11 +31,13 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.EnumSet;
+import java.util.List;
 
 import jdk.internal.vm.compiler.collections.EconomicMap;
 import jdk.internal.vm.compiler.collections.Equivalence;
 import jdk.internal.vm.compiler.collections.MapCursor;
 import org.graalvm.compiler.core.common.FieldIntrospection;
@@ -59,28 +61,37 @@
 
     LIRIntrospection(Class<T> clazz) {
         super(clazz);
     }
 
-    protected static class Values extends Fields {
+    protected static final class Values extends Fields {
         private final int directCount;
         private final EnumSet<OperandFlag>[] flags;
 
-        public Values(OperandModeAnnotation mode) {
-            this(mode.directCount, mode.values);
-        }
+        private static final Values EMPTY_VALUES = new Values(0, Collections.emptyList());
 
         @SuppressWarnings({"unchecked"})
-        public Values(int directCount, ArrayList<ValueFieldInfo> fields) {
+        private Values(int directCount, List<ValueFieldInfo> fields) {
             super(fields);
             this.directCount = directCount;
             flags = (EnumSet<OperandFlag>[]) new EnumSet<?>[fields.size()];
             for (int i = 0; i < fields.size(); i++) {
                 flags[i] = fields.get(i).flags;
             }
         }
 
+        public static Values create(int directCount, ArrayList<ValueFieldInfo> fields) {
+            if (directCount == 0 && fields.size() == 0) {
+                return EMPTY_VALUES;
+            }
+            return new Values(directCount, fields);
+        }
+
+        public static Values create(OperandModeAnnotation mode) {
+            return create(mode.directCount, mode.values);
+        }
+
         public int getDirectCount() {
             return directCount;
         }
 
         public EnumSet<OperandFlag> getFlags(int i) {
