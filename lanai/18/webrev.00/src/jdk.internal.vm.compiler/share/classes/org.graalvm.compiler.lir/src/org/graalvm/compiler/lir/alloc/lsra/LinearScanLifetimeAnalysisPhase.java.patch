diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/alloc/lsra/LinearScanLifetimeAnalysisPhase.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/alloc/lsra/LinearScanLifetimeAnalysisPhase.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/alloc/lsra/LinearScanLifetimeAnalysisPhase.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/alloc/lsra/LinearScanLifetimeAnalysisPhase.java
@@ -46,10 +46,11 @@
 import org.graalvm.compiler.core.common.util.BitMap2D;
 import org.graalvm.compiler.debug.Assertions;
 import org.graalvm.compiler.debug.DebugContext;
 import org.graalvm.compiler.debug.GraalError;
 import org.graalvm.compiler.debug.Indent;
+import org.graalvm.compiler.lir.InstructionStateProcedure;
 import org.graalvm.compiler.lir.InstructionValueConsumer;
 import org.graalvm.compiler.lir.LIRInstruction;
 import org.graalvm.compiler.lir.LIRInstruction.OperandFlag;
 import org.graalvm.compiler.lir.LIRInstruction.OperandMode;
 import org.graalvm.compiler.lir.StandardOp.LoadConstantOp;
@@ -68,10 +69,11 @@
 import jdk.vm.ci.meta.AllocatableValue;
 import jdk.vm.ci.meta.Constant;
 import jdk.vm.ci.meta.JavaConstant;
 import jdk.vm.ci.meta.Value;
 import jdk.vm.ci.meta.ValueKind;
+import org.graalvm.compiler.lir.util.IndexedValueMap;
 
 public class LinearScanLifetimeAnalysisPhase extends LinearScanAllocationPhase {
 
     protected final LinearScan allocator;
     protected final DebugContext debug;
@@ -747,17 +749,39 @@
                     addUse((AllocatableValue) operand, blockFrom, opId, p, operand.getValueKind(), detailedAsserts);
                     addRegisterHint(op, operand, mode, flags, false);
                 }
             };
 
-            InstructionValueConsumer stateProc = (op, operand, mode, flags) -> {
+            InstructionValueConsumer nonBasePointersStateProc = (op, operand, mode, flags) -> {
                 if (LinearScan.isVariableOrRegister(operand)) {
                     int opId = op.id();
                     int blockFrom = allocator.getFirstLirInstructionId((allocator.blockForId(opId)));
                     addUse((AllocatableValue) operand, blockFrom, opId + 1, RegisterPriority.None, operand.getValueKind(), detailedAsserts);
                 }
             };
+            InstructionValueConsumer basePointerStateProc = (op, operand, mode, flags) -> {
+                if (LinearScan.isVariableOrRegister(operand)) {
+                    int opId = op.id();
+                    int blockFrom = allocator.getFirstLirInstructionId((allocator.blockForId(opId)));
+                    /*
+                     * Setting priority of base pointers to ShouldHaveRegister to avoid
+                     * rematerialization (see #getMaterializedValue).
+                     */
+                    addUse((AllocatableValue) operand, blockFrom, opId + 1, RegisterPriority.ShouldHaveRegister, operand.getValueKind(), detailedAsserts);
+                }
+            };
+
+            InstructionStateProcedure stateProc = (op, state) -> {
+                IndexedValueMap liveBasePointers = state.getLiveBasePointers();
+                // temporarily unset the base pointers to that the procedure will not visit them
+                state.setLiveBasePointers(null);
+                state.visitEachState(op, nonBasePointersStateProc);
+                // visit the base pointers explicitly
+                liveBasePointers.visitEach(op, OperandMode.ALIVE, null, basePointerStateProc);
+                // reset the base pointers
+                state.setLiveBasePointers(liveBasePointers);
+            };
 
             // create a list with all caller-save registers (cpu, fpu, xmm)
             RegisterArray callerSaveRegs = allocator.getRegisterAllocationConfig().getRegisterConfig().getCallerSaveRegisters();
 
             // iterate all blocks in reverse order
@@ -826,11 +850,11 @@
                              * Add uses of live locals from interpreter's point of view for proper
                              * debug information generation. Treat these operands as temp values (if
                              * the live range is extended to a call site, the value would be in a
                              * register at the call otherwise).
                              */
-                            op.visitEachState(stateProc);
+                            op.forEachState(stateProc);
 
                             // special steps for some instructions (especially moves)
                             handleMethodArguments(op);
 
                         }
