diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/MemoryProxyNode.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/MemoryProxyNode.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/MemoryProxyNode.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/MemoryProxyNode.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -26,28 +26,29 @@
 
 import org.graalvm.compiler.core.common.type.StampFactory;
 import org.graalvm.compiler.graph.NodeClass;
 import org.graalvm.compiler.nodeinfo.InputType;
 import org.graalvm.compiler.nodeinfo.NodeInfo;
-import org.graalvm.compiler.nodes.memory.MemoryNode;
+import org.graalvm.compiler.nodes.memory.MemoryKill;
 import org.graalvm.compiler.nodes.memory.MemoryPhiNode;
+import org.graalvm.compiler.nodes.memory.SingleMemoryKill;
 import jdk.internal.vm.compiler.word.LocationIdentity;
 
 @NodeInfo(allowedUsageTypes = {InputType.Memory}, nameTemplate = "MemoryProxy({i#value})")
-public final class MemoryProxyNode extends ProxyNode implements MemoryNode {
+public final class MemoryProxyNode extends ProxyNode implements SingleMemoryKill {
 
     public static final NodeClass<MemoryProxyNode> TYPE = NodeClass.create(MemoryProxyNode.class);
-    @OptionalInput(InputType.Memory) MemoryNode value;
+    @OptionalInput(InputType.Memory) MemoryKill value;
     protected final LocationIdentity locationIdentity;
 
-    public MemoryProxyNode(MemoryNode value, LoopExitNode proxyPoint, LocationIdentity locationIdentity) {
+    public MemoryProxyNode(MemoryKill value, LoopExitNode proxyPoint, LocationIdentity locationIdentity) {
         super(TYPE, StampFactory.forVoid(), proxyPoint);
         this.value = value;
         this.locationIdentity = locationIdentity;
     }
 
-    public void setValue(MemoryNode newValue) {
+    public void setValue(MemoryKill newValue) {
         this.updateUsages(value.asNode(), newValue.asNode());
         this.value = newValue;
     }
 
     @Override
@@ -57,6 +58,11 @@
 
     @Override
     public PhiNode createPhi(AbstractMergeNode merge) {
         return graph().addWithoutUnique(new MemoryPhiNode(merge, locationIdentity));
     }
+
+    @Override
+    public LocationIdentity getKilledLocationIdentity() {
+        return locationIdentity;
+    }
 }
