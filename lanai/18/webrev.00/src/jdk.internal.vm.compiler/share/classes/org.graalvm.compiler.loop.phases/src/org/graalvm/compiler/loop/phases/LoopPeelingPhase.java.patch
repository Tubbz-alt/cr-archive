diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.loop.phases/src/org/graalvm/compiler/loop/phases/LoopPeelingPhase.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.loop.phases/src/org/graalvm/compiler/loop/phases/LoopPeelingPhase.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.loop.phases/src/org/graalvm/compiler/loop/phases/LoopPeelingPhase.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.loop.phases/src/org/graalvm/compiler/loop/phases/LoopPeelingPhase.java
@@ -47,13 +47,13 @@
         if (graph.hasLoops()) {
             LoopsData data = new LoopsData(graph);
             try (DebugContext.Scope s = debug.scope("peeling", data.getCFG())) {
                 for (LoopEx loop : data.outerFirst()) {
                     if (loop.canDuplicateLoop() && loop.loopBegin().getLoopEndCount() > 0) {
-                        if (LoopPolicies.Options.PeelALot.getValue(graph.getOptions()) || getPolicies().shouldPeel(loop, data.getCFG(), context.getMetaAccess())) {
+                        if (LoopPolicies.Options.PeelALot.getValue(graph.getOptions()) || getPolicies().shouldPeel(loop, data.getCFG(), context)) {
                             debug.log("Peeling %s", loop);
-                            PEELED.add(debug, 1);
+                            PEELED.increment(debug);
                             LoopTransformations.peel(loop);
                             debug.dump(DebugContext.DETAILED_LEVEL, graph, "Peeling %s", loop);
                         }
                     }
                 }
@@ -64,8 +64,8 @@
         }
     }
 
     @Override
     public float codeSizeIncrease() {
-        return 5.0f;
+        return 10.0f;
     }
 }
