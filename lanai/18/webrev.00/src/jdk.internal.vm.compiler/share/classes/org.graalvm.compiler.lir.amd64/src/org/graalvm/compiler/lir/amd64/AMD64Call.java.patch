diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64Call.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64Call.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64Call.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64Call.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -30,11 +30,10 @@
 import static org.graalvm.compiler.lir.LIRInstruction.OperandFlag.ILLEGAL;
 import static org.graalvm.compiler.lir.LIRInstruction.OperandFlag.REG;
 import static org.graalvm.compiler.lir.LIRInstruction.OperandFlag.STACK;
 import static org.graalvm.compiler.lir.LIRValueUtil.differentRegisters;
 
-import org.graalvm.compiler.asm.amd64.AMD64Assembler.ConditionFlag;
 import org.graalvm.compiler.asm.amd64.AMD64MacroAssembler;
 import org.graalvm.compiler.core.common.LIRKind;
 import org.graalvm.compiler.core.common.spi.ForeignCallLinkage;
 import org.graalvm.compiler.lir.LIRFrameState;
 import org.graalvm.compiler.lir.LIRInstructionClass;
@@ -103,12 +102,12 @@
         @Override
         public void emitCode(CompilationResultBuilder crb, AMD64MacroAssembler masm) {
             directCall(crb, masm, callTarget, null, true, state);
         }
 
-        public int emitCall(CompilationResultBuilder crb, AMD64MacroAssembler masm) {
-            return directCall(crb, masm, callTarget, null, true, state);
+        public void emitCall(CompilationResultBuilder crb, AMD64MacroAssembler masm) {
+            directCall(crb, masm, callTarget, null, true, state);
         }
     }
 
     @Opcode("CALL_INDIRECT")
     public static class IndirectCallOp extends MethodCallOp {
@@ -193,79 +192,50 @@
         public void emitCode(CompilationResultBuilder crb, AMD64MacroAssembler masm) {
             directCall(crb, masm, callTarget, ((RegisterValue) callTemp).getRegister(), false, state);
         }
     }
 
-    public static int directCall(CompilationResultBuilder crb, AMD64MacroAssembler masm, InvokeTarget callTarget, Register scratch, boolean align, LIRFrameState info) {
-        if (align) {
-            emitAlignmentForDirectCall(crb, masm);
-        }
-        int before = masm.position();
-        int callPCOffset;
+    public static void directCall(CompilationResultBuilder crb, AMD64MacroAssembler masm, InvokeTarget callTarget, Register scratch, boolean align, LIRFrameState info) {
+        int before;
         if (scratch != null && !GeneratePIC.getValue(crb.getOptions())) {
+            assert !align;
             // offset might not fit a 32-bit immediate, generate an
             // indirect call with a 64-bit immediate
-            masm.movq(scratch, 0L);
-            callPCOffset = masm.position();
-            masm.call(scratch);
+            // This is an implicit contract between the backend and the jvmci code installer. The
+            // latter expects a mov instruction immediately preceding a call instruction. The jcc
+            // erratum padding should be inserted before the mov instruction.
+            before = masm.directCall(0L, scratch);
         } else {
-            callPCOffset = masm.position();
-            masm.call();
+            before = masm.directCall(align, crb.target.arch.getMachineCodeCallDisplacementOffset(), crb.target.wordSize);
         }
         int after = masm.position();
         crb.recordDirectCall(before, after, callTarget, info);
         crb.recordExceptionHandlers(after, info);
         masm.ensureUniquePC();
-        return callPCOffset;
-    }
-
-    protected static void emitAlignmentForDirectCall(CompilationResultBuilder crb, AMD64MacroAssembler masm) {
-        // make sure that the displacement word of the call ends up word aligned
-        int offset = masm.position();
-        offset += crb.target.arch.getMachineCodeCallDisplacementOffset();
-        int modulus = crb.target.wordSize;
-        if (offset % modulus != 0) {
-            masm.nop(modulus - offset % modulus);
-        }
     }
 
-    public static int directJmp(CompilationResultBuilder crb, AMD64MacroAssembler masm, InvokeTarget target) {
-        return directJmp(crb, masm, target, null);
-    }
-
-    public static int directJmp(CompilationResultBuilder crb, AMD64MacroAssembler masm, InvokeTarget target, Register scratch) {
-        int before = masm.position();
-        int callPCOffset;
+    public static void directJmp(CompilationResultBuilder crb, AMD64MacroAssembler masm, InvokeTarget target, Register scratch) {
+        int before;
         if (scratch != null && !GeneratePIC.getValue(crb.getOptions())) {
             // offset might not fit a 32-bit immediate, generate an
             // indirect call with a 64-bit immediate
-            masm.movq(scratch, 0L);
-            callPCOffset = masm.position();
-            masm.jmp(scratch);
+            before = masm.directJmp(0L, scratch);
         } else {
-            callPCOffset = masm.position();
-            masm.jmp(0, true);
+            before = masm.jmp(0, true);
         }
-        int after = masm.position();
-        crb.recordDirectCall(before, after, target, null);
-        masm.ensureUniquePC();
-        return callPCOffset;
+        recordDirectCall(crb, masm, target, before);
     }
 
-    public static void directConditionalJmp(CompilationResultBuilder crb, AMD64MacroAssembler masm, InvokeTarget target, ConditionFlag cond) {
-        int before = masm.position();
-        masm.jcc(cond, 0, true);
-        int after = masm.position();
-        crb.recordDirectCall(before, after, target, null);
+    public static void recordDirectCall(CompilationResultBuilder crb, AMD64MacroAssembler masm, InvokeTarget target, int before) {
+        crb.recordDirectCall(before, masm.position(), target, null);
         masm.ensureUniquePC();
     }
 
-    public static int indirectCall(CompilationResultBuilder crb, AMD64MacroAssembler masm, Register dst, InvokeTarget callTarget, LIRFrameState info) {
-        int before = masm.position();
-        masm.call(dst);
+    public static void indirectCall(CompilationResultBuilder crb, AMD64MacroAssembler masm, Register dst, InvokeTarget callTarget, LIRFrameState info) {
+        int before = masm.indirectCall(dst);
         int after = masm.position();
         crb.recordIndirectCall(before, after, callTarget, info);
         crb.recordExceptionHandlers(after, info);
         masm.ensureUniquePC();
-        return before;
     }
+
 }
