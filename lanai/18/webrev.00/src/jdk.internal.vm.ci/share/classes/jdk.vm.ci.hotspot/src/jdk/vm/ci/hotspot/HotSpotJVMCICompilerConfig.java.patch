diff a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCICompilerConfig.java b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCICompilerConfig.java
--- a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCICompilerConfig.java
+++ b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCICompilerConfig.java
@@ -32,10 +32,11 @@
 import jdk.vm.ci.runtime.JVMCICompiler;
 import jdk.vm.ci.runtime.JVMCICompilerFactory;
 import jdk.vm.ci.runtime.JVMCIRuntime;
 import jdk.vm.ci.services.JVMCIPermission;
 import jdk.vm.ci.services.JVMCIServiceLocator;
+import jdk.vm.ci.services.Services;
 
 import static jdk.vm.ci.services.Services.IS_IN_NATIVE_IMAGE;
 
 final class HotSpotJVMCICompilerConfig {
 
@@ -94,10 +95,15 @@
                         if (f.getCompilerName().equals(compilerName)) {
                             factory = f;
                         }
                     }
                     if (factory == null) {
+                        if (Services.IS_IN_NATIVE_IMAGE) {
+                            throw new JVMCIError("JVMCI compiler '%s' not found in JVMCI native library.%n" +
+                                            "Use -XX:-UseJVMCINativeLibrary when specifying a JVMCI compiler available on a class path with %s.",
+                                            compilerName, Option.Compiler.getPropertyName());
+                        }
                         throw new JVMCIError("JVMCI compiler '%s' not found", compilerName);
                     }
                 }
             } else {
                 // Auto select a single available compiler
