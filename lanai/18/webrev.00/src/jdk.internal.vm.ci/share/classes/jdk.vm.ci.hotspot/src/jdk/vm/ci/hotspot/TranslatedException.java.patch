diff a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/TranslatedException.java b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/TranslatedException.java
--- a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/TranslatedException.java
+++ b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/TranslatedException.java
@@ -34,12 +34,18 @@
  * Support for translating exceptions between different runtime heaps.
  */
 @SuppressWarnings("serial")
 final class TranslatedException extends Exception {
 
-    private TranslatedException(String message, Throwable translationFailure) {
-        super("[" + translationFailure + "]" + Objects.toString(message, ""));
+    /**
+     * Class name of exception that could not be instantiated.
+     */
+    private String originalExceptionClassName;
+
+    private TranslatedException(String message, String originalExceptionClassName) {
+        super(message);
+        this.originalExceptionClassName = originalExceptionClassName;
     }
 
     /**
      * No need to record an initial stack trace since it will be manually overwritten.
      */
@@ -47,10 +53,22 @@
     @Override
     public Throwable fillInStackTrace() {
         return this;
     }
 
+    @Override
+    public String toString() {
+        String s;
+        if (originalExceptionClassName.equals(TranslatedException.class.getName())) {
+            s = getClass().getName();
+        } else {
+            s = getClass().getName() + "[" + originalExceptionClassName + "]";
+        }
+        String message = getMessage();
+        return (message != null) ? (s + ": " + message) : s;
+    }
+
     /**
      * Prints a stack trace for {@code throwable} and returns {@code true}. Used to print stack
      * traces only when assertions are enabled.
      */
     private static boolean printStackTrace(Throwable throwable) {
@@ -84,18 +102,13 @@
                 }
             }
             if (message == null) {
                 return initCause((Throwable) cls.getConstructor().newInstance(), cause);
             }
-            cls.getDeclaredConstructor(String.class);
-            return initCause((Throwable) cls.getConstructor(String.class).newInstance(message), cause);
+            return initCause((Throwable) cls.getDeclaredConstructor(String.class).newInstance(message), cause);
         } catch (Throwable translationFailure) {
-            if (className.equals(TranslatedException.class.getName())) {
-                // Chop the class name when boxing another TranslatedException
-                return initCause(new TranslatedException(message, translationFailure), cause);
-            }
-            return initCause(new TranslatedException(null, translationFailure), cause);
+            return initCause(new TranslatedException(message, className), cause);
         }
     }
 
     /**
      * Encodes an exception message to distinguish a null message from an empty message.
@@ -234,9 +247,9 @@
                 cause = throwable;
             }
             return throwable;
         } catch (Throwable translationFailure) {
             assert printStackTrace(translationFailure);
-            return new TranslatedException("Error decoding exception: " + encodedThrowable, translationFailure);
+            return new TranslatedException("Error decoding exception: " + encodedThrowable, translationFailure.getClass().getName());
         }
     }
 }
