diff a/src/jdk.jshell/share/classes/jdk/jshell/ExpressionToTypeInfo.java b/src/jdk.jshell/share/classes/jdk/jshell/ExpressionToTypeInfo.java
--- a/src/jdk.jshell/share/classes/jdk/jshell/ExpressionToTypeInfo.java
+++ b/src/jdk.jshell/share/classes/jdk/jshell/ExpressionToTypeInfo.java
@@ -57,10 +57,11 @@
 import com.sun.tools.javac.code.Types;
 import com.sun.tools.javac.tree.JCTree.JCClassDecl;
 import com.sun.tools.javac.tree.TreeInfo;
 import com.sun.tools.javac.util.List;
 import com.sun.tools.javac.util.ListBuffer;
+import java.util.function.BinaryOperator;
 import jdk.jshell.ExpressionToTypeInfo.ExpressionInfo.AnonymousDescription;
 import jdk.jshell.ExpressionToTypeInfo.ExpressionInfo.AnonymousDescription.VariableDesc;
 import jdk.jshell.TaskFactory.AnalyzeTask;
 import jdk.jshell.TypePrinter.AnonymousTypeKind;
 
@@ -404,13 +405,13 @@
                                     varTypeName(accessibleTypes.head, false, AnonymousTypeKind.SUPER);
                             if (computeEnhancedInfo) {
                                 Type accessibleType = accessibleTypes.size() == 1 ? accessibleTypes.head
                                             : types.makeIntersectionType(accessibleTypes);
                                 ei.declareTypeName =
-                                        varTypeName(accessibleType, false, AnonymousTypeKind.DECLARE);
+                                        varTypeName(accessibleType, (full, pkg) -> full, false, AnonymousTypeKind.DECLARE);
                                 ei.fullTypeName =
-                                        varTypeName(enhancedTypesAccessible ? accessibleType : type,
+                                        varTypeName(enhancedTypesAccessible ? accessibleType : type, (full, pkg) -> full,
                                                     true, AnonymousTypeKind.DECLARE);
                                 ei.displayTypeName =
                                         varTypeName(type, true, AnonymousTypeKind.DISPLAY);
                             }
                             break;
@@ -508,15 +509,19 @@
         private static final Set<ElementKind> LOCAL_VARIABLES =
                 EnumSet.of(ElementKind.EXCEPTION_PARAMETER, ElementKind.LOCAL_VARIABLE,
                            ElementKind.PARAMETER, ElementKind.RESOURCE_VARIABLE);
 
     private String varTypeName(Type type, boolean printIntersectionTypes, AnonymousTypeKind anonymousTypesKind) {
+        return varTypeName(type, state.maps::fullClassNameAndPackageToClass, printIntersectionTypes, anonymousTypesKind);
+    }
+
+    private String varTypeName(Type type, BinaryOperator<String> fullClassNameAndPackageToClass, boolean printIntersectionTypes, AnonymousTypeKind anonymousTypesKind) {
         try {
             Function<TypeSymbol, String> anonymousClass2DeclareName =
                     cs -> anon2Name.computeIfAbsent(cs, state.eval::computeDeclareName);
             TypePrinter tp = new TypePrinter(at.messages(),
-                    state.maps::fullClassNameAndPackageToClass, anonymousClass2DeclareName,
+                    fullClassNameAndPackageToClass, anonymousClass2DeclareName,
                     printIntersectionTypes, anonymousTypesKind);
             List<Type> captures = types.captures(type);
             String res = tp.toString(types.upward(type, captures));
 
             if (res == null)
