diff a/src/java.base/share/classes/sun/security/x509/AlgorithmId.java b/src/java.base/share/classes/sun/security/x509/AlgorithmId.java
--- a/src/java.base/share/classes/sun/security/x509/AlgorithmId.java
+++ b/src/java.base/share/classes/sun/security/x509/AlgorithmId.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -589,14 +589,10 @@
         }
 
         return oidTable().get(name.toUpperCase(Locale.ENGLISH));
     }
 
-    private static ObjectIdentifier oid(int ... values) {
-        return ObjectIdentifier.newInternal(values);
-    }
-
     private static volatile Map<String,ObjectIdentifier> oidTable;
     private static final Map<ObjectIdentifier,String> nameTable;
 
     /** Returns the oidTable, lazily initializing it on first access. */
     private static Map<String,ObjectIdentifier> oidTable()
@@ -652,162 +648,49 @@
     /**
      * Algorithm ID for the MD2 Message Digest Algorthm, from RFC 1319.
      * OID = 1.2.840.113549.2.2
      */
     public static final ObjectIdentifier MD2_oid =
-    ObjectIdentifier.newInternal(new int[] {1, 2, 840, 113549, 2, 2});
+        ObjectIdentifier.of("1.2.840.113549.2.2");
 
     /**
      * Algorithm ID for the MD5 Message Digest Algorthm, from RFC 1321.
      * OID = 1.2.840.113549.2.5
      */
     public static final ObjectIdentifier MD5_oid =
-    ObjectIdentifier.newInternal(new int[] {1, 2, 840, 113549, 2, 5});
+        ObjectIdentifier.of("1.2.840.113549.2.5");
 
     /**
      * Algorithm ID for the SHA1 Message Digest Algorithm, from FIPS 180-1.
      * This is sometimes called "SHA", though that is often confusing since
      * many people refer to FIPS 180 (which has an error) as defining SHA.
      * OID = 1.3.14.3.2.26. Old SHA-0 OID: 1.3.14.3.2.18.
      */
     public static final ObjectIdentifier SHA_oid =
-    ObjectIdentifier.newInternal(new int[] {1, 3, 14, 3, 2, 26});
+        ObjectIdentifier.of("1.3.14.3.2.26");
 
     public static final ObjectIdentifier SHA224_oid =
-    ObjectIdentifier.newInternal(new int[] {2, 16, 840, 1, 101, 3, 4, 2, 4});
+        ObjectIdentifier.of("2.16.840.1.101.3.4.2.4");
 
     public static final ObjectIdentifier SHA256_oid =
-    ObjectIdentifier.newInternal(new int[] {2, 16, 840, 1, 101, 3, 4, 2, 1});
+        ObjectIdentifier.of("2.16.840.1.101.3.4.2.1");
 
     public static final ObjectIdentifier SHA384_oid =
-    ObjectIdentifier.newInternal(new int[] {2, 16, 840, 1, 101, 3, 4, 2, 2});
+        ObjectIdentifier.of("2.16.840.1.101.3.4.2.2");
 
     public static final ObjectIdentifier SHA512_oid =
-    ObjectIdentifier.newInternal(new int[] {2, 16, 840, 1, 101, 3, 4, 2, 3});
+        ObjectIdentifier.of("2.16.840.1.101.3.4.2.3");
 
     public static final ObjectIdentifier SHA512_224_oid =
-    ObjectIdentifier.newInternal(new int[] {2, 16, 840, 1, 101, 3, 4, 2, 5});
+        ObjectIdentifier.of("2.16.840.1.101.3.4.2.5");
 
     public static final ObjectIdentifier SHA512_256_oid =
-    ObjectIdentifier.newInternal(new int[] {2, 16, 840, 1, 101, 3, 4, 2, 6});
+        ObjectIdentifier.of("2.16.840.1.101.3.4.2.6");
 
     /*
      * COMMON PUBLIC KEY TYPES
      */
-    private static final int[] DH_data = { 1, 2, 840, 113549, 1, 3, 1 };
-    private static final int[] DH_PKIX_data = { 1, 2, 840, 10046, 2, 1 };
-    private static final int[] DSA_OIW_data = { 1, 3, 14, 3, 2, 12 };
-    private static final int[] DSA_PKIX_data = { 1, 2, 840, 10040, 4, 1 };
-    private static final int[] RSA_data = { 2, 5, 8, 1, 1 };
-
-    public static final ObjectIdentifier DH_oid;
-    public static final ObjectIdentifier DH_PKIX_oid;
-    public static final ObjectIdentifier DSA_oid;
-    public static final ObjectIdentifier DSA_OIW_oid;
-    public static final ObjectIdentifier EC_oid = oid(1, 2, 840, 10045, 2, 1);
-    public static final ObjectIdentifier ECDH_oid = oid(1, 3, 132, 1, 12);
-    public static final ObjectIdentifier RSA_oid;
-    public static final ObjectIdentifier RSAEncryption_oid =
-                                            oid(1, 2, 840, 113549, 1, 1, 1);
-    public static final ObjectIdentifier RSAES_OAEP_oid =
-                                            oid(1, 2, 840, 113549, 1, 1, 7);
-    public static final ObjectIdentifier mgf1_oid =
-                                            oid(1, 2, 840, 113549, 1, 1, 8);
-    public static final ObjectIdentifier RSASSA_PSS_oid =
-                                            oid(1, 2, 840, 113549, 1, 1, 10);
-
-    /*
-     * COMMON SECRET KEY TYPES
-     */
-    public static final ObjectIdentifier AES_oid =
-                                            oid(2, 16, 840, 1, 101, 3, 4, 1);
-
-    /*
-     * COMMON SIGNATURE ALGORITHMS
-     */
-    private static final int[] md2WithRSAEncryption_data =
-                                       { 1, 2, 840, 113549, 1, 1, 2 };
-    private static final int[] md5WithRSAEncryption_data =
-                                       { 1, 2, 840, 113549, 1, 1, 4 };
-    private static final int[] sha1WithRSAEncryption_data =
-                                       { 1, 2, 840, 113549, 1, 1, 5 };
-    private static final int[] sha1WithRSAEncryption_OIW_data =
-                                       { 1, 3, 14, 3, 2, 29 };
-    private static final int[] sha224WithRSAEncryption_data =
-                                       { 1, 2, 840, 113549, 1, 1, 14 };
-    private static final int[] sha256WithRSAEncryption_data =
-                                       { 1, 2, 840, 113549, 1, 1, 11 };
-    private static final int[] sha384WithRSAEncryption_data =
-                                       { 1, 2, 840, 113549, 1, 1, 12 };
-    private static final int[] sha512WithRSAEncryption_data =
-                                       { 1, 2, 840, 113549, 1, 1, 13 };
-
-    private static final int[] shaWithDSA_OIW_data =
-                                       { 1, 3, 14, 3, 2, 13 };
-    private static final int[] sha1WithDSA_OIW_data =
-                                       { 1, 3, 14, 3, 2, 27 };
-    private static final int[] dsaWithSHA1_PKIX_data =
-                                       { 1, 2, 840, 10040, 4, 3 };
-
-    public static final ObjectIdentifier md2WithRSAEncryption_oid;
-    public static final ObjectIdentifier md5WithRSAEncryption_oid;
-    public static final ObjectIdentifier sha1WithRSAEncryption_oid;
-    public static final ObjectIdentifier sha1WithRSAEncryption_OIW_oid;
-    public static final ObjectIdentifier sha224WithRSAEncryption_oid;
-    public static final ObjectIdentifier sha256WithRSAEncryption_oid;
-    public static final ObjectIdentifier sha384WithRSAEncryption_oid;
-    public static final ObjectIdentifier sha512WithRSAEncryption_oid;
-    public static final ObjectIdentifier sha512_224WithRSAEncryption_oid =
-                                            oid(1, 2, 840, 113549, 1, 1, 15);
-    public static final ObjectIdentifier sha512_256WithRSAEncryption_oid =
-                                            oid(1, 2, 840, 113549, 1, 1, 16);;
-
-    public static final ObjectIdentifier shaWithDSA_OIW_oid;
-    public static final ObjectIdentifier sha1WithDSA_OIW_oid;
-    public static final ObjectIdentifier sha1WithDSA_oid;
-    public static final ObjectIdentifier sha224WithDSA_oid =
-                                            oid(2, 16, 840, 1, 101, 3, 4, 3, 1);
-    public static final ObjectIdentifier sha256WithDSA_oid =
-                                            oid(2, 16, 840, 1, 101, 3, 4, 3, 2);
-
-    public static final ObjectIdentifier sha1WithECDSA_oid =
-                                            oid(1, 2, 840, 10045, 4, 1);
-    public static final ObjectIdentifier sha224WithECDSA_oid =
-                                            oid(1, 2, 840, 10045, 4, 3, 1);
-    public static final ObjectIdentifier sha256WithECDSA_oid =
-                                            oid(1, 2, 840, 10045, 4, 3, 2);
-    public static final ObjectIdentifier sha384WithECDSA_oid =
-                                            oid(1, 2, 840, 10045, 4, 3, 3);
-    public static final ObjectIdentifier sha512WithECDSA_oid =
-                                            oid(1, 2, 840, 10045, 4, 3, 4);
-    public static final ObjectIdentifier specifiedWithECDSA_oid =
-                                            oid(1, 2, 840, 10045, 4, 3);
-
-    /**
-     * Algorithm ID for the PBE encryption algorithms from PKCS#5 and
-     * PKCS#12.
-     */
-    public static final ObjectIdentifier pbeWithMD5AndDES_oid =
-        ObjectIdentifier.newInternal(new int[]{1, 2, 840, 113549, 1, 5, 3});
-    public static final ObjectIdentifier pbeWithMD5AndRC2_oid =
-        ObjectIdentifier.newInternal(new int[] {1, 2, 840, 113549, 1, 5, 6});
-    public static final ObjectIdentifier pbeWithSHA1AndDES_oid =
-        ObjectIdentifier.newInternal(new int[] {1, 2, 840, 113549, 1, 5, 10});
-    public static final ObjectIdentifier pbeWithSHA1AndRC2_oid =
-        ObjectIdentifier.newInternal(new int[] {1, 2, 840, 113549, 1, 5, 11});
-    public static ObjectIdentifier pbeWithSHA1AndRC4_128_oid =
-        ObjectIdentifier.newInternal(new int[] {1, 2, 840, 113549, 1, 12, 1, 1});
-    public static ObjectIdentifier pbeWithSHA1AndRC4_40_oid =
-        ObjectIdentifier.newInternal(new int[] {1, 2, 840, 113549, 1, 12, 1, 2});
-    public static ObjectIdentifier pbeWithSHA1AndDESede_oid =
-        ObjectIdentifier.newInternal(new int[] {1, 2, 840, 113549, 1, 12, 1, 3});
-    public static ObjectIdentifier pbeWithSHA1AndRC2_128_oid =
-        ObjectIdentifier.newInternal(new int[] {1, 2, 840, 113549, 1, 12, 1, 5});
-    public static ObjectIdentifier pbeWithSHA1AndRC2_40_oid =
-        ObjectIdentifier.newInternal(new int[] {1, 2, 840, 113549, 1, 12, 1, 6});
-
-    static {
     /*
      * Note the preferred OIDs are named simply with no "OIW" or
      * "PKIX" in them, even though they may point to data from these
      * specs; e.g. SHA_oid, DH_oid, DSA_oid, SHA1WithDSA_oid...
      */
@@ -817,133 +700,210 @@
      * the length of the private key X.  Alternatively, algorithm parameters
      * may be derived from another source such as a Certificate Authority's
      * certificate.
      * OID = 1.2.840.113549.1.3.1
      */
-        DH_oid = ObjectIdentifier.newInternal(DH_data);
+    public static final ObjectIdentifier DH_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.3.1");
 
     /**
      * Algorithm ID for the Diffie Hellman Key Agreement (DH), from RFC 3279.
      * Parameters may include public values P and G.
      * OID = 1.2.840.10046.2.1
      */
-        DH_PKIX_oid = ObjectIdentifier.newInternal(DH_PKIX_data);
+    public static final ObjectIdentifier DH_PKIX_oid =
+            ObjectIdentifier.of("1.2.840.10046.2.1");
 
     /**
      * Algorithm ID for the Digital Signing Algorithm (DSA), from the
      * NIST OIW Stable Agreements part 12.
      * Parameters may include public values P, Q, and G; or these may be
      * derived from
      * another source such as a Certificate Authority's certificate.
      * OID = 1.3.14.3.2.12
      */
-        DSA_OIW_oid = ObjectIdentifier.newInternal(DSA_OIW_data);
+    public static final ObjectIdentifier DSA_OIW_oid =
+            ObjectIdentifier.of("1.3.14.3.2.12");
 
     /**
      * Algorithm ID for the Digital Signing Algorithm (DSA), from RFC 3279.
      * Parameters may include public values P, Q, and G; or these may be
      * derived from another source such as a Certificate Authority's
      * certificate.
      * OID = 1.2.840.10040.4.1
      */
-        DSA_oid = ObjectIdentifier.newInternal(DSA_PKIX_data);
+    public static final ObjectIdentifier DSA_oid =
+            ObjectIdentifier.of("1.2.840.10040.4.1");
 
     /**
      * Algorithm ID for RSA keys used for any purpose, as defined in X.509.
      * The algorithm parameter is a single value, the number of bits in the
      * public modulus.
      * OID = 2.5.8.1.1
      */
-        RSA_oid = ObjectIdentifier.newInternal(RSA_data);
+    public static final ObjectIdentifier RSA_oid =
+            ObjectIdentifier.of("2.5.8.1.1");
+
+    public static final ObjectIdentifier EC_oid =
+            ObjectIdentifier.of("1.2.840.10045.2.1");
+    public static final ObjectIdentifier ECDH_oid =
+            ObjectIdentifier.of("1.3.132.1.12");
+    public static final ObjectIdentifier RSAEncryption_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.1.1");
+    public static final ObjectIdentifier RSAES_OAEP_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.1.7");
+    public static final ObjectIdentifier mgf1_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.1.8");
+    public static final ObjectIdentifier RSASSA_PSS_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.1.10");
 
+    /*
+     * COMMON SECRET KEY TYPES
+     */
+    public static final ObjectIdentifier AES_oid =
+            ObjectIdentifier.of("2.16.840.1.101.3.4.1");
+
+    /*
+     * COMMON SIGNATURE ALGORITHMS
+     */
     /**
      * Identifies a signing algorithm where an MD2 digest is encrypted
      * using an RSA private key; defined in PKCS #1.  Use of this
      * signing algorithm is discouraged due to MD2 vulnerabilities.
      * OID = 1.2.840.113549.1.1.2
      */
-        md2WithRSAEncryption_oid =
-            ObjectIdentifier.newInternal(md2WithRSAEncryption_data);
+    public static final ObjectIdentifier md2WithRSAEncryption_oid =
+        ObjectIdentifier.of("1.2.840.113549.1.1.2");
 
     /**
      * Identifies a signing algorithm where an MD5 digest is
      * encrypted using an RSA private key; defined in PKCS #1.
      * OID = 1.2.840.113549.1.1.4
      */
-        md5WithRSAEncryption_oid =
-            ObjectIdentifier.newInternal(md5WithRSAEncryption_data);
+    public static final ObjectIdentifier md5WithRSAEncryption_oid =
+        ObjectIdentifier.of("1.2.840.113549.1.1.4");
 
     /**
      * Identifies a signing algorithm where a SHA1 digest is
      * encrypted using an RSA private key; defined by RSA DSI.
      * OID = 1.2.840.113549.1.1.5
      */
-        sha1WithRSAEncryption_oid =
-            ObjectIdentifier.newInternal(sha1WithRSAEncryption_data);
+    public static final ObjectIdentifier sha1WithRSAEncryption_oid =
+        ObjectIdentifier.of("1.2.840.113549.1.1.5");
 
     /**
      * Identifies a signing algorithm where a SHA1 digest is
      * encrypted using an RSA private key; defined in NIST OIW.
      * OID = 1.3.14.3.2.29
      */
-        sha1WithRSAEncryption_OIW_oid =
-            ObjectIdentifier.newInternal(sha1WithRSAEncryption_OIW_data);
+    public static final ObjectIdentifier sha1WithRSAEncryption_OIW_oid =
+        ObjectIdentifier.of("1.3.14.3.2.29");
 
     /**
      * Identifies a signing algorithm where a SHA224 digest is
      * encrypted using an RSA private key; defined by PKCS #1.
      * OID = 1.2.840.113549.1.1.14
      */
-        sha224WithRSAEncryption_oid =
-            ObjectIdentifier.newInternal(sha224WithRSAEncryption_data);
+    public static final ObjectIdentifier sha224WithRSAEncryption_oid =
+        ObjectIdentifier.of("1.2.840.113549.1.1.14");
 
     /**
      * Identifies a signing algorithm where a SHA256 digest is
      * encrypted using an RSA private key; defined by PKCS #1.
      * OID = 1.2.840.113549.1.1.11
      */
-        sha256WithRSAEncryption_oid =
-            ObjectIdentifier.newInternal(sha256WithRSAEncryption_data);
+    public static final ObjectIdentifier sha256WithRSAEncryption_oid =
+        ObjectIdentifier.of("1.2.840.113549.1.1.11");
 
     /**
      * Identifies a signing algorithm where a SHA384 digest is
      * encrypted using an RSA private key; defined by PKCS #1.
      * OID = 1.2.840.113549.1.1.12
      */
-        sha384WithRSAEncryption_oid =
-            ObjectIdentifier.newInternal(sha384WithRSAEncryption_data);
+    public static final ObjectIdentifier sha384WithRSAEncryption_oid =
+        ObjectIdentifier.of("1.2.840.113549.1.1.12");
 
     /**
      * Identifies a signing algorithm where a SHA512 digest is
      * encrypted using an RSA private key; defined by PKCS #1.
      * OID = 1.2.840.113549.1.1.13
      */
-        sha512WithRSAEncryption_oid =
-            ObjectIdentifier.newInternal(sha512WithRSAEncryption_data);
+    public static final ObjectIdentifier sha512WithRSAEncryption_oid =
+        ObjectIdentifier.of("1.2.840.113549.1.1.13");
 
     /**
      * Identifies the FIPS 186 "Digital Signature Standard" (DSS), where a
      * SHA digest is signed using the Digital Signing Algorithm (DSA).
      * This should not be used.
      * OID = 1.3.14.3.2.13
      */
-        shaWithDSA_OIW_oid = ObjectIdentifier.newInternal(shaWithDSA_OIW_data);
+    public static final ObjectIdentifier shaWithDSA_OIW_oid =
+            ObjectIdentifier.of("1.3.14.3.2.13");
 
     /**
      * Identifies the FIPS 186 "Digital Signature Standard" (DSS), where a
      * SHA1 digest is signed using the Digital Signing Algorithm (DSA).
      * OID = 1.3.14.3.2.27
      */
-        sha1WithDSA_OIW_oid = ObjectIdentifier.newInternal(sha1WithDSA_OIW_data);
+    public static final ObjectIdentifier sha1WithDSA_OIW_oid =
+            ObjectIdentifier.of("1.3.14.3.2.27");
 
     /**
      * Identifies the FIPS 186 "Digital Signature Standard" (DSS), where a
      * SHA1 digest is signed using the Digital Signing Algorithm (DSA).
      * OID = 1.2.840.10040.4.3
      */
-        sha1WithDSA_oid = ObjectIdentifier.newInternal(dsaWithSHA1_PKIX_data);
+    public static final ObjectIdentifier sha1WithDSA_oid =
+            ObjectIdentifier.of("1.2.840.10040.4.3");
 
+    public static final ObjectIdentifier sha512_224WithRSAEncryption_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.1.15");
+    public static final ObjectIdentifier sha512_256WithRSAEncryption_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.1.16");
+
+    public static final ObjectIdentifier sha224WithDSA_oid =
+            ObjectIdentifier.of("2.16.840.1.101.3.4.3.1");
+    public static final ObjectIdentifier sha256WithDSA_oid =
+            ObjectIdentifier.of("2.16.840.1.101.3.4.3.2");
+
+    public static final ObjectIdentifier sha1WithECDSA_oid =
+            ObjectIdentifier.of("1.2.840.10045.4.1");
+    public static final ObjectIdentifier sha224WithECDSA_oid =
+            ObjectIdentifier.of("1.2.840.10045.4.3.1");
+    public static final ObjectIdentifier sha256WithECDSA_oid =
+            ObjectIdentifier.of("1.2.840.10045.4.3.2");
+    public static final ObjectIdentifier sha384WithECDSA_oid =
+            ObjectIdentifier.of("1.2.840.10045.4.3.3");
+    public static final ObjectIdentifier sha512WithECDSA_oid =
+            ObjectIdentifier.of("1.2.840.10045.4.3.4");
+    public static final ObjectIdentifier specifiedWithECDSA_oid =
+            ObjectIdentifier.of("1.2.840.10045.4.3");
+
+    /**
+     * Algorithm ID for the PBE encryption algorithms from PKCS#5 and
+     * PKCS#12.
+     */
+    public static final ObjectIdentifier pbeWithMD5AndDES_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.5.3");
+    public static final ObjectIdentifier pbeWithMD5AndRC2_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.5.6");
+    public static final ObjectIdentifier pbeWithSHA1AndDES_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.5.10");
+    public static final ObjectIdentifier pbeWithSHA1AndRC2_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.5.11");
+    public static final ObjectIdentifier pbeWithSHA1AndRC4_128_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.12.1.1");
+    public static final ObjectIdentifier pbeWithSHA1AndRC4_40_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.12.1.2");
+    public static final ObjectIdentifier pbeWithSHA1AndDESede_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.12.1.3");
+    public static final ObjectIdentifier pbeWithSHA1AndRC2_128_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.12.1.5");
+    public static final ObjectIdentifier pbeWithSHA1AndRC2_40_oid =
+            ObjectIdentifier.of("1.2.840.113549.1.12.1.6");
+
+    static {
         nameTable = new HashMap<>();
         nameTable.put(MD5_oid, "MD5");
         nameTable.put(MD2_oid, "MD2");
         nameTable.put(SHA_oid, "SHA-1");
         nameTable.put(SHA224_oid, "SHA-224");
