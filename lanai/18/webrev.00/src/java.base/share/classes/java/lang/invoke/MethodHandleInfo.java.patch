diff a/src/java.base/share/classes/java/lang/invoke/MethodHandleInfo.java b/src/java.base/share/classes/java/lang/invoke/MethodHandleInfo.java
--- a/src/java.base/share/classes/java/lang/invoke/MethodHandleInfo.java
+++ b/src/java.base/share/classes/java/lang/invoke/MethodHandleInfo.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -41,11 +41,12 @@
  * The method, constructor, or field referred to by a direct method handle is called
  * its <em>underlying member</em>.
  * Direct method handles may be obtained in any of these ways:
  * <ul>
  * <li>By executing an {@code ldc} instruction on a {@code CONSTANT_MethodHandle} constant.
- *     (See the Java Virtual Machine Specification, sections 4.4.8 and 5.4.3.)
+ *     (See the Java Virtual Machine Specification, sections {@jvms
+ *     4.4.8} and {@jvms 5.4.3}.)
  * <li>By calling one of the <a href="MethodHandles.Lookup.html#lookups">Lookup Factory Methods</a>,
  *     such as {@link Lookup#findVirtual Lookup.findVirtual},
  *     to resolve a symbolic reference into a method handle.
  *     A symbolic reference consists of a class, name string, and type.
  * <li>By calling the factory method {@link Lookup#unreflect Lookup.unreflect}
