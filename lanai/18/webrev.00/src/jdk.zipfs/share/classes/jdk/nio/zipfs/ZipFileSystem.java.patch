diff a/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipFileSystem.java b/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipFileSystem.java
--- a/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipFileSystem.java
+++ b/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipFileSystem.java
@@ -912,10 +912,11 @@
         if (options.contains(StandardOpenOption.WRITE) ||
             options.contains(StandardOpenOption.APPEND)) {
             checkWritable();
             beginRead();    // only need a read lock, the "update()" will obtain
                             // the write lock when the channel is closed
+            ensureOpen();
             try {
                 Entry e = getEntry(path);
                 if (e != null) {
                     if (e.isDir() || options.contains(CREATE_NEW))
                         throw new FileAlreadyExistsException(getString(path));
@@ -1073,11 +1074,11 @@
                 {
                     return fch.read(dsts, offset, length);
                 }
                 public int write(ByteBuffer src, long position)
                     throws IOException
-                    {
+                {
                    return fch.write(src, position);
                 }
                 public MappedByteBuffer map(MapMode mode,
                                             long position, long size)
                 {
@@ -1112,14 +1113,10 @@
 
     // the outstanding input streams that need to be closed
     private Set<InputStream> streams =
         Collections.synchronizedSet(new HashSet<>());
 
-    // the ex-channel and ex-path that need to close when their outstanding
-    // input streams are all closed by the obtainers.
-    private final Set<ExistingChannelCloser> exChClosers = new HashSet<>();
-
     private final Set<Path> tmppaths = Collections.synchronizedSet(new HashSet<>());
     private Path getTempPathForEntry(byte[] path) throws IOException {
         Path tmpPath = createTempFileInSameDirectoryAs(zfpath);
         if (path != null) {
             Entry e = getEntry(path);
@@ -1709,30 +1706,47 @@
         }
     }
 
     // sync the zip file system, if there is any update
     private void sync() throws IOException {
-        // check ex-closer
-        if (!exChClosers.isEmpty()) {
-            for (ExistingChannelCloser ecc : exChClosers) {
-                if (ecc.closeAndDeleteIfDone()) {
-                    exChClosers.remove(ecc);
-                }
-            }
-        }
         if (!hasUpdate)
             return;
         PosixFileAttributes attrs = getPosixAttributes(zfpath);
         Path tmpFile = createTempFileInSameDirectoryAs(zfpath);
         try (OutputStream os = new BufferedOutputStream(Files.newOutputStream(tmpFile, WRITE))) {
             ArrayList<Entry> elist = new ArrayList<>(inodes.size());
             long written = 0;
             byte[] buf = null;
             Entry e;
 
+            final IndexNode manifestInode = inodes.get(
+                    IndexNode.keyOf(getBytes("/META-INF/MANIFEST.MF")));
+            final Iterator<IndexNode> inodeIterator = inodes.values().iterator();
+            boolean manifestProcessed = false;
+
             // write loc
-            for (IndexNode inode : inodes.values()) {
+            while (inodeIterator.hasNext()) {
+                final IndexNode inode;
+
+                // write the manifest inode (if any) first so that
+                // java.util.jar.JarInputStream can find it
+                if (manifestInode == null) {
+                    inode = inodeIterator.next();
+                } else {
+                    if (manifestProcessed) {
+                        // advance to next node, filtering out the manifest
+                        // which was already written
+                        inode = inodeIterator.next();
+                        if (inode == manifestInode) {
+                            continue;
+                        }
+                    } else {
+                        inode = manifestInode;
+                        manifestProcessed = true;
+                    }
+                }
+
                 if (inode instanceof Entry) {    // an updated inode
                     e = (Entry)inode;
                     try {
                         if (e.type == Entry.COPY) {
                             // entry copy: the only thing changed is the "name"
@@ -1779,26 +1793,12 @@
             }
             end.centot = elist.size();
             end.cenlen = written - end.cenoff;
             end.write(os, written, forceEnd64);
         }
-        if (!streams.isEmpty()) {
-            //
-            // There are outstanding input streams open on existing "ch",
-            // so, don't close the "cha" and delete the "file for now, let
-            // the "ex-channel-closer" to handle them
-            Path path = createTempFileInSameDirectoryAs(zfpath);
-            ExistingChannelCloser ecc = new ExistingChannelCloser(path,
-                                                                  ch,
-                                                                  streams);
-            Files.move(zfpath, path, REPLACE_EXISTING);
-            exChClosers.add(ecc);
-            streams = Collections.synchronizedSet(new HashSet<>());
-        } else {
-            ch.close();
-            Files.delete(zfpath);
-        }
+        ch.close();
+        Files.delete(zfpath);
 
         // Set the POSIX permissions of the original Zip File if available
         // before moving the temp file
         if (attrs != null) {
             Files.setPosixFilePermissions(tmpFile, attrs.permissions());
@@ -3139,40 +3139,10 @@
         public Set<PosixFilePermission> permissions() {
             return storedPermissions().orElse(Set.copyOf(defaultPermissions));
         }
     }
 
-    private static class ExistingChannelCloser {
-        private final Path path;
-        private final SeekableByteChannel ch;
-        private final Set<InputStream> streams;
-        ExistingChannelCloser(Path path,
-                              SeekableByteChannel ch,
-                              Set<InputStream> streams) {
-            this.path = path;
-            this.ch = ch;
-            this.streams = streams;
-        }
-
-        /**
-         * If there are no more outstanding streams, close the channel and
-         * delete the backing file
-         *
-         * @return true if we're done and closed the backing file,
-         *         otherwise false
-         * @throws IOException
-         */
-        private boolean closeAndDeleteIfDone() throws IOException {
-            if (streams.isEmpty()) {
-                ch.close();
-                Files.delete(path);
-                return true;
-            }
-            return false;
-        }
-    }
-
     // purely for parent lookup, so we don't have to copy the parent
     // name every time
     static class ParentLookup extends IndexNode {
         int len;
         ParentLookup() {}
