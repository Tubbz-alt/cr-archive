diff a/test/hotspot/jtreg/vmTestbase/nsk/jdi/ObjectReference/referringObjects/referringObjects003/referringObjects003a.java b/test/hotspot/jtreg/vmTestbase/nsk/jdi/ObjectReference/referringObjects/referringObjects003/referringObjects003a.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/jdi/ObjectReference/referringObjects/referringObjects003/referringObjects003a.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jdi/ObjectReference/referringObjects/referringObjects003/referringObjects003a.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -25,22 +25,31 @@
 import java.io.*;
 import java.util.*;
 import nsk.share.*;
 import nsk.share.jdi.HeapwalkingDebuggee;
 
+import java.util.concurrent.atomic.AtomicBoolean;
+
 /*
  *  Test class handle request for start/stop test threads(threads are included in special thread group)
  */
 public class referringObjects003a extends HeapwalkingDebuggee {
+
+    static AtomicBoolean shouldStop = new AtomicBoolean(false);
+
     class TestThread implements Runnable {
         public void run() {
-            wicket.waitFor();
+            while(!shouldStop.get()) {
+                try {
+                    Thread.sleep(1000);
+                } catch (InterruptedException e) {
+                    // just wait for shouldStop
+                }
+            }
         }
     }
 
-    private Wicket wicket = new Wicket();
-
     private List<Thread> threads = new ArrayList<Thread>();
 
     private List<ReferringObject> referrers;
 
     public static final String COMMAND_START_THREADS = "startThreads";
@@ -69,11 +78,11 @@
             testThread.start();
         }
     }
 
     public void stopThreads() {
-        wicket.unlockAll();
+        shouldStop.set(true);
 
         for (Thread testThread : threads) {
             try {
                 testThread.join();
             } catch (InterruptedException e) {
