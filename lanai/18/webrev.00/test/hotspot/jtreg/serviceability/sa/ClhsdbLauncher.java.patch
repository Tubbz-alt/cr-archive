diff a/test/hotspot/jtreg/serviceability/sa/ClhsdbLauncher.java b/test/hotspot/jtreg/serviceability/sa/ClhsdbLauncher.java
--- a/test/hotspot/jtreg/serviceability/sa/ClhsdbLauncher.java
+++ b/test/hotspot/jtreg/serviceability/sa/ClhsdbLauncher.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -31,27 +31,23 @@
 import jdk.test.lib.Platform;
 import jdk.test.lib.JDKToolLauncher;
 import jdk.test.lib.JDKToolFinder;
 import jdk.test.lib.process.OutputAnalyzer;
 import jdk.test.lib.SA.SATestUtils;
-import jtreg.SkippedException;
-
 
 /**
  * This is a framework to run 'jhsdb clhsdb' commands.
  * See open/test/hotspot/jtreg/serviceability/sa/ClhsdbLongConstant.java for
  * an example of how to write a test.
  */
 
 public class ClhsdbLauncher {
 
     private Process toolProcess;
-    private boolean needPrivileges;
 
     public ClhsdbLauncher() {
         toolProcess = null;
-        needPrivileges = false;
     }
 
     /**
      *
      * Launches 'jhsdb clhsdb' and attaches to the Lingered App process.
@@ -64,15 +60,11 @@
         if (lingeredAppPid != -1) {
             launcher.addToolArg("--pid=" + Long.toString(lingeredAppPid));
             System.out.println("Starting clhsdb against " + lingeredAppPid);
         }
 
-        List<String> cmdStringList = Arrays.asList(launcher.getCommand());
-        if (needPrivileges) {
-            cmdStringList = SATestUtils.addPrivileges(cmdStringList);
-        }
-        ProcessBuilder processBuilder = new ProcessBuilder(cmdStringList);
+        ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);
         toolProcess = processBuilder.start();
     }
 
     /**
      *
@@ -111,19 +103,26 @@
 
         if (commands == null) {
             throw new RuntimeException("CLHSDB command must be provided\n");
         }
 
-        // Enable verbose exception tracing so we see the full exception backtrace
-        // when there is a failure. We need to insert this command into the start
-        // of the commands list. We can't just issue the "verbose true" command seperately
+        // We want to execute clhsdb "echo" and "verbose" commands before the
+        // requested commands. We can't just issue these commands separately
         // because code below won't work correctly if all executed commands are
-        // not in the commands list. And since it's immutable, we need to allocate
-        // a mutable one.
+        // not in the commands list. Since the commands list is immutable, we
+        // need to allocate a mutable one that we can add the extra commands too.
         List<String> savedCommands = commands;
         commands = new java.util.LinkedList<String>();
+
+        // Enable echoing of all commands so we see them in the output.
+        commands.add("echo true");
+
+        // Enable verbose exception tracing so we see the full exception backtrace
+        // when there is a failure.
         commands.add("verbose true");
+
+        // Now add all the original commands after the "echo" and "verbose" commands.
         commands.addAll(savedCommands);
 
         try (OutputStream out = toolProcess.getOutputStream()) {
             for (String cmd : commands) {
                 out.write((cmd + "\n").getBytes());
@@ -194,22 +193,11 @@
                       List<String> commands,
                       Map<String, List<String>> expectedStrMap,
                       Map<String, List<String>> unExpectedStrMap)
         throws Exception {
 
-        if (!Platform.shouldSAAttach()) {
-            if (Platform.isOSX() && SATestUtils.canAddPrivileges()) {
-                needPrivileges = true;
-            }
-            else {
-               // Skip the test if we don't have enough permissions to attach
-               // and cannot add privileges.
-               throw new SkippedException(
-                   "SA attach not expected to work. Insufficient privileges.");
-           }
-        }
-
+        SATestUtils.skipIfCannotAttach(); // throws SkippedException if attach not expected to work.
         attach(lingeredAppPid);
         return runCmd(commands, expectedStrMap, unExpectedStrMap);
     }
 
     /**
