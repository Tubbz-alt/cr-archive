diff a/test/hotspot/jtreg/runtime/Metaspace/FragmentMetaspace.java b/test/hotspot/jtreg/runtime/Metaspace/FragmentMetaspace.java
--- a/test/hotspot/jtreg/runtime/Metaspace/FragmentMetaspace.java
+++ b/test/hotspot/jtreg/runtime/Metaspace/FragmentMetaspace.java
@@ -21,17 +21,18 @@
  * questions.
  */
 
 /**
  * @test
- * @library /runtime/testlibrary
+ * @library /test/lib
  * @modules java.base/jdk.internal.misc
  * @modules java.compiler
  * @run main/othervm/timeout=200 -Xmx1g FragmentMetaspace
  */
 
 import java.io.IOException;
+import jdk.test.lib.classloader.GeneratingCompilingClassLoader;
 
 /**
  * Test that tries to fragment the native memory used by class loaders.
  * This test creates class loaders that load classes of increasing size for every
  * iteration. By increasing the size of the class meta data needed for every iteration
@@ -51,11 +52,11 @@
 
     private static void runGrowing(long time, int iterations) {
         long startTime = System.currentTimeMillis();
         for (int i = 0; System.currentTimeMillis() < startTime + time && i < iterations; ++i) {
             try {
-                GeneratedClassLoader gcl = new GeneratedClassLoader();
+                GeneratingCompilingClassLoader gcl = new GeneratingCompilingClassLoader();
 
                 // getGeneratedClasses throws a RuntimeException in cases where
                 // the javac exit code is not 0. If the original reason for the exception is
                 // a "java.lang.OutOfMemoryError: Java heap space",
                 // increase the heap size in the @run tag and rerun the test.
