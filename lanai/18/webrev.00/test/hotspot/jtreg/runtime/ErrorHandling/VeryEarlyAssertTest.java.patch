diff a/test/hotspot/jtreg/runtime/ErrorHandling/VeryEarlyAssertTest.java b/test/hotspot/jtreg/runtime/ErrorHandling/VeryEarlyAssertTest.java
--- a/test/hotspot/jtreg/runtime/ErrorHandling/VeryEarlyAssertTest.java
+++ b/test/hotspot/jtreg/runtime/ErrorHandling/VeryEarlyAssertTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2018, SAP. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
@@ -47,12 +47,10 @@
 
   public static void main(String[] args) throws Exception {
 
 
     ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(
-            "-Xmx64M",
-            "-XX:-CreateCoredumpOnCrash",
             "-version");
     Map<String, String> env = pb.environment();
     env.put("HOTSPOT_FATAL_ERROR_DURING_DYNAMIC_INITIALIZATION", "1");
 
     OutputAnalyzer output_detail = new OutputAnalyzer(pb.start());
@@ -85,34 +83,35 @@
     Pattern[] pattern = new Pattern[]{
             Pattern.compile(".*HOTSPOT_FATAL_ERROR_DURING_DYNAMIC_INITIALIZATION.*")
     };
     int currentPattern = 0;
 
-    String lastLine = null;
+    boolean endMarkerFound = false;
     while ((line = br.readLine()) != null) {
       if (currentPattern < pattern.length) {
         if (pattern[currentPattern].matcher(line).matches()) {
           System.out.println("Found: " + line + ".");
           currentPattern++;
         }
       }
-      lastLine = line;
+      if (line.equals("END.")) {
+        endMarkerFound = true;
+        break;
+      }
     }
     br.close();
 
     if (currentPattern < pattern.length) {
       throw new RuntimeException("hs-err file incomplete (first missing pattern: " + currentPattern + ")");
     }
 
-    if (!lastLine.equals("END.")) {
+    if (!endMarkerFound) {
       throw new RuntimeException("hs-err file incomplete (missing END marker.)");
     } else {
       System.out.println("End marker found.");
     }
 
     System.out.println("OK.");
 
   }
 
 }
-
-
