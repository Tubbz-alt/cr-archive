diff a/test/hotspot/gtest/utilities/test_linkedlist.cpp b/test/hotspot/gtest/utilities/test_linkedlist.cpp
--- a/test/hotspot/gtest/utilities/test_linkedlist.cpp
+++ b/test/hotspot/gtest/utilities/test_linkedlist.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -56,11 +56,11 @@
     head = head->next();
     index++;
   }
 }
 
-const Integer one(1), two(2), three(3), four(4), five(5), six(6);
+const Integer one(1), two(2), three(3), four(4), five(5), six(6), notfound(404);
 
 // Test regular linked list
 TEST(LinkedList, simple) {
   LinkedListImpl<Integer, ResourceObj::C_HEAP, mtTest> ll;
 
@@ -83,10 +83,86 @@
   ll.insert_before(one, node);
   int expected[3] = {1, 6, 3};
   check_list_values(expected, &ll);
 }
 
+TEST(LinkedList, generic) {
+  LinkedListImpl<int> il;
+  const int N = 100;
+  for (int i=0; i<N; ++i) {
+    il.add(i);
+  }
+  EXPECT_EQ(il.size(), (size_t)N);
+
+  const LinkedListIterator<int> cit(il.head());
+  for (int i=N-1; i>=0; --i) {
+    const int* e = cit.next();
+    EXPECT_EQ(*e, i);
+  }
+  EXPECT_TRUE(cit.is_empty());
+  EXPECT_EQ(il.size(), (size_t)N);
+  EXPECT_EQ(*(il.head()->peek()), N-1);
+
+  typedef LinkedListImpl<Integer, ResourceObj::C_HEAP, mtTest> list_t;
+  LinkedList<Integer>* list = new(ResourceObj::C_HEAP, mtTest) list_t();
+  list->add(Integer(1));
+  list->add(Integer(2));
+  EXPECT_EQ(list->size(), (size_t)2);
+  list->~LinkedList<Integer>();
+  EXPECT_EQ(list->size(), (size_t)0);
+
+  // copyable
+  //list_t a;
+  //a.add(Integer(1));
+  //list_t b(a);
+  //EXPECT_EQ(b.size(), (size_t)1);
+  //EXPECT_TRUE(b.head()->peek()->equals(Integer(1)));
+
+  list_t lifo, dummy;
+  const Integer* e;
+  lifo.add(one);
+  lifo.add(two);
+  LinkedListIterator<Integer> it(lifo.head());
+
+  EXPECT_FALSE(it.is_empty());
+  // pop 2
+  e = it.next();
+  EXPECT_TRUE(e->equals(two));
+  EXPECT_FALSE(it.is_empty());
+  // pop 1
+  e = it.next();
+  EXPECT_TRUE(e->equals(one));
+  //empty
+  EXPECT_TRUE(it.is_empty());
+
+  LinkedListIterator<Integer> it2(dummy.head());
+  EXPECT_TRUE(it2.is_empty());
+  EXPECT_EQ(it2.next(), (Integer* )NULL);
+}
+
+TEST(LinkedList, algorithm) {
+  LinkedListImpl<int> il;
+  il.add(1);
+  il.add(2);
+  il.add(3);
+  EXPECT_EQ(*il.find(1), 1);
+  EXPECT_EQ(il.find(404), (int* )NULL);
+  EXPECT_TRUE(il.remove(1));
+  EXPECT_FALSE(il.remove(404));
+
+  LinkedListImpl<Integer, ResourceObj::C_HEAP, mtTest> ll;
+  ll.add(one);
+
+  EXPECT_TRUE(ll.find(one));
+  EXPECT_FALSE(ll.find(notfound));
+
+  EXPECT_TRUE(ll.remove(one));
+  EXPECT_FALSE(ll.find(one));
+  EXPECT_FALSE(ll.remove(notfound));
+  EXPECT_FALSE(ll.find(notfound));
+}
+
 // Test sorted linked list
 TEST(SortedLinkedList, simple) {
   LinkedListImpl<Integer, ResourceObj::C_HEAP, mtTest> ll;
   ll.add(one);
   ll.add(six);
