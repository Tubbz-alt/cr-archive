diff a/test/jdk/jdk/jfr/api/consumer/TestRecordedEvent.java b/test/jdk/jdk/jfr/api/consumer/TestRecordedEvent.java
--- a/test/jdk/jdk/jfr/api/consumer/TestRecordedEvent.java
+++ b/test/jdk/jdk/jfr/api/consumer/TestRecordedEvent.java
@@ -49,62 +49,60 @@
 
     static class MyClass {
     }
 
     static class TestEvent extends Event {
-
         @Description("MyField")
         Class<?> clzField = String.class;
         int intField;
         String stringField = "myString";
         Class<?> myClass = MyClass.class;
     }
 
     public static void main(String[] args) throws Throwable {
-        Recording r = new Recording();
-        r.start();
-        TestEvent t = new TestEvent();
-        t.commit();
-        r.stop();
-        List<RecordedEvent> events = Events.fromRecording(r);
-        Events.hasEvents(events);
-
-        Asserts.assertEquals(events.size(), 1);
+        try (Recording r = new Recording()) {
+            r.start();
+            TestEvent t = new TestEvent();
+            t.commit();
+            r.stop();
 
-        RecordedEvent event = events.get(0);
+            List<RecordedEvent> events = Events.fromRecording(r);
+            Events.hasEvents(events);
+            Asserts.assertEquals(events.size(), 1);
+            RecordedEvent event = events.get(0);
 
-        List<ValueDescriptor> descriptors = event.getFields();
+            List<ValueDescriptor> descriptors = event.getFields();
 
-        System.out.println("Descriptors");
-        for (ValueDescriptor descriptor : descriptors) {
-            System.out.println(descriptor.getName());
-            System.out.println(descriptor.getTypeName());
-        }
-        System.out.println("Descriptors end");
+            System.out.println("Descriptors");
+            for (ValueDescriptor descriptor : descriptors) {
+                System.out.println(descriptor.getName());
+                System.out.println(descriptor.getTypeName());
+            }
+            System.out.println("Descriptors end");
 
-        Object recordedClass = event.getValue("clzField");
-        Asserts.assertTrue(recordedClass instanceof RecordedClass, "Expected Recorded Class got " + recordedClass);
+            Object recordedClass = event.getValue("clzField");
+            Asserts.assertTrue(recordedClass instanceof RecordedClass, "Expected Recorded Class got " + recordedClass);
 
-        Object recordedInt = event.getValue("intField");
-        Asserts.assertTrue(recordedInt instanceof Integer);
+            Object recordedInt = event.getValue("intField");
+            Asserts.assertTrue(recordedInt instanceof Integer);
 
-        Object recordedString = event.getValue("stringField");
-        System.out.println("recordedString class: " + recordedString.getClass());
-        Asserts.assertTrue(recordedString instanceof String);
+            Object recordedString = event.getValue("stringField");
+            System.out.println("recordedString class: " + recordedString.getClass());
+            Asserts.assertTrue(recordedString instanceof String);
 
-        Object myClass = event.getValue("myClass");
-        Asserts.assertTrue(myClass instanceof RecordedClass, "Expected Recorded Class got " + recordedClass);
+            Object myClass = event.getValue("myClass");
+            Asserts.assertTrue(myClass instanceof RecordedClass, "Expected Recorded Class got " + recordedClass);
 
-        RecordedClass myRecClass = (RecordedClass) myClass;
-        Asserts.assertEquals(MyClass.class.getName(), myRecClass.getName(), "Got " + myRecClass.getName());
+            RecordedClass myRecClass = (RecordedClass) myClass;
+            Asserts.assertEquals(MyClass.class.getName(), myRecClass.getName(), "Got " + myRecClass.getName());
 
-        Object recordedClassLoader = myRecClass.getValue("classLoader");
-        Asserts.assertTrue(recordedClassLoader instanceof RecordedClassLoader, "Expected Recorded ClassLoader got " + recordedClassLoader);
+            Object recordedClassLoader = myRecClass.getValue("classLoader");
+            Asserts.assertTrue(recordedClassLoader instanceof RecordedClassLoader, "Expected Recorded ClassLoader got " + recordedClassLoader);
 
-        RecordedClassLoader myRecClassLoader = (RecordedClassLoader)recordedClassLoader;
-        ClassLoader cl = MyClass.class.getClassLoader();
-        Asserts.assertEquals(cl.getClass().getName(), myRecClassLoader.getType().getName(), "Expected Recorded ClassLoader type to equal loader type");
+            RecordedClassLoader myRecClassLoader = (RecordedClassLoader) recordedClassLoader;
+            ClassLoader cl = MyClass.class.getClassLoader();
+            Asserts.assertEquals(cl.getClass().getName(), myRecClassLoader.getType().getName(), "Expected Recorded ClassLoader type to equal loader type");
 
-        Asserts.assertNotNull(myRecClass.getModifiers());
+            Asserts.assertNotNull(myRecClass.getModifiers());
+        }
     }
-
 }
