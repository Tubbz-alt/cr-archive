diff a/test/jdk/jdk/jfr/api/consumer/TestRecordedFrame.java b/test/jdk/jdk/jfr/api/consumer/TestRecordedFrame.java
--- a/test/jdk/jdk/jfr/api/consumer/TestRecordedFrame.java
+++ b/test/jdk/jdk/jfr/api/consumer/TestRecordedFrame.java
@@ -24,10 +24,11 @@
  */
 package jdk.jfr.api.consumer;
 
 import java.io.IOException;
 import java.util.List;
+import java.util.Set;
 
 import jdk.jfr.Recording;
 import jdk.jfr.consumer.RecordedEvent;
 import jdk.jfr.consumer.RecordedFrame;
 import jdk.jfr.consumer.RecordedMethod;
@@ -47,76 +48,61 @@
  * @run main/othervm -Xcomp -XX:-UseInterpreter -Dinterpreted=false jdk.jfr.api.consumer.TestRecordedFrame
  */
 public final class TestRecordedFrame {
 
     public static void main(String[] args) throws IOException {
-        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
-        doTest(getLineNumber("main", stackTrace) + 1);
+        System.out.println(); // Makes BCI for method larger than 0
+        test(); // Records the line number and BCI for the main method/frame
+    }
+
+    static void test() throws IOException {
+        try (Recording recording = new Recording()) {
+            recording.start();
+
+            SimpleEvent ev = new SimpleEvent();
+            ev.commit();
+            recording.stop();
+
+            List<RecordedEvent> recordedEvents = Events.fromRecording(recording);
+            Events.hasEvents(recordedEvents);
+            RecordedEvent recordedEvent = recordedEvents.get(0);
+
+            RecordedStackTrace stacktrace = recordedEvent.getStackTrace();
+            List<RecordedFrame> frames = stacktrace.getFrames();
+            for (RecordedFrame frame : frames) {
+                // All frames are java frames
+                Asserts.assertTrue(frame.isJavaFrame());
+                // Verify the main() method frame
+                RecordedMethod method = frame.getMethod();
+                if (method.getName().equals("main")) {
+                    // Frame type
+                    String type = frame.getType();
+                    System.out.println("type: " + type);
+                    Set<String> types = Set.of("Interpreted", "JIT compiled", "Inlined");
+                    Asserts.assertTrue(types.contains(type));
+                    // Line number
+                    Asserts.assertEquals(getLineNumber("main"), frame.getLineNumber());
+                    // Interpreted
+                    boolean isInterpreted = "Interpreted".equals(type);
+                    boolean expectedInterpreted = "true".equals(System.getProperty("interpreted"));
+                    Asserts.assertEquals(isInterpreted, expectedInterpreted);
+                    // BCI
+                    int bci = frame.getBytecodeIndex();
+                    System.out.println("bci: " + bci);
+                    Asserts.assertGreaterThan(bci, 0);
+                }
+            }
+        }
     }
 
     /**
-     * Returns line number of the passed method for the passed stacktrace
+     * Returns line number of a method on the stack
      */
-    private static int getLineNumber(String methodName, StackTraceElement[] stackTrace) {
-        for (StackTraceElement ste : stackTrace) {
+    private static int getLineNumber(String methodName) {
+        for (StackTraceElement ste : Thread.currentThread().getStackTrace()) {
             if (methodName.equals(ste.getMethodName())) {
                 return ste.getLineNumber();
             }
         }
         throw new RuntimeException("Unexpected error: could not analyze stacktrace");
     }
-
-    public static void doTest(int lineNumber) throws IOException {
-
-        System.out.println("Enetring method");
-
-        Recording recording = new Recording();
-        recording.start();
-
-        SimpleEvent ev = new SimpleEvent();
-        commitEvent(ev);
-        recording.stop();
-
-        List<RecordedEvent> recordedEvents = Events.fromRecording(recording);
-        Events.hasEvents(recordedEvents);
-        RecordedEvent recordedEvent = recordedEvents.get(0);
-
-        RecordedStackTrace stacktrace = recordedEvent.getStackTrace();
-        List<RecordedFrame> frames = stacktrace.getFrames();
-        for (RecordedFrame frame : frames) {
-
-            // All frames are java frames
-            Asserts.assertTrue(frame.isJavaFrame());
-            // Verify the main() method frame
-            RecordedMethod method = frame.getMethod();
-            if (method.getName().equals("main")) {
-
-                // Frame type
-                String type = frame.getType();
-                System.out.println("type: " + type);
-                Asserts.assertTrue(
-                        type.equals("Interpreted")
-                        || type.equals("JIT compiled")
-                        || type.equals("Inlined"));
-
-                Asserts.assertEquals(lineNumber, frame.getLineNumber());
-
-                boolean isInterpreted = "Interpreted".equals(type);
-                boolean expectedInterpreted = "true".equals(System.getProperty("interpreted"));
-                Asserts.assertEquals(isInterpreted, expectedInterpreted);
-
-                int bci = frame.getBytecodeIndex();
-
-                System.out.println("bci: " + bci);
-                Asserts.assertTrue(bci > 0);
-            }
-
-        }
-
-    }
-
-    private static void commitEvent(SimpleEvent ev) {
-        System.out.println("commit");
-        ev.commit();
-    }
-
 }
