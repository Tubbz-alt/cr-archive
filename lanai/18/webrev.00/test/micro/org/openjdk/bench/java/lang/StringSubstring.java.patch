diff a/test/micro/org/openjdk/bench/java/lang/StringSubstring.java b/test/micro/org/openjdk/bench/java/lang/StringSubstring.java
--- a/test/micro/org/openjdk/bench/java/lang/StringSubstring.java
+++ b/test/micro/org/openjdk/bench/java/lang/StringSubstring.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -26,10 +26,13 @@
 import org.openjdk.jmh.annotations.*;
 import java.util.concurrent.TimeUnit;
 
 @BenchmarkMode(Mode.AverageTime)
 @OutputTimeUnit(TimeUnit.NANOSECONDS)
+@Fork(value = 3)
+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)
+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)
 @State(Scope.Benchmark)
 public class StringSubstring {
 
     public String s = new String("An arbitrary string that happened to be of length 52");
 
@@ -40,6 +43,14 @@
 
     @Benchmark
     public String from26toEnd1() {
         return s.substring(26, s.length());
     }
+
+    /**
+     * An empty substring should not allocate a new String
+     */
+    @Benchmark
+    public String empty() {
+        return s.substring(17, 17);
+    }
 }
