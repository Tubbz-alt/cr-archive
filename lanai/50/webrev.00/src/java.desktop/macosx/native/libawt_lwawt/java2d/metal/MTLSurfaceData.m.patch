diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceData.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceData.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceData.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLSurfaceData.m
@@ -76,10 +76,12 @@
             [MTLTextureDescriptor texture2DDescriptorWithPixelFormat:MTLPixelFormatR8Uint width:width height:height mipmapped:NO];
         stencilDataDescriptor.usage = MTLTextureUsageRenderTarget | MTLTextureUsageShaderRead;
         stencilDataDescriptor.storageMode = MTLStorageModePrivate;
         bmtlsdo->pStencilData = [ctx.device newTextureWithDescriptor:stencilDataDescriptor];
         bmtlsdo->pAAStencilData = [ctx.device newTextureWithDescriptor:textureDescriptor];
+        bmtlsdo->pStencilDataBuf = [ctx.device newBufferWithLength:width*height options:MTLResourceStorageModeShared];
+        bmtlsdo->pAAStencilDataBuf = [ctx.device newBufferWithLength:width*height*4 options:MTLResourceStorageModeShared];
 
 
         MTLTextureDescriptor *stencilTextureDescriptor =
             [MTLTextureDescriptor texture2DDescriptorWithPixelFormat:MTLPixelFormatStencil8 width:width height:height mipmapped:NO];
         stencilTextureDescriptor.usage = MTLTextureUsageRenderTarget | MTLTextureUsageShaderRead | MTLTextureUsageShaderWrite;
@@ -200,10 +202,15 @@
             bmtlsdo->drawableType == MTLSD_RT_TEXTURE
             || bmtlsdo->drawableType == MTLSD_TEXTURE
             || bmtlsdo->drawableType == MTLSD_FLIP_BACKBUFFER
     ) {
         [(NSObject *)bmtlsdo->pTexture release];
+        [(NSObject *)bmtlsdo->pStencilTexture release];
+        [(NSObject *)bmtlsdo->pStencilData release];
+        [(NSObject *)bmtlsdo->pStencilDataBuf release];
+        [(NSObject *)bmtlsdo->pAAStencilData release];
+        [(NSObject *)bmtlsdo->pAAStencilDataBuf release];
         bmtlsdo->pTexture = NULL;
         bmtlsdo->drawableType = MTLSD_UNDEFINED;
     }
 }
 
