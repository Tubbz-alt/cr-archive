diff a/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal b/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
--- a/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
+++ b/src/java.desktop/macosx/native/libawt_lwawt/awt/shaders.metal
@@ -49,10 +49,11 @@
 };
 
 struct TxtShaderInOut {
     float4 position [[position]];
     float2 texCoords;
+    float2 tpCoords;
 };
 
 struct GradShaderInOut {
     float4 position [[position]];
 };
@@ -90,10 +91,28 @@
     out.position = transform.transformMatrix*pos4;
     out.texCoords = in.texCoords;
     return out;
 }
 
+vertex TxtShaderInOut vert_txt_tp(TxtVertexInput in [[stage_in]], constant AnchorData& anchorData [[buffer(FrameUniformBuffer)]], constant TransformMatrix& transform [[buffer(MatrixBuffer)]])
+{
+    TxtShaderInOut out;
+    float4 pos4 = float4(in.position, 0.0, 1.0);
+    out.position = transform.transformMatrix * pos4;
+
+    // Compute texture coordinates here w.r.t. anchor rect of texture paint
+    out.tpCoords.x = (anchorData.xParams[0] * in.position.x) +
+                      (anchorData.xParams[1] * in.position.y) +
+                      (anchorData.xParams[2] * out.position.w);
+    out.tpCoords.y = (anchorData.yParams[0] * in.position.x) +
+                      (anchorData.yParams[1] * in.position.y) +
+                      (anchorData.yParams[2] * out.position.w);
+    out.texCoords = in.texCoords;
+
+    return out;
+}
+
 fragment half4 frag_col(ColShaderInOut in [[stage_in]]) {
     return in.color;
 }
 
 fragment unsigned int frag_stencil(StencilShaderInOut in [[stage_in]]) {
@@ -116,10 +135,26 @@
         return half4(c.r, c.g, c.b , c.a);
     }
     return half4(pixelColor.r, pixelColor.g, pixelColor.b, srcA);
 }
 
+fragment half4 frag_txt_tp(TxtShaderInOut vert [[stage_in]],
+                       texture2d<float, access::sample> renderTexture [[texture(0)]],
+                       texture2d<float, access::sample> paintTexture [[texture(1)]])
+{
+    constexpr sampler textureSampler (address::repeat,
+      mag_filter::nearest,
+      min_filter::nearest);
+
+    float4 renderColor = renderTexture.sample(textureSampler, vert.texCoords);
+    float4 paintColor = paintTexture.sample(textureSampler, vert.tpCoords);
+    return half4(paintColor.r*renderColor.a,
+                 paintColor.g*renderColor.a,
+                 paintColor.b*renderColor.a,
+                 renderColor.a);
+}
+
 fragment half4 aa_frag_txt(
         TxtShaderInOut vert [[stage_in]],
         texture2d<float, access::sample> renderTexture [[texture(0)]],
         constant TxtFrameUniforms& uniforms [[buffer(1)]]
 )
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLContext.m
@@ -382,19 +382,20 @@
                     xp3:(jdouble)xp3
                     yp0:(jdouble)yp0
                     yp1:(jdouble)yp1
                     yp3:(jdouble)yp3
 {
-    J2dTraceLn(J2D_TRACE_INFO, "MTLContext.setTexturePaint");
-
     BMTLSDOps *srcOps = (BMTLSDOps *)jlong_to_ptr(pSrcOps);
     
     if (srcOps == NULL || srcOps->pTexture == NULL) {
         J2dRlsTraceLn(J2D_TRACE_ERROR, "MTLContext_setTexturePaint: texture paint - texture is null");
         return;
     }
 
+    J2dTraceLn1(J2D_TRACE_INFO, "MTLContext.setTexturePaint [tex=%p]", srcOps->pTexture);
+
+
     [_paint setTexture:useMask
                textureID:srcOps->pTexture
                 filter:filter
                    xp0:xp0
                    xp1:xp1
diff a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
--- a/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
+++ b/src/java.desktop/macosx/native/libawt_lwawt/java2d/metal/MTLPaints.m
@@ -299,36 +299,59 @@
     const bool stencil = isStencilUsed == JNI_TRUE;
 
     id<MTLRenderPipelineState> pipelineState = nil;
     if (isTexture) {
 
+      if (_paintState == sun_java2d_SunGraphics2D_PAINT_TEXTURE) {
+        pipelineState = [pipelineStateStorage getPipelineState:templateTexturePipelineDesc
+                                                vertexShaderId:@"vert_txt_tp"
+                                              fragmentShaderId:@"frag_txt_tp"
+                                                 compositeRule:[composite getRule]
+                                                          isAA:JNI_FALSE
+                                                      srcFlags:srcFlags
+                                                      dstFlags:dstFlags
+                                                 stencilNeeded:stencil];
+        [encoder setVertexBytes:&_anchor length:sizeof(_anchor) atIndex:FrameUniformBuffer];
+        [encoder setFragmentTexture:_paintTexture atIndex: 1];
+
+        struct TxtFrameUniforms uf = {RGBA_TO_V4(0), 0, srcFlags->isOpaque,
+                                      dstFlags->isOpaque};
+        [encoder setFragmentBytes:&uf length:sizeof(uf)
+                          atIndex:FrameUniformBuffer];
+
+      } else {
         if (isAA) {
-            pipelineState = [pipelineStateStorage getPipelineState:templateAATexturePipelineDesc
-                                                    vertexShaderId:@"vert_txt"
-                                                  fragmentShaderId:@"aa_frag_txt"
-                                                     compositeRule:[composite getRule]
-                                                              isAA:JNI_FALSE
-                                                          srcFlags:srcFlags
-                                                          dstFlags:dstFlags
-                                                     stencilNeeded:stencil];
+          pipelineState = [pipelineStateStorage
+              getPipelineState:templateAATexturePipelineDesc
+                vertexShaderId:@"vert_txt"
+              fragmentShaderId:@"aa_frag_txt"
+                 compositeRule:[composite getRule]
+                          isAA:JNI_FALSE
+                      srcFlags:srcFlags
+                      dstFlags:dstFlags
+                 stencilNeeded:stencil];
+
         } else {
-            pipelineState = [pipelineStateStorage getPipelineState:templateTexturePipelineDesc
-                                                    vertexShaderId:@"vert_txt"
-                                                  fragmentShaderId:@"frag_txt"
-                                                     compositeRule:[composite getRule]
-                                                              isAA:JNI_FALSE
-                                                          srcFlags:srcFlags
-                                                          dstFlags:dstFlags
-                                                     stencilNeeded:stencil];
+          pipelineState =
+              [pipelineStateStorage getPipelineState:templateTexturePipelineDesc
+                                      vertexShaderId:@"vert_txt"
+                                    fragmentShaderId:@"frag_txt"
+                                       compositeRule:[composite getRule]
+                                                isAA:JNI_FALSE
+                                            srcFlags:srcFlags
+                                            dstFlags:dstFlags
+                                       stencilNeeded:stencil];
         }
+
         if (_paintState == sun_java2d_SunGraphics2D_PAINT_ALPHACOLOR) {
-            struct TxtFrameUniforms uf = {RGBA_TO_V4(_color), 1, srcFlags->isOpaque, dstFlags->isOpaque };
-            [encoder setFragmentBytes:&uf length:sizeof(uf) atIndex:FrameUniformBuffer];
+          struct TxtFrameUniforms uf = {RGBA_TO_V4(_color), 1, srcFlags->isOpaque, dstFlags->isOpaque };
+          [encoder setFragmentBytes:&uf length:sizeof(uf) atIndex:FrameUniformBuffer];
         } else {
-            struct TxtFrameUniforms uf = {RGBA_TO_V4(0), 0, srcFlags->isOpaque, dstFlags->isOpaque };
-            [encoder setFragmentBytes:&uf length:sizeof(uf) atIndex:FrameUniformBuffer];
+          struct TxtFrameUniforms uf = {RGBA_TO_V4(0), 0, srcFlags->isOpaque, dstFlags->isOpaque };
+          [encoder setFragmentBytes:&uf length:sizeof(uf) atIndex:FrameUniformBuffer];
         }
+      }
     } else {
         if (_paintState == sun_java2d_SunGraphics2D_PAINT_ALPHACOLOR) {
             pipelineState = [pipelineStateStorage getPipelineState:templateRenderPipelineDesc
                                                     vertexShaderId:@"vert_col"
                                                   fragmentShaderId:@"frag_col"
