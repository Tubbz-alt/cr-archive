diff a/src/hotspot/share/runtime/arguments.cpp b/src/hotspot/share/runtime/arguments.cpp
--- a/src/hotspot/share/runtime/arguments.cpp
+++ b/src/hotspot/share/runtime/arguments.cpp
@@ -1854,27 +1854,10 @@
       reasonable_max = MAX2(reasonable_max, (julong)InitialHeapSize);
     } else if (!FLAG_IS_DEFAULT(MinHeapSize)) {
       reasonable_max = MAX2(reasonable_max, (julong)MinHeapSize);
     }
 
-    // With current TSan memory mapping of 48bit aarch64, it's very hard to allocate large continuous space.
-    // Add a limitation to avoid the allocation failure in machine with huge physical RAM.
-    // Does not support 39bit and 42bit aarch64 right now. Will add it if necessary.
-    TSAN_ONLY(
-#if defined(AARCH64)
-#define MAX_AVAILABLE_VM_SPACE_IN_AARCH64 (1024ULL * 1024ULL * 1024ULL * 16ULL) //16GB
-#define MSB_IN_AARCH64 (47) // Only support 48-bits space now.
-#define CURRENT_FUNCTION_ADDR (&__FUNCTION__)
-
-        // Based on current TSAN aarch64 memory mapping, libjvm.so will be loaded to high end address space.
-        u8 vm_addr_u8 = reinterpret_cast<u8>(CURRENT_FUNCTION_ADDR);
-        assert((vm_addr_u8  >> MSB_IN_AARCH64) == 0x1, "warning: allocation could fail in non 48-bit address space.");
-        if (reasonable_max > MAX_AVAILABLE_VM_SPACE_IN_AARCH64)
-            reasonable_max = MAX_AVAILABLE_VM_SPACE_IN_AARCH64;
-#endif
-    );
-
     log_trace(gc, heap)("  Maximum heap size " SIZE_FORMAT, (size_t) reasonable_max);
     FLAG_SET_ERGO(MaxHeapSize, (size_t)reasonable_max);
   }
 
   // If the minimum or initial heap_size have not been set or requested to be set
