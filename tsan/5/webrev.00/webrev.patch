diff a/make/autoconf/flags-cflags.m4 b/make/autoconf/flags-cflags.m4
--- a/make/autoconf/flags-cflags.m4
+++ b/make/autoconf/flags-cflags.m4
@@ -296,11 +296,13 @@
       C_O_FLAG_DEBUG="${C_O_FLAG_DEBUG} ${DISABLE_FORTIFY_CFLAGS}"
       C_O_FLAG_DEBUG_JVM="${C_O_FLAG_DEBUG_JVM} ${DISABLE_FORTIFY_CFLAGS}"
       C_O_FLAG_NONE="${C_O_FLAG_NONE} ${DISABLE_FORTIFY_CFLAGS}"
     fi
   elif test "x$TOOLCHAIN_TYPE" = xclang; then
-    if test "x$OPENJDK_TARGET_OS" = xmacosx; then
+    # Use -Os on aarch64 to work around known llvm issue,
+    # (see https://bugs.llvm.org/show_bug.cgi?id=44581) which makes release build crash in aarch64.
+    if test "x$OPENJDK_TARGET_OS" = xmacosx || test "x$OPENJDK_TARGET_CPU" = xaarch64; then
       # On MacOSX we optimize for size, something
       # we should do for all platforms?
       C_O_FLAG_HIGHEST_JVM="-Os"
       C_O_FLAG_HIGHEST="-Os"
       C_O_FLAG_HI="-Os"
@@ -564,10 +566,16 @@
         TOOLCHAIN_CFLAGS_JVM="$TOOLCHAIN_CFLAGS_JVM -mllvm -inlinehint-threshold=100000"
       fi
       TOOLCHAIN_CFLAGS_JDK="-pipe"
       TOOLCHAIN_CFLAGS_JDK_CONLY="-fno-strict-aliasing" # technically NOT for CXX
     fi
+
+    # Disable experimental isel due to a known issue in llvm-8, which generates wrong debug info.
+    # (see https://bugs.llvm.org/show_bug.cgi?id=40887)
+    if test "x$OPENJDK_TARGET_CPU" = xaarch64; then
+      TOOLCHAIN_CFLAGS_JVM="$TOOLCHAIN_CFLAGS_JVM -fno-experimental-isel"
+    fi
   elif test "x$TOOLCHAIN_TYPE" = xsolstudio; then
     TOOLCHAIN_FLAGS="-errtags -errfmt"
     TOOLCHAIN_CFLAGS="-errshort=tags"
 
     TOOLCHAIN_CFLAGS_JDK="-mt $TOOLCHAIN_FLAGS"
diff a/make/autoconf/hotspot.m4 b/make/autoconf/hotspot.m4
--- a/make/autoconf/hotspot.m4
+++ b/make/autoconf/hotspot.m4
@@ -553,11 +553,11 @@
   # Check if user explicitly disabled tsan
   if HOTSPOT_IS_JVM_FEATURE_DISABLED(tsan); then
     AC_MSG_RESULT([no, forced])
     INCLUDE_TSAN="false"
   # Only enable ThreadSanitizer on supported platforms
-  elif test "x$OPENJDK_TARGET_OS" = "xlinux" && test "x$OPENJDK_TARGET_CPU" = "xx86_64"; then
+  elif test "x$OPENJDK_TARGET_OS" = "xlinux" && (test "x$OPENJDK_TARGET_CPU" = "xx86_64" || test "x$OPENJDK_TARGET_CPU" = "xaarch64"); then
     AC_MSG_RESULT([yes])
     NON_MINIMAL_FEATURES="$NON_MINIMAL_FEATURES tsan"
     INCLUDE_TSAN="true"
   else
     AC_MSG_RESULT([no, platform not supported])
