diff a/src/hotspot/share/interpreter/templateTable.hpp b/src/hotspot/share/interpreter/templateTable.hpp
--- a/src/hotspot/share/interpreter/templateTable.hpp
+++ b/src/hotspot/share/interpreter/templateTable.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -330,11 +330,11 @@
   static void transition(TosState tos_in, TosState tos_out);// checks if in/out states expected by template generator correspond to table entries
 
   // initialization helpers
   static void def(Bytecodes::Code code, int flags, TosState in, TosState out, void (*gen)(            ), char filler );
   static void def(Bytecodes::Code code, int flags, TosState in, TosState out, void (*gen)(int arg     ), int arg     );
- static void def(Bytecodes::Code code, int flags, TosState in, TosState out, void (*gen)(bool arg    ), bool arg    );
+  static void def(Bytecodes::Code code, int flags, TosState in, TosState out, void (*gen)(bool arg    ), bool arg    );
   static void def(Bytecodes::Code code, int flags, TosState in, TosState out, void (*gen)(TosState tos), TosState tos);
   static void def(Bytecodes::Code code, int flags, TosState in, TosState out, void (*gen)(Operation op), Operation op);
   static void def(Bytecodes::Code code, int flags, TosState in, TosState out, void (*gen)(Condition cc), Condition cc);
 
   friend class Template;
@@ -349,10 +349,46 @@
 
   // Templates
   static Template* template_for     (Bytecodes::Code code)  { Bytecodes::check     (code); return &_template_table     [code]; }
   static Template* template_for_wide(Bytecodes::Code code)  { Bytecodes::wide_check(code); return &_template_table_wide[code]; }
 
+#if INCLUDE_TSAN
+   typedef void (*TsanMemoryReleaseAcquireFunction)(void* /* address */);
+
+   typedef void (*TsanMemoryReadWriteFunction)(void* /* address */,
+                                               Method* /* method */,
+                                               address /* bcp */);
+
+   // The corresponding tsan_acquire/release function for a
+   // TsanMemoryReadWriteFunction.
+   static TsanMemoryReleaseAcquireFunction tsan_release_acquire_method(
+       TsanMemoryReadWriteFunction tsan_function);
+
+   // Tell tsan that a member/static variable has been read from or written to.
+   // tsan_function must be one of the SharedRuntime::tsan_read/write*
+   // functions.
+   // Flags is the register that contains the field cache entry flags bitfield.
+   // Because the field may be volatile, for a write, this function must be
+   // called before the write; for a read, this function must be called after
+   // the read. This way the acquire/release is ordered correctly relative to the
+   // read/write.
+   static void tsan_observe_get_or_put(
+       const Address &field,
+       Register flags,
+       TsanMemoryReadWriteFunction tsan_function,
+       TosState tos);
+
+   // Tell tsan that an array has been read from or written to.
+   // tsan_function must be one of the SharedRuntime::tsan_read/write*
+   // functions.
+   // Unlike tsan_observe_get_or_put(), the ordering relative to the
+   // read/write does not matter since array loads/stores are never volatile.
+   static void tsan_observe_load_or_store(
+       const Address& address,
+       TsanMemoryReadWriteFunction tsan_function);
+#endif
+
   // Platform specifics
 #include CPU_HEADER(templateTable)
 
 };
 #endif /* !CC_INTERP */
