diff a/src/jdk.crypto.cryptoki/share/native/libj2pkcs11/p11_sessmgmt.c b/src/jdk.crypto.cryptoki/share/native/libj2pkcs11/p11_sessmgmt.c
--- a/src/jdk.crypto.cryptoki/share/native/libj2pkcs11/p11_sessmgmt.c
+++ b/src/jdk.crypto.cryptoki/share/native/libj2pkcs11/p11_sessmgmt.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 
 /* Copyright  (c) 2002 Graz University of Technology. All rights reserved.
  *
  * Redistribution and use in  source and binary forms, with or without
@@ -115,12 +115,12 @@
         ckpApplication = NULL_PTR;
         ckNotify = NULL_PTR;
 #endif /* NO_CALLBACKS */
 
     TRACE0("DEBUG: C_OpenSession");
-    TRACE1(", slotID=%u", ckSlotID);
-    TRACE1(", flags=%x", ckFlags);
+    TRACE1(", slotID=%lu", ckSlotID);
+    TRACE1(", flags=%lu", (unsigned long) ckFlags);
     TRACE0(" ... ");
 
     rv = (*ckpFunctions->C_OpenSession)(ckSlotID, ckFlags, ckpApplication, ckNotify, &ckSessionHandle);
     if (ckAssertReturnValueOK(env, rv) != CK_ASSERT_OK) {
 #ifndef NO_CALLBACKS
@@ -134,11 +134,11 @@
 #endif /* NO_CALLBACKS */
         return 0L;
     }
 
     TRACE0("got session");
-    TRACE1(", SessionHandle=%u", ckSessionHandle);
+    TRACE1(", SessionHandle=%lu", (unsigned long) ckSessionHandle);
     TRACE0(" ... ");
 
     jSessionHandle = ckULongToJLong(ckSessionHandle);
 
 #ifndef NO_CALLBACKS
