diff a/src/java.instrument/share/native/libinstrument/JPLISAgent.c b/src/java.instrument/share/native/libinstrument/JPLISAgent.c
--- a/src/java.instrument/share/native/libinstrument/JPLISAgent.c
+++ b/src/java.instrument/share/native/libinstrument/JPLISAgent.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -387,40 +387,41 @@
     /*
      *  OK, Java is up now. We can start everything that needs Java.
      */
 
     /*
-     *  First make our emergency fallback InternalError throwable.
+     *  First make our fallback InternalError throwable.
      */
     result = initializeFallbackError(jnienv);
-    jplis_assert(result);
+    jplis_assert_msg(result, "fallback init failed");
 
     /*
      *  Now make the InstrumentationImpl instance.
      */
     if ( result ) {
         result = createInstrumentationImpl(jnienv, agent);
-        jplis_assert(result);
+        jplis_assert_msg(result, "instrumentation instance creation failed");
     }
 
 
     /*
      *  Register a handler for ClassFileLoadHook (without enabling this event).
      *  Turn off the VMInit handler.
      */
     if ( result ) {
         result = setLivePhaseEventHandlers(agent);
-        jplis_assert(result);
+        jplis_assert_msg(result, "setting of live phase VM handlers failed");
     }
 
     /*
      *  Load the Java agent, and call the premain.
      */
     if ( result ) {
         result = startJavaAgent(agent, jnienv,
                                 agent->mAgentClassName, agent->mOptionsString,
                                 agent->mPremainCaller);
+        jplis_assert_msg(result, "agent load/premain call failed");
     }
 
     /*
      * Finally surrender all of the tracking data that we don't need any more.
      * If something is wrong, skip it, we will be aborting the JVM anyway.
@@ -1483,10 +1484,11 @@
              * the platform encoding is used.
              */
             platformLen = convertUft8ToPlatformString((char*)utf8Chars, utf8Len, platformChars, MAXPATHLEN);
             if (platformLen < 0) {
                 createAndThrowInternalError(jnienv);
+                (*jnienv)->ReleaseStringUTFChars(jnienv, jarFile, utf8Chars);
                 return;
             }
 
             (*jnienv)->ReleaseStringUTFChars(jnienv, jarFile, utf8Chars);
             errorOutstanding = checkForAndClearThrowable(jnienv);
