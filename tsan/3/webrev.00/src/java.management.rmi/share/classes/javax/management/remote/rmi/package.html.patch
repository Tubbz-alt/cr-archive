diff a/src/java.management.rmi/share/classes/javax/management/remote/rmi/package.html b/src/java.management.rmi/share/classes/javax/management/remote/rmi/package.html
--- a/src/java.management.rmi/share/classes/javax/management/remote/rmi/package.html
+++ b/src/java.management.rmi/share/classes/javax/management/remote/rmi/package.html
@@ -1,10 +1,10 @@
 <html>
 <head>
     <title>RMI connector</title>
 <!--
-Copyright (c) 2002, 2017, Oracle and/or its affiliates. All rights reserved.
+Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 
 This code is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License version 2 only, as
 published by the Free Software Foundation.  Oracle designates this
@@ -67,11 +67,11 @@
     </ul>
 
     <p>Addresses are covered in more detail below.</p>
 
 
-    <h3>Creating an RMI connector server</h3>
+    <h2>Creating an RMI connector server</h2>
 
     <p>The usual way to create an RMI connector server is to supply an
       RMI connector address to the method {@link
       javax.management.remote.JMXConnectorServerFactory#newJMXConnectorServer
       JMXConnectorServerFactory.newJMXConnectorServer}.  The MBean
@@ -84,11 +84,11 @@
       instance of {@link
       javax.management.remote.rmi.RMIConnectorServer
       RMIConnectorServer}, explicitly or through the MBean server's
       <code>createMBean</code> method.</p>
 
-    <h4>Choosing the RMI transport</h4>
+    <h3>Choosing the RMI transport</h3>
 
     <p>You can choose the RMI transport by specifying
       <code>rmi</code> in the <code><em>protocol</em></code> part of the
       <code>serviceURL</code> when creating the connector server.  You
       can also create specialized connector servers by instantiating
@@ -96,12 +96,12 @@
       javax.management.remote.rmi.RMIServerImpl RMIServerImpl} and
       supplying it to the <code>RMIConnectorServer</code>
       constructor.</p>
 
 
-    <h4><a id="servergen">Connector addresses generated by the
-	server</a></h4>
+    <h3><a id="servergen">Connector addresses generated by the
+	server</a></h3>
 
     <p>If the <code>serviceURL</code> you specify has an empty URL
       path (after the optional host and port), or if you do not
       specify a <code>serviceURL</code>, then the connector server
       will fabricate a new <code>JMXServiceURL</code> that clients can
@@ -155,12 +155,12 @@
       <code>JMXServiceURL</code> will have the local host name in its
       <code><em>host</em></code> part and no
       <code><em>port</em></code>.</p>
 
 
-    <h4><a id="directory">Connector addresses based on directory
-	entries</a></h4>
+    <h3><a id="directory">Connector addresses based on directory
+	entries</a></h3>
 
     <p>As an alternative to the generated addresses just described,
       the <code>serviceURL</code> address supplied when creating a
       connector server can specify a <em>directory address</em> in
       which to store the provided or generated <code>RMIServer</code>
@@ -262,11 +262,11 @@
     <p>However, it is good practice to use the name of the host
       where the connector server is running.  This is often different
       from the name of the directory host.</p>
 
 
-    <h4>Connector server attributes</h4>
+    <h3>Connector server attributes</h3>
 
     <p>When using the default JRMP transport, RMI socket factories can
       be specified using the attributes
       <code>jmx.remote.rmi.client.socket.factory</code> and
       <code>jmx.remote.rmi.server.socket.factory</code> in the
@@ -276,11 +276,11 @@
       java.rmi.server.RMIClientSocketFactory} and {@link
       java.rmi.server.RMIServerSocketFactory}, respectively.  These
       factories are used when creating the RMI objects associated with
       the connector.</p>
 
-    <h3>Creating an RMI connector client</h3>
+    <h2>Creating an RMI connector client</h2>
 
     <p>An RMI connector client is usually constructed using {@link
       javax.management.remote.JMXConnectorFactory}, with a
       <code>JMXServiceURL</code> that has <code>rmi</code> as its protocol.</p>
 
@@ -309,11 +309,11 @@
       javax.management.remote.rmi.RMIServer RMIServer}, you can
       construct an RMI connection directly by using the appropriate
       constructor of {@link javax.management.remote.rmi.RMIConnector
       RMIConnector}.</p>
 
-    <h3>Dynamic code downloading</h3>
+    <h2>Dynamic code downloading</h2>
 
     <p>If an RMI connector client or server receives from its peer an
       instance of a class that it does not know, and if dynamic code
       downloading is active for the RMI connection, then the class can
       be downloaded from a codebase specified by the peer.
