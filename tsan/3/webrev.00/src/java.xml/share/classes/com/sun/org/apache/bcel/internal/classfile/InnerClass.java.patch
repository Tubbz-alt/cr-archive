diff a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/InnerClass.java b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/InnerClass.java
--- a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/InnerClass.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/InnerClass.java
@@ -30,11 +30,10 @@
 /**
  * This class represents a inner class attribute, i.e., the class
  * indices of the inner and outer classes, the name and the attributes
  * of the inner class.
  *
- * @version $Id: InnerClass.java 1749603 2016-06-21 20:50:19Z ggregory $
  * @see InnerClasses
  */
 public final class InnerClass implements Cloneable, Node {
 
     private int inner_class_index;
@@ -95,105 +94,105 @@
      * Dump inner class attribute to file stream in binary format.
      *
      * @param file Output file stream
      * @throws IOException
      */
-    public final void dump( final DataOutputStream file ) throws IOException {
+    public void dump( final DataOutputStream file ) throws IOException {
         file.writeShort(inner_class_index);
         file.writeShort(outer_class_index);
         file.writeShort(inner_name_index);
         file.writeShort(inner_access_flags);
     }
 
 
     /**
      * @return access flags of inner class.
      */
-    public final int getInnerAccessFlags() {
+    public int getInnerAccessFlags() {
         return inner_access_flags;
     }
 
 
     /**
      * @return class index of inner class.
      */
-    public final int getInnerClassIndex() {
+    public int getInnerClassIndex() {
         return inner_class_index;
     }
 
 
     /**
      * @return name index of inner class.
      */
-    public final int getInnerNameIndex() {
+    public int getInnerNameIndex() {
         return inner_name_index;
     }
 
 
     /**
      * @return class index of outer class.
      */
-    public final int getOuterClassIndex() {
+    public int getOuterClassIndex() {
         return outer_class_index;
     }
 
 
     /**
      * @param inner_access_flags access flags for this inner class
      */
-    public final void setInnerAccessFlags( final int inner_access_flags ) {
+    public void setInnerAccessFlags( final int inner_access_flags ) {
         this.inner_access_flags = inner_access_flags;
     }
 
 
     /**
      * @param inner_class_index index into the constant pool for this class
      */
-    public final void setInnerClassIndex( final int inner_class_index ) {
+    public void setInnerClassIndex( final int inner_class_index ) {
         this.inner_class_index = inner_class_index;
     }
 
 
     /**
      * @param inner_name_index index into the constant pool for this class's name
      */
-    public final void setInnerNameIndex( final int inner_name_index ) { // TODO unused
+    public void setInnerNameIndex( final int inner_name_index ) { // TODO unused
         this.inner_name_index = inner_name_index;
     }
 
 
     /**
      * @param outer_class_index index into the constant pool for the owning class
      */
-    public final void setOuterClassIndex( final int outer_class_index ) { // TODO unused
+    public void setOuterClassIndex( final int outer_class_index ) { // TODO unused
         this.outer_class_index = outer_class_index;
     }
 
 
     /**
      * @return String representation.
      */
     @Override
-    public final String toString() {
+    public String toString() {
         return "InnerClass(" + inner_class_index + ", " + outer_class_index + ", "
                 + inner_name_index + ", " + inner_access_flags + ")";
     }
 
 
     /**
      * @return Resolved string representation
      */
-    public final String toString( final ConstantPool constant_pool ) {
+    public String toString( final ConstantPool constant_pool ) {
         String outer_class_name;
         String inner_name;
         String inner_class_name = constant_pool.getConstantString(inner_class_index,
                 Const.CONSTANT_Class);
-        inner_class_name = Utility.compactClassName(inner_class_name);
+        inner_class_name = Utility.compactClassName(inner_class_name, false);
         if (outer_class_index != 0) {
             outer_class_name = constant_pool.getConstantString(outer_class_index,
                     Const.CONSTANT_Class);
-            outer_class_name = " of class " + Utility.compactClassName(outer_class_name);
+            outer_class_name = " of class " + Utility.compactClassName(outer_class_name, false);
         } else {
             outer_class_name = "";
         }
         if (inner_name_index != 0) {
             inner_name = ((ConstantUtf8) constant_pool.getConstant(inner_name_index,
