diff a/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/util/ParserConfigurationSettings.java b/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/util/ParserConfigurationSettings.java
--- a/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/util/ParserConfigurationSettings.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/util/ParserConfigurationSettings.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -21,15 +21,15 @@
 package com.sun.org.apache.xerces.internal.util;
 
 import com.sun.org.apache.xerces.internal.impl.Constants;
 import com.sun.org.apache.xerces.internal.xni.parser.XMLComponentManager;
 import com.sun.org.apache.xerces.internal.xni.parser.XMLConfigurationException;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
-import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 /**
  * This class implements the basic operations for managing parser
  * configuration features and properties. This utility class can
  * be used as a base class for parser configurations or separately
@@ -40,10 +40,11 @@
  * (in the form of an <code>XMLComponentManager</code>) that allows
  * parser configuration settings to be "chained" together.
  *
  * @author Andy Clark, IBM
  *
+ * @LastModified: Apr 2019
  */
 public class ParserConfigurationSettings
     implements XMLComponentManager {
 
         protected static final String PARSER_SETTINGS =
@@ -54,17 +55,17 @@
     //
 
     // data
 
     /** Recognized properties. */
-    protected Set<String> fRecognizedProperties;
+    protected List<String> fRecognizedProperties;
 
     /** Properties. */
     protected Map<String, Object> fProperties;
 
     /** Recognized features. */
-    protected Set<String> fRecognizedFeatures;
+    protected List<String> fRecognizedFeatures;
 
     /** Features. */
     protected Map<String, Boolean> fFeatures;
 
     /** Parent parser configuration settings. */
@@ -84,12 +85,12 @@
      * parent settings object.
      */
     public ParserConfigurationSettings(XMLComponentManager parent) {
 
         // create storage for recognized features and properties
-        fRecognizedFeatures = new HashSet<>();
-        fRecognizedProperties = new HashSet<>();
+        fRecognizedFeatures = new ArrayList<>();
+        fRecognizedProperties = new ArrayList<>();
 
         // create table for features and properties
         fFeatures = new HashMap<>();
         fProperties = new HashMap<>();
 
@@ -193,11 +194,11 @@
      *                                   only throw this exception if
      *                                   it is <strong>really</strong>
      *                                   a critical error.
      */
     @Override
-    public final boolean getFeature(String featureId)
+    public boolean getFeature(String featureId)
         throws XMLConfigurationException {
 
         FeatureState state = getFeatureState(featureId);
         if (state.isExceptional()) {
             throw new XMLConfigurationException(state.status, featureId);
@@ -220,11 +221,11 @@
 
         if (state == null) {
             FeatureState checkState = checkFeature(featureId);
             if (checkState.isExceptional()) {
                 return checkState;
-            }
+        }
             return FeatureState.is(false);
         }
         return FeatureState.is(state);
     }
 
@@ -239,11 +240,11 @@
      *                                   only throw this exception if
      *                                   it is <strong>really</strong>
      *                                   a critical error.
      */
     @Override
-    public final Object getProperty(String propertyId)
+    public Object getProperty(String propertyId)
         throws XMLConfigurationException {
 
         PropertyState state = getPropertyState(propertyId);
         if (state.isExceptional()) {
             throw new XMLConfigurationException(state.status, propertyId);
@@ -268,11 +269,11 @@
 
         if (propertyValue == null) {
             PropertyState state = checkProperty(propertyId);
             if (state.isExceptional()) {
                 return state;
-            }
+        }
         }
 
         return PropertyState.is(propertyValue);
     }
 
@@ -323,11 +324,11 @@
         if (!fRecognizedProperties.contains(propertyId)) {
             if (fParentSettings != null) {
                 PropertyState state = fParentSettings.getPropertyState(propertyId);
                 if (state.isExceptional()) {
                     return state;
-                }
+            }
             }
             else {
                 return PropertyState.NOT_RECOGNIZED;
             }
         }
