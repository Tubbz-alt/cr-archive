diff a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/FieldGenOrMethodGen.java b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/FieldGenOrMethodGen.java
--- a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/FieldGenOrMethodGen.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/FieldGenOrMethodGen.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  */
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -25,79 +25,86 @@
 import com.sun.org.apache.bcel.internal.Const;
 import com.sun.org.apache.bcel.internal.classfile.AccessFlags;
 import com.sun.org.apache.bcel.internal.classfile.Attribute;
 
 /**
- * Super class for FieldGen and MethodGen objects, since they have some methods
- * in common!
+ * Super class for FieldGen and MethodGen objects, since they have
+ * some methods in common!
  *
- * @version $Id: FieldGenOrMethodGen.java 1749603 2016-06-21 20:50:19Z ggregory
- * $
+ * @LastModified: Jun 2020
  */
 public abstract class FieldGenOrMethodGen extends AccessFlags implements NamedAndTyped, Cloneable {
 
     private String name;
     private Type type;
     private ConstantPoolGen cp;
 
     private final List<Attribute> attribute_vec = new ArrayList<>();
 
     // @since 6.0
-    private final List<AnnotationEntryGen> annotation_vec = new ArrayList<>();
+    private final List<AnnotationEntryGen>       annotation_vec= new ArrayList<>();
+
 
     protected FieldGenOrMethodGen() {
     }
 
+
     /**
      * @since 6.0
      */
     protected FieldGenOrMethodGen(final int access_flags) { // TODO could this be package protected?
         super(access_flags);
     }
 
     @Override
-    public void setType(final Type type) { // TODO could be package-protected?
+    public void setType( final Type type ) { // TODO could be package-protected?
         if (type.getType() == Const.T_ADDRESS) {
             throw new IllegalArgumentException("Type can not be " + type);
         }
         this.type = type;
     }
 
+
     @Override
     public Type getType() {
         return type;
     }
 
-    /**
-     * @return name of method/field.
+
+    /** @return name of method/field.
      */
     @Override
     public String getName() {
         return name;
     }
 
+
     @Override
-    public void setName(final String name) { // TODO could be package-protected?
+    public void setName( final String name ) { // TODO could be package-protected?
         this.name = name;
     }
 
+
     public ConstantPoolGen getConstantPool() {
         return cp;
     }
 
-    public void setConstantPool(final ConstantPoolGen cp) { // TODO could be package-protected?
+
+    public void setConstantPool( final ConstantPoolGen cp ) { // TODO could be package-protected?
         this.cp = cp;
     }
 
+
     /**
-     * Add an attribute to this method. Currently, the JVM knows about the
-     * `Code', `ConstantValue', `Synthetic' and `Exceptions' attributes. Other
-     * attributes will be ignored by the JVM but do no harm.
+     * Add an attribute to this method. Currently, the JVM knows about
+     * the `Code', `ConstantValue', `Synthetic' and `Exceptions'
+     * attributes. Other attributes will be ignored by the JVM but do no
+     * harm.
      *
      * @param a attribute to be added
      */
-    public void addAttribute(final Attribute a) {
+    public void addAttribute( final Attribute a ) {
         attribute_vec.add(a);
     }
 
     /**
      * @since 6.0
@@ -105,14 +112,15 @@
     protected void addAnnotationEntry(final AnnotationEntryGen ag) // TODO could this be package protected?
     {
         annotation_vec.add(ag);
     }
 
+
     /**
      * Remove an attribute.
      */
-    public void removeAttribute(final Attribute a) {
+    public void removeAttribute( final Attribute a ) {
         attribute_vec.remove(a);
     }
 
     /**
      * @since 6.0
@@ -120,10 +128,11 @@
     protected void removeAnnotationEntry(final AnnotationEntryGen ag) // TODO could this be package protected?
     {
         annotation_vec.remove(ag);
     }
 
+
     /**
      * Remove all attributes.
      */
     public void removeAttributes() {
         attribute_vec.clear();
@@ -135,10 +144,11 @@
     protected void removeAnnotationEntries() // TODO could this be package protected?
     {
         annotation_vec.clear();
     }
 
+
     /**
      * @return all attributes of this method.
      */
     public Attribute[] getAttributes() {
         final Attribute[] attributes = new Attribute[attribute_vec.size()];
@@ -146,19 +156,20 @@
         return attributes;
     }
 
     public AnnotationEntryGen[] getAnnotationEntries() {
         final AnnotationEntryGen[] annotations = new AnnotationEntryGen[annotation_vec.size()];
-        annotation_vec.toArray(annotations);
-        return annotations;
-    }
+          annotation_vec.toArray(annotations);
+          return annotations;
+      }
 
-    /**
-     * @return signature of method/field.
+
+    /** @return signature of method/field.
      */
     public abstract String getSignature();
 
+
     @Override
     public Object clone() {
         try {
             return super.clone();
         } catch (final CloneNotSupportedException e) {
