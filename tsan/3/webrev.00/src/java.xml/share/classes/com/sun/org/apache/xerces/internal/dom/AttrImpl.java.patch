diff a/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/AttrImpl.java b/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/AttrImpl.java
--- a/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/AttrImpl.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/AttrImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -108,10 +108,11 @@
  *
  * @author Arnaud  Le Hors, IBM
  * @author Joe Kesselman, IBM
  * @author Andy Clark, IBM
  * @since PR-DOM-Level-1-19980818.
+ * @LastModified: Apr 2019
  *
  */
 public class AttrImpl
     extends NodeImpl
     implements Attr, TypeInfo{
@@ -138,12 +139,10 @@
 
     /** Type information */
     // REVISIT: we are losing the type information in DOM during serialization
     transient Object type;
 
-    protected TextImpl textNode = null;
-
     //
     // Constructors
     //
 
     /**
@@ -190,18 +189,18 @@
 
     /**
      * NON-DOM
      * set the ownerDocument of this node and its children
      */
-    void setOwnerDocument(CoreDocumentImpl doc) {
+    protected void setOwnerDocument(CoreDocumentImpl doc) {
         if (needsSyncChildren()) {
             synchronizeChildren();
         }
         super.setOwnerDocument(doc);
         if (!hasStringValue()) {
             for (ChildNode child = (ChildNode) value;
-                 child != null; child = child.nextSibling) {
+                child != null; child = child.nextSibling) {
                 child.setOwnerDocument(doc);
             }
         }
     }
 
@@ -347,10 +346,12 @@
             throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
         }
 
         Element ownerElement = getOwnerElement();
         String oldvalue = "";
+        TextImpl textNode = null;
+
         if (needsSyncData()) {
             synchronizeData();
         }
         if (needsSyncChildren()) {
             synchronizeChildren();
@@ -361,17 +362,11 @@
                 // event listeners waiting for them to disconnect.
                 if (hasStringValue()) {
                     oldvalue = (String) value;
                     // create an actual text node as our child so
                     // that we can use it in the event
-                    if (textNode == null) {
-                        textNode = (TextImpl)
-                            ownerDocument.createTextNode((String) value);
-                    }
-                    else {
-                        textNode.data = (String) value;
-                    }
+                    textNode = (TextImpl) ownerDocument.createTextNode((String) value);
                     value = textNode;
                     textNode.isFirstChild(true);
                     textNode.previousSibling = textNode;
                     textNode.ownerNode = this;
                     textNode.isOwned(true);
@@ -412,13 +407,20 @@
         // capture/bubble listeners on the Attr.
         // Note that aggregate events are NOT dispatched here,
         // since we need to combine the remove and insert.
         isSpecified(true);
         if (ownerDocument.getMutationEvents()) {
-            // if there are any event handlers create a real node
-            internalInsertBefore(ownerDocument.createTextNode(newvalue),
-                                 null, true);
+            // if there are any event handlers create a real node or
+            // reuse the one we synthesized for the remove notifications
+            // if it exists.
+            if (textNode == null) {
+                textNode = (TextImpl) ownerDocument.createTextNode(newvalue);
+            }
+            else {
+                textNode.data = newvalue;
+            }
+            internalInsertBefore(textNode, null, true);
             hasStringValue(false);
             // notify document
             ownerDocument.modifiedAttrValue(this, oldvalue);
         } else {
             // directly store the string
@@ -1032,11 +1034,11 @@
 
     /**
      * NodeList method: Return the Nth immediate child of this node, or
      * null if the index is out of bounds.
      * @return org.w3c.dom.Node
-     * @param Index int
+     * @param index int
      */
     public Node item(int index) {
 
         if (hasStringValue()) {
             if (index != 0 || value == null) {
@@ -1074,16 +1076,16 @@
     /**
      * Introduced in DOM Level 3. <p>
      * Checks if a type is derived from another by restriction. See:
      * http://www.w3.org/TR/DOM-Level-3-Core/core.html#TypeInfo-isDerivedFrom
      *
-     * @param ancestorNS
+     * @param typeNamespaceArg
      *        The namspace of the ancestor type declaration
-     * @param ancestorName
+     * @param typeNameArg
      *        The name of the ancestor type declaration
-     * @param type
-     *        The reference type definition
+     * @param derivationMethod
+     *        The derivation method
      *
      * @return boolean True if the type is derived by restriciton for the
      *         reference type
      */
     public boolean isDerivedFrom(String typeNamespaceArg,
