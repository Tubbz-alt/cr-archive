diff a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BASTORE.java b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BASTORE.java
--- a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BASTORE.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BASTORE.java
@@ -19,34 +19,33 @@
  * limitations under the License.
  */
 package com.sun.org.apache.bcel.internal.generic;
 
 /**
- * BASTORE - Store into byte or boolean array
+ * BASTORE -  Store into byte or boolean array
  * <PRE>Stack: ..., arrayref, index, value -&gt; ...</PRE>
  *
- * @version $Id: BASTORE.java 1747278 2016-06-07 17:28:43Z britter $
  */
 public class BASTORE extends ArrayInstruction implements StackConsumer {
 
-    /**
-     * Store byte or boolean into array
+    /** Store byte or boolean into array
      */
     public BASTORE() {
         super(com.sun.org.apache.bcel.internal.Const.BASTORE);
     }
 
+
     /**
-     * Call corresponding visitor method(s). The order is: Call visitor methods
-     * of implemented interfaces first, then call methods according to the class
-     * hierarchy in descending order, i.e., the most specific visitXXX() call
-     * comes last.
+     * Call corresponding visitor method(s). The order is:
+     * Call visitor methods of implemented interfaces first, then
+     * call methods according to the class hierarchy in descending order,
+     * i.e., the most specific visitXXX() call comes last.
      *
      * @param v Visitor object
      */
     @Override
-    public void accept(final Visitor v) {
+    public void accept( final Visitor v ) {
         v.visitStackConsumer(this);
         v.visitExceptionThrower(this);
         v.visitTypedInstruction(this);
         v.visitArrayInstruction(this);
         v.visitBASTORE(this);
