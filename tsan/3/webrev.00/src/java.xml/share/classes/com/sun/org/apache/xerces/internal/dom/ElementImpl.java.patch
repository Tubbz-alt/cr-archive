diff a/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/ElementImpl.java b/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/ElementImpl.java
--- a/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/ElementImpl.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/ElementImpl.java
@@ -1,8 +1,7 @@
 /*
- * reserved comment block
- * DO NOT REMOVE OR ALTER!
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -53,51 +52,45 @@
  * @author Arnaud Le Hors, IBM
  * @author Joe Kesselman, IBM
  * @author Andy Clark, IBM
  * @author Ralf Pfeiffer, IBM
  * @since PR-DOM-Level-1-19980818.
+ * @LastModified: Apr 2019
  */
 public class ElementImpl
-        extends ParentNode
-        implements Element, ElementTraversal, TypeInfo {
+    extends ParentNode
+    implements Element, ElementTraversal, TypeInfo {
 
     //
     // Constants
     //
-    /**
-     * Serialization version.
-     */
+
+    /** Serialization version. */
     static final long serialVersionUID = 3717253516652722278L;
     //
     // Data
     //
 
-    /**
-     * Element name.
-     */
+    /** Element name. */
     protected String name;
 
-    /**
-     * Attributes.
-     */
+    /** Attributes. */
     protected AttributeMap attributes;
 
     //
     // Constructors
     //
-    /**
-     * Factory constructor.
-     */
+
+    /** Factory constructor. */
     public ElementImpl(CoreDocumentImpl ownerDoc, String name) {
         super(ownerDoc);
         this.name = name;
         needsSyncData(true);    // synchronizeData will initialize attributes
     }
 
     // for ElementNSImpl
-    protected ElementImpl() {
-    }
+    protected ElementImpl() {}
 
     // Support for DOM Level 3 renameNode method.
     // Note: This only deals with part of the pb. CoreDocumentImpl
     // does all the work.
     void rename(String name) {
@@ -107,13 +100,13 @@
         if (ownerDocument.errorChecking) {
             int colon1 = name.indexOf(':');
             if (colon1 != -1) {
                 String msg
                         = DOMMessageFormatter.formatMessage(
-                                DOMMessageFormatter.DOM_DOMAIN,
-                                "NAMESPACE_ERR",
-                                null);
+                            DOMMessageFormatter.DOM_DOMAIN,
+                            "NAMESPACE_ERR",
+                            null);
                 throw new DOMException(DOMException.NAMESPACE_ERR, msg);
             }
             if (!CoreDocumentImpl.isXMLName(name, ownerDocument.isXML11Version())) {
                 String msg = DOMMessageFormatter.formatMessage(
                         DOMMessageFormatter.DOM_DOMAIN,
@@ -285,11 +278,11 @@
             synchronizeData();
         }
         if (attributes == null) {
             return "";
         }
-        Attr attr = (Attr) (attributes.getNamedItem(name));
+        Attr attr = (Attr)(attributes.getNamedItem(name));
         return (attr == null) ? "" : attr.getValue();
 
     } // getAttribute(String):String
 
     /**
@@ -305,11 +298,11 @@
             synchronizeData();
         }
         if (attributes == null) {
             return null;
         }
-        return (Attr) attributes.getNamedItem(name);
+        return (Attr)attributes.getNamedItem(name);
 
     } // getAttributeNode(String):Attr
 
     /**
      * Returns a NodeList of all descendent nodes (children, grandchildren, and
@@ -451,11 +444,11 @@
      * this Element.
      * @throws DOMException(NO_MODIFICATION_ALLOWED_ERR) if the node is
      * readonly.
      */
     public Attr removeAttributeNode(Attr oldAttr)
-            throws DOMException {
+        throws DOMException {
 
         if (ownerDocument.errorChecking && isReadOnly()) {
             String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
             throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
         }
@@ -489,40 +482,39 @@
      * (Attribute factory will do that test for us.)
      *
      * @throws DOMException(NO_MODIFICATION_ALLOWED_ERR) if the node is
      * readonly.
      */
-    public void setAttribute(String name, String value) {
-
-        if (ownerDocument.errorChecking && isReadOnly()) {
-            String msg
-                    = DOMMessageFormatter.formatMessage(
-                            DOMMessageFormatter.DOM_DOMAIN,
-                            "NO_MODIFICATION_ALLOWED_ERR",
-                            null);
-            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
-        }
+        public void setAttribute(String name, String value) {
+
+                if (ownerDocument.errorChecking && isReadOnly()) {
+                    String msg = DOMMessageFormatter.formatMessage(
+                                        DOMMessageFormatter.DOM_DOMAIN,
+                                        "NO_MODIFICATION_ALLOWED_ERR",
+                                        null);
+                    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
+                }
 
-        if (needsSyncData()) {
-            synchronizeData();
-        }
+                if (needsSyncData()) {
+                        synchronizeData();
+                }
 
-        Attr newAttr = getAttributeNode(name);
-        if (newAttr == null) {
-            newAttr = getOwnerDocument().createAttribute(name);
+                Attr newAttr = getAttributeNode(name);
+                if (newAttr == null) {
+                        newAttr = getOwnerDocument().createAttribute(name);
 
-            if (attributes == null) {
-                attributes = new AttributeMap(this, null);
-            }
+                        if (attributes == null) {
+                                attributes = new AttributeMap(this, null);
+                        }
 
-            newAttr.setNodeValue(value);
-            attributes.setNamedItem(newAttr);
-        } else {
-            newAttr.setNodeValue(value);
-        }
+                        newAttr.setNodeValue(value);
+                        attributes.setNamedItem(newAttr);
+                } else {
+                        newAttr.setNodeValue(value);
+                }
 
-    } // setAttribute(String,String)
+        } // setAttribute(String,String)
 
     /**
      * Add a new attribute/value pair, or replace the value of the existing
      * attribute with that name.
      * <P>
@@ -544,17 +536,17 @@
 
         if (ownerDocument.errorChecking) {
             if (isReadOnly()) {
                 String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                 throw new DOMException(
-                        DOMException.NO_MODIFICATION_ALLOWED_ERR,
-                        msg);
+                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
+                                     msg);
             }
 
             if (newAttr.getOwnerDocument() != ownerDocument) {
                 String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
-                throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
+                    throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
             }
         }
 
         if (attributes == null) {
             attributes = new AttributeMap(this, null);
@@ -587,11 +579,11 @@
 
         if (attributes == null) {
             return "";
         }
 
-        Attr attr = (Attr) (attributes.getNamedItemNS(namespaceURI, localName));
+        Attr attr = (Attr)(attributes.getNamedItemNS(namespaceURI, localName));
         return (attr == null) ? "" : attr.getValue();
 
     } // getAttributeNS(String,String):String
 
     /**
@@ -631,45 +623,42 @@
      * string, or if if the qualifiedName has a prefix different from "xml" and
      * "xmlns" and the namespaceURI is null or an empty string.
      * @since WD-DOM-Level-2-19990923
      */
     public void setAttributeNS(String namespaceURI, String qualifiedName,
-            String value) {
-        if (ownerDocument.errorChecking && isReadOnly()) {
-            String msg
-                    = DOMMessageFormatter.formatMessage(
-                            DOMMessageFormatter.DOM_DOMAIN,
-                            "NO_MODIFICATION_ALLOWED_ERR",
-                            null);
-            throw new DOMException(
-                    DOMException.NO_MODIFICATION_ALLOWED_ERR,
-                    msg);
-        }
-        if (needsSyncData()) {
-            synchronizeData();
-        }
-        int index = qualifiedName.indexOf(':');
-        String prefix, localName;
-        if (index < 0) {
-            prefix = null;
-            localName = qualifiedName;
-        } else {
-            prefix = qualifiedName.substring(0, index);
-            localName = qualifiedName.substring(index + 1);
-        }
-        Attr newAttr = getAttributeNodeNS(namespaceURI, localName);
-        if (newAttr == null) {
+                                          String value) {
+                if (ownerDocument.errorChecking && isReadOnly()) {
+                    String msg = DOMMessageFormatter.formatMessage(
+                                        DOMMessageFormatter.DOM_DOMAIN,
+                                        "NO_MODIFICATION_ALLOWED_ERR",
+                                        null);
+                    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
+                }
+                if (needsSyncData()) {
+                        synchronizeData();
+                }
+                int index = qualifiedName.indexOf(':');
+                String prefix, localName;
+                if (index < 0) {
+                        prefix = null;
+                        localName = qualifiedName;
+                } else {
+                        prefix = qualifiedName.substring(0, index);
+                        localName = qualifiedName.substring(index + 1);
+                }
+                Attr newAttr = getAttributeNodeNS(namespaceURI, localName);
+                if (newAttr == null) {
             // REVISIT: this is not efficient, we are creating twice the same
             //          strings for prefix and localName.
-            newAttr = getOwnerDocument().createAttributeNS(
-                    namespaceURI,
-                    qualifiedName);
-            if (attributes == null) {
-                attributes = new AttributeMap(this, null);
-            }
-            newAttr.setNodeValue(value);
-            attributes.setNamedItemNS(newAttr);
+                        newAttr = getOwnerDocument().createAttributeNS(
+                                        namespaceURI,
+                                        qualifiedName);
+                        if (attributes == null) {
+                                attributes = new AttributeMap(this, null);
+                        }
+                        newAttr.setNodeValue(value);
+                        attributes.setNamedItemNS(newAttr);
                 }
                 else {
             if (newAttr instanceof AttrNSImpl){
                 String origNodeName = ((AttrNSImpl) newAttr).name;
                 String newName = (prefix!=null) ? (prefix+":"+localName) : localName;
@@ -691,16 +680,16 @@
                 //      elem.setAttribute("name", "value");
                 //      elem.setAttributeNS(null, "name", "value");
                 // This case is not defined by the DOM spec, we choose
                 // to create a new attribute in this case and remove an old one from the tree
                 // note this might cause events to be propagated or user data to be lost
-                newAttr = new AttrNSImpl((CoreDocumentImpl)getOwnerDocument(), namespaceURI, qualifiedName, localName);
+                newAttr = ((CoreDocumentImpl)getOwnerDocument()).createAttributeNS(namespaceURI, qualifiedName, localName);
                 attributes.setNamedItemNS(newAttr);
             }
 
-            newAttr.setNodeValue(value);
-        }
+                        newAttr.setNodeValue(value);
+                }
 
     } // setAttributeNS(String,String,String)
 
     /**
      * Introduced in DOM Level 2.
@@ -751,11 +740,11 @@
             synchronizeData();
         }
         if (attributes == null) {
             return null;
         }
-        return (Attr) attributes.getNamedItemNS(namespaceURI, localName);
+        return (Attr)attributes.getNamedItemNS(namespaceURI, localName);
 
     } // getAttributeNodeNS(String,String):Attr
 
     /**
      * Introduced in DOM Level 2.
@@ -786,13 +775,13 @@
             synchronizeData();
         }
         if (ownerDocument.errorChecking) {
             if (isReadOnly()) {
                 String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
-                throw new DOMException(
-                        DOMException.NO_MODIFICATION_ALLOWED_ERR,
-                        msg);
+                    throw new DOMException(
+                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
+                                     msg);
             }
             if (newAttr.getOwnerDocument() != ownerDocument) {
                 String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "WRONG_DOCUMENT_ERR", null);
                 throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, msg);
             }
@@ -805,12 +794,12 @@
         return (Attr) attributes.setNamedItemNS(newAttr);
 
     } // setAttributeNodeNS(Attr):Attr
 
     /**
-     * NON-DOM: sets attribute node for this element
-     */
+      * NON-DOM: sets attribute node for this element
+      */
     protected int setXercesAttributeNode(Attr attr) {
 
         if (needsSyncData()) {
             synchronizeData();
         }
@@ -821,12 +810,12 @@
         return attributes.addItem(attr);
 
     }
 
     /**
-     * NON-DOM: get inded of an attribute
-     */
+      * NON-DOM: get inded of an attribute
+      */
     protected int getXercesAttribute(String namespaceURI, String localName) {
 
         if (needsSyncData()) {
             synchronizeData();
         }
@@ -877,11 +866,11 @@
      * @return NodeList A new NodeList object containing all the matched
      * Elements.
      * @since WD-DOM-Level-2-19990923
      */
     public NodeList getElementsByTagNameNS(String namespaceURI,
-            String localName) {
+                                           String localName) {
         return new DeepNodeListImpl(this, namespaceURI, localName);
     }
 
     /**
      * DOM Level 3 WD- Experimental. Override inherited behavior from NodeImpl
@@ -909,11 +898,11 @@
                     if (n2 == null || !((NodeImpl) n1).isEqualNode(n2)) {
                         return false;
                     }
                 } else {
                     Node n2 = map2.getNamedItemNS(n1.getNamespaceURI(),
-                            n1.getLocalName());
+                                                  n1.getLocalName());
                     if (n2 == null || !((NodeImpl) n1).isEqualNode(n2)) {
                         return false;
                     }
                 }
             }
@@ -928,18 +917,19 @@
         if (needsSyncData()) {
             synchronizeData();
         }
         if (ownerDocument.errorChecking) {
             if (isReadOnly()) {
-                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
+                String msg = DOMMessageFormatter.formatMessage(
+                        DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                 throw new DOMException(
-                        DOMException.NO_MODIFICATION_ALLOWED_ERR,
-                        msg);
+                        DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
             }
 
             if (at.getOwnerElement() != this) {
-                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
+                String msg = DOMMessageFormatter.formatMessage(
+                        DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                 throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
             }
         }
         ((AttrImpl) at).isIdAttribute(makeId);
         if (!makeId) {
@@ -957,26 +947,25 @@
             synchronizeData();
         }
         Attr at = getAttributeNode(name);
 
         if (at == null) {
-            String msg = DOMMessageFormatter.formatMessage(
-                    DOMMessageFormatter.DOM_DOMAIN,
-                    "NOT_FOUND_ERR", null);
+                String msg = DOMMessageFormatter.formatMessage(
+                        DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
             throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
-        }
+                }
 
         if (ownerDocument.errorChecking) {
             if (isReadOnly()) {
-                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
-                throw new DOMException(
-                        DOMException.NO_MODIFICATION_ALLOWED_ERR,
-                        msg);
+                String msg = DOMMessageFormatter.formatMessage(
+                        DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
+                throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
             }
 
             if (at.getOwnerElement() != this) {
-                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
+                String msg = DOMMessageFormatter.formatMessage(
+                        DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
                 throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
             }
         }
 
         ((AttrImpl) at).isIdAttribute(makeId);
@@ -989,34 +978,33 @@
 
     /**
      * DOM Level 3: register the given attribute node as an ID attribute
      */
     public void setIdAttributeNS(String namespaceURI, String localName,
-            boolean makeId) {
+                                    boolean makeId) {
         if (needsSyncData()) {
             synchronizeData();
         }
         //if namespace uri is empty string, set it to 'null'
         if (namespaceURI != null) {
             namespaceURI = (namespaceURI.length() == 0) ? null : namespaceURI;
         }
         Attr at = getAttributeNodeNS(namespaceURI, localName);
 
         if (at == null) {
-            String msg = DOMMessageFormatter.formatMessage(
-                    DOMMessageFormatter.DOM_DOMAIN,
-                    "NOT_FOUND_ERR", null);
+                String msg = DOMMessageFormatter.formatMessage(
+                        DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
             throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
-        }
+                }
 
-        if (ownerDocument.errorChecking) {
+                if (ownerDocument.errorChecking) {
             if (isReadOnly()) {
                 String msg = DOMMessageFormatter.formatMessage(
                         DOMMessageFormatter.DOM_DOMAIN, "NO_MODIFICATION_ALLOWED_ERR", null);
                 throw new DOMException(
-                        DOMException.NO_MODIFICATION_ALLOWED_ERR,
-                        msg);
+                                     DOMException.NO_MODIFICATION_ALLOWED_ERR,
+                                     msg);
             }
 
             if (at.getOwnerElement() != this) {
                 String msg = DOMMessageFormatter.formatMessage(
                         DOMMessageFormatter.DOM_DOMAIN, "NOT_FOUND_ERR", null);
@@ -1027,18 +1015,18 @@
         if (!makeId) {
             ownerDocument.removeIdentifier(at.getValue());
         } else {
             ownerDocument.putIdentifier(at.getValue(), this);
         }
-    }
+   }
 
     /**
      * @see org.w3c.dom.TypeInfo#getTypeName()
      */
-    public String getTypeName() {
+     public String getTypeName() {
         return null;
-    }
+     }
 
     /**
      * @see org.w3c.dom.TypeInfo#getTypeNamespace()
      */
     public String getTypeNamespace() {
@@ -1057,21 +1045,20 @@
      *
      * @return boolean True if the type is derived by restriction for the
      * reference type
      */
     public boolean isDerivedFrom(String typeNamespaceArg,
-            String typeNameArg,
-            int derivationMethod) {
+                                 String typeNameArg,
+                                 int derivationMethod) {
 
         return false;
     }
 
-    /**
-     * Method getSchemaTypeInfo.
-     *
-     * @return TypeInfo
-     */
+        /**
+         * Method getSchemaTypeInfo.
+         * @return TypeInfo
+         */
     public TypeInfo getSchemaTypeInfo() {
         if (needsSyncData()) {
             synchronizeData();
         }
         return this;
@@ -1157,12 +1144,11 @@
         DocumentTypeImpl doctype
                 = (DocumentTypeImpl) ownerDocument.getDoctype();
         if (doctype == null) {
             return null;
         }
-        ElementDefinitionImpl eldef
-                = (ElementDefinitionImpl) doctype.getElements()
+        ElementDefinitionImpl eldef = (ElementDefinitionImpl)doctype.getElements()
                 .getNamedItem(getNodeName());
         if (eldef == null) {
             return null;
         }
         return (NamedNodeMapImpl) eldef.getAttributes();
