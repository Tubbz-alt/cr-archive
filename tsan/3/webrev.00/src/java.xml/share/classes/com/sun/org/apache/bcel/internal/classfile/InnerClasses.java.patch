diff a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/InnerClasses.java b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/InnerClasses.java
--- a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/InnerClasses.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/InnerClasses.java
@@ -31,11 +31,10 @@
  * This class is derived from <em>Attribute</em> and denotes that this class
  * is an Inner class of another.
  * to the source file of this class.
  * It is instantiated from the <em>Attribute.readAttribute()</em> method.
  *
- * @version $Id: InnerClasses.java 1749603 2016-06-21 20:50:19Z ggregory $
  * @see     Attribute
  */
 public final class InnerClasses extends Attribute {
 
     private InnerClass[] inner_classes;
@@ -101,11 +100,11 @@
      *
      * @param file Output file stream
      * @throws IOException
      */
     @Override
-    public final void dump( final DataOutputStream file ) throws IOException {
+    public void dump( final DataOutputStream file ) throws IOException {
         super.dump(file);
         file.writeShort(inner_classes.length);
         for (final InnerClass inner_class : inner_classes) {
             inner_class.dump(file);
         }
@@ -113,36 +112,36 @@
 
 
     /**
      * @return array of inner class "records"
      */
-    public final InnerClass[] getInnerClasses() {
+    public InnerClass[] getInnerClasses() {
         return inner_classes;
     }
 
 
     /**
      * @param inner_classes the array of inner classes
      */
-    public final void setInnerClasses( final InnerClass[] inner_classes ) {
+    public void setInnerClasses( final InnerClass[] inner_classes ) {
         this.inner_classes = inner_classes != null ? inner_classes : new InnerClass[0];
     }
 
 
     /**
      * @return String representation.
      */
     @Override
-    public final String toString() {
+    public String toString() {
         final StringBuilder buf = new StringBuilder();
         buf.append("InnerClasses(");
         buf.append(inner_classes.length);
         buf.append("):\n");
         for (final InnerClass inner_class : inner_classes) {
             buf.append(inner_class.toString(super.getConstantPool())).append("\n");
         }
-        return buf.toString();
+        return buf.substring(0, buf.length()-1); // remove the last newline
     }
 
 
     /**
      * @return deep copy of this attribute
