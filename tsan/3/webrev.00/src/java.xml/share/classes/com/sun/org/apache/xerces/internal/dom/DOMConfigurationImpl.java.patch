diff a/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/DOMConfigurationImpl.java b/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/DOMConfigurationImpl.java
--- a/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/DOMConfigurationImpl.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/DOMConfigurationImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -30,11 +30,10 @@
 import com.sun.org.apache.xerces.internal.util.DOMErrorHandlerWrapper;
 import com.sun.org.apache.xerces.internal.util.MessageFormatter;
 import com.sun.org.apache.xerces.internal.util.ParserConfigurationSettings;
 import com.sun.org.apache.xerces.internal.util.PropertyState;
 import com.sun.org.apache.xerces.internal.util.SymbolTable;
-import com.sun.org.apache.xerces.internal.utils.ObjectFactory;
 import com.sun.org.apache.xerces.internal.utils.XMLSecurityManager;
 import com.sun.org.apache.xerces.internal.utils.XMLSecurityPropertyManager;
 import com.sun.org.apache.xerces.internal.xni.XMLDTDContentModelHandler;
 import com.sun.org.apache.xerces.internal.xni.XMLDTDHandler;
 import com.sun.org.apache.xerces.internal.xni.XMLDocumentHandler;
@@ -50,10 +49,11 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
+import java.util.StringTokenizer;
 import javax.xml.XMLConstants;
 import javax.xml.catalog.CatalogFeatures;
 import jdk.xml.internal.JdkXmlUtils;
 import org.w3c.dom.DOMConfiguration;
 import org.w3c.dom.DOMErrorHandler;
@@ -68,19 +68,22 @@
  *
  * @xerces.internal
  *
  * @author Elena Litani, IBM
  * @author Neeraj Bajaj, Sun Microsystems.
- * @LastModified: Oct 2017
+ * @LastModified: Apr 2019
  */
 public class DOMConfigurationImpl extends ParserConfigurationSettings
     implements XMLParserConfiguration, DOMConfiguration {
 
     //
     // Constants
     //
 
+    protected static final String XML11_DATATYPE_VALIDATOR_FACTORY =
+        "com.sun.org.apache.xerces.internal.impl.dv.dtd.XML11DTDDVFactoryImpl";
+
     // feature identifiers
 
     /** Feature identifier: validation. */
     protected static final String XERCES_VALIDATION =
         Constants.SAX_FEATURE_PREFIX + Constants.VALIDATION_FEATURE;
@@ -99,16 +102,45 @@
         Constants.XERCES_FEATURE_PREFIX + Constants.DYNAMIC_VALIDATION_FEATURE;
 
     protected static final String NORMALIZE_DATA =
         Constants.XERCES_FEATURE_PREFIX + Constants.SCHEMA_NORMALIZED_VALUE;
 
+    /** Feature identifier: send element default value via characters() */
+    protected static final String SCHEMA_ELEMENT_DEFAULT =
+        Constants.XERCES_FEATURE_PREFIX + Constants.SCHEMA_ELEMENT_DEFAULT;
+
     /** sending psvi in the pipeline */
     protected static final String SEND_PSVI =
         Constants.XERCES_FEATURE_PREFIX + Constants.SCHEMA_AUGMENT_PSVI;
 
-    protected final static String DTD_VALIDATOR_FACTORY_PROPERTY =
-        Constants.XERCES_PROPERTY_PREFIX + Constants.DATATYPE_VALIDATOR_FACTORY_PROPERTY;
+    /** Feature: generate synthetic annotations */
+    protected static final String GENERATE_SYNTHETIC_ANNOTATIONS =
+        Constants.XERCES_FEATURE_PREFIX + Constants.GENERATE_SYNTHETIC_ANNOTATIONS_FEATURE;
+
+    /** Feature identifier: validate annotations */
+    protected static final String VALIDATE_ANNOTATIONS =
+        Constants.XERCES_FEATURE_PREFIX + Constants.VALIDATE_ANNOTATIONS_FEATURE;
+
+    /** Feature identifier: honour all schemaLocations */
+    protected static final String HONOUR_ALL_SCHEMALOCATIONS =
+        Constants.XERCES_FEATURE_PREFIX + Constants.HONOUR_ALL_SCHEMALOCATIONS_FEATURE;
+
+    /** Feature identifier: use grammar pool only */
+    protected static final String USE_GRAMMAR_POOL_ONLY =
+        Constants.XERCES_FEATURE_PREFIX + Constants.USE_GRAMMAR_POOL_ONLY_FEATURE;
+
+    /** Feature identifier: load external DTD. */
+    protected static final String DISALLOW_DOCTYPE_DECL_FEATURE =
+        Constants.XERCES_FEATURE_PREFIX + Constants.DISALLOW_DOCTYPE_DECL_FEATURE;
+
+    /** Feature identifier: balance syntax trees. */
+    protected static final String BALANCE_SYNTAX_TREES =
+        Constants.XERCES_FEATURE_PREFIX + Constants.BALANCE_SYNTAX_TREES;
+
+    /** Feature identifier: warn on duplicate attribute definition. */
+    protected static final String WARN_ON_DUPLICATE_ATTDEF =
+        Constants.XERCES_FEATURE_PREFIX + Constants.WARN_ON_DUPLICATE_ATTDEF_FEATURE;
 
     /** Feature identifier: namespace growth */
     protected static final String NAMESPACE_GROWTH =
         Constants.XERCES_FEATURE_PREFIX + Constants.NAMESPACE_GROWTH_FEATURE;
 
@@ -131,13 +163,13 @@
 
     /** Property identifier: symbol table. */
     protected static final String SYMBOL_TABLE =
         Constants.XERCES_PROPERTY_PREFIX + Constants.SYMBOL_TABLE_PROPERTY;
 
-    /** Property id: Grammar pool*/
+    /** Property id: Grammar pool. */
     protected static final String GRAMMAR_POOL =
-    Constants.XERCES_PROPERTY_PREFIX + Constants.XMLGRAMMAR_POOL_PROPERTY;
+        Constants.XERCES_PROPERTY_PREFIX + Constants.XMLGRAMMAR_POOL_PROPERTY;
 
     /** Property identifier: error handler. */
     protected static final String ERROR_HANDLER =
         Constants.XERCES_PROPERTY_PREFIX + Constants.ERROR_HANDLER_PROPERTY;
 
@@ -145,19 +177,35 @@
     protected static final String ENTITY_RESOLVER =
         Constants.XERCES_PROPERTY_PREFIX + Constants.ENTITY_RESOLVER_PROPERTY;
 
     /** Property identifier: JAXP schema language / DOM schema-type. */
     protected static final String JAXP_SCHEMA_LANGUAGE =
-    Constants.JAXP_PROPERTY_PREFIX + Constants.SCHEMA_LANGUAGE;
+        Constants.JAXP_PROPERTY_PREFIX + Constants.SCHEMA_LANGUAGE;
 
     /** Property identifier: JAXP schema source/ DOM schema-location. */
     protected static final String JAXP_SCHEMA_SOURCE =
-    Constants.JAXP_PROPERTY_PREFIX + Constants.SCHEMA_SOURCE;
+        Constants.JAXP_PROPERTY_PREFIX + Constants.SCHEMA_SOURCE;
+
+    /** Property identifier: DTD validator. */
+    protected final static String DTD_VALIDATOR_PROPERTY =
+        Constants.XERCES_PROPERTY_PREFIX + Constants.DTD_VALIDATOR_PROPERTY;
+
+    /** Property identifier: datatype validator factory. */
+    protected static final String DTD_VALIDATOR_FACTORY_PROPERTY =
+        Constants.XERCES_PROPERTY_PREFIX + Constants.DATATYPE_VALIDATOR_FACTORY_PROPERTY;
 
     protected static final String VALIDATION_MANAGER =
         Constants.XERCES_PROPERTY_PREFIX + Constants.VALIDATION_MANAGER_PROPERTY;
 
+    /** Property identifier: schema location. */
+    protected static final String SCHEMA_LOCATION =
+        Constants.XERCES_PROPERTY_PREFIX + Constants.SCHEMA_LOCATION;
+
+    /** Property identifier: no namespace schema location. */
+    protected static final String SCHEMA_NONS_LOCATION =
+        Constants.XERCES_PROPERTY_PREFIX + Constants.SCHEMA_NONS_LOCATION;
+
     /** Property identifier: Schema DV Factory */
     protected static final String SCHEMA_DV_FACTORY =
         Constants.XERCES_PROPERTY_PREFIX + Constants.SCHEMA_DV_FACTORY_PROPERTY;
 
     /** Property identifier: Security manager. */
@@ -207,12 +255,22 @@
     protected XMLErrorReporter fErrorReporter;
 
     protected final DOMErrorHandlerWrapper fErrorHandlerWrapper =
                 new DOMErrorHandlerWrapper();
 
+    /** Current Datatype validator factory. */
+    protected DTDDVFactory fCurrentDVFactory;
+
+    /** The XML 1.0 Datatype validator factory. */
+    protected DTDDVFactory fDatatypeValidatorFactory;
+
+    /** The XML 1.1 Datatype validator factory. **/
+    protected DTDDVFactory fXML11DatatypeFactory;
+
     // private data
 
+    private String fSchemaLocation = null;
     private DOMStringList fRecognizedParameters;
 
 
     //
     // Constructors
@@ -254,11 +312,20 @@
             XERCES_NAMESPACES,
             SCHEMA,
             SCHEMA_FULL_CHECKING,
             DYNAMIC_VALIDATION,
             NORMALIZE_DATA,
+            SCHEMA_ELEMENT_DEFAULT,
             SEND_PSVI,
+            GENERATE_SYNTHETIC_ANNOTATIONS,
+            VALIDATE_ANNOTATIONS,
+            HONOUR_ALL_SCHEMALOCATIONS,
+            USE_GRAMMAR_POOL_ONLY,
+            DISALLOW_DOCTYPE_DECL_FEATURE,
+            BALANCE_SYNTAX_TREES,
+            WARN_ON_DUPLICATE_ATTDEF,
+            PARSER_SETTINGS,
             NAMESPACE_GROWTH,
             TOLERATE_DUPLICATES,
             XMLConstants.USE_CATALOG,
             JdkXmlUtils.OVERRIDE_PARSER
         };
@@ -268,13 +335,23 @@
         setFeature(XERCES_VALIDATION, false);
         setFeature(SCHEMA, false);
         setFeature(SCHEMA_FULL_CHECKING, false);
         setFeature(DYNAMIC_VALIDATION, false);
         setFeature(NORMALIZE_DATA, false);
+        setFeature(SCHEMA_ELEMENT_DEFAULT, false);
         setFeature(XERCES_NAMESPACES, true);
         setFeature(SEND_PSVI, true);
+        setFeature(GENERATE_SYNTHETIC_ANNOTATIONS, false);
+        setFeature(VALIDATE_ANNOTATIONS, false);
+        setFeature(HONOUR_ALL_SCHEMALOCATIONS, false);
+        setFeature(USE_GRAMMAR_POOL_ONLY, false);
+        setFeature(DISALLOW_DOCTYPE_DECL_FEATURE, false);
+        setFeature(BALANCE_SYNTAX_TREES, false);
+        setFeature(WARN_ON_DUPLICATE_ATTDEF, false);
+        setFeature(PARSER_SETTINGS, true);
         setFeature(NAMESPACE_GROWTH, false);
+        setFeature(TOLERATE_DUPLICATES, false);
         setFeature(XMLConstants.USE_CATALOG, JdkXmlUtils.USE_CATALOG_DEFAULT);
         setFeature(JdkXmlUtils.OVERRIDE_PARSER, JdkXmlUtils.OVERRIDE_PARSER_DEFAULT);
 
         // add default recognized properties
         final String[] recognizedProperties = {
@@ -286,10 +363,13 @@
             ENTITY_MANAGER,
             VALIDATION_MANAGER,
             GRAMMAR_POOL,
             JAXP_SCHEMA_SOURCE,
             JAXP_SCHEMA_LANGUAGE,
+            SCHEMA_LOCATION,
+            SCHEMA_NONS_LOCATION,
+            DTD_VALIDATOR_PROPERTY,
             DTD_VALIDATOR_FACTORY_PROPERTY,
             SCHEMA_DV_FACTORY,
             SECURITY_MANAGER,
             XML_SECURITY_PROPERTY_MANAGER,
             JdkXmlUtils.CATALOG_DEFER,
@@ -319,11 +399,14 @@
         setProperty(SYMBOL_TABLE, fSymbolTable);
         fErrorReporter = new XMLErrorReporter();
         setProperty(ERROR_REPORTER, fErrorReporter);
         addComponent(fErrorReporter);
 
-        setProperty(DTD_VALIDATOR_FACTORY_PROPERTY, DTDDVFactory.getInstance());
+        fDatatypeValidatorFactory = DTDDVFactory.getInstance();
+        fXML11DatatypeFactory = DTDDVFactory.getInstance(XML11_DATATYPE_VALIDATOR_FACTORY);
+        fCurrentDVFactory = fDatatypeValidatorFactory;
+        setProperty(DTD_VALIDATOR_FACTORY_PROPERTY, fCurrentDVFactory);
 
         XMLEntityManager manager =  new XMLEntityManager();
         setProperty(ENTITY_MANAGER, manager);
         addComponent(manager);
 
@@ -346,12 +429,11 @@
         //          This is a hack to allow DTD configuration to be build.
         //
         if (fErrorReporter.getMessageFormatter("http://www.w3.org/TR/xml-schema-1") == null) {
             MessageFormatter xmft = null;
             try {
-               xmft = (MessageFormatter)(
-                    ObjectFactory.newInstance("com.sun.org.apache.xerces.internal.impl.xs.XSMessageFormatter", true));
+               xmft = new com.sun.org.apache.xerces.internal.impl.xs.XSMessageFormatter();
             } catch (Exception exception){
             }
 
              if (xmft !=  null) {
                  fErrorReporter.putMessageFormatter("http://www.w3.org/TR/xml-schema-1", xmft);
@@ -394,12 +476,12 @@
      * <p>
      * This method is synchronous: it will not return until parsing
      * has ended.  If a client application wants to terminate
      * parsing early, it should throw an exception.
      *
-     * @param source The input source for the top-level of the
-     *               XML document.
+     * @param inputSource The input source for the top-level of the
+     *                    XML document.
      *
      * @exception XNIException Any XNI exception, possibly wrapping
      *                         another exception.
      * @exception IOException  An IO exception from the parser, possibly
      *                         from a byte stream or character stream
@@ -460,13 +542,11 @@
      *
      * @param resolver The new entity resolver. Passing a null value will
      *                 uninstall the currently installed resolver.
      */
     public void setEntityResolver(XMLEntityResolver resolver) {
-        if (resolver !=null) {
-            fProperties.put(ENTITY_RESOLVER, resolver);
-        }
+        fProperties.put(ENTITY_RESOLVER, resolver);
     } // setEntityResolver(XMLEntityResolver)
 
     /**
      * Return the current entity resolver.
      *
@@ -511,10 +591,30 @@
      */
     public XMLErrorHandler getErrorHandler() {
         return (XMLErrorHandler)fProperties.get(ERROR_HANDLER);
     } // getErrorHandler():XMLErrorHandler
 
+    /**
+     * Returns the state of a feature.
+     *
+     * @param featureId The feature identifier.
+     * @return true if the feature is supported
+     *
+     * @throws XMLConfigurationException Thrown for configuration error.
+     *                                   In general, components should
+     *                                   only throw this exception if
+     *                                   it is <strong>really</strong>
+     *                                   a critical error.
+     */
+    public boolean getFeature(String featureId)
+        throws XMLConfigurationException {
+        if (featureId.equals(PARSER_SETTINGS)) {
+            return true;
+        }
+        return super.getFeature(featureId);
+    }
+
     /**
      * Set the state of a feature.
      *
      * Set the state of any feature in a SAX2 parser.  The parser
      * might not recognize the feature, and if it does recognize
@@ -574,12 +674,12 @@
     public void setParameter(String name, Object value) throws DOMException {
         boolean found = true;
 
         // REVISIT: Recognizes DOM L3 default features only.
         //          Does not yet recognize Xerces features.
-                if(value instanceof Boolean){
-                        boolean state = ((Boolean)value).booleanValue();
+        if(value instanceof Boolean){
+            boolean state = ((Boolean)value).booleanValue();
 
             if (name.equalsIgnoreCase(Constants.DOM_COMMENTS)) {
                 features = (short) (state ? features | COMMENTS : features & ~COMMENTS);
             }
             else if (name.equalsIgnoreCase(Constants.DOM_DATATYPE_NORMALIZATION)) {
@@ -623,39 +723,24 @@
                     || name.equalsIgnoreCase(Constants.DOM_CANONICAL_FORM)
                     || name.equalsIgnoreCase(Constants.DOM_VALIDATE_IF_SCHEMA)
                     || name.equalsIgnoreCase(Constants.DOM_CHECK_CHAR_NORMALIZATION)
                     ) {
                 if (state) { // true is not supported
-                    String msg =
-                        DOMMessageFormatter.formatMessage(
-                            DOMMessageFormatter.DOM_DOMAIN,
-                            "FEATURE_NOT_SUPPORTED",
-                            new Object[] { name });
-                    throw new DOMException(DOMException.NOT_SUPPORTED_ERR, msg);
+                    throw newFeatureNotSupportedError(name);
                 }
             }
                         else if ( name.equalsIgnoreCase(Constants.DOM_ELEMENT_CONTENT_WHITESPACE)) {
                 if (!state) { // false is not supported
-                    String msg =
-                        DOMMessageFormatter.formatMessage(
-                            DOMMessageFormatter.DOM_DOMAIN,
-                            "FEATURE_NOT_SUPPORTED",
-                            new Object[] { name });
-                   throw new DOMException(DOMException.NOT_SUPPORTED_ERR, msg);
+                    throw newFeatureNotSupportedError(name);
                 }
             }
             else if (name.equalsIgnoreCase(SEND_PSVI) ){
                 // REVISIT: turning augmentation of PSVI is not support,
                 // because in this case we won't be able to retrieve element
                 // default value.
                 if (!state) { // false is not supported
-                    String msg =
-                        DOMMessageFormatter.formatMessage(
-                            DOMMessageFormatter.DOM_DOMAIN,
-                            "FEATURE_NOT_SUPPORTED",
-                            new Object[] { name });
-                    throw new DOMException(DOMException.NOT_SUPPORTED_ERR, msg);
+                    throw newFeatureNotSupportedError(name);
                 }
             }
             else if (name.equalsIgnoreCase(Constants.DOM_PSVI)){
                   features = (short) (state ? features | PSVI : features & ~PSVI);
             }
@@ -671,67 +756,69 @@
                 */
             }
 
         }
 
-                if (!found || !(value instanceof Boolean))  { // set properties
-                        found = true;
+        if (!found || !(value instanceof Boolean))  { // set properties
+                found = true;
 
             if (name.equalsIgnoreCase(Constants.DOM_ERROR_HANDLER)) {
                 if (value instanceof DOMErrorHandler || value == null) {
                     fErrorHandlerWrapper.setErrorHandler((DOMErrorHandler)value);
                     setErrorHandler(fErrorHandlerWrapper);
                 }
-
                 else {
-                    // REVISIT: type mismatch
-                    String msg =
-                        DOMMessageFormatter.formatMessage(
-                            DOMMessageFormatter.DOM_DOMAIN,
-                            "TYPE_MISMATCH_ERR",
-                            new Object[] { name });
-                    throw new DOMException(DOMException.TYPE_MISMATCH_ERR, msg);
+                    throw newTypeMismatchError(name);
                 }
             }
             else if (name.equalsIgnoreCase(Constants.DOM_RESOURCE_RESOLVER)) {
                 if (value instanceof LSResourceResolver || value == null) {
                     try {
                         setEntityResolver(new DOMEntityResolverWrapper((LSResourceResolver) value));
                     }
                     catch (XMLConfigurationException e) {}
                 }
                 else {
-                    // REVISIT: type mismatch
-                    String msg =
-                        DOMMessageFormatter.formatMessage(
-                            DOMMessageFormatter.DOM_DOMAIN,
-                            "TYPE_MISMATCH_ERR",
-                            new Object[] { name });
-                    throw new DOMException(DOMException.TYPE_MISMATCH_ERR, msg);
+                    throw newTypeMismatchError(name);
                 }
-
             }
             else if (name.equalsIgnoreCase(Constants.DOM_SCHEMA_LOCATION)) {
                 if (value instanceof String || value == null) {
                     try {
-                        // map DOM schema-location to JAXP schemaSource property
-                        setProperty(
-                            Constants.JAXP_PROPERTY_PREFIX + Constants.SCHEMA_SOURCE,
-                            value);
+                        if (value == null) {
+                            fSchemaLocation = null;
+                            setProperty (
+                                Constants.JAXP_PROPERTY_PREFIX + Constants.SCHEMA_SOURCE,
+                                null);
+                        }
+                        else {
+                            fSchemaLocation = (String) value;
+                            // map DOM schema-location to JAXP schemaSource property
+                            // tokenize location string
+                            StringTokenizer t = new StringTokenizer(fSchemaLocation, " \n\t\r");
+                            if (t.hasMoreTokens()) {
+                                List<String> locations = new ArrayList<>();
+                                locations.add(t.nextToken());
+                                while (t.hasMoreTokens()) {
+                                    locations.add (t.nextToken());
+                                }
+                                setProperty (
+                                    Constants.JAXP_PROPERTY_PREFIX + Constants.SCHEMA_SOURCE,
+                                    locations.toArray(new String[locations.size()]));
+                            }
+                            else {
+                                setProperty (
+                                    Constants.JAXP_PROPERTY_PREFIX + Constants.SCHEMA_SOURCE,
+                                    new String [] {(String) value});
+                            }
+                        }
                     }
                     catch (XMLConfigurationException e) {}
                 }
                 else {
-                    // REVISIT: type mismatch
-                    String msg =
-                        DOMMessageFormatter.formatMessage(
-                            DOMMessageFormatter.DOM_DOMAIN,
-                            "TYPE_MISMATCH_ERR",
-                            new Object[] { name });
-                    throw new DOMException(DOMException.TYPE_MISMATCH_ERR, msg);
+                    throw newTypeMismatchError(name);
                 }
-
             }
             else if (name.equalsIgnoreCase(Constants.DOM_SCHEMA_TYPE)) {
                 if (value instanceof String || value == null) {
                     try {
                         if (value == null) {
@@ -752,61 +839,47 @@
                         }
                     }
                     catch (XMLConfigurationException e) {}
                 }
                 else {
-                    String msg =
-                        DOMMessageFormatter.formatMessage(
-                            DOMMessageFormatter.DOM_DOMAIN,
-                            "TYPE_MISMATCH_ERR",
-                            new Object[] { name });
-                    throw new DOMException(DOMException.TYPE_MISMATCH_ERR, msg);
+                    throw newTypeMismatchError(name);
                 }
-
             }
-            else if (name.equalsIgnoreCase(SYMBOL_TABLE)){
+            else if (name.equalsIgnoreCase(ENTITY_RESOLVER)) {
+                if (value instanceof XMLEntityResolver || value == null) {
+                    try {
+                        setEntityResolver((XMLEntityResolver) value);
+                    }
+                    catch (XMLConfigurationException e) {}
+                }
+                else {
+                    throw newTypeMismatchError(name);
+                }
+            }
+            else if (name.equalsIgnoreCase(SYMBOL_TABLE)) {
                 // Xerces Symbol Table
                 if (value instanceof SymbolTable){
                     setProperty(SYMBOL_TABLE, value);
                 }
                 else {
-                    // REVISIT: type mismatch
-                    String msg =
-                        DOMMessageFormatter.formatMessage(
-                            DOMMessageFormatter.DOM_DOMAIN,
-                            "TYPE_MISMATCH_ERR",
-                            new Object[] { name });
-                    throw new DOMException(DOMException.TYPE_MISMATCH_ERR, msg);
+                    throw newTypeMismatchError(name);
                 }
             }
-            else if (name.equalsIgnoreCase (GRAMMAR_POOL)){
-                if (value instanceof XMLGrammarPool){
+            else if (name.equalsIgnoreCase (GRAMMAR_POOL)) {
+                if (value instanceof XMLGrammarPool || value == null) {
                     setProperty(GRAMMAR_POOL, value);
                 }
                 else {
-                    // REVISIT: type mismatch
-                    String msg =
-                        DOMMessageFormatter.formatMessage(
-                            DOMMessageFormatter.DOM_DOMAIN,
-                            "TYPE_MISMATCH_ERR",
-                            new Object[] { name });
-                    throw new DOMException(DOMException.TYPE_MISMATCH_ERR, msg);
+                    throw newTypeMismatchError(name);
                 }
-
             }
-            else {
+                else {
                 // REVISIT: check if this is a boolean parameter -- type mismatch should be thrown.
                 //parameter is not recognized
-                String msg =
-                    DOMMessageFormatter.formatMessage(
-                        DOMMessageFormatter.DOM_DOMAIN,
-                        "FEATURE_NOT_FOUND",
-                        new Object[] { name });
-                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
+                throw newFeatureNotFoundError(name);
             }
         }
-
     }
 
 
     /**
      * DOM Level 3 WD - Experimental.
@@ -876,27 +949,27 @@
                 }
                 else if (name.equalsIgnoreCase(Constants.DOM_SCHEMA_TYPE)) {
                         return getProperty(Constants.JAXP_PROPERTY_PREFIX + Constants.SCHEMA_LANGUAGE);
                 }
                 else if (name.equalsIgnoreCase(Constants.DOM_SCHEMA_LOCATION)) {
-                        return getProperty(Constants.JAXP_PROPERTY_PREFIX + Constants.SCHEMA_SOURCE);
+            return fSchemaLocation;
                 }
-        else if (name.equalsIgnoreCase(SYMBOL_TABLE)){
+        else if (name.equalsIgnoreCase(ENTITY_RESOLVER)) {
+            return getEntityResolver();
+        }
+        else if (name.equalsIgnoreCase(SYMBOL_TABLE)) {
             return getProperty(SYMBOL_TABLE);
         }
-        else if (name.equalsIgnoreCase(GRAMMAR_POOL)){
+        else if (name.equalsIgnoreCase(GRAMMAR_POOL)) {
             return getProperty(GRAMMAR_POOL);
+        }
+        else if (name.equalsIgnoreCase(SECURITY_MANAGER)) {
+            return getProperty(SECURITY_MANAGER);
         }
                 else {
-                        String msg =
-                                DOMMessageFormatter.formatMessage(
-                                        DOMMessageFormatter.DOM_DOMAIN,
-                                        "FEATURE_NOT_FOUND",
-                                        new Object[] { name });
-                        throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
+                    throw newFeatureNotFoundError(name);
                 }
-
         }
 
     /**
      * DOM Level 3 WD - Experimental.
      * Check if setting a parameter to a specific value is supported.
@@ -964,19 +1037,23 @@
         else if (name.equalsIgnoreCase(Constants.DOM_SCHEMA_LOCATION)) {
             return (value instanceof String) ? true : false ;
         }
         else if (name.equalsIgnoreCase(Constants.DOM_SCHEMA_TYPE)) {
             // REVISIT: should null value be supported?
-            //as of now we are only supporting W3C XML Schema
-            return ( (value instanceof String) && value.equals(Constants.NS_XMLSCHEMA) ) ? true : false ;
+            // as of now we are only supporting W3C XML Schema and DTD.
+            return ((value instanceof String) &&
+                    (value.equals(Constants.NS_XMLSCHEMA) || value.equals(Constants.NS_DTD))) ? true : false;
+        }
+        else if (name.equalsIgnoreCase(ENTITY_RESOLVER)) {
+            return (value instanceof XMLEntityResolver) ? true : false;
         }
-        else if (name.equalsIgnoreCase(SYMBOL_TABLE)){
+        else if (name.equalsIgnoreCase(SYMBOL_TABLE)) {
             // Xerces Symbol Table
-            return (value instanceof SymbolTable) ? true : false ;
+            return (value instanceof SymbolTable) ? true : false;
         }
-        else if (name.equalsIgnoreCase (GRAMMAR_POOL)){
-            return (value instanceof XMLGrammarPool) ? true : false ;
+        else if (name.equalsIgnoreCase (GRAMMAR_POOL)) {
+            return (value instanceof XMLGrammarPool) ? true : false;
         }
         else {
             //false if the parameter is not recognized or the requested value is not supported.
             return false ;
         }
@@ -989,50 +1066,53 @@
      *  The list of the parameters supported by this
      * <code>DOMConfiguration</code> object and for which at least one value
      * can be set by the application. Note that this list can also contain
      * parameter names defined outside this specification.
      */
-    public DOMStringList getParameterNames() {
-        if (fRecognizedParameters == null){
+        public DOMStringList getParameterNames() {
+            if (fRecognizedParameters == null){
             List<String> parameters = new ArrayList<>();
 
-            //Add DOM recognized parameters
-            //REVISIT: Would have been nice to have a list of
-            //recognized paramters.
-            parameters.add(Constants.DOM_COMMENTS);
-            parameters.add(Constants.DOM_DATATYPE_NORMALIZATION);
-            parameters.add(Constants.DOM_CDATA_SECTIONS);
-            parameters.add(Constants.DOM_ENTITIES);
-            parameters.add(Constants.DOM_SPLIT_CDATA);
-            parameters.add(Constants.DOM_NAMESPACES);
-            parameters.add(Constants.DOM_VALIDATE);
-
-            parameters.add(Constants.DOM_INFOSET);
-            parameters.add(Constants.DOM_NORMALIZE_CHARACTERS);
-            parameters.add(Constants.DOM_CANONICAL_FORM);
-            parameters.add(Constants.DOM_VALIDATE_IF_SCHEMA);
-            parameters.add(Constants.DOM_CHECK_CHAR_NORMALIZATION);
-            parameters.add(Constants.DOM_WELLFORMED);
-
-            parameters.add(Constants.DOM_NAMESPACE_DECLARATIONS);
-            parameters.add(Constants.DOM_ELEMENT_CONTENT_WHITESPACE);
-
-            parameters.add(Constants.DOM_ERROR_HANDLER);
-            parameters.add(Constants.DOM_SCHEMA_TYPE);
-            parameters.add(Constants.DOM_SCHEMA_LOCATION);
-            parameters.add(Constants.DOM_RESOURCE_RESOLVER);
-
-            //Add recognized xerces features and properties
-            parameters.add(GRAMMAR_POOL);
-            parameters.add(SYMBOL_TABLE);
-            parameters.add(SEND_PSVI);
-
-            fRecognizedParameters = new DOMStringListImpl(parameters);
-        }
+                //Add DOM recognized parameters
+                //REVISIT: Would have been nice to have a list of
+                //recognized paramters.
+                parameters.add(Constants.DOM_COMMENTS);
+                parameters.add(Constants.DOM_DATATYPE_NORMALIZATION);
+                parameters.add(Constants.DOM_CDATA_SECTIONS);
+                parameters.add(Constants.DOM_ENTITIES);
+                parameters.add(Constants.DOM_SPLIT_CDATA);
+                parameters.add(Constants.DOM_NAMESPACES);
+                parameters.add(Constants.DOM_VALIDATE);
+
+                parameters.add(Constants.DOM_INFOSET);
+                parameters.add(Constants.DOM_NORMALIZE_CHARACTERS);
+                parameters.add(Constants.DOM_CANONICAL_FORM);
+                parameters.add(Constants.DOM_VALIDATE_IF_SCHEMA);
+                parameters.add(Constants.DOM_CHECK_CHAR_NORMALIZATION);
+                parameters.add(Constants.DOM_WELLFORMED);
+
+                parameters.add(Constants.DOM_NAMESPACE_DECLARATIONS);
+                parameters.add(Constants.DOM_ELEMENT_CONTENT_WHITESPACE);
+
+                parameters.add(Constants.DOM_ERROR_HANDLER);
+                parameters.add(Constants.DOM_SCHEMA_TYPE);
+                parameters.add(Constants.DOM_SCHEMA_LOCATION);
+                parameters.add(Constants.DOM_RESOURCE_RESOLVER);
+
+                //Add recognized xerces features and properties
+                parameters.add(ENTITY_RESOLVER);
+                parameters.add(GRAMMAR_POOL);
+                parameters.add(SECURITY_MANAGER);
+                parameters.add(SYMBOL_TABLE);
+                parameters.add(SEND_PSVI);
+
+                fRecognizedParameters = new DOMStringListImpl(parameters);
 
-        return fRecognizedParameters;
-    }//getParameterNames
+            }
+
+            return fRecognizedParameters;
+        }//getParameterNames
 
     //
     // Protected methods
     //
 
@@ -1059,10 +1139,11 @@
      * @param propertyId The unique identifier (URI) of the property
      *                   being set.
      * @exception com.sun.org.apache.xerces.internal.xni.parser.XMLConfigurationException If the
      *            requested feature is not known or supported.
      */
+    @Override
     protected PropertyState checkProperty(String propertyId)
         throws XMLConfigurationException {
 
         // special cases
         if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {
@@ -1113,6 +1194,46 @@
 
     protected ValidationManager createValidationManager(){
         return new ValidationManager();
     }
 
-} // class XMLParser
+    protected final void setDTDValidatorFactory(String version) {
+        if ("1.1".equals(version)) {
+            if (fCurrentDVFactory != fXML11DatatypeFactory) {
+                fCurrentDVFactory = fXML11DatatypeFactory;
+                setProperty(DTD_VALIDATOR_FACTORY_PROPERTY, fCurrentDVFactory);
+            }
+        }
+        else if (fCurrentDVFactory != fDatatypeValidatorFactory) {
+            fCurrentDVFactory = fDatatypeValidatorFactory;
+            setProperty(DTD_VALIDATOR_FACTORY_PROPERTY, fCurrentDVFactory);
+        }
+    }
+
+    private static DOMException newFeatureNotSupportedError(String name) {
+        String msg =
+            DOMMessageFormatter.formatMessage(
+                DOMMessageFormatter.DOM_DOMAIN,
+                "FEATURE_NOT_SUPPORTED",
+                new Object[] { name });
+        return new DOMException(DOMException.NOT_SUPPORTED_ERR, msg);
+    }
+
+    private static DOMException newFeatureNotFoundError(String name) {
+        String msg =
+            DOMMessageFormatter.formatMessage(
+                DOMMessageFormatter.DOM_DOMAIN,
+                "FEATURE_NOT_FOUND",
+                new Object[] { name });
+        return new DOMException(DOMException.NOT_FOUND_ERR, msg);
+    }
+
+    private static DOMException newTypeMismatchError(String name) {
+        String msg =
+            DOMMessageFormatter.formatMessage(
+                DOMMessageFormatter.DOM_DOMAIN,
+                "TYPE_MISMATCH_ERR",
+                new Object[] { name });
+        return new DOMException(DOMException.TYPE_MISMATCH_ERR, msg);
+    }
+
+} // class DOMConfigurationImpl
