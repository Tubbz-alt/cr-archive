diff a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/ArrayType.java b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/ArrayType.java
--- a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/ArrayType.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/ArrayType.java
@@ -23,35 +23,37 @@
 import com.sun.org.apache.bcel.internal.Const;
 
 /**
  * Denotes array type, such as int[][]
  *
- * @version $Id: ArrayType.java 1749603 2016-06-21 20:50:19Z ggregory $
  */
 public final class ArrayType extends ReferenceType {
 
     private int dimensions;
     private Type basic_type;
 
+
     /**
      * Convenience constructor for array type, e.g. int[]
      *
      * @param type array type, e.g. T_INT
      */
     public ArrayType(final byte type, final int dimensions) {
         this(BasicType.getType(type), dimensions);
     }
 
+
     /**
      * Convenience constructor for reference array type, e.g. Object[]
      *
      * @param class_name complete name of class (java.lang.String, e.g.)
      */
     public ArrayType(final String class_name, final int dimensions) {
         this(ObjectType.getInstance(class_name), dimensions);
     }
 
+
     /**
      * Constructor for array of given type
      *
      * @param type type of array (may be an array itself)
      */
@@ -79,48 +81,49 @@
         }
         buf.append(basic_type.getSignature());
         super.setSignature(buf.toString());
     }
 
+
     /**
      * @return basic type of array, i.e., for int[][][] the basic type is int
      */
     public Type getBasicType() {
         return basic_type;
     }
 
+
     /**
-     * @return element type of array, i.e., for int[][][] the element type is
-     * int[][]
+     * @return element type of array, i.e., for int[][][] the element type is int[][]
      */
     public Type getElementType() {
         if (dimensions == 1) {
             return basic_type;
         }
         return new ArrayType(basic_type, dimensions - 1);
     }
 
-    /**
-     * @return number of dimensions of array
+
+    /** @return number of dimensions of array
      */
     public int getDimensions() {
         return dimensions;
     }
 
-    /**
-     * @return a hash code value for the object.
+
+    /** @return a hash code value for the object.
      */
     @Override
     public int hashCode() {
         return basic_type.hashCode() ^ dimensions;
     }
 
-    /**
-     * @return true if both type objects refer to the same array type.
+
+    /** @return true if both type objects refer to the same array type.
      */
     @Override
-    public boolean equals(final Object _type) {
+    public boolean equals( final Object _type ) {
         if (_type instanceof ArrayType) {
             final ArrayType array = (ArrayType) _type;
             return (array.dimensions == dimensions) && array.basic_type.equals(basic_type);
         }
         return false;
