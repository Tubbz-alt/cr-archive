diff a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BranchInstruction.java b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BranchInstruction.java
--- a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BranchInstruction.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BranchInstruction.java
@@ -1,8 +1,7 @@
 /*
- * reserved comment block
- * DO NOT REMOVE OR ALTER!
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  */
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -24,16 +23,16 @@
 import java.io.IOException;
 
 import com.sun.org.apache.bcel.internal.util.ByteSequence;
 
 /**
- * Abstract super class for branching instructions like GOTO, IFEQ, etc.. Branch
- * instructions may have a variable length, namely GOTO, JSR, LOOKUPSWITCH and
- * TABLESWITCH.
+ * Abstract super class for branching instructions like GOTO, IFEQ, etc..
+ * Branch instructions may have a variable length, namely GOTO, JSR,
+ * LOOKUPSWITCH and TABLESWITCH.
  *
  * @see InstructionList
- * @version $Id: BranchInstruction.java 1749603 2016-06-21 20:50:19Z ggregory $
+ * @LastModified: Jan 2020
  */
 public abstract class BranchInstruction extends Instruction implements InstructionTargeter {
 
     private int index; // Branch target relative to this instruction
     private InstructionHandle target; // Target object in instruction list
@@ -44,41 +43,41 @@
      * Instruction.readInstruction(). Not to be used otherwise.
      */
     BranchInstruction() {
     }
 
-    /**
-     * Common super constructor
-     *
+
+    /** Common super constructor
      * @param opcode Instruction opcode
      * @param target instruction to branch to
      */
     protected BranchInstruction(final short opcode, final InstructionHandle target) {
         super(opcode, (short) 3);
         setTarget(target);
     }
 
+
     /**
      * Dump instruction as byte code to stream out.
-     *
      * @param out Output stream
      */
     @Override
-    public void dump(final DataOutputStream out) throws IOException {
+    public void dump( final DataOutputStream out ) throws IOException {
         out.writeByte(super.getOpcode());
         index = getTargetOffset();
         if (!isValidShort(index)) {
             throw new ClassGenException("Branch target offset too large for short: " + index);
         }
         out.writeShort(index); // May be negative, i.e., point backwards
     }
 
+
     /**
      * @param _target branch target
-     * @return the offset to `target' relative to this instruction
+     * @return the offset to  `target' relative to this instruction
      */
-    protected int getTargetOffset(final InstructionHandle _target) {
+    protected int getTargetOffset( final InstructionHandle _target ) {
         if (_target == null) {
             throw new ClassGenException("Target of " + super.toString(true)
                     + " is invalid null handle");
         }
         final int t = _target.getPosition();
@@ -87,48 +86,48 @@
                     + super.toString(true) + ":" + t + ":" + _target);
         }
         return t - position;
     }
 
+
     /**
      * @return the offset to this instruction's target
      */
     protected int getTargetOffset() {
         return getTargetOffset(target);
     }
 
+
     /**
-     * Called by InstructionList.setPositions when setting the position for
-     * every instruction. In the presence of variable length instructions
-     * `setPositions' performs multiple passes over the instruction list to
-     * calculate the correct (byte) positions and offsets by calling this
-     * function.
+     * Called by InstructionList.setPositions when setting the position for every
+     * instruction. In the presence of variable length instructions `setPositions'
+     * performs multiple passes over the instruction list to calculate the
+     * correct (byte) positions and offsets by calling this function.
      *
-     * @param offset additional offset caused by preceding (variable length)
-     * instructions
-     * @param max_offset the maximum offset that may be caused by these
-     * instructions
-     * @return additional offset caused by possible change of this instruction's
-     * length
+     * @param offset additional offset caused by preceding (variable length) instructions
+     * @param max_offset the maximum offset that may be caused by these instructions
+     * @return additional offset caused by possible change of this instruction's length
      */
-    protected int updatePosition(final int offset, final int max_offset) {
+    protected int updatePosition( final int offset, final int max_offset ) {
         position += offset;
         return 0;
     }
 
+
     /**
      * Long output format:
      *
-     * &lt;position in byte code&gt; &lt;name of opcode&gt; "["&lt;opcode
-     * number&gt;"]" "("&lt;length of instruction&gt;")" "&lt;"&lt;target
-     * instruction&gt;"&gt;" "@"&lt;branch target offset&gt;
+     * &lt;position in byte code&gt;
+     * &lt;name of opcode&gt; "["&lt;opcode number&gt;"]"
+     * "("&lt;length of instruction&gt;")"
+     * "&lt;"&lt;target instruction&gt;"&gt;" "@"&lt;branch target offset&gt;
      *
      * @param verbose long/short format switch
      * @return mnemonic for instruction
      */
     @Override
-    public String toString(final boolean verbose) {
+    public String toString( final boolean verbose ) {
         final String s = super.toString(verbose);
         String t = "null";
         if (verbose) {
             if (target != null) {
                 if (target.getInstruction() == this) {
@@ -151,109 +150,118 @@
             }
         }
         return s + " -> " + t;
     }
 
+
     /**
-     * Read needed data (e.g. index) from file. Conversion to a
-     * InstructionHandle is done in InstructionList(byte[]).
+     * Read needed data (e.g. index) from file. Conversion to a InstructionHandle
+     * is done in InstructionList(byte[]).
      *
      * @param bytes input stream
      * @param wide wide prefix?
      * @see InstructionList
      */
     @Override
-    protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException {
+    protected void initFromFile( final ByteSequence bytes, final boolean wide ) throws IOException {
         super.setLength(3);
         index = bytes.readShort();
     }
 
+
     /**
      * @return target offset in byte code
      */
     public final int getIndex() {
         return index;
     }
 
+
     /**
      * @return target of branch instruction
      */
     public InstructionHandle getTarget() {
         return target;
     }
 
+
     /**
      * Set branch target
-     *
      * @param target branch target
      */
-    public void setTarget(final InstructionHandle target) {
+    public void setTarget( final InstructionHandle target ) {
         notifyTarget(this.target, target, this);
         this.target = target;
     }
 
+
     /**
-     * Used by BranchInstruction, LocalVariableGen, CodeExceptionGen,
-     * LineNumberGen
+     * Used by BranchInstruction, LocalVariableGen, CodeExceptionGen, LineNumberGen
      */
-    static void notifyTarget(final InstructionHandle old_ih, final InstructionHandle new_ih,
-            final InstructionTargeter t) {
+    static void notifyTarget( final InstructionHandle old_ih, final InstructionHandle new_ih,
+            final InstructionTargeter t ) {
         if (old_ih != null) {
             old_ih.removeTargeter(t);
         }
         if (new_ih != null) {
             new_ih.addTargeter(t);
         }
     }
 
+
     /**
      * @param old_ih old target
      * @param new_ih new target
      */
     @Override
-    public void updateTarget(final InstructionHandle old_ih, final InstructionHandle new_ih) {
+    public void updateTarget( final InstructionHandle old_ih, final InstructionHandle new_ih ) {
         if (target == old_ih) {
             setTarget(new_ih);
         } else {
             throw new ClassGenException("Not targeting " + old_ih + ", but " + target);
         }
     }
 
+
     /**
      * @return true, if ih is target of this instruction
      */
     @Override
-    public boolean containsTarget(final InstructionHandle ih) {
+    public boolean containsTarget( final InstructionHandle ih ) {
         return target == ih;
     }
 
+
     /**
      * Inform target that it's not targeted anymore.
      */
     @Override
     void dispose() {
         setTarget(null);
         index = -1;
         position = -1;
     }
 
+
     /**
      * @return the position
      * @since 6.0
      */
     protected int getPosition() {
         return position;
     }
 
+
     /**
      * @param position the position to set
      * @since 6.0
      */
     protected void setPosition(final int position) {
         this.position = position;
     }
 
+
     /**
      * @param index the index to set
      * @since 6.0
      */
     protected void setIndex(final int index) {
