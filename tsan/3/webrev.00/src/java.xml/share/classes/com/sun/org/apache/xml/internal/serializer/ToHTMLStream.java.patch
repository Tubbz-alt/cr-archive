diff a/src/java.xml/share/classes/com/sun/org/apache/xml/internal/serializer/ToHTMLStream.java b/src/java.xml/share/classes/com/sun/org/apache/xml/internal/serializer/ToHTMLStream.java
--- a/src/java.xml/share/classes/com/sun/org/apache/xml/internal/serializer/ToHTMLStream.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/xml/internal/serializer/ToHTMLStream.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -28,21 +28,22 @@
 import org.xml.sax.Attributes;
 import org.xml.sax.SAXException;
 
 import com.sun.org.apache.xml.internal.serializer.utils.MsgKey;
 import com.sun.org.apache.xml.internal.serializer.utils.Utils;
+import javax.xml.transform.ErrorListener;
 
 /**
  * This serializer takes a series of SAX or
  * SAX-like events and writes its output
  * to the given stream.
  *
  * This class is not a public API, it is public
  * because it is used from another package.
  *
  * @xsl.usage internal
- * @LastModified: Sept 2018
+ * @LastModified: Aug 2019
  */
 public final class ToHTMLStream extends ToStream
 {
 
     /** This flag is set while receiving events from the DTD */
@@ -636,16 +637,19 @@
     /**
      * Default constructor.
      */
     public ToHTMLStream()
     {
+        this(null);
+    }
 
-        super();
+    public ToHTMLStream(ErrorListener l)
+    {
+        super(l);
         m_charInfo = m_htmlcharInfo;
         // initialize namespaces
         m_prefixMap = new NamespaceMappings();
-
     }
 
     /** The name of the current element. */
 //    private String m_currentElementName = null;
 
@@ -717,11 +721,11 @@
      * @throws org.xml.sax.SAXException
      */
     public final void endDocument() throws org.xml.sax.SAXException
     {
         if (m_doIndent) {
-            flushCharactersBuffer();
+            flushCharactersBuffer(false);
         }
         flushPending();
         if (m_doIndent && !m_isprevtext)
         {
             try
@@ -780,11 +784,11 @@
         throws SAXException
     {
         if (m_doIndent) {
             // will add extra one if having namespace but no matter
             m_childNodeNum++;
-            flushCharactersBuffer();
+            flushCharactersBuffer(false);
         }
         ElemContext elemContext = m_elemContext;
 
         // clean up any pending things first
         if (elemContext.m_startTagOpen)
@@ -921,11 +925,11 @@
         final String localName,
         final String name)
         throws org.xml.sax.SAXException
     {
         if (m_doIndent) {
-            flushCharactersBuffer();
+            flushCharactersBuffer(false);
         }
         // deal with any pending issues
         if (m_cdataTagOpen)
             closeCDATA();
 
@@ -1643,11 +1647,11 @@
     public void processingInstruction(String target, String data)
         throws org.xml.sax.SAXException
     {
         if (m_doIndent) {
             m_childNodeNum++;
-            flushCharactersBuffer();
+            flushCharactersBuffer(false);
         }
         // Process any pending starDocument and startElement first.
         flushPending();
 
         // Use a fairly nasty hack to tell if the next node is supposed to be
