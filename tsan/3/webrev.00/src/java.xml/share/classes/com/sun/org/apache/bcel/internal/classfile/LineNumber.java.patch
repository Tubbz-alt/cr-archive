diff a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/LineNumber.java b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/LineNumber.java
--- a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/LineNumber.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/LineNumber.java
@@ -28,11 +28,10 @@
 /**
  * This class represents a (PC offset, line number) pair, i.e., a line number in
  * the source that corresponds to a relative address in the byte code. This
  * is used for debugging purposes.
  *
- * @version $Id: LineNumber.java 1749603 2016-06-21 20:50:19Z ggregory $
  * @see     LineNumberTable
  */
 public final class LineNumber implements Cloneable, Node {
 
     /** Program Counter (PC) corresponds to line */
@@ -53,11 +52,11 @@
 
     /**
      * Construct object from file stream.
      *
      * @param file Input stream
-     * @throws IOEXception if an I/O Exception occurs in readUnsignedShort
+     * @throws IOException if an I/O Exception occurs in readUnsignedShort
      */
     LineNumber(final DataInput file) throws IOException {
         this(file.readUnsignedShort(), file.readUnsignedShort());
     }
 
@@ -87,55 +86,55 @@
 
     /**
      * Dump line number/pc pair to file stream in binary format.
      *
      * @param file Output file stream
-     * @throws IOEXception if an I/O Exception occurs in writeShort
+     * @throws IOException if an I/O Exception occurs in writeShort
      */
-    public final void dump( final DataOutputStream file ) throws IOException {
+    public void dump( final DataOutputStream file ) throws IOException {
         file.writeShort(start_pc);
         file.writeShort(line_number);
     }
 
 
     /**
      * @return Corresponding source line
      */
-    public final int getLineNumber() {
+    public int getLineNumber() {
         return 0xffff & line_number;
     }
 
 
     /**
      * @return PC in code
      */
-    public final int getStartPC() {
+    public int getStartPC() {
         return  0xffff & start_pc;
     }
 
 
     /**
      * @param line_number the source line number
      */
-    public final void setLineNumber( final int line_number ) {
+    public void setLineNumber( final int line_number ) {
         this.line_number = (short) line_number;
     }
 
 
     /**
      * @param start_pc the pc for this line number
      */
-    public final void setStartPC( final int start_pc ) {
+    public void setStartPC( final int start_pc ) {
         this.start_pc = (short) start_pc;
     }
 
 
     /**
      * @return String representation
      */
     @Override
-    public final String toString() {
+    public String toString() {
         return "LineNumber(" + start_pc + ", " + line_number + ")";
     }
 
 
     /**
