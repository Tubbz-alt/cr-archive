diff a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/Synthetic.java b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/Synthetic.java
--- a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/Synthetic.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/Synthetic.java
@@ -34,11 +34,10 @@
  * marked using a Synthetic attribute."  It may appear in the ClassFile
  * attribute table, a field_info table or a method_info table.  This class
  * is intended to be instantiated from the
  * <em>Attribute.readAttribute()</em> method.
  *
- * @version $Id: Synthetic.java 1749603 2016-06-21 20:50:19Z ggregory $
  * @see     Attribute
  */
 public final class Synthetic extends Attribute {
 
     private byte[] bytes;
@@ -80,11 +79,11 @@
             throws IOException {
         this(name_index, length, (byte[]) null, constant_pool);
         if (length > 0) {
             bytes = new byte[length];
             input.readFully(bytes);
-            System.err.println("Synthetic attribute with length > 0");
+            println("Synthetic attribute with length > 0");
         }
     }
 
 
     /**
@@ -105,39 +104,39 @@
      *
      * @param file Output file stream
      * @throws IOException
      */
     @Override
-    public final void dump( final DataOutputStream file ) throws IOException {
+    public void dump( final DataOutputStream file ) throws IOException {
         super.dump(file);
         if (super.getLength() > 0) {
             file.write(bytes, 0, super.getLength());
         }
     }
 
 
     /**
      * @return data bytes.
      */
-    public final byte[] getBytes() {
+    public byte[] getBytes() {
         return bytes;
     }
 
 
     /**
      * @param bytes
      */
-    public final void setBytes( final byte[] bytes ) {
+    public void setBytes( final byte[] bytes ) {
         this.bytes = bytes;
     }
 
 
     /**
      * @return String representation.
      */
     @Override
-    public final String toString() {
+    public String toString() {
         final StringBuilder buf = new StringBuilder("Synthetic");
         if (super.getLength() > 0) {
             buf.append(" ").append(Utility.toHexString(bytes));
         }
         return buf.toString();
