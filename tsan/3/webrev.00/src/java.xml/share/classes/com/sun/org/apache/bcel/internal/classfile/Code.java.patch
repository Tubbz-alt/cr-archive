diff a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/Code.java b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/Code.java
--- a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/Code.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/Code.java
@@ -37,11 +37,10 @@
  *
  * This attribute has attributes itself, namely <em>LineNumberTable</em> which
  * is used for debugging purposes and <em>LocalVariableTable</em> which
  * contains information about the local variables.
  *
- * @version $Id: Code.java 1749603 2016-06-21 20:50:19Z ggregory $
  * @see     Attribute
  * @see     CodeException
  * @see     LineNumberTable
  * @see LocalVariableTable
  */
@@ -142,11 +141,11 @@
      *
      * @param file Output file stream
      * @throws IOException
      */
     @Override
-    public final void dump( final DataOutputStream file ) throws IOException {
+    public void dump( final DataOutputStream file ) throws IOException {
         super.dump(file);
         file.writeShort(max_stack);
         file.writeShort(max_locals);
         file.writeInt(code.length);
         file.write(code, 0, code.length);
@@ -163,11 +162,11 @@
 
     /**
      * @return Collection of code attributes.
      * @see Attribute
      */
-    public final Attribute[] getAttributes() {
+    public Attribute[] getAttributes() {
         return attributes;
     }
 
 
     /**
@@ -197,36 +196,36 @@
 
 
     /**
      * @return Actual byte code of the method.
      */
-    public final byte[] getCode() {
+    public byte[] getCode() {
         return code;
     }
 
 
     /**
      * @return Table of handled exceptions.
      * @see CodeException
      */
-    public final CodeException[] getExceptionTable() {
+    public CodeException[] getExceptionTable() {
         return exception_table;
     }
 
 
     /**
      * @return Number of local variables.
      */
-    public final int getMaxLocals() {
+    public int getMaxLocals() {
         return max_locals;
     }
 
 
     /**
      * @return Maximum size of stack used by this method.
      */
-    public final int getMaxStack() {
+    public int getMaxStack() {
         return max_stack;
     }
 
 
     /**
@@ -258,54 +257,54 @@
 
 
     /**
      * @param attributes the attributes to set for this Code
      */
-    public final void setAttributes( final Attribute[] attributes ) {
+    public void setAttributes( final Attribute[] attributes ) {
         this.attributes = attributes != null ? attributes : new Attribute[0];
         super.setLength(calculateLength()); // Adjust length
     }
 
 
     /**
      * @param code byte code
      */
-    public final void setCode( final byte[] code ) {
+    public void setCode( final byte[] code ) {
         this.code = code != null ? code : new byte[0];
         super.setLength(calculateLength()); // Adjust length
     }
 
 
     /**
      * @param exception_table exception table
      */
-    public final void setExceptionTable( final CodeException[] exception_table ) {
+    public void setExceptionTable( final CodeException[] exception_table ) {
         this.exception_table = exception_table != null ? exception_table : new CodeException[0];
         super.setLength(calculateLength()); // Adjust length
     }
 
 
     /**
      * @param max_locals maximum number of local variables
      */
-    public final void setMaxLocals( final int max_locals ) {
+    public void setMaxLocals( final int max_locals ) {
         this.max_locals = max_locals;
     }
 
 
     /**
      * @param max_stack maximum stack size
      */
-    public final void setMaxStack( final int max_stack ) {
+    public void setMaxStack( final int max_stack ) {
         this.max_stack = max_stack;
     }
 
 
     /**
      * @return String representation of code chunk.
      */
-    public final String toString( final boolean verbose ) {
+    public String toString( final boolean verbose ) {
         final StringBuilder buf = new StringBuilder(100); // CHECKSTYLE IGNORE MagicNumber
         buf.append("Code(max_stack = ").append(max_stack).append(", max_locals = ").append(
                 max_locals).append(", code_length = ").append(code.length).append(")\n").append(
                 Utility.codeToString(code, super.getConstantPool(), 0, -1, verbose));
         if (exception_table.length > 0) {
@@ -326,11 +325,11 @@
 
     /**
      * @return String representation of code chunk.
      */
     @Override
-    public final String toString() {
+    public String toString() {
         return toString(true);
     }
 
 
     /**
