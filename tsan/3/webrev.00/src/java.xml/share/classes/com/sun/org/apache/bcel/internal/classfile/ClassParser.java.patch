diff a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/ClassParser.java b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/ClassParser.java
--- a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/ClassParser.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/ClassParser.java
@@ -41,11 +41,10 @@
  * The structure and the names comply, except for a few conveniences,
  * exactly with the <A href="http://docs.oracle.com/javase/specs/">
  * JVM specification 1.0</a>. See this paper for
  * further details about the structure of a bytecode file.
  *
- * @version $Id: ClassParser.java 1749603 2016-06-21 20:50:19Z ggregory $
  */
 public final class ClassParser {
 
     private DataInputStream dataInputStream;
     private final boolean fileOwned;
@@ -64,11 +63,11 @@
     private final boolean is_zip; // Loaded from zip file
     private static final int BUFSIZE = 8192;
 
 
     /**
-     * Parse class from the given stream.
+     * Parses class from the given stream.
      *
      * @param inputStream Input stream
      * @param file_name File name
      */
     public ClassParser(final InputStream inputStream, final String file_name) {
@@ -82,22 +81,22 @@
             this.dataInputStream = new DataInputStream(new BufferedInputStream(inputStream, BUFSIZE));
         }
     }
 
 
-    /** Parse class from given .class file.
+    /** Parses class from given .class file.
      *
      * @param file_name file name
      */
     public ClassParser(final String file_name) {
         is_zip = false;
         this.file_name = file_name;
         fileOwned = true;
     }
 
 
-    /** Parse class from given .class file in a ZIP-archive
+    /** Parses class from given .class file in a ZIP-archive
      *
      * @param zip_file zip file name
      * @param file_name file name
      */
     public ClassParser(final String zip_file, final String file_name) {
@@ -107,11 +106,11 @@
         this.file_name = file_name;
     }
 
 
     /**
-     * Parse the given Java class file and return an object that represents
+     * Parses the given Java class file and return an object that represents
      * the contained data, i.e., constants, methods, fields and commands.
      * A <em>ClassFormatException</em> is raised, if the file is not a valid
      * .class file. (This does not include verification of the byte code as it
      * is performed by the java interpreter).
      *
@@ -197,11 +196,11 @@
                         : JavaClass.FILE);
     }
 
 
     /**
-     * Read information about the attributes of the class.
+     * Reads information about the attributes of the class.
      * @throws  IOException
      * @throws  ClassFormatException
      */
     private void readAttributes() throws IOException, ClassFormatException {
         final int attributes_count = dataInputStream.readUnsignedShort();
@@ -211,11 +210,11 @@
         }
     }
 
 
     /**
-     * Read information about the class and its super class.
+     * Reads information about the class and its super class.
      * @throws  IOException
      * @throws  ClassFormatException
      */
     private void readClassInfo() throws IOException, ClassFormatException {
         access_flags = dataInputStream.readUnsignedShort();
@@ -233,21 +232,21 @@
         superclass_name_index = dataInputStream.readUnsignedShort();
     }
 
 
     /**
-     * Read constant pool entries.
+     * Reads constant pool entries.
      * @throws  IOException
      * @throws  ClassFormatException
      */
     private void readConstantPool() throws IOException, ClassFormatException {
         constant_pool = new ConstantPool(dataInputStream);
     }
 
 
     /**
-     * Read information about the fields of the class, i.e., its variables.
+     * Reads information about the fields of the class, i.e., its variables.
      * @throws  IOException
      * @throws  ClassFormatException
      */
     private void readFields() throws IOException, ClassFormatException {
         final int fields_count = dataInputStream.readUnsignedShort();
@@ -258,11 +257,11 @@
     }
 
 
     /******************** Private utility methods **********************/
     /**
-     * Check whether the header of the file is ok.
+     * Checks whether the header of the file is ok.
      * Of course, this has to be the first action on successive file reads.
      * @throws  IOException
      * @throws  ClassFormatException
      */
     private void readID() throws IOException, ClassFormatException {
@@ -271,11 +270,11 @@
         }
     }
 
 
     /**
-     * Read information about the interfaces implemented by this class.
+     * Reads information about the interfaces implemented by this class.
      * @throws  IOException
      * @throws  ClassFormatException
      */
     private void readInterfaces() throws IOException, ClassFormatException {
         final int interfaces_count = dataInputStream.readUnsignedShort();
@@ -285,11 +284,11 @@
         }
     }
 
 
     /**
-     * Read information about the methods of the class.
+     * Reads information about the methods of the class.
      * @throws  IOException
      * @throws  ClassFormatException
      */
     private void readMethods() throws IOException, ClassFormatException {
         final int methods_count = dataInputStream.readUnsignedShort();
@@ -299,11 +298,11 @@
         }
     }
 
 
     /**
-     * Read major and minor version of compiler which created the file.
+     * Reads major and minor version of compiler which created the file.
      * @throws  IOException
      * @throws  ClassFormatException
      */
     private void readVersion() throws IOException, ClassFormatException {
         minor = dataInputStream.readUnsignedShort();
