diff a/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/TextImpl.java b/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/TextImpl.java
--- a/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/TextImpl.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/xerces/internal/dom/TextImpl.java
@@ -1,8 +1,7 @@
 /*
- * reserved comment block
- * DO NOT REMOVE OR ALTER!
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
  */
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -40,10 +39,11 @@
  * characters when they're written out as part of an XML stream.
  *
  * @xerces.internal
  *
  * @since  PR-DOM-Level-1-19980818.
+ * @LastModified: Apr 2019
  */
 public class TextImpl
     extends CharacterDataImpl
     implements CharacterData, Text {
 
@@ -144,41 +144,36 @@
 
         if (needsSyncData()) {
             synchronizeData();
         }
 
-        if (fBufferStr == null){
-            fBufferStr = new StringBuffer();
-        }
-        else {
-            fBufferStr.setLength(0);
-        }
+        StringBuilder buffer = new StringBuilder();
         if (data != null && data.length() != 0) {
-            fBufferStr.append(data);
+            buffer.append(data);
         }
 
-        //concatenate text of logically adjacent text nodes to the left of this node in the tree
-        getWholeTextBackward(this.getPreviousSibling(), fBufferStr, this.getParentNode());
-        String temp = fBufferStr.toString();
+        // concatenate text of logically adjacent text nodes to the left of this node in the tree
+        getWholeTextBackward(this.getPreviousSibling(), buffer, this.getParentNode());
+        String temp = buffer.toString();
 
-        //clear buffer
-        fBufferStr.setLength(0);
+        // clear buffer
+        buffer.setLength(0);
 
-        //concatenate text of logically adjacent text nodes to the right of this node in the tree
-        getWholeTextForward(this.getNextSibling(), fBufferStr, this.getParentNode());
+        // concatenate text of logically adjacent text nodes to the right of this node in the tree
+        getWholeTextForward(this.getNextSibling(), buffer, this.getParentNode());
 
-        return temp + fBufferStr.toString();
+        return temp + buffer.toString();
 
     }
 
     /**
-     * internal method taking a StringBuffer in parameter and inserts the
+     * internal method taking a StringBuilder in parameter and inserts the
      * text content at the start of the buffer
      *
      * @param buf
      */
-    protected void insertTextContent(StringBuffer buf) throws DOMException {
+    protected void insertTextContent(StringBuilder buf) throws DOMException {
          String content = getNodeValue();
          if (content != null) {
              buf.insert(0, content);
          }
      }
@@ -191,11 +186,11 @@
      * @param parent
      * @return true - if execution was stopped because the type of node
      *         other than EntityRef, Text, CDATA is encountered, otherwise
      *         return false
      */
-    private boolean getWholeTextForward(Node node, StringBuffer buffer, Node parent){
+    private boolean getWholeTextForward(Node node, StringBuilder buffer, Node parent){
         // boolean to indicate whether node is a child of an entity reference
         boolean inEntRef = false;
 
         if (parent!=null) {
                 inEntRef = parent.getNodeType()==Node.ENTITY_REFERENCE_NODE;
@@ -238,11 +233,11 @@
      * @param parent
      * @return true - if execution was stopped because the type of node
      *         other than EntityRef, Text, CDATA is encountered, otherwise
      *         return false
      */
-    private boolean getWholeTextBackward(Node node, StringBuffer buffer, Node parent){
+    private boolean getWholeTextBackward(Node node, StringBuilder buffer, Node parent){
 
         // boolean to indicate whether node is a child of an entity reference
         boolean inEntRef = false;
         if (parent!=null) {
                 inEntRef = parent.getNodeType()==Node.ENTITY_REFERENCE_NODE;
