diff a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/ConstantCP.java b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/ConstantCP.java
--- a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/ConstantCP.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/ConstantCP.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  */
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -25,17 +25,17 @@
 
 import com.sun.org.apache.bcel.internal.Const;
 
 /**
  * Abstract super class for Fieldref, Methodref, InterfaceMethodref and
- * InvokeDynamic constants.
+ *                          InvokeDynamic constants.
  *
- * @version $Id: ConstantCP.java 1747278 2016-06-07 17:28:43Z britter $
- * @see ConstantFieldref
- * @see ConstantMethodref
- * @see ConstantInterfaceMethodref
- * @see ConstantInvokeDynamic
+ * @see     ConstantFieldref
+ * @see     ConstantMethodref
+ * @see     ConstantInterfaceMethodref
+ * @see     ConstantInvokeDynamic
+ * @LastModified: Jun 2019
  */
 public abstract class ConstantCP extends Constant {
 
     /**
      * References to the constants containing the class and the field signature
@@ -51,79 +51,88 @@
      */
     public ConstantCP(final ConstantCP c) {
         this(c.getTag(), c.getClassIndex(), c.getNameAndTypeIndex());
     }
 
+
     /**
      * Initialize instance from file data.
      *
-     * @param tag Constant type tag
+     * @param tag  Constant type tag
      * @param file Input stream
      * @throws IOException
      */
     ConstantCP(final byte tag, final DataInput file) throws IOException {
         this(tag, file.readUnsignedShort(), file.readUnsignedShort());
     }
 
+
     /**
      * @param class_index Reference to the class containing the field
      * @param name_and_type_index and the field signature
      */
     protected ConstantCP(final byte tag, final int class_index, final int name_and_type_index) {
         super(tag);
         this.class_index = class_index;
         this.name_and_type_index = name_and_type_index;
     }
 
+
     /**
      * Dump constant field reference to file stream in binary format.
      *
      * @param file Output file stream
      * @throws IOException
      */
     @Override
-    public final void dump(final DataOutputStream file) throws IOException {
+    public final void dump( final DataOutputStream file ) throws IOException {
         file.writeByte(super.getTag());
         file.writeShort(class_index);
         file.writeShort(name_and_type_index);
     }
 
+
     /**
      * @return Reference (index) to class this constant refers to.
      */
     public final int getClassIndex() {
         return class_index;
     }
 
+
     /**
      * @param class_index points to Constant_class
      */
-    public final void setClassIndex(final int class_index) {
+    public final void setClassIndex( final int class_index ) {
         this.class_index = class_index;
     }
 
+
     /**
      * @return Reference (index) to signature of the field.
      */
     public final int getNameAndTypeIndex() {
         return name_and_type_index;
     }
 
+
     /**
      * @param name_and_type_index points to Constant_NameAndType
      */
-    public final void setNameAndTypeIndex(final int name_and_type_index) {
+    public final void setNameAndTypeIndex( final int name_and_type_index ) {
         this.name_and_type_index = name_and_type_index;
     }
 
+
     /**
      * @return Class this field belongs to.
      */
-    public String getClass(final ConstantPool cp) {
+    public String getClass( final ConstantPool cp ) {
         return cp.constantToString(class_index, Const.CONSTANT_Class);
     }
 
+
     /**
      * @return String representation.
      *
      * not final as ConstantInvokeDynamic needs to modify
      */
