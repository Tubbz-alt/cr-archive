diff a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BIPUSH.java b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BIPUSH.java
--- a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BIPUSH.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BIPUSH.java
@@ -27,80 +27,85 @@
 /**
  * BIPUSH - Push byte on stack
  *
  * <PRE>Stack: ... -&gt; ..., value</PRE>
  *
- * @version $Id: BIPUSH.java 1747278 2016-06-07 17:28:43Z britter $
  */
 public class BIPUSH extends Instruction implements ConstantPushInstruction {
 
     private byte b;
 
+
     /**
-     * Empty constructor needed for the Class.newInstance() statement in
-     * Instruction.readInstruction(). Not to be used otherwise.
+     * Empty constructor needed for Instruction.readInstruction.
+     * Not to be used otherwise.
      */
     BIPUSH() {
     }
 
-    /**
-     * Push byte on stack
+
+    /** Push byte on stack
      */
     public BIPUSH(final byte b) {
         super(com.sun.org.apache.bcel.internal.Const.BIPUSH, (short) 2);
         this.b = b;
     }
 
+
     /**
      * Dump instruction as byte code to stream out.
      */
     @Override
-    public void dump(final DataOutputStream out) throws IOException {
+    public void dump( final DataOutputStream out ) throws IOException {
         super.dump(out);
         out.writeByte(b);
     }
 
+
     /**
      * @return mnemonic for instruction
      */
     @Override
-    public String toString(final boolean verbose) {
+    public String toString( final boolean verbose ) {
         return super.toString(verbose) + " " + b;
     }
 
+
     /**
      * Read needed data (e.g. index) from file.
      */
     @Override
-    protected void initFromFile(final ByteSequence bytes, final boolean wide) throws IOException {
+    protected void initFromFile( final ByteSequence bytes, final boolean wide ) throws IOException {
         super.setLength(2);
         b = bytes.readByte();
     }
 
+
     @Override
     public Number getValue() {
         return Integer.valueOf(b);
     }
 
-    /**
-     * @return Type.BYTE
+
+    /** @return Type.BYTE
      */
     @Override
-    public Type getType(final ConstantPoolGen cp) {
+    public Type getType( final ConstantPoolGen cp ) {
         return Type.BYTE;
     }
 
+
     /**
-     * Call corresponding visitor method(s). The order is: Call visitor methods
-     * of implemented interfaces first, then call methods according to the class
-     * hierarchy in descending order, i.e., the most specific visitXXX() call
-     * comes last.
+     * Call corresponding visitor method(s). The order is:
+     * Call visitor methods of implemented interfaces first, then
+     * call methods according to the class hierarchy in descending order,
+     * i.e., the most specific visitXXX() call comes last.
      *
      * @param v Visitor object
      */
     @Override
-    public void accept(final Visitor v) {
+    public void accept( final Visitor v ) {
         v.visitPushInstruction(this);
         v.visitStackProducer(this);
         v.visitTypedInstruction(this);
         v.visitConstantPushInstruction(this);
         v.visitBIPUSH(this);
