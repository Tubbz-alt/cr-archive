diff a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BasicType.java b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BasicType.java
--- a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BasicType.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/generic/BasicType.java
@@ -23,11 +23,10 @@
 import com.sun.org.apache.bcel.internal.Const;
 
 /**
  * Denotes basic type such as int.
  *
- * @version $Id: BasicType.java 1747278 2016-06-07 17:28:43Z britter $
  */
 public final class BasicType extends Type {
 
     /**
      * Constructor for basic types such as int, long, `void'
@@ -40,12 +39,13 @@
         if ((type < Const.T_BOOLEAN) || (type > Const.T_VOID)) {
             throw new ClassGenException("Invalid type: " + type);
         }
     }
 
+
     // @since 6.0 no longer final
-    public static BasicType getType(final byte type) {
+    public static BasicType getType( final byte type ) {
         switch (type) {
             case Const.T_VOID:
                 return VOID;
             case Const.T_BOOLEAN:
                 return BOOLEAN;
@@ -66,21 +66,21 @@
             default:
                 throw new ClassGenException("Invalid type: " + type);
         }
     }
 
-    /**
-     * @return a hash code value for the object.
+
+    /** @return a hash code value for the object.
      */
     @Override
     public int hashCode() {
         return super.getType();
     }
 
-    /**
-     * @return true if both type objects refer to the same type
+
+    /** @return true if both type objects refer to the same type
      */
     @Override
-    public boolean equals(final Object _type) {
+    public boolean equals( final Object _type ) {
         return (_type instanceof BasicType) ? ((BasicType) _type).getType() == this.getType() : false;
     }
 }
