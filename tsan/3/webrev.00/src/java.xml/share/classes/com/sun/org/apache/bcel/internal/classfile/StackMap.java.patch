diff a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/StackMap.java b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/StackMap.java
--- a/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/StackMap.java
+++ b/src/java.xml/share/classes/com/sun/org/apache/bcel/internal/classfile/StackMap.java
@@ -28,17 +28,16 @@
 import com.sun.org.apache.bcel.internal.Const;
 
 /**
  * This class represents a stack map attribute used for
  * preverification of Java classes for the <a
- * href="http://java.sun.com/j2me/"> Java 2 Micro Edition</a>
- * (J2ME). This attribute is used by the <a
- * href="http://java.sun.com/products/cldc/">KVM</a> and contained
- * within the Code attribute of a method. See CLDC specification
+ * href="https://www.oracle.com/java/technologies/javameoverview.html">Java Platform, Micro Edition</a>
+ * (Java ME). This attribute is used by the <a
+ * href="https://www.oracle.com/technetwork/java/embedded/javame/java-mobile/kvmwp-150240.pdf">KVM</a>
+ * and contained within the Code attribute of a method. See CLDC specification
  * 5.3.1.2
  *
- * @version $Id: StackMap.java 1749603 2016-06-21 20:50:19Z ggregory $
  * @see     Code
  * @see     StackMapEntry
  * @see     StackMapType
  */
 public final class StackMap extends Attribute {
@@ -76,17 +75,17 @@
         }
     }
 
 
     /**
-     * Dump line number table attribute to file stream in binary format.
+     * Dump stack map table attribute to file stream in binary format.
      *
      * @param file Output file stream
      * @throws IOException
      */
     @Override
-    public final void dump( final DataOutputStream file ) throws IOException {
+    public void dump( final DataOutputStream file ) throws IOException {
         super.dump(file);
         file.writeShort(map.length);
         for (final StackMapEntry entry : map) {
             entry.dump(file);
         }
@@ -94,19 +93,19 @@
 
 
     /**
      * @return Array of stack map entries
      */
-    public final StackMapEntry[] getStackMap() {
+    public StackMapEntry[] getStackMap() {
         return map;
     }
 
 
     /**
      * @param map Array of stack map entries
      */
-    public final void setStackMap( final StackMapEntry[] map ) {
+    public void setStackMap( final StackMapEntry[] map ) {
         this.map = map;
         int len = 2; // Length of 'number_of_entries' field prior to the array of stack maps
         for (final StackMapEntry element : map) {
             len += element.getMapEntrySize();
         }
@@ -116,11 +115,11 @@
 
     /**
      * @return String representation.
      */
     @Override
-    public final String toString() {
+    public String toString() {
         final StringBuilder buf = new StringBuilder("StackMap(");
         for (int i = 0; i < map.length; i++) {
             buf.append(map[i]);
             if (i < map.length - 1) {
                 buf.append(", ");
@@ -157,9 +156,9 @@
     public void accept( final Visitor v ) {
         v.visitStackMap(this);
     }
 
 
-    public final int getMapLength() {
+    public int getMapLength() {
         return map == null ? 0 : map.length;
     }
 }
