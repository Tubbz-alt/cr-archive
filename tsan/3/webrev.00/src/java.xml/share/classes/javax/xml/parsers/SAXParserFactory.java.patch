diff a/src/java.xml/share/classes/javax/xml/parsers/SAXParserFactory.java b/src/java.xml/share/classes/javax/xml/parsers/SAXParserFactory.java
--- a/src/java.xml/share/classes/javax/xml/parsers/SAXParserFactory.java
+++ b/src/java.xml/share/classes/javax/xml/parsers/SAXParserFactory.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -39,10 +39,12 @@
  * @author Neeraj Bajaj
  *
  * @since 1.4
  */
 public abstract class SAXParserFactory {
+    private static final String DEFAULT_IMPL =
+            "com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl";
 
     /**
      * Should Parsers be validating?
      */
     private boolean validating = false;
@@ -57,10 +59,80 @@
      */
     protected SAXParserFactory () {
 
     }
 
+    /**
+     * Creates a new NamespaceAware instance of the {@code SAXParserFactory}
+     * builtin system-default implementation. Parsers produced by the factory
+     * instance provides support for XML namespaces by default.
+     *
+     * @implSpec
+     * In addition to creating a factory instance using the same process as
+     * {@link #newDefaultInstance()}, this method must set NamespaceAware to true.
+     *
+     * @return a new instance of the {@code SAXParserFactory} builtin
+     *         system-default implementation.
+     *
+     * @since 13
+     */
+    public static SAXParserFactory newDefaultNSInstance() {
+        return makeNSAware(new SAXParserFactoryImpl());
+    }
+
+    /**
+     * Creates a new NamespaceAware instance of a {@code SAXParserFactory}.
+     * Parsers produced by the factory instance provides support for XML
+     * namespaces by default.
+     *
+     * @implSpec
+     * In addition to creating a factory instance using the same process as
+     * {@link #newInstance()}, this method must set NamespaceAware to true.
+     *
+     * @return a new instance of the {@code SAXParserFactory}
+     *
+     * @throws FactoryConfigurationError in case of {@linkplain
+     *         java.util.ServiceConfigurationError service configuration error}
+     *         or if the implementation is not available or cannot be instantiated.
+     *
+     * @since 13
+     */
+    public static SAXParserFactory newNSInstance() {
+        return makeNSAware(FactoryFinder.find(SAXParserFactory.class, DEFAULT_IMPL));
+    }
+
+    /**
+     * Creates a new NamespaceAware instance of a {@code SAXParserFactory} from
+     * the class name. Parsers produced by the factory instance provides
+     * support for XML namespaces by default.
+     *
+     * @implSpec
+     * In addition to creating a factory instance using the same process as
+     * {@link #newInstance(java.lang.String, java.lang.ClassLoader)}, this method
+     * must set NamespaceAware to true.
+     *
+     * @param factoryClassName a fully qualified factory class name that provides
+     *                         implementation of
+     *                         {@code javax.xml.parsers.SAXParserFactory}.
+     *
+     * @param classLoader the {@code ClassLoader} used to load the factory class.
+     *                    If it is {@code null}, the current {@code Thread}'s
+     *                    context classLoader is used to load the factory class.
+     *
+     * @return a new instance of the {@code SAXParserFactory}
+     *
+     * @throws FactoryConfigurationError if {@code factoryClassName} is {@code null}, or
+     *                                   the factory class cannot be loaded, instantiated.
+     *
+     * @since 13
+     */
+    public static SAXParserFactory newNSInstance(String factoryClassName,
+            ClassLoader classLoader) {
+            return makeNSAware(FactoryFinder.newInstance(
+                    SAXParserFactory.class, factoryClassName, classLoader, false));
+    }
+
     /**
      * Creates a new instance of the {@code SAXParserFactory} builtin
      * system-default implementation.
      *
      * @return A new instance of the {@code SAXParserFactory} builtin
@@ -121,11 +193,11 @@
      * {@code SAXParserFactory} it can use the factory to
      * configure and obtain parser instances.
      *
      *
      *
-     * <h2>Tip for Trouble-shooting</h2>
+     * <h4>Tip for Trouble-shooting</h4>
      * <p>
      * Setting the {@code jaxp.debug} system property will cause
      * this method to print a lot of debug messages
      * to {@code System.err} about what it is doing and where it is looking at.
      *
@@ -146,11 +218,11 @@
     public static SAXParserFactory newInstance() {
         return FactoryFinder.find(
                 /* The default property name according to the JAXP spec */
                 SAXParserFactory.class,
                 /* The fallback implementation class name */
-                "com.sun.org.apache.xerces.internal.jaxp.SAXParserFactoryImpl");
+                DEFAULT_IMPL);
     }
 
     /**
      * Obtain a new instance of a {@code SAXParserFactory} from class name.
      * This function is useful when there are multiple providers in the classpath.
@@ -159,11 +231,11 @@
      *
      * <p>Once an application has obtained a reference to a {@code SAXParserFactory}
      * it can use the factory to configure and obtain parser instances.
      *
      *
-     * <h2>Tip for Trouble-shooting</h2>
+     * <h4>Tip for Trouble-shooting</h4>
      * <p>Setting the {@code jaxp.debug} system property will cause
      * this method to print a lot of debug messages
      * to {@code System.err} about what it is doing and where it is looking at.
      *
      * <p>
@@ -190,10 +262,15 @@
             //do not fallback if given classloader can't find the class, throw exception
             return FactoryFinder.newInstance(SAXParserFactory.class,
                     factoryClassName, classLoader, false);
     }
 
+    private static SAXParserFactory makeNSAware(SAXParserFactory spf) {
+        spf.setNamespaceAware(true);
+        return spf;
+    }
+
     /**
      * Creates a new instance of a SAXParser using the currently
      * configured factory parameters.
      *
      * @return A new instance of a SAXParser.
@@ -387,11 +464,11 @@
      * property and/or the {@code http://java.sun.com/xml/jaxp/properties/schemaLanguage}
      * property in conjunction with a non-null {@link Schema} object.
      * Such configuration will cause a {@link SAXException}
      * exception when those properties are set on a {@link SAXParser}.
      *
-     * <h3>Note for implementors</h3>
+     * <h4>Note for implementors</h4>
      * <p>
      * A parser must be able to work with any {@link Schema}
      * implementation. However, parsers and schemas are allowed
      * to use implementation-specific custom mechanisms
      * as long as they yield the result described in the specification.
