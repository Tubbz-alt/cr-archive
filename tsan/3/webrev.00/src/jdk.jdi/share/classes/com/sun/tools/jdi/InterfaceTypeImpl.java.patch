diff a/src/jdk.jdi/share/classes/com/sun/tools/jdi/InterfaceTypeImpl.java b/src/jdk.jdi/share/classes/com/sun/tools/jdi/InterfaceTypeImpl.java
--- a/src/jdk.jdi/share/classes/com/sun/tools/jdi/InterfaceTypeImpl.java
+++ b/src/jdk.jdi/share/classes/com/sun/tools/jdi/InterfaceTypeImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -75,31 +75,31 @@
         return superinterfaces;
     }
 
     public List<InterfaceType> subinterfaces() {
         List<InterfaceType> subs = new ArrayList<InterfaceType>();
-        for (ReferenceType refType : vm.allClasses()) {
+        vm.forEachClass(refType -> {
             if (refType instanceof InterfaceType) {
                 InterfaceType interfaze = (InterfaceType)refType;
                 if (interfaze.isPrepared() && interfaze.superinterfaces().contains(this)) {
                     subs.add(interfaze);
                 }
             }
-        }
+        });
         return subs;
     }
 
     public List<ClassType> implementors() {
         List<ClassType> implementors = new ArrayList<ClassType>();
-        for (ReferenceType refType : vm.allClasses()) {
+        vm.forEachClass(refType -> {
             if (refType instanceof ClassType) {
                 ClassType clazz = (ClassType)refType;
                 if (clazz.isPrepared() && clazz.interfaces().contains(this)) {
                     implementors.add(clazz);
                 }
             }
-        }
+        });
         return implementors;
     }
 
     public boolean isInitialized() {
         return isPrepared();
