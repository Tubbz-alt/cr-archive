diff a/src/jdk.jdi/share/classes/com/sun/tools/jdi/ReferenceTypeImpl.java b/src/jdk.jdi/share/classes/com/sun/tools/jdi/ReferenceTypeImpl.java
--- a/src/jdk.jdi/share/classes/com/sun/tools/jdi/ReferenceTypeImpl.java
+++ b/src/jdk.jdi/share/classes/com/sun/tools/jdi/ReferenceTypeImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -605,27 +605,24 @@
         }
         return Arrays.asList((InterfaceType[])intfs);
     }
 
     public List<ReferenceType> nestedTypes() {
-        List<ReferenceType> all = vm.allClasses();
         List<ReferenceType> nested = new ArrayList<ReferenceType>();
         String outername = name();
         int outerlen = outername.length();
-        Iterator<ReferenceType> iter = all.iterator();
-        while (iter.hasNext()) {
-            ReferenceType refType = iter.next();
+        vm.forEachClass(refType -> {
             String name = refType.name();
             int len = name.length();
             /* The separator is historically '$' but could also be '#' */
             if ( len > outerlen && name.startsWith(outername) ) {
                 char c = name.charAt(outerlen);
-                if ( c =='$' || c== '#' ) {
+                if ( c == '$' || c == '#' ) {
                     nested.add(refType);
                 }
             }
-        }
+        });
         return nested;
     }
 
     public Value getValue(Field sig) {
         List<Field> list = new ArrayList<Field>(1);
