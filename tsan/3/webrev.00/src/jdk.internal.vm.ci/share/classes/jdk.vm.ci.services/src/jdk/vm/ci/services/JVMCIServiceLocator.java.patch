diff a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.services/src/jdk/vm/ci/services/JVMCIServiceLocator.java b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.services/src/jdk/vm/ci/services/JVMCIServiceLocator.java
--- a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.services/src/jdk/vm/ci/services/JVMCIServiceLocator.java
+++ b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.services/src/jdk/vm/ci/services/JVMCIServiceLocator.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -20,10 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package jdk.vm.ci.services;
 
+import static jdk.vm.ci.services.Services.IS_BUILDING_NATIVE_IMAGE;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.ServiceLoader;
 
 /**
@@ -66,10 +68,30 @@
      * Gets the provider of the service defined by {@code service} or {@code null} if this object
      * does not have a provider for {@code service}.
      */
     protected abstract <S> S getProvider(Class<S> service);
 
+    private static volatile List<JVMCIServiceLocator> cachedLocators;
+
+    private static Iterable<JVMCIServiceLocator> getJVMCIServiceLocators() {
+        Iterable<JVMCIServiceLocator> result = cachedLocators;
+        if (result != null) {
+            return result;
+        }
+        result = ServiceLoader.load(JVMCIServiceLocator.class, ClassLoader.getSystemClassLoader());
+        if (IS_BUILDING_NATIVE_IMAGE) {
+            ArrayList<JVMCIServiceLocator> l = new ArrayList<>();
+            for (JVMCIServiceLocator locator : result) {
+                l.add(locator);
+            }
+            l.trimToSize();
+            cachedLocators = l;
+            return l;
+        }
+        return result;
+    }
+
     /**
      * Gets the providers of the service defined by {@code service} by querying the available
      * {@link JVMCIServiceLocator} providers.
      *
      * @throws SecurityException if a security manager is present and it denies
@@ -80,11 +102,11 @@
         SecurityManager sm = System.getSecurityManager();
         if (sm != null) {
             sm.checkPermission(new JVMCIPermission());
         }
         List<S> providers = new ArrayList<>();
-        for (JVMCIServiceLocator access : ServiceLoader.load(JVMCIServiceLocator.class, ClassLoader.getSystemClassLoader())) {
+        for (JVMCIServiceLocator access : getJVMCIServiceLocators()) {
             S provider = access.getProvider(service);
             if (provider != null) {
                 providers.add(provider);
             }
         }
