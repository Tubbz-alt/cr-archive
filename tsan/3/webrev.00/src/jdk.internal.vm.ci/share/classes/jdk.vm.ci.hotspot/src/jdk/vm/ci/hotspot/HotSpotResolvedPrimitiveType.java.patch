diff a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedPrimitiveType.java b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedPrimitiveType.java
--- a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedPrimitiveType.java
+++ b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedPrimitiveType.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,16 +21,17 @@
  * questions.
  */
 package jdk.vm.ci.hotspot;
 
 import static java.util.Objects.requireNonNull;
+import static jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.runtime;
 
 import java.lang.annotation.Annotation;
-import java.lang.reflect.Array;
 import java.lang.reflect.Modifier;
 
 import jdk.vm.ci.common.JVMCIError;
+import jdk.vm.ci.common.NativeImageReinitialize;
 import jdk.vm.ci.meta.Assumptions.AssumptionResult;
 import jdk.vm.ci.meta.JavaConstant;
 import jdk.vm.ci.meta.JavaKind;
 import jdk.vm.ci.meta.JavaType;
 import jdk.vm.ci.meta.ResolvedJavaField;
@@ -40,26 +41,41 @@
 /**
  * Implementation of {@link JavaType} for primitive HotSpot types.
  */
 public final class HotSpotResolvedPrimitiveType extends HotSpotResolvedJavaType {
 
-    private final JavaKind kind;
+    @NativeImageReinitialize static HotSpotResolvedPrimitiveType[] primitives;
+
+    private JavaKind kind;
+    HotSpotObjectConstantImpl mirror;
 
     /**
      * Creates the JVMCI mirror for a primitive {@link JavaKind}.
      *
-     * <p>
-     * <b>NOTE</b>: Creating an instance of this class does not install the mirror for the
-     * {@link Class} type. Use {@link HotSpotJVMCIRuntime#fromClass(Class)} instead.
-     * </p>
-     *
      * @param kind the Kind to create the mirror for
      */
-    HotSpotResolvedPrimitiveType(JavaKind kind) {
+    private HotSpotResolvedPrimitiveType(JavaKind kind, HotSpotObjectConstantImpl mirror) {
         super(String.valueOf(kind.getTypeChar()));
+        this.mirror = mirror;
         this.kind = kind;
-        assert mirror().isPrimitive() : mirror() + " not a primitive type";
+    }
+
+    static HotSpotResolvedPrimitiveType forKind(JavaKind kind) {
+        HotSpotResolvedPrimitiveType primitive = primitives[kind.getBasicType()];
+        assert primitive != null : kind;
+        return primitive;
+    }
+
+    @VMEntryPoint
+    static HotSpotResolvedPrimitiveType fromMetaspace(HotSpotObjectConstantImpl mirror, char typeChar) {
+        JavaKind kind = JavaKind.fromPrimitiveOrVoidTypeChar(typeChar);
+        if (primitives == null) {
+            primitives = new HotSpotResolvedPrimitiveType[JavaKind.Void.getBasicType() + 1];
+        }
+        HotSpotResolvedPrimitiveType result = new HotSpotResolvedPrimitiveType(kind, mirror);
+        primitives[kind.getBasicType()] = result;
+        return result;
     }
 
     @Override
     public int getModifiers() {
         return Modifier.ABSTRACT | Modifier.FINAL | Modifier.PUBLIC;
@@ -68,12 +84,11 @@
     @Override
     public HotSpotResolvedObjectType getArrayClass() {
         if (kind == JavaKind.Void) {
             return null;
         }
-        Class<?> javaArrayMirror = Array.newInstance(mirror(), 0).getClass();
-        return HotSpotResolvedObjectTypeImpl.fromObjectClass(javaArrayMirror);
+        return super.getArrayClass();
     }
 
     @Override
     public ResolvedJavaType getElementalType() {
         return this;
@@ -132,10 +147,15 @@
     @Override
     public boolean isInitialized() {
         return true;
     }
 
+    @Override
+    public boolean isBeingInitialized() {
+        return false;
+    }
+
     @Override
     public boolean isLinked() {
         return true;
     }
 
@@ -238,15 +258,10 @@
     @Override
     public String getSourceFileName() {
         throw JVMCIError.unimplemented();
     }
 
-    @Override
-    Class<?> mirror() {
-        return kind.toJavaClass();
-    }
-
     @Override
     public boolean isLocal() {
         return false;
     }
 
@@ -277,6 +292,20 @@
 
     @Override
     public boolean isCloneableWithAllocation() {
         return false;
     }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (!(obj instanceof HotSpotResolvedPrimitiveType)) {
+            return false;
+        }
+        HotSpotResolvedPrimitiveType that = (HotSpotResolvedPrimitiveType) obj;
+        return that.kind == kind;
+    }
+
+    @Override
+    JavaConstant getJavaMirror() {
+        return runtime().reflection.getJavaMirror(this);
+    }
 }
