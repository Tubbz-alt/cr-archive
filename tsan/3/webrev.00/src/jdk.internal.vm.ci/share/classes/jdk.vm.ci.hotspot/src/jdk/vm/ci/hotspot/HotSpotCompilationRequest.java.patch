diff a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotCompilationRequest.java b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotCompilationRequest.java
--- a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotCompilationRequest.java
+++ b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotCompilationRequest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -27,56 +27,69 @@
 /**
  * A compilation request with extra HotSpot specific context such as a compilation identifier and
  * the address of a {@code JVMCIEnv} object that provides native context for a compilation.
  */
 public class HotSpotCompilationRequest extends CompilationRequest {
-    private final long jvmciEnv;
+    /**
+     * Address of the native {@code JVMCICompileState} associated with the request.
+     */
+    private final long compileState;
+
+    /**
+     * An identifier for the request.
+     */
     private final int id;
 
     /**
      * Creates a request to compile a method starting at a given BCI and allocates an identifier to
      * the request.
      *
      * @param method the method to be compiled
      * @param entryBCI the bytecode index (BCI) at which to start compiling where -1 denotes the
      *            method's entry point
-     * @param jvmciEnv address of a native {@code JVMCIEnv} object or 0L
+     * @param compileState address of a native {@code JVMCICompileState} object or 0L
      */
-    public HotSpotCompilationRequest(HotSpotResolvedJavaMethod method, int entryBCI, long jvmciEnv) {
-        this(method, entryBCI, jvmciEnv, method.allocateCompileId(entryBCI));
+    public HotSpotCompilationRequest(HotSpotResolvedJavaMethod method, int entryBCI, long compileState) {
+        this(method, entryBCI, compileState, method.allocateCompileId(entryBCI));
     }
 
     /**
      * Creates a request to compile a method starting at a given BCI.
      *
      * @param method the method to be compiled
      * @param entryBCI the bytecode index (BCI) at which to start compiling where -1 denotes the
      *            method's entry point
-     * @param jvmciEnv address of a native {@code JVMCIEnv} object or 0L
+     * @param compileState address of a native {@code JVMCICompileState} object or 0L
      * @param id an identifier for the request
      */
-    public HotSpotCompilationRequest(HotSpotResolvedJavaMethod method, int entryBCI, long jvmciEnv, int id) {
+    public HotSpotCompilationRequest(HotSpotResolvedJavaMethod method, int entryBCI, long compileState, int id) {
         super(method, entryBCI);
-        this.jvmciEnv = jvmciEnv;
+        this.compileState = compileState;
         this.id = id;
     }
 
     @Override
     public HotSpotResolvedJavaMethod getMethod() {
         return (HotSpotResolvedJavaMethod) super.getMethod();
     }
 
     /**
-     * Gets the address of the native {@code JVMCIEnv} object or 0L if no such object exists.
+     * Gets the address of the native {@code JVMCICompileState} or 0L if no such object exists. This
+     * method should really be named {@code getCompileState} but must remain as is for API
+     * stability.
      */
     public long getJvmciEnv() {
-        return jvmciEnv;
+        return compileState;
     }
 
     /**
      * Gets the VM allocated identifier for this compilation.
      */
     public int getId() {
         return id;
     }
 
+    @Override
+    public String toString() {
+        return id + ":" + super.toString();
+    }
 }
