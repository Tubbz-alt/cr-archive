diff a/src/java.security.sasl/share/classes/com/sun/security/sasl/ClientFactoryImpl.java b/src/java.security.sasl/share/classes/com/sun/security/sasl/ClientFactoryImpl.java
--- a/src/java.security.sasl/share/classes/com/sun/security/sasl/ClientFactoryImpl.java
+++ b/src/java.security.sasl/share/classes/com/sun/security/sasl/ClientFactoryImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2006, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -34,10 +34,12 @@
 import javax.security.auth.callback.CallbackHandler;
 import javax.security.auth.callback.NameCallback;
 import javax.security.auth.callback.PasswordCallback;
 import javax.security.auth.callback.UnsupportedCallbackException;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
+
 /**
   * Client factory for EXTERNAL, CRAM-MD5, PLAIN.
   *
   * Requires the following callbacks to be satisfied by callback handler
   * when using CRAM-MD5 or PLAIN.
@@ -139,11 +141,11 @@
 
             byte[] bytepw;
             String authId;
 
             if (pw != null) {
-                bytepw = new String(pw).getBytes("UTF8");
+                bytepw = new String(pw).getBytes(UTF_8);
                 pcb.clearPassword();
             } else {
                 bytepw = null;
             }
 
