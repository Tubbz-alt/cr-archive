diff a/src/java.security.jgss/share/classes/sun/security/krb5/internal/crypto/DesMacKCksumType.java b/src/java.security.jgss/share/classes/sun/security/krb5/internal/crypto/DesMacKCksumType.java
--- a/src/java.security.jgss/share/classes/sun/security/krb5/internal/crypto/DesMacKCksumType.java
+++ b/src/java.security.jgss/share/classes/sun/security/krb5/internal/crypto/DesMacKCksumType.java
@@ -46,11 +46,11 @@
 
     public int cksumType() {
         return Checksum.CKSUMTYPE_DES_MAC_K;
     }
 
-    public boolean isSafe() {
+    public boolean isKeyed() {
         return true;
     }
 
     public int cksumSize() {
         return 16;
@@ -62,24 +62,20 @@
 
     public int keySize() {
         return 8;
     }
 
-    public byte[] calculateChecksum(byte[] data, int size) {
-        return null;
-    }
-
     /**
      * Calculates keyed checksum.
      * @param data the data used to generate the checksum.
      * @param size length of the data.
      * @param key the key used to encrypt the checksum.
      * @return keyed checksum.
      *
      * @modified by Yanni Zhang, 12/08/99.
      */
-    public byte[] calculateKeyedChecksum(byte[] data, int size, byte[] key,
+    public byte[] calculateChecksum(byte[] data, int size, byte[] key,
         int usage) throws KrbCryptoException {
         //check for weak keys
         try {
             if (DESKeySpec.isWeak(key, 0)) {
                 key[7] = (byte)(key[7] ^ 0xF0);
@@ -91,12 +87,12 @@
         System.arraycopy(key, 0, ivec, 0, key.length);
         byte[] cksum = Des.des_cksum(ivec, data, key);
         return cksum;
     }
 
-    public boolean verifyKeyedChecksum(byte[] data, int size,
+    public boolean verifyChecksum(byte[] data, int size,
         byte[] key, byte[] checksum, int usage) throws KrbCryptoException {
-        byte[] new_cksum = calculateKeyedChecksum(data, data.length, key, usage);
+        byte[] new_cksum = calculateChecksum(data, data.length, key, usage);
         return isChecksumEqual(checksum, new_cksum);
     }
 
 }
