diff a/src/java.security.jgss/share/classes/sun/security/krb5/internal/crypto/DesMacCksumType.java b/src/java.security.jgss/share/classes/sun/security/krb5/internal/crypto/DesMacCksumType.java
--- a/src/java.security.jgss/share/classes/sun/security/krb5/internal/crypto/DesMacCksumType.java
+++ b/src/java.security.jgss/share/classes/sun/security/krb5/internal/crypto/DesMacCksumType.java
@@ -47,11 +47,11 @@
 
     public int cksumType() {
         return Checksum.CKSUMTYPE_DES_MAC;
     }
 
-    public boolean isSafe() {
+    public boolean isKeyed() {
         return true;
     }
 
     public int cksumSize() {
         return 16;
@@ -63,24 +63,20 @@
 
     public int keySize() {
         return 8;
     }
 
-    public byte[] calculateChecksum(byte[] data, int size) {
-        return null;
-    }
-
     /**
      * Calculates keyed checksum.
      * @param data the data used to generate the checksum.
      * @param size length of the data.
      * @param key the key used to encrypt the checksum.
      * @return keyed checksum.
      *
      * @modified by Yanni Zhang, 12/08/99.
      */
-    public byte[] calculateKeyedChecksum(byte[] data, int size, byte[] key,
+    public byte[] calculateChecksum(byte[] data, int size, byte[] key,
         int usage) throws KrbCryptoException {
         byte[] new_data = new byte[size + confounderSize()];
         byte[] conf = Confounder.bytes(confounderSize());
         System.arraycopy(conf, 0, new_data, 0, confounderSize());
         System.arraycopy(data, 0, new_data, confounderSize(), size);
@@ -128,11 +124,11 @@
      * @param checksum the checksum.
      * @return true if verification is successful.
      *
      * @modified by Yanni Zhang, 12/08/99.
      */
-    public boolean verifyKeyedChecksum(byte[] data, int size,
+    public boolean verifyChecksum(byte[] data, int size,
         byte[] key, byte[] checksum, int usage) throws KrbCryptoException {
         byte[] cksum = decryptKeyedChecksum(checksum, key);
 
         byte[] new_data = new byte[size + confounderSize()];
         System.arraycopy(cksum, 0, new_data, 0, confounderSize());
