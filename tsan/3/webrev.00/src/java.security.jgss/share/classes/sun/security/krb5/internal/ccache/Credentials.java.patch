diff a/src/java.security.jgss/share/classes/sun/security/krb5/internal/ccache/Credentials.java b/src/java.security.jgss/share/classes/sun/security/krb5/internal/ccache/Credentials.java
--- a/src/java.security.jgss/share/classes/sun/security/krb5/internal/ccache/Credentials.java
+++ b/src/java.security.jgss/share/classes/sun/security/krb5/internal/ccache/Credentials.java
@@ -46,11 +46,10 @@
     AuthorizationData authorizationData; //optional, not being actually used
     public boolean isEncInSKey;  // true if ticket is encrypted in another ticket's skey
     TicketFlags flags;
     Ticket ticket;
     Ticket secondTicket; //optional
-    private boolean DEBUG = Krb5.DEBUG;
 
     public Credentials(
             PrincipalName new_cname,
             PrincipalName new_sname,
             EncryptionKey new_key,
@@ -167,10 +166,22 @@
 
     public PrincipalName getServicePrincipal() throws RealmException {
         return sname;
     }
 
+    public Ticket getTicket() throws RealmException {
+        return ticket;
+    }
+
+    public PrincipalName getServicePrincipal2() throws RealmException {
+        return secondTicket == null ? null : secondTicket.sname;
+    }
+
+    public PrincipalName getClientPrincipal() throws RealmException {
+        return cname;
+    }
+
     public sun.security.krb5.Credentials setKrbCreds() {
         // Note: We will not pass authorizationData to s.s.k.Credentials. The
         // field in that class will be passed to Krb5Context as the return
         // value of ExtendedGSSContext.inquireSecContext(KRB5_GET_AUTHZ_DATA),
         // which is documented as the authData in the service ticket. That
@@ -178,12 +189,13 @@
         //
         // This class is for the initiator side. Also, authdata inside a ccache
         // is most likely to be the one in Authenticator in PA-TGS-REQ encoded
         // in TGS-REQ, therefore only stored with a service ticket. Currently
         // in Java, we only reads TGTs.
-        return new sun.security.krb5.Credentials(ticket,
-                cname, sname, key, flags, authtime, starttime, endtime, renewTill, caddr);
+        return new sun.security.krb5.Credentials(ticket, cname, null, sname,
+                null, key, flags, authtime, starttime, endtime, renewTill,
+                caddr);
     }
 
     public KerberosTime getStartTime() {
         return starttime;
     }
@@ -206,9 +218,17 @@
 
     public int getEType() {
         return key.getEType();
     }
 
+    public EncryptionKey getKey() {
+        return key;
+    }
+
     public int getTktEType() {
         return ticket.encPart.getEType();
     }
+
+    public int getTktEType2() {
+        return (secondTicket == null) ? 0 : secondTicket.encPart.getEType();
+    }
 }
