diff a/src/java.security.jgss/share/classes/sun/security/krb5/internal/crypto/Crc32CksumType.java b/src/java.security.jgss/share/classes/sun/security/krb5/internal/crypto/Crc32CksumType.java
--- a/src/java.security.jgss/share/classes/sun/security/krb5/internal/crypto/Crc32CksumType.java
+++ b/src/java.security.jgss/share/classes/sun/security/krb5/internal/crypto/Crc32CksumType.java
@@ -30,11 +30,10 @@
 
 package sun.security.krb5.internal.crypto;
 
 import sun.security.krb5.*;
 import sun.security.krb5.internal.*;
-import java.util.zip.CRC32;
 
 public class Crc32CksumType extends CksumType {
 
     public Crc32CksumType() {
     }
@@ -45,11 +44,11 @@
 
     public int cksumType() {
         return Checksum.CKSUMTYPE_CRC32;
     }
 
-    public boolean isSafe() {
+    public boolean isKeyed() {
         return false;
     }
 
     public int cksumSize() {
         return 4;
@@ -61,22 +60,19 @@
 
     public int keySize() {
         return 0;
     }
 
-    public byte[] calculateChecksum(byte[] data, int size) {
+    public byte[] calculateChecksum(byte[] data, int size,
+            byte[] key, int usage) {
         return crc32.byte2crc32sum_bytes(data, size);
     }
 
-    public byte[] calculateKeyedChecksum(byte[] data, int size,
-                                         byte[] key, int usage) {
-                                             return null;
-                                         }
-
-    public boolean verifyKeyedChecksum(byte[] data, int size,
-                                       byte[] key, byte[] checksum, int usage) {
-        return false;
+    public boolean verifyChecksum(byte[] data, int size,
+            byte[] key, byte[] checksum, int usage) {
+        return CksumType.isChecksumEqual(checksum,
+                crc32.byte2crc32sum_bytes(data));
     }
 
     public static byte[] int2quad(long input) {
         byte[] output = new byte[4];
         for (int i = 0; i < 4; i++) {
