diff a/src/java.security.jgss/share/classes/sun/security/krb5/internal/ETypeInfo.java b/src/java.security.jgss/share/classes/sun/security/krb5/internal/ETypeInfo.java
--- a/src/java.security.jgss/share/classes/sun/security/krb5/internal/ETypeInfo.java
+++ b/src/java.security.jgss/share/classes/sun/security/krb5/internal/ETypeInfo.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2009, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,14 +23,17 @@
  * questions.
  */
 
 package sun.security.krb5.internal;
 
-import sun.security.util.*;
-import sun.security.krb5.Asn1Exception;
 import java.io.IOException;
+
+import static java.nio.charset.StandardCharsets.UTF_8;
+
+import sun.security.krb5.Asn1Exception;
 import sun.security.krb5.internal.util.KerberosString;
+import sun.security.util.*;
 
 /**
  * Implements the ASN.1 ETYPE-INFO-ENTRY type.
  *
  * ETYPE-INFO-ENTRY     ::= SEQUENCE {
@@ -97,11 +100,11 @@
                 //
                 // It's known that this field is using the same encoding as
                 // KerberosString in most implementations.
 
                 if (KerberosString.MSNAME) {
-                    this.salt = new String(saltBytes, "UTF8");
+                    this.salt = new String(saltBytes, UTF_8);
                 } else {
                     this.salt = new String(saltBytes);
                 }
             }
         }
@@ -127,11 +130,11 @@
                                         TAG_TYPE), temp);
 
         if (salt != null) {
             temp = new DerOutputStream();
             if (KerberosString.MSNAME) {
-                temp.putOctetString(salt.getBytes("UTF8"));
+                temp.putOctetString(salt.getBytes(UTF_8));
             } else {
                 temp.putOctetString(salt.getBytes());
             }
             bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true,
                                         TAG_VALUE), temp);
