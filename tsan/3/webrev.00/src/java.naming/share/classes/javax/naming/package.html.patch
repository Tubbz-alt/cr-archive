diff a/src/java.naming/share/classes/javax/naming/package.html b/src/java.naming/share/classes/javax/naming/package.html
--- a/src/java.naming/share/classes/javax/naming/package.html
+++ b/src/java.naming/share/classes/javax/naming/package.html
@@ -1,10 +1,10 @@
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
 <html>
 <head>
 <!--
-Copyright (c) 1999, 2006, Oracle and/or its affiliates. All rights reserved.
+Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 
 This code is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License version 2 only, as
 published by the Free Software Foundation.  Oracle designates this
@@ -38,11 +38,11 @@
 independent of any specific naming or directory service
 implementation.  Thus a variety of services--new, emerging, and
 already deployed ones--can be accessed in a common way.
 
 
-<h3>Context</h3>
+<h2>Context</h2>
 <p>
 This package defines the notion of a <em>context</em>, represented
 by the <code>Context</code> interface.
 A context consists of a set of name-to-object <em>bindings</em>.
 <code>Context</code> is the core interface for looking up, binding, unbinding,
@@ -61,11 +61,11 @@
 Printer printer = (Printer)ctx.lookup("treekiller");
 printer.print(report);
 </pre>
 </blockquote>
 
-<h3>Names</h3>
+<h2>Names</h2>
 <p>
 Every naming method in the <code>Context</code>
 interface has two
 overloads: one that accepts a 
 <code>Name</code> argument and one that accepts a string name.
@@ -80,11 +80,11 @@
 them, comparing components, and so on.
 The overloads that accept string names are likely to be more useful
 for simple applications, such as those that simply read in a name
 and look up the corresponding object.
 
-<h3>Bindings</h3>
+<h2>Bindings</h2>
 
 The <code>Binding</code> class represents a name-to-object binding.
 It is a tuple containing the name of the bound object,
 the name of the object's class, and the object itself.
 <p>
@@ -93,11 +93,11 @@
 simply of the object's name and the object's class name.
 The <code>NameClassPair</code> is useful when you only want
 information about the object's class and do not want to
 pay the extra cost of getting the object.
 
-<h3>References</h3>
+<h2>References</h2>
 Objects are stored in naming and directory services in different ways.
 If an object store supports storing Java objects, 
 it might support storing an object in its serialized form.
 However, some naming and directory services do not support the
 storing of Java objects. Furthermore, for some
@@ -110,21 +110,21 @@
 into the Java objects they represent, so that
 JNDI clients have the illusion that what
 is stored in the directory are Java objects. 
 
 
-<h3>The Initial Context</h3>
+<h2>The Initial Context</h2>
 
 In JNDI, all naming and directory operations are performed relative
 to a context. There are no absolute roots.
 Therefore JNDI defines an <em>initial context</em>, 
 <code>InitialContext</code>,
 which provides a starting point for naming and directory operations.
 Once you have an initial context, you can use it to
 look up other contexts and objects.
 
-<h3>Exceptions</h3>
+<h2>Exceptions</h2>
 
 JNDI defines a class hierarchy for exceptions that can be thrown in
 the course of performing naming and directory operations.  The root of
 this class hierarchy is <code>NamingException</code>.
 Programs interested in dealing with a particular exception
