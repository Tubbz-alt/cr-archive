diff a/src/java.naming/share/classes/javax/naming/event/package.html b/src/java.naming/share/classes/javax/naming/event/package.html
--- a/src/java.naming/share/classes/javax/naming/event/package.html
+++ b/src/java.naming/share/classes/javax/naming/event/package.html
@@ -1,10 +1,10 @@
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
 <html>
 <head>
 <!--
-Copyright (c) 1999, 2006, Oracle and/or its affiliates. All rights reserved.
+Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 
 This code is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License version 2 only, as
 published by the Free Software Foundation.  Oracle designates this
@@ -38,11 +38,11 @@
 written in the Java programming language.  It is designed to be
 independent of any specific naming or directory service
 implementation.  Thus a variety of services--new, emerging, and
 already deployed ones--can be accessed in a common way.
 
-<h3>Naming Events</h3>
+<h2>Naming Events</h2>
 <p>
 This package defines a <code>NamingEvent</code> class to represent an event
 that is generated by a naming/directory service.
 It also defines subinterfaces of <code>Context</code> and <code>DirContext</code>,
 called <code>EventContext</code> and <code>EventDirContext</code>,
@@ -77,11 +77,11 @@
 }
 </pre>
 </blockquote>
 
 <a id=THREADING></a>
-<h4>Threading Issues</h4>
+<h3>Threading Issues</h3>
 
 When an event is dispatched to a listener, the listener method (such
 as <code>objectChanged()</code>) may be executed in a thread other than the
 one in which the call to <code>addNamingListener()</code> was executed.
 The choice of which thread to use is made by the service provider.
@@ -96,11 +96,11 @@
 must take into account the likely possibility that the service provider
 will later invoke the listeners in newly-created threads.  As <code>Context</code>
 instances are not guaranteed to be thread-safe in general, all context
 operations must be synchronized as needed.
 
-<h4>Exception Handling</h4>
+<h3>Exception Handling</h3>
 
 When a listener registers for events with a context, the context might
 need to do some internal processing in order to collect information
 required to generate the events.  The context, for example, might need
 to make a request to the server to register interest in changes
