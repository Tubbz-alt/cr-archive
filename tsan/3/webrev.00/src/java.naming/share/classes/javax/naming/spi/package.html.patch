diff a/src/java.naming/share/classes/javax/naming/spi/package.html b/src/java.naming/share/classes/javax/naming/spi/package.html
--- a/src/java.naming/share/classes/javax/naming/spi/package.html
+++ b/src/java.naming/share/classes/javax/naming/spi/package.html
@@ -1,10 +1,10 @@
 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
 <html>
 <head>
 <!--
-Copyright (c) 1999, 2015, Oracle and/or its affiliates. All rights reserved.
+Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 
 This code is free software; you can redistribute it and/or modify it
 under the terms of the GNU General Public License version 2 only, as
 published by the Free Software Foundation.  Oracle designates this
@@ -45,20 +45,20 @@
 The JNDI SPI provides the means for creating JNDI service providers,
 through which JNDI applications access different naming and
 directory services.
 
 
-<h3>Plug-in Architecture</h3>
+<h2>Plug-in Architecture</h2>
 
 The service provider package allows different implementations to be plugged in
 dynamically.
 These different implementations include those for the
 <em>initial context</em>,
 and implementations for contexts that can be reached 
 from the initial context.
 
-<h3>Java Object Support</h3>
+<h2>Java Object Support</h2>
 
 The service provider package provides support
 for implementors of the
 <code>javax.naming.Context.lookup()</code>
 method and related methods to return Java objects that are natural
@@ -66,11 +66,11 @@
 For example, when looking up a printer name from the directory,
 it is natural for you to expect to get
 back a printer object on which to operate.
 
 
-<h3>Multiple Naming Systems (Federation)</h3>
+<h2>Multiple Naming Systems (Federation)</h2>
 
 JNDI operations allow applications to supply names that span multiple
 naming systems.  So in the process of completing
 an operation, one service provider might need to interact
 with another service provider, for example, to pass on
