diff a/src/jdk.jshell/share/classes/jdk/jshell/MaskCommentsAndModifiers.java b/src/jdk.jshell/share/classes/jdk/jshell/MaskCommentsAndModifiers.java
--- a/src/jdk.jshell/share/classes/jdk/jshell/MaskCommentsAndModifiers.java
+++ b/src/jdk.jshell/share/classes/jdk/jshell/MaskCommentsAndModifiers.java
@@ -137,55 +137,50 @@
         for (int cp : s.chars().toArray()) {
             writeMask(cp);
         }
     }
 
+    @SuppressWarnings("fallthrough")
     private void next() {
         switch (c) {
-            case '\'':
             case '"': {
+                int pos = next - 1;
                 maskModifiers = false;
-                write(c);
-                int match = c;
-                while (read() >= 0 && c != match && c != '\n' && c != '\r') {
+                if (str.startsWith("\"\"\"", next - 1)) {
+                    //text block/multi-line string literal:
+                    int searchPoint = next + 2;
+                    int end;
+                    while ((end = str.indexOf("\"\"\"", searchPoint)) != (-1)) {
+                        if (str.charAt(end - 1) != '\\')
+                            break;
+                        searchPoint = end + 1;
+                    }
+                    if (end == (-1)) {
+                        openToken = true;
+                        end = str.length();
+                    } else {
+                        end += 3;
+                    }
                     write(c);
-                    if (c == '\\') {
+                    while (next < end) {
                         write(read());
                     }
+                    break;
                 }
-                write(c); // write match // line-end
-                break;
             }
-            case '`': { // RawString
+            //intentional fall-through:
+            case '\'': {
                 maskModifiers = false;
-                int backtickCount = 0;
-                do {
+                write(c);
+                int match = c;
+                while (read() >= 0 && c != match && c != '\n' && c != '\r') {
                     write(c);
-                    ++backtickCount;
-                    read();
-                } while (c == '`');
-                while (true) {
-                    if (c == '`') {
-                        int cnt = 0;
-                        do {
-                            write(c);
-                            ++cnt;
-                            read();
-                        } while (c == '`');
-                        if (cnt == backtickCount) {
-                            unread();
-                            break;
-                        }
-                    } else {
-                        write(c);
-                        if (c < 0) {
-                            openToken = true;
-                            break;
-                        }
-                        read();
+                    if (c == '\\') {
+                        write(read());
                     }
                 }
+                write(c); // write match // line-end
                 break;
             }
             case '/':
                 read();
                 switch (c) {
