diff a/src/jdk.jconsole/share/classes/sun/tools/jconsole/Worker.java b/src/jdk.jconsole/share/classes/sun/tools/jconsole/Worker.java
--- a/src/jdk.jconsole/share/classes/sun/tools/jconsole/Worker.java
+++ b/src/jdk.jconsole/share/classes/sun/tools/jconsole/Worker.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -27,42 +27,38 @@
 
 import java.util.*;
 
 public class Worker extends Thread {
     ArrayList<Runnable> jobs = new ArrayList<Runnable>();
-    private boolean stopped = false;
+    private volatile boolean stopped = false;
 
     public Worker(String name) {
         super("Worker-"+name);
 
         setPriority(NORM_PRIORITY - 1);
     }
 
     public void run() {
-        while (!isStopped()) {
+        while (!stopped) {
             Runnable job;
             synchronized(jobs) {
-                while (!isStopped() && jobs.size() == 0) {
+                while (!stopped && jobs.size() == 0) {
                     try {
                         jobs.wait();
                     } catch (InterruptedException ex) {
                     }
                 }
 
-                if(isStopped()) break;
+                if(stopped) break;
 
                 job = jobs.remove(0);
             }
             job.run();
         }
     }
 
-    private synchronized boolean isStopped() {
-        return stopped;
-    }
-
-    public synchronized void stopWorker() {
+    public void stopWorker() {
         stopped = true;
         synchronized(jobs) {
             jobs.notify();
         }
     }
