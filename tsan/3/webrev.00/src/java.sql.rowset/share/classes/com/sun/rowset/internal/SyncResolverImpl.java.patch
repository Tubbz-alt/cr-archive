diff a/src/java.sql.rowset/share/classes/com/sun/rowset/internal/SyncResolverImpl.java b/src/java.sql.rowset/share/classes/com/sun/rowset/internal/SyncResolverImpl.java
--- a/src/java.sql.rowset/share/classes/com/sun/rowset/internal/SyncResolverImpl.java
+++ b/src/java.sql.rowset/share/classes/com/sun/rowset/internal/SyncResolverImpl.java
@@ -121,20 +121,21 @@
      }
 
 
     /**
      * Retrieves the conflict status of the current row of this
-     * {@code SyncResolver}, which indicates the operationthe {@code RowSet}
+     * {@code SyncResolver}, which indicates the operation the {@code RowSet}
      * object was attempting when the conflict occurred.
      *
      * @return one of the following constants:
      *         {@code SyncResolver.UPDATE_ROW_CONFLICT},
      *         {@code SyncResolver.DELETE_ROW_CONFLICT}, or
      *         {@code SyncResolver.INSERT_ROW_CONFLICT}
      */
     public int getStatus() {
-        return ((Integer)stats.get(rowStatus-1)).intValue();
+        return stats != null ? (Integer) stats.get(rowStatus - 1) :
+                SyncResolver.NO_ROW_CONFLICT;
     }
 
     /**
      * Retrieves the value in the designated column in the current row of this
      * {@code SyncResolver} object, which is the value that caused a conflict.
@@ -146,10 +147,12 @@
     public Object getConflictValue(int index) throws SQLException {
         try {
              return crsRes.getObject(index);
         } catch(SQLException sqle) {
             throw new SQLException(sqle.getMessage());
+        } catch (Exception e ) {
+            throw new SQLException("Problem obtaining conflicted value!", e);
         }
     }
 
     /**
      * Retrieves the value in the designated column in the current row of this
@@ -162,10 +165,12 @@
     public Object getConflictValue(String columnName) throws SQLException {
         try {
              return crsRes.getObject(columnName);
         } catch(SQLException sqle) {
              throw new SQLException(sqle.getMessage());
+        } catch (Exception e ) {
+            throw new SQLException("Problem obtaining conflicted value!", e);
         }
     }
 
     /**
      * Sets <i>obj</i> as the value in column <i>index</i> in the current row of the
@@ -187,12 +192,13 @@
          * check for the last resolved value of the current row
          * (Note: it can be resolved randomly for same row)
          * then sync back immediately.
          **/
         try {
+            ResultSetMetaData rsmd = crsSync.getMetaData();
             // check whether the index is in range
-            if(index<=0 || index > crsSync.getMetaData().getColumnCount() ) {
+            if(index<=0 || rsmd == null || index > rsmd.getColumnCount() ) {
                 throw new SQLException(resBundle.handleGetObject("syncrsimpl.indexval").toString()+ index);
             }
              // check whether index col is in conflict
             if(crsRes.getObject(index) == null) {
                 throw new SQLException(resBundle.handleGetObject("syncrsimpl.noconflict").toString());
@@ -391,12 +397,12 @@
      * @param columnName a {@code String} object giving the name of the column
      *        into which to set the value to be persisted
      * @param obj an {@code Object} that is the value to be set in the data source
      */
     public void setResolvedValue(String columnName, Object obj) throws SQLException {
-       // modify method to throw SQLException in spec
-       // %%% Missing implementation!
+        // %%% Missing implementation!
+        throw new SQLException("Method not supported");
     }
 
     /**
      * This function is package private,
      * i.e. cannot be accesses outside this package.
@@ -501,11 +507,11 @@
      *     if it is off the result set
      * @throws SQLException if a database access error occurs or the result set type
      *     is TYPE_FORWARD_ONLY
      */
    public boolean previousConflict() throws SQLException {
-       throw new UnsupportedOperationException();
+       return false;
    }
 
     //-----------------------------------------------------------------------
     // Properties
     //-----------------------------------------------------------------------
