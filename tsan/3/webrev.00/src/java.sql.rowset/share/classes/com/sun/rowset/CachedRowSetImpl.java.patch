diff a/src/java.sql.rowset/share/classes/com/sun/rowset/CachedRowSetImpl.java b/src/java.sql.rowset/share/classes/com/sun/rowset/CachedRowSetImpl.java
--- a/src/java.sql.rowset/share/classes/com/sun/rowset/CachedRowSetImpl.java
+++ b/src/java.sql.rowset/share/classes/com/sun/rowset/CachedRowSetImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -40,10 +40,12 @@
 import javax.sql.rowset.serial.*;
 import com.sun.rowset.internal.*;
 import com.sun.rowset.providers.*;
 import sun.reflect.misc.ReflectUtil;
 
+import static java.nio.charset.StandardCharsets.US_ASCII;
+
 /**
  * The standard implementation of the <code>CachedRowSet</code> interface.
  *
  * See interface definition for full behavior and implementation requirements.
  * This reference implementation has made provision for a one-to-one write back
@@ -1597,11 +1599,11 @@
      *            object; must be between <code>1</code> and the number of
      *            rows in this rowset
      * @throws SQLException if the given index is out of bounds
      */
     private void checkIndex(int idx) throws SQLException {
-        if (idx < 1 || idx > RowSetMD.getColumnCount()) {
+        if (idx < 1 ||  RowSetMD == null || idx > RowSetMD.getColumnCount()) {
             throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.invalidcol").toString());
         }
     }
 
     /**
@@ -1634,18 +1636,19 @@
      *         the columns in this rowset
      */
     private int getColIdxByName(String name) throws SQLException {
         RowSetMD = (RowSetMetaDataImpl)this.getMetaData();
         int cols = RowSetMD.getColumnCount();
-
-        for (int i=1; i <= cols; ++i) {
-            String colName = RowSetMD.getColumnName(i);
-            if (colName != null)
-                if (name.equalsIgnoreCase(colName))
-                    return (i);
-                else
-                    continue;
+        if (RowSetMD != null) {
+            for (int i = 1; i <= cols; ++i) {
+                String colName = RowSetMD.getColumnName(i);
+                if (colName != null)
+                    if (name.equalsIgnoreCase(colName))
+                        return (i);
+                    else
+                        continue;
+            }
         }
         throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.invalcolnm").toString());
 
     }
 
@@ -2346,18 +2349,14 @@
         if (value == null) {
             lastValueNull = true;
             return null;
         }
 
-        try {
-            if (isString(RowSetMD.getColumnType(columnIndex))) {
-                asciiStream = new ByteArrayInputStream(((String)value).getBytes("ASCII"));
-            } else {
-                throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.dtypemismt").toString());
-            }
-        } catch (java.io.UnsupportedEncodingException ex) {
-            throw new SQLException(ex.getMessage());
+        if (isString(RowSetMD.getColumnType(columnIndex))) {
+            asciiStream = new ByteArrayInputStream(((String)value).getBytes(US_ASCII));
+        } else {
+            throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.dtypemismt").toString());
         }
 
         return asciiStream;
     }
 
