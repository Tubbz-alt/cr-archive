diff a/src/jdk.net/share/classes/jdk/net/ExtendedSocketOptions.java b/src/jdk.net/share/classes/jdk/net/ExtendedSocketOptions.java
--- a/src/jdk.net/share/classes/jdk/net/ExtendedSocketOptions.java
+++ b/src/jdk.net/share/classes/jdk/net/ExtendedSocketOptions.java
@@ -62,11 +62,15 @@
     /**
      * Service level properties. When a security manager is installed,
      * setting or getting this option requires a {@link NetworkPermission}
      * {@code ("setOption.SO_FLOW_SLA")} or {@code "getOption.SO_FLOW_SLA"}
      * respectively.
+     * @deprecated This is supported only on Solaris. Due to deprecation
+     * of Solaris port, this option is also deprecated.
      */
+    @Deprecated(since="14", forRemoval=true)
+    @SuppressWarnings("removal")
     public static final SocketOption<SocketFlow> SO_FLOW_SLA = new
         ExtSocketOption<SocketFlow>("SO_FLOW_SLA", SocketFlow.class);
 
     /**
      * Disable Delayed Acknowledgements.
@@ -190,10 +194,11 @@
         // Registers the extended socket options with the base module.
         sun.net.ext.ExtendedSocketOptions.register(
                 new sun.net.ext.ExtendedSocketOptions(extendedOptions) {
 
             @Override
+            @SuppressWarnings("removal")
             public void setOption(FileDescriptor fd,
                                   SocketOption<?> option,
                                   Object value)
                 throws SocketException
             {
@@ -220,10 +225,11 @@
                     throw new InternalError("Unexpected option " + option);
                 }
             }
 
             @Override
+            @SuppressWarnings("removal")
             public Object getOption(FileDescriptor fd,
                                     SocketOption<?> option)
                 throws SocketException
             {
                 SecurityManager sm = System.getSecurityManager();
@@ -263,19 +269,21 @@
     }
 
     private static final JavaIOFileDescriptorAccess fdAccess =
             SharedSecrets.getJavaIOFileDescriptorAccess();
 
+    @SuppressWarnings("removal")
     private static void setFlowOption(FileDescriptor fd, SocketFlow f)
         throws SocketException
     {
         int status = platformSocketOptions.setFlowOption(fdAccess.get(fd),
                                                          f.priority(),
                                                          f.bandwidth());
         f.status(status);  // augment the given flow with the status
     }
 
+    @SuppressWarnings("removal")
     private static void getFlowOption(FileDescriptor fd, SocketFlow f)
             throws SocketException {
         int status = platformSocketOptions.getFlowOption(fdAccess.get(fd), f);
         f.status(status);  // augment the given flow with the status
     }
@@ -360,10 +368,11 @@
             throws SocketException
         {
             throw new UnsupportedOperationException("unsupported socket option");
         }
 
+        @SuppressWarnings("removal")
         int getFlowOption(int fd, SocketFlow f) throws SocketException {
             throw new UnsupportedOperationException("unsupported socket option");
         }
 
         boolean flowSupported() {
