diff a/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/LogParser.java b/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/LogParser.java
--- a/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/LogParser.java
+++ b/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/LogParser.java
@@ -864,15 +864,15 @@
             compile.setStart(Double.parseDouble(search(atts, "stamp")));
             compile.setICount(search(atts, "count", "0"));
             compile.setBCount(search(atts, "backedge_count", "0"));
             compile.setBCI(Integer.parseInt(search(atts, "osr_bci", "-1")));
             String compiler = atts.getValue("compiler");
-            if (compiler == null) {
-                compiler = "";
+            assert compiler == null : "Compiler is not specified in task";
+            long level = parseLong(search(atts, "level", "0"));
+            if (level != 0) {
+                compile.setLevel(level);
             }
-            compile.setCompiler(compiler);
-
             // Extract the name of the compiled method.
             String[] parts = spacePattern.split(atts.getValue("method"));
             String methodName = parts[0] + "::" + parts[1];
 
             // Continue collecting compilation meta-data.
@@ -894,10 +894,11 @@
             m.setHolder(parts[0]);
             m.setName(parts[1]);
             m.setSignature(parts[2]);
             m.setFlags("0");
             m.setBytes(search(atts, "bytes", "unknown"));
+            m.setLevel(compile.getLevel());
             compile.setMethod(m);
             events.add(compile);
             compiles.put(id, compile);
             site = compile.getCall();
         } else if (qname.equals("type")) {
@@ -930,10 +931,16 @@
             if (search(atts, "unloaded", "0").equals("0")) {
                m.setBytes(search(atts, "bytes"));
                m.setIICount(search(atts, "iicount"));
                m.setFlags(search(atts, "flags"));
             }
+            String compiler = search(atts, "compiler", "");
+            m.setCompiler(compiler);
+            long level = parseLong(search(atts, "level", "0"));
+            if (level != 0) {
+                m.setLevel(level);
+            }
             methods.put(id, m);
         } else if (qname.equals("call")) {
             if (methodHandleSite != null) {
                 methodHandleSite = null;
             }
@@ -1098,10 +1105,12 @@
                     parseLong(atts.getValue("size")));
             String level = atts.getValue("level");
             if (level != null) {
                 nm.setLevel(parseLong(level));
             }
+            String compiler = search(atts, "compiler", "");
+            nm.setCompiler(compiler);
             nmethods.put(id, nm);
             events.add(nm);
         } else if (qname.equals("parse")) {
             if (failureReason != null && scopes.size() == 0 && !lateInlining) {
                 // A compilation just failed, and we're back at a top
