diff a/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/LogCompilation.java b/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/LogCompilation.java
--- a/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/LogCompilation.java
+++ b/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/LogCompilation.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -63,10 +63,15 @@
         System.out.println("  -C:   compare logs (give files to compare on command line)");
         System.out.println("  -d:   do not print compilation IDs");
         System.exit(exitcode);
     }
 
+    /**
+     * compare controls how some output is formatted
+     */
+    public static boolean compare = false;
+
     /**
      * Process command line arguments, parse log files and trigger desired
      * functionality.
      */
     public static void main(String[] args) throws Exception {
@@ -74,11 +79,10 @@
         boolean statistics = false;
         boolean printInlining = false;
         boolean cleanup = false;
         boolean trapHistory = false;
         boolean printTimeStamps = false;
-        boolean compare = false;
         boolean printID = true;
         int index = 0;
 
         while (args.length > index) {
             String a = args[index];
@@ -252,39 +256,44 @@
      * Container class for a pair of a method and a bytecode instruction index
      * used by a compiler. This is used in
      * {@linkplain #compareLogs() comparing logs}.
      */
     static class MethodBCIPair {
-        public MethodBCIPair(Method m, int b, String c) {
+        public MethodBCIPair(Method m, int b, String c, long l) {
             method = m;
             bci = b;
             compiler = c;
+            level = l;
         }
 
         Method method;
         int bci;
         String compiler;
+        long level;
 
         public boolean equals(Object other) {
             if (!(other instanceof MethodBCIPair)) {
                 return false;
             }
             MethodBCIPair otherp = (MethodBCIPair)other;
+            assert otherp.compiler != null : "otherp null compiler: " + otherp;
+            assert method.getCompiler() != compiler : "Compiler doesnt match";
             return (otherp.bci == bci &&
                     otherp.method.equals(method) &&
-                    otherp.compiler.equals(compiler));
+                    otherp.compiler.equals(compiler) &&
+                    otherp.level == level);
         }
 
         public int hashCode() {
             return method.hashCode() + bci;
         }
 
         public String toString() {
             if (bci != -1) {
                 return method + "@" + bci + " (" + compiler + ")";
             } else {
-                return method + " (" + compiler + ")";
+                return method + " (" + compiler + "(" + level + "))";
             }
         }
     }
 
     /**
@@ -320,12 +329,27 @@
             HashMap<MethodBCIPair,Object> compiles = new HashMap<>();
             logs.add(compiles);
             for (LogEvent c : events) {
                 if (c instanceof Compilation) {
                     Compilation comp = (Compilation) c;
-                    MethodBCIPair key = new MethodBCIPair(comp.getMethod(), comp.getBCI(),
-                                                          comp.getCompiler());
+                    assert (comp.getNMethod() != null  || comp.getFailureReason() != null ): "NMethod is null in compare: " + comp;
+                    String compiler = comp.getNMethod() != null ? comp.getNMethod().getCompiler() :
+                            (comp.getCompiler() != null ? comp.getCompiler() : "");
+                    assert compiler != null : "Compiler is null in compare: " + comp;
+                    long level = -99;
+                    if (comp.getLevel() == 0) {
+                        if (comp.getNMethod() != null) {
+                            level = comp.getNMethod().getLevel();
+                        }
+                        if (level == 0) {
+                            level = comp.getMethod().getLevel();
+                        }
+                    } else {
+                        level = comp.getLevel();
+                    }
+                    assert level != -99 || comp.getFailureReason() != null : "Failed Compile";
+                    MethodBCIPair key = new MethodBCIPair(comp.getMethod(), comp.getBCI(), compiler, level);
                     MethodBCIPair e = methods.get(key);
                     if (e == null) {
                         methods.put(key, key);
                     } else {
                         key = e;
