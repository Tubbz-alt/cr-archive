diff a/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/Compilation.java b/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/Compilation.java
--- a/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/Compilation.java
+++ b/src/utils/LogCompilation/src/main/java/com/sun/hotspot/tools/compiler/Compilation.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -81,13 +81,13 @@
      * Additional information for special compilations (e.g., adapters).
      */
     private String special;
 
     /**
-     * The name of the compiler performing this compilation.
+     * The compilation level for this task.
      */
-    private String compiler;
+    private long level;
 
     /**
      * Start time stamp.
      */
     private double start;
@@ -150,16 +150,16 @@
 
     public double getStart() {
         return start;
     }
 
-    public void setCompiler(String compiler) {
-        this.compiler = compiler;
-    }
-
     public String getCompiler() {
-        return compiler;
+        assert getNMethod() != null  || getFailureReason() != null : "Null nmethod for Compilation:" + getId() + " " + getMethod();
+        if (getNMethod() != null) {
+            getNMethod().getCompiler();
+        }
+        return "";
     }
 
     @Override
     public String toString() {
         StringBuilder sb = new StringBuilder();
@@ -192,11 +192,11 @@
     public void printShort(PrintStream stream) {
         if (getMethod() == null) {
             stream.println(getSpecial());
         } else {
             int bc = isOsr() ? getBCI() : -1;
-            stream.print(getId() + getMethod().decodeFlags(bc) + " " + compiler + " " + getMethod().format(bc));
+            stream.print(getId() + getMethod().decodeFlags(bc) + " " + getCompiler() + " " + getMethod().format(bc));
         }
     }
 
     public void print(PrintStream stream, boolean printID) {
         print(stream, 0, printID, true, false);
@@ -220,11 +220,11 @@
                 if (nmethod != null && nmethod.getLevel() != 0) {
                     stream.print(" " + nmethod.getLevel());
                 }
             }
             int bc = isOsr() ? getBCI() : -1;
-            stream.print(getMethod().decodeFlags(bc) + " " + compiler + " " + getMethod().format(bc));
+            stream.print(getMethod().decodeFlags(bc) + " " + getCompiler() + " " + getMethod().format(bc));
             stream.println();
             if (getFailureReason() != null) {
                 stream.println("COMPILE SKIPPED: " + getFailureReason() + " (not retryable)");
             }
             if (printInlining && call.getCalls() != null) {
@@ -363,6 +363,23 @@
     }
 
     public Compilation getCompilation() {
         return this;
     }
+
+    /**
+     * @return the level
+     */
+    public long getLevel() {
+        return level;
+    }
+
+    /**
+     * @param level the level to set
+     */
+    public void setLevel(long level) {
+        this.level = level;
+        if (getMethod() != null) {
+            getMethod().setLevel(level);
+        }
+    }
 }
