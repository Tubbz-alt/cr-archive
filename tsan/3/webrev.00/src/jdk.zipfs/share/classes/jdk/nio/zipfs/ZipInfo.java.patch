diff a/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipInfo.java b/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipInfo.java
--- a/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipInfo.java
+++ b/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipInfo.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -26,10 +26,11 @@
 package jdk.nio.zipfs;
 
 import java.nio.file.Paths;
 import java.util.Collections;
 import java.util.Map;
+import java.util.zip.ZipException;
 
 import static jdk.nio.zipfs.ZipConstants.*;
 import static jdk.nio.zipfs.ZipUtils.dosToJavaTime;
 import static jdk.nio.zipfs.ZipUtils.unixToJavaTime;
 import static jdk.nio.zipfs.ZipUtils.winToJavaTime;
@@ -63,29 +64,29 @@
                 // use size CENHDR as the extra bytes to read, just in case the
                 // loc.extra is bigger than the cen.extra, try to avoid to read
                 // twice
                 long len = LOCHDR + CENNAM(cen, pos) + CENEXT(cen, pos) + CENHDR;
                 if (zfs.readFullyAt(buf, 0, len, locoff(cen, pos)) != len)
-                    ZipFileSystem.zerror("read loc header failed");
+                    throw new ZipException("read loc header failed");
                 if (LOCEXT(buf) > CENEXT(cen, pos) + CENHDR) {
                     // have to read the second time;
                     len = LOCHDR + LOCNAM(buf) + LOCEXT(buf);
                     if (zfs.readFullyAt(buf, 0, len, locoff(cen, pos)) != len)
-                        ZipFileSystem.zerror("read loc header failed");
+                        throw new ZipException("read loc header failed");
                 }
                 printLOC(buf);
                 pos += CENHDR + CENNAM(cen, pos) + CENEXT(cen, pos) + CENCOM(cen, pos);
             }
             zfs.close();
         }
     }
 
-    static void print(String fmt, Object... objs) {
+    private static void print(String fmt, Object... objs) {
         System.out.printf(fmt, objs);
     }
 
-    static void printLOC(byte[] loc) {
+    private static void printLOC(byte[] loc) {
         print("%n");
         print("[Local File Header]%n");
         print("    Signature   :   %#010x%n", LOCSIG(loc));
         if (LOCSIG(loc) != LOCSIG) {
            print("    Wrong signature!");
@@ -105,11 +106,11 @@
         print("    ExtraLength :       %#6x%n", LOCEXT(loc));
         if (LOCEXT(loc) != 0)
             printExtra(loc, LOCHDR + LOCNAM(loc), LOCEXT(loc));
     }
 
-    static void printCEN(byte[] cen, int off) {
+    private static void printCEN(byte[] cen, int off) {
         print("[Central Directory Header]%n");
         print("    Signature   :   %#010x%n", CENSIG(cen, off));
         if (CENSIG(cen, off) != CENSIG) {
            print("    Wrong signature!");
            return;
@@ -138,11 +139,11 @@
         print("    AttrsEx     :   %#10x%n", CENATX(cen, off));
         print("    LocOff      :   %#10x%n", CENOFF(cen, off));
 
     }
 
-    static long locoff(byte[] cen, int pos) {
+    private static long locoff(byte[] cen, int pos) {
         long locoff = CENOFF(cen, pos);
         if (locoff == ZIP64_MINVAL) {    //ZIP64
             int off = pos + CENHDR + CENNAM(cen, pos);
             int end = off + CENEXT(cen, pos);
             while (off + 4 < end) {
@@ -162,11 +163,11 @@
             // should never be here
         }
         return locoff;
     }
 
-    static void printExtra(byte[] extra, int off, int len) {
+    private static void printExtra(byte[] extra, int off, int len) {
         int end = off + len;
         while (off + 4 <= end) {
             int tag = SH(extra, off);
             int sz = SH(extra, off + 2);
             print("        [tag=0x%04x, sz=%d, data= ", tag, sz);
