diff a/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipPath.java b/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipPath.java
--- a/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipPath.java
+++ b/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipPath.java
@@ -32,13 +32,11 @@
 import java.net.URI;
 import java.nio.channels.FileChannel;
 import java.nio.channels.SeekableByteChannel;
 import java.nio.file.*;
 import java.nio.file.DirectoryStream.Filter;
-import java.nio.file.attribute.BasicFileAttributeView;
-import java.nio.file.attribute.FileAttribute;
-import java.nio.file.attribute.FileTime;
+import java.nio.file.attribute.*;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.Objects;
@@ -209,17 +207,17 @@
         }
     }
 
     private boolean equalsNameAt(ZipPath other, int index) {
         int mbegin = offsets[index];
-        int mlen = 0;
+        int mlen;
         if (index == (offsets.length-1))
             mlen = path.length - mbegin;
         else
             mlen = offsets[index + 1] - mbegin - 1;
         int obegin = other.offsets[index];
-        int olen = 0;
+        int olen;
         if (index == (other.offsets.length - 1))
             olen = other.path.length - obegin;
         else
             olen = other.offsets[index + 1] - obegin - 1;
         if (mlen != olen)
@@ -296,11 +294,11 @@
         return resolve(o.path);
     }
 
     // opath is normalized, just concat
     private ZipPath resolve(byte[] opath) {
-        byte[] resolved = null;
+        byte[] resolved;
         byte[] tpath = this.path;
         int tlen = tpath.length;
         int olen = opath.length;
         if (path[tlen - 1] == '/') {
             resolved = new byte[tlen + olen];
@@ -624,30 +622,27 @@
         return h;
     }
 
     @Override
     public boolean equals(Object obj) {
-        return obj != null &&
-               obj instanceof ZipPath &&
-               this.zfs == ((ZipPath)obj).zfs &&
+        return obj instanceof ZipPath &&
+               this.zfs == ((ZipPath) obj).zfs &&
                compareTo((Path) obj) == 0;
     }
 
     @Override
     public int compareTo(Path other) {
         final ZipPath o = checkPath(other);
         int len1 = this.path.length;
         int len2 = o.path.length;
 
         int n = Math.min(len1, len2);
-        byte v1[] = this.path;
-        byte v2[] = o.path;
 
         int k = 0;
         while (k < n) {
-            int c1 = v1[k] & 0xff;
-            int c2 = v2[k] & 0xff;
+            int c1 = this.path[k] & 0xff;
+            int c2 = o.path[k] & 0xff;
             if (c1 != c2)
                 return c1 - c2;
             k++;
         }
         return len1 - len2;
@@ -674,11 +669,11 @@
         throw new UnsupportedOperationException();
     }
 
     @Override
     public Iterator<Path> iterator() {
-        return new Iterator<Path>() {
+        return new Iterator<>() {
             private int i = 0;
 
             @Override
             public boolean hasNext() {
                 return (i < getNameCount());
@@ -702,10 +697,43 @@
         };
     }
 
     /////////////////////////////////////////////////////////////////////
 
+    @SuppressWarnings("unchecked") // Cast to V
+    <V extends FileAttributeView> V getFileAttributeView(Class<V> type) {
+        if (type == null)
+            throw new NullPointerException();
+        if (type == BasicFileAttributeView.class)
+            return (V)new ZipFileAttributeView(this, false);
+        if (type == ZipFileAttributeView.class)
+            return (V)new ZipFileAttributeView(this, true);
+        if (zfs.supportPosix) {
+            if (type == PosixFileAttributeView.class)
+                return (V)new ZipPosixFileAttributeView(this, false);
+            if (type == FileOwnerAttributeView.class)
+                return (V)new ZipPosixFileAttributeView(this,true);
+        }
+        throw new UnsupportedOperationException("view <" + type + "> is not supported");
+    }
+
+    private ZipFileAttributeView getFileAttributeView(String type) {
+        if (type == null)
+            throw new NullPointerException();
+        if ("basic".equals(type))
+            return new ZipFileAttributeView(this, false);
+        if ("zip".equals(type))
+            return new ZipFileAttributeView(this, true);
+        if (zfs.supportPosix) {
+            if ("posix".equals(type))
+                return new ZipPosixFileAttributeView(this, false);
+            if ("owner".equals(type))
+                return new ZipPosixFileAttributeView(this, true);
+        }
+        throw new UnsupportedOperationException("view <" + type + "> is not supported");
+    }
+
     void createDirectory(FileAttribute<?>... attrs)
         throws IOException
     {
         zfs.createDirectory(getResolvedPath(), attrs);
     }
@@ -729,66 +757,87 @@
 
     void delete() throws IOException {
         zfs.deleteFile(getResolvedPath(), true);
     }
 
-    void deleteIfExists() throws IOException {
+    private void deleteIfExists() throws IOException {
         zfs.deleteFile(getResolvedPath(), false);
     }
 
-    ZipFileAttributes getAttributes() throws IOException
-    {
+    ZipFileAttributes readAttributes() throws IOException {
         ZipFileAttributes zfas = zfs.getFileAttributes(getResolvedPath());
         if (zfas == null)
             throw new NoSuchFileException(toString());
         return zfas;
     }
 
+    @SuppressWarnings("unchecked") // Cast to A
+    <A extends BasicFileAttributes> A readAttributes(Class<A> type) throws IOException {
+        // unconditionally support BasicFileAttributes and ZipFileAttributes
+        if (type == BasicFileAttributes.class || type == ZipFileAttributes.class) {
+            return (A)readAttributes();
+        }
+
+        // support PosixFileAttributes when activated
+        if (type == PosixFileAttributes.class && zfs.supportPosix) {
+            return (A)readAttributes();
+        }
+
+        throw new UnsupportedOperationException("Attributes of type " +
+            type.getName() + " not supported");
+    }
+
     void setAttribute(String attribute, Object value, LinkOption... options)
         throws IOException
     {
-        String type = null;
-        String attr = null;
+        String type;
+        String attr;
         int colonPos = attribute.indexOf(':');
         if (colonPos == -1) {
             type = "basic";
             attr = attribute;
         } else {
             type = attribute.substring(0, colonPos++);
             attr = attribute.substring(colonPos);
         }
-        ZipFileAttributeView view = ZipFileAttributeView.get(this, type);
-        if (view == null)
-            throw new UnsupportedOperationException("view <" + view + "> is not supported");
-        view.setAttribute(attr, value);
+        getFileAttributeView(type).setAttribute(attr, value);
     }
 
     void setTimes(FileTime mtime, FileTime atime, FileTime ctime)
         throws IOException
     {
         zfs.setTimes(getResolvedPath(), mtime, atime, ctime);
     }
 
-    Map<String, Object> readAttributes(String attributes, LinkOption... options)
+    void setOwner(UserPrincipal owner) throws IOException {
+        zfs.setOwner(getResolvedPath(), owner);
+    }
+
+    void setPermissions(Set<PosixFilePermission> perms)
         throws IOException
+    {
+        zfs.setPermissions(getResolvedPath(), perms);
+    }
 
+    void setGroup(GroupPrincipal group) throws IOException {
+        zfs.setGroup(getResolvedPath(), group);
+    }
+
+    Map<String, Object> readAttributes(String attributes, LinkOption... options)
+        throws IOException
     {
-        String view = null;
-        String attrs = null;
+        String view;
+        String attrs;
         int colonPos = attributes.indexOf(':');
         if (colonPos == -1) {
             view = "basic";
             attrs = attributes;
         } else {
             view = attributes.substring(0, colonPos++);
             attrs = attributes.substring(colonPos);
         }
-        ZipFileAttributeView zfv = ZipFileAttributeView.get(this, view);
-        if (zfv == null) {
-            throw new UnsupportedOperationException("view not supported");
-        }
-        return zfv.readAttributes(attrs);
+        return getFileAttributeView(view).readAttributes(attrs);
     }
 
     FileStore getFileStore() throws IOException {
         // each ZipFileSystem only has one root (as requested for now)
         if (exists())
@@ -844,15 +893,12 @@
         if ((w && zfs.isReadOnly()) || x) {
             throw new AccessDeniedException(toString());
         }
     }
 
-    boolean exists() {
-        try {
-            return zfs.exists(getResolvedPath());
-        } catch (IOException x) {}
-        return false;
+    private boolean exists() {
+        return zfs.exists(getResolvedPath());
     }
 
     OutputStream newOutputStream(OpenOption... options) throws IOException
     {
         if (options.length == 0)
@@ -896,11 +942,11 @@
                 replaceExisting = true;
             else if (opt == COPY_ATTRIBUTES)
                 copyAttrs = true;
         }
         // attributes of source file
-        ZipFileAttributes zfas = getAttributes();
+        ZipFileAttributes zfas = readAttributes();
         // check if target exists
         boolean exists;
         if (replaceExisting) {
             try {
                 target.deleteIfExists();
@@ -916,33 +962,29 @@
 
         if (zfas.isDirectory()) {
             // create directory or file
             target.createDirectory();
         } else {
-            InputStream is = zfs.newInputStream(getResolvedPath());
-            try {
-                OutputStream os = target.newOutputStream();
-                try {
-                    byte[] buf = new byte[8192];
-                    int n = 0;
-                    while ((n = is.read(buf)) != -1) {
-                        os.write(buf, 0, n);
-                    }
-                } finally {
-                    os.close();
+            try (InputStream is = zfs.newInputStream(getResolvedPath());
+                 OutputStream os = target.newOutputStream())
+            {
+                byte[] buf = new byte[8192];
+                int n;
+                while ((n = is.read(buf)) != -1) {
+                    os.write(buf, 0, n);
                 }
-            } finally {
-                is.close();
             }
         }
         if (copyAttrs) {
-            BasicFileAttributeView view =
-                ZipFileAttributeView.get(target, BasicFileAttributeView.class);
+            ZipFileAttributeView view =
+                target.getFileAttributeView(ZipFileAttributeView.class);
             try {
                 view.setTimes(zfas.lastModifiedTime(),
                               zfas.lastAccessTime(),
                               zfas.creationTime());
+                // copy permissions
+                view.setPermissions(zfas.storedPermissions().orElse(null));
             } catch (IOException x) {
                 // rollback?
                 try {
                     target.delete();
                 } catch (IOException ignore) { }
@@ -961,13 +1003,13 @@
         assert false;
         return -1;
     }
 
     // to avoid double escape
-    static String decodeUri(String s) {
+    private static String decodeUri(String s) {
         if (s == null)
-            return s;
+            return null;
         int n = s.length();
         if (n == 0)
             return s;
         if (s.indexOf('%') < 0)
             return s;
