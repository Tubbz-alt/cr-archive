diff a/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipFileStore.java b/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipFileStore.java
--- a/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipFileStore.java
+++ b/src/jdk.zipfs/share/classes/jdk/nio/zipfs/ZipFileStore.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -30,11 +30,13 @@
 import java.nio.file.FileSystems;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.attribute.BasicFileAttributeView;
 import java.nio.file.attribute.FileAttributeView;
+import java.nio.file.attribute.FileOwnerAttributeView;
 import java.nio.file.attribute.FileStoreAttributeView;
+import java.nio.file.attribute.PosixFileAttributeView;
 
 /**
  * @author Xueming Shen, Rajendra Gutupalli, Jaya Hangal
  */
 class ZipFileStore extends FileStore {
@@ -61,23 +63,26 @@
     }
 
     @Override
     public boolean supportsFileAttributeView(Class<? extends FileAttributeView> type) {
         return (type == BasicFileAttributeView.class ||
-                type == ZipFileAttributeView.class);
+                type == ZipFileAttributeView.class ||
+                ((type == FileOwnerAttributeView.class ||
+                  type == PosixFileAttributeView.class) && zfs.supportPosix));
     }
 
     @Override
     public boolean supportsFileAttributeView(String name) {
-        return name.equals("basic") || name.equals("zip");
+        return "basic".equals(name) || "zip".equals(name) ||
+               (("owner".equals(name) || "posix".equals(name)) && zfs.supportPosix);
     }
 
     @Override
     public <V extends FileStoreAttributeView> V getFileStoreAttributeView(Class<V> type) {
         if (type == null)
             throw new NullPointerException();
-        return (V)null;
+        return null;
     }
 
     @Override
     public long getTotalSpace() throws IOException {
          return new ZipFileStoreAttributes(this).totalSpace();
@@ -106,29 +111,29 @@
 
     private static class ZipFileStoreAttributes {
         final FileStore fstore;
         final long size;
 
-        public ZipFileStoreAttributes(ZipFileStore fileStore)
+        ZipFileStoreAttributes(ZipFileStore fileStore)
             throws IOException
         {
             Path path = FileSystems.getDefault().getPath(fileStore.name());
             this.size = Files.size(path);
             this.fstore = Files.getFileStore(path);
         }
 
-        public long totalSpace() {
+        long totalSpace() {
             return size;
         }
 
-        public long usableSpace() throws IOException {
+        long usableSpace() throws IOException {
             if (!fstore.isReadOnly())
                 return fstore.getUsableSpace();
             return 0;
         }
 
-        public long unallocatedSpace()  throws IOException {
+        long unallocatedSpace()  throws IOException {
             if (!fstore.isReadOnly())
                 return fstore.getUnallocatedSpace();
             return 0;
         }
     }
