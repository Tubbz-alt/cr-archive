diff a/src/jdk.jdeps/share/classes/com/sun/tools/javap/ClassWriter.java b/src/jdk.jdeps/share/classes/com/sun/tools/javap/ClassWriter.java
--- a/src/jdk.jdeps/share/classes/com/sun/tools/javap/ClassWriter.java
+++ b/src/jdk.jdeps/share/classes/com/sun/tools/javap/ClassWriter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2007, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -28,10 +28,11 @@
 import java.net.URI;
 import java.text.DateFormat;
 import java.util.Collection;
 import java.util.Date;
 import java.util.List;
+import java.util.Set;
 
 import com.sun.tools.classfile.AccessFlags;
 import com.sun.tools.classfile.Attribute;
 import com.sun.tools.classfile.Attributes;
 import com.sun.tools.classfile.ClassFile;
@@ -469,10 +470,13 @@
         for (Method m: classFile.methods)
             writeMethod(m);
         setPendingNewline(false);
     }
 
+    private static final int DEFAULT_ALLOWED_MAJOR_VERSION = 52;
+    private static final int DEFAULT_ALLOWED_MINOR_VERSION = 0;
+
     protected void writeMethod(Method m) {
         if (!options.checkAccess(m.access_flags))
             return;
 
         method = m;
@@ -502,26 +506,39 @@
                 methodType = null;
                 methodExceptions = null;
             }
         }
 
-        writeModifiers(flags.getMethodModifiers());
+        Set<String> modifiers = flags.getMethodModifiers();
+
+        String name = getName(m);
+        if (classFile.isInterface() &&
+                (!flags.is(AccessFlags.ACC_ABSTRACT)) && !name.equals("<clinit>")) {
+            if (classFile.major_version > DEFAULT_ALLOWED_MAJOR_VERSION ||
+                    (classFile.major_version == DEFAULT_ALLOWED_MAJOR_VERSION && classFile.minor_version >= DEFAULT_ALLOWED_MINOR_VERSION)) {
+                if (!flags.is(AccessFlags.ACC_STATIC | AccessFlags.ACC_PRIVATE)) {
+                    modifiers.add("default");
+                }
+            }
+        }
+
+        writeModifiers(modifiers);
         if (methodType != null) {
             print(new JavaTypePrinter(false).printTypeArgs(methodType.typeParamTypes));
         }
-        switch (getName(m)) {
+        switch (name) {
             case "<init>":
                 print(getJavaName(classFile));
                 print(getJavaParameterTypes(d, flags));
                 break;
             case "<clinit>":
                 print("{}");
                 break;
             default:
                 print(getJavaReturnType(d));
                 print(" ");
-                print(getName(m));
+                print(name);
                 print(getJavaParameterTypes(d, flags));
                 break;
         }
 
         Attribute e_attr = m.attributes.get(Attribute.Exceptions);
