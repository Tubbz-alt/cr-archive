diff a/src/java.management/share/classes/javax/management/openmbean/OpenMBeanParameterInfoSupport.java b/src/java.management/share/classes/javax/management/openmbean/OpenMBeanParameterInfoSupport.java
--- a/src/java.management/share/classes/javax/management/openmbean/OpenMBeanParameterInfoSupport.java
+++ b/src/java.management/share/classes/javax/management/openmbean/OpenMBeanParameterInfoSupport.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -56,31 +56,36 @@
     static final long serialVersionUID = -7235016873758443122L;
 
     /**
      * @serial The open mbean parameter's <i>open type</i>
      */
+    @SuppressWarnings("serial") // Not statically typed as Serializable
     private OpenType<?>    openType;
 
     /**
      * @serial The open mbean parameter's default value
      */
+    @SuppressWarnings("serial") // Not statically typed as Serializable
     private Object      defaultValue    = null;
 
     /**
      * @serial The open mbean parameter's legal values. This {@link
      * Set} is unmodifiable
      */
+    @SuppressWarnings("serial") // Conditionally serializable
     private Set<?> legalValues     = null;  // to be constructed unmodifiable
 
     /**
      * @serial The open mbean parameter's min value
      */
+    @SuppressWarnings("serial") // Conditionally serializable
     private Comparable<?> minValue        = null;
 
     /**
      * @serial The open mbean parameter's max value
      */
+    @SuppressWarnings("serial") // Conditionally serializable
     private Comparable<?> maxValue        = null;
 
 
     // As this instance is immutable, these two values need only
     // be calculated once.
