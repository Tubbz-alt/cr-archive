diff a/src/java.management/share/classes/java/lang/management/MemoryMXBean.java b/src/java.management/share/classes/java/lang/management/MemoryMXBean.java
--- a/src/java.management/share/classes/java/lang/management/MemoryMXBean.java
+++ b/src/java.management/share/classes/java/lang/management/MemoryMXBean.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -47,11 +47,11 @@
  * </blockquote>
  *
  * It can be obtained by calling the
  * {@link PlatformManagedObject#getObjectName} method.
  *
- * <h3> Memory </h3>
+ * <h2> Memory </h2>
  * The memory system of the Java virtual machine manages
  * the following kinds of memory:
  *
  * <h3> 1. Heap </h3>
  * The Java virtual machine has a <i>heap</i> that is the runtime
@@ -85,11 +85,11 @@
  * optimization which also belongs to non-heap memory.
  * For example, the JIT compiler requires memory for storing the native
  * machine code translated from the Java virtual machine code for
  * high performance.
  *
- * <h3>Memory Pools and Memory Managers</h3>
+ * <h2>Memory Pools and Memory Managers</h2>
  * {@link MemoryPoolMXBean Memory pools} and
  * {@link MemoryManagerMXBean memory managers} are the abstract entities
  * that monitor and manage the memory system
  * of the Java virtual machine.
  *
@@ -103,11 +103,11 @@
  * for reclaiming memory occupied by unreachable objects.  A Java virtual
  * machine may have one or more memory managers.   It may
  * add or remove memory managers during execution.
  * A memory pool can be managed by more than one memory manager.
  *
- * <h3>Memory Usage Monitoring</h3>
+ * <h2>Memory Usage Monitoring</h2>
  *
  * Memory usage is a very important monitoring attribute for the memory system.
  * The memory usage, for example, could indicate:
  * <ul>
  *   <li>the memory usage of an application,</li>
@@ -129,11 +129,11 @@
  * or workload distribution use.  For example, an application would stop
  * receiving any new workload when its memory usage exceeds a
  * certain threshold. It is not intended for an application to detect
  * and recover from a low memory condition.
  *
- * <h3>Notifications</h3>
+ * <h2>Notifications</h2>
  *
  * <p>This {@code MemoryMXBean} is a
  * {@link javax.management.NotificationEmitter NotificationEmitter}
  * that emits two types of memory {@link javax.management.Notification
  * notifications} if any one of the memory pools
@@ -167,11 +167,11 @@
  * was constructed. The {@code CompositeData} contains the attributes
  * as described in {@link MemoryNotificationInfo#from
  * MemoryNotificationInfo}.
  *
  * <hr>
- * <h3>NotificationEmitter</h3>
+ * <h2>NotificationEmitter</h2>
  * The {@code MemoryMXBean} object returned by
  * {@link ManagementFactory#getMemoryMXBean} implements
  * the {@link javax.management.NotificationEmitter NotificationEmitter}
  * interface that allows a listener to be registered within the
  * {@code MemoryMXBean} as a notification listener.
