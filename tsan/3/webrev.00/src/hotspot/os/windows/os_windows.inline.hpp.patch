diff a/src/hotspot/os/windows/os_windows.inline.hpp b/src/hotspot/os/windows/os_windows.inline.hpp
--- a/src/hotspot/os/windows/os_windows.inline.hpp
+++ b/src/hotspot/os/windows/os_windows.inline.hpp
@@ -28,17 +28,10 @@
 #include "runtime/os.hpp"
 #include "runtime/thread.hpp"
 
 inline const char* os::dll_file_extension()            { return ".dll"; }
 
-inline const int os::default_file_open_flags() { return O_BINARY | O_NOINHERIT;}
-
-// File names are case-insensitive on windows only
-inline int os::file_name_strncmp(const char* s, const char* t, size_t num) {
-  return _strnicmp(s, t, num);
-}
-
 inline void  os::dll_unload(void *lib) {
   ::FreeLibrary((HMODULE)lib);
 }
 
 inline void* os::dll_lookup(void *lib, const char *name) {
@@ -84,30 +77,37 @@
 
 inline void os::exit(int num) {
   win32::exit_process_or_thread(win32::EPT_PROCESS, num);
 }
 
-// Platform Monitor implementation
+// Platform Mutex/Monitor implementation
+
+inline os::PlatformMutex::PlatformMutex() {
+  InitializeCriticalSection(&_mutex);
+}
+
+inline os::PlatformMutex::~PlatformMutex() {
+  DeleteCriticalSection(&_mutex);
+}
 
 inline os::PlatformMonitor::PlatformMonitor() {
   InitializeConditionVariable(&_cond);
-  InitializeCriticalSection(&_mutex);
 }
 
 inline os::PlatformMonitor::~PlatformMonitor() {
-  DeleteCriticalSection(&_mutex);
+  // There is no DeleteConditionVariable API
 }
 
-inline void os::PlatformMonitor::lock() {
+inline void os::PlatformMutex::lock() {
   EnterCriticalSection(&_mutex);
 }
 
-inline void os::PlatformMonitor::unlock() {
+inline void os::PlatformMutex::unlock() {
   LeaveCriticalSection(&_mutex);
 }
 
-inline bool os::PlatformMonitor::try_lock() {
+inline bool os::PlatformMutex::try_lock() {
   return TryEnterCriticalSection(&_mutex);
 }
 
 inline void os::PlatformMonitor::notify() {
   WakeConditionVariable(&_cond);
