diff a/src/hotspot/cpu/x86/crc32c.h b/src/hotspot/cpu/x86/crc32c.h
--- a/src/hotspot/cpu/x86/crc32c.h
+++ b/src/hotspot/cpu/x86/crc32c.h
@@ -1,7 +1,7 @@
 /*
-* Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+* Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
@@ -20,10 +20,13 @@
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 *
 */
 
+#ifndef CPU_X86_CRC32C_H
+#define CPU_X86_CRC32C_H
+
 enum {
   // S. Gueron / Information Processing Letters 112 (2012) 184
   // shows than anything above 6K and below 32K is a good choice
   // 32K does not deliver any further performance gains
   // 6K=8*256 (*3 as we compute 3 blocks together)
@@ -62,5 +65,7 @@
 // Disclaimer:
 // If you ever decide to increase/decrease number of "chunks" be sure to modify
 // a) constants table generation (hotspot/src/cpu/x86/vm/stubRoutines_x86.cpp)
 // b) constant fetch from that table (macroAssembler_x86.cpp)
 // c) unrolled for loop (macroAssembler_x86.cpp)
+
+#endif /* !CPU_X86_CRC32C_H */
