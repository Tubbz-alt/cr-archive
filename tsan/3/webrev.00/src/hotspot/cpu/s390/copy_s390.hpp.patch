diff a/src/hotspot/cpu/s390/copy_s390.hpp b/src/hotspot/cpu/s390/copy_s390.hpp
--- a/src/hotspot/cpu/s390/copy_s390.hpp
+++ b/src/hotspot/cpu/s390/copy_s390.hpp
@@ -1,8 +1,8 @@
 /*
- * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
- * Copyright (c) 2016 SAP SE. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020 SAP SE. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -1093,16 +1093,10 @@
 // Distinguish between simple and large zero_to_words.
 static void pd_zero_to_words(HeapWord* tohw, size_t count) {
   pd_zero_to_bytes(tohw, count*HeapWordSize);
 }
 
-// Delegate to pd_zero_to_bytes. It also works HeapWord-atomic.
-static void pd_zero_to_words_large(HeapWord* tohw, size_t count) {
-  // JVM2008: generally frequent, some tests show very frequent calls.
-  pd_zero_to_bytes(tohw, count*HeapWordSize);
-}
-
 static void pd_zero_to_bytes(void* to, size_t count) {
   // JVM2008: some calls (generally), some tests frequent
 #ifdef USE_INLINE_ASM
   // Even zero_to_bytes() requires HeapWord-atomic, or, at least, sequential
   // zeroing of the memory. MVCLE is not fit for that job:
