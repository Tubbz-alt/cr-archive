diff a/src/hotspot/share/jfr/leakprofiler/utilities/saveRestore.hpp b/src/hotspot/share/jfr/leakprofiler/utilities/saveRestore.hpp
--- a/src/hotspot/share/jfr/leakprofiler/utilities/saveRestore.hpp
+++ b/src/hotspot/share/jfr/leakprofiler/utilities/saveRestore.hpp
@@ -25,11 +25,11 @@
 #ifndef SHARE_JFR_LEAKPROFILER_UTILITIES_SAVERESTORE_HPP
 #define SHARE_JFR_LEAKPROFILER_UTILITIES_SAVERESTORE_HPP
 
 #include "memory/allocation.hpp"
 #include "memory/iterator.hpp"
-#include "oops/markOop.hpp"
+#include "oops/markWord.hpp"
 #include "utilities/growableArray.hpp"
 
 template <typename T, typename Impl>
 class SaveRestore {
  private:
@@ -76,24 +76,24 @@
 * It will then install an "identifier" mark oop to be used for
 * identification purposes in the search for reference chains.
 * The destructor will restore the original mark oop.
 */
 
-class MarkOopContext {
+class MarkWordContext {
  private:
   oop _obj;
-  markOop _mark_oop;
-  void swap(MarkOopContext& rhs);
+  markWord _mark_word;
+  void swap(MarkWordContext& rhs);
  public:
-  MarkOopContext();
-  MarkOopContext(const oop obj);
-  MarkOopContext(const MarkOopContext& rhs);
-  void operator=(MarkOopContext rhs);
-  ~MarkOopContext();
+  MarkWordContext();
+  MarkWordContext(const oop obj);
+  MarkWordContext(const MarkWordContext& rhs);
+  void operator=(MarkWordContext rhs);
+  ~MarkWordContext();
 };
 
-typedef SaveRestore<oop, ContextStore<oop, MarkOopContext> > SaveRestoreMarkOops;
+typedef SaveRestore<oop, ContextStore<oop, MarkWordContext> > SaveRestoreMarkWords;
 
 class ClassLoaderData;
 
 class CLDClaimContext {
  private:
