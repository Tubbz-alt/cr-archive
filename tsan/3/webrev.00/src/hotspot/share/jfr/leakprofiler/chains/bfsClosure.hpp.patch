diff a/src/hotspot/share/jfr/leakprofiler/chains/bfsClosure.hpp b/src/hotspot/share/jfr/leakprofiler/chains/bfsClosure.hpp
--- a/src/hotspot/share/jfr/leakprofiler/chains/bfsClosure.hpp
+++ b/src/hotspot/share/jfr/leakprofiler/chains/bfsClosure.hpp
@@ -23,12 +23,12 @@
  */
 
 #ifndef SHARE_JFR_LEAKPROFILER_CHAINS_BFSCLOSURE_HPP
 #define SHARE_JFR_LEAKPROFILER_CHAINS_BFSCLOSURE_HPP
 
+#include "jfr/leakprofiler/utilities/unifiedOopRef.hpp"
 #include "memory/iterator.hpp"
-#include "oops/oop.hpp"
 
 class BitSet;
 class Edge;
 class EdgeStore;
 class EdgeQueue;
@@ -50,23 +50,27 @@
   void log_dfs_fallback() const;
 
   bool is_complete() const;
   void step_frontier() const;
 
-  void closure_impl(const oop* reference, const oop pointee);
-  void add_chain(const oop* reference, const oop pointee);
+  void closure_impl(UnifiedOopRef reference, const oop pointee);
+  void add_chain(UnifiedOopRef reference, const oop pointee);
   void dfs_fallback();
 
   void iterate(const Edge* parent);
-  void process(const oop* reference, const oop pointee);
+  void process(UnifiedOopRef reference, const oop pointee);
 
   void process_root_set();
   void process_queue();
 
  public:
+  virtual ReferenceIterationMode reference_iteration_mode() { return DO_FIELDS_EXCEPT_REFERENT; }
+  virtual bool should_verify_oops() { return false; }
+
   BFSClosure(EdgeQueue* edge_queue, EdgeStore* edge_store, BitSet* mark_bits);
   void process();
+  void do_root(UnifiedOopRef ref);
 
   virtual void do_oop(oop* ref);
   virtual void do_oop(narrowOop* ref);
 };
 
