diff a/src/hotspot/share/jfr/utilities/jfrDoublyLinkedList.hpp b/src/hotspot/share/jfr/utilities/jfrDoublyLinkedList.hpp
--- a/src/hotspot/share/jfr/utilities/jfrDoublyLinkedList.hpp
+++ b/src/hotspot/share/jfr/utilities/jfrDoublyLinkedList.hpp
@@ -46,12 +46,12 @@
   T* clear(bool return_tail = false);
   T* remove(T* const node);
   void prepend(T* const node);
   void append(T* const node);
   void append_list(T* const head_node, T* const tail_node, size_t count);
-  debug_only(bool in_list(const T* const target_node) const;)
-  debug_only(bool locate(const T* start_node, const T* const target_node) const;)
+  bool in_list(const T* const target_node) const;
+  bool locate(const T* start_node, const T* const target_node) const;
 };
 
 template <typename T>
 inline void JfrDoublyLinkedList<T>::prepend(T* const node) {
   assert(node != NULL, "invariant");
@@ -151,11 +151,10 @@
   assert(head() == NULL, "invariant");
   assert(tail() == NULL, "invariant");
   return node;
 }
 
-#ifdef ASSERT
 template <typename T>
 bool JfrDoublyLinkedList<T>::locate(const T* node, const T* const target) const {
   assert(target != NULL, "invariant");
   while (node != NULL) {
     if (node == target) {
@@ -180,11 +179,10 @@
     ++count;
     node = (T*)node->next();
   }
   assert(count_param == count, "invariant");
 }
-#endif // ASSERT
 
 template <typename T>
 void JfrDoublyLinkedList<T>::append_list(T* const head_node, T* const tail_node, size_t count) {
   assert(head_node != NULL, "invariant");
   assert(!in_list(head_node), "already in list error");
