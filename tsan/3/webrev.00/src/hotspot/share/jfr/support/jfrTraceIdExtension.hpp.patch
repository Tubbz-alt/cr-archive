diff a/src/hotspot/share/jfr/support/jfrTraceIdExtension.hpp b/src/hotspot/share/jfr/support/jfrTraceIdExtension.hpp
--- a/src/hotspot/share/jfr/support/jfrTraceIdExtension.hpp
+++ b/src/hotspot/share/jfr/support/jfrTraceIdExtension.hpp
@@ -24,10 +24,11 @@
 
 #ifndef SHARE_JFR_SUPPORT_JFRTRACEIDEXTENSION_HPP
 #define SHARE_JFR_SUPPORT_JFRTRACEIDEXTENSION_HPP
 
 #include "jfr/recorder/checkpoint/types/traceid/jfrTraceId.hpp"
+#include "utilities/macros.hpp"
 
 #define DEFINE_TRACE_ID_FIELD mutable traceid _trace_id
 
 #define DEFINE_TRACE_ID_METHODS \
   traceid trace_id() const { return _trace_id; } \
@@ -41,41 +42,57 @@
 #define REMOVE_ID(k) JfrTraceId::remove(k);
 #define RESTORE_ID(k) JfrTraceId::restore(k);
 
 class JfrTraceFlag {
  private:
-  mutable jbyte _flags;
+  mutable jshort _flags;
  public:
   JfrTraceFlag() : _flags(0) {}
-  explicit JfrTraceFlag(jbyte flags) : _flags(flags) {}
-  void set_flag(jbyte flag) const {
-    _flags |= flag;
+  bool is_set(jshort flag) const {
+    return (_flags & flag) != 0;
   }
-  void clear_flag(jbyte flag) const {
-    _flags &= (~flag);
+
+  jshort flags() const {
+    return _flags;
   }
-  jbyte flags() const { return _flags; }
-  bool is_set(jbyte flag) const {
-    return (_flags & flag) != 0;
+
+  void set_flags(jshort flags) const {
+    _flags = flags;
+  }
+
+  jbyte* flags_addr() const {
+#ifdef VM_LITTLE_ENDIAN
+    return (jbyte*)&_flags;
+#else
+    return ((jbyte*)&_flags) + 1;
+#endif
   }
-  jbyte* const flags_addr() const {
-    return &_flags;
+
+  jbyte* meta_addr() const {
+#ifdef VM_LITTLE_ENDIAN
+    return ((jbyte*)&_flags) + 1;
+#else
+    return (jbyte*)&_flags;
+#endif
   }
 };
 
 #define DEFINE_TRACE_FLAG mutable JfrTraceFlag _trace_flags
 
 #define DEFINE_TRACE_FLAG_ACCESSOR                 \
-  void set_trace_flag(jbyte flag) const {          \
-    _trace_flags.set_flag(flag);                   \
+  bool is_trace_flag_set(jshort flag) const {      \
+    return _trace_flags.is_set(flag);              \
   }                                                \
-  jbyte trace_flags() const {                      \
+  jshort trace_flags() const {                     \
     return _trace_flags.flags();                   \
   }                                                \
-  bool is_trace_flag_set(jbyte flag) const {       \
-    return _trace_flags.is_set(flag);              \
+  void set_trace_flags(jshort flags) const {       \
+    _trace_flags.set_flags(flags);                 \
   }                                                \
-  jbyte* const trace_flags_addr() const {          \
+  jbyte* trace_flags_addr() const {                \
     return _trace_flags.flags_addr();              \
+  }                                                \
+  jbyte* trace_meta_addr() const {                 \
+    return _trace_flags.meta_addr();               \
   }
 
 #endif // SHARE_JFR_SUPPORT_JFRTRACEIDEXTENSION_HPP
