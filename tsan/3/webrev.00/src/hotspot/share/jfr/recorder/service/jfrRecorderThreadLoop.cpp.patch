diff a/src/hotspot/share/jfr/recorder/service/jfrRecorderThreadLoop.cpp b/src/hotspot/share/jfr/recorder/service/jfrRecorderThreadLoop.cpp
--- a/src/hotspot/share/jfr/recorder/service/jfrRecorderThreadLoop.cpp
+++ b/src/hotspot/share/jfr/recorder/service/jfrRecorderThreadLoop.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -38,26 +38,27 @@
 void recorderthread_entry(JavaThread* thread, Thread* unused) {
   assert(thread != NULL, "invariant");
   #define START (msgs & (MSGBIT(MSG_START)))
   #define SHUTDOWN (msgs & MSGBIT(MSG_SHUTDOWN))
   #define ROTATE (msgs & (MSGBIT(MSG_ROTATE)|MSGBIT(MSG_STOP)))
+  #define FLUSHPOINT (msgs & (MSGBIT(MSG_FLUSHPOINT)))
   #define PROCESS_FULL_BUFFERS (msgs & (MSGBIT(MSG_ROTATE)|MSGBIT(MSG_STOP)|MSGBIT(MSG_FULLBUFFER)))
   #define SCAVENGE (msgs & (MSGBIT(MSG_DEADBUFFER)))
 
   JfrPostBox& post_box = JfrRecorderThread::post_box();
   log_debug(jfr, system)("Recorder thread STARTED");
 
   {
     bool done = false;
     int msgs = 0;
     JfrRecorderService service;
-    MutexLockerEx msg_lock(JfrMsg_lock);
+    MutexLocker msg_lock(JfrMsg_lock);
 
     // JFR MESSAGE LOOP PROCESSING - BEGIN
     while (!done) {
       if (post_box.is_empty()) {
-        JfrMsg_lock->wait(false);
+        JfrMsg_lock->wait();
       }
       msgs = post_box.collect();
       JfrMsg_lock->unlock();
       if (PROCESS_FULL_BUFFERS) {
         service.process_full_buffers();
@@ -70,10 +71,12 @@
       service.evaluate_chunk_size_for_rotation();
       if (START) {
         service.start();
       } else if (ROTATE) {
         service.rotate(msgs);
+      } else if (FLUSHPOINT) {
+        service.flushpoint();
       }
       JfrMsg_lock->lock();
       post_box.notify_waiters();
       if (SHUTDOWN) {
         log_debug(jfr, system)("Request to STOP recorder");
@@ -88,8 +91,9 @@
   JfrRecorder::on_recorder_thread_exit();
 
   #undef START
   #undef SHUTDOWN
   #undef ROTATE
+  #undef FLUSHPOINT
   #undef PROCESS_FULL_BUFFERS
   #undef SCAVENGE
 }
