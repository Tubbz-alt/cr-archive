diff a/src/hotspot/share/runtime/safepointMechanism.hpp b/src/hotspot/share/runtime/safepointMechanism.hpp
--- a/src/hotspot/share/runtime/safepointMechanism.hpp
+++ b/src/hotspot/share/runtime/safepointMechanism.hpp
@@ -30,27 +30,25 @@
 #include "utilities/macros.hpp"
 #include "utilities/sizes.hpp"
 
 // This is the abstracted interface for the safepoint implementation
 class SafepointMechanism : public AllStatic {
-  enum PollingType {
-    _global_page_poll,
-    _thread_local_poll
-  };
-  static PollingType _polling_type;
   static void* _poll_armed_value;
   static void* _poll_disarmed_value;
-  static void set_uses_thread_local_poll()            { _polling_type     = _thread_local_poll; }
 
   static void* poll_armed_value()                     { return _poll_armed_value; }
   static void* poll_disarmed_value()                  { return _poll_disarmed_value; }
 
   static inline bool local_poll_armed(JavaThread* thread);
 
+  static inline void disarm_local_poll(JavaThread* thread);
+  static inline void disarm_local_poll_release(JavaThread* thread);
+
   static inline bool local_poll(Thread* thread);
   static inline bool global_poll();
 
+  static void block_or_handshake(JavaThread *thread);
   static void block_if_requested_slow(JavaThread *thread);
 
   static void default_initialize();
 
   static void pd_initialize() NOT_AIX({ default_initialize(); });
@@ -59,14 +57,12 @@
   // between the armed and disarmed value by masking out this bit.
   const static intptr_t _poll_bit = 8;
 public:
   static intptr_t poll_bit() { return _poll_bit; }
 
-  static bool uses_global_page_poll() { return _polling_type == _global_page_poll; }
-  static bool uses_thread_local_poll() { return _polling_type == _thread_local_poll; }
-
-  static bool supports_thread_local_poll() {
+  static bool uses_global_page_poll() { return !uses_thread_local_poll(); }
+  static bool uses_thread_local_poll() {
 #ifdef THREAD_LOCAL_POLL
     return true;
 #else
     return false;
 #endif
@@ -78,14 +74,14 @@
   // Blocks a thread until safepoint/handshake is completed.
   static inline void block_if_requested(JavaThread* thread);
 
   // Caller is responsible for using a memory barrier if needed.
   static inline void arm_local_poll(JavaThread* thread);
-  static inline void disarm_local_poll(JavaThread* thread);
-
+  // Release semantics
   static inline void arm_local_poll_release(JavaThread* thread);
-  static inline void disarm_local_poll_release(JavaThread* thread);
+  // Optional release
+  static inline void disarm_if_needed(JavaThread* thread, bool memory_order_release);
 
   // Setup the selected safepoint mechanism
   static void initialize();
   static void initialize_header(JavaThread* thread);
 };
