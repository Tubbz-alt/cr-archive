diff a/src/hotspot/share/runtime/threadStatisticalInfo.hpp b/src/hotspot/share/runtime/threadStatisticalInfo.hpp
--- a/src/hotspot/share/runtime/threadStatisticalInfo.hpp
+++ b/src/hotspot/share/runtime/threadStatisticalInfo.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2018 SAP SE. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
@@ -35,14 +35,13 @@
   // The time stamp the thread was started.
   const uint64_t _start_time_stamp;
   uint64_t _define_class_count;
 
 public:
-  ThreadStatisticalInfo() : _start_time_stamp(os::javaTimeMillis()), _define_class_count(0) {}
-  uint64_t getStartTime() const             { return _start_time_stamp; }
-  uint64_t getDefineClassCount() const                    { return  _define_class_count; }
+  ThreadStatisticalInfo() : _start_time_stamp(os::javaTimeNanos()), _define_class_count(0) {}
+  uint64_t getDefineClassCount() const { return  _define_class_count; }
   void     setDefineClassCount(uint64_t defineClassCount) { _define_class_count = defineClassCount; }
-  void     incr_define_class_count()                      { _define_class_count += 1; }
-  uint64_t getElapsedTime() const           { return os::javaTimeMillis() - getStartTime(); }
+  void     incr_define_class_count() { _define_class_count += 1; }
+  uint64_t getElapsedTime() const { return nanos_to_millis(os::javaTimeNanos() - _start_time_stamp); }
 };
 
 #endif // SHARE_RUNTIME_THREADSTATISTICALINFO_HPP
