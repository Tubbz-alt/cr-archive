diff a/src/hotspot/share/oops/access.inline.hpp b/src/hotspot/share/oops/access.inline.hpp
--- a/src/hotspot/share/oops/access.inline.hpp
+++ b/src/hotspot/share/oops/access.inline.hpp
@@ -88,37 +88,37 @@
   };
 
   template <class GCBarrierType, DecoratorSet decorators>
   struct PostRuntimeDispatch<GCBarrierType, BARRIER_ATOMIC_XCHG, decorators>: public AllStatic {
     template <typename T>
-    static T access_barrier(T new_value, void* addr) {
-      return GCBarrierType::atomic_xchg_in_heap(new_value, reinterpret_cast<T*>(addr));
+    static T access_barrier(void* addr, T new_value) {
+      return GCBarrierType::atomic_xchg_in_heap(reinterpret_cast<T*>(addr), new_value);
     }
 
-    static oop oop_access_barrier(oop new_value, void* addr) {
+    static oop oop_access_barrier(void* addr, oop new_value) {
       typedef typename HeapOopType<decorators>::type OopType;
       if (HasDecorator<decorators, IN_HEAP>::value) {
-        return GCBarrierType::oop_atomic_xchg_in_heap(new_value, reinterpret_cast<OopType*>(addr));
+        return GCBarrierType::oop_atomic_xchg_in_heap(reinterpret_cast<OopType*>(addr), new_value);
       } else {
-        return GCBarrierType::oop_atomic_xchg_not_in_heap(new_value, reinterpret_cast<OopType*>(addr));
+        return GCBarrierType::oop_atomic_xchg_not_in_heap(reinterpret_cast<OopType*>(addr), new_value);
       }
     }
   };
 
   template <class GCBarrierType, DecoratorSet decorators>
   struct PostRuntimeDispatch<GCBarrierType, BARRIER_ATOMIC_CMPXCHG, decorators>: public AllStatic {
     template <typename T>
-    static T access_barrier(T new_value, void* addr, T compare_value) {
-      return GCBarrierType::atomic_cmpxchg_in_heap(new_value, reinterpret_cast<T*>(addr), compare_value);
+    static T access_barrier(void* addr, T compare_value, T new_value) {
+      return GCBarrierType::atomic_cmpxchg_in_heap(reinterpret_cast<T*>(addr), compare_value, new_value);
     }
 
-    static oop oop_access_barrier(oop new_value, void* addr, oop compare_value) {
+    static oop oop_access_barrier(void* addr, oop compare_value, oop new_value) {
       typedef typename HeapOopType<decorators>::type OopType;
       if (HasDecorator<decorators, IN_HEAP>::value) {
-        return GCBarrierType::oop_atomic_cmpxchg_in_heap(new_value, reinterpret_cast<OopType*>(addr), compare_value);
+        return GCBarrierType::oop_atomic_cmpxchg_in_heap(reinterpret_cast<OopType*>(addr), compare_value, new_value);
       } else {
-        return GCBarrierType::oop_atomic_cmpxchg_not_in_heap(new_value, reinterpret_cast<OopType*>(addr), compare_value);
+        return GCBarrierType::oop_atomic_cmpxchg_not_in_heap(reinterpret_cast<OopType*>(addr), compare_value, new_value);
       }
     }
   };
 
   template <class GCBarrierType, DecoratorSet decorators>
@@ -169,28 +169,28 @@
   };
 
   template <class GCBarrierType, DecoratorSet decorators>
   struct PostRuntimeDispatch<GCBarrierType, BARRIER_ATOMIC_XCHG_AT, decorators>: public AllStatic {
     template <typename T>
-    static T access_barrier(T new_value, oop base, ptrdiff_t offset) {
-      return GCBarrierType::atomic_xchg_in_heap_at(new_value, base, offset);
+    static T access_barrier(oop base, ptrdiff_t offset, T new_value) {
+      return GCBarrierType::atomic_xchg_in_heap_at(base, offset, new_value);
     }
 
-    static oop oop_access_barrier(oop new_value, oop base, ptrdiff_t offset) {
-      return GCBarrierType::oop_atomic_xchg_in_heap_at(new_value, base, offset);
+    static oop oop_access_barrier(oop base, ptrdiff_t offset, oop new_value) {
+      return GCBarrierType::oop_atomic_xchg_in_heap_at(base, offset, new_value);
     }
   };
 
   template <class GCBarrierType, DecoratorSet decorators>
   struct PostRuntimeDispatch<GCBarrierType, BARRIER_ATOMIC_CMPXCHG_AT, decorators>: public AllStatic {
     template <typename T>
-    static T access_barrier(T new_value, oop base, ptrdiff_t offset, T compare_value) {
-      return GCBarrierType::atomic_cmpxchg_in_heap_at(new_value, base, offset, compare_value);
+    static T access_barrier(oop base, ptrdiff_t offset, T compare_value, T new_value) {
+      return GCBarrierType::atomic_cmpxchg_in_heap_at(base, offset, compare_value, new_value);
     }
 
-    static oop oop_access_barrier(oop new_value, oop base, ptrdiff_t offset, oop compare_value) {
-      return GCBarrierType::oop_atomic_cmpxchg_in_heap_at(new_value, base, offset, compare_value);
+    static oop oop_access_barrier(oop base, ptrdiff_t offset, oop compare_value, oop new_value) {
+      return GCBarrierType::oop_atomic_cmpxchg_in_heap_at(base, offset, compare_value, new_value);
     }
   };
 
   template <class GCBarrierType, DecoratorSet decorators>
   struct PostRuntimeDispatch<GCBarrierType, BARRIER_CLONE, decorators>: public AllStatic {
@@ -204,17 +204,10 @@
     static oop access_barrier(oop obj) {
       return GCBarrierType::resolve(obj);
     }
   };
 
-  template <class GCBarrierType, DecoratorSet decorators>
-  struct PostRuntimeDispatch<GCBarrierType, BARRIER_EQUALS, decorators>: public AllStatic {
-    static bool access_barrier(oop o1, oop o2) {
-      return GCBarrierType::equals(o1, o2);
-    }
-  };
-
   // Resolving accessors with barriers from the barrier set happens in two steps.
   // 1. Expand paths with runtime-decorators, e.g. is UseCompressedOops on or off.
   // 2. Expand paths for each BarrierSet available in the system.
   template <DecoratorSet decorators, typename FunctionPointerT, BarrierType barrier_type>
   struct BarrierResolver: public AllStatic {
@@ -314,35 +307,35 @@
     _load_at_func = function;
     return function(base, offset);
   }
 
   template <DecoratorSet decorators, typename T>
-  T RuntimeDispatch<decorators, T, BARRIER_ATOMIC_CMPXCHG>::atomic_cmpxchg_init(T new_value, void* addr, T compare_value) {
+  T RuntimeDispatch<decorators, T, BARRIER_ATOMIC_CMPXCHG>::atomic_cmpxchg_init(void* addr, T compare_value, T new_value) {
     func_t function = BarrierResolver<decorators, func_t, BARRIER_ATOMIC_CMPXCHG>::resolve_barrier();
     _atomic_cmpxchg_func = function;
-    return function(new_value, addr, compare_value);
+    return function(addr, compare_value, new_value);
   }
 
   template <DecoratorSet decorators, typename T>
-  T RuntimeDispatch<decorators, T, BARRIER_ATOMIC_CMPXCHG_AT>::atomic_cmpxchg_at_init(T new_value, oop base, ptrdiff_t offset, T compare_value) {
+  T RuntimeDispatch<decorators, T, BARRIER_ATOMIC_CMPXCHG_AT>::atomic_cmpxchg_at_init(oop base, ptrdiff_t offset, T compare_value, T new_value) {
     func_t function = BarrierResolver<decorators, func_t, BARRIER_ATOMIC_CMPXCHG_AT>::resolve_barrier();
     _atomic_cmpxchg_at_func = function;
-    return function(new_value, base, offset, compare_value);
+    return function(base, offset, compare_value, new_value);
   }
 
   template <DecoratorSet decorators, typename T>
-  T RuntimeDispatch<decorators, T, BARRIER_ATOMIC_XCHG>::atomic_xchg_init(T new_value, void* addr) {
+  T RuntimeDispatch<decorators, T, BARRIER_ATOMIC_XCHG>::atomic_xchg_init(void* addr, T new_value) {
     func_t function = BarrierResolver<decorators, func_t, BARRIER_ATOMIC_XCHG>::resolve_barrier();
     _atomic_xchg_func = function;
-    return function(new_value, addr);
+    return function(addr, new_value);
   }
 
   template <DecoratorSet decorators, typename T>
-  T RuntimeDispatch<decorators, T, BARRIER_ATOMIC_XCHG_AT>::atomic_xchg_at_init(T new_value, oop base, ptrdiff_t offset) {
+  T RuntimeDispatch<decorators, T, BARRIER_ATOMIC_XCHG_AT>::atomic_xchg_at_init(oop base, ptrdiff_t offset, T new_value) {
     func_t function = BarrierResolver<decorators, func_t, BARRIER_ATOMIC_XCHG_AT>::resolve_barrier();
     _atomic_xchg_at_func = function;
-    return function(new_value, base, offset);
+    return function(base, offset, new_value);
   }
 
   template <DecoratorSet decorators, typename T>
   bool RuntimeDispatch<decorators, T, BARRIER_ARRAYCOPY>::arraycopy_init(arrayOop src_obj, size_t src_offset_in_bytes, T* src_raw,
                                                                          arrayOop dst_obj, size_t dst_offset_in_bytes, T* dst_raw,
@@ -365,15 +358,8 @@
   oop RuntimeDispatch<decorators, T, BARRIER_RESOLVE>::resolve_init(oop obj) {
     func_t function = BarrierResolver<decorators, func_t, BARRIER_RESOLVE>::resolve_barrier();
     _resolve_func = function;
     return function(obj);
   }
-
-  template <DecoratorSet decorators, typename T>
-  bool RuntimeDispatch<decorators, T, BARRIER_EQUALS>::equals_init(oop o1, oop o2) {
-    func_t function = BarrierResolver<decorators, func_t, BARRIER_EQUALS>::resolve_barrier();
-    _equals_func = function;
-    return function(o1, o2);
-  }
 }
 
 #endif // SHARE_OOPS_ACCESS_INLINE_HPP
