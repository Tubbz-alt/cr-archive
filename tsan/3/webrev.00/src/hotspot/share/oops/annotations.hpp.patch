diff a/src/hotspot/share/oops/annotations.hpp b/src/hotspot/share/oops/annotations.hpp
--- a/src/hotspot/share/oops/annotations.hpp
+++ b/src/hotspot/share/oops/annotations.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -31,11 +31,10 @@
 #include "utilities/globalDefinitions.hpp"
 
 
 class ClassLoaderData;
 class outputStream;
-class KlassSizeStats;
 
 typedef Array<u1> AnnotationArray;
 
 // Class to hold the various types of annotations. The only metadata that points
 // to this is InstanceKlass, or another Annotations instance if this is a
@@ -68,14 +67,10 @@
   static int size()    { return sizeof(Annotations) / wordSize; }
 
   // Annotations should be stored in the read-only region of CDS archive.
   static bool is_read_only_by_default() { return true; }
 
-#if INCLUDE_SERVICES
-  void collect_statistics(KlassSizeStats *sz) const;
-#endif
-
   // Constructor to initialize to null
   Annotations() : _class_annotations(NULL),
                   _fields_annotations(NULL),
                   _class_type_annotations(NULL),
                   _fields_type_annotations(NULL) {}
@@ -98,11 +93,11 @@
   MetaspaceObj::Type type() const { return AnnotationsType; }
 
  private:
   static julong count_bytes(Array<AnnotationArray*>* p);
  public:
-  const char* internal_name() const { return "{constant pool}"; }
+  const char* internal_name() const { return "{annotations}"; }
 #ifndef PRODUCT
   void print_on(outputStream* st) const;
 #endif
   void print_value_on(outputStream* st) const;
 };
