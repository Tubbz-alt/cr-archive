diff a/src/hotspot/share/oops/annotations.cpp b/src/hotspot/share/oops/annotations.cpp
--- a/src/hotspot/share/oops/annotations.cpp
+++ b/src/hotspot/share/oops/annotations.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -23,11 +23,10 @@
  */
 
 #include "precompiled.hpp"
 #include "classfile/classLoaderData.hpp"
 #include "logging/log.hpp"
-#include "memory/heapInspection.hpp"
 #include "memory/metadataFactory.hpp"
 #include "memory/metaspaceClosure.hpp"
 #include "memory/oopFactory.hpp"
 #include "oops/annotations.hpp"
 #include "oops/instanceKlass.hpp"
@@ -84,44 +83,13 @@
   it->push(&_class_type_annotations);
   it->push(&_fields_type_annotations); // FIXME: need a test case where _fields_type_annotations != NULL
 }
 
 void Annotations::print_value_on(outputStream* st) const {
-  st->print("Anotations(" INTPTR_FORMAT ")", p2i(this));
+  st->print("Annotations(" INTPTR_FORMAT ")", p2i(this));
 }
 
-#if INCLUDE_SERVICES
-// Size Statistics
-
-julong Annotations::count_bytes(Array<AnnotationArray*>* p) {
-  julong bytes = 0;
-  if (p != NULL) {
-    for (int i = 0; i < p->length(); i++) {
-      bytes += KlassSizeStats::count_array(p->at(i));
-    }
-    bytes += KlassSizeStats::count_array(p);
-  }
-  return bytes;
-}
-
-void Annotations::collect_statistics(KlassSizeStats *sz) const {
-  sz->_annotations_bytes = sz->count(this);
-  sz->_class_annotations_bytes = sz->count(class_annotations());
-  sz->_class_type_annotations_bytes = sz->count(class_type_annotations());
-  sz->_fields_annotations_bytes = count_bytes(fields_annotations());
-  sz->_fields_type_annotations_bytes = count_bytes(fields_type_annotations());
-
-  sz->_annotations_bytes +=
-      sz->_class_annotations_bytes +
-      sz->_class_type_annotations_bytes +
-      sz->_fields_annotations_bytes +
-      sz->_fields_type_annotations_bytes;
-
-  sz->_ro_bytes += sz->_annotations_bytes;
-}
-#endif // INCLUDE_SERVICES
-
 #define BULLET  " - "
 
 #ifndef PRODUCT
 void Annotations::print_on(outputStream* st) const {
   st->print(BULLET"class_annotations            "); class_annotations()->print_value_on(st);
