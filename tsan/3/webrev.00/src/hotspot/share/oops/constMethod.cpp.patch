diff a/src/hotspot/share/oops/constMethod.cpp b/src/hotspot/share/oops/constMethod.cpp
--- a/src/hotspot/share/oops/constMethod.cpp
+++ b/src/hotspot/share/oops/constMethod.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,11 +22,10 @@
  *
  */
 
 #include "precompiled.hpp"
 #include "interpreter/interpreter.hpp"
-#include "memory/heapInspection.hpp"
 #include "memory/metadataFactory.hpp"
 #include "memory/metaspaceClosure.hpp"
 #include "memory/resourceArea.hpp"
 #include "oops/constMethod.hpp"
 #include "oops/method.hpp"
@@ -66,11 +65,11 @@
   set_constants(NULL);
   set_max_stack(0);
   set_max_locals(0);
   set_method_idnum(0);
   set_size_of_parameters(0);
-  set_result_type(T_VOID);
+  set_result_type((BasicType)0);
 }
 
 // Accessor that copies to metadata.
 void ConstMethod::copy_stackmap_data(ClassLoaderData* loader_data,
                                      u1* sd, int length, TRAPS) {
@@ -418,10 +417,12 @@
       it->push(type_annotations_addr());
   }
   if (has_default_annotations()) {
       it->push(default_annotations_addr());
   }
+  ConstMethod* this_ptr = this;
+  it->push_method_entry(&this_ptr, (intptr_t*)&_adapter_trampoline);
 }
 
 // Printing
 
 void ConstMethod::print_on(outputStream* st) const {
@@ -450,40 +451,10 @@
   } else {
     st->print("NULL");
   }
 }
 
-#if INCLUDE_SERVICES
-// Size Statistics
-void ConstMethod::collect_statistics(KlassSizeStats *sz) const {
-  int n1, n2, n3;
-  sz->_const_method_bytes += (n1 = sz->count(this));
-  sz->_bytecode_bytes     += (n2 = code_size());
-  sz->_stackmap_bytes     += (n3 = sz->count_array(stackmap_data()));
-
-  // Count method annotations
-  int a1 = 0, a2 = 0, a3 = 0, a4 = 0;
-  if (has_method_annotations()) {
-    sz->_methods_annotations_bytes += (a1 = sz->count_array(method_annotations()));
-  }
-  if (has_parameter_annotations()) {
-    sz->_methods_parameter_annotations_bytes += (a2 = sz->count_array(parameter_annotations()));
-  }
-  if (has_type_annotations()) {
-    sz->_methods_type_annotations_bytes += (a3 = sz->count_array(type_annotations()));
-  }
-  if (has_default_annotations()) {
-    sz->_methods_default_annotations_bytes += (a4 = sz->count_array(default_annotations()));
-  }
-
-  int size_annotations = a1 + a2 + a3 + a4;
-
-  sz->_method_all_bytes += n1 + n3 + size_annotations; // note: n2 is part of n3
-  sz->_ro_bytes += n1 + n3 + size_annotations;
-}
-#endif // INCLUDE_SERVICES
-
 // Verification
 
 void ConstMethod::verify_on(outputStream* st) {
   // Verification can occur during oop construction before the method or
   // other fields have been initialized.
