diff a/src/hotspot/share/utilities/events.cpp b/src/hotspot/share/utilities/events.cpp
--- a/src/hotspot/share/utilities/events.cpp
+++ b/src/hotspot/share/utilities/events.cpp
@@ -49,30 +49,55 @@
   _next = Events::_logs;
   Events::_logs = this;
 }
 
 // For each registered event logger, print out the current contents of
-// the buffer.  This is normally called when the JVM is crashing.
-void Events::print_all(outputStream* out) {
+// the buffer.
+void Events::print_all(outputStream* out, int max) {
   EventLog* log = _logs;
   while (log != NULL) {
-    log->print_log_on(out);
+    log->print_log_on(out, max);
     log = log->next();
   }
 }
 
+// Print a single event log specified by name.
+void Events::print_one(outputStream* out, const char* log_name, int max) {
+  EventLog* log = _logs;
+  int num_printed = 0;
+  while (log != NULL) {
+    if (log->matches_name_or_handle(log_name)) {
+      log->print_log_on(out, max);
+      num_printed ++;
+    }
+    log = log->next();
+  }
+  // Write a short error note if no name matched.
+  if (num_printed == 0) {
+    out->print_cr("The name \"%s\" did not match any known event log. "
+                  "Valid event log names are:", log_name);
+    EventLog* log = _logs;
+    while (log != NULL) {
+      log->print_names(out);
+      out->cr();
+      log = log->next();
+    }
+  }
+}
+
+
 void Events::print() {
   print_all(tty);
 }
 
 void Events::init() {
   if (LogEvents) {
-    _messages = new StringEventLog("Events");
-    _exceptions = new ExceptionsEventLog("Internal exceptions");
-    _redefinitions = new StringEventLog("Classes redefined");
-    _class_unloading = new UnloadingEventLog("Classes unloaded");
-    _deopt_messages = new StringEventLog("Deoptimization events");
+    _messages = new StringEventLog("Events", "events");
+    _exceptions = new ExceptionsEventLog("Internal exceptions", "exc");
+    _redefinitions = new StringEventLog("Classes redefined", "redef");
+    _class_unloading = new UnloadingEventLog("Classes unloaded", "unload");
+    _deopt_messages = new StringEventLog("Deoptimization events", "deopt");
   }
 }
 
 void eventlog_init() {
   Events::init();
@@ -106,26 +131,28 @@
   double timestamp = fetch_timestamp();
   // Unloading events are single threaded.
   int index = compute_log_index();
   _records[index].thread = thread;
   _records[index].timestamp = timestamp;
-  stringStream st = _records[index].data.stream();
+  stringStream st(_records[index].data.buffer(),
+                  _records[index].data.size());
   st.print("Unloading class " INTPTR_FORMAT " ", p2i(ik));
   ik->name()->print_value_on(&st);
 }
 
 void ExceptionsEventLog::log(Thread* thread, Handle h_exception, const char* message, const char* file, int line) {
   if (!should_log()) return;
 
   double timestamp = fetch_timestamp();
-  MutexLockerEx ml(&_mutex, Mutex::_no_safepoint_check_flag);
+  MutexLocker ml(&_mutex, Mutex::_no_safepoint_check_flag);
   int index = compute_log_index();
   _records[index].thread = thread;
   _records[index].timestamp = timestamp;
-  stringStream st = _records[index].data.stream();
+  stringStream st(_records[index].data.buffer(),
+                  _records[index].data.size());
   st.print("Exception <");
   h_exception->print_value_on(&st);
   st.print("%s%s> (" INTPTR_FORMAT ") \n"
-           "thrown [%s, line %d]\nfor thread " INTPTR_FORMAT,
+           "thrown [%s, line %d]",
            message ? ": " : "", message ? message : "",
-           p2i(h_exception()), file, line, p2i(thread));
+           p2i(h_exception()), file, line);
 }
