diff a/src/hotspot/share/classfile/classListParser.cpp b/src/hotspot/share/classfile/classListParser.cpp
--- a/src/hotspot/share/classfile/classListParser.cpp
+++ b/src/hotspot/share/classfile/classListParser.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -32,11 +32,10 @@
 #include "classfile/systemDictionaryShared.hpp"
 #include "logging/log.hpp"
 #include "logging/logTag.hpp"
 #include "memory/metaspaceShared.hpp"
 #include "memory/resourceArea.hpp"
-#include "runtime/fieldType.hpp"
 #include "runtime/handles.inline.hpp"
 #include "runtime/javaCalls.hpp"
 #include "utilities/defaultStream.hpp"
 #include "utilities/hashtable.inline.hpp"
 #include "utilities/macros.hpp"
@@ -227,21 +226,21 @@
     jio_fprintf(defaultStream::error_stream(), "  %4d = %s\n", _interfaces->at(i), k->name()->as_klass_external_name());
   }
   jio_fprintf(defaultStream::error_stream(), "}\n");
 }
 
-void ClassListParser::print_actual_interfaces(InstanceKlass *ik) {
+void ClassListParser::print_actual_interfaces(InstanceKlass* ik) {
   int n = ik->local_interfaces()->length();
   jio_fprintf(defaultStream::error_stream(), "Actual interfaces[%d] = {\n", n);
   for (int i = 0; i < n; i++) {
-    InstanceKlass* e = InstanceKlass::cast(ik->local_interfaces()->at(i));
+    InstanceKlass* e = ik->local_interfaces()->at(i);
     jio_fprintf(defaultStream::error_stream(), "  %s\n", e->name()->as_klass_external_name());
   }
   jio_fprintf(defaultStream::error_stream(), "}\n");
 }
 
-void ClassListParser::error(const char *msg, ...) {
+void ClassListParser::error(const char* msg, ...) {
   va_list ap;
   va_start(ap, msg);
   int error_index = _token - _line;
   if (error_index >= _line_len) {
     error_index = _line_len - 1;
@@ -293,18 +292,18 @@
     error("If source location is specified, super class must be also specified");
   }
   if (!is_id_specified()) {
     error("If source location is specified, id must be also specified");
   }
-  InstanceKlass* k = ClassLoaderExt::load_class(class_name, _source, CHECK_NULL);
-
   if (strncmp(_class_name, "java/", 5) == 0) {
     log_info(cds)("Prohibited package for non-bootstrap classes: %s.class from %s",
           _class_name, _source);
     return NULL;
   }
 
+  InstanceKlass* k = ClassLoaderExt::load_class(class_name, _source, CHECK_NULL);
+
   if (k != NULL) {
     if (k->local_interfaces()->length() != _interfaces->length()) {
       print_specified_interfaces();
       print_actual_interfaces(k);
       error("The number of interfaces (%d) specified in class list does not match the class file (%d)",
@@ -324,24 +323,23 @@
 
   return k;
 }
 
 Klass* ClassListParser::load_current_class(TRAPS) {
-  TempNewSymbol class_name_symbol = SymbolTable::new_symbol(_class_name, THREAD);
-  guarantee(!HAS_PENDING_EXCEPTION, "Exception creating a symbol.");
+  TempNewSymbol class_name_symbol = SymbolTable::new_symbol(_class_name);
 
-  Klass *klass = NULL;
+  Klass* klass = NULL;
   if (!is_loading_from_source()) {
     // Load classes for the boot/platform/app loaders only.
     if (is_super_specified()) {
       error("If source location is not specified, super class must not be specified");
     }
     if (are_interfaces_specified()) {
       error("If source location is not specified, interface(s) must not be specified");
     }
 
-    bool non_array = !FieldType::is_array(class_name_symbol);
+    bool non_array = !Signature::is_array(class_name_symbol);
 
     JavaValue result(T_OBJECT);
     if (non_array) {
       // At this point, we are executing in the context of the boot loader. We
       // cannot call Class.forName because that is context dependent and
@@ -460,6 +458,5 @@
   error("The interface %s implemented by class %s does not match any of the specified interface IDs",
         interface_name->as_klass_external_name(), _class_name);
   ShouldNotReachHere();
   return NULL;
 }
-
