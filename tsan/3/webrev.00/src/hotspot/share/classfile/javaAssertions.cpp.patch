diff a/src/hotspot/share/classfile/javaAssertions.cpp b/src/hotspot/share/classfile/javaAssertions.cpp
--- a/src/hotspot/share/classfile/javaAssertions.cpp
+++ b/src/hotspot/share/classfile/javaAssertions.cpp
@@ -77,11 +77,11 @@
   // when copying to java in createJavaAssertionStatusDirectives, but that
   // should happen only once.  Alternative would require that
   // JVM_DesiredAssertionStatus pass the external_name() to
   // JavaAssertion::enabled(), but that is done once per loaded class.
   for (int i = 0; i < len; ++i) {
-    if (name_copy[i] == '.') name_copy[i] = '/';
+    if (name_copy[i] == JVM_SIGNATURE_DOT) name_copy[i] = JVM_SIGNATURE_SLASH;
   }
 
   if (TraceJavaAssertions) {
     tty->print_cr("JavaAssertions: adding %s %s=%d",
       head == &_classes ? "class" : "package",
@@ -133,11 +133,11 @@
   // it was created by prepending successive items from the command line).
   int index;
   for (index = len - 1; p != 0; p = p->next(), --index) {
     assert(index >= 0, "length does not match list");
     Handle s = java_lang_String::create_from_str(p->name(), CHECK);
-    s = java_lang_String::char_converter(s, '/', '.', CHECK);
+    s = java_lang_String::char_converter(s, JVM_SIGNATURE_SLASH, JVM_SIGNATURE_DOT, CHECK);
     names->obj_at_put(index, s());
     enabled->bool_at_put(index, p->enabled());
   }
   assert(index == -1, "length does not match list");
 }
@@ -161,23 +161,23 @@
 
   // Find the length of the "most-specific" package in classname.  If classname
   // does not include a package, length will be 0 which will match items for the
   // default package (from options "-ea:..."  or "-da:...").
   size_t len = strlen(classname);
-  for (/* empty */; len > 0 && classname[len] != '/'; --len) /* empty */;
+  for (/* empty */; len > 0 && classname[len] != JVM_SIGNATURE_SLASH; --len) /* empty */;
 
   do {
-    assert(len == 0 || classname[len] == '/', "not a package name");
+    assert(len == 0 || classname[len] == JVM_SIGNATURE_SLASH, "not a package name");
     for (OptionList* p = _packages; p != 0; p = p->next()) {
       if (strncmp(p->name(), classname, len) == 0 && p->name()[len] == '\0') {
         return p;
       }
     }
 
     // Find the length of the next package, taking care to avoid decrementing
     // past 0 (len is unsigned).
-    while (len > 0 && classname[--len] != '/') /* empty */;
+    while (len > 0 && classname[--len] != JVM_SIGNATURE_SLASH) /* empty */;
   } while (len > 0);
 
   return 0;
 }
 
