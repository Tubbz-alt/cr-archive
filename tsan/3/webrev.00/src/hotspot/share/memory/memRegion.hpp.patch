diff a/src/hotspot/share/memory/memRegion.hpp b/src/hotspot/share/memory/memRegion.hpp
--- a/src/hotspot/share/memory/memRegion.hpp
+++ b/src/hotspot/share/memory/memRegion.hpp
@@ -30,17 +30,17 @@
 #include "utilities/globalDefinitions.hpp"
 
 // A very simple data structure representing a contigous region
 // region of address space.
 
-// Note that MemRegions are passed by value, not by reference.
+// Note that MemRegions are typically passed by value, not by reference.
 // The intent is that they remain very small and contain no
 // objects. The copy constructor and destructor must be trivial,
 // to support optimization for pass-by-value.
-// These should never be allocated in heap but we do
-// create MemRegions (in CardTableBarrierSet) in heap so operator
-// new and operator new [] added for this special case.
+// These should almost never be allocated in heap but we do
+// create MemRegions (in CardTable and G1CMRootMemRegions) on the heap so operator
+// new and operator new [] were added for these special cases.
 
 class MemRegion {
   friend class VMStructs;
 private:
   HeapWord* _start;
@@ -90,14 +90,13 @@
 
   size_t byte_size() const { return _word_size * sizeof(HeapWord); }
   size_t word_size() const { return _word_size; }
 
   bool is_empty() const { return word_size() == 0; }
-  void* operator new(size_t size) throw();
-  void* operator new [](size_t size) throw();
-  void  operator delete(void* p);
-  void  operator delete [](void* p);
+
+  // Creates and initializes an array of MemRegions of the given length.
+  static MemRegion* create_array(uint length, MEMFLAGS flags);
 };
 
 // For iteration over MemRegion's.
 
 class MemRegionClosure : public StackObj {
