diff a/src/hotspot/share/memory/oopFactory.hpp b/src/hotspot/share/memory/oopFactory.hpp
--- a/src/hotspot/share/memory/oopFactory.hpp
+++ b/src/hotspot/share/memory/oopFactory.hpp
@@ -23,43 +23,33 @@
  */
 
 #ifndef SHARE_MEMORY_OOPFACTORY_HPP
 #define SHARE_MEMORY_OOPFACTORY_HPP
 
-#include "classfile/symbolTable.hpp"
-#include "classfile/systemDictionary.hpp"
 #include "memory/referenceType.hpp"
-#include "memory/universe.hpp"
-#include "oops/objArrayKlass.hpp"
-#include "oops/oop.hpp"
-#include "oops/typeArrayKlass.hpp"
-#include "utilities/growableArray.hpp"
+#include "oops/oopsHierarchy.hpp"
+#include "runtime/handles.hpp"
+#include "utilities/exceptions.hpp"
 
 // oopFactory is a class used for creating new objects.
 
-class vframeArray;
-
 class oopFactory: AllStatic {
  public:
   // Basic type leaf array allocation
-  static typeArrayOop    new_boolArray  (int length, TRAPS) { return TypeArrayKlass::cast(Universe::boolArrayKlassObj  ())->allocate(length, THREAD); }
-  static typeArrayOop    new_charArray  (int length, TRAPS) { return TypeArrayKlass::cast(Universe::charArrayKlassObj  ())->allocate(length, THREAD); }
-  static typeArrayOop    new_floatArray (int length, TRAPS) { return TypeArrayKlass::cast(Universe::floatArrayKlassObj())->allocate(length, THREAD); }
-  static typeArrayOop    new_doubleArray(int length, TRAPS) { return TypeArrayKlass::cast(Universe::doubleArrayKlassObj())->allocate(length, THREAD); }
-  static typeArrayOop    new_byteArray  (int length, TRAPS) { return TypeArrayKlass::cast(Universe::byteArrayKlassObj  ())->allocate(length, THREAD); }
-  static typeArrayOop    new_shortArray (int length, TRAPS) { return TypeArrayKlass::cast(Universe::shortArrayKlassObj ())->allocate(length, THREAD); }
-  static typeArrayOop    new_intArray   (int length, TRAPS) { return TypeArrayKlass::cast(Universe::intArrayKlassObj   ())->allocate(length, THREAD); }
-  static typeArrayOop    new_longArray  (int length, TRAPS) { return TypeArrayKlass::cast(Universe::longArrayKlassObj  ())->allocate(length, THREAD); }
+  static typeArrayOop    new_boolArray  (int length, TRAPS);
+  static typeArrayOop    new_charArray  (int length, TRAPS);
+  static typeArrayOop    new_floatArray (int length, TRAPS);
+  static typeArrayOop    new_doubleArray(int length, TRAPS);
+  static typeArrayOop    new_byteArray  (int length, TRAPS);
+  static typeArrayOop    new_shortArray (int length, TRAPS);
+  static typeArrayOop    new_intArray   (int length, TRAPS);
+  static typeArrayOop    new_longArray  (int length, TRAPS);
 
   // create java.lang.Object[]
-  static objArrayOop     new_objectArray(int length, TRAPS)  {
-    assert(Universe::objectArrayKlassObj() != NULL, "Too early?");
-    return ObjArrayKlass::
-      cast(Universe::objectArrayKlassObj())->allocate(length, THREAD);
-  }
+  static objArrayOop     new_objectArray(int length, TRAPS);
 
-  static typeArrayOop    new_charArray           (const char* utf8_str,  TRAPS);
+  static typeArrayOop    new_charArray(const char* utf8_str,  TRAPS);
   static typeArrayOop    new_tenured_charArray(int length, TRAPS);
 
   static typeArrayOop    new_typeArray(BasicType type, int length, TRAPS);
   static typeArrayOop    new_typeArray_nozero(BasicType type, int length, TRAPS);
   static typeArrayOop    new_symbolArray(int length, TRAPS);
