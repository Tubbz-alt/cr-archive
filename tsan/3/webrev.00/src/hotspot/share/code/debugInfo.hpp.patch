diff a/src/hotspot/share/code/debugInfo.hpp b/src/hotspot/share/code/debugInfo.hpp
--- a/src/hotspot/share/code/debugInfo.hpp
+++ b/src/hotspot/share/code/debugInfo.hpp
@@ -47,10 +47,11 @@
 class ScopeValue: public ResourceObj {
  public:
   // Testers
   virtual bool is_location() const { return false; }
   virtual bool is_object() const { return false; }
+  virtual bool is_auto_box() const { return false; }
   virtual bool is_constant_int() const { return false; }
   virtual bool is_constant_double() const { return false; }
   virtual bool is_constant_long() const { return false; }
   virtual bool is_constant_oop() const { return false; }
   virtual bool equals(ScopeValue* other) const { return false; }
@@ -92,17 +93,16 @@
 
 
 // An ObjectValue describes an object eliminated by escape analysis.
 
 class ObjectValue: public ScopeValue {
- private:
+ protected:
   int                        _id;
   ScopeValue*                _klass;
   GrowableArray<ScopeValue*> _field_values;
   Handle                     _value;
   bool                       _visited;
-
  public:
   ObjectValue(int id, ScopeValue* klass)
      : _id(id)
      , _klass(klass)
      , _field_values()
@@ -138,10 +138,20 @@
   // Printing
   void print_on(outputStream* st) const;
   void print_fields_on(outputStream* st) const;
 };
 
+class AutoBoxObjectValue : public ObjectValue {
+  bool                       _cached;
+public:
+  bool                       is_auto_box() const        { return true; }
+  bool                       is_cached() const          { return _cached; }
+  void                       set_cached(bool cached)    { _cached = cached; }
+  AutoBoxObjectValue(int id, ScopeValue* klass) : ObjectValue(id, klass), _cached(false) { }
+  AutoBoxObjectValue(int id) : ObjectValue(id), _cached(false) { }
+};
+
 
 // A ConstantIntValue describes a constant int; i.e., the corresponding logical entity
 // is either a source constant or its computation has been constant-folded.
 
 class ConstantIntValue: public ScopeValue {
@@ -278,11 +288,11 @@
     Method* o = (Method*)(code()->metadata_at(read_int()));
     // is_metadata() is a faster check than is_metaspace_object()
     assert(o == NULL || o->is_metadata(), "meta data only");
     return o;
   }
-  ScopeValue* read_object_value();
+  ScopeValue* read_object_value(bool is_auto_box);
   ScopeValue* get_cached_object();
   // BCI encoding is mostly unsigned, but -1 is a distinguished value
   int read_bci() { return read_int() + InvocationEntryBci; }
 };
 
