diff a/src/hotspot/share/code/oopRecorder.hpp b/src/hotspot/share/code/oopRecorder.hpp
--- a/src/hotspot/share/code/oopRecorder.hpp
+++ b/src/hotspot/share/code/oopRecorder.hpp
@@ -23,11 +23,10 @@
  */
 
 #ifndef SHARE_CODE_OOPRECORDER_HPP
 #define SHARE_CODE_OOPRECORDER_HPP
 
-#include "memory/universe.hpp"
 #include "runtime/handles.hpp"
 #include "utilities/growableArray.hpp"
 
 // Recording and retrieval of either oop relocations or metadata in compiled code.
 
@@ -75,13 +74,11 @@
     // there is always a NULL virtually present as first object
     return _handles->length() + first_index;
   }
 
   // Helper function; returns false for NULL or Universe::non_oop_word().
-  bool is_real(T h) {
-    return h != NULL && h != (T)Universe::non_oop_word();
-  }
+  inline bool is_real(T h);
 
   // copy the generated table to nmethod
   void copy_values_to(nmethod* nm);
 
   bool is_unused() { return _handles == NULL && !_complete; }
@@ -205,13 +202,11 @@
     return _oops.size();
   }
   int oop_count() {
     return _oops.count();
   }
-  bool is_real(jobject h) {
-    return _oops.is_real(h);
-  }
+  inline bool is_real(jobject h);
 
   int allocate_metadata_index(Metadata* oop) {
     return _metadata.allocate_index(oop);
   }
   virtual int find_index(Metadata* h) {
@@ -224,13 +219,11 @@
     return _metadata.size();
   }
   int metadata_count() {
     return _metadata.count();
   }
-  bool is_real(Metadata* h) {
-    return _metadata.is_real(h);
-  }
+  inline bool is_real(Metadata* h);
 
   bool is_unused() {
     return _oops.is_unused() && _metadata.is_unused();
   }
 
