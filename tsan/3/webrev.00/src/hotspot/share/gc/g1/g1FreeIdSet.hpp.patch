diff a/src/hotspot/share/gc/g1/g1FreeIdSet.hpp b/src/hotspot/share/gc/g1/g1FreeIdSet.hpp
--- a/src/hotspot/share/gc/g1/g1FreeIdSet.hpp
+++ b/src/hotspot/share/gc/g1/g1FreeIdSet.hpp
@@ -23,33 +23,30 @@
  */
 
 #ifndef SHARE_GC_G1_G1FREEIDSET_HPP
 #define SHARE_GC_G1_G1FREEIDSET_HPP
 
-#include "memory/allocation.hpp"
 #include "runtime/semaphore.hpp"
 #include "utilities/globalDefinitions.hpp"
 
 // Represents a set of small integer ids, from which elements can be
 // temporarily allocated for exclusive use.  The ids are in a
 // contiguous range from 'start' to 'start + size'.  Used to obtain a
 // distinct worker_id value for a mutator thread that doesn't normally
 // have such an id.
-class G1FreeIdSet : public CHeapObj<mtGC> {
+class G1FreeIdSet {
   Semaphore _sem;
   uint* _next;
   uint _start;
   uint _size;
   uintx _head_index_mask;
   volatile uintx _head;
 
   uint head_index(uintx head) const;
   uintx make_head(uint index, uintx old_head) const;
 
-  // Noncopyable.
-  G1FreeIdSet(const G1FreeIdSet&);
-  G1FreeIdSet& operator=(const G1FreeIdSet&);
+  NONCOPYABLE(G1FreeIdSet);
 
 public:
   G1FreeIdSet(uint start, uint size);
   ~G1FreeIdSet();
 
