diff a/src/hotspot/share/gc/g1/g1SATBMarkQueueSet.cpp b/src/hotspot/share/gc/g1/g1SATBMarkQueueSet.cpp
--- a/src/hotspot/share/gc/g1/g1SATBMarkQueueSet.cpp
+++ b/src/hotspot/share/gc/g1/g1SATBMarkQueueSet.cpp
@@ -30,23 +30,13 @@
 #include "gc/shared/satbMarkQueue.hpp"
 #include "oops/oop.hpp"
 #include "utilities/debug.hpp"
 #include "utilities/globalDefinitions.hpp"
 
-G1SATBMarkQueueSet::G1SATBMarkQueueSet() : _g1h(NULL) {}
-
-void G1SATBMarkQueueSet::initialize(G1CollectedHeap* g1h,
-                                    Monitor* cbl_mon,
-                                    BufferNode::Allocator* allocator,
-                                    size_t process_completed_buffers_threshold,
-                                    uint buffer_enqueue_threshold_percentage) {
-  SATBMarkQueueSet::initialize(cbl_mon,
-                               allocator,
-                               process_completed_buffers_threshold,
-                               buffer_enqueue_threshold_percentage);
-  _g1h = g1h;
-}
+G1SATBMarkQueueSet::G1SATBMarkQueueSet(BufferNode::Allocator* allocator) :
+  SATBMarkQueueSet(allocator)
+{}
 
 void G1SATBMarkQueueSet::handle_zero_index_for_thread(Thread* t) {
   G1ThreadLocalData::satb_mark_queue(t).handle_zero_index();
 }
 
@@ -112,18 +102,17 @@
 // Workaround for not yet having std::bind.
 class G1SATBMarkQueueFilterFn {
   G1CollectedHeap* _g1h;
 
 public:
-  G1SATBMarkQueueFilterFn(G1CollectedHeap* g1h) : _g1h(g1h) {}
+  G1SATBMarkQueueFilterFn() : _g1h(G1CollectedHeap::heap()) {}
 
   // Return true if entry should be filtered out (removed), false if
   // it should be retained.
   bool operator()(const void* entry) const {
     return discard_entry(entry, _g1h);
   }
 };
 
 void G1SATBMarkQueueSet::filter(SATBMarkQueue* queue) {
-  assert(_g1h != NULL, "SATB queue set not initialized");
-  apply_filter(G1SATBMarkQueueFilterFn(_g1h), queue);
+  apply_filter(G1SATBMarkQueueFilterFn(), queue);
 }
