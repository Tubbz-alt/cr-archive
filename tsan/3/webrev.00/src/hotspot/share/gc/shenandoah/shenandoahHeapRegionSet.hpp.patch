diff a/src/hotspot/share/gc/shenandoah/shenandoahHeapRegionSet.hpp b/src/hotspot/share/gc/shenandoah/shenandoahHeapRegionSet.hpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahHeapRegionSet.hpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahHeapRegionSet.hpp
@@ -1,7 +1,8 @@
 /*
- * Copyright (c) 2013, 2018, Red Hat, Inc. All rights reserved.
+ * Copyright (c) 2013, 2019, Red Hat, Inc. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
  *
@@ -25,10 +26,11 @@
 #define SHARE_GC_SHENANDOAH_SHENANDOAHHEAPREGIONSET_HPP
 
 #include "memory/allocation.hpp"
 #include "gc/shenandoah/shenandoahHeap.hpp"
 #include "gc/shenandoah/shenandoahHeapRegion.hpp"
+#include "utilities/globalDefinitions.hpp"
 
 class ShenandoahHeapRegionSet;
 
 class ShenandoahHeapRegionSetIterator : public StackObj {
 private:
@@ -38,12 +40,11 @@
   DEFINE_PAD_MINUS_SIZE(0, DEFAULT_CACHE_LINE_SIZE, sizeof(volatile jint));
   volatile jint _current_index;
   DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, 0);
 
   // No implicit copying: iterators should be passed by reference to capture the state
-  ShenandoahHeapRegionSetIterator(const ShenandoahHeapRegionSetIterator& that);
-  ShenandoahHeapRegionSetIterator& operator=(const ShenandoahHeapRegionSetIterator& o);
+  NONCOPYABLE(ShenandoahHeapRegionSetIterator);
 
 public:
   ShenandoahHeapRegionSetIterator(const ShenandoahHeapRegionSet* const set);
 
   // Reset existing iterator to new set
@@ -81,11 +82,11 @@
   size_t count()  const { return _region_count; }
   bool is_empty() const { return _region_count == 0; }
 
   inline bool is_in(ShenandoahHeapRegion* r) const;
   inline bool is_in(size_t region_number)    const;
-  inline bool is_in(HeapWord* p)             const;
+  inline bool is_in(oop p)                   const;
 
   void print_on(outputStream* out) const;
 
   void clear();
 
