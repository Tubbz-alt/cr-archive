diff a/src/hotspot/share/gc/shenandoah/shenandoahVerifier.hpp b/src/hotspot/share/gc/shenandoah/shenandoahVerifier.hpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahVerifier.hpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahVerifier.hpp
@@ -1,7 +1,8 @@
 /*
- * Copyright (c) 2017, 2018, Red Hat, Inc. All rights reserved.
+ * Copyright (c) 2017, 2020, Red Hat, Inc. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
  *
@@ -23,10 +24,11 @@
 
 #ifndef SHARE_GC_SHENANDOAH_SHENANDOAHVERIFIER_HPP
 #define SHARE_GC_SHENANDOAH_SHENANDOAHVERIFIER_HPP
 
 #include "gc/shared/markBitMap.hpp"
+#include "gc/shenandoah/shenandoahRootVerifier.hpp"
 #include "memory/allocation.hpp"
 #include "oops/oopsHierarchy.hpp"
 #include "utilities/stack.hpp"
 
 class ShenandoahHeap;
@@ -71,22 +73,22 @@
 
     // Objects should be marked in "next" bitmap.
     _verify_marked_incomplete,
 
     // Objects should be marked in "complete" bitmap.
-    _verify_marked_complete,
+    _verify_marked_complete
   } VerifyMarked;
 
   typedef enum {
     // Disable forwarded objects verification.
     _verify_forwarded_disable,
 
     // Objects should not have forwardees.
     _verify_forwarded_none,
 
     // Objects may have forwardees.
-    _verify_forwarded_allow,
+    _verify_forwarded_allow
   } VerifyForwarded;
 
   typedef enum {
     // Disable collection set verification.
     _verify_cset_disable,
@@ -95,11 +97,11 @@
     _verify_cset_none,
 
     // May have references to cset, all should be forwarded.
     // Note: Allowing non-forwarded references to cset is equivalent
     // to _verify_cset_disable.
-    _verify_cset_forwarded,
+    _verify_cset_forwarded
   } VerifyCollectionSet;
 
   typedef enum {
     // Disable liveness verification
     _verify_liveness_disable,
@@ -107,11 +109,11 @@
     // All objects should belong to live regions
     _verify_liveness_conservative,
 
     // All objects should belong to live regions,
     // and liveness data should be accurate
-    _verify_liveness_complete,
+    _verify_liveness_complete
   } VerifyLiveness;
 
   typedef enum {
     // Disable region verification
     _verify_regions_disable,
@@ -121,11 +123,11 @@
 
     // No collection set regions allowed
     _verify_regions_nocset,
 
     // No trash and no cset regions allowed
-    _verify_regions_notrash_nocset,
+    _verify_regions_notrash_nocset
   } VerifyRegions;
 
   typedef enum {
     // Disable gc-state verification
     _verify_gcstate_disable,
@@ -133,55 +135,76 @@
     // Nothing is in progress, no forwarded objects
     _verify_gcstate_stable,
 
     // Nothing is in progress, some objects are forwarded
     _verify_gcstate_forwarded,
+
+    // Evacuation is in progress, some objects are forwarded
+    _verify_gcstate_evacuation
   } VerifyGCState;
 
+  typedef enum {
+    _verify_all_weak_roots,
+    _verify_serial_weak_roots,
+    _verify_concurrent_weak_roots
+  } VerifyWeakRoots;
+
   struct VerifyOptions {
     VerifyForwarded     _verify_forwarded;
     VerifyMarked        _verify_marked;
     VerifyCollectionSet _verify_cset;
     VerifyLiveness      _verify_liveness;
     VerifyRegions       _verify_regions;
     VerifyGCState       _verify_gcstate;
+    VerifyWeakRoots     _verify_weak_roots;
 
     VerifyOptions(VerifyForwarded verify_forwarded,
                   VerifyMarked verify_marked,
                   VerifyCollectionSet verify_collection_set,
                   VerifyLiveness verify_liveness,
                   VerifyRegions verify_regions,
-                  VerifyGCState verify_gcstate) :
+                  VerifyGCState verify_gcstate,
+                  VerifyWeakRoots verify_weak_roots = _verify_all_weak_roots) :
             _verify_forwarded(verify_forwarded), _verify_marked(verify_marked),
             _verify_cset(verify_collection_set),
             _verify_liveness(verify_liveness), _verify_regions(verify_regions),
-            _verify_gcstate(verify_gcstate) {}
+            _verify_gcstate(verify_gcstate),
+            _verify_weak_roots(verify_weak_roots) {}
   };
 
 private:
   void verify_at_safepoint(const char *label,
                            VerifyForwarded forwarded,
                            VerifyMarked marked,
                            VerifyCollectionSet cset,
                            VerifyLiveness liveness,
                            VerifyRegions regions,
-                           VerifyGCState gcstate);
+                           VerifyGCState gcstate,
+                           VerifyWeakRoots weakRoots);
 
 public:
   ShenandoahVerifier(ShenandoahHeap* heap, MarkBitMap* verification_bitmap) :
           _heap(heap), _verification_bit_map(verification_bitmap) {};
 
   void verify_before_concmark();
   void verify_after_concmark();
   void verify_before_evacuation();
+  void verify_during_evacuation();
   void verify_after_evacuation();
   void verify_before_updaterefs();
   void verify_after_updaterefs();
   void verify_before_fullgc();
   void verify_after_fullgc();
   void verify_before_traversal();
   void verify_after_traversal();
   void verify_after_degenerated();
   void verify_generic(VerifyOption option);
+
+  // Roots should only contain to-space oops
+  void verify_roots_in_to_space();
+  void verify_roots_in_to_space_except(ShenandoahRootVerifier::RootTypes types);
+
+  void verify_roots_no_forwarded();
+  void verify_roots_no_forwarded_except(ShenandoahRootVerifier::RootTypes types);
 };
 
 #endif // SHARE_GC_SHENANDOAH_SHENANDOAHVERIFIER_HPP
