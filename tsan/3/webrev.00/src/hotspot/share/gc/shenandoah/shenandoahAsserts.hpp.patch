diff a/src/hotspot/share/gc/shenandoah/shenandoahAsserts.hpp b/src/hotspot/share/gc/shenandoah/shenandoahAsserts.hpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahAsserts.hpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahAsserts.hpp
@@ -1,7 +1,8 @@
 /*
- * Copyright (c) 2018, Red Hat, Inc. All rights reserved.
+ * Copyright (c) 2018, 2019, Red Hat, Inc. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
  *
@@ -23,21 +24,22 @@
 
 #ifndef SHARE_GC_SHENANDOAH_SHENANDOAHASSERTS_HPP
 #define SHARE_GC_SHENANDOAH_SHENANDOAHASSERTS_HPP
 
 #include "memory/iterator.hpp"
+#include "runtime/mutex.hpp"
 #include "utilities/formatBuffer.hpp"
 
 typedef FormatBuffer<8192> ShenandoahMessageBuffer;
 
 class ShenandoahAsserts {
 public:
   enum SafeLevel {
     _safe_unknown,
     _safe_oop,
     _safe_oop_fwd,
-    _safe_all,
+    _safe_all
   };
 
   static void print_obj(ShenandoahMessageBuffer &msg, oop obj);
 
   static void print_non_obj(ShenandoahMessageBuffer &msg, void *loc);
@@ -63,10 +65,12 @@
   static void assert_not_in_cset_loc(void* interior_loc, const char* file, int line);
 
   static void assert_rp_isalive_not_installed(const char *file, int line);
   static void assert_rp_isalive_installed(const char *file, int line);
 
+  static void assert_locked_or_shenandoah_safepoint(Mutex* lock, const char* file, int line);
+
 #ifdef ASSERT
 #define shenandoah_assert_in_heap(interior_loc, obj) \
                     ShenandoahAsserts::assert_in_heap(interior_loc, obj, __FILE__, __LINE__);
 #define shenandoah_assert_in_correct_region(interior_loc, obj) \
                     ShenandoahAsserts::assert_in_correct_region(interior_loc, obj, __FILE__, __LINE__);
@@ -122,10 +126,16 @@
 
 #define shenandoah_assert_rp_isalive_installed() \
                     ShenandoahAsserts::assert_rp_isalive_installed(__FILE__, __LINE__);
 #define shenandoah_assert_rp_isalive_not_installed() \
                     ShenandoahAsserts::assert_rp_isalive_not_installed(__FILE__, __LINE__);
+
+#define shenandoah_assert_safepoint() \
+                    assert(ShenandoahSafepoint::is_at_shenandoah_safepoint(), "Should be at Shenandoah Safepoints");
+
+#define shenandoah_assert_locked_or_safepoint(lock) \
+                    ShenandoahAsserts::assert_locked_or_shenandoah_safepoint(lock, __FILE__, __LINE__);
 #else
 #define shenandoah_assert_in_heap(interior_loc, obj)
 #define shenandoah_assert_in_correct_region(interior_loc, obj)
 
 #define shenandoah_assert_correct_if(interior_loc, obj, condition)
@@ -156,10 +166,14 @@
 #define shenandoah_assert_not_in_cset_loc_except(interior_loc, exception)
 #define shenandoah_assert_not_in_cset_loc(interior_loc)
 
 #define shenandoah_assert_rp_isalive_installed()
 #define shenandoah_assert_rp_isalive_not_installed()
+
+#define shenandoah_assert_safepoint()
+#define shenandoah_assert_locked_or_safepoint(lock)
+
 #endif
 
 #define shenandoah_not_implemented \
                     { fatal("Deliberately not implemented."); }
 #define shenandoah_not_implemented_return(v) \
