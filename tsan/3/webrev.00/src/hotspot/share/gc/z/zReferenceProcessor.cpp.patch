diff a/src/hotspot/share/gc/z/zReferenceProcessor.cpp b/src/hotspot/share/gc/z/zReferenceProcessor.cpp
--- a/src/hotspot/share/gc/z/zReferenceProcessor.cpp
+++ b/src/hotspot/share/gc/z/zReferenceProcessor.cpp
@@ -30,11 +30,13 @@
 #include "gc/z/zReferenceProcessor.hpp"
 #include "gc/z/zStat.hpp"
 #include "gc/z/zTask.hpp"
 #include "gc/z/zTracer.inline.hpp"
 #include "gc/z/zUtils.inline.hpp"
+#include "gc/z/zValue.inline.hpp"
 #include "memory/universe.hpp"
+#include "runtime/atomic.hpp"
 #include "runtime/mutexLocker.hpp"
 #include "runtime/os.hpp"
 
 static const ZStatSubPhase ZSubPhaseConcurrentReferencesProcess("Concurrent References Process");
 static const ZStatSubPhase ZSubPhaseConcurrentReferencesEnqueue("Concurrent References Enqueue");
@@ -313,11 +315,11 @@
     }
   }
 
   // Prepend discovered references to internal pending list
   if (*list != NULL) {
-    *p = Atomic::xchg(*list, _pending_list.addr());
+    *p = Atomic::xchg(_pending_list.addr(), *list);
     if (*p == NULL) {
       // First to prepend to list, record tail
       _pending_list_tail = p;
     }
 
@@ -448,11 +450,11 @@
     return;
   }
 
   {
     // Heap_lock protects external pending list
-    MonitorLockerEx ml(Heap_lock);
+    MonitorLocker ml(Heap_lock);
 
     // Prepend internal pending list to external pending list
     *_pending_list_tail = Universe::swap_reference_pending_list(_pending_list.get());
 
     // Notify ReferenceHandler thread
