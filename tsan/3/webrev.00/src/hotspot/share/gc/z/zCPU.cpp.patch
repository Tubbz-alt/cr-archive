diff a/src/hotspot/share/gc/z/zCPU.cpp b/src/hotspot/share/gc/z/zCPU.cpp
--- a/src/hotspot/share/gc/z/zCPU.cpp
+++ b/src/hotspot/share/gc/z/zCPU.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -20,23 +20,23 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 #include "precompiled.hpp"
-#include "gc/z/zCPU.hpp"
+#include "gc/z/zCPU.inline.hpp"
 #include "logging/log.hpp"
 #include "memory/padded.inline.hpp"
 #include "runtime/os.hpp"
 #include "runtime/thread.inline.hpp"
 #include "utilities/debug.hpp"
 
-#define ZCPU_UNKNOWN_AFFINITY (Thread*)-1;
-#define ZCPU_UNKNOWN_SELF     (Thread*)-2;
+#define ZCPU_UNKNOWN_AFFINITY ((Thread*)-1)
+#define ZCPU_UNKNOWN_SELF     ((Thread*)-2)
 
 PaddedEnd<ZCPU::ZCPUAffinity>* ZCPU::_affinity = NULL;
-__thread Thread*  ZCPU::_self                  = ZCPU_UNKNOWN_SELF;
-__thread uint32_t ZCPU::_cpu                   = 0;
+THREAD_LOCAL Thread*           ZCPU::_self     = ZCPU_UNKNOWN_SELF;
+THREAD_LOCAL uint32_t          ZCPU::_cpu      = 0;
 
 void ZCPU::initialize() {
   assert(_affinity == NULL, "Already initialized");
   const uint32_t ncpus = count();
 
@@ -49,24 +49,17 @@
   log_info(gc, init)("CPUs: %u total, %u available",
                      os::processor_count(),
                      os::initial_active_processor_count());
 }
 
-uint32_t ZCPU::count() {
-  return os::processor_count();
-}
-
-uint32_t ZCPU::id() {
-  assert(_affinity != NULL, "Not initialized");
-
-  // Fast path
-  if (_affinity[_cpu]._thread == _self) {
-    return _cpu;
+uint32_t ZCPU::id_slow() {
+  // Set current thread
+  if (_self == ZCPU_UNKNOWN_SELF) {
+    _self = Thread::current();
   }
 
-  // Slow path
-  _self = Thread::current();
+  // Set current CPU
   _cpu = os::processor_id();
 
   // Update affinity table
   _affinity[_cpu]._thread = _self;
 
