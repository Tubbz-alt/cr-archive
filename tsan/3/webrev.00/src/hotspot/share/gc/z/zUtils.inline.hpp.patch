diff a/src/hotspot/share/gc/z/zUtils.inline.hpp b/src/hotspot/share/gc/z/zUtils.inline.hpp
--- a/src/hotspot/share/gc/z/zUtils.inline.hpp
+++ b/src/hotspot/share/gc/z/zUtils.inline.hpp
@@ -30,36 +30,21 @@
 #include "utilities/align.hpp"
 #include "utilities/copy.hpp"
 #include "utilities/debug.hpp"
 #include "utilities/globalDefinitions.hpp"
 
-inline size_t ZUtils::round_up_power_of_2(size_t value) {
-  assert(value != 0, "Invalid value");
-
-  if (is_power_of_2(value)) {
-    return value;
-  }
-
-  return (size_t)1 << (log2_intptr(value) + 1);
-}
-
-inline size_t ZUtils::round_down_power_of_2(size_t value) {
-  assert(value != 0, "Invalid value");
-  return (size_t)1 << log2_intptr(value);
-}
-
 inline size_t ZUtils::bytes_to_words(size_t size_in_bytes) {
   assert(is_aligned(size_in_bytes, BytesPerWord), "Size not word aligned");
   return size_in_bytes >> LogBytesPerWord;
 }
 
 inline size_t ZUtils::words_to_bytes(size_t size_in_words) {
   return size_in_words << LogBytesPerWord;
 }
 
 inline size_t ZUtils::object_size(uintptr_t addr) {
-  return words_to_bytes(ZOop::to_oop(addr)->size());
+  return words_to_bytes(ZOop::from_address(addr)->size());
 }
 
 inline void ZUtils::object_copy(uintptr_t from, uintptr_t to, size_t size) {
   Copy::aligned_disjoint_words((HeapWord*)from, (HeapWord*)to, bytes_to_words(size));
 }
