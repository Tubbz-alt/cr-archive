diff a/src/hotspot/share/gc/z/zGlobals.hpp b/src/hotspot/share/gc/z/zGlobals.hpp
--- a/src/hotspot/share/gc/z/zGlobals.hpp
+++ b/src/hotspot/share/gc/z/zGlobals.hpp
@@ -24,14 +24,14 @@
 #ifndef SHARE_GC_Z_ZGLOBALS_HPP
 #define SHARE_GC_Z_ZGLOBALS_HPP
 
 #include "utilities/globalDefinitions.hpp"
 #include "utilities/macros.hpp"
-#include OS_CPU_HEADER(gc/z/zGlobals)
+#include CPU_HEADER(gc/z/zGlobals)
 
 // Collector name
-const char* const ZGCName                       = "The Z Garbage Collector";
+const char* const ZName                         = "The Z Garbage Collector";
 
 // Global phase state
 extern uint32_t   ZGlobalPhase;
 const uint32_t    ZPhaseMark                    = 0;
 const uint32_t    ZPhaseMarkCompleted           = 1;
@@ -42,69 +42,43 @@
 
 // Granule shift/size
 const size_t      ZGranuleSizeShift             = ZPlatformGranuleSizeShift;
 const size_t      ZGranuleSize                  = (size_t)1 << ZGranuleSizeShift;
 
+// Number of heap views
+const size_t      ZHeapViews                    = ZPlatformHeapViews;
+
+// Virtual memory to physical memory ratio
+const size_t      ZVirtualToPhysicalRatio       = 16; // 16:1
+
 // Page types
 const uint8_t     ZPageTypeSmall                = 0;
 const uint8_t     ZPageTypeMedium               = 1;
 const uint8_t     ZPageTypeLarge                = 2;
 
 // Page size shifts
 const size_t      ZPageSizeSmallShift           = ZGranuleSizeShift;
-const size_t      ZPageSizeMediumShift          = ZPageSizeSmallShift + 4;
+extern size_t     ZPageSizeMediumShift;
 
 // Page sizes
 const size_t      ZPageSizeSmall                = (size_t)1 << ZPageSizeSmallShift;
-const size_t      ZPageSizeMedium               = (size_t)1 << ZPageSizeMediumShift;
+extern size_t     ZPageSizeMedium;
 
 // Object size limits
-const size_t      ZObjectSizeLimitSmall         = (ZPageSizeSmall / 8);  // Allow 12.5% waste
-const size_t      ZObjectSizeLimitMedium        = (ZPageSizeMedium / 8); // Allow 12.5% waste
+const size_t      ZObjectSizeLimitSmall         = ZPageSizeSmall / 8; // 12.5% max waste
+extern size_t     ZObjectSizeLimitMedium;
 
 // Object alignment shifts
 extern const int& ZObjectAlignmentSmallShift;
-const int         ZObjectAlignmentMediumShift   = ZPageSizeMediumShift - 13; // 8192 objects per page
-const int         ZObjectAlignmentLargeShift    = ZPageSizeSmallShift;
+extern int        ZObjectAlignmentMediumShift;
+const int         ZObjectAlignmentLargeShift    = ZGranuleSizeShift;
 
 // Object alignments
 extern const int& ZObjectAlignmentSmall;
-const int         ZObjectAlignmentMedium        = 1 << ZObjectAlignmentMediumShift;
+extern int        ZObjectAlignmentMedium;
 const int         ZObjectAlignmentLarge         = 1 << ZObjectAlignmentLargeShift;
 
-// Pointer part of address
-const uintptr_t   ZAddressOffsetShift           = 0;
-const uintptr_t   ZAddressOffsetBits            = ZPlatformAddressOffsetBits;
-const uintptr_t   ZAddressOffsetMask            = (((uintptr_t)1 << ZAddressOffsetBits) - 1) << ZAddressOffsetShift;
-const size_t      ZAddressOffsetMax             = (uintptr_t)1 << ZAddressOffsetBits;
-
-// Metadata part of address
-const uintptr_t   ZAddressMetadataShift         = ZPlatformAddressMetadataShift;
-const uintptr_t   ZAddressMetadataBits          = 4;
-const uintptr_t   ZAddressMetadataMask          = (((uintptr_t)1 << ZAddressMetadataBits) - 1) << ZAddressMetadataShift;
-
-// Metadata types
-const uintptr_t   ZAddressMetadataMarked0       = (uintptr_t)1 << (ZAddressMetadataShift + 0);
-const uintptr_t   ZAddressMetadataMarked1       = (uintptr_t)1 << (ZAddressMetadataShift + 1);
-const uintptr_t   ZAddressMetadataRemapped      = (uintptr_t)1 << (ZAddressMetadataShift + 2);
-const uintptr_t   ZAddressMetadataFinalizable   = (uintptr_t)1 << (ZAddressMetadataShift + 3);
-
-// Address space start/end/size
-const uintptr_t   ZAddressSpaceStart            = ZPlatformAddressSpaceStart;
-const uintptr_t   ZAddressSpaceSize             = ZPlatformAddressSpaceSize;
-const uintptr_t   ZAddressSpaceEnd              = ZAddressSpaceStart + ZAddressSpaceSize;
-
-// NMethod entry barrier
-const size_t      ZNMethodDisarmedOffset        = ZPlatformNMethodDisarmedOffset;
-
-// Cache line size
-const size_t      ZCacheLineSize                = ZPlatformCacheLineSize;
-
-// Reserved start/end
-uintptr_t ZAddressReservedStart();
-uintptr_t ZAddressReservedEnd();
-
 //
 // Good/Bad mask states
 // --------------------
 //
 //                 GoodMask         BadMask          WeakGoodMask     WeakBadMask
@@ -117,12 +91,34 @@
 // Good/bad masks
 extern uintptr_t  ZAddressGoodMask;
 extern uintptr_t  ZAddressBadMask;
 extern uintptr_t  ZAddressWeakBadMask;
 
-// Marked state
+// Pointer part of address
+extern size_t     ZAddressOffsetBits;
+const  size_t     ZAddressOffsetShift           = 0;
+extern uintptr_t  ZAddressOffsetMask;
+extern size_t     ZAddressOffsetMax;
+
+// Metadata part of address
+const size_t      ZAddressMetadataBits          = 4;
+extern size_t     ZAddressMetadataShift;
+extern uintptr_t  ZAddressMetadataMask;
+
+// Metadata types
 extern uintptr_t  ZAddressMetadataMarked;
+extern uintptr_t  ZAddressMetadataMarked0;
+extern uintptr_t  ZAddressMetadataMarked1;
+extern uintptr_t  ZAddressMetadataRemapped;
+extern uintptr_t  ZAddressMetadataFinalizable;
+
+// NMethod entry barrier
+const size_t      ZNMethodDisarmedOffset        = ZPlatformNMethodDisarmedOffset;
+
+// Cache line size
+const size_t      ZCacheLineSize                = ZPlatformCacheLineSize;
+#define           ZCACHE_ALIGNED                ATTRIBUTE_ALIGNED(ZCacheLineSize)
 
 // Mark stack space
 extern uintptr_t  ZMarkStackSpaceStart;
 const size_t      ZMarkStackSpaceExpandSize     = (size_t)1 << 25; // 32M
 
