diff a/src/hotspot/share/gc/z/zMetronome.cpp b/src/hotspot/share/gc/z/zMetronome.cpp
--- a/src/hotspot/share/gc/z/zMetronome.cpp
+++ b/src/hotspot/share/gc/z/zMetronome.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -32,40 +32,50 @@
     _interval_ms(MILLIUNITS / hz),
     _start_ms(0),
     _nticks(0),
     _stopped(false) {}
 
-uint64_t ZMetronome::nticks() const {
-  return _nticks;
-}
-
 bool ZMetronome::wait_for_tick() {
   if (_nticks++ == 0) {
     // First tick, set start time
     const Ticks now = Ticks::now();
     _start_ms = TimeHelper::counter_to_millis(now.value());
   }
 
-  for (;;) {
+  MonitorLocker ml(&_monitor, Monitor::_no_safepoint_check_flag);
+
+  while (!_stopped) {
     // We might wake up spuriously from wait, so always recalculate
     // the timeout after a wakeup to see if we need to wait again.
     const Ticks now = Ticks::now();
     const uint64_t now_ms = TimeHelper::counter_to_millis(now.value());
     const uint64_t next_ms = _start_ms + (_interval_ms * _nticks);
     const int64_t timeout_ms = next_ms - now_ms;
 
-    MonitorLockerEx ml(&_monitor, Monitor::_no_safepoint_check_flag);
-    if (!_stopped && timeout_ms > 0) {
+    if (timeout_ms > 0) {
       // Wait
-      ml.wait(Monitor::_no_safepoint_check_flag, timeout_ms);
+      ml.wait(timeout_ms);
     } else {
       // Tick
-      return !_stopped;
+      if (timeout_ms < 0) {
+        const uint64_t overslept = -timeout_ms;
+        if (overslept > _interval_ms) {
+          // Missed one or more ticks. Bump _nticks accordingly to
+          // avoid firing a string of immediate ticks to make up
+          // for the ones we missed.
+          _nticks += overslept / _interval_ms;
+        }
+      }
+
+      return true;
     }
   }
+
+  // Stopped
+  return false;
 }
 
 void ZMetronome::stop() {
-  MonitorLockerEx ml(&_monitor, Monitor::_no_safepoint_check_flag);
+  MonitorLocker ml(&_monitor, Monitor::_no_safepoint_check_flag);
   _stopped = true;
   ml.notify();
 }
