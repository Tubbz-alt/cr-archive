diff a/src/hotspot/share/gc/z/zObjectAllocator.hpp b/src/hotspot/share/gc/z/zObjectAllocator.hpp
--- a/src/hotspot/share/gc/z/zObjectAllocator.hpp
+++ b/src/hotspot/share/gc/z/zObjectAllocator.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -29,17 +29,22 @@
 #include "gc/z/zValue.hpp"
 #include "memory/allocation.hpp"
 
 class ZObjectAllocator {
 private:
-  const uint         _nworkers;
+  const bool         _use_per_cpu_shared_small_pages;
   ZPerCPU<size_t>    _used;
+  ZPerCPU<size_t>    _undone;
   ZContended<ZPage*> _shared_medium_page;
   ZPerCPU<ZPage*>    _shared_small_page;
   ZPerWorker<ZPage*> _worker_small_page;
 
+  ZPage** shared_small_page_addr();
+  ZPage* const* shared_small_page_addr() const;
+
   ZPage* alloc_page(uint8_t type, size_t size, ZAllocationFlags flags);
+  void undo_alloc_page(ZPage* page);
 
   // Allocate an object in a shared page. Allocate and
   // atomically install a new page if necessary.
   uintptr_t alloc_object_in_shared_page(ZPage** shared_page,
                                         uint8_t page_type,
@@ -60,11 +65,11 @@
   bool undo_alloc_small_object_from_worker(ZPage* page, uintptr_t addr, size_t size);
   bool undo_alloc_small_object(ZPage* page, uintptr_t addr, size_t size);
   bool undo_alloc_object(ZPage* page, uintptr_t addr, size_t size);
 
 public:
-  ZObjectAllocator(uint nworkers);
+  ZObjectAllocator();
 
   uintptr_t alloc_object(size_t size);
 
   uintptr_t alloc_object_for_relocation(size_t size);
   void undo_alloc_object_for_relocation(ZPage* page, uintptr_t addr, size_t size);
