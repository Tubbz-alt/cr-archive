diff a/src/hotspot/share/gc/z/zArray.inline.hpp b/src/hotspot/share/gc/z/zArray.inline.hpp
--- a/src/hotspot/share/gc/z/zArray.inline.hpp
+++ b/src/hotspot/share/gc/z/zArray.inline.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -34,13 +34,11 @@
     _size(0),
     _capacity(0) {}
 
 template <typename T>
 inline ZArray<T>::~ZArray() {
-  if (_array != NULL) {
-    FREE_C_HEAP_ARRAY(T, _array);
-  }
+  FREE_C_HEAP_ARRAY(T, _array);
 }
 
 template <typename T>
 inline size_t ZArray<T>::size() const {
   return _size;
@@ -77,10 +75,21 @@
   }
 
   _array[_size++] = value;
 }
 
+template <typename T>
+inline void ZArray<T>::transfer(ZArray<T>* from) {
+  assert(_array == NULL, "Should be empty");
+  _array = from->_array;
+  _size = from->_size;
+  _capacity = from->_capacity;
+  from->_array = NULL;
+  from->_size = 0;
+  from->_capacity = 0;
+}
+
 template <typename T>
 inline void ZArray<T>::clear() {
   _size = 0;
 }
 
@@ -90,11 +99,11 @@
     _next(0) {}
 
 template <typename T, bool parallel>
 inline bool ZArrayIteratorImpl<T, parallel>::next(T* elem) {
   if (parallel) {
-    const size_t next = Atomic::add(1u, &_next) - 1u;
+    const size_t next = Atomic::fetch_and_add(&_next, 1u);
     if (next < _array->size()) {
       *elem = _array->at(next);
       return true;
     }
   } else {
@@ -106,6 +115,14 @@
 
   // No more elements
   return false;
 }
 
+template <typename T>
+inline ZArrayIterator<T>::ZArrayIterator(ZArray<T>* array) :
+    ZArrayIteratorImpl<T, ZARRAY_SERIAL>(array) {}
+
+template <typename T>
+inline ZArrayParallelIterator<T>::ZArrayParallelIterator(ZArray<T>* array) :
+    ZArrayIteratorImpl<T, ZARRAY_PARALLEL>(array) {}
+
 #endif // SHARE_GC_Z_ZARRAY_INLINE_HPP
