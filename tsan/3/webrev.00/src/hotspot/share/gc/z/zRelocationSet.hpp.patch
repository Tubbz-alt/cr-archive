diff a/src/hotspot/share/gc/z/zRelocationSet.hpp b/src/hotspot/share/gc/z/zRelocationSet.hpp
--- a/src/hotspot/share/gc/z/zRelocationSet.hpp
+++ b/src/hotspot/share/gc/z/zRelocationSet.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -24,24 +24,26 @@
 #ifndef SHARE_GC_Z_ZRELOCATIONSET_HPP
 #define SHARE_GC_Z_ZRELOCATIONSET_HPP
 
 #include "memory/allocation.hpp"
 
+class ZForwarding;
 class ZPage;
 
 class ZRelocationSet {
   template <bool> friend class ZRelocationSetIteratorImpl;
 
 private:
-  ZPage** _pages;
-  size_t  _npages;
+  ZForwarding** _forwardings;
+  size_t        _nforwardings;
 
 public:
   ZRelocationSet();
 
-  void populate(const ZPage* const* group0, size_t ngroup0,
-                const ZPage* const* group1, size_t ngroup1);
+  void populate(ZPage* const* group0, size_t ngroup0,
+                ZPage* const* group1, size_t ngroup1);
+  void reset();
 };
 
 template <bool parallel>
 class ZRelocationSetIteratorImpl : public StackObj {
 private:
@@ -49,11 +51,11 @@
   size_t                _next;
 
 public:
   ZRelocationSetIteratorImpl(ZRelocationSet* relocation_set);
 
-  bool next(ZPage** page);
+  bool next(ZForwarding** forwarding);
 };
 
 // Iterator types
 #define ZRELOCATIONSET_SERIAL      false
 #define ZRELOCATIONSET_PARALLEL    true
