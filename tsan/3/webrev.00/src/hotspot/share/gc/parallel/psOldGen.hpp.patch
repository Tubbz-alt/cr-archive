diff a/src/hotspot/share/gc/parallel/psOldGen.hpp b/src/hotspot/share/gc/parallel/psOldGen.hpp
--- a/src/hotspot/share/gc/parallel/psOldGen.hpp
+++ b/src/hotspot/share/gc/parallel/psOldGen.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -30,12 +30,10 @@
 #include "gc/parallel/psGenerationCounters.hpp"
 #include "gc/parallel/psVirtualspace.hpp"
 #include "gc/parallel/spaceCounters.hpp"
 #include "runtime/safepoint.hpp"
 
-class PSMarkSweepDecorator;
-
 class PSOldGen : public CHeapObj<mtGC> {
   friend class VMStructs;
   friend class PSPromotionManager; // Uses the cas_allocate methods
   friend class ParallelScavengeHeap;
   friend class AdjoiningGenerations;
@@ -43,27 +41,20 @@
  protected:
   MemRegion                _reserved;          // Used for simple containment tests
   PSVirtualSpace*          _virtual_space;     // Controls mapping and unmapping of virtual mem
   ObjectStartArray         _start_array;       // Keeps track of where objects start in a 512b block
   MutableSpace*            _object_space;      // Where all the objects live
-#if INCLUDE_SERIALGC
-  PSMarkSweepDecorator*    _object_mark_sweep; // The mark sweep view of _object_space
-#endif
-  const char* const        _name;              // Name of this generation.
 
   // Performance Counters
   PSGenerationCounters*    _gen_counters;
   SpaceCounters*           _space_counters;
 
   // Sizing information, in bytes, set in constructor
   const size_t _init_gen_size;
   const size_t _min_gen_size;
   const size_t _max_gen_size;
 
-  // Used when initializing the _name field.
-  static inline const char* select_name();
-
 #ifdef ASSERT
   void assert_block_in_covered_region(MemRegion new_memregion) {
     // Explictly capture current covered_region in a local
     MemRegion covered_region = this->start_array()->covered_region();
     assert(covered_region.contains(new_memregion),
@@ -150,26 +141,16 @@
   bool is_in_reserved(const void* p) const {
     return reserved().contains(p);
   }
 
   MutableSpace*         object_space() const      { return _object_space; }
-#if INCLUDE_SERIALGC
-  PSMarkSweepDecorator* object_mark_sweep() const { return _object_mark_sweep; }
-#endif
   ObjectStartArray*     start_array()             { return &_start_array; }
   PSVirtualSpace*       virtual_space() const     { return _virtual_space;}
 
   // Has the generation been successfully allocated?
   bool is_allocated();
 
-#if INCLUDE_SERIALGC
-  // MarkSweep methods
-  virtual void precompact();
-  void adjust_pointers();
-  void compact();
-#endif
-
   // Size info
   size_t capacity_in_bytes() const        { return object_space()->capacity_in_bytes(); }
   size_t used_in_bytes() const            { return object_space()->used_in_bytes(); }
   size_t free_in_bytes() const            { return object_space()->free_in_bytes(); }
 
@@ -196,11 +177,10 @@
   void object_iterate(ObjectClosure* cl) { object_space()->object_iterate(cl); }
 
   // Debugging - do not use for time critical operations
   virtual void print() const;
   virtual void print_on(outputStream* st) const;
-  void print_used_change(size_t prev_used) const;
 
   void verify();
   void verify_object_start_array();
 
   // These should not used
@@ -214,11 +194,11 @@
 
   // Performance Counter support
   void update_counters();
 
   // Printing support
-  virtual const char* name() const { return _name; }
+  virtual const char* name() const { return "ParOldGen"; }
 
   // Debugging support
   // Save the tops of all spaces for later use during mangling.
   void record_spaces_top() PRODUCT_RETURN;
 };
