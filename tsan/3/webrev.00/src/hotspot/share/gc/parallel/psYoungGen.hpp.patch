diff a/src/hotspot/share/gc/parallel/psYoungGen.hpp b/src/hotspot/share/gc/parallel/psYoungGen.hpp
--- a/src/hotspot/share/gc/parallel/psYoungGen.hpp
+++ b/src/hotspot/share/gc/parallel/psYoungGen.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -29,12 +29,10 @@
 #include "gc/parallel/objectStartArray.hpp"
 #include "gc/parallel/psGenerationCounters.hpp"
 #include "gc/parallel/psVirtualspace.hpp"
 #include "gc/parallel/spaceCounters.hpp"
 
-class PSMarkSweepDecorator;
-
 class PSYoungGen : public CHeapObj<mtGC> {
   friend class VMStructs;
   friend class ParallelScavengeHeap;
   friend class AdjoiningGenerations;
 
@@ -45,16 +43,10 @@
   // Spaces
   MutableSpace* _eden_space;
   MutableSpace* _from_space;
   MutableSpace* _to_space;
 
-
-  // MarkSweep Decorators
-  PSMarkSweepDecorator* _eden_mark_sweep;
-  PSMarkSweepDecorator* _from_mark_sweep;
-  PSMarkSweepDecorator* _to_mark_sweep;
-
   // Sizing information, in bytes, set in constructor
   const size_t _init_gen_size;
   const size_t _min_gen_size;
   const size_t _max_gen_size;
 
@@ -116,21 +108,10 @@
   PSVirtualSpace* virtual_space() const { return _virtual_space; }
 
   // For Adaptive size policy
   size_t min_gen_size() { return _min_gen_size; }
 
-  // MarkSweep support
-  PSMarkSweepDecorator* eden_mark_sweep() const    { return _eden_mark_sweep; }
-  PSMarkSweepDecorator* from_mark_sweep() const    { return _from_mark_sweep; }
-  PSMarkSweepDecorator* to_mark_sweep() const      { return _to_mark_sweep;   }
-
-#if INCLUDE_SERIALGC
-  void precompact();
-  void adjust_pointers();
-  void compact();
-#endif
-
   // Called during/after GC
   void swap_spaces();
 
   // Resize generation using suggested free space size and survivor size
   // NOTE:  "eden_size" and "survivor_size" are suggestions only. Current
@@ -178,11 +159,10 @@
   void update_counters();
 
   // Debugging - do not use for time critical operations
   void print() const;
   void print_on(outputStream* st) const;
-  void print_used_change(size_t prev_used) const;
   virtual const char* name() const { return "PSYoungGen"; }
 
   void verify();
 
   // Space boundary invariant checker
