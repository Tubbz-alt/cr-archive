diff a/src/hotspot/share/gc/parallel/psPromotionManager.cpp b/src/hotspot/share/gc/parallel/psPromotionManager.cpp
--- a/src/hotspot/share/gc/parallel/psPromotionManager.cpp
+++ b/src/hotspot/share/gc/parallel/psPromotionManager.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,11 +22,10 @@
  *
  */
 
 #include "precompiled.hpp"
 #include "classfile/javaClasses.inline.hpp"
-#include "gc/parallel/gcTaskManager.hpp"
 #include "gc/parallel/mutableSpace.hpp"
 #include "gc/parallel/parallelScavengeHeap.hpp"
 #include "gc/parallel/psOldGen.hpp"
 #include "gc/parallel/psPromotionManager.inline.hpp"
 #include "gc/parallel/psScavenge.inline.hpp"
@@ -42,11 +41,11 @@
 #include "memory/resourceArea.hpp"
 #include "oops/access.inline.hpp"
 #include "oops/compressedOops.inline.hpp"
 
 PaddedEnd<PSPromotionManager>* PSPromotionManager::_manager_array = NULL;
-OopStarTaskQueueSet*           PSPromotionManager::_stack_array_depth = NULL;
+PSPromotionManager::OopStarTaskQueueSet* PSPromotionManager::_stack_array_depth = NULL;
 PreservedMarksSet*             PSPromotionManager::_preserved_marks_set = NULL;
 PSOldGen*                      PSPromotionManager::_old_gen = NULL;
 MutableSpace*                  PSPromotionManager::_young_space = NULL;
 
 void PSPromotionManager::initialize() {
@@ -59,25 +58,22 @@
 
   // To prevent false sharing, we pad the PSPromotionManagers
   // and make sure that the first instance starts at a cache line.
   assert(_manager_array == NULL, "Attempt to initialize twice");
   _manager_array = PaddedArray<PSPromotionManager, mtGC>::create_unfreeable(promotion_manager_num);
-  guarantee(_manager_array != NULL, "Could not initialize promotion manager");
 
   _stack_array_depth = new OopStarTaskQueueSet(ParallelGCThreads);
-  guarantee(_stack_array_depth != NULL, "Could not initialize promotion manager");
 
   // Create and register the PSPromotionManager(s) for the worker threads.
   for(uint i=0; i<ParallelGCThreads; i++) {
     stack_array_depth()->register_queue(i, _manager_array[i].claimed_stack_depth());
   }
   // The VMThread gets its own PSPromotionManager, which is not available
   // for work stealing.
 
   assert(_preserved_marks_set == NULL, "Attempt to initialize twice");
   _preserved_marks_set = new PreservedMarksSet(true /* in_c_heap */);
-  guarantee(_preserved_marks_set != NULL, "Could not initialize preserved marks set");
   _preserved_marks_set->init(promotion_manager_num);
   for (uint i = 0; i < promotion_manager_num; i += 1) {
     _manager_array[i].register_preserved_marks(_preserved_marks_set->get(i));
   }
 }
@@ -238,57 +234,12 @@
 void PSPromotionManager::register_preserved_marks(PreservedMarks* preserved_marks) {
   assert(_preserved_marks == NULL, "do not set it twice");
   _preserved_marks = preserved_marks;
 }
 
-class ParRestoreGCTask : public GCTask {
-private:
-  const uint _id;
-  PreservedMarksSet* const _preserved_marks_set;
-  volatile size_t* const _total_size_addr;
-
-public:
-  virtual char* name() {
-    return (char*) "preserved mark restoration task";
-  }
-
-  virtual void do_it(GCTaskManager* manager, uint which){
-    _preserved_marks_set->get(_id)->restore_and_increment(_total_size_addr);
-  }
-
-  ParRestoreGCTask(uint id,
-                   PreservedMarksSet* preserved_marks_set,
-                   volatile size_t* total_size_addr)
-    : _id(id),
-      _preserved_marks_set(preserved_marks_set),
-      _total_size_addr(total_size_addr) { }
-};
-
-class PSRestorePreservedMarksTaskExecutor : public RestorePreservedMarksTaskExecutor {
-private:
-  GCTaskManager* _gc_task_manager;
-
-public:
-  PSRestorePreservedMarksTaskExecutor(GCTaskManager* gc_task_manager)
-      : _gc_task_manager(gc_task_manager) { }
-
-  void restore(PreservedMarksSet* preserved_marks_set,
-               volatile size_t* total_size_addr) {
-    // GCTask / GCTaskQueue are ResourceObjs
-    ResourceMark rm;
-
-    GCTaskQueue* q = GCTaskQueue::create();
-    for (uint i = 0; i < preserved_marks_set->num(); i += 1) {
-      q->enqueue(new ParRestoreGCTask(i, preserved_marks_set, total_size_addr));
-    }
-    _gc_task_manager->execute_and_wait(q);
-  }
-};
-
 void PSPromotionManager::restore_preserved_marks() {
-  PSRestorePreservedMarksTaskExecutor task_executor(PSScavenge::gc_task_manager());
-  _preserved_marks_set->restore(&task_executor);
+  _preserved_marks_set->restore(&ParallelScavengeHeap::heap()->workers());
 }
 
 void PSPromotionManager::drain_stacks_depth(bool totally_drain) {
   totally_drain = totally_drain || _totally_drain;
 
@@ -388,11 +339,11 @@
   } else {
     process_array_chunk_work<oop>(obj, start, end);
   }
 }
 
-oop PSPromotionManager::oop_promotion_failed(oop obj, markOop obj_mark) {
+oop PSPromotionManager::oop_promotion_failed(oop obj, markWord obj_mark) {
   assert(_old_gen_is_full || PromotionFailureALot, "Sanity");
 
   // Attempt to CAS in the header.
   // This tests if the header is still the same as when
   // this started.  If it is the same (i.e., no forwarding
