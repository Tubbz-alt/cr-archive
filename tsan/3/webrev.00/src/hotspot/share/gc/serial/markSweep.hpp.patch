diff a/src/hotspot/share/gc/serial/markSweep.hpp b/src/hotspot/share/gc/serial/markSweep.hpp
--- a/src/hotspot/share/gc/serial/markSweep.hpp
+++ b/src/hotspot/share/gc/serial/markSweep.hpp
@@ -27,11 +27,11 @@
 
 #include "gc/shared/collectedHeap.hpp"
 #include "gc/shared/genOopClosures.hpp"
 #include "gc/shared/taskqueue.hpp"
 #include "memory/iterator.hpp"
-#include "oops/markOop.hpp"
+#include "oops/markWord.hpp"
 #include "oops/oop.hpp"
 #include "runtime/timer.hpp"
 #include "utilities/growableArray.hpp"
 #include "utilities/stack.hpp"
 
@@ -98,11 +98,11 @@
   // Traversal stacks used during phase1
   static Stack<oop, mtGC>                      _marking_stack;
   static Stack<ObjArrayTask, mtGC>             _objarray_stack;
 
   // Space for storing/restoring mark word
-  static Stack<markOop, mtGC>                  _preserved_mark_stack;
+  static Stack<markWord, mtGC>                 _preserved_mark_stack;
   static Stack<oop, mtGC>                      _preserved_oop_stack;
   static size_t                          _preserved_count;
   static size_t                          _preserved_count_max;
   static PreservedMark*                  _preserved_marks;
 
@@ -135,11 +135,11 @@
   static void set_ref_processor(ReferenceProcessor* rp);
 
   static STWGCTimer* gc_timer() { return _gc_timer; }
   static SerialOldTracer* gc_tracer() { return _gc_tracer; }
 
-  static void preserve_mark(oop p, markOop mark);
+  static void preserve_mark(oop p, markWord mark);
                                 // Save the mark word so it can be restored later
   static void adjust_marks();   // Adjust the pointers in the preserved marks table
   static void restore_marks();  // Restore the marks that we saved in preserve_mark
 
   static int adjust_pointers(oop obj);
@@ -197,14 +197,14 @@
 };
 
 class PreservedMark {
 private:
   oop _obj;
-  markOop _mark;
+  markWord _mark;
 
 public:
-  void init(oop obj, markOop mark) {
+  void init(oop obj, markWord mark) {
     _obj = obj;
     _mark = mark;
   }
 
   void adjust_pointer();
