diff a/src/hotspot/share/gc/shared/stringdedup/stringDedupThread.cpp b/src/hotspot/share/gc/shared/stringdedup/stringDedupThread.cpp
--- a/src/hotspot/share/gc/shared/stringdedup/stringDedupThread.cpp
+++ b/src/hotspot/share/gc/shared/stringdedup/stringDedupThread.cpp
@@ -31,11 +31,10 @@
 #include "gc/shared/stringdedup/stringDedupThread.hpp"
 #include "gc/shared/suspendibleThreadSet.hpp"
 #include "logging/log.hpp"
 #include "oops/access.inline.hpp"
 #include "oops/oop.inline.hpp"
-#include "runtime/atomic.hpp"
 
 StringDedupThread* StringDedupThread::_thread = NULL;
 
 StringDedupThread::StringDedupThread() :
   ConcurrentGCThread() {
@@ -64,14 +63,14 @@
     oop java_string = RawAccess<>::oop_load(p);
     StringDedupTable::deduplicate(java_string, _stat);
   }
 };
 
-// The CDS archive does not include the string dedupication table. Only the string
+// The CDS archive does not include the string deduplication table. Only the string
 // table is saved in the archive. The shared strings from CDS archive need to be
-// added to the string dedupication table before deduplication occurs. That is
-// done in the begining of the StringDedupThread (see StringDedupThread::do_deduplication()).
+// added to the string deduplication table before deduplication occurs. That is
+// done in the beginning of the StringDedupThread (see StringDedupThread::do_deduplication()).
 void StringDedupThread::deduplicate_shared_strings(StringDedupStat* stat) {
   StringDedupSharedClosure sharedStringDedup(stat);
   StringTable::shared_oops_do(&sharedStringDedup);
 }
 
