diff a/src/hotspot/share/gc/shared/workerDataArray.inline.hpp b/src/hotspot/share/gc/shared/workerDataArray.inline.hpp
--- a/src/hotspot/share/gc/shared/workerDataArray.inline.hpp
+++ b/src/hotspot/share/gc/shared/workerDataArray.inline.hpp
@@ -28,15 +28,17 @@
 #include "gc/shared/workerDataArray.hpp"
 #include "memory/allocation.inline.hpp"
 #include "utilities/ostream.hpp"
 
 template <typename T>
-WorkerDataArray<T>::WorkerDataArray(uint length, const char* title) :
+WorkerDataArray<T>::WorkerDataArray(const char* title, uint length, bool is_serial) :
  _data(NULL),
  _length(length),
- _title(title) {
+ _title(title),
+ _is_serial(is_serial) {
   assert(length > 0, "Must have some workers to store data for");
+  assert(!is_serial || length == 1, "Serial phase must only have a single entry.");
   _data = NEW_C_HEAP_ARRAY(T, _length, mtGC);
   for (uint i = 0; i < MaxThreadWorkItems; i++) {
     _thread_work_items[i] = NULL;
   }
   reset();
@@ -55,17 +57,22 @@
   return _data[worker_i];
 }
 
 template <typename T>
 WorkerDataArray<T>::~WorkerDataArray() {
+  for (uint i = 0; i < MaxThreadWorkItems; i++) {
+    delete _thread_work_items[i];
+  }
   FREE_C_HEAP_ARRAY(T, _data);
 }
 
 template <typename T>
-void WorkerDataArray<T>::link_thread_work_items(WorkerDataArray<size_t>* thread_work_items, uint index) {
+void WorkerDataArray<T>::create_thread_work_items(const char* title, uint index, uint length_override) {
   assert(index < MaxThreadWorkItems, "Tried to access thread work item %u (max %u)", index, MaxThreadWorkItems);
-  _thread_work_items[index] = thread_work_items;
+  assert(_thread_work_items[index] == NULL, "Tried to overwrite existing thread work item");
+  uint length = length_override != 0 ? length_override : _length;
+  _thread_work_items[index] = new WorkerDataArray<size_t>(title, length);
 }
 
 template <typename T>
 void WorkerDataArray<T>::set_thread_work_item(uint worker_i, size_t value, uint index) {
   assert(index < MaxThreadWorkItems, "Tried to access thread work item %u (max %u)", index, MaxThreadWorkItems);
@@ -89,14 +96,21 @@
   } else {
     _thread_work_items[index]->add(worker_i, value);
   }
 }
 
+template <typename T>
+size_t WorkerDataArray<T>::get_thread_work_item(uint worker_i, uint index) {
+  assert(index < MaxThreadWorkItems, "Tried to access thread work item %u (max %u)", index, MaxThreadWorkItems);
+  assert(_thread_work_items[index] != NULL, "No sub count");
+  return _thread_work_items[index]->get(worker_i);
+}
+
 template <typename T>
 void WorkerDataArray<T>::add(uint worker_i, T value) {
   assert(worker_i < _length, "Worker %d is greater than max: %d", worker_i, _length);
-  assert(_data[worker_i] != uninitialized(), "No data to add to for worker %d", worker_i);
+  assert(_data[worker_i] != uninitialized(), "No data to add to %s for worker %d", _title, worker_i);
   _data[worker_i] += value;
 }
 
 template <typename T>
 double WorkerDataArray<T>::average() const {
@@ -130,34 +144,43 @@
   }
 }
 
 template <class T>
 void WorkerDataArray<T>::print_summary_on(outputStream* out, bool print_sum) const {
-  out->print("%-25s", title());
+  if (_is_serial) {
+    out->print("%s:", title());
+  } else {
+    out->print("%-25s", title());
+  }
+
   uint start = 0;
   while (start < _length && get(start) == uninitialized()) {
     start++;
   }
   if (start < _length) {
-    T min = get(start);
-    T max = min;
-    T sum = 0;
-    uint contributing_threads = 0;
-    for (uint i = start; i < _length; ++i) {
-      T value = get(i);
-      if (value != uninitialized()) {
-        max = MAX2(max, value);
-        min = MIN2(min, value);
-        sum += value;
-        contributing_threads++;
+    if (_is_serial) {
+      WDAPrinter::summary(out, get(0));
+    } else {
+      T min = get(start);
+      T max = min;
+      T sum = 0;
+      uint contributing_threads = 0;
+      for (uint i = start; i < _length; ++i) {
+        T value = get(i);
+        if (value != uninitialized()) {
+          max = MAX2(max, value);
+          min = MIN2(min, value);
+          sum += value;
+          contributing_threads++;
+        }
       }
+      T diff = max - min;
+      assert(contributing_threads != 0, "Must be since we found a used value for the start index");
+      double avg = sum / (double) contributing_threads;
+      WDAPrinter::summary(out, min, avg, max, diff, sum, print_sum);
+      out->print_cr(", Workers: %d", contributing_threads);
     }
-    T diff = max - min;
-    assert(contributing_threads != 0, "Must be since we found a used value for the start index");
-    double avg = sum / (double) contributing_threads;
-    WDAPrinter::summary(out, min, avg, max, diff, sum, print_sum);
-    out->print_cr(", Workers: %d", contributing_threads);
   } else {
     // No data for this phase.
     out->print_cr(" skipped");
   }
 }
