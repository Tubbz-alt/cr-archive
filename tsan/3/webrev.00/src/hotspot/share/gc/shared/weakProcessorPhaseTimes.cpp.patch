diff a/src/hotspot/share/gc/shared/weakProcessorPhaseTimes.cpp b/src/hotspot/share/gc/shared/weakProcessorPhaseTimes.cpp
--- a/src/hotspot/share/gc/shared/weakProcessorPhaseTimes.cpp
+++ b/src/hotspot/share/gc/shared/weakProcessorPhaseTimes.cpp
@@ -21,30 +21,36 @@
  * questions.
  *
  */
 
 #include "precompiled.hpp"
+#include "gc/shared/oopStorage.hpp"
 #include "gc/shared/weakProcessorPhases.hpp"
 #include "gc/shared/weakProcessorPhaseTimes.hpp"
 #include "gc/shared/workerDataArray.inline.hpp"
 #include "logging/log.hpp"
 #include "logging/logStream.hpp"
 #include "utilities/debug.hpp"
 #include "utilities/globalDefinitions.hpp"
 #include "utilities/ticks.hpp"
 
-static uint phase_index(WeakProcessorPhase phase) {
-  return WeakProcessorPhases::index(phase);
+static uint serial_phase_index(WeakProcessorPhase phase) {
+  return WeakProcessorPhases::serial_index(phase);
 }
 
 static bool is_serial_phase(WeakProcessorPhase phase) {
   return WeakProcessorPhases::is_serial(phase);
 }
 
-static void assert_oop_storage_phase(WeakProcessorPhase phase) {
-  assert(WeakProcessorPhases::is_oop_storage(phase),
-         "Not an oop_storage phase %u", phase_index(phase));
+static void assert_serial_phase(WeakProcessorPhase phase) {
+  assert(is_serial_phase(phase),
+         "Not a serial phase %u", static_cast<uint>(phase));
+}
+
+static void assert_oopstorage_phase(WeakProcessorPhase phase) {
+  assert(WeakProcessorPhases::is_oopstorage(phase),
+         "Not an oopstorage phase %u", static_cast<uint>(phase));
 }
 
 const double uninitialized_time = -1.0;
 
 #ifdef ASSERT
@@ -62,41 +68,42 @@
   for (size_t i = 0; i < nitems; ++i) {
     items[i] = 0;
   }
 }
 
+void WeakProcessorPhaseTimes::reset_phase_data() {
+  reset_times(_phase_times_sec, ARRAY_SIZE(_phase_times_sec));
+  reset_items(_phase_dead_items, ARRAY_SIZE(_phase_dead_items));
+  reset_items(_phase_total_items, ARRAY_SIZE(_phase_total_items));
+}
+
 WeakProcessorPhaseTimes::WeakProcessorPhaseTimes(uint max_threads) :
   _max_threads(max_threads),
   _active_workers(0),
   _total_time_sec(uninitialized_time),
-  _worker_data(),
-  _worker_dead_items(),
-  _worker_total_items()
+  _worker_data()
 {
   assert(_max_threads > 0, "max_threads must not be zero");
 
-  reset_times(_phase_times_sec, ARRAY_SIZE(_phase_times_sec));
-  reset_items(_phase_dead_items, ARRAY_SIZE(_phase_dead_items));
-  reset_items(_phase_total_items, ARRAY_SIZE(_phase_total_items));
-
-  if (_max_threads > 1) {
-    WorkerDataArray<double>** wpt = _worker_data;
-    FOR_EACH_WEAK_PROCESSOR_OOP_STORAGE_PHASE(phase) {
-      const char* description = WeakProcessorPhases::description(phase);
-      *wpt = new WorkerDataArray<double>(_max_threads, description);
-      (*wpt)->link_thread_work_items(new WorkerDataArray<size_t>(_max_threads, "Dead"), DeadItems);
-      (*wpt)->link_thread_work_items(new WorkerDataArray<size_t>(_max_threads, "Total"), TotalItems);
-      wpt++;
-    }
+  reset_phase_data();
+
+  WorkerDataArray<double>** wpt = _worker_data;
+  OopStorageSet::Iterator it = OopStorageSet::weak_iterator();
+  for ( ; !it.is_end(); ++it) {
+    assert(size_t(wpt - _worker_data) < ARRAY_SIZE(_worker_data), "invariant");
+    const char* description = it->name();
+    *wpt = new WorkerDataArray<double>(description, _max_threads);
+    (*wpt)->create_thread_work_items("Dead", DeadItems);
+    (*wpt)->create_thread_work_items("Total", TotalItems);
+    wpt++;
   }
+  assert(size_t(wpt - _worker_data) == ARRAY_SIZE(_worker_data), "invariant");
 }
 
 WeakProcessorPhaseTimes::~WeakProcessorPhaseTimes() {
   for (size_t i = 0; i < ARRAY_SIZE(_worker_data); ++i) {
     delete _worker_data[i];
-    delete _worker_dead_items[i];
-    delete _worker_total_items[i];
   }
 }
 
 uint WeakProcessorPhaseTimes::max_threads() const { return _max_threads; }
 
@@ -113,17 +120,13 @@
 }
 
 void WeakProcessorPhaseTimes::reset() {
   _active_workers = 0;
   _total_time_sec = uninitialized_time;
-  reset_times(_phase_times_sec, ARRAY_SIZE(_phase_times_sec));
-  reset_items(_phase_dead_items, ARRAY_SIZE(_phase_dead_items));
-  reset_items(_phase_total_items, ARRAY_SIZE(_phase_total_items));
-  if (_max_threads > 1) {
-    for (size_t i = 0; i < ARRAY_SIZE(_worker_data); ++i) {
-      _worker_data[i]->reset();
-    }
+  reset_phase_data();
+  for (size_t i = 0; i < ARRAY_SIZE(_worker_data); ++i) {
+    _worker_data[i]->reset();
   }
 }
 
 double WeakProcessorPhaseTimes::total_time_sec() const {
   assert(is_initialized_time(_total_time_sec), "Total time not set");
@@ -134,67 +137,58 @@
   assert(!is_initialized_time(_total_time_sec), "Already set total time");
   _total_time_sec = time_sec;
 }
 
 double WeakProcessorPhaseTimes::phase_time_sec(WeakProcessorPhase phase) const {
-  assert(is_initialized_time(_phase_times_sec[phase_index(phase)]),
-         "phase time not set %u", phase_index(phase));
-  return _phase_times_sec[phase_index(phase)];
+  assert_serial_phase(phase);
+  assert(is_initialized_time(_phase_times_sec[serial_phase_index(phase)]),
+         "phase time not set %u", serial_phase_index(phase));
+  return _phase_times_sec[serial_phase_index(phase)];
 }
 
 void WeakProcessorPhaseTimes::record_phase_time_sec(WeakProcessorPhase phase, double time_sec) {
-  assert(!is_initialized_time(_phase_times_sec[phase_index(phase)]),
-         "Already set time for phase %u", phase_index(phase));
-  _phase_times_sec[phase_index(phase)] = time_sec;
+  assert_serial_phase(phase);
+  assert(!is_initialized_time(_phase_times_sec[serial_phase_index(phase)]),
+         "Already set time for phase %u", serial_phase_index(phase));
+  _phase_times_sec[serial_phase_index(phase)] = time_sec;
 }
 
 void WeakProcessorPhaseTimes::record_phase_items(WeakProcessorPhase phase, size_t num_dead, size_t num_total) {
-  uint p = phase_index(phase);
+  assert_serial_phase(phase);
+  uint p = serial_phase_index(phase);
   assert(!is_initialized_items(_phase_dead_items[p]),
          "Already set dead items for phase %u", p);
   assert(!is_initialized_items(_phase_total_items[p]),
          "Already set total items for phase %u", p);
   _phase_dead_items[p] = num_dead;
   _phase_total_items[p] = num_total;
 }
 
 WorkerDataArray<double>* WeakProcessorPhaseTimes::worker_data(WeakProcessorPhase phase) const {
-  assert_oop_storage_phase(phase);
-  assert(active_workers() > 1, "No worker data when single-threaded");
-  return _worker_data[WeakProcessorPhases::oop_storage_index(phase)];
+  assert_oopstorage_phase(phase);
+  return _worker_data[WeakProcessorPhases::oopstorage_index(phase)];
 }
 
 double WeakProcessorPhaseTimes::worker_time_sec(uint worker_id, WeakProcessorPhase phase) const {
   assert(worker_id < active_workers(),
          "invalid worker id %u for %u", worker_id, active_workers());
-  if (active_workers() == 1) {
-    return phase_time_sec(phase);
-  } else {
-    return worker_data(phase)->get(worker_id);
-  }
+  return worker_data(phase)->get(worker_id);
 }
 
 void WeakProcessorPhaseTimes::record_worker_time_sec(uint worker_id,
                                                      WeakProcessorPhase phase,
                                                      double time_sec) {
-  if (active_workers() == 1) {
-    record_phase_time_sec(phase, time_sec);
-  } else {
-    worker_data(phase)->set(worker_id, time_sec);
-  }
+  worker_data(phase)->set(worker_id, time_sec);
 }
 
 void WeakProcessorPhaseTimes::record_worker_items(uint worker_id,
                                                   WeakProcessorPhase phase,
                                                   size_t num_dead,
                                                   size_t num_total) {
-  if (active_workers() == 1) {
-    record_phase_items(phase, num_dead, num_total);
-  } else {
-    worker_data(phase)->set_or_add_thread_work_item(worker_id, num_dead, DeadItems);
-    worker_data(phase)->set_or_add_thread_work_item(worker_id, num_total, TotalItems);
-  }
+  WorkerDataArray<double>* phase_data = worker_data(phase);
+  phase_data->set_or_add_thread_work_item(worker_id, num_dead, DeadItems);
+  phase_data->set_or_add_thread_work_item(worker_id, num_total, TotalItems);
 }
 
 static double elapsed_time_sec(Ticks start_time, Ticks end_time) {
   return (end_time - start_time).seconds();
 }
@@ -217,11 +211,11 @@
   _times(times),
   _phase(phase),
   _worker_id(worker_id),
   _start_time(Ticks::now())
 {
-  assert_oop_storage_phase(_phase);
+  assert_oopstorage_phase(_phase);
   assert(_times == NULL || worker_id < _times->active_workers(),
          "Invalid worker_id %u", worker_id);
 }
 
 WeakProcessorPhaseTimeTracker::WeakProcessorPhaseTimeTracker(WeakProcessorPhaseTimes* times,
@@ -229,11 +223,11 @@
   _times(times),
   _phase(phase),
   _worker_id(0),
   _start_time(Ticks::now())
 {
-  assert(is_serial_phase(phase), "Not a serial phase %u", phase_index(phase));
+  assert_serial_phase(phase);
 }
 
 WeakProcessorPhaseTimeTracker::~WeakProcessorPhaseTimeTracker() {
   if (_times != NULL) {
     double time_sec = elapsed_time_sec(_start_time, Ticks::now());
@@ -257,24 +251,25 @@
 
 #define TIME_FORMAT "%.1lfms"
 
 void WeakProcessorPhaseTimes::log_st_phase(WeakProcessorPhase phase,
                                            uint indent) const {
+  assert_serial_phase(phase);
   log_debug(gc, phases)("%s%s: " TIME_FORMAT,
                         indent_str(indent),
                         WeakProcessorPhases::description(phase),
                         phase_time_sec(phase) * MILLIUNITS);
 
   log_debug(gc, phases)("%s%s: " SIZE_FORMAT,
                         indent_str(indent + 1),
                         "Dead",
-                        _phase_dead_items[phase_index(phase)]);
+                        _phase_dead_items[serial_phase_index(phase)]);
 
   log_debug(gc, phases)("%s%s: " SIZE_FORMAT,
                         indent_str(indent + 1),
                         "Total",
-                        _phase_total_items[phase_index(phase)]);
+                        _phase_total_items[serial_phase_index(phase)]);
 }
 
 void WeakProcessorPhaseTimes::log_mt_phase_summary(WeakProcessorPhase phase,
                                                    uint indent) const {
   LogTarget(Debug, gc, phases) lt;
@@ -304,16 +299,16 @@
   }
 }
 
 void WeakProcessorPhaseTimes::log_print_phases(uint indent) const {
   if (log_is_enabled(Debug, gc, phases)) {
-    FOR_EACH_WEAK_PROCESSOR_PHASE(phase) {
-      if (is_serial_phase(phase) || (active_workers() == 1)) {
-        log_st_phase(phase, indent);
-      } else {
-        log_mt_phase_summary(phase, indent);
-      }
+    typedef WeakProcessorPhases::Iterator Iterator;
+    for (Iterator it = WeakProcessorPhases::serial_iterator(); !it.is_end(); ++it) {
+      log_st_phase(*it, indent);
+    }
+    for (Iterator it = WeakProcessorPhases::oopstorage_iterator(); !it.is_end(); ++it) {
+      log_mt_phase_summary(*it, indent);
     }
   }
 }
 
 void WeakProcessorPhaseTimes::log_print(uint indent) const {
