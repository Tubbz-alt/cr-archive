diff a/src/hotspot/share/gc/shared/stringdedup/stringDedupTable.hpp b/src/hotspot/share/gc/shared/stringdedup/stringDedupTable.hpp
--- a/src/hotspot/share/gc/shared/stringdedup/stringDedupTable.hpp
+++ b/src/hotspot/share/gc/shared/stringdedup/stringDedupTable.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -120,11 +120,11 @@
   // Cache for reuse and fast alloc/free of table entries.
   static StringDedupEntryCache*   _entry_cache;
 
   StringDedupEntry**              _buckets;
   size_t                          _size;
-  uintx                           _entries;
+  volatile uintx                  _entries;
   uintx                           _shrink_threshold;
   uintx                           _grow_threshold;
   bool                            _rehash_needed;
 
   // The hash seed also dictates which hash function to use. A
@@ -142,11 +142,11 @@
   static const uintx              _rehash_threshold;
   static const double             _max_cache_factor;
 
   // Table statistics, only used for logging.
   static uintx                    _entries_added;
-  static uintx                    _entries_removed;
+  static volatile uintx           _entries_removed;
   static uintx                    _resize_count;
   static uintx                    _rehash_count;
 
   static volatile size_t          _claimed_index;
 
@@ -187,11 +187,11 @@
   // Thread safe lookup or add of table entry
   static typeArrayOop lookup_or_add(typeArrayOop value, bool latin1, unsigned int hash) {
     // Protect the table from concurrent access. Also note that this lock
     // acts as a fence for _table, which could have been replaced by a new
     // instance if the table was resized or rehashed.
-    MutexLockerEx ml(StringDedupTable_lock, Mutex::_no_safepoint_check_flag);
+    MutexLocker ml(StringDedupTable_lock, Mutex::_no_safepoint_check_flag);
     return _table->lookup_or_add_inner(value, latin1, hash);
   }
 
   // Returns true if the hashtable is currently using a Java compatible
   // hash function.
