diff a/src/hotspot/share/gc/shared/oopStorage.inline.hpp b/src/hotspot/share/gc/shared/oopStorage.inline.hpp
--- a/src/hotspot/share/gc/shared/oopStorage.inline.hpp
+++ b/src/hotspot/share/gc/shared/oopStorage.inline.hpp
@@ -46,13 +46,11 @@
   // Block* _blocks[1];            // Pseudo flexible array member.
 
   ActiveArray(size_t size);
   ~ActiveArray();
 
-  // Noncopyable
-  ActiveArray(const ActiveArray&);
-  ActiveArray& operator=(const ActiveArray&);
+  NONCOPYABLE(ActiveArray);
 
   static size_t blocks_offset();
   Block* const* base_ptr() const;
 
   Block* const* block_ptr(size_t index) const;
@@ -116,13 +114,11 @@
   // const, to make const blocks easier to use; a block being const
   // doesn't prevent modifying its list state.
   mutable const Block* _prev;
   mutable const Block* _next;
 
-  // Noncopyable.
-  AllocationListEntry(const AllocationListEntry&);
-  AllocationListEntry& operator=(const AllocationListEntry&);
+  NONCOPYABLE(AllocationListEntry);
 
 public:
   AllocationListEntry();
   ~AllocationListEntry();
 };
@@ -135,11 +131,11 @@
   // _data must be the first non-static data member, for alignment.
   oop _data[BitsPerWord];
   static const unsigned _data_pos = 0; // Position of _data.
 
   volatile uintx _allocated_bitmask; // One bit per _data element.
-  const OopStorage* _owner;
+  intptr_t _owner_address;
   void* _memory;              // Unaligned storage containing block.
   size_t _active_index;
   AllocationListEntry _allocation_list_entry;
   Block* volatile _deferred_updates_next;
   volatile uintx _release_refcount;
@@ -151,13 +147,11 @@
   unsigned get_index(const oop* ptr) const;
 
   template<typename F, typename BlockPtr>
   static bool iterate_impl(F f, BlockPtr b);
 
-  // Noncopyable.
-  Block(const Block&);
-  Block& operator=(const Block&);
+  NONCOPYABLE(Block);
 
 public:
   const AllocationListEntry& allocation_list_entry() const;
 
   static size_t allocation_size();
