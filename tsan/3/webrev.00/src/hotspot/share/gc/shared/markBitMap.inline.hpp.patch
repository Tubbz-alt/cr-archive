diff a/src/hotspot/share/gc/shared/markBitMap.inline.hpp b/src/hotspot/share/gc/shared/markBitMap.inline.hpp
--- a/src/hotspot/share/gc/shared/markBitMap.inline.hpp
+++ b/src/hotspot/share/gc/shared/markBitMap.inline.hpp
@@ -26,11 +26,10 @@
 #define SHARE_GC_SHARED_MARKBITMAP_INLINE_HPP
 
 #include "gc/shared/collectedHeap.hpp"
 #include "gc/shared/markBitMap.hpp"
 #include "memory/memRegion.hpp"
-#include "memory/universe.hpp"
 #include "utilities/align.hpp"
 #include "utilities/bitMap.inline.hpp"
 
 inline HeapWord* MarkBitMap::get_next_marked_addr(const HeapWord* addr,
                                                 const HeapWord* limit) const {
@@ -45,10 +44,14 @@
 inline void MarkBitMap::mark(HeapWord* addr) {
   check_mark(addr);
   _bm.set_bit(addr_to_offset(addr));
 }
 
+inline void MarkBitMap::mark(oop obj) {
+  return mark(cast_from_oop<HeapWord*>(obj));
+}
+
 inline void MarkBitMap::clear(HeapWord* addr) {
   check_mark(addr);
   _bm.clear_bit(addr_to_offset(addr));
 }
 
@@ -56,17 +59,17 @@
   check_mark(addr);
   return _bm.par_set_bit(addr_to_offset(addr));
 }
 
 inline bool MarkBitMap::par_mark(oop obj) {
-  return par_mark((HeapWord*) obj);
+  return par_mark(cast_from_oop<HeapWord*>(obj));
 }
 
 inline bool MarkBitMap::is_marked(oop obj) const{
-  return is_marked((HeapWord*) obj);
+  return is_marked(cast_from_oop<HeapWord*>(obj));
 }
 
 inline void MarkBitMap::clear(oop obj) {
-  clear((HeapWord*) obj);
+  clear(cast_from_oop<HeapWord*>(obj));
 }
 
 #endif // SHARE_GC_SHARED_MARKBITMAP_INLINE_HPP
