diff a/src/hotspot/share/libadt/dict.cpp b/src/hotspot/share/libadt/dict.cpp
--- a/src/hotspot/share/libadt/dict.cpp
+++ b/src/hotspot/share/libadt/dict.cpp
@@ -22,23 +22,28 @@
  *
  */
 
 #include "precompiled.hpp"
 #include "libadt/dict.hpp"
+#include "utilities/powerOfTwo.hpp"
 
 // Dictionaries - An Abstract Data Type
 
 // %%%%% includes not needed with AVM framework - Ungar
 
 #include <assert.h>
 
 //------------------------------data-----------------------------------------
 // String hash tables
 #define MAXID 20
-static uint8_t initflag = 0;       // True after 1st initialization
 static const char shft[MAXID] = {1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6};
-static short xsum[MAXID];
+// Precomputed table of null character hashes
+// xsum[0] = (1 << shft[0]) + 1;
+// for(int i = 1; i < MAXID; i++) {
+//   xsum[i] = (1 << shft[i]) + 1 + xsum[i - 1];
+// }
+static const short xsum[MAXID] = {3,8,17,34,67,132,261,264,269,278,295,328,393,522,525,530,539,556,589,654};
 
 //------------------------------bucket---------------------------------------
 class bucket : public ResourceObj {
 public:
   uint _cnt, _max;              // Size of bucket
@@ -54,43 +59,22 @@
 // doubled in size; the total amount of EXTRA times all hash functions are
 // computed for the doubling is no more than the current size - thus the
 // doubling in size costs no more than a constant factor in speed.
 Dict::Dict(CmpKey initcmp, Hash inithash) : _arena(Thread::current()->resource_area()),
   _hash(inithash), _cmp(initcmp) {
-  int i;
-
-  // Precompute table of null character hashes
-  if( !initflag ) {             // Not initializated yet?
-    xsum[0] = (1<<shft[0])+1;   // Initialize
-    for(i=1; i<MAXID; i++) {
-      xsum[i] = (1<<shft[i])+1+xsum[i-1];
-    }
-    initflag = 1;               // Never again
-  }
 
   _size = 16;                   // Size is a power of 2
   _cnt = 0;                     // Dictionary is empty
   _bin = (bucket*)_arena->Amalloc_4(sizeof(bucket)*_size);
   memset((void*)_bin,0,sizeof(bucket)*_size);
 }
 
 Dict::Dict(CmpKey initcmp, Hash inithash, Arena *arena, int size)
 : _arena(arena), _hash(inithash), _cmp(initcmp) {
-  int i;
-
-  // Precompute table of null character hashes
-  if( !initflag ) {             // Not initializated yet?
-    xsum[0] = (1<<shft[0])+1;   // Initialize
-    for(i=1; i<MAXID; i++) {
-      xsum[i] = (1<<shft[i])+1+xsum[i-1];
-    }
-    initflag = 1;               // Never again
-  }
+  // Size is a power of 2
+  _size = MAX2(16, round_up_power_of_2(size));
 
-  i=16;
-  while( i < size ) i <<= 1;
-  _size = i;                    // Size is a power of 2
   _cnt = 0;                     // Dictionary is empty
   _bin = (bucket*)_arena->Amalloc_4(sizeof(bucket)*_size);
   memset((void*)_bin,0,sizeof(bucket)*_size);
 }
 
@@ -308,14 +292,14 @@
   char c, k = 0;
   int32_t sum = 0;
   const char *s = (const char *)t;
 
   while( ((c = *s++) != '\0') && (k < MAXID-1) ) { // Get characters till null or MAXID-1
-    c = (c<<1)+1;               // Characters are always odd!
-    sum += c + (c<<shft[k++]);  // Universal hash function
+    c = (c << 1) + 1;             // Characters are always odd!
+    sum += c + (c << shft[k++]);  // Universal hash function
   }
-  return (int)((sum+xsum[k]) >> 1); // Hash key, un-modulo'd table size
+  return (int)((sum + xsum[k]) >> 1); // Hash key, un-modulo'd table size
 }
 
 //------------------------------hashptr--------------------------------------
 // Slimey cheap hash function; no guaranteed performance.  Better than the
 // default for pointers, especially on MS-DOS machines.
