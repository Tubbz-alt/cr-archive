diff a/src/hotspot/share/aot/aotLoader.hpp b/src/hotspot/share/aot/aotLoader.hpp
--- a/src/hotspot/share/aot/aotLoader.hpp
+++ b/src/hotspot/share/aot/aotLoader.hpp
@@ -52,20 +52,21 @@
   static int heaps_count();
   static int libraries_count();
   static void add_heap(AOTCodeHeap *heap);
   static void add_library(AOTLib *lib);
 #endif
-  static void initialize() NOT_AOT({ FLAG_SET_ERGO(bool, UseAOT, false); });
+  static void initialize() NOT_AOT({ FLAG_SET_ERGO(UseAOT, false); });
 
   static void universe_init() NOT_AOT_RETURN;
   static void set_narrow_oop_shift() NOT_AOT_RETURN;
   static void set_narrow_klass_shift() NOT_AOT_RETURN;
   static void load_for_klass(InstanceKlass* ik, Thread* thread) NOT_AOT_RETURN;
   static uint64_t get_saved_fingerprint(InstanceKlass* ik) NOT_AOT({ return 0; });
   static void oops_do(OopClosure* f) NOT_AOT_RETURN;
-  static void metadata_do(void f(Metadata*)) NOT_AOT_RETURN;
+  static void metadata_do(MetadataClosure* f) NOT_AOT_RETURN;
   static void mark_evol_dependent_methods(InstanceKlass* dependee) NOT_AOT_RETURN;
+  static void initialize_box_caches(TRAPS) NOT_AOT_RETURN;
 
   NOT_PRODUCT( static void print_statistics() NOT_AOT_RETURN; )
 
   static bool reconcile_dynamic_invoke(InstanceKlass* holder, int index, Method* adapter_method, Klass *appendix_klass) NOT_AOT({ return true; });
 };
