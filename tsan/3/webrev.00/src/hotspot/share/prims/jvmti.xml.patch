diff a/src/hotspot/share/prims/jvmti.xml b/src/hotspot/share/prims/jvmti.xml
--- a/src/hotspot/share/prims/jvmti.xml
+++ b/src/hotspot/share/prims/jvmti.xml
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="ISO-8859-1"?>
 <?xml-stylesheet type="text/xsl" href="jvmti.xsl"?>
 <!--
- Copyright (c) 2002, 2018, Oracle and/or its affiliates. All rights reserved.
+ Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 
  This code is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License version 2 only, as
  published by the Free Software Foundation.
@@ -22,22 +22,17 @@
  or visit www.oracle.com if you need additional information or have any
  questions.
 -->
 
 <!DOCTYPE specification [
-   <!ELEMENT specification (title, copyright, intro*, functionsection, errorsection,
+   <!ELEMENT specification (title, intro*, functionsection, errorsection,
                             eventsection, datasection, issuessection, changehistory)>
-   <!ATTLIST specification label CDATA #REQUIRED
-                           majorversion CDATA #REQUIRED
-                           minorversion CDATA #REQUIRED
-                           microversion CDATA #REQUIRED>
+   <!ATTLIST specification label CDATA #REQUIRED>
 
    <!ELEMENT title (#PCDATA|jvmti|tm)*>
    <!ATTLIST title subtitle CDATA #REQUIRED>
 
-   <!ELEMENT copyright ANY>
-
    <!ELEMENT intro ANY>
    <!ATTLIST intro id CDATA #IMPLIED
                    label CDATA "">
 
    <!ELEMENT functionsection (intro*, category*)>
@@ -52,11 +47,11 @@
                          (capabilities|eventcapabilities),
                          parameters, errors)>
    <!ATTLIST function id CDATA #REQUIRED
                       num CDATA #REQUIRED
                       phase (onload|onloadOnly|start|live|any) #IMPLIED
-		      callbacksafe (safe|unsafe) #IMPLIED
+                      callbacksafe (safe|unsafe) #IMPLIED
                       impl CDATA #IMPLIED
                       hide CDATA #IMPLIED
                       jkernel (yes|no) #IMPLIED
                       since CDATA "1.0">
 
@@ -344,35 +339,30 @@
    <!ELEMENT dt  (#PCDATA|jvmti|code|i|b)*>
 
    <!ELEMENT table  (tr)+>
 
    <!ELEMENT tr  (td|th)*>
+   <!ATTLIST tr class CDATA #IMPLIED>
 
    <!ELEMENT td  ANY>
    <!ATTLIST td class CDATA #IMPLIED>
 
    <!ELEMENT th  ANY>
-   <!ATTLIST th class CDATA #IMPLIED>
+   <!ATTLIST th class CDATA #IMPLIED
+                scope (col|row) #IMPLIED>
 
    <!ELEMENT ul  (li)+>
    <!ATTLIST ul type (disc|circle|square) "disc">
 
    <!ELEMENT li  ANY>
  ]>
 
-<specification label="JVM(TM) Tool Interface"
-        majorversion="11"
-        minorversion="0"
-        microversion="0">
+<specification label="JVM(TM) Tool Interface">
   <title subtitle="Version">
     <tm>JVM</tm> Tool Interface
   </title>
 
-  <copyright>
-    Copyright (c) 2002, 2018, Oracle and/or its affiliates. All rights reserved.
-  </copyright>
-
   <intro id="whatIs" label="What is the JVM Tool Interface?">
     The <tm>JVM</tm> Tool Interface (<jvmti/>)
     is a programming interface used by development and monitoring tools.
     It provides both a way to inspect the state and
     to control the execution of applications running in the
@@ -495,35 +485,35 @@
     the agent as well as an options
     string to be passed in at startup.
     <dl>
       <dt><code>-agentlib:</code><i>&lt;agent-lib-name&gt;</i><code>=</code><i>&lt;options&gt;</i></dt>
       <dd>
-	The name following <code>-agentlib:</code> is the name of the
-	library to load.  Lookup of the library, both its full name and location,
-	proceeds in a platform-specific manner.
-	Typically, the <i>&lt;agent-lib-name&gt;</i> is expanded to an
-	operating system specific file name.
-	The <i>&lt;options&gt;</i> will be passed to the agent on start-up.
-	For example, if the option
-	<code>-agentlib:foo=opt1,opt2</code> is specified, the VM will attempt to
-	load the shared library <code>foo.dll</code> from the system <code>PATH</code>
+        The name following <code>-agentlib:</code> is the name of the
+        library to load.  Lookup of the library, both its full name and location,
+        proceeds in a platform-specific manner.
+        Typically, the <i>&lt;agent-lib-name&gt;</i> is expanded to an
+        operating system specific file name.
+        The <i>&lt;options&gt;</i> will be passed to the agent on start-up.
+        For example, if the option
+        <code>-agentlib:foo=opt1,opt2</code> is specified, the VM will attempt to
+        load the shared library <code>foo.dll</code> from the system <code>PATH</code>
         under <tm>Windows</tm> or <code>libfoo.so</code> from the
-	<code>LD_LIBRARY_PATH</code> under the <tm>Solaris</tm> operating
+        <code>LD_LIBRARY_PATH</code> under the <tm>Solaris</tm> operating
         environment.
         If the agent library is statically linked into the executable
         then no actual loading takes place.
     <p/>
       </dd>
       <dt><code>-agentpath:</code><i>&lt;path-to-agent&gt;</i><code>=</code><i>&lt;options&gt;</i></dt>
       <dd>
-	The path following <code>-agentpath:</code> is the absolute path from which
-	to load the library.
-	No library name expansion will occur.
-	The <i>&lt;options&gt;</i> will be passed to the agent on start-up.
-	For example, if the option
-	<code>-agentpath:c:\myLibs\foo.dll=opt1,opt2</code> is specified, the VM will attempt to
-	load the shared library <code>c:\myLibs\foo.dll</code>. If the agent
+        The path following <code>-agentpath:</code> is the absolute path from which
+        to load the library.
+        No library name expansion will occur.
+        The <i>&lt;options&gt;</i> will be passed to the agent on start-up.
+        For example, if the option
+        <code>-agentpath:c:\myLibs\foo.dll=opt1,opt2</code> is specified, the VM will attempt to
+        load the shared library <code>c:\myLibs\foo.dll</code>. If the agent
         library is statically linked into the executable
         then no actual loading takes place.
     <p/>
       </dd>
     </dl>
@@ -582,16 +572,16 @@
 
     The VM will start the agent by calling this function.
     It will be called early enough in VM initialization that:
     <ul>
       <li><functionlink id="SetSystemProperty">system properties</functionlink>
-	may be set before they have been used in the start-up of the VM</li>
+        may be set before they have been used in the start-up of the VM</li>
       <li>the full set of
-	<internallink id="capability">capabilities</internallink>
-	is still available (note that capabilities that configure the VM
-	may only be available at this time--see the
-	<internallink id="capability">Capability function section</internallink>)</li>
+        <internallink id="capability">capabilities</internallink>
+        is still available (note that capabilities that configure the VM
+        may only be available at this time--see the
+        <internallink id="capability">Capability function section</internallink>)</li>
       <li>no bytecodes have executed</li>
       <li>no classes have been loaded</li>
       <li>no objects have been created</li>
     </ul>
     <p/>
@@ -803,33 +793,33 @@
     counters or can statistically sample events.
     <p/>
     Instrumentation can be inserted in one of three ways:
     <ul>
       <li>
-	Static Instrumentation: The class file is instrumented before it
-	is loaded into the VM - for example, by creating a duplicate directory of
-	<code>*.class</code> files which have been modified to add the instrumentation.
-	This method is extremely awkward and, in general, an agent cannot know
-	the origin of the class files which will be loaded.
+        Static Instrumentation: The class file is instrumented before it
+        is loaded into the VM - for example, by creating a duplicate directory of
+        <code>*.class</code> files which have been modified to add the instrumentation.
+        This method is extremely awkward and, in general, an agent cannot know
+        the origin of the class files which will be loaded.
       </li>
       <li>
-	Load-Time Instrumentation: When a class file is loaded by the VM, the raw
-	bytes of the class file are sent for instrumentation to the agent.
-	The <eventlink id="ClassFileLoadHook"/>
-	event, triggered by the class load,
-	provides this functionality.  This mechanism provides efficient
-	and complete access to one-time instrumentation.
+        Load-Time Instrumentation: When a class file is loaded by the VM, the raw
+        bytes of the class file are sent for instrumentation to the agent.
+        The <eventlink id="ClassFileLoadHook"/>
+        event, triggered by the class load,
+        provides this functionality.  This mechanism provides efficient
+        and complete access to one-time instrumentation.
       </li>
       <li>
-	Dynamic Instrumentation: A class which is already loaded (and possibly
-	even running) is modified.  This optional feature is provided by the
-	<eventlink id="ClassFileLoadHook"/> event, triggered by calling the
-	<functionlink id="RetransformClasses"/> function.
-	Classes can be modified multiple times and can be returned to their
-	original state.
-	The mechanism allows instrumentation which changes during the
-	course of execution.
+        Dynamic Instrumentation: A class which is already loaded (and possibly
+        even running) is modified.  This optional feature is provided by the
+        <eventlink id="ClassFileLoadHook"/> event, triggered by calling the
+        <functionlink id="RetransformClasses"/> function.
+        Classes can be modified multiple times and can be returned to their
+        original state.
+        The mechanism allows instrumentation which changes during the
+        course of execution.
       </li>
     </ul>
     <p/>
     The class modification functionality provided in this interface
     is intended to provide a mechanism for instrumentation
@@ -1066,71 +1056,71 @@
     </intro>
 
     <function id="Allocate" jkernel="yes" phase="any" callbacksafe="safe" impl="notrace" num="46">
       <synopsis>Allocate</synopsis>
       <description>
-	Allocate an area of memory through the <jvmti/> allocator.
+        Allocate an area of memory through the <jvmti/> allocator.
         The allocated
-	memory should be freed with <functionlink id="Deallocate"></functionlink>.
+        memory should be freed with <functionlink id="Deallocate"></functionlink>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="size">
-	  <jlong/>
-	  <description>
-	    The number of bytes to allocate.
-	    <rationale>
-	      <code>jlong</code> is used for compatibility with JVMDI.
-	    </rationale>
-	  </description>
-	</param>
-	<param id="mem_ptr">
-	  <allocbuf incount="size"><uchar/></allocbuf>
-	  <description>
-	    On return, a pointer to the beginning of the allocated memory.
+        <param id="size">
+          <jlong/>
+          <description>
+            The number of bytes to allocate.
+            <rationale>
+              <code>jlong</code> is used for compatibility with JVMDI.
+            </rationale>
+          </description>
+        </param>
+        <param id="mem_ptr">
+          <allocbuf incount="size"><uchar/></allocbuf>
+          <description>
+            On return, a pointer to the beginning of the allocated memory.
             If <code>size</code> is zero, <code>NULL</code> is returned.
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_OUT_OF_MEMORY">
-	  Memory request cannot be honored.
-	</error>
-	<error id="JVMTI_ERROR_ILLEGAL_ARGUMENT">
-	  <paramlink id="size"></paramlink> is less than zero.
-	</error>
+        <error id="JVMTI_ERROR_OUT_OF_MEMORY">
+          Memory request cannot be honored.
+        </error>
+        <error id="JVMTI_ERROR_ILLEGAL_ARGUMENT">
+          <paramlink id="size"></paramlink> is less than zero.
+        </error>
       </errors>
     </function>
 
     <function id="Deallocate" jkernel="yes" phase="any" callbacksafe="safe" impl="notrace" num="47">
       <synopsis>Deallocate</synopsis>
       <description>
-	Deallocate <code>mem</code>  using the <jvmti/> allocator.
+        Deallocate <code>mem</code>  using the <jvmti/> allocator.
         This function should
-	be used to deallocate any memory allocated and returned
+        be used to deallocate any memory allocated and returned
         by a <jvmti/> function
-	(including memory allocated with <functionlink id="Allocate"></functionlink>).
+        (including memory allocated with <functionlink id="Allocate"></functionlink>).
         All allocated memory must be deallocated
         or the memory cannot be reclaimed.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="mem">
-	  <outbuf>
+        <param id="mem">
+          <outbuf>
             <uchar/>
-	    <nullok>the call is ignored</nullok>
+            <nullok>the call is ignored</nullok>
           </outbuf>
-	  <description>
-	    A pointer to the beginning of the allocated memory.
+          <description>
+            A pointer to the beginning of the allocated memory.
             Please ignore "On return, the elements are set."
               <todo>keep it from generating "On return, the elements are set"</todo>
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
   </category>
@@ -1217,110 +1207,110 @@
                 </li>
               </ul>
             </li>
           </ul>
         <p/>
-	The answers are represented by the following bit vector.
-	<constants id="jvmtiThreadState" label="Thread State Flags" kind="bits">
-	  <constant id="JVMTI_THREAD_STATE_ALIVE" num="0x0001">
-	    Thread is alive. Zero if thread is new (not started) or terminated.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_TERMINATED" num="0x0002">
-	    Thread has completed execution.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_RUNNABLE" num="0x0004">
-	    Thread is runnable.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER" num="0x0400">
-	    Thread is waiting to enter a synchronization block/method or,
+        The answers are represented by the following bit vector.
+        <constants id="jvmtiThreadState" label="Thread State Flags" kind="bits">
+          <constant id="JVMTI_THREAD_STATE_ALIVE" num="0x0001">
+            Thread is alive. Zero if thread is new (not started) or terminated.
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_TERMINATED" num="0x0002">
+            Thread has completed execution.
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_RUNNABLE" num="0x0004">
+            Thread is runnable.
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER" num="0x0400">
+            Thread is waiting to enter a synchronization block/method or,
             after an <code>Object.wait()</code>, waiting to re-enter a
             synchronization block/method.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_WAITING" num="0x0080">
-	    Thread is waiting.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_WAITING_INDEFINITELY" num="0x0010">
-	    Thread is waiting without a timeout.
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_WAITING" num="0x0080">
+            Thread is waiting.
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_WAITING_INDEFINITELY" num="0x0010">
+            Thread is waiting without a timeout.
             For example, <code>Object.wait()</code>.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT" num="0x0020">
-	    Thread is waiting with a maximum time to wait specified.
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT" num="0x0020">
+            Thread is waiting with a maximum time to wait specified.
             For example, <code>Object.wait(long)</code>.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_SLEEPING" num="0x0040">
-	    Thread is sleeping -- <code>Thread.sleep(long)</code>.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_IN_OBJECT_WAIT" num="0x0100">
-	    Thread is waiting on an object monitor -- <code>Object.wait</code>.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_PARKED" num="0x0200">
-	    Thread is parked, for example: <code>LockSupport.park</code>,
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_SLEEPING" num="0x0040">
+            Thread is sleeping -- <code>Thread.sleep(long)</code>.
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_IN_OBJECT_WAIT" num="0x0100">
+            Thread is waiting on an object monitor -- <code>Object.wait</code>.
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_PARKED" num="0x0200">
+            Thread is parked, for example: <code>LockSupport.park</code>,
             <code>LockSupport.parkUtil</code> and <code>LockSupport.parkNanos</code>.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_SUSPENDED" num="0x100000">
-	    Thread suspended.
-	    <code>java.lang.Thread.suspend()</code>
-	    or a <jvmti/> suspend function
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_SUSPENDED" num="0x100000">
+            Thread suspended.
+            <code>java.lang.Thread.suspend()</code>
+            or a <jvmti/> suspend function
             (such as <functionlink id="SuspendThread"></functionlink>)
             has been called on the thread. If this bit
-	    is set, the other bits refer to the thread state before suspension.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_INTERRUPTED" num="0x200000">
-	    Thread has been interrupted.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_IN_NATIVE" num="0x400000">
+            is set, the other bits refer to the thread state before suspension.
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_INTERRUPTED" num="0x200000">
+            Thread has been interrupted.
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_IN_NATIVE" num="0x400000">
             Thread is in native code--that is, a native method is running
             which has not called back into the VM or Java programming
             language code.
             <p/>
             This flag is not set when running VM compiled Java programming
             language code nor is it set when running VM code or
             VM support code. Native VM interface functions, such as JNI and
             <jvmti/> functions, may be implemented as VM code.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_VENDOR_1" num="0x10000000">
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_VENDOR_1" num="0x10000000">
             Defined by VM vendor.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_VENDOR_2" num="0x20000000">
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_VENDOR_2" num="0x20000000">
             Defined by VM vendor.
-	  </constant>
-	  <constant id="JVMTI_THREAD_STATE_VENDOR_3" num="0x40000000">
+          </constant>
+          <constant id="JVMTI_THREAD_STATE_VENDOR_3" num="0x40000000">
             Defined by VM vendor.
-	  </constant>
-	</constants>
+          </constant>
+        </constants>
         The following definitions are used to convert <jvmti/> thread state
         to <code>java.lang.Thread.State</code> style states.
-	<constants id="jvmtiJavaLangThreadState" label="java.lang.Thread.State Conversion Masks" kind="bits">
-	  <constant id="JVMTI_JAVA_LANG_THREAD_STATE_MASK"
+        <constants id="jvmtiJavaLangThreadState" label="java.lang.Thread.State Conversion Masks" kind="bits">
+          <constant id="JVMTI_JAVA_LANG_THREAD_STATE_MASK"
                      num="JVMTI_THREAD_STATE_TERMINATED | JVMTI_THREAD_STATE_ALIVE | JVMTI_THREAD_STATE_RUNNABLE | JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER | JVMTI_THREAD_STATE_WAITING | JVMTI_THREAD_STATE_WAITING_INDEFINITELY | JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT">
-	    Mask the state with this before comparison
-	  </constant>
-	  <constant id="JVMTI_JAVA_LANG_THREAD_STATE_NEW"
+            Mask the state with this before comparison
+          </constant>
+          <constant id="JVMTI_JAVA_LANG_THREAD_STATE_NEW"
                      num="0">
-	    <code>java.lang.Thread.State.NEW</code>
-	  </constant>
-	  <constant id="JVMTI_JAVA_LANG_THREAD_STATE_TERMINATED"
+            <code>java.lang.Thread.State.NEW</code>
+          </constant>
+          <constant id="JVMTI_JAVA_LANG_THREAD_STATE_TERMINATED"
                      num="JVMTI_THREAD_STATE_TERMINATED">
-	    <code>java.lang.Thread.State.TERMINATED</code>
-	  </constant>
-	  <constant id="JVMTI_JAVA_LANG_THREAD_STATE_RUNNABLE"
+            <code>java.lang.Thread.State.TERMINATED</code>
+          </constant>
+          <constant id="JVMTI_JAVA_LANG_THREAD_STATE_RUNNABLE"
                      num="JVMTI_THREAD_STATE_ALIVE | JVMTI_THREAD_STATE_RUNNABLE">
-	    <code>java.lang.Thread.State.RUNNABLE</code>
-	  </constant>
-	  <constant id="JVMTI_JAVA_LANG_THREAD_STATE_BLOCKED"
+            <code>java.lang.Thread.State.RUNNABLE</code>
+          </constant>
+          <constant id="JVMTI_JAVA_LANG_THREAD_STATE_BLOCKED"
                      num="JVMTI_THREAD_STATE_ALIVE | JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER">
-	    <code>java.lang.Thread.State.BLOCKED</code>
-	  </constant>
-	  <constant id="JVMTI_JAVA_LANG_THREAD_STATE_WAITING"
+            <code>java.lang.Thread.State.BLOCKED</code>
+          </constant>
+          <constant id="JVMTI_JAVA_LANG_THREAD_STATE_WAITING"
                      num="JVMTI_THREAD_STATE_ALIVE | JVMTI_THREAD_STATE_WAITING | JVMTI_THREAD_STATE_WAITING_INDEFINITELY">
-	    <code>java.lang.Thread.State.WAITING</code>
-	  </constant>
-	  <constant id="JVMTI_JAVA_LANG_THREAD_STATE_TIMED_WAITING"
+            <code>java.lang.Thread.State.WAITING</code>
+          </constant>
+          <constant id="JVMTI_JAVA_LANG_THREAD_STATE_TIMED_WAITING"
                      num="JVMTI_THREAD_STATE_ALIVE | JVMTI_THREAD_STATE_WAITING | JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT">
-	    <code>java.lang.Thread.State.TIMED_WAITING</code>
-	  </constant>
-	</constants>
+            <code>java.lang.Thread.State.TIMED_WAITING</code>
+          </constant>
+        </constants>
         <b>Rules</b>
         <p/>
         There can be no more than one answer to a question, although there can be no
         answer (because the answer is unknown, does not apply, or none of the answers is
         correct).  An answer is set only when the enclosing answers match.
@@ -1411,30 +1401,30 @@
         <b>Testing the State</b>
         <p/>
         In most cases, the thread state can be determined by testing the one bit corresponding
         to that question.  For example, the code to test if a thread is sleeping:
         <example>
-	jint state;
-	jvmtiError err;
+        jint state;
+        jvmtiError err;
 
-	err = (*jvmti)-&gt;GetThreadState(jvmti, thread, &amp;state);
-	if (err == JVMTI_ERROR_NONE) {
-	   if (state &amp; JVMTI_THREAD_STATE_SLEEPING) {  ...
+        err = (*jvmti)-&gt;GetThreadState(jvmti, thread, &amp;state);
+        if (err == JVMTI_ERROR_NONE) {
+           if (state &amp; JVMTI_THREAD_STATE_SLEEPING) {  ...
         </example>
         <p/>
         For waiting (that is, in <code>Object.wait</code>, parked, or sleeping) it would be:
         <example>
-	   if (state &amp; JVMTI_THREAD_STATE_WAITING) {  ...
+           if (state &amp; JVMTI_THREAD_STATE_WAITING) {  ...
         </example>
         For some states, more than one bit will need to be tested as is the case
         when testing if a thread has not yet been started:
         <example>
-	   if ((state &amp; (JVMTI_THREAD_STATE_ALIVE | JVMTI_THREAD_STATE_TERMINATED)) == 0)  {  ...
+           if ((state &amp; (JVMTI_THREAD_STATE_ALIVE | JVMTI_THREAD_STATE_TERMINATED)) == 0)  {  ...
         </example>
         To distinguish timed from untimed <code>Object.wait</code>:
         <example>
-	   if (state &amp; JVMTI_THREAD_STATE_IN_OBJECT_WAIT)  {
+           if (state &amp; JVMTI_THREAD_STATE_IN_OBJECT_WAIT)  {
              if (state &amp; JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT)  {
                printf("in Object.wait(long timeout)\n");
              } else {
                printf("in Object.wait()\n");
              }
@@ -1448,12 +1438,12 @@
         information returned from this function.
         The corresponding <code>java.lang.Thread.State</code> can be determined
         by using the provided conversion masks.
         For example, this returns the name of the <code>java.lang.Thread.State</code> thread state:
         <example>
-	    err = (*jvmti)-&gt;GetThreadState(jvmti, thread, &amp;state);
-	    abortOnError(err);
+            err = (*jvmti)-&gt;GetThreadState(jvmti, thread, &amp;state);
+            abortOnError(err);
             switch (state &amp; JVMTI_JAVA_LANG_THREAD_STATE_MASK) {
             case JVMTI_JAVA_LANG_THREAD_STATE_NEW:
               return "NEW";
             case JVMTI_JAVA_LANG_THREAD_STATE_TERMINATED:
               return "TERMINATED";
@@ -1470,23 +1460,23 @@
       </description>
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread null="current" started="maybe" impl="noconvert"/>
-	    <description>
-	      The thread to query.
-	    </description>
-	</param>
-	<param id="thread_state_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to state flags,
-	    as defined by the <internallink id="jvmtiThreadState">Thread State Flags</internallink>.
-	  </description>
-	</param>
+        <param id="thread">
+          <jthread null="current" started="maybe" impl="noconvert"/>
+            <description>
+              The thread to query.
+            </description>
+        </param>
+        <param id="thread_state_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to state flags,
+            as defined by the <internallink id="jvmtiThreadState">Thread State Flags</internallink>.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -1507,15 +1497,15 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="thread_ptr">
-	  <outptr><jthread/></outptr>
-	  <description>
-	     On return, points to the current thread, or <code>NULL</code>.
-	  </description>
-	</param>
+          <outptr><jthread/></outptr>
+          <description>
+             On return, points to the current thread, or <code>NULL</code>.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -1536,22 +1526,22 @@
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="threads_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of running threads.
-	  </description>
-	</param>
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of running threads.
+          </description>
+        </param>
         <param id="threads_ptr">
-	  <allocbuf outcount="threads_count_ptr"><jthread/></allocbuf>
-	    <description>
-	      On return, points to an array of references, one
-	      for each running thread.
-	    </description>
-	</param>
+          <allocbuf outcount="threads_count_ptr"><jthread/></allocbuf>
+            <description>
+              On return, points to an array of references, one
+              for each running thread.
+            </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -1568,15 +1558,15 @@
       <capabilities>
         <required id="can_suspend"></required>
       </capabilities>
       <parameters>
         <param id="thread">
-	  <jthread null="current"/>
-	    <description>
-	      The thread to suspend.
-	    </description>
-	</param>
+          <jthread null="current"/>
+            <description>
+              The thread to suspend.
+            </description>
+        </param>
       </parameters>
       <errors>
         <error id="JVMTI_ERROR_THREAD_SUSPENDED">
           Thread already suspended.
         </error>
@@ -1585,13 +1575,13 @@
 
     <elide>
     <function id="SuspendAllThreads" num="101">
       <synopsis>Suspend All Threads</synopsis>
       <description>
-	<issue>
-	    There has been no explicit call for this function, and it will
-	    thus be removed if there is no interest.
+        <issue>
+            There has been no explicit call for this function, and it will
+            thus be removed if there is no interest.
         </issue>
         Suspend all live threads except:
         <ul>
           <li>already suspended threads</li>
           <li>those listed in <paramlink id="except_list"></paramlink></li>
@@ -1606,11 +1596,11 @@
         been started and has not yet died.
         The universe of threads is determined
         by the context of the <jvmti/>
         environment, which, typically, is all threads attached to the VM,
         except critical VM internal threads and <jvmti/> agent threads
-	(see <functionlink id="RunAgentThread"/>).
+        (see <functionlink id="RunAgentThread"/>).
         <p/>
         If the calling thread is specified,
         all other threads are suspended first then the caller thread is suspended -
         this function will not return until some other thread calls
         <functionlink id="ResumeThread"></functionlink>.
@@ -1626,37 +1616,37 @@
       <capabilities>
         <required id="can_suspend"></required>
       </capabilities>
       <parameters>
         <param id="except_count">
-	  <jint min="0"/>
-	  <description>
-	    The number of threads in the list of threads not to be suspended.
-	  </description>
-	</param>
+          <jint min="0"/>
+          <description>
+            The number of threads in the list of threads not to be suspended.
+          </description>
+        </param>
         <param id="except_list">
             <inbuf incount="except_count">
               <jthread/>
               <nullok>not an error if <code>except_count == 0</code></nullok>
             </inbuf>
-	    <description>
-	      The list of threads not to be suspended.
-	    </description>
-	</param>
+            <description>
+              The list of threads not to be suspended.
+            </description>
+        </param>
         <param id="suspended_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of threads suspended by this call.
-	  </description>
-	</param>
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of threads suspended by this call.
+          </description>
+        </param>
         <param id="suspended_list_ptr">
-	  <allocbuf outcount="suspended_count_ptr"><jthread/></allocbuf>
-	    <description>
-	      On return, points to an array of references, one
-	      for each thread suspended.
-	    </description>
-	</param>
+          <allocbuf outcount="suspended_count_ptr"><jthread/></allocbuf>
+            <description>
+              On return, points to an array of references, one
+              for each thread suspended.
+            </description>
+        </param>
       </parameters>
       <errors>
         <error id="JVMTI_ERROR_INVALID_THREAD">
           A thread in <paramlink id="except_list"></paramlink> was invalid.
         </error>
@@ -1689,35 +1679,35 @@
       <capabilities>
         <required id="can_suspend"></required>
       </capabilities>
       <parameters>
         <param id="request_count">
-	  <jint min="0"/>
-	  <description>
-	    The number of threads to suspend.
-	  </description>
-	</param>
+          <jint min="0"/>
+          <description>
+            The number of threads to suspend.
+          </description>
+        </param>
         <param id="request_list">
-	  <inbuf incount="request_count"><jthread/></inbuf>
-	    <description>
-	      The list of threads to suspend.
-	    </description>
-	</param>
+          <inbuf incount="request_count"><jthread/></inbuf>
+            <description>
+              The list of threads to suspend.
+            </description>
+        </param>
         <param id="results">
-	  <outbuf incount="request_count"><enum>jvmtiError</enum></outbuf>
-	  <description>
-	    An agent supplied array of
-	    <paramlink id="request_count"></paramlink> elements.
-	    On return, filled with the error code for
-	    the suspend of the corresponding thread.
-	    The error code will be
-	    <errorlink id="JVMTI_ERROR_NONE"></errorlink>
-	    if the thread was suspended by this call.
-	    Possible error codes are those specified
-	    for <functionlink id="SuspendThread"></functionlink>.
-	  </description>
-	</param>
+          <outbuf incount="request_count"><enum>jvmtiError</enum></outbuf>
+          <description>
+            An agent supplied array of
+            <paramlink id="request_count"></paramlink> elements.
+            On return, filled with the error code for
+            the suspend of the corresponding thread.
+            The error code will be
+            <errorlink id="JVMTI_ERROR_NONE"></errorlink>
+            if the thread was suspended by this call.
+            Possible error codes are those specified
+            for <functionlink id="SuspendThread"></functionlink>.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -1728,23 +1718,23 @@
         Any threads currently suspended through
         a <jvmti/> suspend function (eg.
         <functionlink id="SuspendThread"></functionlink>)
         or <code>java.lang.Thread.suspend()</code>
         will resume execution;
-	all other threads are unaffected.
+        all other threads are unaffected.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
         <required id="can_suspend"></required>
       </capabilities>
       <parameters>
         <param id="thread">
-	  <jthread/>
-	    <description>
-	      The thread to resume.
-	    </description>
-	</param>
+          <jthread/>
+            <description>
+              The thread to resume.
+            </description>
+        </param>
       </parameters>
       <errors>
         <error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
           Thread was not suspended.
         </error>
@@ -1770,268 +1760,268 @@
       <capabilities>
         <required id="can_suspend"></required>
       </capabilities>
       <parameters>
         <param id="request_count">
-	  <jint min="0"/>
-	  <description>
-	    The number of threads to resume.
-	  </description>
-	</param>
+          <jint min="0"/>
+          <description>
+            The number of threads to resume.
+          </description>
+        </param>
         <param id="request_list">
-	  <inbuf incount="request_count"><jthread/></inbuf>
-	    <description>
-	      The threads to resume.
-	    </description>
-	</param>
+          <inbuf incount="request_count"><jthread/></inbuf>
+            <description>
+              The threads to resume.
+            </description>
+        </param>
         <param id="results">
-	  <outbuf incount="request_count"><enum>jvmtiError</enum></outbuf>
-	  <description>
-	    An agent supplied array of
-	    <paramlink id="request_count"></paramlink> elements.
-	    On return, filled with the error code for
-	    the resume of the corresponding thread.
-	    The error code will be
-	    <errorlink id="JVMTI_ERROR_NONE"></errorlink>
-	    if the thread was suspended by this call.
-	    Possible error codes are those specified
-	    for <functionlink id="ResumeThread"></functionlink>.
-	  </description>
-	</param>
+          <outbuf incount="request_count"><enum>jvmtiError</enum></outbuf>
+          <description>
+            An agent supplied array of
+            <paramlink id="request_count"></paramlink> elements.
+            On return, filled with the error code for
+            the resume of the corresponding thread.
+            The error code will be
+            <errorlink id="JVMTI_ERROR_NONE"></errorlink>
+            if the thread was suspended by this call.
+            Possible error codes are those specified
+            for <functionlink id="ResumeThread"></functionlink>.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="StopThread" num="7">
       <synopsis>Stop Thread</synopsis>
       <description>
-	Send the specified asynchronous exception to the specified thread.
-	Normally, this function is used to kill the specified thread with an
-	instance of the exception <code>ThreadDeath</code>, similar to
+        Send the specified asynchronous exception to the specified thread.
+        Normally, this function is used to kill the specified thread with an
+        instance of the exception <code>ThreadDeath</code>, similar to
         <code>java.lang.Thread.stop</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_signal_thread"></required>
+        <required id="can_signal_thread"></required>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread/>
-	    <description>
-	      The thread to stop.
-	    </description>
-	</param>
-	<param id="exception">
-	  <jobject/>
-	    <description>
-	      The asynchronous exception object.
-	    </description>
-	</param>
+        <param id="thread">
+          <jthread/>
+            <description>
+              The thread to stop.
+            </description>
+        </param>
+        <param id="exception">
+          <jobject/>
+            <description>
+              The asynchronous exception object.
+            </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="InterruptThread" num="8">
       <synopsis>Interrupt Thread</synopsis>
       <description>
-	Interrupt the specified thread
-	(similar to <code>java.lang.Thread.interrupt</code>).
+        Interrupt the specified thread
+        (similar to <code>java.lang.Thread.interrupt</code>).
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_signal_thread"></required>
+        <required id="can_signal_thread"></required>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread impl="noconvert"/>
-	    <description>
-	      The thread to interrupt.
-	    </description>
-	</param>
+        <param id="thread">
+          <jthread impl="noconvert"/>
+            <description>
+              The thread to interrupt.
+            </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetThreadInfo" num="9">
       <synopsis>Get Thread Info</synopsis>
       <typedef id="jvmtiThreadInfo" label="Thread information structure">
-	<field id="name">
-	  <allocfieldbuf><char/></allocfieldbuf>
-	  <description>
-	    The thread name, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</field>
-	<field id="priority">
-	  <jint/>
-	  <description>
-	    The thread priority.  See the thread priority constants:
-	    <datalink id="jvmtiThreadPriority"></datalink>.
-	  </description>
-	</field>
-	<field id="is_daemon">
-	  <jboolean/>
-	  <description>
-	    Is this a daemon thread?
-	  </description>
-	</field>
-	<field id="thread_group">
-	  <jthreadGroup/>
-	  <description>
-	    The thread group to which this thread belongs.
+        <field id="name">
+          <allocfieldbuf><char/></allocfieldbuf>
+          <description>
+            The thread name, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </field>
+        <field id="priority">
+          <jint/>
+          <description>
+            The thread priority.  See the thread priority constants:
+            <datalink id="jvmtiThreadPriority"></datalink>.
+          </description>
+        </field>
+        <field id="is_daemon">
+          <jboolean/>
+          <description>
+            Is this a daemon thread?
+          </description>
+        </field>
+        <field id="thread_group">
+          <jthreadGroup/>
+          <description>
+            The thread group to which this thread belongs.
             <code>NULL</code> if the thread has died.
-	  </description>
-	</field>
-	<field id="context_class_loader">
-	  <jobject/>
-	    <description>
-	      The context class loader associated with this thread.
-	    </description>
-	</field>
+          </description>
+        </field>
+        <field id="context_class_loader">
+          <jobject/>
+            <description>
+              The context class loader associated with this thread.
+            </description>
+        </field>
       </typedef>
       <description>
-	Get thread information. The fields of the <datalink id="jvmtiThreadInfo"/> structure
-	are filled in with details of the specified thread.
+        Get thread information. The fields of the <datalink id="jvmtiThreadInfo"/> structure
+        are filled in with details of the specified thread.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread null="current" impl="noconvert" started="maybe"/>
-	    <description>
-	      The thread to query.
-	    </description>
-	</param>
-	<param id="info_ptr">
-	  <outptr><struct>jvmtiThreadInfo</struct></outptr>
-	  <description>
-	    On return, filled with information describing the specified thread.
-	  </description>
-	</param>
+        <param id="thread">
+          <jthread null="current" impl="noconvert" started="maybe"/>
+            <description>
+              The thread to query.
+            </description>
+        </param>
+        <param id="info_ptr">
+          <outptr><struct>jvmtiThreadInfo</struct></outptr>
+          <description>
+            On return, filled with information describing the specified thread.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetOwnedMonitorInfo" num="10">
       <synopsis>Get Owned Monitor Info</synopsis>
       <description>
-	Get information about the monitors owned by the
-	specified thread.
+        Get information about the monitors owned by the
+        specified thread.
       </description>
       <origin>jvmdiClone</origin>
       <capabilities>
-	<required id="can_get_owned_monitor_info"></required>
+        <required id="can_get_owned_monitor_info"></required>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread null="current"/>
-	    <description>
-	      The thread to query.
-	    </description>
-	</param>
-	<param id="owned_monitor_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    The number of monitors returned.
-	  </description>
-	</param>
-	<param id="owned_monitors_ptr">
-	  <allocbuf outcount="owned_monitor_count_ptr"><jobject/></allocbuf>
-	    <description>
-	      The array of owned monitors.
-	    </description>
-	</param>
+        <param id="thread">
+          <jthread null="current"/>
+            <description>
+              The thread to query.
+            </description>
+        </param>
+        <param id="owned_monitor_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            The number of monitors returned.
+          </description>
+        </param>
+        <param id="owned_monitors_ptr">
+          <allocbuf outcount="owned_monitor_count_ptr"><jobject/></allocbuf>
+            <description>
+              The array of owned monitors.
+            </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetOwnedMonitorStackDepthInfo" num="153" since="1.1">
       <synopsis>Get Owned Monitor Stack Depth Info</synopsis>
       <typedef id="jvmtiMonitorStackDepthInfo"
                label="Monitor stack depth information structure">
         <field id="monitor">
-	  <jobject/>
-	    <description>
-	      The owned monitor.
-	    </description>
-	</field>
+          <jobject/>
+            <description>
+              The owned monitor.
+            </description>
+        </field>
         <field id="stack_depth">
-	  <jint/>
-	  <description>
-	    The stack depth.  Corresponds to the stack depth used in the
+          <jint/>
+          <description>
+            The stack depth.  Corresponds to the stack depth used in the
             <internallink id="stack">Stack Frame functions</internallink>.
             That is, zero is the current frame, one is the frame which
             called the current frame. And it is negative one if the
-	    implementation cannot determine the stack depth (e.g., for
-	    monitors acquired by JNI <code>MonitorEnter</code>).
-	  </description>
-	</field>
+            implementation cannot determine the stack depth (e.g., for
+            monitors acquired by JNI <code>MonitorEnter</code>).
+          </description>
+        </field>
       </typedef>
       <description>
-	Get information about the monitors owned by the
-	specified thread and the depth of the stack frame which locked them.
+        Get information about the monitors owned by the
+        specified thread and the depth of the stack frame which locked them.
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_get_owned_monitor_stack_depth_info"></required>
-      </capabilities>
-      <parameters>
-	<param id="thread">
-	  <jthread null="current"/>
-	    <description>
-	      The thread to query.
-	    </description>
-	</param>
-	<param id="monitor_info_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    The number of monitors returned.
-	  </description>
-	</param>
-	<param id="monitor_info_ptr">
-	  <allocbuf outcount="monitor_info_count_ptr">
+        <required id="can_get_owned_monitor_stack_depth_info"></required>
+      </capabilities>
+      <parameters>
+        <param id="thread">
+          <jthread null="current"/>
+            <description>
+              The thread to query.
+            </description>
+        </param>
+        <param id="monitor_info_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            The number of monitors returned.
+          </description>
+        </param>
+        <param id="monitor_info_ptr">
+          <allocbuf outcount="monitor_info_count_ptr">
             <struct>jvmtiMonitorStackDepthInfo</struct>
           </allocbuf>
-	  <description>
-	    The array of owned monitor depth information.
-	  </description>
-	</param>
+          <description>
+            The array of owned monitor depth information.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetCurrentContendedMonitor" num="11">
       <synopsis>Get Current Contended Monitor</synopsis>
       <description>
-	Get the object, if any, whose monitor the specified thread is waiting to
-	enter or waiting to regain through <code>java.lang.Object.wait</code>.
+        Get the object, if any, whose monitor the specified thread is waiting to
+        enter or waiting to regain through <code>java.lang.Object.wait</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_get_current_contended_monitor"></required>
+        <required id="can_get_current_contended_monitor"></required>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread null="current"/>
-	    <description>
-	      The thread to query.
-	    </description>
-	</param>
-	<param id="monitor_ptr">
-	  <outptr><jobject/></outptr>
-	    <description>
-	      On return, filled with the current contended monitor, or
-	      NULL if there is none.
-	    </description>
-	</param>
+        <param id="thread">
+          <jthread null="current"/>
+            <description>
+              The thread to query.
+            </description>
+        </param>
+        <param id="monitor_ptr">
+          <outptr><jobject/></outptr>
+            <description>
+              On return, filled with the current contended monitor, or
+              NULL if there is none.
+            </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -2039,22 +2029,22 @@
       <void/>
       <synopsis>Agent Start Function</synopsis>
       <description>
         Agent supplied callback function.
         This function is the entry point for an agent thread
-	started with
-	<functionlink id="RunAgentThread"></functionlink>.
-      </description>
-      <parameters>
-	  <param id="jvmti_env">
-	    <outptr>
-	      <struct>jvmtiEnv</struct>
-	    </outptr>
-	    <description>
-	      The <jvmti/> environment.
-	    </description>
-	  </param>
+        started with
+        <functionlink id="RunAgentThread"></functionlink>.
+      </description>
+      <parameters>
+          <param id="jvmti_env">
+            <outptr>
+              <struct>jvmtiEnv</struct>
+            </outptr>
+            <description>
+              The <jvmti/> environment.
+            </description>
+          </param>
           <param id="jni_env">
             <outptr>
               <struct>JNIEnv</struct>
             </outptr>
             <description>
@@ -2074,139 +2064,139 @@
     </callback>
 
     <function id="RunAgentThread" num="12">
       <synopsis>Run Agent Thread</synopsis>
       <description>
-	Starts the execution of an agent thread. with the specified native function.
-	The parameter <paramlink id="arg"></paramlink> is forwarded on to the
-	<functionlink id="jvmtiStartFunction">start function</functionlink>
-	(specified with <paramlink id="proc"></paramlink>) as its single argument.
-	This function allows the creation of agent threads
-	for handling communication with another process or for handling events
-	without the need to load a special subclass of <code>java.lang.Thread</code> or
-	implementer of <code>java.lang.Runnable</code>.
-	Instead, the created thread can run entirely in native code.
-	However, the created thread does require a newly created instance
-	of <code>java.lang.Thread</code> (referenced by the argument <code>thread</code>) to
-	which it will be associated.
-	The thread object can be created with JNI calls.
-	<p/>
-	The following common thread priorities are provided for your convenience:
-	<constants id="jvmtiThreadPriority" label="Thread Priority Constants" kind="const">
-	  <constant id="JVMTI_THREAD_MIN_PRIORITY" num="1">
-	    Minimum possible thread priority
-	  </constant>
-	  <constant id="JVMTI_THREAD_NORM_PRIORITY" num="5">
-	    Normal thread priority
-	  </constant>
-	  <constant id="JVMTI_THREAD_MAX_PRIORITY" num="10">
-	    Maximum possible thread priority
-	  </constant>
-	</constants>
-	<p/>
-	The new thread is started as a daemon thread with the specified
-	<paramlink id="priority"></paramlink>.
+        Starts the execution of an agent thread. with the specified native function.
+        The parameter <paramlink id="arg"></paramlink> is forwarded on to the
+        <functionlink id="jvmtiStartFunction">start function</functionlink>
+        (specified with <paramlink id="proc"></paramlink>) as its single argument.
+        This function allows the creation of agent threads
+        for handling communication with another process or for handling events
+        without the need to load a special subclass of <code>java.lang.Thread</code> or
+        implementer of <code>java.lang.Runnable</code>.
+        Instead, the created thread can run entirely in native code.
+        However, the created thread does require a newly created instance
+        of <code>java.lang.Thread</code> (referenced by the argument <code>thread</code>) to
+        which it will be associated.
+        The thread object can be created with JNI calls.
+        <p/>
+        The following common thread priorities are provided for your convenience:
+        <constants id="jvmtiThreadPriority" label="Thread Priority Constants" kind="const">
+          <constant id="JVMTI_THREAD_MIN_PRIORITY" num="1">
+            Minimum possible thread priority
+          </constant>
+          <constant id="JVMTI_THREAD_NORM_PRIORITY" num="5">
+            Normal thread priority
+          </constant>
+          <constant id="JVMTI_THREAD_MAX_PRIORITY" num="10">
+            Maximum possible thread priority
+          </constant>
+        </constants>
+        <p/>
+        The new thread is started as a daemon thread with the specified
+        <paramlink id="priority"></paramlink>.
         If enabled, a <eventlink id="ThreadStart"/> event will be sent.
-	<p/>
+        <p/>
         Since the thread has been started, the thread will be live when this function
         returns, unless the thread has died immediately.
-	<p/>
+        <p/>
         The thread group of the thread is ignored -- specifically, the thread is not
         added to the thread group and the thread is not seen on queries of the thread
         group at either the Java programming language or <jvmti/> levels.
-	<p/>
+        <p/>
         The thread is not visible to Java programming language queries but is
         included in <jvmti/> queries (for example,
         <functionlink id="GetAllThreads"/> and
         <functionlink id="GetAllStackTraces"/>).
-	<p/>
-	Upon execution of <code>proc</code>, the new thread will be attached to the
-	VM -- see the JNI documentation on
-	<externallink id="jni/invocation.html#attaching-to-the-vm"
-		      >Attaching to the VM</externallink>.
+        <p/>
+        Upon execution of <code>proc</code>, the new thread will be attached to the
+        VM -- see the JNI documentation on
+        <externallink id="jni/invocation.html#attaching-to-the-vm"
+                      >Attaching to the VM</externallink>.
       </description>
       <origin>jvmdiClone</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread impl="noconvert" started="no"/>
-	    <description>
-	      The thread to run.
-	    </description>
-	</param>
-	<param id="proc">
-	  <ptrtype>
-	    <struct>jvmtiStartFunction</struct>
-	  </ptrtype>
-	  <description>
-	    The start function.
-	  </description>
-	</param>
-	<param id="arg">
-	  <inbuf>
+        <param id="thread">
+          <jthread impl="noconvert" started="no"/>
+            <description>
+              The thread to run.
+            </description>
+        </param>
+        <param id="proc">
+          <ptrtype>
+            <struct>jvmtiStartFunction</struct>
+          </ptrtype>
+          <description>
+            The start function.
+          </description>
+        </param>
+        <param id="arg">
+          <inbuf>
             <void/>
             <nullok><code>NULL</code> is passed to the start function</nullok>
           </inbuf>
-	  <description>
-	    The argument to the start function.
-	  </description>
-	</param>
-	<param id="priority">
-	  <jint/>
-	  <description>
-	    The priority of the started thread. Any thread
-	    priority allowed by <code>java.lang.Thread.setPriority</code> can be used including
-	    those in <datalink id="jvmtiThreadPriority"></datalink>.
-	  </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_INVALID_PRIORITY">
+          <description>
+            The argument to the start function.
+          </description>
+        </param>
+        <param id="priority">
+          <jint/>
+          <description>
+            The priority of the started thread. Any thread
+            priority allowed by <code>java.lang.Thread.setPriority</code> can be used including
+            those in <datalink id="jvmtiThreadPriority"></datalink>.
+          </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_INVALID_PRIORITY">
             <paramlink id="priority"/> is less than
             <datalink id="JVMTI_THREAD_MIN_PRIORITY"/>
               or greater than
             <datalink id="JVMTI_THREAD_MAX_PRIORITY"/>
-	</error>
+        </error>
       </errors>
     </function>
 
     <function id="SetThreadLocalStorage" jkernel="yes" impl="notrace" phase="start" num="103">
       <synopsis>Set Thread Local Storage</synopsis>
       <description>
-	The VM stores a pointer value associated with each environment-thread
-	pair. This pointer value is called <i>thread-local storage</i>.
+        The VM stores a pointer value associated with each environment-thread
+        pair. This pointer value is called <i>thread-local storage</i>.
         This value is <code>NULL</code> unless set with this function.
-	Agents can allocate memory in which they store thread specific
+        Agents can allocate memory in which they store thread specific
         information. By setting thread-local storage it can then be
-	accessed with
-	<functionlink id="GetThreadLocalStorage"></functionlink>.
-	<p/>
+        accessed with
+        <functionlink id="GetThreadLocalStorage"></functionlink>.
+        <p/>
         This function is called by the agent to set the value of the <jvmti/>
         thread-local storage. <jvmti/> supplies to the agent a pointer-size
         thread-local storage that can be used to record per-thread
         information.
       </description>
       <origin>jvmpi</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="thread">
-	  <jthread null="current"/>
-	    <description>
-	      Store to this thread.
-	    </description>
-	</param>
+          <jthread null="current"/>
+            <description>
+              Store to this thread.
+            </description>
+        </param>
         <param id="data">
-	  <inbuf>
-	    <void/>
-	    <nullok>value is set to <code>NULL</code></nullok>
-	  </inbuf>
-	  <description>
-	    The value to be entered into the thread-local storage.
-	  </description>
-	</param>
+          <inbuf>
+            <void/>
+            <nullok>value is set to <code>NULL</code></nullok>
+          </inbuf>
+          <description>
+            The value to be entered into the thread-local storage.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -2219,25 +2209,25 @@
       <origin>jvmpi</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="thread">
-	  <jthread null="current" impl="noconvert"/>
-	    <description>
-	      Retrieve from this thread.
-	    </description>
-	</param>
+          <jthread null="current" impl="noconvert"/>
+            <description>
+              Retrieve from this thread.
+            </description>
+        </param>
         <param id="data_ptr">
-	  <agentbuf><void/></agentbuf>
-	  <description>
-	    Pointer through which the value of the thread local
-	    storage is returned.
-	    If thread-local storage has not been set with
-	    <functionlink id="SetThreadLocalStorage"></functionlink> the returned
-	    pointer is <code>NULL</code>.
-	  </description>
-	</param>
+          <agentbuf><void/></agentbuf>
+          <description>
+            Pointer through which the value of the thread local
+            storage is returned.
+            If thread-local storage has not been set with
+            <functionlink id="SetThreadLocalStorage"></functionlink> the returned
+            pointer is <code>NULL</code>.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -2248,144 +2238,144 @@
     </intro>
 
     <function id="GetTopThreadGroups" num="13">
       <synopsis>Get Top Thread Groups</synopsis>
       <description>
-	Return all top-level (parentless) thread groups in the VM.
+        Return all top-level (parentless) thread groups in the VM.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="group_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of top-level thread groups.
-	  </description>
-	</param>
-	<param id="groups_ptr">
-	  <allocbuf outcount="group_count_ptr"><jthreadGroup/></allocbuf>
-	    <description>
-	      On return, refers to a pointer to the top-level thread group array.
-	    </description>
-	</param>
+        <param id="group_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of top-level thread groups.
+          </description>
+        </param>
+        <param id="groups_ptr">
+          <allocbuf outcount="group_count_ptr"><jthreadGroup/></allocbuf>
+            <description>
+              On return, refers to a pointer to the top-level thread group array.
+            </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetThreadGroupInfo" num="14">
       <synopsis>Get Thread Group Info</synopsis>
       <typedef id="jvmtiThreadGroupInfo" label="Thread group information structure">
-	<field id="parent">
-	  <jthreadGroup/>
-	  <description>
-	    The parent thread group.
-	  </description>
-	</field>
-	<field id="name">
-	  <allocfieldbuf><char/></allocfieldbuf>
-	  <description>
-	    The thread group's name, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</field>
-	<field id="max_priority">
-	  <jint/>
-	  <description>
-	    The maximum priority for this thread group.
-	  </description>
-	</field>
-	<field id="is_daemon">
-	  <jboolean/>
-	  <description>
-	    Is this a daemon thread group?
-	  </description>
-	</field>
+        <field id="parent">
+          <jthreadGroup/>
+          <description>
+            The parent thread group.
+          </description>
+        </field>
+        <field id="name">
+          <allocfieldbuf><char/></allocfieldbuf>
+          <description>
+            The thread group's name, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </field>
+        <field id="max_priority">
+          <jint/>
+          <description>
+            The maximum priority for this thread group.
+          </description>
+        </field>
+        <field id="is_daemon">
+          <jboolean/>
+          <description>
+            Is this a daemon thread group?
+          </description>
+        </field>
       </typedef>
       <description>
-	Get information about the thread group. The fields of the
-	<functionlink id="jvmtiThreadGroupInfo"></functionlink> structure
-	are filled in with details of the specified thread group.
+        Get information about the thread group. The fields of the
+        <functionlink id="jvmtiThreadGroupInfo"></functionlink> structure
+        are filled in with details of the specified thread group.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="group">
-	  <jthreadGroup/>
-	  <description>
-	    The thread group to query.
-	  </description>
-	</param>
-	<param id="info_ptr">
-	  <outptr><struct>jvmtiThreadGroupInfo</struct></outptr>
-	  <description>
-	    On return, filled with information describing the specified
-	    thread group.
-	  </description>
-	</param>
+        <param id="group">
+          <jthreadGroup/>
+          <description>
+            The thread group to query.
+          </description>
+        </param>
+        <param id="info_ptr">
+          <outptr><struct>jvmtiThreadGroupInfo</struct></outptr>
+          <description>
+            On return, filled with information describing the specified
+            thread group.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetThreadGroupChildren" num="15">
       <synopsis>Get Thread Group Children</synopsis>
       <description>
-	Get the live threads and active subgroups in this thread group.
+        Get the live threads and active subgroups in this thread group.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="group">
-	  <jthreadGroup/>
-	  <description>
-	    The group to query.
-	  </description>
-	</param>
-	<param id="thread_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of live threads in this thread group.
-	  </description>
-	</param>
-	<param id="threads_ptr">
-	  <allocbuf outcount="thread_count_ptr"><jthread/></allocbuf>
-	    <description>
-	      On return, points to an array of the live threads in this thread group.
-	    </description>
-	</param>
-	<param id="group_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of active child thread groups
-	  </description>
-	</param>
-	<param id="groups_ptr">
-	  <allocbuf outcount="group_count_ptr"><jthreadGroup/></allocbuf>
-	    <description>
-	      On return, points to an array of the active child thread groups.
-	    </description>
-	</param>
-      </parameters>
-      <errors>
-      </errors>
-    </function>
-  </category>
-
-  <category id="stack" label="Stack Frame">
-    <intro>
-        These functions provide information about the stack of a thread.
-        Stack frames are referenced by depth.
-        The frame at depth zero is the current frame.
-        <p/>
-        Stack frames are as described in
-        <vmspec chapter="3.6"/>,
-        That is, they correspond to method
-        invocations (including native methods) but do not correspond to platform native or
+        <param id="group">
+          <jthreadGroup/>
+          <description>
+            The group to query.
+          </description>
+        </param>
+        <param id="thread_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of live threads in this thread group.
+          </description>
+        </param>
+        <param id="threads_ptr">
+          <allocbuf outcount="thread_count_ptr"><jthread/></allocbuf>
+            <description>
+              On return, points to an array of the live threads in this thread group.
+            </description>
+        </param>
+        <param id="group_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of active child thread groups
+          </description>
+        </param>
+        <param id="groups_ptr">
+          <allocbuf outcount="group_count_ptr"><jthreadGroup/></allocbuf>
+            <description>
+              On return, points to an array of the active child thread groups.
+            </description>
+        </param>
+      </parameters>
+      <errors>
+      </errors>
+    </function>
+  </category>
+
+  <category id="stack" label="Stack Frame">
+    <intro>
+        These functions provide information about the stack of a thread.
+        Stack frames are referenced by depth.
+        The frame at depth zero is the current frame.
+        <p/>
+        Stack frames are as described in
+        <vmspec chapter="3.6"/>,
+        That is, they correspond to method
+        invocations (including native methods) but do not correspond to platform native or
         VM internal frames.
         <p/>
         A <jvmti/> implementation may use method invocations to launch a thread and
         the corresponding frames may be included in the stack as presented by these functions --
         that is, there may be frames shown
@@ -2397,58 +2387,58 @@
       <typedef id="jvmtiFrameInfo" label="Stack frame information structure">
         <description>
           Information about a stack frame is returned in this structure.
         </description>
         <field id="method">
-	  <jmethodID/>
-	    <description>
-	      The method executing in this frame.
-	    </description>
-	</field>
+          <jmethodID/>
+            <description>
+              The method executing in this frame.
+            </description>
+        </field>
         <field id="location">
-	  <jlocation/>
-	  <description>
-	    The index of the instruction executing in this frame.
+          <jlocation/>
+          <description>
+            The index of the instruction executing in this frame.
             <code>-1</code> if the frame is executing a native method.
-	  </description>
-	</field>
+          </description>
+        </field>
       </typedef>
 
       <typedef id="jvmtiStackInfo" label="Stack information structure">
         <description>
           Information about a set of stack frames is returned in this structure.
         </description>
         <field id="thread">
-	  <jthread/>
-	  <description>
-	    On return, the thread traced.
-	  </description>
-	</field>
+          <jthread/>
+          <description>
+            On return, the thread traced.
+          </description>
+        </field>
         <field id="state">
-	  <jint/>
-	  <description>
-	    On return, the thread state. See <functionlink id="GetThreadState"></functionlink>.
-	  </description>
-	</field>
+          <jint/>
+          <description>
+            On return, the thread state. See <functionlink id="GetThreadState"></functionlink>.
+          </description>
+        </field>
         <field id="frame_buffer">
-	  <outbuf incount="max_frame_count">
-	    <struct>jvmtiFrameInfo</struct>
-	  </outbuf>
-	    <description>
-	      On return, this agent allocated buffer is filled
-	      with stack frame information.
-	    </description>
-	</field>
+          <outbuf incount="max_frame_count">
+            <struct>jvmtiFrameInfo</struct>
+          </outbuf>
+            <description>
+              On return, this agent allocated buffer is filled
+              with stack frame information.
+            </description>
+        </field>
         <field id="frame_count">
-	  <jint/>
-	  <description>
-	    On return, the number of records filled into
+          <jint/>
+          <description>
+            On return, the number of records filled into
             <code>frame_buffer</code>.
             This will be
             min(<code>max_frame_count</code>, <i>stackDepth</i>).
-	  </description>
-	</field>
+          </description>
+        </field>
       </typedef>
 
     <function id="GetStackTrace" num="104">
       <synopsis>Get Stack Trace</synopsis>
       <description>
@@ -2491,62 +2481,62 @@
       <origin>jvmpi</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="thread">
-	  <jthread null="current"/>
-	    <description>
-	      Fetch the stack trace of this thread.
-	    </description>
-	</param>
+          <jthread null="current"/>
+            <description>
+              Fetch the stack trace of this thread.
+            </description>
+        </param>
         <param id="start_depth">
-	  <jint/>
-	  <description>
-	    Begin retrieving frames at this depth.
+          <jint/>
+          <description>
+            Begin retrieving frames at this depth.
             If non-negative, count from the current frame,
             the first frame retrieved is at depth <code>start_depth</code>.
             For example, if zero, start from the current frame; if one, start from the
             caller of the current frame; if two, start from the caller of the
             caller of the current frame; and so on.
             If negative, count from below the oldest frame,
             the first frame retrieved is at depth <i>stackDepth</i><code> + start_depth</code>,
             where <i>stackDepth</i> is the count of frames on the stack.
             For example, if negative one, only the oldest frame is retrieved;
             if negative two, start from the frame called by the oldest frame.
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="max_frame_count">
-	  <jint min="0"/>
-	  <description>
-	    The maximum number of <datalink id="jvmtiFrameInfo"/> records to retrieve.
-	  </description>
-	</param>
+          <jint min="0"/>
+          <description>
+            The maximum number of <datalink id="jvmtiFrameInfo"/> records to retrieve.
+          </description>
+        </param>
         <param id="frame_buffer">
-	  <outbuf incount="max_frame_count" outcount="count_ptr">
-	    <struct>jvmtiFrameInfo</struct>
-	  </outbuf>
-	    <description>
-	      On return, this agent allocated buffer is filled
-	      with stack frame information.
-	    </description>
-	</param>
+          <outbuf incount="max_frame_count" outcount="count_ptr">
+            <struct>jvmtiFrameInfo</struct>
+          </outbuf>
+            <description>
+              On return, this agent allocated buffer is filled
+              with stack frame information.
+            </description>
+        </param>
         <param id="count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of records filled in.
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of records filled in.
             For non-negative <code>start_depth</code>, this will be
             min(<code>max_frame_count</code>, <i>stackDepth</i><code> - start_depth</code>).
             For negative <code>start_depth</code>, this will be
             min(<code>max_frame_count</code>, <code>-start_depth</code>).
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_ILLEGAL_ARGUMENT">
-	  <paramlink id="start_depth"/> is positive and greater than or equal to <i>stackDepth</i>.
-	  Or <paramlink id="start_depth"/> is negative and less than <i>-stackDepth</i>.
-	</error>
+        <error id="JVMTI_ERROR_ILLEGAL_ARGUMENT">
+          <paramlink id="start_depth"/> is positive and greater than or equal to <i>stackDepth</i>.
+          Or <paramlink id="start_depth"/> is negative and less than <i>-stackDepth</i>.
+        </error>
       </errors>
     </function>
 
 
     <function id="GetAllStackTraces" num="100">
@@ -2596,36 +2586,36 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="max_frame_count">
-	  <jint min="0"/>
-	  <description>
-	    The maximum number of <datalink id="jvmtiFrameInfo"/> records to retrieve per thread.
-	  </description>
-	</param>
+          <jint min="0"/>
+          <description>
+            The maximum number of <datalink id="jvmtiFrameInfo"/> records to retrieve per thread.
+          </description>
+        </param>
         <param id="stack_info_ptr">
-	  <allocbuf>
-	    <struct>jvmtiStackInfo</struct>
-	  </allocbuf>
-	    <description>
-	      On return, this buffer is filled
-	      with stack information for each thread.
+          <allocbuf>
+            <struct>jvmtiStackInfo</struct>
+          </allocbuf>
+            <description>
+              On return, this buffer is filled
+              with stack information for each thread.
               The number of <datalink id="jvmtiStackInfo"/> records is determined
               by <paramlink id="thread_count_ptr"/>.
               <p/>
               Note that this buffer is allocated to include the <datalink id="jvmtiFrameInfo"/>
               buffers pointed to by <datalink id="jvmtiStackInfo.frame_buffer"/>.
               These buffers must not be separately deallocated.
-	    </description>
-	</param>
+            </description>
+        </param>
         <param id="thread_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    The number of threads traced.
-	  </description>
-	</param>
+          <outptr><jint/></outptr>
+          <description>
+            The number of threads traced.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -2652,47 +2642,47 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="thread_count">
-	  <jint min="0"/>
-	  <description>
-	    The number of threads to trace.
-	  </description>
-	</param>
+          <jint min="0"/>
+          <description>
+            The number of threads to trace.
+          </description>
+        </param>
         <param id="thread_list">
-	  <inbuf incount="thread_count"><jthread/></inbuf>
-	    <description>
-	      The list of threads to trace.
-	    </description>
-	</param>
+          <inbuf incount="thread_count"><jthread/></inbuf>
+            <description>
+              The list of threads to trace.
+            </description>
+        </param>
         <param id="max_frame_count">
-	  <jint min="0"/>
-	  <description>
-	    The maximum number of <datalink id="jvmtiFrameInfo"/> records to retrieve per thread.
-	  </description>
-	</param>
+          <jint min="0"/>
+          <description>
+            The maximum number of <datalink id="jvmtiFrameInfo"/> records to retrieve per thread.
+          </description>
+        </param>
         <param id="stack_info_ptr">
-	  <allocbuf outcount="thread_count">
-	    <struct>jvmtiStackInfo</struct>
-	  </allocbuf>
-	    <description>
-	      On return, this buffer is filled
-	      with stack information for each thread.
+          <allocbuf outcount="thread_count">
+            <struct>jvmtiStackInfo</struct>
+          </allocbuf>
+            <description>
+              On return, this buffer is filled
+              with stack information for each thread.
               The number of <datalink id="jvmtiStackInfo"/> records is determined
               by <paramlink id="thread_count"/>.
               <p/>
               Note that this buffer is allocated to include the <datalink id="jvmtiFrameInfo"/>
               buffers pointed to by <datalink id="jvmtiStackInfo.frame_buffer"/>.
               These buffers must not be separately deallocated.
-	    </description>
-	</param>
+            </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_INVALID_THREAD">
-	  An element in <paramlink id="thread_list"/> is not a thread object.
-	</error>
+        <error id="JVMTI_ERROR_INVALID_THREAD">
+          An element in <paramlink id="thread_list"/> is not a thread object.
+        </error>
       </errors>
     </function>
 
     <elide>
     <function id="AsyncGetStackTrace" num="1000">
@@ -2717,45 +2707,45 @@
           must be <code>false</code>.
         </capability>
       </capabilities>
       <parameters>
         <param id="use_java_stack">
-	  <jboolean/>
-	  <description>
-	    Return the stack showing <vmspec/>
-	    model of the stack;
-	    otherwise, show the internal representation of the stack with
-	    inlined and optimized methods missing.  If the virtual machine
-	    is using the <i>Java Virtual Machine Specification</i> stack model
-	    internally, this flag is ignored.
-	  </description>
-	</param>
+          <jboolean/>
+          <description>
+            Return the stack showing <vmspec/>
+            model of the stack;
+            otherwise, show the internal representation of the stack with
+            inlined and optimized methods missing.  If the virtual machine
+            is using the <i>Java Virtual Machine Specification</i> stack model
+            internally, this flag is ignored.
+          </description>
+        </param>
         <param id="max_count">
-	  <jint min="0"/>
-	  <description>
-	    The maximum number of <datalink id="jvmtiFrameInfo"/> records to retrieve.
-	    Retrieve this many unless the stack depth is less than <code>max_count</code>.
-	  </description>
-	</param>
+          <jint min="0"/>
+          <description>
+            The maximum number of <datalink id="jvmtiFrameInfo"/> records to retrieve.
+            Retrieve this many unless the stack depth is less than <code>max_count</code>.
+          </description>
+        </param>
         <param id="frame_buffer">
-	  <outbuf incount="max_count" outcount="count_ptr">
-	    <struct>jvmtiFrameInfo</struct>
-	    <nullok>this information is not returned</nullok>
-	  </outbuf>
-	    <description>
-	      The agent passes in a buffer
-	      large enough to hold <code>max_count</code> records of
-	      <datalink id="jvmtiFrameInfo"></datalink>.  This buffer must be
-	      pre-allocated by the agent.
-	    </description>
-	</param>
+          <outbuf incount="max_count" outcount="count_ptr">
+            <struct>jvmtiFrameInfo</struct>
+            <nullok>this information is not returned</nullok>
+          </outbuf>
+            <description>
+              The agent passes in a buffer
+              large enough to hold <code>max_count</code> records of
+              <datalink id="jvmtiFrameInfo"></datalink>.  This buffer must be
+              pre-allocated by the agent.
+            </description>
+        </param>
         <param id="count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of records filled in..
-	  </description>
-	</param>
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of records filled in..
+          </description>
+        </param>
       </parameters>
       <errors>
         <error id="JVMTI_ERROR_UNATTACHED_THREAD">
           The thread being used to call this function is not attached
           to the virtual machine.  Calls must be made from attached threads.
@@ -2765,194 +2755,193 @@
     </elide>
 
     <function id="GetFrameCount" num="16">
       <synopsis>Get Frame Count</synopsis>
       <description>
-	Get the number of frames currently in the specified thread's call stack.
-	<p/>
-	If this function is called for a thread actively executing bytecodes (for example,
-	not the current thread and not suspended), the information returned is transient.
+        Get the number of frames currently in the specified thread's call stack.
+        <p/>
+        If this function is called for a thread actively executing bytecodes (for example,
+        not the current thread and not suspended), the information returned is transient.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread null="current"/>
-	    <description>
-	      The thread to query.
-	    </description>
-	</param>
-	<param id="count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of frames in the call stack.
-	  </description>
-	</param>
+        <param id="thread">
+          <jthread null="current"/>
+            <description>
+              The thread to query.
+            </description>
+        </param>
+        <param id="count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of frames in the call stack.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="PopFrame" num="80">
       <synopsis>Pop Frame</synopsis>
       <description>
-	Pop the current frame of <code>thread</code>'s stack.
-	Popping a frame takes you to the previous frame.
-	When the thread is resumed, the execution
-	state of the thread is reset to the state
-	immediately before the called method was invoked.
-	That is (using <vmspec/> terminology):
-	  <ul>
-	    <li>the current frame is discarded as the previous frame becomes the current one</li>
-	    <li>the operand stack is restored--the argument values are added back
-	      and if the invoke was not <code>invokestatic</code>,
-	      <code>objectref</code> is added back as well</li>
-	    <li>the Java virtual machine PC is restored to the opcode
-	      of the invoke instruction</li>
-	  </ul>
-	Note however, that any changes to the arguments, which
-	occurred in the called method, remain;
-	when execution continues, the first instruction to
-	execute will be the invoke.
-	<p/>
-	Between calling <code>PopFrame</code> and resuming the
-	thread the state of the stack is undefined.
-	To pop frames beyond the first,
-	these three steps must be repeated:
-	<ul>
-	  <li>suspend the thread via an event (step, breakpoint, ...)</li>
-	  <li>call <code>PopFrame</code></li>
-	  <li>resume the thread</li>
-	</ul>
-	<p/>
-	A lock acquired by calling the called method
-	(if it is a <code>synchronized</code>  method)
-	and locks acquired by entering <code>synchronized</code>
-	blocks within the called method are released.
-	Note: this does not apply to native locks or
-	<code>java.util.concurrent.locks</code> locks.
-	<p/>
-	Finally blocks are not executed.
-	<p/>
-	Changes to global state are not addressed and thus remain changed.
-	<p/>
-	The specified thread must be suspended (which implies it cannot be the current thread).
-	<p/>
-	Both the called method and calling method must be non-native Java programming
+        Pop the current frame of <code>thread</code>'s stack.
+        Popping a frame takes you to the previous frame.
+        When the thread is resumed, the execution
+        state of the thread is reset to the state
+        immediately before the called method was invoked.
+        That is (using <vmspec/> terminology):
+          <ul>
+            <li>the current frame is discarded as the previous frame becomes the current one</li>
+            <li>the operand stack is restored--the argument values are added back
+              and if the invoke was not <code>invokestatic</code>,
+              <code>objectref</code> is added back as well</li>
+            <li>the Java virtual machine PC is restored to the opcode
+              of the invoke instruction</li>
+          </ul>
+        Note however, that any changes to the arguments, which
+        occurred in the called method, remain;
+        when execution continues, the first instruction to
+        execute will be the invoke.
+        <p/>
+        Between calling <code>PopFrame</code> and resuming the
+        thread the state of the stack is undefined.
+        To pop frames beyond the first,
+        these three steps must be repeated:
+        <ul>
+          <li>suspend the thread via an event (step, breakpoint, ...)</li>
+          <li>call <code>PopFrame</code></li>
+          <li>resume the thread</li>
+        </ul>
+        <p/>
+        A lock acquired by calling the called method
+        (if it is a <code>synchronized</code>  method)
+        and locks acquired by entering <code>synchronized</code>
+        blocks within the called method are released.
+        Note: this does not apply to native locks or
+        <code>java.util.concurrent.locks</code> locks.
+        <p/>
+        Finally blocks are not executed.
+        <p/>
+        Changes to global state are not addressed and thus remain changed.
+        <p/>
+        The specified thread must be suspended or must be the current thread.
+        <p/>
+        Both the called method and calling method must be non-native Java programming
         language methods.
-	<p/>
-	No <jvmti/> events are generated by this function.
+        <p/>
+        No <jvmti/> events are generated by this function.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_pop_frame"></required>
+        <required id="can_pop_frame"></required>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread/>
-	    <description>
-	      The thread whose current frame is to be popped.
-	    </description>
-	</param>
+        <param id="thread">
+          <jthread/>
+            <description>
+              The thread whose current frame is to be popped.
+            </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Called or calling method is a native method.
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Called or calling method is a native method.
           The implementation is unable to pop this frame.
-	</error>
-	<error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
-	  Thread was not suspended.
-	</error>
-	<error id="JVMTI_ERROR_NO_MORE_FRAMES">
-	  There are less than two stack frames on the call stack.
-	</error>
+        </error>
+        <error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
+          Thread was not suspended and was not the current thread.
+        </error>
+        <error id="JVMTI_ERROR_NO_MORE_FRAMES">
+          There are less than two stack frames on the call stack.
+        </error>
       </errors>
     </function>
 
     <function id="GetFrameLocation" num="19">
       <synopsis>Get Frame Location</synopsis>
       <description>
-	<p/>
-	For a Java programming language frame, return the location of the instruction
-	currently executing.
+        <p/>
+        For a Java programming language frame, return the location of the instruction
+        currently executing.
       </description>
       <origin>jvmdiClone</origin>
       <capabilities>
       </capabilities>
       <parameters>
- 	<param id="thread">
-	  <jthread null="current" frame="frame"/>
-	  <description>
-	    The thread of the frame to query.
-	  </description>
-	</param>
-	<param id="depth">
-	  <jframeID thread="thread"/>
-	  <description>
-	    The depth of the frame to query.
-	  </description>
-	</param>
-	<param id="method_ptr">
-	  <outptr><jmethodID/></outptr>
-	    <description>
-	      On return, points to the method for the current location.
-	    </description>
-	</param>
-	<param id="location_ptr">
-	  <outptr><jlocation/></outptr>
-	  <description>
-	    On return, points to the index of the currently
-	    executing instruction.
+        <param id="thread">
+          <jthread null="current" frame="frame"/>
+          <description>
+            The thread of the frame to query.
+          </description>
+        </param>
+        <param id="depth">
+          <jframeID thread="thread"/>
+          <description>
+            The depth of the frame to query.
+          </description>
+        </param>
+        <param id="method_ptr">
+          <outptr><jmethodID/></outptr>
+            <description>
+              On return, points to the method for the current location.
+            </description>
+        </param>
+        <param id="location_ptr">
+          <outptr><jlocation/></outptr>
+          <description>
+            On return, points to the index of the currently
+            executing instruction.
             Is set to <code>-1</code> if the frame is executing
             a native method.
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="NotifyFramePop" num="20">
       <synopsis>Notify Frame Pop</synopsis>
       <description>
-	When the frame that is currently at <paramlink id="depth"></paramlink>
+        When the frame that is currently at <paramlink id="depth"></paramlink>
         is popped from the stack, generate a
-	<eventlink id="FramePop"></eventlink> event.  See the
-	<eventlink id="FramePop"></eventlink> event for details.
+        <eventlink id="FramePop"></eventlink> event.  See the
+        <eventlink id="FramePop"></eventlink> event for details.
         Only frames corresponding to non-native Java programming language
         methods can receive notification.
         <p/>
-        The specified thread must either be the current thread
-        or the thread must be suspended.
+        The specified thread must be suspended or must be the current thread.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_generate_frame_pop_events"></required>
+        <required id="can_generate_frame_pop_events"></required>
       </capabilities>
       <parameters>
- 	<param id="thread">
-	  <jthread null="current" frame="depth"/>
-	  <description>
-	    The thread of the frame for which the frame pop event will be generated.
-	  </description>
-	</param>
-	<param id="depth">
-	  <jframeID thread="thread"/>
-	  <description>
-	    The depth of the frame for which the frame pop event will be generated.
-	  </description>
-	</param>
+        <param id="thread">
+          <jthread null="current" frame="depth"/>
+          <description>
+            The thread of the frame for which the frame pop event will be generated.
+          </description>
+        </param>
+        <param id="depth">
+          <jframeID thread="thread"/>
+          <description>
+            The depth of the frame for which the frame pop event will be generated.
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  The frame at <code>depth</code> is executing a
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          The frame at <code>depth</code> is executing a
           native method.
-	</error>
-	<error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
-	  Thread was not suspended and was not the current thread.
-	</error>
+        </error>
+        <error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
+          Thread was not suspended and was not the current thread.
+        </error>
       </errors>
     </function>
 
   </category>
 
@@ -2994,266 +2983,266 @@
     </intro>
 
     <function id="ForceEarlyReturnObject" num="81" since="1.1">
       <synopsis>Force Early Return - Object</synopsis>
       <description>
-	This function can be used to return from a method whose
+        This function can be used to return from a method whose
         result type is <code>Object</code>
         or a subclass of <code>Object</code>.
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_force_early_return"></required>
+        <required id="can_force_early_return"></required>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread null="current"/>
-	  <description>
-	    The thread whose current frame is to return early.
-	  </description>
-	</param>
-	<param id="value">
-	  <jobject/>
-	  <description>
-	    The return value for the called frame.
+        <param id="thread">
+          <jthread null="current"/>
+          <description>
+            The thread whose current frame is to return early.
+          </description>
+        </param>
+        <param id="value">
+          <jobject/>
+          <description>
+            The return value for the called frame.
             An object or <code>NULL</code>.
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Attempted to return early from a frame
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Attempted to return early from a frame
           corresponding to a native method.
           Or the implementation is unable to provide
           this functionality on this frame.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The result type of the called method is not
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The result type of the called method is not
           <code>Object</code> or a subclass of <code>Object</code>.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The supplied <paramlink id="value"/> is not compatible with the
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The supplied <paramlink id="value"/> is not compatible with the
           result type of the called method.
-	</error>
-	<error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
-	  Thread was not the current thread and was not suspended.
-	</error>
-	<error id="JVMTI_ERROR_NO_MORE_FRAMES">
-	  There are no more frames on the call stack.
-	</error>
+        </error>
+        <error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
+          Thread was not suspended and was not the current thread.
+        </error>
+        <error id="JVMTI_ERROR_NO_MORE_FRAMES">
+          There are no more frames on the call stack.
+        </error>
       </errors>
     </function>
 
     <function id="ForceEarlyReturnInt" num="82" since="1.1">
       <synopsis>Force Early Return - Int</synopsis>
       <description>
-	This function can be used to return from a method whose
+        This function can be used to return from a method whose
         result type is <code>int</code>, <code>short</code>,
         <code>char</code>, <code>byte</code>, or
-	<code>boolean</code>.
+        <code>boolean</code>.
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_force_early_return"></required>
+        <required id="can_force_early_return"></required>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread null="current"/>
-	  <description>
-	    The thread whose current frame is to return early.
-	  </description>
-	</param>
-	<param id="value">
-	  <jint/>
-	  <description>
-	    The return value for the called frame.
-	  </description>
-	</param>
+        <param id="thread">
+          <jthread null="current"/>
+          <description>
+            The thread whose current frame is to return early.
+          </description>
+        </param>
+        <param id="value">
+          <jint/>
+          <description>
+            The return value for the called frame.
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Attempted to return early from a frame
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Attempted to return early from a frame
           corresponding to a native method.
           Or the implementation is unable to provide
           this functionality on this frame.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The result type of the called method is not
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The result type of the called method is not
           <code>int</code>, <code>short</code>,
           <code>char</code>, <code>byte</code>, or
-  	  <code>boolean</code>.
-	</error>
-	<error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
-	  Thread was not the current thread and was not suspended.
-	</error>
-	<error id="JVMTI_ERROR_NO_MORE_FRAMES">
-	  There are no frames on the call stack.
-	</error>
+          <code>boolean</code>.
+        </error>
+        <error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
+          Thread was not suspended and was not the current thread.
+        </error>
+        <error id="JVMTI_ERROR_NO_MORE_FRAMES">
+          There are no frames on the call stack.
+        </error>
       </errors>
     </function>
 
     <function id="ForceEarlyReturnLong" num="83" since="1.1">
       <synopsis>Force Early Return - Long</synopsis>
       <description>
-	This function can be used to return from a method whose
+        This function can be used to return from a method whose
         result type is <code>long</code>.
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_force_early_return"></required>
+        <required id="can_force_early_return"></required>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread null="current"/>
-	  <description>
-	    The thread whose current frame is to return early.
-	  </description>
-	</param>
-	<param id="value">
-	  <jlong/>
-	  <description>
-	    The return value for the called frame.
-	  </description>
-	</param>
+        <param id="thread">
+          <jthread null="current"/>
+          <description>
+            The thread whose current frame is to return early.
+          </description>
+        </param>
+        <param id="value">
+          <jlong/>
+          <description>
+            The return value for the called frame.
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Attempted to return early from a frame
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Attempted to return early from a frame
           corresponding to a native method.
           Or the implementation is unable to provide
           this functionality on this frame.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The result type of the called method is not <code>long</code>.
-	</error>
-	<error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
-	  Thread was not the current thread and was not suspended.
-	</error>
-	<error id="JVMTI_ERROR_NO_MORE_FRAMES">
-	  There are no frames on the call stack.
-	</error>
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The result type of the called method is not <code>long</code>.
+        </error>
+        <error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
+          Thread was not suspended and was not the current thread.
+        </error>
+        <error id="JVMTI_ERROR_NO_MORE_FRAMES">
+          There are no frames on the call stack.
+        </error>
       </errors>
     </function>
 
     <function id="ForceEarlyReturnFloat" num="84" since="1.1">
       <synopsis>Force Early Return - Float</synopsis>
       <description>
-	This function can be used to return from a method whose
+        This function can be used to return from a method whose
         result type is <code>float</code>.
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_force_early_return"></required>
+        <required id="can_force_early_return"></required>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread null="current"/>
-	  <description>
-	    The thread whose current frame is to return early.
-	  </description>
-	</param>
-	<param id="value">
-	  <jfloat/>
-	  <description>
-	    The return value for the called frame.
-	  </description>
-	</param>
+        <param id="thread">
+          <jthread null="current"/>
+          <description>
+            The thread whose current frame is to return early.
+          </description>
+        </param>
+        <param id="value">
+          <jfloat/>
+          <description>
+            The return value for the called frame.
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Attempted to return early from a frame
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Attempted to return early from a frame
           corresponding to a native method.
           Or the implementation is unable to provide
           this functionality on this frame.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The result type of the called method is not <code>float</code>.
-	</error>
-	<error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
-	  Thread was not the current thread and was not suspended.
-	</error>
-	<error id="JVMTI_ERROR_NO_MORE_FRAMES">
-	  There are no frames on the call stack.
-	</error>
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The result type of the called method is not <code>float</code>.
+        </error>
+        <error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
+          Thread was not suspended and was not the current thread.
+        </error>
+        <error id="JVMTI_ERROR_NO_MORE_FRAMES">
+          There are no frames on the call stack.
+        </error>
       </errors>
     </function>
 
     <function id="ForceEarlyReturnDouble" num="85" since="1.1">
       <synopsis>Force Early Return - Double</synopsis>
       <description>
-	This function can be used to return from a method whose
+        This function can be used to return from a method whose
         result type is <code>double</code>.
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_force_early_return"></required>
+        <required id="can_force_early_return"></required>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread null="current"/>
-	  <description>
-	    The thread whose current frame is to return early.
-	  </description>
-	</param>
-	<param id="value">
-	  <jdouble/>
-	  <description>
-	    The return value for the called frame.
-	  </description>
-	</param>
+        <param id="thread">
+          <jthread null="current"/>
+          <description>
+            The thread whose current frame is to return early.
+          </description>
+        </param>
+        <param id="value">
+          <jdouble/>
+          <description>
+            The return value for the called frame.
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Attempted to return early from a frame corresponding to a native method.
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Attempted to return early from a frame corresponding to a native method.
           Or the implementation is unable to provide this functionality on this frame.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The result type of the called method is not <code>double</code>.
-	</error>
-	<error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
-	  Thread was not the current thread and was not suspended.
-	</error>
-	<error id="JVMTI_ERROR_NO_MORE_FRAMES">
-	  There are no frames on the call stack.
-	</error>
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The result type of the called method is not <code>double</code>.
+        </error>
+        <error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
+          Thread was not suspended and was not the current thread.
+        </error>
+        <error id="JVMTI_ERROR_NO_MORE_FRAMES">
+          There are no frames on the call stack.
+        </error>
       </errors>
     </function>
 
     <function id="ForceEarlyReturnVoid" num="86" since="1.1">
       <synopsis>Force Early Return - Void</synopsis>
       <description>
-	This function can be used to return from a method with no result type.
+        This function can be used to return from a method with no result type.
         That is, the called method must be declared <code>void</code>.
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_force_early_return"></required>
+        <required id="can_force_early_return"></required>
       </capabilities>
       <parameters>
-	<param id="thread">
-	  <jthread null="current"/>
-	  <description>
-	    The thread whose current frame is to return early.
-	  </description>
-	</param>
+        <param id="thread">
+          <jthread null="current"/>
+          <description>
+            The thread whose current frame is to return early.
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Attempted to return early from a frame
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Attempted to return early from a frame
           corresponding to a native method.
           Or the implementation is unable to provide
           this functionality on this frame.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The called method has a result type.
-	</error>
-	<error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
-	  Thread was not the current thread and was not suspended.
-	</error>
-	<error id="JVMTI_ERROR_NO_MORE_FRAMES">
-	  There are no frames on the call stack.
-	</error>
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The called method has a result type.
+        </error>
+        <error id="JVMTI_ERROR_THREAD_NOT_SUSPENDED">
+          Thread was not suspended and was not the current thread.
+        </error>
+        <error id="JVMTI_ERROR_NO_MORE_FRAMES">
+          There are no frames on the call stack.
+        </error>
       </errors>
     </function>
 
   </category>
 
@@ -3301,23 +3290,23 @@
         based on the tag status of an object or its class.
         If no flags are set (the <code>jint</code> is zero), objects
         will not be filtered out.
 
         <constants id="jvmtiHeapFilter" label="Heap Filter Flags" kind="bits">
-	  <constant id="JVMTI_HEAP_FILTER_TAGGED" num="0x4">
-	    Filter out tagged objects. Objects which are tagged are not included.
-	  </constant>
-	  <constant id="JVMTI_HEAP_FILTER_UNTAGGED" num="0x8">
-	    Filter out untagged objects. Objects which are not tagged are not included.
-	  </constant>
-	  <constant id="JVMTI_HEAP_FILTER_CLASS_TAGGED" num="0x10">
-	    Filter out objects with tagged classes. Objects whose class is tagged are not included.
-	  </constant>
-	  <constant id="JVMTI_HEAP_FILTER_CLASS_UNTAGGED" num="0x20">
-	    Filter out objects with untagged classes. Objects whose class is not tagged are not included.
-	  </constant>
-	</constants>
+          <constant id="JVMTI_HEAP_FILTER_TAGGED" num="0x4">
+            Filter out tagged objects. Objects which are tagged are not included.
+          </constant>
+          <constant id="JVMTI_HEAP_FILTER_UNTAGGED" num="0x8">
+            Filter out untagged objects. Objects which are not tagged are not included.
+          </constant>
+          <constant id="JVMTI_HEAP_FILTER_CLASS_TAGGED" num="0x10">
+            Filter out objects with tagged classes. Objects whose class is tagged are not included.
+          </constant>
+          <constant id="JVMTI_HEAP_FILTER_CLASS_UNTAGGED" num="0x20">
+            Filter out objects with untagged classes. Objects whose class is not tagged are not included.
+          </constant>
+        </constants>
 
         <p/>
         The Heap Visit Control Flags are returned by the heap callbacks
         and can be used to abort the iteration.  For the
         <functionlink id="jvmtiHeapReferenceCallback">Heap
@@ -3327,20 +3316,20 @@
 
         <constants id="jvmtiHeapVisitControl"
                    label="Heap Visit Control Flags"
                    kind="bits"
                    since="1.1">
-	  <constant id="JVMTI_VISIT_OBJECTS" num="0x100">
+          <constant id="JVMTI_VISIT_OBJECTS" num="0x100">
             If we are visiting an object and if this callback
             was initiated by <functionlink id="FollowReferences"/>,
             traverse the references of this object.
             Otherwise ignored.
-	  </constant>
-	  <constant id="JVMTI_VISIT_ABORT" num="0x8000">
-	    Abort the iteration.  Ignore all other bits.
-	  </constant>
-	</constants>
+          </constant>
+          <constant id="JVMTI_VISIT_ABORT" num="0x8000">
+            Abort the iteration.  Ignore all other bits.
+          </constant>
+        </constants>
 
         <p/>
         The Heap Reference Enumeration is provided by the
         <functionlink id="jvmtiHeapReferenceCallback">Heap
         Reference Callback</functionlink> and
@@ -3351,116 +3340,116 @@
 
         <constants id="jvmtiHeapReferenceKind"
                    label="Heap Reference Enumeration"
                    kind="enum"
                    since="1.1">
-	  <constant id="JVMTI_HEAP_REFERENCE_CLASS" num="1">
-	    Reference from an object to its class.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_FIELD" num="2">
-	    Reference from an object to the value of one of its instance fields.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_ARRAY_ELEMENT" num="3">
-	    Reference from an array to one of its elements.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_CLASS_LOADER" num="4">
-	    Reference from a class to its class loader.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_SIGNERS" num="5">
-	    Reference from a class to its signers array.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_PROTECTION_DOMAIN" num="6">
-	    Reference from a class to its protection domain.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_INTERFACE" num="7">
+          <constant id="JVMTI_HEAP_REFERENCE_CLASS" num="1">
+            Reference from an object to its class.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_FIELD" num="2">
+            Reference from an object to the value of one of its instance fields.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_ARRAY_ELEMENT" num="3">
+            Reference from an array to one of its elements.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_CLASS_LOADER" num="4">
+            Reference from a class to its class loader.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_SIGNERS" num="5">
+            Reference from a class to its signers array.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_PROTECTION_DOMAIN" num="6">
+            Reference from a class to its protection domain.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_INTERFACE" num="7">
             Reference from a class to one of its interfaces.
             Note: interfaces are defined via a constant pool reference,
             so the referenced interfaces may also be reported with a
             <code>JVMTI_HEAP_REFERENCE_CONSTANT_POOL</code> reference kind.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_STATIC_FIELD" num="8">
-	    Reference from a class to the value of one of its static fields.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_CONSTANT_POOL" num="9">
-	    Reference from a class to a resolved entry in the constant pool.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_SUPERCLASS" num="10">
-            Reference from a class to its superclass.
-            A callback is not sent if the superclass is <code>java.lang.Object</code>.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_STATIC_FIELD" num="8">
+            Reference from a class to the value of one of its static fields.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_CONSTANT_POOL" num="9">
+            Reference from a class to a resolved entry in the constant pool.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_SUPERCLASS" num="10">
+            Reference from a class to its superclass.
+            A callback is not sent if the superclass is <code>java.lang.Object</code>.
             Note: loaded classes define superclasses via a constant pool
             reference, so the referenced superclass may also be reported with
             a <code>JVMTI_HEAP_REFERENCE_CONSTANT_POOL</code> reference kind.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_JNI_GLOBAL" num="21">
-	    Heap root reference: JNI global reference.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_SYSTEM_CLASS" num="22">
-	    Heap root reference: System class.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_MONITOR" num="23">
-	    Heap root reference: monitor.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_STACK_LOCAL" num="24">
-	    Heap root reference: local variable on the stack.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_JNI_LOCAL" num="25">
-	    Heap root reference: JNI local reference.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_THREAD" num="26">
-	    Heap root reference: Thread.
-	  </constant>
-	  <constant id="JVMTI_HEAP_REFERENCE_OTHER" num="27">
-	    Heap root reference: other heap root reference.
-	  </constant>
-	</constants>
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_JNI_GLOBAL" num="21">
+            Heap root reference: JNI global reference.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_SYSTEM_CLASS" num="22">
+            Heap root reference: System class.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_MONITOR" num="23">
+            Heap root reference: monitor.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_STACK_LOCAL" num="24">
+            Heap root reference: local variable on the stack.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_JNI_LOCAL" num="25">
+            Heap root reference: JNI local reference.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_THREAD" num="26">
+            Heap root reference: Thread.
+          </constant>
+          <constant id="JVMTI_HEAP_REFERENCE_OTHER" num="27">
+            Heap root reference: other heap root reference.
+          </constant>
+        </constants>
 
         <p/>
         Definitions for the single character type descriptors of
         primitive types.
 
         <constants id="jvmtiPrimitiveType"
                    label="Primitive Type Enumeration"
                    kind="enum"
                    since="1.1">
-	  <constant id="JVMTI_PRIMITIVE_TYPE_BOOLEAN" num="90">
+          <constant id="JVMTI_PRIMITIVE_TYPE_BOOLEAN" num="90">
             'Z' - Java programming language <code>boolean</code> - JNI <code>jboolean</code>
-	  </constant>
-	  <constant id="JVMTI_PRIMITIVE_TYPE_BYTE" num="66">
+          </constant>
+          <constant id="JVMTI_PRIMITIVE_TYPE_BYTE" num="66">
             'B' - Java programming language <code>byte</code> - JNI <code>jbyte</code>
-	  </constant>
-	  <constant id="JVMTI_PRIMITIVE_TYPE_CHAR" num="67">
+          </constant>
+          <constant id="JVMTI_PRIMITIVE_TYPE_CHAR" num="67">
             'C' - Java programming language <code>char</code> - JNI <code>jchar</code>
-	  </constant>
-	  <constant id="JVMTI_PRIMITIVE_TYPE_SHORT" num="83">
+          </constant>
+          <constant id="JVMTI_PRIMITIVE_TYPE_SHORT" num="83">
             'S' - Java programming language <code>short</code> - JNI <code>jshort</code>
-	  </constant>
-	  <constant id="JVMTI_PRIMITIVE_TYPE_INT" num="73">
+          </constant>
+          <constant id="JVMTI_PRIMITIVE_TYPE_INT" num="73">
             'I' - Java programming language <code>int</code> - JNI <code>jint</code>
-	  </constant>
-	  <constant id="JVMTI_PRIMITIVE_TYPE_LONG" num="74">
+          </constant>
+          <constant id="JVMTI_PRIMITIVE_TYPE_LONG" num="74">
             'J' - Java programming language <code>long</code> - JNI <code>jlong</code>
-	  </constant>
-	  <constant id="JVMTI_PRIMITIVE_TYPE_FLOAT" num="70">
+          </constant>
+          <constant id="JVMTI_PRIMITIVE_TYPE_FLOAT" num="70">
             'F' - Java programming language <code>float</code> - JNI <code>jfloat</code>
-	  </constant>
-	  <constant id="JVMTI_PRIMITIVE_TYPE_DOUBLE" num="68">
+          </constant>
+          <constant id="JVMTI_PRIMITIVE_TYPE_DOUBLE" num="68">
             'D' - Java programming language <code>double</code> - JNI <code>jdouble</code>
-	  </constant>
-	</constants>
+          </constant>
+        </constants>
     </intro>
 
       <typedef id="jvmtiHeapReferenceInfoField"
                label="Reference information structure for Field references"
                since="1.1">
         <description>
           Reference information returned for
           <datalink id="JVMTI_HEAP_REFERENCE_FIELD"/> and
           <datalink id="JVMTI_HEAP_REFERENCE_STATIC_FIELD"/> references.
         </description>
-	<field id="index">
-	  <jint/>
-	  <description>
+        <field id="index">
+          <jint/>
+          <description>
             For <datalink id="JVMTI_HEAP_REFERENCE_FIELD"/>, the
             referrer object is not a class or an interface.
             In this case, <code>index</code> is the index of the field
             in the class of the referrer object.
             This class is referred to below as <i>C</i>.
@@ -3534,14 +3523,19 @@
             order: a, b; and that the fields of <code>C2</code> are
             returned in the order: q, r.
             An instance of class <code>C1</code> will have the
             following field indices:
             <blockquote><table>
+              <tr class="bgLight">
+                <th class="centered" scope="col">Field</th>
+                <th class="centered" scope="col">Index</th>
+                <th scope="col">Description</th>
+              </tr>
               <tr>
-                <td class="centered">
+                <th class="centered" scope="row">
                   a
-                </td>
+                </th>
                 <td class="centered">
                   2
                 </td>
                 <td>
                   The count of the fields in the interfaces
@@ -3549,13 +3543,13 @@
                   <code>p</code> of <code>I0</code>
                   and <code>x</code> of <code>I1</code>.
                 </td>
               </tr>
               <tr>
-                <td class="centered">
+                <th class="centered" scope="row">
                   b
-                </td>
+                </th>
                 <td class="centered">
                   3
                 </td>
                 <td>
                   the subsequent index.
@@ -3565,14 +3559,19 @@
             The class <code>C1</code> will have the same field indices.
             <p/>
             An instance of class <code>C2</code> will have the
             following field indices:
             <blockquote><table>
+              <tr class="bgLight">
+                <th class="centered" scope="col">Field</th>
+                <th class="centered" scope="col">Index</th>
+                <th scope="col">Description</th>
+              </tr>
               <tr>
-                <td class="centered">
+                <th class="centered" scope="row">
                   a
-                </td>
+                </th>
                 <td class="centered">
                   3
                 </td>
                 <td>
                   The count of the fields in the interfaces
@@ -3582,35 +3581,35 @@
                   (an interface of <code>C2</code>).  Note that the field <code>p</code>
                   of <code>I0</code> is only included once.
                 </td>
               </tr>
               <tr>
-                <td class="centered">
+                <th class="centered" scope="row">
                   b
-                </td>
+                </th>
                 <td class="centered">
                   4
                 </td>
                 <td>
                   the subsequent index to "a".
                 </td>
               </tr>
               <tr>
-                <td class="centered">
+                <th class="centered" scope="row">
                   q
-                </td>
+                </th>
                 <td class="centered">
                   5
                 </td>
                 <td>
                   the subsequent index to "b".
                 </td>
               </tr>
               <tr>
-                <td class="centered">
+                <th class="centered" scope="row">
                   r
-                </td>
+                </th>
                 <td class="centered">
                   6
                 </td>
                 <td>
                   the subsequent index to "q".
@@ -3624,413 +3623,418 @@
             callbacks, but all indices are shown for illustrative purposes.
             <p/>
             The interface <code>I1</code> will have the
             following field indices:
             <blockquote><table>
+              <tr class="bgLight">
+                <th class="centered" scope="col">Field</th>
+                <th class="centered" scope="col">Index</th>
+                <th scope="col">Description</th>
+              </tr>
               <tr>
-                <td class="centered">
+                <th class="centered" scope="row">
                   x
-                </td>
+                </th>
                 <td class="centered">
                   1
                 </td>
                 <td>
                   The count of the fields in the superinterfaces
                   of <code>I1</code> is one (<i>n</i>=1):
                   <code>p</code> of <code>I0</code>.
                 </td>
               </tr>
             </table></blockquote>
-	  </description>
-	</field>
+          </description>
+        </field>
       </typedef>
 
       <typedef id="jvmtiHeapReferenceInfoArray"
                label="Reference information structure for Array references"
                since="1.1">
         <description>
           Reference information returned for
          <datalink id="JVMTI_HEAP_REFERENCE_ARRAY_ELEMENT"/> references.
         </description>
-	<field id="index">
-	  <jint/>
-	  <description>
-	    The array index.
-	  </description>
-	</field>
+        <field id="index">
+          <jint/>
+          <description>
+            The array index.
+          </description>
+        </field>
       </typedef>
 
       <typedef id="jvmtiHeapReferenceInfoConstantPool"
                label="Reference information structure for Constant Pool references"
                since="1.1">
         <description>
           Reference information returned for
           <datalink id="JVMTI_HEAP_REFERENCE_CONSTANT_POOL"/> references.
         </description>
-	<field id="index">
-	  <jint/>
-	  <description>
-	    The index into the constant pool of the class. See the description in
+        <field id="index">
+          <jint/>
+          <description>
+            The index into the constant pool of the class. See the description in
       <vmspec chapter="4.4"/>.
-	  </description>
-	</field>
+          </description>
+        </field>
       </typedef>
 
       <typedef id="jvmtiHeapReferenceInfoStackLocal"
                label="Reference information structure for Local Variable references"
                since="1.1">
         <description>
           Reference information returned for
           <datalink id="JVMTI_HEAP_REFERENCE_STACK_LOCAL"/> references.
         </description>
         <field id="thread_tag">
-	  <jlong/>
-	  <description>
-	    The tag of the thread corresponding to this stack, zero if not tagged.
-	  </description>
-	</field>
+          <jlong/>
+          <description>
+            The tag of the thread corresponding to this stack, zero if not tagged.
+          </description>
+        </field>
         <field id="thread_id">
-	  <jlong/>
-	  <description>
-	    The unique thread ID of the thread corresponding to this stack.
-	  </description>
-	</field>
+          <jlong/>
+          <description>
+            The unique thread ID of the thread corresponding to this stack.
+          </description>
+        </field>
         <field id="depth">
-	  <jint/>
-	  <description>
-	    The depth of the frame.
-	  </description>
-	</field>
+          <jint/>
+          <description>
+            The depth of the frame.
+          </description>
+        </field>
         <field id="method">
-	  <jmethodID/>
-	  <description>
-	    The method executing in this frame.
-	  </description>
-	</field>
+          <jmethodID/>
+          <description>
+            The method executing in this frame.
+          </description>
+        </field>
         <field id="location">
-	  <jlocation/>
-	  <description>
-	    The currently executing location in this frame.
-	  </description>
-	</field>
+          <jlocation/>
+          <description>
+            The currently executing location in this frame.
+          </description>
+        </field>
         <field id="slot">
-	  <jint/>
-	  <description>
-	    The slot number of the local variable.
-	  </description>
-	</field>
+          <jint/>
+          <description>
+            The slot number of the local variable.
+          </description>
+        </field>
       </typedef>
 
       <typedef id="jvmtiHeapReferenceInfoJniLocal"
                label="Reference information structure for JNI local references"
                since="1.1">
         <description>
           Reference information returned for
           <datalink id="JVMTI_HEAP_REFERENCE_JNI_LOCAL"/> references.
         </description>
         <field id="thread_tag">
-	  <jlong/>
-	  <description>
-	    The tag of the thread corresponding to this stack, zero if not tagged.
-	  </description>
-	</field>
+          <jlong/>
+          <description>
+            The tag of the thread corresponding to this stack, zero if not tagged.
+          </description>
+        </field>
         <field id="thread_id">
-	  <jlong/>
-	  <description>
-	    The unique thread ID of the thread corresponding to this stack.
-	  </description>
-	</field>
+          <jlong/>
+          <description>
+            The unique thread ID of the thread corresponding to this stack.
+          </description>
+        </field>
         <field id="depth">
-	  <jint/>
-	  <description>
-	    The depth of the frame.
-	  </description>
-	</field>
+          <jint/>
+          <description>
+            The depth of the frame.
+          </description>
+        </field>
         <field id="method">
-	  <jmethodID/>
-	  <description>
-	    The method executing in this frame.
-	  </description>
-	</field>
+          <jmethodID/>
+          <description>
+            The method executing in this frame.
+          </description>
+        </field>
       </typedef>
 
       <typedef id="jvmtiHeapReferenceInfoReserved"
                label="Reference information structure for Other references"
                since="1.1">
         <description>
           Reference information returned for other references.
         </description>
         <field id="reserved1">
-	  <jlong/>
-	  <description>
-	    reserved for future use.
-	  </description>
-	</field>
+          <jlong/>
+          <description>
+            reserved for future use.
+          </description>
+        </field>
         <field id="reserved2">
-	  <jlong/>
-	  <description>
-	    reserved for future use.
-	  </description>
-	</field>
+          <jlong/>
+          <description>
+            reserved for future use.
+          </description>
+        </field>
         <field id="reserved3">
-	  <jlong/>
-	  <description>
-	    reserved for future use.
-	  </description>
-	</field>
+          <jlong/>
+          <description>
+            reserved for future use.
+          </description>
+        </field>
         <field id="reserved4">
-	  <jlong/>
-	  <description>
-	    reserved for future use.
-	  </description>
-	</field>
+          <jlong/>
+          <description>
+            reserved for future use.
+          </description>
+        </field>
         <field id="reserved5">
-	  <jlong/>
-	  <description>
-	    reserved for future use.
-	  </description>
-	</field>
+          <jlong/>
+          <description>
+            reserved for future use.
+          </description>
+        </field>
         <field id="reserved6">
-	  <jlong/>
-	  <description>
-	    reserved for future use.
-	  </description>
-	</field>
+          <jlong/>
+          <description>
+            reserved for future use.
+          </description>
+        </field>
         <field id="reserved7">
-	  <jlong/>
-	  <description>
-	    reserved for future use.
-	  </description>
-	</field>
+          <jlong/>
+          <description>
+            reserved for future use.
+          </description>
+        </field>
         <field id="reserved8">
-	  <jlong/>
-	  <description>
-	    reserved for future use.
-	  </description>
-	</field>
+          <jlong/>
+          <description>
+            reserved for future use.
+          </description>
+        </field>
       </typedef>
 
       <uniontypedef id="jvmtiHeapReferenceInfo"
                label="Reference information structure"
                since="1.1">
         <description>
           The information returned about referrers.
           Represented as a union of the various kinds of reference information.
         </description>
-	<field id="field">
-	  <struct>jvmtiHeapReferenceInfoField</struct>
-	  <description>
-	    The referrer information for
+        <field id="field">
+          <struct>jvmtiHeapReferenceInfoField</struct>
+          <description>
+            The referrer information for
             <datalink id="JVMTI_HEAP_REFERENCE_FIELD"/>
             and <datalink id="JVMTI_HEAP_REFERENCE_STATIC_FIELD"/> references.
-	  </description>
-	</field>
-	<field id="array">
-	  <struct>jvmtiHeapReferenceInfoArray</struct>
-	  <description>
-	    The referrer information for
-	    For <datalink id="JVMTI_HEAP_REFERENCE_ARRAY_ELEMENT"/> references.
-	  </description>
-	</field>
-	<field id="constant_pool">
-	  <struct>jvmtiHeapReferenceInfoConstantPool</struct>
-	  <description>
-	    The referrer information for
-	    For <datalink id="JVMTI_HEAP_REFERENCE_CONSTANT_POOL"/> references.
-	  </description>
-	</field>
+          </description>
+        </field>
+        <field id="array">
+          <struct>jvmtiHeapReferenceInfoArray</struct>
+          <description>
+            The referrer information for
+            For <datalink id="JVMTI_HEAP_REFERENCE_ARRAY_ELEMENT"/> references.
+          </description>
+        </field>
+        <field id="constant_pool">
+          <struct>jvmtiHeapReferenceInfoConstantPool</struct>
+          <description>
+            The referrer information for
+            For <datalink id="JVMTI_HEAP_REFERENCE_CONSTANT_POOL"/> references.
+          </description>
+        </field>
         <field id="stack_local">
-	  <struct>jvmtiHeapReferenceInfoStackLocal</struct>
-	  <description>
-	    The referrer information for
-	    For <datalink id="JVMTI_HEAP_REFERENCE_STACK_LOCAL"/> references.
-	  </description>
-	</field>
+          <struct>jvmtiHeapReferenceInfoStackLocal</struct>
+          <description>
+            The referrer information for
+            For <datalink id="JVMTI_HEAP_REFERENCE_STACK_LOCAL"/> references.
+          </description>
+        </field>
         <field id="jni_local">
-	  <struct>jvmtiHeapReferenceInfoJniLocal</struct>
-	  <description>
-	    The referrer information for
-	    For <datalink id="JVMTI_HEAP_REFERENCE_JNI_LOCAL"/> references.
-	  </description>
-	</field>
+          <struct>jvmtiHeapReferenceInfoJniLocal</struct>
+          <description>
+            The referrer information for
+            For <datalink id="JVMTI_HEAP_REFERENCE_JNI_LOCAL"/> references.
+          </description>
+        </field>
         <field id="other">
-	  <struct>jvmtiHeapReferenceInfoReserved</struct>
-	  <description>
-	    reserved for future use.
-	  </description>
-	</field>
+          <struct>jvmtiHeapReferenceInfoReserved</struct>
+          <description>
+            reserved for future use.
+          </description>
+        </field>
       </uniontypedef>
 
       <typedef id="jvmtiHeapCallbacks"
                label="Heap callback function structure"
                since="1.1">
         <field id="heap_iteration_callback">
-	  <ptrtype>
-	    <struct>jvmtiHeapIterationCallback</struct>
-	  </ptrtype>
-	  <description>
-	    The callback to be called to describe an
-	    object in the heap. Used by the
+          <ptrtype>
+            <struct>jvmtiHeapIterationCallback</struct>
+          </ptrtype>
+          <description>
+            The callback to be called to describe an
+            object in the heap. Used by the
             <functionlink id="IterateThroughHeap"/> function, ignored by the
             <functionlink id="FollowReferences"/> function.
-	  </description>
-	</field>
+          </description>
+        </field>
         <field id="heap_reference_callback">
-	  <ptrtype>
-	    <struct>jvmtiHeapReferenceCallback</struct>
-	  </ptrtype>
-	  <description>
-	    The callback to be called to describe an
-	    object reference.  Used by the
+          <ptrtype>
+            <struct>jvmtiHeapReferenceCallback</struct>
+          </ptrtype>
+          <description>
+            The callback to be called to describe an
+            object reference.  Used by the
             <functionlink id="FollowReferences"/> function, ignored by the
             <functionlink id="IterateThroughHeap"/> function.
-	  </description>
-	</field>
+          </description>
+        </field>
         <field id="primitive_field_callback">
-	  <ptrtype>
-	    <struct>jvmtiPrimitiveFieldCallback</struct>
-	  </ptrtype>
-	  <description>
+          <ptrtype>
+            <struct>jvmtiPrimitiveFieldCallback</struct>
+          </ptrtype>
+          <description>
             The callback to be called to describe a
             primitive field.
           </description>
-	</field>
+        </field>
         <field id="array_primitive_value_callback">
-	  <ptrtype>
-	    <struct>jvmtiArrayPrimitiveValueCallback</struct>
-	  </ptrtype>
-	  <description>
-	    The callback to be called to describe an
-	    array of primitive values.
-	  </description>
-	</field>
+          <ptrtype>
+            <struct>jvmtiArrayPrimitiveValueCallback</struct>
+          </ptrtype>
+          <description>
+            The callback to be called to describe an
+            array of primitive values.
+          </description>
+        </field>
         <field id="string_primitive_value_callback">
-	  <ptrtype>
-	    <struct>jvmtiStringPrimitiveValueCallback</struct>
-	  </ptrtype>
-	  <description>
-	    The callback to be called to describe a String value.
-	  </description>
-	</field>
+          <ptrtype>
+            <struct>jvmtiStringPrimitiveValueCallback</struct>
+          </ptrtype>
+          <description>
+            The callback to be called to describe a String value.
+          </description>
+        </field>
         <field id="reserved5">
-	  <ptrtype>
-	    <struct>jvmtiReservedCallback</struct>
-	  </ptrtype>
-	  <description>
-	    Reserved for future use..
-	  </description>
-	</field>
+          <ptrtype>
+            <struct>jvmtiReservedCallback</struct>
+          </ptrtype>
+          <description>
+            Reserved for future use..
+          </description>
+        </field>
         <field id="reserved6">
-	  <ptrtype>
-	    <struct>jvmtiReservedCallback</struct>
-	  </ptrtype>
-	  <description>
-	    Reserved for future use..
-	  </description>
-	</field>
+          <ptrtype>
+            <struct>jvmtiReservedCallback</struct>
+          </ptrtype>
+          <description>
+            Reserved for future use..
+          </description>
+        </field>
         <field id="reserved7">
-	  <ptrtype>
-	    <struct>jvmtiReservedCallback</struct>
-	  </ptrtype>
-	  <description>
-	    Reserved for future use..
-	  </description>
-	</field>
+          <ptrtype>
+            <struct>jvmtiReservedCallback</struct>
+          </ptrtype>
+          <description>
+            Reserved for future use..
+          </description>
+        </field>
         <field id="reserved8">
-	  <ptrtype>
-	    <struct>jvmtiReservedCallback</struct>
-	  </ptrtype>
-	  <description>
-	    Reserved for future use..
-	  </description>
-	</field>
+          <ptrtype>
+            <struct>jvmtiReservedCallback</struct>
+          </ptrtype>
+          <description>
+            Reserved for future use..
+          </description>
+        </field>
         <field id="reserved9">
-	  <ptrtype>
-	    <struct>jvmtiReservedCallback</struct>
-	  </ptrtype>
-	  <description>
-	    Reserved for future use..
-	  </description>
-	</field>
+          <ptrtype>
+            <struct>jvmtiReservedCallback</struct>
+          </ptrtype>
+          <description>
+            Reserved for future use..
+          </description>
+        </field>
         <field id="reserved10">
-	  <ptrtype>
-	    <struct>jvmtiReservedCallback</struct>
-	  </ptrtype>
-	  <description>
-	    Reserved for future use..
-	  </description>
-	</field>
+          <ptrtype>
+            <struct>jvmtiReservedCallback</struct>
+          </ptrtype>
+          <description>
+            Reserved for future use..
+          </description>
+        </field>
         <field id="reserved11">
-	  <ptrtype>
-	    <struct>jvmtiReservedCallback</struct>
-	  </ptrtype>
-	  <description>
-	    Reserved for future use..
-	  </description>
-	</field>
+          <ptrtype>
+            <struct>jvmtiReservedCallback</struct>
+          </ptrtype>
+          <description>
+            Reserved for future use..
+          </description>
+        </field>
         <field id="reserved12">
-	  <ptrtype>
-	    <struct>jvmtiReservedCallback</struct>
-	  </ptrtype>
-	  <description>
-	    Reserved for future use..
-	  </description>
-	</field>
+          <ptrtype>
+            <struct>jvmtiReservedCallback</struct>
+          </ptrtype>
+          <description>
+            Reserved for future use..
+          </description>
+        </field>
         <field id="reserved13">
-	  <ptrtype>
-	    <struct>jvmtiReservedCallback</struct>
-	  </ptrtype>
-	  <description>
-	    Reserved for future use..
-	  </description>
-	</field>
+          <ptrtype>
+            <struct>jvmtiReservedCallback</struct>
+          </ptrtype>
+          <description>
+            Reserved for future use..
+          </description>
+        </field>
         <field id="reserved14">
-	  <ptrtype>
-	    <struct>jvmtiReservedCallback</struct>
-	  </ptrtype>
-	  <description>
-	    Reserved for future use..
-	  </description>
-	</field>
+          <ptrtype>
+            <struct>jvmtiReservedCallback</struct>
+          </ptrtype>
+          <description>
+            Reserved for future use..
+          </description>
+        </field>
         <field id="reserved15">
-	  <ptrtype>
-	    <struct>jvmtiReservedCallback</struct>
-	  </ptrtype>
-	  <description>
-	    Reserved for future use..
-	  </description>
-	</field>
+          <ptrtype>
+            <struct>jvmtiReservedCallback</struct>
+          </ptrtype>
+          <description>
+            Reserved for future use..
+          </description>
+        </field>
       </typedef>
 
 
     <intro>
       <rationale>
-	The heap dumping functionality (below) uses a callback
-	for each object.  While it would seem that a buffered approach
-	would provide better throughput, tests do
-	not show this to be the case--possibly due to locality of
-	memory reference or array access overhead.
+        The heap dumping functionality (below) uses a callback
+        for each object.  While it would seem that a buffered approach
+        would provide better throughput, tests do
+        not show this to be the case--possibly due to locality of
+        memory reference or array access overhead.
       </rationale>
 
       <issue>
         Still under investigation as to if java.lang.ref references
-	are reported as a different type of reference.
+        are reported as a different type of reference.
       </issue>
 
       <issue>
         Should or can an indication of the cost or relative cost of
-	these operations be included?
+        these operations be included?
       </issue>
 
     </intro>
 
     <callback id="jvmtiHeapIterationCallback" since="1.1">
       <jint/>
       <synopsis>Heap Iteration Callback</synopsis>
       <description>
         Agent supplied callback function.
-	Describes (but does not pass in) an object in the heap.
+        Describes (but does not pass in) an object in the heap.
         <p/>
         This function should return a bit vector of the desired
         <datalink id="jvmtiHeapVisitControl">visit control flags</datalink>.
         This will determine if the entire iteration should be aborted
         (the <code>JVMTI_VISIT_OBJECTS</code> flag is ignored).
@@ -4038,97 +4042,97 @@
         See the <internallink id="heapCallbacks">heap callback
         function restrictions</internallink>.
       </description>
       <parameters>
         <param id="class_tag">
-	  <jlong/>
-	  <description>
-	    The tag of the class of object (zero if the class is not tagged).
-	    If the object represents a runtime class,
+          <jlong/>
+          <description>
+            The tag of the class of object (zero if the class is not tagged).
+            If the object represents a runtime class,
             the <code>class_tag</code> is the tag
-	    associated with <code>java.lang.Class</code>
+            associated with <code>java.lang.Class</code>
             (zero if <code>java.lang.Class</code> is not tagged).
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="size">
-	  <jlong/>
-	  <description>
-	    Size of the object (in bytes). See <functionlink id="GetObjectSize"/>.
-	  </description>
-	</param>
+          <jlong/>
+          <description>
+            Size of the object (in bytes). See <functionlink id="GetObjectSize"/>.
+          </description>
+        </param>
         <param id="tag_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    The object tag value, or zero if the object is not tagged.
-	    To set the tag value to be associated with the object
-	    the agent sets the <code>jlong</code> pointed to by the parameter.
-	  </description>
-	</param>
+          <outptr><jlong/></outptr>
+          <description>
+            The object tag value, or zero if the object is not tagged.
+            To set the tag value to be associated with the object
+            the agent sets the <code>jlong</code> pointed to by the parameter.
+          </description>
+        </param>
         <param id="length">
-	  <jint/>
-	  <description>
-	    If this object is an array, the length of the array. Otherwise negative one (-1).
-	  </description>
-	</param>
+          <jint/>
+          <description>
+            If this object is an array, the length of the array. Otherwise negative one (-1).
+          </description>
+        </param>
         <param id="user_data">
-	  <outptr><void/></outptr>
-	  <description>
-	    The user supplied data that was passed into the iteration function.
-	  </description>
-	</param>
+          <outptr><void/></outptr>
+          <description>
+            The user supplied data that was passed into the iteration function.
+          </description>
+        </param>
       </parameters>
     </callback>
 
     <callback id="jvmtiHeapReferenceCallback" since="1.1">
       <jint/>
       <synopsis>Heap Reference Callback</synopsis>
       <description>
         Agent supplied callback function.
-	Describes a reference from an object or the VM (the referrer) to another object
-	(the referree) or a heap root to a referree.
+        Describes a reference from an object or the VM (the referrer) to another object
+        (the referree) or a heap root to a referree.
         <p/>
         This function should return a bit vector of the desired
         <datalink id="jvmtiHeapVisitControl">visit control flags</datalink>.
         This will determine if the objects referenced by the referree
         should be visited or if the entire iteration should be aborted.
         <p/>
         See the <internallink id="heapCallbacks">heap callback
         function restrictions</internallink>.
       </description>
       <parameters>
-	<param id="reference_kind">
-	  <enum>jvmtiHeapReferenceKind</enum>
-	  <description>
-	    The kind of reference.
-	  </description>
-	</param>
-	<param id="reference_info">
-	  <inptr>
-	    <struct>jvmtiHeapReferenceInfo</struct>
-	  </inptr>
-	  <description>
-	    Details about the reference.
+        <param id="reference_kind">
+          <enum>jvmtiHeapReferenceKind</enum>
+          <description>
+            The kind of reference.
+          </description>
+        </param>
+        <param id="reference_info">
+          <inptr>
+            <struct>jvmtiHeapReferenceInfo</struct>
+          </inptr>
+          <description>
+            Details about the reference.
             Set when the <datalink id="jvmtiHeapReferenceCallback.reference_kind">reference_kind</datalink> is
             <datalink id="JVMTI_HEAP_REFERENCE_FIELD"/>,
-	    <datalink id="JVMTI_HEAP_REFERENCE_STATIC_FIELD"/>,
-	    <datalink id="JVMTI_HEAP_REFERENCE_ARRAY_ELEMENT"/>,
-	    <datalink id="JVMTI_HEAP_REFERENCE_CONSTANT_POOL"/>,
+            <datalink id="JVMTI_HEAP_REFERENCE_STATIC_FIELD"/>,
+            <datalink id="JVMTI_HEAP_REFERENCE_ARRAY_ELEMENT"/>,
+            <datalink id="JVMTI_HEAP_REFERENCE_CONSTANT_POOL"/>,
             <datalink id="JVMTI_HEAP_REFERENCE_STACK_LOCAL"/>,
             or <datalink id="JVMTI_HEAP_REFERENCE_JNI_LOCAL"/>.
             Otherwise <code>NULL</code>.
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="class_tag">
-	  <jlong/>
-	  <description>
-	    The tag of the class of referree object (zero if the class is not tagged).
+          <jlong/>
+          <description>
+            The tag of the class of referree object (zero if the class is not tagged).
             If the referree object represents a runtime class,
             the <code>class_tag</code> is the tag
             associated with <code>java.lang.Class</code>
             (zero if <code>java.lang.Class</code> is not tagged).
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="referrer_class_tag">
           <jlong/>
           <description>
             The tag of the class of the referrer object (zero if the class is not tagged
             or the referree is a heap root). If the referrer object represents a runtime
@@ -4136,51 +4140,51 @@
             the <code>java.lang.Class</code>
             (zero if <code>java.lang.Class</code> is not tagged).
           </description>
         </param>
         <param id="size">
-	  <jlong/>
-	  <description>
-	    Size of the referree object (in bytes).
+          <jlong/>
+          <description>
+            Size of the referree object (in bytes).
             See <functionlink id="GetObjectSize"/>.
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="tag_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    Points to the referree object tag value, or zero if the object is not
-	    tagged.
-	    To set the tag value to be associated with the object
-	    the agent sets the <code>jlong</code> pointed to by the parameter.
-	  </description>
-	</param>
+          <outptr><jlong/></outptr>
+          <description>
+            Points to the referree object tag value, or zero if the object is not
+            tagged.
+            To set the tag value to be associated with the object
+            the agent sets the <code>jlong</code> pointed to by the parameter.
+          </description>
+        </param>
         <param id="referrer_tag_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    Points to the tag of the referrer object, or
+          <outptr><jlong/></outptr>
+          <description>
+            Points to the tag of the referrer object, or
             points to the zero if the referrer
-	    object is not tagged.
+            object is not tagged.
             <code>NULL</code> if the referrer in not an object (that is,
             this callback is reporting a heap root).
-	    To set the tag value to be associated with the referrer object
-	    the agent sets the <code>jlong</code> pointed to by the parameter.
+            To set the tag value to be associated with the referrer object
+            the agent sets the <code>jlong</code> pointed to by the parameter.
             If this callback is reporting a reference from an object to itself,
             <code>referrer_tag_ptr == tag_ptr</code>.
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="length">
-	  <jint/>
-	  <description>
-	    If this object is an array, the length of the array. Otherwise negative one (-1).
-	  </description>
-	</param>
+          <jint/>
+          <description>
+            If this object is an array, the length of the array. Otherwise negative one (-1).
+          </description>
+        </param>
         <param id="user_data">
-	  <outptr><void/></outptr>
-	  <description>
-	    The user supplied data that was passed into the iteration function.
-	  </description>
-	</param>
+          <outptr><void/></outptr>
+          <description>
+            The user supplied data that was passed into the iteration function.
+          </description>
+        </param>
       </parameters>
     </callback>
 
     <callback id="jvmtiPrimitiveFieldCallback" since="1.1">
       <jint/>
@@ -4199,71 +4203,71 @@
         <p/>
         See the <internallink id="heapCallbacks">heap callback
         function restrictions</internallink>.
       </description>
       <parameters>
-	<param id="kind">
-	  <enum>jvmtiHeapReferenceKind</enum>
-	  <description>
-	    The kind of field -- instance or static (<datalink id="JVMTI_HEAP_REFERENCE_FIELD"/> or
+        <param id="kind">
+          <enum>jvmtiHeapReferenceKind</enum>
+          <description>
+            The kind of field -- instance or static (<datalink id="JVMTI_HEAP_REFERENCE_FIELD"/> or
             <datalink id="JVMTI_HEAP_REFERENCE_STATIC_FIELD"/>).
-	  </description>
-	</param>
-	<param id="info">
-	  <inptr>
-	    <struct>jvmtiHeapReferenceInfo</struct>
-	  </inptr>
-	  <description>
-	    Which field (the field index).
-	  </description>
-	</param>
+          </description>
+        </param>
+        <param id="info">
+          <inptr>
+            <struct>jvmtiHeapReferenceInfo</struct>
+          </inptr>
+          <description>
+            Which field (the field index).
+          </description>
+        </param>
         <param id="object_class_tag">
-	  <jlong/>
-	  <description>
+          <jlong/>
+          <description>
             The tag of the class of the object (zero if the class is not tagged).
             If the object represents a runtime class, the
             <code>object_class_tag</code> is the tag
             associated with <code>java.lang.Class</code>
             (zero if <code>java.lang.Class</code> is not tagged).
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="object_tag_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    Points to the tag of the object, or zero if the object is not
-	    tagged.
-	    To set the tag value to be associated with the object
-	    the agent sets the <code>jlong</code> pointed to by the parameter.
-	  </description>
-	</param>
+          <outptr><jlong/></outptr>
+          <description>
+            Points to the tag of the object, or zero if the object is not
+            tagged.
+            To set the tag value to be associated with the object
+            the agent sets the <code>jlong</code> pointed to by the parameter.
+          </description>
+        </param>
         <param id="value">
-	  <jvalue/>
-	  <description>
-	    The value of the field.
-	  </description>
-	</param>
+          <jvalue/>
+          <description>
+            The value of the field.
+          </description>
+        </param>
         <param id="value_type">
-	  <enum>jvmtiPrimitiveType</enum>
-	  <description>
-	    The type of the field.
-	  </description>
-	</param>
+          <enum>jvmtiPrimitiveType</enum>
+          <description>
+            The type of the field.
+          </description>
+        </param>
         <param id="user_data">
-	  <outptr><void/></outptr>
-	  <description>
-	    The user supplied data that was passed into the iteration function.
-	  </description>
-	</param>
+          <outptr><void/></outptr>
+          <description>
+            The user supplied data that was passed into the iteration function.
+          </description>
+        </param>
       </parameters>
     </callback>
 
     <callback id="jvmtiArrayPrimitiveValueCallback" since="1.1">
       <jint/>
       <synopsis>Array Primitive Value Callback</synopsis>
       <description>
         Agent supplied callback function.
-	Describes the values in an array of a primitive type.
+        Describes the values in an array of a primitive type.
         <p/>
         This function should return a bit vector of the desired
         <datalink id="jvmtiHeapVisitControl">visit control flags</datalink>.
         This will determine if the entire iteration should be aborted
         (the <code>JVMTI_VISIT_OBJECTS</code> flag is ignored).
@@ -4271,65 +4275,65 @@
         See the <internallink id="heapCallbacks">heap callback
         function restrictions</internallink>.
       </description>
       <parameters>
         <param id="class_tag">
-	  <jlong/>
-	  <description>
-	    The tag of the class of the array object (zero if the class is not tagged).
-	  </description>
-	</param>
+          <jlong/>
+          <description>
+            The tag of the class of the array object (zero if the class is not tagged).
+          </description>
+        </param>
         <param id="size">
-	  <jlong/>
-	  <description>
-	    Size of the array (in bytes).
+          <jlong/>
+          <description>
+            Size of the array (in bytes).
             See <functionlink id="GetObjectSize"/>.
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="tag_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    Points to the tag of the array object, or zero if the object is not
-	    tagged.
-	    To set the tag value to be associated with the object
-	    the agent sets the <code>jlong</code> pointed to by the parameter.
-	  </description>
-	</param>
-        <param id="element_count">
-	  <jint/>
-	  <description>
-	    The length of the primitive array.
-	  </description>
-	</param>
+          <outptr><jlong/></outptr>
+          <description>
+            Points to the tag of the array object, or zero if the object is not
+            tagged.
+            To set the tag value to be associated with the object
+            the agent sets the <code>jlong</code> pointed to by the parameter.
+          </description>
+        </param>
+        <param id="element_count">
+          <jint/>
+          <description>
+            The length of the primitive array.
+          </description>
+        </param>
         <param id="element_type">
-	  <enum>jvmtiPrimitiveType</enum>
-	  <description>
-	    The type of the elements of the array.
-	  </description>
-	</param>
+          <enum>jvmtiPrimitiveType</enum>
+          <description>
+            The type of the elements of the array.
+          </description>
+        </param>
         <param id="elements">
-	  <vmbuf><void/></vmbuf>
-	  <description>
-	    The elements of the array in a packed array of <code>element_count</code>
+          <vmbuf><void/></vmbuf>
+          <description>
+            The elements of the array in a packed array of <code>element_count</code>
             items of <code>element_type</code> size each.
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="user_data">
-	  <outptr><void/></outptr>
-	  <description>
-	    The user supplied data that was passed into the iteration function.
-	  </description>
-	</param>
+          <outptr><void/></outptr>
+          <description>
+            The user supplied data that was passed into the iteration function.
+          </description>
+        </param>
       </parameters>
     </callback>
 
     <callback id="jvmtiStringPrimitiveValueCallback" since="1.1">
       <jint/>
       <synopsis>String Primitive Value Callback</synopsis>
       <description>
         Agent supplied callback function.
-	Describes the value of a java.lang.String.
+        Describes the value of a java.lang.String.
         <p/>
         This function should return a bit vector of the desired
         <datalink id="jvmtiHeapVisitControl">visit control flags</datalink>.
         This will determine if the entire iteration should be aborted
         (the <code>JVMTI_VISIT_OBJECTS</code> flag is ignored).
@@ -4337,52 +4341,52 @@
         See the <internallink id="heapCallbacks">heap callback
         function restrictions</internallink>.
       </description>
       <parameters>
         <param id="class_tag">
-	  <jlong/>
-	  <description>
-	    The tag of the class of the String class (zero if the class is not tagged).
+          <jlong/>
+          <description>
+            The tag of the class of the String class (zero if the class is not tagged).
             <issue>Is this needed?</issue>
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="size">
-	  <jlong/>
-	  <description>
-	    Size of the string (in bytes).
+          <jlong/>
+          <description>
+            Size of the string (in bytes).
             See <functionlink id="GetObjectSize"/>.
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="tag_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    Points to the tag of the String object, or zero if the object is not
-	    tagged.
-	    To set the tag value to be associated with the object
-	    the agent sets the <code>jlong</code> pointed to by the parameter.
-	  </description>
-	</param>
+          <outptr><jlong/></outptr>
+          <description>
+            Points to the tag of the String object, or zero if the object is not
+            tagged.
+            To set the tag value to be associated with the object
+            the agent sets the <code>jlong</code> pointed to by the parameter.
+          </description>
+        </param>
         <param id="value">
-	  <vmbuf><jchar/></vmbuf>
-	  <description>
-	    The value of the String, encoded as a Unicode string.
-	  </description>
-	</param>
+          <vmbuf><jchar/></vmbuf>
+          <description>
+            The value of the String, encoded as a Unicode string.
+          </description>
+        </param>
         <param id="value_length">
-	  <jint/>
-	  <description>
-	    The length of the string.
+          <jint/>
+          <description>
+            The length of the string.
             The length is equal to the number of 16-bit Unicode
             characters in the string.
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="user_data">
-	  <outptr><void/></outptr>
-	  <description>
-	    The user supplied data that was passed into the iteration function.
-	  </description>
-	</param>
+          <outptr><void/></outptr>
+          <description>
+            The user supplied data that was passed into the iteration function.
+          </description>
+        </param>
       </parameters>
     </callback>
 
 
     <callback id="jvmtiReservedCallback" since="1.1">
@@ -4400,13 +4404,13 @@
       <description>
         This function initiates a traversal over the objects that are
         directly and indirectly reachable from the specified object or,
         if <code>initial_object</code> is not specified, all objects
         reachable from the heap roots.
-	The heap root are the set of system classes,
-	JNI globals, references from thread stacks, and other objects used as roots
-	for the purposes of garbage collection.
+        The heap root are the set of system classes,
+        JNI globals, references from thread stacks, and other objects used as roots
+        for the purposes of garbage collection.
         <p/>
         This function operates by traversing the reference graph.
         Let <i>A</i>, <i>B</i>, ... represent objects.
         When a reference from <i>A</i> to <i>B</i> is traversed,
         when a reference from a heap root to <i>B</i> is traversed,
@@ -4429,11 +4433,11 @@
          id="jvmtiHeapReferenceCallback.reference_kind"><code>reference_kind</code></datalink>
          and
         <datalink
          id="jvmtiHeapReferenceCallback.reference_info"><code>reference_info</code></datalink>
         parameters of the <functionlink id="jvmtiHeapReferenceCallback"/> callback.
-	<p/>
+        <p/>
         This function reports a Java programming language view of object references,
         not a virtual machine implementation view. The following object references
         are reported when they are non-null:
         <ul>
           <li>Instance objects report references to each non-primitive instance fields
@@ -4479,24 +4483,18 @@
         is set to the array of bytes class, then only arrays of byte will be
         reported.
         The table below summarizes this:
         <p/>
         <table>
-          <tr>
+          <tr class="bgLight">
             <th/>
-            <th>
-              Controls objects visited
-            </th>
-            <th>
-              Controls objects reported
-            </th>
-            <th>
-              Controls primitives reported
-            </th>
+            <th class="centered" scope="col">Controls objects visited</th>
+            <th class="centered" scope="col">Controls objects reported</th>
+            <th class="centered" scope="col">Controls primitives reported</th>
           </tr>
           <tr>
-            <th class="leftAligned">
+            <th scope="row">
               the
               <datalink id="jvmtiHeapVisitControl">Heap Visit Control Flags</datalink>
               returned by <functionlink id="jvmtiHeapReferenceCallback"/>
             </th>
             <td class="centered">
@@ -4508,11 +4506,11 @@
             <td class="centered">
               <b>Yes</b>, since visits are controlled
             </td>
           </tr>
           <tr>
-            <th class="leftAligned">
+            <th scope="row">
               <fieldlink id="array_primitive_value_callback" struct="jvmtiHeapCallbacks"/>
               in <paramlink id="callbacks"/> set
             </th>
             <td class="centered">
               No
@@ -4523,11 +4521,11 @@
             <td class="centered">
               No
             </td>
           </tr>
           <tr>
-            <th class="leftAligned">
+            <th scope="row">
               <paramlink id="heap_filter"/>
             </th>
             <td class="centered">
               No
             </td>
@@ -4537,11 +4535,11 @@
             <td class="centered">
               <b>Yes</b>
             </td>
           </tr>
           <tr>
-            <th class="leftAligned">
+            <th scope="row">
               <paramlink id="klass"/>
             </th>
             <td class="centered">
               No
             </td>
@@ -4671,24 +4669,18 @@
         is set to the array of bytes class, then only arrays of byte will be
         reported. The table below summarizes this (contrast this with
         <functionlink id="FollowReferences"/>):
         <p/>
         <table>
-          <tr>
+          <tr class="bgLight">
             <th/>
-            <th>
-              Controls objects visited
-            </th>
-            <th>
-              Controls objects reported
-            </th>
-            <th>
-              Controls primitives reported
-            </th>
+            <th class="centered" scope="col">Controls objects visited</th>
+            <th class="centered" scope="col">Controls objects reported</th>
+            <th class="centered" scope="col">Controls primitives reported</th>
           </tr>
           <tr>
-            <th class="leftAligned">
+            <th scope="row">
               the
               <datalink id="jvmtiHeapVisitControl">Heap Visit Control Flags</datalink>
               returned by <functionlink id="jvmtiHeapIterationCallback"/>
             </th>
             <td class="centered">
@@ -4700,11 +4692,11 @@
             <td class="centered">
               No<br/>(unless they abort the iteration)
             </td>
           </tr>
           <tr>
-            <th class="leftAligned">
+            <th scope="row">
               <fieldlink id="array_primitive_value_callback" struct="jvmtiHeapCallbacks"/>
               in <paramlink id="callbacks"/> set
             </th>
             <td class="centered">
               No
@@ -4715,11 +4707,11 @@
             <td class="centered">
               No
             </td>
           </tr>
           <tr>
-            <th class="leftAligned">
+            <th scope="row">
               <paramlink id="heap_filter"/>
             </th>
             <td class="centered">
               No
             </td>
@@ -4729,11 +4721,11 @@
             <td class="centered">
               <b>Yes</b>
             </td>
           </tr>
           <tr>
-            <th class="leftAligned">
+            <th scope="row">
               <paramlink id="klass"/>
             </th>
             <td class="centered">
               No
             </td>
@@ -4823,22 +4815,22 @@
       <capabilities>
         <required id="can_tag_objects"></required>
       </capabilities>
       <parameters>
         <param id="object">
-	  <jobject/>
-	    <description>
-	      The object whose tag is to be retrieved.
-	    </description>
-	</param>
+          <jobject/>
+            <description>
+              The object whose tag is to be retrieved.
+            </description>
+        </param>
         <param id="tag_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    On return, the referenced long is set to the value
-	    of the tag.
-	  </description>
-	</param>
+          <outptr><jlong/></outptr>
+          <description>
+            On return, the referenced long is set to the value
+            of the tag.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -4855,86 +4847,86 @@
       <capabilities>
         <required id="can_tag_objects"></required>
       </capabilities>
       <parameters>
         <param id="object">
-	  <jobject/>
-	    <description>
-	      The object whose tag is to be set.
-	    </description>
-	</param>
+          <jobject/>
+            <description>
+              The object whose tag is to be set.
+            </description>
+        </param>
         <param id="tag">
-	  <jlong/>
-	  <description>
-	    The new value of the tag.
-	  </description>
-	</param>
+          <jlong/>
+          <description>
+            The new value of the tag.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetObjectsWithTags" num="114">
       <synopsis>Get Objects With Tags</synopsis>
       <description>
-	Return objects in the heap with the specified tags.
-	The format is parallel arrays of objects and tags.
+        Return objects in the heap with the specified tags.
+        The format is parallel arrays of objects and tags.
       </description>
       <origin>new</origin>
       <capabilities>
         <required id="can_tag_objects"></required>
       </capabilities>
       <parameters>
-	<param id="tag_count">
-	  <jint min="0"/>
-	    <description>
-	      Number of tags to scan for.
-	    </description>
-	</param>
-	<param id="tags">
-	  <inbuf incount="tag_count">
-	    <jlong/>
-	  </inbuf>
-	    <description>
-	      Scan for objects with these tags.
-	      Zero is not permitted in this array.
-	    </description>
-	</param>
-	<param id="count_ptr">
-	  <outptr>
-	    <jint/>
-	  </outptr>
-	    <description>
-	      Return the number of objects with any of the tags
-	      in <paramlink id="tags"/>.
-	    </description>
-	</param>
-	<param id="object_result_ptr">
-	  <allocbuf outcount="count_ptr">
-	    <jobject/>
-	    <nullok>this information is not returned</nullok>
-	  </allocbuf>
-	    <description>
-	      Returns the array of objects with any of the tags
-	      in <paramlink id="tags"/>.
-	    </description>
-	</param>
-	<param id="tag_result_ptr">
-	  <allocbuf outcount="count_ptr">
-	    <jlong/>
-	    <nullok>this information is not returned</nullok>
-	  </allocbuf>
-	    <description>
-	      For each object in <paramlink id="object_result_ptr"/>,
-	      return the tag at the corresponding index.
-	    </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_ILLEGAL_ARGUMENT">
-	  Zero is present in <paramlink id="tags"></paramlink>.
-	</error>
+        <param id="tag_count">
+          <jint min="0"/>
+            <description>
+              Number of tags to scan for.
+            </description>
+        </param>
+        <param id="tags">
+          <inbuf incount="tag_count">
+            <jlong/>
+          </inbuf>
+            <description>
+              Scan for objects with these tags.
+              Zero is not permitted in this array.
+            </description>
+        </param>
+        <param id="count_ptr">
+          <outptr>
+            <jint/>
+          </outptr>
+            <description>
+              Return the number of objects with any of the tags
+              in <paramlink id="tags"/>.
+            </description>
+        </param>
+        <param id="object_result_ptr">
+          <allocbuf outcount="count_ptr">
+            <jobject/>
+            <nullok>this information is not returned</nullok>
+          </allocbuf>
+            <description>
+              Returns the array of objects with any of the tags
+              in <paramlink id="tags"/>.
+            </description>
+        </param>
+        <param id="tag_result_ptr">
+          <allocbuf outcount="count_ptr">
+            <jlong/>
+            <nullok>this information is not returned</nullok>
+          </allocbuf>
+            <description>
+              For each object in <paramlink id="object_result_ptr"/>,
+              return the tag at the corresponding index.
+            </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_ILLEGAL_ARGUMENT">
+          Zero is present in <paramlink id="tags"></paramlink>.
+        </error>
       </errors>
     </function>
 
     <function id="ForceGarbageCollection" num="108">
       <synopsis>Force Garbage Collection</synopsis>
@@ -5003,400 +4995,400 @@
       <p/>
       <b>Please use the </b>
       <internallink id="Heap"><b>current Heap functions</b></internallink>.
         <p/>
         <constants id="jvmtiHeapObjectFilter" label="Heap Object Filter Enumeration" kind="enum">
-	  <constant id="JVMTI_HEAP_OBJECT_TAGGED" num="1">
-	    Tagged objects only.
-	  </constant>
-	  <constant id="JVMTI_HEAP_OBJECT_UNTAGGED" num="2">
-	    Untagged objects only.
-	  </constant>
-	  <constant id="JVMTI_HEAP_OBJECT_EITHER" num="3">
-	    Either tagged or untagged objects.
-	  </constant>
-	</constants>
+          <constant id="JVMTI_HEAP_OBJECT_TAGGED" num="1">
+            Tagged objects only.
+          </constant>
+          <constant id="JVMTI_HEAP_OBJECT_UNTAGGED" num="2">
+            Untagged objects only.
+          </constant>
+          <constant id="JVMTI_HEAP_OBJECT_EITHER" num="3">
+            Either tagged or untagged objects.
+          </constant>
+        </constants>
 
         <constants id="jvmtiHeapRootKind" label="Heap Root Kind Enumeration" kind="enum">
-	  <constant id="JVMTI_HEAP_ROOT_JNI_GLOBAL" num="1">
-	    JNI global reference.
-	  </constant>
-	  <constant id="JVMTI_HEAP_ROOT_SYSTEM_CLASS" num="2">
-	    System class.
-	  </constant>
-	  <constant id="JVMTI_HEAP_ROOT_MONITOR" num="3">
-	    Monitor.
-	  </constant>
-	  <constant id="JVMTI_HEAP_ROOT_STACK_LOCAL" num="4">
-	    Stack local.
-	  </constant>
-	  <constant id="JVMTI_HEAP_ROOT_JNI_LOCAL" num="5">
-	    JNI local reference.
-	  </constant>
-	  <constant id="JVMTI_HEAP_ROOT_THREAD" num="6">
-	    Thread.
-	  </constant>
-	  <constant id="JVMTI_HEAP_ROOT_OTHER" num="7">
-	    Other.
-	  </constant>
-	</constants>
+          <constant id="JVMTI_HEAP_ROOT_JNI_GLOBAL" num="1">
+            JNI global reference.
+          </constant>
+          <constant id="JVMTI_HEAP_ROOT_SYSTEM_CLASS" num="2">
+            System class.
+          </constant>
+          <constant id="JVMTI_HEAP_ROOT_MONITOR" num="3">
+            Monitor.
+          </constant>
+          <constant id="JVMTI_HEAP_ROOT_STACK_LOCAL" num="4">
+            Stack local.
+          </constant>
+          <constant id="JVMTI_HEAP_ROOT_JNI_LOCAL" num="5">
+            JNI local reference.
+          </constant>
+          <constant id="JVMTI_HEAP_ROOT_THREAD" num="6">
+            Thread.
+          </constant>
+          <constant id="JVMTI_HEAP_ROOT_OTHER" num="7">
+            Other.
+          </constant>
+        </constants>
 
         <constants id="jvmtiObjectReferenceKind" label="Object Reference Enumeration" kind="enum">
-	  <constant id="JVMTI_REFERENCE_CLASS" num="1">
-	    Reference from an object to its class.
-	  </constant>
-	  <constant id="JVMTI_REFERENCE_FIELD" num="2">
-	    Reference from an object to the value of one of its instance fields.
-	    For references of this kind the <code>referrer_index</code>
-	    parameter to the <internallink id="jvmtiObjectReferenceCallback">
+          <constant id="JVMTI_REFERENCE_CLASS" num="1">
+            Reference from an object to its class.
+          </constant>
+          <constant id="JVMTI_REFERENCE_FIELD" num="2">
+            Reference from an object to the value of one of its instance fields.
+            For references of this kind the <code>referrer_index</code>
+            parameter to the <internallink id="jvmtiObjectReferenceCallback">
             jvmtiObjectReferenceCallback</internallink> is the index of the
- 	    the instance field. The index is based on the order of all the
+            the instance field. The index is based on the order of all the
             object's fields. This includes all fields of the directly declared
             static and instance fields in the class, and includes all fields (both
             public and private) fields declared in superclasses and superinterfaces.
             The index is thus calculated by summing the index of the field in the directly
             declared class (see <functionlink id="GetClassFields"/>), with the total
             number of fields (both public and private) declared in all superclasses
             and superinterfaces. The index starts at zero.
-	  </constant>
-	  <constant id="JVMTI_REFERENCE_ARRAY_ELEMENT" num="3">
-	    Reference from an array to one of its elements.
-	    For references of this kind the <code>referrer_index</code>
+          </constant>
+          <constant id="JVMTI_REFERENCE_ARRAY_ELEMENT" num="3">
+            Reference from an array to one of its elements.
+            For references of this kind the <code>referrer_index</code>
             parameter to the <internallink id="jvmtiObjectReferenceCallback">
             jvmtiObjectReferenceCallback</internallink> is the array index.
-	  </constant>
-	  <constant id="JVMTI_REFERENCE_CLASS_LOADER" num="4">
-	    Reference from a class to its class loader.
-	  </constant>
-	  <constant id="JVMTI_REFERENCE_SIGNERS" num="5">
-	    Reference from a class to its signers array.
-	  </constant>
-	  <constant id="JVMTI_REFERENCE_PROTECTION_DOMAIN" num="6">
-	    Reference from a class to its protection domain.
-	  </constant>
-	  <constant id="JVMTI_REFERENCE_INTERFACE" num="7">
-	    Reference from a class to one of its interfaces.
-	  </constant>
-	  <constant id="JVMTI_REFERENCE_STATIC_FIELD" num="8">
-	    Reference from a class to the value of one of its static fields.
-	    For references of this kind the <code>referrer_index</code>
-	    parameter to the <internallink id="jvmtiObjectReferenceCallback">
+          </constant>
+          <constant id="JVMTI_REFERENCE_CLASS_LOADER" num="4">
+            Reference from a class to its class loader.
+          </constant>
+          <constant id="JVMTI_REFERENCE_SIGNERS" num="5">
+            Reference from a class to its signers array.
+          </constant>
+          <constant id="JVMTI_REFERENCE_PROTECTION_DOMAIN" num="6">
+            Reference from a class to its protection domain.
+          </constant>
+          <constant id="JVMTI_REFERENCE_INTERFACE" num="7">
+            Reference from a class to one of its interfaces.
+          </constant>
+          <constant id="JVMTI_REFERENCE_STATIC_FIELD" num="8">
+            Reference from a class to the value of one of its static fields.
+            For references of this kind the <code>referrer_index</code>
+            parameter to the <internallink id="jvmtiObjectReferenceCallback">
             jvmtiObjectReferenceCallback</internallink> is the index of the
- 	    the static field. The index is based on the order of all the
+            the static field. The index is based on the order of all the
             object's fields. This includes all fields of the directly declared
             static and instance fields in the class, and includes all fields (both
             public and private) fields declared in superclasses and superinterfaces.
             The index is thus calculated by summing the index of the field in the directly
             declared class (see <functionlink id="GetClassFields"/>), with the total
             number of fields (both public and private) declared in all superclasses
             and superinterfaces. The index starts at zero.
             Note: this definition differs from that in the <jvmti/> 1.0 Specification.
             <rationale>No known implementations used the 1.0 definition.</rationale>
-	  </constant>
-	  <constant id="JVMTI_REFERENCE_CONSTANT_POOL" num="9">
-	    Reference from a class to a resolved entry in the constant pool.
-	    For references of this kind the <code>referrer_index</code>
+          </constant>
+          <constant id="JVMTI_REFERENCE_CONSTANT_POOL" num="9">
+            Reference from a class to a resolved entry in the constant pool.
+            For references of this kind the <code>referrer_index</code>
             parameter to the <internallink id="jvmtiObjectReferenceCallback">
             jvmtiObjectReferenceCallback</internallink> is the index into
             constant pool table of the class, starting at 1. See
             <vmspec chapter="4.4"/>.
-	  </constant>
-	</constants>
+          </constant>
+        </constants>
 
         <constants id="jvmtiIterationControl" label="Iteration Control Enumeration" kind="enum">
-	  <constant id="JVMTI_ITERATION_CONTINUE" num="1">
-	    Continue the iteration.
+          <constant id="JVMTI_ITERATION_CONTINUE" num="1">
+            Continue the iteration.
             If this is a reference iteration, follow the references of this object.
-	  </constant>
-	  <constant id="JVMTI_ITERATION_IGNORE" num="2">
-	    Continue the iteration.
+          </constant>
+          <constant id="JVMTI_ITERATION_IGNORE" num="2">
+            Continue the iteration.
             If this is a reference iteration, ignore the references of this object.
-	  </constant>
-	  <constant id="JVMTI_ITERATION_ABORT" num="0">
-	    Abort the iteration.
-	  </constant>
-	</constants>
+          </constant>
+          <constant id="JVMTI_ITERATION_ABORT" num="0">
+            Abort the iteration.
+          </constant>
+        </constants>
     </intro>
 
     <callback id="jvmtiHeapObjectCallback">
       <enum>jvmtiIterationControl</enum>
       <synopsis>Heap Object Callback</synopsis>
       <description>
         Agent supplied callback function.
-	Describes (but does not pass in) an object in the heap.
+        Describes (but does not pass in) an object in the heap.
         <p/>
         Return value should be <code>JVMTI_ITERATION_CONTINUE</code> to continue iteration,
         or <code>JVMTI_ITERATION_ABORT</code> to stop iteration.
         <p/>
         See the <internallink id="heapCallbacks">heap callback
         function restrictions</internallink>.
       </description>
       <parameters>
         <param id="class_tag">
-	  <jlong/>
-	  <description>
-	    The tag of the class of object (zero if the class is not tagged).
-	    If the object represents a runtime class,
+          <jlong/>
+          <description>
+            The tag of the class of object (zero if the class is not tagged).
+            If the object represents a runtime class,
             the <code>class_tag</code> is the tag
-	    associated with <code>java.lang.Class</code>
+            associated with <code>java.lang.Class</code>
             (zero if <code>java.lang.Class</code> is not tagged).
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="size">
-	  <jlong/>
-	  <description>
-	    Size of the object (in bytes). See <functionlink id="GetObjectSize"/>.
-	  </description>
-	</param>
+          <jlong/>
+          <description>
+            Size of the object (in bytes). See <functionlink id="GetObjectSize"/>.
+          </description>
+        </param>
         <param id="tag_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    The object tag value, or zero if the object is not tagged.
-	    To set the tag value to be associated with the object
-	    the agent sets the <code>jlong</code> pointed to by the parameter.
-	  </description>
-	</param>
+          <outptr><jlong/></outptr>
+          <description>
+            The object tag value, or zero if the object is not tagged.
+            To set the tag value to be associated with the object
+            the agent sets the <code>jlong</code> pointed to by the parameter.
+          </description>
+        </param>
         <param id="user_data">
-	  <outptr><void/></outptr>
-	  <description>
-	    The user supplied data that was passed into the iteration function.
-	  </description>
-	</param>
+          <outptr><void/></outptr>
+          <description>
+            The user supplied data that was passed into the iteration function.
+          </description>
+        </param>
       </parameters>
     </callback>
 
     <callback id="jvmtiHeapRootCallback">
       <enum>jvmtiIterationControl</enum>
       <synopsis>Heap Root Object Callback</synopsis>
       <description>
         Agent supplied callback function.
-	Describes (but does not pass in) an object that is a root for the purposes
-	of garbage collection.
+        Describes (but does not pass in) an object that is a root for the purposes
+        of garbage collection.
         <p/>
         Return value should be <code>JVMTI_ITERATION_CONTINUE</code> to continue iteration,
         <code>JVMTI_ITERATION_IGNORE</code> to continue iteration without pursuing
         references from referree object or <code>JVMTI_ITERATION_ABORT</code> to stop iteration.
         <p/>
         See the <internallink id="heapCallbacks">heap callback
         function restrictions</internallink>.
       </description>
       <parameters>
-	<param id="root_kind">
-	  <enum>jvmtiHeapRootKind</enum>
-	  <description>
-	    The kind of heap root.
-	  </description>
-	</param>
+        <param id="root_kind">
+          <enum>jvmtiHeapRootKind</enum>
+          <description>
+            The kind of heap root.
+          </description>
+        </param>
         <param id="class_tag">
-	  <jlong/>
-	  <description>
-	    The tag of the class of object (zero if the class is not tagged).
+          <jlong/>
+          <description>
+            The tag of the class of object (zero if the class is not tagged).
             If the object represents a runtime class, the <code>class_tag</code> is the tag
             associated with <code>java.lang.Class</code>
             (zero if <code>java.lang.Class</code> is not tagged).
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="size">
-	  <jlong/>
-	  <description>
-	    Size of the object (in bytes). See <functionlink id="GetObjectSize"/>.
-	  </description>
-	</param>
+          <jlong/>
+          <description>
+            Size of the object (in bytes). See <functionlink id="GetObjectSize"/>.
+          </description>
+        </param>
         <param id="tag_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    The object tag value, or zero if the object is not tagged.
-	    To set the tag value to be associated with the object
-	    the agent sets the <code>jlong</code> pointed to by the parameter.
-	  </description>
-	</param>
+          <outptr><jlong/></outptr>
+          <description>
+            The object tag value, or zero if the object is not tagged.
+            To set the tag value to be associated with the object
+            the agent sets the <code>jlong</code> pointed to by the parameter.
+          </description>
+        </param>
         <param id="user_data">
-	  <outptr><void/></outptr>
-	  <description>
-	    The user supplied data that was passed into the iteration function.
-	  </description>
-	</param>
+          <outptr><void/></outptr>
+          <description>
+            The user supplied data that was passed into the iteration function.
+          </description>
+        </param>
       </parameters>
     </callback>
 
     <callback id="jvmtiStackReferenceCallback">
       <enum>jvmtiIterationControl</enum>
       <synopsis>Stack Reference Object Callback</synopsis>
       <description>
         Agent supplied callback function.
-	Describes (but does not pass in) an object on the stack that is a root for
-	the purposes of garbage collection.
+        Describes (but does not pass in) an object on the stack that is a root for
+        the purposes of garbage collection.
         <p/>
         Return value should be <code>JVMTI_ITERATION_CONTINUE</code> to continue iteration,
         <code>JVMTI_ITERATION_IGNORE</code> to continue iteration without pursuing
         references from referree object or <code>JVMTI_ITERATION_ABORT</code> to stop iteration.
         <p/>
         See the <internallink id="heapCallbacks">heap callback
         function restrictions</internallink>.
       </description>
       <parameters>
-	<param id="root_kind">
-	  <enum>jvmtiHeapRootKind</enum>
-	  <description>
-	    The kind of root (either <code>JVMTI_HEAP_ROOT_STACK_LOCAL</code> or
-	    <code>JVMTI_HEAP_ROOT_JNI_LOCAL</code>).
-	  </description>
-	</param>
+        <param id="root_kind">
+          <enum>jvmtiHeapRootKind</enum>
+          <description>
+            The kind of root (either <code>JVMTI_HEAP_ROOT_STACK_LOCAL</code> or
+            <code>JVMTI_HEAP_ROOT_JNI_LOCAL</code>).
+          </description>
+        </param>
         <param id="class_tag">
-	  <jlong/>
-	  <description>
+          <jlong/>
+          <description>
            The tag of the class of object (zero if the class is not tagged).
            If the object represents a runtime class, the  <code>class_tag</code> is the tag
            associated with <code>java.lang.Class</code>
            (zero if <code>java.lang.Class</code> is not tagged).
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="size">
-	  <jlong/>
-	  <description>
-	    Size of the object (in bytes). See <functionlink id="GetObjectSize"/>.
-	  </description>
-	</param>
+          <jlong/>
+          <description>
+            Size of the object (in bytes). See <functionlink id="GetObjectSize"/>.
+          </description>
+        </param>
         <param id="tag_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    The object tag value, or zero if the object is not tagged.
-	    To set the tag value to be associated with the object
-	    the agent sets the <code>jlong</code> pointed to by the parameter.
-	  </description>
-	</param>
+          <outptr><jlong/></outptr>
+          <description>
+            The object tag value, or zero if the object is not tagged.
+            To set the tag value to be associated with the object
+            the agent sets the <code>jlong</code> pointed to by the parameter.
+          </description>
+        </param>
         <param id="thread_tag">
-	  <jlong/>
-	  <description>
-	    The tag of the thread corresponding to this stack, zero if not tagged.
-	  </description>
-	</param>
+          <jlong/>
+          <description>
+            The tag of the thread corresponding to this stack, zero if not tagged.
+          </description>
+        </param>
         <param id="depth">
-	  <jint/>
-	  <description>
-	    The depth of the frame.
-	  </description>
-	</param>
+          <jint/>
+          <description>
+            The depth of the frame.
+          </description>
+        </param>
         <param id="method">
-	  <jmethodID/>
-	  <description>
-	    The method executing in this frame.
-	  </description>
-	</param>
+          <jmethodID/>
+          <description>
+            The method executing in this frame.
+          </description>
+        </param>
         <param id="slot">
-	  <jint/>
-	  <description>
-	    The slot number.
-	  </description>
-	</param>
+          <jint/>
+          <description>
+            The slot number.
+          </description>
+        </param>
         <param id="user_data">
-	  <outptr><void/></outptr>
-	  <description>
-	    The user supplied data that was passed into the iteration function.
-	  </description>
-	</param>
+          <outptr><void/></outptr>
+          <description>
+            The user supplied data that was passed into the iteration function.
+          </description>
+        </param>
       </parameters>
     </callback>
 
     <callback id="jvmtiObjectReferenceCallback">
       <enum>jvmtiIterationControl</enum>
       <synopsis>Object Reference Callback</synopsis>
       <description>
         Agent supplied callback function.
-	Describes a reference from an object (the referrer) to another object
-	(the referree).
+        Describes a reference from an object (the referrer) to another object
+        (the referree).
         <p/>
         Return value should be <code>JVMTI_ITERATION_CONTINUE</code> to continue iteration,
         <code>JVMTI_ITERATION_IGNORE</code> to continue iteration without pursuing
         references from referree object or <code>JVMTI_ITERATION_ABORT</code> to stop iteration.
         <p/>
         See the <internallink id="heapCallbacks">heap callback
         function restrictions</internallink>.
       </description>
       <parameters>
-	<param id="reference_kind">
-	  <enum>jvmtiObjectReferenceKind</enum>
-	  <description>
-	    The type of reference.
-	  </description>
-	</param>
+        <param id="reference_kind">
+          <enum>jvmtiObjectReferenceKind</enum>
+          <description>
+            The type of reference.
+          </description>
+        </param>
         <param id="class_tag">
-	  <jlong/>
-	  <description>
-	    The tag of the class of referree object (zero if the class is not tagged).
+          <jlong/>
+          <description>
+            The tag of the class of referree object (zero if the class is not tagged).
             If the referree object represents a runtime class,
             the  <code>class_tag</code> is the tag
             associated with <code>java.lang.Class</code>
             (zero if <code>java.lang.Class</code> is not tagged).
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="size">
-	  <jlong/>
-	  <description>
-	    Size of the referree object (in bytes).
+          <jlong/>
+          <description>
+            Size of the referree object (in bytes).
             See <functionlink id="GetObjectSize"/>.
-	  </description>
-	</param>
+          </description>
+        </param>
         <param id="tag_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    The referree object tag value, or zero if the object is not
-	    tagged.
-	    To set the tag value to be associated with the object
-	    the agent sets the <code>jlong</code> pointed to by the parameter.
-	  </description>
-	</param>
+          <outptr><jlong/></outptr>
+          <description>
+            The referree object tag value, or zero if the object is not
+            tagged.
+            To set the tag value to be associated with the object
+            the agent sets the <code>jlong</code> pointed to by the parameter.
+          </description>
+        </param>
         <param id="referrer_tag">
-	  <jlong/>
-	  <description>
-	    The tag of the referrer object, or zero if the referrer
-	    object is not tagged.
-	  </description>
-	</param>
-	<param id="referrer_index">
-	  <jint/>
-	  <description>
-	    For references of type <code>JVMTI_REFERENCE_FIELD</code> or
+          <jlong/>
+          <description>
+            The tag of the referrer object, or zero if the referrer
+            object is not tagged.
+          </description>
+        </param>
+        <param id="referrer_index">
+          <jint/>
+          <description>
+            For references of type <code>JVMTI_REFERENCE_FIELD</code> or
             <code>JVMTI_REFERENCE_STATIC_FIELD</code> the index
-	    of the field in the referrer object. The index is based on the
-	    order of all the object's fields - see <internallink
-	    id="JVMTI_REFERENCE_FIELD">JVMTI_REFERENCE_FIELD</internallink>
+            of the field in the referrer object. The index is based on the
+            order of all the object's fields - see <internallink
+            id="JVMTI_REFERENCE_FIELD">JVMTI_REFERENCE_FIELD</internallink>
             or <internallink
-	    id="JVMTI_REFERENCE_STATIC_FIELD">JVMTI_REFERENCE_STATIC_FIELD
-	    </internallink> for further description.
-	    <p/>
-	    For references of type <code>JVMTI_REFERENCE_ARRAY_ELEMENT</code>
-	    the array index - see <internallink id="JVMTI_REFERENCE_ARRAY_ELEMENT">
-	    JVMTI_REFERENCE_ARRAY_ELEMENT</internallink> for further description.
-	    <p/>
-	    For references of type <code>JVMTI_REFERENCE_CONSTANT_POOL</code>
-	    the index into the constant pool of the class - see
-	    <internallink id="JVMTI_REFERENCE_CONSTANT_POOL">
-	    JVMTI_REFERENCE_CONSTANT_POOL</internallink> for further
-	    description.
-	    <p/>
-	    For references of other kinds the <code>referrer_index</code> is
-	    <code>-1</code>.
-	  </description>
-	</param>
+            id="JVMTI_REFERENCE_STATIC_FIELD">JVMTI_REFERENCE_STATIC_FIELD
+            </internallink> for further description.
+            <p/>
+            For references of type <code>JVMTI_REFERENCE_ARRAY_ELEMENT</code>
+            the array index - see <internallink id="JVMTI_REFERENCE_ARRAY_ELEMENT">
+            JVMTI_REFERENCE_ARRAY_ELEMENT</internallink> for further description.
+            <p/>
+            For references of type <code>JVMTI_REFERENCE_CONSTANT_POOL</code>
+            the index into the constant pool of the class - see
+            <internallink id="JVMTI_REFERENCE_CONSTANT_POOL">
+            JVMTI_REFERENCE_CONSTANT_POOL</internallink> for further
+            description.
+            <p/>
+            For references of other kinds the <code>referrer_index</code> is
+            <code>-1</code>.
+          </description>
+        </param>
         <param id="user_data">
-	  <outptr><void/></outptr>
-	  <description>
-	    The user supplied data that was passed into the iteration function.
-	  </description>
-	</param>
+          <outptr><void/></outptr>
+          <description>
+            The user supplied data that was passed into the iteration function.
+          </description>
+        </param>
       </parameters>
     </callback>
 
     <function id="IterateOverObjectsReachableFromObject" num="109">
       <synopsis>Iterate Over Objects Reachable From Object</synopsis>
       <description>
         This function iterates over all objects that are directly
         and indirectly reachable from the specified object.
-	For each object <i>A</i> (known
-	as the referrer) with a reference to object <i>B</i> the specified
-	callback function is called to describe the object reference.
+        For each object <i>A</i> (known
+        as the referrer) with a reference to object <i>B</i> the specified
+        callback function is called to describe the object reference.
         The callback is called exactly once for each reference from a referrer;
         this is true even if there are reference cycles or multiple paths to
         the referrer.
         There may be more than one reference between a referrer and a referree,
         These may be distinguished by the
@@ -5421,54 +5413,54 @@
       <capabilities>
         <required id="can_tag_objects"></required>
       </capabilities>
       <parameters>
         <param id="object">
-	  <jobject/>
-	    <description>
-	      The object
-	    </description>
-	</param>
+          <jobject/>
+            <description>
+              The object
+            </description>
+        </param>
         <param id="object_reference_callback">
-	  <ptrtype>
-	    <struct>jvmtiObjectReferenceCallback</struct>
-	  </ptrtype>
-	    <description>
-	      The callback to be called to describe each
-	      object reference.
-	    </description>
-	</param>
+          <ptrtype>
+            <struct>jvmtiObjectReferenceCallback</struct>
+          </ptrtype>
+            <description>
+              The callback to be called to describe each
+              object reference.
+            </description>
+        </param>
         <param id="user_data">
-	  <inbuf>
-	    <void/>
-	    <nullok><code>NULL</code> is passed as the user supplied data</nullok>
-	  </inbuf>
-	  <description>
-	    User supplied data to be passed to the callback.
-	  </description>
-	</param>
+          <inbuf>
+            <void/>
+            <nullok><code>NULL</code> is passed as the user supplied data</nullok>
+          </inbuf>
+          <description>
+            User supplied data to be passed to the callback.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="IterateOverReachableObjects" num="110">
       <synopsis>Iterate Over Reachable Objects</synopsis>
       <description>
         This function iterates over the root objects and all objects that
         are directly and indirectly reachable from the root objects.
-	The root objects comprise the set of system classes,
-	JNI globals, references from thread stacks, and other objects used as roots
-	for the purposes of garbage collection.
-	<p/>
-	For each root the <paramlink id="heap_root_callback"></paramlink>
-	or <paramlink id="stack_ref_callback"></paramlink> callback is called.
-	An object can be a root object for more than one reason and in that case
-	the appropriate callback is called for each reason.
-	<p/>
-	For each object reference the <paramlink id="object_ref_callback"></paramlink>
-	callback function is called to describe the object reference.
+        The root objects comprise the set of system classes,
+        JNI globals, references from thread stacks, and other objects used as roots
+        for the purposes of garbage collection.
+        <p/>
+        For each root the <paramlink id="heap_root_callback"></paramlink>
+        or <paramlink id="stack_ref_callback"></paramlink> callback is called.
+        An object can be a root object for more than one reason and in that case
+        the appropriate callback is called for each reason.
+        <p/>
+        For each object reference the <paramlink id="object_ref_callback"></paramlink>
+        callback function is called to describe the object reference.
         The callback is called exactly once for each reference from a referrer;
         this is true even if there are reference cycles or multiple paths to
         the referrer.
         There may be more than one reference between a referrer and a referree,
         These may be distinguished by the
@@ -5477,17 +5469,17 @@
         The callback for an object will always occur after the callback for
         its referrer.
         <p/>
         See <functionlink id="FollowReferences"/> for the object
         references which are reported.
-	<p/>
-	Roots are always reported to the profiler before any object references
-	are reported. In other words, the <paramlink id="object_ref_callback"></paramlink>
-	callback will not be called until the appropriate callback has been called
-	for all roots. If the <paramlink id="object_ref_callback"></paramlink> callback is
-	specified as <code>NULL</code> then this function returns after
-	reporting the root objects to the profiler.
+        <p/>
+        Roots are always reported to the profiler before any object references
+        are reported. In other words, the <paramlink id="object_ref_callback"></paramlink>
+        callback will not be called until the appropriate callback has been called
+        for all roots. If the <paramlink id="object_ref_callback"></paramlink> callback is
+        specified as <code>NULL</code> then this function returns after
+        reporting the root objects to the profiler.
         <p/>
         During the execution of this function the state of the heap
         does not change: no objects are allocated, no objects are
         garbage collected, and the state of objects (including
         held values) does not change.
@@ -5500,72 +5492,72 @@
       <capabilities>
         <required id="can_tag_objects"></required>
       </capabilities>
       <parameters>
         <param id="heap_root_callback">
-	  <ptrtype>
-	    <struct>jvmtiHeapRootCallback</struct>
-	    <nullok>do not report heap roots</nullok>
-	  </ptrtype>
-	    <description>
-	      The callback function to be called for each heap root of type
-	      <code>JVMTI_HEAP_ROOT_JNI_GLOBAL</code>,
-	      <code>JVMTI_HEAP_ROOT_SYSTEM_CLASS</code>,
-	      <code>JVMTI_HEAP_ROOT_MONITOR</code>,
-	      <code>JVMTI_HEAP_ROOT_THREAD</code>, or
-	      <code>JVMTI_HEAP_ROOT_OTHER</code>.
-	    </description>
-	</param>
+          <ptrtype>
+            <struct>jvmtiHeapRootCallback</struct>
+            <nullok>do not report heap roots</nullok>
+          </ptrtype>
+            <description>
+              The callback function to be called for each heap root of type
+              <code>JVMTI_HEAP_ROOT_JNI_GLOBAL</code>,
+              <code>JVMTI_HEAP_ROOT_SYSTEM_CLASS</code>,
+              <code>JVMTI_HEAP_ROOT_MONITOR</code>,
+              <code>JVMTI_HEAP_ROOT_THREAD</code>, or
+              <code>JVMTI_HEAP_ROOT_OTHER</code>.
+            </description>
+        </param>
         <param id="stack_ref_callback">
-	  <ptrtype>
-	    <struct>jvmtiStackReferenceCallback</struct>
-	    <nullok>do not report stack references</nullok>
-	  </ptrtype>
-	    <description>
-	      The callback function to be called for each heap root of
-	      <code>JVMTI_HEAP_ROOT_STACK_LOCAL</code> or
-	      <code>JVMTI_HEAP_ROOT_JNI_LOCAL</code>.
-	    </description>
-	</param>
+          <ptrtype>
+            <struct>jvmtiStackReferenceCallback</struct>
+            <nullok>do not report stack references</nullok>
+          </ptrtype>
+            <description>
+              The callback function to be called for each heap root of
+              <code>JVMTI_HEAP_ROOT_STACK_LOCAL</code> or
+              <code>JVMTI_HEAP_ROOT_JNI_LOCAL</code>.
+            </description>
+        </param>
         <param id="object_ref_callback">
-	  <ptrtype>
-	    <struct>jvmtiObjectReferenceCallback</struct>
-	    <nullok>do not follow references from the root objects</nullok>
-	  </ptrtype>
-	    <description>
-	      The callback function to be called for each object reference.
-	    </description>
-	</param>
+          <ptrtype>
+            <struct>jvmtiObjectReferenceCallback</struct>
+            <nullok>do not follow references from the root objects</nullok>
+          </ptrtype>
+            <description>
+              The callback function to be called for each object reference.
+            </description>
+        </param>
         <param id="user_data">
-	  <inbuf>
-	    <void/>
-	    <nullok><code>NULL</code> is passed as the user supplied data</nullok>
-	  </inbuf>
-	  <description>
-	    User supplied data to be passed to the callback.
-	  </description>
-	</param>
+          <inbuf>
+            <void/>
+            <nullok><code>NULL</code> is passed as the user supplied data</nullok>
+          </inbuf>
+          <description>
+            User supplied data to be passed to the callback.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="IterateOverHeap" num="111">
       <synopsis>Iterate Over Heap</synopsis>
       <description>
         Iterate over all objects in the heap. This includes both reachable and
-	unreachable objects.
-	<p/>
-	The <paramlink id="object_filter"></paramlink> parameter indicates the
-	objects for which the callback function is called. If this parameter
-	is <code>JVMTI_HEAP_OBJECT_TAGGED</code> then the callback will only be
-	called for every object that is tagged. If the parameter is
-	<code>JVMTI_HEAP_OBJECT_UNTAGGED</code> then the callback will only be
-	for objects that are not tagged. If the parameter
-	is <code>JVMTI_HEAP_OBJECT_EITHER</code> then the callback will be
-	called for every object in the heap, irrespective of whether it is
-	tagged or not.
+        unreachable objects.
+        <p/>
+        The <paramlink id="object_filter"></paramlink> parameter indicates the
+        objects for which the callback function is called. If this parameter
+        is <code>JVMTI_HEAP_OBJECT_TAGGED</code> then the callback will only be
+        called for every object that is tagged. If the parameter is
+        <code>JVMTI_HEAP_OBJECT_UNTAGGED</code> then the callback will only be
+        for objects that are not tagged. If the parameter
+        is <code>JVMTI_HEAP_OBJECT_EITHER</code> then the callback will be
+        called for every object in the heap, irrespective of whether it is
+        tagged or not.
         <p/>
         During the execution of this function the state of the heap
         does not change: no objects are allocated, no objects are
         garbage collected, and the state of objects (including
         held values) does not change.
@@ -5577,102 +5569,102 @@
       <origin>new</origin>
       <capabilities>
         <required id="can_tag_objects"></required>
       </capabilities>
       <parameters>
-	<param id="object_filter">
-	  <enum>jvmtiHeapObjectFilter</enum>
-	  <description>
-	    Indicates the objects for which the callback function is called.
-	  </description>
-	</param>
+        <param id="object_filter">
+          <enum>jvmtiHeapObjectFilter</enum>
+          <description>
+            Indicates the objects for which the callback function is called.
+          </description>
+        </param>
         <param id="heap_object_callback">
-	  <ptrtype>
-	    <struct>jvmtiHeapObjectCallback</struct>
-	  </ptrtype>
-	    <description>
-	      The iterator function to be called for each
-	      object matching the <paramlink id="object_filter"/>.
-	    </description>
-	</param>
-        <param id="user_data">
-	  <inbuf>
-	    <void/>
-	    <nullok><code>NULL</code> is passed as the user supplied data</nullok>
-	  </inbuf>
-	  <description>
-	    User supplied data to be passed to the callback.
-	  </description>
-	</param>
-      </parameters>
-      <errors>
-      </errors>
+          <ptrtype>
+            <struct>jvmtiHeapObjectCallback</struct>
+          </ptrtype>
+            <description>
+              The iterator function to be called for each
+              object matching the <paramlink id="object_filter"/>.
+            </description>
+        </param>
+        <param id="user_data">
+          <inbuf>
+            <void/>
+            <nullok><code>NULL</code> is passed as the user supplied data</nullok>
+          </inbuf>
+          <description>
+            User supplied data to be passed to the callback.
+          </description>
+        </param>
+      </parameters>
+      <errors>
+      </errors>
     </function>
 
     <function id="IterateOverInstancesOfClass" num="112">
       <synopsis>Iterate Over Instances Of Class</synopsis>
       <description>
         Iterate over all objects in the heap that are instances of the specified class.
         This includes direct instances of the specified class and
         instances of all subclasses of the specified class.
-	This includes both reachable and unreachable objects.
-	<p/>
-	The <paramlink id="object_filter"></paramlink> parameter indicates the
-	objects for which the callback function is called. If this parameter
-	is <code>JVMTI_HEAP_OBJECT_TAGGED</code> then the callback will only be
-	called for every object that is tagged. If the parameter is
-	<code>JVMTI_HEAP_OBJECT_UNTAGGED</code> then the callback will only be
-	called for objects that are not tagged. If the parameter
-	is <code>JVMTI_HEAP_OBJECT_EITHER</code> then the callback will be
-	called for every object in the heap, irrespective of whether it is
-	tagged or not.
-	<p/>
-	During the execution of this function the state of the heap
-	does not change: no objects are allocated, no objects are
-	garbage collected, and the state of objects (including
-	held values) does not change.
-	As a result, threads executing Java
-	programming language code, threads attempting to resume the
-	execution of Java programming language code, and threads
-	attempting to execute JNI functions are typically stalled.
+        This includes both reachable and unreachable objects.
+        <p/>
+        The <paramlink id="object_filter"></paramlink> parameter indicates the
+        objects for which the callback function is called. If this parameter
+        is <code>JVMTI_HEAP_OBJECT_TAGGED</code> then the callback will only be
+        called for every object that is tagged. If the parameter is
+        <code>JVMTI_HEAP_OBJECT_UNTAGGED</code> then the callback will only be
+        called for objects that are not tagged. If the parameter
+        is <code>JVMTI_HEAP_OBJECT_EITHER</code> then the callback will be
+        called for every object in the heap, irrespective of whether it is
+        tagged or not.
+        <p/>
+        During the execution of this function the state of the heap
+        does not change: no objects are allocated, no objects are
+        garbage collected, and the state of objects (including
+        held values) does not change.
+        As a result, threads executing Java
+        programming language code, threads attempting to resume the
+        execution of Java programming language code, and threads
+        attempting to execute JNI functions are typically stalled.
       </description>
       <origin>new</origin>
       <capabilities>
         <required id="can_tag_objects"></required>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      Iterate over objects of this class only.
-	    </description>
-	</param>
-	<param id="object_filter">
-	  <enum>jvmtiHeapObjectFilter</enum>
-	  <description>
-	    Indicates the objects for which the callback function is called.
-	  </description>
-	</param>
-	<param id="heap_object_callback">
-	  <ptrtype>
-	    <struct>jvmtiHeapObjectCallback</struct>
-	  </ptrtype>
-	    <description>
-	      The iterator function to be called for each
-	      <paramlink id="klass"/> instance matching
+        <param id="klass">
+          <jclass/>
+            <description>
+              Iterate over objects of this class only.
+            </description>
+        </param>
+        <param id="object_filter">
+          <enum>jvmtiHeapObjectFilter</enum>
+          <description>
+            Indicates the objects for which the callback function is called.
+          </description>
+        </param>
+        <param id="heap_object_callback">
+          <ptrtype>
+            <struct>jvmtiHeapObjectCallback</struct>
+          </ptrtype>
+            <description>
+              The iterator function to be called for each
+              <paramlink id="klass"/> instance matching
               the <paramlink id="object_filter"/>.
-	    </description>
-	</param>
+            </description>
+        </param>
         <param id="user_data">
-	  <inbuf>
-	    <void/>
-	    <nullok><code>NULL</code> is passed as the user supplied data</nullok>
-	  </inbuf>
-	  <description>
-	    User supplied data to be passed to the callback.
-	  </description>
-	</param>
+          <inbuf>
+            <void/>
+            <nullok><code>NULL</code> is passed as the user supplied data</nullok>
+          </inbuf>
+          <description>
+            User supplied data to be passed to the callback.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -5690,54 +5682,54 @@
     </intro>
 
     <function id="GetLocalObject" num="21">
       <synopsis>Get Local Variable - Object</synopsis>
       <description>
-	This function can be used to retrieve the value of a local
+        This function can be used to retrieve the value of a local
         variable whose type is <code>Object</code> or a subclass of <code>Object</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_access_local_variables"></required>
-      </capabilities>
-      <parameters>
- 	<param id="thread">
-	  <jthread null="current" frame="frame"/>
-	  <description>
-	    The thread of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="depth">
-	  <jframeID thread="thread"/>
-	  <description>
-	    The depth of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="slot">
-	  <jint/>
-	  <description>
-	    The variable's slot number.
-	  </description>
-	</param>
-	<param id="value_ptr">
-	  <outptr><jobject/></outptr>
-	    <description>
-	      On return, points to the variable's value.
-	    </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_INVALID_SLOT">
-	  Invalid <code>slot</code>.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
+        <required id="can_access_local_variables"></required>
+      </capabilities>
+      <parameters>
+        <param id="thread">
+          <jthread null="current" frame="frame"/>
+          <description>
+            The thread of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="depth">
+          <jframeID thread="thread"/>
+          <description>
+            The depth of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="slot">
+          <jint/>
+          <description>
+            The variable's slot number.
+          </description>
+        </param>
+        <param id="value_ptr">
+          <outptr><jobject/></outptr>
+            <description>
+              On return, points to the variable's value.
+            </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_INVALID_SLOT">
+          Invalid <code>slot</code>.
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
           The variable type is not
           <code>Object</code> or a subclass of <code>Object</code>.
-	</error>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Not a visible frame
-	</error>
+        </error>
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Not a visible frame
+        </error>
       </errors>
     </function>
 
     <function id="GetLocalInstance" num="155" since="1.2">
       <synopsis>Get Local Instance</synopsis>
@@ -5748,491 +5740,491 @@
         native method frames, whereas <code>GetLocalObject()</code> would
         return <code>JVMTI_ERROR_OPAQUE_FRAME</code> in those cases.
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_access_local_variables"></required>
+        <required id="can_access_local_variables"></required>
       </capabilities>
       <parameters>
- 	<param id="thread">
-	  <jthread null="current" frame="frame"/>
-	  <description>
-	    The thread of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="depth">
-	  <jframeID thread="thread"/>
-	  <description>
-	    The depth of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="value_ptr">
-	  <outptr><jobject/></outptr>
-	    <description>
-	      On return, points to the variable's value.
-	    </description>
-	</param>
+        <param id="thread">
+          <jthread null="current" frame="frame"/>
+          <description>
+            The thread of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="depth">
+          <jframeID thread="thread"/>
+          <description>
+            The depth of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="value_ptr">
+          <outptr><jobject/></outptr>
+            <description>
+              On return, points to the variable's value.
+            </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_INVALID_SLOT">
-	  If the specified frame is a static method frame.
-	</error>
+        <error id="JVMTI_ERROR_INVALID_SLOT">
+          If the specified frame is a static method frame.
+        </error>
       </errors>
     </function>
     <function id="GetLocalInt" num="22">
       <synopsis>Get Local Variable - Int</synopsis>
       <description>
-	This function can be used to retrieve the value of a local
+        This function can be used to retrieve the value of a local
         variable whose type is <code>int</code>,
         <code>short</code>, <code>char</code>, <code>byte</code>, or
-	<code>boolean</code>.
+        <code>boolean</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_access_local_variables"></required>
-      </capabilities>
-      <parameters>
- 	<param id="thread">
-	  <jthread null="current" frame="frame"/>
-	  <description>
-	    The thread of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="depth">
-	  <jframeID thread="thread"/>
-	  <description>
-	    The depth of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="slot">
-	  <jint/>
-	  <description>
-	    The variable's slot number.
-	  </description>
-	</param>
-	<param id="value_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the variable's value.
-	  </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_INVALID_SLOT">
-	  Invalid <code>slot</code>.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The variable type is not
+        <required id="can_access_local_variables"></required>
+      </capabilities>
+      <parameters>
+        <param id="thread">
+          <jthread null="current" frame="frame"/>
+          <description>
+            The thread of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="depth">
+          <jframeID thread="thread"/>
+          <description>
+            The depth of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="slot">
+          <jint/>
+          <description>
+            The variable's slot number.
+          </description>
+        </param>
+        <param id="value_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the variable's value.
+          </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_INVALID_SLOT">
+          Invalid <code>slot</code>.
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The variable type is not
           <code>int</code>, <code>short</code>,
           <code>char</code>, <code>byte</code>, or
-  	  <code>boolean</code>.
-	</error>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Not a visible frame
-	</error>
+          <code>boolean</code>.
+        </error>
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Not a visible frame
+        </error>
       </errors>
     </function>
 
     <function id="GetLocalLong" num="23">
       <synopsis>Get Local Variable - Long</synopsis>
       <description>
-	This function can be used to retrieve the value of a local
+        This function can be used to retrieve the value of a local
         variable whose type is <code>long</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_access_local_variables"></required>
-      </capabilities>
-      <parameters>
- 	<param id="thread">
-	  <jthread null="current" frame="frame"/>
-	  <description>
-	    The thread of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="depth">
-	  <jframeID thread="thread"/>
-	  <description>
-	    The depth of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="slot">
-	  <jint/>
-	  <description>
-	    The variable's slot number.
-	  </description>
-	</param>
-	<param id="value_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    On return, points to the variable's value.
-	  </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_INVALID_SLOT">
-	  Invalid <code>slot</code>.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The variable type is not <code>long</code>.
-	</error>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Not a visible frame
-	</error>
+        <required id="can_access_local_variables"></required>
+      </capabilities>
+      <parameters>
+        <param id="thread">
+          <jthread null="current" frame="frame"/>
+          <description>
+            The thread of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="depth">
+          <jframeID thread="thread"/>
+          <description>
+            The depth of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="slot">
+          <jint/>
+          <description>
+            The variable's slot number.
+          </description>
+        </param>
+        <param id="value_ptr">
+          <outptr><jlong/></outptr>
+          <description>
+            On return, points to the variable's value.
+          </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_INVALID_SLOT">
+          Invalid <code>slot</code>.
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The variable type is not <code>long</code>.
+        </error>
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Not a visible frame
+        </error>
       </errors>
     </function>
 
     <function id="GetLocalFloat" num="24">
       <synopsis>Get Local Variable - Float</synopsis>
       <description>
-	This function can be used to retrieve the value of a local
+        This function can be used to retrieve the value of a local
         variable whose type is <code>float</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_access_local_variables"></required>
-      </capabilities>
-      <parameters>
- 	<param id="thread">
-	  <jthread null="current" frame="frame"/>
-	  <description>
-	    The thread of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="depth">
-	  <jframeID thread="thread"/>
-	  <description>
-	    The depth of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="slot">
-	  <jint/>
-	  <description>
-	    The variable's slot number.
-	  </description>
-	</param>
-	<param id="value_ptr">
-	  <outptr><jfloat/></outptr>
-	  <description>
-	    On return, points to the variable's value.
-	  </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_INVALID_SLOT">
-	  Invalid <code>slot</code>.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The variable type is not <code>float</code>.
-	</error>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Not a visible frame
-	</error>
+        <required id="can_access_local_variables"></required>
+      </capabilities>
+      <parameters>
+        <param id="thread">
+          <jthread null="current" frame="frame"/>
+          <description>
+            The thread of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="depth">
+          <jframeID thread="thread"/>
+          <description>
+            The depth of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="slot">
+          <jint/>
+          <description>
+            The variable's slot number.
+          </description>
+        </param>
+        <param id="value_ptr">
+          <outptr><jfloat/></outptr>
+          <description>
+            On return, points to the variable's value.
+          </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_INVALID_SLOT">
+          Invalid <code>slot</code>.
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The variable type is not <code>float</code>.
+        </error>
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Not a visible frame
+        </error>
       </errors>
     </function>
 
     <function id="GetLocalDouble" num="25">
       <synopsis>Get Local Variable - Double</synopsis>
       <description>
-	This function can be used to retrieve the value of a local
+        This function can be used to retrieve the value of a local
         variable whose type is <code>long</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_access_local_variables"></required>
-      </capabilities>
-      <parameters>
- 	<param id="thread">
-	  <jthread null="current" frame="frame"/>
-	  <description>
-	    The thread of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="depth">
-	  <jframeID thread="thread"/>
-	  <description>
-	    The depth of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="slot">
-	  <jint/>
-	  <description>
-	    The variable's slot number.
-	  </description>
-	</param>
-	<param id="value_ptr">
-	  <outptr><jdouble/></outptr>
-	  <description>
-	    On return, points to the variable's value.
-	  </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_INVALID_SLOT">
-	  Invalid <code>slot</code>.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The variable type is not <code>double</code>.
-	</error>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Not a visible frame
-	</error>
+        <required id="can_access_local_variables"></required>
+      </capabilities>
+      <parameters>
+        <param id="thread">
+          <jthread null="current" frame="frame"/>
+          <description>
+            The thread of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="depth">
+          <jframeID thread="thread"/>
+          <description>
+            The depth of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="slot">
+          <jint/>
+          <description>
+            The variable's slot number.
+          </description>
+        </param>
+        <param id="value_ptr">
+          <outptr><jdouble/></outptr>
+          <description>
+            On return, points to the variable's value.
+          </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_INVALID_SLOT">
+          Invalid <code>slot</code>.
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The variable type is not <code>double</code>.
+        </error>
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Not a visible frame
+        </error>
       </errors>
     </function>
 
     <function id="SetLocalObject" num="26">
       <synopsis>Set Local Variable - Object</synopsis>
       <description>
-	This function can be used to set the value of a local
+        This function can be used to set the value of a local
         variable whose type is <code>Object</code> or a subclass of <code>Object</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_access_local_variables"></required>
-      </capabilities>
-      <parameters>
- 	<param id="thread">
-	  <jthread null="current" frame="frame"/>
-	  <description>
-	    The thread of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="depth">
-	  <jframeID thread="thread"/>
-	  <description>
-	    The depth of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="slot">
-	  <jint/>
-	  <description>
-	    The variable's slot number.
-	  </description>
-	</param>
-	<param id="value">
-	  <jobject/>
-	    <description>
-	      The new value for the variable.
-	    </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_INVALID_SLOT">
-	  Invalid <code>slot</code>.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The variable type is not
-	  <code>Object</code> or a subclass of <code>Object</code>.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The supplied <paramlink id="value"/> is not compatible
-	  with the variable type.
-	</error>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Not a visible frame
-	</error>
+        <required id="can_access_local_variables"></required>
+      </capabilities>
+      <parameters>
+        <param id="thread">
+          <jthread null="current" frame="frame"/>
+          <description>
+            The thread of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="depth">
+          <jframeID thread="thread"/>
+          <description>
+            The depth of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="slot">
+          <jint/>
+          <description>
+            The variable's slot number.
+          </description>
+        </param>
+        <param id="value">
+          <jobject/>
+            <description>
+              The new value for the variable.
+            </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_INVALID_SLOT">
+          Invalid <code>slot</code>.
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The variable type is not
+          <code>Object</code> or a subclass of <code>Object</code>.
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The supplied <paramlink id="value"/> is not compatible
+          with the variable type.
+        </error>
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Not a visible frame
+        </error>
       </errors>
     </function>
 
     <function id="SetLocalInt" num="27">
       <synopsis>Set Local Variable - Int</synopsis>
       <description>
-	This function can be used to set the value of a local
+        This function can be used to set the value of a local
         variable whose type is <code>int</code>,
         <code>short</code>, <code>char</code>, <code>byte</code>, or
-	<code>boolean</code>.
+        <code>boolean</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_access_local_variables"></required>
-      </capabilities>
-      <parameters>
- 	<param id="thread">
-	  <jthread null="current" frame="frame"/>
-	  <description>
-	    The thread of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="depth">
-	  <jframeID thread="thread"/>
-	  <description>
-	    The depth of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="slot">
-	  <jint/>
-	  <description>
-	    The variable's slot number.
-	  </description>
-	</param>
-	<param id="value">
-	  <jint/>
-	  <description>
-	    The new value for the variable.
-	  </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_INVALID_SLOT">
-	  Invalid <code>slot</code>.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The variable type is not
+        <required id="can_access_local_variables"></required>
+      </capabilities>
+      <parameters>
+        <param id="thread">
+          <jthread null="current" frame="frame"/>
+          <description>
+            The thread of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="depth">
+          <jframeID thread="thread"/>
+          <description>
+            The depth of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="slot">
+          <jint/>
+          <description>
+            The variable's slot number.
+          </description>
+        </param>
+        <param id="value">
+          <jint/>
+          <description>
+            The new value for the variable.
+          </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_INVALID_SLOT">
+          Invalid <code>slot</code>.
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The variable type is not
           <code>int</code>, <code>short</code>,
           <code>char</code>, <code>byte</code>, or
-  	  <code>boolean</code>.
-	</error>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Not a visible frame
-	</error>
+          <code>boolean</code>.
+        </error>
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Not a visible frame
+        </error>
       </errors>
     </function>
 
     <function id="SetLocalLong" num="28">
       <synopsis>Set Local Variable - Long</synopsis>
       <description>
-	This function can be used to set the value of a local
+        This function can be used to set the value of a local
         variable whose type is <code>long</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_access_local_variables"></required>
-      </capabilities>
-      <parameters>
- 	<param id="thread">
-	  <jthread null="current" frame="frame"/>
-	  <description>
-	    The thread of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="depth">
-	  <jframeID thread="thread"/>
-	  <description>
-	    The depth of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="slot">
-	  <jint/>
-	  <description>
-	    The variable's slot number.
-	  </description>
-	</param>
-	<param id="value">
-	  <jlong/>
-	  <description>
-	    The new value for the variable.
-	  </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_INVALID_SLOT">
-	  Invalid <code>slot</code>.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The variable type is not <code>long</code>.
-	</error>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Not a visible frame
-	</error>
+        <required id="can_access_local_variables"></required>
+      </capabilities>
+      <parameters>
+        <param id="thread">
+          <jthread null="current" frame="frame"/>
+          <description>
+            The thread of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="depth">
+          <jframeID thread="thread"/>
+          <description>
+            The depth of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="slot">
+          <jint/>
+          <description>
+            The variable's slot number.
+          </description>
+        </param>
+        <param id="value">
+          <jlong/>
+          <description>
+            The new value for the variable.
+          </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_INVALID_SLOT">
+          Invalid <code>slot</code>.
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The variable type is not <code>long</code>.
+        </error>
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Not a visible frame
+        </error>
       </errors>
     </function>
 
     <function id="SetLocalFloat" num="29">
       <synopsis>Set Local Variable - Float</synopsis>
       <description>
-	This function can be used to set the value of a local
+        This function can be used to set the value of a local
         variable whose type is <code>float</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_access_local_variables"></required>
-      </capabilities>
-      <parameters>
- 	<param id="thread">
-	  <jthread null="current" frame="frame"/>
-	  <description>
-	    The thread of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="depth">
-	  <jframeID thread="thread"/>
-	  <description>
-	    The depth of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="slot">
-	  <jint/>
-	  <description>
-	    The variable's slot number.
-	  </description>
-	</param>
-	<param id="value">
-	  <jfloat/>
-	  <description>
-	    The new value for the variable.
-	  </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_INVALID_SLOT">
-	  Invalid <code>slot</code>.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The variable type is not <code>float</code>.
-	</error>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Not a visible frame
-	</error>
+        <required id="can_access_local_variables"></required>
+      </capabilities>
+      <parameters>
+        <param id="thread">
+          <jthread null="current" frame="frame"/>
+          <description>
+            The thread of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="depth">
+          <jframeID thread="thread"/>
+          <description>
+            The depth of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="slot">
+          <jint/>
+          <description>
+            The variable's slot number.
+          </description>
+        </param>
+        <param id="value">
+          <jfloat/>
+          <description>
+            The new value for the variable.
+          </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_INVALID_SLOT">
+          Invalid <code>slot</code>.
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The variable type is not <code>float</code>.
+        </error>
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Not a visible frame
+        </error>
       </errors>
     </function>
 
     <function id="SetLocalDouble" num="30">
       <synopsis>Set Local Variable - Double</synopsis>
       <description>
-	This function can be used to set the value of a local
+        This function can be used to set the value of a local
         variable whose type is <code>double</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_access_local_variables"></required>
-      </capabilities>
-      <parameters>
- 	<param id="thread">
-	  <jthread null="current" frame="frame"/>
-	  <description>
-	    The thread of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="depth">
-	  <jframeID thread="thread"/>
-	  <description>
-	    The depth of the frame containing the variable's value.
-	  </description>
-	</param>
-	<param id="slot">
-	  <jint/>
-	  <description>
-	    The variable's slot number.
-	  </description>
-	</param>
-	<param id="value">
-	  <jdouble/>
-	  <description>
-	    The new value for the variable.
-	  </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_INVALID_SLOT">
-	  Invalid <code>slot</code>.
-	</error>
-	<error id="JVMTI_ERROR_TYPE_MISMATCH">
-	  The variable type is not <code>double</code>.
-	</error>
-	<error id="JVMTI_ERROR_OPAQUE_FRAME">
-	  Not a visible frame
-	</error>
+        <required id="can_access_local_variables"></required>
+      </capabilities>
+      <parameters>
+        <param id="thread">
+          <jthread null="current" frame="frame"/>
+          <description>
+            The thread of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="depth">
+          <jframeID thread="thread"/>
+          <description>
+            The depth of the frame containing the variable's value.
+          </description>
+        </param>
+        <param id="slot">
+          <jint/>
+          <description>
+            The variable's slot number.
+          </description>
+        </param>
+        <param id="value">
+          <jdouble/>
+          <description>
+            The new value for the variable.
+          </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_INVALID_SLOT">
+          Invalid <code>slot</code>.
+        </error>
+        <error id="JVMTI_ERROR_TYPE_MISMATCH">
+          The variable type is not <code>double</code>.
+        </error>
+        <error id="JVMTI_ERROR_OPAQUE_FRAME">
+          Not a visible frame
+        </error>
       </errors>
     </function>
   </category>
 
   <category id="breakpointCategory" label="Breakpoint">
@@ -6241,83 +6233,83 @@
     </intro>
 
     <function id="SetBreakpoint" num="38">
       <synopsis>Set Breakpoint</synopsis>
       <description>
-	Set a breakpoint at the instruction indicated by
-	<code>method</code> and <code>location</code>.
-	An instruction can only have one breakpoint.
-	<p/>
-	Whenever the designated instruction is about to be executed, a
-	<eventlink id="Breakpoint"></eventlink> event is generated.
+        Set a breakpoint at the instruction indicated by
+        <code>method</code> and <code>location</code>.
+        An instruction can only have one breakpoint.
+        <p/>
+        Whenever the designated instruction is about to be executed, a
+        <eventlink id="Breakpoint"></eventlink> event is generated.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_generate_breakpoint_events"></required>
+        <required id="can_generate_breakpoint_events"></required>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass method="method"/>
-	    <description>
-	      The class in which to set the breakpoint
-	    </description>
-	</param>
-	<param id="method">
-	  <jmethodID class="klass"/>
-	    <description>
-	      The method in which to set the breakpoint
-	    </description>
-	</param>
-	<param id="location">
-	  <jlocation/>
-	  <description>
-	    the index of the instruction at which to set the breakpoint
+        <param id="klass">
+          <jclass method="method"/>
+            <description>
+              The class in which to set the breakpoint
+            </description>
+        </param>
+        <param id="method">
+          <jmethodID class="klass"/>
+            <description>
+              The method in which to set the breakpoint
+            </description>
+        </param>
+        <param id="location">
+          <jlocation/>
+          <description>
+            the index of the instruction at which to set the breakpoint
 
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_DUPLICATE">
-	  The designated bytecode already has a breakpoint.
-	</error>
+        <error id="JVMTI_ERROR_DUPLICATE">
+          The designated bytecode already has a breakpoint.
+        </error>
       </errors>
     </function>
 
     <function id="ClearBreakpoint" num="39">
       <synopsis>Clear Breakpoint</synopsis>
       <description>
-	Clear the breakpoint at the bytecode indicated by
-	<code>method</code> and <code>location</code>.
+        Clear the breakpoint at the bytecode indicated by
+        <code>method</code> and <code>location</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_generate_breakpoint_events"></required>
+        <required id="can_generate_breakpoint_events"></required>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass method="method"/>
-	    <description>
-	      The class in which to clear the breakpoint
-	    </description>
-	</param>
-	<param id="method">
-	  <jmethodID class="klass"/>
-	    <description>
-	      The method in which to clear the breakpoint
-	    </description>
-	</param>
-	<param id="location">
-	  <jlocation/>
-	  <description>
-	    the index of the instruction at which to clear the breakpoint
-	  </description>
-	</param>
+        <param id="klass">
+          <jclass method="method"/>
+            <description>
+              The class in which to clear the breakpoint
+            </description>
+        </param>
+        <param id="method">
+          <jmethodID class="klass"/>
+            <description>
+              The method in which to clear the breakpoint
+            </description>
+        </param>
+        <param id="location">
+          <jlocation/>
+          <description>
+            the index of the instruction at which to clear the breakpoint
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_NOT_FOUND">
-	  There's no breakpoint at the designated bytecode.
-	</error>
+        <error id="JVMTI_ERROR_NOT_FOUND">
+          There's no breakpoint at the designated bytecode.
+        </error>
       </errors>
     </function>
 
   </category>
 
@@ -6327,162 +6319,162 @@
     </intro>
 
     <function id="SetFieldAccessWatch" num="41">
       <synopsis>Set Field Access Watch</synopsis>
       <description>
-	Generate a <eventlink id="FieldAccess"></eventlink> event
-	when the field specified
-	by <code>klass</code> and
-	<code>field</code> is about to be accessed.
-	An event will be generated for each access of the field
-	until it is canceled with
-	<functionlink id="ClearFieldAccessWatch"></functionlink>.
-	Field accesses from Java programming language code or from JNI code are watched,
-	fields modified by other means are not watched.
-	Note that <jvmti/> users should be aware that their own field accesses
-	will trigger the watch.
-	A field can only have one field access watch set.
-	Modification of a field is not considered an access--use
-	<functionlink id="SetFieldModificationWatch"></functionlink>
-	to monitor modifications.
+        Generate a <eventlink id="FieldAccess"></eventlink> event
+        when the field specified
+        by <code>klass</code> and
+        <code>field</code> is about to be accessed.
+        An event will be generated for each access of the field
+        until it is canceled with
+        <functionlink id="ClearFieldAccessWatch"></functionlink>.
+        Field accesses from Java programming language code or from JNI code are watched,
+        fields modified by other means are not watched.
+        Note that <jvmti/> users should be aware that their own field accesses
+        will trigger the watch.
+        A field can only have one field access watch set.
+        Modification of a field is not considered an access--use
+        <functionlink id="SetFieldModificationWatch"></functionlink>
+        to monitor modifications.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_generate_field_access_events"></required>
+        <required id="can_generate_field_access_events"></required>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass field="field"/>
-	    <description>
-	      The class containing the field to watch
-	    </description>
-	</param>
-	<param id="field">
-	  <jfieldID class="klass"/>
-	    <description>
-	      The field to watch
+        <param id="klass">
+          <jclass field="field"/>
+            <description>
+              The class containing the field to watch
+            </description>
+        </param>
+        <param id="field">
+          <jfieldID class="klass"/>
+            <description>
+              The field to watch
 
-	    </description>
-	</param>
+            </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_DUPLICATE">
-	  The designated field is already being watched for accesses.
-	</error>
+        <error id="JVMTI_ERROR_DUPLICATE">
+          The designated field is already being watched for accesses.
+        </error>
       </errors>
     </function>
 
     <function id="ClearFieldAccessWatch" num="42">
       <synopsis>Clear Field Access Watch</synopsis>
       <description>
-	Cancel a field access watch previously set by
-	<functionlink id="SetFieldAccessWatch"></functionlink>, on the
-	field specified
-	by <code>klass</code> and
-	<code>field</code>.
+        Cancel a field access watch previously set by
+        <functionlink id="SetFieldAccessWatch"></functionlink>, on the
+        field specified
+        by <code>klass</code> and
+        <code>field</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_generate_field_access_events"></required>
+        <required id="can_generate_field_access_events"></required>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass field="field"/>
-	    <description>
-	      The class containing the field to watch
-	    </description>
-	</param>
-	<param id="field">
-	  <jfieldID class="klass"/>
-	    <description>
-	      The field to watch
+        <param id="klass">
+          <jclass field="field"/>
+            <description>
+              The class containing the field to watch
+            </description>
+        </param>
+        <param id="field">
+          <jfieldID class="klass"/>
+            <description>
+              The field to watch
 
-	    </description>
-	</param>
+            </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_NOT_FOUND">
-	  The designated field is not being watched for accesses.
-	</error>
+        <error id="JVMTI_ERROR_NOT_FOUND">
+          The designated field is not being watched for accesses.
+        </error>
       </errors>
     </function>
 
     <function id="SetFieldModificationWatch" num="43">
       <synopsis>Set Field Modification Watch</synopsis>
       <description>
-	Generate a <eventlink id="FieldModification"></eventlink> event
-	when the field specified
-	by <code>klass</code> and
-	<code>field</code> is about to be modified.
-	An event will be generated for each modification of the field
-	until it is canceled with
-	<functionlink id="ClearFieldModificationWatch"></functionlink>.
-	Field modifications from Java programming language code or from JNI code are watched,
-	fields modified by other means are not watched.
-	Note that <jvmti/> users should be aware that their own field modifications
-	will trigger the watch.
-	A field can only have one field modification watch set.
+        Generate a <eventlink id="FieldModification"></eventlink> event
+        when the field specified
+        by <code>klass</code> and
+        <code>field</code> is about to be modified.
+        An event will be generated for each modification of the field
+        until it is canceled with
+        <functionlink id="ClearFieldModificationWatch"></functionlink>.
+        Field modifications from Java programming language code or from JNI code are watched,
+        fields modified by other means are not watched.
+        Note that <jvmti/> users should be aware that their own field modifications
+        will trigger the watch.
+        A field can only have one field modification watch set.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_generate_field_modification_events"></required>
+        <required id="can_generate_field_modification_events"></required>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass field="field"/>
-	    <description>
-	      The class containing the field to watch
-	    </description>
-	</param>
-	<param id="field">
-	  <jfieldID class="klass"/>
-	    <description>
-	      The field to watch
+        <param id="klass">
+          <jclass field="field"/>
+            <description>
+              The class containing the field to watch
+            </description>
+        </param>
+        <param id="field">
+          <jfieldID class="klass"/>
+            <description>
+              The field to watch
 
-	    </description>
-	</param>
+            </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_DUPLICATE">
-	  The designated field is already being watched for modifications.
-	</error>
+        <error id="JVMTI_ERROR_DUPLICATE">
+          The designated field is already being watched for modifications.
+        </error>
       </errors>
     </function>
 
     <function id="ClearFieldModificationWatch" num="44">
       <synopsis>Clear Field Modification Watch</synopsis>
       <description>
 
-	Cancel a field modification watch previously set by
-	<functionlink id="SetFieldModificationWatch"></functionlink>, on the
-	field specified
-	by <code>klass</code> and
-	<code>field</code>.
+        Cancel a field modification watch previously set by
+        <functionlink id="SetFieldModificationWatch"></functionlink>, on the
+        field specified
+        by <code>klass</code> and
+        <code>field</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_generate_field_modification_events"></required>
+        <required id="can_generate_field_modification_events"></required>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass field="field"/>
-	    <description>
-	      The class containing the field to watch
-	    </description>
-	</param>
-	<param id="field">
-	  <jfieldID class="klass"/>
-	    <description>
-	      The field to watch
+        <param id="klass">
+          <jclass field="field"/>
+            <description>
+              The class containing the field to watch
+            </description>
+        </param>
+        <param id="field">
+          <jfieldID class="klass"/>
+            <description>
+              The field to watch
 
-	    </description>
-	</param>
+            </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_NOT_FOUND">
-	  The designated field is not being watched for modifications.
-	</error>
+        <error id="JVMTI_ERROR_NOT_FOUND">
+          The designated field is not being watched for modifications.
+        </error>
       </errors>
     </function>
   </category>
 
   <category id="module" label="Module">
@@ -6491,34 +6483,34 @@
     </intro>
 
     <function id="GetAllModules" num="3" since="9">
       <synopsis>Get All Modules</synopsis>
       <description>
-	Return an array of all modules loaded in the virtual machine.
+        Return an array of all modules loaded in the virtual machine.
         The array includes the unnamed module for each class loader.
-	The number of modules in the array is returned via
-	<code>module_count_ptr</code>, and the array itself via
-	<code>modules_ptr</code>.
-	<p/>
+        The number of modules in the array is returned via
+        <code>module_count_ptr</code>, and the array itself via
+        <code>modules_ptr</code>.
+        <p/>
       </description>
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="module_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of returned modules.
-	  </description>
-	</param>
-	<param id="modules_ptr">
-	  <allocbuf outcount="module_count_ptr"><jobject/></allocbuf>
-	    <description>
-	      On return, points to an array of references, one
+        <param id="module_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of returned modules.
+          </description>
+        </param>
+        <param id="modules_ptr">
+          <allocbuf outcount="module_count_ptr"><jobject/></allocbuf>
+            <description>
+              On return, points to an array of references, one
               for each module.
-	    </description>
-	</param>
+            </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -6859,80 +6851,80 @@
     </intro>
 
     <function id="GetLoadedClasses" jkernel="yes" num="78">
       <synopsis>Get Loaded Classes</synopsis>
       <description>
-	Return an array of all classes loaded in the virtual machine.
-	The number of classes in the array is returned via
-	<code>class_count_ptr</code>, and the array itself via
-	<code>classes_ptr</code>.
-	<p/>
-	Array classes of all types (including arrays of primitive types) are
-	included in the returned list. Primitive classes (for example,
-	<code>java.lang.Integer.TYPE</code>) are <i>not</i> included in this list.
+        Return an array of all classes loaded in the virtual machine.
+        The number of classes in the array is returned via
+        <code>class_count_ptr</code>, and the array itself via
+        <code>classes_ptr</code>.
+        <p/>
+        Array classes of all types (including arrays of primitive types) are
+        included in the returned list. Primitive classes (for example,
+        <code>java.lang.Integer.TYPE</code>) are <i>not</i> included in this list.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="class_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of classes.
-	  </description>
-	</param>
-	<param id="classes_ptr">
-	  <allocbuf outcount="class_count_ptr"><jclass/></allocbuf>
-	    <description>
-	      On return, points to an array of references, one
-	      for each class.
-	    </description>
-	</param>
+        <param id="class_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of classes.
+          </description>
+        </param>
+        <param id="classes_ptr">
+          <allocbuf outcount="class_count_ptr"><jclass/></allocbuf>
+            <description>
+              On return, points to an array of references, one
+              for each class.
+            </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetClassLoaderClasses" jkernel="yes" num="79">
       <synopsis>Get Classloader Classes</synopsis>
       <description>
-	Returns an array of those classes for which this class loader has
-	been recorded as an initiating loader. Each
-	class in the returned array was created by this class loader,
-	either by defining it directly or by delegation to another class loader.
-	See <vmspec chapter="5.3"/>.
-	<p/>
-	The number of classes in the array is returned via
-	<code>class_count_ptr</code>, and the array itself via
-	<code>classes_ptr</code>.
+        Returns an array of those classes for which this class loader has
+        been recorded as an initiating loader. Each
+        class in the returned array was created by this class loader,
+        either by defining it directly or by delegation to another class loader.
+        See <vmspec chapter="5.3"/>.
+        <p/>
+        The number of classes in the array is returned via
+        <code>class_count_ptr</code>, and the array itself via
+        <code>classes_ptr</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="initiating_loader">
+        <param id="initiating_loader">
           <ptrtype>
             <jobject/>
-	    <nullok>the classes initiated by the bootstrap loader will be returned</nullok>
+            <nullok>the classes initiated by the bootstrap loader will be returned</nullok>
           </ptrtype>
-	    <description>
-	      An initiating class loader.
-	    </description>
-	</param>
-	<param id="class_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of classes.
-	  </description>
-	</param>
-	<param id="classes_ptr">
-	  <allocbuf outcount="class_count_ptr"><jclass/></allocbuf>
-	    <description>
-	      On return, points to an array of references, one
-	      for each class.
-	    </description>
-	</param>
+            <description>
+              An initiating class loader.
+            </description>
+        </param>
+        <param id="class_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of classes.
+          </description>
+        </param>
+        <param id="classes_ptr">
+          <allocbuf outcount="class_count_ptr"><jclass/></allocbuf>
+            <description>
+              On return, points to an array of references, one
+              for each class.
+            </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -6943,302 +6935,302 @@
         <externallink id="jni/types.html#type-signatures">JNI
             type signature</externallink>
         and the generic signature of the class.
         For example, <code>java.util.List</code> is <code>"Ljava/util/List;"</code>
         and <code>int[]</code> is <code>"[I"</code>
-	The returned name for primitive classes
-	is the type signature character of the corresponding primitive type.
+        The returned name for primitive classes
+        is the type signature character of the corresponding primitive type.
         For example, <code>java.lang.Integer.TYPE</code> is <code>"I"</code>.
       </description>
       <origin>jvmdiClone</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="signature_ptr">
-	  <allocbuf>
+        <param id="klass">
+          <jclass/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="signature_ptr">
+          <allocbuf>
             <char/>
             <nullok>the signature is not returned</nullok>
           </allocbuf>
-	  <description>
-	    On return, points to the JNI type signature of the class, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
-	<param id="generic_ptr">
-	  <allocbuf>
+          <description>
+            On return, points to the JNI type signature of the class, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
+        <param id="generic_ptr">
+          <allocbuf>
             <char/>
             <nullok>the generic signature is not returned</nullok>
           </allocbuf>
-	  <description>
-	    On return, points to the generic signature of the class, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
+          <description>
+            On return, points to the generic signature of the class, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
             If there is no generic signature attribute for the class, then,
             on return, points to <code>NULL</code>.
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetClassStatus" phase="start" num="49">
       <synopsis>Get Class Status</synopsis>
       <description>
-	Get the status of the class. Zero or more of the following bits can be
-	set.
-	<constants id="jvmtiClassStatus" label="Class Status Flags" kind="bits">
-	  <constant id="JVMTI_CLASS_STATUS_VERIFIED" num="1">
-	    Class bytecodes have been verified
-	  </constant>
-	  <constant id="JVMTI_CLASS_STATUS_PREPARED" num="2">
-	    Class preparation is complete
-	  </constant>
-	  <constant id="JVMTI_CLASS_STATUS_INITIALIZED" num="4">
-	    Class initialization is complete. Static initializer has been run.
-	  </constant>
-	  <constant id="JVMTI_CLASS_STATUS_ERROR" num="8">
-	    Error during initialization makes class unusable
-	  </constant>
-	  <constant id="JVMTI_CLASS_STATUS_ARRAY" num="16">
-	    Class is an array.  If set, all other bits are zero.
-	  </constant>
-	  <constant id="JVMTI_CLASS_STATUS_PRIMITIVE" num="32">
-	    Class is a primitive class (for example, <code>java.lang.Integer.TYPE</code>).
-	    If set, all other bits are zero.
-	  </constant>
-	</constants>
+        Get the status of the class. Zero or more of the following bits can be
+        set.
+        <constants id="jvmtiClassStatus" label="Class Status Flags" kind="bits">
+          <constant id="JVMTI_CLASS_STATUS_VERIFIED" num="1">
+            Class bytecodes have been verified
+          </constant>
+          <constant id="JVMTI_CLASS_STATUS_PREPARED" num="2">
+            Class preparation is complete
+          </constant>
+          <constant id="JVMTI_CLASS_STATUS_INITIALIZED" num="4">
+            Class initialization is complete. Static initializer has been run.
+          </constant>
+          <constant id="JVMTI_CLASS_STATUS_ERROR" num="8">
+            Error during initialization makes class unusable
+          </constant>
+          <constant id="JVMTI_CLASS_STATUS_ARRAY" num="16">
+            Class is an array.  If set, all other bits are zero.
+          </constant>
+          <constant id="JVMTI_CLASS_STATUS_PRIMITIVE" num="32">
+            Class is a primitive class (for example, <code>java.lang.Integer.TYPE</code>).
+            If set, all other bits are zero.
+          </constant>
+        </constants>
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="status_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the current state of this class as one or
-	    more of the <internallink id="jvmtiClassStatus">class status flags</internallink>.
-	  </description>
-	</param>
+        <param id="klass">
+          <jclass/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="status_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the current state of this class as one or
+            more of the <internallink id="jvmtiClassStatus">class status flags</internallink>.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetSourceFileName" phase="start" num="50">
       <synopsis>Get Source File Name</synopsis>
       <description>
-	For the class indicated by <code>klass</code>, return the source file
-	name via <code>source_name_ptr</code>. The returned string
-	is a file name only and never contains a directory name.
-	<p/>
-	For primitive classes (for example, <code>java.lang.Integer.TYPE</code>)
-	and for arrays this function returns
-	<errorlink id="JVMTI_ERROR_ABSENT_INFORMATION"></errorlink>.
+        For the class indicated by <code>klass</code>, return the source file
+        name via <code>source_name_ptr</code>. The returned string
+        is a file name only and never contains a directory name.
+        <p/>
+        For primitive classes (for example, <code>java.lang.Integer.TYPE</code>)
+        and for arrays this function returns
+        <errorlink id="JVMTI_ERROR_ABSENT_INFORMATION"></errorlink>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
- 	<required id="can_get_source_file_name"></required>
+        <required id="can_get_source_file_name"></required>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="source_name_ptr">
-	  <allocbuf><char/></allocbuf>
-	  <description>
-	    On return, points to the class's source file name, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
+        <param id="klass">
+          <jclass/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="source_name_ptr">
+          <allocbuf><char/></allocbuf>
+          <description>
+            On return, points to the class's source file name, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_ABSENT_INFORMATION">
-	  Class information does not include a source file name. This includes
-	  cases where the class is an array class or primitive class.
-	</error>
+        <error id="JVMTI_ERROR_ABSENT_INFORMATION">
+          Class information does not include a source file name. This includes
+          cases where the class is an array class or primitive class.
+        </error>
       </errors>
     </function>
 
     <function id="GetClassModifiers" phase="start" num="51">
       <synopsis>Get Class Modifiers</synopsis>
       <description>
-	For the class indicated by <code>klass</code>, return the access
-	flags
-	via <code>modifiers_ptr</code>.
-	Access flags are defined in <vmspec chapter="4"/>.
-	<p/>
-	If the class is an array class, then its public, private, and protected
-	modifiers are the same as those of its component type. For arrays of
-	primitives, this component type is represented by one of the primitive
-	classes (for example, <code>java.lang.Integer.TYPE</code>).
-	<p/>
-	If the class is a primitive class, its public modifier is always true,
-	and its protected and private modifiers are always false.
-	<p/>
-	If the class is an array class or a primitive class then its final
-	modifier is always true and its interface modifier is always false.
-	The values of its other modifiers are not determined by this specification.
+        For the class indicated by <code>klass</code>, return the access
+        flags
+        via <code>modifiers_ptr</code>.
+        Access flags are defined in <vmspec chapter="4"/>.
+        <p/>
+        If the class is an array class, then its public, private, and protected
+        modifiers are the same as those of its component type. For arrays of
+        primitives, this component type is represented by one of the primitive
+        classes (for example, <code>java.lang.Integer.TYPE</code>).
+        <p/>
+        If the class is a primitive class, its public modifier is always true,
+        and its protected and private modifiers are always false.
+        <p/>
+        If the class is an array class or a primitive class then its final
+        modifier is always true and its interface modifier is always false.
+        The values of its other modifiers are not determined by this specification.
 
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="modifiers_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the current access flags of this class.
+        <param id="klass">
+          <jclass/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="modifiers_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the current access flags of this class.
 
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetClassMethods" phase="start" num="52">
       <synopsis>Get Class Methods</synopsis>
       <description>
-	For the class indicated by <code>klass</code>, return a count of
-	methods via <code>method_count_ptr</code> and a list of
-	method IDs via <code>methods_ptr</code>. The method list contains
-	constructors and static initializers as well as true methods.
-	Only directly declared methods are returned (not inherited methods).
-	An empty method list is returned for array classes and primitive classes
-	(for example, <code>java.lang.Integer.TYPE</code>).
+        For the class indicated by <code>klass</code>, return a count of
+        methods via <code>method_count_ptr</code> and a list of
+        method IDs via <code>methods_ptr</code>. The method list contains
+        constructors and static initializers as well as true methods.
+        Only directly declared methods are returned (not inherited methods).
+        An empty method list is returned for array classes and primitive classes
+        (for example, <code>java.lang.Integer.TYPE</code>).
       </description>
       <origin>jvmdi</origin>
       <capabilities>
         <capability id="can_maintain_original_method_order"/>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="method_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of methods declared in this class.
-	  </description>
-	</param>
-	<param id="methods_ptr">
-	  <allocbuf outcount="method_count_ptr"><jmethodID class="klass"/></allocbuf>
-	    <description>
-	      On return, points to the method ID array.
-	    </description>
-	</param>
+        <param id="klass">
+          <jclass/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="method_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of methods declared in this class.
+          </description>
+        </param>
+        <param id="methods_ptr">
+          <allocbuf outcount="method_count_ptr"><jmethodID class="klass"/></allocbuf>
+            <description>
+              On return, points to the method ID array.
+            </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_CLASS_NOT_PREPARED">
-	  <paramlink id="klass"></paramlink> is not prepared.
-	</error>
+        <error id="JVMTI_ERROR_CLASS_NOT_PREPARED">
+          <paramlink id="klass"></paramlink> is not prepared.
+        </error>
       </errors>
     </function>
 
     <function id="GetClassFields" phase="start" num="53">
       <synopsis>Get Class Fields</synopsis>
       <description>
-	For the class indicated by <code>klass</code>, return a count of fields
-	via <code>field_count_ptr</code> and a list of field IDs via
-	<code>fields_ptr</code>.
-	Only directly declared fields are returned (not inherited fields).
-	Fields are returned in the order they occur in the class file.
-	An empty field list is returned for array classes and primitive classes
-	(for example, <code>java.lang.Integer.TYPE</code>).
-	Use JNI to determine the length of an array.
+        For the class indicated by <code>klass</code>, return a count of fields
+        via <code>field_count_ptr</code> and a list of field IDs via
+        <code>fields_ptr</code>.
+        Only directly declared fields are returned (not inherited fields).
+        Fields are returned in the order they occur in the class file.
+        An empty field list is returned for array classes and primitive classes
+        (for example, <code>java.lang.Integer.TYPE</code>).
+        Use JNI to determine the length of an array.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="field_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of fields declared in this class.
-	  </description>
-	</param>
-	<param id="fields_ptr">
-	  <allocbuf outcount="field_count_ptr"><jfieldID/></allocbuf>
-	    <description>
-	      On return, points to the field ID array.
-	    </description>
-	</param>
+        <param id="klass">
+          <jclass/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="field_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of fields declared in this class.
+          </description>
+        </param>
+        <param id="fields_ptr">
+          <allocbuf outcount="field_count_ptr"><jfieldID/></allocbuf>
+            <description>
+              On return, points to the field ID array.
+            </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_CLASS_NOT_PREPARED">
-	  <paramlink id="klass"></paramlink> is not prepared.
-	</error>
+        <error id="JVMTI_ERROR_CLASS_NOT_PREPARED">
+          <paramlink id="klass"></paramlink> is not prepared.
+        </error>
       </errors>
     </function>
 
     <function id="GetImplementedInterfaces" phase="start" num="54">
       <synopsis>Get Implemented Interfaces</synopsis>
       <description>
-	Return the direct super-interfaces of this class. For a class, this
-	function returns the interfaces declared in its <code>implements</code>
-	clause. For an interface, this function returns the interfaces declared in
-	its <code>extends</code> clause.
-	An empty interface list is returned for array classes and primitive classes
-	(for example, <code>java.lang.Integer.TYPE</code>).
+        Return the direct super-interfaces of this class. For a class, this
+        function returns the interfaces declared in its <code>implements</code>
+        clause. For an interface, this function returns the interfaces declared in
+        its <code>extends</code> clause.
+        An empty interface list is returned for array classes and primitive classes
+        (for example, <code>java.lang.Integer.TYPE</code>).
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="interface_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of interfaces.
-	  </description>
-	</param>
-	<param id="interfaces_ptr">
-	  <allocbuf outcount="interface_count_ptr"><jclass/></allocbuf>
-	    <description>
-	      On return, points to the interface array.
-	    </description>
-	</param>
+        <param id="klass">
+          <jclass/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="interface_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of interfaces.
+          </description>
+        </param>
+        <param id="interfaces_ptr">
+          <allocbuf outcount="interface_count_ptr"><jclass/></allocbuf>
+            <description>
+              On return, points to the interface array.
+            </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_CLASS_NOT_PREPARED">
-	  <paramlink id="klass"></paramlink> is not prepared.
-	</error>
+        <error id="JVMTI_ERROR_CLASS_NOT_PREPARED">
+          <paramlink id="klass"></paramlink> is not prepared.
+        </error>
       </errors>
     </function>
 
     <function id="GetClassVersionNumbers" phase="start" num="145" since="1.1">
       <synopsis>Get Class Version Numbers</synopsis>
@@ -7250,46 +7242,46 @@
       </description>
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="minor_version_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the value of the
+        <param id="klass">
+          <jclass/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="minor_version_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the value of the
             <code>minor_version</code> item of the
             Class File Format.
             Note: to be consistent with the Class File Format,
             the minor version number is the first parameter.
-	  </description>
-	</param>
-	<param id="major_version_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the value of the
+          </description>
+        </param>
+        <param id="major_version_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the value of the
             <code>major_version</code> item of the
             Class File Format.
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_ABSENT_INFORMATION">
-	  The class is a primitive or array class.
-	</error>
+        <error id="JVMTI_ERROR_ABSENT_INFORMATION">
+          The class is a primitive or array class.
+        </error>
       </errors>
     </function>
 
     <function id="GetConstantPool" phase="start" num="146" since="1.1">
       <synopsis>Get Constant Pool</synopsis>
       <description>
-	For the class indicated by <code>klass</code>,
+        For the class indicated by <code>klass</code>,
         return the raw bytes of the constant pool in the format of the
         <code>constant_pool</code> item of
         <vmspec chapter="4"/>.
         The format of the constant pool may differ between versions
         of the Class File Format, so, the
@@ -7320,115 +7312,115 @@
         bytecodes (for example,  UTF-8 strings associated with annotations) are
         not  required to exist in the returned constant pool.
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_get_constant_pool"></required>
+        <required id="can_get_constant_pool"></required>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="constant_pool_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of entries
+        <param id="klass">
+          <jclass/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="constant_pool_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of entries
             in the constant pool table plus one.
             This corresponds to the <code>constant_pool_count</code>
             item of the Class File Format.
-	  </description>
-	</param>
-	<param id="constant_pool_byte_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of bytes
+          </description>
+        </param>
+        <param id="constant_pool_byte_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of bytes
             in the returned raw constant pool.
-	  </description>
-	</param>
-	<param id="constant_pool_bytes_ptr">
-	  <allocbuf outcount="constant_pool_byte_count_ptr"><uchar/></allocbuf>
-	    <description>
-	      On return, points to the raw constant pool, that is the bytes
+          </description>
+        </param>
+        <param id="constant_pool_bytes_ptr">
+          <allocbuf outcount="constant_pool_byte_count_ptr"><uchar/></allocbuf>
+            <description>
+              On return, points to the raw constant pool, that is the bytes
               defined by the <code>constant_pool</code> item of the
               Class File Format
-	    </description>
-	</param>
+            </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_ABSENT_INFORMATION">
-	  The class is a primitive or array class.
-	</error>
+        <error id="JVMTI_ERROR_ABSENT_INFORMATION">
+          The class is a primitive or array class.
+        </error>
       </errors>
     </function>
 
     <function id="IsInterface" phase="start" num="55">
       <synopsis>Is Interface</synopsis>
       <description>
-	Determines whether a class object reference represents an interface.
-	The <code>jboolean</code> result is
-	<code>JNI_TRUE</code> if the "class" is actually an interface,
-	<code>JNI_FALSE</code> otherwise.
+        Determines whether a class object reference represents an interface.
+        The <code>jboolean</code> result is
+        <code>JNI_TRUE</code> if the "class" is actually an interface,
+        <code>JNI_FALSE</code> otherwise.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="is_interface_ptr">
-	  <outptr><jboolean/></outptr>
-	  <description>
-	    On return, points to the boolean result of this function.
+        <param id="klass">
+          <jclass/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="is_interface_ptr">
+          <outptr><jboolean/></outptr>
+          <description>
+            On return, points to the boolean result of this function.
 
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="IsArrayClass" phase="start" num="56">
       <synopsis>Is Array Class</synopsis>
       <description>
-	Determines whether a class object reference represents an array.
-	The <code>jboolean</code> result is
-	<code>JNI_TRUE</code> if the class is an array,
-	<code>JNI_FALSE</code> otherwise.
+        Determines whether a class object reference represents an array.
+        The <code>jboolean</code> result is
+        <code>JNI_TRUE</code> if the class is an array,
+        <code>JNI_FALSE</code> otherwise.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="is_array_class_ptr">
-	  <outptr><jboolean/></outptr>
-	  <description>
-	    On return, points to the boolean result of this function.
+        <param id="klass">
+          <jclass/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="is_array_class_ptr">
+          <outptr><jboolean/></outptr>
+          <description>
+            On return, points to the boolean result of this function.
 
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="IsModifiableClass" jkernel="yes" phase="start" num="45" since="1.1">
       <synopsis>Is Modifiable Class</synopsis>
       <description>
-	Determines whether a class is modifiable.
+        Determines whether a class is modifiable.
         If a class is modifiable (<paramlink id="is_modifiable_class_ptr"/>
         returns <code>JNI_TRUE</code>) the class can be
         redefined with <functionlink id="RedefineClasses"/> (assuming
         the agent possesses the
         <fieldlink id="can_redefine_classes" struct="jvmtiCapabilities"/>
@@ -7447,11 +7439,11 @@
       </description>
       <origin>new</origin>
       <capabilities>
         <capability id="can_redefine_any_class">
           If possessed then all classes (except primitive, array, and some implementation defined
-          classes) are modifiable (redefine or retransform).
+          classes) are modifiable with <functionlink id="RedefineClasses"/>.
         </capability>
         <capability id="can_retransform_any_class">
           If possessed then all classes (except primitive, array, and some implementation defined
           classes) are modifiable with <functionlink id="RetransformClasses"/>.
         </capability>
@@ -7465,92 +7457,92 @@
           But must additionally be possessed to modify the class with
           <functionlink id="RetransformClasses"/>.
         </capability>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="is_modifiable_class_ptr">
-	  <outptr><jboolean/></outptr>
-	  <description>
-	    On return, points to the boolean result of this function.
-	  </description>
-	</param>
+        <param id="klass">
+          <jclass/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="is_modifiable_class_ptr">
+          <outptr><jboolean/></outptr>
+          <description>
+            On return, points to the boolean result of this function.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetClassLoader" phase="start" num="57">
       <synopsis>Get Class Loader</synopsis>
       <description>
-	For the class indicated by <code>klass</code>, return via
-	<code>classloader_ptr</code> a reference to the class loader for the
-	class.
+        For the class indicated by <code>klass</code>, return via
+        <code>classloader_ptr</code> a reference to the class loader for the
+        class.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="classloader_ptr">
-	  <outptr><jobject/></outptr>
-	    <description>
-	      On return, points to the class loader that loaded
-	      this class.
+        <param id="klass">
+          <jclass/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="classloader_ptr">
+          <outptr><jobject/></outptr>
+            <description>
+              On return, points to the class loader that loaded
+              this class.
               If the class was not created by a class loader
               or if the class loader is the bootstrap class loader,
               points to <code>NULL</code>.
- 	    </description>
-	</param>
+            </description>
+        </param>
       </parameters>
       <errors>
       </errors>
 
     </function>
 
     <function id="GetSourceDebugExtension" phase="start" num="90">
       <synopsis>Get Source Debug Extension</synopsis>
       <description>
-	For the class indicated by <code>klass</code>, return the debug
+        For the class indicated by <code>klass</code>, return the debug
         extension via <code>source_debug_extension_ptr</code>.
         The returned string
-	contains exactly the debug extension information present in the
-	class file of <code>klass</code>.
+        contains exactly the debug extension information present in the
+        class file of <code>klass</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_get_source_debug_extension"></required>
+        <required id="can_get_source_debug_extension"></required>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="source_debug_extension_ptr">
-	  <allocbuf><char/></allocbuf>
-	  <description>
-	    On return, points to the class's debug extension, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
+        <param id="klass">
+          <jclass/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="source_debug_extension_ptr">
+          <allocbuf><char/></allocbuf>
+          <description>
+            On return, points to the class's debug extension, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_ABSENT_INFORMATION">
-	  Class information does not include a debug extension.
-	</error>
+        <error id="JVMTI_ERROR_ABSENT_INFORMATION">
+          Class information does not include a debug extension.
+        </error>
       </errors>
     </function>
 
     <function id="RetransformClasses" jkernel="yes" num="152" since="1.1">
       <synopsis>Retransform Classes</synopsis>
@@ -7639,12 +7631,12 @@
         <p/>
         The retransformation may change method bodies, the constant pool and attributes
         (unless explicitly prohibited).
         The retransformation must not add, remove or rename fields or methods, change the
         signatures of methods, change modifiers, or change inheritance.
-        The retransformation must not change the <code>NestHost</code> or
-        <code>NestMembers</code> attributes.
+        The retransformation must not change the <code>NestHost</code>,
+        <code>NestMembers</code>, or <code>Record</code> attributes.
         These restrictions may be lifted in future versions.
         See the error return description below for information on error codes
         returned if an unsupported retransformation is attempted.
         The class file bytes are not verified or installed until they have passed
         through the chain of <eventlink id="ClassFileLoadHook"/> events, thus the
@@ -7727,80 +7719,80 @@
     </function>
 
     <function id="RedefineClasses" jkernel="yes" num="87">
       <synopsis>Redefine Classes</synopsis>
       <typedef id="jvmtiClassDefinition" label="Class redefinition description">
-	<field id="klass">
-	  <jclass/>
-	    <description>
-	      Class object for this class
-	    </description>
-	</field>
-	<field id="class_byte_count">
-	  <jint/>
-	  <description>
-	    Number of bytes defining class (below)
-	  </description>
-	</field>
-	<field id="class_bytes">
-	  <inbuf incount="class_byte_count"><uchar/></inbuf>
-	  <description>
+        <field id="klass">
+          <jclass/>
+            <description>
+              Class object for this class
+            </description>
+        </field>
+        <field id="class_byte_count">
+          <jint/>
+          <description>
+            Number of bytes defining class (below)
+          </description>
+        </field>
+        <field id="class_bytes">
+          <inbuf incount="class_byte_count"><uchar/></inbuf>
+          <description>
             Bytes defining class (in <vmspec chapter="4"/>)
-	  </description>
-	</field>
+          </description>
+        </field>
       </typedef>
       <description>
-	All classes given are redefined according to the definitions
-	supplied.
-	This function is used to replace the definition of a class
-	with a new definition, as might be needed in fix-and-continue
-	debugging.
-	Where the existing class file bytes are to be transformed, for
-	example in
-	<internallink id="bci">bytecode instrumentation</internallink>,
-	<functionlink id="RetransformClasses"/> should be used.
-	<p/>
-	Redefinition can cause new versions of methods to be installed.
-	Old method versions may become
-	<internallink id="obsoleteMethods">obsolete</internallink>
-	The new method version will be used on new invokes.
-	If a method has active stack frames, those active frames continue to
+        All classes given are redefined according to the definitions
+        supplied.
+        This function is used to replace the definition of a class
+        with a new definition, as might be needed in fix-and-continue
+        debugging.
+        Where the existing class file bytes are to be transformed, for
+        example in
+        <internallink id="bci">bytecode instrumentation</internallink>,
+        <functionlink id="RetransformClasses"/> should be used.
+        <p/>
+        Redefinition can cause new versions of methods to be installed.
+        Old method versions may become
+        <internallink id="obsoleteMethods">obsolete</internallink>
+        The new method version will be used on new invokes.
+        If a method has active stack frames, those active frames continue to
         run the bytecodes of the original method version.
-	If resetting of stack frames is desired, use
-	<functionlink id="PopFrame"></functionlink>
-	to pop frames with obsolete method versions.
-	<p/>
-	This function does not cause any initialization except that which
-	would occur under the customary JVM semantics.
-	In other words, redefining a class does not cause its initializers to be
-	run. The values of static fields will remain as they were
-	prior to the call.
-	<p/>
-	Threads need not be suspended.
-	<p/>
-	All breakpoints in the class are cleared.
-	<p/>
-	All attributes are updated.
-	<p/>
+        If resetting of stack frames is desired, use
+        <functionlink id="PopFrame"></functionlink>
+        to pop frames with obsolete method versions.
+        <p/>
+        This function does not cause any initialization except that which
+        would occur under the customary JVM semantics.
+        In other words, redefining a class does not cause its initializers to be
+        run. The values of static fields will remain as they were
+        prior to the call.
+        <p/>
+        Threads need not be suspended.
+        <p/>
+        All breakpoints in the class are cleared.
+        <p/>
+        All attributes are updated.
+        <p/>
         Instances of the redefined class are not affected -- fields retain their
         previous values.
-	<functionlink id="GetTag">Tags</functionlink> on the instances are
+        <functionlink id="GetTag">Tags</functionlink> on the instances are
         also unaffected.
-	<p/>
-	In response to this call, the <jvmti/> event
+        <p/>
+        In response to this call, the <jvmti/> event
         <eventlink id="ClassFileLoadHook">Class File Load Hook</eventlink>
         will be sent (if enabled), but no other <jvmti/> events will be sent.
         <p/>
         The redefinition may change method bodies, the constant pool and attributes
         (unless explicitly prohibited).
         The redefinition must not add, remove or rename fields or methods, change the
         signatures of methods, change modifiers, or change inheritance.
-        The retransformation must not change the <code>NestHost</code> or
-        <code>NestMembers</code> attributes.
+        The redefinition must not change the <code>NestHost</code>,
+        <code>NestMembers</code>, or <code>Record</code> attributes.
         These restrictions may be lifted in future versions.
-	See the error return description below for information on error codes
-	returned if an unsupported redefinition is attempted.
+        See the error return description below for information on error codes
+        returned if an unsupported redefinition is attempted.
         The class file bytes are not verified or installed until they have passed
         through the chain of <eventlink id="ClassFileLoadHook"/> events, thus the
         returned error code reflects the result of the transformations applied
         to the bytes passed into <paramlink id="class_definitions"/>.
         If any error code is returned other than <code>JVMTI_ERROR_NONE</code>,
@@ -7808,80 +7800,80 @@
         When this function returns (with the error code of <code>JVMTI_ERROR_NONE</code>)
         all of the classes to be redefined will have their new definitions installed.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_redefine_classes"></required>
+        <required id="can_redefine_classes"></required>
         <capability id="can_redefine_any_class"></capability>
       </capabilities>
       <parameters>
-	<param id="class_count">
-	  <jint min="0"/>
-	  <description>
-	    The number of classes specified in <code>class_definitions</code>
-	  </description>
-	</param>
-	<param id="class_definitions">
-	  <inbuf incount="class_count"><struct>jvmtiClassDefinition</struct></inbuf>
-	  <description>
-	    The array of new class definitions
-	  </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_NULL_POINTER">
-	  One of <code>class_bytes</code> is <code>NULL</code>.
-	</error>
-	<error id="JVMTI_ERROR_UNMODIFIABLE_CLASS">
-	  An element of <code>class_definitions</code> cannot be modified.
+        <param id="class_count">
+          <jint min="0"/>
+          <description>
+            The number of classes specified in <code>class_definitions</code>
+          </description>
+        </param>
+        <param id="class_definitions">
+          <inbuf incount="class_count"><struct>jvmtiClassDefinition</struct></inbuf>
+          <description>
+            The array of new class definitions
+          </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_NULL_POINTER">
+          One of <code>class_bytes</code> is <code>NULL</code>.
+        </error>
+        <error id="JVMTI_ERROR_UNMODIFIABLE_CLASS">
+          An element of <code>class_definitions</code> cannot be modified.
           See <functionlink id="IsModifiableClass"/>.
-	</error>
-	<error id="JVMTI_ERROR_INVALID_CLASS">
-	  An element of <code>class_definitions</code> is not a valid class.
-	</error>
-	<error id="JVMTI_ERROR_UNSUPPORTED_VERSION">
-	  A new class file has a version number not supported by this VM.
-	</error>
-	<error id="JVMTI_ERROR_INVALID_CLASS_FORMAT">
-	  A new class file is malformed (The VM would return a <code>ClassFormatError</code>).
-	</error>
-	<error id="JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION">
-	  The new class file definitions would lead to a circular definition
-	  (the VM would return a <code>ClassCircularityError</code>).
-	</error>
-	<error id="JVMTI_ERROR_FAILS_VERIFICATION">
-	  The class bytes fail verification.
-	</error>
-	<error id="JVMTI_ERROR_NAMES_DONT_MATCH">
-	  The class name defined in a new class file is
-	  different from the name in the old class object.
-	</error>
-	<error id="JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED">
-	  A new class file would require adding a method.
-	</error>
-	<error id="JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED">
-	  A new class version changes a field.
-	</error>
-	<error id="JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED">
-	  A direct superclass is different for a new class
-	  version, or the set of directly implemented
-	  interfaces is different.
-	</error>
-	<error id="JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED">
-	  A new class version does not declare a method
-	  declared in the old class version.
-	</error>
+        </error>
+        <error id="JVMTI_ERROR_INVALID_CLASS">
+          An element of <code>class_definitions</code> is not a valid class.
+        </error>
+        <error id="JVMTI_ERROR_UNSUPPORTED_VERSION">
+          A new class file has a version number not supported by this VM.
+        </error>
+        <error id="JVMTI_ERROR_INVALID_CLASS_FORMAT">
+          A new class file is malformed (The VM would return a <code>ClassFormatError</code>).
+        </error>
+        <error id="JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION">
+          The new class file definitions would lead to a circular definition
+          (the VM would return a <code>ClassCircularityError</code>).
+        </error>
+        <error id="JVMTI_ERROR_FAILS_VERIFICATION">
+          The class bytes fail verification.
+        </error>
+        <error id="JVMTI_ERROR_NAMES_DONT_MATCH">
+          The class name defined in a new class file is
+          different from the name in the old class object.
+        </error>
+        <error id="JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED">
+          A new class file would require adding a method.
+        </error>
+        <error id="JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED">
+          A new class version changes a field.
+        </error>
+        <error id="JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED">
+          A direct superclass is different for a new class
+          version, or the set of directly implemented
+          interfaces is different.
+        </error>
+        <error id="JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED">
+          A new class version does not declare a method
+          declared in the old class version.
+        </error>
         <error id="JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_ATTRIBUTE_CHANGED">
           A new class version has unsupported differences in class attributes.
         </error>
-	<error id="JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED">
-	  A new class version has different modifiers.
-	</error>
-	<error id="JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED">
-	  A method in the new class version has different modifiers
-	  than its counterpart in the old class version.
-	</error>
+        <error id="JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED">
+          A new class version has different modifiers.
+        </error>
+        <error id="JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED">
+          A method in the new class version has different modifiers
+          than its counterpart in the old class version.
+        </error>
         <error id="JVMTI_ERROR_UNMODIFIABLE_MODULE">
           A module cannot be modified.
           See <functionlink id="IsModifiableModule"/>.
         </error>
       </errors>
@@ -7892,12 +7884,12 @@
   <category id="object" label="Object">
 
     <function id="GetObjectSize" jkernel="yes" phase="start" num="154">
       <synopsis>Get Object Size</synopsis>
       <description>
-	For the object indicated by <code>object</code>,
-	return via <code>size_ptr</code> the size of the object.
+        For the object indicated by <code>object</code>,
+        return via <code>size_ptr</code> the size of the object.
         This size is an implementation-specific approximation of
         the amount of storage consumed by this object.
         It may include some or all of the object's overhead, and thus
         is useful for comparison within an implementation but not
         between implementations.
@@ -7905,127 +7897,127 @@
       </description>
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="object">
-	  <jobject/>
-	    <description>
-	      The object to query.
-	    </description>
-	</param>
-	<param id="size_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    On return, points to the object's size in bytes.
-	  </description>
-	</param>
+        <param id="object">
+          <jobject/>
+            <description>
+              The object to query.
+            </description>
+        </param>
+        <param id="size_ptr">
+          <outptr><jlong/></outptr>
+          <description>
+            On return, points to the object's size in bytes.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetObjectHashCode" phase="start" num="58">
       <synopsis>Get Object Hash Code</synopsis>
       <description>
-	For the object indicated by <code>object</code>,
-	return via <code>hash_code_ptr</code> a hash code.
+        For the object indicated by <code>object</code>,
+        return via <code>hash_code_ptr</code> a hash code.
         This hash code could be used to maintain a hash table of object references,
         however, on some implementations this can cause significant performance
         impacts--in most cases
         <internallink id="Heap">tags</internallink>
         will be a more efficient means of associating information with objects.
-	This function guarantees
-	the same hash code value for a particular object throughout its life
+        This function guarantees
+        the same hash code value for a particular object throughout its life
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="object">
-	  <jobject/>
-	    <description>
-	      The object to query.
-	    </description>
-	</param>
-	<param id="hash_code_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the object's hash code.
-	  </description>
-	</param>
+        <param id="object">
+          <jobject/>
+            <description>
+              The object to query.
+            </description>
+        </param>
+        <param id="hash_code_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the object's hash code.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetObjectMonitorUsage" num="59">
       <synopsis>Get Object Monitor Usage</synopsis>
       <typedef id="jvmtiMonitorUsage" label="Object monitor usage information">
-	<field id="owner">
-	  <jthread/>
-	    <description>
-	      The thread owning this monitor, or <code>NULL</code> if unused
-	    </description>
-	</field>
-	<field id="entry_count">
-	  <jint/>
-	  <description>
-	    The number of times the owning thread has entered the monitor
-	  </description>
-	</field>
-	<field id="waiter_count">
-	  <jint/>
-	  <description>
-	    The number of threads waiting to own this monitor
-	  </description>
-	</field>
-	<field id="waiters">
-	  <allocfieldbuf><jthread/></allocfieldbuf>
-	    <description>
-	      The <code>waiter_count</code> waiting threads
-	    </description>
-	</field>
-	<field id="notify_waiter_count">
-	  <jint/>
-	  <description>
-	    The number of threads waiting to be notified by this monitor
-	  </description>
-	</field>
-	<field id="notify_waiters">
-	  <allocfieldbuf><jthread/></allocfieldbuf>
-	    <description>
-	      The <code>notify_waiter_count</code> threads waiting to be notified
-	    </description>
-	</field>
+        <field id="owner">
+          <jthread/>
+            <description>
+              The thread owning this monitor, or <code>NULL</code> if unused
+            </description>
+        </field>
+        <field id="entry_count">
+          <jint/>
+          <description>
+            The number of times the owning thread has entered the monitor
+          </description>
+        </field>
+        <field id="waiter_count">
+          <jint/>
+          <description>
+            The number of threads waiting to own this monitor
+          </description>
+        </field>
+        <field id="waiters">
+          <allocfieldbuf><jthread/></allocfieldbuf>
+            <description>
+              The <code>waiter_count</code> waiting threads
+            </description>
+        </field>
+        <field id="notify_waiter_count">
+          <jint/>
+          <description>
+            The number of threads waiting to be notified by this monitor
+          </description>
+        </field>
+        <field id="notify_waiters">
+          <allocfieldbuf><jthread/></allocfieldbuf>
+            <description>
+              The <code>notify_waiter_count</code> threads waiting to be notified
+            </description>
+        </field>
       </typedef>
       <description>
-	Get information about the object's monitor.
-	The fields of the <functionlink id="jvmtiMonitorUsage"></functionlink> structure
-	are filled in with information about usage of the monitor.
-	  <todo>
-	    Decide and then clarify suspend requirements.
-	  </todo>
+        Get information about the object's monitor.
+        The fields of the <functionlink id="jvmtiMonitorUsage"></functionlink> structure
+        are filled in with information about usage of the monitor.
+          <todo>
+            Decide and then clarify suspend requirements.
+          </todo>
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_get_monitor_info"></required>
+        <required id="can_get_monitor_info"></required>
       </capabilities>
       <parameters>
-	<param id="object">
-	  <jobject/>
-	    <description>
-	      The object to query.
-	    </description>
-	</param>
-	<param id="info_ptr">
-	  <outptr><struct>jvmtiMonitorUsage</struct></outptr>
-	  <description>
-	    On return, filled with monitor information for the
-	    specified object.
-	  </description>
-	</param>
+        <param id="object">
+          <jobject/>
+            <description>
+              The object to query.
+            </description>
+        </param>
+        <param id="info_ptr">
+          <outptr><struct>jvmtiMonitorUsage</struct></outptr>
+          <description>
+            On return, filled with monitor information for the
+            specified object.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -8042,22 +8034,22 @@
       <capabilities>
         <required id="can_get_monitor_info"></required>
       </capabilities>
       <parameters>
         <param id="monitorCnt">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, pointer to the number
-	    of monitors returned in <code>monitors_ptr</code>.
-	  </description>
-	</param>
+          <outptr><jint/></outptr>
+          <description>
+            On return, pointer to the number
+            of monitors returned in <code>monitors_ptr</code>.
+          </description>
+        </param>
         <param id="monitors_ptr">
-	  <allocbuf outcount="monitorCnt"><jobject/></allocbuf>
-	    <description>
-	      On return, pointer to the monitor list.
-	    </description>
-	</param>
+          <allocbuf outcount="monitorCnt"><jobject/></allocbuf>
+            <description>
+              On return, pointer to the monitor list.
+            </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
     </elide>
@@ -8070,172 +8062,172 @@
     </intro>
 
     <function id="GetFieldName" phase="start" num="60">
       <synopsis>Get Field Name (and Signature)</synopsis>
       <description>
-	For the field indicated by <paramlink id="klass"/> and <paramlink id="field"/>,
-	return the field name via <paramlink id="name_ptr"/> and field signature via
-	<paramlink id="signature_ptr"/>.
-	<p/>
+        For the field indicated by <paramlink id="klass"/> and <paramlink id="field"/>,
+        return the field name via <paramlink id="name_ptr"/> and field signature via
+        <paramlink id="signature_ptr"/>.
+        <p/>
         Field signatures are defined in the
         <externallink id="jni/index.html">JNI Specification</externallink>
         and are referred to as <code>field descriptors</code> in
         <vmspec chapter="4.3.2"/>.
       </description>
       <origin>jvmdiClone</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass field="field"/>
-	    <description>
-	      The class of the field to query.
-	    </description>
-	</param>
-	<param id="field">
-	  <jfieldID class="klass"/>
-	    <description>
-	      The field to query.
-	    </description>
-	</param>
-	<param id="name_ptr">
-	  <allocbuf>
-	    <char/>
-	    <nullok>the name is not returned</nullok>
-	  </allocbuf>
-	  <description>
-	    On return, points to the field name, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
-	<param id="signature_ptr">
-	  <allocbuf>
-	    <char/>
-	    <nullok>the signature is not returned</nullok>
-	  </allocbuf>
-	  <description>
-	    On return, points to the field signature, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
-	<param id="generic_ptr">
-	  <allocbuf>
+        <param id="klass">
+          <jclass field="field"/>
+            <description>
+              The class of the field to query.
+            </description>
+        </param>
+        <param id="field">
+          <jfieldID class="klass"/>
+            <description>
+              The field to query.
+            </description>
+        </param>
+        <param id="name_ptr">
+          <allocbuf>
+            <char/>
+            <nullok>the name is not returned</nullok>
+          </allocbuf>
+          <description>
+            On return, points to the field name, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
+        <param id="signature_ptr">
+          <allocbuf>
+            <char/>
+            <nullok>the signature is not returned</nullok>
+          </allocbuf>
+          <description>
+            On return, points to the field signature, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
+        <param id="generic_ptr">
+          <allocbuf>
             <char/>
             <nullok>the generic signature is not returned</nullok>
           </allocbuf>
-	  <description>
-	    On return, points to the generic signature of the field, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
+          <description>
+            On return, points to the generic signature of the field, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
             If there is no generic signature attribute for the field, then,
             on return, points to <code>NULL</code>.
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetFieldDeclaringClass" phase="start" num="61">
       <synopsis>Get Field Declaring Class</synopsis>
       <description>
-	For the field indicated by <code>klass</code> and <code>field</code>
-	return the class that defined it via <code>declaring_class_ptr</code>.
-	The declaring class will either be <code>klass</code>, a superclass, or
-	an implemented interface.
+        For the field indicated by <code>klass</code> and <code>field</code>
+        return the class that defined it via <code>declaring_class_ptr</code>.
+        The declaring class will either be <code>klass</code>, a superclass, or
+        an implemented interface.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass field="field"/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="field">
-	  <jfieldID class="klass"/>
-	    <description>
-	      The field to query.
-	    </description>
-	</param>
-	<param id="declaring_class_ptr">
-	  <outptr><jclass/></outptr>
-	    <description>
-	      On return, points to the declaring class
-	    </description>
-	</param>
+        <param id="klass">
+          <jclass field="field"/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="field">
+          <jfieldID class="klass"/>
+            <description>
+              The field to query.
+            </description>
+        </param>
+        <param id="declaring_class_ptr">
+          <outptr><jclass/></outptr>
+            <description>
+              On return, points to the declaring class
+            </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetFieldModifiers" phase="start" num="62">
       <synopsis>Get Field Modifiers</synopsis>
       <description>
-	For the field indicated by <code>klass</code> and <code>field</code>
-	return the access flags via <code>modifiers_ptr</code>.
-	Access flags are defined in <vmspec chapter="4"/>.
+        For the field indicated by <code>klass</code> and <code>field</code>
+        return the access flags via <code>modifiers_ptr</code>.
+        Access flags are defined in <vmspec chapter="4"/>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass field="field"/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="field">
-	  <jfieldID class="klass"/>
-	    <description>
-	      The field to query.
-	    </description>
-	</param>
-	<param id="modifiers_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the access flags.
-	  </description>
-	</param>
+        <param id="klass">
+          <jclass field="field"/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="field">
+          <jfieldID class="klass"/>
+            <description>
+              The field to query.
+            </description>
+        </param>
+        <param id="modifiers_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the access flags.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="IsFieldSynthetic" phase="start" num="63">
       <synopsis>Is Field Synthetic</synopsis>
       <description>
-	For the field indicated by <code>klass</code> and <code>field</code>, return a
-	value indicating whether the field is synthetic via <code>is_synthetic_ptr</code>.
-	Synthetic fields are generated by the compiler but not present in the
-	original source code.
+        For the field indicated by <code>klass</code> and <code>field</code>, return a
+        value indicating whether the field is synthetic via <code>is_synthetic_ptr</code>.
+        Synthetic fields are generated by the compiler but not present in the
+        original source code.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
         <required id="can_get_synthetic_attribute"></required>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass field="field"/>
-	    <description>
-	      The class of the field to query.
-	    </description>
-	</param>
-	<param id="field">
-	  <jfieldID class="klass"/>
-	    <description>
-	      The field to query.
-	    </description>
-	</param>
-	<param id="is_synthetic_ptr">
-	  <outptr><jboolean/></outptr>
-	  <description>
-	    On return, points to the boolean result of this function.
-	  </description>
-	</param>
+        <param id="klass">
+          <jclass field="field"/>
+            <description>
+              The class of the field to query.
+            </description>
+        </param>
+        <param id="field">
+          <jfieldID class="klass"/>
+            <description>
+              The field to query.
+            </description>
+        </param>
+        <param id="is_synthetic_ptr">
+          <outptr><jboolean/></outptr>
+          <description>
+            On return, points to the boolean result of this function.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -8267,510 +8259,510 @@
     </intro>
 
     <function id="GetMethodName" phase="start" num="64">
       <synopsis>Get Method Name (and Signature)</synopsis>
       <description>
-	For the method indicated by <code>method</code>,
-	return the method name via <code>name_ptr</code> and method signature via
-	<code>signature_ptr</code>.
+        For the method indicated by <code>method</code>,
+        return the method name via <code>name_ptr</code> and method signature via
+        <code>signature_ptr</code>.
         <p/>
         Method signatures are defined in the
         <externallink id="jni/index.html">JNI Specification</externallink>
         and are referred to as <code>method descriptors</code> in
         <vmspec chapter="4.3.3"/>.
-	Note this is different
-	than method signatures as defined in the <i>Java Language Specification</i>.
+        Note this is different
+        than method signatures as defined in the <i>Java Language Specification</i>.
       </description>
       <origin>jvmdiClone</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="method">
-	  <jmethodID/>
-	    <description>
-	      The method to query.
-	    </description>
-	</param>
-	<param id="name_ptr">
-	  <allocbuf>
-	    <char/>
-	    <nullok>the name is not returned</nullok>
-	  </allocbuf>
-	  <description>
-	    On return, points to the method name, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
-	<param id="signature_ptr">
-	  <allocbuf>
-	    <char/>
-	    <nullok>the signature is not returned</nullok>
-	  </allocbuf>
-	  <description>
-	    On return, points to the method signature, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
-	<param id="generic_ptr">
-	  <allocbuf>
+        <param id="method">
+          <jmethodID/>
+            <description>
+              The method to query.
+            </description>
+        </param>
+        <param id="name_ptr">
+          <allocbuf>
+            <char/>
+            <nullok>the name is not returned</nullok>
+          </allocbuf>
+          <description>
+            On return, points to the method name, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
+        <param id="signature_ptr">
+          <allocbuf>
+            <char/>
+            <nullok>the signature is not returned</nullok>
+          </allocbuf>
+          <description>
+            On return, points to the method signature, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
+        <param id="generic_ptr">
+          <allocbuf>
             <char/>
             <nullok>the generic signature is not returned</nullok>
           </allocbuf>
-	  <description>
-	    On return, points to the generic signature of the method, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
+          <description>
+            On return, points to the generic signature of the method, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
             If there is no generic signature attribute for the method, then,
             on return, points to <code>NULL</code>.
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetMethodDeclaringClass" phase="start" num="65">
       <synopsis>Get Method Declaring Class</synopsis>
       <description>
-	For the method indicated by <code>method</code>,
-	return the class that defined it via <code>declaring_class_ptr</code>.
+        For the method indicated by <code>method</code>,
+        return the class that defined it via <code>declaring_class_ptr</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass method="method"/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="method">
-	  <jmethodID class="klass"/>
-	    <description>
-	      The method to query.
-	    </description>
-	</param>
-	<param id="declaring_class_ptr">
-	  <outptr><jclass/></outptr>
-	    <description>
-	      On return, points to the declaring class
-	    </description>
-	</param>
+        <param id="klass">
+          <jclass method="method"/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="method">
+          <jmethodID class="klass"/>
+            <description>
+              The method to query.
+            </description>
+        </param>
+        <param id="declaring_class_ptr">
+          <outptr><jclass/></outptr>
+            <description>
+              On return, points to the declaring class
+            </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetMethodModifiers" phase="start" num="66">
       <synopsis>Get Method Modifiers</synopsis>
       <description>
-	For the method indicated by <code>method</code>,
-	return the access flags via <code>modifiers_ptr</code>.
-	Access flags are defined in <vmspec chapter="4"/>.
+        For the method indicated by <code>method</code>,
+        return the access flags via <code>modifiers_ptr</code>.
+        Access flags are defined in <vmspec chapter="4"/>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass method="method"/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="method">
-	  <jmethodID class="klass"/>
-	    <description>
-	      The method to query.
-	    </description>
-	</param>
-	<param id="modifiers_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the access flags.
-	  </description>
-	</param>
+        <param id="klass">
+          <jclass method="method"/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="method">
+          <jmethodID class="klass"/>
+            <description>
+              The method to query.
+            </description>
+        </param>
+        <param id="modifiers_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the access flags.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetMaxLocals" phase="start" num="68">
       <synopsis>Get Max Locals</synopsis>
       <description>
-	  For the method indicated by <code>method</code>,
-	  return the number of local variable slots used by the method,
-	  including the local variables used to pass parameters to the
-	  method on its invocation.
-	  <p/>
-	  See <code>max_locals</code> in <vmspec chapter="4.7.3"/>.
+          For the method indicated by <code>method</code>,
+          return the number of local variable slots used by the method,
+          including the local variables used to pass parameters to the
+          method on its invocation.
+          <p/>
+          See <code>max_locals</code> in <vmspec chapter="4.7.3"/>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass method="method"/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="method">
-	  <jmethodID class="klass" native="error"/>
-	    <description>
-	      The method to query.
-	    </description>
-	</param>
-	<param id="max_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the maximum number of local slots
-	  </description>
-	</param>
+        <param id="klass">
+          <jclass method="method"/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="method">
+          <jmethodID class="klass" native="error"/>
+            <description>
+              The method to query.
+            </description>
+        </param>
+        <param id="max_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the maximum number of local slots
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetArgumentsSize" phase="start" num="69">
       <synopsis>Get Arguments Size</synopsis>
       <description>
-	For the method indicated by <code>method</code>,
-	return via <code>max_ptr</code> the number of local variable slots used
-	by the method's arguments.
-	Note that two-word arguments use two slots.
+        For the method indicated by <code>method</code>,
+        return via <code>max_ptr</code> the number of local variable slots used
+        by the method's arguments.
+        Note that two-word arguments use two slots.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass method="method"/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="method">
-	  <jmethodID class="klass" native="error"/>
-	    <description>
-	      The method to query.
-	    </description>
-	</param>
-	<param id="size_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of argument slots
-	  </description>
-	</param>
+        <param id="klass">
+          <jclass method="method"/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="method">
+          <jmethodID class="klass" native="error"/>
+            <description>
+              The method to query.
+            </description>
+        </param>
+        <param id="size_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of argument slots
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetLineNumberTable" phase="start" num="70">
       <synopsis>Get Line Number Table</synopsis>
       <typedef id="jvmtiLineNumberEntry" label="Line number table entry">
-	<field id="start_location">
-	  <jlocation/>
-	  <description>
-	    the <datalink id="jlocation"></datalink> where the line begins
-	  </description>
-	</field>
-	<field id="line_number">
-	  <jint/>
-	  <description>
-	    the line number
-	  </description>
-	</field>
+        <field id="start_location">
+          <jlocation/>
+          <description>
+            the <datalink id="jlocation"></datalink> where the line begins
+          </description>
+        </field>
+        <field id="line_number">
+          <jint/>
+          <description>
+            the line number
+          </description>
+        </field>
       </typedef>
       <description>
-	For the method indicated by <code>method</code>,
-	return a table of source line number entries. The size of the table is
-	returned via <code>entry_count_ptr</code> and the table itself is
-	returned via <code>table_ptr</code>.
+        For the method indicated by <code>method</code>,
+        return a table of source line number entries. The size of the table is
+        returned via <code>entry_count_ptr</code> and the table itself is
+        returned via <code>table_ptr</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_get_line_numbers"></required>
-      </capabilities>
-      <parameters>
-	<param id="klass">
-	  <jclass method="method"/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="method">
-	  <jmethodID class="klass" native="error"/>
-	    <description>
-	      The method to query.
-	    </description>
-	</param>
-	<param id="entry_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of entries in the table
-	  </description>
-	</param>
-	<param id="table_ptr">
-	  <allocbuf outcount="entry_count_ptr"><struct>jvmtiLineNumberEntry</struct></allocbuf>
-	  <description>
-	    On return, points to the line number table pointer.
-	  </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_ABSENT_INFORMATION">
-	  Class information does not include line numbers.
-	</error>
+        <required id="can_get_line_numbers"></required>
+      </capabilities>
+      <parameters>
+        <param id="klass">
+          <jclass method="method"/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="method">
+          <jmethodID class="klass" native="error"/>
+            <description>
+              The method to query.
+            </description>
+        </param>
+        <param id="entry_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of entries in the table
+          </description>
+        </param>
+        <param id="table_ptr">
+          <allocbuf outcount="entry_count_ptr"><struct>jvmtiLineNumberEntry</struct></allocbuf>
+          <description>
+            On return, points to the line number table pointer.
+          </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_ABSENT_INFORMATION">
+          Class information does not include line numbers.
+        </error>
       </errors>
     </function>
 
     <function id="GetMethodLocation" phase="start" num="71">
       <synopsis>Get Method Location</synopsis>
       <description>
-	For the method indicated by <code>method</code>,
-	return the beginning and ending addresses through
-	<code>start_location_ptr</code> and <code>end_location_ptr</code>. In a
-	conventional bytecode indexing scheme,
-	<code>start_location_ptr</code> will always point to zero
-	and <code>end_location_ptr</code>
-	will always point to the bytecode count minus one.
+        For the method indicated by <code>method</code>,
+        return the beginning and ending addresses through
+        <code>start_location_ptr</code> and <code>end_location_ptr</code>. In a
+        conventional bytecode indexing scheme,
+        <code>start_location_ptr</code> will always point to zero
+        and <code>end_location_ptr</code>
+        will always point to the bytecode count minus one.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass method="method"/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="method">
-	  <jmethodID class="klass" native="error"/>
-	    <description>
-	      The method to query.
-	    </description>
-	</param>
-	<param id="start_location_ptr">
-	  <outptr><jlocation/></outptr>
-	  <description>
-	    On return, points to the first location, or
-	    <code>-1</code> if location information is not available.
-	    If the information is available and
-	    <functionlink id="GetJLocationFormat"></functionlink>
-	    returns <datalink id="JVMTI_JLOCATION_JVMBCI"></datalink>
-	    then this will always be zero.
-	  </description>
-	</param>
-	<param id="end_location_ptr">
-	  <outptr><jlocation/></outptr>
-	  <description>
-	    On return, points to the last location,
-	    or <code>-1</code> if location information is not available.
-	  </description>
-	</param>
-      </parameters>
-      <errors>
-	<error id="JVMTI_ERROR_ABSENT_INFORMATION">
-	  Class information does not include method sizes.
-	</error>
+        <param id="klass">
+          <jclass method="method"/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="method">
+          <jmethodID class="klass" native="error"/>
+            <description>
+              The method to query.
+            </description>
+        </param>
+        <param id="start_location_ptr">
+          <outptr><jlocation/></outptr>
+          <description>
+            On return, points to the first location, or
+            <code>-1</code> if location information is not available.
+            If the information is available and
+            <functionlink id="GetJLocationFormat"></functionlink>
+            returns <datalink id="JVMTI_JLOCATION_JVMBCI"></datalink>
+            then this will always be zero.
+          </description>
+        </param>
+        <param id="end_location_ptr">
+          <outptr><jlocation/></outptr>
+          <description>
+            On return, points to the last location,
+            or <code>-1</code> if location information is not available.
+          </description>
+        </param>
+      </parameters>
+      <errors>
+        <error id="JVMTI_ERROR_ABSENT_INFORMATION">
+          Class information does not include method sizes.
+        </error>
       </errors>
     </function>
 
     <function id="GetLocalVariableTable" num="72">
       <synopsis>Get Local Variable Table</synopsis>
       <typedef id="jvmtiLocalVariableEntry" label="Local variable table entry">
-	<field id="start_location">
-	  <jlocation/>
-	  <description>
-	    The code array index where the local variable is first valid
+        <field id="start_location">
+          <jlocation/>
+          <description>
+            The code array index where the local variable is first valid
             (that is, where it must have a value).
-	  </description>
-	</field>
-	<field id="length">
-	  <jint/>
-	  <description>
+          </description>
+        </field>
+        <field id="length">
+          <jint/>
+          <description>
             The length of the valid section for this local variable.
-	    The last code array index where the local variable is valid
+            The last code array index where the local variable is valid
             is <code>start_location + length</code>.
-	  </description>
-	</field>
-	<field id="name">
-	  <allocfieldbuf><char/></allocfieldbuf>
-	  <description>
-	    The local variable name, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</field>
-	<field id="signature">
-	  <allocfieldbuf><char/></allocfieldbuf>
-	  <description>
-	    The local variable's type signature, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	    The signature format is the same as that defined in
-	    <vmspec chapter="4.3.2"/>.
-	  </description>
-	</field>
-	<field id="generic_signature">
-	  <allocfieldbuf><char/></allocfieldbuf>
-	  <description>
-	    The local variable's generic signature, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </field>
+        <field id="name">
+          <allocfieldbuf><char/></allocfieldbuf>
+          <description>
+            The local variable name, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </field>
+        <field id="signature">
+          <allocfieldbuf><char/></allocfieldbuf>
+          <description>
+            The local variable's type signature, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+            The signature format is the same as that defined in
+            <vmspec chapter="4.3.2"/>.
+          </description>
+        </field>
+        <field id="generic_signature">
+          <allocfieldbuf><char/></allocfieldbuf>
+          <description>
+            The local variable's generic signature, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
             The value of this field will be <code>NULL</code> for any local
             variable which does not have a generic type.
-	  </description>
-	</field>
-	<field id="slot">
-	  <jint/>
-	  <description>
-	    The local variable's slot.  See <internallink id="local">Local Variables</internallink>.
-	  </description>
-	</field>
+          </description>
+        </field>
+        <field id="slot">
+          <jint/>
+          <description>
+            The local variable's slot.  See <internallink id="local">Local Variables</internallink>.
+          </description>
+        </field>
       </typedef>
       <description>
-	Return local variable information.
+        Return local variable information.
       </description>
       <origin>jvmdiClone</origin>
       <capabilities>
-	<required id="can_access_local_variables"></required>
+        <required id="can_access_local_variables"></required>
       </capabilities>
       <parameters>
-	<param id="method">
-	  <jmethodID native="error"/>
-	    <description>
-	      The method to query.
-	    </description>
-	</param>
-	<param id="entry_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of entries in the table
-	  </description>
-	</param>
-	<param id="table_ptr">
-	  <allocbuf outcount="entry_count_ptr"><struct>jvmtiLocalVariableEntry</struct></allocbuf>
-	  <description>
-	    On return, points to an array of local variable table entries.
-	  </description>
-	</param>
+        <param id="method">
+          <jmethodID native="error"/>
+            <description>
+              The method to query.
+            </description>
+        </param>
+        <param id="entry_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of entries in the table
+          </description>
+        </param>
+        <param id="table_ptr">
+          <allocbuf outcount="entry_count_ptr"><struct>jvmtiLocalVariableEntry</struct></allocbuf>
+          <description>
+            On return, points to an array of local variable table entries.
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_ABSENT_INFORMATION">
-	  Class information does not include local variable
-	  information.
-	</error>
+        <error id="JVMTI_ERROR_ABSENT_INFORMATION">
+          Class information does not include local variable
+          information.
+        </error>
       </errors>
     </function>
 
     <function id="GetBytecodes" phase="start" num="75">
       <synopsis>Get Bytecodes</synopsis>
       <description>
-	For the method indicated by <code>method</code>,
-	return the bytecodes that implement the method. The number of
-	bytecodes is returned via <code>bytecode_count_ptr</code>. The bytecodes
-	themselves are returned via <code>bytecodes_ptr</code>.
+        For the method indicated by <code>method</code>,
+        return the bytecodes that implement the method. The number of
+        bytecodes is returned via <code>bytecode_count_ptr</code>. The bytecodes
+        themselves are returned via <code>bytecodes_ptr</code>.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
-	<required id="can_get_bytecodes"></required>
+        <required id="can_get_bytecodes"></required>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass method="method"/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="method">
-	  <jmethodID class="klass" native="error"/>
-	    <description>
-	      The method to query.
-	    </description>
-	</param>
-	<param id="bytecode_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the length of the bytecode array
-	  </description>
-	</param>
-	<param id="bytecodes_ptr">
-	  <allocbuf outcount="bytecode_count_ptr"><uchar/></allocbuf>
-	  <description>
-	    On return, points to the pointer to the bytecode array
-	  </description>
-	</param>
+        <param id="klass">
+          <jclass method="method"/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="method">
+          <jmethodID class="klass" native="error"/>
+            <description>
+              The method to query.
+            </description>
+        </param>
+        <param id="bytecode_count_ptr">
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the length of the bytecode array
+          </description>
+        </param>
+        <param id="bytecodes_ptr">
+          <allocbuf outcount="bytecode_count_ptr"><uchar/></allocbuf>
+          <description>
+            On return, points to the pointer to the bytecode array
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="IsMethodNative" phase="start" num="76">
       <synopsis>Is Method Native</synopsis>
       <description>
-	For the method indicated by <code>method</code>, return a
-	value indicating whether the method is native via <code>is_native_ptr</code>
+        For the method indicated by <code>method</code>, return a
+        value indicating whether the method is native via <code>is_native_ptr</code>
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass method="method"/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="method">
-	  <jmethodID class="klass"/>
-	    <description>
-	      The method to query.
-	    </description>
-	</param>
-	<param id="is_native_ptr">
-	  <outptr><jboolean/></outptr>
-	  <description>
-	    On return, points to the boolean result of this function.
-	  </description>
-	</param>
+        <param id="klass">
+          <jclass method="method"/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="method">
+          <jmethodID class="klass"/>
+            <description>
+              The method to query.
+            </description>
+        </param>
+        <param id="is_native_ptr">
+          <outptr><jboolean/></outptr>
+          <description>
+            On return, points to the boolean result of this function.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="IsMethodSynthetic" phase="start" num="77">
       <synopsis>Is Method Synthetic</synopsis>
       <description>
-	For the method indicated by <code>method</code>, return a
-	value indicating whether the method is synthetic via <code>is_synthetic_ptr</code>.
-	Synthetic methods are generated by the compiler but not present in the
-	original source code.
+        For the method indicated by <code>method</code>, return a
+        value indicating whether the method is synthetic via <code>is_synthetic_ptr</code>.
+        Synthetic methods are generated by the compiler but not present in the
+        original source code.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
         <required id="can_get_synthetic_attribute"></required>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass method="method"/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="method">
-	  <jmethodID class="klass"/>
-	    <description>
-	      The method to query.
-	    </description>
-	</param>
-	<param id="is_synthetic_ptr">
-	  <outptr><jboolean/></outptr>
-	  <description>
-	    On return, points to the boolean result of this function.
-	  </description>
-	</param>
+        <param id="klass">
+          <jclass method="method"/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="method">
+          <jmethodID class="klass"/>
+            <description>
+              The method to query.
+            </description>
+        </param>
+        <param id="is_synthetic_ptr">
+          <outptr><jboolean/></outptr>
+          <description>
+            On return, points to the boolean result of this function.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -8783,37 +8775,37 @@
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="klass">
-	  <jclass method="method"/>
-	    <description>
-	      The class to query.
-	    </description>
-	</param>
-	<param id="method">
-	  <jmethodID class="klass"/>
-	    <description>
-	      The method ID to query.
-	    </description>
-	</param>
-	<param id="is_obsolete_ptr">
-	  <outptr><jboolean/></outptr>
-	  <description>
-	    On return, points to the boolean result of this function.
-	  </description>
-	</param>
+        <param id="klass">
+          <jclass method="method"/>
+            <description>
+              The class to query.
+            </description>
+        </param>
+        <param id="method">
+          <jmethodID class="klass"/>
+            <description>
+              The method ID to query.
+            </description>
+        </param>
+        <param id="is_obsolete_ptr">
+          <outptr><jboolean/></outptr>
+          <description>
+            On return, points to the boolean result of this function.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="SetNativeMethodPrefix" jkernel="yes" phase="any" num="73" since="1.1">
       <synopsis>Set Native Method Prefix</synopsis>
       <description>
-	This function modifies the failure handling of
+        This function modifies the failure handling of
         native method resolution by allowing retry
         with a prefix applied to the name.
         When used with the
         <eventlink id="ClassFileLoadHook">ClassFileLoadHook
         event</eventlink>, it enables native methods to be
@@ -8909,34 +8901,34 @@
         native method prefix must remain set as long as there
         are corresponding prefixed native methods.
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_set_native_method_prefix"></required>
+        <required id="can_set_native_method_prefix"></required>
       </capabilities>
       <parameters>
-	<param id="prefix">
-	  <inbuf>
-	    <char/>
-	    <nullok>
-	      any existing prefix in this environment is cancelled
-	    </nullok>
-	  </inbuf>
-	  <description>
-	    The prefix to apply, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
+        <param id="prefix">
+          <inbuf>
+            <char/>
+            <nullok>
+              any existing prefix in this environment is cancelled
+            </nullok>
+          </inbuf>
+          <description>
+            The prefix to apply, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="SetNativeMethodPrefixes" jkernel="yes" phase="any" num="74" since="1.1">
       <synopsis>Set Native Method Prefixes</synopsis>
       <description>
-	 For a normal agent, <functionlink id="SetNativeMethodPrefix"/>
+         For a normal agent, <functionlink id="SetNativeMethodPrefix"/>
          will provide all needed native method prefixing.
          For a meta-agent that performs multiple independent class
          file transformations (for example as a proxy for another
          layer of agents) this function allows each transformation
          to have its own prefix.
@@ -8958,28 +8950,28 @@
          <code>NULL</code> is the same as calling this function with
          <paramlink id="prefix_count"/> of <code>0</code>.
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_set_native_method_prefix"></required>
+        <required id="can_set_native_method_prefix"></required>
       </capabilities>
       <parameters>
-	<param id="prefix_count">
-	  <jint min="0"/>
-	    <description>
-	      The number of prefixes to apply.
-	    </description>
-	</param>
-	<param id="prefixes">
-	  <agentbuf>
+        <param id="prefix_count">
+          <jint min="0"/>
+            <description>
+              The number of prefixes to apply.
+            </description>
+        </param>
+        <param id="prefixes">
+          <agentbuf>
             <char/>
           </agentbuf>
-	  <description>
-	    The prefixes to apply for this environment, each encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
+          <description>
+            The prefixes to apply for this environment, each encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -8988,108 +8980,108 @@
   <category id="RawMonitors" label="Raw Monitor">
 
     <function id="CreateRawMonitor" phase="onload" callbacksafe="safe" num="31">
       <synopsis>Create Raw Monitor</synopsis>
       <description>
-	Create a raw monitor.
+        Create a raw monitor.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="name">
-	  <inbuf><char/></inbuf>
-	  <description>
-	    A name to identify the monitor, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
-	<param id="monitor_ptr">
-	  <outptr><jrawMonitorID/></outptr>
-	  <description>
-	    On return, points to the created monitor.
-	  </description>
-	</param>
+        <param id="name">
+          <inbuf><char/></inbuf>
+          <description>
+            A name to identify the monitor, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
+        <param id="monitor_ptr">
+          <outptr><jrawMonitorID/></outptr>
+          <description>
+            On return, points to the created monitor.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="DestroyRawMonitor" phase="onload" callbacksafe="safe" num="32">
       <synopsis>Destroy Raw Monitor</synopsis>
       <description>
-	Destroy the raw monitor.
+        Destroy the raw monitor.
         If the monitor being destroyed has been entered by this thread, it will be
         exited before it is destroyed.
         If the monitor being destroyed has been entered by another thread,
         an error will be returned and the monitor will not be destroyed.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="monitor">
-	  <jrawMonitorID/>
-	  <description>
-	    The monitor
-	  </description>
-	</param>
+        <param id="monitor">
+          <jrawMonitorID/>
+          <description>
+            The monitor
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_NOT_MONITOR_OWNER">
-	  Not monitor owner
-	</error>
+        <error id="JVMTI_ERROR_NOT_MONITOR_OWNER">
+          Not monitor owner
+        </error>
       </errors>
     </function>
 
     <function id="RawMonitorEnter" phase="any" callbacksafe="safe" impl="innative notrace" num="33">
       <synopsis>Raw Monitor Enter</synopsis>
       <description>
-	Gain exclusive ownership of a raw monitor.
+        Gain exclusive ownership of a raw monitor.
         The same thread may enter a monitor more then once.
         The thread must
         <functionlink id="RawMonitorExit">exit</functionlink>
         the monitor the same number of times as it is entered.
         If a monitor is entered during <code>OnLoad</code> (before attached threads exist)
-	and has not exited when attached threads come into existence, the enter
-	is considered to have occurred on the main thread.
+        and has not exited when attached threads come into existence, the enter
+        is considered to have occurred on the main thread.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="monitor">
-	  <jrawMonitorID/>
-	  <description>
-	    The monitor
-	  </description>
-	</param>
+        <param id="monitor">
+          <jrawMonitorID/>
+          <description>
+            The monitor
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="RawMonitorExit" phase="any" callbacksafe="safe" impl="innative notrace" num="34">
       <synopsis>Raw Monitor Exit</synopsis>
       <description>
-	Release exclusive ownership of a raw monitor.
+        Release exclusive ownership of a raw monitor.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="monitor">
-	  <jrawMonitorID/>
-	  <description>
-	    The monitor
-	  </description>
-	</param>
+        <param id="monitor">
+          <jrawMonitorID/>
+          <description>
+            The monitor
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_NOT_MONITOR_OWNER">
-	  Not monitor owner
-	</error>
+        <error id="JVMTI_ERROR_NOT_MONITOR_OWNER">
+          Not monitor owner
+        </error>
       </errors>
     </function>
 
     <function id="RawMonitorWait" phase="any" callbacksafe="safe" impl="innative notrace" num="35">
       <synopsis>Raw Monitor Wait</synopsis>
@@ -9105,78 +9097,78 @@
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="monitor">
-	  <jrawMonitorID/>
-	  <description>
-	    The monitor
-	  </description>
-	</param>
-	<param id="millis">
-	  <jlong/>
-	  <description>
-	    The timeout, in milliseconds.  If the timeout is
-	    zero, then real time is not taken into consideration
-	    and the thread simply waits until notified.
-	  </description>
-	</param>
+        <param id="monitor">
+          <jrawMonitorID/>
+          <description>
+            The monitor
+          </description>
+        </param>
+        <param id="millis">
+          <jlong/>
+          <description>
+            The timeout, in milliseconds.  If the timeout is
+            zero, then real time is not taken into consideration
+            and the thread simply waits until notified.
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_NOT_MONITOR_OWNER">
-	  Not monitor owner
-	</error>
-	<error id="JVMTI_ERROR_INTERRUPT">
-	  Wait was interrupted, try again
-	</error>
+        <error id="JVMTI_ERROR_NOT_MONITOR_OWNER">
+          Not monitor owner
+        </error>
+        <error id="JVMTI_ERROR_INTERRUPT">
+          Wait was interrupted, try again
+        </error>
       </errors>
     </function>
 
     <function id="RawMonitorNotify" phase="any" callbacksafe="safe" impl="notrace" num="36">
       <synopsis>Raw Monitor Notify</synopsis>
       <description>
-	Notify a single thread waiting on the raw monitor.
+        Notify a single thread waiting on the raw monitor.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="monitor">
-	  <jrawMonitorID/>
-	  <description>
-	    The monitor
-	  </description>
-	</param>
+        <param id="monitor">
+          <jrawMonitorID/>
+          <description>
+            The monitor
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_NOT_MONITOR_OWNER">
-	  Not monitor owner
-	</error>
+        <error id="JVMTI_ERROR_NOT_MONITOR_OWNER">
+          Not monitor owner
+        </error>
       </errors>
     </function>
 
     <function id="RawMonitorNotifyAll" phase="any" callbacksafe="safe" impl="notrace" num="37">
       <synopsis>Raw Monitor Notify All</synopsis>
       <description>
-	Notify all threads waiting on the raw monitor.
+        Notify all threads waiting on the raw monitor.
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="monitor">
-	  <jrawMonitorID/>
-	  <description>
-	    The monitor
-	  </description>
-	</param>
+        <param id="monitor">
+          <jrawMonitorID/>
+          <description>
+            The monitor
+          </description>
+        </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_NOT_MONITOR_OWNER">
-	  Not monitor owner
-	</error>
+        <error id="JVMTI_ERROR_NOT_MONITOR_OWNER">
+          Not monitor owner
+        </error>
       </errors>
     </function>
 
    <elide>
     <function id="GetRawMonitorUse" num="118">
@@ -9189,22 +9181,22 @@
       <capabilities>
         <required id="can_get_raw_monitor_usage"></required>
       </capabilities>
       <parameters>
         <param id="monitor">
-	  <jrawMonitorID/>
-	  <description>
-	    the raw monitor to query.
-	  </description>
-	</param>
+          <jrawMonitorID/>
+          <description>
+            the raw monitor to query.
+          </description>
+        </param>
         <param id="info_ptr">
-	  <outptr><struct>jvmtiMonitorUsage</struct></outptr>
-	  <description>
-	    On return, filled with monitor information for the
-	    specified raw monitor.
-	  </description>
-	</param>
+          <outptr><struct>jvmtiMonitorUsage</struct></outptr>
+          <description>
+            On return, filled with monitor information for the
+            specified raw monitor.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -9220,22 +9212,22 @@
       <capabilities>
         <required id="can_get_raw_monitor_usage"></required>
       </capabilities>
       <parameters>
         <param id="monitorCnt">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, pointer to the number
-	    of monitors returned in <code>monitors_ptr</code>.
-	  </description>
-	</param>
+          <outptr><jint/></outptr>
+          <description>
+            On return, pointer to the number
+            of monitors returned in <code>monitors_ptr</code>.
+          </description>
+        </param>
         <param id="monitors_ptr">
-	  <allocbuf outcount="monitorCnt"><jrawMonitorID/></allocbuf>
-	  <description>
-	    On return, pointer to the monitor list.
-	  </description>
-	</param>
+          <allocbuf outcount="monitorCnt"><jrawMonitorID/></allocbuf>
+          <description>
+            On return, pointer to the monitor list.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
     </elide>
@@ -9246,11 +9238,11 @@
     <intro>
       Provides the ability to intercept and resend
       Java Native Interface (JNI) function calls
       by manipulating the JNI function table.
       See <externallink id="jni/functions.html">JNI
-	Functions</externallink> in the <i>Java Native Interface Specification</i>.
+        Functions</externallink> in the <i>Java Native Interface Specification</i>.
       <p/>
       The following example illustrates intercepting the
       <code>NewGlobalRef</code> JNI call in order to count reference
       creation.
       <example>
@@ -9290,11 +9282,11 @@
       copy of the original function table is kept so that the normal
       JNI function can be called after the data is collected.
       Note also that any JNI functions which are not overwritten
       will behave normally.
       <todo>
-	check that the example compiles and executes.
+        check that the example compiles and executes.
       </todo>
     </intro>
 
     <function id="SetJNIFunctionTable" phase="start" num="120">
       <synopsis>Set JNI Function Table</synopsis>
@@ -9318,17 +9310,17 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="function_table">
-	  <inptr>
-	    <struct>jniNativeInterface</struct>
-	  </inptr>
-	  <description>
-	    Points to the new JNI function table.
-	  </description>
-	</param>
+          <inptr>
+            <struct>jniNativeInterface</struct>
+          </inptr>
+          <description>
+            Points to the new JNI function table.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -9347,18 +9339,18 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="function_table">
-	  <allocbuf>
-	    <struct>jniNativeInterface</struct>
-	  </allocbuf>
+          <allocbuf>
+            <struct>jniNativeInterface</struct>
+          </allocbuf>
           <description>
-	    On return, <code>*function_table</code>
-	    points a newly allocated copy of the JNI function table.
-	  </description>
-	</param>
+            On return, <code>*function_table</code>
+            points a newly allocated copy of the JNI function table.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -9387,99 +9379,99 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="callbacks">
-	  <inptr>
-	    <struct>jvmtiEventCallbacks</struct>
-	    <nullok>remove the existing callbacks</nullok>
-	  </inptr>
-	  <description>
-	    The new event callbacks.
-	  </description>
-	</param>
+          <inptr>
+            <struct>jvmtiEventCallbacks</struct>
+            <nullok>remove the existing callbacks</nullok>
+          </inptr>
+          <description>
+            The new event callbacks.
+          </description>
+        </param>
         <param id="size_of_callbacks">
-	  <jint min="0"/>
-	  <description>
-	    <code>sizeof(jvmtiEventCallbacks)</code>--for version
-	    compatibility.
-	  </description>
-	</param>
+          <jint min="0"/>
+          <description>
+            <code>sizeof(jvmtiEventCallbacks)</code>--for version
+            compatibility.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="SetEventNotificationMode" jkernel="yes" phase="onload" num="2">
       <synopsis>Set Event Notification Mode</synopsis>
       <description>
-	Control the generation of events.
-	<constants id="jvmtiEventMode" label="Event Enable/Disable" kind="enum">
-	  <constant id="JVMTI_ENABLE" num="1">
-	    If <paramlink id="mode"></paramlink> is <code>JVMTI_ENABLE</code>,
-	    the event <paramlink id="event_type"></paramlink> will be enabled
-	  </constant>
-	  <constant id="JVMTI_DISABLE" num="0">
-	    If <paramlink id="mode"></paramlink> is <code>JVMTI_DISABLE</code>,
-	    the event <paramlink id="event_type"></paramlink> will be disabled
-	  </constant>
-	</constants>
-	If <code>event_thread</code> is <code>NULL</code>,
-	the event is enabled or disabled globally; otherwise, it is
-	enabled or disabled for a particular thread.
-	An event is generated for
-	a particular thread if it is enabled either at the thread or global
-	levels.
-	<p/>
-	See <internallink id="EventIndex">below</internallink> for information on specific events.
-	<p/>
-	The following events cannot be controlled at the thread
-	level through this function.
-	<ul>
-	  <li><eventlink id="VMInit"></eventlink></li>
-	  <li><eventlink id="VMStart"></eventlink></li>
-	  <li><eventlink id="VMDeath"></eventlink></li>
-	  <li><eventlink id="ThreadStart"></eventlink></li>
-	  <li><eventlink id="CompiledMethodLoad"></eventlink></li>
-	  <li><eventlink id="CompiledMethodUnload"></eventlink></li>
-	  <li><eventlink id="DynamicCodeGenerated"></eventlink></li>
-	  <li><eventlink id="DataDumpRequest"></eventlink></li>
-	</ul>
-	<p/>
-	Initially, no events are enabled at either the thread level
-	or the global level.
-	<p/>
+        Control the generation of events.
+        <constants id="jvmtiEventMode" label="Event Enable/Disable" kind="enum">
+          <constant id="JVMTI_ENABLE" num="1">
+            If <paramlink id="mode"></paramlink> is <code>JVMTI_ENABLE</code>,
+            the event <paramlink id="event_type"></paramlink> will be enabled
+          </constant>
+          <constant id="JVMTI_DISABLE" num="0">
+            If <paramlink id="mode"></paramlink> is <code>JVMTI_DISABLE</code>,
+            the event <paramlink id="event_type"></paramlink> will be disabled
+          </constant>
+        </constants>
+        If <code>event_thread</code> is <code>NULL</code>,
+        the event is enabled or disabled globally; otherwise, it is
+        enabled or disabled for a particular thread.
+        An event is generated for
+        a particular thread if it is enabled either at the thread or global
+        levels.
+        <p/>
+        See <internallink id="EventIndex">below</internallink> for information on specific events.
+        <p/>
+        The following events cannot be controlled at the thread
+        level through this function.
+        <ul>
+          <li><eventlink id="VMInit"></eventlink></li>
+          <li><eventlink id="VMStart"></eventlink></li>
+          <li><eventlink id="VMDeath"></eventlink></li>
+          <li><eventlink id="ThreadStart"></eventlink></li>
+          <li><eventlink id="CompiledMethodLoad"></eventlink></li>
+          <li><eventlink id="CompiledMethodUnload"></eventlink></li>
+          <li><eventlink id="DynamicCodeGenerated"></eventlink></li>
+          <li><eventlink id="DataDumpRequest"></eventlink></li>
+        </ul>
+        <p/>
+        Initially, no events are enabled at either the thread level
+        or the global level.
+        <p/>
         Any needed capabilities (see Event Enabling Capabilities below) must be possessed
         before calling this function.
         <p/>
-	Details on events are
-	described <internallink id="EventSection">below</internallink>.
+        Details on events are
+        described <internallink id="EventSection">below</internallink>.
       </description>
       <origin>jvmdiClone</origin>
       <eventcapabilities></eventcapabilities>
       <parameters>
-	<param id="mode">
-	  <enum>jvmtiEventMode</enum>
-	  <description>
-	    <code>JVMTI_ENABLE</code> or <code>JVMTI_DISABLE</code>
-	  </description>
-	</param>
-	<param id="event_type">
-	  <enum>jvmtiEvent</enum>
-	  <description>
-	    the event to control
-	  </description>
-	</param>
-	<param id="event_thread">
-	  <ptrtype>
-	    <jthread impl="noconvert"/>
-	    <nullok>event is controlled at the global level</nullok>
-	  </ptrtype>
-	    <description>
-	      The thread to control
-	    </description>
-	</param>
+        <param id="mode">
+          <enum>jvmtiEventMode</enum>
+          <description>
+            <code>JVMTI_ENABLE</code> or <code>JVMTI_DISABLE</code>
+          </description>
+        </param>
+        <param id="event_type">
+          <enum>jvmtiEvent</enum>
+          <description>
+            the event to control
+          </description>
+        </param>
+        <param id="event_thread">
+          <ptrtype>
+            <jthread impl="noconvert"/>
+            <nullok>event is controlled at the global level</nullok>
+          </ptrtype>
+            <description>
+              The thread to control
+            </description>
+        </param>
         <param id="...">
           <varargs/>
             <description>
               for future expansion
             </description>
@@ -9490,14 +9482,14 @@
           <paramlink id="event_thread"/> is non-<code>NULL</code> and is not a valid thread.
         </error>
         <error id="JVMTI_ERROR_THREAD_NOT_ALIVE">
           <paramlink id="event_thread"/> is non-<code>NULL</code> and is not live (has not been started or is now dead).
         </error>
-	<error id="JVMTI_ERROR_ILLEGAL_ARGUMENT">
-	  thread level control was attempted on events which do not
+        <error id="JVMTI_ERROR_ILLEGAL_ARGUMENT">
+          thread level control was attempted on events which do not
           permit thread level control.
-	</error>
+        </error>
         <error id="JVMTI_ERROR_MUST_POSSESS_CAPABILITY">
           The Required Event Enabling Capability is not possessed.
         </error>
       </errors>
     </function>
@@ -9514,391 +9506,391 @@
         The history of what events have previously been sent does not
         effect what events are sent by this function--for example,
         all currently compiled methods
         will be sent each time this function is called.
         <p/>
-	This function is useful when
+        This function is useful when
         events may have been missed due to the agent attaching after program
-	execution begins; this function generates the missed events.
-	<p/>
-	Attempts to execute Java programming language code or
-	JNI functions may be paused until this function returns -
-	so neither should be called from the thread sending the event.
-	This function returns only after the missed events have been
+        execution begins; this function generates the missed events.
+        <p/>
+        Attempts to execute Java programming language code or
+        JNI functions may be paused until this function returns -
+        so neither should be called from the thread sending the event.
+        This function returns only after the missed events have been
         sent, processed and have returned.
-	The event may be sent on a different thread than the thread
-	on which the event occurred.
-	The callback for the event must be set with
+        The event may be sent on a different thread than the thread
+        on which the event occurred.
+        The callback for the event must be set with
         <functionlink id="SetEventCallbacks"></functionlink>
-	and the event must be enabled with
+        and the event must be enabled with
         <functionlink id="SetEventNotificationMode"></functionlink>
-	or the events will not occur.
-	If the VM no longer has the information to generate some or
+        or the events will not occur.
+        If the VM no longer has the information to generate some or
         all of the requested events, the events are simply not sent -
         no error is returned.
-	<p/>
-	Only the following events are supported:
-	<ul>
-	  <li><eventlink id="CompiledMethodLoad"></eventlink></li>
-	  <li><eventlink id="DynamicCodeGenerated"></eventlink></li>
-	</ul>
+        <p/>
+        Only the following events are supported:
+        <ul>
+          <li><eventlink id="CompiledMethodLoad"></eventlink></li>
+          <li><eventlink id="DynamicCodeGenerated"></eventlink></li>
+        </ul>
       </description>
       <origin>new</origin>
       <capabilities>
-	<capability id="can_generate_compiled_method_load_events"></capability>
+        <capability id="can_generate_compiled_method_load_events"></capability>
       </capabilities>
       <parameters>
-	<param id="event_type">
-	  <enum>jvmtiEvent</enum>
-	  <description>
-	    The type of event to generate.  Must be one of these:
-	    <ul>
-	      <li><eventlink id="CompiledMethodLoad"><code>JVMTI_EVENT_COMPILED_METHOD_LOAD</code></eventlink></li>
-	      <li><eventlink id="DynamicCodeGenerated"><code>JVMTI_EVENT_DYNAMIC_CODE_GENERATED</code></eventlink></li>
-	    </ul>
-	  </description>
-	</param>
+        <param id="event_type">
+          <enum>jvmtiEvent</enum>
+          <description>
+            The type of event to generate.  Must be one of these:
+            <ul>
+              <li><eventlink id="CompiledMethodLoad"><code>JVMTI_EVENT_COMPILED_METHOD_LOAD</code></eventlink></li>
+              <li><eventlink id="DynamicCodeGenerated"><code>JVMTI_EVENT_DYNAMIC_CODE_GENERATED</code></eventlink></li>
+            </ul>
+          </description>
+        </param>
       </parameters>
       <errors>
         <error id="JVMTI_ERROR_MUST_POSSESS_CAPABILITY">
           <paramlink id="event_type"/> is
-	  <eventlink id="CompiledMethodLoad"><code>JVMTI_EVENT_COMPILED_METHOD_LOAD</code></eventlink>
-	  and <fieldlink id="can_generate_compiled_method_load_events" struct="jvmtiCapabilities"></fieldlink>
-	  is <code>false</code>.
+          <eventlink id="CompiledMethodLoad"><code>JVMTI_EVENT_COMPILED_METHOD_LOAD</code></eventlink>
+          and <fieldlink id="can_generate_compiled_method_load_events" struct="jvmtiCapabilities"></fieldlink>
+          is <code>false</code>.
         </error>
         <error id="JVMTI_ERROR_ILLEGAL_ARGUMENT">
           <paramlink id="event_type"/> is other than
-	  <eventlink id="CompiledMethodLoad"><code>JVMTI_EVENT_COMPILED_METHOD_LOAD</code></eventlink>
-	  or <eventlink id="DynamicCodeGenerated"><code>JVMTI_EVENT_DYNAMIC_CODE_GENERATED</code></eventlink>.
+          <eventlink id="CompiledMethodLoad"><code>JVMTI_EVENT_COMPILED_METHOD_LOAD</code></eventlink>
+          or <eventlink id="DynamicCodeGenerated"><code>JVMTI_EVENT_DYNAMIC_CODE_GENERATED</code></eventlink>.
         </error>
       </errors>
     </function>
 
   </category>
 
     <category id="extension" label="Extension Mechanism">
 
       <intro>
-	These functions
-	allow a <jvmti/> implementation to provide functions and events
-	beyond those defined in this specification.
-	<p/>
-	Both extension functions and extension events have parameters
-	each of which has a 'type' and 'kind' chosen from the following tables:
-
-	<constants id="jvmtiParamTypes" label="Extension Function/Event Parameter Types" kind="enum">
-	  <constant id="JVMTI_TYPE_JBYTE" num="101">
-	    Java programming language primitive type - <code>byte</code>.
-	    JNI type <code>jbyte</code>.
-	  </constant>
-	  <constant id="JVMTI_TYPE_JCHAR" num="102">
-	    Java programming language primitive type - <code>char</code>.
-	    JNI type <code>jchar</code>.
-	  </constant>
-	  <constant id="JVMTI_TYPE_JSHORT" num="103">
-	    Java programming language primitive type - <code>short</code>.
-	    JNI type <code>jshort</code>.
-	  </constant>
-	  <constant id="JVMTI_TYPE_JINT" num="104">
-	    Java programming language primitive type - <code>int</code>.
-	    JNI type <datalink id="jint"></datalink>.
-	  </constant>
-	  <constant id="JVMTI_TYPE_JLONG" num="105">
-	    Java programming language primitive type - <code>long</code>.
-	    JNI type <datalink id="jlong"></datalink>.
-	  </constant>
-	  <constant id="JVMTI_TYPE_JFLOAT" num="106">
-	    Java programming language primitive type - <code>float</code>.
-	    JNI type <datalink id="jfloat"></datalink>.
-	  </constant>
-	  <constant id="JVMTI_TYPE_JDOUBLE" num="107">
-	    Java programming language primitive type - <code>double</code>.
-	    JNI type <datalink id="jdouble"></datalink>.
-	  </constant>
-	  <constant id="JVMTI_TYPE_JBOOLEAN" num="108">
-	    Java programming language primitive type - <code>boolean</code>.
-	    JNI type <datalink id="jboolean"></datalink>.
-	  </constant>
-	  <constant id="JVMTI_TYPE_JOBJECT" num="109">
-	    Java programming language object type - <code>java.lang.Object</code>.
-	    JNI type <datalink id="jobject"></datalink>.
-	    Returned values are JNI local references and must be managed.
-	  </constant>
-	  <constant id="JVMTI_TYPE_JTHREAD" num="110">
-	    Java programming language object type - <code>java.lang.Thread</code>.
-	    <jvmti/> type <datalink id="jthread"></datalink>.
-	    Returned values are JNI local references and must be managed.
-	  </constant>
-	  <constant id="JVMTI_TYPE_JCLASS" num="111">
-	    Java programming language object type - <code>java.lang.Class</code>.
-	    JNI type <datalink id="jclass"></datalink>.
-	    Returned values are JNI local references and must be managed.
-	  </constant>
-	  <constant id="JVMTI_TYPE_JVALUE" num="112">
-	    Union of all Java programming language primitive and object types -
-	    JNI type <datalink id="jvalue"></datalink>.
-	    Returned values which represent object types are JNI local references and must be managed.
-	  </constant>
-	  <constant id="JVMTI_TYPE_JFIELDID" num="113">
-	    Java programming language field identifier -
-	    JNI type <datalink id="jfieldID"></datalink>.
-	  </constant>
-	  <constant id="JVMTI_TYPE_JMETHODID" num="114">
-	    Java programming language method identifier -
-	    JNI type <datalink id="jmethodID"></datalink>.
-	  </constant>
-	  <constant id="JVMTI_TYPE_CCHAR" num="115">
-	    C programming language type - <code>char</code>.
-	  </constant>
-	  <constant id="JVMTI_TYPE_CVOID" num="116">
-	    C programming language type - <code>void</code>.
-	  </constant>
-	  <constant id="JVMTI_TYPE_JNIENV" num="117">
-	    JNI environment - <code>JNIEnv</code>.
+        These functions
+        allow a <jvmti/> implementation to provide functions and events
+        beyond those defined in this specification.
+        <p/>
+        Both extension functions and extension events have parameters
+        each of which has a 'type' and 'kind' chosen from the following tables:
+
+        <constants id="jvmtiParamTypes" label="Extension Function/Event Parameter Types" kind="enum">
+          <constant id="JVMTI_TYPE_JBYTE" num="101">
+            Java programming language primitive type - <code>byte</code>.
+            JNI type <code>jbyte</code>.
+          </constant>
+          <constant id="JVMTI_TYPE_JCHAR" num="102">
+            Java programming language primitive type - <code>char</code>.
+            JNI type <code>jchar</code>.
+          </constant>
+          <constant id="JVMTI_TYPE_JSHORT" num="103">
+            Java programming language primitive type - <code>short</code>.
+            JNI type <code>jshort</code>.
+          </constant>
+          <constant id="JVMTI_TYPE_JINT" num="104">
+            Java programming language primitive type - <code>int</code>.
+            JNI type <datalink id="jint"></datalink>.
+          </constant>
+          <constant id="JVMTI_TYPE_JLONG" num="105">
+            Java programming language primitive type - <code>long</code>.
+            JNI type <datalink id="jlong"></datalink>.
+          </constant>
+          <constant id="JVMTI_TYPE_JFLOAT" num="106">
+            Java programming language primitive type - <code>float</code>.
+            JNI type <datalink id="jfloat"></datalink>.
+          </constant>
+          <constant id="JVMTI_TYPE_JDOUBLE" num="107">
+            Java programming language primitive type - <code>double</code>.
+            JNI type <datalink id="jdouble"></datalink>.
+          </constant>
+          <constant id="JVMTI_TYPE_JBOOLEAN" num="108">
+            Java programming language primitive type - <code>boolean</code>.
+            JNI type <datalink id="jboolean"></datalink>.
+          </constant>
+          <constant id="JVMTI_TYPE_JOBJECT" num="109">
+            Java programming language object type - <code>java.lang.Object</code>.
+            JNI type <datalink id="jobject"></datalink>.
+            Returned values are JNI local references and must be managed.
+          </constant>
+          <constant id="JVMTI_TYPE_JTHREAD" num="110">
+            Java programming language object type - <code>java.lang.Thread</code>.
+            <jvmti/> type <datalink id="jthread"></datalink>.
+            Returned values are JNI local references and must be managed.
+          </constant>
+          <constant id="JVMTI_TYPE_JCLASS" num="111">
+            Java programming language object type - <code>java.lang.Class</code>.
+            JNI type <datalink id="jclass"></datalink>.
+            Returned values are JNI local references and must be managed.
+          </constant>
+          <constant id="JVMTI_TYPE_JVALUE" num="112">
+            Union of all Java programming language primitive and object types -
+            JNI type <datalink id="jvalue"></datalink>.
+            Returned values which represent object types are JNI local references and must be managed.
+          </constant>
+          <constant id="JVMTI_TYPE_JFIELDID" num="113">
+            Java programming language field identifier -
+            JNI type <datalink id="jfieldID"></datalink>.
+          </constant>
+          <constant id="JVMTI_TYPE_JMETHODID" num="114">
+            Java programming language method identifier -
+            JNI type <datalink id="jmethodID"></datalink>.
+          </constant>
+          <constant id="JVMTI_TYPE_CCHAR" num="115">
+            C programming language type - <code>char</code>.
+          </constant>
+          <constant id="JVMTI_TYPE_CVOID" num="116">
+            C programming language type - <code>void</code>.
+          </constant>
+          <constant id="JVMTI_TYPE_JNIENV" num="117">
+            JNI environment - <code>JNIEnv</code>.
             Should be used with the correct <datalink id="jvmtiParamKind"/> to make it a pointer type.
-	  </constant>
-	</constants>
-
-	<constants id="jvmtiParamKind" label="Extension Function/Event Parameter Kinds" kind="enum">
-	  <constant id="JVMTI_KIND_IN" num="91">
-	    Ingoing argument - <code>foo</code>.
-	  </constant>
-	  <constant id="JVMTI_KIND_IN_PTR" num="92">
-	    Ingoing pointer argument - <code>const foo*</code>.
-	  </constant>
-	  <constant id="JVMTI_KIND_IN_BUF" num="93">
-	    Ingoing array argument - <code>const foo*</code>.
-	  </constant>
-	  <constant id="JVMTI_KIND_ALLOC_BUF" num="94">
-	    Outgoing allocated array argument -  <code>foo**</code>.
-	    Free with <code>Deallocate</code>.
-	  </constant>
-	  <constant id="JVMTI_KIND_ALLOC_ALLOC_BUF" num="95">
-	    Outgoing allocated array of allocated arrays argument - <code>foo***</code>.
-	    Free with <code>Deallocate</code>.
-	  </constant>
-	  <constant id="JVMTI_KIND_OUT" num="96">
-	    Outgoing argument - <code>foo*</code>.
-	  </constant>
-	  <constant id="JVMTI_KIND_OUT_BUF" num="97">
-	    Outgoing array argument (pre-allocated by agent) - <code>foo*</code>.
-	    Do not <code>Deallocate</code>.
-	  </constant>
-	</constants>
+          </constant>
+        </constants>
+
+        <constants id="jvmtiParamKind" label="Extension Function/Event Parameter Kinds" kind="enum">
+          <constant id="JVMTI_KIND_IN" num="91">
+            Ingoing argument - <code>foo</code>.
+          </constant>
+          <constant id="JVMTI_KIND_IN_PTR" num="92">
+            Ingoing pointer argument - <code>const foo*</code>.
+          </constant>
+          <constant id="JVMTI_KIND_IN_BUF" num="93">
+            Ingoing array argument - <code>const foo*</code>.
+          </constant>
+          <constant id="JVMTI_KIND_ALLOC_BUF" num="94">
+            Outgoing allocated array argument -  <code>foo**</code>.
+            Free with <code>Deallocate</code>.
+          </constant>
+          <constant id="JVMTI_KIND_ALLOC_ALLOC_BUF" num="95">
+            Outgoing allocated array of allocated arrays argument - <code>foo***</code>.
+            Free with <code>Deallocate</code>.
+          </constant>
+          <constant id="JVMTI_KIND_OUT" num="96">
+            Outgoing argument - <code>foo*</code>.
+          </constant>
+          <constant id="JVMTI_KIND_OUT_BUF" num="97">
+            Outgoing array argument (pre-allocated by agent) - <code>foo*</code>.
+            Do not <code>Deallocate</code>.
+          </constant>
+        </constants>
 
       </intro>
 
       <typedef id="jvmtiParamInfo" label="Extension Function/Event Parameter Info">
-	<field id="name">
-	  <allocfieldbuf><char/></allocfieldbuf>
-	    <description>
-	      The parameter name, encoded as a
-	      <internallink id="mUTF">modified UTF-8</internallink> string
-	    </description>
-	</field>
-	<field id="kind">
-	  <enum>jvmtiParamKind</enum>
-	  <description>
-	    The kind of the parameter - type modifiers
-	  </description>
-	</field>
-	<field id="base_type">
-	  <enum>jvmtiParamTypes</enum>
-	  <description>
-	    The base type of the parameter -  modified by <code>kind</code>
-	  </description>
-	</field>
-	<field id="null_ok">
-	  <jboolean/>
-	    <description>
-	      Is a <code>NULL</code> argument permitted? Applies only to pointer and object types.
-	    </description>
-	</field>
+        <field id="name">
+          <allocfieldbuf><char/></allocfieldbuf>
+            <description>
+              The parameter name, encoded as a
+              <internallink id="mUTF">modified UTF-8</internallink> string
+            </description>
+        </field>
+        <field id="kind">
+          <enum>jvmtiParamKind</enum>
+          <description>
+            The kind of the parameter - type modifiers
+          </description>
+        </field>
+        <field id="base_type">
+          <enum>jvmtiParamTypes</enum>
+          <description>
+            The base type of the parameter -  modified by <code>kind</code>
+          </description>
+        </field>
+        <field id="null_ok">
+          <jboolean/>
+            <description>
+              Is a <code>NULL</code> argument permitted? Applies only to pointer and object types.
+            </description>
+        </field>
       </typedef>
 
       <callback id="jvmtiExtensionFunction">
-	<enum>jvmtiError</enum>
-	  <synopsis>Extension Function</synopsis>
-	<description>
-	  This is the implementation-specific extension function.
-	</description>
-	<parameters>
-	  <param id="jvmti_env">
-	    <outptr>
-	      <struct>jvmtiEnv</struct>
-	    </outptr>
-	    <description>
-	      The <jvmti/> environment is the only fixed parameter for extension functions.
-	    </description>
-	  </param>
-	  <param id="...">
-	    <varargs/>
-	      <description>
-		The extension function-specific parameters
-	      </description>
-	  </param>
-	</parameters>
+        <enum>jvmtiError</enum>
+          <synopsis>Extension Function</synopsis>
+        <description>
+          This is the implementation-specific extension function.
+        </description>
+        <parameters>
+          <param id="jvmti_env">
+            <outptr>
+              <struct>jvmtiEnv</struct>
+            </outptr>
+            <description>
+              The <jvmti/> environment is the only fixed parameter for extension functions.
+            </description>
+          </param>
+          <param id="...">
+            <varargs/>
+              <description>
+                The extension function-specific parameters
+              </description>
+          </param>
+        </parameters>
       </callback>
 
       <function id="GetExtensionFunctions" phase="onload" num="124">
-	<synopsis>Get Extension Functions</synopsis>
+        <synopsis>Get Extension Functions</synopsis>
 
-	<typedef id="jvmtiExtensionFunctionInfo" label="Extension Function Info">
-	  <field id="func">
+        <typedef id="jvmtiExtensionFunctionInfo" label="Extension Function Info">
+          <field id="func">
             <ptrtype>
               <struct>jvmtiExtensionFunction</struct>
             </ptrtype>
-	    <description>
-	      The actual function to call
-	    </description>
-	  </field>
-	  <field id="id">
-	    <allocfieldbuf><char/></allocfieldbuf>
-	      <description>
-		The identifier for the extension function, encoded as a
-	        <internallink id="mUTF">modified UTF-8</internallink> string.
-		Uses package name conventions.
-		For example, <code>com.sun.hotspot.bar</code>
-	      </description>
-	  </field>
-	  <field id="short_description">
-	    <allocfieldbuf><char/></allocfieldbuf>
-	      <description>
-		A one sentence description of the function, encoded as a
-	        <internallink id="mUTF">modified UTF-8</internallink> string.
-	      </description>
-	  </field>
-	  <field id="param_count">
-	    <jint/>
-	      <description>
-		The number of parameters excluding <code>jvmtiEnv *jvmti_env</code>
-	      </description>
-	  </field>
-	  <field id="params">
-	    <allocfieldbuf outcount="param_count">
-	      <struct>jvmtiParamInfo</struct>
-	    </allocfieldbuf>
-	    <description>
-	      Array of
-	      <fieldlink id="param_count" struct="jvmtiExtensionFunctionInfo"></fieldlink>
-	      parameters (<code>jvmtiEnv *jvmti_env</code> excluded)
-	    </description>
-	  </field>
-	  <field id="error_count">
-	    <jint/>
-	      <description>
-		The number of possible error returns (excluding universal errors)
-	      </description>
-	  </field>
-	  <field id="errors">
-	    <allocfieldbuf outcount="error_count">
-	      <enum>jvmtiError</enum>
-	    </allocfieldbuf>
-	    <description>
-	      Array of <fieldlink id="error_count" struct="jvmtiExtensionFunctionInfo"></fieldlink>
-	      possible errors
-	    </description>
-	  </field>
-	</typedef>
-
-	<description>
-	  Returns the set of extension functions.
-	</description>
-	<origin>new</origin>
-	<capabilities>
-	</capabilities>
-	<parameters>
-	  <param id="extension_count_ptr">
-	    <outptr><jint/></outptr>
-	      <description>
-		On return, points to the number of extension functions
-	      </description>
-	  </param>
-	  <param id="extensions">
-	    <allocbuf outcount="extension_count_ptr"><struct>jvmtiExtensionFunctionInfo</struct></allocbuf>
-	    <description>
-	      Returns an array of extension function info, one per function
-	    </description>
-	  </param>
-	</parameters>
-	<errors>
-	</errors>
+            <description>
+              The actual function to call
+            </description>
+          </field>
+          <field id="id">
+            <allocfieldbuf><char/></allocfieldbuf>
+              <description>
+                The identifier for the extension function, encoded as a
+                <internallink id="mUTF">modified UTF-8</internallink> string.
+                Uses package name conventions.
+                For example, <code>com.sun.hotspot.bar</code>
+              </description>
+          </field>
+          <field id="short_description">
+            <allocfieldbuf><char/></allocfieldbuf>
+              <description>
+                A one sentence description of the function, encoded as a
+                <internallink id="mUTF">modified UTF-8</internallink> string.
+              </description>
+          </field>
+          <field id="param_count">
+            <jint/>
+              <description>
+                The number of parameters excluding <code>jvmtiEnv *jvmti_env</code>
+              </description>
+          </field>
+          <field id="params">
+            <allocfieldbuf outcount="param_count">
+              <struct>jvmtiParamInfo</struct>
+            </allocfieldbuf>
+            <description>
+              Array of
+              <fieldlink id="param_count" struct="jvmtiExtensionFunctionInfo"></fieldlink>
+              parameters (<code>jvmtiEnv *jvmti_env</code> excluded)
+            </description>
+          </field>
+          <field id="error_count">
+            <jint/>
+              <description>
+                The number of possible error returns (excluding universal errors)
+              </description>
+          </field>
+          <field id="errors">
+            <allocfieldbuf outcount="error_count">
+              <enum>jvmtiError</enum>
+            </allocfieldbuf>
+            <description>
+              Array of <fieldlink id="error_count" struct="jvmtiExtensionFunctionInfo"></fieldlink>
+              possible errors
+            </description>
+          </field>
+        </typedef>
+
+        <description>
+          Returns the set of extension functions.
+        </description>
+        <origin>new</origin>
+        <capabilities>
+        </capabilities>
+        <parameters>
+          <param id="extension_count_ptr">
+            <outptr><jint/></outptr>
+              <description>
+                On return, points to the number of extension functions
+              </description>
+          </param>
+          <param id="extensions">
+            <allocbuf outcount="extension_count_ptr"><struct>jvmtiExtensionFunctionInfo</struct></allocbuf>
+            <description>
+              Returns an array of extension function info, one per function
+            </description>
+          </param>
+        </parameters>
+        <errors>
+        </errors>
       </function>
 
       <function id="GetExtensionEvents" phase="onload" num="125">
-	<synopsis>Get Extension Events</synopsis>
-
-	<typedef id="jvmtiExtensionEventInfo" label="Extension Event Info">
-	  <field id="extension_event_index">
-	    <jint/>
-	    <description>
-	      The identifying index of the event
-	    </description>
-	  </field>
-	  <field id="id">
-	    <allocfieldbuf><char/></allocfieldbuf>
-	      <description>
-		The identifier for the extension event, encoded as a
+        <synopsis>Get Extension Events</synopsis>
+
+        <typedef id="jvmtiExtensionEventInfo" label="Extension Event Info">
+          <field id="extension_event_index">
+            <jint/>
+            <description>
+              The identifying index of the event
+            </description>
+          </field>
+          <field id="id">
+            <allocfieldbuf><char/></allocfieldbuf>
+              <description>
+                The identifier for the extension event, encoded as a
                 <internallink id="mUTF">modified UTF-8</internallink> string.
-		Uses package name conventions.
-		For example, <code>com.sun.hotspot.bar</code>
-	      </description>
-	  </field>
-	  <field id="short_description">
-	    <allocfieldbuf><char/></allocfieldbuf>
-	      <description>
-		A one sentence description of the event, encoded as a
+                Uses package name conventions.
+                For example, <code>com.sun.hotspot.bar</code>
+              </description>
+          </field>
+          <field id="short_description">
+            <allocfieldbuf><char/></allocfieldbuf>
+              <description>
+                A one sentence description of the event, encoded as a
                 <internallink id="mUTF">modified UTF-8</internallink> string.
-	      </description>
-	  </field>
-	  <field id="param_count">
-	    <jint/>
-	      <description>
-		The number of parameters excluding <code>jvmtiEnv *jvmti_env</code>
-	      </description>
-	  </field>
-	  <field id="params">
-	    <allocfieldbuf outcount="param_count">
-	      <struct>jvmtiParamInfo</struct>
-	    </allocfieldbuf>
-	    <description>
-	      Array of
-	      <fieldlink id="param_count" struct="jvmtiExtensionEventInfo"></fieldlink>
-	      parameters (<code>jvmtiEnv *jvmti_env</code> excluded)
-	    </description>
-	  </field>
-	</typedef>
-
-	<description>
-	  Returns the set of extension events.
-	</description>
-	<origin>new</origin>
-	<capabilities>
-	</capabilities>
-	<parameters>
-	  <param id="extension_count_ptr">
-	    <outptr><jint/></outptr>
-	      <description>
-		On return, points to the number of extension events
-	      </description>
-	  </param>
-	  <param id="extensions">
-	    <allocbuf outcount="extension_count_ptr"><struct>jvmtiExtensionEventInfo</struct></allocbuf>
-	    <description>
-	      Returns an array of extension event info, one per event
-	    </description>
-	  </param>
-	</parameters>
-	<errors>
-	</errors>
+              </description>
+          </field>
+          <field id="param_count">
+            <jint/>
+              <description>
+                The number of parameters excluding <code>jvmtiEnv *jvmti_env</code>
+              </description>
+          </field>
+          <field id="params">
+            <allocfieldbuf outcount="param_count">
+              <struct>jvmtiParamInfo</struct>
+            </allocfieldbuf>
+            <description>
+              Array of
+              <fieldlink id="param_count" struct="jvmtiExtensionEventInfo"></fieldlink>
+              parameters (<code>jvmtiEnv *jvmti_env</code> excluded)
+            </description>
+          </field>
+        </typedef>
+
+        <description>
+          Returns the set of extension events.
+        </description>
+        <origin>new</origin>
+        <capabilities>
+        </capabilities>
+        <parameters>
+          <param id="extension_count_ptr">
+            <outptr><jint/></outptr>
+              <description>
+                On return, points to the number of extension events
+              </description>
+          </param>
+          <param id="extensions">
+            <allocbuf outcount="extension_count_ptr"><struct>jvmtiExtensionEventInfo</struct></allocbuf>
+            <description>
+              Returns an array of extension event info, one per event
+            </description>
+          </param>
+        </parameters>
+        <errors>
+        </errors>
       </function>
 
       <callback id="jvmtiExtensionEvent">
-	<void/>
-	  <synopsis>Extension Event</synopsis>
-	<description>
-	  This is the implementation-specific event.
+        <void/>
+          <synopsis>Extension Event</synopsis>
+        <description>
+          This is the implementation-specific event.
           The event handler is set with
           <functionlink id="SetExtensionEventCallback"/>.
           <p/>
           Event handlers for extension events must be declared varargs to match this definition.
           Failure to do so could result in calling convention mismatch and undefined behavior
@@ -9910,73 +9902,73 @@
           declared:
 <example>
     void JNICALL myHandler(jvmtiEnv* jvmti_env, jint myInt, ...)
 </example>
           Note the terminal "<code>...</code>" which indicates varargs.
-	</description>
-	<parameters>
-	  <param id="jvmti_env">
-	    <outptr>
-	      <struct>jvmtiEnv</struct>
-	    </outptr>
-	    <description>
-	      The <jvmti/> environment is the only fixed parameter for extension events.
-	    </description>
-	  </param>
-	  <param id="...">
-	    <varargs/>
-	      <description>
-		The extension event-specific parameters
-	      </description>
-	  </param>
-	</parameters>
+        </description>
+        <parameters>
+          <param id="jvmti_env">
+            <outptr>
+              <struct>jvmtiEnv</struct>
+            </outptr>
+            <description>
+              The <jvmti/> environment is the only fixed parameter for extension events.
+            </description>
+          </param>
+          <param id="...">
+            <varargs/>
+              <description>
+                The extension event-specific parameters
+              </description>
+          </param>
+        </parameters>
       </callback>
 
       <function id="SetExtensionEventCallback" phase="onload" num="126">
-	<synopsis>Set Extension Event Callback</synopsis>
-
-	<description>
-	  Sets the callback function for an extension event and
-	  enables the event. Or, if the callback is <code>NULL</code>, disables
-	  the event.  Note that unlike standard events, setting
-	  the callback and enabling the event are a single operation.
-	</description>
-	<origin>new</origin>
-	<capabilities>
-	</capabilities>
-	<parameters>
-	  <param id="extension_event_index">
-	    <jint/>
-	      <description>
-		Identifies which callback to set.
-		This index is the
-		<fieldlink id="extension_event_index" struct="jvmtiExtensionEventInfo"></fieldlink>
-		field of
-		<datalink id="jvmtiExtensionEventInfo"/>.
-	      </description>
-	  </param>
-	  <param id="callback">
-	    <ptrtype>
-	      <struct>jvmtiExtensionEvent</struct>
-	      <nullok>disable the event</nullok>
-	    </ptrtype>
-	    <description>
-	      If <code>callback</code> is non-<code>NULL</code>,
-	      set <code>callback</code> to be the event callback function
-	      and enable the event.
-	    </description>
-	  </param>
-	</parameters>
-	<errors>
+        <synopsis>Set Extension Event Callback</synopsis>
+
+        <description>
+          Sets the callback function for an extension event and
+          enables the event. Or, if the callback is <code>NULL</code>, disables
+          the event.  Note that unlike standard events, setting
+          the callback and enabling the event are a single operation.
+        </description>
+        <origin>new</origin>
+        <capabilities>
+        </capabilities>
+        <parameters>
+          <param id="extension_event_index">
+            <jint/>
+              <description>
+                Identifies which callback to set.
+                This index is the
+                <fieldlink id="extension_event_index" struct="jvmtiExtensionEventInfo"></fieldlink>
+                field of
+                <datalink id="jvmtiExtensionEventInfo"/>.
+              </description>
+          </param>
+          <param id="callback">
+            <ptrtype>
+              <struct>jvmtiExtensionEvent</struct>
+              <nullok>disable the event</nullok>
+            </ptrtype>
+            <description>
+              If <code>callback</code> is non-<code>NULL</code>,
+              set <code>callback</code> to be the event callback function
+              and enable the event.
+            </description>
+          </param>
+        </parameters>
+        <errors>
         <error id="JVMTI_ERROR_ILLEGAL_ARGUMENT">
             <paramlink id="extension_event_index"/> is not an
             <fieldlink id="extension_event_index"
                        struct="jvmtiExtensionEventInfo"/>
             returned by
             <functionlink id="GetExtensionEvents"/>
         </error>
-	</errors>
+        </errors>
       </function>
 
     </category>
 
   <category id="capability" label="Capability">
@@ -10019,26 +10011,26 @@
       on each instruction is huge in any implementation.
       However, the overhead of possessing the capability may be small or large,
       depending on the implementation.  Also, when and if a capability is potentially
       available depends on the implementation.  Some examples:
       <ul>
-	<li>One VM might perform all execution by compiling bytecodes into
-	  native code and be unable to generate single step instructions.
-	  In this implementation the capability can not be added.</li>
-	<li>Another VM may be able to switch execution to a single stepping
-	  interpreter at any time.  In this implementation, having the capability has no
-	  overhead and could be added at any time.</li>
-	<li>Yet another VM might be able to choose a bytecode compiling or single stepping capable interpreted
-	  execution engine at start up, but be unable to switch between them.
-	  In this implementation the capability would need to be added
+        <li>One VM might perform all execution by compiling bytecodes into
+          native code and be unable to generate single step instructions.
+          In this implementation the capability can not be added.</li>
+        <li>Another VM may be able to switch execution to a single stepping
+          interpreter at any time.  In this implementation, having the capability has no
+          overhead and could be added at any time.</li>
+        <li>Yet another VM might be able to choose a bytecode compiling or single stepping capable interpreted
+          execution engine at start up, but be unable to switch between them.
+          In this implementation the capability would need to be added
           during the <code>OnLoad</code> phase (before bytecode
-	  execution begins) and would have a large impact on execution speed
-	  even if single stepping was never used.</li>
-	<li>Still another VM might be able to add an "is single stepping on" check
-	  into compiled bytecodes or a generated interpreter.  Again in this implementation
-	  the capability would need to be added during the <code>OnLoad</code> phase but the overhead (a test
-	  and branch on each instruction) would be considerably less.</li>
+          execution begins) and would have a large impact on execution speed
+          even if single stepping was never used.</li>
+        <li>Still another VM might be able to add an "is single stepping on" check
+          into compiled bytecodes or a generated interpreter.  Again in this implementation
+          the capability would need to be added during the <code>OnLoad</code> phase but the overhead (a test
+          and branch on each instruction) would be considerably less.</li>
       </ul>
       <p/>
       Each <jvmti/> <internallink id="environments">environment</internallink>
       has its own set of capabilities.
       Initially, that set is empty.
@@ -10050,277 +10042,279 @@
       Once a capability is added, it can
       only be removed if explicitly relinquished by the environment.
       <p/>
       The agent can,
       <functionlink id="GetPotentialCapabilities">determine what
-	capabilities this VM can potentially provide</functionlink>,
+        capabilities this VM can potentially provide</functionlink>,
       <functionlink id="AddCapabilities">add the capabilities
-	to be used</functionlink>,
+        to be used</functionlink>,
       <functionlink id="RelinquishCapabilities">release capabilities
-	which are no longer needed</functionlink>, and
+        which are no longer needed</functionlink>, and
       <functionlink id="GetCapabilities">examine the currently available
-	capabilities</functionlink>.
+        capabilities</functionlink>.
     </intro>
 
     <intro id="capabilityExamples" label="Capability Examples">
       For example, a freshly started agent (in the <code>OnLoad</code> function)
       wants to enable all possible capabilities.
       Note that, in general, this is not advisable as the agent may suffer
       a performance penalty for functionality it is not using.
       The code might look like this in C:
       <example>
-	jvmtiCapabilities capa;
-	jvmtiError err;
+        jvmtiCapabilities capa;
+        jvmtiError err;
 
-	err = (*jvmti)-&gt;GetPotentialCapabilities(jvmti, &amp;capa);
-	if (err == JVMTI_ERROR_NONE) {
-	   err = (*jvmti)-&gt;AddCapabilities(jvmti, &amp;capa);
+        err = (*jvmti)-&gt;GetPotentialCapabilities(jvmti, &amp;capa);
+        if (err == JVMTI_ERROR_NONE) {
+           err = (*jvmti)-&gt;AddCapabilities(jvmti, &amp;capa);
       </example>
       For example, if an  agent wants to check if it can get
       the bytecodes of a method (that is, it wants to check
       if it previously added this capability and has not
       relinquished it), the code might
       look like this in C:
       <example>
-	jvmtiCapabilities capa;
-	jvmtiError err;
+        jvmtiCapabilities capa;
+        jvmtiError err;
 
-	err = (*jvmti)-&gt;GetCapabilities(jvmti, &amp;capa);
-	if (err == JVMTI_ERROR_NONE) {
-   	   if (capa.can_get_bytecodes) { ... } }
+        err = (*jvmti)-&gt;GetCapabilities(jvmti, &amp;capa);
+        if (err == JVMTI_ERROR_NONE) {
+           if (capa.can_get_bytecodes) { ... } }
       </example>
     </intro>
 
     <capabilitiestypedef id="jvmtiCapabilities" label="The Capabilities Structure">
       <description>
         The functions in this category use this capabilities structure
         which contains boolean flags corresponding to each capability:
       </description>
       <capabilityfield id="can_tag_objects">
-	<description>
-	  Can set and get tags, as described in the
+        <description>
+          Can set and get tags, as described in the
           <internallink id="Heap">Heap category</internallink>.
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_field_modification_events">
-	<description>
-	  Can set watchpoints on field modification -
+        <description>
+          Can set watchpoints on field modification -
           <functionlink id="SetFieldModificationWatch"></functionlink>
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_field_access_events">
-	<description>
-	  Can set watchpoints on field access -
-	  <functionlink id="SetFieldAccessWatch"></functionlink>
-	</description>
+        <description>
+          Can set watchpoints on field access -
+          <functionlink id="SetFieldAccessWatch"></functionlink>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_get_bytecodes">
-	<description>
-	  Can get bytecodes of a method <functionlink id="GetBytecodes"></functionlink>
-	</description>
+        <description>
+          Can get bytecodes of a method <functionlink id="GetBytecodes"></functionlink>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_get_synthetic_attribute">
-	<description>
-	  Can test if a field or method is synthetic -
+        <description>
+          Can test if a field or method is synthetic -
           <functionlink id="IsFieldSynthetic"></functionlink> and
           <functionlink id="IsMethodSynthetic"></functionlink>
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_get_owned_monitor_info">
-	<description>
-	  Can get information about ownership of monitors -
+        <description>
+          Can get information about ownership of monitors -
           <functionlink id="GetOwnedMonitorInfo"></functionlink>
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_get_current_contended_monitor">
-	<description>
-	  Can <functionlink id="GetCurrentContendedMonitor"></functionlink>
-	</description>
+        <description>
+          Can <functionlink id="GetCurrentContendedMonitor"></functionlink>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_get_monitor_info">
       <description>
         Can <functionlink id="GetObjectMonitorUsage"></functionlink>
       </description>
       </capabilityfield>
       <capabilityfield id="can_pop_frame">
-	<description>
-	  Can pop frames off the stack - <functionlink id="PopFrame"></functionlink>
-	</description>
+        <description>
+          Can pop frames off the stack - <functionlink id="PopFrame"></functionlink>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_redefine_classes">
-	<description>
-	  Can redefine classes with <functionlink id="RedefineClasses"/>.
-	</description>
+        <description>
+          Can redefine classes with <functionlink id="RedefineClasses"/>.
+        </description>
       </capabilityfield>
       <capabilityfield id="can_signal_thread">
-	<description>
-	  Can send stop or interrupt to threads
-	</description>
+        <description>
+          Can send stop or interrupt to threads
+        </description>
       </capabilityfield>
       <capabilityfield id="can_get_source_file_name">
-	<description>
-	  Can get the source file name of a class
-	</description>
+        <description>
+          Can get the source file name of a class
+        </description>
       </capabilityfield>
       <capabilityfield id="can_get_line_numbers">
-	<description>
-	  Can get the line number table of a method
-	</description>
+        <description>
+          Can get the line number table of a method
+        </description>
       </capabilityfield>
       <capabilityfield id="can_get_source_debug_extension">
-	<description>
-	  Can get the source debug extension of a class
-	</description>
+        <description>
+          Can get the source debug extension of a class
+        </description>
       </capabilityfield>
       <capabilityfield id="can_access_local_variables">
-	<description>
-	  Can set and get local variables
-	</description>
+        <description>
+          Can set and get local variables
+        </description>
       </capabilityfield>
       <capabilityfield id="can_maintain_original_method_order">
-	<description>
-	  Can return methods in the order they occur in the class file
-	</description>
+        <description>
+          Can return methods in the order they occur in the class file
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_single_step_events">
-	<description>
-	  Can get <eventlink id="SingleStep">single step</eventlink> events
-	</description>
+        <description>
+          Can get <eventlink id="SingleStep">single step</eventlink> events
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_exception_events">
-	<description>
-	  Can get <eventlink id="Exception">exception thrown</eventlink> and
+        <description>
+          Can get <eventlink id="Exception">exception thrown</eventlink> and
             <eventlink id="ExceptionCatch">exception catch</eventlink> events
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_frame_pop_events">
-	<description>
-	  Can <functionlink id="NotifyFramePop">set</functionlink> and thus get
+        <description>
+          Can <functionlink id="NotifyFramePop">set</functionlink> and thus get
             <eventlink id="FramePop"></eventlink> events
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_breakpoint_events">
-	<description>
-	  Can <functionlink id="SetBreakpoint">set</functionlink> and thus get
+        <description>
+          Can <functionlink id="SetBreakpoint">set</functionlink> and thus get
             <eventlink id="Breakpoint"></eventlink> events
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_suspend">
-	<description>
-	  Can suspend and resume threads
-	</description>
+        <description>
+          Can suspend and resume threads
+        </description>
       </capabilityfield>
       <capabilityfield id="can_redefine_any_class">
-	<description>
-          Can modify (retransform or redefine) any modifiable class.
+        <description>
+          <functionlink id="RedefineClasses"/> can be called on any modifiable class.
           See <functionlink id="IsModifiableClass"/>.
-	</description>
+          (<fieldlink id="can_redefine_classes" struct="jvmtiCapabilities"/>
+          must also be set)
+        </description>
       </capabilityfield>
       <capabilityfield id="can_get_current_thread_cpu_time">
-	<description>
-	  Can <functionlink id="GetCurrentThreadCpuTime">get</functionlink>
-	  current thread CPU time
-	</description>
+        <description>
+          Can <functionlink id="GetCurrentThreadCpuTime">get</functionlink>
+          current thread CPU time
+        </description>
       </capabilityfield>
       <capabilityfield id="can_get_thread_cpu_time">
-	<description>
-	  Can <functionlink id="GetThreadCpuTime">get</functionlink>
-	  thread CPU time
-	</description>
+        <description>
+          Can <functionlink id="GetThreadCpuTime">get</functionlink>
+          thread CPU time
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_method_entry_events"
-		       disp1="can_generate" disp2="_method_entry_events"
-		       >
-	<description>
-	  Can generate method entry events on entering a method
-	</description>
+                       disp1="can_generate" disp2="_method_entry_events"
+                       >
+        <description>
+          Can generate method entry events on entering a method
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_method_exit_events"
-		       disp1="can_generate" disp2="_method_exit_events"
-		       >
-	<description>
-	  Can generate method exit events on leaving a method
-	</description>
+                       disp1="can_generate" disp2="_method_exit_events"
+                       >
+        <description>
+          Can generate method exit events on leaving a method
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_all_class_hook_events"
-		       disp1="can_generate" disp2="_all_class_hook_events"
-		       >
-	<description>
-	  Can generate ClassFileLoadHook events for every loaded class.
-	</description>
+                       disp1="can_generate" disp2="_all_class_hook_events"
+                       >
+        <description>
+          Can generate ClassFileLoadHook events for every loaded class.
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_compiled_method_load_events"
-		       disp1="can_generate" disp2="_compiled_method_load_events"
-		       >
-	<description>
-	  Can generate events when a method is compiled or unloaded
-	</description>
+                       disp1="can_generate" disp2="_compiled_method_load_events"
+                       >
+        <description>
+          Can generate events when a method is compiled or unloaded
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_monitor_events"
-		       disp1="can_generate" disp2="_monitor_events"
-		       >
-	<description>
-	  Can generate events on monitor activity
-	</description>
+                       disp1="can_generate" disp2="_monitor_events"
+                       >
+        <description>
+          Can generate events on monitor activity
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_vm_object_alloc_events"
-		       disp1="can_generate" disp2="_vm_object_alloc_events"
-		       >
-	<description>
-	  Can generate events on VM allocation of an object
-	</description>
+                       disp1="can_generate" disp2="_vm_object_alloc_events"
+                       >
+        <description>
+          Can generate events on VM allocation of an object
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_native_method_bind_events"
-		       disp1="can_generate" disp2="_native_method_bind_events"
-		       >
-	<description>
-	  Can generate events when a native method is bound to its
-	  implementation
-	</description>
+                       disp1="can_generate" disp2="_native_method_bind_events"
+                       >
+        <description>
+          Can generate events when a native method is bound to its
+          implementation
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_garbage_collection_events"
-		       disp1="can_generate" disp2="_garbage_collection_events"
-		       >
-	<description>
-	  Can generate events when garbage collection begins or ends
-	</description>
+                       disp1="can_generate" disp2="_garbage_collection_events"
+                       >
+        <description>
+          Can generate events when garbage collection begins or ends
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_object_free_events"
-		       disp1="can_generate" disp2="_object_free_events"
-		       >
-	<description>
-	  Can generate events when the garbage collector frees an object
-	</description>
+                       disp1="can_generate" disp2="_object_free_events"
+                       >
+        <description>
+          Can generate events when the garbage collector frees an object
+        </description>
       </capabilityfield>
       <capabilityfield id="can_force_early_return" since="1.1">
-	<description>
-	  Can return early from a method, as described in the
+        <description>
+          Can return early from a method, as described in the
           <internallink id="ForceEarlyReturn">Force Early Return category</internallink>.
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_get_owned_monitor_stack_depth_info" since="1.1">
-	<description>
-	  Can get information about owned monitors with stack depth -
+        <description>
+          Can get information about owned monitors with stack depth -
           <functionlink id="GetOwnedMonitorStackDepthInfo"></functionlink>
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_get_constant_pool" since="1.1">
-	<description>
-	  Can get the constant pool of a class -
+        <description>
+          Can get the constant pool of a class -
           <functionlink id="GetConstantPool"></functionlink>
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_set_native_method_prefix" since="1.1">
-	<description>
-	  Can set prefix to be applied when native method cannot be resolved -
+        <description>
+          Can set prefix to be applied when native method cannot be resolved -
           <functionlink id="SetNativeMethodPrefix"/> and
           <functionlink id="SetNativeMethodPrefixes"/>
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_retransform_classes" since="1.1">
-	<description>
-	  Can retransform classes with <functionlink id="RetransformClasses"/>.
+        <description>
+          Can retransform classes with <functionlink id="RetransformClasses"/>.
           In addition to the restrictions imposed by the specific
           implementation on this capability (see the
           <internallink id="capability">Capability</internallink> section),
           this capability must be set before the
           <eventlink id="ClassFileLoadHook"/> event is enabled for the
@@ -10329,32 +10323,32 @@
           <code>ClassFileLoadHook</code> is enabled for the first time is
           said to be <i>retransformation capable</i>.
           An environment that does not possess this capability at the time that
           <code>ClassFileLoadHook</code> is enabled for the first time is
           said to be <i>retransformation incapable</i>.
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_retransform_any_class" since="1.1">
-	<description>
+        <description>
           <functionlink id="RetransformClasses"/> can be called on any modifiable class.
           See <functionlink id="IsModifiableClass"/>.
           (<fieldlink id="can_retransform_classes" struct="jvmtiCapabilities"/>
           must also be set)
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_resource_exhaustion_heap_events" since="1.1">
-	<description>
+        <description>
           Can generate events when the VM is unable to allocate memory from
           the <tm>Java</tm> platform heap.
           See <eventlink id="ResourceExhausted"/>.
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_resource_exhaustion_threads_events" since="1.1">
-	<description>
+        <description>
           Can generate events when the VM is unable to create a thread.
           See <eventlink id="ResourceExhausted"/>.
-	</description>
+        </description>
       </capabilityfield>
       <capabilityfield id="can_generate_early_vmstart" since="9">
         <description>
           Can generate the <code>VMStart</code> event early.
           See <eventlink id="VMStart"/>.
@@ -10373,27 +10367,27 @@
       </capabilityfield>
       <capabilityfield id="can_generate_sampled_object_alloc_events" since="11">
         <description>
           Can generate sampled allocation events.
           If this capability is enabled then the heap sampling method
-	  <functionlink id="SetHeapSamplingInterval"></functionlink> can be
-	  called and <eventlink id="SampledObjectAlloc"></eventlink> events can be generated.
+          <functionlink id="SetHeapSamplingInterval"></functionlink> can be
+          called and <eventlink id="SampledObjectAlloc"></eventlink> events can be generated.
         </description>
       </capabilityfield>
     </capabilitiestypedef>
 
     <function id="GetPotentialCapabilities" jkernel="yes" phase="onload" num="140">
       <synopsis>Get Potential Capabilities</synopsis>
       <description>
         Returns via <paramlink id="capabilities_ptr"></paramlink> the <jvmti/>
         features that can potentially be possessed by this environment
-	at this time.
-	The returned capabilities differ from the complete set of capabilities
-	implemented by the VM in two cases: another environment possesses
-	capabilities that can only be possessed by one environment, or the
-	current <functionlink id="GetPhase">phase</functionlink> is live,
-	and certain capabilities can only be added during the <code>OnLoad</code> phase.
+        at this time.
+        The returned capabilities differ from the complete set of capabilities
+        implemented by the VM in two cases: another environment possesses
+        capabilities that can only be possessed by one environment, or the
+        current <functionlink id="GetPhase">phase</functionlink> is live,
+        and certain capabilities can only be added during the <code>OnLoad</code> phase.
         The <functionlink id="AddCapabilities"></functionlink> function
         may be used to set any or all or these capabilities.
         Currently possessed capabilities are included.
         <p/>
         Typically this function is used in the <code>OnLoad</code> function.
@@ -10408,34 +10402,34 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="capabilities_ptr">
-	  <outptr><struct>jvmtiCapabilities</struct></outptr>
-	  <description>
-	    On return, points to the <jvmti/> capabilities that may be added.
-	  </description>
-	</param>
+          <outptr><struct>jvmtiCapabilities</struct></outptr>
+          <description>
+            On return, points to the <jvmti/> capabilities that may be added.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <elide>
     <function id="EstimateCostOfCapabilities" phase="onload" num="141">
       <synopsis>Estimate Cost Of Capabilities</synopsis>
       <description>
-	<issue>There is strong opposition to this function.  The concern is
-	  that it would be difficult or impossible to provide meaningful
-	  numbers, as the amount of impact is conditional on many factors
-	  that a single number could not represent.  There is doubt that
-	  conditional implementations would be used or are even a good idea.
-	  The thought is that release documentation for the implementation
-	  would be the best means of exposing this information.
-	  Unless new arguments are presented, I intend to remove this
-	  function in the next revision.
-	</issue>
+        <issue>There is strong opposition to this function.  The concern is
+          that it would be difficult or impossible to provide meaningful
+          numbers, as the amount of impact is conditional on many factors
+          that a single number could not represent.  There is doubt that
+          conditional implementations would be used or are even a good idea.
+          The thought is that release documentation for the implementation
+          would be the best means of exposing this information.
+          Unless new arguments are presented, I intend to remove this
+          function in the next revision.
+        </issue>
         <p/>
         Return via the <paramlink id="time_impact_ptr"></paramlink> and
         <paramlink id="space_impact_ptr"></paramlink> an estimate of the impact
         of adding the capabilities pointed to by
         <paramlink id="capabilities_ptr"></paramlink>.
@@ -10466,29 +10460,29 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="capabilities_ptr">
-	  <inptr><struct>jvmtiCapabilities</struct></inptr>
-	  <description>
-	    points to the <jvmti/> capabilities to evaluate.
-	  </description>
-	</param>
+          <inptr><struct>jvmtiCapabilities</struct></inptr>
+          <description>
+            points to the <jvmti/> capabilities to evaluate.
+          </description>
+        </param>
         <param id="time_impact_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the estimated percentage increase in
-	    run time if this capability was added.
-	  </description>
-	</param>
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the estimated percentage increase in
+            run time if this capability was added.
+          </description>
+        </param>
         <param id="space_impact_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the estimated percentage increase in
-	    memory space used if this capability was added.
-	  </description>
-	</param>
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the estimated percentage increase in
+            memory space used if this capability was added.
+          </description>
+        </param>
       </parameters>
       <errors>
         <error id="JVMTI_ERROR_NOT_AVAILABLE">
           The desired capabilities are not even potentially available.
         </error>
@@ -10513,15 +10507,15 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="capabilities_ptr">
-	  <inptr><struct>jvmtiCapabilities</struct></inptr>
-	  <description>
-	    Points to the <jvmti/> capabilities to add.
-	  </description>
-	</param>
+          <inptr><struct>jvmtiCapabilities</struct></inptr>
+          <description>
+            Points to the <jvmti/> capabilities to add.
+          </description>
+        </param>
       </parameters>
       <errors>
         <error id="JVMTI_ERROR_NOT_AVAILABLE">
           The desired capabilities are not even potentially available.
         </error>
@@ -10533,17 +10527,17 @@
       <synopsis>Relinquish Capabilities</synopsis>
       <description>
         Relinquish the capabilities
         whose values are set to one (<code>1</code>) in
         <code>*</code><paramlink id="capabilities_ptr"></paramlink>.
-	Some implementations may allow only one environment to have a capability
-	(see the <internallink id="capability">capability introduction</internallink>).
-	This function releases capabilities
-	so that they may be used by other agents.
+        Some implementations may allow only one environment to have a capability
+        (see the <internallink id="capability">capability introduction</internallink>).
+        This function releases capabilities
+        so that they may be used by other agents.
         All other capabilities are retained.
         The capability will no longer be present in <functionlink id="GetCapabilities"></functionlink>.
-	Attempting to relinquish a capability that the agent does not possess is not an error.
+        Attempting to relinquish a capability that the agent does not possess is not an error.
           <issue>
             It is possible for the agent to be actively using capabilities
             which are being relinquished.  For example, a thread is currently
             suspended and can_suspend is being relinquished or an event is currently
             enabled and can_generate_whatever is being relinquished.
@@ -10559,15 +10553,15 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="capabilities_ptr">
-	  <inptr><struct>jvmtiCapabilities</struct></inptr>
-	  <description>
-	    Points to the <jvmti/> capabilities to relinquish.
-	  </description>
-	</param>
+          <inptr><struct>jvmtiCapabilities</struct></inptr>
+          <description>
+            Points to the <jvmti/> capabilities to relinquish.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -10594,15 +10588,15 @@
       <origin>jvmdiClone</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="capabilities_ptr">
-	  <outptr><struct>jvmtiCapabilities</struct></outptr>
-	  <description>
-	    On return, points to the <jvmti/> capabilities.
-	  </description>
-	</param>
+          <outptr><struct>jvmtiCapabilities</struct></outptr>
+          <description>
+            On return, points to the <jvmti/> capabilities.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -10610,69 +10604,69 @@
 
 
   <category id="timers" label="Timers">
 
       <intro>
-	These functions provide timing information.
-	The resolution at which the time is updated is not specified.
-	They provides nanosecond precision, but not necessarily nanosecond accuracy.
-	Details about the timers, such as their maximum values, can be accessed with
-	the timer information functions.
+        These functions provide timing information.
+        The resolution at which the time is updated is not specified.
+        They provides nanosecond precision, but not necessarily nanosecond accuracy.
+        Details about the timers, such as their maximum values, can be accessed with
+        the timer information functions.
       </intro>
 
       <typedef id="jvmtiTimerInfo" label="Timer Info">
         <description>
           The information function for each timer returns this data structure.
         </description>
-	<field id="max_value">
-	  <jlong/>
-	    <description>
-	      The maximum value the timer can reach.
-	      After this value is reached the timer wraps back to zero.
+        <field id="max_value">
+          <jlong/>
+            <description>
+              The maximum value the timer can reach.
+              After this value is reached the timer wraps back to zero.
               This is an unsigned value.  If tested or printed as a jlong (signed value)
               it may appear to be a negative number.
-	    </description>
-	</field>
-	<field id="may_skip_forward">
-	  <jboolean/>
-	  <description>
-	    If true, the timer can be externally adjusted and as a result skip forward.
-	    If false, the timer value will never increase faster than real time.
-	  </description>
-	</field>
-	<field id="may_skip_backward">
-	  <jboolean/>
-	  <description>
-	    If true, the timer can be externally adjusted and as a result skip backward.
-	    If false, the timer value will be monotonically increasing.
-	  </description>
-	</field>
-	<field id="kind">
-	  <enum>jvmtiTimerKind</enum>
-	  <description>
-	    The kind of timer.
+            </description>
+        </field>
+        <field id="may_skip_forward">
+          <jboolean/>
+          <description>
+            If true, the timer can be externally adjusted and as a result skip forward.
+            If false, the timer value will never increase faster than real time.
+          </description>
+        </field>
+        <field id="may_skip_backward">
+          <jboolean/>
+          <description>
+            If true, the timer can be externally adjusted and as a result skip backward.
+            If false, the timer value will be monotonically increasing.
+          </description>
+        </field>
+        <field id="kind">
+          <enum>jvmtiTimerKind</enum>
+          <description>
+            The kind of timer.
             On a platform that does not distinguish between user and system time, <datalink
                  id="JVMTI_TIMER_TOTAL_CPU"><code>JVMTI_TIMER_TOTAL_CPU</code></datalink>
             is returned.
-	  </description>
-	</field>
-	<field id="reserved1">
-	  <jlong/>
-	    <description>
-	      Reserved for future use.
-	    </description>
-	</field>
-	<field id="reserved2">
-	  <jlong/>
-	    <description>
-	      Reserved for future use.
-	    </description>
-	</field>
+          </description>
+        </field>
+        <field id="reserved1">
+          <jlong/>
+            <description>
+              Reserved for future use.
+            </description>
+        </field>
+        <field id="reserved2">
+          <jlong/>
+            <description>
+              Reserved for future use.
+            </description>
+        </field>
       </typedef>
 
       <intro>
-	Where the timer kind is --
+        Where the timer kind is --
 
         <constants id="jvmtiTimerKind" label="Timer Kinds" kind="enum">
           <constant id="JVMTI_TIMER_USER_CPU" num="30">
             CPU time that a thread is in user mode.
           </constant>
@@ -10686,14 +10680,14 @@
       </intro>
 
     <function id="GetCurrentThreadCpuTimerInfo" callbacksafe="safe"  impl="innative notrace" phase="start" num="134">
       <synopsis>Get Current Thread CPU Timer Information</synopsis>
       <description>
-	Get information about the
+        Get information about the
         <functionlink id="GetCurrentThreadCpuTime"/> timer.
-	The fields of the <datalink id="jvmtiTimerInfo"/> structure
-	are filled in with details about the timer.
+        The fields of the <datalink id="jvmtiTimerInfo"/> structure
+        are filled in with details about the timer.
         This information is specific to the platform and the implementation of
         <functionlink id="GetCurrentThreadCpuTime"/> and thus
         does not vary by thread nor does it vary
         during a particular invocation of the VM.
         <p/>
@@ -10703,22 +10697,22 @@
         and <functionlink id="GetThreadCpuTimerInfo"/>
         may differ -- see <functionlink id="GetCurrentThreadCpuTime"/> for more information.
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_get_current_thread_cpu_time">
-	    Can get current thread CPU time.
-	</required>
+        <required id="can_get_current_thread_cpu_time">
+            Can get current thread CPU time.
+        </required>
       </capabilities>
       <parameters>
-	<param id="info_ptr">
-	  <outptr><struct>jvmtiTimerInfo</struct></outptr>
-	  <description>
-	    On return, filled with information describing the time
-	    returned by <functionlink id="GetCurrentThreadCpuTime"/>.
-	  </description>
-	</param>
+        <param id="info_ptr">
+          <outptr><struct>jvmtiTimerInfo</struct></outptr>
+          <description>
+            On return, filled with information describing the time
+            returned by <functionlink id="GetCurrentThreadCpuTime"/>.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -10741,46 +10735,46 @@
   GetThreadCpuTime(env, NULL, nanos_ptr)
 </example>
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_get_current_thread_cpu_time">
-	    Can get current thread CPU time.
+        <required id="can_get_current_thread_cpu_time">
+            Can get current thread CPU time.
             <p/>
-	    If this capability is enabled after threads have started,
-	    the implementation may choose any time up
-	    to and including the time that the capability is enabled
-	    as the point where CPU time collection starts.
+            If this capability is enabled after threads have started,
+            the implementation may choose any time up
+            to and including the time that the capability is enabled
+            as the point where CPU time collection starts.
             <p/>
             This capability must be potentially available on any
             platform where
             <internallink id="jvmtiCapabilities.can_get_thread_cpu_time"><code>can_get_thread_cpu_time</code></internallink>
             is potentially available.
-	</required>
+        </required>
       </capabilities>
       <parameters>
         <param id="nanos_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    On return, points to the CPU time used by this thread
-	    in nanoseconds.
+          <outptr><jlong/></outptr>
+          <description>
+            On return, points to the CPU time used by this thread
+            in nanoseconds.
             This is an unsigned value.  If tested or printed as a jlong (signed value)
             it may appear to be a negative number.
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetThreadCpuTimerInfo" num="136">
       <synopsis>Get Thread CPU Timer Information</synopsis>
       <description>
-	Get information about the
+        Get information about the
         <functionlink id="GetThreadCpuTime"/> timer.
-	The fields of the <datalink id="jvmtiTimerInfo"/> structure
-	are filled in with details about the timer.
+        The fields of the <datalink id="jvmtiTimerInfo"/> structure
+        are filled in with details about the timer.
         This information is specific to the platform and the implementation of
         <functionlink id="GetThreadCpuTime"/> and thus
         does not vary by thread nor does it vary
         during a particular invocation of the VM.
         <p/>
@@ -10790,87 +10784,87 @@
         and <code>GetThreadCpuTimerInfo</code>
         may differ -- see <functionlink id="GetCurrentThreadCpuTime"/> for more information.
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_get_thread_cpu_time">
-	    Can get thread CPU time.
-	</required>
+        <required id="can_get_thread_cpu_time">
+            Can get thread CPU time.
+        </required>
       </capabilities>
       <parameters>
-	<param id="info_ptr">
-	  <outptr><struct>jvmtiTimerInfo</struct></outptr>
-	  <description>
-	    On return, filled with information describing the time
-	    returned by <functionlink id="GetThreadCpuTime"/>.
-	  </description>
-	</param>
+        <param id="info_ptr">
+          <outptr><struct>jvmtiTimerInfo</struct></outptr>
+          <description>
+            On return, filled with information describing the time
+            returned by <functionlink id="GetThreadCpuTime"/>.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetThreadCpuTime" num="137">
       <synopsis>Get Thread CPU Time</synopsis>
       <description>
           Return the CPU time utilized by the specified thread.
           <p/>
-	  Get information about this timer with
+          Get information about this timer with
           <functionlink id="GetThreadCpuTimerInfo"/>.
       </description>
       <origin>new</origin>
       <capabilities>
-	<required id="can_get_thread_cpu_time">
-	    Can get thread CPU time.
+        <required id="can_get_thread_cpu_time">
+            Can get thread CPU time.
             <p/>
-	    If this capability is enabled after threads have started,
-	    the implementation may choose any time up
-	    to and including the time that the capability is enabled
-	    as the point where CPU time collection starts.
-	</required>
-      </capabilities>
-      <parameters>
-	<param id="thread">
-	  <jthread null="current"/>
-	    <description>
-	      The thread to query.
-	    </description>
-	</param>
+            If this capability is enabled after threads have started,
+            the implementation may choose any time up
+            to and including the time that the capability is enabled
+            as the point where CPU time collection starts.
+        </required>
+      </capabilities>
+      <parameters>
+        <param id="thread">
+          <jthread null="current"/>
+            <description>
+              The thread to query.
+            </description>
+        </param>
         <param id="nanos_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    On return, points to the CPU time used by the specified thread
-	    in nanoseconds.
+          <outptr><jlong/></outptr>
+          <description>
+            On return, points to the CPU time used by the specified thread
+            in nanoseconds.
             This is an unsigned value.  If tested or printed as a jlong (signed value)
             it may appear to be a negative number.
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetTimerInfo" phase="any" callbacksafe="safe" num="138">
       <synopsis>Get Timer Information</synopsis>
       <description>
-	Get information about the
+        Get information about the
         <functionlink id="GetTime"/> timer.
-	The fields of the <datalink id="jvmtiTimerInfo"/> structure
-	are filled in with details about the timer.
+        The fields of the <datalink id="jvmtiTimerInfo"/> structure
+        are filled in with details about the timer.
         This information will not change during a particular invocation of the VM.
       </description>
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
-	<param id="info_ptr">
-	  <outptr><struct>jvmtiTimerInfo</struct></outptr>
-	  <description>
-	    On return, filled with information describing the time
-	    returned by <functionlink id="GetTime"/>.
-	  </description>
-	</param>
+        <param id="info_ptr">
+          <outptr><struct>jvmtiTimerInfo</struct></outptr>
+          <description>
+            On return, filled with information describing the time
+            returned by <functionlink id="GetTime"/>.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -10883,25 +10877,25 @@
           arbitrary time (perhaps in the future, so values may be
           negative).  This function provides nanosecond precision, but not
           necessarily nanosecond accuracy. No guarantees are made about
           how frequently values change.
           <p/>
-	  Get information about this timer with
+          Get information about this timer with
           <functionlink id="GetTimerInfo"/>.
       </description>
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="nanos_ptr">
-	  <outptr><jlong/></outptr>
-	  <description>
-	    On return, points to the time in nanoseconds.
+          <outptr><jlong/></outptr>
+          <description>
+            On return, points to the time in nanoseconds.
             This is an unsigned value.  If tested or printed as a jlong (signed value)
             it may appear to be a negative number.
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -10917,16 +10911,16 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="processor_count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the maximum number of processors available to the
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the maximum number of processors available to the
             virtual machine; never smaller than one.
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -10944,22 +10938,22 @@
       <synopsis>Add To Bootstrap Class Loader Search</synopsis>
       <description>
           This function can be used to cause instrumentation classes to be defined by the
           bootstrap class loader. See <vmspec chapter="5.3.1"/>.
           After the bootstrap
-	  class loader unsuccessfully searches for a class, the specified platform-dependent
-	  search path <paramlink id="segment"/> will be searched as well. Only one segment may be specified in
-	  the <paramlink id="segment"/>. This function may be called multiple times to add multiple segments,
-	  the segments will be searched in the order that this function was called.
-	  <p/>
-	  In the <code>OnLoad</code> phase the function may be used to specify any platform-dependent
-	  search path segment to be searched after the bootstrap class loader unsuccessfully searches
-	  for a class. The segment is typically a directory or JAR file.
-	  <p/>
-	  In the live phase the <paramlink id="segment"/> may be used to specify any platform-dependent
-	  path to a <externallink id="jar/jar.html">
-	  JAR file</externallink>. The agent should take care that the JAR file does not
+          class loader unsuccessfully searches for a class, the specified platform-dependent
+          search path <paramlink id="segment"/> will be searched as well. Only one segment may be specified in
+          the <paramlink id="segment"/>. This function may be called multiple times to add multiple segments,
+          the segments will be searched in the order that this function was called.
+          <p/>
+          In the <code>OnLoad</code> phase the function may be used to specify any platform-dependent
+          search path segment to be searched after the bootstrap class loader unsuccessfully searches
+          for a class. The segment is typically a directory or JAR file.
+          <p/>
+          In the live phase the <paramlink id="segment"/> may be used to specify any platform-dependent
+          path to a <externallink id="jar/jar.html">
+          JAR file</externallink>. The agent should take care that the JAR file does not
           contain any classes or resources other than those to be defined by the bootstrap
           class loader for the purposes of instrumentation.
           <p/>
           <vmspec/> specifies that a subsequent attempt to resolve a symbolic
           reference that the Java virtual machine has previously unsuccessfully attempted
@@ -10972,16 +10966,16 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="segment">
-	  <inbuf><char/></inbuf>
-	  <description>
-	    The platform-dependent search path segment, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
+          <inbuf><char/></inbuf>
+          <description>
+            The platform-dependent search path segment, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
       </parameters>
       <errors>
         <error id="JVMTI_ERROR_ILLEGAL_ARGUMENT">
           <paramlink id="segment"/> is an invalid path. In the live phase, anything other than an
            existing JAR file is an invalid path.
@@ -10990,32 +10984,32 @@
     </function>
 
     <function id="AddToSystemClassLoaderSearch" jkernel="yes" phase="onload" num="151" since="1.1">
       <synopsis>Add To System Class Loader Search</synopsis>
       <description>
-	  This function can be used to cause instrumentation classes to be
-	  defined by the system class loader. See <vmspec chapter="5.3.2"/>.
-	  After the class loader unsuccessfully searches for a class, the specified platform-dependent search
-	  path <paramlink id="segment"/> will be searched as well. Only one segment may be specified in the
-	  <paramlink id="segment"/>. This function may be called multiple times to add multiple segments, the
-	  segments will be searched in the order that this function was called.
-	  <p/>
-	  In the <code>OnLoad</code> phase the function may be used to specify any platform-dependent
-	  search path segment to be searched after the system class loader unsuccessfully searches
-	  for a class. The segment is typically a directory or JAR file.
-	  <p/>
-	  In the live phase the <paramlink id="segment"/> is a platform-dependent path to a
-	  <externallink id="jar/jar.html">JAR file</externallink> to be
-	  searched after the system class loader unsuccessfully searches for a class. The agent should
+          This function can be used to cause instrumentation classes to be
+          defined by the system class loader. See <vmspec chapter="5.3.2"/>.
+          After the class loader unsuccessfully searches for a class, the specified platform-dependent search
+          path <paramlink id="segment"/> will be searched as well. Only one segment may be specified in the
+          <paramlink id="segment"/>. This function may be called multiple times to add multiple segments, the
+          segments will be searched in the order that this function was called.
+          <p/>
+          In the <code>OnLoad</code> phase the function may be used to specify any platform-dependent
+          search path segment to be searched after the system class loader unsuccessfully searches
+          for a class. The segment is typically a directory or JAR file.
+          <p/>
+          In the live phase the <paramlink id="segment"/> is a platform-dependent path to a
+          <externallink id="jar/jar.html">JAR file</externallink> to be
+          searched after the system class loader unsuccessfully searches for a class. The agent should
           take care that the JAR file does not contain any classes or resources other than those to be
           defined by the system class loader for the purposes of instrumentation.
           <p/>
-	  In the live phase the system class loader supports adding a JAR file to be searched if
+          In the live phase the system class loader supports adding a JAR file to be searched if
           the system class loader implements a method name <code>appendToClassPathForInstrumentation</code>
-	  which takes a single parameter of type <code>java.lang.String</code>. The method is not required
-	  to have <code>public</code> access.
-	  <p/>
+          which takes a single parameter of type <code>java.lang.String</code>. The method is not required
+          to have <code>public</code> access.
+          <p/>
           <vmspec/> specifies that a subsequent attempt to resolve a symbolic
           reference that the Java virtual machine has previously unsuccessfully attempted
           to resolve always fails with the same error that was thrown as a result of the
           initial resolution attempt. Consequently, if the JAR file contains an entry
           that corresponds to a class for which the Java virtual machine has
@@ -11033,17 +11027,17 @@
             <internallink id="mUTF">modified UTF-8</internallink> string.
           </description>
         </param>
       </parameters>
       <errors>
-	<error id="JVMTI_ERROR_ILLEGAL_ARGUMENT">
+        <error id="JVMTI_ERROR_ILLEGAL_ARGUMENT">
           <paramlink id="segment"/> is an invalid path. In the live phase, anything other than an
            existing JAR file is an invalid path.
         </error>
-	<error id="JVMTI_ERROR_CLASS_LOADER_UNSUPPORTED">
-	  Operation not supported by the system class loader.
-	</error>
+        <error id="JVMTI_ERROR_CLASS_LOADER_UNSUPPORTED">
+          Operation not supported by the system class loader.
+        </error>
       </errors>
     </function>
 
   </category>
 
@@ -11056,11 +11050,11 @@
 
     <function id="GetSystemProperties" phase="onload" num="130">
       <synopsis>Get System Properties</synopsis>
       <description>
         The list of VM system property keys which may be used with
-	<functionlink id="GetSystemProperty"/> is returned.
+        <functionlink id="GetSystemProperty"/> is returned.
         It is strongly recommended that virtual machines provide the
         following property keys:
         <ul>
           <li><code>java.vm.vendor</code></li>
           <li><code>java.vm.version</code></li>
@@ -11070,58 +11064,58 @@
           <li><code>java.class.path</code></li>
         </ul>
         Provides access to system properties defined by and used
         by the VM.
         Properties set on the command-line are included.
-	This allows getting and setting of these properties
+        This allows getting and setting of these properties
         before the VM even begins executing bytecodes.
-	Since this is a VM view of system properties, the set of available
+        Since this is a VM view of system properties, the set of available
         properties will usually be different than that
-	in <code>java.lang.System.getProperties</code>.
+        in <code>java.lang.System.getProperties</code>.
         JNI method invocation may be used to access
         <code>java.lang.System.getProperties</code>.
         <p/>
         The set of properties may grow during execution.
       </description>
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="count_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the number of property keys returned.
-	  </description>
-	</param>
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the number of property keys returned.
+          </description>
+        </param>
         <param id="property_ptr">
-	  <allocallocbuf outcount="count_ptr"><char/></allocallocbuf>
-	  <description>
-	    On return, points to an array of property keys, encoded as
-	    <internallink id="mUTF">modified UTF-8</internallink> strings.
-	  </description>
-	</param>
+          <allocallocbuf outcount="count_ptr"><char/></allocallocbuf>
+          <description>
+            On return, points to an array of property keys, encoded as
+            <internallink id="mUTF">modified UTF-8</internallink> strings.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="GetSystemProperty" phase="onload" num="131">
       <synopsis>Get System Property</synopsis>
       <description>
         Return a VM system property value given the property key.
         <p/>
-	The function <functionlink id="GetSystemProperties"/>
-	returns the set of property keys which may be used.
+        The function <functionlink id="GetSystemProperties"/>
+        returns the set of property keys which may be used.
         The properties which can be retrieved may grow during
-	execution.
+        execution.
         <p/>
-	Since this is a VM view of system properties, the values
+        Since this is a VM view of system properties, the values
         of properties may differ from that returned by
-	<code>java.lang.System.getProperty(String)</code>.
+        <code>java.lang.System.getProperty(String)</code>.
         A typical VM might copy the values of the VM system
         properties into the <code>Properties</code> held by
-	<code>java.lang.System</code> during the initialization
+        <code>java.lang.System</code> during the initialization
         of that class. Thereafter any changes to the VM system
         properties (with <functionlink id="SetSystemProperty"/>)
         or the <code>java.lang.System</code> system properties
         (with <code>java.lang.System.setProperty(String,String)</code>)
         would cause the values to diverge.
@@ -11131,65 +11125,65 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="property">
-	  <inbuf><char/></inbuf>
-	  <description>
-	    The key of the property to retrieve, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
+          <inbuf><char/></inbuf>
+          <description>
+            The key of the property to retrieve, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
         <param id="value_ptr">
-	  <allocbuf><char/></allocbuf>
-	  <description>
-	    On return, points to the property value, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
+          <allocbuf><char/></allocbuf>
+          <description>
+            On return, points to the property value, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
       </parameters>
       <errors>
         <error id="JVMTI_ERROR_NOT_AVAILABLE">
           This property is not available.
-	  Use <functionlink id="GetSystemProperties"/> to find available properties.
+          Use <functionlink id="GetSystemProperties"/> to find available properties.
         </error>
       </errors>
     </function>
 
     <function id="SetSystemProperty" phase="onloadOnly" num="132">
       <synopsis>Set System Property</synopsis>
       <description>
         Set a VM system property value.
         <p/>
-	The function <functionlink id="GetSystemProperties"/>
-	returns the set of property keys, some of these may be settable.
+        The function <functionlink id="GetSystemProperties"/>
+        returns the set of property keys, some of these may be settable.
         See <functionlink id="GetSystemProperty"/>.
       </description>
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="property">
-	  <inbuf><char/></inbuf>
-	  <description>
-	    The key of the property, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
+          <inbuf><char/></inbuf>
+          <description>
+            The key of the property, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
         <param id="value_ptr">
-	  <inbuf>
-	    <char/>
-	    <nullok>
-	      do not set the value, but return <errorlink id="JVMTI_ERROR_NOT_AVAILABLE"/>
-	      if the property is not writeable
-	    </nullok>
-	  </inbuf>
-	  <description>
-	    The property value to set, encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
-	  </description>
-	</param>
+          <inbuf>
+            <char/>
+            <nullok>
+              do not set the value, but return <errorlink id="JVMTI_ERROR_NOT_AVAILABLE"/>
+              if the property is not writeable
+            </nullok>
+          </inbuf>
+          <description>
+            The property value to set, encoded as a
+            <internallink id="mUTF">modified UTF-8</internallink> string.
+          </description>
+        </param>
       </parameters>
       <errors>
         <error id="JVMTI_ERROR_NOT_AVAILABLE">
           This property is not available or is not writeable.
         </error>
@@ -11257,15 +11251,15 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="phase_ptr">
-	  <outptr><enum>jvmtiPhase</enum></outptr>
-	  <description>
-	    On return, points to the phase.
-	  </description>
-	</param>
+          <outptr><enum>jvmtiPhase</enum></outptr>
+          <description>
+            On return, points to the phase.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -11274,13 +11268,13 @@
       <description>
         Shutdown a <jvmti/> connection created with JNI <code>GetEnv</code>
         (see <internallink id="environments"><jvmti/> Environments</internallink>).
         Dispose of any resources held by the environment.
         <issue>
-	    What resources are reclaimed? What is undone?
-	    Breakpoints,watchpoints removed?
-	</issue>
+            What resources are reclaimed? What is undone?
+            Breakpoints,watchpoints removed?
+        </issue>
         Threads suspended by this environment are not resumed by this call,
         this must be done explicitly by the agent.
         Memory allocated by this environment via calls to <jvmti/> functions
         is not released, this can be done explicitly by the agent
         by calling <functionlink id="Deallocate"/>.
@@ -11316,36 +11310,36 @@
     </function>
 
     <function id="SetEnvironmentLocalStorage" jkernel="yes" phase="any" callbacksafe="safe" impl="innative notrace" num="148">
       <synopsis>Set Environment Local Storage</synopsis>
       <description>
-	The VM stores a pointer value associated with each environment.
-	This pointer value is called <i>environment-local storage</i>.
+        The VM stores a pointer value associated with each environment.
+        This pointer value is called <i>environment-local storage</i>.
         This value is <code>NULL</code> unless set with this function.
-	Agents can allocate memory in which they store environment specific
+        Agents can allocate memory in which they store environment specific
         information. By setting environment-local storage it can then be
-	accessed with
-	<functionlink id="GetEnvironmentLocalStorage"></functionlink>.
-	<p/>
+        accessed with
+        <functionlink id="GetEnvironmentLocalStorage"></functionlink>.
+        <p/>
         Called by the agent to set the value of the <jvmti/>
         environment-local storage. <jvmti/> supplies to the agent a pointer-size
         environment-local storage that can be used to record per-environment
         information.
       </description>
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="data">
-	  <inbuf>
-	    <void/>
-	    <nullok>value is set to <code>NULL</code></nullok>
-	  </inbuf>
-	  <description>
-	    The value to be entered into the environment-local storage.
-	  </description>
-	</param>
+          <inbuf>
+            <void/>
+            <nullok>value is set to <code>NULL</code></nullok>
+          </inbuf>
+          <description>
+            The value to be entered into the environment-local storage.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -11358,19 +11352,19 @@
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="data_ptr">
-	  <agentbuf><void/></agentbuf>
-	  <description>
-	    Pointer through which the value of the environment local
-	    storage is returned.
-	    If environment-local storage has not been set with
-	    <functionlink id="SetEnvironmentLocalStorage"></functionlink> returned
-	    pointer is <code>NULL</code>.
-	  </description>
-	</param>
+          <agentbuf><void/></agentbuf>
+          <description>
+            Pointer through which the value of the environment local
+            storage is returned.
+            If environment-local storage has not been set with
+            <functionlink id="SetEnvironmentLocalStorage"></functionlink> returned
+            pointer is <code>NULL</code>.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -11379,58 +11373,58 @@
       <description>
         Return the <jvmti/> version via <code>version_ptr</code>.
         The return value is the version identifier.
         The version identifier includes major, minor and micro
         version as well as the interface type.
-	<constants id="jvmtiVersionInterfaceTypes" label="Version Interface Types" kind="bits">
-	  <constant id="JVMTI_VERSION_INTERFACE_JNI" num="0x00000000">
-	    Value of <code>JVMTI_VERSION_MASK_INTERFACE_TYPE</code> for JNI.
-	  </constant>
-	  <constant id="JVMTI_VERSION_INTERFACE_JVMTI" num="0x30000000">
-	    Value of <code>JVMTI_VERSION_MASK_INTERFACE_TYPE</code> for <jvmti/>.
-	  </constant>
-	</constants>
-	<constants id="jvmtiVersionMasks" label="Version Masks" kind="bits">
-	  <constant id="JVMTI_VERSION_MASK_INTERFACE_TYPE" num="0x70000000">
-	    Mask to extract interface type.
-	    The value of the version returned by this function masked with
-	    <code>JVMTI_VERSION_MASK_INTERFACE_TYPE</code> is always
+        <constants id="jvmtiVersionInterfaceTypes" label="Version Interface Types" kind="bits">
+          <constant id="JVMTI_VERSION_INTERFACE_JNI" num="0x00000000">
+            Value of <code>JVMTI_VERSION_MASK_INTERFACE_TYPE</code> for JNI.
+          </constant>
+          <constant id="JVMTI_VERSION_INTERFACE_JVMTI" num="0x30000000">
+            Value of <code>JVMTI_VERSION_MASK_INTERFACE_TYPE</code> for <jvmti/>.
+          </constant>
+        </constants>
+        <constants id="jvmtiVersionMasks" label="Version Masks" kind="bits">
+          <constant id="JVMTI_VERSION_MASK_INTERFACE_TYPE" num="0x70000000">
+            Mask to extract interface type.
+            The value of the version returned by this function masked with
+            <code>JVMTI_VERSION_MASK_INTERFACE_TYPE</code> is always
             <code>JVMTI_VERSION_INTERFACE_JVMTI</code>
             since this is a <jvmti/> function.
-	  </constant>
-	  <constant id="JVMTI_VERSION_MASK_MAJOR" num="0x0FFF0000">
-	    Mask to extract major version number.
-	  </constant>
-	  <constant id="JVMTI_VERSION_MASK_MINOR" num="0x0000FF00">
-	    Mask to extract minor version number.
-	  </constant>
-	  <constant id="JVMTI_VERSION_MASK_MICRO" num="0x000000FF">
-	    Mask to extract micro version number.
-	  </constant>
-	</constants>
-	<constants id="jvmtiVersionShifts" label="Version Shifts" kind="bits">
-	  <constant id="JVMTI_VERSION_SHIFT_MAJOR" num="16">
-	    Shift to extract major version number.
-	  </constant>
-	  <constant id="JVMTI_VERSION_SHIFT_MINOR" num="8">
-	    Shift to extract minor version number.
-	  </constant>
-	  <constant id="JVMTI_VERSION_SHIFT_MICRO" num="0">
-	    Shift to extract micro version number.
-	  </constant>
-	</constants>
+          </constant>
+          <constant id="JVMTI_VERSION_MASK_MAJOR" num="0x0FFF0000">
+            Mask to extract major version number.
+          </constant>
+          <constant id="JVMTI_VERSION_MASK_MINOR" num="0x0000FF00">
+            Mask to extract minor version number.
+          </constant>
+          <constant id="JVMTI_VERSION_MASK_MICRO" num="0x000000FF">
+            Mask to extract micro version number.
+          </constant>
+        </constants>
+        <constants id="jvmtiVersionShifts" label="Version Shifts" kind="bits">
+          <constant id="JVMTI_VERSION_SHIFT_MAJOR" num="16">
+            Shift to extract major version number.
+          </constant>
+          <constant id="JVMTI_VERSION_SHIFT_MINOR" num="8">
+            Shift to extract minor version number.
+          </constant>
+          <constant id="JVMTI_VERSION_SHIFT_MICRO" num="0">
+            Shift to extract micro version number.
+          </constant>
+        </constants>
       </description>
       <origin>jvmdi</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="version_ptr">
-	  <outptr><jint/></outptr>
-	  <description>
-	    On return, points to the <jvmti/> version.
-	  </description>
-	</param>
+          <outptr><jint/></outptr>
+          <description>
+            On return, points to the <jvmti/> version.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -11439,75 +11433,75 @@
       <synopsis>Get Error Name</synopsis>
       <description>
         Return the symbolic name for an
           <internallink id="ErrorSection">error code</internallink>.
         <p/>
-	For example
+        For example
         <code>GetErrorName(env, JVMTI_ERROR_NONE, &amp;err_name)</code>
         would return in <code>err_name</code> the string
         <code>"JVMTI_ERROR_NONE"</code>.
       </description>
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="error">
-	  <enum>jvmtiError</enum>
-	  <description>
-	    The error code.
-	  </description>
-	</param>
+          <enum>jvmtiError</enum>
+          <description>
+            The error code.
+          </description>
+        </param>
         <param id="name_ptr">
-	  <allocbuf><char/></allocbuf>
-	  <description>
-	    On return, points to the error name.
+          <allocbuf><char/></allocbuf>
+          <description>
+            On return, points to the error name.
             The name is encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string,
+            <internallink id="mUTF">modified UTF-8</internallink> string,
             but is restricted to the ASCII subset.
-	  </description>
-	</param>
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
     <function id="SetVerboseFlag" phase="any" num="150">
       <synopsis>Set Verbose Flag</synopsis>
       <description>
-	<constants id="jvmtiVerboseFlag" label="Verbose Flag Enumeration" kind="enum">
-	  <constant id="JVMTI_VERBOSE_OTHER" num="0">
-	    Verbose output other than the below.
-	  </constant>
-	  <constant id="JVMTI_VERBOSE_GC" num="1">
-	    Verbose garbage collector output, like that specified with <code>-verbose:gc</code>.
-	  </constant>
-	  <constant id="JVMTI_VERBOSE_CLASS" num="2">
-	    Verbose class loading output, like that specified with <code>-verbose:class</code>.
-	  </constant>
-	  <constant id="JVMTI_VERBOSE_JNI" num="4">
-	    Verbose JNI output, like that specified with <code>-verbose:jni</code>.
-	  </constant>
+        <constants id="jvmtiVerboseFlag" label="Verbose Flag Enumeration" kind="enum">
+          <constant id="JVMTI_VERBOSE_OTHER" num="0">
+            Verbose output other than the below.
+          </constant>
+          <constant id="JVMTI_VERBOSE_GC" num="1">
+            Verbose garbage collector output, like that specified with <code>-verbose:gc</code>.
+          </constant>
+          <constant id="JVMTI_VERBOSE_CLASS" num="2">
+            Verbose class loading output, like that specified with <code>-verbose:class</code>.
+          </constant>
+          <constant id="JVMTI_VERBOSE_JNI" num="4">
+            Verbose JNI output, like that specified with <code>-verbose:jni</code>.
+          </constant>
         </constants>
-	Control verbose output.
-	This is the output which typically is sent to <code>stderr</code>.
+        Control verbose output.
+        This is the output which typically is sent to <code>stderr</code>.
       </description>
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="flag">
-	  <enum>jvmtiVerboseFlag</enum>
-	  <description>
-	    Which verbose flag to set.
-	  </description>
-	</param>
+          <enum>jvmtiVerboseFlag</enum>
+          <description>
+            Which verbose flag to set.
+          </description>
+        </param>
         <param id="value">
-	  <jboolean/>
-	  <description>
-	    New value of the flag.
-	  </description>
-	</param>
+          <jboolean/>
+          <description>
+            New value of the flag.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -11523,35 +11517,35 @@
         This function describes the representation of <code>jlocation</code> used in this VM.
         If the returned format is <datalink id="JVMTI_JLOCATION_JVMBCI"></datalink>,
         <code>jlocation</code>s can
         be used as in indices into the array returned by
         <functionlink id="GetBytecodes"></functionlink>.
-	<constants id="jvmtiJlocationFormat" label="JLocation Format Enumeration" kind="enum">
-	  <constant id="JVMTI_JLOCATION_JVMBCI" num="1">
-	    <code>jlocation</code> values represent virtual machine
-	    bytecode indices--that is, offsets into the
-	    virtual machine code for a method.
-	  </constant>
-	  <constant id="JVMTI_JLOCATION_MACHINEPC" num="2">
-	    <code>jlocation</code> values represent native machine
-	    program counter values.
-	  </constant>
-	  <constant id="JVMTI_JLOCATION_OTHER" num="0">
-	    <code>jlocation</code> values have some other representation.
-	  </constant>
-	</constants>
+        <constants id="jvmtiJlocationFormat" label="JLocation Format Enumeration" kind="enum">
+          <constant id="JVMTI_JLOCATION_JVMBCI" num="1">
+            <code>jlocation</code> values represent virtual machine
+            bytecode indices--that is, offsets into the
+            virtual machine code for a method.
+          </constant>
+          <constant id="JVMTI_JLOCATION_MACHINEPC" num="2">
+            <code>jlocation</code> values represent native machine
+            program counter values.
+          </constant>
+          <constant id="JVMTI_JLOCATION_OTHER" num="0">
+            <code>jlocation</code> values have some other representation.
+          </constant>
+        </constants>
       </description>
       <origin>new</origin>
       <capabilities>
       </capabilities>
       <parameters>
         <param id="format_ptr">
-	  <outptr><enum>jvmtiJlocationFormat</enum></outptr>
-	  <description>
-	    On return, points to the format identifier for <code>jlocation</code> values.
-	  </description>
-	</param>
+          <outptr><enum>jvmtiJlocationFormat</enum></outptr>
+          <description>
+            On return, points to the format identifier for <code>jlocation</code> values.
+          </description>
+        </param>
       </parameters>
       <errors>
       </errors>
     </function>
 
@@ -11560,13 +11554,13 @@
   <category id="heap_monitoring" label="Heap Monitoring">
     <function id="SetHeapSamplingInterval" phase="onload" num="156" since="11">
       <synopsis>Set Heap Sampling Interval</synopsis>
       <description>
         Generate a <eventlink id="SampledObjectAlloc"/> event when objects are allocated.
-	Each thread keeps a counter of bytes allocated. The event will only be generated
-	when that counter exceeds an average of <paramlink id="sampling_interval"></paramlink>
-	since the last sample.
+        Each thread keeps a counter of bytes allocated. The event will only be generated
+        when that counter exceeds an average of <paramlink id="sampling_interval"></paramlink>
+        since the last sample.
         <p/>
         Setting <paramlink id="sampling_interval"></paramlink> to 0 will cause an event to be
         generated by each allocation supported by the system once the new interval is taken into account.
         <p/>
         Note that updating the new sampling interval might take various number of allocations
@@ -11582,19 +11576,19 @@
         <param id="sampling_interval">
           <jint/>
           <description>
             The sampling interval in bytes. The sampler uses a statistical approach to
             generate an event, on average, once for every <paramlink id="sampling_interval"/> bytes of
-	    memory allocated by a given thread.
+            memory allocated by a given thread.
             <p/>
             Once the new sampling interval is taken into account, 0 as a sampling interval will generate
             a sample for every allocation.
             <p/>
             Note: The overhead of this feature is directly correlated with the sampling interval.
-	    A high sampling interval, such as 1024 bytes, will incur a high overhead.
-	    A lower interval, such as 1024KB, will have a much lower overhead.  Sampling should only
-	    be used with an understanding that it may impact performance.
+            A high sampling interval, such as 1024 bytes, will incur a high overhead.
+            A lower interval, such as 1024KB, will have a much lower overhead.  Sampling should only
+            be used with an understanding that it may impact performance.
           </description>
         </param>
       </parameters>
       <errors>
         <error id="JVMTI_ERROR_ILLEGAL_ARGUMENT">
@@ -11838,18 +11832,18 @@
     the individual event descriptions for further
     suggestions.
     <p/>
     <ul>
       <li>Any exception thrown during the execution of an event callback can
-	overwrite any current pending exception in the current application thread.
-	Care must be taken to preserve a pending exception
-	when an event callback makes a JNI call that might generate an exception.
+        overwrite any current pending exception in the current application thread.
+        Care must be taken to preserve a pending exception
+        when an event callback makes a JNI call that might generate an exception.
       </li>
       <li>Event callback functions must be re-entrant. The <jvmti/> implementation does
-	not queue events. If an agent needs to process events one at a time, it
-	can use a raw monitor inside the
-	event callback functions to serialize event processing.
+        not queue events. If an agent needs to process events one at a time, it
+        can use a raw monitor inside the
+        event callback functions to serialize event processing.
       </li>
       <li>Event callback functions that execute JNI's FindClass function to load
         classes need to note that FindClass locates the class loader associated
         with the current native method. For the purposes of class loading, an
         event callback that includes a JNI environment as a parameter to the
@@ -11885,23 +11879,23 @@
 
   <intro label="Enabling Events" id="enablingevents">
     All events are initially disabled.  In order to receive any
     event:
       <ul>
-	<li>
-	  If the event requires a capability, that capability must
-	  be added with
-	  <functionlink id="AddCapabilities"></functionlink>.
-	</li>
-	<li>
-	  A callback for the event must be set with
-	  <functionlink id="SetEventCallbacks"></functionlink>.
-	</li>
-	<li>
-	  The event must be enabled with
-	  <functionlink id="SetEventNotificationMode"></functionlink>.
-	</li>
+        <li>
+          If the event requires a capability, that capability must
+          be added with
+          <functionlink id="AddCapabilities"></functionlink>.
+        </li>
+        <li>
+          A callback for the event must be set with
+          <functionlink id="SetEventCallbacks"></functionlink>.
+        </li>
+        <li>
+          The event must be enabled with
+          <functionlink id="SetEventNotificationMode"></functionlink>.
+        </li>
       </ul>
   </intro>
 
   <intro label="Multiple Co-located Events" id="eventorder">
     In many situations it is possible for multiple events to occur
@@ -11968,11 +11962,11 @@
       for events.  It is set with the
       <functionlink id="SetEventCallbacks"></functionlink> function.
   </intro>
 
   <event label="Single Step"
-	 id="SingleStep" const="JVMTI_EVENT_SINGLE_STEP" filtered="thread" num="60">
+         id="SingleStep" const="JVMTI_EVENT_SINGLE_STEP" filtered="thread" num="60">
     <description>
       Single step events allow the agent to trace thread execution
       at the finest granularity allowed by the VM. A single step event is
       generated whenever a thread reaches a new location.
       Typically, single step events represent the completion of one VM
@@ -11997,38 +11991,38 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread about to execution a new instruction
-	  </description>
+        <jthread/>
+          <description>
+            Thread about to execution a new instruction
+          </description>
       </param>
       <param id="klass">
-	<jclass method="method"/>
-	  <description>
-	    Class of the method about to execute a new instruction
-	  </description>
+        <jclass method="method"/>
+          <description>
+            Class of the method about to execute a new instruction
+          </description>
       </param>
       <param id="method">
-	<jmethodID class="klass"/>
-	  <description>
-	    Method about to execute a new instruction
-	  </description>
+        <jmethodID class="klass"/>
+          <description>
+            Method about to execute a new instruction
+          </description>
       </param>
       <param id="location">
-	<jlocation/>
-	<description>
-	  Location of the new instruction
-	</description>
+        <jlocation/>
+        <description>
+          Location of the new instruction
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="Breakpoint"
-	 id="Breakpoint" const="JVMTI_EVENT_BREAKPOINT" filtered="thread" num="62">
+         id="Breakpoint" const="JVMTI_EVENT_BREAKPOINT" filtered="thread" num="62">
     <description>
       Breakpoint events are generated whenever a thread reaches a location
       designated as a breakpoint with <functionlink id="SetBreakpoint"></functionlink>.
       The <code>method</code> and <code>location</code>
       parameters uniquely identify the current location and allow
@@ -12046,39 +12040,39 @@
         </outptr>
           <description>
             The JNI environment of the event (current) thread.
           </description>
       </param>
-      <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread that hit the breakpoint
-	  </description>
-      </param>
+      <param id="thread">
+        <jthread/>
+          <description>
+            Thread that hit the breakpoint
+          </description>
+      </param>
       <param id="klass">
-	<jclass method="method"/>
-	  <description>
-	    Class of the method that hit the breakpoint
-	  </description>
+        <jclass method="method"/>
+          <description>
+            Class of the method that hit the breakpoint
+          </description>
       </param>
       <param id="method">
-	<jmethodID class="klass"/>
-	  <description>
-	    Method that hit the breakpoint
-	  </description>
+        <jmethodID class="klass"/>
+          <description>
+            Method that hit the breakpoint
+          </description>
       </param>
       <param id="location">
-	<jlocation/>
-	<description>
-	  location of the breakpoint
-	</description>
+        <jlocation/>
+        <description>
+          location of the breakpoint
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="Field Access"
-	 id="FieldAccess" const="JVMTI_EVENT_FIELD_ACCESS" filtered="thread" num="63">
+         id="FieldAccess" const="JVMTI_EVENT_FIELD_ACCESS" filtered="thread" num="63">
     <description>
       Field access events are generated whenever a thread accesses
       a field that was designated as a watchpoint
       with <functionlink id="SetFieldAccessWatch"></functionlink>.
       The <code>method</code> and <code>location</code>
@@ -12098,57 +12092,57 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread accessing the field
-	  </description>
+        <jthread/>
+          <description>
+            Thread accessing the field
+          </description>
       </param>
       <param id="klass">
-	<jclass method="method"/>
-	  <description>
-	    Class of the method where the access is occurring
-	  </description>
+        <jclass method="method"/>
+          <description>
+            Class of the method where the access is occurring
+          </description>
       </param>
       <param id="method">
-	<jmethodID class="klass"/>
-	  <description>
-	    Method where the access is occurring
-	  </description>
+        <jmethodID class="klass"/>
+          <description>
+            Method where the access is occurring
+          </description>
       </param>
       <param id="location">
-	<jlocation/>
-	<description>
-	  Location where the access is occurring
-	</description>
+        <jlocation/>
+        <description>
+          Location where the access is occurring
+        </description>
       </param>
       <param id="field_klass">
-	<jclass field="field"/>
-	  <description>
-	    Class of the field being accessed
-	  </description>
+        <jclass field="field"/>
+          <description>
+            Class of the field being accessed
+          </description>
       </param>
       <param id="object">
-	<jobject/>
-	  <description>
-	    Object with the field being accessed if the field is an
-	    instance field; <code>NULL</code> otherwise
-	  </description>
+        <jobject/>
+          <description>
+            Object with the field being accessed if the field is an
+            instance field; <code>NULL</code> otherwise
+          </description>
       </param>
       <param id="field">
-	<jfieldID class="field_klass"/>
-	  <description>
-	    Field being accessed
-	  </description>
+        <jfieldID class="field_klass"/>
+          <description>
+            Field being accessed
+          </description>
       </param>
     </parameters>
   </event>
 
   <event label="Field Modification"
-	 id="FieldModification" const="JVMTI_EVENT_FIELD_MODIFICATION" filtered="thread" num="64">
+         id="FieldModification" const="JVMTI_EVENT_FIELD_MODIFICATION" filtered="thread" num="64">
     <description>
       Field modification events are generated whenever a thread modifies
       a field that was designated as a watchpoint
       with <functionlink id="SetFieldModificationWatch"></functionlink>.
       The <code>method</code> and <code>location</code>
@@ -12168,69 +12162,69 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread modifying the field
-	  </description>
+        <jthread/>
+          <description>
+            Thread modifying the field
+          </description>
       </param>
       <param id="klass">
-	<jclass method="method"/>
-	  <description>
-	    Class of the method where the modification is occurring
-	  </description>
+        <jclass method="method"/>
+          <description>
+            Class of the method where the modification is occurring
+          </description>
       </param>
       <param id="method">
-	<jmethodID class="klass"/>
-	  <description>
-	    Method where the modification is occurring
-	  </description>
+        <jmethodID class="klass"/>
+          <description>
+            Method where the modification is occurring
+          </description>
       </param>
       <param id="location">
-	<jlocation/>
-	<description>
-	  Location where the modification is occurring
-	</description>
+        <jlocation/>
+        <description>
+          Location where the modification is occurring
+        </description>
       </param>
       <param id="field_klass">
-	<jclass field="field"/>
-	  <description>
-	    Class of the field being modified
-	  </description>
+        <jclass field="field"/>
+          <description>
+            Class of the field being modified
+          </description>
       </param>
       <param id="object">
-	<jobject/>
-	  <description>
-	    Object with the field being modified if the field is an
-	    instance field; <code>NULL</code> otherwise
-	  </description>
+        <jobject/>
+          <description>
+            Object with the field being modified if the field is an
+            instance field; <code>NULL</code> otherwise
+          </description>
       </param>
       <param id="field">
-	<jfieldID class="field_klass"/>
-	  <description>
-	    Field being modified
-	  </description>
+        <jfieldID class="field_klass"/>
+          <description>
+            Field being modified
+          </description>
       </param>
       <param id="signature_type">
-	<char/>
-	<description>
-	  Signature type of the new value
-	</description>
+        <char/>
+        <description>
+          Signature type of the new value
+        </description>
       </param>
       <param id="new_value">
-	<jvalue/>
-	<description>
-	  The new value
-	</description>
+        <jvalue/>
+        <description>
+          The new value
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="Frame Pop"
-	 id="FramePop" const="JVMTI_EVENT_FRAME_POP" filtered="thread" num="61">
+         id="FramePop" const="JVMTI_EVENT_FRAME_POP" filtered="thread" num="61">
     <description>
       Frame pop events are generated upon exit from a single method
       in a single frame as specified
       in a call to <functionlink id="NotifyFramePop"></functionlink>.
       This is true whether termination is caused by
@@ -12256,39 +12250,39 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread that is popping the frame
-	  </description>
+        <jthread/>
+          <description>
+            Thread that is popping the frame
+          </description>
       </param>
       <param id="klass">
-	<jclass method="method"/>
-	  <description>
-	    Class of the method being popped
-	  </description>
+        <jclass method="method"/>
+          <description>
+            Class of the method being popped
+          </description>
       </param>
       <param id="method">
-	<jmethodID class="klass"/>
-	  <description>
-	    Method being popped
-	  </description>
+        <jmethodID class="klass"/>
+          <description>
+            Method being popped
+          </description>
       </param>
       <param id="was_popped_by_exception">
-	<jboolean/>
-	<description>
-	  True if frame was popped by a thrown exception.
-	  False if method exited through its return instruction.
-	</description>
+        <jboolean/>
+        <description>
+          True if frame was popped by a thrown exception.
+          False if method exited through its return instruction.
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="Method Entry"
-	 id="MethodEntry" const="JVMTI_EVENT_METHOD_ENTRY" filtered="thread" num="65">
+         id="MethodEntry" const="JVMTI_EVENT_METHOD_ENTRY" filtered="thread" num="65">
     <description>
       Method entry events are generated upon entry of Java
       programming language methods (including native methods).
       <p/>
       The location reported by <functionlink id="GetFrameLocation"></functionlink>
@@ -12313,32 +12307,32 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread entering the method
-	  </description>
+        <jthread/>
+          <description>
+            Thread entering the method
+          </description>
       </param>
       <param id="klass">
-	<jclass method="method"/>
-	  <description>
-	    Class of the method being entered
-	  </description>
+        <jclass method="method"/>
+          <description>
+            Class of the method being entered
+          </description>
       </param>
       <param id="method">
-	<jmethodID class="klass"/>
-	  <description>
-	    Method being entered
-	  </description>
+        <jmethodID class="klass"/>
+          <description>
+            Method being entered
+          </description>
       </param>
     </parameters>
   </event>
 
   <event label="Method Exit"
-	 id="MethodExit" const="JVMTI_EVENT_METHOD_EXIT" filtered="thread" num="66">
+         id="MethodExit" const="JVMTI_EVENT_METHOD_EXIT" filtered="thread" num="66">
     <description>
       Method exit events are generated upon exit from Java
       programming language methods (including native methods).
       This is true whether termination is caused by
       executing its return instruction
@@ -12352,12 +12346,12 @@
       The location reported by <functionlink id="GetFrameLocation"></functionlink>
       identifies the executable location in the returning method
       immediately prior to the return.
       <p/>
         Enabling method
-	entry or exit events will significantly degrade performance on many platforms and is thus
-	not advised for performance critical usage (such as profiling).
+        entry or exit events will significantly degrade performance on many platforms and is thus
+        not advised for performance critical usage (such as profiling).
         <internallink id="bci">Bytecode instrumentation</internallink> should be
         used in these cases.
     </description>
     <origin>jvmdi</origin>
     <capabilities>
@@ -12371,48 +12365,48 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread exiting the method
-	  </description>
+        <jthread/>
+          <description>
+            Thread exiting the method
+          </description>
       </param>
       <param id="klass">
-	<jclass method="method"/>
-	  <description>
-	    Class of the method being exited
-	  </description>
+        <jclass method="method"/>
+          <description>
+            Class of the method being exited
+          </description>
       </param>
       <param id="method">
-	<jmethodID class="klass"/>
-	  <description>
-	    Method being exited
-	  </description>
+        <jmethodID class="klass"/>
+          <description>
+            Method being exited
+          </description>
       </param>
       <param id="was_popped_by_exception">
-	<jboolean/>
-	<description>
-	  True if frame was popped by a thrown exception.
-	  False if method exited through its return instruction.
-	</description>
+        <jboolean/>
+        <description>
+          True if frame was popped by a thrown exception.
+          False if method exited through its return instruction.
+        </description>
       </param>
       <param id="return_value">
-	<jvalue/>
-	<description>
-	  The return value of the method being exited.
-	  Undefined and should not be used if
-	  <paramlink id="was_popped_by_exception"></paramlink>
-	  is true.
-	</description>
+        <jvalue/>
+        <description>
+          The return value of the method being exited.
+          Undefined and should not be used if
+          <paramlink id="was_popped_by_exception"></paramlink>
+          is true.
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="Native Method Bind" phase="any"
-	 id="NativeMethodBind" const="JVMTI_EVENT_NATIVE_METHOD_BIND" num="67">
+         id="NativeMethodBind" const="JVMTI_EVENT_NATIVE_METHOD_BIND" num="67">
     <description>
       A Native Method Bind event is sent when a VM binds a
       Java programming language native method
       to the address of a function that implements the native method.
       This will occur when the native method is called for the first time
@@ -12440,52 +12434,52 @@
         <outptr>
           <struct>JNIEnv</struct>
         </outptr>
           <description>
             The JNI environment of the event (current) thread
-	    Will be <code>NULL</code> if sent during the primordial
+            Will be <code>NULL</code> if sent during the primordial
             <functionlink id="GetPhase">phase</functionlink>.
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread requesting the bind
-	  </description>
+        <jthread/>
+          <description>
+            Thread requesting the bind
+          </description>
       </param>
       <param id="klass">
-	<jclass method="method"/>
-	  <description>
-	    Class of the method being bound
-	  </description>
+        <jclass method="method"/>
+          <description>
+            Class of the method being bound
+          </description>
       </param>
       <param id="method">
-	<jmethodID class="klass"/>
-	  <description>
-	    Native method being bound
-	  </description>
+        <jmethodID class="klass"/>
+          <description>
+            Native method being bound
+          </description>
       </param>
       <param id="address">
-	<outptr><void/></outptr>
-	<description>
-	  The address the VM is about to bind to--that is, the
-	  address of the implementation of the native method
-	</description>
+        <outptr><void/></outptr>
+        <description>
+          The address the VM is about to bind to--that is, the
+          address of the implementation of the native method
+        </description>
       </param>
       <param id="new_address_ptr">
         <agentbuf><void/></agentbuf>
-	<description>
-	  if the referenced address is changed (that is, if
-	  <code>*new_address_ptr</code> is set), the binding
-	  will instead be made to the supplied address.
-	</description>
+        <description>
+          if the referenced address is changed (that is, if
+          <code>*new_address_ptr</code> is set), the binding
+          will instead be made to the supplied address.
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="Exception"
-	 id="Exception" const="JVMTI_EVENT_EXCEPTION" filtered="thread" num="58">
+         id="Exception" const="JVMTI_EVENT_EXCEPTION" filtered="thread" num="58">
     <description>
       Exception events are generated whenever an exception is first detected
       in a Java programming language method.
       Where "exception" means any <code>java.lang.Throwable</code>.
       The exception may have been thrown by a Java programming language or native
@@ -12525,62 +12519,62 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread generating the exception
-	  </description>
+        <jthread/>
+          <description>
+            Thread generating the exception
+          </description>
       </param>
       <param id="klass">
-	<jclass method="method"/>
-	  <description>
-	    Class generating the exception
-	  </description>
+        <jclass method="method"/>
+          <description>
+            Class generating the exception
+          </description>
       </param>
       <param id="method">
-	<jmethodID class="klass"/>
-	  <description>
-	    Method generating the exception
-	  </description>
+        <jmethodID class="klass"/>
+          <description>
+            Method generating the exception
+          </description>
       </param>
       <param id="location">
-	<jlocation/>
-	<description>
-	  Location where exception occurred
-	</description>
+        <jlocation/>
+        <description>
+          Location where exception occurred
+        </description>
       </param>
       <param id="exception">
-	<jobject/>
-	  <description>
-	    The exception being thrown
-	  </description>
+        <jobject/>
+          <description>
+            The exception being thrown
+          </description>
       </param>
       <param id="catch_klass">
-	<jclass method="catch_method"/>
-	  <description>
-	    Class that will catch the exception, or <code>NULL</code> if no known catch
-	  </description>
+        <jclass method="catch_method"/>
+          <description>
+            Class that will catch the exception, or <code>NULL</code> if no known catch
+          </description>
       </param>
       <param id="catch_method">
-	<jmethodID class="catch_klass"/>
-	  <description>
-	    Method that will catch the exception, or <code>NULL</code> if no known catch
-	  </description>
+        <jmethodID class="catch_klass"/>
+          <description>
+            Method that will catch the exception, or <code>NULL</code> if no known catch
+          </description>
       </param>
       <param id="catch_location">
-	<jlocation/>
-	<description>
-	  location which will catch the exception or zero if no known catch
-	</description>
+        <jlocation/>
+        <description>
+          location which will catch the exception or zero if no known catch
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="Exception Catch"
-	 id="ExceptionCatch" const="JVMTI_EVENT_EXCEPTION_CATCH" filtered="thread" num="59">
+         id="ExceptionCatch" const="JVMTI_EVENT_EXCEPTION_CATCH" filtered="thread" num="59">
     <description>
       Exception catch events are generated whenever a thrown exception is caught.
       Where "exception" means any <code>java.lang.Throwable</code>.
       If the exception is caught in a Java programming language method, the event is generated
       when the catch clause is reached. If the exception is caught in a native
@@ -12611,44 +12605,44 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread catching the exception
-	  </description>
+        <jthread/>
+          <description>
+            Thread catching the exception
+          </description>
       </param>
       <param id="klass">
-	<jclass method="method"/>
-	  <description>
-	    Class catching the exception
-	  </description>
+        <jclass method="method"/>
+          <description>
+            Class catching the exception
+          </description>
       </param>
       <param id="method">
-	<jmethodID class="klass"/>
-	  <description>
-	    Method catching the exception
-	  </description>
+        <jmethodID class="klass"/>
+          <description>
+            Method catching the exception
+          </description>
       </param>
       <param id="location">
-	<jlocation/>
-	<description>
-	  Location where exception is being caught
-	</description>
+        <jlocation/>
+        <description>
+          Location where exception is being caught
+        </description>
       </param>
       <param id="exception">
-	<jobject/>
-	  <description>
-	    Exception being caught
-	  </description>
+        <jobject/>
+          <description>
+            Exception being caught
+          </description>
       </param>
     </parameters>
   </event>
 
   <event label="Thread Start"
-	 id="ThreadStart" const="JVMTI_EVENT_THREAD_START" num="52" phase="start">
+         id="ThreadStart" const="JVMTI_EVENT_THREAD_START" num="52" phase="start">
     <description>
       Thread start events are generated by a new thread before its initial
       method executes.
       <p/>
       A thread may be listed in the array returned by
@@ -12670,20 +12664,20 @@
           <description>
             The JNI environment of the event (current) thread.
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread starting
-	  </description>
+        <jthread/>
+          <description>
+            Thread starting
+          </description>
       </param>
     </parameters>
   </event>
 
   <event label="Thread End"
-	 id="ThreadEnd" const="JVMTI_EVENT_THREAD_END" filtered="thread" num="53" phase="start">
+         id="ThreadEnd" const="JVMTI_EVENT_THREAD_END" filtered="thread" num="53" phase="start">
     <description>
       Thread end events are generated by a terminating thread
       after its initial method has finished execution.
       <p/>
       A thread may be listed in the array returned by
@@ -12705,20 +12699,20 @@
           <description>
             The JNI environment of the event (current) thread.
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread ending
-	  </description>
+        <jthread/>
+          <description>
+            Thread ending
+          </description>
       </param>
     </parameters>
   </event>
 
   <event label="Class Load"
-	 id="ClassLoad" const="JVMTI_EVENT_CLASS_LOAD" filtered="thread" phase="start" num="55">
+         id="ClassLoad" const="JVMTI_EVENT_CLASS_LOAD" filtered="thread" phase="start" num="55">
     <description>
       A class load event is generated when a class is first loaded. The order
       of class load events generated by a particular thread are guaranteed
       to match the order of class loading within that thread.
       Array class creation does not generate a class load event.
@@ -12745,41 +12739,41 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread loading the class
-	  </description>
+        <jthread/>
+          <description>
+            Thread loading the class
+          </description>
       </param>
       <param id="klass">
-	<jclass/>
-	  <description>
-	    Class being loaded
-	  </description>
+        <jclass/>
+          <description>
+            Class being loaded
+          </description>
       </param>
     </parameters>
   </event>
 
   <elide>
   <event label="Class Unload"
-	 id="ClassUnload" const="JVMTI_EVENT_CLASS_UNLOAD" num="57">
+         id="ClassUnload" const="JVMTI_EVENT_CLASS_UNLOAD" num="57">
     <description>
       A class unload event is generated when the class is about to be unloaded.
       Class unload events take place during garbage collection and must be
       handled extremely carefully. The garbage collector holds many locks
       and has suspended all other threads, so the event handler cannot depend
       on the ability to acquire any locks. The class unload event handler should
       do as little as possible, perhaps by queuing information to be processed
       later.  In particular, the <code>jclass</code> should be used only in
       the JNI function <code>isSameObject</code> or in the following <jvmti/> functions:
       <ul>
-	<li><functionlink id="GetClassSignature"></functionlink></li>
-	<li><functionlink id="GetSourceFileName"></functionlink></li>
-	<li><functionlink id="IsInterface"></functionlink></li>
-	<li><functionlink id="IsArrayClass"></functionlink></li>
+        <li><functionlink id="GetClassSignature"></functionlink></li>
+        <li><functionlink id="GetSourceFileName"></functionlink></li>
+        <li><functionlink id="IsInterface"></functionlink></li>
+        <li><functionlink id="IsArrayClass"></functionlink></li>
       </ul>
     </description>
     <origin>jvmdi</origin>
     <capabilities>
     </capabilities>
@@ -12791,27 +12785,27 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread generating the class unload
-	  </description>
+        <jthread/>
+          <description>
+            Thread generating the class unload
+          </description>
       </param>
       <param id="klass">
-	<jclass/>
-	  <description>
-	    Class being unloaded
-	  </description>
+        <jclass/>
+          <description>
+            Class being unloaded
+          </description>
       </param>
     </parameters>
   </event>
   </elide>
 
   <event label="Class Prepare"
-	 id="ClassPrepare" const="JVMTI_EVENT_CLASS_PREPARE" filtered="thread" phase="start" num="56">
+         id="ClassPrepare" const="JVMTI_EVENT_CLASS_PREPARE" filtered="thread" phase="start" num="56">
     <description>
       A class prepare event is generated when class preparation is complete.
       At this point, class fields, methods, and implemented interfaces are
       available, and no code from the class has been executed. Since array
       classes never have fields or methods, class prepare events are not
@@ -12829,26 +12823,26 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread generating the class prepare
-	  </description>
+        <jthread/>
+          <description>
+            Thread generating the class prepare
+          </description>
       </param>
       <param id="klass">
-	<jclass/>
-	  <description>
-	    Class being prepared
-	  </description>
+        <jclass/>
+          <description>
+            Class being prepared
+          </description>
       </param>
     </parameters>
   </event>
 
   <event label="Class File Load Hook" phase="any"
-	 id="ClassFileLoadHook" const="JVMTI_EVENT_CLASS_FILE_LOAD_HOOK" num="54">
+         id="ClassFileLoadHook" const="JVMTI_EVENT_CLASS_FILE_LOAD_HOOK" num="54">
     <description>
       This event is sent when the VM obtains class file data,
       but before it constructs
       the in-memory representation for that class.
       This event is also sent when the class is being modified by the
@@ -12935,70 +12929,70 @@
           <description>
             The JNI environment of the event (current) thread.
           </description>
       </param>
       <param id="class_being_redefined">
-	<jclass/>
-	<description>
-	  The class being
+        <jclass/>
+        <description>
+          The class being
           <functionlink id="RedefineClasses">redefined</functionlink> or
           <functionlink id="RetransformClasses">retransformed</functionlink>.
           <code>NULL</code> if sent by class load.
-	</description>
+        </description>
       </param>
       <param id="loader">
-	<jobject/>
-	  <description>
-	    The class loader loading the class.
+        <jobject/>
+          <description>
+            The class loader loading the class.
             <code>NULL</code> if the bootstrap class loader.
-	  </description>
+          </description>
       </param>
       <param id="name">
-	<vmbuf><char/></vmbuf>
-	<description>
+        <vmbuf><char/></vmbuf>
+        <description>
             Name of class being loaded as a VM internal qualified name
             (for example, "java/util/List"), encoded as a
-	    <internallink id="mUTF">modified UTF-8</internallink> string.
+            <internallink id="mUTF">modified UTF-8</internallink> string.
             Note: if the class is defined with a <code>NULL</code> name or
             without a name specified, <code>name</code> will be <code>NULL</code>.
-	</description>
+        </description>
       </param>
       <param id="protection_domain">
-	<jobject/>
-	<description>
-	  The <code>ProtectionDomain</code> of the class.
-	</description>
+        <jobject/>
+        <description>
+          The <code>ProtectionDomain</code> of the class.
+        </description>
       </param>
       <param id="class_data_len">
-	<jint/>
-	<description>
-	  Length of current class file data buffer.
-	</description>
+        <jint/>
+        <description>
+          Length of current class file data buffer.
+        </description>
       </param>
       <param id="class_data">
-	<vmbuf><uchar/></vmbuf>
-	<description>
-	  Pointer to the current class file data buffer.
-	</description>
+        <vmbuf><uchar/></vmbuf>
+        <description>
+          Pointer to the current class file data buffer.
+        </description>
       </param>
       <param id="new_class_data_len">
-	<outptr><jint/></outptr>
-	<description>
-	  Pointer to the length of the new class file data buffer.
-	</description>
+        <outptr><jint/></outptr>
+        <description>
+          Pointer to the length of the new class file data buffer.
+        </description>
       </param>
       <param id="new_class_data">
         <agentbuf incount="new_class_data_len"><uchar/></agentbuf>
-	<description>
-	  Pointer to the pointer to the instrumented class file data buffer.
-	</description>
+        <description>
+          Pointer to the pointer to the instrumented class file data buffer.
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="VM Start Event"
-	 id="VMStart" const="JVMTI_EVENT_VM_START" num="57" phase="start">
+         id="VMStart" const="JVMTI_EVENT_VM_START" num="57" phase="start">
     <description>
       The VM start event signals the start of the VM.
       At this time JNI is live but the VM is not yet fully initialized.
       Once this event is generated, the agent is free to call any JNI function.
       This event signals the beginning of the start phase,
@@ -13041,11 +13035,11 @@
       </param>
     </parameters>
   </event>
 
   <event label="VM Initialization Event"
-	 id="VMInit" const="JVMTI_EVENT_VM_INIT" num="50">
+         id="VMInit" const="JVMTI_EVENT_VM_INIT" num="50">
     <description>
       The VM initialization event signals the completion of VM initialization. Once
       this event is generated, the agent is free to call any JNI or <jvmti/>
       function. The VM initialization event can be preceded by or can be concurrent
       with other events, but
@@ -13067,20 +13061,20 @@
           <description>
             The JNI environment of the event (current) thread.
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    The initial thread
-	  </description>
+        <jthread/>
+          <description>
+            The initial thread
+          </description>
       </param>
     </parameters>
   </event>
 
   <event label="VM Death Event"
-	 id="VMDeath" const="JVMTI_EVENT_VM_DEATH" num="51">
+         id="VMDeath" const="JVMTI_EVENT_VM_DEATH" num="51">
     <description>
       The VM death event notifies the agent of the termination of the VM.
       No events will occur after the VMDeath event.
       <p/>
       In the case of VM start-up failure, this event will not be sent.
@@ -13101,11 +13095,11 @@
       </param>
     </parameters>
   </event>
 
   <event label="Compiled Method Load" phase="start"
-	 id="CompiledMethodLoad" const="JVMTI_EVENT_COMPILED_METHOD_LOAD" num="68">
+         id="CompiledMethodLoad" const="JVMTI_EVENT_COMPILED_METHOD_LOAD" num="68">
     <description>
       Sent when a method is compiled and loaded into memory by the VM.
       If it is unloaded, the <eventlink id="CompiledMethodUnload"/> event is sent.
       If it is moved, the <eventlink id="CompiledMethodUnload"/> event is sent,
       followed by a new <code>CompiledMethodLoad</code> event.
@@ -13118,85 +13112,85 @@
       <functionlink id="GenerateEvents"></functionlink>.
     </description>
     <origin>jvmpi</origin>
     <typedef id="jvmtiAddrLocationMap" label="Native address to location entry">
       <field id="start_address">
-	<vmbuf><void/></vmbuf>
-	<description>
-	  Starting native address of code corresponding to a location
-	</description>
+        <vmbuf><void/></vmbuf>
+        <description>
+          Starting native address of code corresponding to a location
+        </description>
       </field>
       <field id="location">
-	<jlocation/>
-	<description>
-	  Corresponding location. See
-	  <functionlink id="GetJLocationFormat"></functionlink>
-	  for the meaning of location.
-	</description>
+        <jlocation/>
+        <description>
+          Corresponding location. See
+          <functionlink id="GetJLocationFormat"></functionlink>
+          for the meaning of location.
+        </description>
       </field>
     </typedef>
     <capabilities>
       <required id="can_generate_compiled_method_load_events"></required>
     </capabilities>
     <parameters>
       <param id="klass">
-	<jclass method="method"/>
-	  <description>
-	    Class of the method being compiled and loaded
-	  </description>
+        <jclass method="method"/>
+          <description>
+            Class of the method being compiled and loaded
+          </description>
       </param>
       <param id="method">
-	<jmethodID class="klass"/>
-	  <description>
-	    Method being compiled and loaded
-	  </description>
+        <jmethodID class="klass"/>
+          <description>
+            Method being compiled and loaded
+          </description>
       </param>
       <param id="code_size">
-	<jint/>
-	<description>
-	  Size of compiled code
-	</description>
+        <jint/>
+        <description>
+          Size of compiled code
+        </description>
       </param>
       <param id="code_addr">
-	<vmbuf><void/></vmbuf>
-	<description>
-	  Address where compiled method code is loaded
-	</description>
+        <vmbuf><void/></vmbuf>
+        <description>
+          Address where compiled method code is loaded
+        </description>
       </param>
       <param id="map_length">
-	<jint/>
-	<description>
-	  Number of <typelink id="jvmtiAddrLocationMap"></typelink>
-	  entries in the address map.
-	  Zero if mapping information cannot be supplied.
-	</description>
+        <jint/>
+        <description>
+          Number of <typelink id="jvmtiAddrLocationMap"></typelink>
+          entries in the address map.
+          Zero if mapping information cannot be supplied.
+        </description>
       </param>
       <param id="map">
-	<vmbuf><struct>jvmtiAddrLocationMap</struct></vmbuf>
-	<description>
-	  Map from native addresses to location.
-	  The native address range of each entry is from
-	  <fieldlink id="start_address" struct="jvmtiAddrLocationMap"></fieldlink>
-	  to <code>start_address-1</code> of the next entry.
-	  <code>NULL</code> if mapping information cannot be supplied.
-	</description>
+        <vmbuf><struct>jvmtiAddrLocationMap</struct></vmbuf>
+        <description>
+          Map from native addresses to location.
+          The native address range of each entry is from
+          <fieldlink id="start_address" struct="jvmtiAddrLocationMap"></fieldlink>
+          to <code>start_address-1</code> of the next entry.
+          <code>NULL</code> if mapping information cannot be supplied.
+        </description>
       </param>
       <param id="compile_info">
-	<vmbuf><void/></vmbuf>
-	<description>
-	  VM-specific compilation information.
-	  The referenced compile information is managed by the VM
-	  and must not depend on the agent for collection.
-	  A VM implementation defines the content and lifetime
-	  of the information.
-	</description>
+        <vmbuf><void/></vmbuf>
+        <description>
+          VM-specific compilation information.
+          The referenced compile information is managed by the VM
+          and must not depend on the agent for collection.
+          A VM implementation defines the content and lifetime
+          of the information.
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="Compiled Method Unload" phase="start"
-	 id="CompiledMethodUnload" const="JVMTI_EVENT_COMPILED_METHOD_UNLOAD" num="69">
+         id="CompiledMethodUnload" const="JVMTI_EVENT_COMPILED_METHOD_UNLOAD" num="69">
     <description>
       Sent when a compiled method is unloaded from memory.
       This event might not be sent on the thread which performed the unload.
       This event may be sent sometime after the unload occurs, but
       will be sent before the memory is reused
@@ -13207,37 +13201,37 @@
     <capabilities>
       <required id="can_generate_compiled_method_load_events"></required>
     </capabilities>
     <parameters>
       <param id="klass">
-	<jclass method="method"/>
-	  <description>
-	    Class of the compiled method being unloaded.
-	  </description>
+        <jclass method="method"/>
+          <description>
+            Class of the compiled method being unloaded.
+          </description>
       </param>
       <param id="method">
-	<jmethodID class="klass"/>
-	  <description>
-	    Compiled method being unloaded.
-	    For identification of the compiled method only -- the class
-	    may be unloaded and therefore the method should not be used
-	    as an argument to further JNI or <jvmti/> functions.
-	  </description>
+        <jmethodID class="klass"/>
+          <description>
+            Compiled method being unloaded.
+            For identification of the compiled method only -- the class
+            may be unloaded and therefore the method should not be used
+            as an argument to further JNI or <jvmti/> functions.
+          </description>
       </param>
       <param id="code_addr">
-	<vmbuf><void/></vmbuf>
-	<description>
-	  Address where compiled method code was loaded.
+        <vmbuf><void/></vmbuf>
+        <description>
+          Address where compiled method code was loaded.
           For identification of the compiled method only --
           the space may have been reclaimed.
-	</description>
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="Dynamic Code Generated" phase="any"
-	 id="DynamicCodeGenerated" const="JVMTI_EVENT_DYNAMIC_CODE_GENERATED" num="70">
+         id="DynamicCodeGenerated" const="JVMTI_EVENT_DYNAMIC_CODE_GENERATED" num="70">
     <description>
       Sent when a component of the virtual machine is generated dynamically.
       This does not correspond to Java programming language code that is
       compiled--see <eventlink id="CompiledMethodLoad"></eventlink>.
       This is for native code--for example, an interpreter that is generated
@@ -13252,35 +13246,35 @@
     <origin>jvmpi</origin>
     <capabilities>
     </capabilities>
     <parameters>
       <param id="name">
-	<vmbuf><char/></vmbuf>
-	<description>
-	  Name of the code, encoded as a
-	  <internallink id="mUTF">modified UTF-8</internallink> string.
+        <vmbuf><char/></vmbuf>
+        <description>
+          Name of the code, encoded as a
+          <internallink id="mUTF">modified UTF-8</internallink> string.
           Intended for display to an end-user.
           The name might not be unique.
-	</description>
+        </description>
       </param>
       <param id="address">
-	<vmbuf><void/></vmbuf>
-	<description>
-	  Native address of the code
-	</description>
+        <vmbuf><void/></vmbuf>
+        <description>
+          Native address of the code
+        </description>
       </param>
       <param id="length">
-	<jint/>
-	<description>
-	  Length in bytes of the code
-	</description>
+        <jint/>
+        <description>
+          Length in bytes of the code
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="Data Dump Request"
-	 id="DataDumpRequest" const="JVMTI_EVENT_DATA_DUMP_REQUEST" num="71">
+         id="DataDumpRequest" const="JVMTI_EVENT_DATA_DUMP_REQUEST" num="71">
     <description>
       Sent by the VM to request the agent to dump its data.  This
       is just a hint and the agent need not react to this event.
       This is useful for processing command-line signals from users.  For
       example, in the Java 2 SDK a CTRL-Break on Win32 and a CTRL-\ on Solaris
@@ -13292,11 +13286,11 @@
     <parameters>
     </parameters>
   </event>
 
   <event label="Monitor Contended Enter"
-	 id="MonitorContendedEnter" const="JVMTI_EVENT_MONITOR_CONTENDED_ENTER" filtered="thread" num="75">
+         id="MonitorContendedEnter" const="JVMTI_EVENT_MONITOR_CONTENDED_ENTER" filtered="thread" num="75">
     <description>
       Sent when a thread is attempting to enter a Java programming language
       monitor already acquired by another thread.
     </description>
     <origin>jvmpi</origin>
@@ -13311,27 +13305,27 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    JNI local reference to the thread
-	    attempting to enter the monitor
-	  </description>
+        <jthread/>
+          <description>
+            JNI local reference to the thread
+            attempting to enter the monitor
+          </description>
       </param>
       <param id="object">
-	<jobject/>
-	  <description>
-	    JNI local reference to the monitor
-	  </description>
+        <jobject/>
+          <description>
+            JNI local reference to the monitor
+          </description>
       </param>
     </parameters>
   </event>
 
   <event label="Monitor Contended Entered"
-	 id="MonitorContendedEntered" const="JVMTI_EVENT_MONITOR_CONTENDED_ENTERED" filtered="thread" num="76">
+         id="MonitorContendedEntered" const="JVMTI_EVENT_MONITOR_CONTENDED_ENTERED" filtered="thread" num="76">
     <description>
       Sent when a thread enters a Java programming language
       monitor after waiting for it to be released by another thread.
     </description>
     <origin>jvmpi</origin>
@@ -13346,27 +13340,27 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    JNI local reference to the thread entering
-	    the monitor
-	  </description>
+        <jthread/>
+          <description>
+            JNI local reference to the thread entering
+            the monitor
+          </description>
       </param>
       <param id="object">
-	<jobject/>
-	  <description>
-	    JNI local reference to the monitor
-	  </description>
+        <jobject/>
+          <description>
+            JNI local reference to the monitor
+          </description>
       </param>
     </parameters>
   </event>
 
   <event label="Monitor Wait"
-	 id="MonitorWait" const="JVMTI_EVENT_MONITOR_WAIT" filtered="thread" num="73">
+         id="MonitorWait" const="JVMTI_EVENT_MONITOR_WAIT" filtered="thread" num="73">
     <description>
       Sent when a thread is about to wait on an object.
     </description>
     <origin>jvmpi</origin>
     <capabilities>
@@ -13380,32 +13374,32 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    JNI local reference to the thread about to wait
-	  </description>
+        <jthread/>
+          <description>
+            JNI local reference to the thread about to wait
+          </description>
       </param>
       <param id="object">
-	<jobject/>
-	  <description>
-	    JNI local reference to the monitor
-	  </description>
+        <jobject/>
+          <description>
+            JNI local reference to the monitor
+          </description>
       </param>
       <param id="timeout">
-	<jlong/>
-	<description>
-	  The number of milliseconds the thread will wait
-	</description>
+        <jlong/>
+        <description>
+          The number of milliseconds the thread will wait
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="Monitor Waited"
-	 id="MonitorWaited" const="JVMTI_EVENT_MONITOR_WAITED" filtered="thread" num="74">
+         id="MonitorWaited" const="JVMTI_EVENT_MONITOR_WAITED" filtered="thread" num="74">
     <description>
       Sent when a thread finishes waiting on an object.
     </description>
     <origin>jvmpi</origin>
     <capabilities>
@@ -13419,32 +13413,32 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    JNI local reference to the thread that was finished waiting
-	  </description>
+        <jthread/>
+          <description>
+            JNI local reference to the thread that was finished waiting
+          </description>
       </param>
       <param id="object">
-	<jobject/>
-	  <description>
-	    JNI local reference to the monitor.
-	  </description>
+        <jobject/>
+          <description>
+            JNI local reference to the monitor.
+          </description>
       </param>
       <param id="timed_out">
-	<jboolean/>
-	<description>
-	  True if the monitor timed out
-	</description>
+        <jboolean/>
+        <description>
+          True if the monitor timed out
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="Resource Exhausted"
-	 id="ResourceExhausted" const="JVMTI_EVENT_RESOURCE_EXHAUSTED" num="80"
+         id="ResourceExhausted" const="JVMTI_EVENT_RESOURCE_EXHAUSTED" num="80"
          since="1.1">
     <description>
       Sent when a VM resource needed by a running application has been exhausted.
       Except as required by the optional capabilities, the set of resources
       which report exhaustion is implementation dependent.
@@ -13457,18 +13451,18 @@
         <constant id="JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR" num="0x0001">
           After this event returns, the VM will throw a
           <code>java.lang.OutOfMemoryError</code>.
         </constant>
         <constant id="JVMTI_RESOURCE_EXHAUSTED_JAVA_HEAP" num="0x0002">
-	  The VM was unable to allocate memory from the <tm>Java</tm>
+          The VM was unable to allocate memory from the <tm>Java</tm>
           platform <i>heap</i>.
           The <i>heap</i> is the runtime
           data area from which memory for all class instances and
           arrays are allocated.
         </constant>
         <constant id="JVMTI_RESOURCE_EXHAUSTED_THREADS" num="0x0004">
-	  The VM was unable to create a thread.
+          The VM was unable to create a thread.
         </constant>
       </constants>
     </description>
     <origin>new</origin>
     <capabilities>
@@ -13490,36 +13484,36 @@
           <description>
             The JNI environment of the event (current) thread
           </description>
       </param>
       <param id="flags">
-	<jint/>
+        <jint/>
         <description>
-	  Flags defining the properties of the of resource exhaustion
-	  as specified by the
+          Flags defining the properties of the of resource exhaustion
+          as specified by the
           <internallink id="jvmtiResourceExhaustionFlags">Resource
           Exhaustion Flags</internallink>.
-	  </description>
-	</param>
+          </description>
+        </param>
       <param id="reserved">
-	<vmbuf><void/></vmbuf>
-	<description>
-	  Reserved.
-	</description>
+        <vmbuf><void/></vmbuf>
+        <description>
+          Reserved.
+        </description>
       </param>
       <param id="description">
-	<vmbuf><char/></vmbuf>
-	<description>
-	  Description of the resource exhaustion, encoded as a
-	  <internallink id="mUTF">modified UTF-8</internallink> string.
-	</description>
+        <vmbuf><char/></vmbuf>
+        <description>
+          Description of the resource exhaustion, encoded as a
+          <internallink id="mUTF">modified UTF-8</internallink> string.
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="VM Object Allocation"
-	 id="VMObjectAlloc" const="JVMTI_EVENT_VM_OBJECT_ALLOC" num="84">
+         id="VMObjectAlloc" const="JVMTI_EVENT_VM_OBJECT_ALLOC" num="84">
     <description>
       Sent when a method causes the virtual machine to directly allocate an
       Object visible to Java programming language code.
       Generally object allocation should be detected by instrumenting
       the bytecodes of allocating methods.
@@ -13558,40 +13552,40 @@
     <capabilities>
       <required id="can_generate_vm_object_alloc_events"></required>
     </capabilities>
     <parameters>
       <param id="jni_env">
-	<outptr>
-	  <struct>JNIEnv</struct>
-	</outptr>
-	  <description>
+        <outptr>
+          <struct>JNIEnv</struct>
+        </outptr>
+          <description>
             The JNI environment of the event (current) thread
-	  </description>
+          </description>
       </param>
       <param id="thread">
-	<jthread/>
-	  <description>
-	    Thread allocating the object.
-	  </description>
+        <jthread/>
+          <description>
+            Thread allocating the object.
+          </description>
       </param>
       <param id="object">
-	<jobject/>
-	  <description>
-	    JNI local reference to the object that was allocated.
-	  </description>
+        <jobject/>
+          <description>
+            JNI local reference to the object that was allocated.
+          </description>
       </param>
       <param id="object_klass">
-	<jclass/>
-	  <description>
-	    JNI local reference to the class of the object.
-	  </description>
+        <jclass/>
+          <description>
+            JNI local reference to the class of the object.
+          </description>
       </param>
       <param id="size">
-	<jlong/>
-	<description>
-	    Size of the object (in bytes). See <functionlink id="GetObjectSize"/>.
-	</description>
+        <jlong/>
+        <description>
+            Size of the object (in bytes). See <functionlink id="GetObjectSize"/>.
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="Sampled Object Allocation"
@@ -13680,20 +13674,20 @@
     <capabilities>
       <required id="can_generate_object_free_events"></required>
     </capabilities>
     <parameters>
       <param id="tag">
-	<jlong/>
-	<description>
-	  The freed object's tag
-	</description>        
+        <jlong/>
+        <description>
+          The freed object's tag
+        </description>
       </param>
     </parameters>
   </event>
 
   <event label="Garbage Collection Start"
-	 id="GarbageCollectionStart" const="JVMTI_EVENT_GARBAGE_COLLECTION_START" num="81">
+         id="GarbageCollectionStart" const="JVMTI_EVENT_GARBAGE_COLLECTION_START" num="81">
     <description>
       A Garbage Collection Start event is sent when a
       garbage collection pause begins.
       Only stop-the-world collections are reported--that is, collections during
       which all threads cease to modify the state of the Java virtual machine.
@@ -13716,11 +13710,11 @@
     <parameters>
     </parameters>
   </event>
 
   <event label="Garbage Collection Finish"
-	 id="GarbageCollectionFinish" const="JVMTI_EVENT_GARBAGE_COLLECTION_FINISH" num="82">
+         id="GarbageCollectionFinish" const="JVMTI_EVENT_GARBAGE_COLLECTION_FINISH" num="82">
     <description>
       A Garbage Collection Finish event is sent when a
       garbage collection pause ends.
       This event is sent while the VM is still stopped, thus
       the event handler must not use JNI functions and
@@ -13735,13 +13729,13 @@
       notifies the raw monitor
       <p/>
       This event is always sent as a matched pair with
       <eventlink id="GarbageCollectionStart"/> (assuming both events are enabled).
       <issue>
-	The most important use of this event is to provide timing information,
-	and thus additional information is not required.  However,
-	information about the collection which is "free" should be included -
+        The most important use of this event is to provide timing information,
+        and thus additional information is not required.  However,
+        information about the collection which is "free" should be included -
         what that information is needs to be determined.
       </issue>
     </description>
     <origin>new</origin>
     <capabilities>
@@ -13751,44 +13745,44 @@
     </parameters>
   </event>
 
   <elide>
   <event label="Verbose Output" phase="any"
-	 id="VerboseOutput" const="JVMTI_EVENT_VERBOSE_OUTPUT" num="85">
+         id="VerboseOutput" const="JVMTI_EVENT_VERBOSE_OUTPUT" num="85">
     <description>
       Send verbose messages as strings.
-	<issue>
-	  This format is extremely fragile, as it can change with each
-	  platform, collector and version.  Alternatives include:
-	  <ul>
-	    <li>building off Java programming language M and M APIs</li>
-	    <li>XML</li>
-	    <li>key/value pairs</li>
-	    <li>removing it</li>
-	  </ul>
-	</issue>
-	<issue>
-	  Though this seemed trivial to implement.
+        <issue>
+          This format is extremely fragile, as it can change with each
+          platform, collector and version.  Alternatives include:
+          <ul>
+            <li>building off Java programming language M and M APIs</li>
+            <li>XML</li>
+            <li>key/value pairs</li>
+            <li>removing it</li>
+          </ul>
+        </issue>
+        <issue>
+          Though this seemed trivial to implement.
           In the RI it appears this will be quite complex.
-	</issue>
+        </issue>
     </description>
     <origin>new</origin>
     <capabilities>
     </capabilities>
     <parameters>
       <param id="flag">
-	<enum>jvmtiVerboseFlag</enum>
+        <enum>jvmtiVerboseFlag</enum>
         <description>
           Which verbose output is being sent.
         </description>
       </param>
       <param id="message">
-	<vmbuf><char/></vmbuf>
-	<description>
-	  Message text, encoded as a
-	  <internallink id="mUTF">modified UTF-8</internallink> string.
-	</description>
+        <vmbuf><char/></vmbuf>
+        <description>
+          Message text, encoded as a
+          <internallink id="mUTF">modified UTF-8</internallink> string.
+        </description>
       </param>
     </parameters>
   </event>
   </elide>
 
@@ -13799,126 +13793,126 @@
     <jvmti/> extends the data types defined by JNI.
   </intro>
   <basetypes id="jniTypes" label="JNI Types Used in the JVM Tool Interface">
     <basetype id="jboolean">
       <description>
-	Holds a Java programming language <code>boolean</code>.
-	Unsigned 8 bits.
+        Holds a Java programming language <code>boolean</code>.
+        Unsigned 8 bits.
       </description>
     </basetype>
     <basetype id="jchar">
       <description>
-	Holds a Java programming language <code>char</code>.
-	Unsigned 16 bits.
+        Holds a Java programming language <code>char</code>.
+        Unsigned 16 bits.
       </description>
     </basetype>
     <basetype id="jint">
       <description>
-	Holds a Java programming language <code>int</code>.
-	Signed 32 bits.
+        Holds a Java programming language <code>int</code>.
+        Signed 32 bits.
       </description>
     </basetype>
     <basetype id="jlong">
       <description>
-	Holds a Java programming language <code>long</code>.
-	Signed 64 bits.
+        Holds a Java programming language <code>long</code>.
+        Signed 64 bits.
       </description>
     </basetype>
     <basetype id="jfloat">
       <description>
-	Holds a Java programming language <code>float</code>.
-	32 bits.
+        Holds a Java programming language <code>float</code>.
+        32 bits.
       </description>
     </basetype>
     <basetype id="jdouble">
       <description>
-	Holds a Java programming language <code>double</code>.
-	64 bits.
+        Holds a Java programming language <code>double</code>.
+        64 bits.
       </description>
     </basetype>
     <basetype id="jobject">
       <description>
-	Holds a Java programming language object.
+        Holds a Java programming language object.
       </description>
     </basetype>
     <basetype id="jclass">
       <description>
-	Holds a Java programming language class.
+        Holds a Java programming language class.
       </description>
     </basetype>
     <basetype id="jvalue">
       <description>
-	Is a union of all primitive types and <code>jobject</code>.  Thus, holds any Java
-	programming language value.
+        Is a union of all primitive types and <code>jobject</code>.  Thus, holds any Java
+        programming language value.
       </description>
     </basetype>
     <basetype id="jfieldID">
       <description>
-	Identifies a Java programming language field.
+        Identifies a Java programming language field.
         <code>jfieldID</code>s returned by <jvmti/> functions and events may be
         safely stored.
       </description>
     </basetype>
     <basetype id="jmethodID">
       <description>
-	Identifies a Java programming language method, initializer, or constructor.
+        Identifies a Java programming language method, initializer, or constructor.
         <code>jmethodID</code>s returned by <jvmti/> functions and events may be
         safely stored.  However, if the class is unloaded, they become invalid
         and must not be used.
       </description>
     </basetype>
     <basetype id="JNIEnv">
       <description>
-	Pointer to the JNI function table.  Pointer to this (<code>JNIEnv *</code>)
-	is a JNI environment.
+        Pointer to the JNI function table.  Pointer to this (<code>JNIEnv *</code>)
+        is a JNI environment.
       </description>
     </basetype>
   </basetypes>
 
   <basetypes id="jvmtiTypes" label="JVM Tool Interface Base Types">
     <basetype id="jvmtiEnv">
       <description>
-	The <jvmti/> <internallink id="environments">environment</internallink> pointer.
+        The <jvmti/> <internallink id="environments">environment</internallink> pointer.
         See the <internallink id="FunctionSection">Function Section</internallink>.
         <code>jvmtiEnv</code> points to the
         <internallink id="FunctionTable">function table</internallink> pointer.
       </description>
     </basetype>
     <basetype id="jthread">
       <definition>typedef jobject jthread;</definition>
       <description>
-	Subtype of <datalink id="jobject"></datalink> that holds a thread.
+        Subtype of <datalink id="jobject"></datalink> that holds a thread.
       </description>
     </basetype>
     <basetype id="jthreadGroup">
       <definition>typedef jobject jthreadGroup;</definition>
       <description>
-	Subtype of <datalink id="jobject"></datalink> that holds a thread group.
+        Subtype of <datalink id="jobject"></datalink> that holds a thread group.
       </description>
     </basetype>
     <basetype id="jlocation">
       <definition>typedef jlong jlocation;</definition>
       <description>
-	A 64 bit value, representing a monotonically increasing
-	executable position within a method.
+        A 64 bit value, representing a monotonically increasing
+        executable position within a method.
         <code>-1</code> indicates a native method.
-	See <functionlink id="GetJLocationFormat"></functionlink> for the format on a
-	given VM.
+        See <functionlink id="GetJLocationFormat"></functionlink> for the format on a
+        given VM.
       </description>
     </basetype>
     <basetype id="jrawMonitorID">
       <definition>struct _jrawMonitorID;
 typedef struct _jrawMonitorID *jrawMonitorID;</definition>
       <description>
-	A raw monitor.
+        A raw monitor.
       </description>
     </basetype>
     <basetype id="jvmtiError">
       <description>
-	Holds an error return code.
-	See the <internallink id="ErrorSection">Error section</internallink> for possible values.
-	<example>
+        Holds an error return code.
+        See the <internallink id="ErrorSection">Error section</internallink> for possible values.
+        <example>
 typedef enum {
     JVMTI_ERROR_NONE = 0,
     JVMTI_ERROR_INVALID_THREAD = 10,
       ...
 } jvmtiError;
@@ -13926,11 +13920,11 @@
       </description>
     </basetype>
     <basetype id="jvmtiEvent">
       <description>
         An identifier for an event type.
-	See the <internallink id="EventSection">Event section</internallink> for possible values.
+        See the <internallink id="EventSection">Event section</internallink> for possible values.
         It is guaranteed that future versions of this specification will
         never assign zero as an event type identifier.
 <example>
 typedef enum {
     JVMTI_EVENT_SINGLE_STEP = 1,
@@ -13964,15 +13958,15 @@
       </description>
     </basetype>
     <basetype id="jniNativeInterface">
       <definition>typedef struct JNINativeInterface_ jniNativeInterface;</definition>
       <description>
-	Typedef for the JNI function table <code>JNINativeInterface</code>
-	defined in the
-	<externallink id="jni/functions.html#interface-function-table">
+        Typedef for the JNI function table <code>JNINativeInterface</code>
+        defined in the
+        <externallink id="jni/functions.html#interface-function-table">
           JNI Specification</externallink>.
-	The JNI reference implementation defines this with an underscore.
+        The JNI reference implementation defines this with an underscore.
       </description>
     </basetype>
   </basetypes>
 
 </datasection>
@@ -14440,24 +14434,24 @@
       Disallow popping from the current thread.
       Allow implementations to return opaque frame error when they cannot pop.
       The NativeMethodBind event should be sent during any phase.
       The DynamicCodeGenerated event should be sent during any phase.
       The following functions should be allowed to operate before VMInit:
-	Set/GetEnvironmentLocalStorage
-	GetMethodDeclaringClass
-	GetClassSignature
-	GetClassModifiers
-	IsInterface
-	IsArrayClass
-	GetMethodName
-	GetMethodModifiers
-	GetMaxLocals
-	GetArgumentsSize
-	GetLineNumberTable
-	GetMethodLocation
-	IsMethodNative
-	IsMethodSynthetic.
+        Set/GetEnvironmentLocalStorage
+        GetMethodDeclaringClass
+        GetClassSignature
+        GetClassModifiers
+        IsInterface
+        IsArrayClass
+        GetMethodName
+        GetMethodModifiers
+        GetMaxLocals
+        GetArgumentsSize
+        GetLineNumberTable
+        GetMethodLocation
+        IsMethodNative
+        IsMethodSynthetic.
       Other changes (to XSL):
       Argument description should show asterisk after not before pointers.
       NotifyFramePop, GetFrameLocationm and all the local variable operations
       should hsve the NO_MORE_FRAMES error added.
       Not alive threads should have a different error return than invalid thread.
@@ -14967,10 +14961,26 @@
         - Specify that RedefineClasses and RetransformClasses are not allowed
           to change the class file NestHost and NestMembers attributes.
         - Add new error JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_ATTRIBUTE_CHANGED
           that can be returned by RedefineClasses and RetransformClasses.
   </change>
+  <change date="20 May 2019" version="13.0.0">
+      Minor spec update for the capability "can_redefine_any_class".
+      It now says:
+       "RedefineClasses can be called on any modifiable class. See IsModifiableClass.
+       (can_redefine_classes must also be set)"
+  </change>
+  <change date="5 June 2019" version="13.0.0">
+      Minor PopFrame spec update:
+        - The specified thread must be suspended or must be the current thread.
+          (It was not allowed to be the current thread before.)
+  </change>
+  <change date="10 October 2019" version="14.0.0">
+      Minor update for new class file Record attribute:
+        - Specify that RedefineClasses and RetransformClasses are not allowed
+          to change the class file Record attribute.
+  </change>
 </changehistory>
 
 </specification>
 <!-- Keep this comment at the end of the file
 Local variables:
