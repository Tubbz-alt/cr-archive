diff a/src/hotspot/share/prims/jvmtiRedefineClasses.hpp b/src/hotspot/share/prims/jvmtiRedefineClasses.hpp
--- a/src/hotspot/share/prims/jvmtiRedefineClasses.hpp
+++ b/src/hotspot/share/prims/jvmtiRedefineClasses.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -349,10 +349,13 @@
   static int             _deleted_methods_length;
   static int             _added_methods_length;
   static bool            _has_redefined_Object;
   static bool            _has_null_class_loader;
 
+  // Used by JFR to group class redefininition events together.
+  static u8              _id_counter;
+
   // The instance fields are used to pass information from
   // doit_prologue() to doit() and doit_epilogue().
   Klass*                      _the_class;
   jint                        _class_count;
   const jvmtiClassDefinition *_class_defs;  // ptr to _class_count defs
@@ -386,10 +389,13 @@
   // the heavy lifting.
   elapsedTimer  _timer_rsc_phase1;
   elapsedTimer  _timer_rsc_phase2;
   elapsedTimer  _timer_vm_op_prologue;
 
+  // Redefinition id used by JFR
+  u8 _id;
+
   // These routines are roughly in call order unless otherwise noted.
 
   // Load the caller's new class definition(s) into _scratch_classes.
   // Constant pool merging work is done here as needed. Also calls
   // compare_and_normalize_class_versions() to verify the class
@@ -405,11 +411,11 @@
   // Figure out which new methods match old methods in name and signature,
   // which methods have been added, and which are no longer present
   void compute_added_deleted_matching_methods();
 
   // Change jmethodIDs to point to the new methods
-  void update_jmethod_ids();
+  void update_jmethod_ids(Thread* thread);
 
   // In addition to marking methods as old and/or obsolete, this routine
   // counts the number of methods that are EMCP (Equivalent Module Constant Pool).
   int check_methods_and_mark_as_obsolete();
   void transfer_old_native_function_registrations(InstanceKlass* the_class);
@@ -470,10 +476,11 @@
   bool skip_type_annotation_type_path(
     AnnotationArray* type_annotations_typeArray, int &byte_i_ref, TRAPS);
   bool rewrite_cp_refs_in_fields_annotations(
     InstanceKlass* scratch_class, TRAPS);
   bool rewrite_cp_refs_in_nest_attributes(InstanceKlass* scratch_class);
+  bool rewrite_cp_refs_in_record_attribute(InstanceKlass* scratch_class, TRAPS);
   void rewrite_cp_refs_in_method(methodHandle method,
     methodHandle * new_method_p, TRAPS);
   bool rewrite_cp_refs_in_methods(InstanceKlass* scratch_class, TRAPS);
   bool rewrite_cp_refs_in_methods_annotations(
     InstanceKlass* scratch_class, TRAPS);
@@ -500,10 +507,12 @@
 
   // lock classes to redefine since constant pool merging isn't thread safe.
   void lock_classes();
   void unlock_classes();
 
+  u8 next_id();
+
   static void dump_methods();
 
   // Check that there are no old or obsolete methods
   class CheckClass : public KlassClosure {
     Thread* _thread;
@@ -532,10 +541,11 @@
   void doit();
   void doit_epilogue();
 
   bool allow_nested_vm_operations() const        { return true; }
   jvmtiError check_error()                       { return _res; }
+  u8 id()                                        { return _id; }
 
   // Modifiable test must be shared between IsModifiableClass query
   // and redefine implementation
   static bool is_modifiable_class(oop klass_mirror);
 
