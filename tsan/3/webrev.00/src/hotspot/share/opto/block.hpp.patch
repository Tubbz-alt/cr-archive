diff a/src/hotspot/share/opto/block.hpp b/src/hotspot/share/opto/block.hpp
--- a/src/hotspot/share/opto/block.hpp
+++ b/src/hotspot/share/opto/block.hpp
@@ -26,10 +26,11 @@
 #define SHARE_OPTO_BLOCK_HPP
 
 #include "opto/multnode.hpp"
 #include "opto/node.hpp"
 #include "opto/phase.hpp"
+#include "utilities/powerOfTwo.hpp"
 
 // Optimization - Graph Style
 
 class Block;
 class CFGLoop;
@@ -315,11 +316,11 @@
   void add_inst( Node *n ) { insert_node(n, end_idx()); }
   // Find node in block. Fails if node not in block.
   uint find_node( const Node *n ) const;
   // Find and remove n from block list
   void find_remove( const Node *n );
-  // Check wether the node is in the block.
+  // Check whether the node is in the block.
   bool contains (const Node *n) const;
 
   // Return the empty status of a block
   enum { not_empty, empty_with_goto, completely_empty };
   int is_Empty() const;
@@ -497,11 +498,14 @@
   // into Goto's so that when you enter the infinite loop you indeed hang.
   void convert_NeverBranch_to_Goto(Block *b);
 
   CFGLoop* create_loop_tree();
   bool is_dominator(Node* dom_node, Node* node);
-
+  bool is_CFG(Node* n);
+  bool is_control_proj_or_safepoint(Node* n);
+  Block* find_block_for_node(Node* n);
+  bool is_dominating_control(Node* dom_ctrl, Node* n);
   #ifndef PRODUCT
   bool _trace_opto_pipelining;  // tracing flag
   #endif
 
  public:
