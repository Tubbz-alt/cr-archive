diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/bsd/BsdDebuggerLocal.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/bsd/BsdDebuggerLocal.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/bsd/BsdDebuggerLocal.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/debugger/bsd/BsdDebuggerLocal.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -617,23 +617,22 @@
     public long[] getJavaThreadsInfo() {
         requireAttach();
         Threads threads = VM.getVM().getThreads();
         int len = threads.getNumberOfThreads();
         long[] result = new long[len * 3];    // triple
-        JavaThread t = threads.first();
         long beg, end;
         int i = 0;
-        while (t != null) {
+        for (int k = 0; k < threads.getNumberOfThreads(); k++) {
+            JavaThread t = threads.getJavaThreadAt(k);
             end = t.getStackBaseValue();
             beg = end - t.getStackSize();
             BsdThread bsdt = (BsdThread)t.getThreadProxy();
             long uid = bsdt.getUniqueThreadId();
             if (threadList != null) threadList.add(bsdt);
             result[i] = uid;
             result[i + 1] = beg;
             result[i + 2] = end;
-            t = t.next();
             i += 3;
         }
         return result;
     }
 
