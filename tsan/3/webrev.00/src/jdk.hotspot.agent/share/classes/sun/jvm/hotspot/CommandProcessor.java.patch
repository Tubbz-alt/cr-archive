diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/CommandProcessor.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/CommandProcessor.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/CommandProcessor.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/CommandProcessor.java
@@ -534,11 +534,12 @@
                     }
                 }
                 // Not an address
                 boolean all = name.equals("-a");
                 Threads threads = VM.getVM().getThreads();
-                for (JavaThread thread = threads.first(); thread != null; thread = thread.next()) {
+                for (int i = 0; i < threads.getNumberOfThreads(); i++) {
+                    JavaThread thread = threads.getJavaThreadAt(i);
                     ByteArrayOutputStream bos = new ByteArrayOutputStream();
                     thread.printThreadIDOn(new PrintStream(bos));
                     if (all || bos.toString().equals(name)) {
                         if (thread instanceof CompilerThread) {
                             CompilerThread ct = (CompilerThread)thread;
@@ -896,11 +897,12 @@
                     usage();
                 } else {
                     String name = t.nextToken();
                     boolean all = name.equals("-a");
                     Threads threads = VM.getVM().getThreads();
-                    for (JavaThread thread = threads.first(); thread != null; thread = thread.next()) {
+                    for (int i = 0; i < threads.getNumberOfThreads(); i++) {
+                        JavaThread thread = threads.getJavaThreadAt(i);
                         ByteArrayOutputStream bos = new ByteArrayOutputStream();
                         thread.printThreadIDOn(new PrintStream(bos));
                         if (all || bos.toString().equals(name)) {
                           if (thread instanceof CompilerThread) {
                             CompilerThread ct = (CompilerThread)thread;
@@ -925,11 +927,12 @@
                     usage();
                 } else {
                     String name = t.nextToken();
                     boolean all = name.equals("-a");
                     Threads threads = VM.getVM().getThreads();
-                    for (JavaThread thread = threads.first(); thread != null; thread = thread.next()) {
+                    for (int i = 0; i < threads.getNumberOfThreads(); i++) {
+                        JavaThread thread = threads.getJavaThreadAt(i);
                         ByteArrayOutputStream bos = new ByteArrayOutputStream();
                         thread.printThreadIDOn(new PrintStream(bos));
                         if (all || bos.toString().equals(name)) {
                           if (thread instanceof CompilerThread) {
                             CompilerThread ct = (CompilerThread)thread;
@@ -952,11 +955,12 @@
                     usage();
                 } else {
                     String name = t.nextToken();
                     boolean all = name.equals("-a");
                     Threads threads = VM.getVM().getThreads();
-                    for (JavaThread thread = threads.first(); thread != null; thread = thread.next()) {
+                    for (int i = 0; i < threads.getNumberOfThreads(); i++) {
+                        JavaThread thread = threads.getJavaThreadAt(i);
                         ByteArrayOutputStream bos = new ByteArrayOutputStream();
                         thread.printThreadIDOn(new PrintStream(bos));
                         if (all || bos.toString().equals(name)) {
                             if (thread instanceof CompilerThread) {
                                 CompilerThread ct = (CompilerThread)thread;
@@ -1435,11 +1439,12 @@
                 String type = t.nextToken();
                 final Address value = VM.getVM().getDebugger().parseAddress(t.nextToken());
                 final long stride = VM.getVM().getAddressSize();
                 if (type.equals("threads")) {
                     Threads threads = VM.getVM().getThreads();
-                    for (JavaThread thread = threads.first(); thread != null; thread = thread.next()) {
+                    for (int i = 0; i < threads.getNumberOfThreads(); i++) {
+                        JavaThread thread = threads.getJavaThreadAt(i);
                         Address base = thread.getStackBase();
                         Address end = thread.getLastJavaSP();
                         if (end == null) continue;
                         if (end.lessThan(base)) {
                             Address tmp = base;
@@ -1559,11 +1564,12 @@
                     usage();
                 } else {
                     String name = t.nextToken();
                     Threads threads = VM.getVM().getThreads();
                     boolean all = name.equals("-a");
-                    for (JavaThread thread = threads.first(); thread != null; thread = thread.next()) {
+                    for (int i = 0; i < threads.getNumberOfThreads(); i++) {
+                        JavaThread thread = threads.getJavaThreadAt(i);
                         ByteArrayOutputStream bos = new ByteArrayOutputStream();
                         thread.printThreadIDOn(new PrintStream(bos));
                         if (all || bos.toString().equals(name)) {
                             out.println("Thread " + bos.toString() + " Address: " + thread.getAddress());
                             HTMLGenerator gen = new HTMLGenerator(false);
@@ -1588,11 +1594,12 @@
                     usage();
                 } else {
                     String name = t.nextToken();
                     Threads threads = VM.getVM().getThreads();
                     boolean all = name.equals("-a");
-                    for (JavaThread thread = threads.first(); thread != null; thread = thread.next()) {
+                    for (int i = 0; i < threads.getNumberOfThreads(); i++) {
+                        JavaThread thread = threads.getJavaThreadAt(i);
                         ByteArrayOutputStream bos = new ByteArrayOutputStream();
                         thread.printThreadIDOn(new PrintStream(bos));
                         if (all || bos.toString().equals(name)) {
                             out.println("Thread " + bos.toString() + " Address " + thread.getAddress());
                             thread.printInfoOn(out);
@@ -1611,11 +1618,12 @@
             public void doit(Tokens t) {
                 if (t.countTokens() != 0) {
                     usage();
                 } else {
                     Threads threads = VM.getVM().getThreads();
-                    for (JavaThread thread = threads.first(); thread != null; thread = thread.next()) {
+                    for (int i = 0; i < threads.getNumberOfThreads(); i++) {
+                        JavaThread thread = threads.getJavaThreadAt(i);
                         thread.printThreadIDOn(out);
                         out.println(" " + thread.getThreadName());
                         thread.printInfoOn(out);
                         out.println("\n...");
                     }
@@ -1629,11 +1637,12 @@
                     usage();
                 } else {
                     ArrayList nmethods = new ArrayList();
                     Threads threads = VM.getVM().getThreads();
                     HTMLGenerator gen = new HTMLGenerator(false);
-                    for (JavaThread thread = threads.first(); thread != null; thread = thread.next()) {
+                    for (int i = 0; i < threads.getNumberOfThreads(); i++) {
+                        JavaThread thread = threads.getJavaThreadAt(i);
                         try {
                             for (JavaVFrame vf = thread.getLastJavaVFrameDbg(); vf != null; vf = vf.javaSender()) {
                                 if (vf instanceof CompiledVFrame) {
                                     NMethod c = ((CompiledVFrame)vf).getCode();
                                     if (!nmethods.contains(c)) {
@@ -1720,10 +1729,12 @@
         // nothing for now..
     }
 
     // called after debuggee attach
     private void postAttach() {
+        /*
+         * JavaScript engine no longer works. For now disable it. Eventually we will remove it.
         // create JavaScript engine and start it
         try {
             jsengine = new JSJavaScriptEngine() {
                         private ObjectReader reader = new ObjectReader();
                         private JSJavaFactory factory = new JSJavaFactoryImpl();
@@ -1763,10 +1774,11 @@
             System.out.println("Warning! JS Engine can't start, some commands will not be available.");
             if (verboseExceptions) {
                 ex.printStackTrace(out);
             }
         }
+        */
     }
 
     public void registerCommand(String cmd, String usage, final String func) {
         commands.put(cmd, new Command(cmd, usage, false) {
                               public void doit(Tokens t) {
