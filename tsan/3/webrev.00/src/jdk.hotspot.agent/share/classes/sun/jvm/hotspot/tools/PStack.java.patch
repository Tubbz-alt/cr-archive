diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/PStack.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/PStack.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/PStack.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/tools/PStack.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -128,14 +128,23 @@
                          // look for known code blobs
                          CodeCache c = VM.getVM().getCodeCache();
                          if (c.contains(pc)) {
                             CodeBlob cb = c.findBlobUnsafe(pc);
                             if (cb.isNMethod()) {
-                               names = getJavaNames(th, f.localVariableBase());
-                               // just print compiled code, if can't determine method
-                               if (names == null || names.length == 0) {
-                                  out.println("<Unknown compiled code>");
+                               if (cb.isNativeMethod()) {
+                                  out.print(((CompiledMethod)cb).getMethod().externalNameAndSignature());
+                                  long diff = pc.minus(cb.codeBegin());
+                                  if (diff != 0L) {
+                                    out.print(" + 0x" + Long.toHexString(diff));
+                                  }
+                                  out.println(" (Native method)");
+                               } else {
+                                  names = getJavaNames(th, f.localVariableBase());
+                                  // just print compiled code, if can't determine method
+                                  if (names == null || names.length == 0) {
+                                    out.println("<Unknown compiled code>");
+                                  }
                                }
                             } else if (cb.isBufferBlob()) {
                                out.println("<StubRoutines>");
                             } else if (cb.isRuntimeStub()) {
                                out.println("<RuntimeStub>");
@@ -199,11 +208,12 @@
    private void initJFrameCache() {
       // cache frames for subsequent reference
       jframeCache = new HashMap();
       proxyToThread = new HashMap();
       Threads threads = VM.getVM().getThreads();
-      for (JavaThread cur = threads.first(); cur != null; cur = cur.next()) {
+      for (int i = 0; i < threads.getNumberOfThreads(); i++) {
+         JavaThread cur = threads.getJavaThreadAt(i);
          List tmp = new ArrayList(10);
          try {
             for (JavaVFrame vf = cur.getLastJavaVFrameDbg(); vf != null; vf = vf.javaSender()) {
                tmp.add(vf);
             }
