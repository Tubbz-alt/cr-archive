diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/util/MandatoryWarningHandler.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/util/MandatoryWarningHandler.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/util/MandatoryWarningHandler.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/util/MandatoryWarningHandler.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -24,10 +24,11 @@
  */
 
 package com.sun.tools.javac.util;
 
 import java.util.HashSet;
+import java.util.Objects;
 import java.util.Set;
 import javax.tools.JavaFileObject;
 
 import com.sun.tools.javac.code.Lint.LintCategory;
 import com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition;
@@ -145,11 +146,11 @@
                 }
                 deferredDiagnosticSource = currentSource;
                 deferredDiagnosticArg = currentSource;
             } else if ((deferredDiagnosticKind == DeferredDiagnosticKind.IN_FILE
                         || deferredDiagnosticKind == DeferredDiagnosticKind.ADDITIONAL_IN_FILE)
-                       && !equal(deferredDiagnosticSource, currentSource)) {
+                       && !Objects.equals(deferredDiagnosticSource, currentSource)) {
                 // additional errors in more than one source file
                 deferredDiagnosticKind = DeferredDiagnosticKind.ADDITIONAL_IN_FILES;
                 deferredDiagnosticArg = null;
             }
         } else {
@@ -157,11 +158,11 @@
                 // warnings in a single source
                 deferredDiagnosticKind = DeferredDiagnosticKind.IN_FILE;
                 deferredDiagnosticSource = currentSource;
                 deferredDiagnosticArg = currentSource;
             }  else if (deferredDiagnosticKind == DeferredDiagnosticKind.IN_FILE &&
-                        !equal(deferredDiagnosticSource, currentSource)) {
+                        !Objects.equals(deferredDiagnosticSource, currentSource)) {
                 // warnings in multiple source files
                 deferredDiagnosticKind = DeferredDiagnosticKind.IN_FILES;
                 deferredDiagnosticArg = null;
             }
         }
@@ -180,32 +181,25 @@
             if (!verbose)
                 logMandatoryNote(deferredDiagnosticSource, prefix + ".recompile");
         }
     }
 
-    /**
-     * Check two objects, each possibly null, are either both null or are equal.
-     */
-    private static boolean equal(Object o1, Object o2) {
-        return ((o1 == null || o2 == null) ? (o1 == o2) : o1.equals(o2));
-    }
-
     /**
      * The log to which to report warnings.
      */
-    private Log log;
+    private final Log log;
 
     /**
      * Whether or not to report individual warnings, or simply to report a
      * single aggregate warning at the end of the compilation.
      */
-    private boolean verbose;
+    private final boolean verbose;
 
     /**
      * The common prefix for all I18N message keys generated by this handler.
      */
-    private String prefix;
+    private final String prefix;
 
     /**
      * A set containing the names of the source files for which specific
      * warnings have been generated -- i.e. in verbose mode.  If a source name
      * appears in this list, then deferred diagnostics will be phrased to
@@ -266,6 +260,13 @@
         if (enforceMandatory)
             log.mandatoryNote(file, new Note("compiler", msg, args));
         else
             log.note(file, new Note("compiler", msg, args));
     }
+
+    public void clear() {
+        sourcesWithReportedWarnings = null;
+        deferredDiagnosticKind = null;
+        deferredDiagnosticSource = null;
+        deferredDiagnosticArg = null;
+    }
 }
