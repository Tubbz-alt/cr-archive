diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Operators.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Operators.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Operators.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Operators.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -227,11 +227,11 @@
         return opname[tag.operatorIndex()];
     }
 
     /**
      * The constants in this enum represent the types upon which all the operator helpers
-     * operate upon. This allows lazy and consise mapping between a type name and a type instance.
+     * operate upon. This allows lazy and concise mapping between a type name and a type instance.
      */
     enum OperatorType {
         BYTE(syms -> syms.byteType),
         SHORT(syms -> syms.shortType),
         INT(syms -> syms.intType),
@@ -278,11 +278,11 @@
             this.name = operatorName(tag);
         }
 
         /**
          * This routine implements the main operator lookup process. Each operator is tested
-         * using an applicability predicate; if the test suceeds that same operator is returned,
+         * using an applicability predicate; if the test succeeds that same operator is returned,
          * otherwise a dummy symbol is returned.
          */
         final OperatorSymbol doLookup(Predicate<OperatorSymbol> applicabilityTest) {
             return Stream.of(alternatives.orElseGet(this::initOperators))
                     .filter(applicabilityTest)
