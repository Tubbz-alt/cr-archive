diff a/src/jdk.compiler/share/classes/com/sun/tools/sjavac/comp/PubapiVisitor.java b/src/jdk.compiler/share/classes/com/sun/tools/sjavac/comp/PubapiVisitor.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/sjavac/comp/PubapiVisitor.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/sjavac/comp/PubapiVisitor.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -28,17 +28,13 @@
 import static javax.lang.model.element.Modifier.PRIVATE;
 
 import java.util.List;
 import java.util.stream.Collectors;
 
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.TypeElement;
-import javax.lang.model.element.TypeParameterElement;
-import javax.lang.model.element.VariableElement;
+import javax.lang.model.element.*;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.ElementScanner9;
+import javax.lang.model.util.ElementScanner14;
 
 import com.sun.tools.javac.code.Symbol.ClassSymbol;
 import com.sun.tools.javac.util.DefinedBy;
 import com.sun.tools.javac.util.DefinedBy.Api;
 import com.sun.tools.sjavac.pubapi.PubApi;
@@ -54,11 +50,12 @@
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
  */
-public class PubapiVisitor extends ElementScanner9<Void, Void> {
+@SuppressWarnings("preview")
+public class PubapiVisitor extends ElementScanner14<Void, Void> {
 
     private PubApi collectedApi = new PubApi();
 
     private boolean isNonPrivate(Element e) {
         return !e.getModifiers().contains(PRIVATE);
@@ -125,10 +122,21 @@
         // then this class is never visible outside of the package anyway, so
         // we are allowed to ignore it here.
         return null;
     }
 
+    @SuppressWarnings("preview")
+    @Override @DefinedBy(Api.LANGUAGE_MODEL)
+    public Void visitRecordComponent(RecordComponentElement e, Void p) {
+        PubVar v = new PubVar(e.getModifiers(),
+                TypeDesc.fromType(e.asType()),
+                e.toString(),
+                null);
+        collectedApi.recordComponents.put(v.identifier, v);
+        return null;
+    }
+
     @Override @DefinedBy(Api.LANGUAGE_MODEL)
     public Void visitExecutable(ExecutableElement e, Void p) {
         if (isNonPrivate(e)) {
             PubMethod m = new PubMethod(e.getModifiers(),
                                         getTypeParameters(e.getTypeParameters()),
