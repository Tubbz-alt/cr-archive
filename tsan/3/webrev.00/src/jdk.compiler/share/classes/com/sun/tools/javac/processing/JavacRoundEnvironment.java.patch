diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/processing/JavacRoundEnvironment.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/processing/JavacRoundEnvironment.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/processing/JavacRoundEnvironment.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/processing/JavacRoundEnvironment.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -107,13 +107,13 @@
     }
 
     /**
      * Returns the elements annotated with the given annotation type.
      * Only type elements <i>included</i> in this round of annotation
-     * processing, or declarations of members, parameters, or type
-     * parameters declared within those, are returned.  Included type
-     * elements are {@linkplain #getRootElements specified
+     * processing, or declarations of members, parameters, type
+     * parameters, or record components declared within those, are returned.
+     * Included type elements are {@linkplain #getRootElements specified
      * types} and any types nested within them.
      *
      * @param a  annotation type being requested
      * @return the elements annotated with the given annotation type,
      * or an empty set if there are none
@@ -121,12 +121,12 @@
     @DefinedBy(Api.ANNOTATION_PROCESSING)
     public Set<? extends Element> getElementsAnnotatedWith(TypeElement a) {
         throwIfNotAnnotation(a);
 
         Set<Element> result = Collections.emptySet();
-        ElementScanner9<Set<Element>, TypeElement> scanner =
-            new AnnotationSetScanner(result);
+        @SuppressWarnings("preview")
+        var scanner = new AnnotationSetScanner(result);
 
         for (Element element : rootElements)
             result = scanner.scan(element, a);
 
         return result;
@@ -142,22 +142,23 @@
             throwIfNotAnnotation(annotation);
             annotationSet.add(annotation);
         }
 
         Set<Element> result = Collections.emptySet();
-        ElementScanner9<Set<Element>, Set<TypeElement>> scanner =
-            new AnnotationSetMultiScanner(result);
+        @SuppressWarnings("preview")
+        var scanner = new AnnotationSetMultiScanner(result);
 
         for (Element element : rootElements)
             result = scanner.scan(element, annotationSet);
 
         return result;
     }
 
     // Could be written as a local class inside getElementsAnnotatedWith
+    @SuppressWarnings("preview")
     private class AnnotationSetScanner extends
-        ElementScanningIncludingTypeParameters<Set<Element>, TypeElement> {
+        ElementScanner14<Set<Element>, TypeElement> {
         // Insertion-order preserving set
         private Set<Element> annotatedElements = new LinkedHashSet<>();
 
         AnnotationSetScanner(Set<Element> defaultSet) {
             super(defaultSet);
@@ -187,12 +188,13 @@
             return annotatedElements;
         }
     }
 
     // Could be written as a local class inside getElementsAnnotatedWithAny
+    @SuppressWarnings("preview")
     private class AnnotationSetMultiScanner extends
-        ElementScanningIncludingTypeParameters<Set<Element>, Set<TypeElement>> {
+        ElementScanner14<Set<Element>, Set<TypeElement>> {
         // Insertion-order preserving set
         private Set<Element> annotatedElements = new LinkedHashSet<>();
 
         AnnotationSetMultiScanner(Set<Element> defaultSet) {
             super(defaultSet);
@@ -221,32 +223,10 @@
             // Do not scan a package
             return annotatedElements;
         }
     }
 
-    private static abstract class ElementScanningIncludingTypeParameters<R, P>
-        extends ElementScanner9<R, P> {
-
-        protected ElementScanningIncludingTypeParameters(R defaultValue) {
-            super(defaultValue);
-        }
-
-        @Override @DefinedBy(Api.LANGUAGE_MODEL)
-        public R visitType(TypeElement e, P p) {
-            // Type parameters are not considered to be enclosed by a type
-            scan(e.getTypeParameters(), p);
-            return super.visitType(e, p);
-        }
-
-        @Override @DefinedBy(Api.LANGUAGE_MODEL)
-        public R visitExecutable(ExecutableElement e, P p) {
-            // Type parameters are not considered to be enclosed by an executable
-            scan(e.getTypeParameters(), p);
-            return super.visitExecutable(e, p);
-        }
-    }
-
     /**
      * {@inheritDoc}
      */
     @DefinedBy(Api.ANNOTATION_PROCESSING)
     public Set<? extends Element> getElementsAnnotatedWith(Class<? extends Annotation> a) {
