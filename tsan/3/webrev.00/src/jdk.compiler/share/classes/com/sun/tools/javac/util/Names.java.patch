diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/util/Names.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/util/Names.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/util/Names.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/util/Names.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,12 +23,14 @@
  * questions.
  */
 
 package com.sun.tools.javac.util;
 
+import java.util.Set;
+
 /**
- * Access to the compiler's name table.  STandard names are defined,
+ * Access to the compiler's name table.  Standard names are defined,
  * as well as methods to create new names.
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
@@ -68,10 +70,11 @@
     public final Name to;
     public final Name transitive;
     public final Name uses;
     public final Name open;
     public final Name with;
+    public final Name yield;
 
     // field and method names
     public final Name _name;
     public final Name addSuppressed;
     public final Name any;
@@ -83,10 +86,11 @@
     public final Name desiredAssertionStatus;
     public final Name equals;
     public final Name error;
     public final Name finalize;
     public final Name forRemoval;
+    public final Name essentialAPI;
     public final Name getClass;
     public final Name hasNext;
     public final Name hashCode;
     public final Name init;
     public final Name iterator;
@@ -97,10 +101,12 @@
     public final Name serialVersionUID;
     public final Name toString;
     public final Name value;
     public final Name valueOf;
     public final Name values;
+    public final Name readResolve;
+    public final Name readObject;
 
     // class names
     public final Name java_io_Serializable;
     public final Name java_lang_Class;
     public final Name java_lang_Cloneable;
@@ -138,10 +144,11 @@
     public final Name MethodParameters;
     public final Name Module;
     public final Name ModuleResolution;
     public final Name NestHost;
     public final Name NestMembers;
+    public final Name Record;
     public final Name RuntimeInvisibleAnnotations;
     public final Name RuntimeInvisibleParameterAnnotations;
     public final Name RuntimeInvisibleTypeAnnotations;
     public final Name RuntimeVisibleAnnotations;
     public final Name RuntimeVisibleParameterAnnotations;
@@ -165,10 +172,11 @@
     public final Name PACKAGE;
     public final Name PARAMETER;
     public final Name TYPE;
     public final Name TYPE_PARAMETER;
     public final Name TYPE_USE;
+    public final Name RECORD_COMPONENT;
 
     // members of java.lang.annotation.RetentionPolicy
     public final Name CLASS;
     public final Name RUNTIME;
     public final Name SOURCE;
@@ -188,10 +196,22 @@
 
     // string concat
     public final Name makeConcat;
     public final Name makeConcatWithConstants;
 
+    // record related
+    // members of java.lang.runtime.ObjectMethods
+    public final Name bootstrap;
+
+    public final Name record;
+
+    // serialization members, used by records too
+    public final Name serialPersistentFields;
+    public final Name writeObject;
+    public final Name writeReplace;
+    public final Name readObjectNoData;
+
     public final Name.Table table;
 
     public Names(Context context) {
         Options options = Options.instance(context);
         table = createTable(options);
@@ -217,10 +237,11 @@
         to = fromString("to");
         transitive = fromString("transitive");
         uses = fromString("uses");
         open = fromString("open");
         with = fromString("with");
+        yield = fromString("yield");
 
         // field and method names
         _name = fromString("name");
         addSuppressed = fromString("addSuppressed");
         any = fromString("<any>");
@@ -232,10 +253,11 @@
         desiredAssertionStatus = fromString("desiredAssertionStatus");
         equals = fromString("equals");
         error = fromString("<error>");
         finalize = fromString("finalize");
         forRemoval = fromString("forRemoval");
+        essentialAPI = fromString("essentialAPI");
         getClass = fromString("getClass");
         hasNext = fromString("hasNext");
         hashCode = fromString("hashCode");
         init = fromString("<init>");
         iterator = fromString("iterator");
@@ -246,10 +268,12 @@
         serialVersionUID = fromString("serialVersionUID");
         toString = fromString("toString");
         value = fromString("value");
         valueOf = fromString("valueOf");
         values = fromString("values");
+        readResolve = fromString("readResolve");
+        readObject = fromString("readObject");
         dollarThis = fromString("$this");
 
         // class names
         java_io_Serializable = fromString("java.io.Serializable");
         java_lang_Class = fromString("java.lang.Class");
@@ -288,10 +312,11 @@
         MethodParameters = fromString("MethodParameters");
         Module = fromString("Module");
         ModuleResolution = fromString("ModuleResolution");
         NestHost = fromString("NestHost");
         NestMembers = fromString("NestMembers");
+        Record = fromString("Record");
         RuntimeInvisibleAnnotations = fromString("RuntimeInvisibleAnnotations");
         RuntimeInvisibleParameterAnnotations = fromString("RuntimeInvisibleParameterAnnotations");
         RuntimeInvisibleTypeAnnotations = fromString("RuntimeInvisibleTypeAnnotations");
         RuntimeVisibleAnnotations = fromString("RuntimeVisibleAnnotations");
         RuntimeVisibleParameterAnnotations = fromString("RuntimeVisibleParameterAnnotations");
@@ -315,10 +340,11 @@
         PACKAGE = fromString("PACKAGE");
         PARAMETER = fromString("PARAMETER");
         TYPE = fromString("TYPE");
         TYPE_PARAMETER = fromString("TYPE_PARAMETER");
         TYPE_USE = fromString("TYPE_USE");
+        RECORD_COMPONENT = fromString("RECORD_COMPONENT");
 
         // members of java.lang.annotation.RetentionPolicy
         CLASS = fromString("CLASS");
         RUNTIME = fromString("RUNTIME");
         SOURCE = fromString("SOURCE");
@@ -336,10 +362,18 @@
         altMetafactory = fromString("altMetafactory");
 
         // string concat
         makeConcat = fromString("makeConcat");
         makeConcatWithConstants = fromString("makeConcatWithConstants");
+
+        bootstrap = fromString("bootstrap");
+        record = fromString("record");
+
+        serialPersistentFields = fromString("serialPersistentFields");
+        writeObject = fromString("writeObject");
+        writeReplace = fromString("writeReplace");
+        readObjectNoData = fromString("readObjectNoData");
     }
 
     protected Name.Table createTable(Options options) {
         boolean useUnsharedTable = options.isSet("useUnsharedTable");
         if (useUnsharedTable)
