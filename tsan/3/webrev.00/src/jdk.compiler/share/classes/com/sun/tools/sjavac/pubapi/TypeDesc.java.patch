diff a/src/jdk.compiler/share/classes/com/sun/tools/sjavac/pubapi/TypeDesc.java b/src/jdk.compiler/share/classes/com/sun/tools/sjavac/pubapi/TypeDesc.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/sjavac/pubapi/TypeDesc.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/sjavac/pubapi/TypeDesc.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -34,11 +34,11 @@
 import javax.lang.model.type.PrimitiveType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVariable;
 import javax.lang.model.type.TypeVisitor;
-import javax.lang.model.util.SimpleTypeVisitor9;
+import javax.lang.model.util.SimpleTypeVisitor14;
 
 import com.sun.tools.javac.code.Type.ClassType;
 import com.sun.tools.javac.util.DefinedBy;
 import com.sun.tools.javac.util.DefinedBy.Api;
 import com.sun.tools.javac.util.StringUtils;
@@ -86,11 +86,11 @@
 
         throw new AssertionError("Unhandled type: " + td.typeKind);
     }
 
     public static TypeDesc fromType(TypeMirror type) {
-        TypeVisitor<TypeDesc, Void> v = new SimpleTypeVisitor9<TypeDesc, Void>() {
+        TypeVisitor<TypeDesc, Void> v = new SimpleTypeVisitor14<TypeDesc, Void>() {
             @Override @DefinedBy(Api.LANGUAGE_MODEL)
             public TypeDesc visitArray(ArrayType t, Void p) {
                 return new ArrayTypeDesc(t.getComponentType().accept(this, p));
             }
 
