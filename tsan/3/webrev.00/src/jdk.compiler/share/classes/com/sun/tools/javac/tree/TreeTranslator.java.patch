diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeTranslator.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeTranslator.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeTranslator.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeTranslator.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -256,12 +256,15 @@
         tree.expr = translate(tree.expr);
         result = tree;
     }
 
     public void visitBreak(JCBreak tree) {
-        if (tree.isValueBreak())
-            tree.value = translate(tree.value);
+        result = tree;
+    }
+
+    public void visitYield(JCYield tree) {
+        tree.value = translate(tree.value);
         result = tree;
     }
 
     public void visitContinue(JCContinue tree) {
         result = tree;
@@ -349,11 +352,16 @@
         result = tree;
     }
 
     public void visitTypeTest(JCInstanceOf tree) {
         tree.expr = translate(tree.expr);
-        tree.clazz = translate(tree.clazz);
+        tree.pattern = translate(tree.pattern);
+        result = tree;
+    }
+
+    public void visitBindingPattern(JCBindingPattern tree) {
+        tree.vartype = translate(tree.vartype);
         result = tree;
     }
 
     public void visitIndexed(JCArrayAccess tree) {
         tree.indexed = translate(tree.indexed);
