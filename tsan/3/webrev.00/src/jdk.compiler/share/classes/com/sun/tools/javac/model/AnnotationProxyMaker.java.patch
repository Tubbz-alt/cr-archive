diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/model/AnnotationProxyMaker.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/model/AnnotationProxyMaker.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/model/AnnotationProxyMaker.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/model/AnnotationProxyMaker.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -30,10 +30,11 @@
 import java.lang.annotation.*;
 import java.lang.reflect.Array;
 import java.lang.reflect.Method;
 import java.util.LinkedHashMap;
 import java.util.Map;
+import java.util.stream.Collectors;
 import sun.reflect.annotation.*;
 
 import javax.lang.model.type.MirroredTypeException;
 import javax.lang.model.type.MirroredTypesException;
 import javax.lang.model.type.TypeMirror;
@@ -290,11 +291,11 @@
             type = t;
             typeString = t.toString();
         }
 
         public String toString() {
-            return typeString;
+            return typeString + ".class";
         }
 
         public int hashCode() {
             return (type != null ? type : typeString).hashCode();
         }
@@ -318,11 +319,11 @@
     }
 
 
     /**
      * ExceptionProxy for MirroredTypesException.
-     * The toString, hashCode, and equals methods foward to the underlying
+     * The toString, hashCode, and equals methods forward to the underlying
      * types.
      */
     private static final class MirroredTypesExceptionProxy extends ExceptionProxy {
         static final long serialVersionUID = 269;
 
@@ -333,11 +334,13 @@
             types = ts;
             typeStrings = ts.toString();
         }
 
         public String toString() {
-            return typeStrings;
+            return types.stream()
+                .map(t -> t.toString() + ".class")
+                .collect(Collectors.joining(", ", "{", "}"));
         }
 
         public int hashCode() {
             return (types != null ? types : typeStrings).hashCode();
         }
