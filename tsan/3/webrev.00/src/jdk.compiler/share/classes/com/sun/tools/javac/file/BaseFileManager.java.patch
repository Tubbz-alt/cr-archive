diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/file/BaseFileManager.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/file/BaseFileManager.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/file/BaseFileManager.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/file/BaseFileManager.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -42,10 +42,11 @@
 import java.nio.charset.IllegalCharsetNameException;
 import java.nio.charset.UnsupportedCharsetException;
 import java.nio.file.Path;
 import java.util.Collection;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
 
@@ -63,11 +64,11 @@
 import com.sun.tools.javac.util.DefinedBy.Api;
 import com.sun.tools.javac.util.Log;
 import com.sun.tools.javac.util.Options;
 
 /**
- * Utility methods for building a filemanager.
+ * Utility methods for building a file manager.
  * There are no references here to file-system specific objects such as
  * java.io.File or java.nio.file.Path.
  */
 public abstract class BaseFileManager implements JavaFileManager {
     protected BaseFileManager(Charset charset) {
@@ -89,11 +90,11 @@
         boolean warn = options.isLintSet("path");
         locations.update(log, warn, FSInfo.instance(context));
 
         // Setting this option is an indication that close() should defer actually closing
         // the file manager until after a specified period of inactivity.
-        // This is to accomodate clients which save references to Symbols created for use
+        // This is to accommodate clients which save references to Symbols created for use
         // within doclets or annotation processors, and which then attempt to use those
         // references after the tool exits, having closed any internally managed file manager.
         // Ideally, such clients should run the tool via the javax.tools API, providing their
         // own file manager, which can be closed by the client when all use of that file
         // manager is complete.
@@ -171,10 +172,14 @@
     }
 
     private long lastUsedTime = System.currentTimeMillis();
     protected long deferredCloseTimeout = 0;
 
+    public void clear() {
+        new HashSet<>(options.keySet()).forEach(k -> options.remove(k));
+    }
+
     protected ClassLoader getClassLoader(URL[] urls) {
         ClassLoader thisClassLoader = getClass().getClassLoader();
 
         // Allow the following to specify a closeable classloader
         // other than URLClassLoader.
@@ -196,10 +201,14 @@
 
     public boolean isDefaultBootClassPath() {
         return locations.isDefaultBootClassPath();
     }
 
+    public boolean isDefaultSystemModulesPath() {
+        return locations.isDefaultSystemModulesPath();
+    }
+
     // <editor-fold defaultstate="collapsed" desc="Option handling">
     @Override @DefinedBy(Api.COMPILER)
     public boolean handleOption(String current, Iterator<String> remaining) {
         OptionHelper helper = new GrumpyHelper(log) {
             @Override
@@ -235,11 +244,11 @@
         }
 
         return true;
     }
     // where
-        private static final Set<Option> javacFileManagerOptions =
+        protected static final Set<Option> javacFileManagerOptions =
             Option.getJavacFileManagerOptions();
 
     @Override @DefinedBy(Api.COMPILER)
     public int isSupportedOption(String option) {
         Option o = Option.lookup(option, javacFileManagerOptions);
