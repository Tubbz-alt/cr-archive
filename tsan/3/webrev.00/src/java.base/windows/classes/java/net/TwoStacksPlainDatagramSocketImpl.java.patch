diff a/src/java.base/windows/classes/java/net/TwoStacksPlainDatagramSocketImpl.java b/src/java.base/windows/classes/java/net/TwoStacksPlainDatagramSocketImpl.java
--- a/src/java.base/windows/classes/java/net/TwoStacksPlainDatagramSocketImpl.java
+++ b/src/java.base/windows/classes/java/net/TwoStacksPlainDatagramSocketImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -76,19 +76,22 @@
     private boolean reuseAddressEmulated;
 
     // emulates SO_REUSEADDR when exclusiveBind is true and socket is bound
     private boolean isReuseAddress;
 
-    TwoStacksPlainDatagramSocketImpl(boolean exclBind) {
+    TwoStacksPlainDatagramSocketImpl(boolean exclBind, boolean isMulticast) {
+        super(isMulticast);
         exclusiveBind = exclBind;
     }
 
     protected synchronized void create() throws SocketException {
         fd1 = new FileDescriptor();
         try {
             super.create();
-            SocketCleanable.register(fd1);
+            // make SocketCleanable treat fd1 as a stream socket
+            // to avoid touching the counter in ResourceManager
+            SocketCleanable.register(fd1, true);
         } catch (SocketException e) {
             fd1 = null;
             throw e;
         }
     }
@@ -111,12 +114,14 @@
         SocketCleanable.unregister(fd);
         SocketCleanable.unregister(fd1);
 
         bind0(lport, laddr, exclusiveBind);
 
-        SocketCleanable.register(fd);
-        SocketCleanable.register(fd1);
+        SocketCleanable.register(fd, false);
+        // make SocketCleanable treat fd1 as a stream socket
+        // to avoid touching the counter in ResourceManager
+        SocketCleanable.register(fd1, true);
     }
 
     protected synchronized void receive(DatagramPacket p)
         throws IOException {
         try {
@@ -182,11 +187,11 @@
 
     protected synchronized native void bind0(int lport, InetAddress laddr,
                                              boolean exclBind)
         throws SocketException;
 
-    protected native void send(DatagramPacket p) throws IOException;
+    protected native void send0(DatagramPacket p) throws IOException;
 
     protected synchronized native int peek(InetAddress i) throws IOException;
 
     protected synchronized native int peekData(DatagramPacket p) throws IOException;
 
