diff a/src/java.base/windows/classes/java/net/DualStackPlainDatagramSocketImpl.java b/src/java.base/windows/classes/java/net/DualStackPlainDatagramSocketImpl.java
--- a/src/java.base/windows/classes/java/net/DualStackPlainDatagramSocketImpl.java
+++ b/src/java.base/windows/classes/java/net/DualStackPlainDatagramSocketImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,13 +23,18 @@
  * questions.
  */
 package java.net;
 
 import java.io.IOException;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
 import jdk.internal.access.SharedSecrets;
 import jdk.internal.access.JavaIOFileDescriptorAccess;
 
+import sun.net.ext.ExtendedSocketOptions;
+
 /**
  * This class defines the plain DatagramSocketImpl that is used on
  * Windows platforms greater than or equal to Windows Vista. These
  * platforms have a dual layer TCP/IP stack and can handle both IPv4
  * and IPV6 through a single file descriptor.
@@ -60,10 +65,11 @@
 
     // emulates SO_REUSEADDR when exclusiveBind is true and socket is bound
     private boolean isReuseAddress;
 
     DualStackPlainDatagramSocketImpl(boolean exclBind) {
+        super(false);
         exclusiveBind = exclBind;
     }
 
     protected void datagramSocketCreate() throws SocketException {
         if (fd == null)
@@ -122,11 +128,11 @@
             throw new NullPointerException("packet buffer");
 
         socketReceiveOrPeekData(nativefd, p, timeout, connected, false /*receive*/);
     }
 
-    protected void send(DatagramPacket p) throws IOException {
+    protected void send0(DatagramPacket p) throws IOException {
         int nativefd = checkAndReturnNativeFD();
 
         if (p == null)
             throw new NullPointerException("null packet");
 
@@ -227,10 +233,23 @@
         }
 
         return returnValue;
     }
 
+    @Override
+    protected Set<SocketOption<?>> supportedOptions() {
+        HashSet<SocketOption<?>> options = new HashSet<>();
+        options.add(StandardSocketOptions.SO_SNDBUF);
+        options.add(StandardSocketOptions.SO_RCVBUF);
+        options.add(StandardSocketOptions.SO_REUSEADDR);
+        options.add(StandardSocketOptions.SO_BROADCAST);
+        options.add(StandardSocketOptions.IP_TOS);
+
+        options.addAll(ExtendedSocketOptions.datagramSocketOptions());
+        return Collections.unmodifiableSet(options);
+    }
+
     /* Multicast specific methods.
      * Multicasting on a dual layer TCP/IP stack is always done with
      * TwoStacksPlainDatagramSocketImpl. This is to overcome the lack
      * of behavior defined for multicasting over a dual layer socket by the RFC.
      */
