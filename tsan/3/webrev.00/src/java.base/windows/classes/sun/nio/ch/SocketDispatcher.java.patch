diff a/src/java.base/windows/classes/sun/nio/ch/SocketDispatcher.java b/src/java.base/windows/classes/sun/nio/ch/SocketDispatcher.java
--- a/src/java.base/windows/classes/sun/nio/ch/SocketDispatcher.java
+++ b/src/java.base/windows/classes/sun/nio/ch/SocketDispatcher.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,23 +23,26 @@
  * questions.
  */
 
 package sun.nio.ch;
 
-import java.io.*;
+import java.io.FileDescriptor;
+import java.io.IOException;
+
+import jdk.internal.access.JavaIOFileDescriptorAccess;
+import jdk.internal.access.SharedSecrets;
 
 /**
  * Allows different platforms to call different native methods
  * for read and write operations.
  */
 
-class SocketDispatcher extends NativeDispatcher
-{
+class SocketDispatcher extends NativeDispatcher {
+    private static final JavaIOFileDescriptorAccess fdAccess =
+            SharedSecrets.getJavaIOFileDescriptorAccess();
 
-    static {
-        IOUtil.load();
-    }
+    SocketDispatcher() { }
 
     int read(FileDescriptor fd, long address, int len) throws IOException {
         return read0(fd, address, len);
     }
 
@@ -54,29 +57,39 @@
     long writev(FileDescriptor fd, long address, int len) throws IOException {
         return writev0(fd, address, len);
     }
 
     void preClose(FileDescriptor fd) throws IOException {
-        preClose0(fd);
+        throw new UnsupportedOperationException();
     }
 
     void close(FileDescriptor fd) throws IOException {
-        close0(fd);
+        invalidateAndClose(fd);
+    }
+
+    static void invalidateAndClose(FileDescriptor fd) throws IOException {
+        assert fd.valid();
+        int fdVal = fdAccess.get(fd);
+        fdAccess.set(fd, -1);
+        close0(fdVal);
     }
 
-    //-- Native methods
-    static native int read0(FileDescriptor fd, long address, int len)
+    // -- Native methods --
+
+    private static native int read0(FileDescriptor fd, long address, int len)
         throws IOException;
 
-    static native long readv0(FileDescriptor fd, long address, int len)
+    private static native long readv0(FileDescriptor fd, long address, int len)
         throws IOException;
 
-    static native int write0(FileDescriptor fd, long address, int len)
+    private static native int write0(FileDescriptor fd, long address, int len)
         throws IOException;
 
-    static native long writev0(FileDescriptor fd, long address, int len)
+    private static native long writev0(FileDescriptor fd, long address, int len)
         throws IOException;
 
-    static native void preClose0(FileDescriptor fd) throws IOException;
+    private static native void close0(int fdVal) throws IOException;
 
-    static native void close0(FileDescriptor fd) throws IOException;
+    static {
+        IOUtil.load();
+    }
 }
