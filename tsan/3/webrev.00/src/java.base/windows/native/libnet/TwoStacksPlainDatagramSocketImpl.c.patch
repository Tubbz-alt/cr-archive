diff a/src/java.base/windows/native/libnet/TwoStacksPlainDatagramSocketImpl.c b/src/java.base/windows/native/libnet/TwoStacksPlainDatagramSocketImpl.c
--- a/src/java.base/windows/native/libnet/TwoStacksPlainDatagramSocketImpl.c
+++ b/src/java.base/windows/native/libnet/TwoStacksPlainDatagramSocketImpl.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -413,15 +413,15 @@
     WSAIoctl(fd, SIO_UDP_CONNRESET, &t, sizeof(t), &x1, sizeof(x1), &x2, 0, 0);
 }
 
 /*
  * Class:     java_net_TwoStacksPlainDatagramSocketImpl
- * Method:    send
+ * Method:    send0
  * Signature: (Ljava/net/DatagramPacket;)V
  */
 JNIEXPORT void JNICALL
-Java_java_net_TwoStacksPlainDatagramSocketImpl_send
+Java_java_net_TwoStacksPlainDatagramSocketImpl_send0
   (JNIEnv *env, jobject this, jobject packet)
 {
     char BUF[MAX_BUFFER_LEN];
     char *fullPacket;
     jobject fdObj;
@@ -1453,11 +1453,11 @@
          * On IPv4 system use IP_MULTICAST_IF socket option
          * On IPv6 system get the NetworkInterface that this IP
          * address is bound to and use the IPV6_MULTICAST_IF
          * option instead of IP_MULTICAST_IF
          */
-        if (ipv6_supported) {
+        if (ipv6_supported && fd1 >= 0) {
             static jclass ni_class = NULL;
             if (ni_class == NULL) {
                 jclass c = (*env)->FindClass(env, "java/net/NetworkInterface");
                 CHECK_NULL(c);
                 ni_class = (*env)->NewGlobalRef(env, c);
@@ -1494,11 +1494,11 @@
          * On IPv6 system get the index of the interface and use the
          * IPV6_MULTICAST_IF socket option
          * On IPv4 system extract addr[0] and use the IP_MULTICAST_IF
          * option. For IPv6 both must be done.
          */
-        if (ipv6_supported) {
+        if (ipv6_supported && fd1 >= 0) {
             static jfieldID ni_indexID = NULL;
             struct in_addr in;
             int index;
 
             if (ni_indexID == NULL) {
@@ -1506,11 +1506,10 @@
                 CHECK_NULL(c);
                 ni_indexID = (*env)->GetFieldID(env, c, "index", "I");
                 CHECK_NULL(ni_indexID);
             }
             index = (*env)->GetIntField(env, value, ni_indexID);
-
             if (isAdapterIpv6Enabled(env, index) != 0) {
                 if (setsockopt(fd1, IPPROTO_IPV6, IPV6_MULTICAST_IF,
                                (const char*)&index, sizeof(index)) < 0) {
                     if (errno == EINVAL && index > 0) {
                         JNU_ThrowByName(env, JNU_JAVANETPKG "SocketException",
@@ -1521,20 +1520,22 @@
                             (env, JNU_JAVANETPKG "SocketException", "Error setting socket option");
                     }
                     return;
                 }
             }
-            /* If there are any IPv4 addresses on this interface then
-             * repeat the operation on the IPv4 fd */
+            if (fd >= 0) {
+                /* If there are any IPv4 addresses on this interface then
+                 * repeat the operation on the IPv4 fd */
 
-            if (getInet4AddrFromIf(env, value, &in) < 0) {
-                return;
-            }
-            if (setsockopt(fd, IPPROTO_IP, IP_MULTICAST_IF,
-                               (const char*)&in, sizeof(in)) < 0) {
-                JNU_ThrowByNameWithMessageAndLastError
-                    (env, JNU_JAVANETPKG "SocketException", "Error setting socket option");
+                if (getInet4AddrFromIf(env, value, &in) < 0) {
+                    return;
+                }
+                if (setsockopt(fd, IPPROTO_IP, IP_MULTICAST_IF,
+                                   (const char*)&in, sizeof(in)) < 0) {
+                    JNU_ThrowByNameWithMessageAndLastError
+                        (env, JNU_JAVANETPKG "SocketException", "Error setting socket option");
+                }
             }
             return;
         } else {
             struct in_addr in;
 
@@ -1689,11 +1690,10 @@
 
         static jclass ni_class; static jmethodID ni_ctrID;
         static jfieldID ni_indexID;
         static jfieldID ni_addrsID;
 
-        jobjectArray addrArray;
         jobject addr;
         jobject ni;
 
         struct in_addr in;
         struct in_addr *inP = &in;
@@ -1747,23 +1747,11 @@
         }
         ni = Java_java_net_NetworkInterface_getByInetAddress0(env, ni_class, addr);
         if (ni) {
             return ni;
         }
-        if (ipv4Mode) {
-            ni = (*env)->NewObject(env, ni_class, ni_ctrID, 0);
-            CHECK_NULL_RETURN(ni, NULL);
-
-            (*env)->SetIntField(env, ni, ni_indexID, -1);
-            addrArray = (*env)->NewObjectArray(env, 1, inet4_class, NULL);
-            CHECK_NULL_RETURN(addrArray, NULL);
-            (*env)->SetObjectArrayElement(env, addrArray, 0, addr);
-            (*env)->SetObjectField(env, ni, ni_addrsID, addrArray);
-        } else {
-            ni = NULL;
-        }
-        return ni;
+        return NULL;
 }
 
 /*
  * Return the multicast interface:
  *
@@ -1888,38 +1876,18 @@
                 return NULL;
             }
 
             addr = (*env)->GetObjectArrayElement(env, addrArray, 0);
             return addr;
-        } else if (index == 0) { // index == 0 typically means IPv6 not configured on the interfaces
+        } else if (index == 0 && fd >= 0) {
             // falling back to treat interface as configured for IPv4
             jobject netObject = NULL;
             netObject = getIPv4NetworkInterface(env, this, fd, opt, 0);
             if (netObject != NULL) {
                 return netObject;
             }
         }
-
-        /*
-         * Multicast to any address - return anyLocalAddress
-         * or a NetworkInterface with addrs[0] set to anyLocalAddress
-         */
-
-        addr = (*env)->CallStaticObjectMethod(env, ia_class, ia_anyLocalAddressID,
-                                              NULL);
-        if (opt == java_net_SocketOptions_IP_MULTICAST_IF) {
-            return addr;
-        }
-
-        ni = (*env)->NewObject(env, ni_class, ni_ctrID, 0);
-        CHECK_NULL_RETURN(ni, NULL);
-        (*env)->SetIntField(env, ni, ni_indexID, -1);
-        addrArray = (*env)->NewObjectArray(env, 1, ia_class, NULL);
-        CHECK_NULL_RETURN(addrArray, NULL);
-        (*env)->SetObjectArrayElement(env, addrArray, 0, addr);
-        (*env)->SetObjectField(env, ni, ni_addrsID, addrArray);
-        return ni;
     }
     return NULL;
 }
 
 
