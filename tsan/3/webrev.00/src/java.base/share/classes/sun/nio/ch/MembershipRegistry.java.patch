diff a/src/java.base/share/classes/sun/nio/ch/MembershipRegistry.java b/src/java.base/share/classes/sun/nio/ch/MembershipRegistry.java
--- a/src/java.base/share/classes/sun/nio/ch/MembershipRegistry.java
+++ b/src/java.base/share/classes/sun/nio/ch/MembershipRegistry.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2008, 2009, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,25 +23,29 @@
  * questions.
  */
 
 package sun.nio.ch;
 
-import java.nio.channels.*;
 import java.net.InetAddress;
 import java.net.NetworkInterface;
-import java.util.*;
+import java.nio.channels.MembershipKey;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
 
 /**
  * Simple registry of membership keys for a MulticastChannel.
  *
  * Instances of this object are not safe by multiple concurrent threads.
  */
 
 class MembershipRegistry {
 
-    // map multicast group to keys
-    private Map<InetAddress,List<MembershipKeyImpl>> groups = null;
+    // map multicast group to list of keys
+    private Map<InetAddress, List<MembershipKeyImpl>> groups;
 
     MembershipRegistry() {
     }
 
     /**
@@ -114,18 +118,31 @@
                 groups.remove(group);
             }
         }
     }
 
+    @FunctionalInterface
+    interface ThrowingConsumer<T, X extends Throwable> {
+        void accept(T action) throws X;
+    }
+
     /**
-     * Invalidate all keys in the registry
+     * Invoke an action for each key in the registry
      */
-    void invalidateAll() {
+     <X extends Throwable>
+     void forEach(ThrowingConsumer<MembershipKeyImpl, X> action) throws X {
         if (groups != null) {
-            for (InetAddress group: groups.keySet()) {
-                for (MembershipKeyImpl key: groups.get(group)) {
-                    key.invalidate();
+            for (List<MembershipKeyImpl> keys : groups.values()) {
+                for (MembershipKeyImpl key : keys) {
+                    action.accept(key);
                 }
             }
         }
     }
+
+    /**
+     * Invalidate all keys in the registry
+     */
+    void invalidateAll() {
+        forEach(MembershipKeyImpl::invalidate);
+    }
 }
