diff a/src/java.base/share/classes/sun/security/x509/X509Key.java b/src/java.base/share/classes/sun/security/x509/X509Key.java
--- a/src/java.base/share/classes/sun/security/x509/X509Key.java
+++ b/src/java.base/share/classes/sun/security/x509/X509Key.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -57,10 +57,11 @@
  * @author David Brownell
  */
 public class X509Key implements PublicKey {
 
     /** use serialVersionUID from JDK 1.1. for interoperability */
+    @java.io.Serial
     private static final long serialVersionUID = -5359250853002055002L;
 
     /* The algorithm information (name, parameters, etc). */
     protected AlgorithmId algid;
 
@@ -81,11 +82,11 @@
      */
     @Deprecated
     private int unusedBits = 0;
 
     /* BitArray form of key */
-    private BitArray bitStringKey = null;
+    private transient BitArray bitStringKey = null;
 
     /* The encoding for the key. */
     protected byte[] encodedKey;
 
     /**
@@ -403,18 +404,20 @@
 
     /**
      * Serialization write ... X.509 keys serialize as
      * themselves, and they're parsed when they get read back.
      */
+    @java.io.Serial
     private void writeObject(ObjectOutputStream stream) throws IOException {
         stream.write(getEncoded());
     }
 
     /**
      * Serialization read ... X.509 keys serialize as
      * themselves, and they're parsed when they get read back.
      */
+    @java.io.Serial
     private void readObject(ObjectInputStream stream) throws IOException {
         try {
             decode(stream);
         } catch (InvalidKeyException e) {
             e.printStackTrace();
