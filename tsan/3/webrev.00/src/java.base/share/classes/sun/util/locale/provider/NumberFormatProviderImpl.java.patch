diff a/src/java.base/share/classes/sun/util/locale/provider/NumberFormatProviderImpl.java b/src/java.base/share/classes/sun/util/locale/provider/NumberFormatProviderImpl.java
--- a/src/java.base/share/classes/sun/util/locale/provider/NumberFormatProviderImpl.java
+++ b/src/java.base/share/classes/sun/util/locale/provider/NumberFormatProviderImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -43,14 +43,18 @@
 import java.text.CompactNumberFormat;
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;
 import java.text.NumberFormat;
 import java.text.spi.NumberFormatProvider;
+import java.util.Arrays;
 import java.util.Currency;
 import java.util.Locale;
+import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
+import java.util.stream.Collectors;
+import sun.text.resources.PluralRules;
 
 /**
  * Concrete implementation of the  {@link java.text.spi.NumberFormatProvider
  * NumberFormatProvider} class for the JRE LocaleProviderAdapter.
  *
@@ -61,16 +65,22 @@
 
     // Constants used by factory methods to specify a style of format.
     private static final int NUMBERSTYLE = 0;
     private static final int CURRENCYSTYLE = 1;
     private static final int PERCENTSTYLE = 2;
-    private static final int SCIENTIFICSTYLE = 3;
+    private static final int ACCOUNTINGSTYLE = 3;
     private static final int INTEGERSTYLE = 4;
 
     private final LocaleProviderAdapter.Type type;
     private final Set<String> langtags;
 
+    private static Map<String, String> rulesMap =
+            Arrays.stream(PluralRules.rulesArray).collect(Collectors.toMap(
+                    sa -> sa[0],
+                    sa -> sa[1])
+            );
+
     public NumberFormatProviderImpl(LocaleProviderAdapter.Type type, Set<String> langtags) {
         this.type = type;
         this.langtags = langtags;
     }
 
@@ -182,10 +192,16 @@
 
         LocaleProviderAdapter adapter = LocaleProviderAdapter.forType(type);
         String[] numberPatterns = adapter.getLocaleResources(override).getNumberPatterns();
         DecimalFormatSymbols symbols = DecimalFormatSymbols.getInstance(override);
         int entry = (choice == INTEGERSTYLE) ? NUMBERSTYLE : choice;
+        if (choice == CURRENCYSTYLE &&
+            numberPatterns.length > ACCOUNTINGSTYLE &&
+            !numberPatterns[ACCOUNTINGSTYLE].isEmpty() &&
+            "account".equalsIgnoreCase(override.getUnicodeLocaleType("cf"))) {
+            entry = ACCOUNTINGSTYLE;
+        }
         DecimalFormat format = new DecimalFormat(numberPatterns[entry], symbols);
 
         if (choice == INTEGERSTYLE) {
             format.setMaximumFractionDigits(0);
             format.setDecimalSeparatorAlwaysShown(false);
@@ -263,12 +279,16 @@
 
         String[] numberPatterns = resource.getNumberPatterns();
         DecimalFormatSymbols symbols = DecimalFormatSymbols.getInstance(override);
         String[] cnPatterns = resource.getCNPatterns(formatStyle);
 
+        // plural rules
+        String pluralRules = rulesMap.getOrDefault(override.toString(),
+                rulesMap.getOrDefault(override.getLanguage(), ""));
+
         CompactNumberFormat format = new CompactNumberFormat(numberPatterns[0],
-                symbols, cnPatterns);
+                symbols, cnPatterns, pluralRules);
         return format;
     }
 
     @Override
     public Set<String> getAvailableLanguageTags() {
