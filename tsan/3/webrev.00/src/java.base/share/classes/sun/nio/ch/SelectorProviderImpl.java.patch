diff a/src/java.base/share/classes/sun/nio/ch/SelectorProviderImpl.java b/src/java.base/share/classes/sun/nio/ch/SelectorProviderImpl.java
--- a/src/java.base/share/classes/sun/nio/ch/SelectorProviderImpl.java
+++ b/src/java.base/share/classes/sun/nio/ch/SelectorProviderImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,40 +23,53 @@
  * questions.
  */
 
 package sun.nio.ch;
 
-import java.io.FileDescriptor;
 import java.io.IOException;
-import java.net.ServerSocket;
-import java.net.Socket;
 import java.net.ProtocolFamily;
-import java.nio.channels.*;
-import java.nio.channels.spi.*;
-
+import java.nio.channels.DatagramChannel;
+import java.nio.channels.Pipe;
+import java.nio.channels.ServerSocketChannel;
+import java.nio.channels.SocketChannel;
+import java.nio.channels.spi.AbstractSelector;
+import java.nio.channels.spi.SelectorProvider;
 
 public abstract class SelectorProviderImpl
     extends SelectorProvider
 {
-
+    @Override
     public DatagramChannel openDatagramChannel() throws IOException {
-        return new DatagramChannelImpl(this);
+        return new DatagramChannelImpl(this, /*interruptible*/true);
+    }
+
+    /**
+     * SelectorProviderImpl specific method to create a DatagramChannel that
+     * is not interruptible.
+     */
+    public DatagramChannel openUninterruptibleDatagramChannel() throws IOException {
+        return new DatagramChannelImpl(this, /*interruptible*/false);
     }
 
+    @Override
     public DatagramChannel openDatagramChannel(ProtocolFamily family) throws IOException {
-        return new DatagramChannelImpl(this, family);
+        return new DatagramChannelImpl(this, family, /*interruptible*/true);
     }
 
+    @Override
     public Pipe openPipe() throws IOException {
         return new PipeImpl(this);
     }
 
+    @Override
     public abstract AbstractSelector openSelector() throws IOException;
 
+    @Override
     public ServerSocketChannel openServerSocketChannel() throws IOException {
         return new ServerSocketChannelImpl(this);
     }
 
+    @Override
     public SocketChannel openSocketChannel() throws IOException {
         return new SocketChannelImpl(this);
     }
 }
