diff a/src/java.base/share/classes/sun/security/pkcs/PKCS8Key.java b/src/java.base/share/classes/sun/security/pkcs/PKCS8Key.java
--- a/src/java.base/share/classes/sun/security/pkcs/PKCS8Key.java
+++ b/src/java.base/share/classes/sun/security/pkcs/PKCS8Key.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -51,10 +51,11 @@
  * @author Benjamin Renaud
  */
 public class PKCS8Key implements PrivateKey {
 
     /** use serialVersionUID from JDK 1.1. for interoperability */
+    @java.io.Serial
     private static final long serialVersionUID = -3836890099307167124L;
 
     /* The algorithm information (name, parameters, etc). */
     protected AlgorithmId algid;
 
@@ -353,10 +354,11 @@
 
     public void decode(byte[] encodedKey) throws InvalidKeyException {
         decode(new ByteArrayInputStream(encodedKey));
     }
 
+    @java.io.Serial
     protected Object writeReplace() throws java.io.ObjectStreamException {
         return new KeyRep(KeyRep.Type.PRIVATE,
                         getAlgorithm(),
                         getFormat(),
                         getEncoded());
@@ -364,10 +366,11 @@
 
     /**
      * Serialization read ... PKCS#8 keys serialize as
      * themselves, and they're parsed when they get read back.
      */
+    @java.io.Serial
     private void readObject (ObjectInputStream stream)
     throws IOException {
 
         try {
             decode(stream);
