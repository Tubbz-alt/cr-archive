diff a/src/java.base/share/classes/sun/net/www/http/KeepAliveCache.java b/src/java.base/share/classes/sun/net/www/http/KeepAliveCache.java
--- a/src/java.base/share/classes/sun/net/www/http/KeepAliveCache.java
+++ b/src/java.base/share/classes/sun/net/www/http/KeepAliveCache.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -47,10 +47,11 @@
  * @author Dave Brown
  */
 public class KeepAliveCache
     extends HashMap<KeepAliveKey, ClientVector>
     implements Runnable {
+    @java.io.Serial
     private static final long serialVersionUID = -2937172892064557949L;
 
     /* maximum # keep-alive connections to maintain at once
      * This should be 2 by the HTTP spec, but because we don't support pipe-lining
      * a larger value is more appropriate. So we now set a default of 5, and the value
@@ -201,14 +202,16 @@
     }
 
     /*
      * Do not serialize this class!
      */
+    @java.io.Serial
     private void writeObject(ObjectOutputStream stream) throws IOException {
         throw new NotSerializableException();
     }
 
+    @java.io.Serial
     private void readObject(ObjectInputStream stream)
         throws IOException, ClassNotFoundException
     {
         throw new NotSerializableException();
     }
@@ -216,10 +219,11 @@
 
 /* FILO order for recycling HttpClients, should run in a thread
  * to time them out.  If > maxConns are in use, block.
  */
 class ClientVector extends ArrayDeque<KeepAliveEntry> {
+    @java.io.Serial
     private static final long serialVersionUID = -8680532108106489459L;
 
     // sleep time in milliseconds, before cache clear
     int nap;
 
@@ -266,14 +270,16 @@
     }
 
     /*
      * Do not serialize this class!
      */
+    @java.io.Serial
     private void writeObject(ObjectOutputStream stream) throws IOException {
         throw new NotSerializableException();
     }
 
+    @java.io.Serial
     private void readObject(ObjectInputStream stream)
         throws IOException, ClassNotFoundException
     {
         throw new NotSerializableException();
     }
