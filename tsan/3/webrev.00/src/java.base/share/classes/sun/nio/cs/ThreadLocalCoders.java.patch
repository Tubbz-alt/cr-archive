diff a/src/java.base/share/classes/sun/nio/cs/ThreadLocalCoders.java b/src/java.base/share/classes/sun/nio/cs/ThreadLocalCoders.java
--- a/src/java.base/share/classes/sun/nio/cs/ThreadLocalCoders.java
+++ b/src/java.base/share/classes/sun/nio/cs/ThreadLocalCoders.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -85,21 +85,21 @@
 
     }
 
     private static Cache decoderCache = new Cache(CACHE_SIZE) {
             boolean hasName(Object ob, Object name) {
-                if (name instanceof String)
-                    return (((CharsetDecoder)ob).charset().name().equals(name));
                 if (name instanceof Charset)
                     return ((CharsetDecoder)ob).charset().equals(name);
+                if (name instanceof String)
+                    return (((CharsetDecoder)ob).charset().name().equals(name));
                 return false;
             }
             Object create(Object name) {
-                if (name instanceof String)
-                    return Charset.forName((String)name).newDecoder();
                 if (name instanceof Charset)
                     return ((Charset)name).newDecoder();
+                if (name instanceof String)
+                    return Charset.forName((String)name).newDecoder();
                 assert false;
                 return null;
             }
         };
 
@@ -109,21 +109,21 @@
         return cd;
     }
 
     private static Cache encoderCache = new Cache(CACHE_SIZE) {
             boolean hasName(Object ob, Object name) {
-                if (name instanceof String)
-                    return (((CharsetEncoder)ob).charset().name().equals(name));
                 if (name instanceof Charset)
                     return ((CharsetEncoder)ob).charset().equals(name);
+                if (name instanceof String)
+                    return (((CharsetEncoder)ob).charset().name().equals(name));
                 return false;
             }
             Object create(Object name) {
-                if (name instanceof String)
-                    return Charset.forName((String)name).newEncoder();
                 if (name instanceof Charset)
                     return ((Charset)name).newEncoder();
+                if (name instanceof String)
+                    return Charset.forName((String)name).newEncoder();
                 assert false;
                 return null;
             }
         };
 
