diff a/src/java.base/share/classes/jdk/internal/perf/Perf.java b/src/java.base/share/classes/jdk/internal/perf/Perf.java
--- a/src/java.base/share/classes/jdk/internal/perf/Perf.java
+++ b/src/java.base/share/classes/jdk/internal/perf/Perf.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2006, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -26,11 +26,13 @@
 
 import java.nio.ByteBuffer;
 import java.security.Permission;
 import java.security.PrivilegedAction;
 import java.io.IOException;
-import java.io.UnsupportedEncodingException;
+
+import sun.nio.cs.UTF_8;
+
 import jdk.internal.ref.CleanerFactory;
 
 /**
  * The Perf class provides the ability to attach to an instrumentation
  * buffer maintained by a Java virtual machine. The instrumentation
@@ -411,11 +413,11 @@
      * @see java.nio.ByteBuffer
      */
     public ByteBuffer createString(String name, int variability,
                                    int units, String value, int maxLength)
     {
-        byte[] v = getBytes(value);
+        byte[] v = value.getBytes(UTF_8.INSTANCE);
         byte[] v1 = new byte[v.length+1];
         System.arraycopy(v, 0, v1, 0, v.length);
         v1[v.length] = '\0';
         return createByteArray(name, variability, units, v1, Math.max(v1.length, maxLength));
     }
@@ -450,11 +452,11 @@
      * @see java.nio.ByteBuffer
      */
     public ByteBuffer createString(String name, int variability,
                                    int units, String value)
     {
-        byte[] v = getBytes(value);
+        byte[] v = value.getBytes(UTF_8.INSTANCE);
         byte[] v1 = new byte[v.length+1];
         System.arraycopy(v, 0, v1, 0, v.length);
         v1[v.length] = '\0';
         return createByteArray(name, variability, units, v1, v1.length);
     }
@@ -489,28 +491,10 @@
      */
     public native ByteBuffer createByteArray(String name, int variability,
                                              int units, byte[] value,
                                              int maxLength);
 
-
-    /**
-     * convert string to an array of UTF-8 bytes
-     */
-    private static byte[] getBytes(String s)
-    {
-        byte[] bytes = null;
-
-        try {
-            bytes = s.getBytes("UTF-8");
-        }
-        catch (UnsupportedEncodingException e) {
-            // ignore, UTF-8 encoding is always known
-        }
-
-        return bytes;
-    }
-
     /**
      * Return the value of the High Resolution Counter.
      *
      * The High Resolution Counter returns the number of ticks since
      * since the start of the Java virtual machine. The resolution of
