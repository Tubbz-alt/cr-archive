diff a/src/java.base/share/classes/jdk/internal/module/IllegalAccessMaps.java b/src/java.base/share/classes/jdk/internal/module/IllegalAccessMaps.java
--- a/src/java.base/share/classes/jdk/internal/module/IllegalAccessMaps.java
+++ b/src/java.base/share/classes/jdk/internal/module/IllegalAccessMaps.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -22,10 +22,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package jdk.internal.module;
 
+import sun.nio.cs.UTF_8;
+
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.UncheckedIOException;
@@ -35,12 +37,10 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
-import static java.nio.charset.StandardCharsets.*;
-
 /**
  * Generates the maps of concealed and exported packages to open at run-time.
  *
  * This is used at run-time for exploded builds, and at link-time to generate
  * the maps for the system modules in the run-time image.
@@ -88,11 +88,13 @@
         String rn = "jdk8_packages.dat";
         InputStream in = IllegalAccessMaps.class.getResourceAsStream(rn);
         if (in == null) {
             throw new InternalError(rn + " not found");
         }
-        try (BufferedReader br = new BufferedReader(new InputStreamReader(in, UTF_8))) {
+        try (BufferedReader br = new BufferedReader(
+                new InputStreamReader(in, UTF_8.INSTANCE)))
+        {
             br.lines()
                 .filter(line -> !line.isEmpty() && !line.startsWith("#"))
                 .forEach(pn -> {
                     ModuleDescriptor descriptor = map.get(pn);
                     if (descriptor != null && !isOpen(descriptor, pn)) {
