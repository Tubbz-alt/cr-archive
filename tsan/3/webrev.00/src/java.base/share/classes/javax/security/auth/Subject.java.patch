diff a/src/java.base/share/classes/javax/security/auth/Subject.java b/src/java.base/share/classes/javax/security/auth/Subject.java
--- a/src/java.base/share/classes/javax/security/auth/Subject.java
+++ b/src/java.base/share/classes/javax/security/auth/Subject.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -98,20 +98,22 @@
  * @see java.security.Principal
  * @see java.security.DomainCombiner
  */
 public final class Subject implements java.io.Serializable {
 
+    @java.io.Serial
     private static final long serialVersionUID = -8308522755600156056L;
 
     /**
      * A {@code Set} that provides a view of all of this
      * Subject's Principals
      *
      * @serial Each element in this set is a
      *          {@code java.security.Principal}.
      *          The set is a {@code Subject.SecureSet}.
      */
+    @SuppressWarnings("serial") // Not statically typed as Serializable
     Set<Principal> principals;
 
     /**
      * Sets that provide a view of all of this
      * Subject's Credentials
@@ -944,10 +946,11 @@
     }
 
     /**
      * Writes this object out to a stream (i.e., serializes it).
      */
+    @java.io.Serial
     private void writeObject(java.io.ObjectOutputStream oos)
                 throws java.io.IOException {
         synchronized(principals) {
             oos.defaultWriteObject();
         }
@@ -955,10 +958,11 @@
 
     /**
      * Reads this object from a stream (i.e., deserializes it)
      */
     @SuppressWarnings("unchecked")
+    @java.io.Serial
     private void readObject(java.io.ObjectInputStream s)
                 throws java.io.IOException, ClassNotFoundException {
 
         ObjectInputStream.GetField gf = s.readFields();
 
@@ -1025,16 +1029,18 @@
      * @serial include
      */
     private static class SecureSet<E>
         implements Set<E>, java.io.Serializable {
 
+        @java.io.Serial
         private static final long serialVersionUID = 7911754171111800359L;
 
         /**
          * @serialField this$0 Subject The outer Subject instance.
          * @serialField elements LinkedList The elements in this set.
          */
+        @java.io.Serial
         private static final ObjectStreamField[] serialPersistentFields = {
             new ObjectStreamField("this$0", Subject.class),
             new ObjectStreamField("elements", LinkedList.class),
             new ObjectStreamField("which", int.class)
         };
@@ -1406,10 +1412,11 @@
          *      a security check is performed to ensure that
          *      the caller has permission to access each credential
          *      in the set.  If the security check passes,
          *      the set is serialized.
          */
+        @java.io.Serial
         private void writeObject(java.io.ObjectOutputStream oos)
                 throws java.io.IOException {
 
             if (which == Subject.PRIV_CREDENTIAL_SET) {
                 // check permissions before serializing
@@ -1424,10 +1431,11 @@
             fields.put("which", which);
             oos.writeFields();
         }
 
         @SuppressWarnings("unchecked")
+        @java.io.Serial
         private void readObject(ObjectInputStream ois)
             throws IOException, ClassNotFoundException
         {
             ObjectInputStream.GetField fields = ois.readFields();
             subject = (Subject) fields.get("this$0", null);
