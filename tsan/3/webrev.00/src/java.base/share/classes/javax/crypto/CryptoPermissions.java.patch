diff a/src/java.base/share/classes/javax/crypto/CryptoPermissions.java b/src/java.base/share/classes/javax/crypto/CryptoPermissions.java
--- a/src/java.base/share/classes/javax/crypto/CryptoPermissions.java
+++ b/src/java.base/share/classes/javax/crypto/CryptoPermissions.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -38,10 +38,12 @@
 import java.io.ObjectStreamField;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.IOException;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
+
 /**
  * This class contains CryptoPermission objects, organized into
  * PermissionCollections according to algorithm names.
  *
  * <p>When the <code>add</code> method is called to add a
@@ -61,15 +63,17 @@
  * @since 1.4
  */
 final class CryptoPermissions extends PermissionCollection
 implements Serializable {
 
+    @java.io.Serial
     private static final long serialVersionUID = 4946547168093391015L;
 
     /**
      * @serialField perms java.util.Hashtable
      */
+    @java.io.Serial
     private static final ObjectStreamField[] serialPersistentFields = {
         new ObjectStreamField("perms", Hashtable.class),
     };
 
     // Switched from Hashtable to ConcurrentHashMap to improve scalability.
@@ -95,11 +99,11 @@
      * successfully.
      */
     void load(InputStream in)
         throws IOException, CryptoPolicyParser.ParsingException {
         CryptoPolicyParser parser = new CryptoPolicyParser();
-        parser.read(new BufferedReader(new InputStreamReader(in, "UTF-8")));
+        parser.read(new BufferedReader(new InputStreamReader(in, UTF_8)));
 
         CryptoPermission[] parsingResult = parser.getPermissions();
         for (int i = 0; i < parsingResult.length; i++) {
             this.add(parsingResult[i]);
         }
@@ -434,10 +438,11 @@
             pc = cryptoPerm.newPermissionCollection();
         }
         return pc;
     }
 
+    @java.io.Serial
     private void readObject(ObjectInputStream s)
         throws IOException, ClassNotFoundException {
         ObjectInputStream.GetField fields = s.readFields();
         @SuppressWarnings("unchecked")
         Hashtable<String,PermissionCollection> permTable =
@@ -448,10 +453,11 @@
         } else {
             perms = new ConcurrentHashMap<>();
         }
     }
 
+    @java.io.Serial
     private void writeObject(ObjectOutputStream s) throws IOException {
         Hashtable<String,PermissionCollection> permTable =
                 new Hashtable<>(perms);
         ObjectOutputStream.PutField fields = s.putFields();
         fields.put("perms", permTable);
