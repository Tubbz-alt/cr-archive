diff a/src/java.base/share/classes/java/security/KeyFactory.java b/src/java.base/share/classes/java/security/KeyFactory.java
--- a/src/java.base/share/classes/java/security/KeyFactory.java
+++ b/src/java.base/share/classes/java/security/KeyFactory.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -335,11 +335,11 @@
      *
      * @param keySpec the specification (key material) of the public key.
      *
      * @return the public key.
      *
-     * @exception InvalidKeySpecException if the given key specification
+     * @throws    InvalidKeySpecException if the given key specification
      * is inappropriate for this key factory to produce a public key.
      */
     public final PublicKey generatePublic(KeySpec keySpec)
             throws InvalidKeySpecException {
         if (serviceIterator == null) {
@@ -373,11 +373,11 @@
      *
      * @param keySpec the specification (key material) of the private key.
      *
      * @return the private key.
      *
-     * @exception InvalidKeySpecException if the given key specification
+     * @throws    InvalidKeySpecException if the given key specification
      * is inappropriate for this key factory to produce a private key.
      */
     public final PrivateKey generatePrivate(KeySpec keySpec)
             throws InvalidKeySpecException {
         if (serviceIterator == null) {
@@ -421,11 +421,11 @@
      * the key material should be returned.
      *
      * @return the underlying key specification (key material) in an instance
      * of the requested specification class.
      *
-     * @exception InvalidKeySpecException if the requested key specification is
+     * @throws    InvalidKeySpecException if the requested key specification is
      * inappropriate for the given key, or the given key cannot be processed
      * (e.g., the given key has an unrecognized algorithm or format).
      */
     public final <T extends KeySpec> T getKeySpec(Key key, Class<T> keySpec)
             throws InvalidKeySpecException {
@@ -460,11 +460,11 @@
      *
      * @param key the key whose provider is unknown or untrusted.
      *
      * @return the translated key.
      *
-     * @exception InvalidKeyException if the given key cannot be processed
+     * @throws    InvalidKeyException if the given key cannot be processed
      * by this key factory.
      */
     public final Key translateKey(Key key) throws InvalidKeyException {
         if (serviceIterator == null) {
             return spi.engineTranslateKey(key);
