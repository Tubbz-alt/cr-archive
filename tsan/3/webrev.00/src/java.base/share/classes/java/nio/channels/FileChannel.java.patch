diff a/src/java.base/share/classes/java/nio/channels/FileChannel.java b/src/java.base/share/classes/java/nio/channels/FileChannel.java
--- a/src/java.base/share/classes/java/nio/channels/FileChannel.java
+++ b/src/java.base/share/classes/java/nio/channels/FileChannel.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -717,11 +717,11 @@
      * @return  The number of bytes read, possibly zero, or {@code -1} if the
      *          given position is greater than or equal to the file's current
      *          size
      *
      * @throws  IllegalArgumentException
-     *          If the position is negative
+     *          If the position is negative or the buffer is read-only
      *
      * @throws  NonReadableChannelException
      *          If this channel was not opened for reading
      *
      * @throws  ClosedChannelException
@@ -789,11 +789,11 @@
 
 
     // -- Memory-mapped buffers --
 
     /**
-     * A typesafe enumeration for file-mapping modes.
+     * A file-mapping mode.
      *
      * @since 1.4
      *
      * @see java.nio.channels.FileChannel#map
      */
@@ -817,10 +817,16 @@
         public static final MapMode PRIVATE
             = new MapMode("PRIVATE");
 
         private final String name;
 
+        /**
+         * Constructs an instance of this class. This constructor may be used
+         * by code in java.base to create file mapping modes beyond the file
+         * mapping modes defined here.
+         * @param name the name of the map mode
+         */
         private MapMode(String name) {
             this.name = name;
         }
 
         /**
@@ -835,12 +841,12 @@
     }
 
     /**
      * Maps a region of this channel's file directly into memory.
      *
-     * <p> A region of a file may be mapped into memory in one of three modes:
-     * </p>
+     * <p> The {@code mode} parameter specifies how the region of the file is
+     * mapped and may be one of the following modes:
      *
      * <ul>
      *
      *   <li><p> <i>Read-only:</i> Any attempt to modify the resulting buffer
      *   will cause a {@link java.nio.ReadOnlyBufferException} to be thrown.
@@ -857,10 +863,12 @@
      *   copies of the modified portions of the buffer to be created.  ({@link
      *   MapMode#PRIVATE MapMode.PRIVATE}) </p></li>
      *
      * </ul>
      *
+     * <p> An implementation may support additional map modes.
+     *
      * <p> For a read-only mapping, this channel must have been opened for
      * reading; for a read/write or private mapping, this channel must have
      * been opened for both reading and writing.
      *
      * <p> The {@link MappedByteBuffer <i>mapped byte buffer</i>}
@@ -890,11 +898,12 @@
      * @param  mode
      *         One of the constants {@link MapMode#READ_ONLY READ_ONLY}, {@link
      *         MapMode#READ_WRITE READ_WRITE}, or {@link MapMode#PRIVATE
      *         PRIVATE} defined in the {@link MapMode} class, according to
      *         whether the file is to be mapped read-only, read/write, or
-     *         privately (copy-on-write), respectively
+     *         privately (copy-on-write), respectively, or an implementation
+     *         specific map mode
      *
      * @param  position
      *         The position within the file at which the mapped region
      *         is to start; must be non-negative
      *
@@ -903,29 +912,33 @@
      *         no greater than {@link java.lang.Integer#MAX_VALUE}
      *
      * @return  The mapped byte buffer
      *
      * @throws NonReadableChannelException
-     *         If the {@code mode} is {@link MapMode#READ_ONLY READ_ONLY} but
-     *         this channel was not opened for reading
+     *         If the {@code mode} is {@link MapMode#READ_ONLY READ_ONLY} or
+     *         an implementation specific map mode requiring read access
+     *         but this channel was not opened for reading
      *
      * @throws NonWritableChannelException
-     *         If the {@code mode} is {@link MapMode#READ_WRITE READ_WRITE} or
-     *         {@link MapMode#PRIVATE PRIVATE} but this channel was not opened
-     *         for both reading and writing
+     *         If the {@code mode} is {@link MapMode#READ_WRITE READ_WRITE}.
+     *         {@link MapMode#PRIVATE PRIVATE} or an implementation specific
+     *         map mode requiring write access but this channel was not
+     *         opened for both reading and writing
      *
      * @throws IllegalArgumentException
      *         If the preconditions on the parameters do not hold
      *
+     * @throws UnsupportedOperationException
+     *         If an unsupported map mode is specified
+     *
      * @throws IOException
      *         If some other I/O error occurs
      *
      * @see java.nio.channels.FileChannel.MapMode
      * @see java.nio.MappedByteBuffer
      */
-    public abstract MappedByteBuffer map(MapMode mode,
-                                         long position, long size)
+    public abstract MappedByteBuffer map(MapMode mode, long position, long size)
         throws IOException;
 
 
     // -- Locks --
 
