diff a/src/java.base/share/classes/java/security/GuardedObject.java b/src/java.base/share/classes/java/security/GuardedObject.java
--- a/src/java.base/share/classes/java/security/GuardedObject.java
+++ b/src/java.base/share/classes/java/security/GuardedObject.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -47,13 +47,16 @@
  * @since 1.2
  */
 
 public class GuardedObject implements java.io.Serializable {
 
+    @java.io.Serial
     private static final long serialVersionUID = -5240450096227834308L;
 
+    @SuppressWarnings("serial") // Not statically typed as Serializable
     private Object object; // the object we are guarding
+    @SuppressWarnings("serial") // Not statically typed as Serializable
     private Guard guard;   // the guard
 
     /**
      * Constructs a GuardedObject using the specified object and guard.
      * If the Guard object is null, then no restrictions will
@@ -74,11 +77,11 @@
      * Retrieves the guarded object, or throws an exception if access
      * to the guarded object is denied by the guard.
      *
      * @return the guarded object.
      *
-     * @exception SecurityException if access to the guarded object is
+     * @throws    SecurityException if access to the guarded object is
      * denied.
      */
     public Object getObject()
         throws SecurityException
     {
@@ -90,10 +93,11 @@
 
     /**
      * Writes this object out to a stream (i.e., serializes it).
      * We check the guard if there is one.
      */
+    @java.io.Serial
     private void writeObject(java.io.ObjectOutputStream oos)
         throws java.io.IOException
     {
         if (guard != null)
             guard.checkGuard(object);
