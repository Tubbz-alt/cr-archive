diff a/src/java.base/share/classes/java/io/PipedReader.java b/src/java.base/share/classes/java/io/PipedReader.java
--- a/src/java.base/share/classes/java/io/PipedReader.java
+++ b/src/java.base/share/classes/java/io/PipedReader.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -57,73 +57,73 @@
 
     /**
      * The index of the position in the circular buffer at which the
      * next character of data will be stored when received from the connected
      * piped writer. <code>in&lt;0</code> implies the buffer is empty,
-     * <code>in==out</code> implies the buffer is full
+     * {@code in==out} implies the buffer is full
      */
     int in = -1;
 
     /**
      * The index of the position in the circular buffer at which the next
      * character of data will be read by this piped reader.
      */
     int out = 0;
 
     /**
-     * Creates a <code>PipedReader</code> so
+     * Creates a {@code PipedReader} so
      * that it is connected to the piped writer
-     * <code>src</code>. Data written to <code>src</code>
+     * {@code src}. Data written to {@code src}
      * will then be available as input from this stream.
      *
      * @param      src   the stream to connect to.
-     * @exception  IOException  if an I/O error occurs.
+     * @throws     IOException  if an I/O error occurs.
      */
     public PipedReader(PipedWriter src) throws IOException {
         this(src, DEFAULT_PIPE_SIZE);
     }
 
     /**
-     * Creates a <code>PipedReader</code> so that it is connected
-     * to the piped writer <code>src</code> and uses the specified
-     * pipe size for the pipe's buffer. Data written to <code>src</code>
+     * Creates a {@code PipedReader} so that it is connected
+     * to the piped writer {@code src} and uses the specified
+     * pipe size for the pipe's buffer. Data written to {@code src}
      * will then be  available as input from this stream.
 
      * @param      src       the stream to connect to.
      * @param      pipeSize  the size of the pipe's buffer.
-     * @exception  IOException  if an I/O error occurs.
-     * @exception  IllegalArgumentException if {@code pipeSize <= 0}.
+     * @throws     IOException  if an I/O error occurs.
+     * @throws     IllegalArgumentException if {@code pipeSize <= 0}.
      * @since      1.6
      */
     public PipedReader(PipedWriter src, int pipeSize) throws IOException {
         initPipe(pipeSize);
         connect(src);
     }
 
 
     /**
-     * Creates a <code>PipedReader</code> so
+     * Creates a {@code PipedReader} so
      * that it is not yet {@linkplain #connect(java.io.PipedWriter)
      * connected}. It must be {@linkplain java.io.PipedWriter#connect(
-     * java.io.PipedReader) connected} to a <code>PipedWriter</code>
+     * java.io.PipedReader) connected} to a {@code PipedWriter}
      * before being used.
      */
     public PipedReader() {
         initPipe(DEFAULT_PIPE_SIZE);
     }
 
     /**
-     * Creates a <code>PipedReader</code> so that it is not yet
+     * Creates a {@code PipedReader} so that it is not yet
      * {@link #connect(java.io.PipedWriter) connected} and uses
      * the specified pipe size for the pipe's buffer.
      * It must be  {@linkplain java.io.PipedWriter#connect(
-     * java.io.PipedReader) connected} to a <code>PipedWriter</code>
+     * java.io.PipedReader) connected} to a {@code PipedWriter}
      * before being used.
      *
      * @param   pipeSize the size of the pipe's buffer.
-     * @exception  IllegalArgumentException if {@code pipeSize <= 0}.
-     * @since      1.6
+     * @throws  IllegalArgumentException if {@code pipeSize <= 0}.
+     * @since   1.6
      */
     public PipedReader(int pipeSize) {
         initPipe(pipeSize);
     }
 
@@ -134,30 +134,30 @@
         buffer = new char[pipeSize];
     }
 
     /**
      * Causes this piped reader to be connected
-     * to the piped  writer <code>src</code>.
+     * to the piped  writer {@code src}.
      * If this object is already connected to some
-     * other piped writer, an <code>IOException</code>
+     * other piped writer, an {@code IOException}
      * is thrown.
      * <p>
-     * If <code>src</code> is an
-     * unconnected piped writer and <code>snk</code>
+     * If {@code src} is an
+     * unconnected piped writer and {@code snk}
      * is an unconnected piped reader, they
      * may be connected by either the call:
      *
-     * <pre><code>snk.connect(src)</code> </pre>
+     * <pre>{@code snk.connect(src)} </pre>
      * <p>
      * or the call:
      *
-     * <pre><code>src.connect(snk)</code> </pre>
+     * <pre>{@code src.connect(snk)} </pre>
      * <p>
      * The two calls have the same effect.
      *
      * @param      src   The piped writer to connect to.
-     * @exception  IOException  if an I/O error occurs.
+     * @throws     IOException  if an I/O error occurs.
      */
     public void connect(PipedWriter src) throws IOException {
         src.connect(this);
     }
 
@@ -217,18 +217,18 @@
     }
 
     /**
      * Reads the next character of data from this piped stream.
      * If no character is available because the end of the stream
-     * has been reached, the value <code>-1</code> is returned.
+     * has been reached, the value {@code -1} is returned.
      * This method blocks until input data is available, the end of
      * the stream is detected, or an exception is thrown.
      *
-     * @return     the next character of data, or <code>-1</code> if the end of the
-     *             stream is reached.
-     * @exception  IOException  if the pipe is
-     *          <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,
+     * @return  the next character of data, or {@code -1} if the end of the
+     *          stream is reached.
+     * @throws  IOException  if the pipe is
+     *          <a href=PipedInputStream.html#BROKEN> {@code broken}</a>,
      *          {@link #connect(java.io.PipedWriter) unconnected}, closed,
      *          or an I/O error occurs.
      */
     public synchronized int read()  throws IOException {
         if (!connected) {
@@ -268,27 +268,27 @@
         }
         return ret;
     }
 
     /**
-     * Reads up to <code>len</code> characters of data from this piped
-     * stream into an array of characters. Less than <code>len</code> characters
+     * Reads up to {@code len} characters of data from this piped
+     * stream into an array of characters. Less than {@code len} characters
      * will be read if the end of the data stream is reached or if
-     * <code>len</code> exceeds the pipe's buffer size. This method
+     * {@code len} exceeds the pipe's buffer size. This method
      * blocks until at least one character of input is available.
      *
      * @param      cbuf     the buffer into which the data is read.
      * @param      off   the start offset of the data.
      * @param      len   the maximum number of characters read.
      * @return     the total number of characters read into the buffer, or
-     *             <code>-1</code> if there is no more data because the end of
+     *             {@code -1} if there is no more data because the end of
      *             the stream has been reached.
-     * @exception  IOException  if the pipe is
-     *                  <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,
-     *                  {@link #connect(java.io.PipedWriter) unconnected}, closed,
-     *                  or an I/O error occurs.
-     * @exception  IndexOutOfBoundsException {@inheritDoc}
+     * @throws     IOException  if the pipe is
+     *             <a href=PipedInputStream.html#BROKEN> {@code broken}</a>,
+     *             {@link #connect(java.io.PipedWriter) unconnected}, closed,
+     *             or an I/O error occurs.
+     * @throws     IndexOutOfBoundsException {@inheritDoc}
      */
     public synchronized int read(char cbuf[], int off, int len)  throws IOException {
         if (!connected) {
             throw new IOException("Pipe not connected");
         } else if (closedByReader) {
@@ -328,13 +328,13 @@
 
     /**
      * Tell whether this stream is ready to be read.  A piped character
      * stream is ready if the circular buffer is not empty.
      *
-     * @exception  IOException  if the pipe is
-     *                  <a href=PipedInputStream.html#BROKEN> <code>broken</code></a>,
-     *                  {@link #connect(java.io.PipedWriter) unconnected}, or closed.
+     * @throws     IOException  if the pipe is
+     *             <a href=PipedInputStream.html#BROKEN> {@code broken}</a>,
+     *             {@link #connect(java.io.PipedWriter) unconnected}, or closed.
      */
     public synchronized boolean ready() throws IOException {
         if (!connected) {
             throw new IOException("Pipe not connected");
         } else if (closedByReader) {
@@ -352,11 +352,11 @@
 
     /**
      * Closes this piped stream and releases any system resources
      * associated with the stream.
      *
-     * @exception  IOException  if an I/O error occurs.
+     * @throws     IOException  if an I/O error occurs.
      */
     public void close()  throws IOException {
         in = -1;
         closedByReader = true;
     }
