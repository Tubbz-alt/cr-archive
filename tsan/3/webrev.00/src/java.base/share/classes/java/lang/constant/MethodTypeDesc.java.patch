diff a/src/java.base/share/classes/java/lang/constant/MethodTypeDesc.java b/src/java.base/share/classes/java/lang/constant/MethodTypeDesc.java
--- a/src/java.base/share/classes/java/lang/constant/MethodTypeDesc.java
+++ b/src/java.base/share/classes/java/lang/constant/MethodTypeDesc.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -47,11 +47,11 @@
     /**
      * Creates a {@linkplain MethodTypeDesc} given a method descriptor string.
      *
      * @param descriptor a method descriptor string
      * @return a {@linkplain MethodTypeDesc} describing the desired method type
-     * @throws NullPointerException if any argument is {@code null}
+     * @throws NullPointerException if the argument is {@code null}
      * @throws IllegalArgumentException if the descriptor string is not a valid
      * method descriptor
      * @jvms 4.3.3 Method Descriptors
      */
     static MethodTypeDesc ofDescriptor(String descriptor) {
@@ -63,11 +63,13 @@
      * types.
      *
      * @param returnDesc a {@linkplain ClassDesc} describing the return type
      * @param paramDescs {@linkplain ClassDesc}s describing the argument types
      * @return a {@linkplain MethodTypeDesc} describing the desired method type
-     * @throws NullPointerException if any argument is {@code null}
+     * @throws NullPointerException if any argument or its contents are {@code null}
+     * @throws IllegalArgumentException if any element of {@code paramDescs} is a
+     * {@link ClassDesc} for {@code void}
      */
     static MethodTypeDesc of(ClassDesc returnDesc, ClassDesc... paramDescs) {
         return new MethodTypeDescImpl(returnDesc, paramDescs);
     }
 
@@ -114,11 +116,11 @@
      * Returns a {@linkplain MethodTypeDesc} that is identical to
      * this one, except with the specified return type.
      *
      * @param returnType a {@link ClassDesc} describing the new return type
      * @return a {@linkplain MethodTypeDesc} describing the desired method type
-     * @throws NullPointerException if any argument is {@code null}
+     * @throws NullPointerException if the argument is {@code null}
      */
     MethodTypeDesc changeReturnType(ClassDesc returnType);
 
     /**
      * Returns a {@linkplain MethodTypeDesc} that is identical to this one,
@@ -139,12 +141,12 @@
      *
      * @param start the index of the first parameter to remove
      * @param end the index after the last parameter to remove
      * @return a {@linkplain MethodTypeDesc} describing the desired method type
      * @throws IndexOutOfBoundsException if {@code start} is outside the half-open
-     * range {[0, parameterCount)}, or {@code end} is outside the closed range
-     * {@code [0, parameterCount]}
+     * range {@code [0, parameterCount)}, or {@code end} is outside the closed range
+     * {@code [0, parameterCount]}, or if {@code start > end}
      */
     MethodTypeDesc dropParameterTypes(int start, int end);
 
     /**
      * Returns a {@linkplain MethodTypeDesc} that is identical to this one,
@@ -152,13 +154,15 @@
      *
      * @param pos the index at which to insert the first inserted parameter
      * @param paramTypes {@link ClassDesc}s describing the new parameter types
      *                   to insert
      * @return a {@linkplain MethodTypeDesc} describing the desired method type
-     * @throws NullPointerException if any argument is {@code null}
+     * @throws NullPointerException if any argument or its contents are {@code null}
      * @throws IndexOutOfBoundsException if {@code pos} is outside the closed
      * range {[0, parameterCount]}
+     * @throws IllegalArgumentException if any element of {@code paramTypes}
+     * is a {@link ClassDesc} for {@code void}
      */
     MethodTypeDesc insertParameterTypes(int pos, ClassDesc... paramTypes);
 
     /**
      * Returns the method type descriptor string.
