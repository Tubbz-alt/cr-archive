diff a/src/java.base/share/classes/java/io/FilterOutputStream.java b/src/java.base/share/classes/java/io/FilterOutputStream.java
--- a/src/java.base/share/classes/java/io/FilterOutputStream.java
+++ b/src/java.base/share/classes/java/io/FilterOutputStream.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1994, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1994, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -30,14 +30,14 @@
  * streams. These streams sit on top of an already existing output
  * stream (the <i>underlying</i> output stream) which it uses as its
  * basic sink of data, but possibly transforming the data along the
  * way or providing additional functionality.
  * <p>
- * The class <code>FilterOutputStream</code> itself simply overrides
- * all methods of <code>OutputStream</code> with versions that pass
+ * The class {@code FilterOutputStream} itself simply overrides
+ * all methods of {@code OutputStream} with versions that pass
  * all requests to the underlying output stream. Subclasses of
- * <code>FilterOutputStream</code> may further override some of these
+ * {@code FilterOutputStream} may further override some of these
  * methods as well as provide additional methods and fields.
  *
  * @author  Jonathan Payne
  * @since   1.0
  */
@@ -61,73 +61,73 @@
      * Creates an output stream filter built on top of the specified
      * underlying output stream.
      *
      * @param   out   the underlying output stream to be assigned to
      *                the field {@code this.out} for later use, or
-     *                <code>null</code> if this instance is to be
+     *                {@code null} if this instance is to be
      *                created without an underlying stream.
      */
     public FilterOutputStream(OutputStream out) {
         this.out = out;
     }
 
     /**
-     * Writes the specified <code>byte</code> to this output stream.
+     * Writes the specified {@code byte} to this output stream.
      * <p>
-     * The <code>write</code> method of <code>FilterOutputStream</code>
-     * calls the <code>write</code> method of its underlying output stream,
+     * The {@code write} method of {@code FilterOutputStream}
+     * calls the {@code write} method of its underlying output stream,
      * that is, it performs {@code out.write(b)}.
      * <p>
      * Implements the abstract {@code write} method of {@code OutputStream}.
      *
-     * @param      b   the <code>byte</code>.
-     * @exception  IOException  if an I/O error occurs.
+     * @param      b   the {@code byte}.
+     * @throws     IOException  if an I/O error occurs.
      */
     @Override
     public void write(int b) throws IOException {
         out.write(b);
     }
 
     /**
-     * Writes <code>b.length</code> bytes to this output stream.
+     * Writes {@code b.length} bytes to this output stream.
      * <p>
-     * The <code>write</code> method of <code>FilterOutputStream</code>
-     * calls its <code>write</code> method of three arguments with the
-     * arguments <code>b</code>, <code>0</code>, and
-     * <code>b.length</code>.
+     * The {@code write} method of {@code FilterOutputStream}
+     * calls its {@code write} method of three arguments with the
+     * arguments {@code b}, {@code 0}, and
+     * {@code b.length}.
      * <p>
      * Note that this method does not call the one-argument
-     * <code>write</code> method of its underlying output stream with
-     * the single argument <code>b</code>.
+     * {@code write} method of its underlying output stream with
+     * the single argument {@code b}.
      *
      * @param      b   the data to be written.
-     * @exception  IOException  if an I/O error occurs.
+     * @throws     IOException  if an I/O error occurs.
      * @see        java.io.FilterOutputStream#write(byte[], int, int)
      */
     @Override
     public void write(byte b[]) throws IOException {
         write(b, 0, b.length);
     }
 
     /**
-     * Writes <code>len</code> bytes from the specified
-     * <code>byte</code> array starting at offset <code>off</code> to
+     * Writes {@code len} bytes from the specified
+     * {@code byte} array starting at offset {@code off} to
      * this output stream.
      * <p>
-     * The <code>write</code> method of <code>FilterOutputStream</code>
-     * calls the <code>write</code> method of one argument on each
-     * <code>byte</code> to output.
+     * The {@code write} method of {@code FilterOutputStream}
+     * calls the {@code write} method of one argument on each
+     * {@code byte} to output.
      * <p>
-     * Note that this method does not call the <code>write</code> method
+     * Note that this method does not call the {@code write} method
      * of its underlying output stream with the same arguments. Subclasses
-     * of <code>FilterOutputStream</code> should provide a more efficient
+     * of {@code FilterOutputStream} should provide a more efficient
      * implementation of this method.
      *
      * @param      b     the data.
      * @param      off   the start offset in the data.
      * @param      len   the number of bytes to write.
-     * @exception  IOException  if an I/O error occurs.
+     * @throws     IOException  if an I/O error occurs.
      * @see        java.io.FilterOutputStream#write(int)
      */
     @Override
     public void write(byte b[], int off, int len) throws IOException {
         if ((off | len | (b.length - (len + off)) | (off + len)) < 0)
@@ -140,14 +140,14 @@
 
     /**
      * Flushes this output stream and forces any buffered output bytes
      * to be written out to the stream.
      * <p>
-     * The <code>flush</code> method of <code>FilterOutputStream</code>
-     * calls the <code>flush</code> method of its underlying output stream.
+     * The {@code flush} method of {@code FilterOutputStream}
+     * calls the {@code flush} method of its underlying output stream.
      *
-     * @exception  IOException  if an I/O error occurs.
+     * @throws     IOException  if an I/O error occurs.
      * @see        java.io.FilterOutputStream#out
      */
     @Override
     public void flush() throws IOException {
         out.flush();
@@ -159,11 +159,11 @@
      * <p>
      * When not already closed, the {@code close} method of {@code
      * FilterOutputStream} calls its {@code flush} method, and then
      * calls the {@code close} method of its underlying output stream.
      *
-     * @exception  IOException  if an I/O error occurs.
+     * @throws     IOException  if an I/O error occurs.
      * @see        java.io.FilterOutputStream#flush()
      * @see        java.io.FilterOutputStream#out
      */
     @Override
     public void close() throws IOException {
