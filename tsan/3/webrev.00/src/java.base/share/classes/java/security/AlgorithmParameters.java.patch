diff a/src/java.base/share/classes/java/security/AlgorithmParameters.java b/src/java.base/share/classes/java/security/AlgorithmParameters.java
--- a/src/java.base/share/classes/java/security/AlgorithmParameters.java
+++ b/src/java.base/share/classes/java/security/AlgorithmParameters.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -49,11 +49,10 @@
  *
  * <p> Every implementation of the Java platform is required to support the
  * following standard {@code AlgorithmParameters} algorithms:
  * <ul>
  * <li>{@code AES}</li>
- * <li>{@code DES}</li>
  * <li>{@code DESede}</li>
  * <li>{@code DiffieHellman}</li>
  * <li>{@code DSA}</li>
  * </ul>
  * These algorithms are described in the <a href=
@@ -280,11 +279,11 @@
      * Initializes this parameter object using the parameters
      * specified in {@code paramSpec}.
      *
      * @param paramSpec the parameter specification.
      *
-     * @exception InvalidParameterSpecException if the given parameter
+     * @throws    InvalidParameterSpecException if the given parameter
      * specification is inappropriate for the initialization of this parameter
      * object, or if this parameter object has already been initialized.
      */
     public final void init(AlgorithmParameterSpec paramSpec)
         throws InvalidParameterSpecException
@@ -301,11 +300,11 @@
      * format for parameters is ASN.1, if an ASN.1 specification for this type
      * of parameters exists.
      *
      * @param params the encoded parameters.
      *
-     * @exception IOException on decoding errors, or if this parameter object
+     * @throws    IOException on decoding errors, or if this parameter object
      * has already been initialized.
      */
     public final void init(byte[] params) throws IOException {
         if (this.initialized)
             throw new IOException("already initialized");
@@ -323,11 +322,11 @@
      *
      * @param params the encoded parameters.
      *
      * @param format the name of the decoding scheme.
      *
-     * @exception IOException on decoding errors, or if this parameter object
+     * @throws    IOException on decoding errors, or if this parameter object
      * has already been initialized.
      */
     public final void init(byte[] params, String format) throws IOException {
         if (this.initialized)
             throw new IOException("already initialized");
@@ -347,11 +346,11 @@
      * @param paramSpec the specification class in which
      * the parameters should be returned.
      *
      * @return the parameter specification.
      *
-     * @exception InvalidParameterSpecException if the requested parameter
+     * @throws    InvalidParameterSpecException if the requested parameter
      * specification is inappropriate for this parameter object, or if this
      * parameter object has not been initialized.
      */
     public final <T extends AlgorithmParameterSpec>
         T getParameterSpec(Class<T> paramSpec)
@@ -368,11 +367,11 @@
      * The primary encoding format for parameters is ASN.1, if an ASN.1
      * specification for this type of parameters exists.
      *
      * @return the parameters encoded using their primary encoding format.
      *
-     * @exception IOException on encoding errors, or if this parameter object
+     * @throws    IOException on encoding errors, or if this parameter object
      * has not been initialized.
      */
     public final byte[] getEncoded() throws IOException
     {
         if (this.initialized == false) {
@@ -390,11 +389,11 @@
      *
      * @param format the name of the encoding format.
      *
      * @return the parameters encoded using the specified encoding scheme.
      *
-     * @exception IOException on encoding errors, or if this parameter object
+     * @throws    IOException on encoding errors, or if this parameter object
      * has not been initialized.
      */
     public final byte[] getEncoded(String format) throws IOException
     {
         if (this.initialized == false) {
