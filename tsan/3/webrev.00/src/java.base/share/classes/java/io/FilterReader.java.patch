diff a/src/java.base/share/classes/java/io/FilterReader.java b/src/java.base/share/classes/java/io/FilterReader.java
--- a/src/java.base/share/classes/java/io/FilterReader.java
+++ b/src/java.base/share/classes/java/io/FilterReader.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2005, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -26,13 +26,13 @@
 package java.io;
 
 
 /**
  * Abstract class for reading filtered character streams.
- * The abstract class <code>FilterReader</code> itself
+ * The abstract class {@code FilterReader} itself
  * provides default methods that pass all requests to
- * the contained stream. Subclasses of <code>FilterReader</code>
+ * the contained stream. Subclasses of {@code FilterReader}
  * should override some of these methods and may also provide
  * additional methods and fields.
  *
  * @author      Mark Reinhold
  * @since       1.1
@@ -47,49 +47,49 @@
 
     /**
      * Creates a new filtered reader.
      *
      * @param in  a Reader object providing the underlying stream.
-     * @throws NullPointerException if <code>in</code> is <code>null</code>
+     * @throws NullPointerException if {@code in} is {@code null}
      */
     protected FilterReader(Reader in) {
         super(in);
         this.in = in;
     }
 
     /**
      * Reads a single character.
      *
-     * @exception  IOException  If an I/O error occurs
+     * @throws     IOException  If an I/O error occurs
      */
     public int read() throws IOException {
         return in.read();
     }
 
     /**
      * Reads characters into a portion of an array.
      *
-     * @exception  IOException  If an I/O error occurs
-     * @exception  IndexOutOfBoundsException {@inheritDoc}
+     * @throws     IOException  If an I/O error occurs
+     * @throws     IndexOutOfBoundsException {@inheritDoc}
      */
     public int read(char cbuf[], int off, int len) throws IOException {
         return in.read(cbuf, off, len);
     }
 
     /**
      * Skips characters.
      *
-     * @exception  IOException  If an I/O error occurs
+     * @throws     IOException  If an I/O error occurs
      */
     public long skip(long n) throws IOException {
         return in.skip(n);
     }
 
     /**
      * Tells whether this stream is ready to be read.
      *
-     * @exception  IOException  If an I/O error occurs
+     * @throws     IOException  If an I/O error occurs
      */
     public boolean ready() throws IOException {
         return in.ready();
     }
 
@@ -101,20 +101,20 @@
     }
 
     /**
      * Marks the present position in the stream.
      *
-     * @exception  IOException  If an I/O error occurs
+     * @throws     IOException  If an I/O error occurs
      */
     public void mark(int readAheadLimit) throws IOException {
         in.mark(readAheadLimit);
     }
 
     /**
      * Resets the stream.
      *
-     * @exception  IOException  If an I/O error occurs
+     * @throws     IOException  If an I/O error occurs
      */
     public void reset() throws IOException {
         in.reset();
     }
 
