diff a/src/java.base/share/classes/java/util/Date.java b/src/java.base/share/classes/java/util/Date.java
--- a/src/java.base/share/classes/java/util/Date.java
+++ b/src/java.base/share/classes/java/util/Date.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1994, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1994, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -152,10 +152,11 @@
 
     /* use serialVersionUID from modified java.util.Date for
      * interoperability with JDK1.1. The Date was modified to write
      * and read only the UTC time.
      */
+    @java.io.Serial
     private static final long serialVersionUID = 7523967970034938905L;
 
     /**
      * Allocates a {@code Date} object and initializes it so that
      * it represents the time at which it was allocated, measured to the
@@ -907,11 +908,11 @@
      * @param   when   a date.
      * @return  {@code true} if and only if the instant of time
      *            represented by this {@code Date} object is strictly
      *            earlier than the instant represented by {@code when};
      *          {@code false} otherwise.
-     * @exception NullPointerException if {@code when} is null.
+     * @throws    NullPointerException if {@code when} is null.
      */
     public boolean before(Date when) {
         return getMillisOf(this) < getMillisOf(when);
     }
 
@@ -921,11 +922,11 @@
      * @param   when   a date.
      * @return  {@code true} if and only if the instant represented
      *          by this {@code Date} object is strictly later than the
      *          instant represented by {@code when};
      *          {@code false} otherwise.
-     * @exception NullPointerException if {@code when} is null.
+     * @throws    NullPointerException if {@code when} is null.
      */
     public boolean after(Date when) {
         return getMillisOf(this) > getMillisOf(when);
     }
 
@@ -970,11 +971,11 @@
      * @return  the value {@code 0} if the argument Date is equal to
      *          this Date; a value less than {@code 0} if this Date
      *          is before the Date argument; and a value greater than
      *      {@code 0} if this Date is after the Date argument.
      * @since   1.2
-     * @exception NullPointerException if {@code anotherDate} is null.
+     * @throws    NullPointerException if {@code anotherDate} is null.
      */
     public int compareTo(Date anotherDate) {
         long thisTime = getMillisOf(this);
         long anotherTime = getMillisOf(anotherDate);
         return (thisTime<anotherTime ? -1 : (thisTime==anotherTime ? 0 : 1));
@@ -1316,20 +1317,22 @@
      *
      * @serialData The value returned by {@code getTime()}
      *             is emitted (long).  This represents the offset from
      *             January 1, 1970, 00:00:00 GMT in milliseconds.
      */
+    @java.io.Serial
     private void writeObject(ObjectOutputStream s)
          throws IOException
     {
         s.defaultWriteObject();
         s.writeLong(getTimeImpl());
     }
 
     /**
      * Reconstitute this object from a stream (i.e., deserialize it).
      */
+    @java.io.Serial
     private void readObject(ObjectInputStream s)
          throws IOException, ClassNotFoundException
     {
         s.defaultReadObject();
         fastTime = s.readLong();
@@ -1348,12 +1351,12 @@
      * will throw an exception.
      *
      * @param instant  the instant to convert
      * @return a {@code Date} representing the same point on the time-line as
      *  the provided instant
-     * @exception NullPointerException if {@code instant} is null.
-     * @exception IllegalArgumentException if the instant is too large to
+     * @throws    NullPointerException if {@code instant} is null.
+     * @throws    IllegalArgumentException if the instant is too large to
      *  represent as a {@code Date}
      * @since 1.8
      */
     public static Date from(Instant instant) {
         try {
