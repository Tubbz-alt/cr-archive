diff a/src/java.base/share/classes/java/net/Inet4Address.java b/src/java.base/share/classes/java/net/Inet4Address.java
--- a/src/java.base/share/classes/java/net/Inet4Address.java
+++ b/src/java.base/share/classes/java/net/Inet4Address.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -34,11 +34,11 @@
  * <a href="http://www.ietf.org/rfc/rfc1918.txt">
  * <i>RFC&nbsp;1918: Address Allocation for Private Internets</i></a>,
  * and <a href="http://www.ietf.org/rfc/rfc2365.txt"><i>RFC&nbsp;2365:
  * Administratively Scoped IP Multicast</i></a>
  *
- * <h3> <a id="format">Textual representation of IP addresses</a> </h3>
+ * <h2> <a id="format">Textual representation of IP addresses</a> </h2>
  *
  * Textual representation of IPv4 address used as input to methods
  * takes one of the following forms:
  *
  * <blockquote><ul style="list-style-type:none">
@@ -68,11 +68,11 @@
  * the network address without any byte rearrangement.
  *
  * <p> For methods that return a textual representation as output
  * value, the first form, i.e. a dotted-quad string, is used.
  *
- * <h4> The Scope of a Multicast Address </h4>
+ * <h3> The Scope of a Multicast Address </h3>
  *
  * Historically the IPv4 TTL field in the IP header has doubled as a
  * multicast scope field: a TTL of 0 means node-local, 1 means
  * link-local, up through 32 means site-local, up through 64 means
  * region-local, up through 128 means continent-local, and up through
@@ -87,10 +87,11 @@
     static final int INADDRSZ = 4;
 
     /** use serialVersionUID from InetAddress, but Inet4Address instance
      *  is always replaced by an InetAddress instance before being
      *  serialized */
+    @java.io.Serial
     private static final long serialVersionUID = 3286316764910316507L;
 
     /*
      * Perform initializations.
      */
@@ -132,10 +133,11 @@
      * @return the alternate object to be serialized.
      *
      * @throws ObjectStreamException if a new object replacing this
      * object could not be created
      */
+    @java.io.Serial
     private Object writeReplace() throws ObjectStreamException {
         // will replace the to be serialized 'this' object
         InetAddress inet = new InetAddress();
         inet.holder().hostName = holder().getHostName();
         inet.holder().address = holder().getAddress();
@@ -306,10 +308,17 @@
         addr[2] = (byte) ((address >>> 8) & 0xFF);
         addr[3] = (byte) (address & 0xFF);
         return addr;
     }
 
+    /**
+     * Returns the 32-bit IPv4 address.
+     */
+    int addressValue() {
+        return holder().getAddress();
+    }
+
     /**
      * Returns the IP address string in textual presentation form.
      *
      * @return  the raw IP address in a string format.
      */
