diff a/src/java.base/share/classes/java/text/DateFormatSymbols.java b/src/java.base/share/classes/java/text/DateFormatSymbols.java
--- a/src/java.base/share/classes/java/text/DateFormatSymbols.java
+++ b/src/java.base/share/classes/java/text/DateFormatSymbols.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -54,26 +54,26 @@
 import sun.util.locale.provider.LocaleServiceProviderPool;
 import sun.util.locale.provider.ResourceBundleBasedAdapter;
 import sun.util.locale.provider.TimeZoneNameUtility;
 
 /**
- * <code>DateFormatSymbols</code> is a public class for encapsulating
+ * {@code DateFormatSymbols} is a public class for encapsulating
  * localizable date-time formatting data, such as the names of the
  * months, the names of the days of the week, and the time zone data.
- * <code>SimpleDateFormat</code> uses
- * <code>DateFormatSymbols</code> to encapsulate this information.
+ * {@code SimpleDateFormat} uses
+ * {@code DateFormatSymbols} to encapsulate this information.
  *
  * <p>
- * Typically you shouldn't use <code>DateFormatSymbols</code> directly.
+ * Typically you shouldn't use {@code DateFormatSymbols} directly.
  * Rather, you are encouraged to create a date-time formatter with the
- * <code>DateFormat</code> class's factory methods: <code>getTimeInstance</code>,
- * <code>getDateInstance</code>, or <code>getDateTimeInstance</code>.
- * These methods automatically create a <code>DateFormatSymbols</code> for
+ * {@code DateFormat} class's factory methods: {@code getTimeInstance},
+ * {@code getDateInstance}, or {@code getDateTimeInstance}.
+ * These methods automatically create a {@code DateFormatSymbols} for
  * the formatter so that you don't have to. After the
  * formatter is created, you may modify its format pattern using the
- * <code>setPattern</code> method. For more information about
- * creating formatters using <code>DateFormat</code>'s factory methods,
+ * {@code setPattern} method. For more information about
+ * creating formatters using {@code DateFormat}'s factory methods,
  * see {@link DateFormat}.
  *
  * <p>
  * If you decide to create a date-time formatter with a specific
  * format pattern for a specific locale, you can do so with:
@@ -86,20 +86,20 @@
  * <p>If the locale contains "rg" (region override)
  * <a href="../util/Locale.html#def_locale_extension">Unicode extension</a>,
  * the symbols are overridden for the designated region.
  *
  * <p>
- * <code>DateFormatSymbols</code> objects are cloneable. When you obtain
- * a <code>DateFormatSymbols</code> object, feel free to modify the
+ * {@code DateFormatSymbols} objects are cloneable. When you obtain
+ * a {@code DateFormatSymbols} object, feel free to modify the
  * date-time formatting data. For instance, you can replace the localized
  * date-time format pattern characters with the ones that you feel easy
  * to remember. Or you can change the representative cities
  * to your favorite ones.
  *
  * <p>
- * New <code>DateFormatSymbols</code> subclasses may be added to support
- * <code>SimpleDateFormat</code> for date-time formatting for additional locales.
+ * New {@code DateFormatSymbols} subclasses may be added to support
+ * {@code SimpleDateFormat} for date-time formatting for additional locales.
 
  * @see          DateFormat
  * @see          SimpleDateFormat
  * @see          java.util.SimpleTimeZone
  * @author       Chen-Lieh Huang
@@ -120,11 +120,11 @@
      * {@link #DateFormatSymbols(Locale)
      *     DateFormatSymbols(Locale.getDefault(Locale.Category.FORMAT))}.
      * @see #getInstance()
      * @see java.util.Locale#getDefault(java.util.Locale.Category)
      * @see java.util.Locale.Category#FORMAT
-     * @exception  java.util.MissingResourceException
+     * @throws     java.util.MissingResourceException
      *             if the resources for the default locale cannot be
      *             found or cannot be loaded.
      */
     public DateFormatSymbols()
     {
@@ -140,11 +140,11 @@
      * implementations. For full locale coverage, use the
      * {@link #getInstance(Locale) getInstance} method.
      *
      * @param locale the desired locale
      * @see #getInstance(Locale)
-     * @exception  java.util.MissingResourceException
+     * @throws     java.util.MissingResourceException
      *             if the resources for the specified locale cannot be
      *             found or cannot be loaded.
      */
     public DateFormatSymbols(Locale locale)
     {
@@ -157,74 +157,74 @@
     private DateFormatSymbols(boolean flag) {
     }
 
     /**
      * Era strings. For example: "AD" and "BC".  An array of 2 strings,
-     * indexed by <code>Calendar.BC</code> and <code>Calendar.AD</code>.
+     * indexed by {@code Calendar.BC} and {@code Calendar.AD}.
      * @serial
      */
     String eras[] = null;
 
     /**
      * Month strings. For example: "January", "February", etc.  An array
      * of 13 strings (some calendars have 13 months), indexed by
-     * <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.
+     * {@code Calendar.JANUARY}, {@code Calendar.FEBRUARY}, etc.
      * @serial
      */
     String months[] = null;
 
     /**
      * Short month strings. For example: "Jan", "Feb", etc.  An array of
      * 13 strings (some calendars have 13 months), indexed by
-     * <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.
+     * {@code Calendar.JANUARY}, {@code Calendar.FEBRUARY}, etc.
 
      * @serial
      */
     String shortMonths[] = null;
 
     /**
      * Weekday strings. For example: "Sunday", "Monday", etc.  An array
-     * of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
-     * <code>Calendar.MONDAY</code>, etc.
-     * The element <code>weekdays[0]</code> is ignored.
+     * of 8 strings, indexed by {@code Calendar.SUNDAY},
+     * {@code Calendar.MONDAY}, etc.
+     * The element {@code weekdays[0]} is ignored.
      * @serial
      */
     String weekdays[] = null;
 
     /**
      * Short weekday strings. For example: "Sun", "Mon", etc.  An array
-     * of 8 strings, indexed by <code>Calendar.SUNDAY</code>,
-     * <code>Calendar.MONDAY</code>, etc.
-     * The element <code>shortWeekdays[0]</code> is ignored.
+     * of 8 strings, indexed by {@code Calendar.SUNDAY},
+     * {@code Calendar.MONDAY}, etc.
+     * The element {@code shortWeekdays[0]} is ignored.
      * @serial
      */
     String shortWeekdays[] = null;
 
     /**
      * AM and PM strings. For example: "AM" and "PM".  An array of
-     * 2 strings, indexed by <code>Calendar.AM</code> and
-     * <code>Calendar.PM</code>.
+     * 2 strings, indexed by {@code Calendar.AM} and
+     * {@code Calendar.PM}.
      * @serial
      */
     String ampms[] = null;
 
     /**
      * Localized names of time zones in this locale.  This is a
      * two-dimensional array of strings of size <em>n</em> by <em>m</em>,
      * where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an
-     * entry containing the localized names for a single <code>TimeZone</code>.
-     * Each such row contains (with <code>i</code> ranging from
+     * entry containing the localized names for a single {@code TimeZone}.
+     * Each such row contains (with {@code i} ranging from
      * 0..<em>n</em>-1):
      * <ul>
-     * <li><code>zoneStrings[i][0]</code> - time zone ID</li>
-     * <li><code>zoneStrings[i][1]</code> - long name of zone in standard
+     * <li>{@code zoneStrings[i][0]} - time zone ID</li>
+     * <li>{@code zoneStrings[i][1]} - long name of zone in standard
      * time</li>
-     * <li><code>zoneStrings[i][2]</code> - short name of zone in
+     * <li>{@code zoneStrings[i][2]} - short name of zone in
      * standard time</li>
-     * <li><code>zoneStrings[i][3]</code> - long name of zone in daylight
+     * <li>{@code zoneStrings[i][3]} - long name of zone in daylight
      * saving time</li>
-     * <li><code>zoneStrings[i][4]</code> - short name of zone in daylight
+     * <li>{@code zoneStrings[i][4]} - short name of zone in daylight
      * saving time</li>
      * </ul>
      * The zone ID is <em>not</em> localized; it's one of the valid IDs of
      * the {@link java.util.TimeZone TimeZone} class that are not
      * <a href="../util/TimeZone.html#CustomID">custom IDs</a>.
@@ -272,12 +272,12 @@
     /**
      * Localized date-time pattern characters. For example, a locale may
      * wish to use 'u' rather than 'y' to represent years in its date format
      * pattern strings.
      * This string must be exactly 18 characters long, with the index of
-     * the characters described by <code>DateFormat.ERA_FIELD</code>,
-     * <code>DateFormat.YEAR_FIELD</code>, etc.  Thus, if the string were
+     * the characters described by {@code DateFormat.ERA_FIELD},
+     * {@code DateFormat.YEAR_FIELD}, etc.  Thus, if the string were
      * "Xz...", then localized patterns would use 'X' for era and 'z' for year.
      * @serial
      */
     String  localPatternChars = null;
 
@@ -288,60 +288,61 @@
      * @serial
      */
     Locale locale = null;
 
     /* use serialVersionUID from JDK 1.1.4 for interoperability */
+    @java.io.Serial
     static final long serialVersionUID = -5987973545549424702L;
 
     /**
      * Returns an array of all locales for which the
-     * <code>getInstance</code> methods of this class can return
+     * {@code getInstance} methods of this class can return
      * localized instances.
      * The returned array represents the union of locales supported by the
      * Java runtime and by installed
      * {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}
-     * implementations.  It must contain at least a <code>Locale</code>
+     * implementations.  It must contain at least a {@code Locale}
      * instance equal to {@link java.util.Locale#US Locale.US}.
      *
      * @return An array of locales for which localized
-     *         <code>DateFormatSymbols</code> instances are available.
+     *         {@code DateFormatSymbols} instances are available.
      * @since 1.6
      */
     public static Locale[] getAvailableLocales() {
         LocaleServiceProviderPool pool=
             LocaleServiceProviderPool.getPool(DateFormatSymbolsProvider.class);
         return pool.getAvailableLocales();
     }
 
     /**
-     * Gets the <code>DateFormatSymbols</code> instance for the default
-     * locale.  This method provides access to <code>DateFormatSymbols</code>
+     * Gets the {@code DateFormatSymbols} instance for the default
+     * locale.  This method provides access to {@code DateFormatSymbols}
      * instances for locales supported by the Java runtime itself as well
      * as for those supported by installed
      * {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}
      * implementations.
      * <p>This is equivalent to calling {@link #getInstance(Locale)
      *     getInstance(Locale.getDefault(Locale.Category.FORMAT))}.
      * @see java.util.Locale#getDefault(java.util.Locale.Category)
      * @see java.util.Locale.Category#FORMAT
-     * @return a <code>DateFormatSymbols</code> instance.
+     * @return a {@code DateFormatSymbols} instance.
      * @since 1.6
      */
     public static final DateFormatSymbols getInstance() {
         return getInstance(Locale.getDefault(Locale.Category.FORMAT));
     }
 
     /**
-     * Gets the <code>DateFormatSymbols</code> instance for the specified
-     * locale.  This method provides access to <code>DateFormatSymbols</code>
+     * Gets the {@code DateFormatSymbols} instance for the specified
+     * locale.  This method provides access to {@code DateFormatSymbols}
      * instances for locales supported by the Java runtime itself as well
      * as for those supported by installed
      * {@link java.text.spi.DateFormatSymbolsProvider DateFormatSymbolsProvider}
      * implementations.
      * @param locale the given locale.
-     * @return a <code>DateFormatSymbols</code> instance.
-     * @exception NullPointerException if <code>locale</code> is null
+     * @return a {@code DateFormatSymbols} instance.
+     * @throws    NullPointerException if {@code locale} is null
      * @since 1.6
      */
     public static final DateFormatSymbols getInstance(Locale locale) {
         DateFormatSymbols dfs = getProviderInstance(locale);
         if (dfs != null) {
@@ -535,32 +536,32 @@
      * instead.
      * <p>
      * The value returned is a
      * two-dimensional array of strings of size <em>n</em> by <em>m</em>,
      * where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an
-     * entry containing the localized names for a single <code>TimeZone</code>.
-     * Each such row contains (with <code>i</code> ranging from
+     * entry containing the localized names for a single {@code TimeZone}.
+     * Each such row contains (with {@code i} ranging from
      * 0..<em>n</em>-1):
      * <ul>
-     * <li><code>zoneStrings[i][0]</code> - time zone ID</li>
-     * <li><code>zoneStrings[i][1]</code> - long name of zone in standard
+     * <li>{@code zoneStrings[i][0]} - time zone ID</li>
+     * <li>{@code zoneStrings[i][1]} - long name of zone in standard
      * time</li>
-     * <li><code>zoneStrings[i][2]</code> - short name of zone in
+     * <li>{@code zoneStrings[i][2]} - short name of zone in
      * standard time</li>
-     * <li><code>zoneStrings[i][3]</code> - long name of zone in daylight
+     * <li>{@code zoneStrings[i][3]} - long name of zone in daylight
      * saving time</li>
-     * <li><code>zoneStrings[i][4]</code> - short name of zone in daylight
+     * <li>{@code zoneStrings[i][4]} - short name of zone in daylight
      * saving time</li>
      * </ul>
      * The zone ID is <em>not</em> localized; it's one of the valid IDs of
      * the {@link java.util.TimeZone TimeZone} class that are not
      * <a href="../util/TimeZone.html#CustomID">custom IDs</a>.
      * All other entries are localized names.  If a zone does not implement
      * daylight saving time, the daylight saving time names should not be used.
      * <p>
      * If {@link #setZoneStrings(String[][]) setZoneStrings} has been called
-     * on this <code>DateFormatSymbols</code> instance, then the strings
+     * on this {@code DateFormatSymbols} instance, then the strings
      * provided by that call are returned. Otherwise, the returned array
      * contains names provided by the Java runtime and by installed
      * {@link java.util.spi.TimeZoneNameProvider TimeZoneNameProvider}
      * implementations.
      *
@@ -573,33 +574,33 @@
 
     /**
      * Sets time zone strings.  The argument must be a
      * two-dimensional array of strings of size <em>n</em> by <em>m</em>,
      * where <em>m</em> is at least 5.  Each of the <em>n</em> rows is an
-     * entry containing the localized names for a single <code>TimeZone</code>.
-     * Each such row contains (with <code>i</code> ranging from
+     * entry containing the localized names for a single {@code TimeZone}.
+     * Each such row contains (with {@code i} ranging from
      * 0..<em>n</em>-1):
      * <ul>
-     * <li><code>zoneStrings[i][0]</code> - time zone ID</li>
-     * <li><code>zoneStrings[i][1]</code> - long name of zone in standard
+     * <li>{@code zoneStrings[i][0]} - time zone ID</li>
+     * <li>{@code zoneStrings[i][1]} - long name of zone in standard
      * time</li>
-     * <li><code>zoneStrings[i][2]</code> - short name of zone in
+     * <li>{@code zoneStrings[i][2]} - short name of zone in
      * standard time</li>
-     * <li><code>zoneStrings[i][3]</code> - long name of zone in daylight
+     * <li>{@code zoneStrings[i][3]} - long name of zone in daylight
      * saving time</li>
-     * <li><code>zoneStrings[i][4]</code> - short name of zone in daylight
+     * <li>{@code zoneStrings[i][4]} - short name of zone in daylight
      * saving time</li>
      * </ul>
      * The zone ID is <em>not</em> localized; it's one of the valid IDs of
      * the {@link java.util.TimeZone TimeZone} class that are not
      * <a href="../util/TimeZone.html#CustomID">custom IDs</a>.
      * All other entries are localized names.
      *
      * @param newZoneStrings the new time zone strings.
-     * @exception IllegalArgumentException if the length of any row in
-     *    <code>newZoneStrings</code> is less than 5
-     * @exception NullPointerException if <code>newZoneStrings</code> is null
+     * @throws    IllegalArgumentException if the length of any row in
+     *    {@code newZoneStrings} is less than 5
+     * @throws    NullPointerException if {@code newZoneStrings} is null
      * @see #getZoneStrings()
      */
     public void setZoneStrings(String[][] newZoneStrings) {
         String[][] aCopy = new String[newZoneStrings.length][];
         for (int i = 0; i < newZoneStrings.length; ++i) {
@@ -885,15 +886,16 @@
         dst.cachedHashCode = 0;
     }
 
     /**
      * Write out the default serializable data, after ensuring the
-     * <code>zoneStrings</code> field is initialized in order to make
+     * {@code zoneStrings} field is initialized in order to make
      * sure the backward compatibility.
      *
      * @since 1.6
      */
+    @java.io.Serial
     private void writeObject(ObjectOutputStream stream) throws IOException {
         if (zoneStrings == null) {
             zoneStrings = TimeZoneNameUtility.getZoneStrings(locale);
         }
         stream.defaultWriteObject();
