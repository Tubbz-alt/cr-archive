diff a/src/java.base/share/classes/java/util/zip/GZIPOutputStream.java b/src/java.base/share/classes/java/util/zip/GZIPOutputStream.java
--- a/src/java.base/share/classes/java/util/zip/GZIPOutputStream.java
+++ b/src/java.base/share/classes/java/util/zip/GZIPOutputStream.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -33,12 +33,11 @@
  * the GZIP file format.
  * @author      David Connelly
  * @since 1.1
  *
  */
-public
-class GZIPOutputStream extends DeflaterOutputStream {
+public class GZIPOutputStream extends DeflaterOutputStream {
     /**
      * CRC-32 of uncompressed data.
      */
     protected CRC32 crc = new CRC32();
 
@@ -59,12 +58,12 @@
      * <p>The new output stream instance is created as if by invoking
      * the 3-argument constructor GZIPOutputStream(out, size, false).
      *
      * @param out the output stream
      * @param size the output buffer size
-     * @exception IOException If an I/O error has occurred.
-     * @exception IllegalArgumentException if {@code size <= 0}
+     * @throws    IOException If an I/O error has occurred.
+     * @throws    IllegalArgumentException if {@code size <= 0}
      */
     public GZIPOutputStream(OutputStream out, int size) throws IOException {
         this(out, size, false);
     }
 
@@ -78,12 +77,12 @@
      *        if {@code true} invocation of the inherited
      *        {@link DeflaterOutputStream#flush() flush()} method of
      *        this instance flushes the compressor with flush mode
      *        {@link Deflater#SYNC_FLUSH} before flushing the output
      *        stream, otherwise only flushes the output stream
-     * @exception IOException If an I/O error has occurred.
-     * @exception IllegalArgumentException if {@code size <= 0}
+     * @throws    IOException If an I/O error has occurred.
+     * @throws    IllegalArgumentException if {@code size <= 0}
      *
      * @since 1.7
      */
     public GZIPOutputStream(OutputStream out, int size, boolean syncFlush)
         throws IOException
@@ -102,11 +101,11 @@
      *
      * <p>The new output stream instance is created as if by invoking
      * the 2-argument constructor GZIPOutputStream(out, false).
      *
      * @param out the output stream
-     * @exception IOException If an I/O error has occurred.
+     * @throws    IOException If an I/O error has occurred.
      */
     public GZIPOutputStream(OutputStream out) throws IOException {
         this(out, 512, false);
     }
 
@@ -120,11 +119,11 @@
      *        {@link DeflaterOutputStream#flush() flush()} method of
      *        this instance flushes the compressor with flush mode
      *        {@link Deflater#SYNC_FLUSH} before flushing the output
      *        stream, otherwise only flushes the output stream
      *
-     * @exception IOException If an I/O error has occurred.
+     * @throws    IOException If an I/O error has occurred.
      *
      * @since 1.7
      */
     public GZIPOutputStream(OutputStream out, boolean syncFlush)
         throws IOException
@@ -136,11 +135,11 @@
      * Writes array of bytes to the compressed output stream. This method
      * will block until all the bytes are written.
      * @param buf the data to be written
      * @param off the start offset of the data
      * @param len the length of the data
-     * @exception IOException If an I/O error has occurred.
+     * @throws    IOException If an I/O error has occurred.
      */
     public synchronized void write(byte[] buf, int off, int len)
         throws IOException
     {
         super.write(buf, off, len);
@@ -149,11 +148,11 @@
 
     /**
      * Finishes writing compressed data to the output stream without closing
      * the underlying stream. Use this method when applying multiple filters
      * in succession to the same output stream.
-     * @exception IOException if an I/O error has occurred
+     * @throws    IOException if an I/O error has occurred
      */
     public void finish() throws IOException {
         if (!def.finished()) {
             def.finish();
             while (!def.finished()) {
