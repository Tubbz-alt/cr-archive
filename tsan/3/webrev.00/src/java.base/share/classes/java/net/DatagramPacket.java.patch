diff a/src/java.base/share/classes/java/net/DatagramPacket.java b/src/java.base/share/classes/java/net/DatagramPacket.java
--- a/src/java.base/share/classes/java/net/DatagramPacket.java
+++ b/src/java.base/share/classes/java/net/DatagramPacket.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1995, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1995, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -33,10 +33,20 @@
  * another based solely on information contained within that packet.
  * Multiple packets sent from one machine to another might be routed
  * differently, and might arrive in any order. Packet delivery is
  * not guaranteed.
  *
+ * <p>
+ * Unless otherwise specified, passing a {@code null} argument causes
+ * a {@link NullPointerException NullPointerException} to be thrown.
+ *
+ * <p>
+ * Methods and constructors of {@code DatagramPacket} accept parameters
+ * of type {@link SocketAddress}. {@code DatagramPacket} supports
+ * {@link InetSocketAddress}, and may support additional {@code SocketAddress}
+ * sub-types.
+ *
  * @author  Pavani Diwanji
  * @author  Benjamin Renaud
  * @since   1.0
  */
 public final
@@ -44,17 +54,11 @@
 
     /**
      * Perform class initialization
      */
     static {
-        java.security.AccessController.doPrivileged(
-            new java.security.PrivilegedAction<>() {
-                public Void run() {
-                    System.loadLibrary("net");
-                    return null;
-                }
-            });
+        jdk.internal.loader.BootLoader.loadLibrary("net");
         init();
     }
 
     /*
      * The fields of this class are package-private since DatagramSocketImpl
@@ -72,15 +76,19 @@
      * length {@code length}, specifying an offset into the buffer.
      * <p>
      * The {@code length} argument must be less than or equal to
      * {@code buf.length}.
      *
-     * @param   buf      buffer for holding the incoming datagram.
-     * @param   offset   the offset for the buffer
-     * @param   length   the number of bytes to read.
+     * @param   buf     buffer for holding the incoming datagram.
+     * @param   offset  the offset for the buffer
+     * @param   length  the number of bytes to read.
      *
-     * @since 1.2
+     * @throws  IllegalArgumentException    if the length or offset
+     *          is negative, or if the length plus the offset is
+     *          greater than the length of the packet's given buffer.
+     *
+     * @since   1.2
      */
     public DatagramPacket(byte buf[], int offset, int length) {
         setData(buf, offset, length);
         this.address = null;
         this.port = -1;
@@ -91,12 +99,16 @@
      * length {@code length}.
      * <p>
      * The {@code length} argument must be less than or equal to
      * {@code buf.length}.
      *
-     * @param   buf      buffer for holding the incoming datagram.
-     * @param   length   the number of bytes to read.
+     * @param   buf     buffer for holding the incoming datagram.
+     * @param   length  the number of bytes to read.
+     *
+     * @throws  IllegalArgumentException    if the length is negative
+     *          or if the length is greater than the length of the
+     *          packet's given buffer.
      */
     public DatagramPacket(byte buf[], int length) {
         this (buf, 0, length);
     }
 
@@ -105,18 +117,24 @@
      * {@code length} with offset {@code offset} to the
      * specified port number on the specified host. The
      * {@code length} argument must be less than or equal to
      * {@code buf.length}.
      *
-     * @param   buf      the packet data.
-     * @param   offset   the packet data offset.
-     * @param   length   the packet data length.
-     * @param   address  the destination address.
-     * @param   port     the destination port number.
-     * @see java.net.InetAddress
+     * @param   buf     the packet data.
+     * @param   offset  the packet data offset.
+     * @param   length  the packet data length.
+     * @param   address the destination address, or {@code null}.
+     * @param   port    the destination port number.
      *
-     * @since 1.2
+     * @throws  IllegalArgumentException    if the length or offset
+     *          is negative, or if the length plus the offset is
+     *          greater than the length of the packet's given buffer,
+     *          or if the port is out of range.
+     *
+     * @see     java.net.InetAddress
+     *
+     * @since   1.2
      */
     public DatagramPacket(byte buf[], int offset, int length,
                           InetAddress address, int port) {
         setData(buf, offset, length);
         setAddress(address);
@@ -128,18 +146,23 @@
      * {@code length} with offset {@code offset} to the
      * specified port number on the specified host. The
      * {@code length} argument must be less than or equal to
      * {@code buf.length}.
      *
-     * @param   buf      the packet data.
-     * @param   offset   the packet data offset.
-     * @param   length   the packet data length.
-     * @param   address  the destination socket address.
-     * @throws  IllegalArgumentException if address type is not supported
-     * @see java.net.InetAddress
+     * @param   buf     the packet data.
+     * @param   offset  the packet data offset.
+     * @param   length  the packet data length.
+     * @param   address the destination socket address.
+     *
+     * @throws  IllegalArgumentException    if address is null or its
+     *          type is not supported, or if the length or offset is
+     *          negative, or if the length plus the offset is greater
+     *          than the length of the packet's given buffer.
+     *
+     * @see     java.net.InetAddress
      *
-     * @since 1.4
+     * @since   1.4
      */
     public DatagramPacket(byte buf[], int offset, int length, SocketAddress address) {
         setData(buf, offset, length);
         setSocketAddress(address);
     }
@@ -148,14 +171,19 @@
      * Constructs a datagram packet for sending packets of length
      * {@code length} to the specified port number on the specified
      * host. The {@code length} argument must be less than or equal
      * to {@code buf.length}.
      *
-     * @param   buf      the packet data.
-     * @param   length   the packet length.
-     * @param   address  the destination address.
-     * @param   port     the destination port number.
+     * @param   buf     the packet data.
+     * @param   length  the packet length.
+     * @param   address the destination address, or {@code null}.
+     * @param   port    the destination port number.
+     *
+     * @throws  IllegalArgumentException    if the length is negative,
+     *          or if the length is greater than the length of the
+     *          packet's given buffer, or if the port is out of range.
+     *
      * @see     java.net.InetAddress
      */
     public DatagramPacket(byte buf[], int length,
                           InetAddress address, int port) {
         this(buf, 0, length, address, port);
@@ -165,16 +193,22 @@
      * Constructs a datagram packet for sending packets of length
      * {@code length} to the specified port number on the specified
      * host. The {@code length} argument must be less than or equal
      * to {@code buf.length}.
      *
-     * @param   buf      the packet data.
-     * @param   length   the packet length.
-     * @param   address  the destination address.
-     * @throws  IllegalArgumentException if address type is not supported
-     * @since 1.4
+     * @param   buf     the packet data.
+     * @param   length  the packet length.
+     * @param   address the destination address.
+     *
+     * @throws  IllegalArgumentException    if address is null or its type is
+     *          not supported, or if the length is negative, or if the length
+     *          is greater than the length of the packet's given buffer, or
+     *          if the port is out of range.
+     *
      * @see     java.net.InetAddress
+     *
+     * @since   1.4
      */
     public DatagramPacket(byte buf[], int length, SocketAddress address) {
         this(buf, 0, length, address);
     }
 
@@ -242,24 +276,24 @@
 
     /**
      * Set the data buffer for this packet. This sets the
      * data, length and offset of the packet.
      *
-     * @param buf the buffer to set for this packet
-     *
-     * @param offset the offset into the data
-     *
-     * @param length the length of the data
-     *       and/or the length of the buffer used to receive data
+     * @param   buf     the buffer to set for this packet
+     * @param   offset  the offset into the data
+     * @param   length  the length of the data
+     *          and/or the length of the buffer used to receive data
      *
-     * @exception NullPointerException if the argument is null
+     * @throws  IllegalArgumentException    if the length or offset
+     *          is negative, or if the length plus the offset is
+     *          greater than the length of the packet's given buffer.
      *
-     * @see #getData
-     * @see #getOffset
-     * @see #getLength
+     * @see     #getData
+     * @see     #getOffset
+     * @see     #getLength
      *
-     * @since 1.2
+     * @since   1.2
      */
     public synchronized void setData(byte[] buf, int offset, int length) {
         /* this will check to see if buf is null */
         if (length < 0 || offset < 0 ||
             (length + offset) < 0 ||
@@ -273,24 +307,32 @@
     }
 
     /**
      * Sets the IP address of the machine to which this datagram
      * is being sent.
-     * @param iaddr the {@code InetAddress}
+     *
+     * @param   iaddr   the {@code InetAddress}, or {@code null}.
+     *
+     * @see     #getAddress()
+     *
      * @since   1.1
-     * @see #getAddress()
      */
     public synchronized void setAddress(InetAddress iaddr) {
         address = iaddr;
     }
 
     /**
      * Sets the port number on the remote host to which this datagram
      * is being sent.
-     * @param iport the port number
+     *
+     * @param   iport   the port number
+     *
+     * @throws  IllegalArgumentException    if the port is out of range
+     *
+     * @see     #getPort()
+     *
      * @since   1.1
-     * @see #getPort()
      */
     public synchronized void setPort(int iport) {
         if (iport < 0 || iport > 0xFFFF) {
             throw new IllegalArgumentException("Port out of range:"+ iport);
         }
@@ -299,16 +341,18 @@
 
     /**
      * Sets the SocketAddress (usually IP address + port number) of the remote
      * host to which this datagram is being sent.
      *
-     * @param address the {@code SocketAddress}
-     * @throws  IllegalArgumentException if address is null or is a
-     *          SocketAddress subclass not supported by this socket
+     * @param   address the {@code SocketAddress}
+     *
+     * @throws  IllegalArgumentException    if address is null or is a
+     *          SocketAddress subclass not supported.
      *
-     * @since 1.4
-     * @see #getSocketAddress
+     * @see     #getSocketAddress
+     *
+     * @since   1.4
      */
     public synchronized void setSocketAddress(SocketAddress address) {
         if (address == null || !(address instanceof InetSocketAddress))
             throw new IllegalArgumentException("unsupported address type");
         InetSocketAddress addr = (InetSocketAddress) address;
@@ -320,31 +364,31 @@
 
     /**
      * Gets the SocketAddress (usually IP address + port number) of the remote
      * host that this packet is being sent to or is coming from.
      *
-     * @return the {@code SocketAddress}
-     * @since 1.4
-     * @see #setSocketAddress
+     * @return  the {@code SocketAddress}
+     *
+     * @see     #setSocketAddress
+     *
+     * @since   1.4
      */
     public synchronized SocketAddress getSocketAddress() {
         return new InetSocketAddress(getAddress(), getPort());
     }
 
     /**
      * Set the data buffer for this packet. With the offset of
      * this DatagramPacket set to 0, and the length set to
      * the length of {@code buf}.
      *
-     * @param buf the buffer to set for this packet.
-     *
-     * @exception NullPointerException if the argument is null.
+     * @param   buf     the buffer to set for this packet.
      *
-     * @see #getLength
-     * @see #getData
+     * @see     #getLength
+     * @see     #getData
      *
-     * @since 1.1
+     * @since   1.1
      */
     public synchronized void setData(byte[] buf) {
         if (buf == null) {
             throw new NullPointerException("null packet buffer");
         }
@@ -359,20 +403,20 @@
      * the number of bytes from the packet's data buffer that will be
      * sent, or the number of bytes of the packet's data buffer that
      * will be used for receiving data. The length must be lesser or
      * equal to the offset plus the length of the packet's buffer.
      *
-     * @param length the length to set for this packet.
+     * @param   length      the length to set for this packet.
      *
-     * @exception IllegalArgumentException if the length is negative
-     * of if the length is greater than the packet's data buffer
-     * length.
+     * @throws  IllegalArgumentException    if the length is negative,
+     *          or if the length plus the offset is greater than the
+     *          length of the packet's data buffer.
      *
-     * @see #getLength
-     * @see #setData
+     * @see     #getLength
+     * @see     #setData
      *
-     * @since 1.1
+     * @since   1.1
      */
     public synchronized void setLength(int length) {
         if ((length + offset) > buf.length || length < 0 ||
             (length + offset) < 0) {
             throw new IllegalArgumentException("illegal length");
