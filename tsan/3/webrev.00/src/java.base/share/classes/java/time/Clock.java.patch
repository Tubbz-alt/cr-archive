diff a/src/java.base/share/classes/java/time/Clock.java b/src/java.base/share/classes/java/time/Clock.java
--- a/src/java.base/share/classes/java/time/Clock.java
+++ b/src/java.base/share/classes/java/time/Clock.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -477,10 +477,11 @@
     /**
      * Implementation of a clock that always returns the latest time from
      * {@link System#currentTimeMillis()}.
      */
     static final class SystemClock extends Clock implements Serializable {
+        @java.io.Serial
         private static final long serialVersionUID = 6740630888130243051L;
         private static final long OFFSET_SEED =
                 System.currentTimeMillis()/1000 - 1024; // initial offest
         static final SystemClock UTC = new SystemClock(ZoneOffset.UTC);
 
@@ -570,10 +571,11 @@
         }
         @Override
         public String toString() {
             return "SystemClock[" + zone + "]";
         }
+        @java.io.Serial
         private void readObject(ObjectInputStream is)
                 throws IOException, ClassNotFoundException {
             // ensure that offset is initialized
             is.defaultReadObject();
             offset = OFFSET_SEED;
@@ -584,10 +586,11 @@
     /**
      * Implementation of a clock that always returns the same instant.
      * This is typically used for testing.
      */
     static final class FixedClock extends Clock implements Serializable {
+        @java.io.Serial
         private static final long serialVersionUID = 7430389292664866958L;
         private final Instant instant;
         private final ZoneId zone;
 
         FixedClock(Instant fixedInstant, ZoneId zone) {
@@ -634,11 +637,13 @@
     //-----------------------------------------------------------------------
     /**
      * Implementation of a clock that adds an offset to an underlying clock.
      */
     static final class OffsetClock extends Clock implements Serializable {
+        @java.io.Serial
         private static final long serialVersionUID = 2007484719125426256L;
+        @SuppressWarnings("serial") // Not statically typed as Serializable
         private final Clock baseClock;
         private final Duration offset;
 
         OffsetClock(Clock baseClock, Duration offset) {
             this.baseClock = baseClock;
@@ -684,11 +689,13 @@
     //-----------------------------------------------------------------------
     /**
      * Implementation of a clock that adds an offset to an underlying clock.
      */
     static final class TickClock extends Clock implements Serializable {
+        @java.io.Serial
         private static final long serialVersionUID = 6504659149906368850L;
+        @SuppressWarnings("serial") // Not statically typed as Serializable
         private final Clock baseClock;
         private final long tickNanos;
 
         TickClock(Clock baseClock, long tickNanos) {
             this.baseClock = baseClock;
