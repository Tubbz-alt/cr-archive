diff a/src/java.base/share/classes/java/util/spi/CurrencyNameProvider.java b/src/java.base/share/classes/java/util/spi/CurrencyNameProvider.java
--- a/src/java.base/share/classes/java/util/spi/CurrencyNameProvider.java
+++ b/src/java.base/share/classes/java/util/spi/CurrencyNameProvider.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -61,14 +61,14 @@
      *     consists of three upper-case letters between 'A' (U+0041) and
      *     'Z' (U+005A)
      * @param locale the desired locale
      * @return the symbol of the given currency code for the specified locale, or null if
      *     the symbol is not available for the locale
-     * @exception NullPointerException if <code>currencyCode</code> or
-     *     <code>locale</code> is null
-     * @exception IllegalArgumentException if <code>currencyCode</code> is not in
-     *     the form of three upper-case letters, or <code>locale</code> isn't
+     * @throws    NullPointerException if {@code currencyCode} or
+     *     {@code locale} is null
+     * @throws    IllegalArgumentException if {@code currencyCode} is not in
+     *     the form of three upper-case letters, or {@code locale} isn't
      *     one of the locales returned from
      *     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales()
      *     getAvailableLocales()}.
      * @see java.util.Currency#getSymbol(java.util.Locale)
      */
@@ -82,17 +82,17 @@
      *     consists of three upper-case letters between 'A' (U+0041) and
      *     'Z' (U+005A)
      * @param locale the desired locale
      * @return the name for the currency that is appropriate for display to the
      *     user, or null if the name is not available for the locale
-     * @exception IllegalArgumentException if <code>currencyCode</code> is not in
-     *     the form of three upper-case letters, or <code>locale</code> isn't
+     * @throws    IllegalArgumentException if {@code currencyCode} is not in
+     *     the form of three upper-case letters, or {@code locale} isn't
      *     one of the locales returned from
      *     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales()
      *     getAvailableLocales()}.
-     * @exception NullPointerException if <code>currencyCode</code> or
-     *     <code>locale</code> is <code>null</code>
+     * @throws    NullPointerException if {@code currencyCode} or
+     *     {@code locale} is {@code null}
      * @since 1.7
      */
     public String getDisplayName(String currencyCode, Locale locale) {
         if (currencyCode == null || locale == null) {
             throw new NullPointerException();
