diff a/src/java.base/share/classes/java/security/cert/CertificateFactory.java b/src/java.base/share/classes/java/security/cert/CertificateFactory.java
--- a/src/java.base/share/classes/java/security/cert/CertificateFactory.java
+++ b/src/java.base/share/classes/java/security/cert/CertificateFactory.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -345,11 +345,11 @@
      * @param inStream an input stream with the certificate data.
      *
      * @return a certificate object initialized with the data
      * from the input stream.
      *
-     * @exception CertificateException on parsing errors.
+     * @throws    CertificateException on parsing errors.
      */
     public final Certificate generateCertificate(InputStream inStream)
         throws CertificateException
     {
         return certFacSpi.engineGenerateCertificate(inStream);
@@ -383,11 +383,11 @@
      * the {@link #getCertPathEncodings getCertPathEncodings} method.
      *
      * @param inStream an {@code InputStream} containing the data
      * @return a {@code CertPath} initialized with the data from the
      *   {@code InputStream}
-     * @exception CertificateException if an exception occurs while decoding
+     * @throws    CertificateException if an exception occurs while decoding
      * @since 1.4
      */
     public final CertPath generateCertPath(InputStream inStream)
         throws CertificateException
     {
@@ -405,11 +405,11 @@
      *
      * @param inStream an {@code InputStream} containing the data
      * @param encoding the encoding used for the data
      * @return a {@code CertPath} initialized with the data from the
      *   {@code InputStream}
-     * @exception CertificateException if an exception occurs while decoding or
+     * @throws    CertificateException if an exception occurs while decoding or
      *   the encoding requested is not supported
      * @since 1.4
      */
     public final CertPath generateCertPath(InputStream inStream,
         String encoding) throws CertificateException
@@ -426,11 +426,11 @@
      * {@code List} object.
      *
      * @param certificates a {@code List} of {@code Certificate}s
      * @return a {@code CertPath} initialized with the supplied list of
      *   certificates
-     * @exception CertificateException if an exception occurs
+     * @throws    CertificateException if an exception occurs
      * @since 1.4
      */
     public final CertPath
         generateCertPath(List<? extends Certificate> certificates)
         throws CertificateException
@@ -469,11 +469,11 @@
      *
      * @return a (possibly empty) collection view of
      * java.security.cert.Certificate objects
      * initialized with the data from the input stream.
      *
-     * @exception CertificateException on parsing errors.
+     * @throws    CertificateException on parsing errors.
      */
     public final Collection<? extends Certificate> generateCertificates
             (InputStream inStream) throws CertificateException {
         return certFacSpi.engineGenerateCertificates(inStream);
     }
@@ -503,11 +503,11 @@
      * @param inStream an input stream with the CRL data.
      *
      * @return a CRL object initialized with the data
      * from the input stream.
      *
-     * @exception CRLException on parsing errors.
+     * @throws    CRLException on parsing errors.
      */
     public final CRL generateCRL(InputStream inStream)
         throws CRLException
     {
         return certFacSpi.engineGenerateCRL(inStream);
@@ -542,11 +542,11 @@
      *
      * @return a (possibly empty) collection view of
      * java.security.cert.CRL objects initialized with the data from the input
      * stream.
      *
-     * @exception CRLException on parsing errors.
+     * @throws    CRLException on parsing errors.
      */
     public final Collection<? extends CRL> generateCRLs(InputStream inStream)
             throws CRLException {
         return certFacSpi.engineGenerateCRLs(inStream);
     }
