diff a/src/java.base/share/classes/java/io/StringBufferInputStream.java b/src/java.base/share/classes/java/io/StringBufferInputStream.java
--- a/src/java.base/share/classes/java/io/StringBufferInputStream.java
+++ b/src/java.base/share/classes/java/io/StringBufferInputStream.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1995, 2004, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1995, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -27,26 +27,25 @@
 
 /**
  * This class allows an application to create an input stream in
  * which the bytes read are supplied by the contents of a string.
  * Applications can also read bytes from a byte array by using a
- * <code>ByteArrayInputStream</code>.
+ * {@code ByteArrayInputStream}.
  * <p>
  * Only the low eight bits of each character in the string are used by
  * this class.
  *
  * @author     Arthur van Hoff
  * @see        java.io.ByteArrayInputStream
  * @see        java.io.StringReader
  * @since      1.0
  * @deprecated This class does not properly convert characters into bytes.  As
  *             of JDK&nbsp;1.1, the preferred way to create a stream from a
- *             string is via the <code>StringReader</code> class.
+ *             string is via the {@code StringReader} class.
  */
 @Deprecated
-public
-class StringBufferInputStream extends InputStream {
+public class StringBufferInputStream extends InputStream {
     /**
      * The string from which bytes are read.
      */
     protected String buffer;
 
@@ -74,40 +73,40 @@
         count = s.length();
     }
 
     /**
      * Reads the next byte of data from this input stream. The value
-     * byte is returned as an <code>int</code> in the range
-     * <code>0</code> to <code>255</code>. If no byte is available
+     * byte is returned as an {@code int} in the range
+     * {@code 0} to {@code 255}. If no byte is available
      * because the end of the stream has been reached, the value
-     * <code>-1</code> is returned.
+     * {@code -1} is returned.
      * <p>
-     * The <code>read</code> method of
-     * <code>StringBufferInputStream</code> cannot block. It returns the
+     * The {@code read} method of
+     * {@code StringBufferInputStream} cannot block. It returns the
      * low eight bits of the next character in this input stream's buffer.
      *
-     * @return     the next byte of data, or <code>-1</code> if the end of the
+     * @return     the next byte of data, or {@code -1} if the end of the
      *             stream is reached.
      */
     public synchronized int read() {
         return (pos < count) ? (buffer.charAt(pos++) & 0xFF) : -1;
     }
 
     /**
-     * Reads up to <code>len</code> bytes of data from this input stream
+     * Reads up to {@code len} bytes of data from this input stream
      * into an array of bytes.
      * <p>
-     * The <code>read</code> method of
-     * <code>StringBufferInputStream</code> cannot block. It copies the
+     * The {@code read} method of
+     * {@code StringBufferInputStream} cannot block. It copies the
      * low eight bits from the characters in this input stream's buffer into
      * the byte array argument.
      *
      * @param      b     the buffer into which the data is read.
      * @param      off   the start offset of the data.
      * @param      len   the maximum number of bytes read.
      * @return     the total number of bytes read into the buffer, or
-     *             <code>-1</code> if there is no more data because the end of
+     *             {@code -1} if there is no more data because the end of
      *             the stream has been reached.
      */
     @SuppressWarnings("deprecation")
     public synchronized int read(byte b[], int off, int len) {
         if (b == null) {
@@ -131,11 +130,11 @@
         pos += len;
         return len;
     }
 
     /**
-     * Skips <code>n</code> bytes of input from this input stream. Fewer
+     * Skips {@code n} bytes of input from this input stream. Fewer
      * bytes might be skipped if the end of the input stream is reached.
      *
      * @param      n   the number of bytes to be skipped.
      * @return     the actual number of bytes skipped.
      */
