diff a/src/java.base/share/classes/java/util/Currency.java b/src/java.base/share/classes/java/util/Currency.java
--- a/src/java.base/share/classes/java/util/Currency.java
+++ b/src/java.base/share/classes/java/util/Currency.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -53,13 +53,13 @@
  * Represents a currency. Currencies are identified by their ISO 4217 currency
  * codes. Visit the <a href="http://www.iso.org/iso/home/standards/currency_codes.htm">
  * ISO web site</a> for more information.
  * <p>
  * The class is designed so that there's never more than one
- * <code>Currency</code> instance for any given currency. Therefore, there's
- * no public constructor. You obtain a <code>Currency</code> instance using
- * the <code>getInstance</code> methods.
+ * {@code Currency} instance for any given currency. Therefore, there's
+ * no public constructor. You obtain a {@code Currency} instance using
+ * the {@code getInstance} methods.
  * <p>
  * Users can supersede the Java runtime currency data by means of the system
  * property {@systemProperty java.util.currency.data}. If this system property is
  * defined then its value is the location of a properties file, the contents of
  * which are key/value pairs of the ISO 3166 country codes and the ISO 4217
@@ -111,10 +111,11 @@
  * @see java.math.BigDecimal
  * @since 1.4
  */
 public final class Currency implements Serializable {
 
+    @java.io.Serial
     private static final long serialVersionUID = -158308464356906721L;
 
     /**
      * ISO 4217 currency code for this currency.
      *
@@ -271,27 +272,27 @@
     private static final int SYMBOL = 0;
     private static final int DISPLAYNAME = 1;
 
 
     /**
-     * Constructs a <code>Currency</code> instance. The constructor is private
+     * Constructs a {@code Currency} instance. The constructor is private
      * so that we can insure that there's never more than one instance for a
      * given currency.
      */
     private Currency(String currencyCode, int defaultFractionDigits, int numericCode) {
         this.currencyCode = currencyCode;
         this.defaultFractionDigits = defaultFractionDigits;
         this.numericCode = numericCode;
     }
 
     /**
-     * Returns the <code>Currency</code> instance for the given currency code.
+     * Returns the {@code Currency} instance for the given currency code.
      *
      * @param currencyCode the ISO 4217 code of the currency
-     * @return the <code>Currency</code> instance for the given currency code
-     * @exception NullPointerException if <code>currencyCode</code> is null
-     * @exception IllegalArgumentException if <code>currencyCode</code> is not
+     * @return the {@code Currency} instance for the given currency code
+     * @throws    NullPointerException if {@code currencyCode} is null
+     * @throws    IllegalArgumentException if {@code currencyCode} is not
      * a supported ISO 4217 code.
      */
     public static Currency getInstance(String currencyCode) {
         return getInstance(currencyCode, Integer.MIN_VALUE, 0);
     }
@@ -347,11 +348,11 @@
         instance = instances.putIfAbsent(currencyCode, currencyVal);
         return (instance != null ? instance : currencyVal);
     }
 
     /**
-     * Returns the <code>Currency</code> instance for the country of the
+     * Returns the {@code Currency} instance for the country of the
      * given locale. The language and variant components of the locale
      * are ignored. The result may vary over time, as countries change their
      * currencies. For example, for the original member countries of the
      * European Monetary Union, the method returns the old national currencies
      * until December 31, 2001, and the Euro from January 1, 2002, local time
@@ -362,20 +363,20 @@
      * the instance returned from this method reflects
      * the values specified with those extensions. If both "cu" and "rg" are
      * specified, the currency from the "cu" extension supersedes the implicit one
      * from the "rg" extension.
      * <p>
-     * The method returns <code>null</code> for territories that don't
+     * The method returns {@code null} for territories that don't
      * have a currency, such as Antarctica.
      *
-     * @param locale the locale for whose country a <code>Currency</code>
+     * @param locale the locale for whose country a {@code Currency}
      * instance is needed
-     * @return the <code>Currency</code> instance for the country of the given
+     * @return the {@code Currency} instance for the country of the given
      * locale, or {@code null}
-     * @exception NullPointerException if <code>locale</code>
+     * @throws    NullPointerException if {@code locale}
      * is {@code null}
-     * @exception IllegalArgumentException if the country of the given {@code locale}
+     * @throws    IllegalArgumentException if the country of the given {@code locale}
      * is not a supported ISO 3166 country code.
      */
     public static Currency getInstance(Locale locale) {
         // check for locale overrides
         String override = locale.getUnicodeLocaleType("cu");
@@ -534,11 +535,11 @@
      * the value specified with that extension.
      *
      * @param locale the locale for which a display name for this currency is
      * needed
      * @return the symbol of this currency for the specified locale
-     * @exception NullPointerException if <code>locale</code> is null
+     * @throws    NullPointerException if {@code locale} is null
      */
     public String getSymbol(Locale locale) {
         LocaleServiceProviderPool pool =
             LocaleServiceProviderPool.getPool(CurrencyNameProvider.class);
         locale = CalendarDataUtility.findRegionOverride(locale);
@@ -629,11 +630,11 @@
      * for the specified locale, the ISO 4217 currency code is returned.
      *
      * @param locale the locale for which a display name for this currency is
      * needed
      * @return the display name of this currency for the specified locale
-     * @exception NullPointerException if <code>locale</code> is null
+     * @throws    NullPointerException if {@code locale} is null
      * @since 1.7
      */
     public String getDisplayName(Locale locale) {
         LocaleServiceProviderPool pool =
             LocaleServiceProviderPool.getPool(CurrencyNameProvider.class);
@@ -659,10 +660,11 @@
     }
 
     /**
      * Resolves instances being deserialized to a single instance per currency.
      */
+    @java.io.Serial
     private Object readResolve() {
         return getInstance(currencyCode);
     }
 
     /**
@@ -1193,7 +1195,5 @@
         }
 
     }
 
 }
-
-
