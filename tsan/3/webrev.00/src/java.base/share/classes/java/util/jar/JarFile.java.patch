diff a/src/java.base/share/classes/java/util/jar/JarFile.java b/src/java.base/share/classes/java/util/jar/JarFile.java
--- a/src/java.base/share/classes/java/util/jar/JarFile.java
+++ b/src/java.base/share/classes/java/util/jar/JarFile.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -143,24 +143,25 @@
  * @see     Manifest
  * @see     java.util.zip.ZipFile
  * @see     java.util.jar.JarEntry
  * @since   1.2
  */
-public
-class JarFile extends ZipFile {
-    private final static Runtime.Version BASE_VERSION;
-    private final static int BASE_VERSION_FEATURE;
-    private final static Runtime.Version RUNTIME_VERSION;
-    private final static boolean MULTI_RELEASE_ENABLED;
-    private final static boolean MULTI_RELEASE_FORCED;
+public class JarFile extends ZipFile {
+    private static final Runtime.Version BASE_VERSION;
+    private static final int BASE_VERSION_FEATURE;
+    private static final Runtime.Version RUNTIME_VERSION;
+    private static final boolean MULTI_RELEASE_ENABLED;
+    private static final boolean MULTI_RELEASE_FORCED;
+    private static final ThreadLocal<Boolean> isInitializing = new ThreadLocal<>();
+
     private SoftReference<Manifest> manRef;
     private JarEntry manEntry;
     private JarVerifier jv;
     private boolean jvInitialized;
     private boolean verify;
     private final Runtime.Version version;  // current version
-    private final int versionFeature;         // version.feature()
+    private final int versionFeature;       // version.feature()
     private boolean isMultiRelease;         // is jar multi-release?
 
     // indicates if Class-Path attribute present
     private boolean hasClassPathAttribute;
     // true if manifest checked for special attributes
@@ -1030,15 +1031,25 @@
             maybeInstantiateVerifier();
         } catch (IOException e) {
             throw new RuntimeException(e);
         }
         if (jv != null && !jvInitialized) {
-            initializeVerifier();
-            jvInitialized = true;
+            isInitializing.set(Boolean.TRUE);
+            try {
+                initializeVerifier();
+                jvInitialized = true;
+            } finally {
+                isInitializing.set(Boolean.FALSE);
+            }
         }
     }
 
+    static boolean isInitializing() {
+        Boolean value = isInitializing.get();
+        return (value == null) ? false : value;
+    }
+
     /*
      * Returns a versioned {@code JarFileEntry} for the given entry,
      * if there is one. Otherwise returns the original entry. This
      * is invoked by the {@code entries2} for verifier.
      */
