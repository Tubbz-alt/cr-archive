diff a/src/java.base/share/classes/java/lang/invoke/GenerateJLIClassesHelper.java b/src/java.base/share/classes/java/lang/invoke/GenerateJLIClassesHelper.java
--- a/src/java.base/share/classes/java/lang/invoke/GenerateJLIClassesHelper.java
+++ b/src/java.base/share/classes/java/lang/invoke/GenerateJLIClassesHelper.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -29,13 +29,15 @@
 import jdk.internal.org.objectweb.asm.Opcodes;
 import sun.invoke.util.Wrapper;
 
 import java.util.ArrayList;
 import java.util.HashSet;
-import java.util.List;
 import java.util.Map;
 
+import static java.lang.invoke.MethodTypeForm.LF_INVINTERFACE;
+import static java.lang.invoke.MethodTypeForm.LF_INVVIRTUAL;
+
 /**
  * Helper class to assist the GenerateJLIClassesPlugin to get access to
  * generate classes ahead of time.
  */
 class GenerateJLIClassesHelper {
@@ -69,12 +71,23 @@
     static byte[] generateDirectMethodHandleHolderClassBytes(String className,
             MethodType[] methodTypes, int[] types) {
         ArrayList<LambdaForm> forms = new ArrayList<>();
         ArrayList<String> names = new ArrayList<>();
         for (int i = 0; i < methodTypes.length; i++) {
-            LambdaForm form = DirectMethodHandle
-                    .makePreparedLambdaForm(methodTypes[i], types[i]);
+            // invokeVirtual and invokeInterface must have a leading Object
+            // parameter, i.e., the receiver
+            if (types[i] == LF_INVVIRTUAL || types[i] == LF_INVINTERFACE) {
+                if (methodTypes[i].parameterCount() < 1 ||
+                        methodTypes[i].parameterType(0) != Object.class) {
+                    throw new InternalError("Invalid method type for " +
+                            (types[i] == LF_INVVIRTUAL ? "invokeVirtual" : "invokeInterface") +
+                            " DMH, needs at least two leading reference arguments: " +
+                            methodTypes[i]);
+                }
+            }
+
+            LambdaForm form = DirectMethodHandle.makePreparedLambdaForm(methodTypes[i], types[i]);
             forms.add(form);
             names.add(form.kind.defaultLambdaName);
         }
         for (Wrapper wrapper : Wrapper.values()) {
             if (wrapper == Wrapper.VOID) {
