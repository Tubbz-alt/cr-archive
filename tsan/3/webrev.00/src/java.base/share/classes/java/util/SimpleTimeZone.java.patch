diff a/src/java.base/share/classes/java/util/SimpleTimeZone.java b/src/java.base/share/classes/java/util/SimpleTimeZone.java
--- a/src/java.base/share/classes/java/util/SimpleTimeZone.java
+++ b/src/java.base/share/classes/java/util/SimpleTimeZone.java
@@ -46,20 +46,20 @@
 import sun.util.calendar.CalendarUtils;
 import sun.util.calendar.BaseCalendar;
 import sun.util.calendar.Gregorian;
 
 /**
- * <code>SimpleTimeZone</code> is a concrete subclass of <code>TimeZone</code>
+ * {@code SimpleTimeZone} is a concrete subclass of {@code TimeZone}
  * that represents a time zone for use with a Gregorian calendar.
  * The class holds an offset from GMT, called <em>raw offset</em>, and start
  * and end rules for a daylight saving time schedule.  Since it only holds
  * single values for each, it cannot handle historical changes in the offset
  * from GMT and the daylight saving schedule, except that the {@link
  * #setStartYear setStartYear} method can specify the year when the daylight
  * saving time schedule starts in effect.
  * <p>
- * To construct a <code>SimpleTimeZone</code> with a daylight saving time
+ * To construct a {@code SimpleTimeZone} with a daylight saving time
  * schedule, the schedule can be described with a set of rules,
  * <em>start-rule</em> and <em>end-rule</em>. A day when daylight saving time
  * starts or ends is specified by a combination of <em>month</em>,
  * <em>day-of-month</em>, and <em>day-of-week</em> values. The <em>month</em>
  * value is represented by a Calendar {@link Calendar#MONTH MONTH} field
@@ -79,19 +79,19 @@
  * To specify a day of week on or after an exact day of month, set the
  * <em>month</em> to an exact month value, <em>day-of-month</em> to the day on
  * or after which the rule is applied, and <em>day-of-week</em> to a negative {@link
  * Calendar#DAY_OF_WEEK DAY_OF_WEEK} field value. For example, to specify the
  * second Sunday of April, set <em>month</em> to {@link Calendar#APRIL APRIL},
- * <em>day-of-month</em> to 8, and <em>day-of-week</em> to <code>-</code>{@link
+ * <em>day-of-month</em> to 8, and <em>day-of-week</em> to {@code -}{@link
  * Calendar#SUNDAY SUNDAY}.</li>
  *
  * <li><b>Day of week on or before day of month</b><br>
  * To specify a day of the week on or before an exact day of the month, set
  * <em>day-of-month</em> and <em>day-of-week</em> to a negative value. For
  * example, to specify the last Wednesday on or before the 21st of March, set
  * <em>month</em> to {@link Calendar#MARCH MARCH}, <em>day-of-month</em> is -21
- * and <em>day-of-week</em> is <code>-</code>{@link Calendar#WEDNESDAY WEDNESDAY}. </li>
+ * and <em>day-of-week</em> is {@code -}{@link Calendar#WEDNESDAY WEDNESDAY}. </li>
  *
  * <li><b>Last day-of-week of month</b><br>
  * To specify, the last day-of-week of the month, set <em>day-of-week</em> to a
  * {@link Calendar#DAY_OF_WEEK DAY_OF_WEEK} value and <em>day-of-month</em> to
  * -1. For example, to specify the last Sunday of October, set <em>month</em>
@@ -137,11 +137,11 @@
  *                     Calendar.OCTOBER, -1, Calendar.SUNDAY,
  *                     3600000, SimpleTimeZone.UTC_TIME,
  *                     3600000)
  * </code></pre>
  * These parameter rules are also applicable to the set rule methods, such as
- * <code>setStartRule</code>.
+ * {@code setStartRule}.
  *
  * @since 1.1
  * @see      Calendar
  * @see      GregorianCalendar
  * @see      TimeZone
@@ -165,11 +165,11 @@
 
     /**
      * Constructs a SimpleTimeZone with the given base time zone offset from
      * GMT, time zone ID, and rules for starting and ending the daylight
      * time.
-     * Both <code>startTime</code> and <code>endTime</code> are specified to be
+     * Both {@code startTime} and {@code endTime} are specified to be
      * represented in the wall clock time. The amount of daylight saving is
      * assumed to be 3600000 milliseconds (i.e., one hour). This constructor is
      * equivalent to:
      * <pre><code>
      *     SimpleTimeZone(rawOffset,
@@ -207,11 +207,11 @@
      * @param endDayOfWeek    The daylight saving time ending day-of-week.
      *                        See the class description for the special cases of this parameter.
      * @param endTime         The daylight saving ending time in local wall clock time,
      *                        (in milliseconds within the day) which is local daylight
      *                        time in this case.
-     * @exception IllegalArgumentException if the month, day, dayOfWeek, or time
+     * @throws    IllegalArgumentException if the month, day, dayOfWeek, or time
      * parameters are out of range for the start or end rule
      */
     public SimpleTimeZone(int rawOffset, String ID,
                           int startMonth, int startDay, int startDayOfWeek, int startTime,
                           int endMonth, int endDay, int endDayOfWeek, int endTime)
@@ -224,11 +224,11 @@
 
     /**
      * Constructs a SimpleTimeZone with the given base time zone offset from
      * GMT, time zone ID, and rules for starting and ending the daylight
      * time.
-     * Both <code>startTime</code> and <code>endTime</code> are assumed to be
+     * Both {@code startTime} and {@code endTime} are assumed to be
      * represented in the wall clock time. This constructor is equivalent to:
      * <pre><code>
      *     SimpleTimeZone(rawOffset,
      *                    ID,
      *                    startMonth,
@@ -264,11 +264,11 @@
      *                        See the class description for the special cases of this parameter.
      * @param endTime         The daylight saving ending time in local wall clock time,
      *                        which is local daylight time in this case.
      * @param dstSavings      The amount of time in milliseconds saved during
      *                        daylight saving time.
-     * @exception IllegalArgumentException if the month, day, dayOfWeek, or time
+     * @throws    IllegalArgumentException if the month, day, dayOfWeek, or time
      * parameters are out of range for the start or end rule
      * @since 1.2
      */
     public SimpleTimeZone(int rawOffset, String ID,
                           int startMonth, int startDay, int startDayOfWeek, int startTime,
@@ -284,12 +284,12 @@
     /**
      * Constructs a SimpleTimeZone with the given base time zone offset from
      * GMT, time zone ID, and rules for starting and ending the daylight
      * time.
      * This constructor takes the full set of the start and end rules
-     * parameters, including modes of <code>startTime</code> and
-     * <code>endTime</code>. The mode specifies either {@link #WALL_TIME wall
+     * parameters, including modes of {@code startTime} and
+     * {@code endTime}. The mode specifies either {@link #WALL_TIME wall
      * time} or {@link #STANDARD_TIME standard time} or {@link #UTC_TIME UTC
      * time}.
      *
      * @param rawOffset       The given base time zone offset from GMT.
      * @param ID              The time zone ID which is given to this object.
@@ -299,26 +299,26 @@
      * @param startDay        The day of the month on which the daylight saving time starts.
      *                        See the class description for the special cases of this parameter.
      * @param startDayOfWeek  The daylight saving time starting day-of-week.
      *                        See the class description for the special cases of this parameter.
      * @param startTime       The daylight saving time starting time in the time mode
-     *                        specified by <code>startTimeMode</code>.
+     *                        specified by {@code startTimeMode}.
      * @param startTimeMode   The mode of the start time specified by startTime.
      * @param endMonth        The daylight saving time ending month. Month is
      *                        a {@link Calendar#MONTH MONTH} field
      *                        value (0-based. e.g., 9 for October).
      * @param endDay          The day of the month on which the daylight saving time ends.
      *                        See the class description for the special cases of this parameter.
      * @param endDayOfWeek    The daylight saving time ending day-of-week.
      *                        See the class description for the special cases of this parameter.
      * @param endTime         The daylight saving ending time in time mode
-     *                        specified by <code>endTimeMode</code>.
+     *                        specified by {@code endTimeMode}.
      * @param endTimeMode     The mode of the end time specified by endTime
      * @param dstSavings      The amount of time in milliseconds saved during
      *                        daylight saving time.
      *
-     * @exception IllegalArgumentException if the month, day, dayOfWeek, time more, or
+     * @throws    IllegalArgumentException if the month, day, dayOfWeek, time more, or
      * time parameters are out of range for the start or end rule, or if a time mode
      * value is invalid.
      *
      * @see #WALL_TIME
      * @see #STANDARD_TIME
@@ -367,23 +367,23 @@
 
     /**
      * Sets the daylight saving time start rule. For example, if daylight saving
      * time starts on the first Sunday in April at 2 am in local wall clock
      * time, you can set the start rule by calling:
-     * <pre><code>setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2*60*60*1000);</code></pre>
+     * <pre>{@code setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2*60*60*1000);}</pre>
      *
      * @param startMonth      The daylight saving time starting month. Month is
      *                        a {@link Calendar#MONTH MONTH} field
      *                        value (0-based. e.g., 0 for January).
      * @param startDay        The day of the month on which the daylight saving time starts.
      *                        See the class description for the special cases of this parameter.
      * @param startDayOfWeek  The daylight saving time starting day-of-week.
      *                        See the class description for the special cases of this parameter.
      * @param startTime       The daylight saving time starting time in local wall clock
      *                        time, which is local standard time in this case.
-     * @exception IllegalArgumentException if the <code>startMonth</code>, <code>startDay</code>,
-     * <code>startDayOfWeek</code>, or <code>startTime</code> parameters are out of range
+     * @throws    IllegalArgumentException if the {@code startMonth}, {@code startDay},
+     * {@code startDayOfWeek}, or {@code startTime} parameters are out of range
      */
     public void setStartRule(int startMonth, int startDay, int startDayOfWeek, int startTime)
     {
         this.startMonth = startMonth;
         this.startDay = startDay;
@@ -395,21 +395,21 @@
     }
 
     /**
      * Sets the daylight saving time start rule to a fixed date within a month.
      * This method is equivalent to:
-     * <pre><code>setStartRule(startMonth, startDay, 0, startTime)</code></pre>
+     * <pre>{@code setStartRule(startMonth, startDay, 0, startTime)}</pre>
      *
      * @param startMonth      The daylight saving time starting month. Month is
      *                        a {@link Calendar#MONTH MONTH} field
      *                        value (0-based. e.g., 0 for January).
      * @param startDay        The day of the month on which the daylight saving time starts.
      * @param startTime       The daylight saving time starting time in local wall clock
      *                        time, which is local standard time in this case.
      *                        See the class description for the special cases of this parameter.
-     * @exception IllegalArgumentException if the <code>startMonth</code>,
-     * <code>startDayOfMonth</code>, or <code>startTime</code> parameters are out of range
+     * @throws    IllegalArgumentException if the {@code startMonth},
+     * {@code startDayOfMonth}, or {@code startTime} parameters are out of range
      * @since 1.2
      */
     public void setStartRule(int startMonth, int startDay, int startTime) {
         setStartRule(startMonth, startDay, 0, startTime);
     }
@@ -423,16 +423,16 @@
      *                        value (0-based. e.g., 0 for January).
      * @param startDay        The day of the month on which the daylight saving time starts.
      * @param startDayOfWeek  The daylight saving time starting day-of-week.
      * @param startTime       The daylight saving time starting time in local wall clock
      *                        time, which is local standard time in this case.
-     * @param after           If true, this rule selects the first <code>dayOfWeek</code> on or
-     *                        <em>after</em> <code>dayOfMonth</code>.  If false, this rule
-     *                        selects the last <code>dayOfWeek</code> on or <em>before</em>
-     *                        <code>dayOfMonth</code>.
-     * @exception IllegalArgumentException if the <code>startMonth</code>, <code>startDay</code>,
-     * <code>startDayOfWeek</code>, or <code>startTime</code> parameters are out of range
+     * @param after           If true, this rule selects the first {@code dayOfWeek} on or
+     *                        <em>after</em> {@code dayOfMonth}.  If false, this rule
+     *                        selects the last {@code dayOfWeek} on or <em>before</em>
+     *                        {@code dayOfMonth}.
+     * @throws    IllegalArgumentException if the {@code startMonth}, {@code startDay},
+     * {@code startDayOfWeek}, or {@code startTime} parameters are out of range
      * @since 1.2
      */
     public void setStartRule(int startMonth, int startDay, int startDayOfWeek,
                              int startTime, boolean after)
     {
@@ -446,11 +446,11 @@
 
     /**
      * Sets the daylight saving time end rule. For example, if daylight saving time
      * ends on the last Sunday in October at 2 am in wall clock time,
      * you can set the end rule by calling:
-     * <code>setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2*60*60*1000);</code>
+     * {@code setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2*60*60*1000);}
      *
      * @param endMonth        The daylight saving time ending month. Month is
      *                        a {@link Calendar#MONTH MONTH} field
      *                        value (0-based. e.g., 9 for October).
      * @param endDay          The day of the month on which the daylight saving time ends.
@@ -458,12 +458,12 @@
      * @param endDayOfWeek    The daylight saving time ending day-of-week.
      *                        See the class description for the special cases of this parameter.
      * @param endTime         The daylight saving ending time in local wall clock time,
      *                        (in milliseconds within the day) which is local daylight
      *                        time in this case.
-     * @exception IllegalArgumentException if the <code>endMonth</code>, <code>endDay</code>,
-     * <code>endDayOfWeek</code>, or <code>endTime</code> parameters are out of range
+     * @throws    IllegalArgumentException if the {@code endMonth}, {@code endDay},
+     * {@code endDayOfWeek}, or {@code endTime} parameters are out of range
      */
     public void setEndRule(int endMonth, int endDay, int endDayOfWeek,
                            int endTime)
     {
         this.endMonth = endMonth;
@@ -476,21 +476,21 @@
     }
 
     /**
      * Sets the daylight saving time end rule to a fixed date within a month.
      * This method is equivalent to:
-     * <pre><code>setEndRule(endMonth, endDay, 0, endTime)</code></pre>
+     * <pre>{@code setEndRule(endMonth, endDay, 0, endTime)}</pre>
      *
      * @param endMonth        The daylight saving time ending month. Month is
      *                        a {@link Calendar#MONTH MONTH} field
      *                        value (0-based. e.g., 9 for October).
      * @param endDay          The day of the month on which the daylight saving time ends.
      * @param endTime         The daylight saving ending time in local wall clock time,
      *                        (in milliseconds within the day) which is local daylight
      *                        time in this case.
-     * @exception IllegalArgumentException the <code>endMonth</code>, <code>endDay</code>,
-     * or <code>endTime</code> parameters are out of range
+     * @throws    IllegalArgumentException the {@code endMonth}, {@code endDay},
+     * or {@code endTime} parameters are out of range
      * @since 1.2
      */
     public void setEndRule(int endMonth, int endDay, int endTime)
     {
         setEndRule(endMonth, endDay, 0, endTime);
@@ -506,16 +506,16 @@
      * @param endDay          The day of the month on which the daylight saving time ends.
      * @param endDayOfWeek    The daylight saving time ending day-of-week.
      * @param endTime         The daylight saving ending time in local wall clock time,
      *                        (in milliseconds within the day) which is local daylight
      *                        time in this case.
-     * @param after           If true, this rule selects the first <code>endDayOfWeek</code> on
-     *                        or <em>after</em> <code>endDay</code>.  If false, this rule
-     *                        selects the last <code>endDayOfWeek</code> on or before
-     *                        <code>endDay</code> of the month.
-     * @exception IllegalArgumentException the <code>endMonth</code>, <code>endDay</code>,
-     * <code>endDayOfWeek</code>, or <code>endTime</code> parameters are out of range
+     * @param after           If true, this rule selects the first {@code endDayOfWeek} on
+     *                        or <em>after</em> {@code endDay}.  If false, this rule
+     *                        selects the last {@code endDayOfWeek} on or before
+     *                        {@code endDay} of the month.
+     * @throws    IllegalArgumentException the {@code endMonth}, {@code endDay},
+     * {@code endDayOfWeek}, or {@code endTime} parameters are out of range
      * @since 1.2
      */
     public void setEndRule(int endMonth, int endDay, int endDayOfWeek, int endTime, boolean after)
     {
         if (after) {
@@ -581,27 +581,27 @@
      * daylight saving, for the specified date and time.  This method
      * assumes that the start and end month are distinct.  It also
      * uses a default {@link GregorianCalendar} object as its
      * underlying calendar, such as for determining leap years.  Do
      * not use the result of this method with a calendar other than a
-     * default <code>GregorianCalendar</code>.
+     * default {@code GregorianCalendar}.
      *
      * <p><em>Note:  In general, clients should use
-     * <code>Calendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET)</code>
+     * {@code Calendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET)}
      * instead of calling this method.</em>
      *
      * @param era       The era of the given date.
      * @param year      The year in the given date.
      * @param month     The month in the given date. Month is 0-based. e.g.,
      *                  0 for January.
      * @param day       The day-in-month of the given date.
      * @param dayOfWeek The day-of-week of the given date.
      * @param millis    The milliseconds in day in <em>standard</em> local time.
      * @return          The milliseconds to add to UTC to get local time.
-     * @exception       IllegalArgumentException the <code>era</code>,
-     *                  <code>month</code>, <code>day</code>, <code>dayOfWeek</code>,
-     *                  or <code>millis</code> parameters are out of range
+     * @throws          IllegalArgumentException the {@code era},
+     *                  {@code month}, {@code day}, {@code dayOfWeek},
+     *                  or {@code millis} parameters are out of range
      */
     public int getOffset(int era, int year, int month, int day, int dayOfWeek,
                          int millis)
     {
         if (era != GregorianCalendar.AD && era != GregorianCalendar.BC) {
@@ -851,11 +851,11 @@
     {
         return (getOffset(date.getTime()) != rawOffset);
     }
 
     /**
-     * Returns a clone of this <code>SimpleTimeZone</code> instance.
+     * Returns a clone of this {@code SimpleTimeZone} instance.
      * @return a clone of this instance.
      */
     public Object clone()
     {
         return super.clone();
@@ -870,15 +870,15 @@
         return startMonth ^ startDay ^ startDayOfWeek ^ startTime ^
             endMonth ^ endDay ^ endDayOfWeek ^ endTime ^ rawOffset;
     }
 
     /**
-     * Compares the equality of two <code>SimpleTimeZone</code> objects.
+     * Compares the equality of two {@code SimpleTimeZone} objects.
      *
-     * @param obj  The <code>SimpleTimeZone</code> object to be compared with.
-     * @return     True if the given <code>obj</code> is the same as this
-     *             <code>SimpleTimeZone</code> object; false otherwise.
+     * @param obj  The {@code SimpleTimeZone} object to be compared with.
+     * @return     True if the given {@code obj} is the same as this
+     *             {@code SimpleTimeZone} object; false otherwise.
      */
     public boolean equals(Object obj)
     {
         if (this == obj) {
             return true;
@@ -892,13 +892,13 @@
         return getID().equals(that.getID()) &&
             hasSameRules(that);
     }
 
     /**
-     * Returns <code>true</code> if this zone has the same rules and offset as another zone.
+     * Returns {@code true} if this zone has the same rules and offset as another zone.
      * @param other the TimeZone object to be compared with
-     * @return <code>true</code> if the given zone is a SimpleTimeZone and has the
+     * @return {@code true} if the given zone is a SimpleTimeZone and has the
      * same rules and offset as this one
      * @since 1.2
      */
     public boolean hasSameRules(TimeZone other) {
         if (this == other) {
@@ -955,58 +955,58 @@
 
     // =======================privates===============================
 
     /**
      * The month in which daylight saving time starts.  This value must be
-     * between <code>Calendar.JANUARY</code> and
-     * <code>Calendar.DECEMBER</code> inclusive.  This value must not equal
-     * <code>endMonth</code>.
-     * <p>If <code>useDaylight</code> is false, this value is ignored.
+     * between {@code Calendar.JANUARY} and
+     * {@code Calendar.DECEMBER} inclusive.  This value must not equal
+     * {@code endMonth}.
+     * <p>If {@code useDaylight} is false, this value is ignored.
      * @serial
      */
     private int startMonth;
 
     /**
      * This field has two possible interpretations:
      * <dl>
-     * <dt><code>startMode == DOW_IN_MONTH</code></dt>
+     * <dt>{@code startMode == DOW_IN_MONTH}</dt>
      * <dd>
-     * <code>startDay</code> indicates the day of the month of
-     * <code>startMonth</code> on which daylight
+     * {@code startDay} indicates the day of the month of
+     * {@code startMonth} on which daylight
      * saving time starts, from 1 to 28, 30, or 31, depending on the
-     * <code>startMonth</code>.
+     * {@code startMonth}.
      * </dd>
-     * <dt><code>startMode != DOW_IN_MONTH</code></dt>
+     * <dt>{@code startMode != DOW_IN_MONTH}</dt>
      * <dd>
-     * <code>startDay</code> indicates which <code>startDayOfWeek</code> in the
-     * month <code>startMonth</code> daylight
+     * {@code startDay} indicates which {@code startDayOfWeek} in the
+     * month {@code startMonth} daylight
      * saving time starts on.  For example, a value of +1 and a
-     * <code>startDayOfWeek</code> of <code>Calendar.SUNDAY</code> indicates the
-     * first Sunday of <code>startMonth</code>.  Likewise, +2 would indicate the
+     * {@code startDayOfWeek} of {@code Calendar.SUNDAY} indicates the
+     * first Sunday of {@code startMonth}.  Likewise, +2 would indicate the
      * second Sunday, and -1 the last Sunday.  A value of 0 is illegal.
      * </dd>
      * </dl>
-     * <p>If <code>useDaylight</code> is false, this value is ignored.
+     * <p>If {@code useDaylight} is false, this value is ignored.
      * @serial
      */
     private int startDay;
 
     /**
      * The day of the week on which daylight saving time starts.  This value
-     * must be between <code>Calendar.SUNDAY</code> and
-     * <code>Calendar.SATURDAY</code> inclusive.
-     * <p>If <code>useDaylight</code> is false or
-     * <code>startMode == DAY_OF_MONTH</code>, this value is ignored.
+     * must be between {@code Calendar.SUNDAY} and
+     * {@code Calendar.SATURDAY} inclusive.
+     * <p>If {@code useDaylight} is false or
+     * {@code startMode == DAY_OF_MONTH}, this value is ignored.
      * @serial
      */
     private int startDayOfWeek;
 
     /**
      * The time in milliseconds after midnight at which daylight saving
      * time starts.  This value is expressed as wall time, standard time,
-     * or UTC time, depending on the setting of <code>startTimeMode</code>.
-     * <p>If <code>useDaylight</code> is false, this value is ignored.
+     * or UTC time, depending on the setting of {@code startTimeMode}.
+     * <p>If {@code useDaylight} is false, this value is ignored.
      * @serial
      */
     private int startTime;
 
     /**
@@ -1016,84 +1016,84 @@
      */
     private int startTimeMode;
 
     /**
      * The month in which daylight saving time ends.  This value must be
-     * between <code>Calendar.JANUARY</code> and
-     * <code>Calendar.UNDECIMBER</code>.  This value must not equal
-     * <code>startMonth</code>.
-     * <p>If <code>useDaylight</code> is false, this value is ignored.
+     * between {@code Calendar.JANUARY} and
+     * {@code Calendar.UNDECIMBER}.  This value must not equal
+     * {@code startMonth}.
+     * <p>If {@code useDaylight} is false, this value is ignored.
      * @serial
      */
     private int endMonth;
 
     /**
      * This field has two possible interpretations:
      * <dl>
-     * <dt><code>endMode == DOW_IN_MONTH</code></dt>
+     * <dt>{@code endMode == DOW_IN_MONTH}</dt>
      * <dd>
-     * <code>endDay</code> indicates the day of the month of
-     * <code>endMonth</code> on which daylight
+     * {@code endDay} indicates the day of the month of
+     * {@code endMonth} on which daylight
      * saving time ends, from 1 to 28, 30, or 31, depending on the
-     * <code>endMonth</code>.
+     * {@code endMonth}.
      * </dd>
-     * <dt><code>endMode != DOW_IN_MONTH</code></dt>
+     * <dt>{@code endMode != DOW_IN_MONTH}</dt>
      * <dd>
-     * <code>endDay</code> indicates which <code>endDayOfWeek</code> in th
-     * month <code>endMonth</code> daylight
+     * {@code endDay} indicates which {@code endDayOfWeek} in th
+     * month {@code endMonth} daylight
      * saving time ends on.  For example, a value of +1 and a
-     * <code>endDayOfWeek</code> of <code>Calendar.SUNDAY</code> indicates the
-     * first Sunday of <code>endMonth</code>.  Likewise, +2 would indicate the
+     * {@code endDayOfWeek} of {@code Calendar.SUNDAY} indicates the
+     * first Sunday of {@code endMonth}.  Likewise, +2 would indicate the
      * second Sunday, and -1 the last Sunday.  A value of 0 is illegal.
      * </dd>
      * </dl>
-     * <p>If <code>useDaylight</code> is false, this value is ignored.
+     * <p>If {@code useDaylight} is false, this value is ignored.
      * @serial
      */
     private int endDay;
 
     /**
      * The day of the week on which daylight saving time ends.  This value
-     * must be between <code>Calendar.SUNDAY</code> and
-     * <code>Calendar.SATURDAY</code> inclusive.
-     * <p>If <code>useDaylight</code> is false or
-     * <code>endMode == DAY_OF_MONTH</code>, this value is ignored.
+     * must be between {@code Calendar.SUNDAY} and
+     * {@code Calendar.SATURDAY} inclusive.
+     * <p>If {@code useDaylight} is false or
+     * {@code endMode == DAY_OF_MONTH}, this value is ignored.
      * @serial
      */
     private int endDayOfWeek;
 
     /**
      * The time in milliseconds after midnight at which daylight saving
      * time ends.  This value is expressed as wall time, standard time,
-     * or UTC time, depending on the setting of <code>endTimeMode</code>.
-     * <p>If <code>useDaylight</code> is false, this value is ignored.
+     * or UTC time, depending on the setting of {@code endTimeMode}.
+     * <p>If {@code useDaylight} is false, this value is ignored.
      * @serial
      */
     private int endTime;
 
     /**
-     * The format of endTime, either <code>WALL_TIME</code>,
-     * <code>STANDARD_TIME</code>, or <code>UTC_TIME</code>.
+     * The format of endTime, either {@code WALL_TIME},
+     * {@code STANDARD_TIME}, or {@code UTC_TIME}.
      * @serial
      * @since 1.3
      */
     private int endTimeMode;
 
     /**
      * The year in which daylight saving time is first observed.  This is an {@link GregorianCalendar#AD AD}
      * value.  If this value is less than 1 then daylight saving time is observed
-     * for all <code>AD</code> years.
-     * <p>If <code>useDaylight</code> is false, this value is ignored.
+     * for all {@code AD} years.
+     * <p>If {@code useDaylight} is false, this value is ignored.
      * @serial
      */
     private int startYear;
 
     /**
      * The offset in milliseconds between this zone and GMT.  Negative offsets
      * are to the west of Greenwich.  To obtain local <em>standard</em> time,
      * add the offset to GMT time.  To obtain local wall time it may also be
-     * necessary to add <code>dstSavings</code>.
+     * necessary to add {@code dstSavings}.
      * @serial
      */
     private int rawOffset;
 
     /**
@@ -1120,69 +1120,69 @@
 
     /**
      * Variables specifying the mode of the start rule.  Takes the following
      * values:
      * <dl>
-     * <dt><code>DOM_MODE</code></dt>
+     * <dt>{@code DOM_MODE}</dt>
      * <dd>
      * Exact day of week; e.g., March 1.
      * </dd>
-     * <dt><code>DOW_IN_MONTH_MODE</code></dt>
+     * <dt>{@code DOW_IN_MONTH_MODE}</dt>
      * <dd>
      * Day of week in month; e.g., last Sunday in March.
      * </dd>
-     * <dt><code>DOW_GE_DOM_MODE</code></dt>
+     * <dt>{@code DOW_GE_DOM_MODE}</dt>
      * <dd>
      * Day of week after day of month; e.g., Sunday on or after March 15.
      * </dd>
-     * <dt><code>DOW_LE_DOM_MODE</code></dt>
+     * <dt>{@code DOW_LE_DOM_MODE}</dt>
      * <dd>
      * Day of week before day of month; e.g., Sunday on or before March 15.
      * </dd>
      * </dl>
      * The setting of this field affects the interpretation of the
-     * <code>startDay</code> field.
-     * <p>If <code>useDaylight</code> is false, this value is ignored.
+     * {@code startDay} field.
+     * <p>If {@code useDaylight} is false, this value is ignored.
      * @serial
      * @since 1.1.4
      */
     private int startMode;
 
     /**
      * Variables specifying the mode of the end rule.  Takes the following
      * values:
      * <dl>
-     * <dt><code>DOM_MODE</code></dt>
+     * <dt>{@code DOM_MODE}</dt>
      * <dd>
      * Exact day of week; e.g., March 1.
      * </dd>
-     * <dt><code>DOW_IN_MONTH_MODE</code></dt>
+     * <dt>{@code DOW_IN_MONTH_MODE}</dt>
      * <dd>
      * Day of week in month; e.g., last Sunday in March.
      * </dd>
-     * <dt><code>DOW_GE_DOM_MODE</code></dt>
+     * <dt>{@code DOW_GE_DOM_MODE}</dt>
      * <dd>
      * Day of week after day of month; e.g., Sunday on or after March 15.
      * </dd>
-     * <dt><code>DOW_LE_DOM_MODE</code></dt>
+     * <dt>{@code DOW_LE_DOM_MODE}</dt>
      * <dd>
      * Day of week before day of month; e.g., Sunday on or before March 15.
      * </dd>
      * </dl>
      * The setting of this field affects the interpretation of the
-     * <code>endDay</code> field.
-     * <p>If <code>useDaylight</code> is false, this value is ignored.
+     * {@code endDay} field.
+     * <p>If {@code useDaylight} is false, this value is ignored.
      * @serial
      * @since 1.1.4
      */
     private int endMode;
 
     /**
      * A positive value indicating the amount of time saved during DST in
      * milliseconds.
      * Typically one hour (3600000); sometimes 30 minutes (1800000).
-     * <p>If <code>useDaylight</code> is false, this value is ignored.
+     * <p>If {@code useDaylight} is false, this value is ignored.
      * @serial
      * @since 1.1.4
      */
     private int dstSavings;
 
@@ -1240,10 +1240,11 @@
      * @since 1.4
      */
     public static final int UTC_TIME = 2;
 
     // Proclaim compatibility with 1.1
+    @java.io.Serial
     static final long serialVersionUID = -403250971215465050L;
 
     // the internal serial version which says which version was written
     // - 0 (default) for version up to JDK 1.1.3
     // - 1 for version from JDK 1.1.4, which includes 3 new fields
@@ -1257,21 +1258,21 @@
      * <dd>
      * JDK 1.1.3 or earlier.
      * </dd>
      * <dt><b>1</b></dt>
      * <dd>
-     * JDK 1.1.4 or later.  Includes three new fields: <code>startMode</code>,
-     * <code>endMode</code>, and <code>dstSavings</code>.
+     * JDK 1.1.4 or later.  Includes three new fields: {@code startMode},
+     * {@code endMode}, and {@code dstSavings}.
      * </dd>
      * <dt><b>2</b></dt>
      * <dd>
-     * JDK 1.3 or later.  Includes two new fields: <code>startTimeMode</code>
-     * and <code>endTimeMode</code>.
+     * JDK 1.3 or later.  Includes two new fields: {@code startTimeMode}
+     * and {@code endTimeMode}.
      * </dd>
      * </dl>
      * When streaming out this class, the most recent format
-     * and the highest allowable <code>serialVersionOnStream</code>
+     * and the highest allowable {@code serialVersionOnStream}
      * is written.
      * @serial
      * @since 1.1.4
      */
     private int serialVersionOnStream = currentSerialVersion;
@@ -1622,22 +1623,23 @@
 
     /**
      * Save the state of this object to a stream (i.e., serialize it).
      *
      * @serialData We write out two formats, a JDK 1.1 compatible format, using
-     * <code>DOW_IN_MONTH_MODE</code> rules, in the required section, followed
+     * {@code DOW_IN_MONTH_MODE} rules, in the required section, followed
      * by the full rules, in packed format, in the optional section.  The
      * optional section will be ignored by JDK 1.1 code upon stream in.
      * <p> Contents of the optional section: The length of a byte array is
      * emitted (int); this is 4 as of this release. The byte array of the given
      * length is emitted. The contents of the byte array are the true values of
-     * the fields <code>startDay</code>, <code>startDayOfWeek</code>,
-     * <code>endDay</code>, and <code>endDayOfWeek</code>.  The values of these
+     * the fields {@code startDay}, {@code startDayOfWeek},
+     * {@code endDay}, and {@code endDayOfWeek}.  The values of these
      * fields in the required section are approximate values suited to the rule
-     * mode <code>DOW_IN_MONTH_MODE</code>, which is the only mode recognized by
+     * mode {@code DOW_IN_MONTH_MODE}, which is the only mode recognized by
      * JDK 1.1.
      */
+    @java.io.Serial
     private void writeObject(ObjectOutputStream stream)
          throws IOException
     {
         // Construct a binary rule
         byte[] rules = packRules();
@@ -1664,10 +1666,11 @@
      * Reconstitute this object from a stream (i.e., deserialize it).
      *
      * We handle both JDK 1.1
      * binary formats and full formats with a packed byte array.
      */
+    @java.io.Serial
     private void readObject(ObjectInputStream stream)
          throws IOException, ClassNotFoundException
     {
         stream.defaultReadObject();
 
