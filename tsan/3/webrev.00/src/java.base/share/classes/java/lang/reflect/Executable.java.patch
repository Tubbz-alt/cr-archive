diff a/src/java.base/share/classes/java/lang/reflect/Executable.java b/src/java.base/share/classes/java/lang/reflect/Executable.java
--- a/src/java.base/share/classes/java/lang/reflect/Executable.java
+++ b/src/java.base/share/classes/java/lang/reflect/Executable.java
@@ -232,10 +232,13 @@
     /**
      * Returns an array of {@code Class} objects that represent the formal
      * parameter types, in declaration order, of the executable
      * represented by this object.  Returns an array of length
      * 0 if the underlying executable takes no parameters.
+     * Note that the constructors of some inner classes
+     * may have an implicitly declared parameter in addition to
+     * explicitly declared ones.
      *
      * @return the parameter types for the executable this object
      * represents
      */
     public abstract Class<?>[] getParameterTypes();
@@ -255,14 +258,17 @@
     /**
      * Returns an array of {@code Type} objects that represent the formal
      * parameter types, in declaration order, of the executable represented by
      * this object. Returns an array of length 0 if the
      * underlying executable takes no parameters.
+     * Note that the constructors of some inner classes
+     * may have an implicitly declared parameter in addition to
+     * explicitly declared ones.
      *
      * <p>If a formal parameter type is a parameterized type,
      * the {@code Type} object returned for it must accurately reflect
-     * the actual type parameters used in the source code.
+     * the actual type arguments used in the source code.
      *
      * <p>If a formal parameter type is a type variable or a parameterized
      * type, it is created. Otherwise, it is resolved.
      *
      * @return an array of {@code Type}s that represent the formal
@@ -671,10 +677,14 @@
      * anonymous class, then the return value is null.
      *
      * @return an object representing the receiver type of the method or
      * constructor represented by this {@code Executable} or {@code null} if
      * this {@code Executable} can not have a receiver parameter
+     *
+     * @jls 8.4 Method Declarations
+     * @jls 8.4.1 Formal Parameters
+     * @jls 8.8 Constructor Declarations
      */
     public AnnotatedType getAnnotatedReceiverType() {
         if (Modifier.isStatic(this.getModifiers()))
             return null;
         return TypeAnnotationParser.buildAnnotatedType(getTypeAnnotationBytes0(),
@@ -693,10 +703,13 @@
      * corresponds to the order of the formal parameter types in the
      * declaration of the method/constructor.
      *
      * Returns an array of length 0 if the method/constructor declares no
      * parameters.
+     * Note that the constructors of some inner classes
+     * may have an implicitly declared parameter in addition to
+     * explicitly declared ones.
      *
      * @return an array of objects representing the types of the
      * formal parameters of the method or constructor represented by this
      * {@code Executable}
      */
