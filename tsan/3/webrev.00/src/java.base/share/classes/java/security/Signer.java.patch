diff a/src/java.base/share/classes/java/security/Signer.java b/src/java.base/share/classes/java/security/Signer.java
--- a/src/java.base/share/classes/java/security/Signer.java
+++ b/src/java.base/share/classes/java/security/Signer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -47,10 +47,11 @@
  */
 @Deprecated(since="1.2", forRemoval=true)
 @SuppressWarnings("removal")
 public abstract class Signer extends Identity {
 
+    @java.io.Serial
     private static final long serialVersionUID = -1763464102261361480L;
 
     /**
      * The signer's private key.
      *
@@ -81,11 +82,11 @@
      *
      * @param name the identity name.
      *
      * @param scope the scope of the identity.
      *
-     * @exception KeyManagementException if there is already an identity
+     * @throws    KeyManagementException if there is already an identity
      * with the same name in the scope.
      */
     public Signer(String name, IdentityScope scope)
     throws KeyManagementException {
         super(name, scope);
@@ -99,11 +100,11 @@
      * as its argument to see if it's ok to return the private key.
      *
      * @return this signer's private key, or null if the private key has
      * not yet been set.
      *
-     * @exception  SecurityException  if a security manager exists and its
+     * @throws     SecurityException  if a security manager exists and its
      * {@code checkSecurityAccess} method doesn't allow
      * returning the private key.
      *
      * @see SecurityManager#checkSecurityAccess
      */
@@ -119,15 +120,15 @@
      * method is called with {@code "setSignerKeyPair"}
      * as its argument to see if it's ok to set the key pair.
      *
      * @param pair an initialized key pair.
      *
-     * @exception InvalidParameterException if the key pair is not
+     * @throws    InvalidParameterException if the key pair is not
      * properly initialized.
-     * @exception KeyException if the key pair cannot be set for any
+     * @throws    KeyException if the key pair cannot be set for any
      * other reason.
-     * @exception  SecurityException  if a security manager exists and its
+     * @throws     SecurityException  if a security manager exists and its
      * {@code checkSecurityAccess} method doesn't allow
      * setting the key pair.
      *
      * @see SecurityManager#checkSecurityAccess
      */
