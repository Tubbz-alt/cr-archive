diff a/src/java.base/share/classes/java/util/regex/PrintPattern.java b/src/java.base/share/classes/java/util/regex/PrintPattern.java
--- a/src/java.base/share/classes/java/util/regex/PrintPattern.java
+++ b/src/java.base/share/classes/java/util/regex/PrintPattern.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -38,22 +38,20 @@
     private static HashMap<Pattern.Node, Integer> ids = new HashMap<>();
 
     private static void print(Pattern.Node node, String text, int depth) {
         if (!ids.containsKey(node))
             ids.put(node, ids.size());
-        print("%6d:%" + (depth==0? "": depth<<1) + "s<%s>", ids.get(node), "", text);
+        System.out.printf("%6d:%" + (depth==0? "": depth<<1) + "s<%s>",
+                          ids.get(node), "", text);
         if (ids.containsKey(node.next))
-            print(" (=>%d)", ids.get(node.next));
-        print("%n");
+            System.out.printf(" (=>%d)", ids.get(node.next));
+        System.out.printf("%n");
     }
 
     private static void print(String s, int depth) {
-        print("       %" + (depth==0?"":depth<<1) + "s<%s>%n", "", s);
-    }
-
-    private static void print(String fmt, Object ... args) {
-        System.err.printf(fmt, args);
+        System.out.printf("       %" + (depth==0?"":depth<<1) + "s<%s>%n",
+                          "", s);
     }
 
     private static String toStringCPS(int[] cps) {
         StringBuilder sb = new StringBuilder(cps.length);
         for (int cp : cps)
@@ -193,11 +191,17 @@
                 String pstr = pmap.get(gcp.predicate);
                 if (pstr == null)
                     pstr = gcp.predicate.toString();
                 else
                     pstr = "Single \"" + pstr + "\"";
-                str = name + " " + pstr + ((gcp.cmin == 0) ? "*" : "+");
+                str = name + " " + pstr;
+                if (gcp.cmin == 0)
+                    str += "*";
+                else if (gcp.cmin == 1)
+                    str += "+";
+                else
+                    str += "{" + gcp.cmin + ",}";
                 print(node, str, depth);
             } else if (node instanceof Pattern.BackRef) {
                 str = "GroupBackRef " + ((Pattern.BackRef)node).groupIndex / 2;
                 print(node, str, depth);
             } else if (node instanceof Pattern.LastNode) {
