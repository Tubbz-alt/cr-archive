diff a/src/java.base/share/classes/java/io/PipedWriter.java b/src/java.base/share/classes/java/io/PipedWriter.java
--- a/src/java.base/share/classes/java/io/PipedWriter.java
+++ b/src/java.base/share/classes/java/io/PipedWriter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -48,14 +48,14 @@
     private boolean closed = false;
 
     /**
      * Creates a piped writer connected to the specified piped
      * reader. Data characters written to this stream will then be
-     * available as input from <code>snk</code>.
+     * available as input from {@code snk}.
      *
      * @param      snk   The piped reader to connect to.
-     * @exception  IOException  if an I/O error occurs.
+     * @throws     IOException  if an I/O error occurs.
      */
     public PipedWriter(PipedReader snk)  throws IOException {
         connect(snk);
     }
 
@@ -71,24 +71,24 @@
     }
 
     /**
      * Connects this piped writer to a receiver. If this object
      * is already connected to some other piped reader, an
-     * <code>IOException</code> is thrown.
+     * {@code IOException} is thrown.
      * <p>
-     * If <code>snk</code> is an unconnected piped reader and
-     * <code>src</code> is an unconnected piped writer, they may
+     * If {@code snk} is an unconnected piped reader and
+     * {@code src} is an unconnected piped writer, they may
      * be connected by either the call:
      * <blockquote><pre>
      * src.connect(snk)</pre></blockquote>
      * or the call:
      * <blockquote><pre>
      * snk.connect(src)</pre></blockquote>
      * The two calls have the same effect.
      *
      * @param      snk   the piped reader to connect to.
-     * @exception  IOException  if an I/O error occurs.
+     * @throws     IOException  if an I/O error occurs.
      */
     public synchronized void connect(PipedReader snk) throws IOException {
         if (snk == null) {
             throw new NullPointerException();
         } else if (sink != null || snk.connected) {
@@ -102,20 +102,20 @@
         snk.out = 0;
         snk.connected = true;
     }
 
     /**
-     * Writes the specified <code>char</code> to the piped output stream.
+     * Writes the specified {@code char} to the piped output stream.
      * If a thread was reading data characters from the connected piped input
      * stream, but the thread is no longer alive, then an
-     * <code>IOException</code> is thrown.
+     * {@code IOException} is thrown.
      * <p>
-     * Implements the <code>write</code> method of <code>Writer</code>.
+     * Implements the {@code write} method of {@code Writer}.
      *
-     * @param      c   the <code>char</code> to be written.
-     * @exception  IOException  if the pipe is
-     *          <a href=PipedOutputStream.html#BROKEN> <code>broken</code></a>,
+     * @param   c   the {@code char} to be written.
+     * @throw   IOException  if the pipe is
+     *          <a href=PipedOutputStream.html#BROKEN> {@code broken}</a>,
      *          {@link #connect(java.io.PipedReader) unconnected}, closed
      *          or an I/O error occurs.
      */
     public void write(int c)  throws IOException {
         if (sink == null) {
@@ -131,21 +131,21 @@
      * stream.
      * If a thread was reading data characters from the connected piped input
      * stream, but the thread is no longer alive, then an
      * {@code IOException} is thrown.
      *
-     * @param      cbuf  the data.
-     * @param      off   the start offset in the data.
-     * @param      len   the number of characters to write.
+     * @param   cbuf  the data.
+     * @param   off   the start offset in the data.
+     * @param   len   the number of characters to write.
      *
      * @throws  IndexOutOfBoundsException
      *          If {@code off} is negative, or {@code len} is negative,
      *          or {@code off + len} is negative or greater than the length
      *          of the given array
      *
      * @throws  IOException  if the pipe is
-     *          <a href=PipedOutputStream.html#BROKEN><code>broken</code></a>,
+     *          <a href=PipedOutputStream.html#BROKEN>{@code broken}</a>,
      *          {@link #connect(java.io.PipedReader) unconnected}, closed
      *          or an I/O error occurs.
      */
     public void write(char cbuf[], int off, int len) throws IOException {
         if (sink == null) {
@@ -159,11 +159,11 @@
     /**
      * Flushes this output stream and forces any buffered output characters
      * to be written out.
      * This will notify any readers that characters are waiting in the pipe.
      *
-     * @exception  IOException  if the pipe is closed, or an I/O error occurs.
+     * @throws     IOException  if the pipe is closed, or an I/O error occurs.
      */
     public synchronized void flush() throws IOException {
         if (sink != null) {
             if (sink.closedByReader || closed) {
                 throw new IOException("Pipe closed");
@@ -177,11 +177,11 @@
     /**
      * Closes this piped output stream and releases any system resources
      * associated with this stream. This stream may no longer be used for
      * writing characters.
      *
-     * @exception  IOException  if an I/O error occurs.
+     * @throws     IOException  if an I/O error occurs.
      */
     public void close()  throws IOException {
         closed = true;
         if (sink != null) {
             sink.receivedLast();
