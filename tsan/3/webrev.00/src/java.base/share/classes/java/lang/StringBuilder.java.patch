diff a/src/java.base/share/classes/java/lang/StringBuilder.java b/src/java.base/share/classes/java/lang/StringBuilder.java
--- a/src/java.base/share/classes/java/lang/StringBuilder.java
+++ b/src/java.base/share/classes/java/lang/StringBuilder.java
@@ -86,10 +86,11 @@
     extends AbstractStringBuilder
     implements java.io.Serializable, Comparable<StringBuilder>, CharSequence
 {
 
     /** use serialVersionUID for interoperability */
+    @java.io.Serial
     static final long serialVersionUID = 4383685877147921099L;
 
     /**
      * Constructs a string builder with no characters in it and an
      * initial capacity of 16 characters.
@@ -119,12 +120,11 @@
      *
      * @param   str   the initial contents of the buffer.
      */
     @HotSpotIntrinsicCandidate
     public StringBuilder(String str) {
-        super(str.coder(), str.length(), 16);
-        append(str);
+        super(str);
     }
 
     /**
      * Constructs a string builder that contains the same characters
      * as the specified {@code CharSequence}. The initial capacity of
@@ -132,12 +132,11 @@
      * {@code CharSequence} argument.
      *
      * @param      seq   the sequence to copy.
      */
     public StringBuilder(CharSequence seq) {
-        super(String.LATIN1, seq.length(), 16);
-        append(seq);
+        super(seq);
     }
 
     /**
      * Compares two {@code StringBuilder} instances lexicographically. This method
      * follows the same rules for lexicographical comparison as defined in the
@@ -458,10 +457,11 @@
      *             string builder ({@code char[]}).   The length of the
      *             {@code char} array may be greater than the number of
      *             characters currently stored in the string builder, in which
      *             case extra characters are ignored.
      */
+    @java.io.Serial
     private void writeObject(java.io.ObjectOutputStream s)
         throws java.io.IOException {
         s.defaultWriteObject();
         s.writeInt(count);
         char[] val = new char[capacity()];
@@ -475,10 +475,11 @@
 
     /**
      * readObject is called to restore the state of the StringBuffer from
      * a stream.
      */
+    @java.io.Serial
     private void readObject(java.io.ObjectInputStream s)
         throws java.io.IOException, ClassNotFoundException {
         s.defaultReadObject();
         count = s.readInt();
         char[] val = (char[]) s.readObject();
