diff a/src/java.base/share/classes/java/security/cert/CertPath.java b/src/java.base/share/classes/java/security/cert/CertPath.java
--- a/src/java.base/share/classes/java/security/cert/CertPath.java
+++ b/src/java.base/share/classes/java/security/cert/CertPath.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -117,10 +117,11 @@
  * @author      Yassir Elley
  * @since       1.4
  */
 public abstract class CertPath implements Serializable {
 
+    @java.io.Serial
     private static final long serialVersionUID = 6068470306649138683L;
 
     private String type;        // the type of certificates in this chain
 
     /**
@@ -245,22 +246,22 @@
     /**
      * Returns the encoded form of this certification path, using the default
      * encoding.
      *
      * @return the encoded bytes
-     * @exception CertificateEncodingException if an encoding error occurs
+     * @throws    CertificateEncodingException if an encoding error occurs
      */
     public abstract byte[] getEncoded()
         throws CertificateEncodingException;
 
     /**
      * Returns the encoded form of this certification path, using the
      * specified encoding.
      *
      * @param encoding the name of the encoding to use
      * @return the encoded bytes
-     * @exception CertificateEncodingException if an encoding error occurs or
+     * @throws    CertificateEncodingException if an encoding error occurs or
      *   the encoding requested is not supported
      */
     public abstract byte[] getEncoded(String encoding)
         throws CertificateEncodingException;
 
@@ -280,10 +281,11 @@
      * @return the {@code CertPathRep} to be serialized
      *
      * @throws ObjectStreamException if a {@code CertPathRep} object
      * representing this certification path could not be created
      */
+    @java.io.Serial
     protected Object writeReplace() throws ObjectStreamException {
         try {
             return new CertPathRep(type, getEncoded());
         } catch (CertificateException ce) {
             NotSerializableException nse =
@@ -298,10 +300,11 @@
      * Alternate {@code CertPath} class for serialization.
      * @since 1.4
      */
     protected static class CertPathRep implements Serializable {
 
+        @java.io.Serial
         private static final long serialVersionUID = 3015633072427920915L;
 
         /** The Certificate type */
         private String type;
         /** The encoded form of the cert path */
@@ -325,10 +328,11 @@
          * @return the resolved {@code CertPath} object
          *
          * @throws ObjectStreamException if a {@code CertPath} could not
          * be constructed
          */
+        @java.io.Serial
         protected Object readResolve() throws ObjectStreamException {
             try {
                 CertificateFactory cf = CertificateFactory.getInstance(type);
                 return cf.generateCertPath(new ByteArrayInputStream(data));
             } catch (CertificateException ce) {
