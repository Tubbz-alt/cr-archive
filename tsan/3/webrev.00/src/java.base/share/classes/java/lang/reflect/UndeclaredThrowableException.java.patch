diff a/src/java.base/share/classes/java/lang/reflect/UndeclaredThrowableException.java b/src/java.base/share/classes/java/lang/reflect/UndeclaredThrowableException.java
--- a/src/java.base/share/classes/java/lang/reflect/UndeclaredThrowableException.java
+++ b/src/java.base/share/classes/java/lang/reflect/UndeclaredThrowableException.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -60,10 +60,11 @@
  * @author      Peter Jones
  * @see         InvocationHandler
  * @since       1.3
  */
 public class UndeclaredThrowableException extends RuntimeException {
+    @java.io.Serial
     static final long serialVersionUID = 330127114055056639L;
 
     /**
      * Constructs an {@code UndeclaredThrowableException} with the
      * specified {@code Throwable}.
@@ -106,19 +107,21 @@
     /**
      * Serializable fields for UndeclaredThrowableException.
      *
      * @serialField undeclaredThrowable Throwable
      */
+    @java.io.Serial
     private static final ObjectStreamField[] serialPersistentFields = {
         new ObjectStreamField("undeclaredThrowable", Throwable.class)
     };
 
     /*
      * Reconstitutes the UndeclaredThrowableException instance from a stream
      * and initialize the cause properly when deserializing from an older
      * version.
      */
+    @java.io.Serial
     private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
         ObjectInputStream.GetField fields = s.readFields();
         Throwable exception = (Throwable) fields.get("undeclaredThrowable", null);
         if (exception != null) {
             SharedSecrets.getJavaLangAccess().setCause(this, exception);
@@ -127,10 +130,11 @@
 
     /*
      * To maintain compatibility with older implementation, write a serial
      * "ex" field with the cause as the value.
      */
+    @java.io.Serial
     private void writeObject(ObjectOutputStream out) throws IOException {
         ObjectOutputStream.PutField fields = out.putFields();
         fields.put("undeclaredThrowable", super.getCause());
         out.writeFields();
     }
