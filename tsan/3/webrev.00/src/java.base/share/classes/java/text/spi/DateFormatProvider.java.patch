diff a/src/java.base/share/classes/java/text/spi/DateFormatProvider.java b/src/java.base/share/classes/java/text/spi/DateFormatProvider.java
--- a/src/java.base/share/classes/java/text/spi/DateFormatProvider.java
+++ b/src/java.base/share/classes/java/text/spi/DateFormatProvider.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -44,51 +44,51 @@
      */
     protected DateFormatProvider() {
     }
 
     /**
-     * Returns a new <code>DateFormat</code> instance which formats time
+     * Returns a new {@code DateFormat} instance which formats time
      * with the given formatting style for the specified locale.
      * @param style the given formatting style.  Either one of
      *     {@link java.text.DateFormat#SHORT DateFormat.SHORT},
      *     {@link java.text.DateFormat#MEDIUM DateFormat.MEDIUM},
      *     {@link java.text.DateFormat#LONG DateFormat.LONG}, or
      *     {@link java.text.DateFormat#FULL DateFormat.FULL}.
      * @param locale the desired locale.
-     * @exception IllegalArgumentException if <code>style</code> is invalid,
-     *     or if <code>locale</code> isn't
+     * @throws    IllegalArgumentException if {@code style} is invalid,
+     *     or if {@code locale} isn't
      *     one of the locales returned from
      *     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales()
      *     getAvailableLocales()}.
-     * @exception NullPointerException if <code>locale</code> is null
+     * @throws    NullPointerException if {@code locale} is null
      * @return a time formatter.
      * @see java.text.DateFormat#getTimeInstance(int, java.util.Locale)
      */
     public abstract DateFormat getTimeInstance(int style, Locale locale);
 
     /**
-     * Returns a new <code>DateFormat</code> instance which formats date
+     * Returns a new {@code DateFormat} instance which formats date
      * with the given formatting style for the specified locale.
      * @param style the given formatting style.  Either one of
      *     {@link java.text.DateFormat#SHORT DateFormat.SHORT},
      *     {@link java.text.DateFormat#MEDIUM DateFormat.MEDIUM},
      *     {@link java.text.DateFormat#LONG DateFormat.LONG}, or
      *     {@link java.text.DateFormat#FULL DateFormat.FULL}.
      * @param locale the desired locale.
-     * @exception IllegalArgumentException if <code>style</code> is invalid,
-     *     or if <code>locale</code> isn't
+     * @throws    IllegalArgumentException if {@code style} is invalid,
+     *     or if {@code locale} isn't
      *     one of the locales returned from
      *     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales()
      *     getAvailableLocales()}.
-     * @exception NullPointerException if <code>locale</code> is null
+     * @throws    NullPointerException if {@code locale} is null
      * @return a date formatter.
      * @see java.text.DateFormat#getDateInstance(int, java.util.Locale)
      */
     public abstract DateFormat getDateInstance(int style, Locale locale);
 
     /**
-     * Returns a new <code>DateFormat</code> instance which formats date and time
+     * Returns a new {@code DateFormat} instance which formats date and time
      * with the given formatting style for the specified locale.
      * @param dateStyle the given date formatting style.  Either one of
      *     {@link java.text.DateFormat#SHORT DateFormat.SHORT},
      *     {@link java.text.DateFormat#MEDIUM DateFormat.MEDIUM},
      *     {@link java.text.DateFormat#LONG DateFormat.LONG}, or
@@ -97,17 +97,17 @@
      *     {@link java.text.DateFormat#SHORT DateFormat.SHORT},
      *     {@link java.text.DateFormat#MEDIUM DateFormat.MEDIUM},
      *     {@link java.text.DateFormat#LONG DateFormat.LONG}, or
      *     {@link java.text.DateFormat#FULL DateFormat.FULL}.
      * @param locale the desired locale.
-     * @exception IllegalArgumentException if <code>dateStyle</code> or
-     *     <code>timeStyle</code> is invalid,
-     *     or if <code>locale</code> isn't
+     * @throws    IllegalArgumentException if {@code dateStyle} or
+     *     {@code timeStyle} is invalid,
+     *     or if {@code locale} isn't
      *     one of the locales returned from
      *     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales()
      *     getAvailableLocales()}.
-     * @exception NullPointerException if <code>locale</code> is null
+     * @throws    NullPointerException if {@code locale} is null
      * @return a date/time formatter.
      * @see java.text.DateFormat#getDateTimeInstance(int, int, java.util.Locale)
      */
     public abstract DateFormat
         getDateTimeInstance(int dateStyle, int timeStyle, Locale locale);
