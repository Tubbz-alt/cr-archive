diff a/src/java.base/share/classes/java/io/ObjectOutput.java b/src/java.base/share/classes/java/io/ObjectOutput.java
--- a/src/java.base/share/classes/java/io/ObjectOutput.java
+++ b/src/java.base/share/classes/java/io/ObjectOutput.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -40,51 +40,51 @@
     /**
      * Write an object to the underlying storage or stream.  The
      * class that implements this interface defines how the object is
      * written.
      *
-     * @param obj the object to be written
-     * @exception IOException Any of the usual Input/Output related exceptions.
+     * @param     obj the object to be written
+     * @throws    IOException Any of the usual Input/Output related exceptions.
      */
     public void writeObject(Object obj)
       throws IOException;
 
     /**
      * Writes a byte. This method will block until the byte is actually
      * written.
-     * @param b the byte
-     * @exception IOException If an I/O error has occurred.
+     * @param     b the byte
+     * @throws    IOException If an I/O error has occurred.
      */
     public void write(int b) throws IOException;
 
     /**
      * Writes an array of bytes. This method will block until the bytes
      * are actually written.
-     * @param b the data to be written
-     * @exception IOException If an I/O error has occurred.
+     * @param     b the data to be written
+     * @throws    IOException If an I/O error has occurred.
      */
     public void write(byte b[]) throws IOException;
 
     /**
      * Writes a sub array of bytes.
-     * @param b the data to be written
-     * @param off       the start offset in the data
-     * @param len       the number of bytes that are written
-     * @exception IOException If an I/O error has occurred.
+     * @param     b the data to be written
+     * @param     off       the start offset in the data
+     * @param     len       the number of bytes that are written
+     * @throws    IOException If an I/O error has occurred.
      */
     public void write(byte b[], int off, int len) throws IOException;
 
     /**
      * Flushes the stream. This will write any buffered
      * output bytes.
-     * @exception IOException If an I/O error has occurred.
+     * @throws    IOException If an I/O error has occurred.
      */
     public void flush() throws IOException;
 
     /**
      * Closes the stream. This method must be called
      * to release any resources associated with the
      * stream.
-     * @exception IOException If an I/O error has occurred.
+     * @throws    IOException If an I/O error has occurred.
      */
     public void close() throws IOException;
 }
