diff a/src/java.base/share/classes/java/net/SocketPermission.java b/src/java.base/share/classes/java/net/SocketPermission.java
--- a/src/java.base/share/classes/java/net/SocketPermission.java
+++ b/src/java.base/share/classes/java/net/SocketPermission.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -148,10 +148,11 @@
  */
 
 public final class SocketPermission extends Permission
     implements java.io.Serializable
 {
+    @java.io.Serial
     private static final long serialVersionUID = -7204263841984476862L;
 
     /**
      * Connect to host:port
      */
@@ -284,10 +285,15 @@
      * </pre>
      *
      * @param host the hostname or IP address of the computer, optionally
      * including a colon followed by a port or port range.
      * @param action the action string.
+     *
+     * @throws NullPointerException if any parameters are null
+     * @throws IllegalArgumentException if the format of {@code host} is
+     *         invalid, or if the {@code action} string is empty, malformed, or
+     *         contains an action other than the specified possible actions
      */
     public SocketPermission(String host, String action) {
         super(getHost(host));
         // name initialized to getHost(host); NPE detected in getHost()
         init(getName(), getMask(action));
@@ -586,18 +592,19 @@
 
             // make sure we didn't just match the tail of a word
             // like "ackbarfaccept".  Also, skip to the comma.
             boolean seencomma = false;
             while (i >= matchlen && !seencomma) {
-                switch(a[i-matchlen]) {
-                case ',':
-                    seencomma = true;
-                    break;
+                switch (c = a[i-matchlen]) {
                 case ' ': case '\r': case '\n':
                 case '\f': case '\t':
                     break;
                 default:
+                    if (c == ',' && i > matchlen) {
+                        seencomma = true;
+                        break;
+                    }
                     throw new IllegalArgumentException(
                             "invalid permission: " + action);
                 }
                 i--;
             }
@@ -1184,10 +1191,11 @@
     /**
      * WriteObject is called to save the state of the SocketPermission
      * to a stream. The actions are serialized, and the superclass
      * takes care of the name.
      */
+    @java.io.Serial
     private synchronized void writeObject(java.io.ObjectOutputStream s)
         throws IOException
     {
         // Write out the actions. The superclass takes care of the name
         // call getActions to make sure actions field is initialized
@@ -1198,10 +1206,11 @@
 
     /**
      * readObject is called to restore the state of the SocketPermission from
      * a stream.
      */
+    @java.io.Serial
     private synchronized void readObject(java.io.ObjectInputStream s)
          throws IOException, ClassNotFoundException
     {
         // Read in the action, then initialize the rest
         s.defaultReadObject();
@@ -1356,14 +1365,14 @@
      * Adds a permission to the SocketPermissions. The key for the hash is
      * the name in the case of wildcards, or all the IP addresses.
      *
      * @param permission the Permission object to add.
      *
-     * @exception IllegalArgumentException - if the permission is not a
+     * @throws    IllegalArgumentException   if the permission is not a
      *                                       SocketPermission
      *
-     * @exception SecurityException - if this SocketPermissionCollection object
+     * @throws    SecurityException   if this SocketPermissionCollection object
      *                                has been marked readonly
      */
     @Override
     public void add(Permission permission) {
         if (! (permission instanceof SocketPermission))
@@ -1428,11 +1437,11 @@
             if (((needed & x.getMask()) != 0) && x.impliesIgnoreMask(np)) {
                 effective |=  x.getMask();
                 if ((effective & desired) == desired) {
                     return true;
                 }
-                needed = (desired ^ effective);
+                needed = (desired & ~effective);
             }
         }
         return false;
     }
 
@@ -1446,10 +1455,11 @@
     @SuppressWarnings("unchecked")
     public Enumeration<Permission> elements() {
         return (Enumeration)Collections.enumeration(perms.values());
     }
 
+    @java.io.Serial
     private static final long serialVersionUID = 2787186408602843674L;
 
     // Need to maintain serialization interoperability with earlier releases,
     // which had the serializable field:
 
@@ -1461,10 +1471,11 @@
 
     /**
      * @serialField permissions java.util.Vector
      *     A list of the SocketPermissions for this set.
      */
+    @java.io.Serial
     private static final ObjectStreamField[] serialPersistentFields = {
         new ObjectStreamField("permissions", Vector.class),
     };
 
     /**
@@ -1472,10 +1483,11 @@
      */
     /*
      * Writes the contents of the perms field out as a Vector for
      * serialization compatibility with earlier releases.
      */
+    @java.io.Serial
     private void writeObject(ObjectOutputStream out) throws IOException {
         // Don't call out.defaultWriteObject()
 
         // Write out Vector
         Vector<SocketPermission> permissions = new Vector<>(perms.values());
@@ -1486,10 +1498,11 @@
     }
 
     /*
      * Reads in a Vector of SocketPermissions and saves them in the perms field.
      */
+    @java.io.Serial
     private void readObject(ObjectInputStream in)
         throws IOException, ClassNotFoundException
     {
         // Don't call in.defaultReadObject()
 
