diff a/src/java.base/share/classes/java/util/PropertyPermission.java b/src/java.base/share/classes/java/util/PropertyPermission.java
--- a/src/java.base/share/classes/java/util/PropertyPermission.java
+++ b/src/java.base/share/classes/java/util/PropertyPermission.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -52,14 +52,14 @@
  * a list of one or more comma-separated keywords. The possible keywords are
  * "read" and "write". Their meaning is defined as follows:
  *
  * <DL>
  *    <DT> read
- *    <DD> read permission. Allows <code>System.getProperty</code> to
+ *    <DD> read permission. Allows {@code System.getProperty} to
  *         be called.
  *    <DT> write
- *    <DD> write permission. Allows <code>System.setProperty</code> to
+ *    <DD> write permission. Allows {@code System.setProperty} to
  *         be called.
  * </DL>
  * <P>
  * The actions string is converted to lowercase before processing.
  * <P>
@@ -147,13 +147,13 @@
      * "read" and "write".
      *
      * @param name the name of the PropertyPermission.
      * @param actions the actions string.
      *
-     * @throws NullPointerException if <code>name</code> is <code>null</code>.
-     * @throws IllegalArgumentException if <code>name</code> is empty or if
-     * <code>actions</code> is invalid.
+     * @throws NullPointerException if {@code name} is {@code null}.
+     * @throws IllegalArgumentException if {@code name} is empty or if
+     * {@code actions} is invalid.
      */
     public PropertyPermission(String name, String actions) {
         super(name,actions);
         init(getMask(actions));
     }
@@ -221,11 +221,11 @@
     }
 
     /**
      * Returns the hash code value for this object.
      * The hash code used is the hash code of this permissions name, that is,
-     * <code>getName().hashCode()</code>, where <code>getName</code> is
+     * {@code getName().hashCode()}, where {@code getName} is
      * from the Permission superclass.
      *
      * @return a hash code value for this object.
      */
     @Override
@@ -348,11 +348,11 @@
 
     /**
      * Returns the "canonical string representation" of the actions.
      * That is, this method always returns present actions in the following order:
      * read, write. For example, if this PropertyPermission object
-     * allows both write and read actions, a call to <code>getActions</code>
+     * allows both write and read actions, a call to {@code getActions}
      * will return the string "read,write".
      *
      * @return the canonical string representation of the actions.
      */
     @Override
@@ -383,18 +383,19 @@
     @Override
     public PermissionCollection newPermissionCollection() {
         return new PropertyPermissionCollection();
     }
 
-
+    @java.io.Serial
     private static final long serialVersionUID = 885438825399942851L;
 
     /**
      * WriteObject is called to save the state of the PropertyPermission
      * to a stream. The actions are serialized, and the superclass
      * takes care of the name.
      */
+    @java.io.Serial
     private synchronized void writeObject(java.io.ObjectOutputStream s)
         throws IOException
     {
         // Write out the actions. The superclass takes care of the name
         // call getActions to make sure actions field is initialized
@@ -405,10 +406,11 @@
 
     /**
      * readObject is called to restore the state of the PropertyPermission from
      * a stream.
      */
+    @java.io.Serial
     private synchronized void readObject(java.io.ObjectInputStream s)
          throws IOException, ClassNotFoundException
     {
         // Read in the action, then initialize the rest
         s.defaultReadObject();
@@ -459,14 +461,14 @@
      * Adds a permission to the PropertyPermissions. The key for the hash is
      * the name.
      *
      * @param permission the Permission object to add.
      *
-     * @exception IllegalArgumentException - if the permission is not a
+     * @throws    IllegalArgumentException   if the permission is not a
      *                                       PropertyPermission
      *
-     * @exception SecurityException - if this PropertyPermissionCollection
+     * @throws    SecurityException   if this PropertyPermissionCollection
      *                                object has been marked readonly
      */
     @Override
     public void add(Permission permission) {
         if (! (permission instanceof PropertyPermission))
@@ -594,10 +596,11 @@
          * cannot be directly cast to Enumeration<Permission>
          */
         return (Enumeration)perms.elements();
     }
 
+    @java.io.Serial
     private static final long serialVersionUID = 7015263904581634791L;
 
     // Need to maintain serialization interoperability with earlier releases,
     // which had the serializable field:
     //
@@ -623,10 +626,11 @@
     /*
      * Writes the contents of the perms field out as a Hashtable for
      * serialization compatibility with earlier releases. all_allowed
      * unchanged.
      */
+    @java.io.Serial
     private void writeObject(ObjectOutputStream out) throws IOException {
         // Don't call out.defaultWriteObject()
 
         // Copy perms into a Hashtable
         Hashtable<String, Permission> permissions =
@@ -642,10 +646,11 @@
 
     /*
      * Reads in a Hashtable of PropertyPermissions and saves them in the
      * perms field. Reads in all_allowed.
      */
+    @java.io.Serial
     private void readObject(ObjectInputStream in)
         throws IOException, ClassNotFoundException
     {
         // Don't call defaultReadObject()
 
