diff a/src/java.base/share/classes/java/net/ProxySelector.java b/src/java.base/share/classes/java/net/ProxySelector.java
--- a/src/java.base/share/classes/java/net/ProxySelector.java
+++ b/src/java.base/share/classes/java/net/ProxySelector.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -83,14 +83,14 @@
     /**
      * Gets the system-wide proxy selector.
      *
      * @throws  SecurityException
      *          If a security manager has been installed and it denies
-     * {@link NetPermission}{@code ("getProxySelector")}
-     * @see #setDefault(ProxySelector)
-     * @return the system-wide {@code ProxySelector}
-     * @since 1.5
+     *          {@link NetPermission}{@code ("getProxySelector")}
+     * @see     #setDefault(ProxySelector)
+     * @return  the system-wide {@code ProxySelector}
+     * @since   1.5
      */
     public static ProxySelector getDefault() {
         SecurityManager sm = System.getSecurityManager();
         if (sm != null) {
             sm.checkPermission(SecurityConstants.GET_PROXYSELECTOR_PERMISSION);
@@ -106,11 +106,11 @@
      * @param ps The HTTP proxy selector, or
      *          {@code null} to unset the proxy selector.
      *
      * @throws  SecurityException
      *          If a security manager has been installed and it denies
-     * {@link NetPermission}{@code ("setProxySelector")}
+     *          {@link NetPermission}{@code ("setProxySelector")}
      *
      * @see #getDefault()
      * @since 1.5
      */
     public static void setDefault(ProxySelector ps) {
@@ -141,11 +141,13 @@
      *          {@link java.net.Proxy Proxy};
      *          when no proxy is available, the list will
      *          contain one element of type
      *          {@link java.net.Proxy Proxy}
      *          that represents a direct connection.
-     * @throws IllegalArgumentException if the argument is null
+     * @throws IllegalArgumentException if the argument is null or if
+     *         the protocol or host cannot be determined from the provided
+     *         {@code uri}
      */
     public abstract List<Proxy> select(URI uri);
 
     /**
      * Called to indicate that a connection could not be established
@@ -159,11 +161,11 @@
      * @param   sa
      *          The socket address of the proxy/SOCKS server
      *
      * @param   ioe
      *          The I/O exception thrown when the connect failed.
-     * @throws IllegalArgumentException if either argument is null
+     * @throws  IllegalArgumentException if either argument is null
      */
     public abstract void connectFailed(URI uri, SocketAddress sa, IOException ioe);
 
     /**
      * Returns a ProxySelector which uses the given proxy address for all HTTP
