diff a/src/java.base/share/classes/java/text/spi/NumberFormatProvider.java b/src/java.base/share/classes/java/text/spi/NumberFormatProvider.java
--- a/src/java.base/share/classes/java/text/spi/NumberFormatProvider.java
+++ b/src/java.base/share/classes/java/text/spi/NumberFormatProvider.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -44,67 +44,67 @@
      */
     protected NumberFormatProvider() {
     }
 
     /**
-     * Returns a new <code>NumberFormat</code> instance which formats
+     * Returns a new {@code NumberFormat} instance which formats
      * monetary values for the specified locale.
      *
      * @param locale the desired locale.
-     * @exception NullPointerException if <code>locale</code> is null
-     * @exception IllegalArgumentException if <code>locale</code> isn't
+     * @throws    NullPointerException if {@code locale} is null
+     * @throws    IllegalArgumentException if {@code locale} isn't
      *     one of the locales returned from
      *     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales()
      *     getAvailableLocales()}.
      * @return a currency formatter
      * @see java.text.NumberFormat#getCurrencyInstance(java.util.Locale)
      */
     public abstract NumberFormat getCurrencyInstance(Locale locale);
 
     /**
-     * Returns a new <code>NumberFormat</code> instance which formats
+     * Returns a new {@code NumberFormat} instance which formats
      * integer values for the specified locale.
      * The returned number format is configured to
      * round floating point numbers to the nearest integer using
      * half-even rounding (see {@link java.math.RoundingMode#HALF_EVEN HALF_EVEN})
      * for formatting, and to parse only the integer part of
      * an input string (see {@link
      * java.text.NumberFormat#isParseIntegerOnly isParseIntegerOnly}).
      *
      * @param locale the desired locale
-     * @exception NullPointerException if <code>locale</code> is null
-     * @exception IllegalArgumentException if <code>locale</code> isn't
+     * @throws    NullPointerException if {@code locale} is null
+     * @throws    IllegalArgumentException if {@code locale} isn't
      *     one of the locales returned from
      *     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales()
      *     getAvailableLocales()}.
      * @return a number format for integer values
      * @see java.text.NumberFormat#getIntegerInstance(java.util.Locale)
      */
     public abstract NumberFormat getIntegerInstance(Locale locale);
 
     /**
-     * Returns a new general-purpose <code>NumberFormat</code> instance for
+     * Returns a new general-purpose {@code NumberFormat} instance for
      * the specified locale.
      *
      * @param locale the desired locale
-     * @exception NullPointerException if <code>locale</code> is null
-     * @exception IllegalArgumentException if <code>locale</code> isn't
+     * @throws    NullPointerException if {@code locale} is null
+     * @throws    IllegalArgumentException if {@code locale} isn't
      *     one of the locales returned from
      *     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales()
      *     getAvailableLocales()}.
      * @return a general-purpose number formatter
      * @see java.text.NumberFormat#getNumberInstance(java.util.Locale)
      */
     public abstract NumberFormat getNumberInstance(Locale locale);
 
     /**
-     * Returns a new <code>NumberFormat</code> instance which formats
+     * Returns a new {@code NumberFormat} instance which formats
      * percentage values for the specified locale.
      *
      * @param locale the desired locale
-     * @exception NullPointerException if <code>locale</code> is null
-     * @exception IllegalArgumentException if <code>locale</code> isn't
+     * @throws    NullPointerException if {@code locale} is null
+     * @throws    IllegalArgumentException if {@code locale} isn't
      *     one of the locales returned from
      *     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales()
      *     getAvailableLocales()}.
      * @return a percent formatter
      * @see java.text.NumberFormat#getPercentInstance(java.util.Locale)
@@ -115,11 +115,12 @@
      * Returns a new {@code NumberFormat} instance which formats
      * a number in its compact form for the specified
      * {@code locale} and {@code formatStyle}.
      *
      * @implSpec The default implementation of this method throws
-     * {@code UnSupportedOperationException}. Overriding the implementation
+     * {@link java.lang.UnsupportedOperationException
+     * UnsupportedOperationException}. Overriding the implementation
      * of this method returns the compact number formatter instance
      * of the given {@code locale} with specified {@code formatStyle}.
      *
      * @param locale the desired locale
      * @param formatStyle the style for formatting a number
@@ -127,10 +128,12 @@
      *     is {@code null}
      * @throws IllegalArgumentException if {@code locale} is not
      *     one of the locales returned from
      *     {@link java.util.spi.LocaleServiceProvider#getAvailableLocales()
      *     getAvailableLocales()}.
+     * @throws UnsupportedOperationException if the implementation does not
+     *      support this method
      * @return a compact number formatter
      *
      * @see java.text.NumberFormat#getCompactNumberInstance(Locale,
      *                      NumberFormat.Style)
      * @since 12
