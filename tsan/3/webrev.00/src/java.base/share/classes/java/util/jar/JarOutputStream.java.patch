diff a/src/java.base/share/classes/java/util/jar/JarOutputStream.java b/src/java.base/share/classes/java/util/jar/JarOutputStream.java
--- a/src/java.base/share/classes/java/util/jar/JarOutputStream.java
+++ b/src/java.base/share/classes/java/util/jar/JarOutputStream.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -27,34 +27,33 @@
 
 import java.util.zip.*;
 import java.io.*;
 
 /**
- * The <code>JarOutputStream</code> class is used to write the contents
+ * The {@code JarOutputStream} class is used to write the contents
  * of a JAR file to any output stream. It extends the class
- * <code>java.util.zip.ZipOutputStream</code> with support
- * for writing an optional <code>Manifest</code> entry. The
- * <code>Manifest</code> can be used to specify meta-information about
+ * {@code java.util.zip.ZipOutputStream} with support
+ * for writing an optional {@code Manifest} entry. The
+ * {@code Manifest} can be used to specify meta-information about
  * the JAR file and its entries.
  *
  * @author  David Connelly
  * @see     Manifest
  * @see     java.util.zip.ZipOutputStream
  * @since   1.2
  */
-public
-class JarOutputStream extends ZipOutputStream {
+public class JarOutputStream extends ZipOutputStream {
     private static final int JAR_MAGIC = 0xCAFE;
 
     /**
-     * Creates a new <code>JarOutputStream</code> with the specified
-     * <code>Manifest</code>. The manifest is written as the first
+     * Creates a new {@code JarOutputStream} with the specified
+     * {@code Manifest}. The manifest is written as the first
      * entry to the output stream.
      *
      * @param out the actual output stream
-     * @param man the optional <code>Manifest</code>
-     * @exception IOException if an I/O error has occurred
+     * @param man the optional {@code Manifest}
+     * @throws    IOException if an I/O error has occurred
      */
     public JarOutputStream(OutputStream out, Manifest man) throws IOException {
         super(out);
         if (man == null) {
             throw new NullPointerException("man");
@@ -64,13 +63,13 @@
         man.write(new BufferedOutputStream(this));
         closeEntry();
     }
 
     /**
-     * Creates a new <code>JarOutputStream</code> with no manifest.
+     * Creates a new {@code JarOutputStream} with no manifest.
      * @param out the actual output stream
-     * @exception IOException if an I/O error has occurred
+     * @throws    IOException if an I/O error has occurred
      */
     public JarOutputStream(OutputStream out) throws IOException {
         super(out);
     }
 
@@ -81,12 +80,12 @@
      * used if no compression method was specified for the entry.
      * The current time will be used if the entry has no set modification
      * time.
      *
      * @param ze the ZIP/JAR entry to be written
-     * @exception ZipException if a ZIP error has occurred
-     * @exception IOException if an I/O error has occurred
+     * @throws    ZipException if a ZIP error has occurred
+     * @throws    IOException if an I/O error has occurred
      */
     public void putNextEntry(ZipEntry ze) throws IOException {
         if (firstEntry) {
             // Make sure that extra field data for first JAR
             // entry includes JAR magic number id.
