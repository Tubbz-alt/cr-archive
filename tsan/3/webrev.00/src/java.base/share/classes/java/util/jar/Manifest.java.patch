diff a/src/java.base/share/classes/java/util/jar/Manifest.java b/src/java.base/share/classes/java/util/jar/Manifest.java
--- a/src/java.base/share/classes/java/util/jar/Manifest.java
+++ b/src/java.base/share/classes/java/util/jar/Manifest.java
@@ -31,14 +31,13 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.util.HashMap;
 import java.util.Map;
 
+import sun.nio.cs.UTF_8;
 import sun.security.util.SecurityProperties;
 
-import static java.nio.charset.StandardCharsets.UTF_8;
-
 /**
  * The Manifest class is used to maintain Manifest entry names and their
  * associated Attributes. There are main Manifest Attributes as well as
  * per-entry Attributes. For information on the Manifest format, please
  * see the
@@ -193,11 +192,11 @@
      * Writes the Manifest to the specified OutputStream.
      * Attributes.Name.MANIFEST_VERSION must be set in
      * MainAttributes prior to invoking this method.
      *
      * @param out the output stream
-     * @exception IOException if an I/O error has occurred
+     * @throws    IOException if an I/O error has occurred
      * @see #getMainAttributes
      */
     public void write(OutputStream out) throws IOException {
         DataOutputStream dos = new DataOutputStream(out);
         // Write out the main attributes for the manifest
@@ -235,11 +234,11 @@
      * spaces within the limits of 72 bytes of contents per line followed
      * by a line break.
      */
     static void println72(OutputStream out, String line) throws IOException {
         if (!line.isEmpty()) {
-            byte[] lineBytes = line.getBytes(UTF_8);
+            byte[] lineBytes = line.getBytes(UTF_8.INSTANCE);
             int length = lineBytes.length;
             // first line can hold one byte more than subsequent lines which
             // start with a continuation line break space
             out.write(lineBytes[0]);
             int pos = 1;
@@ -274,11 +273,11 @@
      * Reads the Manifest from the specified InputStream. The entry
      * names and attributes read will be merged in with the current
      * manifest entries.
      *
      * @param is the input stream
-     * @exception IOException if an I/O error has occurred
+     * @throws    IOException if an I/O error has occurred
      */
     public void read(InputStream is) throws IOException {
         read(is, null);
     }
 
@@ -335,11 +334,11 @@
                 if (fis.peek() == ' ') {
                     // name is wrapped
                     lastline = buf;
                     continue;
                 }
-                name = new String(buf, 0, buf.length, UTF_8);
+                name = new String(buf, 0, buf.length, UTF_8.INSTANCE);
                 lastline = null;
             }
             Attributes attr = getAttributes(name);
             if (attr == null) {
                 attr = new Attributes(asize);
@@ -360,15 +359,11 @@
 
     private String parseName(byte[] lbuf, int len) {
         if (toLower(lbuf[0]) == 'n' && toLower(lbuf[1]) == 'a' &&
             toLower(lbuf[2]) == 'm' && toLower(lbuf[3]) == 'e' &&
             lbuf[4] == ':' && lbuf[5] == ' ') {
-            try {
-                return new String(lbuf, 6, len - 6, UTF_8);
-            }
-            catch (Exception e) {
-            }
+            return new String(lbuf, 6, len - 6, UTF_8.INSTANCE);
         }
         return null;
     }
 
     private int toLower(int c) {
