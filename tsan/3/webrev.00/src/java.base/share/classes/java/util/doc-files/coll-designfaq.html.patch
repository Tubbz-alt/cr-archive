diff a/src/java.base/share/classes/java/util/doc-files/coll-designfaq.html b/src/java.base/share/classes/java/util/doc-files/coll-designfaq.html
--- a/src/java.base/share/classes/java/util/doc-files/coll-designfaq.html
+++ b/src/java.base/share/classes/java/util/doc-files/coll-designfaq.html
@@ -1,8 +1,8 @@
 <!DOCTYPE html>
 <!--
- Copyright (c) 1998, 2018, Oracle and/or its affiliates. All rights reserved.
+ Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 
  This code is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License version 2 only, as
  published by the Free Software Foundation.  Oracle designates this
@@ -27,18 +27,18 @@
 <head>
 <title>Java Collections API Design FAQ</title>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
 </head>
 <body>
-<h2>Java Collections API Design FAQ</h2>
+<h1>Java Collections API Design FAQ</h1>
 <!-- Body text begins here -->
 <hr>
 This document answers frequently asked questions concerning the
 design of the Java collections framework. It is derived from the
 large volume of traffic on the collections-comments alias. It
 serves as a design rationale for the collections framework.
-<h3>Core Interfaces - General Questions</h3>
+<h2>Core Interfaces - General Questions</h2>
 <ol>
 <li><a href="#a1"><b>Why don't you support immutability directly in
 the core collection interfaces so that you can do away with
 <em>optional operations</em> (and
 UnsupportedOperationException)?</b></a></li>
@@ -48,11 +48,11 @@
 <li><a href="#a3"><b>Why isn't there a core interface for "bags"
 (AKA multisets)?</b></a></li>
 <li><a href="#a28"><b>Why didn't you use "Beans-style names" for
 consistency?</b></a></li>
 </ol>
-<h3>Collection Interface</h3>
+<h2>Collection Interface</h2>
 <ol>
 <li><a href="#a5"><b>Why doesn't Collection extend Cloneable and
 Serializable?</b></a></li>
 <li><a href="#a6"><b>Why don't you provide an "apply" method in
 Collection to apply a given method ("upcall") to all the elements
@@ -65,32 +65,32 @@
 <li><a href="#a9"><b>Why don't the concrete implementations in the
 JDK have Enumeration (or Iterator) constructors?</b></a></li>
 <li><a href="#a10"><b>Why don't you provide an Iterator.add
 method?</b></a></li>
 </ol>
-<h3>List Interface</h3>
+<h2>List Interface</h2>
 <ol>
 <li><a href="#a11"><b>Why don't you rename the List interface to
 Sequence; doesn't "list" generally suggest "linked list"? Also,
 doesn't it conflict with java.awt.List?</b></a></li>
 <li><a href="#a12"><b>Why don't you rename List's set method to
 replace, to avoid confusion with Set.</b></a></li>
 </ol>
-<h3>Map Interface</h3>
+<h2>Map Interface</h2>
 <ol>
 <li><a href="#a14"><b>Why doesn't Map extend
 Collection?</b></a></li>
 </ol>
-<h3>Iterator Interface</h3>
+<h2>Iterator Interface</h2>
 <ol>
 <li><a href="#a18"><b>Why doesn't Iterator extend
 Enumeration?</b></a></li>
 <li><a href="#a19"><b>Why don't you provide an Iterator.peek method
 that allows you to look at the next element in an iteration without
 advancing the iterator?</b></a></li>
 </ol>
-<h3>Miscellaneous</h3>
+<h2>Miscellaneous</h2>
 <ol>
 <li><a href="#a23"><b>Why did you write a new collections framework
 instead of adopting JGL (a preexisting collections package from
 ObjectSpace, Inc.) into the JDK?</b></a></li>
 <li><a href="#a26"><b>Why don't you eliminate all of the methods and
@@ -100,11 +100,11 @@
 <li><a href="#a27"><b>Why don't you provide for "observable"
 collections that send out Events when they're
 modified?</b></a></li>
 </ol>
 <hr>
-<h3>Core Interfaces - General Questions</h3>
+<h2>Core Interfaces - General Questions</h2>
 <ol>
 <li><a id="a1"><b>Why don't you support immutability
 directly in the core collection interfaces so that you can do away
 with <em>optional operations</em> (and
 UnsupportedOperationException)?</b></a>
@@ -202,11 +202,11 @@
 "hasNextElement" and "getNextElement", this would no longer be the
 case. Thus, we adopted the "traditional" JDK style rather than the
 Beans style.</li>
 </ol>
 <hr>
-<h3>Collection Interface</h3>
+<h2>Collection Interface</h2>
 <ol>
 <li><a id="a5"><b>Why doesn't Collection extend Cloneable
 and Serializable?</b></a>
 <p>Many Collection implementations (including all of the ones
 provided by the JDK) will have a public clone method, but it would
@@ -262,11 +262,11 @@
 that ListIterator does provide an add operation, as it does
 guarantee the order of the iteration.</p>
 </li>
 </ol>
 <hr>
-<h3>List Interface</h3>
+<h2>List Interface</h2>
 <ol>
 <li><a id="a11"><b>Why don't you rename the List
 interface to Sequence; doesn't "list" generally suggest "linked
 list"? Also, doesn't it conflict with java.awt.List?</b></a>
 <p>People were evenly divided as to whether List suggests linked
@@ -286,11 +286,11 @@
 <p>It was decided that the "set/get" naming convention was strongly
 enough enshrined in the language that we'd stick with it.</p>
 </li>
 </ol>
 <hr>
-<h3>Map Interface</h3>
+<h2>Map Interface</h2>
 <ol>
 <li><a id="a14"><b>Why doesn't Map extend
 Collection?</b></a>
 <p>This was by design. We feel that mappings are not collections
 and collections are not mappings. Thus, it makes little sense for
@@ -312,11 +312,11 @@
 deleted element. That's why we don't have a map view operation on
 Lists.</p>
 </li>
 </ol>
 <hr>
-<h3>Iterator Interface</h3>
+<h2>Iterator Interface</h2>
 <ol>
 <li><a id="a18"><b>Why doesn't Iterator extend
 Enumeration?</b></a>
 <p>We view the method names for Enumeration as unfortunate. They're
 very long, and very frequently used. Given that we were adding a
@@ -333,11 +333,11 @@
 would be rare enough that it isn't worth including in the interface
 that everyone has to implement.</p>
 </li>
 </ol>
 <hr>
-<h3>Miscellaneous</h3>
+<h2>Miscellaneous</h2>
 <ol>
 <li><a id="a23"><b>Why did you write a new collections
 framework instead of adopting JGL (a preexisting collections
 package from ObjectSpace, Inc.) into the JDK?</b></a>
 <p>If you examine the goals for our Collections framework (in the
