diff a/src/java.base/share/classes/java/text/RuleBasedCollator.java b/src/java.base/share/classes/java/text/RuleBasedCollator.java
--- a/src/java.base/share/classes/java/text/RuleBasedCollator.java
+++ b/src/java.base/share/classes/java/text/RuleBasedCollator.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -41,18 +41,18 @@
 import java.text.Normalizer;
 import java.util.Vector;
 import java.util.Locale;
 
 /**
- * The <code>RuleBasedCollator</code> class is a concrete subclass of
- * <code>Collator</code> that provides a simple, data-driven, table
+ * The {@code RuleBasedCollator} class is a concrete subclass of
+ * {@code Collator} that provides a simple, data-driven, table
  * collator.  With this class you can create a customized table-based
- * <code>Collator</code>.  <code>RuleBasedCollator</code> maps
+ * {@code Collator}.  {@code RuleBasedCollator} maps
  * characters to sort keys.
  *
  * <p>
- * <code>RuleBasedCollator</code> has the following restrictions
+ * {@code RuleBasedCollator} has the following restrictions
  * for efficiency (other subclasses may be used for more complex languages) :
  * <ol>
  * <li>If a special collation rule controlled by a &lt;modifier&gt; is
       specified it applies to the whole collator object.
  * <li>All non-mentioned characters are at the end of the
@@ -73,11 +73,11 @@
  *        characters, excluding special characters (that is, common
  *        whitespace characters [0009-000D, 0020] and rule syntax characters
  *        [0021-002F, 003A-0040, 005B-0060, 007B-007E]). If those
  *        characters are desired, you can put them in single quotes
  *        (e.g. ampersand =&gt; '&amp;'). Note that unquoted white space characters
- *        are ignored; e.g. <code>b c</code> is treated as <code>bc</code>.
+ *        are ignored; e.g. {@code b c} is treated as {@code bc}.
  *    <LI><strong>Modifier</strong>: There are currently two modifiers that
  *        turn on special collation rules.
  *        <UL>
  *            <LI>'@' : Turns on backwards sorting of accents (secondary
  *                      differences), as in French.
@@ -144,11 +144,11 @@
  * "black-birds". In the samples for different languages, you see that most
  * accents are ignorable.
  *
  * <p><strong>Normalization and Accents</strong>
  * <p>
- * <code>RuleBasedCollator</code> automatically processes its rule table to
+ * {@code RuleBasedCollator} automatically processes its rule table to
  * include both pre-composed and combining-character versions of
  * accented characters.  Even if the provided rule string contains only
  * base characters and separate combining accent characters, the pre-composed
  * accented characters matching all canonical combinations of characters from
  * the rule string will be entered in the table.
@@ -173,12 +173,12 @@
  *        (e.g. "a &lt; ,b").
  *     <LI>A reset where the text-argument (or an initial substring of the
  *         text-argument) is not already in the sequence.
  *         (e.g. "a &lt; b &amp; e &lt; f")
  * </UL>
- * If you produce one of these errors, a <code>RuleBasedCollator</code> throws
- * a <code>ParseException</code>.
+ * If you produce one of these errors, a {@code RuleBasedCollator} throws
+ * a {@code ParseException}.
  *
  * <p><strong>Examples</strong>
  * <p>Simple:     "&lt; a &lt; b &lt; c &lt; d"
  * <p>Norwegian:  "&lt; a, A &lt; b, B &lt; c, C &lt; d, D &lt; e, E &lt; f, F
  *                 &lt; g, G &lt; h, H &lt; i, I &lt; j, J &lt; k, K &lt; l, L
@@ -189,13 +189,13 @@
  *                 &lt; &#92;u00F8, &#92;u00D8
  *                 &lt; &#92;u00E5 = a&#92;u030A, &#92;u00C5 = A&#92;u030A;
  *                      aa, AA"
  *
  * <p>
- * To create a <code>RuleBasedCollator</code> object with specialized
- * rules tailored to your needs, you construct the <code>RuleBasedCollator</code>
- * with the rules contained in a <code>String</code> object. For example:
+ * To create a {@code RuleBasedCollator} object with specialized
+ * rules tailored to your needs, you construct the {@code RuleBasedCollator}
+ * with the rules contained in a {@code String} object. For example:
  * <blockquote>
  * <pre>
  * String simple = "&lt; a&lt; b&lt; c&lt; d";
  * RuleBasedCollator mySimple = new RuleBasedCollator(simple);
  * </pre>
@@ -216,11 +216,11 @@
  * </blockquote>
  *
  * <p>
  * A new collation rules string can be created by concatenating rules
  * strings. For example, the rules returned by {@link #getRules()} could
- * be concatenated to combine multiple <code>RuleBasedCollator</code>s.
+ * be concatenated to combine multiple {@code RuleBasedCollator}s.
  *
  * <p>
  * The following example demonstrates how to change the order of
  * non-spacing accents,
  * <blockquote>
@@ -271,11 +271,11 @@
      * RuleBasedCollator constructor.  This takes the table rules and builds
      * a collation table out of them.  Please see RuleBasedCollator class
      * description for more details on the collation rule syntax.
      * @see java.util.Locale
      * @param rules the collation rules to build the collation table from.
-     * @exception ParseException A format exception
+     * @throws    ParseException A format exception
      * will be thrown if the build process of the rules fails. For
      * example, build rule "a &lt; ? &lt; d" will cause the constructor to
      * throw the ParseException because the '?' is not quoted.
      */
     public RuleBasedCollator(String rules) throws ParseException {
@@ -288,11 +288,11 @@
      * description for more details on the collation rule syntax.
      * @see java.util.Locale
      * @param rules the collation rules to build the collation table from.
      * @param decomp the decomposition strength used to build the
      * collation table and to perform comparisons.
-     * @exception ParseException A format exception
+     * @throws    ParseException A format exception
      * will be thrown if the build process of the rules fails. For
      * example, build rule "a < ? < d" will cause the constructor to
      * throw the ParseException because the '?' is not quoted.
      */
     RuleBasedCollator(String rules, int decomp) throws ParseException {
@@ -348,11 +348,11 @@
      * Compares the character data stored in two different strings based on the
      * collation rules.  Returns information about whether a string is less
      * than, greater than or equal to another string in a language.
      * This can be overridden in a subclass.
      *
-     * @exception NullPointerException if <code>source</code> or <code>target</code> is null.
+     * @throws    NullPointerException if {@code source} or {@code target} is null.
      */
     public synchronized int compare(String source, String target)
     {
         if (source == null || target == null) {
             throw new NullPointerException();
