diff a/src/java.base/share/classes/java/io/ObjectStreamField.java b/src/java.base/share/classes/java/io/ObjectStreamField.java
--- a/src/java.base/share/classes/java/io/ObjectStreamField.java
+++ b/src/java.base/share/classes/java/io/ObjectStreamField.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -58,14 +58,14 @@
     /** offset of field value in enclosing field group */
     private int offset;
 
     /**
      * Create a Serializable field with the specified type.  This field should
-     * be documented with a <code>serialField</code> tag.
+     * be documented with a {@code serialField} tag.
      *
      * @param   name the name of the serializable field
-     * @param   type the <code>Class</code> object of the serializable field
+     * @param   type the {@code Class} object of the serializable field
      */
     public ObjectStreamField(String name, Class<?> type) {
         this(name, type, false);
     }
 
@@ -195,25 +195,25 @@
     }
 
     /**
      * Get the name of this field.
      *
-     * @return  a <code>String</code> representing the name of the serializable
+     * @return  a {@code String} representing the name of the serializable
      *          field
      */
     public String getName() {
         return name;
     }
 
     /**
      * Get the type of the field.  If the type is non-primitive and this
-     * <code>ObjectStreamField</code> was obtained from a deserialized {@link
-     * ObjectStreamClass} instance, then <code>Object.class</code> is returned.
-     * Otherwise, the <code>Class</code> object for the type of the field is
+     * {@code ObjectStreamField} was obtained from a deserialized {@link
+     * ObjectStreamClass} instance, then {@code Object.class} is returned.
+     * Otherwise, the {@code Class} object for the type of the field is
      * returned.
      *
-     * @return  a <code>Class</code> object representing the type of the
+     * @return  a {@code Class} object representing the type of the
      *          serializable field
      */
     @CallerSensitive
     public Class<?> getType() {
         if (System.getSecurityManager() != null) {
@@ -301,11 +301,11 @@
     public boolean isUnshared() {
         return unshared;
     }
 
     /**
-     * Compare this field with another <code>ObjectStreamField</code>.  Return
+     * Compare this field with another {@code ObjectStreamField}.  Return
      * -1 if this is smaller, 0 if equal, 1 if greater.  Types that are
      * primitives are "smaller" than object types.  If equal, the field names
      * are compared.
      */
     // REMIND: deprecate?
