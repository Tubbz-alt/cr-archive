diff a/src/java.base/share/classes/java/security/BasicPermission.java b/src/java.base/share/classes/java/security/BasicPermission.java
--- a/src/java.base/share/classes/java/security/BasicPermission.java
+++ b/src/java.base/share/classes/java/security/BasicPermission.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -67,10 +67,11 @@
 
 public abstract class BasicPermission extends Permission
     implements java.io.Serializable
 {
 
+    @java.io.Serial
     private static final long serialVersionUID = 6279438298436773498L;
 
     // does this permission have a wildcard at the end?
     private transient boolean wildcard;
 
@@ -258,10 +259,11 @@
 
     /**
      * readObject is called to restore the state of the BasicPermission from
      * a stream.
      */
+    @java.io.Serial
     private void readObject(ObjectInputStream s)
          throws IOException, ClassNotFoundException
     {
         s.defaultReadObject();
         // init is called to initialize the rest of the values.
@@ -303,10 +305,11 @@
 final class BasicPermissionCollection
     extends PermissionCollection
     implements java.io.Serializable
 {
 
+    @java.io.Serial
     private static final long serialVersionUID = 739301742472979399L;
 
     /**
       * Key is name, value is permission. All permission objects in
       * collection must be of the same type.
@@ -344,17 +347,17 @@
      * Adds a permission to the BasicPermissions. The key for the hash is
      * permission.path.
      *
      * @param permission the Permission object to add.
      *
-     * @exception IllegalArgumentException - if the permission is not a
+     * @throws    IllegalArgumentException   if the permission is not a
      *                                       BasicPermission, or if
      *                                       the permission is not of the
      *                                       same Class as the other
      *                                       permissions in this collection.
      *
-     * @exception SecurityException - if this BasicPermissionCollection object
+     * @throws    SecurityException   if this BasicPermissionCollection object
      *                                has been marked readonly
      */
     @Override
     public void add(Permission permission) {
         if (! (permission instanceof BasicPermission))
@@ -476,10 +479,11 @@
      *   contains a BasicPermission with '*' as its permission name.
      * @serialField permClass java.lang.Class
      *   The class to which all BasicPermissions in this
      *   BasicPermissionCollection belongs.
      */
+    @java.io.Serial
     private static final ObjectStreamField[] serialPersistentFields = {
         new ObjectStreamField("permissions", Hashtable.class),
         new ObjectStreamField("all_allowed", Boolean.TYPE),
         new ObjectStreamField("permClass", Class.class),
     };
@@ -490,10 +494,11 @@
     /*
      * Writes the contents of the perms field out as a Hashtable for
      * serialization compatibility with earlier releases. all_allowed
      * and permClass unchanged.
      */
+    @java.io.Serial
     private void writeObject(ObjectOutputStream out) throws IOException {
         // Don't call out.defaultWriteObject()
 
         // Copy perms into a Hashtable
         Hashtable<String, Permission> permissions =
@@ -511,10 +516,11 @@
 
     /**
      * readObject is called to restore the state of the
      * BasicPermissionCollection from a stream.
      */
+    @java.io.Serial
     private void readObject(java.io.ObjectInputStream in)
          throws IOException, ClassNotFoundException
     {
         // Don't call defaultReadObject()
 
