diff a/src/java.base/share/classes/java/security/cert/Certificate.java b/src/java.base/share/classes/java/security/cert/Certificate.java
--- a/src/java.base/share/classes/java/security/cert/Certificate.java
+++ b/src/java.base/share/classes/java/security/cert/Certificate.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -60,10 +60,11 @@
  * @since 1.2
  */
 
 public abstract class Certificate implements java.io.Serializable {
 
+    @java.io.Serial
     private static final long serialVersionUID = -3585440601605666277L;
 
     // the certificate type
     private final String type;
 
@@ -145,27 +146,27 @@
      * form of encoding; for example, X.509 certificates would
      * be encoded as ASN.1 DER.
      *
      * @return the encoded form of this certificate
      *
-     * @exception CertificateEncodingException if an encoding error occurs.
+     * @throws    CertificateEncodingException if an encoding error occurs.
      */
     public abstract byte[] getEncoded()
         throws CertificateEncodingException;
 
     /**
      * Verifies that this certificate was signed using the
      * private key that corresponds to the specified public key.
      *
      * @param key the PublicKey used to carry out the verification.
      *
-     * @exception NoSuchAlgorithmException on unsupported signature
+     * @throws    NoSuchAlgorithmException on unsupported signature
      * algorithms.
-     * @exception InvalidKeyException on incorrect key.
-     * @exception NoSuchProviderException if there's no default provider.
-     * @exception SignatureException on signature errors.
-     * @exception CertificateException on encoding errors.
+     * @throws    InvalidKeyException on incorrect key.
+     * @throws    NoSuchProviderException if there's no default provider.
+     * @throws    SignatureException on signature errors.
+     * @throws    CertificateException on encoding errors.
      */
     public abstract void verify(PublicKey key)
         throws CertificateException, NoSuchAlgorithmException,
         InvalidKeyException, NoSuchProviderException,
         SignatureException;
@@ -177,16 +178,16 @@
      * supplied by the specified provider.
      *
      * @param key the PublicKey used to carry out the verification.
      * @param sigProvider the name of the signature provider.
      *
-     * @exception NoSuchAlgorithmException on unsupported signature
+     * @throws    NoSuchAlgorithmException on unsupported signature
      * algorithms.
-     * @exception InvalidKeyException on incorrect key.
-     * @exception NoSuchProviderException on incorrect provider.
-     * @exception SignatureException on signature errors.
-     * @exception CertificateException on encoding errors.
+     * @throws    InvalidKeyException on incorrect key.
+     * @throws    NoSuchProviderException on incorrect provider.
+     * @throws    SignatureException on signature errors.
+     * @throws    CertificateException on encoding errors.
      */
     public abstract void verify(PublicKey key, String sigProvider)
         throws CertificateException, NoSuchAlgorithmException,
         InvalidKeyException, NoSuchProviderException,
         SignatureException;
@@ -204,16 +205,16 @@
      * and by default throws an {@code UnsupportedOperationException}.
      *
      * @param key the PublicKey used to carry out the verification.
      * @param sigProvider the signature provider.
      *
-     * @exception NoSuchAlgorithmException on unsupported signature
+     * @throws    NoSuchAlgorithmException on unsupported signature
      * algorithms.
-     * @exception InvalidKeyException on incorrect key.
-     * @exception SignatureException on signature errors.
-     * @exception CertificateException on encoding errors.
-     * @exception UnsupportedOperationException if the method is not supported
+     * @throws    InvalidKeyException on incorrect key.
+     * @throws    SignatureException on signature errors.
+     * @throws    CertificateException on encoding errors.
+     * @throws    UnsupportedOperationException if the method is not supported
      * @since 1.8
      */
     public void verify(PublicKey key, Provider sigProvider)
         throws CertificateException, NoSuchAlgorithmException,
         InvalidKeyException, SignatureException {
@@ -238,10 +239,11 @@
      * Alternate Certificate class for serialization.
      * @since 1.3
      */
     protected static class CertificateRep implements java.io.Serializable {
 
+        @java.io.Serial
         private static final long serialVersionUID = -8563758940495660020L;
 
         private String type;
         private byte[] data;
 
@@ -264,10 +266,11 @@
          * @return the resolved Certificate Object
          *
          * @throws java.io.ObjectStreamException if the Certificate
          *      could not be resolved
          */
+        @java.io.Serial
         protected Object readResolve() throws java.io.ObjectStreamException {
             try {
                 CertificateFactory cf = CertificateFactory.getInstance(type);
                 return cf.generateCertificate
                         (new java.io.ByteArrayInputStream(data));
@@ -288,10 +291,11 @@
      *
      * @throws java.io.ObjectStreamException if a new object representing
      * this Certificate could not be created
      * @since 1.3
      */
+    @java.io.Serial
     protected Object writeReplace() throws java.io.ObjectStreamException {
         try {
             return new CertificateRep(type, getEncoded());
         } catch (CertificateException e) {
             throw new java.io.NotSerializableException
