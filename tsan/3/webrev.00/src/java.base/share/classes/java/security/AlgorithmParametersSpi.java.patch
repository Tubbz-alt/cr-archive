diff a/src/java.base/share/classes/java/security/AlgorithmParametersSpi.java b/src/java.base/share/classes/java/security/AlgorithmParametersSpi.java
--- a/src/java.base/share/classes/java/security/AlgorithmParametersSpi.java
+++ b/src/java.base/share/classes/java/security/AlgorithmParametersSpi.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -54,11 +54,11 @@
      * Initializes this parameters object using the parameters
      * specified in {@code paramSpec}.
      *
      * @param paramSpec the parameter specification.
      *
-     * @exception InvalidParameterSpecException if the given parameter
+     * @throws    InvalidParameterSpecException if the given parameter
      * specification is inappropriate for the initialization of this parameter
      * object.
      */
     protected abstract void engineInit(AlgorithmParameterSpec paramSpec)
         throws InvalidParameterSpecException;
@@ -69,11 +69,11 @@
      * The primary decoding format for parameters is ASN.1, if an ASN.1
      * specification for this type of parameters exists.
      *
      * @param params the encoded parameters.
      *
-     * @exception IOException on decoding errors
+     * @throws    IOException on decoding errors
      */
     protected abstract void engineInit(byte[] params)
         throws IOException;
 
     /**
@@ -86,11 +86,11 @@
      *
      * @param params the encoded parameters.
      *
      * @param format the name of the decoding format.
      *
-     * @exception IOException on decoding errors
+     * @throws    IOException on decoding errors
      */
     protected abstract void engineInit(byte[] params, String format)
         throws IOException;
 
     /**
@@ -107,11 +107,11 @@
      * @param paramSpec the specification class in which
      * the parameters should be returned.
      *
      * @return the parameter specification.
      *
-     * @exception InvalidParameterSpecException if the requested parameter
+     * @throws    InvalidParameterSpecException if the requested parameter
      * specification is inappropriate for this parameter object.
      */
     protected abstract
         <T extends AlgorithmParameterSpec>
         T engineGetParameterSpec(Class<T> paramSpec)
@@ -122,11 +122,11 @@
      * The primary encoding format for parameters is ASN.1, if an ASN.1
      * specification for this type of parameters exists.
      *
      * @return the parameters encoded using their primary encoding format.
      *
-     * @exception IOException on encoding errors.
+     * @throws    IOException on encoding errors.
      */
     protected abstract byte[] engineGetEncoded() throws IOException;
 
     /**
      * Returns the parameters encoded in the specified format.
@@ -137,11 +137,11 @@
      *
      * @param format the name of the encoding format.
      *
      * @return the parameters encoded using the specified encoding scheme.
      *
-     * @exception IOException on encoding errors.
+     * @throws    IOException on encoding errors.
      */
     protected abstract byte[] engineGetEncoded(String format)
         throws IOException;
 
     /**
