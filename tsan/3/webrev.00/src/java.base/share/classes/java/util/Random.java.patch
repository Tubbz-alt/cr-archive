diff a/src/java.base/share/classes/java/util/Random.java b/src/java.base/share/classes/java/util/Random.java
--- a/src/java.base/share/classes/java/util/Random.java
+++ b/src/java.base/share/classes/java/util/Random.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1995, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1995, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -71,13 +71,13 @@
  * by security-sensitive applications.
  *
  * @author  Frank Yellin
  * @since   1.0
  */
-public
-class Random implements java.io.Serializable {
+public class Random implements java.io.Serializable {
     /** use serialVersionUID from JDK 1.1 for interoperability */
+    @java.io.Serial
     static final long serialVersionUID = 3905348978240129619L;
 
     /**
      * The internal state associated with this pseudorandom number generator.
      * (The specs for the methods in this class describe the ongoing
@@ -1166,20 +1166,22 @@
      * @serialField    nextNextGaussian double
      *              next Gaussian to be returned
      * @serialField      haveNextNextGaussian boolean
      *              nextNextGaussian is valid
      */
+    @java.io.Serial
     private static final ObjectStreamField[] serialPersistentFields = {
         new ObjectStreamField("seed", Long.TYPE),
         new ObjectStreamField("nextNextGaussian", Double.TYPE),
         new ObjectStreamField("haveNextNextGaussian", Boolean.TYPE)
     };
 
     /**
      * Reconstitute the {@code Random} instance from a stream (that is,
      * deserialize it).
      */
+    @java.io.Serial
     private void readObject(java.io.ObjectInputStream s)
         throws java.io.IOException, ClassNotFoundException {
 
         ObjectInputStream.GetField fields = s.readFields();
 
@@ -1195,10 +1197,11 @@
     }
 
     /**
      * Save the {@code Random} instance to a stream.
      */
+    @java.io.Serial
     private synchronized void writeObject(ObjectOutputStream s)
         throws IOException {
 
         // set the values of the Serializable fields
         ObjectOutputStream.PutField fields = s.putFields();
