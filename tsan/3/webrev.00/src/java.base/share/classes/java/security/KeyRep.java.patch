diff a/src/java.base/share/classes/java/security/KeyRep.java b/src/java.base/share/classes/java/security/KeyRep.java
--- a/src/java.base/share/classes/java/security/KeyRep.java
+++ b/src/java.base/share/classes/java/security/KeyRep.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -55,10 +55,11 @@
  * @since 1.5
  */
 
 public class KeyRep implements Serializable {
 
+    @java.io.Serial
     private static final long serialVersionUID = -4757683898830641853L;
 
     /**
      * Key type.
      *
@@ -118,11 +119,11 @@
      * @param format the encoding format returned from
      *          {@code Key.getFormat()}
      * @param encoded the encoded bytes returned from
      *          {@code Key.getEncoded()}
      *
-     * @exception NullPointerException
+     * @throws    NullPointerException
      *          if type is {@code null},
      *          if algorithm is {@code null},
      *          if format is {@code null},
      *          or if encoded is {@code null}
      */
@@ -155,15 +156,16 @@
      * encoded key bytes, and generates a private key from the spec
      * </ul>
      *
      * @return the resolved Key object
      *
-     * @exception ObjectStreamException if the Type/format
+     * @throws    ObjectStreamException if the Type/format
      *  combination is unrecognized, if the algorithm, key format, or
      *  encoded key bytes are unrecognized/invalid, of if the
      *  resolution of the key fails for any reason
      */
+    @java.io.Serial
     protected Object readResolve() throws ObjectStreamException {
         try {
             if (type == Type.SECRET && RAW.equals(format)) {
                 return new SecretKeySpec(encoded, algorithm);
             } else if (type == Type.PUBLIC && X509.equals(format)) {
