diff a/src/java.base/share/classes/java/net/InetSocketAddress.java b/src/java.base/share/classes/java/net/InetSocketAddress.java
--- a/src/java.base/share/classes/java/net/InetSocketAddress.java
+++ b/src/java.base/share/classes/java/net/InetSocketAddress.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -99,15 +99,24 @@
             return addr == null;
         }
 
         @Override
         public String toString() {
+
+            String formatted;
+
             if (isUnresolved()) {
-                return hostname + ":" + port;
+                formatted = hostname + "/<unresolved>";
             } else {
-                return addr.toString() + ":" + port;
+                formatted = addr.toString();
+                if (addr instanceof Inet6Address) {
+                    int i = formatted.lastIndexOf("/");
+                    formatted = formatted.substring(0, i + 1)
+                            + "[" + formatted.substring(i + 1) + "]";
+                }
             }
+            return formatted + ":" + port;
         }
 
         @Override
         public final boolean equals(Object obj) {
             if (obj == null || !(obj instanceof InetSocketAddressHolder))
@@ -134,10 +143,11 @@
         }
     }
 
     private final transient InetSocketAddressHolder holder;
 
+    @java.io.Serial
     private static final long serialVersionUID = 5076001401234631237L;
 
     private static int checkPort(int port) {
         if (port < 0 || port > 0xFFFF)
             throw new IllegalArgumentException("port out of range:" + port);
@@ -257,15 +267,17 @@
     /**
      * @serialField hostname String
      * @serialField addr InetAddress
      * @serialField port int
      */
+    @java.io.Serial
     private static final ObjectStreamField[] serialPersistentFields = {
          new ObjectStreamField("hostname", String.class),
          new ObjectStreamField("addr", InetAddress.class),
          new ObjectStreamField("port", int.class)};
 
+    @java.io.Serial
     private void writeObject(ObjectOutputStream out)
         throws IOException
     {
         // Don't call defaultWriteObject()
          ObjectOutputStream.PutField pfields = out.putFields();
@@ -273,10 +285,11 @@
          pfields.put("addr", holder.addr);
          pfields.put("port", holder.port);
          out.writeFields();
      }
 
+    @java.io.Serial
     private void readObject(ObjectInputStream in)
         throws IOException, ClassNotFoundException
     {
         // Don't call defaultReadObject()
         ObjectInputStream.GetField oisFields = in.readFields();
@@ -294,10 +307,11 @@
                                                                 oisAddr,
                                                                 oisPort);
         UNSAFE.putReference(this, FIELDS_OFFSET, h);
     }
 
+    @java.io.Serial
     private void readObjectNoData()
         throws ObjectStreamException
     {
         throw new InvalidObjectException("Stream data required");
     }
@@ -360,11 +374,13 @@
 
     /**
      * Constructs a string representation of this InetSocketAddress.
      * This String is constructed by calling toString() on the InetAddress
      * and concatenating the port number (with a colon). If the address
-     * is unresolved then the part before the colon will only contain the hostname.
+     * is an IPv6 address, the IPv6 literal is enclosed in square brackets.
+     * If the address is {@linkplain #isUnresolved() unresolved},
+     * {@code <unresolved>} is displayed in place of the address literal.
      *
      * @return  a string representation of this object.
      */
     @Override
     public String toString() {
