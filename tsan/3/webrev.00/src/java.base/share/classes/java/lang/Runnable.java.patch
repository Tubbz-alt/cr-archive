diff a/src/java.base/share/classes/java/lang/Runnable.java b/src/java.base/share/classes/java/lang/Runnable.java
--- a/src/java.base/share/classes/java/lang/Runnable.java
+++ b/src/java.base/share/classes/java/lang/Runnable.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1994, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -24,27 +24,27 @@
  */
 
 package java.lang;
 
 /**
- * The <code>Runnable</code> interface should be implemented by any
+ * The {@code Runnable} interface should be implemented by any
  * class whose instances are intended to be executed by a thread. The
- * class must define a method of no arguments called <code>run</code>.
+ * class must define a method of no arguments called {@code run}.
  * <p>
  * This interface is designed to provide a common protocol for objects that
  * wish to execute code while they are active. For example,
- * <code>Runnable</code> is implemented by class <code>Thread</code>.
+ * {@code Runnable} is implemented by class {@code Thread}.
  * Being active simply means that a thread has been started and has not
  * yet been stopped.
  * <p>
- * In addition, <code>Runnable</code> provides the means for a class to be
- * active while not subclassing <code>Thread</code>. A class that implements
- * <code>Runnable</code> can run without subclassing <code>Thread</code>
- * by instantiating a <code>Thread</code> instance and passing itself in
- * as the target.  In most cases, the <code>Runnable</code> interface should
- * be used if you are only planning to override the <code>run()</code>
- * method and no other <code>Thread</code> methods.
+ * In addition, {@code Runnable} provides the means for a class to be
+ * active while not subclassing {@code Thread}. A class that implements
+ * {@code Runnable} can run without subclassing {@code Thread}
+ * by instantiating a {@code Thread} instance and passing itself in
+ * as the target.  In most cases, the {@code Runnable} interface should
+ * be used if you are only planning to override the {@code run()}
+ * method and no other {@code Thread} methods.
  * This is important because classes should not be subclassed
  * unless the programmer intends on modifying or enhancing the fundamental
  * behavior of the class.
  *
  * @author  Arthur van Hoff
@@ -53,16 +53,16 @@
  * @since   1.0
  */
 @FunctionalInterface
 public interface Runnable {
     /**
-     * When an object implementing interface <code>Runnable</code> is used
+     * When an object implementing interface {@code Runnable} is used
      * to create a thread, starting the thread causes the object's
-     * <code>run</code> method to be called in that separately executing
+     * {@code run} method to be called in that separately executing
      * thread.
      * <p>
-     * The general contract of the method <code>run</code> is that it may
+     * The general contract of the method {@code run} is that it may
      * take any action whatsoever.
      *
      * @see     java.lang.Thread#run()
      */
     public abstract void run();
