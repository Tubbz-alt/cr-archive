diff a/src/java.base/share/classes/java/lang/module/package-info.java b/src/java.base/share/classes/java/lang/module/package-info.java
--- a/src/java.base/share/classes/java/lang/module/package-info.java
+++ b/src/java.base/share/classes/java/lang/module/package-info.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -32,22 +32,22 @@
  * java.lang.NullPointerException NullPointerException} to be thrown. Additionally,
  * invoking a method with an array or collection containing a {@code null} element
  * will cause a {@code NullPointerException}, unless otherwise specified. </p>
  *
  *
- * <h1><a id="resolution"></a>{@index "Module Resolution"}</h1>
+ * <h2><a id="resolution"></a>{@index "Module Resolution"}</h2>
  *
  * <p> Resolution is the process of computing how modules depend on each other.
  * The process occurs at compile time and run time. </p>
  *
  * <p> Resolution is a two-step process. The first step recursively enumerates
  * the 'requires' directives of a set of root modules. If all the enumerated
  * modules are observable, then the second step computes their readability graph.
  * The readability graph embodies how modules depend on each other, which in
  * turn controls access across module boundaries. </p>
  *
- * <h2> Step 1: Recursive enumeration </h2>
+ * <h3> Step 1: Recursive enumeration </h3>
  *
  * <p> Recursive enumeration takes a set of module names, looks up each of their
  * module declarations, and for each module declaration, recursively enumerates:
  *
  * <ul>
@@ -89,11 +89,11 @@
  *   modifiers. </p></li>
  * </ul>
  *
  * <p> Otherwise, resolution proceeds to step 2. </p>
  *
- * <h2> Step 2: Computing the readability graph </h2>
+ * <h3> Step 2: Computing the readability graph </h3>
  *
  * <p> A 'requires' directive (irrespective of 'transitive') expresses that
  * one module depends on some other module. The effect of the 'transitive'
  * modifier is to cause additional modules to also depend on the other module.
  * If module M 'requires transitive N', then not only does M depend on N, but
@@ -145,22 +145,22 @@
  *   "reads". </p></li>
  * </ul>
  * <p> Otherwise, resolution succeeds, and the result of resolution is the
  * readability graph.
  *
- * <h2> Root modules </h2>
+ * <h3> Root modules </h3>
  *
  * <p> The set of root modules at compile-time is usually the set of modules
  * being compiled. At run-time, the set of root modules is usually the
  * application module specified to the 'java' launcher. When compiling code in
  * the unnamed module, or at run-time when the main application class is loaded
  * from the class path, then the default set of root modules is implementation
  * specific. In the JDK the default set of root modules contains every module
  * that is observable on the upgrade module path or among the system modules,
  * and that exports at least one package without qualification. </p>
  *
- * <h2> Observable modules </h2>
+ * <h3> Observable modules </h3>
  *
  * <p> The set of observable modules at both compile-time and run-time is
  * determined by searching several different paths, and also by searching
  * the compiled modules built in to the environment. The search order is as
  * follows: </p>
@@ -181,19 +181,19 @@
  *   <li><p> The application module path. This path contains compiled definitions
  *   of library and application modules. </p></li>
  *
  * </ol>
  *
- * <h2> 'requires' directives with 'static' modifier </h2>
+ * <h3> 'requires' directives with 'static' modifier </h3>
  *
  * <p> 'requires' directives that have the 'static' modifier express an optional
  * dependence at run time. If a module declares that it 'requires static M' then
  * resolution does not search the observable modules for M to satisfy the dependency.
  * However, if M is recursively enumerated at step 1 then all modules that are
  * enumerated and `requires static M` will read M. </p>
  *
- * <h2> Completeness </h2>
+ * <h3> Completeness </h3>
  *
  * <p> Resolution may be partial at compile-time in that the complete transitive
  * closure may not be required to compile a set of modules. Minimally, the
  * readability graph that is constructed and validated at compile-time includes
  * the modules being compiled, their direct dependences, and all implicitly
