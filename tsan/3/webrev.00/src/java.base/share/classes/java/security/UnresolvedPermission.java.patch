diff a/src/java.base/share/classes/java/security/UnresolvedPermission.java b/src/java.base/share/classes/java/security/UnresolvedPermission.java
--- a/src/java.base/share/classes/java/security/UnresolvedPermission.java
+++ b/src/java.base/share/classes/java/security/UnresolvedPermission.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -105,10 +105,11 @@
 
 public final class UnresolvedPermission extends Permission
 implements java.io.Serializable
 {
 
+    @java.io.Serial
     private static final long serialVersionUID = -4821973115467008846L;
 
     private static final sun.security.util.Debug debug =
         sun.security.util.Debug.getInstance
         ("policy,access", "UnresolvedPermission");
@@ -519,10 +520,11 @@
      * denoting the certificate type, followed by an
      * {@code int} specifying the length of the certificate encoding,
      * followed by the certificate encoding itself which is written out as an
      * array of bytes.
      */
+    @java.io.Serial
     private void writeObject(java.io.ObjectOutputStream oos)
         throws IOException
     {
         oos.defaultWriteObject();
 
@@ -547,10 +549,11 @@
     }
 
     /**
      * Restores this object from a stream (i.e., deserializes it).
      */
+    @java.io.Serial
     private void readObject(java.io.ObjectInputStream ois)
         throws IOException, ClassNotFoundException
     {
         CertificateFactory cf;
         Hashtable<String, CertificateFactory> cfs = null;
@@ -589,11 +592,11 @@
                 }
                 // store the certificate factory so we can reuse it later
                 cfs.put(certType, cf);
             }
             // parse the certificate
-            byte[] encoded = IOUtils.readNBytes(ois, ois.readInt());
+            byte[] encoded = IOUtils.readExactlyNBytes(ois, ois.readInt());
             ByteArrayInputStream bais = new ByteArrayInputStream(encoded);
             try {
                 certList.add(cf.generateCertificate(bais));
             } catch (CertificateException ce) {
                 throw new IOException(ce.getMessage());
