diff a/src/java.base/share/classes/java/lang/RuntimePermission.java b/src/java.base/share/classes/java/lang/RuntimePermission.java
--- a/src/java.base/share/classes/java/lang/RuntimePermission.java
+++ b/src/java.base/share/classes/java/lang/RuntimePermission.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -178,24 +178,24 @@
  * any thread in the system.</td>
  * </tr>
  *
  * <tr>
  *   <th scope="row">stopThread</th>
- *   <td>Stopping of threads via calls to the Thread <code>stop</code>
+ *   <td>Stopping of threads via calls to the Thread {@code stop}
  * method</td>
  *   <td>This allows code to stop any thread in the system provided that it is
  * already granted permission to access that thread.
  * This poses as a threat, because that code may corrupt the system by
  * killing existing threads.</td>
  * </tr>
  *
  * <tr>
  *   <th scope="row">modifyThreadGroup</th>
  *   <td>modification of thread groups, e.g., via calls to ThreadGroup
- * <code>destroy</code>, <code>getParent</code>, <code>resume</code>,
- * <code>setDaemon</code>, <code>setMaxPriority</code>, <code>stop</code>,
- * and <code>suspend</code> methods</td>
+ * {@code destroy}, {@code getParent}, {@code resume},
+ * {@code setDaemon}, {@code setMaxPriority}, {@code stop},
+ * and {@code suspend} methods</td>
  *   <td>This allows an attacker to create thread groups and
  * set their run priority.</td>
  * </tr>
  *
  * <tr>
@@ -244,27 +244,27 @@
  * </tr>
  *
  * <tr>
  *   <th scope="row">accessClassInPackage.{package name}</th>
  *   <td>Access to the specified package via a class loader's
- * <code>loadClass</code> method when that class loader calls
- * the SecurityManager <code>checkPackageAccess</code> method</td>
+ * {@code loadClass} method when that class loader calls
+ * the SecurityManager {@code checkPackageAccess} method</td>
  *   <td>This gives code access to classes in packages
  * to which it normally does not have access. Malicious code
  * may use these classes to help in its attempt to compromise
  * security in the system.</td>
  * </tr>
  *
  * <tr>
  *   <th scope="row">defineClassInPackage.{package name}</th>
  *   <td>Definition of classes in the specified package, via a class
- * loader's <code>defineClass</code> method when that class loader calls
- * the SecurityManager <code>checkPackageDefinition</code> method.</td>
+ * loader's {@code defineClass} method when that class loader calls
+ * the SecurityManager {@code checkPackageDefinition} method.</td>
  *   <td>This grants code permission to define a class
  * in a particular package. This is dangerous because malicious
  * code with this permission may define rogue classes in
- * trusted packages like <code>java.security</code> or <code>java.lang</code>,
+ * trusted packages like {@code java.security} or {@code java.lang},
  * for example.</td>
  * </tr>
  *
  * <tr>
  *   <th scope="row">defineClass</th>
@@ -398,10 +398,11 @@
  * @since 1.2
  */
 
 public final class RuntimePermission extends BasicPermission {
 
+    @java.io.Serial
     private static final long serialVersionUID = 7399184964622342223L;
 
     /**
      * Creates a new RuntimePermission with the specified name.
      * The name is the symbolic name of the RuntimePermission, such as
@@ -409,12 +410,12 @@
      * may appear at the end of the name, following a ".", or by itself, to
      * signify a wildcard match.
      *
      * @param name the name of the RuntimePermission.
      *
-     * @throws NullPointerException if <code>name</code> is <code>null</code>.
-     * @throws IllegalArgumentException if <code>name</code> is empty.
+     * @throws NullPointerException if {@code name} is {@code null}.
+     * @throws IllegalArgumentException if {@code name} is empty.
      */
 
     public RuntimePermission(String name)
     {
         super(name);
@@ -426,12 +427,12 @@
      * actions String is currently unused and should be null.
      *
      * @param name the name of the RuntimePermission.
      * @param actions should be null.
      *
-     * @throws NullPointerException if <code>name</code> is <code>null</code>.
-     * @throws IllegalArgumentException if <code>name</code> is empty.
+     * @throws NullPointerException if {@code name} is {@code null}.
+     * @throws IllegalArgumentException if {@code name} is empty.
      */
 
     public RuntimePermission(String name, String actions)
     {
         super(name, actions);
