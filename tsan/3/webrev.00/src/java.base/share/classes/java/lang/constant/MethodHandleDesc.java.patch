diff a/src/java.base/share/classes/java/lang/constant/MethodHandleDesc.java b/src/java.base/share/classes/java/lang/constant/MethodHandleDesc.java
--- a/src/java.base/share/classes/java/lang/constant/MethodHandleDesc.java
+++ b/src/java.base/share/classes/java/lang/constant/MethodHandleDesc.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -68,10 +68,12 @@
      *                         if the request is for a method invocation, or
      *                         describing the invocation type, if the request is
      *                         for a field or constructor
      * @return the {@linkplain MethodHandleDesc}
      * @throws NullPointerException if any of the non-ignored arguments are null
+     * @throws IllegalArgumentException if the descriptor string is not a valid
+     * method or field descriptor
      * @jvms 4.4.8 The CONSTANT_MethodHandle_info Structure
      * @jvms 4.2.2 Unqualified Names
      * @jvms 4.3.2 Field Descriptors
      * @jvms 4.3.3 Method Descriptors
      */
@@ -175,11 +177,11 @@
      * @param owner a {@link ClassDesc} describing the class containing the
      *              constructor
      * @param paramTypes {@link ClassDesc}s describing the parameter types of
      *                   the constructor
      * @return the {@linkplain MethodHandleDesc}
-     * @throws NullPointerException if any of the arguments are null
+     * @throws NullPointerException if any argument or its contents is {@code null}
      */
     static DirectMethodHandleDesc ofConstructor(ClassDesc owner,
                                                 ClassDesc... paramTypes) {
         return MethodHandleDesc.ofMethod(CONSTRUCTOR, owner, ConstantDescs.DEFAULT_NAME,
                                          MethodTypeDesc.of(CD_void, paramTypes));
@@ -189,10 +191,11 @@
      * Returns a {@linkplain MethodHandleDesc} that describes this method handle
      * adapted to a different type, as if by {@link MethodHandle#asType(MethodType)}.
      *
      * @param type a {@link MethodHandleDesc} describing the new method type
      * @return a {@linkplain MethodHandleDesc} for the adapted method handle
+     * @throws NullPointerException if the argument is {@code null}
      */
     default MethodHandleDesc asType(MethodTypeDesc type) {
         return (invocationType().equals(type)) ? this : new AsTypeMethodHandleDesc(this, type);
     }
 
