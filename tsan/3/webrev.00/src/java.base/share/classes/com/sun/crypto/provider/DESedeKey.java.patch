diff a/src/java.base/share/classes/com/sun/crypto/provider/DESedeKey.java b/src/java.base/share/classes/com/sun/crypto/provider/DESedeKey.java
--- a/src/java.base/share/classes/com/sun/crypto/provider/DESedeKey.java
+++ b/src/java.base/share/classes/com/sun/crypto/provider/DESedeKey.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -41,10 +41,11 @@
  *
  */
 
 final class DESedeKey implements SecretKey {
 
+    @java.io.Serial
     static final long serialVersionUID = 2463986565756745178L;
 
     private byte[] key;
 
     /**
@@ -134,10 +135,11 @@
 
     /**
      * readObject is called to restore the state of this key from
      * a stream.
      */
+    @java.io.Serial
     private void readObject(java.io.ObjectInputStream s)
          throws java.io.IOException, ClassNotFoundException
     {
         s.defaultReadObject();
         key = key.clone();
@@ -149,10 +151,11 @@
      * @return the standard KeyRep object to be serialized
      *
      * @throws java.io.ObjectStreamException if a new object representing
      * this DESede key could not be created
      */
+    @java.io.Serial
     private Object writeReplace() throws java.io.ObjectStreamException {
         return new KeyRep(KeyRep.Type.SECRET,
                         getAlgorithm(),
                         getFormat(),
                         getEncoded());
