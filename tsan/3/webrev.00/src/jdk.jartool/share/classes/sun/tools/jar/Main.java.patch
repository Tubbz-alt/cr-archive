diff a/src/jdk.jartool/share/classes/sun/tools/jar/Main.java b/src/jdk.jartool/share/classes/sun/tools/jar/Main.java
--- a/src/jdk.jartool/share/classes/sun/tools/jar/Main.java
+++ b/src/jdk.jartool/share/classes/sun/tools/jar/Main.java
@@ -148,11 +148,11 @@
      * iflag: generate jar index
      * nflag: Perform jar normalization at the end
      * pflag: preserve/don't strip leading slash and .. component from file name
      * dflag: print module descriptor
      */
-    boolean cflag, uflag, xflag, tflag, vflag, flag0, Mflag, iflag, nflag, pflag, dflag;
+    boolean cflag, uflag, xflag, tflag, vflag, flag0, Mflag, iflag, pflag, dflag;
 
     boolean suppressDeprecateMsg = false;
 
     /* To support additional GNU Style informational options */
     Consumer<PrintWriter> info;
@@ -316,38 +316,10 @@
 
                 tmpFile = createTemporaryFile(tmpbase, ".jar");
                 try (OutputStream out = new FileOutputStream(tmpFile)) {
                     create(new BufferedOutputStream(out, 4096), manifest);
                 }
-                if (nflag) {
-                    if (!suppressDeprecateMsg) {
-                        warn(formatMsg("warn.flag.is.deprecated", "-n"));
-                    }
-                    File packFile = createTemporaryFile(tmpbase, ".pack");
-                    try {
-                        java.util.jar.Pack200.Packer packer = java.util.jar.Pack200.newPacker();
-                        Map<String, String> p = packer.properties();
-                        p.put(java.util.jar.Pack200.Packer.EFFORT, "1"); // Minimal effort to conserve CPU
-                        try (JarFile jarFile = new JarFile(tmpFile.getCanonicalPath());
-                             OutputStream pack = new FileOutputStream(packFile))
-                        {
-                            packer.pack(jarFile, pack);
-                        }
-                        if (tmpFile.exists()) {
-                            tmpFile.delete();
-                        }
-                        tmpFile = createTemporaryFile(tmpbase, ".jar");
-                        try (OutputStream out = new FileOutputStream(tmpFile);
-                             JarOutputStream jos = new JarOutputStream(out))
-                        {
-                            java.util.jar.Pack200.Unpacker unpacker = java.util.jar.Pack200.newUnpacker();
-                            unpacker.unpack(packFile, jos);
-                        }
-                    } finally {
-                        Files.deleteIfExists(packFile.toPath());
-                    }
-                }
                 validateAndClose(tmpFile);
             } else if (uflag) {
                 File inputFile = null;
                 if (fname != null) {
                     inputFile = new File(fname);
@@ -585,13 +557,10 @@
                             }
                             // do not increase the counter, files will contain rootjar
                             rootjar = args[count++];
                             iflag = true;
                             break;
-                        case 'n':
-                            nflag = true;
-                            break;
                         case 'e':
                             ename = args[count++];
                             break;
                         case 'P':
                             pflag = true;
@@ -942,15 +911,14 @@
                 foundManifest = true;
                 if (newManifest != null) {
                     // Don't read from the newManifest InputStream, as we
                     // might need it below, and we can't re-read the same data
                     // twice.
-                    FileInputStream fis = new FileInputStream(mname);
-                    boolean ambiguous = isAmbiguousMainClass(new Manifest(fis));
-                    fis.close();
-                    if (ambiguous) {
-                        return false;
+                    try (FileInputStream fis = new FileInputStream(mname)) {
+                        if (isAmbiguousMainClass(new Manifest(fis))) {
+                            return false;
+                        }
                     }
                 }
                 // Update the manifest.
                 Manifest old = new Manifest(zis);
                 if (newManifest != null) {
