diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/Print.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/Print.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/Print.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/Print.java
@@ -105,17 +105,27 @@
         PrintWriter pw = new PrintWriter(System.out, false, Charset.forName("UTF-8"));
         Predicate<EventType> eventFilter = null;
         int stackDepth = 5;
         EventPrintWriter eventWriter = null;
         int optionCount = options.size();
+        boolean foundEventFilter = false;
+        boolean foundCategoryFilter = false;
         while (optionCount > 0) {
             if (acceptFilterOption(options, "--events")) {
+                if (foundEventFilter) {
+                    throw new UserSyntaxException("use --events event1,event2,event3 to include multiple events");
+                }
+                foundEventFilter = true;
                 String filter = options.remove();
                 warnForWildcardExpansion("--events", filter);
                 eventFilter = addEventFilter(filter, eventFilter);
             }
             if (acceptFilterOption(options, "--categories")) {
+                if (foundCategoryFilter) {
+                    throw new UserSyntaxException("use --categories category1,category2 to include multiple categories");
+                }
+                foundCategoryFilter = true;
                 String filter = options.remove();
                 warnForWildcardExpansion("--categories", filter);
                 eventFilter = addCategoryFilter(filter, eventFilter);
             }
             if (acceptOption(options, "--stack-depth")) {
@@ -135,10 +145,12 @@
             if (acceptFormatterOption(options, eventWriter, "--xml")) {
                 eventWriter = new XMLWriter(pw);
             }
             if (optionCount == options.size()) {
                 // No progress made
+                checkCommonError(options, "--event", "--events");
+                checkCommonError(options, "--category", "--categories");
                 throw new UserSyntaxException("unknown option " + options.peek());
             }
             optionCount = options.size();
         }
         if (eventWriter == null) {
@@ -155,10 +167,16 @@
             couldNotReadError(file, ioe);
         }
         pw.flush();
     }
 
+    private void checkCommonError(Deque<String> options, String typo, String correct) throws UserSyntaxException {
+       if (typo.equals(options.peek())) {
+           throw new UserSyntaxException("unknown option " + typo + ", did you mean " + correct + "?");
+       }
+    }
+
     private static boolean acceptFormatterOption(Deque<String> options, EventPrintWriter eventWriter, String expected) throws UserSyntaxException {
         if (expected.equals(options.peek())) {
             if (eventWriter != null) {
                 throw new UserSyntaxException("only one format can be specified at a time");
             }
@@ -177,11 +195,11 @@
         return x -> filter != null && filter.test(x);
     }
 
     private static Predicate<EventType> addCategoryFilter(String filterText, Predicate<EventType> eventFilter) throws UserSyntaxException {
         List<String> filters = explodeFilter(filterText);
-        return recurseIfPossible(eventType -> {
+        Predicate<EventType> newFilter = recurseIfPossible(eventType -> {
             for (String category : eventType.getCategoryNames()) {
                 for (String filter : filters) {
                     if (match(category, filter)) {
                         return true;
                     }
@@ -190,10 +208,11 @@
                     }
                 }
             }
             return false;
         });
+        return eventFilter == null ? newFilter : eventFilter.or(newFilter);
     }
 
     private static String acronomify(String multipleWords) {
         boolean newWord = true;
         String acronym = "";
@@ -208,11 +227,11 @@
         return acronym;
     }
 
     private static Predicate<EventType> addEventFilter(String filterText, final Predicate<EventType> eventFilter) throws UserSyntaxException {
         List<String> filters = explodeFilter(filterText);
-        return recurseIfPossible(eventType -> {
+        Predicate<EventType> newFilter = recurseIfPossible(eventType -> {
             for (String filter : filters) {
                 String fullEventName = eventType.getName();
                 if (match(fullEventName, filter)) {
                     return true;
                 }
@@ -221,10 +240,11 @@
                     return true;
                 }
             }
             return false;
         });
+        return eventFilter == null ? newFilter : eventFilter.or(newFilter);
     }
 
     private static boolean match(String text, String filter) {
         if (filter.length() == 0) {
             // empty filter string matches if string is empty
