diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/PrettyWriter.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/PrettyWriter.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/PrettyWriter.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/PrettyWriter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -548,24 +548,11 @@
             Duration d = (Duration) value;
             if (d.getSeconds() == Long.MIN_VALUE && d.getNano() == 0)  {
                 println("N/A");
                 return true;
             }
-            double s = d.toNanosPart() / 1000_000_000.0 + d.toSecondsPart();
-            if (s < 1.0) {
-                if (s < 0.001) {
-                    println(String.format("%.3f", s * 1_000_000) + " us");
-                } else {
-                    println(String.format("%.3f", s * 1_000) + " ms");
-                }
-            } else {
-                if (s < 1000.0) {
-                    println(String.format("%.3f", s) + " s");
-                } else {
-                    println(String.format("%.0f", s) + " s");
-                }
-            }
+            println(Utils.formatDuration(d));
             return true;
         }
         if (value instanceof OffsetDateTime) {
             OffsetDateTime odt = (OffsetDateTime) value;
             if (odt.equals(OffsetDateTime.MIN))  {
