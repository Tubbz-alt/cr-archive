diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/WriteableUserPath.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/WriteableUserPath.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/WriteableUserPath.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/WriteableUserPath.java
@@ -48,11 +48,12 @@
  */
 public final class WriteableUserPath {
     private final AccessControlContext controlContext;
     private final Path original;
     private final Path real;
-    private final String text;
+    private final String realPathText;
+    private final String originalText;
 
     // Not to ensure security, but to help
     // against programming errors
     private volatile boolean inPrivileged;
 
@@ -66,12 +67,13 @@
         }
         // will throw if non-writeable
         BufferedWriter fw = Files.newBufferedWriter(path);
         fw.close();
         this.original = path;
+        this.originalText = path.toString();
         this.real = path.toRealPath();
-        this.text = real.toString();
+        this.realPathText = real.toString();
     }
 
     /**
      * Returns a potentially malicious path where the user may have implemented
      * their own version of Path. This method should never be called in an
@@ -83,18 +85,28 @@
     public Path getPotentiallyMaliciousOriginal() {
         return original;
     }
 
     /**
-     * Returns a string representation of the path.
+     * Returns a string representation of the real path.
      *
      * @return path as text
      */
-    public String getText() {
-        return text;
+    public String getRealPathText() {
+        return realPathText;
     }
 
+    /**
+     * Returns a string representation of the original path.
+     *
+     * @return path as text
+     */
+    public String getOriginalText() {
+        return originalText;
+    }
+
+
     /**
      * Returns a potentially malicious path where the user may have implemented
      * their own version of Path. This method should never be called in an
      * unsafe context and the Path value should never be passed along to other
      * methods.
