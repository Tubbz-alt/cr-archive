diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/MetadataDescriptor.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/MetadataDescriptor.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/MetadataDescriptor.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/MetadataDescriptor.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,20 +23,20 @@
  * questions.
  */
 
 package jdk.jfr.internal;
 
-import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.Locale;
 import java.util.TimeZone;
 
 import jdk.jfr.EventType;
+import jdk.jfr.internal.consumer.RecordingInput;
 
 /**
  * Metadata about a chunk
  */
 public final class MetadataDescriptor {
@@ -212,10 +212,11 @@
     final List<EventType> eventTypes = new ArrayList<>();
     final Collection<Type> types = new ArrayList<>();
     long gmtOffset;
     String locale;
     Element root;
+    public long metadataId;
 
     // package private
     MetadataDescriptor() {
     }
 
@@ -250,11 +251,11 @@
 
     public String getLocale() {
         return locale;
     }
 
-    public static MetadataDescriptor read(DataInput input) throws IOException {
+    public static MetadataDescriptor read(RecordingInput input) throws IOException {
         MetadataReader r = new MetadataReader(input);
         return r.getDescriptor();
     }
 
     static void write(List<Type> types, DataOutput output) throws IOException {
