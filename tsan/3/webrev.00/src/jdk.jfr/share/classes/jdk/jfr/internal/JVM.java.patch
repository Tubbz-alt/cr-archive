diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/JVM.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/JVM.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/JVM.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/JVM.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -28,10 +28,11 @@
 import java.io.IOException;
 import java.util.List;
 
 import jdk.internal.HotSpotIntrinsicCandidate;
 import jdk.jfr.Event;
+import jdk.jfr.internal.handlers.EventHandler;
 
 /**
  * Interface against the JVM.
  *
  */
@@ -41,11 +42,10 @@
     // JVM signals file changes by doing Object#notifu on this object
     static final Object FILE_DELTA_CHANGE = new Object();
 
     static final long RESERVED_CLASS_ID_LIMIT = 400;
 
-    private volatile boolean recording;
     private volatile boolean nativeOK;
 
     private static native void registerNatives();
 
     static {
@@ -66,17 +66,39 @@
     }
 
     private JVM() {
     }
 
+    /**
+     * Marks current chunk as final
+     * <p>
+     * This allows streaming clients to read the chunk header and
+     * close the stream when no more data will be written into
+     * the current repository.
+     */
+    public native void markChunkFinal();
+
     /**
      * Begin recording events
      *
      * Requires that JFR has been started with {@link #createNativeJFR()}
      */
     public native void beginRecording();
 
+    /**
+     * Return true if the JVM is recording
+     */
+    public native boolean isRecording();
+
+    /**
+     * End recording events, which includes flushing data in thread buffers
+     *
+     * Requires that JFR has been started with {@link #createNativeJFR()}
+     *
+     */
+    public native void endRecording();
+
     /**
      * Return ticks
      *
      * @return the time, in ticks
      *
@@ -95,17 +117,11 @@
      *
      * @return true if the event was committed
      */
     public native boolean emitEvent(long eventTypeId, long timestamp, long when);
 
-    /**
-     * End recording events, which includes flushing data in thread buffers
-     *
-     * Requires that JFR has been started with {@link #createNativeJFR()}
-     *
-     */
-    public native void endRecording();
+
 
     /**
      * Return a list of all classes deriving from {@link jdk.internal.event.Event}
      *
      * @return list of event classes.
@@ -186,10 +202,12 @@
 
     /**
      * Call to invoke event tagging and retransformation of the passed classes
      *
      * @param classes
+     *
+     * @throws IllegalStateException if wrong JVMTI phase.
      */
     public native synchronized void retransformClasses(Class<?>[] classes);
 
     /**
      * Enable event
@@ -268,11 +286,10 @@
      * recording can be set to true/false with {@link #beginRecording()}
      * {@link #endRecording()}
      *
      * @param file the file where data should be written, or null if it should
      *        not be copied out (in memory).
-     *
      * @throws IOException
      */
     public native void setOutput(String file);
 
     /**
@@ -353,24 +370,10 @@
      *
      * @param binary representation of descriptor
      */
     public native void storeMetadataDescriptor(byte[] bytes);
 
-    public void endRecording_() {
-        endRecording();
-        recording = false;
-    }
-
-    public void beginRecording_() {
-        beginRecording();
-        recording = true;
-    }
-
-    public boolean isRecording() {
-        return recording;
-    }
-
     /**
      * If the JVM supports JVM TI and retransformation has not been disabled this
      * method will return true. This flag can not change during the lifetime of
      * the JVM.
      *
@@ -457,10 +460,20 @@
     /**
      * Flushes the EventWriter for this thread.
      */
     public static native boolean flush(EventWriter writer, int uncommittedSize, int requestedSize);
 
+    /**
+     * Flushes all thread buffers to disk and the constant pool data needed to read
+     * them.
+     * <p>
+     * When the method returns, the chunk header should be updated with valid
+     * pointers to the metadata event, last check point event, correct file size and
+     * the generation id.
+     *
+     */
+    public native void flush();
     /**
      * Sets the location of the disk repository, to be used at an emergency
      * dump.
      *
      * @param dirText
@@ -521,6 +534,53 @@
      * Test if a chunk rotation is warranted.
      *
      * @return if it is time to perform a chunk rotation
      */
     public native boolean shouldRotateDisk();
+
+    /**
+     * Exclude a thread from the jfr system
+     *
+     */
+    public native void exclude(Thread thread);
+
+    /**
+     * Include a thread back into the jfr system
+     *
+     */
+    public native void include(Thread thread);
+
+    /**
+     * Test if a thread ius currently excluded from the jfr system.
+     *
+     * @return is thread currently excluded
+     */
+    public native boolean isExcluded(Thread thread);
+
+    /**
+     * Get the start time in nanos from the header of the current chunk
+     *
+     *@return start time of the recording in nanos, -1 in case of in-memory
+     */
+    public native long getChunkStartNanos();
+
+    /**
+     * Stores an EventHandler to the eventHandler field of an event class.
+     *
+     * @param eventClass the class, not {@code null}
+     *
+     * @param handler the handler, may be {@code null}
+     *
+     * @return if the field could be set
+     */
+    public native boolean setHandler(Class<? extends jdk.internal.event.Event> eventClass, EventHandler handler);
+
+    /**
+     * Retrieves the EventHandler for an event class.
+     *
+     * @param eventClass the class, not {@code null}
+     *
+     * @return the handler, may be {@code null}
+     */
+    public native Object getHandler(Class<? extends jdk.internal.event.Event> eventClass);
+
 }
