diff a/src/java.compiler/share/classes/javax/lang/model/util/AbstractElementVisitor6.java b/src/java.compiler/share/classes/javax/lang/model/util/AbstractElementVisitor6.java
--- a/src/java.compiler/share/classes/javax/lang/model/util/AbstractElementVisitor6.java
+++ b/src/java.compiler/share/classes/javax/lang/model/util/AbstractElementVisitor6.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -64,10 +64,11 @@
  * @author Peter von der Ah&eacute;
  *
  * @see AbstractElementVisitor7
  * @see AbstractElementVisitor8
  * @see AbstractElementVisitor9
+ * @see AbstractElementVisitor14
  * @since 1.6
  */
 @SupportedSourceVersion(RELEASE_6)
 public abstract class AbstractElementVisitor6<R, P> implements ElementVisitor<R, P> {
     /**
@@ -141,6 +142,25 @@
     @Override
     public R visitModule(ModuleElement e, P p) {
         // Use implementation from interface default method
         return ElementVisitor.super.visitModule(e, p);
     }
+
+    /**
+     * {@inheritDoc}
+     *
+     * @implSpec Visits a {@code RecordComponentElement} by calling {@code
+     * visitUnknown}.
+     *
+     * @param e  {@inheritDoc}
+     * @param p  {@inheritDoc}
+     * @return   {@inheritDoc}
+     *
+     * @since 14
+     */
+    @SuppressWarnings("preview")
+    @Override
+    public R visitRecordComponent(RecordComponentElement e, P p) {
+        // Use implementation from interface default method
+        return ElementVisitor.super.visitRecordComponent(e, p);
+    }
 }
