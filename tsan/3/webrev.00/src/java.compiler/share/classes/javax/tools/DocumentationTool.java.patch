diff a/src/java.compiler/share/classes/javax/tools/DocumentationTool.java b/src/java.compiler/share/classes/javax/tools/DocumentationTool.java
--- a/src/java.compiler/share/classes/javax/tools/DocumentationTool.java
+++ b/src/java.compiler/share/classes/javax/tools/DocumentationTool.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -51,11 +51,11 @@
      *
      * @param out a Writer for additional output from the tool;
      * use {@code System.err} if {@code null}
      *
      * @param fileManager a file manager; if {@code null} use the
-     * tool's standard filemanager
+     * tool's standard file manager
      *
      * @param diagnosticListener a diagnostic listener; if {@code null}
      * use the tool's default method for reporting diagnostics
      *
      * @param docletClass a class providing the necessary methods required
@@ -115,11 +115,11 @@
     /**
      * Interface representing a future for a documentation task.  The
      * task has not yet started.  To start the task, call
      * the {@linkplain #call call} method.
      *
-     * <p>Before calling the call method, additional aspects of the
+     * <p>Before calling the {@code call} method, additional aspects of the
      * task can be configured, for example, by calling the
      * {@linkplain #setLocale setLocale} method.
      */
     interface DocumentationTask extends Callable<Boolean> {
         /**
@@ -147,11 +147,11 @@
         void setLocale(Locale locale);
 
         /**
          * Performs this documentation task.  The task may only
          * be performed once.  Subsequent calls to this method throw
-         * IllegalStateException.
+         * {@code IllegalStateException}.
          *
          * @return true if and only all the files were processed without errors;
          * false otherwise
          *
          * @throws RuntimeException if an unrecoverable error occurred
@@ -159,10 +159,11 @@
          * {@linkplain Throwable#getCause() cause} will be the error
          * in user code.
          *
          * @throws IllegalStateException if called more than once
          */
+        @Override
         Boolean call();
     }
 
     /**
      * Locations specific to {@link DocumentationTool}.
