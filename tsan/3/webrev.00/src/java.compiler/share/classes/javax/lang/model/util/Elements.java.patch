diff a/src/java.compiler/share/classes/javax/lang/model/util/Elements.java b/src/java.compiler/share/classes/javax/lang/model/util/Elements.java
--- a/src/java.compiler/share/classes/javax/lang/model/util/Elements.java
+++ b/src/java.compiler/share/classes/javax/lang/model/util/Elements.java
@@ -29,10 +29,11 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.LinkedHashSet;
+import java.util.Objects;
 
 import javax.lang.model.AnnotatedConstruct;
 import javax.lang.model.element.*;
 
 
@@ -451,34 +452,49 @@
     /**
      * Returns the package of an element.  The package of a package is
      * itself.
      * The package of a module is {@code null}.
      *
-     * @param type the element being examined
+     * The package of a top-level type is its {@linkplain
+     * TypeElement#getEnclosingElement enclosing package}. Otherwise,
+     * the package of an element is equal to the package of the
+     * {@linkplain Element#getEnclosingElement enclosing element}.
+     *
+     * @param e the element being examined
      * @return the package of an element
      */
-    PackageElement getPackageOf(Element type);
+    PackageElement getPackageOf(Element e);
 
     /**
      * Returns the module of an element.  The module of a module is
      * itself.
-     * If there is no module for the element, null is returned. One situation where there is
-     * no module for an element is if the environment does not include modules, such as
-     * an annotation processing environment configured for
-     * a {@linkplain
+     *
+     * If a package has a module as its {@linkplain
+     * PackageElement#getEnclosingElement enclosing element}, that
+     * module is the module of the package. If the enclosing element
+     * of a package is {@code null}, {@code null} is returned for the
+     * package's module.
+     *
+     * (One situation where a package may have a {@code null} module
+     * is if the environment does not include modules, such as an
+     * annotation processing environment configured for a {@linkplain
      * javax.annotation.processing.ProcessingEnvironment#getSourceVersion
-     * source version} without modules.
+     * source version} without modules.)
+     *
+     * Otherwise, the module of an element is equal to the module
+     * {@linkplain #getPackageOf(Element) of the package} of the
+     * element.
      *
      * @implSpec The default implementation of this method returns
      * {@code null}.
      *
-     * @param type the element being examined
+     * @param e the element being examined
      * @return the module of an element
      * @since 9
      * @spec JPMS
      */
-    default ModuleElement getModuleOf(Element type) {
+    default ModuleElement getModuleOf(Element e) {
         return null;
     }
 
     /**
      * Returns all members of a type element, whether inherited or
@@ -612,6 +628,44 @@
      * @return {@code true} if the element is a functional interface, {@code false} otherwise
      * @jls 9.8 Functional Interfaces
      * @since 1.8
      */
     boolean isFunctionalInterface(TypeElement type);
+
+    /**
+     * {@preview Associated with records, a preview feature of the Java language.
+     *
+     *           This method is associated with <i>records</i>, a preview
+     *           feature of the Java language. Preview features
+     *           may be removed in a future release, or upgraded to permanent
+     *           features of the Java language.}
+     *
+     * Returns the record component for the given accessor. Returns null if the
+     * given method is not a record component accessor.
+     *
+     * @implSpec The default implementation of this method checks if the element
+     * enclosing the accessor has kind {@link ElementKind#RECORD RECORD} if that is
+     * the case, then all the record components on the accessor's enclosing element
+     * are retrieved by invoking {@link ElementFilter#recordComponentsIn(Iterable)}.
+     * If the accessor of at least one of the record components retrieved happen to
+     * be equal to the accessor passed as a parameter to this method, then that
+     * record component is returned, in any other case {@code null} is returned.
+     *
+     * @param accessor the method for which the record component should be found.
+     * @return the record component, or null if the given method is not an record
+     * component accessor
+     * @since 14
+     */
+    @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.RECORDS,
+                                 essentialAPI=false)
+    @SuppressWarnings("preview")
+    default RecordComponentElement recordComponentFor(ExecutableElement accessor) {
+        if (accessor.getEnclosingElement().getKind() == ElementKind.RECORD) {
+            for (RecordComponentElement rec : ElementFilter.recordComponentsIn(accessor.getEnclosingElement().getEnclosedElements())) {
+                if (Objects.equals(rec.getAccessor(), accessor)) {
+                    return rec;
+                }
+            }
+        }
+        return null;
+    }
 }
