diff a/src/java.compiler/share/classes/javax/tools/JavaCompiler.java b/src/java.compiler/share/classes/javax/tools/JavaCompiler.java
--- a/src/java.compiler/share/classes/javax/tools/JavaCompiler.java
+++ b/src/java.compiler/share/classes/javax/tools/JavaCompiler.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -234,11 +234,11 @@
      * parameter.
      *
      * @param out a Writer for additional output from the compiler;
      * use {@code System.err} if {@code null}
      * @param fileManager a file manager; if {@code null} use the
-     * compiler's standard filemanager
+     * compiler's standard file manager
      * @param diagnosticListener a diagnostic listener; if {@code
      * null} use the compiler's default method for reporting
      * diagnostics
      * @param options compiler options, {@code null} means no options
      * @param classes names of classes to be processed by annotation
@@ -288,11 +288,11 @@
     /**
      * Interface representing a future for a compilation task.  The
      * compilation task has not yet started.  To start the task, call
      * the {@linkplain #call call} method.
      *
-     * <p>Before calling the call method, additional aspects of the
+     * <p>Before calling the {@code call} method, additional aspects of the
      * task can be configured, for example, by calling the
      * {@linkplain #setProcessors setProcessors} method.
      */
     interface CompilationTask extends Callable<Boolean> {
         /**
@@ -329,11 +329,11 @@
         void setLocale(Locale locale);
 
         /**
          * Performs this compilation task.  The compilation may only
          * be performed once.  Subsequent calls to this method throw
-         * IllegalStateException.
+         * {@code IllegalStateException}.
          *
          * @return true if and only all the files compiled without errors;
          * false otherwise
          *
          * @throws RuntimeException if an unrecoverable error occurred
