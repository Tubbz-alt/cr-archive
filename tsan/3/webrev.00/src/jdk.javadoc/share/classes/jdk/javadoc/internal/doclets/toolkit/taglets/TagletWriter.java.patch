diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/TagletWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/TagletWriter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/TagletWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/TagletWriter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -24,12 +24,13 @@
  */
 
 package jdk.javadoc.internal.doclets.toolkit.taglets;
 
 import java.util.List;
-
 import javax.lang.model.element.Element;
+import javax.lang.model.element.ElementKind;
+import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeMirror;
 
 import com.sun.source.doctree.DocTree;
 import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;
@@ -43,12 +44,10 @@
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
- *
- * @author Jamie Ho
  */
 
 public abstract class TagletWriter {
 
     /**
@@ -73,11 +72,11 @@
      * @return the output of the taglet.
      */
     protected abstract Content codeTagOutput(Element element, DocTree tag);
 
     /**
-     * Return the output for a {@index...} tag.
+     * Return the output for a {@code {@index...}} tag.
      *
      * @param tag the tag.
      * @return the output of the taglet.
      */
     protected abstract Content indexTagOutput(Element element, DocTree tag);
@@ -190,13 +189,14 @@
     /**
      * Return the header for the throws tag.
      *
      * @param element
      * @param throwsTag the throws tag.
+     * @param substituteType instantiated type of a generic type-variable, or null.
      * @return the output of the throws tag.
      */
-    protected abstract Content throwsTagOutput(Element element, DocTree throwsTag);
+    protected abstract Content throwsTagOutput(Element element, DocTree throwsTag, TypeMirror substituteType);
 
     /**
      * Return the output for the throws tag.
      *
      * @param throwsType the throws type.
@@ -214,31 +214,52 @@
      * @return the output of the value tag.
      */
     protected abstract Content valueTagOutput(VariableElement field,
         String constantVal, boolean includeLink);
 
+    /**
+     * Return the main type element of the current page or null for pages that don't have one.
+     *
+     * @return the type element of the current page or null.
+     */
+    protected abstract TypeElement getCurrentPageElement();
+
     /**
      * Given an output object, append to it the tag documentation for
      * the given member.
      *
      * @param tagletManager the manager that manages the taglets.
-     * @param element the Doc that we are print tags for.
+     * @param element the element that we are print tags for.
      * @param taglets the taglets to print.
      * @param writer the writer that will generate the output strings.
      * @param output the output buffer to store the output in.
      */
-    public static void genTagOutput(TagletManager tagletManager, Element element,
-            List<Taglet> taglets, TagletWriter writer, Content output) {
+    public static void genTagOutput(TagletManager tagletManager,
+                                    Element element,
+                                    List<Taglet> taglets,
+                                    TagletWriter writer,
+                                    Content output)
+    {
         Utils utils = writer.configuration().utils;
         tagletManager.checkTags(element, utils.getBlockTags(element), false);
         tagletManager.checkTags(element, utils.getFullBody(element), true);
         for (Taglet taglet : taglets) {
             if (utils.isTypeElement(element) && taglet instanceof ParamTaglet) {
-                //The type parameters are documented in a special section away
-                //from the tag info, so skip here.
+                // The type parameters and state components are documented in a special
+                // section away from the tag info, so skip here.
                 continue;
             }
+            if (element.getKind() == ElementKind.MODULE && taglet instanceof BaseTaglet) {
+                BaseTaglet t = (BaseTaglet) taglet;
+                switch (t.getTagKind()) {
+                    // @uses and @provides are handled separately, so skip here.
+                    // See ModuleWriterImpl.computeModulesData
+                    case USES:
+                    case PROVIDES:
+                        continue;
+                }
+            }
             if (taglet instanceof DeprecatedTaglet) {
                 //Deprecated information is documented "inline", not in tag info
                 //section.
                 continue;
             }
@@ -250,11 +271,11 @@
             try {
                 currentOutput = taglet.getTagletOutput(element, writer);
             } catch (UnsupportedTagletOperationException utoe) {
                 //The taglet does not take a member as an argument.  Let's try
                 //a single tag.
-                List<? extends DocTree> tags = utils.getBlockTags(element, taglet.getName());
+                List<? extends DocTree> tags = utils.getBlockTags(element, taglet);
                 if (!tags.isEmpty()) {
                     currentOutput = taglet.getTagletOutput(element, tags.get(0), writer);
                 }
             }
             if (currentOutput != null) {
@@ -265,18 +286,22 @@
     }
     /**
      * Given an inline tag, return its output.
      * @param holder
      * @param tagletManager The taglet manager for the current doclet.
-     * @param holderTag The tag this holds this inline tag.  Null if there
-     * is no tag that holds it.
+     * @param holderTag The tag that holds this inline tag, or {@code null} if
+     *                  there is no tag that holds it.
      * @param inlineTag The inline tag to be documented.
      * @param tagletWriter The taglet writer to write the output.
      * @return The output of the inline tag.
      */
-    public static Content getInlineTagOutput(Element holder, TagletManager tagletManager,
-            DocTree holderTag, DocTree inlineTag, TagletWriter tagletWriter) {
+    public static Content getInlineTagOutput(Element holder,
+                                             TagletManager tagletManager,
+                                             DocTree holderTag,
+                                             DocTree inlineTag,
+                                             TagletWriter tagletWriter)
+    {
         List<Taglet> definedTags = tagletManager.getInlineTaglets();
         CommentHelper ch = tagletWriter.configuration().utils.getCommentHelper(holder);
         final String inlineTagName = ch.getTagName(inlineTag);
         //This is a custom inline tag.
         for (Taglet definedTag : definedTags) {
