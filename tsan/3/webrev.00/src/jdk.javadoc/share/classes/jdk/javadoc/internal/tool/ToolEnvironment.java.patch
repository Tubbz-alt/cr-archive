diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/ToolEnvironment.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/ToolEnvironment.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/ToolEnvironment.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/ToolEnvironment.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -70,14 +70,10 @@
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
- *
- * @author Robert Field
- * @author Neal Gafter (rewrite)
- * @author Scott Seligman (generics)
  */
 public class ToolEnvironment {
     protected static final Context.Key<ToolEnvironment> ToolEnvKey = new Context.Key<>();
 
     public static ToolEnvironment instance(Context context) {
@@ -160,13 +156,13 @@
         elements =  JavacElements.instance(context);
         typeutils = JavacTypes.instance(context);
         elementToTreePath = new HashMap<>();
     }
 
-    public void initialize(Map<ToolOption, Object> toolOpts) {
-        this.quiet = (boolean)toolOpts.getOrDefault(ToolOption.QUIET, false);
-        this.ignoreSourceErrors = (boolean)toolOpts.getOrDefault(ToolOption.IGNORE_SOURCE_ERRORS, false);
+    public void initialize(ToolOptions options) {
+        this.quiet = options.quiet();
+        this.ignoreSourceErrors = options.ignoreSourceErrors();
     }
 
     /**
      * Load a class by qualified name.
      */
