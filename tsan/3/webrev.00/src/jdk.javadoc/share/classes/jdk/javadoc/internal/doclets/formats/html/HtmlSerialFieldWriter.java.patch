diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlSerialFieldWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlSerialFieldWriter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlSerialFieldWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/HtmlSerialFieldWriter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -51,13 +51,10 @@
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
- *
- * @author Joe Fialli
- * @author Bhavesh Patel (Modified)
  */
 public class HtmlSerialFieldWriter extends FieldWriterImpl
         implements SerializedFormWriter.SerialFieldWriter {
 
     public HtmlSerialFieldWriter(SubWriterHolderWriter writer, TypeElement typeElement) {
@@ -71,49 +68,48 @@
     /**
      * Return the header for serializable fields section.
      *
      * @return a content tree for the header
      */
+    @Override
     public Content getSerializableFieldsHeader() {
         HtmlTree ul = new HtmlTree(HtmlTag.UL);
         ul.setStyle(HtmlStyle.blockList);
         return ul;
     }
 
     /**
      * Return the header for serializable fields content section.
      *
-     * @param isLastContent true if the cotent being documented is the last content.
+     * @param isLastContent true if the content being documented is the last content.
      * @return a content tree for the header
      */
+    @Override
     public Content getFieldsContentHeader(boolean isLastContent) {
         HtmlTree li = new HtmlTree(HtmlTag.LI);
-        if (isLastContent)
-            li.setStyle(HtmlStyle.blockListLast);
-        else
-            li.setStyle(HtmlStyle.blockList);
+        li.setStyle(HtmlStyle.blockList);
         return li;
     }
 
     /**
      * Add serializable fields.
      *
      * @param heading the heading for the section
-     * @param serializableFieldsTree the tree to be added to the serializable fileds
+     * @param serializableFieldsTree the tree to be added to the serializable fields
      *        content tree
      * @return a content tree for the serializable fields content
      */
+    @Override
     public Content getSerializableFields(String heading, Content serializableFieldsTree) {
-        HtmlTree li = new HtmlTree(HtmlTag.LI);
-        li.setStyle(HtmlStyle.blockList);
+        HtmlTree section = HtmlTree.SECTION(HtmlStyle.detail);
         if (serializableFieldsTree.isValid()) {
             Content headingContent = new StringContent(heading);
             Content serialHeading = HtmlTree.HEADING(Headings.SerializedForm.CLASS_SUBHEADING, headingContent);
-            li.add(serialHeading);
-            li.add(serializableFieldsTree);
+            section.add(serialHeading);
+            section.add(serializableFieldsTree);
         }
-        return li;
+        return HtmlTree.LI(HtmlStyle.blockList, section);
     }
 
     @Override
     public void addMemberHeader(TypeElement fieldType, String fieldTypeStr,
             String fieldDimensions, String fieldName, Content contentTree) {
@@ -151,20 +147,22 @@
      * Add the deprecated information for this member.
      *
      * @param field the field to document.
      * @param contentTree the tree to which the deprecated info will be added
      */
+    @Override
     public void addMemberDeprecatedInfo(VariableElement field, Content contentTree) {
         addDeprecatedInfo(field, contentTree);
     }
 
     /**
      * Add the description text for this member.
      *
      * @param field the field to document.
      * @param contentTree the tree to which the deprecated info will be added
      */
+    @Override
     public void addMemberDescription(VariableElement field, Content contentTree) {
         if (!utils.getFullBody(field).isEmpty()) {
             writer.addInlineComment(field, contentTree);
         }
         List<? extends DocTree> tags = utils.getBlockTags(field, DocTree.Kind.SERIAL);
@@ -177,13 +175,14 @@
      * Add the description text for this member represented by the tag.
      *
      * @param serialFieldTag the field to document (represented by tag)
      * @param contentTree the tree to which the deprecated info will be added
      */
+    @Override
     public void addMemberDescription(VariableElement field, DocTree serialFieldTag, Content contentTree) {
         CommentHelper ch = utils.getCommentHelper(field);
-        List<? extends DocTree> description = ch.getDescription(configuration, serialFieldTag);
+        List<? extends DocTree> description = ch.getDescription(serialFieldTag);
         if (!description.isEmpty()) {
             Content serialFieldContent = new RawHtml(ch.getText(description));
             Content div = HtmlTree.DIV(HtmlStyle.block, serialFieldContent);
             contentTree.add(div);
         }
@@ -193,10 +192,11 @@
      * Add the tag information for this member.
      *
      * @param field the field to document.
      * @param contentTree the tree to which the member tags info will be added
      */
+    @Override
     public void addMemberTags(VariableElement field, Content contentTree) {
         Content tagContent = new ContentBuilder();
         TagletWriter.genTagOutput(configuration.tagletManager, field,
                 configuration.tagletManager.getBlockTaglets(field),
                 writer.getTagletWriterInstance(false), tagContent);
@@ -211,12 +211,13 @@
      * for deprecation info, comment or tags, do not print overview details.
      *
      * @param field the field to check overview details for.
      * @return true if overview details need to be printed
      */
+    @Override
     public boolean shouldPrintOverview(VariableElement field) {
-        if (!configuration.nocomment) {
+        if (!options.noComment()) {
             if(!utils.getFullBody(field).isEmpty() ||
                     writer.hasSerializationOverviewTags(field))
                 return true;
         }
         if (utils.isDeprecated(field))
