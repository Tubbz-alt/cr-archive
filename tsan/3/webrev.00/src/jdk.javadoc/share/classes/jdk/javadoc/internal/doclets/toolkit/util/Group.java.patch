diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Group.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Group.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Group.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/Group.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -55,12 +55,10 @@
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
- *
- * @author Atul M Dambalkar
  */
 public class Group {
 
     /**
      * Map of regular expressions with the corresponding group name.
@@ -94,10 +92,11 @@
      * Since we need to sort the keys in the reverse order(longest key first),
      * the compare method in the implementing class is doing the reverse
      * comparison.
      */
     private static class MapKeyComparator implements Comparator<String> {
+        @Override
         public int compare(String key1, String key2) {
             return key2.length() - key1.length();
         }
     }
 
@@ -239,12 +238,12 @@
      */
     public Map<String, SortedSet<ModuleElement>> groupModules(Set<ModuleElement> modules) {
         Map<String, SortedSet<ModuleElement>> groupModuleMap = new HashMap<>();
         String defaultGroupName =
             (elementNameGroupMap.isEmpty() && regExpGroupMap.isEmpty())?
-                configuration.getResources().getText("doclet.Modules") :
-                configuration.getResources().getText("doclet.Other_Modules");
+                configuration.getDocResources().getText("doclet.Modules") :
+                configuration.getDocResources().getText("doclet.Other_Modules");
         // if the user has not used the default group name, add it
         if (!groupList.contains(defaultGroupName)) {
             groupList.add(defaultGroupName);
         }
         for (ModuleElement mdl : modules) {
@@ -281,12 +280,12 @@
      */
     public Map<String, SortedSet<PackageElement>> groupPackages(Set<PackageElement> packages) {
         Map<String, SortedSet<PackageElement>> groupPackageMap = new HashMap<>();
         String defaultGroupName =
             (elementNameGroupMap.isEmpty() && regExpGroupMap.isEmpty())?
-                configuration.getResources().getText("doclet.Packages") :
-                configuration.getResources().getText("doclet.Other_Packages");
+                configuration.getDocResources().getText("doclet.Packages") :
+                configuration.getDocResources().getText("doclet.Other_Packages");
         // if the user has not used the default group name, add it
         if (!groupList.contains(defaultGroupName)) {
             groupList.add(defaultGroupName);
         }
         for (PackageElement pkg : packages) {
