diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Head.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Head.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Head.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Head.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -26,19 +26,15 @@
 package jdk.javadoc.internal.doclets.formats.html.markup;
 
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Calendar;
 import java.util.Collections;
 import java.util.Date;
-import java.util.GregorianCalendar;
 import java.util.List;
-import java.util.TimeZone;
 
 import jdk.javadoc.internal.doclets.toolkit.Content;
-import jdk.javadoc.internal.doclets.toolkit.util.DocFile;
 import jdk.javadoc.internal.doclets.toolkit.util.DocPath;
 import jdk.javadoc.internal.doclets.toolkit.util.DocPaths;
 
 /**
  * A builder for HTML HEAD elements.
@@ -50,40 +46,39 @@
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
  */
 public class Head {
     private final String docletVersion;
+    private final Date generatedDate;
     private final DocPath pathToRoot;
     private String title;
     private String charset;
     private final List<String> keywords;
     private String description;
     private String generator;
     private boolean showTimestamp;
-    private boolean useModuleDirectories;
-    private DocFile mainStylesheetFile;
-    private List<DocFile> additionalStylesheetFiles = Collections.emptyList();
+    private DocPath mainStylesheet;
+    private List<DocPath> additionalStylesheets = Collections.emptyList();
     private boolean index;
     private Script mainBodyScript;
     private final List<Script> scripts;
     private final List<Content> extraContent;
     private boolean addDefaultScript = true;
     private DocPath canonicalLink;
 
-    private static final Calendar calendar = new GregorianCalendar(TimeZone.getDefault());
-
     /**
      * Creates a {@code Head} object, for a given file and HTML version.
      * The file is used to help determine the relative paths to stylesheet and script files.
      * The HTML version is used to determine the the appropriate form of a META element
      * recording the time the file was created.
      * The doclet version should also be provided for recording in the file.
      * @param path the path for the file that will include this HEAD element
      * @param docletVersion a string identifying the doclet version
      */
-    public Head(DocPath path, String docletVersion) {
+    public Head(DocPath path, String docletVersion, Date generatedDate) {
         this.docletVersion = docletVersion;
+        this.generatedDate = generatedDate;
         pathToRoot = path.parent().invert();
         keywords = new ArrayList<>();
         scripts = new ArrayList<>();
         extraContent = new ArrayList<>();
     }
@@ -147,38 +142,29 @@
      * element, depending on the HTML version specified when this object was created.
      *
      * @param timestamp true if timestamps should be be added.
      * @return this object
      */
-    // For temporary backwards compatibiility, if this method is not called,
+    // For temporary backwards compatibility, if this method is not called,
     // no 'Generated by javadoc' comment will be added.
     public Head setTimestamp(boolean timestamp) {
         showTimestamp = timestamp;
         return this;
     }
 
     /**
      * Sets the main and any additional stylesheets to be listed in the HEAD element.
+     * The paths for the stylesheets must be relative to the root of the generated
+     * documentation hierarchy.
      *
      * @param main the main stylesheet, or null to use the default
      * @param additional a list of any additional stylesheets to be included
      * @return  this object
      */
-    public Head setStylesheets(DocFile main, List<DocFile> additional) {
-        this.mainStylesheetFile = main;
-        this.additionalStylesheetFiles = additional;
-        return this;
-    }
-
-    /**
-     * Sets whether the module directories should be used. This is used to set the JavaScript variable.
-     *
-     * @param useModuleDirectories true if the module directories should be used
-     * @return  this object
-     */
-    public Head setUseModuleDirectories(boolean useModuleDirectories) {
-        this.useModuleDirectories = useModuleDirectories;
+    public Head setStylesheets(DocPath main, List<DocPath> additional) {
+        this.mainStylesheet = main;
+        this.additionalStylesheets = additional;
         return this;
     }
 
     /**
      * Sets whether or not to include the supporting scripts and stylesheets for the
@@ -223,11 +209,11 @@
 
     /**
      * Specifies a value for a
      * <a href="https://en.wikipedia.org/wiki/Canonical_link_element">canonical link</a>
      * in the {@code <head>} element.
-     * @param link
+     * @param link the value for the canonical link
      */
     public void setCanonicalLink(DocPath link) {
         this.canonicalLink = link;
     }
 
@@ -246,23 +232,21 @@
      * Returns the HTML for the HEAD element.
      *
      * @return the HTML
      */
     public Content toContent() {
-        Date now = showTimestamp ? calendar.getTime() : null;
-
         HtmlTree tree = new HtmlTree(HtmlTag.HEAD);
-        tree.add(getGeneratedBy(showTimestamp, now));
+        tree.add(getGeneratedBy(showTimestamp, generatedDate));
         tree.add(HtmlTree.TITLE(title));
 
         if (charset != null) { // compatibility; should this be allowed?
             tree.add(HtmlTree.META("Content-Type", "text/html", charset));
         }
 
         if (showTimestamp) {
             SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
-            tree.add(HtmlTree.META("dc.created", dateFormat.format(now)));
+            tree.add(HtmlTree.META("dc.created", dateFormat.format(generatedDate)));
         }
 
         if (description != null) {
             tree.add(HtmlTree.META("description", description));
         }
@@ -296,20 +280,17 @@
         }
         return new Comment(text);
     }
 
     private void addStylesheets(HtmlTree tree) {
-        DocPath mainStylesheet;
-        if (mainStylesheetFile == null) {
+        if (mainStylesheet == null) {
             mainStylesheet = DocPaths.STYLESHEET;
-        } else {
-            mainStylesheet = DocPath.create(mainStylesheetFile.getName());
         }
         addStylesheet(tree, mainStylesheet);
 
-        for (DocFile file : additionalStylesheetFiles) {
-            addStylesheet(tree, DocPath.create(file.getName()));
+        for (DocPath path : additionalStylesheets) {
+            addStylesheet(tree, path);
         }
 
         if (index) {
             addStylesheet(tree, DocPaths.JQUERY_FILES.resolve(DocPaths.JQUERY_STYLESHEET_FILE));
         }
@@ -328,20 +309,13 @@
             if (pathToRoot != null && mainBodyScript != null) {
                 String ptrPath = pathToRoot.isEmpty() ? "." : pathToRoot.getPath();
                 mainBodyScript.append("var pathtoroot = ")
                         .appendStringLiteral(ptrPath + "/")
                         .append(";\n")
-                        .append("var useModuleDirectories = " + useModuleDirectories + ";\n")
-                        .append("loadScripts(document, \'script\');");
+                        .append("loadScripts(document, 'script');");
             }
-            addJQueryFile(tree, DocPaths.JSZIP_MIN);
-            addJQueryFile(tree, DocPaths.JSZIPUTILS_MIN);
-            tree.add(new RawHtml("<!--[if IE]>"));
-            addJQueryFile(tree, DocPaths.JSZIPUTILS_IE_MIN);
-            tree.add(new RawHtml("<![endif]-->"));
-            addJQueryFile(tree, DocPaths.JQUERY_JS_3_3);
-            addJQueryFile(tree, DocPaths.JQUERY_MIGRATE);
+            addJQueryFile(tree, DocPaths.JQUERY_JS_3_4);
             addJQueryFile(tree, DocPaths.JQUERY_JS);
         }
         for (Script script : scripts) {
             tree.add(script.asContent());
         }
