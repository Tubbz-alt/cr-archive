diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AnnotationTypeFieldWriterImpl.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AnnotationTypeFieldWriterImpl.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AnnotationTypeFieldWriterImpl.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AnnotationTypeFieldWriterImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,22 +23,21 @@
  * questions.
  */
 
 package jdk.javadoc.internal.doclets.formats.html;
 
-import jdk.javadoc.internal.doclets.formats.html.markup.Table;
-
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
 
-import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;
+import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;
-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTag;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;
 import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;
+import jdk.javadoc.internal.doclets.formats.html.markup.Table;
+import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;
 import jdk.javadoc.internal.doclets.toolkit.AnnotationTypeFieldWriter;
 import jdk.javadoc.internal.doclets.toolkit.Content;
 import jdk.javadoc.internal.doclets.toolkit.MemberSummaryWriter;
 
 /**
@@ -46,12 +45,10 @@
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
- *
- * @author Bhavesh Patel
  */
 public class AnnotationTypeFieldWriterImpl extends AbstractMemberWriter
     implements AnnotationTypeFieldWriter, MemberSummaryWriter {
 
     /**
@@ -63,140 +60,100 @@
     public AnnotationTypeFieldWriterImpl(SubWriterHolderWriter writer,
             TypeElement annotationType) {
         super(writer, annotationType);
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public Content getMemberSummaryHeader(TypeElement typeElement,
-            Content memberSummaryTree) {
+                                          Content memberSummaryTree) {
         memberSummaryTree.add(
                 MarkerComments.START_OF_ANNOTATION_TYPE_FIELD_SUMMARY);
-        Content memberTree = writer.getMemberTreeHeader();
-        writer.addSummaryHeader(this, typeElement, memberTree);
+        Content memberTree = new ContentBuilder();
+        writer.addSummaryHeader(this, memberTree);
         return memberTree;
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public Content getMemberTreeHeader() {
         return writer.getMemberTreeHeader();
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public void addMemberTree(Content memberSummaryTree, Content memberTree) {
-        writer.addMemberTree(memberSummaryTree, memberTree);
+        writer.addMemberTree(HtmlStyle.fieldSummary,
+                SectionName.ANNOTATION_TYPE_FIELD_SUMMARY, memberSummaryTree, memberTree);
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public void addAnnotationFieldDetailsMarker(Content memberDetails) {
         memberDetails.add(MarkerComments.START_OF_ANNOTATION_TYPE_FIELD_DETAILS);
     }
 
-    /**
-     * {@inheritDoc}
-     */
-    public void addAnnotationDetailsTreeHeader(TypeElement typeElement,
-            Content memberDetailsTree) {
+    @Override
+    public Content getAnnotationDetailsTreeHeader() {
+        Content memberDetailsTree = new ContentBuilder();
         if (!writer.printedAnnotationFieldHeading) {
-            memberDetailsTree.add(links.createAnchor(
-                    SectionName.ANNOTATION_TYPE_FIELD_DETAIL));
             Content heading = HtmlTree.HEADING(Headings.TypeDeclaration.DETAILS_HEADING,
                     contents.fieldDetailsLabel);
             memberDetailsTree.add(heading);
             writer.printedAnnotationFieldHeading = true;
         }
+        return memberDetailsTree;
     }
 
-    /**
-     * {@inheritDoc}
-     */
-    public Content getAnnotationDocTreeHeader(Element member,
-            Content annotationDetailsTree) {
-        annotationDetailsTree.add(links.createAnchor(name(member)));
-        Content annotationDocTree = writer.getMemberTreeHeader();
-        Content heading = new HtmlTree(Headings.TypeDeclaration.MEMBER_HEADING);
-        heading.add(name(member));
+    @Override
+    public Content getAnnotationDocTreeHeader(Element member) {
+        Content annotationDocTree = new ContentBuilder();
+        Content heading = new HtmlTree(Headings.TypeDeclaration.MEMBER_HEADING,
+                new StringContent(name(member)));
         annotationDocTree.add(heading);
-        return annotationDocTree;
+        return HtmlTree.SECTION(HtmlStyle.detail, annotationDocTree).setId(name(member));
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public Content getSignature(Element member) {
-        Content pre = new HtmlTree(HtmlTag.PRE);
-        writer.addAnnotationInfo(member, pre);
-        addModifiers(member, pre);
-        Content link =
-                writer.getLink(new LinkInfoImpl(configuration,
-                        LinkInfoImpl.Kind.MEMBER, getType(member)));
-        pre.add(link);
-        pre.add(Contents.SPACE);
-        if (configuration.linksource) {
-            Content memberName = new StringContent(name(member));
-            writer.addSrcLink(member, memberName, pre);
-        } else {
-            addName(name(member), pre);
-        }
-        return pre;
+        return new MemberSignature(member)
+                .addType(getType(member))
+                .toContent();
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public void addDeprecated(Element member, Content annotationDocTree) {
         addDeprecatedInfo(member, annotationDocTree);
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public void addComments(Element member, Content annotationDocTree) {
         addComment(member, annotationDocTree);
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public void addTags(Element member, Content annotationDocTree) {
         writer.addTagsInfo(member, annotationDocTree);
     }
 
-    /**
-     * {@inheritDoc}
-     */
-    public Content getAnnotationDetails(Content annotationDetailsTree) {
-        return HtmlTree.SECTION(getMemberTree(annotationDetailsTree));
+    @Override
+    public Content getAnnotationDetails(Content annotationDetailsTreeHeader, Content annotationDetailsTree) {
+        Content annotationDetails = new ContentBuilder();
+        annotationDetails.add(annotationDetailsTreeHeader);
+        annotationDetails.add(annotationDetailsTree);
+        return getMemberTree(HtmlTree.SECTION(HtmlStyle.fieldDetails, annotationDetails)
+                .setId(SectionName.ANNOTATION_TYPE_FIELD_DETAIL.getName()));
     }
 
-    /**
-     * {@inheritDoc}
-     */
-    public Content getAnnotationDoc(Content annotationDocTree,
-            boolean isLastContent) {
-        return getMemberTree(annotationDocTree, isLastContent);
+    @Override
+    public Content getAnnotationDoc(Content annotationDocTree) {
+        return getMemberTree(annotationDocTree);
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     public void addSummaryLabel(Content memberTree) {
-        Content label = HtmlTree.HEADING(Headings.TypeDeclaration.SUMMARY_HEADING,
+        HtmlTree label = HtmlTree.HEADING(Headings.TypeDeclaration.SUMMARY_HEADING,
                 contents.fieldSummaryLabel);
         memberTree.add(label);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public TableHeader getSummaryTableHeader(Element member) {
         return new TableHeader(contents.modifierAndTypeLabel, contents.fields,
                 contents.descriptionLabel);
     }
@@ -213,71 +170,43 @@
                 .setHeader(header)
                 .setRowScopeColumn(1)
                 .setColumnStyles(HtmlStyle.colFirst, HtmlStyle.colSecond, HtmlStyle.colLast);
     }
 
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public void addSummaryAnchor(TypeElement typeElement, Content memberTree) {
-        memberTree.add(links.createAnchor(
-                SectionName.ANNOTATION_TYPE_FIELD_SUMMARY));
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public void addInheritedSummaryAnchor(TypeElement typeElement, Content inheritedTree) {
-    }
-
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public void addInheritedSummaryLabel(TypeElement typeElement, Content inheritedTree) {
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     protected void addSummaryLink(LinkInfoImpl.Kind context, TypeElement typeElement, Element member,
             Content tdSummary) {
         Content memberLink = HtmlTree.SPAN(HtmlStyle.memberNameLink,
                 writer.getDocLink(context, member, name(member), false));
         Content code = HtmlTree.CODE(memberLink);
         tdSummary.add(code);
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     protected void addInheritedSummaryLink(TypeElement typeElement,
             Element member, Content linksTree) {
         //Not applicable.
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     protected void addSummaryType(Element member, Content tdSummaryType) {
         addModifierAndType(member, getType(member), tdSummaryType);
     }
 
-    /**
-     * {@inheritDoc}
-     */
+    @Override
     protected Content getDeprecatedLink(Element member) {
         return writer.getDocLink(LinkInfoImpl.Kind.MEMBER,
                 member, utils.getFullyQualifiedName(member));
     }
 
     private TypeMirror getType(Element member) {
         if (utils.isConstructor(member))
             return null;
         if (utils.isExecutableElement(member))
-            return utils.getReturnType((ExecutableElement)member);
+            return utils.getReturnType(typeElement, (ExecutableElement)member);
         return member.asType();
     }
 }
