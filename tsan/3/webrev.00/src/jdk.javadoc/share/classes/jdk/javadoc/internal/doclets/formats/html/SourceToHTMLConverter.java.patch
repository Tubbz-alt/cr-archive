diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SourceToHTMLConverter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SourceToHTMLConverter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SourceToHTMLConverter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SourceToHTMLConverter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -29,10 +29,11 @@
 
 import java.io.*;
 import java.util.List;
 
 import javax.lang.model.element.Element;
+import javax.lang.model.element.ModuleElement;
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
 import javax.tools.FileObject;
 
 import jdk.javadoc.doclet.DocletEnvironment;
@@ -58,13 +59,10 @@
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
- *
- * @author Jamie Ho
- * @author Bhavesh Patel (Modified)
  */
 public class SourceToHTMLConverter {
 
     /**
      * The number of trailing blank lines at the end of the page.
@@ -77,10 +75,11 @@
      * New line to be added to the documentation.
      */
     private static final String NEW_LINE = DocletConstants.NL;
 
     private final HtmlConfiguration configuration;
+    private final HtmlOptions options;
     private final Messages messages;
     private final Resources resources;
     private final Utils utils;
 
     private final DocletEnvironment docEnv;
@@ -94,12 +93,13 @@
     private DocPath relativePath = DocPath.empty;
 
     private SourceToHTMLConverter(HtmlConfiguration configuration, DocletEnvironment rd,
                                   DocPath outputdir) {
         this.configuration  = configuration;
+        this.options = configuration.getOptions();
         this.messages = configuration.getMessages();
-        this.resources = configuration.resources;
+        this.resources = configuration.docResources;
         this.utils = configuration.utils;
         this.docEnv = rd;
         this.outputdir = outputdir;
     }
 
@@ -119,21 +119,27 @@
 
     void generate() throws DocFileIOException, SimpleDocletException {
         if (docEnv == null || outputdir == null) {
             return;
         }
+        for (ModuleElement mdl : configuration.getSpecifiedModuleElements()) {
+            // If -nodeprecated option is set and the module is marked as deprecated,
+            // do not convert the module files to HTML.
+            if (!(options.noDeprecated() && utils.isDeprecated(mdl)))
+                convertModule(mdl, outputdir);
+        }
         for (PackageElement pkg : configuration.getSpecifiedPackageElements()) {
             // If -nodeprecated option is set and the package is marked as deprecated,
             // do not convert the package files to HTML.
-            if (!(configuration.nodeprecated && utils.isDeprecated(pkg)))
+            if (!(options.noDeprecated() && utils.isDeprecated(pkg)))
                 convertPackage(pkg, outputdir);
         }
         for (TypeElement te : configuration.getSpecifiedTypeElements()) {
             // If -nodeprecated option is set and the class is marked as deprecated
             // or the containing package is deprecated, do not convert the
             // package files to HTML.
-            if (!(configuration.nodeprecated &&
+            if (!(options.noDeprecated() &&
                   (utils.isDeprecated(te) || utils.isDeprecated(utils.containingPackage(te)))))
                 convertClass(te, outputdir);
         }
     }
 
@@ -153,15 +159,36 @@
         for (Element te : utils.getAllClasses(pkg)) {
             // If -nodeprecated option is set and the class is marked as deprecated,
             // do not convert the package files to HTML. We do not check for
             // containing package deprecation since it is already check in
             // the calling method above.
-            if (!(configuration.nodeprecated && utils.isDeprecated(te)))
+            if (!(options.noDeprecated() && utils.isDeprecated(te)))
                 convertClass((TypeElement)te, outputdir);
         }
     }
 
+    /**
+     * Convert the documented packages contained in the given module to an HTML representation.
+     *
+     * @param mdl the module to convert.
+     * @param outputdir the name of the directory to output to.
+     * @throws DocFileIOException if there is a problem generating an output file
+     * @throws SimpleDocletException if there is a problem reading a source file
+     */
+    public void convertModule(ModuleElement mdl, DocPath outputdir)
+            throws DocFileIOException, SimpleDocletException {
+        if (mdl == null) {
+            return;
+        }
+        for (Element elem : mdl.getEnclosedElements()) {
+            if (elem instanceof PackageElement && configuration.docEnv.isIncluded(elem)
+                    && !(options.noDeprecated() && utils.isDeprecated(elem))) {
+                convertPackage((PackageElement) elem, outputdir);
+            }
+        }
+    }
+
     /**
      * Convert the given Class to an HTML.
      *
      * @param te the class to convert.
      * @param outputdir the name of the directory to output to
@@ -208,14 +235,14 @@
      *
      * @param body the documentation content to be written to the file.
      * @param path the path for the file.
      */
     private void writeToFile(Content body, DocPath path, TypeElement te) throws DocFileIOException {
-        Head head = new Head(path, configuration.docletVersion)
-//                .setTimestamp(!configuration.notimestamp) // temporary: compatibility!
+        Head head = new Head(path, configuration.docletVersion, configuration.startTime)
+//                .setTimestamp(!options.notimestamp) // temporary: compatibility!
                 .setTitle(resources.getText("doclet.Window_Source_title"))
-//                .setCharset(configuration.charset) // temporary: compatibility!
+//                .setCharset(options.charset) // temporary: compatibility!
                 .setDescription(HtmlDocletWriter.getDescription("source", te))
                 .setGenerator(HtmlDocletWriter.getGenerator(getClass()))
                 .addDefaultScript(false)
                 .setStylesheets(configuration.getMainStylesheet(), configuration.getAdditionalStylesheets());
         Content htmlTree = HtmlTree.HTML(configuration.getLocale().getLanguage(),
@@ -229,11 +256,11 @@
      * Returns a link to the stylesheet file.
      *
      * @param head an HtmlTree to which the stylesheet links will be added
      */
     public void addStyleSheetProperties(Content head) {
-        String filename = configuration.stylesheetfile;
+        String filename = options.stylesheetFile();
         DocPath stylesheet;
         if (filename.length() > 0) {
             DocFile file = DocFile.createFileForInput(configuration, filename);
             stylesheet = DocPath.create(file.getName());
         } else {
@@ -244,20 +271,17 @@
         head.add(link);
         addStylesheets(head);
     }
 
     protected void addStylesheets(Content tree) {
-        List<String> stylesheets = configuration.additionalStylesheets;
-        if (!stylesheets.isEmpty()) {
-            stylesheets.forEach((ssheet) -> {
-                DocFile file = DocFile.createFileForInput(configuration, ssheet);
-                DocPath ssheetPath = DocPath.create(file.getName());
-                HtmlTree slink = HtmlTree.LINK("stylesheet", "text/css", relativePath.resolve(ssheetPath).getPath(),
-                        "Style");
-                tree.add(slink);
-            });
-        }
+        options.additionalStylesheets().forEach(css -> {
+            DocFile file = DocFile.createFileForInput(configuration, css);
+            DocPath cssPath = DocPath.create(file.getName());
+            HtmlTree slink = HtmlTree.LINK("stylesheet", "text/css", relativePath.resolve(cssPath).getPath(),
+                                           "Style");
+            tree.add(slink);
+        });
     }
 
     /**
      * Get the header.
      *
@@ -293,11 +317,11 @@
      * @param line the string to format.
      * @param currentLineNo the current number.
      */
     private void addLine(Content pre, String line, int currentLineNo) {
         if (line != null) {
-            Content anchor = HtmlTree.A_ID(
+            Content anchor = HtmlTree.SPAN_ID(
                     "line." + Integer.toString(currentLineNo),
                     new StringContent(utils.replaceTabs(line)));
             pre.add(anchor);
             pre.add(NEW_LINE);
         }
