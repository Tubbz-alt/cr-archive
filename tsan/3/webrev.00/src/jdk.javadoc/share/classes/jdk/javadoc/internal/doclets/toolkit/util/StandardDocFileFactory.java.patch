diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/StandardDocFileFactory.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/StandardDocFileFactory.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/StandardDocFileFactory.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/StandardDocFileFactory.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -84,11 +84,11 @@
                 String dirName = destDirName.isEmpty() ? "." : destDirName;
                 Path dir = Paths.get(dirName);
                 fileManager.setLocationFromPaths(DocumentationTool.Location.DOCUMENTATION_OUTPUT, Arrays.asList(dir));
             } catch (IOException e) {
                 // generic IOException from file manager, setting location, e.g. file not a directory
-                String message = configuration.getResources().getText("doclet.error.initializing.dest.dir", e);
+                String message = configuration.getDocResources().getText("doclet.error.initializing.dest.dir", e);
                 throw new SimpleDocletException(message, e);
             }
         }
 
         destDir = fileManager.getLocationAsPaths(DocumentationTool.Location.DOCUMENTATION_OUTPUT).iterator().next();
@@ -205,11 +205,12 @@
             if (location != DocumentationTool.Location.DOCUMENTATION_OUTPUT)
                 throw new IllegalStateException();
 
             try {
                 OutputStream out = getFileObjectForOutput(path).openOutputStream();
-                return new BufferedWriter(new OutputStreamWriter(out, configuration.docencoding));
+                String docencoding = configuration.getOptions().docEncoding();
+                return new BufferedWriter(new OutputStreamWriter(out, docencoding));
             } catch (IOException e) {
                 throw new DocFileIOException(this, DocFileIOException.Mode.WRITE, e);
             }
         }
 
@@ -326,11 +327,11 @@
         }
 
         /**
          * Resolve a relative file against the given output location.
          * @param locn Currently, only
-         * {@link DocumentationTool.Location.DOCUMENTATION_OUTPUT} is supported.
+         * {@link DocumentationTool.Location#DOCUMENTATION_OUTPUT} is supported.
          */
         @Override
         public DocFile resolveAgainst(Location locn) {
             if (locn != DocumentationTool.Location.DOCUMENTATION_OUTPUT)
                 throw new IllegalArgumentException();
