diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/ElementListWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/ElementListWriter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/ElementListWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/ElementListWriter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -30,25 +30,25 @@
 import javax.lang.model.element.ModuleElement;
 import javax.lang.model.element.PackageElement;
 
 import jdk.javadoc.doclet.DocletEnvironment;
 import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;
+import jdk.javadoc.internal.doclets.toolkit.BaseOptions;
 
 
 /**
  * Write out the element index.
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
- *
- * @author Atul M Dambalkar
  */
 public class ElementListWriter {
 
     private final BaseConfiguration configuration;
+    private final BaseOptions options;
     private final Utils utils;
     private final DocFile file;
 
     /**
      * Constructor.
@@ -56,10 +56,11 @@
      * @param configuration the current configuration of the doclet.
      */
     public ElementListWriter(BaseConfiguration configuration) {
         file = DocFile.createFileForOutput(configuration, DocPaths.ELEMENT_LIST);
         this.configuration = configuration;
+        this.options = configuration.getOptions();
         this.utils = configuration.utils;
     }
 
     /**
      * Generate the element index.
@@ -74,11 +75,11 @@
 
     protected void generateElementListFile(DocletEnvironment docEnv) throws DocFileIOException {
         try (BufferedWriter out = new BufferedWriter(file.openWriter())) {
             if (configuration.showModules) {
                 for (ModuleElement mdle : configuration.modulePackages.keySet()) {
-                    if (!(configuration.nodeprecated && utils.isDeprecated(mdle))) {
+                    if (!(options.noDeprecated() && utils.isDeprecated(mdle))) {
                         out.write(DocletConstants.MODULE_PREFIX + mdle.toString());
                         out.newLine();
                         for (PackageElement pkg : configuration.modulePackages.get(mdle)) {
                             out.write(pkg.toString());
                             out.newLine();
@@ -87,11 +88,11 @@
                 }
             } else {
                 for (PackageElement pkg : configuration.packages) {
                     // if the -nodeprecated option is set and the package is marked as
                     // deprecated, do not include it in the packages list.
-                    if (!(configuration.nodeprecated && utils.isDeprecated(pkg))) {
+                    if (!(options.noDeprecated() && utils.isDeprecated(pkg))) {
                         out.write(pkg.toString());
                         out.newLine();
                     }
                 }
             }
