diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MethodBuilder.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MethodBuilder.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MethodBuilder.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MethodBuilder.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -30,11 +30,11 @@
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
 
-import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;
+import jdk.javadoc.internal.doclets.toolkit.BaseOptions;
 import jdk.javadoc.internal.doclets.toolkit.Content;
 import jdk.javadoc.internal.doclets.toolkit.DocletException;
 import jdk.javadoc.internal.doclets.toolkit.MethodWriter;
 import jdk.javadoc.internal.doclets.toolkit.util.DocFinder;
 
@@ -45,13 +45,10 @@
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
- *
- * @author Jamie Ho
- * @author Bhavesh Patel (Modified)
  */
 public class MethodBuilder extends AbstractMemberBuilder {
 
     /**
      * The index of the current field that is being documented at this point
@@ -72,11 +69,11 @@
 
     /**
      * Construct a new MethodBuilder.
      *
      * @param context       the build context.
-     * @param typeElement the class whoses members are being documented.
+     * @param typeElement the class whose members are being documented.
      * @param writer the doclet specific writer.
      */
     private MethodBuilder(Context context,
             TypeElement typeElement,
             MethodWriter writer) {
@@ -87,31 +84,25 @@
 
     /**
      * Construct a new MethodBuilder.
      *
      * @param context       the build context.
-     * @param typeElement the class whoses members are being documented.
+     * @param typeElement the class whose members are being documented.
      * @param writer the doclet specific writer.
      *
      * @return an instance of a MethodBuilder.
      */
     public static MethodBuilder getInstance(Context context,
             TypeElement typeElement, MethodWriter writer) {
         return new MethodBuilder(context, typeElement, writer);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public boolean hasMembersToDocument() {
         return !methods.isEmpty();
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public void build(Content contentTree) throws DocletException {
         buildMethodDoc(contentTree);
     }
 
@@ -124,27 +115,25 @@
     protected void buildMethodDoc(Content memberDetailsTree) throws DocletException {
         if (writer == null) {
             return;
         }
         if (hasMembersToDocument()) {
-            Content methodDetailsTree = writer.getMethodDetailsTreeHeader(typeElement,
-                    memberDetailsTree);
+            Content methodDetailsTreeHeader = writer.getMethodDetailsTreeHeader(memberDetailsTree);
+            Content methodDetailsTree = writer.getMemberTreeHeader();
 
-            Element lastElement = methods.get(methods.size() - 1);
             for (Element method : methods) {
                 currentMethod = (ExecutableElement)method;
-                Content methodDocTree = writer.getMethodDocTreeHeader(currentMethod, methodDetailsTree);
+                Content methodDocTree = writer.getMethodDocTreeHeader(currentMethod);
 
                 buildSignature(methodDocTree);
                 buildDeprecationInfo(methodDocTree);
                 buildMethodComments(methodDocTree);
                 buildTagInfo(methodDocTree);
 
-                methodDetailsTree.add(writer.getMethodDoc(
-                        methodDocTree, currentMethod == lastElement));
+                methodDetailsTree.add(writer.getMethodDoc(methodDocTree));
             }
-            memberDetailsTree.add(writer.getMethodDetails(methodDetailsTree));
+            memberDetailsTree.add(writer.getMethodDetails(methodDetailsTreeHeader, methodDetailsTree));
         }
     }
 
     /**
      * Build the signature.
@@ -164,16 +153,16 @@
         writer.addDeprecated(currentMethod, methodDocTree);
     }
 
     /**
      * Build the comments for the method.  Do nothing if
-     * {@link BaseConfiguration#nocomment} is set to true.
+     * {@link BaseOptions#noComment} is set to true.
      *
      * @param methodDocTree the content tree to which the documentation will be added
      */
     protected void buildMethodComments(Content methodDocTree) {
-        if (!configuration.nocomment) {
+        if (!options.noComment()) {
             ExecutableElement method = currentMethod;
             if (utils.getFullBody(currentMethod).isEmpty()) {
                 DocFinder.Output docs = DocFinder.search(configuration,
                         new DocFinder.Input(utils, currentMethod));
                 if (docs.inlineTags != null && !docs.inlineTags.isEmpty())
