diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/CommentHelper.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/CommentHelper.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/CommentHelper.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/CommentHelper.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -26,14 +26,14 @@
 package jdk.javadoc.internal.doclets.toolkit.util;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.stream.Collectors;
 
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.ModuleElement;
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
 
 import com.sun.source.doctree.AttributeTree;
@@ -81,32 +81,40 @@
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
  */
 public class CommentHelper {
+    private final BaseConfiguration configuration;
     public final TreePath path;
-    public final DocCommentTree dctree;
+    public final DocCommentTree dcTree;
     public final Element element;
     private Element overriddenElement;
 
     public static final String SPACER = " ";
 
-    public CommentHelper(BaseConfiguration configuration, Element element, TreePath path, DocCommentTree dctree) {
-        //this.configuration = configuration;
+    /**
+     * Creates a utility class to encapsulate the contextual information for a doc comment tree.
+     *
+     * @param configuration the configuration
+     * @param element       the element for which this is a doc comment
+     * @param path          the path for the element
+     * @param dcTree        the doc comment
+     */
+    public CommentHelper(BaseConfiguration configuration, Element element, TreePath path, DocCommentTree dcTree) {
+        this.configuration = configuration;
         this.element = element;
         this.path = path;
-        this.dctree = dctree;
+        this.dcTree = dcTree;
     }
 
     public void setOverrideElement(Element ove) {
         if (this.element == ove) {
-            throw new AssertionError("cannot set given element as overriden element");
+            throw new AssertionError("cannot set given element as overridden element");
         }
         overriddenElement = ove;
     }
 
-    @SuppressWarnings("fallthrough")
     public String getTagName(DocTree dtree) {
         switch (dtree.getKind()) {
             case AUTHOR:
             case DEPRECATED:
             case PARAM:
@@ -117,13 +125,13 @@
             case SERIAL_FIELD:
             case THROWS:
             case UNKNOWN_BLOCK_TAG:
             case USES:
             case VERSION:
-                return ((BlockTagTree)dtree).getTagName();
+                return ((BlockTagTree) dtree).getTagName();
             case UNKNOWN_INLINE_TAG:
-                return ((InlineTagTree)dtree).getTagName();
+                return ((InlineTagTree) dtree).getTagName();
             case ERRONEOUS:
                 return "erroneous";
             default:
                 return dtree.getKind().tagName;
         }
@@ -142,56 +150,60 @@
         } else {
             return null;
         }
     }
 
-    Element getElement(BaseConfiguration c, ReferenceTree rtree) {
+    Element getElement(ReferenceTree rtree) {
+        Utils utils = configuration.utils;
         // likely a synthesized tree
         if (path == null) {
-            TypeMirror symbol = c.utils.getSymbol(rtree.getSignature());
+            // NOTE: this code path only supports module/package/type signatures
+            //       and not member signatures. For more complete support,
+            //       set a suitable path and avoid this branch.
+            TypeMirror symbol = utils.getSymbol(rtree.getSignature());
             if (symbol == null) {
                 return null;
             }
-            return  c.docEnv.getTypeUtils().asElement(symbol);
+            return configuration.docEnv.getTypeUtils().asElement(symbol);
         }
         // case A: the element contains no comments associated and
         // the comments need to be copied from ancestor
         // case B: the element has @inheritDoc, then the ancestral comment
         // as appropriate has to be copied over.
 
         // Case A.
-        if (dctree == null && overriddenElement != null) {
-            CommentHelper ovch = c.utils.getCommentHelper(overriddenElement);
-            return ovch.getElement(c, rtree);
+        if (dcTree == null && overriddenElement != null) {
+            CommentHelper ovch = utils.getCommentHelper(overriddenElement);
+            return ovch.getElement(rtree);
         }
-        if (dctree == null) {
+        if (dcTree == null) {
             return null;
         }
-        DocTreePath docTreePath = DocTreePath.getPath(path, dctree, rtree);
+        DocTreePath docTreePath = DocTreePath.getPath(path, dcTree, rtree);
         if (docTreePath == null) {
             // Case B.
             if (overriddenElement != null) {
-                CommentHelper ovch = c.utils.getCommentHelper(overriddenElement);
-                return ovch.getElement(c, rtree);
+                CommentHelper ovch = utils.getCommentHelper(overriddenElement);
+                return ovch.getElement(rtree);
             }
             return null;
         }
-        DocTrees doctrees = c.docEnv.getDocTrees();
+        DocTrees doctrees = configuration.docEnv.getDocTrees();
         return doctrees.getElement(docTreePath);
     }
 
-    public Element getException(BaseConfiguration c, DocTree dtree) {
+    public Element getException(DocTree dtree) {
         if (dtree.getKind() == THROWS || dtree.getKind() == EXCEPTION) {
             ThrowsTree tt = (ThrowsTree)dtree;
             ReferenceTree exceptionName = tt.getExceptionName();
-            return getElement(c, exceptionName);
+            return getElement(exceptionName);
         }
         return null;
     }
 
-    public List<? extends DocTree> getDescription(BaseConfiguration c, DocTree dtree) {
-        return getTags(c, dtree);
+    public List<? extends DocTree> getDescription(DocTree dtree) {
+        return getTags(dtree);
     }
 
     public String getText(List<? extends DocTree> list) {
         StringBuilder sb = new StringBuilder();
         for (DocTree dt : list) {
@@ -219,20 +231,18 @@
                 switch (node.getValueKind()) {
                     case DOUBLE:
                         quote = "\"";
                         break;
                     case SINGLE:
-                        quote = "\'";
+                        quote = "'";
                         break;
                     default:
                         quote = "";
                         break;
                 }
                 sb.append(quote);
-                node.getValue().stream().forEach((dt) -> {
-                    dt.accept(this, null);
-                });
+                node.getValue().forEach(dt -> dt.accept(this, null));
                 sb.append(quote);
                 return null;
             }
 
             @Override
@@ -254,13 +264,11 @@
                 if (node.getReference() == null) {
                     return null;
                 }
 
                 node.getReference().accept(this, null);
-                node.getLabel().stream().forEach((dt) -> {
-                    dt.accept(this, null);
-                });
+                node.getLabel().forEach(dt -> dt.accept(this, null));
                 return null;
             }
 
             @Override
             public Void visitLiteral(LiteralTree node, Void p) {
@@ -280,32 +288,26 @@
                 return null;
             }
 
             @Override
             public Void visitSee(SeeTree node, Void p) {
-                node.getReference().stream().forEach((dt) -> {
-                    dt.accept(this, null);
-                });
+                node.getReference().forEach(dt -> dt.accept(this, null));
                 return null;
             }
 
             @Override
             public Void visitSerial(SerialTree node, Void p) {
-                node.getDescription().stream().forEach((dt) -> {
-                    dt.accept(this, null);
-                });
+                node.getDescription().forEach(dt -> dt.accept(this, null));
                 return null;
             }
 
             @Override
             public Void visitStartElement(StartElementTree node, Void p) {
                 sb.append("<");
                 sb.append(node.getName());
-                node.getAttributes().stream().forEach((dt) -> {
-                    dt.accept(this, null);
-                });
-                sb.append((node.isSelfClosing() ? "/>" : ">"));
+                node.getAttributes().forEach(dt -> dt.accept(this, null));
+                sb.append(node.isSelfClosing() ? "/>" : ">");
                 return null;
             }
 
             @Override
             public Void visitText(TextTree node, Void p) {
@@ -313,13 +315,11 @@
                 return null;
             }
 
             @Override
             public Void visitUnknownBlockTag(UnknownBlockTagTree node, Void p) {
-                node.getContent().stream().forEach((dt) -> {
-                    dt.accept(this, null);
-                });
+                node.getContent().forEach(dt -> dt.accept(this, null));
                 return null;
             }
 
             @Override
             public Void visitValue(ValueTree node, Void p) {
@@ -333,68 +333,69 @@
             }
         }.visit(dt, null);
         return sb;
     }
 
-    public String getLabel(BaseConfiguration c, DocTree dtree) {
+    public String getLabel(DocTree dtree) {
         return new SimpleDocTreeVisitor<String, Void>() {
             @Override
             public String visitLink(LinkTree node, Void p) {
-                StringBuilder sb = new StringBuilder();
-                node.getLabel().stream().forEach((dt) -> {
-                    sb.append(getText(dt));
-                });
-                return sb.toString();
+                return node.getLabel().stream()
+                        .map(dt -> getText(dt))
+                        .collect(Collectors.joining());
             }
 
             @Override
             public String visitSee(SeeTree node, Void p) {
-                StringBuilder sb = new StringBuilder();
-                node.getReference().stream().filter((dt) -> (c.utils.isText(dt))).forEach((dt) -> {
-                    sb.append(((TextTree)dt).getBody());
-                });
-                return sb.toString();
+                Utils utils = configuration.utils;
+                return node.getReference().stream()
+                        .filter(utils::isText)
+                        .map(dt -> ((TextTree) dt).getBody())
+                        .collect(Collectors.joining());
             }
 
             @Override
             protected String defaultAction(DocTree node, Void p) {
                 return "";
             }
         }.visit(dtree, null);
     }
 
-    public TypeElement getReferencedClass(BaseConfiguration c, DocTree dtree) {
-        Element e = getReferencedElement(c, dtree);
+    public TypeElement getReferencedClass(DocTree dtree) {
+        Utils utils = configuration.utils;
+        Element e = getReferencedElement(dtree);
         if (e == null) {
             return null;
-        } else if (c.utils.isTypeElement(e)) {
+        } else if (utils.isTypeElement(e)) {
             return (TypeElement) e;
-        } else if (!c.utils.isPackage(e)) {
-            return c.utils.getEnclosingTypeElement(e);
+        } else if (!utils.isPackage(e)) {
+            return utils.getEnclosingTypeElement(e);
         }
         return null;
     }
 
-    public String getReferencedClassName(BaseConfiguration c, DocTree dtree) {
-        Element e = getReferencedClass(c, dtree);
+    public String getReferencedClassName(DocTree dtree) {
+        Utils utils = configuration.utils;
+        Element e = getReferencedClass(dtree);
         if (e != null) {
-            return c.utils.isTypeElement(e) ? c.utils.getSimpleName(e) : null;
+            return utils.isTypeElement(e) ? utils.getSimpleName(e) : null;
         }
         String s = getReferencedSignature(dtree);
         if (s == null) {
             return null;
         }
         int n = s.indexOf("#");
         return (n == -1) ? s : s.substring(0, n);
     }
 
-    public Element getReferencedMember(BaseConfiguration c, DocTree dtree) {
-        Element e = getReferencedElement(c, dtree);
+    public Element getReferencedMember(DocTree dtree) {
+        Utils utils = configuration.utils;
+        Element e = getReferencedElement(dtree);
         if (e == null) {
             return null;
         }
-        return (c.utils.isExecutableElement(e) || c.utils.isVariableElement(e)) ? e : null;
+        return (utils.isExecutableElement(e) || utils.isVariableElement(e)) ? e : null;
     }
 
     public String getReferencedMemberName(DocTree dtree) {
         String s = getReferencedSignature(dtree);
         if (s == null) {
@@ -402,37 +403,38 @@
         }
         int n = s.indexOf("#");
         return (n == -1) ? null : s.substring(n + 1);
     }
 
-    public String getReferencedMemberName(BaseConfiguration c, Element e) {
+    public String getReferencedMemberName(Element e) {
         if (e == null) {
             return null;
         }
-        return c.utils.isExecutableElement(e)
-                ? c.utils.getSimpleName(e) + c.utils.makeSignature((ExecutableElement) e, true, true)
-                : c.utils.getSimpleName(e);
+        Utils utils = configuration.utils;
+        return utils.isExecutableElement(e)
+                ? utils.getSimpleName(e) + utils.makeSignature((ExecutableElement) e, true, true)
+                : utils.getSimpleName(e);
     }
 
-    public PackageElement getReferencedPackage(BaseConfiguration c, DocTree dtree) {
-        Element e = getReferencedElement(c, dtree);
+    public PackageElement getReferencedPackage(DocTree dtree) {
+        Element e = getReferencedElement(dtree);
         if (e != null) {
-            return c.utils.containingPackage(e);
+            Utils utils = configuration.utils;
+            return utils.containingPackage(e);
         }
         return null;
     }
 
-    public List<? extends DocTree> getFirstSentenceTrees(BaseConfiguration c, List<? extends DocTree> body) {
-        List<DocTree> firstSentence = c.docEnv.getDocTrees().getFirstSentence(body);
-        return firstSentence;
+    public List<? extends DocTree> getFirstSentenceTrees(List<? extends DocTree> body) {
+        return configuration.docEnv.getDocTrees().getFirstSentence(body);
     }
 
-    public List<? extends DocTree> getFirstSentenceTrees(BaseConfiguration c, DocTree dtree) {
-        return getFirstSentenceTrees(c, getBody(c, dtree));
+    public List<? extends DocTree> getFirstSentenceTrees(DocTree dtree) {
+        return getFirstSentenceTrees(getBody(dtree));
     }
 
-    private Element getReferencedElement(BaseConfiguration c, DocTree dtree) {
+    private Element getReferencedElement(DocTree dtree) {
         return new SimpleDocTreeVisitor<Element, Void>() {
             @Override
             public Element visitSee(SeeTree node, Void p) {
                 for (DocTree dt : node.getReference()) {
                     return visit(dt, null);
@@ -455,11 +457,11 @@
                 return visit(node.getReference(), null);
             }
 
             @Override
             public Element visitReference(ReferenceTree node, Void p) {
-                return getElement(c, node);
+                return getElement(node);
             }
 
             @Override
             public Element visitSerialField(SerialFieldTree node, Void p) {
                 return visit(node.getType(), null);
@@ -475,14 +477,15 @@
                return null;
             }
         }.visit(dtree, null);
     }
 
-    public TypeElement getServiceType(BaseConfiguration c, DocTree dtree) {
-        Element e = getReferencedElement(c, dtree);
+    public TypeElement getServiceType(DocTree dtree) {
+        Element e = getReferencedElement(dtree);
         if (e != null) {
-            return c.utils.isTypeElement(e) ? (TypeElement) e : null;
+            Utils utils = configuration.utils;
+            return utils.isTypeElement(e) ? (TypeElement) e : null;
         }
         return null;
     }
 
     public  String getReferencedSignature(DocTree dtree) {
@@ -541,15 +544,15 @@
             default:
                 return null;
             }
     }
 
-    public List<? extends DocTree> getTags(BaseConfiguration c, DocTree dtree) {
+    public List<? extends DocTree> getTags(DocTree dtree) {
         return new SimpleDocTreeVisitor<List<? extends DocTree>, Void>() {
             List<? extends DocTree> asList(String content) {
                 List<DocTree> out = new ArrayList<>();
-                out.add((TextTree)c.cmtUtils.makeTextTree(content));
+                out.add(configuration.cmtUtils.makeTextTree(content));
                 return out;
             }
 
             @Override
             public List<? extends DocTree> visitAuthor(AuthorTree node, Void p) {
@@ -646,40 +649,39 @@
                return Collections.emptyList();
             }
         }.visit(dtree, null);
     }
 
-    public List<? extends DocTree> getBody(BaseConfiguration c, DocTree dtree) {
-        return getTags(c, dtree);
+    public List<? extends DocTree> getBody(DocTree dtree) {
+        return getTags(dtree);
     }
 
     public ReferenceTree getType(DocTree dtree) {
         if (dtree.getKind() == SERIAL_FIELD) {
-            return ((SerialFieldTree)dtree).getType();
+            return ((SerialFieldTree) dtree).getType();
         } else {
             return null;
         }
     }
 
     public DocTreePath getDocTreePath(DocTree dtree) {
-        if (path == null || dctree == null || dtree == null)
+        if (path == null || dcTree == null || dtree == null)
             return null;
-        return DocTreePath.getPath(path, dctree, dtree);
+        return DocTreePath.getPath(path, dcTree, dtree);
     }
 
     public Element getOverriddenElement() {
         return overriddenElement;
     }
 
-
     /**
      * For debugging purposes only. Do not rely on this for other things.
      * @return a string representation.
      */
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder("CommentHelper{" + "path=" + path + ", dctree=" + dctree);
+        StringBuilder sb = new StringBuilder("CommentHelper{" + "path=" + path + ", dcTree=" + dcTree);
         sb.append(", element=");
         sb.append(element.getEnclosingElement());
         sb.append("::");
         sb.append(element);
         sb.append(", overriddenElement=");
