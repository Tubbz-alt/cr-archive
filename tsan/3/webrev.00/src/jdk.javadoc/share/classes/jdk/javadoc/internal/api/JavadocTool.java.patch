diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/api/JavadocTool.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/api/JavadocTool.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/api/JavadocTool.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/api/JavadocTool.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -48,11 +48,11 @@
 import com.sun.tools.javac.file.JavacFileManager;
 import com.sun.tools.javac.file.BaseFileManager;
 import com.sun.tools.javac.util.ClientCodeException;
 import com.sun.tools.javac.util.Context;
 import com.sun.tools.javac.util.Log;
-import jdk.javadoc.internal.tool.ToolOption;
+import jdk.javadoc.internal.tool.ToolOptions;
 
 /**
  * Provides access to functionality specific to the JDK documentation tool,
  * javadoc.
  *
@@ -60,11 +60,12 @@
  * If you write code that depends on this, you do so at your own
  * risk.  This code and its internal interfaces are subject to change
  * or deletion without notice.</b></p>
  */
 public class JavadocTool implements DocumentationTool {
-    // @Override // can't add @Override until bootstrap JDK provides Tool.name()
+
+    @Override
     public String name() {
         return "javadoc";
     }
 
     @Override
@@ -72,11 +73,12 @@
             Writer out,
             JavaFileManager fileManager,
             DiagnosticListener<? super JavaFileObject> diagnosticListener,
             Class<?> docletClass,
             Iterable<String> options,
-            Iterable<? extends JavaFileObject> compilationUnits) {
+            Iterable<? extends JavaFileObject> compilationUnits)
+    {
         Context context = new Context();
         return getTask(out, fileManager, diagnosticListener,
                 docletClass, options, compilationUnits, context);
     }
 
@@ -168,15 +170,9 @@
 
     @Override
     public int isSupportedOption(String option) {
         if (option == null)
             throw new NullPointerException();
-        for (ToolOption o : ToolOption.values()) {
-            for (String name : o.names) {
-                if (name.equals(option))
-                    return o.hasArg ? 1 : 0;
-            }
-        }
-        return -1;
+        return ToolOptions.isSupportedOption(option);
     }
 
 }
