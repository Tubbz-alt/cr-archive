diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/MetaKeywords.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/MetaKeywords.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/MetaKeywords.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/MetaKeywords.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -31,10 +31,12 @@
 import javax.lang.model.element.ModuleElement;
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
 
 import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;
+import jdk.javadoc.internal.doclets.toolkit.BaseOptions;
+import jdk.javadoc.internal.doclets.toolkit.Resources;
 
 /**
  * Provides methods for creating an array of class, method and
  * field names to be included as meta keywords in the HTML header
  * of class pages.  These keywords improve search results
@@ -42,25 +44,24 @@
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
- *
- * @author Doug Kramer
  */
 public class MetaKeywords {
 
-    /**
-     * The global configuration information for this run.
-     */
-    private final BaseConfiguration config;
+    private final BaseOptions options;
+    private final Resources resources;
+    private final Utils utils;
 
     /**
      * Constructor
      */
     public MetaKeywords(BaseConfiguration configuration) {
-        config = configuration;
+        options = configuration.getOptions();
+        resources = configuration.getDocResources();
+        utils = configuration.utils;
     }
 
     /**
      * Returns an array of strings where each element
      * is a class, method or field name.  This array is
@@ -75,14 +76,14 @@
      */
     public List<String> getMetaKeywords(TypeElement typeElement) {
         ArrayList<String> results = new ArrayList<>();
 
         // Add field and method keywords only if -keywords option is used
-        if (config.keywords) {
+        if (options.keywords()) {
             results.addAll(getClassKeyword(typeElement));
-            results.addAll(getMemberKeywords(config.utils.getFields(typeElement)));
-            results.addAll(getMemberKeywords(config.utils.getMethods(typeElement)));
+            results.addAll(getMemberKeywords(utils.getFields(typeElement)));
+            results.addAll(getMemberKeywords(utils.getMethods(typeElement)));
         }
         ((ArrayList)results).trimToSize();
         return results;
     }
 
@@ -90,22 +91,22 @@
      * Get the current class for a meta tag keyword, as the first
      * and only element of an array list.
      */
     protected List<String> getClassKeyword(TypeElement typeElement) {
         ArrayList<String> metakeywords = new ArrayList<>(1);
-        String cltypelower = config.utils.isInterface(typeElement) ? "interface" : "class";
-        metakeywords.add(config.utils.getFullyQualifiedName(typeElement) + " " + cltypelower);
+        String cltypelower = utils.isInterface(typeElement) ? "interface" : "class";
+        metakeywords.add(utils.getFullyQualifiedName(typeElement) + " " + cltypelower);
         return metakeywords;
     }
 
     /**
      * Get the package keywords.
      */
     public List<String> getMetaKeywords(PackageElement packageElement) {
         List<String> result = new ArrayList<>(1);
-        if (config.keywords) {
-            String pkgName = config.utils.getPackageName(packageElement);
+        if (options.keywords()) {
+            String pkgName = utils.getPackageName(packageElement);
             result.add(pkgName + " " + "package");
         }
         return result;
     }
 
@@ -113,11 +114,11 @@
      * Get the module keywords.
      *
      * @param mdle the module being documented
      */
     public List<String> getMetaKeywordsForModule(ModuleElement mdle) {
-        if (config.keywords) {
+        if (options.keywords()) {
             return Arrays.asList(mdle.getQualifiedName() + " " + "module");
         } else {
             return Collections.emptyList();
         }
     }
@@ -125,12 +126,12 @@
     /**
      * Get the overview keywords.
      */
     public List<String> getOverviewMetaKeywords(String title, String docTitle) {
          List<String> result = new ArrayList<>(1);
-        if (config.keywords) {
-            String windowOverview = config.getResources().getText(title);
+        if (options.keywords()) {
+            String windowOverview = resources.getText(title);
             if (docTitle.length() > 0) {
                 result.add(windowOverview + ", " + docTitle);
             } else {
                 result.add(windowOverview);
             }
@@ -148,13 +149,13 @@
      * @param members  array of members to be added to keywords
      */
     protected List<String> getMemberKeywords(List<? extends Element> members) {
         ArrayList<String> results = new ArrayList<>();
         for (Element member : members) {
-            String membername = config.utils.isMethod(member)
-                    ? config.utils.getSimpleName(member) + "()"
-                    : config.utils.getSimpleName(member);
+            String membername = utils.isMethod(member)
+                    ? utils.getSimpleName(member) + "()"
+                    : utils.getSimpleName(member);
             if (!results.contains(membername)) {
                 results.add(membername);
             }
         }
         ((ArrayList)results).trimToSize();
