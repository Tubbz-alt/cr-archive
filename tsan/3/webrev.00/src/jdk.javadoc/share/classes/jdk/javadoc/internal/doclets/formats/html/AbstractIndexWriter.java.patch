diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractIndexWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractIndexWriter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractIndexWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractIndexWriter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,22 +23,24 @@
  * questions.
  */
 
 package jdk.javadoc.internal.doclets.formats.html;
 
-import java.io.*;
-import java.util.*;
-import java.util.zip.*;
+import java.io.IOException;
+import java.io.Writer;
+import java.util.Collection;
+import java.util.List;
 
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.ModuleElement;
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
-import javax.lang.model.util.SimpleElementVisitor9;
+import javax.lang.model.util.SimpleElementVisitor14;
 
 import com.sun.source.doctree.DocTree;
+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTag;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;
 import jdk.javadoc.internal.doclets.formats.html.markup.Navigation;
 import jdk.javadoc.internal.doclets.formats.html.markup.Navigation.PageMode;
@@ -60,36 +62,34 @@
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
  *
  * @see    IndexBuilder
- * @author Atul M Dambalkar
- * @author Bhavesh Patel (Modified)
  */
 public class AbstractIndexWriter extends HtmlDocletWriter {
 
     /**
      * The index of all the members with unicode character.
      */
-    protected IndexBuilder indexbuilder;
+    protected IndexBuilder indexBuilder;
 
     protected Navigation navBar;
 
     /**
      * This constructor will be used by {@link SplitIndexWriter}. Initializes
      * path to this file and relative path from this file.
      *
      * @param configuration  The current configuration
      * @param path       Path to the file which is getting generated.
-     * @param indexbuilder Unicode based Index from {@link IndexBuilder}
+     * @param indexBuilder Unicode based Index from {@link IndexBuilder}
      */
     protected AbstractIndexWriter(HtmlConfiguration configuration,
                                   DocPath path,
-                                  IndexBuilder indexbuilder) {
+                                  IndexBuilder indexBuilder) {
         super(configuration, path);
-        this.indexbuilder = indexbuilder;
-        this.navBar = new Navigation(null, configuration, fixedNavDiv, PageMode.INDEX, path);
+        this.indexBuilder = indexBuilder;
+        this.navBar = new Navigation(null, configuration, PageMode.INDEX, path);
     }
 
     /**
      * Add the member information for the unicode character along with the
      * list of the members.
@@ -164,20 +164,21 @@
         contentTree.add(dl);
     }
 
     protected void addHeading(Character uc, Content contentTree) {
         String unicode = uc.toString();
-        contentTree.add(getMarkerAnchorForIndex(unicode));
         Content headContent = new StringContent(unicode);
-        Content heading = HtmlTree.HEADING(Headings.CONTENT_HEADING, false,
+        HtmlTree heading = HtmlTree.HEADING(Headings.CONTENT_HEADING, false,
                 HtmlStyle.title, headContent);
+        heading.setId(getNameForIndex(unicode));
         contentTree.add(heading);
     }
 
+    @SuppressWarnings("preview")
     protected void addDescription(Content dl, Element element) {
         SearchIndexItem si = new SearchIndexItem();
-        new SimpleElementVisitor9<Void, Void>() {
+        new SimpleElementVisitor14<Void, Void>() {
 
             @Override
             public Void visitModule(ModuleElement e, Void p) {
                 if (configuration.showModules) {
                     addDescription(e, dl, si);
@@ -336,11 +337,11 @@
         dt.add(" - ");
         dt.add(contents.getContent("doclet.Search_tag_in", sii.getHolder()));
         dlTree.add(dt);
         Content dd = new HtmlTree(HtmlTag.DD);
         if (sii.getDescription().isEmpty()) {
-            dd.add(Contents.SPACE);
+            dd.add(Entity.NO_BREAK_SPACE);
         } else {
             dd.add(sii.getDescription());
         }
         dlTree.add(dd);
     }
@@ -405,20 +406,10 @@
         }
         addPreQualifiedClassLink(LinkInfoImpl.Kind.INDEX, containing,
                 false, contentTree);
     }
 
-    /**
-     * Get the marker anchor which will be added to the index documentation tree.
-     *
-     * @param anchorNameForIndex the anchor name attribute for index page
-     * @return a content tree for the marker anchor
-     */
-    public Content getMarkerAnchorForIndex(String anchorNameForIndex) {
-        return links.createAnchor(getNameForIndex(anchorNameForIndex), null);
-    }
-
     /**
      * Generate a valid HTML name for member index page.
      *
      * @param unicode the string that needs to be converted to valid HTML name.
      * @return a valid HTML name string.
@@ -430,47 +421,53 @@
     /**
      * @throws DocFileIOException if there is a problem creating any of the search index files
      */
     protected void createSearchIndexFiles() throws DocFileIOException {
         if (configuration.showModules) {
-            createSearchIndexFile(DocPaths.MODULE_SEARCH_INDEX_JSON, DocPaths.MODULE_SEARCH_INDEX_ZIP,
-                    DocPaths.MODULE_SEARCH_INDEX_JS, configuration.moduleSearchIndex, "moduleSearchIndex");
+            createSearchIndexFile(DocPaths.MODULE_SEARCH_INDEX_JS,
+                                  configuration.moduleSearchIndex,
+                                  "moduleSearchIndex");
         }
         if (!configuration.packages.isEmpty()) {
             SearchIndexItem si = new SearchIndexItem();
             si.setCategory(SearchIndexItem.Category.PACKAGES);
             si.setLabel(resources.getText("doclet.All_Packages"));
             si.setUrl(DocPaths.ALLPACKAGES_INDEX.getPath());
             configuration.packageSearchIndex.add(si);
         }
-        createSearchIndexFile(DocPaths.PACKAGE_SEARCH_INDEX_JSON, DocPaths.PACKAGE_SEARCH_INDEX_ZIP,
-                DocPaths.PACKAGE_SEARCH_INDEX_JS, configuration.packageSearchIndex, "packageSearchIndex");
+        createSearchIndexFile(DocPaths.PACKAGE_SEARCH_INDEX_JS,
+                              configuration.packageSearchIndex,
+                              "packageSearchIndex");
         SearchIndexItem si = new SearchIndexItem();
         si.setCategory(SearchIndexItem.Category.TYPES);
         si.setLabel(resources.getText("doclet.All_Classes"));
         si.setUrl(DocPaths.ALLCLASSES_INDEX.getPath());
         configuration.typeSearchIndex.add(si);
-        createSearchIndexFile(DocPaths.TYPE_SEARCH_INDEX_JSON, DocPaths.TYPE_SEARCH_INDEX_ZIP,
-                DocPaths.TYPE_SEARCH_INDEX_JS, configuration.typeSearchIndex, "typeSearchIndex");
-        createSearchIndexFile(DocPaths.MEMBER_SEARCH_INDEX_JSON, DocPaths.MEMBER_SEARCH_INDEX_ZIP,
-                DocPaths.MEMBER_SEARCH_INDEX_JS, configuration.memberSearchIndex, "memberSearchIndex");
-        createSearchIndexFile(DocPaths.TAG_SEARCH_INDEX_JSON, DocPaths.TAG_SEARCH_INDEX_ZIP,
-                DocPaths.TAG_SEARCH_INDEX_JS, configuration.tagSearchIndex, "tagSearchIndex");
+        createSearchIndexFile(DocPaths.TYPE_SEARCH_INDEX_JS,
+                              configuration.typeSearchIndex,
+                              "typeSearchIndex");
+        createSearchIndexFile(DocPaths.MEMBER_SEARCH_INDEX_JS,
+                              configuration.memberSearchIndex,
+                              "memberSearchIndex");
+        createSearchIndexFile(DocPaths.TAG_SEARCH_INDEX_JS,
+                              configuration.tagSearchIndex,
+                              "tagSearchIndex");
     }
 
     /**
      * Creates a search index file.
      *
-     * @param searchIndexFile   the file to be generated
-     * @param searchIndexZip    the zip file to be generated
      * @param searchIndexJS     the file for the JavaScript to be generated
      * @param searchIndex       the search index items
      * @param varName           the variable name to write in the JavaScript file
      * @throws DocFileIOException if there is a problem creating the search index file
      */
-    protected void createSearchIndexFile(DocPath searchIndexFile, DocPath searchIndexZip,
-            DocPath searchIndexJS, Collection<SearchIndexItem> searchIndex, String varName) throws DocFileIOException {
+    protected void createSearchIndexFile(DocPath searchIndexJS,
+                                         Collection<SearchIndexItem> searchIndex,
+                                         String varName)
+            throws DocFileIOException
+    {
         if (!searchIndex.isEmpty()) {
             StringBuilder searchVar = new StringBuilder("[");
             boolean first = true;
             for (SearchIndexItem item : searchIndex) {
                 if (first) {
@@ -487,22 +484,8 @@
                 wr.write(" = ");
                 wr.write(searchVar.toString());
             } catch (IOException ie) {
                 throw new DocFileIOException(jsFile, DocFileIOException.Mode.WRITE, ie);
             }
-
-            DocFile zipFile = DocFile.createFileForOutput(configuration, searchIndexZip);
-            try (OutputStream fos = zipFile.openOutputStream();
-                    ZipOutputStream zos = new ZipOutputStream(fos)) {
-                try {
-                    ZipEntry ze = new ZipEntry(searchIndexFile.getPath());
-                    zos.putNextEntry(ze);
-                    zos.write(searchVar.toString().getBytes());
-                } finally {
-                    zos.closeEntry();
-                }
-            } catch (IOException ie) {
-                throw new DocFileIOException(zipFile, DocFileIOException.Mode.WRITE, ie);
-            }
         }
     }
 }
