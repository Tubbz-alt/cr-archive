diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/DocletElement.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/DocletElement.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/DocletElement.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/DocletElement.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -33,64 +33,76 @@
 import javax.lang.model.element.Name;
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.type.TypeMirror;
 import javax.tools.FileObject;
 import java.lang.annotation.Annotation;
+import java.util.List;
 import java.util.Set;
 
 public interface DocletElement extends Element {
 
-    public default TypeMirror asType() {
+    @Override
+    default TypeMirror asType() {
         throw new UnsupportedOperationException("Unsupported method");
     }
 
+    @Override
     default ElementKind getKind() {
         return ElementKind.OTHER;
     }
 
+    @Override
     default Set<Modifier> getModifiers() {
         throw new UnsupportedOperationException("Unsupported method");
     }
 
+    @Override
     default Name getSimpleName() {
         throw new UnsupportedOperationException("Unsupported method");
     }
 
+    @Override
     default Element getEnclosingElement() {
         throw new UnsupportedOperationException("Unsupported method");
     }
 
-    default java.util.List<? extends Element> getEnclosedElements() {
+    @Override
+    default List<? extends Element> getEnclosedElements() {
         throw new UnsupportedOperationException("Unsupported method");
     }
 
-    default java.util.List<? extends AnnotationMirror> getAnnotationMirrors() {
+    @Override
+    default List<? extends AnnotationMirror> getAnnotationMirrors() {
         throw new UnsupportedOperationException("Unsupported method");
     }
 
+    @Override
     default <A extends Annotation> A getAnnotation(Class<A> annotationType) {
         throw new UnsupportedOperationException("Unsupported method");
     }
 
+    @Override
     default <R, P> R accept(ElementVisitor<R, P> v, P p) {
         return v.visitUnknown(this, p);
     }
 
+    @Override
     default <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType) {
         throw new UnsupportedOperationException("Unsupported method");
     }
 
     /**
      * Returns the anchoring package element, in the case of a
      * module element, this is the module's unnamed package.
+     *
      * @return the anchor element.
      */
     PackageElement getPackageElement();
 
     /**
      * Returns the file object associated with this special
-     * element such as overview.html, doc-file/foo.html.
+     * element such as {@code overview.html}, {@code doc-files/foo.html}.
      * @return the file object
      */
     FileObject getFileObject();
 
     /**
@@ -100,9 +112,9 @@
     Kind getSubKind();
 
     /**
      * Sub kind enums that this element supports.
      */
-    public static enum Kind {
+    enum Kind {
         OVERVIEW, DOCFILE;
     }
 }
