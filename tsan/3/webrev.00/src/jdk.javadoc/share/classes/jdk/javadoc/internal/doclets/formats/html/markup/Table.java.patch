diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/Table.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -36,11 +36,10 @@
 import java.util.function.IntFunction;
 import java.util.function.Predicate;
 
 import javax.lang.model.element.Element;
 
-import jdk.javadoc.internal.doclets.formats.html.Contents;
 import jdk.javadoc.internal.doclets.toolkit.Content;
 
 /**
  * A builder for HTML tables, such as the summary tables for various
  * types of element.
@@ -75,10 +74,11 @@
     private int rowScopeColumnIndex;
     private List<HtmlStyle> stripedStyles = Arrays.asList(HtmlStyle.altColor, HtmlStyle.rowColor);
     private final List<Content> bodyRows;
     private final List<Integer> bodyRowMasks;
     private String rowIdPrefix = "i";
+    private String id;
 
     /**
      * Creates a builder for an HTML table.
      *
      * @param style     the style class for the {@code <table>} tag
@@ -188,11 +188,10 @@
     /**
      * Sets the header for the table.
      *
      * <p>Notes:
      * <ul>
-     * <li>This currently does not use a {@code <thead>} tag, but probably should, eventually
      * <li>The column styles are not currently applied to the header, but probably should, eventually
      * </ul>
      *
      * @param header the header
      * @return this object
@@ -275,10 +274,21 @@
     public Table setRowIdPrefix(String prefix) {
         rowIdPrefix = prefix;
         return this;
     }
 
+    /**
+     * Sets the id attribute of the table.
+     *
+     * @param id the id
+     * @return this object
+     */
+    public Table setId(String id) {
+        this.id = id;
+        return this;
+    }
+
     /**
      * Add a row of data to the table.
      * Each item of content should be suitable for use as the content of a
      * {@code <th>} or {@code <td>} cell.
      * This method should not be used when the table has tabs: use a method
@@ -395,10 +405,13 @@
      * @return the HTML
      */
     public Content toContent() {
         HtmlTree mainDiv = new HtmlTree(HtmlTag.DIV);
         mainDiv.setStyle(tableStyle);
+        if (id != null) {
+            mainDiv.setId(id);
+        }
         HtmlTree table = new HtmlTree(HtmlTag.TABLE);
         if (tabMap == null || tabs.size() == 1) {
             if (tabMap == null) {
                 table.add(caption);
             } else if (tabs.size() == 1) {
@@ -448,13 +461,15 @@
         return tab;
     }
 
     private Content getTableBody() {
         ContentBuilder tableContent = new ContentBuilder();
-        tableContent.add(header.toContent());
+        Content thead = new HtmlTree(HtmlTag.THEAD);
+        thead.add(header.toContent());
+        tableContent.add(thead);
         Content tbody = new HtmlTree(HtmlTag.TBODY);
-        bodyRows.forEach(row -> tbody.add(row));
+        bodyRows.forEach(tbody::add);
         tableContent.add(tbody);
         return tableContent;
     }
 
     /**
@@ -528,8 +543,8 @@
     }
 
     private HtmlTree getCaption(Content title) {
         return new HtmlTree(HtmlTag.CAPTION,
                 HtmlTree.SPAN(title),
-                HtmlTree.SPAN(tabEnd, Contents.SPACE));
+                HtmlTree.SPAN(tabEnd, Entity.NO_BREAK_SPACE));
     }
 }
