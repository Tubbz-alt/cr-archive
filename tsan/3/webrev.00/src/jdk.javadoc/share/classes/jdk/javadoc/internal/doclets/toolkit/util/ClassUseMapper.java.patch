diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/ClassUseMapper.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/ClassUseMapper.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/ClassUseMapper.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/ClassUseMapper.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -39,11 +39,11 @@
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVariable;
 import javax.lang.model.type.WildcardType;
 import javax.lang.model.util.ElementFilter;
 import javax.lang.model.util.Elements;
-import javax.lang.model.util.SimpleElementVisitor9;
+import javax.lang.model.util.SimpleElementVisitor14;
 import javax.lang.model.util.SimpleTypeVisitor9;
 import javax.lang.model.util.Types;
 
 import jdk.javadoc.doclet.DocletEnvironment;
 import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;
@@ -55,12 +55,10 @@
  *
  * <p>
  * <b>This is NOT part of any supported API. If you write code that depends on this, you do so at
  * your own risk. This code and its internal interfaces are subject to change or deletion without
  * notice.</b>
- *
- * @author Robert G. Field
  */
 public class ClassUseMapper {
 
     private final ClassTree classtree;
 
@@ -481,12 +479,13 @@
      * @param holder the holder that owns the type parameters.
      */
     private <T extends Element> void mapTypeParameters(final Map<TypeElement, List<T>> map,
             Element element, final T holder) {
 
-        SimpleElementVisitor9<Void, Void> elementVisitor
-                = new SimpleElementVisitor9<Void, Void>() {
+        @SuppressWarnings("preview")
+        SimpleElementVisitor14<Void, Void> elementVisitor
+                = new SimpleElementVisitor14<Void, Void>() {
 
                     private void addParameters(TypeParameterElement e) {
                         for (TypeMirror type : utils.getBounds(e)) {
                             addTypeParameterToMap(map, type, holder);
                         }
@@ -558,13 +557,14 @@
      *
      * @param map the map the insert the information into.
      * @param e whose type parameters are being checked.
      * @param holder owning the type parameters.
      */
+    @SuppressWarnings("preview")
     private <T extends Element> void mapAnnotations(final Map<TypeElement, List<T>> map,
             Element e, final T holder) {
-        new SimpleElementVisitor9<Void, Void>() {
+        new SimpleElementVisitor14<Void, Void>() {
 
             void addAnnotations(Element e) {
                 for (AnnotationMirror a : e.getAnnotationMirrors()) {
                     add(map, (TypeElement) a.getAnnotationType().asElement(), holder);
                 }
