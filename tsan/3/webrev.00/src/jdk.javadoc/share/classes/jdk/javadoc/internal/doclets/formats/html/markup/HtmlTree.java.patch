diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/HtmlTree.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/HtmlTree.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/HtmlTree.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/HtmlTree.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -45,12 +45,10 @@
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
- *
- * @author Bhavesh Patel
  */
 public class HtmlTree extends Content {
 
     public final HtmlTag htmlTag;
     private Map<HtmlAttr,String> attrs = Collections.emptyMap();
@@ -98,11 +96,22 @@
      * @return this object
      */
     public HtmlTree put(HtmlAttr attrName, String attrValue) {
         if (attrs.isEmpty())
             attrs = new LinkedHashMap<>(3);
-        attrs.put(nullCheck(attrName), escapeHtmlChars(attrValue));
+        attrs.put(nullCheck(attrName), Entity.escapeHtmlChars(attrValue));
+        return this;
+    }
+
+    /**
+     * Sets the "id" attribute for this tag.
+     *
+     * @param id the value for the id attribute
+     * @return this object
+     */
+    public HtmlTree setId(String id) {
+        put(HtmlAttr.ID, id);
         return this;
     }
 
     /**
      * Sets the "title" attribute for this tag.
@@ -175,50 +184,18 @@
         }
         else
             add(new StringContent(stringContent));
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public int charCount() {
         int n = 0;
         for (Content c : content)
             n += c.charCount();
         return n;
     }
 
-    /**
-     * Given a string, escape all special HTML characters and
-     * return the result.
-     *
-     * @param s The string to check.
-     * @return the original string with all of the HTML characters escaped.
-     */
-    private static String escapeHtmlChars(String s) {
-        for (int i = 0; i < s.length(); i++) {
-            char ch = s.charAt(i);
-            switch (ch) {
-                // only start building a new string if we need to
-                case '<': case '>': case '&':
-                    StringBuilder sb = new StringBuilder(s.substring(0, i));
-                    for ( ; i < s.length(); i++) {
-                        ch = s.charAt(i);
-                        switch (ch) {
-                            case '<': sb.append("&lt;");  break;
-                            case '>': sb.append("&gt;");  break;
-                            case '&': sb.append("&amp;"); break;
-                            default:  sb.append(ch);      break;
-                        }
-                    }
-                    return sb.toString();
-            }
-        }
-        return s;
-    }
-
     /*
      * The sets of ASCII URI characters to be left unencoded.
      * See "Uniform Resource Identifier (URI): Generic Syntax"
      * IETF RFC 3986. https://tools.ietf.org/html/rfc3986
      */
@@ -296,39 +273,10 @@
         HtmlTree htmltree = new HtmlTree(HtmlTag.A, nullCheck(body));
         htmltree.put(HtmlAttr.HREF, encodeURL(ref));
         return htmltree;
     }
 
-    /**
-     * Generates an HTML anchor tag with id attribute and a body.
-     *
-     * @param id id for the anchor tag
-     * @param body body for the anchor tag
-     * @return an HtmlTree object
-     */
-    public static HtmlTree A_ID(String id, Content body) {
-        HtmlTree htmltree = new HtmlTree(HtmlTag.A);
-        htmltree.put(HtmlAttr.ID, nullCheck(id));
-        htmltree.add(nullCheck(body));
-        return htmltree;
-    }
-
-    /**
-     * Generates an HTML anchor tag with a style class, id attribute and a body.
-     *
-     * @param styleClass stylesheet class for the tag
-     * @param id id for the anchor tag
-     * @param body body for the anchor tag
-     * @return an HtmlTree object
-     */
-    public static HtmlTree A_ID(HtmlStyle styleClass, String id, Content body) {
-        HtmlTree htmltree = A_ID(id, body);
-        if (styleClass != null)
-            htmltree.setStyle(styleClass);
-        return htmltree;
-    }
-
     /**
      * Generates a CAPTION tag with some content.
      *
      * @param body content for the tag
      * @return an HtmlTree object for the CAPTION tag
@@ -610,25 +558,10 @@
         HtmlTree htmltree = new HtmlTree(HtmlTag.MAIN, nullCheck(body));
         htmltree.setRole(Role.MAIN);
         return htmltree;
     }
 
-    /**
-     * Generates a MAIN tag with role attribute, style attribute and some content.
-     *
-     * @param styleClass style of the MAIN tag
-     * @param body content of the MAIN tag
-     * @return an HtmlTree object for the MAIN tag
-     */
-    public static HtmlTree MAIN(HtmlStyle styleClass, Content body) {
-        HtmlTree htmltree = HtmlTree.MAIN(body);
-        if (styleClass != null) {
-            htmltree.setStyle(styleClass);
-        }
-        return htmltree;
-    }
-
     /**
      * Generates a META tag with the http-equiv, content and charset attributes.
      *
      * @param httpEquiv http equiv attribute for the META tag
      * @param content type of content
@@ -715,30 +648,34 @@
         htmltree.put(HtmlAttr.SRC, nullCheck(src));
         return htmltree;
     }
 
     /**
-     * Generates a SECTION tag with role attribute.
+     * Generates a SECTION tag with style class attribute.
      *
+     * @param styleClass the style class for the tag
      * @return an HtmlTree object for the SECTION tag
      */
-    public static HtmlTree SECTION() {
-        HtmlTree htmltree = new HtmlTree(HtmlTag.SECTION);
-        htmltree.setRole(Role.REGION);
-        return htmltree;
+    public static HtmlTree SECTION(HtmlStyle styleClass) {
+        HtmlTree htmlTree = new HtmlTree(HtmlTag.SECTION);
+        htmlTree.setStyle(styleClass);
+        return htmlTree;
     }
 
     /**
-     * Generates a SECTION tag with role attribute and some content.
+     * Generates a SECTION tag with style class attribute and some content.
      *
+     * @param styleClass the style class for the tag
      * @param body content of the section tag
      * @return an HtmlTree object for the SECTION tag
      */
-    public static HtmlTree SECTION(Content body) {
-        HtmlTree htmltree = new HtmlTree(HtmlTag.SECTION, nullCheck(body));
-        htmltree.setRole(Role.REGION);
-        return htmltree;
+    public static HtmlTree SECTION(HtmlStyle styleClass, Content body) {
+        HtmlTree htmlTree = new HtmlTree(HtmlTag.SECTION, nullCheck(body));
+        if (styleClass != null) {
+            htmlTree.setStyle(styleClass);
+        }
+        return htmlTree;
     }
 
     /**
      * Generates a SMALL tag with some content.
      *
@@ -772,10 +709,23 @@
         if (styleClass != null)
             htmltree.setStyle(styleClass);
         return htmltree;
     }
 
+    /**
+     * Generates an SPAN tag with id attribute and a body.
+     *
+     * @param id id for the tag
+     * @param body body for the tag
+     * @return an HtmlTree object for the SPAN tag
+     */
+    public static HtmlTree SPAN_ID(String id, Content body) {
+        HtmlTree htmltree = new HtmlTree(HtmlTag.SPAN, nullCheck(body));
+        htmltree.put(HtmlAttr.ID, nullCheck(id));
+        return htmltree;
+    }
+
     /**
      * Generates a SPAN tag with id and style class attributes. It also encloses
      * a content.
      *
      * @param id the id for the tag
@@ -922,13 +872,10 @@
         }
         htmlTree.setStyle(nullCheck(styleClass));
         return htmlTree;
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public boolean isEmpty() {
         return (!hasContent() && !hasAttrs());
     }
 
@@ -986,10 +933,12 @@
             case META :
                 return (hasAttr(HtmlAttr.CONTENT) && !hasContent());
             case SCRIPT :
                 return ((hasAttr(HtmlAttr.TYPE) && hasAttr(HtmlAttr.SRC) && !hasContent()) ||
                         (hasAttr(HtmlAttr.TYPE) && hasContent()));
+            case SPAN :
+                return (hasAttr(HtmlAttr.ID) || hasContent());
             default :
                 return hasContent();
         }
     }
 
@@ -1000,13 +949,10 @@
      */
     public boolean isInline() {
         return (htmlTag.blockType == HtmlTag.BlockType.INLINE);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public boolean write(Writer out, boolean atNewline) throws IOException {
         if (!isInline() && !atNewline)
             out.write(DocletConstants.NL);
         String tagString = htmlTag.toString();
