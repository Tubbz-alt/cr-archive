diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/SimpleTaglet.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/SimpleTaglet.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/SimpleTaglet.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/taglets/SimpleTaglet.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -30,10 +30,11 @@
 import java.util.Set;
 
 import javax.lang.model.element.Element;
 
 import com.sun.source.doctree.DocTree;
+import jdk.javadoc.doclet.Taglet.Location;
 
 import jdk.javadoc.internal.doclets.toolkit.Content;
 import jdk.javadoc.internal.doclets.toolkit.util.CommentHelper;
 import jdk.javadoc.internal.doclets.toolkit.util.DocFinder;
 import jdk.javadoc.internal.doclets.toolkit.util.Utils;
@@ -43,12 +44,10 @@
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
- *
- * @author Jamie Ho
  */
 
 public class SimpleTaglet extends BaseTaglet implements InheritableTaglet {
 
     /**
@@ -63,76 +62,99 @@
      * disabled with an X in the defining string.
      */
     protected final boolean enabled;
 
     /**
-     * Construct a <code>SimpleTaglet</code>.
-     * @param tagName the name of this tag
-     * @param header the header to output.
-     * @param locations the possible locations that this tag
-     * can appear in.  The <code>String</code> can contain 'p'
-     * for package, 't' for type, 'm' for method, 'c' for constructor
-     * and 'f' for field.
+     * Constructs a {@code SimpleTaglet}.
+     *
+     * @param tagName   the name of this tag
+     * @param header    the header to output
+     * @param locations the possible locations that this tag can appear in
+     *                  The string can contain 'p' for package, 't' for type,
+     *                  'm' for method, 'c' for constructor and 'f' for field.
+     *                  See {@linbk #getLocations(String) getLocations} for the
+     *                  complete list.
      */
     public SimpleTaglet(String tagName, String header, String locations) {
-        this(tagName, header, getSites(locations), isEnabled(locations));
+        this(tagName, header, getLocations(locations), isEnabled(locations));
+    }
+
+    /**
+     * Constructs a {@code SimpleTaglet}.
+     *
+     * @param tagKind   the kind of this tag
+     * @param header    the header to output
+     * @param locations the possible locations that this tag can appear in.
+     */
+    public SimpleTaglet(DocTree.Kind tagKind, String header, Set<Location> locations) {
+        this(tagKind, header, locations, true);
+    }
+
+
+    /**
+     * Constructs a {@code SimpleTaglet}.
+     *
+     * @param tagName   the name of this tag
+     * @param header    the header to output.
+     * @param locations the possible locations that this tag can appear in
+     */
+    public SimpleTaglet(String tagName, String header, Set<Location> locations) {
+        this(tagName, header, locations, true);
     }
 
     /**
-     * Construct a <code>SimpleTaglet</code>.
-     * @param tagName the name of this tag
-     * @param header the header to output.
-     * @param sites the possible sites (locations) that this tag
-     * can appear in.  The <code>String</code> can contain 'p'
-     * for package, 't' for type, 'm' for method, 'c' for constructor
-     * and 'f' for field.
+     * Constructs a {@code SimpleTaglet}.
+     *
+     * @param tagName   the name of this tag
+     * @param header    the header to output.
+     * @param locations the possible locations that this tag can appear in
      */
-    public SimpleTaglet(String tagName, String header, Set<Site> sites) {
-        this(tagName, header, sites, true);
+    public SimpleTaglet(String tagName, String header, Set<Location> locations, boolean enabled) {
+        super(tagName, false, locations);
+        this.header = header;
+        this.enabled = enabled;
     }
 
     /**
-     * Construct a <code>SimpleTaglet</code>.
-     * @param tagName the name of this tag
-     * @param header the header to output.
-     * @param sites the possible sites (locations) that this tag
-     * can appear in.  The <code>String</code> can contain 'p'
-     * for package, 't' for type, 'm' for method, 'c' for constructor
-     * and 'f' for field.
+     * Constructs a {@code SimpleTaglet}.
+     *
+     * @param tagKind   the kind of this tag
+     * @param header    the header to output.
+     * @param locations the possible locations that this tag can appear in
      */
-    public SimpleTaglet(String tagName, String header, Set<Site> sites, boolean enabled) {
-        super(tagName, false, sites);
+    public SimpleTaglet(DocTree.Kind tagKind, String header, Set<Location> locations, boolean enabled) {
+        super(tagKind, false, locations);
         this.header = header;
         this.enabled = enabled;
     }
 
-    private static Set<Site> getSites(String locations) {
-        Set<Site> set = EnumSet.noneOf(Site.class);
+    private static Set<Location> getLocations(String locations) {
+        Set<Location> set = EnumSet.noneOf(Location.class);
         for (int i = 0; i < locations.length(); i++) {
             switch (locations.charAt(i)) {
                 case 'a':  case 'A':
-                    return EnumSet.allOf(Site.class);
+                    return EnumSet.allOf(Location.class);
                 case 'c':  case 'C':
-                    set.add(Site.CONSTRUCTOR);
+                    set.add(Location.CONSTRUCTOR);
                     break;
                 case 'f':  case 'F':
-                    set.add(Site.FIELD);
+                    set.add(Location.FIELD);
                     break;
                 case 'm':  case 'M':
-                    set.add(Site.METHOD);
+                    set.add(Location.METHOD);
                     break;
                 case 'o':  case 'O':
-                    set.add(Site.OVERVIEW);
+                    set.add(Location.OVERVIEW);
                     break;
                 case 'p':  case 'P':
-                    set.add(Site.PACKAGE);
+                    set.add(Location.PACKAGE);
                     break;
                 case 's':  case 'S':        // super-packages, anyone?
-                    set.add(Site.MODULE);
+                    set.add(Location.MODULE);
                     break;
                 case 't':  case 'T':
-                    set.add(Site.TYPE);
+                    set.add(Location.TYPE);
                     break;
                 case 'x':  case 'X':
                     break;
             }
         }
@@ -143,18 +165,18 @@
         return locations.matches("[^Xx]*");
     }
 
     @Override
     public void inherit(DocFinder.Input input, DocFinder.Output output) {
-        List<? extends DocTree> tags = input.utils.getBlockTags(input.element, name);
+        List<? extends DocTree> tags = input.utils.getBlockTags(input.element, this);
         if (!tags.isEmpty()) {
             output.holder = input.element;
             output.holderTag = tags.get(0);
             CommentHelper ch = input.utils.getCommentHelper(output.holder);
             output.inlineTags = input.isFirstSentence
-                    ? ch.getFirstSentenceTrees(input.utils.configuration, output.holderTag)
-                    : ch.getTags(input.utils.configuration, output.holderTag);
+                    ? ch.getFirstSentenceTrees(output.holderTag)
+                    : ch.getTags(output.holderTag);
         }
     }
 
     @Override
     public Content getTagletOutput(Element element, DocTree tag, TagletWriter writer) {
@@ -162,11 +184,11 @@
     }
 
     @Override
     public Content getTagletOutput(Element holder, TagletWriter writer) {
         Utils utils = writer.configuration().utils;
-        List<? extends DocTree> tags = utils.getBlockTags(holder, getName());
+        List<? extends DocTree> tags = utils.getBlockTags(holder, this);
         if (header == null || tags.isEmpty()) {
             return null;
         }
         return writer.simpleTagOutput(holder, tags, header);
     }
