diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/JavadocTool.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/JavadocTool.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/JavadocTool.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/tool/JavadocTool.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -30,11 +30,10 @@
 import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
 
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
 import javax.tools.JavaFileObject;
@@ -65,12 +64,10 @@
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
- *
- *  @author Neal Gafter
  */
 public class JavadocTool extends com.sun.tools.javac.main.JavaCompiler {
     ToolEnvironment toolEnv;
 
     final Messager messager;
@@ -121,22 +118,22 @@
             // force the use of Messager as a Log
             messager = Messager.instance0(context);
 
             return new JavadocTool(context);
         } catch (CompletionFailure ex) {
+            assert messager != null;
             messager.error(Position.NOPOS, ex.getMessage());
             return null;
         }
     }
 
-    public DocletEnvironment getEnvironment(Map<ToolOption,
-            Object> jdtoolOpts,
+    public DocletEnvironment getEnvironment(ToolOptions toolOptions,
             List<String> javaNames,
             Iterable<? extends JavaFileObject> fileObjects) throws ToolException {
         toolEnv = ToolEnvironment.instance(context);
-        toolEnv.initialize(jdtoolOpts);
-        ElementsTable etable = new ElementsTable(context, jdtoolOpts);
+        toolEnv.initialize(toolOptions);
+        ElementsTable etable = new ElementsTable(context, toolOptions);
         javadocFinder.sourceCompleter = etable.xclasses
                 ? Completer.NULL_COMPLETER
                 : sourceCompleter;
 
         if (etable.xclasses) {
@@ -221,13 +218,13 @@
             etable.analyze();
 
             // Ensure that package-info is read for all included packages
             for (Element e : etable.getIncludedElements()) {
                 if (e.getKind() == ElementKind.PACKAGE) {
-                    PackageSymbol packge = (PackageSymbol) e;
-                    if (packge.package_info != null) {
-                        packge.package_info.complete();
+                    PackageSymbol p = (PackageSymbol) e;
+                    if (p.package_info != null) {
+                        p.package_info.complete();
                     }
                 }
             }
 
         } catch (CompletionFailure cf) {
@@ -290,11 +287,11 @@
             }
         }
     }
 
     /** Are surrogates supported? */
-    final static boolean surrogatesSupported = surrogatesSupported();
+    static final boolean surrogatesSupported = surrogatesSupported();
     private static boolean surrogatesSupported() {
         try {
             boolean b = Character.isHighSurrogate('a');
             return true;
         } catch (NoSuchMethodError ex) {
