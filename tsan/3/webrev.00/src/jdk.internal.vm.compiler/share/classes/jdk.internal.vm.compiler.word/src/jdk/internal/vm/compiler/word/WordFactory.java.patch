diff a/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.word/src/jdk/internal/vm/compiler/word/WordFactory.java b/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.word/src/jdk/internal/vm/compiler/word/WordFactory.java
--- a/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.word/src/jdk/internal/vm/compiler/word/WordFactory.java
+++ b/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.word/src/jdk/internal/vm/compiler/word/WordFactory.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -45,11 +45,11 @@
 import jdk.internal.vm.compiler.word.impl.WordFactoryOperation;
 
 /**
  * Provides factory method to create machine-word-sized values.
  *
- * @since 1.0
+ * @since 19.0
  */
 public final class WordFactory {
 
     private WordFactory() {
     }
@@ -58,11 +58,11 @@
      * The constant 0, i.e., the word with no bits set. There is no difference between a signed and
      * unsigned zero.
      *
      * @return the constant 0.
      *
-     * @since 1.0
+     * @since 19.0
      */
     @WordFactoryOperation(opcode = WordFactoryOpcode.ZERO)
     public static <T extends WordBase> T zero() {
         return WordBoxFactory.box(0L);
     }
@@ -71,11 +71,11 @@
      * The null pointer, i.e., the pointer with no bits set. There is no difference to a signed or
      * unsigned {@link #zero}.
      *
      * @return the null pointer.
      *
-     * @since 1.0
+     * @since 19.0
      */
     @WordFactoryOperation(opcode = WordFactoryOpcode.ZERO)
     public static <T extends PointerBase> T nullPointer() {
         return WordBoxFactory.box(0L);
     }
@@ -85,11 +85,11 @@
      * 64-bit value (in contrast to the semantics of a Java long).
      *
      * @param val a 64 bit unsigned value
      * @return the value cast to Word
      *
-     * @since 1.0
+     * @since 19.0
      */
     @WordFactoryOperation(opcode = WordFactoryOpcode.FROM_UNSIGNED)
     public static <T extends UnsignedWord> T unsigned(long val) {
         return WordBoxFactory.box(val);
     }
@@ -99,11 +99,11 @@
      * treated as an unsigned 64-bit value (in contrast to the semantics of a Java long).
      *
      * @param val a 64 bit unsigned value
      * @return the value cast to PointerBase
      *
-     * @since 1.0
+     * @since 19.0
      */
     @WordFactoryOperation(opcode = WordFactoryOpcode.FROM_UNSIGNED)
     public static <T extends PointerBase> T pointer(long val) {
         return WordBoxFactory.box(val);
     }
@@ -113,11 +113,11 @@
      * 32-bit value (in contrast to the semantics of a Java int).
      *
      * @param val a 32 bit unsigned value
      * @return the value cast to Word
      *
-     * @since 1.0
+     * @since 19.0
      */
     @WordFactoryOperation(opcode = WordFactoryOpcode.FROM_UNSIGNED)
     public static <T extends UnsignedWord> T unsigned(int val) {
         return WordBoxFactory.box(val & 0xffffffffL);
     }
@@ -127,11 +127,11 @@
      * 64-bit value (unchanged semantics of a Java long).
      *
      * @param val a 64 bit signed value
      * @return the value cast to Word
      *
-     * @since 1.0
+     * @since 19.0
      */
     @WordFactoryOperation(opcode = WordFactoryOpcode.FROM_SIGNED)
     public static <T extends SignedWord> T signed(long val) {
         return WordBoxFactory.box(val);
     }
@@ -141,11 +141,11 @@
      * 32-bit value (unchanged semantics of a Java int).
      *
      * @param val a 32 bit signed value
      * @return the value cast to Word
      *
-     * @since 1.0
+     * @since 19.0
      */
     @WordFactoryOperation(opcode = WordFactoryOpcode.FROM_SIGNED)
     public static <T extends SignedWord> T signed(int val) {
         return WordBoxFactory.box(val);
     }
